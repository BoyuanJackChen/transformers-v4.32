[
    {
        "number": 1,
        "title": "Two Sum",
        "difficulty": 0,
        "prompt": "class Solution:\n    def twoSum(self, nums: List[int], target: int) -> List[int]:\n        \"\"\"\n        Given an array of integers nums and an integer target, return indices of the two numbers such that they add up to target.\n        You may assume that each input would have exactly one solution, and you may not use the same element twice.\n        You can return the answer in any order.\n        Example 1:\n        Input: nums = [2,7,11,15], target = 9\n        Output: [0,1]\n        Explanation: Because nums[0] + nums[1] == 9, we return [0, 1].\n        Example 2:\n        Input: nums = [3,2,4], target = 6\n        Output: [1,2]\n        Example 3:\n        Input: nums = [3,3], target = 6\n        Output: [0,1]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        hash_table = {}\n        for index, num in enumerate(nums):\n            hash_table[num] = index\n        for i, num in enumerate(nums):\n            diff = target - num\n            if diff in hash_table and hash_table[diff]!= i:\n                return [i, hash_table[diff]]"
    },
    {
        "number": 1,
        "title": "Two Sum",
        "difficulty": 0,
        "prompt": "class Solution:\n    def twoSum(self, nums: List[int], target: int) -> List[int]:\n        \"\"\"\n        Given an array of integers nums and an integer target, return indices of the two numbers such that they add up to target.\n        You may assume that each input would have exactly one solution, and you may not use the same element twice.\n        You can return the answer in any order.\n        Example 1:\n        Input: nums = [2,7,11,15], target = 9\n        Output: [0,1]\n        Explanation: Because nums[0] + nums[1] == 9, we return [0, 1].\n        Example 2:\n        Input: nums = [3,2,4], target = 6\n        Output: [1,2]\n        Example 3:\n        Input: nums = [3,3], target = 6\n        Output: [0,1]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        for i in range(len(nums)):\n            for j in range(i+1, len(nums)):\n                if nums[i] + nums[j] == target:\n                    return [i, j]\n        return None\n    \n    def twoSum2(self, nums: List[int], target: int) -> List[int]:\n        \"\"\"\n        Given an array of integers nums and an integer target, return indices of the two numbers such that they add up to target.\n        You may assume that each input would have exactly one solution, and you may not use the same element twice.\n        You can return the answer in any order.\n        Example 1:\n        Input: nums = [2,7,11,15], target = 9\n        Output: [0,1]\n        Explanation: Because nums[0] + nums[1] == 9, we return [0, 1].\n        Example 2:\n        Input: nums = [3,2,4], target = 6\n        Output: [1,2]\n        Example 3:\n        Input: nums = [3,3], target = 6\n        Output: [0,1]\n        \"\"\"\n        for i in range(len(nums)):\n            for j in range(i+1, len"
    },
    {
        "number": 1,
        "title": "Two Sum",
        "difficulty": 0,
        "prompt": "class Solution:\n    def twoSum(self, nums: List[int], target: int) -> List[int]:\n        \"\"\"\n        Given an array of integers nums and an integer target, return indices of the two numbers such that they add up to target.\n        You may assume that each input would have exactly one solution, and you may not use the same element twice.\n        You can return the answer in any order.\n        Example 1:\n        Input: nums = [2,7,11,15], target = 9\n        Output: [0,1]\n        Explanation: Because nums[0] + nums[1] == 9, we return [0, 1].\n        Example 2:\n        Input: nums = [3,2,4], target = 6\n        Output: [1,2]\n        Example 3:\n        Input: nums = [3,3], target = 6\n        Output: [0,1]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 3,
        "answer": "        result = []\n        for i in range(len(nums)):\n            for j in range(i + 1, len(nums)):\n                if nums[i] + nums[j] == target:\n                    result.append(i)\n                    result.append(j)\n        return result"
    },
    {
        "number": 1,
        "title": "Two Sum",
        "difficulty": 0,
        "prompt": "class Solution:\n    def twoSum(self, nums: List[int], target: int) -> List[int]:\n        \"\"\"\n        Given an array of integers nums and an integer target, return indices of the two numbers such that they add up to target.\n        You may assume that each input would have exactly one solution, and you may not use the same element twice.\n        You can return the answer in any order.\n        Example 1:\n        Input: nums = [2,7,11,15], target = 9\n        Output: [0,1]\n        Explanation: Because nums[0] + nums[1] == 9, we return [0, 1].\n        Example 2:\n        Input: nums = [3,2,4], target = 6\n        Output: [1,2]\n        Example 3:\n        Input: nums = [3,3], target = 6\n        Output: [0,1]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 4,
        "answer": "        nums_dict = dict()\n        for i in range(len(nums)):\n            if nums_dict.get(target - nums[i], None) is not None:\n                return [nums_dict[target - nums[i]], i]\n            nums_dict[nums[i]] = i"
    },
    {
        "number": 1,
        "title": "Two Sum",
        "difficulty": 0,
        "prompt": "class Solution:\n    def twoSum(self, nums: List[int], target: int) -> List[int]:\n        \"\"\"\n        Given an array of integers nums and an integer target, return indices of the two numbers such that they add up to target.\n        You may assume that each input would have exactly one solution, and you may not use the same element twice.\n        You can return the answer in any order.\n        Example 1:\n        Input: nums = [2,7,11,15], target = 9\n        Output: [0,1]\n        Explanation: Because nums[0] + nums[1] == 9, we return [0, 1].\n        Example 2:\n        Input: nums = [3,2,4], target = 6\n        Output: [1,2]\n        Example 3:\n        Input: nums = [3,3], target = 6\n        Output: [0,1]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 5,
        "answer": "        dict_nums = {}\n        for i in range(len(nums)):\n            if target - nums[i] in dict_nums:\n                return [dict_nums[target - nums[i]], i]\n            dict_nums[nums[i]] = i"
    },
    {
        "number": 2,
        "title": "Add Two Numbers",
        "difficulty": 1,
        "prompt": "class Solution:\n    def addTwoNumbers(self, l1: Optional[ListNode], l2: Optional[ListNode]) -> Optional[ListNode]:\n        \"\"\"\n        You are given two non-empty linked lists representing two non-negative integers. The digits are stored in reverse order, and each of their nodes contains a single digit. Add the two numbers and return the sum as a linked list.\n        You may assume the two numbers do not contain any leading zero, except the number 0 itself.\n        Example 1:\n        Input: l1 = [2,4,3], l2 = [5,6,4]\n        Output: [7,0,8]\n        Explanation: 342 + 465 = 807.\n        Example 2:\n        Input: l1 = [0], l2 = [0]\n        Output: [0]\n        Example 3:\n        Input: l1 = [9,9,9,9,9,9,9], l2 = [9,9,9,9]\n        Output: [8,9,9,9,0,0,0,1]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        # \u5206\u6790\uff1a\n        # l1 = [2, 4, 3]\n        # l2 = [5, 6, 4]\n        # \u524d\u9762\u5206\u6790\u5f97\u77e5\u4e24\u4e2a\u94fe\u8868\u7684\u957f\u5ea6\u4e0d\u540c\uff0c\u6240\u4ee5\u6211\u4eec\u53ea\u9700\u8981\u8003\u8651\u4e24\u4e2a\u94fe\u8868\u957f\u5ea6\u4e0d\u540c\u7684\u60c5\u51b5\n        # \u5982\u679c\u4e24\u4e2a\u94fe\u8868\u957f\u5ea6\u76f8\u540c\u7684\u8bdd\uff0c\u90a3\u4e48\u540c\u65f6\u904d\u5386\u4e24\u4e2a\u94fe\u8868\uff0c\u76f4\u63a5\u6c42\u548c\uff0c\u5e76\u4e14\u4e0d\u8bba\u8fdb\u4f4d\u63a8\u79fb\u7684\u8fc7\u7a0b\u4e2d\u8ba1\u7b97\u6709\u6ca1\u6709\u8fdb\u4f4d\uff0c\u90fd\u8981\u8fdb\u884c\u8bb0\u5f55\n        # \u800c\u5982\u679c\u4e24\u4e2a\u94fe\u8868\u957f\u5ea6\u4e0d\u540c\u7684\u8bdd\uff0c\u90a3\u4e48\u9700\u8981\u5148\u5224\u65ad\ufffd"
    },
    {
        "number": 2,
        "title": "Add Two Numbers",
        "difficulty": 1,
        "prompt": "class Solution:\n    def addTwoNumbers(self, l1: Optional[ListNode], l2: Optional[ListNode]) -> Optional[ListNode]:\n        \"\"\"\n        You are given two non-empty linked lists representing two non-negative integers. The digits are stored in reverse order, and each of their nodes contains a single digit. Add the two numbers and return the sum as a linked list.\n        You may assume the two numbers do not contain any leading zero, except the number 0 itself.\n        Example 1:\n        Input: l1 = [2,4,3], l2 = [5,6,4]\n        Output: [7,0,8]\n        Explanation: 342 + 465 = 807.\n        Example 2:\n        Input: l1 = [0], l2 = [0]\n        Output: [0]\n        Example 3:\n        Input: l1 = [9,9,9,9,9,9,9], l2 = [9,9,9,9]\n        Output: [8,9,9,9,0,0,0,1]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        # (base) cases\n        if not l1: return l2\n        if not l2: return l1\n        if not l1.next and not l2.next: # to check the last digit\n            return ListNode((l1.val + l2.val) % 10)\n        \n        # general cases\n        # get the last digits of l1 and l2\n        l1_last_val = self.get_last_digit(l1)\n        l2_last_val = self.get_last_digit(l2)\n        \n        # new linked list\n        new_l = ListNode((l1_last_val + l2_last_val) % 10)\n        new_l_head = new_l\n        \n        # get the next digit\n        l1_next_val = (l1.val + l1_last_val) // 10\n        l2_next_val = (l2.val + l2_last_val) // 10\n        \n        # add the next digit\n        if l1_next_val or l2_next_val:\n            new_l.next = ListNode((l1_next_val + l2_next_val) % 10)\n            new_l = new_l.next\n        \n        # the rest"
    },
    {
        "number": 2,
        "title": "Add Two Numbers",
        "difficulty": 1,
        "prompt": "class Solution:\n    def addTwoNumbers(self, l1: Optional[ListNode], l2: Optional[ListNode]) -> Optional[ListNode]:\n        \"\"\"\n        You are given two non-empty linked lists representing two non-negative integers. The digits are stored in reverse order, and each of their nodes contains a single digit. Add the two numbers and return the sum as a linked list.\n        You may assume the two numbers do not contain any leading zero, except the number 0 itself.\n        Example 1:\n        Input: l1 = [2,4,3], l2 = [5,6,4]\n        Output: [7,0,8]\n        Explanation: 342 + 465 = 807.\n        Example 2:\n        Input: l1 = [0], l2 = [0]\n        Output: [0]\n        Example 3:\n        Input: l1 = [9,9,9,9,9,9,9], l2 = [9,9,9,9]\n        Output: [8,9,9,9,0,0,0,1]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 3,
        "answer": "        # Solution 1: recursive\n        # O(n) time\n        # O(n) space\n        # We use the length of each linked list to calculate the carry_num\n        # we should make sure to add the carry_num to each number's head node\n        def add_two_nums(l1, l2, carry_num):\n            if not l1 and not l2 and not carry_num:\n                return None\n            if not l1:\n                l1 = ListNode(0)\n            if not l2:\n                l2 = ListNode(0)\n            node = ListNode(l1.val + l2.val + carry_num)\n            node.next = add_two_nums(l1.next, l2.next, 0)\n            return node\n        return add_two_nums(l1, l2, 0)"
    },
    {
        "number": 2,
        "title": "Add Two Numbers",
        "difficulty": 1,
        "prompt": "class Solution:\n    def addTwoNumbers(self, l1: Optional[ListNode], l2: Optional[ListNode]) -> Optional[ListNode]:\n        \"\"\"\n        You are given two non-empty linked lists representing two non-negative integers. The digits are stored in reverse order, and each of their nodes contains a single digit. Add the two numbers and return the sum as a linked list.\n        You may assume the two numbers do not contain any leading zero, except the number 0 itself.\n        Example 1:\n        Input: l1 = [2,4,3], l2 = [5,6,4]\n        Output: [7,0,8]\n        Explanation: 342 + 465 = 807.\n        Example 2:\n        Input: l1 = [0], l2 = [0]\n        Output: [0]\n        Example 3:\n        Input: l1 = [9,9,9,9,9,9,9], l2 = [9,9,9,9]\n        Output: [8,9,9,9,0,0,0,1]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 4,
        "answer": "        # Create a linked list to store sum of two linked lists\n        output = ListNode(0)\n        curr = output\n        carry = 0\n        while l1 or l2 or carry:\n            # If both linked lists are empty, return the sum of carry\n            if not l1 and not l2:\n                curr.next = ListNode(carry)\n                break\n            # If one of the linked list is empty, append rest of the other list\n            if not l1:\n                l1 = ListNode(0)\n            if not l2:\n                l2 = ListNode(0)\n            # Calculate the sum of two digits and append the sum to the output list\n            sum_ = l1.val + l2.val + carry\n            if sum_ > 9:\n                sum_ = sum_ % 10\n                carry = 1\n            else:\n                carry = 0\n            curr.next = ListNode(sum_)\n            curr = curr.next\n            # Update the pointers\n            l1 = l1.next\n            l2 = l2.next\n        # Return the sum of the linked list\n        return output.next\n<|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>"
    },
    {
        "number": 2,
        "title": "Add Two Numbers",
        "difficulty": 1,
        "prompt": "class Solution:\n    def addTwoNumbers(self, l1: Optional[ListNode], l2: Optional[ListNode]) -> Optional[ListNode]:\n        \"\"\"\n        You are given two non-empty linked lists representing two non-negative integers. The digits are stored in reverse order, and each of their nodes contains a single digit. Add the two numbers and return the sum as a linked list.\n        You may assume the two numbers do not contain any leading zero, except the number 0 itself.\n        Example 1:\n        Input: l1 = [2,4,3], l2 = [5,6,4]\n        Output: [7,0,8]\n        Explanation: 342 + 465 = 807.\n        Example 2:\n        Input: l1 = [0], l2 = [0]\n        Output: [0]\n        Example 3:\n        Input: l1 = [9,9,9,9,9,9,9], l2 = [9,9,9,9]\n        Output: [8,9,9,9,0,0,0,1]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 5,
        "answer": "        # convert the linked list to an integer\n        def to_int(l):\n            l_int = 0\n            for e in l:\n                l_int *= 10\n                l_int += e\n            return l_int"
    },
    {
        "number": 3,
        "title": "Longest Substring Without Repeating Characters",
        "difficulty": 1,
        "prompt": "class Solution:\n    def lengthOfLongestSubstring(self, s: str) -> int:\n        \"\"\"\n        Given a string s, find the length of the longest substring without repeating characters.\n        Example 1:\n        Input: s = \"abcabcbb\"\n        Output: 3\n        Explanation: The answer is \"abc\", with the length of 3.\n        Example 2:\n        Input: s = \"bbbbb\"\n        Output: 1\n        Explanation: The answer is \"b\", with the length of 1.\n        Example 3:\n        Input: s = \"pwwkew\"\n        Output: 3\n        Explanation: The answer is \"wke\", with the length of 3.\n        Notice that the answer must be a substring, \"pwke\" is a subsequence and not a substring.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        max_length = 0\n        start_index = 0\n        end_index = 0\n        window = {}\n        while end_index < len(s):\n            if s[end_index] not in window:\n                window[s[end_index]] = 1\n                max_length = max(max_length, end_index - start_index + 1)\n                end_index += 1\n            else:\n                if window[s[end_index]] == 1:\n                    window[s[end_index]] = 2\n                    start_index += 1\n                else:\n                    window[s[end_index]] += 1\n                    end_index += 1\n        return max_length"
    },
    {
        "number": 3,
        "title": "Longest Substring Without Repeating Characters",
        "difficulty": 1,
        "prompt": "class Solution:\n    def lengthOfLongestSubstring(self, s: str) -> int:\n        \"\"\"\n        Given a string s, find the length of the longest substring without repeating characters.\n        Example 1:\n        Input: s = \"abcabcbb\"\n        Output: 3\n        Explanation: The answer is \"abc\", with the length of 3.\n        Example 2:\n        Input: s = \"bbbbb\"\n        Output: 1\n        Explanation: The answer is \"b\", with the length of 1.\n        Example 3:\n        Input: s = \"pwwkew\"\n        Output: 3\n        Explanation: The answer is \"wke\", with the length of 3.\n        Notice that the answer must be a substring, \"pwke\" is a subsequence and not a substring.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        s_len = len(s)\n        if s_len == 0:\n            return 0"
    },
    {
        "number": 3,
        "title": "Longest Substring Without Repeating Characters",
        "difficulty": 1,
        "prompt": "class Solution:\n    def lengthOfLongestSubstring(self, s: str) -> int:\n        \"\"\"\n        Given a string s, find the length of the longest substring without repeating characters.\n        Example 1:\n        Input: s = \"abcabcbb\"\n        Output: 3\n        Explanation: The answer is \"abc\", with the length of 3.\n        Example 2:\n        Input: s = \"bbbbb\"\n        Output: 1\n        Explanation: The answer is \"b\", with the length of 1.\n        Example 3:\n        Input: s = \"pwwkew\"\n        Output: 3\n        Explanation: The answer is \"wke\", with the length of 3.\n        Notice that the answer must be a substring, \"pwke\" is a subsequence and not a substring.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 3,
        "answer": "        if not s:\n            return 0\n        left, right = 0, 0\n        max_len = 0\n        curr_chars = {}\n        while right < len(s):\n            if s[right] in curr_chars:\n                # update left\n                left = max(left, curr_chars[s[right]] + 1)\n            curr_chars[s[right]] = right\n            max_len = max(max_len, right - left + 1)\n            right += 1\n        return max_len\n<|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>"
    },
    {
        "number": 3,
        "title": "Longest Substring Without Repeating Characters",
        "difficulty": 1,
        "prompt": "class Solution:\n    def lengthOfLongestSubstring(self, s: str) -> int:\n        \"\"\"\n        Given a string s, find the length of the longest substring without repeating characters.\n        Example 1:\n        Input: s = \"abcabcbb\"\n        Output: 3\n        Explanation: The answer is \"abc\", with the length of 3.\n        Example 2:\n        Input: s = \"bbbbb\"\n        Output: 1\n        Explanation: The answer is \"b\", with the length of 1.\n        Example 3:\n        Input: s = \"pwwkew\"\n        Output: 3\n        Explanation: The answer is \"wke\", with the length of 3.\n        Notice that the answer must be a substring, \"pwke\" is a subsequence and not a substring.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 4,
        "answer": "        max_len = 0\n        cur_len = 0\n        hash_set = {}\n        start_idx = 0\n        for i in range(len(s)):\n            if s[i] in hash_set:\n                start_idx = max(start_idx, hash_set[s[i]]+1)\n            cur_len = i - start_idx + 1\n            max_len = max(max_len, cur_len)\n            hash_set[s[i]] = i\n        return max_len"
    },
    {
        "number": 3,
        "title": "Longest Substring Without Repeating Characters",
        "difficulty": 1,
        "prompt": "class Solution:\n    def lengthOfLongestSubstring(self, s: str) -> int:\n        \"\"\"\n        Given a string s, find the length of the longest substring without repeating characters.\n        Example 1:\n        Input: s = \"abcabcbb\"\n        Output: 3\n        Explanation: The answer is \"abc\", with the length of 3.\n        Example 2:\n        Input: s = \"bbbbb\"\n        Output: 1\n        Explanation: The answer is \"b\", with the length of 1.\n        Example 3:\n        Input: s = \"pwwkew\"\n        Output: 3\n        Explanation: The answer is \"wke\", with the length of 3.\n        Notice that the answer must be a substring, \"pwke\" is a subsequence and not a substring.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 5,
        "answer": "        if not s:\n            return 0\n        l, r = 0, 0\n        d = {}\n        max_length = 1\n        while r < len(s):\n            if s[r] not in d or d[s[r]] < l:\n                d[s[r]] = r\n                r += 1\n                max_length = max(max_length, r - l)\n            else:\n                l = d[s[r]] + 1\n                d[s[r]] = r\n                r += 1\n        return max_length\n<|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>"
    },
    {
        "number": 4,
        "title": "Median of Two Sorted Arrays",
        "difficulty": 2,
        "prompt": "class Solution:\n    def findMedianSortedArrays(self, nums1: List[int], nums2: List[int]) -> float:\n        \"\"\"\n        Given two sorted arrays nums1 and nums2 of size m and n respectively, return the median of the two sorted arrays.\n        The overall run time complexity should be O(log (m+n)).\n        Example 1:\n        Input: nums1 = [1,3], nums2 = [2]\n        Output: 2.00000\n        Explanation: merged array = [1,2,3] and median is 2.\n        Example 2:\n        Input: nums1 = [1,2], nums2 = [3,4]\n        Output: 2.50000\n        Explanation: merged array = [1,2,3,4] and median is (2 + 3) / 2 = 2.5.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        nums1_len = len(nums1)\n        nums2_len = len(nums2)\n        if nums1_len == 0 and nums2_len == 0:\n            return 0\n        if nums1_len == 0:\n            return nums2[nums2_len//2]\n        if nums2_len == 0:\n            return nums1[nums1_len//2]\n        len_all = nums1_len + nums2_len\n        if len_all % 2 == 0:\n            return (\n                (self.findKth(nums1, nums2, len_all//2) + self.findKth(nums1, nums2, len_all//2-1)) / 2)\n        else:\n            return self.findKth(nums1, nums2, len_all // 2)"
    },
    {
        "number": 4,
        "title": "Median of Two Sorted Arrays",
        "difficulty": 2,
        "prompt": "class Solution:\n    def findMedianSortedArrays(self, nums1: List[int], nums2: List[int]) -> float:\n        \"\"\"\n        Given two sorted arrays nums1 and nums2 of size m and n respectively, return the median of the two sorted arrays.\n        The overall run time complexity should be O(log (m+n)).\n        Example 1:\n        Input: nums1 = [1,3], nums2 = [2]\n        Output: 2.00000\n        Explanation: merged array = [1,2,3] and median is 2.\n        Example 2:\n        Input: nums1 = [1,2], nums2 = [3,4]\n        Output: 2.50000\n        Explanation: merged array = [1,2,3,4] and median is (2 + 3) / 2 = 2.5.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        l = len(nums1) + len(nums2)\n        if l%2 == 0:\n            return self.get_median_from_middle(nums1,nums2,l//2)\n        else:\n            return self.get_median_from_middle(nums1,nums2,l//2+1)"
    },
    {
        "number": 4,
        "title": "Median of Two Sorted Arrays",
        "difficulty": 2,
        "prompt": "class Solution:\n    def findMedianSortedArrays(self, nums1: List[int], nums2: List[int]) -> float:\n        \"\"\"\n        Given two sorted arrays nums1 and nums2 of size m and n respectively, return the median of the two sorted arrays.\n        The overall run time complexity should be O(log (m+n)).\n        Example 1:\n        Input: nums1 = [1,3], nums2 = [2]\n        Output: 2.00000\n        Explanation: merged array = [1,2,3] and median is 2.\n        Example 2:\n        Input: nums1 = [1,2], nums2 = [3,4]\n        Output: 2.50000\n        Explanation: merged array = [1,2,3,4] and median is (2 + 3) / 2 = 2.5.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 3,
        "answer": "        nums1_length = len(nums1)\n        nums2_length = len(nums2)\n        if nums1_length == 0:\n            return self.get_median(nums2)\n        elif nums2_length == 0:\n            return self.get_median(nums1)\n        if nums1_length + nums2_length % 2 == 0:\n            return self.get_median(self.merge_sort(nums1, nums2))\n        elif nums1_length + nums2_length % 2 == 1:\n            return self.get_median(self.merge_sort(nums1, nums2))"
    },
    {
        "number": 4,
        "title": "Median of Two Sorted Arrays",
        "difficulty": 2,
        "prompt": "class Solution:\n    def findMedianSortedArrays(self, nums1: List[int], nums2: List[int]) -> float:\n        \"\"\"\n        Given two sorted arrays nums1 and nums2 of size m and n respectively, return the median of the two sorted arrays.\n        The overall run time complexity should be O(log (m+n)).\n        Example 1:\n        Input: nums1 = [1,3], nums2 = [2]\n        Output: 2.00000\n        Explanation: merged array = [1,2,3] and median is 2.\n        Example 2:\n        Input: nums1 = [1,2], nums2 = [3,4]\n        Output: 2.50000\n        Explanation: merged array = [1,2,3,4] and median is (2 + 3) / 2 = 2.5.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 4,
        "answer": "        self.nums1 = nums1\n        self.nums2 = nums2\n        self.result = []\n        self.m = len(nums1)\n        self.n = len(nums2)\n        if not self.m:\n            return self.nums2[self.n // 2] if self.n % 2 else (self.nums2[self.n // 2] + self.nums2[self.n // 2 - 1]) / 2\n        if not self.n:\n            return self.nums1[self.m // 2] if self.m % 2 else (self.nums1[self.m // 2] + self.nums1[self.m // 2 - 1]) / 2\n        # \u627e\u5230\u5f53\u524d\u5408\u5e76\u7684\u6570\u7ec4\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c\n        self.find_min_max()\n        # \u8fdb\u884c\u5224\u65ad\n        if self.m + self.n == 2:\n            self.result = [self.nums1[0], self.nums2[0]]\n            return (self.result[0] + self.result[1]) / 2\n        elif self.m + self.n == 3"
    },
    {
        "number": 4,
        "title": "Median of Two Sorted Arrays",
        "difficulty": 2,
        "prompt": "class Solution:\n    def findMedianSortedArrays(self, nums1: List[int], nums2: List[int]) -> float:\n        \"\"\"\n        Given two sorted arrays nums1 and nums2 of size m and n respectively, return the median of the two sorted arrays.\n        The overall run time complexity should be O(log (m+n)).\n        Example 1:\n        Input: nums1 = [1,3], nums2 = [2]\n        Output: 2.00000\n        Explanation: merged array = [1,2,3] and median is 2.\n        Example 2:\n        Input: nums1 = [1,2], nums2 = [3,4]\n        Output: 2.50000\n        Explanation: merged array = [1,2,3,4] and median is (2 + 3) / 2 = 2.5.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 5,
        "answer": "        length = len(nums1) + len(nums2)\n        middle = (length + 1) // 2"
    },
    {
        "number": 5,
        "title": "Longest Palindromic Substring",
        "difficulty": 1,
        "prompt": "class Solution:\n    def longestPalindrome(self, s: str) -> str:\n        \"\"\"\n        Given a string s, return the longest palindromic substring in s.\n        Example 1:\n        Input: s = \"babad\"\n        Output: \"bab\"\n        Explanation: \"aba\" is also a valid answer.\n        Example 2:\n        Input: s = \"cbbd\"\n        Output: \"bb\"\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        if len(s)==0:\n            return \"\"\n        if len(s)==1:\n            return s\n        \n        max_length=1\n        start=0\n        end=0\n        for i in range(len(s)):\n            length=self.check_palindrome(s,i,i)\n            if length>max_length:\n                max_length=length\n                start=i-length//2\n                end=i+length//2\n            length=self.check_palindrome(s,i,i+1)\n            if length>max_length:\n                max_length=length\n                start=i-length//2\n                end=i+length//2\n        return s[start:end+1]\n        \n        \n    def check_palindrome(self,s,left,right):\n        while left>=0 and right<len(s) and s[left]==s[right]:\n            left-=1\n            right+=1\n        return right-left-1\n<|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>"
    },
    {
        "number": 5,
        "title": "Longest Palindromic Substring",
        "difficulty": 1,
        "prompt": "class Solution:\n    def longestPalindrome(self, s: str) -> str:\n        \"\"\"\n        Given a string s, return the longest palindromic substring in s.\n        Example 1:\n        Input: s = \"babad\"\n        Output: \"bab\"\n        Explanation: \"aba\" is also a valid answer.\n        Example 2:\n        Input: s = \"cbbd\"\n        Output: \"bb\"\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        def expand(left: int, right: int) -> str:\n            while left >= 0 and right <= len(s) and s[left] == s[right - 1]:\n                left -= 1\n                right += 1\n            return s[left + 1: right - 1]"
    },
    {
        "number": 5,
        "title": "Longest Palindromic Substring",
        "difficulty": 1,
        "prompt": "class Solution:\n    def longestPalindrome(self, s: str) -> str:\n        \"\"\"\n        Given a string s, return the longest palindromic substring in s.\n        Example 1:\n        Input: s = \"babad\"\n        Output: \"bab\"\n        Explanation: \"aba\" is also a valid answer.\n        Example 2:\n        Input: s = \"cbbd\"\n        Output: \"bb\"\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 3,
        "answer": "        n = len(s)\n        if n < 2:\n            return s\n        max_len = 1\n        res = s[0]\n        for i in range(n - 1):\n            odd = s[i]\n            even = s[i + 1]\n            if i - max_len >= 0 and s[i - max_len] == even:\n                center = i - max_len\n                length = 2 * max_len + 1\n                while center + length <= n and s[center] == even:\n                    if length > max_len:\n                        res = s[center:center + length]\n                        max_len = length\n                    length += 2\n                    center += 2\n            if i - max_len >= 0 and s[i - max_len] == odd:\n                center = i - max_len\n                length = 2 * max_len + 1\n                while center + length <= n and s[center] == odd:\n                    if length > max_len:\n                        res = s[center:center + length]\n                        max_len = length\n                    length += 2\n                    center += 2\n        return res"
    },
    {
        "number": 5,
        "title": "Longest Palindromic Substring",
        "difficulty": 1,
        "prompt": "class Solution:\n    def longestPalindrome(self, s: str) -> str:\n        \"\"\"\n        Given a string s, return the longest palindromic substring in s.\n        Example 1:\n        Input: s = \"babad\"\n        Output: \"bab\"\n        Explanation: \"aba\" is also a valid answer.\n        Example 2:\n        Input: s = \"cbbd\"\n        Output: \"bb\"\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 4,
        "answer": "        if not s:\n            return \"\"\n        ans = \"\"\n        for i in range(len(s)):\n            # odd palindrome\n            temp = self.helper(s, i, i)\n            if len(temp) > len(ans):\n                ans = temp\n            # even palindrome\n            temp = self.helper(s, i, i + 1)\n            if len(temp) > len(ans):\n                ans = temp\n        return ans"
    },
    {
        "number": 5,
        "title": "Longest Palindromic Substring",
        "difficulty": 1,
        "prompt": "class Solution:\n    def longestPalindrome(self, s: str) -> str:\n        \"\"\"\n        Given a string s, return the longest palindromic substring in s.\n        Example 1:\n        Input: s = \"babad\"\n        Output: \"bab\"\n        Explanation: \"aba\" is also a valid answer.\n        Example 2:\n        Input: s = \"cbbd\"\n        Output: \"bb\"\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 5,
        "answer": "        if not s:\n            return s\n        result = ''\n        for i in range(len(s)):\n            l, r = i, i\n            while l >= 0 and r < len(s) and s[l] == s[r]:\n                if (r - l + 1) > len(result):\n                    result = s[l:r+1]\n                l -= 1\n                r += 1\n            l, r = i, i + 1\n            while l >= 0 and r < len(s) and s[l] == s[r]:\n                if (r - l + 1) > len(result):\n                    result = s[l:r+1]\n                l -= 1\n                r += 1\n        return result"
    },
    {
        "number": 6,
        "title": "Zigzag Conversion",
        "difficulty": 1,
        "prompt": "class Solution:\n    def convert(self, s: str, numRows: int) -> str:\n        \"\"\"\n        The string \"PAYPALISHIRING\" is written in a zigzag pattern on a given number of rows like this: (you may want to display this pattern in a fixed font for better legibility)\n        P   A   H   N\n        A P L S I I G\n        Y   I   R\n        And then read line by line: \"PAHNAPLSIIGYIR\"\n        Write the code that will take a string and make this conversion given a number of rows:\n        string convert(string s, int numRows);\n        Example 1:\n        Input: s = \"PAYPALISHIRING\", numRows = 3\n        Output: \"PAHNAPLSIIGYIR\"\n        Example 2:\n        Input: s = \"PAYPALISHIRING\", numRows = 4\n        Output: \"PINALSIGYAHRPI\"\n        Explanation:\n        P     I    N\n        A   L S  I G\n        Y A   H R\n        P     I\n        Example 3:\n        Input: s = \"A\", numRows = 1\n        Output: \"A\"\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        if len(s) <= numRows or numRows == 1:\n            return s\n        res = [\"\"] * numRows\n        i = 0\n        down = False\n        for c in s:\n            res[i] += c\n            if i == 0 or i == numRows - 1:\n                down = not down\n            i += 1 if down else -1\n        return ''.join(res)\n<|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>"
    },
    {
        "number": 6,
        "title": "Zigzag Conversion",
        "difficulty": 1,
        "prompt": "class Solution:\n    def convert(self, s: str, numRows: int) -> str:\n        \"\"\"\n        The string \"PAYPALISHIRING\" is written in a zigzag pattern on a given number of rows like this: (you may want to display this pattern in a fixed font for better legibility)\n        P   A   H   N\n        A P L S I I G\n        Y   I   R\n        And then read line by line: \"PAHNAPLSIIGYIR\"\n        Write the code that will take a string and make this conversion given a number of rows:\n        string convert(string s, int numRows);\n        Example 1:\n        Input: s = \"PAYPALISHIRING\", numRows = 3\n        Output: \"PAHNAPLSIIGYIR\"\n        Example 2:\n        Input: s = \"PAYPALISHIRING\", numRows = 4\n        Output: \"PINALSIGYAHRPI\"\n        Explanation:\n        P     I    N\n        A   L S  I G\n        Y A   H R\n        P     I\n        Example 3:\n        Input: s = \"A\", numRows = 1\n        Output: \"A\"\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        if len(s) < 1 or numRows == 1:\n            return s\n        i, j, k = 0, numRows, numRows\n        res = [\"\"] * numRows\n        while i < len(s):\n            for j in range(0, numRows):\n                res[j] += s[i]\n                i += 1\n                if i == len(s):\n                    break\n            for k in range(numRows - 2, 0, -1):\n                res[k] += s[i]\n                i += 1\n                if i == len(s):\n                    break\n        return \"\".join(res)"
    },
    {
        "number": 6,
        "title": "Zigzag Conversion",
        "difficulty": 1,
        "prompt": "class Solution:\n    def convert(self, s: str, numRows: int) -> str:\n        \"\"\"\n        The string \"PAYPALISHIRING\" is written in a zigzag pattern on a given number of rows like this: (you may want to display this pattern in a fixed font for better legibility)\n        P   A   H   N\n        A P L S I I G\n        Y   I   R\n        And then read line by line: \"PAHNAPLSIIGYIR\"\n        Write the code that will take a string and make this conversion given a number of rows:\n        string convert(string s, int numRows);\n        Example 1:\n        Input: s = \"PAYPALISHIRING\", numRows = 3\n        Output: \"PAHNAPLSIIGYIR\"\n        Example 2:\n        Input: s = \"PAYPALISHIRING\", numRows = 4\n        Output: \"PINALSIGYAHRPI\"\n        Explanation:\n        P     I    N\n        A   L S  I G\n        Y A   H R\n        P     I\n        Example 3:\n        Input: s = \"A\", numRows = 1\n        Output: \"A\"\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 3,
        "answer": "        # Make a list with numRows elements\n        result = ['' for _ in range(numRows)]\n        # Define row, direction and column\n        row = 0\n        direction = 1\n        column = 0\n        # Loop through the string\n        for letter in s:\n            # If the row is 0, we are in the first row, so we have to move up and down\n            if row == 0:\n                direction = 1\n            # If the row is the last one, we have to move down, so we have to multiply the direction by -1\n            elif row == numRows - 1:\n                direction = -1\n            # Otherwise, just go straight\n            else:\n                direction = direction\n            # Update the row\n            row += direction\n            # Update the result\n            result[row] += letter\n        return ''.join(result)"
    },
    {
        "number": 6,
        "title": "Zigzag Conversion",
        "difficulty": 1,
        "prompt": "class Solution:\n    def convert(self, s: str, numRows: int) -> str:\n        \"\"\"\n        The string \"PAYPALISHIRING\" is written in a zigzag pattern on a given number of rows like this: (you may want to display this pattern in a fixed font for better legibility)\n        P   A   H   N\n        A P L S I I G\n        Y   I   R\n        And then read line by line: \"PAHNAPLSIIGYIR\"\n        Write the code that will take a string and make this conversion given a number of rows:\n        string convert(string s, int numRows);\n        Example 1:\n        Input: s = \"PAYPALISHIRING\", numRows = 3\n        Output: \"PAHNAPLSIIGYIR\"\n        Example 2:\n        Input: s = \"PAYPALISHIRING\", numRows = 4\n        Output: \"PINALSIGYAHRPI\"\n        Explanation:\n        P     I    N\n        A   L S  I G\n        Y A   H R\n        P     I\n        Example 3:\n        Input: s = \"A\", numRows = 1\n        Output: \"A\"\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 4,
        "answer": "        if numRows == 1:\n            return s\n        out = [\"\" for _ in range(numRows)]\n        up = True\n        idx = 0\n        for ch in s:\n            out[idx] += ch\n            if up:\n                idx += 1\n            else:\n                idx -= 1\n            if idx == 0:\n                up = True\n            elif idx == numRows - 1:\n                up = False\n        return \"\".join(out)"
    },
    {
        "number": 6,
        "title": "Zigzag Conversion",
        "difficulty": 1,
        "prompt": "class Solution:\n    def convert(self, s: str, numRows: int) -> str:\n        \"\"\"\n        The string \"PAYPALISHIRING\" is written in a zigzag pattern on a given number of rows like this: (you may want to display this pattern in a fixed font for better legibility)\n        P   A   H   N\n        A P L S I I G\n        Y   I   R\n        And then read line by line: \"PAHNAPLSIIGYIR\"\n        Write the code that will take a string and make this conversion given a number of rows:\n        string convert(string s, int numRows);\n        Example 1:\n        Input: s = \"PAYPALISHIRING\", numRows = 3\n        Output: \"PAHNAPLSIIGYIR\"\n        Example 2:\n        Input: s = \"PAYPALISHIRING\", numRows = 4\n        Output: \"PINALSIGYAHRPI\"\n        Explanation:\n        P     I    N\n        A   L S  I G\n        Y A   H R\n        P     I\n        Example 3:\n        Input: s = \"A\", numRows = 1\n        Output: \"A\"\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 5,
        "answer": "        n = len(s)\n        if numRows == 1:\n            return s\n        else:\n            l = [''] * n\n            row = 0\n            direct = 1\n            for i in range(n):\n                l[row] += s[i]\n                if row == 0 or row == numRows - 1:\n                    direct = -direct\n                row += direct\n            return ''.join(l)"
    },
    {
        "number": 7,
        "title": "Reverse Integer",
        "difficulty": 1,
        "prompt": "class Solution:\n    def reverse(self, x: int) -> int:\n        \"\"\"\n        Given a signed 32-bit integer x, return x with its digits reversed. If reversing x causes the value to go outside the signed 32-bit integer range [-231, 231 - 1], then return 0.\n        Assume the environment does not allow you to store 64-bit integers (signed or unsigned).\n        Example 1:\n        Input: x = 123\n        Output: 321\n        Example 2:\n        Input: x = -123\n        Output: -321\n        Example 3:\n        Input: x = 120\n        Output: 21\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        if x < 0:\n            x = -int(str(abs(x))[::-1])\n            if x < 2**31:\n                return x\n            else:\n                return 0\n        else:\n            x = int(str(x)[::-1])\n            if x < 2**31:\n                return x\n            else:\n                return 0"
    },
    {
        "number": 7,
        "title": "Reverse Integer",
        "difficulty": 1,
        "prompt": "class Solution:\n    def reverse(self, x: int) -> int:\n        \"\"\"\n        Given a signed 32-bit integer x, return x with its digits reversed. If reversing x causes the value to go outside the signed 32-bit integer range [-231, 231 - 1], then return 0.\n        Assume the environment does not allow you to store 64-bit integers (signed or unsigned).\n        Example 1:\n        Input: x = 123\n        Output: 321\n        Example 2:\n        Input: x = -123\n        Output: -321\n        Example 3:\n        Input: x = 120\n        Output: 21\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        negative = False\n        if x < 0:\n            negative = True\n            x = -x\n        y = list(str(x))\n        y.reverse()\n        y = int(''.join(y))\n        if negative:\n            y = -y\n        if abs(y) > 2 ** 31 - 1:\n            return 0\n        return y"
    },
    {
        "number": 7,
        "title": "Reverse Integer",
        "difficulty": 1,
        "prompt": "class Solution:\n    def reverse(self, x: int) -> int:\n        \"\"\"\n        Given a signed 32-bit integer x, return x with its digits reversed. If reversing x causes the value to go outside the signed 32-bit integer range [-231, 231 - 1], then return 0.\n        Assume the environment does not allow you to store 64-bit integers (signed or unsigned).\n        Example 1:\n        Input: x = 123\n        Output: 321\n        Example 2:\n        Input: x = -123\n        Output: -321\n        Example 3:\n        Input: x = 120\n        Output: 21\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 3,
        "answer": "        import math\n        if x < 0:\n            x = x * (-1)\n            num_to_list = list(str(x))\n            num_to_list.pop()\n            num_to_list.reverse()\n            num_to_list.insert(0, '-')\n            return int(''.join(num_to_list))\n        num_to_list = list(str(x))\n        num_to_list.reverse()\n        num_to_list.insert(0, '-')\n        return int(''.join(num_to_list))"
    },
    {
        "number": 7,
        "title": "Reverse Integer",
        "difficulty": 1,
        "prompt": "class Solution:\n    def reverse(self, x: int) -> int:\n        \"\"\"\n        Given a signed 32-bit integer x, return x with its digits reversed. If reversing x causes the value to go outside the signed 32-bit integer range [-231, 231 - 1], then return 0.\n        Assume the environment does not allow you to store 64-bit integers (signed or unsigned).\n        Example 1:\n        Input: x = 123\n        Output: 321\n        Example 2:\n        Input: x = -123\n        Output: -321\n        Example 3:\n        Input: x = 120\n        Output: 21\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 4,
        "answer": "        # Python handles negative numbers just fine with long type\n        # return int(str(abs(x))[::-1]) * (-1 if x < 0 else 1)\n        # or\n        if x < 0:\n            return -int(str(abs(x))[::-1])\n        return int(str(x)[::-1])"
    },
    {
        "number": 7,
        "title": "Reverse Integer",
        "difficulty": 1,
        "prompt": "class Solution:\n    def reverse(self, x: int) -> int:\n        \"\"\"\n        Given a signed 32-bit integer x, return x with its digits reversed. If reversing x causes the value to go outside the signed 32-bit integer range [-231, 231 - 1], then return 0.\n        Assume the environment does not allow you to store 64-bit integers (signed or unsigned).\n        Example 1:\n        Input: x = 123\n        Output: 321\n        Example 2:\n        Input: x = -123\n        Output: -321\n        Example 3:\n        Input: x = 120\n        Output: 21\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 5,
        "answer": "        if x < 0:\n            x = int(str(x)[1:][::-1])\n            if -2**31 <= x <= -1:\n                return 0\n            else:\n                return x\n        else:\n            x = int(str(x)[::-1])\n            if 2**31 - 1 >= x >= 2**31:\n                return 0\n            else:\n                return x"
    },
    {
        "number": 8,
        "title": "String to Integer (atoi)",
        "difficulty": 1,
        "prompt": "class Solution:\n    def myAtoi(self, s: str) -> int:\n        \"\"\"\n        Implement the myAtoi(string s) function, which converts a string to a 32-bit signed integer (similar to C/C++'s atoi function).\n        The algorithm for myAtoi(string s) is as follows:\n            Read in and ignore any leading whitespace.\n            Check if the next character (if not already at the end of the string) is '-' or '+'. Read this character in if it is either. This determines if the final result is negative or positive respectively. Assume the result is positive if neither is present.\n            Read in next the characters until the next non-digit character or the end of the input is reached. The rest of the string is ignored.\n            Convert these digits into an integer (i.e. \"123\" -> 123, \"0032\" -> 32). If no digits were read, then the integer is 0. Change the sign as necessary (from step 2).\n            If the integer is out of the 32-bit signed integer range [-231, 231 - 1], then clamp the integer so that it remains in the range. Specifically, integers less than -231 should be clamped to -231, and integers greater than 231 - 1 should be clamped to 231 - 1.\n            Return the integer as the final result.\n        Note:\n            Only the space character'' is considered a whitespace character.\n            Do not ignore any characters other than the leading whitespace or the rest of the string after the digits.\n        Example 1:\n        Input: s = \"42\"\n        Output: 42\n        Explanation: The underlined characters are what is read in, the caret is the current reader position.\n        Step 1: \"42\" (no characters read because there is no leading whitespace)\n                 ^\n        Step 2: \"42\" (no characters read because there is neither a '-' nor '+')\n                 ^\n        Step 3: \"42\" (\"42\" is read in)\n                   ^\n        The parsed integer is 42.\n        Since 42 is in the range [-231, 231 - 1], the final result is 42.\n        Example 2:\n        Input: s = \"   -42\"\n        Output: -42\n        Explanation:\n        Step 1: \"   -42\" (leading whitespace is read and ignored)\n                    ^\n        Step 2: \"   -42\" ('-' is read, so the result should be negative)\n                     ^\n        Step 3: \"   -42\" (\"42\" is read in)\n                       ^\n        The parsed integer is -42.\n        Since -42 is in the range [-231, 231 - 1], the final result is -42.\n        Example 3:\n        Input: s = \"4193 with words\"\n        Output: 4193\n        Explanation:\n        Step 1: \"4193 with words\" (no characters read because there is no leading whitespace)\n                 ^\n        Step 2: \"4193 with words\" (no characters read because there is neither a '-' nor '+')\n                 ^\n        Step 3: \"4193 with words\" (\"4193\" is read in; reading stops because the next character is a non-digit)\n                     ^\n        The parsed integer is 4193.\n        Since 4193 is in the range [-231, 231 - 1], the final result is 4193.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        \n        # 1st solution: (AC)\n        # if not s:\n        #     return 0\n        # s = s.strip()\n        # if not s:\n        #     return 0\n        # if s[0] == '-':\n        #     sign = -1\n        #     s = s[1:]\n        #     if not s:\n        #         return 0\n        # elif s[0] == '+':\n        #     sign = 1\n        #     s = s[1:]\n        #     if not s:\n        #         return 0\n        # else:\n        #     sign = 1\n        # if not s:\n        #     return 0\n        # if not s[0].isdigit():\n        #     return 0\n        # for i, char in enumerate(s):\n        #     if not char.isdigit():\n        #         s = s[:i]\n        #         break\n        # else:\n        #     s = s\n        # # s = s.lstrip('+')\n        # # if len(s) == 0:\n        # #     return 0\n        # try:\n        #     num = int(s)\n        # except:\n        #     return 0\n        # if sign == -1:\n        "
    },
    {
        "number": 8,
        "title": "String to Integer (atoi)",
        "difficulty": 1,
        "prompt": "class Solution:\n    def myAtoi(self, s: str) -> int:\n        \"\"\"\n        Implement the myAtoi(string s) function, which converts a string to a 32-bit signed integer (similar to C/C++'s atoi function).\n        The algorithm for myAtoi(string s) is as follows:\n            Read in and ignore any leading whitespace.\n            Check if the next character (if not already at the end of the string) is '-' or '+'. Read this character in if it is either. This determines if the final result is negative or positive respectively. Assume the result is positive if neither is present.\n            Read in next the characters until the next non-digit character or the end of the input is reached. The rest of the string is ignored.\n            Convert these digits into an integer (i.e. \"123\" -> 123, \"0032\" -> 32). If no digits were read, then the integer is 0. Change the sign as necessary (from step 2).\n            If the integer is out of the 32-bit signed integer range [-231, 231 - 1], then clamp the integer so that it remains in the range. Specifically, integers less than -231 should be clamped to -231, and integers greater than 231 - 1 should be clamped to 231 - 1.\n            Return the integer as the final result.\n        Note:\n            Only the space character'' is considered a whitespace character.\n            Do not ignore any characters other than the leading whitespace or the rest of the string after the digits.\n        Example 1:\n        Input: s = \"42\"\n        Output: 42\n        Explanation: The underlined characters are what is read in, the caret is the current reader position.\n        Step 1: \"42\" (no characters read because there is no leading whitespace)\n                 ^\n        Step 2: \"42\" (no characters read because there is neither a '-' nor '+')\n                 ^\n        Step 3: \"42\" (\"42\" is read in)\n                   ^\n        The parsed integer is 42.\n        Since 42 is in the range [-231, 231 - 1], the final result is 42.\n        Example 2:\n        Input: s = \"   -42\"\n        Output: -42\n        Explanation:\n        Step 1: \"   -42\" (leading whitespace is read and ignored)\n                    ^\n        Step 2: \"   -42\" ('-' is read, so the result should be negative)\n                     ^\n        Step 3: \"   -42\" (\"42\" is read in)\n                       ^\n        The parsed integer is -42.\n        Since -42 is in the range [-231, 231 - 1], the final result is -42.\n        Example 3:\n        Input: s = \"4193 with words\"\n        Output: 4193\n        Explanation:\n        Step 1: \"4193 with words\" (no characters read because there is no leading whitespace)\n                 ^\n        Step 2: \"4193 with words\" (no characters read because there is neither a '-' nor '+')\n                 ^\n        Step 3: \"4193 with words\" (\"4193\" is read in; reading stops because the next character is a non-digit)\n                     ^\n        The parsed integer is 4193.\n        Since 4193 is in the range [-231, 231 - 1], the final result is 4193.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        # \u53bb\u9664\u5de6\u8fb9\u7684\u7a7a\u683c\n        s = s.lstrip()\n        # \u68c0\u67e5\u662f\u5426\u662f\u8d1f\u6570\n        # \u5982\u679c\u662f\u7b2c\u4e00\u4e2a\u662f - \u5219\u8d1f\u6570\n        # \u5982\u679c\u4e0d\u662f \u7b2c\u4e00\u4e2a\u662f\u6b63\u6570 \u5219\u6b63\u6570\n        sign = 1\n        if s[0] == '-':\n            sign = -1\n            s = s[1:]\n        elif s[0] == '+':\n            s = s[1:]\n        # \u53bb\u9664\u5de6\u8fb9\u7684\u7a7a\u683c\n        s = s.lstrip()\n        if len(s) == 0:\n            return 0\n        # \u68c0\u67e5\u662f\u5426\u8d85\u51fa\u6700\u5927\u503c\n        # \u5982\u679c\u6700\u5927\u503c\u662f\u8d1f\u6570 \u5219\u9700\u8981\u4fee\u6539\u6700\u5927\u503c\n        if int(s) > 2**31 - 1:\n            return 2**31 - 1 if sign == 1 else -2**31\n        # \u53bb\u9664\u5de6\ufffd"
    },
    {
        "number": 8,
        "title": "String to Integer (atoi)",
        "difficulty": 1,
        "prompt": "class Solution:\n    def myAtoi(self, s: str) -> int:\n        \"\"\"\n        Implement the myAtoi(string s) function, which converts a string to a 32-bit signed integer (similar to C/C++'s atoi function).\n        The algorithm for myAtoi(string s) is as follows:\n            Read in and ignore any leading whitespace.\n            Check if the next character (if not already at the end of the string) is '-' or '+'. Read this character in if it is either. This determines if the final result is negative or positive respectively. Assume the result is positive if neither is present.\n            Read in next the characters until the next non-digit character or the end of the input is reached. The rest of the string is ignored.\n            Convert these digits into an integer (i.e. \"123\" -> 123, \"0032\" -> 32). If no digits were read, then the integer is 0. Change the sign as necessary (from step 2).\n            If the integer is out of the 32-bit signed integer range [-231, 231 - 1], then clamp the integer so that it remains in the range. Specifically, integers less than -231 should be clamped to -231, and integers greater than 231 - 1 should be clamped to 231 - 1.\n            Return the integer as the final result.\n        Note:\n            Only the space character'' is considered a whitespace character.\n            Do not ignore any characters other than the leading whitespace or the rest of the string after the digits.\n        Example 1:\n        Input: s = \"42\"\n        Output: 42\n        Explanation: The underlined characters are what is read in, the caret is the current reader position.\n        Step 1: \"42\" (no characters read because there is no leading whitespace)\n                 ^\n        Step 2: \"42\" (no characters read because there is neither a '-' nor '+')\n                 ^\n        Step 3: \"42\" (\"42\" is read in)\n                   ^\n        The parsed integer is 42.\n        Since 42 is in the range [-231, 231 - 1], the final result is 42.\n        Example 2:\n        Input: s = \"   -42\"\n        Output: -42\n        Explanation:\n        Step 1: \"   -42\" (leading whitespace is read and ignored)\n                    ^\n        Step 2: \"   -42\" ('-' is read, so the result should be negative)\n                     ^\n        Step 3: \"   -42\" (\"42\" is read in)\n                       ^\n        The parsed integer is -42.\n        Since -42 is in the range [-231, 231 - 1], the final result is -42.\n        Example 3:\n        Input: s = \"4193 with words\"\n        Output: 4193\n        Explanation:\n        Step 1: \"4193 with words\" (no characters read because there is no leading whitespace)\n                 ^\n        Step 2: \"4193 with words\" (no characters read because there is neither a '-' nor '+')\n                 ^\n        Step 3: \"4193 with words\" (\"4193\" is read in; reading stops because the next character is a non-digit)\n                     ^\n        The parsed integer is 4193.\n        Since 4193 is in the range [-231, 231 - 1], the final result is 4193.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 3,
        "answer": "        s = s.strip()\n        if len(s) == 0:\n            return 0"
    },
    {
        "number": 8,
        "title": "String to Integer (atoi)",
        "difficulty": 1,
        "prompt": "class Solution:\n    def myAtoi(self, s: str) -> int:\n        \"\"\"\n        Implement the myAtoi(string s) function, which converts a string to a 32-bit signed integer (similar to C/C++'s atoi function).\n        The algorithm for myAtoi(string s) is as follows:\n            Read in and ignore any leading whitespace.\n            Check if the next character (if not already at the end of the string) is '-' or '+'. Read this character in if it is either. This determines if the final result is negative or positive respectively. Assume the result is positive if neither is present.\n            Read in next the characters until the next non-digit character or the end of the input is reached. The rest of the string is ignored.\n            Convert these digits into an integer (i.e. \"123\" -> 123, \"0032\" -> 32). If no digits were read, then the integer is 0. Change the sign as necessary (from step 2).\n            If the integer is out of the 32-bit signed integer range [-231, 231 - 1], then clamp the integer so that it remains in the range. Specifically, integers less than -231 should be clamped to -231, and integers greater than 231 - 1 should be clamped to 231 - 1.\n            Return the integer as the final result.\n        Note:\n            Only the space character'' is considered a whitespace character.\n            Do not ignore any characters other than the leading whitespace or the rest of the string after the digits.\n        Example 1:\n        Input: s = \"42\"\n        Output: 42\n        Explanation: The underlined characters are what is read in, the caret is the current reader position.\n        Step 1: \"42\" (no characters read because there is no leading whitespace)\n                 ^\n        Step 2: \"42\" (no characters read because there is neither a '-' nor '+')\n                 ^\n        Step 3: \"42\" (\"42\" is read in)\n                   ^\n        The parsed integer is 42.\n        Since 42 is in the range [-231, 231 - 1], the final result is 42.\n        Example 2:\n        Input: s = \"   -42\"\n        Output: -42\n        Explanation:\n        Step 1: \"   -42\" (leading whitespace is read and ignored)\n                    ^\n        Step 2: \"   -42\" ('-' is read, so the result should be negative)\n                     ^\n        Step 3: \"   -42\" (\"42\" is read in)\n                       ^\n        The parsed integer is -42.\n        Since -42 is in the range [-231, 231 - 1], the final result is -42.\n        Example 3:\n        Input: s = \"4193 with words\"\n        Output: 4193\n        Explanation:\n        Step 1: \"4193 with words\" (no characters read because there is no leading whitespace)\n                 ^\n        Step 2: \"4193 with words\" (no characters read because there is neither a '-' nor '+')\n                 ^\n        Step 3: \"4193 with words\" (\"4193\" is read in; reading stops because the next character is a non-digit)\n                     ^\n        The parsed integer is 4193.\n        Since 4193 is in the range [-231, 231 - 1], the final result is 4193.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 4,
        "answer": "        s = s.strip()\n        if not s: return 0\n        sign, res, i = 1, 0, 0\n        INT_MIN, INT_MAX = -2 ** 31, 2 ** 31 - 1\n        while i < len(s) and s[i].isnumeric():\n            res = res * 10 + ord(s[i]) - ord('0')\n            if res > INT_MAX:\n                if sign == 1:\n                    return INT_MAX\n                else:\n                    return INT_MIN\n            i += 1\n        return sign * res"
    },
    {
        "number": 8,
        "title": "String to Integer (atoi)",
        "difficulty": 1,
        "prompt": "class Solution:\n    def myAtoi(self, s: str) -> int:\n        \"\"\"\n        Implement the myAtoi(string s) function, which converts a string to a 32-bit signed integer (similar to C/C++'s atoi function).\n        The algorithm for myAtoi(string s) is as follows:\n            Read in and ignore any leading whitespace.\n            Check if the next character (if not already at the end of the string) is '-' or '+'. Read this character in if it is either. This determines if the final result is negative or positive respectively. Assume the result is positive if neither is present.\n            Read in next the characters until the next non-digit character or the end of the input is reached. The rest of the string is ignored.\n            Convert these digits into an integer (i.e. \"123\" -> 123, \"0032\" -> 32). If no digits were read, then the integer is 0. Change the sign as necessary (from step 2).\n            If the integer is out of the 32-bit signed integer range [-231, 231 - 1], then clamp the integer so that it remains in the range. Specifically, integers less than -231 should be clamped to -231, and integers greater than 231 - 1 should be clamped to 231 - 1.\n            Return the integer as the final result.\n        Note:\n            Only the space character'' is considered a whitespace character.\n            Do not ignore any characters other than the leading whitespace or the rest of the string after the digits.\n        Example 1:\n        Input: s = \"42\"\n        Output: 42\n        Explanation: The underlined characters are what is read in, the caret is the current reader position.\n        Step 1: \"42\" (no characters read because there is no leading whitespace)\n                 ^\n        Step 2: \"42\" (no characters read because there is neither a '-' nor '+')\n                 ^\n        Step 3: \"42\" (\"42\" is read in)\n                   ^\n        The parsed integer is 42.\n        Since 42 is in the range [-231, 231 - 1], the final result is 42.\n        Example 2:\n        Input: s = \"   -42\"\n        Output: -42\n        Explanation:\n        Step 1: \"   -42\" (leading whitespace is read and ignored)\n                    ^\n        Step 2: \"   -42\" ('-' is read, so the result should be negative)\n                     ^\n        Step 3: \"   -42\" (\"42\" is read in)\n                       ^\n        The parsed integer is -42.\n        Since -42 is in the range [-231, 231 - 1], the final result is -42.\n        Example 3:\n        Input: s = \"4193 with words\"\n        Output: 4193\n        Explanation:\n        Step 1: \"4193 with words\" (no characters read because there is no leading whitespace)\n                 ^\n        Step 2: \"4193 with words\" (no characters read because there is neither a '-' nor '+')\n                 ^\n        Step 3: \"4193 with words\" (\"4193\" is read in; reading stops because the next character is a non-digit)\n                     ^\n        The parsed integer is 4193.\n        Since 4193 is in the range [-231, 231 - 1], the final result is 4193.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 5,
        "answer": "        # remove leading whitespace\n        s = s.strip()\n        # if the input is empty, return 0\n        if not s:\n            return 0\n        # parse negative or positive sign\n        sign = 1\n        if s[0] in '+-':\n            if s[0] == '-':\n                sign = -1\n            s = s[1:]\n        # parse the number\n        res = 0\n        n = len(s)\n        for i in range(n):\n            if s[i] not in '0123456789':\n                break\n            res = res * 10 + ord(s[i]) - ord('0')\n        # check overflow and clamp\n        res = res * sign\n        if res > 2 ** 31 - 1:\n            return 2 ** 31 - 1\n        if res < -2 ** 31:\n            return -2 ** 31\n        return res"
    },
    {
        "number": 9,
        "title": "Palindrome Number",
        "difficulty": 0,
        "prompt": "class Solution:\n    def isPalindrome(self, x: int) -> bool:\n        \"\"\"\n        Given an integer x, return true if x is a palindrome, and false otherwise.\n        Example 1:\n        Input: x = 121\n        Output: true\n        Explanation: 121 reads as 121 from left to right and from right to left.\n        Example 2:\n        Input: x = -121\n        Output: false\n        Explanation: From left to right, it reads -121. From right to left, it becomes 121-. Therefore it is not a palindrome.\n        Example 3:\n        Input: x = 10\n        Output: false\n        Explanation: Reads 01 from right to left. Therefore it is not a palindrome.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        if x < 0:\n            return False\n        if x < 10:\n            return True\n        a = 0\n        while a < x:\n            a = a * 10 + x % 10\n            x //= 10\n        return a == x or a // 10 == x\n<|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>"
    },
    {
        "number": 9,
        "title": "Palindrome Number",
        "difficulty": 0,
        "prompt": "class Solution:\n    def isPalindrome(self, x: int) -> bool:\n        \"\"\"\n        Given an integer x, return true if x is a palindrome, and false otherwise.\n        Example 1:\n        Input: x = 121\n        Output: true\n        Explanation: 121 reads as 121 from left to right and from right to left.\n        Example 2:\n        Input: x = -121\n        Output: false\n        Explanation: From left to right, it reads -121. From right to left, it becomes 121-. Therefore it is not a palindrome.\n        Example 3:\n        Input: x = 10\n        Output: false\n        Explanation: Reads 01 from right to left. Therefore it is not a palindrome.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        if x < 0:\n            return False\n        # negative numbers have no leading zeros, so 1 is not the zero\n        elif x % 10 == 0 and x!= 0:\n            return False\n        # if we are at the middle of the number\n        elif x % 10!= 0:\n            reverse_num = 0\n            while x > reverse_num:\n                reverse_num = reverse_num * 10 + x % 10\n                x = x // 10\n            return x == reverse_num or x == reverse_num // 10\n        else:\n            return True"
    },
    {
        "number": 9,
        "title": "Palindrome Number",
        "difficulty": 0,
        "prompt": "class Solution:\n    def isPalindrome(self, x: int) -> bool:\n        \"\"\"\n        Given an integer x, return true if x is a palindrome, and false otherwise.\n        Example 1:\n        Input: x = 121\n        Output: true\n        Explanation: 121 reads as 121 from left to right and from right to left.\n        Example 2:\n        Input: x = -121\n        Output: false\n        Explanation: From left to right, it reads -121. From right to left, it becomes 121-. Therefore it is not a palindrome.\n        Example 3:\n        Input: x = 10\n        Output: false\n        Explanation: Reads 01 from right to left. Therefore it is not a palindrome.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 3,
        "answer": "        x = str(x)\n        l, r = 0, len(x) - 1\n        while l <= r:\n            if x[l]!= x[r]:\n                return False\n            l += 1\n            r -= 1\n        return True"
    },
    {
        "number": 9,
        "title": "Palindrome Number",
        "difficulty": 0,
        "prompt": "class Solution:\n    def isPalindrome(self, x: int) -> bool:\n        \"\"\"\n        Given an integer x, return true if x is a palindrome, and false otherwise.\n        Example 1:\n        Input: x = 121\n        Output: true\n        Explanation: 121 reads as 121 from left to right and from right to left.\n        Example 2:\n        Input: x = -121\n        Output: false\n        Explanation: From left to right, it reads -121. From right to left, it becomes 121-. Therefore it is not a palindrome.\n        Example 3:\n        Input: x = 10\n        Output: false\n        Explanation: Reads 01 from right to left. Therefore it is not a palindrome.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 4,
        "answer": "        if x < 0:\n            return False\n        elif x == 0:\n            return True\n        else:\n            string = str(x)\n            if string == string[::-1]:\n                return True\n            else:\n                return False"
    },
    {
        "number": 9,
        "title": "Palindrome Number",
        "difficulty": 0,
        "prompt": "class Solution:\n    def isPalindrome(self, x: int) -> bool:\n        \"\"\"\n        Given an integer x, return true if x is a palindrome, and false otherwise.\n        Example 1:\n        Input: x = 121\n        Output: true\n        Explanation: 121 reads as 121 from left to right and from right to left.\n        Example 2:\n        Input: x = -121\n        Output: false\n        Explanation: From left to right, it reads -121. From right to left, it becomes 121-. Therefore it is not a palindrome.\n        Example 3:\n        Input: x = 10\n        Output: false\n        Explanation: Reads 01 from right to left. Therefore it is not a palindrome.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 5,
        "answer": "        if x < 0:\n            return False\n        x = str(x)\n        return x == x[::-1]"
    },
    {
        "number": 10,
        "title": "Regular Expression Matching",
        "difficulty": 2,
        "prompt": "class Solution:\n    def isMatch(self, s: str, p: str) -> bool:\n        \"\"\"\n        Given an input string s and a pattern p, implement regular expression matching with support for '.' and '*' where:\n            '.' Matches any single character.\u200b\u200b\u200b\u200b\n            '*' Matches zero or more of the preceding element.\n        The matching should cover the entire input string (not partial).\n        Example 1:\n        Input: s = \"aa\", p = \"a\"\n        Output: false\n        Explanation: \"a\" does not match the entire string \"aa\".\n        Example 2:\n        Input: s = \"aa\", p = \"a*\"\n        Output: true\n        Explanation: '*' means zero or more of the preceding element, 'a'. Therefore, by repeating 'a' once, it becomes \"aa\".\n        Example 3:\n        Input: s = \"ab\", p = \".*\"\n        Output: true\n        Explanation: \".*\" means \"zero or more (*) of any character (.)\".\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        m, n = len(s), len(p)\n        dp = [[False] * (n + 1) for _ in range(m + 1)]\n        dp[0][0] = True\n        for j in range(2, n + 1):\n            dp[0][j] = dp[0][j - 2] and p[j - 1] == '*'\n        for i in range(1, m + 1):\n            for j in range(1, n + 1):\n                if p[j - 1]!= '*':\n                    dp[i][j] = dp[i - 1][j - 1] and (s[i - 1] == p[j - 1] or p[j - 1] == '.')\n                else:\n                    dp[i][j] = dp[i][j - 2] or (\n                            dp[i - 1][j - 2] and (s[i - 1] == p[j - 2] or p[j - 2] == '.'))\n        return dp[-1][-1]"
    },
    {
        "number": 10,
        "title": "Regular Expression Matching",
        "difficulty": 2,
        "prompt": "class Solution:\n    def isMatch(self, s: str, p: str) -> bool:\n        \"\"\"\n        Given an input string s and a pattern p, implement regular expression matching with support for '.' and '*' where:\n            '.' Matches any single character.\u200b\u200b\u200b\u200b\n            '*' Matches zero or more of the preceding element.\n        The matching should cover the entire input string (not partial).\n        Example 1:\n        Input: s = \"aa\", p = \"a\"\n        Output: false\n        Explanation: \"a\" does not match the entire string \"aa\".\n        Example 2:\n        Input: s = \"aa\", p = \"a*\"\n        Output: true\n        Explanation: '*' means zero or more of the preceding element, 'a'. Therefore, by repeating 'a' once, it becomes \"aa\".\n        Example 3:\n        Input: s = \"ab\", p = \".*\"\n        Output: true\n        Explanation: \".*\" means \"zero or more (*) of any character (.)\".\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        # Edge cases\n        if p == s:\n            return True\n        if s == \"\" and p!= \"\":\n            return False\n        if p == \"\":\n            return False"
    },
    {
        "number": 10,
        "title": "Regular Expression Matching",
        "difficulty": 2,
        "prompt": "class Solution:\n    def isMatch(self, s: str, p: str) -> bool:\n        \"\"\"\n        Given an input string s and a pattern p, implement regular expression matching with support for '.' and '*' where:\n            '.' Matches any single character.\u200b\u200b\u200b\u200b\n            '*' Matches zero or more of the preceding element.\n        The matching should cover the entire input string (not partial).\n        Example 1:\n        Input: s = \"aa\", p = \"a\"\n        Output: false\n        Explanation: \"a\" does not match the entire string \"aa\".\n        Example 2:\n        Input: s = \"aa\", p = \"a*\"\n        Output: true\n        Explanation: '*' means zero or more of the preceding element, 'a'. Therefore, by repeating 'a' once, it becomes \"aa\".\n        Example 3:\n        Input: s = \"ab\", p = \".*\"\n        Output: true\n        Explanation: \".*\" means \"zero or more (*) of any character (.)\".\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 3,
        "answer": "        if not p:\n            return not s\n        first_match = bool(s) and p[0] in {s[0], '.'}\n        if len(p) >= 2 and p[1] == '*':\n            return (self.isMatch(s, p[2:]) or (first_match and self.isMatch(s[1:], p)))\n        else:\n            return first_match and self.isMatch(s[1:], p[1:])"
    },
    {
        "number": 10,
        "title": "Regular Expression Matching",
        "difficulty": 2,
        "prompt": "class Solution:\n    def isMatch(self, s: str, p: str) -> bool:\n        \"\"\"\n        Given an input string s and a pattern p, implement regular expression matching with support for '.' and '*' where:\n            '.' Matches any single character.\u200b\u200b\u200b\u200b\n            '*' Matches zero or more of the preceding element.\n        The matching should cover the entire input string (not partial).\n        Example 1:\n        Input: s = \"aa\", p = \"a\"\n        Output: false\n        Explanation: \"a\" does not match the entire string \"aa\".\n        Example 2:\n        Input: s = \"aa\", p = \"a*\"\n        Output: true\n        Explanation: '*' means zero or more of the preceding element, 'a'. Therefore, by repeating 'a' once, it becomes \"aa\".\n        Example 3:\n        Input: s = \"ab\", p = \".*\"\n        Output: true\n        Explanation: \".*\" means \"zero or more (*) of any character (.)\".\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 4,
        "answer": "        memo = {}\n        return self.dfs(s, p, 0, 0, memo)"
    },
    {
        "number": 10,
        "title": "Regular Expression Matching",
        "difficulty": 2,
        "prompt": "class Solution:\n    def isMatch(self, s: str, p: str) -> bool:\n        \"\"\"\n        Given an input string s and a pattern p, implement regular expression matching with support for '.' and '*' where:\n            '.' Matches any single character.\u200b\u200b\u200b\u200b\n            '*' Matches zero or more of the preceding element.\n        The matching should cover the entire input string (not partial).\n        Example 1:\n        Input: s = \"aa\", p = \"a\"\n        Output: false\n        Explanation: \"a\" does not match the entire string \"aa\".\n        Example 2:\n        Input: s = \"aa\", p = \"a*\"\n        Output: true\n        Explanation: '*' means zero or more of the preceding element, 'a'. Therefore, by repeating 'a' once, it becomes \"aa\".\n        Example 3:\n        Input: s = \"ab\", p = \".*\"\n        Output: true\n        Explanation: \".*\" means \"zero or more (*) of any character (.)\".\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 5,
        "answer": "        if not p:\n            return not s\n        first_match = bool(s) and p[0] in {s[0], '.'}\n        if len(p) >= 2 and p[1] == '*':\n            return self.isMatch(s, p[2:]) or first_match and self.isMatch(s[1:], p)\n        else:\n            return first_match and self.isMatch(s[1:], p[1:])\n<|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>"
    },
    {
        "number": 11,
        "title": "Container With Most Water",
        "difficulty": 1,
        "prompt": "class Solution:\n    def maxArea(self, height: List[int]) -> int:\n        \"\"\"\n        You are given an integer array height of length n. There are n vertical lines drawn such that the two endpoints of the ith line are (i, 0) and (i, height[i]).\n        Find two lines that together with the x-axis form a container, such that the container contains the most water.\n        Return the maximum amount of water a container can store.\n        Notice that you may not slant the container.\n        Example 1:\n        Input: height = [1,8,6,2,5,4,8,3,7]\n        Output: 49\n        Explanation: The above vertical lines are represented by array [1,8,6,2,5,4,8,3,7]. In this case, the max area of water (blue section) the container can contain is 49.\n        Example 2:\n        Input: height = [1,1]\n        Output: 1\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        left = 0\n        right = len(height)-1\n        max_area = 0\n        while left < right:\n            cur_area = min(height[left], height[right]) * (right - left)\n            max_area = max(max_area, cur_area)\n            if height[left] < height[right]:\n                left += 1\n            else:\n                right -= 1\n        return max_area\n<|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>"
    },
    {
        "number": 11,
        "title": "Container With Most Water",
        "difficulty": 1,
        "prompt": "class Solution:\n    def maxArea(self, height: List[int]) -> int:\n        \"\"\"\n        You are given an integer array height of length n. There are n vertical lines drawn such that the two endpoints of the ith line are (i, 0) and (i, height[i]).\n        Find two lines that together with the x-axis form a container, such that the container contains the most water.\n        Return the maximum amount of water a container can store.\n        Notice that you may not slant the container.\n        Example 1:\n        Input: height = [1,8,6,2,5,4,8,3,7]\n        Output: 49\n        Explanation: The above vertical lines are represented by array [1,8,6,2,5,4,8,3,7]. In this case, the max area of water (blue section) the container can contain is 49.\n        Example 2:\n        Input: height = [1,1]\n        Output: 1\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        \n        \"\"\"\n        The area of water is defined as min(height[left], height[right]) * (right - left)\n        By the definition of the max area, we need to calculate the area from two points until we reach the max area. \n        This is because we can not include the points before the max area.\n        The max area can only be defined as the area between two points. \n        \n        Hence we need to maintain two pointers, where one of them is the minimum height. \n        The other is the maximum height. \n        We then calculate the area by calculating the length * height of the container. \n        The while loop would check whether the value of the left pointer is less than the right pointer. \n        If it is less, we update the max value of the area to the current min(height[left], height[right]) * (right - left)\n        This is the area between two points. \n        \n        When we find the first greater height on the right, the area will be the max of all the areas before it. \n        We need to update the area to this value as well.\n        \"\"\"\n        # The max area is defined as the area between two points\n        # The while loop would check whether the value of the left pointer is less than the right pointer\n        # If it is less, we update the max"
    },
    {
        "number": 11,
        "title": "Container With Most Water",
        "difficulty": 1,
        "prompt": "class Solution:\n    def maxArea(self, height: List[int]) -> int:\n        \"\"\"\n        You are given an integer array height of length n. There are n vertical lines drawn such that the two endpoints of the ith line are (i, 0) and (i, height[i]).\n        Find two lines that together with the x-axis form a container, such that the container contains the most water.\n        Return the maximum amount of water a container can store.\n        Notice that you may not slant the container.\n        Example 1:\n        Input: height = [1,8,6,2,5,4,8,3,7]\n        Output: 49\n        Explanation: The above vertical lines are represented by array [1,8,6,2,5,4,8,3,7]. In this case, the max area of water (blue section) the container can contain is 49.\n        Example 2:\n        Input: height = [1,1]\n        Output: 1\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 3,
        "answer": "        # edge case:\n        if len(height) <= 2:\n            return max(0, max(height) * len(height) - sum(height))"
    },
    {
        "number": 11,
        "title": "Container With Most Water",
        "difficulty": 1,
        "prompt": "class Solution:\n    def maxArea(self, height: List[int]) -> int:\n        \"\"\"\n        You are given an integer array height of length n. There are n vertical lines drawn such that the two endpoints of the ith line are (i, 0) and (i, height[i]).\n        Find two lines that together with the x-axis form a container, such that the container contains the most water.\n        Return the maximum amount of water a container can store.\n        Notice that you may not slant the container.\n        Example 1:\n        Input: height = [1,8,6,2,5,4,8,3,7]\n        Output: 49\n        Explanation: The above vertical lines are represented by array [1,8,6,2,5,4,8,3,7]. In this case, the max area of water (blue section) the container can contain is 49.\n        Example 2:\n        Input: height = [1,1]\n        Output: 1\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 4,
        "answer": "        i, j = 0, len(height) - 1\n        max_area = 0\n        while i < j:\n            max_area = max(max_area, min(height[i], height[j]) * (j - i))\n            if height[i] < height[j]:\n                i += 1\n            else:\n                j -= 1\n        return max_area"
    },
    {
        "number": 11,
        "title": "Container With Most Water",
        "difficulty": 1,
        "prompt": "class Solution:\n    def maxArea(self, height: List[int]) -> int:\n        \"\"\"\n        You are given an integer array height of length n. There are n vertical lines drawn such that the two endpoints of the ith line are (i, 0) and (i, height[i]).\n        Find two lines that together with the x-axis form a container, such that the container contains the most water.\n        Return the maximum amount of water a container can store.\n        Notice that you may not slant the container.\n        Example 1:\n        Input: height = [1,8,6,2,5,4,8,3,7]\n        Output: 49\n        Explanation: The above vertical lines are represented by array [1,8,6,2,5,4,8,3,7]. In this case, the max area of water (blue section) the container can contain is 49.\n        Example 2:\n        Input: height = [1,1]\n        Output: 1\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 5,
        "answer": "        \n        # corner cases\n        n = len(height)\n        if n <= 2: return n\n        \n        # initialize\n        left, right = 0, n-1\n        max_area = 0\n        \n        # loop\n        while left < right:\n            area = (right - left) * min(height[right], height[left])\n            max_area = max(max_area, area)\n            \n            # update\n            if height[left] < height[right]: left += 1\n            else: right -= 1\n        \n        return max_area\n    \n    \n    def maxArea(self, height: List[int]) -> int:\n        \"\"\"\n        You are given an integer array heights of length n which represents the height of n buildings respectively. The height of the i-th building is heights[i].\n        You have to make sure that the skyline of the buildings shouldn't have two overlapping blue areas. The area of a blue area is the number of consecutive buildings where the height of the building is less than or equal to the height of the previous building.\n        Return the maximum area of a blue area. If there is no such area, return 0.\n        Example 1:\n        Input: heights = [4,2,3,6,5,1,8]\n        Output: 9\n        Explanation: The blue"
    },
    {
        "number": 12,
        "title": "Integer to Roman",
        "difficulty": 1,
        "prompt": "class Solution:\n    def intToRoman(self, num: int) -> str:\n        \"\"\"\n        Roman numerals are represented by seven different symbols: I, V, X, L, C, D and M.\n        Symbol       Value\n        I             1\n        V             5\n        X             10\n        L             50\n        C             100\n        D             500\n        M             1000\n        For example, 2 is written as II in Roman numeral, just two one's added together. 12 is written as XII, which is simply X + II. The number 27 is written as XXVII, which is XX + V + II.\n        Roman numerals are usually written largest to smallest from left to right. However, the numeral for four is not IIII. Instead, the number four is written as IV. Because the one is before the five we subtract it making four. The same principle applies to the number nine, which is written as IX. There are six instances where subtraction is used:\n            I can be placed before V (5) and X (10) to make 4 and 9. \n            X can be placed before L (50) and C (100) to make 40 and 90. \n            C can be placed before D (500) and M (1000) to make 400 and 900.\n        Given an integer, convert it to a roman numeral.\n        Example 1:\n        Input: num = 3\n        Output: \"III\"\n        Explanation: 3 is represented as 3 ones.\n        Example 2:\n        Input: num = 58\n        Output: \"LVIII\"\n        Explanation: L = 50, V = 5, III = 3.\n        Example 3:\n        Input: num = 1994\n        Output: \"MCMXCIV\"\n        Explanation: M = 1000, CM = 900, XC = 90 and IV = 4.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        dic = {1: 'I', 5: 'V', 10: 'X', 50: 'L', 100: 'C', 500: 'D', 1000: 'M'}\n        i = 1\n        result = ''\n        while i <= num:\n            if i in dic:\n                result += dic[i]\n                i += 1\n            elif i == 4:\n                result += dic[5] + dic[1]\n                i += 1\n            elif i > 4 and i < 9:\n                result += dic[1] + dic[i-5]\n                i += 1\n            elif i == 9:\n                result += dic[10] + dic[1]\n                i += 1\n            elif i > 9 and i < 40:\n                result += dic[5] + dic[i//10]\n                i += 1\n            elif i == 40:\n                result += dic[50] + dic[10]\n                i += 1\n            elif i > 40 and i < 90:\n                result += dic[10] + dic[i//10]\n                i += 1\n            elif i == 90:\n                result += dic[100] + dic[10]\n                i += 1\n            elif i >"
    },
    {
        "number": 12,
        "title": "Integer to Roman",
        "difficulty": 1,
        "prompt": "class Solution:\n    def intToRoman(self, num: int) -> str:\n        \"\"\"\n        Roman numerals are represented by seven different symbols: I, V, X, L, C, D and M.\n        Symbol       Value\n        I             1\n        V             5\n        X             10\n        L             50\n        C             100\n        D             500\n        M             1000\n        For example, 2 is written as II in Roman numeral, just two one's added together. 12 is written as XII, which is simply X + II. The number 27 is written as XXVII, which is XX + V + II.\n        Roman numerals are usually written largest to smallest from left to right. However, the numeral for four is not IIII. Instead, the number four is written as IV. Because the one is before the five we subtract it making four. The same principle applies to the number nine, which is written as IX. There are six instances where subtraction is used:\n            I can be placed before V (5) and X (10) to make 4 and 9. \n            X can be placed before L (50) and C (100) to make 40 and 90. \n            C can be placed before D (500) and M (1000) to make 400 and 900.\n        Given an integer, convert it to a roman numeral.\n        Example 1:\n        Input: num = 3\n        Output: \"III\"\n        Explanation: 3 is represented as 3 ones.\n        Example 2:\n        Input: num = 58\n        Output: \"LVIII\"\n        Explanation: L = 50, V = 5, III = 3.\n        Example 3:\n        Input: num = 1994\n        Output: \"MCMXCIV\"\n        Explanation: M = 1000, CM = 900, XC = 90 and IV = 4.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        # I can be placed before V (5) and X (10) to make 4 and 9. \n        # X can be placed before L (50) and C (100) to make 40 and 90. \n        # C can be placed before D (500) and M (1000) to make 400 and 900.\n        # I have 4 symbols to translate: [1000, 900, 500, 400]\n        roman_numerals = ['M', 'CM', 'D', 'CD', 'C', 'XC', 'L', 'XL', 'X', 'IX', 'V', 'IV', 'I']\n        # This is the rule: x < y -> (x, y]\n        # {1000: 1, 900: 2, 500: 3, 400: 4, 100: 5, 90: 6, 50: 7, 40: 8, 10: 9, 9: 10, 5: 11, 4: 12, 1: 13, 0: 14}\n        digits = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1]\n        result = ''\n        i = 0\n        while i < len(digits):\n            while num >= digits[i]:\n                num -= digits[i]\n                result += roman_numerals[i]\n            i +="
    },
    {
        "number": 12,
        "title": "Integer to Roman",
        "difficulty": 1,
        "prompt": "class Solution:\n    def intToRoman(self, num: int) -> str:\n        \"\"\"\n        Roman numerals are represented by seven different symbols: I, V, X, L, C, D and M.\n        Symbol       Value\n        I             1\n        V             5\n        X             10\n        L             50\n        C             100\n        D             500\n        M             1000\n        For example, 2 is written as II in Roman numeral, just two one's added together. 12 is written as XII, which is simply X + II. The number 27 is written as XXVII, which is XX + V + II.\n        Roman numerals are usually written largest to smallest from left to right. However, the numeral for four is not IIII. Instead, the number four is written as IV. Because the one is before the five we subtract it making four. The same principle applies to the number nine, which is written as IX. There are six instances where subtraction is used:\n            I can be placed before V (5) and X (10) to make 4 and 9. \n            X can be placed before L (50) and C (100) to make 40 and 90. \n            C can be placed before D (500) and M (1000) to make 400 and 900.\n        Given an integer, convert it to a roman numeral.\n        Example 1:\n        Input: num = 3\n        Output: \"III\"\n        Explanation: 3 is represented as 3 ones.\n        Example 2:\n        Input: num = 58\n        Output: \"LVIII\"\n        Explanation: L = 50, V = 5, III = 3.\n        Example 3:\n        Input: num = 1994\n        Output: \"MCMXCIV\"\n        Explanation: M = 1000, CM = 900, XC = 90 and IV = 4.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 3,
        "answer": "        if not num: return \"\"\n        symbol = {1: 'I', 4: 'IV', 5: 'V', 9: 'IX', 10: 'X', 40: 'XL', 50: 'L', 90: 'XC', 100: 'C', 400: 'CD', 500: 'D', 900: 'CM', 1000: 'M'}\n        res = \"\"\n        while num:\n            res += symbol.get(num % 10, str(num % 10))\n            num //= 10\n        return res[::-1]\n    \n    def romanToInt(self, s: str) -> int:\n        \"\"\"\n        Roman numerals are represented by seven different symbols: I, V, X, L, C, D and M.\n        Symbol       Value\n        I             1\n        V             5\n        X             10\n        L             50\n        C             100\n        D             500\n        M             1000\n        For example, 2 is written as II in Roman numeral, just two one's added together. 12 is written as XII, which is simply X + II. The number 27 is written as XXVII, which is XX + V + II.\n        Roman numerals are usually written largest to smallest from left to right. However, the numeral for four is not IIII. Instead, the number four is written as"
    },
    {
        "number": 12,
        "title": "Integer to Roman",
        "difficulty": 1,
        "prompt": "class Solution:\n    def intToRoman(self, num: int) -> str:\n        \"\"\"\n        Roman numerals are represented by seven different symbols: I, V, X, L, C, D and M.\n        Symbol       Value\n        I             1\n        V             5\n        X             10\n        L             50\n        C             100\n        D             500\n        M             1000\n        For example, 2 is written as II in Roman numeral, just two one's added together. 12 is written as XII, which is simply X + II. The number 27 is written as XXVII, which is XX + V + II.\n        Roman numerals are usually written largest to smallest from left to right. However, the numeral for four is not IIII. Instead, the number four is written as IV. Because the one is before the five we subtract it making four. The same principle applies to the number nine, which is written as IX. There are six instances where subtraction is used:\n            I can be placed before V (5) and X (10) to make 4 and 9. \n            X can be placed before L (50) and C (100) to make 40 and 90. \n            C can be placed before D (500) and M (1000) to make 400 and 900.\n        Given an integer, convert it to a roman numeral.\n        Example 1:\n        Input: num = 3\n        Output: \"III\"\n        Explanation: 3 is represented as 3 ones.\n        Example 2:\n        Input: num = 58\n        Output: \"LVIII\"\n        Explanation: L = 50, V = 5, III = 3.\n        Example 3:\n        Input: num = 1994\n        Output: \"MCMXCIV\"\n        Explanation: M = 1000, CM = 900, XC = 90 and IV = 4.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 4,
        "answer": "        roman = {\n            1: \"I\",\n            4: \"IV\",\n            5: \"V\",\n            9: \"IX\",\n            10: \"X\",\n            40: \"XL\",\n            50: \"L\",\n            90: \"XC\",\n            100: \"C\",\n            400: \"CD\",\n            500: \"D\",\n            900: \"CM\",\n            1000: \"M\",\n        }"
    },
    {
        "number": 12,
        "title": "Integer to Roman",
        "difficulty": 1,
        "prompt": "class Solution:\n    def intToRoman(self, num: int) -> str:\n        \"\"\"\n        Roman numerals are represented by seven different symbols: I, V, X, L, C, D and M.\n        Symbol       Value\n        I             1\n        V             5\n        X             10\n        L             50\n        C             100\n        D             500\n        M             1000\n        For example, 2 is written as II in Roman numeral, just two one's added together. 12 is written as XII, which is simply X + II. The number 27 is written as XXVII, which is XX + V + II.\n        Roman numerals are usually written largest to smallest from left to right. However, the numeral for four is not IIII. Instead, the number four is written as IV. Because the one is before the five we subtract it making four. The same principle applies to the number nine, which is written as IX. There are six instances where subtraction is used:\n            I can be placed before V (5) and X (10) to make 4 and 9. \n            X can be placed before L (50) and C (100) to make 40 and 90. \n            C can be placed before D (500) and M (1000) to make 400 and 900.\n        Given an integer, convert it to a roman numeral.\n        Example 1:\n        Input: num = 3\n        Output: \"III\"\n        Explanation: 3 is represented as 3 ones.\n        Example 2:\n        Input: num = 58\n        Output: \"LVIII\"\n        Explanation: L = 50, V = 5, III = 3.\n        Example 3:\n        Input: num = 1994\n        Output: \"MCMXCIV\"\n        Explanation: M = 1000, CM = 900, XC = 90 and IV = 4.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 5,
        "answer": "        # [1,4,5,9,10,40,50,90,100,400,500,900,1000]\n        # [1,2,3,4,5,6,7,8,9,10]\n        # [1,5,10,50,100,500,1000]\n        # [1,2,3,4,5,6,7,8,9,10]\n        # [1,2,3,4,5,6,7,8,9,10,40,50,90,100,400,500,900,1000]\n        # [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]\n        # [1,2,3,4,5,6,7,8,9,10,20,30,40,50,60,70,80,90,100,200,300,400,500,600,700,800,900,1000,2000,3000,4000,5000,6000,7000,8000,9000,10000]\n        # [1,2,3,4,5,6,7,8,9,10,20,30,40,50,60,70,80,90,100"
    },
    {
        "number": 13,
        "title": "Roman to Integer",
        "difficulty": 0,
        "prompt": "class Solution:\n    def romanToInt(self, s: str) -> int:\n        \"\"\"\n        Roman numerals are represented by seven different symbols: I, V, X, L, C, D and M.\n        Symbol       Value\n        I             1\n        V             5\n        X             10\n        L             50\n        C             100\n        D             500\n        M             1000\n        For example, 2 is written as II in Roman numeral, just two ones added together. 12 is written as XII, which is simply X + II. The number 27 is written as XXVII, which is XX + V + II.\n        Roman numerals are usually written largest to smallest from left to right. However, the numeral for four is not IIII. Instead, the number four is written as IV. Because the one is before the five we subtract it making four. The same principle applies to the number nine, which is written as IX. There are six instances where subtraction is used:\n            I can be placed before V (5) and X (10) to make 4 and 9. \n            X can be placed before L (50) and C (100) to make 40 and 90. \n            C can be placed before D (500) and M (1000) to make 400 and 900.\n        Given a roman numeral, convert it to an integer.\n        Example 1:\n        Input: s = \"III\"\n        Output: 3\n        Explanation: III = 3.\n        Example 2:\n        Input: s = \"LVIII\"\n        Output: 58\n        Explanation: L = 50, V= 5, III = 3.\n        Example 3:\n        Input: s = \"MCMXCIV\"\n        Output: 1994\n        Explanation: M = 1000, CM = 900, XC = 90 and IV = 4.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        \"\"\"\n        \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        \"\"\"\n        d = {'I':1, 'V':5, 'X':10, 'L':50, 'C':100, 'D':500, 'M':1000}\n        # \u76f4\u63a5\u904d\u5386\u8fd9\u4e2a\u5b57\u7b26\u4e32\n        result = 0\n        for i in range(len(s)-1):\n            if d[s[i]] >= d[s[i+1]]:\n                result += d[s[i]]\n            else:\n                result -= d[s[i]]\n        result += d[s[-1]]\n        return result"
    },
    {
        "number": 13,
        "title": "Roman to Integer",
        "difficulty": 0,
        "prompt": "class Solution:\n    def romanToInt(self, s: str) -> int:\n        \"\"\"\n        Roman numerals are represented by seven different symbols: I, V, X, L, C, D and M.\n        Symbol       Value\n        I             1\n        V             5\n        X             10\n        L             50\n        C             100\n        D             500\n        M             1000\n        For example, 2 is written as II in Roman numeral, just two ones added together. 12 is written as XII, which is simply X + II. The number 27 is written as XXVII, which is XX + V + II.\n        Roman numerals are usually written largest to smallest from left to right. However, the numeral for four is not IIII. Instead, the number four is written as IV. Because the one is before the five we subtract it making four. The same principle applies to the number nine, which is written as IX. There are six instances where subtraction is used:\n            I can be placed before V (5) and X (10) to make 4 and 9. \n            X can be placed before L (50) and C (100) to make 40 and 90. \n            C can be placed before D (500) and M (1000) to make 400 and 900.\n        Given a roman numeral, convert it to an integer.\n        Example 1:\n        Input: s = \"III\"\n        Output: 3\n        Explanation: III = 3.\n        Example 2:\n        Input: s = \"LVIII\"\n        Output: 58\n        Explanation: L = 50, V= 5, III = 3.\n        Example 3:\n        Input: s = \"MCMXCIV\"\n        Output: 1994\n        Explanation: M = 1000, CM = 900, XC = 90 and IV = 4.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        d = {\n            \"I\": 1,\n            \"V\": 5,\n            \"X\": 10,\n            \"L\": 50,\n            \"C\": 100,\n            \"D\": 500,\n            \"M\": 1000,\n        }\n        res = 0\n        s = list(s)\n        while s:\n            i = 1\n            while i <= len(s) and s[:i] in d:\n                res += d[s[:i]]\n                s = s[i:]\n                i = 1\n            i += 1\n        return res"
    },
    {
        "number": 13,
        "title": "Roman to Integer",
        "difficulty": 0,
        "prompt": "class Solution:\n    def romanToInt(self, s: str) -> int:\n        \"\"\"\n        Roman numerals are represented by seven different symbols: I, V, X, L, C, D and M.\n        Symbol       Value\n        I             1\n        V             5\n        X             10\n        L             50\n        C             100\n        D             500\n        M             1000\n        For example, 2 is written as II in Roman numeral, just two ones added together. 12 is written as XII, which is simply X + II. The number 27 is written as XXVII, which is XX + V + II.\n        Roman numerals are usually written largest to smallest from left to right. However, the numeral for four is not IIII. Instead, the number four is written as IV. Because the one is before the five we subtract it making four. The same principle applies to the number nine, which is written as IX. There are six instances where subtraction is used:\n            I can be placed before V (5) and X (10) to make 4 and 9. \n            X can be placed before L (50) and C (100) to make 40 and 90. \n            C can be placed before D (500) and M (1000) to make 400 and 900.\n        Given a roman numeral, convert it to an integer.\n        Example 1:\n        Input: s = \"III\"\n        Output: 3\n        Explanation: III = 3.\n        Example 2:\n        Input: s = \"LVIII\"\n        Output: 58\n        Explanation: L = 50, V= 5, III = 3.\n        Example 3:\n        Input: s = \"MCMXCIV\"\n        Output: 1994\n        Explanation: M = 1000, CM = 900, XC = 90 and IV = 4.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 3,
        "answer": "        roman_dict = {\n            \"I\": 1,\n            \"V\": 5,\n            \"X\": 10,\n            \"L\": 50,\n            \"C\": 100,\n            \"D\": 500,\n            \"M\": 1000\n        }\n        s_len = len(s)\n        ans = 0\n        i = 0\n        while i < s_len:\n            if s_len - 1 > i and s[i] + s[i + 1] in roman_dict.keys():\n                ans += roman_dict[s[i] + s[i + 1]]\n                i += 2\n                continue\n            ans += roman_dict[s[i]]\n            i += 1\n        return ans"
    },
    {
        "number": 13,
        "title": "Roman to Integer",
        "difficulty": 0,
        "prompt": "class Solution:\n    def romanToInt(self, s: str) -> int:\n        \"\"\"\n        Roman numerals are represented by seven different symbols: I, V, X, L, C, D and M.\n        Symbol       Value\n        I             1\n        V             5\n        X             10\n        L             50\n        C             100\n        D             500\n        M             1000\n        For example, 2 is written as II in Roman numeral, just two ones added together. 12 is written as XII, which is simply X + II. The number 27 is written as XXVII, which is XX + V + II.\n        Roman numerals are usually written largest to smallest from left to right. However, the numeral for four is not IIII. Instead, the number four is written as IV. Because the one is before the five we subtract it making four. The same principle applies to the number nine, which is written as IX. There are six instances where subtraction is used:\n            I can be placed before V (5) and X (10) to make 4 and 9. \n            X can be placed before L (50) and C (100) to make 40 and 90. \n            C can be placed before D (500) and M (1000) to make 400 and 900.\n        Given a roman numeral, convert it to an integer.\n        Example 1:\n        Input: s = \"III\"\n        Output: 3\n        Explanation: III = 3.\n        Example 2:\n        Input: s = \"LVIII\"\n        Output: 58\n        Explanation: L = 50, V= 5, III = 3.\n        Example 3:\n        Input: s = \"MCMXCIV\"\n        Output: 1994\n        Explanation: M = 1000, CM = 900, XC = 90 and IV = 4.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 4,
        "answer": "        roman_to_int = {\n            'I': 1,\n            'V': 5,\n            'X': 10,\n            'L': 50,\n            'C': 100,\n            'D': 500,\n            'M': 1000\n        }"
    },
    {
        "number": 13,
        "title": "Roman to Integer",
        "difficulty": 0,
        "prompt": "class Solution:\n    def romanToInt(self, s: str) -> int:\n        \"\"\"\n        Roman numerals are represented by seven different symbols: I, V, X, L, C, D and M.\n        Symbol       Value\n        I             1\n        V             5\n        X             10\n        L             50\n        C             100\n        D             500\n        M             1000\n        For example, 2 is written as II in Roman numeral, just two ones added together. 12 is written as XII, which is simply X + II. The number 27 is written as XXVII, which is XX + V + II.\n        Roman numerals are usually written largest to smallest from left to right. However, the numeral for four is not IIII. Instead, the number four is written as IV. Because the one is before the five we subtract it making four. The same principle applies to the number nine, which is written as IX. There are six instances where subtraction is used:\n            I can be placed before V (5) and X (10) to make 4 and 9. \n            X can be placed before L (50) and C (100) to make 40 and 90. \n            C can be placed before D (500) and M (1000) to make 400 and 900.\n        Given a roman numeral, convert it to an integer.\n        Example 1:\n        Input: s = \"III\"\n        Output: 3\n        Explanation: III = 3.\n        Example 2:\n        Input: s = \"LVIII\"\n        Output: 58\n        Explanation: L = 50, V= 5, III = 3.\n        Example 3:\n        Input: s = \"MCMXCIV\"\n        Output: 1994\n        Explanation: M = 1000, CM = 900, XC = 90 and IV = 4.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 5,
        "answer": "        roman_nums = {\n            \"I\": 1,\n            \"V\": 5,\n            \"X\": 10,\n            \"L\": 50,\n            \"C\": 100,\n            \"D\": 500,\n            \"M\": 1000,\n            \"IV\": 4,\n            \"IX\": 9,\n            \"XL\": 40,\n            \"XC\": 90,\n            \"CD\": 400,\n            \"CM\": 900,\n        }\n        i = 0\n        sum = 0\n        while i < len(s):\n            if i + 1 < len(s) and s[i : i + 2] in roman_nums:\n                sum += roman_nums[s[i : i + 2]]\n                i += 2\n            else:\n                sum += roman_nums[s[i]]\n                i += 1\n        return sum"
    },
    {
        "number": 14,
        "title": "Longest Common Prefix",
        "difficulty": 0,
        "prompt": "class Solution:\n    def longestCommonPrefix(self, strs: List[str]) -> str:\n        \"\"\"\n        Write a function to find the longest common prefix string amongst an array of strings.\n        If there is no common prefix, return an empty string \"\".\n        Example 1:\n        Input: strs = [\"flower\",\"flow\",\"flight\"]\n        Output: \"fl\"\n        Example 2:\n        Input: strs = [\"dog\",\"racecar\",\"car\"]\n        Output: \"\"\n        Explanation: There is no common prefix among the input strings.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        if not strs: return ''\n        first = strs[0]\n        n = len(strs)\n        for i, ch in enumerate(first):\n            for other in strs[1:]:\n                if i >= len(other) or ch!= other[i]:\n                    return first[:i]\n        return first"
    },
    {
        "number": 14,
        "title": "Longest Common Prefix",
        "difficulty": 0,
        "prompt": "class Solution:\n    def longestCommonPrefix(self, strs: List[str]) -> str:\n        \"\"\"\n        Write a function to find the longest common prefix string amongst an array of strings.\n        If there is no common prefix, return an empty string \"\".\n        Example 1:\n        Input: strs = [\"flower\",\"flow\",\"flight\"]\n        Output: \"fl\"\n        Example 2:\n        Input: strs = [\"dog\",\"racecar\",\"car\"]\n        Output: \"\"\n        Explanation: There is no common prefix among the input strings.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        if not strs:\n            return \"\"\n        ans = strs[0]\n        for i in range(1, len(strs)):\n            tmp = \"\"\n            for j in range(len(ans)):\n                if ans[j] == strs[i][j]:\n                    tmp += strs[i][j]\n                else:\n                    break\n            ans = tmp\n            if not ans:\n                break\n        return ans\n<|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>"
    },
    {
        "number": 14,
        "title": "Longest Common Prefix",
        "difficulty": 0,
        "prompt": "class Solution:\n    def longestCommonPrefix(self, strs: List[str]) -> str:\n        \"\"\"\n        Write a function to find the longest common prefix string amongst an array of strings.\n        If there is no common prefix, return an empty string \"\".\n        Example 1:\n        Input: strs = [\"flower\",\"flow\",\"flight\"]\n        Output: \"fl\"\n        Example 2:\n        Input: strs = [\"dog\",\"racecar\",\"car\"]\n        Output: \"\"\n        Explanation: There is no common prefix among the input strings.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 3,
        "answer": "        if not strs:\n            return ''\n        elif len(strs) == 1:\n            return strs[0]\n        else:\n            prefix = ''\n            shortest_str = min(strs, key=len)\n            for i in range(len(shortest_str)):\n                if all([(x.startswith(shortest_str[:i+1])) for x in strs]):\n                    prefix = shortest_str[:i+1]\n                else:\n                    break\n            return prefix"
    },
    {
        "number": 14,
        "title": "Longest Common Prefix",
        "difficulty": 0,
        "prompt": "class Solution:\n    def longestCommonPrefix(self, strs: List[str]) -> str:\n        \"\"\"\n        Write a function to find the longest common prefix string amongst an array of strings.\n        If there is no common prefix, return an empty string \"\".\n        Example 1:\n        Input: strs = [\"flower\",\"flow\",\"flight\"]\n        Output: \"fl\"\n        Example 2:\n        Input: strs = [\"dog\",\"racecar\",\"car\"]\n        Output: \"\"\n        Explanation: There is no common prefix among the input strings.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 4,
        "answer": "        if len(strs) == 0:\n            return \"\"\n        if len(strs) == 1:\n            return strs[0]\n        strs.sort()\n        res = \"\"\n        for i in range(len(strs[0])):\n            if len(strs[0]) - i == 0:\n                return res\n            if strs[0][i] == strs[-1][i]:\n                res += strs[0][i]\n            else:\n                return res"
    },
    {
        "number": 14,
        "title": "Longest Common Prefix",
        "difficulty": 0,
        "prompt": "class Solution:\n    def longestCommonPrefix(self, strs: List[str]) -> str:\n        \"\"\"\n        Write a function to find the longest common prefix string amongst an array of strings.\n        If there is no common prefix, return an empty string \"\".\n        Example 1:\n        Input: strs = [\"flower\",\"flow\",\"flight\"]\n        Output: \"fl\"\n        Example 2:\n        Input: strs = [\"dog\",\"racecar\",\"car\"]\n        Output: \"\"\n        Explanation: There is no common prefix among the input strings.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 5,
        "answer": "        if not strs:\n            return ''\n        if len(strs) == 1:\n            return strs[0]\n        if len(strs) == 2:\n            if len(strs[0]) < len(strs[1]):\n                strs[0], strs[1] = strs[1], strs[0]\n            if len(strs[0]) == len(strs[1]):\n                return strs[0]\n            for i in range(len(strs[0])):\n                if strs[0][i]!= strs[1][i]:\n                    return strs[0][:i]\n            return strs[0]\n        if len(strs) == 3:\n            if len(strs[0]) < len(strs[1]):\n                strs[0], strs[1] = strs[1], strs[0]\n            if len(strs[0]) < len(strs[2]):\n                strs[0], strs[2] = strs[2], strs[0]\n            if len(strs[0]) == len(strs[1]):\n                if len(strs[1]) < len(strs[2]):\n                    strs[1"
    },
    {
        "number": 15,
        "title": "3Sum",
        "difficulty": 1,
        "prompt": "class Solution:\n    def threeSum(self, nums: List[int]) -> List[List[int]]:\n        \"\"\"\n        Given an integer array nums, return all the triplets [nums[i], nums[j], nums[k]] such that i!= j, i!= k, and j!= k, and nums[i] + nums[j] + nums[k] == 0.\n        Notice that the solution set must not contain duplicate triplets.\n        Example 1:\n        Input: nums = [-1,0,1,2,-1,-4]\n        Output: [[-1,-1,2],[-1,0,1]]\n        Explanation: \n        nums[0] + nums[1] + nums[2] = (-1) + 0 + 1 = 0.\n        nums[1] + nums[2] + nums[4] = 0 + 1 + (-1) = 0.\n        nums[0] + nums[3] + nums[4] = (-1) + 2 + (-1) = 0.\n        The distinct triplets are [-1,0,1] and [-1,-1,2].\n        Notice that the order of the output and the order of the triplets does not matter.\n        Example 2:\n        Input: nums = [0,1,1]\n        Output: []\n        Explanation: The only possible triplet does not sum up to 0.\n        Example 3:\n        Input: nums = [0,0,0]\n        Output: [[0,0,0]]\n        Explanation: The only possible triplet sums up to 0.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        # solution 1:\n        # hash table\n        # O(N)\n        # O(N)\n        # nums = sorted(nums)\n        # result = []\n        # for i in range(len(nums)):\n        #     if i > 0 and nums[i] == nums[i - 1]:\n        #         continue\n        #     l, r = i + 1, len(nums) - 1\n        #     while l < r:\n        #         s = nums[i] + nums[l] + nums[r]\n        #         if s < 0:\n        #             l += 1\n        #         elif s > 0:\n        #             r -= 1\n        #         else:\n        #             result.append([nums[i], nums[l], nums[r]])\n        #             while l < r and nums[l] == nums[l + 1]:\n        #                 l += 1\n        #             while l < r and nums[r] == nums[r - 1]:\n        #                 r -= 1\n        #             l += 1\n        #             r -= 1\n        # return result\n        # solution 2:\n        # O(n^2)\n        # O(1)\n        nums ="
    },
    {
        "number": 15,
        "title": "3Sum",
        "difficulty": 1,
        "prompt": "class Solution:\n    def threeSum(self, nums: List[int]) -> List[List[int]]:\n        \"\"\"\n        Given an integer array nums, return all the triplets [nums[i], nums[j], nums[k]] such that i!= j, i!= k, and j!= k, and nums[i] + nums[j] + nums[k] == 0.\n        Notice that the solution set must not contain duplicate triplets.\n        Example 1:\n        Input: nums = [-1,0,1,2,-1,-4]\n        Output: [[-1,-1,2],[-1,0,1]]\n        Explanation: \n        nums[0] + nums[1] + nums[2] = (-1) + 0 + 1 = 0.\n        nums[1] + nums[2] + nums[4] = 0 + 1 + (-1) = 0.\n        nums[0] + nums[3] + nums[4] = (-1) + 2 + (-1) = 0.\n        The distinct triplets are [-1,0,1] and [-1,-1,2].\n        Notice that the order of the output and the order of the triplets does not matter.\n        Example 2:\n        Input: nums = [0,1,1]\n        Output: []\n        Explanation: The only possible triplet does not sum up to 0.\n        Example 3:\n        Input: nums = [0,0,0]\n        Output: [[0,0,0]]\n        Explanation: The only possible triplet sums up to 0.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        \n        # create a new list of tuples\n        sorted_list = []\n        \n        # iterate over list of nums\n        for i in range(0, len(nums)):\n            \n            # iterate over list of nums again\n            for j in range(i + 1, len(nums)):\n                \n                # iterate over list of nums again\n                for k in range(j + 1, len(nums)):\n                    \n                    # if the sum of the three items is 0\n                    if (nums[i] + nums[j] + nums[k]) == 0:\n                        \n                        # create a tuple with the three items\n                        tuple_to_append = (nums[i], nums[j], nums[k])\n                        \n                        # if the tuple is not already in the list of tuples\n                        if tuple_to_append not in sorted_list:\n                            \n                            # add the tuple to the list of tuples\n                            sorted_list.append(tuple_to_append)\n        \n        # return the list of tuples\n        return sorted_list\n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n"
    },
    {
        "number": 15,
        "title": "3Sum",
        "difficulty": 1,
        "prompt": "class Solution:\n    def threeSum(self, nums: List[int]) -> List[List[int]]:\n        \"\"\"\n        Given an integer array nums, return all the triplets [nums[i], nums[j], nums[k]] such that i!= j, i!= k, and j!= k, and nums[i] + nums[j] + nums[k] == 0.\n        Notice that the solution set must not contain duplicate triplets.\n        Example 1:\n        Input: nums = [-1,0,1,2,-1,-4]\n        Output: [[-1,-1,2],[-1,0,1]]\n        Explanation: \n        nums[0] + nums[1] + nums[2] = (-1) + 0 + 1 = 0.\n        nums[1] + nums[2] + nums[4] = 0 + 1 + (-1) = 0.\n        nums[0] + nums[3] + nums[4] = (-1) + 2 + (-1) = 0.\n        The distinct triplets are [-1,0,1] and [-1,-1,2].\n        Notice that the order of the output and the order of the triplets does not matter.\n        Example 2:\n        Input: nums = [0,1,1]\n        Output: []\n        Explanation: The only possible triplet does not sum up to 0.\n        Example 3:\n        Input: nums = [0,0,0]\n        Output: [[0,0,0]]\n        Explanation: The only possible triplet sums up to 0.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 3,
        "answer": "        # 1. \u66b4\u529b\u6cd5 \u8d85\u65f6\n        # \u66b4\u529b\u6cd5\uff1a\u904d\u5386\u6240\u6709\u53ef\u80fd\u6027\uff0c\u627e\u5230\u4e09\u4e2a\u6570\uff0c\u8fd4\u56de\n        # res = []\n        # # \u786e\u4fddnums\u91cc\u9762\u4e0d\u542b\u91cd\u590d\u5143\u7d20\n        # nums = list(set(nums))\n        # length = len(nums)\n        # for i in range(length):\n        #     for j in range(i + 1, length):\n        #         for k in range(j + 1, length):\n        #             if nums[i] + nums[j] + nums[k] == 0:\n        #                 res.append([nums[i], nums[j], nums[k]])\n        # return res"
    },
    {
        "number": 15,
        "title": "3Sum",
        "difficulty": 1,
        "prompt": "class Solution:\n    def threeSum(self, nums: List[int]) -> List[List[int]]:\n        \"\"\"\n        Given an integer array nums, return all the triplets [nums[i], nums[j], nums[k]] such that i!= j, i!= k, and j!= k, and nums[i] + nums[j] + nums[k] == 0.\n        Notice that the solution set must not contain duplicate triplets.\n        Example 1:\n        Input: nums = [-1,0,1,2,-1,-4]\n        Output: [[-1,-1,2],[-1,0,1]]\n        Explanation: \n        nums[0] + nums[1] + nums[2] = (-1) + 0 + 1 = 0.\n        nums[1] + nums[2] + nums[4] = 0 + 1 + (-1) = 0.\n        nums[0] + nums[3] + nums[4] = (-1) + 2 + (-1) = 0.\n        The distinct triplets are [-1,0,1] and [-1,-1,2].\n        Notice that the order of the output and the order of the triplets does not matter.\n        Example 2:\n        Input: nums = [0,1,1]\n        Output: []\n        Explanation: The only possible triplet does not sum up to 0.\n        Example 3:\n        Input: nums = [0,0,0]\n        Output: [[0,0,0]]\n        Explanation: The only possible triplet sums up to 0.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 4,
        "answer": "        # HARD\n        # I can use a two pointer with three sum"
    },
    {
        "number": 15,
        "title": "3Sum",
        "difficulty": 1,
        "prompt": "class Solution:\n    def threeSum(self, nums: List[int]) -> List[List[int]]:\n        \"\"\"\n        Given an integer array nums, return all the triplets [nums[i], nums[j], nums[k]] such that i!= j, i!= k, and j!= k, and nums[i] + nums[j] + nums[k] == 0.\n        Notice that the solution set must not contain duplicate triplets.\n        Example 1:\n        Input: nums = [-1,0,1,2,-1,-4]\n        Output: [[-1,-1,2],[-1,0,1]]\n        Explanation: \n        nums[0] + nums[1] + nums[2] = (-1) + 0 + 1 = 0.\n        nums[1] + nums[2] + nums[4] = 0 + 1 + (-1) = 0.\n        nums[0] + nums[3] + nums[4] = (-1) + 2 + (-1) = 0.\n        The distinct triplets are [-1,0,1] and [-1,-1,2].\n        Notice that the order of the output and the order of the triplets does not matter.\n        Example 2:\n        Input: nums = [0,1,1]\n        Output: []\n        Explanation: The only possible triplet does not sum up to 0.\n        Example 3:\n        Input: nums = [0,0,0]\n        Output: [[0,0,0]]\n        Explanation: The only possible triplet sums up to 0.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 5,
        "answer": "        nums.sort()\n        sol = set()\n        for i in range(len(nums)-2):\n            if i == 0 or nums[i]!= nums[i-1]:\n                for j in range(i+1,len(nums)-1):\n                    if j == i+1 or nums[j]!= nums[j-1]:\n                        for k in range(j+1,len(nums)):\n                            if k == j+1 or nums[k]!= nums[k-1]:\n                                if nums[i] + nums[j] + nums[k] == 0:\n                                    sol.add((nums[i],nums[j],nums[k]))\n        return list(sol)<|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>"
    },
    {
        "number": 16,
        "title": "3Sum Closest",
        "difficulty": 1,
        "prompt": "class Solution:\n    def threeSumClosest(self, nums: List[int], target: int) -> int:\n        \"\"\"\n        Given an integer array nums of length n and an integer target, find three integers in nums such that the sum is closest to target.\n        Return the sum of the three integers.\n        You may assume that each input would have exactly one solution.\n        Example 1:\n        Input: nums = [-1,2,1,-4], target = 1\n        Output: 2\n        Explanation: The sum that is closest to the target is 2. (-1 + 2 + 1 = 2).\n        Example 2:\n        Input: nums = [0,0,0], target = 1\n        Output: 0\n        Explanation: The sum that is closest to the target is 0. (0 + 0 + 0 = 0).\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        nums.sort()\n        res = 0\n        len_n = len(nums)\n        for i in range(len_n-2):\n            l,r = i+1,len_n-1\n            while(l<r):\n                sum_ = nums[i] + nums[l] + nums[r]\n                if abs(target-sum_) < abs(target-res):\n                    res = sum_\n                if sum_ < target:\n                    l += 1\n                else:\n                    r -= 1\n        return res"
    },
    {
        "number": 16,
        "title": "3Sum Closest",
        "difficulty": 1,
        "prompt": "class Solution:\n    def threeSumClosest(self, nums: List[int], target: int) -> int:\n        \"\"\"\n        Given an integer array nums of length n and an integer target, find three integers in nums such that the sum is closest to target.\n        Return the sum of the three integers.\n        You may assume that each input would have exactly one solution.\n        Example 1:\n        Input: nums = [-1,2,1,-4], target = 1\n        Output: 2\n        Explanation: The sum that is closest to the target is 2. (-1 + 2 + 1 = 2).\n        Example 2:\n        Input: nums = [0,0,0], target = 1\n        Output: 0\n        Explanation: The sum that is closest to the target is 0. (0 + 0 + 0 = 0).\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        # Time O(n^2)\n        # Space O(1)\n        # Sort the array.\n        # Loop through the array and make a left and a right pointer. \n        # Calculate the sum of the three elements and compare it with the current target.\n        # Move the pointers to the left and right with the minimum sum.\n        # Update the current sum if it is closer to the target.\n        nums.sort()\n        result = None\n        min_difference = None\n        for i in range(len(nums) - 2):\n            left_pointer = i + 1\n            right_pointer = len(nums) - 1\n            while left_pointer < right_pointer:\n                current_sum = nums[i] + nums[left_pointer] + nums[right_pointer]\n                if result is None:\n                    result = current_sum\n                else:\n                    difference = abs(target - current_sum)\n                    if min_difference is None or difference < min_difference:\n                        min_difference = difference\n                        result = current_sum\n                    if current_sum < target:\n                        left_pointer += 1\n                    else:\n                        right_pointer -= 1\n        return result\n    \n    def threeSumClosest(self, nums: List[int],"
    },
    {
        "number": 16,
        "title": "3Sum Closest",
        "difficulty": 1,
        "prompt": "class Solution:\n    def threeSumClosest(self, nums: List[int], target: int) -> int:\n        \"\"\"\n        Given an integer array nums of length n and an integer target, find three integers in nums such that the sum is closest to target.\n        Return the sum of the three integers.\n        You may assume that each input would have exactly one solution.\n        Example 1:\n        Input: nums = [-1,2,1,-4], target = 1\n        Output: 2\n        Explanation: The sum that is closest to the target is 2. (-1 + 2 + 1 = 2).\n        Example 2:\n        Input: nums = [0,0,0], target = 1\n        Output: 0\n        Explanation: The sum that is closest to the target is 0. (0 + 0 + 0 = 0).\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 3,
        "answer": "        nums.sort()\n        min_sum = nums[0] + nums[1] + nums[2]\n        result = min_sum\n        for i in range(len(nums) - 2):\n            start = i + 1\n            end = len(nums) - 1\n            while start < end:\n                sum = nums[i] + nums[start] + nums[end]\n                if sum == target:\n                    return sum\n                elif abs(target - sum) < abs(target - min_sum):\n                    min_sum = sum\n                elif sum > target:\n                    end -= 1\n                else:\n                    start += 1\n        return min_sum"
    },
    {
        "number": 16,
        "title": "3Sum Closest",
        "difficulty": 1,
        "prompt": "class Solution:\n    def threeSumClosest(self, nums: List[int], target: int) -> int:\n        \"\"\"\n        Given an integer array nums of length n and an integer target, find three integers in nums such that the sum is closest to target.\n        Return the sum of the three integers.\n        You may assume that each input would have exactly one solution.\n        Example 1:\n        Input: nums = [-1,2,1,-4], target = 1\n        Output: 2\n        Explanation: The sum that is closest to the target is 2. (-1 + 2 + 1 = 2).\n        Example 2:\n        Input: nums = [0,0,0], target = 1\n        Output: 0\n        Explanation: The sum that is closest to the target is 0. (0 + 0 + 0 = 0).\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 4,
        "answer": "        result = float('inf')\n        nums.sort()\n        for i in range(len(nums)):\n            left, right = i+1, len(nums)-1\n            while left < right:\n                val = nums[i]+nums[left]+nums[right]\n                if abs(val-target) < abs(result-target):\n                    result = val\n                if val < target:\n                    left += 1\n                elif val > target:\n                    right -= 1\n                else:\n                    return target\n        return result"
    },
    {
        "number": 16,
        "title": "3Sum Closest",
        "difficulty": 1,
        "prompt": "class Solution:\n    def threeSumClosest(self, nums: List[int], target: int) -> int:\n        \"\"\"\n        Given an integer array nums of length n and an integer target, find three integers in nums such that the sum is closest to target.\n        Return the sum of the three integers.\n        You may assume that each input would have exactly one solution.\n        Example 1:\n        Input: nums = [-1,2,1,-4], target = 1\n        Output: 2\n        Explanation: The sum that is closest to the target is 2. (-1 + 2 + 1 = 2).\n        Example 2:\n        Input: nums = [0,0,0], target = 1\n        Output: 0\n        Explanation: The sum that is closest to the target is 0. (0 + 0 + 0 = 0).\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 5,
        "answer": "        nums.sort()\n        ans = nums[0] + nums[1] + nums[2]\n        for i in range(len(nums)):\n            j, k = i+1, len(nums)-1\n            while j < k:\n                temp = nums[i] + nums[j] + nums[k]\n                if abs(temp - target) < abs(ans - target):\n                    ans = temp\n                if temp < target:\n                    j += 1\n                else:\n                    k -= 1\n        return ans"
    },
    {
        "number": 17,
        "title": "Letter Combinations of a Phone Number",
        "difficulty": 1,
        "prompt": "class Solution:\n    def letterCombinations(self, digits: str) -> List[str]:\n        \"\"\"\n        Given a string containing digits from 2-9 inclusive, return all possible letter combinations that the number could represent. Return the answer in any order.\n        A mapping of digits to letters (just like on the telephone buttons) is given below. Note that 1 does not map to any letters.\n        Example 1:\n        Input: digits = \"23\"\n        Output: [\"ad\",\"ae\",\"af\",\"bd\",\"be\",\"bf\",\"cd\",\"ce\",\"cf\"]\n        Example 2:\n        Input: digits = \"\"\n        Output: []\n        Example 3:\n        Input: digits = \"2\"\n        Output: [\"a\",\"b\",\"c\"]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        self.char_dict = {\n            \"2\": [\"a\", \"b\", \"c\"],\n            \"3\": [\"d\", \"e\", \"f\"],\n            \"4\": [\"g\", \"h\", \"i\"],\n            \"5\": [\"j\", \"k\", \"l\"],\n            \"6\": [\"m\", \"n\", \"o\"],\n            \"7\": [\"p\", \"q\", \"r\", \"s\"],\n            \"8\": [\"t\", \"u\", \"v\"],\n            \"9\": [\"w\", \"x\", \"y\", \"z\"],\n        }"
    },
    {
        "number": 17,
        "title": "Letter Combinations of a Phone Number",
        "difficulty": 1,
        "prompt": "class Solution:\n    def letterCombinations(self, digits: str) -> List[str]:\n        \"\"\"\n        Given a string containing digits from 2-9 inclusive, return all possible letter combinations that the number could represent. Return the answer in any order.\n        A mapping of digits to letters (just like on the telephone buttons) is given below. Note that 1 does not map to any letters.\n        Example 1:\n        Input: digits = \"23\"\n        Output: [\"ad\",\"ae\",\"af\",\"bd\",\"be\",\"bf\",\"cd\",\"ce\",\"cf\"]\n        Example 2:\n        Input: digits = \"\"\n        Output: []\n        Example 3:\n        Input: digits = \"2\"\n        Output: [\"a\",\"b\",\"c\"]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        # Solution 1\n        # num = []\n        # for digit in digits:\n        #     num.append(digit)\n        #\n        # letters = {\n        #     \"2\": [\"a\",\"b\",\"c\"],\n        #     \"3\": [\"d\",\"e\",\"f\"],\n        #     \"4\": [\"g\",\"h\",\"i\"],\n        #     \"5\": [\"j\",\"k\",\"l\"],\n        #     \"6\": [\"m\",\"n\",\"o\"],\n        #     \"7\": [\"p\",\"q\",\"r\",\"s\"],\n        #     \"8\": [\"t\",\"u\",\"v\"],\n        #     \"9\": [\"w\",\"x\",\"y\",\"z\"]\n        # }\n        #\n        # num = int(\"\".join(num))\n        # letters = list(letters.get(num))\n        #\n        # def backTrack(combination, next_digits):\n        #     if len(next_digits) == 0:\n        #         output.append(combination)\n        #     else:\n        #         for letter in letters:\n        #             backTrack(combination + letter, next_digits[1:])\n        #\n        # output = []\n        # if digits:\n        #     backTrack(\"\", digits)\n        # return output"
    },
    {
        "number": 17,
        "title": "Letter Combinations of a Phone Number",
        "difficulty": 1,
        "prompt": "class Solution:\n    def letterCombinations(self, digits: str) -> List[str]:\n        \"\"\"\n        Given a string containing digits from 2-9 inclusive, return all possible letter combinations that the number could represent. Return the answer in any order.\n        A mapping of digits to letters (just like on the telephone buttons) is given below. Note that 1 does not map to any letters.\n        Example 1:\n        Input: digits = \"23\"\n        Output: [\"ad\",\"ae\",\"af\",\"bd\",\"be\",\"bf\",\"cd\",\"ce\",\"cf\"]\n        Example 2:\n        Input: digits = \"\"\n        Output: []\n        Example 3:\n        Input: digits = \"2\"\n        Output: [\"a\",\"b\",\"c\"]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 3,
        "answer": "        # base case\n        if len(digits) == 0:\n            return []\n        \n        # DP state\n        self.keypad = {'2': 'abc',\n                       '3': 'def',\n                       '4': 'ghi',\n                       '5': 'jkl',\n                       '6':'mno',\n                       '7': 'pqrs',\n                       '8': 'tuv',\n                       '9': 'wxyz'}\n        \n        self.combinations = []\n        \n        # recursive call\n        self.generate_combinations(digits, '', 0)\n        \n        return self.combinations\n    \n    def generate_combinations(self, digits, current_combination, index):\n        # base case\n        if index == len(digits):\n            self.combinations.append(current_combination)\n            return\n        \n        # recursive case\n        for char in self.keypad[digits[index]]:\n            self.generate_combinations(digits, current_combination + char, index + 1)\n<|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>"
    },
    {
        "number": 17,
        "title": "Letter Combinations of a Phone Number",
        "difficulty": 1,
        "prompt": "class Solution:\n    def letterCombinations(self, digits: str) -> List[str]:\n        \"\"\"\n        Given a string containing digits from 2-9 inclusive, return all possible letter combinations that the number could represent. Return the answer in any order.\n        A mapping of digits to letters (just like on the telephone buttons) is given below. Note that 1 does not map to any letters.\n        Example 1:\n        Input: digits = \"23\"\n        Output: [\"ad\",\"ae\",\"af\",\"bd\",\"be\",\"bf\",\"cd\",\"ce\",\"cf\"]\n        Example 2:\n        Input: digits = \"\"\n        Output: []\n        Example 3:\n        Input: digits = \"2\"\n        Output: [\"a\",\"b\",\"c\"]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 4,
        "answer": "        # Backtracking\n        if not digits: return []\n        self.phone = {'2':'abc', '3':'def', '4':'ghi', '5':'jkl', '6':'mno', '7':'pqrs', '8':'tuv', '9':'wxyz'}\n        self.ans = []\n        def dfs(path, pos):\n            if pos == len(digits):\n                self.ans.append(''.join(path))\n                return\n            for c in self.phone[digits[pos]]:\n                path.append(c)\n                dfs(path, pos+1)\n                path.pop()\n        dfs([], 0)\n        return self.ans\n<|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>"
    },
    {
        "number": 17,
        "title": "Letter Combinations of a Phone Number",
        "difficulty": 1,
        "prompt": "class Solution:\n    def letterCombinations(self, digits: str) -> List[str]:\n        \"\"\"\n        Given a string containing digits from 2-9 inclusive, return all possible letter combinations that the number could represent. Return the answer in any order.\n        A mapping of digits to letters (just like on the telephone buttons) is given below. Note that 1 does not map to any letters.\n        Example 1:\n        Input: digits = \"23\"\n        Output: [\"ad\",\"ae\",\"af\",\"bd\",\"be\",\"bf\",\"cd\",\"ce\",\"cf\"]\n        Example 2:\n        Input: digits = \"\"\n        Output: []\n        Example 3:\n        Input: digits = \"2\"\n        Output: [\"a\",\"b\",\"c\"]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 5,
        "answer": "        #Approach: Backtracking\n        #Time Complexity: O(3^N)\n        #Space Complexity: O(3^N)\n        self.ans = []\n        self.mapping = {\n            \"2\": [\"a\", \"b\", \"c\"],\n            \"3\": [\"d\", \"e\", \"f\"],\n            \"4\": [\"g\", \"h\", \"i\"],\n            \"5\": [\"j\", \"k\", \"l\"],\n            \"6\": [\"m\", \"n\", \"o\"],\n            \"7\": [\"p\", \"q\", \"r\", \"s\"],\n            \"8\": [\"t\", \"u\", \"v\"],\n            \"9\": [\"w\", \"x\", \"y\", \"z\"]\n        }\n        def backtracking(idx, curr):\n            if idx == len(digits):\n                self.ans.append(''.join(curr))\n                return\n            for char in self.mapping[digits[idx]]:\n                curr.append(char)\n                backtracking(idx + 1, curr)\n                curr.pop()\n        backtracking(0, [])\n        return self.ans\n<|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>"
    },
    {
        "number": 18,
        "title": "4Sum",
        "difficulty": 1,
        "prompt": "class Solution:\n    def fourSum(self, nums: List[int], target: int) -> List[List[int]]:\n        \"\"\"\n        Given an array nums of n integers, return an array of all the unique quadruplets [nums[a], nums[b], nums[c], nums[d]] such that:\n            0 <= a, b, c, d < n\n            a, b, c, and d are distinct.\n            nums[a] + nums[b] + nums[c] + nums[d] == target\n        You may return the answer in any order.\n        Example 1:\n        Input: nums = [1,0,-1,0,-2,2], target = 0\n        Output: [[-2,-1,1,2],[-2,0,0,2],[-1,0,0,1]]\n        Example 2:\n        Input: nums = [2,2,2,2,2], target = 8\n        Output: [[2,2,2,2]]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        nums.sort()\n        ans = []\n        l = len(nums)\n        for i in range(0, l - 3):\n            if i > 0 and nums[i] == nums[i - 1]:\n                continue\n            for j in range(i + 1, l - 2):\n                if j > i + 1 and nums[j] == nums[j - 1]:\n                    continue\n                k = j + 1\n                h = l - 1\n                t = target - nums[i] - nums[j]\n                while k < h:\n                    if nums[k] + nums[h] == t:\n                        ans.append([nums[i], nums[j], nums[k], nums[h]])\n                        k += 1\n                        h -= 1\n                        while k < h and nums[k] == nums[k - 1]:\n                            k += 1\n                        while k < h and nums[h] == nums[h + 1]:\n                            h -= 1\n                    elif nums[k] + nums[h] > t:\n                        h -= 1\n                    else:\n                        k += 1\n        return ans\n<|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>"
    },
    {
        "number": 18,
        "title": "4Sum",
        "difficulty": 1,
        "prompt": "class Solution:\n    def fourSum(self, nums: List[int], target: int) -> List[List[int]]:\n        \"\"\"\n        Given an array nums of n integers, return an array of all the unique quadruplets [nums[a], nums[b], nums[c], nums[d]] such that:\n            0 <= a, b, c, d < n\n            a, b, c, and d are distinct.\n            nums[a] + nums[b] + nums[c] + nums[d] == target\n        You may return the answer in any order.\n        Example 1:\n        Input: nums = [1,0,-1,0,-2,2], target = 0\n        Output: [[-2,-1,1,2],[-2,0,0,2],[-1,0,0,1]]\n        Example 2:\n        Input: nums = [2,2,2,2,2], target = 8\n        Output: [[2,2,2,2]]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        nums.sort()\n        # nums = sorted(nums)\n        result = []\n        n = len(nums)\n        for a in range(n-3):\n            if a > 0 and nums[a] == nums[a-1]:\n                continue\n            for b in range(a+1, n-2):\n                if b > a+1 and nums[b] == nums[b-1]:\n                    continue\n                left = b+1\n                right = n-1\n                while left < right:\n                    sum_ = nums[a] + nums[b] + nums[left] + nums[right]\n                    if sum_ > target:\n                        right -= 1\n                    elif sum_ < target:\n                        left += 1\n                    else:\n                        result.append([nums[a], nums[b], nums[left], nums[right]])\n                        while left < right and nums[left] == nums[left+1]:\n                            left += 1\n                        while left < right and nums[right] == nums[right-1]:\n                            right -= 1\n                        left += 1\n                        right -= 1\n        return result"
    },
    {
        "number": 18,
        "title": "4Sum",
        "difficulty": 1,
        "prompt": "class Solution:\n    def fourSum(self, nums: List[int], target: int) -> List[List[int]]:\n        \"\"\"\n        Given an array nums of n integers, return an array of all the unique quadruplets [nums[a], nums[b], nums[c], nums[d]] such that:\n            0 <= a, b, c, d < n\n            a, b, c, and d are distinct.\n            nums[a] + nums[b] + nums[c] + nums[d] == target\n        You may return the answer in any order.\n        Example 1:\n        Input: nums = [1,0,-1,0,-2,2], target = 0\n        Output: [[-2,-1,1,2],[-2,0,0,2],[-1,0,0,1]]\n        Example 2:\n        Input: nums = [2,2,2,2,2], target = 8\n        Output: [[2,2,2,2]]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 3,
        "answer": "        nums = sorted(nums)\n        results = []\n        for i in range(len(nums) - 3):\n            if i > 0 and nums[i] == nums[i-1]:\n                continue\n            for j in range(i + 1, len(nums) - 2):\n                if j > i + 1 and nums[j] == nums[j-1]:\n                    continue\n                left = j + 1\n                right = len(nums) - 1\n                while left < right:\n                    current_sum = nums[i] + nums[j] + nums[left] + nums[right]\n                    if current_sum == target:\n                        results.append([nums[i], nums[j], nums[left], nums[right]])\n                        while left < right and nums[left] == nums[left + 1]:\n                            left += 1\n                        while left < right and nums[right] == nums[right - 1]:\n                            right -= 1\n                        left += 1\n                        right -= 1\n                    elif current_sum < target:\n                        left += 1\n                    else:\n                        right -= 1\n        return results<|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>"
    },
    {
        "number": 18,
        "title": "4Sum",
        "difficulty": 1,
        "prompt": "class Solution:\n    def fourSum(self, nums: List[int], target: int) -> List[List[int]]:\n        \"\"\"\n        Given an array nums of n integers, return an array of all the unique quadruplets [nums[a], nums[b], nums[c], nums[d]] such that:\n            0 <= a, b, c, d < n\n            a, b, c, and d are distinct.\n            nums[a] + nums[b] + nums[c] + nums[d] == target\n        You may return the answer in any order.\n        Example 1:\n        Input: nums = [1,0,-1,0,-2,2], target = 0\n        Output: [[-2,-1,1,2],[-2,0,0,2],[-1,0,0,1]]\n        Example 2:\n        Input: nums = [2,2,2,2,2], target = 8\n        Output: [[2,2,2,2]]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 4,
        "answer": "        \n        if not nums or len(nums) < 4:\n            return []\n        nums.sort()\n        n = len(nums)\n        res = set()\n        for i in range(n-3):\n            if i > 0 and nums[i] == nums[i-1]:\n                continue\n            for j in range(i+1,n-2):\n                if j > i+1 and nums[j] == nums[j-1]:\n                    continue\n                left = j+1\n                right = n-1\n                while left < right:\n                    total = nums[i] + nums[j] + nums[left] + nums[right]\n                    if total == target:\n                        res.add((nums[i], nums[j], nums[left], nums[right]))\n                        left += 1\n                        right -= 1\n                        while left < right and nums[left] == nums[left-1]:\n                            left += 1\n                        while left < right and nums[right] == nums[right+1]:\n                            right -= 1\n                    elif total < target:\n                        left += 1\n                    else:\n                        right -= 1\n        return [list(i) for i in res]\n    \n    def fourSum"
    },
    {
        "number": 18,
        "title": "4Sum",
        "difficulty": 1,
        "prompt": "class Solution:\n    def fourSum(self, nums: List[int], target: int) -> List[List[int]]:\n        \"\"\"\n        Given an array nums of n integers, return an array of all the unique quadruplets [nums[a], nums[b], nums[c], nums[d]] such that:\n            0 <= a, b, c, d < n\n            a, b, c, and d are distinct.\n            nums[a] + nums[b] + nums[c] + nums[d] == target\n        You may return the answer in any order.\n        Example 1:\n        Input: nums = [1,0,-1,0,-2,2], target = 0\n        Output: [[-2,-1,1,2],[-2,0,0,2],[-1,0,0,1]]\n        Example 2:\n        Input: nums = [2,2,2,2,2], target = 8\n        Output: [[2,2,2,2]]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 5,
        "answer": "        n = len(nums)\n        if n < 4: return []\n        nums.sort()\n        ret = set()\n        for i in range(n-3):\n            for j in range(i+1, n-2):\n                p, q = j+1, n-1\n                while p < q:\n                    s = nums[i] + nums[j] + nums[p] + nums[q]\n                    if s < target:\n                        p += 1\n                        while p < q and nums[p] == nums[p-1]: p += 1\n                    elif s > target:\n                        q -= 1\n                        while p < q and nums[q] == nums[q+1]: q -= 1\n                    else:\n                        ret.add(tuple(sorted([nums[i], nums[j], nums[p], nums[q]])))\n                        p += 1\n                        q -= 1\n                        while p < q and nums[p] == nums[p-1]: p += 1\n                        while p < q and nums[q] == nums[q+1]: q -= 1\n        return list(ret)"
    },
    {
        "number": 19,
        "title": "Remove Nth Node From End of List",
        "difficulty": 1,
        "prompt": "class Solution:\n    def removeNthFromEnd(self, head: Optional[ListNode], n: int) -> Optional[ListNode]:\n        \"\"\"\n        Given the head of a linked list, remove the nth node from the end of the list and return its head.\n        Example 1:\n        Input: head = [1,2,3,4,5], n = 2\n        Output: [1,2,3,5]\n        Example 2:\n        Input: head = [1], n = 1\n        Output: []\n        Example 3:\n        Input: head = [1,2], n = 1\n        Output: [1]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        dummy = ListNode(0, head)\n        length = 0\n        cur = dummy\n        while cur.next:\n            length += 1\n            cur = cur.next\n        cur = dummy\n        for _ in range(length - n):\n            cur = cur.next\n        cur.next = cur.next.next\n        return dummy.next"
    },
    {
        "number": 19,
        "title": "Remove Nth Node From End of List",
        "difficulty": 1,
        "prompt": "class Solution:\n    def removeNthFromEnd(self, head: Optional[ListNode], n: int) -> Optional[ListNode]:\n        \"\"\"\n        Given the head of a linked list, remove the nth node from the end of the list and return its head.\n        Example 1:\n        Input: head = [1,2,3,4,5], n = 2\n        Output: [1,2,3,5]\n        Example 2:\n        Input: head = [1], n = 1\n        Output: []\n        Example 3:\n        Input: head = [1,2], n = 1\n        Output: [1]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        if not head:\n            return head"
    },
    {
        "number": 19,
        "title": "Remove Nth Node From End of List",
        "difficulty": 1,
        "prompt": "class Solution:\n    def removeNthFromEnd(self, head: Optional[ListNode], n: int) -> Optional[ListNode]:\n        \"\"\"\n        Given the head of a linked list, remove the nth node from the end of the list and return its head.\n        Example 1:\n        Input: head = [1,2,3,4,5], n = 2\n        Output: [1,2,3,5]\n        Example 2:\n        Input: head = [1], n = 1\n        Output: []\n        Example 3:\n        Input: head = [1,2], n = 1\n        Output: [1]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 3,
        "answer": "        nodes = []\n        while head:\n            nodes.append(head)\n            head = head.next\n        if len(nodes) == 1 and n == 1:\n            return None\n        elif len(nodes) == 1 and n > 1:\n            return nodes[0]\n        elif len(nodes) == n + 1:\n            return nodes[0].next\n        else:\n            nodes[-n-1].next = nodes[-n].next\n            return nodes[0]\n<|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>"
    },
    {
        "number": 19,
        "title": "Remove Nth Node From End of List",
        "difficulty": 1,
        "prompt": "class Solution:\n    def removeNthFromEnd(self, head: Optional[ListNode], n: int) -> Optional[ListNode]:\n        \"\"\"\n        Given the head of a linked list, remove the nth node from the end of the list and return its head.\n        Example 1:\n        Input: head = [1,2,3,4,5], n = 2\n        Output: [1,2,3,5]\n        Example 2:\n        Input: head = [1], n = 1\n        Output: []\n        Example 3:\n        Input: head = [1,2], n = 1\n        Output: [1]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 4,
        "answer": "        slow = fast = head\n        for _ in range(n):\n            fast = fast.next"
    },
    {
        "number": 19,
        "title": "Remove Nth Node From End of List",
        "difficulty": 1,
        "prompt": "class Solution:\n    def removeNthFromEnd(self, head: Optional[ListNode], n: int) -> Optional[ListNode]:\n        \"\"\"\n        Given the head of a linked list, remove the nth node from the end of the list and return its head.\n        Example 1:\n        Input: head = [1,2,3,4,5], n = 2\n        Output: [1,2,3,5]\n        Example 2:\n        Input: head = [1], n = 1\n        Output: []\n        Example 3:\n        Input: head = [1,2], n = 1\n        Output: [1]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 5,
        "answer": "        \"\"\"\n        Method 1: double pointer\n        \"\"\"\n        # two pointers\n        # current node and current n\n        slow, fast = head, head\n        for _ in range(n):\n            fast = fast.next\n        # if there is only one node, return null\n        if fast is None:\n            return head.next"
    },
    {
        "number": 20,
        "title": "Valid Parentheses",
        "difficulty": 0,
        "prompt": "class Solution:\n    def isValid(self, s: str) -> bool:\n        \"\"\"\n        Given a string s containing just the characters '(', ')', '{', '}', '[' and ']', determine if the input string is valid.\n        An input string is valid if:\n            Open brackets must be closed by the same type of brackets.\n            Open brackets must be closed in the correct order.\n            Every close bracket has a corresponding open bracket of the same type.\n        Example 1:\n        Input: s = \"()\"\n        Output: true\n        Example 2:\n        Input: s = \"()[]{}\"\n        Output: true\n        Example 3:\n        Input: s = \"(]\"\n        Output: false\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        # I used stack and dictionary to store the different type of brackets\n        # in the case of matching brackets, I can store the type of the last bracket in the stack\n        # if not matching, I can store the type of the current bracket in the dictionary\n        stack = []\n        dic = {'(': ')', '[': ']', '{': '}'}\n        for char in s:\n            if char in dic.keys():\n                stack.append(char)\n            else:\n                if char in dic.values():\n                    if stack == [] or dic[stack[-1]]!= char:\n                        return False\n                    stack.pop()\n        return stack == []"
    },
    {
        "number": 20,
        "title": "Valid Parentheses",
        "difficulty": 0,
        "prompt": "class Solution:\n    def isValid(self, s: str) -> bool:\n        \"\"\"\n        Given a string s containing just the characters '(', ')', '{', '}', '[' and ']', determine if the input string is valid.\n        An input string is valid if:\n            Open brackets must be closed by the same type of brackets.\n            Open brackets must be closed in the correct order.\n            Every close bracket has a corresponding open bracket of the same type.\n        Example 1:\n        Input: s = \"()\"\n        Output: true\n        Example 2:\n        Input: s = \"()[]{}\"\n        Output: true\n        Example 3:\n        Input: s = \"(]\"\n        Output: false\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        stack = []\n        parentheses_map = {\")\": \"(\", \"}\": \"{\", \"]\": \"[\"}\n        for ch in s:\n            if ch in parentheses_map:\n                if stack and stack[-1] == parentheses_map[ch]:\n                    stack.pop()\n                else:\n                    return False\n            else:\n                stack.append(ch)\n        return not stack"
    },
    {
        "number": 20,
        "title": "Valid Parentheses",
        "difficulty": 0,
        "prompt": "class Solution:\n    def isValid(self, s: str) -> bool:\n        \"\"\"\n        Given a string s containing just the characters '(', ')', '{', '}', '[' and ']', determine if the input string is valid.\n        An input string is valid if:\n            Open brackets must be closed by the same type of brackets.\n            Open brackets must be closed in the correct order.\n            Every close bracket has a corresponding open bracket of the same type.\n        Example 1:\n        Input: s = \"()\"\n        Output: true\n        Example 2:\n        Input: s = \"()[]{}\"\n        Output: true\n        Example 3:\n        Input: s = \"(]\"\n        Output: false\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 3,
        "answer": "        stack = []\n        for c in s:\n            if c in \"([{\":\n                stack.append(c)\n            else:\n                if not stack:\n                    return False\n                else:\n                    top = stack.pop()\n                    if c == \"]\" and top == \"[\":\n                        continue\n                    elif c == \"}\" and top == \"{\":\n                        continue\n                    elif c == \")\" and top == \"(\":\n                        continue\n                    else:\n                        return False\n        return not stack"
    },
    {
        "number": 20,
        "title": "Valid Parentheses",
        "difficulty": 0,
        "prompt": "class Solution:\n    def isValid(self, s: str) -> bool:\n        \"\"\"\n        Given a string s containing just the characters '(', ')', '{', '}', '[' and ']', determine if the input string is valid.\n        An input string is valid if:\n            Open brackets must be closed by the same type of brackets.\n            Open brackets must be closed in the correct order.\n            Every close bracket has a corresponding open bracket of the same type.\n        Example 1:\n        Input: s = \"()\"\n        Output: true\n        Example 2:\n        Input: s = \"()[]{}\"\n        Output: true\n        Example 3:\n        Input: s = \"(]\"\n        Output: false\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 4,
        "answer": "        if s.count('(')!= s.count(')'):\n            return False\n        if s.count('{')!= s.count('}'):\n            return False\n        if s.count('[')!= s.count(']'):\n            return False\n        return True\n    \n    def isValid_2(self, s: str) -> bool:\n        \"\"\"\n        Given a string s containing just the characters '(', ')', '{', '}', '[' and ']', determine if the input string is valid.\n        An input string is valid if:\n            Open brackets must be closed by the same type of brackets.\n            Open brackets must be closed in the correct order.\n            Every close bracket has a corresponding open bracket of the same type.\n        Example 1:\n        Input: s = \"()\"\n        Output: true\n        Example 2:\n        Input: s = \"()[]{}\"\n        Output: true\n        Example 3:\n        Input: s = \"(]\"\n        Output: false\n        \"\"\"\n        my_dict = {'(': ')', '[': ']', '{': '}'}\n        l_stack = list()\n        for i in s:\n            if i in my_dict.keys():\n                l_stack.append(i)\n            else:\n                if"
    },
    {
        "number": 20,
        "title": "Valid Parentheses",
        "difficulty": 0,
        "prompt": "class Solution:\n    def isValid(self, s: str) -> bool:\n        \"\"\"\n        Given a string s containing just the characters '(', ')', '{', '}', '[' and ']', determine if the input string is valid.\n        An input string is valid if:\n            Open brackets must be closed by the same type of brackets.\n            Open brackets must be closed in the correct order.\n            Every close bracket has a corresponding open bracket of the same type.\n        Example 1:\n        Input: s = \"()\"\n        Output: true\n        Example 2:\n        Input: s = \"()[]{}\"\n        Output: true\n        Example 3:\n        Input: s = \"(]\"\n        Output: false\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 5,
        "answer": "        # 1. Use a stack\n        # 2. Use a dictionary to store the parenthesis\n        # 3. Use a dictionary to store the paranthesis and the order\n        stack = []\n        parenthesis = {')': '(', ']': '[', '}': '{'}\n        order = {'(': 0, '[': 1, '{': 2}\n        for c in s:\n            if c not in parenthesis:\n                stack.append(c)\n            else:\n                # if stack is not empty and the current paranthesis is the same with the top of the stack\n                # then pop the stack\n                if stack and parenthesis[c] == stack[-1]:\n                    stack.pop()\n                else:\n                    return False\n        return not stack"
    },
    {
        "number": 21,
        "title": "Merge Two Sorted Lists",
        "difficulty": 0,
        "prompt": "class Solution:\n    def mergeTwoLists(self, list1: Optional[ListNode], list2: Optional[ListNode]) -> Optional[ListNode]:\n        \"\"\"\n        You are given the heads of two sorted linked lists list1 and list2.\n        Merge the two lists in a one sorted list. The list should be made by splicing together the nodes of the first two lists.\n        Return the head of the merged linked list.\n        Example 1:\n        Input: list1 = [1,2,4], list2 = [1,3,4]\n        Output: [1,1,2,3,4,4]\n        Example 2:\n        Input: list1 = [], list2 = []\n        Output: []\n        Example 3:\n        Input: list1 = [], list2 = [0]\n        Output: [0]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        if not list1 and not list2:\n            return None\n        elif list1 and not list2:\n            return list1\n        elif not list1 and list2:\n            return list2\n        else:\n            head = ListNode()\n            tail = head\n            while list1 and list2:\n                if list1.val < list2.val:\n                    tail.next = list1\n                    list1 = list1.next\n                    tail = tail.next\n                else:\n                    tail.next = list2\n                    list2 = list2.next\n                    tail = tail.next\n            if list1:\n                tail.next = list1\n            elif list2:\n                tail.next = list2\n            return head.next\n<|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>"
    },
    {
        "number": 21,
        "title": "Merge Two Sorted Lists",
        "difficulty": 0,
        "prompt": "class Solution:\n    def mergeTwoLists(self, list1: Optional[ListNode], list2: Optional[ListNode]) -> Optional[ListNode]:\n        \"\"\"\n        You are given the heads of two sorted linked lists list1 and list2.\n        Merge the two lists in a one sorted list. The list should be made by splicing together the nodes of the first two lists.\n        Return the head of the merged linked list.\n        Example 1:\n        Input: list1 = [1,2,4], list2 = [1,3,4]\n        Output: [1,1,2,3,4,4]\n        Example 2:\n        Input: list1 = [], list2 = []\n        Output: []\n        Example 3:\n        Input: list1 = [], list2 = [0]\n        Output: [0]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        \n        if not list1:\n            return list2\n        if not list2:\n            return list1\n        \n        prehead = ListNode(-1)\n        prev = prehead\n        while list1 and list2:\n            if list1.val <= list2.val:\n                prev.next = list1\n                list1 = list1.next\n            else:\n                prev.next = list2\n                list2 = list2.next\n            prev = prev.next\n        prev.next = list1 if list1 else list2\n        return prehead.next\n            "
    },
    {
        "number": 21,
        "title": "Merge Two Sorted Lists",
        "difficulty": 0,
        "prompt": "class Solution:\n    def mergeTwoLists(self, list1: Optional[ListNode], list2: Optional[ListNode]) -> Optional[ListNode]:\n        \"\"\"\n        You are given the heads of two sorted linked lists list1 and list2.\n        Merge the two lists in a one sorted list. The list should be made by splicing together the nodes of the first two lists.\n        Return the head of the merged linked list.\n        Example 1:\n        Input: list1 = [1,2,4], list2 = [1,3,4]\n        Output: [1,1,2,3,4,4]\n        Example 2:\n        Input: list1 = [], list2 = []\n        Output: []\n        Example 3:\n        Input: list1 = [], list2 = [0]\n        Output: [0]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 3,
        "answer": "        if not list1 and not list2:\n            return\n        if not list1:\n            return list2\n        if not list2:\n            return list1\n        if not list1 and not list2:\n            return"
    },
    {
        "number": 21,
        "title": "Merge Two Sorted Lists",
        "difficulty": 0,
        "prompt": "class Solution:\n    def mergeTwoLists(self, list1: Optional[ListNode], list2: Optional[ListNode]) -> Optional[ListNode]:\n        \"\"\"\n        You are given the heads of two sorted linked lists list1 and list2.\n        Merge the two lists in a one sorted list. The list should be made by splicing together the nodes of the first two lists.\n        Return the head of the merged linked list.\n        Example 1:\n        Input: list1 = [1,2,4], list2 = [1,3,4]\n        Output: [1,1,2,3,4,4]\n        Example 2:\n        Input: list1 = [], list2 = []\n        Output: []\n        Example 3:\n        Input: list1 = [], list2 = [0]\n        Output: [0]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 4,
        "answer": "        if not list1:\n            return list2\n        if not list2:\n            return list1\n        if list1.val < list2.val:\n            head = ListNode(list1.val)\n            list1 = list1.next\n        else:\n            head = ListNode(list2.val)\n            list2 = list2.next\n        curr = head\n        while list1 and list2:\n            if list1.val < list2.val:\n                curr.next = ListNode(list1.val)\n                list1 = list1.next\n            else:\n                curr.next = ListNode(list2.val)\n                list2 = list2.next\n            curr = curr.next\n        if list1:\n            curr.next = list1\n        if list2:\n            curr.next = list2\n        return head"
    },
    {
        "number": 21,
        "title": "Merge Two Sorted Lists",
        "difficulty": 0,
        "prompt": "class Solution:\n    def mergeTwoLists(self, list1: Optional[ListNode], list2: Optional[ListNode]) -> Optional[ListNode]:\n        \"\"\"\n        You are given the heads of two sorted linked lists list1 and list2.\n        Merge the two lists in a one sorted list. The list should be made by splicing together the nodes of the first two lists.\n        Return the head of the merged linked list.\n        Example 1:\n        Input: list1 = [1,2,4], list2 = [1,3,4]\n        Output: [1,1,2,3,4,4]\n        Example 2:\n        Input: list1 = [], list2 = []\n        Output: []\n        Example 3:\n        Input: list1 = [], list2 = [0]\n        Output: [0]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 5,
        "answer": "        if not list1:\n            return list2\n        if not list2:\n            return list1\n        if not list1 or not list2:\n            return list1 or list2\n        \n        head, head2 = list1, list2\n        while head2:\n            if not head:\n                head = head2\n            if head and head2:\n                if head.val > head2.val:\n                    head.next = head2\n                    head2 = head2.next\n                else:\n                    head.next = head2\n                    head2 = head2.next\n            if head2:\n                head = head2\n            elif head:\n                head.next = head2\n                break\n        return head\n        \n        <|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>"
    },
    {
        "number": 22,
        "title": "Generate Parentheses",
        "difficulty": 1,
        "prompt": "class Solution:\n    def generateParenthesis(self, n: int) -> List[str]:\n        \"\"\"\n        Given n pairs of parentheses, write a function to generate all combinations of well-formed parentheses.\n        Example 1:\n        Input: n = 3\n        Output: [\"((()))\",\"(()())\",\"(())()\",\"()(())\",\"()()()\"]\n        Example 2:\n        Input: n = 1\n        Output: [\"()\"]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        # print('--->', n, \"n\")\n        def generate(cur_path):\n            if len(cur_path) == 2*n:\n                # print(\"before yield\")\n                res.append(''.join(cur_path))\n            for i in range(len(cur_path)):\n                if i > 0 and cur_path[i-1] == cur_path[i]:\n                    continue\n                if len(cur_path) >= 2 and cur_path[i] == '(' and cur_path[i-1] == ')':\n                    continue\n                cur_path[i] = '('\n                cur_path[-1] = ')'\n                generate(cur_path)\n                cur_path[i] = ')'\n                cur_path[-1] = '('\n        res = []\n        generate(list(('(', ')')))\n        # print(res)\n        return res"
    },
    {
        "number": 22,
        "title": "Generate Parentheses",
        "difficulty": 1,
        "prompt": "class Solution:\n    def generateParenthesis(self, n: int) -> List[str]:\n        \"\"\"\n        Given n pairs of parentheses, write a function to generate all combinations of well-formed parentheses.\n        Example 1:\n        Input: n = 3\n        Output: [\"((()))\",\"(()())\",\"(())()\",\"()(())\",\"()()()\"]\n        Example 2:\n        Input: n = 1\n        Output: [\"()\"]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        # dfs\n        res = []\n        self.dfs(n, n, '', res)\n        return res"
    },
    {
        "number": 22,
        "title": "Generate Parentheses",
        "difficulty": 1,
        "prompt": "class Solution:\n    def generateParenthesis(self, n: int) -> List[str]:\n        \"\"\"\n        Given n pairs of parentheses, write a function to generate all combinations of well-formed parentheses.\n        Example 1:\n        Input: n = 3\n        Output: [\"((()))\",\"(()())\",\"(())()\",\"()(())\",\"()()()\"]\n        Example 2:\n        Input: n = 1\n        Output: [\"()\"]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 3,
        "answer": "        res = []\n        self.generate(n, n, \"\", res)\n        return res"
    },
    {
        "number": 22,
        "title": "Generate Parentheses",
        "difficulty": 1,
        "prompt": "class Solution:\n    def generateParenthesis(self, n: int) -> List[str]:\n        \"\"\"\n        Given n pairs of parentheses, write a function to generate all combinations of well-formed parentheses.\n        Example 1:\n        Input: n = 3\n        Output: [\"((()))\",\"(()())\",\"(())()\",\"()(())\",\"()()()\"]\n        Example 2:\n        Input: n = 1\n        Output: [\"()\"]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 4,
        "answer": "        self.ans = []\n        self.generateParenthesisHelper(0, 0, n, '')\n        return self.ans"
    },
    {
        "number": 22,
        "title": "Generate Parentheses",
        "difficulty": 1,
        "prompt": "class Solution:\n    def generateParenthesis(self, n: int) -> List[str]:\n        \"\"\"\n        Given n pairs of parentheses, write a function to generate all combinations of well-formed parentheses.\n        Example 1:\n        Input: n = 3\n        Output: [\"((()))\",\"(()())\",\"(())()\",\"()(())\",\"()()()\"]\n        Example 2:\n        Input: n = 1\n        Output: [\"()\"]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 5,
        "answer": "        self.result = []\n        self.generate_pars(0, 0, n, \"\")\n        return self.result"
    },
    {
        "number": 23,
        "title": "Merge k Sorted Lists",
        "difficulty": 2,
        "prompt": "class Solution:\n    def mergeKLists(self, lists: List[Optional[ListNode]]) -> Optional[ListNode]:\n        \"\"\"\n        You are given an array of k linked-lists lists, each linked-list is sorted in ascending order.\n        Merge all the linked-lists into one sorted linked-list and return it.\n        Example 1:\n        Input: lists = [[1,4,5],[1,3,4],[2,6]]\n        Output: [1,1,2,3,4,4,5,6]\n        Explanation: The linked-lists are:\n        [\n          1->4->5,\n          1->3->4,\n          2->6\n        ]\n        merging them into one sorted list:\n        1->1->2->3->4->4->5->6\n        Example 2:\n        Input: lists = []\n        Output: []\n        Example 3:\n        Input: lists = [[]]\n        Output: []\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        from functools import reduce\n        def merge(a,b):\n            if not b: return a\n            if not a: return b\n            if a.val <= b.val:\n                a.next = merge(a.next,b)\n                return a\n            else:\n                b.next = merge(a,b.next)\n                return b\n        if not lists: return []\n        return reduce(merge,lists)\n        <|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>"
    },
    {
        "number": 23,
        "title": "Merge k Sorted Lists",
        "difficulty": 2,
        "prompt": "class Solution:\n    def mergeKLists(self, lists: List[Optional[ListNode]]) -> Optional[ListNode]:\n        \"\"\"\n        You are given an array of k linked-lists lists, each linked-list is sorted in ascending order.\n        Merge all the linked-lists into one sorted linked-list and return it.\n        Example 1:\n        Input: lists = [[1,4,5],[1,3,4],[2,6]]\n        Output: [1,1,2,3,4,4,5,6]\n        Explanation: The linked-lists are:\n        [\n          1->4->5,\n          1->3->4,\n          2->6\n        ]\n        merging them into one sorted list:\n        1->1->2->3->4->4->5->6\n        Example 2:\n        Input: lists = []\n        Output: []\n        Example 3:\n        Input: lists = [[]]\n        Output: []\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        # Corner cases\n        if not lists:\n            return None\n        if len(lists) == 1:\n            return lists[0]"
    },
    {
        "number": 23,
        "title": "Merge k Sorted Lists",
        "difficulty": 2,
        "prompt": "class Solution:\n    def mergeKLists(self, lists: List[Optional[ListNode]]) -> Optional[ListNode]:\n        \"\"\"\n        You are given an array of k linked-lists lists, each linked-list is sorted in ascending order.\n        Merge all the linked-lists into one sorted linked-list and return it.\n        Example 1:\n        Input: lists = [[1,4,5],[1,3,4],[2,6]]\n        Output: [1,1,2,3,4,4,5,6]\n        Explanation: The linked-lists are:\n        [\n          1->4->5,\n          1->3->4,\n          2->6\n        ]\n        merging them into one sorted list:\n        1->1->2->3->4->4->5->6\n        Example 2:\n        Input: lists = []\n        Output: []\n        Example 3:\n        Input: lists = [[]]\n        Output: []\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 3,
        "answer": "        if not lists: return None\n        if len(lists) == 1: return lists[0]\n        mid = len(lists) // 2\n        return self.merge(self.mergeKLists(lists[:mid]), self.mergeKLists(lists[mid:]))"
    },
    {
        "number": 23,
        "title": "Merge k Sorted Lists",
        "difficulty": 2,
        "prompt": "class Solution:\n    def mergeKLists(self, lists: List[Optional[ListNode]]) -> Optional[ListNode]:\n        \"\"\"\n        You are given an array of k linked-lists lists, each linked-list is sorted in ascending order.\n        Merge all the linked-lists into one sorted linked-list and return it.\n        Example 1:\n        Input: lists = [[1,4,5],[1,3,4],[2,6]]\n        Output: [1,1,2,3,4,4,5,6]\n        Explanation: The linked-lists are:\n        [\n          1->4->5,\n          1->3->4,\n          2->6\n        ]\n        merging them into one sorted list:\n        1->1->2->3->4->4->5->6\n        Example 2:\n        Input: lists = []\n        Output: []\n        Example 3:\n        Input: lists = [[]]\n        Output: []\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 4,
        "answer": "        if not lists: return None\n        if len(lists) == 1: return lists[0]\n        ans = []\n        heap = []\n        for idx, lst in enumerate(lists):\n            if lst:\n                heapq.heappush(heap, (lst.val, idx))"
    },
    {
        "number": 23,
        "title": "Merge k Sorted Lists",
        "difficulty": 2,
        "prompt": "class Solution:\n    def mergeKLists(self, lists: List[Optional[ListNode]]) -> Optional[ListNode]:\n        \"\"\"\n        You are given an array of k linked-lists lists, each linked-list is sorted in ascending order.\n        Merge all the linked-lists into one sorted linked-list and return it.\n        Example 1:\n        Input: lists = [[1,4,5],[1,3,4],[2,6]]\n        Output: [1,1,2,3,4,4,5,6]\n        Explanation: The linked-lists are:\n        [\n          1->4->5,\n          1->3->4,\n          2->6\n        ]\n        merging them into one sorted list:\n        1->1->2->3->4->4->5->6\n        Example 2:\n        Input: lists = []\n        Output: []\n        Example 3:\n        Input: lists = [[]]\n        Output: []\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 5,
        "answer": "        if not lists:\n            return None\n        if len(lists) == 1:\n            return lists[0]\n        lst = []\n        for node in lists:\n            while node:\n                lst.append(node.val)\n                node = node.next\n        lst.sort()\n        head = ListNode(lst[0])\n        node = head\n        for i in range(1, len(lst)):\n            node.next = ListNode(lst[i])\n            node = node.next\n        return head"
    },
    {
        "number": 24,
        "title": "Swap Nodes in Pairs",
        "difficulty": 1,
        "prompt": "class Solution:\n    def swapPairs(self, head: Optional[ListNode]) -> Optional[ListNode]:\n        \"\"\"\n        Given a linked list, swap every two adjacent nodes and return its head. You must solve the problem without modifying the values in the list's nodes (i.e., only nodes themselves may be changed.)\n        Example 1:\n        Input: head = [1,2,3,4]\n        Output: [2,1,4,3]\n        Example 2:\n        Input: head = []\n        Output: []\n        Example 3:\n        Input: head = [1]\n        Output: [1]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        if head and head.next:\n            temp = head.next\n            head.next = self.swapPairs(temp.next)\n            temp.next = head\n            return temp\n        return head"
    },
    {
        "number": 24,
        "title": "Swap Nodes in Pairs",
        "difficulty": 1,
        "prompt": "class Solution:\n    def swapPairs(self, head: Optional[ListNode]) -> Optional[ListNode]:\n        \"\"\"\n        Given a linked list, swap every two adjacent nodes and return its head. You must solve the problem without modifying the values in the list's nodes (i.e., only nodes themselves may be changed.)\n        Example 1:\n        Input: head = [1,2,3,4]\n        Output: [2,1,4,3]\n        Example 2:\n        Input: head = []\n        Output: []\n        Example 3:\n        Input: head = [1]\n        Output: [1]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        if not head or not head.next:\n            return head\n        curr = head\n        prev = ListNode()\n        prev.next = curr\n        while curr and curr.next:\n            temp = curr.next\n            curr.next = temp.next\n            temp.next = curr\n            prev.next = temp\n            curr = curr.next\n            prev = prev.next.next\n        return head"
    },
    {
        "number": 24,
        "title": "Swap Nodes in Pairs",
        "difficulty": 1,
        "prompt": "class Solution:\n    def swapPairs(self, head: Optional[ListNode]) -> Optional[ListNode]:\n        \"\"\"\n        Given a linked list, swap every two adjacent nodes and return its head. You must solve the problem without modifying the values in the list's nodes (i.e., only nodes themselves may be changed.)\n        Example 1:\n        Input: head = [1,2,3,4]\n        Output: [2,1,4,3]\n        Example 2:\n        Input: head = []\n        Output: []\n        Example 3:\n        Input: head = [1]\n        Output: [1]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 3,
        "answer": "        if head and head.next:\n            head, head.next = head.next, head\n            self.swapPairs(head.next.next)\n        return head\n<|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>"
    },
    {
        "number": 24,
        "title": "Swap Nodes in Pairs",
        "difficulty": 1,
        "prompt": "class Solution:\n    def swapPairs(self, head: Optional[ListNode]) -> Optional[ListNode]:\n        \"\"\"\n        Given a linked list, swap every two adjacent nodes and return its head. You must solve the problem without modifying the values in the list's nodes (i.e., only nodes themselves may be changed.)\n        Example 1:\n        Input: head = [1,2,3,4]\n        Output: [2,1,4,3]\n        Example 2:\n        Input: head = []\n        Output: []\n        Example 3:\n        Input: head = [1]\n        Output: [1]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 4,
        "answer": "        if not head:\n            return head\n        \n        dummy_head = ListNode(0, head)\n        prev_node = dummy_head\n        while prev_node.next and prev_node.next.next:\n            first_node = prev_node.next\n            second_node = prev_node.next.next\n            prev_node.next = second_node\n            first_node.next = second_node.next\n            second_node.next = first_node\n            prev_node = prev_node.next.next\n            \n        return dummy_head.next\n            \n        \n        \n        \n        \n<|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>"
    },
    {
        "number": 24,
        "title": "Swap Nodes in Pairs",
        "difficulty": 1,
        "prompt": "class Solution:\n    def swapPairs(self, head: Optional[ListNode]) -> Optional[ListNode]:\n        \"\"\"\n        Given a linked list, swap every two adjacent nodes and return its head. You must solve the problem without modifying the values in the list's nodes (i.e., only nodes themselves may be changed.)\n        Example 1:\n        Input: head = [1,2,3,4]\n        Output: [2,1,4,3]\n        Example 2:\n        Input: head = []\n        Output: []\n        Example 3:\n        Input: head = [1]\n        Output: [1]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 5,
        "answer": "        prev = None\n        cur = head\n        while cur and cur.next:\n            nxt = cur.next.next\n            cur.next.next = cur\n            if prev:\n                prev.next = cur.next\n            cur.next = nxt\n            prev = cur\n            cur = nxt\n        return head\n<|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>"
    },
    {
        "number": 25,
        "title": "Reverse Nodes in k-Group",
        "difficulty": 2,
        "prompt": "class Solution:\n    def reverseKGroup(self, head: Optional[ListNode], k: int) -> Optional[ListNode]:\n        \"\"\"\n        Given the head of a linked list, reverse the nodes of the list k at a time, and return the modified list.\n        k is a positive integer and is less than or equal to the length of the linked list. If the number of nodes is not a multiple of k then left-out nodes, in the end, should remain as it is.\n        You may not alter the values in the list's nodes, only nodes themselves may be changed.\n        Example 1:\n        Input: head = [1,2,3,4,5], k = 2\n        Output: [2,1,4,3,5]\n        Example 2:\n        Input: head = [1,2,3,4,5], k = 3\n        Output: [3,2,1,4,5]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        # Edge Case\n        if head is None or k == 1:\n            return head"
    },
    {
        "number": 25,
        "title": "Reverse Nodes in k-Group",
        "difficulty": 2,
        "prompt": "class Solution:\n    def reverseKGroup(self, head: Optional[ListNode], k: int) -> Optional[ListNode]:\n        \"\"\"\n        Given the head of a linked list, reverse the nodes of the list k at a time, and return the modified list.\n        k is a positive integer and is less than or equal to the length of the linked list. If the number of nodes is not a multiple of k then left-out nodes, in the end, should remain as it is.\n        You may not alter the values in the list's nodes, only nodes themselves may be changed.\n        Example 1:\n        Input: head = [1,2,3,4,5], k = 2\n        Output: [2,1,4,3,5]\n        Example 2:\n        Input: head = [1,2,3,4,5], k = 3\n        Output: [3,2,1,4,5]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        if not head:\n            return head\n        curr,prev=head,None\n        while curr:\n            count=0\n            while count<k and curr:\n                curr,prev,curr=curr.next,curr,curr.next\n                count+=1\n            if count==k:\n                self.reverse(prev,curr)\n        return prev"
    },
    {
        "number": 25,
        "title": "Reverse Nodes in k-Group",
        "difficulty": 2,
        "prompt": "class Solution:\n    def reverseKGroup(self, head: Optional[ListNode], k: int) -> Optional[ListNode]:\n        \"\"\"\n        Given the head of a linked list, reverse the nodes of the list k at a time, and return the modified list.\n        k is a positive integer and is less than or equal to the length of the linked list. If the number of nodes is not a multiple of k then left-out nodes, in the end, should remain as it is.\n        You may not alter the values in the list's nodes, only nodes themselves may be changed.\n        Example 1:\n        Input: head = [1,2,3,4,5], k = 2\n        Output: [2,1,4,3,5]\n        Example 2:\n        Input: head = [1,2,3,4,5], k = 3\n        Output: [3,2,1,4,5]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 3,
        "answer": "        dummy = ListNode()\n        dummy.next = head\n        cur = dummy\n        count = 0\n        while cur.next:\n            count += 1\n            if count % k == 0:\n                cur.next = self.reverse(cur.next, k)\n                cur = dummy\n            else:\n                cur = cur.next\n        return dummy.next"
    },
    {
        "number": 25,
        "title": "Reverse Nodes in k-Group",
        "difficulty": 2,
        "prompt": "class Solution:\n    def reverseKGroup(self, head: Optional[ListNode], k: int) -> Optional[ListNode]:\n        \"\"\"\n        Given the head of a linked list, reverse the nodes of the list k at a time, and return the modified list.\n        k is a positive integer and is less than or equal to the length of the linked list. If the number of nodes is not a multiple of k then left-out nodes, in the end, should remain as it is.\n        You may not alter the values in the list's nodes, only nodes themselves may be changed.\n        Example 1:\n        Input: head = [1,2,3,4,5], k = 2\n        Output: [2,1,4,3,5]\n        Example 2:\n        Input: head = [1,2,3,4,5], k = 3\n        Output: [3,2,1,4,5]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 4,
        "answer": "        # O(n) space\n        def reverse_linked_list(head: Optional[ListNode], tail: Optional[ListNode]) -> Optional[ListNode]:\n            prev = tail.next\n            p = head\n            while prev!= tail:\n                nex = p.next\n                p.next = prev\n                prev = p\n                p = nex\n            return tail, head"
    },
    {
        "number": 25,
        "title": "Reverse Nodes in k-Group",
        "difficulty": 2,
        "prompt": "class Solution:\n    def reverseKGroup(self, head: Optional[ListNode], k: int) -> Optional[ListNode]:\n        \"\"\"\n        Given the head of a linked list, reverse the nodes of the list k at a time, and return the modified list.\n        k is a positive integer and is less than or equal to the length of the linked list. If the number of nodes is not a multiple of k then left-out nodes, in the end, should remain as it is.\n        You may not alter the values in the list's nodes, only nodes themselves may be changed.\n        Example 1:\n        Input: head = [1,2,3,4,5], k = 2\n        Output: [2,1,4,3,5]\n        Example 2:\n        Input: head = [1,2,3,4,5], k = 3\n        Output: [3,2,1,4,5]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 5,
        "answer": "        \n        def reverse(head, tail):\n            if not head:\n                return None, None\n            if not head.next:\n                return head, head\n            \n            new_head, new_tail = reverse(head.next, tail)\n            \n            tail.next = head\n            head.next = None\n            \n            return new_head, head\n        \n        dummy = ListNode(0)\n        dummy.next = head\n        \n        tail = dummy\n        curr = head\n        \n        while curr:\n            n_groups = 0\n            while curr and n_groups < k:\n                curr = curr.next\n                n_groups += 1\n            if n_groups == k:\n                curr = reverse(head, tail)[0]\n                head = reverse(head, tail)[1]\n                tail = curr\n        return dummy.next\n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        "
    },
    {
        "number": 26,
        "title": "Remove Duplicates from Sorted Array",
        "difficulty": 0,
        "prompt": "class Solution:\n    def removeDuplicates(self, nums: List[int]) -> int:\n        \"\"\"\n        Given an integer array nums sorted in non-decreasing order, remove the duplicates in-place such that each unique element appears only once. The relative order of the elements should be kept the same.\n        Since it is impossible to change the length of the array in some languages, you must instead have the result be placed in the first part of the array nums. More formally, if there are k elements after removing the duplicates, then the first k elements of nums should hold the final result. It does not matter what you leave beyond the first k elements.\n        Return k after placing the final result in the first k slots of nums.\n        Do not allocate extra space for another array. You must do this by modifying the input array in-place with O(1) extra memory.\n        Custom Judge:\n        The judge will test your solution with the following code:\n        int[] nums = [...]; // Input array\n        int[] expectedNums = [...]; // The expected answer with correct length\n        int k = removeDuplicates(nums); // Calls your implementation\n        assert k == expectedNums.length;\n        for (int i = 0; i < k; i++) {\n            assert nums[i] == expectedNums[i];\n        }\n        If all assertions pass, then your solution will be accepted.\n        Example 1:\n        Input: nums = [1,1,2]\n        Output: 2, nums = [1,2,_]\n        Explanation: Your function should return k = 2, with the first two elements of nums being 1 and 2 respectively.\n        It does not matter what you leave beyond the returned k (hence they are underscores).\n        Example 2:\n        Input: nums = [0,0,1,1,1,2,2,3,3,4]\n        Output: 5, nums = [0,1,2,3,4,_,_,_,_,_]\n        Explanation: Your function should return k = 5, with the first five elements of nums being 0, 1, 2, 3, and 4 respectively.\n        It does not matter what you leave beyond the returned k (hence they are underscores).\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        if not nums:\n            return 0\n        j = 0\n        for i in range(1, len(nums)):\n            if nums[i]!= nums[j]:\n                j += 1\n                nums[j] = nums[i]\n        return j + 1"
    },
    {
        "number": 26,
        "title": "Remove Duplicates from Sorted Array",
        "difficulty": 0,
        "prompt": "class Solution:\n    def removeDuplicates(self, nums: List[int]) -> int:\n        \"\"\"\n        Given an integer array nums sorted in non-decreasing order, remove the duplicates in-place such that each unique element appears only once. The relative order of the elements should be kept the same.\n        Since it is impossible to change the length of the array in some languages, you must instead have the result be placed in the first part of the array nums. More formally, if there are k elements after removing the duplicates, then the first k elements of nums should hold the final result. It does not matter what you leave beyond the first k elements.\n        Return k after placing the final result in the first k slots of nums.\n        Do not allocate extra space for another array. You must do this by modifying the input array in-place with O(1) extra memory.\n        Custom Judge:\n        The judge will test your solution with the following code:\n        int[] nums = [...]; // Input array\n        int[] expectedNums = [...]; // The expected answer with correct length\n        int k = removeDuplicates(nums); // Calls your implementation\n        assert k == expectedNums.length;\n        for (int i = 0; i < k; i++) {\n            assert nums[i] == expectedNums[i];\n        }\n        If all assertions pass, then your solution will be accepted.\n        Example 1:\n        Input: nums = [1,1,2]\n        Output: 2, nums = [1,2,_]\n        Explanation: Your function should return k = 2, with the first two elements of nums being 1 and 2 respectively.\n        It does not matter what you leave beyond the returned k (hence they are underscores).\n        Example 2:\n        Input: nums = [0,0,1,1,1,2,2,3,3,4]\n        Output: 5, nums = [0,1,2,3,4,_,_,_,_,_]\n        Explanation: Your function should return k = 5, with the first five elements of nums being 0, 1, 2, 3, and 4 respectively.\n        It does not matter what you leave beyond the returned k (hence they are underscores).\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        if len(nums) < 2:\n            return len(nums)\n        left, right = 0, 1\n        while right < len(nums):\n            if nums[left]!= nums[right]:\n                left += 1\n                nums[left] = nums[right]\n            right += 1\n        return left + 1"
    },
    {
        "number": 26,
        "title": "Remove Duplicates from Sorted Array",
        "difficulty": 0,
        "prompt": "class Solution:\n    def removeDuplicates(self, nums: List[int]) -> int:\n        \"\"\"\n        Given an integer array nums sorted in non-decreasing order, remove the duplicates in-place such that each unique element appears only once. The relative order of the elements should be kept the same.\n        Since it is impossible to change the length of the array in some languages, you must instead have the result be placed in the first part of the array nums. More formally, if there are k elements after removing the duplicates, then the first k elements of nums should hold the final result. It does not matter what you leave beyond the first k elements.\n        Return k after placing the final result in the first k slots of nums.\n        Do not allocate extra space for another array. You must do this by modifying the input array in-place with O(1) extra memory.\n        Custom Judge:\n        The judge will test your solution with the following code:\n        int[] nums = [...]; // Input array\n        int[] expectedNums = [...]; // The expected answer with correct length\n        int k = removeDuplicates(nums); // Calls your implementation\n        assert k == expectedNums.length;\n        for (int i = 0; i < k; i++) {\n            assert nums[i] == expectedNums[i];\n        }\n        If all assertions pass, then your solution will be accepted.\n        Example 1:\n        Input: nums = [1,1,2]\n        Output: 2, nums = [1,2,_]\n        Explanation: Your function should return k = 2, with the first two elements of nums being 1 and 2 respectively.\n        It does not matter what you leave beyond the returned k (hence they are underscores).\n        Example 2:\n        Input: nums = [0,0,1,1,1,2,2,3,3,4]\n        Output: 5, nums = [0,1,2,3,4,_,_,_,_,_]\n        Explanation: Your function should return k = 5, with the first five elements of nums being 0, 1, 2, 3, and 4 respectively.\n        It does not matter what you leave beyond the returned k (hence they are underscores).\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 3,
        "answer": "        #count is used to count how many numbers have appeared in nums\n        count = 1\n        # i is used to store the next position\n        i = 1\n        #j is used to store the position to be removed\n        j = 0\n        while i < len(nums):\n            # if nums[i] == nums[i-1]:\n            #     nums.pop(i)\n            # elif nums[i]!= nums[i-1]:\n            #     count += 1\n            #     if count > 1:\n            #         nums.pop(i-1)\n            #         i -= 1\n            #     else:\n            #         i += 1\n            if nums[i]!= nums[i-1]:\n                count += 1\n                if count > 1:\n                    nums.pop(i-1)\n                    i -= 1\n                else:\n                    i += 1\n            else:\n                count += 1\n                if count > 1:\n                    nums.pop(i-1)\n                    i -= 1\n                    nums.pop(j-1)\n                    i -= 1\n                else:\n                    i += 1\n                j = i\n        return len(nums)"
    },
    {
        "number": 26,
        "title": "Remove Duplicates from Sorted Array",
        "difficulty": 0,
        "prompt": "class Solution:\n    def removeDuplicates(self, nums: List[int]) -> int:\n        \"\"\"\n        Given an integer array nums sorted in non-decreasing order, remove the duplicates in-place such that each unique element appears only once. The relative order of the elements should be kept the same.\n        Since it is impossible to change the length of the array in some languages, you must instead have the result be placed in the first part of the array nums. More formally, if there are k elements after removing the duplicates, then the first k elements of nums should hold the final result. It does not matter what you leave beyond the first k elements.\n        Return k after placing the final result in the first k slots of nums.\n        Do not allocate extra space for another array. You must do this by modifying the input array in-place with O(1) extra memory.\n        Custom Judge:\n        The judge will test your solution with the following code:\n        int[] nums = [...]; // Input array\n        int[] expectedNums = [...]; // The expected answer with correct length\n        int k = removeDuplicates(nums); // Calls your implementation\n        assert k == expectedNums.length;\n        for (int i = 0; i < k; i++) {\n            assert nums[i] == expectedNums[i];\n        }\n        If all assertions pass, then your solution will be accepted.\n        Example 1:\n        Input: nums = [1,1,2]\n        Output: 2, nums = [1,2,_]\n        Explanation: Your function should return k = 2, with the first two elements of nums being 1 and 2 respectively.\n        It does not matter what you leave beyond the returned k (hence they are underscores).\n        Example 2:\n        Input: nums = [0,0,1,1,1,2,2,3,3,4]\n        Output: 5, nums = [0,1,2,3,4,_,_,_,_,_]\n        Explanation: Your function should return k = 5, with the first five elements of nums being 0, 1, 2, 3, and 4 respectively.\n        It does not matter what you leave beyond the returned k (hence they are underscores).\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 4,
        "answer": "        #edge cases\n        if len(nums) <= 2:\n            return len(nums)\n        #step1: iterate through list and find duplicates\n        duplicates = {}\n        for x in range(0, len(nums)):\n            if nums[x] in duplicates:\n                duplicates[nums[x]] += 1\n            else:\n                duplicates[nums[x]] = 1\n        #step2: iterate through duplicates and remove them\n        for x in range(0, len(nums)):\n            if duplicates[nums[x]] == 1:\n                continue\n            else:\n                for i in range(0, duplicates[nums[x]] - 1):\n                    nums.remove(nums[x])\n        #step3: return length of array\n        return len(nums)"
    },
    {
        "number": 26,
        "title": "Remove Duplicates from Sorted Array",
        "difficulty": 0,
        "prompt": "class Solution:\n    def removeDuplicates(self, nums: List[int]) -> int:\n        \"\"\"\n        Given an integer array nums sorted in non-decreasing order, remove the duplicates in-place such that each unique element appears only once. The relative order of the elements should be kept the same.\n        Since it is impossible to change the length of the array in some languages, you must instead have the result be placed in the first part of the array nums. More formally, if there are k elements after removing the duplicates, then the first k elements of nums should hold the final result. It does not matter what you leave beyond the first k elements.\n        Return k after placing the final result in the first k slots of nums.\n        Do not allocate extra space for another array. You must do this by modifying the input array in-place with O(1) extra memory.\n        Custom Judge:\n        The judge will test your solution with the following code:\n        int[] nums = [...]; // Input array\n        int[] expectedNums = [...]; // The expected answer with correct length\n        int k = removeDuplicates(nums); // Calls your implementation\n        assert k == expectedNums.length;\n        for (int i = 0; i < k; i++) {\n            assert nums[i] == expectedNums[i];\n        }\n        If all assertions pass, then your solution will be accepted.\n        Example 1:\n        Input: nums = [1,1,2]\n        Output: 2, nums = [1,2,_]\n        Explanation: Your function should return k = 2, with the first two elements of nums being 1 and 2 respectively.\n        It does not matter what you leave beyond the returned k (hence they are underscores).\n        Example 2:\n        Input: nums = [0,0,1,1,1,2,2,3,3,4]\n        Output: 5, nums = [0,1,2,3,4,_,_,_,_,_]\n        Explanation: Your function should return k = 5, with the first five elements of nums being 0, 1, 2, 3, and 4 respectively.\n        It does not matter what you leave beyond the returned k (hence they are underscores).\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 5,
        "answer": "        if len(nums) <= 2:\n            return len(nums)\n        j = 0\n        for i in range(1, len(nums)):\n            if nums[i] == nums[j]:\n                continue\n            j += 1\n            nums[j] = nums[i]\n        return j+1\n<|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>"
    },
    {
        "number": 27,
        "title": "Remove Element",
        "difficulty": 0,
        "prompt": "class Solution:\n    def removeElement(self, nums: List[int], val: int) -> int:\n        \"\"\"\n        Given an integer array nums and an integer val, remove all occurrences of val in nums in-place. The relative order of the elements may be changed.\n        Since it is impossible to change the length of the array in some languages, you must instead have the result be placed in the first part of the array nums. More formally, if there are k elements after removing the duplicates, then the first k elements of nums should hold the final result. It does not matter what you leave beyond the first k elements.\n        Return k after placing the final result in the first k slots of nums.\n        Do not allocate extra space for another array. You must do this by modifying the input array in-place with O(1) extra memory.\n        Custom Judge:\n        The judge will test your solution with the following code:\n        int[] nums = [...]; // Input array\n        int val =...; // Value to remove\n        int[] expectedNums = [...]; // The expected answer with correct length.\n                                    // It is sorted with no values equaling val.\n        int k = removeElement(nums, val); // Calls your implementation\n        assert k == expectedNums.length;\n        sort(nums, 0, k); // Sort the first k elements of nums\n        for (int i = 0; i < actualLength; i++) {\n            assert nums[i] == expectedNums[i];\n        }\n        If all assertions pass, then your solution will be accepted.\n        Example 1:\n        Input: nums = [3,2,2,3], val = 3\n        Output: 2, nums = [2,2,_,_]\n        Explanation: Your function should return k = 2, with the first two elements of nums being 2.\n        It does not matter what you leave beyond the returned k (hence they are underscores).\n        Example 2:\n        Input: nums = [0,1,2,2,3,0,4,2], val = 2\n        Output: 5, nums = [0,1,4,0,3,_,_,_]\n        Explanation: Your function should return k = 5, with the first five elements of nums containing 0, 0, 1, 3, and 4.\n        Note that the five elements can be returned in any order.\n        It does not matter what you leave beyond the returned k (hence they are underscores).\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        # Method 1: brute force, Time O(n), Space O(1)\n        # i = 0\n        # while i < len(nums):\n        #     if nums[i] == val:\n        #         nums.pop(i)\n        #         continue\n        #     i += 1\n        # return len(nums)"
    },
    {
        "number": 27,
        "title": "Remove Element",
        "difficulty": 0,
        "prompt": "class Solution:\n    def removeElement(self, nums: List[int], val: int) -> int:\n        \"\"\"\n        Given an integer array nums and an integer val, remove all occurrences of val in nums in-place. The relative order of the elements may be changed.\n        Since it is impossible to change the length of the array in some languages, you must instead have the result be placed in the first part of the array nums. More formally, if there are k elements after removing the duplicates, then the first k elements of nums should hold the final result. It does not matter what you leave beyond the first k elements.\n        Return k after placing the final result in the first k slots of nums.\n        Do not allocate extra space for another array. You must do this by modifying the input array in-place with O(1) extra memory.\n        Custom Judge:\n        The judge will test your solution with the following code:\n        int[] nums = [...]; // Input array\n        int val =...; // Value to remove\n        int[] expectedNums = [...]; // The expected answer with correct length.\n                                    // It is sorted with no values equaling val.\n        int k = removeElement(nums, val); // Calls your implementation\n        assert k == expectedNums.length;\n        sort(nums, 0, k); // Sort the first k elements of nums\n        for (int i = 0; i < actualLength; i++) {\n            assert nums[i] == expectedNums[i];\n        }\n        If all assertions pass, then your solution will be accepted.\n        Example 1:\n        Input: nums = [3,2,2,3], val = 3\n        Output: 2, nums = [2,2,_,_]\n        Explanation: Your function should return k = 2, with the first two elements of nums being 2.\n        It does not matter what you leave beyond the returned k (hence they are underscores).\n        Example 2:\n        Input: nums = [0,1,2,2,3,0,4,2], val = 2\n        Output: 5, nums = [0,1,4,0,3,_,_,_]\n        Explanation: Your function should return k = 5, with the first five elements of nums containing 0, 0, 1, 3, and 4.\n        Note that the five elements can be returned in any order.\n        It does not matter what you leave beyond the returned k (hence they are underscores).\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        length = len(nums)\n        if length == 0:\n            return 0\n        i = 0\n        j = length - 1\n        while i < j:\n            if nums[i] == val:\n                nums[i] = nums[j]\n                nums[j] = val\n                j -= 1\n            else:\n                i += 1\n        return length - nums.count(val)"
    },
    {
        "number": 27,
        "title": "Remove Element",
        "difficulty": 0,
        "prompt": "class Solution:\n    def removeElement(self, nums: List[int], val: int) -> int:\n        \"\"\"\n        Given an integer array nums and an integer val, remove all occurrences of val in nums in-place. The relative order of the elements may be changed.\n        Since it is impossible to change the length of the array in some languages, you must instead have the result be placed in the first part of the array nums. More formally, if there are k elements after removing the duplicates, then the first k elements of nums should hold the final result. It does not matter what you leave beyond the first k elements.\n        Return k after placing the final result in the first k slots of nums.\n        Do not allocate extra space for another array. You must do this by modifying the input array in-place with O(1) extra memory.\n        Custom Judge:\n        The judge will test your solution with the following code:\n        int[] nums = [...]; // Input array\n        int val =...; // Value to remove\n        int[] expectedNums = [...]; // The expected answer with correct length.\n                                    // It is sorted with no values equaling val.\n        int k = removeElement(nums, val); // Calls your implementation\n        assert k == expectedNums.length;\n        sort(nums, 0, k); // Sort the first k elements of nums\n        for (int i = 0; i < actualLength; i++) {\n            assert nums[i] == expectedNums[i];\n        }\n        If all assertions pass, then your solution will be accepted.\n        Example 1:\n        Input: nums = [3,2,2,3], val = 3\n        Output: 2, nums = [2,2,_,_]\n        Explanation: Your function should return k = 2, with the first two elements of nums being 2.\n        It does not matter what you leave beyond the returned k (hence they are underscores).\n        Example 2:\n        Input: nums = [0,1,2,2,3,0,4,2], val = 2\n        Output: 5, nums = [0,1,4,0,3,_,_,_]\n        Explanation: Your function should return k = 5, with the first five elements of nums containing 0, 0, 1, 3, and 4.\n        Note that the five elements can be returned in any order.\n        It does not matter what you leave beyond the returned k (hence they are underscores).\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 3,
        "answer": "        while val in nums:\n            nums.remove(val)\n        return len(nums)"
    },
    {
        "number": 27,
        "title": "Remove Element",
        "difficulty": 0,
        "prompt": "class Solution:\n    def removeElement(self, nums: List[int], val: int) -> int:\n        \"\"\"\n        Given an integer array nums and an integer val, remove all occurrences of val in nums in-place. The relative order of the elements may be changed.\n        Since it is impossible to change the length of the array in some languages, you must instead have the result be placed in the first part of the array nums. More formally, if there are k elements after removing the duplicates, then the first k elements of nums should hold the final result. It does not matter what you leave beyond the first k elements.\n        Return k after placing the final result in the first k slots of nums.\n        Do not allocate extra space for another array. You must do this by modifying the input array in-place with O(1) extra memory.\n        Custom Judge:\n        The judge will test your solution with the following code:\n        int[] nums = [...]; // Input array\n        int val =...; // Value to remove\n        int[] expectedNums = [...]; // The expected answer with correct length.\n                                    // It is sorted with no values equaling val.\n        int k = removeElement(nums, val); // Calls your implementation\n        assert k == expectedNums.length;\n        sort(nums, 0, k); // Sort the first k elements of nums\n        for (int i = 0; i < actualLength; i++) {\n            assert nums[i] == expectedNums[i];\n        }\n        If all assertions pass, then your solution will be accepted.\n        Example 1:\n        Input: nums = [3,2,2,3], val = 3\n        Output: 2, nums = [2,2,_,_]\n        Explanation: Your function should return k = 2, with the first two elements of nums being 2.\n        It does not matter what you leave beyond the returned k (hence they are underscores).\n        Example 2:\n        Input: nums = [0,1,2,2,3,0,4,2], val = 2\n        Output: 5, nums = [0,1,4,0,3,_,_,_]\n        Explanation: Your function should return k = 5, with the first five elements of nums containing 0, 0, 1, 3, and 4.\n        Note that the five elements can be returned in any order.\n        It does not matter what you leave beyond the returned k (hence they are underscores).\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 4,
        "answer": "        # two pointers\n        # keep two pointers\n        # one pointer go through the list\n        # as we go through the list, if the pointer's element equals to the val, we increment the left pointer\n        # in the end, left pointer will be the length of nums minus val's count\n        # we set the right pointer equal to the left pointer\n        # now we loop through the list again, for each num, if it's equal to val, we decrement the val's count by 1\n        # otherwise, we just increment the right pointer\n        # if the right pointer is less than or equal to the left pointer, return right pointer\n        # else return left pointer\n        # when the while loop stop, right pointer will be equal to left pointer\n        left, right = 0, 0\n        val_count = 0\n        while right < len(nums):\n            if nums[right] == val:\n                val_count += 1\n                right += 1\n            elif val_count > 0:\n                val_count -= 1\n                nums[left] = nums[right]\n                right += 1\n                left += 1\n            else:\n                right += 1\n        return left"
    },
    {
        "number": 27,
        "title": "Remove Element",
        "difficulty": 0,
        "prompt": "class Solution:\n    def removeElement(self, nums: List[int], val: int) -> int:\n        \"\"\"\n        Given an integer array nums and an integer val, remove all occurrences of val in nums in-place. The relative order of the elements may be changed.\n        Since it is impossible to change the length of the array in some languages, you must instead have the result be placed in the first part of the array nums. More formally, if there are k elements after removing the duplicates, then the first k elements of nums should hold the final result. It does not matter what you leave beyond the first k elements.\n        Return k after placing the final result in the first k slots of nums.\n        Do not allocate extra space for another array. You must do this by modifying the input array in-place with O(1) extra memory.\n        Custom Judge:\n        The judge will test your solution with the following code:\n        int[] nums = [...]; // Input array\n        int val =...; // Value to remove\n        int[] expectedNums = [...]; // The expected answer with correct length.\n                                    // It is sorted with no values equaling val.\n        int k = removeElement(nums, val); // Calls your implementation\n        assert k == expectedNums.length;\n        sort(nums, 0, k); // Sort the first k elements of nums\n        for (int i = 0; i < actualLength; i++) {\n            assert nums[i] == expectedNums[i];\n        }\n        If all assertions pass, then your solution will be accepted.\n        Example 1:\n        Input: nums = [3,2,2,3], val = 3\n        Output: 2, nums = [2,2,_,_]\n        Explanation: Your function should return k = 2, with the first two elements of nums being 2.\n        It does not matter what you leave beyond the returned k (hence they are underscores).\n        Example 2:\n        Input: nums = [0,1,2,2,3,0,4,2], val = 2\n        Output: 5, nums = [0,1,4,0,3,_,_,_]\n        Explanation: Your function should return k = 5, with the first five elements of nums containing 0, 0, 1, 3, and 4.\n        Note that the five elements can be returned in any order.\n        It does not matter what you leave beyond the returned k (hence they are underscores).\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 5,
        "answer": "        # Time complexity: O(n)\n        # Space complexity: O(1)\n        count = 0\n        for i in range(len(nums)):\n            if nums[i]!= val:\n                nums[count] = nums[i]\n                count += 1\n        return count\n    \n    def removeElement2(self, nums: List[int], val: int) -> int:\n        \"\"\"\n        Time complexity: O(n)\n        Space complexity: O(1)\n        \"\"\"\n        index = 0\n        for i in range(len(nums)):\n            if nums[i]!= val:\n                nums[index] = nums[i]\n                index += 1\n        return index\n    \n    def removeElement3(self, nums: List[int], val: int) -> int:\n        \"\"\"\n        Time complexity: O(n)\n        Space complexity: O(1)\n        \"\"\"\n        while val in nums:\n            nums.remove(val)\n        return len(nums)\n    \n    def removeElement4(self, nums: List[int], val: int) -> int:\n        \"\"\"\n        Time complexity: O(n)\n        Space complexity: O(1)\n        \"\"\"\n        while val in nums"
    },
    {
        "number": 28,
        "title": "Find the Index of the First Occurrence in a String",
        "difficulty": 0,
        "prompt": "class Solution:\n    def strStr(self, haystack: str, needle: str) -> int:\n        \"\"\"\n        Given two strings needle and haystack, return the index of the first occurrence of needle in haystack, or -1 if needle is not part of haystack.\n        Example 1:\n        Input: haystack = \"sadbutsad\", needle = \"sad\"\n        Output: 0\n        Explanation: \"sad\" occurs at index 0 and 6.\n        The first occurrence is at index 0, so we return 0.\n        Example 2:\n        Input: haystack = \"leetcode\", needle = \"leeto\"\n        Output: -1\n        Explanation: \"leeto\" did not occur in \"leetcode\", so we return -1.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        if not needle:\n            return 0\n        if needle not in haystack:\n            return -1\n        else:\n            return haystack.index(needle)"
    },
    {
        "number": 28,
        "title": "Find the Index of the First Occurrence in a String",
        "difficulty": 0,
        "prompt": "class Solution:\n    def strStr(self, haystack: str, needle: str) -> int:\n        \"\"\"\n        Given two strings needle and haystack, return the index of the first occurrence of needle in haystack, or -1 if needle is not part of haystack.\n        Example 1:\n        Input: haystack = \"sadbutsad\", needle = \"sad\"\n        Output: 0\n        Explanation: \"sad\" occurs at index 0 and 6.\n        The first occurrence is at index 0, so we return 0.\n        Example 2:\n        Input: haystack = \"leetcode\", needle = \"leeto\"\n        Output: -1\n        Explanation: \"leeto\" did not occur in \"leetcode\", so we return -1.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        if len(needle) == 0:\n            return 0\n        i, j, m, n = 0, 0, len(haystack), len(needle)\n        while i < m and j < n:\n            if haystack[i] == needle[j]:\n                i += 1\n                j += 1\n                continue\n            i = i - j + 1\n            j = 0\n        return i - j if j == n else -1"
    },
    {
        "number": 28,
        "title": "Find the Index of the First Occurrence in a String",
        "difficulty": 0,
        "prompt": "class Solution:\n    def strStr(self, haystack: str, needle: str) -> int:\n        \"\"\"\n        Given two strings needle and haystack, return the index of the first occurrence of needle in haystack, or -1 if needle is not part of haystack.\n        Example 1:\n        Input: haystack = \"sadbutsad\", needle = \"sad\"\n        Output: 0\n        Explanation: \"sad\" occurs at index 0 and 6.\n        The first occurrence is at index 0, so we return 0.\n        Example 2:\n        Input: haystack = \"leetcode\", needle = \"leeto\"\n        Output: -1\n        Explanation: \"leeto\" did not occur in \"leetcode\", so we return -1.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 3,
        "answer": "        if needle == \"\":\n            return 0\n        elif needle not in haystack:\n            return -1\n        else:\n            len_haystack = len(haystack)\n            len_needle = len(needle)\n            if len_haystack < len_needle:\n                return -1\n            for i in range(len_haystack):\n                if haystack[i:i+len_needle] == needle:\n                    return i\n            return -1"
    },
    {
        "number": 28,
        "title": "Find the Index of the First Occurrence in a String",
        "difficulty": 0,
        "prompt": "class Solution:\n    def strStr(self, haystack: str, needle: str) -> int:\n        \"\"\"\n        Given two strings needle and haystack, return the index of the first occurrence of needle in haystack, or -1 if needle is not part of haystack.\n        Example 1:\n        Input: haystack = \"sadbutsad\", needle = \"sad\"\n        Output: 0\n        Explanation: \"sad\" occurs at index 0 and 6.\n        The first occurrence is at index 0, so we return 0.\n        Example 2:\n        Input: haystack = \"leetcode\", needle = \"leeto\"\n        Output: -1\n        Explanation: \"leeto\" did not occur in \"leetcode\", so we return -1.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 4,
        "answer": "        if len(needle) == 0:\n            return 0\n        if len(haystack) == 0:\n            return -1\n        if len(haystack) < len(needle):\n            return -1\n        h_start = 0\n        n_start = 0\n        while h_start < len(haystack) and n_start < len(needle):\n            if haystack[h_start] == needle[n_start]:\n                h_start += 1\n                n_start += 1\n            else:\n                h_start = h_start - n_start + 1\n                n_start = 0\n        if n_start == len(needle):\n            return h_start - n_start\n        return -1"
    },
    {
        "number": 28,
        "title": "Find the Index of the First Occurrence in a String",
        "difficulty": 0,
        "prompt": "class Solution:\n    def strStr(self, haystack: str, needle: str) -> int:\n        \"\"\"\n        Given two strings needle and haystack, return the index of the first occurrence of needle in haystack, or -1 if needle is not part of haystack.\n        Example 1:\n        Input: haystack = \"sadbutsad\", needle = \"sad\"\n        Output: 0\n        Explanation: \"sad\" occurs at index 0 and 6.\n        The first occurrence is at index 0, so we return 0.\n        Example 2:\n        Input: haystack = \"leetcode\", needle = \"leeto\"\n        Output: -1\n        Explanation: \"leeto\" did not occur in \"leetcode\", so we return -1.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 5,
        "answer": "        len_needle = len(needle)\n        len_haystack = len(haystack)\n        for i in range(len_haystack - len_needle + 1):\n            if haystack[i: i + len_needle] == needle:\n                return i\n        return -1"
    },
    {
        "number": 29,
        "title": "Divide Two Integers",
        "difficulty": 1,
        "prompt": "class Solution:\n    def divide(self, dividend: int, divisor: int) -> int:\n        \"\"\"\n        Given two integers dividend and divisor, divide two integers without using multiplication, division, and mod operator.\n        The integer division should truncate toward zero, which means losing its fractional part. For example, 8.345 would be truncated to 8, and -2.7335 would be truncated to -2.\n        Return the quotient after dividing dividend by divisor.\n        Note: Assume we are dealing with an environment that could only store integers within the 32-bit signed integer range: [\u2212231, 231 \u2212 1]. For this problem, if the quotient is strictly greater than 231 - 1, then return 231 - 1, and if the quotient is strictly less than -231, then return -231.\n        Example 1:\n        Input: dividend = 10, divisor = 3\n        Output: 3\n        Explanation: 10/3 = 3.33333.. which is truncated to 3.\n        Example 2:\n        Input: dividend = 7, divisor = -3\n        Output: -2\n        Explanation: 7/-3 = -2.33333.. which is truncated to -2.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        sign = 1\n        if dividend > 0 and divisor < 0 or dividend < 0 and divisor > 0:\n            sign = -1"
    },
    {
        "number": 29,
        "title": "Divide Two Integers",
        "difficulty": 1,
        "prompt": "class Solution:\n    def divide(self, dividend: int, divisor: int) -> int:\n        \"\"\"\n        Given two integers dividend and divisor, divide two integers without using multiplication, division, and mod operator.\n        The integer division should truncate toward zero, which means losing its fractional part. For example, 8.345 would be truncated to 8, and -2.7335 would be truncated to -2.\n        Return the quotient after dividing dividend by divisor.\n        Note: Assume we are dealing with an environment that could only store integers within the 32-bit signed integer range: [\u2212231, 231 \u2212 1]. For this problem, if the quotient is strictly greater than 231 - 1, then return 231 - 1, and if the quotient is strictly less than -231, then return -231.\n        Example 1:\n        Input: dividend = 10, divisor = 3\n        Output: 3\n        Explanation: 10/3 = 3.33333.. which is truncated to 3.\n        Example 2:\n        Input: dividend = 7, divisor = -3\n        Output: -2\n        Explanation: 7/-3 = -2.33333.. which is truncated to -2.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        sign = 1\n        if (dividend > 0 and divisor < 0) or (dividend < 0 and divisor > 0):\n            sign = -1"
    },
    {
        "number": 29,
        "title": "Divide Two Integers",
        "difficulty": 1,
        "prompt": "class Solution:\n    def divide(self, dividend: int, divisor: int) -> int:\n        \"\"\"\n        Given two integers dividend and divisor, divide two integers without using multiplication, division, and mod operator.\n        The integer division should truncate toward zero, which means losing its fractional part. For example, 8.345 would be truncated to 8, and -2.7335 would be truncated to -2.\n        Return the quotient after dividing dividend by divisor.\n        Note: Assume we are dealing with an environment that could only store integers within the 32-bit signed integer range: [\u2212231, 231 \u2212 1]. For this problem, if the quotient is strictly greater than 231 - 1, then return 231 - 1, and if the quotient is strictly less than -231, then return -231.\n        Example 1:\n        Input: dividend = 10, divisor = 3\n        Output: 3\n        Explanation: 10/3 = 3.33333.. which is truncated to 3.\n        Example 2:\n        Input: dividend = 7, divisor = -3\n        Output: -2\n        Explanation: 7/-3 = -2.33333.. which is truncated to -2.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 3,
        "answer": "        # two pointer method\n        # https://leetcode.com/problems/divide-two-integers/discuss/107028/Simple-Java-solution-with-explanation\n        # neg -> pos\n        neg = False\n        if dividend < 0:\n            neg = not neg\n            dividend = -dividend\n        if divisor < 0:\n            neg = not neg\n            divisor = -divisor\n        d = abs(dividend)\n        q = abs(divisor)\n        ret = 0\n        while d >= q:\n            t = 0\n            while d >= (q << 1):\n                q = q << 1\n                t = t + 1\n            d = d - q\n            ret = ret + t\n        if neg:\n            ret = -ret\n        if ret < -2147483648 or ret > 2147483647:\n            return 2147483647\n        return ret"
    },
    {
        "number": 29,
        "title": "Divide Two Integers",
        "difficulty": 1,
        "prompt": "class Solution:\n    def divide(self, dividend: int, divisor: int) -> int:\n        \"\"\"\n        Given two integers dividend and divisor, divide two integers without using multiplication, division, and mod operator.\n        The integer division should truncate toward zero, which means losing its fractional part. For example, 8.345 would be truncated to 8, and -2.7335 would be truncated to -2.\n        Return the quotient after dividing dividend by divisor.\n        Note: Assume we are dealing with an environment that could only store integers within the 32-bit signed integer range: [\u2212231, 231 \u2212 1]. For this problem, if the quotient is strictly greater than 231 - 1, then return 231 - 1, and if the quotient is strictly less than -231, then return -231.\n        Example 1:\n        Input: dividend = 10, divisor = 3\n        Output: 3\n        Explanation: 10/3 = 3.33333.. which is truncated to 3.\n        Example 2:\n        Input: dividend = 7, divisor = -3\n        Output: -2\n        Explanation: 7/-3 = -2.33333.. which is truncated to -2.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 4,
        "answer": "        if dividend == 0:\n            return 0"
    },
    {
        "number": 29,
        "title": "Divide Two Integers",
        "difficulty": 1,
        "prompt": "class Solution:\n    def divide(self, dividend: int, divisor: int) -> int:\n        \"\"\"\n        Given two integers dividend and divisor, divide two integers without using multiplication, division, and mod operator.\n        The integer division should truncate toward zero, which means losing its fractional part. For example, 8.345 would be truncated to 8, and -2.7335 would be truncated to -2.\n        Return the quotient after dividing dividend by divisor.\n        Note: Assume we are dealing with an environment that could only store integers within the 32-bit signed integer range: [\u2212231, 231 \u2212 1]. For this problem, if the quotient is strictly greater than 231 - 1, then return 231 - 1, and if the quotient is strictly less than -231, then return -231.\n        Example 1:\n        Input: dividend = 10, divisor = 3\n        Output: 3\n        Explanation: 10/3 = 3.33333.. which is truncated to 3.\n        Example 2:\n        Input: dividend = 7, divisor = -3\n        Output: -2\n        Explanation: 7/-3 = -2.33333.. which is truncated to -2.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 5,
        "answer": "        is_pos = (dividend < 0) is (divisor < 0)\n        dividend, divisor = abs(dividend), abs(divisor)\n        res = 0\n        while dividend >= divisor:\n            tmp, i = divisor, 1\n            while dividend >= tmp:\n                dividend -= tmp\n                res += i\n                i <<= 1\n                tmp <<= 1\n        if not is_pos:\n            res = -res\n        return min(max(-2**31, res), 2**31-1)"
    },
    {
        "number": 30,
        "title": "Substring with Concatenation of All Words",
        "difficulty": 2,
        "prompt": "class Solution:\n    def findSubstring(self, s: str, words: List[str]) -> List[int]:\n        \"\"\"\n        You are given a string s and an array of strings words. All the strings of words are of the same length.\n        A concatenated substring in s is a substring that contains all the strings of any permutation of words concatenated.\n            For example, if words = [\"ab\",\"cd\",\"ef\"], then \"abcdef\", \"abefcd\", \"cdabef\", \"cdefab\", \"efabcd\", and \"efcdab\" are all concatenated strings. \"acdbef\" is not a concatenated substring because it is not the concatenation of any permutation of words.\n        Return the starting indices of all the concatenated substrings in s. You can return the answer in any order.\n        Example 1:\n        Input: s = \"barfoothefoobarman\", words = [\"foo\",\"bar\"]\n        Output: [0,9]\n        Explanation: Since words.length == 2 and words[i].length == 3, the concatenated substring has to be of length 6.\n        The substring starting at 0 is \"barfoo\". It is the concatenation of [\"bar\",\"foo\"] which is a permutation of words.\n        The substring starting at 9 is \"foobar\". It is the concatenation of [\"foo\",\"bar\"] which is a permutation of words.\n        The output order does not matter. Returning [9,0] is fine too.\n        Example 2:\n        Input: s = \"wordgoodgoodgoodbestword\", words = [\"word\",\"good\",\"best\",\"word\"]\n        Output: []\n        Explanation: Since words.length == 4 and words[i].length == 4, the concatenated substring has to be of length 16.\n        There is no substring of length 16 is s that is equal to the concatenation of any permutation of words.\n        We return an empty array.\n        Example 3:\n        Input: s = \"barfoofoobarthefoobarman\", words = [\"bar\",\"foo\",\"the\"]\n        Output: [6,9,12]\n        Explanation: Since words.length == 3 and words[i].length == 3, the concatenated substring has to be of length 9.\n        The substring starting at 6 is \"foobarthe\". It is the concatenation of [\"foo\",\"bar\",\"the\"] which is a permutation of words.\n        The substring starting at 9 is \"barthefoo\". It is the concatenation of [\"bar\",\"the\",\"foo\"] which is a permutation of words.\n        The substring starting at 12 is \"thefoobar\". It is the concatenation of [\"the\",\"foo\",\"bar\"] which is a permutation of words.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        if not words:\n            return []"
    },
    {
        "number": 30,
        "title": "Substring with Concatenation of All Words",
        "difficulty": 2,
        "prompt": "class Solution:\n    def findSubstring(self, s: str, words: List[str]) -> List[int]:\n        \"\"\"\n        You are given a string s and an array of strings words. All the strings of words are of the same length.\n        A concatenated substring in s is a substring that contains all the strings of any permutation of words concatenated.\n            For example, if words = [\"ab\",\"cd\",\"ef\"], then \"abcdef\", \"abefcd\", \"cdabef\", \"cdefab\", \"efabcd\", and \"efcdab\" are all concatenated strings. \"acdbef\" is not a concatenated substring because it is not the concatenation of any permutation of words.\n        Return the starting indices of all the concatenated substrings in s. You can return the answer in any order.\n        Example 1:\n        Input: s = \"barfoothefoobarman\", words = [\"foo\",\"bar\"]\n        Output: [0,9]\n        Explanation: Since words.length == 2 and words[i].length == 3, the concatenated substring has to be of length 6.\n        The substring starting at 0 is \"barfoo\". It is the concatenation of [\"bar\",\"foo\"] which is a permutation of words.\n        The substring starting at 9 is \"foobar\". It is the concatenation of [\"foo\",\"bar\"] which is a permutation of words.\n        The output order does not matter. Returning [9,0] is fine too.\n        Example 2:\n        Input: s = \"wordgoodgoodgoodbestword\", words = [\"word\",\"good\",\"best\",\"word\"]\n        Output: []\n        Explanation: Since words.length == 4 and words[i].length == 4, the concatenated substring has to be of length 16.\n        There is no substring of length 16 is s that is equal to the concatenation of any permutation of words.\n        We return an empty array.\n        Example 3:\n        Input: s = \"barfoofoobarthefoobarman\", words = [\"bar\",\"foo\",\"the\"]\n        Output: [6,9,12]\n        Explanation: Since words.length == 3 and words[i].length == 3, the concatenated substring has to be of length 9.\n        The substring starting at 6 is \"foobarthe\". It is the concatenation of [\"foo\",\"bar\",\"the\"] which is a permutation of words.\n        The substring starting at 9 is \"barthefoo\". It is the concatenation of [\"bar\",\"the\",\"foo\"] which is a permutation of words.\n        The substring starting at 12 is \"thefoobar\". It is the concatenation of [\"the\",\"foo\",\"bar\"] which is a permutation of words.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        if not words or not s:\n            return []\n        \n        word_len, words_len = len(words[0]), len(words)\n        if len(s) < words_len * word_len:\n            return []\n        \n        words_map = defaultdict(int)\n        for word in words:\n            words_map[word] += 1\n        \n        concat_substr_len = word_len * words_len\n        concat_substr_list = []\n        \n        for i in range(0, len(s)-concat_substr_len+1):\n            substr_tmp = s[i:i+concat_substr_len]\n            substr_map = defaultdict(int)\n            for j in range(0, len(substr_tmp), word_len):\n                substr_map[substr_tmp[j:j+word_len]] += 1\n                if substr_map[substr_tmp[j:j+word_len]] > words_map[substr_tmp[j:j+word_len]]:\n                    break\n            if substr_map == words_map:\n                concat_substr_list.append(i)\n        \n        return concat_substr_list\n<|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>"
    },
    {
        "number": 30,
        "title": "Substring with Concatenation of All Words",
        "difficulty": 2,
        "prompt": "class Solution:\n    def findSubstring(self, s: str, words: List[str]) -> List[int]:\n        \"\"\"\n        You are given a string s and an array of strings words. All the strings of words are of the same length.\n        A concatenated substring in s is a substring that contains all the strings of any permutation of words concatenated.\n            For example, if words = [\"ab\",\"cd\",\"ef\"], then \"abcdef\", \"abefcd\", \"cdabef\", \"cdefab\", \"efabcd\", and \"efcdab\" are all concatenated strings. \"acdbef\" is not a concatenated substring because it is not the concatenation of any permutation of words.\n        Return the starting indices of all the concatenated substrings in s. You can return the answer in any order.\n        Example 1:\n        Input: s = \"barfoothefoobarman\", words = [\"foo\",\"bar\"]\n        Output: [0,9]\n        Explanation: Since words.length == 2 and words[i].length == 3, the concatenated substring has to be of length 6.\n        The substring starting at 0 is \"barfoo\". It is the concatenation of [\"bar\",\"foo\"] which is a permutation of words.\n        The substring starting at 9 is \"foobar\". It is the concatenation of [\"foo\",\"bar\"] which is a permutation of words.\n        The output order does not matter. Returning [9,0] is fine too.\n        Example 2:\n        Input: s = \"wordgoodgoodgoodbestword\", words = [\"word\",\"good\",\"best\",\"word\"]\n        Output: []\n        Explanation: Since words.length == 4 and words[i].length == 4, the concatenated substring has to be of length 16.\n        There is no substring of length 16 is s that is equal to the concatenation of any permutation of words.\n        We return an empty array.\n        Example 3:\n        Input: s = \"barfoofoobarthefoobarman\", words = [\"bar\",\"foo\",\"the\"]\n        Output: [6,9,12]\n        Explanation: Since words.length == 3 and words[i].length == 3, the concatenated substring has to be of length 9.\n        The substring starting at 6 is \"foobarthe\". It is the concatenation of [\"foo\",\"bar\",\"the\"] which is a permutation of words.\n        The substring starting at 9 is \"barthefoo\". It is the concatenation of [\"bar\",\"the\",\"foo\"] which is a permutation of words.\n        The substring starting at 12 is \"thefoobar\". It is the concatenation of [\"the\",\"foo\",\"bar\"] which is a permutation of words.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 3,
        "answer": "        if not s or not words:\n            return []\n        if len(words) == 0:\n            return [0] if len(s) == 0 else []\n        wordLen = len(words[0])\n        wordNum = len(words)\n        wordDict = collections.defaultdict(int)\n        for word in words:\n            wordDict[word] += 1\n        \n        # find the start index of words\n        wordsLen = wordLen * wordNum\n        lenS = len(s)\n        if lenS < wordsLen:\n            return []\n        # get wordDict\n        result = []\n        for i in range(0, lenS - wordsLen + 1):\n            subS = s[i:i+wordsLen]\n            if subS in wordDict:\n                result.append(i)\n        return result"
    },
    {
        "number": 30,
        "title": "Substring with Concatenation of All Words",
        "difficulty": 2,
        "prompt": "class Solution:\n    def findSubstring(self, s: str, words: List[str]) -> List[int]:\n        \"\"\"\n        You are given a string s and an array of strings words. All the strings of words are of the same length.\n        A concatenated substring in s is a substring that contains all the strings of any permutation of words concatenated.\n            For example, if words = [\"ab\",\"cd\",\"ef\"], then \"abcdef\", \"abefcd\", \"cdabef\", \"cdefab\", \"efabcd\", and \"efcdab\" are all concatenated strings. \"acdbef\" is not a concatenated substring because it is not the concatenation of any permutation of words.\n        Return the starting indices of all the concatenated substrings in s. You can return the answer in any order.\n        Example 1:\n        Input: s = \"barfoothefoobarman\", words = [\"foo\",\"bar\"]\n        Output: [0,9]\n        Explanation: Since words.length == 2 and words[i].length == 3, the concatenated substring has to be of length 6.\n        The substring starting at 0 is \"barfoo\". It is the concatenation of [\"bar\",\"foo\"] which is a permutation of words.\n        The substring starting at 9 is \"foobar\". It is the concatenation of [\"foo\",\"bar\"] which is a permutation of words.\n        The output order does not matter. Returning [9,0] is fine too.\n        Example 2:\n        Input: s = \"wordgoodgoodgoodbestword\", words = [\"word\",\"good\",\"best\",\"word\"]\n        Output: []\n        Explanation: Since words.length == 4 and words[i].length == 4, the concatenated substring has to be of length 16.\n        There is no substring of length 16 is s that is equal to the concatenation of any permutation of words.\n        We return an empty array.\n        Example 3:\n        Input: s = \"barfoofoobarthefoobarman\", words = [\"bar\",\"foo\",\"the\"]\n        Output: [6,9,12]\n        Explanation: Since words.length == 3 and words[i].length == 3, the concatenated substring has to be of length 9.\n        The substring starting at 6 is \"foobarthe\". It is the concatenation of [\"foo\",\"bar\",\"the\"] which is a permutation of words.\n        The substring starting at 9 is \"barthefoo\". It is the concatenation of [\"bar\",\"the\",\"foo\"] which is a permutation of words.\n        The substring starting at 12 is \"thefoobar\". It is the concatenation of [\"the\",\"foo\",\"bar\"] which is a permutation of words.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 4,
        "answer": "        from collections import Counter, defaultdict\n        if not s or not words:\n            return []\n        if len(words) > len(s):\n            return []\n        word_len = len(words[0])\n        word_total = len(words) * word_len\n        # s = \"barfoothefoobarman\"\n        # words = [\"foo\",\"bar\"]\n        # word_len = 3\n        # word_total = 6\n        # s = \"wordgoodgoodgoodbestword\"\n        # words = [\"word\",\"good\",\"best\",\"word\"]\n        # word_len = 4\n        # word_total = 16\n        words_c = Counter(words)\n        need_len = word_total\n        # hashmap = {word: 0 for word in words}\n        res = []\n        for i in range(word_len):\n            hashmap = defaultdict(int)\n            start = i\n            end = i + need_len\n            while end <= len(s):\n                # hashmap = {word: 0 for word in words}\n                # print(start, end)\n                # print(hashmap)\n                # print(s[start:end])\n                substr = s[start:end]\n                hashmap = Counter(substr)\n                for word in words_c"
    },
    {
        "number": 30,
        "title": "Substring with Concatenation of All Words",
        "difficulty": 2,
        "prompt": "class Solution:\n    def findSubstring(self, s: str, words: List[str]) -> List[int]:\n        \"\"\"\n        You are given a string s and an array of strings words. All the strings of words are of the same length.\n        A concatenated substring in s is a substring that contains all the strings of any permutation of words concatenated.\n            For example, if words = [\"ab\",\"cd\",\"ef\"], then \"abcdef\", \"abefcd\", \"cdabef\", \"cdefab\", \"efabcd\", and \"efcdab\" are all concatenated strings. \"acdbef\" is not a concatenated substring because it is not the concatenation of any permutation of words.\n        Return the starting indices of all the concatenated substrings in s. You can return the answer in any order.\n        Example 1:\n        Input: s = \"barfoothefoobarman\", words = [\"foo\",\"bar\"]\n        Output: [0,9]\n        Explanation: Since words.length == 2 and words[i].length == 3, the concatenated substring has to be of length 6.\n        The substring starting at 0 is \"barfoo\". It is the concatenation of [\"bar\",\"foo\"] which is a permutation of words.\n        The substring starting at 9 is \"foobar\". It is the concatenation of [\"foo\",\"bar\"] which is a permutation of words.\n        The output order does not matter. Returning [9,0] is fine too.\n        Example 2:\n        Input: s = \"wordgoodgoodgoodbestword\", words = [\"word\",\"good\",\"best\",\"word\"]\n        Output: []\n        Explanation: Since words.length == 4 and words[i].length == 4, the concatenated substring has to be of length 16.\n        There is no substring of length 16 is s that is equal to the concatenation of any permutation of words.\n        We return an empty array.\n        Example 3:\n        Input: s = \"barfoofoobarthefoobarman\", words = [\"bar\",\"foo\",\"the\"]\n        Output: [6,9,12]\n        Explanation: Since words.length == 3 and words[i].length == 3, the concatenated substring has to be of length 9.\n        The substring starting at 6 is \"foobarthe\". It is the concatenation of [\"foo\",\"bar\",\"the\"] which is a permutation of words.\n        The substring starting at 9 is \"barthefoo\". It is the concatenation of [\"bar\",\"the\",\"foo\"] which is a permutation of words.\n        The substring starting at 12 is \"thefoobar\". It is the concatenation of [\"the\",\"foo\",\"bar\"] which is a permutation of words.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 5,
        "answer": "        if not s or not words:\n            return []\n        result = []\n        n, k = len(s), len(words[0])\n        if n < k * len(words):\n            return result\n        used = [False] * len(words)\n        for j in range(k):\n            self.process(0, s, words, k, j, used, [], result)\n        return result"
    },
    {
        "number": 31,
        "title": "Next Permutation",
        "difficulty": 1,
        "prompt": "class Solution:\n    def nextPermutation(self, nums: List[int]) -> None:\n        \"\"\"\n        Do not return anything, modify nums in-place instead.\n        A permutation of an array of integers is an arrangement of its members into a sequence or linear order.\n            For example, for arr = [1,2,3], the following are all the permutations of arr: [1,2,3], [1,3,2], [2, 1, 3], [2, 3, 1], [3,1,2], [3,2,1].\n        The next permutation of an array of integers is the next lexicographically greater permutation of its integer. More formally, if all the permutations of the array are sorted in one container according to their lexicographical order, then the next permutation of that array is the permutation that follows it in the sorted container. If such arrangement is not possible, the array must be rearranged as the lowest possible order (i.e., sorted in ascending order).\n            For example, the next permutation of arr = [1,2,3] is [1,3,2].\n            Similarly, the next permutation of arr = [2,3,1] is [3,1,2].\n            While the next permutation of arr = [3,2,1] is [1,2,3] because [3,2,1] does not have a lexicographical larger rearrangement.\n        Given an array of integers nums, find the next permutation of nums.\n        The replacement must be in place and use only constant extra memory.\n        Example 1:\n        Input: nums = [1,2,3]\n        Output: [1,3,2]\n        Example 2:\n        Input: nums = [3,2,1]\n        Output: [1,2,3]\n        Example 3:\n        Input: nums = [1,1,5]\n        Output: [1,5,1]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        def swap(i, j):\n            if i!= j:\n                nums[i], nums[j] = nums[j], nums[i]"
    },
    {
        "number": 31,
        "title": "Next Permutation",
        "difficulty": 1,
        "prompt": "class Solution:\n    def nextPermutation(self, nums: List[int]) -> None:\n        \"\"\"\n        Do not return anything, modify nums in-place instead.\n        A permutation of an array of integers is an arrangement of its members into a sequence or linear order.\n            For example, for arr = [1,2,3], the following are all the permutations of arr: [1,2,3], [1,3,2], [2, 1, 3], [2, 3, 1], [3,1,2], [3,2,1].\n        The next permutation of an array of integers is the next lexicographically greater permutation of its integer. More formally, if all the permutations of the array are sorted in one container according to their lexicographical order, then the next permutation of that array is the permutation that follows it in the sorted container. If such arrangement is not possible, the array must be rearranged as the lowest possible order (i.e., sorted in ascending order).\n            For example, the next permutation of arr = [1,2,3] is [1,3,2].\n            Similarly, the next permutation of arr = [2,3,1] is [3,1,2].\n            While the next permutation of arr = [3,2,1] is [1,2,3] because [3,2,1] does not have a lexicographical larger rearrangement.\n        Given an array of integers nums, find the next permutation of nums.\n        The replacement must be in place and use only constant extra memory.\n        Example 1:\n        Input: nums = [1,2,3]\n        Output: [1,3,2]\n        Example 2:\n        Input: nums = [3,2,1]\n        Output: [1,2,3]\n        Example 3:\n        Input: nums = [1,1,5]\n        Output: [1,5,1]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        # \u6b64\u9898\u4e0d\u7528\u6392\u5e8f\uff0c\u76f4\u63a5\u627e\u5230\u987a\u5e8f\u6700\u540e\u4e00\u4e2a\u70b9\u8fdb\u884c\u4ea4\u6362\u5373\u53ef\n        # nums.sort()\n        # length = len(nums)\n        # i = length - 2\n        # while i >= 0:\n        #     if nums[i] < nums[i + 1]:\n        #         nums[i], nums[i + 1] = nums[i + 1], nums[i]\n        #         for j in range(i + 1, length):\n        #             nums[j], nums[j + 1] = nums[j + 1], nums[j]\n        #         break\n        #     i -= 1\n        # return nums"
    },
    {
        "number": 31,
        "title": "Next Permutation",
        "difficulty": 1,
        "prompt": "class Solution:\n    def nextPermutation(self, nums: List[int]) -> None:\n        \"\"\"\n        Do not return anything, modify nums in-place instead.\n        A permutation of an array of integers is an arrangement of its members into a sequence or linear order.\n            For example, for arr = [1,2,3], the following are all the permutations of arr: [1,2,3], [1,3,2], [2, 1, 3], [2, 3, 1], [3,1,2], [3,2,1].\n        The next permutation of an array of integers is the next lexicographically greater permutation of its integer. More formally, if all the permutations of the array are sorted in one container according to their lexicographical order, then the next permutation of that array is the permutation that follows it in the sorted container. If such arrangement is not possible, the array must be rearranged as the lowest possible order (i.e., sorted in ascending order).\n            For example, the next permutation of arr = [1,2,3] is [1,3,2].\n            Similarly, the next permutation of arr = [2,3,1] is [3,1,2].\n            While the next permutation of arr = [3,2,1] is [1,2,3] because [3,2,1] does not have a lexicographical larger rearrangement.\n        Given an array of integers nums, find the next permutation of nums.\n        The replacement must be in place and use only constant extra memory.\n        Example 1:\n        Input: nums = [1,2,3]\n        Output: [1,3,2]\n        Example 2:\n        Input: nums = [3,2,1]\n        Output: [1,2,3]\n        Example 3:\n        Input: nums = [1,1,5]\n        Output: [1,5,1]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 3,
        "answer": "        if len(nums) <= 1:\n            return\n        i = len(nums) - 2\n        while i >= 0 and nums[i] >= nums[i+1]:\n            i -= 1\n        if i >= 0:\n            j = len(nums) - 1\n            while j >= 0 and nums[i] >= nums[j]:\n                j -= 1\n            nums[i], nums[j] = nums[j], nums[i]\n        left, right = i + 1, len(nums) - 1\n        while left < right:\n            nums[left], nums[right] = nums[right], nums[left]\n            left += 1\n            right -= 1"
    },
    {
        "number": 31,
        "title": "Next Permutation",
        "difficulty": 1,
        "prompt": "class Solution:\n    def nextPermutation(self, nums: List[int]) -> None:\n        \"\"\"\n        Do not return anything, modify nums in-place instead.\n        A permutation of an array of integers is an arrangement of its members into a sequence or linear order.\n            For example, for arr = [1,2,3], the following are all the permutations of arr: [1,2,3], [1,3,2], [2, 1, 3], [2, 3, 1], [3,1,2], [3,2,1].\n        The next permutation of an array of integers is the next lexicographically greater permutation of its integer. More formally, if all the permutations of the array are sorted in one container according to their lexicographical order, then the next permutation of that array is the permutation that follows it in the sorted container. If such arrangement is not possible, the array must be rearranged as the lowest possible order (i.e., sorted in ascending order).\n            For example, the next permutation of arr = [1,2,3] is [1,3,2].\n            Similarly, the next permutation of arr = [2,3,1] is [3,1,2].\n            While the next permutation of arr = [3,2,1] is [1,2,3] because [3,2,1] does not have a lexicographical larger rearrangement.\n        Given an array of integers nums, find the next permutation of nums.\n        The replacement must be in place and use only constant extra memory.\n        Example 1:\n        Input: nums = [1,2,3]\n        Output: [1,3,2]\n        Example 2:\n        Input: nums = [3,2,1]\n        Output: [1,2,3]\n        Example 3:\n        Input: nums = [1,1,5]\n        Output: [1,5,1]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 4,
        "answer": "        if len(nums) <= 1:\n            return nums"
    },
    {
        "number": 31,
        "title": "Next Permutation",
        "difficulty": 1,
        "prompt": "class Solution:\n    def nextPermutation(self, nums: List[int]) -> None:\n        \"\"\"\n        Do not return anything, modify nums in-place instead.\n        A permutation of an array of integers is an arrangement of its members into a sequence or linear order.\n            For example, for arr = [1,2,3], the following are all the permutations of arr: [1,2,3], [1,3,2], [2, 1, 3], [2, 3, 1], [3,1,2], [3,2,1].\n        The next permutation of an array of integers is the next lexicographically greater permutation of its integer. More formally, if all the permutations of the array are sorted in one container according to their lexicographical order, then the next permutation of that array is the permutation that follows it in the sorted container. If such arrangement is not possible, the array must be rearranged as the lowest possible order (i.e., sorted in ascending order).\n            For example, the next permutation of arr = [1,2,3] is [1,3,2].\n            Similarly, the next permutation of arr = [2,3,1] is [3,1,2].\n            While the next permutation of arr = [3,2,1] is [1,2,3] because [3,2,1] does not have a lexicographical larger rearrangement.\n        Given an array of integers nums, find the next permutation of nums.\n        The replacement must be in place and use only constant extra memory.\n        Example 1:\n        Input: nums = [1,2,3]\n        Output: [1,3,2]\n        Example 2:\n        Input: nums = [3,2,1]\n        Output: [1,2,3]\n        Example 3:\n        Input: nums = [1,1,5]\n        Output: [1,5,1]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 5,
        "answer": "        \"\"\"\n        The following is a more general approach with a brute force solution.\n        Sort the array in descending order.\n        Find the index of the first number greater than the previous number.\n        Swap the number that is before the last number that is greater than the number before the last number.\n        Reverse the last number of the array.\n        \"\"\"\n        # Solution 1 - 45 ms\n        \"\"\"\n        nums.sort(reverse=True)\n        for i in range(len(nums) - 1):\n            if nums[i] < nums[i + 1]:\n                break"
    },
    {
        "number": 32,
        "title": "Longest Valid Parentheses",
        "difficulty": 2,
        "prompt": "class Solution:\n    def longestValidParentheses(self, s: str) -> int:\n        \"\"\"\n        Given a string containing just the characters '(' and ')', return the length of the longest valid (well-formed) parentheses substring.\n        Example 1:\n        Input: s = \"(()\"\n        Output: 2\n        Explanation: The longest valid parentheses substring is \"()\".\n        Example 2:\n        Input: s = \")()())\"\n        Output: 4\n        Explanation: The longest valid parentheses substring is \"()()\".\n        Example 3:\n        Input: s = \"\"\n        Output: 0\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        stack = []\n        max_length = 0\n        s_length = len(s)\n        for i in range(s_length):\n            if s[i] == \"(\":\n                stack.append(\"(\")\n            else:\n                if len(stack)!= 0 and stack[-1] == \"(\":\n                    stack.pop()\n                    if len(stack) == 0:\n                        max_length = max(max_length, i + 1)\n                    else:\n                        max_length = max(max_length, i - stack[-1])\n                else:\n                    stack.append(\")\")\n        return max_length"
    },
    {
        "number": 32,
        "title": "Longest Valid Parentheses",
        "difficulty": 2,
        "prompt": "class Solution:\n    def longestValidParentheses(self, s: str) -> int:\n        \"\"\"\n        Given a string containing just the characters '(' and ')', return the length of the longest valid (well-formed) parentheses substring.\n        Example 1:\n        Input: s = \"(()\"\n        Output: 2\n        Explanation: The longest valid parentheses substring is \"()\".\n        Example 2:\n        Input: s = \")()())\"\n        Output: 4\n        Explanation: The longest valid parentheses substring is \"()()\".\n        Example 3:\n        Input: s = \"\"\n        Output: 0\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        stack = []\n        max_len = 0\n        for char in s:\n            if char == '(':\n                stack.append(char)\n            elif char == ')':\n                if stack and stack[-1] == '(':\n                    stack.pop()\n                    stack.append(2)\n                else:\n                    stack.append(char)\n            if stack:\n                max_len = max(max_len, sum(stack))\n            else:\n                max_len = max(max_len, 0)\n        return max_len"
    },
    {
        "number": 32,
        "title": "Longest Valid Parentheses",
        "difficulty": 2,
        "prompt": "class Solution:\n    def longestValidParentheses(self, s: str) -> int:\n        \"\"\"\n        Given a string containing just the characters '(' and ')', return the length of the longest valid (well-formed) parentheses substring.\n        Example 1:\n        Input: s = \"(()\"\n        Output: 2\n        Explanation: The longest valid parentheses substring is \"()\".\n        Example 2:\n        Input: s = \")()())\"\n        Output: 4\n        Explanation: The longest valid parentheses substring is \"()()\".\n        Example 3:\n        Input: s = \"\"\n        Output: 0\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 3,
        "answer": "        stack = []\n        left = {\")\": 0, \"}\": 0, \"]\": 0}\n        right = {\"(\": 1, \"[\": 1, \"{\" : 1}\n        ret = 0\n        max_length = 0\n        for c in s:\n            if c in right:\n                stack.append(c)\n            else:\n                # print(stack)\n                stack.pop()\n                if len(stack) == 0:\n                    max_length = max(max_length, 2*right[stack[-1]] + left[c])\n                else:\n                    max_length = max(max_length, 2*right[stack[-1]])\n        return max_length"
    },
    {
        "number": 32,
        "title": "Longest Valid Parentheses",
        "difficulty": 2,
        "prompt": "class Solution:\n    def longestValidParentheses(self, s: str) -> int:\n        \"\"\"\n        Given a string containing just the characters '(' and ')', return the length of the longest valid (well-formed) parentheses substring.\n        Example 1:\n        Input: s = \"(()\"\n        Output: 2\n        Explanation: The longest valid parentheses substring is \"()\".\n        Example 2:\n        Input: s = \")()())\"\n        Output: 4\n        Explanation: The longest valid parentheses substring is \"()()\".\n        Example 3:\n        Input: s = \"\"\n        Output: 0\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 4,
        "answer": "        ##\u52a8\u6001\u89c4\u5212\n        # dp[i] \u8868\u793a\u4ee5\u7b2ci\u4e2a\u5143\u7d20\u7ed3\u5c3e\u7684\u6700\u957f\u6709\u6548\u62ec\u53f7\u5b57\u7b26\u4e32\n        # \u56e0\u4e3a\u957f\u5ea6\u4e3a0\uff0c1\uff0c2\uff0c3\uff0c4\uff0c5\uff0c6\uff0c7\uff0c8\uff0c9\uff0c10\uff0c11,12\u2026\u2026\n        # \u5206\u522b\u5bf9\u5e94\u7684\u6700\u5927\u6709\u6548\u62ec\u53f7\u957f\u5ea6\u4e3a 0\uff0c 1\uff0c 2\uff0c 3\uff0c 3\uff0c 3\uff0c 4\uff0c 4\uff0c 5\uff0c 6\uff0c 7\uff0c 8\n        # \u6240\u4ee5\u72b6\u6001\u8f6c\u79fb\u65b9\u7a0b\u4e3a\uff1a\n        # dp[i] = 0 if s[i] = ')'\n        # dp[i] = dp[i-1] + 2 if s[i] = '(' and i > 0 and s[i-1] = ')'\n        # dp[i] ="
    },
    {
        "number": 32,
        "title": "Longest Valid Parentheses",
        "difficulty": 2,
        "prompt": "class Solution:\n    def longestValidParentheses(self, s: str) -> int:\n        \"\"\"\n        Given a string containing just the characters '(' and ')', return the length of the longest valid (well-formed) parentheses substring.\n        Example 1:\n        Input: s = \"(()\"\n        Output: 2\n        Explanation: The longest valid parentheses substring is \"()\".\n        Example 2:\n        Input: s = \")()())\"\n        Output: 4\n        Explanation: The longest valid parentheses substring is \"()()\".\n        Example 3:\n        Input: s = \"\"\n        Output: 0\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 5,
        "answer": "        longest = 0\n        stack = []\n        for ch in s:\n            if ch == '(':\n                stack.append(ch)\n            else:\n                if stack:\n                    stack.pop()\n                else:\n                    stack.append(ch)"
    },
    {
        "number": 33,
        "title": "Search in Rotated Sorted Array",
        "difficulty": 1,
        "prompt": "class Solution:\n    def search(self, nums: List[int], target: int) -> int:\n        \"\"\"\n        There is an integer array nums sorted in ascending order (with distinct values).\n        Prior to being passed to your function, nums is possibly rotated at an unknown pivot index k (1 <= k < nums.length) such that the resulting array is [nums[k], nums[k+1],..., nums[n-1], nums[0], nums[1],..., nums[k-1]] (0-indexed). For example, [0,1,2,4,5,6,7] might be rotated at pivot index 3 and become [4,5,6,7,0,1,2].\n        Given the array nums after the possible rotation and an integer target, return the index of target if it is in nums, or -1 if it is not in nums.\n        You must write an algorithm with O(log n) runtime complexity.\n        Example 1:\n        Input: nums = [4,5,6,7,0,1,2], target = 0\n        Output: 4\n        Example 2:\n        Input: nums = [4,5,6,7,0,1,2], target = 3\n        Output: -1\n        Example 3:\n        Input: nums = [1], target = 0\n        Output: -1\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        left, right = 0, len(nums) - 1\n        while left <= right:\n            mid = (left + right) // 2\n            if target == nums[mid]:\n                return mid\n            elif nums[left] <= nums[mid]:\n                if target > nums[mid] or target < nums[left]:\n                    left = mid + 1\n                else:\n                    right = mid - 1\n            else:\n                if target < nums[mid] or target > nums[right]:\n                    right = mid - 1\n                else:\n                    left = mid + 1\n        return -1\n        \n        <|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>"
    },
    {
        "number": 33,
        "title": "Search in Rotated Sorted Array",
        "difficulty": 1,
        "prompt": "class Solution:\n    def search(self, nums: List[int], target: int) -> int:\n        \"\"\"\n        There is an integer array nums sorted in ascending order (with distinct values).\n        Prior to being passed to your function, nums is possibly rotated at an unknown pivot index k (1 <= k < nums.length) such that the resulting array is [nums[k], nums[k+1],..., nums[n-1], nums[0], nums[1],..., nums[k-1]] (0-indexed). For example, [0,1,2,4,5,6,7] might be rotated at pivot index 3 and become [4,5,6,7,0,1,2].\n        Given the array nums after the possible rotation and an integer target, return the index of target if it is in nums, or -1 if it is not in nums.\n        You must write an algorithm with O(log n) runtime complexity.\n        Example 1:\n        Input: nums = [4,5,6,7,0,1,2], target = 0\n        Output: 4\n        Example 2:\n        Input: nums = [4,5,6,7,0,1,2], target = 3\n        Output: -1\n        Example 3:\n        Input: nums = [1], target = 0\n        Output: -1\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        left = 0\n        right = len(nums) - 1\n        while left <= right:\n            mid = left + (right - left) // 2\n            if target == nums[mid]:\n                return mid\n            elif nums[left] <= nums[mid]:\n                if nums[left] <= target <= nums[mid]:\n                    right = mid - 1\n                else:\n                    left = mid + 1\n            else:\n                if nums[mid] <= target <= nums[right]:\n                    left = mid + 1\n                else:\n                    right = mid - 1\n        return -1"
    },
    {
        "number": 33,
        "title": "Search in Rotated Sorted Array",
        "difficulty": 1,
        "prompt": "class Solution:\n    def search(self, nums: List[int], target: int) -> int:\n        \"\"\"\n        There is an integer array nums sorted in ascending order (with distinct values).\n        Prior to being passed to your function, nums is possibly rotated at an unknown pivot index k (1 <= k < nums.length) such that the resulting array is [nums[k], nums[k+1],..., nums[n-1], nums[0], nums[1],..., nums[k-1]] (0-indexed). For example, [0,1,2,4,5,6,7] might be rotated at pivot index 3 and become [4,5,6,7,0,1,2].\n        Given the array nums after the possible rotation and an integer target, return the index of target if it is in nums, or -1 if it is not in nums.\n        You must write an algorithm with O(log n) runtime complexity.\n        Example 1:\n        Input: nums = [4,5,6,7,0,1,2], target = 0\n        Output: 4\n        Example 2:\n        Input: nums = [4,5,6,7,0,1,2], target = 3\n        Output: -1\n        Example 3:\n        Input: nums = [1], target = 0\n        Output: -1\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 3,
        "answer": "        start, end = 0, len(nums) - 1\n        while start <= end:\n            mid = (start + end) // 2\n            if target == nums[mid]:\n                return mid\n            if nums[start] <= nums[mid]:\n                if nums[start] <= target <= nums[mid]:\n                    end = mid - 1\n                else:\n                    start = mid + 1\n            else:\n                if nums[mid] <= target <= nums[end]:\n                    start = mid + 1\n                else:\n                    end = mid - 1\n        return -1"
    },
    {
        "number": 33,
        "title": "Search in Rotated Sorted Array",
        "difficulty": 1,
        "prompt": "class Solution:\n    def search(self, nums: List[int], target: int) -> int:\n        \"\"\"\n        There is an integer array nums sorted in ascending order (with distinct values).\n        Prior to being passed to your function, nums is possibly rotated at an unknown pivot index k (1 <= k < nums.length) such that the resulting array is [nums[k], nums[k+1],..., nums[n-1], nums[0], nums[1],..., nums[k-1]] (0-indexed). For example, [0,1,2,4,5,6,7] might be rotated at pivot index 3 and become [4,5,6,7,0,1,2].\n        Given the array nums after the possible rotation and an integer target, return the index of target if it is in nums, or -1 if it is not in nums.\n        You must write an algorithm with O(log n) runtime complexity.\n        Example 1:\n        Input: nums = [4,5,6,7,0,1,2], target = 0\n        Output: 4\n        Example 2:\n        Input: nums = [4,5,6,7,0,1,2], target = 3\n        Output: -1\n        Example 3:\n        Input: nums = [1], target = 0\n        Output: -1\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 4,
        "answer": "        if len(nums) == 1:\n            return -1 if target!= nums[0] else 0"
    },
    {
        "number": 33,
        "title": "Search in Rotated Sorted Array",
        "difficulty": 1,
        "prompt": "class Solution:\n    def search(self, nums: List[int], target: int) -> int:\n        \"\"\"\n        There is an integer array nums sorted in ascending order (with distinct values).\n        Prior to being passed to your function, nums is possibly rotated at an unknown pivot index k (1 <= k < nums.length) such that the resulting array is [nums[k], nums[k+1],..., nums[n-1], nums[0], nums[1],..., nums[k-1]] (0-indexed). For example, [0,1,2,4,5,6,7] might be rotated at pivot index 3 and become [4,5,6,7,0,1,2].\n        Given the array nums after the possible rotation and an integer target, return the index of target if it is in nums, or -1 if it is not in nums.\n        You must write an algorithm with O(log n) runtime complexity.\n        Example 1:\n        Input: nums = [4,5,6,7,0,1,2], target = 0\n        Output: 4\n        Example 2:\n        Input: nums = [4,5,6,7,0,1,2], target = 3\n        Output: -1\n        Example 3:\n        Input: nums = [1], target = 0\n        Output: -1\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 5,
        "answer": "        if not nums:\n            return -1"
    },
    {
        "number": 34,
        "title": "Find First and Last Position of Element in Sorted Array",
        "difficulty": 1,
        "prompt": "class Solution:\n    def searchRange(self, nums: List[int], target: int) -> List[int]:\n        \"\"\"\n        Given an array of integers nums sorted in non-decreasing order, find the starting and ending position of a given target value.\n        If target is not found in the array, return [-1, -1].\n        You must write an algorithm with O(log n) runtime complexity.\n        Example 1:\n        Input: nums = [5,7,7,8,8,10], target = 8\n        Output: [3,4]\n        Example 2:\n        Input: nums = [5,7,7,8,8,10], target = 6\n        Output: [-1,-1]\n        Example 3:\n        Input: nums = [], target = 0\n        Output: [-1,-1]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        if len(nums) == 0:\n            return [-1, -1]\n        # \u8fd9\u4e2acase\u662f\u6ca1\u95ee\u9898\u7684\uff0c\u56e0\u4e3anums\u4e2d\u90fd\u662f\u6b63\u6570\uff0c\u6240\u4ee5\u6700\u5c0f\u503c\u662f0\n        left = 0\n        right = len(nums) - 1\n        # \u4e8c\u5206\u6cd5\n        while left <= right:\n            mid = (left + right) // 2\n            if nums[mid] == target:\n                left = mid\n                break\n            elif nums[mid] < target:\n                left = mid + 1\n            else:\n                right = mid - 1\n        # \u76f4\u63a5\u5728\u6700\u540e\u7684\u4f4d\u7f6e\u627e\uff0cleft\u4e3anums\u4e2d\u4e0d\u4e3a\u7a7a\u7684\u6700\u5c0f\u503c\u4e3a0\n        if left < len(nums) and nums[left] == target:\n            l = left\n            r = left\n            while l >= 0 and nums[l] == target:\n                l -= 1\n            while r < len(nums) and nums[r] == target:\n                r += 1\n            return [l + 1, r - 1]\n        "
    },
    {
        "number": 34,
        "title": "Find First and Last Position of Element in Sorted Array",
        "difficulty": 1,
        "prompt": "class Solution:\n    def searchRange(self, nums: List[int], target: int) -> List[int]:\n        \"\"\"\n        Given an array of integers nums sorted in non-decreasing order, find the starting and ending position of a given target value.\n        If target is not found in the array, return [-1, -1].\n        You must write an algorithm with O(log n) runtime complexity.\n        Example 1:\n        Input: nums = [5,7,7,8,8,10], target = 8\n        Output: [3,4]\n        Example 2:\n        Input: nums = [5,7,7,8,8,10], target = 6\n        Output: [-1,-1]\n        Example 3:\n        Input: nums = [], target = 0\n        Output: [-1,-1]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        if not nums:\n            return [-1, -1]\n        return self.helper_binary_search(nums, 0, len(nums) - 1, target)"
    },
    {
        "number": 34,
        "title": "Find First and Last Position of Element in Sorted Array",
        "difficulty": 1,
        "prompt": "class Solution:\n    def searchRange(self, nums: List[int], target: int) -> List[int]:\n        \"\"\"\n        Given an array of integers nums sorted in non-decreasing order, find the starting and ending position of a given target value.\n        If target is not found in the array, return [-1, -1].\n        You must write an algorithm with O(log n) runtime complexity.\n        Example 1:\n        Input: nums = [5,7,7,8,8,10], target = 8\n        Output: [3,4]\n        Example 2:\n        Input: nums = [5,7,7,8,8,10], target = 6\n        Output: [-1,-1]\n        Example 3:\n        Input: nums = [], target = 0\n        Output: [-1,-1]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 3,
        "answer": "        if not nums:\n            return [-1, -1]\n        left, right = 0, len(nums) - 1\n        left_position = -1\n        right_position = -1"
    },
    {
        "number": 34,
        "title": "Find First and Last Position of Element in Sorted Array",
        "difficulty": 1,
        "prompt": "class Solution:\n    def searchRange(self, nums: List[int], target: int) -> List[int]:\n        \"\"\"\n        Given an array of integers nums sorted in non-decreasing order, find the starting and ending position of a given target value.\n        If target is not found in the array, return [-1, -1].\n        You must write an algorithm with O(log n) runtime complexity.\n        Example 1:\n        Input: nums = [5,7,7,8,8,10], target = 8\n        Output: [3,4]\n        Example 2:\n        Input: nums = [5,7,7,8,8,10], target = 6\n        Output: [-1,-1]\n        Example 3:\n        Input: nums = [], target = 0\n        Output: [-1,-1]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 4,
        "answer": "        # Find the range to look for target\n        # find the first occurence of target\n        # Look for the second occurence of target\n        # return the range"
    },
    {
        "number": 34,
        "title": "Find First and Last Position of Element in Sorted Array",
        "difficulty": 1,
        "prompt": "class Solution:\n    def searchRange(self, nums: List[int], target: int) -> List[int]:\n        \"\"\"\n        Given an array of integers nums sorted in non-decreasing order, find the starting and ending position of a given target value.\n        If target is not found in the array, return [-1, -1].\n        You must write an algorithm with O(log n) runtime complexity.\n        Example 1:\n        Input: nums = [5,7,7,8,8,10], target = 8\n        Output: [3,4]\n        Example 2:\n        Input: nums = [5,7,7,8,8,10], target = 6\n        Output: [-1,-1]\n        Example 3:\n        Input: nums = [], target = 0\n        Output: [-1,-1]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 5,
        "answer": "        if not nums:\n            return [-1, -1]\n        if len(nums) == 1:\n            if nums[0] == target:\n                return [0, 0]\n            else:\n                return [-1, -1]\n        left = 0\n        right = len(nums) - 1\n        if nums[right] <= target:\n            return [-1, -1]\n        while left < right:\n            mid = left + (right - left) // 2\n            if nums[mid] >= target:\n                right = mid\n            else:\n                left = mid + 1\n        if nums[left]!= target:\n            return [-1, -1]\n        left_idx = left\n        left = 0\n        right = len(nums) - 1\n        while left <= right:\n            mid = left + (right - left) // 2\n            if nums[mid] > target:\n                right = mid - 1\n            else:\n                left = mid + 1\n        right_idx = left - 1\n        return [left_idx, right_idx]\n<|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>"
    },
    {
        "number": 35,
        "title": "Search Insert Position",
        "difficulty": 0,
        "prompt": "class Solution:\n    def searchInsert(self, nums: List[int], target: int) -> int:\n        \"\"\"\n        Given a sorted array of distinct integers and a target value, return the index if the target is found. If not, return the index where it would be if it were inserted in order.\n        You must write an algorithm with O(log n) runtime complexity.\n        Example 1:\n        Input: nums = [1,3,5,6], target = 5\n        Output: 2\n        Example 2:\n        Input: nums = [1,3,5,6], target = 2\n        Output: 1\n        Example 3:\n        Input: nums = [1,3,5,6], target = 7\n        Output: 4\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        start = 0\n        end = len(nums) - 1\n        while start <= end:\n            mid = (start + end) // 2\n            if nums[mid] == target:\n                return mid\n            elif nums[mid] > target:\n                end = mid - 1\n            else:\n                start = mid + 1\n        return start\n<|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>"
    },
    {
        "number": 35,
        "title": "Search Insert Position",
        "difficulty": 0,
        "prompt": "class Solution:\n    def searchInsert(self, nums: List[int], target: int) -> int:\n        \"\"\"\n        Given a sorted array of distinct integers and a target value, return the index if the target is found. If not, return the index where it would be if it were inserted in order.\n        You must write an algorithm with O(log n) runtime complexity.\n        Example 1:\n        Input: nums = [1,3,5,6], target = 5\n        Output: 2\n        Example 2:\n        Input: nums = [1,3,5,6], target = 2\n        Output: 1\n        Example 3:\n        Input: nums = [1,3,5,6], target = 7\n        Output: 4\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        if target not in nums:\n            for i in range(len(nums)):\n                if nums[i] < target:\n                    pass\n                elif nums[i] > target:\n                    return i\n                else:\n                    return i\n        else:\n            return nums.index(target)\n            \n# O(n) time complexity: len(nums)\n# O(1) space complexity: \u5148\u6309\u7167\u4e00\u4e2a\u5faa\u73af, \u627e\u5230target\u6240\u5728\u7684\u4e0b\u6807, \u8df3\u8fc7\u4e0d\u9700\u8981\u7684\u5143\u7d20; \u5728\u627etarget\u5143\u7d20\u4f4d\u7f6e\u7684\u65f6\u5019, \u5176\u5b9e\u4e5f\u5c31\u662f\u6309\u7167\u4e00\u4e2a\u5faa\u73af; \u90fd\u662fO(1)\u7684\u65f6\u95f4\u590d\u6742\u5ea6"
    },
    {
        "number": 35,
        "title": "Search Insert Position",
        "difficulty": 0,
        "prompt": "class Solution:\n    def searchInsert(self, nums: List[int], target: int) -> int:\n        \"\"\"\n        Given a sorted array of distinct integers and a target value, return the index if the target is found. If not, return the index where it would be if it were inserted in order.\n        You must write an algorithm with O(log n) runtime complexity.\n        Example 1:\n        Input: nums = [1,3,5,6], target = 5\n        Output: 2\n        Example 2:\n        Input: nums = [1,3,5,6], target = 2\n        Output: 1\n        Example 3:\n        Input: nums = [1,3,5,6], target = 7\n        Output: 4\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 3,
        "answer": "        l, r = 0, len(nums) - 1\n        while l <= r:\n            m = l + ((r - l) // 2)\n            if nums[m] == target:\n                return m\n            elif nums[m] > target:\n                r = m - 1\n            else:\n                l = m + 1\n        return l"
    },
    {
        "number": 35,
        "title": "Search Insert Position",
        "difficulty": 0,
        "prompt": "class Solution:\n    def searchInsert(self, nums: List[int], target: int) -> int:\n        \"\"\"\n        Given a sorted array of distinct integers and a target value, return the index if the target is found. If not, return the index where it would be if it were inserted in order.\n        You must write an algorithm with O(log n) runtime complexity.\n        Example 1:\n        Input: nums = [1,3,5,6], target = 5\n        Output: 2\n        Example 2:\n        Input: nums = [1,3,5,6], target = 2\n        Output: 1\n        Example 3:\n        Input: nums = [1,3,5,6], target = 7\n        Output: 4\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 4,
        "answer": "        # 1. Binary Search\n        # Time: O(logN)\n        # Space: O(1)\n        # if not nums:\n        #     return 0\n        # l, r = 0, len(nums)-1\n        # while l <= r:\n        #     mid = (l+r) // 2\n        #     if nums[mid] == target:\n        #         return mid\n        #     elif nums[mid] > target:\n        #         r = mid - 1\n        #     else:\n        #         l = mid + 1\n        # return l"
    },
    {
        "number": 35,
        "title": "Search Insert Position",
        "difficulty": 0,
        "prompt": "class Solution:\n    def searchInsert(self, nums: List[int], target: int) -> int:\n        \"\"\"\n        Given a sorted array of distinct integers and a target value, return the index if the target is found. If not, return the index where it would be if it were inserted in order.\n        You must write an algorithm with O(log n) runtime complexity.\n        Example 1:\n        Input: nums = [1,3,5,6], target = 5\n        Output: 2\n        Example 2:\n        Input: nums = [1,3,5,6], target = 2\n        Output: 1\n        Example 3:\n        Input: nums = [1,3,5,6], target = 7\n        Output: 4\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 5,
        "answer": "        # Start at the begining, so index 0.\n        left = 0\n        right = len(nums) - 1\n        # Check if left is greater than right. If not, the array is sorted.\n        while left <= right:\n            # Find the middle index.\n            mid = left + (right - left) // 2\n            # See if the middle value is the target.\n            if nums[mid] == target:\n                return mid\n            # Otherwise, we need to determine where we should place the target.\n            # If the target is less than the middle value, we need to search in the left half.\n            if nums[mid] < target:\n                left = mid + 1\n            # Otherwise, we search in the right half.\n            else:\n                right = mid - 1\n        # We know where to place the target.\n        # We need to see if it is the first index or the last index.\n        # If it is the last index, we need to insert it at the end.\n        return left<|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>"
    },
    {
        "number": 36,
        "title": "Valid Sudoku",
        "difficulty": 1,
        "prompt": "class Solution:\n    def isValidSudoku(self, board: List[List[str]]) -> bool:\n        \"\"\"\n        Determine if a 9 x 9 Sudoku board is valid. Only the filled cells need to be validated according to the following rules:\n            Each row must contain the digits 1-9 without repetition.\n            Each column must contain the digits 1-9 without repetition.\n            Each of the nine 3 x 3 sub-boxes of the grid must contain the digits 1-9 without repetition.\n        Note:\n            A Sudoku board (partially filled) could be valid but is not necessarily solvable.\n            Only the filled cells need to be validated according to the mentioned rules.\n        Example 1:\n        Input: board = \n        [[\"5\",\"3\",\".\",\".\",\"7\",\".\",\".\",\".\",\".\"]\n       ,[\"6\",\".\",\".\",\"1\",\"9\",\"5\",\".\",\".\",\".\"]\n       ,[\".\",\"9\",\"8\",\".\",\".\",\".\",\".\",\"6\",\".\"]\n       ,[\"8\",\".\",\".\",\".\",\"6\",\".\",\".\",\".\",\"3\"]\n       ,[\"4\",\".\",\".\",\"8\",\".\",\"3\",\".\",\".\",\"1\"]\n       ,[\"7\",\".\",\".\",\".\",\"2\",\".\",\".\",\".\",\"6\"]\n       ,[\".\",\"6\",\".\",\".\",\".\",\".\",\"2\",\"8\",\".\"]\n       ,[\".\",\".\",\".\",\"4\",\"1\",\"9\",\".\",\".\",\"5\"]\n       ,[\".\",\".\",\".\",\".\",\"8\",\".\",\".\",\"7\",\"9\"]]\n        Output: true\n        Example 2:\n        Input: board = \n        [[\"8\",\"3\",\".\",\".\",\"7\",\".\",\".\",\".\",\".\"]\n       ,[\"6\",\".\",\".\",\"1\",\"9\",\"5\",\".\",\".\",\".\"]\n       ,[\".\",\"9\",\"8\",\".\",\".\",\".\",\".\",\"6\",\".\"]\n       ,[\"8\",\".\",\".\",\".\",\"6\",\".\",\".\",\".\",\"3\"]\n       ,[\"4\",\".\",\".\",\"8\",\".\",\"3\",\".\",\".\",\"1\"]\n       ,[\"7\",\".\",\".\",\".\",\"2\",\".\",\".\",\".\",\"6\"]\n       ,[\".\",\"6\",\".\",\".\",\".\",\".\",\"2\",\"8\",\".\"]\n       ,[\".\",\".\",\".\",\"4\",\"1\",\"9\",\".\",\".\",\"5\"]\n       ,[\".\",\".\",\".\",\".\",\"8\",\".\",\".\",\"7\",\"9\"]]\n        Output: false\n        Explanation: Same as Example 1, except with the 5 in the top left corner being modified to 8. Since there are two 8's in the top left 3x3 sub-box, it is invalid.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        row_map = [[0] * 10 for _ in range(9)]\n        col_map = [[0] * 10 for _ in range(9)]\n        grid_map = [[0] * 10 for _ in range(9)]\n        for i in range(9):\n            for j in range(9):\n                if board[i][j] == '.':\n                    continue\n                # Check row\n                num = int(board[i][j])\n                if row_map[i][num] == 1:\n                    return False\n                row_map[i][num] = 1\n                # Check col\n                num = int(board[i][j])\n                if col_map[j][num] == 1:\n                    return False\n                col_map[j][num] = 1\n                # Check grid\n                # (i//3) * 3 + (j//3) \n                num = int(board[i][j])\n                if grid_map[(i // 3) * 3 + (j // 3)][num] == 1:\n                    return False\n                grid_map[(i // 3) * 3 + (j // 3)][num] = 1\n        return True"
    },
    {
        "number": 36,
        "title": "Valid Sudoku",
        "difficulty": 1,
        "prompt": "class Solution:\n    def isValidSudoku(self, board: List[List[str]]) -> bool:\n        \"\"\"\n        Determine if a 9 x 9 Sudoku board is valid. Only the filled cells need to be validated according to the following rules:\n            Each row must contain the digits 1-9 without repetition.\n            Each column must contain the digits 1-9 without repetition.\n            Each of the nine 3 x 3 sub-boxes of the grid must contain the digits 1-9 without repetition.\n        Note:\n            A Sudoku board (partially filled) could be valid but is not necessarily solvable.\n            Only the filled cells need to be validated according to the mentioned rules.\n        Example 1:\n        Input: board = \n        [[\"5\",\"3\",\".\",\".\",\"7\",\".\",\".\",\".\",\".\"]\n       ,[\"6\",\".\",\".\",\"1\",\"9\",\"5\",\".\",\".\",\".\"]\n       ,[\".\",\"9\",\"8\",\".\",\".\",\".\",\".\",\"6\",\".\"]\n       ,[\"8\",\".\",\".\",\".\",\"6\",\".\",\".\",\".\",\"3\"]\n       ,[\"4\",\".\",\".\",\"8\",\".\",\"3\",\".\",\".\",\"1\"]\n       ,[\"7\",\".\",\".\",\".\",\"2\",\".\",\".\",\".\",\"6\"]\n       ,[\".\",\"6\",\".\",\".\",\".\",\".\",\"2\",\"8\",\".\"]\n       ,[\".\",\".\",\".\",\"4\",\"1\",\"9\",\".\",\".\",\"5\"]\n       ,[\".\",\".\",\".\",\".\",\"8\",\".\",\".\",\"7\",\"9\"]]\n        Output: true\n        Example 2:\n        Input: board = \n        [[\"8\",\"3\",\".\",\".\",\"7\",\".\",\".\",\".\",\".\"]\n       ,[\"6\",\".\",\".\",\"1\",\"9\",\"5\",\".\",\".\",\".\"]\n       ,[\".\",\"9\",\"8\",\".\",\".\",\".\",\".\",\"6\",\".\"]\n       ,[\"8\",\".\",\".\",\".\",\"6\",\".\",\".\",\".\",\"3\"]\n       ,[\"4\",\".\",\".\",\"8\",\".\",\"3\",\".\",\".\",\"1\"]\n       ,[\"7\",\".\",\".\",\".\",\"2\",\".\",\".\",\".\",\"6\"]\n       ,[\".\",\"6\",\".\",\".\",\".\",\".\",\"2\",\"8\",\".\"]\n       ,[\".\",\".\",\".\",\"4\",\"1\",\"9\",\".\",\".\",\"5\"]\n       ,[\".\",\".\",\".\",\".\",\"8\",\".\",\".\",\"7\",\"9\"]]\n        Output: false\n        Explanation: Same as Example 1, except with the 5 in the top left corner being modified to 8. Since there are two 8's in the top left 3x3 sub-box, it is invalid.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        # row\n        for row in board:\n            if not self.check_row(row):\n                return False\n        # column\n        for column in range(9):\n            column_list = []\n            for row in range(9):\n                column_list.append(board[row][column])\n            if not self.check_row(column_list):\n                return False\n        # sub_box\n        for i in range(9):\n            row_start = (i // 3) * 3\n            row_end = (i // 3) * 3 + 3\n            col_start = (i % 3) * 3\n            col_end = (i % 3) * 3 + 3\n            sub_box_list = []\n            for row in range(row_start, row_end):\n                for col in range(col_start, col_end):\n                    sub_box_list.append(board[row][col])\n            if not self.check_row(sub_box_list):\n                return False\n        return True\n    \n    def check_row(self, row):\n        \"\"\"\n        Check if a row has valid number\n        :param row:\n        :return:\n        \"\"\"\n        return len(set(row)) == len(row)\n        "
    },
    {
        "number": 36,
        "title": "Valid Sudoku",
        "difficulty": 1,
        "prompt": "class Solution:\n    def isValidSudoku(self, board: List[List[str]]) -> bool:\n        \"\"\"\n        Determine if a 9 x 9 Sudoku board is valid. Only the filled cells need to be validated according to the following rules:\n            Each row must contain the digits 1-9 without repetition.\n            Each column must contain the digits 1-9 without repetition.\n            Each of the nine 3 x 3 sub-boxes of the grid must contain the digits 1-9 without repetition.\n        Note:\n            A Sudoku board (partially filled) could be valid but is not necessarily solvable.\n            Only the filled cells need to be validated according to the mentioned rules.\n        Example 1:\n        Input: board = \n        [[\"5\",\"3\",\".\",\".\",\"7\",\".\",\".\",\".\",\".\"]\n       ,[\"6\",\".\",\".\",\"1\",\"9\",\"5\",\".\",\".\",\".\"]\n       ,[\".\",\"9\",\"8\",\".\",\".\",\".\",\".\",\"6\",\".\"]\n       ,[\"8\",\".\",\".\",\".\",\"6\",\".\",\".\",\".\",\"3\"]\n       ,[\"4\",\".\",\".\",\"8\",\".\",\"3\",\".\",\".\",\"1\"]\n       ,[\"7\",\".\",\".\",\".\",\"2\",\".\",\".\",\".\",\"6\"]\n       ,[\".\",\"6\",\".\",\".\",\".\",\".\",\"2\",\"8\",\".\"]\n       ,[\".\",\".\",\".\",\"4\",\"1\",\"9\",\".\",\".\",\"5\"]\n       ,[\".\",\".\",\".\",\".\",\"8\",\".\",\".\",\"7\",\"9\"]]\n        Output: true\n        Example 2:\n        Input: board = \n        [[\"8\",\"3\",\".\",\".\",\"7\",\".\",\".\",\".\",\".\"]\n       ,[\"6\",\".\",\".\",\"1\",\"9\",\"5\",\".\",\".\",\".\"]\n       ,[\".\",\"9\",\"8\",\".\",\".\",\".\",\".\",\"6\",\".\"]\n       ,[\"8\",\".\",\".\",\".\",\"6\",\".\",\".\",\".\",\"3\"]\n       ,[\"4\",\".\",\".\",\"8\",\".\",\"3\",\".\",\".\",\"1\"]\n       ,[\"7\",\".\",\".\",\".\",\"2\",\".\",\".\",\".\",\"6\"]\n       ,[\".\",\"6\",\".\",\".\",\".\",\".\",\"2\",\"8\",\".\"]\n       ,[\".\",\".\",\".\",\"4\",\"1\",\"9\",\".\",\".\",\"5\"]\n       ,[\".\",\".\",\".\",\".\",\"8\",\".\",\".\",\"7\",\"9\"]]\n        Output: false\n        Explanation: Same as Example 1, except with the 5 in the top left corner being modified to 8. Since there are two 8's in the top left 3x3 sub-box, it is invalid.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 3,
        "answer": "        rows = [{} for _ in range(9)]\n        columns = [{} for _ in range(9)]\n        boxes = [{} for _ in range(9)]"
    },
    {
        "number": 36,
        "title": "Valid Sudoku",
        "difficulty": 1,
        "prompt": "class Solution:\n    def isValidSudoku(self, board: List[List[str]]) -> bool:\n        \"\"\"\n        Determine if a 9 x 9 Sudoku board is valid. Only the filled cells need to be validated according to the following rules:\n            Each row must contain the digits 1-9 without repetition.\n            Each column must contain the digits 1-9 without repetition.\n            Each of the nine 3 x 3 sub-boxes of the grid must contain the digits 1-9 without repetition.\n        Note:\n            A Sudoku board (partially filled) could be valid but is not necessarily solvable.\n            Only the filled cells need to be validated according to the mentioned rules.\n        Example 1:\n        Input: board = \n        [[\"5\",\"3\",\".\",\".\",\"7\",\".\",\".\",\".\",\".\"]\n       ,[\"6\",\".\",\".\",\"1\",\"9\",\"5\",\".\",\".\",\".\"]\n       ,[\".\",\"9\",\"8\",\".\",\".\",\".\",\".\",\"6\",\".\"]\n       ,[\"8\",\".\",\".\",\".\",\"6\",\".\",\".\",\".\",\"3\"]\n       ,[\"4\",\".\",\".\",\"8\",\".\",\"3\",\".\",\".\",\"1\"]\n       ,[\"7\",\".\",\".\",\".\",\"2\",\".\",\".\",\".\",\"6\"]\n       ,[\".\",\"6\",\".\",\".\",\".\",\".\",\"2\",\"8\",\".\"]\n       ,[\".\",\".\",\".\",\"4\",\"1\",\"9\",\".\",\".\",\"5\"]\n       ,[\".\",\".\",\".\",\".\",\"8\",\".\",\".\",\"7\",\"9\"]]\n        Output: true\n        Example 2:\n        Input: board = \n        [[\"8\",\"3\",\".\",\".\",\"7\",\".\",\".\",\".\",\".\"]\n       ,[\"6\",\".\",\".\",\"1\",\"9\",\"5\",\".\",\".\",\".\"]\n       ,[\".\",\"9\",\"8\",\".\",\".\",\".\",\".\",\"6\",\".\"]\n       ,[\"8\",\".\",\".\",\".\",\"6\",\".\",\".\",\".\",\"3\"]\n       ,[\"4\",\".\",\".\",\"8\",\".\",\"3\",\".\",\".\",\"1\"]\n       ,[\"7\",\".\",\".\",\".\",\"2\",\".\",\".\",\".\",\"6\"]\n       ,[\".\",\"6\",\".\",\".\",\".\",\".\",\"2\",\"8\",\".\"]\n       ,[\".\",\".\",\".\",\"4\",\"1\",\"9\",\".\",\".\",\"5\"]\n       ,[\".\",\".\",\".\",\".\",\"8\",\".\",\".\",\"7\",\"9\"]]\n        Output: false\n        Explanation: Same as Example 1, except with the 5 in the top left corner being modified to 8. Since there are two 8's in the top left 3x3 sub-box, it is invalid.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 4,
        "answer": "        rows = [[] for _ in range(9)]\n        cols = [[] for _ in range(9)]\n        boxes = [[] for _ in range(9)]\n        for i in range(9):\n            for j in range(9):\n                num = board[i][j]\n                if num!= '.':\n                    k = (i // 3) * 3 + j // 3\n                    num = int(num)\n                    if num not in rows[i] and num not in cols[j] and num not in boxes[k]:\n                        rows[i].append(num)\n                        cols[j].append(num)\n                        boxes[k].append(num)\n                    else:\n                        return False\n        return True"
    },
    {
        "number": 36,
        "title": "Valid Sudoku",
        "difficulty": 1,
        "prompt": "class Solution:\n    def isValidSudoku(self, board: List[List[str]]) -> bool:\n        \"\"\"\n        Determine if a 9 x 9 Sudoku board is valid. Only the filled cells need to be validated according to the following rules:\n            Each row must contain the digits 1-9 without repetition.\n            Each column must contain the digits 1-9 without repetition.\n            Each of the nine 3 x 3 sub-boxes of the grid must contain the digits 1-9 without repetition.\n        Note:\n            A Sudoku board (partially filled) could be valid but is not necessarily solvable.\n            Only the filled cells need to be validated according to the mentioned rules.\n        Example 1:\n        Input: board = \n        [[\"5\",\"3\",\".\",\".\",\"7\",\".\",\".\",\".\",\".\"]\n       ,[\"6\",\".\",\".\",\"1\",\"9\",\"5\",\".\",\".\",\".\"]\n       ,[\".\",\"9\",\"8\",\".\",\".\",\".\",\".\",\"6\",\".\"]\n       ,[\"8\",\".\",\".\",\".\",\"6\",\".\",\".\",\".\",\"3\"]\n       ,[\"4\",\".\",\".\",\"8\",\".\",\"3\",\".\",\".\",\"1\"]\n       ,[\"7\",\".\",\".\",\".\",\"2\",\".\",\".\",\".\",\"6\"]\n       ,[\".\",\"6\",\".\",\".\",\".\",\".\",\"2\",\"8\",\".\"]\n       ,[\".\",\".\",\".\",\"4\",\"1\",\"9\",\".\",\".\",\"5\"]\n       ,[\".\",\".\",\".\",\".\",\"8\",\".\",\".\",\"7\",\"9\"]]\n        Output: true\n        Example 2:\n        Input: board = \n        [[\"8\",\"3\",\".\",\".\",\"7\",\".\",\".\",\".\",\".\"]\n       ,[\"6\",\".\",\".\",\"1\",\"9\",\"5\",\".\",\".\",\".\"]\n       ,[\".\",\"9\",\"8\",\".\",\".\",\".\",\".\",\"6\",\".\"]\n       ,[\"8\",\".\",\".\",\".\",\"6\",\".\",\".\",\".\",\"3\"]\n       ,[\"4\",\".\",\".\",\"8\",\".\",\"3\",\".\",\".\",\"1\"]\n       ,[\"7\",\".\",\".\",\".\",\"2\",\".\",\".\",\".\",\"6\"]\n       ,[\".\",\"6\",\".\",\".\",\".\",\".\",\"2\",\"8\",\".\"]\n       ,[\".\",\".\",\".\",\"4\",\"1\",\"9\",\".\",\".\",\"5\"]\n       ,[\".\",\".\",\".\",\".\",\"8\",\".\",\".\",\"7\",\"9\"]]\n        Output: false\n        Explanation: Same as Example 1, except with the 5 in the top left corner being modified to 8. Since there are two 8's in the top left 3x3 sub-box, it is invalid.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 5,
        "answer": "        # Solution 1: 56 ms\n        for row in range(9):\n            for col in range(9):\n                if board[row][col] == '.': continue\n                box = (row // 3) * 3 + col // 3\n                if board[row].count(board[row][col]) > 1 \\\n                or board[col].count(board[row][col]) > 1 \\\n                or [board[i][col] for i in range(box * 3, box * 3 + 3)].count(board[row][col]) > 1:\n                    return False\n        return True"
    },
    {
        "number": 37,
        "title": "Sudoku Solver",
        "difficulty": 2,
        "prompt": "class Solution:\n    def solveSudoku(self, board: List[List[str]]) -> None:\n        \"\"\"\n        Do not return anything, modify board in-place instead.\n        Write a program to solve a Sudoku puzzle by filling the empty cells.\n        A sudoku solution must satisfy all of the following rules:\n            Each of the digits 1-9 must occur exactly once in each row.\n            Each of the digits 1-9 must occur exactly once in each column.\n            Each of the digits 1-9 must occur exactly once in each of the 9 3x3 sub-boxes of the grid.\n        The '.' character indicates empty cells.\n        Example 1:\n        Input: board = [[\"5\",\"3\",\".\",\".\",\"7\",\".\",\".\",\".\",\".\"],[\"6\",\".\",\".\",\"1\",\"9\",\"5\",\".\",\".\",\".\"],[\".\",\"9\",\"8\",\".\",\".\",\".\",\".\",\"6\",\".\"],[\"8\",\".\",\".\",\".\",\"6\",\".\",\".\",\".\",\"3\"],[\"4\",\".\",\".\",\"8\",\".\",\"3\",\".\",\".\",\"1\"],[\"7\",\".\",\".\",\".\",\"2\",\".\",\".\",\".\",\"6\"],[\".\",\"6\",\".\",\".\",\".\",\".\",\"2\",\"8\",\".\"],[\".\",\".\",\".\",\"4\",\"1\",\"9\",\".\",\".\",\"5\"],[\".\",\".\",\".\",\".\",\"8\",\".\",\".\",\"7\",\"9\"]]\n        Output: [[\"5\",\"3\",\"4\",\"6\",\"7\",\"8\",\"9\",\"1\",\"2\"],[\"6\",\"7\",\"2\",\"1\",\"9\",\"5\",\"3\",\"4\",\"8\"],[\"1\",\"9\",\"8\",\"3\",\"4\",\"2\",\"5\",\"6\",\"7\"],[\"8\",\"5\",\"9\",\"7\",\"6\",\"1\",\"4\",\"2\",\"3\"],[\"4\",\"2\",\"6\",\"8\",\"5\",\"3\",\"7\",\"9\",\"1\"],[\"7\",\"1\",\"3\",\"9\",\"2\",\"4\",\"8\",\"5\",\"6\"],[\"9\",\"6\",\"1\",\"5\",\"3\",\"7\",\"2\",\"8\",\"4\"],[\"2\",\"8\",\"7\",\"4\",\"1\",\"9\",\"6\",\"3\",\"5\"],[\"3\",\"4\",\"5\",\"2\",\"8\",\"6\",\"1\",\"7\",\"9\"]]\n        Explanation: The input board is shown above and the only valid solution is shown below:\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        def dfs(board):\n            for r in range(9):\n                for c in range(9):\n                    if board[r][c] == '.':\n                        for v in '123456789':\n                            if is_valid(r, c, v, board):\n                                board[r][c] = v\n                                if dfs(board):\n                                    return True\n                                else:\n                                    board[r][c] = '.'\n                        return False\n            return True"
    },
    {
        "number": 37,
        "title": "Sudoku Solver",
        "difficulty": 2,
        "prompt": "class Solution:\n    def solveSudoku(self, board: List[List[str]]) -> None:\n        \"\"\"\n        Do not return anything, modify board in-place instead.\n        Write a program to solve a Sudoku puzzle by filling the empty cells.\n        A sudoku solution must satisfy all of the following rules:\n            Each of the digits 1-9 must occur exactly once in each row.\n            Each of the digits 1-9 must occur exactly once in each column.\n            Each of the digits 1-9 must occur exactly once in each of the 9 3x3 sub-boxes of the grid.\n        The '.' character indicates empty cells.\n        Example 1:\n        Input: board = [[\"5\",\"3\",\".\",\".\",\"7\",\".\",\".\",\".\",\".\"],[\"6\",\".\",\".\",\"1\",\"9\",\"5\",\".\",\".\",\".\"],[\".\",\"9\",\"8\",\".\",\".\",\".\",\".\",\"6\",\".\"],[\"8\",\".\",\".\",\".\",\"6\",\".\",\".\",\".\",\"3\"],[\"4\",\".\",\".\",\"8\",\".\",\"3\",\".\",\".\",\"1\"],[\"7\",\".\",\".\",\".\",\"2\",\".\",\".\",\".\",\"6\"],[\".\",\"6\",\".\",\".\",\".\",\".\",\"2\",\"8\",\".\"],[\".\",\".\",\".\",\"4\",\"1\",\"9\",\".\",\".\",\"5\"],[\".\",\".\",\".\",\".\",\"8\",\".\",\".\",\"7\",\"9\"]]\n        Output: [[\"5\",\"3\",\"4\",\"6\",\"7\",\"8\",\"9\",\"1\",\"2\"],[\"6\",\"7\",\"2\",\"1\",\"9\",\"5\",\"3\",\"4\",\"8\"],[\"1\",\"9\",\"8\",\"3\",\"4\",\"2\",\"5\",\"6\",\"7\"],[\"8\",\"5\",\"9\",\"7\",\"6\",\"1\",\"4\",\"2\",\"3\"],[\"4\",\"2\",\"6\",\"8\",\"5\",\"3\",\"7\",\"9\",\"1\"],[\"7\",\"1\",\"3\",\"9\",\"2\",\"4\",\"8\",\"5\",\"6\"],[\"9\",\"6\",\"1\",\"5\",\"3\",\"7\",\"2\",\"8\",\"4\"],[\"2\",\"8\",\"7\",\"4\",\"1\",\"9\",\"6\",\"3\",\"5\"],[\"3\",\"4\",\"5\",\"2\",\"8\",\"6\",\"1\",\"7\",\"9\"]]\n        Explanation: The input board is shown above and the only valid solution is shown below:\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        self.solve(board)"
    },
    {
        "number": 37,
        "title": "Sudoku Solver",
        "difficulty": 2,
        "prompt": "class Solution:\n    def solveSudoku(self, board: List[List[str]]) -> None:\n        \"\"\"\n        Do not return anything, modify board in-place instead.\n        Write a program to solve a Sudoku puzzle by filling the empty cells.\n        A sudoku solution must satisfy all of the following rules:\n            Each of the digits 1-9 must occur exactly once in each row.\n            Each of the digits 1-9 must occur exactly once in each column.\n            Each of the digits 1-9 must occur exactly once in each of the 9 3x3 sub-boxes of the grid.\n        The '.' character indicates empty cells.\n        Example 1:\n        Input: board = [[\"5\",\"3\",\".\",\".\",\"7\",\".\",\".\",\".\",\".\"],[\"6\",\".\",\".\",\"1\",\"9\",\"5\",\".\",\".\",\".\"],[\".\",\"9\",\"8\",\".\",\".\",\".\",\".\",\"6\",\".\"],[\"8\",\".\",\".\",\".\",\"6\",\".\",\".\",\".\",\"3\"],[\"4\",\".\",\".\",\"8\",\".\",\"3\",\".\",\".\",\"1\"],[\"7\",\".\",\".\",\".\",\"2\",\".\",\".\",\".\",\"6\"],[\".\",\"6\",\".\",\".\",\".\",\".\",\"2\",\"8\",\".\"],[\".\",\".\",\".\",\"4\",\"1\",\"9\",\".\",\".\",\"5\"],[\".\",\".\",\".\",\".\",\"8\",\".\",\".\",\"7\",\"9\"]]\n        Output: [[\"5\",\"3\",\"4\",\"6\",\"7\",\"8\",\"9\",\"1\",\"2\"],[\"6\",\"7\",\"2\",\"1\",\"9\",\"5\",\"3\",\"4\",\"8\"],[\"1\",\"9\",\"8\",\"3\",\"4\",\"2\",\"5\",\"6\",\"7\"],[\"8\",\"5\",\"9\",\"7\",\"6\",\"1\",\"4\",\"2\",\"3\"],[\"4\",\"2\",\"6\",\"8\",\"5\",\"3\",\"7\",\"9\",\"1\"],[\"7\",\"1\",\"3\",\"9\",\"2\",\"4\",\"8\",\"5\",\"6\"],[\"9\",\"6\",\"1\",\"5\",\"3\",\"7\",\"2\",\"8\",\"4\"],[\"2\",\"8\",\"7\",\"4\",\"1\",\"9\",\"6\",\"3\",\"5\"],[\"3\",\"4\",\"5\",\"2\",\"8\",\"6\",\"1\",\"7\",\"9\"]]\n        Explanation: The input board is shown above and the only valid solution is shown below:\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 3,
        "answer": "        def could_place(d, row, col):\n            \"\"\"\n            Check if one could place a number d in (row, col) cell\n            \"\"\"\n            return not (d in rows[row] or d in columns[col] or \\\n                    d in boxes[box_index(row, col)])"
    },
    {
        "number": 37,
        "title": "Sudoku Solver",
        "difficulty": 2,
        "prompt": "class Solution:\n    def solveSudoku(self, board: List[List[str]]) -> None:\n        \"\"\"\n        Do not return anything, modify board in-place instead.\n        Write a program to solve a Sudoku puzzle by filling the empty cells.\n        A sudoku solution must satisfy all of the following rules:\n            Each of the digits 1-9 must occur exactly once in each row.\n            Each of the digits 1-9 must occur exactly once in each column.\n            Each of the digits 1-9 must occur exactly once in each of the 9 3x3 sub-boxes of the grid.\n        The '.' character indicates empty cells.\n        Example 1:\n        Input: board = [[\"5\",\"3\",\".\",\".\",\"7\",\".\",\".\",\".\",\".\"],[\"6\",\".\",\".\",\"1\",\"9\",\"5\",\".\",\".\",\".\"],[\".\",\"9\",\"8\",\".\",\".\",\".\",\".\",\"6\",\".\"],[\"8\",\".\",\".\",\".\",\"6\",\".\",\".\",\".\",\"3\"],[\"4\",\".\",\".\",\"8\",\".\",\"3\",\".\",\".\",\"1\"],[\"7\",\".\",\".\",\".\",\"2\",\".\",\".\",\".\",\"6\"],[\".\",\"6\",\".\",\".\",\".\",\".\",\"2\",\"8\",\".\"],[\".\",\".\",\".\",\"4\",\"1\",\"9\",\".\",\".\",\"5\"],[\".\",\".\",\".\",\".\",\"8\",\".\",\".\",\"7\",\"9\"]]\n        Output: [[\"5\",\"3\",\"4\",\"6\",\"7\",\"8\",\"9\",\"1\",\"2\"],[\"6\",\"7\",\"2\",\"1\",\"9\",\"5\",\"3\",\"4\",\"8\"],[\"1\",\"9\",\"8\",\"3\",\"4\",\"2\",\"5\",\"6\",\"7\"],[\"8\",\"5\",\"9\",\"7\",\"6\",\"1\",\"4\",\"2\",\"3\"],[\"4\",\"2\",\"6\",\"8\",\"5\",\"3\",\"7\",\"9\",\"1\"],[\"7\",\"1\",\"3\",\"9\",\"2\",\"4\",\"8\",\"5\",\"6\"],[\"9\",\"6\",\"1\",\"5\",\"3\",\"7\",\"2\",\"8\",\"4\"],[\"2\",\"8\",\"7\",\"4\",\"1\",\"9\",\"6\",\"3\",\"5\"],[\"3\",\"4\",\"5\",\"2\",\"8\",\"6\",\"1\",\"7\",\"9\"]]\n        Explanation: The input board is shown above and the only valid solution is shown below:\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 4,
        "answer": "        #Backtracking\n        def is_valid(board, x, y, val):\n            #Row\n            for i in range(9):\n                if board[x][i] == val:\n                    return False\n            #Col\n            for j in range(9):\n                if board[j][y] == val:\n                    return False\n            #Sub-Box\n            sub_x = x // 3\n            sub_y = y // 3\n            for i in range(sub_x*3, sub_x*3+3):\n                for j in range(sub_y*3, sub_y*3+3):\n                    if board[i][j] == val:\n                        return False\n            return True"
    },
    {
        "number": 37,
        "title": "Sudoku Solver",
        "difficulty": 2,
        "prompt": "class Solution:\n    def solveSudoku(self, board: List[List[str]]) -> None:\n        \"\"\"\n        Do not return anything, modify board in-place instead.\n        Write a program to solve a Sudoku puzzle by filling the empty cells.\n        A sudoku solution must satisfy all of the following rules:\n            Each of the digits 1-9 must occur exactly once in each row.\n            Each of the digits 1-9 must occur exactly once in each column.\n            Each of the digits 1-9 must occur exactly once in each of the 9 3x3 sub-boxes of the grid.\n        The '.' character indicates empty cells.\n        Example 1:\n        Input: board = [[\"5\",\"3\",\".\",\".\",\"7\",\".\",\".\",\".\",\".\"],[\"6\",\".\",\".\",\"1\",\"9\",\"5\",\".\",\".\",\".\"],[\".\",\"9\",\"8\",\".\",\".\",\".\",\".\",\"6\",\".\"],[\"8\",\".\",\".\",\".\",\"6\",\".\",\".\",\".\",\"3\"],[\"4\",\".\",\".\",\"8\",\".\",\"3\",\".\",\".\",\"1\"],[\"7\",\".\",\".\",\".\",\"2\",\".\",\".\",\".\",\"6\"],[\".\",\"6\",\".\",\".\",\".\",\".\",\"2\",\"8\",\".\"],[\".\",\".\",\".\",\"4\",\"1\",\"9\",\".\",\".\",\"5\"],[\".\",\".\",\".\",\".\",\"8\",\".\",\".\",\"7\",\"9\"]]\n        Output: [[\"5\",\"3\",\"4\",\"6\",\"7\",\"8\",\"9\",\"1\",\"2\"],[\"6\",\"7\",\"2\",\"1\",\"9\",\"5\",\"3\",\"4\",\"8\"],[\"1\",\"9\",\"8\",\"3\",\"4\",\"2\",\"5\",\"6\",\"7\"],[\"8\",\"5\",\"9\",\"7\",\"6\",\"1\",\"4\",\"2\",\"3\"],[\"4\",\"2\",\"6\",\"8\",\"5\",\"3\",\"7\",\"9\",\"1\"],[\"7\",\"1\",\"3\",\"9\",\"2\",\"4\",\"8\",\"5\",\"6\"],[\"9\",\"6\",\"1\",\"5\",\"3\",\"7\",\"2\",\"8\",\"4\"],[\"2\",\"8\",\"7\",\"4\",\"1\",\"9\",\"6\",\"3\",\"5\"],[\"3\",\"4\",\"5\",\"2\",\"8\",\"6\",\"1\",\"7\",\"9\"]]\n        Explanation: The input board is shown above and the only valid solution is shown below:\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 5,
        "answer": "        # count\n        self.rows, self.cols, self.blocks = {}, {}, {}\n        for i in range(9):\n            self.rows[i] = [0] * 9\n            self.cols[i] = [0] * 9\n            self.blocks[i] = [0] * 9"
    },
    {
        "number": 38,
        "title": "Count and Say",
        "difficulty": 1,
        "prompt": "class Solution:\n    def countAndSay(self, n: int) -> str:\n        \"\"\"\n        The count-and-say sequence is a sequence of digit strings defined by the recursive formula:\n            countAndSay(1) = \"1\"\n            countAndSay(n) is the way you would \"say\" the digit string from countAndSay(n-1), which is then converted into a different digit string.\n        To determine how you \"say\" a digit string, split it into the minimal number of substrings such that each substring contains exactly one unique digit. Then for each substring, say the number of digits, then say the digit. Finally, concatenate every said digit.\n        For example, the saying and conversion for digit string \"3322251\":\n        Given a positive integer n, return the nth term of the count-and-say sequence.\n        Example 1:\n        Input: n = 1\n        Output: \"1\"\n        Explanation: This is the base case.\n        Example 2:\n        Input: n = 4\n        Output: \"1211\"\n        Explanation:\n        countAndSay(1) = \"1\"\n        countAndSay(2) = say \"1\" = one 1 = \"11\"\n        countAndSay(3) = say \"11\" = two 1's = \"21\"\n        countAndSay(4) = say \"21\" = one 2 + one 1 = \"12\" + \"11\" = \"1211\"\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        # Base Case\n        if n == 1:\n            return \"1\"\n        # Starting with the second term\n        if n == 2:\n            return \"11\"\n        # For the third term\n        if n == 3:\n            return \"21\""
    },
    {
        "number": 38,
        "title": "Count and Say",
        "difficulty": 1,
        "prompt": "class Solution:\n    def countAndSay(self, n: int) -> str:\n        \"\"\"\n        The count-and-say sequence is a sequence of digit strings defined by the recursive formula:\n            countAndSay(1) = \"1\"\n            countAndSay(n) is the way you would \"say\" the digit string from countAndSay(n-1), which is then converted into a different digit string.\n        To determine how you \"say\" a digit string, split it into the minimal number of substrings such that each substring contains exactly one unique digit. Then for each substring, say the number of digits, then say the digit. Finally, concatenate every said digit.\n        For example, the saying and conversion for digit string \"3322251\":\n        Given a positive integer n, return the nth term of the count-and-say sequence.\n        Example 1:\n        Input: n = 1\n        Output: \"1\"\n        Explanation: This is the base case.\n        Example 2:\n        Input: n = 4\n        Output: \"1211\"\n        Explanation:\n        countAndSay(1) = \"1\"\n        countAndSay(2) = say \"1\" = one 1 = \"11\"\n        countAndSay(3) = say \"11\" = two 1's = \"21\"\n        countAndSay(4) = say \"21\" = one 2 + one 1 = \"12\" + \"11\" = \"1211\"\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        if n == 1:\n            return '1'"
    },
    {
        "number": 38,
        "title": "Count and Say",
        "difficulty": 1,
        "prompt": "class Solution:\n    def countAndSay(self, n: int) -> str:\n        \"\"\"\n        The count-and-say sequence is a sequence of digit strings defined by the recursive formula:\n            countAndSay(1) = \"1\"\n            countAndSay(n) is the way you would \"say\" the digit string from countAndSay(n-1), which is then converted into a different digit string.\n        To determine how you \"say\" a digit string, split it into the minimal number of substrings such that each substring contains exactly one unique digit. Then for each substring, say the number of digits, then say the digit. Finally, concatenate every said digit.\n        For example, the saying and conversion for digit string \"3322251\":\n        Given a positive integer n, return the nth term of the count-and-say sequence.\n        Example 1:\n        Input: n = 1\n        Output: \"1\"\n        Explanation: This is the base case.\n        Example 2:\n        Input: n = 4\n        Output: \"1211\"\n        Explanation:\n        countAndSay(1) = \"1\"\n        countAndSay(2) = say \"1\" = one 1 = \"11\"\n        countAndSay(3) = say \"11\" = two 1's = \"21\"\n        countAndSay(4) = say \"21\" = one 2 + one 1 = \"12\" + \"11\" = \"1211\"\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 3,
        "answer": "        if n == 1:\n            return \"1\"\n        else:\n            prev = self.countAndSay(n-1)\n            res = ''\n            count = 1\n            for i in range(len(prev)-1):\n                if prev[i] == prev[i+1]:\n                    count += 1\n                else:\n                    res += str(count)\n                    res += prev[i]\n                    count = 1\n            res += str(count)\n            res += prev[-1]\n            return res"
    },
    {
        "number": 38,
        "title": "Count and Say",
        "difficulty": 1,
        "prompt": "class Solution:\n    def countAndSay(self, n: int) -> str:\n        \"\"\"\n        The count-and-say sequence is a sequence of digit strings defined by the recursive formula:\n            countAndSay(1) = \"1\"\n            countAndSay(n) is the way you would \"say\" the digit string from countAndSay(n-1), which is then converted into a different digit string.\n        To determine how you \"say\" a digit string, split it into the minimal number of substrings such that each substring contains exactly one unique digit. Then for each substring, say the number of digits, then say the digit. Finally, concatenate every said digit.\n        For example, the saying and conversion for digit string \"3322251\":\n        Given a positive integer n, return the nth term of the count-and-say sequence.\n        Example 1:\n        Input: n = 1\n        Output: \"1\"\n        Explanation: This is the base case.\n        Example 2:\n        Input: n = 4\n        Output: \"1211\"\n        Explanation:\n        countAndSay(1) = \"1\"\n        countAndSay(2) = say \"1\" = one 1 = \"11\"\n        countAndSay(3) = say \"11\" = two 1's = \"21\"\n        countAndSay(4) = say \"21\" = one 2 + one 1 = \"12\" + \"11\" = \"1211\"\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 4,
        "answer": "        # base case\n        if n == 1: return '1'\n        # recursive step\n        else:\n            s = self.countAndSay(n - 1)\n            # find the length of the latest string\n            # create a list of string length\n            s_len = 1\n            s_lst = [s[0]]\n            # iterate through each number in the string\n            for i in range(1, len(s)):\n                # if the current number is not the same as the last\n                # increment the list size and add the current number to the list\n                if s[i]!= s[i - 1]:\n                    s_lst.append(s[i])\n                    s_len += 1\n                # if the current number is the same as the last\n                # add the length of the list to the current number\n                else:\n                    s_lst[-1] += str(s_len)\n                    s_lst.append(s[i])\n            # join the list to create a string\n            return ''.join(s_lst)"
    },
    {
        "number": 38,
        "title": "Count and Say",
        "difficulty": 1,
        "prompt": "class Solution:\n    def countAndSay(self, n: int) -> str:\n        \"\"\"\n        The count-and-say sequence is a sequence of digit strings defined by the recursive formula:\n            countAndSay(1) = \"1\"\n            countAndSay(n) is the way you would \"say\" the digit string from countAndSay(n-1), which is then converted into a different digit string.\n        To determine how you \"say\" a digit string, split it into the minimal number of substrings such that each substring contains exactly one unique digit. Then for each substring, say the number of digits, then say the digit. Finally, concatenate every said digit.\n        For example, the saying and conversion for digit string \"3322251\":\n        Given a positive integer n, return the nth term of the count-and-say sequence.\n        Example 1:\n        Input: n = 1\n        Output: \"1\"\n        Explanation: This is the base case.\n        Example 2:\n        Input: n = 4\n        Output: \"1211\"\n        Explanation:\n        countAndSay(1) = \"1\"\n        countAndSay(2) = say \"1\" = one 1 = \"11\"\n        countAndSay(3) = say \"11\" = two 1's = \"21\"\n        countAndSay(4) = say \"21\" = one 2 + one 1 = \"12\" + \"11\" = \"1211\"\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 5,
        "answer": "        if n == 1:\n            return '1'\n        return self.count_and_say(n, self.count_and_say(n-1))"
    },
    {
        "number": 39,
        "title": "Combination Sum",
        "difficulty": 1,
        "prompt": "class Solution:\n    def combinationSum(self, candidates: List[int], target: int) -> List[List[int]]:\n        \"\"\"\n        Given an array of distinct integers candidates and a target integer target, return a list of all unique combinations of candidates where the chosen numbers sum to target. You may return the combinations in any order.\n        The same number may be chosen from candidates an unlimited number of times. Two combinations are unique if the frequency of at least one of the chosen numbers is different.\n        The test cases are generated such that the number of unique combinations that sum up to target is less than 150 combinations for the given input.\n        Example 1:\n        Input: candidates = [2,3,6,7], target = 7\n        Output: [[2,2,3],[7]]\n        Explanation:\n        2 and 3 are candidates, and 2 + 2 + 3 = 7. Note that 2 can be used multiple times.\n        7 is a candidate, and 7 = 7.\n        These are the only two combinations.\n        Example 2:\n        Input: candidates = [2,3,5], target = 8\n        Output: [[2,2,2,2],[2,3,3],[3,5]]\n        Example 3:\n        Input: candidates = [2], target = 1\n        Output: []\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        res = []\n        candidates.sort()\n        self.helper(candidates, target, 0, [], res)\n        return res"
    },
    {
        "number": 39,
        "title": "Combination Sum",
        "difficulty": 1,
        "prompt": "class Solution:\n    def combinationSum(self, candidates: List[int], target: int) -> List[List[int]]:\n        \"\"\"\n        Given an array of distinct integers candidates and a target integer target, return a list of all unique combinations of candidates where the chosen numbers sum to target. You may return the combinations in any order.\n        The same number may be chosen from candidates an unlimited number of times. Two combinations are unique if the frequency of at least one of the chosen numbers is different.\n        The test cases are generated such that the number of unique combinations that sum up to target is less than 150 combinations for the given input.\n        Example 1:\n        Input: candidates = [2,3,6,7], target = 7\n        Output: [[2,2,3],[7]]\n        Explanation:\n        2 and 3 are candidates, and 2 + 2 + 3 = 7. Note that 2 can be used multiple times.\n        7 is a candidate, and 7 = 7.\n        These are the only two combinations.\n        Example 2:\n        Input: candidates = [2,3,5], target = 8\n        Output: [[2,2,2,2],[2,3,3],[3,5]]\n        Example 3:\n        Input: candidates = [2], target = 1\n        Output: []\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        combos = []\n        candidates.sort()\n        self.helper(candidates, target, [], combos)\n        return combos\n    def helper(self, candidates, target, comb, combos):\n        if target == 0:\n            combos.append(list(comb))\n        if target < 0:\n            return\n        for i in range(len(candidates)):\n            comb.append(candidates[i])\n            self.helper(candidates[i:], target - candidates[i], comb, combos)\n            comb.pop()\n        \n<|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>"
    },
    {
        "number": 39,
        "title": "Combination Sum",
        "difficulty": 1,
        "prompt": "class Solution:\n    def combinationSum(self, candidates: List[int], target: int) -> List[List[int]]:\n        \"\"\"\n        Given an array of distinct integers candidates and a target integer target, return a list of all unique combinations of candidates where the chosen numbers sum to target. You may return the combinations in any order.\n        The same number may be chosen from candidates an unlimited number of times. Two combinations are unique if the frequency of at least one of the chosen numbers is different.\n        The test cases are generated such that the number of unique combinations that sum up to target is less than 150 combinations for the given input.\n        Example 1:\n        Input: candidates = [2,3,6,7], target = 7\n        Output: [[2,2,3],[7]]\n        Explanation:\n        2 and 3 are candidates, and 2 + 2 + 3 = 7. Note that 2 can be used multiple times.\n        7 is a candidate, and 7 = 7.\n        These are the only two combinations.\n        Example 2:\n        Input: candidates = [2,3,5], target = 8\n        Output: [[2,2,2,2],[2,3,3],[3,5]]\n        Example 3:\n        Input: candidates = [2], target = 1\n        Output: []\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 3,
        "answer": "        def dfs(target: int, idx: int, path: List[int]):\n            if target < 0: return\n            if target == 0:\n                ans.append(path[:])\n                return\n            for i in range(idx, len(candidates)):\n                path.append(candidates[i])\n                dfs(target - candidates[i], i, path)\n                path.pop()"
    },
    {
        "number": 39,
        "title": "Combination Sum",
        "difficulty": 1,
        "prompt": "class Solution:\n    def combinationSum(self, candidates: List[int], target: int) -> List[List[int]]:\n        \"\"\"\n        Given an array of distinct integers candidates and a target integer target, return a list of all unique combinations of candidates where the chosen numbers sum to target. You may return the combinations in any order.\n        The same number may be chosen from candidates an unlimited number of times. Two combinations are unique if the frequency of at least one of the chosen numbers is different.\n        The test cases are generated such that the number of unique combinations that sum up to target is less than 150 combinations for the given input.\n        Example 1:\n        Input: candidates = [2,3,6,7], target = 7\n        Output: [[2,2,3],[7]]\n        Explanation:\n        2 and 3 are candidates, and 2 + 2 + 3 = 7. Note that 2 can be used multiple times.\n        7 is a candidate, and 7 = 7.\n        These are the only two combinations.\n        Example 2:\n        Input: candidates = [2,3,5], target = 8\n        Output: [[2,2,2,2],[2,3,3],[3,5]]\n        Example 3:\n        Input: candidates = [2], target = 1\n        Output: []\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 4,
        "answer": "        def dfs(target, path, res, start):\n            if target == 0:\n                res.append(path[:])\n            for i in range(start, len(candidates)):\n                if target < candidates[i]:\n                    return\n                path.append(candidates[i])\n                dfs(target-candidates[i], path, res, i)\n                path.pop()\n        candidates = sorted(candidates)\n        res = []\n        dfs(target, [], res, 0)\n        return res\n<|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>"
    },
    {
        "number": 39,
        "title": "Combination Sum",
        "difficulty": 1,
        "prompt": "class Solution:\n    def combinationSum(self, candidates: List[int], target: int) -> List[List[int]]:\n        \"\"\"\n        Given an array of distinct integers candidates and a target integer target, return a list of all unique combinations of candidates where the chosen numbers sum to target. You may return the combinations in any order.\n        The same number may be chosen from candidates an unlimited number of times. Two combinations are unique if the frequency of at least one of the chosen numbers is different.\n        The test cases are generated such that the number of unique combinations that sum up to target is less than 150 combinations for the given input.\n        Example 1:\n        Input: candidates = [2,3,6,7], target = 7\n        Output: [[2,2,3],[7]]\n        Explanation:\n        2 and 3 are candidates, and 2 + 2 + 3 = 7. Note that 2 can be used multiple times.\n        7 is a candidate, and 7 = 7.\n        These are the only two combinations.\n        Example 2:\n        Input: candidates = [2,3,5], target = 8\n        Output: [[2,2,2,2],[2,3,3],[3,5]]\n        Example 3:\n        Input: candidates = [2], target = 1\n        Output: []\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 5,
        "answer": "        \n        self.res = []\n        candidates.sort()\n        \n        self.backtrack(target, [], 0, candidates)\n        \n        return self.res\n    \n    def backtrack(self, target, curr, curr_sum, candidates):\n        if curr_sum == target:\n            self.res.append(curr)\n        else:\n            for i in range(curr_sum, len(candidates)):\n                if curr_sum + candidates[i] > target:\n                    break\n                self.backtrack(target, curr + [candidates[i]], curr_sum + candidates[i], candidates)\n        \n<|endoftext|>"
    },
    {
        "number": 40,
        "title": "Combination Sum II",
        "difficulty": 1,
        "prompt": "class Solution:\n    def combinationSum2(self, candidates: List[int], target: int) -> List[List[int]]:\n        \"\"\"\n        Given a collection of candidate numbers (candidates) and a target number (target), find all unique combinations in candidates where the candidate numbers sum to target.\n        Each number in candidates may only be used once in the combination.\n        Note: The solution set must not contain duplicate combinations.\n        Example 1:\n        Input: candidates = [10,1,2,7,6,1,5], target = 8\n        Output: \n        [\n        [1,1,6],\n        [1,2,5],\n        [1,7],\n        [2,6]\n        ]\n        Example 2:\n        Input: candidates = [2,5,2,1,2], target = 5\n        Output: \n        [\n        [1,2,2],\n        [5]\n        ]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        if not candidates:\n            return []\n        candidates.sort()\n        res = []\n        self.dfs(candidates, 0, target, [], res)\n        return res\n    \n    def dfs(self, candidates, start, target, path, res):\n        if target < 0:\n            return\n        if target == 0:\n            res.append(path)\n            return\n        for i in range(start, len(candidates)):\n            if i > start and candidates[i] == candidates[i-1]:\n                continue\n            self.dfs(candidates, i+1, target-candidates[i], path+[candidates[i]], res)<|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>"
    },
    {
        "number": 40,
        "title": "Combination Sum II",
        "difficulty": 1,
        "prompt": "class Solution:\n    def combinationSum2(self, candidates: List[int], target: int) -> List[List[int]]:\n        \"\"\"\n        Given a collection of candidate numbers (candidates) and a target number (target), find all unique combinations in candidates where the candidate numbers sum to target.\n        Each number in candidates may only be used once in the combination.\n        Note: The solution set must not contain duplicate combinations.\n        Example 1:\n        Input: candidates = [10,1,2,7,6,1,5], target = 8\n        Output: \n        [\n        [1,1,6],\n        [1,2,5],\n        [1,7],\n        [2,6]\n        ]\n        Example 2:\n        Input: candidates = [2,5,2,1,2], target = 5\n        Output: \n        [\n        [1,2,2],\n        [5]\n        ]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        candidates.sort()\n        res = []\n        self.dfs(candidates, target, 0, [], res)\n        return res\n        \n    def dfs(self, candidates, target, index, path, res):\n        if target < 0:\n            return\n        if target == 0:\n            res.append(path)\n            return \n        for i in range(index, len(candidates)):\n            if i > index and candidates[i] == candidates[i-1]:\n                continue\n            self.dfs(candidates, target-candidates[i], i+1, path+[candidates[i]], res)\n<|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>"
    },
    {
        "number": 40,
        "title": "Combination Sum II",
        "difficulty": 1,
        "prompt": "class Solution:\n    def combinationSum2(self, candidates: List[int], target: int) -> List[List[int]]:\n        \"\"\"\n        Given a collection of candidate numbers (candidates) and a target number (target), find all unique combinations in candidates where the candidate numbers sum to target.\n        Each number in candidates may only be used once in the combination.\n        Note: The solution set must not contain duplicate combinations.\n        Example 1:\n        Input: candidates = [10,1,2,7,6,1,5], target = 8\n        Output: \n        [\n        [1,1,6],\n        [1,2,5],\n        [1,7],\n        [2,6]\n        ]\n        Example 2:\n        Input: candidates = [2,5,2,1,2], target = 5\n        Output: \n        [\n        [1,2,2],\n        [5]\n        ]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 3,
        "answer": "        result = []\n        candidates.sort()\n        self.helper(candidates, target, 0, [], result)\n        return result\n    \n    def helper(self, candidates, target, start_index, current_combination, result):\n        if target == 0:\n            result.append(list(current_combination))\n        \n        if target < 0:\n            return\n        \n        for i in range(start_index, len(candidates)):\n            if i > start_index and candidates[i] == candidates[i - 1]:\n                continue\n            current_combination.append(candidates[i])\n            self.helper(candidates, target - candidates[i], i + 1, current_combination, result)\n            current_combination.pop()\n<|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>"
    },
    {
        "number": 40,
        "title": "Combination Sum II",
        "difficulty": 1,
        "prompt": "class Solution:\n    def combinationSum2(self, candidates: List[int], target: int) -> List[List[int]]:\n        \"\"\"\n        Given a collection of candidate numbers (candidates) and a target number (target), find all unique combinations in candidates where the candidate numbers sum to target.\n        Each number in candidates may only be used once in the combination.\n        Note: The solution set must not contain duplicate combinations.\n        Example 1:\n        Input: candidates = [10,1,2,7,6,1,5], target = 8\n        Output: \n        [\n        [1,1,6],\n        [1,2,5],\n        [1,7],\n        [2,6]\n        ]\n        Example 2:\n        Input: candidates = [2,5,2,1,2], target = 5\n        Output: \n        [\n        [1,2,2],\n        [5]\n        ]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 4,
        "answer": "        \n        # -----------------------------------\n        #     Backtracking\n        # -----------------------------------\n        # time complexity: O(2^n)\n        # space complexity: O(n)\n        # -----------------------------------\n        \n        if not candidates:\n            return []\n        if target == 0:\n            return [[]]\n        \n        self.result = []\n        self.backtracking(candidates, target, [], 0)\n        return self.result\n    \n    def backtracking(self, candidates: List[int], target: int, subset: List[int], index: int) -> None:\n        if target == 0:\n            self.result.append(subset.copy())\n            return\n        \n        if target < 0:\n            return\n        \n        for i in range(index, len(candidates)):\n            subset.append(candidates[i])\n            self.backtracking(candidates, target - candidates[i], subset, i)\n            subset.pop()\n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n"
    },
    {
        "number": 40,
        "title": "Combination Sum II",
        "difficulty": 1,
        "prompt": "class Solution:\n    def combinationSum2(self, candidates: List[int], target: int) -> List[List[int]]:\n        \"\"\"\n        Given a collection of candidate numbers (candidates) and a target number (target), find all unique combinations in candidates where the candidate numbers sum to target.\n        Each number in candidates may only be used once in the combination.\n        Note: The solution set must not contain duplicate combinations.\n        Example 1:\n        Input: candidates = [10,1,2,7,6,1,5], target = 8\n        Output: \n        [\n        [1,1,6],\n        [1,2,5],\n        [1,7],\n        [2,6]\n        ]\n        Example 2:\n        Input: candidates = [2,5,2,1,2], target = 5\n        Output: \n        [\n        [1,2,2],\n        [5]\n        ]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 5,
        "answer": "        if not candidates:\n            return []"
    },
    {
        "number": 41,
        "title": "First Missing Positive",
        "difficulty": 2,
        "prompt": "class Solution:\n    def firstMissingPositive(self, nums: List[int]) -> int:\n        \"\"\"\n        Given an unsorted integer array nums, return the smallest missing positive integer.\n        You must implement an algorithm that runs in O(n) time and uses constant extra space.\n        Example 1:\n        Input: nums = [1,2,0]\n        Output: 3\n        Explanation: The numbers in the range [1,2] are all in the array.\n        Example 2:\n        Input: nums = [3,4,-1,1]\n        Output: 2\n        Explanation: 1 is in the array but 2 is missing.\n        Example 3:\n        Input: nums = [7,8,9,11,12]\n        Output: 1\n        Explanation: The smallest positive integer 1 is missing.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        # use the absolute value of number as index\n        for i in range(len(nums)):\n            if abs(nums[i]) >= len(nums):\n                nums[abs(nums[i]) % len(nums)] = - abs(nums[abs(nums[i]) % len(nums)])\n        for i in range(1, len(nums)):\n            if nums[i] > 0:\n                return i\n        return len(nums)"
    },
    {
        "number": 41,
        "title": "First Missing Positive",
        "difficulty": 2,
        "prompt": "class Solution:\n    def firstMissingPositive(self, nums: List[int]) -> int:\n        \"\"\"\n        Given an unsorted integer array nums, return the smallest missing positive integer.\n        You must implement an algorithm that runs in O(n) time and uses constant extra space.\n        Example 1:\n        Input: nums = [1,2,0]\n        Output: 3\n        Explanation: The numbers in the range [1,2] are all in the array.\n        Example 2:\n        Input: nums = [3,4,-1,1]\n        Output: 2\n        Explanation: 1 is in the array but 2 is missing.\n        Example 3:\n        Input: nums = [7,8,9,11,12]\n        Output: 1\n        Explanation: The smallest positive integer 1 is missing.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        # 3, 4, -1, 1\n        # [1, 2, 0, 3]\n        # [1, 2, 3]\n        # [1, 2, 3, 4]\n        # [1, 2, 3, 4, 5]\n        # [1, 2, 3, 4, 5, 6]\n        # [1, 2, 3, 4, 5, 6, 7]\n        # [1, 2, 3, 4, 5, 6, 7, 8]\n        # [1, 2, 3, 4, 5, 6, 7, 8, 9]\n        # [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n        # [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]\n        # [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\n        # 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12\n        # 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13"
    },
    {
        "number": 41,
        "title": "First Missing Positive",
        "difficulty": 2,
        "prompt": "class Solution:\n    def firstMissingPositive(self, nums: List[int]) -> int:\n        \"\"\"\n        Given an unsorted integer array nums, return the smallest missing positive integer.\n        You must implement an algorithm that runs in O(n) time and uses constant extra space.\n        Example 1:\n        Input: nums = [1,2,0]\n        Output: 3\n        Explanation: The numbers in the range [1,2] are all in the array.\n        Example 2:\n        Input: nums = [3,4,-1,1]\n        Output: 2\n        Explanation: 1 is in the array but 2 is missing.\n        Example 3:\n        Input: nums = [7,8,9,11,12]\n        Output: 1\n        Explanation: The smallest positive integer 1 is missing.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 3,
        "answer": "        # \u626b\u63cf\u6570\u7ec4\uff0c\u5982\u679c\u5f53\u524d\u6570\u5b57\u6b63\u786e\uff0c\u5219\u8df3\u8fc7\uff0c\u5982\u679c\u5f53\u524d\u6570\u5b57\u4e0d\u6b63\u786e\uff0c\u5219\u66f4\u65b0\u7ed3\u679c\u548c\u6700\u5c0f\u6b63\u6570\u3002\n        # \u5982\u679c\u6700\u5c0f\u6b63\u6570\u7b49\u4e8e\u6570\u7ec4\u7684\u957f\u5ea6\uff0c\u5219\u8fd4\u56de1\uff0c\u5426\u5219\u8fd4\u56de\u6700\u5c0f\u6b63\u6570+1\u3002\n        # \u7ecf\u8fc7\u4e0a\u9762\u7684\u4e24\u4e2a\u6b65\u9aa4\uff0c\u6240\u6709\u6b63\u6570\u90fd\u5df2\u7ecf\u88ab\u626b\u63cf\u8fc7\u4e00\u6b21\uff0c\u6240\u6709\u7f3a\u5931\u7684\u6570\u5b57\u7f16\u53f7\u90fd\u5728\u6700\u5c0f\u6b63\u6570+1\u4e4b\u540e\uff0c\u6240\u4ee5\u6b63\u786e\u7684\u6570\u5b57\u90fd\u57280~\u6700\u5c0f\u6b63\u6570-1\u4e4b\u95f4\u3002\n        # \u6700\u5c0f\u6b63\u6570"
    },
    {
        "number": 41,
        "title": "First Missing Positive",
        "difficulty": 2,
        "prompt": "class Solution:\n    def firstMissingPositive(self, nums: List[int]) -> int:\n        \"\"\"\n        Given an unsorted integer array nums, return the smallest missing positive integer.\n        You must implement an algorithm that runs in O(n) time and uses constant extra space.\n        Example 1:\n        Input: nums = [1,2,0]\n        Output: 3\n        Explanation: The numbers in the range [1,2] are all in the array.\n        Example 2:\n        Input: nums = [3,4,-1,1]\n        Output: 2\n        Explanation: 1 is in the array but 2 is missing.\n        Example 3:\n        Input: nums = [7,8,9,11,12]\n        Output: 1\n        Explanation: The smallest positive integer 1 is missing.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 4,
        "answer": "        # sort the array, if duplicate, return the first one\n        # if the first one is smaller than 1, return 1, if bigger than 1, return first one\n        nums.sort()\n        if len(nums) < 1:\n            return 1\n        if nums[0] > 1:\n            return 1\n        # if the length of nums < 1, then return the first one\n        if len(nums) < 2:\n            return nums[0] + 1\n        for i in range(0, len(nums)):\n            if nums[i] <= 0:\n                continue\n            if nums[i] < len(nums) + 1:\n                if nums[i]!= nums[nums[i] - 1]:\n                    # return nums[i]\n                    nums[nums[i] - 1] = nums[i]\n                else:\n                    continue\n            else:\n                return i + 1\n        return len(nums) + 1"
    },
    {
        "number": 41,
        "title": "First Missing Positive",
        "difficulty": 2,
        "prompt": "class Solution:\n    def firstMissingPositive(self, nums: List[int]) -> int:\n        \"\"\"\n        Given an unsorted integer array nums, return the smallest missing positive integer.\n        You must implement an algorithm that runs in O(n) time and uses constant extra space.\n        Example 1:\n        Input: nums = [1,2,0]\n        Output: 3\n        Explanation: The numbers in the range [1,2] are all in the array.\n        Example 2:\n        Input: nums = [3,4,-1,1]\n        Output: 2\n        Explanation: 1 is in the array but 2 is missing.\n        Example 3:\n        Input: nums = [7,8,9,11,12]\n        Output: 1\n        Explanation: The smallest positive integer 1 is missing.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 5,
        "answer": "        # check if length is 1\n        if len(nums) == 1:\n            return 1\n        # if array is empty, return 1\n        if len(nums) == 0:\n            return 1\n        # set max positive value\n        max_positive_int = 0\n        # loop through the array\n        for i in nums:\n            # check if value is positive and greater than max_positive_int\n            if i > 0 and i > max_positive_int:\n                max_positive_int = i\n        # if all values are negative, return 1\n        if max_positive_int == 0:\n            return 1\n        # set an array to store all values in the array\n        all_vals = []\n        # loop through the array\n        for i in nums:\n            # check if value is positive and greater than max_positive_int\n            if i > 0 and i > max_positive_int:\n                # skip value\n                continue\n            # check if value is not in the array\n            if i not in all_vals:\n                # add value to array\n                all_vals.append(i)\n        # sort all values in ascending order\n        all_vals.sort()\n        # set variable to store the minimum positive integer that is missing\n        missing_int = 1\n        # loop through all"
    },
    {
        "number": 42,
        "title": "Trapping Rain Water",
        "difficulty": 2,
        "prompt": "class Solution:\n    def trap(self, height: List[int]) -> int:\n        \"\"\"\n        Given n non-negative integers representing an elevation map where the width of each bar is 1, compute how much water it can trap after raining.\n        Example 1:\n        Input: height = [0,1,0,2,1,0,1,3,2,1,2,1]\n        Output: 6\n        Explanation: The above elevation map (black section) is represented by array [0,1,0,2,1,0,1,3,2,1,2,1]. In this case, 6 units of rain water (blue section) are being trapped.\n        Example 2:\n        Input: height = [4,2,0,3,2,5]\n        Output: 9\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        if len(height) == 0:\n            return 0\n        # \u5148\u5229\u7528stack, \u627e\u5230\u6bcf\u6b21\u6700\u5927\u7684\u9ad8\u5ea6\uff0c\u5e76\u7edf\u8ba1\u6bcf\u4e2a\u9ad8\u5ea6\u7684\u9762\u79ef\n        # stack: [0, 2, 3, 2, 5, 6, 6, 3, 0]\n        stack = []\n        for i in range(len(height)):\n            if len(stack) == 0 or height[i] >= height[stack[-1]]:\n                stack.append(i)\n            else:\n                j = stack.pop()\n                if len(stack) == 0:\n                    continue\n                k = stack[-1]\n                l = i\n                h = min(height[k], height[l])\n                s = h * (i - j - 1)\n                if s > self.ans:\n                    self.ans = s\n        return self.ans"
    },
    {
        "number": 42,
        "title": "Trapping Rain Water",
        "difficulty": 2,
        "prompt": "class Solution:\n    def trap(self, height: List[int]) -> int:\n        \"\"\"\n        Given n non-negative integers representing an elevation map where the width of each bar is 1, compute how much water it can trap after raining.\n        Example 1:\n        Input: height = [0,1,0,2,1,0,1,3,2,1,2,1]\n        Output: 6\n        Explanation: The above elevation map (black section) is represented by array [0,1,0,2,1,0,1,3,2,1,2,1]. In this case, 6 units of rain water (blue section) are being trapped.\n        Example 2:\n        Input: height = [4,2,0,3,2,5]\n        Output: 9\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        \n        # Approach 1: Two Pointers\n        # Time O(n)\n        # Space O(1)\n        \n        left, right = 0, len(height)-1\n        left_max, right_max = 0, 0\n        water = 0\n        \n        while left < right:\n            left_max = max(left_max, height[left])\n            right_max = max(right_max, height[right])\n            \n            if left_max <= right_max:\n                water += left_max - height[left]\n                left += 1\n            else:\n                water += right_max - height[right]\n                right -= 1\n        return water\n        \n        \n        # Approach 2: Dynamic Programming\n        # Time O(n)\n        # Space O(n)\n        \n        # if not height: return 0\n        #\n        # if len(height) < 3:\n        #     return 0\n        #\n        # ans = 0\n        # left_max = [height[0]]\n        # right_max = [height[-1]]\n        #\n        # for i in range(1, len(height)):\n        #     left_max.append(max(height[i], left_max[-1]))\n        #\n        # for j in range"
    },
    {
        "number": 42,
        "title": "Trapping Rain Water",
        "difficulty": 2,
        "prompt": "class Solution:\n    def trap(self, height: List[int]) -> int:\n        \"\"\"\n        Given n non-negative integers representing an elevation map where the width of each bar is 1, compute how much water it can trap after raining.\n        Example 1:\n        Input: height = [0,1,0,2,1,0,1,3,2,1,2,1]\n        Output: 6\n        Explanation: The above elevation map (black section) is represented by array [0,1,0,2,1,0,1,3,2,1,2,1]. In this case, 6 units of rain water (blue section) are being trapped.\n        Example 2:\n        Input: height = [4,2,0,3,2,5]\n        Output: 9\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 3,
        "answer": "        if len(height) <= 2:\n            return 0"
    },
    {
        "number": 42,
        "title": "Trapping Rain Water",
        "difficulty": 2,
        "prompt": "class Solution:\n    def trap(self, height: List[int]) -> int:\n        \"\"\"\n        Given n non-negative integers representing an elevation map where the width of each bar is 1, compute how much water it can trap after raining.\n        Example 1:\n        Input: height = [0,1,0,2,1,0,1,3,2,1,2,1]\n        Output: 6\n        Explanation: The above elevation map (black section) is represented by array [0,1,0,2,1,0,1,3,2,1,2,1]. In this case, 6 units of rain water (blue section) are being trapped.\n        Example 2:\n        Input: height = [4,2,0,3,2,5]\n        Output: 9\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 4,
        "answer": "        if not height:\n            return 0"
    },
    {
        "number": 42,
        "title": "Trapping Rain Water",
        "difficulty": 2,
        "prompt": "class Solution:\n    def trap(self, height: List[int]) -> int:\n        \"\"\"\n        Given n non-negative integers representing an elevation map where the width of each bar is 1, compute how much water it can trap after raining.\n        Example 1:\n        Input: height = [0,1,0,2,1,0,1,3,2,1,2,1]\n        Output: 6\n        Explanation: The above elevation map (black section) is represented by array [0,1,0,2,1,0,1,3,2,1,2,1]. In this case, 6 units of rain water (blue section) are being trapped.\n        Example 2:\n        Input: height = [4,2,0,3,2,5]\n        Output: 9\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 5,
        "answer": "        left_max = 0\n        right_max = 0\n        left = 0\n        right = len(height) - 1\n        left_sum = 0\n        right_sum = 0\n        while left < right:\n            if height[left] < height[right]:\n                if height[left] >= left_max:\n                    left_max = height[left]\n                else:\n                    left_sum += left_max - height[left]\n                left += 1\n            else:\n                if height[right] >= right_max:\n                    right_max = height[right]\n                else:\n                    right_sum += right_max - height[right]\n                right -= 1"
    },
    {
        "number": 43,
        "title": "Multiply Strings",
        "difficulty": 1,
        "prompt": "class Solution:\n    def multiply(self, num1: str, num2: str) -> str:\n        \"\"\"\n        Given two non-negative integers num1 and num2 represented as strings, return the product of num1 and num2, also represented as a string.\n        Note: You must not use any built-in BigInteger library or convert the inputs to integer directly.\n        Example 1:\n        Input: num1 = \"2\", num2 = \"3\"\n        Output: \"6\"\n        Example 2:\n        Input: num1 = \"123\", num2 = \"456\"\n        Output: \"56088\"\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        n1, n2 = len(num1), len(num2)\n        if n1 == 0 or n2 == 0:\n            return \"0\"\n        # multiply two numbers\n        result = [0] * (n1 + n2)\n        for i in range(n1 - 1, -1, -1):\n            for j in range(n2 - 1, -1, -1):\n                mul = (ord(num1[i]) - ord('0')) * (ord(num2[j]) - ord('0'))\n                p1, p2 = i + j, i + j + 1\n                sum = mul + result[p2]\n                result[p1] += sum // 10\n                result[p2] = sum % 10\n        # remove leading 0s\n        i = 0\n        while i < len(result) and result[i] == 0:\n            i += 1\n        return \"\".join(map(str, result[i:]))"
    },
    {
        "number": 43,
        "title": "Multiply Strings",
        "difficulty": 1,
        "prompt": "class Solution:\n    def multiply(self, num1: str, num2: str) -> str:\n        \"\"\"\n        Given two non-negative integers num1 and num2 represented as strings, return the product of num1 and num2, also represented as a string.\n        Note: You must not use any built-in BigInteger library or convert the inputs to integer directly.\n        Example 1:\n        Input: num1 = \"2\", num2 = \"3\"\n        Output: \"6\"\n        Example 2:\n        Input: num1 = \"123\", num2 = \"456\"\n        Output: \"56088\"\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        self.num1 = num1\n        self.num2 = num2\n        self.num1_len = len(num1)\n        self.num2_len = len(num2)\n        self.result = \"\"\n        self.counter = 0\n        self.longer_number = self.num1 if self.num1_len > self.num2_len else self.num2\n        self.shorter_number = self.num1 if self.num1_len < self.num2_len else self.num2"
    },
    {
        "number": 43,
        "title": "Multiply Strings",
        "difficulty": 1,
        "prompt": "class Solution:\n    def multiply(self, num1: str, num2: str) -> str:\n        \"\"\"\n        Given two non-negative integers num1 and num2 represented as strings, return the product of num1 and num2, also represented as a string.\n        Note: You must not use any built-in BigInteger library or convert the inputs to integer directly.\n        Example 1:\n        Input: num1 = \"2\", num2 = \"3\"\n        Output: \"6\"\n        Example 2:\n        Input: num1 = \"123\", num2 = \"456\"\n        Output: \"56088\"\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 3,
        "answer": "        num1 = num1[::-1]\n        num2 = num2[::-1]\n        l = len(num2)\n        res = 0\n        for i, item in enumerate(num1):\n            mul = int(item) * int(num2[i % l])\n            res += mul\n        return str(res)"
    },
    {
        "number": 43,
        "title": "Multiply Strings",
        "difficulty": 1,
        "prompt": "class Solution:\n    def multiply(self, num1: str, num2: str) -> str:\n        \"\"\"\n        Given two non-negative integers num1 and num2 represented as strings, return the product of num1 and num2, also represented as a string.\n        Note: You must not use any built-in BigInteger library or convert the inputs to integer directly.\n        Example 1:\n        Input: num1 = \"2\", num2 = \"3\"\n        Output: \"6\"\n        Example 2:\n        Input: num1 = \"123\", num2 = \"456\"\n        Output: \"56088\"\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 4,
        "answer": "        # Approach 1: Convert to integer\n        # Time: O(n) where n is the lengths of num1 and num2\n        # Space: O(1)\n        # num1 = int(num1)\n        # num2 = int(num2)\n        # if num1 == 0 or num2 == 0:\n        #     return '0'\n        # ans = ''\n        # while num1 or num2:\n        #     curr = num1 % 10 * num2 % 10\n        #     num1 = num1 // 10\n        #     num2 = num2 // 10\n        #     ans = str(curr + ans)\n        # return ans"
    },
    {
        "number": 43,
        "title": "Multiply Strings",
        "difficulty": 1,
        "prompt": "class Solution:\n    def multiply(self, num1: str, num2: str) -> str:\n        \"\"\"\n        Given two non-negative integers num1 and num2 represented as strings, return the product of num1 and num2, also represented as a string.\n        Note: You must not use any built-in BigInteger library or convert the inputs to integer directly.\n        Example 1:\n        Input: num1 = \"2\", num2 = \"3\"\n        Output: \"6\"\n        Example 2:\n        Input: num1 = \"123\", num2 = \"456\"\n        Output: \"56088\"\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 5,
        "answer": "        if num1 == \"0\" or num2 == \"0\":\n            return \"0\"\n        digit_set = {\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\"}\n        product = [0] * (len(num1) + len(num2))\n        for idx_1, num1_digit in enumerate(reversed(num1)):\n            for idx_2, num2_digit in enumerate(reversed(num2)):\n                # print(num1_digit, num2_digit)\n                product[idx_1 + idx_2] += int(num1_digit) * int(num2_digit)\n                product[idx_1 + idx_2] = str(product[idx_1 + idx_2])[-1]\n                # print(product)\n                if product[idx_1 + idx_2] in digit_set:\n                    product[idx_1 + idx_2] = str(product[idx_1 + idx_2])[-1]\n                else:\n                    product[idx_1 + idx_2] = \"0\"\n                if product[idx_1 + idx_2 +"
    },
    {
        "number": 44,
        "title": "Wildcard Matching",
        "difficulty": 2,
        "prompt": "class Solution:\n    def isMatch(self, s: str, p: str) -> bool:\n        \"\"\"\n        Given an input string (s) and a pattern (p), implement wildcard pattern matching with support for '?' and '*' where:\n            '?' Matches any single character.\n            '*' Matches any sequence of characters (including the empty sequence).\n        The matching should cover the entire input string (not partial).\n        Example 1:\n        Input: s = \"aa\", p = \"a\"\n        Output: false\n        Explanation: \"a\" does not match the entire string \"aa\".\n        Example 2:\n        Input: s = \"aa\", p = \"*\"\n        Output: true\n        Explanation: '*' matches any sequence.\n        Example 3:\n        Input: s = \"cb\", p = \"?a\"\n        Output: false\n        Explanation: '?' matches 'c', but the second letter is 'a', which does not match 'b'.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        s_len = len(s)\n        p_len = len(p)\n        i = j = 0\n        while i < s_len:\n            if p[j] in ['?', s[i]]:\n                i += 1\n                j += 1\n            elif p[j] == '*':\n                j += 1\n                i += 1\n                while j < p_len and p[j] == '*':\n                    j += 1\n            else:\n                return False\n        while j < p_len and p[j] == '*':\n            j += 1\n        return j == p_len"
    },
    {
        "number": 44,
        "title": "Wildcard Matching",
        "difficulty": 2,
        "prompt": "class Solution:\n    def isMatch(self, s: str, p: str) -> bool:\n        \"\"\"\n        Given an input string (s) and a pattern (p), implement wildcard pattern matching with support for '?' and '*' where:\n            '?' Matches any single character.\n            '*' Matches any sequence of characters (including the empty sequence).\n        The matching should cover the entire input string (not partial).\n        Example 1:\n        Input: s = \"aa\", p = \"a\"\n        Output: false\n        Explanation: \"a\" does not match the entire string \"aa\".\n        Example 2:\n        Input: s = \"aa\", p = \"*\"\n        Output: true\n        Explanation: '*' matches any sequence.\n        Example 3:\n        Input: s = \"cb\", p = \"?a\"\n        Output: false\n        Explanation: '?' matches 'c', but the second letter is 'a', which does not match 'b'.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        if len(p) == 0:\n            return len(s) == 0"
    },
    {
        "number": 44,
        "title": "Wildcard Matching",
        "difficulty": 2,
        "prompt": "class Solution:\n    def isMatch(self, s: str, p: str) -> bool:\n        \"\"\"\n        Given an input string (s) and a pattern (p), implement wildcard pattern matching with support for '?' and '*' where:\n            '?' Matches any single character.\n            '*' Matches any sequence of characters (including the empty sequence).\n        The matching should cover the entire input string (not partial).\n        Example 1:\n        Input: s = \"aa\", p = \"a\"\n        Output: false\n        Explanation: \"a\" does not match the entire string \"aa\".\n        Example 2:\n        Input: s = \"aa\", p = \"*\"\n        Output: true\n        Explanation: '*' matches any sequence.\n        Example 3:\n        Input: s = \"cb\", p = \"?a\"\n        Output: false\n        Explanation: '?' matches 'c', but the second letter is 'a', which does not match 'b'.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 3,
        "answer": "        # The DP table and the string s and p use the same indexes i and j, but\n        # table[i][j] means the match status between p[:i] and s[:j], i.e.\n        # table[0][0] means the match status of two empty strings, and\n        # table[1][1] means the match status of p[0] and s[0]. Therefore, when\n        # refering to the i-th and the j-th characters of p and s for updating\n        # table[i][j], we use p[i - 1] and s[j - 1].\n        #\n        # Let's look at the example in the description.\n        # For example, suppose we want to match \"aa\" with \"a*\", which means\n        # matching a followed by zero or more b's.\n        # We have to match a and b's in s.\n        # And in order to match a and b's in s, we may match nothing,\n        # a single a, or multiple a's.\n        # For the base case (i=0 in the loop below), we have to match nothing,\n        # so the match status is False if the corresponding char in p is a\n        # '*', and it is also False if the corresponding char in s is '?'.\n        # For"
    },
    {
        "number": 44,
        "title": "Wildcard Matching",
        "difficulty": 2,
        "prompt": "class Solution:\n    def isMatch(self, s: str, p: str) -> bool:\n        \"\"\"\n        Given an input string (s) and a pattern (p), implement wildcard pattern matching with support for '?' and '*' where:\n            '?' Matches any single character.\n            '*' Matches any sequence of characters (including the empty sequence).\n        The matching should cover the entire input string (not partial).\n        Example 1:\n        Input: s = \"aa\", p = \"a\"\n        Output: false\n        Explanation: \"a\" does not match the entire string \"aa\".\n        Example 2:\n        Input: s = \"aa\", p = \"*\"\n        Output: true\n        Explanation: '*' matches any sequence.\n        Example 3:\n        Input: s = \"cb\", p = \"?a\"\n        Output: false\n        Explanation: '?' matches 'c', but the second letter is 'a', which does not match 'b'.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 4,
        "answer": "        if not s and not p:\n            return True\n        if not s and p:\n            return False"
    },
    {
        "number": 44,
        "title": "Wildcard Matching",
        "difficulty": 2,
        "prompt": "class Solution:\n    def isMatch(self, s: str, p: str) -> bool:\n        \"\"\"\n        Given an input string (s) and a pattern (p), implement wildcard pattern matching with support for '?' and '*' where:\n            '?' Matches any single character.\n            '*' Matches any sequence of characters (including the empty sequence).\n        The matching should cover the entire input string (not partial).\n        Example 1:\n        Input: s = \"aa\", p = \"a\"\n        Output: false\n        Explanation: \"a\" does not match the entire string \"aa\".\n        Example 2:\n        Input: s = \"aa\", p = \"*\"\n        Output: true\n        Explanation: '*' matches any sequence.\n        Example 3:\n        Input: s = \"cb\", p = \"?a\"\n        Output: false\n        Explanation: '?' matches 'c', but the second letter is 'a', which does not match 'b'.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 5,
        "answer": "        s = \"aab\"\n        p = \"c*a*b\""
    },
    {
        "number": 45,
        "title": "Jump Game II",
        "difficulty": 1,
        "prompt": "class Solution:\n    def jump(self, nums: List[int]) -> int:\n        \"\"\"\n        You are given a 0-indexed array of integers nums of length n. You are initially positioned at nums[0].\n        Each element nums[i] represents the maximum length of a forward jump from index i. In other words, if you are at nums[i], you can jump to any nums[i + j] where:\n            0 <= j <= nums[i] and\n            i + j < n\n        Return the minimum number of jumps to reach nums[n - 1]. The test cases are generated such that you can reach nums[n - 1].\n        Example 1:\n        Input: nums = [2,3,1,1,4]\n        Output: 2\n        Explanation: The minimum number of jumps to reach the last index is 2. Jump 1 step from index 0 to 1, then 3 steps to the last index.\n        Example 2:\n        Input: nums = [2,3,0,1,4]\n        Output: 2\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        # Approach 1:\n        # Time O(N^2)\n        # Space O(N)\n        # dp[i] is the min number of jumps to reach i.\n        # Initialize dp with -1 for each index i\n        # dp[0] = 0\n        # dp[1] = nums[0]\n        # for i in range(2, len(nums) + 1):\n        #     if i == len(nums):\n        #         dp[i] = 0\n        #     elif i > len(nums):\n        #         dp[i] = float('inf')\n        #     else:\n        #         dp[i] = min(dp[i - 1] + 1, dp[i - nums[i - 1] - 1] + 1)\n        # return dp[len(nums)]"
    },
    {
        "number": 45,
        "title": "Jump Game II",
        "difficulty": 1,
        "prompt": "class Solution:\n    def jump(self, nums: List[int]) -> int:\n        \"\"\"\n        You are given a 0-indexed array of integers nums of length n. You are initially positioned at nums[0].\n        Each element nums[i] represents the maximum length of a forward jump from index i. In other words, if you are at nums[i], you can jump to any nums[i + j] where:\n            0 <= j <= nums[i] and\n            i + j < n\n        Return the minimum number of jumps to reach nums[n - 1]. The test cases are generated such that you can reach nums[n - 1].\n        Example 1:\n        Input: nums = [2,3,1,1,4]\n        Output: 2\n        Explanation: The minimum number of jumps to reach the last index is 2. Jump 1 step from index 0 to 1, then 3 steps to the last index.\n        Example 2:\n        Input: nums = [2,3,0,1,4]\n        Output: 2\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        n = len(nums)\n        if n == 1: return 0\n        dp = [float('inf')] * n\n        dp[0] = 0\n        for i in range(n):\n            for j in range(1, nums[i] + 1):\n                if i + j >= n: break\n                dp[i + j] = min(dp[i + j], dp[i] + 1)\n        return dp[-1]\n    \n    def jump2(self, nums: List[int]) -> int:\n        \"\"\"\n        You are given a 0-indexed array of integers nums. You are initially positioned at the first index of the array.\n        Each element in the array represents your maximum jump length at that position.\n        Your goal is to reach the last index in the minimum number of jumps.\n        Example 1:\n        Input: nums = [2,3,1,1,4]\n        Output: 2\n        Explanation: The minimum number of jumps to reach the last index is 2. Jump 1 step from index 0 to 1, then 3 steps to the last index.\n        Example 2:\n        Input: nums = [2,3,0,1,4]\n        Output: 2\n        \"\"\"\n        n = len(nums)\n        if n =="
    },
    {
        "number": 45,
        "title": "Jump Game II",
        "difficulty": 1,
        "prompt": "class Solution:\n    def jump(self, nums: List[int]) -> int:\n        \"\"\"\n        You are given a 0-indexed array of integers nums of length n. You are initially positioned at nums[0].\n        Each element nums[i] represents the maximum length of a forward jump from index i. In other words, if you are at nums[i], you can jump to any nums[i + j] where:\n            0 <= j <= nums[i] and\n            i + j < n\n        Return the minimum number of jumps to reach nums[n - 1]. The test cases are generated such that you can reach nums[n - 1].\n        Example 1:\n        Input: nums = [2,3,1,1,4]\n        Output: 2\n        Explanation: The minimum number of jumps to reach the last index is 2. Jump 1 step from index 0 to 1, then 3 steps to the last index.\n        Example 2:\n        Input: nums = [2,3,0,1,4]\n        Output: 2\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 3,
        "answer": "        jump_count = 0\n        index = 0\n        max_index = 0\n        while index < len(nums) - 1:\n            max_index = max(max_index, index + nums[index])\n            if index == max_index:\n                jump_count += 1\n                index = max_index\n            else:\n                index += 1\n        return jump_count"
    },
    {
        "number": 45,
        "title": "Jump Game II",
        "difficulty": 1,
        "prompt": "class Solution:\n    def jump(self, nums: List[int]) -> int:\n        \"\"\"\n        You are given a 0-indexed array of integers nums of length n. You are initially positioned at nums[0].\n        Each element nums[i] represents the maximum length of a forward jump from index i. In other words, if you are at nums[i], you can jump to any nums[i + j] where:\n            0 <= j <= nums[i] and\n            i + j < n\n        Return the minimum number of jumps to reach nums[n - 1]. The test cases are generated such that you can reach nums[n - 1].\n        Example 1:\n        Input: nums = [2,3,1,1,4]\n        Output: 2\n        Explanation: The minimum number of jumps to reach the last index is 2. Jump 1 step from index 0 to 1, then 3 steps to the last index.\n        Example 2:\n        Input: nums = [2,3,0,1,4]\n        Output: 2\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 4,
        "answer": "        n = len(nums)\n        # dp[i] = the minimum number of steps to reach the ith position\n        dp = [float('inf')] * n\n        dp[0] = 0"
    },
    {
        "number": 45,
        "title": "Jump Game II",
        "difficulty": 1,
        "prompt": "class Solution:\n    def jump(self, nums: List[int]) -> int:\n        \"\"\"\n        You are given a 0-indexed array of integers nums of length n. You are initially positioned at nums[0].\n        Each element nums[i] represents the maximum length of a forward jump from index i. In other words, if you are at nums[i], you can jump to any nums[i + j] where:\n            0 <= j <= nums[i] and\n            i + j < n\n        Return the minimum number of jumps to reach nums[n - 1]. The test cases are generated such that you can reach nums[n - 1].\n        Example 1:\n        Input: nums = [2,3,1,1,4]\n        Output: 2\n        Explanation: The minimum number of jumps to reach the last index is 2. Jump 1 step from index 0 to 1, then 3 steps to the last index.\n        Example 2:\n        Input: nums = [2,3,0,1,4]\n        Output: 2\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 5,
        "answer": "        # solution 1: dynamic programming\n        # time complexity o(n^2)\n        # space complexity o(n)\n        # f[i]: minimum number of jumps to nums[i]\n        n = len(nums)\n        if n < 2:\n            return 0\n        f = [float(\"inf\") for _ in range(n)]\n        f[0] = 0\n        for i in range(1, n):\n            for j in range(i):\n                if j + nums[j] >= i:\n                    f[i] = min(f[i], f[j] + 1)\n        return f[n - 1]"
    },
    {
        "number": 46,
        "title": "Permutations",
        "difficulty": 1,
        "prompt": "class Solution:\n    def permute(self, nums: List[int]) -> List[List[int]]:\n        \"\"\"\n        Given an array nums of distinct integers, return all the possible permutations. You can return the answer in any order.\n        Example 1:\n        Input: nums = [1,2,3]\n        Output: [[1,2,3],[1,3,2],[2,1,3],[2,3,1],[3,1,2],[3,2,1]]\n        Example 2:\n        Input: nums = [0,1]\n        Output: [[0,1],[1,0]]\n        Example 3:\n        Input: nums = [1]\n        Output: [[1]]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        def dfs(nums, res, path):\n            if not nums:\n                res.append(path)\n                return\n            for i in range(len(nums)):\n                dfs(nums[:i] + nums[i + 1:], res, path + [nums[i]])"
    },
    {
        "number": 46,
        "title": "Permutations",
        "difficulty": 1,
        "prompt": "class Solution:\n    def permute(self, nums: List[int]) -> List[List[int]]:\n        \"\"\"\n        Given an array nums of distinct integers, return all the possible permutations. You can return the answer in any order.\n        Example 1:\n        Input: nums = [1,2,3]\n        Output: [[1,2,3],[1,3,2],[2,1,3],[2,3,1],[3,1,2],[3,2,1]]\n        Example 2:\n        Input: nums = [0,1]\n        Output: [[0,1],[1,0]]\n        Example 3:\n        Input: nums = [1]\n        Output: [[1]]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        if not nums:\n            return []\n        if len(nums) == 1:\n            return [nums]"
    },
    {
        "number": 46,
        "title": "Permutations",
        "difficulty": 1,
        "prompt": "class Solution:\n    def permute(self, nums: List[int]) -> List[List[int]]:\n        \"\"\"\n        Given an array nums of distinct integers, return all the possible permutations. You can return the answer in any order.\n        Example 1:\n        Input: nums = [1,2,3]\n        Output: [[1,2,3],[1,3,2],[2,1,3],[2,3,1],[3,1,2],[3,2,1]]\n        Example 2:\n        Input: nums = [0,1]\n        Output: [[0,1],[1,0]]\n        Example 3:\n        Input: nums = [1]\n        Output: [[1]]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 3,
        "answer": "        self.res = []\n        self.helper(nums, 0, len(nums))\n        return self.res\n        \n    def helper(self, nums, index, n):\n        if index == n:\n            self.res.append(nums[:])\n        else:\n            for i in range(index, n):\n                nums[index], nums[i] = nums[i], nums[index]\n                self.helper(nums, index + 1, n)\n                nums[index], nums[i] = nums[i], nums[index]"
    },
    {
        "number": 46,
        "title": "Permutations",
        "difficulty": 1,
        "prompt": "class Solution:\n    def permute(self, nums: List[int]) -> List[List[int]]:\n        \"\"\"\n        Given an array nums of distinct integers, return all the possible permutations. You can return the answer in any order.\n        Example 1:\n        Input: nums = [1,2,3]\n        Output: [[1,2,3],[1,3,2],[2,1,3],[2,3,1],[3,1,2],[3,2,1]]\n        Example 2:\n        Input: nums = [0,1]\n        Output: [[0,1],[1,0]]\n        Example 3:\n        Input: nums = [1]\n        Output: [[1]]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 4,
        "answer": "        def backtrack(first = 0):\n            # if all integers are used up\n            if first == n:  \n                output.append(nums[:])\n            for i in range(first, n):\n                # place i-th integer first \n                # in the current permutation\n                nums[first], nums[i] = nums[i], nums[first]\n                # use next integers to complete the permutations\n                backtrack(first + 1)\n                # backtrack\n                nums[first], nums[i] = nums[i], nums[first]\n        \n        n = len(nums)\n        output = []\n        backtrack()\n        return output\n<|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>"
    },
    {
        "number": 46,
        "title": "Permutations",
        "difficulty": 1,
        "prompt": "class Solution:\n    def permute(self, nums: List[int]) -> List[List[int]]:\n        \"\"\"\n        Given an array nums of distinct integers, return all the possible permutations. You can return the answer in any order.\n        Example 1:\n        Input: nums = [1,2,3]\n        Output: [[1,2,3],[1,3,2],[2,1,3],[2,3,1],[3,1,2],[3,2,1]]\n        Example 2:\n        Input: nums = [0,1]\n        Output: [[0,1],[1,0]]\n        Example 3:\n        Input: nums = [1]\n        Output: [[1]]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 5,
        "answer": "        self.result = []\n        def dfs(nums, path):\n            if len(nums) == 0:\n                self.result.append(path)\n            for i in range(len(nums)):\n                dfs(nums[:i] + nums[i+1:], path + [nums[i]])"
    },
    {
        "number": 47,
        "title": "Permutations II",
        "difficulty": 1,
        "prompt": "class Solution:\n    def permuteUnique(self, nums: List[int]) -> List[List[int]]:\n        \"\"\"\n        Given a collection of numbers, nums, that might contain duplicates, return all possible unique permutations in any order.\n        Example 1:\n        Input: nums = [1,1,2]\n        Output:\n        [[1,1,2],\n         [1,2,1],\n         [2,1,1]]\n        Example 2:\n        Input: nums = [1,2,3]\n        Output: [[1,2,3],[1,3,2],[2,1,3],[2,3,1],[3,1,2],[3,2,1]]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        # use backtracking to generate all permutations\n        # don't repeat the same element in the same permutation\n        # use a set to check whether the permutation has been created before\n        nums.sort()\n        self.res = []\n        self.visited = set()\n        self.backtrack([], nums)\n        return self.res"
    },
    {
        "number": 47,
        "title": "Permutations II",
        "difficulty": 1,
        "prompt": "class Solution:\n    def permuteUnique(self, nums: List[int]) -> List[List[int]]:\n        \"\"\"\n        Given a collection of numbers, nums, that might contain duplicates, return all possible unique permutations in any order.\n        Example 1:\n        Input: nums = [1,1,2]\n        Output:\n        [[1,1,2],\n         [1,2,1],\n         [2,1,1]]\n        Example 2:\n        Input: nums = [1,2,3]\n        Output: [[1,2,3],[1,3,2],[2,1,3],[2,3,1],[3,1,2],[3,2,1]]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        # 1. Backtracking\n        # nums = sorted(nums)\n        # res = []\n        # temp = []\n        # def backtracking(index):\n        #     if index == len(nums):\n        #         res.append(temp.copy())\n        #         return\n        #     for i in range(index, len(nums)):\n        #         if i > index and nums[i] == nums[i - 1]:\n        #             continue\n        #         temp.append(nums[i])\n        #         backtracking(i + 1)\n        #         temp.pop()\n        # backtracking(0)\n        # return res"
    },
    {
        "number": 47,
        "title": "Permutations II",
        "difficulty": 1,
        "prompt": "class Solution:\n    def permuteUnique(self, nums: List[int]) -> List[List[int]]:\n        \"\"\"\n        Given a collection of numbers, nums, that might contain duplicates, return all possible unique permutations in any order.\n        Example 1:\n        Input: nums = [1,1,2]\n        Output:\n        [[1,1,2],\n         [1,2,1],\n         [2,1,1]]\n        Example 2:\n        Input: nums = [1,2,3]\n        Output: [[1,2,3],[1,3,2],[2,1,3],[2,3,1],[3,1,2],[3,2,1]]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 3,
        "answer": "        if len(nums) == 1:\n            return [nums]\n        if len(nums) == 2:\n            return [[nums[0], nums[1]], [nums[1], nums[0]]]\n        nums.sort()\n        result = []\n        for i in range(len(nums)):\n            if i > 0 and nums[i] == nums[i - 1]:\n                continue\n            else:\n                # print(nums[i])\n                # print(nums[:i] + nums[i+1:])\n                result.extend([[nums[i]] + perm for perm in self.permuteUnique(nums[:i] + nums[i + 1:])])\n        return result"
    },
    {
        "number": 47,
        "title": "Permutations II",
        "difficulty": 1,
        "prompt": "class Solution:\n    def permuteUnique(self, nums: List[int]) -> List[List[int]]:\n        \"\"\"\n        Given a collection of numbers, nums, that might contain duplicates, return all possible unique permutations in any order.\n        Example 1:\n        Input: nums = [1,1,2]\n        Output:\n        [[1,1,2],\n         [1,2,1],\n         [2,1,1]]\n        Example 2:\n        Input: nums = [1,2,3]\n        Output: [[1,2,3],[1,3,2],[2,1,3],[2,3,1],[3,1,2],[3,2,1]]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 4,
        "answer": "        return self.permuteUniqueRecursive(nums)"
    },
    {
        "number": 47,
        "title": "Permutations II",
        "difficulty": 1,
        "prompt": "class Solution:\n    def permuteUnique(self, nums: List[int]) -> List[List[int]]:\n        \"\"\"\n        Given a collection of numbers, nums, that might contain duplicates, return all possible unique permutations in any order.\n        Example 1:\n        Input: nums = [1,1,2]\n        Output:\n        [[1,1,2],\n         [1,2,1],\n         [2,1,1]]\n        Example 2:\n        Input: nums = [1,2,3]\n        Output: [[1,2,3],[1,3,2],[2,1,3],[2,3,1],[3,1,2],[3,2,1]]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 5,
        "answer": "        # return [p for p in permutations(nums)]\n        return [p for p in self.permute_unique_helper(nums)]\n        \n    def permute_unique_helper(self, nums):\n        if len(nums) == 1:\n            yield [nums[0]]\n        elif len(nums) == 0:\n            return\n        else:\n            for i,n in enumerate(nums):\n                for p in self.permute_unique_helper([x for j,x in enumerate(nums) if j!=i]):\n                    yield [n] + p\n        \n    def permuteUnique(self, nums: List[int]) -> List[List[int]]:\n        \"\"\"\n        Given a collection of numbers, nums, that might contain duplicates, return all possible unique permutations in any order.\n        \"\"\"\n        res = []\n        nums.sort()\n        self.helper(nums, [], res)\n        return res\n    \n    def helper(self, nums, path, res):\n        if not nums:\n            res.append(path)\n        seen = set()\n        for i in range(len(nums)):\n            if nums[i] not in seen:"
    },
    {
        "number": 48,
        "title": "Rotate Image",
        "difficulty": 1,
        "prompt": "class Solution:\n    def rotate(self, matrix: List[List[int]]) -> None:\n        \"\"\"\n        Do not return anything, modify matrix in-place instead.\n        You are given an n x n 2D matrix representing an image, rotate the image by 90 degrees (clockwise).\n        You have to rotate the image in-place, which means you have to modify the input 2D matrix directly. DO NOT allocate another 2D matrix and do the rotation.\n        Example 1:\n        Input: matrix = [[1,2,3],[4,5,6],[7,8,9]]\n        Output: [[7,4,1],[8,5,2],[9,6,3]]\n        Example 2:\n        Input: matrix = [[5,1,9,11],[2,4,8,10],[13,3,6,7],[15,14,12,16]]\n        Output: [[15,13,2,5],[14,3,4,1],[12,6,8,9],[16,7,10,11]]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        if not matrix:\n            return\n        n = len(matrix)\n        for i in range(n//2):\n            for j in range(n):\n                temp = matrix[n-1-j][i]\n                matrix[n-1-j][i] = matrix[n-1-i][n-j-1]\n                matrix[n-1-i][n-j-1] = matrix[j][n-1-i]\n                matrix[j][n-1-i] = matrix[i][j]\n                matrix[i][j] = temp"
    },
    {
        "number": 48,
        "title": "Rotate Image",
        "difficulty": 1,
        "prompt": "class Solution:\n    def rotate(self, matrix: List[List[int]]) -> None:\n        \"\"\"\n        Do not return anything, modify matrix in-place instead.\n        You are given an n x n 2D matrix representing an image, rotate the image by 90 degrees (clockwise).\n        You have to rotate the image in-place, which means you have to modify the input 2D matrix directly. DO NOT allocate another 2D matrix and do the rotation.\n        Example 1:\n        Input: matrix = [[1,2,3],[4,5,6],[7,8,9]]\n        Output: [[7,4,1],[8,5,2],[9,6,3]]\n        Example 2:\n        Input: matrix = [[5,1,9,11],[2,4,8,10],[13,3,6,7],[15,14,12,16]]\n        Output: [[15,13,2,5],[14,3,4,1],[12,6,8,9],[16,7,10,11]]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        n = len(matrix)\n        \n        for i in range(n//2):\n            matrix[i], matrix[n-i-1] = matrix[n-i-1], matrix[i]\n            \n        for i in range(n):\n            for j in range(i):\n                matrix[i][j], matrix[j][i] = matrix[j][i], matrix[i][j]<|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>"
    },
    {
        "number": 48,
        "title": "Rotate Image",
        "difficulty": 1,
        "prompt": "class Solution:\n    def rotate(self, matrix: List[List[int]]) -> None:\n        \"\"\"\n        Do not return anything, modify matrix in-place instead.\n        You are given an n x n 2D matrix representing an image, rotate the image by 90 degrees (clockwise).\n        You have to rotate the image in-place, which means you have to modify the input 2D matrix directly. DO NOT allocate another 2D matrix and do the rotation.\n        Example 1:\n        Input: matrix = [[1,2,3],[4,5,6],[7,8,9]]\n        Output: [[7,4,1],[8,5,2],[9,6,3]]\n        Example 2:\n        Input: matrix = [[5,1,9,11],[2,4,8,10],[13,3,6,7],[15,14,12,16]]\n        Output: [[15,13,2,5],[14,3,4,1],[12,6,8,9],[16,7,10,11]]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 3,
        "answer": "        # \u65b9\u6cd51\n        # \u6700\u5916\u5c42for\u5faa\u73af\u5916\u5c42\u904d\u5386\u56db\u5468\u6240\u6709\u5143\u7d20\uff0c\u5185\u5c42for\u5faa\u73af\u904d\u5386\u6700\u5916\u5c42\u7684\u77e9\u9635\u7684\u6bcf\u4e2a\u5143\u7d20\u6240\u5728\u7684\u77e9\u9635\u5185\u90e8\n        # \u5916\u5c42\u5faa\u73af\u4f1a\u628a\u6240\u6709\u77e9\u9635\u6bcf\u4e2a\u5143\u7d20\u7684\u4e0a\u4e0b\u5de6\u53f3\u5143\u7d20\u7ec4\u6210\u4e00\u4e2a\u77e9\u9635\uff0c\u53ef\u4ee5\u89c6\u4e3a\u4e00\u4e2a\u5411\u91cf\n        # \u5185\u5c42\u5faa\u73af\u8d1f\u8d23\u53d8\u6362\u77e9\u9635\u7684\u6bcf\u4e2a\u5143\u7d20\n        # \u77e9\u9635\u53d8\u6362\u6307\u5c06\u539f\u77e9\u9635\u7684\u6bcf\u4e2a\u5143\u7d20\u653e\u5230\u53d8\u6362\u540e\u7684\u77e9\u9635\u4e2d\u5bf9\u5e94\u4f4d\u7f6e\u7684\u5143\ufffd"
    },
    {
        "number": 48,
        "title": "Rotate Image",
        "difficulty": 1,
        "prompt": "class Solution:\n    def rotate(self, matrix: List[List[int]]) -> None:\n        \"\"\"\n        Do not return anything, modify matrix in-place instead.\n        You are given an n x n 2D matrix representing an image, rotate the image by 90 degrees (clockwise).\n        You have to rotate the image in-place, which means you have to modify the input 2D matrix directly. DO NOT allocate another 2D matrix and do the rotation.\n        Example 1:\n        Input: matrix = [[1,2,3],[4,5,6],[7,8,9]]\n        Output: [[7,4,1],[8,5,2],[9,6,3]]\n        Example 2:\n        Input: matrix = [[5,1,9,11],[2,4,8,10],[13,3,6,7],[15,14,12,16]]\n        Output: [[15,13,2,5],[14,3,4,1],[12,6,8,9],[16,7,10,11]]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 4,
        "answer": "        # Rotate the matrix 90 degrees clockwise:\n        n = len(matrix)\n        for i in range(n // 2):\n            for j in range(i, n - 1 - i):\n                # save\n                temp = matrix[i][j]\n                # move upper left to bottom right\n                matrix[i][j] = matrix[n - 1 - j][i]\n                # move bottom left to upper right\n                matrix[n - 1 - j][i] = matrix[n - 1 - i][n - 1 - j]\n                # move bottom right to top left\n                matrix[n - 1 - i][n - 1 - j] = matrix[j][n - 1 - i]\n                # move top right to bottom left\n                matrix[j][n - 1 - i] = temp"
    },
    {
        "number": 48,
        "title": "Rotate Image",
        "difficulty": 1,
        "prompt": "class Solution:\n    def rotate(self, matrix: List[List[int]]) -> None:\n        \"\"\"\n        Do not return anything, modify matrix in-place instead.\n        You are given an n x n 2D matrix representing an image, rotate the image by 90 degrees (clockwise).\n        You have to rotate the image in-place, which means you have to modify the input 2D matrix directly. DO NOT allocate another 2D matrix and do the rotation.\n        Example 1:\n        Input: matrix = [[1,2,3],[4,5,6],[7,8,9]]\n        Output: [[7,4,1],[8,5,2],[9,6,3]]\n        Example 2:\n        Input: matrix = [[5,1,9,11],[2,4,8,10],[13,3,6,7],[15,14,12,16]]\n        Output: [[15,13,2,5],[14,3,4,1],[12,6,8,9],[16,7,10,11]]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 5,
        "answer": "        n = len(matrix[0])\n        for i in range(n // 2 + n % 2):\n            for j in range(n // 2):\n                tmp = matrix[n - 1 - j][i]\n                matrix[n - 1 - j][i] = matrix[n - 1 - i][n - j - 1]\n                matrix[n - 1 - i][n - j - 1] = matrix[j][n - 1 -i]\n                matrix[j][n - 1 -i] = matrix[i][j]\n                matrix[i][j] = tmp\n<|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>"
    },
    {
        "number": 49,
        "title": "Group Anagrams",
        "difficulty": 1,
        "prompt": "class Solution:\n    def groupAnagrams(self, strs: List[str]) -> List[List[str]]:\n        \"\"\"\n        Given an array of strings strs, group the anagrams together. You can return the answer in any order.\n        An Anagram is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once.\n        Example 1:\n        Input: strs = [\"eat\",\"tea\",\"tan\",\"ate\",\"nat\",\"bat\"]\n        Output: [[\"bat\"],[\"nat\",\"tan\"],[\"ate\",\"eat\",\"tea\"]]\n        Example 2:\n        Input: strs = [\"\"]\n        Output: [[\"\"]]\n        Example 3:\n        Input: strs = [\"a\"]\n        Output: [[\"a\"]]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        output = collections.defaultdict(list)\n        for word in strs:\n            count = [0] * 26\n            for c in word:\n                count[ord(c) - ord(\"a\")] += 1\n            output[tuple(count)].append(word)\n        return output.values()\n<|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>"
    },
    {
        "number": 49,
        "title": "Group Anagrams",
        "difficulty": 1,
        "prompt": "class Solution:\n    def groupAnagrams(self, strs: List[str]) -> List[List[str]]:\n        \"\"\"\n        Given an array of strings strs, group the anagrams together. You can return the answer in any order.\n        An Anagram is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once.\n        Example 1:\n        Input: strs = [\"eat\",\"tea\",\"tan\",\"ate\",\"nat\",\"bat\"]\n        Output: [[\"bat\"],[\"nat\",\"tan\"],[\"ate\",\"eat\",\"tea\"]]\n        Example 2:\n        Input: strs = [\"\"]\n        Output: [[\"\"]]\n        Example 3:\n        Input: strs = [\"a\"]\n        Output: [[\"a\"]]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        # Edge case: empty list\n        if not strs:\n            return []\n        \n        # Approach 1: split the string and sort it\n        # Time: O(n * mlog(n)), where n is the length of the list of strs and m is the average length of each string\n        # Space: O(n)\n        # strs = [strs[i] for i in range(len(strs))]\n        # strs = sorted([sorted(strs[i]) for i in range(len(strs))])\n        # index = []\n        # output = []\n        # for i in range(len(strs)):\n        #     if strs[i] in index:\n        #         output[index.index(strs[i])].append(strs[i])\n        #     else:\n        #         index.append(strs[i])\n        #         output.append([strs[i]])\n        # return output\n        \n        # Approach 2: create hash table for each string in the list\n        # Time: O(n * m) where n is the length of the list of strs and m is the average length of each string\n        # Space: O(n)\n        # output = []\n        # dict = {}\n        # for i in"
    },
    {
        "number": 49,
        "title": "Group Anagrams",
        "difficulty": 1,
        "prompt": "class Solution:\n    def groupAnagrams(self, strs: List[str]) -> List[List[str]]:\n        \"\"\"\n        Given an array of strings strs, group the anagrams together. You can return the answer in any order.\n        An Anagram is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once.\n        Example 1:\n        Input: strs = [\"eat\",\"tea\",\"tan\",\"ate\",\"nat\",\"bat\"]\n        Output: [[\"bat\"],[\"nat\",\"tan\"],[\"ate\",\"eat\",\"tea\"]]\n        Example 2:\n        Input: strs = [\"\"]\n        Output: [[\"\"]]\n        Example 3:\n        Input: strs = [\"a\"]\n        Output: [[\"a\"]]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 3,
        "answer": "        output = []\n        dic = {}\n        for s in strs:\n            dic_s = list(s)\n            dic_s.sort()\n            if dic_s not in dic:\n                dic[dic_s] = [s]\n            else:\n                dic[dic_s].append(s)\n        for value in dic.values():\n            output.append(value)\n        return output\n<|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>"
    },
    {
        "number": 49,
        "title": "Group Anagrams",
        "difficulty": 1,
        "prompt": "class Solution:\n    def groupAnagrams(self, strs: List[str]) -> List[List[str]]:\n        \"\"\"\n        Given an array of strings strs, group the anagrams together. You can return the answer in any order.\n        An Anagram is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once.\n        Example 1:\n        Input: strs = [\"eat\",\"tea\",\"tan\",\"ate\",\"nat\",\"bat\"]\n        Output: [[\"bat\"],[\"nat\",\"tan\"],[\"ate\",\"eat\",\"tea\"]]\n        Example 2:\n        Input: strs = [\"\"]\n        Output: [[\"\"]]\n        Example 3:\n        Input: strs = [\"a\"]\n        Output: [[\"a\"]]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 4,
        "answer": "        d = {}\n        for i in range(len(strs)):\n            key = ''.join(sorted(strs[i]))\n            if key in d:\n                d[key].append(strs[i])\n            else:\n                d[key] = [strs[i]]\n        return list(d.values())\n<|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>"
    },
    {
        "number": 49,
        "title": "Group Anagrams",
        "difficulty": 1,
        "prompt": "class Solution:\n    def groupAnagrams(self, strs: List[str]) -> List[List[str]]:\n        \"\"\"\n        Given an array of strings strs, group the anagrams together. You can return the answer in any order.\n        An Anagram is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once.\n        Example 1:\n        Input: strs = [\"eat\",\"tea\",\"tan\",\"ate\",\"nat\",\"bat\"]\n        Output: [[\"bat\"],[\"nat\",\"tan\"],[\"ate\",\"eat\",\"tea\"]]\n        Example 2:\n        Input: strs = [\"\"]\n        Output: [[\"\"]]\n        Example 3:\n        Input: strs = [\"a\"]\n        Output: [[\"a\"]]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 5,
        "answer": "        m = {}\n        for s in strs:\n            sorted_s = \"\".join(sorted(s))\n            if sorted_s not in m:\n                m[sorted_s] = [s]\n            else:\n                m[sorted_s].append(s)\n        return [m[s] for s in m]"
    },
    {
        "number": 50,
        "title": "Pow(x, n)",
        "difficulty": 1,
        "prompt": "class Solution:\n    def myPow(self, x: float, n: int) -> float:\n        \"\"\"\n        Implement pow(x, n), which calculates x raised to the power n (i.e., xn).\n        Example 1:\n        Input: x = 2.00000, n = 10\n        Output: 1024.00000\n        Example 2:\n        Input: x = 2.10000, n = 3\n        Output: 9.26100\n        Example 3:\n        Input: x = 2.00000, n = -2\n        Output: 0.25000\n        Explanation: 2-2 = 1/22 = 1/4 = 0.25\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        if n < 0:\n            return 1.0 / self.myPow(x, -n)\n        if n == 0:\n            return 1\n        if n == 1:\n            return x\n        if n % 2 == 0:\n            return self.myPow(x * x, n // 2)\n        else:\n            return x * self.myPow(x, n - 1)"
    },
    {
        "number": 50,
        "title": "Pow(x, n)",
        "difficulty": 1,
        "prompt": "class Solution:\n    def myPow(self, x: float, n: int) -> float:\n        \"\"\"\n        Implement pow(x, n), which calculates x raised to the power n (i.e., xn).\n        Example 1:\n        Input: x = 2.00000, n = 10\n        Output: 1024.00000\n        Example 2:\n        Input: x = 2.10000, n = 3\n        Output: 9.26100\n        Example 3:\n        Input: x = 2.00000, n = -2\n        Output: 0.25000\n        Explanation: 2-2 = 1/22 = 1/4 = 0.25\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        if x == 0:\n            return 0"
    },
    {
        "number": 50,
        "title": "Pow(x, n)",
        "difficulty": 1,
        "prompt": "class Solution:\n    def myPow(self, x: float, n: int) -> float:\n        \"\"\"\n        Implement pow(x, n), which calculates x raised to the power n (i.e., xn).\n        Example 1:\n        Input: x = 2.00000, n = 10\n        Output: 1024.00000\n        Example 2:\n        Input: x = 2.10000, n = 3\n        Output: 9.26100\n        Example 3:\n        Input: x = 2.00000, n = -2\n        Output: 0.25000\n        Explanation: 2-2 = 1/22 = 1/4 = 0.25\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 3,
        "answer": "        if n == 0: return 1\n        if n == 1: return x\n        if n == -1: return 1/x\n        if n < 0: return 1/self.myPow(x, -n)\n        if n % 2 == 0: return self.myPow(x, n/2)*self.myPow(x, n/2)\n        return x*self.myPow(x, n-1)"
    },
    {
        "number": 50,
        "title": "Pow(x, n)",
        "difficulty": 1,
        "prompt": "class Solution:\n    def myPow(self, x: float, n: int) -> float:\n        \"\"\"\n        Implement pow(x, n), which calculates x raised to the power n (i.e., xn).\n        Example 1:\n        Input: x = 2.00000, n = 10\n        Output: 1024.00000\n        Example 2:\n        Input: x = 2.10000, n = 3\n        Output: 9.26100\n        Example 3:\n        Input: x = 2.00000, n = -2\n        Output: 0.25000\n        Explanation: 2-2 = 1/22 = 1/4 = 0.25\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 4,
        "answer": "        if n < 0:\n            n = -n\n            x = 1 / x\n        res = 1\n        while n:\n            if n & 1:\n                res *= x\n            x *= x\n            n >>= 1\n        return res"
    },
    {
        "number": 50,
        "title": "Pow(x, n)",
        "difficulty": 1,
        "prompt": "class Solution:\n    def myPow(self, x: float, n: int) -> float:\n        \"\"\"\n        Implement pow(x, n), which calculates x raised to the power n (i.e., xn).\n        Example 1:\n        Input: x = 2.00000, n = 10\n        Output: 1024.00000\n        Example 2:\n        Input: x = 2.10000, n = 3\n        Output: 9.26100\n        Example 3:\n        Input: x = 2.00000, n = -2\n        Output: 0.25000\n        Explanation: 2-2 = 1/22 = 1/4 = 0.25\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 5,
        "answer": "        if n == 0: return 1\n        if n < 0: return 1/self.myPow(x, -n)\n        if n % 2 == 0: return self.myPow(x*x, n//2)\n        return x*self.myPow(x, n-1)"
    },
    {
        "number": 51,
        "title": "N-Queens",
        "difficulty": 2,
        "prompt": "class Solution:\n    def solveNQueens(self, n: int) -> List[List[str]]:\n        \"\"\"\n        The n-queens puzzle is the problem of placing n queens on an n x n chessboard such that no two queens attack each other.\n        Given an integer n, return all distinct solutions to the n-queens puzzle. You may return the answer in any order.\n        Each solution contains a distinct board configuration of the n-queens' placement, where 'Q' and '.' both indicate a queen and an empty space, respectively.\n        Example 1:\n        Input: n = 4\n        Output: [[\".Q..\",\"...Q\",\"Q...\",\"..Q.\"],[\"..Q.\",\"Q...\",\"...Q\",\".Q..\"]]\n        Explanation: There exist two distinct solutions to the 4-queens puzzle as shown above\n        Example 2:\n        Input: n = 1\n        Output: [[\"Q\"]]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        self.n = n\n        self.res = []\n        self.check = [False] * n\n        self.dfs(0, [], [])\n        return self.res"
    },
    {
        "number": 51,
        "title": "N-Queens",
        "difficulty": 2,
        "prompt": "class Solution:\n    def solveNQueens(self, n: int) -> List[List[str]]:\n        \"\"\"\n        The n-queens puzzle is the problem of placing n queens on an n x n chessboard such that no two queens attack each other.\n        Given an integer n, return all distinct solutions to the n-queens puzzle. You may return the answer in any order.\n        Each solution contains a distinct board configuration of the n-queens' placement, where 'Q' and '.' both indicate a queen and an empty space, respectively.\n        Example 1:\n        Input: n = 4\n        Output: [[\".Q..\",\"...Q\",\"Q...\",\"..Q.\"],[\"..Q.\",\"Q...\",\"...Q\",\".Q..\"]]\n        Explanation: There exist two distinct solutions to the 4-queens puzzle as shown above\n        Example 2:\n        Input: n = 1\n        Output: [[\"Q\"]]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        def add_Q(r, c, result):\n            if not r:\n                result.append(['.'*c + 'Q' + '.'*(n-c-1) for _ in range(n)])\n            for j in range(n):\n                if j!= c and r-1+j < n and abs(j-c)!= abs(r-1+j):\n                    add_Q(r-1, j, result)"
    },
    {
        "number": 51,
        "title": "N-Queens",
        "difficulty": 2,
        "prompt": "class Solution:\n    def solveNQueens(self, n: int) -> List[List[str]]:\n        \"\"\"\n        The n-queens puzzle is the problem of placing n queens on an n x n chessboard such that no two queens attack each other.\n        Given an integer n, return all distinct solutions to the n-queens puzzle. You may return the answer in any order.\n        Each solution contains a distinct board configuration of the n-queens' placement, where 'Q' and '.' both indicate a queen and an empty space, respectively.\n        Example 1:\n        Input: n = 4\n        Output: [[\".Q..\",\"...Q\",\"Q...\",\"..Q.\"],[\"..Q.\",\"Q...\",\"...Q\",\".Q..\"]]\n        Explanation: There exist two distinct solutions to the 4-queens puzzle as shown above\n        Example 2:\n        Input: n = 1\n        Output: [[\"Q\"]]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 3,
        "answer": "        self.res = []\n        self.n = n\n        self.board = [\".\"] * n\n        self.dfs(0)\n        return self.res"
    },
    {
        "number": 51,
        "title": "N-Queens",
        "difficulty": 2,
        "prompt": "class Solution:\n    def solveNQueens(self, n: int) -> List[List[str]]:\n        \"\"\"\n        The n-queens puzzle is the problem of placing n queens on an n x n chessboard such that no two queens attack each other.\n        Given an integer n, return all distinct solutions to the n-queens puzzle. You may return the answer in any order.\n        Each solution contains a distinct board configuration of the n-queens' placement, where 'Q' and '.' both indicate a queen and an empty space, respectively.\n        Example 1:\n        Input: n = 4\n        Output: [[\".Q..\",\"...Q\",\"Q...\",\"..Q.\"],[\"..Q.\",\"Q...\",\"...Q\",\".Q..\"]]\n        Explanation: There exist two distinct solutions to the 4-queens puzzle as shown above\n        Example 2:\n        Input: n = 1\n        Output: [[\"Q\"]]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 4,
        "answer": "        # Bottom up\n        # only 1 queen\n        # only 1 row\n        # only 1 col\n        # only 1 diagonal\n        # can only be diagonals and off diagonals\n        # \n        if n == 1:\n            return [[\"Q\"]]\n        \n        # row range\n        # column range\n        # \n        if n == 2:\n            return [[\"Q...\",\"...Q\"],[\"Q.\",\"Q..\"]]\n        \n        # col\n        # row\n        # upper_left_diagonal\n        # upper_right_diagonal\n        # \n        # Q....\n        #.Q..\n        #...Q\n        #..Q.\n        # \n        #....\n        #..Q.\n        #...Q\n        #.Q..\n        # Q....\n        # \n        #......\n        # Q....\n        #.....\n        #....\n        #....\n        #.....\n        #......\n        #....\n        #...Q\n        #....\n        #...Q\n        #.Q..\n        # Q....\n        # \n        #....\n        #...Q\n        #.Q..\n        # Q....\n        #......\n        #....\n        #....\n        #.....\n        # \n        # Q...."
    },
    {
        "number": 51,
        "title": "N-Queens",
        "difficulty": 2,
        "prompt": "class Solution:\n    def solveNQueens(self, n: int) -> List[List[str]]:\n        \"\"\"\n        The n-queens puzzle is the problem of placing n queens on an n x n chessboard such that no two queens attack each other.\n        Given an integer n, return all distinct solutions to the n-queens puzzle. You may return the answer in any order.\n        Each solution contains a distinct board configuration of the n-queens' placement, where 'Q' and '.' both indicate a queen and an empty space, respectively.\n        Example 1:\n        Input: n = 4\n        Output: [[\".Q..\",\"...Q\",\"Q...\",\"..Q.\"],[\"..Q.\",\"Q...\",\"...Q\",\".Q..\"]]\n        Explanation: There exist two distinct solutions to the 4-queens puzzle as shown above\n        Example 2:\n        Input: n = 1\n        Output: [[\"Q\"]]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 5,
        "answer": "        def is_valid(board, col, row):\n            for i in range(row):\n                if board[i][col] == 'Q':\n                    return False\n            i, j = row, col\n            while i >= 0 and j >= 0:\n                if board[i][j] == 'Q':\n                    return False\n                i, j = i - 1, j - 1\n            i, j = row, col\n            while i < n and j >= 0:\n                if board[i][j] == 'Q':\n                    return False\n                i, j = i + 1, j - 1\n            return True"
    },
    {
        "number": 52,
        "title": "N-Queens II",
        "difficulty": 2,
        "prompt": "class Solution:\n    def totalNQueens(self, n: int) -> int:\n        \"\"\"\n        The n-queens puzzle is the problem of placing n queens on an n x n chessboard such that no two queens attack each other.\n        Given an integer n, return the number of distinct solutions to the n-queens puzzle.\n        Example 1:\n        Input: n = 4\n        Output: 2\n        Explanation: There are two distinct solutions to the 4-queens puzzle as shown.\n        Example 2:\n        Input: n = 1\n        Output: 1\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        self.res = 0\n        self.helper(n, 0, 0, 0, 0)\n        return self.res"
    },
    {
        "number": 52,
        "title": "N-Queens II",
        "difficulty": 2,
        "prompt": "class Solution:\n    def totalNQueens(self, n: int) -> int:\n        \"\"\"\n        The n-queens puzzle is the problem of placing n queens on an n x n chessboard such that no two queens attack each other.\n        Given an integer n, return the number of distinct solutions to the n-queens puzzle.\n        Example 1:\n        Input: n = 4\n        Output: 2\n        Explanation: There are two distinct solutions to the 4-queens puzzle as shown.\n        Example 2:\n        Input: n = 1\n        Output: 1\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        def dfs(queens, diag, anti_diag):\n            nonlocal n, count\n            if len(queens) == n:\n                count += 1\n            for col in range(n):\n                if col in queens:\n                    continue\n                if col in diag:\n                    continue\n                if col + len(queens) - diag in anti_diag:\n                    continue\n                diag.add(col + len(queens) - diag)\n                anti_diag.add(col + len(queens) + diag)\n                dfs(queens + [col], diag, anti_diag)\n                diag.remove(col + len(queens) - diag)\n                anti_diag.remove(col + len(queens) + diag)\n        \n        n = n\n        count = 0\n        diag = set()\n        anti_diag = set()\n        dfs([], diag, anti_diag)\n        return count<|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>"
    },
    {
        "number": 52,
        "title": "N-Queens II",
        "difficulty": 2,
        "prompt": "class Solution:\n    def totalNQueens(self, n: int) -> int:\n        \"\"\"\n        The n-queens puzzle is the problem of placing n queens on an n x n chessboard such that no two queens attack each other.\n        Given an integer n, return the number of distinct solutions to the n-queens puzzle.\n        Example 1:\n        Input: n = 4\n        Output: 2\n        Explanation: There are two distinct solutions to the 4-queens puzzle as shown.\n        Example 2:\n        Input: n = 1\n        Output: 1\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 3,
        "answer": "        self.result = 0\n        self.n = n\n        self.cols = set()\n        self.diag1 = set()\n        self.diag2 = set()\n        self.board = [['.' for _ in range(n)] for _ in range(n)]\n        self.solveNQueens(0, 0)\n        return self.result"
    },
    {
        "number": 52,
        "title": "N-Queens II",
        "difficulty": 2,
        "prompt": "class Solution:\n    def totalNQueens(self, n: int) -> int:\n        \"\"\"\n        The n-queens puzzle is the problem of placing n queens on an n x n chessboard such that no two queens attack each other.\n        Given an integer n, return the number of distinct solutions to the n-queens puzzle.\n        Example 1:\n        Input: n = 4\n        Output: 2\n        Explanation: There are two distinct solutions to the 4-queens puzzle as shown.\n        Example 2:\n        Input: n = 1\n        Output: 1\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 4,
        "answer": "        # self.res = 0\n        # def backtracking(row, col, trace):\n        #     if row == n:\n        #         self.res += 1\n        #         return\n        #     for i in range(n):\n        #         if i not in trace and row + i not in col and row - i not in col:\n        #             backtracking(row + 1, col + [i], trace + [i])\n        # backtracking(0, [], [])\n        # return self.res\n        self.res = 0\n        col = set()\n        diag1 = set()\n        diag2 = set()\n        def backtracking(row, col, diag1, diag2):\n            if row == n:\n                self.res += 1\n                return\n            for i in range(n):\n                if i not in col and row + i not in diag1 and row - i not in diag2:\n                    backtracking(row + 1, col | {i}, diag1 | {row + i}, diag2 | {row - i})\n        backtracking(0, col, diag1, diag2)\n        return self.res"
    },
    {
        "number": 52,
        "title": "N-Queens II",
        "difficulty": 2,
        "prompt": "class Solution:\n    def totalNQueens(self, n: int) -> int:\n        \"\"\"\n        The n-queens puzzle is the problem of placing n queens on an n x n chessboard such that no two queens attack each other.\n        Given an integer n, return the number of distinct solutions to the n-queens puzzle.\n        Example 1:\n        Input: n = 4\n        Output: 2\n        Explanation: There are two distinct solutions to the 4-queens puzzle as shown.\n        Example 2:\n        Input: n = 1\n        Output: 1\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 5,
        "answer": "        \n        self.ans = 0\n        self.n = n\n        \n        self.dfs(n, [], 0)\n        \n        return self.ans\n        \n    \n    def valid(self, row, col):\n        return col not in self.cols[row] and row - col not in self.diag and row + col not in self.anti_diag\n        \n    \n    def dfs(self, n, curr_board, row):\n        if row == n:\n            self.ans += 1\n        else:\n            for col in range(n):\n                if self.valid(row, col):\n                    curr_board.append(col)\n                    self.cols[row].add(col)\n                    self.diag.add(row - col)\n                    self.anti_diag.add(row + col)\n                    self.dfs(n, curr_board, row + 1)\n                    curr_board.pop()\n                    self.cols[row].remove(col)\n                    self.diag.remove(row - col)\n                    self.anti_diag.remove(row + col)\n                    \n<|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>"
    },
    {
        "number": 53,
        "title": "Maximum Subarray",
        "difficulty": 1,
        "prompt": "class Solution:\n    def maxSubArray(self, nums: List[int]) -> int:\n        \"\"\"\n        Given an integer array nums, find the subarray with the largest sum, and return its sum.\n        Example 1:\n        Input: nums = [-2,1,-3,4,-1,2,1,-5,4]\n        Output: 6\n        Explanation: The subarray [4,-1,2,1] has the largest sum 6.\n        Example 2:\n        Input: nums = [1]\n        Output: 1\n        Explanation: The subarray [1] has the largest sum 1.\n        Example 3:\n        Input: nums = [5,4,-1,7,8]\n        Output: 23\n        Explanation: The subarray [5,4,-1,7,8] has the largest sum 23.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        curr_sum, ans = 0, nums[0]\n        for i in range(len(nums)):\n            curr_sum = max(nums[i], curr_sum + nums[i])\n            ans = max(ans, curr_sum)\n        return ans"
    },
    {
        "number": 53,
        "title": "Maximum Subarray",
        "difficulty": 1,
        "prompt": "class Solution:\n    def maxSubArray(self, nums: List[int]) -> int:\n        \"\"\"\n        Given an integer array nums, find the subarray with the largest sum, and return its sum.\n        Example 1:\n        Input: nums = [-2,1,-3,4,-1,2,1,-5,4]\n        Output: 6\n        Explanation: The subarray [4,-1,2,1] has the largest sum 6.\n        Example 2:\n        Input: nums = [1]\n        Output: 1\n        Explanation: The subarray [1] has the largest sum 1.\n        Example 3:\n        Input: nums = [5,4,-1,7,8]\n        Output: 23\n        Explanation: The subarray [5,4,-1,7,8] has the largest sum 23.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        max_so_far = nums[0]\n        max_ending_here = 0\n        for i in range(len(nums)):\n            max_ending_here = max_ending_here + nums[i]\n            if max_ending_here < 0:\n                max_ending_here = 0\n            if max_so_far < max_ending_here:\n                max_so_far = max_ending_here\n        return max_so_far"
    },
    {
        "number": 53,
        "title": "Maximum Subarray",
        "difficulty": 1,
        "prompt": "class Solution:\n    def maxSubArray(self, nums: List[int]) -> int:\n        \"\"\"\n        Given an integer array nums, find the subarray with the largest sum, and return its sum.\n        Example 1:\n        Input: nums = [-2,1,-3,4,-1,2,1,-5,4]\n        Output: 6\n        Explanation: The subarray [4,-1,2,1] has the largest sum 6.\n        Example 2:\n        Input: nums = [1]\n        Output: 1\n        Explanation: The subarray [1] has the largest sum 1.\n        Example 3:\n        Input: nums = [5,4,-1,7,8]\n        Output: 23\n        Explanation: The subarray [5,4,-1,7,8] has the largest sum 23.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 3,
        "answer": "        max_sum = nums[0]\n        cur_sum = nums[0]\n        for num in nums[1:]:\n            cur_sum = max(num, cur_sum + num)\n            max_sum = max(cur_sum, max_sum)\n        return max_sum\n<|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>"
    },
    {
        "number": 53,
        "title": "Maximum Subarray",
        "difficulty": 1,
        "prompt": "class Solution:\n    def maxSubArray(self, nums: List[int]) -> int:\n        \"\"\"\n        Given an integer array nums, find the subarray with the largest sum, and return its sum.\n        Example 1:\n        Input: nums = [-2,1,-3,4,-1,2,1,-5,4]\n        Output: 6\n        Explanation: The subarray [4,-1,2,1] has the largest sum 6.\n        Example 2:\n        Input: nums = [1]\n        Output: 1\n        Explanation: The subarray [1] has the largest sum 1.\n        Example 3:\n        Input: nums = [5,4,-1,7,8]\n        Output: 23\n        Explanation: The subarray [5,4,-1,7,8] has the largest sum 23.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 4,
        "answer": "        # O(n)\n        # dp\n        # if sum(nums) < 0:\n        #     return max(nums)"
    },
    {
        "number": 53,
        "title": "Maximum Subarray",
        "difficulty": 1,
        "prompt": "class Solution:\n    def maxSubArray(self, nums: List[int]) -> int:\n        \"\"\"\n        Given an integer array nums, find the subarray with the largest sum, and return its sum.\n        Example 1:\n        Input: nums = [-2,1,-3,4,-1,2,1,-5,4]\n        Output: 6\n        Explanation: The subarray [4,-1,2,1] has the largest sum 6.\n        Example 2:\n        Input: nums = [1]\n        Output: 1\n        Explanation: The subarray [1] has the largest sum 1.\n        Example 3:\n        Input: nums = [5,4,-1,7,8]\n        Output: 23\n        Explanation: The subarray [5,4,-1,7,8] has the largest sum 23.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 5,
        "answer": "        n = len(nums)\n        dp = [0] * n\n        dp[0] = nums[0]\n        res = nums[0]\n        for i in range(1, n):\n            dp[i] = max(nums[i], dp[i-1]+nums[i])\n            res = max(res, dp[i])\n        return res"
    },
    {
        "number": 54,
        "title": "Spiral Matrix",
        "difficulty": 1,
        "prompt": "class Solution:\n    def spiralOrder(self, matrix: List[List[int]]) -> List[int]:\n        \"\"\"\n        Given an m x n matrix, return all elements of the matrix in spiral order.\n        Example 1:\n        Input: matrix = [[1,2,3],[4,5,6],[7,8,9]]\n        Output: [1,2,3,6,9,8,7,4,5]\n        Example 2:\n        Input: matrix = [[1,2,3,4],[5,6,7,8],[9,10,11,12]]\n        Output: [1,2,3,4,8,12,11,10,9,5,6,7]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        \n        # Using four variables to track indices, rows, columns and the matrix itself.\n        r1, r2, c1, c2 = 0, len(matrix)-1, 0, len(matrix[0])-1\n        ans = []\n        \n        while r1 <= r2 and c1 <= c2:\n            \n            for c in range(c1, c2+1):\n                ans.append(matrix[r1][c])\n            \n            for r in range(r1+1, r2+1):\n                ans.append(matrix[r][c2])\n            \n            if r1 < r2 and c1 < c2:\n                for c in range(c2-1, c1, -1):\n                    ans.append(matrix[r2][c])\n                \n                for r in range(r2, r1, -1):\n                    ans.append(matrix[r][c1])\n            \n            r1, r2, c1, c2 = r1+1, r2-1, c1+1, c2-1\n        \n        return ans<|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>"
    },
    {
        "number": 54,
        "title": "Spiral Matrix",
        "difficulty": 1,
        "prompt": "class Solution:\n    def spiralOrder(self, matrix: List[List[int]]) -> List[int]:\n        \"\"\"\n        Given an m x n matrix, return all elements of the matrix in spiral order.\n        Example 1:\n        Input: matrix = [[1,2,3],[4,5,6],[7,8,9]]\n        Output: [1,2,3,6,9,8,7,4,5]\n        Example 2:\n        Input: matrix = [[1,2,3,4],[5,6,7,8],[9,10,11,12]]\n        Output: [1,2,3,4,8,12,11,10,9,5,6,7]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        res = []\n        if len(matrix) == 0:\n            return res\n        if len(matrix[0]) == 0:\n            return res\n        m, n = len(matrix), len(matrix[0])\n        top, right, bottom, left = 0, n-1, m-1, 0\n        while top <= bottom and left <= right:\n            for i in range(left, right+1):\n                res.append(matrix[top][i])\n            top += 1\n            for i in range(top, bottom+1):\n                res.append(matrix[i][right])\n            right -= 1\n            if top <= bottom:\n                for i in range(right, left-1, -1):\n                    res.append(matrix[bottom][i])\n                bottom -= 1\n            if left <= right:\n                for i in range(bottom, top-1, -1):\n                    res.append(matrix[i][left])\n                left += 1\n        return res\n<|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>"
    },
    {
        "number": 54,
        "title": "Spiral Matrix",
        "difficulty": 1,
        "prompt": "class Solution:\n    def spiralOrder(self, matrix: List[List[int]]) -> List[int]:\n        \"\"\"\n        Given an m x n matrix, return all elements of the matrix in spiral order.\n        Example 1:\n        Input: matrix = [[1,2,3],[4,5,6],[7,8,9]]\n        Output: [1,2,3,6,9,8,7,4,5]\n        Example 2:\n        Input: matrix = [[1,2,3,4],[5,6,7,8],[9,10,11,12]]\n        Output: [1,2,3,4,8,12,11,10,9,5,6,7]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 3,
        "answer": "        if not matrix or not matrix[0]:\n            return []\n        \n        rows, cols = len(matrix), len(matrix[0])\n        left, right, top, bottom = 0, cols - 1, 0, rows - 1\n        result = []\n        while left <= right and top <= bottom:\n            for i in range(left, right + 1):\n                result.append(matrix[top][i])\n            top += 1\n            for i in range(top, bottom + 1):\n                result.append(matrix[i][right])\n            right -= 1\n            if not top <= bottom:\n                break\n            for i in range(right, left - 1, -1):\n                result.append(matrix[bottom][i])\n            bottom -= 1\n            for i in range(bottom, top - 1, -1):\n                result.append(matrix[i][left])\n            left += 1\n        return result\n        \nclass Solution2:\n    def spiralOrder(self, matrix: List[List[int]]) -> List[int]:\n        \"\"\"\n        Given an m x n matrix, return all elements of the matrix in spiral order.\n        Example 1:\n        Input: matrix = [[1,2,3],[4,5,6],[7,8,9]]\n"
    },
    {
        "number": 54,
        "title": "Spiral Matrix",
        "difficulty": 1,
        "prompt": "class Solution:\n    def spiralOrder(self, matrix: List[List[int]]) -> List[int]:\n        \"\"\"\n        Given an m x n matrix, return all elements of the matrix in spiral order.\n        Example 1:\n        Input: matrix = [[1,2,3],[4,5,6],[7,8,9]]\n        Output: [1,2,3,6,9,8,7,4,5]\n        Example 2:\n        Input: matrix = [[1,2,3,4],[5,6,7,8],[9,10,11,12]]\n        Output: [1,2,3,4,8,12,11,10,9,5,6,7]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 4,
        "answer": "        # no. of rows\n        R = len(matrix)\n        if R == 0:\n            return []\n        # no. of columns\n        C = len(matrix[0])\n        if C == 0:\n            return []"
    },
    {
        "number": 54,
        "title": "Spiral Matrix",
        "difficulty": 1,
        "prompt": "class Solution:\n    def spiralOrder(self, matrix: List[List[int]]) -> List[int]:\n        \"\"\"\n        Given an m x n matrix, return all elements of the matrix in spiral order.\n        Example 1:\n        Input: matrix = [[1,2,3],[4,5,6],[7,8,9]]\n        Output: [1,2,3,6,9,8,7,4,5]\n        Example 2:\n        Input: matrix = [[1,2,3,4],[5,6,7,8],[9,10,11,12]]\n        Output: [1,2,3,4,8,12,11,10,9,5,6,7]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 5,
        "answer": "        if not matrix:\n            return []"
    },
    {
        "number": 55,
        "title": "Jump Game",
        "difficulty": 1,
        "prompt": "class Solution:\n    def canJump(self, nums: List[int]) -> bool:\n        \"\"\"\n        You are given an integer array nums. You are initially positioned at the array's first index, and each element in the array represents your maximum jump length at that position.\n        Return true if you can reach the last index, or false otherwise.\n        Example 1:\n        Input: nums = [2,3,1,1,4]\n        Output: true\n        Explanation: Jump 1 step from index 0 to 1, then 3 steps to the last index.\n        Example 2:\n        Input: nums = [3,2,1,0,4]\n        Output: false\n        Explanation: You will always arrive at index 3 no matter what. Its maximum jump length is 0, which makes it impossible to reach the last index.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        \n        # dp[i] represents the number of ways to reach i (index)\n        dp = [0] * len(nums)\n        dp[0] = 1\n        \n        for i in range(1, len(nums)):\n            for j in range(i-1, -1, -1):\n                if nums[j] >= i-j:\n                    dp[i] += dp[j]\n        return dp[-1]!= 0\n    \n    \n    def canJump_1(self, nums: List[int]) -> bool:\n        \"\"\"\n        Another algorithm:\n        There are three possible ways to jump from the current index to the end: \n        Jump one step, jump two steps, or jump three steps.\n        Step 1: \n        From the current index, we want to jump to the last index\n        \n        Step 2:\n        In the current index, we can jump to the last index using two steps\n        \n        Step 3:\n        We can jump to the last index from the current index using three steps\n        \n        We then check if we can reach the last index from the current index using the three ways.\n        If the three ways all work, return True; otherwise, return False.\n        \"\"\"\n        \n        cur = 0\n        while cur < len"
    },
    {
        "number": 55,
        "title": "Jump Game",
        "difficulty": 1,
        "prompt": "class Solution:\n    def canJump(self, nums: List[int]) -> bool:\n        \"\"\"\n        You are given an integer array nums. You are initially positioned at the array's first index, and each element in the array represents your maximum jump length at that position.\n        Return true if you can reach the last index, or false otherwise.\n        Example 1:\n        Input: nums = [2,3,1,1,4]\n        Output: true\n        Explanation: Jump 1 step from index 0 to 1, then 3 steps to the last index.\n        Example 2:\n        Input: nums = [3,2,1,0,4]\n        Output: false\n        Explanation: You will always arrive at index 3 no matter what. Its maximum jump length is 0, which makes it impossible to reach the last index.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        start = 0\n        end = 0\n        for i in range(len(nums)):\n            if i > end:\n                return False\n            else:\n                end = max(end, nums[i] + i)\n        return True"
    },
    {
        "number": 55,
        "title": "Jump Game",
        "difficulty": 1,
        "prompt": "class Solution:\n    def canJump(self, nums: List[int]) -> bool:\n        \"\"\"\n        You are given an integer array nums. You are initially positioned at the array's first index, and each element in the array represents your maximum jump length at that position.\n        Return true if you can reach the last index, or false otherwise.\n        Example 1:\n        Input: nums = [2,3,1,1,4]\n        Output: true\n        Explanation: Jump 1 step from index 0 to 1, then 3 steps to the last index.\n        Example 2:\n        Input: nums = [3,2,1,0,4]\n        Output: false\n        Explanation: You will always arrive at index 3 no matter what. Its maximum jump length is 0, which makes it impossible to reach the last index.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 3,
        "answer": "        n = len(nums)\n        if n < 2:\n            return True\n        max_jump = nums[0]\n        for i in range(n):\n            if i + nums[i] > max_jump:\n                max_jump = i + nums[i]\n        return max_jump >= n - 1"
    },
    {
        "number": 55,
        "title": "Jump Game",
        "difficulty": 1,
        "prompt": "class Solution:\n    def canJump(self, nums: List[int]) -> bool:\n        \"\"\"\n        You are given an integer array nums. You are initially positioned at the array's first index, and each element in the array represents your maximum jump length at that position.\n        Return true if you can reach the last index, or false otherwise.\n        Example 1:\n        Input: nums = [2,3,1,1,4]\n        Output: true\n        Explanation: Jump 1 step from index 0 to 1, then 3 steps to the last index.\n        Example 2:\n        Input: nums = [3,2,1,0,4]\n        Output: false\n        Explanation: You will always arrive at index 3 no matter what. Its maximum jump length is 0, which makes it impossible to reach the last index.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 4,
        "answer": "        if len(nums)==1:\n            return True\n        curr_jump = nums[0]\n        if curr_jump>=len(nums)-1:\n            return True\n        else:\n            for i in range(1,len(nums)):\n                curr_jump = max(curr_jump-1,nums[i])\n                if curr_jump<i:\n                    return False\n            return True"
    },
    {
        "number": 55,
        "title": "Jump Game",
        "difficulty": 1,
        "prompt": "class Solution:\n    def canJump(self, nums: List[int]) -> bool:\n        \"\"\"\n        You are given an integer array nums. You are initially positioned at the array's first index, and each element in the array represents your maximum jump length at that position.\n        Return true if you can reach the last index, or false otherwise.\n        Example 1:\n        Input: nums = [2,3,1,1,4]\n        Output: true\n        Explanation: Jump 1 step from index 0 to 1, then 3 steps to the last index.\n        Example 2:\n        Input: nums = [3,2,1,0,4]\n        Output: false\n        Explanation: You will always arrive at index 3 no matter what. Its maximum jump length is 0, which makes it impossible to reach the last index.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 5,
        "answer": "        # Greedy Algorithm\n        if not nums:\n            return False\n        last_index = len(nums) - 1\n        for i in range(len(nums) - 1, -1, -1):\n            if i + nums[i] >= last_index:\n                last_index = i\n        return last_index == 0"
    },
    {
        "number": 56,
        "title": "Merge Intervals",
        "difficulty": 1,
        "prompt": "class Solution:\n    def merge(self, intervals: List[List[int]]) -> List[List[int]]:\n        \"\"\"\n        Given an array of intervals where intervals[i] = [starti, endi], merge all overlapping intervals, and return an array of the non-overlapping intervals that cover all the intervals in the input.\n        Example 1:\n        Input: intervals = [[1,3],[2,6],[8,10],[15,18]]\n        Output: [[1,6],[8,10],[15,18]]\n        Explanation: Since intervals [1,3] and [2,6] overlap, merge them into [1,6].\n        Example 2:\n        Input: intervals = [[1,4],[4,5]]\n        Output: [[1,5]]\n        Explanation: Intervals [1,4] and [4,5] are considered overlapping.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        if not intervals:\n            return []\n        intervals.sort()\n        ans = []\n        s = intervals[0]\n        for i in range(1, len(intervals)):\n            if s[1] >= intervals[i][0]:\n                s[1] = max(s[1], intervals[i][1])\n            else:\n                ans.append(s)\n                s = intervals[i]\n        ans.append(s)\n        return ans"
    },
    {
        "number": 56,
        "title": "Merge Intervals",
        "difficulty": 1,
        "prompt": "class Solution:\n    def merge(self, intervals: List[List[int]]) -> List[List[int]]:\n        \"\"\"\n        Given an array of intervals where intervals[i] = [starti, endi], merge all overlapping intervals, and return an array of the non-overlapping intervals that cover all the intervals in the input.\n        Example 1:\n        Input: intervals = [[1,3],[2,6],[8,10],[15,18]]\n        Output: [[1,6],[8,10],[15,18]]\n        Explanation: Since intervals [1,3] and [2,6] overlap, merge them into [1,6].\n        Example 2:\n        Input: intervals = [[1,4],[4,5]]\n        Output: [[1,5]]\n        Explanation: Intervals [1,4] and [4,5] are considered overlapping.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        \n        # Sort intervals by the start of interval.\n        # Logic: We want to sort intervals by their start value. If start1 < start2, then start2 > start1, and the intervals can be merged.\n        # This is because intervals[i] is sorted by the start value, so if we have a list of intervals [start1, end1] and [start2, end2], where start1 < start2, then start2 > start1, \n        # then start1 < end2, and end1 >= start2, and if we have a list of intervals [start1, end1] and [start2, end2], where start2 < start1, then start2 < end1, and end2 > start1,\n        # then start1 < end2, and end1 >= start2, and thus we can merge the intervals.\n        intervals.sort(key=lambda x: x[0])\n        \n        # Initialize a list to store our merged intervals.\n        merged = []\n        # Initialize a pointer to iterate through the intervals.\n        pointer = 0\n        # Loop through the intervals until we reach the last interval.\n        while pointer < len(intervals):\n            # Initialize a start and end variable for the current interval.\n            start = intervals[pointer][0]\n            end = intervals["
    },
    {
        "number": 56,
        "title": "Merge Intervals",
        "difficulty": 1,
        "prompt": "class Solution:\n    def merge(self, intervals: List[List[int]]) -> List[List[int]]:\n        \"\"\"\n        Given an array of intervals where intervals[i] = [starti, endi], merge all overlapping intervals, and return an array of the non-overlapping intervals that cover all the intervals in the input.\n        Example 1:\n        Input: intervals = [[1,3],[2,6],[8,10],[15,18]]\n        Output: [[1,6],[8,10],[15,18]]\n        Explanation: Since intervals [1,3] and [2,6] overlap, merge them into [1,6].\n        Example 2:\n        Input: intervals = [[1,4],[4,5]]\n        Output: [[1,5]]\n        Explanation: Intervals [1,4] and [4,5] are considered overlapping.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 3,
        "answer": "        # Time: O(NlogN)\n        # Space: O(N)\n        # Sort by start\n        # Iterate from the end, if it does not overlap with previous intervals, append it to res\n        # If it overlaps, then merge the two intervals.\n        intervals.sort(key=lambda x: x[0])\n        res = [intervals[0]]\n        for i in range(1, len(intervals)):\n            pre_interval = res[-1]\n            if intervals[i][0] <= pre_interval[1]:\n                res[-1][1] = max(intervals[i][1], pre_interval[1])\n            else:\n                res.append(intervals[i])\n        return res"
    },
    {
        "number": 56,
        "title": "Merge Intervals",
        "difficulty": 1,
        "prompt": "class Solution:\n    def merge(self, intervals: List[List[int]]) -> List[List[int]]:\n        \"\"\"\n        Given an array of intervals where intervals[i] = [starti, endi], merge all overlapping intervals, and return an array of the non-overlapping intervals that cover all the intervals in the input.\n        Example 1:\n        Input: intervals = [[1,3],[2,6],[8,10],[15,18]]\n        Output: [[1,6],[8,10],[15,18]]\n        Explanation: Since intervals [1,3] and [2,6] overlap, merge them into [1,6].\n        Example 2:\n        Input: intervals = [[1,4],[4,5]]\n        Output: [[1,5]]\n        Explanation: Intervals [1,4] and [4,5] are considered overlapping.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 4,
        "answer": "        if not intervals:\n            return intervals\n        intervals.sort(key=lambda x: x[0])\n        res = []\n        cur = intervals[0]\n        for i in range(1, len(intervals)):\n            if intervals[i][0] <= cur[1]:\n                if intervals[i][1] > cur[1]:\n                    cur[1] = intervals[i][1]\n            else:\n                res.append(cur)\n                cur = intervals[i]\n        res.append(cur)\n        return res"
    },
    {
        "number": 56,
        "title": "Merge Intervals",
        "difficulty": 1,
        "prompt": "class Solution:\n    def merge(self, intervals: List[List[int]]) -> List[List[int]]:\n        \"\"\"\n        Given an array of intervals where intervals[i] = [starti, endi], merge all overlapping intervals, and return an array of the non-overlapping intervals that cover all the intervals in the input.\n        Example 1:\n        Input: intervals = [[1,3],[2,6],[8,10],[15,18]]\n        Output: [[1,6],[8,10],[15,18]]\n        Explanation: Since intervals [1,3] and [2,6] overlap, merge them into [1,6].\n        Example 2:\n        Input: intervals = [[1,4],[4,5]]\n        Output: [[1,5]]\n        Explanation: Intervals [1,4] and [4,5] are considered overlapping.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 5,
        "answer": "        if len(intervals) <= 1:\n            return intervals\n        intervals.sort(key=lambda x: x[0])\n        output = [intervals[0]]\n        for i in range(1, len(intervals)):\n            if output[-1][1] >= intervals[i][0]:\n                output[-1][1] = max(output[-1][1], intervals[i][1])\n            else:\n                output.append(intervals[i])\n        return output"
    },
    {
        "number": 57,
        "title": "Insert Interval",
        "difficulty": 1,
        "prompt": "class Solution:\n    def insert(self, intervals: List[List[int]], newInterval: List[int]) -> List[List[int]]:\n        \"\"\"\n        You are given an array of non-overlapping intervals intervals where intervals[i] = [starti, endi] represent the start and the end of the ith interval and intervals is sorted in ascending order by starti. You are also given an interval newInterval = [start, end] that represents the start and end of another interval.\n        Insert newInterval into intervals such that intervals is still sorted in ascending order by starti and intervals still does not have any overlapping intervals (merge overlapping intervals if necessary).\n        Return intervals after the insertion.\n        Example 1:\n        Input: intervals = [[1,3],[6,9]], newInterval = [2,5]\n        Output: [[1,5],[6,9]]\n        Example 2:\n        Input: intervals = [[1,2],[3,5],[6,7],[8,10],[12,16]], newInterval = [4,8]\n        Output: [[1,2],[3,10],[12,16]]\n        Explanation: Because the new interval [4,8] overlaps with [3,5],[6,7],[8,10].\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        intervals.append(newInterval)\n        intervals.sort()\n        res = []\n        for interval in intervals:\n            if not res or res[-1][1] < interval[0]:\n                res.append(interval)\n            else:\n                res[-1][1] = max(res[-1][1], interval[1])\n        return res"
    },
    {
        "number": 57,
        "title": "Insert Interval",
        "difficulty": 1,
        "prompt": "class Solution:\n    def insert(self, intervals: List[List[int]], newInterval: List[int]) -> List[List[int]]:\n        \"\"\"\n        You are given an array of non-overlapping intervals intervals where intervals[i] = [starti, endi] represent the start and the end of the ith interval and intervals is sorted in ascending order by starti. You are also given an interval newInterval = [start, end] that represents the start and end of another interval.\n        Insert newInterval into intervals such that intervals is still sorted in ascending order by starti and intervals still does not have any overlapping intervals (merge overlapping intervals if necessary).\n        Return intervals after the insertion.\n        Example 1:\n        Input: intervals = [[1,3],[6,9]], newInterval = [2,5]\n        Output: [[1,5],[6,9]]\n        Example 2:\n        Input: intervals = [[1,2],[3,5],[6,7],[8,10],[12,16]], newInterval = [4,8]\n        Output: [[1,2],[3,10],[12,16]]\n        Explanation: Because the new interval [4,8] overlaps with [3,5],[6,7],[8,10].\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        def insert_helper(n_s, n_e, intervals, merged):\n            \"\"\"\n            Helper function for the algorithm.\n            \"\"\"\n            # create a new interval with the new start, end and the intervals list\n            newInterval = [n_s, n_e]\n            # add the new interval to the list of merged intervals\n            merged.append(newInterval)\n            # sort the intervals by start\n            merged.sort(key=lambda x: x[0])\n            # now iterate over the list of merged intervals\n            for i in range(1, len(merged)):\n                # if the current interval overlaps with the previous one\n                if merged[i][0] <= merged[i - 1][1]:\n                    # update the end of the previous interval\n                    merged[i - 1][1] = max(merged[i - 1][1], merged[i][1])\n                    # don't add the new interval\n                    break\n                # otherwise, add the new interval\n                else:\n                    intervals.append(merged[i])\n            # if the current interval doesn't overlap with the previous one\n            else:\n                # add the new interval\n                intervals.append(merged[i - 1])\n        # sort the intervals list\n        intervals.sort("
    },
    {
        "number": 57,
        "title": "Insert Interval",
        "difficulty": 1,
        "prompt": "class Solution:\n    def insert(self, intervals: List[List[int]], newInterval: List[int]) -> List[List[int]]:\n        \"\"\"\n        You are given an array of non-overlapping intervals intervals where intervals[i] = [starti, endi] represent the start and the end of the ith interval and intervals is sorted in ascending order by starti. You are also given an interval newInterval = [start, end] that represents the start and end of another interval.\n        Insert newInterval into intervals such that intervals is still sorted in ascending order by starti and intervals still does not have any overlapping intervals (merge overlapping intervals if necessary).\n        Return intervals after the insertion.\n        Example 1:\n        Input: intervals = [[1,3],[6,9]], newInterval = [2,5]\n        Output: [[1,5],[6,9]]\n        Example 2:\n        Input: intervals = [[1,2],[3,5],[6,7],[8,10],[12,16]], newInterval = [4,8]\n        Output: [[1,2],[3,10],[12,16]]\n        Explanation: Because the new interval [4,8] overlaps with [3,5],[6,7],[8,10].\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 3,
        "answer": "        # brute force:\n        # intervals.insert(0, newInterval)\n        # intervals = sorted(intervals, key=lambda x: x[0])\n        # res = []\n        # for interval in intervals:\n        #     if interval[0] <= newInterval[1]:\n        #         res.append(interval)\n        #     else:\n        #         break\n        # if newInterval[1] < res[0][0]:\n        #     res.insert(0, newInterval)\n        # elif newInterval[1] < res[-1][1]:\n        #     res[-1][1] = max(newInterval[1], res[-1][1])\n        # else:\n        #     res.append(newInterval)\n        # return res"
    },
    {
        "number": 57,
        "title": "Insert Interval",
        "difficulty": 1,
        "prompt": "class Solution:\n    def insert(self, intervals: List[List[int]], newInterval: List[int]) -> List[List[int]]:\n        \"\"\"\n        You are given an array of non-overlapping intervals intervals where intervals[i] = [starti, endi] represent the start and the end of the ith interval and intervals is sorted in ascending order by starti. You are also given an interval newInterval = [start, end] that represents the start and end of another interval.\n        Insert newInterval into intervals such that intervals is still sorted in ascending order by starti and intervals still does not have any overlapping intervals (merge overlapping intervals if necessary).\n        Return intervals after the insertion.\n        Example 1:\n        Input: intervals = [[1,3],[6,9]], newInterval = [2,5]\n        Output: [[1,5],[6,9]]\n        Example 2:\n        Input: intervals = [[1,2],[3,5],[6,7],[8,10],[12,16]], newInterval = [4,8]\n        Output: [[1,2],[3,10],[12,16]]\n        Explanation: Because the new interval [4,8] overlaps with [3,5],[6,7],[8,10].\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 4,
        "answer": "        intervals.append(newInterval)\n        intervals.sort(key=lambda x: x[0])"
    },
    {
        "number": 57,
        "title": "Insert Interval",
        "difficulty": 1,
        "prompt": "class Solution:\n    def insert(self, intervals: List[List[int]], newInterval: List[int]) -> List[List[int]]:\n        \"\"\"\n        You are given an array of non-overlapping intervals intervals where intervals[i] = [starti, endi] represent the start and the end of the ith interval and intervals is sorted in ascending order by starti. You are also given an interval newInterval = [start, end] that represents the start and end of another interval.\n        Insert newInterval into intervals such that intervals is still sorted in ascending order by starti and intervals still does not have any overlapping intervals (merge overlapping intervals if necessary).\n        Return intervals after the insertion.\n        Example 1:\n        Input: intervals = [[1,3],[6,9]], newInterval = [2,5]\n        Output: [[1,5],[6,9]]\n        Example 2:\n        Input: intervals = [[1,2],[3,5],[6,7],[8,10],[12,16]], newInterval = [4,8]\n        Output: [[1,2],[3,10],[12,16]]\n        Explanation: Because the new interval [4,8] overlaps with [3,5],[6,7],[8,10].\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 5,
        "answer": "        \n        def insert_interval(intervals, newInterval):\n            merged = []\n            i, start, end = 0, 0, 1\n            \n            # skip (and add to output) all intervals that come before the 'newInterval'\n            while i < len(intervals) and intervals[i][end] < newInterval[start]:\n                merged.append(intervals[i])\n                i += 1\n                \n            # merge all intervals that overlap with 'newInterval'\n            while i < len(intervals) and intervals[i][start] <= newInterval[end]:\n                newInterval[start] = min(intervals[i][start], newInterval[start])\n                newInterval[end] = max(intervals[i][end], newInterval[end])\n                i += 1\n                \n            # insert the newInterval\n            merged.append(newInterval)\n            \n            # add all the remaining intervals to the output\n            while i < len(intervals):\n                merged.append(intervals[i])\n                i += 1\n                \n            return merged\n        \n        def get_intervals(intervals):\n            if not intervals:\n                return []\n            \n            start, end = 1, 0\n            result = []\n            "
    },
    {
        "number": 58,
        "title": "Length of Last Word",
        "difficulty": 0,
        "prompt": "class Solution:\n    def lengthOfLastWord(self, s: str) -> int:\n        \"\"\"\n        Given a string s consisting of words and spaces, return the length of the last word in the string.\n        A word is a maximal substring consisting of non-space characters only.\n        Example 1:\n        Input: s = \"Hello World\"\n        Output: 5\n        Explanation: The last word is \"World\" with length 5.\n        Example 2:\n        Input: s = \"   fly me   to   the moon  \"\n        Output: 4\n        Explanation: The last word is \"moon\" with length 4.\n        Example 3:\n        Input: s = \"luffy is still joyboy\"\n        Output: 6\n        Explanation: The last word is \"joyboy\" with length 6.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        if not s:\n            return 0\n        words = s.strip().split(' ')\n        return len(words[-1])"
    },
    {
        "number": 58,
        "title": "Length of Last Word",
        "difficulty": 0,
        "prompt": "class Solution:\n    def lengthOfLastWord(self, s: str) -> int:\n        \"\"\"\n        Given a string s consisting of words and spaces, return the length of the last word in the string.\n        A word is a maximal substring consisting of non-space characters only.\n        Example 1:\n        Input: s = \"Hello World\"\n        Output: 5\n        Explanation: The last word is \"World\" with length 5.\n        Example 2:\n        Input: s = \"   fly me   to   the moon  \"\n        Output: 4\n        Explanation: The last word is \"moon\" with length 4.\n        Example 3:\n        Input: s = \"luffy is still joyboy\"\n        Output: 6\n        Explanation: The last word is \"joyboy\" with length 6.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        i = 0\n        while i < len(s):\n            if s[i] =='':\n                while s[i] =='':\n                    i += 1\n                i -= 1\n            if i == len(s) - 1:\n                return i + 1\n            else:\n                i += 1\n        return i + 1"
    },
    {
        "number": 58,
        "title": "Length of Last Word",
        "difficulty": 0,
        "prompt": "class Solution:\n    def lengthOfLastWord(self, s: str) -> int:\n        \"\"\"\n        Given a string s consisting of words and spaces, return the length of the last word in the string.\n        A word is a maximal substring consisting of non-space characters only.\n        Example 1:\n        Input: s = \"Hello World\"\n        Output: 5\n        Explanation: The last word is \"World\" with length 5.\n        Example 2:\n        Input: s = \"   fly me   to   the moon  \"\n        Output: 4\n        Explanation: The last word is \"moon\" with length 4.\n        Example 3:\n        Input: s = \"luffy is still joyboy\"\n        Output: 6\n        Explanation: The last word is \"joyboy\" with length 6.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 3,
        "answer": "        return 0 if s == '' else len(s.split()[-1])"
    },
    {
        "number": 58,
        "title": "Length of Last Word",
        "difficulty": 0,
        "prompt": "class Solution:\n    def lengthOfLastWord(self, s: str) -> int:\n        \"\"\"\n        Given a string s consisting of words and spaces, return the length of the last word in the string.\n        A word is a maximal substring consisting of non-space characters only.\n        Example 1:\n        Input: s = \"Hello World\"\n        Output: 5\n        Explanation: The last word is \"World\" with length 5.\n        Example 2:\n        Input: s = \"   fly me   to   the moon  \"\n        Output: 4\n        Explanation: The last word is \"moon\" with length 4.\n        Example 3:\n        Input: s = \"luffy is still joyboy\"\n        Output: 6\n        Explanation: The last word is \"joyboy\" with length 6.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 4,
        "answer": "        if not s:\n            return 0"
    },
    {
        "number": 58,
        "title": "Length of Last Word",
        "difficulty": 0,
        "prompt": "class Solution:\n    def lengthOfLastWord(self, s: str) -> int:\n        \"\"\"\n        Given a string s consisting of words and spaces, return the length of the last word in the string.\n        A word is a maximal substring consisting of non-space characters only.\n        Example 1:\n        Input: s = \"Hello World\"\n        Output: 5\n        Explanation: The last word is \"World\" with length 5.\n        Example 2:\n        Input: s = \"   fly me   to   the moon  \"\n        Output: 4\n        Explanation: The last word is \"moon\" with length 4.\n        Example 3:\n        Input: s = \"luffy is still joyboy\"\n        Output: 6\n        Explanation: The last word is \"joyboy\" with length 6.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 5,
        "answer": "        # \u53bb\u7a7a\u683c\n        s = s.strip()\n        # \u5bf9\u5b57\u7b26\u4e32\u8fdb\u884c\u5207\u7247\n        s = s.split(\" \")\n        # \u5224\u65ad\u6700\u540e\u4e00\u4e2a\u5143\u7d20\u662f\u5426\u6709\u7a7a\u683c\n        if s[-1]!= \"\":\n            return len(s[-1])\n        else:\n            return len(s[-2])\n        # return len(s.split(\" \")[-1])"
    },
    {
        "number": 59,
        "title": "Spiral Matrix II",
        "difficulty": 1,
        "prompt": "class Solution:\n    def generateMatrix(self, n: int) -> List[List[int]]:\n        \"\"\"\n        Given a positive integer n, generate an n x n matrix filled with elements from 1 to n2 in spiral order.\n        Example 1:\n        Input: n = 3\n        Output: [[1,2,3],[8,9,4],[7,6,5]]\n        Example 2:\n        Input: n = 1\n        Output: [[1]]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        mat = [[0] * n for _ in range(n)]\n        m, n, = n, n\n        row, col = 0, 0\n        val = 1\n        dirs = [(0, 1), (1, 0), (0, -1), (-1, 0)]\n        direction = 0\n        while val <= n ** 2:\n            mat[row][col] = val\n            val += 1\n            if direction == 0 and col < n - 1 and row < n - 1:\n                col += 1\n                row += 1\n                continue\n            if direction == 1 and col < n - 1 and row >= 0:\n                col += 1\n                row -= 1\n                continue\n            if direction == 2 and col >= 0 and row >= 0:\n                col -= 1\n                row -= 1\n                continue\n            if direction == 3 and col >= 0 and row < n - 1:\n                col -= 1\n                row += 1\n                continue\n            direction = (direction + 1) % 4\n            col += dirs[direction][0]\n            row += dirs[direction][1]\n        return mat"
    },
    {
        "number": 59,
        "title": "Spiral Matrix II",
        "difficulty": 1,
        "prompt": "class Solution:\n    def generateMatrix(self, n: int) -> List[List[int]]:\n        \"\"\"\n        Given a positive integer n, generate an n x n matrix filled with elements from 1 to n2 in spiral order.\n        Example 1:\n        Input: n = 3\n        Output: [[1,2,3],[8,9,4],[7,6,5]]\n        Example 2:\n        Input: n = 1\n        Output: [[1]]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        if n == 0:\n            return [[]]\n        if n == 1:\n            return [[1]]\n        # generate matrix\n        matrix = [[0] * n for i in range(n)]\n        row_start, col_start, row_end, col_end = 0, 0, n - 1, n - 1\n        num = 1\n        while row_start <= row_end and col_start <= col_end:\n            # right\n            for i in range(col_start, col_end + 1):\n                matrix[row_start][i] = num\n                num += 1\n            row_start += 1\n            # down\n            for i in range(row_start, row_end + 1):\n                matrix[i][col_end] = num\n                num += 1\n            col_end -= 1\n            # left\n            if row_start <= row_end:\n                for i in range(col_end, col_start - 1, -1):\n                    matrix[row_end][i] = num\n                    num += 1\n                row_end -= 1\n            # up\n            if col_start <= col_end:\n                for i in range(row_end, row_start - 1, -1):\n                    matrix[i][col_start] = num\n"
    },
    {
        "number": 59,
        "title": "Spiral Matrix II",
        "difficulty": 1,
        "prompt": "class Solution:\n    def generateMatrix(self, n: int) -> List[List[int]]:\n        \"\"\"\n        Given a positive integer n, generate an n x n matrix filled with elements from 1 to n2 in spiral order.\n        Example 1:\n        Input: n = 3\n        Output: [[1,2,3],[8,9,4],[7,6,5]]\n        Example 2:\n        Input: n = 1\n        Output: [[1]]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 3,
        "answer": "        result = [[0 for _ in range(n)] for _ in range(n)]\n        i, j, di, dj = 0, 0, 0, 1\n        for k in range(1, n * n + 1):\n            result[i][j] = k\n            if result[(i + di) % n][(j + dj) % n]:\n                di, dj = dj, -di\n            i += di\n            j += dj\n        return result"
    },
    {
        "number": 59,
        "title": "Spiral Matrix II",
        "difficulty": 1,
        "prompt": "class Solution:\n    def generateMatrix(self, n: int) -> List[List[int]]:\n        \"\"\"\n        Given a positive integer n, generate an n x n matrix filled with elements from 1 to n2 in spiral order.\n        Example 1:\n        Input: n = 3\n        Output: [[1,2,3],[8,9,4],[7,6,5]]\n        Example 2:\n        Input: n = 1\n        Output: [[1]]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 4,
        "answer": "        if not n:\n            return [[]]\n        l, r, t, b = 0, n - 1, 0, n - 1\n        res = [[0] * n for _ in range(n)]\n        num, tar = 1, n * n\n        while num <= tar:\n            for i in range(l, r + 1):  # left to right\n                res[t][i] = num\n                num += 1\n            t += 1\n            for i in range(t, b + 1):  # top to bottom\n                res[i][r] = num\n                num += 1\n            r -= 1\n            for i in range(r, l - 1, -1):  # right to left\n                res[b][i] = num\n                num += 1\n            b -= 1\n            for i in range(b, t - 1, -1):  # bottom to top\n                res[i][l] = num\n                num += 1\n            l += 1\n        return res\n<|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>"
    },
    {
        "number": 59,
        "title": "Spiral Matrix II",
        "difficulty": 1,
        "prompt": "class Solution:\n    def generateMatrix(self, n: int) -> List[List[int]]:\n        \"\"\"\n        Given a positive integer n, generate an n x n matrix filled with elements from 1 to n2 in spiral order.\n        Example 1:\n        Input: n = 3\n        Output: [[1,2,3],[8,9,4],[7,6,5]]\n        Example 2:\n        Input: n = 1\n        Output: [[1]]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 5,
        "answer": "        matrix = [[0 for _ in range(n)] for _ in range(n)]\n        left, right, top, bottom = 0, n - 1, 0, n - 1\n        num = 1\n        while left <= right and top <= bottom:\n            for i in range(left, right + 1):\n                matrix[top][i] = num\n                num += 1\n            for i in range(top + 1, bottom):\n                matrix[i][right] = num\n                num += 1\n            if left < right and top < bottom:\n                for i in range(right - 1, left, -1):\n                    matrix[bottom][i] = num\n                    num += 1\n                for i in range(bottom, top, -1):\n                    matrix[i][left] = num\n                    num += 1\n            left, right, top, bottom = left + 1, right - 1, top + 1, bottom - 1\n        return matrix"
    },
    {
        "number": 60,
        "title": "Permutation Sequence",
        "difficulty": 2,
        "prompt": "class Solution:\n    def getPermutation(self, n: int, k: int) -> str:\n        \"\"\"\n        The set [1, 2, 3,..., n] contains a total of n! unique permutations.\n        By listing and labeling all of the permutations in order, we get the following sequence for n = 3:\n            \"123\"\n            \"132\"\n            \"213\"\n            \"231\"\n            \"312\"\n            \"321\"\n        Given n and k, return the kth permutation sequence.\n        Example 1:\n        Input: n = 3, k = 3\n        Output: \"213\"\n        Example 2:\n        Input: n = 4, k = 9\n        Output: \"2314\"\n        Example 3:\n        Input: n = 3, k = 1\n        Output: \"123\"\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        # Time complexity: O(N)\n        # Space complexity: O(1)\n        k -= 1\n        factorials, nums = [1], [i for i in range(1, n + 1)]\n        for i in range(1, n):\n            factorials.append(factorials[-1] * i)\n        result = []\n        for i in range(n - 1, -1, -1):\n            index = k // factorials[i]\n            k -= index * factorials[i]\n            result.append(str(nums.pop(index)))\n        return ''.join(result)"
    },
    {
        "number": 60,
        "title": "Permutation Sequence",
        "difficulty": 2,
        "prompt": "class Solution:\n    def getPermutation(self, n: int, k: int) -> str:\n        \"\"\"\n        The set [1, 2, 3,..., n] contains a total of n! unique permutations.\n        By listing and labeling all of the permutations in order, we get the following sequence for n = 3:\n            \"123\"\n            \"132\"\n            \"213\"\n            \"231\"\n            \"312\"\n            \"321\"\n        Given n and k, return the kth permutation sequence.\n        Example 1:\n        Input: n = 3, k = 3\n        Output: \"213\"\n        Example 2:\n        Input: n = 4, k = 9\n        Output: \"2314\"\n        Example 3:\n        Input: n = 3, k = 1\n        Output: \"123\"\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        # get the list of number from 1 to n\n        num_list = list(range(1, n+1))\n        if k > math.factorial(n):\n            return \"\"\n        # find the kth permutation\n        k -= 1\n        kth_perm = []\n        while n > 0:\n            n -= 1\n            # the index of current number\n            index, k = divmod(k, math.factorial(n))\n            kth_perm.append(str(num_list[index]))\n            # remove current number\n            del num_list[index]\n        return ''.join(kth_perm)"
    },
    {
        "number": 60,
        "title": "Permutation Sequence",
        "difficulty": 2,
        "prompt": "class Solution:\n    def getPermutation(self, n: int, k: int) -> str:\n        \"\"\"\n        The set [1, 2, 3,..., n] contains a total of n! unique permutations.\n        By listing and labeling all of the permutations in order, we get the following sequence for n = 3:\n            \"123\"\n            \"132\"\n            \"213\"\n            \"231\"\n            \"312\"\n            \"321\"\n        Given n and k, return the kth permutation sequence.\n        Example 1:\n        Input: n = 3, k = 3\n        Output: \"213\"\n        Example 2:\n        Input: n = 4, k = 9\n        Output: \"2314\"\n        Example 3:\n        Input: n = 3, k = 1\n        Output: \"123\"\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 3,
        "answer": "        \n        # This is the list of elements we will generate\n        permutations = [str(x) for x in range(1, n+1)]\n        \n        # The number of permutations of length n is given by n!, and we need to find the kth value\n        # We can solve this problem using the binomial coefficient, n!, where n is the length of the permutation,\n        # and k is the number of permutations of length n, we want.\n        \n        k -= 1\n        # This is where we can make a dynamic programming solution, where we keep track of the current permutation, and then we can keep track of the number of permutations we have.\n        # Then we can jump from one permutation to another, and check the next permutation, until we get to the kth permutation.\n        \n        # This is a \"helper\" function, that will create all the permutations\n        def create_permutations(permutations, n):\n            if n == 1:\n                return permutations\n            \n            new_permutations = []\n            \n            for permutation in permutations:\n                for i in range(n):\n                    if permutation[i]!= str(i+1):\n                        break\n                \n                for j in range(i+1, n):\n                    if permutation[j]!="
    },
    {
        "number": 60,
        "title": "Permutation Sequence",
        "difficulty": 2,
        "prompt": "class Solution:\n    def getPermutation(self, n: int, k: int) -> str:\n        \"\"\"\n        The set [1, 2, 3,..., n] contains a total of n! unique permutations.\n        By listing and labeling all of the permutations in order, we get the following sequence for n = 3:\n            \"123\"\n            \"132\"\n            \"213\"\n            \"231\"\n            \"312\"\n            \"321\"\n        Given n and k, return the kth permutation sequence.\n        Example 1:\n        Input: n = 3, k = 3\n        Output: \"213\"\n        Example 2:\n        Input: n = 4, k = 9\n        Output: \"2314\"\n        Example 3:\n        Input: n = 3, k = 1\n        Output: \"123\"\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 4,
        "answer": "        nums = list(range(1, n+1))\n        res = []\n        i = 0\n        for c in self.permute_helper(nums):\n            i += 1\n            if i == k:\n                return ''.join([str(x) for x in c])\n        return res"
    },
    {
        "number": 60,
        "title": "Permutation Sequence",
        "difficulty": 2,
        "prompt": "class Solution:\n    def getPermutation(self, n: int, k: int) -> str:\n        \"\"\"\n        The set [1, 2, 3,..., n] contains a total of n! unique permutations.\n        By listing and labeling all of the permutations in order, we get the following sequence for n = 3:\n            \"123\"\n            \"132\"\n            \"213\"\n            \"231\"\n            \"312\"\n            \"321\"\n        Given n and k, return the kth permutation sequence.\n        Example 1:\n        Input: n = 3, k = 3\n        Output: \"213\"\n        Example 2:\n        Input: n = 4, k = 9\n        Output: \"2314\"\n        Example 3:\n        Input: n = 3, k = 1\n        Output: \"123\"\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 5,
        "answer": "        nums = list(range(1, n + 1))\n        s = ''\n        k -= 1\n        while n > 0:\n            n -= 1\n            i, k = divmod(k, factorial(n))\n            s += str(nums[i])\n            nums.remove(nums[i])\n        return s"
    },
    {
        "number": 61,
        "title": "Rotate List",
        "difficulty": 1,
        "prompt": "class Solution:\n    def rotateRight(self, head: Optional[ListNode], k: int) -> Optional[ListNode]:\n        \"\"\"\n        Given the head of a linked list, rotate the list to the right by k places.\n        Example 1:\n        Input: head = [1,2,3,4,5], k = 2\n        Output: [4,5,1,2,3]\n        Example 2:\n        Input: head = [0,1,2], k = 4\n        Output: [2,0,1]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        if not head:\n            return head\n        curr = head\n        len_list = 1\n        while curr.next:\n            len_list += 1\n            curr = curr.next\n        # find the new head\n        # k is number of nodes to shift in linked list\n        k = k % len_list\n        if k == 0:\n            return head\n        tail = head\n        # move to kth node\n        for _ in range(k):\n            tail = tail.next\n        # set head of linked list to tail node\n        head = tail\n        # set tail to next node\n        while tail.next:\n            tail = tail.next\n        # tail.next is None, connect tail to head\n        tail.next = head\n        # head is the new tail\n        return head"
    },
    {
        "number": 61,
        "title": "Rotate List",
        "difficulty": 1,
        "prompt": "class Solution:\n    def rotateRight(self, head: Optional[ListNode], k: int) -> Optional[ListNode]:\n        \"\"\"\n        Given the head of a linked list, rotate the list to the right by k places.\n        Example 1:\n        Input: head = [1,2,3,4,5], k = 2\n        Output: [4,5,1,2,3]\n        Example 2:\n        Input: head = [0,1,2], k = 4\n        Output: [2,0,1]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        if not head: return head\n        n, cur = 1, head\n        while cur.next: n, cur = n + 1, cur.next\n        cur.next, tail = head, head\n        for _ in range(n - k % n - 1):\n            tail = tail.next\n        cur.next = None\n        cur, tail.next = tail, cur\n        return cur<|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>"
    },
    {
        "number": 61,
        "title": "Rotate List",
        "difficulty": 1,
        "prompt": "class Solution:\n    def rotateRight(self, head: Optional[ListNode], k: int) -> Optional[ListNode]:\n        \"\"\"\n        Given the head of a linked list, rotate the list to the right by k places.\n        Example 1:\n        Input: head = [1,2,3,4,5], k = 2\n        Output: [4,5,1,2,3]\n        Example 2:\n        Input: head = [0,1,2], k = 4\n        Output: [2,0,1]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 3,
        "answer": "        if not head:\n            return None\n        if k <= 0:\n            return head\n        curr, n, count = head, 0, 0\n        while curr:\n            curr = curr.next\n            count += 1\n        k = k % count\n        if k == 0:\n            return head\n        curr = head\n        for _ in range(count - k - 1):\n            curr = curr.next\n        curr.next = head\n        head = curr.next\n        curr.next = None\n        return head\n<|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>"
    },
    {
        "number": 61,
        "title": "Rotate List",
        "difficulty": 1,
        "prompt": "class Solution:\n    def rotateRight(self, head: Optional[ListNode], k: int) -> Optional[ListNode]:\n        \"\"\"\n        Given the head of a linked list, rotate the list to the right by k places.\n        Example 1:\n        Input: head = [1,2,3,4,5], k = 2\n        Output: [4,5,1,2,3]\n        Example 2:\n        Input: head = [0,1,2], k = 4\n        Output: [2,0,1]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 4,
        "answer": "        if not head:\n            return None\n        if not head.next:\n            return head"
    },
    {
        "number": 61,
        "title": "Rotate List",
        "difficulty": 1,
        "prompt": "class Solution:\n    def rotateRight(self, head: Optional[ListNode], k: int) -> Optional[ListNode]:\n        \"\"\"\n        Given the head of a linked list, rotate the list to the right by k places.\n        Example 1:\n        Input: head = [1,2,3,4,5], k = 2\n        Output: [4,5,1,2,3]\n        Example 2:\n        Input: head = [0,1,2], k = 4\n        Output: [2,0,1]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 5,
        "answer": "        if not head:\n            return None"
    },
    {
        "number": 62,
        "title": "Unique Paths",
        "difficulty": 1,
        "prompt": "class Solution:\n    def uniquePaths(self, m: int, n: int) -> int:\n        \"\"\"\n        There is a robot on an m x n grid. The robot is initially located at the top-left corner (i.e., grid[0][0]). The robot tries to move to the bottom-right corner (i.e., grid[m - 1][n - 1]). The robot can only move either down or right at any point in time.\n        Given the two integers m and n, return the number of possible unique paths that the robot can take to reach the bottom-right corner.\n        The test cases are generated so that the answer will be less than or equal to 2 * 109.\n        Example 1:\n        Input: m = 3, n = 7\n        Output: 28\n        Example 2:\n        Input: m = 3, n = 2\n        Output: 3\n        Explanation: From the top-left corner, there are a total of 3 ways to reach the bottom-right corner:\n        1. Right -> Down -> Down\n        2. Down -> Down -> Right\n        3. Down -> Right -> Down\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        # dp\n        # dp[i][j] means the number of paths to grid[i][j]\n        # paths to grid[i][j] = paths to grid[i-1][j] + paths to grid[i][j-1]\n        # dp[i][j] = dp[i-1][j] + dp[i][j-1]\n        # dp[m-1][n-1]\n        # initialize the dp\n        # dp[i][0] = dp[i-1][0] + 1\n        # dp[0][j] = dp[0][j-1] + 1\n        dp = [[0 for _ in range(n)] for _ in range(m)]\n        dp[0][0] = 1\n        for i in range(m):\n            for j in range(n):\n                if i > 0:\n                    dp[i][j] += dp[i-1][j]\n                if j > 0:\n                    dp[i][j] += dp[i][j-1]\n        return dp[m-1][n-1]"
    },
    {
        "number": 62,
        "title": "Unique Paths",
        "difficulty": 1,
        "prompt": "class Solution:\n    def uniquePaths(self, m: int, n: int) -> int:\n        \"\"\"\n        There is a robot on an m x n grid. The robot is initially located at the top-left corner (i.e., grid[0][0]). The robot tries to move to the bottom-right corner (i.e., grid[m - 1][n - 1]). The robot can only move either down or right at any point in time.\n        Given the two integers m and n, return the number of possible unique paths that the robot can take to reach the bottom-right corner.\n        The test cases are generated so that the answer will be less than or equal to 2 * 109.\n        Example 1:\n        Input: m = 3, n = 7\n        Output: 28\n        Example 2:\n        Input: m = 3, n = 2\n        Output: 3\n        Explanation: From the top-left corner, there are a total of 3 ways to reach the bottom-right corner:\n        1. Right -> Down -> Down\n        2. Down -> Down -> Right\n        3. Down -> Right -> Down\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        m, n = m - 1, n - 1\n        count = 1\n        for i in range(m, -1, -1):\n            count = count * (n + 1) // (i + 1)\n        return count"
    },
    {
        "number": 62,
        "title": "Unique Paths",
        "difficulty": 1,
        "prompt": "class Solution:\n    def uniquePaths(self, m: int, n: int) -> int:\n        \"\"\"\n        There is a robot on an m x n grid. The robot is initially located at the top-left corner (i.e., grid[0][0]). The robot tries to move to the bottom-right corner (i.e., grid[m - 1][n - 1]). The robot can only move either down or right at any point in time.\n        Given the two integers m and n, return the number of possible unique paths that the robot can take to reach the bottom-right corner.\n        The test cases are generated so that the answer will be less than or equal to 2 * 109.\n        Example 1:\n        Input: m = 3, n = 7\n        Output: 28\n        Example 2:\n        Input: m = 3, n = 2\n        Output: 3\n        Explanation: From the top-left corner, there are a total of 3 ways to reach the bottom-right corner:\n        1. Right -> Down -> Down\n        2. Down -> Down -> Right\n        3. Down -> Right -> Down\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 3,
        "answer": "        dp = [[0] * n for _ in range(m)]\n        dp[0][0] = 1\n        for i in range(m):\n            for j in range(n):\n                if i > 0:\n                    dp[i][j] += dp[i-1][j]\n                if j > 0:\n                    dp[i][j] += dp[i][j-1]\n        return dp[-1][-1]\n<|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>"
    },
    {
        "number": 62,
        "title": "Unique Paths",
        "difficulty": 1,
        "prompt": "class Solution:\n    def uniquePaths(self, m: int, n: int) -> int:\n        \"\"\"\n        There is a robot on an m x n grid. The robot is initially located at the top-left corner (i.e., grid[0][0]). The robot tries to move to the bottom-right corner (i.e., grid[m - 1][n - 1]). The robot can only move either down or right at any point in time.\n        Given the two integers m and n, return the number of possible unique paths that the robot can take to reach the bottom-right corner.\n        The test cases are generated so that the answer will be less than or equal to 2 * 109.\n        Example 1:\n        Input: m = 3, n = 7\n        Output: 28\n        Example 2:\n        Input: m = 3, n = 2\n        Output: 3\n        Explanation: From the top-left corner, there are a total of 3 ways to reach the bottom-right corner:\n        1. Right -> Down -> Down\n        2. Down -> Down -> Right\n        3. Down -> Right -> Down\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 4,
        "answer": "        # return self.recursive(m, n)\n        # return self.dp(m, n)\n        # return self.math(m, n)\n        # return self.bit(m, n)\n        return self.dp_dp_loop(m, n)\n        # return self.dp_dp_memo(m, n)\n        # return self.dp_dp_table(m, n)\n        # return self.dp_math(m, n)\n        # return self.math(m, n)"
    },
    {
        "number": 62,
        "title": "Unique Paths",
        "difficulty": 1,
        "prompt": "class Solution:\n    def uniquePaths(self, m: int, n: int) -> int:\n        \"\"\"\n        There is a robot on an m x n grid. The robot is initially located at the top-left corner (i.e., grid[0][0]). The robot tries to move to the bottom-right corner (i.e., grid[m - 1][n - 1]). The robot can only move either down or right at any point in time.\n        Given the two integers m and n, return the number of possible unique paths that the robot can take to reach the bottom-right corner.\n        The test cases are generated so that the answer will be less than or equal to 2 * 109.\n        Example 1:\n        Input: m = 3, n = 7\n        Output: 28\n        Example 2:\n        Input: m = 3, n = 2\n        Output: 3\n        Explanation: From the top-left corner, there are a total of 3 ways to reach the bottom-right corner:\n        1. Right -> Down -> Down\n        2. Down -> Down -> Right\n        3. Down -> Right -> Down\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 5,
        "answer": "        if m == 1 or n == 1:\n            return 1\n        matrix = [[0] * n for _ in range(m)]\n        for i in range(m):\n            matrix[i][0] = 1\n        for j in range(n):\n            matrix[0][j] = 1\n        for i in range(1, m):\n            for j in range(1, n):\n                matrix[i][j] = matrix[i-1][j] + matrix[i][j-1]\n        return matrix[-1][-1]"
    },
    {
        "number": 63,
        "title": "Unique Paths II",
        "difficulty": 1,
        "prompt": "class Solution:\n    def uniquePathsWithObstacles(self, obstacleGrid: List[List[int]]) -> int:\n        \"\"\"\n        You are given an m x n integer array grid. There is a robot initially located at the top-left corner (i.e., grid[0][0]). The robot tries to move to the bottom-right corner (i.e., grid[m - 1][n - 1]). The robot can only move either down or right at any point in time.\n        An obstacle and space are marked as 1 or 0 respectively in grid. A path that the robot takes cannot include any square that is an obstacle.\n        Return the number of possible unique paths that the robot can take to reach the bottom-right corner.\n        The testcases are generated so that the answer will be less than or equal to 2 * 109.\n        Example 1:\n        Input: obstacleGrid = [[0,0,0],[0,1,0],[0,0,0]]\n        Output: 2\n        Explanation: There is one obstacle in the middle of the 3x3 grid above.\n        There are two ways to reach the bottom-right corner:\n        1. Right -> Right -> Down -> Down\n        2. Down -> Down -> Right -> Right\n        Example 2:\n        Input: obstacleGrid = [[0,1],[0,0]]\n        Output: 1\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        # Solution: DP\n        # m, n = len(obstacleGrid), len(obstacleGrid[0])\n        # dp = [[0] * (n + 1) for _ in range(m + 1)]\n        # for i in range(1, m + 1):\n        #     for j in range(1, n + 1):\n        #         if obstacleGrid[i - 1][j - 1] == 1:\n        #             dp[i][j] = 0\n        #         else:\n        #             dp[i][j] = dp[i - 1][j] + dp[i][j - 1]\n        # return dp[-1][-1]"
    },
    {
        "number": 63,
        "title": "Unique Paths II",
        "difficulty": 1,
        "prompt": "class Solution:\n    def uniquePathsWithObstacles(self, obstacleGrid: List[List[int]]) -> int:\n        \"\"\"\n        You are given an m x n integer array grid. There is a robot initially located at the top-left corner (i.e., grid[0][0]). The robot tries to move to the bottom-right corner (i.e., grid[m - 1][n - 1]). The robot can only move either down or right at any point in time.\n        An obstacle and space are marked as 1 or 0 respectively in grid. A path that the robot takes cannot include any square that is an obstacle.\n        Return the number of possible unique paths that the robot can take to reach the bottom-right corner.\n        The testcases are generated so that the answer will be less than or equal to 2 * 109.\n        Example 1:\n        Input: obstacleGrid = [[0,0,0],[0,1,0],[0,0,0]]\n        Output: 2\n        Explanation: There is one obstacle in the middle of the 3x3 grid above.\n        There are two ways to reach the bottom-right corner:\n        1. Right -> Right -> Down -> Down\n        2. Down -> Down -> Right -> Right\n        Example 2:\n        Input: obstacleGrid = [[0,1],[0,0]]\n        Output: 1\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        if len(obstacleGrid) == 0:\n            return 0\n        if len(obstacleGrid[0]) == 0:\n            return 0\n        dp = [[0] * (len(obstacleGrid[0])) for _ in range(len(obstacleGrid))]\n        dp[0][0] = 1 - obstacleGrid[0][0]\n        for i in range(1, len(obstacleGrid[0])):\n            dp[0][i] = dp[0][i - 1] * (1 - obstacleGrid[0][i])\n        for i in range(1, len(obstacleGrid)):\n            dp[i][0] = dp[i - 1][0] * (1 - obstacleGrid[i][0])"
    },
    {
        "number": 63,
        "title": "Unique Paths II",
        "difficulty": 1,
        "prompt": "class Solution:\n    def uniquePathsWithObstacles(self, obstacleGrid: List[List[int]]) -> int:\n        \"\"\"\n        You are given an m x n integer array grid. There is a robot initially located at the top-left corner (i.e., grid[0][0]). The robot tries to move to the bottom-right corner (i.e., grid[m - 1][n - 1]). The robot can only move either down or right at any point in time.\n        An obstacle and space are marked as 1 or 0 respectively in grid. A path that the robot takes cannot include any square that is an obstacle.\n        Return the number of possible unique paths that the robot can take to reach the bottom-right corner.\n        The testcases are generated so that the answer will be less than or equal to 2 * 109.\n        Example 1:\n        Input: obstacleGrid = [[0,0,0],[0,1,0],[0,0,0]]\n        Output: 2\n        Explanation: There is one obstacle in the middle of the 3x3 grid above.\n        There are two ways to reach the bottom-right corner:\n        1. Right -> Right -> Down -> Down\n        2. Down -> Down -> Right -> Right\n        Example 2:\n        Input: obstacleGrid = [[0,1],[0,0]]\n        Output: 1\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 3,
        "answer": "        m = len(obstacleGrid)\n        n = len(obstacleGrid[0])\n        if obstacleGrid[0][0] == 1 or obstacleGrid[m-1][n-1] == 1:\n            return 0\n        obstacleGrid[0][0] = 1\n        for i in range(1, m):\n            obstacleGrid[i][0] = int(obstacleGrid[i][0] == 0 and obstacleGrid[i-1][0] == 1)\n        for i in range(1, n):\n            obstacleGrid[0][i] = int(obstacleGrid[0][i] == 0 and obstacleGrid[0][i-1] == 1)\n        for i in range(1, m):\n            for j in range(1, n):\n                if obstacleGrid[i][j] == 0:\n                    obstacleGrid[i][j] = obstacleGrid[i-1][j] + obstacleGrid[i][j-1]\n                else:\n                    obstacleGrid[i][j] = 0\n        return obstacleGrid[m-1][n-1]"
    },
    {
        "number": 63,
        "title": "Unique Paths II",
        "difficulty": 1,
        "prompt": "class Solution:\n    def uniquePathsWithObstacles(self, obstacleGrid: List[List[int]]) -> int:\n        \"\"\"\n        You are given an m x n integer array grid. There is a robot initially located at the top-left corner (i.e., grid[0][0]). The robot tries to move to the bottom-right corner (i.e., grid[m - 1][n - 1]). The robot can only move either down or right at any point in time.\n        An obstacle and space are marked as 1 or 0 respectively in grid. A path that the robot takes cannot include any square that is an obstacle.\n        Return the number of possible unique paths that the robot can take to reach the bottom-right corner.\n        The testcases are generated so that the answer will be less than or equal to 2 * 109.\n        Example 1:\n        Input: obstacleGrid = [[0,0,0],[0,1,0],[0,0,0]]\n        Output: 2\n        Explanation: There is one obstacle in the middle of the 3x3 grid above.\n        There are two ways to reach the bottom-right corner:\n        1. Right -> Right -> Down -> Down\n        2. Down -> Down -> Right -> Right\n        Example 2:\n        Input: obstacleGrid = [[0,1],[0,0]]\n        Output: 1\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 4,
        "answer": "        if not obstacleGrid or not obstacleGrid[0] or obstacleGrid[0][0] == 1:\n            return 0"
    },
    {
        "number": 63,
        "title": "Unique Paths II",
        "difficulty": 1,
        "prompt": "class Solution:\n    def uniquePathsWithObstacles(self, obstacleGrid: List[List[int]]) -> int:\n        \"\"\"\n        You are given an m x n integer array grid. There is a robot initially located at the top-left corner (i.e., grid[0][0]). The robot tries to move to the bottom-right corner (i.e., grid[m - 1][n - 1]). The robot can only move either down or right at any point in time.\n        An obstacle and space are marked as 1 or 0 respectively in grid. A path that the robot takes cannot include any square that is an obstacle.\n        Return the number of possible unique paths that the robot can take to reach the bottom-right corner.\n        The testcases are generated so that the answer will be less than or equal to 2 * 109.\n        Example 1:\n        Input: obstacleGrid = [[0,0,0],[0,1,0],[0,0,0]]\n        Output: 2\n        Explanation: There is one obstacle in the middle of the 3x3 grid above.\n        There are two ways to reach the bottom-right corner:\n        1. Right -> Right -> Down -> Down\n        2. Down -> Down -> Right -> Right\n        Example 2:\n        Input: obstacleGrid = [[0,1],[0,0]]\n        Output: 1\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 5,
        "answer": "        m = len(obstacleGrid)\n        n = len(obstacleGrid[0])\n        \n        @lru_cache(None)\n        def dfs(i,j):\n            if i == m-1 and j == n-1: return 1\n            ans = 0\n            if i < m and j < n:\n                if obstacleGrid[i][j] == 0:\n                    if i+1 < m: ans += dfs(i+1,j)\n                    if j+1 < n: ans += dfs(i,j+1)\n                else:\n                    return 0\n            return ans\n        \n        return dfs(0,0)\n    \n    # dp\n    def uniquePathsWithObstacles2(self, obstacleGrid: List[List[int]]) -> int:\n        m = len(obstacleGrid)\n        n = len(obstacleGrid[0])\n        \n        dp = [[0]*n]*m\n        \n        dp[0][0] = 1 if obstacleGrid[0][0] == 0 else 0\n        \n        for i in range(1,m):\n            dp[i][0] = dp[i-1][0] if obstacleGrid[i][0] == 0 else 0\n        \n        for i"
    },
    {
        "number": 64,
        "title": "Minimum Path Sum",
        "difficulty": 1,
        "prompt": "class Solution:\n    def minPathSum(self, grid: List[List[int]]) -> int:\n        \"\"\"\n        Given a m x n grid filled with non-negative numbers, find a path from top left to bottom right, which minimizes the sum of all numbers along its path.\n        Note: You can only move either down or right at any point in time.\n        Example 1:\n        Input: grid = [[1,3,1],[1,5,1],[4,2,1]]\n        Output: 7\n        Explanation: Because the path 1 \u2192 3 \u2192 1 \u2192 1 \u2192 1 minimizes the sum.\n        Example 2:\n        Input: grid = [[1,2,3],[4,5,6]]\n        Output: 12\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        # This is a typical dynamic programming problem\n        # Let's try to visualize the problem and see what we need to do.\n        #              m = 4\n        #   grid = 1   2   3   4\n        #         +\n        #         5   6   7   8\n        #   grid = 1   2   3   4\n        #         +\n        #         5   6   7   8\n        #           ...\n        #   grid = 1   2   3   4\n        #         +\n        #         5   6   7   8\n        # First we need to figure out what the states are and what the base cases are.\n        # Let's start with the states. States can be defined as the positions of the starting point and the destination point.\n        # We can define them as (row, col)\n        # We can define them as (y, x)\n        # We can define them as (y, x)\n        # We can define them as (i, j)\n        # We can define them as (y, x)\n        # We can define them as (i, j)\n        # We can define them as (y, x)\n        # We can define them as (i, j)\n        # We can define them as (y, x)\n        # We can define them as (i,"
    },
    {
        "number": 64,
        "title": "Minimum Path Sum",
        "difficulty": 1,
        "prompt": "class Solution:\n    def minPathSum(self, grid: List[List[int]]) -> int:\n        \"\"\"\n        Given a m x n grid filled with non-negative numbers, find a path from top left to bottom right, which minimizes the sum of all numbers along its path.\n        Note: You can only move either down or right at any point in time.\n        Example 1:\n        Input: grid = [[1,3,1],[1,5,1],[4,2,1]]\n        Output: 7\n        Explanation: Because the path 1 \u2192 3 \u2192 1 \u2192 1 \u2192 1 minimizes the sum.\n        Example 2:\n        Input: grid = [[1,2,3],[4,5,6]]\n        Output: 12\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        # find the shortest path using DP:\n        # -1 to indicate not visited\n        # 0 to indicate visiting\n        # 1 to indicate visited"
    },
    {
        "number": 64,
        "title": "Minimum Path Sum",
        "difficulty": 1,
        "prompt": "class Solution:\n    def minPathSum(self, grid: List[List[int]]) -> int:\n        \"\"\"\n        Given a m x n grid filled with non-negative numbers, find a path from top left to bottom right, which minimizes the sum of all numbers along its path.\n        Note: You can only move either down or right at any point in time.\n        Example 1:\n        Input: grid = [[1,3,1],[1,5,1],[4,2,1]]\n        Output: 7\n        Explanation: Because the path 1 \u2192 3 \u2192 1 \u2192 1 \u2192 1 minimizes the sum.\n        Example 2:\n        Input: grid = [[1,2,3],[4,5,6]]\n        Output: 12\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 3,
        "answer": "        # use the dynamic programming approach to solve this problem\n        # first we initialize the left_boundary, right_boundary and total_sum with some initial values\n        # then we loop through the array starting from index 1, at each index we get the minimum cost to reach that index from the left or the top\n        # so, at each index we can reach it from the left or top, then the minimum cost to reach it from the left is the previous left + current left, so that index's minimum cost is the sum of previous left + current left\n        # then the minimum cost to reach it from the top is the previous top + current top, so that index's minimum cost is the sum of previous top + current top\n        # so, at each index we can reach it from the left or top, then the minimum cost to reach it from the left is the previous left + current left, so that index's minimum cost is the sum of previous left + current left\n        # then the minimum cost to reach it from the top is the previous top + current top, so that index's minimum cost is the sum of previous top + current top\n        # then we get the total sum of the grid, that's the minimum cost\n        # then we build the answer array that has the answer at each index is the minimum cost to reach the index from the left or the top, that's the minimum cost to reach the index from"
    },
    {
        "number": 64,
        "title": "Minimum Path Sum",
        "difficulty": 1,
        "prompt": "class Solution:\n    def minPathSum(self, grid: List[List[int]]) -> int:\n        \"\"\"\n        Given a m x n grid filled with non-negative numbers, find a path from top left to bottom right, which minimizes the sum of all numbers along its path.\n        Note: You can only move either down or right at any point in time.\n        Example 1:\n        Input: grid = [[1,3,1],[1,5,1],[4,2,1]]\n        Output: 7\n        Explanation: Because the path 1 \u2192 3 \u2192 1 \u2192 1 \u2192 1 minimizes the sum.\n        Example 2:\n        Input: grid = [[1,2,3],[4,5,6]]\n        Output: 12\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 4,
        "answer": "        m, n = len(grid), len(grid[0])\n        dp = [[0] * n for _ in range(m)]\n        dp[0][0] = grid[0][0]\n        for i in range(1, m):\n            dp[i][0] = dp[i-1][0] + grid[i][0]\n        for j in range(1, n):\n            dp[0][j] = dp[0][j-1] + grid[0][j]\n        for i in range(1, m):\n            for j in range(1, n):\n                dp[i][j] = min(dp[i-1][j], dp[i][j-1]) + grid[i][j]\n        return dp[-1][-1]"
    },
    {
        "number": 64,
        "title": "Minimum Path Sum",
        "difficulty": 1,
        "prompt": "class Solution:\n    def minPathSum(self, grid: List[List[int]]) -> int:\n        \"\"\"\n        Given a m x n grid filled with non-negative numbers, find a path from top left to bottom right, which minimizes the sum of all numbers along its path.\n        Note: You can only move either down or right at any point in time.\n        Example 1:\n        Input: grid = [[1,3,1],[1,5,1],[4,2,1]]\n        Output: 7\n        Explanation: Because the path 1 \u2192 3 \u2192 1 \u2192 1 \u2192 1 minimizes the sum.\n        Example 2:\n        Input: grid = [[1,2,3],[4,5,6]]\n        Output: 12\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 5,
        "answer": "        # First, I want to put the first row as the first column.\n        # Then I want to put the first column as the first row.\n        # Then I want to put the first column and first row as 0.\n        # Then, starting from the second column, I want to compute the minimum path from the first column and the first row to the last column and the last row.\n        # Then, I want to compute the minimum path from the first row and the first column to the last row and the last column.\n        # Finally, I want to compute the minimum path from the first column and the first row to the last column and the last row.\n        # The minimum sum of the path from the top-left corner to the bottom-right corner will be the final answer."
    },
    {
        "number": 65,
        "title": "Valid Number",
        "difficulty": 2,
        "prompt": "class Solution:\n    def isNumber(self, s: str) -> bool:\n        \"\"\"\n        A valid number can be split up into these components (in order):\n            A decimal number or an integer.\n            (Optional) An 'e' or 'E', followed by an integer.\n        A decimal number can be split up into these components (in order):\n            (Optional) A sign character (either '+' or '-').\n            One of the following formats:\n                One or more digits, followed by a dot '.'.\n                One or more digits, followed by a dot '.', followed by one or more digits.\n                A dot '.', followed by one or more digits.\n        An integer can be split up into these components (in order):\n            (Optional) A sign character (either '+' or '-').\n            One or more digits.\n        For example, all the following are valid numbers: [\"2\", \"0089\", \"-0.1\", \"+3.14\", \"4.\", \"-.9\", \"2e10\", \"-90E3\", \"3e+7\", \"+6e-1\", \"53.5e93\", \"-123.456e789\"], while the following are not valid numbers: [\"abc\", \"1a\", \"1e\", \"e3\", \"99e2.5\", \"--6\", \"-+3\", \"95a54e53\"].\n        Given a string s, return true if s is a valid number.\n        Example 1:\n        Input: s = \"0\"\n        Output: true\n        Example 2:\n        Input: s = \"e\"\n        Output: false\n        Example 3:\n        Input: s = \".\"\n        Output: false\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        import re\n        import decimal\n        decimal.getcontext().traps[decimal.InvalidOperation] = True\n        \n        s = s.strip()\n        if len(s) == 0:\n            return False\n        \n        if s[0] in ('+', '-'):\n            s = s[1:]\n        \n        p1 = r'([+-]?\\d+(\\.\\d*)?(e[+-]?\\d+)?)'\n        p2 = r'(\\.\\d+([eE][+-]?\\d+)?)'\n        p3 = r'(\\d+\\.?\\d*e[+-]?\\d+)'\n        p4 = r'(\\d+\\.\\d*|\\.\\d+)'\n        p5 = r'[+-]?\\d+'\n        p6 = r'(e[+-]?\\d+)'\n        p7 = r'(e[+-]?\\d+\\.?\\d*)'\n        \n        if re.fullmatch(p1, s)!= None:\n            return True\n        elif re.fullmatch(p2, s)!= None:\n            return True\n        elif re.fullmatch(p3, s)!= None:\n            return True\n"
    },
    {
        "number": 65,
        "title": "Valid Number",
        "difficulty": 2,
        "prompt": "class Solution:\n    def isNumber(self, s: str) -> bool:\n        \"\"\"\n        A valid number can be split up into these components (in order):\n            A decimal number or an integer.\n            (Optional) An 'e' or 'E', followed by an integer.\n        A decimal number can be split up into these components (in order):\n            (Optional) A sign character (either '+' or '-').\n            One of the following formats:\n                One or more digits, followed by a dot '.'.\n                One or more digits, followed by a dot '.', followed by one or more digits.\n                A dot '.', followed by one or more digits.\n        An integer can be split up into these components (in order):\n            (Optional) A sign character (either '+' or '-').\n            One or more digits.\n        For example, all the following are valid numbers: [\"2\", \"0089\", \"-0.1\", \"+3.14\", \"4.\", \"-.9\", \"2e10\", \"-90E3\", \"3e+7\", \"+6e-1\", \"53.5e93\", \"-123.456e789\"], while the following are not valid numbers: [\"abc\", \"1a\", \"1e\", \"e3\", \"99e2.5\", \"--6\", \"-+3\", \"95a54e53\"].\n        Given a string s, return true if s is a valid number.\n        Example 1:\n        Input: s = \"0\"\n        Output: true\n        Example 2:\n        Input: s = \"e\"\n        Output: false\n        Example 3:\n        Input: s = \".\"\n        Output: false\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        return self.isNumberRecursive(s, 0, {}, set())"
    },
    {
        "number": 65,
        "title": "Valid Number",
        "difficulty": 2,
        "prompt": "class Solution:\n    def isNumber(self, s: str) -> bool:\n        \"\"\"\n        A valid number can be split up into these components (in order):\n            A decimal number or an integer.\n            (Optional) An 'e' or 'E', followed by an integer.\n        A decimal number can be split up into these components (in order):\n            (Optional) A sign character (either '+' or '-').\n            One of the following formats:\n                One or more digits, followed by a dot '.'.\n                One or more digits, followed by a dot '.', followed by one or more digits.\n                A dot '.', followed by one or more digits.\n        An integer can be split up into these components (in order):\n            (Optional) A sign character (either '+' or '-').\n            One or more digits.\n        For example, all the following are valid numbers: [\"2\", \"0089\", \"-0.1\", \"+3.14\", \"4.\", \"-.9\", \"2e10\", \"-90E3\", \"3e+7\", \"+6e-1\", \"53.5e93\", \"-123.456e789\"], while the following are not valid numbers: [\"abc\", \"1a\", \"1e\", \"e3\", \"99e2.5\", \"--6\", \"-+3\", \"95a54e53\"].\n        Given a string s, return true if s is a valid number.\n        Example 1:\n        Input: s = \"0\"\n        Output: true\n        Example 2:\n        Input: s = \"e\"\n        Output: false\n        Example 3:\n        Input: s = \".\"\n        Output: false\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 3,
        "answer": "        s = s.strip()\n        if not s:\n            return False\n        i, l = 0, len(s)\n        while i < l and s[i] =='':\n            i += 1\n        if i == l:\n            return False\n        s = s[i:]\n        if s[0] in '+-':\n            s = s[1:]\n        if not s or s[0] in 'eE':\n            return False\n        if s[0] in '+-':\n            s = s[1:]\n        if not s:\n            return False\n        if s[0] in 'eE':\n            return False\n        if s[0] not in '0123456789':\n            return False\n        if s[0] in '0123456789':\n            i = 0\n            while i < len(s) and (s[i] in '0123456789' or s[i] in '.'):\n                i += 1\n            if i < len(s) and s[i] in '+-':\n                s = s[1:]\n                i = 0\n                while i < len(s) and (s[i] in '0123456789' or s[i] in '.'):\n                    i += 1\n"
    },
    {
        "number": 65,
        "title": "Valid Number",
        "difficulty": 2,
        "prompt": "class Solution:\n    def isNumber(self, s: str) -> bool:\n        \"\"\"\n        A valid number can be split up into these components (in order):\n            A decimal number or an integer.\n            (Optional) An 'e' or 'E', followed by an integer.\n        A decimal number can be split up into these components (in order):\n            (Optional) A sign character (either '+' or '-').\n            One of the following formats:\n                One or more digits, followed by a dot '.'.\n                One or more digits, followed by a dot '.', followed by one or more digits.\n                A dot '.', followed by one or more digits.\n        An integer can be split up into these components (in order):\n            (Optional) A sign character (either '+' or '-').\n            One or more digits.\n        For example, all the following are valid numbers: [\"2\", \"0089\", \"-0.1\", \"+3.14\", \"4.\", \"-.9\", \"2e10\", \"-90E3\", \"3e+7\", \"+6e-1\", \"53.5e93\", \"-123.456e789\"], while the following are not valid numbers: [\"abc\", \"1a\", \"1e\", \"e3\", \"99e2.5\", \"--6\", \"-+3\", \"95a54e53\"].\n        Given a string s, return true if s is a valid number.\n        Example 1:\n        Input: s = \"0\"\n        Output: true\n        Example 2:\n        Input: s = \"e\"\n        Output: false\n        Example 3:\n        Input: s = \".\"\n        Output: false\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 4,
        "answer": "        # \u672c\u9898\u6211\u5077\u61d2\u7684\u5199\u6210\u4e863\u4e2acase\uff0c \u53ef\u4ee5\u628acase1\u505a\u66f4\u7ec6\u5316\n        # \u5b9e\u9645\u4e0a\u8fd93\u4e2acase\u4e5f\u53ef\u4ee5\u76f4\u63a5\u8f6c\u5316\u62101\u4e2acase\n        # \u4e00\u4e2acase\u5206\u4e3a3\u4e2a\u90e8\u5206\uff0c \u7b2c\u4e00\u4e2a\u90e8\u5206\u662f\u5305\u542b0\u6216\u8005\u5c0f\u6570\u70b9\u7684\uff0c\u7b2c\u4e8c\u90e8\u5206\u662f\u5305\u542be\u7684\uff0c\u7b2c\u4e09\u90e8\u5206\u662f\u5305\u542b\u6b63\u8d1f\u53f7\u7684\uff0c\n        # \u7136\u540e\u7b2c\u4e00\u90e8\u5206\u7684\u7b2c\u4e00\u4e2a\u5143\u7d20\u5fc5\u5b9a\u662f\u5c0f\u6570\u70b9\u6216\u8005\u6570\u5b57\uff0c\u7b2c\u4e8c\u90e8\u5206\u7684\u7b2c\u4e00\u4e2a\u5143\u7d20\u5fc5\u5b9a\u662fe\uff0c\n        # \u7b2c\u4e09\u90e8\u5206\u7684\u7b2c\u4e00\u4e2a\u5143\u7d20\u5fc5\u5b9a\u662f\u6b63\u8d1f\u53f7\ufffd"
    },
    {
        "number": 65,
        "title": "Valid Number",
        "difficulty": 2,
        "prompt": "class Solution:\n    def isNumber(self, s: str) -> bool:\n        \"\"\"\n        A valid number can be split up into these components (in order):\n            A decimal number or an integer.\n            (Optional) An 'e' or 'E', followed by an integer.\n        A decimal number can be split up into these components (in order):\n            (Optional) A sign character (either '+' or '-').\n            One of the following formats:\n                One or more digits, followed by a dot '.'.\n                One or more digits, followed by a dot '.', followed by one or more digits.\n                A dot '.', followed by one or more digits.\n        An integer can be split up into these components (in order):\n            (Optional) A sign character (either '+' or '-').\n            One or more digits.\n        For example, all the following are valid numbers: [\"2\", \"0089\", \"-0.1\", \"+3.14\", \"4.\", \"-.9\", \"2e10\", \"-90E3\", \"3e+7\", \"+6e-1\", \"53.5e93\", \"-123.456e789\"], while the following are not valid numbers: [\"abc\", \"1a\", \"1e\", \"e3\", \"99e2.5\", \"--6\", \"-+3\", \"95a54e53\"].\n        Given a string s, return true if s is a valid number.\n        Example 1:\n        Input: s = \"0\"\n        Output: true\n        Example 2:\n        Input: s = \"e\"\n        Output: false\n        Example 3:\n        Input: s = \".\"\n        Output: false\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 5,
        "answer": "        if not s:\n            return False\n        if s[0] == '+' or s[0] == '-':\n            s = s[1:]\n        return self.is_decimal(s) or self.is_int(s) or self.is_scientific_notation(s)"
    },
    {
        "number": 66,
        "title": "Plus One",
        "difficulty": 0,
        "prompt": "class Solution:\n    def plusOne(self, digits: List[int]) -> List[int]:\n        \"\"\"\n        You are given a large integer represented as an integer array digits, where each digits[i] is the ith digit of the integer. The digits are ordered from most significant to least significant in left-to-right order. The large integer does not contain any leading 0's.\n        Increment the large integer by one and return the resulting array of digits.\n        Example 1:\n        Input: digits = [1,2,3]\n        Output: [1,2,4]\n        Explanation: The array represents the integer 123.\n        Incrementing by one gives 123 + 1 = 124.\n        Thus, the result should be [1,2,4].\n        Example 2:\n        Input: digits = [4,3,2,1]\n        Output: [4,3,2,2]\n        Explanation: The array represents the integer 4321.\n        Incrementing by one gives 4321 + 1 = 4322.\n        Thus, the result should be [4,3,2,2].\n        Example 3:\n        Input: digits = [9]\n        Output: [1,0]\n        Explanation: The array represents the integer 9.\n        Incrementing by one gives 9 + 1 = 10.\n        Thus, the result should be [1,0].\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        digits[-1] += 1\n        for i in range(len(digits)-1, -1, -1):\n            if digits[i] > 9:\n                digits[i] = 0\n                if i == 0:\n                    digits.insert(0, 1)\n                else:\n                    digits[i-1] += 1\n            else:\n                break\n        return digits"
    },
    {
        "number": 66,
        "title": "Plus One",
        "difficulty": 0,
        "prompt": "class Solution:\n    def plusOne(self, digits: List[int]) -> List[int]:\n        \"\"\"\n        You are given a large integer represented as an integer array digits, where each digits[i] is the ith digit of the integer. The digits are ordered from most significant to least significant in left-to-right order. The large integer does not contain any leading 0's.\n        Increment the large integer by one and return the resulting array of digits.\n        Example 1:\n        Input: digits = [1,2,3]\n        Output: [1,2,4]\n        Explanation: The array represents the integer 123.\n        Incrementing by one gives 123 + 1 = 124.\n        Thus, the result should be [1,2,4].\n        Example 2:\n        Input: digits = [4,3,2,1]\n        Output: [4,3,2,2]\n        Explanation: The array represents the integer 4321.\n        Incrementing by one gives 4321 + 1 = 4322.\n        Thus, the result should be [4,3,2,2].\n        Example 3:\n        Input: digits = [9]\n        Output: [1,0]\n        Explanation: The array represents the integer 9.\n        Incrementing by one gives 9 + 1 = 10.\n        Thus, the result should be [1,0].\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        num_str = \"\"\n        for i in digits:\n            num_str += str(i)\n        num_int = int(num_str)\n        num_int += 1\n        num_str = str(num_int)\n        digit_arr = [int(num) for num in num_str]\n        return digit_arr"
    },
    {
        "number": 66,
        "title": "Plus One",
        "difficulty": 0,
        "prompt": "class Solution:\n    def plusOne(self, digits: List[int]) -> List[int]:\n        \"\"\"\n        You are given a large integer represented as an integer array digits, where each digits[i] is the ith digit of the integer. The digits are ordered from most significant to least significant in left-to-right order. The large integer does not contain any leading 0's.\n        Increment the large integer by one and return the resulting array of digits.\n        Example 1:\n        Input: digits = [1,2,3]\n        Output: [1,2,4]\n        Explanation: The array represents the integer 123.\n        Incrementing by one gives 123 + 1 = 124.\n        Thus, the result should be [1,2,4].\n        Example 2:\n        Input: digits = [4,3,2,1]\n        Output: [4,3,2,2]\n        Explanation: The array represents the integer 4321.\n        Incrementing by one gives 4321 + 1 = 4322.\n        Thus, the result should be [4,3,2,2].\n        Example 3:\n        Input: digits = [9]\n        Output: [1,0]\n        Explanation: The array represents the integer 9.\n        Incrementing by one gives 9 + 1 = 10.\n        Thus, the result should be [1,0].\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 3,
        "answer": "        # Solution:\n        \"\"\"\n        i = len(digits) - 1\n        while digits[i] == 9:\n            digits[i] = 0\n            i -= 1\n            if i < 0:\n                digits.insert(0, 1)\n                break\n        else:\n            digits[i] += 1\n        return digits\n        \"\"\"\n        # Time: O(n); n is the length of the digits list\n        # Space: O(1)\n        \"\"\"\n        Given a non-empty array of digits representing a non-negative integer, increment one to the integer.\n        The digits are stored such that the most significant digit is at the head of the list, and each element in the array contains a single digit.\n        You may assume the integer does not contain any leading zero, except the number 0 itself.\n        Example 1:\n        Input: digits = [1,2,3]\n        Output: [1,2,4]\n        Explanation: The array represents the integer 123.\n        Example 2:\n        Input: digits = [4,3,2,1]\n        Output: [4,3,2,2]\n        Explanation: The array represents the integer 4321.\n        Example 3:\n        Input: digits = [0]\n        Output: [1]\n        \"\"\"\n"
    },
    {
        "number": 66,
        "title": "Plus One",
        "difficulty": 0,
        "prompt": "class Solution:\n    def plusOne(self, digits: List[int]) -> List[int]:\n        \"\"\"\n        You are given a large integer represented as an integer array digits, where each digits[i] is the ith digit of the integer. The digits are ordered from most significant to least significant in left-to-right order. The large integer does not contain any leading 0's.\n        Increment the large integer by one and return the resulting array of digits.\n        Example 1:\n        Input: digits = [1,2,3]\n        Output: [1,2,4]\n        Explanation: The array represents the integer 123.\n        Incrementing by one gives 123 + 1 = 124.\n        Thus, the result should be [1,2,4].\n        Example 2:\n        Input: digits = [4,3,2,1]\n        Output: [4,3,2,2]\n        Explanation: The array represents the integer 4321.\n        Incrementing by one gives 4321 + 1 = 4322.\n        Thus, the result should be [4,3,2,2].\n        Example 3:\n        Input: digits = [9]\n        Output: [1,0]\n        Explanation: The array represents the integer 9.\n        Incrementing by one gives 9 + 1 = 10.\n        Thus, the result should be [1,0].\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 4,
        "answer": "        for i in range(len(digits) - 1, -1, -1):\n            if digits[i] == 9:\n                digits[i] = 0\n            else:\n                digits[i] += 1\n                break\n        if digits[0] == 0:\n            digits = [1] + digits\n        return digits"
    },
    {
        "number": 66,
        "title": "Plus One",
        "difficulty": 0,
        "prompt": "class Solution:\n    def plusOne(self, digits: List[int]) -> List[int]:\n        \"\"\"\n        You are given a large integer represented as an integer array digits, where each digits[i] is the ith digit of the integer. The digits are ordered from most significant to least significant in left-to-right order. The large integer does not contain any leading 0's.\n        Increment the large integer by one and return the resulting array of digits.\n        Example 1:\n        Input: digits = [1,2,3]\n        Output: [1,2,4]\n        Explanation: The array represents the integer 123.\n        Incrementing by one gives 123 + 1 = 124.\n        Thus, the result should be [1,2,4].\n        Example 2:\n        Input: digits = [4,3,2,1]\n        Output: [4,3,2,2]\n        Explanation: The array represents the integer 4321.\n        Incrementing by one gives 4321 + 1 = 4322.\n        Thus, the result should be [4,3,2,2].\n        Example 3:\n        Input: digits = [9]\n        Output: [1,0]\n        Explanation: The array represents the integer 9.\n        Incrementing by one gives 9 + 1 = 10.\n        Thus, the result should be [1,0].\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 5,
        "answer": "        for i in range(len(digits)-1, -1, -1):\n            if digits[i]!= 9:\n                digits[i] += 1\n                return digits\n            digits[i] = 0\n        digits.insert(0, 1)\n        return digits\n<|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>"
    },
    {
        "number": 67,
        "title": "Add Binary",
        "difficulty": 0,
        "prompt": "class Solution:\n    def addBinary(self, a: str, b: str) -> str:\n        \"\"\"\n        Given two binary strings a and b, return their sum as a binary string.\n        Example 1:\n        Input: a = \"11\", b = \"1\"\n        Output: \"100\"\n        Example 2:\n        Input: a = \"1010\", b = \"1011\"\n        Output: \"10101\"\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        # [Ideas]\n        # 1. reverse both binary strings, 2. add them, 3. reverse the sum back\n        # Time: O(n), space: O(n)\n        # NOTE: We can also use list as stack, then only need to reverse a and b\n        return bin(int(a[::-1], 2) + int(b[::-1], 2))[2:]"
    },
    {
        "number": 67,
        "title": "Add Binary",
        "difficulty": 0,
        "prompt": "class Solution:\n    def addBinary(self, a: str, b: str) -> str:\n        \"\"\"\n        Given two binary strings a and b, return their sum as a binary string.\n        Example 1:\n        Input: a = \"11\", b = \"1\"\n        Output: \"100\"\n        Example 2:\n        Input: a = \"1010\", b = \"1011\"\n        Output: \"10101\"\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        \n        # Time: O(max(M,N)), where M, N are lengths of a and b, respectively.\n        # Space: O(max(M,N))\n        \n        if len(a) < len(b):\n            a, b = b, a\n        \n        b_len = len(b)\n        result = ''\n        carry = 0\n        \n        for i in range(b_len):\n            a_num = int(a[-1 * (b_len - i)])\n            b_num = int(b[-1 * (b_len - i)])\n            sum_binary = a_num + b_num + carry\n            \n            if sum_binary % 2 == 0:\n                result = '0' + result\n                carry = 0\n            else:\n                result = '1' + result\n                carry = 1\n            \n        if carry == 1:\n            result = '1' + result\n        \n        return result\n<|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>"
    },
    {
        "number": 67,
        "title": "Add Binary",
        "difficulty": 0,
        "prompt": "class Solution:\n    def addBinary(self, a: str, b: str) -> str:\n        \"\"\"\n        Given two binary strings a and b, return their sum as a binary string.\n        Example 1:\n        Input: a = \"11\", b = \"1\"\n        Output: \"100\"\n        Example 2:\n        Input: a = \"1010\", b = \"1011\"\n        Output: \"10101\"\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 3,
        "answer": "        a = list(a)\n        b = list(b)\n        # \u5148\u5bf9\u957f\u5ea6\u4e0d\u76f8\u7b49\u7684\u5217\u8868a\u548cb\u8fdb\u884c\u957f\u5ea6\u8865\u5168\uff0c\u957f\u5ea6\u4e0d\u8db3\u7684\u5728\u524d\u9762\u88650\n        max_len = max(len(a), len(b))\n        if len(a) < max_len:\n            a = [0] * (max_len - len(a)) + a\n        if len(b) < max_len:\n            b = [0] * (max_len - len(b)) + b"
    },
    {
        "number": 67,
        "title": "Add Binary",
        "difficulty": 0,
        "prompt": "class Solution:\n    def addBinary(self, a: str, b: str) -> str:\n        \"\"\"\n        Given two binary strings a and b, return their sum as a binary string.\n        Example 1:\n        Input: a = \"11\", b = \"1\"\n        Output: \"100\"\n        Example 2:\n        Input: a = \"1010\", b = \"1011\"\n        Output: \"10101\"\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 4,
        "answer": "        a, b = a[::-1], b[::-1]\n        if len(a) < len(b):\n            a, b = b, a\n        num = 0\n        n = len(b)\n        for i in range(n):\n            num += int(a[i])\n            num += int(b[i])\n            a[i] = num % 2\n            num //= 2\n        if num > 0:\n            a.append(num)\n        return \"\".join(map(str, a[::-1]))"
    },
    {
        "number": 67,
        "title": "Add Binary",
        "difficulty": 0,
        "prompt": "class Solution:\n    def addBinary(self, a: str, b: str) -> str:\n        \"\"\"\n        Given two binary strings a and b, return their sum as a binary string.\n        Example 1:\n        Input: a = \"11\", b = \"1\"\n        Output: \"100\"\n        Example 2:\n        Input: a = \"1010\", b = \"1011\"\n        Output: \"10101\"\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 5,
        "answer": "        # 4ms, faster than 95% of Python3.\n        # return bin(int(a, 2) + int(b, 2))[2:]"
    },
    {
        "number": 68,
        "title": "Text Justification",
        "difficulty": 2,
        "prompt": "class Solution:\n    def fullJustify(self, words: List[str], maxWidth: int) -> List[str]:\n        \"\"\"\n        Given an array of strings words and a width maxWidth, format the text such that each line has exactly maxWidth characters and is fully (left and right) justified.\n        You should pack your words in a greedy approach; that is, pack as many words as you can in each line. Pad extra spaces'' when necessary so that each line has exactly maxWidth characters.\n        Extra spaces between words should be distributed as evenly as possible. If the number of spaces on a line does not divide evenly between words, the empty slots on the left will be assigned more spaces than the slots on the right.\n        For the last line of text, it should be left-justified, and no extra space is inserted between words.\n        Note:\n            A word is defined as a character sequence consisting of non-space characters only.\n            Each word's length is guaranteed to be greater than 0 and not exceed maxWidth.\n            The input array words contains at least one word.\n        Example 1:\n        Input: words = [\"This\", \"is\", \"an\", \"example\", \"of\", \"text\", \"justification.\"], maxWidth = 16\n        Output:\n        [\n           \"This    is    an\",\n           \"example  of text\",\n           \"justification.  \"\n        ]\n        Example 2:\n        Input: words = [\"What\",\"must\",\"be\",\"acknowledgment\",\"shall\",\"be\"], maxWidth = 16\n        Output:\n        [\n          \"What   must   be\",\n          \"acknowledgment  \",\n          \"shall be        \"\n        ]\n        Explanation: Note that the last line is \"shall be    \" instead of \"shall     be\", because the last line must be left-justified instead of fully-justified.\n        Note that the second line is also left-justified because it contains only one word.\n        Example 3:\n        Input: words = [\"Science\",\"is\",\"what\",\"we\",\"understand\",\"well\",\"enough\",\"to\",\"explain\",\"to\",\"a\",\"computer.\",\"Art\",\"is\",\"everything\",\"else\",\"we\",\"do\"], maxWidth = 20\n        Output:\n        [\n          \"Science  is  what we\",\n          \"understand      well\",\n          \"enough to explain to\",\n          \"a  computer.  Art is\",\n          \"everything  else  we\",\n          \"do                  \"\n        ]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        ans = []\n        line = []\n        space = maxWidth\n        for w in words:\n            if len(line) + len(w) <= maxWidth:\n                line.append(w)\n                space -= len(w)\n            else:\n                ans.append(self.format(line, space))\n                line = [w]\n                space = maxWidth - len(w)\n        ans.append(self.format(line, space))\n        return ans"
    },
    {
        "number": 68,
        "title": "Text Justification",
        "difficulty": 2,
        "prompt": "class Solution:\n    def fullJustify(self, words: List[str], maxWidth: int) -> List[str]:\n        \"\"\"\n        Given an array of strings words and a width maxWidth, format the text such that each line has exactly maxWidth characters and is fully (left and right) justified.\n        You should pack your words in a greedy approach; that is, pack as many words as you can in each line. Pad extra spaces'' when necessary so that each line has exactly maxWidth characters.\n        Extra spaces between words should be distributed as evenly as possible. If the number of spaces on a line does not divide evenly between words, the empty slots on the left will be assigned more spaces than the slots on the right.\n        For the last line of text, it should be left-justified, and no extra space is inserted between words.\n        Note:\n            A word is defined as a character sequence consisting of non-space characters only.\n            Each word's length is guaranteed to be greater than 0 and not exceed maxWidth.\n            The input array words contains at least one word.\n        Example 1:\n        Input: words = [\"This\", \"is\", \"an\", \"example\", \"of\", \"text\", \"justification.\"], maxWidth = 16\n        Output:\n        [\n           \"This    is    an\",\n           \"example  of text\",\n           \"justification.  \"\n        ]\n        Example 2:\n        Input: words = [\"What\",\"must\",\"be\",\"acknowledgment\",\"shall\",\"be\"], maxWidth = 16\n        Output:\n        [\n          \"What   must   be\",\n          \"acknowledgment  \",\n          \"shall be        \"\n        ]\n        Explanation: Note that the last line is \"shall be    \" instead of \"shall     be\", because the last line must be left-justified instead of fully-justified.\n        Note that the second line is also left-justified because it contains only one word.\n        Example 3:\n        Input: words = [\"Science\",\"is\",\"what\",\"we\",\"understand\",\"well\",\"enough\",\"to\",\"explain\",\"to\",\"a\",\"computer.\",\"Art\",\"is\",\"everything\",\"else\",\"we\",\"do\"], maxWidth = 20\n        Output:\n        [\n          \"Science  is  what we\",\n          \"understand      well\",\n          \"enough to explain to\",\n          \"a  computer.  Art is\",\n          \"everything  else  we\",\n          \"do                  \"\n        ]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        r = []\n        i = 0\n        while i < len(words):\n            if len(words[i]) <= maxWidth:\n                r.append(words[i])\n                i += 1\n            else:\n                start = i\n                end = i + 1\n                cnt = 1\n                while end < len(words) and (words[end] == \" \" or len(words[end]) <= maxWidth):\n                    cnt += 1\n                    end += 1\n                if end == len(words):\n                    # r.append(words[start])\n                    # r.append(''.join(words[start + 1:end]) +'' * (maxWidth - cnt))\n                    r.append(words[start] +'' * (maxWidth - cnt))\n                else:\n                    cnt = cnt - 1\n                    # r.append(words[start] +'' * (maxWidth - cnt))\n                    # r.append(''.join(words[start + 1:end]) +'' * (maxWidth - cnt))\n                    r.append(words[start] +'' * (maxWidth - cnt))\n                i = end\n        return r"
    },
    {
        "number": 68,
        "title": "Text Justification",
        "difficulty": 2,
        "prompt": "class Solution:\n    def fullJustify(self, words: List[str], maxWidth: int) -> List[str]:\n        \"\"\"\n        Given an array of strings words and a width maxWidth, format the text such that each line has exactly maxWidth characters and is fully (left and right) justified.\n        You should pack your words in a greedy approach; that is, pack as many words as you can in each line. Pad extra spaces'' when necessary so that each line has exactly maxWidth characters.\n        Extra spaces between words should be distributed as evenly as possible. If the number of spaces on a line does not divide evenly between words, the empty slots on the left will be assigned more spaces than the slots on the right.\n        For the last line of text, it should be left-justified, and no extra space is inserted between words.\n        Note:\n            A word is defined as a character sequence consisting of non-space characters only.\n            Each word's length is guaranteed to be greater than 0 and not exceed maxWidth.\n            The input array words contains at least one word.\n        Example 1:\n        Input: words = [\"This\", \"is\", \"an\", \"example\", \"of\", \"text\", \"justification.\"], maxWidth = 16\n        Output:\n        [\n           \"This    is    an\",\n           \"example  of text\",\n           \"justification.  \"\n        ]\n        Example 2:\n        Input: words = [\"What\",\"must\",\"be\",\"acknowledgment\",\"shall\",\"be\"], maxWidth = 16\n        Output:\n        [\n          \"What   must   be\",\n          \"acknowledgment  \",\n          \"shall be        \"\n        ]\n        Explanation: Note that the last line is \"shall be    \" instead of \"shall     be\", because the last line must be left-justified instead of fully-justified.\n        Note that the second line is also left-justified because it contains only one word.\n        Example 3:\n        Input: words = [\"Science\",\"is\",\"what\",\"we\",\"understand\",\"well\",\"enough\",\"to\",\"explain\",\"to\",\"a\",\"computer.\",\"Art\",\"is\",\"everything\",\"else\",\"we\",\"do\"], maxWidth = 20\n        Output:\n        [\n          \"Science  is  what we\",\n          \"understand      well\",\n          \"enough to explain to\",\n          \"a  computer.  Art is\",\n          \"everything  else  we\",\n          \"do                  \"\n        ]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 3,
        "answer": "        self.ans = []\n        self.words = words\n        self.maxWidth = maxWidth\n        self.col = 0\n        self.row = 0\n        self.ans = []\n        self.justify()\n        return self.ans"
    },
    {
        "number": 68,
        "title": "Text Justification",
        "difficulty": 2,
        "prompt": "class Solution:\n    def fullJustify(self, words: List[str], maxWidth: int) -> List[str]:\n        \"\"\"\n        Given an array of strings words and a width maxWidth, format the text such that each line has exactly maxWidth characters and is fully (left and right) justified.\n        You should pack your words in a greedy approach; that is, pack as many words as you can in each line. Pad extra spaces'' when necessary so that each line has exactly maxWidth characters.\n        Extra spaces between words should be distributed as evenly as possible. If the number of spaces on a line does not divide evenly between words, the empty slots on the left will be assigned more spaces than the slots on the right.\n        For the last line of text, it should be left-justified, and no extra space is inserted between words.\n        Note:\n            A word is defined as a character sequence consisting of non-space characters only.\n            Each word's length is guaranteed to be greater than 0 and not exceed maxWidth.\n            The input array words contains at least one word.\n        Example 1:\n        Input: words = [\"This\", \"is\", \"an\", \"example\", \"of\", \"text\", \"justification.\"], maxWidth = 16\n        Output:\n        [\n           \"This    is    an\",\n           \"example  of text\",\n           \"justification.  \"\n        ]\n        Example 2:\n        Input: words = [\"What\",\"must\",\"be\",\"acknowledgment\",\"shall\",\"be\"], maxWidth = 16\n        Output:\n        [\n          \"What   must   be\",\n          \"acknowledgment  \",\n          \"shall be        \"\n        ]\n        Explanation: Note that the last line is \"shall be    \" instead of \"shall     be\", because the last line must be left-justified instead of fully-justified.\n        Note that the second line is also left-justified because it contains only one word.\n        Example 3:\n        Input: words = [\"Science\",\"is\",\"what\",\"we\",\"understand\",\"well\",\"enough\",\"to\",\"explain\",\"to\",\"a\",\"computer.\",\"Art\",\"is\",\"everything\",\"else\",\"we\",\"do\"], maxWidth = 20\n        Output:\n        [\n          \"Science  is  what we\",\n          \"understand      well\",\n          \"enough to explain to\",\n          \"a  computer.  Art is\",\n          \"everything  else  we\",\n          \"do                  \"\n        ]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 4,
        "answer": "        \n        # method 1: dfs, dp, memo, O(N^2)\n        # dfs to build each line, then dp to calculate each line length\n        # O(N^2)\n        # res = []\n        # self.dfs(0, words, maxWidth, res, [])\n        # return res\n        \n    \n    def dfs(self, start, words, maxWidth, res, cur_line):\n        # if start == len(words):\n        #     res.append(' '.join(cur_line) +''*(maxWidth-sum(len(w) for w in cur_line)))\n        #     return\n        \n        if start == len(words):\n            res.append(' '.join(cur_line) +''*(maxWidth-sum(len(w) for w in cur_line)))\n            return\n        \n        # if not cur_line:\n        #     cur_line.append(words[start])\n        #     self.dfs(start+1, words, maxWidth, res, cur_line)\n        #     cur_line.pop()\n        #     return\n        \n        # cur_line.append(words[start])\n        # if sum(len(w) for w in cur_line) + len"
    },
    {
        "number": 68,
        "title": "Text Justification",
        "difficulty": 2,
        "prompt": "class Solution:\n    def fullJustify(self, words: List[str], maxWidth: int) -> List[str]:\n        \"\"\"\n        Given an array of strings words and a width maxWidth, format the text such that each line has exactly maxWidth characters and is fully (left and right) justified.\n        You should pack your words in a greedy approach; that is, pack as many words as you can in each line. Pad extra spaces'' when necessary so that each line has exactly maxWidth characters.\n        Extra spaces between words should be distributed as evenly as possible. If the number of spaces on a line does not divide evenly between words, the empty slots on the left will be assigned more spaces than the slots on the right.\n        For the last line of text, it should be left-justified, and no extra space is inserted between words.\n        Note:\n            A word is defined as a character sequence consisting of non-space characters only.\n            Each word's length is guaranteed to be greater than 0 and not exceed maxWidth.\n            The input array words contains at least one word.\n        Example 1:\n        Input: words = [\"This\", \"is\", \"an\", \"example\", \"of\", \"text\", \"justification.\"], maxWidth = 16\n        Output:\n        [\n           \"This    is    an\",\n           \"example  of text\",\n           \"justification.  \"\n        ]\n        Example 2:\n        Input: words = [\"What\",\"must\",\"be\",\"acknowledgment\",\"shall\",\"be\"], maxWidth = 16\n        Output:\n        [\n          \"What   must   be\",\n          \"acknowledgment  \",\n          \"shall be        \"\n        ]\n        Explanation: Note that the last line is \"shall be    \" instead of \"shall     be\", because the last line must be left-justified instead of fully-justified.\n        Note that the second line is also left-justified because it contains only one word.\n        Example 3:\n        Input: words = [\"Science\",\"is\",\"what\",\"we\",\"understand\",\"well\",\"enough\",\"to\",\"explain\",\"to\",\"a\",\"computer.\",\"Art\",\"is\",\"everything\",\"else\",\"we\",\"do\"], maxWidth = 20\n        Output:\n        [\n          \"Science  is  what we\",\n          \"understand      well\",\n          \"enough to explain to\",\n          \"a  computer.  Art is\",\n          \"everything  else  we\",\n          \"do                  \"\n        ]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 5,
        "answer": "        # Naive solution: put each word into a list, then print the list with \\n between each word.\n        # Only if it is the last line, print it with \\n and left-justify.\n        # Time complexity: O(n)\n        # Space complexity: O(n)\n        # ans = []\n        # num_words = len(words)\n        # if num_words == 0:\n        #     return ans\n        # curr_line = []\n        # curr_length = 0\n        # for word in words:\n        #     if curr_length + len(word) + len(curr_line) <= maxWidth:\n        #         curr_line.append(word)\n        #         curr_length += len(word)\n        #     else:\n        #         ans.append(self.printLine(curr_line, curr_length, maxWidth))\n        #         curr_line = [word]\n        #         curr_length = len(word)\n        # if curr_line!= []:\n        #     ans.append(self.printLine(curr_line, curr_length, maxWidth))\n        # return ans\n        \n        # Edge case 1: empty list of words\n        if not words:\n            return []\n"
    },
    {
        "number": 69,
        "title": "Sqrt(x)",
        "difficulty": 0,
        "prompt": "class Solution:\n    def mySqrt(self, x: int) -> int:\n        \"\"\"\n        Given a non-negative integer x, return the square root of x rounded down to the nearest integer. The returned integer should be non-negative as well.\n        You must not use any built-in exponent function or operator.\n            For example, do not use pow(x, 0.5) in c++ or x ** 0.5 in python.\n        Example 1:\n        Input: x = 4\n        Output: 2\n        Explanation: The square root of 4 is 2, so we return 2.\n        Example 2:\n        Input: x = 8\n        Output: 2\n        Explanation: The square root of 8 is 2.82842..., and since we round it down to the nearest integer, 2 is returned.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        if x < 2:\n            return x\n        left = 2\n        right = x // 2"
    },
    {
        "number": 69,
        "title": "Sqrt(x)",
        "difficulty": 0,
        "prompt": "class Solution:\n    def mySqrt(self, x: int) -> int:\n        \"\"\"\n        Given a non-negative integer x, return the square root of x rounded down to the nearest integer. The returned integer should be non-negative as well.\n        You must not use any built-in exponent function or operator.\n            For example, do not use pow(x, 0.5) in c++ or x ** 0.5 in python.\n        Example 1:\n        Input: x = 4\n        Output: 2\n        Explanation: The square root of 4 is 2, so we return 2.\n        Example 2:\n        Input: x = 8\n        Output: 2\n        Explanation: The square root of 8 is 2.82842..., and since we round it down to the nearest integer, 2 is returned.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        if x == 0 or x == 1:\n            return x\n        l, r = 1, x\n        while l + 1 < r:\n            m = l + (r - l) // 2\n            if m * m <= x < (m + 1) * (m + 1):\n                return m\n            elif m * m > x:\n                r = m\n            else:\n                l = m"
    },
    {
        "number": 69,
        "title": "Sqrt(x)",
        "difficulty": 0,
        "prompt": "class Solution:\n    def mySqrt(self, x: int) -> int:\n        \"\"\"\n        Given a non-negative integer x, return the square root of x rounded down to the nearest integer. The returned integer should be non-negative as well.\n        You must not use any built-in exponent function or operator.\n            For example, do not use pow(x, 0.5) in c++ or x ** 0.5 in python.\n        Example 1:\n        Input: x = 4\n        Output: 2\n        Explanation: The square root of 4 is 2, so we return 2.\n        Example 2:\n        Input: x = 8\n        Output: 2\n        Explanation: The square root of 8 is 2.82842..., and since we round it down to the nearest integer, 2 is returned.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 3,
        "answer": "        # iterative binary search\n        # Time: O(logn)\n        # Space: O(1)\n        left, right = 0, x\n        while left < right:\n            mid = left + (right-left) // 2\n            if mid * mid > x:\n                right = mid\n            else:\n                left = mid + 1\n        return left - 1"
    },
    {
        "number": 69,
        "title": "Sqrt(x)",
        "difficulty": 0,
        "prompt": "class Solution:\n    def mySqrt(self, x: int) -> int:\n        \"\"\"\n        Given a non-negative integer x, return the square root of x rounded down to the nearest integer. The returned integer should be non-negative as well.\n        You must not use any built-in exponent function or operator.\n            For example, do not use pow(x, 0.5) in c++ or x ** 0.5 in python.\n        Example 1:\n        Input: x = 4\n        Output: 2\n        Explanation: The square root of 4 is 2, so we return 2.\n        Example 2:\n        Input: x = 8\n        Output: 2\n        Explanation: The square root of 8 is 2.82842..., and since we round it down to the nearest integer, 2 is returned.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 4,
        "answer": "        if x == 0:\n            return 0\n        if x == 1:\n            return 1\n        # 0.5 * x = x - 0.5 * x\n        left = 0\n        right = x // 2\n        mid = 0\n        while True:\n            mid = left + (right - left) // 2\n            if mid * mid == x:\n                return mid\n            elif mid * mid > x:\n                right = mid\n            else:\n                left = mid"
    },
    {
        "number": 69,
        "title": "Sqrt(x)",
        "difficulty": 0,
        "prompt": "class Solution:\n    def mySqrt(self, x: int) -> int:\n        \"\"\"\n        Given a non-negative integer x, return the square root of x rounded down to the nearest integer. The returned integer should be non-negative as well.\n        You must not use any built-in exponent function or operator.\n            For example, do not use pow(x, 0.5) in c++ or x ** 0.5 in python.\n        Example 1:\n        Input: x = 4\n        Output: 2\n        Explanation: The square root of 4 is 2, so we return 2.\n        Example 2:\n        Input: x = 8\n        Output: 2\n        Explanation: The square root of 8 is 2.82842..., and since we round it down to the nearest integer, 2 is returned.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 5,
        "answer": "        return int(x ** 0.5)<|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>"
    },
    {
        "number": 70,
        "title": "Climbing Stairs",
        "difficulty": 0,
        "prompt": "class Solution:\n    def climbStairs(self, n: int) -> int:\n        \"\"\"\n        You are climbing a staircase. It takes n steps to reach the top.\n        Each time you can either climb 1 or 2 steps. In how many distinct ways can you climb to the top?\n        Example 1:\n        Input: n = 2\n        Output: 2\n        Explanation: There are two ways to climb to the top.\n        1. 1 step + 1 step\n        2. 2 steps\n        Example 2:\n        Input: n = 3\n        Output: 3\n        Explanation: There are three ways to climb to the top.\n        1. 1 step + 1 step + 1 step\n        2. 1 step + 2 steps\n        3. 2 steps + 1 step\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        if n == 1:\n            return 1\n        elif n == 2:\n            return 2\n        else:\n            a = 1\n            b = 2\n            for i in range(n - 2):\n                a, b = b, a + b\n            return b"
    },
    {
        "number": 70,
        "title": "Climbing Stairs",
        "difficulty": 0,
        "prompt": "class Solution:\n    def climbStairs(self, n: int) -> int:\n        \"\"\"\n        You are climbing a staircase. It takes n steps to reach the top.\n        Each time you can either climb 1 or 2 steps. In how many distinct ways can you climb to the top?\n        Example 1:\n        Input: n = 2\n        Output: 2\n        Explanation: There are two ways to climb to the top.\n        1. 1 step + 1 step\n        2. 2 steps\n        Example 2:\n        Input: n = 3\n        Output: 3\n        Explanation: There are three ways to climb to the top.\n        1. 1 step + 1 step + 1 step\n        2. 1 step + 2 steps\n        3. 2 steps + 1 step\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        # dp[i] means the number of ways to climb to i-th step, then the number of ways to climb to n-th step is dp[n]\n        # There are n+1 steps, and you can only climb to i-th step from 0 to n.\n        # dp[i] = dp[i-1] + dp[i-2]\n        # When i == 1 or i == 2, dp[i] = 1\n        # When i > 2, dp[i] = dp[i-1] + dp[i-2]\n        dp = [0] * (n+1)\n        dp[1] = 1\n        dp[2] = 2\n        for i in range(3, n+1):\n            dp[i] = dp[i-1] + dp[i-2]\n        return dp[n]"
    },
    {
        "number": 70,
        "title": "Climbing Stairs",
        "difficulty": 0,
        "prompt": "class Solution:\n    def climbStairs(self, n: int) -> int:\n        \"\"\"\n        You are climbing a staircase. It takes n steps to reach the top.\n        Each time you can either climb 1 or 2 steps. In how many distinct ways can you climb to the top?\n        Example 1:\n        Input: n = 2\n        Output: 2\n        Explanation: There are two ways to climb to the top.\n        1. 1 step + 1 step\n        2. 2 steps\n        Example 2:\n        Input: n = 3\n        Output: 3\n        Explanation: There are three ways to climb to the top.\n        1. 1 step + 1 step + 1 step\n        2. 1 step + 2 steps\n        3. 2 steps + 1 step\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 3,
        "answer": "        if n == 1:\n            return 1\n        dp = [0] * (n+1)\n        dp[0] = 1\n        dp[1] = 1\n        for i in range(2, n+1):\n            dp[i] = dp[i-1] + dp[i-2]\n        return dp[n]"
    },
    {
        "number": 70,
        "title": "Climbing Stairs",
        "difficulty": 0,
        "prompt": "class Solution:\n    def climbStairs(self, n: int) -> int:\n        \"\"\"\n        You are climbing a staircase. It takes n steps to reach the top.\n        Each time you can either climb 1 or 2 steps. In how many distinct ways can you climb to the top?\n        Example 1:\n        Input: n = 2\n        Output: 2\n        Explanation: There are two ways to climb to the top.\n        1. 1 step + 1 step\n        2. 2 steps\n        Example 2:\n        Input: n = 3\n        Output: 3\n        Explanation: There are three ways to climb to the top.\n        1. 1 step + 1 step + 1 step\n        2. 1 step + 2 steps\n        3. 2 steps + 1 step\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 4,
        "answer": "        if n == 1:\n            return 1\n        if n == 2:\n            return 2"
    },
    {
        "number": 70,
        "title": "Climbing Stairs",
        "difficulty": 0,
        "prompt": "class Solution:\n    def climbStairs(self, n: int) -> int:\n        \"\"\"\n        You are climbing a staircase. It takes n steps to reach the top.\n        Each time you can either climb 1 or 2 steps. In how many distinct ways can you climb to the top?\n        Example 1:\n        Input: n = 2\n        Output: 2\n        Explanation: There are two ways to climb to the top.\n        1. 1 step + 1 step\n        2. 2 steps\n        Example 2:\n        Input: n = 3\n        Output: 3\n        Explanation: There are three ways to climb to the top.\n        1. 1 step + 1 step + 1 step\n        2. 1 step + 2 steps\n        3. 2 steps + 1 step\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 5,
        "answer": "        if n == 1:\n            return 1\n        if n == 2:\n            return 2"
    },
    {
        "number": 71,
        "title": "Simplify Path",
        "difficulty": 1,
        "prompt": "class Solution:\n    def simplifyPath(self, path: str) -> str:\n        \"\"\"\n        Given a string path, which is an absolute path (starting with a slash '/') to a file or directory in a Unix-style file system, convert it to the simplified canonical path.\n        In a Unix-style file system, a period '.' refers to the current directory, a double period '..' refers to the directory up a level, and any multiple consecutive slashes (i.e. '//') are treated as a single slash '/'. For this problem, any other format of periods such as '...' are treated as file/directory names.\n        The canonical path should have the following format:\n            The path starts with a single slash '/'.\n            Any two directories are separated by a single slash '/'.\n            The path does not end with a trailing '/'.\n            The path only contains the directories on the path from the root directory to the target file or directory (i.e., no period '.' or double period '..')\n        Return the simplified canonical path.\n        Example 1:\n        Input: path = \"/home/\"\n        Output: \"/home\"\n        Explanation: Note that there is no trailing slash after the last directory name.\n        Example 2:\n        Input: path = \"/../\"\n        Output: \"/\"\n        Explanation: Going one level up from the root directory is a no-op, as the root level is the highest level you can go.\n        Example 3:\n        Input: path = \"/home//foo/\"\n        Output: \"/home/foo\"\n        Explanation: In the canonical path, multiple consecutive slashes are replaced by a single one.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        if not path:\n            return ''\n        stack = []\n        for c in path:\n            if c == '/':\n                if stack and stack[-1] == '/':\n                    stack.pop()\n                else:\n                    stack.append(c)\n            else:\n                stack.append(c)"
    },
    {
        "number": 71,
        "title": "Simplify Path",
        "difficulty": 1,
        "prompt": "class Solution:\n    def simplifyPath(self, path: str) -> str:\n        \"\"\"\n        Given a string path, which is an absolute path (starting with a slash '/') to a file or directory in a Unix-style file system, convert it to the simplified canonical path.\n        In a Unix-style file system, a period '.' refers to the current directory, a double period '..' refers to the directory up a level, and any multiple consecutive slashes (i.e. '//') are treated as a single slash '/'. For this problem, any other format of periods such as '...' are treated as file/directory names.\n        The canonical path should have the following format:\n            The path starts with a single slash '/'.\n            Any two directories are separated by a single slash '/'.\n            The path does not end with a trailing '/'.\n            The path only contains the directories on the path from the root directory to the target file or directory (i.e., no period '.' or double period '..')\n        Return the simplified canonical path.\n        Example 1:\n        Input: path = \"/home/\"\n        Output: \"/home\"\n        Explanation: Note that there is no trailing slash after the last directory name.\n        Example 2:\n        Input: path = \"/../\"\n        Output: \"/\"\n        Explanation: Going one level up from the root directory is a no-op, as the root level is the highest level you can go.\n        Example 3:\n        Input: path = \"/home//foo/\"\n        Output: \"/home/foo\"\n        Explanation: In the canonical path, multiple consecutive slashes are replaced by a single one.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        result = []\n        if path[0] == '/':\n            result.append('')\n        dir_stack = []\n        for i in range(len(path)):\n            if path[i] == '/':\n                if path[i-1] == '/':\n                    continue\n                if path[i-1] == '.':\n                    continue\n                if path[i-1] == '.' and path[i-2] == '.':\n                    continue\n                if path[i-1] == '.' and path[i-2] == '.' and path[i-3] == '.':\n                    continue\n                if path[i-1] == '.' and path[i-2] == '.' and path[i-3] == '.' and path[i-4] == '.':\n                    continue\n                dir_stack.append(path[i])\n            else:\n                if path[i-1] == '/' and path[i] == '.':\n                    continue\n                dir_stack.append(path[i])\n        result.append('/' + '/'.join(dir_stack))\n        result = result[1:]\n        result_str = ''\n        for item in result:\n            result_str = result_str + '/' + item\n        return result_"
    },
    {
        "number": 71,
        "title": "Simplify Path",
        "difficulty": 1,
        "prompt": "class Solution:\n    def simplifyPath(self, path: str) -> str:\n        \"\"\"\n        Given a string path, which is an absolute path (starting with a slash '/') to a file or directory in a Unix-style file system, convert it to the simplified canonical path.\n        In a Unix-style file system, a period '.' refers to the current directory, a double period '..' refers to the directory up a level, and any multiple consecutive slashes (i.e. '//') are treated as a single slash '/'. For this problem, any other format of periods such as '...' are treated as file/directory names.\n        The canonical path should have the following format:\n            The path starts with a single slash '/'.\n            Any two directories are separated by a single slash '/'.\n            The path does not end with a trailing '/'.\n            The path only contains the directories on the path from the root directory to the target file or directory (i.e., no period '.' or double period '..')\n        Return the simplified canonical path.\n        Example 1:\n        Input: path = \"/home/\"\n        Output: \"/home\"\n        Explanation: Note that there is no trailing slash after the last directory name.\n        Example 2:\n        Input: path = \"/../\"\n        Output: \"/\"\n        Explanation: Going one level up from the root directory is a no-op, as the root level is the highest level you can go.\n        Example 3:\n        Input: path = \"/home//foo/\"\n        Output: \"/home/foo\"\n        Explanation: In the canonical path, multiple consecutive slashes are replaced by a single one.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 3,
        "answer": "        stack = []\n        path = path.split('/')\n        for i in path:\n            if i == '..':\n                if len(stack) == 0:\n                    continue\n                stack.pop()\n            elif i!= '.' and i!= '':\n                stack.append(i)\n        return '/' + '/'.join(stack)"
    },
    {
        "number": 71,
        "title": "Simplify Path",
        "difficulty": 1,
        "prompt": "class Solution:\n    def simplifyPath(self, path: str) -> str:\n        \"\"\"\n        Given a string path, which is an absolute path (starting with a slash '/') to a file or directory in a Unix-style file system, convert it to the simplified canonical path.\n        In a Unix-style file system, a period '.' refers to the current directory, a double period '..' refers to the directory up a level, and any multiple consecutive slashes (i.e. '//') are treated as a single slash '/'. For this problem, any other format of periods such as '...' are treated as file/directory names.\n        The canonical path should have the following format:\n            The path starts with a single slash '/'.\n            Any two directories are separated by a single slash '/'.\n            The path does not end with a trailing '/'.\n            The path only contains the directories on the path from the root directory to the target file or directory (i.e., no period '.' or double period '..')\n        Return the simplified canonical path.\n        Example 1:\n        Input: path = \"/home/\"\n        Output: \"/home\"\n        Explanation: Note that there is no trailing slash after the last directory name.\n        Example 2:\n        Input: path = \"/../\"\n        Output: \"/\"\n        Explanation: Going one level up from the root directory is a no-op, as the root level is the highest level you can go.\n        Example 3:\n        Input: path = \"/home//foo/\"\n        Output: \"/home/foo\"\n        Explanation: In the canonical path, multiple consecutive slashes are replaced by a single one.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 4,
        "answer": "        stk = []\n        for path_entry in path.split('/'):\n            if path_entry == '' or path_entry == '.':\n                continue\n            elif path_entry == '..':\n                if len(stk) > 0:\n                    stk.pop()\n            else:\n                stk.append(path_entry)\n        return '/' + '/'.join(stk)"
    },
    {
        "number": 71,
        "title": "Simplify Path",
        "difficulty": 1,
        "prompt": "class Solution:\n    def simplifyPath(self, path: str) -> str:\n        \"\"\"\n        Given a string path, which is an absolute path (starting with a slash '/') to a file or directory in a Unix-style file system, convert it to the simplified canonical path.\n        In a Unix-style file system, a period '.' refers to the current directory, a double period '..' refers to the directory up a level, and any multiple consecutive slashes (i.e. '//') are treated as a single slash '/'. For this problem, any other format of periods such as '...' are treated as file/directory names.\n        The canonical path should have the following format:\n            The path starts with a single slash '/'.\n            Any two directories are separated by a single slash '/'.\n            The path does not end with a trailing '/'.\n            The path only contains the directories on the path from the root directory to the target file or directory (i.e., no period '.' or double period '..')\n        Return the simplified canonical path.\n        Example 1:\n        Input: path = \"/home/\"\n        Output: \"/home\"\n        Explanation: Note that there is no trailing slash after the last directory name.\n        Example 2:\n        Input: path = \"/../\"\n        Output: \"/\"\n        Explanation: Going one level up from the root directory is a no-op, as the root level is the highest level you can go.\n        Example 3:\n        Input: path = \"/home//foo/\"\n        Output: \"/home/foo\"\n        Explanation: In the canonical path, multiple consecutive slashes are replaced by a single one.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 5,
        "answer": "        # split the path\n        path_split = path.split('/')\n        # remove the empty strings\n        path_split = list(filter(None, path_split))\n        # track the last directory we visited\n        directory_track = []\n        # track the directoy we are at after visiting it\n        path_at_this_level = []\n        for level in path_split:\n            if level == '..':\n                if path_at_this_level:\n                    path_at_this_level.pop()\n            elif level == '.':\n                continue\n            else:\n                path_at_this_level.append(level)\n            directory_track.append('/' + '/'.join(path_at_this_level))\n        return ''.join(directory_track)"
    },
    {
        "number": 72,
        "title": "Edit Distance",
        "difficulty": 2,
        "prompt": "class Solution:\n    def minDistance(self, word1: str, word2: str) -> int:\n        \"\"\"\n        Given two strings word1 and word2, return the minimum number of operations required to convert word1 to word2.\n        You have the following three operations permitted on a word:\n            Insert a character\n            Delete a character\n            Replace a character\n        Example 1:\n        Input: word1 = \"horse\", word2 = \"ros\"\n        Output: 3\n        Explanation: \n        horse -> rorse (replace 'h' with 'r')\n        rorse -> rose (remove 'r')\n        rose -> ros (remove 'e')\n        Example 2:\n        Input: word1 = \"intention\", word2 = \"execution\"\n        Output: 5\n        Explanation: \n        intention -> inention (remove 't')\n        inention -> enention (replace 'i' with 'e')\n        enention -> exention (replace 'n' with 'x')\n        exention -> exection (replace 'n' with 'c')\n        exection -> execution (insert 'u')\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        m, n = len(word1), len(word2)\n        dp = [[0] * (n+1) for _ in range(m+1)]\n        for i in range(m+1):\n            dp[i][0] = i\n        for j in range(n+1):\n            dp[0][j] = j\n        for i in range(1, m+1):\n            for j in range(1, n+1):\n                if word1[i-1] == word2[j-1]:\n                    dp[i][j] = dp[i-1][j-1]\n                else:\n                    dp[i][j] = 1 + min(dp[i-1][j-1], dp[i-1][j], dp[i][j-1])\n        return dp[m][n]"
    },
    {
        "number": 72,
        "title": "Edit Distance",
        "difficulty": 2,
        "prompt": "class Solution:\n    def minDistance(self, word1: str, word2: str) -> int:\n        \"\"\"\n        Given two strings word1 and word2, return the minimum number of operations required to convert word1 to word2.\n        You have the following three operations permitted on a word:\n            Insert a character\n            Delete a character\n            Replace a character\n        Example 1:\n        Input: word1 = \"horse\", word2 = \"ros\"\n        Output: 3\n        Explanation: \n        horse -> rorse (replace 'h' with 'r')\n        rorse -> rose (remove 'r')\n        rose -> ros (remove 'e')\n        Example 2:\n        Input: word1 = \"intention\", word2 = \"execution\"\n        Output: 5\n        Explanation: \n        intention -> inention (remove 't')\n        inention -> enention (replace 'i' with 'e')\n        enention -> exention (replace 'n' with 'x')\n        exention -> exection (replace 'n' with 'c')\n        exection -> execution (insert 'u')\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        # dp = [[0] * (len(word2) + 1) for _ in range(len(word1) + 1)]\n        # # initialize the dp table\n        # for i in range(len(word1) + 1):\n        #     dp[i][0] = i\n        # for i in range(len(word2) + 1):\n        #     dp[0][i] = i\n        # for i in range(1, len(word1) + 1):\n        #     for j in range(1, len(word2) + 1):\n        #         if word1[i - 1] == word2[j - 1]:\n        #             dp[i][j] = dp[i - 1][j - 1]\n        #         else:\n        #             dp[i][j] = 1 + min(dp[i - 1][j - 1], dp[i - 1][j], dp[i][j - 1])\n        # return dp[-1][-1]\n        \"\"\"\n        Note:\n        1. I really don't understand the above solution.\n        2. I thought the last row and last column must be the answer.\n        3. The explanation is not that clear, but I think it's what the meaning is.\n        \"\"\"\n        "
    },
    {
        "number": 72,
        "title": "Edit Distance",
        "difficulty": 2,
        "prompt": "class Solution:\n    def minDistance(self, word1: str, word2: str) -> int:\n        \"\"\"\n        Given two strings word1 and word2, return the minimum number of operations required to convert word1 to word2.\n        You have the following three operations permitted on a word:\n            Insert a character\n            Delete a character\n            Replace a character\n        Example 1:\n        Input: word1 = \"horse\", word2 = \"ros\"\n        Output: 3\n        Explanation: \n        horse -> rorse (replace 'h' with 'r')\n        rorse -> rose (remove 'r')\n        rose -> ros (remove 'e')\n        Example 2:\n        Input: word1 = \"intention\", word2 = \"execution\"\n        Output: 5\n        Explanation: \n        intention -> inention (remove 't')\n        inention -> enention (replace 'i' with 'e')\n        enention -> exention (replace 'n' with 'x')\n        exention -> exection (replace 'n' with 'c')\n        exection -> execution (insert 'u')\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 3,
        "answer": "        if word1 == word2:\n            return 0\n        return self._min_distance_recursive(word1, word2)"
    },
    {
        "number": 72,
        "title": "Edit Distance",
        "difficulty": 2,
        "prompt": "class Solution:\n    def minDistance(self, word1: str, word2: str) -> int:\n        \"\"\"\n        Given two strings word1 and word2, return the minimum number of operations required to convert word1 to word2.\n        You have the following three operations permitted on a word:\n            Insert a character\n            Delete a character\n            Replace a character\n        Example 1:\n        Input: word1 = \"horse\", word2 = \"ros\"\n        Output: 3\n        Explanation: \n        horse -> rorse (replace 'h' with 'r')\n        rorse -> rose (remove 'r')\n        rose -> ros (remove 'e')\n        Example 2:\n        Input: word1 = \"intention\", word2 = \"execution\"\n        Output: 5\n        Explanation: \n        intention -> inention (remove 't')\n        inention -> enention (replace 'i' with 'e')\n        enention -> exention (replace 'n' with 'x')\n        exention -> exection (replace 'n' with 'c')\n        exection -> execution (insert 'u')\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 4,
        "answer": "        m, n = len(word1), len(word2)\n        dp = [[0]*(n+1) for _ in range(m+1)]\n        \n        for i in range(1, m+1):\n            dp[i][0] = dp[i-1][0] + 1\n        \n        for j in range(1, n+1):\n            dp[0][j] = dp[0][j-1] + 1\n            \n        for i in range(1, m+1):\n            for j in range(1, n+1):\n                if word1[i-1] == word2[j-1]:\n                    dp[i][j] = dp[i-1][j-1]\n                else:\n                    dp[i][j] = min(dp[i-1][j]+1, dp[i][j-1]+1, dp[i-1][j-1]+1)\n                    \n        return dp[m][n]\n    \n    \n    def minDistance(self, word1: str, word2: str) -> int:\n        \"\"\"\n        dp[i][j] -> min operations to convert word1[:i] to word2[:j]\n        \n        dp[i][j] = min"
    },
    {
        "number": 72,
        "title": "Edit Distance",
        "difficulty": 2,
        "prompt": "class Solution:\n    def minDistance(self, word1: str, word2: str) -> int:\n        \"\"\"\n        Given two strings word1 and word2, return the minimum number of operations required to convert word1 to word2.\n        You have the following three operations permitted on a word:\n            Insert a character\n            Delete a character\n            Replace a character\n        Example 1:\n        Input: word1 = \"horse\", word2 = \"ros\"\n        Output: 3\n        Explanation: \n        horse -> rorse (replace 'h' with 'r')\n        rorse -> rose (remove 'r')\n        rose -> ros (remove 'e')\n        Example 2:\n        Input: word1 = \"intention\", word2 = \"execution\"\n        Output: 5\n        Explanation: \n        intention -> inention (remove 't')\n        inention -> enention (replace 'i' with 'e')\n        enention -> exention (replace 'n' with 'x')\n        exention -> exection (replace 'n' with 'c')\n        exection -> execution (insert 'u')\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 5,
        "answer": "        # Time and space: O(N*M)\n        dp = [[0 for _ in range(len(word2)+1)] for _ in range(len(word1)+1)]\n        for i in range(len(word1)+1):\n            dp[i][0] = i\n        for j in range(len(word2)+1):\n            dp[0][j] = j\n        for i in range(1, len(word1)+1):\n            for j in range(1, len(word2)+1):\n                if word1[i-1] == word2[j-1]:\n                    dp[i][j] = dp[i-1][j-1]\n                else:\n                    dp[i][j] = 1 + min(dp[i-1][j], dp[i][j-1], dp[i-1][j-1])\n        return dp[-1][-1]\n    \n    \n    def minDistance_dp(self, word1: str, word2: str) -> int:\n        \"\"\"\n        dp[i][j] = the min number of operation to convert word1[0:i] to word2[0:j]\n        dp[i][j] = dp[i-1][j-1] if word"
    },
    {
        "number": 73,
        "title": "Set Matrix Zeroes",
        "difficulty": 1,
        "prompt": "class Solution:\n    def setZeroes(self, matrix: List[List[int]]) -> None:\n        \"\"\"\n        Do not return anything, modify matrix in-place instead.\n        Given an m x n integer matrix matrix, if an element is 0, set its entire row and column to 0's.\n        You must do it in place.\n        Example 1:\n        Input: matrix = [[1,1,1],[1,0,1],[1,1,1]]\n        Output: [[1,0,1],[0,0,0],[1,0,1]]\n        Example 2:\n        Input: matrix = [[0,1,2,0],[3,4,5,2],[1,3,1,5]]\n        Output: [[0,0,0,0],[0,4,5,0],[0,3,1,0]]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        m = len(matrix)\n        n = len(matrix[0])"
    },
    {
        "number": 73,
        "title": "Set Matrix Zeroes",
        "difficulty": 1,
        "prompt": "class Solution:\n    def setZeroes(self, matrix: List[List[int]]) -> None:\n        \"\"\"\n        Do not return anything, modify matrix in-place instead.\n        Given an m x n integer matrix matrix, if an element is 0, set its entire row and column to 0's.\n        You must do it in place.\n        Example 1:\n        Input: matrix = [[1,1,1],[1,0,1],[1,1,1]]\n        Output: [[1,0,1],[0,0,0],[1,0,1]]\n        Example 2:\n        Input: matrix = [[0,1,2,0],[3,4,5,2],[1,3,1,5]]\n        Output: [[0,0,0,0],[0,4,5,0],[0,3,1,0]]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        \n        m = len(matrix)\n        n = len(matrix[0])\n        row, col = [], []\n        \n        for i in range(m):\n            for j in range(n):\n                if matrix[i][j] == 0:\n                    row.append(i)\n                    col.append(j)\n        \n        for r in row:\n            for j in range(n):\n                matrix[r][j] = 0\n        \n        for c in col:\n            for i in range(m):\n                matrix[i][c] = 0\n        \n<|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>"
    },
    {
        "number": 73,
        "title": "Set Matrix Zeroes",
        "difficulty": 1,
        "prompt": "class Solution:\n    def setZeroes(self, matrix: List[List[int]]) -> None:\n        \"\"\"\n        Do not return anything, modify matrix in-place instead.\n        Given an m x n integer matrix matrix, if an element is 0, set its entire row and column to 0's.\n        You must do it in place.\n        Example 1:\n        Input: matrix = [[1,1,1],[1,0,1],[1,1,1]]\n        Output: [[1,0,1],[0,0,0],[1,0,1]]\n        Example 2:\n        Input: matrix = [[0,1,2,0],[3,4,5,2],[1,3,1,5]]\n        Output: [[0,0,0,0],[0,4,5,0],[0,3,1,0]]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 3,
        "answer": "        \n        rows = set()\n        cols = set()\n        \n        for row in range(len(matrix)):\n            for col in range(len(matrix[row])):\n                if matrix[row][col] == 0:\n                    rows.add(row)\n                    cols.add(col)\n        \n        for row in range(len(matrix)):\n            for col in range(len(matrix[row])):\n                if row in rows or col in cols:\n                    matrix[row][col] = 0\n    \n    \n    def setZeroes_1(self, matrix: List[List[int]]) -> None:\n        \"\"\"\n        Do not return anything, modify matrix in-place instead.\n        Given an m x n integer matrix matrix, if an element is 0, set its entire row and column to 0's.\n        You must do it in place.\n        Example 1:\n        Input: matrix = [[1,1,1],[1,0,1],[1,1,1]]\n        Output: [[1,0,1],[0,0,0],[1,0,1]]\n        Example 2:\n        Input: matrix = [[0,1,2,0],[3,4,5,2],[1,3,1,5]]\n        Output:"
    },
    {
        "number": 73,
        "title": "Set Matrix Zeroes",
        "difficulty": 1,
        "prompt": "class Solution:\n    def setZeroes(self, matrix: List[List[int]]) -> None:\n        \"\"\"\n        Do not return anything, modify matrix in-place instead.\n        Given an m x n integer matrix matrix, if an element is 0, set its entire row and column to 0's.\n        You must do it in place.\n        Example 1:\n        Input: matrix = [[1,1,1],[1,0,1],[1,1,1]]\n        Output: [[1,0,1],[0,0,0],[1,0,1]]\n        Example 2:\n        Input: matrix = [[0,1,2,0],[3,4,5,2],[1,3,1,5]]\n        Output: [[0,0,0,0],[0,4,5,0],[0,3,1,0]]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 4,
        "answer": "        is_col = False\n        for i in range(len(matrix)):\n            if matrix[i][0] == 0:\n                is_col = True\n            for j in range(1, len(matrix[0])):\n                if matrix[i][j] == 0:\n                    matrix[i][0] = 0\n                    matrix[0][j] = 0\n        for i in range(1, len(matrix)):\n            for j in range(1, len(matrix[0])):\n                if matrix[i][0] == 0 or matrix[0][j] == 0:\n                    matrix[i][j] = 0\n        if matrix[0][0] == 0:\n            for i in range(len(matrix)):\n                matrix[i][0] = 0\n        if is_col:\n            for i in range(len(matrix)):\n                matrix[i][0] = 0"
    },
    {
        "number": 73,
        "title": "Set Matrix Zeroes",
        "difficulty": 1,
        "prompt": "class Solution:\n    def setZeroes(self, matrix: List[List[int]]) -> None:\n        \"\"\"\n        Do not return anything, modify matrix in-place instead.\n        Given an m x n integer matrix matrix, if an element is 0, set its entire row and column to 0's.\n        You must do it in place.\n        Example 1:\n        Input: matrix = [[1,1,1],[1,0,1],[1,1,1]]\n        Output: [[1,0,1],[0,0,0],[1,0,1]]\n        Example 2:\n        Input: matrix = [[0,1,2,0],[3,4,5,2],[1,3,1,5]]\n        Output: [[0,0,0,0],[0,4,5,0],[0,3,1,0]]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 5,
        "answer": "        if len(matrix) == 0:\n            return matrix\n        row_zero = False\n        col_zero = False\n        for i in range(len(matrix)):\n            if matrix[i][0] == 0:\n                col_zero = True\n                break\n        for j in range(len(matrix[0])):\n            if matrix[0][j] == 0:\n                row_zero = True\n                break"
    },
    {
        "number": 74,
        "title": "Search a 2D Matrix",
        "difficulty": 1,
        "prompt": "class Solution:\n    def searchMatrix(self, matrix: List[List[int]], target: int) -> bool:\n        \"\"\"\n        You are given an m x n integer matrix matrix with the following two properties:\n            Each row is sorted in non-decreasing order.\n            The first integer of each row is greater than the last integer of the previous row.\n        Given an integer target, return true if target is in matrix or false otherwise.\n        You must write a solution in O(log(m * n)) time complexity.\n        Example 1:\n        Input: matrix = [[1,3,5,7],[10,11,16,20],[23,30,34,60]], target = 3\n        Output: true\n        Example 2:\n        Input: matrix = [[1,3,5,7],[10,11,16,20],[23,30,34,60]], target = 13\n        Output: false\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        m = len(matrix)\n        n = len(matrix[0])\n        # \u7b2c\u4e00\u6b65\uff0c\u627e\u5230\u521d\u59cb\u533a\u95f4\n        # \u521d\u59cb\u533a\u95f4\u7684\u5212\u5206\uff1a\n        #   1. \u5de6\u4e0a\u89d2(i, j)\uff0c\u53f3\u4e0a\u89d2(i, j)\uff0c\u53f3\u4e0b\u89d2(i, j)\uff0c\u5de6\u4e0b\u89d2(i, j)\n        #   2. \u5de6\u4e0a\u89d2(i, j)\uff0c\u53f3\u4e0a\u89d2(i, j)\uff0c\u53f3\u4e0b\u89d2(i, j)\uff0c\u5de6\u4e0b\u89d2(i, j)\n        #   3. \u5de6\u4e0a\u89d2(i, j)\uff0c\u53f3\u4e0a\u89d2(i, j)\uff0c\u5de6\u4e0b\u89d2(i, j)\uff0c\u53f3\u4e0b\u89d2(i, j)\n        #   4. \u5de6\u4e0a\u89d2(i, j)\uff0c\u53f3\u4e0a\u89d2(i, j)\uff0c\u5de6\u4e0b\u89d2(i, j)\uff0c\ufffd"
    },
    {
        "number": 74,
        "title": "Search a 2D Matrix",
        "difficulty": 1,
        "prompt": "class Solution:\n    def searchMatrix(self, matrix: List[List[int]], target: int) -> bool:\n        \"\"\"\n        You are given an m x n integer matrix matrix with the following two properties:\n            Each row is sorted in non-decreasing order.\n            The first integer of each row is greater than the last integer of the previous row.\n        Given an integer target, return true if target is in matrix or false otherwise.\n        You must write a solution in O(log(m * n)) time complexity.\n        Example 1:\n        Input: matrix = [[1,3,5,7],[10,11,16,20],[23,30,34,60]], target = 3\n        Output: true\n        Example 2:\n        Input: matrix = [[1,3,5,7],[10,11,16,20],[23,30,34,60]], target = 13\n        Output: false\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        if not matrix or not matrix[0]:\n            return False\n        m, n = len(matrix), len(matrix[0])\n        l, r = 0, m * n - 1\n        while l <= r:\n            mid = (l + r) // 2\n            if matrix[mid // n][mid % n] == target:\n                return True\n            if matrix[mid // n][mid % n] < target:\n                l = mid + 1\n            else:\n                r = mid - 1\n        return False\n<|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>"
    },
    {
        "number": 74,
        "title": "Search a 2D Matrix",
        "difficulty": 1,
        "prompt": "class Solution:\n    def searchMatrix(self, matrix: List[List[int]], target: int) -> bool:\n        \"\"\"\n        You are given an m x n integer matrix matrix with the following two properties:\n            Each row is sorted in non-decreasing order.\n            The first integer of each row is greater than the last integer of the previous row.\n        Given an integer target, return true if target is in matrix or false otherwise.\n        You must write a solution in O(log(m * n)) time complexity.\n        Example 1:\n        Input: matrix = [[1,3,5,7],[10,11,16,20],[23,30,34,60]], target = 3\n        Output: true\n        Example 2:\n        Input: matrix = [[1,3,5,7],[10,11,16,20],[23,30,34,60]], target = 13\n        Output: false\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 3,
        "answer": "        m, n = len(matrix), len(matrix[0])\n        low, high = 0, m * n - 1\n        while low < high:\n            mid = (low + high) // 2\n            i, j = divmod(mid, n)\n            if matrix[i][j] < target:\n                low = mid + 1\n            else:\n                high = mid\n        return low < m * n and matrix[low // n][low % n] == target"
    },
    {
        "number": 74,
        "title": "Search a 2D Matrix",
        "difficulty": 1,
        "prompt": "class Solution:\n    def searchMatrix(self, matrix: List[List[int]], target: int) -> bool:\n        \"\"\"\n        You are given an m x n integer matrix matrix with the following two properties:\n            Each row is sorted in non-decreasing order.\n            The first integer of each row is greater than the last integer of the previous row.\n        Given an integer target, return true if target is in matrix or false otherwise.\n        You must write a solution in O(log(m * n)) time complexity.\n        Example 1:\n        Input: matrix = [[1,3,5,7],[10,11,16,20],[23,30,34,60]], target = 3\n        Output: true\n        Example 2:\n        Input: matrix = [[1,3,5,7],[10,11,16,20],[23,30,34,60]], target = 13\n        Output: false\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 4,
        "answer": "        row = len(matrix)\n        if row == 0:\n            return False\n        col = len(matrix[0])"
    },
    {
        "number": 74,
        "title": "Search a 2D Matrix",
        "difficulty": 1,
        "prompt": "class Solution:\n    def searchMatrix(self, matrix: List[List[int]], target: int) -> bool:\n        \"\"\"\n        You are given an m x n integer matrix matrix with the following two properties:\n            Each row is sorted in non-decreasing order.\n            The first integer of each row is greater than the last integer of the previous row.\n        Given an integer target, return true if target is in matrix or false otherwise.\n        You must write a solution in O(log(m * n)) time complexity.\n        Example 1:\n        Input: matrix = [[1,3,5,7],[10,11,16,20],[23,30,34,60]], target = 3\n        Output: true\n        Example 2:\n        Input: matrix = [[1,3,5,7],[10,11,16,20],[23,30,34,60]], target = 13\n        Output: false\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 5,
        "answer": "        if len(matrix) == 0 or len(matrix[0]) == 0:\n            return False\n        row = len(matrix)\n        col = len(matrix[0])\n        low = 0\n        high = (row * col) - 1\n        while low <= high:\n            mid = (low + high) // 2\n            mid_value = matrix[mid // col][mid % col]\n            if target == mid_value:\n                return True\n            elif target < mid_value:\n                high = mid - 1\n            else:\n                low = mid + 1\n        return False"
    },
    {
        "number": 75,
        "title": "Sort Colors",
        "difficulty": 1,
        "prompt": "class Solution:\n    def sortColors(self, nums: List[int]) -> None:\n        \"\"\"\n        Do not return anything, modify nums in-place instead.\n        Given an array nums with n objects colored red, white, or blue, sort them in-place so that objects of the same color are adjacent, with the colors in the order red, white, and blue.\n        We will use the integers 0, 1, and 2 to represent the color red, white, and blue, respectively.\n        You must solve this problem without using the library's sort function.\n        Example 1:\n        Input: nums = [2,0,2,1,1,0]\n        Output: [0,0,1,1,2,2]\n        Example 2:\n        Input: nums = [2,0,1]\n        Output: [0,1,2]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        left = 0\n        right = len(nums) - 1\n        curr = 0\n        while curr <= right:\n            if nums[curr] == 0:\n                nums[curr], nums[left] = nums[left], nums[curr]\n                left += 1\n                curr += 1\n            elif nums[curr] == 2:\n                nums[curr], nums[right] = nums[right], nums[curr]\n                right -= 1\n            else:\n                curr += 1"
    },
    {
        "number": 75,
        "title": "Sort Colors",
        "difficulty": 1,
        "prompt": "class Solution:\n    def sortColors(self, nums: List[int]) -> None:\n        \"\"\"\n        Do not return anything, modify nums in-place instead.\n        Given an array nums with n objects colored red, white, or blue, sort them in-place so that objects of the same color are adjacent, with the colors in the order red, white, and blue.\n        We will use the integers 0, 1, and 2 to represent the color red, white, and blue, respectively.\n        You must solve this problem without using the library's sort function.\n        Example 1:\n        Input: nums = [2,0,2,1,1,0]\n        Output: [0,0,1,1,2,2]\n        Example 2:\n        Input: nums = [2,0,1]\n        Output: [0,1,2]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        # nums.sort()\n        # print(nums)\n        # for i in range(len(nums)):\n        #     nums[i] = 2 - nums[i]\n        # print(nums)\n        i, j, k = 0, 0, len(nums) - 1\n        while j <= k:\n            if nums[j] == 0:\n                nums[i], nums[j] = nums[j], nums[i]\n                i += 1\n                j += 1\n            elif nums[j] == 1:\n                j += 1\n            else:\n                nums[j], nums[k] = nums[k], nums[j]\n                k -= 1"
    },
    {
        "number": 75,
        "title": "Sort Colors",
        "difficulty": 1,
        "prompt": "class Solution:\n    def sortColors(self, nums: List[int]) -> None:\n        \"\"\"\n        Do not return anything, modify nums in-place instead.\n        Given an array nums with n objects colored red, white, or blue, sort them in-place so that objects of the same color are adjacent, with the colors in the order red, white, and blue.\n        We will use the integers 0, 1, and 2 to represent the color red, white, and blue, respectively.\n        You must solve this problem without using the library's sort function.\n        Example 1:\n        Input: nums = [2,0,2,1,1,0]\n        Output: [0,0,1,1,2,2]\n        Example 2:\n        Input: nums = [2,0,1]\n        Output: [0,1,2]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 3,
        "answer": "        if len(nums) <= 1:\n            return nums"
    },
    {
        "number": 75,
        "title": "Sort Colors",
        "difficulty": 1,
        "prompt": "class Solution:\n    def sortColors(self, nums: List[int]) -> None:\n        \"\"\"\n        Do not return anything, modify nums in-place instead.\n        Given an array nums with n objects colored red, white, or blue, sort them in-place so that objects of the same color are adjacent, with the colors in the order red, white, and blue.\n        We will use the integers 0, 1, and 2 to represent the color red, white, and blue, respectively.\n        You must solve this problem without using the library's sort function.\n        Example 1:\n        Input: nums = [2,0,2,1,1,0]\n        Output: [0,0,1,1,2,2]\n        Example 2:\n        Input: nums = [2,0,1]\n        Output: [0,1,2]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 4,
        "answer": "        nums = nums.copy()\n        i = 0\n        while i < len(nums):\n            if nums[i] == 0:\n                nums.pop(i)\n                nums.insert(0, 0)\n            elif nums[i] == 1:\n                i += 1\n            elif nums[i] == 2:\n                nums.pop(i)\n                nums.append(2)\n            else:\n                i += 1\n        print(nums)"
    },
    {
        "number": 75,
        "title": "Sort Colors",
        "difficulty": 1,
        "prompt": "class Solution:\n    def sortColors(self, nums: List[int]) -> None:\n        \"\"\"\n        Do not return anything, modify nums in-place instead.\n        Given an array nums with n objects colored red, white, or blue, sort them in-place so that objects of the same color are adjacent, with the colors in the order red, white, and blue.\n        We will use the integers 0, 1, and 2 to represent the color red, white, and blue, respectively.\n        You must solve this problem without using the library's sort function.\n        Example 1:\n        Input: nums = [2,0,2,1,1,0]\n        Output: [0,0,1,1,2,2]\n        Example 2:\n        Input: nums = [2,0,1]\n        Output: [0,1,2]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 5,
        "answer": "        # Solution 1: self, one pass, O(1) space\n        \"\"\"\n        n = len(nums)\n        p0, p2 = 0, n - 1\n        i = 0\n        while i <= p2:\n            if nums[i] == 0:\n                nums[i], nums[p0] = nums[p0], nums[i]\n                p0 += 1\n                i += 1\n            elif nums[i] == 2:\n                nums[i], nums[p2] = nums[p2], nums[i]\n                p2 -= 1\n            else:\n                i += 1\n        \"\"\"\n        # Solution 2: three pointers, O(n) time, O(1) space\n        # 0,1,2 \u5206\u522b\u4ee3\u8868r,w,b\n        # \u628a\u6240\u6709\u5143\u7d20\u4f9d\u6b21\u6309\u987a\u5e8f\u653e\u5165\u4e00\u4e2a\u6570\u7ec4\u4e2d\uff0c\u628a\u76f8\u5e94\u7684\u6570\u636e\u8d4b\u503c\u5230\u76f8\u5e94\u7684\u4f4d\u7f6e\n        \"\"\"\n        nums[:] = [0] * (nums.count(1) + nums.count"
    },
    {
        "number": 76,
        "title": "Minimum Window Substring",
        "difficulty": 2,
        "prompt": "class Solution:\n    def minWindow(self, s: str, t: str) -> str:\n        \"\"\"\n        Given two strings s and t of lengths m and n respectively, return the minimum window substring of s such that every character in t (including duplicates) is included in the window. If there is no such substring, return the empty string \"\".\n        The testcases will be generated such that the answer is unique.\n        Example 1:\n        Input: s = \"ADOBECODEBANC\", t = \"ABC\"\n        Output: \"BANC\"\n        Explanation: The minimum window substring \"BANC\" includes 'A', 'B', and 'C' from string t.\n        Example 2:\n        Input: s = \"a\", t = \"a\"\n        Output: \"a\"\n        Explanation: The entire string s is the minimum window.\n        Example 3:\n        Input: s = \"a\", t = \"aa\"\n        Output: \"\"\n        Explanation: Both 'a's from t must be included in the window.\n        Since the largest window of s only has one 'a', return empty string.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        # Runtime: 52 ms, faster than 98.62% of Python3 online submissions for Minimum Window Substring.\n        # Memory Usage: 14.3 MB, less than 100.00% of Python3 online submissions for Minimum Window Substring.\n        from collections import defaultdict\n        t_counts = defaultdict(int)\n        for c in t:\n            t_counts[c] += 1\n        required = len(t_counts)\n        l, r = 0, 0\n        formed = 0\n        ans = float(\"inf\"), None, None\n        for r, c in enumerate(s):\n            t_counts[c] -= 1\n            if t_counts[c] >= 0:\n                formed += 1\n            while l <= r and formed == required:\n                if r - l + 1 < ans[0]:\n                    ans = (r - l + 1, l, r)\n                t_counts[s[l]] += 1\n                if t_counts[s[l]] > 0:\n                    formed -= 1\n                l += 1\n        return \"\" if ans[0] == float(\"inf\") else s[ans[1]: ans[2] + 1]"
    },
    {
        "number": 76,
        "title": "Minimum Window Substring",
        "difficulty": 2,
        "prompt": "class Solution:\n    def minWindow(self, s: str, t: str) -> str:\n        \"\"\"\n        Given two strings s and t of lengths m and n respectively, return the minimum window substring of s such that every character in t (including duplicates) is included in the window. If there is no such substring, return the empty string \"\".\n        The testcases will be generated such that the answer is unique.\n        Example 1:\n        Input: s = \"ADOBECODEBANC\", t = \"ABC\"\n        Output: \"BANC\"\n        Explanation: The minimum window substring \"BANC\" includes 'A', 'B', and 'C' from string t.\n        Example 2:\n        Input: s = \"a\", t = \"a\"\n        Output: \"a\"\n        Explanation: The entire string s is the minimum window.\n        Example 3:\n        Input: s = \"a\", t = \"aa\"\n        Output: \"\"\n        Explanation: Both 'a's from t must be included in the window.\n        Since the largest window of s only has one 'a', return empty string.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        t_dict = dict()\n        for letter in t:\n            if letter not in t_dict:\n                t_dict[letter] = 1\n            else:\n                t_dict[letter] += 1\n        min_window = float('inf')\n        min_window_str = ''\n        left = 0\n        right = 0\n        n = len(s)\n        t_len = len(t)\n        while right < n:\n            if s[right] in t_dict:\n                if t_dict[s[right]] > 0:\n                    t_len -= 1\n                t_dict[s[right]] -= 1\n            right += 1\n            while t_len == 0:\n                if min_window > right - left:\n                    min_window = right - left\n                    min_window_str = s[left:right]\n                if s[left] in t_dict:\n                    t_dict[s[left]] += 1\n                    if t_dict[s[left]] > 0:\n                        t_len += 1\n                left += 1\n        return min_window_str"
    },
    {
        "number": 76,
        "title": "Minimum Window Substring",
        "difficulty": 2,
        "prompt": "class Solution:\n    def minWindow(self, s: str, t: str) -> str:\n        \"\"\"\n        Given two strings s and t of lengths m and n respectively, return the minimum window substring of s such that every character in t (including duplicates) is included in the window. If there is no such substring, return the empty string \"\".\n        The testcases will be generated such that the answer is unique.\n        Example 1:\n        Input: s = \"ADOBECODEBANC\", t = \"ABC\"\n        Output: \"BANC\"\n        Explanation: The minimum window substring \"BANC\" includes 'A', 'B', and 'C' from string t.\n        Example 2:\n        Input: s = \"a\", t = \"a\"\n        Output: \"a\"\n        Explanation: The entire string s is the minimum window.\n        Example 3:\n        Input: s = \"a\", t = \"aa\"\n        Output: \"\"\n        Explanation: Both 'a's from t must be included in the window.\n        Since the largest window of s only has one 'a', return empty string.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 3,
        "answer": "        if not s or not t:\n            return \"\"\n        dic = Counter(t)\n        dic2 = {}\n        for char, count in dic.items():\n            if count > 0:\n                dic2[char] = count"
    },
    {
        "number": 76,
        "title": "Minimum Window Substring",
        "difficulty": 2,
        "prompt": "class Solution:\n    def minWindow(self, s: str, t: str) -> str:\n        \"\"\"\n        Given two strings s and t of lengths m and n respectively, return the minimum window substring of s such that every character in t (including duplicates) is included in the window. If there is no such substring, return the empty string \"\".\n        The testcases will be generated such that the answer is unique.\n        Example 1:\n        Input: s = \"ADOBECODEBANC\", t = \"ABC\"\n        Output: \"BANC\"\n        Explanation: The minimum window substring \"BANC\" includes 'A', 'B', and 'C' from string t.\n        Example 2:\n        Input: s = \"a\", t = \"a\"\n        Output: \"a\"\n        Explanation: The entire string s is the minimum window.\n        Example 3:\n        Input: s = \"a\", t = \"aa\"\n        Output: \"\"\n        Explanation: Both 'a's from t must be included in the window.\n        Since the largest window of s only has one 'a', return empty string.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 4,
        "answer": "        import collections\n        # \u66b4\u529b\u6cd5\n        # window = collections.defaultdict(int)\n        # for char in t:\n        #     window[char] += 1\n        # window_count = len(window)\n        # left, right = 0, 0\n        # valid = 0\n        # minimum_window = ''\n        # min_length = float('inf')\n        # while right < len(s):\n        #     char = s[right]\n        #     if char in window:\n        #         window[char] -= 1\n        #         if window[char] >= 0:\n        #             valid += 1\n        #     right += 1\n        #     while valid == window_count:\n        #         if min_length > right - left:\n        #             min_length = right - left\n        #             minimum_window = s[left:right]\n        #         char = s[left]\n        #         left += 1\n        #         if char in window:\n        #             if window[char] >= 0:\n        #                 valid -= 1\n        #                 window[char] += 1\n        # return minimum_window"
    },
    {
        "number": 76,
        "title": "Minimum Window Substring",
        "difficulty": 2,
        "prompt": "class Solution:\n    def minWindow(self, s: str, t: str) -> str:\n        \"\"\"\n        Given two strings s and t of lengths m and n respectively, return the minimum window substring of s such that every character in t (including duplicates) is included in the window. If there is no such substring, return the empty string \"\".\n        The testcases will be generated such that the answer is unique.\n        Example 1:\n        Input: s = \"ADOBECODEBANC\", t = \"ABC\"\n        Output: \"BANC\"\n        Explanation: The minimum window substring \"BANC\" includes 'A', 'B', and 'C' from string t.\n        Example 2:\n        Input: s = \"a\", t = \"a\"\n        Output: \"a\"\n        Explanation: The entire string s is the minimum window.\n        Example 3:\n        Input: s = \"a\", t = \"aa\"\n        Output: \"\"\n        Explanation: Both 'a's from t must be included in the window.\n        Since the largest window of s only has one 'a', return empty string.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 5,
        "answer": "        from collections import Counter\n        from functools import reduce\n        # use dict to keep the count of unique t\n        count = Counter(t)\n        # total number of unique characters in t\n        total = len(count)\n        required = len(count)"
    },
    {
        "number": 77,
        "title": "Combinations",
        "difficulty": 1,
        "prompt": "class Solution:\n    def combine(self, n: int, k: int) -> List[List[int]]:\n        \"\"\"\n        Given two integers n and k, return all possible combinations of k numbers chosen from the range [1, n].\n        You may return the answer in any order.\n        Example 1:\n        Input: n = 4, k = 2\n        Output: [[1,2],[1,3],[1,4],[2,3],[2,4],[3,4]]\n        Explanation: There are 4 choose 2 = 6 total combinations.\n        Note that combinations are unordered, i.e., [1,2] and [2,1] are considered to be the same combination.\n        Example 2:\n        Input: n = 1, k = 1\n        Output: [[1]]\n        Explanation: There is 1 choose 1 = 1 total combination.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        def rec(n, k, nums, path):\n            if len(path) == k:\n                result.append(path[:])\n                return\n            for i in range(len(nums)):\n                path.append(nums[i])\n                rec(n, k, nums[i + 1:], path)\n                path.pop()"
    },
    {
        "number": 77,
        "title": "Combinations",
        "difficulty": 1,
        "prompt": "class Solution:\n    def combine(self, n: int, k: int) -> List[List[int]]:\n        \"\"\"\n        Given two integers n and k, return all possible combinations of k numbers chosen from the range [1, n].\n        You may return the answer in any order.\n        Example 1:\n        Input: n = 4, k = 2\n        Output: [[1,2],[1,3],[1,4],[2,3],[2,4],[3,4]]\n        Explanation: There are 4 choose 2 = 6 total combinations.\n        Note that combinations are unordered, i.e., [1,2] and [2,1] are considered to be the same combination.\n        Example 2:\n        Input: n = 1, k = 1\n        Output: [[1]]\n        Explanation: There is 1 choose 1 = 1 total combination.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        \n        result = []\n        \n        def dfs(chosen_numbers, rest_numbers, current):\n            # base case\n            if len(rest_numbers) == 0:\n                result.append(chosen_numbers)\n                return\n            for i in range(len(rest_numbers)):\n                dfs(chosen_numbers + [rest_numbers[i]], rest_numbers[i + 1:], current)\n                \n        dfs([], list(range(1, n + 1)), '')\n        \n        return result\n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n"
    },
    {
        "number": 77,
        "title": "Combinations",
        "difficulty": 1,
        "prompt": "class Solution:\n    def combine(self, n: int, k: int) -> List[List[int]]:\n        \"\"\"\n        Given two integers n and k, return all possible combinations of k numbers chosen from the range [1, n].\n        You may return the answer in any order.\n        Example 1:\n        Input: n = 4, k = 2\n        Output: [[1,2],[1,3],[1,4],[2,3],[2,4],[3,4]]\n        Explanation: There are 4 choose 2 = 6 total combinations.\n        Note that combinations are unordered, i.e., [1,2] and [2,1] are considered to be the same combination.\n        Example 2:\n        Input: n = 1, k = 1\n        Output: [[1]]\n        Explanation: There is 1 choose 1 = 1 total combination.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 3,
        "answer": "        result = []"
    },
    {
        "number": 77,
        "title": "Combinations",
        "difficulty": 1,
        "prompt": "class Solution:\n    def combine(self, n: int, k: int) -> List[List[int]]:\n        \"\"\"\n        Given two integers n and k, return all possible combinations of k numbers chosen from the range [1, n].\n        You may return the answer in any order.\n        Example 1:\n        Input: n = 4, k = 2\n        Output: [[1,2],[1,3],[1,4],[2,3],[2,4],[3,4]]\n        Explanation: There are 4 choose 2 = 6 total combinations.\n        Note that combinations are unordered, i.e., [1,2] and [2,1] are considered to be the same combination.\n        Example 2:\n        Input: n = 1, k = 1\n        Output: [[1]]\n        Explanation: There is 1 choose 1 = 1 total combination.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 4,
        "answer": "        result = []"
    },
    {
        "number": 77,
        "title": "Combinations",
        "difficulty": 1,
        "prompt": "class Solution:\n    def combine(self, n: int, k: int) -> List[List[int]]:\n        \"\"\"\n        Given two integers n and k, return all possible combinations of k numbers chosen from the range [1, n].\n        You may return the answer in any order.\n        Example 1:\n        Input: n = 4, k = 2\n        Output: [[1,2],[1,3],[1,4],[2,3],[2,4],[3,4]]\n        Explanation: There are 4 choose 2 = 6 total combinations.\n        Note that combinations are unordered, i.e., [1,2] and [2,1] are considered to be the same combination.\n        Example 2:\n        Input: n = 1, k = 1\n        Output: [[1]]\n        Explanation: There is 1 choose 1 = 1 total combination.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 5,
        "answer": "        def _helper(n, k, res, path, start):\n            if len(path) == k:\n                res.append(path)\n                return\n            for i in range(start, n):\n                _helper(n, k, res, path + [i + 1], i + 1)"
    },
    {
        "number": 78,
        "title": "Subsets",
        "difficulty": 1,
        "prompt": "class Solution:\n    def subsets(self, nums: List[int]) -> List[List[int]]:\n        \"\"\"\n        Given an integer array nums of unique elements, return all possible subsets (the power set).\n        The solution set must not contain duplicate subsets. Return the solution in any order.\n        Example 1:\n        Input: nums = [1,2,3]\n        Output: [[],[1],[2],[1,2],[3],[1,3],[2,3],[1,2,3]]\n        Example 2:\n        Input: nums = [0]\n        Output: [[],[0]]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        if len(nums) == 0:\n            return [[]]"
    },
    {
        "number": 78,
        "title": "Subsets",
        "difficulty": 1,
        "prompt": "class Solution:\n    def subsets(self, nums: List[int]) -> List[List[int]]:\n        \"\"\"\n        Given an integer array nums of unique elements, return all possible subsets (the power set).\n        The solution set must not contain duplicate subsets. Return the solution in any order.\n        Example 1:\n        Input: nums = [1,2,3]\n        Output: [[],[1],[2],[1,2],[3],[1,3],[2,3],[1,2,3]]\n        Example 2:\n        Input: nums = [0]\n        Output: [[],[0]]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        res = []\n        self.dfs(nums, 0, [], res)\n        return res"
    },
    {
        "number": 78,
        "title": "Subsets",
        "difficulty": 1,
        "prompt": "class Solution:\n    def subsets(self, nums: List[int]) -> List[List[int]]:\n        \"\"\"\n        Given an integer array nums of unique elements, return all possible subsets (the power set).\n        The solution set must not contain duplicate subsets. Return the solution in any order.\n        Example 1:\n        Input: nums = [1,2,3]\n        Output: [[],[1],[2],[1,2],[3],[1,3],[2,3],[1,2,3]]\n        Example 2:\n        Input: nums = [0]\n        Output: [[],[0]]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 3,
        "answer": "        res = []\n        subsets = []\n        def backtrack(subset, nums):\n            nonlocal res\n            subsets.append(subset)\n            if not nums:\n                res.append(subsets[:])\n            for i in range(len(nums)):\n                backtrack(subset + [nums[i]], nums[i + 1:])\n            subsets.pop()\n        backtrack([], nums)\n        return res"
    },
    {
        "number": 78,
        "title": "Subsets",
        "difficulty": 1,
        "prompt": "class Solution:\n    def subsets(self, nums: List[int]) -> List[List[int]]:\n        \"\"\"\n        Given an integer array nums of unique elements, return all possible subsets (the power set).\n        The solution set must not contain duplicate subsets. Return the solution in any order.\n        Example 1:\n        Input: nums = [1,2,3]\n        Output: [[],[1],[2],[1,2],[3],[1,3],[2,3],[1,2,3]]\n        Example 2:\n        Input: nums = [0]\n        Output: [[],[0]]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 4,
        "answer": "        # Bottom up\n        # https://leetcode.com/problems/subsets/discuss/455832/Python-DFS-with-2-lines-solution-and-readable-explaination\n        res = []\n        self.dfs(nums, 0, [], res)\n        return res"
    },
    {
        "number": 78,
        "title": "Subsets",
        "difficulty": 1,
        "prompt": "class Solution:\n    def subsets(self, nums: List[int]) -> List[List[int]]:\n        \"\"\"\n        Given an integer array nums of unique elements, return all possible subsets (the power set).\n        The solution set must not contain duplicate subsets. Return the solution in any order.\n        Example 1:\n        Input: nums = [1,2,3]\n        Output: [[],[1],[2],[1,2],[3],[1,3],[2,3],[1,2,3]]\n        Example 2:\n        Input: nums = [0]\n        Output: [[],[0]]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 5,
        "answer": "        res = []\n        self.helper(nums, res, 0, [])\n        return res"
    },
    {
        "number": 79,
        "title": "Word Search",
        "difficulty": 1,
        "prompt": "class Solution:\n    def exist(self, board: List[List[str]], word: str) -> bool:\n        \"\"\"\n        Given an m x n grid of characters board and a string word, return true if word exists in the grid.\n        The word can be constructed from letters of sequentially adjacent cells, where adjacent cells are horizontally or vertically neighboring. The same letter cell may not be used more than once.\n        Example 1:\n        Input: board = [[\"A\",\"B\",\"C\",\"E\"],[\"S\",\"F\",\"C\",\"S\"],[\"A\",\"D\",\"E\",\"E\"]], word = \"ABCCED\"\n        Output: true\n        Example 2:\n        Input: board = [[\"A\",\"B\",\"C\",\"E\"],[\"S\",\"F\",\"C\",\"S\"],[\"A\",\"D\",\"E\",\"E\"]], word = \"SEE\"\n        Output: true\n        Example 3:\n        Input: board = [[\"A\",\"B\",\"C\",\"E\"],[\"S\",\"F\",\"C\",\"S\"],[\"A\",\"D\",\"E\",\"E\"]], word = \"ABCB\"\n        Output: false\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        \n        m = len(board)\n        n = len(board[0])\n        visited = [ [False for _ in range(n)] for _ in range(m)]\n        \n        def search(i,j, word):\n            if not word:\n                return True\n            \n            if i < 0 or i >= m or j < 0 or j >= n:\n                return False\n            \n            if board[i][j]!= word[0] or visited[i][j]:\n                return False\n            \n            visited[i][j] = True\n            result = (search(i+1,j, word[1:]) or search(i-1,j, word[1:]) or search(i,j+1, word[1:]) or search(i,j-1, word[1:]))\n            visited[i][j] = False\n            return result\n        \n        for i in range(m):\n            for j in range(n):\n                if board[i][j] == word[0] and search(i,j,word[1:]):\n                    return True\n        return False"
    },
    {
        "number": 79,
        "title": "Word Search",
        "difficulty": 1,
        "prompt": "class Solution:\n    def exist(self, board: List[List[str]], word: str) -> bool:\n        \"\"\"\n        Given an m x n grid of characters board and a string word, return true if word exists in the grid.\n        The word can be constructed from letters of sequentially adjacent cells, where adjacent cells are horizontally or vertically neighboring. The same letter cell may not be used more than once.\n        Example 1:\n        Input: board = [[\"A\",\"B\",\"C\",\"E\"],[\"S\",\"F\",\"C\",\"S\"],[\"A\",\"D\",\"E\",\"E\"]], word = \"ABCCED\"\n        Output: true\n        Example 2:\n        Input: board = [[\"A\",\"B\",\"C\",\"E\"],[\"S\",\"F\",\"C\",\"S\"],[\"A\",\"D\",\"E\",\"E\"]], word = \"SEE\"\n        Output: true\n        Example 3:\n        Input: board = [[\"A\",\"B\",\"C\",\"E\"],[\"S\",\"F\",\"C\",\"S\"],[\"A\",\"D\",\"E\",\"E\"]], word = \"ABCB\"\n        Output: false\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        if not board:\n            return False\n        if not word:\n            return True\n        self.ROWS = len(board)\n        self.COLS = len(board[0])\n        self.board = board"
    },
    {
        "number": 79,
        "title": "Word Search",
        "difficulty": 1,
        "prompt": "class Solution:\n    def exist(self, board: List[List[str]], word: str) -> bool:\n        \"\"\"\n        Given an m x n grid of characters board and a string word, return true if word exists in the grid.\n        The word can be constructed from letters of sequentially adjacent cells, where adjacent cells are horizontally or vertically neighboring. The same letter cell may not be used more than once.\n        Example 1:\n        Input: board = [[\"A\",\"B\",\"C\",\"E\"],[\"S\",\"F\",\"C\",\"S\"],[\"A\",\"D\",\"E\",\"E\"]], word = \"ABCCED\"\n        Output: true\n        Example 2:\n        Input: board = [[\"A\",\"B\",\"C\",\"E\"],[\"S\",\"F\",\"C\",\"S\"],[\"A\",\"D\",\"E\",\"E\"]], word = \"SEE\"\n        Output: true\n        Example 3:\n        Input: board = [[\"A\",\"B\",\"C\",\"E\"],[\"S\",\"F\",\"C\",\"S\"],[\"A\",\"D\",\"E\",\"E\"]], word = \"ABCB\"\n        Output: false\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 3,
        "answer": "        def dfs(i, j, k):\n            if not 0 <= i < len(board) or not 0 <= j < len(board[0]) or board[i][j]!= word[k]: return False\n            if k == len(word) - 1: return True\n            tmp, board[i][j] = board[i][j], '/'\n            res = dfs(i+1, j, k+1) or dfs(i-1, j, k+1) or dfs(i, j+1, k+1) or dfs(i, j-1, k+1)\n            board[i][j] = tmp\n            return res"
    },
    {
        "number": 79,
        "title": "Word Search",
        "difficulty": 1,
        "prompt": "class Solution:\n    def exist(self, board: List[List[str]], word: str) -> bool:\n        \"\"\"\n        Given an m x n grid of characters board and a string word, return true if word exists in the grid.\n        The word can be constructed from letters of sequentially adjacent cells, where adjacent cells are horizontally or vertically neighboring. The same letter cell may not be used more than once.\n        Example 1:\n        Input: board = [[\"A\",\"B\",\"C\",\"E\"],[\"S\",\"F\",\"C\",\"S\"],[\"A\",\"D\",\"E\",\"E\"]], word = \"ABCCED\"\n        Output: true\n        Example 2:\n        Input: board = [[\"A\",\"B\",\"C\",\"E\"],[\"S\",\"F\",\"C\",\"S\"],[\"A\",\"D\",\"E\",\"E\"]], word = \"SEE\"\n        Output: true\n        Example 3:\n        Input: board = [[\"A\",\"B\",\"C\",\"E\"],[\"S\",\"F\",\"C\",\"S\"],[\"A\",\"D\",\"E\",\"E\"]], word = \"ABCB\"\n        Output: false\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 4,
        "answer": "        rows, cols = len(board), len(board[0])\n        visited = set()\n        \n        def dfs(r, c, index):\n            # Backtracking\n            if index == len(word):\n                return True\n            # Out of Bounds\n            if r < 0 or r >= rows or c < 0 or c >= cols:\n                return False\n            # Not visited yet\n            if (r, c) in visited:\n                return False\n            \n            # Mark as visited\n            visited.add((r, c))\n            \n            # Traverse\n            if board[r][c] == word[index]:\n                # Left\n                if dfs(r, c-1, index+1):\n                    return True\n                # Right\n                if dfs(r, c+1, index+1):\n                    return True\n                # Up\n                if dfs(r-1, c, index+1):\n                    return True\n                # Down\n                if dfs(r+1, c, index+1):\n                    return True\n                # Found\n                if dfs(r-1, c-1, index+1):\n                    return True\n                if dfs(r+1, c+1, index+1):\n                    return True\n                if dfs(r+1"
    },
    {
        "number": 79,
        "title": "Word Search",
        "difficulty": 1,
        "prompt": "class Solution:\n    def exist(self, board: List[List[str]], word: str) -> bool:\n        \"\"\"\n        Given an m x n grid of characters board and a string word, return true if word exists in the grid.\n        The word can be constructed from letters of sequentially adjacent cells, where adjacent cells are horizontally or vertically neighboring. The same letter cell may not be used more than once.\n        Example 1:\n        Input: board = [[\"A\",\"B\",\"C\",\"E\"],[\"S\",\"F\",\"C\",\"S\"],[\"A\",\"D\",\"E\",\"E\"]], word = \"ABCCED\"\n        Output: true\n        Example 2:\n        Input: board = [[\"A\",\"B\",\"C\",\"E\"],[\"S\",\"F\",\"C\",\"S\"],[\"A\",\"D\",\"E\",\"E\"]], word = \"SEE\"\n        Output: true\n        Example 3:\n        Input: board = [[\"A\",\"B\",\"C\",\"E\"],[\"S\",\"F\",\"C\",\"S\"],[\"A\",\"D\",\"E\",\"E\"]], word = \"ABCB\"\n        Output: false\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 5,
        "answer": "        if not board:\n            return False"
    },
    {
        "number": 80,
        "title": "Remove Duplicates from Sorted Array II",
        "difficulty": 1,
        "prompt": "class Solution:\n    def removeDuplicates(self, nums: List[int]) -> int:\n        \"\"\"\n        Given an integer array nums sorted in non-decreasing order, remove some duplicates in-place such that each unique element appears at most twice. The relative order of the elements should be kept the same.\n        Since it is impossible to change the length of the array in some languages, you must instead have the result be placed in the first part of the array nums. More formally, if there are k elements after removing the duplicates, then the first k elements of nums should hold the final result. It does not matter what you leave beyond the first k elements.\n        Return k after placing the final result in the first k slots of nums.\n        Do not allocate extra space for another array. You must do this by modifying the input array in-place with O(1) extra memory.\n        Custom Judge:\n        The judge will test your solution with the following code:\n        int[] nums = [...]; // Input array\n        int[] expectedNums = [...]; // The expected answer with correct length\n        int k = removeDuplicates(nums); // Calls your implementation\n        assert k == expectedNums.length;\n        for (int i = 0; i < k; i++) {\n            assert nums[i] == expectedNums[i];\n        }\n        If all assertions pass, then your solution will be accepted.\n        Example 1:\n        Input: nums = [1,1,1,2,2,3]\n        Output: 5, nums = [1,1,2,2,3,_]\n        Explanation: Your function should return k = 5, with the first five elements of nums being 1, 1, 2, 2 and 3 respectively.\n        It does not matter what you leave beyond the returned k (hence they are underscores).\n        Example 2:\n        Input: nums = [0,0,1,1,1,1,2,3,3]\n        Output: 7, nums = [0,0,1,1,2,3,3,_,_]\n        Explanation: Your function should return k = 7, with the first seven elements of nums being 0, 0, 1, 1, 2, 3 and 3 respectively.\n        It does not matter what you leave beyond the returned k (hence they are underscores).\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        # Time: O(N), Space: O(1)\n        # If the array is already sorted, then the following code will run in O(N) time and O(1) space.\n        # The time complexity is O(N) because of the two for loop.\n        # The space complexity is O(1) because, at most, we only used two variables, and the two variables do not grow.\n        if len(nums) < 3:\n            return len(nums)\n        i = 0\n        for j in range(3, len(nums)):\n            if nums[i]!= nums[j]:\n                i += 1\n                nums[i] = nums[j]\n        return i + 1"
    },
    {
        "number": 80,
        "title": "Remove Duplicates from Sorted Array II",
        "difficulty": 1,
        "prompt": "class Solution:\n    def removeDuplicates(self, nums: List[int]) -> int:\n        \"\"\"\n        Given an integer array nums sorted in non-decreasing order, remove some duplicates in-place such that each unique element appears at most twice. The relative order of the elements should be kept the same.\n        Since it is impossible to change the length of the array in some languages, you must instead have the result be placed in the first part of the array nums. More formally, if there are k elements after removing the duplicates, then the first k elements of nums should hold the final result. It does not matter what you leave beyond the first k elements.\n        Return k after placing the final result in the first k slots of nums.\n        Do not allocate extra space for another array. You must do this by modifying the input array in-place with O(1) extra memory.\n        Custom Judge:\n        The judge will test your solution with the following code:\n        int[] nums = [...]; // Input array\n        int[] expectedNums = [...]; // The expected answer with correct length\n        int k = removeDuplicates(nums); // Calls your implementation\n        assert k == expectedNums.length;\n        for (int i = 0; i < k; i++) {\n            assert nums[i] == expectedNums[i];\n        }\n        If all assertions pass, then your solution will be accepted.\n        Example 1:\n        Input: nums = [1,1,1,2,2,3]\n        Output: 5, nums = [1,1,2,2,3,_]\n        Explanation: Your function should return k = 5, with the first five elements of nums being 1, 1, 2, 2 and 3 respectively.\n        It does not matter what you leave beyond the returned k (hence they are underscores).\n        Example 2:\n        Input: nums = [0,0,1,1,1,1,2,3,3]\n        Output: 7, nums = [0,0,1,1,2,3,3,_,_]\n        Explanation: Your function should return k = 7, with the first seven elements of nums being 0, 0, 1, 1, 2, 3 and 3 respectively.\n        It does not matter what you leave beyond the returned k (hence they are underscores).\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        \"\"\"\n        [1, 1, 1, 1, 1, 1, 1] => [1, 1, 1, 1, 2, _, _]\n        [1, 1, 2, 2, 3]\n        [0, 0, 1, 1, 1, 1, 1, 1, 2, 3, 3] => [0, 0, 1, 1, 2, 3, 3, _, _, _, _]\n        \n        [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]\n        [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]\n        \"\"\"\n        # [1, 2, 3]\n        # [1, 2, 3, 3, 3, 3]\n        #[1, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3]\n        # [1, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,"
    },
    {
        "number": 80,
        "title": "Remove Duplicates from Sorted Array II",
        "difficulty": 1,
        "prompt": "class Solution:\n    def removeDuplicates(self, nums: List[int]) -> int:\n        \"\"\"\n        Given an integer array nums sorted in non-decreasing order, remove some duplicates in-place such that each unique element appears at most twice. The relative order of the elements should be kept the same.\n        Since it is impossible to change the length of the array in some languages, you must instead have the result be placed in the first part of the array nums. More formally, if there are k elements after removing the duplicates, then the first k elements of nums should hold the final result. It does not matter what you leave beyond the first k elements.\n        Return k after placing the final result in the first k slots of nums.\n        Do not allocate extra space for another array. You must do this by modifying the input array in-place with O(1) extra memory.\n        Custom Judge:\n        The judge will test your solution with the following code:\n        int[] nums = [...]; // Input array\n        int[] expectedNums = [...]; // The expected answer with correct length\n        int k = removeDuplicates(nums); // Calls your implementation\n        assert k == expectedNums.length;\n        for (int i = 0; i < k; i++) {\n            assert nums[i] == expectedNums[i];\n        }\n        If all assertions pass, then your solution will be accepted.\n        Example 1:\n        Input: nums = [1,1,1,2,2,3]\n        Output: 5, nums = [1,1,2,2,3,_]\n        Explanation: Your function should return k = 5, with the first five elements of nums being 1, 1, 2, 2 and 3 respectively.\n        It does not matter what you leave beyond the returned k (hence they are underscores).\n        Example 2:\n        Input: nums = [0,0,1,1,1,1,2,3,3]\n        Output: 7, nums = [0,0,1,1,2,3,3,_,_]\n        Explanation: Your function should return k = 7, with the first seven elements of nums being 0, 0, 1, 1, 2, 3 and 3 respectively.\n        It does not matter what you leave beyond the returned k (hence they are underscores).\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 3,
        "answer": "        n = len(nums)\n        if n < 3: return n\n        i = 1\n        for j in range(2, n):\n            if nums[i-1]!= nums[j]:\n                nums[i] = nums[j]\n                i += 1\n        return i\n    \n    def removeDuplicates2(self, nums: List[int]) -> int:\n        \"\"\"\n        Time limit exceed\n        \"\"\"\n        if not nums:\n            return 0\n        i = 0\n        while i < len(nums):\n            j = i + 1\n            while j < len(nums):\n                if nums[j] == nums[i]:\n                    j += 1\n                else:\n                    break\n            if j - i > 2:\n                del nums[i+1:j]\n            else:\n                i += 1\n        return len(nums)\n    \n    def removeDuplicates3(self, nums: List[int]) -> int:\n        \"\"\"\n        Time limit exceed\n        \"\"\"\n        if not nums:\n            return 0\n        n = len(nums)\n        i = 0\n        for j in range(n-1):\n            if nums[j]!= nums[j+1]:\n                "
    },
    {
        "number": 80,
        "title": "Remove Duplicates from Sorted Array II",
        "difficulty": 1,
        "prompt": "class Solution:\n    def removeDuplicates(self, nums: List[int]) -> int:\n        \"\"\"\n        Given an integer array nums sorted in non-decreasing order, remove some duplicates in-place such that each unique element appears at most twice. The relative order of the elements should be kept the same.\n        Since it is impossible to change the length of the array in some languages, you must instead have the result be placed in the first part of the array nums. More formally, if there are k elements after removing the duplicates, then the first k elements of nums should hold the final result. It does not matter what you leave beyond the first k elements.\n        Return k after placing the final result in the first k slots of nums.\n        Do not allocate extra space for another array. You must do this by modifying the input array in-place with O(1) extra memory.\n        Custom Judge:\n        The judge will test your solution with the following code:\n        int[] nums = [...]; // Input array\n        int[] expectedNums = [...]; // The expected answer with correct length\n        int k = removeDuplicates(nums); // Calls your implementation\n        assert k == expectedNums.length;\n        for (int i = 0; i < k; i++) {\n            assert nums[i] == expectedNums[i];\n        }\n        If all assertions pass, then your solution will be accepted.\n        Example 1:\n        Input: nums = [1,1,1,2,2,3]\n        Output: 5, nums = [1,1,2,2,3,_]\n        Explanation: Your function should return k = 5, with the first five elements of nums being 1, 1, 2, 2 and 3 respectively.\n        It does not matter what you leave beyond the returned k (hence they are underscores).\n        Example 2:\n        Input: nums = [0,0,1,1,1,1,2,3,3]\n        Output: 7, nums = [0,0,1,1,2,3,3,_,_]\n        Explanation: Your function should return k = 7, with the first seven elements of nums being 0, 0, 1, 1, 2, 3 and 3 respectively.\n        It does not matter what you leave beyond the returned k (hence they are underscores).\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 4,
        "answer": "        if not nums:\n            return 0\n        \n        slow = 0\n        for fast in range(1, len(nums)):\n            if nums[fast]!= nums[slow]:\n                slow += 1\n                nums[slow] = nums[fast]\n        return slow + 1"
    },
    {
        "number": 80,
        "title": "Remove Duplicates from Sorted Array II",
        "difficulty": 1,
        "prompt": "class Solution:\n    def removeDuplicates(self, nums: List[int]) -> int:\n        \"\"\"\n        Given an integer array nums sorted in non-decreasing order, remove some duplicates in-place such that each unique element appears at most twice. The relative order of the elements should be kept the same.\n        Since it is impossible to change the length of the array in some languages, you must instead have the result be placed in the first part of the array nums. More formally, if there are k elements after removing the duplicates, then the first k elements of nums should hold the final result. It does not matter what you leave beyond the first k elements.\n        Return k after placing the final result in the first k slots of nums.\n        Do not allocate extra space for another array. You must do this by modifying the input array in-place with O(1) extra memory.\n        Custom Judge:\n        The judge will test your solution with the following code:\n        int[] nums = [...]; // Input array\n        int[] expectedNums = [...]; // The expected answer with correct length\n        int k = removeDuplicates(nums); // Calls your implementation\n        assert k == expectedNums.length;\n        for (int i = 0; i < k; i++) {\n            assert nums[i] == expectedNums[i];\n        }\n        If all assertions pass, then your solution will be accepted.\n        Example 1:\n        Input: nums = [1,1,1,2,2,3]\n        Output: 5, nums = [1,1,2,2,3,_]\n        Explanation: Your function should return k = 5, with the first five elements of nums being 1, 1, 2, 2 and 3 respectively.\n        It does not matter what you leave beyond the returned k (hence they are underscores).\n        Example 2:\n        Input: nums = [0,0,1,1,1,1,2,3,3]\n        Output: 7, nums = [0,0,1,1,2,3,3,_,_]\n        Explanation: Your function should return k = 7, with the first seven elements of nums being 0, 0, 1, 1, 2, 3 and 3 respectively.\n        It does not matter what you leave beyond the returned k (hence they are underscores).\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 5,
        "answer": "        # Time: O(n)\n        # Space: O(1)\n        if len(nums) == 0:\n            return 0\n        \n        slow = 0\n        for fast in range(1, len(nums)):\n            if nums[fast]!= nums[slow]:\n                slow += 1\n                nums[slow] = nums[fast]\n                \n        return slow + 1"
    },
    {
        "number": 81,
        "title": "Search in Rotated Sorted Array II",
        "difficulty": 1,
        "prompt": "class Solution:\n    def search(self, nums: List[int], target: int) -> bool:\n        \"\"\"\n        There is an integer array nums sorted in non-decreasing order (not necessarily with distinct values).\n        Before being passed to your function, nums is rotated at an unknown pivot index k (0 <= k < nums.length) such that the resulting array is [nums[k], nums[k+1],..., nums[n-1], nums[0], nums[1],..., nums[k-1]] (0-indexed). For example, [0,1,2,4,4,4,5,6,6,7] might be rotated at pivot index 5 and become [4,5,6,6,7,0,1,2,4,4].\n        Given the array nums after the rotation and an integer target, return true if target is in nums, or false if it is not in nums.\n        You must decrease the overall operation steps as much as possible.\n        Example 1:\n        Input: nums = [2,5,6,0,0,1,2], target = 0\n        Output: true\n        Example 2:\n        Input: nums = [2,5,6,0,0,1,2], target = 3\n        Output: false\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        l, r = 0, len(nums) - 1\n        while l <= r:\n            m = (l + r) // 2\n            if nums[m] == target:\n                return True\n            if nums[l] == nums[r]:\n                l += 1\n                r -= 1\n            elif nums[l] <= nums[r]:\n                if target >= nums[m] or target < nums[l]:\n                    l = m + 1\n                else:\n                    r = m - 1\n            elif nums[l] > nums[r]:\n                if target > nums[m] or target < nums[r]:\n                    l = m + 1\n                else:\n                    r = m - 1\n        return False\n<|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>"
    },
    {
        "number": 81,
        "title": "Search in Rotated Sorted Array II",
        "difficulty": 1,
        "prompt": "class Solution:\n    def search(self, nums: List[int], target: int) -> bool:\n        \"\"\"\n        There is an integer array nums sorted in non-decreasing order (not necessarily with distinct values).\n        Before being passed to your function, nums is rotated at an unknown pivot index k (0 <= k < nums.length) such that the resulting array is [nums[k], nums[k+1],..., nums[n-1], nums[0], nums[1],..., nums[k-1]] (0-indexed). For example, [0,1,2,4,4,4,5,6,6,7] might be rotated at pivot index 5 and become [4,5,6,6,7,0,1,2,4,4].\n        Given the array nums after the rotation and an integer target, return true if target is in nums, or false if it is not in nums.\n        You must decrease the overall operation steps as much as possible.\n        Example 1:\n        Input: nums = [2,5,6,0,0,1,2], target = 0\n        Output: true\n        Example 2:\n        Input: nums = [2,5,6,0,0,1,2], target = 3\n        Output: false\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        # First, find the index of the smallest element.\n        # Then, binary search the left part.\n        # Note: the pivot index is the k in the description.\n        \n        # Method 1: find the pivot\n        # pivot = -1\n        # for i in range(len(nums)):\n        #     if nums[i] < nums[i+1]:\n        #         pivot = i\n        #         break\n        \n        # if pivot == -1:\n        #     return self.binary_search(nums, 0, len(nums) - 1, target)\n        # else:\n        #     if nums[0] <= target:\n        #         return self.binary_search(nums, 0, pivot - 1, target)\n        #     else:\n        #         return self.binary_search(nums, pivot + 1, len(nums) - 1, target)\n        \n        # Method 2: binary search the left part\n        l = 0\n        r = len(nums) - 1\n        while l < r:\n            mid = (l + r) // 2\n            if nums[mid] > nums[r]:\n                l = mid + 1\n            else:\n                r = mid\n        pivot = l\n        # binary search"
    },
    {
        "number": 81,
        "title": "Search in Rotated Sorted Array II",
        "difficulty": 1,
        "prompt": "class Solution:\n    def search(self, nums: List[int], target: int) -> bool:\n        \"\"\"\n        There is an integer array nums sorted in non-decreasing order (not necessarily with distinct values).\n        Before being passed to your function, nums is rotated at an unknown pivot index k (0 <= k < nums.length) such that the resulting array is [nums[k], nums[k+1],..., nums[n-1], nums[0], nums[1],..., nums[k-1]] (0-indexed). For example, [0,1,2,4,4,4,5,6,6,7] might be rotated at pivot index 5 and become [4,5,6,6,7,0,1,2,4,4].\n        Given the array nums after the rotation and an integer target, return true if target is in nums, or false if it is not in nums.\n        You must decrease the overall operation steps as much as possible.\n        Example 1:\n        Input: nums = [2,5,6,0,0,1,2], target = 0\n        Output: true\n        Example 2:\n        Input: nums = [2,5,6,0,0,1,2], target = 3\n        Output: false\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 3,
        "answer": "        left, right = 0, len(nums) - 1\n        while left <= right:\n            mid = (left + right) // 2\n            if nums[mid] == target:\n                return True\n            # \u5982\u679c\u53f3\u534a\u90e8\u5206\u6709\u5e8f\uff0c\u8bf4\u660e target \u5728\u53f3\u534a\u90e8\u5206\n            if nums[left] < nums[mid]:\n                # \u5982\u679c target \u5927\u4e8e\u5de6\u534a\u90e8\u5206\u6700\u5927\u503c\uff0c\u8bf4\u660e\u53f3\u534a\u90e8\u5206\u662f\u6709\u5e8f\u7684\n                if nums[mid] < target:\n                    # \u4e8c\u5206\u67e5\u627e\u53f3\u534a\u90e8\u5206\n                    left = mid + 1\n                else:\n                    # \u4e8c\u5206\u67e5\u627e\u5de6\u534a\u90e8\u5206\n                    right = mid - 1\n            # \u5982\u679c\u5de6\u534a\u90e8\u5206\u6709\u5e8f\uff0c\u8bf4\u660e target \u5728\u5de6\u534a\u90e8\u5206\n            elif nums[mid] > nums[left]:\n                # \u5982\u679c target \u5c0f\u4e8e\u53f3\u534a\u90e8\u5206\ufffd"
    },
    {
        "number": 81,
        "title": "Search in Rotated Sorted Array II",
        "difficulty": 1,
        "prompt": "class Solution:\n    def search(self, nums: List[int], target: int) -> bool:\n        \"\"\"\n        There is an integer array nums sorted in non-decreasing order (not necessarily with distinct values).\n        Before being passed to your function, nums is rotated at an unknown pivot index k (0 <= k < nums.length) such that the resulting array is [nums[k], nums[k+1],..., nums[n-1], nums[0], nums[1],..., nums[k-1]] (0-indexed). For example, [0,1,2,4,4,4,5,6,6,7] might be rotated at pivot index 5 and become [4,5,6,6,7,0,1,2,4,4].\n        Given the array nums after the rotation and an integer target, return true if target is in nums, or false if it is not in nums.\n        You must decrease the overall operation steps as much as possible.\n        Example 1:\n        Input: nums = [2,5,6,0,0,1,2], target = 0\n        Output: true\n        Example 2:\n        Input: nums = [2,5,6,0,0,1,2], target = 3\n        Output: false\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 4,
        "answer": "        # time complexity O(logN)\n        # space complexity O(1)\n        l, r = 0, len(nums)-1\n        while l <= r:\n            m = l + (r-l)//2\n            if nums[m] == target:\n                return True\n            if nums[l] == nums[m] and nums[m] == nums[r]:\n                l += 1\n                r -= 1\n            elif nums[l] <= nums[m]:\n                if nums[l] <= target < nums[m]:\n                    r = m - 1\n                else:\n                    l = m + 1\n            elif nums[m] <= nums[r]:\n                if nums[m] < target <= nums[r]:\n                    l = m + 1\n                else:\n                    r = m - 1\n        return False\n<|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>"
    },
    {
        "number": 81,
        "title": "Search in Rotated Sorted Array II",
        "difficulty": 1,
        "prompt": "class Solution:\n    def search(self, nums: List[int], target: int) -> bool:\n        \"\"\"\n        There is an integer array nums sorted in non-decreasing order (not necessarily with distinct values).\n        Before being passed to your function, nums is rotated at an unknown pivot index k (0 <= k < nums.length) such that the resulting array is [nums[k], nums[k+1],..., nums[n-1], nums[0], nums[1],..., nums[k-1]] (0-indexed). For example, [0,1,2,4,4,4,5,6,6,7] might be rotated at pivot index 5 and become [4,5,6,6,7,0,1,2,4,4].\n        Given the array nums after the rotation and an integer target, return true if target is in nums, or false if it is not in nums.\n        You must decrease the overall operation steps as much as possible.\n        Example 1:\n        Input: nums = [2,5,6,0,0,1,2], target = 0\n        Output: true\n        Example 2:\n        Input: nums = [2,5,6,0,0,1,2], target = 3\n        Output: false\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 5,
        "answer": "        # 1.\n        # O(nlogn) + O(logn) -> O(n) + O(n)\n        # if not nums:\n        #     return False\n        # left, right = 0, len(nums) - 1\n        # while left <= right:\n        #     mid = (left + right) // 2\n        #     if nums[mid] == target:\n        #         return True\n        #     if nums[left] <= nums[mid]:\n        #         if nums[left] <= target < nums[mid]:\n        #             right = mid - 1\n        #         else:\n        #             left = mid + 1\n        #     else:\n        #         if nums[mid] < target <= nums[right]:\n        #             left = mid + 1\n        #         else:\n        #             right = mid - 1\n        # return False"
    },
    {
        "number": 82,
        "title": "Remove Duplicates from Sorted List II",
        "difficulty": 1,
        "prompt": "class Solution:\n    def deleteDuplicates(self, head: Optional[ListNode]) -> Optional[ListNode]:\n        \"\"\"\n        Given the head of a sorted linked list, delete all nodes that have duplicate numbers, leaving only distinct numbers from the original list. Return the linked list sorted as well.\n        Example 1:\n        Input: head = [1,2,3,3,4,4,5]\n        Output: [1,2,5]\n        Example 2:\n        Input: head = [1,1,1,2,3]\n        Output: [2,3]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        # Time O(N) | Space O(1)\n        if not head:\n            return None\n        ptr = head\n        while ptr:\n            if ptr.next:\n                if ptr.val == ptr.next.val:\n                    ptr.next = ptr.next.next\n                else:\n                    ptr = ptr.next\n            else:\n                break\n        return head<|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>"
    },
    {
        "number": 82,
        "title": "Remove Duplicates from Sorted List II",
        "difficulty": 1,
        "prompt": "class Solution:\n    def deleteDuplicates(self, head: Optional[ListNode]) -> Optional[ListNode]:\n        \"\"\"\n        Given the head of a sorted linked list, delete all nodes that have duplicate numbers, leaving only distinct numbers from the original list. Return the linked list sorted as well.\n        Example 1:\n        Input: head = [1,2,3,3,4,4,5]\n        Output: [1,2,5]\n        Example 2:\n        Input: head = [1,1,1,2,3]\n        Output: [2,3]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        if not head: return head\n        seen = set()\n        dummy = ListNode(-1, head)\n        cur = dummy\n        while cur.next:\n            if cur.next.val not in seen:\n                seen.add(cur.next.val)\n                cur = cur.next\n            else:\n                cur.next = cur.next.next\n        return dummy.next"
    },
    {
        "number": 82,
        "title": "Remove Duplicates from Sorted List II",
        "difficulty": 1,
        "prompt": "class Solution:\n    def deleteDuplicates(self, head: Optional[ListNode]) -> Optional[ListNode]:\n        \"\"\"\n        Given the head of a sorted linked list, delete all nodes that have duplicate numbers, leaving only distinct numbers from the original list. Return the linked list sorted as well.\n        Example 1:\n        Input: head = [1,2,3,3,4,4,5]\n        Output: [1,2,5]\n        Example 2:\n        Input: head = [1,1,1,2,3]\n        Output: [2,3]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 3,
        "answer": "        # while head and head.next:\n        #     if head.val == head.next.val:\n        #         head.next = head.next.next\n        #     else:\n        #         head = head.next\n        # return head"
    },
    {
        "number": 82,
        "title": "Remove Duplicates from Sorted List II",
        "difficulty": 1,
        "prompt": "class Solution:\n    def deleteDuplicates(self, head: Optional[ListNode]) -> Optional[ListNode]:\n        \"\"\"\n        Given the head of a sorted linked list, delete all nodes that have duplicate numbers, leaving only distinct numbers from the original list. Return the linked list sorted as well.\n        Example 1:\n        Input: head = [1,2,3,3,4,4,5]\n        Output: [1,2,5]\n        Example 2:\n        Input: head = [1,1,1,2,3]\n        Output: [2,3]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 4,
        "answer": "        # Runtime: 48 ms, faster than 94.40% of Python3 online submissions for Remove Duplicates from Sorted List.\n        # Memory Usage: 14.6 MB, less than 6.45% of Python3 online submissions for Remove Duplicates from Sorted List.\n        if not head or not head.next:\n            return head\n        curr = head\n        while curr.next:\n            if curr.val == curr.next.val:\n                curr.next = curr.next.next\n            else:\n                curr = curr.next\n        return head\n<|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>"
    },
    {
        "number": 82,
        "title": "Remove Duplicates from Sorted List II",
        "difficulty": 1,
        "prompt": "class Solution:\n    def deleteDuplicates(self, head: Optional[ListNode]) -> Optional[ListNode]:\n        \"\"\"\n        Given the head of a sorted linked list, delete all nodes that have duplicate numbers, leaving only distinct numbers from the original list. Return the linked list sorted as well.\n        Example 1:\n        Input: head = [1,2,3,3,4,4,5]\n        Output: [1,2,5]\n        Example 2:\n        Input: head = [1,1,1,2,3]\n        Output: [2,3]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 5,
        "answer": "        # (0) edge case\n        if not head:\n            return head\n        # (1) initialize current pointer, previous pointer, and hashset\n        curr = head\n        prev = None\n        unique_nums = set()\n        # (2) loop through the linked list and find duplicate nodes\n        while curr:\n            if curr.val in unique_nums:\n                prev.next = curr.next\n                curr = None\n            else:\n                unique_nums.add(curr.val)\n                prev = curr\n            curr = prev.next\n        # (3) return the head of the new linked list\n        return head\n<|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>"
    },
    {
        "number": 83,
        "title": "Remove Duplicates from Sorted List",
        "difficulty": 0,
        "prompt": "class Solution:\n    def deleteDuplicates(self, head: Optional[ListNode]) -> Optional[ListNode]:\n        \"\"\"\n        Given the head of a sorted linked list, delete all duplicates such that each element appears only once. Return the linked list sorted as well.\n        Example 1:\n        Input: head = [1,1,2]\n        Output: [1,2]\n        Example 2:\n        Input: head = [1,1,2,3,3]\n        Output: [1,2,3]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        # If the linked list is empty, return None\n        if head is None:\n            return None\n        # if the head is a list node, copy it into a new node\n        if head.next:\n            copy = head\n        else:\n            copy = head\n        # Initialize a current and a next node\n        current = head\n        next = current.next\n        # While current node is not NULL\n        while current:\n            # if the current node is the same as the next node, delete the current node\n            if current.val == next.val:\n                next = next.next\n            # if the current node is not the same as the next node, update next node\n            else:\n                next = next.next\n            # if next node is NULL, break out of the loop\n            if next is None:\n                break\n            # update current node\n            current = current.next\n        # if current node is NULL, return the head\n        if current is None:\n            return head\n        # if the current node is not the same as the next node,\n        # check if the head is a list node, if yes, update the head\n        if head.val == copy.val:\n            return next\n        # if the head is not a list node, set the head to the current node\n        else:\n            return copy"
    },
    {
        "number": 83,
        "title": "Remove Duplicates from Sorted List",
        "difficulty": 0,
        "prompt": "class Solution:\n    def deleteDuplicates(self, head: Optional[ListNode]) -> Optional[ListNode]:\n        \"\"\"\n        Given the head of a sorted linked list, delete all duplicates such that each element appears only once. Return the linked list sorted as well.\n        Example 1:\n        Input: head = [1,1,2]\n        Output: [1,2]\n        Example 2:\n        Input: head = [1,1,2,3,3]\n        Output: [1,2,3]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        # Option 1: No extra memory\n        # Option 2: extra memory"
    },
    {
        "number": 83,
        "title": "Remove Duplicates from Sorted List",
        "difficulty": 0,
        "prompt": "class Solution:\n    def deleteDuplicates(self, head: Optional[ListNode]) -> Optional[ListNode]:\n        \"\"\"\n        Given the head of a sorted linked list, delete all duplicates such that each element appears only once. Return the linked list sorted as well.\n        Example 1:\n        Input: head = [1,1,2]\n        Output: [1,2]\n        Example 2:\n        Input: head = [1,1,2,3,3]\n        Output: [1,2,3]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 3,
        "answer": "        # Solution 1 - 28 ms\n        \"\"\"\n        if not head: return None\n        dummy = ListNode(0, head)\n        pre = dummy\n        cur = head\n        while cur:\n            if cur.next and cur.val == cur.next.val:\n                while cur.next and cur.val == cur.next.val:\n                    cur = cur.next\n                cur = cur.next\n                pre.next = cur\n            else:\n                pre = pre.next\n                cur = cur.next\n        return dummy.next\n        \"\"\"\n        # Solution 2 - 36 ms\n        if not head: return None\n        dummy = ListNode(0, head)\n        pre = dummy\n        cur = head\n        while cur:\n            if cur.next and cur.val == cur.next.val:\n                while cur.next and cur.val == cur.next.val:\n                    cur = cur.next\n                pre.next = cur.next\n            else:\n                pre = pre.next\n                cur = cur.next\n        return dummy.next"
    },
    {
        "number": 83,
        "title": "Remove Duplicates from Sorted List",
        "difficulty": 0,
        "prompt": "class Solution:\n    def deleteDuplicates(self, head: Optional[ListNode]) -> Optional[ListNode]:\n        \"\"\"\n        Given the head of a sorted linked list, delete all duplicates such that each element appears only once. Return the linked list sorted as well.\n        Example 1:\n        Input: head = [1,1,2]\n        Output: [1,2]\n        Example 2:\n        Input: head = [1,1,2,3,3]\n        Output: [1,2,3]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 4,
        "answer": "        \n        curr = head\n        \n        while curr and curr.next:\n            if curr.val == curr.next.val:\n                curr.next = curr.next.next\n            else:\n                curr = curr.next\n                \n        return head\n<|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>"
    },
    {
        "number": 83,
        "title": "Remove Duplicates from Sorted List",
        "difficulty": 0,
        "prompt": "class Solution:\n    def deleteDuplicates(self, head: Optional[ListNode]) -> Optional[ListNode]:\n        \"\"\"\n        Given the head of a sorted linked list, delete all duplicates such that each element appears only once. Return the linked list sorted as well.\n        Example 1:\n        Input: head = [1,1,2]\n        Output: [1,2]\n        Example 2:\n        Input: head = [1,1,2,3,3]\n        Output: [1,2,3]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 5,
        "answer": "        curr = head\n        while curr and curr.next:\n            if curr.val == curr.next.val:\n                curr.next = curr.next.next\n            else:\n                curr = curr.next\n        return head"
    },
    {
        "number": 84,
        "title": "Largest Rectangle in Histogram",
        "difficulty": 2,
        "prompt": "class Solution:\n    def largestRectangleArea(self, heights: List[int]) -> int:\n        \"\"\"\n        Given an array of integers heights representing the histogram's bar height where the width of each bar is 1, return the area of the largest rectangle in the histogram.\n        Example 1:\n        Input: heights = [2,1,5,6,2,3]\n        Output: 10\n        Explanation: The above is a histogram where width of each bar is 1.\n        The largest rectangle is shown in the red area, which has an area = 10 units.\n        Example 2:\n        Input: heights = [2,4]\n        Output: 4\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        # https://leetcode.com/problems/largest-rectangle-in-histogram/discuss/175370/Python-O(n)-solution-with-explanation\n        # https://leetcode.com/problems/largest-rectangle-in-histogram/discuss/185486/Python-O(n)-time-O(1)-space-solution-with-explanation\n        #\n        # Time: O(n)\n        # Space: O(1)\n        # n = len(heights)\n        # if n == 0:\n        #     return 0\n        # heights.append(0)\n        # stack = [0]\n        # result = 0\n        # for i in range(1, n + 1):\n        #     while heights[i] < heights[stack[-1]]:\n        #         curr_height = heights[stack.pop()]\n        #         curr_width = i - stack[-1] - 1\n        #         result = max(result, curr_height * curr_width)\n        #     stack.append(i)\n        # heights.pop()\n        # return result\n        #\n        # #https://leetcode.com/problems/largest-rectangle-in-histogram/"
    },
    {
        "number": 84,
        "title": "Largest Rectangle in Histogram",
        "difficulty": 2,
        "prompt": "class Solution:\n    def largestRectangleArea(self, heights: List[int]) -> int:\n        \"\"\"\n        Given an array of integers heights representing the histogram's bar height where the width of each bar is 1, return the area of the largest rectangle in the histogram.\n        Example 1:\n        Input: heights = [2,1,5,6,2,3]\n        Output: 10\n        Explanation: The above is a histogram where width of each bar is 1.\n        The largest rectangle is shown in the red area, which has an area = 10 units.\n        Example 2:\n        Input: heights = [2,4]\n        Output: 4\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        # Stack\n        # Time complexity: O(n)\n        # Space complexity: O(n)\n        # heights = [2, 1, 5, 6, 2, 3]\n        # max_area = 0\n        # stack = []\n        # i = 0\n        # while i < len(heights):\n        #     height = heights[i]\n        #     if not stack or height >= heights[stack[-1]]:\n        #         stack.append(i)\n        #         i += 1\n        #     else:\n        #         while stack and height < heights[stack[-1]]:\n        #             index = stack.pop()\n        #             left = stack[-1] if stack else -1\n        #             area = heights[index] * (i - left - 1)\n        #             max_area = max(max_area, area)\n        #         stack.append(i)\n        #         i += 1"
    },
    {
        "number": 84,
        "title": "Largest Rectangle in Histogram",
        "difficulty": 2,
        "prompt": "class Solution:\n    def largestRectangleArea(self, heights: List[int]) -> int:\n        \"\"\"\n        Given an array of integers heights representing the histogram's bar height where the width of each bar is 1, return the area of the largest rectangle in the histogram.\n        Example 1:\n        Input: heights = [2,1,5,6,2,3]\n        Output: 10\n        Explanation: The above is a histogram where width of each bar is 1.\n        The largest rectangle is shown in the red area, which has an area = 10 units.\n        Example 2:\n        Input: heights = [2,4]\n        Output: 4\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 3,
        "answer": "        \n        # Brute Force\n        # Time O(N^2)\n        # Space O(1)\n        # curr_max = 0\n        # for i in range(len(heights)):\n        #     for j in range(i, len(heights)):\n        #         curr_max = max(curr_max, heights[j]*(j-i+1))\n        # return curr_max\n        \n        # Optimized\n        # Time O(N)\n        # Space O(1)\n        # max_ending_here = 0\n        # max_so_far = 0\n        # for i in range(len(heights)):\n        #     max_ending_here = 0\n        #     for j in range(i, len(heights)):\n        #         max_ending_here = max(max_ending_here, heights[j])\n        #         max_so_far = max(max_so_far, max_ending_here*(j-i+1))\n        # return max_so_far\n        \n        \n        # Stacks\n        # Time O(N)\n        # Space O(N)\n        # max_ending_here = 0\n        # max_so_far = 0\n        # stack = []\n"
    },
    {
        "number": 84,
        "title": "Largest Rectangle in Histogram",
        "difficulty": 2,
        "prompt": "class Solution:\n    def largestRectangleArea(self, heights: List[int]) -> int:\n        \"\"\"\n        Given an array of integers heights representing the histogram's bar height where the width of each bar is 1, return the area of the largest rectangle in the histogram.\n        Example 1:\n        Input: heights = [2,1,5,6,2,3]\n        Output: 10\n        Explanation: The above is a histogram where width of each bar is 1.\n        The largest rectangle is shown in the red area, which has an area = 10 units.\n        Example 2:\n        Input: heights = [2,4]\n        Output: 4\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 4,
        "answer": "        # \u53cc\u6307\u9488\n        # https://leetcode.com/problems/largest-rectangle-in-histogram/discuss/208143/Python-O(n)-Solution-with-Explanation\n        # https://leetcode.com/problems/largest-rectangle-in-histogram/discuss/208135/Python-O(n)-Solution-with-Explanation\n        # \u4e0d\u65ad\u5730\u6bd4\u8f83\u5de6\u53f3\u4e24\u7aef\u7d22\u5f15\uff0c\u53ea\u8981\u5de6\u53f3\u4e24\u7aef\u7d22\u5f15\u5dee\u5927\u4e8e1\uff0c\u5c31\u6bd4\u8f83\u5de6\u7aef\u7d22\u5f15\u548c\u53f3\u7aef\u7d22\u5f15\u6240\u5bf9\u5e94\u7684\u503c\u548c\u5f53\u524d\u7d22\u5f15\u7684\u503c\uff0c\u6bcf\u6b21\u90fd\u6bd4\u8f83\u5f53\u524d\u503c\u662f\u5426\u7b26\u5408\u8981\u6c42\uff0c\u5e76\u66f4\u65b0\u6700\u5927\u9762\u79ef\n        heights = [2, 1, 5, 6, 2, 3]\n        if len(heights) == 0: return 0\n        if len("
    },
    {
        "number": 84,
        "title": "Largest Rectangle in Histogram",
        "difficulty": 2,
        "prompt": "class Solution:\n    def largestRectangleArea(self, heights: List[int]) -> int:\n        \"\"\"\n        Given an array of integers heights representing the histogram's bar height where the width of each bar is 1, return the area of the largest rectangle in the histogram.\n        Example 1:\n        Input: heights = [2,1,5,6,2,3]\n        Output: 10\n        Explanation: The above is a histogram where width of each bar is 1.\n        The largest rectangle is shown in the red area, which has an area = 10 units.\n        Example 2:\n        Input: heights = [2,4]\n        Output: 4\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 5,
        "answer": "        # \u81ea\u9876\u5411\u4e0b\u7684\u6700\u5927\u9762\u79ef\u95ee\u9898\uff0c\u4f7f\u7528\u4e00\u4e2a\u8d2a\u5fc3\u7684\u601d\u60f3\uff0c\n        # \u5bf9\u4e8e\u6bcf\u4e00\u4e2aheight\uff0c\u4ee5\u5f53\u524dheight\u4e3a\u6700\u5c0f\u503c\uff0c\u5411\u5de6\u8fb9\u627e\u6700\u5927\u503c\uff0c\u5411\u53f3\u8fb9\u627e\u6700\u5927\u503c\uff0c\n        # \u6700\u540e\u627e\u5230\u7684\u4e00\u5b9a\u662f\u5f53\u524dheight\u6700\u5c0f\u7684\u90a3\u4e2a\u5de6\u8fb9\u7684height\u548c\u53f3\u8fb9\u7684height\u6700\u5927\u503c\n        # \u7136\u540e\u518d\u52a0\u4e0aheight * len(heights)\u5c31\u5f97\u5230\u6700\u7ec8\u7b54\u6848\u4e86\n        # \u4ece\u5de6\u8fb9\u5f00\u59cb\u904d\u5386\uff0c\u627e\u5230\u6700\u5c0f\u503c\uff0c\u7136\u540e\u5411\u53f3\u8fb9\u627e\u6700\u5927\u503c\uff0c\u6700\u540e\u627e\u5230\u7684\u90a3\u4e2a\u5c31\u662f\u5f53\u524d\u7684\u6700\u5c0f\ufffd"
    },
    {
        "number": 85,
        "title": "Maximal Rectangle",
        "difficulty": 2,
        "prompt": "class Solution:\n    def maximalRectangle(self, matrix: List[List[str]]) -> int:\n        \"\"\"\n        Given a rows x cols binary matrix filled with 0's and 1's, find the largest rectangle containing only 1's and return its area.\n        Example 1:\n        Input: matrix = [[\"1\",\"0\",\"1\",\"0\",\"0\"],[\"1\",\"0\",\"1\",\"1\",\"1\"],[\"1\",\"1\",\"1\",\"1\",\"1\"],[\"1\",\"0\",\"0\",\"1\",\"0\"]]\n        Output: 6\n        Explanation: The maximal rectangle is shown in the above picture.\n        Example 2:\n        Input: matrix = [[\"0\"]]\n        Output: 0\n        Example 3:\n        Input: matrix = [[\"1\"]]\n        Output: 1\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        if not matrix: return 0\n        rows = len(matrix)\n        cols = len(matrix[0])\n        dp = [0] * cols\n        ans = 0\n        for row in range(rows):\n            for col in range(cols):\n                if matrix[row][col] == '1':\n                    dp[col] = dp[col] + 1\n                else:\n                    dp[col] = 0\n            ans = max(ans, self.largestRectangleArea(dp))\n        return ans"
    },
    {
        "number": 85,
        "title": "Maximal Rectangle",
        "difficulty": 2,
        "prompt": "class Solution:\n    def maximalRectangle(self, matrix: List[List[str]]) -> int:\n        \"\"\"\n        Given a rows x cols binary matrix filled with 0's and 1's, find the largest rectangle containing only 1's and return its area.\n        Example 1:\n        Input: matrix = [[\"1\",\"0\",\"1\",\"0\",\"0\"],[\"1\",\"0\",\"1\",\"1\",\"1\"],[\"1\",\"1\",\"1\",\"1\",\"1\"],[\"1\",\"0\",\"0\",\"1\",\"0\"]]\n        Output: 6\n        Explanation: The maximal rectangle is shown in the above picture.\n        Example 2:\n        Input: matrix = [[\"0\"]]\n        Output: 0\n        Example 3:\n        Input: matrix = [[\"1\"]]\n        Output: 1\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        # key: the height of the rectangle\n        # value: the number of 1 in this rectangle\n        dp = [{}]\n        \n        ans = 0\n        for i in range(len(matrix)):\n            for j in range(len(matrix[0])):\n                # try to extend the rectangle with this left, right, and height\n                if matrix[i][j] == \"0\":\n                    continue\n                \n                if j not in dp[i]:\n                    dp[i][j] = 0\n                dp[i][j] += 1\n                \n                # the number of 1 in this rectangle\n                area = dp[i][j]\n                \n                # update the area if needed\n                for k in range(j, -1, -1):\n                    if k not in dp[i]:\n                        break\n                    area = max(area, dp[i][k])\n                    \n                for k in range(j + 1, len(matrix[0])):\n                    if k not in dp[i]:\n                        break\n                    area = max(area, dp[i][k])\n                    \n                ans = max(ans, area * (k - j + 1))\n                \n        return ans"
    },
    {
        "number": 85,
        "title": "Maximal Rectangle",
        "difficulty": 2,
        "prompt": "class Solution:\n    def maximalRectangle(self, matrix: List[List[str]]) -> int:\n        \"\"\"\n        Given a rows x cols binary matrix filled with 0's and 1's, find the largest rectangle containing only 1's and return its area.\n        Example 1:\n        Input: matrix = [[\"1\",\"0\",\"1\",\"0\",\"0\"],[\"1\",\"0\",\"1\",\"1\",\"1\"],[\"1\",\"1\",\"1\",\"1\",\"1\"],[\"1\",\"0\",\"0\",\"1\",\"0\"]]\n        Output: 6\n        Explanation: The maximal rectangle is shown in the above picture.\n        Example 2:\n        Input: matrix = [[\"0\"]]\n        Output: 0\n        Example 3:\n        Input: matrix = [[\"1\"]]\n        Output: 1\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 3,
        "answer": "        if len(matrix) == 0 or len(matrix[0]) == 0:\n            return 0\n        \n        row = len(matrix)\n        col = len(matrix[0])\n        \n        dp = [[0 for _ in range(col)] for _ in range(row)]\n        \n        ans = 0\n        for i in range(row):\n            for j in range(col):\n                if matrix[i][j] == '1':\n                    dp[i][j] = (dp[i][j - 1] + 1 if j!= 0 else 1) if i!= 0 else 1\n                    for k in range(i, -1, -1):\n                        dp[k][j] = min(dp[k][j], dp[k + 1][j] + 1) if k!= row - 1 else dp[k][j]\n                        ans = max(ans, dp[k][j] * (i - k + 1))\n        return ans\n<|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>"
    },
    {
        "number": 85,
        "title": "Maximal Rectangle",
        "difficulty": 2,
        "prompt": "class Solution:\n    def maximalRectangle(self, matrix: List[List[str]]) -> int:\n        \"\"\"\n        Given a rows x cols binary matrix filled with 0's and 1's, find the largest rectangle containing only 1's and return its area.\n        Example 1:\n        Input: matrix = [[\"1\",\"0\",\"1\",\"0\",\"0\"],[\"1\",\"0\",\"1\",\"1\",\"1\"],[\"1\",\"1\",\"1\",\"1\",\"1\"],[\"1\",\"0\",\"0\",\"1\",\"0\"]]\n        Output: 6\n        Explanation: The maximal rectangle is shown in the above picture.\n        Example 2:\n        Input: matrix = [[\"0\"]]\n        Output: 0\n        Example 3:\n        Input: matrix = [[\"1\"]]\n        Output: 1\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 4,
        "answer": "        rows, cols = len(matrix), len(matrix[0])\n        if not rows:\n            return 0\n        heights = [0] * cols\n        res = 0\n        for row in matrix:\n            for i in range(cols):\n                if row[i] == '1':\n                    heights[i] += 1\n                else:\n                    heights[i] = 0\n            res = max(res, self.largestRectangleArea(heights))\n        return res\n    \n    def largestRectangleArea(self, heights: List[int]) -> int:\n        stack, ans = [], 0\n        heights.append(0)\n        for i in range(len(heights)):\n            while stack and heights[stack[-1]] > heights[i]:\n                curr = stack.pop()\n                ans = max(ans, heights[curr] * (i - stack[-1] - 1 if stack else i))\n            stack.append(i)\n        return ans<|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>"
    },
    {
        "number": 85,
        "title": "Maximal Rectangle",
        "difficulty": 2,
        "prompt": "class Solution:\n    def maximalRectangle(self, matrix: List[List[str]]) -> int:\n        \"\"\"\n        Given a rows x cols binary matrix filled with 0's and 1's, find the largest rectangle containing only 1's and return its area.\n        Example 1:\n        Input: matrix = [[\"1\",\"0\",\"1\",\"0\",\"0\"],[\"1\",\"0\",\"1\",\"1\",\"1\"],[\"1\",\"1\",\"1\",\"1\",\"1\"],[\"1\",\"0\",\"0\",\"1\",\"0\"]]\n        Output: 6\n        Explanation: The maximal rectangle is shown in the above picture.\n        Example 2:\n        Input: matrix = [[\"0\"]]\n        Output: 0\n        Example 3:\n        Input: matrix = [[\"1\"]]\n        Output: 1\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 5,
        "answer": "        if not matrix:\n            return 0\n        \n        m, n = len(matrix), len(matrix[0])\n        \n        dp = [0] * n\n        res = 0\n        for i in range(m):\n            for j in range(n):\n                if matrix[i][j] == '1':\n                    dp[j] = dp[j] + 1\n                else:\n                    dp[j] = 0\n            res = max(res, self.helper(dp))\n        return res\n    \n    def helper(self, heights):\n        st = []\n        res = 0\n        for i in range(len(heights)):\n            while st and heights[st[-1]] > heights[i]:\n                h = heights[st.pop()]\n                w = i if not st else i - st[-1] - 1\n                res = max(res, w*h)\n            st.append(i)\n        while st:\n            h = heights[st.pop()]\n            w = len(heights) if not st else len(heights) - st[-1] - 1\n            res = max(res, w*h)\n        return res<|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>"
    },
    {
        "number": 86,
        "title": "Partition List",
        "difficulty": 1,
        "prompt": "class Solution:\n    def partition(self, head: Optional[ListNode], x: int) -> Optional[ListNode]:\n        \"\"\"\n        Given the head of a linked list and a value x, partition it such that all nodes less than x come before nodes greater than or equal to x.\n        You should preserve the original relative order of the nodes in each of the two partitions.\n        Example 1:\n        Input: head = [1,4,3,2,5,2], x = 3\n        Output: [1,2,2,4,3,5]\n        Example 2:\n        Input: head = [2,1], x = 2\n        Output: [1,2]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        # Find the rightmost node that is less than or equal to x\n        last_node_before_x = None\n        left_head = ListNode()\n        left_tail = left_head\n        right_head = ListNode()\n        right_tail = right_head\n        cur = head\n        while cur is not None:\n            if cur.val < x:\n                left_tail.next = cur\n                left_tail = left_tail.next\n            else:\n                right_tail.next = cur\n                right_tail = right_tail.next\n            cur = cur.next\n        right_tail.next = None\n        left_tail.next = right_head.next\n        return left_head.next"
    },
    {
        "number": 86,
        "title": "Partition List",
        "difficulty": 1,
        "prompt": "class Solution:\n    def partition(self, head: Optional[ListNode], x: int) -> Optional[ListNode]:\n        \"\"\"\n        Given the head of a linked list and a value x, partition it such that all nodes less than x come before nodes greater than or equal to x.\n        You should preserve the original relative order of the nodes in each of the two partitions.\n        Example 1:\n        Input: head = [1,4,3,2,5,2], x = 3\n        Output: [1,2,2,4,3,5]\n        Example 2:\n        Input: head = [2,1], x = 2\n        Output: [1,2]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        # iterate through the linked list and store all values into a list\n        # iterate through the list and if the value is less than x, we insert it in the new list\n        # we don't return this list as it isn't a linked list\n        # we return a new linked list that contains all the values of the new list\n        # the reason why we don't return the list is because we want to modify the original linked list\n        # create a new linked list that will contain all the values less than x\n        # create a new linked list that will contain all the values greater than or equal to x\n        # we don't return these lists because they are not linked lists\n        # iterate through the list and append the values to the correct linked list\n        # return the head of the new linked list"
    },
    {
        "number": 86,
        "title": "Partition List",
        "difficulty": 1,
        "prompt": "class Solution:\n    def partition(self, head: Optional[ListNode], x: int) -> Optional[ListNode]:\n        \"\"\"\n        Given the head of a linked list and a value x, partition it such that all nodes less than x come before nodes greater than or equal to x.\n        You should preserve the original relative order of the nodes in each of the two partitions.\n        Example 1:\n        Input: head = [1,4,3,2,5,2], x = 3\n        Output: [1,2,2,4,3,5]\n        Example 2:\n        Input: head = [2,1], x = 2\n        Output: [1,2]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 3,
        "answer": "        dummy_head = ListNode(-1)\n        dummy_head.next = head\n        left = dummy_head\n        right = dummy_head\n        while head:\n            if head.val < x:\n                left.next = head\n                left = head\n            else:\n                right.next = head\n                right = head\n            head = head.next\n        right.next = None\n        left.next = dummy_head.next\n        return dummy_head.next"
    },
    {
        "number": 86,
        "title": "Partition List",
        "difficulty": 1,
        "prompt": "class Solution:\n    def partition(self, head: Optional[ListNode], x: int) -> Optional[ListNode]:\n        \"\"\"\n        Given the head of a linked list and a value x, partition it such that all nodes less than x come before nodes greater than or equal to x.\n        You should preserve the original relative order of the nodes in each of the two partitions.\n        Example 1:\n        Input: head = [1,4,3,2,5,2], x = 3\n        Output: [1,2,2,4,3,5]\n        Example 2:\n        Input: head = [2,1], x = 2\n        Output: [1,2]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 4,
        "answer": "        dummy_less = less = ListNode(0)\n        dummy_greater = greater = ListNode(0)\n        while head:\n            if head.val < x:\n                less.next = head\n                less = less.next\n            else:\n                greater.next = head\n                greater = greater.next\n            head = head.next\n        greater.next = None\n        less.next = dummy_greater.next\n        return dummy_less.next\n    \n    def partition(self, head: Optional[ListNode], x: int) -> Optional[ListNode]:\n        if not head:\n            return None\n        less_dummy = less_head = ListNode(0)\n        greater_dummy = greater_head = ListNode(0)\n        while head:\n            if head.val < x:\n                less_head.next = head\n                less_head = less_head.next\n            else:\n                greater_head.next = head\n                greater_head = greater_head.next\n            head = head.next\n        greater_head.next = None\n        less_head.next = greater_dummy.next\n        return less_dummy.next\n    \n    \n    def partition(self, head: Optional[ListNode], x:"
    },
    {
        "number": 86,
        "title": "Partition List",
        "difficulty": 1,
        "prompt": "class Solution:\n    def partition(self, head: Optional[ListNode], x: int) -> Optional[ListNode]:\n        \"\"\"\n        Given the head of a linked list and a value x, partition it such that all nodes less than x come before nodes greater than or equal to x.\n        You should preserve the original relative order of the nodes in each of the two partitions.\n        Example 1:\n        Input: head = [1,4,3,2,5,2], x = 3\n        Output: [1,2,2,4,3,5]\n        Example 2:\n        Input: head = [2,1], x = 2\n        Output: [1,2]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 5,
        "answer": "        # first find the middle, and reverse the rest\n        def find_middle(head):\n            slow = head\n            fast = head\n            while fast and fast.next:\n                slow = slow.next\n                fast = fast.next.next\n            return slow\n        \n        def reverse_list(head):\n            cur = head\n            prev = None\n            while cur:\n                nxt = cur.next\n                cur.next = prev\n                prev = cur\n                cur = nxt\n            return prev\n        \n        middle = find_middle(head)\n        right = reverse_list(middle.next)\n        middle.next = None\n        \n        left = head\n        right = reverse_list(right)\n        \n        head = left\n        while right:\n            if right.val < x:\n                left.next = right\n                left = left.next\n                right = right.next\n            else:\n                right = right.next\n        \n        left.next = reverse_list(middle)\n        \n        return head\n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        "
    },
    {
        "number": 87,
        "title": "Scramble String",
        "difficulty": 2,
        "prompt": "class Solution:\n    def isScramble(self, s1: str, s2: str) -> bool:\n        \"\"\"\n        We can scramble a string s to get a string t using the following algorithm:\n            If the length of the string is 1, stop.\n            If the length of the string is > 1, do the following:\n                Split the string into two non-empty substrings at a random index, i.e., if the string is s, divide it to x and y where s = x + y.\n                Randomly decide to swap the two substrings or to keep them in the same order. i.e., after this step, s may become s = x + y or s = y + x.\n                Apply step 1 recursively on each of the two substrings x and y.\n        Given two strings s1 and s2 of the same length, return true if s2 is a scrambled string of s1, otherwise, return false.\n        Example 1:\n        Input: s1 = \"great\", s2 = \"rgeat\"\n        Output: true\n        Explanation: One possible scenario applied on s1 is:\n        \"great\" --> \"gr/eat\" // divide at random index.\n        \"gr/eat\" --> \"gr/eat\" // random decision is not to swap the two substrings and keep them in order.\n        \"gr/eat\" --> \"g/r / e/at\" // apply the same algorithm recursively on both substrings. divide at random index each of them.\n        \"g/r / e/at\" --> \"r/g / e/at\" // random decision was to swap the first substring and to keep the second substring in the same order.\n        \"r/g / e/at\" --> \"r/g / e/ a/t\" // again apply the algorithm recursively, divide \"at\" to \"a/t\".\n        \"r/g / e/ a/t\" --> \"r/g / e/ a/t\" // random decision is to keep both substrings in the same order.\n        The algorithm stops now, and the result string is \"rgeat\" which is s2.\n        As one possible scenario led s1 to be scrambled to s2, we return true.\n        Example 2:\n        Input: s1 = \"abcde\", s2 = \"caebd\"\n        Output: false\n        Example 3:\n        Input: s1 = \"a\", s2 = \"a\"\n        Output: true\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        \"\"\"\n        This is basically a directed graph search problem,\n        the graph is a string and the edges are the operations.\n        We are given s1 and s2 and we are supposed to check if s2 is a scrambled of s1 or not.\n        The graph is actually acyclic, so the dfs is enough.\n        \n        The edge weights are computed by the length of the substrings, for example:\n        s1 = \"great\", s2 = \"rgeat\"\n        The edge weight from \"great\" to \"rgeat\" is 4.\n        \n        Note that two strings are scrambled of each other iff they are equal, \n        because two strings of length n can be scrambled to each other iff they are of the same length n.\n        \n        To compute the edge weight, we can use the following steps:\n        1. Get the length of the two strings.\n        2. Pick a random index i in the range of [1, length(s1)], where s1 is the first string and s2 is the second string.\n        3. Get the substrings s1[1:i] and s2[1:i] of the two strings, where i is the random index from step 2.\n        4. Compute the edge weight by taking the sum of the lengths of the substrings from step 3.\n"
    },
    {
        "number": 87,
        "title": "Scramble String",
        "difficulty": 2,
        "prompt": "class Solution:\n    def isScramble(self, s1: str, s2: str) -> bool:\n        \"\"\"\n        We can scramble a string s to get a string t using the following algorithm:\n            If the length of the string is 1, stop.\n            If the length of the string is > 1, do the following:\n                Split the string into two non-empty substrings at a random index, i.e., if the string is s, divide it to x and y where s = x + y.\n                Randomly decide to swap the two substrings or to keep them in the same order. i.e., after this step, s may become s = x + y or s = y + x.\n                Apply step 1 recursively on each of the two substrings x and y.\n        Given two strings s1 and s2 of the same length, return true if s2 is a scrambled string of s1, otherwise, return false.\n        Example 1:\n        Input: s1 = \"great\", s2 = \"rgeat\"\n        Output: true\n        Explanation: One possible scenario applied on s1 is:\n        \"great\" --> \"gr/eat\" // divide at random index.\n        \"gr/eat\" --> \"gr/eat\" // random decision is not to swap the two substrings and keep them in order.\n        \"gr/eat\" --> \"g/r / e/at\" // apply the same algorithm recursively on both substrings. divide at random index each of them.\n        \"g/r / e/at\" --> \"r/g / e/at\" // random decision was to swap the first substring and to keep the second substring in the same order.\n        \"r/g / e/at\" --> \"r/g / e/ a/t\" // again apply the algorithm recursively, divide \"at\" to \"a/t\".\n        \"r/g / e/ a/t\" --> \"r/g / e/ a/t\" // random decision is to keep both substrings in the same order.\n        The algorithm stops now, and the result string is \"rgeat\" which is s2.\n        As one possible scenario led s1 to be scrambled to s2, we return true.\n        Example 2:\n        Input: s1 = \"abcde\", s2 = \"caebd\"\n        Output: false\n        Example 3:\n        Input: s1 = \"a\", s2 = \"a\"\n        Output: true\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        return self.helper(s1, s2, {})"
    },
    {
        "number": 87,
        "title": "Scramble String",
        "difficulty": 2,
        "prompt": "class Solution:\n    def isScramble(self, s1: str, s2: str) -> bool:\n        \"\"\"\n        We can scramble a string s to get a string t using the following algorithm:\n            If the length of the string is 1, stop.\n            If the length of the string is > 1, do the following:\n                Split the string into two non-empty substrings at a random index, i.e., if the string is s, divide it to x and y where s = x + y.\n                Randomly decide to swap the two substrings or to keep them in the same order. i.e., after this step, s may become s = x + y or s = y + x.\n                Apply step 1 recursively on each of the two substrings x and y.\n        Given two strings s1 and s2 of the same length, return true if s2 is a scrambled string of s1, otherwise, return false.\n        Example 1:\n        Input: s1 = \"great\", s2 = \"rgeat\"\n        Output: true\n        Explanation: One possible scenario applied on s1 is:\n        \"great\" --> \"gr/eat\" // divide at random index.\n        \"gr/eat\" --> \"gr/eat\" // random decision is not to swap the two substrings and keep them in order.\n        \"gr/eat\" --> \"g/r / e/at\" // apply the same algorithm recursively on both substrings. divide at random index each of them.\n        \"g/r / e/at\" --> \"r/g / e/at\" // random decision was to swap the first substring and to keep the second substring in the same order.\n        \"r/g / e/at\" --> \"r/g / e/ a/t\" // again apply the algorithm recursively, divide \"at\" to \"a/t\".\n        \"r/g / e/ a/t\" --> \"r/g / e/ a/t\" // random decision is to keep both substrings in the same order.\n        The algorithm stops now, and the result string is \"rgeat\" which is s2.\n        As one possible scenario led s1 to be scrambled to s2, we return true.\n        Example 2:\n        Input: s1 = \"abcde\", s2 = \"caebd\"\n        Output: false\n        Example 3:\n        Input: s1 = \"a\", s2 = \"a\"\n        Output: true\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 3,
        "answer": "        if not s1 or not s2 or len(s1)!= len(s2):\n            return False\n        if len(s1) == 1:\n            return s1 == s2"
    },
    {
        "number": 87,
        "title": "Scramble String",
        "difficulty": 2,
        "prompt": "class Solution:\n    def isScramble(self, s1: str, s2: str) -> bool:\n        \"\"\"\n        We can scramble a string s to get a string t using the following algorithm:\n            If the length of the string is 1, stop.\n            If the length of the string is > 1, do the following:\n                Split the string into two non-empty substrings at a random index, i.e., if the string is s, divide it to x and y where s = x + y.\n                Randomly decide to swap the two substrings or to keep them in the same order. i.e., after this step, s may become s = x + y or s = y + x.\n                Apply step 1 recursively on each of the two substrings x and y.\n        Given two strings s1 and s2 of the same length, return true if s2 is a scrambled string of s1, otherwise, return false.\n        Example 1:\n        Input: s1 = \"great\", s2 = \"rgeat\"\n        Output: true\n        Explanation: One possible scenario applied on s1 is:\n        \"great\" --> \"gr/eat\" // divide at random index.\n        \"gr/eat\" --> \"gr/eat\" // random decision is not to swap the two substrings and keep them in order.\n        \"gr/eat\" --> \"g/r / e/at\" // apply the same algorithm recursively on both substrings. divide at random index each of them.\n        \"g/r / e/at\" --> \"r/g / e/at\" // random decision was to swap the first substring and to keep the second substring in the same order.\n        \"r/g / e/at\" --> \"r/g / e/ a/t\" // again apply the algorithm recursively, divide \"at\" to \"a/t\".\n        \"r/g / e/ a/t\" --> \"r/g / e/ a/t\" // random decision is to keep both substrings in the same order.\n        The algorithm stops now, and the result string is \"rgeat\" which is s2.\n        As one possible scenario led s1 to be scrambled to s2, we return true.\n        Example 2:\n        Input: s1 = \"abcde\", s2 = \"caebd\"\n        Output: false\n        Example 3:\n        Input: s1 = \"a\", s2 = \"a\"\n        Output: true\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 4,
        "answer": "        \"\"\"\n        \u770b\u8d77\u6765\u8fd8\u662f\u6709\u70b9\u96be\u53d7\u3002\u3002\u3002\n        1. \u5982\u679cs1=s2\uff0c\u90a3\u4e48s1\u548cs2\u7684\u5b57\u6bcd\u5fc5\u987b\u76f8\u540c\uff0c\u4e5f\u5c31\u662fs1\u548cs2\u7684\u5143\u7d20\u6570\u91cf\u5fc5\u987b\u76f8\u540c\u3002\n        2. \u6211\u4eec\u77e5\u9053\u5982\u679c\u4e24\u4e2a\u5b57\u7b26\u4e32\u90fd\u662f\u6392\u597d\u5e8f\u7684\uff0c\u90a3\u4e48\u5176\u4e2d\u4e00\u4e2a\u5b57\u7b26\u4e32\u7684\u6240\u6709\u524d\u7f00\u90fd\u662f\u6392\u597d\u5e8f\u7684\u3002\n        3. \u8fd9\u6837\u6211\u4eec\u628as1\u5206\u89e3\u4e3as1=s11\uff0cs1=s11\uff0cs1=s111\uff0cs1=s1111\uff0cs1=s1111\uff0cs1=s11111\uff0cs1=s111111\u3002\u3002\u3002\n        4. \u5bf9\u4e8e\u6240\u6709\u8fd9\u4e9b\u5b50\u4e32\uff0c\u6211\ufffd"
    },
    {
        "number": 87,
        "title": "Scramble String",
        "difficulty": 2,
        "prompt": "class Solution:\n    def isScramble(self, s1: str, s2: str) -> bool:\n        \"\"\"\n        We can scramble a string s to get a string t using the following algorithm:\n            If the length of the string is 1, stop.\n            If the length of the string is > 1, do the following:\n                Split the string into two non-empty substrings at a random index, i.e., if the string is s, divide it to x and y where s = x + y.\n                Randomly decide to swap the two substrings or to keep them in the same order. i.e., after this step, s may become s = x + y or s = y + x.\n                Apply step 1 recursively on each of the two substrings x and y.\n        Given two strings s1 and s2 of the same length, return true if s2 is a scrambled string of s1, otherwise, return false.\n        Example 1:\n        Input: s1 = \"great\", s2 = \"rgeat\"\n        Output: true\n        Explanation: One possible scenario applied on s1 is:\n        \"great\" --> \"gr/eat\" // divide at random index.\n        \"gr/eat\" --> \"gr/eat\" // random decision is not to swap the two substrings and keep them in order.\n        \"gr/eat\" --> \"g/r / e/at\" // apply the same algorithm recursively on both substrings. divide at random index each of them.\n        \"g/r / e/at\" --> \"r/g / e/at\" // random decision was to swap the first substring and to keep the second substring in the same order.\n        \"r/g / e/at\" --> \"r/g / e/ a/t\" // again apply the algorithm recursively, divide \"at\" to \"a/t\".\n        \"r/g / e/ a/t\" --> \"r/g / e/ a/t\" // random decision is to keep both substrings in the same order.\n        The algorithm stops now, and the result string is \"rgeat\" which is s2.\n        As one possible scenario led s1 to be scrambled to s2, we return true.\n        Example 2:\n        Input: s1 = \"abcde\", s2 = \"caebd\"\n        Output: false\n        Example 3:\n        Input: s1 = \"a\", s2 = \"a\"\n        Output: true\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 5,
        "answer": "        if len(s1)!= len(s2) or len(s1) == 0:\n            return False\n        if len(s1) == 1:\n            return s1 == s2\n        for i in range(1, len(s1)):\n            if (self.isScramble(s1[:i], s2[:i]) and self.isScramble(s1[i:], s2[i:])) or \\\n                    (self.isScramble(s1[:i], s2[-i:]) and self.isScramble(s1[i:], s2[:-i])):\n                return True\n        return False"
    },
    {
        "number": 88,
        "title": "Merge Sorted Array",
        "difficulty": 0,
        "prompt": "class Solution:\n    def merge(self, nums1: List[int], m: int, nums2: List[int], n: int) -> None:\n        \"\"\"\n        Do not return anything, modify nums1 in-place instead.\n        You are given two integer arrays nums1 and nums2, sorted in non-decreasing order, and two integers m and n, representing the number of elements in nums1 and nums2 respectively.\n        Merge nums1 and nums2 into a single array sorted in non-decreasing order.\n        The final sorted array should not be returned by the function, but instead be stored inside the array nums1. To accommodate this, nums1 has a length of m + n, where the first m elements denote the elements that should be merged, and the last n elements are set to 0 and should be ignored. nums2 has a length of n.\n        Example 1:\n        Input: nums1 = [1,2,3,0,0,0], m = 3, nums2 = [2,5,6], n = 3\n        Output: [1,2,2,3,5,6]\n        Explanation: The arrays we are merging are [1,2,3] and [2,5,6].\n        The result of the merge is [1,2,2,3,5,6] with the underlined elements coming from nums1.\n        Example 2:\n        Input: nums1 = [1], m = 1, nums2 = [], n = 0\n        Output: [1]\n        Explanation: The arrays we are merging are [1] and [].\n        The result of the merge is [1].\n        Example 3:\n        Input: nums1 = [0], m = 0, nums2 = [1], n = 1\n        Output: [1]\n        Explanation: The arrays we are merging are [] and [1].\n        The result of the merge is [1].\n        Note that because m = 0, there are no elements in nums1. The 0 is only there to ensure the merge result can fit in nums1.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        nums1_idx, nums2_idx = m - 1, n - 1\n        while nums1_idx >= 0 and nums2_idx >= 0:\n            if nums1[nums1_idx] > nums2[nums2_idx]:\n                nums1[nums1_idx + nums2_idx + 1] = nums1[nums1_idx]\n                nums1_idx -= 1\n            else:\n                nums1[nums1_idx + nums2_idx + 1] = nums2[nums2_idx]\n                nums2_idx -= 1\n        if nums2_idx >= 0:\n            nums1[:nums2_idx + 1] = nums2[:nums2_idx + 1]\n        return nums1"
    },
    {
        "number": 88,
        "title": "Merge Sorted Array",
        "difficulty": 0,
        "prompt": "class Solution:\n    def merge(self, nums1: List[int], m: int, nums2: List[int], n: int) -> None:\n        \"\"\"\n        Do not return anything, modify nums1 in-place instead.\n        You are given two integer arrays nums1 and nums2, sorted in non-decreasing order, and two integers m and n, representing the number of elements in nums1 and nums2 respectively.\n        Merge nums1 and nums2 into a single array sorted in non-decreasing order.\n        The final sorted array should not be returned by the function, but instead be stored inside the array nums1. To accommodate this, nums1 has a length of m + n, where the first m elements denote the elements that should be merged, and the last n elements are set to 0 and should be ignored. nums2 has a length of n.\n        Example 1:\n        Input: nums1 = [1,2,3,0,0,0], m = 3, nums2 = [2,5,6], n = 3\n        Output: [1,2,2,3,5,6]\n        Explanation: The arrays we are merging are [1,2,3] and [2,5,6].\n        The result of the merge is [1,2,2,3,5,6] with the underlined elements coming from nums1.\n        Example 2:\n        Input: nums1 = [1], m = 1, nums2 = [], n = 0\n        Output: [1]\n        Explanation: The arrays we are merging are [1] and [].\n        The result of the merge is [1].\n        Example 3:\n        Input: nums1 = [0], m = 0, nums2 = [1], n = 1\n        Output: [1]\n        Explanation: The arrays we are merging are [] and [1].\n        The result of the merge is [1].\n        Note that because m = 0, there are no elements in nums1. The 0 is only there to ensure the merge result can fit in nums1.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        # \u5148\u628anums1\u7684\u524d\u9762m\u500b\u5143\u7d20\u79fb\u5230nums2\u7684\u524d\u9762\n        # \u8a18\u5f97\u5982\u679cm\u70ba0\uff0c\u4e5f\u8981\u628anums2\u7684\u5269\u9918\u5143\u7d20\u653e\u5230nums1\u7684\u524d\u9762\n        i, j = m - 1, n - 1\n        while i >= 0 and j >= 0:\n            if nums1[i] > nums2[j]:\n                nums1[i + j + 1] = nums1[i]\n                i -= 1\n            else:\n                nums1[i + j + 1] = nums2[j]\n                j -= 1\n        nums1[:j + 1] = nums2[:j + 1]"
    },
    {
        "number": 88,
        "title": "Merge Sorted Array",
        "difficulty": 0,
        "prompt": "class Solution:\n    def merge(self, nums1: List[int], m: int, nums2: List[int], n: int) -> None:\n        \"\"\"\n        Do not return anything, modify nums1 in-place instead.\n        You are given two integer arrays nums1 and nums2, sorted in non-decreasing order, and two integers m and n, representing the number of elements in nums1 and nums2 respectively.\n        Merge nums1 and nums2 into a single array sorted in non-decreasing order.\n        The final sorted array should not be returned by the function, but instead be stored inside the array nums1. To accommodate this, nums1 has a length of m + n, where the first m elements denote the elements that should be merged, and the last n elements are set to 0 and should be ignored. nums2 has a length of n.\n        Example 1:\n        Input: nums1 = [1,2,3,0,0,0], m = 3, nums2 = [2,5,6], n = 3\n        Output: [1,2,2,3,5,6]\n        Explanation: The arrays we are merging are [1,2,3] and [2,5,6].\n        The result of the merge is [1,2,2,3,5,6] with the underlined elements coming from nums1.\n        Example 2:\n        Input: nums1 = [1], m = 1, nums2 = [], n = 0\n        Output: [1]\n        Explanation: The arrays we are merging are [1] and [].\n        The result of the merge is [1].\n        Example 3:\n        Input: nums1 = [0], m = 0, nums2 = [1], n = 1\n        Output: [1]\n        Explanation: The arrays we are merging are [] and [1].\n        The result of the merge is [1].\n        Note that because m = 0, there are no elements in nums1. The 0 is only there to ensure the merge result can fit in nums1.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 3,
        "answer": "        i, j = 0, 0\n        while i < m and j < n:\n            if nums1[i] < nums2[j]:\n                i += 1\n            else:\n                for k in range(m-1, i, -1):\n                    nums1[k+j] = nums1[k]\n                nums1[i+j] = nums2[j]\n                j += 1\n                m += 1\n        for k in range(j, n):\n            nums1[k+m] = nums2[k]\n        print(nums1)"
    },
    {
        "number": 88,
        "title": "Merge Sorted Array",
        "difficulty": 0,
        "prompt": "class Solution:\n    def merge(self, nums1: List[int], m: int, nums2: List[int], n: int) -> None:\n        \"\"\"\n        Do not return anything, modify nums1 in-place instead.\n        You are given two integer arrays nums1 and nums2, sorted in non-decreasing order, and two integers m and n, representing the number of elements in nums1 and nums2 respectively.\n        Merge nums1 and nums2 into a single array sorted in non-decreasing order.\n        The final sorted array should not be returned by the function, but instead be stored inside the array nums1. To accommodate this, nums1 has a length of m + n, where the first m elements denote the elements that should be merged, and the last n elements are set to 0 and should be ignored. nums2 has a length of n.\n        Example 1:\n        Input: nums1 = [1,2,3,0,0,0], m = 3, nums2 = [2,5,6], n = 3\n        Output: [1,2,2,3,5,6]\n        Explanation: The arrays we are merging are [1,2,3] and [2,5,6].\n        The result of the merge is [1,2,2,3,5,6] with the underlined elements coming from nums1.\n        Example 2:\n        Input: nums1 = [1], m = 1, nums2 = [], n = 0\n        Output: [1]\n        Explanation: The arrays we are merging are [1] and [].\n        The result of the merge is [1].\n        Example 3:\n        Input: nums1 = [0], m = 0, nums2 = [1], n = 1\n        Output: [1]\n        Explanation: The arrays we are merging are [] and [1].\n        The result of the merge is [1].\n        Note that because m = 0, there are no elements in nums1. The 0 is only there to ensure the merge result can fit in nums1.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 4,
        "answer": "        # init pointers\n        p1 = m - 1\n        p2 = n - 1\n        # init pointer for nums1\n        p = m + n - 1"
    },
    {
        "number": 88,
        "title": "Merge Sorted Array",
        "difficulty": 0,
        "prompt": "class Solution:\n    def merge(self, nums1: List[int], m: int, nums2: List[int], n: int) -> None:\n        \"\"\"\n        Do not return anything, modify nums1 in-place instead.\n        You are given two integer arrays nums1 and nums2, sorted in non-decreasing order, and two integers m and n, representing the number of elements in nums1 and nums2 respectively.\n        Merge nums1 and nums2 into a single array sorted in non-decreasing order.\n        The final sorted array should not be returned by the function, but instead be stored inside the array nums1. To accommodate this, nums1 has a length of m + n, where the first m elements denote the elements that should be merged, and the last n elements are set to 0 and should be ignored. nums2 has a length of n.\n        Example 1:\n        Input: nums1 = [1,2,3,0,0,0], m = 3, nums2 = [2,5,6], n = 3\n        Output: [1,2,2,3,5,6]\n        Explanation: The arrays we are merging are [1,2,3] and [2,5,6].\n        The result of the merge is [1,2,2,3,5,6] with the underlined elements coming from nums1.\n        Example 2:\n        Input: nums1 = [1], m = 1, nums2 = [], n = 0\n        Output: [1]\n        Explanation: The arrays we are merging are [1] and [].\n        The result of the merge is [1].\n        Example 3:\n        Input: nums1 = [0], m = 0, nums2 = [1], n = 1\n        Output: [1]\n        Explanation: The arrays we are merging are [] and [1].\n        The result of the merge is [1].\n        Note that because m = 0, there are no elements in nums1. The 0 is only there to ensure the merge result can fit in nums1.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 5,
        "answer": "        if not nums2:\n            return\n        nums1[m:] = nums2\n        nums1.sort()\n<|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>"
    },
    {
        "number": 89,
        "title": "Gray Code",
        "difficulty": 1,
        "prompt": "class Solution:\n    def grayCode(self, n: int) -> List[int]:\n        \"\"\"\n        An n-bit gray code sequence is a sequence of 2n integers where:\n            Every integer is in the inclusive range [0, 2n - 1],\n            The first integer is 0,\n            An integer appears no more than once in the sequence,\n            The binary representation of every pair of adjacent integers differs by exactly one bit, and\n            The binary representation of the first and last integers differs by exactly one bit.\n        Given an integer n, return any valid n-bit gray code sequence.\n        Example 1:\n        Input: n = 2\n        Output: [0,1,3,2]\n        Explanation:\n        The binary representation of [0,1,3,2] is [00,01,11,10].\n        - 00 and 01 differ by one bit\n        - 01 and 11 differ by one bit\n        - 11 and 10 differ by one bit\n        - 10 and 00 differ by one bit\n        [0,2,3,1] is also a valid gray code sequence, whose binary representation is [00,10,11,01].\n        - 00 and 10 differ by one bit\n        - 10 and 11 differ by one bit\n        - 11 and 01 differ by one bit\n        - 01 and 00 differ by one bit\n        Example 2:\n        Input: n = 1\n        Output: [0,1]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        # O(2 ** n) time, O(2 ** n) space\n        # \u7528\u4e24\u4e2aarray\uff0c\u7b2c\u4e00\u4e2a\u6570\u7ec4\u5b58\u7740\u6bcf\u4e2a\u8282\u70b9\uff0c\u7b2c\u4e8c\u4e2a\u6570\u7ec4\u5c31\u5b58\u7740\u4e0e\u7b2c\u4e00\u4e2a\u6570\u7ec4\u6709\u5dee\u522b\u7684\u8282\u70b9\n        # \u5f53\u524d\u505a\u6cd5\u4f1a\u8d85\u65f6\n        def dfs(curr, visited, ret, n):\n            if len(curr) == n:\n                ret.append(int(''.join(curr), 2))\n                return\n            for i in range(2):\n                if visited[i] == 0:\n                    curr.append('1' if i == 1 else '0')\n                    visited[i] = 1\n                    dfs(curr, visited, ret, n)\n                    visited[i] = 0\n                    curr.pop()"
    },
    {
        "number": 89,
        "title": "Gray Code",
        "difficulty": 1,
        "prompt": "class Solution:\n    def grayCode(self, n: int) -> List[int]:\n        \"\"\"\n        An n-bit gray code sequence is a sequence of 2n integers where:\n            Every integer is in the inclusive range [0, 2n - 1],\n            The first integer is 0,\n            An integer appears no more than once in the sequence,\n            The binary representation of every pair of adjacent integers differs by exactly one bit, and\n            The binary representation of the first and last integers differs by exactly one bit.\n        Given an integer n, return any valid n-bit gray code sequence.\n        Example 1:\n        Input: n = 2\n        Output: [0,1,3,2]\n        Explanation:\n        The binary representation of [0,1,3,2] is [00,01,11,10].\n        - 00 and 01 differ by one bit\n        - 01 and 11 differ by one bit\n        - 11 and 10 differ by one bit\n        - 10 and 00 differ by one bit\n        [0,2,3,1] is also a valid gray code sequence, whose binary representation is [00,10,11,01].\n        - 00 and 10 differ by one bit\n        - 10 and 11 differ by one bit\n        - 11 and 01 differ by one bit\n        - 01 and 00 differ by one bit\n        Example 2:\n        Input: n = 1\n        Output: [0,1]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        # How many bits?\n        k = n.bit_length()"
    },
    {
        "number": 89,
        "title": "Gray Code",
        "difficulty": 1,
        "prompt": "class Solution:\n    def grayCode(self, n: int) -> List[int]:\n        \"\"\"\n        An n-bit gray code sequence is a sequence of 2n integers where:\n            Every integer is in the inclusive range [0, 2n - 1],\n            The first integer is 0,\n            An integer appears no more than once in the sequence,\n            The binary representation of every pair of adjacent integers differs by exactly one bit, and\n            The binary representation of the first and last integers differs by exactly one bit.\n        Given an integer n, return any valid n-bit gray code sequence.\n        Example 1:\n        Input: n = 2\n        Output: [0,1,3,2]\n        Explanation:\n        The binary representation of [0,1,3,2] is [00,01,11,10].\n        - 00 and 01 differ by one bit\n        - 01 and 11 differ by one bit\n        - 11 and 10 differ by one bit\n        - 10 and 00 differ by one bit\n        [0,2,3,1] is also a valid gray code sequence, whose binary representation is [00,10,11,01].\n        - 00 and 10 differ by one bit\n        - 10 and 11 differ by one bit\n        - 11 and 01 differ by one bit\n        - 01 and 00 differ by one bit\n        Example 2:\n        Input: n = 1\n        Output: [0,1]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 3,
        "answer": "        ret = [0]\n        for i in range(n):\n            ret += [j ^ (1 << i) for j in ret[::-1]]\n        return ret\n<|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>"
    },
    {
        "number": 89,
        "title": "Gray Code",
        "difficulty": 1,
        "prompt": "class Solution:\n    def grayCode(self, n: int) -> List[int]:\n        \"\"\"\n        An n-bit gray code sequence is a sequence of 2n integers where:\n            Every integer is in the inclusive range [0, 2n - 1],\n            The first integer is 0,\n            An integer appears no more than once in the sequence,\n            The binary representation of every pair of adjacent integers differs by exactly one bit, and\n            The binary representation of the first and last integers differs by exactly one bit.\n        Given an integer n, return any valid n-bit gray code sequence.\n        Example 1:\n        Input: n = 2\n        Output: [0,1,3,2]\n        Explanation:\n        The binary representation of [0,1,3,2] is [00,01,11,10].\n        - 00 and 01 differ by one bit\n        - 01 and 11 differ by one bit\n        - 11 and 10 differ by one bit\n        - 10 and 00 differ by one bit\n        [0,2,3,1] is also a valid gray code sequence, whose binary representation is [00,10,11,01].\n        - 00 and 10 differ by one bit\n        - 10 and 11 differ by one bit\n        - 11 and 01 differ by one bit\n        - 01 and 00 differ by one bit\n        Example 2:\n        Input: n = 1\n        Output: [0,1]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 4,
        "answer": "        if n == 0:\n            return [0]\n        elif n == 1:\n            return [0, 1]\n        else:\n            gray_code_list = self.gray_code(n - 1)\n            previous_gray_code_list = self.reverse_gray_code(n - 1)\n            for i in range(0, len(previous_gray_code_list)):\n                gray_code_list.append(previous_gray_code_list[i] + 2 ** (n - 1))\n            return gray_code_list"
    },
    {
        "number": 89,
        "title": "Gray Code",
        "difficulty": 1,
        "prompt": "class Solution:\n    def grayCode(self, n: int) -> List[int]:\n        \"\"\"\n        An n-bit gray code sequence is a sequence of 2n integers where:\n            Every integer is in the inclusive range [0, 2n - 1],\n            The first integer is 0,\n            An integer appears no more than once in the sequence,\n            The binary representation of every pair of adjacent integers differs by exactly one bit, and\n            The binary representation of the first and last integers differs by exactly one bit.\n        Given an integer n, return any valid n-bit gray code sequence.\n        Example 1:\n        Input: n = 2\n        Output: [0,1,3,2]\n        Explanation:\n        The binary representation of [0,1,3,2] is [00,01,11,10].\n        - 00 and 01 differ by one bit\n        - 01 and 11 differ by one bit\n        - 11 and 10 differ by one bit\n        - 10 and 00 differ by one bit\n        [0,2,3,1] is also a valid gray code sequence, whose binary representation is [00,10,11,01].\n        - 00 and 10 differ by one bit\n        - 10 and 11 differ by one bit\n        - 11 and 01 differ by one bit\n        - 01 and 00 differ by one bit\n        Example 2:\n        Input: n = 1\n        Output: [0,1]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 5,
        "answer": "        res = [0]\n        for i in range(1, 2 ** n):\n            res.append(res[-1] ^ (i & -i))\n        return res"
    },
    {
        "number": 90,
        "title": "Subsets II",
        "difficulty": 1,
        "prompt": "class Solution:\n    def subsetsWithDup(self, nums: List[int]) -> List[List[int]]:\n        \"\"\"\n        Given an integer array nums that may contain duplicates, return all possible subsets (the power set).\n        The solution set must not contain duplicate subsets. Return the solution in any order.\n        Example 1:\n        Input: nums = [1,2,2]\n        Output: [[],[1],[1,2],[1,2,2],[2],[2,2]]\n        Example 2:\n        Input: nums = [0]\n        Output: [[],[0]]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        if len(nums) == 0: return [[]]\n        nums.sort()\n        output = [[]]\n        output_set = set()\n        for i in range(len(nums)):\n            output_len = len(output)\n            for j in range(output_len):\n                output_set.add(tuple(output[j]))\n            for j in range(output_len):\n                if i!= 0 and nums[i] == nums[i - 1] and tuple(output[j]) not in output_set:\n                    output.append(output[j] + [nums[i]])\n                else:\n                    output.append(output[j] + [nums[i]])\n        return output\n<|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>"
    },
    {
        "number": 90,
        "title": "Subsets II",
        "difficulty": 1,
        "prompt": "class Solution:\n    def subsetsWithDup(self, nums: List[int]) -> List[List[int]]:\n        \"\"\"\n        Given an integer array nums that may contain duplicates, return all possible subsets (the power set).\n        The solution set must not contain duplicate subsets. Return the solution in any order.\n        Example 1:\n        Input: nums = [1,2,2]\n        Output: [[],[1],[1,2],[1,2,2],[2],[2,2]]\n        Example 2:\n        Input: nums = [0]\n        Output: [[],[0]]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        nums.sort()\n        self.res = []\n        self.helper([], nums, 0)\n        return self.res"
    },
    {
        "number": 90,
        "title": "Subsets II",
        "difficulty": 1,
        "prompt": "class Solution:\n    def subsetsWithDup(self, nums: List[int]) -> List[List[int]]:\n        \"\"\"\n        Given an integer array nums that may contain duplicates, return all possible subsets (the power set).\n        The solution set must not contain duplicate subsets. Return the solution in any order.\n        Example 1:\n        Input: nums = [1,2,2]\n        Output: [[],[1],[1,2],[1,2,2],[2],[2,2]]\n        Example 2:\n        Input: nums = [0]\n        Output: [[],[0]]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 3,
        "answer": "        nums.sort()\n        self.res = [[]]\n        self.helper(nums, 0)\n        return self.res"
    },
    {
        "number": 90,
        "title": "Subsets II",
        "difficulty": 1,
        "prompt": "class Solution:\n    def subsetsWithDup(self, nums: List[int]) -> List[List[int]]:\n        \"\"\"\n        Given an integer array nums that may contain duplicates, return all possible subsets (the power set).\n        The solution set must not contain duplicate subsets. Return the solution in any order.\n        Example 1:\n        Input: nums = [1,2,2]\n        Output: [[],[1],[1,2],[1,2,2],[2],[2,2]]\n        Example 2:\n        Input: nums = [0]\n        Output: [[],[0]]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 4,
        "answer": "        nums.sort()\n        self.res = []"
    },
    {
        "number": 90,
        "title": "Subsets II",
        "difficulty": 1,
        "prompt": "class Solution:\n    def subsetsWithDup(self, nums: List[int]) -> List[List[int]]:\n        \"\"\"\n        Given an integer array nums that may contain duplicates, return all possible subsets (the power set).\n        The solution set must not contain duplicate subsets. Return the solution in any order.\n        Example 1:\n        Input: nums = [1,2,2]\n        Output: [[],[1],[1,2],[1,2,2],[2],[2,2]]\n        Example 2:\n        Input: nums = [0]\n        Output: [[],[0]]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 5,
        "answer": "        if not nums:\n            return [[]]\n        nums.sort()\n        result = []"
    },
    {
        "number": 91,
        "title": "Decode Ways",
        "difficulty": 1,
        "prompt": "class Solution:\n    def numDecodings(self, s: str) -> int:\n        \"\"\"\n        A message containing letters from A-Z can be encoded into numbers using the following mapping:\n        'A' -> \"1\"\n        'B' -> \"2\"\n       ...\n        'Z' -> \"26\"\n        To decode an encoded message, all the digits must be grouped then mapped back into letters using the reverse of the mapping above (there may be multiple ways). For example, \"11106\" can be mapped into:\n            \"AAJF\" with the grouping (1 1 10 6)\n            \"KJF\" with the grouping (11 10 6)\n        Note that the grouping (1 11 06) is invalid because \"06\" cannot be mapped into 'F' since \"6\" is different from \"06\".\n        Given a string s containing only digits, return the number of ways to decode it.\n        The test cases are generated so that the answer fits in a 32-bit integer.\n        Example 1:\n        Input: s = \"12\"\n        Output: 2\n        Explanation: \"12\" could be decoded as \"AB\" (1 2) or \"L\" (12).\n        Example 2:\n        Input: s = \"226\"\n        Output: 3\n        Explanation: \"226\" could be decoded as \"BZ\" (2 26), \"VF\" (22 6), or \"BBF\" (2 2 6).\n        Example 3:\n        Input: s = \"06\"\n        Output: 0\n        Explanation: \"06\" cannot be mapped to \"F\" because of the leading zero (\"6\" is different from \"06\").\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        # The function is the inverse of the problem that is asking how many ways you can create a string containing all the letters from 1 to N. So the problem we want to solve is the opposite.\n        # Solution is inspired by https://leetcode.com/problems/decode-ways/discuss/8455/A-DP-solution-using-2-D-table"
    },
    {
        "number": 91,
        "title": "Decode Ways",
        "difficulty": 1,
        "prompt": "class Solution:\n    def numDecodings(self, s: str) -> int:\n        \"\"\"\n        A message containing letters from A-Z can be encoded into numbers using the following mapping:\n        'A' -> \"1\"\n        'B' -> \"2\"\n       ...\n        'Z' -> \"26\"\n        To decode an encoded message, all the digits must be grouped then mapped back into letters using the reverse of the mapping above (there may be multiple ways). For example, \"11106\" can be mapped into:\n            \"AAJF\" with the grouping (1 1 10 6)\n            \"KJF\" with the grouping (11 10 6)\n        Note that the grouping (1 11 06) is invalid because \"06\" cannot be mapped into 'F' since \"6\" is different from \"06\".\n        Given a string s containing only digits, return the number of ways to decode it.\n        The test cases are generated so that the answer fits in a 32-bit integer.\n        Example 1:\n        Input: s = \"12\"\n        Output: 2\n        Explanation: \"12\" could be decoded as \"AB\" (1 2) or \"L\" (12).\n        Example 2:\n        Input: s = \"226\"\n        Output: 3\n        Explanation: \"226\" could be decoded as \"BZ\" (2 26), \"VF\" (22 6), or \"BBF\" (2 2 6).\n        Example 3:\n        Input: s = \"06\"\n        Output: 0\n        Explanation: \"06\" cannot be mapped to \"F\" because of the leading zero (\"6\" is different from \"06\").\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        if s == \"\":\n            return 0\n        n = len(s)\n        if n == 1:\n            return 1 if s == \"0\" else 0\n        if s[0] == \"0\":\n            return 0\n        dp = [0 for _ in range(n)]\n        dp[0] = 1\n        dp[1] = 0 if s[1] == \"0\" else 1\n        for i in range(2, n):\n            if 10 <= int(s[i - 2 : i + 1]) <= 26:\n                dp[i] = dp[i - 1] + dp[i - 2]\n            else:\n                dp[i] = dp[i - 1]\n        return dp[-1]"
    },
    {
        "number": 91,
        "title": "Decode Ways",
        "difficulty": 1,
        "prompt": "class Solution:\n    def numDecodings(self, s: str) -> int:\n        \"\"\"\n        A message containing letters from A-Z can be encoded into numbers using the following mapping:\n        'A' -> \"1\"\n        'B' -> \"2\"\n       ...\n        'Z' -> \"26\"\n        To decode an encoded message, all the digits must be grouped then mapped back into letters using the reverse of the mapping above (there may be multiple ways). For example, \"11106\" can be mapped into:\n            \"AAJF\" with the grouping (1 1 10 6)\n            \"KJF\" with the grouping (11 10 6)\n        Note that the grouping (1 11 06) is invalid because \"06\" cannot be mapped into 'F' since \"6\" is different from \"06\".\n        Given a string s containing only digits, return the number of ways to decode it.\n        The test cases are generated so that the answer fits in a 32-bit integer.\n        Example 1:\n        Input: s = \"12\"\n        Output: 2\n        Explanation: \"12\" could be decoded as \"AB\" (1 2) or \"L\" (12).\n        Example 2:\n        Input: s = \"226\"\n        Output: 3\n        Explanation: \"226\" could be decoded as \"BZ\" (2 26), \"VF\" (22 6), or \"BBF\" (2 2 6).\n        Example 3:\n        Input: s = \"06\"\n        Output: 0\n        Explanation: \"06\" cannot be mapped to \"F\" because of the leading zero (\"6\" is different from \"06\").\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 3,
        "answer": "        ## RC ##\n        ## APPROACH : DP ##\n        ## LOGIC ##\n        ## 1. Lets consider our problem with the help of example:\n        ##    \"12\"\n        ##    \"226\"\n        ##    \"06\"\n        ## 2. We can note that the answer for 2nd example is 3 as we can see that we can decode the entire string as \"BZ\" or \"VF\" or \"BBF\".\n        ## 3. Also, for the 1st example we can see that the answer is 2 as we can decode the first 2 digits as AB.\n        ## 4. Now, lets move on to the base case/solution.\n        ##    \"1\"\n        ##    \"2\"\n        ##    \"3\"\n        ##    \"6\"\n        ## 5. So, in the base case, we can see that the answer to \"1\" is 1 as we know that we can decode that to be 1 only.\n        ## 6. Also, in the base case, we can see that the answer to \"2\" is 1 as we know that we can decode that to be 1 only.\n        ## 7. Also, in the base case, we can see that the answer to \"3\" is 1 as we know that we can decode that to be 1 only.\n        ## 8. So, our base case will be:\n"
    },
    {
        "number": 91,
        "title": "Decode Ways",
        "difficulty": 1,
        "prompt": "class Solution:\n    def numDecodings(self, s: str) -> int:\n        \"\"\"\n        A message containing letters from A-Z can be encoded into numbers using the following mapping:\n        'A' -> \"1\"\n        'B' -> \"2\"\n       ...\n        'Z' -> \"26\"\n        To decode an encoded message, all the digits must be grouped then mapped back into letters using the reverse of the mapping above (there may be multiple ways). For example, \"11106\" can be mapped into:\n            \"AAJF\" with the grouping (1 1 10 6)\n            \"KJF\" with the grouping (11 10 6)\n        Note that the grouping (1 11 06) is invalid because \"06\" cannot be mapped into 'F' since \"6\" is different from \"06\".\n        Given a string s containing only digits, return the number of ways to decode it.\n        The test cases are generated so that the answer fits in a 32-bit integer.\n        Example 1:\n        Input: s = \"12\"\n        Output: 2\n        Explanation: \"12\" could be decoded as \"AB\" (1 2) or \"L\" (12).\n        Example 2:\n        Input: s = \"226\"\n        Output: 3\n        Explanation: \"226\" could be decoded as \"BZ\" (2 26), \"VF\" (22 6), or \"BBF\" (2 2 6).\n        Example 3:\n        Input: s = \"06\"\n        Output: 0\n        Explanation: \"06\" cannot be mapped to \"F\" because of the leading zero (\"6\" is different from \"06\").\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 4,
        "answer": "        memo = {}\n        def dfs(s):\n            if s in memo:\n                return memo[s]\n            if s == '':\n                return 1\n            if s[0] == '0':\n                return 0\n            res = dfs(s[1:])\n            if s[:2] < '27':\n                res += dfs(s[2:])\n            memo[s] = res\n            return res"
    },
    {
        "number": 91,
        "title": "Decode Ways",
        "difficulty": 1,
        "prompt": "class Solution:\n    def numDecodings(self, s: str) -> int:\n        \"\"\"\n        A message containing letters from A-Z can be encoded into numbers using the following mapping:\n        'A' -> \"1\"\n        'B' -> \"2\"\n       ...\n        'Z' -> \"26\"\n        To decode an encoded message, all the digits must be grouped then mapped back into letters using the reverse of the mapping above (there may be multiple ways). For example, \"11106\" can be mapped into:\n            \"AAJF\" with the grouping (1 1 10 6)\n            \"KJF\" with the grouping (11 10 6)\n        Note that the grouping (1 11 06) is invalid because \"06\" cannot be mapped into 'F' since \"6\" is different from \"06\".\n        Given a string s containing only digits, return the number of ways to decode it.\n        The test cases are generated so that the answer fits in a 32-bit integer.\n        Example 1:\n        Input: s = \"12\"\n        Output: 2\n        Explanation: \"12\" could be decoded as \"AB\" (1 2) or \"L\" (12).\n        Example 2:\n        Input: s = \"226\"\n        Output: 3\n        Explanation: \"226\" could be decoded as \"BZ\" (2 26), \"VF\" (22 6), or \"BBF\" (2 2 6).\n        Example 3:\n        Input: s = \"06\"\n        Output: 0\n        Explanation: \"06\" cannot be mapped to \"F\" because of the leading zero (\"6\" is different from \"06\").\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 5,
        "answer": "        # dp[i]: s[:i] can be decoded into number of ways\n        # dp[i] = dp[i - 1] if s[i - 1]!= \"0\"\n        # dp[i] = dp[i - 2] if \"09\" < s[i - 2 : i] < \"27\"\n        # otherwise dp[i] = 0\n        # dp[0] = 1"
    },
    {
        "number": 92,
        "title": "Reverse Linked List II",
        "difficulty": 1,
        "prompt": "class Solution:\n    def reverseBetween(self, head: Optional[ListNode], left: int, right: int) -> Optional[ListNode]:\n        \"\"\"\n        Given the head of a singly linked list and two integers left and right where left <= right, reverse the nodes of the list from position left to position right, and return the reversed list.\n        Example 1:\n        Input: head = [1,2,3,4,5], left = 2, right = 4\n        Output: [1,4,3,2,5]\n        Example 2:\n        Input: head = [5], left = 1, right = 1\n        Output: [5]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        if not head: return head\n        left_pre, right_pre = None, None\n        cur = head\n        for i in range(left-1):\n            left_pre = cur\n            cur = cur.next\n        right_pre = cur\n        for i in range(right-left+1):\n            tmp = cur.next\n            cur.next = left_pre\n            left_pre = cur\n            cur = tmp\n        if left_pre: left_pre.next = right_pre\n        if right_pre: right_pre.next = cur\n        return left_pre if left_pre else head\n<|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>"
    },
    {
        "number": 92,
        "title": "Reverse Linked List II",
        "difficulty": 1,
        "prompt": "class Solution:\n    def reverseBetween(self, head: Optional[ListNode], left: int, right: int) -> Optional[ListNode]:\n        \"\"\"\n        Given the head of a singly linked list and two integers left and right where left <= right, reverse the nodes of the list from position left to position right, and return the reversed list.\n        Example 1:\n        Input: head = [1,2,3,4,5], left = 2, right = 4\n        Output: [1,4,3,2,5]\n        Example 2:\n        Input: head = [5], left = 1, right = 1\n        Output: [5]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        if not head or left == right:\n            return head\n        \n        # Need to do a reverse (greedy approach) \n        # where we reverse the nodes between two indices (left and right)\n        prev = None\n        curr = head\n        \n        for _ in range(left - 1):\n            prev = curr\n            curr = curr.next\n            \n        # store the head of the reversed sublist\n        head_reverse_sublist = prev\n        \n        for _ in range(right - left):\n            next_node = curr.next\n            curr.next = prev\n            prev = curr\n            curr = next_node\n        \n        # if there was only one node or we did not reverse it\n        # we are done\n        if head_reverse_sublist:\n            head_reverse_sublist.next = prev\n        else:\n            head = prev\n            \n        # Need to merge the lists \n        # where the head of the reversed list is the prev \n        # and the head of the rest of the original list is curr\n        # starting from the node after the reversed sublist\n        # until the end of the list\n        curr = head_reverse_sublist\n        while curr and curr.next:\n            temp = curr.next\n            "
    },
    {
        "number": 92,
        "title": "Reverse Linked List II",
        "difficulty": 1,
        "prompt": "class Solution:\n    def reverseBetween(self, head: Optional[ListNode], left: int, right: int) -> Optional[ListNode]:\n        \"\"\"\n        Given the head of a singly linked list and two integers left and right where left <= right, reverse the nodes of the list from position left to position right, and return the reversed list.\n        Example 1:\n        Input: head = [1,2,3,4,5], left = 2, right = 4\n        Output: [1,4,3,2,5]\n        Example 2:\n        Input: head = [5], left = 1, right = 1\n        Output: [5]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 3,
        "answer": "        \n        # Solution 1: Time complexity O(N)\n        \"\"\"\n        temp = []\n        ptr = head\n        \n        while ptr:\n            temp.append(ptr.val)\n            ptr = ptr.next\n            \n        left_to_right = temp[:left-1]\n        right_to_left = temp[right:]\n        temp = right_to_left[::-1]\n        temp = left_to_right + temp\n        \n        ans = head\n        while ans:\n            ans.val = temp.pop(0)\n            ans = ans.next\n        \"\"\"\n        \n        # Solution 2: Time complexity O(N)\n        \"\"\"\n        def reverseList(head):\n            if not head or not head.next:\n                return head\n            prev, curr, nxt = None, head, head\n            while nxt:\n                nxt = nxt.next\n                curr.next = prev\n                prev = curr\n                curr = nxt\n            return prev\n            \n        ans = head\n        for _ in range(left - 1):\n            ans = ans.next\n        for _ in range(right - left):\n            temp = ans.next\n            ans.next = reverseList(ans.next)\n            ans = temp\n        return head\n        "
    },
    {
        "number": 92,
        "title": "Reverse Linked List II",
        "difficulty": 1,
        "prompt": "class Solution:\n    def reverseBetween(self, head: Optional[ListNode], left: int, right: int) -> Optional[ListNode]:\n        \"\"\"\n        Given the head of a singly linked list and two integers left and right where left <= right, reverse the nodes of the list from position left to position right, and return the reversed list.\n        Example 1:\n        Input: head = [1,2,3,4,5], left = 2, right = 4\n        Output: [1,4,3,2,5]\n        Example 2:\n        Input: head = [5], left = 1, right = 1\n        Output: [5]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 4,
        "answer": "        \n        # two pass solution:\n        # 1. find the new head\n        # 2. reverse the remaining linked list\n        # O(N) time\n        # O(1) space\n        # for 1: only 1 for loop\n        # for 2: for each iteration, we do 1+N operations\n        # in total, 1+2N\n        \n        if not head: return None\n        \n        head_ptr = head\n        # first pass: find new head\n        prev = None\n        # look for the node before the starting point\n        # i.e. the node to be reversed\n        for _ in range(left-1):\n            prev = head_ptr\n            head_ptr = head_ptr.next\n        new_head = head_ptr\n        \n        # second pass: reverse\n        cur = head_ptr.next\n        prev_rev = None\n        for _ in range(right-left+1):\n            head_ptr.next = prev_rev\n            prev_rev = head_ptr\n            head_ptr = cur\n            cur = cur.next\n            \n        if prev: prev.next = prev_rev\n        else: head.next = prev_rev\n        return new_head\n    \n    \n    def reverseBetween1(self, head: Optional[ListNode], left: int,"
    },
    {
        "number": 92,
        "title": "Reverse Linked List II",
        "difficulty": 1,
        "prompt": "class Solution:\n    def reverseBetween(self, head: Optional[ListNode], left: int, right: int) -> Optional[ListNode]:\n        \"\"\"\n        Given the head of a singly linked list and two integers left and right where left <= right, reverse the nodes of the list from position left to position right, and return the reversed list.\n        Example 1:\n        Input: head = [1,2,3,4,5], left = 2, right = 4\n        Output: [1,4,3,2,5]\n        Example 2:\n        Input: head = [5], left = 1, right = 1\n        Output: [5]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 5,
        "answer": "        if not head or left == right:\n            return head\n        left_node = None\n        right_node = None\n        prev_node = None\n        current_node = head\n        i = 0\n        while current_node:\n            if i == left - 1:\n                left_node = current_node\n            if i == right:\n                right_node = current_node\n            prev_node = current_node\n            current_node = current_node.next\n            i += 1\n        left_node.val, right_node.val = right_node.val, left_node.val\n        if left!= 1:\n            prev_node.next = right_node\n        else:\n            return right_node\n        return head"
    },
    {
        "number": 93,
        "title": "Restore IP Addresses",
        "difficulty": 1,
        "prompt": "class Solution:\n    def restoreIpAddresses(self, s: str) -> List[str]:\n        \"\"\"\n        A valid IP address consists of exactly four integers separated by single dots. Each integer is between 0 and 255 (inclusive) and cannot have leading zeros.\n            For example, \"0.1.2.201\" and \"192.168.1.1\" are valid IP addresses, but \"0.011.255.245\", \"192.168.1.312\" and \"192.168@1.1\" are invalid IP addresses.\n        Given a string s containing only digits, return all possible valid IP addresses that can be formed by inserting dots into s. You are not allowed to reorder or remove any digits in s. You may return the valid IP addresses in any order.\n        Example 1:\n        Input: s = \"25525511135\"\n        Output: [\"255.255.11.135\",\"255.255.111.35\"]\n        Example 2:\n        Input: s = \"0000\"\n        Output: [\"0.0.0.0\"]\n        Example 3:\n        Input: s = \"101023\"\n        Output: [\"1.0.10.23\",\"1.0.102.3\",\"10.1.0.23\",\"10.10.2.3\",\"101.0.2.3\"]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        def backtrack(s, path, res, n):\n            if len(path) > n * 3:\n                return\n            if not s and len(path) == n * 3:\n                res.append('.'.join(path))\n                return\n            for i in range(1, 4):\n                if i > 1 and s[0] == '0':\n                    continue\n                if 0 < int(s[:i]) <= 255:\n                    backtrack(s[i:], path + [s[:i]], res, n)"
    },
    {
        "number": 93,
        "title": "Restore IP Addresses",
        "difficulty": 1,
        "prompt": "class Solution:\n    def restoreIpAddresses(self, s: str) -> List[str]:\n        \"\"\"\n        A valid IP address consists of exactly four integers separated by single dots. Each integer is between 0 and 255 (inclusive) and cannot have leading zeros.\n            For example, \"0.1.2.201\" and \"192.168.1.1\" are valid IP addresses, but \"0.011.255.245\", \"192.168.1.312\" and \"192.168@1.1\" are invalid IP addresses.\n        Given a string s containing only digits, return all possible valid IP addresses that can be formed by inserting dots into s. You are not allowed to reorder or remove any digits in s. You may return the valid IP addresses in any order.\n        Example 1:\n        Input: s = \"25525511135\"\n        Output: [\"255.255.11.135\",\"255.255.111.35\"]\n        Example 2:\n        Input: s = \"0000\"\n        Output: [\"0.0.0.0\"]\n        Example 3:\n        Input: s = \"101023\"\n        Output: [\"1.0.10.23\",\"1.0.102.3\",\"10.1.0.23\",\"10.10.2.3\",\"101.0.2.3\"]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        if not s: return []\n        \n        self.valid_ip = []\n        self.recur(s, [], [])\n        return self.valid_ip"
    },
    {
        "number": 93,
        "title": "Restore IP Addresses",
        "difficulty": 1,
        "prompt": "class Solution:\n    def restoreIpAddresses(self, s: str) -> List[str]:\n        \"\"\"\n        A valid IP address consists of exactly four integers separated by single dots. Each integer is between 0 and 255 (inclusive) and cannot have leading zeros.\n            For example, \"0.1.2.201\" and \"192.168.1.1\" are valid IP addresses, but \"0.011.255.245\", \"192.168.1.312\" and \"192.168@1.1\" are invalid IP addresses.\n        Given a string s containing only digits, return all possible valid IP addresses that can be formed by inserting dots into s. You are not allowed to reorder or remove any digits in s. You may return the valid IP addresses in any order.\n        Example 1:\n        Input: s = \"25525511135\"\n        Output: [\"255.255.11.135\",\"255.255.111.35\"]\n        Example 2:\n        Input: s = \"0000\"\n        Output: [\"0.0.0.0\"]\n        Example 3:\n        Input: s = \"101023\"\n        Output: [\"1.0.10.23\",\"1.0.102.3\",\"10.1.0.23\",\"10.10.2.3\",\"101.0.2.3\"]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 3,
        "answer": "        def isValid(s):\n            if not s or len(s) > 3:\n                return False\n            if len(s) == 1:\n                return True if 0 <= int(s) <= 255 else False\n            if len(s) == 2:\n                return True if 0 <= int(s) <= 255 and str(int(s)) == s else False\n            if len(s) == 3:\n                return True if 0 <= int(s) <= 255 and str(int(s)) == s else False\n            return False\n        \n        def dfs(s, i, path):\n            if i > 3:\n                return\n            if len(s) - i < 3:\n                return\n            if isValid(s[:i]):\n                path.append(s[:i])\n                if i < len(s):\n                    dfs(s[i:], i+1, path)\n                else:\n                    ans.append(path.copy())\n            if i < len(s) and s[i] == '0':\n                dfs(s[i+1:], i+1, path)\n            if i+1 < len(s) and s[i] == '0' and s[i+1]!= '0':\n                dfs(s[i+1:"
    },
    {
        "number": 93,
        "title": "Restore IP Addresses",
        "difficulty": 1,
        "prompt": "class Solution:\n    def restoreIpAddresses(self, s: str) -> List[str]:\n        \"\"\"\n        A valid IP address consists of exactly four integers separated by single dots. Each integer is between 0 and 255 (inclusive) and cannot have leading zeros.\n            For example, \"0.1.2.201\" and \"192.168.1.1\" are valid IP addresses, but \"0.011.255.245\", \"192.168.1.312\" and \"192.168@1.1\" are invalid IP addresses.\n        Given a string s containing only digits, return all possible valid IP addresses that can be formed by inserting dots into s. You are not allowed to reorder or remove any digits in s. You may return the valid IP addresses in any order.\n        Example 1:\n        Input: s = \"25525511135\"\n        Output: [\"255.255.11.135\",\"255.255.111.35\"]\n        Example 2:\n        Input: s = \"0000\"\n        Output: [\"0.0.0.0\"]\n        Example 3:\n        Input: s = \"101023\"\n        Output: [\"1.0.10.23\",\"1.0.102.3\",\"10.1.0.23\",\"10.10.2.3\",\"101.0.2.3\"]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 4,
        "answer": "        res = []\n        if not s: return res"
    },
    {
        "number": 93,
        "title": "Restore IP Addresses",
        "difficulty": 1,
        "prompt": "class Solution:\n    def restoreIpAddresses(self, s: str) -> List[str]:\n        \"\"\"\n        A valid IP address consists of exactly four integers separated by single dots. Each integer is between 0 and 255 (inclusive) and cannot have leading zeros.\n            For example, \"0.1.2.201\" and \"192.168.1.1\" are valid IP addresses, but \"0.011.255.245\", \"192.168.1.312\" and \"192.168@1.1\" are invalid IP addresses.\n        Given a string s containing only digits, return all possible valid IP addresses that can be formed by inserting dots into s. You are not allowed to reorder or remove any digits in s. You may return the valid IP addresses in any order.\n        Example 1:\n        Input: s = \"25525511135\"\n        Output: [\"255.255.11.135\",\"255.255.111.35\"]\n        Example 2:\n        Input: s = \"0000\"\n        Output: [\"0.0.0.0\"]\n        Example 3:\n        Input: s = \"101023\"\n        Output: [\"1.0.10.23\",\"1.0.102.3\",\"10.1.0.23\",\"10.10.2.3\",\"101.0.2.3\"]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 5,
        "answer": "        res = []\n        if len(s) <= 3: return res\n        \n        def dfs(idx, path, s):\n            # len(s) < 4 or len(path) > 3\n            if len(s) == 0 and len(path) == 4:\n                res.append('.'.join(path))\n                return\n            \n            if idx == len(s):\n                return\n            \n            # 0 - 9\n            if s[idx] == '0':\n                dfs(idx + 1, path + [s[idx]], s)\n                return\n            \n            if len(path) < 4:\n                # 1 - 9\n                if len(path) == 0 or (path[-1] == '0' and s[idx]!= '0'):\n                    dfs(idx + 1, path + [s[idx]], s)\n                \n                # 10 - 99\n                if len(s) > idx + 1 and s[idx] == '1':\n                    dfs(idx + 2, path + ['1', s[idx:idx + 2]], s[idx + 2:])\n                \n                # 100 - 999\n                if len(s) > idx + 1 and s[idx] == '"
    },
    {
        "number": 94,
        "title": "Binary Tree Inorder Traversal",
        "difficulty": 0,
        "prompt": "class Solution:\n    def inorderTraversal(self, root: Optional[TreeNode]) -> List[int]:\n        \"\"\"\n        Given the root of a binary tree, return the inorder traversal of its nodes' values.\n        Example 1:\n        Input: root = [1,null,2,3]\n        Output: [1,3,2]\n        Example 2:\n        Input: root = []\n        Output: []\n        Example 3:\n        Input: root = [1]\n        Output: [1]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        res = []\n        stack = []\n        curr = root\n        while stack or curr:\n            if curr:\n                stack.append(curr)\n                curr = curr.left\n            else:\n                curr = stack.pop()\n                res.append(curr.val)\n                curr = curr.right\n        return res"
    },
    {
        "number": 94,
        "title": "Binary Tree Inorder Traversal",
        "difficulty": 0,
        "prompt": "class Solution:\n    def inorderTraversal(self, root: Optional[TreeNode]) -> List[int]:\n        \"\"\"\n        Given the root of a binary tree, return the inorder traversal of its nodes' values.\n        Example 1:\n        Input: root = [1,null,2,3]\n        Output: [1,3,2]\n        Example 2:\n        Input: root = []\n        Output: []\n        Example 3:\n        Input: root = [1]\n        Output: [1]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        stack = []\n        res = []\n        \n        cur = root\n        while cur!= None or len(stack) > 0:\n            while cur!= None:\n                stack.append(cur)\n                cur = cur.left\n            \n            cur = stack.pop()\n            res.append(cur.val)\n            cur = cur.right\n        \n        return res<|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>"
    },
    {
        "number": 94,
        "title": "Binary Tree Inorder Traversal",
        "difficulty": 0,
        "prompt": "class Solution:\n    def inorderTraversal(self, root: Optional[TreeNode]) -> List[int]:\n        \"\"\"\n        Given the root of a binary tree, return the inorder traversal of its nodes' values.\n        Example 1:\n        Input: root = [1,null,2,3]\n        Output: [1,3,2]\n        Example 2:\n        Input: root = []\n        Output: []\n        Example 3:\n        Input: root = [1]\n        Output: [1]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 3,
        "answer": "        result = []\n        \n        def traverse(root):\n            if not root:\n                return\n            \n            if root.left:\n                traverse(root.left)\n            result.append(root.val)\n            if root.right:\n                traverse(root.right)\n            \n        traverse(root)\n        return result\n            \n            \nclass Solution:\n    def isSubtree(self, s: TreeNode, t: TreeNode) -> bool:\n        \"\"\"\n        Given two non-empty binary trees s and t, check whether tree t has exactly the same structure and node values with a subtree of s. A subtree of s is a tree consists of a node in s and all of this node's descendants. The tree s could also be considered as a subtree of itself.\n        Example 1:\n        Given tree s:\n         3\n        / \\\n        4   5\n        Given tree t:\n        4 \n        / \\\n        1   2\n        Return true, because t has the same structure and node values with a subtree of s.\n        Example 2:\n        Given tree s:\n         3\n        / \\\n        4   5\n        Given tree t:\n        4\n        Return false.\n        \"\"\"\n        if not t:\n            return True\n        if not s:\n"
    },
    {
        "number": 94,
        "title": "Binary Tree Inorder Traversal",
        "difficulty": 0,
        "prompt": "class Solution:\n    def inorderTraversal(self, root: Optional[TreeNode]) -> List[int]:\n        \"\"\"\n        Given the root of a binary tree, return the inorder traversal of its nodes' values.\n        Example 1:\n        Input: root = [1,null,2,3]\n        Output: [1,3,2]\n        Example 2:\n        Input: root = []\n        Output: []\n        Example 3:\n        Input: root = [1]\n        Output: [1]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 4,
        "answer": "        ans = []\n        stack = []\n        while root or stack:\n            while root:\n                stack.append(root)\n                root = root.left\n            root = stack.pop()\n            ans.append(root.val)\n            root = root.right\n        return ans\n<|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>"
    },
    {
        "number": 94,
        "title": "Binary Tree Inorder Traversal",
        "difficulty": 0,
        "prompt": "class Solution:\n    def inorderTraversal(self, root: Optional[TreeNode]) -> List[int]:\n        \"\"\"\n        Given the root of a binary tree, return the inorder traversal of its nodes' values.\n        Example 1:\n        Input: root = [1,null,2,3]\n        Output: [1,3,2]\n        Example 2:\n        Input: root = []\n        Output: []\n        Example 3:\n        Input: root = [1]\n        Output: [1]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 5,
        "answer": "        def inorder(node, res):\n            if not node:\n                return\n            inorder(node.left, res)\n            res.append(node.val)\n            inorder(node.right, res)"
    },
    {
        "number": 95,
        "title": "Unique Binary Search Trees II",
        "difficulty": 1,
        "prompt": "class Solution:\n    def generateTrees(self, n: int) -> List[Optional[TreeNode]]:\n        \"\"\"\n        Given an integer n, return all the structurally unique BST's (binary search trees), which has exactly n nodes of unique values from 1 to n. Return the answer in any order.\n        Example 1:\n        Input: n = 3\n        Output: [[1,null,2,null,3],[1,null,3,2],[2,1,3],[3,1,null,null,2],[3,2,null,1]]\n        Example 2:\n        Input: n = 1\n        Output: [[1]]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        if n < 1:\n            return []\n        \n        return self.genBST(1, n)\n    \n    def genBST(self, start, end):\n        if start > end:\n            return [None]\n        \n        all_trees = []\n        for i in range(start, end + 1):\n            left_trees = self.genBST(start, i - 1)\n            right_trees = self.genBST(i + 1, end)\n            for l in left_trees:\n                for r in right_trees:\n                    cur_root = TreeNode(i)\n                    cur_root.left = l\n                    cur_root.right = r\n                    all_trees.append(cur_root)\n        \n        return all_trees<|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>"
    },
    {
        "number": 95,
        "title": "Unique Binary Search Trees II",
        "difficulty": 1,
        "prompt": "class Solution:\n    def generateTrees(self, n: int) -> List[Optional[TreeNode]]:\n        \"\"\"\n        Given an integer n, return all the structurally unique BST's (binary search trees), which has exactly n nodes of unique values from 1 to n. Return the answer in any order.\n        Example 1:\n        Input: n = 3\n        Output: [[1,null,2,null,3],[1,null,3,2],[2,1,3],[3,1,null,null,2],[3,2,null,1]]\n        Example 2:\n        Input: n = 1\n        Output: [[1]]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        def helper(start, end):\n            if start > end:\n                return [None]\n            all_trees = []\n            for root in range(start, end + 1):\n                left_trees = helper(start, root - 1)\n                right_trees = helper(root + 1, end)\n                for left in left_trees:\n                    for right in right_trees:\n                        curr_tree = TreeNode(root)\n                        curr_tree.left = left\n                        curr_tree.right = right\n                        all_trees.append(curr_tree)\n            return all_trees\n        \n        return helper(1, n) if n else []\n<|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>"
    },
    {
        "number": 95,
        "title": "Unique Binary Search Trees II",
        "difficulty": 1,
        "prompt": "class Solution:\n    def generateTrees(self, n: int) -> List[Optional[TreeNode]]:\n        \"\"\"\n        Given an integer n, return all the structurally unique BST's (binary search trees), which has exactly n nodes of unique values from 1 to n. Return the answer in any order.\n        Example 1:\n        Input: n = 3\n        Output: [[1,null,2,null,3],[1,null,3,2],[2,1,3],[3,1,null,null,2],[3,2,null,1]]\n        Example 2:\n        Input: n = 1\n        Output: [[1]]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 3,
        "answer": "        def generate(start, end):\n            if start > end:\n                return [None]\n            all_trees = []\n            for i in range(start, end + 1):  # pick up a root\n                # all possible left subtrees if i is choosen to be a root\n                left_trees = generate(start, i - 1)\n                # all possible right subtrees if i is choosen to be a root\n                right_trees = generate(i + 1, end)\n                # connect left and right subtrees to the root i\n                for l in left_trees:\n                    for r in right_trees:\n                        current_tree = TreeNode(i)\n                        current_tree.left = l\n                        current_tree.right = r\n                        all_trees.append(current_tree)\n            return all_trees\n        return generate(1, n) if n else []\n<|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>"
    },
    {
        "number": 95,
        "title": "Unique Binary Search Trees II",
        "difficulty": 1,
        "prompt": "class Solution:\n    def generateTrees(self, n: int) -> List[Optional[TreeNode]]:\n        \"\"\"\n        Given an integer n, return all the structurally unique BST's (binary search trees), which has exactly n nodes of unique values from 1 to n. Return the answer in any order.\n        Example 1:\n        Input: n = 3\n        Output: [[1,null,2,null,3],[1,null,3,2],[2,1,3],[3,1,null,null,2],[3,2,null,1]]\n        Example 2:\n        Input: n = 1\n        Output: [[1]]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 4,
        "answer": "        if n == 0:\n            return []\n        \n        def tree_node(val, left=None, right=None):\n            \"\"\"\n            Create a binary tree node\n            \"\"\"\n            return TreeNode(val, left=left, right=right)\n        \n        def make_trees(start, end):\n            \"\"\"\n            Create a list of binary trees with unique values in a range\n            \"\"\"\n            if start > end:\n                return [None]\n            \n            trees = []\n            for i in range(start, end+1):\n                # Create a binary tree for each number in range\n                left_trees = make_trees(start, i-1)\n                right_trees = make_trees(i+1, end)\n                \n                # For each number in range, create a binary tree with that number as root\n                for left in left_trees:\n                    for right in right_trees:\n                        trees.append(tree_node(i, left, right))\n            \n            return trees\n        \n        return make_trees(1, n)\n<|endoftext|>"
    },
    {
        "number": 95,
        "title": "Unique Binary Search Trees II",
        "difficulty": 1,
        "prompt": "class Solution:\n    def generateTrees(self, n: int) -> List[Optional[TreeNode]]:\n        \"\"\"\n        Given an integer n, return all the structurally unique BST's (binary search trees), which has exactly n nodes of unique values from 1 to n. Return the answer in any order.\n        Example 1:\n        Input: n = 3\n        Output: [[1,null,2,null,3],[1,null,3,2],[2,1,3],[3,1,null,null,2],[3,2,null,1]]\n        Example 2:\n        Input: n = 1\n        Output: [[1]]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 5,
        "answer": "        def helper(start, end):\n            if start > end:\n                return [None]\n            res = []\n            for i in range(start, end+1):\n                left = helper(start, i-1)\n                right = helper(i+1, end)\n                for l in left:\n                    for r in right:\n                        node = TreeNode(i)\n                        node.left = l\n                        node.right = r\n                        res.append(node)\n            return res\n        return helper(1, n) if n else []\n<|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>"
    },
    {
        "number": 96,
        "title": "Unique Binary Search Trees",
        "difficulty": 1,
        "prompt": "class Solution:\n    def numTrees(self, n: int) -> int:\n        \"\"\"\n        Given an integer n, return the number of structurally unique BST's (binary search trees) which has exactly n nodes of unique values from 1 to n.\n        Example 1:\n        Input: n = 3\n        Output: 5\n        Example 2:\n        Input: n = 1\n        Output: 1\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        if n <= 1:\n            return 1\n        \n        return sum(self.numTreesRec(i, j) for i, j in zip(range(1, n+1), range(n, 0, -1)))"
    },
    {
        "number": 96,
        "title": "Unique Binary Search Trees",
        "difficulty": 1,
        "prompt": "class Solution:\n    def numTrees(self, n: int) -> int:\n        \"\"\"\n        Given an integer n, return the number of structurally unique BST's (binary search trees) which has exactly n nodes of unique values from 1 to n.\n        Example 1:\n        Input: n = 3\n        Output: 5\n        Example 2:\n        Input: n = 1\n        Output: 1\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        if n < 1:\n            return 0\n        self.memo = {}\n        return self.helper(n)"
    },
    {
        "number": 96,
        "title": "Unique Binary Search Trees",
        "difficulty": 1,
        "prompt": "class Solution:\n    def numTrees(self, n: int) -> int:\n        \"\"\"\n        Given an integer n, return the number of structurally unique BST's (binary search trees) which has exactly n nodes of unique values from 1 to n.\n        Example 1:\n        Input: n = 3\n        Output: 5\n        Example 2:\n        Input: n = 1\n        Output: 1\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 3,
        "answer": "        return self.numTrees_helper(1, n)"
    },
    {
        "number": 96,
        "title": "Unique Binary Search Trees",
        "difficulty": 1,
        "prompt": "class Solution:\n    def numTrees(self, n: int) -> int:\n        \"\"\"\n        Given an integer n, return the number of structurally unique BST's (binary search trees) which has exactly n nodes of unique values from 1 to n.\n        Example 1:\n        Input: n = 3\n        Output: 5\n        Example 2:\n        Input: n = 1\n        Output: 1\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 4,
        "answer": "        # \u540e\u5e8f\u904d\u5386 \u6bcf\u4e00\u4e2a\u8282\u70b9\u90fd\u662fn\u4e2a\u8282\u70b9\u7684\u4e8c\u53c9\u641c\u7d22\u6811\n        # \u6811\u7684\u6df1\u5ea6\u80af\u5b9a\u662f2^n"
    },
    {
        "number": 96,
        "title": "Unique Binary Search Trees",
        "difficulty": 1,
        "prompt": "class Solution:\n    def numTrees(self, n: int) -> int:\n        \"\"\"\n        Given an integer n, return the number of structurally unique BST's (binary search trees) which has exactly n nodes of unique values from 1 to n.\n        Example 1:\n        Input: n = 3\n        Output: 5\n        Example 2:\n        Input: n = 1\n        Output: 1\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 5,
        "answer": "        # Catalan Number Formula:\n        # C(n) = (2n)!/(n + 1)!(n + 2)!\n        # Result = (2n)! / (n + 1)!(n + 2)!\n        # Simplify:\n        # C(n) = 2n * (2n - 1)! / (n + 1)!(n + 2)!\n        # Result = n * (2n - 1) * (2n - 2)! / (n + 1)!(n + 2)!\n        # Simplify to:\n        # C(n) = n * (2n - 1)\n        # Result = n * (2n - 1)\n        # C(n) = n * (2n - 1) / (n + 1)"
    },
    {
        "number": 97,
        "title": "Interleaving String",
        "difficulty": 1,
        "prompt": "class Solution:\n    def isInterleave(self, s1: str, s2: str, s3: str) -> bool:\n        \"\"\"\n        Given strings s1, s2, and s3, find whether s3 is formed by an interleaving of s1 and s2.\n        An interleaving of two strings s and t is a configuration where s and t are divided into n and m substrings respectively, such that:\n            s = s1 + s2 +... + sn\n            t = t1 + t2 +... + tm\n            |n - m| <= 1\n            The interleaving is s1 + t1 + s2 + t2 + s3 + t3 +... or t1 + s1 + t2 + s2 + t3 + s3 +...\n        Note: a + b is the concatenation of strings a and b.\n        Example 1:\n        Input: s1 = \"aabcc\", s2 = \"dbbca\", s3 = \"aadbbcbcac\"\n        Output: true\n        Explanation: One way to obtain s3 is:\n        Split s1 into s1 = \"aa\" + \"bc\" + \"c\", and s2 into s2 = \"dbbc\" + \"a\".\n        Interleaving the two splits, we get \"aa\" + \"dbbc\" + \"bc\" + \"a\" + \"c\" = \"aadbbcbcac\".\n        Since s3 can be obtained by interleaving s1 and s2, we return true.\n        Example 2:\n        Input: s1 = \"aabcc\", s2 = \"dbbca\", s3 = \"aadbbbaccc\"\n        Output: false\n        Explanation: Notice how it is impossible to interleave s2 with any other string to obtain s3.\n        Example 3:\n        Input: s1 = \"\", s2 = \"\", s3 = \"\"\n        Output: true\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        if len(s1) + len(s2)!= len(s3): return False\n        if len(s1) == 0: return s2 == s3\n        if len(s2) == 0: return s1 == s3"
    },
    {
        "number": 97,
        "title": "Interleaving String",
        "difficulty": 1,
        "prompt": "class Solution:\n    def isInterleave(self, s1: str, s2: str, s3: str) -> bool:\n        \"\"\"\n        Given strings s1, s2, and s3, find whether s3 is formed by an interleaving of s1 and s2.\n        An interleaving of two strings s and t is a configuration where s and t are divided into n and m substrings respectively, such that:\n            s = s1 + s2 +... + sn\n            t = t1 + t2 +... + tm\n            |n - m| <= 1\n            The interleaving is s1 + t1 + s2 + t2 + s3 + t3 +... or t1 + s1 + t2 + s2 + t3 + s3 +...\n        Note: a + b is the concatenation of strings a and b.\n        Example 1:\n        Input: s1 = \"aabcc\", s2 = \"dbbca\", s3 = \"aadbbcbcac\"\n        Output: true\n        Explanation: One way to obtain s3 is:\n        Split s1 into s1 = \"aa\" + \"bc\" + \"c\", and s2 into s2 = \"dbbc\" + \"a\".\n        Interleaving the two splits, we get \"aa\" + \"dbbc\" + \"bc\" + \"a\" + \"c\" = \"aadbbcbcac\".\n        Since s3 can be obtained by interleaving s1 and s2, we return true.\n        Example 2:\n        Input: s1 = \"aabcc\", s2 = \"dbbca\", s3 = \"aadbbbaccc\"\n        Output: false\n        Explanation: Notice how it is impossible to interleave s2 with any other string to obtain s3.\n        Example 3:\n        Input: s1 = \"\", s2 = \"\", s3 = \"\"\n        Output: true\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        return self.is_interleave_v1(s1, s2, s3)\n        return self.is_interleave_v2(s1, s2, s3)\n    \n    def is_interleave_v1(self, s1, s2, s3):\n        \"\"\"\n        Interleaving of two strings s and t is a configuration where s and t are divided into n and m substrings respectively, such that:\n            s = s1 + s2 +... + sn\n            t = t1 + t2 +... + tm\n            |n - m| <= 1\n            The interleaving is s1 + t1 + s2 + t2 + s3 + t3 +...\n        This method implements dynamic programming to solve this problem. We record\n        whether two substrings can be interleaved.\n        \"\"\"\n        n1, n2 = len(s1), len(s2)\n        if len(s3)!= n1 + n2:\n            return False\n        dp = [[False for _ in range(n2 + 1)] for _ in range(n1 + 1)]\n        dp[0][0] = True\n        for i in range(1, n1 + 1):\n            dp[i][0] = dp[i - 1][0] and s1"
    },
    {
        "number": 97,
        "title": "Interleaving String",
        "difficulty": 1,
        "prompt": "class Solution:\n    def isInterleave(self, s1: str, s2: str, s3: str) -> bool:\n        \"\"\"\n        Given strings s1, s2, and s3, find whether s3 is formed by an interleaving of s1 and s2.\n        An interleaving of two strings s and t is a configuration where s and t are divided into n and m substrings respectively, such that:\n            s = s1 + s2 +... + sn\n            t = t1 + t2 +... + tm\n            |n - m| <= 1\n            The interleaving is s1 + t1 + s2 + t2 + s3 + t3 +... or t1 + s1 + t2 + s2 + t3 + s3 +...\n        Note: a + b is the concatenation of strings a and b.\n        Example 1:\n        Input: s1 = \"aabcc\", s2 = \"dbbca\", s3 = \"aadbbcbcac\"\n        Output: true\n        Explanation: One way to obtain s3 is:\n        Split s1 into s1 = \"aa\" + \"bc\" + \"c\", and s2 into s2 = \"dbbc\" + \"a\".\n        Interleaving the two splits, we get \"aa\" + \"dbbc\" + \"bc\" + \"a\" + \"c\" = \"aadbbcbcac\".\n        Since s3 can be obtained by interleaving s1 and s2, we return true.\n        Example 2:\n        Input: s1 = \"aabcc\", s2 = \"dbbca\", s3 = \"aadbbbaccc\"\n        Output: false\n        Explanation: Notice how it is impossible to interleave s2 with any other string to obtain s3.\n        Example 3:\n        Input: s1 = \"\", s2 = \"\", s3 = \"\"\n        Output: true\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 3,
        "answer": "        if not s1 and not s2 and not s3:\n            return True\n        elif not s1:\n            return s3 == s2\n        elif not s2:\n            return s3 == s1\n        if len(s1) + len(s2)!= len(s3):\n            return False\n        dp = [[False] * (len(s2) + 1) for _ in range(len(s1) + 1)]\n        dp[0][0] = True\n        for i in range(1, len(s1) + 1):\n            dp[i][0] = dp[i - 1][0] and s1[i - 1] == s3[i - 1]\n        for j in range(1, len(s2) + 1):\n            dp[0][j] = dp[0][j - 1] and s2[j - 1] == s3[j - 1]\n        for i in range(1, len(s1) + 1):\n            for j in range(1, len(s2) + 1):\n                dp[i][j] = (dp[i - 1][j] and s1[i - 1] == s3[i + j - 1]) or (dp[i][j - 1] and s2["
    },
    {
        "number": 97,
        "title": "Interleaving String",
        "difficulty": 1,
        "prompt": "class Solution:\n    def isInterleave(self, s1: str, s2: str, s3: str) -> bool:\n        \"\"\"\n        Given strings s1, s2, and s3, find whether s3 is formed by an interleaving of s1 and s2.\n        An interleaving of two strings s and t is a configuration where s and t are divided into n and m substrings respectively, such that:\n            s = s1 + s2 +... + sn\n            t = t1 + t2 +... + tm\n            |n - m| <= 1\n            The interleaving is s1 + t1 + s2 + t2 + s3 + t3 +... or t1 + s1 + t2 + s2 + t3 + s3 +...\n        Note: a + b is the concatenation of strings a and b.\n        Example 1:\n        Input: s1 = \"aabcc\", s2 = \"dbbca\", s3 = \"aadbbcbcac\"\n        Output: true\n        Explanation: One way to obtain s3 is:\n        Split s1 into s1 = \"aa\" + \"bc\" + \"c\", and s2 into s2 = \"dbbc\" + \"a\".\n        Interleaving the two splits, we get \"aa\" + \"dbbc\" + \"bc\" + \"a\" + \"c\" = \"aadbbcbcac\".\n        Since s3 can be obtained by interleaving s1 and s2, we return true.\n        Example 2:\n        Input: s1 = \"aabcc\", s2 = \"dbbca\", s3 = \"aadbbbaccc\"\n        Output: false\n        Explanation: Notice how it is impossible to interleave s2 with any other string to obtain s3.\n        Example 3:\n        Input: s1 = \"\", s2 = \"\", s3 = \"\"\n        Output: true\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 4,
        "answer": "        self.res = False\n        self.dfs(s1, s2, s3, 0, 0, 0)\n        return self.res"
    },
    {
        "number": 97,
        "title": "Interleaving String",
        "difficulty": 1,
        "prompt": "class Solution:\n    def isInterleave(self, s1: str, s2: str, s3: str) -> bool:\n        \"\"\"\n        Given strings s1, s2, and s3, find whether s3 is formed by an interleaving of s1 and s2.\n        An interleaving of two strings s and t is a configuration where s and t are divided into n and m substrings respectively, such that:\n            s = s1 + s2 +... + sn\n            t = t1 + t2 +... + tm\n            |n - m| <= 1\n            The interleaving is s1 + t1 + s2 + t2 + s3 + t3 +... or t1 + s1 + t2 + s2 + t3 + s3 +...\n        Note: a + b is the concatenation of strings a and b.\n        Example 1:\n        Input: s1 = \"aabcc\", s2 = \"dbbca\", s3 = \"aadbbcbcac\"\n        Output: true\n        Explanation: One way to obtain s3 is:\n        Split s1 into s1 = \"aa\" + \"bc\" + \"c\", and s2 into s2 = \"dbbc\" + \"a\".\n        Interleaving the two splits, we get \"aa\" + \"dbbc\" + \"bc\" + \"a\" + \"c\" = \"aadbbcbcac\".\n        Since s3 can be obtained by interleaving s1 and s2, we return true.\n        Example 2:\n        Input: s1 = \"aabcc\", s2 = \"dbbca\", s3 = \"aadbbbaccc\"\n        Output: false\n        Explanation: Notice how it is impossible to interleave s2 with any other string to obtain s3.\n        Example 3:\n        Input: s1 = \"\", s2 = \"\", s3 = \"\"\n        Output: true\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 5,
        "answer": "        m, n = len(s1), len(s2)\n        if m + n!= len(s3):\n            return False"
    },
    {
        "number": 98,
        "title": "Validate Binary Search Tree",
        "difficulty": 1,
        "prompt": "class Solution:\n    def isValidBST(self, root: Optional[TreeNode]) -> bool:\n        \"\"\"\n        Given the root of a binary tree, determine if it is a valid binary search tree (BST).\n        A valid BST is defined as follows:\n            The left subtree of a node contains only nodes with keys less than the node's key.\n            The right subtree of a node contains only nodes with keys greater than the node's key.\n            Both the left and right subtrees must also be binary search trees.\n        Example 1:\n        Input: root = [2,1,3]\n        Output: true\n        Example 2:\n        Input: root = [5,1,4,null,null,3,6]\n        Output: false\n        Explanation: The root node's value is 5 but its right child's value is 4.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        \n        self.flag = True\n        self.check(root)\n        return self.flag\n    \n    def check(self, node):\n        if not node:\n            return\n        self.check(node.left)\n        if self.flag and node.val >= node.left.val:\n            self.flag = False\n        self.check(node.right)\n        <|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>"
    },
    {
        "number": 98,
        "title": "Validate Binary Search Tree",
        "difficulty": 1,
        "prompt": "class Solution:\n    def isValidBST(self, root: Optional[TreeNode]) -> bool:\n        \"\"\"\n        Given the root of a binary tree, determine if it is a valid binary search tree (BST).\n        A valid BST is defined as follows:\n            The left subtree of a node contains only nodes with keys less than the node's key.\n            The right subtree of a node contains only nodes with keys greater than the node's key.\n            Both the left and right subtrees must also be binary search trees.\n        Example 1:\n        Input: root = [2,1,3]\n        Output: true\n        Example 2:\n        Input: root = [5,1,4,null,null,3,6]\n        Output: false\n        Explanation: The root node's value is 5 but its right child's value is 4.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        return self.validateBST(root, float(\"-inf\"), float(\"inf\"))"
    },
    {
        "number": 98,
        "title": "Validate Binary Search Tree",
        "difficulty": 1,
        "prompt": "class Solution:\n    def isValidBST(self, root: Optional[TreeNode]) -> bool:\n        \"\"\"\n        Given the root of a binary tree, determine if it is a valid binary search tree (BST).\n        A valid BST is defined as follows:\n            The left subtree of a node contains only nodes with keys less than the node's key.\n            The right subtree of a node contains only nodes with keys greater than the node's key.\n            Both the left and right subtrees must also be binary search trees.\n        Example 1:\n        Input: root = [2,1,3]\n        Output: true\n        Example 2:\n        Input: root = [5,1,4,null,null,3,6]\n        Output: false\n        Explanation: The root node's value is 5 but its right child's value is 4.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 3,
        "answer": "        def isBST(node, min_val, max_val):\n            if not node:\n                return True\n            if node.val <= min_val or node.val >= max_val:\n                return False\n            return isBST(node.left, min_val, node.val) and isBST(node.right, node.val, max_val)"
    },
    {
        "number": 98,
        "title": "Validate Binary Search Tree",
        "difficulty": 1,
        "prompt": "class Solution:\n    def isValidBST(self, root: Optional[TreeNode]) -> bool:\n        \"\"\"\n        Given the root of a binary tree, determine if it is a valid binary search tree (BST).\n        A valid BST is defined as follows:\n            The left subtree of a node contains only nodes with keys less than the node's key.\n            The right subtree of a node contains only nodes with keys greater than the node's key.\n            Both the left and right subtrees must also be binary search trees.\n        Example 1:\n        Input: root = [2,1,3]\n        Output: true\n        Example 2:\n        Input: root = [5,1,4,null,null,3,6]\n        Output: false\n        Explanation: The root node's value is 5 but its right child's value is 4.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 4,
        "answer": "        # Method 1: Recursion\n        # Time: O(N)\n        # Space: O(N)\n        # def helper(node, lower = float('-inf'), upper = float('inf')):\n        #     if not node:\n        #         return True\n        #     val = node.val\n        #     if val <= lower or val >= upper:\n        #         return False\n        #     if not helper(node.right, val, upper):\n        #         return False\n        #     if not helper(node.left, lower, val):\n        #         return False\n        #     return True\n        # return helper(root)"
    },
    {
        "number": 98,
        "title": "Validate Binary Search Tree",
        "difficulty": 1,
        "prompt": "class Solution:\n    def isValidBST(self, root: Optional[TreeNode]) -> bool:\n        \"\"\"\n        Given the root of a binary tree, determine if it is a valid binary search tree (BST).\n        A valid BST is defined as follows:\n            The left subtree of a node contains only nodes with keys less than the node's key.\n            The right subtree of a node contains only nodes with keys greater than the node's key.\n            Both the left and right subtrees must also be binary search trees.\n        Example 1:\n        Input: root = [2,1,3]\n        Output: true\n        Example 2:\n        Input: root = [5,1,4,null,null,3,6]\n        Output: false\n        Explanation: The root node's value is 5 but its right child's value is 4.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 5,
        "answer": "        return self.isValid(root, float('-inf'), float('inf'))"
    },
    {
        "number": 99,
        "title": "Recover Binary Search Tree",
        "difficulty": 1,
        "prompt": "class Solution:\n    def recoverTree(self, root: Optional[TreeNode]) -> None:\n        \"\"\"\n        Do not return anything, modify root in-place instead.\n        You are given the root of a binary search tree (BST), where the values of exactly two nodes of the tree were swapped by mistake. Recover the tree without changing its structure.\n        Example 1:\n        Input: root = [1,3,null,null,2]\n        Output: [3,1,null,null,2]\n        Explanation: 3 cannot be a left child of 1 because 3 > 1. Swapping 1 and 3 makes the BST valid.\n        Example 2:\n        Input: root = [3,1,4,null,null,2]\n        Output: [2,1,4,null,null,3]\n        Explanation: 2 cannot be in the right subtree of 3 because 2 < 3. Swapping 2 and 3 makes the BST valid.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        nodes = []\n        self.helper(root, nodes)\n        if len(nodes)!= 2:\n            return None\n        if nodes[0] > nodes[1]:\n            nodes[0], nodes[1] = nodes[1], nodes[0]\n        self.swap(nodes, 0, 1, root)"
    },
    {
        "number": 99,
        "title": "Recover Binary Search Tree",
        "difficulty": 1,
        "prompt": "class Solution:\n    def recoverTree(self, root: Optional[TreeNode]) -> None:\n        \"\"\"\n        Do not return anything, modify root in-place instead.\n        You are given the root of a binary search tree (BST), where the values of exactly two nodes of the tree were swapped by mistake. Recover the tree without changing its structure.\n        Example 1:\n        Input: root = [1,3,null,null,2]\n        Output: [3,1,null,null,2]\n        Explanation: 3 cannot be a left child of 1 because 3 > 1. Swapping 1 and 3 makes the BST valid.\n        Example 2:\n        Input: root = [3,1,4,null,null,2]\n        Output: [2,1,4,null,null,3]\n        Explanation: 2 cannot be in the right subtree of 3 because 2 < 3. Swapping 2 and 3 makes the BST valid.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        nodes = []\n        nodes.append(root)\n        self.inorder(root)\n        \n        nodes.sort()\n        \n        self.swap(nodes)\n        \n        return root\n    \n    def swap(self, nodes):\n        nodes[1].val, nodes[2].val = nodes[2].val, nodes[1].val\n    \n    def inorder(self, root):\n        if root is None:\n            return\n        \n        self.inorder(root.left)\n        nodes.append(root)\n        self.inorder(root.right)\n        \n        \nclass Solution:\n    def recoverTree(self, root: Optional[TreeNode]) -> None:\n        \"\"\"\n        Do not return anything, modify root in-place instead.\n        You are given the root of a binary search tree (BST), where the value of each node is a lower bound or upper bound of the corresponding BST. \n        We need to write a function that returns the minimum and maximum values of the BST.\n        Example 1:\n        Input: root = [4,2,7,1,3]\n        Output: [1,7]\n        Example 2:\n        Input: root = [2,1,3]\n        Output: [1,3]\n        Example"
    },
    {
        "number": 99,
        "title": "Recover Binary Search Tree",
        "difficulty": 1,
        "prompt": "class Solution:\n    def recoverTree(self, root: Optional[TreeNode]) -> None:\n        \"\"\"\n        Do not return anything, modify root in-place instead.\n        You are given the root of a binary search tree (BST), where the values of exactly two nodes of the tree were swapped by mistake. Recover the tree without changing its structure.\n        Example 1:\n        Input: root = [1,3,null,null,2]\n        Output: [3,1,null,null,2]\n        Explanation: 3 cannot be a left child of 1 because 3 > 1. Swapping 1 and 3 makes the BST valid.\n        Example 2:\n        Input: root = [3,1,4,null,null,2]\n        Output: [2,1,4,null,null,3]\n        Explanation: 2 cannot be in the right subtree of 3 because 2 < 3. Swapping 2 and 3 makes the BST valid.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 3,
        "answer": "        self.leftmost = TreeNode(float(\"inf\"))\n        self.rightmost = TreeNode(float(\"-inf\"))\n        \n        def inorder(root):\n            if not root:\n                return\n            inorder(root.left)\n            if root.val < self.leftmost.val:\n                self.leftmost = root\n            if root.val > self.rightmost.val:\n                self.rightmost = root\n            inorder(root.right)\n        \n        inorder(root)\n        self.leftmost.val, self.rightmost.val = self.rightmost.val, self.leftmost.val\n<|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>"
    },
    {
        "number": 99,
        "title": "Recover Binary Search Tree",
        "difficulty": 1,
        "prompt": "class Solution:\n    def recoverTree(self, root: Optional[TreeNode]) -> None:\n        \"\"\"\n        Do not return anything, modify root in-place instead.\n        You are given the root of a binary search tree (BST), where the values of exactly two nodes of the tree were swapped by mistake. Recover the tree without changing its structure.\n        Example 1:\n        Input: root = [1,3,null,null,2]\n        Output: [3,1,null,null,2]\n        Explanation: 3 cannot be a left child of 1 because 3 > 1. Swapping 1 and 3 makes the BST valid.\n        Example 2:\n        Input: root = [3,1,4,null,null,2]\n        Output: [2,1,4,null,null,3]\n        Explanation: 2 cannot be in the right subtree of 3 because 2 < 3. Swapping 2 and 3 makes the BST valid.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 4,
        "answer": "        # inorder\n        def inorder(root):\n            if not root:\n                return []\n            return inorder(root.left) + [root.val] + inorder(root.right)\n        \n        # find two swapped values\n        def swap(vals, i, j):\n            vals[i], vals[j] = vals[j], vals[i]\n            \n        vals = inorder(root)\n        # print(vals)\n        for i in range(len(vals) - 1):\n            if vals[i] > vals[i + 1]:\n                swap(vals, i, i + 1)\n                break\n        \n        # swap one value back\n        swap(vals, i + 1, i)\n        \n        # set values back\n        root.val = vals[i + 1]\n        \n        return root\n        \n        \n        # iterative\n        # stack = []\n        # prev = None\n        # while root or stack:\n        #     while root:\n        #         stack.append(root)\n        #         root = root.left\n        #     root = stack.pop()\n        #     if prev and prev.val > root.val:\n        #         swap(stack, root.val, prev.val)\n        "
    },
    {
        "number": 99,
        "title": "Recover Binary Search Tree",
        "difficulty": 1,
        "prompt": "class Solution:\n    def recoverTree(self, root: Optional[TreeNode]) -> None:\n        \"\"\"\n        Do not return anything, modify root in-place instead.\n        You are given the root of a binary search tree (BST), where the values of exactly two nodes of the tree were swapped by mistake. Recover the tree without changing its structure.\n        Example 1:\n        Input: root = [1,3,null,null,2]\n        Output: [3,1,null,null,2]\n        Explanation: 3 cannot be a left child of 1 because 3 > 1. Swapping 1 and 3 makes the BST valid.\n        Example 2:\n        Input: root = [3,1,4,null,null,2]\n        Output: [2,1,4,null,null,3]\n        Explanation: 2 cannot be in the right subtree of 3 because 2 < 3. Swapping 2 and 3 makes the BST valid.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 5,
        "answer": "        self.swapped_nodes = []\n        self.pre = None\n        \n        def inorder(root):\n            if root:\n                inorder(root.left)\n                if self.pre and self.pre.val > root.val:\n                    if len(self.swapped_nodes) < 2:\n                        self.swapped_nodes.append(self.pre)\n                        self.swapped_nodes.append(root)\n                self.pre = root\n                inorder(root.right)"
    },
    {
        "number": 100,
        "title": "Same Tree",
        "difficulty": 0,
        "prompt": "class Solution:\n    def isSameTree(self, p: Optional[TreeNode], q: Optional[TreeNode]) -> bool:\n        \"\"\"\n        Given the roots of two binary trees p and q, write a function to check if they are the same or not.\n        Two binary trees are considered the same if they are structurally identical, and the nodes have the same value.\n        Example 1:\n        Input: p = [1,2,3], q = [1,2,3]\n        Output: true\n        Example 2:\n        Input: p = [1,2], q = [1,null,2]\n        Output: false\n        Example 3:\n        Input: p = [1,2,1], q = [1,1,2]\n        Output: false\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        #iterative solution\n        stack = [(p, q)]\n        while stack:\n            p, q = stack.pop()\n            if not p and not q:\n                continue\n            elif not p or not q:\n                return False\n            elif p.val!= q.val:\n                return False\n            else:\n                stack.append((p.right, q.right))\n                stack.append((p.left, q.left))\n        return True\n    \n    def isSameTree_recursive(self, p: Optional[TreeNode], q: Optional[TreeNode]) -> bool:\n        \"\"\"\n        Given the roots of two binary trees p and q, write a function to check if they are the same or not.\n        Two binary trees are considered the same if they are structurally identical, and the nodes have the same value.\n        Example 1:\n        Input: p = [1,2,3], q = [1,2,3]\n        Output: true\n        Example 2:\n        Input: p = [1,2], q = [1,null,2]\n        Output: false\n        Example 3:\n        Input: p = [1,2,1], q = [1,1,2]\n        Output: false\n        \"\"\"\n        if not p and not q:\n            return"
    },
    {
        "number": 100,
        "title": "Same Tree",
        "difficulty": 0,
        "prompt": "class Solution:\n    def isSameTree(self, p: Optional[TreeNode], q: Optional[TreeNode]) -> bool:\n        \"\"\"\n        Given the roots of two binary trees p and q, write a function to check if they are the same or not.\n        Two binary trees are considered the same if they are structurally identical, and the nodes have the same value.\n        Example 1:\n        Input: p = [1,2,3], q = [1,2,3]\n        Output: true\n        Example 2:\n        Input: p = [1,2], q = [1,null,2]\n        Output: false\n        Example 3:\n        Input: p = [1,2,1], q = [1,1,2]\n        Output: false\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        if p is None and q is None:\n            return True\n        elif p is not None and q is not None:\n            return p.val == q.val and self.isSameTree(p.left, q.left) and self.isSameTree(p.right, q.right)\n        else:\n            return False\n<|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>"
    },
    {
        "number": 100,
        "title": "Same Tree",
        "difficulty": 0,
        "prompt": "class Solution:\n    def isSameTree(self, p: Optional[TreeNode], q: Optional[TreeNode]) -> bool:\n        \"\"\"\n        Given the roots of two binary trees p and q, write a function to check if they are the same or not.\n        Two binary trees are considered the same if they are structurally identical, and the nodes have the same value.\n        Example 1:\n        Input: p = [1,2,3], q = [1,2,3]\n        Output: true\n        Example 2:\n        Input: p = [1,2], q = [1,null,2]\n        Output: false\n        Example 3:\n        Input: p = [1,2,1], q = [1,1,2]\n        Output: false\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 3,
        "answer": "        if not p and not q:\n            return True\n        elif not q or not p:\n            return False\n        elif p.val!= q.val:\n            return False\n        else:\n            return self.isSameTree(p.left, q.left) and self.isSameTree(p.right, q.right)\n        # The following is O(NlogN) time complexity and O(logN) space complexity"
    },
    {
        "number": 100,
        "title": "Same Tree",
        "difficulty": 0,
        "prompt": "class Solution:\n    def isSameTree(self, p: Optional[TreeNode], q: Optional[TreeNode]) -> bool:\n        \"\"\"\n        Given the roots of two binary trees p and q, write a function to check if they are the same or not.\n        Two binary trees are considered the same if they are structurally identical, and the nodes have the same value.\n        Example 1:\n        Input: p = [1,2,3], q = [1,2,3]\n        Output: true\n        Example 2:\n        Input: p = [1,2], q = [1,null,2]\n        Output: false\n        Example 3:\n        Input: p = [1,2,1], q = [1,1,2]\n        Output: false\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 4,
        "answer": "        if not p and not q:\n            return True\n        elif not p or not q:\n            return False\n        elif p.val!= q.val:\n            return False\n        else:\n            return self.isSameTree(p.left, q.left) and self.isSameTree(p.right, q.right)\n<|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>"
    },
    {
        "number": 100,
        "title": "Same Tree",
        "difficulty": 0,
        "prompt": "class Solution:\n    def isSameTree(self, p: Optional[TreeNode], q: Optional[TreeNode]) -> bool:\n        \"\"\"\n        Given the roots of two binary trees p and q, write a function to check if they are the same or not.\n        Two binary trees are considered the same if they are structurally identical, and the nodes have the same value.\n        Example 1:\n        Input: p = [1,2,3], q = [1,2,3]\n        Output: true\n        Example 2:\n        Input: p = [1,2], q = [1,null,2]\n        Output: false\n        Example 3:\n        Input: p = [1,2,1], q = [1,1,2]\n        Output: false\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 5,
        "answer": "        if p and q:\n            return p.val == q.val and self.isSameTree(p.left, q.left) and self.isSameTree(p.right, q.right)\n        return p is q"
    },
    {
        "number": 101,
        "title": "Symmetric Tree",
        "difficulty": 0,
        "prompt": "class Solution:\n    def isSymmetric(self, root: Optional[TreeNode]) -> bool:\n        \"\"\"\n        Given the root of a binary tree, check whether it is a mirror of itself (i.e., symmetric around its center).\n        Example 1:\n        Input: root = [1,2,2,3,4,4,3]\n        Output: true\n        Example 2:\n        Input: root = [1,2,2,null,3,null,3]\n        Output: false\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        def dfs(left, right):\n            if not left and not right:\n                return True\n            if not left or not right or left.val!= right.val:\n                return False\n            return dfs(left.left, right.right) and dfs(left.right, right.left)\n        \n        return dfs(root.left, root.right) if root else True\n<|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>"
    },
    {
        "number": 101,
        "title": "Symmetric Tree",
        "difficulty": 0,
        "prompt": "class Solution:\n    def isSymmetric(self, root: Optional[TreeNode]) -> bool:\n        \"\"\"\n        Given the root of a binary tree, check whether it is a mirror of itself (i.e., symmetric around its center).\n        Example 1:\n        Input: root = [1,2,2,3,4,4,3]\n        Output: true\n        Example 2:\n        Input: root = [1,2,2,null,3,null,3]\n        Output: false\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        if not root:\n            return True\n        return self.is_symmetric(root.left, root.right)"
    },
    {
        "number": 101,
        "title": "Symmetric Tree",
        "difficulty": 0,
        "prompt": "class Solution:\n    def isSymmetric(self, root: Optional[TreeNode]) -> bool:\n        \"\"\"\n        Given the root of a binary tree, check whether it is a mirror of itself (i.e., symmetric around its center).\n        Example 1:\n        Input: root = [1,2,2,3,4,4,3]\n        Output: true\n        Example 2:\n        Input: root = [1,2,2,null,3,null,3]\n        Output: false\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 3,
        "answer": "        def traverse(root1, root2):\n            if root1 is None and root2 is None:\n                return True\n            if root1 is not None and root2 is not None:\n                if root1.val == root2.val:\n                    return traverse(root1.left, root2.right) and traverse(root1.right, root2.left)\n            return False\n        return traverse(root, root)"
    },
    {
        "number": 101,
        "title": "Symmetric Tree",
        "difficulty": 0,
        "prompt": "class Solution:\n    def isSymmetric(self, root: Optional[TreeNode]) -> bool:\n        \"\"\"\n        Given the root of a binary tree, check whether it is a mirror of itself (i.e., symmetric around its center).\n        Example 1:\n        Input: root = [1,2,2,3,4,4,3]\n        Output: true\n        Example 2:\n        Input: root = [1,2,2,null,3,null,3]\n        Output: false\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 4,
        "answer": "        if root is None:\n            return True"
    },
    {
        "number": 101,
        "title": "Symmetric Tree",
        "difficulty": 0,
        "prompt": "class Solution:\n    def isSymmetric(self, root: Optional[TreeNode]) -> bool:\n        \"\"\"\n        Given the root of a binary tree, check whether it is a mirror of itself (i.e., symmetric around its center).\n        Example 1:\n        Input: root = [1,2,2,3,4,4,3]\n        Output: true\n        Example 2:\n        Input: root = [1,2,2,null,3,null,3]\n        Output: false\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 5,
        "answer": "        if not root:\n            return True\n        return self.dfs(root.left, root.right)\n    \n    def dfs(self, left: Optional[TreeNode], right: Optional[TreeNode]) -> bool:\n        if not left or not right:\n            if left and not right:\n                return True\n            return False\n        if left.val!= right.val:\n            return False\n        return self.dfs(left.left, right.right) and self.dfs(left.right, right.left)<|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>"
    },
    {
        "number": 102,
        "title": "Binary Tree Level Order Traversal",
        "difficulty": 1,
        "prompt": "class Solution:\n    def levelOrder(self, root: Optional[TreeNode]) -> List[List[int]]:\n        \"\"\"\n        Given the root of a binary tree, return the level order traversal of its nodes' values. (i.e., from left to right, level by level).\n        Example 1:\n        Input: root = [3,9,20,null,null,15,7]\n        Output: [[3],[9,20],[15,7]]\n        Example 2:\n        Input: root = [1]\n        Output: [[1]]\n        Example 3:\n        Input: root = []\n        Output: []\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        res = []\n        def dfs(node, depth=0):\n            if not node:\n                return\n            if len(res) == depth:\n                res.append([])\n            res[depth].append(node.val)\n            dfs(node.left, depth + 1)\n            dfs(node.right, depth + 1)\n        dfs(root)\n        return res<|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>"
    },
    {
        "number": 102,
        "title": "Binary Tree Level Order Traversal",
        "difficulty": 1,
        "prompt": "class Solution:\n    def levelOrder(self, root: Optional[TreeNode]) -> List[List[int]]:\n        \"\"\"\n        Given the root of a binary tree, return the level order traversal of its nodes' values. (i.e., from left to right, level by level).\n        Example 1:\n        Input: root = [3,9,20,null,null,15,7]\n        Output: [[3],[9,20],[15,7]]\n        Example 2:\n        Input: root = [1]\n        Output: [[1]]\n        Example 3:\n        Input: root = []\n        Output: []\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        res = []\n        level = [root]\n        if not root:\n            return []\n        while level:\n            res.append([node.val for node in level])\n            temp = []\n            for node in level:\n                if node.left:\n                    temp.append(node.left)\n                if node.right:\n                    temp.append(node.right)\n            level = temp\n        return res<|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>"
    },
    {
        "number": 102,
        "title": "Binary Tree Level Order Traversal",
        "difficulty": 1,
        "prompt": "class Solution:\n    def levelOrder(self, root: Optional[TreeNode]) -> List[List[int]]:\n        \"\"\"\n        Given the root of a binary tree, return the level order traversal of its nodes' values. (i.e., from left to right, level by level).\n        Example 1:\n        Input: root = [3,9,20,null,null,15,7]\n        Output: [[3],[9,20],[15,7]]\n        Example 2:\n        Input: root = [1]\n        Output: [[1]]\n        Example 3:\n        Input: root = []\n        Output: []\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 3,
        "answer": "        res = []\n        if not root:\n            return []\n        queue = [root]\n        while queue:\n            res.append([node.val for node in queue])\n            queue = [child for node in queue for child in (node.left, node.right) if child]\n        return res"
    },
    {
        "number": 102,
        "title": "Binary Tree Level Order Traversal",
        "difficulty": 1,
        "prompt": "class Solution:\n    def levelOrder(self, root: Optional[TreeNode]) -> List[List[int]]:\n        \"\"\"\n        Given the root of a binary tree, return the level order traversal of its nodes' values. (i.e., from left to right, level by level).\n        Example 1:\n        Input: root = [3,9,20,null,null,15,7]\n        Output: [[3],[9,20],[15,7]]\n        Example 2:\n        Input: root = [1]\n        Output: [[1]]\n        Example 3:\n        Input: root = []\n        Output: []\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 4,
        "answer": "        ans = []\n        if not root:\n            return ans\n        queue = [root]\n        while queue:\n            temp = []\n            n_queue = []\n            for node in queue:\n                if node:\n                    temp.append(node.val)\n                    if node.left:\n                        n_queue.append(node.left)\n                    if node.right:\n                        n_queue.append(node.right)\n            ans.append(temp)\n            queue = n_queue\n        return ans"
    },
    {
        "number": 102,
        "title": "Binary Tree Level Order Traversal",
        "difficulty": 1,
        "prompt": "class Solution:\n    def levelOrder(self, root: Optional[TreeNode]) -> List[List[int]]:\n        \"\"\"\n        Given the root of a binary tree, return the level order traversal of its nodes' values. (i.e., from left to right, level by level).\n        Example 1:\n        Input: root = [3,9,20,null,null,15,7]\n        Output: [[3],[9,20],[15,7]]\n        Example 2:\n        Input: root = [1]\n        Output: [[1]]\n        Example 3:\n        Input: root = []\n        Output: []\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 5,
        "answer": "        res = []\n        if not root:\n            return res\n        q = collections.deque([root])\n        while q:\n            next_level = collections.deque()\n            n = len(q)\n            res.append([])\n            for _ in range(n):\n                node = q.popleft()\n                res[-1].append(node.val)\n                if node.left:\n                    next_level.append(node.left)\n                if node.right:\n                    next_level.append(node.right)\n            q = next_level\n        return res\n<|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>"
    },
    {
        "number": 103,
        "title": "Binary Tree Zigzag Level Order Traversal",
        "difficulty": 1,
        "prompt": "class Solution:\n    def zigzagLevelOrder(self, root: Optional[TreeNode]) -> List[List[int]]:\n        \"\"\"\n        Given the root of a binary tree, return the zigzag level order traversal of its nodes' values. (i.e., from left to right, then right to left for the next level and alternate between).\n        Example 1:\n        Input: root = [3,9,20,null,null,15,7]\n        Output: [[3],[20,9],[15,7]]\n        Example 2:\n        Input: root = [1]\n        Output: [[1]]\n        Example 3:\n        Input: root = []\n        Output: []\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        def helper(root):\n            if root is None:\n                return []\n            curr = [root]\n            next_layer = []\n            res = []\n            flag = 1\n            while len(curr) > 0:\n                layer_vals = []\n                for node in curr:\n                    layer_vals.append(node.val)\n                    if node.left:\n                        next_layer.append(node.left)\n                    if node.right:\n                        next_layer.append(node.right)\n                if flag == 1:\n                    res.append(layer_vals)\n                    flag = 0\n                else:\n                    res.append(layer_vals[::-1])\n                    flag = 1\n                curr = next_layer\n                next_layer = []\n            return res"
    },
    {
        "number": 103,
        "title": "Binary Tree Zigzag Level Order Traversal",
        "difficulty": 1,
        "prompt": "class Solution:\n    def zigzagLevelOrder(self, root: Optional[TreeNode]) -> List[List[int]]:\n        \"\"\"\n        Given the root of a binary tree, return the zigzag level order traversal of its nodes' values. (i.e., from left to right, then right to left for the next level and alternate between).\n        Example 1:\n        Input: root = [3,9,20,null,null,15,7]\n        Output: [[3],[20,9],[15,7]]\n        Example 2:\n        Input: root = [1]\n        Output: [[1]]\n        Example 3:\n        Input: root = []\n        Output: []\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        if not root:\n            return []\n        queue = [root]\n        res = []\n        while queue:\n            level = []\n            next_queue = []\n            for node in queue:\n                level.append(node.val)\n                if node.left:\n                    next_queue.append(node.left)\n                if node.right:\n                    next_queue.append(node.right)\n            queue = next_queue\n            if level:\n                res.append(level)\n        for i in range(len(res)):\n            if i % 2 == 0:\n                res[i] = res[i][::-1]\n        return res"
    },
    {
        "number": 103,
        "title": "Binary Tree Zigzag Level Order Traversal",
        "difficulty": 1,
        "prompt": "class Solution:\n    def zigzagLevelOrder(self, root: Optional[TreeNode]) -> List[List[int]]:\n        \"\"\"\n        Given the root of a binary tree, return the zigzag level order traversal of its nodes' values. (i.e., from left to right, then right to left for the next level and alternate between).\n        Example 1:\n        Input: root = [3,9,20,null,null,15,7]\n        Output: [[3],[20,9],[15,7]]\n        Example 2:\n        Input: root = [1]\n        Output: [[1]]\n        Example 3:\n        Input: root = []\n        Output: []\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 3,
        "answer": "        if not root:\n            return []\n        \n        queue = [root]\n        level = 0\n        output = []\n        \n        while queue:\n            if level % 2 == 0:\n                output.append([node.val for node in queue])\n            else:\n                output.append([node.val for node in queue[::-1]])\n            \n            new_queue = []\n            for node in queue:\n                if node.left:\n                    new_queue.append(node.left)\n                if node.right:\n                    new_queue.append(node.right)\n            queue = new_queue\n            level += 1\n            \n        return output"
    },
    {
        "number": 103,
        "title": "Binary Tree Zigzag Level Order Traversal",
        "difficulty": 1,
        "prompt": "class Solution:\n    def zigzagLevelOrder(self, root: Optional[TreeNode]) -> List[List[int]]:\n        \"\"\"\n        Given the root of a binary tree, return the zigzag level order traversal of its nodes' values. (i.e., from left to right, then right to left for the next level and alternate between).\n        Example 1:\n        Input: root = [3,9,20,null,null,15,7]\n        Output: [[3],[20,9],[15,7]]\n        Example 2:\n        Input: root = [1]\n        Output: [[1]]\n        Example 3:\n        Input: root = []\n        Output: []\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 4,
        "answer": "        if not root:\n            return []\n        res = []\n        queue = [root]\n        curr_level = []\n        while queue:\n            for i in range(len(queue)):\n                curr = queue.pop(0)\n                curr_level.append(curr.val)\n                if curr.left:\n                    queue.append(curr.left)\n                if curr.right:\n                    queue.append(curr.right)\n            res.append(curr_level)\n            curr_level = []\n        for i in range(len(res)):\n            if i % 2 == 0:\n                res[i].reverse()\n        return res"
    },
    {
        "number": 103,
        "title": "Binary Tree Zigzag Level Order Traversal",
        "difficulty": 1,
        "prompt": "class Solution:\n    def zigzagLevelOrder(self, root: Optional[TreeNode]) -> List[List[int]]:\n        \"\"\"\n        Given the root of a binary tree, return the zigzag level order traversal of its nodes' values. (i.e., from left to right, then right to left for the next level and alternate between).\n        Example 1:\n        Input: root = [3,9,20,null,null,15,7]\n        Output: [[3],[20,9],[15,7]]\n        Example 2:\n        Input: root = [1]\n        Output: [[1]]\n        Example 3:\n        Input: root = []\n        Output: []\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 5,
        "answer": "        if not root:\n            return []\n        cur = [root]\n        result = []\n        while cur:\n            # print(cur)\n            temp = []\n            next_level = []\n            for node in cur:\n                if node.left:\n                    temp.append(node.left)\n                if node.right:\n                    temp.append(node.right)\n                if node.left and node.right:\n                    next_level.append(node.left)\n                    next_level.append(node.right)\n            cur = next_level\n            if temp:\n                result.append(temp)\n        # print(result)\n        for i in range(len(result)):\n            if i % 2 == 1:\n                result[i] = result[i][::-1]\n        return result"
    },
    {
        "number": 104,
        "title": "Maximum Depth of Binary Tree",
        "difficulty": 0,
        "prompt": "class Solution:\n    def maxDepth(self, root: Optional[TreeNode]) -> int:\n        \"\"\"\n        Given the root of a binary tree, return its maximum depth.\n        A binary tree's maximum depth is the number of nodes along the longest path from the root node down to the farthest leaf node.\n        Example 1:\n        Input: root = [3,9,20,null,null,15,7]\n        Output: 3\n        Example 2:\n        Input: root = [1,null,2]\n        Output: 2\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        if not root:\n            return 0\n        if not root.left and not root.right:\n            return 1\n        left = self.maxDepth(root.left)\n        right = self.maxDepth(root.right)\n        return max(left, right) + 1"
    },
    {
        "number": 104,
        "title": "Maximum Depth of Binary Tree",
        "difficulty": 0,
        "prompt": "class Solution:\n    def maxDepth(self, root: Optional[TreeNode]) -> int:\n        \"\"\"\n        Given the root of a binary tree, return its maximum depth.\n        A binary tree's maximum depth is the number of nodes along the longest path from the root node down to the farthest leaf node.\n        Example 1:\n        Input: root = [3,9,20,null,null,15,7]\n        Output: 3\n        Example 2:\n        Input: root = [1,null,2]\n        Output: 2\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        # Depth-first Search\n        if not root:\n            return 0\n        return 1 + max(self.maxDepth(root.left), self.maxDepth(root.right))"
    },
    {
        "number": 104,
        "title": "Maximum Depth of Binary Tree",
        "difficulty": 0,
        "prompt": "class Solution:\n    def maxDepth(self, root: Optional[TreeNode]) -> int:\n        \"\"\"\n        Given the root of a binary tree, return its maximum depth.\n        A binary tree's maximum depth is the number of nodes along the longest path from the root node down to the farthest leaf node.\n        Example 1:\n        Input: root = [3,9,20,null,null,15,7]\n        Output: 3\n        Example 2:\n        Input: root = [1,null,2]\n        Output: 2\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 3,
        "answer": "        if not root:\n            return 0\n        return 1 + max(self.maxDepth(root.left), self.maxDepth(root.right))"
    },
    {
        "number": 104,
        "title": "Maximum Depth of Binary Tree",
        "difficulty": 0,
        "prompt": "class Solution:\n    def maxDepth(self, root: Optional[TreeNode]) -> int:\n        \"\"\"\n        Given the root of a binary tree, return its maximum depth.\n        A binary tree's maximum depth is the number of nodes along the longest path from the root node down to the farthest leaf node.\n        Example 1:\n        Input: root = [3,9,20,null,null,15,7]\n        Output: 3\n        Example 2:\n        Input: root = [1,null,2]\n        Output: 2\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 4,
        "answer": "        # we need to start our recursion from the root node, and then move down to the leaf nodes\n        if not root:\n            return 0\n        \n        # call our helper function recursively\n        return 1 + max(self.maxDepth(root.left), self.maxDepth(root.right))\n        \n        # O(n) time complexity, where n is the number of nodes in the tree\n        # O(h) space complexity, where h is the height of the tree\n<|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>"
    },
    {
        "number": 104,
        "title": "Maximum Depth of Binary Tree",
        "difficulty": 0,
        "prompt": "class Solution:\n    def maxDepth(self, root: Optional[TreeNode]) -> int:\n        \"\"\"\n        Given the root of a binary tree, return its maximum depth.\n        A binary tree's maximum depth is the number of nodes along the longest path from the root node down to the farthest leaf node.\n        Example 1:\n        Input: root = [3,9,20,null,null,15,7]\n        Output: 3\n        Example 2:\n        Input: root = [1,null,2]\n        Output: 2\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 5,
        "answer": "        if not root:\n            return 0\n        return 1 + max(self.maxDepth(root.left), self.maxDepth(root.right))<|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>"
    },
    {
        "number": 105,
        "title": "Construct Binary Tree from Preorder and Inorder Traversal",
        "difficulty": 1,
        "prompt": "class Solution:\n    def buildTree(self, preorder: List[int], inorder: List[int]) -> Optional[TreeNode]:\n        \"\"\"\n        Given two integer arrays preorder and inorder where preorder is the preorder traversal of a binary tree and inorder is the inorder traversal of the same tree, construct and return the binary tree.\n        Example 1:\n        Input: preorder = [3,9,20,15,7], inorder = [9,3,15,20,7]\n        Output: [3,9,20,null,null,15,7]\n        Example 2:\n        Input: preorder = [-1], inorder = [-1]\n        Output: [-1]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        if not preorder:\n            return None\n        root = TreeNode(preorder[0])\n        i = inorder.index(preorder[0])\n        root.left = self.buildTree(preorder[1:i+1], inorder[:i])\n        root.right = self.buildTree(preorder[i+1:], inorder[i+1:])\n        return root"
    },
    {
        "number": 105,
        "title": "Construct Binary Tree from Preorder and Inorder Traversal",
        "difficulty": 1,
        "prompt": "class Solution:\n    def buildTree(self, preorder: List[int], inorder: List[int]) -> Optional[TreeNode]:\n        \"\"\"\n        Given two integer arrays preorder and inorder where preorder is the preorder traversal of a binary tree and inorder is the inorder traversal of the same tree, construct and return the binary tree.\n        Example 1:\n        Input: preorder = [3,9,20,15,7], inorder = [9,3,15,20,7]\n        Output: [3,9,20,null,null,15,7]\n        Example 2:\n        Input: preorder = [-1], inorder = [-1]\n        Output: [-1]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        if not preorder: return None\n        root = TreeNode(preorder[0])\n        i = inorder.index(preorder[0])\n        root.left = self.buildTree(preorder[1:i+1], inorder[:i])\n        root.right = self.buildTree(preorder[i+1:], inorder[i+1:])\n        return root"
    },
    {
        "number": 105,
        "title": "Construct Binary Tree from Preorder and Inorder Traversal",
        "difficulty": 1,
        "prompt": "class Solution:\n    def buildTree(self, preorder: List[int], inorder: List[int]) -> Optional[TreeNode]:\n        \"\"\"\n        Given two integer arrays preorder and inorder where preorder is the preorder traversal of a binary tree and inorder is the inorder traversal of the same tree, construct and return the binary tree.\n        Example 1:\n        Input: preorder = [3,9,20,15,7], inorder = [9,3,15,20,7]\n        Output: [3,9,20,null,null,15,7]\n        Example 2:\n        Input: preorder = [-1], inorder = [-1]\n        Output: [-1]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 3,
        "answer": "        if len(preorder) == 0: return None\n        if len(preorder) == 1: return TreeNode(preorder[0])"
    },
    {
        "number": 105,
        "title": "Construct Binary Tree from Preorder and Inorder Traversal",
        "difficulty": 1,
        "prompt": "class Solution:\n    def buildTree(self, preorder: List[int], inorder: List[int]) -> Optional[TreeNode]:\n        \"\"\"\n        Given two integer arrays preorder and inorder where preorder is the preorder traversal of a binary tree and inorder is the inorder traversal of the same tree, construct and return the binary tree.\n        Example 1:\n        Input: preorder = [3,9,20,15,7], inorder = [9,3,15,20,7]\n        Output: [3,9,20,null,null,15,7]\n        Example 2:\n        Input: preorder = [-1], inorder = [-1]\n        Output: [-1]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 4,
        "answer": "        def func(preorder, inorder):\n            if not inorder:\n                return None\n            root_val = preorder[0]\n            root = TreeNode(root_val)\n            root_index = inorder.index(root_val)\n            root.left = func(preorder[1:root_index+1], inorder[:root_index])\n            root.right = func(preorder[root_index+1:], inorder[root_index+1:])\n            return root\n        return func(preorder, inorder)\n    \n    def buildTree1(self, preorder: List[int], inorder: List[int]) -> TreeNode:\n        \"\"\"\n        Given two integer arrays preorder and inorder where preorder is the preorder traversal of a binary tree and inorder is the inorder traversal of the same tree, construct and return the binary tree.\n        Example 1:\n        Input: preorder = [3,9,20,15,7], inorder = [9,3,15,20,7]\n        Output: [3,9,20,null,null,15,7]\n        Example 2:\n        Input: preorder = [-1], inorder = [-1]\n        Output: [-1]\n        \"\"\"\n        if not preorder: return"
    },
    {
        "number": 105,
        "title": "Construct Binary Tree from Preorder and Inorder Traversal",
        "difficulty": 1,
        "prompt": "class Solution:\n    def buildTree(self, preorder: List[int], inorder: List[int]) -> Optional[TreeNode]:\n        \"\"\"\n        Given two integer arrays preorder and inorder where preorder is the preorder traversal of a binary tree and inorder is the inorder traversal of the same tree, construct and return the binary tree.\n        Example 1:\n        Input: preorder = [3,9,20,15,7], inorder = [9,3,15,20,7]\n        Output: [3,9,20,null,null,15,7]\n        Example 2:\n        Input: preorder = [-1], inorder = [-1]\n        Output: [-1]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 5,
        "answer": "        if not preorder or not inorder:\n            return None\n        root = TreeNode(preorder[0])\n        index = inorder.index(preorder[0])\n        root.left = self.buildTree(preorder[1:index+1], inorder[:index])\n        root.right = self.buildTree(preorder[index+1:], inorder[index+1:])\n        return root"
    },
    {
        "number": 106,
        "title": "Construct Binary Tree from Inorder and Postorder Traversal",
        "difficulty": 1,
        "prompt": "class Solution:\n    def buildTree(self, inorder: List[int], postorder: List[int]) -> Optional[TreeNode]:\n        \"\"\"\n        Given two integer arrays inorder and postorder where inorder is the inorder traversal of a binary tree and postorder is the postorder traversal of the same tree, construct and return the binary tree.\n        Example 1:\n        Input: inorder = [9,3,15,20,7], postorder = [9,15,7,20,3]\n        Output: [3,9,20,null,null,15,7]\n        Example 2:\n        Input: inorder = [-1], postorder = [-1]\n        Output: [-1]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        # Edge case\n        if not inorder or not postorder:\n            return None\n        # root node\n        root = TreeNode(postorder.pop())\n        # index in inorder list\n        index = inorder.index(root.val)"
    },
    {
        "number": 106,
        "title": "Construct Binary Tree from Inorder and Postorder Traversal",
        "difficulty": 1,
        "prompt": "class Solution:\n    def buildTree(self, inorder: List[int], postorder: List[int]) -> Optional[TreeNode]:\n        \"\"\"\n        Given two integer arrays inorder and postorder where inorder is the inorder traversal of a binary tree and postorder is the postorder traversal of the same tree, construct and return the binary tree.\n        Example 1:\n        Input: inorder = [9,3,15,20,7], postorder = [9,15,7,20,3]\n        Output: [3,9,20,null,null,15,7]\n        Example 2:\n        Input: inorder = [-1], postorder = [-1]\n        Output: [-1]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        # postorder array is of length n - 1.\n        # If postorder array has one element, it is the root of the tree.\n        if not inorder:\n            return None\n        if len(inorder) == 1:\n            return TreeNode(inorder[0])\n        \n        # split the arrays into two halfs.\n        root = TreeNode(postorder[-1])\n        mid = inorder.index(postorder[-1])\n        root.left = self.buildTree(inorder[0:mid], postorder[0:mid])\n        root.right = self.buildTree(inorder[mid+1:], postorder[mid:-1])\n        return root\n        <|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>"
    },
    {
        "number": 106,
        "title": "Construct Binary Tree from Inorder and Postorder Traversal",
        "difficulty": 1,
        "prompt": "class Solution:\n    def buildTree(self, inorder: List[int], postorder: List[int]) -> Optional[TreeNode]:\n        \"\"\"\n        Given two integer arrays inorder and postorder where inorder is the inorder traversal of a binary tree and postorder is the postorder traversal of the same tree, construct and return the binary tree.\n        Example 1:\n        Input: inorder = [9,3,15,20,7], postorder = [9,15,7,20,3]\n        Output: [3,9,20,null,null,15,7]\n        Example 2:\n        Input: inorder = [-1], postorder = [-1]\n        Output: [-1]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 3,
        "answer": "        if not inorder or not postorder:\n            return None\n        root = TreeNode(postorder[-1])\n        i = inorder.index(postorder[-1])\n        root.left = self.buildTree(inorder[:i], postorder[:i])\n        root.right = self.buildTree(inorder[i+1:], postorder[i:-1])\n        return root<|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>"
    },
    {
        "number": 106,
        "title": "Construct Binary Tree from Inorder and Postorder Traversal",
        "difficulty": 1,
        "prompt": "class Solution:\n    def buildTree(self, inorder: List[int], postorder: List[int]) -> Optional[TreeNode]:\n        \"\"\"\n        Given two integer arrays inorder and postorder where inorder is the inorder traversal of a binary tree and postorder is the postorder traversal of the same tree, construct and return the binary tree.\n        Example 1:\n        Input: inorder = [9,3,15,20,7], postorder = [9,15,7,20,3]\n        Output: [3,9,20,null,null,15,7]\n        Example 2:\n        Input: inorder = [-1], postorder = [-1]\n        Output: [-1]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 4,
        "answer": "        # base case\n        if not postorder:\n            return None\n        if len(postorder) == 1:\n            return TreeNode(postorder[0])\n        \n        # get root\n        root_val = postorder[-1]\n        root_index = inorder.index(root_val)\n        \n        # recursion\n        root = TreeNode(root_val)\n        root.left = self.buildTree(inorder[:root_index], postorder[:root_index])\n        root.right = self.buildTree(inorder[root_index+1:], postorder[root_index:-1])\n        \n        return root\n    \n    def buildTree(self, inorder: List[int], postorder: List[int]) -> Optional[TreeNode]:\n        \"\"\"\n        Given two integer arrays inorder and postorder where inorder is the inorder traversal of a binary tree and postorder is the postorder traversal of the same tree, construct and return the binary tree.\n        Example 1:\n        Input: inorder = [9,3,15,20,7], postorder = [9,15,7,20,3]\n        Output: [3,9,20,null,null,15,7]\n        Example 2:\n        Input: inorder = [-1"
    },
    {
        "number": 106,
        "title": "Construct Binary Tree from Inorder and Postorder Traversal",
        "difficulty": 1,
        "prompt": "class Solution:\n    def buildTree(self, inorder: List[int], postorder: List[int]) -> Optional[TreeNode]:\n        \"\"\"\n        Given two integer arrays inorder and postorder where inorder is the inorder traversal of a binary tree and postorder is the postorder traversal of the same tree, construct and return the binary tree.\n        Example 1:\n        Input: inorder = [9,3,15,20,7], postorder = [9,15,7,20,3]\n        Output: [3,9,20,null,null,15,7]\n        Example 2:\n        Input: inorder = [-1], postorder = [-1]\n        Output: [-1]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 5,
        "answer": "        if not inorder or not postorder:\n            return None\n        root = TreeNode(postorder.pop())\n        mid = inorder.index(root.val)\n        root.right = self.buildTree(inorder[mid+1:], postorder)\n        root.left = self.buildTree(inorder[:mid], postorder)\n        return root"
    },
    {
        "number": 107,
        "title": "Binary Tree Level Order Traversal II",
        "difficulty": 1,
        "prompt": "class Solution:\n    def levelOrderBottom(self, root: Optional[TreeNode]) -> List[List[int]]:\n        \"\"\"\n        Given the root of a binary tree, return the bottom-up level order traversal of its nodes' values. (i.e., from left to right, level by level from leaf to root).\n        Example 1:\n        Input: root = [3,9,20,null,null,15,7]\n        Output: [[15,7],[9,20],[3]]\n        Example 2:\n        Input: root = [1]\n        Output: [[1]]\n        Example 3:\n        Input: root = []\n        Output: []\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        result = []\n        if root is None:\n            return result"
    },
    {
        "number": 107,
        "title": "Binary Tree Level Order Traversal II",
        "difficulty": 1,
        "prompt": "class Solution:\n    def levelOrderBottom(self, root: Optional[TreeNode]) -> List[List[int]]:\n        \"\"\"\n        Given the root of a binary tree, return the bottom-up level order traversal of its nodes' values. (i.e., from left to right, level by level from leaf to root).\n        Example 1:\n        Input: root = [3,9,20,null,null,15,7]\n        Output: [[15,7],[9,20],[3]]\n        Example 2:\n        Input: root = [1]\n        Output: [[1]]\n        Example 3:\n        Input: root = []\n        Output: []\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        res = []\n        queue = [root]\n        while queue:\n            nodes = []\n            for i in range(len(queue)):\n                node = queue.pop(0)\n                if node:\n                    nodes.append(node.val)\n                    queue.append(node.left)\n                    queue.append(node.right)\n            if nodes:\n                res.insert(0, nodes)\n        return res\n<|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>"
    },
    {
        "number": 107,
        "title": "Binary Tree Level Order Traversal II",
        "difficulty": 1,
        "prompt": "class Solution:\n    def levelOrderBottom(self, root: Optional[TreeNode]) -> List[List[int]]:\n        \"\"\"\n        Given the root of a binary tree, return the bottom-up level order traversal of its nodes' values. (i.e., from left to right, level by level from leaf to root).\n        Example 1:\n        Input: root = [3,9,20,null,null,15,7]\n        Output: [[15,7],[9,20],[3]]\n        Example 2:\n        Input: root = [1]\n        Output: [[1]]\n        Example 3:\n        Input: root = []\n        Output: []\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 3,
        "answer": "        if not root:\n            return []"
    },
    {
        "number": 107,
        "title": "Binary Tree Level Order Traversal II",
        "difficulty": 1,
        "prompt": "class Solution:\n    def levelOrderBottom(self, root: Optional[TreeNode]) -> List[List[int]]:\n        \"\"\"\n        Given the root of a binary tree, return the bottom-up level order traversal of its nodes' values. (i.e., from left to right, level by level from leaf to root).\n        Example 1:\n        Input: root = [3,9,20,null,null,15,7]\n        Output: [[15,7],[9,20],[3]]\n        Example 2:\n        Input: root = [1]\n        Output: [[1]]\n        Example 3:\n        Input: root = []\n        Output: []\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 4,
        "answer": "        if not root:\n            return []\n        queue = deque()\n        res = []\n        queue.append(root)\n        while queue:\n            cur_level, cur_len = [], len(queue)\n            for _ in range(cur_len):\n                node = queue.popleft()\n                cur_level.append(node.val)\n                if node.left:\n                    queue.append(node.left)\n                if node.right:\n                    queue.append(node.right)\n            res.append(cur_level)\n        return res[::-1]\n        <|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>"
    },
    {
        "number": 107,
        "title": "Binary Tree Level Order Traversal II",
        "difficulty": 1,
        "prompt": "class Solution:\n    def levelOrderBottom(self, root: Optional[TreeNode]) -> List[List[int]]:\n        \"\"\"\n        Given the root of a binary tree, return the bottom-up level order traversal of its nodes' values. (i.e., from left to right, level by level from leaf to root).\n        Example 1:\n        Input: root = [3,9,20,null,null,15,7]\n        Output: [[15,7],[9,20],[3]]\n        Example 2:\n        Input: root = [1]\n        Output: [[1]]\n        Example 3:\n        Input: root = []\n        Output: []\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 5,
        "answer": "        if not root:\n            return []\n        # the returned level order traversal will be reversed\n        return self.helper(root, 0)"
    },
    {
        "number": 108,
        "title": "Convert Sorted Array to Binary Search Tree",
        "difficulty": 0,
        "prompt": "class Solution:\n    def sortedArrayToBST(self, nums: List[int]) -> Optional[TreeNode]:\n        \"\"\"\n        Given an integer array nums where the elements are sorted in ascending order, convert it to a height-balanced binary search tree.\n        Example 1:\n        Input: nums = [-10,-3,0,5,9]\n        Output: [0,-3,9,-10,null,5]\n        Explanation: [0,-10,5,null,-3,null,9] is also accepted:\n        Example 2:\n        Input: nums = [1,3]\n        Output: [3,1]\n        Explanation: [1,null,3] and [3,1] are both height-balanced BSTs.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        \n        # Inorder traversal solution:\n        \"\"\"\n        root = self.bstFromPreorder(nums)\n        self.inOrder(root)\n        print()\n        return root\n        \"\"\"\n        \n        # Postorder traversal solution:\n        \"\"\"\n        root = self.bstFromPostorder(nums)\n        self.inOrder(root)\n        print()\n        return root\n        \"\"\"\n        \n        # Mid-order traversal solution:\n        \"\"\"\n        root = self.bstFromMidorder(nums)\n        self.inOrder(root)\n        print()\n        return root\n        \"\"\"\n        \n        # Creating a tree using preorder and inorder traversals:\n        root = self.treeFromPreInorder(nums)\n        self.inOrder(root)\n        print()\n        return root\n    \n    def bstFromPreorder(self, nums):\n        \"\"\"\n        Given preorder traversal for a binary search tree, construct the binary search tree.\n        \"\"\"\n        \n        if len(nums) == 0:\n            return None\n        \n        root = TreeNode(nums[0])\n        \n        for i in range(1, len(nums)):\n            \n            # root will always be the first element in the pre"
    },
    {
        "number": 108,
        "title": "Convert Sorted Array to Binary Search Tree",
        "difficulty": 0,
        "prompt": "class Solution:\n    def sortedArrayToBST(self, nums: List[int]) -> Optional[TreeNode]:\n        \"\"\"\n        Given an integer array nums where the elements are sorted in ascending order, convert it to a height-balanced binary search tree.\n        Example 1:\n        Input: nums = [-10,-3,0,5,9]\n        Output: [0,-3,9,-10,null,5]\n        Explanation: [0,-10,5,null,-3,null,9] is also accepted:\n        Example 2:\n        Input: nums = [1,3]\n        Output: [3,1]\n        Explanation: [1,null,3] and [3,1] are both height-balanced BSTs.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        if not nums:\n            return None\n        \n        mid = len(nums) // 2\n        \n        root = TreeNode(nums[mid])\n        root.left = self.sortedArrayToBST(nums[:mid])\n        root.right = self.sortedArrayToBST(nums[mid+1:])\n        \n        return root<|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>"
    },
    {
        "number": 108,
        "title": "Convert Sorted Array to Binary Search Tree",
        "difficulty": 0,
        "prompt": "class Solution:\n    def sortedArrayToBST(self, nums: List[int]) -> Optional[TreeNode]:\n        \"\"\"\n        Given an integer array nums where the elements are sorted in ascending order, convert it to a height-balanced binary search tree.\n        Example 1:\n        Input: nums = [-10,-3,0,5,9]\n        Output: [0,-3,9,-10,null,5]\n        Explanation: [0,-10,5,null,-3,null,9] is also accepted:\n        Example 2:\n        Input: nums = [1,3]\n        Output: [3,1]\n        Explanation: [1,null,3] and [3,1] are both height-balanced BSTs.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 3,
        "answer": "        if not nums:\n            return None\n        mid = len(nums)//2\n        node = TreeNode(nums[mid])\n        node.left = self.sortedArrayToBST(nums[:mid])\n        node.right = self.sortedArrayToBST(nums[mid+1:])\n        return node\n<|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>"
    },
    {
        "number": 108,
        "title": "Convert Sorted Array to Binary Search Tree",
        "difficulty": 0,
        "prompt": "class Solution:\n    def sortedArrayToBST(self, nums: List[int]) -> Optional[TreeNode]:\n        \"\"\"\n        Given an integer array nums where the elements are sorted in ascending order, convert it to a height-balanced binary search tree.\n        Example 1:\n        Input: nums = [-10,-3,0,5,9]\n        Output: [0,-3,9,-10,null,5]\n        Explanation: [0,-10,5,null,-3,null,9] is also accepted:\n        Example 2:\n        Input: nums = [1,3]\n        Output: [3,1]\n        Explanation: [1,null,3] and [3,1] are both height-balanced BSTs.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 4,
        "answer": "        if not nums:\n            return None\n        mid = len(nums) // 2\n        root = TreeNode(nums[mid])\n        root.left = self.sortedArrayToBST(nums[:mid])\n        root.right = self.sortedArrayToBST(nums[mid+1:])\n        return root"
    },
    {
        "number": 108,
        "title": "Convert Sorted Array to Binary Search Tree",
        "difficulty": 0,
        "prompt": "class Solution:\n    def sortedArrayToBST(self, nums: List[int]) -> Optional[TreeNode]:\n        \"\"\"\n        Given an integer array nums where the elements are sorted in ascending order, convert it to a height-balanced binary search tree.\n        Example 1:\n        Input: nums = [-10,-3,0,5,9]\n        Output: [0,-3,9,-10,null,5]\n        Explanation: [0,-10,5,null,-3,null,9] is also accepted:\n        Example 2:\n        Input: nums = [1,3]\n        Output: [3,1]\n        Explanation: [1,null,3] and [3,1] are both height-balanced BSTs.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 5,
        "answer": "        \n        def helper(left,right):\n            if left>right:\n                return None\n            \n            mid = (left+right)//2\n            root = TreeNode(nums[mid])\n            root.left = helper(left,mid-1)\n            root.right = helper(mid+1,right)\n            return root\n        \n        return helper(0,len(nums)-1)\n<|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>"
    },
    {
        "number": 109,
        "title": "Convert Sorted List to Binary Search Tree",
        "difficulty": 1,
        "prompt": "class Solution:\n    def sortedListToBST(self, head: Optional[ListNode]) -> Optional[TreeNode]:\n        \"\"\"\n        Given the head of a singly linked list where elements are sorted in ascending order, convert it to a height-balanced binary search tree.\n        Example 1:\n        Input: head = [-10,-3,0,5,9]\n        Output: [0,-3,9,-10,null,5]\n        Explanation: One possible answer is [0,-3,9,-10,null,5], which represents the shown height balanced BST.\n        Example 2:\n        Input: head = []\n        Output: []\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        arr = []\n        while head:\n            arr.append(head.val)\n            head = head.next\n        return self.convert(arr, 0, len(arr)-1)\n    \n    def convert(self, arr, l, r):\n        if l > r:\n            return None\n        mid = (l+r) // 2\n        root = TreeNode(arr[mid])\n        root.left = self.convert(arr, l, mid - 1)\n        root.right = self.convert(arr, mid + 1, r)\n        return root"
    },
    {
        "number": 109,
        "title": "Convert Sorted List to Binary Search Tree",
        "difficulty": 1,
        "prompt": "class Solution:\n    def sortedListToBST(self, head: Optional[ListNode]) -> Optional[TreeNode]:\n        \"\"\"\n        Given the head of a singly linked list where elements are sorted in ascending order, convert it to a height-balanced binary search tree.\n        Example 1:\n        Input: head = [-10,-3,0,5,9]\n        Output: [0,-3,9,-10,null,5]\n        Explanation: One possible answer is [0,-3,9,-10,null,5], which represents the shown height balanced BST.\n        Example 2:\n        Input: head = []\n        Output: []\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        # approach 1: brute force\n        # TC: O(n), SC: O(1)\n        if not head:\n            return None"
    },
    {
        "number": 109,
        "title": "Convert Sorted List to Binary Search Tree",
        "difficulty": 1,
        "prompt": "class Solution:\n    def sortedListToBST(self, head: Optional[ListNode]) -> Optional[TreeNode]:\n        \"\"\"\n        Given the head of a singly linked list where elements are sorted in ascending order, convert it to a height-balanced binary search tree.\n        Example 1:\n        Input: head = [-10,-3,0,5,9]\n        Output: [0,-3,9,-10,null,5]\n        Explanation: One possible answer is [0,-3,9,-10,null,5], which represents the shown height balanced BST.\n        Example 2:\n        Input: head = []\n        Output: []\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 3,
        "answer": "        if not head:\n            return None\n        if not head.next:\n            return TreeNode(head.val)"
    },
    {
        "number": 109,
        "title": "Convert Sorted List to Binary Search Tree",
        "difficulty": 1,
        "prompt": "class Solution:\n    def sortedListToBST(self, head: Optional[ListNode]) -> Optional[TreeNode]:\n        \"\"\"\n        Given the head of a singly linked list where elements are sorted in ascending order, convert it to a height-balanced binary search tree.\n        Example 1:\n        Input: head = [-10,-3,0,5,9]\n        Output: [0,-3,9,-10,null,5]\n        Explanation: One possible answer is [0,-3,9,-10,null,5], which represents the shown height balanced BST.\n        Example 2:\n        Input: head = []\n        Output: []\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 4,
        "answer": "        if not head:\n            return None\n        if not head.next:\n            return TreeNode(head.val)"
    },
    {
        "number": 109,
        "title": "Convert Sorted List to Binary Search Tree",
        "difficulty": 1,
        "prompt": "class Solution:\n    def sortedListToBST(self, head: Optional[ListNode]) -> Optional[TreeNode]:\n        \"\"\"\n        Given the head of a singly linked list where elements are sorted in ascending order, convert it to a height-balanced binary search tree.\n        Example 1:\n        Input: head = [-10,-3,0,5,9]\n        Output: [0,-3,9,-10,null,5]\n        Explanation: One possible answer is [0,-3,9,-10,null,5], which represents the shown height balanced BST.\n        Example 2:\n        Input: head = []\n        Output: []\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 5,
        "answer": "        if not head: return None\n        \n        slow = fast = head\n        while fast.next and fast.next.next:\n            slow = slow.next\n            fast = fast.next.next\n            \n        root = TreeNode(slow.val)\n        \n        root.left = self.sortedListToBST(head)\n        root.right = self.sortedListToBST(slow.next)\n        \n        return root\n    \n    def sortedListToBST(self, head: Optional[ListNode]) -> Optional[TreeNode]:\n        if not head: return None\n        if not head.next: return TreeNode(head.val)\n        \n        # find mid\n        dummy = ListNode(-1)\n        dummy.next = head\n        slow = fast = dummy\n        while fast.next and fast.next.next:\n            slow = slow.next\n            fast = fast.next.next\n            \n        # cut the left half\n        left = dummy.next\n        dummy.next = None\n        \n        # cut the right half\n        right = slow.next\n        slow.next = None\n        \n        # cut the middle\n        root = TreeNode(right.val)\n        root.left = self.sortedListToBST(left)\n        root."
    },
    {
        "number": 110,
        "title": "Balanced Binary Tree",
        "difficulty": 0,
        "prompt": "class Solution:\n    def isBalanced(self, root: Optional[TreeNode]) -> bool:\n        \"\"\"\n        Given a binary tree, determine if it is height-balanced.\n        Example 1:\n        Input: root = [3,9,20,null,null,15,7]\n        Output: true\n        Example 2:\n        Input: root = [1,2,2,3,3,null,null,4,4]\n        Output: false\n        Example 3:\n        Input: root = []\n        Output: true\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        def get_height(root):\n            if root is None:\n                return 0\n            return 1 + max(get_height(root.left), get_height(root.right))"
    },
    {
        "number": 110,
        "title": "Balanced Binary Tree",
        "difficulty": 0,
        "prompt": "class Solution:\n    def isBalanced(self, root: Optional[TreeNode]) -> bool:\n        \"\"\"\n        Given a binary tree, determine if it is height-balanced.\n        Example 1:\n        Input: root = [3,9,20,null,null,15,7]\n        Output: true\n        Example 2:\n        Input: root = [1,2,2,3,3,null,null,4,4]\n        Output: false\n        Example 3:\n        Input: root = []\n        Output: true\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        def height(node):\n            \"\"\"\n            return the max depth of the tree\n            \"\"\"\n            if not node:\n                return 0\n            return max(height(node.left), height(node.right)) + 1"
    },
    {
        "number": 110,
        "title": "Balanced Binary Tree",
        "difficulty": 0,
        "prompt": "class Solution:\n    def isBalanced(self, root: Optional[TreeNode]) -> bool:\n        \"\"\"\n        Given a binary tree, determine if it is height-balanced.\n        Example 1:\n        Input: root = [3,9,20,null,null,15,7]\n        Output: true\n        Example 2:\n        Input: root = [1,2,2,3,3,null,null,4,4]\n        Output: false\n        Example 3:\n        Input: root = []\n        Output: true\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 3,
        "answer": "        if not root:\n            return True\n        def helper(node):\n            if not node:\n                return 0\n            left = helper(node.left)\n            right = helper(node.right)\n            if left == -1 or right == -1 or abs(left - right) > 1:\n                return -1\n            return max(left, right) + 1"
    },
    {
        "number": 110,
        "title": "Balanced Binary Tree",
        "difficulty": 0,
        "prompt": "class Solution:\n    def isBalanced(self, root: Optional[TreeNode]) -> bool:\n        \"\"\"\n        Given a binary tree, determine if it is height-balanced.\n        Example 1:\n        Input: root = [3,9,20,null,null,15,7]\n        Output: true\n        Example 2:\n        Input: root = [1,2,2,3,3,null,null,4,4]\n        Output: false\n        Example 3:\n        Input: root = []\n        Output: true\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 4,
        "answer": "        # recursive solution\n        # Time complexity: O(N), where N is the number of nodes in the tree\n        # Space complexity: O(N) to keep the stack of recursive calls\n        if not root:\n            return True\n        return abs(self.find_height(root.left)-self.find_height(root.right)) < 2 and self.isBalanced(root.left) and self.isBalanced(root.right)\n        \n    def find_height(self, root):\n        if not root:\n            return 0\n        return max(self.find_height(root.left), self.find_height(root.right)) + 1\n    \n    \n        # iterative solution\n        # Time complexity: O(N), where N is the number of nodes in the tree\n        # Space complexity: O(N) to keep the stack of recursive calls\n        # when add to stack, we also add the height of current node\n        if not root:\n            return 0\n        stack = [(root, 0)]\n        # put the root into the stack\n        # also the height of current node is 0\n        while stack:\n            curr, height = stack.pop()\n            if curr:\n                if abs(self.find_height(curr.left) - self.find_height(curr."
    },
    {
        "number": 110,
        "title": "Balanced Binary Tree",
        "difficulty": 0,
        "prompt": "class Solution:\n    def isBalanced(self, root: Optional[TreeNode]) -> bool:\n        \"\"\"\n        Given a binary tree, determine if it is height-balanced.\n        Example 1:\n        Input: root = [3,9,20,null,null,15,7]\n        Output: true\n        Example 2:\n        Input: root = [1,2,2,3,3,null,null,4,4]\n        Output: false\n        Example 3:\n        Input: root = []\n        Output: true\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 5,
        "answer": "        if not root:\n            return True\n        return self.check_height(root)!= -1"
    },
    {
        "number": 111,
        "title": "Minimum Depth of Binary Tree",
        "difficulty": 0,
        "prompt": "class Solution:\n    def minDepth(self, root: Optional[TreeNode]) -> int:\n        \"\"\"\n        Given a binary tree, find its minimum depth.\n        The minimum depth is the number of nodes along the shortest path from the root node down to the nearest leaf node.\n        Note: A leaf is a node with no children.\n        Example 1:\n        Input: root = [3,9,20,null,null,15,7]\n        Output: 2\n        Example 2:\n        Input: root = [2,null,3,null,4,null,5,null,6]\n        Output: 5\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        if not root:\n            return 0\n        if not root.left and not root.right:\n            return 1\n        if not root.left:\n            return 1 + self.minDepth(root.right)\n        if not root.right:\n            return 1 + self.minDepth(root.left)\n        return 1 + min(self.minDepth(root.left), self.minDepth(root.right))"
    },
    {
        "number": 111,
        "title": "Minimum Depth of Binary Tree",
        "difficulty": 0,
        "prompt": "class Solution:\n    def minDepth(self, root: Optional[TreeNode]) -> int:\n        \"\"\"\n        Given a binary tree, find its minimum depth.\n        The minimum depth is the number of nodes along the shortest path from the root node down to the nearest leaf node.\n        Note: A leaf is a node with no children.\n        Example 1:\n        Input: root = [3,9,20,null,null,15,7]\n        Output: 2\n        Example 2:\n        Input: root = [2,null,3,null,4,null,5,null,6]\n        Output: 5\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        # The problem says the shortest path.\n        # We first get the depth from the root to the leftmost leaf.\n        # Then we get the depth from the root to the rightmost leaf.\n        # The minimum is the min of these two depths.\n        # The depth of a node is the depth of its root node if the node is the root node, otherwise the depth of its parent.\n        # If the root is a leaf, then its depth is 0.\n        \n        if not root:\n            return 0\n        \n        left_depth = self.minDepth(root.left)\n        right_depth = self.minDepth(root.right)\n        \n        if not root.left or not root.right:\n            return 1 + left_depth + right_depth\n        \n        return 1 + min(left_depth, right_depth)\n<|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>"
    },
    {
        "number": 111,
        "title": "Minimum Depth of Binary Tree",
        "difficulty": 0,
        "prompt": "class Solution:\n    def minDepth(self, root: Optional[TreeNode]) -> int:\n        \"\"\"\n        Given a binary tree, find its minimum depth.\n        The minimum depth is the number of nodes along the shortest path from the root node down to the nearest leaf node.\n        Note: A leaf is a node with no children.\n        Example 1:\n        Input: root = [3,9,20,null,null,15,7]\n        Output: 2\n        Example 2:\n        Input: root = [2,null,3,null,4,null,5,null,6]\n        Output: 5\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 3,
        "answer": "        if not root:\n            return 0\n        if not root.left:\n            return 1 + self.minDepth(root.right)\n        if not root.right:\n            return 1 + self.minDepth(root.left)\n        return 1 + min(self.minDepth(root.left), self.minDepth(root.right))"
    },
    {
        "number": 111,
        "title": "Minimum Depth of Binary Tree",
        "difficulty": 0,
        "prompt": "class Solution:\n    def minDepth(self, root: Optional[TreeNode]) -> int:\n        \"\"\"\n        Given a binary tree, find its minimum depth.\n        The minimum depth is the number of nodes along the shortest path from the root node down to the nearest leaf node.\n        Note: A leaf is a node with no children.\n        Example 1:\n        Input: root = [3,9,20,null,null,15,7]\n        Output: 2\n        Example 2:\n        Input: root = [2,null,3,null,4,null,5,null,6]\n        Output: 5\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 4,
        "answer": "        if not root:\n            return 0\n        if not root.left:\n            return 1 + self.minDepth(root.right)\n        if not root.right:\n            return 1 + self.minDepth(root.left)\n        return 1 + min(self.minDepth(root.left), self.minDepth(root.right))\n<|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>"
    },
    {
        "number": 111,
        "title": "Minimum Depth of Binary Tree",
        "difficulty": 0,
        "prompt": "class Solution:\n    def minDepth(self, root: Optional[TreeNode]) -> int:\n        \"\"\"\n        Given a binary tree, find its minimum depth.\n        The minimum depth is the number of nodes along the shortest path from the root node down to the nearest leaf node.\n        Note: A leaf is a node with no children.\n        Example 1:\n        Input: root = [3,9,20,null,null,15,7]\n        Output: 2\n        Example 2:\n        Input: root = [2,null,3,null,4,null,5,null,6]\n        Output: 5\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 5,
        "answer": "        if not root:\n            return 0"
    },
    {
        "number": 112,
        "title": "Path Sum",
        "difficulty": 0,
        "prompt": "class Solution:\n    def hasPathSum(self, root: Optional[TreeNode], targetSum: int) -> bool:\n        \"\"\"\n        Given the root of a binary tree and an integer targetSum, return true if the tree has a root-to-leaf path such that adding up all the values along the path equals targetSum.\n        A leaf is a node with no children.\n        Example 1:\n        Input: root = [5,4,8,11,null,13,4,7,2,null,null,null,1], targetSum = 22\n        Output: true\n        Explanation: The root-to-leaf path with the target sum is shown.\n        Example 2:\n        Input: root = [1,2,3], targetSum = 5\n        Output: false\n        Explanation: There two root-to-leaf paths in the tree:\n        (1 --> 2): The sum is 3.\n        (1 --> 3): The sum is 4.\n        There is no root-to-leaf path with sum = 5.\n        Example 3:\n        Input: root = [], targetSum = 0\n        Output: false\n        Explanation: Since the tree is empty, there are no root-to-leaf paths.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        if root is None:\n            return False\n        if root.left is None and root.right is None:\n            return targetSum == root.val\n        if self.hasPathSum(root.left, targetSum - root.val):\n            return True\n        if self.hasPathSum(root.right, targetSum - root.val):\n            return True\n        return False\n<|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>"
    },
    {
        "number": 112,
        "title": "Path Sum",
        "difficulty": 0,
        "prompt": "class Solution:\n    def hasPathSum(self, root: Optional[TreeNode], targetSum: int) -> bool:\n        \"\"\"\n        Given the root of a binary tree and an integer targetSum, return true if the tree has a root-to-leaf path such that adding up all the values along the path equals targetSum.\n        A leaf is a node with no children.\n        Example 1:\n        Input: root = [5,4,8,11,null,13,4,7,2,null,null,null,1], targetSum = 22\n        Output: true\n        Explanation: The root-to-leaf path with the target sum is shown.\n        Example 2:\n        Input: root = [1,2,3], targetSum = 5\n        Output: false\n        Explanation: There two root-to-leaf paths in the tree:\n        (1 --> 2): The sum is 3.\n        (1 --> 3): The sum is 4.\n        There is no root-to-leaf path with sum = 5.\n        Example 3:\n        Input: root = [], targetSum = 0\n        Output: false\n        Explanation: Since the tree is empty, there are no root-to-leaf paths.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        if root is None:\n            return False\n        targetSum -= root.val\n        if targetSum == 0 and root.left is None and root.right is None:\n            return True\n        return self.hasPathSum(root.left, targetSum) or self.hasPathSum(root.right, targetSum)\n<|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>"
    },
    {
        "number": 112,
        "title": "Path Sum",
        "difficulty": 0,
        "prompt": "class Solution:\n    def hasPathSum(self, root: Optional[TreeNode], targetSum: int) -> bool:\n        \"\"\"\n        Given the root of a binary tree and an integer targetSum, return true if the tree has a root-to-leaf path such that adding up all the values along the path equals targetSum.\n        A leaf is a node with no children.\n        Example 1:\n        Input: root = [5,4,8,11,null,13,4,7,2,null,null,null,1], targetSum = 22\n        Output: true\n        Explanation: The root-to-leaf path with the target sum is shown.\n        Example 2:\n        Input: root = [1,2,3], targetSum = 5\n        Output: false\n        Explanation: There two root-to-leaf paths in the tree:\n        (1 --> 2): The sum is 3.\n        (1 --> 3): The sum is 4.\n        There is no root-to-leaf path with sum = 5.\n        Example 3:\n        Input: root = [], targetSum = 0\n        Output: false\n        Explanation: Since the tree is empty, there are no root-to-leaf paths.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 3,
        "answer": "        \n        def check(root, targetSum):\n            if not root:\n                return False\n            if not root.left and not root.right:\n                if targetSum == root.val:\n                    return True\n                return False\n            return check(root.left, targetSum - root.val) or check(root.right, targetSum - root.val)\n        \n        return check(root, targetSum)"
    },
    {
        "number": 112,
        "title": "Path Sum",
        "difficulty": 0,
        "prompt": "class Solution:\n    def hasPathSum(self, root: Optional[TreeNode], targetSum: int) -> bool:\n        \"\"\"\n        Given the root of a binary tree and an integer targetSum, return true if the tree has a root-to-leaf path such that adding up all the values along the path equals targetSum.\n        A leaf is a node with no children.\n        Example 1:\n        Input: root = [5,4,8,11,null,13,4,7,2,null,null,null,1], targetSum = 22\n        Output: true\n        Explanation: The root-to-leaf path with the target sum is shown.\n        Example 2:\n        Input: root = [1,2,3], targetSum = 5\n        Output: false\n        Explanation: There two root-to-leaf paths in the tree:\n        (1 --> 2): The sum is 3.\n        (1 --> 3): The sum is 4.\n        There is no root-to-leaf path with sum = 5.\n        Example 3:\n        Input: root = [], targetSum = 0\n        Output: false\n        Explanation: Since the tree is empty, there are no root-to-leaf paths.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 4,
        "answer": "        if not root: return False\n        if not root.left and not root.right and root.val == targetSum:\n            return True\n        return self.hasPathSum(root.left, targetSum - root.val) or self.hasPathSum(root.right, targetSum - root.val)"
    },
    {
        "number": 112,
        "title": "Path Sum",
        "difficulty": 0,
        "prompt": "class Solution:\n    def hasPathSum(self, root: Optional[TreeNode], targetSum: int) -> bool:\n        \"\"\"\n        Given the root of a binary tree and an integer targetSum, return true if the tree has a root-to-leaf path such that adding up all the values along the path equals targetSum.\n        A leaf is a node with no children.\n        Example 1:\n        Input: root = [5,4,8,11,null,13,4,7,2,null,null,null,1], targetSum = 22\n        Output: true\n        Explanation: The root-to-leaf path with the target sum is shown.\n        Example 2:\n        Input: root = [1,2,3], targetSum = 5\n        Output: false\n        Explanation: There two root-to-leaf paths in the tree:\n        (1 --> 2): The sum is 3.\n        (1 --> 3): The sum is 4.\n        There is no root-to-leaf path with sum = 5.\n        Example 3:\n        Input: root = [], targetSum = 0\n        Output: false\n        Explanation: Since the tree is empty, there are no root-to-leaf paths.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 5,
        "answer": "        if root is None:\n            return False\n        if root.val == targetSum and root.left is None and root.right is None:\n            return True\n        return self.hasPathSum(root.left, targetSum - root.val) or self.hasPathSum(root.right, targetSum - root.val)\n<|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>"
    },
    {
        "number": 113,
        "title": "Path Sum II",
        "difficulty": 1,
        "prompt": "class Solution:\n    def pathSum(self, root: Optional[TreeNode], targetSum: int) -> List[List[int]]:\n        \"\"\"\n        Given the root of a binary tree and an integer targetSum, return all root-to-leaf paths where the sum of the node values in the path equals targetSum. Each path should be returned as a list of the node values, not node references.\n        A root-to-leaf path is a path starting from the root and ending at any leaf node. A leaf is a node with no children.\n        Example 1:\n        Input: root = [5,4,8,11,null,13,4,7,2,null,null,5,1], targetSum = 22\n        Output: [[5,4,11,2],[5,8,4,5]]\n        Explanation: There are two paths whose sum equals targetSum:\n        5 + 4 + 11 + 2 = 22\n        5 + 8 + 4 + 5 = 22\n        Example 2:\n        Input: root = [1,2,3], targetSum = 5\n        Output: []\n        Example 3:\n        Input: root = [1,2], targetSum = 0\n        Output: []\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        if not root:\n            return []\n        if not root.left and not root.right and targetSum == root.val:\n            return [[root.val]]\n        output = []\n        left = self.pathSum(root.left, targetSum - root.val)\n        right = self.pathSum(root.right, targetSum - root.val)\n        for i in left + right:\n            output.append([root.val] + i)\n        return output\n<|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>"
    },
    {
        "number": 113,
        "title": "Path Sum II",
        "difficulty": 1,
        "prompt": "class Solution:\n    def pathSum(self, root: Optional[TreeNode], targetSum: int) -> List[List[int]]:\n        \"\"\"\n        Given the root of a binary tree and an integer targetSum, return all root-to-leaf paths where the sum of the node values in the path equals targetSum. Each path should be returned as a list of the node values, not node references.\n        A root-to-leaf path is a path starting from the root and ending at any leaf node. A leaf is a node with no children.\n        Example 1:\n        Input: root = [5,4,8,11,null,13,4,7,2,null,null,5,1], targetSum = 22\n        Output: [[5,4,11,2],[5,8,4,5]]\n        Explanation: There are two paths whose sum equals targetSum:\n        5 + 4 + 11 + 2 = 22\n        5 + 8 + 4 + 5 = 22\n        Example 2:\n        Input: root = [1,2,3], targetSum = 5\n        Output: []\n        Example 3:\n        Input: root = [1,2], targetSum = 0\n        Output: []\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        # (0) edge case\n        if not root:\n            return []"
    },
    {
        "number": 113,
        "title": "Path Sum II",
        "difficulty": 1,
        "prompt": "class Solution:\n    def pathSum(self, root: Optional[TreeNode], targetSum: int) -> List[List[int]]:\n        \"\"\"\n        Given the root of a binary tree and an integer targetSum, return all root-to-leaf paths where the sum of the node values in the path equals targetSum. Each path should be returned as a list of the node values, not node references.\n        A root-to-leaf path is a path starting from the root and ending at any leaf node. A leaf is a node with no children.\n        Example 1:\n        Input: root = [5,4,8,11,null,13,4,7,2,null,null,5,1], targetSum = 22\n        Output: [[5,4,11,2],[5,8,4,5]]\n        Explanation: There are two paths whose sum equals targetSum:\n        5 + 4 + 11 + 2 = 22\n        5 + 8 + 4 + 5 = 22\n        Example 2:\n        Input: root = [1,2,3], targetSum = 5\n        Output: []\n        Example 3:\n        Input: root = [1,2], targetSum = 0\n        Output: []\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 3,
        "answer": "        \n        \n        def dfs(node, path_sum, cur_list, res):\n            if node is None:\n                return \n            \n            path_sum += node.val\n            cur_list.append(node.val)\n            if node.left is None and node.right is None and path_sum == targetSum:\n                res.append(cur_list)\n            dfs(node.left, path_sum, cur_list, res)\n            dfs(node.right, path_sum, cur_list, res)\n            cur_list.pop()\n        \n        res = []\n        dfs(root, 0, [], res)\n        return res\n    \n    def pathSum(self, root: Optional[TreeNode], targetSum: int) -> List[List[int]]:\n        \n        # path_sum can be defined as a global variable in this recursive solution \n        path_sum = 0\n        res = []\n        \n        def dfs(node, path_sum, cur_list, res):\n            if node is None:\n                return \n            \n            path_sum += node.val\n            cur_list.append(node.val)\n            if node.left is None and node.right is None and path_sum == targetSum:\n                res.append"
    },
    {
        "number": 113,
        "title": "Path Sum II",
        "difficulty": 1,
        "prompt": "class Solution:\n    def pathSum(self, root: Optional[TreeNode], targetSum: int) -> List[List[int]]:\n        \"\"\"\n        Given the root of a binary tree and an integer targetSum, return all root-to-leaf paths where the sum of the node values in the path equals targetSum. Each path should be returned as a list of the node values, not node references.\n        A root-to-leaf path is a path starting from the root and ending at any leaf node. A leaf is a node with no children.\n        Example 1:\n        Input: root = [5,4,8,11,null,13,4,7,2,null,null,5,1], targetSum = 22\n        Output: [[5,4,11,2],[5,8,4,5]]\n        Explanation: There are two paths whose sum equals targetSum:\n        5 + 4 + 11 + 2 = 22\n        5 + 8 + 4 + 5 = 22\n        Example 2:\n        Input: root = [1,2,3], targetSum = 5\n        Output: []\n        Example 3:\n        Input: root = [1,2], targetSum = 0\n        Output: []\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 4,
        "answer": "        # Time complexity: O(N)\n        # Space complexity: O(N)\n        # Use preorder traversal\n        self.result = []\n        self.targetSum = targetSum\n        self.dfs(root, [])\n        return self.result"
    },
    {
        "number": 113,
        "title": "Path Sum II",
        "difficulty": 1,
        "prompt": "class Solution:\n    def pathSum(self, root: Optional[TreeNode], targetSum: int) -> List[List[int]]:\n        \"\"\"\n        Given the root of a binary tree and an integer targetSum, return all root-to-leaf paths where the sum of the node values in the path equals targetSum. Each path should be returned as a list of the node values, not node references.\n        A root-to-leaf path is a path starting from the root and ending at any leaf node. A leaf is a node with no children.\n        Example 1:\n        Input: root = [5,4,8,11,null,13,4,7,2,null,null,5,1], targetSum = 22\n        Output: [[5,4,11,2],[5,8,4,5]]\n        Explanation: There are two paths whose sum equals targetSum:\n        5 + 4 + 11 + 2 = 22\n        5 + 8 + 4 + 5 = 22\n        Example 2:\n        Input: root = [1,2,3], targetSum = 5\n        Output: []\n        Example 3:\n        Input: root = [1,2], targetSum = 0\n        Output: []\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 5,
        "answer": "        if not root:\n            return []\n        res = []\n        self.helper(root, targetSum, [], res)\n        return res"
    },
    {
        "number": 114,
        "title": "Flatten Binary Tree to Linked List",
        "difficulty": 1,
        "prompt": "class Solution:\n    def flatten(self, root: Optional[TreeNode]) -> None:\n        \"\"\"\n        Do not return anything, modify root in-place instead.\n        Given the root of a binary tree, flatten the tree into a \"linked list\":\n            The \"linked list\" should use the same TreeNode class where the right child pointer points to the next node in the list and the left child pointer is always null.\n            The \"linked list\" should be in the same order as a pre-order traversal of the binary tree.\n        Example 1:\n        Input: root = [1,2,5,3,4,null,6]\n        Output: [1,null,2,null,3,null,4,null,5,null,6]\n        Example 2:\n        Input: root = []\n        Output: []\n        Example 3:\n        Input: root = [0]\n        Output: [0]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        # Postorder traversal: left, right, root\n        # Inorder traversal: root, left, right\n        # Preorder traversal: root, left, right\n        # level order traversal: root, left, right\n        if not root:\n            return\n        \n        stack = [root]\n        prev_node = None\n        \n        while stack:\n            node = stack.pop()\n            if node.right:\n                stack.append(node.right)\n            if node.left:\n                stack.append(node.left)\n            \n            if prev_node:\n                prev_node.right = node\n                prev_node.left = None\n            \n            prev_node = node\n        \n        node.left = None\n        node.right = None\n<|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>"
    },
    {
        "number": 114,
        "title": "Flatten Binary Tree to Linked List",
        "difficulty": 1,
        "prompt": "class Solution:\n    def flatten(self, root: Optional[TreeNode]) -> None:\n        \"\"\"\n        Do not return anything, modify root in-place instead.\n        Given the root of a binary tree, flatten the tree into a \"linked list\":\n            The \"linked list\" should use the same TreeNode class where the right child pointer points to the next node in the list and the left child pointer is always null.\n            The \"linked list\" should be in the same order as a pre-order traversal of the binary tree.\n        Example 1:\n        Input: root = [1,2,5,3,4,null,6]\n        Output: [1,null,2,null,3,null,4,null,5,null,6]\n        Example 2:\n        Input: root = []\n        Output: []\n        Example 3:\n        Input: root = [0]\n        Output: [0]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        # left root right\n        if not root:\n            return\n        self.flatten(root.left)\n        self.flatten(root.right)\n        if not root.left:\n            return\n        node = root.left\n        while node.right:\n            node = node.right\n        node.right = root.right\n        root.right = root.left\n        root.left = None\n        return\n    \n    def flatten2(self, root: Optional[TreeNode]) -> None:\n        \"\"\"\n        Do not return anything, modify root in-place instead.\n        Given the root of a binary tree, flatten the tree into a \"linked list\":\n            The \"linked list\" should use the same TreeNode class where the right child pointer points to the next node in the list and the left child pointer is always null.\n            The \"linked list\" should be in the same order as a pre-order traversal of the binary tree.\n        Example 1:\n        Input: root = [1,2,5,3,4,null,6]\n        Output: [1,null,2,null,3,null,4,null,5,null,6]\n        Example 2:\n        Input: root = []\n        Output: []\n        Example 3:\n        Input: root = [0]\n"
    },
    {
        "number": 114,
        "title": "Flatten Binary Tree to Linked List",
        "difficulty": 1,
        "prompt": "class Solution:\n    def flatten(self, root: Optional[TreeNode]) -> None:\n        \"\"\"\n        Do not return anything, modify root in-place instead.\n        Given the root of a binary tree, flatten the tree into a \"linked list\":\n            The \"linked list\" should use the same TreeNode class where the right child pointer points to the next node in the list and the left child pointer is always null.\n            The \"linked list\" should be in the same order as a pre-order traversal of the binary tree.\n        Example 1:\n        Input: root = [1,2,5,3,4,null,6]\n        Output: [1,null,2,null,3,null,4,null,5,null,6]\n        Example 2:\n        Input: root = []\n        Output: []\n        Example 3:\n        Input: root = [0]\n        Output: [0]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 3,
        "answer": "        if not root:\n            return\n        self.flatten(root.left)\n        self.flatten(root.right)"
    },
    {
        "number": 114,
        "title": "Flatten Binary Tree to Linked List",
        "difficulty": 1,
        "prompt": "class Solution:\n    def flatten(self, root: Optional[TreeNode]) -> None:\n        \"\"\"\n        Do not return anything, modify root in-place instead.\n        Given the root of a binary tree, flatten the tree into a \"linked list\":\n            The \"linked list\" should use the same TreeNode class where the right child pointer points to the next node in the list and the left child pointer is always null.\n            The \"linked list\" should be in the same order as a pre-order traversal of the binary tree.\n        Example 1:\n        Input: root = [1,2,5,3,4,null,6]\n        Output: [1,null,2,null,3,null,4,null,5,null,6]\n        Example 2:\n        Input: root = []\n        Output: []\n        Example 3:\n        Input: root = [0]\n        Output: [0]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 4,
        "answer": "        if not root:\n            return root\n        prev = None\n        stack = [root]\n        while stack:\n            node = stack.pop()\n            if node.right:\n                stack.append(node.right)\n            if node.left:\n                stack.append(node.left)\n            if prev:\n                prev.right = node\n                prev.left = None\n                prev = node\n            else:\n                prev = node\n<|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>"
    },
    {
        "number": 114,
        "title": "Flatten Binary Tree to Linked List",
        "difficulty": 1,
        "prompt": "class Solution:\n    def flatten(self, root: Optional[TreeNode]) -> None:\n        \"\"\"\n        Do not return anything, modify root in-place instead.\n        Given the root of a binary tree, flatten the tree into a \"linked list\":\n            The \"linked list\" should use the same TreeNode class where the right child pointer points to the next node in the list and the left child pointer is always null.\n            The \"linked list\" should be in the same order as a pre-order traversal of the binary tree.\n        Example 1:\n        Input: root = [1,2,5,3,4,null,6]\n        Output: [1,null,2,null,3,null,4,null,5,null,6]\n        Example 2:\n        Input: root = []\n        Output: []\n        Example 3:\n        Input: root = [0]\n        Output: [0]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 5,
        "answer": "        if root:\n            if root.left:\n                self.flatten(root.left)\n            if root.right:\n                self.flatten(root.right)\n            temp = root.right\n            root.right = root.left\n            root.left = None\n            while root.right:\n                root = root.right\n            root.right = temp\n<|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>"
    },
    {
        "number": 115,
        "title": "Distinct Subsequences",
        "difficulty": 2,
        "prompt": "class Solution:\n    def numDistinct(self, s: str, t: str) -> int:\n        \"\"\"\n        Given two strings s and t, return the number of distinct subsequences of s which equals t.\n        The test cases are generated so that the answer fits on a 32-bit signed integer.\n        Example 1:\n        Input: s = \"rabbbit\", t = \"rabbit\"\n        Output: 3\n        Explanation:\n        As shown below, there are 3 ways you can generate \"rabbit\" from s.\n        rabbbit\n        rabbbit\n        rabbbit\n        Example 2:\n        Input: s = \"babgbag\", t = \"bag\"\n        Output: 5\n        Explanation:\n        As shown below, there are 5 ways you can generate \"bag\" from s.\n        babgbag\n        babgbag\n        babgbag\n        babgbag\n        babgbag\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        s_len, t_len = len(s), len(t)\n        if s_len < t_len:\n            return 0"
    },
    {
        "number": 115,
        "title": "Distinct Subsequences",
        "difficulty": 2,
        "prompt": "class Solution:\n    def numDistinct(self, s: str, t: str) -> int:\n        \"\"\"\n        Given two strings s and t, return the number of distinct subsequences of s which equals t.\n        The test cases are generated so that the answer fits on a 32-bit signed integer.\n        Example 1:\n        Input: s = \"rabbbit\", t = \"rabbit\"\n        Output: 3\n        Explanation:\n        As shown below, there are 3 ways you can generate \"rabbit\" from s.\n        rabbbit\n        rabbbit\n        rabbbit\n        Example 2:\n        Input: s = \"babgbag\", t = \"bag\"\n        Output: 5\n        Explanation:\n        As shown below, there are 5 ways you can generate \"bag\" from s.\n        babgbag\n        babgbag\n        babgbag\n        babgbag\n        babgbag\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        self.s = s\n        self.t = t\n        self.memo = {}\n        return self.helper(0, 0)"
    },
    {
        "number": 115,
        "title": "Distinct Subsequences",
        "difficulty": 2,
        "prompt": "class Solution:\n    def numDistinct(self, s: str, t: str) -> int:\n        \"\"\"\n        Given two strings s and t, return the number of distinct subsequences of s which equals t.\n        The test cases are generated so that the answer fits on a 32-bit signed integer.\n        Example 1:\n        Input: s = \"rabbbit\", t = \"rabbit\"\n        Output: 3\n        Explanation:\n        As shown below, there are 3 ways you can generate \"rabbit\" from s.\n        rabbbit\n        rabbbit\n        rabbbit\n        Example 2:\n        Input: s = \"babgbag\", t = \"bag\"\n        Output: 5\n        Explanation:\n        As shown below, there are 5 ways you can generate \"bag\" from s.\n        babgbag\n        babgbag\n        babgbag\n        babgbag\n        babgbag\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 3,
        "answer": "        memo = {}"
    },
    {
        "number": 115,
        "title": "Distinct Subsequences",
        "difficulty": 2,
        "prompt": "class Solution:\n    def numDistinct(self, s: str, t: str) -> int:\n        \"\"\"\n        Given two strings s and t, return the number of distinct subsequences of s which equals t.\n        The test cases are generated so that the answer fits on a 32-bit signed integer.\n        Example 1:\n        Input: s = \"rabbbit\", t = \"rabbit\"\n        Output: 3\n        Explanation:\n        As shown below, there are 3 ways you can generate \"rabbit\" from s.\n        rabbbit\n        rabbbit\n        rabbbit\n        Example 2:\n        Input: s = \"babgbag\", t = \"bag\"\n        Output: 5\n        Explanation:\n        As shown below, there are 5 ways you can generate \"bag\" from s.\n        babgbag\n        babgbag\n        babgbag\n        babgbag\n        babgbag\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 4,
        "answer": "        # dp[i][j]\u8868\u793as[0:i+1]\u4e2dt[0:j+1]\u7684\u5b50\u5e8f\u5217\u7684\u4e2a\u6570\n        dp = [[0] * (len(t) + 1) for _ in range(len(s) + 1)]\n        # \u7ec8\u6b62\u6761\u4ef6\uff0cdp[i][j] = dp[i-1][j] + dp[i][j-1]\uff0c\u5373\u5982\u679cs[i]\u4e0et[j]\u4e00\u6837\uff0c\n        # \u90a3\u4e48\u7ec8\u6b62\u6761\u4ef6\u5c31\u662f\uff0cdp[i][j] = dp[i-1][j-1]\n        dp[0][0] = 1\n        for i in range(len(s) + 1):\n            for j in range(len(t) + 1):\n                if i == 0 or j == 0:\n                    continue\n                if s[i - 1] == t[j - 1]:\n                    dp[i][j] = dp[i - 1][j - 1] + dp[i][j - 1]\n                else:\n                    dp[i][j] = dp[i][j - 1]\n        "
    },
    {
        "number": 115,
        "title": "Distinct Subsequences",
        "difficulty": 2,
        "prompt": "class Solution:\n    def numDistinct(self, s: str, t: str) -> int:\n        \"\"\"\n        Given two strings s and t, return the number of distinct subsequences of s which equals t.\n        The test cases are generated so that the answer fits on a 32-bit signed integer.\n        Example 1:\n        Input: s = \"rabbbit\", t = \"rabbit\"\n        Output: 3\n        Explanation:\n        As shown below, there are 3 ways you can generate \"rabbit\" from s.\n        rabbbit\n        rabbbit\n        rabbbit\n        Example 2:\n        Input: s = \"babgbag\", t = \"bag\"\n        Output: 5\n        Explanation:\n        As shown below, there are 5 ways you can generate \"bag\" from s.\n        babgbag\n        babgbag\n        babgbag\n        babgbag\n        babgbag\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 5,
        "answer": "        if s == '':\n            return 0 if t == '' else 1\n        # if len(t) == 0:\n        #     return 0"
    },
    {
        "number": 116,
        "title": "Populating Next Right Pointers in Each Node",
        "difficulty": 1,
        "prompt": "\n        \"\"\"\nclass Node:\n    def __init__(self, val: int = 0, left: 'Node' = None, right: 'Node' = None, next: 'Node' = None):\n        self.val = val\n        self.left = left\n        self.right = right\n        self.next = next\n        You are given a perfect binary tree where all leaves are on the same level, and every parent has two children. The binary tree has the following definition:\n        struct Node {\n          int val;\n          Node *left;\n          Node *right;\n          Node *next;\n        }\n        Populate each next pointer to point to its next right node. If there is no next right node, the next pointer should be set to NULL.\n        Initially, all next pointers are set to NULL.\n        Example 1:\n        Input: root = [1,2,3,4,5,6,7]\n        Output: [1,#,2,3,#,4,5,6,7,#]\n        Explanation: Given the above perfect binary tree (Figure A), your function should populate each next pointer to point to its next right node, just like in Figure B. The serialized output is in level order as connected by the next pointers, with '#' signifying the end of each level.\n        Example 2:\n        Input: root = []\n        Output: []\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        self.val = val\n        self.left = left\n        self.right = right\n        self.next = next"
    },
    {
        "number": 116,
        "title": "Populating Next Right Pointers in Each Node",
        "difficulty": 1,
        "prompt": "\n        \"\"\"\nclass Node:\n    def __init__(self, val: int = 0, left: 'Node' = None, right: 'Node' = None, next: 'Node' = None):\n        self.val = val\n        self.left = left\n        self.right = right\n        self.next = next\n        You are given a perfect binary tree where all leaves are on the same level, and every parent has two children. The binary tree has the following definition:\n        struct Node {\n          int val;\n          Node *left;\n          Node *right;\n          Node *next;\n        }\n        Populate each next pointer to point to its next right node. If there is no next right node, the next pointer should be set to NULL.\n        Initially, all next pointers are set to NULL.\n        Example 1:\n        Input: root = [1,2,3,4,5,6,7]\n        Output: [1,#,2,3,#,4,5,6,7,#]\n        Explanation: Given the above perfect binary tree (Figure A), your function should populate each next pointer to point to its next right node, just like in Figure B. The serialized output is in level order as connected by the next pointers, with '#' signifying the end of each level.\n        Example 2:\n        Input: root = []\n        Output: []\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    def connect(self, root: 'Node') -> 'Node':\n        \"\"\"\n        :type root: Node\n        :rtype: Node\n        \"\"\""
    },
    {
        "number": 116,
        "title": "Populating Next Right Pointers in Each Node",
        "difficulty": 1,
        "prompt": "\n        \"\"\"\nclass Node:\n    def __init__(self, val: int = 0, left: 'Node' = None, right: 'Node' = None, next: 'Node' = None):\n        self.val = val\n        self.left = left\n        self.right = right\n        self.next = next\n        You are given a perfect binary tree where all leaves are on the same level, and every parent has two children. The binary tree has the following definition:\n        struct Node {\n          int val;\n          Node *left;\n          Node *right;\n          Node *next;\n        }\n        Populate each next pointer to point to its next right node. If there is no next right node, the next pointer should be set to NULL.\n        Initially, all next pointers are set to NULL.\n        Example 1:\n        Input: root = [1,2,3,4,5,6,7]\n        Output: [1,#,2,3,#,4,5,6,7,#]\n        Explanation: Given the above perfect binary tree (Figure A), your function should populate each next pointer to point to its next right node, just like in Figure B. The serialized output is in level order as connected by the next pointers, with '#' signifying the end of each level.\n        Example 2:\n        Input: root = []\n        Output: []\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 3,
        "answer": "        self.left = left\n        self.right = right\n        self.next = next"
    },
    {
        "number": 116,
        "title": "Populating Next Right Pointers in Each Node",
        "difficulty": 1,
        "prompt": "\n        \"\"\"\nclass Node:\n    def __init__(self, val: int = 0, left: 'Node' = None, right: 'Node' = None, next: 'Node' = None):\n        self.val = val\n        self.left = left\n        self.right = right\n        self.next = next\n        You are given a perfect binary tree where all leaves are on the same level, and every parent has two children. The binary tree has the following definition:\n        struct Node {\n          int val;\n          Node *left;\n          Node *right;\n          Node *next;\n        }\n        Populate each next pointer to point to its next right node. If there is no next right node, the next pointer should be set to NULL.\n        Initially, all next pointers are set to NULL.\n        Example 1:\n        Input: root = [1,2,3,4,5,6,7]\n        Output: [1,#,2,3,#,4,5,6,7,#]\n        Explanation: Given the above perfect binary tree (Figure A), your function should populate each next pointer to point to its next right node, just like in Figure B. The serialized output is in level order as connected by the next pointers, with '#' signifying the end of each level.\n        Example 2:\n        Input: root = []\n        Output: []\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 4,
        "answer": "        self.val = val\n        self.left = left\n        self.right = right\n        self.next = next"
    },
    {
        "number": 116,
        "title": "Populating Next Right Pointers in Each Node",
        "difficulty": 1,
        "prompt": "\n        \"\"\"\nclass Node:\n    def __init__(self, val: int = 0, left: 'Node' = None, right: 'Node' = None, next: 'Node' = None):\n        self.val = val\n        self.left = left\n        self.right = right\n        self.next = next\n        You are given a perfect binary tree where all leaves are on the same level, and every parent has two children. The binary tree has the following definition:\n        struct Node {\n          int val;\n          Node *left;\n          Node *right;\n          Node *next;\n        }\n        Populate each next pointer to point to its next right node. If there is no next right node, the next pointer should be set to NULL.\n        Initially, all next pointers are set to NULL.\n        Example 1:\n        Input: root = [1,2,3,4,5,6,7]\n        Output: [1,#,2,3,#,4,5,6,7,#]\n        Explanation: Given the above perfect binary tree (Figure A), your function should populate each next pointer to point to its next right node, just like in Figure B. The serialized output is in level order as connected by the next pointers, with '#' signifying the end of each level.\n        Example 2:\n        Input: root = []\n        Output: []\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 5,
        "answer": "class Solution(object):\n    def connect(self, root):\n        if not root:\n            return None\n        queue = [root]\n        while queue:\n            length = len(queue)\n            for i in range(length):\n                if i < length - 1:\n                    queue[i].next = queue[i+1]\n                if queue[i].left:\n                    queue.append(queue[i].left)\n                if queue[i].right:\n                    queue.append(queue[i].right)\n            queue = queue[length:]\n        return root\n<|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>"
    },
    {
        "number": 117,
        "title": "Populating Next Right Pointers in Each Node II",
        "difficulty": 1,
        "prompt": "\n        \"\"\"\nclass Node:\n    def __init__(self, val: int = 0, left: 'Node' = None, right: 'Node' = None, next: 'Node' = None):\n        self.val = val\n        self.left = left\n        self.right = right\n        self.next = next\n        Given a binary tree\n        struct Node {\n          int val;\n          Node *left;\n          Node *right;\n          Node *next;\n        }\n        Populate each next pointer to point to its next right node. If there is no next right node, the next pointer should be set to NULL.\n        Initially, all next pointers are set to NULL.\n        Example 1:\n        Input: root = [1,2,3,4,5,null,7]\n        Output: [1,#,2,3,#,4,5,7,#]\n        Explanation: Given the above binary tree (Figure A), your function should populate each next pointer to point to its next right node, just like in Figure B. The serialized output is in level order as connected by the next pointers, with '#' signifying the end of each level.\n        Example 2:\n        Input: root = []\n        Output: []\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        self.val = val\n        self.left = left\n        self.right = right\n        self.next = next\n        self.right_node = right_node"
    },
    {
        "number": 117,
        "title": "Populating Next Right Pointers in Each Node II",
        "difficulty": 1,
        "prompt": "\n        \"\"\"\nclass Node:\n    def __init__(self, val: int = 0, left: 'Node' = None, right: 'Node' = None, next: 'Node' = None):\n        self.val = val\n        self.left = left\n        self.right = right\n        self.next = next\n        Given a binary tree\n        struct Node {\n          int val;\n          Node *left;\n          Node *right;\n          Node *next;\n        }\n        Populate each next pointer to point to its next right node. If there is no next right node, the next pointer should be set to NULL.\n        Initially, all next pointers are set to NULL.\n        Example 1:\n        Input: root = [1,2,3,4,5,null,7]\n        Output: [1,#,2,3,#,4,5,7,#]\n        Explanation: Given the above binary tree (Figure A), your function should populate each next pointer to point to its next right node, just like in Figure B. The serialized output is in level order as connected by the next pointers, with '#' signifying the end of each level.\n        Example 2:\n        Input: root = []\n        Output: []\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "<|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>"
    },
    {
        "number": 117,
        "title": "Populating Next Right Pointers in Each Node II",
        "difficulty": 1,
        "prompt": "\n        \"\"\"\nclass Node:\n    def __init__(self, val: int = 0, left: 'Node' = None, right: 'Node' = None, next: 'Node' = None):\n        self.val = val\n        self.left = left\n        self.right = right\n        self.next = next\n        Given a binary tree\n        struct Node {\n          int val;\n          Node *left;\n          Node *right;\n          Node *next;\n        }\n        Populate each next pointer to point to its next right node. If there is no next right node, the next pointer should be set to NULL.\n        Initially, all next pointers are set to NULL.\n        Example 1:\n        Input: root = [1,2,3,4,5,null,7]\n        Output: [1,#,2,3,#,4,5,7,#]\n        Explanation: Given the above binary tree (Figure A), your function should populate each next pointer to point to its next right node, just like in Figure B. The serialized output is in level order as connected by the next pointers, with '#' signifying the end of each level.\n        Example 2:\n        Input: root = []\n        Output: []\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 3,
        "answer": "        self.left = None\n        self.right = None\n        self.next = None\n        self.val = val\nclass Solution:\n    def connect(self, root: 'Node') -> 'Node':\n        self.connectNextLevel(root)\n        return root"
    },
    {
        "number": 117,
        "title": "Populating Next Right Pointers in Each Node II",
        "difficulty": 1,
        "prompt": "\n        \"\"\"\nclass Node:\n    def __init__(self, val: int = 0, left: 'Node' = None, right: 'Node' = None, next: 'Node' = None):\n        self.val = val\n        self.left = left\n        self.right = right\n        self.next = next\n        Given a binary tree\n        struct Node {\n          int val;\n          Node *left;\n          Node *right;\n          Node *next;\n        }\n        Populate each next pointer to point to its next right node. If there is no next right node, the next pointer should be set to NULL.\n        Initially, all next pointers are set to NULL.\n        Example 1:\n        Input: root = [1,2,3,4,5,null,7]\n        Output: [1,#,2,3,#,4,5,7,#]\n        Explanation: Given the above binary tree (Figure A), your function should populate each next pointer to point to its next right node, just like in Figure B. The serialized output is in level order as connected by the next pointers, with '#' signifying the end of each level.\n        Example 2:\n        Input: root = []\n        Output: []\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 4,
        "answer": "\nclass Solution:\n    def connect(self, root: 'Node') -> 'Node':\n        if not root:\n            return\n        root.next = None\n        node = root\n        while node.left:\n            head = node\n            while head:\n                head.left.next = head.right\n                if head.next:\n                    head.right.next = head.next.left\n                head = head.next\n            node = node.left\n        return root"
    },
    {
        "number": 117,
        "title": "Populating Next Right Pointers in Each Node II",
        "difficulty": 1,
        "prompt": "\n        \"\"\"\nclass Node:\n    def __init__(self, val: int = 0, left: 'Node' = None, right: 'Node' = None, next: 'Node' = None):\n        self.val = val\n        self.left = left\n        self.right = right\n        self.next = next\n        Given a binary tree\n        struct Node {\n          int val;\n          Node *left;\n          Node *right;\n          Node *next;\n        }\n        Populate each next pointer to point to its next right node. If there is no next right node, the next pointer should be set to NULL.\n        Initially, all next pointers are set to NULL.\n        Example 1:\n        Input: root = [1,2,3,4,5,null,7]\n        Output: [1,#,2,3,#,4,5,7,#]\n        Explanation: Given the above binary tree (Figure A), your function should populate each next pointer to point to its next right node, just like in Figure B. The serialized output is in level order as connected by the next pointers, with '#' signifying the end of each level.\n        Example 2:\n        Input: root = []\n        Output: []\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    def connect(self, root: 'Node') -> 'Node':\n        \"\"\"\n        \u8fd9\u9053\u9898\u7684\u5173\u952e\u5728\u4e8e\u9700\u8981\u6784\u5efa\u5e76\u8fd4\u56de\u5c42\u6b21\u904d\u5386\u7684list\uff0c\u4f46\u662f\u8fd9\u4e2alist\u6709\u597d\u51e0\u79cd\u53ef\u80fd\u3002\n        \u6784\u5efa\u5c42\u6b21\u904d\u5386\uff0c\u6bcf\u4e00\u4e2alist\u6700\u540e\u4e00\u4e2a\u503c\u662flist\u4e2d\u6240\u6709\u503c\u6700\u540e\u4e00\u4e2a\u7684\u4e0b\u4e00\u4e2a\u3002\u90a3\u4e48\u54ea\u4e2alist\u5c31\u662f\u8fd9\u4e2anode\u7684next\uff0c\u5e76\u4e14\u9700\u8981\u786e\u4fdd\u5728\u9012\u5f52\u65f6\uff0clist\u662f\u7a7a\u7684\u3002\n        \u5982\u679c\u7a7a\u5219\u4e0d\u6539\u53d8\uff0c\u5982\u679c\u4e0d\u4e3a\u7a7a\u5219\u628alist\u6700\u540e\u4e00\u4e2a\u503c\u52a0\u5165\n        \"\"\"\n        if not root:\n            return root\n        if not root.left:\n            return root\n        queue = [root]\n        while queue:\n            "
    },
    {
        "number": 118,
        "title": "Pascal\"s Triangle",
        "difficulty": 0,
        "prompt": "class Solution:\n    def generate(self, numRows: int) -> List[List[int]]:\n        \"\"\"\n        Given an integer numRows, return the first numRows of Pascal's triangle.\n        In Pascal's triangle, each number is the sum of the two numbers directly above it as shown:\n        Example 1:\n        Input: numRows = 5\n        Output: [[1],[1,1],[1,2,1],[1,3,3,1],[1,4,6,4,1]]\n        Example 2:\n        Input: numRows = 1\n        Output: [[1]]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        pascal_triangle = [[1]]\n        for i in range(1, numRows):\n            new_row = []\n            new_row.append(1)\n            for j in range(1, i):\n                new_row.append(pascal_triangle[i - 1][j - 1] + pascal_triangle[i - 1][j])\n            new_row.append(1)\n            pascal_triangle.append(new_row)\n        return pascal_triangle\n<|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>"
    },
    {
        "number": 118,
        "title": "Pascal\"s Triangle",
        "difficulty": 0,
        "prompt": "class Solution:\n    def generate(self, numRows: int) -> List[List[int]]:\n        \"\"\"\n        Given an integer numRows, return the first numRows of Pascal's triangle.\n        In Pascal's triangle, each number is the sum of the two numbers directly above it as shown:\n        Example 1:\n        Input: numRows = 5\n        Output: [[1],[1,1],[1,2,1],[1,3,3,1],[1,4,6,4,1]]\n        Example 2:\n        Input: numRows = 1\n        Output: [[1]]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        result = [[1]]\n        for i in range(1, numRows):\n            tmp = [1]\n            for j in range(1, i):\n                tmp.append(result[i-1][j-1]+result[i-1][j])\n            tmp.append(1)\n            result.append(tmp)\n        return result"
    },
    {
        "number": 118,
        "title": "Pascal\"s Triangle",
        "difficulty": 0,
        "prompt": "class Solution:\n    def generate(self, numRows: int) -> List[List[int]]:\n        \"\"\"\n        Given an integer numRows, return the first numRows of Pascal's triangle.\n        In Pascal's triangle, each number is the sum of the two numbers directly above it as shown:\n        Example 1:\n        Input: numRows = 5\n        Output: [[1],[1,1],[1,2,1],[1,3,3,1],[1,4,6,4,1]]\n        Example 2:\n        Input: numRows = 1\n        Output: [[1]]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 3,
        "answer": "        if not numRows:\n            return []\n        if numRows == 1:\n            return [[1]]\n        pre, cur = [1], [1, 1]\n        for i in range(2, numRows):\n            cur = [1] + [cur[j] + cur[j + 1] for j in range(len(cur) - 1)] + [1]\n            pre, cur = cur, pre\n        return pre"
    },
    {
        "number": 118,
        "title": "Pascal\"s Triangle",
        "difficulty": 0,
        "prompt": "class Solution:\n    def generate(self, numRows: int) -> List[List[int]]:\n        \"\"\"\n        Given an integer numRows, return the first numRows of Pascal's triangle.\n        In Pascal's triangle, each number is the sum of the two numbers directly above it as shown:\n        Example 1:\n        Input: numRows = 5\n        Output: [[1],[1,1],[1,2,1],[1,3,3,1],[1,4,6,4,1]]\n        Example 2:\n        Input: numRows = 1\n        Output: [[1]]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 4,
        "answer": "        # Initialize empty list\n        output = [[] for _ in range(numRows)]\n        # Iterate through each row\n        for i in range(numRows):\n            # Set first element as 1\n            output[i].append(1)\n            # Iterate through each element in current row\n            for j in range(1, i):\n                # Add current element to previous element\n                output[i].append(output[i-1][j-1] + output[i-1][j])\n            # Append the last element in current row\n            output[i].append(1)\n        # return output\n        return output if numRows else []"
    },
    {
        "number": 118,
        "title": "Pascal\"s Triangle",
        "difficulty": 0,
        "prompt": "class Solution:\n    def generate(self, numRows: int) -> List[List[int]]:\n        \"\"\"\n        Given an integer numRows, return the first numRows of Pascal's triangle.\n        In Pascal's triangle, each number is the sum of the two numbers directly above it as shown:\n        Example 1:\n        Input: numRows = 5\n        Output: [[1],[1,1],[1,2,1],[1,3,3,1],[1,4,6,4,1]]\n        Example 2:\n        Input: numRows = 1\n        Output: [[1]]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 5,
        "answer": "        triangle = [[1]]\n        if numRows < 2:\n            return triangle\n        else:\n            for i in range(1, numRows):\n                prev_row = triangle[i - 1]\n                curr_row = [1]\n                for j in range(1, len(prev_row)):\n                    curr_row.append(prev_row[j - 1] + prev_row[j])\n                curr_row.append(1)\n                triangle.append(curr_row)\n        return triangle"
    },
    {
        "number": 119,
        "title": "Pascal\"s Triangle II",
        "difficulty": 0,
        "prompt": "class Solution:\n    def getRow(self, rowIndex: int) -> List[int]:\n        \"\"\"\n        Given an integer rowIndex, return the rowIndexth (0-indexed) row of the Pascal's triangle.\n        In Pascal's triangle, each number is the sum of the two numbers directly above it as shown:\n        Example 1:\n        Input: rowIndex = 3\n        Output: [1,3,3,1]\n        Example 2:\n        Input: rowIndex = 0\n        Output: [1]\n        Example 3:\n        Input: rowIndex = 1\n        Output: [1,1]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        if rowIndex == 0:\n            return [1]\n        if rowIndex == 1:\n            return [1, 1]\n        if rowIndex == 2:\n            return [1, 2, 1]\n        else:\n            res = [1, 1]\n            for i in range(2, rowIndex + 1):\n                temp = [1]\n                for j in range(1, len(res) - 1):\n                    temp.append(res[j] + res[j + 1])\n                temp.append(1)\n                res = temp\n            return res"
    },
    {
        "number": 119,
        "title": "Pascal\"s Triangle II",
        "difficulty": 0,
        "prompt": "class Solution:\n    def getRow(self, rowIndex: int) -> List[int]:\n        \"\"\"\n        Given an integer rowIndex, return the rowIndexth (0-indexed) row of the Pascal's triangle.\n        In Pascal's triangle, each number is the sum of the two numbers directly above it as shown:\n        Example 1:\n        Input: rowIndex = 3\n        Output: [1,3,3,1]\n        Example 2:\n        Input: rowIndex = 0\n        Output: [1]\n        Example 3:\n        Input: rowIndex = 1\n        Output: [1,1]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        result = [1]\n        for i in range(rowIndex):\n            result = [x + y for x, y in zip([0] + result, result + [0])]\n        return result\n<|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>"
    },
    {
        "number": 119,
        "title": "Pascal\"s Triangle II",
        "difficulty": 0,
        "prompt": "class Solution:\n    def getRow(self, rowIndex: int) -> List[int]:\n        \"\"\"\n        Given an integer rowIndex, return the rowIndexth (0-indexed) row of the Pascal's triangle.\n        In Pascal's triangle, each number is the sum of the two numbers directly above it as shown:\n        Example 1:\n        Input: rowIndex = 3\n        Output: [1,3,3,1]\n        Example 2:\n        Input: rowIndex = 0\n        Output: [1]\n        Example 3:\n        Input: rowIndex = 1\n        Output: [1,1]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 3,
        "answer": "        res = [1]\n        for i in range(rowIndex):\n            tmp = [1]\n            for j in range(len(res) - 1):\n                tmp.append(res[j] + res[j + 1])\n            tmp.append(1)\n            res = tmp\n        return res"
    },
    {
        "number": 119,
        "title": "Pascal\"s Triangle II",
        "difficulty": 0,
        "prompt": "class Solution:\n    def getRow(self, rowIndex: int) -> List[int]:\n        \"\"\"\n        Given an integer rowIndex, return the rowIndexth (0-indexed) row of the Pascal's triangle.\n        In Pascal's triangle, each number is the sum of the two numbers directly above it as shown:\n        Example 1:\n        Input: rowIndex = 3\n        Output: [1,3,3,1]\n        Example 2:\n        Input: rowIndex = 0\n        Output: [1]\n        Example 3:\n        Input: rowIndex = 1\n        Output: [1,1]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 4,
        "answer": "        prev = [1]\n        for i in range(1, rowIndex+1):\n            current = [1]\n            for j in range(1, i):\n                current.append(prev[j] + prev[j-1])\n            current.append(1)\n            prev = current\n        return current"
    },
    {
        "number": 119,
        "title": "Pascal\"s Triangle II",
        "difficulty": 0,
        "prompt": "class Solution:\n    def getRow(self, rowIndex: int) -> List[int]:\n        \"\"\"\n        Given an integer rowIndex, return the rowIndexth (0-indexed) row of the Pascal's triangle.\n        In Pascal's triangle, each number is the sum of the two numbers directly above it as shown:\n        Example 1:\n        Input: rowIndex = 3\n        Output: [1,3,3,1]\n        Example 2:\n        Input: rowIndex = 0\n        Output: [1]\n        Example 3:\n        Input: rowIndex = 1\n        Output: [1,1]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 5,
        "answer": "        if rowIndex < 0: return None\n        if rowIndex == 0: return [1]\n        if rowIndex == 1: return [1,1]\n        res = [[1],[1,1]]\n        while rowIndex!= 1:\n            res.append([1])\n            for i in range(len(res[-2])-1):\n                res[-1].append(res[-2][i] + res[-2][i+1])\n            res[-1].append(1)\n            rowIndex -= 1\n        return res[-1]"
    },
    {
        "number": 120,
        "title": "Triangle",
        "difficulty": 1,
        "prompt": "class Solution:\n    def minimumTotal(self, triangle: List[List[int]]) -> int:\n        \"\"\"\n        Given a triangle array, return the minimum path sum from top to bottom.\n        For each step, you may move to an adjacent number of the row below. More formally, if you are on index i on the current row, you may move to either index i or index i + 1 on the next row.\n        Example 1:\n        Input: triangle = [[2],[3,4],[6,5,7],[4,1,8,3]]\n        Output: 11\n        Explanation: The triangle looks like:\n           2\n          3 4\n         6 5 7\n        4 1 8 3\n        The minimum path sum from top to bottom is 2 + 3 + 5 + 1 = 11 (underlined above).\n        Example 2:\n        Input: triangle = [[-10]]\n        Output: -10\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        self.cache = {}\n        return self.getMinimumPath(triangle, 0, 0)"
    },
    {
        "number": 120,
        "title": "Triangle",
        "difficulty": 1,
        "prompt": "class Solution:\n    def minimumTotal(self, triangle: List[List[int]]) -> int:\n        \"\"\"\n        Given a triangle array, return the minimum path sum from top to bottom.\n        For each step, you may move to an adjacent number of the row below. More formally, if you are on index i on the current row, you may move to either index i or index i + 1 on the next row.\n        Example 1:\n        Input: triangle = [[2],[3,4],[6,5,7],[4,1,8,3]]\n        Output: 11\n        Explanation: The triangle looks like:\n           2\n          3 4\n         6 5 7\n        4 1 8 3\n        The minimum path sum from top to bottom is 2 + 3 + 5 + 1 = 11 (underlined above).\n        Example 2:\n        Input: triangle = [[-10]]\n        Output: -10\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        if not triangle:\n            return\n        n = len(triangle)\n        dp = triangle[-1]\n        for i in range(n-2, -1, -1):\n            for j in range(len(triangle[i])):\n                dp[j] = min(dp[j], dp[j+1]) + triangle[i][j]\n        return dp[0]"
    },
    {
        "number": 120,
        "title": "Triangle",
        "difficulty": 1,
        "prompt": "class Solution:\n    def minimumTotal(self, triangle: List[List[int]]) -> int:\n        \"\"\"\n        Given a triangle array, return the minimum path sum from top to bottom.\n        For each step, you may move to an adjacent number of the row below. More formally, if you are on index i on the current row, you may move to either index i or index i + 1 on the next row.\n        Example 1:\n        Input: triangle = [[2],[3,4],[6,5,7],[4,1,8,3]]\n        Output: 11\n        Explanation: The triangle looks like:\n           2\n          3 4\n         6 5 7\n        4 1 8 3\n        The minimum path sum from top to bottom is 2 + 3 + 5 + 1 = 11 (underlined above).\n        Example 2:\n        Input: triangle = [[-10]]\n        Output: -10\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 3,
        "answer": "        if not triangle:\n            return 0\n        if len(triangle) == 1:\n            return triangle[0][0]\n        # The DP matrix is created with len(row) + 1\n        # The first row is just the input triangle\n        dp = [0] * (len(triangle) + 1)\n        dp[1] = triangle[0][0]\n        # We use a dummy array, the last element will not be used\n        dummy = [0] * (len(triangle) + 1)\n        # Iteration starts from row 2\n        for i in range(2, len(triangle) + 1):\n            # j represents the index of the current row\n            # The first and second elements in the current row is determined\n            # The first element is determined by the element directly above\n            # The second element is determined by the element to the left of the element directly above\n            j = 1\n            # The last element of the previous row will not be used\n            dummy[j] = sys.maxsize\n            # The first element of the current row will be the element directly above\n            dummy[j+1] = triangle[i-1][0]\n            # The second element of the current row will be the element to the left of the element directly above\n            dummy[j+2] = triangle"
    },
    {
        "number": 120,
        "title": "Triangle",
        "difficulty": 1,
        "prompt": "class Solution:\n    def minimumTotal(self, triangle: List[List[int]]) -> int:\n        \"\"\"\n        Given a triangle array, return the minimum path sum from top to bottom.\n        For each step, you may move to an adjacent number of the row below. More formally, if you are on index i on the current row, you may move to either index i or index i + 1 on the next row.\n        Example 1:\n        Input: triangle = [[2],[3,4],[6,5,7],[4,1,8,3]]\n        Output: 11\n        Explanation: The triangle looks like:\n           2\n          3 4\n         6 5 7\n        4 1 8 3\n        The minimum path sum from top to bottom is 2 + 3 + 5 + 1 = 11 (underlined above).\n        Example 2:\n        Input: triangle = [[-10]]\n        Output: -10\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 4,
        "answer": "        \n        if not triangle:\n            return 0\n        \n        dp = [0 for _ in range(len(triangle))]\n        dp[0] = triangle[0][0]\n        \n        for i in range(1, len(triangle)):\n            dp[i] = triangle[i][0] + min(dp[i-1], dp[i-2])\n            for j in range(1, i):\n                dp[i] = triangle[i][j] + min(dp[i-1], dp[i-2])\n                \n        return min(dp[-1], dp[-2])<|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>"
    },
    {
        "number": 120,
        "title": "Triangle",
        "difficulty": 1,
        "prompt": "class Solution:\n    def minimumTotal(self, triangle: List[List[int]]) -> int:\n        \"\"\"\n        Given a triangle array, return the minimum path sum from top to bottom.\n        For each step, you may move to an adjacent number of the row below. More formally, if you are on index i on the current row, you may move to either index i or index i + 1 on the next row.\n        Example 1:\n        Input: triangle = [[2],[3,4],[6,5,7],[4,1,8,3]]\n        Output: 11\n        Explanation: The triangle looks like:\n           2\n          3 4\n         6 5 7\n        4 1 8 3\n        The minimum path sum from top to bottom is 2 + 3 + 5 + 1 = 11 (underlined above).\n        Example 2:\n        Input: triangle = [[-10]]\n        Output: -10\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 5,
        "answer": "        # Solution 1 - Leetcode DP solution\n        # O(n^2) time\n        # O(n) space\n        dp = triangle[-1]\n        for i in range(len(triangle) - 2, -1, -1):\n            for j in range(len(triangle[i])):\n                dp[j] = min(dp[j], dp[j+1]) + triangle[i][j]\n        return dp[0]"
    },
    {
        "number": 121,
        "title": "Best Time to Buy and Sell Stock",
        "difficulty": 0,
        "prompt": "class Solution:\n    def maxProfit(self, prices: List[int]) -> int:\n        \"\"\"\n        You are given an array prices where prices[i] is the price of a given stock on the ith day.\n        You want to maximize your profit by choosing a single day to buy one stock and choosing a different day in the future to sell that stock.\n        Return the maximum profit you can achieve from this transaction. If you cannot achieve any profit, return 0.\n        Example 1:\n        Input: prices = [7,1,5,3,6,4]\n        Output: 5\n        Explanation: Buy on day 2 (price = 1) and sell on day 5 (price = 6), profit = 6-1 = 5.\n        Note that buying on day 2 and selling on day 1 is not allowed because you must buy before you sell.\n        Example 2:\n        Input: prices = [7,6,4,3,1]\n        Output: 0\n        Explanation: In this case, no transactions are done and the max profit = 0.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        if len(prices) < 2:\n            return 0\n        dps = [[0, 0] for _ in range(len(prices))]\n        dps[0][0] = 0\n        dps[0][1] = -prices[0]\n        max_profit = 0\n        for i in range(1, len(prices)):\n            dps[i][0] = max(dps[i-1][0], dps[i-1][1]+prices[i])\n            dps[i][1] = max(dps[i-1][1], dps[i-1][0]-prices[i])\n            max_profit = max(max_profit, dps[i][0])\n        return max_profit\n<|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>"
    },
    {
        "number": 121,
        "title": "Best Time to Buy and Sell Stock",
        "difficulty": 0,
        "prompt": "class Solution:\n    def maxProfit(self, prices: List[int]) -> int:\n        \"\"\"\n        You are given an array prices where prices[i] is the price of a given stock on the ith day.\n        You want to maximize your profit by choosing a single day to buy one stock and choosing a different day in the future to sell that stock.\n        Return the maximum profit you can achieve from this transaction. If you cannot achieve any profit, return 0.\n        Example 1:\n        Input: prices = [7,1,5,3,6,4]\n        Output: 5\n        Explanation: Buy on day 2 (price = 1) and sell on day 5 (price = 6), profit = 6-1 = 5.\n        Note that buying on day 2 and selling on day 1 is not allowed because you must buy before you sell.\n        Example 2:\n        Input: prices = [7,6,4,3,1]\n        Output: 0\n        Explanation: In this case, no transactions are done and the max profit = 0.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        \n        min_buy = float('inf')\n        max_profit = 0\n        for p in prices:\n            min_buy = min(min_buy, p)\n            max_profit = max(max_profit, p - min_buy)\n            \n        return max_profit\n<|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>"
    },
    {
        "number": 121,
        "title": "Best Time to Buy and Sell Stock",
        "difficulty": 0,
        "prompt": "class Solution:\n    def maxProfit(self, prices: List[int]) -> int:\n        \"\"\"\n        You are given an array prices where prices[i] is the price of a given stock on the ith day.\n        You want to maximize your profit by choosing a single day to buy one stock and choosing a different day in the future to sell that stock.\n        Return the maximum profit you can achieve from this transaction. If you cannot achieve any profit, return 0.\n        Example 1:\n        Input: prices = [7,1,5,3,6,4]\n        Output: 5\n        Explanation: Buy on day 2 (price = 1) and sell on day 5 (price = 6), profit = 6-1 = 5.\n        Note that buying on day 2 and selling on day 1 is not allowed because you must buy before you sell.\n        Example 2:\n        Input: prices = [7,6,4,3,1]\n        Output: 0\n        Explanation: In this case, no transactions are done and the max profit = 0.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 3,
        "answer": "        #Time Complexity: O(n)\n        #Space Complexity: O(1)\n        #\u601d\u8def: \u52a8\u6001\u89c4\u5212, \u4eca\u5929\u4e70\u5165, \u7b2c\u4e8c\u5929\u5356\u51fa\n        # \u53ef\u4ee5\u628a\u7b2c\u4e00\u5929\u4e70\u5165\u7684\u80a1\u7968\u89c6\u4e3a\u662f\u6301\u6709\u80a1\u7968\u7684\u72b6\u6001, \u7b2c\u4e8c\u5929\u5356\u51fa\u7684\u80a1\u7968\u89c6\u4e3a\u662f\u6ca1\u6709\u6301\u6709\u80a1\u7968\u7684\u72b6\u6001\n        # \u4ece\u540e\u5f80\u524d\u904d\u5386\u6570\u7ec4, \u8bb0\u5f55\u6bcf\u4e2a\u6570\u5b57\u4e3a\u7b2c\u51e0\u5929\u7684\u65f6\u5019\u4e70\u5165\u6216\u8005\u5356\u51fa, \u6700\u540e\u6bd4\u8f83\u6700\u5927\u7684\u5dee\u503c\u5373\u53ef\n        if not prices:\n            return 0\n        sold, held = float(\"-inf\"), float(\"-inf\")\n        for price in prices:\n            sold, held = held+price, max(held, sold-price)\n        return max(sold, held"
    },
    {
        "number": 121,
        "title": "Best Time to Buy and Sell Stock",
        "difficulty": 0,
        "prompt": "class Solution:\n    def maxProfit(self, prices: List[int]) -> int:\n        \"\"\"\n        You are given an array prices where prices[i] is the price of a given stock on the ith day.\n        You want to maximize your profit by choosing a single day to buy one stock and choosing a different day in the future to sell that stock.\n        Return the maximum profit you can achieve from this transaction. If you cannot achieve any profit, return 0.\n        Example 1:\n        Input: prices = [7,1,5,3,6,4]\n        Output: 5\n        Explanation: Buy on day 2 (price = 1) and sell on day 5 (price = 6), profit = 6-1 = 5.\n        Note that buying on day 2 and selling on day 1 is not allowed because you must buy before you sell.\n        Example 2:\n        Input: prices = [7,6,4,3,1]\n        Output: 0\n        Explanation: In this case, no transactions are done and the max profit = 0.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 4,
        "answer": "        max_profit = 0\n        min_price = sys.maxsize\n        for price in prices:\n            min_price = min(min_price, price)\n            max_profit = max(max_profit, price - min_price)\n        return max_profit"
    },
    {
        "number": 121,
        "title": "Best Time to Buy and Sell Stock",
        "difficulty": 0,
        "prompt": "class Solution:\n    def maxProfit(self, prices: List[int]) -> int:\n        \"\"\"\n        You are given an array prices where prices[i] is the price of a given stock on the ith day.\n        You want to maximize your profit by choosing a single day to buy one stock and choosing a different day in the future to sell that stock.\n        Return the maximum profit you can achieve from this transaction. If you cannot achieve any profit, return 0.\n        Example 1:\n        Input: prices = [7,1,5,3,6,4]\n        Output: 5\n        Explanation: Buy on day 2 (price = 1) and sell on day 5 (price = 6), profit = 6-1 = 5.\n        Note that buying on day 2 and selling on day 1 is not allowed because you must buy before you sell.\n        Example 2:\n        Input: prices = [7,6,4,3,1]\n        Output: 0\n        Explanation: In this case, no transactions are done and the max profit = 0.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 5,
        "answer": "        n = len(prices)\n        if n <= 1:\n            return 0\n        dp = [[0,0] for _ in range(n)]\n        dp[0][0],dp[0][1] = 0, -prices[0]\n        dp[1][0],dp[1][1] = max(0,prices[1]-prices[0]),max(0,prices[1]-prices[0])\n        for i in range(2,n):\n            dp[i][0] = max(dp[i-1][0], dp[i-1][1]+prices[i])\n            dp[i][1] = max(dp[i-1][1], dp[i-2][0]-prices[i])\n        return dp[n-1][0]\n    \n    def maxProfit_v1(self, prices: List[int]) -> int:\n        n = len(prices)\n        if n <= 1:\n            return 0\n        dp = [[0,0] for _ in range(n)]\n        dp[0][0],dp[0][1] = 0, -prices[0]\n        dp[1][0],dp[1][1] = max(0,prices[1]-prices[0"
    },
    {
        "number": 122,
        "title": "Best Time to Buy and Sell Stock II",
        "difficulty": 1,
        "prompt": "class Solution:\n    def maxProfit(self, prices: List[int]) -> int:\n        \"\"\"\n        You are given an integer array prices where prices[i] is the price of a given stock on the ith day.\n        On each day, you may decide to buy and/or sell the stock. You can only hold at most one share of the stock at any time. However, you can buy it then immediately sell it on the same day.\n        Find and return the maximum profit you can achieve.\n        Example 1:\n        Input: prices = [7,1,5,3,6,4]\n        Output: 7\n        Explanation: Buy on day 2 (price = 1) and sell on day 3 (price = 5), profit = 5-1 = 4.\n        Then buy on day 4 (price = 3) and sell on day 5 (price = 6), profit = 6-3 = 3.\n        Total profit is 4 + 3 = 7.\n        Example 2:\n        Input: prices = [1,2,3,4,5]\n        Output: 4\n        Explanation: Buy on day 1 (price = 1) and sell on day 5 (price = 5), profit = 5-1 = 4.\n        Total profit is 4.\n        Example 3:\n        Input: prices = [7,6,4,3,1]\n        Output: 0\n        Explanation: There is no way to make a positive profit, so we never buy the stock to achieve the maximum profit of 0.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        if not prices:\n            return 0"
    },
    {
        "number": 122,
        "title": "Best Time to Buy and Sell Stock II",
        "difficulty": 1,
        "prompt": "class Solution:\n    def maxProfit(self, prices: List[int]) -> int:\n        \"\"\"\n        You are given an integer array prices where prices[i] is the price of a given stock on the ith day.\n        On each day, you may decide to buy and/or sell the stock. You can only hold at most one share of the stock at any time. However, you can buy it then immediately sell it on the same day.\n        Find and return the maximum profit you can achieve.\n        Example 1:\n        Input: prices = [7,1,5,3,6,4]\n        Output: 7\n        Explanation: Buy on day 2 (price = 1) and sell on day 3 (price = 5), profit = 5-1 = 4.\n        Then buy on day 4 (price = 3) and sell on day 5 (price = 6), profit = 6-3 = 3.\n        Total profit is 4 + 3 = 7.\n        Example 2:\n        Input: prices = [1,2,3,4,5]\n        Output: 4\n        Explanation: Buy on day 1 (price = 1) and sell on day 5 (price = 5), profit = 5-1 = 4.\n        Total profit is 4.\n        Example 3:\n        Input: prices = [7,6,4,3,1]\n        Output: 0\n        Explanation: There is no way to make a positive profit, so we never buy the stock to achieve the maximum profit of 0.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        # on the ith day, you can only make the following 2 choices:\n        # 1. buy stock on day i if the stock price is less than or equal to day i's price\n        # 2. sell stock on day i if the stock price is greater than day i's price\n        # the maximum profit is the sum of all the possible profits\n        # for example, if we have a list of prices = [7,1,5,3,6,4]\n        # 1st day, you can only buy if the price is less than or equal to 1\n        # 2nd day, you can only sell if the price is greater than or equal to 1\n        # 3rd day, you can only sell if the price is greater than or equal to 3\n        # 4th day, you can only sell if the price is greater than or equal to 6\n        # profit = 1 - 1 = 0\n        # 5th day, you can only sell if the price is greater than or equal to 6\n        # profit = 5 - 3 = 2\n        # 6th day, you can only sell if the price is greater than or equal to 4\n        # profit = 6 - 4 = 2\n        # 7th day, you can only sell if the price is greater than or equal to 3\n        # profit = 7 - 3 = 4\n        # profit = 4 + 2 + 2"
    },
    {
        "number": 122,
        "title": "Best Time to Buy and Sell Stock II",
        "difficulty": 1,
        "prompt": "class Solution:\n    def maxProfit(self, prices: List[int]) -> int:\n        \"\"\"\n        You are given an integer array prices where prices[i] is the price of a given stock on the ith day.\n        On each day, you may decide to buy and/or sell the stock. You can only hold at most one share of the stock at any time. However, you can buy it then immediately sell it on the same day.\n        Find and return the maximum profit you can achieve.\n        Example 1:\n        Input: prices = [7,1,5,3,6,4]\n        Output: 7\n        Explanation: Buy on day 2 (price = 1) and sell on day 3 (price = 5), profit = 5-1 = 4.\n        Then buy on day 4 (price = 3) and sell on day 5 (price = 6), profit = 6-3 = 3.\n        Total profit is 4 + 3 = 7.\n        Example 2:\n        Input: prices = [1,2,3,4,5]\n        Output: 4\n        Explanation: Buy on day 1 (price = 1) and sell on day 5 (price = 5), profit = 5-1 = 4.\n        Total profit is 4.\n        Example 3:\n        Input: prices = [7,6,4,3,1]\n        Output: 0\n        Explanation: There is no way to make a positive profit, so we never buy the stock to achieve the maximum profit of 0.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 3,
        "answer": "        if len(prices) == 0:\n            return 0\n        profit = 0\n        for i in range(1, len(prices)):\n            if prices[i] > prices[i-1]:\n                profit += prices[i] - prices[i-1]\n        return profit"
    },
    {
        "number": 122,
        "title": "Best Time to Buy and Sell Stock II",
        "difficulty": 1,
        "prompt": "class Solution:\n    def maxProfit(self, prices: List[int]) -> int:\n        \"\"\"\n        You are given an integer array prices where prices[i] is the price of a given stock on the ith day.\n        On each day, you may decide to buy and/or sell the stock. You can only hold at most one share of the stock at any time. However, you can buy it then immediately sell it on the same day.\n        Find and return the maximum profit you can achieve.\n        Example 1:\n        Input: prices = [7,1,5,3,6,4]\n        Output: 7\n        Explanation: Buy on day 2 (price = 1) and sell on day 3 (price = 5), profit = 5-1 = 4.\n        Then buy on day 4 (price = 3) and sell on day 5 (price = 6), profit = 6-3 = 3.\n        Total profit is 4 + 3 = 7.\n        Example 2:\n        Input: prices = [1,2,3,4,5]\n        Output: 4\n        Explanation: Buy on day 1 (price = 1) and sell on day 5 (price = 5), profit = 5-1 = 4.\n        Total profit is 4.\n        Example 3:\n        Input: prices = [7,6,4,3,1]\n        Output: 0\n        Explanation: There is no way to make a positive profit, so we never buy the stock to achieve the maximum profit of 0.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 4,
        "answer": "        # Time: O(n^2), O(1)\n        # Space: O(n)\n        if not prices: return 0"
    },
    {
        "number": 122,
        "title": "Best Time to Buy and Sell Stock II",
        "difficulty": 1,
        "prompt": "class Solution:\n    def maxProfit(self, prices: List[int]) -> int:\n        \"\"\"\n        You are given an integer array prices where prices[i] is the price of a given stock on the ith day.\n        On each day, you may decide to buy and/or sell the stock. You can only hold at most one share of the stock at any time. However, you can buy it then immediately sell it on the same day.\n        Find and return the maximum profit you can achieve.\n        Example 1:\n        Input: prices = [7,1,5,3,6,4]\n        Output: 7\n        Explanation: Buy on day 2 (price = 1) and sell on day 3 (price = 5), profit = 5-1 = 4.\n        Then buy on day 4 (price = 3) and sell on day 5 (price = 6), profit = 6-3 = 3.\n        Total profit is 4 + 3 = 7.\n        Example 2:\n        Input: prices = [1,2,3,4,5]\n        Output: 4\n        Explanation: Buy on day 1 (price = 1) and sell on day 5 (price = 5), profit = 5-1 = 4.\n        Total profit is 4.\n        Example 3:\n        Input: prices = [7,6,4,3,1]\n        Output: 0\n        Explanation: There is no way to make a positive profit, so we never buy the stock to achieve the maximum profit of 0.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 5,
        "answer": "        \n        if not prices:\n            return 0\n        \n        max_profit = 0\n        min_price = prices[0]\n        \n        for price in prices:\n            min_price = min(min_price, price)\n            max_profit = max(max_profit, price-min_price)\n        \n        return max_profit\n    \n    def maxProfit_no_trasaction(self, prices: List[int]) -> int:\n        \"\"\"\n        You are given an integer array prices where prices[i] is the price of a given stock on the ith day.\n        Find and return the maximum profit you can achieve. You may complete as many transactions as you like (i.e., buy one and sell one share of the stock multiple times).\n        Note: You may not engage in multiple transactions simultaneously (i.e., you must sell the stock before you buy again).\n        Example 1:\n        Input: prices = [7,1,5,3,6,4]\n        Output: 7\n        Explanation: Buy on day 2 (price = 1) and sell on day 3 (price = 5), profit = 5-1 = 4.\n        Then buy on day 4 (price = 3) and sell on day 5 (price = 6), profit = 6-3 = 3.\n        Total profit is 4 + 3"
    },
    {
        "number": 123,
        "title": "Best Time to Buy and Sell Stock III",
        "difficulty": 2,
        "prompt": "class Solution:\n    def maxProfit(self, prices: List[int]) -> int:\n        \"\"\"\n        You are given an array prices where prices[i] is the price of a given stock on the ith day.\n        Find the maximum profit you can achieve. You may complete at most two transactions.\n        Note: You may not engage in multiple transactions simultaneously (i.e., you must sell the stock before you buy again).\n        Example 1:\n        Input: prices = [3,3,5,0,0,3,1,4]\n        Output: 6\n        Explanation: Buy on day 4 (price = 0) and sell on day 6 (price = 3), profit = 3-0 = 3.\n        Then buy on day 7 (price = 1) and sell on day 8 (price = 4), profit = 4-1 = 3.\n        Example 2:\n        Input: prices = [1,2,3,4,5]\n        Output: 4\n        Explanation: Buy on day 1 (price = 1) and sell on day 5 (price = 5), profit = 5-1 = 4.\n        Note that you cannot buy on day 1, buy on day 2 and sell them later, as you are engaging multiple transactions at the same time. You must sell before buying again.\n        Example 3:\n        Input: prices = [7,6,4,3,1]\n        Output: 0\n        Explanation: In this case, no transaction is done, i.e. max profit = 0.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        # if len(prices) < 2:\n        #     return 0\n        # dp = [[0] * 2 for _ in range(len(prices))]\n        # dp[0][0] = 0\n        # dp[0][1] = -prices[0]\n        # for i in range(1, len(prices)):\n        #     dp[i][0] = max(dp[i-1][0], dp[i-1][1] + prices[i])\n        #     dp[i][1] = max(dp[i-1][1], dp[i-1][0] - prices[i])\n        # return dp[-1][0]"
    },
    {
        "number": 123,
        "title": "Best Time to Buy and Sell Stock III",
        "difficulty": 2,
        "prompt": "class Solution:\n    def maxProfit(self, prices: List[int]) -> int:\n        \"\"\"\n        You are given an array prices where prices[i] is the price of a given stock on the ith day.\n        Find the maximum profit you can achieve. You may complete at most two transactions.\n        Note: You may not engage in multiple transactions simultaneously (i.e., you must sell the stock before you buy again).\n        Example 1:\n        Input: prices = [3,3,5,0,0,3,1,4]\n        Output: 6\n        Explanation: Buy on day 4 (price = 0) and sell on day 6 (price = 3), profit = 3-0 = 3.\n        Then buy on day 7 (price = 1) and sell on day 8 (price = 4), profit = 4-1 = 3.\n        Example 2:\n        Input: prices = [1,2,3,4,5]\n        Output: 4\n        Explanation: Buy on day 1 (price = 1) and sell on day 5 (price = 5), profit = 5-1 = 4.\n        Note that you cannot buy on day 1, buy on day 2 and sell them later, as you are engaging multiple transactions at the same time. You must sell before buying again.\n        Example 3:\n        Input: prices = [7,6,4,3,1]\n        Output: 0\n        Explanation: In this case, no transaction is done, i.e. max profit = 0.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        if len(prices) <= 1:\n            return 0\n        dp = [[0, 0] for _ in range(len(prices))]\n        dp[0][0], dp[0][1] = 0, -prices[0]\n        for i in range(1, len(prices)):\n            dp[i][0] = max(dp[i - 1][0], dp[i - 1][1] + prices[i])\n            dp[i][1] = max(dp[i - 1][1], dp[i - 1][0] - prices[i])\n        return dp[-1][0]"
    },
    {
        "number": 123,
        "title": "Best Time to Buy and Sell Stock III",
        "difficulty": 2,
        "prompt": "class Solution:\n    def maxProfit(self, prices: List[int]) -> int:\n        \"\"\"\n        You are given an array prices where prices[i] is the price of a given stock on the ith day.\n        Find the maximum profit you can achieve. You may complete at most two transactions.\n        Note: You may not engage in multiple transactions simultaneously (i.e., you must sell the stock before you buy again).\n        Example 1:\n        Input: prices = [3,3,5,0,0,3,1,4]\n        Output: 6\n        Explanation: Buy on day 4 (price = 0) and sell on day 6 (price = 3), profit = 3-0 = 3.\n        Then buy on day 7 (price = 1) and sell on day 8 (price = 4), profit = 4-1 = 3.\n        Example 2:\n        Input: prices = [1,2,3,4,5]\n        Output: 4\n        Explanation: Buy on day 1 (price = 1) and sell on day 5 (price = 5), profit = 5-1 = 4.\n        Note that you cannot buy on day 1, buy on day 2 and sell them later, as you are engaging multiple transactions at the same time. You must sell before buying again.\n        Example 3:\n        Input: prices = [7,6,4,3,1]\n        Output: 0\n        Explanation: In this case, no transaction is done, i.e. max profit = 0.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 3,
        "answer": "        # the idea is to have two states: 1) buy/sell\n        # 2) skip this day if no transaction is done\n        # if there's any day when we sell at any point\n        # then there's a profit\n        # we have to minimize the cost\n        # so we want to have the minimum number of days\n        # to have at least 2 transactions\n        # and we can try all combinations of two transactions\n        # and see which one produces the max profit\n        \n        # min buy, sell, profit\n        # dynamic programming\n        n = len(prices)\n        dp = [[0]*3 for _ in range(n)]\n        dp[0][0] = -prices[0]\n        dp[0][1] = 0\n        dp[0][2] = 0\n        for i in range(1, n):\n            dp[i][0] = dp[i-1][0]\n            dp[i][1] = max(dp[i-1][1], dp[i-1][0] - prices[i])\n            dp[i][2] = dp[i-1][1] + prices[i]\n        return max(dp[n-1][0], dp[n-1][1], dp[n-1][2])\n    \n    "
    },
    {
        "number": 123,
        "title": "Best Time to Buy and Sell Stock III",
        "difficulty": 2,
        "prompt": "class Solution:\n    def maxProfit(self, prices: List[int]) -> int:\n        \"\"\"\n        You are given an array prices where prices[i] is the price of a given stock on the ith day.\n        Find the maximum profit you can achieve. You may complete at most two transactions.\n        Note: You may not engage in multiple transactions simultaneously (i.e., you must sell the stock before you buy again).\n        Example 1:\n        Input: prices = [3,3,5,0,0,3,1,4]\n        Output: 6\n        Explanation: Buy on day 4 (price = 0) and sell on day 6 (price = 3), profit = 3-0 = 3.\n        Then buy on day 7 (price = 1) and sell on day 8 (price = 4), profit = 4-1 = 3.\n        Example 2:\n        Input: prices = [1,2,3,4,5]\n        Output: 4\n        Explanation: Buy on day 1 (price = 1) and sell on day 5 (price = 5), profit = 5-1 = 4.\n        Note that you cannot buy on day 1, buy on day 2 and sell them later, as you are engaging multiple transactions at the same time. You must sell before buying again.\n        Example 3:\n        Input: prices = [7,6,4,3,1]\n        Output: 0\n        Explanation: In this case, no transaction is done, i.e. max profit = 0.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 4,
        "answer": "        # Dynamic Programming Solution\n        if len(prices) < 2:\n            return 0\n        diff = [prices[i] - prices[i-1] for i in range(1, len(prices))]\n        dp = [0] * len(prices)\n        if diff[0] >= 0:\n            dp[0] = diff[0]\n        else:\n            dp[0] = 0\n        if diff[1] >= 0:\n            dp[1] = diff[1]\n        else:\n            dp[1] = 0\n        for i in range(2, len(prices)):\n            if diff[i] >= 0:\n                dp[i] = max(dp[i-1], diff[i] + dp[i-2])\n            else:\n                dp[i] = max(dp[i-1], dp[i-2])\n        return max(dp[-1], dp[-2])\n<|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>"
    },
    {
        "number": 123,
        "title": "Best Time to Buy and Sell Stock III",
        "difficulty": 2,
        "prompt": "class Solution:\n    def maxProfit(self, prices: List[int]) -> int:\n        \"\"\"\n        You are given an array prices where prices[i] is the price of a given stock on the ith day.\n        Find the maximum profit you can achieve. You may complete at most two transactions.\n        Note: You may not engage in multiple transactions simultaneously (i.e., you must sell the stock before you buy again).\n        Example 1:\n        Input: prices = [3,3,5,0,0,3,1,4]\n        Output: 6\n        Explanation: Buy on day 4 (price = 0) and sell on day 6 (price = 3), profit = 3-0 = 3.\n        Then buy on day 7 (price = 1) and sell on day 8 (price = 4), profit = 4-1 = 3.\n        Example 2:\n        Input: prices = [1,2,3,4,5]\n        Output: 4\n        Explanation: Buy on day 1 (price = 1) and sell on day 5 (price = 5), profit = 5-1 = 4.\n        Note that you cannot buy on day 1, buy on day 2 and sell them later, as you are engaging multiple transactions at the same time. You must sell before buying again.\n        Example 3:\n        Input: prices = [7,6,4,3,1]\n        Output: 0\n        Explanation: In this case, no transaction is done, i.e. max profit = 0.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 5,
        "answer": "        if not prices:\n            return 0\n        \n        # 1) keep track of a buy price and buy date, sell price and sell date\n        # 2) for each price, sell on day 1 if price - buy price > 0, return the max profit \n        \n        # when selling a stock, we are not constrained by the current stock price, so we can use two sliding windows\n        \n        # maxProfit[i] = max(prices[i] - minBuyPrice, prices[i] - minSellPrice)\n        \n        # sliding window 1: stores the current minBuyPrice and minSellPrice\n        # sliding window 2: stores the current maxProfit\n        \n        # sliding window 1: stores the current minBuyPrice and minSellPrice\n        # sliding window 2: stores the current maxProfit\n        \n        maxProfit = [0 for i in range(len(prices))]\n        minBuyPrice = float('inf')\n        minSellPrice = float('inf')\n        \n        for i in range(len(prices)):\n            if prices[i] < minBuyPrice:\n                minBuyPrice = prices[i]\n                \n            if prices[i] < minSellPrice:\n                minSellPrice = prices[i]\n                \n            if i == 0:\n                "
    },
    {
        "number": 124,
        "title": "Binary Tree Maximum Path Sum",
        "difficulty": 2,
        "prompt": "class Solution:\n    def maxPathSum(self, root: Optional[TreeNode]) -> int:\n        \"\"\"\n        A path in a binary tree is a sequence of nodes where each pair of adjacent nodes in the sequence has an edge connecting them. A node can only appear in the sequence at most once. Note that the path does not need to pass through the root.\n        The path sum of a path is the sum of the node's values in the path.\n        Given the root of a binary tree, return the maximum path sum of any non-empty path.\n        Example 1:\n        Input: root = [1,2,3]\n        Output: 6\n        Explanation: The optimal path is 2 -> 1 -> 3 with a path sum of 2 + 1 + 3 = 6.\n        Example 2:\n        Input: root = [-10,9,20,null,null,15,7]\n        Output: 42\n        Explanation: The optimal path is 15 -> 20 -> 7 with a path sum of 15 + 20 + 7 = 42.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        self.max_sum = float(\"-inf\")\n        self.helper(root)\n        return self.max_sum\n    \n    def helper(self, root):\n        if root is None:\n            return 0\n        left_gain = self.helper(root.left)\n        right_gain = self.helper(root.right)\n        \n        sum_left_right = left_gain + right_gain + root.val\n        \n        self.max_sum = max(self.max_sum, sum_left_right)\n        \n        return max(left_gain, right_gain, 0) + root.val\n        "
    },
    {
        "number": 124,
        "title": "Binary Tree Maximum Path Sum",
        "difficulty": 2,
        "prompt": "class Solution:\n    def maxPathSum(self, root: Optional[TreeNode]) -> int:\n        \"\"\"\n        A path in a binary tree is a sequence of nodes where each pair of adjacent nodes in the sequence has an edge connecting them. A node can only appear in the sequence at most once. Note that the path does not need to pass through the root.\n        The path sum of a path is the sum of the node's values in the path.\n        Given the root of a binary tree, return the maximum path sum of any non-empty path.\n        Example 1:\n        Input: root = [1,2,3]\n        Output: 6\n        Explanation: The optimal path is 2 -> 1 -> 3 with a path sum of 2 + 1 + 3 = 6.\n        Example 2:\n        Input: root = [-10,9,20,null,null,15,7]\n        Output: 42\n        Explanation: The optimal path is 15 -> 20 -> 7 with a path sum of 15 + 20 + 7 = 42.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        def find_max_path(node):\n            if not node:\n                return 0, float('-inf')\n            \n            left_path_sum, left_max = find_max_path(node.left)\n            right_path_sum, right_max = find_max_path(node.right)\n            \n            node_path_sum = node.val + left_path_sum + right_path_sum\n            node_max = max(node.val, node.val + left_max, node.val + right_max, node_path_sum)\n            \n            return node_path_sum, node_max\n        \n        return find_max_path(root)[1]"
    },
    {
        "number": 124,
        "title": "Binary Tree Maximum Path Sum",
        "difficulty": 2,
        "prompt": "class Solution:\n    def maxPathSum(self, root: Optional[TreeNode]) -> int:\n        \"\"\"\n        A path in a binary tree is a sequence of nodes where each pair of adjacent nodes in the sequence has an edge connecting them. A node can only appear in the sequence at most once. Note that the path does not need to pass through the root.\n        The path sum of a path is the sum of the node's values in the path.\n        Given the root of a binary tree, return the maximum path sum of any non-empty path.\n        Example 1:\n        Input: root = [1,2,3]\n        Output: 6\n        Explanation: The optimal path is 2 -> 1 -> 3 with a path sum of 2 + 1 + 3 = 6.\n        Example 2:\n        Input: root = [-10,9,20,null,null,15,7]\n        Output: 42\n        Explanation: The optimal path is 15 -> 20 -> 7 with a path sum of 15 + 20 + 7 = 42.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 3,
        "answer": "        self.best_sum = float('-inf')\n        def max_gain(node):\n            if not node:\n                return 0\n            # max sum on the left and right sub-trees of node\n            left_gain = max(max_gain(node.left), 0)\n            right_gain = max(max_gain(node.right), 0)\n            # the price to start a new path where `node` is a highest node\n            price_newpath = node.val + left_gain + right_gain\n            # update best_sum\n            self.best_sum = max(self.best_sum, price_newpath)\n            # maximum sum of all possible paths where `node` is a highest node\n            return node.val + max(left_gain, right_gain)"
    },
    {
        "number": 124,
        "title": "Binary Tree Maximum Path Sum",
        "difficulty": 2,
        "prompt": "class Solution:\n    def maxPathSum(self, root: Optional[TreeNode]) -> int:\n        \"\"\"\n        A path in a binary tree is a sequence of nodes where each pair of adjacent nodes in the sequence has an edge connecting them. A node can only appear in the sequence at most once. Note that the path does not need to pass through the root.\n        The path sum of a path is the sum of the node's values in the path.\n        Given the root of a binary tree, return the maximum path sum of any non-empty path.\n        Example 1:\n        Input: root = [1,2,3]\n        Output: 6\n        Explanation: The optimal path is 2 -> 1 -> 3 with a path sum of 2 + 1 + 3 = 6.\n        Example 2:\n        Input: root = [-10,9,20,null,null,15,7]\n        Output: 42\n        Explanation: The optimal path is 15 -> 20 -> 7 with a path sum of 15 + 20 + 7 = 42.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 4,
        "answer": "        if not root:\n            return 0"
    },
    {
        "number": 124,
        "title": "Binary Tree Maximum Path Sum",
        "difficulty": 2,
        "prompt": "class Solution:\n    def maxPathSum(self, root: Optional[TreeNode]) -> int:\n        \"\"\"\n        A path in a binary tree is a sequence of nodes where each pair of adjacent nodes in the sequence has an edge connecting them. A node can only appear in the sequence at most once. Note that the path does not need to pass through the root.\n        The path sum of a path is the sum of the node's values in the path.\n        Given the root of a binary tree, return the maximum path sum of any non-empty path.\n        Example 1:\n        Input: root = [1,2,3]\n        Output: 6\n        Explanation: The optimal path is 2 -> 1 -> 3 with a path sum of 2 + 1 + 3 = 6.\n        Example 2:\n        Input: root = [-10,9,20,null,null,15,7]\n        Output: 42\n        Explanation: The optimal path is 15 -> 20 -> 7 with a path sum of 15 + 20 + 7 = 42.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 5,
        "answer": "        self.max_path = -float('inf')"
    },
    {
        "number": 125,
        "title": "Valid Palindrome",
        "difficulty": 0,
        "prompt": "class Solution:\n    def isPalindrome(self, s: str) -> bool:\n        \"\"\"\n        A phrase is a palindrome if, after converting all uppercase letters into lowercase letters and removing all non-alphanumeric characters, it reads the same forward and backward. Alphanumeric characters include letters and numbers.\n        Given a string s, return true if it is a palindrome, or false otherwise.\n        Example 1:\n        Input: s = \"A man, a plan, a canal: Panama\"\n        Output: true\n        Explanation: \"amanaplanacanalpanama\" is a palindrome.\n        Example 2:\n        Input: s = \"race a car\"\n        Output: false\n        Explanation: \"raceacar\" is not a palindrome.\n        Example 3:\n        Input: s = \" \"\n        Output: true\n        Explanation: s is an empty string \"\" after removing non-alphanumeric characters.\n        Since an empty string reads the same forward and backward, it is a palindrome.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        return self.is_palindrome_iterative(s)"
    },
    {
        "number": 125,
        "title": "Valid Palindrome",
        "difficulty": 0,
        "prompt": "class Solution:\n    def isPalindrome(self, s: str) -> bool:\n        \"\"\"\n        A phrase is a palindrome if, after converting all uppercase letters into lowercase letters and removing all non-alphanumeric characters, it reads the same forward and backward. Alphanumeric characters include letters and numbers.\n        Given a string s, return true if it is a palindrome, or false otherwise.\n        Example 1:\n        Input: s = \"A man, a plan, a canal: Panama\"\n        Output: true\n        Explanation: \"amanaplanacanalpanama\" is a palindrome.\n        Example 2:\n        Input: s = \"race a car\"\n        Output: false\n        Explanation: \"raceacar\" is not a palindrome.\n        Example 3:\n        Input: s = \" \"\n        Output: true\n        Explanation: s is an empty string \"\" after removing non-alphanumeric characters.\n        Since an empty string reads the same forward and backward, it is a palindrome.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        s = ''.join(c for c in s if c.isalnum())\n        s = s.lower()\n        return s == s[::-1]"
    },
    {
        "number": 125,
        "title": "Valid Palindrome",
        "difficulty": 0,
        "prompt": "class Solution:\n    def isPalindrome(self, s: str) -> bool:\n        \"\"\"\n        A phrase is a palindrome if, after converting all uppercase letters into lowercase letters and removing all non-alphanumeric characters, it reads the same forward and backward. Alphanumeric characters include letters and numbers.\n        Given a string s, return true if it is a palindrome, or false otherwise.\n        Example 1:\n        Input: s = \"A man, a plan, a canal: Panama\"\n        Output: true\n        Explanation: \"amanaplanacanalpanama\" is a palindrome.\n        Example 2:\n        Input: s = \"race a car\"\n        Output: false\n        Explanation: \"raceacar\" is not a palindrome.\n        Example 3:\n        Input: s = \" \"\n        Output: true\n        Explanation: s is an empty string \"\" after removing non-alphanumeric characters.\n        Since an empty string reads the same forward and backward, it is a palindrome.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 3,
        "answer": "        s_clean = \"\"\n        for c in s:\n            if c.isalnum():\n                s_clean += c.lower()\n        return s_clean == s_clean[::-1]"
    },
    {
        "number": 125,
        "title": "Valid Palindrome",
        "difficulty": 0,
        "prompt": "class Solution:\n    def isPalindrome(self, s: str) -> bool:\n        \"\"\"\n        A phrase is a palindrome if, after converting all uppercase letters into lowercase letters and removing all non-alphanumeric characters, it reads the same forward and backward. Alphanumeric characters include letters and numbers.\n        Given a string s, return true if it is a palindrome, or false otherwise.\n        Example 1:\n        Input: s = \"A man, a plan, a canal: Panama\"\n        Output: true\n        Explanation: \"amanaplanacanalpanama\" is a palindrome.\n        Example 2:\n        Input: s = \"race a car\"\n        Output: false\n        Explanation: \"raceacar\" is not a palindrome.\n        Example 3:\n        Input: s = \" \"\n        Output: true\n        Explanation: s is an empty string \"\" after removing non-alphanumeric characters.\n        Since an empty string reads the same forward and backward, it is a palindrome.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 4,
        "answer": "        import re\n        s = re.sub(r'\\W+', '', s).lower()\n        return s == s[::-1]"
    },
    {
        "number": 125,
        "title": "Valid Palindrome",
        "difficulty": 0,
        "prompt": "class Solution:\n    def isPalindrome(self, s: str) -> bool:\n        \"\"\"\n        A phrase is a palindrome if, after converting all uppercase letters into lowercase letters and removing all non-alphanumeric characters, it reads the same forward and backward. Alphanumeric characters include letters and numbers.\n        Given a string s, return true if it is a palindrome, or false otherwise.\n        Example 1:\n        Input: s = \"A man, a plan, a canal: Panama\"\n        Output: true\n        Explanation: \"amanaplanacanalpanama\" is a palindrome.\n        Example 2:\n        Input: s = \"race a car\"\n        Output: false\n        Explanation: \"raceacar\" is not a palindrome.\n        Example 3:\n        Input: s = \" \"\n        Output: true\n        Explanation: s is an empty string \"\" after removing non-alphanumeric characters.\n        Since an empty string reads the same forward and backward, it is a palindrome.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 5,
        "answer": "        # Method 1:\n        # Change the string into lowercase, then remove all non-alphanumeric characters\n        # Then check if the string read the same backward and forward\n        # Time complexity: O(n)\n        # Space complexity: O(n)\n        # s = ''.join(i for i in s if i.isalnum())\n        # return s == s[::-1]"
    },
    {
        "number": 126,
        "title": "Word Ladder II",
        "difficulty": 2,
        "prompt": "class Solution:\n    def findLadders(self, beginWord: str, endWord: str, wordList: List[str]) -> List[List[str]]:\n        \"\"\"\n        A transformation sequence from word beginWord to word endWord using a dictionary wordList is a sequence of words beginWord -> s1 -> s2 ->... -> sk such that:\n            Every adjacent pair of words differs by a single letter.\n            Every si for 1 <= i <= k is in wordList. Note that beginWord does not need to be in wordList.\n            sk == endWord\n        Given two words, beginWord and endWord, and a dictionary wordList, return all the shortest transformation sequences from beginWord to endWord, or an empty list if no such sequence exists. Each sequence should be returned as a list of the words [beginWord, s1, s2,..., sk].\n        Example 1:\n        Input: beginWord = \"hit\", endWord = \"cog\", wordList = [\"hot\",\"dot\",\"dog\",\"lot\",\"log\",\"cog\"]\n        Output: [[\"hit\",\"hot\",\"dot\",\"dog\",\"cog\"],[\"hit\",\"hot\",\"lot\",\"log\",\"cog\"]]\n        Explanation: There are 2 shortest transformation sequences:\n        \"hit\" -> \"hot\" -> \"dot\" -> \"dog\" -> \"cog\"\n        \"hit\" -> \"hot\" -> \"lot\" -> \"log\" -> \"cog\"\n        Example 2:\n        Input: beginWord = \"hit\", endWord = \"cog\", wordList = [\"hot\",\"dot\",\"dog\",\"lot\",\"log\"]\n        Output: []\n        Explanation: The endWord \"cog\" is not in wordList, therefore there is no valid transformation sequence.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        # BFS\n        # edge case\n        if not wordList or endWord not in wordList or beginWord not in wordList:\n            return []\n        # adjacency_list\n        adjacency_list = {}\n        for word in wordList:\n            for i in range(len(word)):\n                pattern = word[:i] + \"*\" + word[i+1:]\n                if pattern in adjacency_list:\n                    adjacency_list[pattern].append(word)\n                else:\n                    adjacency_list[pattern] = [word]\n        # DFS\n        shortest_transformation_sequence = self.get_shortest_transformation_sequence(beginWord, endWord, adjacency_list)\n        return shortest_transformation_sequence if shortest_transformation_sequence else []\n    \n    def get_shortest_transformation_sequence(self, beginWord, endWord, adjacency_list):\n        q = collections.deque([(beginWord, [beginWord])])\n        visited = set()\n        while q:\n            word, sequence = q.popleft()\n            if word == endWord:\n                return sequence\n            visited.add(word)\n            for i in range(len(word)):\n                pattern = word"
    },
    {
        "number": 126,
        "title": "Word Ladder II",
        "difficulty": 2,
        "prompt": "class Solution:\n    def findLadders(self, beginWord: str, endWord: str, wordList: List[str]) -> List[List[str]]:\n        \"\"\"\n        A transformation sequence from word beginWord to word endWord using a dictionary wordList is a sequence of words beginWord -> s1 -> s2 ->... -> sk such that:\n            Every adjacent pair of words differs by a single letter.\n            Every si for 1 <= i <= k is in wordList. Note that beginWord does not need to be in wordList.\n            sk == endWord\n        Given two words, beginWord and endWord, and a dictionary wordList, return all the shortest transformation sequences from beginWord to endWord, or an empty list if no such sequence exists. Each sequence should be returned as a list of the words [beginWord, s1, s2,..., sk].\n        Example 1:\n        Input: beginWord = \"hit\", endWord = \"cog\", wordList = [\"hot\",\"dot\",\"dog\",\"lot\",\"log\",\"cog\"]\n        Output: [[\"hit\",\"hot\",\"dot\",\"dog\",\"cog\"],[\"hit\",\"hot\",\"lot\",\"log\",\"cog\"]]\n        Explanation: There are 2 shortest transformation sequences:\n        \"hit\" -> \"hot\" -> \"dot\" -> \"dog\" -> \"cog\"\n        \"hit\" -> \"hot\" -> \"lot\" -> \"log\" -> \"cog\"\n        Example 2:\n        Input: beginWord = \"hit\", endWord = \"cog\", wordList = [\"hot\",\"dot\",\"dog\",\"lot\",\"log\"]\n        Output: []\n        Explanation: The endWord \"cog\" is not in wordList, therefore there is no valid transformation sequence.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        if endWord not in wordList:\n            return []"
    },
    {
        "number": 126,
        "title": "Word Ladder II",
        "difficulty": 2,
        "prompt": "class Solution:\n    def findLadders(self, beginWord: str, endWord: str, wordList: List[str]) -> List[List[str]]:\n        \"\"\"\n        A transformation sequence from word beginWord to word endWord using a dictionary wordList is a sequence of words beginWord -> s1 -> s2 ->... -> sk such that:\n            Every adjacent pair of words differs by a single letter.\n            Every si for 1 <= i <= k is in wordList. Note that beginWord does not need to be in wordList.\n            sk == endWord\n        Given two words, beginWord and endWord, and a dictionary wordList, return all the shortest transformation sequences from beginWord to endWord, or an empty list if no such sequence exists. Each sequence should be returned as a list of the words [beginWord, s1, s2,..., sk].\n        Example 1:\n        Input: beginWord = \"hit\", endWord = \"cog\", wordList = [\"hot\",\"dot\",\"dog\",\"lot\",\"log\",\"cog\"]\n        Output: [[\"hit\",\"hot\",\"dot\",\"dog\",\"cog\"],[\"hit\",\"hot\",\"lot\",\"log\",\"cog\"]]\n        Explanation: There are 2 shortest transformation sequences:\n        \"hit\" -> \"hot\" -> \"dot\" -> \"dog\" -> \"cog\"\n        \"hit\" -> \"hot\" -> \"lot\" -> \"log\" -> \"cog\"\n        Example 2:\n        Input: beginWord = \"hit\", endWord = \"cog\", wordList = [\"hot\",\"dot\",\"dog\",\"lot\",\"log\"]\n        Output: []\n        Explanation: The endWord \"cog\" is not in wordList, therefore there is no valid transformation sequence.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 3,
        "answer": "        if endWord not in wordList:\n            return []"
    },
    {
        "number": 126,
        "title": "Word Ladder II",
        "difficulty": 2,
        "prompt": "class Solution:\n    def findLadders(self, beginWord: str, endWord: str, wordList: List[str]) -> List[List[str]]:\n        \"\"\"\n        A transformation sequence from word beginWord to word endWord using a dictionary wordList is a sequence of words beginWord -> s1 -> s2 ->... -> sk such that:\n            Every adjacent pair of words differs by a single letter.\n            Every si for 1 <= i <= k is in wordList. Note that beginWord does not need to be in wordList.\n            sk == endWord\n        Given two words, beginWord and endWord, and a dictionary wordList, return all the shortest transformation sequences from beginWord to endWord, or an empty list if no such sequence exists. Each sequence should be returned as a list of the words [beginWord, s1, s2,..., sk].\n        Example 1:\n        Input: beginWord = \"hit\", endWord = \"cog\", wordList = [\"hot\",\"dot\",\"dog\",\"lot\",\"log\",\"cog\"]\n        Output: [[\"hit\",\"hot\",\"dot\",\"dog\",\"cog\"],[\"hit\",\"hot\",\"lot\",\"log\",\"cog\"]]\n        Explanation: There are 2 shortest transformation sequences:\n        \"hit\" -> \"hot\" -> \"dot\" -> \"dog\" -> \"cog\"\n        \"hit\" -> \"hot\" -> \"lot\" -> \"log\" -> \"cog\"\n        Example 2:\n        Input: beginWord = \"hit\", endWord = \"cog\", wordList = [\"hot\",\"dot\",\"dog\",\"lot\",\"log\"]\n        Output: []\n        Explanation: The endWord \"cog\" is not in wordList, therefore there is no valid transformation sequence.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 4,
        "answer": "        # Solution 1: BFS\n        # queue = collections.deque([(beginWord, [beginWord])])\n        # # queue = collections.deque([(beginWord, [beginWord])])\n        # visited = set(beginWord)\n        # word_len = len(beginWord)\n        # while queue:\n        #     curr, path = queue.popleft()\n        #     for i in range(word_len):\n        #         for j in range(26):\n        #             next_word = curr[:i] + chr(ord('a') + j) + curr[i+1:]\n        #             if next_word in wordList and next_word not in visited:\n        #                 if next_word == endWord:\n        #                     return path + [next_word]\n        #                 queue.append((next_word, path + [next_word]))\n        #                 visited.add(next_word)"
    },
    {
        "number": 126,
        "title": "Word Ladder II",
        "difficulty": 2,
        "prompt": "class Solution:\n    def findLadders(self, beginWord: str, endWord: str, wordList: List[str]) -> List[List[str]]:\n        \"\"\"\n        A transformation sequence from word beginWord to word endWord using a dictionary wordList is a sequence of words beginWord -> s1 -> s2 ->... -> sk such that:\n            Every adjacent pair of words differs by a single letter.\n            Every si for 1 <= i <= k is in wordList. Note that beginWord does not need to be in wordList.\n            sk == endWord\n        Given two words, beginWord and endWord, and a dictionary wordList, return all the shortest transformation sequences from beginWord to endWord, or an empty list if no such sequence exists. Each sequence should be returned as a list of the words [beginWord, s1, s2,..., sk].\n        Example 1:\n        Input: beginWord = \"hit\", endWord = \"cog\", wordList = [\"hot\",\"dot\",\"dog\",\"lot\",\"log\",\"cog\"]\n        Output: [[\"hit\",\"hot\",\"dot\",\"dog\",\"cog\"],[\"hit\",\"hot\",\"lot\",\"log\",\"cog\"]]\n        Explanation: There are 2 shortest transformation sequences:\n        \"hit\" -> \"hot\" -> \"dot\" -> \"dog\" -> \"cog\"\n        \"hit\" -> \"hot\" -> \"lot\" -> \"log\" -> \"cog\"\n        Example 2:\n        Input: beginWord = \"hit\", endWord = \"cog\", wordList = [\"hot\",\"dot\",\"dog\",\"lot\",\"log\"]\n        Output: []\n        Explanation: The endWord \"cog\" is not in wordList, therefore there is no valid transformation sequence.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 5,
        "answer": "        if endWord not in wordList or not endWord or not beginWord or not wordList:\n            return []\n        # build the graph with adj list\n        # adj[word] = [list of words which have a single letter different]\n        adj = defaultdict(list)\n        for word in wordList:\n            for i in range(len(word)):\n                # ['hot', 'dot', 'dog', 'lot', 'log', 'cog']\n                # 'hot', 'dot', 'dog', 'lot', 'log'\n                # one_diff = word[:i] + '*' + word[i+1:]\n                one_diff = word[:i] + '*' + word[i+1:]\n                # ['hot', 'hot', 'lot', 'lot', 'log', 'log', 'cog', 'cog']\n                # 'hit', 'hit', 'lot', 'lot', 'log', 'log', 'cog', 'cog'\n                # two_diff = word[:i] + '**' + word[i+1:]\n                two_diff = word[:i] + '**' + word[i+1:]\n                adj[one_diff].append(two_diff)\n                adj[two_diff].append(one_diff)\n        "
    },
    {
        "number": 127,
        "title": "Word Ladder",
        "difficulty": 2,
        "prompt": "class Solution:\n    def ladderLength(self, beginWord: str, endWord: str, wordList: List[str]) -> int:\n        \"\"\"\n        A transformation sequence from word beginWord to word endWord using a dictionary wordList is a sequence of words beginWord -> s1 -> s2 ->... -> sk such that:\n            Every adjacent pair of words differs by a single letter.\n            Every si for 1 <= i <= k is in wordList. Note that beginWord does not need to be in wordList.\n            sk == endWord\n        Given two words, beginWord and endWord, and a dictionary wordList, return the number of words in the shortest transformation sequence from beginWord to endWord, or 0 if no such sequence exists.\n        Example 1:\n        Input: beginWord = \"hit\", endWord = \"cog\", wordList = [\"hot\",\"dot\",\"dog\",\"lot\",\"log\",\"cog\"]\n        Output: 5\n        Explanation: One shortest transformation sequence is \"hit\" -> \"hot\" -> \"dot\" -> \"dog\" -> cog\", which is 5 words long.\n        Example 2:\n        Input: beginWord = \"hit\", endWord = \"cog\", wordList = [\"hot\",\"dot\",\"dog\",\"lot\",\"log\"]\n        Output: 0\n        Explanation: The endWord \"cog\" is not in wordList, therefore there is no valid transformation sequence.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        self.wordList = set(wordList)\n        self.beginWord = beginWord\n        self.endWord = endWord\n        self.ans = float('inf')\n        self.shortest = None\n        self.visited = set()"
    },
    {
        "number": 127,
        "title": "Word Ladder",
        "difficulty": 2,
        "prompt": "class Solution:\n    def ladderLength(self, beginWord: str, endWord: str, wordList: List[str]) -> int:\n        \"\"\"\n        A transformation sequence from word beginWord to word endWord using a dictionary wordList is a sequence of words beginWord -> s1 -> s2 ->... -> sk such that:\n            Every adjacent pair of words differs by a single letter.\n            Every si for 1 <= i <= k is in wordList. Note that beginWord does not need to be in wordList.\n            sk == endWord\n        Given two words, beginWord and endWord, and a dictionary wordList, return the number of words in the shortest transformation sequence from beginWord to endWord, or 0 if no such sequence exists.\n        Example 1:\n        Input: beginWord = \"hit\", endWord = \"cog\", wordList = [\"hot\",\"dot\",\"dog\",\"lot\",\"log\",\"cog\"]\n        Output: 5\n        Explanation: One shortest transformation sequence is \"hit\" -> \"hot\" -> \"dot\" -> \"dog\" -> cog\", which is 5 words long.\n        Example 2:\n        Input: beginWord = \"hit\", endWord = \"cog\", wordList = [\"hot\",\"dot\",\"dog\",\"lot\",\"log\"]\n        Output: 0\n        Explanation: The endWord \"cog\" is not in wordList, therefore there is no valid transformation sequence.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        word_set = set(wordList)\n        queue = collections.deque([(beginWord, 1)])\n        visited = set()\n        while queue:\n            word, steps = queue.popleft()\n            if word == endWord:\n                return steps\n            for i in range(len(word)):\n                for c in \"abcdefghijklmnopqrstuvwxyz\":\n                    new_word = word[:i] + c + word[i + 1:]\n                    if new_word not in visited and new_word in word_set:\n                        queue.append((new_word, steps + 1))\n                        visited.add(new_word)\n        return 0"
    },
    {
        "number": 127,
        "title": "Word Ladder",
        "difficulty": 2,
        "prompt": "class Solution:\n    def ladderLength(self, beginWord: str, endWord: str, wordList: List[str]) -> int:\n        \"\"\"\n        A transformation sequence from word beginWord to word endWord using a dictionary wordList is a sequence of words beginWord -> s1 -> s2 ->... -> sk such that:\n            Every adjacent pair of words differs by a single letter.\n            Every si for 1 <= i <= k is in wordList. Note that beginWord does not need to be in wordList.\n            sk == endWord\n        Given two words, beginWord and endWord, and a dictionary wordList, return the number of words in the shortest transformation sequence from beginWord to endWord, or 0 if no such sequence exists.\n        Example 1:\n        Input: beginWord = \"hit\", endWord = \"cog\", wordList = [\"hot\",\"dot\",\"dog\",\"lot\",\"log\",\"cog\"]\n        Output: 5\n        Explanation: One shortest transformation sequence is \"hit\" -> \"hot\" -> \"dot\" -> \"dog\" -> cog\", which is 5 words long.\n        Example 2:\n        Input: beginWord = \"hit\", endWord = \"cog\", wordList = [\"hot\",\"dot\",\"dog\",\"lot\",\"log\"]\n        Output: 0\n        Explanation: The endWord \"cog\" is not in wordList, therefore there is no valid transformation sequence.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 3,
        "answer": "        wordList = set(wordList)"
    },
    {
        "number": 127,
        "title": "Word Ladder",
        "difficulty": 2,
        "prompt": "class Solution:\n    def ladderLength(self, beginWord: str, endWord: str, wordList: List[str]) -> int:\n        \"\"\"\n        A transformation sequence from word beginWord to word endWord using a dictionary wordList is a sequence of words beginWord -> s1 -> s2 ->... -> sk such that:\n            Every adjacent pair of words differs by a single letter.\n            Every si for 1 <= i <= k is in wordList. Note that beginWord does not need to be in wordList.\n            sk == endWord\n        Given two words, beginWord and endWord, and a dictionary wordList, return the number of words in the shortest transformation sequence from beginWord to endWord, or 0 if no such sequence exists.\n        Example 1:\n        Input: beginWord = \"hit\", endWord = \"cog\", wordList = [\"hot\",\"dot\",\"dog\",\"lot\",\"log\",\"cog\"]\n        Output: 5\n        Explanation: One shortest transformation sequence is \"hit\" -> \"hot\" -> \"dot\" -> \"dog\" -> cog\", which is 5 words long.\n        Example 2:\n        Input: beginWord = \"hit\", endWord = \"cog\", wordList = [\"hot\",\"dot\",\"dog\",\"lot\",\"log\"]\n        Output: 0\n        Explanation: The endWord \"cog\" is not in wordList, therefore there is no valid transformation sequence.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 4,
        "answer": "        \n        wordList = set(wordList)\n        if len(beginWord)!= len(endWord):\n            return 0\n        if endWord not in wordList:\n            return 0\n        \n        q = deque([beginWord])\n        visited = {beginWord: 1}\n        while q:\n            for _ in range(len(q)):\n                w = q.popleft()\n                if w == endWord:\n                    return visited[w]\n                for i in range(len(w)):\n                    for c in \"abcdefghijklmnopqrstuvwxyz\":\n                        new_word = w[:i] + c + w[i+1:]\n                        if new_word in wordList and new_word not in visited:\n                            q.append(new_word)\n                            visited[new_word] = visited[w] + 1\n        return 0\n    \n    def ladderLength_BFS(self, beginWord: str, endWord: str, wordList: List[str]) -> int:\n        \"\"\"\n        A transformation sequence from word beginWord to word endWord using a dictionary wordList is a sequence of words beginWord -> s1 -> s2 ->... -> sk such that:\n            Every adjacent pair of words differs by a single letter.\n            Every si for"
    },
    {
        "number": 127,
        "title": "Word Ladder",
        "difficulty": 2,
        "prompt": "class Solution:\n    def ladderLength(self, beginWord: str, endWord: str, wordList: List[str]) -> int:\n        \"\"\"\n        A transformation sequence from word beginWord to word endWord using a dictionary wordList is a sequence of words beginWord -> s1 -> s2 ->... -> sk such that:\n            Every adjacent pair of words differs by a single letter.\n            Every si for 1 <= i <= k is in wordList. Note that beginWord does not need to be in wordList.\n            sk == endWord\n        Given two words, beginWord and endWord, and a dictionary wordList, return the number of words in the shortest transformation sequence from beginWord to endWord, or 0 if no such sequence exists.\n        Example 1:\n        Input: beginWord = \"hit\", endWord = \"cog\", wordList = [\"hot\",\"dot\",\"dog\",\"lot\",\"log\",\"cog\"]\n        Output: 5\n        Explanation: One shortest transformation sequence is \"hit\" -> \"hot\" -> \"dot\" -> \"dog\" -> cog\", which is 5 words long.\n        Example 2:\n        Input: beginWord = \"hit\", endWord = \"cog\", wordList = [\"hot\",\"dot\",\"dog\",\"lot\",\"log\"]\n        Output: 0\n        Explanation: The endWord \"cog\" is not in wordList, therefore there is no valid transformation sequence.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 5,
        "answer": "        import collections\n        if not wordList or endWord not in wordList:\n            return 0\n        queue = collections.deque([beginWord])\n        word_set = set(wordList)\n        visited = set()\n        step = 1\n        while queue:\n            size = len(queue)\n            for _ in range(size):\n                word = queue.popleft()\n                if word == endWord:\n                    return step\n                for i in range(len(word)):\n                    for c in \"abcdefghijklmnopqrstuvwxyz\":\n                        new_word = word[:i] + c + word[i+1:]\n                        if new_word not in visited and new_word in word_set:\n                            queue.append(new_word)\n                            visited.add(new_word)\n            step += 1\n        return 0\n    \n    def ladderLength_TLE(self, beginWord: str, endWord: str, wordList: List[str]) -> int:\n        \"\"\"\n        A transformation sequence from word beginWord to word endWord using a dictionary wordList is a sequence of words beginWord -> s1 -> s2 ->... -> sk such that:\n            Every adjacent pair of words differs by a single letter.\n            Every si for 1 <= i <= k is in"
    },
    {
        "number": 128,
        "title": "Longest Consecutive Sequence",
        "difficulty": 1,
        "prompt": "class Solution:\n    def longestConsecutive(self, nums: List[int]) -> int:\n        \"\"\"\n        Given an unsorted array of integers nums, return the length of the longest consecutive elements sequence.\n        You must write an algorithm that runs in O(n) time.\n        Example 1:\n        Input: nums = [100,4,200,1,3,2]\n        Output: 4\n        Explanation: The longest consecutive elements sequence is [1, 2, 3, 4]. Therefore its length is 4.\n        Example 2:\n        Input: nums = [0,3,7,2,5,8,4,6,0,1]\n        Output: 9\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        if not nums:\n            return 0\n        \n        nums = set(nums)\n        max_len = 0\n        \n        for num in nums:\n            if num-1 not in nums:\n                cur_num = num\n                cur_len = 1\n                \n                while cur_num+1 in nums:\n                    cur_num += 1\n                    cur_len += 1\n                \n                max_len = max(max_len, cur_len)\n        \n        return max_len"
    },
    {
        "number": 128,
        "title": "Longest Consecutive Sequence",
        "difficulty": 1,
        "prompt": "class Solution:\n    def longestConsecutive(self, nums: List[int]) -> int:\n        \"\"\"\n        Given an unsorted array of integers nums, return the length of the longest consecutive elements sequence.\n        You must write an algorithm that runs in O(n) time.\n        Example 1:\n        Input: nums = [100,4,200,1,3,2]\n        Output: 4\n        Explanation: The longest consecutive elements sequence is [1, 2, 3, 4]. Therefore its length is 4.\n        Example 2:\n        Input: nums = [0,3,7,2,5,8,4,6,0,1]\n        Output: 9\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        # Solution 1:\n        \"\"\"\n        1. sort nums;\n        2. loop through nums to get the longest consecutive sequences.\n        3. loop through nums to check if next one is consecutive (if not, then reset cur_num to next_num, and reset cur_seq = 0)\n        \"\"\"\n        # Solution 2:\n        \"\"\"\n        1. get all the numbers that are not consecutive;\n        2. loop through the numbers that are not consecutive;\n        3. check if the next number is consecutive. if yes, then check if it is consecutive with the current one;\n        4. if yes, then extend the consecutive sequence;\n        5. if not, then reset the consecutive sequence.\n        \"\"\"\n        # Solution 3:\n        \"\"\"\n        1. get all the numbers that are not consecutive;\n        2. loop through the numbers that are not consecutive;\n        3. check if the next number is consecutive. if yes, then check if it is consecutive with the current one;\n        4. if yes, then extend the consecutive sequence;\n        5. if not, then reset the consecutive sequence.\n        6. if the next number is not consecutive, then append it to result;\n        7. update the longest consecutive sequence.\n        \"\"\"\n        # Solution 4:\n        \"\"\"\n        1. use a hash table to store the numbers"
    },
    {
        "number": 128,
        "title": "Longest Consecutive Sequence",
        "difficulty": 1,
        "prompt": "class Solution:\n    def longestConsecutive(self, nums: List[int]) -> int:\n        \"\"\"\n        Given an unsorted array of integers nums, return the length of the longest consecutive elements sequence.\n        You must write an algorithm that runs in O(n) time.\n        Example 1:\n        Input: nums = [100,4,200,1,3,2]\n        Output: 4\n        Explanation: The longest consecutive elements sequence is [1, 2, 3, 4]. Therefore its length is 4.\n        Example 2:\n        Input: nums = [0,3,7,2,5,8,4,6,0,1]\n        Output: 9\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 3,
        "answer": "        if not nums:\n            return 0\n        nums = set(nums)\n        max_len = 0\n        for num in nums:\n            if num-1 not in nums:\n                cur_num = num\n                cur_len = 1\n                while cur_num+1 in nums:\n                    cur_len += 1\n                    cur_num += 1\n                max_len = max(max_len, cur_len)\n        return max_len"
    },
    {
        "number": 128,
        "title": "Longest Consecutive Sequence",
        "difficulty": 1,
        "prompt": "class Solution:\n    def longestConsecutive(self, nums: List[int]) -> int:\n        \"\"\"\n        Given an unsorted array of integers nums, return the length of the longest consecutive elements sequence.\n        You must write an algorithm that runs in O(n) time.\n        Example 1:\n        Input: nums = [100,4,200,1,3,2]\n        Output: 4\n        Explanation: The longest consecutive elements sequence is [1, 2, 3, 4]. Therefore its length is 4.\n        Example 2:\n        Input: nums = [0,3,7,2,5,8,4,6,0,1]\n        Output: 9\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 4,
        "answer": "        if len(nums) == 0:\n            return 0\n        if len(nums) == 1:\n            return 1\n        \n        \n        nums = set(nums)\n        max_count = 0\n        \n        for x in nums:\n            if x - 1 not in nums:\n                y = x + 1\n                while y in nums:\n                    y += 1\n                max_count = max(max_count, y - x)\n        return max_count\n            \n            \n            \n            \n        <|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>"
    },
    {
        "number": 128,
        "title": "Longest Consecutive Sequence",
        "difficulty": 1,
        "prompt": "class Solution:\n    def longestConsecutive(self, nums: List[int]) -> int:\n        \"\"\"\n        Given an unsorted array of integers nums, return the length of the longest consecutive elements sequence.\n        You must write an algorithm that runs in O(n) time.\n        Example 1:\n        Input: nums = [100,4,200,1,3,2]\n        Output: 4\n        Explanation: The longest consecutive elements sequence is [1, 2, 3, 4]. Therefore its length is 4.\n        Example 2:\n        Input: nums = [0,3,7,2,5,8,4,6,0,1]\n        Output: 9\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 5,
        "answer": "        \n        if len(nums)==0:\n            return 0\n        if len(nums)==1:\n            return 1\n        \n        nums.sort()\n        \n        ans=1\n        start=0\n        end=1\n        \n        while end<len(nums):\n            if nums[end]-nums[start]==1:\n                end+=1\n            else:\n                ans=max(ans,end-start+1)\n                start=end\n                end+=1\n        \n        ans=max(ans,end-start)\n        \n        return ans\n<|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>"
    },
    {
        "number": 129,
        "title": "Sum Root to Leaf Numbers",
        "difficulty": 1,
        "prompt": "class Solution:\n    def sumNumbers(self, root: Optional[TreeNode]) -> int:\n        \"\"\"\n        You are given the root of a binary tree containing digits from 0 to 9 only.\n        Each root-to-leaf path in the tree represents a number.\n            For example, the root-to-leaf path 1 -> 2 -> 3 represents the number 123.\n        Return the total sum of all root-to-leaf numbers. Test cases are generated so that the answer will fit in a 32-bit integer.\n        A leaf node is a node with no children.\n        Example 1:\n        Input: root = [1,2,3]\n        Output: 25\n        Explanation:\n        The root-to-leaf path 1->2 represents the number 12.\n        The root-to-leaf path 1->3 represents the number 13.\n        Therefore, sum = 12 + 13 = 25.\n        Example 2:\n        Input: root = [4,9,0,5,1]\n        Output: 1026\n        Explanation:\n        The root-to-leaf path 4->9->5 represents the number 495.\n        The root-to-leaf path 4->9->1 represents the number 491.\n        The root-to-leaf path 4->0 represents the number 40.\n        Therefore, sum = 495 + 491 + 40 = 1026.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        return self.recur(root, 0)"
    },
    {
        "number": 129,
        "title": "Sum Root to Leaf Numbers",
        "difficulty": 1,
        "prompt": "class Solution:\n    def sumNumbers(self, root: Optional[TreeNode]) -> int:\n        \"\"\"\n        You are given the root of a binary tree containing digits from 0 to 9 only.\n        Each root-to-leaf path in the tree represents a number.\n            For example, the root-to-leaf path 1 -> 2 -> 3 represents the number 123.\n        Return the total sum of all root-to-leaf numbers. Test cases are generated so that the answer will fit in a 32-bit integer.\n        A leaf node is a node with no children.\n        Example 1:\n        Input: root = [1,2,3]\n        Output: 25\n        Explanation:\n        The root-to-leaf path 1->2 represents the number 12.\n        The root-to-leaf path 1->3 represents the number 13.\n        Therefore, sum = 12 + 13 = 25.\n        Example 2:\n        Input: root = [4,9,0,5,1]\n        Output: 1026\n        Explanation:\n        The root-to-leaf path 4->9->5 represents the number 495.\n        The root-to-leaf path 4->9->1 represents the number 491.\n        The root-to-leaf path 4->0 represents the number 40.\n        Therefore, sum = 495 + 491 + 40 = 1026.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        def dfs(root, path):\n            if not root:\n                return 0\n            if not root.left and not root.right:\n                path += str(root.val)\n                self.total += int(path)\n                return\n            dfs(root.left, path + str(root.val))\n            dfs(root.right, path + str(root.val))"
    },
    {
        "number": 129,
        "title": "Sum Root to Leaf Numbers",
        "difficulty": 1,
        "prompt": "class Solution:\n    def sumNumbers(self, root: Optional[TreeNode]) -> int:\n        \"\"\"\n        You are given the root of a binary tree containing digits from 0 to 9 only.\n        Each root-to-leaf path in the tree represents a number.\n            For example, the root-to-leaf path 1 -> 2 -> 3 represents the number 123.\n        Return the total sum of all root-to-leaf numbers. Test cases are generated so that the answer will fit in a 32-bit integer.\n        A leaf node is a node with no children.\n        Example 1:\n        Input: root = [1,2,3]\n        Output: 25\n        Explanation:\n        The root-to-leaf path 1->2 represents the number 12.\n        The root-to-leaf path 1->3 represents the number 13.\n        Therefore, sum = 12 + 13 = 25.\n        Example 2:\n        Input: root = [4,9,0,5,1]\n        Output: 1026\n        Explanation:\n        The root-to-leaf path 4->9->5 represents the number 495.\n        The root-to-leaf path 4->9->1 represents the number 491.\n        The root-to-leaf path 4->0 represents the number 40.\n        Therefore, sum = 495 + 491 + 40 = 1026.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 3,
        "answer": "        if not root:\n            return 0\n        if not root.left and not root.right:\n            return int(root.val)\n        return self.sumNumbers(root.left) + self.sumNumbers(root.right) * 10 + root.val"
    },
    {
        "number": 129,
        "title": "Sum Root to Leaf Numbers",
        "difficulty": 1,
        "prompt": "class Solution:\n    def sumNumbers(self, root: Optional[TreeNode]) -> int:\n        \"\"\"\n        You are given the root of a binary tree containing digits from 0 to 9 only.\n        Each root-to-leaf path in the tree represents a number.\n            For example, the root-to-leaf path 1 -> 2 -> 3 represents the number 123.\n        Return the total sum of all root-to-leaf numbers. Test cases are generated so that the answer will fit in a 32-bit integer.\n        A leaf node is a node with no children.\n        Example 1:\n        Input: root = [1,2,3]\n        Output: 25\n        Explanation:\n        The root-to-leaf path 1->2 represents the number 12.\n        The root-to-leaf path 1->3 represents the number 13.\n        Therefore, sum = 12 + 13 = 25.\n        Example 2:\n        Input: root = [4,9,0,5,1]\n        Output: 1026\n        Explanation:\n        The root-to-leaf path 4->9->5 represents the number 495.\n        The root-to-leaf path 4->9->1 represents the number 491.\n        The root-to-leaf path 4->0 represents the number 40.\n        Therefore, sum = 495 + 491 + 40 = 1026.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 4,
        "answer": "        if root is None:\n            return 0\n        stack = [(root, root.val)]\n        total_sum = 0\n        while stack:\n            node, curr_sum = stack.pop()\n            if node.left is None and node.right is None:\n                total_sum += curr_sum\n            if node.left:\n                stack.append((node.left, curr_sum * 10 + node.left.val))\n            if node.right:\n                stack.append((node.right, curr_sum * 10 + node.right.val))\n        return total_sum"
    },
    {
        "number": 129,
        "title": "Sum Root to Leaf Numbers",
        "difficulty": 1,
        "prompt": "class Solution:\n    def sumNumbers(self, root: Optional[TreeNode]) -> int:\n        \"\"\"\n        You are given the root of a binary tree containing digits from 0 to 9 only.\n        Each root-to-leaf path in the tree represents a number.\n            For example, the root-to-leaf path 1 -> 2 -> 3 represents the number 123.\n        Return the total sum of all root-to-leaf numbers. Test cases are generated so that the answer will fit in a 32-bit integer.\n        A leaf node is a node with no children.\n        Example 1:\n        Input: root = [1,2,3]\n        Output: 25\n        Explanation:\n        The root-to-leaf path 1->2 represents the number 12.\n        The root-to-leaf path 1->3 represents the number 13.\n        Therefore, sum = 12 + 13 = 25.\n        Example 2:\n        Input: root = [4,9,0,5,1]\n        Output: 1026\n        Explanation:\n        The root-to-leaf path 4->9->5 represents the number 495.\n        The root-to-leaf path 4->9->1 represents the number 491.\n        The root-to-leaf path 4->0 represents the number 40.\n        Therefore, sum = 495 + 491 + 40 = 1026.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 5,
        "answer": "        # sum_ = 0\n        # stack = []\n        # stack.append((root, 0))\n        # while stack:\n        #     node, temp = stack.pop()\n        #     if node.left is None and node.right is None:\n        #         sum_ += 10 * temp + node.val\n        #     if node.left:\n        #         stack.append((node.left, temp * 10 + node.val))\n        #     if node.right:\n        #         stack.append((node.right, temp * 10 + node.val))\n        # return sum_\n        \"\"\"\n        Given the root of a binary tree containing digits from 0 to 9 only, each root-to-leaf path could represent a number."
    },
    {
        "number": 130,
        "title": "Surrounded Regions",
        "difficulty": 1,
        "prompt": "class Solution:\n    def solve(self, board: List[List[str]]) -> None:\n        \"\"\"\n        Do not return anything, modify board in-place instead.\n        Given an m x n matrix board containing 'X' and 'O', capture all regions that are 4-directionally surrounded by 'X'.\n        A region is captured by flipping all 'O's into 'X's in that surrounded region.\n        Example 1:\n        Input: board = [[\"X\",\"X\",\"X\",\"X\"],[\"X\",\"O\",\"O\",\"X\"],[\"X\",\"X\",\"O\",\"X\"],[\"X\",\"O\",\"X\",\"X\"]]\n        Output: [[\"X\",\"X\",\"X\",\"X\"],[\"X\",\"X\",\"X\",\"X\"],[\"X\",\"X\",\"X\",\"X\"],[\"X\",\"O\",\"X\",\"X\"]]\n        Explanation: Notice that an 'O' should not be flipped if:\n        - It is on the border, or\n        - It is adjacent to an 'O' that should not be flipped.\n        The bottom 'O' is on the border, so it is not flipped.\n        The other three 'O' form a surrounded region, so they are flipped.\n        Example 2:\n        Input: board = [[\"X\"]]\n        Output: [[\"X\"]]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        if not board: return\n        row, col = len(board), len(board[0])\n        def is_valid(i, j):\n            return i >= 0 and i < row and j >= 0 and j < col"
    },
    {
        "number": 130,
        "title": "Surrounded Regions",
        "difficulty": 1,
        "prompt": "class Solution:\n    def solve(self, board: List[List[str]]) -> None:\n        \"\"\"\n        Do not return anything, modify board in-place instead.\n        Given an m x n matrix board containing 'X' and 'O', capture all regions that are 4-directionally surrounded by 'X'.\n        A region is captured by flipping all 'O's into 'X's in that surrounded region.\n        Example 1:\n        Input: board = [[\"X\",\"X\",\"X\",\"X\"],[\"X\",\"O\",\"O\",\"X\"],[\"X\",\"X\",\"O\",\"X\"],[\"X\",\"O\",\"X\",\"X\"]]\n        Output: [[\"X\",\"X\",\"X\",\"X\"],[\"X\",\"X\",\"X\",\"X\"],[\"X\",\"X\",\"X\",\"X\"],[\"X\",\"O\",\"X\",\"X\"]]\n        Explanation: Notice that an 'O' should not be flipped if:\n        - It is on the border, or\n        - It is adjacent to an 'O' that should not be flipped.\n        The bottom 'O' is on the border, so it is not flipped.\n        The other three 'O' form a surrounded region, so they are flipped.\n        Example 2:\n        Input: board = [[\"X\"]]\n        Output: [[\"X\"]]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        # Time and Space Complexity: O(mn)\n        \n        if not board:\n            return"
    },
    {
        "number": 130,
        "title": "Surrounded Regions",
        "difficulty": 1,
        "prompt": "class Solution:\n    def solve(self, board: List[List[str]]) -> None:\n        \"\"\"\n        Do not return anything, modify board in-place instead.\n        Given an m x n matrix board containing 'X' and 'O', capture all regions that are 4-directionally surrounded by 'X'.\n        A region is captured by flipping all 'O's into 'X's in that surrounded region.\n        Example 1:\n        Input: board = [[\"X\",\"X\",\"X\",\"X\"],[\"X\",\"O\",\"O\",\"X\"],[\"X\",\"X\",\"O\",\"X\"],[\"X\",\"O\",\"X\",\"X\"]]\n        Output: [[\"X\",\"X\",\"X\",\"X\"],[\"X\",\"X\",\"X\",\"X\"],[\"X\",\"X\",\"X\",\"X\"],[\"X\",\"O\",\"X\",\"X\"]]\n        Explanation: Notice that an 'O' should not be flipped if:\n        - It is on the border, or\n        - It is adjacent to an 'O' that should not be flipped.\n        The bottom 'O' is on the border, so it is not flipped.\n        The other three 'O' form a surrounded region, so they are flipped.\n        Example 2:\n        Input: board = [[\"X\"]]\n        Output: [[\"X\"]]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 3,
        "answer": "        if not board or not board[0]:\n            return board\n        \n        m, n = len(board), len(board[0])\n        for i in range(m):\n            for j in range(n):\n                if i in [0, m-1] or j in [0, n-1]:\n                    board[i][j] = 'X'\n        for i in range(1, m-1):\n            for j in range(1, n-1):\n                if board[i][j] == 'O':\n                    board[i][j] = 'X' if self.dfs(board, i, j) else 'O'\n        \n        return board\n    \n    def dfs(self, board, x, y):\n        if x < 0 or x >= len(board) or y < 0 or y >= len(board[0]) or board[x][y]!= 'O':\n            return False\n        board[x][y] = 'A'\n        self.dfs(board, x-1, y)\n        self.dfs(board, x+1, y)\n        self.dfs(board, x, y-1)\n        self.dfs(board, x, y+1)\n        return True\n<|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>"
    },
    {
        "number": 130,
        "title": "Surrounded Regions",
        "difficulty": 1,
        "prompt": "class Solution:\n    def solve(self, board: List[List[str]]) -> None:\n        \"\"\"\n        Do not return anything, modify board in-place instead.\n        Given an m x n matrix board containing 'X' and 'O', capture all regions that are 4-directionally surrounded by 'X'.\n        A region is captured by flipping all 'O's into 'X's in that surrounded region.\n        Example 1:\n        Input: board = [[\"X\",\"X\",\"X\",\"X\"],[\"X\",\"O\",\"O\",\"X\"],[\"X\",\"X\",\"O\",\"X\"],[\"X\",\"O\",\"X\",\"X\"]]\n        Output: [[\"X\",\"X\",\"X\",\"X\"],[\"X\",\"X\",\"X\",\"X\"],[\"X\",\"X\",\"X\",\"X\"],[\"X\",\"O\",\"X\",\"X\"]]\n        Explanation: Notice that an 'O' should not be flipped if:\n        - It is on the border, or\n        - It is adjacent to an 'O' that should not be flipped.\n        The bottom 'O' is on the border, so it is not flipped.\n        The other three 'O' form a surrounded region, so they are flipped.\n        Example 2:\n        Input: board = [[\"X\"]]\n        Output: [[\"X\"]]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 4,
        "answer": "        # DFS to find all 4-neighbors\n        self.neighbors = [(0, 1), (0, -1), (1, 0), (-1, 0)]\n        self.m, self.n = len(board), len(board[0])\n        self.dfs(board, 0, 0)\n        # flip other 'O' to 'X'\n        for i in range(self.m):\n            for j in range(self.n):\n                if board[i][j] == 'O':\n                    board[i][j] = 'X'\n                elif board[i][j] == 'A':\n                    board[i][j] = 'O'"
    },
    {
        "number": 130,
        "title": "Surrounded Regions",
        "difficulty": 1,
        "prompt": "class Solution:\n    def solve(self, board: List[List[str]]) -> None:\n        \"\"\"\n        Do not return anything, modify board in-place instead.\n        Given an m x n matrix board containing 'X' and 'O', capture all regions that are 4-directionally surrounded by 'X'.\n        A region is captured by flipping all 'O's into 'X's in that surrounded region.\n        Example 1:\n        Input: board = [[\"X\",\"X\",\"X\",\"X\"],[\"X\",\"O\",\"O\",\"X\"],[\"X\",\"X\",\"O\",\"X\"],[\"X\",\"O\",\"X\",\"X\"]]\n        Output: [[\"X\",\"X\",\"X\",\"X\"],[\"X\",\"X\",\"X\",\"X\"],[\"X\",\"X\",\"X\",\"X\"],[\"X\",\"O\",\"X\",\"X\"]]\n        Explanation: Notice that an 'O' should not be flipped if:\n        - It is on the border, or\n        - It is adjacent to an 'O' that should not be flipped.\n        The bottom 'O' is on the border, so it is not flipped.\n        The other three 'O' form a surrounded region, so they are flipped.\n        Example 2:\n        Input: board = [[\"X\"]]\n        Output: [[\"X\"]]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 5,
        "answer": "        def dfs(i, j):\n            if not (0 <= i < m and 0 <= j < n and board[i][j] == 'O'):\n                return\n            board[i][j] = 'A'\n            dfs(i-1, j)\n            dfs(i+1, j)\n            dfs(i, j-1)\n            dfs(i, j+1)"
    },
    {
        "number": 131,
        "title": "Palindrome Partitioning",
        "difficulty": 1,
        "prompt": "class Solution:\n    def partition(self, s: str) -> List[List[str]]:\n        \"\"\"\n        Given a string s, partition s such that every substring of the partition is a palindrome. Return all possible palindrome partitioning of s.\n        Example 1:\n        Input: s = \"aab\"\n        Output: [[\"a\",\"a\",\"b\"],[\"aa\",\"b\"]]\n        Example 2:\n        Input: s = \"a\"\n        Output: [[\"a\"]]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        def is_palindrome(start, end):\n            if start >= end: return True\n            while start < end:\n                if s[start]!= s[end]:\n                    return False\n                start += 1\n                end -= 1\n            return True"
    },
    {
        "number": 131,
        "title": "Palindrome Partitioning",
        "difficulty": 1,
        "prompt": "class Solution:\n    def partition(self, s: str) -> List[List[str]]:\n        \"\"\"\n        Given a string s, partition s such that every substring of the partition is a palindrome. Return all possible palindrome partitioning of s.\n        Example 1:\n        Input: s = \"aab\"\n        Output: [[\"a\",\"a\",\"b\"],[\"aa\",\"b\"]]\n        Example 2:\n        Input: s = \"a\"\n        Output: [[\"a\"]]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        def is_palindrome(s, i, j):\n            while i < j:\n                if s[i]!= s[j]:\n                    return False\n                i += 1\n                j -= 1\n            return True\n        \n        def dfs(s, i, cur, res):\n            if i == len(s):\n                res.append(cur[:])\n            else:\n                for j in range(i, len(s)):\n                    if is_palindrome(s, i, j):\n                        cur.append(s[i:j + 1])\n                        dfs(s, j + 1, cur, res)\n                        cur.pop()\n        res = []\n        dfs(s, 0, [], res)\n        return res\n    \n    def partition2(self, s: str) -> List[List[str]]:\n        \"\"\"\n        Given a string s, partition s such that every substring of the partition is a palindrome. Return all possible palindrome partitioning of s.\n        Example 1:\n        Input: s = \"aab\"\n        Output: [[\"a\",\"a\",\"b\"],[\"aa\",\"b\"]]\n        Example 2:\n        Input: s = \"a\"\n        Output: [[\"a\"]]\n        \"\"\"\n        res = []\n"
    },
    {
        "number": 131,
        "title": "Palindrome Partitioning",
        "difficulty": 1,
        "prompt": "class Solution:\n    def partition(self, s: str) -> List[List[str]]:\n        \"\"\"\n        Given a string s, partition s such that every substring of the partition is a palindrome. Return all possible palindrome partitioning of s.\n        Example 1:\n        Input: s = \"aab\"\n        Output: [[\"a\",\"a\",\"b\"],[\"aa\",\"b\"]]\n        Example 2:\n        Input: s = \"a\"\n        Output: [[\"a\"]]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 3,
        "answer": "        n = len(s)\n        # dp[i][j]: if s[i..j] is palindromic string\n        # dp[i][j] = dp[i+1][j-1] if s[i] == s[j]\n        #          = dp[i][j-1] if s[i]!= s[j]\n        #          = dp[i+1][j] if s[i]!= s[j]\n        #          = False if s[i]!= s[j] and s[i+1]!= s[j-1]\n        dp = [[False] * n for _ in range(n)]\n        for i in range(n-1, -1, -1):\n            for j in range(i, n):\n                dp[i][j] = s[i] == s[j] and (j == i+1 or dp[i+1][j-1])\n        res = []\n        self.dfs(s, 0, [], res, dp)\n        return res\n    \n    def dfs(self, s, start, path, res, dp):\n        if start == len(s):\n            res.append(list(path))\n            return\n        for j in range(start,"
    },
    {
        "number": 131,
        "title": "Palindrome Partitioning",
        "difficulty": 1,
        "prompt": "class Solution:\n    def partition(self, s: str) -> List[List[str]]:\n        \"\"\"\n        Given a string s, partition s such that every substring of the partition is a palindrome. Return all possible palindrome partitioning of s.\n        Example 1:\n        Input: s = \"aab\"\n        Output: [[\"a\",\"a\",\"b\"],[\"aa\",\"b\"]]\n        Example 2:\n        Input: s = \"a\"\n        Output: [[\"a\"]]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 4,
        "answer": "        # \u7ed3\u679c\u5217\u8868\n        res = []\n        # \u5224\u65ads\u662f\u5426\u662f\u56de\u6587\u5b57\u7b26\u4e32\n        def isPalindrome(s):\n            l,r = 0,len(s)-1\n            while l<r:\n                if s[l]!= s[r]:\n                    return False\n                else:\n                    l += 1\n                    r -= 1\n            return True"
    },
    {
        "number": 131,
        "title": "Palindrome Partitioning",
        "difficulty": 1,
        "prompt": "class Solution:\n    def partition(self, s: str) -> List[List[str]]:\n        \"\"\"\n        Given a string s, partition s such that every substring of the partition is a palindrome. Return all possible palindrome partitioning of s.\n        Example 1:\n        Input: s = \"aab\"\n        Output: [[\"a\",\"a\",\"b\"],[\"aa\",\"b\"]]\n        Example 2:\n        Input: s = \"a\"\n        Output: [[\"a\"]]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 5,
        "answer": "        # recursive solution, backtracking\n        def helper(s, path):\n            if not s:\n                result.append(path)\n                return\n            for i in range(len(s)):\n                if self.is_palindrome(s[:i + 1]):\n                    helper(s[i + 1:], path + [s[:i + 1]])\n        \n        result = []\n        helper(s, [])\n        return result\n    \n    def is_palindrome(self, s):\n        return s == s[::-1]\n<|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>"
    },
    {
        "number": 132,
        "title": "Palindrome Partitioning II",
        "difficulty": 2,
        "prompt": "class Solution:\n    def minCut(self, s: str) -> int:\n        \"\"\"\n        Given a string s, partition s such that every substring of the partition is a palindrome.\n        Return the minimum cuts needed for a palindrome partitioning of s.\n        Example 1:\n        Input: s = \"aab\"\n        Output: 1\n        Explanation: The palindrome partitioning [\"aa\",\"b\"] could be produced using 1 cut.\n        Example 2:\n        Input: s = \"a\"\n        Output: 0\n        Example 3:\n        Input: s = \"ab\"\n        Output: 1\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        # Backtracking, TLE\n        # Time O(2^n), space O(2^n)\n        # self.mincut = float('inf')\n        # def isPalindrome(s):\n        #     return s == s[::-1]\n        # def dfs(s, pos, cuts):\n        #     if pos == len(s):\n        #         self.mincut = min(self.mincut, cuts)\n        #         return\n        #     for i in range(pos, len(s)):\n        #         if isPalindrome(s[pos:i+1]):\n        #             dfs(s, i+1, cuts+1)\n        # dfs(s, 0, 0)\n        # return self.mincut"
    },
    {
        "number": 132,
        "title": "Palindrome Partitioning II",
        "difficulty": 2,
        "prompt": "class Solution:\n    def minCut(self, s: str) -> int:\n        \"\"\"\n        Given a string s, partition s such that every substring of the partition is a palindrome.\n        Return the minimum cuts needed for a palindrome partitioning of s.\n        Example 1:\n        Input: s = \"aab\"\n        Output: 1\n        Explanation: The palindrome partitioning [\"aa\",\"b\"] could be produced using 1 cut.\n        Example 2:\n        Input: s = \"a\"\n        Output: 0\n        Example 3:\n        Input: s = \"ab\"\n        Output: 1\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        # if s == s[::-1]:\n        #     return 0"
    },
    {
        "number": 132,
        "title": "Palindrome Partitioning II",
        "difficulty": 2,
        "prompt": "class Solution:\n    def minCut(self, s: str) -> int:\n        \"\"\"\n        Given a string s, partition s such that every substring of the partition is a palindrome.\n        Return the minimum cuts needed for a palindrome partitioning of s.\n        Example 1:\n        Input: s = \"aab\"\n        Output: 1\n        Explanation: The palindrome partitioning [\"aa\",\"b\"] could be produced using 1 cut.\n        Example 2:\n        Input: s = \"a\"\n        Output: 0\n        Example 3:\n        Input: s = \"ab\"\n        Output: 1\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 3,
        "answer": "        size = len(s)\n        dp = [[False]*size for _ in range(size)]\n        for i in range(size):\n            dp[i][i] = True\n        for i in range(size-1, -1, -1):\n            for j in range(i+1, size):\n                dp[i][j] = s[i] == s[j] and dp[i+1][j-1]\n        cuts = [size-1] * (size-1) + [0]\n        for i in range(size-1, -1, -1):\n            for j in range(i+1, size):\n                if dp[i][j]:\n                    cuts[j-i] = min(cuts[j-i], cuts[j]+1)\n        return cuts[0]\n<|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>"
    },
    {
        "number": 132,
        "title": "Palindrome Partitioning II",
        "difficulty": 2,
        "prompt": "class Solution:\n    def minCut(self, s: str) -> int:\n        \"\"\"\n        Given a string s, partition s such that every substring of the partition is a palindrome.\n        Return the minimum cuts needed for a palindrome partitioning of s.\n        Example 1:\n        Input: s = \"aab\"\n        Output: 1\n        Explanation: The palindrome partitioning [\"aa\",\"b\"] could be produced using 1 cut.\n        Example 2:\n        Input: s = \"a\"\n        Output: 0\n        Example 3:\n        Input: s = \"ab\"\n        Output: 1\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 4,
        "answer": "        if s == s[::-1]:\n            return 0\n        n = len(s)\n        # if s==\"abcbaba\":\n        #     print(1111)\n        dp = [[False for _ in range(n)] for _ in range(n)]\n        for i in range(n):\n            for j in range(i + 1):\n                if s[i] == s[j] and (i - j < 2 or dp[j + 1][i - 1]):\n                    dp[j][i] = True\n        # print(dp)\n        ans = [n for _ in range(n)]\n        for i in range(n):\n            if dp[0][i]:\n                ans[i] = 0\n            else:\n                for j in range(i):\n                    if dp[j + 1][i]:\n                        ans[i] = min(ans[i], ans[j] + 1)\n        return ans[n - 1]"
    },
    {
        "number": 132,
        "title": "Palindrome Partitioning II",
        "difficulty": 2,
        "prompt": "class Solution:\n    def minCut(self, s: str) -> int:\n        \"\"\"\n        Given a string s, partition s such that every substring of the partition is a palindrome.\n        Return the minimum cuts needed for a palindrome partitioning of s.\n        Example 1:\n        Input: s = \"aab\"\n        Output: 1\n        Explanation: The palindrome partitioning [\"aa\",\"b\"] could be produced using 1 cut.\n        Example 2:\n        Input: s = \"a\"\n        Output: 0\n        Example 3:\n        Input: s = \"ab\"\n        Output: 1\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 5,
        "answer": "        # # dp[i] is the minimum cuts needed for palindromic substring from index 0 to index i.\n        # dp = [0] * (len(s) + 1)\n        # for i in range(len(s) + 1):\n        #     j = 0\n        #     while j < i and i - j <= len(s):\n        #         if s[j:i] == s[j:i][::-1]:\n        #             dp[i] = min(dp[i], dp[j] + 1)\n        #         j += 1\n        # return dp[len(s)] - 1"
    },
    {
        "number": 133,
        "title": "Clone Graph",
        "difficulty": 1,
        "prompt": "\n        \"\"\"\nclass Node:\n    def __init__(self, val = 0, neighbors = None):\n        self.val = val\n        self.neighbors = neighbors if neighbors is not None else []\n        Given a reference of a node in a connected undirected graph.\n        Return a deep copy (clone) of the graph.\n        Each node in the graph contains a value (int) and a list (List[Node]) of its neighbors.\n        class Node {\n            public int val;\n            public List<Node> neighbors;\n        }\n        Test case format:\n        For simplicity, each node's value is the same as the node's index (1-indexed). For example, the first node with val == 1, the second node with val == 2, and so on. The graph is represented in the test case using an adjacency list.\n        An adjacency list is a collection of unordered lists used to represent a finite graph. Each list describes the set of neighbors of a node in the graph.\n        The given node will always be the first node with val = 1. You must return the copy of the given node as a reference to the cloned graph.\n        Example 1:\n        Input: adjList = [[2,4],[1,3],[2,4],[1,3]]\n        Output: [[2,4],[1,3],[2,4],[1,3]]\n        Explanation: There are 4 nodes in the graph.\n        1st node (val = 1)'s neighbors are 2nd node (val = 2) and 4th node (val = 4).\n        2nd node (val = 2)'s neighbors are 1st node (val = 1) and 3rd node (val = 3).\n        3rd node (val = 3)'s neighbors are 2nd node (val = 2) and 4th node (val = 4).\n        4th node (val = 4)'s neighbors are 1st node (val = 1) and 3rd node (val = 3).\n        Example 2:\n        Input: adjList = [[]]\n        Output: [[]]\n        Explanation: Note that the input contains one empty list. The graph consists of only one node with val = 1 and it does not have any neighbors.\n        Example 3:\n        Input: adjList = []\n        Output: []\n        Explanation: This an empty graph, it does not have any nodes.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        self.neighbors = []\n        self.val = val\n    # todo: add param to record whether it is visited\n    def cloneGraph(self, node):\n        if node is None:\n            return None\n        q = [node]\n        nodeDict = {}\n        while len(q) > 0:\n            n = q.pop(0)\n            if n not in nodeDict:\n                nodeDict[n] = Node(n.val)\n            for nn in n.neighbors:\n                if nn not in nodeDict:\n                    q.append(nn)\n                    nodeDict[nn] = Node(nn.val)\n                nodeDict[n].neighbors.append(nodeDict[nn])\n        return nodeDict[node]"
    },
    {
        "number": 133,
        "title": "Clone Graph",
        "difficulty": 1,
        "prompt": "\n        \"\"\"\nclass Node:\n    def __init__(self, val = 0, neighbors = None):\n        self.val = val\n        self.neighbors = neighbors if neighbors is not None else []\n        Given a reference of a node in a connected undirected graph.\n        Return a deep copy (clone) of the graph.\n        Each node in the graph contains a value (int) and a list (List[Node]) of its neighbors.\n        class Node {\n            public int val;\n            public List<Node> neighbors;\n        }\n        Test case format:\n        For simplicity, each node's value is the same as the node's index (1-indexed). For example, the first node with val == 1, the second node with val == 2, and so on. The graph is represented in the test case using an adjacency list.\n        An adjacency list is a collection of unordered lists used to represent a finite graph. Each list describes the set of neighbors of a node in the graph.\n        The given node will always be the first node with val = 1. You must return the copy of the given node as a reference to the cloned graph.\n        Example 1:\n        Input: adjList = [[2,4],[1,3],[2,4],[1,3]]\n        Output: [[2,4],[1,3],[2,4],[1,3]]\n        Explanation: There are 4 nodes in the graph.\n        1st node (val = 1)'s neighbors are 2nd node (val = 2) and 4th node (val = 4).\n        2nd node (val = 2)'s neighbors are 1st node (val = 1) and 3rd node (val = 3).\n        3rd node (val = 3)'s neighbors are 2nd node (val = 2) and 4th node (val = 4).\n        4th node (val = 4)'s neighbors are 1st node (val = 1) and 3rd node (val = 3).\n        Example 2:\n        Input: adjList = [[]]\n        Output: [[]]\n        Explanation: Note that the input contains one empty list. The graph consists of only one node with val = 1 and it does not have any neighbors.\n        Example 3:\n        Input: adjList = []\n        Output: []\n        Explanation: This an empty graph, it does not have any nodes.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "\nfrom collections import deque\nfrom typing import List"
    },
    {
        "number": 133,
        "title": "Clone Graph",
        "difficulty": 1,
        "prompt": "\n        \"\"\"\nclass Node:\n    def __init__(self, val = 0, neighbors = None):\n        self.val = val\n        self.neighbors = neighbors if neighbors is not None else []\n        Given a reference of a node in a connected undirected graph.\n        Return a deep copy (clone) of the graph.\n        Each node in the graph contains a value (int) and a list (List[Node]) of its neighbors.\n        class Node {\n            public int val;\n            public List<Node> neighbors;\n        }\n        Test case format:\n        For simplicity, each node's value is the same as the node's index (1-indexed). For example, the first node with val == 1, the second node with val == 2, and so on. The graph is represented in the test case using an adjacency list.\n        An adjacency list is a collection of unordered lists used to represent a finite graph. Each list describes the set of neighbors of a node in the graph.\n        The given node will always be the first node with val = 1. You must return the copy of the given node as a reference to the cloned graph.\n        Example 1:\n        Input: adjList = [[2,4],[1,3],[2,4],[1,3]]\n        Output: [[2,4],[1,3],[2,4],[1,3]]\n        Explanation: There are 4 nodes in the graph.\n        1st node (val = 1)'s neighbors are 2nd node (val = 2) and 4th node (val = 4).\n        2nd node (val = 2)'s neighbors are 1st node (val = 1) and 3rd node (val = 3).\n        3rd node (val = 3)'s neighbors are 2nd node (val = 2) and 4th node (val = 4).\n        4th node (val = 4)'s neighbors are 1st node (val = 1) and 3rd node (val = 3).\n        Example 2:\n        Input: adjList = [[]]\n        Output: [[]]\n        Explanation: Note that the input contains one empty list. The graph consists of only one node with val = 1 and it does not have any neighbors.\n        Example 3:\n        Input: adjList = []\n        Output: []\n        Explanation: This an empty graph, it does not have any nodes.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 3,
        "answer": "        self.visited = set()\n        self.graph = defaultdict(list)\n        self.cloned_graph = defaultdict(list)\n        \n        def clone_graph(graph, cloned_graph):\n            if not graph:\n                return \n            for key in graph:\n                for val in graph[key]:\n                    if val not in cloned_graph[key]:\n                        cloned_graph[key].append(val)\n            for key in graph:\n                clone_graph(graph[key], cloned_graph)\n            \n        clone_graph(graph, cloned_graph)\n        return cloned_graph"
    },
    {
        "number": 133,
        "title": "Clone Graph",
        "difficulty": 1,
        "prompt": "\n        \"\"\"\nclass Node:\n    def __init__(self, val = 0, neighbors = None):\n        self.val = val\n        self.neighbors = neighbors if neighbors is not None else []\n        Given a reference of a node in a connected undirected graph.\n        Return a deep copy (clone) of the graph.\n        Each node in the graph contains a value (int) and a list (List[Node]) of its neighbors.\n        class Node {\n            public int val;\n            public List<Node> neighbors;\n        }\n        Test case format:\n        For simplicity, each node's value is the same as the node's index (1-indexed). For example, the first node with val == 1, the second node with val == 2, and so on. The graph is represented in the test case using an adjacency list.\n        An adjacency list is a collection of unordered lists used to represent a finite graph. Each list describes the set of neighbors of a node in the graph.\n        The given node will always be the first node with val = 1. You must return the copy of the given node as a reference to the cloned graph.\n        Example 1:\n        Input: adjList = [[2,4],[1,3],[2,4],[1,3]]\n        Output: [[2,4],[1,3],[2,4],[1,3]]\n        Explanation: There are 4 nodes in the graph.\n        1st node (val = 1)'s neighbors are 2nd node (val = 2) and 4th node (val = 4).\n        2nd node (val = 2)'s neighbors are 1st node (val = 1) and 3rd node (val = 3).\n        3rd node (val = 3)'s neighbors are 2nd node (val = 2) and 4th node (val = 4).\n        4th node (val = 4)'s neighbors are 1st node (val = 1) and 3rd node (val = 3).\n        Example 2:\n        Input: adjList = [[]]\n        Output: [[]]\n        Explanation: Note that the input contains one empty list. The graph consists of only one node with val = 1 and it does not have any neighbors.\n        Example 3:\n        Input: adjList = []\n        Output: []\n        Explanation: This an empty graph, it does not have any nodes.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    def cloneGraph(self, node):\n        \"\"\"\n        :type node: Node\n        :rtype: Node\n        \"\"\"\n        if not node:\n            return node\n        stack = [node]\n        visited = {}\n        new_graph = Node(node.val)\n        visited[node.val] = new_graph\n        while stack:\n            n = stack.pop()\n            for nbr in n.neighbors:\n                if nbr.val not in visited:\n                    stack.append(nbr)\n                    new_graph.neighbors.append(Node(nbr.val))\n                    visited[nbr.val] = new_graph.neighbors[-1]\n        return new_graph"
    },
    {
        "number": 133,
        "title": "Clone Graph",
        "difficulty": 1,
        "prompt": "\n        \"\"\"\nclass Node:\n    def __init__(self, val = 0, neighbors = None):\n        self.val = val\n        self.neighbors = neighbors if neighbors is not None else []\n        Given a reference of a node in a connected undirected graph.\n        Return a deep copy (clone) of the graph.\n        Each node in the graph contains a value (int) and a list (List[Node]) of its neighbors.\n        class Node {\n            public int val;\n            public List<Node> neighbors;\n        }\n        Test case format:\n        For simplicity, each node's value is the same as the node's index (1-indexed). For example, the first node with val == 1, the second node with val == 2, and so on. The graph is represented in the test case using an adjacency list.\n        An adjacency list is a collection of unordered lists used to represent a finite graph. Each list describes the set of neighbors of a node in the graph.\n        The given node will always be the first node with val = 1. You must return the copy of the given node as a reference to the cloned graph.\n        Example 1:\n        Input: adjList = [[2,4],[1,3],[2,4],[1,3]]\n        Output: [[2,4],[1,3],[2,4],[1,3]]\n        Explanation: There are 4 nodes in the graph.\n        1st node (val = 1)'s neighbors are 2nd node (val = 2) and 4th node (val = 4).\n        2nd node (val = 2)'s neighbors are 1st node (val = 1) and 3rd node (val = 3).\n        3rd node (val = 3)'s neighbors are 2nd node (val = 2) and 4th node (val = 4).\n        4th node (val = 4)'s neighbors are 1st node (val = 1) and 3rd node (val = 3).\n        Example 2:\n        Input: adjList = [[]]\n        Output: [[]]\n        Explanation: Note that the input contains one empty list. The graph consists of only one node with val = 1 and it does not have any neighbors.\n        Example 3:\n        Input: adjList = []\n        Output: []\n        Explanation: This an empty graph, it does not have any nodes.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 5,
        "answer": "        self.val = val\n        self.neighbors = [Node(x) for x in neighbors] if neighbors is not None else []"
    },
    {
        "number": 134,
        "title": "Gas Station",
        "difficulty": 1,
        "prompt": "class Solution:\n    def canCompleteCircuit(self, gas: List[int], cost: List[int]) -> int:\n        \"\"\"\n        There are n gas stations along a circular route, where the amount of gas at the ith station is gas[i].\n        You have a car with an unlimited gas tank and it costs cost[i] of gas to travel from the ith station to its next (i + 1)th station. You begin the journey with an empty tank at one of the gas stations.\n        Given two integer arrays gas and cost, return the starting gas station's index if you can travel around the circuit once in the clockwise direction, otherwise return -1. If there exists a solution, it is guaranteed to be unique\n        Example 1:\n        Input: gas = [1,2,3,4,5], cost = [3,4,5,1,2]\n        Output: 3\n        Explanation:\n        Start at station 3 (index 3) and fill up with 4 unit of gas. Your tank = 0 + 4 = 4\n        Travel to station 4. Your tank = 4 - 1 + 5 = 8\n        Travel to station 0. Your tank = 8 - 2 + 1 = 7\n        Travel to station 1. Your tank = 7 - 3 + 2 = 6\n        Travel to station 2. Your tank = 6 - 4 + 3 = 5\n        Travel to station 3. The cost is 5. Your gas is just enough to travel back to station 3.\n        Therefore, return 3 as the starting index.\n        Example 2:\n        Input: gas = [2,3,4], cost = [3,4,3]\n        Output: -1\n        Explanation:\n        You can't start at station 0 or 1, as there is not enough gas to travel to the next station.\n        Let's start at station 2 and fill up with 4 unit of gas. Your tank = 0 + 4 = 4\n        Travel to station 0. Your tank = 4 - 3 + 2 = 3\n        Travel to station 1. Your tank = 3 - 3 + 3 = 3\n        You cannot travel back to station 2, as it requires 4 unit of gas but you only have 3.\n        Therefore, you can't travel around the circuit once no matter where you start.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        n = len(gas)\n        if n == 0:\n            return -1\n        if n == 1:\n            return 0 if gas[0] >= cost[0] else -1\n        # \u521d\u59cb\u5316\uff0c\u904d\u5386\u540e\u66f4\u65b0\uff0c\u53ef\u7528\u80fd\u91cf\u6700\u5927\u503c\n        tank = 0\n        for i in range(n):\n            tank += gas[i] - cost[i]\n            if tank < 0:\n                tank = 0\n                continue\n        # \u80fd\u7528\u51e0\u6b21\u53ef\u4ee5\u884c\u9a76\u4e00\u5468\n        ret = -1\n        for i in range(n):\n            if (tank + gas[i] - cost[i]) >= 0:\n                tank += gas[i] - cost[i]\n                ret = i\n        return ret if ret!= -1 else -1"
    },
    {
        "number": 134,
        "title": "Gas Station",
        "difficulty": 1,
        "prompt": "class Solution:\n    def canCompleteCircuit(self, gas: List[int], cost: List[int]) -> int:\n        \"\"\"\n        There are n gas stations along a circular route, where the amount of gas at the ith station is gas[i].\n        You have a car with an unlimited gas tank and it costs cost[i] of gas to travel from the ith station to its next (i + 1)th station. You begin the journey with an empty tank at one of the gas stations.\n        Given two integer arrays gas and cost, return the starting gas station's index if you can travel around the circuit once in the clockwise direction, otherwise return -1. If there exists a solution, it is guaranteed to be unique\n        Example 1:\n        Input: gas = [1,2,3,4,5], cost = [3,4,5,1,2]\n        Output: 3\n        Explanation:\n        Start at station 3 (index 3) and fill up with 4 unit of gas. Your tank = 0 + 4 = 4\n        Travel to station 4. Your tank = 4 - 1 + 5 = 8\n        Travel to station 0. Your tank = 8 - 2 + 1 = 7\n        Travel to station 1. Your tank = 7 - 3 + 2 = 6\n        Travel to station 2. Your tank = 6 - 4 + 3 = 5\n        Travel to station 3. The cost is 5. Your gas is just enough to travel back to station 3.\n        Therefore, return 3 as the starting index.\n        Example 2:\n        Input: gas = [2,3,4], cost = [3,4,3]\n        Output: -1\n        Explanation:\n        You can't start at station 0 or 1, as there is not enough gas to travel to the next station.\n        Let's start at station 2 and fill up with 4 unit of gas. Your tank = 0 + 4 = 4\n        Travel to station 0. Your tank = 4 - 3 + 2 = 3\n        Travel to station 1. Your tank = 3 - 3 + 3 = 3\n        You cannot travel back to station 2, as it requires 4 unit of gas but you only have 3.\n        Therefore, you can't travel around the circuit once no matter where you start.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        start, res = 0, 0\n        for i in range(len(gas)):\n            if gas[i] < cost[i]:\n                start = i + 1\n                res = -1\n                break\n            gas[i] -= cost[i]\n            if gas[i] >= 0:\n                res = i\n        return start if res!= 0 else -1"
    },
    {
        "number": 134,
        "title": "Gas Station",
        "difficulty": 1,
        "prompt": "class Solution:\n    def canCompleteCircuit(self, gas: List[int], cost: List[int]) -> int:\n        \"\"\"\n        There are n gas stations along a circular route, where the amount of gas at the ith station is gas[i].\n        You have a car with an unlimited gas tank and it costs cost[i] of gas to travel from the ith station to its next (i + 1)th station. You begin the journey with an empty tank at one of the gas stations.\n        Given two integer arrays gas and cost, return the starting gas station's index if you can travel around the circuit once in the clockwise direction, otherwise return -1. If there exists a solution, it is guaranteed to be unique\n        Example 1:\n        Input: gas = [1,2,3,4,5], cost = [3,4,5,1,2]\n        Output: 3\n        Explanation:\n        Start at station 3 (index 3) and fill up with 4 unit of gas. Your tank = 0 + 4 = 4\n        Travel to station 4. Your tank = 4 - 1 + 5 = 8\n        Travel to station 0. Your tank = 8 - 2 + 1 = 7\n        Travel to station 1. Your tank = 7 - 3 + 2 = 6\n        Travel to station 2. Your tank = 6 - 4 + 3 = 5\n        Travel to station 3. The cost is 5. Your gas is just enough to travel back to station 3.\n        Therefore, return 3 as the starting index.\n        Example 2:\n        Input: gas = [2,3,4], cost = [3,4,3]\n        Output: -1\n        Explanation:\n        You can't start at station 0 or 1, as there is not enough gas to travel to the next station.\n        Let's start at station 2 and fill up with 4 unit of gas. Your tank = 0 + 4 = 4\n        Travel to station 0. Your tank = 4 - 3 + 2 = 3\n        Travel to station 1. Your tank = 3 - 3 + 3 = 3\n        You cannot travel back to station 2, as it requires 4 unit of gas but you only have 3.\n        Therefore, you can't travel around the circuit once no matter where you start.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 3,
        "answer": "        if sum(gas) < sum(cost):\n            return -1\n        start, total = 0, 0\n        for i in range(len(gas)):\n            total += gas[i] - cost[i]\n            if total < 0:\n                start, total = i + 1, 0\n        return start"
    },
    {
        "number": 134,
        "title": "Gas Station",
        "difficulty": 1,
        "prompt": "class Solution:\n    def canCompleteCircuit(self, gas: List[int], cost: List[int]) -> int:\n        \"\"\"\n        There are n gas stations along a circular route, where the amount of gas at the ith station is gas[i].\n        You have a car with an unlimited gas tank and it costs cost[i] of gas to travel from the ith station to its next (i + 1)th station. You begin the journey with an empty tank at one of the gas stations.\n        Given two integer arrays gas and cost, return the starting gas station's index if you can travel around the circuit once in the clockwise direction, otherwise return -1. If there exists a solution, it is guaranteed to be unique\n        Example 1:\n        Input: gas = [1,2,3,4,5], cost = [3,4,5,1,2]\n        Output: 3\n        Explanation:\n        Start at station 3 (index 3) and fill up with 4 unit of gas. Your tank = 0 + 4 = 4\n        Travel to station 4. Your tank = 4 - 1 + 5 = 8\n        Travel to station 0. Your tank = 8 - 2 + 1 = 7\n        Travel to station 1. Your tank = 7 - 3 + 2 = 6\n        Travel to station 2. Your tank = 6 - 4 + 3 = 5\n        Travel to station 3. The cost is 5. Your gas is just enough to travel back to station 3.\n        Therefore, return 3 as the starting index.\n        Example 2:\n        Input: gas = [2,3,4], cost = [3,4,3]\n        Output: -1\n        Explanation:\n        You can't start at station 0 or 1, as there is not enough gas to travel to the next station.\n        Let's start at station 2 and fill up with 4 unit of gas. Your tank = 0 + 4 = 4\n        Travel to station 0. Your tank = 4 - 3 + 2 = 3\n        Travel to station 1. Your tank = 3 - 3 + 3 = 3\n        You cannot travel back to station 2, as it requires 4 unit of gas but you only have 3.\n        Therefore, you can't travel around the circuit once no matter where you start.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 4,
        "answer": "        if sum(gas) < sum(cost):\n            return -1\n        if sum(gas) == sum(cost):\n            return 0"
    },
    {
        "number": 134,
        "title": "Gas Station",
        "difficulty": 1,
        "prompt": "class Solution:\n    def canCompleteCircuit(self, gas: List[int], cost: List[int]) -> int:\n        \"\"\"\n        There are n gas stations along a circular route, where the amount of gas at the ith station is gas[i].\n        You have a car with an unlimited gas tank and it costs cost[i] of gas to travel from the ith station to its next (i + 1)th station. You begin the journey with an empty tank at one of the gas stations.\n        Given two integer arrays gas and cost, return the starting gas station's index if you can travel around the circuit once in the clockwise direction, otherwise return -1. If there exists a solution, it is guaranteed to be unique\n        Example 1:\n        Input: gas = [1,2,3,4,5], cost = [3,4,5,1,2]\n        Output: 3\n        Explanation:\n        Start at station 3 (index 3) and fill up with 4 unit of gas. Your tank = 0 + 4 = 4\n        Travel to station 4. Your tank = 4 - 1 + 5 = 8\n        Travel to station 0. Your tank = 8 - 2 + 1 = 7\n        Travel to station 1. Your tank = 7 - 3 + 2 = 6\n        Travel to station 2. Your tank = 6 - 4 + 3 = 5\n        Travel to station 3. The cost is 5. Your gas is just enough to travel back to station 3.\n        Therefore, return 3 as the starting index.\n        Example 2:\n        Input: gas = [2,3,4], cost = [3,4,3]\n        Output: -1\n        Explanation:\n        You can't start at station 0 or 1, as there is not enough gas to travel to the next station.\n        Let's start at station 2 and fill up with 4 unit of gas. Your tank = 0 + 4 = 4\n        Travel to station 0. Your tank = 4 - 3 + 2 = 3\n        Travel to station 1. Your tank = 3 - 3 + 3 = 3\n        You cannot travel back to station 2, as it requires 4 unit of gas but you only have 3.\n        Therefore, you can't travel around the circuit once no matter where you start.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 5,
        "answer": "        # for loop all the gas stations, compute the fuel that can be used to move to the next station, if it is greater than the cost, then you have a solution\n        # if the amount of gas used is less than the cost of fuel, then you will have negative fuel\n        # if it is greater than the cost of fuel, then it will be less than zero after the travel\n        # then you need to check if you have a solution\n        # remember to use the index value of 0 as the starting index\n        # if you have a solution, return the starting index\n        # if not, return -1\n        \n        if sum(gas) < sum(cost):\n            return -1\n        \n        # get the fuel that can be used in the trip, to the next station\n        fuel = [gas[i]-cost[i] for i in range(len(gas))]\n        \n        for i in range(len(fuel)):\n            if fuel[i] >= 0:\n                # if the fuel is greater than 0, then you have a solution\n                # start the travel from the index 0\n                fuel[i] = 0\n                fuel_used = 0\n                \n                for j in range(i, len(fuel)):\n                    fuel_used += fuel[j]\n                    if fuel_used < 0:\n                        # if the fuel"
    },
    {
        "number": 135,
        "title": "Candy",
        "difficulty": 2,
        "prompt": "class Solution:\n    def candy(self, ratings: List[int]) -> int:\n        \"\"\"\n        There are n children standing in a line. Each child is assigned a rating value given in the integer array ratings.\n        You are giving candies to these children subjected to the following requirements:\n            Each child must have at least one candy.\n            Children with a higher rating get more candies than their neighbors.\n        Return the minimum number of candies you need to have to distribute the candies to the children.\n        Example 1:\n        Input: ratings = [1,0,2]\n        Output: 5\n        Explanation: You can allocate to the first, second and third child with 2, 1, 2 candies respectively.\n        Example 2:\n        Input: ratings = [1,2,2]\n        Output: 4\n        Explanation: You can allocate to the first, second and third child with 1, 2, 1 candies respectively.\n        The third child gets 1 candy because it satisfies the above two conditions.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        def calculate_candy_change(left: int, right: int, prev_candy: int) -> int:\n            # print(\"curr: left {}, right {}\".format(left, right))\n            if left == right:\n                return prev_candy\n            if left + 1 == right:\n                if ratings[left] < ratings[right]:\n                    return ratings[right] - ratings[left] + 1 + prev_candy\n                else:\n                    return prev_candy\n            mid = (left + right) // 2\n            candy = min(calculate_candy_change(left, mid, prev_candy),\n                        calculate_candy_change(mid + 1, right, prev_candy))\n            for i in range(left, right + 1):\n                if ratings[i] > ratings[mid]:\n                    candy = max(candy, (mid + 1 - left + 1) + 1 + prev_candy)\n                else:\n                    candy = max(candy, prev_candy + 1)\n            return candy"
    },
    {
        "number": 135,
        "title": "Candy",
        "difficulty": 2,
        "prompt": "class Solution:\n    def candy(self, ratings: List[int]) -> int:\n        \"\"\"\n        There are n children standing in a line. Each child is assigned a rating value given in the integer array ratings.\n        You are giving candies to these children subjected to the following requirements:\n            Each child must have at least one candy.\n            Children with a higher rating get more candies than their neighbors.\n        Return the minimum number of candies you need to have to distribute the candies to the children.\n        Example 1:\n        Input: ratings = [1,0,2]\n        Output: 5\n        Explanation: You can allocate to the first, second and third child with 2, 1, 2 candies respectively.\n        Example 2:\n        Input: ratings = [1,2,2]\n        Output: 4\n        Explanation: You can allocate to the first, second and third child with 1, 2, 1 candies respectively.\n        The third child gets 1 candy because it satisfies the above two conditions.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        pass\n        res, start = 0, 0\n        for i in range(1, len(ratings)):\n            if ratings[start] <= ratings[i]:\n                res += 1\n                start = i\n        return res + 1"
    },
    {
        "number": 135,
        "title": "Candy",
        "difficulty": 2,
        "prompt": "class Solution:\n    def candy(self, ratings: List[int]) -> int:\n        \"\"\"\n        There are n children standing in a line. Each child is assigned a rating value given in the integer array ratings.\n        You are giving candies to these children subjected to the following requirements:\n            Each child must have at least one candy.\n            Children with a higher rating get more candies than their neighbors.\n        Return the minimum number of candies you need to have to distribute the candies to the children.\n        Example 1:\n        Input: ratings = [1,0,2]\n        Output: 5\n        Explanation: You can allocate to the first, second and third child with 2, 1, 2 candies respectively.\n        Example 2:\n        Input: ratings = [1,2,2]\n        Output: 4\n        Explanation: You can allocate to the first, second and third child with 1, 2, 1 candies respectively.\n        The third child gets 1 candy because it satisfies the above two conditions.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 3,
        "answer": "        n = len(ratings)\n        res = [1] * n\n        for i in range(1, n):\n            if ratings[i] > ratings[i - 1]:\n                res[i] = res[i - 1] + 1\n        for i in range(n - 2, -1, -1):\n            if ratings[i] > ratings[i + 1]:\n                res[i] = max(res[i], res[i + 1] + 1)\n        return sum(res)\n<|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>"
    },
    {
        "number": 135,
        "title": "Candy",
        "difficulty": 2,
        "prompt": "class Solution:\n    def candy(self, ratings: List[int]) -> int:\n        \"\"\"\n        There are n children standing in a line. Each child is assigned a rating value given in the integer array ratings.\n        You are giving candies to these children subjected to the following requirements:\n            Each child must have at least one candy.\n            Children with a higher rating get more candies than their neighbors.\n        Return the minimum number of candies you need to have to distribute the candies to the children.\n        Example 1:\n        Input: ratings = [1,0,2]\n        Output: 5\n        Explanation: You can allocate to the first, second and third child with 2, 1, 2 candies respectively.\n        Example 2:\n        Input: ratings = [1,2,2]\n        Output: 4\n        Explanation: You can allocate to the first, second and third child with 1, 2, 1 candies respectively.\n        The third child gets 1 candy because it satisfies the above two conditions.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 4,
        "answer": "        candy_count = [1] * len(ratings)\n        for i in range(1, len(ratings)):\n            if ratings[i] > ratings[i-1]:\n                candy_count[i] = candy_count[i-1] + 1\n        for i in range(len(ratings) - 1, 0, -1):\n            if ratings[i-1] > ratings[i]:\n                candy_count[i-1] = max(candy_count[i] + 1, candy_count[i-1])\n        return sum(candy_count)"
    },
    {
        "number": 135,
        "title": "Candy",
        "difficulty": 2,
        "prompt": "class Solution:\n    def candy(self, ratings: List[int]) -> int:\n        \"\"\"\n        There are n children standing in a line. Each child is assigned a rating value given in the integer array ratings.\n        You are giving candies to these children subjected to the following requirements:\n            Each child must have at least one candy.\n            Children with a higher rating get more candies than their neighbors.\n        Return the minimum number of candies you need to have to distribute the candies to the children.\n        Example 1:\n        Input: ratings = [1,0,2]\n        Output: 5\n        Explanation: You can allocate to the first, second and third child with 2, 1, 2 candies respectively.\n        Example 2:\n        Input: ratings = [1,2,2]\n        Output: 4\n        Explanation: You can allocate to the first, second and third child with 1, 2, 1 candies respectively.\n        The third child gets 1 candy because it satisfies the above two conditions.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 5,
        "answer": "        if not ratings:\n            return 0\n        \n        n = len(ratings)\n        candies = [1] * n\n        for i in range(1, n):\n            if ratings[i] > ratings[i - 1]:\n                candies[i] = candies[i - 1] + 1\n        \n        for i in range(n - 1, 0, -1):\n            if ratings[i - 1] > ratings[i]:\n                candies[i - 1] = max(candies[i - 1], candies[i] + 1)\n        return sum(candies)\n    \n    def candy_2(self, ratings: List[int]) -> int:\n        \"\"\"\n        You are given an integer array candies, where candies[i] represents the number of candies that the ith\n        child has. Return the number of leftover candies that you must give to the children after giving them\n        the specified number of candies per child.\n        Example 1:\n        Input: candies = [1,1,2,2,3,3]\n        Output: 3\n        Explanation: You can allocate to the first, second and third child with 1, 2, 3 candies respectively.\n        The third child gets 2 candies because it satisfies the above two conditions.\n        The fourth"
    },
    {
        "number": 136,
        "title": "Single Number",
        "difficulty": 0,
        "prompt": "class Solution:\n    def singleNumber(self, nums: List[int]) -> int:\n        \"\"\"\n        Given a non-empty array of integers nums, every element appears twice except for one. Find that single one.\n        You must implement a solution with a linear runtime complexity and use only constant extra space.\n        Example 1:\n        Input: nums = [2,2,1]\n        Output: 1\n        Example 2:\n        Input: nums = [4,1,2,1,2]\n        Output: 4\n        Example 3:\n        Input: nums = [1]\n        Output: 1\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        single = 0\n        for num in nums:\n            single = single ^ num\n        return single"
    },
    {
        "number": 136,
        "title": "Single Number",
        "difficulty": 0,
        "prompt": "class Solution:\n    def singleNumber(self, nums: List[int]) -> int:\n        \"\"\"\n        Given a non-empty array of integers nums, every element appears twice except for one. Find that single one.\n        You must implement a solution with a linear runtime complexity and use only constant extra space.\n        Example 1:\n        Input: nums = [2,2,1]\n        Output: 1\n        Example 2:\n        Input: nums = [4,1,2,1,2]\n        Output: 4\n        Example 3:\n        Input: nums = [1]\n        Output: 1\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        # use XOR\n        # XOR = 1 XOR X1 X2 X1 = 0 XOR X1 X2 X1 = 1 XOR X2 = 0 XOR X2 = 1\n        # XOR = 1 XOR X1 X2 X1 = 0 XOR X1 X2 X1 = 1 XOR X2 X2 X1 = 0\n        # XOR = 1 XOR X1 X2 X1 = 1 XOR X1 X2 X1 = 1 XOR X2 X2 = 0 XOR X2 = 1\n        xor_sum = 0\n        for num in nums:\n            xor_sum ^= num"
    },
    {
        "number": 136,
        "title": "Single Number",
        "difficulty": 0,
        "prompt": "class Solution:\n    def singleNumber(self, nums: List[int]) -> int:\n        \"\"\"\n        Given a non-empty array of integers nums, every element appears twice except for one. Find that single one.\n        You must implement a solution with a linear runtime complexity and use only constant extra space.\n        Example 1:\n        Input: nums = [2,2,1]\n        Output: 1\n        Example 2:\n        Input: nums = [4,1,2,1,2]\n        Output: 4\n        Example 3:\n        Input: nums = [1]\n        Output: 1\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 3,
        "answer": "        xor = 0\n        for i in nums:\n            xor = xor ^ i"
    },
    {
        "number": 136,
        "title": "Single Number",
        "difficulty": 0,
        "prompt": "class Solution:\n    def singleNumber(self, nums: List[int]) -> int:\n        \"\"\"\n        Given a non-empty array of integers nums, every element appears twice except for one. Find that single one.\n        You must implement a solution with a linear runtime complexity and use only constant extra space.\n        Example 1:\n        Input: nums = [2,2,1]\n        Output: 1\n        Example 2:\n        Input: nums = [4,1,2,1,2]\n        Output: 4\n        Example 3:\n        Input: nums = [1]\n        Output: 1\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 4,
        "answer": "        # \u54c8\u5e0c\u8868\uff0cO(n)\n        # \u627e\u5230\u6240\u6709\u51fa\u73b0\u6b21\u6570\u4e3a 1 \u7684\u6570\n        # \u8ba1\u7b97\u5404\u4e2a\u6570\u5728\u54c8\u5e0c\u8868\u4e2d\u51fa\u73b0\u7684\u6b21\u6570\n        # \u4f59\u6570\u4e3a 1 \u7684\u6570\u5373\u4e3a\u6240\u6c42\n        # \u54c8\u5e0c\u8868 + \u4f59\u6570\u4e3a 0 \u7684\u6570\u5373\u4e3a\u6240\u6c42\n        # \u5217\u8868\u8f6c\u96c6\u5408\uff0c\u964d\u4f4e\u65f6\u95f4\u590d\u6742\u5ea6\n        # return (2 * sum(set(nums)) - sum(nums))\n        # \u76f4\u63a5\u8ba1\u7b97\u96c6\u5408\u7684\u548c\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a O(n)\n        return 2 * sum(nums) - sum(set(nums))"
    },
    {
        "number": 136,
        "title": "Single Number",
        "difficulty": 0,
        "prompt": "class Solution:\n    def singleNumber(self, nums: List[int]) -> int:\n        \"\"\"\n        Given a non-empty array of integers nums, every element appears twice except for one. Find that single one.\n        You must implement a solution with a linear runtime complexity and use only constant extra space.\n        Example 1:\n        Input: nums = [2,2,1]\n        Output: 1\n        Example 2:\n        Input: nums = [4,1,2,1,2]\n        Output: 4\n        Example 3:\n        Input: nums = [1]\n        Output: 1\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 5,
        "answer": "        unique_nums = set()\n        for num in nums:\n            if num in unique_nums:\n                unique_nums.remove(num)\n            else:\n                unique_nums.add(num)\n        return unique_nums.pop()"
    },
    {
        "number": 137,
        "title": "Single Number II",
        "difficulty": 1,
        "prompt": "class Solution:\n    def singleNumber(self, nums: List[int]) -> int:\n        \"\"\"\n        Given an integer array nums where every element appears three times except for one, which appears exactly once. Find the single element and return it.\n        You must implement a solution with a linear runtime complexity and use only constant extra space.\n        Example 1:\n        Input: nums = [2,2,3,2]\n        Output: 3\n        Example 2:\n        Input: nums = [0,1,0,1,0,1,99]\n        Output: 99\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        # \u6267\u884c\u7528\u65f6 :240 ms, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e8628.32%\u7684\u7528\u6237\n        # \u5185\u5b58\u6d88\u8017 :15.1 MB, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e86100.00%\u7684\u7528\u6237\n        res = nums[0]\n        for i in range(1, len(nums)):\n            res = res ^ nums[i]\n        return res"
    },
    {
        "number": 137,
        "title": "Single Number II",
        "difficulty": 1,
        "prompt": "class Solution:\n    def singleNumber(self, nums: List[int]) -> int:\n        \"\"\"\n        Given an integer array nums where every element appears three times except for one, which appears exactly once. Find the single element and return it.\n        You must implement a solution with a linear runtime complexity and use only constant extra space.\n        Example 1:\n        Input: nums = [2,2,3,2]\n        Output: 3\n        Example 2:\n        Input: nums = [0,1,0,1,0,1,99]\n        Output: 99\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        \n        # since we are given all numbers are repeated 3 times except one, we can iterate through our nums and check the number we have\n        # already has that value, if we have not encountered that number, then we can return the number, if we have, then we know that the value\n        # that number is is repeated 2 times\n        \n        for i in nums:\n            if nums.count(i) == 1:\n                return i\n            \n# TIME = O(n) where n is the length of nums\n# SPACE = O(n) where n is the length of nums"
    },
    {
        "number": 137,
        "title": "Single Number II",
        "difficulty": 1,
        "prompt": "class Solution:\n    def singleNumber(self, nums: List[int]) -> int:\n        \"\"\"\n        Given an integer array nums where every element appears three times except for one, which appears exactly once. Find the single element and return it.\n        You must implement a solution with a linear runtime complexity and use only constant extra space.\n        Example 1:\n        Input: nums = [2,2,3,2]\n        Output: 3\n        Example 2:\n        Input: nums = [0,1,0,1,0,1,99]\n        Output: 99\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 3,
        "answer": "        my_dict = {}\n        for num in nums:\n            if num in my_dict.keys():\n                my_dict[num] = my_dict[num] + 1\n            else:\n                my_dict[num] = 1\n        for key, value in my_dict.items():\n            if value == 1:\n                return key"
    },
    {
        "number": 137,
        "title": "Single Number II",
        "difficulty": 1,
        "prompt": "class Solution:\n    def singleNumber(self, nums: List[int]) -> int:\n        \"\"\"\n        Given an integer array nums where every element appears three times except for one, which appears exactly once. Find the single element and return it.\n        You must implement a solution with a linear runtime complexity and use only constant extra space.\n        Example 1:\n        Input: nums = [2,2,3,2]\n        Output: 3\n        Example 2:\n        Input: nums = [0,1,0,1,0,1,99]\n        Output: 99\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 4,
        "answer": "        return 2*sum(set(nums)) - sum(nums)"
    },
    {
        "number": 137,
        "title": "Single Number II",
        "difficulty": 1,
        "prompt": "class Solution:\n    def singleNumber(self, nums: List[int]) -> int:\n        \"\"\"\n        Given an integer array nums where every element appears three times except for one, which appears exactly once. Find the single element and return it.\n        You must implement a solution with a linear runtime complexity and use only constant extra space.\n        Example 1:\n        Input: nums = [2,2,3,2]\n        Output: 3\n        Example 2:\n        Input: nums = [0,1,0,1,0,1,99]\n        Output: 99\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 5,
        "answer": "        one = two = 0\n        for n in nums:\n            two ^= n\n        for n in nums:\n            one = one ^ n\n            two = two ^ n\n        return one"
    },
    {
        "number": 138,
        "title": "Copy List with Random Pointer",
        "difficulty": 1,
        "prompt": "\n        \"\"\"\nclass Node:\n    def __init__(self, x: int, next: 'Node' = None, random: 'Node' = None):\n        self.val = int(x)\n        self.next = next\n        self.random = random\n        A linked list of length n is given such that each node contains an additional random pointer, which could point to any node in the list, or null.\n        Construct a deep copy of the list. The deep copy should consist of exactly n brand new nodes, where each new node has its value set to the value of its corresponding original node. Both the next and random pointer of the new nodes should point to new nodes in the copied list such that the pointers in the original list and copied list represent the same list state. None of the pointers in the new list should point to nodes in the original list.\n        For example, if there are two nodes X and Y in the original list, where X.random --> Y, then for the corresponding two nodes x and y in the copied list, x.random --> y.\n        Return the head of the copied linked list.\n        The linked list is represented in the input/output as a list of n nodes. Each node is represented as a pair of [val, random_index] where:\n            val: an integer representing Node.val\n            random_index: the index of the node (range from 0 to n-1) that the random pointer points to, or null if it does not point to any node.\n        Your code will only be given the head of the original linked list.\n        Example 1:\n        Input: head = [[7,null],[13,0],[11,4],[10,2],[1,0]]\n        Output: [[7,null],[13,0],[11,4],[10,2],[1,0]]\n        Example 2:\n        Input: head = [[1,1],[2,1]]\n        Output: [[1,1],[2,1]]\n        Example 3:\n        Input: head = [[3,null],[3,0],[3,null]]\n        Output: [[3,null],[3,0],[3,null]]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    def copyRandomList(self, head: 'Node') -> 'Node':\n        dic = {}"
    },
    {
        "number": 138,
        "title": "Copy List with Random Pointer",
        "difficulty": 1,
        "prompt": "\n        \"\"\"\nclass Node:\n    def __init__(self, x: int, next: 'Node' = None, random: 'Node' = None):\n        self.val = int(x)\n        self.next = next\n        self.random = random\n        A linked list of length n is given such that each node contains an additional random pointer, which could point to any node in the list, or null.\n        Construct a deep copy of the list. The deep copy should consist of exactly n brand new nodes, where each new node has its value set to the value of its corresponding original node. Both the next and random pointer of the new nodes should point to new nodes in the copied list such that the pointers in the original list and copied list represent the same list state. None of the pointers in the new list should point to nodes in the original list.\n        For example, if there are two nodes X and Y in the original list, where X.random --> Y, then for the corresponding two nodes x and y in the copied list, x.random --> y.\n        Return the head of the copied linked list.\n        The linked list is represented in the input/output as a list of n nodes. Each node is represented as a pair of [val, random_index] where:\n            val: an integer representing Node.val\n            random_index: the index of the node (range from 0 to n-1) that the random pointer points to, or null if it does not point to any node.\n        Your code will only be given the head of the original linked list.\n        Example 1:\n        Input: head = [[7,null],[13,0],[11,4],[10,2],[1,0]]\n        Output: [[7,null],[13,0],[11,4],[10,2],[1,0]]\n        Example 2:\n        Input: head = [[1,1],[2,1]]\n        Output: [[1,1],[2,1]]\n        Example 3:\n        Input: head = [[3,null],[3,0],[3,null]]\n        Output: [[3,null],[3,0],[3,null]]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        self.val = x\n        self.next = None\n        self.random = None\n        \nclass Solution:\n    def copyRandomList(self, head: 'Node') -> 'Node':\n        if not head: return head\n        dummy = Node(0, None, None)\n        node = head\n        while node:\n            new_node = Node(node.val, None, None)\n            new_node.next = node.next\n            node.next = new_node\n            node = new_node.next\n        node = head\n        while node:\n            if node.random:\n                node.next.random = node.random.next\n            node = node.next.next\n        node = head\n        new_head = dummy.next\n        while node:\n            new_node = node.next\n            node.next = new_node.next\n            if new_node.next:\n                new_node.next = new_node.next.next\n            node = node.next\n        return new_head\n        \n    \n    def copyRandomList_1(self, head: 'Node') -> 'Node':\n        def dfs(node):\n            if node:\n                if node not in visited:\n                    new_node = Node(node.val, None, None)\n                    visited"
    },
    {
        "number": 138,
        "title": "Copy List with Random Pointer",
        "difficulty": 1,
        "prompt": "\n        \"\"\"\nclass Node:\n    def __init__(self, x: int, next: 'Node' = None, random: 'Node' = None):\n        self.val = int(x)\n        self.next = next\n        self.random = random\n        A linked list of length n is given such that each node contains an additional random pointer, which could point to any node in the list, or null.\n        Construct a deep copy of the list. The deep copy should consist of exactly n brand new nodes, where each new node has its value set to the value of its corresponding original node. Both the next and random pointer of the new nodes should point to new nodes in the copied list such that the pointers in the original list and copied list represent the same list state. None of the pointers in the new list should point to nodes in the original list.\n        For example, if there are two nodes X and Y in the original list, where X.random --> Y, then for the corresponding two nodes x and y in the copied list, x.random --> y.\n        Return the head of the copied linked list.\n        The linked list is represented in the input/output as a list of n nodes. Each node is represented as a pair of [val, random_index] where:\n            val: an integer representing Node.val\n            random_index: the index of the node (range from 0 to n-1) that the random pointer points to, or null if it does not point to any node.\n        Your code will only be given the head of the original linked list.\n        Example 1:\n        Input: head = [[7,null],[13,0],[11,4],[10,2],[1,0]]\n        Output: [[7,null],[13,0],[11,4],[10,2],[1,0]]\n        Example 2:\n        Input: head = [[1,1],[2,1]]\n        Output: [[1,1],[2,1]]\n        Example 3:\n        Input: head = [[3,null],[3,0],[3,null]]\n        Output: [[3,null],[3,0],[3,null]]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 3,
        "answer": "\nclass Solution:\n    def copyRandomList(self, head: 'Node') -> 'Node':\n        \"\"\"\n        \"\"\"\n        def dfs(node):\n            if not node:\n                return None\n            if node in visited:\n                return visited[node]\n            clone = Node(node.val, None, None)\n            visited[node] = clone\n            clone.next = dfs(node.next)\n            clone.random = dfs(node.random)\n            return clone"
    },
    {
        "number": 138,
        "title": "Copy List with Random Pointer",
        "difficulty": 1,
        "prompt": "\n        \"\"\"\nclass Node:\n    def __init__(self, x: int, next: 'Node' = None, random: 'Node' = None):\n        self.val = int(x)\n        self.next = next\n        self.random = random\n        A linked list of length n is given such that each node contains an additional random pointer, which could point to any node in the list, or null.\n        Construct a deep copy of the list. The deep copy should consist of exactly n brand new nodes, where each new node has its value set to the value of its corresponding original node. Both the next and random pointer of the new nodes should point to new nodes in the copied list such that the pointers in the original list and copied list represent the same list state. None of the pointers in the new list should point to nodes in the original list.\n        For example, if there are two nodes X and Y in the original list, where X.random --> Y, then for the corresponding two nodes x and y in the copied list, x.random --> y.\n        Return the head of the copied linked list.\n        The linked list is represented in the input/output as a list of n nodes. Each node is represented as a pair of [val, random_index] where:\n            val: an integer representing Node.val\n            random_index: the index of the node (range from 0 to n-1) that the random pointer points to, or null if it does not point to any node.\n        Your code will only be given the head of the original linked list.\n        Example 1:\n        Input: head = [[7,null],[13,0],[11,4],[10,2],[1,0]]\n        Output: [[7,null],[13,0],[11,4],[10,2],[1,0]]\n        Example 2:\n        Input: head = [[1,1],[2,1]]\n        Output: [[1,1],[2,1]]\n        Example 3:\n        Input: head = [[3,null],[3,0],[3,null]]\n        Output: [[3,null],[3,0],[3,null]]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 4,
        "answer": "        \n        # initialise new_head with the head of linkedlist\n        # initialise new_node to None\n        # initialise new_node_val to None\n        # initialise new_node_random to None\n        new_head = None\n        new_node = None\n        new_node_val = None\n        new_node_random = None\n        current_node = head\n        while current_node is not None:\n            # initialise new_node to current_node\n            # set new_node_val to current_node.val\n            # if current_node.random is not None:\n            #     # set new_node_random to current_node.random.val\n            new_node = Node(current_node.val)\n            new_node_val = current_node.val\n            if current_node.random is not None:\n                new_node_random = current_node.random.val\n            # if the new_head is None:\n            #     # set new_head to new_node\n            #     new_head = new_node\n            if new_head is None:\n                new_head = new_node\n            else:\n                # set new_node.next to the head\n                new_node.next = new_head\n                # set the new_head to"
    },
    {
        "number": 138,
        "title": "Copy List with Random Pointer",
        "difficulty": 1,
        "prompt": "\n        \"\"\"\nclass Node:\n    def __init__(self, x: int, next: 'Node' = None, random: 'Node' = None):\n        self.val = int(x)\n        self.next = next\n        self.random = random\n        A linked list of length n is given such that each node contains an additional random pointer, which could point to any node in the list, or null.\n        Construct a deep copy of the list. The deep copy should consist of exactly n brand new nodes, where each new node has its value set to the value of its corresponding original node. Both the next and random pointer of the new nodes should point to new nodes in the copied list such that the pointers in the original list and copied list represent the same list state. None of the pointers in the new list should point to nodes in the original list.\n        For example, if there are two nodes X and Y in the original list, where X.random --> Y, then for the corresponding two nodes x and y in the copied list, x.random --> y.\n        Return the head of the copied linked list.\n        The linked list is represented in the input/output as a list of n nodes. Each node is represented as a pair of [val, random_index] where:\n            val: an integer representing Node.val\n            random_index: the index of the node (range from 0 to n-1) that the random pointer points to, or null if it does not point to any node.\n        Your code will only be given the head of the original linked list.\n        Example 1:\n        Input: head = [[7,null],[13,0],[11,4],[10,2],[1,0]]\n        Output: [[7,null],[13,0],[11,4],[10,2],[1,0]]\n        Example 2:\n        Input: head = [[1,1],[2,1]]\n        Output: [[1,1],[2,1]]\n        Example 3:\n        Input: head = [[3,null],[3,0],[3,null]]\n        Output: [[3,null],[3,0],[3,null]]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 5,
        "answer": "        if head is None:\n            return None\n        if head.next is None:\n            return head\n        \n        h = Node(head.val, head.next, head.random)\n        h.next = self.copy(head.next)\n        return h\n    \n    def copy(self, head):\n        if head is None:\n            return None\n        if head.next is None:\n            return head\n        \n        h = Node(head.val, head.next, head.random)\n        h.next = self.copy(head.next)\n        return h\n    \n    def print_node(self):\n        cur = self\n        while cur is not None:\n            print(cur.val, end=\" \")\n            if cur.random is not None:\n                print(cur.random.val, end=\" \")\n            else:\n                print(\"None\", end=\" \")\n            cur = cur.next\n        print()\n    \n    def reconstruct(self, head):\n        if head is None:\n            return None\n        if head.next is None:\n            return head\n        \n        h = Node(head.val, head.next, head.random)\n        h.next = self.reconstruct(head.next)\n        return h\n    \n    def deepcopy"
    },
    {
        "number": 139,
        "title": "Word Break",
        "difficulty": 1,
        "prompt": "class Solution:\n    def wordBreak(self, s: str, wordDict: List[str]) -> bool:\n        \"\"\"\n        Given a string s and a dictionary of strings wordDict, return true if s can be segmented into a space-separated sequence of one or more dictionary words.\n        Note that the same word in the dictionary may be reused multiple times in the segmentation.\n        Example 1:\n        Input: s = \"leetcode\", wordDict = [\"leet\",\"code\"]\n        Output: true\n        Explanation: Return true because \"leetcode\" can be segmented as \"leet code\".\n        Example 2:\n        Input: s = \"applepenapple\", wordDict = [\"apple\",\"pen\"]\n        Output: true\n        Explanation: Return true because \"applepenapple\" can be segmented as \"apple pen apple\".\n        Note that you are allowed to reuse a dictionary word.\n        Example 3:\n        Input: s = \"catsandog\", wordDict = [\"cats\",\"dog\",\"sand\",\"and\",\"cat\"]\n        Output: false\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        return self.wordBreakHelper(s, wordDict, {})"
    },
    {
        "number": 139,
        "title": "Word Break",
        "difficulty": 1,
        "prompt": "class Solution:\n    def wordBreak(self, s: str, wordDict: List[str]) -> bool:\n        \"\"\"\n        Given a string s and a dictionary of strings wordDict, return true if s can be segmented into a space-separated sequence of one or more dictionary words.\n        Note that the same word in the dictionary may be reused multiple times in the segmentation.\n        Example 1:\n        Input: s = \"leetcode\", wordDict = [\"leet\",\"code\"]\n        Output: true\n        Explanation: Return true because \"leetcode\" can be segmented as \"leet code\".\n        Example 2:\n        Input: s = \"applepenapple\", wordDict = [\"apple\",\"pen\"]\n        Output: true\n        Explanation: Return true because \"applepenapple\" can be segmented as \"apple pen apple\".\n        Note that you are allowed to reuse a dictionary word.\n        Example 3:\n        Input: s = \"catsandog\", wordDict = [\"cats\",\"dog\",\"sand\",\"and\",\"cat\"]\n        Output: false\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        if not wordDict:\n            return not s\n        if not s:\n            return True\n        n = len(s)\n        dp = [False] * (n+1)\n        dp[0] = True\n        for i in range(1,n+1):\n            for j in range(0,i):\n                if dp[j] and s[j:i] in wordDict:\n                    dp[i] = True\n                    break\n        return dp[n]\n<|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>"
    },
    {
        "number": 139,
        "title": "Word Break",
        "difficulty": 1,
        "prompt": "class Solution:\n    def wordBreak(self, s: str, wordDict: List[str]) -> bool:\n        \"\"\"\n        Given a string s and a dictionary of strings wordDict, return true if s can be segmented into a space-separated sequence of one or more dictionary words.\n        Note that the same word in the dictionary may be reused multiple times in the segmentation.\n        Example 1:\n        Input: s = \"leetcode\", wordDict = [\"leet\",\"code\"]\n        Output: true\n        Explanation: Return true because \"leetcode\" can be segmented as \"leet code\".\n        Example 2:\n        Input: s = \"applepenapple\", wordDict = [\"apple\",\"pen\"]\n        Output: true\n        Explanation: Return true because \"applepenapple\" can be segmented as \"apple pen apple\".\n        Note that you are allowed to reuse a dictionary word.\n        Example 3:\n        Input: s = \"catsandog\", wordDict = [\"cats\",\"dog\",\"sand\",\"and\",\"cat\"]\n        Output: false\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 3,
        "answer": "        # \"catsandog\" => False\n        # \"catsanddog\" => False\n        # \"catsanddog\" => True\n        # \"catsanddog\" => False\n        # \"catsanddog\" => False"
    },
    {
        "number": 139,
        "title": "Word Break",
        "difficulty": 1,
        "prompt": "class Solution:\n    def wordBreak(self, s: str, wordDict: List[str]) -> bool:\n        \"\"\"\n        Given a string s and a dictionary of strings wordDict, return true if s can be segmented into a space-separated sequence of one or more dictionary words.\n        Note that the same word in the dictionary may be reused multiple times in the segmentation.\n        Example 1:\n        Input: s = \"leetcode\", wordDict = [\"leet\",\"code\"]\n        Output: true\n        Explanation: Return true because \"leetcode\" can be segmented as \"leet code\".\n        Example 2:\n        Input: s = \"applepenapple\", wordDict = [\"apple\",\"pen\"]\n        Output: true\n        Explanation: Return true because \"applepenapple\" can be segmented as \"apple pen apple\".\n        Note that you are allowed to reuse a dictionary word.\n        Example 3:\n        Input: s = \"catsandog\", wordDict = [\"cats\",\"dog\",\"sand\",\"and\",\"cat\"]\n        Output: false\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 4,
        "answer": "        # dp[i] = s[0:i] can be segmented into words in the dict?\n        # dp[j] = dp[i] and s[i:j] in the dict\n        # dp[j] = dp[i] or s[i:j] in the dict\n        # base case: dp[0] = s[0] in the dict, return True\n        # recursion: dp[j] = dp[i] and s[i:j] in the dict, return True\n        # \u6211\u4eec\u53ef\u4ee5\u770b\u5230\uff0c\u6700\u7ec8 dp[-1] \u90fd\u662f True\n        # dp[j] \u662f True \u5373\u4f7f s[i:j] \u4e0d\u5b58\u5728\u4e8e wordDict \u4e2d\uff0c\u56e0\u4e3a dp[i] \u662f True \n        # dp[j] \u662f True \u5373\u4f7f s[i:j] \u4e0d\u5b58\u5728\u4e8e wordDict \u4e2d\uff0c\u56e0\u4e3a dp[i] \u662f True \n        \n        # \u8fd9\u91cc\u6211\u4eec\u4f7f\u7528\u4e00\u4e2a\u54c8\u5e0c\u8868\u5b58\u50a8 wordDict \u4e2d\u7684"
    },
    {
        "number": 139,
        "title": "Word Break",
        "difficulty": 1,
        "prompt": "class Solution:\n    def wordBreak(self, s: str, wordDict: List[str]) -> bool:\n        \"\"\"\n        Given a string s and a dictionary of strings wordDict, return true if s can be segmented into a space-separated sequence of one or more dictionary words.\n        Note that the same word in the dictionary may be reused multiple times in the segmentation.\n        Example 1:\n        Input: s = \"leetcode\", wordDict = [\"leet\",\"code\"]\n        Output: true\n        Explanation: Return true because \"leetcode\" can be segmented as \"leet code\".\n        Example 2:\n        Input: s = \"applepenapple\", wordDict = [\"apple\",\"pen\"]\n        Output: true\n        Explanation: Return true because \"applepenapple\" can be segmented as \"apple pen apple\".\n        Note that you are allowed to reuse a dictionary word.\n        Example 3:\n        Input: s = \"catsandog\", wordDict = [\"cats\",\"dog\",\"sand\",\"and\",\"cat\"]\n        Output: false\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 5,
        "answer": "        \n        n = len(s)\n        memo = {}\n        \n        def dp(i):\n            if i == n:\n                return True\n            if i in memo:\n                return memo[i]\n            \n            memo[i] = False\n            for j in range(i, n):\n                if s[i:j+1] in wordDict:\n                    if dp(j+1):\n                        memo[i] = True\n                        return memo[i]\n            return memo[i]\n        \n        return dp(0)"
    },
    {
        "number": 140,
        "title": "Word Break II",
        "difficulty": 2,
        "prompt": "class Solution:\n    def wordBreak(self, s: str, wordDict: List[str]) -> List[str]:\n        \"\"\"\n        Given a string s and a dictionary of strings wordDict, add spaces in s to construct a sentence where each word is a valid dictionary word. Return all such possible sentences in any order.\n        Note that the same word in the dictionary may be reused multiple times in the segmentation.\n        Example 1:\n        Input: s = \"catsanddog\", wordDict = [\"cat\",\"cats\",\"and\",\"sand\",\"dog\"]\n        Output: [\"cats and dog\",\"cat sand dog\"]\n        Example 2:\n        Input: s = \"pineapplepenapple\", wordDict = [\"apple\",\"pen\",\"applepen\",\"pine\",\"pineapple\"]\n        Output: [\"pine apple pen apple\",\"pineapple pen apple\",\"pine applepen apple\"]\n        Explanation: Note that you are allowed to reuse a dictionary word.\n        Example 3:\n        Input: s = \"catsandog\", wordDict = [\"cats\",\"dog\",\"sand\",\"and\",\"cat\"]\n        Output: []\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        return self.dp(s, wordDict, {})\n    \n    def dp(self, s, wordDict, memo):\n        if not s:\n            return [[]]\n        if s in memo:\n            return memo[s]\n        \n        res = []\n        for word in wordDict:\n            if s.startswith(word):\n                for rest_sentence in self.dp(s[len(word):], wordDict, memo):\n                    res.append([word] + rest_sentence)\n        memo[s] = res\n        return res\n<|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>"
    },
    {
        "number": 140,
        "title": "Word Break II",
        "difficulty": 2,
        "prompt": "class Solution:\n    def wordBreak(self, s: str, wordDict: List[str]) -> List[str]:\n        \"\"\"\n        Given a string s and a dictionary of strings wordDict, add spaces in s to construct a sentence where each word is a valid dictionary word. Return all such possible sentences in any order.\n        Note that the same word in the dictionary may be reused multiple times in the segmentation.\n        Example 1:\n        Input: s = \"catsanddog\", wordDict = [\"cat\",\"cats\",\"and\",\"sand\",\"dog\"]\n        Output: [\"cats and dog\",\"cat sand dog\"]\n        Example 2:\n        Input: s = \"pineapplepenapple\", wordDict = [\"apple\",\"pen\",\"applepen\",\"pine\",\"pineapple\"]\n        Output: [\"pine apple pen apple\",\"pineapple pen apple\",\"pine applepen apple\"]\n        Explanation: Note that you are allowed to reuse a dictionary word.\n        Example 3:\n        Input: s = \"catsandog\", wordDict = [\"cats\",\"dog\",\"sand\",\"and\",\"cat\"]\n        Output: []\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        self.mem = {}\n        return self.dfs(s, wordDict, '')"
    },
    {
        "number": 140,
        "title": "Word Break II",
        "difficulty": 2,
        "prompt": "class Solution:\n    def wordBreak(self, s: str, wordDict: List[str]) -> List[str]:\n        \"\"\"\n        Given a string s and a dictionary of strings wordDict, add spaces in s to construct a sentence where each word is a valid dictionary word. Return all such possible sentences in any order.\n        Note that the same word in the dictionary may be reused multiple times in the segmentation.\n        Example 1:\n        Input: s = \"catsanddog\", wordDict = [\"cat\",\"cats\",\"and\",\"sand\",\"dog\"]\n        Output: [\"cats and dog\",\"cat sand dog\"]\n        Example 2:\n        Input: s = \"pineapplepenapple\", wordDict = [\"apple\",\"pen\",\"applepen\",\"pine\",\"pineapple\"]\n        Output: [\"pine apple pen apple\",\"pineapple pen apple\",\"pine applepen apple\"]\n        Explanation: Note that you are allowed to reuse a dictionary word.\n        Example 3:\n        Input: s = \"catsandog\", wordDict = [\"cats\",\"dog\",\"sand\",\"and\",\"cat\"]\n        Output: []\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 3,
        "answer": "        self.d = {}\n        self.s = s\n        self.words = wordDict\n        self.res = []\n        \n        self.dfs(0, \"\")\n        return self.res\n    \n    def dfs(self, start, word):\n        if start in self.d:\n            if word:\n                self.res.append(word)\n            return\n        for end in range(start + 1, len(self.s) + 1):\n            if self.s[start:end] in self.words:\n                self.dfs(end, word + \" \" + self.s[start:end])\n        self.d[start] = word\n<|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>"
    },
    {
        "number": 140,
        "title": "Word Break II",
        "difficulty": 2,
        "prompt": "class Solution:\n    def wordBreak(self, s: str, wordDict: List[str]) -> List[str]:\n        \"\"\"\n        Given a string s and a dictionary of strings wordDict, add spaces in s to construct a sentence where each word is a valid dictionary word. Return all such possible sentences in any order.\n        Note that the same word in the dictionary may be reused multiple times in the segmentation.\n        Example 1:\n        Input: s = \"catsanddog\", wordDict = [\"cat\",\"cats\",\"and\",\"sand\",\"dog\"]\n        Output: [\"cats and dog\",\"cat sand dog\"]\n        Example 2:\n        Input: s = \"pineapplepenapple\", wordDict = [\"apple\",\"pen\",\"applepen\",\"pine\",\"pineapple\"]\n        Output: [\"pine apple pen apple\",\"pineapple pen apple\",\"pine applepen apple\"]\n        Explanation: Note that you are allowed to reuse a dictionary word.\n        Example 3:\n        Input: s = \"catsandog\", wordDict = [\"cats\",\"dog\",\"sand\",\"and\",\"cat\"]\n        Output: []\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 4,
        "answer": "        if not s or not wordDict:\n            return []"
    },
    {
        "number": 140,
        "title": "Word Break II",
        "difficulty": 2,
        "prompt": "class Solution:\n    def wordBreak(self, s: str, wordDict: List[str]) -> List[str]:\n        \"\"\"\n        Given a string s and a dictionary of strings wordDict, add spaces in s to construct a sentence where each word is a valid dictionary word. Return all such possible sentences in any order.\n        Note that the same word in the dictionary may be reused multiple times in the segmentation.\n        Example 1:\n        Input: s = \"catsanddog\", wordDict = [\"cat\",\"cats\",\"and\",\"sand\",\"dog\"]\n        Output: [\"cats and dog\",\"cat sand dog\"]\n        Example 2:\n        Input: s = \"pineapplepenapple\", wordDict = [\"apple\",\"pen\",\"applepen\",\"pine\",\"pineapple\"]\n        Output: [\"pine apple pen apple\",\"pineapple pen apple\",\"pine applepen apple\"]\n        Explanation: Note that you are allowed to reuse a dictionary word.\n        Example 3:\n        Input: s = \"catsandog\", wordDict = [\"cats\",\"dog\",\"sand\",\"and\",\"cat\"]\n        Output: []\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 5,
        "answer": "        if not s or not wordDict:\n            return []\n        # \u521b\u5efa\u5b58\u50a8\u8def\u5f84\u7684\u5bb9\u5668\n        res = []\n        # \u4fdd\u5b58\u5df2\u7ecf\u8bbf\u95ee\u8fc7\u7684\u5b57\u7b26\u4e32\n        visited = set()\n        # \u5bfb\u627e\u505c\u6b62\u6761\u4ef6\n        stop_condition = [False for _ in range(len(s)+1)]\n        # \u8fdb\u884cdfs\n        self.dfs(s, wordDict, 0, visited, res, stop_condition)\n        return res"
    },
    {
        "number": 141,
        "title": "Linked List Cycle",
        "difficulty": 0,
        "prompt": "class Solution:\n    def hasCycle(self, head: Optional[ListNode]) -> bool:\n        \"\"\"\n        Given head, the head of a linked list, determine if the linked list has a cycle in it.\n        There is a cycle in a linked list if there is some node in the list that can be reached again by continuously following the next pointer. Internally, pos is used to denote the index of the node that tail's next pointer is connected to. Note that pos is not passed as a parameter.\n        Return true if there is a cycle in the linked list. Otherwise, return false.\n        Example 1:\n        Input: head = [3,2,0,-4], pos = 1\n        Output: true\n        Explanation: There is a cycle in the linked list, where the tail connects to the 1st node (0-indexed).\n        Example 2:\n        Input: head = [1,2], pos = 0\n        Output: true\n        Explanation: There is a cycle in the linked list, where the tail connects to the 0th node.\n        Example 3:\n        Input: head = [1], pos = -1\n        Output: false\n        Explanation: There is no cycle in the linked list.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        if not head or not head.next:\n            return False\n        if head.next.next == None:\n            return False\n        s = set()\n        while head:\n            if head in s:\n                return True\n            s.add(head)\n            head = head.next\n        return False"
    },
    {
        "number": 141,
        "title": "Linked List Cycle",
        "difficulty": 0,
        "prompt": "class Solution:\n    def hasCycle(self, head: Optional[ListNode]) -> bool:\n        \"\"\"\n        Given head, the head of a linked list, determine if the linked list has a cycle in it.\n        There is a cycle in a linked list if there is some node in the list that can be reached again by continuously following the next pointer. Internally, pos is used to denote the index of the node that tail's next pointer is connected to. Note that pos is not passed as a parameter.\n        Return true if there is a cycle in the linked list. Otherwise, return false.\n        Example 1:\n        Input: head = [3,2,0,-4], pos = 1\n        Output: true\n        Explanation: There is a cycle in the linked list, where the tail connects to the 1st node (0-indexed).\n        Example 2:\n        Input: head = [1,2], pos = 0\n        Output: true\n        Explanation: There is a cycle in the linked list, where the tail connects to the 0th node.\n        Example 3:\n        Input: head = [1], pos = -1\n        Output: false\n        Explanation: There is no cycle in the linked list.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        slow = fast = head\n        while fast and fast.next:\n            fast = fast.next.next\n            slow = slow.next\n            if slow == fast:\n                return True\n        return False"
    },
    {
        "number": 141,
        "title": "Linked List Cycle",
        "difficulty": 0,
        "prompt": "class Solution:\n    def hasCycle(self, head: Optional[ListNode]) -> bool:\n        \"\"\"\n        Given head, the head of a linked list, determine if the linked list has a cycle in it.\n        There is a cycle in a linked list if there is some node in the list that can be reached again by continuously following the next pointer. Internally, pos is used to denote the index of the node that tail's next pointer is connected to. Note that pos is not passed as a parameter.\n        Return true if there is a cycle in the linked list. Otherwise, return false.\n        Example 1:\n        Input: head = [3,2,0,-4], pos = 1\n        Output: true\n        Explanation: There is a cycle in the linked list, where the tail connects to the 1st node (0-indexed).\n        Example 2:\n        Input: head = [1,2], pos = 0\n        Output: true\n        Explanation: There is a cycle in the linked list, where the tail connects to the 0th node.\n        Example 3:\n        Input: head = [1], pos = -1\n        Output: false\n        Explanation: There is no cycle in the linked list.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 3,
        "answer": "        if not head or not head.next:\n            return False\n        slow, fast = head, head.next\n        while slow!= fast:\n            if not fast or not fast.next:\n                return False\n            slow, fast = slow.next, fast.next.next\n        return True"
    },
    {
        "number": 141,
        "title": "Linked List Cycle",
        "difficulty": 0,
        "prompt": "class Solution:\n    def hasCycle(self, head: Optional[ListNode]) -> bool:\n        \"\"\"\n        Given head, the head of a linked list, determine if the linked list has a cycle in it.\n        There is a cycle in a linked list if there is some node in the list that can be reached again by continuously following the next pointer. Internally, pos is used to denote the index of the node that tail's next pointer is connected to. Note that pos is not passed as a parameter.\n        Return true if there is a cycle in the linked list. Otherwise, return false.\n        Example 1:\n        Input: head = [3,2,0,-4], pos = 1\n        Output: true\n        Explanation: There is a cycle in the linked list, where the tail connects to the 1st node (0-indexed).\n        Example 2:\n        Input: head = [1,2], pos = 0\n        Output: true\n        Explanation: There is a cycle in the linked list, where the tail connects to the 0th node.\n        Example 3:\n        Input: head = [1], pos = -1\n        Output: false\n        Explanation: There is no cycle in the linked list.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 4,
        "answer": "        \n        # 1. use a hash set\n        # 2. use 2 pointers\n        # 1. using the 2 pointers, have them advance 1 step at a time\n        # 2. if the 2 pointers meet at some point, then there is a cycle\n        # 3. if the 2 pointers don't meet at some point, then there is no cycle\n        # 4. try to use the fast/slow pointers method\n        # 5. detect the cycle\n        # 6. if we didn't detect the cycle, then the linked list has no cycle\n        \n        # use 2 pointers to detect cycle\n        # if there is a cycle, then fast and slow will be equal after some time\n        # if fast and slow are equal, then there is a cycle\n        \n        # detect the cycle\n        # if we cannot find a cycle, then we have found the end of the list\n        # if we have found a cycle, then we found the entrance to the cycle\n        \n        if not head:\n            return False\n        \n        slow = head\n        fast = head.next\n        \n        while slow!= fast:\n            if not fast or not fast.next:\n                return False\n            slow = slow.next\n            fast = fast.next.next\n            \n        return True\n    \n    # time complexity: O(n)\n    # space complexity: O("
    },
    {
        "number": 141,
        "title": "Linked List Cycle",
        "difficulty": 0,
        "prompt": "class Solution:\n    def hasCycle(self, head: Optional[ListNode]) -> bool:\n        \"\"\"\n        Given head, the head of a linked list, determine if the linked list has a cycle in it.\n        There is a cycle in a linked list if there is some node in the list that can be reached again by continuously following the next pointer. Internally, pos is used to denote the index of the node that tail's next pointer is connected to. Note that pos is not passed as a parameter.\n        Return true if there is a cycle in the linked list. Otherwise, return false.\n        Example 1:\n        Input: head = [3,2,0,-4], pos = 1\n        Output: true\n        Explanation: There is a cycle in the linked list, where the tail connects to the 1st node (0-indexed).\n        Example 2:\n        Input: head = [1,2], pos = 0\n        Output: true\n        Explanation: There is a cycle in the linked list, where the tail connects to the 0th node.\n        Example 3:\n        Input: head = [1], pos = -1\n        Output: false\n        Explanation: There is no cycle in the linked list.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 5,
        "answer": "        \n        slow = fast = head\n        while fast and fast.next:\n            fast = fast.next.next\n            slow = slow.next\n            if slow == fast:\n                return True\n        return False<|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>"
    },
    {
        "number": 142,
        "title": "Linked List Cycle II",
        "difficulty": 1,
        "prompt": "class Solution:\n    def detectCycle(self, head: Optional[ListNode]) -> Optional[ListNode]:\n        \"\"\"\n        Given the head of a linked list, return the node where the cycle begins. If there is no cycle, return null.\n        There is a cycle in a linked list if there is some node in the list that can be reached again by continuously following the next pointer. Internally, pos is used to denote the index of the node that tail's next pointer is connected to (0-indexed). It is -1 if there is no cycle. Note that pos is not passed as a parameter.\n        Do not modify the linked list.\n        Example 1:\n        Input: head = [3,2,0,-4], pos = 1\n        Output: tail connects to node index 1\n        Explanation: There is a cycle in the linked list, where tail connects to the second node.\n        Example 2:\n        Input: head = [1,2], pos = 0\n        Output: tail connects to node index 0\n        Explanation: There is a cycle in the linked list, where tail connects to the first node.\n        Example 3:\n        Input: head = [1], pos = -1\n        Output: no cycle\n        Explanation: There is no cycle in the linked list.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        if not head:\n            return None\n        if not head.next:\n            return None\n        \n        slow = fast = head\n        while fast and fast.next:\n            slow = slow.next\n            fast = fast.next.next\n            if slow == fast:\n                break\n        if slow == fast:\n            slow = head\n            while slow!= fast:\n                slow = slow.next\n                fast = fast.next\n            return slow\n        return None\n        \n        <|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>"
    },
    {
        "number": 142,
        "title": "Linked List Cycle II",
        "difficulty": 1,
        "prompt": "class Solution:\n    def detectCycle(self, head: Optional[ListNode]) -> Optional[ListNode]:\n        \"\"\"\n        Given the head of a linked list, return the node where the cycle begins. If there is no cycle, return null.\n        There is a cycle in a linked list if there is some node in the list that can be reached again by continuously following the next pointer. Internally, pos is used to denote the index of the node that tail's next pointer is connected to (0-indexed). It is -1 if there is no cycle. Note that pos is not passed as a parameter.\n        Do not modify the linked list.\n        Example 1:\n        Input: head = [3,2,0,-4], pos = 1\n        Output: tail connects to node index 1\n        Explanation: There is a cycle in the linked list, where tail connects to the second node.\n        Example 2:\n        Input: head = [1,2], pos = 0\n        Output: tail connects to node index 0\n        Explanation: There is a cycle in the linked list, where tail connects to the first node.\n        Example 3:\n        Input: head = [1], pos = -1\n        Output: no cycle\n        Explanation: There is no cycle in the linked list.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        # edge case - empty list\n        if not head:\n            return None"
    },
    {
        "number": 142,
        "title": "Linked List Cycle II",
        "difficulty": 1,
        "prompt": "class Solution:\n    def detectCycle(self, head: Optional[ListNode]) -> Optional[ListNode]:\n        \"\"\"\n        Given the head of a linked list, return the node where the cycle begins. If there is no cycle, return null.\n        There is a cycle in a linked list if there is some node in the list that can be reached again by continuously following the next pointer. Internally, pos is used to denote the index of the node that tail's next pointer is connected to (0-indexed). It is -1 if there is no cycle. Note that pos is not passed as a parameter.\n        Do not modify the linked list.\n        Example 1:\n        Input: head = [3,2,0,-4], pos = 1\n        Output: tail connects to node index 1\n        Explanation: There is a cycle in the linked list, where tail connects to the second node.\n        Example 2:\n        Input: head = [1,2], pos = 0\n        Output: tail connects to node index 0\n        Explanation: There is a cycle in the linked list, where tail connects to the first node.\n        Example 3:\n        Input: head = [1], pos = -1\n        Output: no cycle\n        Explanation: There is no cycle in the linked list.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 3,
        "answer": "        slow, fast = head, head\n        while True:\n            if not (slow and fast and fast.next):\n                return None\n            slow = slow.next\n            fast = fast.next.next\n            if slow == fast:\n                break\n        fast = head\n        while fast!= slow:\n            fast = fast.next\n            slow = slow.next\n        return slow\n<|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>"
    },
    {
        "number": 142,
        "title": "Linked List Cycle II",
        "difficulty": 1,
        "prompt": "class Solution:\n    def detectCycle(self, head: Optional[ListNode]) -> Optional[ListNode]:\n        \"\"\"\n        Given the head of a linked list, return the node where the cycle begins. If there is no cycle, return null.\n        There is a cycle in a linked list if there is some node in the list that can be reached again by continuously following the next pointer. Internally, pos is used to denote the index of the node that tail's next pointer is connected to (0-indexed). It is -1 if there is no cycle. Note that pos is not passed as a parameter.\n        Do not modify the linked list.\n        Example 1:\n        Input: head = [3,2,0,-4], pos = 1\n        Output: tail connects to node index 1\n        Explanation: There is a cycle in the linked list, where tail connects to the second node.\n        Example 2:\n        Input: head = [1,2], pos = 0\n        Output: tail connects to node index 0\n        Explanation: There is a cycle in the linked list, where tail connects to the first node.\n        Example 3:\n        Input: head = [1], pos = -1\n        Output: no cycle\n        Explanation: There is no cycle in the linked list.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 4,
        "answer": "        fast = slow = head\n        while fast and fast.next:\n            slow = slow.next\n            fast = fast.next.next\n            if slow == fast:\n                break\n        else:\n            return None\n        while head!= slow:\n            slow = slow.next\n            head = head.next\n        return head\n        \n<|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>"
    },
    {
        "number": 142,
        "title": "Linked List Cycle II",
        "difficulty": 1,
        "prompt": "class Solution:\n    def detectCycle(self, head: Optional[ListNode]) -> Optional[ListNode]:\n        \"\"\"\n        Given the head of a linked list, return the node where the cycle begins. If there is no cycle, return null.\n        There is a cycle in a linked list if there is some node in the list that can be reached again by continuously following the next pointer. Internally, pos is used to denote the index of the node that tail's next pointer is connected to (0-indexed). It is -1 if there is no cycle. Note that pos is not passed as a parameter.\n        Do not modify the linked list.\n        Example 1:\n        Input: head = [3,2,0,-4], pos = 1\n        Output: tail connects to node index 1\n        Explanation: There is a cycle in the linked list, where tail connects to the second node.\n        Example 2:\n        Input: head = [1,2], pos = 0\n        Output: tail connects to node index 0\n        Explanation: There is a cycle in the linked list, where tail connects to the first node.\n        Example 3:\n        Input: head = [1], pos = -1\n        Output: no cycle\n        Explanation: There is no cycle in the linked list.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 5,
        "answer": "        seen = set()\n        while head:\n            if head in seen:\n                return head\n            else:\n                seen.add(head)\n            head = head.next\n        return None\n<|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>"
    },
    {
        "number": 143,
        "title": "Reorder List",
        "difficulty": 1,
        "prompt": "class Solution:\n    def reorderList(self, head: Optional[ListNode]) -> None:\n        \"\"\"\n        Do not return anything, modify head in-place instead.\n        You are given the head of a singly linked-list. The list can be represented as:\n        L0 \u2192 L1 \u2192 \u2026 \u2192 Ln - 1 \u2192 Ln\n        Reorder the list to be on the following form:\n        L0 \u2192 Ln \u2192 L1 \u2192 Ln - 1 \u2192 L2 \u2192 Ln - 2 \u2192 \u2026\n        You may not modify the values in the list's nodes. Only nodes themselves may be changed.\n        Example 1:\n        Input: head = [1,2,3,4]\n        Output: [1,4,2,3]\n        Example 2:\n        Input: head = [1,2,3,4,5]\n        Output: [1,5,2,4,3]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        if not head:\n            return []\n        # find middle\n        slow = fast = head\n        while fast and fast.next:\n            slow = slow.next\n            fast = fast.next.next\n        # reverse the second half\n        prev, curr = None, slow\n        while curr:\n            curr.next, prev, curr = prev, curr, curr.next\n        # merge two linked lists\n        first, second = head, prev\n        while second.next:\n            first.next, first = second, first.next\n            second.next, second = first, second.next"
    },
    {
        "number": 143,
        "title": "Reorder List",
        "difficulty": 1,
        "prompt": "class Solution:\n    def reorderList(self, head: Optional[ListNode]) -> None:\n        \"\"\"\n        Do not return anything, modify head in-place instead.\n        You are given the head of a singly linked-list. The list can be represented as:\n        L0 \u2192 L1 \u2192 \u2026 \u2192 Ln - 1 \u2192 Ln\n        Reorder the list to be on the following form:\n        L0 \u2192 Ln \u2192 L1 \u2192 Ln - 1 \u2192 L2 \u2192 Ln - 2 \u2192 \u2026\n        You may not modify the values in the list's nodes. Only nodes themselves may be changed.\n        Example 1:\n        Input: head = [1,2,3,4]\n        Output: [1,4,2,3]\n        Example 2:\n        Input: head = [1,2,3,4,5]\n        Output: [1,5,2,4,3]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        # There is an easy way to solve this problem by traversing the linked list from the beginning\n        # and then reassigning the pointers of the linked list.\n        # However, this is very difficult to implement because we don't know the length of the linked list\n        # beforehand. Thus, we solve this problem by traversing the linked list from the beginning to find the middle\n        # of the linked list and then reverse the second half of the linked list, and then merge the two linked lists\n        # recursively.\n        # Time complexity: O(N), space complexity: O(1)\n        if not head:\n            return head\n        \n        # Finding the middle of the linked list\n        slow = fast = head\n        while fast and fast.next:\n            slow = slow.next\n            fast = fast.next.next\n        \n        # Reversing the second half of the linked list\n        node = None\n        while slow:\n            temp = slow.next\n            slow.next = node\n            node = slow\n            slow = temp\n        \n        # Merging the two linked lists\n        first, second = head, node\n        while second.next:\n            first.next, first = second, first.next\n            second.next, second = first, second.next\n        \n        return head\n<|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>"
    },
    {
        "number": 143,
        "title": "Reorder List",
        "difficulty": 1,
        "prompt": "class Solution:\n    def reorderList(self, head: Optional[ListNode]) -> None:\n        \"\"\"\n        Do not return anything, modify head in-place instead.\n        You are given the head of a singly linked-list. The list can be represented as:\n        L0 \u2192 L1 \u2192 \u2026 \u2192 Ln - 1 \u2192 Ln\n        Reorder the list to be on the following form:\n        L0 \u2192 Ln \u2192 L1 \u2192 Ln - 1 \u2192 L2 \u2192 Ln - 2 \u2192 \u2026\n        You may not modify the values in the list's nodes. Only nodes themselves may be changed.\n        Example 1:\n        Input: head = [1,2,3,4]\n        Output: [1,4,2,3]\n        Example 2:\n        Input: head = [1,2,3,4,5]\n        Output: [1,5,2,4,3]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 3,
        "answer": "        if not head:\n            return\n        slow, fast = head, head\n        while fast and fast.next:\n            fast = fast.next.next\n            slow = slow.next\n        mid = slow\n        pre, post = None, mid.next\n        mid.next = None\n        while post:\n            temp = post.next\n            post.next = pre\n            pre = post\n            post = temp\n        temp1, temp2 = head, pre\n        while temp1!= mid:\n            temp2.next = temp1.next\n            temp1.next = pre\n            temp1 = temp2.next\n            temp2.next = temp1\n            temp2 = temp1.next"
    },
    {
        "number": 143,
        "title": "Reorder List",
        "difficulty": 1,
        "prompt": "class Solution:\n    def reorderList(self, head: Optional[ListNode]) -> None:\n        \"\"\"\n        Do not return anything, modify head in-place instead.\n        You are given the head of a singly linked-list. The list can be represented as:\n        L0 \u2192 L1 \u2192 \u2026 \u2192 Ln - 1 \u2192 Ln\n        Reorder the list to be on the following form:\n        L0 \u2192 Ln \u2192 L1 \u2192 Ln - 1 \u2192 L2 \u2192 Ln - 2 \u2192 \u2026\n        You may not modify the values in the list's nodes. Only nodes themselves may be changed.\n        Example 1:\n        Input: head = [1,2,3,4]\n        Output: [1,4,2,3]\n        Example 2:\n        Input: head = [1,2,3,4,5]\n        Output: [1,5,2,4,3]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 4,
        "answer": "        if head:\n            h = head\n            cnt = 0\n            while h:\n                cnt += 1\n                h = h.next\n            for i in range(cnt // 2):\n                j = i\n                h = head\n                pre = None\n                while j < cnt - i - 1:\n                    pre = h\n                    h = h.next\n                    j += 1\n                pre.next = None\n                h.next = head\n                head = h\n            head = head.next\n        return head"
    },
    {
        "number": 143,
        "title": "Reorder List",
        "difficulty": 1,
        "prompt": "class Solution:\n    def reorderList(self, head: Optional[ListNode]) -> None:\n        \"\"\"\n        Do not return anything, modify head in-place instead.\n        You are given the head of a singly linked-list. The list can be represented as:\n        L0 \u2192 L1 \u2192 \u2026 \u2192 Ln - 1 \u2192 Ln\n        Reorder the list to be on the following form:\n        L0 \u2192 Ln \u2192 L1 \u2192 Ln - 1 \u2192 L2 \u2192 Ln - 2 \u2192 \u2026\n        You may not modify the values in the list's nodes. Only nodes themselves may be changed.\n        Example 1:\n        Input: head = [1,2,3,4]\n        Output: [1,4,2,3]\n        Example 2:\n        Input: head = [1,2,3,4,5]\n        Output: [1,5,2,4,3]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 5,
        "answer": "        if not head or not head.next: return head\n        # \u5148\u627e\u5230\u4e2d\u70b9\n        slow = fast = head\n        while fast.next and fast.next.next:\n            slow = slow.next\n            fast = fast.next.next\n        # \u518d\u628a\u540e\u9762\u7684\u94fe\u8868\u53cd\u8f6c\n        p = None\n        cur = slow.next\n        while cur:\n            p, cur.next, cur = cur, p, cur.next\n        # \u518d\u5c06\u94fe\u8868\u9006\u8f6c\n        while head:\n            cur.next, head.next, cur, head = head, cur.next, cur.next, head.next"
    },
    {
        "number": 144,
        "title": "Binary Tree Preorder Traversal",
        "difficulty": 0,
        "prompt": "class Solution:\n    def preorderTraversal(self, root: Optional[TreeNode]) -> List[int]:\n        \"\"\"\n        Given the root of a binary tree, return the preorder traversal of its nodes' values.\n        Example 1:\n        Input: root = [1,null,2,3]\n        Output: [1,2,3]\n        Example 2:\n        Input: root = []\n        Output: []\n        Example 3:\n        Input: root = [1]\n        Output: [1]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        # iterative solution\n        stack, output = [root], []"
    },
    {
        "number": 144,
        "title": "Binary Tree Preorder Traversal",
        "difficulty": 0,
        "prompt": "class Solution:\n    def preorderTraversal(self, root: Optional[TreeNode]) -> List[int]:\n        \"\"\"\n        Given the root of a binary tree, return the preorder traversal of its nodes' values.\n        Example 1:\n        Input: root = [1,null,2,3]\n        Output: [1,2,3]\n        Example 2:\n        Input: root = []\n        Output: []\n        Example 3:\n        Input: root = [1]\n        Output: [1]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        # divide & conquer\n        # time complexity: O(n), n is the number of nodes\n        # space complexity: O(n), in the worst case, the tree is completely unbalanced, the recursion call would occur n times, the maximum depth is n\n        if root is None:\n            return []\n        left = self.preorderTraversal(root.left)\n        right = self.preorderTraversal(root.right)\n        return [root.val] + left + right"
    },
    {
        "number": 144,
        "title": "Binary Tree Preorder Traversal",
        "difficulty": 0,
        "prompt": "class Solution:\n    def preorderTraversal(self, root: Optional[TreeNode]) -> List[int]:\n        \"\"\"\n        Given the root of a binary tree, return the preorder traversal of its nodes' values.\n        Example 1:\n        Input: root = [1,null,2,3]\n        Output: [1,2,3]\n        Example 2:\n        Input: root = []\n        Output: []\n        Example 3:\n        Input: root = [1]\n        Output: [1]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 3,
        "answer": "        if not root:\n            return []\n        stack = [root]\n        res = []\n        while stack:\n            node = stack.pop()\n            res.append(node.val)\n            if node.right:\n                stack.append(node.right)\n            if node.left:\n                stack.append(node.left)\n        return res\n    \n    def postorderTraversal(self, root: Optional[TreeNode]) -> List[int]:\n        \"\"\"\n        Given the root of a binary tree, return the postorder traversal of its nodes' values.\n        Example 1:\n        Input: root = [1,null,2,3]\n        Output: [3,2,1]\n        Example 2:\n        Input: root = []\n        Output: []\n        Example 3:\n        Input: root = [1]\n        Output: [1]\n        \"\"\"\n        if not root:\n            return []\n        stack = [root]\n        res = []\n        while stack:\n            node = stack.pop()\n            res.append(node.val)\n            if node.left:\n                stack.append(node.left)\n            if node.right:\n                stack.append(node.right)\n        return res[::-1]\n    \n    def inorderTra"
    },
    {
        "number": 144,
        "title": "Binary Tree Preorder Traversal",
        "difficulty": 0,
        "prompt": "class Solution:\n    def preorderTraversal(self, root: Optional[TreeNode]) -> List[int]:\n        \"\"\"\n        Given the root of a binary tree, return the preorder traversal of its nodes' values.\n        Example 1:\n        Input: root = [1,null,2,3]\n        Output: [1,2,3]\n        Example 2:\n        Input: root = []\n        Output: []\n        Example 3:\n        Input: root = [1]\n        Output: [1]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 4,
        "answer": "        # 1. Recursion\n        # time O(n)\n        # space O(h)\n        # if not root: return []\n        # return [root.val] + self.preorderTraversal(root.left) + self.preorderTraversal(root.right)\n        \n        # 2. Iteration\n        # time O(n)\n        # space O(h)\n        if not root: return []\n        result = []\n        stack = [root]\n        while stack:\n            curr = stack.pop()\n            result.append(curr.val)\n            if curr.right:\n                stack.append(curr.right)\n            if curr.left:\n                stack.append(curr.left)\n        return result\n        \n        # 3. Morris Traversal\n        # time O(n)\n        # space O(1)\n        # if not root: return []\n        # result = []\n        # curr = root\n        # while curr:\n        #     if curr.left:\n        #         node = curr.left\n        #         while node.right and node.right!= curr:\n        #             node = node.right\n        #         if not node.right:\n        #             result.append(curr."
    },
    {
        "number": 144,
        "title": "Binary Tree Preorder Traversal",
        "difficulty": 0,
        "prompt": "class Solution:\n    def preorderTraversal(self, root: Optional[TreeNode]) -> List[int]:\n        \"\"\"\n        Given the root of a binary tree, return the preorder traversal of its nodes' values.\n        Example 1:\n        Input: root = [1,null,2,3]\n        Output: [1,2,3]\n        Example 2:\n        Input: root = []\n        Output: []\n        Example 3:\n        Input: root = [1]\n        Output: [1]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 5,
        "answer": "        if not root: return []\n        stack, preorder = [root], []\n        while stack:\n            root = stack.pop()\n            preorder.append(root.val)\n            if root.right: stack.append(root.right)\n            if root.left: stack.append(root.left)\n        return preorder\n<|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>"
    },
    {
        "number": 145,
        "title": "Binary Tree Postorder Traversal",
        "difficulty": 0,
        "prompt": "class Solution:\n    def postorderTraversal(self, root: Optional[TreeNode]) -> List[int]:\n        \"\"\"\n        Given the root of a binary tree, return the postorder traversal of its nodes' values.\n        Example 1:\n        Input: root = [1,null,2,3]\n        Output: [3,2,1]\n        Example 2:\n        Input: root = []\n        Output: []\n        Example 3:\n        Input: root = [1]\n        Output: [1]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        result = []\n        \n        if not root:\n            return result\n        \n        stack = [root]\n        \n        while stack:\n            node = stack.pop()\n            result.append(node.val)\n            if node.left:\n                stack.append(node.left)\n            if node.right:\n                stack.append(node.right)\n            \n        return result[::-1]\n<|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>"
    },
    {
        "number": 145,
        "title": "Binary Tree Postorder Traversal",
        "difficulty": 0,
        "prompt": "class Solution:\n    def postorderTraversal(self, root: Optional[TreeNode]) -> List[int]:\n        \"\"\"\n        Given the root of a binary tree, return the postorder traversal of its nodes' values.\n        Example 1:\n        Input: root = [1,null,2,3]\n        Output: [3,2,1]\n        Example 2:\n        Input: root = []\n        Output: []\n        Example 3:\n        Input: root = [1]\n        Output: [1]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        if not root:\n            return []\n        res = []\n        stack = [root]\n        while stack:\n            node = stack.pop()\n            res.append(node.val)\n            if node.left:\n                stack.append(node.left)\n            if node.right:\n                stack.append(node.right)\n        return res[::-1]"
    },
    {
        "number": 145,
        "title": "Binary Tree Postorder Traversal",
        "difficulty": 0,
        "prompt": "class Solution:\n    def postorderTraversal(self, root: Optional[TreeNode]) -> List[int]:\n        \"\"\"\n        Given the root of a binary tree, return the postorder traversal of its nodes' values.\n        Example 1:\n        Input: root = [1,null,2,3]\n        Output: [3,2,1]\n        Example 2:\n        Input: root = []\n        Output: []\n        Example 3:\n        Input: root = [1]\n        Output: [1]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 3,
        "answer": "        # Recursive\n        # Time: O(N), because the recursive stack has the same height as the tree\n        # Space: O(N), because of the recursive stack, the space complexity is O(N)\n        if not root:\n            return []"
    },
    {
        "number": 145,
        "title": "Binary Tree Postorder Traversal",
        "difficulty": 0,
        "prompt": "class Solution:\n    def postorderTraversal(self, root: Optional[TreeNode]) -> List[int]:\n        \"\"\"\n        Given the root of a binary tree, return the postorder traversal of its nodes' values.\n        Example 1:\n        Input: root = [1,null,2,3]\n        Output: [3,2,1]\n        Example 2:\n        Input: root = []\n        Output: []\n        Example 3:\n        Input: root = [1]\n        Output: [1]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 4,
        "answer": "        if not root:\n            return []"
    },
    {
        "number": 145,
        "title": "Binary Tree Postorder Traversal",
        "difficulty": 0,
        "prompt": "class Solution:\n    def postorderTraversal(self, root: Optional[TreeNode]) -> List[int]:\n        \"\"\"\n        Given the root of a binary tree, return the postorder traversal of its nodes' values.\n        Example 1:\n        Input: root = [1,null,2,3]\n        Output: [3,2,1]\n        Example 2:\n        Input: root = []\n        Output: []\n        Example 3:\n        Input: root = [1]\n        Output: [1]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 5,
        "answer": "        if not root:\n            return []\n        stack = [root]\n        ans = []\n        while stack:\n            curr = stack.pop()\n            ans.append(curr.val)\n            if curr.left:\n                stack.append(curr.left)\n            if curr.right:\n                stack.append(curr.right)\n        return ans[::-1]\n<|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>"
    },
    {
        "number": 146,
        "title": "LRU Cache",
        "difficulty": 1,
        "prompt": "class LRUCache:\n    def __init__(self, capacity: int):\n    def get(self, key: int) -> int:\n    def put(self, key: int, value: int) -> None:\n        \"\"\"\n        Design a data structure that follows the constraints of a Least Recently Used (LRU) cache.\n        Implement the LRUCache class:\n            LRUCache(int capacity) Initialize the LRU cache with positive size capacity.\n            int get(int key) Return the value of the key if the key exists, otherwise return -1.\n            void put(int key, int value) Update the value of the key if the key exists. Otherwise, add the key-value pair to the cache. If the number of keys exceeds the capacity from this operation, evict the least recently used key.\n        The functions get and put must each run in O(1) average time complexity.\n        Example 1:\n        Input\n        [\"LRUCache\", \"put\", \"put\", \"get\", \"put\", \"get\", \"put\", \"get\", \"get\", \"get\"]\n        [[2], [1, 1], [2, 2], [1], [3, 3], [2], [4, 4], [1], [3], [4]]\n        Output\n        [null, null, null, 1, null, -1, null, -1, 3, 4]\n        Explanation\n        LRUCache lRUCache = new LRUCache(2);\n        lRUCache.put(1, 1); // cache is {1=1}\n        lRUCache.put(2, 2); // cache is {1=1, 2=2}\n        lRUCache.get(1);    // return 1\n        lRUCache.put(3, 3); // LRU key was 2, evicts key 2, cache is {1=1, 3=3}\n        lRUCache.get(2);    // returns -1 (not found)\n        lRUCache.put(4, 4); // LRU key was 1, evicts key 1, cache is {4=4, 3=3}\n        lRUCache.get(1);    // return -1 (not found)\n        lRUCache.get(3);    // return 3\n        lRUCache.get(4);    // return 4\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        self.cache = dict()\n        self.capacity = capacity\n        self.storage = dict()\n        self.lru = list()"
    },
    {
        "number": 146,
        "title": "LRU Cache",
        "difficulty": 1,
        "prompt": "class LRUCache:\n    def __init__(self, capacity: int):\n    def get(self, key: int) -> int:\n    def put(self, key: int, value: int) -> None:\n        \"\"\"\n        Design a data structure that follows the constraints of a Least Recently Used (LRU) cache.\n        Implement the LRUCache class:\n            LRUCache(int capacity) Initialize the LRU cache with positive size capacity.\n            int get(int key) Return the value of the key if the key exists, otherwise return -1.\n            void put(int key, int value) Update the value of the key if the key exists. Otherwise, add the key-value pair to the cache. If the number of keys exceeds the capacity from this operation, evict the least recently used key.\n        The functions get and put must each run in O(1) average time complexity.\n        Example 1:\n        Input\n        [\"LRUCache\", \"put\", \"put\", \"get\", \"put\", \"get\", \"put\", \"get\", \"get\", \"get\"]\n        [[2], [1, 1], [2, 2], [1], [3, 3], [2], [4, 4], [1], [3], [4]]\n        Output\n        [null, null, null, 1, null, -1, null, -1, 3, 4]\n        Explanation\n        LRUCache lRUCache = new LRUCache(2);\n        lRUCache.put(1, 1); // cache is {1=1}\n        lRUCache.put(2, 2); // cache is {1=1, 2=2}\n        lRUCache.get(1);    // return 1\n        lRUCache.put(3, 3); // LRU key was 2, evicts key 2, cache is {1=1, 3=3}\n        lRUCache.get(2);    // returns -1 (not found)\n        lRUCache.put(4, 4); // LRU key was 1, evicts key 1, cache is {4=4, 3=3}\n        lRUCache.get(1);    // return -1 (not found)\n        lRUCache.get(3);    // return 3\n        lRUCache.get(4);    // return 4\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "\nclass Node:\n    def __init__(self, key: int, value: int):\n        self.key = key\n        self.value = value\n        self.prev = None\n        self.next = None"
    },
    {
        "number": 146,
        "title": "LRU Cache",
        "difficulty": 1,
        "prompt": "class LRUCache:\n    def __init__(self, capacity: int):\n    def get(self, key: int) -> int:\n    def put(self, key: int, value: int) -> None:\n        \"\"\"\n        Design a data structure that follows the constraints of a Least Recently Used (LRU) cache.\n        Implement the LRUCache class:\n            LRUCache(int capacity) Initialize the LRU cache with positive size capacity.\n            int get(int key) Return the value of the key if the key exists, otherwise return -1.\n            void put(int key, int value) Update the value of the key if the key exists. Otherwise, add the key-value pair to the cache. If the number of keys exceeds the capacity from this operation, evict the least recently used key.\n        The functions get and put must each run in O(1) average time complexity.\n        Example 1:\n        Input\n        [\"LRUCache\", \"put\", \"put\", \"get\", \"put\", \"get\", \"put\", \"get\", \"get\", \"get\"]\n        [[2], [1, 1], [2, 2], [1], [3, 3], [2], [4, 4], [1], [3], [4]]\n        Output\n        [null, null, null, 1, null, -1, null, -1, 3, 4]\n        Explanation\n        LRUCache lRUCache = new LRUCache(2);\n        lRUCache.put(1, 1); // cache is {1=1}\n        lRUCache.put(2, 2); // cache is {1=1, 2=2}\n        lRUCache.get(1);    // return 1\n        lRUCache.put(3, 3); // LRU key was 2, evicts key 2, cache is {1=1, 3=3}\n        lRUCache.get(2);    // returns -1 (not found)\n        lRUCache.put(4, 4); // LRU key was 1, evicts key 1, cache is {4=4, 3=3}\n        lRUCache.get(1);    // return -1 (not found)\n        lRUCache.get(3);    // return 3\n        lRUCache.get(4);    // return 4\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 3,
        "answer": "        self.d = dict()\n        self.l = []\n        self.cap = capacity\n        \n    def get(self, key: int) -> int:\n        if key in self.d:\n            self.l.remove(key)\n            self.l.append(key)\n            return self.d[key]\n        else:\n            return -1\n    def put(self, key: int, value: int) -> None:\n        if key in self.d:\n            self.d[key] = value\n            self.l.remove(key)\n            self.l.append(key)\n        else:\n            if len(self.d) < self.cap:\n                self.d[key] = value\n                self.l.append(key)\n            else:\n                self.d.pop(self.l.pop(0))\n                self.d[key] = value\n                self.l.append(key)"
    },
    {
        "number": 146,
        "title": "LRU Cache",
        "difficulty": 1,
        "prompt": "class LRUCache:\n    def __init__(self, capacity: int):\n    def get(self, key: int) -> int:\n    def put(self, key: int, value: int) -> None:\n        \"\"\"\n        Design a data structure that follows the constraints of a Least Recently Used (LRU) cache.\n        Implement the LRUCache class:\n            LRUCache(int capacity) Initialize the LRU cache with positive size capacity.\n            int get(int key) Return the value of the key if the key exists, otherwise return -1.\n            void put(int key, int value) Update the value of the key if the key exists. Otherwise, add the key-value pair to the cache. If the number of keys exceeds the capacity from this operation, evict the least recently used key.\n        The functions get and put must each run in O(1) average time complexity.\n        Example 1:\n        Input\n        [\"LRUCache\", \"put\", \"put\", \"get\", \"put\", \"get\", \"put\", \"get\", \"get\", \"get\"]\n        [[2], [1, 1], [2, 2], [1], [3, 3], [2], [4, 4], [1], [3], [4]]\n        Output\n        [null, null, null, 1, null, -1, null, -1, 3, 4]\n        Explanation\n        LRUCache lRUCache = new LRUCache(2);\n        lRUCache.put(1, 1); // cache is {1=1}\n        lRUCache.put(2, 2); // cache is {1=1, 2=2}\n        lRUCache.get(1);    // return 1\n        lRUCache.put(3, 3); // LRU key was 2, evicts key 2, cache is {1=1, 3=3}\n        lRUCache.get(2);    // returns -1 (not found)\n        lRUCache.put(4, 4); // LRU key was 1, evicts key 1, cache is {4=4, 3=3}\n        lRUCache.get(1);    // return -1 (not found)\n        lRUCache.get(3);    // return 3\n        lRUCache.get(4);    // return 4\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 4,
        "answer": "        self.key_dict = dict()\n        self.max_len = capacity\n        self.list_len = 0\n        self.curr_list_pos = 0\n        self.cache = {}"
    },
    {
        "number": 146,
        "title": "LRU Cache",
        "difficulty": 1,
        "prompt": "class LRUCache:\n    def __init__(self, capacity: int):\n    def get(self, key: int) -> int:\n    def put(self, key: int, value: int) -> None:\n        \"\"\"\n        Design a data structure that follows the constraints of a Least Recently Used (LRU) cache.\n        Implement the LRUCache class:\n            LRUCache(int capacity) Initialize the LRU cache with positive size capacity.\n            int get(int key) Return the value of the key if the key exists, otherwise return -1.\n            void put(int key, int value) Update the value of the key if the key exists. Otherwise, add the key-value pair to the cache. If the number of keys exceeds the capacity from this operation, evict the least recently used key.\n        The functions get and put must each run in O(1) average time complexity.\n        Example 1:\n        Input\n        [\"LRUCache\", \"put\", \"put\", \"get\", \"put\", \"get\", \"put\", \"get\", \"get\", \"get\"]\n        [[2], [1, 1], [2, 2], [1], [3, 3], [2], [4, 4], [1], [3], [4]]\n        Output\n        [null, null, null, 1, null, -1, null, -1, 3, 4]\n        Explanation\n        LRUCache lRUCache = new LRUCache(2);\n        lRUCache.put(1, 1); // cache is {1=1}\n        lRUCache.put(2, 2); // cache is {1=1, 2=2}\n        lRUCache.get(1);    // return 1\n        lRUCache.put(3, 3); // LRU key was 2, evicts key 2, cache is {1=1, 3=3}\n        lRUCache.get(2);    // returns -1 (not found)\n        lRUCache.put(4, 4); // LRU key was 1, evicts key 1, cache is {4=4, 3=3}\n        lRUCache.get(1);    // return -1 (not found)\n        lRUCache.get(3);    // return 3\n        lRUCache.get(4);    // return 4\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 5,
        "answer": "        self.capacity = capacity\n        self.cache = dict()\n        self.queue = deque()"
    },
    {
        "number": 147,
        "title": "Insertion Sort List",
        "difficulty": 1,
        "prompt": "class Solution:\n    def insertionSortList(self, head: Optional[ListNode]) -> Optional[ListNode]:\n        \"\"\"\n        Given the head of a singly linked list, sort the list using insertion sort, and return the sorted list's head.\n        The steps of the insertion sort algorithm:\n            Insertion sort iterates, consuming one input element each repetition and growing a sorted output list.\n            At each iteration, insertion sort removes one element from the input data, finds the location it belongs within the sorted list and inserts it there.\n            It repeats until no input elements remain.\n        The following is a graphical example of the insertion sort algorithm. The partially sorted list (black) initially contains only the first element in the list. One element (red) is removed from the input data and inserted in-place into the sorted list with each iteration.\n        Example 1:\n        Input: head = [4,2,1,3]\n        Output: [1,2,3,4]\n        Example 2:\n        Input: head = [-1,5,3,4,0]\n        Output: [-1,0,3,4,5]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        dummy = ListNode(0, head)\n        cur = dummy.next\n        while cur and cur.next:\n            pred = dummy\n            # find the right place for cur.next\n            while pred.next.val < cur.next.val:\n                pred = pred.next\n            tmp = cur.next\n            cur.next = tmp.next\n            tmp.next = pred.next\n            pred.next = tmp\n        return dummy.next"
    },
    {
        "number": 147,
        "title": "Insertion Sort List",
        "difficulty": 1,
        "prompt": "class Solution:\n    def insertionSortList(self, head: Optional[ListNode]) -> Optional[ListNode]:\n        \"\"\"\n        Given the head of a singly linked list, sort the list using insertion sort, and return the sorted list's head.\n        The steps of the insertion sort algorithm:\n            Insertion sort iterates, consuming one input element each repetition and growing a sorted output list.\n            At each iteration, insertion sort removes one element from the input data, finds the location it belongs within the sorted list and inserts it there.\n            It repeats until no input elements remain.\n        The following is a graphical example of the insertion sort algorithm. The partially sorted list (black) initially contains only the first element in the list. One element (red) is removed from the input data and inserted in-place into the sorted list with each iteration.\n        Example 1:\n        Input: head = [4,2,1,3]\n        Output: [1,2,3,4]\n        Example 2:\n        Input: head = [-1,5,3,4,0]\n        Output: [-1,0,3,4,5]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        # step 1: traverse the list from the head\n        curr = head\n        while curr:\n            # step 2:  find the next node to be inserted\n            # step 3:  traverse the list from the curr.next\n            # step 4:  insert the curr into the correct place\n            if curr.next and curr.val > curr.next.val:\n                insert_node = curr.next\n                curr.next = curr.next.next\n                previous_node = self.find_insert_position(head, insert_node.val)\n                insert_node.next = previous_node.next\n                previous_node.next = insert_node\n            else:\n                previous_node = curr\n                curr = curr.next"
    },
    {
        "number": 147,
        "title": "Insertion Sort List",
        "difficulty": 1,
        "prompt": "class Solution:\n    def insertionSortList(self, head: Optional[ListNode]) -> Optional[ListNode]:\n        \"\"\"\n        Given the head of a singly linked list, sort the list using insertion sort, and return the sorted list's head.\n        The steps of the insertion sort algorithm:\n            Insertion sort iterates, consuming one input element each repetition and growing a sorted output list.\n            At each iteration, insertion sort removes one element from the input data, finds the location it belongs within the sorted list and inserts it there.\n            It repeats until no input elements remain.\n        The following is a graphical example of the insertion sort algorithm. The partially sorted list (black) initially contains only the first element in the list. One element (red) is removed from the input data and inserted in-place into the sorted list with each iteration.\n        Example 1:\n        Input: head = [4,2,1,3]\n        Output: [1,2,3,4]\n        Example 2:\n        Input: head = [-1,5,3,4,0]\n        Output: [-1,0,3,4,5]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 3,
        "answer": "        dummy = ListNode()\n        cur = dummy\n        \n        while head:\n            # Store the current node's value\n            value = head.val\n            \n            # Find the position where the current node should be inserted\n            while cur.next and cur.next.val < value:\n                cur = cur.next\n                \n            # Insert the current node to the position\n            node = ListNode(value)\n            node.next = cur.next\n            cur.next = node\n            \n            # Move to the next node\n            head = head.next\n        \n        return dummy.next\n    \n    # O(n) O(n)\n    def insertionSortList1(self, head: Optional[ListNode]) -> Optional[ListNode]:\n        \"\"\"\n        Iterative Solution\n        \"\"\"\n        dummy = ListNode(0)\n        dummy.next = head\n        \n        cur = head\n        while cur:\n            # start from the second node\n            pre = dummy\n            # find the position where current node should be inserted\n            while pre.next and pre.next.val < cur.val:\n                pre = pre.next\n                \n            cur.next, pre.next, cur = pre.next, cur, cur.next\n            \n        return dummy.next\n    \n    \n    # O("
    },
    {
        "number": 147,
        "title": "Insertion Sort List",
        "difficulty": 1,
        "prompt": "class Solution:\n    def insertionSortList(self, head: Optional[ListNode]) -> Optional[ListNode]:\n        \"\"\"\n        Given the head of a singly linked list, sort the list using insertion sort, and return the sorted list's head.\n        The steps of the insertion sort algorithm:\n            Insertion sort iterates, consuming one input element each repetition and growing a sorted output list.\n            At each iteration, insertion sort removes one element from the input data, finds the location it belongs within the sorted list and inserts it there.\n            It repeats until no input elements remain.\n        The following is a graphical example of the insertion sort algorithm. The partially sorted list (black) initially contains only the first element in the list. One element (red) is removed from the input data and inserted in-place into the sorted list with each iteration.\n        Example 1:\n        Input: head = [4,2,1,3]\n        Output: [1,2,3,4]\n        Example 2:\n        Input: head = [-1,5,3,4,0]\n        Output: [-1,0,3,4,5]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 4,
        "answer": "        # trivial cases\n        if not head or not head.next:\n            return head"
    },
    {
        "number": 147,
        "title": "Insertion Sort List",
        "difficulty": 1,
        "prompt": "class Solution:\n    def insertionSortList(self, head: Optional[ListNode]) -> Optional[ListNode]:\n        \"\"\"\n        Given the head of a singly linked list, sort the list using insertion sort, and return the sorted list's head.\n        The steps of the insertion sort algorithm:\n            Insertion sort iterates, consuming one input element each repetition and growing a sorted output list.\n            At each iteration, insertion sort removes one element from the input data, finds the location it belongs within the sorted list and inserts it there.\n            It repeats until no input elements remain.\n        The following is a graphical example of the insertion sort algorithm. The partially sorted list (black) initially contains only the first element in the list. One element (red) is removed from the input data and inserted in-place into the sorted list with each iteration.\n        Example 1:\n        Input: head = [4,2,1,3]\n        Output: [1,2,3,4]\n        Example 2:\n        Input: head = [-1,5,3,4,0]\n        Output: [-1,0,3,4,5]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 5,
        "answer": "        if not head:\n            return head\n        dummy = ListNode(0)\n        dummy.next = head\n        while head.next:\n            curr = head.next\n            if curr.val < head.val:\n                head.next = curr.next\n                curr.next = head\n                head = curr\n            else:\n                p = dummy\n                while p.next.val < curr.val:\n                    p = p.next\n                head.next = curr.next\n                curr.next = p.next\n                p.next = curr\n        return dummy.next"
    },
    {
        "number": 148,
        "title": "Sort List",
        "difficulty": 1,
        "prompt": "class Solution:\n    def sortList(self, head: Optional[ListNode]) -> Optional[ListNode]:\n        \"\"\"\n        Given the head of a linked list, return the list after sorting it in ascending order.\n        Example 1:\n        Input: head = [4,2,1,3]\n        Output: [1,2,3,4]\n        Example 2:\n        Input: head = [-1,5,3,4,0]\n        Output: [-1,0,3,4,5]\n        Example 3:\n        Input: head = []\n        Output: []\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        # method 1: \u5f52\u5e76\u6392\u5e8f\n        if not head or not head.next: return head\n        slow, fast = head, head\n        while fast and fast.next:\n            fast = fast.next.next\n            slow = slow.next\n        head1, head2 = head, slow.next\n        slow.next = None\n        return self.sortList(head1) + self.sortList(head2) if head1 and head2 else self.sortList(head1 or head2)\n        \n        # method 2: \u5feb\u6162\u6307\u9488\n        if not head or not head.next: return head\n        slow, fast = head, head\n        while fast and fast.next:\n            slow = slow.next\n            fast = fast.next.next\n        pre = slow\n        pre.next = None\n        return self.mergeSort(head)\n    \n    def mergeSort(self, head):\n        if not head or not head.next: return head\n        slow, fast = head, head\n        while fast and fast.next:\n            slow = slow.next\n            fast = fast.next.next\n        head1, head2 = head, slow.next\n        slow.next = None\n        return self.merge(self.merge"
    },
    {
        "number": 148,
        "title": "Sort List",
        "difficulty": 1,
        "prompt": "class Solution:\n    def sortList(self, head: Optional[ListNode]) -> Optional[ListNode]:\n        \"\"\"\n        Given the head of a linked list, return the list after sorting it in ascending order.\n        Example 1:\n        Input: head = [4,2,1,3]\n        Output: [1,2,3,4]\n        Example 2:\n        Input: head = [-1,5,3,4,0]\n        Output: [-1,0,3,4,5]\n        Example 3:\n        Input: head = []\n        Output: []\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        # Time complexity: O(nlogn)\n        # Space complexity: O(1)\n        # A fast and slow pointer to find the midpoint of the linked list.\n        # The fast pointer will advance twice as fast as the slow pointer.\n        # If the fast pointer reaches the end of the linked list,\n        # the slow pointer will be pointing to the midpoint of the linked list.\n        \n        # The idea behind the slow and fast pointers is to find the midpoint of the linked list\n        # and then sort the sub-list of nodes from low to mid and from mid to high.\n        # The slow pointer is used to move through the list and the fast pointer is used to find the midpoint.\n        \n        # The sorted sub-list of nodes is then merged with the remaining unsorted sub-list in a sorted linked list.\n        \n        # The algorithm is as follows:\n        # Step 1: Find the midpoint of the linked list using slow and fast pointers.\n        # Step 2: Sort the sub-list of nodes from low to mid and from mid to high.\n        # Step 3: Merge the sorted sub-list of nodes with the remaining unsorted sub-list in a sorted linked list.\n        \n        # The steps 1, 2 and 3 are repeated until the whole list is traversed.\n        # Time complexity: O(n)"
    },
    {
        "number": 148,
        "title": "Sort List",
        "difficulty": 1,
        "prompt": "class Solution:\n    def sortList(self, head: Optional[ListNode]) -> Optional[ListNode]:\n        \"\"\"\n        Given the head of a linked list, return the list after sorting it in ascending order.\n        Example 1:\n        Input: head = [4,2,1,3]\n        Output: [1,2,3,4]\n        Example 2:\n        Input: head = [-1,5,3,4,0]\n        Output: [-1,0,3,4,5]\n        Example 3:\n        Input: head = []\n        Output: []\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 3,
        "answer": "        \"\"\"\n        Merge Sort\n        1. break the linked list into 2 parts, where each part contains a single linked list of length n//2\n        2. Merge the 2 lists\n        3. return the head of the merged list\n        \"\"\"\n        def get_mid(head):\n            slow, fast = head, head\n            while fast.next and fast.next.next:\n                slow = slow.next\n                fast = fast.next.next\n            mid = slow.next\n            slow.next = None\n            return mid"
    },
    {
        "number": 148,
        "title": "Sort List",
        "difficulty": 1,
        "prompt": "class Solution:\n    def sortList(self, head: Optional[ListNode]) -> Optional[ListNode]:\n        \"\"\"\n        Given the head of a linked list, return the list after sorting it in ascending order.\n        Example 1:\n        Input: head = [4,2,1,3]\n        Output: [1,2,3,4]\n        Example 2:\n        Input: head = [-1,5,3,4,0]\n        Output: [-1,0,3,4,5]\n        Example 3:\n        Input: head = []\n        Output: []\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 4,
        "answer": "        # find the middle\n        if not head or not head.next:\n            return head\n        fast = slow = head\n        while fast and fast.next:\n            fast = fast.next.next\n            slow = slow.next\n        mid = slow\n        # reverse the second half\n        pre, cur = None, mid\n        while cur:\n            temp = cur.next\n            cur.next = pre\n            pre = cur\n            cur = temp\n        # merge two sorted list\n        new_head = dummy = ListNode(0)\n        dummy.next = head\n        while pre and dummy.next:\n            if pre.val <= dummy.next.val:\n                dummy.next = pre\n                pre = pre.next\n            else:\n                dummy.next = dummy.next.next\n                dummy = dummy.next\n        dummy.next = pre\n        return new_head.next"
    },
    {
        "number": 148,
        "title": "Sort List",
        "difficulty": 1,
        "prompt": "class Solution:\n    def sortList(self, head: Optional[ListNode]) -> Optional[ListNode]:\n        \"\"\"\n        Given the head of a linked list, return the list after sorting it in ascending order.\n        Example 1:\n        Input: head = [4,2,1,3]\n        Output: [1,2,3,4]\n        Example 2:\n        Input: head = [-1,5,3,4,0]\n        Output: [-1,0,3,4,5]\n        Example 3:\n        Input: head = []\n        Output: []\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 5,
        "answer": "        # Base Case\n        if not head or not head.next:\n            return head\n        # 1. Find the middle node, and the tail node of the list\n        # [4,2,1,3]\n        # [4,2,1]\n        slow, fast = head, head.next\n        while fast and fast.next:\n            slow = slow.next\n            fast = fast.next.next\n        # 2. Reverse the second half in-place\n        # [4,2,1]\n        # [1,2,4]\n        # 1->2->4\n        # 2->1->4\n        # None<-1<-2<-4\n        pre, cur = None, slow\n        while cur:\n            # 1->2->4\n            # 2->1->4\n            # pre.next -> cur -> cur.next\n            # pre.next -> cur -> cur.next.next\n            pre, cur.next, cur = cur, pre, cur.next\n        # 3. Merge in-place; merge two sorted linked lists into one\n        # 1->2->4\n        # 1->2->4\n        # 1->3->4\n        # None<-1<-2<-4\n        # 1->1<-2<-4\n        # None<-"
    },
    {
        "number": 149,
        "title": "Max Points on a Line",
        "difficulty": 2,
        "prompt": "class Solution:\n    def maxPoints(self, points: List[List[int]]) -> int:\n        \"\"\"\n        Given an array of points where points[i] = [xi, yi] represents a point on the X-Y plane, return the maximum number of points that lie on the same straight line.\n        Example 1:\n        Input: points = [[1,1],[2,2],[3,3]]\n        Output: 3\n        Example 2:\n        Input: points = [[1,1],[3,2],[5,3],[4,1],[2,3],[1,4]]\n        Output: 4\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        def gcd(a,b):\n            if b == 0:\n                return a\n            return gcd(b, a%b)\n        # get number of points\n        n = len(points)\n        # use a dictionary to store the number of points that share the same y coordinate\n        y_coordinate = collections.defaultdict(int)\n        # use a dictionary to store the number of points that share the same x coordinate\n        x_coordinate = collections.defaultdict(int)\n        # iterate through the list of points\n        for i in range(n):\n            # iterate through the list of points\n            for j in range(i+1, n):\n                # get the y coordinate of the point\n                y = points[j][1] - points[i][1]\n                # get the x coordinate of the point\n                x = points[j][0] - points[i][0]\n                # get the gcd of the two coordinates\n                g = gcd(abs(y), abs(x))\n                # if the gcd of the two coordinates is not zero, then the two points share the same x or y coordinate\n                if g!= 0:\n                    # increment the number of points that share the same y coordinate\n                    y_coordinate[y/g] += 1\n                    # increment the number of"
    },
    {
        "number": 149,
        "title": "Max Points on a Line",
        "difficulty": 2,
        "prompt": "class Solution:\n    def maxPoints(self, points: List[List[int]]) -> int:\n        \"\"\"\n        Given an array of points where points[i] = [xi, yi] represents a point on the X-Y plane, return the maximum number of points that lie on the same straight line.\n        Example 1:\n        Input: points = [[1,1],[2,2],[3,3]]\n        Output: 3\n        Example 2:\n        Input: points = [[1,1],[3,2],[5,3],[4,1],[2,3],[1,4]]\n        Output: 4\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        # points = [[1,1],[2,2],[3,3]]\n        # Output: 3"
    },
    {
        "number": 149,
        "title": "Max Points on a Line",
        "difficulty": 2,
        "prompt": "class Solution:\n    def maxPoints(self, points: List[List[int]]) -> int:\n        \"\"\"\n        Given an array of points where points[i] = [xi, yi] represents a point on the X-Y plane, return the maximum number of points that lie on the same straight line.\n        Example 1:\n        Input: points = [[1,1],[2,2],[3,3]]\n        Output: 3\n        Example 2:\n        Input: points = [[1,1],[3,2],[5,3],[4,1],[2,3],[1,4]]\n        Output: 4\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 3,
        "answer": "        # a line can be:\n        #   horizontal: y1 = y2\n        #   vertical: x1 = x2\n        #   45 degree: ((x1 - x2) ** 2 + (y1 - y2) ** 2) ** 0.5 == 1\n        #   all: (y1 - y2) / (x1 - x2) == (x1 - x2) / (y1 - y2)\n        #   one: (x1 - x2) / (y1 - y2) == (y1 - y2) / (x1 - x2) == 1/1\n        # the idea here is to try to use recursion to calculate the answer\n        # so, for each point, we want to calculate the number of points on the line\n        # with the same slope as it.\n        # the number of points on the same line with the same slope is the max\n        # among all points.\n        # so, we keep the maximum number of points on the same line so far\n        # and add the number of points in the current point to the count\n        # of the number of points on the same line with the same slope\n        # since we want to find the max, we keep the max of the number of points\n        # on the same line so far and the current number of points\n"
    },
    {
        "number": 149,
        "title": "Max Points on a Line",
        "difficulty": 2,
        "prompt": "class Solution:\n    def maxPoints(self, points: List[List[int]]) -> int:\n        \"\"\"\n        Given an array of points where points[i] = [xi, yi] represents a point on the X-Y plane, return the maximum number of points that lie on the same straight line.\n        Example 1:\n        Input: points = [[1,1],[2,2],[3,3]]\n        Output: 3\n        Example 2:\n        Input: points = [[1,1],[3,2],[5,3],[4,1],[2,3],[1,4]]\n        Output: 4\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 4,
        "answer": "        \n        def on_segment(p1, p2, p3):\n            if p1[0] <= max(p2[0], p3[0]) and p1[0] >= min(p2[0], p3[0]) and p1[1] <= max(p2[1], p3[1]) and p1[1] >= min(p2[1], p3[1]):\n                return True\n            return False\n        \n        def orientation(p1, p2, p3):\n            val = (p2[0] - p1[0]) * (p3[1] - p1[1]) - (p2[1] - p1[1]) * (p3[0] - p1[0])\n            if val == 0:\n                return 0\n            elif val > 0:\n                return 1\n            else:\n                return 2\n        \n        def dist(p1, p2):\n            return ((p1[0] - p2[0]) ** 2 + (p1[1] - p2[1]) ** 2) ** 0.5\n        \n        def max_points_on_segment(i, points):\n            points_len = len(points)\n            max_on_segment = 1\n            for j in"
    },
    {
        "number": 149,
        "title": "Max Points on a Line",
        "difficulty": 2,
        "prompt": "class Solution:\n    def maxPoints(self, points: List[List[int]]) -> int:\n        \"\"\"\n        Given an array of points where points[i] = [xi, yi] represents a point on the X-Y plane, return the maximum number of points that lie on the same straight line.\n        Example 1:\n        Input: points = [[1,1],[2,2],[3,3]]\n        Output: 3\n        Example 2:\n        Input: points = [[1,1],[3,2],[5,3],[4,1],[2,3],[1,4]]\n        Output: 4\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 5,
        "answer": "        import functools\n        def gcd(a, b):\n            return a if b == 0 else gcd(b, a % b)"
    },
    {
        "number": 150,
        "title": "Evaluate Reverse Polish Notation",
        "difficulty": 1,
        "prompt": "class Solution:\n    def evalRPN(self, tokens: List[str]) -> int:\n        \"\"\"\n        You are given an array of strings tokens that represents an arithmetic expression in a Reverse Polish Notation.\n        Evaluate the expression. Return an integer that represents the value of the expression.\n        Note that:\n            The valid operators are '+', '-', '*', and '/'.\n            Each operand may be an integer or another expression.\n            The division between two integers always truncates toward zero.\n            There will not be any division by zero.\n            The input represents a valid arithmetic expression in a reverse polish notation.\n            The answer and all the intermediate calculations can be represented in a 32-bit integer.\n        Example 1:\n        Input: tokens = [\"2\",\"1\",\"+\",\"3\",\"*\"]\n        Output: 9\n        Explanation: ((2 + 1) * 3) = 9\n        Example 2:\n        Input: tokens = [\"4\",\"13\",\"5\",\"/\",\"+\"]\n        Output: 6\n        Explanation: (4 + (13 / 5)) = 6\n        Example 3:\n        Input: tokens = [\"10\",\"6\",\"9\",\"3\",\"+\",\"-11\",\"*\",\"/\",\"*\",\"17\",\"+\",\"5\",\"+\"]\n        Output: 22\n        Explanation: ((10 * (6 / ((9 + 3) * -11))) + 17) + 5\n        = ((10 * (6 / (12 * -11))) + 17) + 5\n        = ((10 * (6 / -132)) + 17) + 5\n        = ((10 * 0) + 17) + 5\n        = (0 + 17) + 5\n        = 17 + 5\n        = 22\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        # https://leetcode.com/problems/evaluate-reverse-polish-notation/discuss/58399/A-simple-Python-solution-with-stack\n        # Time complexity: O(n)\n        # Space complexity: O(n)\n        stack = []\n        for t in tokens:\n            if t not in ('+', '-', '*', '/'):\n                stack.append(int(t))\n            else:\n                op2 = stack.pop()\n                op1 = stack.pop()\n                if t == '+':\n                    stack.append(op1 + op2)\n                elif t == '-':\n                    stack.append(op1 - op2)\n                elif t == '*':\n                    stack.append(op1 * op2)\n                elif t == '/':\n                    stack.append(int(op1 / op2))\n        return stack.pop()"
    },
    {
        "number": 150,
        "title": "Evaluate Reverse Polish Notation",
        "difficulty": 1,
        "prompt": "class Solution:\n    def evalRPN(self, tokens: List[str]) -> int:\n        \"\"\"\n        You are given an array of strings tokens that represents an arithmetic expression in a Reverse Polish Notation.\n        Evaluate the expression. Return an integer that represents the value of the expression.\n        Note that:\n            The valid operators are '+', '-', '*', and '/'.\n            Each operand may be an integer or another expression.\n            The division between two integers always truncates toward zero.\n            There will not be any division by zero.\n            The input represents a valid arithmetic expression in a reverse polish notation.\n            The answer and all the intermediate calculations can be represented in a 32-bit integer.\n        Example 1:\n        Input: tokens = [\"2\",\"1\",\"+\",\"3\",\"*\"]\n        Output: 9\n        Explanation: ((2 + 1) * 3) = 9\n        Example 2:\n        Input: tokens = [\"4\",\"13\",\"5\",\"/\",\"+\"]\n        Output: 6\n        Explanation: (4 + (13 / 5)) = 6\n        Example 3:\n        Input: tokens = [\"10\",\"6\",\"9\",\"3\",\"+\",\"-11\",\"*\",\"/\",\"*\",\"17\",\"+\",\"5\",\"+\"]\n        Output: 22\n        Explanation: ((10 * (6 / ((9 + 3) * -11))) + 17) + 5\n        = ((10 * (6 / (12 * -11))) + 17) + 5\n        = ((10 * (6 / -132)) + 17) + 5\n        = ((10 * 0) + 17) + 5\n        = (0 + 17) + 5\n        = 17 + 5\n        = 22\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        stack = []\n        for ele in tokens:\n            if ele.lstrip('-').isdigit():\n                stack.append(int(ele))\n            else:\n                operand2 = stack.pop()\n                operand1 = stack.pop()\n                if ele == '+':\n                    stack.append(operand1 + operand2)\n                elif ele == '-':\n                    stack.append(operand1 - operand2)\n                elif ele == '*':\n                    stack.append(operand1 * operand2)\n                elif ele == '/':\n                    stack.append(int(operand1 / operand2))\n        return stack.pop()"
    },
    {
        "number": 150,
        "title": "Evaluate Reverse Polish Notation",
        "difficulty": 1,
        "prompt": "class Solution:\n    def evalRPN(self, tokens: List[str]) -> int:\n        \"\"\"\n        You are given an array of strings tokens that represents an arithmetic expression in a Reverse Polish Notation.\n        Evaluate the expression. Return an integer that represents the value of the expression.\n        Note that:\n            The valid operators are '+', '-', '*', and '/'.\n            Each operand may be an integer or another expression.\n            The division between two integers always truncates toward zero.\n            There will not be any division by zero.\n            The input represents a valid arithmetic expression in a reverse polish notation.\n            The answer and all the intermediate calculations can be represented in a 32-bit integer.\n        Example 1:\n        Input: tokens = [\"2\",\"1\",\"+\",\"3\",\"*\"]\n        Output: 9\n        Explanation: ((2 + 1) * 3) = 9\n        Example 2:\n        Input: tokens = [\"4\",\"13\",\"5\",\"/\",\"+\"]\n        Output: 6\n        Explanation: (4 + (13 / 5)) = 6\n        Example 3:\n        Input: tokens = [\"10\",\"6\",\"9\",\"3\",\"+\",\"-11\",\"*\",\"/\",\"*\",\"17\",\"+\",\"5\",\"+\"]\n        Output: 22\n        Explanation: ((10 * (6 / ((9 + 3) * -11))) + 17) + 5\n        = ((10 * (6 / (12 * -11))) + 17) + 5\n        = ((10 * (6 / -132)) + 17) + 5\n        = ((10 * 0) + 17) + 5\n        = (0 + 17) + 5\n        = 17 + 5\n        = 22\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 3,
        "answer": "        # 1. calculate the final result\n        # 2. stack the operands\n        # 3. stack the operators\n        # 4. calculate each step\n        # 5. in each step, pop the operators until there is no more operator\n        # 6. in each step, the result is the result of the top of the stack, the first operand is the top of the\n        #   stack and the second operand is the second top of the stack\n        # 7. in each step, the operators will be the operator at the top of the stack\n        # 8. after the iteration, the stack will be [result]\n        stack = []\n        for t in tokens:\n            if t in \"+-*/\":\n                b = stack.pop()\n                a = stack.pop()\n                if t == \"+\":\n                    stack.append(a+b)\n                elif t == \"-\":\n                    stack.append(a-b)\n                elif t == \"*\":\n                    stack.append(a*b)\n                else:\n                    stack.append(int(a/b))\n            else:\n                stack.append(int(t))\n        return stack[0]\n<|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>"
    },
    {
        "number": 150,
        "title": "Evaluate Reverse Polish Notation",
        "difficulty": 1,
        "prompt": "class Solution:\n    def evalRPN(self, tokens: List[str]) -> int:\n        \"\"\"\n        You are given an array of strings tokens that represents an arithmetic expression in a Reverse Polish Notation.\n        Evaluate the expression. Return an integer that represents the value of the expression.\n        Note that:\n            The valid operators are '+', '-', '*', and '/'.\n            Each operand may be an integer or another expression.\n            The division between two integers always truncates toward zero.\n            There will not be any division by zero.\n            The input represents a valid arithmetic expression in a reverse polish notation.\n            The answer and all the intermediate calculations can be represented in a 32-bit integer.\n        Example 1:\n        Input: tokens = [\"2\",\"1\",\"+\",\"3\",\"*\"]\n        Output: 9\n        Explanation: ((2 + 1) * 3) = 9\n        Example 2:\n        Input: tokens = [\"4\",\"13\",\"5\",\"/\",\"+\"]\n        Output: 6\n        Explanation: (4 + (13 / 5)) = 6\n        Example 3:\n        Input: tokens = [\"10\",\"6\",\"9\",\"3\",\"+\",\"-11\",\"*\",\"/\",\"*\",\"17\",\"+\",\"5\",\"+\"]\n        Output: 22\n        Explanation: ((10 * (6 / ((9 + 3) * -11))) + 17) + 5\n        = ((10 * (6 / (12 * -11))) + 17) + 5\n        = ((10 * (6 / -132)) + 17) + 5\n        = ((10 * 0) + 17) + 5\n        = (0 + 17) + 5\n        = 17 + 5\n        = 22\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 4,
        "answer": "        # The valid operators are '+', '-', '*', and '/'.\n        # Each operand may be an integer or another expression.\n        # The division between two integers always truncates toward zero.\n        # There will not be any division by zero.\n        # The input represents a valid arithmetic expression in a reverse polish notation.\n        # The answer and all the intermediate calculations can be represented in a 32-bit integer.\n        stack = []\n        # [\"10\", \"6\", \"9\", \"3\", \"+\", \"-11\", \"*\", \"/\", \"*\", \"17\", \"+\", \"5\", \"+\"]\n        for val in tokens:\n            if val not in \"+-*/\":\n                stack.append(int(val))\n            else:\n                # BUG: result = stack.pop()\n                # print(result, stack, stack.pop(), val)\n                if val == \"+\":\n                    result = stack.pop() + stack.pop()\n                    stack.append(result)\n                elif val == \"-\":\n                    result = stack.pop() - stack.pop()\n                    stack.append(result)\n                elif val == \"*\":\n                    result = stack.pop() * stack.pop()\n                    stack.append(result)\n                elif val == \"/\":\n                    result = stack.pop() // stack"
    },
    {
        "number": 150,
        "title": "Evaluate Reverse Polish Notation",
        "difficulty": 1,
        "prompt": "class Solution:\n    def evalRPN(self, tokens: List[str]) -> int:\n        \"\"\"\n        You are given an array of strings tokens that represents an arithmetic expression in a Reverse Polish Notation.\n        Evaluate the expression. Return an integer that represents the value of the expression.\n        Note that:\n            The valid operators are '+', '-', '*', and '/'.\n            Each operand may be an integer or another expression.\n            The division between two integers always truncates toward zero.\n            There will not be any division by zero.\n            The input represents a valid arithmetic expression in a reverse polish notation.\n            The answer and all the intermediate calculations can be represented in a 32-bit integer.\n        Example 1:\n        Input: tokens = [\"2\",\"1\",\"+\",\"3\",\"*\"]\n        Output: 9\n        Explanation: ((2 + 1) * 3) = 9\n        Example 2:\n        Input: tokens = [\"4\",\"13\",\"5\",\"/\",\"+\"]\n        Output: 6\n        Explanation: (4 + (13 / 5)) = 6\n        Example 3:\n        Input: tokens = [\"10\",\"6\",\"9\",\"3\",\"+\",\"-11\",\"*\",\"/\",\"*\",\"17\",\"+\",\"5\",\"+\"]\n        Output: 22\n        Explanation: ((10 * (6 / ((9 + 3) * -11))) + 17) + 5\n        = ((10 * (6 / (12 * -11))) + 17) + 5\n        = ((10 * (6 / -132)) + 17) + 5\n        = ((10 * 0) + 17) + 5\n        = (0 + 17) + 5\n        = 17 + 5\n        = 22\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 5,
        "answer": "        # eval order: A B C D\n        # \u4ee5'*'\u7684\u524d\u9762\u662fA, B, C\n        # A B C + D / E\n        # + A B C D * E /\n        # + A + B + C + D + E\n        # A B C + D * E /\n        # A + B + C + D + E * F\n        # + A B + C + D + E + F\n        # A + B + C + D + E + F + G\n        # \u8fd9\u6837\u9898\u76ee\u8981\u8ba1\u7b97\u5f97\u5230\u7684\u662f\u6700\u540e\u4e00\u4e2a\u503c\n        # \u5148\u8ba1\u7b97'+'\u7b26\u53f7\u7684\u7ed3\u679c\uff0c'+'\u53f3\u4fa7\u7684\u7ed3\u679c\u5168\u90fd\u5728\u53f3\u4fa7\uff0c\u5728\u5de6\u4fa7\u7684\u6700\u540e\u4e00\u4f4d\uff0c\u9700\u8981\u5c06\u5de6\u4fa7\u6240\u6709\u7684\u7ed3\u679c\u5168\u90e8\u53d6\u51fa\u6765\uff0c\u7528stack\u4fdd\u5b58\n        # '-'\u7b26\u53f7\uff1a\u5148\u52a0\u5165\u7ed3\u679c\ufffd"
    },
    {
        "number": 151,
        "title": "Reverse Words in a String",
        "difficulty": 1,
        "prompt": "class Solution:\n    def reverseWords(self, s: str) -> str:\n        \"\"\"\n        Given an input string s, reverse the order of the words.\n        A word is defined as a sequence of non-space characters. The words in s will be separated by at least one space.\n        Return a string of the words in reverse order concatenated by a single space.\n        Note that s may contain leading or trailing spaces or multiple spaces between two words. The returned string should only have a single space separating the words. Do not include any extra spaces.\n        Example 1:\n        Input: s = \"the sky is blue\"\n        Output: \"blue is sky the\"\n        Example 2:\n        Input: s = \"  hello world  \"\n        Output: \"world hello\"\n        Explanation: Your reversed string should not contain leading or trailing spaces.\n        Example 3:\n        Input: s = \"a good   example\"\n        Output: \"example good a\"\n        Explanation: You need to reduce multiple spaces between two words to a single space in the reversed string.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        s = s.split(' ')\n        for i in range(len(s)):\n            s[i] = s[i][::-1]\n        return''.join(s)\n<|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>"
    },
    {
        "number": 151,
        "title": "Reverse Words in a String",
        "difficulty": 1,
        "prompt": "class Solution:\n    def reverseWords(self, s: str) -> str:\n        \"\"\"\n        Given an input string s, reverse the order of the words.\n        A word is defined as a sequence of non-space characters. The words in s will be separated by at least one space.\n        Return a string of the words in reverse order concatenated by a single space.\n        Note that s may contain leading or trailing spaces or multiple spaces between two words. The returned string should only have a single space separating the words. Do not include any extra spaces.\n        Example 1:\n        Input: s = \"the sky is blue\"\n        Output: \"blue is sky the\"\n        Example 2:\n        Input: s = \"  hello world  \"\n        Output: \"world hello\"\n        Explanation: Your reversed string should not contain leading or trailing spaces.\n        Example 3:\n        Input: s = \"a good   example\"\n        Output: \"example good a\"\n        Explanation: You need to reduce multiple spaces between two words to a single space in the reversed string.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        return \" \".join(s.split()[::-1])"
    },
    {
        "number": 151,
        "title": "Reverse Words in a String",
        "difficulty": 1,
        "prompt": "class Solution:\n    def reverseWords(self, s: str) -> str:\n        \"\"\"\n        Given an input string s, reverse the order of the words.\n        A word is defined as a sequence of non-space characters. The words in s will be separated by at least one space.\n        Return a string of the words in reverse order concatenated by a single space.\n        Note that s may contain leading or trailing spaces or multiple spaces between two words. The returned string should only have a single space separating the words. Do not include any extra spaces.\n        Example 1:\n        Input: s = \"the sky is blue\"\n        Output: \"blue is sky the\"\n        Example 2:\n        Input: s = \"  hello world  \"\n        Output: \"world hello\"\n        Explanation: Your reversed string should not contain leading or trailing spaces.\n        Example 3:\n        Input: s = \"a good   example\"\n        Output: \"example good a\"\n        Explanation: You need to reduce multiple spaces between two words to a single space in the reversed string.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 3,
        "answer": "        \n        # Step 1: split the string into a list\n        s = s.split()\n        \n        # Step 2: reverse the list\n        s = s[::-1]\n        \n        # Step 3: put the list together into a string\n        s = \" \".join(s)\n        \n        return s\n    \n    def reverseWords2(self, s: str) -> str:\n        \n        # Step 1: split the string into a list\n        s = s.split()\n        \n        # Step 2: reverse the list\n        s = s[::-1]\n        \n        # Step 3: put the list together into a string\n        s = \" \".join(s)\n        \n        return s\n    \n    \n# Tests\ns = Solution()\nassert s.reverseWords(\"the sky is blue\") == \"blue is sky the\"\nassert s.reverseWords(\"  hello world  \") == \"world hello\"\nassert s.reverseWords(\"a good   example\") == \"example good a\"<|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>"
    },
    {
        "number": 151,
        "title": "Reverse Words in a String",
        "difficulty": 1,
        "prompt": "class Solution:\n    def reverseWords(self, s: str) -> str:\n        \"\"\"\n        Given an input string s, reverse the order of the words.\n        A word is defined as a sequence of non-space characters. The words in s will be separated by at least one space.\n        Return a string of the words in reverse order concatenated by a single space.\n        Note that s may contain leading or trailing spaces or multiple spaces between two words. The returned string should only have a single space separating the words. Do not include any extra spaces.\n        Example 1:\n        Input: s = \"the sky is blue\"\n        Output: \"blue is sky the\"\n        Example 2:\n        Input: s = \"  hello world  \"\n        Output: \"world hello\"\n        Explanation: Your reversed string should not contain leading or trailing spaces.\n        Example 3:\n        Input: s = \"a good   example\"\n        Output: \"example good a\"\n        Explanation: You need to reduce multiple spaces between two words to a single space in the reversed string.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 4,
        "answer": "        res = []\n        index = len(s)\n        # \u5148\u627e\u5230\u6bcf\u4e2aword\u7684\u7ec8\u70b9\uff0c\u7528index\u6307\u5411\n        for i in range(len(s)):\n            if s[i]!='':\n                index = i\n            else:\n                res.append(s[index:i])\n                index = i+1\n        res.append(s[index:])\n        # \u8fd8\u662f\u9700\u8981reverse\n        res.reverse()\n        return''.join(res)"
    },
    {
        "number": 151,
        "title": "Reverse Words in a String",
        "difficulty": 1,
        "prompt": "class Solution:\n    def reverseWords(self, s: str) -> str:\n        \"\"\"\n        Given an input string s, reverse the order of the words.\n        A word is defined as a sequence of non-space characters. The words in s will be separated by at least one space.\n        Return a string of the words in reverse order concatenated by a single space.\n        Note that s may contain leading or trailing spaces or multiple spaces between two words. The returned string should only have a single space separating the words. Do not include any extra spaces.\n        Example 1:\n        Input: s = \"the sky is blue\"\n        Output: \"blue is sky the\"\n        Example 2:\n        Input: s = \"  hello world  \"\n        Output: \"world hello\"\n        Explanation: Your reversed string should not contain leading or trailing spaces.\n        Example 3:\n        Input: s = \"a good   example\"\n        Output: \"example good a\"\n        Explanation: You need to reduce multiple spaces between two words to a single space in the reversed string.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 5,
        "answer": "        return''.join(reversed(s.split()))"
    },
    {
        "number": 152,
        "title": "Maximum Product Subarray",
        "difficulty": 1,
        "prompt": "class Solution:\n    def maxProduct(self, nums: List[int]) -> int:\n        \"\"\"\n        Given an integer array nums, find a subarray that has the largest product, and return the product.\n        The test cases are generated so that the answer will fit in a 32-bit integer.\n        Example 1:\n        Input: nums = [2,3,-2,4]\n        Output: 6\n        Explanation: [2,3] has the largest product 6.\n        Example 2:\n        Input: nums = [-2,0,-1]\n        Output: 0\n        Explanation: The result cannot be 2, because [-2,-1] is not a subarray.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        max_ending_here, min_ending_here = 1, 1\n        max_global, min_global = 1, 1\n        for num in nums:\n            if num < 0:\n                max_ending_here, min_ending_here = min_ending_here, max_ending_here\n            max_ending_here = max(num, max_ending_here * num)\n            min_ending_here = min(num, min_ending_here * num)\n            max_global = max(max_global, max_ending_here)\n            min_global = min(min_global, min_ending_here)\n        return max_global"
    },
    {
        "number": 152,
        "title": "Maximum Product Subarray",
        "difficulty": 1,
        "prompt": "class Solution:\n    def maxProduct(self, nums: List[int]) -> int:\n        \"\"\"\n        Given an integer array nums, find a subarray that has the largest product, and return the product.\n        The test cases are generated so that the answer will fit in a 32-bit integer.\n        Example 1:\n        Input: nums = [2,3,-2,4]\n        Output: 6\n        Explanation: [2,3] has the largest product 6.\n        Example 2:\n        Input: nums = [-2,0,-1]\n        Output: 0\n        Explanation: The result cannot be 2, because [-2,-1] is not a subarray.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        result = max(nums)\n        if result == 0:\n            return result"
    },
    {
        "number": 152,
        "title": "Maximum Product Subarray",
        "difficulty": 1,
        "prompt": "class Solution:\n    def maxProduct(self, nums: List[int]) -> int:\n        \"\"\"\n        Given an integer array nums, find a subarray that has the largest product, and return the product.\n        The test cases are generated so that the answer will fit in a 32-bit integer.\n        Example 1:\n        Input: nums = [2,3,-2,4]\n        Output: 6\n        Explanation: [2,3] has the largest product 6.\n        Example 2:\n        Input: nums = [-2,0,-1]\n        Output: 0\n        Explanation: The result cannot be 2, because [-2,-1] is not a subarray.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 3,
        "answer": "        # \u5206\u6790: \u6211\u4eec\u628a\u6bcf\u4e00\u4e2a\u70b9\u505a\u4e3a\u4e00\u4e2a\u5b50\u6570\u7ec4\uff0c\u9009\u62e9\u6700\u5927\u6216\u8005\u6700\u5c0f\u7684\u4e58\u79ef\u7684\u4e00\u4e2a\u6570\u5b57\uff0c\u7136\u540e\u6bd4\u8f83\n        # \u6700\u5c0f\u7684\u6570\u5b57\u662f\u4e3a\u4e86\u9632\u6b62\u6389\u4e3a0\uff0c\u6700\u5927\u7684\u6570\u5b57\u662f\u4e3a\u4e86\u6392\u9664\u591a\u4f59\u7684\u9879\n        # \u53ef\u4ee5\u628a\u7ed3\u679c\u5206\u522b\u6392\u9664\u5230\u4ed6\u81ea\u5df1\u6216\u8005\u4e0d\u8d85\u8fc7\u81ea\u5df1\u7684\u60c5\u51b5\u4e0b\uff0c\u8fd4\u56de\u6700\u5927\u7684\u503c\n        # \u540c\u65f6\u6211\u4eec\u8981\u6ce8\u610f\uff0c\u6392\u96640\u540e\u7684\u60c5\u51b5\u4e5f\u53ef\u80fd\u4e0d\u6b62\u4e00\u79cd\uff0c\u5982\uff1a\u4e3a1\uff0c\u6700\u5927\u503c\u4e3a0\uff0c\u6216\u8005\u4e3a1\uff0c\u6700\u5927\ufffd"
    },
    {
        "number": 152,
        "title": "Maximum Product Subarray",
        "difficulty": 1,
        "prompt": "class Solution:\n    def maxProduct(self, nums: List[int]) -> int:\n        \"\"\"\n        Given an integer array nums, find a subarray that has the largest product, and return the product.\n        The test cases are generated so that the answer will fit in a 32-bit integer.\n        Example 1:\n        Input: nums = [2,3,-2,4]\n        Output: 6\n        Explanation: [2,3] has the largest product 6.\n        Example 2:\n        Input: nums = [-2,0,-1]\n        Output: 0\n        Explanation: The result cannot be 2, because [-2,-1] is not a subarray.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 4,
        "answer": "        # from local to global\n        global_max = nums[0]\n        global_min = nums[0]\n        local_max = nums[0]\n        local_min = nums[0]\n        for i in range(1, len(nums)):\n            local_max = max(nums[i], local_max*nums[i], local_min*nums[i])\n            local_min = min(nums[i], local_max*nums[i], local_min*nums[i])\n            global_max = max(global_max, local_max)\n            global_min = min(global_min, local_min)\n        return global_max"
    },
    {
        "number": 152,
        "title": "Maximum Product Subarray",
        "difficulty": 1,
        "prompt": "class Solution:\n    def maxProduct(self, nums: List[int]) -> int:\n        \"\"\"\n        Given an integer array nums, find a subarray that has the largest product, and return the product.\n        The test cases are generated so that the answer will fit in a 32-bit integer.\n        Example 1:\n        Input: nums = [2,3,-2,4]\n        Output: 6\n        Explanation: [2,3] has the largest product 6.\n        Example 2:\n        Input: nums = [-2,0,-1]\n        Output: 0\n        Explanation: The result cannot be 2, because [-2,-1] is not a subarray.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 5,
        "answer": "        if not nums:\n            return 0"
    },
    {
        "number": 153,
        "title": "Find Minimum in Rotated Sorted Array",
        "difficulty": 1,
        "prompt": "class Solution:\n    def findMin(self, nums: List[int]) -> int:\n        \"\"\"\n        Suppose an array of length n sorted in ascending order is rotated between 1 and n times. For example, the array nums = [0,1,2,4,5,6,7] might become:\n            [4,5,6,7,0,1,2] if it was rotated 4 times.\n            [0,1,2,4,5,6,7] if it was rotated 7 times.\n        Notice that rotating an array [a[0], a[1], a[2],..., a[n-1]] 1 time results in the array [a[n-1], a[0], a[1], a[2],..., a[n-2]].\n        Given the sorted rotated array nums of unique elements, return the minimum element of this array.\n        You must write an algorithm that runs in O(log n) time.\n        Example 1:\n        Input: nums = [3,4,5,1,2]\n        Output: 1\n        Explanation: The original array was [1,2,3,4,5] rotated 3 times.\n        Example 2:\n        Input: nums = [4,5,6,7,0,1,2]\n        Output: 0\n        Explanation: The original array was [0,1,2,4,5,6,7] and it was rotated 4 times.\n        Example 3:\n        Input: nums = [11,13,15,17]\n        Output: 11\n        Explanation: The original array was [11,13,15,17] and it was rotated 4 times. \n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        start, end = 0, len(nums) - 1\n        while start <= end:\n            # midpoint = (start + end) // 2\n            midpoint = (start + end) >> 1\n            if nums[midpoint] > nums[end]:\n                start = midpoint + 1\n            elif nums[midpoint] < nums[end]:\n                end = midpoint\n            else:\n                end -= 1\n        return nums[start]"
    },
    {
        "number": 153,
        "title": "Find Minimum in Rotated Sorted Array",
        "difficulty": 1,
        "prompt": "class Solution:\n    def findMin(self, nums: List[int]) -> int:\n        \"\"\"\n        Suppose an array of length n sorted in ascending order is rotated between 1 and n times. For example, the array nums = [0,1,2,4,5,6,7] might become:\n            [4,5,6,7,0,1,2] if it was rotated 4 times.\n            [0,1,2,4,5,6,7] if it was rotated 7 times.\n        Notice that rotating an array [a[0], a[1], a[2],..., a[n-1]] 1 time results in the array [a[n-1], a[0], a[1], a[2],..., a[n-2]].\n        Given the sorted rotated array nums of unique elements, return the minimum element of this array.\n        You must write an algorithm that runs in O(log n) time.\n        Example 1:\n        Input: nums = [3,4,5,1,2]\n        Output: 1\n        Explanation: The original array was [1,2,3,4,5] rotated 3 times.\n        Example 2:\n        Input: nums = [4,5,6,7,0,1,2]\n        Output: 0\n        Explanation: The original array was [0,1,2,4,5,6,7] and it was rotated 4 times.\n        Example 3:\n        Input: nums = [11,13,15,17]\n        Output: 11\n        Explanation: The original array was [11,13,15,17] and it was rotated 4 times. \n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        \n        l, r = 0, len(nums) - 1\n        while l < r:\n            m = (l + r) // 2\n            if nums[m] < nums[r]:\n                r = m\n            elif nums[m] > nums[r]:\n                l = m + 1\n            else:\n                r -= 1\n        return nums[l]"
    },
    {
        "number": 153,
        "title": "Find Minimum in Rotated Sorted Array",
        "difficulty": 1,
        "prompt": "class Solution:\n    def findMin(self, nums: List[int]) -> int:\n        \"\"\"\n        Suppose an array of length n sorted in ascending order is rotated between 1 and n times. For example, the array nums = [0,1,2,4,5,6,7] might become:\n            [4,5,6,7,0,1,2] if it was rotated 4 times.\n            [0,1,2,4,5,6,7] if it was rotated 7 times.\n        Notice that rotating an array [a[0], a[1], a[2],..., a[n-1]] 1 time results in the array [a[n-1], a[0], a[1], a[2],..., a[n-2]].\n        Given the sorted rotated array nums of unique elements, return the minimum element of this array.\n        You must write an algorithm that runs in O(log n) time.\n        Example 1:\n        Input: nums = [3,4,5,1,2]\n        Output: 1\n        Explanation: The original array was [1,2,3,4,5] rotated 3 times.\n        Example 2:\n        Input: nums = [4,5,6,7,0,1,2]\n        Output: 0\n        Explanation: The original array was [0,1,2,4,5,6,7] and it was rotated 4 times.\n        Example 3:\n        Input: nums = [11,13,15,17]\n        Output: 11\n        Explanation: The original array was [11,13,15,17] and it was rotated 4 times. \n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 3,
        "answer": "        start = 0\n        end = len(nums) - 1"
    },
    {
        "number": 153,
        "title": "Find Minimum in Rotated Sorted Array",
        "difficulty": 1,
        "prompt": "class Solution:\n    def findMin(self, nums: List[int]) -> int:\n        \"\"\"\n        Suppose an array of length n sorted in ascending order is rotated between 1 and n times. For example, the array nums = [0,1,2,4,5,6,7] might become:\n            [4,5,6,7,0,1,2] if it was rotated 4 times.\n            [0,1,2,4,5,6,7] if it was rotated 7 times.\n        Notice that rotating an array [a[0], a[1], a[2],..., a[n-1]] 1 time results in the array [a[n-1], a[0], a[1], a[2],..., a[n-2]].\n        Given the sorted rotated array nums of unique elements, return the minimum element of this array.\n        You must write an algorithm that runs in O(log n) time.\n        Example 1:\n        Input: nums = [3,4,5,1,2]\n        Output: 1\n        Explanation: The original array was [1,2,3,4,5] rotated 3 times.\n        Example 2:\n        Input: nums = [4,5,6,7,0,1,2]\n        Output: 0\n        Explanation: The original array was [0,1,2,4,5,6,7] and it was rotated 4 times.\n        Example 3:\n        Input: nums = [11,13,15,17]\n        Output: 11\n        Explanation: The original array was [11,13,15,17] and it was rotated 4 times. \n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 4,
        "answer": "        if len(nums) == 1:\n            return nums[0]\n        \n        start, end = 0, len(nums)-1\n        while start <= end:\n            if nums[start] <= nums[end]:\n                return nums[start]\n            mid = (start + end) // 2\n            if nums[mid] > nums[start]:\n                start = mid + 1\n            elif nums[mid] < nums[end]:\n                end = mid\n        return nums[end]\n<|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>"
    },
    {
        "number": 153,
        "title": "Find Minimum in Rotated Sorted Array",
        "difficulty": 1,
        "prompt": "class Solution:\n    def findMin(self, nums: List[int]) -> int:\n        \"\"\"\n        Suppose an array of length n sorted in ascending order is rotated between 1 and n times. For example, the array nums = [0,1,2,4,5,6,7] might become:\n            [4,5,6,7,0,1,2] if it was rotated 4 times.\n            [0,1,2,4,5,6,7] if it was rotated 7 times.\n        Notice that rotating an array [a[0], a[1], a[2],..., a[n-1]] 1 time results in the array [a[n-1], a[0], a[1], a[2],..., a[n-2]].\n        Given the sorted rotated array nums of unique elements, return the minimum element of this array.\n        You must write an algorithm that runs in O(log n) time.\n        Example 1:\n        Input: nums = [3,4,5,1,2]\n        Output: 1\n        Explanation: The original array was [1,2,3,4,5] rotated 3 times.\n        Example 2:\n        Input: nums = [4,5,6,7,0,1,2]\n        Output: 0\n        Explanation: The original array was [0,1,2,4,5,6,7] and it was rotated 4 times.\n        Example 3:\n        Input: nums = [11,13,15,17]\n        Output: 11\n        Explanation: The original array was [11,13,15,17] and it was rotated 4 times. \n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 5,
        "answer": "        return self.iteration(nums)\n    \n    def solution1(self, nums: List[int]) -> int:\n        \"\"\"\n        Constant time solution, but O(n) in worst case.\n        \"\"\"\n        if len(nums) == 1:\n            return nums[0]\n        if len(nums) == 2:\n            return min(nums)\n        \n        lo = 0\n        hi = len(nums)-1\n        \n        while lo < hi:\n            if nums[hi] < nums[lo]:\n                return nums[lo]\n            if nums[lo] == nums[hi]:\n                break\n            \n            mid = lo + (hi - lo) // 2\n            \n            if nums[mid] > nums[hi]:\n                lo = mid + 1\n            elif nums[mid] < nums[hi]:\n                hi = mid\n            else:\n                break\n        return nums[lo]\n        \n    def solution2(self, nums: List[int]) -> int:\n        \"\"\"\n        Constant time solution.\n        \"\"\"\n        lo = 0\n        hi = len(nums)-1\n        while lo < hi:\n            mid = lo + (hi - lo) // 2\n            if num"
    },
    {
        "number": 154,
        "title": "Find Minimum in Rotated Sorted Array II",
        "difficulty": 2,
        "prompt": "class Solution:\n    def findMin(self, nums: List[int]) -> int:\n        \"\"\"\n        Suppose an array of length n sorted in ascending order is rotated between 1 and n times. For example, the array nums = [0,1,4,4,5,6,7] might become:\n            [4,5,6,7,0,1,4] if it was rotated 4 times.\n            [0,1,4,4,5,6,7] if it was rotated 7 times.\n        Notice that rotating an array [a[0], a[1], a[2],..., a[n-1]] 1 time results in the array [a[n-1], a[0], a[1], a[2],..., a[n-2]].\n        Given the sorted rotated array nums that may contain duplicates, return the minimum element of this array.\n        You must decrease the overall operation steps as much as possible.\n        Example 1:\n        Input: nums = [1,3,5]\n        Output: 1\n        Example 2:\n        Input: nums = [2,2,2,0,1]\n        Output: 0\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        if len(nums) == 1:\n            return nums[0]\n        lo, hi = 0, len(nums) - 1\n        while lo < hi:\n            mid = lo + (hi - lo) // 2\n            # mid \u524d\u9762\u662f\u4e0d\u662f\u6709\u91cd\u590d\n            if nums[mid] > nums[hi]:\n                lo = mid + 1\n            elif nums[mid] < nums[hi]:\n                hi = mid\n            else:\n                hi -= 1\n        return nums[lo]"
    },
    {
        "number": 154,
        "title": "Find Minimum in Rotated Sorted Array II",
        "difficulty": 2,
        "prompt": "class Solution:\n    def findMin(self, nums: List[int]) -> int:\n        \"\"\"\n        Suppose an array of length n sorted in ascending order is rotated between 1 and n times. For example, the array nums = [0,1,4,4,5,6,7] might become:\n            [4,5,6,7,0,1,4] if it was rotated 4 times.\n            [0,1,4,4,5,6,7] if it was rotated 7 times.\n        Notice that rotating an array [a[0], a[1], a[2],..., a[n-1]] 1 time results in the array [a[n-1], a[0], a[1], a[2],..., a[n-2]].\n        Given the sorted rotated array nums that may contain duplicates, return the minimum element of this array.\n        You must decrease the overall operation steps as much as possible.\n        Example 1:\n        Input: nums = [1,3,5]\n        Output: 1\n        Example 2:\n        Input: nums = [2,2,2,0,1]\n        Output: 0\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        if not nums:\n            return 0"
    },
    {
        "number": 154,
        "title": "Find Minimum in Rotated Sorted Array II",
        "difficulty": 2,
        "prompt": "class Solution:\n    def findMin(self, nums: List[int]) -> int:\n        \"\"\"\n        Suppose an array of length n sorted in ascending order is rotated between 1 and n times. For example, the array nums = [0,1,4,4,5,6,7] might become:\n            [4,5,6,7,0,1,4] if it was rotated 4 times.\n            [0,1,4,4,5,6,7] if it was rotated 7 times.\n        Notice that rotating an array [a[0], a[1], a[2],..., a[n-1]] 1 time results in the array [a[n-1], a[0], a[1], a[2],..., a[n-2]].\n        Given the sorted rotated array nums that may contain duplicates, return the minimum element of this array.\n        You must decrease the overall operation steps as much as possible.\n        Example 1:\n        Input: nums = [1,3,5]\n        Output: 1\n        Example 2:\n        Input: nums = [2,2,2,0,1]\n        Output: 0\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 3,
        "answer": "        if not nums:\n            return None\n        start = 0\n        end = len(nums) - 1\n        while start < end:\n            mid = (start + end) // 2\n            if nums[mid] == nums[end]:\n                end -= 1\n            elif nums[mid] < nums[end]:\n                end = mid\n            else:\n                start = mid + 1\n        return nums[start]"
    },
    {
        "number": 154,
        "title": "Find Minimum in Rotated Sorted Array II",
        "difficulty": 2,
        "prompt": "class Solution:\n    def findMin(self, nums: List[int]) -> int:\n        \"\"\"\n        Suppose an array of length n sorted in ascending order is rotated between 1 and n times. For example, the array nums = [0,1,4,4,5,6,7] might become:\n            [4,5,6,7,0,1,4] if it was rotated 4 times.\n            [0,1,4,4,5,6,7] if it was rotated 7 times.\n        Notice that rotating an array [a[0], a[1], a[2],..., a[n-1]] 1 time results in the array [a[n-1], a[0], a[1], a[2],..., a[n-2]].\n        Given the sorted rotated array nums that may contain duplicates, return the minimum element of this array.\n        You must decrease the overall operation steps as much as possible.\n        Example 1:\n        Input: nums = [1,3,5]\n        Output: 1\n        Example 2:\n        Input: nums = [2,2,2,0,1]\n        Output: 0\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 4,
        "answer": "        if len(nums) == 0:\n            return -1\n        \n        left = 0\n        right = len(nums)-1\n        while left < right:\n            mid = (left+right)//2\n            if nums[mid] > nums[right]:\n                left = mid+1\n            elif nums[mid] < nums[right]:\n                right = mid\n            else:\n                right -= 1\n        return nums[left]"
    },
    {
        "number": 154,
        "title": "Find Minimum in Rotated Sorted Array II",
        "difficulty": 2,
        "prompt": "class Solution:\n    def findMin(self, nums: List[int]) -> int:\n        \"\"\"\n        Suppose an array of length n sorted in ascending order is rotated between 1 and n times. For example, the array nums = [0,1,4,4,5,6,7] might become:\n            [4,5,6,7,0,1,4] if it was rotated 4 times.\n            [0,1,4,4,5,6,7] if it was rotated 7 times.\n        Notice that rotating an array [a[0], a[1], a[2],..., a[n-1]] 1 time results in the array [a[n-1], a[0], a[1], a[2],..., a[n-2]].\n        Given the sorted rotated array nums that may contain duplicates, return the minimum element of this array.\n        You must decrease the overall operation steps as much as possible.\n        Example 1:\n        Input: nums = [1,3,5]\n        Output: 1\n        Example 2:\n        Input: nums = [2,2,2,0,1]\n        Output: 0\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 5,
        "answer": "        if len(nums) == 1:\n            return nums[0]"
    },
    {
        "number": 155,
        "title": "Min Stack",
        "difficulty": 1,
        "prompt": "class MinStack:\n    def __init__(self):\n    def push(self, val: int) -> None:\n    def pop(self) -> None:\n    def top(self) -> int:\n    def getMin(self) -> int:\n        \"\"\"\n        Design a stack that supports push, pop, top, and retrieving the minimum element in constant time.\n        Implement the MinStack class:\n            MinStack() initializes the stack object.\n            void push(int val) pushes the element val onto the stack.\n            void pop() removes the element on the top of the stack.\n            int top() gets the top element of the stack.\n            int getMin() retrieves the minimum element in the stack.\n        You must implement a solution with O(1) time complexity for each function.\n        Example 1:\n        Input\n        [\"MinStack\",\"push\",\"push\",\"push\",\"getMin\",\"pop\",\"top\",\"getMin\"]\n        [[],[-2],[0],[-3],[],[],[],[]]\n        Output\n        [null,null,null,null,-3,null,0,-2]\n        Explanation\n        MinStack minStack = new MinStack();\n        minStack.push(-2);\n        minStack.push(0);\n        minStack.push(-3);\n        minStack.getMin(); // return -3\n        minStack.pop();\n        minStack.top();    // return 0\n        minStack.getMin(); // return -2\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    def __init__(self):\n    def push(self, val: int) -> None:\n    def pop(self) -> None:\n    def top(self) -> int:\n    def getMin(self) -> int:"
    },
    {
        "number": 155,
        "title": "Min Stack",
        "difficulty": 1,
        "prompt": "class MinStack:\n    def __init__(self):\n    def push(self, val: int) -> None:\n    def pop(self) -> None:\n    def top(self) -> int:\n    def getMin(self) -> int:\n        \"\"\"\n        Design a stack that supports push, pop, top, and retrieving the minimum element in constant time.\n        Implement the MinStack class:\n            MinStack() initializes the stack object.\n            void push(int val) pushes the element val onto the stack.\n            void pop() removes the element on the top of the stack.\n            int top() gets the top element of the stack.\n            int getMin() retrieves the minimum element in the stack.\n        You must implement a solution with O(1) time complexity for each function.\n        Example 1:\n        Input\n        [\"MinStack\",\"push\",\"push\",\"push\",\"getMin\",\"pop\",\"top\",\"getMin\"]\n        [[],[-2],[0],[-3],[],[],[],[]]\n        Output\n        [null,null,null,null,-3,null,0,-2]\n        Explanation\n        MinStack minStack = new MinStack();\n        minStack.push(-2);\n        minStack.push(0);\n        minStack.push(-3);\n        minStack.getMin(); // return -3\n        minStack.pop();\n        minStack.top();    // return 0\n        minStack.getMin(); // return -2\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        self.stack = []\n        self.min = val"
    },
    {
        "number": 155,
        "title": "Min Stack",
        "difficulty": 1,
        "prompt": "class MinStack:\n    def __init__(self):\n    def push(self, val: int) -> None:\n    def pop(self) -> None:\n    def top(self) -> int:\n    def getMin(self) -> int:\n        \"\"\"\n        Design a stack that supports push, pop, top, and retrieving the minimum element in constant time.\n        Implement the MinStack class:\n            MinStack() initializes the stack object.\n            void push(int val) pushes the element val onto the stack.\n            void pop() removes the element on the top of the stack.\n            int top() gets the top element of the stack.\n            int getMin() retrieves the minimum element in the stack.\n        You must implement a solution with O(1) time complexity for each function.\n        Example 1:\n        Input\n        [\"MinStack\",\"push\",\"push\",\"push\",\"getMin\",\"pop\",\"top\",\"getMin\"]\n        [[],[-2],[0],[-3],[],[],[],[]]\n        Output\n        [null,null,null,null,-3,null,0,-2]\n        Explanation\n        MinStack minStack = new MinStack();\n        minStack.push(-2);\n        minStack.push(0);\n        minStack.push(-3);\n        minStack.getMin(); // return -3\n        minStack.pop();\n        minStack.top();    // return 0\n        minStack.getMin(); // return -2\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 3,
        "answer": "        self.stack = []\n        self.min_stack = []"
    },
    {
        "number": 155,
        "title": "Min Stack",
        "difficulty": 1,
        "prompt": "class MinStack:\n    def __init__(self):\n    def push(self, val: int) -> None:\n    def pop(self) -> None:\n    def top(self) -> int:\n    def getMin(self) -> int:\n        \"\"\"\n        Design a stack that supports push, pop, top, and retrieving the minimum element in constant time.\n        Implement the MinStack class:\n            MinStack() initializes the stack object.\n            void push(int val) pushes the element val onto the stack.\n            void pop() removes the element on the top of the stack.\n            int top() gets the top element of the stack.\n            int getMin() retrieves the minimum element in the stack.\n        You must implement a solution with O(1) time complexity for each function.\n        Example 1:\n        Input\n        [\"MinStack\",\"push\",\"push\",\"push\",\"getMin\",\"pop\",\"top\",\"getMin\"]\n        [[],[-2],[0],[-3],[],[],[],[]]\n        Output\n        [null,null,null,null,-3,null,0,-2]\n        Explanation\n        MinStack minStack = new MinStack();\n        minStack.push(-2);\n        minStack.push(0);\n        minStack.push(-3);\n        minStack.getMin(); // return -3\n        minStack.pop();\n        minStack.top();    // return 0\n        minStack.getMin(); // return -2\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 4,
        "answer": "        pass"
    },
    {
        "number": 155,
        "title": "Min Stack",
        "difficulty": 1,
        "prompt": "class MinStack:\n    def __init__(self):\n    def push(self, val: int) -> None:\n    def pop(self) -> None:\n    def top(self) -> int:\n    def getMin(self) -> int:\n        \"\"\"\n        Design a stack that supports push, pop, top, and retrieving the minimum element in constant time.\n        Implement the MinStack class:\n            MinStack() initializes the stack object.\n            void push(int val) pushes the element val onto the stack.\n            void pop() removes the element on the top of the stack.\n            int top() gets the top element of the stack.\n            int getMin() retrieves the minimum element in the stack.\n        You must implement a solution with O(1) time complexity for each function.\n        Example 1:\n        Input\n        [\"MinStack\",\"push\",\"push\",\"push\",\"getMin\",\"pop\",\"top\",\"getMin\"]\n        [[],[-2],[0],[-3],[],[],[],[]]\n        Output\n        [null,null,null,null,-3,null,0,-2]\n        Explanation\n        MinStack minStack = new MinStack();\n        minStack.push(-2);\n        minStack.push(0);\n        minStack.push(-3);\n        minStack.getMin(); // return -3\n        minStack.pop();\n        minStack.top();    // return 0\n        minStack.getMin(); // return -2\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 5,
        "answer": "        \n        \n        \n    def __init__(self):\n        self.stack = []\n    def push(self, val):\n        if not self.stack:\n            self.stack.append((val,val))\n        else:\n            self.stack.append((val,min(val,self.stack[-1][1])))\n    def pop(self):\n        if self.stack:\n            self.stack.pop()\n    def top(self):\n        if self.stack:\n            return self.stack[-1][0]\n        else:\n            return None\n    def getMin(self):\n        if self.stack:\n            return self.stack[-1][1]\n        else:\n            return None\n        \"\"\"\n        Design a stack that supports push, pop, top, and retrieving the minimum element in constant time.\n        Implement the MinStack class:\n            MinStack() initializes the stack object.\n            void push(int val) pushes the element val onto the stack.\n            void pop() removes the element on the top of the stack.\n            int top() gets the top element of the stack.\n            int getMin() retrieves the minimum element in the stack.\n        Example 1:\n        Input\n        [\"MinStack\",\"push\",\"push\",\"push\",\"getMin\",\"pop\",\"top\",\""
    }
]