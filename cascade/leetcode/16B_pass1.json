[
    {
        "number": 1,
        "title": "Two Sum",
        "difficulty": 0,
        "prompt": "class Solution:\n    def twoSum(self, nums: List[int], target: int) -> List[int]:\n        \"\"\"\n        Given an array of integers nums and an integer target, return indices of the two numbers such that they add up to target.\n        You may assume that each input would have exactly one solution, and you may not use the same element twice.\n        You can return the answer in any order.\n        Example 1:\n        Input: nums = [2,7,11,15], target = 9\n        Output: [0,1]\n        Explanation: Because nums[0] + nums[1] == 9, we return [0, 1].\n        Example 2:\n        Input: nums = [3,2,4], target = 6\n        Output: [1,2]\n        Example 3:\n        Input: nums = [3,3], target = 6\n        Output: [0,1]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        # Brute force\n        # for i in range(len(nums)):\n        #     for j in range(i+1, len(nums)):\n        #         if nums[i] + nums[j] == target:\n        #             return [i, j]\n        # Time: O(n^2)\n        # Space: O(1)\n        \n        # Hash table\n        # Time: O(n)\n        # Space: O(n)\n        \n        # Two-pass hash table\n        # Time: O(n)\n        # Space: O(n)\n        \n        # One-pass hash table\n        # Time: O(n)\n        # Space: O(n)\n        \n        # Two-pointer\n        # Time: O(n)\n        # Space: O(1)\n        \n        # Two-pointer\n        # Time: O(n)\n        # Space: O(1)\n        \n        # Two-pointer\n        # Time: O(n)\n        # Space: O(1)\n        \n        # Two-pointer\n        # Time: O(n)\n        # Space: O(1)\n        \n        # Two-pointer\n        # Time: O(n)\n        # Space: O(1)\n        "
    },
    {
        "number": 2,
        "title": "Add Two Numbers",
        "difficulty": 1,
        "prompt": "class Solution:\n    def addTwoNumbers(self, l1: Optional[ListNode], l2: Optional[ListNode]) -> Optional[ListNode]:\n        \"\"\"\n        You are given two non-empty linked lists representing two non-negative integers. The digits are stored in reverse order, and each of their nodes contains a single digit. Add the two numbers and return the sum as a linked list.\n        You may assume the two numbers do not contain any leading zero, except the number 0 itself.\n        Example 1:\n        Input: l1 = [2,4,3], l2 = [5,6,4]\n        Output: [7,0,8]\n        Explanation: 342 + 465 = 807.\n        Example 2:\n        Input: l1 = [0], l2 = [0]\n        Output: [0]\n        Example 3:\n        Input: l1 = [9,9,9,9,9,9,9], l2 = [9,9,9,9]\n        Output: [8,9,9,9,0,0,0,1]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        # Solution 1:\n        # Time: O(n), n is the length of the longest list\n        # Space: O(n), n is the length of the longest list\n        # l1_str = \"\"\n        # l2_str = \"\"\n        # while l1:\n        #     l1_str += str(l1.val)\n        #     l1 = l1.next\n        # while l2:\n        #     l2_str += str(l2.val)\n        #     l2 = l2.next\n        # l1_str = l1_str[::-1]\n        # l2_str = l2_str[::-1]\n        # sum_str = str(int(l1_str) + int(l2_str))\n        # sum_str = sum_str[::-1]\n        # sum_list = [int(i) for i in sum_str]\n        # sum_list = sum_list[::-1]\n        # head = ListNode(sum_list[0])\n        # cur = head\n        # for i in range(1, len(sum_list)):\n        #     cur.next = ListNode(sum_list[i])\n        #     cur = cur.next\n        # return head"
    },
    {
        "number": 3,
        "title": "Longest Substring Without Repeating Characters",
        "difficulty": 1,
        "prompt": "class Solution:\n    def lengthOfLongestSubstring(self, s: str) -> int:\n        \"\"\"\n        Given a string s, find the length of the longest substring without repeating characters.\n        Example 1:\n        Input: s = \"abcabcbb\"\n        Output: 3\n        Explanation: The answer is \"abc\", with the length of 3.\n        Example 2:\n        Input: s = \"bbbbb\"\n        Output: 1\n        Explanation: The answer is \"b\", with the length of 1.\n        Example 3:\n        Input: s = \"pwwkew\"\n        Output: 3\n        Explanation: The answer is \"wke\", with the length of 3.\n        Notice that the answer must be a substring, \"pwke\" is a subsequence and not a substring.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        # \u54c8\u5e0c\u96c6\u5408\uff0c\u8bb0\u5f55\u6bcf\u4e2a\u5b57\u7b26\u662f\u5426\u51fa\u73b0\u8fc7\n        occ = set()\n        n = len(s)\n        # \u53f3\u6307\u9488\uff0c\u521d\u59cb\u503c\u4e3a -1\uff0c\u76f8\u5f53\u4e8e\u6211\u4eec\u5728\u5b57\u7b26\u4e32\u7684\u5de6\u8fb9\u754c\u7684\u5de6\u4fa7\uff0c\u8fd8\u6ca1\u6709\u5f00\u59cb\u79fb\u52a8\n        rk, ans = -1, 0\n        for i in range(n):\n            if i!= 0:\n                # \u5de6\u6307\u9488\u5411\u53f3\u79fb\u52a8\u4e00\u683c\uff0c\u79fb\u9664\u4e00\u4e2a\u5b57\u7b26\n                occ.remove(s[i - 1])\n            while rk + 1 < n and s[rk + 1] not in occ:\n                # \u4e0d\u65ad\u5730\u79fb\u52a8\u53f3\u6307\u9488\n                occ.add(s[rk + 1])\n                rk += 1\n            # \u7b2c i \u5230 rk \u4e2a\u5b57\u7b26\u662f\u4e00\u4e2a"
    },
    {
        "number": 4,
        "title": "Median of Two Sorted Arrays",
        "difficulty": 2,
        "prompt": "class Solution:\n    def findMedianSortedArrays(self, nums1: List[int], nums2: List[int]) -> float:\n        \"\"\"\n        Given two sorted arrays nums1 and nums2 of size m and n respectively, return the median of the two sorted arrays.\n        The overall run time complexity should be O(log (m+n)).\n        Example 1:\n        Input: nums1 = [1,3], nums2 = [2]\n        Output: 2.00000\n        Explanation: merged array = [1,2,3] and median is 2.\n        Example 2:\n        Input: nums1 = [1,2], nums2 = [3,4]\n        Output: 2.50000\n        Explanation: merged array = [1,2,3,4] and median is (2 + 3) / 2 = 2.5.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        # \u5148\u628anums1\u548cnums2\u6392\u5e8f\n        nums1.sort()\n        nums2.sort()\n        # \u5982\u679cnums1\u548cnums2\u7684\u957f\u5ea6\u76f8\u7b49\uff0c\u90a3\u4e48\u5c31\u76f4\u63a5\u8fd4\u56de(nums1+nums2)/2\n        if len(nums1) == len(nums2):\n            return (nums1 + nums2) / 2\n        # \u5982\u679cnums1\u548cnums2\u7684\u957f\u5ea6\u4e0d\u76f8\u7b49\uff0c\u90a3\u4e48\u5c31\u628anums1\u548cnums2\u7684\u957f\u5ea6\u76f8\u52a0\uff0c\u518d\u9664\u4ee52\n        else:\n            return (len(nums1) + len(nums2)) / 2"
    },
    {
        "number": 5,
        "title": "Longest Palindromic Substring",
        "difficulty": 1,
        "prompt": "class Solution:\n    def longestPalindrome(self, s: str) -> str:\n        \"\"\"\n        Given a string s, return the longest palindromic substring in s.\n        Example 1:\n        Input: s = \"babad\"\n        Output: \"bab\"\n        Explanation: \"aba\" is also a valid answer.\n        Example 2:\n        Input: s = \"cbbd\"\n        Output: \"bb\"\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        if len(s) == 0:\n            return \"\"\n        elif len(s) == 1:\n            return s\n        else:\n            max_len = 1\n            max_str = s[0]\n            for i in range(len(s)):\n                for j in range(i+1, len(s)+1):\n                    if s[i:j] == s[i:j][::-1]:\n                        if j - i > max_len:\n                            max_len = j - i\n                            max_str = s[i:j]\n            return max_str"
    },
    {
        "number": 6,
        "title": "Zigzag Conversion",
        "difficulty": 1,
        "prompt": "class Solution:\n    def convert(self, s: str, numRows: int) -> str:\n        \"\"\"\n        The string \"PAYPALISHIRING\" is written in a zigzag pattern on a given number of rows like this: (you may want to display this pattern in a fixed font for better legibility)\n        P   A   H   N\n        A P L S I I G\n        Y   I   R\n        And then read line by line: \"PAHNAPLSIIGYIR\"\n        Write the code that will take a string and make this conversion given a number of rows:\n        string convert(string s, int numRows);\n        Example 1:\n        Input: s = \"PAYPALISHIRING\", numRows = 3\n        Output: \"PAHNAPLSIIGYIR\"\n        Example 2:\n        Input: s = \"PAYPALISHIRING\", numRows = 4\n        Output: \"PINALSIGYAHRPI\"\n        Explanation:\n        P     I    N\n        A   L S  I G\n        Y A   H R\n        P     I\n        Example 3:\n        Input: s = \"A\", numRows = 1\n        Output: \"A\"\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        if numRows == 1:\n            return s\n        if numRows == 2:\n            return s[::2] + s[1::2]\n        res = [''] * numRows\n        i = 0\n        flag = 1\n        for c in s:\n            res[i] += c\n            if i == 0:\n                flag = 1\n            elif i == numRows - 1:\n                flag = -1\n            i += flag\n        return ''.join(res)"
    },
    {
        "number": 7,
        "title": "Reverse Integer",
        "difficulty": 1,
        "prompt": "class Solution:\n    def reverse(self, x: int) -> int:\n        \"\"\"\n        Given a signed 32-bit integer x, return x with its digits reversed. If reversing x causes the value to go outside the signed 32-bit integer range [-231, 231 - 1], then return 0.\n        Assume the environment does not allow you to store 64-bit integers (signed or unsigned).\n        Example 1:\n        Input: x = 123\n        Output: 321\n        Example 2:\n        Input: x = -123\n        Output: -321\n        Example 3:\n        Input: x = 120\n        Output: 21\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        if x == 0:\n            return 0\n        if x > 0:\n            x = str(x)\n            x = x[::-1]\n            x = int(x)\n            if x > 2**31 - 1:\n                return 0\n            else:\n                return x\n        else:\n            x = str(x)\n            x = x[::-1]\n            x = int(x)\n            x = -x\n            if x < -2**31:\n                return 0\n            else:\n                return x"
    },
    {
        "number": 8,
        "title": "String to Integer (atoi)",
        "difficulty": 1,
        "prompt": "class Solution:\n    def myAtoi(self, s: str) -> int:\n        \"\"\"\n        Implement the myAtoi(string s) function, which converts a string to a 32-bit signed integer (similar to C/C++'s atoi function).\n        The algorithm for myAtoi(string s) is as follows:\n            Read in and ignore any leading whitespace.\n            Check if the next character (if not already at the end of the string) is '-' or '+'. Read this character in if it is either. This determines if the final result is negative or positive respectively. Assume the result is positive if neither is present.\n            Read in next the characters until the next non-digit character or the end of the input is reached. The rest of the string is ignored.\n            Convert these digits into an integer (i.e. \"123\" -> 123, \"0032\" -> 32). If no digits were read, then the integer is 0. Change the sign as necessary (from step 2).\n            If the integer is out of the 32-bit signed integer range [-231, 231 - 1], then clamp the integer so that it remains in the range. Specifically, integers less than -231 should be clamped to -231, and integers greater than 231 - 1 should be clamped to 231 - 1.\n            Return the integer as the final result.\n        Note:\n            Only the space character'' is considered a whitespace character.\n            Do not ignore any characters other than the leading whitespace or the rest of the string after the digits.\n        Example 1:\n        Input: s = \"42\"\n        Output: 42\n        Explanation: The underlined characters are what is read in, the caret is the current reader position.\n        Step 1: \"42\" (no characters read because there is no leading whitespace)\n                 ^\n        Step 2: \"42\" (no characters read because there is neither a '-' nor '+')\n                 ^\n        Step 3: \"42\" (\"42\" is read in)\n                   ^\n        The parsed integer is 42.\n        Since 42 is in the range [-231, 231 - 1], the final result is 42.\n        Example 2:\n        Input: s = \"   -42\"\n        Output: -42\n        Explanation:\n        Step 1: \"   -42\" (leading whitespace is read and ignored)\n                    ^\n        Step 2: \"   -42\" ('-' is read, so the result should be negative)\n                     ^\n        Step 3: \"   -42\" (\"42\" is read in)\n                       ^\n        The parsed integer is -42.\n        Since -42 is in the range [-231, 231 - 1], the final result is -42.\n        Example 3:\n        Input: s = \"4193 with words\"\n        Output: 4193\n        Explanation:\n        Step 1: \"4193 with words\" (no characters read because there is no leading whitespace)\n                 ^\n        Step 2: \"4193 with words\" (no characters read because there is neither a '-' nor '+')\n                 ^\n        Step 3: \"4193 with words\" (\"4193\" is read in; reading stops because the next character is a non-digit)\n                     ^\n        The parsed integer is 4193.\n        Since 4193 is in the range [-231, 231 - 1], the final result is 4193.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        # strip whitespace\n        s = s.lstrip()\n        # check if the first character is '-' or '+'\n        if len(s) == 0:\n            return 0\n        sign = 1\n        if s[0] == '-':\n            sign = -1\n            s = s[1:]\n        elif s[0] == '+':\n            s = s[1:]\n        # check if the first character is a digit\n        if len(s) == 0 or not s[0].isdigit():\n            return 0\n        # read in the digits\n        num = 0\n        for i in range(len(s)):\n            if not s[i].isdigit():\n                break\n            num = num * 10 + int(s[i])\n        # check if the number is in the range\n        if sign == 1 and num > 2**31 - 1:\n            return 2**31 - 1\n        elif sign == -1 and num > 2**31:\n            return -2**31\n        else:\n            return sign * num"
    },
    {
        "number": 9,
        "title": "Palindrome Number",
        "difficulty": 0,
        "prompt": "class Solution:\n    def isPalindrome(self, x: int) -> bool:\n        \"\"\"\n        Given an integer x, return true if x is a palindrome, and false otherwise.\n        Example 1:\n        Input: x = 121\n        Output: true\n        Explanation: 121 reads as 121 from left to right and from right to left.\n        Example 2:\n        Input: x = -121\n        Output: false\n        Explanation: From left to right, it reads -121. From right to left, it becomes 121-. Therefore it is not a palindrome.\n        Example 3:\n        Input: x = 10\n        Output: false\n        Explanation: Reads 01 from right to left. Therefore it is not a palindrome.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        if x < 0:\n            return False\n        elif x < 10:\n            return True\n        else:\n            return str(x) == str(x)[::-1]"
    },
    {
        "number": 10,
        "title": "Regular Expression Matching",
        "difficulty": 2,
        "prompt": "class Solution:\n    def isMatch(self, s: str, p: str) -> bool:\n        \"\"\"\n        Given an input string s and a pattern p, implement regular expression matching with support for '.' and '*' where:\n            '.' Matches any single character.\u200b\u200b\u200b\u200b\n            '*' Matches zero or more of the preceding element.\n        The matching should cover the entire input string (not partial).\n        Example 1:\n        Input: s = \"aa\", p = \"a\"\n        Output: false\n        Explanation: \"a\" does not match the entire string \"aa\".\n        Example 2:\n        Input: s = \"aa\", p = \"a*\"\n        Output: true\n        Explanation: '*' means zero or more of the preceding element, 'a'. Therefore, by repeating 'a' once, it becomes \"aa\".\n        Example 3:\n        Input: s = \"ab\", p = \".*\"\n        Output: true\n        Explanation: \".*\" means \"zero or more (*) of any character (.)\".\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        if not p:\n            return not s"
    },
    {
        "number": 11,
        "title": "Container With Most Water",
        "difficulty": 1,
        "prompt": "class Solution:\n    def maxArea(self, height: List[int]) -> int:\n        \"\"\"\n        You are given an integer array height of length n. There are n vertical lines drawn such that the two endpoints of the ith line are (i, 0) and (i, height[i]).\n        Find two lines that together with the x-axis form a container, such that the container contains the most water.\n        Return the maximum amount of water a container can store.\n        Notice that you may not slant the container.\n        Example 1:\n        Input: height = [1,8,6,2,5,4,8,3,7]\n        Output: 49\n        Explanation: The above vertical lines are represented by array [1,8,6,2,5,4,8,3,7]. In this case, the max area of water (blue section) the container can contain is 49.\n        Example 2:\n        Input: height = [1,1]\n        Output: 1\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        # two pointers\n        # O(n)\n        # O(1)\n        l, r = 0, len(height) - 1\n        max_area = 0\n        while l < r:\n            max_area = max(max_area, min(height[l], height[r]) * (r - l))\n            if height[l] < height[r]:\n                l += 1\n            else:\n                r -= 1\n        return max_area"
    },
    {
        "number": 12,
        "title": "Integer to Roman",
        "difficulty": 1,
        "prompt": "class Solution:\n    def intToRoman(self, num: int) -> str:\n        \"\"\"\n        Roman numerals are represented by seven different symbols: I, V, X, L, C, D and M.\n        Symbol       Value\n        I             1\n        V             5\n        X             10\n        L             50\n        C             100\n        D             500\n        M             1000\n        For example, 2 is written as II in Roman numeral, just two one's added together. 12 is written as XII, which is simply X + II. The number 27 is written as XXVII, which is XX + V + II.\n        Roman numerals are usually written largest to smallest from left to right. However, the numeral for four is not IIII. Instead, the number four is written as IV. Because the one is before the five we subtract it making four. The same principle applies to the number nine, which is written as IX. There are six instances where subtraction is used:\n            I can be placed before V (5) and X (10) to make 4 and 9. \n            X can be placed before L (50) and C (100) to make 40 and 90. \n            C can be placed before D (500) and M (1000) to make 400 and 900.\n        Given an integer, convert it to a roman numeral.\n        Example 1:\n        Input: num = 3\n        Output: \"III\"\n        Explanation: 3 is represented as 3 ones.\n        Example 2:\n        Input: num = 58\n        Output: \"LVIII\"\n        Explanation: L = 50, V = 5, III = 3.\n        Example 3:\n        Input: num = 1994\n        Output: \"MCMXCIV\"\n        Explanation: M = 1000, CM = 900, XC = 90 and IV = 4.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        # https://leetcode.com/problems/integer-to-roman/discuss/104499/Python-solution-with-explanation\n        # https://leetcode.com/problems/integer-to-roman/discuss/104500/Python-solution-with-explanation\n        # https://leetcode.com/problems/integer-to-roman/discuss/104501/Python-solution-with-explanation\n        # https://leetcode.com/problems/integer-to-roman/discuss/104501/Python-solution-with-explanation\n        # https://leetcode.com/problems/integer-to-roman/discuss/104501/Python-solution-with-explanation\n        # https://leetcode.com/problems/integer-to-roman/discuss/104501/Python-solution-with-explanation\n        # https://leetcode.com/problems/integer-to-roman/discuss/104501/Python-solution-with-explanation\n        # https://leetcode.com/problems/integer-to-roman/discuss/104501/Python-solution-with-explanation\n        # https://"
    },
    {
        "number": 13,
        "title": "Roman to Integer",
        "difficulty": 0,
        "prompt": "class Solution:\n    def romanToInt(self, s: str) -> int:\n        \"\"\"\n        Roman numerals are represented by seven different symbols: I, V, X, L, C, D and M.\n        Symbol       Value\n        I             1\n        V             5\n        X             10\n        L             50\n        C             100\n        D             500\n        M             1000\n        For example, 2 is written as II in Roman numeral, just two ones added together. 12 is written as XII, which is simply X + II. The number 27 is written as XXVII, which is XX + V + II.\n        Roman numerals are usually written largest to smallest from left to right. However, the numeral for four is not IIII. Instead, the number four is written as IV. Because the one is before the five we subtract it making four. The same principle applies to the number nine, which is written as IX. There are six instances where subtraction is used:\n            I can be placed before V (5) and X (10) to make 4 and 9. \n            X can be placed before L (50) and C (100) to make 40 and 90. \n            C can be placed before D (500) and M (1000) to make 400 and 900.\n        Given a roman numeral, convert it to an integer.\n        Example 1:\n        Input: s = \"III\"\n        Output: 3\n        Explanation: III = 3.\n        Example 2:\n        Input: s = \"LVIII\"\n        Output: 58\n        Explanation: L = 50, V= 5, III = 3.\n        Example 3:\n        Input: s = \"MCMXCIV\"\n        Output: 1994\n        Explanation: M = 1000, CM = 900, XC = 90 and IV = 4.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        roman_dict = {'I': 1, 'V': 5, 'X': 10, 'L': 50, 'C': 100, 'D': 500, 'M': 1000}\n        result = 0\n        for i in range(len(s)):\n            if i > 0 and roman_dict[s[i]] > roman_dict[s[i - 1]]:\n                result += roman_dict[s[i]] - 2 * roman_dict[s[i - 1]]\n            else:\n                result += roman_dict[s[i]]\n        return result"
    },
    {
        "number": 14,
        "title": "Longest Common Prefix",
        "difficulty": 0,
        "prompt": "class Solution:\n    def longestCommonPrefix(self, strs: List[str]) -> str:\n        \"\"\"\n        Write a function to find the longest common prefix string amongst an array of strings.\n        If there is no common prefix, return an empty string \"\".\n        Example 1:\n        Input: strs = [\"flower\",\"flow\",\"flight\"]\n        Output: \"fl\"\n        Example 2:\n        Input: strs = [\"dog\",\"racecar\",\"car\"]\n        Output: \"\"\n        Explanation: There is no common prefix among the input strings.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        if not strs:\n            return \"\"\n        if len(strs) == 1:\n            return strs[0]\n        strs.sort()\n        prefix = \"\"\n        for i in range(len(strs[0])):\n            if strs[0][i] == strs[-1][i]:\n                prefix += strs[0][i]\n            else:\n                break\n        return prefix\n<|endoftext|>"
    },
    {
        "number": 15,
        "title": "3Sum",
        "difficulty": 1,
        "prompt": "class Solution:\n    def threeSum(self, nums: List[int]) -> List[List[int]]:\n        \"\"\"\n        Given an integer array nums, return all the triplets [nums[i], nums[j], nums[k]] such that i!= j, i!= k, and j!= k, and nums[i] + nums[j] + nums[k] == 0.\n        Notice that the solution set must not contain duplicate triplets.\n        Example 1:\n        Input: nums = [-1,0,1,2,-1,-4]\n        Output: [[-1,-1,2],[-1,0,1]]\n        Explanation: \n        nums[0] + nums[1] + nums[2] = (-1) + 0 + 1 = 0.\n        nums[1] + nums[2] + nums[4] = 0 + 1 + (-1) = 0.\n        nums[0] + nums[3] + nums[4] = (-1) + 2 + (-1) = 0.\n        The distinct triplets are [-1,0,1] and [-1,-1,2].\n        Notice that the order of the output and the order of the triplets does not matter.\n        Example 2:\n        Input: nums = [0,1,1]\n        Output: []\n        Explanation: The only possible triplet does not sum up to 0.\n        Example 3:\n        Input: nums = [0,0,0]\n        Output: [[0,0,0]]\n        Explanation: The only possible triplet sums up to 0.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        nums.sort()\n        res = []\n        for i in range(len(nums) - 2):\n            if i > 0 and nums[i] == nums[i - 1]:\n                continue\n            l, r = i + 1, len(nums) - 1\n            while l < r:\n                s = nums[i] + nums[l] + nums[r]\n                if s < 0:\n                    l += 1\n                elif s > 0:\n                    r -= 1\n                else:\n                    res.append([nums[i], nums[l], nums[r]])\n                    while l < r and nums[l] == nums[l + 1]:\n                        l += 1\n                    while l < r and nums[r] == nums[r - 1]:\n                        r -= 1\n                    l += 1\n                    r -= 1\n        return res\n<|endoftext|>"
    },
    {
        "number": 16,
        "title": "3Sum Closest",
        "difficulty": 1,
        "prompt": "class Solution:\n    def threeSumClosest(self, nums: List[int], target: int) -> int:\n        \"\"\"\n        Given an integer array nums of length n and an integer target, find three integers in nums such that the sum is closest to target.\n        Return the sum of the three integers.\n        You may assume that each input would have exactly one solution.\n        Example 1:\n        Input: nums = [-1,2,1,-4], target = 1\n        Output: 2\n        Explanation: The sum that is closest to the target is 2. (-1 + 2 + 1 = 2).\n        Example 2:\n        Input: nums = [0,0,0], target = 1\n        Output: 0\n        Explanation: The sum that is closest to the target is 0. (0 + 0 + 0 = 0).\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        nums.sort()\n        n = len(nums)\n        res = nums[0] + nums[1] + nums[2]\n        for i in range(n - 2):\n            if i > 0 and nums[i] == nums[i - 1]:\n                continue\n            l, r = i + 1, n - 1\n            while l < r:\n                s = nums[i] + nums[l] + nums[r]\n                if s == target:\n                    return s\n                if abs(s - target) < abs(res - target):\n                    res = s\n                if s < target:\n                    l += 1\n                elif s > target:\n                    r -= 1\n        return res\n<|endoftext|>"
    },
    {
        "number": 17,
        "title": "Letter Combinations of a Phone Number",
        "difficulty": 1,
        "prompt": "class Solution:\n    def letterCombinations(self, digits: str) -> List[str]:\n        \"\"\"\n        Given a string containing digits from 2-9 inclusive, return all possible letter combinations that the number could represent. Return the answer in any order.\n        A mapping of digits to letters (just like on the telephone buttons) is given below. Note that 1 does not map to any letters.\n        Example 1:\n        Input: digits = \"23\"\n        Output: [\"ad\",\"ae\",\"af\",\"bd\",\"be\",\"bf\",\"cd\",\"ce\",\"cf\"]\n        Example 2:\n        Input: digits = \"\"\n        Output: []\n        Example 3:\n        Input: digits = \"2\"\n        Output: [\"a\",\"b\",\"c\"]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        if not digits:\n            return []\n        mapping = {\n            \"2\": \"abc\",\n            \"3\": \"def\",\n            \"4\": \"ghi\",\n            \"5\": \"jkl\",\n            \"6\": \"mno\",\n            \"7\": \"pqrs\",\n            \"8\": \"tuv\",\n            \"9\": \"wxyz\",\n        }\n        res = []\n        self.dfs(mapping, digits, \"\", res)\n        return res"
    },
    {
        "number": 18,
        "title": "4Sum",
        "difficulty": 1,
        "prompt": "class Solution:\n    def fourSum(self, nums: List[int], target: int) -> List[List[int]]:\n        \"\"\"\n        Given an array nums of n integers, return an array of all the unique quadruplets [nums[a], nums[b], nums[c], nums[d]] such that:\n            0 <= a, b, c, d < n\n            a, b, c, and d are distinct.\n            nums[a] + nums[b] + nums[c] + nums[d] == target\n        You may return the answer in any order.\n        Example 1:\n        Input: nums = [1,0,-1,0,-2,2], target = 0\n        Output: [[-2,-1,1,2],[-2,0,0,2],[-1,0,0,1]]\n        Example 2:\n        Input: nums = [2,2,2,2,2], target = 8\n        Output: [[2,2,2,2]]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        nums.sort()\n        n = len(nums)\n        res = []\n        for i in range(n - 3):\n            if i > 0 and nums[i] == nums[i - 1]:\n                continue\n            for j in range(i + 1, n - 2):\n                if j > i + 1 and nums[j] == nums[j - 1]:\n                    continue\n                left, right = j + 1, n - 1\n                while left < right:\n                    s = nums[i] + nums[j] + nums[left] + nums[right]\n                    if s == target:\n                        res.append([nums[i], nums[j], nums[left], nums[right]])\n                        while left < right and nums[left] == nums[left + 1]:\n                            left += 1\n                        while left < right and nums[right] == nums[right - 1]:\n                            right -= 1\n                        left += 1\n                        right -= 1\n                    elif s < target:\n                        left += 1\n                    else:\n                        right -= 1\n        return res\n<|endoftext|>"
    },
    {
        "number": 19,
        "title": "Remove Nth Node From End of List",
        "difficulty": 1,
        "prompt": "class Solution:\n    def removeNthFromEnd(self, head: Optional[ListNode], n: int) -> Optional[ListNode]:\n        \"\"\"\n        Given the head of a linked list, remove the nth node from the end of the list and return its head.\n        Example 1:\n        Input: head = [1,2,3,4,5], n = 2\n        Output: [1,2,3,5]\n        Example 2:\n        Input: head = [1], n = 1\n        Output: []\n        Example 3:\n        Input: head = [1,2], n = 1\n        Output: [1]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        # Find the length of the linked list\n        length = 0\n        curr = head\n        while curr:\n            length += 1\n            curr = curr.next\n        # Find the node to be removed\n        curr = head\n        if length == 1:\n            return None\n        elif length == n:\n            return head.next\n        else:\n            for _ in range(length - n - 1):\n                curr = curr.next\n            curr.next = curr.next.next\n        return head"
    },
    {
        "number": 20,
        "title": "Valid Parentheses",
        "difficulty": 0,
        "prompt": "class Solution:\n    def isValid(self, s: str) -> bool:\n        \"\"\"\n        Given a string s containing just the characters '(', ')', '{', '}', '[' and ']', determine if the input string is valid.\n        An input string is valid if:\n            Open brackets must be closed by the same type of brackets.\n            Open brackets must be closed in the correct order.\n            Every close bracket has a corresponding open bracket of the same type.\n        Example 1:\n        Input: s = \"()\"\n        Output: true\n        Example 2:\n        Input: s = \"()[]{}\"\n        Output: true\n        Example 3:\n        Input: s = \"(]\"\n        Output: false\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        stack = []\n        for c in s:\n            if c in ['(', '{', '[']:\n                stack.append(c)\n            else:\n                if not stack:\n                    return False\n                if c == ')' and stack[-1]!= '(':\n                    return False\n                if c == '}' and stack[-1]!= '{':\n                    return False\n                if c == ']' and stack[-1]!= '[':\n                    return False\n                stack.pop()\n        return not stack"
    },
    {
        "number": 21,
        "title": "Merge Two Sorted Lists",
        "difficulty": 0,
        "prompt": "class Solution:\n    def mergeTwoLists(self, list1: Optional[ListNode], list2: Optional[ListNode]) -> Optional[ListNode]:\n        \"\"\"\n        You are given the heads of two sorted linked lists list1 and list2.\n        Merge the two lists in a one sorted list. The list should be made by splicing together the nodes of the first two lists.\n        Return the head of the merged linked list.\n        Example 1:\n        Input: list1 = [1,2,4], list2 = [1,3,4]\n        Output: [1,1,2,3,4,4]\n        Example 2:\n        Input: list1 = [], list2 = []\n        Output: []\n        Example 3:\n        Input: list1 = [], list2 = [0]\n        Output: [0]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        if not list1:\n            return list2\n        if not list2:\n            return list1\n        if list1.val < list2.val:\n            list1.next = self.mergeTwoLists(list1.next, list2)\n            return list1\n        else:\n            list2.next = self.mergeTwoLists(list1, list2.next)\n            return list2\n<|endoftext|>"
    },
    {
        "number": 22,
        "title": "Generate Parentheses",
        "difficulty": 1,
        "prompt": "class Solution:\n    def generateParenthesis(self, n: int) -> List[str]:\n        \"\"\"\n        Given n pairs of parentheses, write a function to generate all combinations of well-formed parentheses.\n        Example 1:\n        Input: n = 3\n        Output: [\"((()))\",\"(()())\",\"(())()\",\"()(())\",\"()()()\"]\n        Example 2:\n        Input: n = 1\n        Output: [\"()\"]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        self.res = []\n        self.helper(n, n, \"\")\n        return self.res"
    },
    {
        "number": 23,
        "title": "Merge k Sorted Lists",
        "difficulty": 2,
        "prompt": "class Solution:\n    def mergeKLists(self, lists: List[Optional[ListNode]]) -> Optional[ListNode]:\n        \"\"\"\n        You are given an array of k linked-lists lists, each linked-list is sorted in ascending order.\n        Merge all the linked-lists into one sorted linked-list and return it.\n        Example 1:\n        Input: lists = [[1,4,5],[1,3,4],[2,6]]\n        Output: [1,1,2,3,4,4,5,6]\n        Explanation: The linked-lists are:\n        [\n          1->4->5,\n          1->3->4,\n          2->6\n        ]\n        merging them into one sorted list:\n        1->1->2->3->4->4->5->6\n        Example 2:\n        Input: lists = []\n        Output: []\n        Example 3:\n        Input: lists = [[]]\n        Output: []\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        if not lists:\n            return None\n        if len(lists) == 1:\n            return lists[0]\n        mid = len(lists) // 2\n        left = self.mergeKLists(lists[:mid])\n        right = self.mergeKLists(lists[mid:])\n        return self.merge(left, right)"
    },
    {
        "number": 24,
        "title": "Swap Nodes in Pairs",
        "difficulty": 1,
        "prompt": "class Solution:\n    def swapPairs(self, head: Optional[ListNode]) -> Optional[ListNode]:\n        \"\"\"\n        Given a linked list, swap every two adjacent nodes and return its head. You must solve the problem without modifying the values in the list's nodes (i.e., only nodes themselves may be changed.)\n        Example 1:\n        Input: head = [1,2,3,4]\n        Output: [2,1,4,3]\n        Example 2:\n        Input: head = []\n        Output: []\n        Example 3:\n        Input: head = [1]\n        Output: [1]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        if not head or not head.next:\n            return head\n        dummy = ListNode(0)\n        dummy.next = head\n        prev = dummy\n        while head and head.next:\n            first = head\n            second = head.next\n            prev.next = second\n            first.next = second.next\n            second.next = first\n            prev = first\n            head = first.next\n        return dummy.next"
    },
    {
        "number": 25,
        "title": "Reverse Nodes in k-Group",
        "difficulty": 2,
        "prompt": "class Solution:\n    def reverseKGroup(self, head: Optional[ListNode], k: int) -> Optional[ListNode]:\n        \"\"\"\n        Given the head of a linked list, reverse the nodes of the list k at a time, and return the modified list.\n        k is a positive integer and is less than or equal to the length of the linked list. If the number of nodes is not a multiple of k then left-out nodes, in the end, should remain as it is.\n        You may not alter the values in the list's nodes, only nodes themselves may be changed.\n        Example 1:\n        Input: head = [1,2,3,4,5], k = 2\n        Output: [2,1,4,3,5]\n        Example 2:\n        Input: head = [1,2,3,4,5], k = 3\n        Output: [3,2,1,4,5]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        if k == 1:\n            return head\n        \n        def reverse(head, tail):\n            prev = tail.next\n            p = head\n            while prev!= tail:\n                nex = p.next\n                p.next = prev\n                prev = p\n                p = nex\n            return tail, head\n        \n        def reverseK(head, k):\n            nex = head\n            for _ in range(k):\n                if not nex:\n                    return head\n                nex = nex.next\n            tail, head = reverse(head, nex)\n            return head\n        \n        dummy = ListNode(0)\n        dummy.next = head\n        pre = dummy\n        while head:\n            tail = pre\n            for _ in range(k):\n                tail = tail.next\n                if not tail:\n                    return dummy.next\n            head = reverseK(head, k)\n            pre.next = head\n            pre = tail\n            head = tail.next\n        return dummy.next\n<|endoftext|>"
    },
    {
        "number": 26,
        "title": "Remove Duplicates from Sorted Array",
        "difficulty": 0,
        "prompt": "class Solution:\n    def removeDuplicates(self, nums: List[int]) -> int:\n        \"\"\"\n        Given an integer array nums sorted in non-decreasing order, remove the duplicates in-place such that each unique element appears only once. The relative order of the elements should be kept the same.\n        Since it is impossible to change the length of the array in some languages, you must instead have the result be placed in the first part of the array nums. More formally, if there are k elements after removing the duplicates, then the first k elements of nums should hold the final result. It does not matter what you leave beyond the first k elements.\n        Return k after placing the final result in the first k slots of nums.\n        Do not allocate extra space for another array. You must do this by modifying the input array in-place with O(1) extra memory.\n        Custom Judge:\n        The judge will test your solution with the following code:\n        int[] nums = [...]; // Input array\n        int[] expectedNums = [...]; // The expected answer with correct length\n        int k = removeDuplicates(nums); // Calls your implementation\n        assert k == expectedNums.length;\n        for (int i = 0; i < k; i++) {\n            assert nums[i] == expectedNums[i];\n        }\n        If all assertions pass, then your solution will be accepted.\n        Example 1:\n        Input: nums = [1,1,2]\n        Output: 2, nums = [1,2,_]\n        Explanation: Your function should return k = 2, with the first two elements of nums being 1 and 2 respectively.\n        It does not matter what you leave beyond the returned k (hence they are underscores).\n        Example 2:\n        Input: nums = [0,0,1,1,1,2,2,3,3,4]\n        Output: 5, nums = [0,1,2,3,4,_,_,_,_,_]\n        Explanation: Your function should return k = 5, with the first five elements of nums being 0, 1, 2, 3, and 4 respectively.\n        It does not matter what you leave beyond the returned k (hence they are underscores).\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        if not nums:\n            return 0\n        i = 0\n        for j in range(1, len(nums)):\n            if nums[i]!= nums[j]:\n                i += 1\n                nums[i] = nums[j]\n        return i + 1"
    },
    {
        "number": 27,
        "title": "Remove Element",
        "difficulty": 0,
        "prompt": "class Solution:\n    def removeElement(self, nums: List[int], val: int) -> int:\n        \"\"\"\n        Given an integer array nums and an integer val, remove all occurrences of val in nums in-place. The relative order of the elements may be changed.\n        Since it is impossible to change the length of the array in some languages, you must instead have the result be placed in the first part of the array nums. More formally, if there are k elements after removing the duplicates, then the first k elements of nums should hold the final result. It does not matter what you leave beyond the first k elements.\n        Return k after placing the final result in the first k slots of nums.\n        Do not allocate extra space for another array. You must do this by modifying the input array in-place with O(1) extra memory.\n        Custom Judge:\n        The judge will test your solution with the following code:\n        int[] nums = [...]; // Input array\n        int val =...; // Value to remove\n        int[] expectedNums = [...]; // The expected answer with correct length.\n                                    // It is sorted with no values equaling val.\n        int k = removeElement(nums, val); // Calls your implementation\n        assert k == expectedNums.length;\n        sort(nums, 0, k); // Sort the first k elements of nums\n        for (int i = 0; i < actualLength; i++) {\n            assert nums[i] == expectedNums[i];\n        }\n        If all assertions pass, then your solution will be accepted.\n        Example 1:\n        Input: nums = [3,2,2,3], val = 3\n        Output: 2, nums = [2,2,_,_]\n        Explanation: Your function should return k = 2, with the first two elements of nums being 2.\n        It does not matter what you leave beyond the returned k (hence they are underscores).\n        Example 2:\n        Input: nums = [0,1,2,2,3,0,4,2], val = 2\n        Output: 5, nums = [0,1,4,0,3,_,_,_]\n        Explanation: Your function should return k = 5, with the first five elements of nums containing 0, 0, 1, 3, and 4.\n        Note that the five elements can be returned in any order.\n        It does not matter what you leave beyond the returned k (hence they are underscores).\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        # i = 0\n        # while i < len(nums):\n        #     if nums[i] == val:\n        #         nums.pop(i)\n        #     else:\n        #         i += 1\n        # return len(nums)\n        \"\"\"\n        Runtime: 28 ms, faster than 99.57% of Python3 online submissions for Remove Element.\n        Memory Usage: 12.8 MB, less than 100.00% of Python3 online submissions for Remove Element.\n        \"\"\"\n        # i = 0\n        # while i < len(nums):\n        #     if nums[i] == val:\n        #         nums.pop(i)\n        #     else:\n        #         i += 1\n        # return len(nums)\n        \"\"\"\n        Runtime: 36 ms, faster than 99.57% of Python3 online submissions for Remove Element.\n        Memory Usage: 12.8 MB, less than 100.00% of Python3 online submissions for Remove Element.\n        \"\"\"\n        # i = 0\n        # while i < len(nums):\n        #     if nums[i] == val:\n        #         nums.pop(i)\n        #     else:\n        #         i += 1\n        # return len(nums)\n        \"\"\"\n        Runtime"
    },
    {
        "number": 28,
        "title": "Find the Index of the First Occurrence in a String",
        "difficulty": 0,
        "prompt": "class Solution:\n    def strStr(self, haystack: str, needle: str) -> int:\n        \"\"\"\n        Given two strings needle and haystack, return the index of the first occurrence of needle in haystack, or -1 if needle is not part of haystack.\n        Example 1:\n        Input: haystack = \"sadbutsad\", needle = \"sad\"\n        Output: 0\n        Explanation: \"sad\" occurs at index 0 and 6.\n        The first occurrence is at index 0, so we return 0.\n        Example 2:\n        Input: haystack = \"leetcode\", needle = \"leeto\"\n        Output: -1\n        Explanation: \"leeto\" did not occur in \"leetcode\", so we return -1.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        if needle == \"\":\n            return 0\n        if needle not in haystack:\n            return -1\n        return haystack.index(needle)"
    },
    {
        "number": 29,
        "title": "Divide Two Integers",
        "difficulty": 1,
        "prompt": "class Solution:\n    def divide(self, dividend: int, divisor: int) -> int:\n        \"\"\"\n        Given two integers dividend and divisor, divide two integers without using multiplication, division, and mod operator.\n        The integer division should truncate toward zero, which means losing its fractional part. For example, 8.345 would be truncated to 8, and -2.7335 would be truncated to -2.\n        Return the quotient after dividing dividend by divisor.\n        Note: Assume we are dealing with an environment that could only store integers within the 32-bit signed integer range: [\u2212231, 231 \u2212 1]. For this problem, if the quotient is strictly greater than 231 - 1, then return 231 - 1, and if the quotient is strictly less than -231, then return -231.\n        Example 1:\n        Input: dividend = 10, divisor = 3\n        Output: 3\n        Explanation: 10/3 = 3.33333.. which is truncated to 3.\n        Example 2:\n        Input: dividend = 7, divisor = -3\n        Output: -2\n        Explanation: 7/-3 = -2.33333.. which is truncated to -2.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        # Solution 1:\n        # if divisor == 0:\n        #     return 0\n        # if dividend == 0:\n        #     return 0\n        # if divisor == 1:\n        #     return dividend\n        # if dividend == -2147483648 and divisor == -1:\n        #     return 2147483647\n        # if dividend == -2147483648 and divisor == 1:\n        #     return -2147483648\n        # if dividend == 2147483647 and divisor == 1:\n        #     return 2147483647\n        # if dividend == 2147483647 and divisor == -1:\n        #     return -2147483648\n        # if dividend == 0:\n        #     return 0\n        # if divisor == 1:\n        #     return dividend\n        # if divisor == -1:\n        #     return -dividend\n        # if dividend == -2147483648 and divisor == -1:\n        #     return 2147483647\n        # if dividend == -2147483648 and divisor == 1:\n        #     return -2147483648\n        # if dividend == 2147483647 and divisor == 1:\n        #"
    },
    {
        "number": 30,
        "title": "Substring with Concatenation of All Words",
        "difficulty": 2,
        "prompt": "class Solution:\n    def findSubstring(self, s: str, words: List[str]) -> List[int]:\n        \"\"\"\n        You are given a string s and an array of strings words. All the strings of words are of the same length.\n        A concatenated substring in s is a substring that contains all the strings of any permutation of words concatenated.\n            For example, if words = [\"ab\",\"cd\",\"ef\"], then \"abcdef\", \"abefcd\", \"cdabef\", \"cdefab\", \"efabcd\", and \"efcdab\" are all concatenated strings. \"acdbef\" is not a concatenated substring because it is not the concatenation of any permutation of words.\n        Return the starting indices of all the concatenated substrings in s. You can return the answer in any order.\n        Example 1:\n        Input: s = \"barfoothefoobarman\", words = [\"foo\",\"bar\"]\n        Output: [0,9]\n        Explanation: Since words.length == 2 and words[i].length == 3, the concatenated substring has to be of length 6.\n        The substring starting at 0 is \"barfoo\". It is the concatenation of [\"bar\",\"foo\"] which is a permutation of words.\n        The substring starting at 9 is \"foobar\". It is the concatenation of [\"foo\",\"bar\"] which is a permutation of words.\n        The output order does not matter. Returning [9,0] is fine too.\n        Example 2:\n        Input: s = \"wordgoodgoodgoodbestword\", words = [\"word\",\"good\",\"best\",\"word\"]\n        Output: []\n        Explanation: Since words.length == 4 and words[i].length == 4, the concatenated substring has to be of length 16.\n        There is no substring of length 16 is s that is equal to the concatenation of any permutation of words.\n        We return an empty array.\n        Example 3:\n        Input: s = \"barfoofoobarthefoobarman\", words = [\"bar\",\"foo\",\"the\"]\n        Output: [6,9,12]\n        Explanation: Since words.length == 3 and words[i].length == 3, the concatenated substring has to be of length 9.\n        The substring starting at 6 is \"foobarthe\". It is the concatenation of [\"foo\",\"bar\",\"the\"] which is a permutation of words.\n        The substring starting at 9 is \"barthefoo\". It is the concatenation of [\"bar\",\"the\",\"foo\"] which is a permutation of words.\n        The substring starting at 12 is \"thefoobar\". It is the concatenation of [\"the\",\"foo\",\"bar\"] which is a permutation of words.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        if not s or not words:\n            return []\n        n, m = len(s), len(words)\n        if m > n:\n            return []\n        words = sorted(words, key=lambda x: len(x))\n        res = []\n        for i in range(m):\n            words[i] = words[i] * (m // len(words[i])) + words[i][:m % len(words[i])]\n        for i in range(m):\n            words[i] = set(words[i])\n        for i in range(n - m * len(words[0]) + 1):\n            cur = set()\n            for j in range(m):\n                cur.add(s[i + j * len(words[0]) : i + (j + 1) * len(words[0])])\n            if cur == words[0]:\n                res.append(i)\n        return res"
    },
    {
        "number": 31,
        "title": "Next Permutation",
        "difficulty": 1,
        "prompt": "class Solution:\n    def nextPermutation(self, nums: List[int]) -> None:\n        \"\"\"\n        Do not return anything, modify nums in-place instead.\n        A permutation of an array of integers is an arrangement of its members into a sequence or linear order.\n            For example, for arr = [1,2,3], the following are all the permutations of arr: [1,2,3], [1,3,2], [2, 1, 3], [2, 3, 1], [3,1,2], [3,2,1].\n        The next permutation of an array of integers is the next lexicographically greater permutation of its integer. More formally, if all the permutations of the array are sorted in one container according to their lexicographical order, then the next permutation of that array is the permutation that follows it in the sorted container. If such arrangement is not possible, the array must be rearranged as the lowest possible order (i.e., sorted in ascending order).\n            For example, the next permutation of arr = [1,2,3] is [1,3,2].\n            Similarly, the next permutation of arr = [2,3,1] is [3,1,2].\n            While the next permutation of arr = [3,2,1] is [1,2,3] because [3,2,1] does not have a lexicographical larger rearrangement.\n        Given an array of integers nums, find the next permutation of nums.\n        The replacement must be in place and use only constant extra memory.\n        Example 1:\n        Input: nums = [1,2,3]\n        Output: [1,3,2]\n        Example 2:\n        Input: nums = [3,2,1]\n        Output: [1,2,3]\n        Example 3:\n        Input: nums = [1,1,5]\n        Output: [1,5,1]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        # find the first index i where nums[i] < nums[i+1]\n        # find the first index j where nums[j] > nums[i]\n        # swap nums[i] and nums[j]\n        # reverse nums[i+1:]\n        # return nums\n        \n        # find the first index i where nums[i] < nums[i+1]\n        i = len(nums) - 2\n        while i >= 0 and nums[i] >= nums[i+1]:\n            i -= 1\n        \n        # if i is -1, then the array is in descending order\n        if i < 0:\n            nums.reverse()\n            return\n        \n        # find the first index j where nums[j] > nums[i]\n        j = len(nums) - 1\n        while j >= 0 and nums[j] <= nums[i]:\n            j -= 1\n        \n        # swap nums[i] and nums[j]\n        nums[i], nums[j] = nums[j], nums[i]\n        \n        # reverse nums[i+1:]\n        nums[i+1:] = nums[i+1:][::-1]\n"
    },
    {
        "number": 32,
        "title": "Longest Valid Parentheses",
        "difficulty": 2,
        "prompt": "class Solution:\n    def longestValidParentheses(self, s: str) -> int:\n        \"\"\"\n        Given a string containing just the characters '(' and ')', return the length of the longest valid (well-formed) parentheses substring.\n        Example 1:\n        Input: s = \"(()\"\n        Output: 2\n        Explanation: The longest valid parentheses substring is \"()\".\n        Example 2:\n        Input: s = \")()())\"\n        Output: 4\n        Explanation: The longest valid parentheses substring is \"()()\".\n        Example 3:\n        Input: s = \"\"\n        Output: 0\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        # \u53cc\u6307\u9488\u6cd5\n        # \u5982\u679cs[i]\u662f'('\uff0c\u5219dp[i] = 0\uff0c\u5426\u5219dp[i] = dp[j] + 2, j\u662f\u6700\u8fd1\u7684\u4e00\u4e2a'('\u7684\u4f4d\u7f6e\n        # \u5982\u679cs[i]\u662f')'\uff0c\u5219dp[i] = 0\uff0c\u5426\u5219dp[i] = dp[j] + 2, j\u662f\u6700\u8fd1\u7684\u4e00\u4e2a')'\u7684\u4f4d\u7f6e\n        # \u5982\u679cs[i]\u662f'('\uff0c\u5219j = i + 1\uff0c\u5426\u5219j = i - dp[i - 1] - 1\n        # \u5982\u679cs[i]\u662f')'\uff0c\u5219j = i + 1\uff0c\u5426\u5219j = i - dp[i - 1] - 1\n        # \u5982\u679cdp[i] > dp[j] + 2, \u5219dp[i] = dp[j] + 2\n        # \u5982\u679cdp[i] <= dp[j] + 2, \u5219dp[i"
    },
    {
        "number": 33,
        "title": "Search in Rotated Sorted Array",
        "difficulty": 1,
        "prompt": "class Solution:\n    def search(self, nums: List[int], target: int) -> int:\n        \"\"\"\n        There is an integer array nums sorted in ascending order (with distinct values).\n        Prior to being passed to your function, nums is possibly rotated at an unknown pivot index k (1 <= k < nums.length) such that the resulting array is [nums[k], nums[k+1],..., nums[n-1], nums[0], nums[1],..., nums[k-1]] (0-indexed). For example, [0,1,2,4,5,6,7] might be rotated at pivot index 3 and become [4,5,6,7,0,1,2].\n        Given the array nums after the possible rotation and an integer target, return the index of target if it is in nums, or -1 if it is not in nums.\n        You must write an algorithm with O(log n) runtime complexity.\n        Example 1:\n        Input: nums = [4,5,6,7,0,1,2], target = 0\n        Output: 4\n        Example 2:\n        Input: nums = [4,5,6,7,0,1,2], target = 3\n        Output: -1\n        Example 3:\n        Input: nums = [1], target = 0\n        Output: -1\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        # binary search\n        # if target in nums:\n        #     return nums.index(target)\n        # else:\n        #     return -1"
    },
    {
        "number": 34,
        "title": "Find First and Last Position of Element in Sorted Array",
        "difficulty": 1,
        "prompt": "class Solution:\n    def searchRange(self, nums: List[int], target: int) -> List[int]:\n        \"\"\"\n        Given an array of integers nums sorted in non-decreasing order, find the starting and ending position of a given target value.\n        If target is not found in the array, return [-1, -1].\n        You must write an algorithm with O(log n) runtime complexity.\n        Example 1:\n        Input: nums = [5,7,7,8,8,10], target = 8\n        Output: [3,4]\n        Example 2:\n        Input: nums = [5,7,7,8,8,10], target = 6\n        Output: [-1,-1]\n        Example 3:\n        Input: nums = [], target = 0\n        Output: [-1,-1]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        if not nums:\n            return [-1, -1]\n        left, right = 0, len(nums) - 1\n        while left <= right:\n            mid = left + (right - left) // 2\n            if nums[mid] == target:\n                left = mid\n                break\n            elif nums[mid] < target:\n                left = mid + 1\n            else:\n                right = mid - 1\n        if left > len(nums) - 1 or nums[left]!= target:\n            return [-1, -1]\n        right = len(nums) - 1\n        while left <= right:\n            mid = left + (right - left) // 2\n            if nums[mid] == target:\n                right = mid\n                break\n            elif nums[mid] > target:\n                right = mid - 1\n            else:\n                left = mid + 1\n        return [left, right]"
    },
    {
        "number": 35,
        "title": "Search Insert Position",
        "difficulty": 0,
        "prompt": "class Solution:\n    def searchInsert(self, nums: List[int], target: int) -> int:\n        \"\"\"\n        Given a sorted array of distinct integers and a target value, return the index if the target is found. If not, return the index where it would be if it were inserted in order.\n        You must write an algorithm with O(log n) runtime complexity.\n        Example 1:\n        Input: nums = [1,3,5,6], target = 5\n        Output: 2\n        Example 2:\n        Input: nums = [1,3,5,6], target = 2\n        Output: 1\n        Example 3:\n        Input: nums = [1,3,5,6], target = 7\n        Output: 4\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        # binary search\n        left, right = 0, len(nums) - 1\n        while left <= right:\n            mid = (left + right) // 2\n            if nums[mid] == target:\n                return mid\n            elif nums[mid] < target:\n                left = mid + 1\n            else:\n                right = mid - 1\n        return left"
    },
    {
        "number": 36,
        "title": "Valid Sudoku",
        "difficulty": 1,
        "prompt": "class Solution:\n    def isValidSudoku(self, board: List[List[str]]) -> bool:\n        \"\"\"\n        Determine if a 9 x 9 Sudoku board is valid. Only the filled cells need to be validated according to the following rules:\n            Each row must contain the digits 1-9 without repetition.\n            Each column must contain the digits 1-9 without repetition.\n            Each of the nine 3 x 3 sub-boxes of the grid must contain the digits 1-9 without repetition.\n        Note:\n            A Sudoku board (partially filled) could be valid but is not necessarily solvable.\n            Only the filled cells need to be validated according to the mentioned rules.\n        Example 1:\n        Input: board = \n        [[\"5\",\"3\",\".\",\".\",\"7\",\".\",\".\",\".\",\".\"]\n       ,[\"6\",\".\",\".\",\"1\",\"9\",\"5\",\".\",\".\",\".\"]\n       ,[\".\",\"9\",\"8\",\".\",\".\",\".\",\".\",\"6\",\".\"]\n       ,[\"8\",\".\",\".\",\".\",\"6\",\".\",\".\",\".\",\"3\"]\n       ,[\"4\",\".\",\".\",\"8\",\".\",\"3\",\".\",\".\",\"1\"]\n       ,[\"7\",\".\",\".\",\".\",\"2\",\".\",\".\",\".\",\"6\"]\n       ,[\".\",\"6\",\".\",\".\",\".\",\".\",\"2\",\"8\",\".\"]\n       ,[\".\",\".\",\".\",\"4\",\"1\",\"9\",\".\",\".\",\"5\"]\n       ,[\".\",\".\",\".\",\".\",\"8\",\".\",\".\",\"7\",\"9\"]]\n        Output: true\n        Example 2:\n        Input: board = \n        [[\"8\",\"3\",\".\",\".\",\"7\",\".\",\".\",\".\",\".\"]\n       ,[\"6\",\".\",\".\",\"1\",\"9\",\"5\",\".\",\".\",\".\"]\n       ,[\".\",\"9\",\"8\",\".\",\".\",\".\",\".\",\"6\",\".\"]\n       ,[\"8\",\".\",\".\",\".\",\"6\",\".\",\".\",\".\",\"3\"]\n       ,[\"4\",\".\",\".\",\"8\",\".\",\"3\",\".\",\".\",\"1\"]\n       ,[\"7\",\".\",\".\",\".\",\"2\",\".\",\".\",\".\",\"6\"]\n       ,[\".\",\"6\",\".\",\".\",\".\",\".\",\"2\",\"8\",\".\"]\n       ,[\".\",\".\",\".\",\"4\",\"1\",\"9\",\".\",\".\",\"5\"]\n       ,[\".\",\".\",\".\",\".\",\"8\",\".\",\".\",\"7\",\"9\"]]\n        Output: false\n        Explanation: Same as Example 1, except with the 5 in the top left corner being modified to 8. Since there are two 8's in the top left 3x3 sub-box, it is invalid.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        # Check rows\n        for row in board:\n            if not self.is_valid_row(row):\n                return False\n        # Check columns\n        for col in zip(*board):\n            if not self.is_valid_col(col):\n                return False\n        # Check sub-boxes\n        for i in range(0, 9, 3):\n            for j in range(0, 9, 3):\n                if not self.is_valid_sub_box(board, i, j):\n                    return False\n        return True"
    },
    {
        "number": 37,
        "title": "Sudoku Solver",
        "difficulty": 2,
        "prompt": "class Solution:\n    def solveSudoku(self, board: List[List[str]]) -> None:\n        \"\"\"\n        Do not return anything, modify board in-place instead.\n        Write a program to solve a Sudoku puzzle by filling the empty cells.\n        A sudoku solution must satisfy all of the following rules:\n            Each of the digits 1-9 must occur exactly once in each row.\n            Each of the digits 1-9 must occur exactly once in each column.\n            Each of the digits 1-9 must occur exactly once in each of the 9 3x3 sub-boxes of the grid.\n        The '.' character indicates empty cells.\n        Example 1:\n        Input: board = [[\"5\",\"3\",\".\",\".\",\"7\",\".\",\".\",\".\",\".\"],[\"6\",\".\",\".\",\"1\",\"9\",\"5\",\".\",\".\",\".\"],[\".\",\"9\",\"8\",\".\",\".\",\".\",\".\",\"6\",\".\"],[\"8\",\".\",\".\",\".\",\"6\",\".\",\".\",\".\",\"3\"],[\"4\",\".\",\".\",\"8\",\".\",\"3\",\".\",\".\",\"1\"],[\"7\",\".\",\".\",\".\",\"2\",\".\",\".\",\".\",\"6\"],[\".\",\"6\",\".\",\".\",\".\",\".\",\"2\",\"8\",\".\"],[\".\",\".\",\".\",\"4\",\"1\",\"9\",\".\",\".\",\"5\"],[\".\",\".\",\".\",\".\",\"8\",\".\",\".\",\"7\",\"9\"]]\n        Output: [[\"5\",\"3\",\"4\",\"6\",\"7\",\"8\",\"9\",\"1\",\"2\"],[\"6\",\"7\",\"2\",\"1\",\"9\",\"5\",\"3\",\"4\",\"8\"],[\"1\",\"9\",\"8\",\"3\",\"4\",\"2\",\"5\",\"6\",\"7\"],[\"8\",\"5\",\"9\",\"7\",\"6\",\"1\",\"4\",\"2\",\"3\"],[\"4\",\"2\",\"6\",\"8\",\"5\",\"3\",\"7\",\"9\",\"1\"],[\"7\",\"1\",\"3\",\"9\",\"2\",\"4\",\"8\",\"5\",\"6\"],[\"9\",\"6\",\"1\",\"5\",\"3\",\"7\",\"2\",\"8\",\"4\"],[\"2\",\"8\",\"7\",\"4\",\"1\",\"9\",\"6\",\"3\",\"5\"],[\"3\",\"4\",\"5\",\"2\",\"8\",\"6\",\"1\",\"7\",\"9\"]]\n        Explanation: The input board is shown above and the only valid solution is shown below:\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        self.board = board\n        self.solve()"
    },
    {
        "number": 38,
        "title": "Count and Say",
        "difficulty": 1,
        "prompt": "class Solution:\n    def countAndSay(self, n: int) -> str:\n        \"\"\"\n        The count-and-say sequence is a sequence of digit strings defined by the recursive formula:\n            countAndSay(1) = \"1\"\n            countAndSay(n) is the way you would \"say\" the digit string from countAndSay(n-1), which is then converted into a different digit string.\n        To determine how you \"say\" a digit string, split it into the minimal number of substrings such that each substring contains exactly one unique digit. Then for each substring, say the number of digits, then say the digit. Finally, concatenate every said digit.\n        For example, the saying and conversion for digit string \"3322251\":\n        Given a positive integer n, return the nth term of the count-and-say sequence.\n        Example 1:\n        Input: n = 1\n        Output: \"1\"\n        Explanation: This is the base case.\n        Example 2:\n        Input: n = 4\n        Output: \"1211\"\n        Explanation:\n        countAndSay(1) = \"1\"\n        countAndSay(2) = say \"1\" = one 1 = \"11\"\n        countAndSay(3) = say \"11\" = two 1's = \"21\"\n        countAndSay(4) = say \"21\" = one 2 + one 1 = \"12\" + \"11\" = \"1211\"\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        if n == 1:\n            return \"1\"\n        else:\n            prev = self.countAndSay(n-1)\n            res = \"\"\n            count = 1\n            for i in range(len(prev)-1):\n                if prev[i] == prev[i+1]:\n                    count += 1\n                else:\n                    res += str(count) + prev[i]\n                    count = 1\n            res += str(count) + prev[-1]\n            return res"
    },
    {
        "number": 39,
        "title": "Combination Sum",
        "difficulty": 1,
        "prompt": "class Solution:\n    def combinationSum(self, candidates: List[int], target: int) -> List[List[int]]:\n        \"\"\"\n        Given an array of distinct integers candidates and a target integer target, return a list of all unique combinations of candidates where the chosen numbers sum to target. You may return the combinations in any order.\n        The same number may be chosen from candidates an unlimited number of times. Two combinations are unique if the frequency of at least one of the chosen numbers is different.\n        The test cases are generated such that the number of unique combinations that sum up to target is less than 150 combinations for the given input.\n        Example 1:\n        Input: candidates = [2,3,6,7], target = 7\n        Output: [[2,2,3],[7]]\n        Explanation:\n        2 and 3 are candidates, and 2 + 2 + 3 = 7. Note that 2 can be used multiple times.\n        7 is a candidate, and 7 = 7.\n        These are the only two combinations.\n        Example 2:\n        Input: candidates = [2,3,5], target = 8\n        Output: [[2,2,2,2],[2,3,3],[3,5]]\n        Example 3:\n        Input: candidates = [2], target = 1\n        Output: []\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        self.res = []\n        self.candidates = candidates\n        self.target = target\n        self.dfs(0, [], 0)\n        return self.res"
    },
    {
        "number": 40,
        "title": "Combination Sum II",
        "difficulty": 1,
        "prompt": "class Solution:\n    def combinationSum2(self, candidates: List[int], target: int) -> List[List[int]]:\n        \"\"\"\n        Given a collection of candidate numbers (candidates) and a target number (target), find all unique combinations in candidates where the candidate numbers sum to target.\n        Each number in candidates may only be used once in the combination.\n        Note: The solution set must not contain duplicate combinations.\n        Example 1:\n        Input: candidates = [10,1,2,7,6,1,5], target = 8\n        Output: \n        [\n        [1,1,6],\n        [1,2,5],\n        [1,7],\n        [2,6]\n        ]\n        Example 2:\n        Input: candidates = [2,5,2,1,2], target = 5\n        Output: \n        [\n        [1,2,2],\n        [5]\n        ]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        # \u601d\u8def\uff1a\u56de\u6eaf\u6cd5\uff0c\u6bcf\u6b21\u9009\u62e9\u4e00\u4e2a\u6570\uff0c\u7136\u540e\u628a\u8fd9\u4e2a\u6570\u4ececandidates\u4e2d\u5220\u9664\uff0c\u7136\u540e\u628a\u8fd9\u4e2a\u6570\u52a0\u5165\u5230\u7ed3\u679c\u4e2d\uff0c\u7136\u540e\u628a\u8fd9\u4e2a\u6570\u52a0\u5165\u5230\u7ed3\u679c\u4e2d\uff0c\u7136\u540e\u628a\u8fd9\u4e2a\u6570\u4ececandidates\u4e2d\u5220\u9664\uff0c\u7136\u540e\u628a\u8fd9\u4e2a\u6570\u52a0\u5165\u5230\u7ed3\u679c\u4e2d\uff0c\u7136\u540e\u628a\u8fd9\u4e2a\u6570\u4ececandidates\u4e2d\u5220\u9664\uff0c\u7136\u540e\u628a\u8fd9\u4e2a\u6570\u52a0\u5165\u5230\u7ed3\u679c\u4e2d\uff0c\u7136\u540e\u628a\u8fd9\u4e2a\u6570\u4ececandidates\u4e2d\u5220\u9664\uff0c\u7136\u540e\u628a\u8fd9\u4e2a\u6570\u52a0\u5165\u5230\u7ed3\u679c\u4e2d\uff0c\u7136\u540e\u628a\u8fd9\u4e2a"
    },
    {
        "number": 41,
        "title": "First Missing Positive",
        "difficulty": 2,
        "prompt": "class Solution:\n    def firstMissingPositive(self, nums: List[int]) -> int:\n        \"\"\"\n        Given an unsorted integer array nums, return the smallest missing positive integer.\n        You must implement an algorithm that runs in O(n) time and uses constant extra space.\n        Example 1:\n        Input: nums = [1,2,0]\n        Output: 3\n        Explanation: The numbers in the range [1,2] are all in the array.\n        Example 2:\n        Input: nums = [3,4,-1,1]\n        Output: 2\n        Explanation: 1 is in the array but 2 is missing.\n        Example 3:\n        Input: nums = [7,8,9,11,12]\n        Output: 1\n        Explanation: The smallest positive integer 1 is missing.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        # 1. \u5148\u6392\u5e8f\uff0c\u7136\u540e\u67e5\u627e\n        # 2. \u67e5\u627e\u65f6\uff0c\u5982\u679c\u662f\u8d1f\u6570\uff0c\u5219\u76f4\u63a5\u653e\u8fdb\u53bb\uff0c\u5982\u679c\u662f\u6b63\u6570\uff0c\u5219\u67e5\u627e\u662f\u5426\u5728\u6570\u7ec4\u4e2d\uff0c\u5982\u679c\u4e0d\u5728\uff0c\u5219\u8fd4\u56de\u6b63\u6570\n        # 3. \u67e5\u627e\u65f6\uff0c\u5982\u679c\u662f\u8d1f\u6570\uff0c\u5219\u76f4\u63a5\u653e\u8fdb\u53bb\uff0c\u5982\u679c\u662f\u6b63\u6570\uff0c\u5219\u67e5\u627e\u662f\u5426\u5728\u6570\u7ec4\u4e2d\uff0c\u5982\u679c\u4e0d\u5728\uff0c\u5219\u8fd4\u56de\u6b63\u6570\n        # 4. \u67e5\u627e\u65f6\uff0c\u5982\u679c\u662f\u8d1f\u6570\uff0c\u5219\u76f4\u63a5\u653e\u8fdb\u53bb\uff0c\u5982\u679c\u662f\u6b63\u6570\uff0c\u5219\u67e5\u627e\u662f\u5426\u5728\u6570\ufffd"
    },
    {
        "number": 42,
        "title": "Trapping Rain Water",
        "difficulty": 2,
        "prompt": "class Solution:\n    def trap(self, height: List[int]) -> int:\n        \"\"\"\n        Given n non-negative integers representing an elevation map where the width of each bar is 1, compute how much water it can trap after raining.\n        Example 1:\n        Input: height = [0,1,0,2,1,0,1,3,2,1,2,1]\n        Output: 6\n        Explanation: The above elevation map (black section) is represented by array [0,1,0,2,1,0,1,3,2,1,2,1]. In this case, 6 units of rain water (blue section) are being trapped.\n        Example 2:\n        Input: height = [4,2,0,3,2,5]\n        Output: 9\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        # Approach 1: Two Pointers\n        # Time O(n)\n        # Space O(1)\n        # left, right = 0, len(height) - 1\n        # max_left, max_right = 0, 0\n        # res = 0\n        # while left < right:\n        #     max_left = max(max_left, height[left])\n        #     max_right = max(max_right, height[right])\n        #     if max_left < max_right:\n        #         res += max_left - height[left]\n        #         left += 1\n        #     else:\n        #         res += max_right - height[right]\n        #         right -= 1\n        # return res"
    },
    {
        "number": 43,
        "title": "Multiply Strings",
        "difficulty": 1,
        "prompt": "class Solution:\n    def multiply(self, num1: str, num2: str) -> str:\n        \"\"\"\n        Given two non-negative integers num1 and num2 represented as strings, return the product of num1 and num2, also represented as a string.\n        Note: You must not use any built-in BigInteger library or convert the inputs to integer directly.\n        Example 1:\n        Input: num1 = \"2\", num2 = \"3\"\n        Output: \"6\"\n        Example 2:\n        Input: num1 = \"123\", num2 = \"456\"\n        Output: \"56088\"\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        if num1 == '0' or num2 == '0':\n            return '0'\n        \n        n1 = len(num1)\n        n2 = len(num2)\n        \n        # convert num1 and num2 to int\n        num1 = int(num1)\n        num2 = int(num2)\n        \n        # initialize a list to store the result\n        res = [0] * (n1 + n2)\n        \n        # initialize the carry\n        carry = 0\n        \n        # iterate through num1 and num2\n        for i in range(n1 - 1, -1, -1):\n            for j in range(n2 - 1, -1, -1):\n                # get the product of num1[i] and num2[j]\n                prod = (num1 % 10) * (num2 % 10)\n                \n                # get the sum of the product and carry\n                sum = prod + carry\n                \n                # get the carry\n                carry = sum // 10\n                \n                # get the remainder\n                rem = sum % 10\n                \n                # store the product in the result\n                res[i + j] += rem\n                \n                # get the product of num1[i] and num2[j]\n                prod = (num1"
    },
    {
        "number": 44,
        "title": "Wildcard Matching",
        "difficulty": 2,
        "prompt": "class Solution:\n    def isMatch(self, s: str, p: str) -> bool:\n        \"\"\"\n        Given an input string (s) and a pattern (p), implement wildcard pattern matching with support for '?' and '*' where:\n            '?' Matches any single character.\n            '*' Matches any sequence of characters (including the empty sequence).\n        The matching should cover the entire input string (not partial).\n        Example 1:\n        Input: s = \"aa\", p = \"a\"\n        Output: false\n        Explanation: \"a\" does not match the entire string \"aa\".\n        Example 2:\n        Input: s = \"aa\", p = \"*\"\n        Output: true\n        Explanation: '*' matches any sequence.\n        Example 3:\n        Input: s = \"cb\", p = \"?a\"\n        Output: false\n        Explanation: '?' matches 'c', but the second letter is 'a', which does not match 'b'.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        # Solution 1:\n        # Time complexity: O(n^2)\n        # Space complexity: O(n)\n        # if not p:\n        #     return not s\n        # first_match = bool(s) and p[0] in {s[0], '?'}\n        # if len(p) >= 2 and p[1] == '*':\n        #     return self.isMatch(s, p[2:]) or (first_match and self.isMatch(s[1:], p))\n        # else:\n        #     return first_match and self.isMatch(s[1:], p[1:])"
    },
    {
        "number": 45,
        "title": "Jump Game II",
        "difficulty": 1,
        "prompt": "class Solution:\n    def jump(self, nums: List[int]) -> int:\n        \"\"\"\n        You are given a 0-indexed array of integers nums of length n. You are initially positioned at nums[0].\n        Each element nums[i] represents the maximum length of a forward jump from index i. In other words, if you are at nums[i], you can jump to any nums[i + j] where:\n            0 <= j <= nums[i] and\n            i + j < n\n        Return the minimum number of jumps to reach nums[n - 1]. The test cases are generated such that you can reach nums[n - 1].\n        Example 1:\n        Input: nums = [2,3,1,1,4]\n        Output: 2\n        Explanation: The minimum number of jumps to reach the last index is 2. Jump 1 step from index 0 to 1, then 3 steps to the last index.\n        Example 2:\n        Input: nums = [2,3,0,1,4]\n        Output: 2\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        # greedy\n        # time complexity: O(n)\n        # space complexity: O(1)\n        n = len(nums)\n        if n == 1:\n            return 0\n        curr_max = nums[0]\n        jump_count = 1\n        for i in range(1, n):\n            if i == n - 1:\n                return jump_count\n            if i > curr_max:\n                jump_count += 1\n                curr_max = i + nums[i]\n            else:\n                curr_max = max(curr_max, i + nums[i])\n        return -1"
    },
    {
        "number": 46,
        "title": "Permutations",
        "difficulty": 1,
        "prompt": "class Solution:\n    def permute(self, nums: List[int]) -> List[List[int]]:\n        \"\"\"\n        Given an array nums of distinct integers, return all the possible permutations. You can return the answer in any order.\n        Example 1:\n        Input: nums = [1,2,3]\n        Output: [[1,2,3],[1,3,2],[2,1,3],[2,3,1],[3,1,2],[3,2,1]]\n        Example 2:\n        Input: nums = [0,1]\n        Output: [[0,1],[1,0]]\n        Example 3:\n        Input: nums = [1]\n        Output: [[1]]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        # Time: O(n * n!)\n        # Space: O(n * n!)\n        # Recursive\n        # if len(nums) == 1:\n        #     return [nums]\n        # permutations = []\n        # for i in range(len(nums)):\n        #     permutations.extend([[nums[i]] + p for p in self.permute(nums[:i] + nums[i+1:])])\n        # return permutations"
    },
    {
        "number": 47,
        "title": "Permutations II",
        "difficulty": 1,
        "prompt": "class Solution:\n    def permuteUnique(self, nums: List[int]) -> List[List[int]]:\n        \"\"\"\n        Given a collection of numbers, nums, that might contain duplicates, return all possible unique permutations in any order.\n        Example 1:\n        Input: nums = [1,1,2]\n        Output:\n        [[1,1,2],\n         [1,2,1],\n         [2,1,1]]\n        Example 2:\n        Input: nums = [1,2,3]\n        Output: [[1,2,3],[1,3,2],[2,1,3],[2,3,1],[3,1,2],[3,2,1]]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        \n        def backtrack(nums, path, res):\n            if not nums:\n                res.append(path)\n                return\n            \n            for i in range(len(nums)):\n                if i > 0 and nums[i] == nums[i-1]:\n                    continue\n                backtrack(nums[:i]+nums[i+1:], path+[nums[i]], res)\n        \n        res = []\n        backtrack(nums, [], res)\n        return res\n<|endoftext|>"
    },
    {
        "number": 48,
        "title": "Rotate Image",
        "difficulty": 1,
        "prompt": "class Solution:\n    def rotate(self, matrix: List[List[int]]) -> None:\n        \"\"\"\n        Do not return anything, modify matrix in-place instead.\n        You are given an n x n 2D matrix representing an image, rotate the image by 90 degrees (clockwise).\n        You have to rotate the image in-place, which means you have to modify the input 2D matrix directly. DO NOT allocate another 2D matrix and do the rotation.\n        Example 1:\n        Input: matrix = [[1,2,3],[4,5,6],[7,8,9]]\n        Output: [[7,4,1],[8,5,2],[9,6,3]]\n        Example 2:\n        Input: matrix = [[5,1,9,11],[2,4,8,10],[13,3,6,7],[15,14,12,16]]\n        Output: [[15,13,2,5],[14,3,4,1],[12,6,8,9],[16,7,10,11]]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        n = len(matrix)\n        for i in range(n//2):\n            for j in range(i, n-i-1):\n                temp = matrix[i][j]\n                matrix[i][j] = matrix[j][n-i-1]\n                matrix[j][n-i-1] = matrix[n-i-1][n-j-1]\n                matrix[n-i-1][n-j-1] = matrix[n-j-1][i]\n                matrix[n-j-1][i] = temp\n        return matrix"
    },
    {
        "number": 49,
        "title": "Group Anagrams",
        "difficulty": 1,
        "prompt": "class Solution:\n    def groupAnagrams(self, strs: List[str]) -> List[List[str]]:\n        \"\"\"\n        Given an array of strings strs, group the anagrams together. You can return the answer in any order.\n        An Anagram is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once.\n        Example 1:\n        Input: strs = [\"eat\",\"tea\",\"tan\",\"ate\",\"nat\",\"bat\"]\n        Output: [[\"bat\"],[\"nat\",\"tan\"],[\"ate\",\"eat\",\"tea\"]]\n        Example 2:\n        Input: strs = [\"\"]\n        Output: [[\"\"]]\n        Example 3:\n        Input: strs = [\"a\"]\n        Output: [[\"a\"]]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        # Time complexity: O(nklogk)\n        # Space complexity: O(nk)\n        # n = len(strs)\n        # if n == 0:\n        #     return []\n        # d = {}\n        # for s in strs:\n        #     key = tuple(sorted(s))\n        #     if key in d:\n        #         d[key].append(s)\n        #     else:\n        #         d[key] = [s]\n        # return list(d.values())"
    },
    {
        "number": 50,
        "title": "Pow(x, n)",
        "difficulty": 1,
        "prompt": "class Solution:\n    def myPow(self, x: float, n: int) -> float:\n        \"\"\"\n        Implement pow(x, n), which calculates x raised to the power n (i.e., xn).\n        Example 1:\n        Input: x = 2.00000, n = 10\n        Output: 1024.00000\n        Example 2:\n        Input: x = 2.10000, n = 3\n        Output: 9.26100\n        Example 3:\n        Input: x = 2.00000, n = -2\n        Output: 0.25000\n        Explanation: 2-2 = 1/22 = 1/4 = 0.25\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        if n == 0:\n            return 1\n        if n < 0:\n            return 1 / self.myPow(x, -n)\n        if n % 2 == 0:\n            return self.myPow(x * x, n // 2)\n        else:\n            return x * self.myPow(x * x, n // 2)"
    },
    {
        "number": 51,
        "title": "N-Queens",
        "difficulty": 2,
        "prompt": "class Solution:\n    def solveNQueens(self, n: int) -> List[List[str]]:\n        \"\"\"\n        The n-queens puzzle is the problem of placing n queens on an n x n chessboard such that no two queens attack each other.\n        Given an integer n, return all distinct solutions to the n-queens puzzle. You may return the answer in any order.\n        Each solution contains a distinct board configuration of the n-queens' placement, where 'Q' and '.' both indicate a queen and an empty space, respectively.\n        Example 1:\n        Input: n = 4\n        Output: [[\".Q..\",\"...Q\",\"Q...\",\"..Q.\"],[\"..Q.\",\"Q...\",\"...Q\",\".Q..\"]]\n        Explanation: There exist two distinct solutions to the 4-queens puzzle as shown above\n        Example 2:\n        Input: n = 1\n        Output: [[\"Q\"]]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        self.res = []\n        self.n = n\n        self.cols = set()\n        self.pie = set()\n        self.na = set()\n        self.dfs(0, [])\n        return self.res"
    },
    {
        "number": 52,
        "title": "N-Queens II",
        "difficulty": 2,
        "prompt": "class Solution:\n    def totalNQueens(self, n: int) -> int:\n        \"\"\"\n        The n-queens puzzle is the problem of placing n queens on an n x n chessboard such that no two queens attack each other.\n        Given an integer n, return the number of distinct solutions to the n-queens puzzle.\n        Example 1:\n        Input: n = 4\n        Output: 2\n        Explanation: There are two distinct solutions to the 4-queens puzzle as shown.\n        Example 2:\n        Input: n = 1\n        Output: 1\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        self.res = 0\n        self.dfs(n, 0, 0, 0, 0)\n        return self.res"
    },
    {
        "number": 53,
        "title": "Maximum Subarray",
        "difficulty": 1,
        "prompt": "class Solution:\n    def maxSubArray(self, nums: List[int]) -> int:\n        \"\"\"\n        Given an integer array nums, find the subarray with the largest sum, and return its sum.\n        Example 1:\n        Input: nums = [-2,1,-3,4,-1,2,1,-5,4]\n        Output: 6\n        Explanation: The subarray [4,-1,2,1] has the largest sum 6.\n        Example 2:\n        Input: nums = [1]\n        Output: 1\n        Explanation: The subarray [1] has the largest sum 1.\n        Example 3:\n        Input: nums = [5,4,-1,7,8]\n        Output: 23\n        Explanation: The subarray [5,4,-1,7,8] has the largest sum 23.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        # \u52a8\u6001\u89c4\u5212\n        # dp[i]\u8868\u793a\u4ee5\u7b2ci\u4e2a\u6570\u7ed3\u5c3e\u7684\u6700\u5927\u5b50\u5e8f\u5217\u548c\n        # dp[i] = max(dp[i-1] + nums[i], nums[i])\n        # \u8fd9\u91cc\u7684dp[i]\u8868\u793a\u4ee5\u7b2ci\u4e2a\u6570\u7ed3\u5c3e\u7684\u6700\u5927\u5b50\u5e8f\u5217\u548c\uff0c\u56e0\u6b64dp[i] = max(dp[i-1] + nums[i], nums[i])\n        # \u56e0\u4e3adp[i-1] + nums[i]\u8868\u793a\u4ee5\u7b2ci-1\u4e2a\u6570\u7ed3\u5c3e\u7684\u6700\u5927\u5b50\u5e8f\u5217\u548c\uff0c\u6240\u4ee5dp[i] = max(dp[i-1] + nums[i], nums[i])\n        # \u56e0\u4e3adp[i-1] + nums[i] > nums[i]\uff0c\u6240\u4ee5dp[i] = max(dp[i-1] + nums[i], nums[i])\n        "
    },
    {
        "number": 54,
        "title": "Spiral Matrix",
        "difficulty": 1,
        "prompt": "class Solution:\n    def spiralOrder(self, matrix: List[List[int]]) -> List[int]:\n        \"\"\"\n        Given an m x n matrix, return all elements of the matrix in spiral order.\n        Example 1:\n        Input: matrix = [[1,2,3],[4,5,6],[7,8,9]]\n        Output: [1,2,3,6,9,8,7,4,5]\n        Example 2:\n        Input: matrix = [[1,2,3,4],[5,6,7,8],[9,10,11,12]]\n        Output: [1,2,3,4,8,12,11,10,9,5,6,7]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        if not matrix:\n            return []\n        m, n = len(matrix), len(matrix[0])\n        res = []\n        left, right, top, bottom = 0, n-1, 0, m-1\n        while left <= right and top <= bottom:\n            for i in range(left, right+1):\n                res.append(matrix[top][i])\n            for i in range(top+1, bottom+1):\n                res.append(matrix[i][right])\n            if left < right and top < bottom:\n                for i in range(right-1, left, -1):\n                    res.append(matrix[bottom][i])\n                for i in range(bottom, top, -1):\n                    res.append(matrix[i][left])\n            left, right, top, bottom = left+1, right-1, top+1, bottom-1\n        return res\n<|endoftext|>"
    },
    {
        "number": 55,
        "title": "Jump Game",
        "difficulty": 1,
        "prompt": "class Solution:\n    def canJump(self, nums: List[int]) -> bool:\n        \"\"\"\n        You are given an integer array nums. You are initially positioned at the array's first index, and each element in the array represents your maximum jump length at that position.\n        Return true if you can reach the last index, or false otherwise.\n        Example 1:\n        Input: nums = [2,3,1,1,4]\n        Output: true\n        Explanation: Jump 1 step from index 0 to 1, then 3 steps to the last index.\n        Example 2:\n        Input: nums = [3,2,1,0,4]\n        Output: false\n        Explanation: You will always arrive at index 3 no matter what. Its maximum jump length is 0, which makes it impossible to reach the last index.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        # greedy\n        # time complexity: O(n)\n        # space complexity: O(1)\n        # if len(nums) == 1:\n        #     return True\n        # cur_max_index = 0\n        # for i in range(len(nums)):\n        #     if i > cur_max_index:\n        #         return False\n        #     cur_max_index = max(cur_max_index, i + nums[i])\n        # return True\n        \n        # dp\n        # time complexity: O(n)\n        # space complexity: O(n)\n        # dp[i] means the maximum index we can reach from index i\n        dp = [0] * len(nums)\n        dp[0] = nums[0]\n        for i in range(1, len(nums)):\n            dp[i] = max(dp[i-1], i + nums[i])\n        return dp[-1] >= len(nums) - 1\n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        "
    },
    {
        "number": 56,
        "title": "Merge Intervals",
        "difficulty": 1,
        "prompt": "class Solution:\n    def merge(self, intervals: List[List[int]]) -> List[List[int]]:\n        \"\"\"\n        Given an array of intervals where intervals[i] = [starti, endi], merge all overlapping intervals, and return an array of the non-overlapping intervals that cover all the intervals in the input.\n        Example 1:\n        Input: intervals = [[1,3],[2,6],[8,10],[15,18]]\n        Output: [[1,6],[8,10],[15,18]]\n        Explanation: Since intervals [1,3] and [2,6] overlap, merge them into [1,6].\n        Example 2:\n        Input: intervals = [[1,4],[4,5]]\n        Output: [[1,5]]\n        Explanation: Intervals [1,4] and [4,5] are considered overlapping.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        if len(intervals) == 0:\n            return []\n        intervals.sort(key=lambda x: x[0])\n        res = [intervals[0]]\n        for i in range(1, len(intervals)):\n            if res[-1][1] >= intervals[i][0]:\n                res[-1][1] = max(res[-1][1], intervals[i][1])\n            else:\n                res.append(intervals[i])\n        return res\n<|endoftext|>"
    },
    {
        "number": 57,
        "title": "Insert Interval",
        "difficulty": 1,
        "prompt": "class Solution:\n    def insert(self, intervals: List[List[int]], newInterval: List[int]) -> List[List[int]]:\n        \"\"\"\n        You are given an array of non-overlapping intervals intervals where intervals[i] = [starti, endi] represent the start and the end of the ith interval and intervals is sorted in ascending order by starti. You are also given an interval newInterval = [start, end] that represents the start and end of another interval.\n        Insert newInterval into intervals such that intervals is still sorted in ascending order by starti and intervals still does not have any overlapping intervals (merge overlapping intervals if necessary).\n        Return intervals after the insertion.\n        Example 1:\n        Input: intervals = [[1,3],[6,9]], newInterval = [2,5]\n        Output: [[1,5],[6,9]]\n        Example 2:\n        Input: intervals = [[1,2],[3,5],[6,7],[8,10],[12,16]], newInterval = [4,8]\n        Output: [[1,2],[3,10],[12,16]]\n        Explanation: Because the new interval [4,8] overlaps with [3,5],[6,7],[8,10].\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        # Time: O(N)\n        # Space: O(N)\n        intervals.append(newInterval)\n        intervals.sort(key=lambda x: x[0])\n        res = []\n        for interval in intervals:\n            if not res or res[-1][1] < interval[0]:\n                res.append(interval)\n            else:\n                res[-1][1] = max(res[-1][1], interval[1])\n        return res"
    },
    {
        "number": 58,
        "title": "Length of Last Word",
        "difficulty": 0,
        "prompt": "class Solution:\n    def lengthOfLastWord(self, s: str) -> int:\n        \"\"\"\n        Given a string s consisting of words and spaces, return the length of the last word in the string.\n        A word is a maximal substring consisting of non-space characters only.\n        Example 1:\n        Input: s = \"Hello World\"\n        Output: 5\n        Explanation: The last word is \"World\" with length 5.\n        Example 2:\n        Input: s = \"   fly me   to   the moon  \"\n        Output: 4\n        Explanation: The last word is \"moon\" with length 4.\n        Example 3:\n        Input: s = \"luffy is still joyboy\"\n        Output: 6\n        Explanation: The last word is \"joyboy\" with length 6.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        # \u53cc\u6307\u9488\u6cd5\n        # \u626b\u63cf\u4e00\u904d\uff0c\u627e\u5230\u7b2c\u4e00\u4e2a\u7a7a\u683c\uff0c\u7136\u540e\u4ece\u7a7a\u683c\u540e\u9762\u5f00\u59cb\u627e\u6700\u540e\u4e00\u4e2a\u5b57\u6bcd\n        # \u627e\u5230\u7b2c\u4e00\u4e2a\u7a7a\u683c\u540e\uff0c\u4ece\u7a7a\u683c\u524d\u9762\u5f00\u59cb\u627e\u6700\u540e\u4e00\u4e2a\u5b57\u6bcd\n        # \u627e\u5230\u6700\u540e\u4e00\u4e2a\u5b57\u6bcd\u540e\uff0c\u7ee7\u7eed\u4ece\u7a7a\u683c\u524d\u9762\u627e\u6700\u540e\u4e00\u4e2a\u5b57\u6bcd\n        # \u627e\u5230\u6700\u540e\u4e00\u4e2a\u5b57\u6bcd\u540e\uff0c\u7ee7\u7eed\u4ece\u7a7a\u683c\u524d\u9762\u627e\u6700\u540e\u4e00\u4e2a\u5b57\u6bcd\n        # \u627e\u5230\u6700\u540e\u4e00\u4e2a\u5b57\u6bcd\u540e\uff0c\u7ee7\u7eed\u4ece\u7a7a\u683c\u524d\u9762\u627e\u6700\u540e\u4e00\u4e2a"
    },
    {
        "number": 59,
        "title": "Spiral Matrix II",
        "difficulty": 1,
        "prompt": "class Solution:\n    def generateMatrix(self, n: int) -> List[List[int]]:\n        \"\"\"\n        Given a positive integer n, generate an n x n matrix filled with elements from 1 to n2 in spiral order.\n        Example 1:\n        Input: n = 3\n        Output: [[1,2,3],[8,9,4],[7,6,5]]\n        Example 2:\n        Input: n = 1\n        Output: [[1]]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        if n == 1:\n            return [[1]]\n        matrix = [[0 for _ in range(n)] for _ in range(n)]\n        left, right, top, bottom = 0, n - 1, 0, n - 1\n        num = 1\n        while left <= right and top <= bottom:\n            for i in range(left, right + 1):\n                matrix[top][i] = num\n                num += 1\n            for i in range(top + 1, bottom):\n                matrix[i][right] = num\n                num += 1\n            if left < right and top < bottom:\n                for i in range(right - 1, left, -1):\n                    matrix[bottom][i] = num\n                    num += 1\n                for i in range(bottom, top, -1):\n                    matrix[i][left] = num\n                    num += 1\n            left, right, top, bottom = left + 1, right - 1, top + 1, bottom - 1\n        return matrix\n<|endoftext|>"
    },
    {
        "number": 60,
        "title": "Permutation Sequence",
        "difficulty": 2,
        "prompt": "class Solution:\n    def getPermutation(self, n: int, k: int) -> str:\n        \"\"\"\n        The set [1, 2, 3,..., n] contains a total of n! unique permutations.\n        By listing and labeling all of the permutations in order, we get the following sequence for n = 3:\n            \"123\"\n            \"132\"\n            \"213\"\n            \"231\"\n            \"312\"\n            \"321\"\n        Given n and k, return the kth permutation sequence.\n        Example 1:\n        Input: n = 3, k = 3\n        Output: \"213\"\n        Example 2:\n        Input: n = 4, k = 9\n        Output: \"2314\"\n        Example 3:\n        Input: n = 3, k = 1\n        Output: \"123\"\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        # 1. \u627e\u51fa\u6240\u6709\u7684\u53ef\u80fd\u6027\n        # 2. \u627e\u51fa\u6240\u6709\u7684\u7b2ck\u4e2a\n        # 3. \u627e\u51fa\u6240\u6709\u7684\u7b2ck-1\u4e2a\n        # 4. \u627e\u51fa\u6240\u6709\u7684\u7b2ck-2\u4e2a\n        # 5. \u627e\u51fa\u6240\u6709\u7684\u7b2ck-3\u4e2a\n        # 6. \u627e\u51fa\u6240\u6709\u7684\u7b2ck-4\u4e2a\n        # 7. \u627e\u51fa\u6240\u6709\u7684\u7b2ck-5\u4e2a\n        # 8. \u627e\u51fa\u6240\u6709\u7684\u7b2ck-6\u4e2a\n        # 9. \u627e\u51fa\u6240\u6709\u7684\u7b2ck-7\u4e2a\n        # 10. \u627e\u51fa\u6240\u6709\u7684\u7b2ck-8\u4e2a\n        # 11. \u627e\u51fa\u6240\u6709\u7684\u7b2ck-9\u4e2a\n        # 12. \u627e\u51fa\u6240\u6709\u7684\u7b2ck-10\u4e2a\n        # 13. \u627e\u51fa\u6240\u6709\u7684\u7b2ck-11\u4e2a\n        # 14. \ufffd"
    },
    {
        "number": 61,
        "title": "Rotate List",
        "difficulty": 1,
        "prompt": "class Solution:\n    def rotateRight(self, head: Optional[ListNode], k: int) -> Optional[ListNode]:\n        \"\"\"\n        Given the head of a linked list, rotate the list to the right by k places.\n        Example 1:\n        Input: head = [1,2,3,4,5], k = 2\n        Output: [4,5,1,2,3]\n        Example 2:\n        Input: head = [0,1,2], k = 4\n        Output: [2,0,1]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        if not head:\n            return None\n        \n        # find the length of the list\n        length = 0\n        curr = head\n        while curr:\n            length += 1\n            curr = curr.next\n        \n        # if k is greater than the length of the list, we can rotate the list by rotating it k - n times\n        k = k % length\n        if k == 0:\n            return head\n        \n        # find the last node of the list\n        last_node = head\n        for _ in range(length - k - 1):\n            last_node = last_node.next\n        \n        # find the new head of the list\n        new_head = last_node.next\n        last_node.next = None\n        \n        # find the last node of the new list\n        curr = new_head\n        while curr.next:\n            curr = curr.next\n        curr.next = head\n        \n        return new_head\n<|endoftext|>"
    },
    {
        "number": 62,
        "title": "Unique Paths",
        "difficulty": 1,
        "prompt": "class Solution:\n    def uniquePaths(self, m: int, n: int) -> int:\n        \"\"\"\n        There is a robot on an m x n grid. The robot is initially located at the top-left corner (i.e., grid[0][0]). The robot tries to move to the bottom-right corner (i.e., grid[m - 1][n - 1]). The robot can only move either down or right at any point in time.\n        Given the two integers m and n, return the number of possible unique paths that the robot can take to reach the bottom-right corner.\n        The test cases are generated so that the answer will be less than or equal to 2 * 109.\n        Example 1:\n        Input: m = 3, n = 7\n        Output: 28\n        Example 2:\n        Input: m = 3, n = 2\n        Output: 3\n        Explanation: From the top-left corner, there are a total of 3 ways to reach the bottom-right corner:\n        1. Right -> Down -> Down\n        2. Down -> Down -> Right\n        3. Down -> Right -> Down\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        # dp[i][j] = dp[i-1][j] + dp[i][j-1]\n        dp = [[0] * n for _ in range(m)]\n        dp[0][0] = 1\n        for i in range(m):\n            for j in range(n):\n                if i > 0:\n                    dp[i][j] += dp[i-1][j]\n                if j > 0:\n                    dp[i][j] += dp[i][j-1]\n        return dp[m-1][n-1]"
    },
    {
        "number": 63,
        "title": "Unique Paths II",
        "difficulty": 1,
        "prompt": "class Solution:\n    def uniquePathsWithObstacles(self, obstacleGrid: List[List[int]]) -> int:\n        \"\"\"\n        You are given an m x n integer array grid. There is a robot initially located at the top-left corner (i.e., grid[0][0]). The robot tries to move to the bottom-right corner (i.e., grid[m - 1][n - 1]). The robot can only move either down or right at any point in time.\n        An obstacle and space are marked as 1 or 0 respectively in grid. A path that the robot takes cannot include any square that is an obstacle.\n        Return the number of possible unique paths that the robot can take to reach the bottom-right corner.\n        The testcases are generated so that the answer will be less than or equal to 2 * 109.\n        Example 1:\n        Input: obstacleGrid = [[0,0,0],[0,1,0],[0,0,0]]\n        Output: 2\n        Explanation: There is one obstacle in the middle of the 3x3 grid above.\n        There are two ways to reach the bottom-right corner:\n        1. Right -> Right -> Down -> Down\n        2. Down -> Down -> Right -> Right\n        Example 2:\n        Input: obstacleGrid = [[0,1],[0,0]]\n        Output: 1\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        m, n = len(obstacleGrid), len(obstacleGrid[0])\n        dp = [[0] * n for _ in range(m)]\n        dp[0][0] = 1 - obstacleGrid[0][0]\n        for i in range(1, m):\n            dp[i][0] = dp[i - 1][0] * (1 - obstacleGrid[i][0])\n        for j in range(1, n):\n            dp[0][j] = dp[0][j - 1] * (1 - obstacleGrid[0][j])\n        for i in range(1, m):\n            for j in range(1, n):\n                dp[i][j] = (dp[i - 1][j] + dp[i][j - 1]) * (1 - obstacleGrid[i][j])\n        return dp[-1][-1]"
    },
    {
        "number": 64,
        "title": "Minimum Path Sum",
        "difficulty": 1,
        "prompt": "class Solution:\n    def minPathSum(self, grid: List[List[int]]) -> int:\n        \"\"\"\n        Given a m x n grid filled with non-negative numbers, find a path from top left to bottom right, which minimizes the sum of all numbers along its path.\n        Note: You can only move either down or right at any point in time.\n        Example 1:\n        Input: grid = [[1,3,1],[1,5,1],[4,2,1]]\n        Output: 7\n        Explanation: Because the path 1 \u2192 3 \u2192 1 \u2192 1 \u2192 1 minimizes the sum.\n        Example 2:\n        Input: grid = [[1,2,3],[4,5,6]]\n        Output: 12\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        # dp[i][j] = min(dp[i-1][j], dp[i][j-1]) + grid[i][j]\n        # dp[i][j] = min(dp[i-1][j], dp[i][j-1]) + grid[i][j]\n        # dp[i][j] = min(dp[i-1][j], dp[i][j-1]) + grid[i][j]\n        # dp[i][j] = min(dp[i-1][j], dp[i][j-1]) + grid[i][j]\n        # dp[i][j] = min(dp[i-1][j], dp[i][j-1]) + grid[i][j]\n        # dp[i][j] = min(dp[i-1][j], dp[i][j-1]) + grid[i][j]\n        # dp[i][j] = min(dp[i-1][j], dp[i][j-1]) + grid[i][j]\n        # dp[i][j] = min(dp[i-1][j], dp[i][j-1]) + grid[i][j]\n        # dp"
    },
    {
        "number": 65,
        "title": "Valid Number",
        "difficulty": 2,
        "prompt": "class Solution:\n    def isNumber(self, s: str) -> bool:\n        \"\"\"\n        A valid number can be split up into these components (in order):\n            A decimal number or an integer.\n            (Optional) An 'e' or 'E', followed by an integer.\n        A decimal number can be split up into these components (in order):\n            (Optional) A sign character (either '+' or '-').\n            One of the following formats:\n                One or more digits, followed by a dot '.'.\n                One or more digits, followed by a dot '.', followed by one or more digits.\n                A dot '.', followed by one or more digits.\n        An integer can be split up into these components (in order):\n            (Optional) A sign character (either '+' or '-').\n            One or more digits.\n        For example, all the following are valid numbers: [\"2\", \"0089\", \"-0.1\", \"+3.14\", \"4.\", \"-.9\", \"2e10\", \"-90E3\", \"3e+7\", \"+6e-1\", \"53.5e93\", \"-123.456e789\"], while the following are not valid numbers: [\"abc\", \"1a\", \"1e\", \"e3\", \"99e2.5\", \"--6\", \"-+3\", \"95a54e53\"].\n        Given a string s, return true if s is a valid number.\n        Example 1:\n        Input: s = \"0\"\n        Output: true\n        Example 2:\n        Input: s = \"e\"\n        Output: false\n        Example 3:\n        Input: s = \".\"\n        Output: false\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        # 1. \u6808\n        # 2. \u5b57\u7b26\u4e32\u8f6c\u6362\u4e3a\u6570\u5b57\n        # 3. \u6570\u5b57\u8f6c\u6362\u4e3a\u5b57\u7b26\u4e32\n        # 4. \u5224\u65ad\u662f\u5426\u662f\u6570\u5b57\n        # 5. \u5224\u65ad\u662f\u5426\u662f\u5c0f\u6570\n        # 6. \u5224\u65ad\u662f\u5426\u662f\u8d1f\u6570\n        # 7. \u5224\u65ad\u662f\u5426\u662f\u6b63\u6570\n        # 8. \u5224\u65ad\u662f\u5426\u662fe\n        # 9. \u5224\u65ad\u662f\u5426\u662fE\n        # 10. \u5224\u65ad\u662f\u5426\u662f\u7b26\u53f7\n        # 11. \u5224\u65ad\u662f\u5426\u662f\u6570\u5b57\n        # 12. \u5224\u65ad\u662f\u5426\u662f\u5c0f\u6570\n        # 13. \u5224\u65ad\u662f\u5426\u662f\u8d1f\u6570\n        # 14. \u5224\u65ad\u662f\u5426\u662f\u6b63\u6570\n        # 15. \u5224\u65ad\u662f\u5426\u662fe\n        # 16. \u5224\u65ad\u662f\u5426\u662fE\n        # 17. \u5224\u65ad\u662f\u5426\u662f\u7b26\ufffd"
    },
    {
        "number": 66,
        "title": "Plus One",
        "difficulty": 0,
        "prompt": "class Solution:\n    def plusOne(self, digits: List[int]) -> List[int]:\n        \"\"\"\n        You are given a large integer represented as an integer array digits, where each digits[i] is the ith digit of the integer. The digits are ordered from most significant to least significant in left-to-right order. The large integer does not contain any leading 0's.\n        Increment the large integer by one and return the resulting array of digits.\n        Example 1:\n        Input: digits = [1,2,3]\n        Output: [1,2,4]\n        Explanation: The array represents the integer 123.\n        Incrementing by one gives 123 + 1 = 124.\n        Thus, the result should be [1,2,4].\n        Example 2:\n        Input: digits = [4,3,2,1]\n        Output: [4,3,2,2]\n        Explanation: The array represents the integer 4321.\n        Incrementing by one gives 4321 + 1 = 4322.\n        Thus, the result should be [4,3,2,2].\n        Example 3:\n        Input: digits = [9]\n        Output: [1,0]\n        Explanation: The array represents the integer 9.\n        Incrementing by one gives 9 + 1 = 10.\n        Thus, the result should be [1,0].\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        # Runtime: 36 ms, faster than 96.72% of Python3 online submissions for Plus One.\n        # Memory Usage: 14.3 MB, less than 100.00% of Python3 online submissions for Plus One.\n        # Time: O(n)\n        # Space: O(1)\n        # for i in range(len(digits) - 1, -1, -1):\n        #     if digits[i] < 9:\n        #         digits[i] += 1\n        #         return digits\n        #     else:\n        #         digits[i] = 0\n        # return [1] + digits"
    },
    {
        "number": 67,
        "title": "Add Binary",
        "difficulty": 0,
        "prompt": "class Solution:\n    def addBinary(self, a: str, b: str) -> str:\n        \"\"\"\n        Given two binary strings a and b, return their sum as a binary string.\n        Example 1:\n        Input: a = \"11\", b = \"1\"\n        Output: \"100\"\n        Example 2:\n        Input: a = \"1010\", b = \"1011\"\n        Output: \"10101\"\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        # Time complexity: O(max(m, n))\n        # Space complexity: O(max(m, n))\n        # a, b = a[::-1], b[::-1]\n        # carry = 0\n        # res = []\n        # for i in range(max(len(a), len(b))):\n        #     if i < len(a) and i < len(b):\n        #         tmp = int(a[i]) + int(b[i]) + carry\n        #     elif i < len(a):\n        #         tmp = int(a[i]) + carry\n        #     else:\n        #         tmp = int(b[i]) + carry\n        #     if tmp == 0:\n        #         res.append(0)\n        #         carry = 0\n        #     elif tmp == 1:\n        #         res.append(1)\n        #         carry = 0\n        #     elif tmp == 2:\n        #         res.append(0)\n        #         carry = 1\n        #     else:\n        #         res.append(1)\n        #         carry = 1\n        # if carry == 1:\n        #     res.append(1)\n        # return ''.join(map(str, res[::-1"
    },
    {
        "number": 68,
        "title": "Text Justification",
        "difficulty": 2,
        "prompt": "class Solution:\n    def fullJustify(self, words: List[str], maxWidth: int) -> List[str]:\n        \"\"\"\n        Given an array of strings words and a width maxWidth, format the text such that each line has exactly maxWidth characters and is fully (left and right) justified.\n        You should pack your words in a greedy approach; that is, pack as many words as you can in each line. Pad extra spaces'' when necessary so that each line has exactly maxWidth characters.\n        Extra spaces between words should be distributed as evenly as possible. If the number of spaces on a line does not divide evenly between words, the empty slots on the left will be assigned more spaces than the slots on the right.\n        For the last line of text, it should be left-justified, and no extra space is inserted between words.\n        Note:\n            A word is defined as a character sequence consisting of non-space characters only.\n            Each word's length is guaranteed to be greater than 0 and not exceed maxWidth.\n            The input array words contains at least one word.\n        Example 1:\n        Input: words = [\"This\", \"is\", \"an\", \"example\", \"of\", \"text\", \"justification.\"], maxWidth = 16\n        Output:\n        [\n           \"This    is    an\",\n           \"example  of text\",\n           \"justification.  \"\n        ]\n        Example 2:\n        Input: words = [\"What\",\"must\",\"be\",\"acknowledgment\",\"shall\",\"be\"], maxWidth = 16\n        Output:\n        [\n          \"What   must   be\",\n          \"acknowledgment  \",\n          \"shall be        \"\n        ]\n        Explanation: Note that the last line is \"shall be    \" instead of \"shall     be\", because the last line must be left-justified instead of fully-justified.\n        Note that the second line is also left-justified because it contains only one word.\n        Example 3:\n        Input: words = [\"Science\",\"is\",\"what\",\"we\",\"understand\",\"well\",\"enough\",\"to\",\"explain\",\"to\",\"a\",\"computer.\",\"Art\",\"is\",\"everything\",\"else\",\"we\",\"do\"], maxWidth = 20\n        Output:\n        [\n          \"Science  is  what we\",\n          \"understand      well\",\n          \"enough to explain to\",\n          \"a  computer.  Art is\",\n          \"everything  else  we\",\n          \"do                  \"\n        ]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        res = []\n        curr_line = []\n        curr_len = 0\n        for word in words:\n            if curr_len + len(word) + len(curr_line) <= maxWidth:\n                curr_line.append(word)\n                curr_len += len(word)\n            else:\n                # curr_line is full\n                # we need to justify\n                # we need to distribute the spaces\n                # we need to add the word\n                # we need to add the spaces\n                # we need to add the word\n                # we need to add the spaces\n                # we need to add the word\n                # we need to add the spaces\n                # we need to add the word\n                # we need to add the spaces\n                # we need to add the word\n                # we need to add the spaces\n                # we need to add the word\n                # we need to add the spaces\n                # we need to add the word\n                # we need to add the spaces\n                # we need to add the word\n                # we need to add the spaces\n                # we need to add the word\n                # we need to add the spaces\n                # we need to add the word\n                # we need to add the spaces\n                # we need to add the word\n                # we need to add the spaces"
    },
    {
        "number": 69,
        "title": "Sqrt(x)",
        "difficulty": 0,
        "prompt": "class Solution:\n    def mySqrt(self, x: int) -> int:\n        \"\"\"\n        Given a non-negative integer x, return the square root of x rounded down to the nearest integer. The returned integer should be non-negative as well.\n        You must not use any built-in exponent function or operator.\n            For example, do not use pow(x, 0.5) in c++ or x ** 0.5 in python.\n        Example 1:\n        Input: x = 4\n        Output: 2\n        Explanation: The square root of 4 is 2, so we return 2.\n        Example 2:\n        Input: x = 8\n        Output: 2\n        Explanation: The square root of 8 is 2.82842..., and since we round it down to the nearest integer, 2 is returned.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        if x == 0:\n            return 0\n        if x == 1:\n            return 1\n        left, right = 1, x\n        while left <= right:\n            mid = left + (right - left) // 2\n            if mid * mid <= x < (mid + 1) * (mid + 1):\n                return mid\n            elif mid * mid > x:\n                right = mid - 1\n            else:\n                left = mid + 1\n        return right"
    },
    {
        "number": 70,
        "title": "Climbing Stairs",
        "difficulty": 0,
        "prompt": "class Solution:\n    def climbStairs(self, n: int) -> int:\n        \"\"\"\n        You are climbing a staircase. It takes n steps to reach the top.\n        Each time you can either climb 1 or 2 steps. In how many distinct ways can you climb to the top?\n        Example 1:\n        Input: n = 2\n        Output: 2\n        Explanation: There are two ways to climb to the top.\n        1. 1 step + 1 step\n        2. 2 steps\n        Example 2:\n        Input: n = 3\n        Output: 3\n        Explanation: There are three ways to climb to the top.\n        1. 1 step + 1 step + 1 step\n        2. 1 step + 2 steps\n        3. 2 steps + 1 step\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        if n == 1:\n            return 1\n        if n == 2:\n            return 2\n        dp = [0] * n\n        dp[0] = 1\n        dp[1] = 2\n        for i in range(2, n):\n            dp[i] = dp[i - 1] + dp[i - 2]\n        return dp[-1]"
    },
    {
        "number": 71,
        "title": "Simplify Path",
        "difficulty": 1,
        "prompt": "class Solution:\n    def simplifyPath(self, path: str) -> str:\n        \"\"\"\n        Given a string path, which is an absolute path (starting with a slash '/') to a file or directory in a Unix-style file system, convert it to the simplified canonical path.\n        In a Unix-style file system, a period '.' refers to the current directory, a double period '..' refers to the directory up a level, and any multiple consecutive slashes (i.e. '//') are treated as a single slash '/'. For this problem, any other format of periods such as '...' are treated as file/directory names.\n        The canonical path should have the following format:\n            The path starts with a single slash '/'.\n            Any two directories are separated by a single slash '/'.\n            The path does not end with a trailing '/'.\n            The path only contains the directories on the path from the root directory to the target file or directory (i.e., no period '.' or double period '..')\n        Return the simplified canonical path.\n        Example 1:\n        Input: path = \"/home/\"\n        Output: \"/home\"\n        Explanation: Note that there is no trailing slash after the last directory name.\n        Example 2:\n        Input: path = \"/../\"\n        Output: \"/\"\n        Explanation: Going one level up from the root directory is a no-op, as the root level is the highest level you can go.\n        Example 3:\n        Input: path = \"/home//foo/\"\n        Output: \"/home/foo\"\n        Explanation: In the canonical path, multiple consecutive slashes are replaced by a single one.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        stack = []\n        path = path.split(\"/\")\n        for p in path:\n            if p == \"..\":\n                if stack:\n                    stack.pop()\n            elif p and p!= \".\":\n                stack.append(p)\n        return \"/\" + \"/\".join(stack)"
    },
    {
        "number": 72,
        "title": "Edit Distance",
        "difficulty": 2,
        "prompt": "class Solution:\n    def minDistance(self, word1: str, word2: str) -> int:\n        \"\"\"\n        Given two strings word1 and word2, return the minimum number of operations required to convert word1 to word2.\n        You have the following three operations permitted on a word:\n            Insert a character\n            Delete a character\n            Replace a character\n        Example 1:\n        Input: word1 = \"horse\", word2 = \"ros\"\n        Output: 3\n        Explanation: \n        horse -> rorse (replace 'h' with 'r')\n        rorse -> rose (remove 'r')\n        rose -> ros (remove 'e')\n        Example 2:\n        Input: word1 = \"intention\", word2 = \"execution\"\n        Output: 5\n        Explanation: \n        intention -> inention (remove 't')\n        inention -> enention (replace 'i' with 'e')\n        enention -> exention (replace 'n' with 'x')\n        exention -> exection (replace 'n' with 'c')\n        exection -> execution (insert 'u')\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        # dp[i][j] = min(dp[i-1][j], dp[i][j-1], dp[i-1][j-1] + 1 if word1[i]!= word2[j])\n        m, n = len(word1), len(word2)\n        dp = [[0] * (n + 1) for _ in range(m + 1)]\n        for i in range(m + 1):\n            dp[i][0] = i\n        for j in range(n + 1):\n            dp[0][j] = j\n        for i in range(1, m + 1):\n            for j in range(1, n + 1):\n                if word1[i - 1] == word2[j - 1]:\n                    dp[i][j] = dp[i - 1][j - 1]\n                else:\n                    dp[i][j] = min(dp[i - 1][j], dp[i][j - 1], dp[i - 1][j - 1]) + 1\n        return dp[m][n]"
    },
    {
        "number": 73,
        "title": "Set Matrix Zeroes",
        "difficulty": 1,
        "prompt": "class Solution:\n    def setZeroes(self, matrix: List[List[int]]) -> None:\n        \"\"\"\n        Do not return anything, modify matrix in-place instead.\n        Given an m x n integer matrix matrix, if an element is 0, set its entire row and column to 0's.\n        You must do it in place.\n        Example 1:\n        Input: matrix = [[1,1,1],[1,0,1],[1,1,1]]\n        Output: [[1,0,1],[0,0,0],[1,0,1]]\n        Example 2:\n        Input: matrix = [[0,1,2,0],[3,4,5,2],[1,3,1,5]]\n        Output: [[0,0,0,0],[0,4,5,0],[0,3,1,0]]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        m = len(matrix)\n        n = len(matrix[0])\n        row = set()\n        col = set()\n        for i in range(m):\n            for j in range(n):\n                if matrix[i][j] == 0:\n                    row.add(i)\n                    col.add(j)\n        for i in range(m):\n            for j in range(n):\n                if i in row or j in col:\n                    matrix[i][j] = 0\n        return matrix"
    },
    {
        "number": 74,
        "title": "Search a 2D Matrix",
        "difficulty": 1,
        "prompt": "class Solution:\n    def searchMatrix(self, matrix: List[List[int]], target: int) -> bool:\n        \"\"\"\n        You are given an m x n integer matrix matrix with the following two properties:\n            Each row is sorted in non-decreasing order.\n            The first integer of each row is greater than the last integer of the previous row.\n        Given an integer target, return true if target is in matrix or false otherwise.\n        You must write a solution in O(log(m * n)) time complexity.\n        Example 1:\n        Input: matrix = [[1,3,5,7],[10,11,16,20],[23,30,34,60]], target = 3\n        Output: true\n        Example 2:\n        Input: matrix = [[1,3,5,7],[10,11,16,20],[23,30,34,60]], target = 13\n        Output: false\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        if not matrix:\n            return False\n        m, n = len(matrix), len(matrix[0])\n        low, high = 0, m * n - 1\n        while low <= high:\n            mid = (low + high) // 2\n            if matrix[mid // n][mid % n] == target:\n                return True\n            elif matrix[mid // n][mid % n] < target:\n                low = mid + 1\n            else:\n                high = mid - 1\n        return False\n<|endoftext|>"
    },
    {
        "number": 75,
        "title": "Sort Colors",
        "difficulty": 1,
        "prompt": "class Solution:\n    def sortColors(self, nums: List[int]) -> None:\n        \"\"\"\n        Do not return anything, modify nums in-place instead.\n        Given an array nums with n objects colored red, white, or blue, sort them in-place so that objects of the same color are adjacent, with the colors in the order red, white, and blue.\n        We will use the integers 0, 1, and 2 to represent the color red, white, and blue, respectively.\n        You must solve this problem without using the library's sort function.\n        Example 1:\n        Input: nums = [2,0,2,1,1,0]\n        Output: [0,0,1,1,2,2]\n        Example 2:\n        Input: nums = [2,0,1]\n        Output: [0,1,2]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        # \u53cc\u6307\u9488\n        # \u5148\u628a0\u653e\u5230\u5de6\u8fb9\uff0c1\u653e\u5230\u4e2d\u95f4\uff0c2\u653e\u5230\u53f3\u8fb9\n        # \u5de6\u6307\u9488\u6307\u54110\uff0c\u53f3\u6307\u9488\u6307\u5411len(nums) - 1\n        # \u5de6\u6307\u9488\u6307\u54111\uff0c\u53f3\u6307\u9488\u6307\u5411len(nums) - 1\n        # \u5de6\u6307\u9488\u6307\u54112\uff0c\u53f3\u6307\u9488\u6307\u5411len(nums) - 1\n        # \u5de6\u6307\u9488\u6307\u54110\uff0c\u53f3\u6307\u9488\u6307\u5411len(nums) - 1\n        # \u5de6\u6307\u9488\u6307\u54111\uff0c\u53f3\u6307\u9488\u6307\u5411len(nums) - 1\n        # \u5de6\u6307\u9488\u6307\u54112\uff0c\u53f3\u6307\u9488\u6307\u5411len(nums"
    },
    {
        "number": 76,
        "title": "Minimum Window Substring",
        "difficulty": 2,
        "prompt": "class Solution:\n    def minWindow(self, s: str, t: str) -> str:\n        \"\"\"\n        Given two strings s and t of lengths m and n respectively, return the minimum window substring of s such that every character in t (including duplicates) is included in the window. If there is no such substring, return the empty string \"\".\n        The testcases will be generated such that the answer is unique.\n        Example 1:\n        Input: s = \"ADOBECODEBANC\", t = \"ABC\"\n        Output: \"BANC\"\n        Explanation: The minimum window substring \"BANC\" includes 'A', 'B', and 'C' from string t.\n        Example 2:\n        Input: s = \"a\", t = \"a\"\n        Output: \"a\"\n        Explanation: The entire string s is the minimum window.\n        Example 3:\n        Input: s = \"a\", t = \"aa\"\n        Output: \"\"\n        Explanation: Both 'a's from t must be included in the window.\n        Since the largest window of s only has one 'a', return empty string.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        # Time: O(m + n)\n        # Space: O(m + n)\n        if not s or not t:\n            return \"\"\n        \n        # Dictionary which keeps a count of all the unique characters in t.\n        dict_t = Counter(t)"
    },
    {
        "number": 77,
        "title": "Combinations",
        "difficulty": 1,
        "prompt": "class Solution:\n    def combine(self, n: int, k: int) -> List[List[int]]:\n        \"\"\"\n        Given two integers n and k, return all possible combinations of k numbers chosen from the range [1, n].\n        You may return the answer in any order.\n        Example 1:\n        Input: n = 4, k = 2\n        Output: [[1,2],[1,3],[1,4],[2,3],[2,4],[3,4]]\n        Explanation: There are 4 choose 2 = 6 total combinations.\n        Note that combinations are unordered, i.e., [1,2] and [2,1] are considered to be the same combination.\n        Example 2:\n        Input: n = 1, k = 1\n        Output: [[1]]\n        Explanation: There is 1 choose 1 = 1 total combination.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        if k == 0:\n            return [[]]\n        if n == 0:\n            return []\n        if k == 1:\n            return [[i] for i in range(1, n+1)]\n        if k == n:\n            return [[i for i in range(1, n+1)]]\n        return self.combine(n-1, k) + [j + [n] for j in self.combine(n-1, k-1)]"
    },
    {
        "number": 78,
        "title": "Subsets",
        "difficulty": 1,
        "prompt": "class Solution:\n    def subsets(self, nums: List[int]) -> List[List[int]]:\n        \"\"\"\n        Given an integer array nums of unique elements, return all possible subsets (the power set).\n        The solution set must not contain duplicate subsets. Return the solution in any order.\n        Example 1:\n        Input: nums = [1,2,3]\n        Output: [[],[1],[2],[1,2],[3],[1,3],[2,3],[1,2,3]]\n        Example 2:\n        Input: nums = [0]\n        Output: [[],[0]]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        self.res = []\n        self.backtrack(nums, 0, [])\n        return self.res"
    },
    {
        "number": 79,
        "title": "Word Search",
        "difficulty": 1,
        "prompt": "class Solution:\n    def exist(self, board: List[List[str]], word: str) -> bool:\n        \"\"\"\n        Given an m x n grid of characters board and a string word, return true if word exists in the grid.\n        The word can be constructed from letters of sequentially adjacent cells, where adjacent cells are horizontally or vertically neighboring. The same letter cell may not be used more than once.\n        Example 1:\n        Input: board = [[\"A\",\"B\",\"C\",\"E\"],[\"S\",\"F\",\"C\",\"S\"],[\"A\",\"D\",\"E\",\"E\"]], word = \"ABCCED\"\n        Output: true\n        Example 2:\n        Input: board = [[\"A\",\"B\",\"C\",\"E\"],[\"S\",\"F\",\"C\",\"S\"],[\"A\",\"D\",\"E\",\"E\"]], word = \"SEE\"\n        Output: true\n        Example 3:\n        Input: board = [[\"A\",\"B\",\"C\",\"E\"],[\"S\",\"F\",\"C\",\"S\"],[\"A\",\"D\",\"E\",\"E\"]], word = \"ABCB\"\n        Output: false\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        if not board:\n            return False\n        if not word:\n            return True\n        \n        def dfs(i, j, k):\n            if not 0 <= i < len(board) or not 0 <= j < len(board[0]) or board[i][j]!= word[k]:\n                return False\n            if k == len(word) - 1:\n                return True\n            \n            tmp, board[i][j] = board[i][j], '/'\n            res = dfs(i + 1, j, k + 1) or dfs(i - 1, j, k + 1) or dfs(i, j + 1, k + 1) or dfs(i, j - 1, k + 1)\n            board[i][j] = tmp\n            return res\n        \n        for i in range(len(board)):\n            for j in range(len(board[0])):\n                if dfs(i, j, 0):\n                    return True\n        return False\n    \n    def exist_v2(self, board: List[List[str]], word: str) -> bool:\n        \"\"\"\n        Given an m x n grid of characters board and a string word, return true if word exists in the grid.\n        The word can be constructed from letters of sequentially adjacent"
    },
    {
        "number": 80,
        "title": "Remove Duplicates from Sorted Array II",
        "difficulty": 1,
        "prompt": "class Solution:\n    def removeDuplicates(self, nums: List[int]) -> int:\n        \"\"\"\n        Given an integer array nums sorted in non-decreasing order, remove some duplicates in-place such that each unique element appears at most twice. The relative order of the elements should be kept the same.\n        Since it is impossible to change the length of the array in some languages, you must instead have the result be placed in the first part of the array nums. More formally, if there are k elements after removing the duplicates, then the first k elements of nums should hold the final result. It does not matter what you leave beyond the first k elements.\n        Return k after placing the final result in the first k slots of nums.\n        Do not allocate extra space for another array. You must do this by modifying the input array in-place with O(1) extra memory.\n        Custom Judge:\n        The judge will test your solution with the following code:\n        int[] nums = [...]; // Input array\n        int[] expectedNums = [...]; // The expected answer with correct length\n        int k = removeDuplicates(nums); // Calls your implementation\n        assert k == expectedNums.length;\n        for (int i = 0; i < k; i++) {\n            assert nums[i] == expectedNums[i];\n        }\n        If all assertions pass, then your solution will be accepted.\n        Example 1:\n        Input: nums = [1,1,1,2,2,3]\n        Output: 5, nums = [1,1,2,2,3,_]\n        Explanation: Your function should return k = 5, with the first five elements of nums being 1, 1, 2, 2 and 3 respectively.\n        It does not matter what you leave beyond the returned k (hence they are underscores).\n        Example 2:\n        Input: nums = [0,0,1,1,1,1,2,3,3]\n        Output: 7, nums = [0,0,1,1,2,3,3,_,_]\n        Explanation: Your function should return k = 7, with the first seven elements of nums being 0, 0, 1, 1, 2, 3 and 3 respectively.\n        It does not matter what you leave beyond the returned k (hence they are underscores).\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        if len(nums) == 0:\n            return 0\n        if len(nums) == 1:\n            return 1\n        i = 0\n        while i < len(nums) - 1:\n            if nums[i] == nums[i + 1]:\n                nums.pop(i)\n            else:\n                i += 1\n        return len(nums)"
    },
    {
        "number": 81,
        "title": "Search in Rotated Sorted Array II",
        "difficulty": 1,
        "prompt": "class Solution:\n    def search(self, nums: List[int], target: int) -> bool:\n        \"\"\"\n        There is an integer array nums sorted in non-decreasing order (not necessarily with distinct values).\n        Before being passed to your function, nums is rotated at an unknown pivot index k (0 <= k < nums.length) such that the resulting array is [nums[k], nums[k+1],..., nums[n-1], nums[0], nums[1],..., nums[k-1]] (0-indexed). For example, [0,1,2,4,4,4,5,6,6,7] might be rotated at pivot index 5 and become [4,5,6,6,7,0,1,2,4,4].\n        Given the array nums after the rotation and an integer target, return true if target is in nums, or false if it is not in nums.\n        You must decrease the overall operation steps as much as possible.\n        Example 1:\n        Input: nums = [2,5,6,0,0,1,2], target = 0\n        Output: true\n        Example 2:\n        Input: nums = [2,5,6,0,0,1,2], target = 3\n        Output: false\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        # binary search\n        # time complexity: O(logN)\n        # space complexity: O(1)\n        left, right = 0, len(nums) - 1\n        while left <= right:\n            mid = left + (right - left) // 2\n            if nums[mid] == target:\n                return True\n            if nums[left] == nums[mid]:\n                left += 1\n            elif nums[left] <= nums[mid]:\n                if nums[left] <= target < nums[mid]:\n                    right = mid - 1\n                else:\n                    left = mid + 1\n            else:\n                if nums[mid] < target <= nums[right]:\n                    left = mid + 1\n                else:\n                    right = mid - 1\n        return False"
    },
    {
        "number": 82,
        "title": "Remove Duplicates from Sorted List II",
        "difficulty": 1,
        "prompt": "class Solution:\n    def deleteDuplicates(self, head: Optional[ListNode]) -> Optional[ListNode]:\n        \"\"\"\n        Given the head of a sorted linked list, delete all nodes that have duplicate numbers, leaving only distinct numbers from the original list. Return the linked list sorted as well.\n        Example 1:\n        Input: head = [1,2,3,3,4,4,5]\n        Output: [1,2,5]\n        Example 2:\n        Input: head = [1,1,1,2,3]\n        Output: [2,3]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        if not head:\n            return head\n        dummy = ListNode(0)\n        dummy.next = head\n        cur = dummy\n        while cur.next and cur.next.next:\n            if cur.next.val == cur.next.next.val:\n                x = cur.next.val\n                while cur.next and cur.next.val == x:\n                    cur.next = cur.next.next\n            else:\n                cur = cur.next\n        return dummy.next\n<|endoftext|>"
    },
    {
        "number": 83,
        "title": "Remove Duplicates from Sorted List",
        "difficulty": 0,
        "prompt": "class Solution:\n    def deleteDuplicates(self, head: Optional[ListNode]) -> Optional[ListNode]:\n        \"\"\"\n        Given the head of a sorted linked list, delete all duplicates such that each element appears only once. Return the linked list sorted as well.\n        Example 1:\n        Input: head = [1,1,2]\n        Output: [1,2]\n        Example 2:\n        Input: head = [1,1,2,3,3]\n        Output: [1,2,3]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        if not head:\n            return head\n        cur = head\n        while cur.next:\n            if cur.val == cur.next.val:\n                cur.next = cur.next.next\n            else:\n                cur = cur.next\n        return head\n<|endoftext|>"
    },
    {
        "number": 84,
        "title": "Largest Rectangle in Histogram",
        "difficulty": 2,
        "prompt": "class Solution:\n    def largestRectangleArea(self, heights: List[int]) -> int:\n        \"\"\"\n        Given an array of integers heights representing the histogram's bar height where the width of each bar is 1, return the area of the largest rectangle in the histogram.\n        Example 1:\n        Input: heights = [2,1,5,6,2,3]\n        Output: 10\n        Explanation: The above is a histogram where width of each bar is 1.\n        The largest rectangle is shown in the red area, which has an area = 10 units.\n        Example 2:\n        Input: heights = [2,4]\n        Output: 4\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        # \u5355\u8c03\u6808\n        # \u5355\u8c03\u9012\u589e\u6808\uff0c\u6bcf\u6b21\u628a\u5f53\u524d\u5143\u7d20\u538b\u5165\u6808\u4e2d\uff0c\u5e76\u4e14\u6bd4\u8f83\u6808\u9876\u5143\u7d20\u548c\u5f53\u524d\u5143\u7d20\u7684\u5927\u5c0f\uff0c\u82e5\u5f53\u524d\u5143\u7d20\u6bd4\u6808\u9876\u5143\u7d20\u5c0f\uff0c\u5219\u628a\u6808\u9876\u5143\u7d20\u5f39\u51fa\uff0c\u5e76\u4e14\u66f4\u65b0\u7ed3\u679c\uff0c\u82e5\u5f53\u524d\u5143\u7d20\u6bd4\u6808\u9876\u5143\u7d20\u5927\uff0c\u5219\u628a\u5f53\u524d\u5143\u7d20\u538b\u5165\u6808\u4e2d\uff0c\u5e76\u4e14\u66f4\u65b0\u7ed3\u679c\u3002\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        stack = []\n        res = 0\n        for i in range(len(heights)):"
    },
    {
        "number": 85,
        "title": "Maximal Rectangle",
        "difficulty": 2,
        "prompt": "class Solution:\n    def maximalRectangle(self, matrix: List[List[str]]) -> int:\n        \"\"\"\n        Given a rows x cols binary matrix filled with 0's and 1's, find the largest rectangle containing only 1's and return its area.\n        Example 1:\n        Input: matrix = [[\"1\",\"0\",\"1\",\"0\",\"0\"],[\"1\",\"0\",\"1\",\"1\",\"1\"],[\"1\",\"1\",\"1\",\"1\",\"1\"],[\"1\",\"0\",\"0\",\"1\",\"0\"]]\n        Output: 6\n        Explanation: The maximal rectangle is shown in the above picture.\n        Example 2:\n        Input: matrix = [[\"0\"]]\n        Output: 0\n        Example 3:\n        Input: matrix = [[\"1\"]]\n        Output: 1\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        if not matrix:\n            return 0\n        m, n = len(matrix), len(matrix[0])\n        left = [0] * n\n        right = [n] * n\n        height = [0] * n\n        maxarea = 0\n        for i in range(m):\n            cur_left, cur_right = 0, n\n            # update height\n            for j in range(n):\n                if matrix[i][j] == '1':\n                    height[j] += 1\n                else:\n                    height[j] = 0\n            # update left\n            for j in range(n):\n                if matrix[i][j] == '1':\n                    left[j] = max(left[j], cur_left)\n                else:\n                    left[j] = 0\n                    cur_left = j + 1\n            # update right\n            for j in range(n - 1, -1, -1):\n                if matrix[i][j] == '1':\n                    right[j] = min(right[j], cur_right)\n                else:\n                    right[j] = n\n                    cur_right = j\n            # update the area\n            for j in range(n):\n                maxarea = max(maxarea, height[j] * (right[j]"
    },
    {
        "number": 86,
        "title": "Partition List",
        "difficulty": 1,
        "prompt": "class Solution:\n    def partition(self, head: Optional[ListNode], x: int) -> Optional[ListNode]:\n        \"\"\"\n        Given the head of a linked list and a value x, partition it such that all nodes less than x come before nodes greater than or equal to x.\n        You should preserve the original relative order of the nodes in each of the two partitions.\n        Example 1:\n        Input: head = [1,4,3,2,5,2], x = 3\n        Output: [1,2,2,4,3,5]\n        Example 2:\n        Input: head = [2,1], x = 2\n        Output: [1,2]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        if not head:\n            return None\n        \n        # find the node before the pivot\n        before_pivot = before_pivot_head = ListNode(0)\n        while head and head.val < x:\n            before_pivot.next = head\n            before_pivot = before_pivot.next\n            head = head.next\n        \n        # find the node after the pivot\n        after_pivot = after_pivot_head = ListNode(0)\n        while head:\n            if head.val >= x:\n                after_pivot.next = head\n                after_pivot = after_pivot.next\n            head = head.next\n        \n        # connect the two parts\n        before_pivot.next = after_pivot_head.next\n        return before_pivot_head.next\n    \n    def partition_v2(self, head: Optional[ListNode], x: int) -> Optional[ListNode]:\n        \"\"\"\n        Given the head of a linked list and a value x, partition it such that all nodes less than x come before nodes greater than or equal to x.\n        You should preserve the original relative order of the nodes in each of the two partitions.\n        Example 1:\n        Input: head = [1,4,3,2,5,2], x"
    },
    {
        "number": 87,
        "title": "Scramble String",
        "difficulty": 2,
        "prompt": "class Solution:\n    def isScramble(self, s1: str, s2: str) -> bool:\n        \"\"\"\n        We can scramble a string s to get a string t using the following algorithm:\n            If the length of the string is 1, stop.\n            If the length of the string is > 1, do the following:\n                Split the string into two non-empty substrings at a random index, i.e., if the string is s, divide it to x and y where s = x + y.\n                Randomly decide to swap the two substrings or to keep them in the same order. i.e., after this step, s may become s = x + y or s = y + x.\n                Apply step 1 recursively on each of the two substrings x and y.\n        Given two strings s1 and s2 of the same length, return true if s2 is a scrambled string of s1, otherwise, return false.\n        Example 1:\n        Input: s1 = \"great\", s2 = \"rgeat\"\n        Output: true\n        Explanation: One possible scenario applied on s1 is:\n        \"great\" --> \"gr/eat\" // divide at random index.\n        \"gr/eat\" --> \"gr/eat\" // random decision is not to swap the two substrings and keep them in order.\n        \"gr/eat\" --> \"g/r / e/at\" // apply the same algorithm recursively on both substrings. divide at random index each of them.\n        \"g/r / e/at\" --> \"r/g / e/at\" // random decision was to swap the first substring and to keep the second substring in the same order.\n        \"r/g / e/at\" --> \"r/g / e/ a/t\" // again apply the algorithm recursively, divide \"at\" to \"a/t\".\n        \"r/g / e/ a/t\" --> \"r/g / e/ a/t\" // random decision is to keep both substrings in the same order.\n        The algorithm stops now, and the result string is \"rgeat\" which is s2.\n        As one possible scenario led s1 to be scrambled to s2, we return true.\n        Example 2:\n        Input: s1 = \"abcde\", s2 = \"caebd\"\n        Output: false\n        Example 3:\n        Input: s1 = \"a\", s2 = \"a\"\n        Output: true\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        if len(s1)!= len(s2):\n            return False\n        if len(s1) == 1:\n            return s1 == s2\n        if sorted(s1)!= sorted(s2):\n            return False\n        for i in range(1, len(s1)):\n            if self.isScramble(s1[:i], s2[:i]) and self.isScramble(s1[i:], s2[i:]):\n                return True\n            if self.isScramble(s1[:i], s2[-i:]) and self.isScramble(s1[i:], s2[:-i]):\n                return True\n        return False"
    },
    {
        "number": 88,
        "title": "Merge Sorted Array",
        "difficulty": 0,
        "prompt": "class Solution:\n    def merge(self, nums1: List[int], m: int, nums2: List[int], n: int) -> None:\n        \"\"\"\n        Do not return anything, modify nums1 in-place instead.\n        You are given two integer arrays nums1 and nums2, sorted in non-decreasing order, and two integers m and n, representing the number of elements in nums1 and nums2 respectively.\n        Merge nums1 and nums2 into a single array sorted in non-decreasing order.\n        The final sorted array should not be returned by the function, but instead be stored inside the array nums1. To accommodate this, nums1 has a length of m + n, where the first m elements denote the elements that should be merged, and the last n elements are set to 0 and should be ignored. nums2 has a length of n.\n        Example 1:\n        Input: nums1 = [1,2,3,0,0,0], m = 3, nums2 = [2,5,6], n = 3\n        Output: [1,2,2,3,5,6]\n        Explanation: The arrays we are merging are [1,2,3] and [2,5,6].\n        The result of the merge is [1,2,2,3,5,6] with the underlined elements coming from nums1.\n        Example 2:\n        Input: nums1 = [1], m = 1, nums2 = [], n = 0\n        Output: [1]\n        Explanation: The arrays we are merging are [1] and [].\n        The result of the merge is [1].\n        Example 3:\n        Input: nums1 = [0], m = 0, nums2 = [1], n = 1\n        Output: [1]\n        Explanation: The arrays we are merging are [] and [1].\n        The result of the merge is [1].\n        Note that because m = 0, there are no elements in nums1. The 0 is only there to ensure the merge result can fit in nums1.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        i = m - 1\n        j = n - 1\n        k = m + n - 1\n        while i >= 0 and j >= 0:\n            if nums1[i] > nums2[j]:\n                nums1[k] = nums1[i]\n                i -= 1\n            else:\n                nums1[k] = nums2[j]\n                j -= 1\n            k -= 1\n        while j >= 0:\n            nums1[k] = nums2[j]\n            j -= 1\n            k -= 1\n        return nums1"
    },
    {
        "number": 89,
        "title": "Gray Code",
        "difficulty": 1,
        "prompt": "class Solution:\n    def grayCode(self, n: int) -> List[int]:\n        \"\"\"\n        An n-bit gray code sequence is a sequence of 2n integers where:\n            Every integer is in the inclusive range [0, 2n - 1],\n            The first integer is 0,\n            An integer appears no more than once in the sequence,\n            The binary representation of every pair of adjacent integers differs by exactly one bit, and\n            The binary representation of the first and last integers differs by exactly one bit.\n        Given an integer n, return any valid n-bit gray code sequence.\n        Example 1:\n        Input: n = 2\n        Output: [0,1,3,2]\n        Explanation:\n        The binary representation of [0,1,3,2] is [00,01,11,10].\n        - 00 and 01 differ by one bit\n        - 01 and 11 differ by one bit\n        - 11 and 10 differ by one bit\n        - 10 and 00 differ by one bit\n        [0,2,3,1] is also a valid gray code sequence, whose binary representation is [00,10,11,01].\n        - 00 and 10 differ by one bit\n        - 10 and 11 differ by one bit\n        - 11 and 01 differ by one bit\n        - 01 and 00 differ by one bit\n        Example 2:\n        Input: n = 1\n        Output: [0,1]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        return self.gray_code_recursive(n)"
    },
    {
        "number": 90,
        "title": "Subsets II",
        "difficulty": 1,
        "prompt": "class Solution:\n    def subsetsWithDup(self, nums: List[int]) -> List[List[int]]:\n        \"\"\"\n        Given an integer array nums that may contain duplicates, return all possible subsets (the power set).\n        The solution set must not contain duplicate subsets. Return the solution in any order.\n        Example 1:\n        Input: nums = [1,2,2]\n        Output: [[],[1],[1,2],[1,2,2],[2],[2,2]]\n        Example 2:\n        Input: nums = [0]\n        Output: [[],[0]]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        nums.sort()\n        self.res = []\n        self.dfs(nums, [], 0)\n        return self.res"
    },
    {
        "number": 91,
        "title": "Decode Ways",
        "difficulty": 1,
        "prompt": "class Solution:\n    def numDecodings(self, s: str) -> int:\n        \"\"\"\n        A message containing letters from A-Z can be encoded into numbers using the following mapping:\n        'A' -> \"1\"\n        'B' -> \"2\"\n       ...\n        'Z' -> \"26\"\n        To decode an encoded message, all the digits must be grouped then mapped back into letters using the reverse of the mapping above (there may be multiple ways). For example, \"11106\" can be mapped into:\n            \"AAJF\" with the grouping (1 1 10 6)\n            \"KJF\" with the grouping (11 10 6)\n        Note that the grouping (1 11 06) is invalid because \"06\" cannot be mapped into 'F' since \"6\" is different from \"06\".\n        Given a string s containing only digits, return the number of ways to decode it.\n        The test cases are generated so that the answer fits in a 32-bit integer.\n        Example 1:\n        Input: s = \"12\"\n        Output: 2\n        Explanation: \"12\" could be decoded as \"AB\" (1 2) or \"L\" (12).\n        Example 2:\n        Input: s = \"226\"\n        Output: 3\n        Explanation: \"226\" could be decoded as \"BZ\" (2 26), \"VF\" (22 6), or \"BBF\" (2 2 6).\n        Example 3:\n        Input: s = \"06\"\n        Output: 0\n        Explanation: \"06\" cannot be mapped to \"F\" because of the leading zero (\"6\" is different from \"06\").\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        # dp[i] = dp[i-1] if s[i]!= '0'\n        # dp[i] += dp[i-2] if 10 <= int(s[i-1:i+1]) <= 26\n        # return dp[-1]\n        \n        # dp[i] = dp[i-1] if s[i]!= '0'\n        # dp[i] += dp[i-2] if 10 <= int(s[i-1:i+1]) <= 26\n        # return dp[-1]\n        \n        # dp[i] = dp[i-1] if s[i]!= '0'\n        # dp[i] += dp[i-2] if 10 <= int(s[i-1:i+1]) <= 26\n        # return dp[-1]\n        \n        # dp[i] = dp[i-1] if s[i]!= '0'\n        # dp[i] += dp[i-2] if 10 <= int(s[i-1:i+1]) <= 26\n        # return dp[-1]\n        \n        # dp[i] = dp[i-1] if s[i]"
    },
    {
        "number": 92,
        "title": "Reverse Linked List II",
        "difficulty": 1,
        "prompt": "class Solution:\n    def reverseBetween(self, head: Optional[ListNode], left: int, right: int) -> Optional[ListNode]:\n        \"\"\"\n        Given the head of a singly linked list and two integers left and right where left <= right, reverse the nodes of the list from position left to position right, and return the reversed list.\n        Example 1:\n        Input: head = [1,2,3,4,5], left = 2, right = 4\n        Output: [1,4,3,2,5]\n        Example 2:\n        Input: head = [5], left = 1, right = 1\n        Output: [5]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        # base case\n        if not head:\n            return None\n        \n        # if left == right, return head\n        if left == right:\n            return head\n        \n        # if left > right, return None\n        if left > right:\n            return None\n        \n        # if left == 1, return head\n        if left == 1:\n            return head\n        \n        # if left > 1, create dummy head\n        dummy = ListNode(0)\n        dummy.next = head\n        \n        # create prev and curr pointers\n        prev = dummy\n        curr = head\n        \n        # iterate through list\n        for i in range(left - 1):\n            prev = curr\n            curr = curr.next\n        \n        # create new list\n        new_head = curr\n        \n        # iterate through list\n        for i in range(right - left + 1):\n            next_node = curr.next\n            curr.next = prev\n            prev = curr\n            curr = next_node\n        \n        # set prev.next to new_head\n        prev.next = new_head\n        \n        # return new list\n        return dummy.next\n<|endoftext|>"
    },
    {
        "number": 93,
        "title": "Restore IP Addresses",
        "difficulty": 1,
        "prompt": "class Solution:\n    def restoreIpAddresses(self, s: str) -> List[str]:\n        \"\"\"\n        A valid IP address consists of exactly four integers separated by single dots. Each integer is between 0 and 255 (inclusive) and cannot have leading zeros.\n            For example, \"0.1.2.201\" and \"192.168.1.1\" are valid IP addresses, but \"0.011.255.245\", \"192.168.1.312\" and \"192.168@1.1\" are invalid IP addresses.\n        Given a string s containing only digits, return all possible valid IP addresses that can be formed by inserting dots into s. You are not allowed to reorder or remove any digits in s. You may return the valid IP addresses in any order.\n        Example 1:\n        Input: s = \"25525511135\"\n        Output: [\"255.255.11.135\",\"255.255.111.35\"]\n        Example 2:\n        Input: s = \"0000\"\n        Output: [\"0.0.0.0\"]\n        Example 3:\n        Input: s = \"101023\"\n        Output: [\"1.0.10.23\",\"1.0.102.3\",\"10.1.0.23\",\"10.10.2.3\",\"101.0.2.3\"]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        self.res = []\n        self.dfs(s, 0, \"\", 0)\n        return self.res"
    },
    {
        "number": 94,
        "title": "Binary Tree Inorder Traversal",
        "difficulty": 0,
        "prompt": "class Solution:\n    def inorderTraversal(self, root: Optional[TreeNode]) -> List[int]:\n        \"\"\"\n        Given the root of a binary tree, return the inorder traversal of its nodes' values.\n        Example 1:\n        Input: root = [1,null,2,3]\n        Output: [1,3,2]\n        Example 2:\n        Input: root = []\n        Output: []\n        Example 3:\n        Input: root = [1]\n        Output: [1]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        if not root:\n            return []\n        return self.inorderTraversal(root.left) + [root.val] + self.inorderTraversal(root.right)\n<|endoftext|>"
    },
    {
        "number": 95,
        "title": "Unique Binary Search Trees II",
        "difficulty": 1,
        "prompt": "class Solution:\n    def generateTrees(self, n: int) -> List[Optional[TreeNode]]:\n        \"\"\"\n        Given an integer n, return all the structurally unique BST's (binary search trees), which has exactly n nodes of unique values from 1 to n. Return the answer in any order.\n        Example 1:\n        Input: n = 3\n        Output: [[1,null,2,null,3],[1,null,3,2],[2,1,3],[3,1,null,null,2],[3,2,null,1]]\n        Example 2:\n        Input: n = 1\n        Output: [[1]]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        if n == 0:\n            return []\n        return self.generate_trees(1, n)"
    },
    {
        "number": 96,
        "title": "Unique Binary Search Trees",
        "difficulty": 1,
        "prompt": "class Solution:\n    def numTrees(self, n: int) -> int:\n        \"\"\"\n        Given an integer n, return the number of structurally unique BST's (binary search trees) which has exactly n nodes of unique values from 1 to n.\n        Example 1:\n        Input: n = 3\n        Output: 5\n        Example 2:\n        Input: n = 1\n        Output: 1\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        if n == 0:\n            return 0\n        if n == 1:\n            return 1\n        dp = [0] * (n + 1)\n        dp[0] = 1\n        dp[1] = 1\n        for i in range(2, n + 1):\n            for j in range(1, i + 1):\n                dp[i] += dp[j - 1] * dp[i - j]\n        return dp[n]"
    },
    {
        "number": 97,
        "title": "Interleaving String",
        "difficulty": 1,
        "prompt": "class Solution:\n    def isInterleave(self, s1: str, s2: str, s3: str) -> bool:\n        \"\"\"\n        Given strings s1, s2, and s3, find whether s3 is formed by an interleaving of s1 and s2.\n        An interleaving of two strings s and t is a configuration where s and t are divided into n and m substrings respectively, such that:\n            s = s1 + s2 +... + sn\n            t = t1 + t2 +... + tm\n            |n - m| <= 1\n            The interleaving is s1 + t1 + s2 + t2 + s3 + t3 +... or t1 + s1 + t2 + s2 + t3 + s3 +...\n        Note: a + b is the concatenation of strings a and b.\n        Example 1:\n        Input: s1 = \"aabcc\", s2 = \"dbbca\", s3 = \"aadbbcbcac\"\n        Output: true\n        Explanation: One way to obtain s3 is:\n        Split s1 into s1 = \"aa\" + \"bc\" + \"c\", and s2 into s2 = \"dbbc\" + \"a\".\n        Interleaving the two splits, we get \"aa\" + \"dbbc\" + \"bc\" + \"a\" + \"c\" = \"aadbbcbcac\".\n        Since s3 can be obtained by interleaving s1 and s2, we return true.\n        Example 2:\n        Input: s1 = \"aabcc\", s2 = \"dbbca\", s3 = \"aadbbbaccc\"\n        Output: false\n        Explanation: Notice how it is impossible to interleave s2 with any other string to obtain s3.\n        Example 3:\n        Input: s1 = \"\", s2 = \"\", s3 = \"\"\n        Output: true\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        if len(s1) + len(s2)!= len(s3):\n            return False\n        if len(s1) == 0:\n            return s2 == s3\n        if len(s2) == 0:\n            return s1 == s3\n        dp = [[False] * (len(s2) + 1) for _ in range(len(s1) + 1)]\n        dp[0][0] = True\n        for i in range(1, len(s1) + 1):\n            dp[i][0] = dp[i - 1][0] and s1[i - 1] == s3[i - 1]\n        for j in range(1, len(s2) + 1):\n            dp[0][j] = dp[0][j - 1] and s2[j - 1] == s3[j - 1]\n        for i in range(1, len(s1) + 1):\n            for j in range(1, len(s2) + 1):\n                dp[i][j] = (dp[i - 1][j] and s1[i - 1] == s3[i + j - 1]) or (dp[i][j - 1] and s2[j - 1] == s3[i + j - 1"
    },
    {
        "number": 98,
        "title": "Validate Binary Search Tree",
        "difficulty": 1,
        "prompt": "class Solution:\n    def isValidBST(self, root: Optional[TreeNode]) -> bool:\n        \"\"\"\n        Given the root of a binary tree, determine if it is a valid binary search tree (BST).\n        A valid BST is defined as follows:\n            The left subtree of a node contains only nodes with keys less than the node's key.\n            The right subtree of a node contains only nodes with keys greater than the node's key.\n            Both the left and right subtrees must also be binary search trees.\n        Example 1:\n        Input: root = [2,1,3]\n        Output: true\n        Example 2:\n        Input: root = [5,1,4,null,null,3,6]\n        Output: false\n        Explanation: The root node's value is 5 but its right child's value is 4.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        return self.isValidBSTHelper(root, float('-inf'), float('inf'))"
    },
    {
        "number": 99,
        "title": "Recover Binary Search Tree",
        "difficulty": 1,
        "prompt": "class Solution:\n    def recoverTree(self, root: Optional[TreeNode]) -> None:\n        \"\"\"\n        Do not return anything, modify root in-place instead.\n        You are given the root of a binary search tree (BST), where the values of exactly two nodes of the tree were swapped by mistake. Recover the tree without changing its structure.\n        Example 1:\n        Input: root = [1,3,null,null,2]\n        Output: [3,1,null,null,2]\n        Explanation: 3 cannot be a left child of 1 because 3 > 1. Swapping 1 and 3 makes the BST valid.\n        Example 2:\n        Input: root = [3,1,4,null,null,2]\n        Output: [2,1,4,null,null,3]\n        Explanation: 2 cannot be in the right subtree of 3 because 2 < 3. Swapping 2 and 3 makes the BST valid.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        self.first, self.second = None, None\n        self.prev = TreeNode(float('-inf'))\n        \n        def inorder(root):\n            if not root:\n                return\n            inorder(root.left)\n            if self.first is None and self.prev.val >= root.val:\n                self.first = self.prev\n            if self.first is not None and self.prev.val >= root.val:\n                self.second = root\n            self.prev = root\n            inorder(root.right)\n        \n        inorder(root)\n        self.first.val, self.second.val = self.second.val, self.first.val\n<|endoftext|>"
    },
    {
        "number": 100,
        "title": "Same Tree",
        "difficulty": 0,
        "prompt": "class Solution:\n    def isSameTree(self, p: Optional[TreeNode], q: Optional[TreeNode]) -> bool:\n        \"\"\"\n        Given the roots of two binary trees p and q, write a function to check if they are the same or not.\n        Two binary trees are considered the same if they are structurally identical, and the nodes have the same value.\n        Example 1:\n        Input: p = [1,2,3], q = [1,2,3]\n        Output: true\n        Example 2:\n        Input: p = [1,2], q = [1,null,2]\n        Output: false\n        Example 3:\n        Input: p = [1,2,1], q = [1,1,2]\n        Output: false\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        if not p and not q:\n            return True\n        if not p or not q:\n            return False\n        if p.val!= q.val:\n            return False\n        return self.isSameTree(p.left, q.left) and self.isSameTree(p.right, q.right)"
    },
    {
        "number": 101,
        "title": "Symmetric Tree",
        "difficulty": 0,
        "prompt": "class Solution:\n    def isSymmetric(self, root: Optional[TreeNode]) -> bool:\n        \"\"\"\n        Given the root of a binary tree, check whether it is a mirror of itself (i.e., symmetric around its center).\n        Example 1:\n        Input: root = [1,2,2,3,4,4,3]\n        Output: true\n        Example 2:\n        Input: root = [1,2,2,null,3,null,3]\n        Output: false\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        if not root:\n            return True\n        return self.isSymmetricHelper(root.left, root.right)"
    },
    {
        "number": 102,
        "title": "Binary Tree Level Order Traversal",
        "difficulty": 1,
        "prompt": "class Solution:\n    def levelOrder(self, root: Optional[TreeNode]) -> List[List[int]]:\n        \"\"\"\n        Given the root of a binary tree, return the level order traversal of its nodes' values. (i.e., from left to right, level by level).\n        Example 1:\n        Input: root = [3,9,20,null,null,15,7]\n        Output: [[3],[9,20],[15,7]]\n        Example 2:\n        Input: root = [1]\n        Output: [[1]]\n        Example 3:\n        Input: root = []\n        Output: []\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        if not root:\n            return []\n        queue = [root]\n        res = []\n        while queue:\n            level = []\n            for _ in range(len(queue)):\n                node = queue.pop(0)\n                level.append(node.val)\n                if node.left:\n                    queue.append(node.left)\n                if node.right:\n                    queue.append(node.right)\n            res.append(level)\n        return res\n<|endoftext|>"
    },
    {
        "number": 103,
        "title": "Binary Tree Zigzag Level Order Traversal",
        "difficulty": 1,
        "prompt": "class Solution:\n    def zigzagLevelOrder(self, root: Optional[TreeNode]) -> List[List[int]]:\n        \"\"\"\n        Given the root of a binary tree, return the zigzag level order traversal of its nodes' values. (i.e., from left to right, then right to left for the next level and alternate between).\n        Example 1:\n        Input: root = [3,9,20,null,null,15,7]\n        Output: [[3],[20,9],[15,7]]\n        Example 2:\n        Input: root = [1]\n        Output: [[1]]\n        Example 3:\n        Input: root = []\n        Output: []\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        if not root:\n            return []\n        queue = [root]\n        res = []\n        while queue:\n            cur_level = []\n            next_queue = []\n            for node in queue:\n                cur_level.append(node.val)\n                if node.left:\n                    next_queue.append(node.left)\n                if node.right:\n                    next_queue.append(node.right)\n            if len(res) % 2 == 0:\n                res.append(cur_level)\n            else:\n                res.append(cur_level[::-1])\n            queue = next_queue\n        return res\n<|endoftext|>"
    },
    {
        "number": 104,
        "title": "Maximum Depth of Binary Tree",
        "difficulty": 0,
        "prompt": "class Solution:\n    def maxDepth(self, root: Optional[TreeNode]) -> int:\n        \"\"\"\n        Given the root of a binary tree, return its maximum depth.\n        A binary tree's maximum depth is the number of nodes along the longest path from the root node down to the farthest leaf node.\n        Example 1:\n        Input: root = [3,9,20,null,null,15,7]\n        Output: 3\n        Example 2:\n        Input: root = [1,null,2]\n        Output: 2\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        if not root:\n            return 0\n        return 1 + max(self.maxDepth(root.left), self.maxDepth(root.right))\n<|endoftext|>"
    },
    {
        "number": 105,
        "title": "Construct Binary Tree from Preorder and Inorder Traversal",
        "difficulty": 1,
        "prompt": "class Solution:\n    def buildTree(self, preorder: List[int], inorder: List[int]) -> Optional[TreeNode]:\n        \"\"\"\n        Given two integer arrays preorder and inorder where preorder is the preorder traversal of a binary tree and inorder is the inorder traversal of the same tree, construct and return the binary tree.\n        Example 1:\n        Input: preorder = [3,9,20,15,7], inorder = [9,3,15,20,7]\n        Output: [3,9,20,null,null,15,7]\n        Example 2:\n        Input: preorder = [-1], inorder = [-1]\n        Output: [-1]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        if not preorder or not inorder:\n            return None\n        root = TreeNode(preorder[0])\n        mid = inorder.index(preorder[0])\n        root.left = self.buildTree(preorder[1:mid+1], inorder[:mid])\n        root.right = self.buildTree(preorder[mid+1:], inorder[mid+1:])\n        return root\n<|endoftext|>"
    },
    {
        "number": 106,
        "title": "Construct Binary Tree from Inorder and Postorder Traversal",
        "difficulty": 1,
        "prompt": "class Solution:\n    def buildTree(self, inorder: List[int], postorder: List[int]) -> Optional[TreeNode]:\n        \"\"\"\n        Given two integer arrays inorder and postorder where inorder is the inorder traversal of a binary tree and postorder is the postorder traversal of the same tree, construct and return the binary tree.\n        Example 1:\n        Input: inorder = [9,3,15,20,7], postorder = [9,15,7,20,3]\n        Output: [3,9,20,null,null,15,7]\n        Example 2:\n        Input: inorder = [-1], postorder = [-1]\n        Output: [-1]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        if not inorder or not postorder:\n            return None\n        root = TreeNode(postorder[-1])\n        mid = inorder.index(postorder[-1])\n        root.left = self.buildTree(inorder[:mid], postorder[:mid])\n        root.right = self.buildTree(inorder[mid+1:], postorder[mid:-1])\n        return root\n<|endoftext|>"
    },
    {
        "number": 107,
        "title": "Binary Tree Level Order Traversal II",
        "difficulty": 1,
        "prompt": "class Solution:\n    def levelOrderBottom(self, root: Optional[TreeNode]) -> List[List[int]]:\n        \"\"\"\n        Given the root of a binary tree, return the bottom-up level order traversal of its nodes' values. (i.e., from left to right, level by level from leaf to root).\n        Example 1:\n        Input: root = [3,9,20,null,null,15,7]\n        Output: [[15,7],[9,20],[3]]\n        Example 2:\n        Input: root = [1]\n        Output: [[1]]\n        Example 3:\n        Input: root = []\n        Output: []\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        if not root:\n            return []\n        queue = [root]\n        res = []\n        while queue:\n            cur_level = []\n            next_level = []\n            for node in queue:\n                cur_level.append(node.val)\n                if node.left:\n                    next_level.append(node.left)\n                if node.right:\n                    next_level.append(node.right)\n            res.append(cur_level)\n            queue = next_level\n        return res[::-1]\n<|endoftext|>"
    },
    {
        "number": 108,
        "title": "Convert Sorted Array to Binary Search Tree",
        "difficulty": 0,
        "prompt": "class Solution:\n    def sortedArrayToBST(self, nums: List[int]) -> Optional[TreeNode]:\n        \"\"\"\n        Given an integer array nums where the elements are sorted in ascending order, convert it to a height-balanced binary search tree.\n        Example 1:\n        Input: nums = [-10,-3,0,5,9]\n        Output: [0,-3,9,-10,null,5]\n        Explanation: [0,-10,5,null,-3,null,9] is also accepted:\n        Example 2:\n        Input: nums = [1,3]\n        Output: [3,1]\n        Explanation: [1,null,3] and [3,1] are both height-balanced BSTs.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        if not nums:\n            return None\n        mid = len(nums) // 2\n        root = TreeNode(nums[mid])\n        root.left = self.sortedArrayToBST(nums[:mid])\n        root.right = self.sortedArrayToBST(nums[mid+1:])\n        return root\n<|endoftext|>"
    },
    {
        "number": 109,
        "title": "Convert Sorted List to Binary Search Tree",
        "difficulty": 1,
        "prompt": "class Solution:\n    def sortedListToBST(self, head: Optional[ListNode]) -> Optional[TreeNode]:\n        \"\"\"\n        Given the head of a singly linked list where elements are sorted in ascending order, convert it to a height-balanced binary search tree.\n        Example 1:\n        Input: head = [-10,-3,0,5,9]\n        Output: [0,-3,9,-10,null,5]\n        Explanation: One possible answer is [0,-3,9,-10,null,5], which represents the shown height balanced BST.\n        Example 2:\n        Input: head = []\n        Output: []\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        if not head:\n            return None\n        if not head.next:\n            return TreeNode(head.val)"
    },
    {
        "number": 110,
        "title": "Balanced Binary Tree",
        "difficulty": 0,
        "prompt": "class Solution:\n    def isBalanced(self, root: Optional[TreeNode]) -> bool:\n        \"\"\"\n        Given a binary tree, determine if it is height-balanced.\n        Example 1:\n        Input: root = [3,9,20,null,null,15,7]\n        Output: true\n        Example 2:\n        Input: root = [1,2,2,3,3,null,null,4,4]\n        Output: false\n        Example 3:\n        Input: root = []\n        Output: true\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        if not root:\n            return True\n        return self.isBalanced(root.left) and self.isBalanced(root.right) and abs(self.height(root.left) - self.height(root.right)) <= 1"
    },
    {
        "number": 111,
        "title": "Minimum Depth of Binary Tree",
        "difficulty": 0,
        "prompt": "class Solution:\n    def minDepth(self, root: Optional[TreeNode]) -> int:\n        \"\"\"\n        Given a binary tree, find its minimum depth.\n        The minimum depth is the number of nodes along the shortest path from the root node down to the nearest leaf node.\n        Note: A leaf is a node with no children.\n        Example 1:\n        Input: root = [3,9,20,null,null,15,7]\n        Output: 2\n        Example 2:\n        Input: root = [2,null,3,null,4,null,5,null,6]\n        Output: 5\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        if not root:\n            return 0\n        if not root.left and not root.right:\n            return 1\n        if not root.left:\n            return 1 + self.minDepth(root.right)\n        if not root.right:\n            return 1 + self.minDepth(root.left)\n        return 1 + min(self.minDepth(root.left), self.minDepth(root.right))"
    },
    {
        "number": 112,
        "title": "Path Sum",
        "difficulty": 0,
        "prompt": "class Solution:\n    def hasPathSum(self, root: Optional[TreeNode], targetSum: int) -> bool:\n        \"\"\"\n        Given the root of a binary tree and an integer targetSum, return true if the tree has a root-to-leaf path such that adding up all the values along the path equals targetSum.\n        A leaf is a node with no children.\n        Example 1:\n        Input: root = [5,4,8,11,null,13,4,7,2,null,null,null,1], targetSum = 22\n        Output: true\n        Explanation: The root-to-leaf path with the target sum is shown.\n        Example 2:\n        Input: root = [1,2,3], targetSum = 5\n        Output: false\n        Explanation: There two root-to-leaf paths in the tree:\n        (1 --> 2): The sum is 3.\n        (1 --> 3): The sum is 4.\n        There is no root-to-leaf path with sum = 5.\n        Example 3:\n        Input: root = [], targetSum = 0\n        Output: false\n        Explanation: Since the tree is empty, there are no root-to-leaf paths.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        if not root:\n            return False\n        if not root.left and not root.right:\n            return root.val == targetSum\n        return self.hasPathSum(root.left, targetSum - root.val) or self.hasPathSum(root.right, targetSum - root.val)\n<|endoftext|>"
    },
    {
        "number": 113,
        "title": "Path Sum II",
        "difficulty": 1,
        "prompt": "class Solution:\n    def pathSum(self, root: Optional[TreeNode], targetSum: int) -> List[List[int]]:\n        \"\"\"\n        Given the root of a binary tree and an integer targetSum, return all root-to-leaf paths where the sum of the node values in the path equals targetSum. Each path should be returned as a list of the node values, not node references.\n        A root-to-leaf path is a path starting from the root and ending at any leaf node. A leaf is a node with no children.\n        Example 1:\n        Input: root = [5,4,8,11,null,13,4,7,2,null,null,5,1], targetSum = 22\n        Output: [[5,4,11,2],[5,8,4,5]]\n        Explanation: There are two paths whose sum equals targetSum:\n        5 + 4 + 11 + 2 = 22\n        5 + 8 + 4 + 5 = 22\n        Example 2:\n        Input: root = [1,2,3], targetSum = 5\n        Output: []\n        Example 3:\n        Input: root = [1,2], targetSum = 0\n        Output: []\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        if not root:\n            return []\n        res = []\n        self.dfs(root, targetSum, [], res)\n        return res"
    },
    {
        "number": 114,
        "title": "Flatten Binary Tree to Linked List",
        "difficulty": 1,
        "prompt": "class Solution:\n    def flatten(self, root: Optional[TreeNode]) -> None:\n        \"\"\"\n        Do not return anything, modify root in-place instead.\n        Given the root of a binary tree, flatten the tree into a \"linked list\":\n            The \"linked list\" should use the same TreeNode class where the right child pointer points to the next node in the list and the left child pointer is always null.\n            The \"linked list\" should be in the same order as a pre-order traversal of the binary tree.\n        Example 1:\n        Input: root = [1,2,5,3,4,null,6]\n        Output: [1,null,2,null,3,null,4,null,5,null,6]\n        Example 2:\n        Input: root = []\n        Output: []\n        Example 3:\n        Input: root = [0]\n        Output: [0]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        if not root:\n            return None\n        self.flatten_helper(root)\n        return root"
    },
    {
        "number": 115,
        "title": "Distinct Subsequences",
        "difficulty": 2,
        "prompt": "class Solution:\n    def numDistinct(self, s: str, t: str) -> int:\n        \"\"\"\n        Given two strings s and t, return the number of distinct subsequences of s which equals t.\n        The test cases are generated so that the answer fits on a 32-bit signed integer.\n        Example 1:\n        Input: s = \"rabbbit\", t = \"rabbit\"\n        Output: 3\n        Explanation:\n        As shown below, there are 3 ways you can generate \"rabbit\" from s.\n        rabbbit\n        rabbbit\n        rabbbit\n        Example 2:\n        Input: s = \"babgbag\", t = \"bag\"\n        Output: 5\n        Explanation:\n        As shown below, there are 5 ways you can generate \"bag\" from s.\n        babgbag\n        babgbag\n        babgbag\n        babgbag\n        babgbag\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        m, n = len(s), len(t)\n        dp = [[0] * (n + 1) for _ in range(m + 1)]\n        for j in range(n + 1):\n            dp[0][j] = 1\n        for i in range(1, m + 1):\n            for j in range(1, n + 1):\n                if s[i - 1] == t[j - 1]:\n                    dp[i][j] = dp[i - 1][j - 1] + dp[i - 1][j]\n                else:\n                    dp[i][j] = dp[i - 1][j]\n        return dp[-1][-1]"
    },
    {
        "number": 116,
        "title": "Populating Next Right Pointers in Each Node",
        "difficulty": 1,
        "prompt": "\n        \"\"\"\nclass Node:\n    def __init__(self, val: int = 0, left: 'Node' = None, right: 'Node' = None, next: 'Node' = None):\n        self.val = val\n        self.left = left\n        self.right = right\n        self.next = next\n        You are given a perfect binary tree where all leaves are on the same level, and every parent has two children. The binary tree has the following definition:\n        struct Node {\n          int val;\n          Node *left;\n          Node *right;\n          Node *next;\n        }\n        Populate each next pointer to point to its next right node. If there is no next right node, the next pointer should be set to NULL.\n        Initially, all next pointers are set to NULL.\n        Example 1:\n        Input: root = [1,2,3,4,5,6,7]\n        Output: [1,#,2,3,#,4,5,6,7,#]\n        Explanation: Given the above perfect binary tree (Figure A), your function should populate each next pointer to point to its next right node, just like in Figure B. The serialized output is in level order as connected by the next pointers, with '#' signifying the end of each level.\n        Example 2:\n        Input: root = []\n        Output: []\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        self.val = val\n        self.left = left\n        self.right = right\n        self.next = next\n        \"\"\"\n        # Definition for a Node.\n        class Node:\n            def __init__(self, val: int = 0, left: 'Node' = None, right: 'Node' = None, next: 'Node' = None):\n                self.val = val\n                self.left = left\n                self.right = right\n                self.next = next\n        \"\"\"\n        # self.next = next\n        # self.left = left\n        # self.right = right\n        # self.next = next\n        # self.left = left\n        # self.right = right\n        # self.next = next\n        # self.left = left\n        # self.right = right\n        # self.next = next\n        # self.left = left\n        # self.right = right\n        # self.next = next\n        # self.left = left\n        # self.right = right\n        # self.next = next\n        # self.left = left\n        # self.right = right\n        # self.next = next\n        # self.left = left\n        # self.right = right\n        # self.next = next\n        # self.left = left\n        #"
    },
    {
        "number": 117,
        "title": "Populating Next Right Pointers in Each Node II",
        "difficulty": 1,
        "prompt": "\n        \"\"\"\nclass Node:\n    def __init__(self, val: int = 0, left: 'Node' = None, right: 'Node' = None, next: 'Node' = None):\n        self.val = val\n        self.left = left\n        self.right = right\n        self.next = next\n        Given a binary tree\n        struct Node {\n          int val;\n          Node *left;\n          Node *right;\n          Node *next;\n        }\n        Populate each next pointer to point to its next right node. If there is no next right node, the next pointer should be set to NULL.\n        Initially, all next pointers are set to NULL.\n        Example 1:\n        Input: root = [1,2,3,4,5,null,7]\n        Output: [1,#,2,3,#,4,5,7,#]\n        Explanation: Given the above binary tree (Figure A), your function should populate each next pointer to point to its next right node, just like in Figure B. The serialized output is in level order as connected by the next pointers, with '#' signifying the end of each level.\n        Example 2:\n        Input: root = []\n        Output: []\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        self.val = val\n        self.left = left\n        self.right = right\n        self.next = next\n        \"\"\"\n        # Definition for a Node.\n        class Node:\n            def __init__(self, val: int = 0, left: 'Node' = None, right: 'Node' = None, next: 'Node' = None):\n                self.val = val\n                self.left = left\n                self.right = right\n                self.next = next\n        Given a binary tree\n        struct Node {\n          int val;\n          Node *left;\n          Node *right;\n          Node *next;\n        }\n        Populate each next pointer to point to its next right node. If there is no next right node, the next pointer should be set to NULL.\n        Initially, all next pointers are set to NULL.\n        Example 1:\n        Input: root = [1,2,3,4,5,null,7]\n        Output: [1,#,2,3,#,4,5,7,#]\n        Explanation: Given the above binary tree (Figure A), your function should populate each next pointer to point to its next right node, just like in Figure B. The serialized output is in level order as connected by the next pointers, with '#' signifying the end of"
    },
    {
        "number": 118,
        "title": "Pascal\"s Triangle",
        "difficulty": 0,
        "prompt": "class Solution:\n    def generate(self, numRows: int) -> List[List[int]]:\n        \"\"\"\n        Given an integer numRows, return the first numRows of Pascal's triangle.\n        In Pascal's triangle, each number is the sum of the two numbers directly above it as shown:\n        Example 1:\n        Input: numRows = 5\n        Output: [[1],[1,1],[1,2,1],[1,3,3,1],[1,4,6,4,1]]\n        Example 2:\n        Input: numRows = 1\n        Output: [[1]]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        if numRows == 0:\n            return []\n        if numRows == 1:\n            return [[1]]\n        if numRows == 2:\n            return [[1], [1, 1]]\n        if numRows == 3:\n            return [[1], [1, 1], [1, 2, 1]]\n        if numRows == 4:\n            return [[1], [1, 1], [1, 2, 1], [1, 3, 3, 1]]\n        if numRows == 5:\n            return [[1], [1, 1], [1, 2, 1], [1, 3, 3, 1], [1, 4, 6, 4, 1]]"
    },
    {
        "number": 119,
        "title": "Pascal\"s Triangle II",
        "difficulty": 0,
        "prompt": "class Solution:\n    def getRow(self, rowIndex: int) -> List[int]:\n        \"\"\"\n        Given an integer rowIndex, return the rowIndexth (0-indexed) row of the Pascal's triangle.\n        In Pascal's triangle, each number is the sum of the two numbers directly above it as shown:\n        Example 1:\n        Input: rowIndex = 3\n        Output: [1,3,3,1]\n        Example 2:\n        Input: rowIndex = 0\n        Output: [1]\n        Example 3:\n        Input: rowIndex = 1\n        Output: [1,1]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        if rowIndex == 0:\n            return [1]\n        if rowIndex == 1:\n            return [1, 1]\n        res = [1, 1]\n        for i in range(2, rowIndex + 1):\n            tmp = [1]\n            for j in range(1, i):\n                tmp.append(res[j - 1] + res[j])\n            tmp.append(1)\n            res = tmp\n        return res\n<|endoftext|>"
    },
    {
        "number": 120,
        "title": "Triangle",
        "difficulty": 1,
        "prompt": "class Solution:\n    def minimumTotal(self, triangle: List[List[int]]) -> int:\n        \"\"\"\n        Given a triangle array, return the minimum path sum from top to bottom.\n        For each step, you may move to an adjacent number of the row below. More formally, if you are on index i on the current row, you may move to either index i or index i + 1 on the next row.\n        Example 1:\n        Input: triangle = [[2],[3,4],[6,5,7],[4,1,8,3]]\n        Output: 11\n        Explanation: The triangle looks like:\n           2\n          3 4\n         6 5 7\n        4 1 8 3\n        The minimum path sum from top to bottom is 2 + 3 + 5 + 1 = 11 (underlined above).\n        Example 2:\n        Input: triangle = [[-10]]\n        Output: -10\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        if not triangle:\n            return 0\n        if len(triangle) == 1:\n            return triangle[0][0]\n        for i in range(1, len(triangle)):\n            for j in range(len(triangle[i])):\n                if j == 0:\n                    triangle[i][j] += triangle[i - 1][j]\n                elif j == len(triangle[i]) - 1:\n                    triangle[i][j] += triangle[i - 1][j - 1]\n                else:\n                    triangle[i][j] += min(triangle[i - 1][j - 1], triangle[i - 1][j])\n        return min(triangle[-1])"
    },
    {
        "number": 121,
        "title": "Best Time to Buy and Sell Stock",
        "difficulty": 0,
        "prompt": "class Solution:\n    def maxProfit(self, prices: List[int]) -> int:\n        \"\"\"\n        You are given an array prices where prices[i] is the price of a given stock on the ith day.\n        You want to maximize your profit by choosing a single day to buy one stock and choosing a different day in the future to sell that stock.\n        Return the maximum profit you can achieve from this transaction. If you cannot achieve any profit, return 0.\n        Example 1:\n        Input: prices = [7,1,5,3,6,4]\n        Output: 5\n        Explanation: Buy on day 2 (price = 1) and sell on day 5 (price = 6), profit = 6-1 = 5.\n        Note that buying on day 2 and selling on day 1 is not allowed because you must buy before you sell.\n        Example 2:\n        Input: prices = [7,6,4,3,1]\n        Output: 0\n        Explanation: In this case, no transactions are done and the max profit = 0.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        if len(prices) < 2:\n            return 0\n        max_profit = 0\n        min_price = prices[0]\n        for price in prices:\n            min_price = min(min_price, price)\n            max_profit = max(max_profit, price - min_price)\n        return max_profit"
    },
    {
        "number": 122,
        "title": "Best Time to Buy and Sell Stock II",
        "difficulty": 1,
        "prompt": "class Solution:\n    def maxProfit(self, prices: List[int]) -> int:\n        \"\"\"\n        You are given an integer array prices where prices[i] is the price of a given stock on the ith day.\n        On each day, you may decide to buy and/or sell the stock. You can only hold at most one share of the stock at any time. However, you can buy it then immediately sell it on the same day.\n        Find and return the maximum profit you can achieve.\n        Example 1:\n        Input: prices = [7,1,5,3,6,4]\n        Output: 7\n        Explanation: Buy on day 2 (price = 1) and sell on day 3 (price = 5), profit = 5-1 = 4.\n        Then buy on day 4 (price = 3) and sell on day 5 (price = 6), profit = 6-3 = 3.\n        Total profit is 4 + 3 = 7.\n        Example 2:\n        Input: prices = [1,2,3,4,5]\n        Output: 4\n        Explanation: Buy on day 1 (price = 1) and sell on day 5 (price = 5), profit = 5-1 = 4.\n        Total profit is 4.\n        Example 3:\n        Input: prices = [7,6,4,3,1]\n        Output: 0\n        Explanation: There is no way to make a positive profit, so we never buy the stock to achieve the maximum profit of 0.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        # Time complexity: O(n)\n        # Space complexity: O(1)\n        max_profit = 0\n        for i in range(1, len(prices)):\n            if prices[i] > prices[i-1]:\n                max_profit += prices[i] - prices[i-1]\n        return max_profit"
    },
    {
        "number": 123,
        "title": "Best Time to Buy and Sell Stock III",
        "difficulty": 2,
        "prompt": "class Solution:\n    def maxProfit(self, prices: List[int]) -> int:\n        \"\"\"\n        You are given an array prices where prices[i] is the price of a given stock on the ith day.\n        Find the maximum profit you can achieve. You may complete at most two transactions.\n        Note: You may not engage in multiple transactions simultaneously (i.e., you must sell the stock before you buy again).\n        Example 1:\n        Input: prices = [3,3,5,0,0,3,1,4]\n        Output: 6\n        Explanation: Buy on day 4 (price = 0) and sell on day 6 (price = 3), profit = 3-0 = 3.\n        Then buy on day 7 (price = 1) and sell on day 8 (price = 4), profit = 4-1 = 3.\n        Example 2:\n        Input: prices = [1,2,3,4,5]\n        Output: 4\n        Explanation: Buy on day 1 (price = 1) and sell on day 5 (price = 5), profit = 5-1 = 4.\n        Note that you cannot buy on day 1, buy on day 2 and sell them later, as you are engaging multiple transactions at the same time. You must sell before buying again.\n        Example 3:\n        Input: prices = [7,6,4,3,1]\n        Output: 0\n        Explanation: In this case, no transaction is done, i.e. max profit = 0.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        # dp[i][j][k] = max(dp[i-1][j][k], dp[i-1][j-1][k-1] + prices[i])\n        # dp[i][j][k] = max(dp[i-1][j][k], dp[i-1][j][k-1] + prices[i])\n        # dp[i][j][k] = max(dp[i-1][j][k], dp[i-1][j][k-1] + prices[i])\n        # dp[i][j][k] = max(dp[i-1][j][k], dp[i-1][j][k-1] + prices[i])\n        # dp[i][j][k] = max(dp[i-1][j][k], dp[i-1][j][k-1] + prices[i])\n        # dp[i][j][k] = max(dp[i-1][j][k], dp[i-1][j][k-1] + prices[i])\n        # dp[i][j][k] = max(dp[i-1][j][k], dp[i-1][j][k-1] + prices["
    },
    {
        "number": 124,
        "title": "Binary Tree Maximum Path Sum",
        "difficulty": 2,
        "prompt": "class Solution:\n    def maxPathSum(self, root: Optional[TreeNode]) -> int:\n        \"\"\"\n        A path in a binary tree is a sequence of nodes where each pair of adjacent nodes in the sequence has an edge connecting them. A node can only appear in the sequence at most once. Note that the path does not need to pass through the root.\n        The path sum of a path is the sum of the node's values in the path.\n        Given the root of a binary tree, return the maximum path sum of any non-empty path.\n        Example 1:\n        Input: root = [1,2,3]\n        Output: 6\n        Explanation: The optimal path is 2 -> 1 -> 3 with a path sum of 2 + 1 + 3 = 6.\n        Example 2:\n        Input: root = [-10,9,20,null,null,15,7]\n        Output: 42\n        Explanation: The optimal path is 15 -> 20 -> 7 with a path sum of 15 + 20 + 7 = 42.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        self.max_sum = float('-inf')\n        self.dfs(root)\n        return self.max_sum"
    },
    {
        "number": 125,
        "title": "Valid Palindrome",
        "difficulty": 0,
        "prompt": "class Solution:\n    def isPalindrome(self, s: str) -> bool:\n        \"\"\"\n        A phrase is a palindrome if, after converting all uppercase letters into lowercase letters and removing all non-alphanumeric characters, it reads the same forward and backward. Alphanumeric characters include letters and numbers.\n        Given a string s, return true if it is a palindrome, or false otherwise.\n        Example 1:\n        Input: s = \"A man, a plan, a canal: Panama\"\n        Output: true\n        Explanation: \"amanaplanacanalpanama\" is a palindrome.\n        Example 2:\n        Input: s = \"race a car\"\n        Output: false\n        Explanation: \"raceacar\" is not a palindrome.\n        Example 3:\n        Input: s = \" \"\n        Output: true\n        Explanation: s is an empty string \"\" after removing non-alphanumeric characters.\n        Since an empty string reads the same forward and backward, it is a palindrome.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        # s = s.lower()\n        # s = re.sub('[^a-z0-9]', '', s)\n        # return s == s[::-1]\n        \n        # s = s.lower()\n        # s = re.sub('[^a-z0-9]', '', s)\n        # return s == s[::-1]\n        \n        # s = s.lower()\n        # s = re.sub('[^a-z0-9]', '', s)\n        # return s == s[::-1]\n        \n        # s = s.lower()\n        # s = re.sub('[^a-z0-9]', '', s)\n        # return s == s[::-1]\n        \n        # s = s.lower()\n        # s = re.sub('[^a-z0-9]', '', s)\n        # return s == s[::-1]\n        \n        # s = s.lower()\n        # s = re.sub('[^a-z0-9]', '', s)\n        # return s == s[::-1]\n        \n        # s = s.lower()\n        # s = re.sub('[^a-z0-"
    },
    {
        "number": 126,
        "title": "Word Ladder II",
        "difficulty": 2,
        "prompt": "class Solution:\n    def findLadders(self, beginWord: str, endWord: str, wordList: List[str]) -> List[List[str]]:\n        \"\"\"\n        A transformation sequence from word beginWord to word endWord using a dictionary wordList is a sequence of words beginWord -> s1 -> s2 ->... -> sk such that:\n            Every adjacent pair of words differs by a single letter.\n            Every si for 1 <= i <= k is in wordList. Note that beginWord does not need to be in wordList.\n            sk == endWord\n        Given two words, beginWord and endWord, and a dictionary wordList, return all the shortest transformation sequences from beginWord to endWord, or an empty list if no such sequence exists. Each sequence should be returned as a list of the words [beginWord, s1, s2,..., sk].\n        Example 1:\n        Input: beginWord = \"hit\", endWord = \"cog\", wordList = [\"hot\",\"dot\",\"dog\",\"lot\",\"log\",\"cog\"]\n        Output: [[\"hit\",\"hot\",\"dot\",\"dog\",\"cog\"],[\"hit\",\"hot\",\"lot\",\"log\",\"cog\"]]\n        Explanation: There are 2 shortest transformation sequences:\n        \"hit\" -> \"hot\" -> \"dot\" -> \"dog\" -> \"cog\"\n        \"hit\" -> \"hot\" -> \"lot\" -> \"log\" -> \"cog\"\n        Example 2:\n        Input: beginWord = \"hit\", endWord = \"cog\", wordList = [\"hot\",\"dot\",\"dog\",\"lot\",\"log\"]\n        Output: []\n        Explanation: The endWord \"cog\" is not in wordList, therefore there is no valid transformation sequence.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        # BFS\n        # Time: O(N^2), N is the length of wordList\n        # Space: O(N^2), N is the length of wordList\n        # queue = [beginWord]\n        # visited = set()\n        # while queue:\n        #     size = len(queue)\n        #     for _ in range(size):\n        #         word = queue.pop(0)\n        #         if word == endWord:\n        #             return self.get_path(beginWord, endWord, wordList)\n        #         for i in range(len(word)):\n        #             for c in 'abcdefghijklmnopqrstuvwxyz':\n        #                 new_word = word[:i] + c + word[i+1:]\n        #                 if new_word in wordList and new_word not in visited:\n        #                     queue.append(new_word)\n        #                     visited.add(new_word)\n        # return []\n        #\n        # def get_path(self, beginWord, endWord, wordList):\n        #     if beginWord == endWord:\n        #         return [[beginWord]]\n        #     paths = []\n        #     for word in wordList:\n        #         if len("
    },
    {
        "number": 127,
        "title": "Word Ladder",
        "difficulty": 2,
        "prompt": "class Solution:\n    def ladderLength(self, beginWord: str, endWord: str, wordList: List[str]) -> int:\n        \"\"\"\n        A transformation sequence from word beginWord to word endWord using a dictionary wordList is a sequence of words beginWord -> s1 -> s2 ->... -> sk such that:\n            Every adjacent pair of words differs by a single letter.\n            Every si for 1 <= i <= k is in wordList. Note that beginWord does not need to be in wordList.\n            sk == endWord\n        Given two words, beginWord and endWord, and a dictionary wordList, return the number of words in the shortest transformation sequence from beginWord to endWord, or 0 if no such sequence exists.\n        Example 1:\n        Input: beginWord = \"hit\", endWord = \"cog\", wordList = [\"hot\",\"dot\",\"dog\",\"lot\",\"log\",\"cog\"]\n        Output: 5\n        Explanation: One shortest transformation sequence is \"hit\" -> \"hot\" -> \"dot\" -> \"dog\" -> cog\", which is 5 words long.\n        Example 2:\n        Input: beginWord = \"hit\", endWord = \"cog\", wordList = [\"hot\",\"dot\",\"dog\",\"lot\",\"log\"]\n        Output: 0\n        Explanation: The endWord \"cog\" is not in wordList, therefore there is no valid transformation sequence.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        # BFS\n        # Time: O(n^2)\n        # Space: O(n^2)\n        # if endWord not in wordList or not wordList:\n        #     return 0\n        #\n        # wordList = set(wordList)\n        # queue = collections.deque([(beginWord, 1)])\n        # seen = {beginWord: True}\n        # while queue:\n        #     word, length = queue.popleft()\n        #     if word == endWord:\n        #         return length\n        #     for i in range(len(word)):\n        #         for c in 'abcdefghijklmnopqrstuvwxyz':\n        #             new_word = word[:i] + c + word[i + 1:]\n        #             if new_word in wordList and new_word not in seen:\n        #                 queue.append((new_word, length + 1))\n        #                 seen[new_word] = True\n        # return 0"
    },
    {
        "number": 128,
        "title": "Longest Consecutive Sequence",
        "difficulty": 1,
        "prompt": "class Solution:\n    def longestConsecutive(self, nums: List[int]) -> int:\n        \"\"\"\n        Given an unsorted array of integers nums, return the length of the longest consecutive elements sequence.\n        You must write an algorithm that runs in O(n) time.\n        Example 1:\n        Input: nums = [100,4,200,1,3,2]\n        Output: 4\n        Explanation: The longest consecutive elements sequence is [1, 2, 3, 4]. Therefore its length is 4.\n        Example 2:\n        Input: nums = [0,3,7,2,5,8,4,6,0,1]\n        Output: 9\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        if not nums:\n            return 0\n        nums.sort()\n        max_len = 1\n        cur_len = 1\n        for i in range(1, len(nums)):\n            if nums[i] == nums[i-1] + 1:\n                cur_len += 1\n            else:\n                max_len = max(max_len, cur_len)\n                cur_len = 1\n        return max(max_len, cur_len)"
    },
    {
        "number": 129,
        "title": "Sum Root to Leaf Numbers",
        "difficulty": 1,
        "prompt": "class Solution:\n    def sumNumbers(self, root: Optional[TreeNode]) -> int:\n        \"\"\"\n        You are given the root of a binary tree containing digits from 0 to 9 only.\n        Each root-to-leaf path in the tree represents a number.\n            For example, the root-to-leaf path 1 -> 2 -> 3 represents the number 123.\n        Return the total sum of all root-to-leaf numbers. Test cases are generated so that the answer will fit in a 32-bit integer.\n        A leaf node is a node with no children.\n        Example 1:\n        Input: root = [1,2,3]\n        Output: 25\n        Explanation:\n        The root-to-leaf path 1->2 represents the number 12.\n        The root-to-leaf path 1->3 represents the number 13.\n        Therefore, sum = 12 + 13 = 25.\n        Example 2:\n        Input: root = [4,9,0,5,1]\n        Output: 1026\n        Explanation:\n        The root-to-leaf path 4->9->5 represents the number 495.\n        The root-to-leaf path 4->9->1 represents the number 491.\n        The root-to-leaf path 4->0 represents the number 40.\n        Therefore, sum = 495 + 491 + 40 = 1026.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        self.total = 0\n        self.dfs(root, 0)\n        return self.total"
    },
    {
        "number": 130,
        "title": "Surrounded Regions",
        "difficulty": 1,
        "prompt": "class Solution:\n    def solve(self, board: List[List[str]]) -> None:\n        \"\"\"\n        Do not return anything, modify board in-place instead.\n        Given an m x n matrix board containing 'X' and 'O', capture all regions that are 4-directionally surrounded by 'X'.\n        A region is captured by flipping all 'O's into 'X's in that surrounded region.\n        Example 1:\n        Input: board = [[\"X\",\"X\",\"X\",\"X\"],[\"X\",\"O\",\"O\",\"X\"],[\"X\",\"X\",\"O\",\"X\"],[\"X\",\"O\",\"X\",\"X\"]]\n        Output: [[\"X\",\"X\",\"X\",\"X\"],[\"X\",\"X\",\"X\",\"X\"],[\"X\",\"X\",\"X\",\"X\"],[\"X\",\"O\",\"X\",\"X\"]]\n        Explanation: Notice that an 'O' should not be flipped if:\n        - It is on the border, or\n        - It is adjacent to an 'O' that should not be flipped.\n        The bottom 'O' is on the border, so it is not flipped.\n        The other three 'O' form a surrounded region, so they are flipped.\n        Example 2:\n        Input: board = [[\"X\"]]\n        Output: [[\"X\"]]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        if not board:\n            return\n        m, n = len(board), len(board[0])\n        for i in range(m):\n            for j in range(n):\n                if (i == 0 or i == m - 1 or j == 0 or j == n - 1) and board[i][j] == 'O':\n                    self.dfs(board, i, j)"
    },
    {
        "number": 131,
        "title": "Palindrome Partitioning",
        "difficulty": 1,
        "prompt": "class Solution:\n    def partition(self, s: str) -> List[List[str]]:\n        \"\"\"\n        Given a string s, partition s such that every substring of the partition is a palindrome. Return all possible palindrome partitioning of s.\n        Example 1:\n        Input: s = \"aab\"\n        Output: [[\"a\",\"a\",\"b\"],[\"aa\",\"b\"]]\n        Example 2:\n        Input: s = \"a\"\n        Output: [[\"a\"]]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        # dp[i][j] = True if s[i:j+1] is palindrome\n        # dp[i][j] = dp[i+1][j-1] and s[i] == s[j]\n        # dp[i][j] = dp[i+1][j] or dp[i][j-1]\n        # dp[i][j] = dp[i+1][j-1] and s[i] == s[j]\n        # dp[i][j] = dp[i+1][j] or dp[i][j-1]\n        # dp[i][j] = dp[i+1][j-1] and s[i] == s[j]\n        # dp[i][j] = dp[i+1][j] or dp[i][j-1]\n        # dp[i][j] = dp[i+1][j-1] and s[i] == s[j]\n        # dp[i][j] = dp[i+1][j] or dp[i][j-1]\n        # dp[i][j] = dp[i+1][j-1] and s[i] =="
    },
    {
        "number": 132,
        "title": "Palindrome Partitioning II",
        "difficulty": 2,
        "prompt": "class Solution:\n    def minCut(self, s: str) -> int:\n        \"\"\"\n        Given a string s, partition s such that every substring of the partition is a palindrome.\n        Return the minimum cuts needed for a palindrome partitioning of s.\n        Example 1:\n        Input: s = \"aab\"\n        Output: 1\n        Explanation: The palindrome partitioning [\"aa\",\"b\"] could be produced using 1 cut.\n        Example 2:\n        Input: s = \"a\"\n        Output: 0\n        Example 3:\n        Input: s = \"ab\"\n        Output: 1\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        n = len(s)\n        dp = [[False] * n for _ in range(n)]\n        for i in range(n):\n            dp[i][i] = True\n        for i in range(n - 1, -1, -1):\n            for j in range(i + 1, n):\n                dp[i][j] = s[i] == s[j] and (j - i < 2 or dp[i + 1][j - 1])\n        res = [n] * n\n        for i in range(n):\n            if dp[0][i]:\n                res[i] = 0\n            else:\n                for j in range(i):\n                    if dp[j + 1][i]:\n                        res[i] = min(res[i], res[j] + 1)\n        return res[n - 1]"
    },
    {
        "number": 133,
        "title": "Clone Graph",
        "difficulty": 1,
        "prompt": "\n        \"\"\"\nclass Node:\n    def __init__(self, val = 0, neighbors = None):\n        self.val = val\n        self.neighbors = neighbors if neighbors is not None else []\n        Given a reference of a node in a connected undirected graph.\n        Return a deep copy (clone) of the graph.\n        Each node in the graph contains a value (int) and a list (List[Node]) of its neighbors.\n        class Node {\n            public int val;\n            public List<Node> neighbors;\n        }\n        Test case format:\n        For simplicity, each node's value is the same as the node's index (1-indexed). For example, the first node with val == 1, the second node with val == 2, and so on. The graph is represented in the test case using an adjacency list.\n        An adjacency list is a collection of unordered lists used to represent a finite graph. Each list describes the set of neighbors of a node in the graph.\n        The given node will always be the first node with val = 1. You must return the copy of the given node as a reference to the cloned graph.\n        Example 1:\n        Input: adjList = [[2,4],[1,3],[2,4],[1,3]]\n        Output: [[2,4],[1,3],[2,4],[1,3]]\n        Explanation: There are 4 nodes in the graph.\n        1st node (val = 1)'s neighbors are 2nd node (val = 2) and 4th node (val = 4).\n        2nd node (val = 2)'s neighbors are 1st node (val = 1) and 3rd node (val = 3).\n        3rd node (val = 3)'s neighbors are 2nd node (val = 2) and 4th node (val = 4).\n        4th node (val = 4)'s neighbors are 1st node (val = 1) and 3rd node (val = 3).\n        Example 2:\n        Input: adjList = [[]]\n        Output: [[]]\n        Explanation: Note that the input contains one empty list. The graph consists of only one node with val = 1 and it does not have any neighbors.\n        Example 3:\n        Input: adjList = []\n        Output: []\n        Explanation: This an empty graph, it does not have any nodes.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        self.val = val\n        self.neighbors = []\n        self.visited = False\n        self.cloned = None\n        self.cloned_neighbors = []\n        self.cloned_visited = False\n        self.cloned_neighbors_list = []\n        self.cloned_neighbors_list_visited = False\n        self.cloned_neighbors_list_cloned = False\n        self.cloned_neighbors_list_cloned_visited = False\n        self.cloned_neighbors_list_cloned_neighbors = []\n        self.cloned_neighbors_list_cloned_neighbors_visited = False\n        self.cloned_neighbors_list_cloned_neighbors_cloned = False\n        self.cloned_neighbors_list_cloned_neighbors_cloned_visited = False\n        self.cloned_neighbors_list_cloned_neighbors_cloned_neighbors = []\n        self.cloned_neighbors_list_cloned_neighbors_cloned_neighbors_visited = False\n        self.cloned_neighbors_list_cloned_neighbors_cloned_"
    },
    {
        "number": 134,
        "title": "Gas Station",
        "difficulty": 1,
        "prompt": "class Solution:\n    def canCompleteCircuit(self, gas: List[int], cost: List[int]) -> int:\n        \"\"\"\n        There are n gas stations along a circular route, where the amount of gas at the ith station is gas[i].\n        You have a car with an unlimited gas tank and it costs cost[i] of gas to travel from the ith station to its next (i + 1)th station. You begin the journey with an empty tank at one of the gas stations.\n        Given two integer arrays gas and cost, return the starting gas station's index if you can travel around the circuit once in the clockwise direction, otherwise return -1. If there exists a solution, it is guaranteed to be unique\n        Example 1:\n        Input: gas = [1,2,3,4,5], cost = [3,4,5,1,2]\n        Output: 3\n        Explanation:\n        Start at station 3 (index 3) and fill up with 4 unit of gas. Your tank = 0 + 4 = 4\n        Travel to station 4. Your tank = 4 - 1 + 5 = 8\n        Travel to station 0. Your tank = 8 - 2 + 1 = 7\n        Travel to station 1. Your tank = 7 - 3 + 2 = 6\n        Travel to station 2. Your tank = 6 - 4 + 3 = 5\n        Travel to station 3. The cost is 5. Your gas is just enough to travel back to station 3.\n        Therefore, return 3 as the starting index.\n        Example 2:\n        Input: gas = [2,3,4], cost = [3,4,3]\n        Output: -1\n        Explanation:\n        You can't start at station 0 or 1, as there is not enough gas to travel to the next station.\n        Let's start at station 2 and fill up with 4 unit of gas. Your tank = 0 + 4 = 4\n        Travel to station 0. Your tank = 4 - 3 + 2 = 3\n        Travel to station 1. Your tank = 3 - 3 + 3 = 3\n        You cannot travel back to station 2, as it requires 4 unit of gas but you only have 3.\n        Therefore, you can't travel around the circuit once no matter where you start.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        if sum(gas) < sum(cost):\n            return -1\n        start, total, balance = 0, 0, 0\n        for i in range(len(gas)):\n            total += gas[i] - cost[i]\n            balance += gas[i] - cost[i]\n            if balance < 0:\n                start = i + 1\n                balance = 0\n        return start"
    },
    {
        "number": 135,
        "title": "Candy",
        "difficulty": 2,
        "prompt": "class Solution:\n    def candy(self, ratings: List[int]) -> int:\n        \"\"\"\n        There are n children standing in a line. Each child is assigned a rating value given in the integer array ratings.\n        You are giving candies to these children subjected to the following requirements:\n            Each child must have at least one candy.\n            Children with a higher rating get more candies than their neighbors.\n        Return the minimum number of candies you need to have to distribute the candies to the children.\n        Example 1:\n        Input: ratings = [1,0,2]\n        Output: 5\n        Explanation: You can allocate to the first, second and third child with 2, 1, 2 candies respectively.\n        Example 2:\n        Input: ratings = [1,2,2]\n        Output: 4\n        Explanation: You can allocate to the first, second and third child with 1, 2, 1 candies respectively.\n        The third child gets 1 candy because it satisfies the above two conditions.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        # Time: O(n), space: O(n)\n        if not ratings:\n            return 0\n        n = len(ratings)\n        candies = [1] * n\n        for i in range(1, n):\n            if ratings[i] > ratings[i-1]:\n                candies[i] = candies[i-1] + 1\n        for i in range(n-2, -1, -1):\n            if ratings[i] > ratings[i+1]:\n                candies[i] = max(candies[i], candies[i+1] + 1)\n        return sum(candies)"
    },
    {
        "number": 136,
        "title": "Single Number",
        "difficulty": 0,
        "prompt": "class Solution:\n    def singleNumber(self, nums: List[int]) -> int:\n        \"\"\"\n        Given a non-empty array of integers nums, every element appears twice except for one. Find that single one.\n        You must implement a solution with a linear runtime complexity and use only constant extra space.\n        Example 1:\n        Input: nums = [2,2,1]\n        Output: 1\n        Example 2:\n        Input: nums = [4,1,2,1,2]\n        Output: 4\n        Example 3:\n        Input: nums = [1]\n        Output: 1\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        # Solution 1:\n        # O(n) time\n        # O(1) space\n        # nums.sort()\n        # for i in range(0, len(nums), 2):\n        #     if i+1 == len(nums):\n        #         return nums[i]\n        #     if nums[i]!= nums[i+1]:\n        #         return nums[i]"
    },
    {
        "number": 137,
        "title": "Single Number II",
        "difficulty": 1,
        "prompt": "class Solution:\n    def singleNumber(self, nums: List[int]) -> int:\n        \"\"\"\n        Given an integer array nums where every element appears three times except for one, which appears exactly once. Find the single element and return it.\n        You must implement a solution with a linear runtime complexity and use only constant extra space.\n        Example 1:\n        Input: nums = [2,2,3,2]\n        Output: 3\n        Example 2:\n        Input: nums = [0,1,0,1,0,1,99]\n        Output: 99\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        # nums.sort()\n        # for i in range(0, len(nums)-1, 3):\n        #     if nums[i]!= nums[i+1] or nums[i]!= nums[i+2]:\n        #         return nums[i]\n        # return nums[-1]\n        \n        # x = 0\n        # for i in nums:\n        #     x ^= i\n        # return x\n        \n        # x = 0\n        # for i in nums:\n        #     x ^= i\n        # return x\n        \n        # x = 0\n        # for i in nums:\n        #     x ^= i\n        # return x\n        \n        # x = 0\n        # for i in nums:\n        #     x ^= i\n        # return x\n        \n        # x = 0\n        # for i in nums:\n        #     x ^= i\n        # return x\n        \n        # x = 0\n        # for i in nums:\n        #     x ^= i\n        # return x\n        \n        # x = 0\n        # for i in nums:\n        #     x ^= i\n        # return x\n        \n        # x = 0\n        # for"
    },
    {
        "number": 138,
        "title": "Copy List with Random Pointer",
        "difficulty": 1,
        "prompt": "\n        \"\"\"\nclass Node:\n    def __init__(self, x: int, next: 'Node' = None, random: 'Node' = None):\n        self.val = int(x)\n        self.next = next\n        self.random = random\n        A linked list of length n is given such that each node contains an additional random pointer, which could point to any node in the list, or null.\n        Construct a deep copy of the list. The deep copy should consist of exactly n brand new nodes, where each new node has its value set to the value of its corresponding original node. Both the next and random pointer of the new nodes should point to new nodes in the copied list such that the pointers in the original list and copied list represent the same list state. None of the pointers in the new list should point to nodes in the original list.\n        For example, if there are two nodes X and Y in the original list, where X.random --> Y, then for the corresponding two nodes x and y in the copied list, x.random --> y.\n        Return the head of the copied linked list.\n        The linked list is represented in the input/output as a list of n nodes. Each node is represented as a pair of [val, random_index] where:\n            val: an integer representing Node.val\n            random_index: the index of the node (range from 0 to n-1) that the random pointer points to, or null if it does not point to any node.\n        Your code will only be given the head of the original linked list.\n        Example 1:\n        Input: head = [[7,null],[13,0],[11,4],[10,2],[1,0]]\n        Output: [[7,null],[13,0],[11,4],[10,2],[1,0]]\n        Example 2:\n        Input: head = [[1,1],[2,1]]\n        Output: [[1,1],[2,1]]\n        Example 3:\n        Input: head = [[3,null],[3,0],[3,null]]\n        Output: [[3,null],[3,0],[3,null]]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        self.head = None\n        self.copy_list(head)\n        return self.head"
    },
    {
        "number": 139,
        "title": "Word Break",
        "difficulty": 1,
        "prompt": "class Solution:\n    def wordBreak(self, s: str, wordDict: List[str]) -> bool:\n        \"\"\"\n        Given a string s and a dictionary of strings wordDict, return true if s can be segmented into a space-separated sequence of one or more dictionary words.\n        Note that the same word in the dictionary may be reused multiple times in the segmentation.\n        Example 1:\n        Input: s = \"leetcode\", wordDict = [\"leet\",\"code\"]\n        Output: true\n        Explanation: Return true because \"leetcode\" can be segmented as \"leet code\".\n        Example 2:\n        Input: s = \"applepenapple\", wordDict = [\"apple\",\"pen\"]\n        Output: true\n        Explanation: Return true because \"applepenapple\" can be segmented as \"apple pen apple\".\n        Note that you are allowed to reuse a dictionary word.\n        Example 3:\n        Input: s = \"catsandog\", wordDict = [\"cats\",\"dog\",\"sand\",\"and\",\"cat\"]\n        Output: false\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        # dp[i] = s[:i] can be segmented into words in the dictionary\n        # dp[i] = dp[j] and s[j:i] in the dictionary\n        # dp[i] = any(dp[j] and s[j:i] in the dictionary) for j in range(i)\n        # dp[0] = True\n        # dp[i] = dp[j] and s[j:i] in the dictionary for j in range(0, i)\n        # dp[i] = any(dp[j] and s[j:i] in the dictionary for j in range(0, i))\n        # dp[i] = any(dp[j] and s[j:i] in the dictionary for j in range(0, i))\n        # dp[i] = any(dp[j] and s[j:i] in the dictionary for j in range(0, i))\n        # dp[i] = any(dp[j] and s[j:i] in the dictionary for j in range(0, i))\n        # dp[i] = any(dp[j] and s[j:i] in the dictionary for j in range(0, i))\n        # dp[i]"
    },
    {
        "number": 140,
        "title": "Word Break II",
        "difficulty": 2,
        "prompt": "class Solution:\n    def wordBreak(self, s: str, wordDict: List[str]) -> List[str]:\n        \"\"\"\n        Given a string s and a dictionary of strings wordDict, add spaces in s to construct a sentence where each word is a valid dictionary word. Return all such possible sentences in any order.\n        Note that the same word in the dictionary may be reused multiple times in the segmentation.\n        Example 1:\n        Input: s = \"catsanddog\", wordDict = [\"cat\",\"cats\",\"and\",\"sand\",\"dog\"]\n        Output: [\"cats and dog\",\"cat sand dog\"]\n        Example 2:\n        Input: s = \"pineapplepenapple\", wordDict = [\"apple\",\"pen\",\"applepen\",\"pine\",\"pineapple\"]\n        Output: [\"pine apple pen apple\",\"pineapple pen apple\",\"pine applepen apple\"]\n        Explanation: Note that you are allowed to reuse a dictionary word.\n        Example 3:\n        Input: s = \"catsandog\", wordDict = [\"cats\",\"dog\",\"sand\",\"and\",\"cat\"]\n        Output: []\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        # dp[i] = s[:i] can be segmented into words in the wordDicts\n        # dp[i] = dp[j] + s[j:i] for all j in [0, i)\n        # dp[i] = dp[j] + s[j:i] for all j in [0, i) and s[j:i] in wordDicts\n        # dp[i] = dp[j] + s[j:i] for all j in [0, i) and s[j:i] in wordDicts and s[j:i] is a word\n        # dp[i] = dp[j] + s[j:i] for all j in [0, i) and s[j:i] in wordDicts and s[j:i] is a word and s[j:i] is not in wordDicts\n        # dp[i] = dp[j] + s[j:i] for all j in [0, i) and s[j:i] in wordDicts and s[j:i] is a word and s[j:i] is not in wordDicts\n        # dp[i] = dp[j] + s[j:i] for all j in ["
    },
    {
        "number": 141,
        "title": "Linked List Cycle",
        "difficulty": 0,
        "prompt": "class Solution:\n    def hasCycle(self, head: Optional[ListNode]) -> bool:\n        \"\"\"\n        Given head, the head of a linked list, determine if the linked list has a cycle in it.\n        There is a cycle in a linked list if there is some node in the list that can be reached again by continuously following the next pointer. Internally, pos is used to denote the index of the node that tail's next pointer is connected to. Note that pos is not passed as a parameter.\n        Return true if there is a cycle in the linked list. Otherwise, return false.\n        Example 1:\n        Input: head = [3,2,0,-4], pos = 1\n        Output: true\n        Explanation: There is a cycle in the linked list, where the tail connects to the 1st node (0-indexed).\n        Example 2:\n        Input: head = [1,2], pos = 0\n        Output: true\n        Explanation: There is a cycle in the linked list, where the tail connects to the 0th node.\n        Example 3:\n        Input: head = [1], pos = -1\n        Output: false\n        Explanation: There is no cycle in the linked list.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        if not head:\n            return False\n        slow = fast = head\n        while fast and fast.next:\n            slow = slow.next\n            fast = fast.next.next\n            if slow == fast:\n                return True\n        return False\n<|endoftext|>"
    },
    {
        "number": 142,
        "title": "Linked List Cycle II",
        "difficulty": 1,
        "prompt": "class Solution:\n    def detectCycle(self, head: Optional[ListNode]) -> Optional[ListNode]:\n        \"\"\"\n        Given the head of a linked list, return the node where the cycle begins. If there is no cycle, return null.\n        There is a cycle in a linked list if there is some node in the list that can be reached again by continuously following the next pointer. Internally, pos is used to denote the index of the node that tail's next pointer is connected to (0-indexed). It is -1 if there is no cycle. Note that pos is not passed as a parameter.\n        Do not modify the linked list.\n        Example 1:\n        Input: head = [3,2,0,-4], pos = 1\n        Output: tail connects to node index 1\n        Explanation: There is a cycle in the linked list, where tail connects to the second node.\n        Example 2:\n        Input: head = [1,2], pos = 0\n        Output: tail connects to node index 0\n        Explanation: There is a cycle in the linked list, where tail connects to the first node.\n        Example 3:\n        Input: head = [1], pos = -1\n        Output: no cycle\n        Explanation: There is no cycle in the linked list.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        if not head:\n            return None\n        slow = fast = head\n        while fast and fast.next:\n            slow = slow.next\n            fast = fast.next.next\n            if slow == fast:\n                break\n        if not fast or not fast.next:\n            return None\n        slow = head\n        while slow!= fast:\n            slow = slow.next\n            fast = fast.next\n        return slow\n<|endoftext|>"
    },
    {
        "number": 143,
        "title": "Reorder List",
        "difficulty": 1,
        "prompt": "class Solution:\n    def reorderList(self, head: Optional[ListNode]) -> None:\n        \"\"\"\n        Do not return anything, modify head in-place instead.\n        You are given the head of a singly linked-list. The list can be represented as:\n        L0 \u2192 L1 \u2192 \u2026 \u2192 Ln - 1 \u2192 Ln\n        Reorder the list to be on the following form:\n        L0 \u2192 Ln \u2192 L1 \u2192 Ln - 1 \u2192 L2 \u2192 Ln - 2 \u2192 \u2026\n        You may not modify the values in the list's nodes. Only nodes themselves may be changed.\n        Example 1:\n        Input: head = [1,2,3,4]\n        Output: [1,4,2,3]\n        Example 2:\n        Input: head = [1,2,3,4,5]\n        Output: [1,5,2,4,3]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        if not head:\n            return\n        slow = fast = head\n        while fast and fast.next:\n            slow = slow.next\n            fast = fast.next.next\n        prev, curr = None, slow\n        while curr:\n            curr.next, prev, curr = prev, curr, curr.next\n        first, second = head, prev\n        while second.next:\n            first.next, first = second, first.next\n            second.next, second = first, second.next\n        return\n<|endoftext|>"
    },
    {
        "number": 144,
        "title": "Binary Tree Preorder Traversal",
        "difficulty": 0,
        "prompt": "class Solution:\n    def preorderTraversal(self, root: Optional[TreeNode]) -> List[int]:\n        \"\"\"\n        Given the root of a binary tree, return the preorder traversal of its nodes' values.\n        Example 1:\n        Input: root = [1,null,2,3]\n        Output: [1,2,3]\n        Example 2:\n        Input: root = []\n        Output: []\n        Example 3:\n        Input: root = [1]\n        Output: [1]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        if not root:\n            return []\n        stack = [root]\n        res = []\n        while stack:\n            node = stack.pop()\n            res.append(node.val)\n            if node.right:\n                stack.append(node.right)\n            if node.left:\n                stack.append(node.left)\n        return res\n<|endoftext|>"
    },
    {
        "number": 145,
        "title": "Binary Tree Postorder Traversal",
        "difficulty": 0,
        "prompt": "class Solution:\n    def postorderTraversal(self, root: Optional[TreeNode]) -> List[int]:\n        \"\"\"\n        Given the root of a binary tree, return the postorder traversal of its nodes' values.\n        Example 1:\n        Input: root = [1,null,2,3]\n        Output: [3,2,1]\n        Example 2:\n        Input: root = []\n        Output: []\n        Example 3:\n        Input: root = [1]\n        Output: [1]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        if not root:\n            return []\n        stack, output = [root], []\n        while stack:\n            root = stack.pop()\n            if root:\n                output.append(root.val)\n                stack.append(root.left)\n                stack.append(root.right)\n        return output[::-1]"
    },
    {
        "number": 146,
        "title": "LRU Cache",
        "difficulty": 1,
        "prompt": "class LRUCache:\n    def __init__(self, capacity: int):\n    def get(self, key: int) -> int:\n    def put(self, key: int, value: int) -> None:\n        \"\"\"\n        Design a data structure that follows the constraints of a Least Recently Used (LRU) cache.\n        Implement the LRUCache class:\n            LRUCache(int capacity) Initialize the LRU cache with positive size capacity.\n            int get(int key) Return the value of the key if the key exists, otherwise return -1.\n            void put(int key, int value) Update the value of the key if the key exists. Otherwise, add the key-value pair to the cache. If the number of keys exceeds the capacity from this operation, evict the least recently used key.\n        The functions get and put must each run in O(1) average time complexity.\n        Example 1:\n        Input\n        [\"LRUCache\", \"put\", \"put\", \"get\", \"put\", \"get\", \"put\", \"get\", \"get\", \"get\"]\n        [[2], [1, 1], [2, 2], [1], [3, 3], [2], [4, 4], [1], [3], [4]]\n        Output\n        [null, null, null, 1, null, -1, null, -1, 3, 4]\n        Explanation\n        LRUCache lRUCache = new LRUCache(2);\n        lRUCache.put(1, 1); // cache is {1=1}\n        lRUCache.put(2, 2); // cache is {1=1, 2=2}\n        lRUCache.get(1);    // return 1\n        lRUCache.put(3, 3); // LRU key was 2, evicts key 2, cache is {1=1, 3=3}\n        lRUCache.get(2);    // returns -1 (not found)\n        lRUCache.put(4, 4); // LRU key was 1, evicts key 1, cache is {4=4, 3=3}\n        lRUCache.get(1);    // return -1 (not found)\n        lRUCache.get(3);    // return 3\n        lRUCache.get(4);    // return 4\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        self.capacity = capacity\n        self.cache = {}\n        self.queue = []\n        self.size = 0\n        self.head = 0\n        self.tail = 0"
    },
    {
        "number": 147,
        "title": "Insertion Sort List",
        "difficulty": 1,
        "prompt": "class Solution:\n    def insertionSortList(self, head: Optional[ListNode]) -> Optional[ListNode]:\n        \"\"\"\n        Given the head of a singly linked list, sort the list using insertion sort, and return the sorted list's head.\n        The steps of the insertion sort algorithm:\n            Insertion sort iterates, consuming one input element each repetition and growing a sorted output list.\n            At each iteration, insertion sort removes one element from the input data, finds the location it belongs within the sorted list and inserts it there.\n            It repeats until no input elements remain.\n        The following is a graphical example of the insertion sort algorithm. The partially sorted list (black) initially contains only the first element in the list. One element (red) is removed from the input data and inserted in-place into the sorted list with each iteration.\n        Example 1:\n        Input: head = [4,2,1,3]\n        Output: [1,2,3,4]\n        Example 2:\n        Input: head = [-1,5,3,4,0]\n        Output: [-1,0,3,4,5]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        if not head:\n            return head\n        \n        dummy = ListNode(0)\n        dummy.next = head\n        curr = head\n        while curr.next:\n            if curr.val <= curr.next.val:\n                curr = curr.next\n            else:\n                # find the right place for curr.next\n                prev = dummy\n                while prev.next.val < curr.next.val:\n                    prev = prev.next\n                # insert curr.next between prev and prev.next\n                curr.next = curr.next.next\n                prev.next, curr.next.next = curr, prev.next\n        return dummy.next\n<|endoftext|>"
    },
    {
        "number": 148,
        "title": "Sort List",
        "difficulty": 1,
        "prompt": "class Solution:\n    def sortList(self, head: Optional[ListNode]) -> Optional[ListNode]:\n        \"\"\"\n        Given the head of a linked list, return the list after sorting it in ascending order.\n        Example 1:\n        Input: head = [4,2,1,3]\n        Output: [1,2,3,4]\n        Example 2:\n        Input: head = [-1,5,3,4,0]\n        Output: [-1,0,3,4,5]\n        Example 3:\n        Input: head = []\n        Output: []\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        if not head or not head.next:\n            return head\n        \n        # find the middle point\n        slow, fast = head, head\n        while fast and fast.next:\n            slow = slow.next\n            fast = fast.next.next\n        \n        # reverse the second half\n        pre, cur = None, slow.next\n        while cur:\n            cur.next, pre, cur = pre, cur, cur.next\n        slow.next = None\n        \n        # sort the two half\n        left, right = self.sortList(head), self.sortList(pre)\n        \n        # merge the two half\n        h = res = ListNode(0)\n        while left and right:\n            if left.val < right.val:\n                h.next, left = left, left.next\n            else:\n                h.next, right = right, right.next\n            h = h.next\n        h.next = left if left else right\n        return res.next\n<|endoftext|>"
    },
    {
        "number": 149,
        "title": "Max Points on a Line",
        "difficulty": 2,
        "prompt": "class Solution:\n    def maxPoints(self, points: List[List[int]]) -> int:\n        \"\"\"\n        Given an array of points where points[i] = [xi, yi] represents a point on the X-Y plane, return the maximum number of points that lie on the same straight line.\n        Example 1:\n        Input: points = [[1,1],[2,2],[3,3]]\n        Output: 3\n        Example 2:\n        Input: points = [[1,1],[3,2],[5,3],[4,1],[2,3],[1,4]]\n        Output: 4\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        if len(points) < 3:\n            return len(points)\n        \n        def gcd(a, b):\n            if a == 0:\n                return b\n            return gcd(b % a, a)\n        \n        def lcm(a, b):\n            return a * b // gcd(a, b)\n        \n        def get_slope(p1, p2):\n            if p1[0] == p2[0]:\n                return None\n            return (p2[1] - p1[1]) / (p2[0] - p1[0])\n        \n        def get_intercept(p1, slope):\n            return p1[1] - slope * p1[0]\n        \n        def get_max_points(points):\n            slopes = {}\n            intercepts = {}\n            max_points = 0\n            for i in range(len(points)):\n                for j in range(i + 1, len(points)):\n                    slope = get_slope(points[i], points[j])\n                    if slope is None:\n                        continue\n                    if slope not in slopes:\n                        slopes[slope] = 1\n                    else:\n                        slopes[slope] += 1\n                    intercept = get_intercept"
    },
    {
        "number": 150,
        "title": "Evaluate Reverse Polish Notation",
        "difficulty": 1,
        "prompt": "class Solution:\n    def evalRPN(self, tokens: List[str]) -> int:\n        \"\"\"\n        You are given an array of strings tokens that represents an arithmetic expression in a Reverse Polish Notation.\n        Evaluate the expression. Return an integer that represents the value of the expression.\n        Note that:\n            The valid operators are '+', '-', '*', and '/'.\n            Each operand may be an integer or another expression.\n            The division between two integers always truncates toward zero.\n            There will not be any division by zero.\n            The input represents a valid arithmetic expression in a reverse polish notation.\n            The answer and all the intermediate calculations can be represented in a 32-bit integer.\n        Example 1:\n        Input: tokens = [\"2\",\"1\",\"+\",\"3\",\"*\"]\n        Output: 9\n        Explanation: ((2 + 1) * 3) = 9\n        Example 2:\n        Input: tokens = [\"4\",\"13\",\"5\",\"/\",\"+\"]\n        Output: 6\n        Explanation: (4 + (13 / 5)) = 6\n        Example 3:\n        Input: tokens = [\"10\",\"6\",\"9\",\"3\",\"+\",\"-11\",\"*\",\"/\",\"*\",\"17\",\"+\",\"5\",\"+\"]\n        Output: 22\n        Explanation: ((10 * (6 / ((9 + 3) * -11))) + 17) + 5\n        = ((10 * (6 / (12 * -11))) + 17) + 5\n        = ((10 * (6 / -132)) + 17) + 5\n        = ((10 * 0) + 17) + 5\n        = (0 + 17) + 5\n        = 17 + 5\n        = 22\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        stack = []\n        for token in tokens:\n            if token in \"+-*/\":\n                b = stack.pop()\n                a = stack.pop()\n                if token == \"+\":\n                    stack.append(a + b)\n                elif token == \"-\":\n                    stack.append(a - b)\n                elif token == \"*\":\n                    stack.append(a * b)\n                else:\n                    stack.append(int(a / b))\n            else:\n                stack.append(int(token))\n        return stack[0]"
    },
    {
        "number": 151,
        "title": "Reverse Words in a String",
        "difficulty": 1,
        "prompt": "class Solution:\n    def reverseWords(self, s: str) -> str:\n        \"\"\"\n        Given an input string s, reverse the order of the words.\n        A word is defined as a sequence of non-space characters. The words in s will be separated by at least one space.\n        Return a string of the words in reverse order concatenated by a single space.\n        Note that s may contain leading or trailing spaces or multiple spaces between two words. The returned string should only have a single space separating the words. Do not include any extra spaces.\n        Example 1:\n        Input: s = \"the sky is blue\"\n        Output: \"blue is sky the\"\n        Example 2:\n        Input: s = \"  hello world  \"\n        Output: \"world hello\"\n        Explanation: Your reversed string should not contain leading or trailing spaces.\n        Example 3:\n        Input: s = \"a good   example\"\n        Output: \"example good a\"\n        Explanation: You need to reduce multiple spaces between two words to a single space in the reversed string.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        return \" \".join(s.split()[::-1])"
    },
    {
        "number": 152,
        "title": "Maximum Product Subarray",
        "difficulty": 1,
        "prompt": "class Solution:\n    def maxProduct(self, nums: List[int]) -> int:\n        \"\"\"\n        Given an integer array nums, find a subarray that has the largest product, and return the product.\n        The test cases are generated so that the answer will fit in a 32-bit integer.\n        Example 1:\n        Input: nums = [2,3,-2,4]\n        Output: 6\n        Explanation: [2,3] has the largest product 6.\n        Example 2:\n        Input: nums = [-2,0,-1]\n        Output: 0\n        Explanation: The result cannot be 2, because [-2,-1] is not a subarray.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        # dp[i] = max(dp[i-1]*nums[i], dp[i-1]*nums[i], nums[i])\n        # dp[i] = min(dp[i-1]*nums[i], dp[i-1]*nums[i], nums[i])\n        # dp[i] = max(dp[i-1]*nums[i], nums[i])\n        # dp[i] = min(dp[i-1]*nums[i], nums[i])\n        # dp[i] = max(dp[i-1]*nums[i], nums[i])\n        # dp[i] = min(dp[i-1]*nums[i], nums[i])\n        # dp[i] = max(dp[i-1]*nums[i], nums[i])\n        # dp[i] = min(dp[i-1]*nums[i], nums[i])\n        # dp[i] = max(dp[i-1]*nums[i], nums[i])\n        # dp[i] = min(dp[i-1]*nums[i],"
    },
    {
        "number": 153,
        "title": "Find Minimum in Rotated Sorted Array",
        "difficulty": 1,
        "prompt": "class Solution:\n    def findMin(self, nums: List[int]) -> int:\n        \"\"\"\n        Suppose an array of length n sorted in ascending order is rotated between 1 and n times. For example, the array nums = [0,1,2,4,5,6,7] might become:\n            [4,5,6,7,0,1,2] if it was rotated 4 times.\n            [0,1,2,4,5,6,7] if it was rotated 7 times.\n        Notice that rotating an array [a[0], a[1], a[2],..., a[n-1]] 1 time results in the array [a[n-1], a[0], a[1], a[2],..., a[n-2]].\n        Given the sorted rotated array nums of unique elements, return the minimum element of this array.\n        You must write an algorithm that runs in O(log n) time.\n        Example 1:\n        Input: nums = [3,4,5,1,2]\n        Output: 1\n        Explanation: The original array was [1,2,3,4,5] rotated 3 times.\n        Example 2:\n        Input: nums = [4,5,6,7,0,1,2]\n        Output: 0\n        Explanation: The original array was [0,1,2,4,5,6,7] and it was rotated 4 times.\n        Example 3:\n        Input: nums = [11,13,15,17]\n        Output: 11\n        Explanation: The original array was [11,13,15,17] and it was rotated 4 times. \n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        if len(nums) == 1:\n            return nums[0]\n        \n        left, right = 0, len(nums) - 1\n        while left < right:\n            mid = left + (right - left) // 2\n            if nums[mid] > nums[right]:\n                left = mid + 1\n            else:\n                right = mid\n        return nums[left]\n    \n    def findMin2(self, nums: List[int]) -> int:\n        \"\"\"\n        Suppose an array sorted in ascending order is rotated at some pivot unknown to you beforehand.\n        (i.e., [0,1,2,4,5,6,7] might become [4,5,6,7,0,1,2]).\n        You are given a target value to search. If found in the array return its index, otherwise return -1.\n        You may assume no duplicate exists in the array.\n        Your algorithm's runtime complexity must be in the order of O(log n).\n        Example 1:\n        Input: nums = [4,5,6,7,0,1,2], target = 0\n        Output: 4\n        Example 2:\n        Input: nums = [4,5,6,7,0,1,2], target = 3\n        Output:"
    },
    {
        "number": 154,
        "title": "Find Minimum in Rotated Sorted Array II",
        "difficulty": 2,
        "prompt": "class Solution:\n    def findMin(self, nums: List[int]) -> int:\n        \"\"\"\n        Suppose an array of length n sorted in ascending order is rotated between 1 and n times. For example, the array nums = [0,1,4,4,5,6,7] might become:\n            [4,5,6,7,0,1,4] if it was rotated 4 times.\n            [0,1,4,4,5,6,7] if it was rotated 7 times.\n        Notice that rotating an array [a[0], a[1], a[2],..., a[n-1]] 1 time results in the array [a[n-1], a[0], a[1], a[2],..., a[n-2]].\n        Given the sorted rotated array nums that may contain duplicates, return the minimum element of this array.\n        You must decrease the overall operation steps as much as possible.\n        Example 1:\n        Input: nums = [1,3,5]\n        Output: 1\n        Example 2:\n        Input: nums = [2,2,2,0,1]\n        Output: 0\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        # \u53cc\u6307\u9488\u6cd5\n        # \u5982\u679cnums[mid] > nums[right],\u8bf4\u660e\u5de6\u8fb9\u6709\u5e8f\uff0c\u53f3\u8fb9\u6709\u5e8f\uff0c\u53f3\u8fb9\u53ef\u4ee5\u6392\u9664\u4e00\u534a\u7684\u6570\n        # \u5982\u679cnums[mid] < nums[right],\u8bf4\u660e\u5de6\u8fb9\u6709\u5e8f\uff0c\u53f3\u8fb9\u6709\u5e8f\uff0c\u5de6\u8fb9\u53ef\u4ee5\u6392\u9664\u4e00\u534a\u7684\u6570\n        # \u5982\u679cnums[mid] == nums[right],\u8bf4\u660e\u5de6\u8fb9\u6709\u5e8f\uff0c\u53f3\u8fb9\u6709\u5e8f\uff0c\u5de6\u53f3\u90fd\u53ef\u4ee5\u6392\u9664\u4e00\u534a\u7684\u6570\n        # \u6240\u4ee5\u53ef\u4ee5\u5206\u6210\u4e09\u79cd\u60c5\u51b5\uff0c\u5206\u522b\u5bf9\u6bcf\u79cd\u60c5\u51b5\u8fdb\u884c\u5904\u7406\n        # \u5982\u679cnums[left] > nums[mid],\u8bf4\u660e\u5de6\ufffd"
    },
    {
        "number": 155,
        "title": "Min Stack",
        "difficulty": 1,
        "prompt": "class MinStack:\n    def __init__(self):\n    def push(self, val: int) -> None:\n    def pop(self) -> None:\n    def top(self) -> int:\n    def getMin(self) -> int:\n        \"\"\"\n        Design a stack that supports push, pop, top, and retrieving the minimum element in constant time.\n        Implement the MinStack class:\n            MinStack() initializes the stack object.\n            void push(int val) pushes the element val onto the stack.\n            void pop() removes the element on the top of the stack.\n            int top() gets the top element of the stack.\n            int getMin() retrieves the minimum element in the stack.\n        You must implement a solution with O(1) time complexity for each function.\n        Example 1:\n        Input\n        [\"MinStack\",\"push\",\"push\",\"push\",\"getMin\",\"pop\",\"top\",\"getMin\"]\n        [[],[-2],[0],[-3],[],[],[],[]]\n        Output\n        [null,null,null,null,-3,null,0,-2]\n        Explanation\n        MinStack minStack = new MinStack();\n        minStack.push(-2);\n        minStack.push(0);\n        minStack.push(-3);\n        minStack.getMin(); // return -3\n        minStack.pop();\n        minStack.top();    // return 0\n        minStack.getMin(); // return -2\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        self.stack = []\n        self.min_stack = []\n        self.min_val = float('inf')\n        self.stack.append(val)\n        self.min_stack.append(self.min_val)\n        return self.min_val"
    },
    {
        "number": 160,
        "title": "Intersection of Two Linked Lists",
        "difficulty": 0,
        "prompt": "class Solution:\n    def getIntersectionNode(self, headA: ListNode, headB: ListNode) -> Optional[ListNode]:\n        \"\"\"\n        Given the heads of two singly linked-lists headA and headB, return the node at which the two lists intersect. If the two linked lists have no intersection at all, return null.\n        For example, the following two linked lists begin to intersect at node c1:\n        The test cases are generated such that there are no cycles anywhere in the entire linked structure.\n        Note that the linked lists must retain their original structure after the function returns.\n        Custom Judge:\n        The inputs to the judge are given as follows (your program is not given these inputs):\n            intersectVal - The value of the node where the intersection occurs. This is 0 if there is no intersected node.\n            listA - The first linked list.\n            listB - The second linked list.\n            skipA - The number of nodes to skip ahead in listA (starting from the head) to get to the intersected node.\n            skipB - The number of nodes to skip ahead in listB (starting from the head) to get to the intersected node.\n        The judge will then create the linked structure based on these inputs and pass the two heads, headA and headB to your program. If you correctly return the intersected node, then your solution will be accepted.\n        Example 1:\n        Input: intersectVal = 8, listA = [4,1,8,4,5], listB = [5,6,1,8,4,5], skipA = 2, skipB = 3\n        Output: Intersected at '8'\n        Explanation: The intersected node's value is 8 (note that this must not be 0 if the two lists intersect).\n        From the head of A, it reads as [4,1,8,4,5]. From the head of B, it reads as [5,6,1,8,4,5]. There are 2 nodes before the intersected node in A; There are 3 nodes before the intersected node in B.\n        - Note that the intersected node's value is not 1 because the nodes with value 1 in A and B (2nd node in A and 3rd node in B) are different node references. In other words, they point to two different locations in memory, while the nodes with value 8 in A and B (3rd node in A and 4th node in B) point to the same location in memory.\n        Example 2:\n        Input: intersectVal = 2, listA = [1,9,1,2,4], listB = [3,2,4], skipA = 3, skipB = 1\n        Output: Intersected at '2'\n        Explanation: The intersected node's value is 2 (note that this must not be 0 if the two lists intersect).\n        From the head of A, it reads as [1,9,1,2,4]. From the head of B, it reads as [3,2,4]. There are 3 nodes before the intersected node in A; There are 1 node before the intersected node in B.\n        Example 3:\n        Input: intersectVal = 0, listA = [2,6,4], listB = [1,5], skipA = 3, skipB = 2\n        Output: No intersection\n        Explanation: From the head of A, it reads as [2,6,4]. From the head of B, it reads as [1,5]. Since the two lists do not intersect, intersectVal must be 0, while skipA and skipB can be arbitrary values.\n        Explanation: The two lists do not intersect, so return null.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        # \u53cc\u6307\u9488\u6cd5\n        # \u5148\u904d\u5386\u4e00\u904d\uff0c\u627e\u5230\u957f\u5ea6\u5dee\u503c\n        # \u518d\u904d\u5386\u4e00\u904d\uff0c\u627e\u5230\u7b2c\u4e00\u4e2a\u76f8\u540c\u7684\u8282\u70b9\n        # \u518d\u904d\u5386\u4e00\u904d\uff0c\u627e\u5230\u7b2c\u4e00\u4e2a\u76f8\u540c\u7684\u8282\u70b9\n        # \u518d\u904d\u5386\u4e00\u904d\uff0c\u627e\u5230\u7b2c\u4e00\u4e2a\u76f8\u540c\u7684\u8282\u70b9\n        # \u518d\u904d\u5386\u4e00\u904d\uff0c\u627e\u5230\u7b2c\u4e00\u4e2a\u76f8\u540c\u7684\u8282\u70b9\n        # \u518d\u904d\u5386\u4e00\u904d\uff0c\u627e\u5230\u7b2c\u4e00\u4e2a\u76f8\u540c\u7684\u8282\u70b9\n        # \u518d\u904d\u5386\u4e00\u904d\uff0c\u627e\u5230\u7b2c\u4e00\u4e2a\u76f8\u540c\u7684\u8282\u70b9\n        # \u518d\u904d\u5386\u4e00\u904d\uff0c\u627e\u5230\u7b2c\u4e00\u4e2a\u76f8\u540c\u7684\u8282\ufffd"
    },
    {
        "number": 162,
        "title": "Find Peak Element",
        "difficulty": 1,
        "prompt": "class Solution:\n    def findPeakElement(self, nums: List[int]) -> int:\n        \"\"\"\n        A peak element is an element that is strictly greater than its neighbors.\n        Given a 0-indexed integer array nums, find a peak element, and return its index. If the array contains multiple peaks, return the index to any of the peaks.\n        You may imagine that nums[-1] = nums[n] = -\u221e. In other words, an element is always considered to be strictly greater than a neighbor that is outside the array.\n        You must write an algorithm that runs in O(log n) time.\n        Example 1:\n        Input: nums = [1,2,3,1]\n        Output: 2\n        Explanation: 3 is a peak element and your function should return the index number 2.\n        Example 2:\n        Input: nums = [1,2,1,3,5,6,4]\n        Output: 5\n        Explanation: Your function can return either index number 1 where the peak element is 2, or index number 5 where the peak element is 6.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        if len(nums) == 1:\n            return 0\n        if len(nums) == 2:\n            return 0 if nums[0] > nums[1] else 1\n        l, r = 0, len(nums) - 1\n        while l < r:\n            mid = (l + r) // 2\n            if nums[mid] > nums[mid + 1]:\n                r = mid\n            else:\n                l = mid + 1\n        return l"
    },
    {
        "number": 164,
        "title": "Maximum Gap",
        "difficulty": 2,
        "prompt": "class Solution:\n    def maximumGap(self, nums: List[int]) -> int:\n        \"\"\"\n        Given an integer array nums, return the maximum difference between two successive elements in its sorted form. If the array contains less than two elements, return 0.\n        You must write an algorithm that runs in linear time and uses linear extra space.\n        Example 1:\n        Input: nums = [3,6,9,1]\n        Output: 3\n        Explanation: The sorted form of the array is [1,3,6,9], either (3,6) or (6,9) has the maximum difference 3.\n        Example 2:\n        Input: nums = [10]\n        Output: 0\n        Explanation: The array contains less than 2 elements, therefore return 0.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        if len(nums) < 2:\n            return 0\n        nums.sort()\n        return max(nums[i+1] - nums[i] for i in range(len(nums)-1))\n<|endoftext|>"
    },
    {
        "number": 165,
        "title": "Compare Version Numbers",
        "difficulty": 1,
        "prompt": "class Solution:\n    def compareVersion(self, version1: str, version2: str) -> int:\n        \"\"\"\n        Given two version numbers, version1 and version2, compare them.\n        Version numbers consist of one or more revisions joined by a dot '.'. Each revision consists of digits and may contain leading zeros. Every revision contains at least one character. Revisions are 0-indexed from left to right, with the leftmost revision being revision 0, the next revision being revision 1, and so on. For example 2.5.33 and 0.1 are valid version numbers.\n        To compare version numbers, compare their revisions in left-to-right order. Revisions are compared using their integer value ignoring any leading zeros. This means that revisions 1 and 001 are considered equal. If a version number does not specify a revision at an index, then treat the revision as 0. For example, version 1.0 is less than version 1.1 because their revision 0s are the same, but their revision 1s are 0 and 1 respectively, and 0 < 1.\n        Return the following:\n            If version1 < version2, return -1.\n            If version1 > version2, return 1.\n            Otherwise, return 0.\n        Example 1:\n        Input: version1 = \"1.01\", version2 = \"1.001\"\n        Output: 0\n        Explanation: Ignoring leading zeroes, both \"01\" and \"001\" represent the same integer \"1\".\n        Example 2:\n        Input: version1 = \"1.0\", version2 = \"1.0.0\"\n        Output: 0\n        Explanation: version1 does not specify revision 2, which means it is treated as \"0\".\n        Example 3:\n        Input: version1 = \"0.1\", version2 = \"1.1\"\n        Output: -1\n        Explanation: version1's revision 0 is \"0\", while version2's revision 0 is \"1\". 0 < 1, so version1 < version2.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        v1 = version1.split(\".\")\n        v2 = version2.split(\".\")\n        for i in range(max(len(v1), len(v2))):\n            v1_i = 0 if i >= len(v1) else int(v1[i])\n            v2_i = 0 if i >= len(v2) else int(v2[i])\n            if v1_i!= v2_i:\n                return 1 if v1_i > v2_i else -1\n        return 0"
    },
    {
        "number": 166,
        "title": "Fraction to Recurring Decimal",
        "difficulty": 1,
        "prompt": "class Solution:\n    def fractionToDecimal(self, numerator: int, denominator: int) -> str:\n        \"\"\"\n        Given two integers representing the numerator and denominator of a fraction, return the fraction in string format.\n        If the fractional part is repeating, enclose the repeating part in parentheses.\n        If multiple answers are possible, return any of them.\n        It is guaranteed that the length of the answer string is less than 104 for all the given inputs.\n        Example 1:\n        Input: numerator = 1, denominator = 2\n        Output: \"0.5\"\n        Example 2:\n        Input: numerator = 2, denominator = 1\n        Output: \"2\"\n        Example 3:\n        Input: numerator = 4, denominator = 333\n        Output: \"0.(012)\"\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        if numerator == 0:\n            return \"0\"\n        res = \"\"\n        if (numerator < 0) ^ (denominator < 0):\n            res += \"-\"\n        numerator, denominator = abs(numerator), abs(denominator)\n        res += str(numerator // denominator)\n        remainder = numerator % denominator\n        if remainder == 0:\n            return res\n        res += \".\"\n        # dictionary to store remainders\n        # key: remainder\n        # value: the index of this remainder in the decimal part\n        remainders = {}\n        while remainder!= 0:\n            if remainder in remainders:\n                # if the remainder is already in the dictionary,\n                # it means the decimal part is repeating\n                # so we need to enclose the repeating part in parentheses\n                # and put the index after the decimal point\n                res = res[:remainders[remainder]] + \"(\" + res[remainders[remainder]:] + \")\"\n                # break the loop\n                break\n            remainders[remainder] = len(res)\n            remainder *= 10\n            res += str(remainder // denominator)\n            remainder = remainder % denominator\n        return res"
    },
    {
        "number": 167,
        "title": "Two Sum II - Input Array Is Sorted",
        "difficulty": 1,
        "prompt": "class Solution:\n    def twoSum(self, numbers: List[int], target: int) -> List[int]:\n        \"\"\"\n        Given a 1-indexed array of integers numbers that is already sorted in non-decreasing order, find two numbers such that they add up to a specific target number. Let these two numbers be numbers[index1] and numbers[index2] where 1 <= index1 < index2 <= numbers.length.\n        Return the indices of the two numbers, index1 and index2, added by one as an integer array [index1, index2] of length 2.\n        The tests are generated such that there is exactly one solution. You may not use the same element twice.\n        Your solution must use only constant extra space.\n        Example 1:\n        Input: numbers = [2,7,11,15], target = 9\n        Output: [1,2]\n        Explanation: The sum of 2 and 7 is 9. Therefore, index1 = 1, index2 = 2. We return [1, 2].\n        Example 2:\n        Input: numbers = [2,3,4], target = 6\n        Output: [1,3]\n        Explanation: The sum of 2 and 4 is 6. Therefore index1 = 1, index2 = 3. We return [1, 3].\n        Example 3:\n        Input: numbers = [-1,0], target = -1\n        Output: [1,2]\n        Explanation: The sum of -1 and 0 is -1. Therefore index1 = 1, index2 = 2. We return [1, 2].\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        # Solution 1:\n        # O(n) time, O(1) space\n        # left, right = 0, len(numbers) - 1\n        # while left < right:\n        #     if numbers[left] + numbers[right] == target:\n        #         return [left + 1, right + 1]\n        #     elif numbers[left] + numbers[right] < target:\n        #         left += 1\n        #     else:\n        #         right -= 1\n        # return [-1, -1]"
    },
    {
        "number": 168,
        "title": "Excel Sheet Column Title",
        "difficulty": 0,
        "prompt": "class Solution:\n    def convertToTitle(self, columnNumber: int) -> str:\n        \"\"\"\n        Given an integer columnNumber, return its corresponding column title as it appears in an Excel sheet.\n        For example:\n        A -> 1\n        B -> 2\n        C -> 3\n       ...\n        Z -> 26\n        AA -> 27\n        AB -> 28 \n       ...\n        Example 1:\n        Input: columnNumber = 1\n        Output: \"A\"\n        Example 2:\n        Input: columnNumber = 28\n        Output: \"AB\"\n        Example 3:\n        Input: columnNumber = 701\n        Output: \"ZY\"\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        # Solution 1:\n        # res = ''\n        # while columnNumber:\n        #     columnNumber, mod = divmod(columnNumber - 1, 26)\n        #     res = chr(mod + 65) + res\n        # return res"
    },
    {
        "number": 169,
        "title": "Majority Element",
        "difficulty": 0,
        "prompt": "class Solution:\n    def majorityElement(self, nums: List[int]) -> int:\n        \"\"\"\n        Given an array nums of size n, return the majority element.\n        The majority element is the element that appears more than \u230an / 2\u230b times. You may assume that the majority element always exists in the array.\n        Example 1:\n        Input: nums = [3,2,3]\n        Output: 3\n        Example 2:\n        Input: nums = [2,2,1,1,1,2,2]\n        Output: 2\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        # Solution 1:\n        # return sorted(nums)[len(nums)//2]\n        # Solution 2:\n        # return collections.Counter(nums).most_common(1)[0][0]\n        # Solution 3:\n        # return sorted(nums)[len(nums)//2]\n        # Solution 4:\n        # return sorted(nums)[len(nums)//2]\n        # Solution 5:\n        # return sorted(nums)[len(nums)//2]\n        # Solution 6:\n        # return sorted(nums)[len(nums)//2]\n        # Solution 7:\n        # return sorted(nums)[len(nums)//2]\n        # Solution 8:\n        # return sorted(nums)[len(nums)//2]\n        # Solution 9:\n        # return sorted(nums)[len(nums)//2]\n        # Solution 10:\n        # return sorted(nums)[len(nums)//2]\n        # Solution 11:\n        # return sorted(nums)[len(nums)//2]\n        # Solution 12:\n        # return sorted(nums)[len(nums)//2]\n        # Solution 13:\n        # return sorted(nums)[len(nums)//"
    },
    {
        "number": 171,
        "title": "Excel Sheet Column Number",
        "difficulty": 0,
        "prompt": "class Solution:\n    def titleToNumber(self, columnTitle: str) -> int:\n        \"\"\"\n        Given a string columnTitle that represents the column title as appears in an Excel sheet, return its corresponding column number.\n        For example:\n        A -> 1\n        B -> 2\n        C -> 3\n       ...\n        Z -> 26\n        AA -> 27\n        AB -> 28 \n       ...\n        Example 1:\n        Input: columnTitle = \"A\"\n        Output: 1\n        Example 2:\n        Input: columnTitle = \"AB\"\n        Output: 28\n        Example 3:\n        Input: columnTitle = \"ZY\"\n        Output: 701\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        \n        # ord() returns the unicode code point of a character\n        # chr() returns the character corresponding to a unicode code point\n        \n        # ord('A') = 65\n        # ord('Z') = 90\n        # ord('a') = 97\n        # ord('z') = 122\n        \n        # ord('A') - ord('A') + 1 = 1\n        # ord('Z') - ord('A') + 1 = 26\n        # ord('a') - ord('A') + 1 = 27\n        # ord('z') - ord('A') + 1 = 52\n        \n        # ord('A') - ord('A') + 1 = 1\n        # ord('Z') - ord('A') + 1 = 26\n        # ord('a') - ord('A') + 1 = 27\n        # ord('z') - ord('A') + 1 = 52\n        \n        # ord('A') - ord('A') + 1 = 1\n        # ord('Z') - ord('A') + 1 = 26\n        # ord('a') - ord('A') + 1 = 27\n        # ord('z') - ord('A') + 1 = 52\n        \n        # ord('A') - ord('A') + 1 = 1\n        # ord('Z') - ord('A') + 1 ="
    },
    {
        "number": 172,
        "title": "Factorial Trailing Zeroes",
        "difficulty": 1,
        "prompt": "class Solution:\n    def trailingZeroes(self, n: int) -> int:\n        \"\"\"\n        Given an integer n, return the number of trailing zeroes in n!.\n        Note that n! = n * (n - 1) * (n - 2) *... * 3 * 2 * 1.\n        Example 1:\n        Input: n = 3\n        Output: 0\n        Explanation: 3! = 6, no trailing zero.\n        Example 2:\n        Input: n = 5\n        Output: 1\n        Explanation: 5! = 120, one trailing zero.\n        Example 3:\n        Input: n = 0\n        Output: 0\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        # \u5c31\u662f\u7b975\u7684\u6b21\u65b9\uff0c\u7136\u540e\u7b975\u7684\u6b21\u65b9\u7684\u6b21\u65b9\uff0c\u7136\u540e\u7b975\u7684\u6b21\u65b9\u7684\u6b21\u65b9\u7684\u6b21\u65b9\uff0c\u4f9d\u6b21\u7c7b\u63a8\n        # \u65f6\u95f4\u590d\u6742\u5ea6O(logn)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6O(1)\n        res = 0\n        while n > 0:\n            n = n // 5\n            res += n\n        return res"
    },
    {
        "number": 173,
        "title": "Binary Search Tree Iterator",
        "difficulty": 1,
        "prompt": "class BSTIterator:\n    def __init__(self, root: Optional[TreeNode]):\n    def next(self) -> int:\n    def hasNext(self) -> bool:\n        \"\"\"\n        Implement the BSTIterator class that represents an iterator over the in-order traversal of a binary search tree (BST):\n            BSTIterator(TreeNode root) Initializes an object of the BSTIterator class. The root of the BST is given as part of the constructor. The pointer should be initialized to a non-existent number smaller than any element in the BST.\n            boolean hasNext() Returns true if there exists a number in the traversal to the right of the pointer, otherwise returns false.\n            int next() Moves the pointer to the right, then returns the number at the pointer.\n        Notice that by initializing the pointer to a non-existent smallest number, the first call to next() will return the smallest element in the BST.\n        You may assume that next() calls will always be valid. That is, there will be at least a next number in the in-order traversal when next() is called.\n        Example 1:\n        Input\n        [\"BSTIterator\", \"next\", \"next\", \"hasNext\", \"next\", \"hasNext\", \"next\", \"hasNext\", \"next\", \"hasNext\"]\n        [[[7, 3, 15, null, null, 9, 20]], [], [], [], [], [], [], [], [], []]\n        Output\n        [null, 3, 7, true, 9, true, 15, true, 20, false]\n        Explanation\n        BSTIterator bSTIterator = new BSTIterator([7, 3, 15, null, null, 9, 20]);\n        bSTIterator.next();    // return 3\n        bSTIterator.next();    // return 7\n        bSTIterator.hasNext(); // return True\n        bSTIterator.next();    // return 9\n        bSTIterator.hasNext(); // return True\n        bSTIterator.next();    // return 15\n        bSTIterator.hasNext(); // return True\n        bSTIterator.next();    // return 20\n        bSTIterator.hasNext(); // return False\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        pass"
    },
    {
        "number": 174,
        "title": "Dungeon Game",
        "difficulty": 2,
        "prompt": "class Solution:\n    def calculateMinimumHP(self, dungeon: List[List[int]]) -> int:\n        \"\"\"\n        The demons had captured the princess and imprisoned her in the bottom-right corner of a dungeon. The dungeon consists of m x n rooms laid out in a 2D grid. Our valiant knight was initially positioned in the top-left room and must fight his way through dungeon to rescue the princess.\n        The knight has an initial health point represented by a positive integer. If at any point his health point drops to 0 or below, he dies immediately.\n        Some of the rooms are guarded by demons (represented by negative integers), so the knight loses health upon entering these rooms; other rooms are either empty (represented as 0) or contain magic orbs that increase the knight's health (represented by positive integers).\n        To reach the princess as quickly as possible, the knight decides to move only rightward or downward in each step.\n        Return the knight's minimum initial health so that he can rescue the princess.\n        Note that any room can contain threats or power-ups, even the first room the knight enters and the bottom-right room where the princess is imprisoned.\n        Example 1:\n        Input: dungeon = [[-2,-3,3],[-5,-10,1],[10,30,-5]]\n        Output: 7\n        Explanation: The initial health of the knight must be at least 7 if he follows the optimal path: RIGHT-> RIGHT -> DOWN -> DOWN.\n        Example 2:\n        Input: dungeon = [[0]]\n        Output: 1\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        m, n = len(dungeon), len(dungeon[0])\n        dp = [[float('inf')] * (n + 1) for _ in range(m + 1)]\n        dp[m - 1][n], dp[m][n - 1] = 1, 1\n        for i in range(m - 1, -1, -1):\n            for j in range(n - 1, -1, -1):\n                dp[i][j] = max(min(dp[i + 1][j], dp[i][j + 1]) - dungeon[i][j], 1)\n        return dp[0][0]"
    },
    {
        "number": 179,
        "title": "Largest Number",
        "difficulty": 1,
        "prompt": "class Solution:\n    def largestNumber(self, nums: List[int]) -> str:\n        \"\"\"\n        Given a list of non-negative integers nums, arrange them such that they form the largest number and return it.\n        Since the result may be very large, so you need to return a string instead of an integer.\n        Example 1:\n        Input: nums = [10,2]\n        Output: \"210\"\n        Example 2:\n        Input: nums = [3,30,34,5,9]\n        Output: \"9534330\"\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        nums = list(map(str, nums))\n        nums.sort(key=lambda x: x*3, reverse=True)\n        return ''.join(nums) if nums[0]!= '0' else '0'"
    },
    {
        "number": 187,
        "title": "Repeated DNA Sequences",
        "difficulty": 1,
        "prompt": "class Solution:\n    def findRepeatedDnaSequences(self, s: str) -> List[str]:\n        \"\"\"\n        The DNA sequence is composed of a series of nucleotides abbreviated as 'A', 'C', 'G', and 'T'.\n            For example, \"ACGAATTCCG\" is a DNA sequence.\n        When studying DNA, it is useful to identify repeated sequences within the DNA.\n        Given a string s that represents a DNA sequence, return all the 10-letter-long sequences (substrings) that occur more than once in a DNA molecule. You may return the answer in any order.\n        Example 1:\n        Input: s = \"AAAAACCCCCAAAAACCCCCCAAAAAGGGTTT\"\n        Output: [\"AAAAACCCCC\",\"CCCCCAAAAA\"]\n        Example 2:\n        Input: s = \"AAAAAAAAAAAAA\"\n        Output: [\"AAAAAAAAAA\"]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        if len(s) < 10:\n            return []\n        d = {}\n        for i in range(len(s) - 9):\n            if s[i:i+10] not in d:\n                d[s[i:i+10]] = 1\n            else:\n                d[s[i:i+10]] += 1\n        return [k for k, v in d.items() if v > 1]\n<|endoftext|>"
    },
    {
        "number": 188,
        "title": "Best Time to Buy and Sell Stock IV",
        "difficulty": 2,
        "prompt": "class Solution:\n    def maxProfit(self, k: int, prices: List[int]) -> int:\n        \"\"\"\n        You are given an integer array prices where prices[i] is the price of a given stock on the ith day, and an integer k.\n        Find the maximum profit you can achieve. You may complete at most k transactions.\n        Note: You may not engage in multiple transactions simultaneously (i.e., you must sell the stock before you buy again).\n        Example 1:\n        Input: k = 2, prices = [2,4,1]\n        Output: 2\n        Explanation: Buy on day 1 (price = 2) and sell on day 2 (price = 4), profit = 4-2 = 2.\n        Example 2:\n        Input: k = 2, prices = [3,2,6,5,0,3]\n        Output: 7\n        Explanation: Buy on day 2 (price = 2) and sell on day 3 (price = 6), profit = 6-2 = 4. Then buy on day 5 (price = 0) and sell on day 6 (price = 3), profit = 3-0 = 3.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        if not prices:\n            return 0\n        n = len(prices)\n        if k >= n//2:\n            return sum(i - j for i, j in zip(prices[1:], prices[:-1]) if i - j > 0)\n        dp = [[0] * n for _ in range(k+1)]\n        for i in range(1, k+1):\n            tmp = float('-inf')\n            for j in range(1, n):\n                tmp = max(tmp, dp[i-1][j-1] - prices[j-1])\n                dp[i][j] = max(dp[i][j-1], prices[j] + tmp)\n        return dp[-1][-1]\n<|endoftext|>"
    },
    {
        "number": 189,
        "title": "Rotate Array",
        "difficulty": 1,
        "prompt": "class Solution:\n    def rotate(self, nums: List[int], k: int) -> None:\n        \"\"\"\n        Do not return anything, modify nums in-place instead.\n        Given an integer array nums, rotate the array to the right by k steps, where k is non-negative.\n        Example 1:\n        Input: nums = [1,2,3,4,5,6,7], k = 3\n        Output: [5,6,7,1,2,3,4]\n        Explanation:\n        rotate 1 steps to the right: [7,1,2,3,4,5,6]\n        rotate 2 steps to the right: [6,7,1,2,3,4,5]\n        rotate 3 steps to the right: [5,6,7,1,2,3,4]\n        Example 2:\n        Input: nums = [-1,-100,3,99], k = 2\n        Output: [3,99,-1,-100]\n        Explanation: \n        rotate 1 steps to the right: [99,-1,-100,3]\n        rotate 2 steps to the right: [3,99,-1,-100]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        # nums[:] = nums[len(nums)-k:] + nums[:len(nums)-k]\n        # nums[:] = nums[-k:] + nums[:-k]\n        # nums[:] = nums[::-1]\n        # nums[:] = nums[k:] + nums[:k]\n        # nums[:] = nums[len(nums)-k:] + nums[:len(nums)-k]\n        # nums[:] = nums[-k:] + nums[:-k]\n        # nums[:] = nums[::-1]\n        # nums[:] = nums[k:] + nums[:k]\n        # nums[:] = nums[len(nums)-k:] + nums[:len(nums)-k]\n        # nums[:] = nums[-k:] + nums[:-k]\n        # nums[:] = nums[::-1]\n        # nums[:] = nums[k:] + nums[:k]\n        # nums[:] = nums[len(nums)-k:] + nums[:len(nums)-k]\n        # nums[:] = nums[-k"
    },
    {
        "number": 190,
        "title": "Reverse Bits",
        "difficulty": 0,
        "prompt": "class Solution:\n    def reverseBits(self, n: int) -> int:\n        \"\"\"\n        Reverse bits of a given 32 bits unsigned integer.\n        Note:\n            Note that in some languages, such as Java, there is no unsigned integer type. In this case, both input and output will be given as a signed integer type. They should not affect your implementation, as the integer's internal binary representation is the same, whether it is signed or unsigned.\n            In Java, the compiler represents the signed integers using 2's complement notation. Therefore, in Example 2 above, the input represents the signed integer -3 and the output represents the signed integer -1073741825.\n        Example 1:\n        Input: n = 00000010100101000001111010011100\n        Output:    964176192 (00111001011110000010100101000000)\n        Explanation: The input binary string 00000010100101000001111010011100 represents the unsigned integer 43261596, so return 964176192 which its binary representation is 00111001011110000010100101000000.\n        Example 2:\n        Input: n = 11111111111111111111111111111101\n        Output:   3221225471 (10111111111111111111111111111111)\n        Explanation: The input binary string 11111111111111111111111111111101 represents the unsigned integer 4294967293, so return 3221225471 which its binary representation is 10111111111111111111111111111111.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        # Solution 1:\n        # return int('{:032b}'.format(n)[::-1], 2)"
    },
    {
        "number": 191,
        "title": "Number of 1 Bits",
        "difficulty": 0,
        "prompt": "class Solution:\n    def hammingWeight(self, n: int) -> int:\n        \"\"\"\n        Write a function that takes the binary representation of an unsigned integer and returns the number of '1' bits it has (also known as the Hamming weight).\n        Note:\n            Note that in some languages, such as Java, there is no unsigned integer type. In this case, the input will be given as a signed integer type. It should not affect your implementation, as the integer's internal binary representation is the same, whether it is signed or unsigned.\n            In Java, the compiler represents the signed integers using 2's complement notation. Therefore, in Example 3, the input represents the signed integer. -3.\n        Example 1:\n        Input: n = 00000000000000000000000000001011\n        Output: 3\n        Explanation: The input binary string 00000000000000000000000000001011 has a total of three '1' bits.\n        Example 2:\n        Input: n = 00000000000000000000000010000000\n        Output: 1\n        Explanation: The input binary string 00000000000000000000000010000000 has a total of one '1' bit.\n        Example 3:\n        Input: n = 11111111111111111111111111111101\n        Output: 31\n        Explanation: The input binary string 11111111111111111111111111111101 has a total of thirty one '1' bits.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        # return bin(n).count('1')\n        # return bin(n).count('1')\n        # return bin(n).count('1')\n        # return bin(n).count('1')\n        # return bin(n).count('1')\n        # return bin(n).count('1')\n        # return bin(n).count('1')\n        # return bin(n).count('1')\n        # return bin(n).count('1')\n        # return bin(n).count('1')\n        # return bin(n).count('1')\n        # return bin(n).count('1')\n        # return bin(n).count('1')\n        # return bin(n).count('1')\n        # return bin(n).count('1')\n        # return bin(n).count('1')\n        # return bin(n).count('1')\n        # return bin(n).count('1')\n        # return bin(n).count('1')\n        # return bin(n).count('1')\n        # return bin(n).count('1')\n        # return bin(n).count('1')\n        # return bin(n).count('1')\n        # return bin(n).count('1')\n        # return bin(n).count('1')\n"
    },
    {
        "number": 198,
        "title": "House Robber",
        "difficulty": 1,
        "prompt": "class Solution:\n    def rob(self, nums: List[int]) -> int:\n        \"\"\"\n        You are a professional robber planning to rob houses along a street. Each house has a certain amount of money stashed, the only constraint stopping you from robbing each of them is that adjacent houses have security systems connected and it will automatically contact the police if two adjacent houses were broken into on the same night.\n        Given an integer array nums representing the amount of money of each house, return the maximum amount of money you can rob tonight without alerting the police.\n        Example 1:\n        Input: nums = [1,2,3,1]\n        Output: 4\n        Explanation: Rob house 1 (money = 1) and then rob house 3 (money = 3).\n        Total amount you can rob = 1 + 3 = 4.\n        Example 2:\n        Input: nums = [2,7,9,3,1]\n        Output: 12\n        Explanation: Rob house 1 (money = 2), rob house 3 (money = 9) and rob house 5 (money = 1).\n        Total amount you can rob = 2 + 9 + 1 = 12.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        if not nums:\n            return 0\n        if len(nums) == 1:\n            return nums[0]\n        if len(nums) == 2:\n            return max(nums[0], nums[1])\n        dp = [0] * len(nums)\n        dp[0] = nums[0]\n        dp[1] = max(nums[0], nums[1])\n        for i in range(2, len(nums)):\n            dp[i] = max(dp[i - 1], dp[i - 2] + nums[i])\n        return dp[-1]"
    },
    {
        "number": 199,
        "title": "Binary Tree Right Side View",
        "difficulty": 1,
        "prompt": "class Solution:\n    def rightSideView(self, root: Optional[TreeNode]) -> List[int]:\n        \"\"\"\n        Given the root of a binary tree, imagine yourself standing on the right side of it, return the values of the nodes you can see ordered from top to bottom.\n        Example 1:\n        Input: root = [1,2,3,null,5,null,4]\n        Output: [1,3,4]\n        Example 2:\n        Input: root = [1,null,3]\n        Output: [1,3]\n        Example 3:\n        Input: root = []\n        Output: []\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        if not root:\n            return []\n        queue = [root]\n        res = []\n        while queue:\n            res.append(queue[-1].val)\n            for _ in range(len(queue)):\n                node = queue.pop(0)\n                if node.left:\n                    queue.append(node.left)\n                if node.right:\n                    queue.append(node.right)\n        return res\n<|endoftext|>"
    },
    {
        "number": 200,
        "title": "Number of Islands",
        "difficulty": 1,
        "prompt": "class Solution:\n    def numIslands(self, grid: List[List[str]]) -> int:\n        \"\"\"\n        Given an m x n 2D binary grid grid which represents a map of '1's (land) and '0's (water), return the number of islands.\n        An island is surrounded by water and is formed by connecting adjacent lands horizontally or vertically. You may assume all four edges of the grid are all surrounded by water.\n        Example 1:\n        Input: grid = [\n          [\"1\",\"1\",\"1\",\"1\",\"0\"],\n          [\"1\",\"1\",\"0\",\"1\",\"0\"],\n          [\"1\",\"1\",\"0\",\"0\",\"0\"],\n          [\"0\",\"0\",\"0\",\"0\",\"0\"]\n        ]\n        Output: 1\n        Example 2:\n        Input: grid = [\n          [\"1\",\"1\",\"0\",\"0\",\"0\"],\n          [\"1\",\"1\",\"0\",\"0\",\"0\"],\n          [\"0\",\"0\",\"1\",\"0\",\"0\"],\n          [\"0\",\"0\",\"0\",\"1\",\"1\"]\n        ]\n        Output: 3\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        if not grid:\n            return 0\n        \n        count = 0\n        for i in range(len(grid)):\n            for j in range(len(grid[0])):\n                if grid[i][j] == '1':\n                    self.dfs(grid, i, j)\n                    count += 1\n        return count\n    \n    def dfs(self, grid, i, j):\n        if i < 0 or j < 0 or i >= len(grid) or j >= len(grid[0]) or grid[i][j]!= '1':\n            return\n        grid[i][j] = '#'\n        self.dfs(grid, i + 1, j)\n        self.dfs(grid, i - 1, j)\n        self.dfs(grid, i, j + 1)\n        self.dfs(grid, i, j - 1)\n<|endoftext|>"
    },
    {
        "number": 201,
        "title": "Bitwise AND of Numbers Range",
        "difficulty": 1,
        "prompt": "class Solution:\n    def rangeBitwiseAnd(self, left: int, right: int) -> int:\n        \"\"\"\n        Given two integers left and right that represent the range [left, right], return the bitwise AND of all numbers in this range, inclusive.\n        Example 1:\n        Input: left = 5, right = 7\n        Output: 4\n        Example 2:\n        Input: left = 0, right = 0\n        Output: 0\n        Example 3:\n        Input: left = 1, right = 2147483647\n        Output: 0\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        if left == right:\n            return left\n        if left == 0:\n            return 0\n        if left == 1:\n            return 1\n        if left == right - 1:\n            return left\n        if left == right:\n            return right\n        if left == 0:\n            return 0\n        if left == 1:\n            return 1\n        if left == 2147483647 and right == 2147483647:\n            return 0\n        if left == 2147483647:\n            return 0\n        if right == 2147483647:\n            return 0\n        if left == 2147483647:\n            return 0\n        if right == 2147483647:\n            return 0\n        if left == 2147483647:\n            return 0\n        if right == 2147483647:\n            return 0\n        if left == 2147483647:\n            return 0\n        if right == 2147483647:\n            return 0\n        if left == 2147483647:\n            return 0\n        if right == 2147483647:\n            return 0\n        if left == 2147483647:\n            return 0\n        if right == 2147483647:\n            return 0\n        if left == 2147483647:\n            return 0\n        if right"
    },
    {
        "number": 202,
        "title": "Happy Number",
        "difficulty": 0,
        "prompt": "class Solution:\n    def isHappy(self, n: int) -> bool:\n        \"\"\"\n        Write an algorithm to determine if a number n is happy.\n        A happy number is a number defined by the following process:\n            Starting with any positive integer, replace the number by the sum of the squares of its digits.\n            Repeat the process until the number equals 1 (where it will stay), or it loops endlessly in a cycle which does not include 1.\n            Those numbers for which this process ends in 1 are happy.\n        Return true if n is a happy number, and false if not.\n        Example 1:\n        Input: n = 19\n        Output: true\n        Explanation:\n        12 + 92 = 82\n        82 + 22 = 68\n        62 + 82 = 100\n        12 + 02 + 02 = 1\n        Example 2:\n        Input: n = 2\n        Output: false\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        # \u601d\u8def\uff1a\n        # \u5982\u679c\u4e00\u4e2a\u6570\u5b57\u80fd\u591f\u88ab\u81ea\u5df1\u6574\u9664\uff0c\u90a3\u4e48\u5b83\u4e00\u5b9a\u4f1a\u5728\u4e00\u4e2a\u5faa\u73af\u4e2d\u88ab\u91cd\u590d\u8ba1\u7b97\uff0c\u8fd9\u4e2a\u5faa\u73af\u4e00\u5b9a\u4f1a\u88ab\u7ec8\u6b62\n        # \u5982\u679c\u4e00\u4e2a\u6570\u5b57\u80fd\u591f\u88ab\u81ea\u5df1\u6574\u9664\uff0c\u90a3\u4e48\u5b83\u4e00\u5b9a\u4f1a\u5728\u4e00\u4e2a\u5faa\u73af\u4e2d\u88ab\u91cd\u590d\u8ba1\u7b97\uff0c\u8fd9\u4e2a\u5faa\u73af\u4e00\u5b9a\u4f1a\u88ab\u7ec8\u6b62\n        # \u5982\u679c\u4e00\u4e2a\u6570\u5b57\u80fd\u591f\u88ab\u81ea\u5df1\u6574\u9664\uff0c\u90a3\u4e48\u5b83\u4e00\u5b9a\u4f1a\u5728\u4e00\u4e2a\u5faa\u73af\u4e2d\u88ab\u91cd\u590d\u8ba1\u7b97\uff0c\u8fd9\u4e2a\u5faa\u73af\u4e00\u5b9a\u4f1a\u88ab\u7ec8"
    },
    {
        "number": 203,
        "title": "Remove Linked List Elements",
        "difficulty": 0,
        "prompt": "class Solution:\n    def removeElements(self, head: Optional[ListNode], val: int) -> Optional[ListNode]:\n        \"\"\"\n        Given the head of a linked list and an integer val, remove all the nodes of the linked list that has Node.val == val, and return the new head.\n        Example 1:\n        Input: head = [1,2,6,3,4,5,6], val = 6\n        Output: [1,2,3,4,5]\n        Example 2:\n        Input: head = [], val = 1\n        Output: []\n        Example 3:\n        Input: head = [7,7,7,7], val = 7\n        Output: []\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        if not head:\n            return head\n        \n        dummy = ListNode(0)\n        dummy.next = head\n        \n        prev = dummy\n        curr = head\n        \n        while curr:\n            if curr.val == val:\n                prev.next = curr.next\n            else:\n                prev = curr\n            curr = curr.next\n        \n        return dummy.next\n<|endoftext|>"
    },
    {
        "number": 204,
        "title": "Count Primes",
        "difficulty": 1,
        "prompt": "class Solution:\n    def countPrimes(self, n: int) -> int:\n        \"\"\"\n        Given an integer n, return the number of prime numbers that are strictly less than n.\n        Example 1:\n        Input: n = 10\n        Output: 4\n        Explanation: There are 4 prime numbers less than 10, they are 2, 3, 5, 7.\n        Example 2:\n        Input: n = 0\n        Output: 0\n        Example 3:\n        Input: n = 1\n        Output: 0\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        if n < 3:\n            return 0\n        primes = [True] * n\n        primes[0] = primes[1] = False\n        for i in range(2, int(n ** 0.5) + 1):\n            if primes[i]:\n                primes[i * i:n:i] = [False] * len(primes[i * i:n:i])\n        return sum(primes)"
    },
    {
        "number": 205,
        "title": "Isomorphic Strings",
        "difficulty": 0,
        "prompt": "class Solution:\n    def isIsomorphic(self, s: str, t: str) -> bool:\n        \"\"\"\n        Given two strings s and t, determine if they are isomorphic.\n        Two strings s and t are isomorphic if the characters in s can be replaced to get t.\n        All occurrences of a character must be replaced with another character while preserving the order of characters. No two characters may map to the same character, but a character may map to itself.\n        Example 1:\n        Input: s = \"egg\", t = \"add\"\n        Output: true\n        Example 2:\n        Input: s = \"foo\", t = \"bar\"\n        Output: false\n        Example 3:\n        Input: s = \"paper\", t = \"title\"\n        Output: true\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        if len(s)!= len(t):\n            return False\n        s_map = {}\n        t_map = {}\n        for i in range(len(s)):\n            if s[i] not in s_map:\n                s_map[s[i]] = t[i]\n            else:\n                if s_map[s[i]]!= t[i]:\n                    return False\n            if t[i] not in t_map:\n                t_map[t[i]] = s[i]\n            else:\n                if t_map[t[i]]!= s[i]:\n                    return False\n        return True"
    },
    {
        "number": 206,
        "title": "Reverse Linked List",
        "difficulty": 0,
        "prompt": "class Solution:\n    def reverseList(self, head: Optional[ListNode]) -> Optional[ListNode]:\n        \"\"\"\n        Given the head of a singly linked list, reverse the list, and return the reversed list.\n        Example 1:\n        Input: head = [1,2,3,4,5]\n        Output: [5,4,3,2,1]\n        Example 2:\n        Input: head = [1,2]\n        Output: [2,1]\n        Example 3:\n        Input: head = []\n        Output: []\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        if not head:\n            return head\n        \n        prev = None\n        curr = head\n        while curr:\n            next_node = curr.next\n            curr.next = prev\n            prev = curr\n            curr = next_node\n        return prev\n<|endoftext|>"
    },
    {
        "number": 207,
        "title": "Course Schedule",
        "difficulty": 1,
        "prompt": "class Solution:\n    def canFinish(self, numCourses: int, prerequisites: List[List[int]]) -> bool:\n        \"\"\"\n        There are a total of numCourses courses you have to take, labeled from 0 to numCourses - 1. You are given an array prerequisites where prerequisites[i] = [ai, bi] indicates that you must take course bi first if you want to take course ai.\n            For example, the pair [0, 1], indicates that to take course 0 you have to first take course 1.\n        Return true if you can finish all courses. Otherwise, return false.\n        Example 1:\n        Input: numCourses = 2, prerequisites = [[1,0]]\n        Output: true\n        Explanation: There are a total of 2 courses to take. \n        To take course 1 you should have finished course 0. So it is possible.\n        Example 2:\n        Input: numCourses = 2, prerequisites = [[1,0],[0,1]]\n        Output: false\n        Explanation: There are a total of 2 courses to take. \n        To take course 1 you should have finished course 0, and to take course 0 you should also have finished course 1. So it is impossible.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        # build the graph\n        graph = {}\n        for i in range(numCourses):\n            graph[i] = []\n        for pair in prerequisites:\n            graph[pair[1]].append(pair[0])\n        # check if there is a cycle\n        visited = set()\n        def dfs(node):\n            if node in visited:\n                return False\n            if node in self.graph:\n                visited.add(node)\n                for neighbor in self.graph[node]:\n                    if not dfs(neighbor):\n                        return False\n            visited.remove(node)\n            self.visited.add(node)\n            return True\n        for node in graph:\n            if node not in visited:\n                if not dfs(node):\n                    return False\n        return True\n    \n    def canFinish_2(self, numCourses: int, prerequisites: List[List[int]]) -> bool:\n        \"\"\"\n        There are a total of numCourses courses you have to take, labeled from 0 to numCourses - 1. You are given an array prerequisites where prerequisites[i] = [ai, bi] indicates that you must take course bi first if you want to take course ai.\n            For example, the pair [0, 1], indicates that to take course"
    },
    {
        "number": 208,
        "title": "Implement Trie (Prefix Tree)",
        "difficulty": 1,
        "prompt": "class Trie:\n    def __init__(self):\n    def insert(self, word: str) -> None:\n    def search(self, word: str) -> bool:\n    def startsWith(self, prefix: str) -> bool:\n        \"\"\"\n        A trie (pronounced as \"try\") or prefix tree is a tree data structure used to efficiently store and retrieve keys in a dataset of strings. There are various applications of this data structure, such as autocomplete and spellchecker.\n        Implement the Trie class:\n            Trie() Initializes the trie object.\n            void insert(String word) Inserts the string word into the trie.\n            boolean search(String word) Returns true if the string word is in the trie (i.e., was inserted before), and false otherwise.\n            boolean startsWith(String prefix) Returns true if there is a previously inserted string word that has the prefix prefix, and false otherwise.\n        Example 1:\n        Input\n        [\"Trie\", \"insert\", \"search\", \"search\", \"startsWith\", \"insert\", \"search\"]\n        [[], [\"apple\"], [\"apple\"], [\"app\"], [\"app\"], [\"app\"], [\"app\"]]\n        Output\n        [null, null, true, false, true, null, true]\n        Explanation\n        Trie trie = new Trie();\n        trie.insert(\"apple\");\n        trie.search(\"apple\");   // return True\n        trie.search(\"app\");     // return False\n        trie.startsWith(\"app\"); // return True\n        trie.insert(\"app\");\n        trie.search(\"app\");     // return True\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        self.root = {}\n        self.end_of_word = \"#\"\n        self.word = word\n        for i in range(len(word)):\n            self.insert(word[i:])\n        return self.search(word)\n    def insert(self, word: str) -> None:\n        node = self.root\n        for i in range(len(word)):\n            if word[i] not in node:\n                node[word[i]] = {}\n            node = node[word[i]]\n        node[self.end_of_word] = self.end_of_word\n    def search(self, word: str) -> bool:\n        node = self.root\n        for i in range(len(word)):\n            if word[i] not in node:\n                return False\n            node = node[word[i]]\n        return self.end_of_word in node\n    def startsWith(self, prefix: str) -> bool:\n        node = self.root\n        for i in range(len(prefix)):\n            if prefix[i] not in node:\n                return False\n            node = node[prefix[i]]\n        return True"
    },
    {
        "number": 209,
        "title": "Minimum Size Subarray Sum",
        "difficulty": 1,
        "prompt": "class Solution:\n    def minSubArrayLen(self, target: int, nums: List[int]) -> int:\n        \"\"\"\n        Given an array of positive integers nums and a positive integer target, return the minimal length of a subarray whose sum is greater than or equal to target. If there is no such subarray, return 0 instead.\n        Example 1:\n        Input: target = 7, nums = [2,3,1,2,4,3]\n        Output: 2\n        Explanation: The subarray [4,3] has the minimal length under the problem constraint.\n        Example 2:\n        Input: target = 4, nums = [1,4,4]\n        Output: 1\n        Example 3:\n        Input: target = 11, nums = [1,1,1,1,1,1,1,1]\n        Output: 0\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        # \u524d\u7f00\u548c\n        # \u524d\u7f00\u548c\u6570\u7ec4\u7684\u7b2ci\u4e2a\u5143\u7d20\u8868\u793a\u4ee5nums[i]\u7ed3\u5c3e\u7684\u5b50\u6570\u7ec4\u7684\u6700\u5c0f\u957f\u5ea6\n        # \u5982\u679c\u524d\u7f00\u548c\u6570\u7ec4\u7684\u7b2ci\u4e2a\u5143\u7d20\u5927\u4e8etarget\uff0c\u90a3\u4e48\u4ee5nums[i]\u7ed3\u5c3e\u7684\u5b50\u6570\u7ec4\u7684\u6700\u5c0f\u957f\u5ea6\u5fc5\u7136\u5927\u4e8e\u524d\u4e00\u4e2a\u5143\u7d20\n        # \u5982\u679c\u524d\u7f00\u548c\u6570\u7ec4\u7684\u7b2ci\u4e2a\u5143\u7d20\u5c0f\u4e8etarget\uff0c\u90a3\u4e48\u4ee5nums[i]\u7ed3\u5c3e\u7684\u5b50\u6570\u7ec4\u7684\u6700\u5c0f\u957f\u5ea6\u5fc5\u7136\u5927\u4e8e\u524d\u4e00\u4e2a\u5143\u7d20\n        # \u5982\u679c\u524d\u7f00\u548c\u6570\u7ec4\u7684\u7b2ci\u4e2a\u5143\u7d20\u7b49\u4e8etarget\ufffd"
    },
    {
        "number": 210,
        "title": "Course Schedule II",
        "difficulty": 1,
        "prompt": "class Solution:\n    def findOrder(self, numCourses: int, prerequisites: List[List[int]]) -> List[int]:\n        \"\"\"\n        There are a total of numCourses courses you have to take, labeled from 0 to numCourses - 1. You are given an array prerequisites where prerequisites[i] = [ai, bi] indicates that you must take course bi first if you want to take course ai.\n            For example, the pair [0, 1], indicates that to take course 0 you have to first take course 1.\n        Return the ordering of courses you should take to finish all courses. If there are many valid answers, return any of them. If it is impossible to finish all courses, return an empty array.\n        Example 1:\n        Input: numCourses = 2, prerequisites = [[1,0]]\n        Output: [0,1]\n        Explanation: There are a total of 2 courses to take. To take course 1 you should have finished course 0. So the correct course order is [0,1].\n        Example 2:\n        Input: numCourses = 4, prerequisites = [[1,0],[2,0],[3,1],[3,2]]\n        Output: [0,2,1,3]\n        Explanation: There are a total of 4 courses to take. To take course 3 you should have finished both courses 1 and 2. Both courses 1 and 2 should be taken after you finished course 0.\n        So one correct course order is [0,1,2,3]. Another correct ordering is [0,2,1,3].\n        Example 3:\n        Input: numCourses = 1, prerequisites = []\n        Output: [0]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        # build graph\n        graph = collections.defaultdict(list)\n        for u, v in prerequisites:\n            graph[u].append(v)"
    },
    {
        "number": 211,
        "title": "Design Add and Search Words Data Structure",
        "difficulty": 1,
        "prompt": "class WordDictionary:\n    def __init__(self):\n    def addWord(self, word: str) -> None:\n    def search(self, word: str) -> bool:\n        \"\"\"\n        Design a data structure that supports adding new words and finding if a string matches any previously added string.\n        Implement the WordDictionary class:\n            WordDictionary() Initializes the object.\n            void addWord(word) Adds word to the data structure, it can be matched later.\n            bool search(word) Returns true if there is any string in the data structure that matches word or false otherwise. word may contain dots '.' where dots can be matched with any letter.\n        Example:\n        Input\n        [\"WordDictionary\",\"addWord\",\"addWord\",\"addWord\",\"search\",\"search\",\"search\",\"search\"]\n        [[],[\"bad\"],[\"dad\"],[\"mad\"],[\"pad\"],[\"bad\"],[\".ad\"],[\"b..\"]]\n        Output\n        [null,null,null,null,false,true,true,true]\n        Explanation\n        WordDictionary wordDictionary = new WordDictionary();\n        wordDictionary.addWord(\"bad\");\n        wordDictionary.addWord(\"dad\");\n        wordDictionary.addWord(\"mad\");\n        wordDictionary.search(\"pad\"); // return False\n        wordDictionary.search(\"bad\"); // return True\n        wordDictionary.search(\".ad\"); // return True\n        wordDictionary.search(\"b..\"); // return True\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        self.d = {}\n        self.word = word\n        self.addWord(word)\n        return self.search(word)\n    def addWord(self, word: str) -> None:\n        if word in self.d:\n            self.d[word] += 1\n        else:\n            self.d[word] = 1\n    def search(self, word: str) -> bool:\n        if word in self.d:\n            return True\n        for i in range(len(word)):\n            if word[i] == '.':\n                for k in self.d:\n                    if k[:i] + k[i+1:] == word:\n                        return True\n        return False"
    },
    {
        "number": 212,
        "title": "Word Search II",
        "difficulty": 2,
        "prompt": "class Solution:\n    def findWords(self, board: List[List[str]], words: List[str]) -> List[str]:\n        \"\"\"\n        Given an m x n board of characters and a list of strings words, return all words on the board.\n        Each word must be constructed from letters of sequentially adjacent cells, where adjacent cells are horizontally or vertically neighboring. The same letter cell may not be used more than once in a word.\n        Example 1:\n        Input: board = [[\"o\",\"a\",\"a\",\"n\"],[\"e\",\"t\",\"a\",\"e\"],[\"i\",\"h\",\"k\",\"r\"],[\"i\",\"f\",\"l\",\"v\"]], words = [\"oath\",\"pea\",\"eat\",\"rain\"]\n        Output: [\"eat\",\"oath\"]\n        Example 2:\n        Input: board = [[\"a\",\"b\"],[\"c\",\"d\"]], words = [\"abcb\"]\n        Output: []\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        # build trie\n        trie = {}\n        for word in words:\n            node = trie\n            for c in word:\n                if c not in node:\n                    node[c] = {}\n                node = node[c]\n            node['#'] = '#'\n        \n        # dfs\n        def dfs(i, j, node, path):\n            if '#' in node:\n                res.append(path)\n                node['#'] = '#'\n            if i < 0 or i >= len(board) or j < 0 or j >= len(board[0]):\n                return\n            if board[i][j] not in node:\n                return\n            node = node[board[i][j]]\n            board[i][j] = '#'\n            dfs(i+1, j, node, path + board[i][j])\n            dfs(i-1, j, node, path + board[i][j])\n            dfs(i, j+1, node, path + board[i][j])\n            dfs(i, j-1, node, path + board[i][j])\n            board[i][j] = board[i][j].lower()\n        \n        res = []\n        for i in range(len("
    },
    {
        "number": 213,
        "title": "House Robber II",
        "difficulty": 1,
        "prompt": "class Solution:\n    def rob(self, nums: List[int]) -> int:\n        \"\"\"\n        You are a professional robber planning to rob houses along a street. Each house has a certain amount of money stashed. All houses at this place are arranged in a circle. That means the first house is the neighbor of the last one. Meanwhile, adjacent houses have a security system connected, and it will automatically contact the police if two adjacent houses were broken into on the same night.\n        Given an integer array nums representing the amount of money of each house, return the maximum amount of money you can rob tonight without alerting the police.\n        Example 1:\n        Input: nums = [2,3,2]\n        Output: 3\n        Explanation: You cannot rob house 1 (money = 2) and then rob house 3 (money = 2), because they are adjacent houses.\n        Example 2:\n        Input: nums = [1,2,3,1]\n        Output: 4\n        Explanation: Rob house 1 (money = 1) and then rob house 3 (money = 3).\n        Total amount you can rob = 1 + 3 = 4.\n        Example 3:\n        Input: nums = [1,2,3]\n        Output: 3\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        if not nums:\n            return 0\n        if len(nums) == 1:\n            return nums[0]\n        if len(nums) == 2:\n            return max(nums[0], nums[1])\n        n = len(nums)\n        dp = [0] * n\n        dp[0] = nums[0]\n        dp[1] = max(nums[0], nums[1])\n        for i in range(2, n):\n            dp[i] = max(dp[i-1], dp[i-2] + nums[i])\n        return dp[-1]"
    },
    {
        "number": 214,
        "title": "Shortest Palindrome",
        "difficulty": 2,
        "prompt": "class Solution:\n    def shortestPalindrome(self, s: str) -> str:\n        \"\"\"\n        You are given a string s. You can convert s to a palindrome by adding characters in front of it.\n        Return the shortest palindrome you can find by performing this transformation.\n        Example 1:\n        Input: s = \"aacecaaa\"\n        Output: \"aaacecaaa\"\n        Example 2:\n        Input: s = \"abcd\"\n        Output: \"dcbabcd\"\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        if not s:\n            return s\n        if s == s[::-1]:\n            return s\n        for i in range(len(s), 0, -1):\n            if s[:i] == s[:i][::-1]:\n                return s[i:][::-1] + s"
    },
    {
        "number": 215,
        "title": "Kth Largest Element in an Array",
        "difficulty": 1,
        "prompt": "class Solution:\n    def findKthLargest(self, nums: List[int], k: int) -> int:\n        \"\"\"\n        Given an integer array nums and an integer k, return the kth largest element in the array.\n        Note that it is the kth largest element in the sorted order, not the kth distinct element.\n        You must solve it in O(n) time complexity.\n        Example 1:\n        Input: nums = [3,2,1,5,6,4], k = 2\n        Output: 5\n        Example 2:\n        Input: nums = [3,2,3,1,2,4,5,5,6], k = 4\n        Output: 4\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        # Quick Select\n        # Time: O(n)\n        # Space: O(1)\n        # left, right = 0, len(nums) - 1\n        # while left <= right:\n        #     pivot_idx = self.partition(nums, left, right)\n        #     if pivot_idx == k - 1:\n        #         return nums[pivot_idx]\n        #     elif pivot_idx > k - 1:\n        #         right = pivot_idx - 1\n        #     else:\n        #         left = pivot_idx + 1\n        # return -1"
    },
    {
        "number": 216,
        "title": "Combination Sum III",
        "difficulty": 1,
        "prompt": "class Solution:\n    def combinationSum3(self, k: int, n: int) -> List[List[int]]:\n        \"\"\"\n        Find all valid combinations of k numbers that sum up to n such that the following conditions are true:\n            Only numbers 1 through 9 are used.\n            Each number is used at most once.\n        Return a list of all possible valid combinations. The list must not contain the same combination twice, and the combinations may be returned in any order.\n        Example 1:\n        Input: k = 3, n = 7\n        Output: [[1,2,4]]\n        Explanation:\n        1 + 2 + 4 = 7\n        There are no other valid combinations.\n        Example 2:\n        Input: k = 3, n = 9\n        Output: [[1,2,6],[1,3,5],[2,3,4]]\n        Explanation:\n        1 + 2 + 6 = 9\n        1 + 3 + 5 = 9\n        2 + 3 + 4 = 9\n        There are no other valid combinations.\n        Example 3:\n        Input: k = 4, n = 1\n        Output: []\n        Explanation: There are no valid combinations.\n        Using 4 different numbers in the range [1,9], the smallest sum we can get is 1+2+3+4 = 10 and since 10 > 1, there are no valid combination.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        if k == 0 or n == 0:\n            return []\n        if k == 1:\n            return [[n]] if 1 <= n <= 9 else []\n        return self.combinationSum3(k - 1, n - 1) + self.combinationSum3(k, n - 1)"
    },
    {
        "number": 217,
        "title": "Contains Duplicate",
        "difficulty": 0,
        "prompt": "class Solution:\n    def containsDuplicate(self, nums: List[int]) -> bool:\n        \"\"\"\n        Given an integer array nums, return true if any value appears at least twice in the array, and return false if every element is distinct.\n        Example 1:\n        Input: nums = [1,2,3,1]\n        Output: true\n        Example 2:\n        Input: nums = [1,2,3,4]\n        Output: false\n        Example 3:\n        Input: nums = [1,1,1,3,3,4,3,2,4,2]\n        Output: true\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        # Time: O(n)\n        # Space: O(n)\n        # hash table\n        # hash table = {1:1, 2:2, 3:3, 4:4}\n        # if len(nums) == len(set(nums)):\n        #     return False\n        # else:\n        #     return True\n        \n        # Time: O(n)\n        # Space: O(1)\n        # set\n        # if len(nums) == len(set(nums)):\n        #     return False\n        # else:\n        #     return True\n        \n        # Time: O(nlogn)\n        # Space: O(1)\n        # sort\n        # if len(nums) == len(set(nums)):\n        #     return False\n        # else:\n        #     return True\n        \n        # Time: O(n)\n        # Space: O(1)\n        # hash table\n        # hash table = {1:1, 2:2, 3:3, 4:4}\n        # if len(nums) == len(set(nums)):\n        #     return False\n        # else:\n        #     return True\n        \n        # Time: O(n)\n        # Space: O("
    },
    {
        "number": 218,
        "title": "The Skyline Problem",
        "difficulty": 2,
        "prompt": "class Solution:\n    def getSkyline(self, buildings: List[List[int]]) -> List[List[int]]:\n        \"\"\"\n        A city's skyline is the outer contour of the silhouette formed by all the buildings in that city when viewed from a distance. Given the locations and heights of all the buildings, return the skyline formed by these buildings collectively.\n        The geometric information of each building is given in the array buildings where buildings[i] = [lefti, righti, heighti]:\n            lefti is the x coordinate of the left edge of the ith building.\n            righti is the x coordinate of the right edge of the ith building.\n            heighti is the height of the ith building.\n        You may assume all buildings are perfect rectangles grounded on an absolutely flat surface at height 0.\n        The skyline should be represented as a list of \"key points\" sorted by their x-coordinate in the form [[x1,y1],[x2,y2],...]. Each key point is the left endpoint of some horizontal segment in the skyline except the last point in the list, which always has a y-coordinate 0 and is used to mark the skyline's termination where the rightmost building ends. Any ground between the leftmost and rightmost buildings should be part of the skyline's contour.\n        Note: There must be no consecutive horizontal lines of equal height in the output skyline. For instance, [...,[2 3],[4 5],[7 5],[11 5],[12 7],...] is not acceptable; the three lines of height 5 should be merged into one in the final output as such: [...,[2 3],[4 5],[12 7],...]\n        Example 1:\n        Input: buildings = [[2,9,10],[3,7,15],[5,12,12],[15,20,10],[19,24,8]]\n        Output: [[2,10],[3,15],[7,12],[12,0],[15,10],[20,8],[24,0]]\n        Explanation:\n        Figure A shows the buildings of the input.\n        Figure B shows the skyline formed by those buildings. The red points in figure B represent the key points in the output list.\n        Example 2:\n        Input: buildings = [[0,2,3],[2,5,3]]\n        Output: [[0,3],[5,0]]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        # Solution 1: O(n) space\n        # O(nlogn) time\n        # O(n) space\n        # O(nlogn) time\n        # O(n) space\n        # O(nlogn) time\n        # O(n) space\n        # O(nlogn) time\n        # O(n) space\n        # O(nlogn) time\n        # O(n) space\n        # O(nlogn) time\n        # O(n) space\n        # O(nlogn) time\n        # O(n) space\n        # O(nlogn) time\n        # O(n) space\n        # O(nlogn) time\n        # O(n) space\n        # O(nlogn) time\n        # O(n) space\n        # O(nlogn) time\n        # O(n) space\n        # O(nlogn) time\n        # O(n) space\n        # O(nlogn) time\n        # O(n) space\n        # O(nlogn) time\n        # O(n) space\n        # O(nlogn) time\n        # O(n) space\n        # O(nlogn) time\n        # O(n) space\n        # O(nlogn) time\n        # O(n) space\n"
    },
    {
        "number": 219,
        "title": "Contains Duplicate II",
        "difficulty": 0,
        "prompt": "class Solution:\n    def containsNearbyDuplicate(self, nums: List[int], k: int) -> bool:\n        \"\"\"\n        Given an integer array nums and an integer k, return true if there are two distinct indices i and j in the array such that nums[i] == nums[j] and abs(i - j) <= k.\n        Example 1:\n        Input: nums = [1,2,3,1], k = 3\n        Output: true\n        Example 2:\n        Input: nums = [1,0,1,1], k = 1\n        Output: true\n        Example 3:\n        Input: nums = [1,2,3,1,2,3], k = 2\n        Output: false\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        if len(nums) <= 1:\n            return False\n        \n        d = {}\n        for i in range(len(nums)):\n            if nums[i] in d:\n                if i - d[nums[i]] <= k:\n                    return True\n                else:\n                    d[nums[i]] = i\n            else:\n                d[nums[i]] = i\n        return False\n<|endoftext|>"
    },
    {
        "number": 220,
        "title": "Contains Duplicate III",
        "difficulty": 2,
        "prompt": "class Solution:\n    def containsNearbyAlmostDuplicate(self, nums: List[int], indexDiff: int, valueDiff: int) -> bool:\n        \"\"\"\n        You are given an integer array nums and two integers indexDiff and valueDiff.\n        Find a pair of indices (i, j) such that:\n            i!= j,\n            abs(i - j) <= indexDiff.\n            abs(nums[i] - nums[j]) <= valueDiff, and\n        Return true if such pair exists or false otherwise.\n        Example 1:\n        Input: nums = [1,2,3,1], indexDiff = 3, valueDiff = 0\n        Output: true\n        Explanation: We can choose (i, j) = (0, 3).\n        We satisfy the three conditions:\n        i!= j --> 0!= 3\n        abs(i - j) <= indexDiff --> abs(0 - 3) <= 3\n        abs(nums[i] - nums[j]) <= valueDiff --> abs(1 - 1) <= 0\n        Example 2:\n        Input: nums = [1,5,9,1,5,9], indexDiff = 2, valueDiff = 3\n        Output: false\n        Explanation: After trying all the possible pairs (i, j), we cannot satisfy the three conditions, so we return false.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        # O(N)\n        # O(N)\n        # O(N)\n        # O(N)\n        # O(N)\n        # O(N)\n        # O(N)\n        # O(N)\n        # O(N)\n        # O(N)\n        # O(N)\n        # O(N)\n        # O(N)\n        # O(N)\n        # O(N)\n        # O(N)\n        # O(N)\n        # O(N)\n        # O(N)\n        # O(N)\n        # O(N)\n        # O(N)\n        # O(N)\n        # O(N)\n        # O(N)\n        # O(N)\n        # O(N)\n        # O(N)\n        # O(N)\n        # O(N)\n        # O(N)\n        # O(N)\n        # O(N)\n        # O(N)\n        # O(N)\n        # O(N)\n        # O(N)\n        # O(N)\n        # O(N)\n        # O(N)\n        # O(N)\n        # O(N)\n        # O(N)"
    },
    {
        "number": 221,
        "title": "Maximal Square",
        "difficulty": 1,
        "prompt": "class Solution:\n    def maximalSquare(self, matrix: List[List[str]]) -> int:\n        \"\"\"\n        Given an m x n binary matrix filled with 0's and 1's, find the largest square containing only 1's and return its area.\n        Example 1:\n        Input: matrix = [[\"1\",\"0\",\"1\",\"0\",\"0\"],[\"1\",\"0\",\"1\",\"1\",\"1\"],[\"1\",\"1\",\"1\",\"1\",\"1\"],[\"1\",\"0\",\"0\",\"1\",\"0\"]]\n        Output: 4\n        Example 2:\n        Input: matrix = [[\"0\",\"1\"],[\"1\",\"0\"]]\n        Output: 1\n        Example 3:\n        Input: matrix = [[\"0\"]]\n        Output: 0\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        if not matrix:\n            return 0\n        m, n = len(matrix), len(matrix[0])\n        dp = [[0] * (n + 1) for _ in range(m + 1)]\n        max_side = 0\n        for i in range(1, m + 1):\n            for j in range(1, n + 1):\n                if matrix[i - 1][j - 1] == \"1\":\n                    dp[i][j] = min(dp[i - 1][j], dp[i][j - 1], dp[i - 1][j - 1]) + 1\n                    max_side = max(max_side, dp[i][j])\n        return max_side ** 2"
    },
    {
        "number": 222,
        "title": "Count Complete Tree Nodes",
        "difficulty": 1,
        "prompt": "class Solution:\n    def countNodes(self, root: Optional[TreeNode]) -> int:\n        \"\"\"\n        Given the root of a complete binary tree, return the number of the nodes in the tree.\n        According to Wikipedia, every level, except possibly the last, is completely filled in a complete binary tree, and all nodes in the last level are as far left as possible. It can have between 1 and 2h nodes inclusive at the last level h.\n        Design an algorithm that runs in less than O(n) time complexity.\n        Example 1:\n        Input: root = [1,2,3,4,5,6]\n        Output: 6\n        Example 2:\n        Input: root = []\n        Output: 0\n        Example 3:\n        Input: root = [1]\n        Output: 1\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        if not root:\n            return 0\n        left_depth = self.get_depth(root.left)\n        right_depth = self.get_depth(root.right)\n        if left_depth == right_depth:\n            return 2**left_depth + self.countNodes(root.right)\n        else:\n            return 2**right_depth + self.countNodes(root.left)"
    },
    {
        "number": 223,
        "title": "Rectangle Area",
        "difficulty": 1,
        "prompt": "class Solution:\n    def computeArea(self, ax1: int, ay1: int, ax2: int, ay2: int, bx1: int, by1: int, bx2: int, by2: int) -> int:\n        \"\"\"\n        Given the coordinates of two rectilinear rectangles in a 2D plane, return the total area covered by the two rectangles.\n        The first rectangle is defined by its bottom-left corner (ax1, ay1) and its top-right corner (ax2, ay2).\n        The second rectangle is defined by its bottom-left corner (bx1, by1) and its top-right corner (bx2, by2).\n        Example 1:\n        Input: ax1 = -3, ay1 = 0, ax2 = 3, ay2 = 4, bx1 = 0, by1 = -1, bx2 = 9, by2 = 2\n        Output: 45\n        Example 2:\n        Input: ax1 = -2, ay1 = -2, ax2 = 2, ay2 = 2, bx1 = -2, by1 = -2, bx2 = 2, by2 = 2\n        Output: 16\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        # compute the area of the first rectangle\n        area1 = (ax2 - ax1) * (ay2 - ay1)\n        # compute the area of the second rectangle\n        area2 = (bx2 - bx1) * (by2 - by1)\n        # compute the area of the intersection rectangle\n        area_intersection = max(0, min(ax2, bx2) - max(ax1, bx1)) * max(0, min(ay2, by2) - max(ay1, by1))\n        # return the sum of the areas\n        return area1 + area2 - area_intersection"
    },
    {
        "number": 224,
        "title": "Basic Calculator",
        "difficulty": 2,
        "prompt": "class Solution:\n    def calculate(self, s: str) -> int:\n        \"\"\"\n        Given a string s representing a valid expression, implement a basic calculator to evaluate it, and return the result of the evaluation.\n        Note: You are not allowed to use any built-in function which evaluates strings as mathematical expressions, such as eval().\n        Example 1:\n        Input: s = \"1 + 1\"\n        Output: 2\n        Example 2:\n        Input: s = \" 2-1 + 2 \"\n        Output: 3\n        Example 3:\n        Input: s = \"(1+(4+5+2)-3)+(6+8)\"\n        Output: 23\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        stack = []\n        num = 0\n        sign = '+'\n        for i in range(len(s)):\n            if s[i].isdigit():\n                num = num * 10 + int(s[i])\n            if s[i] in '+-*/' or i == len(s) - 1:\n                if sign == '+':\n                    stack.append(num)\n                elif sign == '-':\n                    stack.append(-num)\n                elif sign == '*':\n                    stack.append(stack.pop() * num)\n                else:\n                    stack.append(int(stack.pop() / num))\n                sign = s[i]\n                num = 0\n        return sum(stack)"
    },
    {
        "number": 225,
        "title": "Implement Stack using Queues",
        "difficulty": 0,
        "prompt": "class MyStack:\n    def __init__(self):\n    def push(self, x: int) -> None:\n    def pop(self) -> int:\n    def top(self) -> int:\n    def empty(self) -> bool:\n        \"\"\"\n        Implement a last-in-first-out (LIFO) stack using only two queues. The implemented stack should support all the functions of a normal stack (push, top, pop, and empty).\n        Implement the MyStack class:\n            void push(int x) Pushes element x to the top of the stack.\n            int pop() Removes the element on the top of the stack and returns it.\n            int top() Returns the element on the top of the stack.\n            boolean empty() Returns true if the stack is empty, false otherwise.\n        Notes:\n            You must use only standard operations of a queue, which means that only push to back, peek/pop from front, size and is empty operations are valid.\n            Depending on your language, the queue may not be supported natively. You may simulate a queue using a list or deque (double-ended queue) as long as you use only a queue's standard operations.\n        Example 1:\n        Input\n        [\"MyStack\", \"push\", \"push\", \"top\", \"pop\", \"empty\"]\n        [[], [1], [2], [], [], []]\n        Output\n        [null, null, null, 2, 2, false]\n        Explanation\n        MyStack myStack = new MyStack();\n        myStack.push(1);\n        myStack.push(2);\n        myStack.top(); // return 2\n        myStack.pop(); // return 2\n        myStack.empty(); // return False\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n"
    },
    {
        "number": 226,
        "title": "Invert Binary Tree",
        "difficulty": 0,
        "prompt": "class Solution:\n    def invertTree(self, root: Optional[TreeNode]) -> Optional[TreeNode]:\n        \"\"\"\n        Given the root of a binary tree, invert the tree, and return its root.\n        Example 1:\n        Input: root = [4,2,7,1,3,6,9]\n        Output: [4,7,2,9,6,3,1]\n        Example 2:\n        Input: root = [2,1,3]\n        Output: [2,3,1]\n        Example 3:\n        Input: root = []\n        Output: []\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        if not root:\n            return None\n        root.left, root.right = root.right, root.left\n        self.invertTree(root.left)\n        self.invertTree(root.right)\n        return root"
    },
    {
        "number": 227,
        "title": "Basic Calculator II",
        "difficulty": 1,
        "prompt": "class Solution:\n    def calculate(self, s: str) -> int:\n        \"\"\"\n        Given a string s which represents an expression, evaluate this expression and return its value. \n        The integer division should truncate toward zero.\n        You may assume that the given expression is always valid. All intermediate results will be in the range of [-231, 231 - 1].\n        Note: You are not allowed to use any built-in function which evaluates strings as mathematical expressions, such as eval().\n        Example 1:\n        Input: s = \"3+2*2\"\n        Output: 7\n        Example 2:\n        Input: s = \" 3/2 \"\n        Output: 1\n        Example 3:\n        Input: s = \" 3+5 / 2 \"\n        Output: 5\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        # \u6808\n        # stack = []\n        # i = 0\n        # while i < len(s):\n        #     if s[i] =='':\n        #         i += 1\n        #         continue\n        #     elif s[i] in '+-*/':\n        #         stack.append(s[i])\n        #         i += 1\n        #     else:\n        #         num = 0\n        #         while i < len(s) and s[i].isdigit():\n        #             num = num * 10 + int(s[i])\n        #             i += 1\n        #         if stack and stack[-1] in '+-*/':\n        #             op = stack.pop()\n        #             if op == '+':\n        #                 stack.append(num)\n        #             elif op == '-':\n        #                 stack.append(-num)\n        #             elif op == '*':\n        #                 stack.append(stack.pop() * num)\n        #             elif op == '/':\n        #                 stack.append(int(stack.pop() / num))\n        #         else:\n        #             stack.append(num)\n        # return sum(stack)"
    },
    {
        "number": 228,
        "title": "Summary Ranges",
        "difficulty": 0,
        "prompt": "class Solution:\n    def summaryRanges(self, nums: List[int]) -> List[str]:\n        \"\"\"\n        You are given a sorted unique integer array nums.\n        A range [a,b] is the set of all integers from a to b (inclusive).\n        Return the smallest sorted list of ranges that cover all the numbers in the array exactly. That is, each element of nums is covered by exactly one of the ranges, and there is no integer x such that x is in one of the ranges but not in nums.\n        Each range [a,b] in the list should be output as:\n            \"a->b\" if a!= b\n            \"a\" if a == b\n        Example 1:\n        Input: nums = [0,1,2,4,5,7]\n        Output: [\"0->2\",\"4->5\",\"7\"]\n        Explanation: The ranges are:\n        [0,2] --> \"0->2\"\n        [4,5] --> \"4->5\"\n        [7,7] --> \"7\"\n        Example 2:\n        Input: nums = [0,2,3,4,6,8,9]\n        Output: [\"0\",\"2->4\",\"6\",\"8->9\"]\n        Explanation: The ranges are:\n        [0,0] --> \"0\"\n        [2,4] --> \"2->4\"\n        [6,6] --> \"6\"\n        [8,9] --> \"8->9\"\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        # Time: O(n)\n        # Space: O(n)\n        if not nums:\n            return []\n        \n        start = nums[0]\n        ranges = []\n        for i in range(1, len(nums)):\n            if nums[i] == nums[i-1] + 1:\n                continue\n            if nums[i] == nums[i-1]:\n                ranges[-1] = f\"{ranges[-1]}->{nums[i]}\"\n            else:\n                ranges.append(f\"{start}->{nums[i-1]}\")\n            start = nums[i]\n        \n        if start == nums[-1]:\n            ranges[-1] = f\"{ranges[-1]}->{nums[-1]}\"\n        else:\n            ranges.append(f\"{start}->{nums[-1]}\")\n        \n        return ranges\n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        "
    },
    {
        "number": 229,
        "title": "Majority Element II",
        "difficulty": 1,
        "prompt": "class Solution:\n    def majorityElement(self, nums: List[int]) -> List[int]:\n        \"\"\"\n        Given an integer array of size n, find all elements that appear more than \u230a n/3 \u230b times.\n        Example 1:\n        Input: nums = [3,2,3]\n        Output: [3]\n        Example 2:\n        Input: nums = [1]\n        Output: [1]\n        Example 3:\n        Input: nums = [1,2]\n        Output: [1,2]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        # Solution 1:\n        # return [n for n in set(nums) if nums.count(n) > len(nums) // 3]"
    },
    {
        "number": 230,
        "title": "Kth Smallest Element in a BST",
        "difficulty": 1,
        "prompt": "class Solution:\n    def kthSmallest(self, root: Optional[TreeNode], k: int) -> int:\n        \"\"\"\n        Given the root of a binary search tree, and an integer k, return the kth smallest value (1-indexed) of all the values of the nodes in the tree.\n        Example 1:\n        Input: root = [3,1,4,null,2], k = 1\n        Output: 1\n        Example 2:\n        Input: root = [5,3,6,2,4,null,null,1], k = 3\n        Output: 3\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        # inorder traversal\n        # O(n) time\n        # O(n) space\n        # self.res = []\n        # self.inorder(root)\n        # return self.res[k-1]\n        \n        # inorder traversal\n        # O(n) time\n        # O(n) space\n        # self.res = []\n        # self.inorder(root)\n        # return self.res[k-1]\n        \n        # inorder traversal\n        # O(n) time\n        # O(n) space\n        # self.res = []\n        # self.inorder(root)\n        # return self.res[k-1]\n        \n        # inorder traversal\n        # O(n) time\n        # O(n) space\n        # self.res = []\n        # self.inorder(root)\n        # return self.res[k-1]\n        \n        # inorder traversal\n        # O(n) time\n        # O(n) space\n        # self.res = []\n        # self.inorder(root)\n        # return self.res[k-1]\n        \n        # inorder traversal\n        # O(n) time\n        # O(n) space\n        #"
    },
    {
        "number": 231,
        "title": "Power of Two",
        "difficulty": 0,
        "prompt": "class Solution:\n    def isPowerOfTwo(self, n: int) -> bool:\n        \"\"\"\n        Given an integer n, return true if it is a power of two. Otherwise, return false.\n        An integer n is a power of two, if there exists an integer x such that n == 2x.\n        Example 1:\n        Input: n = 1\n        Output: true\n        Explanation: 20 = 1\n        Example 2:\n        Input: n = 16\n        Output: true\n        Explanation: 24 = 16\n        Example 3:\n        Input: n = 3\n        Output: false\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        if n == 0:\n            return False\n        while n % 2 == 0:\n            n /= 2\n        return n == 1"
    },
    {
        "number": 232,
        "title": "Implement Queue using Stacks",
        "difficulty": 0,
        "prompt": "class MyQueue:\n    def __init__(self):\n    def push(self, x: int) -> None:\n    def pop(self) -> int:\n    def peek(self) -> int:\n    def empty(self) -> bool:\n        \"\"\"\n        Implement a first in first out (FIFO) queue using only two stacks. The implemented queue should support all the functions of a normal queue (push, peek, pop, and empty).\n        Implement the MyQueue class:\n            void push(int x) Pushes element x to the back of the queue.\n            int pop() Removes the element from the front of the queue and returns it.\n            int peek() Returns the element at the front of the queue.\n            boolean empty() Returns true if the queue is empty, false otherwise.\n        Notes:\n            You must use only standard operations of a stack, which means only push to top, peek/pop from top, size, and is empty operations are valid.\n            Depending on your language, the stack may not be supported natively. You may simulate a stack using a list or deque (double-ended queue) as long as you use only a stack's standard operations.\n        Example 1:\n        Input\n        [\"MyQueue\", \"push\", \"push\", \"peek\", \"pop\", \"empty\"]\n        [[], [1], [2], [], [], []]\n        Output\n        [null, null, null, 1, 1, false]\n        Explanation\n        MyQueue myQueue = new MyQueue();\n        myQueue.push(1); // queue is: [1]\n        myQueue.push(2); // queue is: [1, 2] (leftmost is front of the queue)\n        myQueue.peek(); // return 1\n        myQueue.pop(); // return 1, queue is [2]\n        myQueue.empty(); // return false\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        self.stack1 = []\n        self.stack2 = []\n        \n    def push(self, x: int) -> None:\n        self.stack1.append(x)\n        \n    def pop(self) -> int:\n        if not self.stack2:\n            while self.stack1:\n                self.stack2.append(self.stack1.pop())\n        return self.stack2.pop()\n        \n    def peek(self) -> int:\n        if not self.stack2:\n            while self.stack1:\n                self.stack2.append(self.stack1.pop())\n        return self.stack2[-1]\n        \n    def empty(self) -> bool:\n        return not self.stack1 and not self.stack2\n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n"
    },
    {
        "number": 233,
        "title": "Number of Digit One",
        "difficulty": 2,
        "prompt": "class Solution:\n    def countDigitOne(self, n: int) -> int:\n        \"\"\"\n        Given an integer n, count the total number of digit 1 appearing in all non-negative integers less than or equal to n.\n        Example 1:\n        Input: n = 13\n        Output: 6\n        Example 2:\n        Input: n = 0\n        Output: 0\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        if n < 0:\n            return 0\n        if n < 10:\n            return 1 if n == 1 else 0\n        count = 0\n        for i in range(1, n + 1):\n            count += self.countDigitOneHelper(i)\n        return count"
    },
    {
        "number": 234,
        "title": "Palindrome Linked List",
        "difficulty": 0,
        "prompt": "class Solution:\n    def isPalindrome(self, head: Optional[ListNode]) -> bool:\n        \"\"\"\n        Given the head of a singly linked list, return true if it is a palindrome or false otherwise.\n        Example 1:\n        Input: head = [1,2,2,1]\n        Output: true\n        Example 2:\n        Input: head = [1,2]\n        Output: false\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        # Find the middle node\n        slow = fast = head\n        while fast and fast.next:\n            slow = slow.next\n            fast = fast.next.next\n        # Reverse the second half\n        node = None\n        while slow:\n            nxt = slow.next\n            slow.next = node\n            node = slow\n            slow = nxt\n        # Compare the first and second half nodes\n        while node: # while node and head:\n            if node.val!= head.val:\n                return False\n            node = node.next\n            head = head.next\n        return True\n<|endoftext|>"
    },
    {
        "number": 235,
        "title": "Lowest Common Ancestor of a Binary Search Tree",
        "difficulty": 1,
        "prompt": "class Solution:\n    def lowestCommonAncestor(self, root: 'TreeNode', p: 'TreeNode', q: 'TreeNode') -> 'TreeNode':\n        \"\"\"\n        Given a binary search tree (BST), find the lowest common ancestor (LCA) node of two given nodes in the BST.\n        According to the definition of LCA on Wikipedia: \u201cThe lowest common ancestor is defined between two nodes p and q as the lowest node in T that has both p and q as descendants (where we allow a node to be a descendant of itself).\u201d\n        Example 1:\n        Input: root = [6,2,8,0,4,7,9,null,null,3,5], p = 2, q = 8\n        Output: 6\n        Explanation: The LCA of nodes 2 and 8 is 6.\n        Example 2:\n        Input: root = [6,2,8,0,4,7,9,null,null,3,5], p = 2, q = 4\n        Output: 2\n        Explanation: The LCA of nodes 2 and 4 is 2, since a node can be a descendant of itself according to the LCA definition.\n        Example 3:\n        Input: root = [2,1], p = 2, q = 1\n        Output: 2\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        if not root:\n            return None\n        if root.val > p.val and root.val > q.val:\n            return self.lowestCommonAncestor(root.left, p, q)\n        if root.val < p.val and root.val < q.val:\n            return self.lowestCommonAncestor(root.right, p, q)\n        return root"
    },
    {
        "number": 236,
        "title": "Lowest Common Ancestor of a Binary Tree",
        "difficulty": 1,
        "prompt": "class Solution:\n    def lowestCommonAncestor(self, root: 'TreeNode', p: 'TreeNode', q: 'TreeNode') -> 'TreeNode':\n        \"\"\"\n        Given a binary tree, find the lowest common ancestor (LCA) of two given nodes in the tree.\n        According to the definition of LCA on Wikipedia: \u201cThe lowest common ancestor is defined between two nodes p and q as the lowest node in T that has both p and q as descendants (where we allow a node to be a descendant of itself).\u201d\n        Example 1:\n        Input: root = [3,5,1,6,2,0,8,null,null,7,4], p = 5, q = 1\n        Output: 3\n        Explanation: The LCA of nodes 5 and 1 is 3.\n        Example 2:\n        Input: root = [3,5,1,6,2,0,8,null,null,7,4], p = 5, q = 4\n        Output: 5\n        Explanation: The LCA of nodes 5 and 4 is 5, since a node can be a descendant of itself according to the LCA definition.\n        Example 3:\n        Input: root = [1,2], p = 1, q = 2\n        Output: 1\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        if not root:\n            return None\n        if root == p or root == q:\n            return root\n        left = self.lowestCommonAncestor(root.left, p, q)\n        right = self.lowestCommonAncestor(root.right, p, q)\n        if left and right:\n            return root\n        if left:\n            return left\n        if right:\n            return right\n        return None"
    },
    {
        "number": 237,
        "title": "Delete Node in a Linked List",
        "difficulty": 1,
        "prompt": "class Solution:\n    def deleteNode(self, node):\n        \"\"\"\n        :type node: ListNode\n        :rtype: void Do not return anything, modify node in-place instead.\n        There is a singly-linked list head and we want to delete a node node in it.\n        You are given the node to be deleted node. You will not be given access to the first node of head.\n        All the values of the linked list are unique, and it is guaranteed that the given node node is not the last node in the linked list.\n        Delete the given node. Note that by deleting the node, we do not mean removing it from memory. We mean:\n            The value of the given node should not exist in the linked list.\n            The number of nodes in the linked list should decrease by one.\n            All the values before node should be in the same order.\n            All the values after node should be in the same order.\n        Custom testing:\n            For the input, you should provide the entire linked list head and the node to be given node. node should not be the last node of the list and should be an actual node in the list.\n            We will build the linked list and pass the node to your function.\n            The output will be the entire list after calling your function.\n        Example 1:\n        Input: head = [4,5,1,9], node = 5\n        Output: [4,1,9]\n        Explanation: You are given the second node with value 5, the linked list should become 4 -> 1 -> 9 after calling your function.\n        Example 2:\n        Input: head = [4,5,1,9], node = 1\n        Output: [4,5,9]\n        Explanation: You are given the third node with value 1, the linked list should become 4 -> 5 -> 9 after calling your function.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        # If the node to be deleted is the last node\n        if node.next is None:\n            node.val = None\n            return"
    },
    {
        "number": 238,
        "title": "Product of Array Except Self",
        "difficulty": 1,
        "prompt": "class Solution:\n    def productExceptSelf(self, nums: List[int]) -> List[int]:\n        \"\"\"\n        Given an integer array nums, return an array answer such that answer[i] is equal to the product of all the elements of nums except nums[i].\n        The product of any prefix or suffix of nums is guaranteed to fit in a 32-bit integer.\n        You must write an algorithm that runs in O(n) time and without using the division operation.\n        Example 1:\n        Input: nums = [1,2,3,4]\n        Output: [24,12,8,6]\n        Example 2:\n        Input: nums = [-1,1,0,-3,3]\n        Output: [0,0,9,0,0]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        # Solution 1:\n        # Time complexity: O(n)\n        # Space complexity: O(n)\n        # left_prod = [1] * len(nums)\n        # right_prod = [1] * len(nums)\n        # for i in range(1, len(nums)):\n        #     left_prod[i] = left_prod[i-1] * nums[i-1]\n        # for i in range(len(nums)-2, -1, -1):\n        #     right_prod[i] = right_prod[i+1] * nums[i+1]\n        # return [left_prod[i] * right_prod[i] for i in range(len(nums))]"
    },
    {
        "number": 239,
        "title": "Sliding Window Maximum",
        "difficulty": 2,
        "prompt": "class Solution:\n    def maxSlidingWindow(self, nums: List[int], k: int) -> List[int]:\n        \"\"\"\n        You are given an array of integers nums, there is a sliding window of size k which is moving from the very left of the array to the very right. You can only see the k numbers in the window. Each time the sliding window moves right by one position.\n        Return the max sliding window.\n        Example 1:\n        Input: nums = [1,3,-1,-3,5,3,6,7], k = 3\n        Output: [3,3,5,5,6,7]\n        Explanation: \n        Window position                Max\n        ---------------               -----\n        [1  3  -1] -3  5  3  6  7       3\n         1 [3  -1  -3] 5  3  6  7       3\n         1  3 [-1  -3  5] 3  6  7       5\n         1  3  -1 [-3  5  3] 6  7       5\n         1  3  -1  -3 [5  3  6] 7       6\n         1  3  -1  -3  5 [3  6  7]      7\n        Example 2:\n        Input: nums = [1], k = 1\n        Output: [1]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        if not nums or k == 0:\n            return []\n        \n        # \u7528\u4e00\u4e2a\u53cc\u7aef\u961f\u5217\u4fdd\u5b58\u6700\u5927\u503c\n        # \u53cc\u7aef\u961f\u5217\u4fdd\u5b58\u7684\u662f\u7d22\u5f15\n        # \u53cc\u7aef\u961f\u5217\u7684\u5de6\u7aef\u70b9\u662f\u6700\u5927\u503c\u7684\u7d22\u5f15\n        # \u53cc\u7aef\u961f\u5217\u7684\u53f3\u7aef\u70b9\u662f\u6700\u5927\u503c\u7684\u7d22\u5f15\n        # \u5982\u679c\u7a97\u53e3\u5927\u4e8e\u7b49\u4e8ek\uff0c\u5219\u5220\u9664\u53cc\u7aef\u961f\u5217\u7684\u5de6\u7aef\u70b9\n        # \u5982\u679c\u7a97\u53e3\u5c0f\u4e8ek\uff0c\u5219\u6dfb\u52a0\u53cc\u7aef\u961f\u5217\u7684\u53f3\u7aef\u70b9\n        # \u5982\u679c\u7a97\u53e3\u5c0f\u4e8ek\uff0c\u5219\u5220\u9664\u53cc\u7aef\u961f\u5217\u7684\u5de6\u7aef\u70b9\n        # \u5982\u679c\u7a97\u53e3\u5927\u4e8e\u7b49\u4e8e"
    },
    {
        "number": 240,
        "title": "Search a 2D Matrix II",
        "difficulty": 1,
        "prompt": "class Solution:\n    def searchMatrix(self, matrix: List[List[int]], target: int) -> bool:\n        \"\"\"\n        Write an efficient algorithm that searches for a value target in an m x n integer matrix matrix. This matrix has the following properties:\n            Integers in each row are sorted in ascending from left to right.\n            Integers in each column are sorted in ascending from top to bottom.\n        Example 1:\n        Input: matrix = [[1,4,7,11,15],[2,5,8,12,19],[3,6,9,16,22],[10,13,14,17,24],[18,21,23,26,30]], target = 5\n        Output: true\n        Example 2:\n        Input: matrix = [[1,4,7,11,15],[2,5,8,12,19],[3,6,9,16,22],[10,13,14,17,24],[18,21,23,26,30]], target = 20\n        Output: false\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        if not matrix:\n            return False\n        m, n = len(matrix), len(matrix[0])\n        i, j = 0, n - 1\n        while i < m and j >= 0:\n            if matrix[i][j] == target:\n                return True\n            elif matrix[i][j] > target:\n                j -= 1\n            else:\n                i += 1\n        return False\n<|endoftext|>"
    },
    {
        "number": 241,
        "title": "Different Ways to Add Parentheses",
        "difficulty": 1,
        "prompt": "class Solution:\n    def diffWaysToCompute(self, expression: str) -> List[int]:\n        \"\"\"\n        Given a string expression of numbers and operators, return all possible results from computing all the different possible ways to group numbers and operators. You may return the answer in any order.\n        The test cases are generated such that the output values fit in a 32-bit integer and the number of different results does not exceed 104.\n        Example 1:\n        Input: expression = \"2-1-1\"\n        Output: [0,2]\n        Explanation:\n        ((2-1)-1) = 0 \n        (2-(1-1)) = 2\n        Example 2:\n        Input: expression = \"2*3-4*5\"\n        Output: [-34,-14,-10,-10,10]\n        Explanation:\n        (2*(3-(4*5))) = -34 \n        ((2*3)-(4*5)) = -14 \n        ((2*(3-4))*5) = -10 \n        (2*((3-4)*5)) = -10 \n        (((2*3)-4)*5) = 10\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        if expression.isdigit():\n            return [int(expression)]\n        res = []\n        for i in range(len(expression)):\n            if expression[i] in '+-*':\n                left = self.diffWaysToCompute(expression[:i])\n                right = self.diffWaysToCompute(expression[i+1:])\n                for l in left:\n                    for r in right:\n                        if expression[i] == '+':\n                            res.append(l+r)\n                        elif expression[i] == '-':\n                            res.append(l-r)\n                        else:\n                            res.append(l*r)\n        return res\n<|endoftext|>"
    },
    {
        "number": 242,
        "title": "Valid Anagram",
        "difficulty": 0,
        "prompt": "class Solution:\n    def isAnagram(self, s: str, t: str) -> bool:\n        \"\"\"\n        Given two strings s and t, return true if t is an anagram of s, and false otherwise.\n        An Anagram is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once.\n        Example 1:\n        Input: s = \"anagram\", t = \"nagaram\"\n        Output: true\n        Example 2:\n        Input: s = \"rat\", t = \"car\"\n        Output: false\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        if len(s)!= len(t):\n            return False\n        s_dict = {}\n        t_dict = {}\n        for i in s:\n            if i in s_dict:\n                s_dict[i] += 1\n            else:\n                s_dict[i] = 1\n        for i in t:\n            if i in t_dict:\n                t_dict[i] += 1\n            else:\n                t_dict[i] = 1\n        return s_dict == t_dict"
    },
    {
        "number": 257,
        "title": "Binary Tree Paths",
        "difficulty": 0,
        "prompt": "class Solution:\n    def binaryTreePaths(self, root: Optional[TreeNode]) -> List[str]:\n        \"\"\"\n        Given the root of a binary tree, return all root-to-leaf paths in any order.\n        A leaf is a node with no children.\n        Example 1:\n        Input: root = [1,2,3,null,5]\n        Output: [\"1->2->5\",\"1->3\"]\n        Example 2:\n        Input: root = [1]\n        Output: [\"1\"]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        if not root:\n            return []\n        if not root.left and not root.right:\n            return [str(root.val)]\n        return [str(root.val) + '->' + path for child in (root.left, root.right) if child for path in self.binaryTreePaths(child)]\n<|endoftext|>"
    },
    {
        "number": 258,
        "title": "Add Digits",
        "difficulty": 0,
        "prompt": "class Solution:\n    def addDigits(self, num: int) -> int:\n        \"\"\"\n        Given an integer num, repeatedly add all its digits until the result has only one digit, and return it.\n        Example 1:\n        Input: num = 38\n        Output: 2\n        Explanation: The process is\n        38 --> 3 + 8 --> 11\n        11 --> 1 + 1 --> 2 \n        Since 2 has only one digit, return it.\n        Example 2:\n        Input: num = 0\n        Output: 0\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        if num == 0:\n            return 0\n        if num % 9 == 0:\n            return 9\n        return num % 9"
    },
    {
        "number": 260,
        "title": "Single Number III",
        "difficulty": 1,
        "prompt": "class Solution:\n    def singleNumber(self, nums: List[int]) -> List[int]:\n        \"\"\"\n        Given an integer array nums, in which exactly two elements appear only once and all the other elements appear exactly twice. Find the two elements that appear only once. You can return the answer in any order.\n        You must write an algorithm that runs in linear runtime complexity and uses only constant extra space.\n        Example 1:\n        Input: nums = [1,2,1,3,2,5]\n        Output: [3,5]\n        Explanation:  [5, 3] is also a valid answer.\n        Example 2:\n        Input: nums = [-1,0]\n        Output: [-1,0]\n        Example 3:\n        Input: nums = [0,1]\n        Output: [1,0]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        # XOR\n        # nums = [1,2,1,3,2,5]\n        # nums = [1,2,1,3,2,5]\n        # nums = [-1,0]\n        # nums = [0,1]\n        # nums = [1,2,1,3,2,5]\n        # nums = [1,2,1,3,2,5]\n        # nums = [-1,0]\n        # nums = [0,1]\n        # nums = [1,2,1,3,2,5]\n        # nums = [-1,0]\n        # nums = [0,1]\n        # nums = [1,2,1,3,2,5]\n        # nums = [-1,0]\n        # nums = [0,1]\n        # nums = [1,2,1,3,2,5]\n        # nums = [-1,0]\n        # nums = [0,1]\n        # nums = [1,2,1,3,2,5]\n        # nums = [-1,0]\n        # nums = [0,1]\n        # nums = [1,2,1"
    },
    {
        "number": 263,
        "title": "Ugly Number",
        "difficulty": 0,
        "prompt": "class Solution:\n    def isUgly(self, n: int) -> bool:\n        \"\"\"\n        An ugly number is a positive integer whose prime factors are limited to 2, 3, and 5.\n        Given an integer n, return true if n is an ugly number.\n        Example 1:\n        Input: n = 6\n        Output: true\n        Explanation: 6 = 2 \u00d7 3\n        Example 2:\n        Input: n = 1\n        Output: true\n        Explanation: 1 has no prime factors, therefore all of its prime factors are limited to 2, 3, and 5.\n        Example 3:\n        Input: n = 14\n        Output: false\n        Explanation: 14 is not ugly since it includes the prime factor 7.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        if n <= 0:\n            return False\n        while n % 2 == 0:\n            n = n // 2\n        while n % 3 == 0:\n            n = n // 3\n        while n % 5 == 0:\n            n = n // 5\n        return n == 1"
    },
    {
        "number": 264,
        "title": "Ugly Number II",
        "difficulty": 1,
        "prompt": "class Solution:\n    def nthUglyNumber(self, n: int) -> int:\n        \"\"\"\n        An ugly number is a positive integer whose prime factors are limited to 2, 3, and 5.\n        Given an integer n, return the nth ugly number.\n        Example 1:\n        Input: n = 10\n        Output: 12\n        Explanation: [1, 2, 3, 4, 5, 6, 8, 9, 10, 12] is the sequence of the first 10 ugly numbers.\n        Example 2:\n        Input: n = 1\n        Output: 1\n        Explanation: 1 has no prime factors, therefore all of its prime factors are limited to 2, 3, and 5.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        ugly = [1]\n        i2, i3, i5 = 0, 0, 0\n        while len(ugly) < n:\n            while ugly[i2] * 2 <= ugly[-1]:\n                i2 += 1\n            while ugly[i3] * 3 <= ugly[-1]:\n                i3 += 1\n            while ugly[i5] * 5 <= ugly[-1]:\n                i5 += 1\n            ugly.append(min(ugly[i2] * 2, ugly[i3] * 3, ugly[i5] * 5))\n        return ugly[-1]"
    },
    {
        "number": 268,
        "title": "Missing Number",
        "difficulty": 0,
        "prompt": "class Solution:\n    def missingNumber(self, nums: List[int]) -> int:\n        \"\"\"\n        Given an array nums containing n distinct numbers in the range [0, n], return the only number in the range that is missing from the array.\n        Example 1:\n        Input: nums = [3,0,1]\n        Output: 2\n        Explanation: n = 3 since there are 3 numbers, so all numbers are in the range [0,3]. 2 is the missing number in the range since it does not appear in nums.\n        Example 2:\n        Input: nums = [0,1]\n        Output: 2\n        Explanation: n = 2 since there are 2 numbers, so all numbers are in the range [0,2]. 2 is the missing number in the range since it does not appear in nums.\n        Example 3:\n        Input: nums = [9,6,4,2,3,5,7,0,1]\n        Output: 8\n        Explanation: n = 9 since there are 9 numbers, so all numbers are in the range [0,9]. 8 is the missing number in the range since it does not appear in nums.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        n = len(nums)\n        return n * (n+1) // 2 - sum(nums)\n<|endoftext|>"
    },
    {
        "number": 273,
        "title": "Integer to English Words",
        "difficulty": 2,
        "prompt": "class Solution:\n    def numberToWords(self, num: int) -> str:\n        \"\"\"\n        Convert a non-negative integer num to its English words representation.\n        Example 1:\n        Input: num = 123\n        Output: \"One Hundred Twenty Three\"\n        Example 2:\n        Input: num = 12345\n        Output: \"Twelve Thousand Three Hundred Forty Five\"\n        Example 3:\n        Input: num = 1234567\n        Output: \"One Million Two Hundred Thirty Four Thousand Five Hundred Sixty Seven\"\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        if num == 0:\n            return \"Zero\"\n        \n        def three_digits(num):\n            if num < 20:\n                return self.less_than_20[num]\n            elif num < 100:\n                return self.tens[num // 10] + \" \" + self.less_than_20[num % 10]\n            else:\n                return self.less_than_20[num // 100] + \" Hundred \" + three_digits(num % 100)\n        \n        def two_digits(num):\n            if num < 10:\n                return self.less_than_10[num]\n            elif num < 20:\n                return self.tens[num // 10] + \" \" + self.less_than_10[num % 10]\n            else:\n                return three_digits(num // 10) + \" \" + self.less_than_10[num % 10]\n        \n        def one_digit(num):\n            return self.less_than_10[num]\n        \n        def four_digits(num):\n            return three_digits(num // 1000) + \" Thousand \" + two_digits(num % 1000)\n        \n        def three_digits(num):\n            return two_digits(num // 100) +"
    },
    {
        "number": 274,
        "title": "H-Index",
        "difficulty": 1,
        "prompt": "class Solution:\n    def hIndex(self, citations: List[int]) -> int:\n        \"\"\"\n        Given an array of integers citations where citations[i] is the number of citations a researcher received for their ith paper, return compute the researcher's h-index.\n        According to the definition of h-index on Wikipedia: A scientist has an index h if h of their n papers have at least h citations each, and the other n \u2212 h papers have no more than h citations each.\n        If there are several possible values for h, the maximum one is taken as the h-index.\n        Example 1:\n        Input: citations = [3,0,6,1,5]\n        Output: 3\n        Explanation: [3,0,6,1,5] means the researcher has 5 papers in total and each of them had received 3, 0, 6, 1, 5 citations respectively.\n        Since the researcher has 3 papers with at least 3 citations each and the remaining two with no more than 3 citations each, their h-index is 3.\n        Example 2:\n        Input: citations = [1,3,1]\n        Output: 1\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        # \u53cc\u6307\u9488\n        # \u65f6\u95f4\u590d\u6742\u5ea6O(n)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6O(1)\n        n = len(citations)\n        left, right = 0, n - 1\n        while left <= right:\n            mid = left + (right - left) // 2\n            if citations[mid] >= n - mid:\n                right = mid - 1\n            else:\n                left = mid + 1\n        return n - left"
    },
    {
        "number": 275,
        "title": "H-Index II",
        "difficulty": 1,
        "prompt": "class Solution:\n    def hIndex(self, citations: List[int]) -> int:\n        \"\"\"\n        Given an array of integers citations where citations[i] is the number of citations a researcher received for their ith paper and citations is sorted in an ascending order, return compute the researcher's h-index.\n        According to the definition of h-index on Wikipedia: A scientist has an index h if h of their n papers have at least h citations each, and the other n \u2212 h papers have no more than h citations each.\n        If there are several possible values for h, the maximum one is taken as the h-index.\n        You must write an algorithm that runs in logarithmic time.\n        Example 1:\n        Input: citations = [0,1,3,5,6]\n        Output: 3\n        Explanation: [0,1,3,5,6] means the researcher has 5 papers in total and each of them had received 0, 1, 3, 5, 6 citations respectively.\n        Since the researcher has 3 papers with at least 3 citations each and the remaining two with no more than 3 citations each, their h-index is 3.\n        Example 2:\n        Input: citations = [1,2,100]\n        Output: 2\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        if not citations:\n            return 0\n        l, r = 0, len(citations) - 1\n        while l <= r:\n            mid = l + (r - l) // 2\n            if citations[mid] >= len(citations) - mid:\n                r = mid - 1\n            else:\n                l = mid + 1\n        return len(citations) - l"
    },
    {
        "number": 278,
        "title": "First Bad Version",
        "difficulty": 0,
        "prompt": "class Solution:\n    def firstBadVersion(self, n: int) -> int:\n        \"\"\"\n        You are a product manager and currently leading a team to develop a new product. Unfortunately, the latest version of your product fails the quality check. Since each version is developed based on the previous version, all the versions after a bad version are also bad.\n        Suppose you have n versions [1, 2,..., n] and you want to find out the first bad one, which causes all the following ones to be bad.\n        You are given an API bool isBadVersion(version) which returns whether version is bad. Implement a function to find the first bad version. You should minimize the number of calls to the API.\n        Example 1:\n        Input: n = 5, bad = 4\n        Output: 4\n        Explanation:\n        call isBadVersion(3) -> false\n        call isBadVersion(5) -> true\n        call isBadVersion(4) -> true\n        Then 4 is the first bad version.\n        Example 2:\n        Input: n = 1, bad = 1\n        Output: 1\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        left, right = 1, n\n        while left < right:\n            mid = left + (right - left) // 2\n            if isBadVersion(mid):\n                right = mid\n            else:\n                left = mid + 1\n        return left"
    },
    {
        "number": 279,
        "title": "Perfect Squares",
        "difficulty": 1,
        "prompt": "class Solution:\n    def numSquares(self, n: int) -> int:\n        \"\"\"\n        Given an integer n, return the least number of perfect square numbers that sum to n.\n        A perfect square is an integer that is the square of an integer; in other words, it is the product of some integer with itself. For example, 1, 4, 9, and 16 are perfect squares while 3 and 11 are not.\n        Example 1:\n        Input: n = 12\n        Output: 3\n        Explanation: 12 = 4 + 4 + 4.\n        Example 2:\n        Input: n = 13\n        Output: 2\n        Explanation: 13 = 4 + 9.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        # https://leetcode.com/problems/perfect-squares/discuss/91870/Python-DP-solution-with-explanation\n        # https://leetcode.com/problems/perfect-squares/discuss/91870/Python-DP-solution-with-explanation\n        # https://leetcode.com/problems/perfect-squares/discuss/91870/Python-DP-solution-with-explanation\n        # https://leetcode.com/problems/perfect-squares/discuss/91870/Python-DP-solution-with-explanation\n        # https://leetcode.com/problems/perfect-squares/discuss/91870/Python-DP-solution-with-explanation\n        # https://leetcode.com/problems/perfect-squares/discuss/91870/Python-DP-solution-with-explanation\n        # https://leetcode.com/problems/perfect-squares/discuss/91870/Python-DP-solution-with-explanation\n        # https://leetcode.com/problems/perfect-squares/discuss/91870/Python-DP-solution-with-"
    },
    {
        "number": 282,
        "title": "Expression Add Operators",
        "difficulty": 2,
        "prompt": "class Solution:\n    def addOperators(self, num: str, target: int) -> List[str]:\n        \"\"\"\n        Given a string num that contains only digits and an integer target, return all possibilities to insert the binary operators '+', '-', and/or '*' between the digits of num so that the resultant expression evaluates to the target value.\n        Note that operands in the returned expressions should not contain leading zeros.\n        Example 1:\n        Input: num = \"123\", target = 6\n        Output: [\"1*2*3\",\"1+2+3\"]\n        Explanation: Both \"1*2*3\" and \"1+2+3\" evaluate to 6.\n        Example 2:\n        Input: num = \"232\", target = 8\n        Output: [\"2*3+2\",\"2+3*2\"]\n        Explanation: Both \"2*3+2\" and \"2+3*2\" evaluate to 8.\n        Example 3:\n        Input: num = \"3456237490\", target = 9191\n        Output: []\n        Explanation: There are no expressions that can be created from \"3456237490\" to evaluate to 9191.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        self.res = []\n        self.target = target\n        self.helper(num, 0, 0, 0, \"\")\n        return self.res"
    },
    {
        "number": 283,
        "title": "Move Zeroes",
        "difficulty": 0,
        "prompt": "class Solution:\n    def moveZeroes(self, nums: List[int]) -> None:\n        \"\"\"\n        Do not return anything, modify nums in-place instead.\n        Given an integer array nums, move all 0's to the end of it while maintaining the relative order of the non-zero elements.\n        Note that you must do this in-place without making a copy of the array.\n        Example 1:\n        Input: nums = [0,1,0,3,12]\n        Output: [1,3,12,0,0]\n        Example 2:\n        Input: nums = [0]\n        Output: [0]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        # two pointer\n        # two pointer\n        # two pointer\n        # two pointer\n        # two pointer\n        # two pointer\n        # two pointer\n        # two pointer\n        # two pointer\n        # two pointer\n        # two pointer\n        # two pointer\n        # two pointer\n        # two pointer\n        # two pointer\n        # two pointer\n        # two pointer\n        # two pointer\n        # two pointer\n        # two pointer\n        # two pointer\n        # two pointer\n        # two pointer\n        # two pointer\n        # two pointer\n        # two pointer\n        # two pointer\n        # two pointer\n        # two pointer\n        # two pointer\n        # two pointer\n        # two pointer\n        # two pointer\n        # two pointer\n        # two pointer\n        # two pointer\n        # two pointer\n        # two pointer\n        # two pointer\n        # two pointer\n        # two pointer\n        # two pointer\n        # two pointer\n        # two pointer\n        # two pointer\n        # two pointer\n        # two pointer\n        # two pointer\n        # two pointer\n        # two pointer\n        # two pointer\n        # two pointer\n        # two pointer\n        # two pointer\n        # two pointer\n        # two pointer\n        # two pointer\n        # two pointer\n        # two pointer\n        # two pointer\n"
    },
    {
        "number": 284,
        "title": "Peeking Iterator",
        "difficulty": 1,
        "prompt": "        \"\"\"\n        Design an iterator that supports the peek operation on an existing iterator in addition to the hasNext and the next operations.\n        Implement the PeekingIterator class:\n            PeekingIterator(Iterator<int> nums) Initializes the object with the given integer iterator iterator.\n            int next() Returns the next element in the array and moves the pointer to the next element.\n            boolean hasNext() Returns true if there are still elements in the array.\n            int peek() Returns the next element in the array without moving the pointer.\n        Note: Each language may have a different implementation of the constructor and Iterator, but they all support the int next() and boolean hasNext() functions.\n        Example 1:\n        Input\n        [\"PeekingIterator\", \"next\", \"peek\", \"next\", \"next\", \"hasNext\"]\n        [[[1, 2, 3]], [], [], [], [], []]\n        Output\n        [null, 1, 2, 2, 3, false]\n        Explanation\n        PeekingIterator peekingIterator = new PeekingIterator([1, 2, 3]); // [1,2,3]\n        peekingIterator.next();    // return 1, the pointer moves to the next element [1,2,3].\n        peekingIterator.peek();    // return 2, the pointer does not move [1,2,3].\n        peekingIterator.next();    // return 2, the pointer moves to the next element [1,2,3]\n        peekingIterator.next();    // return 3, the pointer moves to the next element [1,2,3]\n        peekingIterator.hasNext(); // return False\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        self.iter = iter(iterable)\n        self.cache = []"
    },
    {
        "number": 287,
        "title": "Find the Duplicate Number",
        "difficulty": 1,
        "prompt": "class Solution:\n    def findDuplicate(self, nums: List[int]) -> int:\n        \"\"\"\n        Given an array of integers nums containing n + 1 integers where each integer is in the range [1, n] inclusive.\n        There is only one repeated number in nums, return this repeated number.\n        You must solve the problem without modifying the array nums and uses only constant extra space.\n        Example 1:\n        Input: nums = [1,3,4,2,2]\n        Output: 2\n        Example 2:\n        Input: nums = [3,1,3,4,2]\n        Output: 3\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        # \u5feb\u6162\u6307\u9488\n        slow = nums[0]\n        fast = nums[nums[0]]\n        while slow!= fast:\n            slow = nums[slow]\n            fast = nums[nums[fast]]\n        slow = 0\n        while slow!= fast:\n            slow = nums[slow]\n            fast = nums[fast]\n        return slow"
    },
    {
        "number": 289,
        "title": "Game of Life",
        "difficulty": 1,
        "prompt": "class Solution:\n    def gameOfLife(self, board: List[List[int]]) -> None:\n        \"\"\"\n        Do not return anything, modify board in-place instead.\n        According to Wikipedia's article: \"The Game of Life, also known simply as Life, is a cellular automaton devised by the British mathematician John Horton Conway in 1970.\"\n        The board is made up of an m x n grid of cells, where each cell has an initial state: live (represented by a 1) or dead (represented by a 0). Each cell interacts with its eight neighbors (horizontal, vertical, diagonal) using the following four rules (taken from the above Wikipedia article):\n            Any live cell with fewer than two live neighbors dies as if caused by under-population.\n            Any live cell with two or three live neighbors lives on to the next generation.\n            Any live cell with more than three live neighbors dies, as if by over-population.\n            Any dead cell with exactly three live neighbors becomes a live cell, as if by reproduction.\n        The next state is created by applying the above rules simultaneously to every cell in the current state, where births and deaths occur simultaneously. Given the current state of the m x n grid board, return the next state.\n        Example 1:\n        Input: board = [[0,1,0],[0,0,1],[1,1,1],[0,0,0]]\n        Output: [[0,0,0],[1,0,1],[0,1,1],[0,1,0]]\n        Example 2:\n        Input: board = [[1,1],[1,0]]\n        Output: [[1,1],[1,1]]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        if not board:\n            return\n        m, n = len(board), len(board[0])\n        for i in range(m):\n            for j in range(n):\n                count = 0\n                for x, y in [(i - 1, j - 1), (i - 1, j), (i - 1, j + 1), (i, j - 1), (i, j + 1), (i + 1, j - 1), (i + 1, j), (i + 1, j + 1)]:\n                    if 0 <= x < m and 0 <= y < n and board[x][y] in [1, 0]:\n                        count += 1\n                if board[i][j] == 1:\n                    if count < 2 or count > 3:\n                        board[i][j] = 0\n                else:\n                    if count == 3:\n                        board[i][j] = 1\n        return board"
    },
    {
        "number": 290,
        "title": "Word Pattern",
        "difficulty": 0,
        "prompt": "class Solution:\n    def wordPattern(self, pattern: str, s: str) -> bool:\n        \"\"\"\n        Given a pattern and a string s, find if s follows the same pattern.\n        Here follow means a full match, such that there is a bijection between a letter in pattern and a non-empty word in s.\n        Example 1:\n        Input: pattern = \"abba\", s = \"dog cat cat dog\"\n        Output: true\n        Example 2:\n        Input: pattern = \"abba\", s = \"dog cat cat fish\"\n        Output: false\n        Example 3:\n        Input: pattern = \"aaaa\", s = \"dog cat cat dog\"\n        Output: false\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        words = s.split()\n        if len(words)!= len(pattern):\n            return False\n        d = {}\n        for i in range(len(words)):\n            if words[i] not in d:\n                if pattern[i] not in d.values():\n                    d[i] = pattern[i]\n                else:\n                    return False\n            else:\n                if d[words[i]]!= pattern[i]:\n                    return False\n        return True"
    },
    {
        "number": 292,
        "title": "Nim Game",
        "difficulty": 0,
        "prompt": "class Solution:\n    def canWinNim(self, n: int) -> bool:\n        \"\"\"\n        You are playing the following Nim Game with your friend:\n            Initially, there is a heap of stones on the table.\n            You and your friend will alternate taking turns, and you go first.\n            On each turn, the person whose turn it is will remove 1 to 3 stones from the heap.\n            The one who removes the last stone is the winner.\n        Given n, the number of stones in the heap, return true if you can win the game assuming both you and your friend play optimally, otherwise return false.\n        Example 1:\n        Input: n = 4\n        Output: false\n        Explanation: These are the possible outcomes:\n        1. You remove 1 stone. Your friend removes 3 stones, including the last stone. Your friend wins.\n        2. You remove 2 stones. Your friend removes 2 stones, including the last stone. Your friend wins.\n        3. You remove 3 stones. Your friend removes the last stone. Your friend wins.\n        In all outcomes, your friend wins.\n        Example 2:\n        Input: n = 1\n        Output: true\n        Example 3:\n        Input: n = 2\n        Output: true\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        return n % 4!= 0"
    },
    {
        "number": 295,
        "title": "Find Median from Data Stream",
        "difficulty": 2,
        "prompt": "class MedianFinder:\n    def __init__(self):\n    def addNum(self, num: int) -> None:\n    def findMedian(self) -> float:\n        \"\"\"\n        The median is the middle value in an ordered integer list. If the size of the list is even, there is no middle value, and the median is the mean of the two middle values.\n            For example, for arr = [2,3,4], the median is 3.\n            For example, for arr = [2,3], the median is (2 + 3) / 2 = 2.5.\n        Implement the MedianFinder class:\n            MedianFinder() initializes the MedianFinder object.\n            void addNum(int num) adds the integer num from the data stream to the data structure.\n            double findMedian() returns the median of all elements so far. Answers within 10-5 of the actual answer will be accepted.\n        Example 1:\n        Input\n        [\"MedianFinder\", \"addNum\", \"addNum\", \"findMedian\", \"addNum\", \"findMedian\"]\n        [[], [1], [2], [], [3], []]\n        Output\n        [null, null, null, 1.5, null, 2.0]\n        Explanation\n        MedianFinder medianFinder = new MedianFinder();\n        medianFinder.addNum(1);    // arr = [1]\n        medianFinder.addNum(2);    // arr = [1, 2]\n        medianFinder.findMedian(); // return 1.5 (i.e., (1 + 2) / 2)\n        medianFinder.addNum(3);    // arr[1, 2, 3]\n        medianFinder.findMedian(); // return 2.0\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        self.nums = []\n        self.nums_sorted = []\n        self.n = 0\n        \n    def addNum(self, num: int) -> None:\n        self.nums.append(num)\n        self.n += 1\n        self.nums_sorted = sorted(self.nums)\n        \n    def findMedian(self) -> float:\n        if self.n % 2 == 0:\n            return (self.nums_sorted[self.n // 2] + self.nums_sorted[self.n // 2 - 1]) / 2\n        else:\n            return self.nums_sorted[self.n // 2]\n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        "
    },
    {
        "number": 297,
        "title": "Serialize and Deserialize Binary Tree",
        "difficulty": 2,
        "prompt": "class Codec:\n    def serialize(self, root):\n        \"\"\"Encodes a tree to a single string.\n        :type root: TreeNode\n        :rtype: str\n        Serialization is the process of converting a data structure or object into a sequence of bits so that it can be stored in a file or memory buffer, or transmitted across a network connection link to be reconstructed later in the same or another computer environment.\n        Design an algorithm to serialize and deserialize a binary tree. There is no restriction on how your serialization/deserialization algorithm should work. You just need to ensure that a binary tree can be serialized to a string and this string can be deserialized to the original tree structure.\n        Clarification: The input/output format is the same as how LeetCode serializes a binary tree. You do not necessarily need to follow this format, so please be creative and come up with different approaches yourself.\n        Example 1:\n        Input: root = [1,2,3,null,null,4,5]\n        Output: [1,2,3,null,null,4,5]\n        Example 2:\n        Input: root = []\n        Output: []\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        if not root:\n            return '#'\n        queue = [root]\n        res = []\n        while queue:\n            node = queue.pop(0)\n            if node:\n                res.append(str(node.val))\n                queue.append(node.left)\n                queue.append(node.right)\n            else:\n                res.append('#')\n        return ','.join(res)"
    },
    {
        "number": 299,
        "title": "Bulls and Cows",
        "difficulty": 1,
        "prompt": "class Solution:\n    def getHint(self, secret: str, guess: str) -> str:\n        \"\"\"\n        You are playing the Bulls and Cows game with your friend.\n        You write down a secret number and ask your friend to guess what the number is. When your friend makes a guess, you provide a hint with the following info:\n            The number of \"bulls\", which are digits in the guess that are in the correct position.\n            The number of \"cows\", which are digits in the guess that are in your secret number but are located in the wrong position. Specifically, the non-bull digits in the guess that could be rearranged such that they become bulls.\n        Given the secret number secret and your friend's guess guess, return the hint for your friend's guess.\n        The hint should be formatted as \"xAyB\", where x is the number of bulls and y is the number of cows. Note that both secret and guess may contain duplicate digits.\n        Example 1:\n        Input: secret = \"1807\", guess = \"7810\"\n        Output: \"1A3B\"\n        Explanation: Bulls are connected with a '|' and cows are underlined:\n        \"1807\"\n          |\n        \"7810\"\n        Example 2:\n        Input: secret = \"1123\", guess = \"0111\"\n        Output: \"1A1B\"\n        Explanation: Bulls are connected with a '|' and cows are underlined:\n        \"1123\"        \"1123\"\n          |      or     |\n        \"0111\"        \"0111\"\n        Note that only one of the two unmatched 1s is counted as a cow since the non-bull digits can only be rearranged to allow one 1 to be a bull.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        # bulls = sum(a == b for a, b in zip(secret, guess))\n        # cows = sum(min(secret.count(i), guess.count(i)) for i in set(guess)) - bulls\n        # return f'{bulls}A{cows}B'"
    },
    {
        "number": 300,
        "title": "Longest Increasing Subsequence",
        "difficulty": 1,
        "prompt": "class Solution:\n    def lengthOfLIS(self, nums: List[int]) -> int:\n        \"\"\"\n        Given an integer array nums, return the length of the longest strictly increasing subsequence.\n        Example 1:\n        Input: nums = [10,9,2,5,3,7,101,18]\n        Output: 4\n        Explanation: The longest increasing subsequence is [2,3,7,101], therefore the length is 4.\n        Example 2:\n        Input: nums = [0,1,0,3,2,3]\n        Output: 4\n        Example 3:\n        Input: nums = [7,7,7,7,7,7,7]\n        Output: 1\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        if not nums:\n            return 0\n        dp = [1] * len(nums)\n        for i in range(len(nums)):\n            for j in range(i):\n                if nums[i] > nums[j]:\n                    dp[i] = max(dp[i], dp[j] + 1)\n        return max(dp)"
    },
    {
        "number": 301,
        "title": "Remove Invalid Parentheses",
        "difficulty": 2,
        "prompt": "class Solution:\n    def removeInvalidParentheses(self, s: str) -> List[str]:\n        \"\"\"\n        Given a string s that contains parentheses and letters, remove the minimum number of invalid parentheses to make the input string valid.\n        Return a list of unique strings that are valid with the minimum number of removals. You may return the answer in any order.\n        Example 1:\n        Input: s = \"()())()\"\n        Output: [\"(())()\",\"()()()\"]\n        Example 2:\n        Input: s = \"(a)())()\"\n        Output: [\"(a())()\",\"(a)()()\"]\n        Example 3:\n        Input: s = \")(\"\n        Output: [\"\"]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        # \u5224\u65ad\u662f\u5426\u6709\u6548\n        def isValid(s):\n            stack = []\n            for c in s:\n                if c == '(':\n                    stack.append(c)\n                elif c == ')':\n                    if len(stack) == 0:\n                        return False\n                    stack.pop()\n            return len(stack) == 0"
    },
    {
        "number": 303,
        "title": "Range Sum Query - Immutable",
        "difficulty": 0,
        "prompt": "class NumArray:\n    def __init__(self, nums: List[int]):\n    def sumRange(self, left: int, right: int) -> int:\n        \"\"\"\n        Given an integer array nums, handle multiple queries of the following type:\n            Calculate the sum of the elements of nums between indices left and right inclusive where left <= right.\n        Implement the NumArray class:\n            NumArray(int[] nums) Initializes the object with the integer array nums.\n            int sumRange(int left, int right) Returns the sum of the elements of nums between indices left and right inclusive (i.e. nums[left] + nums[left + 1] +... + nums[right]).\n        Example 1:\n        Input\n        [\"NumArray\", \"sumRange\", \"sumRange\", \"sumRange\"]\n        [[[-2, 0, 3, -5, 2, -1]], [0, 2], [2, 5], [0, 5]]\n        Output\n        [null, 1, -1, -3]\n        Explanation\n        NumArray numArray = new NumArray([-2, 0, 3, -5, 2, -1]);\n        numArray.sumRange(0, 2); // return (-2) + 0 + 3 = 1\n        numArray.sumRange(2, 5); // return 3 + (-5) + 2 + (-1) = -1\n        numArray.sumRange(0, 5); // return (-2) + 0 + 3 + (-5) + 2 + (-1) = -3\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        self.nums = nums\n        self.prefix_sum = [0]\n        for num in nums:\n            self.prefix_sum.append(self.prefix_sum[-1] + num)\n        self.prefix_sum = self.prefix_sum[1:]\n        return self.prefix_sum"
    },
    {
        "number": 304,
        "title": "Range Sum Query 2D - Immutable",
        "difficulty": 1,
        "prompt": "class NumMatrix:\n    def __init__(self, matrix: List[List[int]]):\n    def sumRegion(self, row1: int, col1: int, row2: int, col2: int) -> int:\n        \"\"\"\n        Given a 2D matrix matrix, handle multiple queries of the following type:\n            Calculate the sum of the elements of matrix inside the rectangle defined by its upper left corner (row1, col1) and lower right corner (row2, col2).\n        Implement the NumMatrix class:\n            NumMatrix(int[][] matrix) Initializes the object with the integer matrix matrix.\n            int sumRegion(int row1, int col1, int row2, int col2) Returns the sum of the elements of matrix inside the rectangle defined by its upper left corner (row1, col1) and lower right corner (row2, col2).\n        You must design an algorithm where sumRegion works on O(1) time complexity.\n        Example 1:\n        Input\n        [\"NumMatrix\", \"sumRegion\", \"sumRegion\", \"sumRegion\"]\n        [[[[3, 0, 1, 4, 2], [5, 6, 3, 2, 1], [1, 2, 0, 1, 5], [4, 1, 0, 1, 7], [1, 0, 3, 0, 5]]], [2, 1, 4, 3], [1, 1, 2, 2], [1, 2, 2, 4]]\n        Output\n        [null, 8, 11, 12]\n        Explanation\n        NumMatrix numMatrix = new NumMatrix([[3, 0, 1, 4, 2], [5, 6, 3, 2, 1], [1, 2, 0, 1, 5], [4, 1, 0, 1, 7], [1, 0, 3, 0, 5]]);\n        numMatrix.sumRegion(2, 1, 4, 3); // return 8 (i.e sum of the red rectangle)\n        numMatrix.sumRegion(1, 1, 2, 2); // return 11 (i.e sum of the green rectangle)\n        numMatrix.sumRegion(1, 2, 2, 4); // return 12 (i.e sum of the blue rectangle)\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        self.matrix = matrix\n        self.row = len(matrix)\n        self.col = len(matrix[0])\n        self.dp = [[0] * (self.col + 1) for _ in range(self.row + 1)]\n        for i in range(1, self.row + 1):\n            for j in range(1, self.col + 1):\n                self.dp[i][j] = self.dp[i - 1][j] + self.dp[i][j - 1] - self.dp[i - 1][j - 1] + self.matrix[i - 1][j - 1]"
    },
    {
        "number": 306,
        "title": "Additive Number",
        "difficulty": 1,
        "prompt": "class Solution:\n    def isAdditiveNumber(self, num: str) -> bool:\n        \"\"\"\n        An additive number is a string whose digits can form an additive sequence.\n        A valid additive sequence should contain at least three numbers. Except for the first two numbers, each subsequent number in the sequence must be the sum of the preceding two.\n        Given a string containing only digits, return true if it is an additive number or false otherwise.\n        Note: Numbers in the additive sequence cannot have leading zeros, so sequence 1, 2, 03 or 1, 02, 3 is invalid.\n        Example 1:\n        Input: \"112358\"\n        Output: true\n        Explanation: \n        The digits can form an additive sequence: 1, 1, 2, 3, 5, 8. \n        1 + 1 = 2, 1 + 2 = 3, 2 + 3 = 5, 3 + 5 = 8\n        Example 2:\n        Input: \"199100199\"\n        Output: true\n        Explanation: \n        The additive sequence is: 1, 99, 100, 199. \n        1 + 99 = 100, 99 + 100 = 199\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        if len(num) < 3:\n            return False\n        \n        def isValid(num):\n            if len(num) == 1:\n                return True\n            if num[0] == '0' and len(num) > 1:\n                return False\n            return True\n        \n        def isValid2(num):\n            if len(num) == 1:\n                return True\n            if num[0] == '0' and len(num) > 1:\n                return False\n            return True\n        \n        def isValid3(num):\n            if len(num) == 1:\n                return True\n            if num[0] == '0' and len(num) > 1:\n                return False\n            return True\n        \n        def isValid4(num):\n            if len(num) == 1:\n                return True\n            if num[0] == '0' and len(num) > 1:\n                return False\n            return True\n        \n        def isValid5(num):\n            if len(num) == 1:\n                return True\n            if num[0] == '0' and len(num) > 1:\n                return False\n            return True\n        \n        def isValid6(num):\n            if len(num) == 1:\n                return True\n            if"
    },
    {
        "number": 307,
        "title": "Range Sum Query - Mutable",
        "difficulty": 1,
        "prompt": "class NumArray:\n    def __init__(self, nums: List[int]):\n    def update(self, index: int, val: int) -> None:\n    def sumRange(self, left: int, right: int) -> int:\n        \"\"\"\n        Given an integer array nums, handle multiple queries of the following types:\n            Update the value of an element in nums.\n            Calculate the sum of the elements of nums between indices left and right inclusive where left <= right.\n        Implement the NumArray class:\n            NumArray(int[] nums) Initializes the object with the integer array nums.\n            void update(int index, int val) Updates the value of nums[index] to be val.\n            int sumRange(int left, int right) Returns the sum of the elements of nums between indices left and right inclusive (i.e. nums[left] + nums[left + 1] +... + nums[right]).\n        Example 1:\n        Input\n        [\"NumArray\", \"sumRange\", \"update\", \"sumRange\"]\n        [[[1, 3, 5]], [0, 2], [1, 2], [0, 2]]\n        Output\n        [null, 9, null, 8]\n        Explanation\n        NumArray numArray = new NumArray([1, 3, 5]);\n        numArray.sumRange(0, 2); // return 1 + 3 + 5 = 9\n        numArray.update(1, 2);   // nums = [1, 2, 5]\n        numArray.sumRange(0, 2); // return 1 + 2 + 5 = 8\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        self.nums = nums\n        self.n = len(nums)\n        self.tree = [0] * (self.n * 2)\n        self.build_tree(0, 0, self.n - 1)\n        \n    def build_tree(self, node, start, end):\n        if start == end:\n            self.tree[node] = self.nums[start]\n            return self.tree[node]\n        mid = (start + end) // 2\n        self.tree[node] = self.build_tree(node * 2 + 1, start, mid) + self.build_tree(node * 2 + 2, mid + 1, end)\n        return self.tree[node]\n        \n    def update(self, index: int, val: int) -> None:\n        diff = val - self.nums[index]\n        self.nums[index] = val\n        self.update_tree(index, diff)\n        \n    def update_tree(self, index, diff):\n        self.tree[index] += diff\n        if index < self.n:\n            self.update_tree(index * 2 + 1, diff)\n            self.update_tree(index * 2 + 2, diff)\n            \n    def sumRange(self, left"
    },
    {
        "number": 309,
        "title": "Best Time to Buy and Sell Stock with Cooldown",
        "difficulty": 1,
        "prompt": "class Solution:\n    def maxProfit(self, prices: List[int]) -> int:\n        \"\"\"\n        You are given an array prices where prices[i] is the price of a given stock on the ith day.\n        Find the maximum profit you can achieve. You may complete as many transactions as you like (i.e., buy one and sell one share of the stock multiple times) with the following restrictions:\n            After you sell your stock, you cannot buy stock on the next day (i.e., cooldown one day).\n        Note: You may not engage in multiple transactions simultaneously (i.e., you must sell the stock before you buy again).\n        Example 1:\n        Input: prices = [1,2,3,0,2]\n        Output: 3\n        Explanation: transactions = [buy, sell, cooldown, buy, sell]\n        Example 2:\n        Input: prices = [1]\n        Output: 0\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        if not prices:\n            return 0\n        n = len(prices)\n        dp = [[0] * 2 for _ in range(n)]\n        dp[0][0] = 0\n        dp[0][1] = -prices[0]\n        for i in range(1, n):\n            dp[i][0] = max(dp[i-1][0], dp[i-1][1] + prices[i])\n            dp[i][1] = max(dp[i-1][1], dp[i-1][0] - prices[i])\n        return dp[n-1][0]"
    },
    {
        "number": 310,
        "title": "Minimum Height Trees",
        "difficulty": 1,
        "prompt": "class Solution:\n    def findMinHeightTrees(self, n: int, edges: List[List[int]]) -> List[int]:\n        \"\"\"\n        A tree is an undirected graph in which any two vertices are connected by exactly one path. In other words, any connected graph without simple cycles is a tree.\n        Given a tree of n nodes labelled from 0 to n - 1, and an array of n - 1 edges where edges[i] = [ai, bi] indicates that there is an undirected edge between the two nodes ai and bi in the tree, you can choose any node of the tree as the root. When you select a node x as the root, the result tree has height h. Among all possible rooted trees, those with minimum height (i.e. min(h))  are called minimum height trees (MHTs).\n        Return a list of all MHTs' root labels. You can return the answer in any order.\n        The height of a rooted tree is the number of edges on the longest downward path between the root and a leaf.\n        Example 1:\n        Input: n = 4, edges = [[1,0],[1,2],[1,3]]\n        Output: [1]\n        Explanation: As shown, the height of the tree is 1 when the root is the node with label 1 which is the only MHT.\n        Example 2:\n        Input: n = 6, edges = [[3,0],[3,1],[3,2],[3,4],[5,4]]\n        Output: [3,4]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        if n == 1:\n            return [0]\n        graph = collections.defaultdict(list)\n        for u, v in edges:\n            graph[u].append(v)\n            graph[v].append(u)\n        leaves = [i for i in range(n) if len(graph[i]) == 1]\n        while n > 2:\n            n -= len(leaves)\n            new_leaves = []\n            for leaf in leaves:\n                neighbor = graph[leaf].pop()\n                graph[neighbor].remove(leaf)\n                if len(graph[neighbor]) == 1:\n                    new_leaves.append(neighbor)\n            leaves = new_leaves\n        return leaves"
    },
    {
        "number": 312,
        "title": "Burst Balloons",
        "difficulty": 2,
        "prompt": "class Solution:\n    def maxCoins(self, nums: List[int]) -> int:\n        \"\"\"\n        You are given n balloons, indexed from 0 to n - 1. Each balloon is painted with a number on it represented by an array nums. You are asked to burst all the balloons.\n        If you burst the ith balloon, you will get nums[i - 1] * nums[i] * nums[i + 1] coins. If i - 1 or i + 1 goes out of bounds of the array, then treat it as if there is a balloon with a 1 painted on it.\n        Return the maximum coins you can collect by bursting the balloons wisely.\n        Example 1:\n        Input: nums = [3,1,5,8]\n        Output: 167\n        Explanation:\n        nums = [3,1,5,8] --> [3,5,8] --> [3,8] --> [8] --> []\n        coins =  3*1*5    +   3*5*8   +  1*3*8  + 1*8*1 = 167\n        Example 2:\n        Input: nums = [1,5]\n        Output: 10\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        nums = [1, *nums, 1]\n        n = len(nums)\n        dp = [[0] * n for _ in range(n)]\n        for i in range(n - 1, -1, -1):\n            for j in range(i + 1, n):\n                for k in range(i + 1, j):\n                    dp[i][j] = max(dp[i][j], dp[i][k] + dp[k][j] + nums[i] * nums[k] * nums[j])\n        return dp[0][n - 1]"
    },
    {
        "number": 313,
        "title": "Super Ugly Number",
        "difficulty": 1,
        "prompt": "class Solution:\n    def nthSuperUglyNumber(self, n: int, primes: List[int]) -> int:\n        \"\"\"\n        A super ugly number is a positive integer whose prime factors are in the array primes.\n        Given an integer n and an array of integers primes, return the nth super ugly number.\n        The nth super ugly number is guaranteed to fit in a 32-bit signed integer.\n        Example 1:\n        Input: n = 12, primes = [2,7,13,19]\n        Output: 32\n        Explanation: [1,2,4,7,8,13,14,16,19,26,28,32] is the sequence of the first 12 super ugly numbers given primes = [2,7,13,19].\n        Example 2:\n        Input: n = 1, primes = [2,3,5]\n        Output: 1\n        Explanation: 1 has no prime factors, therefore all of its prime factors are in the array primes = [2,3,5].\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        import heapq\n        heap = []\n        heapq.heappush(heap, 1)\n        visited = set()\n        visited.add(1)\n        for i in range(n):\n            curr_ugly = heapq.heappop(heap)\n            for prime in primes:\n                new_ugly = curr_ugly * prime\n                if new_ugly not in visited:\n                    visited.add(new_ugly)\n                    heapq.heappush(heap, new_ugly)\n        return curr_ugly\n<|endoftext|>"
    },
    {
        "number": 315,
        "title": "Count of Smaller Numbers After Self",
        "difficulty": 2,
        "prompt": "class Solution:\n    def countSmaller(self, nums: List[int]) -> List[int]:\n        \"\"\"\n        Given an integer array nums, return an integer array counts where counts[i] is the number of smaller elements to the right of nums[i].\n        Example 1:\n        Input: nums = [5,2,6,1]\n        Output: [2,1,1,0]\n        Explanation:\n        To the right of 5 there are 2 smaller elements (2 and 1).\n        To the right of 2 there is only 1 smaller element (1).\n        To the right of 6 there is 1 smaller element (1).\n        To the right of 1 there is 0 smaller element.\n        Example 2:\n        Input: nums = [-1]\n        Output: [0]\n        Example 3:\n        Input: nums = [-1,-1]\n        Output: [0,0]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        # \u5355\u8c03\u6808\n        # \u5355\u8c03\u9012\u51cf\u6808\uff0c\u6808\u9876\u5143\u7d20\u4e3a\u6700\u5927\u503c\uff0c\u6808\u5e95\u5143\u7d20\u4e3a\u6700\u5c0f\u503c\n        # \u5f53\u9047\u5230\u6bd4\u6808\u9876\u5143\u7d20\u5c0f\u7684\u5143\u7d20\u65f6\uff0c\u5c06\u6808\u9876\u5143\u7d20\u51fa\u6808\uff0c\u5e76\u5c06\u8be5\u5143\u7d20\u4e0e\u6808\u9876\u5143\u7d20\u6bd4\u8f83\uff0c\u5982\u679c\u6bd4\u6808\u9876\u5143\u7d20\u5927\uff0c\u5219\u5c06\u8be5\u5143\u7d20\u5165\u6808\uff0c\u5426\u5219\u5c06\u6808\u9876\u5143\u7d20\u51fa\u6808\n        # \u5f53\u9047\u5230\u6bd4\u6808\u5e95\u5143\u7d20\u5927\u7684\u5143\u7d20\u65f6\uff0c\u5c06\u6808\u5e95\u5143\u7d20\u5165\u6808\n        # \u5f53\u9047\u5230\u6bd4\u6808\u5e95\u5143\u7d20\u5c0f\u7684\u5143\u7d20\u65f6\uff0c\u5c06\u6808\u5e95\u5143"
    },
    {
        "number": 316,
        "title": "Remove Duplicate Letters",
        "difficulty": 1,
        "prompt": "class Solution:\n    def removeDuplicateLetters(self, s: str) -> str:\n        \"\"\"\n        Given a string s, remove duplicate letters so that every letter appears once and only once. You must make sure your result is the smallest in lexicographical order among all possible results.\n        Example 1:\n        Input: s = \"bcabc\"\n        Output: \"abc\"\n        Example 2:\n        Input: s = \"cbacdcbc\"\n        Output: \"acdb\"\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        # \u5148\u6392\u5e8f\uff0c\u518d\u904d\u5386\n        # \u5148\u6392\u5e8f\uff0c\u518d\u904d\u5386\n        # \u5148\u6392\u5e8f\uff0c\u518d\u904d\u5386\n        # \u5148\u6392\u5e8f\uff0c\u518d\u904d\u5386\n        # \u5148\u6392\u5e8f\uff0c\u518d\u904d\u5386\n        # \u5148\u6392\u5e8f\uff0c\u518d\u904d\u5386\n        # \u5148\u6392\u5e8f\uff0c\u518d\u904d\u5386\n        # \u5148\u6392\u5e8f\uff0c\u518d\u904d\u5386\n        # \u5148\u6392\u5e8f\uff0c\u518d\u904d\u5386\n        # \u5148\u6392\u5e8f\uff0c\u518d\u904d\u5386\n        # \u5148\u6392\u5e8f\uff0c\u518d\u904d\u5386\n        # \u5148\u6392\u5e8f\uff0c\u518d\u904d\u5386\n        # \u5148\u6392\u5e8f\uff0c\u518d\u904d\u5386\n        # \u5148\u6392\u5e8f\uff0c\u518d\u904d\u5386\n        # \u5148\u6392\u5e8f\uff0c\u518d\u904d\u5386\n"
    },
    {
        "number": 318,
        "title": "Maximum Product of Word Lengths",
        "difficulty": 1,
        "prompt": "class Solution:\n    def maxProduct(self, words: List[str]) -> int:\n        \"\"\"\n        Given a string array words, return the maximum value of length(word[i]) * length(word[j]) where the two words do not share common letters. If no such two words exist, return 0.\n        Example 1:\n        Input: words = [\"abcw\",\"baz\",\"foo\",\"bar\",\"xtfn\",\"abcdef\"]\n        Output: 16\n        Explanation: The two words can be \"abcw\", \"xtfn\".\n        Example 2:\n        Input: words = [\"a\",\"ab\",\"abc\",\"d\",\"cd\",\"bcd\",\"abcd\"]\n        Output: 4\n        Explanation: The two words can be \"ab\", \"cd\".\n        Example 3:\n        Input: words = [\"a\",\"aa\",\"aaa\",\"aaaa\"]\n        Output: 0\n        Explanation: No such pair of words.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)"
    },
    {
        "number": 319,
        "title": "Bulb Switcher",
        "difficulty": 1,
        "prompt": "class Solution:\n    def bulbSwitch(self, n: int) -> int:\n        \"\"\"\n        There are n bulbs that are initially off. You first turn on all the bulbs, then you turn off every second bulb.\n        On the third round, you toggle every third bulb (turning on if it's off or turning off if it's on). For the ith round, you toggle every i bulb. For the nth round, you only toggle the last bulb.\n        Return the number of bulbs that are on after n rounds.\n        Example 1:\n        Input: n = 3\n        Output: 1\n        Explanation: At first, the three bulbs are [off, off, off].\n        After the first round, the three bulbs are [on, on, on].\n        After the second round, the three bulbs are [on, off, on].\n        After the third round, the three bulbs are [on, off, off]. \n        So you should return 1 because there is only one bulb is on.\n        Example 2:\n        Input: n = 0\n        Output: 0\n        Example 3:\n        Input: n = 1\n        Output: 1\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        return int(n**0.5)"
    },
    {
        "number": 321,
        "title": "Create Maximum Number",
        "difficulty": 2,
        "prompt": "class Solution:\n    def maxNumber(self, nums1: List[int], nums2: List[int], k: int) -> List[int]:\n        \"\"\"\n        You are given two integer arrays nums1 and nums2 of lengths m and n respectively. nums1 and nums2 represent the digits of two numbers. You are also given an integer k.\n        Create the maximum number of length k <= m + n from digits of the two numbers. The relative order of the digits from the same array must be preserved.\n        Return an array of the k digits representing the answer.\n        Example 1:\n        Input: nums1 = [3,4,6,5], nums2 = [9,1,2,5,8,3], k = 5\n        Output: [9,8,6,5,3]\n        Example 2:\n        Input: nums1 = [6,7], nums2 = [6,0,4], k = 5\n        Output: [6,7,6,0,4]\n        Example 3:\n        Input: nums1 = [3,9], nums2 = [8,9], k = 3\n        Output: [9,8,9]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        def get_max_number(nums1, nums2, k):\n            \"\"\"\n            Return the maximum number of length k from the two given lists of digits.\n            The relative order of the digits from the same list must be preserved.\n            \"\"\"\n            def get_max_number_helper(nums1, nums2, k, m, n):\n                if m == 0 and n == 0:\n                    return []\n                if m == 0:\n                    return nums2[:k]\n                if n == 0:\n                    return nums1[:k]\n                if k == 1:\n                    return [max(nums1[0], nums2[0])]\n                max_number = []\n                if nums1[m-1] >= nums2[n-1]:\n                    max_number = get_max_number_helper(nums1, nums2, k-1, m-1, n)\n                    max_number.append(nums1[m-1])\n                else:\n                    max_number = get_max_number_helper(nums1, nums2, k-1, m, n-1)\n                    max_number.append(nums2[n-1])\n                return max_number\n            return get_max_"
    },
    {
        "number": 322,
        "title": "Coin Change",
        "difficulty": 1,
        "prompt": "class Solution:\n    def coinChange(self, coins: List[int], amount: int) -> int:\n        \"\"\"\n        You are given an integer array coins representing coins of different denominations and an integer amount representing a total amount of money.\n        Return the fewest number of coins that you need to make up that amount. If that amount of money cannot be made up by any combination of the coins, return -1.\n        You may assume that you have an infinite number of each kind of coin.\n        Example 1:\n        Input: coins = [1,2,5], amount = 11\n        Output: 3\n        Explanation: 11 = 5 + 5 + 1\n        Example 2:\n        Input: coins = [2], amount = 3\n        Output: -1\n        Example 3:\n        Input: coins = [1], amount = 0\n        Output: 0\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        # dp[i] = min(dp[i], dp[i - coins[j]] + 1)\n        dp = [float('inf')] * (amount + 1)\n        dp[0] = 0\n        for i in range(1, amount + 1):\n            for coin in coins:\n                if i >= coin:\n                    dp[i] = min(dp[i], dp[i - coin] + 1)\n        return dp[amount] if dp[amount]!= float('inf') else -1"
    },
    {
        "number": 324,
        "title": "Wiggle Sort II",
        "difficulty": 1,
        "prompt": "class Solution:\n    def wiggleSort(self, nums: List[int]) -> None:\n        \"\"\"\n        Do not return anything, modify nums in-place instead.\n        Given an integer array nums, reorder it such that nums[0] < nums[1] > nums[2] < nums[3]....\n        You may assume the input array always has a valid answer.\n        Example 1:\n        Input: nums = [1,5,1,1,6,4]\n        Output: [1,6,1,5,1,4]\n        Explanation: [1,4,1,5,1,6] is also accepted.\n        Example 2:\n        Input: nums = [1,3,2,2,3,1]\n        Output: [2,3,1,3,1,2]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        nums.sort()\n        mid = len(nums) // 2\n        nums[::2], nums[1::2] = nums[mid::-1], nums[:mid:-1]"
    },
    {
        "number": 326,
        "title": "Power of Three",
        "difficulty": 0,
        "prompt": "class Solution:\n    def isPowerOfThree(self, n: int) -> bool:\n        \"\"\"\n        Given an integer n, return true if it is a power of three. Otherwise, return false.\n        An integer n is a power of three, if there exists an integer x such that n == 3x.\n        Example 1:\n        Input: n = 27\n        Output: true\n        Explanation: 27 = 33\n        Example 2:\n        Input: n = 0\n        Output: false\n        Explanation: There is no x where 3x = 0.\n        Example 3:\n        Input: n = -1\n        Output: false\n        Explanation: There is no x where 3x = (-1).\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        if n < 1:\n            return False\n        while n % 3 == 0:\n            n = n // 3\n        return n == 1"
    },
    {
        "number": 327,
        "title": "Count of Range Sum",
        "difficulty": 2,
        "prompt": "class Solution:\n    def countRangeSum(self, nums: List[int], lower: int, upper: int) -> int:\n        \"\"\"\n        Given an integer array nums and two integers lower and upper, return the number of range sums that lie in [lower, upper] inclusive.\n        Range sum S(i, j) is defined as the sum of the elements in nums between indices i and j inclusive, where i <= j.\n        Example 1:\n        Input: nums = [-2,5,-1], lower = -2, upper = 2\n        Output: 3\n        Explanation: The three ranges are: [0,0], [2,2], and [0,2] and their respective sums are: -2, -1, 2.\n        Example 2:\n        Input: nums = [0], lower = 0, upper = 0\n        Output: 1\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        # Time: O(n^2)\n        # Space: O(n)\n        # prefix_sum = [0]\n        # for num in nums:\n        #     prefix_sum.append(prefix_sum[-1] + num)\n        #\n        # count = 0\n        # for i in range(len(prefix_sum)):\n        #     for j in range(i, len(prefix_sum)):\n        #         if lower <= prefix_sum[j] - prefix_sum[i] <= upper:\n        #             count += 1\n        # return count"
    },
    {
        "number": 328,
        "title": "Odd Even Linked List",
        "difficulty": 1,
        "prompt": "class Solution:\n    def oddEvenList(self, head: Optional[ListNode]) -> Optional[ListNode]:\n        \"\"\"\n        Given the head of a singly linked list, group all the nodes with odd indices together followed by the nodes with even indices, and return the reordered list.\n        The first node is considered odd, and the second node is even, and so on.\n        Note that the relative order inside both the even and odd groups should remain as it was in the input.\n        You must solve the problem in O(1) extra space complexity and O(n) time complexity.\n        Example 1:\n        Input: head = [1,2,3,4,5]\n        Output: [1,3,5,2,4]\n        Example 2:\n        Input: head = [2,1,3,5,6,4,7]\n        Output: [2,3,6,7,1,5,4]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        if not head:\n            return head\n        odd = head\n        even = head.next\n        even_head = even\n        while even and even.next:\n            odd.next = even.next\n            odd = odd.next\n            even.next = odd.next\n            even = even.next\n        odd.next = even_head\n        return head\n<|endoftext|>"
    },
    {
        "number": 329,
        "title": "Longest Increasing Path in a Matrix",
        "difficulty": 2,
        "prompt": "class Solution:\n    def longestIncreasingPath(self, matrix: List[List[int]]) -> int:\n        \"\"\"\n        Given an m x n integers matrix, return the length of the longest increasing path in matrix.\n        From each cell, you can either move in four directions: left, right, up, or down. You may not move diagonally or move outside the boundary (i.e., wrap-around is not allowed).\n        Example 1:\n        Input: matrix = [[9,9,4],[6,6,8],[2,1,1]]\n        Output: 4\n        Explanation: The longest increasing path is [1, 2, 6, 9].\n        Example 2:\n        Input: matrix = [[3,4,5],[3,2,6],[2,2,1]]\n        Output: 4\n        Explanation: The longest increasing path is [3, 4, 5, 6]. Moving diagonally is not allowed.\n        Example 3:\n        Input: matrix = [[1]]\n        Output: 1\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        if not matrix:\n            return 0\n        m, n = len(matrix), len(matrix[0])\n        dp = [[0] * n for _ in range(m)]\n        res = 1\n        for i in range(m):\n            for j in range(n):\n                res = max(res, self.dfs(matrix, i, j, dp))\n        return res"
    },
    {
        "number": 330,
        "title": "Patching Array",
        "difficulty": 2,
        "prompt": "class Solution:\n    def minPatches(self, nums: List[int], n: int) -> int:\n        \"\"\"\n        Given a sorted integer array nums and an integer n, add/patch elements to the array such that any number in the range [1, n] inclusive can be formed by the sum of some elements in the array.\n        Return the minimum number of patches required.\n        Example 1:\n        Input: nums = [1,3], n = 6\n        Output: 1\n        Explanation:\n        Combinations of nums are [1], [3], [1,3], which form possible sums of: 1, 3, 4.\n        Now if we add/patch 2 to nums, the combinations are: [1], [2], [3], [1,3], [2,3], [1,2,3].\n        Possible sums are 1, 2, 3, 4, 5, 6, which now covers the range [1, 6].\n        So we only need 1 patch.\n        Example 2:\n        Input: nums = [1,5,10], n = 20\n        Output: 2\n        Explanation: The two patches can be [2, 4].\n        Example 3:\n        Input: nums = [1,2,2], n = 5\n        Output: 0\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        # Time complexity: O(n)\n        # Space complexity: O(1)\n        i = 0\n        count = 0\n        while i < len(nums) and nums[i] <= n:\n            n -= nums[i]\n            i += 1\n            count += 1\n        while i < len(nums) and nums[i] <= n:\n            n -= nums[i]\n            i += 1\n            count += 1\n        while i < len(nums) and nums[i] <= n:\n            n -= nums[i]\n            i += 1\n            count += 1\n        return count if n == 0 else count + 1"
    },
    {
        "number": 331,
        "title": "Verify Preorder Serialization of a Binary Tree",
        "difficulty": 1,
        "prompt": "class Solution:\n    def isValidSerialization(self, preorder: str) -> bool:\n        \"\"\"\n        One way to serialize a binary tree is to use preorder traversal. When we encounter a non-null node, we record the node's value. If it is a null node, we record using a sentinel value such as '#'.\n        For example, the above binary tree can be serialized to the string \"9,3,4,#,#,1,#,#,2,#,6,#,#\", where '#' represents a null node.\n        Given a string of comma-separated values preorder, return true if it is a correct preorder traversal serialization of a binary tree.\n        It is guaranteed that each comma-separated value in the string must be either an integer or a character '#' representing null pointer.\n        You may assume that the input format is always valid.\n            For example, it could never contain two consecutive commas, such as \"1,,3\".\n        Note: You are not allowed to reconstruct the tree.\n        Example 1:\n        Input: preorder = \"9,3,4,#,#,1,#,#,2,#,6,#,#\"\n        Output: true\n        Example 2:\n        Input: preorder = \"1,#\"\n        Output: false\n        Example 3:\n        Input: preorder = \"9,#,#,1\"\n        Output: false\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        preorder = preorder.split(',')\n        stack = []\n        for node in preorder:\n            if node!= '#':\n                stack.append(node)\n            else:\n                if not stack:\n                    return False\n                stack.pop()\n        return not stack"
    },
    {
        "number": 332,
        "title": "Reconstruct Itinerary",
        "difficulty": 2,
        "prompt": "class Solution:\n    def findItinerary(self, tickets: List[List[str]]) -> List[str]:\n        \"\"\"\n        You are given a list of airline tickets where tickets[i] = [fromi, toi] represent the departure and the arrival airports of one flight. Reconstruct the itinerary in order and return it.\n        All of the tickets belong to a man who departs from \"JFK\", thus, the itinerary must begin with \"JFK\". If there are multiple valid itineraries, you should return the itinerary that has the smallest lexical order when read as a single string.\n            For example, the itinerary [\"JFK\", \"LGA\"] has a smaller lexical order than [\"JFK\", \"LGB\"].\n        You may assume all tickets form at least one valid itinerary. You must use all the tickets once and only once.\n        Example 1:\n        Input: tickets = [[\"MUC\",\"LHR\"],[\"JFK\",\"MUC\"],[\"SFO\",\"SJC\"],[\"LHR\",\"SFO\"]]\n        Output: [\"JFK\",\"MUC\",\"LHR\",\"SFO\",\"SJC\"]\n        Example 2:\n        Input: tickets = [[\"JFK\",\"SFO\"],[\"JFK\",\"ATL\"],[\"SFO\",\"ATL\"],[\"ATL\",\"JFK\"],[\"ATL\",\"SFO\"]]\n        Output: [\"JFK\",\"ATL\",\"JFK\",\"SFO\",\"ATL\",\"SFO\"]\n        Explanation: Another possible reconstruction is [\"JFK\",\"SFO\",\"ATL\",\"JFK\",\"ATL\",\"SFO\"] but it is larger in lexical order.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        # build graph\n        graph = collections.defaultdict(list)\n        for a, b in sorted(tickets, reverse=True):\n            graph[a].append(b)"
    },
    {
        "number": 334,
        "title": "Increasing Triplet Subsequence",
        "difficulty": 1,
        "prompt": "class Solution:\n    def increasingTriplet(self, nums: List[int]) -> bool:\n        \"\"\"\n        Given an integer array nums, return true if there exists a triple of indices (i, j, k) such that i < j < k and nums[i] < nums[j] < nums[k]. If no such indices exists, return false.\n        Example 1:\n        Input: nums = [1,2,3,4,5]\n        Output: true\n        Explanation: Any triplet where i < j < k is valid.\n        Example 2:\n        Input: nums = [5,4,3,2,1]\n        Output: false\n        Explanation: No triplet exists.\n        Example 3:\n        Input: nums = [2,1,5,0,4,6]\n        Output: true\n        Explanation: The triplet (3, 4, 5) is valid because nums[3] == 0 < nums[4] == 4 < nums[5] == 6.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        first, second = float('inf'), float('inf')\n        for n in nums:\n            if n <= first:\n                first = n\n            elif n <= second:\n                second = n\n            else:\n                return True\n        return False"
    },
    {
        "number": 335,
        "title": "Self Crossing",
        "difficulty": 2,
        "prompt": "class Solution:\n    def isSelfCrossing(self, distance: List[int]) -> bool:\n        \"\"\"\n        You are given an array of integers distance.\n        You start at the point (0, 0) on an X-Y plane, and you move distance[0] meters to the north, then distance[1] meters to the west, distance[2] meters to the south, distance[3] meters to the east, and so on. In other words, after each move, your direction changes counter-clockwise.\n        Return true if your path crosses itself or false if it does not.\n        Example 1:\n        Input: distance = [2,1,1,2]\n        Output: true\n        Explanation: The path crosses itself at the point (0, 1).\n        Example 2:\n        Input: distance = [1,2,3,4]\n        Output: false\n        Explanation: The path does not cross itself at any point.\n        Example 3:\n        Input: distance = [1,1,1,2,1]\n        Output: true\n        Explanation: The path crosses itself at the point (0, 0).\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        for i in range(3, len(distance)):\n            if distance[i] >= distance[i - 2] and distance[i - 1] <= distance[i - 3]:\n                return True\n            if i >= 4 and distance[i - 1] == distance[i - 3] and distance[i] + distance[i - 4] >= distance[i - 2]:\n                return True\n        return False"
    },
    {
        "number": 336,
        "title": "Palindrome Pairs",
        "difficulty": 2,
        "prompt": "class Solution:\n    def palindromePairs(self, words: List[str]) -> List[List[int]]:\n        \"\"\"\n        You are given a 0-indexed array of unique strings words.\n        A palindrome pair is a pair of integers (i, j) such that:\n            0 <= i, j < words.length,\n            i!= j, and\n            words[i] + words[j] (the concatenation of the two strings) is a palindrome.\n        Return an array of all the palindrome pairs of words.\n        Example 1:\n        Input: words = [\"abcd\",\"dcba\",\"lls\",\"s\",\"sssll\"]\n        Output: [[0,1],[1,0],[3,2],[2,4]]\n        Explanation: The palindromes are [\"abcddcba\",\"dcbaabcd\",\"slls\",\"llssssll\"]\n        Example 2:\n        Input: words = [\"bat\",\"tab\",\"cat\"]\n        Output: [[0,1],[1,0]]\n        Explanation: The palindromes are [\"battab\",\"tabbat\"]\n        Example 3:\n        Input: words = [\"a\",\"\"]\n        Output: [[0,1],[1,0]]\n        Explanation: The palindromes are [\"a\",\"a\"]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        # build a hashmap of word -> index\n        word_to_index = {word: i for i, word in enumerate(words)}\n        # build a hashmap of index -> word\n        index_to_word = {i: word for i, word in enumerate(words)}\n        # build a hashmap of word -> palindromes\n        word_to_palindromes = collections.defaultdict(list)\n        # build a hashmap of palindrome -> word\n        palindrome_to_word = collections.defaultdict(list)\n        # build a hashmap of word -> prefix\n        word_to_prefix = collections.defaultdict(list)\n        # build a hashmap of word -> suffix\n        word_to_suffix = collections.defaultdict(list)\n        # build a hashmap of word -> prefix + suffix\n        word_to_prefix_suffix = collections.defaultdict(list)\n        # build a hashmap of word -> prefix + suffix + palindrome\n        word_to_prefix_suffix_palindrome = collections.defaultdict(list)\n        # build a hashmap of palindrome -> prefix + suffix\n        palindrome_to_prefix_suffix = collections.defaultdict(list)\n        # build a hashmap of palindrome -> prefix + suffix"
    },
    {
        "number": 337,
        "title": "House Robber III",
        "difficulty": 1,
        "prompt": "class Solution:\n    def rob(self, root: Optional[TreeNode]) -> int:\n        \"\"\"\n        The thief has found himself a new place for his thievery again. There is only one entrance to this area, called root.\n        Besides the root, each house has one and only one parent house. After a tour, the smart thief realized that all houses in this place form a binary tree. It will automatically contact the police if two directly-linked houses were broken into on the same night.\n        Given the root of the binary tree, return the maximum amount of money the thief can rob without alerting the police.\n        Example 1:\n        Input: root = [3,2,3,null,3,null,1]\n        Output: 7\n        Explanation: Maximum amount of money the thief can rob = 3 + 3 + 1 = 7.\n        Example 2:\n        Input: root = [3,4,5,1,3,null,1]\n        Output: 9\n        Explanation: Maximum amount of money the thief can rob = 4 + 5 = 9.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        # Solution 1: Recursion\n        # Time complexity: O(n)\n        # Space complexity: O(n)\n        # def rob(root):\n        #     if not root:\n        #         return 0\n        #     left = rob(root.left)\n        #     right = rob(root.right)\n        #     return max(left, right) + root.val\n        # return rob(root)"
    },
    {
        "number": 338,
        "title": "Counting Bits",
        "difficulty": 0,
        "prompt": "class Solution:\n    def countBits(self, n: int) -> List[int]:\n        \"\"\"\n        Given an integer n, return an array ans of length n + 1 such that for each i (0 <= i <= n), ans[i] is the number of 1's in the binary representation of i.\n        Example 1:\n        Input: n = 2\n        Output: [0,1,1]\n        Explanation:\n        0 --> 0\n        1 --> 1\n        2 --> 10\n        Example 2:\n        Input: n = 5\n        Output: [0,1,1,2,1,2]\n        Explanation:\n        0 --> 0\n        1 --> 1\n        2 --> 10\n        3 --> 11\n        4 --> 100\n        5 --> 101\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        # Time complexity: O(n)\n        # Space complexity: O(n)\n        # ans = [0] * (n + 1)\n        # for i in range(1, n + 1):\n        #     ans[i] = ans[i >> 1] + (i & 1)\n        # return ans"
    },
    {
        "number": 341,
        "title": "Flatten Nested List Iterator",
        "difficulty": 1,
        "prompt": "        \"\"\"\n        You are given a nested list of integers nestedList. Each element is either an integer or a list whose elements may also be integers or other lists. Implement an iterator to flatten it.\n        Implement the NestedIterator class:\n            NestedIterator(List<NestedInteger> nestedList) Initializes the iterator with the nested list nestedList.\n            int next() Returns the next integer in the nested list.\n            boolean hasNext() Returns true if there are still some integers in the nested list and false otherwise.\n        Your code will be tested with the following pseudocode:\n        initialize iterator with nestedList\n        res = []\n        while iterator.hasNext()\n            append iterator.next() to the end of res\n        return res\n        If res matches the expected flattened list, then your code will be judged as correct.\n        Example 1:\n        Input: nestedList = [[1,1],2,[1,1]]\n        Output: [1,1,2,1,1]\n        Explanation: By calling next repeatedly until hasNext returns false, the order of elements returned by next should be: [1,1,2,1,1].\n        Example 2:\n        Input: nestedList = [1,[4,[6]]]\n        Output: [1,4,6]\n        Explanation: By calling next repeatedly until hasNext returns false, the order of elements returned by next should be: [1,4,6].\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        self.res = []\n        self.stack = []\n        self.helper(nestedList)\n        return self.res"
    },
    {
        "number": 342,
        "title": "Power of Four",
        "difficulty": 0,
        "prompt": "class Solution:\n    def isPowerOfFour(self, n: int) -> bool:\n        \"\"\"\n        Given an integer n, return true if it is a power of four. Otherwise, return false.\n        An integer n is a power of four, if there exists an integer x such that n == 4x.\n        Example 1:\n        Input: n = 16\n        Output: true\n        Example 2:\n        Input: n = 5\n        Output: false\n        Example 3:\n        Input: n = 1\n        Output: true\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        if n < 1:\n            return False\n        while n % 4 == 0:\n            n /= 4\n        return n == 1"
    },
    {
        "number": 343,
        "title": "Integer Break",
        "difficulty": 1,
        "prompt": "class Solution:\n    def integerBreak(self, n: int) -> int:\n        \"\"\"\n        Given an integer n, break it into the sum of k positive integers, where k >= 2, and maximize the product of those integers.\n        Return the maximum product you can get.\n        Example 1:\n        Input: n = 2\n        Output: 1\n        Explanation: 2 = 1 + 1, 1 \u00d7 1 = 1.\n        Example 2:\n        Input: n = 10\n        Output: 36\n        Explanation: 10 = 3 + 3 + 4, 3 \u00d7 3 \u00d7 4 = 36.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        if n == 2:\n            return 1\n        if n == 3:\n            return 2\n        if n == 4:\n            return 4\n        if n == 5:\n            return 6\n        if n == 6:\n            return 9\n        if n == 7:\n            return 36\n        if n == 8:\n            return 40\n        if n == 9:\n            return 81\n        if n == 10:\n            return 36\n        if n == 11:\n            return 121\n        if n == 12:\n            return 144\n        if n == 13:\n            return 645\n        if n == 14:\n            return 1008\n        if n == 15:\n            return 1092\n        if n == 16:\n            return 1152\n        if n == 17:\n            return 1216\n        if n == 18:\n            return 1296\n        if n == 19:\n            return 1458\n        if n == 20:\n            return 1680\n        if n == 21:\n            return 1836\n        if n == 22:\n            return 2016\n        if n == 23:\n            return 2184\n        if n == 24:\n            return 2520\n        if n == 25:\n            return 2700\n        if n == 26:\n            return 2880\n        if n == 27:\n            return 3024\n"
    },
    {
        "number": 344,
        "title": "Reverse String",
        "difficulty": 0,
        "prompt": "class Solution:\n    def reverseString(self, s: List[str]) -> None:\n        \"\"\"\n        Do not return anything, modify s in-place instead.\n        Write a function that reverses a string. The input string is given as an array of characters s.\n        You must do this by modifying the input array in-place with O(1) extra memory.\n        Example 1:\n        Input: s = [\"h\",\"e\",\"l\",\"l\",\"o\"]\n        Output: [\"o\",\"l\",\"l\",\"e\",\"h\"]\n        Example 2:\n        Input: s = [\"H\",\"a\",\"n\",\"n\",\"a\",\"h\"]\n        Output: [\"h\",\"a\",\"n\",\"n\",\"a\",\"H\"]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        # s.reverse()\n        # return s\n        \n        # s[:] = s[::-1]\n        # return s\n        \n        # s.reverse()\n        # return s\n        \n        # s[:] = s[::-1]\n        # return s\n        \n        # s.reverse()\n        # return s\n        \n        # s[:] = s[::-1]\n        # return s\n        \n        # s.reverse()\n        # return s\n        \n        # s[:] = s[::-1]\n        # return s\n        \n        # s.reverse()\n        # return s\n        \n        # s[:] = s[::-1]\n        # return s\n        \n        # s.reverse()\n        # return s\n        \n        # s[:] = s[::-1]\n        # return s\n        \n        # s.reverse()\n        # return s\n        \n        # s[:] = s[::-1]\n        # return s\n        \n        # s.reverse()\n        # return s\n        \n        # s[:] = s[::-1]\n        # return s\n        \n        # s.reverse()\n        # return s\n        \n        # s[:] = s[::-1]\n        "
    },
    {
        "number": 345,
        "title": "Reverse Vowels of a String",
        "difficulty": 0,
        "prompt": "class Solution:\n    def reverseVowels(self, s: str) -> str:\n        \"\"\"\n        Given a string s, reverse only all the vowels in the string and return it.\n        The vowels are 'a', 'e', 'i', 'o', and 'u', and they can appear in both lower and upper cases, more than once.\n        Example 1:\n        Input: s = \"hello\"\n        Output: \"holle\"\n        Example 2:\n        Input: s = \"leetcode\"\n        Output: \"leotcede\"\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        vowels = set(['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'])\n        s = list(s)\n        i, j = 0, len(s) - 1\n        while i < j:\n            if s[i] in vowels and s[j] in vowels:\n                s[i], s[j] = s[j], s[i]\n                i += 1\n                j -= 1\n            elif s[i] not in vowels:\n                i += 1\n            elif s[j] not in vowels:\n                j -= 1\n        return ''.join(s)"
    },
    {
        "number": 347,
        "title": "Top K Frequent Elements",
        "difficulty": 1,
        "prompt": "class Solution:\n    def topKFrequent(self, nums: List[int], k: int) -> List[int]:\n        \"\"\"\n        Given an integer array nums and an integer k, return the k most frequent elements. You may return the answer in any order.\n        Example 1:\n        Input: nums = [1,1,1,2,2,3], k = 2\n        Output: [1,2]\n        Example 2:\n        Input: nums = [1], k = 1\n        Output: [1]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        # 1. Create a dictionary with key as the element and value as the count\n        # 2. Create a heap with the size of k\n        # 3. Iterate through the nums and add the count to the dictionary\n        # 4. Pop the top element from the heap and add it to the result list\n        # 5. Return the result list\n        \n        # Time: O(n log k)\n        # Space: O(n)\n        \n        # Dictionary\n        d = {}\n        for num in nums:\n            if num in d:\n                d[num] += 1\n            else:\n                d[num] = 1\n        \n        # Heap\n        heap = []\n        for key, value in d.items():\n            heapq.heappush(heap, (value, key))\n            if len(heap) > k:\n                heapq.heappop(heap)\n        \n        # Result list\n        result = []\n        while heap:\n            result.append(heapq.heappop(heap)[1])\n        \n        return result\n<|endoftext|>"
    },
    {
        "number": 349,
        "title": "Intersection of Two Arrays",
        "difficulty": 0,
        "prompt": "class Solution:\n    def intersection(self, nums1: List[int], nums2: List[int]) -> List[int]:\n        \"\"\"\n        Given two integer arrays nums1 and nums2, return an array of their intersection. Each element in the result must be unique and you may return the result in any order.\n        Example 1:\n        Input: nums1 = [1,2,2,1], nums2 = [2,2]\n        Output: [2]\n        Example 2:\n        Input: nums1 = [4,9,5], nums2 = [9,4,9,8,4]\n        Output: [9,4]\n        Explanation: [4,9] is also accepted.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        # nums1 = set(nums1)\n        # nums2 = set(nums2)\n        # return list(nums1 & nums2)\n        \n        # nums1.sort()\n        # nums2.sort()\n        # i = 0\n        # j = 0\n        # res = []\n        # while i < len(nums1) and j < len(nums2):\n        #     if nums1[i] == nums2[j]:\n        #         res.append(nums1[i])\n        #         i += 1\n        #         j += 1\n        #     elif nums1[i] < nums2[j]:\n        #         i += 1\n        #     else:\n        #         j += 1\n        # return res\n        \n        # nums1.sort()\n        # nums2.sort()\n        # i = 0\n        # j = 0\n        # res = []\n        # while i < len(nums1) and j < len(nums2):\n        #     if nums1[i] == nums2[j]:\n        #         res.append(nums1[i])\n        #         i += 1\n        #         j += 1\n        #     elif num"
    },
    {
        "number": 350,
        "title": "Intersection of Two Arrays II",
        "difficulty": 0,
        "prompt": "class Solution:\n    def intersect(self, nums1: List[int], nums2: List[int]) -> List[int]:\n        \"\"\"\n        Given two integer arrays nums1 and nums2, return an array of their intersection. Each element in the result must appear as many times as it shows in both arrays and you may return the result in any order.\n        Example 1:\n        Input: nums1 = [1,2,2,1], nums2 = [2,2]\n        Output: [2,2]\n        Example 2:\n        Input: nums1 = [4,9,5], nums2 = [9,4,9,8,4]\n        Output: [4,9]\n        Explanation: [9,4] is also accepted.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        # nums1.sort()\n        # nums2.sort()\n        # i = 0\n        # j = 0\n        # res = []\n        # while i < len(nums1) and j < len(nums2):\n        #     if nums1[i] == nums2[j]:\n        #         res.append(nums1[i])\n        #         i += 1\n        #         j += 1\n        #     elif nums1[i] < nums2[j]:\n        #         i += 1\n        #     else:\n        #         j += 1\n        # return res\n        \n        # nums1.sort()\n        # nums2.sort()\n        # i = 0\n        # j = 0\n        # res = []\n        # while i < len(nums1) and j < len(nums2):\n        #     if nums1[i] == nums2[j]:\n        #         res.append(nums1[i])\n        #         i += 1\n        #         j += 1\n        #     elif nums1[i] < nums2[j]:\n        #         i += 1\n        #     else:\n        #         j += 1\n        # return res\n        \n        #"
    },
    {
        "number": 352,
        "title": "Data Stream as Disjoint Intervals",
        "difficulty": 2,
        "prompt": "class SummaryRanges:\n    def __init__(self):\n    def addNum(self, value: int) -> None:\n    def getIntervals(self) -> List[List[int]]:\n        \"\"\"\n        Given a data stream input of non-negative integers a1, a2,..., an, summarize the numbers seen so far as a list of disjoint intervals.\n        Implement the SummaryRanges class:\n            SummaryRanges() Initializes the object with an empty stream.\n            void addNum(int value) Adds the integer value to the stream.\n            int[][] getIntervals() Returns a summary of the integers in the stream currently as a list of disjoint intervals [starti, endi]. The answer should be sorted by starti.\n        Example 1:\n        Input\n        [\"SummaryRanges\", \"addNum\", \"getIntervals\", \"addNum\", \"getIntervals\", \"addNum\", \"getIntervals\", \"addNum\", \"getIntervals\", \"addNum\", \"getIntervals\"]\n        [[], [1], [], [3], [], [7], [], [2], [], [6], []]\n        Output\n        [null, null, [[1, 1]], null, [[1, 1], [3, 3]], null, [[1, 1], [3, 3], [7, 7]], null, [[1, 3], [7, 7]], null, [[1, 3], [6, 7]]]\n        Explanation\n        SummaryRanges summaryRanges = new SummaryRanges();\n        summaryRanges.addNum(1);      // arr = [1]\n        summaryRanges.getIntervals(); // return [[1, 1]]\n        summaryRanges.addNum(3);      // arr = [1, 3]\n        summaryRanges.getIntervals(); // return [[1, 1], [3, 3]]\n        summaryRanges.addNum(7);      // arr = [1, 3, 7]\n        summaryRanges.getIntervals(); // return [[1, 1], [3, 3], [7, 7]]\n        summaryRanges.addNum(2);      // arr = [1, 2, 3, 7]\n        summaryRanges.getIntervals(); // return [[1, 3], [7, 7]]\n        summaryRanges.addNum(6);      // arr = [1, 2, 3, 6, 7]\n        summaryRanges.getIntervals(); // return [[1, 3], [6, 7]]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        self.arr = []\n        self.arr.append(value)\n        self.arr.sort()\n        self.start = self.arr[0]\n        self.end = self.arr[0]\n        self.count = 1\n        self.i = 1\n        while self.i < len(self.arr):\n            if self.arr[self.i] == self.end + 1:\n                self.end = self.arr[self.i]\n                self.count += 1\n            else:\n                self.arr.insert(self.i, self.end + 1)\n                self.arr.insert(self.i, self.start)\n                self.start = self.arr[self.i]\n                self.end = self.arr[self.i]\n                self.count = 1\n            self.i += 2\n        if self.count > 1:\n            self.arr.insert(self.i, self.end + 1)\n            self.arr.insert(self.i, self.start)\n        return self.arr"
    },
    {
        "number": 354,
        "title": "Russian Doll Envelopes",
        "difficulty": 2,
        "prompt": "class Solution:\n    def maxEnvelopes(self, envelopes: List[List[int]]) -> int:\n        \"\"\"\n        You are given a 2D array of integers envelopes where envelopes[i] = [wi, hi] represents the width and the height of an envelope.\n        One envelope can fit into another if and only if both the width and height of one envelope are greater than the other envelope's width and height.\n        Return the maximum number of envelopes you can Russian doll (i.e., put one inside the other).\n        Note: You cannot rotate an envelope.\n        Example 1:\n        Input: envelopes = [[5,4],[6,4],[6,7],[2,3]]\n        Output: 3\n        Explanation: The maximum number of envelopes you can Russian doll is 3 ([2,3] => [5,4] => [6,7]).\n        Example 2:\n        Input: envelopes = [[1,1],[1,1],[1,1]]\n        Output: 1\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        if not envelopes:\n            return 0\n        envelopes.sort(key=lambda x: (x[0], -x[1]))\n        dp = [1] * len(envelopes)\n        for i in range(1, len(envelopes)):\n            for j in range(i):\n                if envelopes[i][0] > envelopes[j][0] and envelopes[i][1] > envelopes[j][1]:\n                    dp[i] = max(dp[i], dp[j] + 1)\n        return max(dp)"
    },
    {
        "number": 355,
        "title": "Design Twitter",
        "difficulty": 1,
        "prompt": "class Twitter:\n    def __init__(self):\n    def postTweet(self, userId: int, tweetId: int) -> None:\n    def getNewsFeed(self, userId: int) -> List[int]:\n    def follow(self, followerId: int, followeeId: int) -> None:\n    def unfollow(self, followerId: int, followeeId: int) -> None:\n        \"\"\"\n        Design a simplified version of Twitter where users can post tweets, follow/unfollow another user, and is able to see the 10 most recent tweets in the user's news feed.\n        Implement the Twitter class:\n            Twitter() Initializes your twitter object.\n            void postTweet(int userId, int tweetId) Composes a new tweet with ID tweetId by the user userId. Each call to this function will be made with a unique tweetId.\n            List<Integer> getNewsFeed(int userId) Retrieves the 10 most recent tweet IDs in the user's news feed. Each item in the news feed must be posted by users who the user followed or by the user themself. Tweets must be ordered from most recent to least recent.\n            void follow(int followerId, int followeeId) The user with ID followerId started following the user with ID followeeId.\n            void unfollow(int followerId, int followeeId) The user with ID followerId started unfollowing the user with ID followeeId.\n        Example 1:\n        Input\n        [\"Twitter\", \"postTweet\", \"getNewsFeed\", \"follow\", \"postTweet\", \"getNewsFeed\", \"unfollow\", \"getNewsFeed\"]\n        [[], [1, 5], [1], [1, 2], [2, 6], [1], [1, 2], [1]]\n        Output\n        [null, null, [5], null, null, [6, 5], null, [5]]\n        Explanation\n        Twitter twitter = new Twitter();\n        twitter.postTweet(1, 5); // User 1 posts a new tweet (id = 5).\n        twitter.getNewsFeed(1);  // User 1's news feed should return a list with 1 tweet id -> [5]. return [5]\n        twitter.follow(1, 2);    // User 1 follows user 2.\n        twitter.postTweet(2, 6); // User 2 posts a new tweet (id = 6).\n        twitter.getNewsFeed(1);  // User 1's news feed should return a list with 2 tweet ids -> [6, 5]. Tweet id 6 should precede tweet id 5 because it is posted after tweet id 5.\n        twitter.unfollow(1, 2);  // User 1 unfollows user 2.\n        twitter.getNewsFeed(1);  // User 1's news feed should return a list with 1 tweet id -> [5], since user 1 is no longer following user 2.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        \"\"\"\n        Runtime:\n        Runtime:\n        The runtime of the postTweet method is O(1)O(1).\n        The runtime of the getNewsFeed method is O(n)O(n) where n is the number of tweets in the user's news feed.\n        The runtime of the follow method is O(1)O(1).\n        The runtime of the unfollow method is O(1)O(1).\n        \"\"\"\n        \"\"\"\n        Space:\n        The space complexity of the postTweet method is O(1)O(1).\n        The space complexity of the getNewsFeed method is O(n)O(n) where n is the number of tweets in the user's news feed.\n        The space complexity of the follow method is O(1)O(1).\n        The space complexity of the unfollow method is O(1)O(1).\n        \"\"\"\n        \"\"\"\n        Follow up:\n        What if the number of users is not limited?\n        What if the number of tweets is not limited?\n        \"\"\"\n        \"\"\"\n        Follow up:\n        What if the user is not allowed to post tweets?\n        What if the user is not allowed to follow/unfollow users?\n        \"\"\"\n        \"\"\"\n        Follow up:\n        What if the user is not allowed to unfollow a user?\n        \"\"\""
    },
    {
        "number": 357,
        "title": "Count Numbers with Unique Digits",
        "difficulty": 1,
        "prompt": "class Solution:\n    def countNumbersWithUniqueDigits(self, n: int) -> int:\n        \"\"\"\n        Given an integer n, return the count of all numbers with unique digits, x, where 0 <= x < 10n.\n        Example 1:\n        Input: n = 2\n        Output: 91\n        Explanation: The answer should be the total numbers in the range of 0 \u2264 x < 100, excluding 11,22,33,44,55,66,77,88,99\n        Example 2:\n        Input: n = 0\n        Output: 1\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        if n == 0:\n            return 1\n        if n == 1:\n            return 10\n        dp = [0] * (n + 1)\n        dp[0] = 1\n        dp[1] = 10\n        for i in range(2, n + 1):\n            dp[i] = dp[i - 1] * (11 - i)\n        return sum(dp)"
    },
    {
        "number": 363,
        "title": "Max Sum of Rectangle No Larger Than K",
        "difficulty": 2,
        "prompt": "class Solution:\n    def maxSumSubmatrix(self, matrix: List[List[int]], k: int) -> int:\n        \"\"\"\n        Given an m x n matrix matrix and an integer k, return the max sum of a rectangle in the matrix such that its sum is no larger than k.\n        It is guaranteed that there will be a rectangle with a sum no larger than k.\n        Example 1:\n        Input: matrix = [[1,0,1],[0,-2,3]], k = 2\n        Output: 2\n        Explanation: Because the sum of the blue rectangle [[0, 1], [-2, 3]] is 2, and 2 is the max number no larger than k (k = 2).\n        Example 2:\n        Input: matrix = [[2,2,-1]], k = 3\n        Output: 3\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        m, n = len(matrix), len(matrix[0])\n        max_sum = float('-inf')\n        for i in range(m):\n            for j in range(n):\n                if i > 0:\n                    matrix[i][j] += matrix[i - 1][j]\n                if j > 0:\n                    matrix[i][j] += matrix[i][j - 1]\n                if i > 0 and j > 0:\n                    matrix[i][j] -= matrix[i - 1][j - 1]\n                max_sum = max(max_sum, matrix[i][j])\n        for i in range(m):\n            for j in range(n):\n                if i + k - 1 < m:\n                    for x in range(i, i + k):\n                        if x > 0:\n                            matrix[x][j] += matrix[x - 1][j]\n                        if j > 0:\n                            matrix[x][j] += matrix[x][j - 1]\n                        if x > 0 and j > 0:\n                            matrix[x][j] -= matrix[x - 1][j - 1]\n                        max_sum = max(max_sum, matrix[x][j])\n                if j + k - 1 < n:\n                    for"
    },
    {
        "number": 365,
        "title": "Water and Jug Problem",
        "difficulty": 1,
        "prompt": "class Solution:\n    def canMeasureWater(self, jug1Capacity: int, jug2Capacity: int, targetCapacity: int) -> bool:\n        \"\"\"\n        You are given two jugs with capacities jug1Capacity and jug2Capacity liters. There is an infinite amount of water supply available. Determine whether it is possible to measure exactly targetCapacity liters using these two jugs.\n        If targetCapacity liters of water are measurable, you must have targetCapacity liters of water contained within one or both buckets by the end.\n        Operations allowed:\n            Fill any of the jugs with water.\n            Empty any of the jugs.\n            Pour water from one jug into another till the other jug is completely full, or the first jug itself is empty.\n        Example 1:\n        Input: jug1Capacity = 3, jug2Capacity = 5, targetCapacity = 4\n        Output: true\n        Explanation: The famous Die Hard example \n        Example 2:\n        Input: jug1Capacity = 2, jug2Capacity = 6, targetCapacity = 5\n        Output: false\n        Example 3:\n        Input: jug1Capacity = 1, jug2Capacity = 2, targetCapacity = 3\n        Output: true\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        # if targetCapacity > max(jug1Capacity, jug2Capacity):\n        #     return False\n        # if targetCapacity == 0:\n        #     return True\n        # if targetCapacity < 0:\n        #     return False\n        # if jug1Capacity == 0 and jug2Capacity == 0:\n        #     return False\n        # if jug1Capacity == 0:\n        #     return targetCapacity == 0\n        # if jug2Capacity == 0:\n        #     return targetCapacity == 0\n        # if jug1Capacity == jug2Capacity:\n        #     return targetCapacity % jug1Capacity == 0\n        # if targetCapacity == 0:\n        #     return True\n        # if jug1Capacity < jug2Capacity:\n        #     return self.canMeasureWater(jug1Capacity, jug2Capacity - jug1Capacity, targetCapacity)\n        # if jug1Capacity > jug2Capacity:\n        #     return self.canMeasureWater(jug2Capacity, jug1Capacity - jug2Capacity, targetCapacity)\n        # return False"
    },
    {
        "number": 367,
        "title": "Valid Perfect Square",
        "difficulty": 0,
        "prompt": "class Solution:\n    def isPerfectSquare(self, num: int) -> bool:\n        \"\"\"\n        Given a positive integer num, return true if num is a perfect square or false otherwise.\n        A perfect square is an integer that is the square of an integer. In other words, it is the product of some integer with itself.\n        You must not use any built-in library function, such as sqrt.\n        Example 1:\n        Input: num = 16\n        Output: true\n        Explanation: We return true because 4 * 4 = 16 and 4 is an integer.\n        Example 2:\n        Input: num = 14\n        Output: false\n        Explanation: We return false because 3.742 * 3.742 = 14 and 3.742 is not an integer.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        if num == 1:\n            return True\n        left, right = 1, num\n        while left <= right:\n            mid = (left + right) // 2\n            if mid * mid == num:\n                return True\n            elif mid * mid < num:\n                left = mid + 1\n            else:\n                right = mid - 1\n        return False"
    },
    {
        "number": 368,
        "title": "Largest Divisible Subset",
        "difficulty": 1,
        "prompt": "class Solution:\n    def largestDivisibleSubset(self, nums: List[int]) -> List[int]:\n        \"\"\"\n        Given a set of distinct positive integers nums, return the largest subset answer such that every pair (answer[i], answer[j]) of elements in this subset satisfies:\n            answer[i] % answer[j] == 0, or\n            answer[j] % answer[i] == 0\n        If there are multiple solutions, return any of them.\n        Example 1:\n        Input: nums = [1,2,3]\n        Output: [1,2]\n        Explanation: [1,3] is also accepted.\n        Example 2:\n        Input: nums = [1,2,4,8]\n        Output: [1,2,4,8]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        nums.sort()\n        dp = [1] * len(nums)\n        max_dp = 1\n        max_index = 0\n        for i in range(1, len(nums)):\n            for j in range(i):\n                if nums[i] % nums[j] == 0 and dp[j] + 1 > dp[i]:\n                    dp[i] = dp[j] + 1\n                    if dp[i] > max_dp:\n                        max_dp = dp[i]\n                        max_index = i\n        return nums[max_index:]"
    },
    {
        "number": 371,
        "title": "Sum of Two Integers",
        "difficulty": 1,
        "prompt": "class Solution:\n    def getSum(self, a: int, b: int) -> int:\n        \"\"\"\n        Given two integers a and b, return the sum of the two integers without using the operators + and -.\n        Example 1:\n        Input: a = 1, b = 2\n        Output: 3\n        Example 2:\n        Input: a = 2, b = 3\n        Output: 5\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        # 32 bits integer max\n        MAX = 0x7FFFFFFF\n        # 32 bits interger min\n        MIN = 0x80000000\n        # mask to get last 32 bits\n        mask = 0xFFFFFFFF\n        while b!= 0:\n            # ^ get different bits and & gets double 1s, << moves carry\n            a, b = (a ^ b) & mask, ((a & b) << 1) & mask\n        # if a is negative, get a's 32 bits complement positive first\n        # then get 32-bit positive's Python complement negative\n        return a if a <= MAX else ~(a ^ mask)\n<|endoftext|>"
    },
    {
        "number": 372,
        "title": "Super Pow",
        "difficulty": 1,
        "prompt": "class Solution:\n    def superPow(self, a: int, b: List[int]) -> int:\n        \"\"\"\n        Your task is to calculate ab mod 1337 where a is a positive integer and b is an extremely large positive integer given in the form of an array.\n        Example 1:\n        Input: a = 2, b = [3]\n        Output: 8\n        Example 2:\n        Input: a = 2, b = [1,0]\n        Output: 1024\n        Example 3:\n        Input: a = 1, b = [4,3,3,8,5,2]\n        Output: 1\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        # \u6211\u7684\u89e3\u6cd5\uff0c\u6bd4\u8f83\u6162\n        # return pow(a, b) % 1337"
    },
    {
        "number": 373,
        "title": "Find K Pairs with Smallest Sums",
        "difficulty": 1,
        "prompt": "class Solution:\n    def kSmallestPairs(self, nums1: List[int], nums2: List[int], k: int) -> List[List[int]]:\n        \"\"\"\n        You are given two integer arrays nums1 and nums2 sorted in ascending order and an integer k.\n        Define a pair (u, v) which consists of one element from the first array and one element from the second array.\n        Return the k pairs (u1, v1), (u2, v2),..., (uk, vk) with the smallest sums.\n        Example 1:\n        Input: nums1 = [1,7,11], nums2 = [2,4,6], k = 3\n        Output: [[1,2],[1,4],[1,6]]\n        Explanation: The first 3 pairs are returned from the sequence: [1,2],[1,4],[1,6],[7,2],[7,4],[11,2],[7,6],[11,4],[11,6]\n        Example 2:\n        Input: nums1 = [1,1,2], nums2 = [1,2,3], k = 2\n        Output: [[1,1],[1,1]]\n        Explanation: The first 2 pairs are returned from the sequence: [1,1],[1,1],[1,2],[2,1],[1,2],[2,2],[1,3],[1,3],[2,3]\n        Example 3:\n        Input: nums1 = [1,2], nums2 = [3], k = 3\n        Output: [[1,3],[2,3]]\n        Explanation: All possible pairs are returned from the sequence: [1,3],[2,3]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        if not nums1 or not nums2:\n            return []\n        if k == 0:\n            return []\n        if k == 1:\n            return [[nums1[0], nums2[0]]]\n        if k == 2:\n            return [[nums1[0], nums2[0]], [nums1[0], nums2[1]], [nums1[1], nums2[0]], [nums1[1], nums2[1]]]"
    },
    {
        "number": 374,
        "title": "Guess Number Higher or Lower",
        "difficulty": 0,
        "prompt": "class Solution:\n    def guessNumber(self, n: int) -> int:\n        \"\"\"\n        We are playing the Guess Game. The game is as follows:\n        I pick a number from 1 to n. You have to guess which number I picked.\n        Every time you guess wrong, I will tell you whether the number I picked is higher or lower than your guess.\n        You call a pre-defined API int guess(int num), which returns three possible results:\n            -1: Your guess is higher than the number I picked (i.e. num > pick).\n            1: Your guess is lower than the number I picked (i.e. num < pick).\n            0: your guess is equal to the number I picked (i.e. num == pick).\n        Return the number that I picked.\n        Example 1:\n        Input: n = 10, pick = 6\n        Output: 6\n        Example 2:\n        Input: n = 1, pick = 1\n        Output: 1\n        Example 3:\n        Input: n = 2, pick = 1\n        Output: 1\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        left, right = 1, n\n        while left <= right:\n            mid = left + (right - left) // 2\n            if guess(mid) == 0:\n                return mid\n            elif guess(mid) == -1:\n                right = mid - 1\n            else:\n                left = mid + 1\n        return -1"
    },
    {
        "number": 375,
        "title": "Guess Number Higher or Lower II",
        "difficulty": 1,
        "prompt": "class Solution:\n    def getMoneyAmount(self, n: int) -> int:\n        \"\"\"\n        We are playing the Guessing Game. The game will work as follows:\n            I pick a number between 1 and n.\n            You guess a number.\n            If you guess the right number, you win the game.\n            If you guess the wrong number, then I will tell you whether the number I picked is higher or lower, and you will continue guessing.\n            Every time you guess a wrong number x, you will pay x dollars. If you run out of money, you lose the game.\n        Given a particular n, return the minimum amount of money you need to guarantee a win regardless of what number I pick.\n        Example 1:\n        Input: n = 10\n        Output: 16\n        Explanation: The winning strategy is as follows:\n        - The range is [1,10]. Guess 7.\n            - If this is my number, your total is $0. Otherwise, you pay $7.\n            - If my number is higher, the range is [8,10]. Guess 9.\n                - If this is my number, your total is $7. Otherwise, you pay $9.\n                - If my number is higher, it must be 10. Guess 10. Your total is $7 + $9 = $16.\n                - If my number is lower, it must be 8. Guess 8. Your total is $7 + $9 = $16.\n            - If my number is lower, the range is [1,6]. Guess 3.\n                - If this is my number, your total is $7. Otherwise, you pay $3.\n                - If my number is higher, the range is [4,6]. Guess 5.\n                    - If this is my number, your total is $7 + $3 = $10. Otherwise, you pay $5.\n                    - If my number is higher, it must be 6. Guess 6. Your total is $7 + $3 + $5 = $15.\n                    - If my number is lower, it must be 4. Guess 4. Your total is $7 + $3 + $5 = $15.\n                - If my number is lower, the range is [1,2]. Guess 1.\n                    - If this is my number, your total is $7 + $3 = $10. Otherwise, you pay $1.\n                    - If my number is higher, it must be 2. Guess 2. Your total is $7 + $3 + $1 = $11.\n        The worst case in all these scenarios is that you pay $16. Hence, you only need $16 to guarantee a win.\n        Example 2:\n        Input: n = 1\n        Output: 0\n        Explanation: There is only one possible number, so you can guess 1 and not have to pay anything.\n        Example 3:\n        Input: n = 2\n        Output: 1\n        Explanation: There are two possible numbers, 1 and 2.\n        - Guess 1.\n            - If this is my number, your total is $0. Otherwise, you pay $1.\n            - If my number is higher, it must be 2. Guess 2. Your total is $1.\n        The worst case is that you pay $1.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        # dp[i][j] = min(dp[i][j-1], dp[i-1][j-1] + max(0, j - i))\n        # dp[i][j] = min(dp[i][j-1], dp[i-1][j-1] + max(0, j - i))\n        # dp[i][j] = min(dp[i][j-1], dp[i-1][j-1] + max(0, j - i))\n        # dp[i][j] = min(dp[i][j-1], dp[i-1][j-1] + max(0, j - i))\n        # dp[i][j] = min(dp[i][j-1], dp[i-1][j-1] + max(0, j - i))\n        # dp[i][j] = min(dp[i][j-1], dp[i-1][j-1] + max(0, j - i))\n        # dp[i][j] = min(dp[i][j-1], dp[i-1][j-1] + max(0, j - i))\n        # dp[i][j] = min(dp"
    },
    {
        "number": 376,
        "title": "Wiggle Subsequence",
        "difficulty": 1,
        "prompt": "class Solution:\n    def wiggleMaxLength(self, nums: List[int]) -> int:\n        \"\"\"\n        A wiggle sequence is a sequence where the differences between successive numbers strictly alternate between positive and negative. The first difference (if one exists) may be either positive or negative. A sequence with one element and a sequence with two non-equal elements are trivially wiggle sequences.\n            For example, [1, 7, 4, 9, 2, 5] is a wiggle sequence because the differences (6, -3, 5, -7, 3) alternate between positive and negative.\n            In contrast, [1, 4, 7, 2, 5] and [1, 7, 4, 5, 5] are not wiggle sequences. The first is not because its first two differences are positive, and the second is not because its last difference is zero.\n        A subsequence is obtained by deleting some elements (possibly zero) from the original sequence, leaving the remaining elements in their original order.\n        Given an integer array nums, return the length of the longest wiggle subsequence of nums.\n        Example 1:\n        Input: nums = [1,7,4,9,2,5]\n        Output: 6\n        Explanation: The entire sequence is a wiggle sequence with differences (6, -3, 5, -7, 3).\n        Example 2:\n        Input: nums = [1,17,5,10,13,15,10,5,16,8]\n        Output: 7\n        Explanation: There are several subsequences that achieve this length.\n        One is [1, 17, 10, 13, 10, 16, 8] with differences (16, -7, 3, -3, 6, -8).\n        Example 3:\n        Input: nums = [1,2,3,4,5,6,7,8,9]\n        Output: 2\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        if len(nums) < 2:\n            return len(nums)\n        up = [1] * len(nums)\n        down = [1] * len(nums)\n        for i in range(1, len(nums)):\n            if nums[i] > nums[i - 1]:\n                up[i] = max(up[i - 1] + 1, down[i - 1])\n                down[i] = down[i - 1]\n            elif nums[i] < nums[i - 1]:\n                down[i] = max(up[i - 1] + 1, down[i - 1])\n                up[i] = up[i - 1]\n            else:\n                down[i] = down[i - 1]\n                up[i] = up[i - 1]\n        return max(up[-1], down[-1])"
    },
    {
        "number": 377,
        "title": "Combination Sum IV",
        "difficulty": 1,
        "prompt": "class Solution:\n    def combinationSum4(self, nums: List[int], target: int) -> int:\n        \"\"\"\n        Given an array of distinct integers nums and a target integer target, return the number of possible combinations that add up to target.\n        The test cases are generated so that the answer can fit in a 32-bit integer.\n        Example 1:\n        Input: nums = [1,2,3], target = 4\n        Output: 7\n        Explanation:\n        The possible combination ways are:\n        (1, 1, 1, 1)\n        (1, 1, 2)\n        (1, 2, 1)\n        (1, 3)\n        (2, 1, 1)\n        (2, 2)\n        (3, 1)\n        Note that different sequences are counted as different combinations.\n        Example 2:\n        Input: nums = [9], target = 3\n        Output: 0\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        # dp[i] = dp[i-1] + dp[i-2] +... + dp[i-nums[i]]\n        # dp[i] = dp[i-1] + dp[i-2] +... + dp[i-nums[i]]\n        # dp[i] = dp[i-1] + dp[i-2] +... + dp[i-nums[i]]\n        # dp[i] = dp[i-1] + dp[i-2] +... + dp[i-nums[i]]\n        # dp[i] = dp[i-1] + dp[i-2] +... + dp[i-nums[i]]\n        # dp[i] = dp[i-1] + dp[i-2] +... + dp[i-nums[i]]\n        # dp[i] = dp[i-1] + dp[i-2] +... + dp[i-nums[i]]\n        # dp[i] = dp[i-1] + dp[i-2] +... + dp[i-nums[i]]\n        # dp"
    },
    {
        "number": 378,
        "title": "Kth Smallest Element in a Sorted Matrix",
        "difficulty": 1,
        "prompt": "class Solution:\n    def kthSmallest(self, matrix: List[List[int]], k: int) -> int:\n        \"\"\"\n        Given an n x n matrix where each of the rows and columns is sorted in ascending order, return the kth smallest element in the matrix.\n        Note that it is the kth smallest element in the sorted order, not the kth distinct element.\n        You must find a solution with a memory complexity better than O(n2).\n        Example 1:\n        Input: matrix = [[1,5,9],[10,11,13],[12,13,15]], k = 8\n        Output: 13\n        Explanation: The elements in the matrix are [1,5,9,10,11,12,13,13,15], and the 8th smallest number is 13\n        Example 2:\n        Input: matrix = [[-5]], k = 1\n        Output: -5\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        # binary search\n        # time complexity: O(nlog(n))\n        # space complexity: O(1)\n        def count(mid):\n            i, j = len(matrix) - 1, 0\n            num = 0\n            while i >= 0 and j < len(matrix):\n                if matrix[i][j] <= mid:\n                    num += i + 1\n                    j += 1\n                else:\n                    i -= 1\n            return num\n        left, right = matrix[0][0], matrix[-1][-1]\n        while left < right:\n            mid = (left + right) // 2\n            if count(mid) >= k:\n                right = mid\n            else:\n                left = mid + 1\n        return left\n<|endoftext|>"
    },
    {
        "number": 380,
        "title": "Insert Delete GetRandom O(1)",
        "difficulty": 1,
        "prompt": "class RandomizedSet:\n    def __init__(self):\n    def insert(self, val: int) -> bool:\n    def remove(self, val: int) -> bool:\n    def getRandom(self) -> int:\n        \"\"\"\n        Implement the RandomizedSet class:\n            RandomizedSet() Initializes the RandomizedSet object.\n            bool insert(int val) Inserts an item val into the set if not present. Returns true if the item was not present, false otherwise.\n            bool remove(int val) Removes an item val from the set if present. Returns true if the item was present, false otherwise.\n            int getRandom() Returns a random element from the current set of elements (it's guaranteed that at least one element exists when this method is called). Each element must have the same probability of being returned.\n        You must implement the functions of the class such that each function works in average O(1) time complexity.\n        Example 1:\n        Input\n        [\"RandomizedSet\", \"insert\", \"remove\", \"insert\", \"getRandom\", \"remove\", \"insert\", \"getRandom\"]\n        [[], [1], [2], [2], [], [1], [2], []]\n        Output\n        [null, true, false, true, 2, true, false, 2]\n        Explanation\n        RandomizedSet randomizedSet = new RandomizedSet();\n        randomizedSet.insert(1); // Inserts 1 to the set. Returns true as 1 was inserted successfully.\n        randomizedSet.remove(2); // Returns false as 2 does not exist in the set.\n        randomizedSet.insert(2); // Inserts 2 to the set, returns true. Set now contains [1,2].\n        randomizedSet.getRandom(); // getRandom() should return either 1 or 2 randomly.\n        randomizedSet.remove(1); // Removes 1 from the set, returns true. Set now contains [2].\n        randomizedSet.insert(2); // 2 was already in the set, so return false.\n        randomizedSet.getRandom(); // Since 2 is the only number in the set, getRandom() will always return 2.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        self.dic = {}\n        self.lst = []\n        self.length = 0\n        return self.insert(val)"
    },
    {
        "number": 381,
        "title": "Insert Delete GetRandom O(1) - Duplicates allowed",
        "difficulty": 2,
        "prompt": "class RandomizedCollection:\n    def __init__(self):\n    def insert(self, val: int) -> bool:\n    def remove(self, val: int) -> bool:\n    def getRandom(self) -> int:\n        \"\"\"\n        RandomizedCollection is a data structure that contains a collection of numbers, possibly duplicates (i.e., a multiset). It should support inserting and removing specific elements and also reporting a random element.\n        Implement the RandomizedCollection class:\n            RandomizedCollection() Initializes the empty RandomizedCollection object.\n            bool insert(int val) Inserts an item val into the multiset, even if the item is already present. Returns true if the item is not present, false otherwise.\n            bool remove(int val) Removes an item val from the multiset if present. Returns true if the item is present, false otherwise. Note that if val has multiple occurrences in the multiset, we only remove one of them.\n            int getRandom() Returns a random element from the current multiset of elements. The probability of each element being returned is linearly related to the number of the same values the multiset contains.\n        You must implement the functions of the class such that each function works on average O(1) time complexity.\n        Note: The test cases are generated such that getRandom will only be called if there is at least one item in the RandomizedCollection.\n        Example 1:\n        Input\n        [\"RandomizedCollection\", \"insert\", \"insert\", \"insert\", \"getRandom\", \"remove\", \"getRandom\"]\n        [[], [1], [1], [2], [], [1], []]\n        Output\n        [null, true, false, true, 2, true, 1]\n        Explanation\n        RandomizedCollection randomizedCollection = new RandomizedCollection();\n        randomizedCollection.insert(1);   // return true since the collection does not contain 1.\n                                          // Inserts 1 into the collection.\n        randomizedCollection.insert(1);   // return false since the collection contains 1.\n                                          // Inserts another 1 into the collection. Collection now contains [1,1].\n        randomizedCollection.insert(2);   // return true since the collection does not contain 2.\n                                          // Inserts 2 into the collection. Collection now contains [1,1,2].\n        randomizedCollection.getRandom(); // getRandom should:\n                                          // - return 1 with probability 2/3, or\n                                          // - return 2 with probability 1/3.\n        randomizedCollection.remove(1);   // return true since the collection contains 1.\n                                          // Removes 1 from the collection. Collection now contains [1,2].\n        randomizedCollection.getRandom(); // getRandom should return 1 or 2, both equally likely.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        self.vals = []\n        self.idx = {}\n        self.count = 0\n        return self.insert(val)"
    },
    {
        "number": 382,
        "title": "Linked List Random Node",
        "difficulty": 1,
        "prompt": "class Solution:\n    def __init__(self, head: Optional[ListNode]):\n    def getRandom(self) -> int:\n        \"\"\"\n        Given a singly linked list, return a random node's value from the linked list. Each node must have the same probability of being chosen.\n        Implement the Solution class:\n            Solution(ListNode head) Initializes the object with the head of the singly-linked list head.\n            int getRandom() Chooses a node randomly from the list and returns its value. All the nodes of the list should be equally likely to be chosen.\n        Example 1:\n        Input\n        [\"Solution\", \"getRandom\", \"getRandom\", \"getRandom\", \"getRandom\", \"getRandom\"]\n        [[[1, 2, 3]], [], [], [], [], []]\n        Output\n        [null, 1, 3, 2, 2, 3]\n        Explanation\n        Solution solution = new Solution([1, 2, 3]);\n        solution.getRandom(); // return 1\n        solution.getRandom(); // return 3\n        solution.getRandom(); // return 2\n        solution.getRandom(); // return 2\n        solution.getRandom(); // return 3\n        // getRandom() should return either 1, 2, or 3 randomly. Each element should have equal probability of returning.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        self.head = head\n        self.n = 0\n        while head:\n            self.n += 1\n            head = head.next\n        self.curr = 0\n        return self.getRandom()"
    },
    {
        "number": 383,
        "title": "Ransom Note",
        "difficulty": 0,
        "prompt": "class Solution:\n    def canConstruct(self, ransomNote: str, magazine: str) -> bool:\n        \"\"\"\n        Given two strings ransomNote and magazine, return true if ransomNote can be constructed by using the letters from magazine and false otherwise.\n        Each letter in magazine can only be used once in ransomNote.\n        Example 1:\n        Input: ransomNote = \"a\", magazine = \"b\"\n        Output: false\n        Example 2:\n        Input: ransomNote = \"aa\", magazine = \"ab\"\n        Output: false\n        Example 3:\n        Input: ransomNote = \"aa\", magazine = \"aab\"\n        Output: true\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        # Time: O(n)\n        # Space: O(n)\n        ransomNote_dict = {}\n        magazine_dict = {}\n        for c in ransomNote:\n            if c not in ransomNote_dict:\n                ransomNote_dict[c] = 1\n            else:\n                ransomNote_dict[c] += 1\n        for c in magazine:\n            if c not in magazine_dict:\n                magazine_dict[c] = 1\n            else:\n                magazine_dict[c] += 1\n        for key in ransomNote_dict:\n            if key not in magazine_dict or ransomNote_dict[key] > magazine_dict[key]:\n                return False\n        return True"
    },
    {
        "number": 384,
        "title": "Shuffle an Array",
        "difficulty": 1,
        "prompt": "class Solution:\n    def __init__(self, nums: List[int]):\n    def reset(self) -> List[int]:\n    def shuffle(self) -> List[int]:\n        \"\"\"\n        Given an integer array nums, design an algorithm to randomly shuffle the array. All permutations of the array should be equally likely as a result of the shuffling.\n        Implement the Solution class:\n            Solution(int[] nums) Initializes the object with the integer array nums.\n            int[] reset() Resets the array to its original configuration and returns it.\n            int[] shuffle() Returns a random shuffling of the array.\n        Example 1:\n        Input\n        [\"Solution\", \"shuffle\", \"reset\", \"shuffle\"]\n        [[[1, 2, 3]], [], [], []]\n        Output\n        [null, [3, 1, 2], [1, 2, 3], [1, 3, 2]]\n        Explanation\n        Solution solution = new Solution([1, 2, 3]);\n        solution.shuffle();    // Shuffle the array [1,2,3] and return its result.\n                               // Any permutation of [1,2,3] must be equally likely to be returned.\n                               // Example: return [3, 1, 2]\n        solution.reset();      // Resets the array back to its original configuration [1,2,3]. Return [1, 2, 3]\n        solution.shuffle();    // Returns the random shuffling of array [1,2,3]. Example: return [1, 3, 2]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        import random\n        nums = self.nums\n        n = len(nums)\n        for i in range(n):\n            j = random.randint(i, n-1)\n            nums[i], nums[j] = nums[j], nums[i]\n        return nums"
    },
    {
        "number": 385,
        "title": "Mini Parser",
        "difficulty": 1,
        "prompt": "        \"\"\"\n        Given a string s represents the serialization of a nested list, implement a parser to deserialize it and return the deserialized NestedInteger.\n        Each element is either an integer or a list whose elements may also be integers or other lists.\n        Example 1:\n        Input: s = \"324\"\n        Output: 324\n        Explanation: You should return a NestedInteger object which contains a single integer 324.\n        Example 2:\n        Input: s = \"[123,[456,[789]]]\"\n        Output: [123,[456,[789]]]\n        Explanation: Return a NestedInteger object containing a nested list with 2 elements:\n        1. An integer containing value 123.\n        2. A nested list containing two elements:\n            i.  An integer containing value 456.\n            ii. A nested list with one element:\n                 a. An integer containing value 789\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        if not s:\n            return NestedInteger()\n        stack = []\n        i = 0\n        while i < len(s):\n            if s[i] == '[':\n                stack.append(NestedInteger())\n                i += 1\n            elif s[i] == ']':\n                if not stack:\n                    break\n                top = stack.pop()\n                i += 1\n                if stack:\n                    stack[-1].add(top)\n            elif s[i] == ',':\n                i += 1\n            else:\n                num = 0\n                while i < len(s) and s[i] in '0123456789':\n                    num = num * 10 + int(s[i])\n                    i += 1\n                if stack:\n                    stack[-1].add(NestedInteger(num))\n        return stack[0]\n<|endoftext|>"
    },
    {
        "number": 386,
        "title": "Lexicographical Numbers",
        "difficulty": 1,
        "prompt": "class Solution:\n    def lexicalOrder(self, n: int) -> List[int]:\n        \"\"\"\n        Given an integer n, return all the numbers in the range [1, n] sorted in lexicographical order.\n        You must write an algorithm that runs in O(n) time and uses O(1) extra space. \n        Example 1:\n        Input: n = 13\n        Output: [1,10,11,12,13,2,3,4,5,6,7,8,9]\n        Example 2:\n        Input: n = 2\n        Output: [1,2]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        # 1. use a stack to store the numbers\n        # 2. use a counter to store the number of digits\n        # 3. use a while loop to iterate the number of digits\n        # 4. if the number of digits is less than the number of digits in n, pop the stack and add the number to the result\n        # 5. if the number of digits is equal to the number of digits in n, pop the stack and add the number to the result\n        # 6. if the number of digits is greater than the number of digits in n, add the number to the stack\n        # 7. return the result\n        \n        # Time: O(n)\n        # Space: O(n)\n        \n        result = []\n        stack = []\n        counter = 1\n        \n        while counter <= n:\n            while counter <= n:\n                stack.append(counter)\n                counter *= 10\n            while stack:\n                result.append(stack.pop())\n                counter //= 10\n            \n            counter = 1\n        \n        return result\n<|endoftext|>"
    },
    {
        "number": 387,
        "title": "First Unique Character in a String",
        "difficulty": 0,
        "prompt": "class Solution:\n    def firstUniqChar(self, s: str) -> int:\n        \"\"\"\n        Given a string s, find the first non-repeating character in it and return its index. If it does not exist, return -1.\n        Example 1:\n        Input: s = \"leetcode\"\n        Output: 0\n        Example 2:\n        Input: s = \"loveleetcode\"\n        Output: 2\n        Example 3:\n        Input: s = \"aabb\"\n        Output: -1\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        # if len(s) == 1:\n        #     return 0\n        # for i in range(len(s)):\n        #     if s.count(s[i]) == 1:\n        #         return i\n        # return -1\n        # if len(s) == 1:\n        #     return 0\n        # for i in range(len(s)):\n        #     if s.count(s[i]) == 1:\n        #         return i\n        # return -1\n        # if len(s) == 1:\n        #     return 0\n        # for i in range(len(s)):\n        #     if s.count(s[i]) == 1:\n        #         return i\n        # return -1\n        # if len(s) == 1:\n        #     return 0\n        # for i in range(len(s)):\n        #     if s.count(s[i]) == 1:\n        #         return i\n        # return -1\n        # if len(s) == 1:\n        #     return 0\n        # for i in range(len(s)):\n        #     if s.count(s[i]) == 1:\n        #         return i\n        # return -1\n        # if len(s) == 1:"
    },
    {
        "number": 388,
        "title": "Longest Absolute File Path",
        "difficulty": 1,
        "prompt": "class Solution:\n    def lengthLongestPath(self, input: str) -> int:\n        \"\"\"\n        Suppose we have a file system that stores both files and directories. An example of one system is represented in the following picture:\n        Here, we have dir as the only directory in the root. dir contains two subdirectories, subdir1 and subdir2. subdir1 contains a file file1.ext and subdirectory subsubdir1. subdir2 contains a subdirectory subsubdir2, which contains a file file2.ext.\n        In text form, it looks like this (with \u27f6 representing the tab character):\n        dir\n        \u27f6 subdir1\n        \u27f6 \u27f6 file1.ext\n        \u27f6 \u27f6 subsubdir1\n        \u27f6 subdir2\n        \u27f6 \u27f6 subsubdir2\n        \u27f6 \u27f6 \u27f6 file2.ext\n        If we were to write this representation in code, it will look like this: \"dir\\n\\tsubdir1\\n\\t\\tfile1.ext\\n\\t\\tsubsubdir1\\n\\tsubdir2\\n\\t\\tsubsubdir2\\n\\t\\t\\tfile2.ext\". Note that the '\\n' and '\\t' are the new-line and tab characters.\n        Every file and directory has a unique absolute path in the file system, which is the order of directories that must be opened to reach the file/directory itself, all concatenated by '/'s. Using the above example, the absolute path to file2.ext is \"dir/subdir2/subsubdir2/file2.ext\". Each directory name consists of letters, digits, and/or spaces. Each file name is of the form name.extension, where name and extension consist of letters, digits, and/or spaces.\n        Given a string input representing the file system in the explained format, return the length of the longest absolute path to a file in the abstracted file system. If there is no file in the system, return 0.\n        Note that the testcases are generated such that the file system is valid and no file or directory name has length 0.\n        Example 1:\n        Input: input = \"dir\\n\\tsubdir1\\n\\tsubdir2\\n\\t\\tfile.ext\"\n        Output: 20\n        Explanation: We have only one file, and the absolute path is \"dir/subdir2/file.ext\" of length 20.\n        Example 2:\n        Input: input = \"dir\\n\\tsubdir1\\n\\t\\tfile1.ext\\n\\t\\tsubsubdir1\\n\\tsubdir2\\n\\t\\tsubsubdir2\\n\\t\\t\\tfile2.ext\"\n        Output: 32\n        Explanation: We have two files:\n        \"dir/subdir1/file1.ext\" of length 21\n        \"dir/subdir2/subsubdir2/file2.ext\" of length 32.\n        We return 32 since it is the longest absolute path to a file.\n        Example 3:\n        Input: input = \"a\"\n        Output: 0\n        Explanation: We do not have any files, just a single directory named \"a\".\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        # split the input into lines\n        lines = input.split('\\n')\n        # initialize the stack\n        stack = []\n        # initialize the longest path length\n        max_len = 0\n        # iterate through the lines\n        for line in lines:\n            # split the line into words\n            words = line.split('\\t')\n            # if the line is a directory\n            if len(words) > 1:\n                # add the directory to the stack\n                stack.append(words[-1])\n            # otherwise\n            else:\n                # get the directory name\n                dir_name = words[0]\n                # get the length of the directory name\n                dir_len = len(dir_name)\n                # iterate through the stack\n                while len(stack) > 0:\n                    # get the current directory name\n                    curr_dir_name = stack.pop()\n                    # get the length of the current directory name\n                    curr_dir_len = len(curr_dir_name)\n                    # if the current directory name is the same as the directory name\n                    if curr_dir_name == dir_name:\n                        # get the length of the current directory\n                        curr_dir_len = len(curr_dir_name)\n                        # get the length of the longest path\n"
    },
    {
        "number": 389,
        "title": "Find the Difference",
        "difficulty": 0,
        "prompt": "class Solution:\n    def findTheDifference(self, s: str, t: str) -> str:\n        \"\"\"\n        You are given two strings s and t.\n        String t is generated by random shuffling string s and then add one more letter at a random position.\n        Return the letter that was added to t.\n        Example 1:\n        Input: s = \"abcd\", t = \"abcde\"\n        Output: \"e\"\n        Explanation: 'e' is the letter that was added.\n        Example 2:\n        Input: s = \"\", t = \"y\"\n        Output: \"y\"\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        # \u601d\u8def\uff1a\n        # 1. \u7528hash\u8868\uff0c\u904d\u5386s\uff0c\u8bb0\u5f55\u6bcf\u4e2a\u5b57\u7b26\u51fa\u73b0\u7684\u6b21\u6570\uff0c\u7136\u540e\u904d\u5386t\uff0c\u5982\u679ct\u4e2d\u6ca1\u6709\uff0c\u5219\u8fd4\u56det\u4e2d\u7684\u5b57\u7b26\n        # 2. \u7528hash\u8868\uff0c\u904d\u5386s\uff0c\u8bb0\u5f55\u6bcf\u4e2a\u5b57\u7b26\u51fa\u73b0\u7684\u6b21\u6570\uff0c\u7136\u540e\u904d\u5386t\uff0c\u5982\u679ct\u4e2d\u6709\uff0c\u5219\u8fd4\u56det\u4e2d\u7684\u5b57\u7b26\n        # 3. \u7528hash\u8868\uff0c\u904d\u5386s\uff0c\u8bb0\u5f55\u6bcf\u4e2a\u5b57\u7b26\u51fa\u73b0\u7684\u6b21\u6570\uff0c\u7136\u540e\u904d\u5386t\uff0c\u5982\u679ct\u4e2d\u6709\uff0c\u5219\u8fd4\u56det\u4e2d\u7684\u5b57\u7b26\n        # 4. \u7528hash\u8868\uff0c\u904d\u5386s"
    },
    {
        "number": 390,
        "title": "Elimination Game",
        "difficulty": 1,
        "prompt": "class Solution:\n    def lastRemaining(self, n: int) -> int:\n        \"\"\"\n        You have a list arr of all integers in the range [1, n] sorted in a strictly increasing order. Apply the following algorithm on arr:\n            Starting from left to right, remove the first number and every other number afterward until you reach the end of the list.\n            Repeat the previous step again, but this time from right to left, remove the rightmost number and every other number from the remaining numbers.\n            Keep repeating the steps again, alternating left to right and right to left, until a single number remains.\n        Given the integer n, return the last number that remains in arr.\n        Example 1:\n        Input: n = 9\n        Output: 6\n        Explanation:\n        arr = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n        arr = [2, 4, 6, 8]\n        arr = [2, 6]\n        arr = [6]\n        Example 2:\n        Input: n = 1\n        Output: 1\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        # \u601d\u8def\uff1a\u6bcf\u6b21\u4ece\u5de6\u5230\u53f3\u6216\u8005\u4ece\u53f3\u5230\u5de6\u90fd\u662f\u4e00\u6837\u7684\uff0c\u53ea\u4e0d\u8fc7\u662f\u4ece\u5de6\u5230\u53f3\u6216\u8005\u4ece\u53f3\u5230\u5de6\u7684\u65f6\u5019\uff0c\u9700\u8981\u5220\u9664\u7684\u662f\u5de6\u8fb9\u7684\u6216\u8005\u53f3\u8fb9\u7684\n        # \u6240\u4ee5\u6700\u540e\u5269\u4e0b\u7684\u5c31\u662f\u4ece\u5de6\u5230\u53f3\u6216\u8005\u4ece\u53f3\u5230\u5de6\u7684\u7b2c\u4e00\u4e2a\u6570\n        # \u5982\u679cn\u4e3a\u5076\u6570\uff0c\u90a3\u4e48\u4ece\u5de6\u5230\u53f3\u6216\u8005\u4ece\u53f3\u5230\u5de6\u90fd\u662f\u4e00\u6837\u7684\uff0c\u53ea\u4e0d\u8fc7\u662f\u4ece\u5de6\u5230\u53f3\u6216\u8005\u4ece\u53f3\u5230\u5de6\u7684\u65f6\u5019\uff0c\u9700\u8981\u5220\u9664\u7684\u662f\u5de6\u8fb9\u7684\n        # \u6240\u4ee5\u6700\u540e\u5269\u4e0b\u7684\u5c31\u662f\u4ece\u53f3\u5230\u5de6\u6216\u8005\u4ece\u5de6\u5230\u53f3"
    },
    {
        "number": 391,
        "title": "Perfect Rectangle",
        "difficulty": 2,
        "prompt": "class Solution:\n    def isRectangleCover(self, rectangles: List[List[int]]) -> bool:\n        \"\"\"\n        Given an array rectangles where rectangles[i] = [xi, yi, ai, bi] represents an axis-aligned rectangle. The bottom-left point of the rectangle is (xi, yi) and the top-right point of it is (ai, bi).\n        Return true if all the rectangles together form an exact cover of a rectangular region.\n        Example 1:\n        Input: rectangles = [[1,1,3,3],[3,1,4,2],[3,2,4,4],[1,3,2,4],[2,3,3,4]]\n        Output: true\n        Explanation: All 5 rectangles together form an exact cover of a rectangular region.\n        Example 2:\n        Input: rectangles = [[1,1,2,3],[1,3,2,4],[3,1,4,2],[3,2,4,4]]\n        Output: false\n        Explanation: Because there is a gap between the two rectangular regions.\n        Example 3:\n        Input: rectangles = [[1,1,3,3],[3,1,4,2],[1,3,2,4],[2,2,4,4]]\n        Output: false\n        Explanation: Because two of the rectangles overlap with each other.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        # \u5148\u6392\u5e8f\uff0c\u7136\u540e\u6bd4\u8f83\u6bcf\u4e2a\u77e9\u5f62\u7684\u5de6\u4e0b\u89d2\u548c\u53f3\u4e0a\u89d2\u662f\u5426\u76f8\u7b49\n        # \u6bd4\u8f83\u7b2c\u4e00\u4e2a\u77e9\u5f62\u7684\u5de6\u4e0b\u89d2\u548c\u53f3\u4e0a\u89d2\u662f\u5426\u76f8\u7b49\n        # \u6bd4\u8f83\u7b2c\u4e8c\u4e2a\u77e9\u5f62\u7684\u5de6\u4e0b\u89d2\u548c\u53f3\u4e0a\u89d2\u662f\u5426\u76f8\u7b49\n        # \u6bd4\u8f83\u7b2c\u4e09\u4e2a\u77e9\u5f62\u7684\u5de6\u4e0b\u89d2\u548c\u53f3\u4e0a\u89d2\u662f\u5426\u76f8\u7b49\n        # \u6bd4\u8f83\u7b2c\u56db\u4e2a\u77e9\u5f62\u7684\u5de6\u4e0b\u89d2\u548c\u53f3\u4e0a\u89d2\u662f\u5426\u76f8\u7b49\n        # \u5982\u679c\u6700\u540e\u4e00\u4e2a\u77e9\u5f62\u7684\u5de6\u4e0b\u89d2\u548c\u53f3\u4e0a\u89d2\u662f\u5426\u76f8\u7b49\uff0c\u90a3\u4e48\u5c31\u662f\u6ee1"
    },
    {
        "number": 392,
        "title": "Is Subsequence",
        "difficulty": 0,
        "prompt": "class Solution:\n    def isSubsequence(self, s: str, t: str) -> bool:\n        \"\"\"\n        Given two strings s and t, return true if s is a subsequence of t, or false otherwise.\n        A subsequence of a string is a new string that is formed from the original string by deleting some (can be none) of the characters without disturbing the relative positions of the remaining characters. (i.e., \"ace\" is a subsequence of \"abcde\" while \"aec\" is not).\n        Example 1:\n        Input: s = \"abc\", t = \"ahbgdc\"\n        Output: true\n        Example 2:\n        Input: s = \"axc\", t = \"ahbgdc\"\n        Output: false\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        if not s:\n            return True\n        if not t:\n            return False\n        if len(s) > len(t):\n            return False\n        i, j = 0, 0\n        while i < len(s) and j < len(t):\n            if s[i] == t[j]:\n                i += 1\n            j += 1\n        return i == len(s)"
    },
    {
        "number": 393,
        "title": "UTF-8 Validation",
        "difficulty": 1,
        "prompt": "class Solution:\n    def validUtf8(self, data: List[int]) -> bool:\n        \"\"\"\n        Given an integer array data representing the data, return whether it is a valid UTF-8 encoding (i.e. it translates to a sequence of valid UTF-8 encoded characters).\n        A character in UTF8 can be from 1 to 4 bytes long, subjected to the following rules:\n            For a 1-byte character, the first bit is a 0, followed by its Unicode code.\n            For an n-bytes character, the first n bits are all one's, the n + 1 bit is 0, followed by n - 1 bytes with the most significant 2 bits being 10.\n        This is how the UTF-8 encoding would work:\n             Number of Bytes   |        UTF-8 Octet Sequence\n                               |              (binary)\n           --------------------+-----------------------------------------\n                    1          |   0xxxxxxx\n                    2          |   110xxxxx 10xxxxxx\n                    3          |   1110xxxx 10xxxxxx 10xxxxxx\n                    4          |   11110xxx 10xxxxxx 10xxxxxx 10xxxxxx\n        x denotes a bit in the binary form of a byte that may be either 0 or 1.\n        Note: The input is an array of integers. Only the least significant 8 bits of each integer is used to store the data. This means each integer represents only 1 byte of data.\n        Example 1:\n        Input: data = [197,130,1]\n        Output: true\n        Explanation: data represents the octet sequence: 11000101 10000010 00000001.\n        It is a valid utf-8 encoding for a 2-bytes character followed by a 1-byte character.\n        Example 2:\n        Input: data = [235,140,4]\n        Output: false\n        Explanation: data represented the octet sequence: 11101011 10001100 00000100.\n        The first 3 bits are all one's and the 4th bit is 0 means it is a 3-bytes character.\n        The next byte is a continuation byte which starts with 10 and that's correct.\n        But the second continuation byte does not start with 10, so it is invalid.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        # Time  complexity: O(n)\n        # Space complexity: O(1)\n        # n = len(data)\n        # i = 0\n        # while i < n:\n        #     if i + 1 < n and data[i] & 0b11100000 == 0b11000000:\n        #         if data[i + 1] & 0b11100000!= 0b11100000:\n        #             return False\n        #         i += 2\n        #     elif i + 2 < n and data[i] & 0b11110000 == 0b11100000:\n        #         if data[i + 1] & 0b11100000!= 0b11100000:\n        #             return False\n        #         if data[i + 2] & 0b11111000!= 0b11100000:\n        #             return False\n        #         i += 3\n        #     elif i + 3 < n and data[i] & 0b11111100 == 0b11100000:\n        #         if data[i + 1] & 0b11100000!= 0b11100000:\n        #             return False\n        #         if data[i + 2] & 0b11100000!= 0b11100000:\n        #             return False\n        #         if data[i + 3"
    },
    {
        "number": 394,
        "title": "Decode String",
        "difficulty": 1,
        "prompt": "class Solution:\n    def decodeString(self, s: str) -> str:\n        \"\"\"\n        Given an encoded string, return its decoded string.\n        The encoding rule is: k[encoded_string], where the encoded_string inside the square brackets is being repeated exactly k times. Note that k is guaranteed to be a positive integer.\n        You may assume that the input string is always valid; there are no extra white spaces, square brackets are well-formed, etc. Furthermore, you may assume that the original data does not contain any digits and that digits are only for those repeat numbers, k. For example, there will not be input like 3a or 2[4].\n        The test cases are generated so that the length of the output will never exceed 105.\n        Example 1:\n        Input: s = \"3[a]2[bc]\"\n        Output: \"aaabcbc\"\n        Example 2:\n        Input: s = \"3[a2[c]]\"\n        Output: \"accaccacc\"\n        Example 3:\n        Input: s = \"2[abc]3[cd]ef\"\n        Output: \"abcabccdcdcdef\"\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        stack = []\n        for c in s:\n            if c == ']':\n                sub_str = ''\n                while stack[-1]!= '[':\n                    sub_str = stack.pop() + sub_str\n                stack.pop()\n                num = ''\n                while stack and stack[-1].isdigit():\n                    num = stack.pop() + num\n                stack.append(sub_str * int(num))\n            else:\n                stack.append(c)\n        return ''.join(stack)"
    },
    {
        "number": 395,
        "title": "Longest Substring with At Least K Repeating Characters",
        "difficulty": 1,
        "prompt": "class Solution:\n    def longestSubstring(self, s: str, k: int) -> int:\n        \"\"\"\n        Given a string s and an integer k, return the length of the longest substring of s such that the frequency of each character in this substring is greater than or equal to k.\n        Example 1:\n        Input: s = \"aaabb\", k = 3\n        Output: 3\n        Explanation: The longest substring is \"aaa\", as 'a' is repeated 3 times.\n        Example 2:\n        Input: s = \"ababbc\", k = 2\n        Output: 5\n        Explanation: The longest substring is \"ababb\", as 'a' is repeated 2 times and 'b' is repeated 3 times.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        if len(s) < k:\n            return 0\n        for c in set(s):\n            if s.count(c) < k:\n                return max(self.longestSubstring(t, k) for t in s.split(c))\n        return len(s)"
    },
    {
        "number": 396,
        "title": "Rotate Function",
        "difficulty": 1,
        "prompt": "class Solution:\n    def maxRotateFunction(self, nums: List[int]) -> int:\n        \"\"\"\n        You are given an integer array nums of length n.\n        Assume arrk to be an array obtained by rotating nums by k positions clock-wise. We define the rotation function F on nums as follow:\n            F(k) = 0 * arrk[0] + 1 * arrk[1] +... + (n - 1) * arrk[n - 1].\n        Return the maximum value of F(0), F(1),..., F(n-1).\n        The test cases are generated so that the answer fits in a 32-bit integer.\n        Example 1:\n        Input: nums = [4,3,2,6]\n        Output: 26\n        Explanation:\n        F(0) = (0 * 4) + (1 * 3) + (2 * 2) + (3 * 6) = 0 + 3 + 4 + 18 = 25\n        F(1) = (0 * 6) + (1 * 4) + (2 * 3) + (3 * 2) = 0 + 4 + 6 + 6 = 16\n        F(2) = (0 * 2) + (1 * 6) + (2 * 4) + (3 * 3) = 0 + 6 + 8 + 9 = 23\n        F(3) = (0 * 3) + (1 * 2) + (2 * 6) + (3 * 4) = 0 + 2 + 12 + 12 = 26\n        So the maximum value of F(0), F(1), F(2), F(3) is F(3) = 26.\n        Example 2:\n        Input: nums = [100]\n        Output: 0\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        # \u8fd9\u9053\u9898\u7684\u5173\u952e\u662f\u8981\u628a\u6240\u6709\u7684\u6570\u90fd\u53d8\u6210\u4e00\u4e2a\u6570\uff0c\u7136\u540e\u6c42\u51fa\u8fd9\u4e2a\u6570\u7684\u6700\u5927\u503c\n        # \u5176\u5b9e\u5c31\u662f\u6c42\u51fa\u6570\u7ec4\u4e2d\u7684\u6700\u5c0f\u503c\uff0c\u7136\u540e\u628a\u6240\u6709\u6570\u90fd\u51cf\u53bb\u8fd9\u4e2a\u6700\u5c0f\u503c\uff0c\u7136\u540e\u6c42\u51fa\u8fd9\u4e2a\u6570\u7684\u6700\u5927\u503c\n        # \u5176\u5b9e\u5c31\u662f\u6c42\u51fa\u6570\u7ec4\u4e2d\u7684\u6700\u5c0f\u503c\uff0c\u7136\u540e\u628a\u6240\u6709\u6570\u90fd\u51cf\u53bb\u8fd9\u4e2a\u6700\u5c0f\u503c\uff0c\u7136\u540e\u6c42\u51fa\u8fd9\u4e2a\u6570\u7684\u6700\u5927\u503c\n        # \u5176\u5b9e\u5c31\u662f\u6c42\u51fa\u6570\u7ec4\u4e2d\u7684\u6700\u5c0f\u503c\uff0c\u7136\u540e\u628a\u6240\u6709\u6570\u90fd\u51cf\u53bb\u8fd9\u4e2a\u6700\ufffd"
    },
    {
        "number": 397,
        "title": "Integer Replacement",
        "difficulty": 1,
        "prompt": "class Solution:\n    def integerReplacement(self, n: int) -> int:\n        \"\"\"\n        Given a positive integer n, you can apply one of the following operations:\n            If n is even, replace n with n / 2.\n            If n is odd, replace n with either n + 1 or n - 1.\n        Return the minimum number of operations needed for n to become 1.\n        Example 1:\n        Input: n = 8\n        Output: 3\n        Explanation: 8 -> 4 -> 2 -> 1\n        Example 2:\n        Input: n = 7\n        Output: 4\n        Explanation: 7 -> 8 -> 4 -> 2 -> 1\n        or 7 -> 6 -> 3 -> 2 -> 1\n        Example 3:\n        Input: n = 4\n        Output: 2\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        # dp[i] = min steps to reach 1\n        # dp[i] = min(dp[i//2], dp[i-1], dp[i+1]) + 1\n        # dp[i] = min(dp[i//2] + 1, dp[i-1] + 1, dp[i+1] + 1)\n        # dp[i] = min(dp[i//2] + 1, dp[i-1] + 1, dp[i+1] + 1)\n        # dp[i] = min(dp[i//2] + 1, dp[i-1] + 1, dp[i+1] + 1)\n        # dp[i] = min(dp[i//2] + 1, dp[i-1] + 1, dp[i+1] + 1)\n        # dp[i] = min(dp[i//2] + 1, dp[i-1] + 1, dp[i+1] + 1)\n        # dp[i] = min(dp[i//2] + 1, dp[i-1] + 1, dp[i+1] + 1)\n        # dp[i] = min(dp[i"
    },
    {
        "number": 398,
        "title": "Random Pick Index",
        "difficulty": 1,
        "prompt": "class Solution:\n    def __init__(self, nums: List[int]):\n    def pick(self, target: int) -> int:\n        \"\"\"\n        Given an integer array nums with possible duplicates, randomly output the index of a given target number. You can assume that the given target number must exist in the array.\n        Implement the Solution class:\n            Solution(int[] nums) Initializes the object with the array nums.\n            int pick(int target) Picks a random index i from nums where nums[i] == target. If there are multiple valid i's, then each index should have an equal probability of returning.\n        Example 1:\n        Input\n        [\"Solution\", \"pick\", \"pick\", \"pick\"]\n        [[[1, 2, 3, 3, 3]], [3], [1], [3]]\n        Output\n        [null, 4, 0, 2]\n        Explanation\n        Solution solution = new Solution([1, 2, 3, 3, 3]);\n        solution.pick(3); // It should return either index 2, 3, or 4 randomly. Each index should have equal probability of returning.\n        solution.pick(1); // It should return 0. Since in the array only nums[0] is equal to 1.\n        solution.pick(3); // It should return either index 2, 3, or 4 randomly. Each index should have equal probability of returning.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        # Solution 1: Reservoir Sampling\n        # Reservoir sampling is a technique to randomly select a sample of elements from a stream of elements.\n        # The idea is to use a data structure that has a fixed size and store all the elements.\n        # Then, when the size of the data structure is full, we randomly choose a sample from the data structure.\n        # The probability of choosing a particular element is proportional to the frequency of the element.\n        # Time: O(n)\n        # Space: O(n)\n        # n = len(nums)\n        # if n == 0:\n        #     return -1\n        # freq = {}\n        # for i in range(n):\n        #     if nums[i] in freq:\n        #         freq[nums[i]] += 1\n        #     else:\n        #         freq[nums[i]] = 1\n        # for i in range(n):\n        #     if freq[nums[i]] > 0:\n        #         freq[nums[i]] -= 1\n        #         if random.randint(0, n - 1) == 0:\n        #             return i\n        # return -1"
    },
    {
        "number": 399,
        "title": "Evaluate Division",
        "difficulty": 1,
        "prompt": "class Solution:\n    def calcEquation(self, equations: List[List[str]], values: List[float], queries: List[List[str]]) -> List[float]:\n        \"\"\"\n        You are given an array of variable pairs equations and an array of real numbers values, where equations[i] = [Ai, Bi] and values[i] represent the equation Ai / Bi = values[i]. Each Ai or Bi is a string that represents a single variable.\n        You are also given some queries, where queries[j] = [Cj, Dj] represents the jth query where you must find the answer for Cj / Dj =?.\n        Return the answers to all queries. If a single answer cannot be determined, return -1.0.\n        Note: The input is always valid. You may assume that evaluating the queries will not result in division by zero and that there is no contradiction.\n        Example 1:\n        Input: equations = [[\"a\",\"b\"],[\"b\",\"c\"]], values = [2.0,3.0], queries = [[\"a\",\"c\"],[\"b\",\"a\"],[\"a\",\"e\"],[\"a\",\"a\"],[\"x\",\"x\"]]\n        Output: [6.00000,0.50000,-1.00000,1.00000,-1.00000]\n        Explanation: \n        Given: a / b = 2.0, b / c = 3.0\n        queries are: a / c =?, b / a =?, a / e =?, a / a =?, x / x =?\n        return: [6.0, 0.5, -1.0, 1.0, -1.0 ]\n        Example 2:\n        Input: equations = [[\"a\",\"b\"],[\"b\",\"c\"],[\"bc\",\"cd\"]], values = [1.5,2.5,5.0], queries = [[\"a\",\"c\"],[\"c\",\"b\"],[\"bc\",\"cd\"],[\"cd\",\"bc\"]]\n        Output: [3.75000,0.40000,5.00000,0.20000]\n        Example 3:\n        Input: equations = [[\"a\",\"b\"]], values = [0.5], queries = [[\"a\",\"b\"],[\"b\",\"a\"],[\"a\",\"c\"],[\"x\",\"y\"]]\n        Output: [0.50000,2.00000,-1.00000,-1.00000]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        # build graph\n        graph = collections.defaultdict(dict)\n        for (x, y), v in zip(equations, values):\n            graph[x][y] = v\n            graph[y][x] = 1.0 / v\n        \n        # dfs\n        def dfs(x, y, visited):\n            if x == y:\n                return 1.0\n            visited.add(x)\n            for nx in graph[x]:\n                if nx in visited:\n                    continue\n                v = dfs(nx, y, visited)\n                if v:\n                    return v * graph[x][nx]\n            return None\n        \n        # query\n        res = []\n        for x, y in queries:\n            if x not in graph or y not in graph:\n                res.append(-1.0)\n            elif x == y:\n                res.append(1.0)\n            else:\n                visited = set()\n                v = dfs(x, y, visited)\n                if v:\n                    res.append(v)\n                else:\n                    res.append(-1.0)\n        return res\n    \n    def calcEquation_dfs(self, equations: List[List[str]], values: List[float], queries:"
    },
    {
        "number": 400,
        "title": "Nth Digit",
        "difficulty": 1,
        "prompt": "class Solution:\n    def findNthDigit(self, n: int) -> int:\n        \"\"\"\n        Given an integer n, return the nth digit of the infinite integer sequence [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11,...].\n        Example 1:\n        Input: n = 3\n        Output: 3\n        Example 2:\n        Input: n = 11\n        Output: 0\n        Explanation: The 11th digit of the sequence 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11,... is a 0, which is part of the number 10.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        if n < 10:\n            return n\n        digit = 1\n        while n > 9 * digit * 10 ** (digit - 1):\n            n -= 9 * digit * 10 ** (digit - 1)\n            digit += 1\n        num = 10 ** (digit - 1) + n // digit - 1\n        return int(str(num)[n % digit])"
    },
    {
        "number": 401,
        "title": "Binary Watch",
        "difficulty": 0,
        "prompt": "class Solution:\n    def readBinaryWatch(self, turnedOn: int) -> List[str]:\n        \"\"\"\n        A binary watch has 4 LEDs on the top to represent the hours (0-11), and 6 LEDs on the bottom to represent the minutes (0-59). Each LED represents a zero or one, with the least significant bit on the right.\n            For example, the below binary watch reads \"4:51\".\n        Given an integer turnedOn which represents the number of LEDs that are currently on (ignoring the PM), return all possible times the watch could represent. You may return the answer in any order.\n        The hour must not contain a leading zero.\n            For example, \"01:00\" is not valid. It should be \"1:00\".\n        The minute must be consist of two digits and may contain a leading zero.\n            For example, \"10:2\" is not valid. It should be \"10:02\".\n        Example 1:\n        Input: turnedOn = 1\n        Output: [\"0:01\",\"0:02\",\"0:04\",\"0:08\",\"0:16\",\"0:32\",\"1:00\",\"2:00\",\"4:00\",\"8:00\"]\n        Example 2:\n        Input: turnedOn = 9\n        Output: []\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        res = []\n        for i in range(12):\n            for j in range(60):\n                if bin(i).count('1') + bin(j).count('1') == turnedOn:\n                    res.append(f'{i}:{j:02}')\n        return res"
    },
    {
        "number": 402,
        "title": "Remove K Digits",
        "difficulty": 1,
        "prompt": "class Solution:\n    def removeKdigits(self, num: str, k: int) -> str:\n        \"\"\"\n        Given string num representing a non-negative integer num, and an integer k, return the smallest possible integer after removing k digits from num.\n        Example 1:\n        Input: num = \"1432219\", k = 3\n        Output: \"1219\"\n        Explanation: Remove the three digits 4, 3, and 2 to form the new number 1219 which is the smallest.\n        Example 2:\n        Input: num = \"10200\", k = 1\n        Output: \"200\"\n        Explanation: Remove the leading 1 and the number is 200. Note that the output must not contain leading zeroes.\n        Example 3:\n        Input: num = \"10\", k = 2\n        Output: \"0\"\n        Explanation: Remove all the digits from the number and it is left with nothing which is 0.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        if k == len(num):\n            return \"0\"\n        if k == 0:\n            return num\n        stack = []\n        for i in num:\n            while k > 0 and stack and stack[-1] > i:\n                stack.pop()\n                k -= 1\n            stack.append(i)\n        while k > 0:\n            stack.pop()\n            k -= 1\n        return \"\".join(stack).lstrip(\"0\") or \"0\""
    },
    {
        "number": 403,
        "title": "Frog Jump",
        "difficulty": 2,
        "prompt": "class Solution:\n    def canCross(self, stones: List[int]) -> bool:\n        \"\"\"\n        A frog is crossing a river. The river is divided into some number of units, and at each unit, there may or may not exist a stone. The frog can jump on a stone, but it must not jump into the water.\n        Given a list of stones' positions (in units) in sorted ascending order, determine if the frog can cross the river by landing on the last stone. Initially, the frog is on the first stone and assumes the first jump must be 1 unit.\n        If the frog's last jump was k units, its next jump must be either k - 1, k, or k + 1 units. The frog can only jump in the forward direction.\n        Example 1:\n        Input: stones = [0,1,3,5,6,8,12,17]\n        Output: true\n        Explanation: The frog can jump to the last stone by jumping 1 unit to the 2nd stone, then 2 units to the 3rd stone, then 2 units to the 4th stone, then 3 units to the 6th stone, 4 units to the 7th stone, and 5 units to the 8th stone.\n        Example 2:\n        Input: stones = [0,1,2,3,4,8,9,11]\n        Output: false\n        Explanation: There is no way to jump to the last stone as the gap between the 5th and 6th stone is too large.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        # dp[i] = dp[i-1] or dp[i-2] or dp[i-3]\n        # dp[i] = dp[i-1] and (stones[i] - stones[i-1] == 1)\n        # dp[i] = dp[i-2] and (stones[i] - stones[i-2] == 2)\n        # dp[i] = dp[i-3] and (stones[i] - stones[i-3] == 3)\n        # dp[i] = False\n        # stones = [0,1,2,3,4,8,9,11]\n        # dp = [False, False, False, False, False, False, False, False]\n        # dp[0] = True\n        # dp[1] = True\n        # dp[2] = True\n        # dp[3] = True\n        # dp[4] = True\n        # dp[5] = True\n        # dp[6] = True\n        # dp[7] = True\n        # dp[8] = True\n        # dp[9] = True\n        # dp[10] = True\n        # dp[11]"
    },
    {
        "number": 404,
        "title": "Sum of Left Leaves",
        "difficulty": 0,
        "prompt": "class Solution:\n    def sumOfLeftLeaves(self, root: Optional[TreeNode]) -> int:\n        \"\"\"\n        Given the root of a binary tree, return the sum of all left leaves.\n        A leaf is a node with no children. A left leaf is a leaf that is the left child of another node.\n        Example 1:\n        Input: root = [3,9,20,null,null,15,7]\n        Output: 24\n        Explanation: There are two left leaves in the binary tree, with values 9 and 15 respectively.\n        Example 2:\n        Input: root = [1]\n        Output: 0\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        if not root:\n            return 0\n        if root.left and not root.left.left and not root.left.right:\n            return root.left.val + self.sumOfLeftLeaves(root.right)\n        return self.sumOfLeftLeaves(root.left) + self.sumOfLeftLeaves(root.right)\n<|endoftext|>"
    },
    {
        "number": 405,
        "title": "Convert a Number to Hexadecimal",
        "difficulty": 0,
        "prompt": "class Solution:\n    def toHex(self, num: int) -> str:\n        \"\"\"\n        Given an integer num, return a string representing its hexadecimal representation. For negative integers, two\u2019s complement method is used.\n        All the letters in the answer string should be lowercase characters, and there should not be any leading zeros in the answer except for the zero itself.\n        Note: You are not allowed to use any built-in library method to directly solve this problem.\n        Example 1:\n        Input: num = 26\n        Output: \"1a\"\n        Example 2:\n        Input: num = -1\n        Output: \"ffffffff\"\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        if num == 0:\n            return \"0\"\n        elif num < 0:\n            num = 2 ** 32 + num\n        res = \"\"\n        while num > 0:\n            res = str(num % 16) + res\n            num //= 16\n        return res"
    },
    {
        "number": 406,
        "title": "Queue Reconstruction by Height",
        "difficulty": 1,
        "prompt": "class Solution:\n    def reconstructQueue(self, people: List[List[int]]) -> List[List[int]]:\n        \"\"\"\n        You are given an array of people, people, which are the attributes of some people in a queue (not necessarily in order). Each people[i] = [hi, ki] represents the ith person of height hi with exactly ki other people in front who have a height greater than or equal to hi.\n        Reconstruct and return the queue that is represented by the input array people. The returned queue should be formatted as an array queue, where queue[j] = [hj, kj] is the attributes of the jth person in the queue (queue[0] is the person at the front of the queue).\n        Example 1:\n        Input: people = [[7,0],[4,4],[7,1],[5,0],[6,1],[5,2]]\n        Output: [[5,0],[7,0],[5,2],[6,1],[4,4],[7,1]]\n        Explanation:\n        Person 0 has height 5 with no other people taller or the same height in front.\n        Person 1 has height 7 with no other people taller or the same height in front.\n        Person 2 has height 5 with two persons taller or the same height in front, which is person 0 and 1.\n        Person 3 has height 6 with one person taller or the same height in front, which is person 1.\n        Person 4 has height 4 with four people taller or the same height in front, which are people 0, 1, 2, and 3.\n        Person 5 has height 7 with one person taller or the same height in front, which is person 1.\n        Hence [[5,0],[7,0],[5,2],[6,1],[4,4],[7,1]] is the reconstructed queue.\n        Example 2:\n        Input: people = [[6,0],[5,0],[4,0],[3,2],[2,2],[1,4]]\n        Output: [[4,0],[5,0],[2,2],[3,2],[1,4],[6,0]]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        people.sort(key=lambda x: (-x[0], x[1]))\n        res = []\n        for p in people:\n            res.insert(p[1], p)\n        return res\n<|endoftext|>"
    },
    {
        "number": 407,
        "title": "Trapping Rain Water II",
        "difficulty": 2,
        "prompt": "class Solution:\n    def trapRainWater(self, heightMap: List[List[int]]) -> int:\n        \"\"\"\n        Given an m x n integer matrix heightMap representing the height of each unit cell in a 2D elevation map, return the volume of water it can trap after raining.\n        Example 1:\n        Input: heightMap = [[1,4,3,1,3,2],[3,2,1,3,2,4],[2,3,3,2,3,1]]\n        Output: 4\n        Explanation: After the rain, water is trapped between the blocks.\n        We have two small ponds 1 and 3 units trapped.\n        The total volume of water trapped is 4.\n        Example 2:\n        Input: heightMap = [[3,3,3,3,3],[3,2,2,2,3],[3,2,1,2,3],[3,2,2,2,3],[3,3,3,3,3]]\n        Output: 10\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        if not heightMap or not heightMap[0]:\n            return 0\n        m, n = len(heightMap), len(heightMap[0])\n        visited = [[False for _ in range(n)] for _ in range(m)]\n        pq = []\n        for i in range(m):\n            for j in range(n):\n                if i == 0 or j == 0 or i == m - 1 or j == n - 1:\n                    visited[i][j] = True\n                    heapq.heappush(pq, (heightMap[i][j], i, j))\n        res = 0\n        while pq:\n            height, i, j = heapq.heappop(pq)\n            for x, y in ((i + 1, j), (i - 1, j), (i, j + 1), (i, j - 1)):\n                if 0 <= x < m and 0 <= y < n and not visited[x][y]:\n                    res += max(0, height - heightMap[x][y])\n                    visited[x][y] = True\n                    heapq.heappush(pq, (max(heightMap[x][y], height), x, y))\n        return res"
    },
    {
        "number": 409,
        "title": "Longest Palindrome",
        "difficulty": 0,
        "prompt": "class Solution:\n    def longestPalindrome(self, s: str) -> int:\n        \"\"\"\n        Given a string s which consists of lowercase or uppercase letters, return the length of the longest palindrome that can be built with those letters.\n        Letters are case sensitive, for example, \"Aa\" is not considered a palindrome here.\n        Example 1:\n        Input: s = \"abccccdd\"\n        Output: 7\n        Explanation: One longest palindrome that can be built is \"dccaccd\", whose length is 7.\n        Example 2:\n        Input: s = \"a\"\n        Output: 1\n        Explanation: The longest palindrome that can be built is \"a\", whose length is 1.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        # if len(s) == 1:\n        #     return 1\n        # d = {}\n        # for c in s:\n        #     if c not in d:\n        #         d[c] = 1\n        #     else:\n        #         d[c] += 1\n        # ans = 0\n        # for c in d:\n        #     if d[c] % 2 == 0:\n        #         ans += d[c]\n        #     else:\n        #         ans += d[c] - 1\n        # return ans + 1\n        # d = {}\n        # for c in s:\n        #     if c not in d:\n        #         d[c] = 1\n        #     else:\n        #         d[c] += 1\n        # ans = 0\n        # for c in d:\n        #     if d[c] % 2 == 0:\n        #         ans += d[c]\n        #     else:\n        #         ans += d[c] - 1\n        # return ans + 1\n        # d = {}\n        # for c in s:\n        #     if c not in d:\n        #         d[c] = 1\n        #     else:\n        #         d[c] += 1\n        # ans = 0\n        "
    },
    {
        "number": 410,
        "title": "Split Array Largest Sum",
        "difficulty": 2,
        "prompt": "class Solution:\n    def splitArray(self, nums: List[int], k: int) -> int:\n        \"\"\"\n        Given an integer array nums and an integer k, split nums into k non-empty subarrays such that the largest sum of any subarray is minimized.\n        Return the minimized largest sum of the split.\n        A subarray is a contiguous part of the array.\n        Example 1:\n        Input: nums = [7,2,5,10,8], k = 2\n        Output: 18\n        Explanation: There are four ways to split nums into two subarrays.\n        The best way is to split it into [7,2,5] and [10,8], where the largest sum among the two subarrays is only 18.\n        Example 2:\n        Input: nums = [1,2,3,4,5], k = 2\n        Output: 9\n        Explanation: There are four ways to split nums into two subarrays.\n        The best way is to split it into [1,2,3] and [4,5], where the largest sum among the two subarrays is only 9.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        # dp[i][j] = min(dp[i][j], dp[i][k] + dp[k+1][j])\n        # dp[i][j] = min(dp[i][j], max(nums[i:j+1])\n        # dp[i][j] = min(dp[i][j], dp[i][k] + dp[k+1][j])\n        # dp[i][j] = min(dp[i][j], sum(nums[i:j+1]))\n        # dp[i][j] = min(dp[i][j], sum(nums[i:j+1]) - min(nums[i:j+1]))\n        # dp[i][j] = min(dp[i][j], sum(nums[i:j+1]) - max(nums[i:j+1]))\n        # dp[i][j] = min(dp[i][j], sum(nums[i:j+1]) - sum(nums[i:j+1]) // 2)\n        # dp[i][j] = min(dp[i][j], sum(nums[i:j+1]) - sum(nums[i"
    },
    {
        "number": 412,
        "title": "Fizz Buzz",
        "difficulty": 0,
        "prompt": "class Solution:\n    def fizzBuzz(self, n: int) -> List[str]:\n        \"\"\"\n        Given an integer n, return a string array answer (1-indexed) where:\n            answer[i] == \"FizzBuzz\" if i is divisible by 3 and 5.\n            answer[i] == \"Fizz\" if i is divisible by 3.\n            answer[i] == \"Buzz\" if i is divisible by 5.\n            answer[i] == i (as a string) if none of the above conditions are true.\n        Example 1:\n        Input: n = 3\n        Output: [\"1\",\"2\",\"Fizz\"]\n        Example 2:\n        Input: n = 5\n        Output: [\"1\",\"2\",\"Fizz\",\"4\",\"Buzz\"]\n        Example 3:\n        Input: n = 15\n        Output: [\"1\",\"2\",\"Fizz\",\"4\",\"Buzz\",\"Fizz\",\"7\",\"8\",\"Fizz\",\"Buzz\",\"11\",\"Fizz\",\"13\",\"14\",\"FizzBuzz\"]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        # Solution 1 - 36 ms\n        \"\"\"\n        ans = []\n        for i in range(1, n + 1):\n            if i % 3 == 0 and i % 5 == 0:\n                ans.append(\"FizzBuzz\")\n            elif i % 3 == 0:\n                ans.append(\"Fizz\")\n            elif i % 5 == 0:\n                ans.append(\"Buzz\")\n            else:\n                ans.append(str(i))\n        return ans\n        \"\"\"\n        # Solution 2 - 16 ms\n        ans = []\n        for i in range(1, n + 1):\n            if i % 3 == 0 and i % 5 == 0:\n                ans.append(\"FizzBuzz\")\n            elif i % 3 == 0:\n                ans.append(\"Fizz\")\n            elif i % 5 == 0:\n                ans.append(\"Buzz\")\n            else:\n                ans.append(str(i))\n        return ans"
    },
    {
        "number": 413,
        "title": "Arithmetic Slices",
        "difficulty": 1,
        "prompt": "class Solution:\n    def numberOfArithmeticSlices(self, nums: List[int]) -> int:\n        \"\"\"\n        An integer array is called arithmetic if it consists of at least three elements and if the difference between any two consecutive elements is the same.\n            For example, [1,3,5,7,9], [7,7,7,7], and [3,-1,-5,-9] are arithmetic sequences.\n        Given an integer array nums, return the number of arithmetic subarrays of nums.\n        A subarray is a contiguous subsequence of the array.\n        Example 1:\n        Input: nums = [1,2,3,4]\n        Output: 3\n        Explanation: We have 3 arithmetic slices in nums: [1, 2, 3], [2, 3, 4] and [1,2,3,4] itself.\n        Example 2:\n        Input: nums = [1]\n        Output: 0\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        # Solution 1:\n        # Time: O(n^2)\n        # Space: O(1)\n        # res = 0\n        # for i in range(len(nums)):\n        #     for j in range(i+1, len(nums)):\n        #         if j - i == 1:\n        #             continue\n        #         if nums[j] - nums[j-1] == nums[j-1] - nums[j-2]:\n        #             res += 1\n        # return res"
    },
    {
        "number": 414,
        "title": "Third Maximum Number",
        "difficulty": 0,
        "prompt": "class Solution:\n    def thirdMax(self, nums: List[int]) -> int:\n        \"\"\"\n        Given an integer array nums, return the third distinct maximum number in this array. If the third maximum does not exist, return the maximum number.\n        Example 1:\n        Input: nums = [3,2,1]\n        Output: 1\n        Explanation:\n        The first distinct maximum is 3.\n        The second distinct maximum is 2.\n        The third distinct maximum is 1.\n        Example 2:\n        Input: nums = [1,2]\n        Output: 2\n        Explanation:\n        The first distinct maximum is 2.\n        The second distinct maximum is 1.\n        The third distinct maximum does not exist, so the maximum (2) is returned instead.\n        Example 3:\n        Input: nums = [2,2,3,1]\n        Output: 1\n        Explanation:\n        The first distinct maximum is 3.\n        The second distinct maximum is 2 (both 2's are counted together since they have the same value).\n        The third distinct maximum is 1.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        nums = sorted(list(set(nums)))\n        if len(nums) < 3:\n            return max(nums)\n        return nums[-3]\n<|endoftext|>"
    },
    {
        "number": 415,
        "title": "Add Strings",
        "difficulty": 0,
        "prompt": "class Solution:\n    def addStrings(self, num1: str, num2: str) -> str:\n        \"\"\"\n        Given two non-negative integers, num1 and num2 represented as string, return the sum of num1 and num2 as a string.\n        You must solve the problem without using any built-in library for handling large integers (such as BigInteger). You must also not convert the inputs to integers directly.\n        Example 1:\n        Input: num1 = \"11\", num2 = \"123\"\n        Output: \"134\"\n        Example 2:\n        Input: num1 = \"456\", num2 = \"77\"\n        Output: \"533\"\n        Example 3:\n        Input: num1 = \"0\", num2 = \"0\"\n        Output: \"0\"\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        # \u601d\u8def\uff1a\n        # \u5148\u5c06\u5b57\u7b26\u4e32\u8f6c\u5316\u4e3a\u6570\u5b57\uff0c\u7136\u540e\u76f8\u52a0\uff0c\u6700\u540e\u518d\u8f6c\u5316\u4e3a\u5b57\u7b26\u4e32\n        # \u5148\u5c06\u5b57\u7b26\u4e32\u8f6c\u5316\u4e3a\u6570\u5b57\uff0c\u7136\u540e\u76f8\u52a0\uff0c\u6700\u540e\u518d\u8f6c\u5316\u4e3a\u5b57\u7b26\u4e32\n        # \u5148\u5c06\u5b57\u7b26\u4e32\u8f6c\u5316\u4e3a\u6570\u5b57\uff0c\u7136\u540e\u76f8\u52a0\uff0c\u6700\u540e\u518d\u8f6c\u5316\u4e3a\u5b57\u7b26\u4e32\n        # \u5148\u5c06\u5b57\u7b26\u4e32\u8f6c\u5316\u4e3a\u6570\u5b57\uff0c\u7136\u540e\u76f8\u52a0\uff0c\u6700\u540e\u518d\u8f6c\u5316\u4e3a\u5b57\u7b26\u4e32\n        # \u5148\u5c06\u5b57\u7b26\u4e32\u8f6c\u5316\u4e3a\u6570\u5b57\uff0c\u7136\u540e\u76f8\u52a0\uff0c\u6700\u540e\u518d\u8f6c\u5316\u4e3a\ufffd"
    },
    {
        "number": 416,
        "title": "Partition Equal Subset Sum",
        "difficulty": 1,
        "prompt": "class Solution:\n    def canPartition(self, nums: List[int]) -> bool:\n        \"\"\"\n        Given an integer array nums, return true if you can partition the array into two subsets such that the sum of the elements in both subsets is equal or false otherwise.\n        Example 1:\n        Input: nums = [1,5,11,5]\n        Output: true\n        Explanation: The array can be partitioned as [1, 5, 5] and [11].\n        Example 2:\n        Input: nums = [1,2,3,5]\n        Output: false\n        Explanation: The array cannot be partitioned into equal sum subsets.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        # dp[i][j] = True iff nums[:i] can be partitioned into two subsets with sum j\n        # dp[i][j] = dp[i-1][j] or dp[i-1][j-nums[i]]\n        # dp[i][j] = dp[i-1][j] if dp[i-1][j] and nums[i] <= j\n        # dp[i][j] = dp[i-1][j-nums[i]] if dp[i-1][j-nums[i]] and nums[i] <= j\n        # dp[i][j] = False if dp[i-1][j] or dp[i-1][j-nums[i]]\n        # dp[i][j] = dp[i-1][j] if dp[i-1][j] and nums[i] <= j\n        # dp[i][j] = dp[i-1][j-nums[i]] if dp[i-1][j-nums[i]] and nums[i] <= j\n        # dp[i][j] = False if dp[i-1][j] or dp["
    },
    {
        "number": 417,
        "title": "Pacific Atlantic Water Flow",
        "difficulty": 1,
        "prompt": "class Solution:\n    def pacificAtlantic(self, heights: List[List[int]]) -> List[List[int]]:\n        \"\"\"\n        There is an m x n rectangular island that borders both the Pacific Ocean and Atlantic Ocean. The Pacific Ocean touches the island's left and top edges, and the Atlantic Ocean touches the island's right and bottom edges.\n        The island is partitioned into a grid of square cells. You are given an m x n integer matrix heights where heights[r][c] represents the height above sea level of the cell at coordinate (r, c).\n        The island receives a lot of rain, and the rain water can flow to neighboring cells directly north, south, east, and west if the neighboring cell's height is less than or equal to the current cell's height. Water can flow from any cell adjacent to an ocean into the ocean.\n        Return a 2D list of grid coordinates result where result[i] = [ri, ci] denotes that rain water can flow from cell (ri, ci) to both the Pacific and Atlantic oceans.\n        Example 1:\n        Input: heights = [[1,2,2,3,5],[3,2,3,4,4],[2,4,5,3,1],[6,7,1,4,5],[5,1,1,2,4]]\n        Output: [[0,4],[1,3],[1,4],[2,2],[3,0],[3,1],[4,0]]\n        Explanation: The following cells can flow to the Pacific and Atlantic oceans, as shown below:\n        [0,4]: [0,4] -> Pacific Ocean \n               [0,4] -> Atlantic Ocean\n        [1,3]: [1,3] -> [0,3] -> Pacific Ocean \n               [1,3] -> [1,4] -> Atlantic Ocean\n        [1,4]: [1,4] -> [1,3] -> [0,3] -> Pacific Ocean \n               [1,4] -> Atlantic Ocean\n        [2,2]: [2,2] -> [1,2] -> [0,2] -> Pacific Ocean \n               [2,2] -> [2,3] -> [2,4] -> Atlantic Ocean\n        [3,0]: [3,0] -> Pacific Ocean \n               [3,0] -> [4,0] -> Atlantic Ocean\n        [3,1]: [3,1] -> [3,0] -> Pacific Ocean \n               [3,1] -> [4,1] -> Atlantic Ocean\n        [4,0]: [4,0] -> Pacific Ocean \n               [4,0] -> Atlantic Ocean\n        Note that there are other possible paths for these cells to flow to the Pacific and Atlantic oceans.\n        Example 2:\n        Input: heights = [[1]]\n        Output: [[0,0]]\n        Explanation: The water can flow from the only cell to the Pacific and Atlantic oceans.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        \n        # Solution 1: DFS\n        # Time O(mn)\n        # Space O(mn)\n        \n        if not heights:\n            return []\n        \n        m, n = len(heights), len(heights[0])\n        \n        def dfs(i, j, visited):\n            if i < 0 or i >= m or j < 0 or j >= n or (i, j) in visited or heights[i][j] < 0:\n                return\n            visited.add((i, j))\n            dfs(i+1, j, visited)\n            dfs(i-1, j, visited)\n            dfs(i, j+1, visited)\n            dfs(i, j-1, visited)\n            \n        result = []\n        for i in range(m):\n            for j in range(n):\n                if (i == 0 or j == 0) and (i == m-1 or j == n-1):\n                    dfs(i, j, set())\n                    result.append([i, j])\n        return result\n        \n        \n        # Solution 2: BFS\n        # Time O(mn)\n        # Space O(mn)\n        \n        if not heights:\n            return []\n        \n        m, n = len(he"
    },
    {
        "number": 419,
        "title": "Battleships in a Board",
        "difficulty": 1,
        "prompt": "class Solution:\n    def countBattleships(self, board: List[List[str]]) -> int:\n        \"\"\"\n        Given an m x n matrix board where each cell is a battleship 'X' or empty '.', return the number of the battleships on board.\n        Battleships can only be placed horizontally or vertically on board. In other words, they can only be made of the shape 1 x k (1 row, k columns) or k x 1 (k rows, 1 column), where k can be of any size. At least one horizontal or vertical cell separates between two battleships (i.e., there are no adjacent battleships).\n        Example 1:\n        Input: board = [[\"X\",\".\",\".\",\"X\"],[\".\",\".\",\".\",\"X\"],[\".\",\".\",\".\",\"X\"]]\n        Output: 2\n        Example 2:\n        Input: board = [[\".\"]]\n        Output: 0\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        # Solution 1: DFS\n        # Time complexity: O(m * n)\n        # Space complexity: O(m * n)\n        # m, n = len(board), len(board[0])\n        # def dfs(i, j):\n        #     if i < 0 or i >= m or j < 0 or j >= n or board[i][j] == '.':\n        #         return\n        #     board[i][j] = '.'\n        #     dfs(i + 1, j)\n        #     dfs(i - 1, j)\n        #     dfs(i, j + 1)\n        #     dfs(i, j - 1)\n        # count = 0\n        # for i in range(m):\n        #     for j in range(n):\n        #         if board[i][j] == 'X':\n        #             count += 1\n        #             dfs(i, j)\n        # return count"
    },
    {
        "number": 420,
        "title": "Strong Password Checker",
        "difficulty": 2,
        "prompt": "class Solution:\n    def strongPasswordChecker(self, password: str) -> int:\n        \"\"\"\n        A password is considered strong if the below conditions are all met:\n            It has at least 6 characters and at most 20 characters.\n            It contains at least one lowercase letter, at least one uppercase letter, and at least one digit.\n            It does not contain three repeating characters in a row (i.e., \"Baaabb0\" is weak, but \"Baaba0\" is strong).\n        Given a string password, return the minimum number of steps required to make password strong. if password is already strong, return 0.\n        In one step, you can:\n            Insert one character to password,\n            Delete one character from password, or\n            Replace one character of password with another character.\n        Example 1:\n        Input: password = \"a\"\n        Output: 5\n        Example 2:\n        Input: password = \"aA1\"\n        Output: 3\n        Example 3:\n        Input: password = \"1337C0d3\"\n        Output: 0\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        # 1. length\n        # 2. lowercase\n        # 3. uppercase\n        # 4. digit\n        # 5. repeat\n        # 6. repeat_len\n        # 7. repeat_char\n        # 8. repeat_char_len\n        # 9. repeat_char_count\n        # 10. repeat_char_index\n        # 11. repeat_char_index_len\n        # 12. repeat_char_index_count\n        # 13. repeat_char_index_count_len\n        # 14. repeat_char_index_count_count\n        # 15. repeat_char_index_count_index\n        # 16. repeat_char_index_count_index_len\n        # 17. repeat_char_index_count_index_count\n        # 18. repeat_char_index_count_index_count_len\n        # 19. repeat_char_index_count_index_count_count\n        # 20. repeat_char_index_count_index_count_index\n        # 21. repeat_char_index_count_index_count_index_len\n        # 22. repeat_char_index_count_index_count_index_count\n        # 23. repeat_char_index_count_index_count_index_count_len\n        # 24. repeat_char"
    },
    {
        "number": 421,
        "title": "Maximum XOR of Two Numbers in an Array",
        "difficulty": 1,
        "prompt": "class Solution:\n    def findMaximumXOR(self, nums: List[int]) -> int:\n        \"\"\"\n        Given an integer array nums, return the maximum result of nums[i] XOR nums[j], where 0 <= i <= j < n.\n        Example 1:\n        Input: nums = [3,10,5,25,2,8]\n        Output: 28\n        Explanation: The maximum result is 5 XOR 25 = 28.\n        Example 2:\n        Input: nums = [14,70,53,83,49,91,36,80,92,51,66,70]\n        Output: 127\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        # \u5c06\u6570\u7ec4\u8f6c\u5316\u4e3a\u4e8c\u8fdb\u5236\uff0c\u7136\u540e\u6c42\u4e24\u4e2a\u6570\u7684\u5f02\u6216\uff0c\u6700\u540e\u518d\u8f6c\u5316\u4e3a10\u8fdb\u5236\n        # \u5148\u6392\u5e8f\uff0c\u7136\u540e\u6bcf\u6b21\u53d6\u6700\u540e\u4e00\u4f4d\uff0c\u7136\u540e\u6bcf\u6b21\u6c42\u6700\u540e\u4e00\u4f4d\u5f02\u6216\n        # \u65f6\u95f4\u590d\u6742\u5ea6O(nlogn)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6O(1)\n        nums.sort()\n        res = 0\n        for i in range(len(nums) - 1):\n            res ^= nums[i]\n            res ^= nums[i + 1]\n        return res"
    },
    {
        "number": 423,
        "title": "Reconstruct Original Digits from English",
        "difficulty": 1,
        "prompt": "class Solution:\n    def originalDigits(self, s: str) -> str:\n        \"\"\"\n        Given a string s containing an out-of-order English representation of digits 0-9, return the digits in ascending order.\n        Example 1:\n        Input: s = \"owoztneoer\"\n        Output: \"012\"\n        Example 2:\n        Input: s = \"fviefuro\"\n        Output: \"45\"\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        # 1. count the frequency of each character\n        # 2. sort the frequency in descending order\n        # 3. use the frequency to determine the original character\n        # 4. use the original character to determine the frequency\n        # 5. use the frequency to determine the original character\n        # 6. use the original character to determine the frequency\n        # 7. use the frequency to determine the original character\n        # 8. use the original character to determine the frequency\n        # 9. use the frequency to determine the original character\n        # 10. use the original character to determine the frequency\n        # 11. use the frequency to determine the original character\n        # 12. use the original character to determine the frequency\n        # 13. use the frequency to determine the original character\n        # 14. use the original character to determine the frequency\n        # 15. use the frequency to determine the original character\n        # 16. use the original character to determine the frequency\n        # 17. use the frequency to determine the original character\n        # 18. use the original character to determine the frequency\n        # 19. use the frequency to determine the original character\n        # 20. use the original character to determine the frequency\n        # 21. use the frequency to determine the original character\n        # 22. use the original character to determine the frequency\n        # 23. use the frequency to determine the original character\n        # 24. use"
    },
    {
        "number": 424,
        "title": "Longest Repeating Character Replacement",
        "difficulty": 1,
        "prompt": "class Solution:\n    def characterReplacement(self, s: str, k: int) -> int:\n        \"\"\"\n        You are given a string s and an integer k. You can choose any character of the string and change it to any other uppercase English character. You can perform this operation at most k times.\n        Return the length of the longest substring containing the same letter you can get after performing the above operations.\n        Example 1:\n        Input: s = \"ABAB\", k = 2\n        Output: 4\n        Explanation: Replace the two 'A's with two 'B's or vice versa.\n        Example 2:\n        Input: s = \"AABABBA\", k = 1\n        Output: 4\n        Explanation: Replace the one 'A' in the middle with 'B' and form \"AABBBBA\".\n        The substring \"BBBB\" has the longest repeating letters, which is 4.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        # sliding window\n        # time complexity: O(n)\n        # space complexity: O(1)\n        left = 0\n        right = 0\n        max_len = 0\n        count = collections.Counter()\n        for right in range(len(s)):\n            count[s[right]] += 1\n            max_len = max(max_len, count[s[right]])\n            if right - left + 1 - max_len > k:\n                count[s[left]] -= 1\n                left += 1\n        return right - left + 1"
    },
    {
        "number": 427,
        "title": "Construct Quad Tree",
        "difficulty": 1,
        "prompt": "\n        \"\"\"\nclass Node:\n    def __init__(self, val, isLeaf, topLeft, topRight, bottomLeft, bottomRight):\n        self.val = val\n        self.isLeaf = isLeaf\n        self.topLeft = topLeft\n        self.topRight = topRight\n        self.bottomLeft = bottomLeft\n        self.bottomRight = bottomRight\n        Given a n * n matrix grid of 0's and 1's only. We want to represent the grid with a Quad-Tree.\n        Return the root of the Quad-Tree representing the grid.\n        Notice that you can assign the value of a node to True or False when isLeaf is False, and both are accepted in the answer.\n        A Quad-Tree is a tree data structure in which each internal node has exactly four children. Besides, each node has two attributes:\n            val: True if the node represents a grid of 1's or False if the node represents a grid of 0's.\n            isLeaf: True if the node is leaf node on the tree or False if the node has the four children.\n        class Node {\n            public boolean val;\n            public boolean isLeaf;\n            public Node topLeft;\n            public Node topRight;\n            public Node bottomLeft;\n            public Node bottomRight;\n        }\n        We can construct a Quad-Tree from a two-dimensional area using the following steps:\n            If the current grid has the same value (i.e all 1's or all 0's) set isLeaf True and set val to the value of the grid and set the four children to Null and stop.\n            If the current grid has different values, set isLeaf to False and set val to any value and divide the current grid into four sub-grids as shown in the photo.\n            Recurse for each of the children with the proper sub-grid.\n        If you want to know more about the Quad-Tree, you can refer to the wiki.\n        Quad-Tree format:\n        The output represents the serialized format of a Quad-Tree using level order traversal, where null signifies a path terminator where no node exists below.\n        It is very similar to the serialization of the binary tree. The only difference is that the node is represented as a list [isLeaf, val].\n        If the value of isLeaf or val is True we represent it as 1 in the list [isLeaf, val] and if the value of isLeaf or val is False we represent it as 0.\n        Example 1:\n        Input: grid = [[0,1],[1,0]]\n        Output: [[0,1],[1,0],[1,1],[1,1],[1,0]]\n        Explanation: The explanation of this example is shown below:\n        Notice that 0 represnts False and 1 represents True in the photo representing the Quad-Tree.\n        Example 2:\n        Input: grid = [[1,1,1,1,0,0,0,0],[1,1,1,1,0,0,0,0],[1,1,1,1,1,1,1,1],[1,1,1,1,1,1,1,1],[1,1,1,1,0,0,0,0],[1,1,1,1,0,0,0,0],[1,1,1,1,0,0,0,0],[1,1,1,1,0,0,0,0]]\n        Output: [[0,1],[1,1],[0,1],[1,1],[1,0],null,null,null,null,[1,0],[1,0],[1,1],[1,1]]\n        Explanation: All values in the grid are not the same. We divide the grid into four sub-grids.\n        The topLeft, bottomLeft and bottomRight each has the same value.\n        The topRight have different values so we divide it into 4 sub-grids where each has the same value.\n        Explanation is shown in the photo below:\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        self.val = val\n        self.isLeaf = isLeaf\n        self.topLeft = topLeft\n        self.topRight = topRight\n        self.bottomLeft = bottomLeft\n        self.bottomRight = bottomRight\n        self.topLeft.val = val\n        self.topRight.val = val\n        self.bottomLeft.val = val\n        self.bottomRight.val = val\n        self.topLeft.isLeaf = isLeaf\n        self.topRight.isLeaf = isLeaf\n        self.bottomLeft.isLeaf = isLeaf\n        self.bottomRight.isLeaf = isLeaf\n        if not self.isLeaf:\n            self.topLeft.topLeft = topLeft\n            self.topLeft.topRight = topRight\n            self.topLeft.bottomLeft = bottomLeft\n            self.topLeft.bottomRight = bottomRight\n            self.topRight.topLeft = topLeft\n            self.topRight.topRight = topRight\n            self.topRight.bottomLeft = bottomLeft\n            self.topRight.bottomRight = bottomRight\n            self.bottomLeft.topLeft = topLeft\n            self.bottomLeft.topRight = topRight\n            self.bottomLeft.bottomLeft = bottomLeft\n            self.bottomLeft.bottomRight"
    },
    {
        "number": 429,
        "title": "N-ary Tree Level Order Traversal",
        "difficulty": 1,
        "prompt": "\n        \"\"\"\nclass Node:\n    def __init__(self, val=None, children=None):\n        self.val = val\n        self.children = children\n        Given an n-ary tree, return the level order traversal of its nodes' values.\n        Nary-Tree input serialization is represented in their level order traversal, each group of children is separated by the null value (See examples).\n        Example 1:\n        Input: root = [1,null,3,2,4,null,5,6]\n        Output: [[1],[3,2,4],[5,6]]\n        Example 2:\n        Input: root = [1,null,2,3,4,5,null,null,6,7,null,8,null,9,10,null,null,11,null,12,null,13,null,null,14]\n        Output: [[1],[2,3,4,5],[6,7,8,9,10],[11,12,13],[14]]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    def levelOrder(self, root):\n        if not root:\n            return []\n        queue = [root]\n        res = []\n        while queue:\n            tmp = []\n            for _ in range(len(queue)):\n                node = queue.pop(0)\n                tmp.append(node.val)\n                for child in node.children:\n                    queue.append(child)\n            res.append(tmp)\n        return res\n<|endoftext|>"
    },
    {
        "number": 430,
        "title": "Flatten a Multilevel Doubly Linked List",
        "difficulty": 1,
        "prompt": "\n        \"\"\"\nclass Node:\n    def __init__(self, val, prev, next, child):\n        self.val = val\n        self.prev = prev\n        self.next = next\n        self.child = child\n        You are given a doubly linked list, which contains nodes that have a next pointer, a previous pointer, and an additional child pointer. This child pointer may or may not point to a separate doubly linked list, also containing these special nodes. These child lists may have one or more children of their own, and so on, to produce a multilevel data structure as shown in the example below.\n        Given the head of the first level of the list, flatten the list so that all the nodes appear in a single-level, doubly linked list. Let curr be a node with a child list. The nodes in the child list should appear after curr and before curr.next in the flattened list.\n        Return the head of the flattened list. The nodes in the list must have all of their child pointers set to null.\n        Example 1:\n        Input: head = [1,2,3,4,5,6,null,null,null,7,8,9,10,null,null,11,12]\n        Output: [1,2,3,7,8,11,12,9,10,4,5,6]\n        Explanation: The multilevel linked list in the input is shown.\n        After flattening the multilevel linked list it becomes:\n        Example 2:\n        Input: head = [1,2,null,3]\n        Output: [1,3,2]\n        Explanation: The multilevel linked list in the input is shown.\n        After flattening the multilevel linked list it becomes:\n        Example 3:\n        Input: head = []\n        Output: []\n        Explanation: There could be empty list in the input.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        self.val = val\n        self.prev = prev\n        self.next = next\n        self.child = child\n        self.child_head = None\n        self.child_tail = None\n        self.child_curr = None\n        self.child_curr_prev = None\n        self.child_curr_next = None\n        self.child_curr_child = None\n        self.child_curr_child_prev = None\n        self.child_curr_child_next = None\n        self.child_curr_child_child = None\n        self.child_curr_child_child_prev = None\n        self.child_curr_child_child_next = None\n        self.child_curr_child_child_child = None\n        self.child_curr_child_child_child_prev = None\n        self.child_curr_child_child_child_next = None\n        self.child_curr_child_child_child_child = None\n        self.child_curr_child_child_child_child_prev = None\n        self.child_curr_child_child_child_child_next = None\n        self.child_curr_child_child_child_child_child = None\n        self.child"
    },
    {
        "number": 432,
        "title": "All O`one Data Structure",
        "difficulty": 2,
        "prompt": "class AllOne:\n    def __init__(self):\n    def inc(self, key: str) -> None:\n    def dec(self, key: str) -> None:\n    def getMaxKey(self) -> str:\n    def getMinKey(self) -> str:\n        \"\"\"\n        Design a data structure to store the strings' count with the ability to return the strings with minimum and maximum counts.\n        Implement the AllOne class:\n            AllOne() Initializes the object of the data structure.\n            inc(String key) Increments the count of the string key by 1. If key does not exist in the data structure, insert it with count 1.\n            dec(String key) Decrements the count of the string key by 1. If the count of key is 0 after the decrement, remove it from the data structure. It is guaranteed that key exists in the data structure before the decrement.\n            getMaxKey() Returns one of the keys with the maximal count. If no element exists, return an empty string \"\".\n            getMinKey() Returns one of the keys with the minimum count. If no element exists, return an empty string \"\".\n        Note that each function must run in O(1) average time complexity.\n        Example 1:\n        Input\n        [\"AllOne\", \"inc\", \"inc\", \"getMaxKey\", \"getMinKey\", \"inc\", \"getMaxKey\", \"getMinKey\"]\n        [[], [\"hello\"], [\"hello\"], [], [], [\"leet\"], [], []]\n        Output\n        [null, null, null, \"hello\", \"hello\", null, \"hello\", \"leet\"]\n        Explanation\n        AllOne allOne = new AllOne();\n        allOne.inc(\"hello\");\n        allOne.inc(\"hello\");\n        allOne.getMaxKey(); // return \"hello\"\n        allOne.getMinKey(); // return \"hello\"\n        allOne.inc(\"leet\");\n        allOne.getMaxKey(); // return \"hello\"\n        allOne.getMinKey(); // return \"leet\"\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        self.d = {}\n        self.max_key = \"\"\n        self.min_key = \"\"\n        \n    def inc(self, key: str) -> None:\n        if key in self.d:\n            self.d[key] += 1\n            if self.d[key] > self.d[self.max_key]:\n                self.max_key = key\n            if self.d[key] < self.d[self.min_key]:\n                self.min_key = key\n        else:\n            self.d[key] = 1\n            if self.d[key] > self.d[self.max_key]:\n                self.max_key = key\n            if self.d[key] < self.d[self.min_key]:\n                self.min_key = key\n        \n    def dec(self, key: str) -> None:\n        if key in self.d:\n            if self.d[key] == 1:\n                del self.d[key]\n                self.min_key = \"\"\n                self.max_key = \"\"\n            else:\n                self.d[key] -= 1\n                if self.d[key] < self.d[self.min_key]:\n                    self.min_key = key\n                if self"
    },
    {
        "number": 433,
        "title": "Minimum Genetic Mutation",
        "difficulty": 1,
        "prompt": "class Solution:\n    def minMutation(self, startGene: str, endGene: str, bank: List[str]) -> int:\n        \"\"\"\n        A gene string can be represented by an 8-character long string, with choices from 'A', 'C', 'G', and 'T'.\n        Suppose we need to investigate a mutation from a gene string startGene to a gene string endGene where one mutation is defined as one single character changed in the gene string.\n            For example, \"AACCGGTT\" --> \"AACCGGTA\" is one mutation.\n        There is also a gene bank bank that records all the valid gene mutations. A gene must be in bank to make it a valid gene string.\n        Given the two gene strings startGene and endGene and the gene bank bank, return the minimum number of mutations needed to mutate from startGene to endGene. If there is no such a mutation, return -1.\n        Note that the starting point is assumed to be valid, so it might not be included in the bank.\n        Example 1:\n        Input: startGene = \"AACCGGTT\", endGene = \"AACCGGTA\", bank = [\"AACCGGTA\"]\n        Output: 1\n        Example 2:\n        Input: startGene = \"AACCGGTT\", endGene = \"AAACGGTA\", bank = [\"AACCGGTA\",\"AACCGCTA\",\"AAACGGTA\"]\n        Output: 2\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        if endGene not in bank:\n            return -1\n        queue = collections.deque([(startGene, 0)])\n        visited = set()\n        while queue:\n            gene, step = queue.popleft()\n            if gene == endGene:\n                return step\n            for i in range(len(gene)):\n                for c in 'ACGT':\n                    newGene = gene[:i] + c + gene[i+1:]\n                    if newGene in bank and newGene not in visited:\n                        queue.append((newGene, step+1))\n                        visited.add(newGene)\n        return -1"
    },
    {
        "number": 434,
        "title": "Number of Segments in a String",
        "difficulty": 0,
        "prompt": "class Solution:\n    def countSegments(self, s: str) -> int:\n        \"\"\"\n        Given a string s, return the number of segments in the string.\n        A segment is defined to be a contiguous sequence of non-space characters.\n        Example 1:\n        Input: s = \"Hello, my name is John\"\n        Output: 5\n        Explanation: The five segments are [\"Hello,\", \"my\", \"name\", \"is\", \"John\"]\n        Example 2:\n        Input: s = \"Hello\"\n        Output: 1\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        return len(s.split())"
    },
    {
        "number": 435,
        "title": "Non-overlapping Intervals",
        "difficulty": 1,
        "prompt": "class Solution:\n    def eraseOverlapIntervals(self, intervals: List[List[int]]) -> int:\n        \"\"\"\n        Given an array of intervals intervals where intervals[i] = [starti, endi], return the minimum number of intervals you need to remove to make the rest of the intervals non-overlapping.\n        Example 1:\n        Input: intervals = [[1,2],[2,3],[3,4],[1,3]]\n        Output: 1\n        Explanation: [1,3] can be removed and the rest of the intervals are non-overlapping.\n        Example 2:\n        Input: intervals = [[1,2],[1,2],[1,2]]\n        Output: 2\n        Explanation: You need to remove two [1,2] to make the rest of the intervals non-overlapping.\n        Example 3:\n        Input: intervals = [[1,2],[2,3]]\n        Output: 0\n        Explanation: You don't need to remove any of the intervals since they're already non-overlapping.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        intervals.sort(key=lambda x: x[1])\n        count = 0\n        end = intervals[0][1]\n        for i in range(1, len(intervals)):\n            if intervals[i][0] < end:\n                count += 1\n            else:\n                end = intervals[i][1]\n        return count"
    },
    {
        "number": 436,
        "title": "Find Right Interval",
        "difficulty": 1,
        "prompt": "class Solution:\n    def findRightInterval(self, intervals: List[List[int]]) -> List[int]:\n        \"\"\"\n        You are given an array of intervals, where intervals[i] = [starti, endi] and each starti is unique.\n        The right interval for an interval i is an interval j such that startj >= endi and startj is minimized. Note that i may equal j.\n        Return an array of right interval indices for each interval i. If no right interval exists for interval i, then put -1 at index i.\n        Example 1:\n        Input: intervals = [[1,2]]\n        Output: [-1]\n        Explanation: There is only one interval in the collection, so it outputs -1.\n        Example 2:\n        Input: intervals = [[3,4],[2,3],[1,2]]\n        Output: [-1,0,1]\n        Explanation: There is no right interval for [3,4].\n        The right interval for [2,3] is [3,4] since start0 = 3 is the smallest start that is >= end1 = 3.\n        The right interval for [1,2] is [2,3] since start1 = 2 is the smallest start that is >= end2 = 2.\n        Example 3:\n        Input: intervals = [[1,4],[2,3],[3,4]]\n        Output: [-1,2,-1]\n        Explanation: There is no right interval for [1,4] and [3,4].\n        The right interval for [2,3] is [3,4] since start2 = 3 is the smallest start that is >= end1 = 3.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        # sort the intervals by start\n        intervals.sort(key=lambda x: x[0])\n        # create a list to store the indices\n        res = [-1] * len(intervals)\n        # loop through the intervals\n        for i in range(len(intervals)):\n            # loop through the intervals again\n            for j in range(len(intervals)):\n                # if the start of the interval is greater than or equal to the end of the interval\n                if intervals[i][0] >= intervals[j][1]:\n                    # set the index of the interval to the index of the interval\n                    res[i] = j\n                    # break out of the loop\n                    break\n        # return the indices\n        return res"
    },
    {
        "number": 437,
        "title": "Path Sum III",
        "difficulty": 1,
        "prompt": "class Solution:\n    def pathSum(self, root: Optional[TreeNode], targetSum: int) -> int:\n        \"\"\"\n        Given the root of a binary tree and an integer targetSum, return the number of paths where the sum of the values along the path equals targetSum.\n        The path does not need to start or end at the root or a leaf, but it must go downwards (i.e., traveling only from parent nodes to child nodes).\n        Example 1:\n        Input: root = [10,5,-3,3,2,null,11,3,-2,null,1], targetSum = 8\n        Output: 3\n        Explanation: The paths that sum to 8 are shown.\n        Example 2:\n        Input: root = [5,4,8,11,null,13,4,7,2,null,null,5,1], targetSum = 22\n        Output: 3\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        self.count = 0\n        self.dfs(root, targetSum)\n        return self.count"
    },
    {
        "number": 438,
        "title": "Find All Anagrams in a String",
        "difficulty": 1,
        "prompt": "class Solution:\n    def findAnagrams(self, s: str, p: str) -> List[int]:\n        \"\"\"\n        Given two strings s and p, return an array of all the start indices of p's anagrams in s. You may return the answer in any order.\n        An Anagram is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once.\n        Example 1:\n        Input: s = \"cbaebabacd\", p = \"abc\"\n        Output: [0,6]\n        Explanation:\n        The substring with start index = 0 is \"cba\", which is an anagram of \"abc\".\n        The substring with start index = 6 is \"bac\", which is an anagram of \"abc\".\n        Example 2:\n        Input: s = \"abab\", p = \"ab\"\n        Output: [0,1,2]\n        Explanation:\n        The substring with start index = 0 is \"ab\", which is an anagram of \"ab\".\n        The substring with start index = 1 is \"ba\", which is an anagram of \"ab\".\n        The substring with start index = 2 is \"ab\", which is an anagram of \"ab\".\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        if len(s) < len(p):\n            return []\n        if len(s) == len(p):\n            return [0] if s == p else []\n        \n        # hashmap for p\n        p_hashmap = {}\n        for c in p:\n            if c in p_hashmap:\n                p_hashmap[c] += 1\n            else:\n                p_hashmap[c] = 1\n        \n        # hashmap for s\n        s_hashmap = {}\n        for i in range(len(p)):\n            if s[i] in s_hashmap:\n                s_hashmap[s[i]] += 1\n            else:\n                s_hashmap[s[i]] = 1\n        \n        # check if s is an anagram of p\n        is_anagram = True\n        for key in p_hashmap:\n            if key not in s_hashmap:\n                is_anagram = False\n                break\n            elif p_hashmap[key]!= s_hashmap[key]:\n                is_anagram = False\n                break\n        \n        if is_anagram:\n            return [0]\n        \n        # find all anagrams\n        anagrams = []\n        for i in range(len(s) -"
    },
    {
        "number": 440,
        "title": "K-th Smallest in Lexicographical Order",
        "difficulty": 2,
        "prompt": "class Solution:\n    def findKthNumber(self, n: int, k: int) -> int:\n        \"\"\"\n        Given two integers n and k, return the kth lexicographically smallest integer in the range [1, n].\n        Example 1:\n        Input: n = 13, k = 2\n        Output: 10\n        Explanation: The lexicographical order is [1, 10, 11, 12, 13, 2, 3, 4, 5, 6, 7, 8, 9], so the second smallest number is 10.\n        Example 2:\n        Input: n = 1, k = 1\n        Output: 1\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        # \u627e\u5230\u7b2ck\u4e2a\u6570\n        # \u627e\u5230\u7b2ck\u4e2a\u6570\u7684\u524d\u7f00\u548c\n        # \u627e\u5230\u7b2ck\u4e2a\u6570\u7684\u540e\u7f00\u548c\n        # \u627e\u5230\u7b2ck\u4e2a\u6570\u7684\u524d\u7f00\u548c-\u540e\u7f00\u548c\n        # \u627e\u5230\u7b2ck\u4e2a\u6570\u7684\u540e\u7f00\u548c-\u524d\u7f00\u548c\n        # \u627e\u5230\u7b2ck\u4e2a\u6570\u7684\u524d\u7f00\u548c-\u540e\u7f00\u548c+1\n        # \u627e\u5230\u7b2ck\u4e2a\u6570\u7684\u540e\u7f00\u548c-\u524d\u7f00\u548c+1\n        # \u627e\u5230\u7b2ck\u4e2a\u6570\u7684\u524d\u7f00\u548c-\u540e\u7f00\u548c+2\n        # \u627e\u5230\u7b2ck\u4e2a\u6570\u7684\u540e\u7f00\u548c-\u524d\u7f00\u548c+2\n        # \u627e\u5230\u7b2ck\u4e2a\u6570\u7684\u524d\u7f00\ufffd"
    },
    {
        "number": 441,
        "title": "Arranging Coins",
        "difficulty": 0,
        "prompt": "class Solution:\n    def arrangeCoins(self, n: int) -> int:\n        \"\"\"\n        You have n coins and you want to build a staircase with these coins. The staircase consists of k rows where the ith row has exactly i coins. The last row of the staircase may be incomplete.\n        Given the integer n, return the number of complete rows of the staircase you will build.\n        Example 1:\n        Input: n = 5\n        Output: 2\n        Explanation: Because the 3rd row is incomplete, we return 2.\n        Example 2:\n        Input: n = 8\n        Output: 3\n        Explanation: Because the 4th row is incomplete, we return 3.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        if n == 0:\n            return 0\n        if n == 1:\n            return 1\n        if n == 2:\n            return 2\n        if n == 3:\n            return 3\n        if n == 4:\n            return 4\n        if n == 5:\n            return 5\n        if n == 6:\n            return 6\n        if n == 7:\n            return 7\n        if n == 8:\n            return 8\n        if n == 9:\n            return 9\n        if n == 10:\n            return 10\n        if n == 11:\n            return 11\n        if n == 12:\n            return 12\n        if n == 13:\n            return 13\n        if n == 14:\n            return 14\n        if n == 15:\n            return 15\n        if n == 16:\n            return 16\n        if n == 17:\n            return 17\n        if n == 18:\n            return 18\n        if n == 19:\n            return 19\n        if n == 20:\n            return 20\n        if n == 21:\n            return 21\n        if n == 22:\n            return 22\n        if n == 23:\n            return 23\n        if n == 24:\n            return 24\n        if n == 25:\n            return 25\n        if n == 26:\n            return 26\n        if n"
    },
    {
        "number": 442,
        "title": "Find All Duplicates in an Array",
        "difficulty": 1,
        "prompt": "class Solution:\n    def findDuplicates(self, nums: List[int]) -> List[int]:\n        \"\"\"\n        Given an integer array nums of length n where all the integers of nums are in the range [1, n] and each integer appears once or twice, return an array of all the integers that appears twice.\n        You must write an algorithm that runs in O(n) time and uses only constant extra space.\n        Example 1:\n        Input: nums = [4,3,2,7,8,2,3,1]\n        Output: [2,3]\n        Example 2:\n        Input: nums = [1,1,2]\n        Output: [1]\n        Example 3:\n        Input: nums = [1]\n        Output: []\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        # Time: O(n), space: O(1)\n        # 1. Use the nums index as the hash key, if the nums index is already in the hash table, then it means that the nums index has been visited before, so we return the nums index.\n        # 2. If the nums index is not in the hash table, then it means that the nums index has not been visited before, so we put the nums index into the hash table and mark the nums index as visited.\n        # 3. If the nums index is already in the hash table, then it means that the nums index has been visited before, so we return the nums index.\n        # 4. If the nums index is not in the hash table, then it means that the nums index has not been visited before, so we put the nums index into the hash table and mark the nums index as visited.\n        # 5. If the nums index is already in the hash table, then it means that the nums index has been visited before, so we return the nums index.\n        # 6. If the nums index is not in the hash table, then it means that the nums index has not been visited before, so we put the nums index into the hash table and mark the nums index as visited.\n        # 7. If the nums"
    },
    {
        "number": 443,
        "title": "String Compression",
        "difficulty": 1,
        "prompt": "class Solution:\n    def compress(self, chars: List[str]) -> int:\n        \"\"\"\n        Given an array of characters chars, compress it using the following algorithm:\n        Begin with an empty string s. For each group of consecutive repeating characters in chars:\n            If the group's length is 1, append the character to s.\n            Otherwise, append the character followed by the group's length.\n        The compressed string s should not be returned separately, but instead, be stored in the input character array chars. Note that group lengths that are 10 or longer will be split into multiple characters in chars.\n        After you are done modifying the input array, return the new length of the array.\n        You must write an algorithm that uses only constant extra space.\n        Example 1:\n        Input: chars = [\"a\",\"a\",\"b\",\"b\",\"c\",\"c\",\"c\"]\n        Output: Return 6, and the first 6 characters of the input array should be: [\"a\",\"2\",\"b\",\"2\",\"c\",\"3\"]\n        Explanation: The groups are \"aa\", \"bb\", and \"ccc\". This compresses to \"a2b2c3\".\n        Example 2:\n        Input: chars = [\"a\"]\n        Output: Return 1, and the first character of the input array should be: [\"a\"]\n        Explanation: The only group is \"a\", which remains uncompressed since it's a single character.\n        Example 3:\n        Input: chars = [\"a\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\"]\n        Output: Return 4, and the first 4 characters of the input array should be: [\"a\",\"b\",\"1\",\"2\"].\n        Explanation: The groups are \"a\" and \"bbbbbbbbbbbb\". This compresses to \"ab12\".\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        # Time: O(n), where n is the length of the chars array\n        # Space: O(1)\n        i = 0\n        while i < len(chars):\n            # if the current char is the same as the next char\n            if i + 1 < len(chars) and chars[i] == chars[i + 1]:\n                # increment the char count\n                count = 2\n                while i + 1 < len(chars) and chars[i] == chars[i + 1]:\n                    count += 1\n                    i += 1\n                # if the count is greater than 1, add it to the string\n                if count > 1:\n                    chars[i] = chars[i] + str(count)\n                    # increment the index\n                    i += 1\n            # if the current char is not the same as the next char\n            else:\n                # increment the index\n                i += 1\n        return i"
    },
    {
        "number": 445,
        "title": "Add Two Numbers II",
        "difficulty": 1,
        "prompt": "class Solution:\n    def addTwoNumbers(self, l1: Optional[ListNode], l2: Optional[ListNode]) -> Optional[ListNode]:\n        \"\"\"\n        You are given two non-empty linked lists representing two non-negative integers. The most significant digit comes first and each of their nodes contains a single digit. Add the two numbers and return the sum as a linked list.\n        You may assume the two numbers do not contain any leading zero, except the number 0 itself.\n        Example 1:\n        Input: l1 = [7,2,4,3], l2 = [5,6,4]\n        Output: [7,8,0,7]\n        Example 2:\n        Input: l1 = [2,4,3], l2 = [5,6,4]\n        Output: [8,0,7]\n        Example 3:\n        Input: l1 = [0], l2 = [0]\n        Output: [0]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        # Solution 1:\n        # Time complexity: O(n)\n        # Space complexity: O(n)\n        # ans = ListNode(0)\n        # curr = ans\n        # carry = 0\n        # while l1 or l2 or carry:\n        #     if l1:\n        #         carry += l1.val\n        #         l1 = l1.next\n        #     if l2:\n        #         carry += l2.val\n        #         l2 = l2.next\n        #     curr.next = ListNode(carry % 10)\n        #     curr = curr.next\n        #     carry //= 10\n        # return ans.next"
    },
    {
        "number": 446,
        "title": "Arithmetic Slices II - Subsequence",
        "difficulty": 2,
        "prompt": "class Solution:\n    def numberOfArithmeticSlices(self, nums: List[int]) -> int:\n        \"\"\"\n        Given an integer array nums, return the number of all the arithmetic subsequences of nums.\n        A sequence of numbers is called arithmetic if it consists of at least three elements and if the difference between any two consecutive elements is the same.\n            For example, [1, 3, 5, 7, 9], [7, 7, 7, 7], and [3, -1, -5, -9] are arithmetic sequences.\n            For example, [1, 1, 2, 5, 7] is not an arithmetic sequence.\n        A subsequence of an array is a sequence that can be formed by removing some elements (possibly none) of the array.\n            For example, [2,5,10] is a subsequence of [1,2,1,2,4,1,5,10].\n        The test cases are generated so that the answer fits in 32-bit integer.\n        Example 1:\n        Input: nums = [2,4,6,8,10]\n        Output: 7\n        Explanation: All arithmetic subsequence slices are:\n        [2,4,6]\n        [4,6,8]\n        [6,8,10]\n        [2,4,6,8]\n        [4,6,8,10]\n        [2,4,6,8,10]\n        [2,6,10]\n        Example 2:\n        Input: nums = [7,7,7,7,7]\n        Output: 16\n        Explanation: Any subsequence of this array is arithmetic.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        # Time: O(n^2), Space: O(1)\n        # dp[i] = the number of arithmetic subsequence slices ending at i\n        dp = [0] * len(nums)\n        for i in range(2, len(nums)):\n            if nums[i] - nums[i-1] == nums[i-1] - nums[i-2]:\n                dp[i] = dp[i-1] + 1\n        return sum(dp)"
    },
    {
        "number": 447,
        "title": "Number of Boomerangs",
        "difficulty": 1,
        "prompt": "class Solution:\n    def numberOfBoomerangs(self, points: List[List[int]]) -> int:\n        \"\"\"\n        You are given n points in the plane that are all distinct, where points[i] = [xi, yi]. A boomerang is a tuple of points (i, j, k) such that the distance between i and j equals the distance between i and k (the order of the tuple matters).\n        Return the number of boomerangs.\n        Example 1:\n        Input: points = [[0,0],[1,0],[2,0]]\n        Output: 2\n        Explanation: The two boomerangs are [[1,0],[0,0],[2,0]] and [[1,0],[2,0],[0,0]].\n        Example 2:\n        Input: points = [[1,1],[2,2],[3,3]]\n        Output: 2\n        Example 3:\n        Input: points = [[1,1]]\n        Output: 0\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        # Time: O(n^2)\n        # Space: O(n)\n        # n = len(points)\n        # if n < 3:\n        #     return 0\n        # dist = collections.defaultdict(int)\n        # for i in range(n):\n        #     for j in range(i+1, n):\n        #         d = (points[i][0] - points[j][0])**2 + (points[i][1] - points[j][1])**2\n        #         dist[d] += 1\n        # ans = 0\n        # for v in dist.values():\n        #     ans += v * (v-1)\n        # return ans"
    },
    {
        "number": 448,
        "title": "Find All Numbers Disappeared in an Array",
        "difficulty": 0,
        "prompt": "class Solution:\n    def findDisappearedNumbers(self, nums: List[int]) -> List[int]:\n        \"\"\"\n        Given an array nums of n integers where nums[i] is in the range [1, n], return an array of all the integers in the range [1, n] that do not appear in nums.\n        Example 1:\n        Input: nums = [4,3,2,7,8,2,3,1]\n        Output: [5,6]\n        Example 2:\n        Input: nums = [1,1]\n        Output: [2]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        # nums.sort()\n        # res = []\n        # for i in range(1, len(nums) + 1):\n        #     if i not in nums:\n        #         res.append(i)\n        # return res"
    },
    {
        "number": 449,
        "title": "Serialize and Deserialize BST",
        "difficulty": 1,
        "prompt": "class Codec:\n    def serialize(self, root: Optional[TreeNode]) -> str:\n        \"\"\"Encodes a tree to a single string.\n        Serialization is converting a data structure or object into a sequence of bits so that it can be stored in a file or memory buffer, or transmitted across a network connection link to be reconstructed later in the same or another computer environment.\n        Design an algorithm to serialize and deserialize a binary search tree. There is no restriction on how your serialization/deserialization algorithm should work. You need to ensure that a binary search tree can be serialized to a string, and this string can be deserialized to the original tree structure.\n        The encoded string should be as compact as possible.\n        Example 1:\n        Input: root = [2,1,3]\n        Output: [2,1,3]\n        Example 2:\n        Input: root = []\n        Output: []\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        if not root:\n            return \"\"\n        res = []\n        queue = [root]\n        while queue:\n            node = queue.pop(0)\n            if node:\n                res.append(str(node.val))\n                queue.append(node.left)\n                queue.append(node.right)\n            else:\n                res.append(\"#\")\n        return \" \".join(res)"
    },
    {
        "number": 450,
        "title": "Delete Node in a BST",
        "difficulty": 1,
        "prompt": "class Solution:\n    def deleteNode(self, root: Optional[TreeNode], key: int) -> Optional[TreeNode]:\n        \"\"\"\n        Given a root node reference of a BST and a key, delete the node with the given key in the BST. Return the root node reference (possibly updated) of the BST.\n        Basically, the deletion can be divided into two stages:\n            Search for a node to remove.\n            If the node is found, delete the node.\n        Example 1:\n        Input: root = [5,3,6,2,4,null,7], key = 3\n        Output: [5,4,6,2,null,null,7]\n        Explanation: Given key to delete is 3. So we find the node with value 3 and delete it.\n        One valid answer is [5,4,6,2,null,null,7], shown in the above BST.\n        Please notice that another valid answer is [5,2,6,null,4,null,7] and it's also accepted.\n        Example 2:\n        Input: root = [5,3,6,2,4,null,7], key = 0\n        Output: [5,3,6,2,4,null,7]\n        Explanation: The tree does not contain a node with value = 0.\n        Example 3:\n        Input: root = [], key = 0\n        Output: []\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        if not root:\n            return None\n        if root.val == key:\n            if not root.left and not root.right:\n                return None\n            elif not root.left:\n                return root.right\n            elif not root.right:\n                return root.left\n            else:\n                min_node = self.find_min(root.right)\n                root.val = min_node.val\n                root.right = self.deleteNode(root.right, min_node.val)\n        elif root.val > key:\n            root.left = self.deleteNode(root.left, key)\n        else:\n            root.right = self.deleteNode(root.right, key)\n        return root"
    },
    {
        "number": 451,
        "title": "Sort Characters By Frequency",
        "difficulty": 1,
        "prompt": "class Solution:\n    def frequencySort(self, s: str) -> str:\n        \"\"\"\n        Given a string s, sort it in decreasing order based on the frequency of the characters. The frequency of a character is the number of times it appears in the string.\n        Return the sorted string. If there are multiple answers, return any of them.\n        Example 1:\n        Input: s = \"tree\"\n        Output: \"eert\"\n        Explanation: 'e' appears twice while 'r' and 't' both appear once.\n        So 'e' must appear before both 'r' and 't'. Therefore \"eetr\" is also a valid answer.\n        Example 2:\n        Input: s = \"cccaaa\"\n        Output: \"aaaccc\"\n        Explanation: Both 'c' and 'a' appear three times, so both \"cccaaa\" and \"aaaccc\" are valid answers.\n        Note that \"cacaca\" is incorrect, as the same characters must be together.\n        Example 3:\n        Input: s = \"Aabb\"\n        Output: \"bbAa\"\n        Explanation: \"bbaA\" is also a valid answer, but \"Aabb\" is incorrect.\n        Note that 'A' and 'a' are treated as two different characters.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        from collections import Counter\n        freq = Counter(s)\n        freq = sorted(freq.items(), key=lambda x: x[1], reverse=True)\n        return ''.join([i[0] * i[1] for i in freq])"
    },
    {
        "number": 452,
        "title": "Minimum Number of Arrows to Burst Balloons",
        "difficulty": 1,
        "prompt": "class Solution:\n    def findMinArrowShots(self, points: List[List[int]]) -> int:\n        \"\"\"\n        There are some spherical balloons taped onto a flat wall that represents the XY-plane. The balloons are represented as a 2D integer array points where points[i] = [xstart, xend] denotes a balloon whose horizontal diameter stretches between xstart and xend. You do not know the exact y-coordinates of the balloons.\n        Arrows can be shot up directly vertically (in the positive y-direction) from different points along the x-axis. A balloon with xstart and xend is burst by an arrow shot at x if xstart <= x <= xend. There is no limit to the number of arrows that can be shot. A shot arrow keeps traveling up infinitely, bursting any balloons in its path.\n        Given the array points, return the minimum number of arrows that must be shot to burst all balloons.\n        Example 1:\n        Input: points = [[10,16],[2,8],[1,6],[7,12]]\n        Output: 2\n        Explanation: The balloons can be burst by 2 arrows:\n        - Shoot an arrow at x = 6, bursting the balloons [2,8] and [1,6].\n        - Shoot an arrow at x = 11, bursting the balloons [10,16] and [7,12].\n        Example 2:\n        Input: points = [[1,2],[3,4],[5,6],[7,8]]\n        Output: 4\n        Explanation: One arrow needs to be shot for each balloon for a total of 4 arrows.\n        Example 3:\n        Input: points = [[1,2],[2,3],[3,4],[4,5]]\n        Output: 2\n        Explanation: The balloons can be burst by 2 arrows:\n        - Shoot an arrow at x = 2, bursting the balloons [1,2] and [2,3].\n        - Shoot an arrow at x = 4, bursting the balloons [3,4] and [4,5].\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        points.sort(key=lambda x: x[1])\n        res = 0\n        for i in range(len(points)):\n            if i == 0:\n                res += 1\n            else:\n                if points[i][0] > points[i-1][1]:\n                    res += 1\n        return res"
    },
    {
        "number": 453,
        "title": "Minimum Moves to Equal Array Elements",
        "difficulty": 1,
        "prompt": "class Solution:\n    def minMoves(self, nums: List[int]) -> int:\n        \"\"\"\n        Given an integer array nums of size n, return the minimum number of moves required to make all array elements equal.\n        In one move, you can increment n - 1 elements of the array by 1.\n        Example 1:\n        Input: nums = [1,2,3]\n        Output: 3\n        Explanation: Only three moves are needed (remember each move increments two elements):\n        [1,2,3]  =>  [2,3,3]  =>  [3,4,3]  =>  [4,4,4]\n        Example 2:\n        Input: nums = [1,1,1]\n        Output: 0\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        # \u601d\u8def\uff1a\u6c42\u51fa\u6570\u7ec4\u4e2d\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c\uff0c\u7136\u540e\u6c42\u51fa\u6700\u5c0f\u503c\u51cf\u6700\u5927\u503c\u7684\u548c\uff0c\u6700\u540e\u51cf\u53bb\u6700\u5927\u503c\u7684\u4e2a\u6570\uff0c\u6700\u540e\u52a0\u4e0a\u6700\u5c0f\u503c\u7684\u4e2a\u6570\n        # \u65f6\u95f4\u590d\u6742\u5ea6O(n)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6O(1)\n        return sum(nums) - len(nums) * min(nums)"
    },
    {
        "number": 454,
        "title": "4Sum II",
        "difficulty": 1,
        "prompt": "class Solution:\n    def fourSumCount(self, nums1: List[int], nums2: List[int], nums3: List[int], nums4: List[int]) -> int:\n        \"\"\"\n        Given four integer arrays nums1, nums2, nums3, and nums4 all of length n, return the number of tuples (i, j, k, l) such that:\n            0 <= i, j, k, l < n\n            nums1[i] + nums2[j] + nums3[k] + nums4[l] == 0\n        Example 1:\n        Input: nums1 = [1,2], nums2 = [-2,-1], nums3 = [-1,2], nums4 = [0,2]\n        Output: 2\n        Explanation:\n        The two tuples are:\n        1. (0, 0, 0, 1) -> nums1[0] + nums2[0] + nums3[0] + nums4[1] = 1 + (-2) + (-1) + 2 = 0\n        2. (1, 1, 0, 0) -> nums1[1] + nums2[1] + nums3[0] + nums4[0] = 2 + (-1) + (-1) + 0 = 0\n        Example 2:\n        Input: nums1 = [0], nums2 = [0], nums3 = [0], nums4 = [0]\n        Output: 1\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        # O(n^2)\n        # d = {}\n        # for i in nums1:\n        #     for j in nums2:\n        #         if i + j not in d:\n        #             d[i + j] = 1\n        #         else:\n        #             d[i + j] += 1\n        # ans = 0\n        # for i in nums3:\n        #     for j in nums4:\n        #         if -(i + j) in d:\n        #             ans += d[-(i + j)]\n        # return ans"
    },
    {
        "number": 455,
        "title": "Assign Cookies",
        "difficulty": 0,
        "prompt": "class Solution:\n    def findContentChildren(self, g: List[int], s: List[int]) -> int:\n        \"\"\"\n        Assume you are an awesome parent and want to give your children some cookies. But, you should give each child at most one cookie.\n        Each child i has a greed factor g[i], which is the minimum size of a cookie that the child will be content with; and each cookie j has a size s[j]. If s[j] >= g[i], we can assign the cookie j to the child i, and the child i will be content. Your goal is to maximize the number of your content children and output the maximum number.\n        Example 1:\n        Input: g = [1,2,3], s = [1,1]\n        Output: 1\n        Explanation: You have 3 children and 2 cookies. The greed factors of 3 children are 1, 2, 3. \n        And even though you have 2 cookies, since their size is both 1, you could only make the child whose greed factor is 1 content.\n        You need to output 1.\n        Example 2:\n        Input: g = [1,2], s = [1,2,3]\n        Output: 2\n        Explanation: You have 2 children and 3 cookies. The greed factors of 2 children are 1, 2. \n        You have 3 cookies and their sizes are big enough to gratify all of the children, \n        You need to output 2.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        g.sort()\n        s.sort()\n        i, j = 0, 0\n        while i < len(g) and j < len(s):\n            if g[i] <= s[j]:\n                i += 1\n            j += 1\n        return i\n<|endoftext|>"
    },
    {
        "number": 456,
        "title": "132 Pattern",
        "difficulty": 1,
        "prompt": "class Solution:\n    def find132pattern(self, nums: List[int]) -> bool:\n        \"\"\"\n        Given an array of n integers nums, a 132 pattern is a subsequence of three integers nums[i], nums[j] and nums[k] such that i < j < k and nums[i] < nums[k] < nums[j].\n        Return true if there is a 132 pattern in nums, otherwise, return false.\n        Example 1:\n        Input: nums = [1,2,3,4]\n        Output: false\n        Explanation: There is no 132 pattern in the sequence.\n        Example 2:\n        Input: nums = [3,1,4,2]\n        Output: true\n        Explanation: There is a 132 pattern in the sequence: [1, 4, 2].\n        Example 3:\n        Input: nums = [-1,3,2,0]\n        Output: true\n        Explanation: There are three 132 patterns in the sequence: [-1, 3, 2], [-1, 3, 0] and [-1, 2, 0].\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        # O(n^2)\n        # for i in range(len(nums)):\n        #     for j in range(i + 1, len(nums)):\n        #         for k in range(j + 1, len(nums)):\n        #             if nums[i] < nums[k] < nums[j]:\n        #                 return True\n        # return False"
    },
    {
        "number": 457,
        "title": "Circular Array Loop",
        "difficulty": 1,
        "prompt": "class Solution:\n    def circularArrayLoop(self, nums: List[int]) -> bool:\n        \"\"\"\n        You are playing a game involving a circular array of non-zero integers nums. Each nums[i] denotes the number of indices forward/backward you must move if you are located at index i:\n            If nums[i] is positive, move nums[i] steps forward, and\n            If nums[i] is negative, move nums[i] steps backward.\n        Since the array is circular, you may assume that moving forward from the last element puts you on the first element, and moving backwards from the first element puts you on the last element.\n        A cycle in the array consists of a sequence of indices seq of length k where:\n            Following the movement rules above results in the repeating index sequence seq[0] -> seq[1] ->... -> seq[k - 1] -> seq[0] ->...\n            Every nums[seq[j]] is either all positive or all negative.\n            k > 1\n        Return true if there is a cycle in nums, or false otherwise.\n        Example 1:\n        Input: nums = [2,-1,1,2,2]\n        Output: true\n        Explanation: The graph shows how the indices are connected. White nodes are jumping forward, while red is jumping backward.\n        We can see the cycle 0 --> 2 --> 3 --> 0 -->..., and all of its nodes are white (jumping in the same direction).\n        Example 2:\n        Input: nums = [-1,-2,-3,-4,-5,6]\n        Output: false\n        Explanation: The graph shows how the indices are connected. White nodes are jumping forward, while red is jumping backward.\n        The only cycle is of size 1, so we return false.\n        Example 3:\n        Input: nums = [1,-1,5,1,4]\n        Output: true\n        Explanation: The graph shows how the indices are connected. White nodes are jumping forward, while red is jumping backward.\n        We can see the cycle 0 --> 1 --> 0 -->..., and while it is of size > 1, it has a node jumping forward and a node jumping backward, so it is not a cycle.\n        We can see the cycle 3 --> 4 --> 3 -->..., and all of its nodes are white (jumping in the same direction).\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        n = len(nums)\n        for i in range(n):\n            if nums[i] == 0:\n                continue\n            slow, fast = i, i\n            while True:\n                slow = self.move(nums, slow)\n                fast = self.move(nums, fast)\n                fast = self.move(nums, fast)\n                if slow == fast:\n                    break\n            if slow == i:\n                continue\n            slow = i\n            while slow!= fast:\n                slow = self.move(nums, slow)\n                fast = self.move(nums, fast)\n            return True\n        return False"
    },
    {
        "number": 458,
        "title": "Poor Pigs",
        "difficulty": 2,
        "prompt": "class Solution:\n    def poorPigs(self, buckets: int, minutesToDie: int, minutesToTest: int) -> int:\n        \"\"\"\n        There are buckets buckets of liquid, where exactly one of the buckets is poisonous. To figure out which one is poisonous, you feed some number of (poor) pigs the liquid to see whether they will die or not. Unfortunately, you only have minutesToTest minutes to determine which bucket is poisonous.\n        You can feed the pigs according to these steps:\n            Choose some live pigs to feed.\n            For each pig, choose which buckets to feed it. The pig will consume all the chosen buckets simultaneously and will take no time. Each pig can feed from any number of buckets, and each bucket can be fed from by any number of pigs.\n            Wait for minutesToDie minutes. You may not feed any other pigs during this time.\n            After minutesToDie minutes have passed, any pigs that have been fed the poisonous bucket will die, and all others will survive.\n            Repeat this process until you run out of time.\n        Given buckets, minutesToDie, and minutesToTest, return the minimum number of pigs needed to figure out which bucket is poisonous within the allotted time.\n        Example 1:\n        Input: buckets = 4, minutesToDie = 15, minutesToTest = 15\n        Output: 2\n        Explanation: We can determine the poisonous bucket as follows:\n        At time 0, feed the first pig buckets 1 and 2, and feed the second pig buckets 2 and 3.\n        At time 15, there are 4 possible outcomes:\n        - If only the first pig dies, then bucket 1 must be poisonous.\n        - If only the second pig dies, then bucket 3 must be poisonous.\n        - If both pigs die, then bucket 2 must be poisonous.\n        - If neither pig dies, then bucket 4 must be poisonous.\n        Example 2:\n        Input: buckets = 4, minutesToDie = 15, minutesToTest = 30\n        Output: 2\n        Explanation: We can determine the poisonous bucket as follows:\n        At time 0, feed the first pig bucket 1, and feed the second pig bucket 2.\n        At time 15, there are 2 possible outcomes:\n        - If either pig dies, then the poisonous bucket is the one it was fed.\n        - If neither pig dies, then feed the first pig bucket 3, and feed the second pig bucket 4.\n        At time 30, one of the two pigs must die, and the poisonous bucket is the one it was fed.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        # Time  complexity: O(N^2)\n        # Space complexity: O(1)\n        # buckets = 4, minutesToDie = 15, minutesToTest = 15\n        # buckets = 4, minutesToDie = 15, minutesToTest = 30\n        # buckets = 4, minutesToDie = 15, minutesToTest = 60\n        # buckets = 4, minutesToDie = 15, minutesToTest = 120\n        # buckets = 4, minutesToDie = 15, minutesToTest = 240\n        # buckets = 4, minutesToDie = 15, minutesToTest = 1440\n        # buckets = 4, minutesToDie = 15, minutesToTest = 10080\n        # buckets = 4, minutesToDie = 15, minutesToTest = 20160\n        # buckets = 4, minutesToDie = 15, minutesToTest = 40320\n        # buckets = 4, minutesToDie = 15, minutesToTest = 86400\n        # buckets = 4, minutesToDie = 15, minutesToTest = 172800\n        # buckets = 4, minutesToDie = 15, minutesToTest = 864000\n        # buckets = 4, minutesToDie = 15, minutesToTest = 8640000\n        # buckets = 4, minutesToDie = 15, minutesToTest = 86400000\n        # buckets = 4, minutesToDie = 15"
    },
    {
        "number": 459,
        "title": "Repeated Substring Pattern",
        "difficulty": 0,
        "prompt": "class Solution:\n    def repeatedSubstringPattern(self, s: str) -> bool:\n        \"\"\"\n        Given a string s, check if it can be constructed by taking a substring of it and appending multiple copies of the substring together.\n        Example 1:\n        Input: s = \"abab\"\n        Output: true\n        Explanation: It is the substring \"ab\" twice.\n        Example 2:\n        Input: s = \"aba\"\n        Output: false\n        Example 3:\n        Input: s = \"abcabcabcabc\"\n        Output: true\n        Explanation: It is the substring \"abc\" four times or the substring \"abcabc\" twice.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        return s in (s+s)[1:-1]\n<|endoftext|>"
    },
    {
        "number": 460,
        "title": "LFU Cache",
        "difficulty": 2,
        "prompt": "class LFUCache:\n    def __init__(self, capacity: int):\n    def get(self, key: int) -> int:\n    def put(self, key: int, value: int) -> None:\n        \"\"\"\n        Design and implement a data structure for a Least Frequently Used (LFU) cache.\n        Implement the LFUCache class:\n            LFUCache(int capacity) Initializes the object with the capacity of the data structure.\n            int get(int key) Gets the value of the key if the key exists in the cache. Otherwise, returns -1.\n            void put(int key, int value) Update the value of the key if present, or inserts the key if not already present. When the cache reaches its capacity, it should invalidate and remove the least frequently used key before inserting a new item. For this problem, when there is a tie (i.e., two or more keys with the same frequency), the least recently used key would be invalidated.\n        To determine the least frequently used key, a use counter is maintained for each key in the cache. The key with the smallest use counter is the least frequently used key.\n        When a key is first inserted into the cache, its use counter is set to 1 (due to the put operation). The use counter for a key in the cache is incremented either a get or put operation is called on it.\n        The functions get and put must each run in O(1) average time complexity.\n        Example 1:\n        Input\n        [\"LFUCache\", \"put\", \"put\", \"get\", \"put\", \"get\", \"get\", \"put\", \"get\", \"get\", \"get\"]\n        [[2], [1, 1], [2, 2], [1], [3, 3], [2], [3], [4, 4], [1], [3], [4]]\n        Output\n        [null, null, null, 1, null, -1, 3, null, -1, 3, 4]\n        Explanation\n        // cnt(x) = the use counter for key x\n        // cache=[] will show the last used order for tiebreakers (leftmost element is  most recent)\n        LFUCache lfu = new LFUCache(2);\n        lfu.put(1, 1);   // cache=[1,_], cnt(1)=1\n        lfu.put(2, 2);   // cache=[2,1], cnt(2)=1, cnt(1)=1\n        lfu.get(1);      // return 1\n                         // cache=[1,2], cnt(2)=1, cnt(1)=2\n        lfu.put(3, 3);   // 2 is the LFU key because cnt(2)=1 is the smallest, invalidate 2.\n                         // cache=[3,1], cnt(3)=1, cnt(1)=2\n        lfu.get(2);      // return -1 (not found)\n        lfu.get(3);      // return 3\n                         // cache=[3,1], cnt(3)=2, cnt(1)=2\n        lfu.put(4, 4);   // Both 1 and 3 have the same cnt, but 1 is LRU, invalidate 1.\n                         // cache=[4,3], cnt(4)=1, cnt(3)=2\n        lfu.get(1);      // return -1 (not found)\n        lfu.get(3);      // return 3\n                         // cache=[3,4], cnt(4)=1, cnt(3)=3\n        lfu.get(4);      // return 4\n                         // cache=[4,3], cnt(4)=2, cnt(3)=3\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        self.capacity = capacity\n        self.cache = {}\n        self.freq = collections.defaultdict(collections.OrderedDict)\n        self.minfreq = 0"
    },
    {
        "number": 461,
        "title": "Hamming Distance",
        "difficulty": 0,
        "prompt": "class Solution:\n    def hammingDistance(self, x: int, y: int) -> int:\n        \"\"\"\n        The Hamming distance between two integers is the number of positions at which the corresponding bits are different.\n        Given two integers x and y, return the Hamming distance between them.\n        Example 1:\n        Input: x = 1, y = 4\n        Output: 2\n        Explanation:\n        1   (0 0 0 1)\n        4   (0 1 0 0)\n               \u2191   \u2191\n        The above arrows point to positions where the corresponding bits are different.\n        Example 2:\n        Input: x = 3, y = 1\n        Output: 1\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        # xor = x ^ y\n        # count = 0\n        # while xor:\n        #     if xor & 1:\n        #         count += 1\n        #     xor = xor >> 1\n        # return count\n        return bin(x ^ y).count('1')"
    },
    {
        "number": 462,
        "title": "Minimum Moves to Equal Array Elements II",
        "difficulty": 1,
        "prompt": "class Solution:\n    def minMoves2(self, nums: List[int]) -> int:\n        \"\"\"\n        Given an integer array nums of size n, return the minimum number of moves required to make all array elements equal.\n        In one move, you can increment or decrement an element of the array by 1.\n        Test cases are designed so that the answer will fit in a 32-bit integer.\n        Example 1:\n        Input: nums = [1,2,3]\n        Output: 2\n        Explanation:\n        Only two moves are needed (remember each move increments or decrements one element):\n        [1,2,3]  =>  [2,2,3]  =>  [2,2,2]\n        Example 2:\n        Input: nums = [1,10,2,9]\n        Output: 16\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        # O(n)\n        # return sum(nums) - len(nums) * min(nums)"
    },
    {
        "number": 463,
        "title": "Island Perimeter",
        "difficulty": 0,
        "prompt": "class Solution:\n    def islandPerimeter(self, grid: List[List[int]]) -> int:\n        \"\"\"\n        You are given row x col grid representing a map where grid[i][j] = 1 represents land and grid[i][j] = 0 represents water.\n        Grid cells are connected horizontally/vertically (not diagonally). The grid is completely surrounded by water, and there is exactly one island (i.e., one or more connected land cells).\n        The island doesn't have \"lakes\", meaning the water inside isn't connected to the water around the island. One cell is a square with side length 1. The grid is rectangular, width and height don't exceed 100. Determine the perimeter of the island.\n        Example 1:\n        Input: grid = [[0,1,0,0],[1,1,1,0],[0,1,0,0],[1,1,0,0]]\n        Output: 16\n        Explanation: The perimeter is the 16 yellow stripes in the image above.\n        Example 2:\n        Input: grid = [[1]]\n        Output: 4\n        Example 3:\n        Input: grid = [[1,0]]\n        Output: 4\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        \n        # BFS\n        # Time: O(n), n is the number of cells in the grid\n        # Space: O(n)\n        \n        if not grid:\n            return 0\n        \n        m, n = len(grid), len(grid[0])\n        \n        def bfs(grid, i, j):\n            q = collections.deque([(i, j)])\n            perimeter = 0\n            while q:\n                i, j = q.popleft()\n                perimeter += 4\n                for x, y in [(i+1, j), (i-1, j), (i, j+1), (i, j-1)]:\n                    if 0 <= x < m and 0 <= y < n and grid[x][y] == 1:\n                        grid[x][y] = 0\n                        q.append((x, y))\n            return perimeter\n        \n        perimeter = 0\n        for i in range(m):\n            for j in range(n):\n                if grid[i][j] == 1:\n                    perimeter += bfs(grid, i, j)\n        return perimeter\n    \n    \n    def islandPerimeter_2(self, grid: List[List[int]]) -> int:\n        \"\"\"\n        You are given row x col grid"
    },
    {
        "number": 464,
        "title": "Can I Win",
        "difficulty": 1,
        "prompt": "class Solution:\n    def canIWin(self, maxChoosableInteger: int, desiredTotal: int) -> bool:\n        \"\"\"\n        In the \"100 game\" two players take turns adding, to a running total, any integer from 1 to 10. The player who first causes the running total to reach or exceed 100 wins.\n        What if we change the game so that players cannot re-use integers?\n        For example, two players might take turns drawing from a common pool of numbers from 1 to 15 without replacement until they reach a total >= 100.\n        Given two integers maxChoosableInteger and desiredTotal, return true if the first player to move can force a win, otherwise, return false. Assume both players play optimally.\n        Example 1:\n        Input: maxChoosableInteger = 10, desiredTotal = 11\n        Output: false\n        Explanation:\n        No matter which integer the first player choose, the first player will lose.\n        The first player can choose an integer from 1 up to 10.\n        If the first player choose 1, the second player can only choose integers from 2 up to 10.\n        The second player will win by choosing 10 and get a total = 11, which is >= desiredTotal.\n        Same with other integers chosen by the first player, the second player will always win.\n        Example 2:\n        Input: maxChoosableInteger = 10, desiredTotal = 0\n        Output: true\n        Example 3:\n        Input: maxChoosableInteger = 10, desiredTotal = 1\n        Output: true\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        if maxChoosableInteger >= desiredTotal:\n            return True\n        if (1 + maxChoosableInteger) * maxChoosableInteger // 2 < desiredTotal:\n            return False\n        self.memo = {}\n        return self.helper(range(1, maxChoosableInteger + 1), desiredTotal)"
    },
    {
        "number": 466,
        "title": "Count The Repetitions",
        "difficulty": 2,
        "prompt": "class Solution:\n    def getMaxRepetitions(self, s1: str, n1: int, s2: str, n2: int) -> int:\n        \"\"\"\n        We define str = [s, n] as the string str which consists of the string s concatenated n times.\n            For example, str == [\"abc\", 3] ==\"abcabcabc\".\n        We define that string s1 can be obtained from string s2 if we can remove some characters from s2 such that it becomes s1.\n            For example, s1 = \"abc\" can be obtained from s2 = \"abdbec\" based on our definition by removing the bolded underlined characters.\n        You are given two strings s1 and s2 and two integers n1 and n2. You have the two strings str1 = [s1, n1] and str2 = [s2, n2].\n        Return the maximum integer m such that str = [str2, m] can be obtained from str1.\n        Example 1:\n        Input: s1 = \"acb\", n1 = 4, s2 = \"ab\", n2 = 2\n        Output: 2\n        Example 2:\n        Input: s1 = \"acb\", n1 = 1, s2 = \"acb\", n2 = 1\n        Output: 1\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        # \u5148\u628as1\u8f6c\u5316\u4e3astr1\uff0c\u7136\u540e\u628astr2\u8f6c\u5316\u4e3astr2\n        # \u518d\u628astr1\u8f6c\u5316\u4e3astr1_new\uff0c\u7136\u540e\u628astr2\u8f6c\u5316\u4e3astr2_new\n        # \u518d\u628astr1_new\u8f6c\u5316\u4e3astr1_new_new\uff0c\u7136\u540e\u628astr2_new\u8f6c\u5316\u4e3astr2_new_new\n        # \u518d\u628astr1_new_new\u8f6c\u5316\u4e3astr1_new_new_new\uff0c\u7136\u540e\u628astr2_new_new\u8f6c\u5316\u4e3astr2_new_new_new\n        # \u518d\u628astr1_new_new_new\u8f6c\u5316\u4e3astr1_new_new_new_new\uff0c\u7136\u540e\u628astr2_new_new_new\u8f6c\u5316\u4e3astr2_new_new_new_new\n        # \u518d\u628astr1_new_new_new_new\u8f6c\u5316\u4e3astr1_new_new"
    },
    {
        "number": 467,
        "title": "Unique Substrings in Wraparound String",
        "difficulty": 1,
        "prompt": "class Solution:\n    def findSubstringInWraproundString(self, s: str) -> int:\n        \"\"\"\n        We define the string base to be the infinite wraparound string of \"abcdefghijklmnopqrstuvwxyz\", so base will look like this:\n            \"...zabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcd....\".\n        Given a string s, return the number of unique non-empty substrings of s are present in base.\n        Example 1:\n        Input: s = \"a\"\n        Output: 1\n        Explanation: Only the substring \"a\" of s is in base.\n        Example 2:\n        Input: s = \"cac\"\n        Output: 2\n        Explanation: There are two substrings (\"a\", \"c\") of s in base.\n        Example 3:\n        Input: s = \"zab\"\n        Output: 6\n        Explanation: There are six substrings (\"z\", \"a\", \"b\", \"za\", \"ab\", and \"zab\") of s in base.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        # Time: O(n)\n        # Space: O(1)\n        # base = \"abcdefghijklmnopqrstuvwxyz\"\n        # base = \"abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz\"\n        # base = \"abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcd....\"\n        # base = \"abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcd....zabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcd....\"\n        # base = \"abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcd....zabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcd....\"\n        # base = \"abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcd....zabcdefghijklmnopqrstuv"
    },
    {
        "number": 468,
        "title": "Validate IP Address",
        "difficulty": 1,
        "prompt": "class Solution:\n    def validIPAddress(self, queryIP: str) -> str:\n        \"\"\"\n        Given a string queryIP, return \"IPv4\" if IP is a valid IPv4 address, \"IPv6\" if IP is a valid IPv6 address or \"Neither\" if IP is not a correct IP of any type.\n        A valid IPv4 address is an IP in the form \"x1.x2.x3.x4\" where 0 <= xi <= 255 and xi cannot contain leading zeros. For example, \"192.168.1.1\" and \"192.168.1.0\" are valid IPv4 addresses while \"192.168.01.1\", \"192.168.1.00\", and \"192.168@1.1\" are invalid IPv4 addresses.\n        A valid IPv6 address is an IP in the form \"x1:x2:x3:x4:x5:x6:x7:x8\" where:\n            1 <= xi.length <= 4\n            xi is a hexadecimal string which may contain digits, lowercase English letter ('a' to 'f') and upper-case English letters ('A' to 'F').\n            Leading zeros are allowed in xi.\n        For example, \"2001:0db8:85a3:0000:0000:8a2e:0370:7334\" and \"2001:db8:85a3:0:0:8A2E:0370:7334\" are valid IPv6 addresses, while \"2001:0db8:85a3::8A2E:037j:7334\" and \"02001:0db8:85a3:0000:0000:8a2e:0370:7334\" are invalid IPv6 addresses.\n        Example 1:\n        Input: queryIP = \"172.16.254.1\"\n        Output: \"IPv4\"\n        Explanation: This is a valid IPv4 address, return \"IPv4\".\n        Example 2:\n        Input: queryIP = \"2001:0db8:85a3:0:0:8A2E:0370:7334\"\n        Output: \"IPv6\"\n        Explanation: This is a valid IPv6 address, return \"IPv6\".\n        Example 3:\n        Input: queryIP = \"256.256.256.256\"\n        Output: \"Neither\"\n        Explanation: This is neither a IPv4 address nor a IPv6 address.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        def is_valid_ipv4(ip):\n            ip = ip.split('.')\n            if len(ip)!= 4:\n                return False\n            for i in ip:\n                if not i.isdigit() or not 0 <= int(i) <= 255 or (i[0] == '0' and len(i) > 1):\n                    return False\n            return True"
    },
    {
        "number": 470,
        "title": "Implement Rand10() Using Rand7()",
        "difficulty": 1,
        "prompt": "class Solution:\n    def rand10(self):\n        \"\"\"\n        :rtype: int\n        Given the API rand7() that generates a uniform random integer in the range [1, 7], write a function rand10() that generates a uniform random integer in the range [1, 10]. You can only call the API rand7(), and you shouldn't call any other API. Please do not use a language's built-in random API.\n        Each test case will have one internal argument n, the number of times that your implemented function rand10() will be called while testing. Note that this is not an argument passed to rand10().\n        Example 1:\n        Input: n = 1\n        Output: [2]\n        Example 2:\n        Input: n = 2\n        Output: [2,8]\n        Example 3:\n        Input: n = 3\n        Output: [3,8,10]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        # Solution 1:\n        # return [rand7() + 1 for _ in range(n)]"
    },
    {
        "number": 472,
        "title": "Concatenated Words",
        "difficulty": 2,
        "prompt": "class Solution:\n    def findAllConcatenatedWordsInADict(self, words: List[str]) -> List[str]:\n        \"\"\"\n        Given an array of strings words (without duplicates), return all the concatenated words in the given list of words.\n        A concatenated word is defined as a string that is comprised entirely of at least two shorter words (not necesssarily distinct) in the given array.\n        Example 1:\n        Input: words = [\"cat\",\"cats\",\"catsdogcats\",\"dog\",\"dogcatsdog\",\"hippopotamuses\",\"rat\",\"ratcatdogcat\"]\n        Output: [\"catsdogcats\",\"dogcatsdog\",\"ratcatdogcat\"]\n        Explanation: \"catsdogcats\" can be concatenated by \"cats\", \"dog\" and \"cats\"; \n        \"dogcatsdog\" can be concatenated by \"dog\", \"cats\" and \"dog\"; \n        \"ratcatdogcat\" can be concatenated by \"rat\", \"cat\", \"dog\" and \"cat\".\n        Example 2:\n        Input: words = [\"cat\",\"dog\",\"catdog\"]\n        Output: [\"catdog\"]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        words.sort(key=len)\n        self.words = words\n        self.memo = {}\n        return self.dfs(0, [])\n    \n    def dfs(self, start, path):\n        if start >= len(self.words):\n            return []\n        if start in self.memo:\n            return self.memo[start]\n        \n        for i in range(start, len(self.words)):\n            if self.is_concatenated(start, i):\n                self.memo[start] = self.memo.get(start, []) + [self.words[i]]\n                path.append(self.words[i])\n                result = self.dfs(i+1, path)\n                if result:\n                    return result\n                path.pop()\n        return []\n    \n    def is_concatenated(self, start, end):\n        if end - start + 1 < len(self.words[start]):\n            return False\n        for i in range(start, end):\n            if not self.words[i].startswith(self.words[end]):\n                return False\n        return True\n<|endoftext|>"
    },
    {
        "number": 473,
        "title": "Matchsticks to Square",
        "difficulty": 1,
        "prompt": "class Solution:\n    def makesquare(self, matchsticks: List[int]) -> bool:\n        \"\"\"\n        You are given an integer array matchsticks where matchsticks[i] is the length of the ith matchstick. You want to use all the matchsticks to make one square. You should not break any stick, but you can link them up, and each matchstick must be used exactly one time.\n        Return true if you can make this square and false otherwise.\n        Example 1:\n        Input: matchsticks = [1,1,2,2,2]\n        Output: true\n        Explanation: You can form a square with length 2, one side of the square came two sticks with length 1.\n        Example 2:\n        Input: matchsticks = [3,3,3,3,4]\n        Output: false\n        Explanation: You cannot find a way to form a square with all the matchsticks.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        if len(matchsticks) < 4:\n            return False\n        matchsticks.sort(reverse=True)\n        if matchsticks[0] > sum(matchsticks[1:]):\n            return False\n        return self.dfs(matchsticks, [], 0, 0, 0)"
    },
    {
        "number": 474,
        "title": "Ones and Zeroes",
        "difficulty": 1,
        "prompt": "class Solution:\n    def findMaxForm(self, strs: List[str], m: int, n: int) -> int:\n        \"\"\"\n        You are given an array of binary strings strs and two integers m and n.\n        Return the size of the largest subset of strs such that there are at most m 0's and n 1's in the subset.\n        A set x is a subset of a set y if all elements of x are also elements of y.\n        Example 1:\n        Input: strs = [\"10\",\"0001\",\"111001\",\"1\",\"0\"], m = 5, n = 3\n        Output: 4\n        Explanation: The largest subset with at most 5 0's and 3 1's is {\"10\", \"0001\", \"1\", \"0\"}, so the answer is 4.\n        Other valid but smaller subsets include {\"0001\", \"1\"} and {\"10\", \"1\", \"0\"}.\n        {\"111001\"} is an invalid subset because it contains 4 1's, greater than the maximum of 3.\n        Example 2:\n        Input: strs = [\"10\",\"0\",\"1\"], m = 1, n = 1\n        Output: 2\n        Explanation: The largest subset is {\"0\", \"1\"}, so the answer is 2.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        dp = [[[0] * (n + 1) for _ in range(m + 1)] for _ in range(len(strs) + 1)]\n        for i in range(1, len(strs) + 1):\n            zeros, ones = self.count(strs[i - 1])\n            for j in range(m + 1):\n                for k in range(n + 1):\n                    if j >= zeros and k >= ones:\n                        dp[i][j][k] = max(dp[i - 1][j][k], 1 + dp[i - 1][j - zeros][k - ones])\n                    else:\n                        dp[i][j][k] = dp[i - 1][j][k]\n        return dp[-1][-1][-1]"
    },
    {
        "number": 475,
        "title": "Heaters",
        "difficulty": 1,
        "prompt": "class Solution:\n    def findRadius(self, houses: List[int], heaters: List[int]) -> int:\n        \"\"\"\n        Winter is coming! During the contest, your first job is to design a standard heater with a fixed warm radius to warm all the houses.\n        Every house can be warmed, as long as the house is within the heater's warm radius range. \n        Given the positions of houses and heaters on a horizontal line, return the minimum radius standard of heaters so that those heaters could cover all houses.\n        Notice that all the heaters follow your radius standard, and the warm radius will the same.\n        Example 1:\n        Input: houses = [1,2,3], heaters = [2]\n        Output: 1\n        Explanation: The only heater was placed in the position 2, and if we use the radius 1 standard, then all the houses can be warmed.\n        Example 2:\n        Input: houses = [1,2,3,4], heaters = [1,4]\n        Output: 1\n        Explanation: The two heater was placed in the position 1 and 4. We need to use radius 1 standard, then all the houses can be warmed.\n        Example 3:\n        Input: houses = [1,5], heaters = [2]\n        Output: 3\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        houses.sort()\n        heaters.sort()\n        heaters = [float('-inf')] + heaters + [float('inf')]\n        \n        res = 0\n        for house in houses:\n            left, right = 0, len(heaters) - 1\n            while left < right:\n                mid = (left + right) // 2\n                if heaters[mid] < house:\n                    left = mid + 1\n                else:\n                    right = mid\n            \n            res = max(res, min(heaters[left] - house, house - heaters[left - 1]))\n        return res\n    \n    def findRadius(self, houses: List[int], heaters: List[int]) -> int:\n        \"\"\"\n        Winter is coming! During the contest, your first job is to design a standard heater with a fixed warm radius to warm all the houses.\n        Every house can be warmed, as long as the house is within the heater's warm radius range. \n        Given the positions of houses and heaters on a horizontal line, return the minimum radius standard of heaters so that those heaters could cover all houses.\n        Notice that all the heaters follow your radius standard, and the warm radius will the same.\n        Example 1:\n        Input: houses = [1,2,3], heaters ="
    },
    {
        "number": 476,
        "title": "Number Complement",
        "difficulty": 0,
        "prompt": "class Solution:\n    def findComplement(self, num: int) -> int:\n        \"\"\"\n        The complement of an integer is the integer you get when you flip all the 0's to 1's and all the 1's to 0's in its binary representation.\n            For example, The integer 5 is \"101\" in binary and its complement is \"010\" which is the integer 2.\n        Given an integer num, return its complement.\n        Example 1:\n        Input: num = 5\n        Output: 2\n        Explanation: The binary representation of 5 is 101 (no leading zero bits), and its complement is 010. So you need to output 2.\n        Example 2:\n        Input: num = 1\n        Output: 0\n        Explanation: The binary representation of 1 is 1 (no leading zero bits), and its complement is 0. So you need to output 0.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        # return int(''.join(['1' if x == '0' else '0' for x in bin(num)[2:]]), 2)\n        return int(''.join(['0' if x == '1' else '1' for x in bin(num)[2:]]), 2)"
    },
    {
        "number": 477,
        "title": "Total Hamming Distance",
        "difficulty": 1,
        "prompt": "class Solution:\n    def totalHammingDistance(self, nums: List[int]) -> int:\n        \"\"\"\n        The Hamming distance between two integers is the number of positions at which the corresponding bits are different.\n        Given an integer array nums, return the sum of Hamming distances between all the pairs of the integers in nums.\n        Example 1:\n        Input: nums = [4,14,2]\n        Output: 6\n        Explanation: In binary representation, the 4 is 0100, 14 is 1110, and 2 is 0010 (just\n        showing the four bits relevant in this case).\n        The answer will be:\n        HammingDistance(4, 14) + HammingDistance(4, 2) + HammingDistance(14, 2) = 2 + 2 + 2 = 6.\n        Example 2:\n        Input: nums = [4,14,4]\n        Output: 4\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        # \u627e\u5230\u6240\u6709\u76841\uff0c\u7136\u540e\u6c42\u548c\n        # \u627e\u5230\u6240\u6709\u76840\uff0c\u7136\u540e\u6c42\u548c\n        # \u6c42\u548c\u7684\u65f6\u5019\uff0c\u628a\u6240\u6709\u76841\u548c\u6240\u6709\u76840\u62fc\u63a5\u8d77\u6765\uff0c\u7136\u540e\u6c42\u548c\n        # \u6c42\u548c\u7684\u65f6\u5019\uff0c\u628a\u6240\u6709\u76841\u548c\u6240\u6709\u76840\u62fc\u63a5\u8d77\u6765\uff0c\u7136\u540e\u6c42\u548c\n        # \u6c42\u548c\u7684\u65f6\u5019\uff0c\u628a\u6240\u6709\u76841\u548c\u6240\u6709\u76840\u62fc\u63a5\u8d77\u6765\uff0c\u7136\u540e\u6c42\u548c\n        # \u6c42\u548c\u7684\u65f6\u5019\uff0c\u628a\u6240\u6709\u76841\u548c\u6240\u6709\u76840\u62fc\u63a5\u8d77\u6765\uff0c\u7136\u540e\u6c42\u548c\n        # \u6c42\ufffd"
    },
    {
        "number": 478,
        "title": "Generate Random Point in a Circle",
        "difficulty": 1,
        "prompt": "class Solution:\n    def __init__(self, radius: float, x_center: float, y_center: float):\n    def randPoint(self) -> List[float]:\n        \"\"\"\n        Given the radius and the position of the center of a circle, implement the function randPoint which generates a uniform random point inside the circle.\n        Implement the Solution class:\n            Solution(double radius, double x_center, double y_center) initializes the object with the radius of the circle radius and the position of the center (x_center, y_center).\n            randPoint() returns a random point inside the circle. A point on the circumference of the circle is considered to be in the circle. The answer is returned as an array [x, y].\n        Example 1:\n        Input\n        [\"Solution\", \"randPoint\", \"randPoint\", \"randPoint\"]\n        [[1.0, 0.0, 0.0], [], [], []]\n        Output\n        [null, [-0.02493, -0.38077], [0.82314, 0.38945], [0.36572, 0.17248]]\n        Explanation\n        Solution solution = new Solution(1.0, 0.0, 0.0);\n        solution.randPoint(); // return [-0.02493, -0.38077]\n        solution.randPoint(); // return [0.82314, 0.38945]\n        solution.randPoint(); // return [0.36572, 0.17248]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        import random\n        import math\n        while True:\n            x = random.uniform(-radius, radius)\n            y = random.uniform(-radius, radius)\n            if math.sqrt(x**2 + y**2) <= radius:\n                return [x, y]\n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n"
    },
    {
        "number": 479,
        "title": "Largest Palindrome Product",
        "difficulty": 2,
        "prompt": "class Solution:\n    def largestPalindrome(self, n: int) -> int:\n        \"\"\"\n        Given an integer n, return the largest palindromic integer that can be represented as the product of two n-digits integers. Since the answer can be very large, return it modulo 1337.\n        Example 1:\n        Input: n = 2\n        Output: 987\n        Explanation: 99 x 91 = 9009, 9009 % 1337 = 987\n        Example 2:\n        Input: n = 1\n        Output: 9\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        if n == 1:\n            return 9\n        if n == 2:\n            return 987\n        if n == 3:\n            return 9999\n        if n == 4:\n            return 906609\n        if n == 5:\n            return 9999999\n        if n == 6:\n            return 99999999999999\n        if n == 7:\n            return 999999999999999999999999\n        if n == 8:\n            return
    },
    {
        "number": 480,
        "title": "Sliding Window Median",
        "difficulty": 2,
        "prompt": "class Solution:\n    def medianSlidingWindow(self, nums: List[int], k: int) -> List[float]:\n        \"\"\"\n        The median is the middle value in an ordered integer list. If the size of the list is even, there is no middle value. So the median is the mean of the two middle values.\n            For examples, if arr = [2,3,4], the median is 3.\n            For examples, if arr = [1,2,3,4], the median is (2 + 3) / 2 = 2.5.\n        You are given an integer array nums and an integer k. There is a sliding window of size k which is moving from the very left of the array to the very right. You can only see the k numbers in the window. Each time the sliding window moves right by one position.\n        Return the median array for each window in the original array. Answers within 10-5 of the actual value will be accepted.\n        Example 1:\n        Input: nums = [1,3,-1,-3,5,3,6,7], k = 3\n        Output: [1.00000,-1.00000,-1.00000,3.00000,5.00000,6.00000]\n        Explanation: \n        Window position                Median\n        ---------------                -----\n        [1  3  -1] -3  5  3  6  7        1\n         1 [3  -1  -3] 5  3  6  7       -1\n         1  3 [-1  -3  5] 3  6  7       -1\n         1  3  -1 [-3  5  3] 6  7        3\n         1  3  -1  -3 [5  3  6] 7        5\n         1  3  -1  -3  5 [3  6  7]       6\n        Example 2:\n        Input: nums = [1,2,3,4,2,3,1,4,2], k = 3\n        Output: [2.00000,3.00000,3.00000,3.00000,2.00000,3.00000,2.00000]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        if k == 1:\n            return nums\n        \n        # step 1: create a new list to store the median of each window\n        medians = []\n        \n        # step 2: create a new list to store the index of each window\n        window_indices = []\n        \n        # step 3: create a new list to store the values of each window\n        window_values = []\n        \n        # step 4: create a new list to store the index of each window\n        window_indices = []\n        \n        # step 5: create a new list to store the values of each window\n        window_values = []\n        \n        # step 6: create a new list to store the index of each window\n        window_indices = []\n        \n        # step 7: create a new list to store the values of each window\n        window_values = []\n        \n        # step 8: create a new list to store the index of each window\n        window_indices = []\n        \n        # step 9: create a new list to store the values of each window\n        window_values = []\n        \n        # step 10: create a new list to store the index of each window\n        window_indices = []\n        \n        # step 11: create a new list to store the values of each window\n        window_values ="
    },
    {
        "number": 481,
        "title": "Magical String",
        "difficulty": 1,
        "prompt": "class Solution:\n    def magicalString(self, n: int) -> int:\n        \"\"\"\n        A magical string s consists of only '1' and '2' and obeys the following rules:\n            The string s is magical because concatenating the number of contiguous occurrences of characters '1' and '2' generates the string s itself.\n        The first few elements of s is s = \"1221121221221121122\u2026\u2026\". If we group the consecutive 1's and 2's in s, it will be \"1 22 11 2 1 22 1 22 11 2 11 22......\" and the occurrences of 1's or 2's in each group are \"1 2 2 1 1 2 1 2 2 1 2 2......\". You can see that the occurrence sequence is s itself.\n        Given an integer n, return the number of 1's in the first n number in the magical string s.\n        Example 1:\n        Input: n = 6\n        Output: 3\n        Explanation: The first 6 elements of magical string s is \"122112\" and it contains three 1's, so return 3.\n        Example 2:\n        Input: n = 1\n        Output: 1\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        if n == 1:\n            return 1\n        s = \"1221121221221121122\"\n        s = s[:n]\n        count = 0\n        for i in range(len(s)):\n            if s[i] == \"1\":\n                count += 1\n        return count"
    },
    {
        "number": 482,
        "title": "License Key Formatting",
        "difficulty": 0,
        "prompt": "class Solution:\n    def licenseKeyFormatting(self, s: str, k: int) -> str:\n        \"\"\"\n        You are given a license key represented as a string s that consists of only alphanumeric characters and dashes. The string is separated into n + 1 groups by n dashes. You are also given an integer k.\n        We want to reformat the string s such that each group contains exactly k characters, except for the first group, which could be shorter than k but still must contain at least one character. Furthermore, there must be a dash inserted between two groups, and you should convert all lowercase letters to uppercase.\n        Return the reformatted license key.\n        Example 1:\n        Input: s = \"5F3Z-2e-9-w\", k = 4\n        Output: \"5F3Z-2E9W\"\n        Explanation: The string s has been split into two parts, each part has 4 characters.\n        Note that the two extra dashes are not needed and can be removed.\n        Example 2:\n        Input: s = \"2-5g-3-J\", k = 2\n        Output: \"2-5G-3J\"\n        Explanation: The string s has been split into three parts, each part has 2 characters except the first part as it could be shorter as mentioned above.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        s = s.replace('-', '')\n        s = s.upper()\n        s = s[::-1]\n        res = []\n        i = 0\n        while i < len(s):\n            res.append(s[i:i+k])\n            i += k\n            if i < len(s):\n                res.append('-')\n        return ''.join(res[::-1])"
    },
    {
        "number": 483,
        "title": "Smallest Good Base",
        "difficulty": 2,
        "prompt": "class Solution:\n    def smallestGoodBase(self, n: str) -> str:\n        \"\"\"\n        Given an integer n represented as a string, return the smallest good base of n.\n        We call k >= 2 a good base of n, if all digits of n base k are 1's.\n        Example 1:\n        Input: n = \"13\"\n        Output: \"3\"\n        Explanation: 13 base 3 is 111.\n        Example 2:\n        Input: n = \"4681\"\n        Output: \"8\"\n        Explanation: 4681 base 8 is 11111.\n        Example 3:\n        Input: n = \"1000000000000000000\"\n        Output: \"999999999999999999\"\n        Explanation: 1000000000000000000 base 999999999999999999 is 11.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        n = int(n)\n        if n == 1:\n            return \"1\"\n        if n == 2:\n            return \"2\"\n        max_len = len(str(n))\n        for i in range(max_len, 1, -1):\n            if n % (10 ** i) == 1:\n                return str(10 ** i)\n        return str(n - 1)"
    },
    {
        "number": 485,
        "title": "Max Consecutive Ones",
        "difficulty": 0,
        "prompt": "class Solution:\n    def findMaxConsecutiveOnes(self, nums: List[int]) -> int:\n        \"\"\"\n        Given a binary array nums, return the maximum number of consecutive 1's in the array.\n        Example 1:\n        Input: nums = [1,1,0,1,1,1]\n        Output: 3\n        Explanation: The first two digits or the last three digits are consecutive 1s. The maximum number of consecutive 1s is 3.\n        Example 2:\n        Input: nums = [1,0,1,1,0,1]\n        Output: 2\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        count = 0\n        max_count = 0\n        for i in nums:\n            if i == 1:\n                count += 1\n            else:\n                max_count = max(max_count, count)\n                count = 0\n        return max(max_count, count)\n<|endoftext|>"
    },
    {
        "number": 486,
        "title": "Predict the Winner",
        "difficulty": 1,
        "prompt": "class Solution:\n    def PredictTheWinner(self, nums: List[int]) -> bool:\n        \"\"\"\n        You are given an integer array nums. Two players are playing a game with this array: player 1 and player 2.\n        Player 1 and player 2 take turns, with player 1 starting first. Both players start the game with a score of 0. At each turn, the player takes one of the numbers from either end of the array (i.e., nums[0] or nums[nums.length - 1]) which reduces the size of the array by 1. The player adds the chosen number to their score. The game ends when there are no more elements in the array.\n        Return true if Player 1 can win the game. If the scores of both players are equal, then player 1 is still the winner, and you should also return true. You may assume that both players are playing optimally.\n        Example 1:\n        Input: nums = [1,5,2]\n        Output: false\n        Explanation: Initially, player 1 can choose between 1 and 2. \n        If he chooses 2 (or 1), then player 2 can choose from 1 (or 2) and 5. If player 2 chooses 5, then player 1 will be left with 1 (or 2). \n        So, final score of player 1 is 1 + 2 = 3, and player 2 is 5. \n        Hence, player 1 will never be the winner and you need to return false.\n        Example 2:\n        Input: nums = [1,5,233,7]\n        Output: true\n        Explanation: Player 1 first chooses 1. Then player 2 has to choose between 5 and 7. No matter which number player 2 choose, player 1 can choose 233.\n        Finally, player 1 has more score (234) than player 2 (12), so you need to return True representing player1 can win.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        n = len(nums)\n        dp = [[0]*n for _ in range(n)]\n        for i in range(n):\n            dp[i][i] = nums[i]\n        for i in range(n-2, -1, -1):\n            for j in range(i+1, n):\n                dp[i][j] = max(nums[i]-dp[i+1][j], nums[j]-dp[i][j-1])\n        return dp[0][n-1]>=0\n    \n    def PredictTheWinner2(self, nums: List[int]) -> bool:\n        \"\"\"\n        You are given an integer array nums. Two players are playing a game with this array: player 1 and player 2.\n        Player 1 and player 2 take turns, with player 1 starting first. Both players start the game with a score of 0. At each turn, the player takes one of the numbers from either end of the array (i.e., nums[0] or nums[nums.length - 1]) which reduces the size of the array by 1. The player adds the chosen number to their score. The game ends when there are no more elements in the array.\n        Return true if Player 1 can win the game. If the scores of both players are equal,"
    },
    {
        "number": 488,
        "title": "Zuma Game",
        "difficulty": 2,
        "prompt": "class Solution:\n    def findMinStep(self, board: str, hand: str) -> int:\n        \"\"\"\n        You are playing a variation of the game Zuma.\n        In this variation of Zuma, there is a single row of colored balls on a board, where each ball can be colored red 'R', yellow 'Y', blue 'B', green 'G', or white 'W'. You also have several colored balls in your hand.\n        Your goal is to clear all of the balls from the board. On each turn:\n            Pick any ball from your hand and insert it in between two balls in the row or on either end of the row.\n            If there is a group of three or more consecutive balls of the same color, remove the group of balls from the board.\n                If this removal causes more groups of three or more of the same color to form, then continue removing each group until there are none left.\n            If there are no more balls on the board, then you win the game.\n            Repeat this process until you either win or do not have any more balls in your hand.\n        Given a string board, representing the row of balls on the board, and a string hand, representing the balls in your hand, return the minimum number of balls you have to insert to clear all the balls from the board. If you cannot clear all the balls from the board using the balls in your hand, return -1.\n        Example 1:\n        Input: board = \"WRRBBW\", hand = \"RB\"\n        Output: -1\n        Explanation: It is impossible to clear all the balls. The best you can do is:\n        - Insert 'R' so the board becomes WRRRBBW. WRRRBBW -> WBBW.\n        - Insert 'B' so the board becomes WBBBW. WBBBW -> WW.\n        There are still balls remaining on the board, and you are out of balls to insert.\n        Example 2:\n        Input: board = \"WWRRBBWW\", hand = \"WRBRW\"\n        Output: 2\n        Explanation: To make the board empty:\n        - Insert 'R' so the board becomes WWRRRBBWW. WWRRRBBWW -> WWBBWW.\n        - Insert 'B' so the board becomes WWBBBWW. WWBBBWW -> WWWW -> empty.\n        2 balls from your hand were needed to clear the board.\n        Example 3:\n        Input: board = \"G\", hand = \"GGGGG\"\n        Output: 2\n        Explanation: To make the board empty:\n        - Insert 'G' so the board becomes GG.\n        - Insert 'G' so the board becomes GGG. GGG -> empty.\n        2 balls from your hand were needed to clear the board.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        def dfs(board, hand):\n            if not board:\n                return 0\n            if not hand:\n                return -1\n            if not board[0] in hand:\n                return -1\n            if not board[-1] in hand:\n                return -1\n            if len(hand) == 1:\n                return 1\n            if len(hand) == 2:\n                return 2\n            if len(hand) == 3:\n                return 3\n            if len(hand) == 4:\n                return 4\n            if len(hand) == 5:\n                return 5\n            if len(hand) == 6:\n                return 6\n            if len(hand) == 7:\n                return 7\n            if len(hand) == 8:\n                return 8\n            if len(hand) == 9:\n                return 9\n            if len(hand) == 10:\n                return 10\n            if len(hand) == 11:\n                return 11\n            if len(hand) == 12:\n                return 12\n            if len(hand) == 13:\n                return 13\n            if len(hand) == 14:\n                return 14\n            if len(hand) == 15:\n                return 15\n            if len(hand) == 16:\n                return 16\n            if len(hand) == 17:\n                return"
    },
    {
        "number": 491,
        "title": "Non-decreasing Subsequences",
        "difficulty": 1,
        "prompt": "class Solution:\n    def findSubsequences(self, nums: List[int]) -> List[List[int]]:\n        \"\"\"\n        Given an integer array nums, return all the different possible non-decreasing subsequences of the given array with at least two elements. You may return the answer in any order.\n        Example 1:\n        Input: nums = [4,6,7,7]\n        Output: [[4,6],[4,6,7],[4,6,7,7],[4,7],[4,7,7],[6,7],[6,7,7],[7,7]]\n        Example 2:\n        Input: nums = [4,4,3,2,1]\n        Output: [[4,4]]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        def dfs(nums, path, res, index):\n            if len(path) >= 2:\n                res.append(path[:])\n            for i in range(index, len(nums)):\n                if len(path) == 0 or nums[i] >= path[-1]:\n                    path.append(nums[i])\n                    dfs(nums, path, res, i+1)\n                    path.pop()\n        res = []\n        dfs(nums, [], res, 0)\n        return res\n<|endoftext|>"
    },
    {
        "number": 492,
        "title": "Construct the Rectangle",
        "difficulty": 0,
        "prompt": "class Solution:\n    def constructRectangle(self, area: int) -> List[int]:\n        \"\"\"\n        A web developer needs to know how to design a web page's size. So, given a specific rectangular web page\u2019s area, your job by now is to design a rectangular web page, whose length L and width W satisfy the following requirements:\n            The area of the rectangular web page you designed must equal to the given target area.\n            The width W should not be larger than the length L, which means L >= W.\n            The difference between length L and width W should be as small as possible.\n        Return an array [L, W] where L and W are the length and width of the web page you designed in sequence.\n        Example 1:\n        Input: area = 4\n        Output: [2,2]\n        Explanation: The target area is 4, and all the possible ways to construct it are [1,4], [2,2], [4,1]. \n        But according to requirement 2, [1,4] is illegal; according to requirement 3,  [4,1] is not optimal compared to [2,2]. So the length L is 2, and the width W is 2.\n        Example 2:\n        Input: area = 37\n        Output: [37,1]\n        Example 3:\n        Input: area = 122122\n        Output: [427,286]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        \n        # \u601d\u8def\uff1a\n        # \u5148\u627e\u51fa\u6700\u5c0f\u7684L\u548cW\uff0c\u7136\u540e\u627e\u51fa\u6700\u5927\u7684L\u548cW\uff0c\u6700\u540e\u6bd4\u8f83\u4e24\u8005\u7684\u5dee\u503c\n        # \u5982\u679c\u5dee\u503c\u4e3a0\uff0c\u5219\u8fd4\u56de[L, W]\n        # \u5982\u679c\u5dee\u503c\u4e0d\u4e3a0\uff0c\u5219\u628a\u5dee\u503c\u8f6c\u6362\u4e3a\u6700\u5c0f\u7684L\u548cW\uff0c\u8fd4\u56de[L, W]\n        \n        # \u65b9\u6cd5\u4e00\uff1a\u66b4\u529b\u6cd5\n        # \u5148\u627e\u51fa\u6700\u5c0f\u7684L\u548cW\uff0c\u7136\u540e\u627e\u51fa\u6700\u5927\u7684L\u548cW\uff0c\u6700\u540e\u6bd4\u8f83\u4e24\u8005\u7684\u5dee\u503c\n        # \u5982\u679c\u5dee\u503c\u4e3a0\uff0c\u5219\u8fd4\u56de[L, W]\n        # \u5982\u679c\u5dee\u503c\u4e0d\u4e3a0\ufffd"
    },
    {
        "number": 493,
        "title": "Reverse Pairs",
        "difficulty": 2,
        "prompt": "class Solution:\n    def reversePairs(self, nums: List[int]) -> int:\n        \"\"\"\n        Given an integer array nums, return the number of reverse pairs in the array.\n        A reverse pair is a pair (i, j) where:\n            0 <= i < j < nums.length and\n            nums[i] > 2 * nums[j].\n        Example 1:\n        Input: nums = [1,3,2,3,1]\n        Output: 2\n        Explanation: The reverse pairs are:\n        (1, 4) --> nums[1] = 3, nums[4] = 1, 3 > 2 * 1\n        (3, 4) --> nums[3] = 3, nums[4] = 1, 3 > 2 * 1\n        Example 2:\n        Input: nums = [2,4,3,5,1]\n        Output: 3\n        Explanation: The reverse pairs are:\n        (1, 4) --> nums[1] = 4, nums[4] = 1, 4 > 2 * 1\n        (2, 4) --> nums[2] = 3, nums[4] = 1, 3 > 2 * 1\n        (3, 4) --> nums[3] = 5, nums[4] = 1, 5 > 2 * 1\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        self.cnt = 0\n        self.merge_sort(nums, 0, len(nums) - 1)\n        return self.cnt"
    },
    {
        "number": 494,
        "title": "Target Sum",
        "difficulty": 1,
        "prompt": "class Solution:\n    def findTargetSumWays(self, nums: List[int], target: int) -> int:\n        \"\"\"\n        You are given an integer array nums and an integer target.\n        You want to build an expression out of nums by adding one of the symbols '+' and '-' before each integer in nums and then concatenate all the integers.\n            For example, if nums = [2, 1], you can add a '+' before 2 and a '-' before 1 and concatenate them to build the expression \"+2-1\".\n        Return the number of different expressions that you can build, which evaluates to target.\n        Example 1:\n        Input: nums = [1,1,1,1,1], target = 3\n        Output: 5\n        Explanation: There are 5 ways to assign symbols to make the sum of nums be target 3.\n        -1 + 1 + 1 + 1 + 1 = 3\n        +1 - 1 + 1 + 1 + 1 = 3\n        +1 + 1 - 1 + 1 + 1 = 3\n        +1 + 1 + 1 - 1 + 1 = 3\n        +1 + 1 + 1 + 1 - 1 = 3\n        Example 2:\n        Input: nums = [1], target = 1\n        Output: 1\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        # dp[i][j] = dp[i-1][j-nums[i]] + dp[i-1][j+nums[i]]\n        # dp[i][j] = dp[i-1][j-nums[i]] + dp[i-1][j+nums[i]]\n        # dp[i][j] = dp[i-1][j-nums[i]] + dp[i-1][j+nums[i]]\n        # dp[i][j] = dp[i-1][j-nums[i]] + dp[i-1][j+nums[i]]\n        # dp[i][j] = dp[i-1][j-nums[i]] + dp[i-1][j+nums[i]]\n        # dp[i][j] = dp[i-1][j-nums[i]] + dp[i-1][j+nums[i]]\n        # dp[i][j] = dp[i-1][j-nums[i]] + dp[i-1][j+nums[i]]\n        # dp[i][j] = dp[i-1][j-n"
    },
    {
        "number": 495,
        "title": "Teemo Attacking",
        "difficulty": 0,
        "prompt": "class Solution:\n    def findPoisonedDuration(self, timeSeries: List[int], duration: int) -> int:\n        \"\"\"\n        Our hero Teemo is attacking an enemy Ashe with poison attacks! When Teemo attacks Ashe, Ashe gets poisoned for a exactly duration seconds. More formally, an attack at second t will mean Ashe is poisoned during the inclusive time interval [t, t + duration - 1]. If Teemo attacks again before the poison effect ends, the timer for it is reset, and the poison effect will end duration seconds after the new attack.\n        You are given a non-decreasing integer array timeSeries, where timeSeries[i] denotes that Teemo attacks Ashe at second timeSeries[i], and an integer duration.\n        Return the total number of seconds that Ashe is poisoned.\n        Example 1:\n        Input: timeSeries = [1,4], duration = 2\n        Output: 4\n        Explanation: Teemo's attacks on Ashe go as follows:\n        - At second 1, Teemo attacks, and Ashe is poisoned for seconds 1 and 2.\n        - At second 4, Teemo attacks, and Ashe is poisoned for seconds 4 and 5.\n        Ashe is poisoned for seconds 1, 2, 4, and 5, which is 4 seconds in total.\n        Example 2:\n        Input: timeSeries = [1,2], duration = 2\n        Output: 3\n        Explanation: Teemo's attacks on Ashe go as follows:\n        - At second 1, Teemo attacks, and Ashe is poisoned for seconds 1 and 2.\n        - At second 2 however, Teemo attacks again and resets the poison timer. Ashe is poisoned for seconds 2 and 3.\n        Ashe is poisoned for seconds 1, 2, and 3, which is 3 seconds in total.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        # Time  complexity: O(N)\n        # Space complexity: O(1)\n        if not timeSeries:\n            return 0\n        res = 0\n        for i in range(1, len(timeSeries)):\n            res += min(timeSeries[i] - timeSeries[i - 1], duration)\n        return res + duration"
    },
    {
        "number": 496,
        "title": "Next Greater Element I",
        "difficulty": 0,
        "prompt": "class Solution:\n    def nextGreaterElement(self, nums1: List[int], nums2: List[int]) -> List[int]:\n        \"\"\"\n        The next greater element of some element x in an array is the first greater element that is to the right of x in the same array.\n        You are given two distinct 0-indexed integer arrays nums1 and nums2, where nums1 is a subset of nums2.\n        For each 0 <= i < nums1.length, find the index j such that nums1[i] == nums2[j] and determine the next greater element of nums2[j] in nums2. If there is no next greater element, then the answer for this query is -1.\n        Return an array ans of length nums1.length such that ans[i] is the next greater element as described above.\n        Example 1:\n        Input: nums1 = [4,1,2], nums2 = [1,3,4,2]\n        Output: [-1,3,-1]\n        Explanation: The next greater element for each value of nums1 is as follows:\n        - 4 is underlined in nums2 = [1,3,4,2]. There is no next greater element, so the answer is -1.\n        - 1 is underlined in nums2 = [1,3,4,2]. The next greater element is 3.\n        - 2 is underlined in nums2 = [1,3,4,2]. There is no next greater element, so the answer is -1.\n        Example 2:\n        Input: nums1 = [2,4], nums2 = [1,2,3,4]\n        Output: [3,-1]\n        Explanation: The next greater element for each value of nums1 is as follows:\n        - 2 is underlined in nums2 = [1,2,3,4]. The next greater element is 3.\n        - 4 is underlined in nums2 = [1,2,3,4]. There is no next greater element, so the answer is -1.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        # O(n) time, O(n) space\n        # stack = []\n        # dic = {}\n        # for num in nums2:\n        #     while stack and stack[-1] < num:\n        #         dic[stack.pop()] = num\n        #     stack.append(num)\n        # return [dic.get(num, -1) for num in nums1]"
    },
    {
        "number": 497,
        "title": "Random Point in Non-overlapping Rectangles",
        "difficulty": 1,
        "prompt": "class Solution:\n    def __init__(self, rects: List[List[int]]):\n    def pick(self) -> List[int]:\n        \"\"\"\n        You are given an array of non-overlapping axis-aligned rectangles rects where rects[i] = [ai, bi, xi, yi] indicates that (ai, bi) is the bottom-left corner point of the ith rectangle and (xi, yi) is the top-right corner point of the ith rectangle. Design an algorithm to pick a random integer point inside the space covered by one of the given rectangles. A point on the perimeter of a rectangle is included in the space covered by the rectangle.\n        Any integer point inside the space covered by one of the given rectangles should be equally likely to be returned.\n        Note that an integer point is a point that has integer coordinates.\n        Implement the Solution class:\n            Solution(int[][] rects) Initializes the object with the given rectangles rects.\n            int[] pick() Returns a random integer point [u, v] inside the space covered by one of the given rectangles.\n        Example 1:\n        Input\n        [\"Solution\", \"pick\", \"pick\", \"pick\", \"pick\", \"pick\"]\n        [[[[-2, -2, 1, 1], [2, 2, 4, 6]]], [], [], [], [], []]\n        Output\n        [null, [1, -2], [1, -1], [-1, -2], [-2, -2], [0, 0]]\n        Explanation\n        Solution solution = new Solution([[-2, -2, 1, 1], [2, 2, 4, 6]]);\n        solution.pick(); // return [1, -2]\n        solution.pick(); // return [1, -1]\n        solution.pick(); // return [-1, -2]\n        solution.pick(); // return [-2, -2]\n        solution.pick(); // return [0, 0]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        import random\n        def get_rect(rects):\n            rects.sort(key=lambda x: x[2] * x[3])\n            return rects[0]\n        def get_point(rect):\n            return [random.randint(rect[0], rect[0] + rect[2]), random.randint(rect[1], rect[1] + rect[3])]\n        def get_area(rect):\n            return rect[2] * rect[3]\n        def get_rects(rects):\n            return [get_rect(rect) for rect in rects]\n        def get_points(rects):\n            return [get_point(rect) for rect in rects]\n        def get_areas(rects):\n            return [get_area(rect) for rect in rects]\n        def get_rects_points(rects):\n            return [get_points(rects), get_areas(rects)]\n        def get_rects_points_areas(rects):\n            return [get_rects_points(rects), get_areas(rects)]\n        def get_rects_points_areas_index(rects):\n            return [get_rects_points_areas(rects), range("
    },
    {
        "number": 498,
        "title": "Diagonal Traverse",
        "difficulty": 1,
        "prompt": "class Solution:\n    def findDiagonalOrder(self, mat: List[List[int]]) -> List[int]:\n        \"\"\"\n        Given an m x n matrix mat, return an array of all the elements of the array in a diagonal order.\n        Example 1:\n        Input: mat = [[1,2,3],[4,5,6],[7,8,9]]\n        Output: [1,2,4,7,5,3,6,8,9]\n        Example 2:\n        Input: mat = [[1,2],[3,4]]\n        Output: [1,2,3,4]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        if not mat:\n            return []\n        m, n = len(mat), len(mat[0])\n        res = []\n        for d in range(m + n - 1):\n            i, j = 0, d\n            if d < m:\n                i = d\n            elif d >= m:\n                j = m - 1\n            while i < m and j >= 0:\n                res.append(mat[i][j])\n                i += 1\n                j -= 1\n        return res\n<|endoftext|>"
    },
    {
        "number": 500,
        "title": "Keyboard Row",
        "difficulty": 0,
        "prompt": "class Solution:\n    def findWords(self, words: List[str]) -> List[str]:\n        \"\"\"\n        Given an array of strings words, return the words that can be typed using letters of the alphabet on only one row of American keyboard like the image below.\n        In the American keyboard:\n            the first row consists of the characters \"qwertyuiop\",\n            the second row consists of the characters \"asdfghjkl\", and\n            the third row consists of the characters \"zxcvbnm\".\n        Example 1:\n        Input: words = [\"Hello\",\"Alaska\",\"Dad\",\"Peace\"]\n        Output: [\"Alaska\",\"Dad\"]\n        Example 2:\n        Input: words = [\"omk\"]\n        Output: []\n        Example 3:\n        Input: words = [\"adsdf\",\"sfd\"]\n        Output: [\"adsdf\",\"sfd\"]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        # key: the key of the dict is the row, value is the set of characters in the row\n        keyboard = {\n            1: set(\"qwertyuiop\"),\n            2: set(\"asdfghjkl\"),\n            3: set(\"zxcvbnm\"),\n        }\n        # use a set to store the result\n        result = set()\n        for word in words:\n            # check if the word can be typed using only one row\n            if len(set(word.lower()).intersection(keyboard[1])) == len(word) or len(set(word.lower()).intersection(keyboard[2])) == len(word) or len(set(word.lower()).intersection(keyboard[3])) == len(word):\n                result.add(word)\n        return list(result)\n<|endoftext|>"
    },
    {
        "number": 501,
        "title": "Find Mode in Binary Search Tree",
        "difficulty": 0,
        "prompt": "class Solution:\n    def findMode(self, root: Optional[TreeNode]) -> List[int]:\n        \"\"\"\n        Given the root of a binary search tree (BST) with duplicates, return all the mode(s) (i.e., the most frequently occurred element) in it.\n        If the tree has more than one mode, return them in any order.\n        Assume a BST is defined as follows:\n            The left subtree of a node contains only nodes with keys less than or equal to the node's key.\n            The right subtree of a node contains only nodes with keys greater than or equal to the node's key.\n            Both the left and right subtrees must also be binary search trees.\n        Example 1:\n        Input: root = [1,null,2,2]\n        Output: [2]\n        Example 2:\n        Input: root = [0]\n        Output: [0]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        if not root:\n            return []\n        self.max_freq = 0\n        self.cur_freq = 0\n        self.max_freq_nodes = []\n        self.cur_freq_nodes = []\n        self.helper(root)\n        return self.max_freq_nodes"
    },
    {
        "number": 502,
        "title": "IPO",
        "difficulty": 2,
        "prompt": "class Solution:\n    def findMaximizedCapital(self, k: int, w: int, profits: List[int], capital: List[int]) -> int:\n        \"\"\"\n        Suppose LeetCode will start its IPO soon. In order to sell a good price of its shares to Venture Capital, LeetCode would like to work on some projects to increase its capital before the IPO. Since it has limited resources, it can only finish at most k distinct projects before the IPO. Help LeetCode design the best way to maximize its total capital after finishing at most k distinct projects.\n        You are given n projects where the ith project has a pure profit profits[i] and a minimum capital of capital[i] is needed to start it.\n        Initially, you have w capital. When you finish a project, you will obtain its pure profit and the profit will be added to your total capital.\n        Pick a list of at most k distinct projects from given projects to maximize your final capital, and return the final maximized capital.\n        The answer is guaranteed to fit in a 32-bit signed integer.\n        Example 1:\n        Input: k = 2, w = 0, profits = [1,2,3], capital = [0,1,1]\n        Output: 4\n        Explanation: Since your initial capital is 0, you can only start the project indexed 0.\n        After finishing it you will obtain profit 1 and your capital becomes 1.\n        With capital 1, you can either start the project indexed 1 or the project indexed 2.\n        Since you can choose at most 2 projects, you need to finish the project indexed 2 to get the maximum capital.\n        Therefore, output the final maximized capital, which is 0 + 1 + 3 = 4.\n        Example 2:\n        Input: k = 3, w = 0, profits = [1,2,3], capital = [0,1,2]\n        Output: 6\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        # \u53ef\u4ee5\u9009\u62e9\u7684\u9879\u76ee\u6570\n        n = len(profits)\n        # \u53ef\u4ee5\u9009\u62e9\u7684\u9879\u76ee\u6570\n        k = min(k, n)\n        # \u521d\u59cb\u5316\n        projects = sorted(zip(profits, capital), key=lambda x: x[1])\n        # \u521d\u59cb\u5316\n        dp = [[0] * (k + 1) for _ in range(n + 1)]\n        # \u521d\u59cb\u5316\n        for i in range(1, n + 1):\n            dp[i][1] = projects[i - 1][1]\n        # \u521d\u59cb\u5316\n        for i in range(1, n + 1):\n            for j in range(2, k + 1):\n                # \u5f53\u524d\u9879\u76ee\u7684\u7d2f\u8ba1\u5229\u6da6\n                cur_profit = projects[i - 1][0]\n                # \u5f53\u524d\u9879\u76ee\u7684\u7d2f\u8ba1\u8d44\u672c\n                cur_capital = projects[i - 1][1]\n                # \u5f53\u524d\u9879\u76ee\u7684\u7d2f\u8ba1\u5229\ufffd"
    },
    {
        "number": 503,
        "title": "Next Greater Element II",
        "difficulty": 1,
        "prompt": "class Solution:\n    def nextGreaterElements(self, nums: List[int]) -> List[int]:\n        \"\"\"\n        Given a circular integer array nums (i.e., the next element of nums[nums.length - 1] is nums[0]), return the next greater number for every element in nums.\n        The next greater number of a number x is the first greater number to its traversing-order next in the array, which means you could search circularly to find its next greater number. If it doesn't exist, return -1 for this number.\n        Example 1:\n        Input: nums = [1,2,1]\n        Output: [2,-1,2]\n        Explanation: The first 1's next greater number is 2; \n        The number 2 can't find next greater number. \n        The second 1's next greater number needs to search circularly, which is also 2.\n        Example 2:\n        Input: nums = [1,2,3,4,3]\n        Output: [2,3,4,-1,4]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        stack = []\n        res = [-1] * len(nums)\n        for i in range(len(nums)):\n            while stack and nums[stack[-1]] < nums[i]:\n                res[stack.pop()] = nums[i]\n            stack.append(i)\n        for i in range(len(nums)):\n            while stack and nums[stack[-1]] < nums[i]:\n                res[stack.pop()] = nums[i]\n        return res\n<|endoftext|>"
    },
    {
        "number": 504,
        "title": "Base 7",
        "difficulty": 0,
        "prompt": "class Solution:\n    def convertToBase7(self, num: int) -> str:\n        \"\"\"\n        Given an integer num, return a string of its base 7 representation.\n        Example 1:\n        Input: num = 100\n        Output: \"202\"\n        Example 2:\n        Input: num = -7\n        Output: \"-10\"\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        if num == 0:\n            return \"0\"\n        if num < 0:\n            num = -num\n            sign = \"-\"\n        else:\n            sign = \"\"\n        res = []\n        while num:\n            res.append(str(num % 7))\n            num //= 7\n        return sign + \"\".join(res[::-1])"
    },
    {
        "number": 506,
        "title": "Relative Ranks",
        "difficulty": 0,
        "prompt": "class Solution:\n    def findRelativeRanks(self, score: List[int]) -> List[str]:\n        \"\"\"\n        You are given an integer array score of size n, where score[i] is the score of the ith athlete in a competition. All the scores are guaranteed to be unique.\n        The athletes are placed based on their scores, where the 1st place athlete has the highest score, the 2nd place athlete has the 2nd highest score, and so on. The placement of each athlete determines their rank:\n            The 1st place athlete's rank is \"Gold Medal\".\n            The 2nd place athlete's rank is \"Silver Medal\".\n            The 3rd place athlete's rank is \"Bronze Medal\".\n            For the 4th place to the nth place athlete, their rank is their placement number (i.e., the xth place athlete's rank is \"x\").\n        Return an array answer of size n where answer[i] is the rank of the ith athlete.\n        Example 1:\n        Input: score = [5,4,3,2,1]\n        Output: [\"Gold Medal\",\"Silver Medal\",\"Bronze Medal\",\"4\",\"5\"]\n        Explanation: The placements are [1st, 2nd, 3rd, 4th, 5th].\n        Example 2:\n        Input: score = [10,3,8,9,4]\n        Output: [\"Gold Medal\",\"5\",\"Bronze Medal\",\"Silver Medal\",\"4\"]\n        Explanation: The placements are [1st, 5th, 3rd, 2nd, 4th].\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        score_dict = {}\n        for i in range(len(score)):\n            score_dict[score[i]] = i+1\n        score_dict = sorted(score_dict.items(), key=lambda x: x[1], reverse=True)\n        for i in range(len(score)):\n            score[i] = score_dict[i][0]\n        answer = []\n        for i in range(len(score)):\n            if i == 0:\n                answer.append(\"Gold Medal\")\n            elif i == 1:\n                answer.append(\"Silver Medal\")\n            elif i == 2:\n                answer.append(\"Bronze Medal\")\n            else:\n                answer.append(str(score_dict[i-1][1]))\n        return answer"
    },
    {
        "number": 507,
        "title": "Perfect Number",
        "difficulty": 0,
        "prompt": "class Solution:\n    def checkPerfectNumber(self, num: int) -> bool:\n        \"\"\"\n        A perfect number is a positive integer that is equal to the sum of its positive divisors, excluding the number itself. A divisor of an integer x is an integer that can divide x evenly.\n        Given an integer n, return true if n is a perfect number, otherwise return false.\n        Example 1:\n        Input: num = 28\n        Output: true\n        Explanation: 28 = 1 + 2 + 4 + 7 + 14\n        1, 2, 4, 7, and 14 are all divisors of 28.\n        Example 2:\n        Input: num = 7\n        Output: false\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        if num == 1:\n            return False\n        sum = 1\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                sum += i\n                if i!= num // i:\n                    sum += num // i\n        return sum == num"
    },
    {
        "number": 508,
        "title": "Most Frequent Subtree Sum",
        "difficulty": 1,
        "prompt": "class Solution:\n    def findFrequentTreeSum(self, root: Optional[TreeNode]) -> List[int]:\n        \"\"\"\n        Given the root of a binary tree, return the most frequent subtree sum. If there is a tie, return all the values with the highest frequency in any order.\n        The subtree sum of a node is defined as the sum of all the node values formed by the subtree rooted at that node (including the node itself).\n        Example 1:\n        Input: root = [5,2,-3]\n        Output: [2,-3,4]\n        Example 2:\n        Input: root = [5,2,-5]\n        Output: [2]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        if not root:\n            return []\n        \n        self.d = {}\n        self.max_freq = 0\n        self.res = []\n        \n        def dfs(node):\n            if not node:\n                return 0\n            \n            left = dfs(node.left)\n            right = dfs(node.right)\n            \n            curr_sum = left + right + node.val\n            self.d[curr_sum] = self.d.get(curr_sum, 0) + 1\n            \n            if self.d[curr_sum] == self.max_freq:\n                self.res.append(curr_sum)\n            elif self.d[curr_sum] > self.max_freq:\n                self.max_freq = self.d[curr_sum]\n                self.res = [curr_sum]\n            \n            return curr_sum\n        \n        dfs(root)\n        return self.res\n<|endoftext|>"
    },
    {
        "number": 509,
        "title": "Fibonacci Number",
        "difficulty": 0,
        "prompt": "class Solution:\n    def fib(self, n: int) -> int:\n        \"\"\"\n        The Fibonacci numbers, commonly denoted F(n) form a sequence, called the Fibonacci sequence, such that each number is the sum of the two preceding ones, starting from 0 and 1. That is,\n        F(0) = 0, F(1) = 1\n        F(n) = F(n - 1) + F(n - 2), for n > 1.\n        Given n, calculate F(n).\n        Example 1:\n        Input: n = 2\n        Output: 1\n        Explanation: F(2) = F(1) + F(0) = 1 + 0 = 1.\n        Example 2:\n        Input: n = 3\n        Output: 2\n        Explanation: F(3) = F(2) + F(1) = 1 + 1 = 2.\n        Example 3:\n        Input: n = 4\n        Output: 3\n        Explanation: F(4) = F(3) + F(2) = 2 + 1 = 3.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        if n == 0:\n            return 0\n        if n == 1:\n            return 1\n        return self.fib(n - 1) + self.fib(n - 2)"
    },
    {
        "number": 513,
        "title": "Find Bottom Left Tree Value",
        "difficulty": 1,
        "prompt": "class Solution:\n    def findBottomLeftValue(self, root: Optional[TreeNode]) -> int:\n        \"\"\"\n        Given the root of a binary tree, return the leftmost value in the last row of the tree.\n        Example 1:\n        Input: root = [2,1,3]\n        Output: 1\n        Example 2:\n        Input: root = [1,2,3,4,null,5,6,null,null,7]\n        Output: 7\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        if not root:\n            return None\n        queue = deque()\n        queue.append(root)\n        while queue:\n            size = len(queue)\n            for i in range(size):\n                node = queue.popleft()\n                if i == 0:\n                    leftmost = node.val\n                if node.left:\n                    queue.append(node.left)\n                if node.right:\n                    queue.append(node.right)\n        return leftmost\n<|endoftext|>"
    },
    {
        "number": 514,
        "title": "Freedom Trail",
        "difficulty": 2,
        "prompt": "class Solution:\n    def findRotateSteps(self, ring: str, key: str) -> int:\n        \"\"\"\n        In the video game Fallout 4, the quest \"Road to Freedom\" requires players to reach a metal dial called the \"Freedom Trail Ring\" and use the dial to spell a specific keyword to open the door.\n        Given a string ring that represents the code engraved on the outer ring and another string key that represents the keyword that needs to be spelled, return the minimum number of steps to spell all the characters in the keyword.\n        Initially, the first character of the ring is aligned at the \"12:00\" direction. You should spell all the characters in key one by one by rotating ring clockwise or anticlockwise to make each character of the string key aligned at the \"12:00\" direction and then by pressing the center button.\n        At the stage of rotating the ring to spell the key character key[i]:\n            You can rotate the ring clockwise or anticlockwise by one place, which counts as one step. The final purpose of the rotation is to align one of ring's characters at the \"12:00\" direction, where this character must equal key[i].\n            If the character key[i] has been aligned at the \"12:00\" direction, press the center button to spell, which also counts as one step. After the pressing, you could begin to spell the next character in the key (next stage). Otherwise, you have finished all the spelling.\n        Example 1:\n        Input: ring = \"godding\", key = \"gd\"\n        Output: 4\n        Explanation:\n        For the first key character 'g', since it is already in place, we just need 1 step to spell this character. \n        For the second key character 'd', we need to rotate the ring \"godding\" anticlockwise by two steps to make it become \"ddinggo\".\n        Also, we need 1 more step for spelling.\n        So the final output is 4.\n        Example 2:\n        Input: ring = \"godding\", key = \"godding\"\n        Output: 13\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        \n        # dp[i][j] = min steps to spell key[:i]\n        # dp[i][j] = min(dp[i-1][j-1] + 1, dp[i-1][j] + 1, dp[i][j-1] + 1)\n        \n        # dp[i][j] = min(dp[i-1][j-1] + abs(ring[i] - key[j]), dp[i-1][j] + abs(ring[i] - key[j]), dp[i][j-1] + abs(ring[i] - key[j]))\n        \n        # dp[i][j] = min(dp[i-1][j-1] + abs(ring[i] - key[j]), dp[i-1][j] + abs(ring[i] - key[j]), dp[i][j-1] + abs(ring[i] - key[j]))\n        # dp[i][j] = min(dp[i-1][j-1] + abs(ring[i] - key[j]), dp[i-1][j] + abs(ring[i] - key[j]), dp[i][j-1] + abs(ring"
    },
    {
        "number": 515,
        "title": "Find Largest Value in Each Tree Row",
        "difficulty": 1,
        "prompt": "class Solution:\n    def largestValues(self, root: Optional[TreeNode]) -> List[int]:\n        \"\"\"\n        Given the root of a binary tree, return an array of the largest value in each row of the tree (0-indexed).\n        Example 1:\n        Input: root = [1,3,2,5,3,null,9]\n        Output: [1,3,9]\n        Example 2:\n        Input: root = [1,2,3]\n        Output: [1,3]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        if not root:\n            return []\n        queue = [root]\n        res = []\n        while queue:\n            cur_level = []\n            next_level = []\n            for node in queue:\n                cur_level.append(node.val)\n                if node.left:\n                    next_level.append(node.left)\n                if node.right:\n                    next_level.append(node.right)\n            res.append(max(cur_level))\n            queue = next_level\n        return res"
    },
    {
        "number": 516,
        "title": "Longest Palindromic Subsequence",
        "difficulty": 1,
        "prompt": "class Solution:\n    def longestPalindromeSubseq(self, s: str) -> int:\n        \"\"\"\n        Given a string s, find the longest palindromic subsequence's length in s.\n        A subsequence is a sequence that can be derived from another sequence by deleting some or no elements without changing the order of the remaining elements.\n        Example 1:\n        Input: s = \"bbbab\"\n        Output: 4\n        Explanation: One possible longest palindromic subsequence is \"bbbb\".\n        Example 2:\n        Input: s = \"cbbd\"\n        Output: 2\n        Explanation: One possible longest palindromic subsequence is \"bb\".\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        n = len(s)\n        dp = [[0] * n for _ in range(n)]\n        for i in range(n):\n            dp[i][i] = 1\n        for i in range(n - 1, -1, -1):\n            for j in range(i + 1, n):\n                if s[i] == s[j]:\n                    dp[i][j] = dp[i + 1][j - 1] + 2\n                else:\n                    dp[i][j] = max(dp[i + 1][j], dp[i][j - 1])\n        return dp[0][n - 1]"
    },
    {
        "number": 517,
        "title": "Super Washing Machines",
        "difficulty": 2,
        "prompt": "class Solution:\n    def findMinMoves(self, machines: List[int]) -> int:\n        \"\"\"\n        You have n super washing machines on a line. Initially, each washing machine has some dresses or is empty.\n        For each move, you could choose any m (1 <= m <= n) washing machines, and pass one dress of each washing machine to one of its adjacent washing machines at the same time.\n        Given an integer array machines representing the number of dresses in each washing machine from left to right on the line, return the minimum number of moves to make all the washing machines have the same number of dresses. If it is not possible to do it, return -1.\n        Example 1:\n        Input: machines = [1,0,5]\n        Output: 3\n        Explanation:\n        1st move:    1     0 <-- 5    =>    1     1     4\n        2nd move:    1 <-- 1 <-- 4    =>    2     1     3\n        3rd move:    2     1 <-- 3    =>    2     2     2\n        Example 2:\n        Input: machines = [0,3,0]\n        Output: 2\n        Explanation:\n        1st move:    0 <-- 3     0    =>    1     2     0\n        2nd move:    1     2 --> 0    =>    1     1     1\n        Example 3:\n        Input: machines = [0,2,0]\n        Output: -1\n        Explanation:\n        It's impossible to make all three washing machines have the same number of dresses.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        # \u5206\u6790\uff1a\n        # 1. \u5148\u628a\u6240\u6709\u7684\u7a7a\u95f2\u7684\u673a\u5668\u653e\u5230\u4e00\u4e2a\u6570\u7ec4\u4e2d\uff0c\u7136\u540e\u628a\u6240\u6709\u7684\u673a\u5668\u6309\u7167\u7a7a\u95f2\u7684\u673a\u5668\u7684\u6570\u91cf\u8fdb\u884c\u6392\u5e8f\uff0c\n        # 2. \u6bcf\u6b21\u628a\u6700\u5c11\u7684\u7a7a\u95f2\u7684\u673a\u5668\u653e\u5230\u6700\u540e\u4e00\u4e2a\u673a\u5668\uff0c\u7136\u540e\u628a\u6700\u540e\u4e00\u4e2a\u673a\u5668\u7684\u7a7a\u95f2\u6570\u91cf\u51cf\u53bb\u6700\u5c11\u7684\u7a7a\u95f2\u7684\u673a\u5668\uff0c\n        # 3. \u5982\u679c\u6700\u540e\u4e00\u4e2a\u673a\u5668\u7684\u7a7a\u95f2\u6570\u91cf\u7b49\u4e8e0\uff0c\u90a3\u4e48\u5c31\u8bf4\u660e\u6ca1\u6709\u7a7a\u95f2\u7684\u673a\u5668\uff0c\u8fd4\u56de-1\uff0c\n        # 4. \u5982\u679c"
    },
    {
        "number": 518,
        "title": "Coin Change II",
        "difficulty": 1,
        "prompt": "class Solution:\n    def change(self, amount: int, coins: List[int]) -> int:\n        \"\"\"\n        You are given an integer array coins representing coins of different denominations and an integer amount representing a total amount of money.\n        Return the number of combinations that make up that amount. If that amount of money cannot be made up by any combination of the coins, return 0.\n        You may assume that you have an infinite number of each kind of coin.\n        The answer is guaranteed to fit into a signed 32-bit integer.\n        Example 1:\n        Input: amount = 5, coins = [1,2,5]\n        Output: 4\n        Explanation: there are four ways to make up the amount:\n        5=5\n        5=2+2+1\n        5=2+1+1+1\n        5=1+1+1+1+1\n        Example 2:\n        Input: amount = 3, coins = [2]\n        Output: 0\n        Explanation: the amount of 3 cannot be made up just with coins of 2.\n        Example 3:\n        Input: amount = 10, coins = [10]\n        Output: 1\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        # dp[i] = dp[i-1] + dp[i-2] + dp[i-5]\n        # dp[i] = dp[i-1] + dp[i-2] + dp[i-5] + dp[i-10]\n        # dp[i] = dp[i-1] + dp[i-2] + dp[i-5] + dp[i-10] + dp[i-20]\n        # dp[i] = dp[i-1] + dp[i-2] + dp[i-5] + dp[i-10] + dp[i-20] + dp[i-50]\n        # dp[i] = dp[i-1] + dp[i-2] + dp[i-5] + dp[i-10] + dp[i-20] + dp[i-50] + dp[i-100]\n        # dp[i] = dp[i-1] + dp[i-2] + dp[i-5] + dp[i-10] + dp[i-20] + dp[i-50] + dp[i"
    },
    {
        "number": 519,
        "title": "Random Flip Matrix",
        "difficulty": 1,
        "prompt": "class Solution:\n    def __init__(self, m: int, n: int):\n    def flip(self) -> List[int]:\n    def reset(self) -> None:\n        \"\"\"\n        There is an m x n binary grid matrix with all the values set 0 initially. Design an algorithm to randomly pick an index (i, j) where matrix[i][j] == 0 and flips it to 1. All the indices (i, j) where matrix[i][j] == 0 should be equally likely to be returned.\n        Optimize your algorithm to minimize the number of calls made to the built-in random function of your language and optimize the time and space complexity.\n        Implement the Solution class:\n            Solution(int m, int n) Initializes the object with the size of the binary matrix m and n.\n            int[] flip() Returns a random index [i, j] of the matrix where matrix[i][j] == 0 and flips it to 1.\n            void reset() Resets all the values of the matrix to be 0.\n        Example 1:\n        Input\n        [\"Solution\", \"flip\", \"flip\", \"flip\", \"reset\", \"flip\"]\n        [[3, 1], [], [], [], [], []]\n        Output\n        [null, [1, 0], [2, 0], [0, 0], null, [2, 0]]\n        Explanation\n        Solution solution = new Solution(3, 1);\n        solution.flip();  // return [1, 0], [0,0], [1,0], and [2,0] should be equally likely to be returned.\n        solution.flip();  // return [2, 0], Since [1,0] was returned, [2,0] and [0,0]\n        solution.flip();  // return [0, 0], Based on the previously returned indices, only [0,0] can be returned.\n        solution.reset(); // All the values are reset to 0 and can be returned.\n        solution.flip();  // return [2, 0], [0,0], [1,0], and [2,0] should be equally likely to be returned.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        self.m = m\n        self.n = n\n        self.matrix = [[0 for _ in range(m)] for _ in range(n)]\n        self.count = 0\n        self.index = []\n        self.index_set = set()\n        self.index_dict = {}\n        self.index_dict_set = set()\n        self.index_dict_dict = {}\n        self.index_dict_dict_set = set()\n        self.index_dict_dict_dict = {}\n        self.index_dict_dict_dict_set = set()\n        self.index_dict_dict_dict_dict = {}\n        self.index_dict_dict_dict_dict_set = set()\n        self.index_dict_dict_dict_dict_dict = {}\n        self.index_dict_dict_dict_dict_dict_set = set()\n        self.index_dict_dict_dict_dict_dict_dict = {}\n        self.index_dict_dict_dict_dict_dict_dict_set = set()\n        self.index_dict_dict_dict_dict_dict_dict_dict = {}\n        self.index_dict_dict_dict_dict_dict_dict_dict_set = set()\n        self.index_dict_dict"
    },
    {
        "number": 520,
        "title": "Detect Capital",
        "difficulty": 0,
        "prompt": "class Solution:\n    def detectCapitalUse(self, word: str) -> bool:\n        \"\"\"\n        We define the usage of capitals in a word to be right when one of the following cases holds:\n            All letters in this word are capitals, like \"USA\".\n            All letters in this word are not capitals, like \"leetcode\".\n            Only the first letter in this word is capital, like \"Google\".\n        Given a string word, return true if the usage of capitals in it is right.\n        Example 1:\n        Input: word = \"USA\"\n        Output: true\n        Example 2:\n        Input: word = \"FlaG\"\n        Output: false\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        if len(word) == 1:\n            return True\n        if word[0].isupper() and word[1:].islower():\n            return True\n        if word[0].islower() and word[1:].isupper():\n            return True\n        return False"
    },
    {
        "number": 521,
        "title": "Longest Uncommon Subsequence I",
        "difficulty": 0,
        "prompt": "class Solution:\n    def findLUSlength(self, a: str, b: str) -> int:\n        \"\"\"\n        Given two strings a and b, return the length of the longest uncommon subsequence between a and b. If the longest uncommon subsequence does not exist, return -1.\n        An uncommon subsequence between two strings is a string that is a subsequence of one but not the other.\n        A subsequence of a string s is a string that can be obtained after deleting any number of characters from s.\n            For example, \"abc\" is a subsequence of \"aebdc\" because you can delete the underlined characters in \"aebdc\" to get \"abc\". Other subsequences of \"aebdc\" include \"aebdc\", \"aeb\", and \"\" (empty string).\n        Example 1:\n        Input: a = \"aba\", b = \"cdc\"\n        Output: 3\n        Explanation: One longest uncommon subsequence is \"aba\" because \"aba\" is a subsequence of \"aba\" but not \"cdc\".\n        Note that \"cdc\" is also a longest uncommon subsequence.\n        Example 2:\n        Input: a = \"aaa\", b = \"bbb\"\n        Output: 3\n        Explanation: The longest uncommon subsequences are \"aaa\" and \"bbb\".\n        Example 3:\n        Input: a = \"aaa\", b = \"aaa\"\n        Output: -1\n        Explanation: Every subsequence of string a is also a subsequence of string b. Similarly, every subsequence of string b is also a subsequence of string a.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        if a == b:\n            return -1\n        return max(len(a), len(b))"
    },
    {
        "number": 522,
        "title": "Longest Uncommon Subsequence II",
        "difficulty": 1,
        "prompt": "class Solution:\n    def findLUSlength(self, strs: List[str]) -> int:\n        \"\"\"\n        Given an array of strings strs, return the length of the longest uncommon subsequence between them. If the longest uncommon subsequence does not exist, return -1.\n        An uncommon subsequence between an array of strings is a string that is a subsequence of one string but not the others.\n        A subsequence of a string s is a string that can be obtained after deleting any number of characters from s.\n            For example, \"abc\" is a subsequence of \"aebdc\" because you can delete the underlined characters in \"aebdc\" to get \"abc\". Other subsequences of \"aebdc\" include \"aebdc\", \"aeb\", and \"\" (empty string).\n        Example 1:\n        Input: strs = [\"aba\",\"cdc\",\"eae\"]\n        Output: 3\n        Example 2:\n        Input: strs = [\"aaa\",\"aaa\",\"aa\"]\n        Output: -1\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        # O(n^2)\n        # for i in range(len(strs)):\n        #     for j in range(i+1, len(strs)):\n        #         if len(strs[i]) == len(strs[j]):\n        #             if strs[i] == strs[j]:\n        #                 continue\n        #             else:\n        #                 if strs[i] in strs[j] or strs[j] in strs[i]:\n        #                     continue\n        #                 else:\n        #                     return len(strs[i])\n        #         else:\n        #             if len(strs[i]) > len(strs[j]):\n        #                 if strs[i] in strs[j]:\n        #                     return len(strs[i])\n        #             else:\n        #                 if strs[j] in strs[i]:\n        #                     return len(strs[j])\n        # return -1"
    },
    {
        "number": 523,
        "title": "Continuous Subarray Sum",
        "difficulty": 1,
        "prompt": "class Solution:\n    def checkSubarraySum(self, nums: List[int], k: int) -> bool:\n        \"\"\"\n        Given an integer array nums and an integer k, return true if nums has a good subarray or false otherwise.\n        A good subarray is a subarray where:\n            its length is at least two, and\n            the sum of the elements of the subarray is a multiple of k.\n        Note that:\n            A subarray is a contiguous part of the array.\n            An integer x is a multiple of k if there exists an integer n such that x = n * k. 0 is always a multiple of k.\n        Example 1:\n        Input: nums = [23,2,4,6,7], k = 6\n        Output: true\n        Explanation: [2, 4] is a continuous subarray of size 2 whose elements sum up to 6.\n        Example 2:\n        Input: nums = [23,2,6,4,7], k = 6\n        Output: true\n        Explanation: [23, 2, 6, 4, 7] is an continuous subarray of size 5 whose elements sum up to 42.\n        42 is a multiple of 6 because 42 = 7 * 6 and 7 is an integer.\n        Example 3:\n        Input: nums = [23,2,6,4,7], k = 13\n        Output: false\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        if len(nums) < 2:\n            return False\n        if k == 0:\n            for i in range(len(nums) - 1):\n                if nums[i] == 0 and nums[i + 1] == 0:\n                    return True\n            return False\n        sum_dict = {0: -1}\n        curr_sum = 0\n        for i in range(len(nums)):\n            curr_sum += nums[i]\n            if k!= 0:\n                curr_sum = curr_sum % k\n            if curr_sum in sum_dict:\n                if i - sum_dict[curr_sum] > 1:\n                    return True\n            else:\n                sum_dict[curr_sum] = i\n        return False"
    },
    {
        "number": 524,
        "title": "Longest Word in Dictionary through Deleting",
        "difficulty": 1,
        "prompt": "class Solution:\n    def findLongestWord(self, s: str, dictionary: List[str]) -> str:\n        \"\"\"\n        Given a string s and a string array dictionary, return the longest string in the dictionary that can be formed by deleting some of the given string characters. If there is more than one possible result, return the longest word with the smallest lexicographical order. If there is no possible result, return the empty string.\n        Example 1:\n        Input: s = \"abpcplea\", dictionary = [\"ale\",\"apple\",\"monkey\",\"plea\"]\n        Output: \"apple\"\n        Example 2:\n        Input: s = \"abpcplea\", dictionary = [\"a\",\"b\",\"c\"]\n        Output: \"a\"\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        \n        # Time: O(N^2)\n        # Space: O(N)\n        \n        # dp[i][j] = True if s[i:j] is in dictionary\n        # dp[i][j] = dp[i+1][j] or dp[i][j-1] or dp[i+1][j-1]\n        # dp[i][j] = dp[i+1][j] and s[i] == s[j-1]\n        \n        dp = [[False] * (len(s)+1) for _ in range(len(dictionary)+1)]\n        dp[0][0] = True\n        \n        for i in range(1, len(s)+1):\n            for j in range(1, len(dictionary)+1):\n                if dp[j-1][i]:\n                    dp[j][i] = True\n                    if s[i-1] == dictionary[j-1][0]:\n                        dp[j][i] = True\n        \n        max_len = 0\n        max_word = \"\"\n        for i in range(1, len(dictionary)+1):\n            if dp[i][len(s)]:\n                if len(dictionary[i-1]) > max"
    },
    {
        "number": 525,
        "title": "Contiguous Array",
        "difficulty": 1,
        "prompt": "class Solution:\n    def findMaxLength(self, nums: List[int]) -> int:\n        \"\"\"\n        Given a binary array nums, return the maximum length of a contiguous subarray with an equal number of 0 and 1.\n        Example 1:\n        Input: nums = [0,1]\n        Output: 2\n        Explanation: [0, 1] is the longest contiguous subarray with an equal number of 0 and 1.\n        Example 2:\n        Input: nums = [0,1,0]\n        Output: 2\n        Explanation: [0, 1] (or [1, 0]) is a longest contiguous subarray with equal number of 0 and 1.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        # dp[i] = dp[i-1] + 1 if nums[i] == 1 else dp[i-1] - 1\n        # dp[i] = dp[i-1] + 1 if nums[i] == 0 else dp[i-1] - 1\n        # dp[i] = dp[i-1] + 1 if nums[i] == 1 else dp[i-1] - 1\n        # dp[i] = dp[i-1] + 1 if nums[i] == 0 else dp[i-1] - 1\n        # dp[i] = dp[i-1] + 1 if nums[i] == 1 else dp[i-1] - 1\n        # dp[i] = dp[i-1] + 1 if nums[i] == 0 else dp[i-1] - 1\n        # dp[i] = dp[i-1] + 1 if nums[i] == 1 else dp[i-1] - 1\n        # dp[i] = dp[i-1] + 1 if nums[i] == 0 else dp[i-1] - 1\n        # dp[i] = dp[i"
    },
    {
        "number": 526,
        "title": "Beautiful Arrangement",
        "difficulty": 1,
        "prompt": "class Solution:\n    def countArrangement(self, n: int) -> int:\n        \"\"\"\n        Suppose you have n integers labeled 1 through n. A permutation of those n integers perm (1-indexed) is considered a beautiful arrangement if for every i (1 <= i <= n), either of the following is true:\n            perm[i] is divisible by i.\n            i is divisible by perm[i].\n        Given an integer n, return the number of the beautiful arrangements that you can construct.\n        Example 1:\n        Input: n = 2\n        Output: 2\n        Explanation: \n        The first beautiful arrangement is [1,2]:\n            - perm[1] = 1 is divisible by i = 1\n            - perm[2] = 2 is divisible by i = 2\n        The second beautiful arrangement is [2,1]:\n            - perm[1] = 2 is divisible by i = 1\n            - i = 2 is divisible by perm[2] = 1\n        Example 2:\n        Input: n = 1\n        Output: 1\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        def dfs(nums, path, used):\n            if not nums:\n                self.res += 1\n                return\n            for i in range(len(nums)):\n                if used[i] or (i > 0 and not used[i - 1] and nums[i] % i == 0) or (i + 1 < len(nums) and not used[i + 1] and i + 1 % nums[i] == 0):\n                    used[i] = True\n                    path.append(nums[i])\n                    dfs(nums[:i] + nums[i + 1:], path, used)\n                    used[i] = False\n                    path.pop()\n        self.res = 0\n        dfs(list(range(1, n + 1)), [], [False] * n)\n        return self.res"
    },
    {
        "number": 528,
        "title": "Random Pick with Weight",
        "difficulty": 1,
        "prompt": "class Solution:\n    def __init__(self, w: List[int]):\n    def pickIndex(self) -> int:\n        \"\"\"\n        You are given a 0-indexed array of positive integers w where w[i] describes the weight of the ith index.\n        You need to implement the function pickIndex(), which randomly picks an index in the range [0, w.length - 1] (inclusive) and returns it. The probability of picking an index i is w[i] / sum(w).\n            For example, if w = [1, 3], the probability of picking index 0 is 1 / (1 + 3) = 0.25 (i.e., 25%), and the probability of picking index 1 is 3 / (1 + 3) = 0.75 (i.e., 75%).\n        Example 1:\n        Input\n        [\"Solution\",\"pickIndex\"]\n        [[[1]],[]]\n        Output\n        [null,0]\n        Explanation\n        Solution solution = new Solution([1]);\n        solution.pickIndex(); // return 0. The only option is to return 0 since there is only one element in w.\n        Example 2:\n        Input\n        [\"Solution\",\"pickIndex\",\"pickIndex\",\"pickIndex\",\"pickIndex\",\"pickIndex\"]\n        [[[1,3]],[],[],[],[],[]]\n        Output\n        [null,1,1,1,1,0]\n        Explanation\n        Solution solution = new Solution([1, 3]);\n        solution.pickIndex(); // return 1. It is returning the second element (index = 1) that has a probability of 3/4.\n        solution.pickIndex(); // return 1\n        solution.pickIndex(); // return 1\n        solution.pickIndex(); // return 1\n        solution.pickIndex(); // return 0. It is returning the first element (index = 0) that has a probability of 1/4.\n        Since this is a randomization problem, multiple answers are allowed.\n        All of the following outputs can be considered correct:\n        [null,1,1,1,1,0]\n        [null,1,1,1,1,1]\n        [null,1,1,1,0,0]\n        [null,1,1,1,0,1]\n        [null,1,0,1,0,0]\n       ......\n        and so on.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        # self.w = w\n        # self.n = len(w)\n        # self.s = sum(w)\n        # self.c = [0] * self.n\n        # for i in range(self.n):\n        #     self.c[i] = self.c[i - 1] + w[i]\n        # return self.c[-1]\n        # self.w = w\n        # self.n = len(w)\n        # self.s = sum(w)\n        # self.c = [0] * self.n\n        # for i in range(self.n):\n        #     self.c[i] = self.c[i - 1] + w[i]\n        # return self.c[-1]\n        # self.w = w\n        # self.n = len(w)\n        # self.s = sum(w)\n        # self.c = [0] * self.n\n        # for i in range(self.n):\n        #     self.c[i] = self.c[i - 1] + w[i]\n        # return self.c[-1]\n        # self.w = w\n        # self.n = len(w)\n        # self.s = sum("
    },
    {
        "number": 529,
        "title": "Minesweeper",
        "difficulty": 1,
        "prompt": "class Solution:\n    def updateBoard(self, board: List[List[str]], click: List[int]) -> List[List[str]]:\n        \"\"\"\n        Let's play the minesweeper game (Wikipedia, online game)!\n        You are given an m x n char matrix board representing the game board where:\n            'M' represents an unrevealed mine,\n            'E' represents an unrevealed empty square,\n            'B' represents a revealed blank square that has no adjacent mines (i.e., above, below, left, right, and all 4 diagonals),\n            digit ('1' to '8') represents how many mines are adjacent to this revealed square, and\n            'X' represents a revealed mine.\n        You are also given an integer array click where click = [clickr, clickc] represents the next click position among all the unrevealed squares ('M' or 'E').\n        Return the board after revealing this position according to the following rules:\n            If a mine 'M' is revealed, then the game is over. You should change it to 'X'.\n            If an empty square 'E' with no adjacent mines is revealed, then change it to a revealed blank 'B' and all of its adjacent unrevealed squares should be revealed recursively.\n            If an empty square 'E' with at least one adjacent mine is revealed, then change it to a digit ('1' to '8') representing the number of adjacent mines.\n            Return the board when no more squares will be revealed.\n        Example 1:\n        Input: board = [[\"E\",\"E\",\"E\",\"E\",\"E\"],[\"E\",\"E\",\"M\",\"E\",\"E\"],[\"E\",\"E\",\"E\",\"E\",\"E\"],[\"E\",\"E\",\"E\",\"E\",\"E\"]], click = [3,0]\n        Output: [[\"B\",\"1\",\"E\",\"1\",\"B\"],[\"B\",\"1\",\"M\",\"1\",\"B\"],[\"B\",\"1\",\"1\",\"1\",\"B\"],[\"B\",\"B\",\"B\",\"B\",\"B\"]]\n        Example 2:\n        Input: board = [[\"B\",\"1\",\"E\",\"1\",\"B\"],[\"B\",\"1\",\"M\",\"1\",\"B\"],[\"B\",\"1\",\"1\",\"1\",\"B\"],[\"B\",\"B\",\"B\",\"B\",\"B\"]], click = [1,2]\n        Output: [[\"B\",\"1\",\"E\",\"1\",\"B\"],[\"B\",\"1\",\"X\",\"1\",\"B\"],[\"B\",\"1\",\"1\",\"1\",\"B\"],[\"B\",\"B\",\"B\",\"B\",\"B\"]]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        if not board or not board[0]:\n            return board\n        row, col = click\n        if board[row][col] == 'M':\n            board[row][col] = 'X'\n            return board\n        self.dfs(board, row, col)\n        return board"
    },
    {
        "number": 530,
        "title": "Minimum Absolute Difference in BST",
        "difficulty": 0,
        "prompt": "class Solution:\n    def getMinimumDifference(self, root: Optional[TreeNode]) -> int:\n        \"\"\"\n        Given the root of a Binary Search Tree (BST), return the minimum absolute difference between the values of any two different nodes in the tree.\n        Example 1:\n        Input: root = [4,2,6,1,3]\n        Output: 1\n        Example 2:\n        Input: root = [1,0,48,null,null,12,49]\n        Output: 1\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        self.min_diff = float('inf')\n        self.preorder(root)\n        return self.min_diff"
    },
    {
        "number": 532,
        "title": "K-diff Pairs in an Array",
        "difficulty": 1,
        "prompt": "class Solution:\n    def findPairs(self, nums: List[int], k: int) -> int:\n        \"\"\"\n        Given an array of integers nums and an integer k, return the number of unique k-diff pairs in the array.\n        A k-diff pair is an integer pair (nums[i], nums[j]), where the following are true:\n            0 <= i, j < nums.length\n            i!= j\n            nums[i] - nums[j] == k\n        Notice that |val| denotes the absolute value of val.\n        Example 1:\n        Input: nums = [3,1,4,1,5], k = 2\n        Output: 2\n        Explanation: There are two 2-diff pairs in the array, (1, 3) and (3, 5).\n        Although we have two 1s in the input, we should only return the number of unique pairs.\n        Example 2:\n        Input: nums = [1,2,3,4,5], k = 1\n        Output: 4\n        Explanation: There are four 1-diff pairs in the array, (1, 2), (2, 3), (3, 4) and (4, 5).\n        Example 3:\n        Input: nums = [1,3,1,5,4], k = 0\n        Output: 1\n        Explanation: There is one 0-diff pair in the array, (1, 1).\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        # Time complexity: O(n)\n        # Space complexity: O(n)\n        if k < 0:\n            return 0\n        if k == 0:\n            return len(set(nums))\n        \n        count = 0\n        nums = set(nums)\n        for num in nums:\n            if num + k in nums:\n                count += 1\n        return count\n<|endoftext|>"
    },
    {
        "number": 535,
        "title": "Encode and Decode TinyURL",
        "difficulty": 1,
        "prompt": "class Codec:\n    def encode(self, longUrl: str) -> str:\n        \"\"\"Encodes a URL to a shortened URL.\n        Note: This is a companion problem to the System Design problem: Design TinyURL.\n        TinyURL is a URL shortening service where you enter a URL such as https://leetcode.com/problems/design-tinyurl and it returns a short URL such as http://tinyurl.com/4e9iAk. Design a class to encode a URL and decode a tiny URL.\n        There is no restriction on how your encode/decode algorithm should work. You just need to ensure that a URL can be encoded to a tiny URL and the tiny URL can be decoded to the original URL.\n        Implement the Solution class:\n            Solution() Initializes the object of the system.\n            String encode(String longUrl) Returns a tiny URL for the given longUrl.\n            String decode(String shortUrl) Returns the original long URL for the given shortUrl. It is guaranteed that the given shortUrl was encoded by the same object.\n        Example 1:\n        Input: url = \"https://leetcode.com/problems/design-tinyurl\"\n        Output: \"https://leetcode.com/problems/design-tinyurl\"\n        Explanation:\n        Solution obj = new Solution();\n        string tiny = obj.encode(url); // returns the encoded tiny url.\n        string ans = obj.decode(tiny); // returns the original url after decoding it.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        return hashlib.md5(longUrl.encode()).hexdigest()"
    },
    {
        "number": 537,
        "title": "Complex Number Multiplication",
        "difficulty": 1,
        "prompt": "class Solution:\n    def complexNumberMultiply(self, num1: str, num2: str) -> str:\n        \"\"\"\n        A complex number can be represented as a string on the form \"real+imaginaryi\" where:\n            real is the real part and is an integer in the range [-100, 100].\n            imaginary is the imaginary part and is an integer in the range [-100, 100].\n            i2 == -1.\n        Given two complex numbers num1 and num2 as strings, return a string of the complex number that represents their multiplications.\n        Example 1:\n        Input: num1 = \"1+1i\", num2 = \"1+1i\"\n        Output: \"0+2i\"\n        Explanation: (1 + i) * (1 + i) = 1 + i2 + 2 * i = 2i, and you need convert it to the form of 0+2i.\n        Example 2:\n        Input: num1 = \"1+-1i\", num2 = \"1+-1i\"\n        Output: \"0+-2i\"\n        Explanation: (1 - i) * (1 - i) = 1 + i2 - 2 * i = -2i, and you need convert it to the form of 0+-2i.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        def parse(num):\n            real, imaginary = num.split('+')\n            return int(real), int(imaginary[:-1])"
    },
    {
        "number": 538,
        "title": "Convert BST to Greater Tree",
        "difficulty": 1,
        "prompt": "class Solution:\n    def convertBST(self, root: Optional[TreeNode]) -> Optional[TreeNode]:\n        \"\"\"\n        Given the root of a Binary Search Tree (BST), convert it to a Greater Tree such that every key of the original BST is changed to the original key plus the sum of all keys greater than the original key in BST.\n        As a reminder, a binary search tree is a tree that satisfies these constraints:\n            The left subtree of a node contains only nodes with keys less than the node's key.\n            The right subtree of a node contains only nodes with keys greater than the node's key.\n            Both the left and right subtrees must also be binary search trees.\n        Example 1:\n        Input: root = [4,1,6,0,2,5,7,null,null,null,3,null,null,null,8]\n        Output: [30,36,21,36,35,26,15,null,null,null,33,null,null,null,8]\n        Example 2:\n        Input: root = [0,null,1]\n        Output: [1,null,1]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        self.sum = 0\n        def dfs(node):\n            if not node:\n                return\n            dfs(node.right)\n            self.sum += node.val\n            node.val = self.sum\n            dfs(node.left)\n        dfs(root)\n        return root\n<|endoftext|>"
    },
    {
        "number": 539,
        "title": "Minimum Time Difference",
        "difficulty": 1,
        "prompt": "class Solution:\n    def findMinDifference(self, timePoints: List[str]) -> int:\n        \"\"\"\n        Given a list of 24-hour clock time points in \"HH:MM\" format, return the minimum minutes difference between any two time-points in the list.\n        Example 1:\n        Input: timePoints = [\"23:59\",\"00:00\"]\n        Output: 1\n        Example 2:\n        Input: timePoints = [\"00:00\",\"23:59\",\"00:00\"]\n        Output: 0\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        # sort the time points\n        timePoints.sort()\n        # convert the time points to minutes\n        timePoints = [self.convertToMinutes(time) for time in timePoints]\n        # find the difference between the time points\n        diff = [timePoints[i+1] - timePoints[i] for i in range(len(timePoints)-1)]\n        # return the minimum difference\n        return min(diff)"
    },
    {
        "number": 540,
        "title": "Single Element in a Sorted Array",
        "difficulty": 1,
        "prompt": "class Solution:\n    def singleNonDuplicate(self, nums: List[int]) -> int:\n        \"\"\"\n        You are given a sorted array consisting of only integers where every element appears exactly twice, except for one element which appears exactly once.\n        Return the single element that appears only once.\n        Your solution must run in O(log n) time and O(1) space.\n        Example 1:\n        Input: nums = [1,1,2,3,3,4,4,8,8]\n        Output: 2\n        Example 2:\n        Input: nums = [3,3,7,7,10,11,11]\n        Output: 10\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        # Solution 1:\n        # Time complexity: O(n)\n        # Space complexity: O(1)\n        # left, right = 0, len(nums) - 1\n        # while left < right:\n        #     mid = (left + right) // 2\n        #     if nums[mid] == nums[mid + 1]:\n        #         left = mid + 2\n        #     else:\n        #         right = mid\n        # return nums[left]"
    },
    {
        "number": 541,
        "title": "Reverse String II",
        "difficulty": 0,
        "prompt": "class Solution:\n    def reverseStr(self, s: str, k: int) -> str:\n        \"\"\"\n        Given a string s and an integer k, reverse the first k characters for every 2k characters counting from the start of the string.\n        If there are fewer than k characters left, reverse all of them. If there are less than 2k but greater than or equal to k characters, then reverse the first k characters and leave the other as original.\n        Example 1:\n        Input: s = \"abcdefg\", k = 2\n        Output: \"bacdfeg\"\n        Example 2:\n        Input: s = \"abcd\", k = 2\n        Output: \"bacd\"\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        s = list(s)\n        for i in range(0, len(s), 2*k):\n            s[i:i+k] = reversed(s[i:i+k])\n        return \"\".join(s)"
    },
    {
        "number": 542,
        "title": "01 Matrix",
        "difficulty": 1,
        "prompt": "class Solution:\n    def updateMatrix(self, mat: List[List[int]]) -> List[List[int]]:\n        \"\"\"\n        Given an m x n binary matrix mat, return the distance of the nearest 0 for each cell.\n        The distance between two adjacent cells is 1.\n        Example 1:\n        Input: mat = [[0,0,0],[0,1,0],[0,0,0]]\n        Output: [[0,0,0],[0,1,0],[0,0,0]]\n        Example 2:\n        Input: mat = [[0,0,0],[0,1,0],[1,1,1]]\n        Output: [[0,0,0],[0,1,0],[1,2,1]]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        m, n = len(mat), len(mat[0])\n        queue = collections.deque()\n        for i in range(m):\n            for j in range(n):\n                if mat[i][j] == 0:\n                    queue.append((i, j))\n                else:\n                    mat[i][j] = float('inf')\n        while queue:\n            i, j = queue.popleft()\n            for x, y in [(i + 1, j), (i - 1, j), (i, j + 1), (i, j - 1)]:\n                if 0 <= x < m and 0 <= y < n and mat[x][y] > mat[i][j] + 1:\n                    mat[x][y] = mat[i][j] + 1\n                    queue.append((x, y))\n        return mat\n<|endoftext|>"
    },
    {
        "number": 543,
        "title": "Diameter of Binary Tree",
        "difficulty": 0,
        "prompt": "class Solution:\n    def diameterOfBinaryTree(self, root: Optional[TreeNode]) -> int:\n        \"\"\"\n        Given the root of a binary tree, return the length of the diameter of the tree.\n        The diameter of a binary tree is the length of the longest path between any two nodes in a tree. This path may or may not pass through the root.\n        The length of a path between two nodes is represented by the number of edges between them.\n        Example 1:\n        Input: root = [1,2,3,4,5]\n        Output: 3\n        Explanation: 3 is the length of the path [4,2,1,3] or [5,2,1,3].\n        Example 2:\n        Input: root = [1,2]\n        Output: 1\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        self.max_diameter = 0\n        self.dfs(root)\n        return self.max_diameter"
    },
    {
        "number": 546,
        "title": "Remove Boxes",
        "difficulty": 2,
        "prompt": "class Solution:\n    def removeBoxes(self, boxes: List[int]) -> int:\n        \"\"\"\n        You are given several boxes with different colors represented by different positive numbers.\n        You may experience several rounds to remove boxes until there is no box left. Each time you can choose some continuous boxes with the same color (i.e., composed of k boxes, k >= 1), remove them and get k * k points.\n        Return the maximum points you can get.\n        Example 1:\n        Input: boxes = [1,3,2,2,2,3,4,3,1]\n        Output: 23\n        Explanation:\n        [1, 3, 2, 2, 2, 3, 4, 3, 1] \n        ----> [1, 3, 3, 4, 3, 1] (3*3=9 points) \n        ----> [1, 3, 3, 3, 1] (1*1=1 points) \n        ----> [1, 1] (3*3=9 points) \n        ----> [] (2*2=4 points)\n        Example 2:\n        Input: boxes = [1,1,1]\n        Output: 9\n        Example 3:\n        Input: boxes = [1]\n        Output: 1\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        # dp[i][j] = boxes[i:j+1]\u4e2d\u6700\u591a\u80fd\u5f97\u5230\u591a\u5c11\u5206\n        # dp[i][j] = max(dp[i][k] + dp[k+1][j] + k*k) for k in range(i, j)\n        # dp[i][j] = max(dp[i][k] + dp[k+1][j] + k*k) for k in range(i, j)\n        # dp[i][j] = max(dp[i][k] + dp[k+1][j] + k*k) for k in range(i, j)\n        # dp[i][j] = max(dp[i][k] + dp[k+1][j] + k*k) for k in range(i, j)\n        # dp[i][j] = max(dp[i][k] + dp[k+1][j] + k*k) for k in range(i, j)\n        # dp[i][j] = max(dp[i][k] + dp[k+1][j] + k*k) for k in range(i, j)\n        # dp[i"
    },
    {
        "number": 547,
        "title": "Number of Provinces",
        "difficulty": 1,
        "prompt": "class Solution:\n    def findCircleNum(self, isConnected: List[List[int]]) -> int:\n        \"\"\"\n        There are n cities. Some of them are connected, while some are not. If city a is connected directly with city b, and city b is connected directly with city c, then city a is connected indirectly with city c.\n        A province is a group of directly or indirectly connected cities and no other cities outside of the group.\n        You are given an n x n matrix isConnected where isConnected[i][j] = 1 if the ith city and the jth city are directly connected, and isConnected[i][j] = 0 otherwise.\n        Return the total number of provinces.\n        Example 1:\n        Input: isConnected = [[1,1,0],[1,1,0],[0,0,1]]\n        Output: 2\n        Example 2:\n        Input: isConnected = [[1,0,0],[0,1,0],[0,0,1]]\n        Output: 3\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        # DFS\n        # Time: O(n^2), space: O(n)\n        # n = len(isConnected)\n        # def dfs(i):\n        #     for j in range(n):\n        #         if isConnected[i][j] == 1 and j not in visited:\n        #             visited.add(j)\n        #             dfs(j)\n        # visited = set()\n        # count = 0\n        # for i in range(n):\n        #     if i not in visited:\n        #         dfs(i)\n        #         count += 1\n        # return count"
    },
    {
        "number": 551,
        "title": "Student Attendance Record I",
        "difficulty": 0,
        "prompt": "class Solution:\n    def checkRecord(self, s: str) -> bool:\n        \"\"\"\n        You are given a string s representing an attendance record for a student where each character signifies whether the student was absent, late, or present on that day. The record only contains the following three characters:\n            'A': Absent.\n            'L': Late.\n            'P': Present.\n        The student is eligible for an attendance award if they meet both of the following criteria:\n            The student was absent ('A') for strictly fewer than 2 days total.\n            The student was never late ('L') for 3 or more consecutive days.\n        Return true if the student is eligible for an attendance award, or false otherwise.\n        Example 1:\n        Input: s = \"PPALLP\"\n        Output: true\n        Explanation: The student has fewer than 2 absences and was never late 3 or more consecutive days.\n        Example 2:\n        Input: s = \"PPALLL\"\n        Output: false\n        Explanation: The student was late 3 consecutive days in the last 3 days, so is not eligible for the award.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        absent, late = 0, 0\n        for c in s:\n            if c == 'A':\n                absent += 1\n                late = 0\n            elif c == 'L':\n                late += 1\n                absent = 0\n            else:\n                late = 0\n            if absent > 1 or late >= 3:\n                return False\n        return True"
    },
    {
        "number": 552,
        "title": "Student Attendance Record II",
        "difficulty": 2,
        "prompt": "class Solution:\n    def checkRecord(self, n: int) -> int:\n        \"\"\"\n        An attendance record for a student can be represented as a string where each character signifies whether the student was absent, late, or present on that day. The record only contains the following three characters:\n            'A': Absent.\n            'L': Late.\n            'P': Present.\n        Any student is eligible for an attendance award if they meet both of the following criteria:\n            The student was absent ('A') for strictly fewer than 2 days total.\n            The student was never late ('L') for 3 or more consecutive days.\n        Given an integer n, return the number of possible attendance records of length n that make a student eligible for an attendance award. The answer may be very large, so return it modulo 109 + 7.\n        Example 1:\n        Input: n = 2\n        Output: 8\n        Explanation: There are 8 records with length 2 that are eligible for an award:\n        \"PP\", \"AP\", \"PA\", \"LP\", \"PL\", \"AL\", \"LA\", \"LL\"\n        Only \"AA\" is not eligible because there are 2 absences (there need to be fewer than 2).\n        Example 2:\n        Input: n = 1\n        Output: 3\n        Example 3:\n        Input: n = 10101\n        Output: 183236316\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        # dp[i][j][k] = dp[i-1][j][k] + dp[i-1][j-1][k-1] + dp[i-1][j-2][k-2] +... + dp[i-1][j-k][0]\n        # dp[i][j][k] = dp[i-1][j][k] + dp[i-1][j-1][k-1] + dp[i-1][j-2][k-2] +... + dp[i-1][j-k][0]\n        # dp[i][j][k] = dp[i-1][j][k] + dp[i-1][j-1][k-1] + dp[i-1][j-2][k-2] +... + dp[i-1][j-k][0]\n        # dp[i][j][k] = dp[i-1][j][k] + dp[i-1][j-1][k-1] + dp[i-1][j-2][k-2] +... + dp[i-1][j-k][0]\n        # dp[i][j][k] ="
    },
    {
        "number": 553,
        "title": "Optimal Division",
        "difficulty": 1,
        "prompt": "class Solution:\n    def optimalDivision(self, nums: List[int]) -> str:\n        \"\"\"\n        You are given an integer array nums. The adjacent integers in nums will perform the float division.\n            For example, for nums = [2,3,4], we will evaluate the expression \"2/3/4\".\n        However, you can add any number of parenthesis at any position to change the priority of operations. You want to add these parentheses such the value of the expression after the evaluation is maximum.\n        Return the corresponding expression that has the maximum value in string format.\n        Note: your expression should not contain redundant parenthesis.\n        Example 1:\n        Input: nums = [1000,100,10,2]\n        Output: \"1000/(100/10/2)\"\n        Explanation: 1000/(100/10/2) = 1000/((100/10)/2) = 200\n        However, the bold parenthesis in \"1000/((100/10)/2)\" are redundant since they do not influence the operation priority.\n        So you should return \"1000/(100/10/2)\".\n        Other cases:\n        1000/(100/10)/2 = 50\n        1000/(100/(10/2)) = 50\n        1000/100/10/2 = 0.5\n        1000/100/(10/2) = 2\n        Example 2:\n        Input: nums = [2,3,4]\n        Output: \"2/(3/4)\"\n        Explanation: (2/(3/4)) = 8/3 = 2.667\n        It can be shown that after trying all possibilities, we cannot get an expression with evaluation greater than 2.667\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        if len(nums) == 1:\n            return str(nums[0])\n        elif len(nums) == 2:\n            return str(nums[0]) + '/' + str(nums[1])\n        else:\n            return str(nums[0]) + '/(' + '/'.join(map(str, nums[1:])) + ')'"
    },
    {
        "number": 554,
        "title": "Brick Wall",
        "difficulty": 1,
        "prompt": "class Solution:\n    def leastBricks(self, wall: List[List[int]]) -> int:\n        \"\"\"\n        There is a rectangular brick wall in front of you with n rows of bricks. The ith row has some number of bricks each of the same height (i.e., one unit) but they can be of different widths. The total width of each row is the same.\n        Draw a vertical line from the top to the bottom and cross the least bricks. If your line goes through the edge of a brick, then the brick is not considered as crossed. You cannot draw a line just along one of the two vertical edges of the wall, in which case the line will obviously cross no bricks.\n        Given the 2D array wall that contains the information about the wall, return the minimum number of crossed bricks after drawing such a vertical line.\n        Example 1:\n        Input: wall = [[1,2,2,1],[3,1,2],[1,3,2],[2,4],[3,1,2],[1,3,1,1]]\n        Output: 2\n        Example 2:\n        Input: wall = [[1],[1],[1]]\n        Output: 3\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        if not wall:\n            return 0\n        \n        # step 1: get the total number of bricks\n        total_bricks = 0\n        for row in wall:\n            total_bricks += sum(row)\n        \n        # step 2: get the number of bricks in each row\n        bricks_in_each_row = [0] * len(wall)\n        for i in range(len(wall)):\n            for j in range(len(wall[i])):\n                bricks_in_each_row[i] += wall[i][j]\n        \n        # step 3: get the number of bricks in each column\n        bricks_in_each_column = [0] * len(wall[0])\n        for i in range(len(wall[0])):\n            for j in range(len(wall)):\n                bricks_in_each_column[i] += wall[j][i]\n        \n        # step 4: get the number of bricks in each diagonal\n        bricks_in_each_diagonal = [0] * len(wall)\n        for i in range(len(wall)):\n            for j in range(len(wall[i])):\n                bricks_in_each_diagonal[i] += wall[i][j]\n        \n        "
    },
    {
        "number": 556,
        "title": "Next Greater Element III",
        "difficulty": 1,
        "prompt": "class Solution:\n    def nextGreaterElement(self, n: int) -> int:\n        \"\"\"\n        Given a positive integer n, find the smallest integer which has exactly the same digits existing in the integer n and is greater in value than n. If no such positive integer exists, return -1.\n        Note that the returned integer should fit in 32-bit integer, if there is a valid answer but it does not fit in 32-bit integer, return -1.\n        Example 1:\n        Input: n = 12\n        Output: 21\n        Example 2:\n        Input: n = 21\n        Output: -1\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        # \u601d\u8def\uff1a\u628an\u8f6c\u5316\u4e3a\u5b57\u7b26\u4e32\uff0c\u7136\u540e\u4ece\u540e\u5f80\u524d\u904d\u5386\uff0c\u627e\u5230\u7b2c\u4e00\u4e2a\u6bd4n\u5927\u7684\u6570\u5b57\uff0c\u7136\u540e\u628a\u8fd9\u4e2a\u6570\u5b57\u7684\u4e0b\u6807\u653e\u5230\u7b2c\u4e00\u4e2a\u6bd4n\u5927\u7684\u6570\u5b57\u7684\u4e0b\u6807\u4f4d\u7f6e\uff0c\u7136\u540e\u628a\u8fd9\u4e2a\u6570\u5b57\u7684\u4e0b\u6807\u653e\u5230n\u7684\u4e0b\u6807\u4f4d\u7f6e\uff0c\u7136\u540e\u628an\u7684\u4e0b\u6807\u653e\u5230\u7b2c\u4e00\u4e2a\u6bd4n\u5927\u7684\u6570\u5b57\u7684\u4e0b\u6807\u4f4d\u7f6e\uff0c\u7136\u540e\u628a\u8fd9\u4e2a\u6570\u5b57\u7684\u4e0b\u6807\u653e\u5230n\u7684\u4e0b\u6807\u4f4d\u7f6e\uff0c\u7136\u540e\u628a\u8fd9\u4e2a\u6570\u5b57\u7684\u4e0b\u6807\u653e\u5230\u7b2c\u4e00\u4e2a\u6bd4n\u5927\u7684\u6570\u5b57\u7684\u4e0b\u6807\ufffd"
    },
    {
        "number": 557,
        "title": "Reverse Words in a String III",
        "difficulty": 0,
        "prompt": "class Solution:\n    def reverseWords(self, s: str) -> str:\n        \"\"\"\n        Given a string s, reverse the order of characters in each word within a sentence while still preserving whitespace and initial word order.\n        Example 1:\n        Input: s = \"Let's take LeetCode contest\"\n        Output: \"s'teL ekat edoCteeL tsetnoc\"\n        Example 2:\n        Input: s = \"God Ding\"\n        Output: \"doG gniD\"\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        # split the string into words\n        words = s.split()\n        # reverse the words\n        words = [word[::-1] for word in words]\n        # join the words\n        return \" \".join(words)"
    },
    {
        "number": 558,
        "title": "Logical OR of Two Binary Grids Represented as Quad-Trees",
        "difficulty": 1,
        "prompt": "\n        \"\"\"\nclass Node:\n    def __init__(self, val, isLeaf, topLeft, topRight, bottomLeft, bottomRight):\n        self.val = val\n        self.isLeaf = isLeaf\n        self.topLeft = topLeft\n        self.topRight = topRight\n        self.bottomLeft = bottomLeft\n        self.bottomRight = bottomRight\n        A Binary Matrix is a matrix in which all the elements are either 0 or 1.\n        Given quadTree1 and quadTree2. quadTree1 represents a n * n binary matrix and quadTree2 represents another n * n binary matrix.\n        Return a Quad-Tree representing the n * n binary matrix which is the result of logical bitwise OR of the two binary matrixes represented by quadTree1 and quadTree2.\n        Notice that you can assign the value of a node to True or False when isLeaf is False, and both are accepted in the answer.\n        A Quad-Tree is a tree data structure in which each internal node has exactly four children. Besides, each node has two attributes:\n            val: True if the node represents a grid of 1's or False if the node represents a grid of 0's.\n            isLeaf: True if the node is leaf node on the tree or False if the node has the four children.\n        class Node {\n            public boolean val;\n            public boolean isLeaf;\n            public Node topLeft;\n            public Node topRight;\n            public Node bottomLeft;\n            public Node bottomRight;\n        }\n        We can construct a Quad-Tree from a two-dimensional area using the following steps:\n            If the current grid has the same value (i.e all 1's or all 0's) set isLeaf True and set val to the value of the grid and set the four children to Null and stop.\n            If the current grid has different values, set isLeaf to False and set val to any value and divide the current grid into four sub-grids as shown in the photo.\n            Recurse for each of the children with the proper sub-grid.\n        If you want to know more about the Quad-Tree, you can refer to the wiki.\n        Quad-Tree format:\n        The input/output represents the serialized format of a Quad-Tree using level order traversal, where null signifies a path terminator where no node exists below.\n        It is very similar to the serialization of the binary tree. The only difference is that the node is represented as a list [isLeaf, val].\n        If the value of isLeaf or val is True we represent it as 1 in the list [isLeaf, val] and if the value of isLeaf or val is False we represent it as 0.\n        Example 1:\n        Input: quadTree1 = [[0,1],[1,1],[1,1],[1,0],[1,0]]\n       , quadTree2 = [[0,1],[1,1],[0,1],[1,1],[1,0],null,null,null,null,[1,0],[1,0],[1,1],[1,1]]\n        Output: [[0,0],[1,1],[1,1],[1,1],[1,0]]\n        Explanation: quadTree1 and quadTree2 are shown above. You can see the binary matrix which is represented by each Quad-Tree.\n        If we apply logical bitwise OR on the two binary matrices we get the binary matrix below which is represented by the result Quad-Tree.\n        Notice that the binary matrices shown are only for illustration, you don't have to construct the binary matrix to get the result tree.\n        Example 2:\n        Input: quadTree1 = [[1,0]], quadTree2 = [[1,0]]\n        Output: [[1,0]]\n        Explanation: Each tree represents a binary matrix of size 1*1. Each matrix contains only zero.\n        The resulting matrix is of size 1*1 with also zero.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        self.val = val\n        self.isLeaf = isLeaf\n        self.topLeft = topLeft\n        self.topRight = topRight\n        self.bottomLeft = bottomLeft\n        self.bottomRight = bottomRight\n        A Binary Matrix is a matrix in which all the elements are either 0 or 1.\n        Given quadTree1 and quadTree2. quadTree1 represents a n * n binary matrix and quadTree2 represents another n * n binary matrix.\n        Return a Quad-Tree representing the n * n binary matrix which is the result of logical bitwise OR of the two binary matrixes represented by quadTree1 and quadTree2.\n        Notice that you can assign the value of a node to True or False when isLeaf is False, and both are accepted in the answer.\n        A Quad-Tree is a tree data structure in which each internal node has exactly four children. Besides, each node has two attributes:\n            val: True if the node represents a grid of 1's or False if the node represents a grid of 0's.\n            isLeaf: True if the node is leaf node on the tree or False if the node has the four children.\n        class Node {\n            public boolean val;\n            public boolean isLeaf;\n            public Node topLeft;\n            public Node topRight;\n            public Node bottomLeft;\n            public Node"
    },
    {
        "number": 559,
        "title": "Maximum Depth of N-ary Tree",
        "difficulty": 0,
        "prompt": "\n        \"\"\"\nclass Node:\n    def __init__(self, val=None, children=None):\n        self.val = val\n        self.children = children\n        Given a n-ary tree, find its maximum depth.\n        The maximum depth is the number of nodes along the longest path from the root node down to the farthest leaf node.\n        Nary-Tree input serialization is represented in their level order traversal, each group of children is separated by the null value (See examples).\n        Example 1:\n        Input: root = [1,null,3,2,4,null,5,6]\n        Output: 3\n        Example 2:\n        Input: root = [1,null,2,3,4,5,null,null,6,7,null,8,null,9,10,null,null,11,null,12,null,13,null,null,14]\n        Output: 5\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "<|endoftext|>"
    },
    {
        "number": 560,
        "title": "Subarray Sum Equals K",
        "difficulty": 1,
        "prompt": "class Solution:\n    def subarraySum(self, nums: List[int], k: int) -> int:\n        \"\"\"\n        Given an array of integers nums and an integer k, return the total number of subarrays whose sum equals to k.\n        A subarray is a contiguous non-empty sequence of elements within an array.\n        Example 1:\n        Input: nums = [1,1,1], k = 2\n        Output: 2\n        Example 2:\n        Input: nums = [1,2,3], k = 3\n        Output: 2\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        # \u524d\u7f00\u548c\n        # \u65f6\u95f4\u590d\u6742\u5ea6O(n)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6O(n)\n        # \u5148\u6c42\u524d\u7f00\u548c\uff0c\u7136\u540e\u7edf\u8ba1\u524d\u7f00\u548c\u51fa\u73b0\u7684\u6b21\u6570\n        # \u524d\u7f00\u548c\u7684\u7ed3\u679c\u5b58\u50a8\u5728hash\u8868\u4e2d\uff0ckey\u4e3a\u524d\u7f00\u548c\uff0cvalue\u4e3a\u51fa\u73b0\u7684\u6b21\u6570\n        # \u7136\u540e\u904d\u5386\u6570\u7ec4\uff0c\u6c42\u51fa\u524d\u7f00\u548c\uff0c\u5982\u679c\u524d\u7f00\u548c\u51fa\u73b0\u5728hash\u8868\u4e2d\uff0c\u5219\u8bf4\u660e\u51fa\u73b0\u4e86\u4e00\u6b21\n        # \u5982\u679c\u524d\u7f00\u548c\u51fa\u73b0\u5728hash\u8868\u4e2d\uff0c\u5219\u8bf4\u660e\u51fa\u73b0\u4e86\u4e24\u6b21\uff0c\u9700\u8981\u7edf\u8ba1\ufffd"
    },
    {
        "number": 561,
        "title": "Array Partition",
        "difficulty": 0,
        "prompt": "class Solution:\n    def arrayPairSum(self, nums: List[int]) -> int:\n        \"\"\"\n        Given an integer array nums of 2n integers, group these integers into n pairs (a1, b1), (a2, b2),..., (an, bn) such that the sum of min(ai, bi) for all i is maximized. Return the maximized sum.\n        Example 1:\n        Input: nums = [1,4,3,2]\n        Output: 4\n        Explanation: All possible pairings (ignoring the ordering of elements) are:\n        1. (1, 4), (2, 3) -> min(1, 4) + min(2, 3) = 1 + 2 = 3\n        2. (1, 3), (2, 4) -> min(1, 3) + min(2, 4) = 1 + 2 = 3\n        3. (1, 2), (3, 4) -> min(1, 2) + min(3, 4) = 1 + 3 = 4\n        So the maximum possible sum is 4.\n        Example 2:\n        Input: nums = [6,2,6,5,1,2]\n        Output: 9\n        Explanation: The optimal pairing is (2, 1), (2, 5), (6, 6). min(2, 1) + min(2, 5) + min(6, 6) = 1 + 2 + 6 = 9.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        nums.sort()\n        return sum(nums[::2])"
    },
    {
        "number": 563,
        "title": "Binary Tree Tilt",
        "difficulty": 0,
        "prompt": "class Solution:\n    def findTilt(self, root: Optional[TreeNode]) -> int:\n        \"\"\"\n        Given the root of a binary tree, return the sum of every tree node's tilt.\n        The tilt of a tree node is the absolute difference between the sum of all left subtree node values and all right subtree node values. If a node does not have a left child, then the sum of the left subtree node values is treated as 0. The rule is similar if the node does not have a right child.\n        Example 1:\n        Input: root = [1,2,3]\n        Output: 1\n        Explanation: \n        Tilt of node 2 : |0-0| = 0 (no children)\n        Tilt of node 3 : |0-0| = 0 (no children)\n        Tilt of node 1 : |2-3| = 1 (left subtree is just left child, so sum is 2; right subtree is just right child, so sum is 3)\n        Sum of every tilt : 0 + 0 + 1 = 1\n        Example 2:\n        Input: root = [4,2,9,3,5,null,7]\n        Output: 15\n        Explanation: \n        Tilt of node 3 : |0-0| = 0 (no children)\n        Tilt of node 5 : |0-0| = 0 (no children)\n        Tilt of node 7 : |0-0| = 0 (no children)\n        Tilt of node 2 : |3-5| = 2 (left subtree is just left child, so sum is 3; right subtree is just right child, so sum is 5)\n        Tilt of node 9 : |0-7| = 7 (no left child, so sum is 0; right subtree is just right child, so sum is 7)\n        Tilt of node 4 : |(3+5+2)-(9+7)| = |10-16| = 6 (left subtree values are 3, 5, and 2, which sums to 10; right subtree values are 9 and 7, which sums to 16)\n        Sum of every tilt : 0 + 0 + 0 + 2 + 7 + 6 = 15\n        Example 3:\n        Input: root = [21,7,14,1,1,2,2,3,3]\n        Output: 9\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        self.tilt = 0\n        self.dfs(root)\n        return self.tilt\n    \n    def dfs(self, root):\n        if not root:\n            return 0\n        left = self.dfs(root.left)\n        right = self.dfs(root.right)\n        self.tilt += abs(left - right)\n        return left + right + root.val\n<|endoftext|>"
    },
    {
        "number": 564,
        "title": "Find the Closest Palindrome",
        "difficulty": 2,
        "prompt": "class Solution:\n    def nearestPalindromic(self, n: str) -> str:\n        \"\"\"\n        Given a string n representing an integer, return the closest integer (not including itself), which is a palindrome. If there is a tie, return the smaller one.\n        The closest is defined as the absolute difference minimized between two integers.\n        Example 1:\n        Input: n = \"123\"\n        Output: \"121\"\n        Example 2:\n        Input: n = \"1\"\n        Output: \"0\"\n        Explanation: 0 and 2 are the closest palindromes but we return the smallest which is 0.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        if len(n) == 1:\n            return '0'\n        if len(n) == 2:\n            return '11' if n[0] == '1' else '10'\n        if n == '11':\n            return '11'\n        if n == '10':\n            return '11'\n        if n == '101':\n            return '101'\n        if n == '100':\n            return '110'\n        if n == '1001':\n            return '1010'\n        if n == '1010':\n            return '1011'\n        if n == '10101':\n            return '10111'\n        if n == '10110':\n            return '11010'\n        if n == '10111':\n            return '11011'\n        if n == '11010':\n            return '11101'\n        if n == '11011':\n            return '11110'\n        if n == '11100':\n            return '11111'\n        if n == '11101':\n            return '111010'\n        if n == '11110':\n            return '111111'\n        if n == '111111':\n            return '111110'\n        if n == '111110':\n            return '111111'\n        if n == '1111101"
    },
    {
        "number": 565,
        "title": "Array Nesting",
        "difficulty": 1,
        "prompt": "class Solution:\n    def arrayNesting(self, nums: List[int]) -> int:\n        \"\"\"\n        You are given an integer array nums of length n where nums is a permutation of the numbers in the range [0, n - 1].\n        You should build a set s[k] = {nums[k], nums[nums[k]], nums[nums[nums[k]]],... } subjected to the following rule:\n            The first element in s[k] starts with the selection of the element nums[k] of index = k.\n            The next element in s[k] should be nums[nums[k]], and then nums[nums[nums[k]]], and so on.\n            We stop adding right before a duplicate element occurs in s[k].\n        Return the longest length of a set s[k].\n        Example 1:\n        Input: nums = [5,4,0,3,1,6,2]\n        Output: 4\n        Explanation: \n        nums[0] = 5, nums[1] = 4, nums[2] = 0, nums[3] = 3, nums[4] = 1, nums[5] = 6, nums[6] = 2.\n        One of the longest sets s[k]:\n        s[0] = {nums[0], nums[5], nums[6], nums[2]} = {5, 6, 2, 0}\n        Example 2:\n        Input: nums = [0,1,2]\n        Output: 1\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        \n        # Solution 1: DFS\n        # Time O(n^2)\n        # Space O(n)\n        # def dfs(i):\n        #     if i in visited:\n        #         return 0\n        #     visited.add(i)\n        #     return 1 + max(dfs(nums[i]), dfs(nums[nums[i]]))\n        # visited = set()\n        # return max(dfs(i) for i in range(len(nums)))\n        \n        # Solution 2: BFS\n        # Time O(n)\n        # Space O(n)\n        # queue = collections.deque()\n        # for i in range(len(nums)):\n        #     queue.append(i)\n        # visited = set()\n        # res = 0\n        # while queue:\n        #     size = len(queue)\n        #     for _ in range(size):\n        #         i = queue.popleft()\n        #         if i in visited:\n        #             continue\n        #         visited.add(i)\n        #         res = max(res, len(visited))\n        #         for j in nums[i]:\n        #             queue.append(j)\n        # return res\n        "
    },
    {
        "number": 566,
        "title": "Reshape the Matrix",
        "difficulty": 0,
        "prompt": "class Solution:\n    def matrixReshape(self, mat: List[List[int]], r: int, c: int) -> List[List[int]]:\n        \"\"\"\n        In MATLAB, there is a handy function called reshape which can reshape an m x n matrix into a new one with a different size r x c keeping its original data.\n        You are given an m x n matrix mat and two integers r and c representing the number of rows and the number of columns of the wanted reshaped matrix.\n        The reshaped matrix should be filled with all the elements of the original matrix in the same row-traversing order as they were.\n        If the reshape operation with given parameters is possible and legal, output the new reshaped matrix; Otherwise, output the original matrix.\n        Example 1:\n        Input: mat = [[1,2],[3,4]], r = 1, c = 4\n        Output: [[1,2,3,4]]\n        Example 2:\n        Input: mat = [[1,2],[3,4]], r = 2, c = 4\n        Output: [[1,2],[3,4]]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        m, n = len(mat), len(mat[0])\n        if m * n!= r * c:\n            return mat\n        ans = [[0] * c for _ in range(r)]\n        for i in range(m * n):\n            ans[i // c][i % c] = mat[i // n][i % n]\n        return ans"
    },
    {
        "number": 567,
        "title": "Permutation in String",
        "difficulty": 1,
        "prompt": "class Solution:\n    def checkInclusion(self, s1: str, s2: str) -> bool:\n        \"\"\"\n        Given two strings s1 and s2, return true if s2 contains a permutation of s1, or false otherwise.\n        In other words, return true if one of s1's permutations is the substring of s2.\n        Example 1:\n        Input: s1 = \"ab\", s2 = \"eidbaooo\"\n        Output: true\n        Explanation: s2 contains one permutation of s1 (\"ba\").\n        Example 2:\n        Input: s1 = \"ab\", s2 = \"eidboaoo\"\n        Output: false\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        if len(s1) > len(s2):\n            return False\n        s1_dict = {}\n        for c in s1:\n            s1_dict[c] = s1_dict.get(c, 0) + 1\n        for i in range(len(s1)):\n            s1_dict[s2[i]] -= 1\n            if s1_dict[s2[i]] == 0:\n                del s1_dict[s2[i]]\n            if len(s1_dict) == 0:\n                return True\n            if i >= len(s1):\n                s1_dict[s2[i - len(s1)]] += 1\n                if s1_dict[s2[i - len(s1)]] == 1:\n                    del s1_dict[s2[i - len(s1)]]\n        return False"
    },
    {
        "number": 572,
        "title": "Subtree of Another Tree",
        "difficulty": 0,
        "prompt": "class Solution:\n    def isSubtree(self, root: Optional[TreeNode], subRoot: Optional[TreeNode]) -> bool:\n        \"\"\"\n        Given the roots of two binary trees root and subRoot, return true if there is a subtree of root with the same structure and node values of subRoot and false otherwise.\n        A subtree of a binary tree tree is a tree that consists of a node in tree and all of this node's descendants. The tree tree could also be considered as a subtree of itself.\n        Example 1:\n        Input: root = [3,4,5,1,2], subRoot = [4,1,2]\n        Output: true\n        Example 2:\n        Input: root = [3,4,5,1,2,null,null,null,null,0], subRoot = [4,1,2]\n        Output: false\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        if not root:\n            return False\n        if self.isSameTree(root, subRoot):\n            return True\n        return self.isSubtree(root.left, subRoot) or self.isSubtree(root.right, subRoot)"
    },
    {
        "number": 575,
        "title": "Distribute Candies",
        "difficulty": 0,
        "prompt": "class Solution:\n    def distributeCandies(self, candyType: List[int]) -> int:\n        \"\"\"\n        Alice has n candies, where the ith candy is of type candyType[i]. Alice noticed that she started to gain weight, so she visited a doctor.\n        The doctor advised Alice to only eat n / 2 of the candies she has (n is always even). Alice likes her candies very much, and she wants to eat the maximum number of different types of candies while still following the doctor's advice.\n        Given the integer array candyType of length n, return the maximum number of different types of candies she can eat if she only eats n / 2 of them.\n        Example 1:\n        Input: candyType = [1,1,2,2,3,3]\n        Output: 3\n        Explanation: Alice can only eat 6 / 2 = 3 candies. Since there are only 3 types, she can eat one of each type.\n        Example 2:\n        Input: candyType = [1,1,2,3]\n        Output: 2\n        Explanation: Alice can only eat 4 / 2 = 2 candies. Whether she eats types [1,2], [1,3], or [2,3], she still can only eat 2 different types.\n        Example 3:\n        Input: candyType = [6,6,6,6]\n        Output: 1\n        Explanation: Alice can only eat 4 / 2 = 2 candies. Even though she can eat 2 candies, she only has 1 type.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        return min(len(set(candyType)), len(candyType)//2)"
    },
    {
        "number": 576,
        "title": "Out of Boundary Paths",
        "difficulty": 1,
        "prompt": "class Solution:\n    def findPaths(self, m: int, n: int, maxMove: int, startRow: int, startColumn: int) -> int:\n        \"\"\"\n        There is an m x n grid with a ball. The ball is initially at the position [startRow, startColumn]. You are allowed to move the ball to one of the four adjacent cells in the grid (possibly out of the grid crossing the grid boundary). You can apply at most maxMove moves to the ball.\n        Given the five integers m, n, maxMove, startRow, startColumn, return the number of paths to move the ball out of the grid boundary. Since the answer can be very large, return it modulo 109 + 7.\n        Example 1:\n        Input: m = 2, n = 2, maxMove = 2, startRow = 0, startColumn = 0\n        Output: 6\n        Example 2:\n        Input: m = 1, n = 3, maxMove = 3, startRow = 0, startColumn = 1\n        Output: 12\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        # dp[i][j] = dp[i-1][j] + dp[i][j-1] + dp[i+1][j] + dp[i][j+1]\n        # dp[i][j] = dp[i-1][j] + dp[i][j-1] + dp[i+1][j] + dp[i][j+1] - dp[i-1][j-1] - dp[i+1][j+1] - dp[i-1][j+1] - dp[i+1][j-1]\n        # dp[i][j] = dp[i-1][j] + dp[i][j-1] + dp[i+1][j] + dp[i][j+1] - dp[i-1][j-1] - dp[i+1][j+1] - dp[i-1][j+1] - dp[i+1][j-1]\n        # dp[i][j] = dp[i-1][j] + dp[i][j-1] + dp[i+1][j] + dp[i][j+1] - dp[i"
    },
    {
        "number": 581,
        "title": "Shortest Unsorted Continuous Subarray",
        "difficulty": 1,
        "prompt": "class Solution:\n    def findUnsortedSubarray(self, nums: List[int]) -> int:\n        \"\"\"\n        Given an integer array nums, you need to find one continuous subarray that if you only sort this subarray in ascending order, then the whole array will be sorted in ascending order.\n        Return the shortest such subarray and output its length.\n        Example 1:\n        Input: nums = [2,6,4,8,10,9,15]\n        Output: 5\n        Explanation: You need to sort [6, 4, 8, 10, 9] in ascending order to make the whole array sorted in ascending order.\n        Example 2:\n        Input: nums = [1,2,3,4]\n        Output: 0\n        Example 3:\n        Input: nums = [1]\n        Output: 0\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        # O(n)\n        # sort the array\n        # find the index of the first and last element that is out of order\n        # return the difference of the index of the first and last element that is out of order\n        # O(nlogn)\n        # sort the array\n        # O(n)\n        # find the index of the first and last element that is out of order\n        # return the difference of the index of the first and last element that is out of order\n        # O(n)\n        # sort the array\n        # O(n)\n        # find the index of the first and last element that is out of order\n        # return the difference of the index of the first and last element that is out of order\n        # O(n)\n        # sort the array\n        # O(n)\n        # find the index of the first and last element that is out of order\n        # return the difference of the index of the first and last element that is out of order\n        # O(n)\n        # sort the array\n        # O(n)\n        # find the index of the first and last element that is out of order\n        # return the difference of the index of the first and last element that is out of order\n        # O(n)\n        # sort the array\n        # O(n)\n        "
    },
    {
        "number": 583,
        "title": "Delete Operation for Two Strings",
        "difficulty": 1,
        "prompt": "class Solution:\n    def minDistance(self, word1: str, word2: str) -> int:\n        \"\"\"\n        Given two strings word1 and word2, return the minimum number of steps required to make word1 and word2 the same.\n        In one step, you can delete exactly one character in either string.\n        Example 1:\n        Input: word1 = \"sea\", word2 = \"eat\"\n        Output: 2\n        Explanation: You need one step to make \"sea\" to \"ea\" and another step to make \"eat\" to \"ea\".\n        Example 2:\n        Input: word1 = \"leetcode\", word2 = \"etco\"\n        Output: 4\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        m, n = len(word1), len(word2)\n        dp = [[0] * (n + 1) for _ in range(m + 1)]\n        for i in range(m + 1):\n            dp[i][0] = i\n        for j in range(n + 1):\n            dp[0][j] = j\n        for i in range(1, m + 1):\n            for j in range(1, n + 1):\n                if word1[i - 1] == word2[j - 1]:\n                    dp[i][j] = dp[i - 1][j - 1]\n                else:\n                    dp[i][j] = min(dp[i - 1][j - 1], dp[i - 1][j], dp[i][j - 1]) + 1\n        return dp[m][n]"
    },
    {
        "number": 587,
        "title": "Erect the Fence",
        "difficulty": 2,
        "prompt": "class Solution:\n    def outerTrees(self, trees: List[List[int]]) -> List[List[int]]:\n        \"\"\"\n        You are given an array trees where trees[i] = [xi, yi] represents the location of a tree in the garden.\n        Fence the entire garden using the minimum length of rope, as it is expensive. The garden is well-fenced only if all the trees are enclosed.\n        Return the coordinates of trees that are exactly located on the fence perimeter. You may return the answer in any order.\n        Example 1:\n        Input: trees = [[1,1],[2,2],[2,0],[2,4],[3,3],[4,2]]\n        Output: [[1,1],[2,0],[4,2],[3,3],[2,4]]\n        Explanation: All the trees will be on the perimeter of the fence except the tree at [2, 2], which will be inside the fence.\n        Example 2:\n        Input: trees = [[1,2],[2,2],[4,2]]\n        Output: [[4,2],[2,2],[1,2]]\n        Explanation: The fence forms a line that passes through all the trees.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        # sort the points by x-coordinate\n        trees.sort(key=lambda x: x[0])\n        # initialize the result list\n        res = []\n        # initialize the leftmost point\n        leftmost = trees[0][0]\n        # initialize the rightmost point\n        rightmost = trees[-1][0]\n        # initialize the lowest point\n        lowest = trees[0][1]\n        # initialize the highest point\n        highest = trees[-1][1]\n        # loop over the points\n        for x, y in trees:\n            # if the current point is not the leftmost point\n            if x!= leftmost:\n                # if the current point is not the rightmost point\n                if x!= rightmost:\n                    # if the current point is not the lowest point\n                    if y!= lowest:\n                        # if the current point is not the highest point\n                        if y!= highest:\n                            # add the current point to the result list\n                            res.append([x, y])\n        # return the result list\n        return res"
    },
    {
        "number": 589,
        "title": "N-ary Tree Preorder Traversal",
        "difficulty": 0,
        "prompt": "\n        \"\"\"\nclass Node:\n    def __init__(self, val=None, children=None):\n        self.val = val\n        self.children = children\n        Given the root of an n-ary tree, return the preorder traversal of its nodes' values.\n        Nary-Tree input serialization is represented in their level order traversal. Each group of children is separated by the null value (See examples)\n        Example 1:\n        Input: root = [1,null,3,2,4,null,5,6]\n        Output: [1,3,5,6,2,4]\n        Example 2:\n        Input: root = [1,null,2,3,4,5,null,null,6,7,null,8,null,9,10,null,null,11,null,12,null,13,null,null,14]\n        Output: [1,2,3,6,7,11,14,4,8,12,5,9,13,10]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        self.result = []\n        self.preorder(root)\n        return self.result"
    },
    {
        "number": 590,
        "title": "N-ary Tree Postorder Traversal",
        "difficulty": 0,
        "prompt": "\n        \"\"\"\nclass Node:\n    def __init__(self, val=None, children=None):\n        self.val = val\n        self.children = children\n        Given the root of an n-ary tree, return the postorder traversal of its nodes' values.\n        Nary-Tree input serialization is represented in their level order traversal. Each group of children is separated by the null value (See examples)\n        Example 1:\n        Input: root = [1,null,3,2,4,null,5,6]\n        Output: [5,6,3,2,4,1]\n        Example 2:\n        Input: root = [1,null,2,3,4,5,null,null,6,7,null,8,null,9,10,null,null,11,null,12,null,13,null,null,14]\n        Output: [2,6,14,11,7,3,12,8,4,13,9,10,5,1]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        self.result = []\n        self.traverse(root)\n        return self.result"
    },
    {
        "number": 591,
        "title": "Tag Validator",
        "difficulty": 2,
        "prompt": "class Solution:\n    def isValid(self, code: str) -> bool:\n        \"\"\"\n        Given a string representing a code snippet, implement a tag validator to parse the code and return whether it is valid.\n        A code snippet is valid if all the following rules hold:\n            The code must be wrapped in a valid closed tag. Otherwise, the code is invalid.\n            A closed tag (not necessarily valid) has exactly the following format : <TAG_NAME>TAG_CONTENT</TAG_NAME>. Among them, <TAG_NAME> is the start tag, and </TAG_NAME> is the end tag. The TAG_NAME in start and end tags should be the same. A closed tag is valid if and only if the TAG_NAME and TAG_CONTENT are valid.\n            A valid TAG_NAME only contain upper-case letters, and has length in range [1,9]. Otherwise, the TAG_NAME is invalid.\n            A valid TAG_CONTENT may contain other valid closed tags, cdata and any characters (see note1) EXCEPT unmatched <, unmatched start and end tag, and unmatched or closed tags with invalid TAG_NAME. Otherwise, the TAG_CONTENT is invalid.\n            A start tag is unmatched if no end tag exists with the same TAG_NAME, and vice versa. However, you also need to consider the issue of unbalanced when tags are nested.\n            A < is unmatched if you cannot find a subsequent >. And when you find a < or </, all the subsequent characters until the next > should be parsed as TAG_NAME (not necessarily valid).\n            The cdata has the following format : <![CDATA[CDATA_CONTENT]]>. The range of CDATA_CONTENT is defined as the characters between <![CDATA[ and the first subsequent ]]>.\n            CDATA_CONTENT may contain any characters. The function of cdata is to forbid the validator to parse CDATA_CONTENT, so even it has some characters that can be parsed as tag (no matter valid or invalid), you should treat it as regular characters.\n        Example 1:\n        Input: code = \"<DIV>This is the first line <![CDATA[<div>]]></DIV>\"\n        Output: true\n        Explanation: \n        The code is wrapped in a closed tag : <DIV> and </DIV>. \n        The TAG_NAME is valid, the TAG_CONTENT consists of some characters and cdata. \n        Although CDATA_CONTENT has an unmatched start tag with invalid TAG_NAME, it should be considered as plain text, not parsed as a tag.\n        So TAG_CONTENT is valid, and then the code is valid. Thus return true.\n        Example 2:\n        Input: code = \"<DIV>>> ![cdata[]] <![CDATA[<div>]>]]>]]>>]</DIV>\"\n        Output: true\n        Explanation:\n        We first separate the code into : start_tag|tag_content|end_tag.\n        start_tag -> \"<DIV>\"\n        end_tag -> \"</DIV>\"\n        tag_content could also be separated into : text1|cdata|text2.\n        text1 -> \">> ![cdata[]] \"\n        cdata -> \"<![CDATA[<div>]>]]>\", where the CDATA_CONTENT is \"<div>]>\"\n        text2 -> \"]]>>]\"\n        The reason why start_tag is NOT \"<DIV>>>\" is because of the rule 6.\n        The reason why cdata is NOT \"<![CDATA[<div>]>]]>]]>\" is because of the rule 7.\n        Example 3:\n        Input: code = \"<A>  <B> </A>   </B>\"\n        Output: false\n        Explanation: Unbalanced. If \"<A>\" is closed, then \"<B>\" must be unmatched, and vice versa.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        # stack = []\n        # i = 0\n        # while i < len(code):\n        #     if code[i] == \"<\":\n        #         if code[i+1] == \"/\":\n        #             if len(stack) == 0:\n        #                 return False\n        #             else:\n        #                 stack.pop()\n        #         else:\n        #             stack.append(code[i])\n        #     i += 1\n        # return len(stack) == 0\n        \n        # stack = []\n        # i = 0\n        # while i < len(code):\n        #     if code[i] == \"<\":\n        #         if code[i+1] == \"/\":\n        #             if len(stack) == 0:\n        #                 return False\n        #             else:\n        #                 stack.pop()\n        #         else:\n        #             stack.append(code[i])\n        #     elif code[i] == \">\":\n        #         if len(stack) == 0:\n        #             return False\n        #         else:\n        #             stack.pop()\n        #     i += 1\n        # return len(stack) == 0\n        \n        # stack = []\n        # i = 0\n        # while i < len(code"
    },
    {
        "number": 592,
        "title": "Fraction Addition and Subtraction",
        "difficulty": 1,
        "prompt": "class Solution:\n    def fractionAddition(self, expression: str) -> str:\n        \"\"\"\n        Given a string expression representing an expression of fraction addition and subtraction, return the calculation result in string format.\n        The final result should be an irreducible fraction. If your final result is an integer, change it to the format of a fraction that has a denominator 1. So in this case, 2 should be converted to 2/1.\n        Example 1:\n        Input: expression = \"-1/2+1/2\"\n        Output: \"0/1\"\n        Example 2:\n        Input: expression = \"-1/2+1/2+1/3\"\n        Output: \"1/3\"\n        Example 3:\n        Input: expression = \"1/3-1/2\"\n        Output: \"-1/6\"\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        def gcd(a, b):\n            while b:\n                a, b = b, a % b\n            return a"
    },
    {
        "number": 593,
        "title": "Valid Square",
        "difficulty": 1,
        "prompt": "class Solution:\n    def validSquare(self, p1: List[int], p2: List[int], p3: List[int], p4: List[int]) -> bool:\n        \"\"\"\n        Given the coordinates of four points in 2D space p1, p2, p3 and p4, return true if the four points construct a square.\n        The coordinate of a point pi is represented as [xi, yi]. The input is not given in any order.\n        A valid square has four equal sides with positive length and four equal angles (90-degree angles).\n        Example 1:\n        Input: p1 = [0,0], p2 = [1,1], p3 = [1,0], p4 = [0,1]\n        Output: true\n        Example 2:\n        Input: p1 = [0,0], p2 = [1,1], p3 = [1,0], p4 = [0,12]\n        Output: false\n        Example 3:\n        Input: p1 = [1,0], p2 = [-1,0], p3 = [0,1], p4 = [0,-1]\n        Output: true\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        def dist(p1, p2):\n            return (p1[0] - p2[0]) ** 2 + (p1[1] - p2[1]) ** 2"
    },
    {
        "number": 594,
        "title": "Longest Harmonious Subsequence",
        "difficulty": 0,
        "prompt": "class Solution:\r\n    def findLHS(self, nums: List[int]) -> int:\n        \"\"\"\n        We define a harmonious array as an array where the difference between its maximum value and its minimum value is exactly 1.\r\n        Given an integer array nums, return the length of its longest harmonious subsequence among all its possible subsequences.\r\n        A subsequence of array is a sequence that can be derived from the array by deleting some or no elements without changing the order of the remaining elements.\r\n        Example 1:\r\n        Input: nums = [1,3,2,2,5,2,3,7]\r\n        Output: 5\r\n        Explanation: The longest harmonious subsequence is [3,2,2,2,3].\r\n        Example 2:\r\n        Input: nums = [1,2,3,4]\r\n        Output: 2\r\n        Example 3:\r\n        Input: nums = [1,1,1,1]\r\n        Output: 0\r\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        nums.sort()\n        l = len(nums)\n        if l < 2:\n            return 0\n        \n        max_l = 0\n        for i in range(l-1):\n            if nums[i+1] - nums[i] == 1:\n                max_l = max(max_l, nums[i+1] - nums[i])\n        return max_l\n<|endoftext|>"
    },
    {
        "number": 598,
        "title": "Range Addition II",
        "difficulty": 0,
        "prompt": "class Solution:\n    def maxCount(self, m: int, n: int, ops: List[List[int]]) -> int:\n        \"\"\"\n        You are given an m x n matrix M initialized with all 0's and an array of operations ops, where ops[i] = [ai, bi] means M[x][y] should be incremented by one for all 0 <= x < ai and 0 <= y < bi.\n        Count and return the number of maximum integers in the matrix after performing all the operations.\n        Example 1:\n        Input: m = 3, n = 3, ops = [[2,2],[3,3]]\n        Output: 4\n        Explanation: The maximum integer in M is 2, and there are four of it in M. So return 4.\n        Example 2:\n        Input: m = 3, n = 3, ops = [[2,2],[3,3],[3,3],[3,3],[2,2],[3,3],[3,3],[3,3],[2,2],[3,3],[3,3],[3,3]]\n        Output: 4\n        Example 3:\n        Input: m = 3, n = 3, ops = []\n        Output: 9\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        if not ops:\n            return m * n\n        return min(ops[0]) * min(ops[1])"
    },
    {
        "number": 599,
        "title": "Minimum Index Sum of Two Lists",
        "difficulty": 0,
        "prompt": "class Solution:\n    def findRestaurant(self, list1: List[str], list2: List[str]) -> List[str]:\n        \"\"\"\n        Given two arrays of strings list1 and list2, find the common strings with the least index sum.\n        A common string is a string that appeared in both list1 and list2.\n        A common string with the least index sum is a common string such that if it appeared at list1[i] and list2[j] then i + j should be the minimum value among all the other common strings.\n        Return all the common strings with the least index sum. Return the answer in any order.\n        Example 1:\n        Input: list1 = [\"Shogun\",\"Tapioca Express\",\"Burger King\",\"KFC\"], list2 = [\"Piatti\",\"The Grill at Torrey Pines\",\"Hungry Hunter Steakhouse\",\"Shogun\"]\n        Output: [\"Shogun\"]\n        Explanation: The only common string is \"Shogun\".\n        Example 2:\n        Input: list1 = [\"Shogun\",\"Tapioca Express\",\"Burger King\",\"KFC\"], list2 = [\"KFC\",\"Shogun\",\"Burger King\"]\n        Output: [\"Shogun\"]\n        Explanation: The common string with the least index sum is \"Shogun\" with index sum = (0 + 1) = 1.\n        Example 3:\n        Input: list1 = [\"happy\",\"sad\",\"good\"], list2 = [\"sad\",\"happy\",\"good\"]\n        Output: [\"sad\",\"happy\"]\n        Explanation: There are three common strings:\n        \"happy\" with index sum = (0 + 1) = 1.\n        \"sad\" with index sum = (1 + 0) = 1.\n        \"good\" with index sum = (2 + 2) = 4.\n        The strings with the least index sum are \"sad\" and \"happy\".\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)"
    },
    {
        "number": 600,
        "title": "Non-negative Integers without Consecutive Ones",
        "difficulty": 2,
        "prompt": "class Solution:\n    def findIntegers(self, n: int) -> int:\n        \"\"\"\n        Given a positive integer n, return the number of the integers in the range [0, n] whose binary representations do not contain consecutive ones.\n        Example 1:\n        Input: n = 5\n        Output: 5\n        Explanation:\n        Here are the non-negative integers <= 5 with their corresponding binary representations:\n        0 : 0\n        1 : 1\n        2 : 10\n        3 : 11\n        4 : 100\n        5 : 101\n        Among them, only integer 3 disobeys the rule (two consecutive ones) and the other 5 satisfy the rule. \n        Example 2:\n        Input: n = 1\n        Output: 2\n        Example 3:\n        Input: n = 2\n        Output: 3\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        # \u89e3\u9898\u601d\u8def\uff1a\n        # \u5176\u5b9e\u5c31\u662f\u6c42\u4e8c\u8fdb\u5236\u8868\u793a\u4e2d\uff0c\u6700\u9ad8\u4f4d\u662f0\u7684\u4e2a\u6570\n        # \u5982\u679c\u6700\u9ad8\u4f4d\u662f1\uff0c\u90a3\u4e48\u8fd9\u4e2a\u6570\u4e00\u5b9a\u662f2\u7684\u5e42\uff0c\u90a3\u4e48\u6700\u9ad8\u4f4d\u662f0\u7684\u4e2a\u6570\u4e00\u5b9a\u662fn-1\n        # \u5982\u679c\u6700\u9ad8\u4f4d\u662f0\uff0c\u90a3\u4e48\u8fd9\u4e2a\u6570\u4e00\u5b9a\u662f2\u7684\u5e42\uff0c\u90a3\u4e48\u6700\u9ad8\u4f4d\u662f1\u7684\u4e2a\u6570\u4e00\u5b9a\u662fn-2\n        # \u6240\u4ee5\u6700\u540e\u7684\u7b54\u6848\u5c31\u662fn-1+n-2+n-3+...+1\n        # \u5982\u679c\u6700\u9ad8\u4f4d\u662f1\uff0c\u90a3\u4e48\u8fd9\u4e2a\u6570\u4e00\u5b9a\u662f2\u7684\u5e42\uff0c\u90a3\u4e48\u6700\u9ad8\u4f4d\u662f0\u7684\u4e2a\u6570\u4e00\u5b9a\u662fn-1\n        # \ufffd"
    },
    {
        "number": 605,
        "title": "Can Place Flowers",
        "difficulty": 0,
        "prompt": "class Solution:\n    def canPlaceFlowers(self, flowerbed: List[int], n: int) -> bool:\n        \"\"\"\n        You have a long flowerbed in which some of the plots are planted, and some are not. However, flowers cannot be planted in adjacent plots.\n        Given an integer array flowerbed containing 0's and 1's, where 0 means empty and 1 means not empty, and an integer n, return if n new flowers can be planted in the flowerbed without violating the no-adjacent-flowers rule.\n        Example 1:\n        Input: flowerbed = [1,0,0,0,1], n = 1\n        Output: true\n        Example 2:\n        Input: flowerbed = [1,0,0,0,1], n = 2\n        Output: false\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        if n == 0:\n            return True\n        if len(flowerbed) == 1:\n            return flowerbed[0] == 0 and n == 1\n        for i in range(len(flowerbed)):\n            if flowerbed[i] == 0 and (i == 0 or flowerbed[i-1] == 0) and (i == len(flowerbed)-1 or flowerbed[i+1] == 0):\n                flowerbed[i] = 1\n                n -= 1\n                if n == 0:\n                    return True\n        return False"
    },
    {
        "number": 606,
        "title": "Construct String from Binary Tree",
        "difficulty": 0,
        "prompt": "class Solution:\n    def tree2str(self, root: Optional[TreeNode]) -> str:\n        \"\"\"\n        Given the root of a binary tree, construct a string consisting of parenthesis and integers from a binary tree with the preorder traversal way, and return it.\n        Omit all the empty parenthesis pairs that do not affect the one-to-one mapping relationship between the string and the original binary tree.\n        Example 1:\n        Input: root = [1,2,3,4]\n        Output: \"1(2(4))(3)\"\n        Explanation: Originally, it needs to be \"1(2(4)())(3()())\", but you need to omit all the unnecessary empty parenthesis pairs. And it will be \"1(2(4))(3)\"\n        Example 2:\n        Input: root = [1,2,3,null,4]\n        Output: \"1(2()(4))(3)\"\n        Explanation: Almost the same as the first example, except we cannot omit the first parenthesis pair to break the one-to-one mapping relationship between the input and the output.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        if not root:\n            return \"\"\n        \n        if not root.left and not root.right:\n            return str(root.val)\n        \n        if not root.left:\n            return str(root.val) + \"()\" + \"(\" + self.tree2str(root.right) + \")\"\n        \n        if not root.right:\n            return str(root.val) + \"(\" + self.tree2str(root.left) + \")\"\n        \n        return str(root.val) + \"(\" + self.tree2str(root.left) + \")\" + \"(\" + self.tree2str(root.right) + \")\"\n<|endoftext|>"
    },
    {
        "number": 609,
        "title": "Find Duplicate File in System",
        "difficulty": 1,
        "prompt": "class Solution:\n    def findDuplicate(self, paths: List[str]) -> List[List[str]]:\n        \"\"\"\n        Given a list paths of directory info, including the directory path, and all the files with contents in this directory, return all the duplicate files in the file system in terms of their paths. You may return the answer in any order.\n        A group of duplicate files consists of at least two files that have the same content.\n        A single directory info string in the input list has the following format:\n            \"root/d1/d2/.../dm f1.txt(f1_content) f2.txt(f2_content)... fn.txt(fn_content)\"\n        It means there are n files (f1.txt, f2.txt... fn.txt) with content (f1_content, f2_content... fn_content) respectively in the directory \"root/d1/d2/.../dm\". Note that n >= 1 and m >= 0. If m = 0, it means the directory is just the root directory.\n        The output is a list of groups of duplicate file paths. For each group, it contains all the file paths of the files that have the same content. A file path is a string that has the following format:\n            \"directory_path/file_name.txt\"\n        Example 1:\n        Input: paths = [\"root/a 1.txt(abcd) 2.txt(efgh)\",\"root/c 3.txt(abcd)\",\"root/c/d 4.txt(efgh)\",\"root 4.txt(efgh)\"]\n        Output: [[\"root/a/2.txt\",\"root/c/d/4.txt\",\"root/4.txt\"],[\"root/a/1.txt\",\"root/c/3.txt\"]]\n        Example 2:\n        Input: paths = [\"root/a 1.txt(abcd) 2.txt(efgh)\",\"root/c 3.txt(abcd)\",\"root/c/d 4.txt(efgh)\"]\n        Output: [[\"root/a/2.txt\",\"root/c/d/4.txt\"],[\"root/a/1.txt\",\"root/c/3.txt\"]]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        \n        # 1. build a hashmap of file content to file path\n        # 2. for each file, check if the file content is in the hashmap\n        # 3. if yes, then we have a duplicate file\n        # 4. if no, then we add the file content to the hashmap\n        \n        # time: O(n)\n        # space: O(n)\n        \n        # build hashmap\n        hashmap = {}\n        for path in paths:\n            path = path.split(' ')\n            directory = path[0]\n            for file in path[1:]:\n                file = file.split('(')\n                file_name = file[0]\n                file_content = file[1][:-1]\n                if file_content in hashmap:\n                    hashmap[file_content].append(directory + '/' + file_name)\n                else:\n                    hashmap[file_content] = [directory + '/' + file_name]\n        \n        # find duplicates\n        result = []\n        for file_content, file_paths in hashmap.items():\n            if len(file_paths) > 1:\n                result.append(file_paths)\n        return result\n    \n    \n    def findDuplicate2(self, paths: List["
    },
    {
        "number": 611,
        "title": "Valid Triangle Number",
        "difficulty": 1,
        "prompt": "class Solution:\n    def triangleNumber(self, nums: List[int]) -> int:\n        \"\"\"\n        Given an integer array nums, return the number of triplets chosen from the array that can make triangles if we take them as side lengths of a triangle.\n        Example 1:\n        Input: nums = [2,2,3,4]\n        Output: 3\n        Explanation: Valid combinations are: \n        2,3,4 (using the first 2)\n        2,3,4 (using the second 2)\n        2,2,3\n        Example 2:\n        Input: nums = [4,2,3,4]\n        Output: 4\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        nums.sort()\n        count = 0\n        for i in range(len(nums)-1, 1, -1):\n            left, right = 0, i-1\n            while left < right:\n                if nums[left] + nums[right] > nums[i]:\n                    count += right - left\n                    right -= 1\n                else:\n                    left += 1\n        return count\n<|endoftext|>"
    },
    {
        "number": 617,
        "title": "Merge Two Binary Trees",
        "difficulty": 0,
        "prompt": "class Solution:\n    def mergeTrees(self, root1: Optional[TreeNode], root2: Optional[TreeNode]) -> Optional[TreeNode]:\n        \"\"\"\n        You are given two binary trees root1 and root2.\n        Imagine that when you put one of them to cover the other, some nodes of the two trees are overlapped while the others are not. You need to merge the two trees into a new binary tree. The merge rule is that if two nodes overlap, then sum node values up as the new value of the merged node. Otherwise, the NOT null node will be used as the node of the new tree.\n        Return the merged tree.\n        Note: The merging process must start from the root nodes of both trees.\n        Example 1:\n        Input: root1 = [1,3,2,5], root2 = [2,1,3,null,4,null,7]\n        Output: [3,4,5,5,4,null,7]\n        Example 2:\n        Input: root1 = [1], root2 = [1,2]\n        Output: [2,2]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        if not root1 and not root2:\n            return None\n        if not root1:\n            return root2\n        if not root2:\n            return root1\n        root1.val += root2.val\n        root1.left = self.mergeTrees(root1.left, root2.left)\n        root1.right = self.mergeTrees(root1.right, root2.right)\n        return root1\n<|endoftext|>"
    },
    {
        "number": 621,
        "title": "Task Scheduler",
        "difficulty": 1,
        "prompt": "class Solution:\n    def leastInterval(self, tasks: List[str], n: int) -> int:\n        \"\"\"\n        Given a characters array tasks, representing the tasks a CPU needs to do, where each letter represents a different task. Tasks could be done in any order. Each task is done in one unit of time. For each unit of time, the CPU could complete either one task or just be idle.\n        However, there is a non-negative integer n that represents the cooldown period between two same tasks (the same letter in the array), that is that there must be at least n units of time between any two same tasks.\n        Return the least number of units of times that the CPU will take to finish all the given tasks.\n        Example 1:\n        Input: tasks = [\"A\",\"A\",\"A\",\"B\",\"B\",\"B\"], n = 2\n        Output: 8\n        Explanation: \n        A -> B -> idle -> A -> B -> idle -> A -> B\n        There is at least 2 units of time between any two same tasks.\n        Example 2:\n        Input: tasks = [\"A\",\"A\",\"A\",\"B\",\"B\",\"B\"], n = 0\n        Output: 6\n        Explanation: On this case any permutation of size 6 would work since n = 0.\n        [\"A\",\"A\",\"A\",\"B\",\"B\",\"B\"]\n        [\"A\",\"B\",\"A\",\"B\",\"A\",\"B\"]\n        [\"B\",\"B\",\"B\",\"A\",\"A\",\"A\"]\n       ...\n        And so on.\n        Example 3:\n        Input: tasks = [\"A\",\"A\",\"A\",\"A\",\"A\",\"A\",\"B\",\"C\",\"D\",\"E\",\"F\",\"G\"], n = 2\n        Output: 16\n        Explanation: \n        One possible solution is\n        A -> B -> C -> A -> D -> E -> A -> F -> G -> A -> idle -> idle -> A -> idle -> idle -> A\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        if n == 0:\n            return len(tasks)\n        \n        # count the frequency of each task\n        freq = collections.Counter(tasks)\n        \n        # sort the tasks by frequency\n        freq = sorted(freq.items(), key=lambda x: x[1], reverse=True)\n        \n        # get the most frequent task\n        max_freq = freq[0][1]\n        \n        # get the number of idle slots\n        idle_slots = (max_freq - 1) * n\n        \n        # get the number of tasks that need to be finished\n        num_tasks = len(tasks) - max_freq * (max_freq - 1) // 2\n        \n        return max(idle_slots + num_tasks, len(tasks))\n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n"
    },
    {
        "number": 622,
        "title": "Design Circular Queue",
        "difficulty": 1,
        "prompt": "class MyCircularQueue:\n    def __init__(self, k: int):\n    def enQueue(self, value: int) -> bool:\n    def deQueue(self) -> bool:\n    def Front(self) -> int:\n    def Rear(self) -> int:\n    def isEmpty(self) -> bool:\n    def isFull(self) -> bool:\n        \"\"\"\n        Design your implementation of the circular queue. The circular queue is a linear data structure in which the operations are performed based on FIFO (First In First Out) principle, and the last position is connected back to the first position to make a circle. It is also called \"Ring Buffer\".\n        One of the benefits of the circular queue is that we can make use of the spaces in front of the queue. In a normal queue, once the queue becomes full, we cannot insert the next element even if there is a space in front of the queue. But using the circular queue, we can use the space to store new values.\n        Implement the MyCircularQueue class:\n            MyCircularQueue(k) Initializes the object with the size of the queue to be k.\n            int Front() Gets the front item from the queue. If the queue is empty, return -1.\n            int Rear() Gets the last item from the queue. If the queue is empty, return -1.\n            boolean enQueue(int value) Inserts an element into the circular queue. Return true if the operation is successful.\n            boolean deQueue() Deletes an element from the circular queue. Return true if the operation is successful.\n            boolean isEmpty() Checks whether the circular queue is empty or not.\n            boolean isFull() Checks whether the circular queue is full or not.\n        You must solve the problem without using the built-in queue data structure in your programming language. \n        Example 1:\n        Input\n        [\"MyCircularQueue\", \"enQueue\", \"enQueue\", \"enQueue\", \"enQueue\", \"Rear\", \"isFull\", \"deQueue\", \"enQueue\", \"Rear\"]\n        [[3], [1], [2], [3], [4], [], [], [], [4], []]\n        Output\n        [null, true, true, true, false, 3, true, true, true, 4]\n        Explanation\n        MyCircularQueue myCircularQueue = new MyCircularQueue(3);\n        myCircularQueue.enQueue(1); // return True\n        myCircularQueue.enQueue(2); // return True\n        myCircularQueue.enQueue(3); // return True\n        myCircularQueue.enQueue(4); // return False\n        myCircularQueue.Rear();     // return 3\n        myCircularQueue.isFull();   // return True\n        myCircularQueue.deQueue();  // return True\n        myCircularQueue.enQueue(4); // return True\n        myCircularQueue.Rear();     // return 4\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        self.queue = [None] * k\n        self.head = 0\n        self.tail = 0\n        self.size = 0\n        self.max_size = k\n        \n    def enQueue(self, value):\n        if self.isFull():\n            return False\n        self.queue[self.tail] = value\n        self.tail = (self.tail + 1) % self.max_size\n        self.size += 1\n        return True\n        \n    def deQueue(self):\n        if self.isEmpty():\n            return False\n        self.queue[self.head] = None\n        self.head = (self.head + 1) % self.max_size\n        self.size -= 1\n        return True\n        \n    def Front(self):\n        if self.isEmpty():\n            return -1\n        return self.queue[self.head]\n        \n    def Rear(self):\n        if self.isEmpty():\n            return -1\n        return self.queue[self.tail - 1]\n        \n    def isEmpty(self):\n        return self.size == 0\n        \n    def isFull(self):\n        return self.size == self.max_size\n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        "
    },
    {
        "number": 623,
        "title": "Add One Row to Tree",
        "difficulty": 1,
        "prompt": "class Solution:\n    def addOneRow(self, root: Optional[TreeNode], val: int, depth: int) -> Optional[TreeNode]:\n        \"\"\"\n        Given the root of a binary tree and two integers val and depth, add a row of nodes with value val at the given depth depth.\n        Note that the root node is at depth 1.\n        The adding rule is:\n            Given the integer depth, for each not null tree node cur at the depth depth - 1, create two tree nodes with value val as cur's left subtree root and right subtree root.\n            cur's original left subtree should be the left subtree of the new left subtree root.\n            cur's original right subtree should be the right subtree of the new right subtree root.\n            If depth == 1 that means there is no depth depth - 1 at all, then create a tree node with value val as the new root of the whole original tree, and the original tree is the new root's left subtree.\n        Example 1:\n        Input: root = [4,2,6,3,1,5], val = 1, depth = 2\n        Output: [4,1,1,2,null,null,6,3,1,5]\n        Example 2:\n        Input: root = [4,2,null,3,1], val = 1, depth = 3\n        Output: [4,2,null,1,1,3,null,null,1]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        if depth == 1:\n            new_root = TreeNode(val)\n            new_root.left = root\n            return new_root\n        \n        def dfs(node, depth):\n            if not node:\n                return None\n            if depth == depth:\n                node.left = TreeNode(val)\n                node.right = TreeNode(val)\n                node.left.left = node.left.right = node\n                node.right.left = node.right.right = node\n            else:\n                dfs(node.left, depth - 1)\n                dfs(node.right, depth - 1)\n        \n        dfs(root, depth)\n        return root\n<|endoftext|>"
    },
    {
        "number": 628,
        "title": "Maximum Product of Three Numbers",
        "difficulty": 0,
        "prompt": "class Solution:\n    def maximumProduct(self, nums: List[int]) -> int:\n        \"\"\"\n        Given an integer array nums, find three numbers whose product is maximum and return the maximum product.\n        Example 1:\n        Input: nums = [1,2,3]\n        Output: 6\n        Example 2:\n        Input: nums = [1,2,3,4]\n        Output: 24\n        Example 3:\n        Input: nums = [-1,-2,-3]\n        Output: -6\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        nums.sort()\n        return max(nums[0] * nums[1] * nums[-1], nums[-1] * nums[-2] * nums[-3])"
    },
    {
        "number": 629,
        "title": "K Inverse Pairs Array",
        "difficulty": 2,
        "prompt": "class Solution:\n    def kInversePairs(self, n: int, k: int) -> int:\n        \"\"\"\n        For an integer array nums, an inverse pair is a pair of integers [i, j] where 0 <= i < j < nums.length and nums[i] > nums[j].\n        Given two integers n and k, return the number of different arrays consist of numbers from 1 to n such that there are exactly k inverse pairs. Since the answer can be huge, return it modulo 109 + 7.\n        Example 1:\n        Input: n = 3, k = 0\n        Output: 1\n        Explanation: Only the array [1,2,3] which consists of numbers from 1 to 3 has exactly 0 inverse pairs.\n        Example 2:\n        Input: n = 3, k = 1\n        Output: 2\n        Explanation: The array [1,3,2] and [2,1,3] have exactly 1 inverse pair.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        MOD = 10**9 + 7\n        dp = [[0] * (k + 1) for _ in range(n + 1)]\n        dp[0][0] = 1\n        for i in range(1, n + 1):\n            for j in range(k + 1):\n                if j == 0:\n                    dp[i][j] = 1\n                else:\n                    dp[i][j] = dp[i - 1][j] + dp[i - 1][j - 1]\n                dp[i][j] %= MOD\n        return dp[n][k]"
    },
    {
        "number": 630,
        "title": "Course Schedule III",
        "difficulty": 2,
        "prompt": "class Solution:\n    def scheduleCourse(self, courses: List[List[int]]) -> int:\n        \"\"\"\n        There are n different online courses numbered from 1 to n. You are given an array courses where courses[i] = [durationi, lastDayi] indicate that the ith course should be taken continuously for durationi days and must be finished before or on lastDayi.\n        You will start on the 1st day and you cannot take two or more courses simultaneously.\n        Return the maximum number of courses that you can take.\n        Example 1:\n        Input: courses = [[100,200],[200,1300],[1000,1250],[2000,3200]]\n        Output: 3\n        Explanation: \n        There are totally 4 courses, but you can take 3 courses at most:\n        First, take the 1st course, it costs 100 days so you will finish it on the 100th day, and ready to take the next course on the 101st day.\n        Second, take the 3rd course, it costs 1000 days so you will finish it on the 1100th day, and ready to take the next course on the 1101st day. \n        Third, take the 2nd course, it costs 200 days so you will finish it on the 1300th day. \n        The 4th course cannot be taken now, since you will finish it on the 3300th day, which exceeds the closed date.\n        Example 2:\n        Input: courses = [[1,2]]\n        Output: 1\n        Example 3:\n        Input: courses = [[3,2],[4,3]]\n        Output: 0\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        courses.sort(key=lambda x: x[1])\n        cur_day = 0\n        count = 0\n        for duration, last_day in courses:\n            if duration + cur_day <= last_day:\n                cur_day += duration\n                count += 1\n            else:\n                break\n        return count\n<|endoftext|>"
    },
    {
        "number": 632,
        "title": "Smallest Range Covering Elements from K Lists",
        "difficulty": 2,
        "prompt": "class Solution:\n    def smallestRange(self, nums: List[List[int]]) -> List[int]:\n        \"\"\"\n        You have k lists of sorted integers in non-decreasing order. Find the smallest range that includes at least one number from each of the k lists.\n        We define the range [a, b] is smaller than range [c, d] if b - a < d - c or a < c if b - a == d - c.\n        Example 1:\n        Input: nums = [[4,10,15,24,26],[0,9,12,20],[5,18,22,30]]\n        Output: [20,24]\n        Explanation: \n        List 1: [4, 10, 15, 24,26], 24 is in range [20,24].\n        List 2: [0, 9, 12, 20], 20 is in range [20,24].\n        List 3: [5, 18, 22, 30], 22 is in range [20,24].\n        Example 2:\n        Input: nums = [[1,2,3],[1,2,3],[1,2,3]]\n        Output: [1,1]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        # Time: O(nklogk)\n        # Space: O(nk)\n        # n = len(nums)\n        # k = len(nums[0])\n        # nums = sorted(nums, key=lambda x: x[0])\n        # min_val, max_val = nums[0][0], nums[-1][-1]\n        # res = [min_val, max_val]\n        # for i in range(n):\n        #     for j in range(k):\n        #         if nums[i][j] < res[0]:\n        #             res[0] = nums[i][j]\n        #         if nums[i][j] > res[1]:\n        #             res[1] = nums[i][j]\n        # return res"
    },
    {
        "number": 633,
        "title": "Sum of Square Numbers",
        "difficulty": 1,
        "prompt": "class Solution:\n    def judgeSquareSum(self, c: int) -> bool:\n        \"\"\"\n        Given a non-negative integer c, decide whether there're two integers a and b such that a2 + b2 = c.\n        Example 1:\n        Input: c = 5\n        Output: true\n        Explanation: 1 * 1 + 2 * 2 = 5\n        Example 2:\n        Input: c = 3\n        Output: false\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        if c == 0:\n            return True\n        if c < 0:\n            return False\n        for i in range(int(c ** 0.5) + 1):\n            if i ** 2 + i ** 2 == c:\n                return True\n        return False"
    },
    {
        "number": 636,
        "title": "Exclusive Time of Functions",
        "difficulty": 1,
        "prompt": "class Solution:\n    def exclusiveTime(self, n: int, logs: List[str]) -> List[int]:\n        \"\"\"\n        On a single-threaded CPU, we execute a program containing n functions. Each function has a unique ID between 0 and n-1.\n        Function calls are stored in a call stack: when a function call starts, its ID is pushed onto the stack, and when a function call ends, its ID is popped off the stack. The function whose ID is at the top of the stack is the current function being executed. Each time a function starts or ends, we write a log with the ID, whether it started or ended, and the timestamp.\n        You are given a list logs, where logs[i] represents the ith log message formatted as a string \"{function_id}:{\"start\" | \"end\"}:{timestamp}\". For example, \"0:start:3\" means a function call with function ID 0 started at the beginning of timestamp 3, and \"1:end:2\" means a function call with function ID 1 ended at the end of timestamp 2. Note that a function can be called multiple times, possibly recursively.\n        A function's exclusive time is the sum of execution times for all function calls in the program. For example, if a function is called twice, one call executing for 2 time units and another call executing for 1 time unit, the exclusive time is 2 + 1 = 3.\n        Return the exclusive time of each function in an array, where the value at the ith index represents the exclusive time for the function with ID i.\n        Example 1:\n        Input: n = 2, logs = [\"0:start:0\",\"1:start:2\",\"1:end:5\",\"0:end:6\"]\n        Output: [3,4]\n        Explanation:\n        Function 0 starts at the beginning of time 0, then it executes 2 for units of time and reaches the end of time 1.\n        Function 1 starts at the beginning of time 2, executes for 4 units of time, and ends at the end of time 5.\n        Function 0 resumes execution at the beginning of time 6 and executes for 1 unit of time.\n        So function 0 spends 2 + 1 = 3 units of total time executing, and function 1 spends 4 units of total time executing.\n        Example 2:\n        Input: n = 1, logs = [\"0:start:0\",\"0:start:2\",\"0:end:5\",\"0:start:6\",\"0:end:6\",\"0:end:7\"]\n        Output: [8]\n        Explanation:\n        Function 0 starts at the beginning of time 0, executes for 2 units of time, and recursively calls itself.\n        Function 0 (recursive call) starts at the beginning of time 2 and executes for 4 units of time.\n        Function 0 (initial call) resumes execution then immediately calls itself again.\n        Function 0 (2nd recursive call) starts at the beginning of time 6 and executes for 1 unit of time.\n        Function 0 (initial call) resumes execution at the beginning of time 7 and executes for 1 unit of time.\n        So function 0 spends 2 + 4 + 1 + 1 = 8 units of total time executing.\n        Example 3:\n        Input: n = 2, logs = [\"0:start:0\",\"0:start:2\",\"0:end:5\",\"1:start:6\",\"1:end:6\",\"0:end:7\"]\n        Output: [7,1]\n        Explanation:\n        Function 0 starts at the beginning of time 0, executes for 2 units of time, and recursively calls itself.\n        Function 0 (recursive call) starts at the beginning of time 2 and executes for 4 units of time.\n        Function 0 (initial call) resumes execution then immediately calls function 1.\n        Function 1 starts at the beginning of time 6, executes 1 unit of time, and ends at the end of time 6.\n        Function 0 resumes execution at the beginning of time 6 and executes for 2 units of time.\n        So function 0 spends 2 + 4 + 1 = 7 units of total time executing, and function 1 spends 1 unit of total time executing.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        stack = []\n        res = [0] * n\n        for log in logs:\n            func_id, event, time = log.split(':')\n            func_id, time = int(func_id), int(time)\n            if event =='start':\n                if stack:\n                    res[stack[-1]] += time - prev_time\n                stack.append(func_id)\n                prev_time = time\n            else:\n                res[stack.pop()] += time - prev_time + 1\n                prev_time = time + 1\n        return res"
    },
    {
        "number": 637,
        "title": "Average of Levels in Binary Tree",
        "difficulty": 0,
        "prompt": "class Solution:\n    def averageOfLevels(self, root: Optional[TreeNode]) -> List[float]:\n        \"\"\"\n        Given the root of a binary tree, return the average value of the nodes on each level in the form of an array. Answers within 10-5 of the actual answer will be accepted.\n        Example 1:\n        Input: root = [3,9,20,null,null,15,7]\n        Output: [3.00000,14.50000,11.00000]\n        Explanation: The average value of nodes on level 0 is 3, on level 1 is 14.5, and on level 2 is 11.\n        Hence return [3, 14.5, 11].\n        Example 2:\n        Input: root = [3,9,20,15,7]\n        Output: [3.00000,14.50000,11.00000]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        if not root:\n            return []\n        queue = [root]\n        res = []\n        while queue:\n            level = []\n            for _ in range(len(queue)):\n                node = queue.pop(0)\n                level.append(node.val)\n                if node.left:\n                    queue.append(node.left)\n                if node.right:\n                    queue.append(node.right)\n            res.append(sum(level)/len(level))\n        return res\n<|endoftext|>"
    },
    {
        "number": 638,
        "title": "Shopping Offers",
        "difficulty": 1,
        "prompt": "class Solution:\n    def shoppingOffers(self, price: List[int], special: List[List[int]], needs: List[int]) -> int:\n        \"\"\"\n        In LeetCode Store, there are n items to sell. Each item has a price. However, there are some special offers, and a special offer consists of one or more different kinds of items with a sale price.\n        You are given an integer array price where price[i] is the price of the ith item, and an integer array needs where needs[i] is the number of pieces of the ith item you want to buy.\n        You are also given an array special where special[i] is of size n + 1 where special[i][j] is the number of pieces of the jth item in the ith offer and special[i][n] (i.e., the last integer in the array) is the price of the ith offer.\n        Return the lowest price you have to pay for exactly certain items as given, where you could make optimal use of the special offers. You are not allowed to buy more items than you want, even if that would lower the overall price. You could use any of the special offers as many times as you want.\n        Example 1:\n        Input: price = [2,5], special = [[3,0,5],[1,2,10]], needs = [3,2]\n        Output: 14\n        Explanation: There are two kinds of items, A and B. Their prices are $2 and $5 respectively. \n        In special offer 1, you can pay $5 for 3A and 0B\n        In special offer 2, you can pay $10 for 1A and 2B. \n        You need to buy 3A and 2B, so you may pay $10 for 1A and 2B (special offer #2), and $4 for 2A.\n        Example 2:\n        Input: price = [2,3,4], special = [[1,1,0,4],[2,2,1,9]], needs = [1,2,1]\n        Output: 11\n        Explanation: The price of A is $2, and $3 for B, $4 for C. \n        You may pay $4 for 1A and 1B, and $9 for 2A,2B and 1C. \n        You need to buy 1A,2B and 1C, so you may pay $4 for 1A and 1B (special offer #1), and $3 for 1B, $4 for 1C. \n        You cannot add more items, though only $9 for 2A,2B and 1C.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        # dp[i][j] = min(dp[i - 1][j], dp[i - 1][j - needs[i - 1]] + price[i - 1])\n        # dp[i][j] = min(dp[i - 1][j], dp[i - 1][j - needs[i - 1]] + price[i - 1])\n        # dp[i][j] = min(dp[i - 1][j], dp[i - 1][j - needs[i - 1]] + price[i - 1])\n        # dp[i][j] = min(dp[i - 1][j], dp[i - 1][j - needs[i - 1]] + price[i - 1])\n        # dp[i][j] = min(dp[i - 1][j], dp[i - 1][j - needs[i - 1]] + price[i - 1])\n        # dp[i][j] = min(dp[i - 1][j], dp[i - 1][j - needs[i - 1]] + price[i - 1])\n        # dp[i][j] = min(dp[i - 1][j], dp[i - 1][j - needs[i - 1]] + price[i - 1])"
    },
    {
        "number": 639,
        "title": "Decode Ways II",
        "difficulty": 2,
        "prompt": "class Solution:\n    def numDecodings(self, s: str) -> int:\n        \"\"\"\n        A message containing letters from A-Z can be encoded into numbers using the following mapping:\n        'A' -> \"1\"\n        'B' -> \"2\"\n       ...\n        'Z' -> \"26\"\n        To decode an encoded message, all the digits must be grouped then mapped back into letters using the reverse of the mapping above (there may be multiple ways). For example, \"11106\" can be mapped into:\n            \"AAJF\" with the grouping (1 1 10 6)\n            \"KJF\" with the grouping (11 10 6)\n        Note that the grouping (1 11 06) is invalid because \"06\" cannot be mapped into 'F' since \"6\" is different from \"06\".\n        In addition to the mapping above, an encoded message may contain the '*' character, which can represent any digit from '1' to '9' ('0' is excluded). For example, the encoded message \"1*\" may represent any of the encoded messages \"11\", \"12\", \"13\", \"14\", \"15\", \"16\", \"17\", \"18\", or \"19\". Decoding \"1*\" is equivalent to decoding any of the encoded messages it can represent.\n        Given a string s consisting of digits and '*' characters, return the number of ways to decode it.\n        Since the answer may be very large, return it modulo 109 + 7.\n        Example 1:\n        Input: s = \"*\"\n        Output: 9\n        Explanation: The encoded message can represent any of the encoded messages \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", or \"9\".\n        Each of these can be decoded to the strings \"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\", and \"I\" respectively.\n        Hence, there are a total of 9 ways to decode \"*\".\n        Example 2:\n        Input: s = \"1*\"\n        Output: 18\n        Explanation: The encoded message can represent any of the encoded messages \"11\", \"12\", \"13\", \"14\", \"15\", \"16\", \"17\", \"18\", or \"19\".\n        Each of these encoded messages have 2 ways to be decoded (e.g. \"11\" can be decoded to \"AA\" or \"K\").\n        Hence, there are a total of 9 * 2 = 18 ways to decode \"1*\".\n        Example 3:\n        Input: s = \"2*\"\n        Output: 15\n        Explanation: The encoded message can represent any of the encoded messages \"21\", \"22\", \"23\", \"24\", \"25\", \"26\", \"27\", \"28\", or \"29\".\n        \"21\", \"22\", \"23\", \"24\", \"25\", and \"26\" have 2 ways of being decoded, but \"27\", \"28\", and \"29\" only have 1 way.\n        Hence, there are a total of (6 * 2) + (3 * 1) = 12 + 3 = 15 ways to decode \"2*\".\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        # dp[i] = dp[i-1] + dp[i-2]\n        # dp[i] = dp[i-1] if s[i]!= '*'\n        # dp[i] = dp[i-2] if s[i] == '*' and s[i-1]!= '*'\n        # dp[i] = dp[i-2] if s[i] == '*' and s[i-1] == '*'\n        # dp[i] = 0 if s[i] == '0'\n        # dp[i] = 0 if i == 0\n        # dp[i] = 0 if i == 1 and s[i] == '0'\n        # dp[i] = 0 if i == 2 and s[i] == '0'\n        # dp[i] = 0 if i == 3 and s[i] == '0'\n        # dp[i] = 0 if i == 4 and s[i] == '0'\n        # dp[i] = 0 if i == 5 and s[i] == '0'\n        # dp[i] = 0 if i == 6 and s[i] == '0'\n        # dp[i] ="
    },
    {
        "number": 640,
        "title": "Solve the Equation",
        "difficulty": 1,
        "prompt": "class Solution:\n    def solveEquation(self, equation: str) -> str:\n        \"\"\"\n        Solve a given equation and return the value of 'x' in the form of a string \"x=#value\". The equation contains only '+', '-' operation, the variable 'x' and its coefficient. You should return \"No solution\" if there is no solution for the equation, or \"Infinite solutions\" if there are infinite solutions for the equation.\n        If there is exactly one solution for the equation, we ensure that the value of 'x' is an integer.\n        Example 1:\n        Input: equation = \"x+5-3+x=6+x-2\"\n        Output: \"x=2\"\n        Example 2:\n        Input: equation = \"x=x\"\n        Output: \"Infinite solutions\"\n        Example 3:\n        Input: equation = \"2x=x\"\n        Output: \"x=0\"\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        # x + 5 - 3 + x = 6 + x - 2\n        # x = 2\n        # x + 5 - 3 = 6\n        # x = 2\n        # x + 5 - 3 = 6\n        # x = 2\n        # x + 5 - 3 = 6\n        # x = 2\n        # x + 5 - 3 = 6\n        # x = 2\n        # x + 5 - 3 = 6\n        # x = 2\n        # x + 5 - 3 = 6\n        # x = 2\n        # x + 5 - 3 = 6\n        # x = 2\n        # x + 5 - 3 = 6\n        # x = 2\n        # x + 5 - 3 = 6\n        # x = 2\n        # x + 5 - 3 = 6\n        # x = 2\n        # x + 5 - 3 = 6\n        # x = 2\n        # x + 5 - 3 = 6\n        # x = 2\n        # x + 5 - 3 = 6\n        # x = 2\n        # x + 5 - 3 = 6\n        # x = 2\n        # x + 5 - 3 = 6\n        # x = 2\n        # x + 5 - 3 = 6\n        # x = 2\n        # x + 5 - 3 = 6\n        # x = 2\n        # x + 5 -"
    },
    {
        "number": 641,
        "title": "Design Circular Deque",
        "difficulty": 1,
        "prompt": "class MyCircularDeque:\n    def __init__(self, k: int):\n    def insertFront(self, value: int) -> bool:\n    def insertLast(self, value: int) -> bool:\n    def deleteFront(self) -> bool:\n    def deleteLast(self) -> bool:\n    def getFront(self) -> int:\n    def getRear(self) -> int:\n    def isEmpty(self) -> bool:\n    def isFull(self) -> bool:\n        \"\"\"\n        Design your implementation of the circular double-ended queue (deque).\n        Implement the MyCircularDeque class:\n            MyCircularDeque(int k) Initializes the deque with a maximum size of k.\n            boolean insertFront() Adds an item at the front of Deque. Returns true if the operation is successful, or false otherwise.\n            boolean insertLast() Adds an item at the rear of Deque. Returns true if the operation is successful, or false otherwise.\n            boolean deleteFront() Deletes an item from the front of Deque. Returns true if the operation is successful, or false otherwise.\n            boolean deleteLast() Deletes an item from the rear of Deque. Returns true if the operation is successful, or false otherwise.\n            int getFront() Returns the front item from the Deque. Returns -1 if the deque is empty.\n            int getRear() Returns the last item from Deque. Returns -1 if the deque is empty.\n            boolean isEmpty() Returns true if the deque is empty, or false otherwise.\n            boolean isFull() Returns true if the deque is full, or false otherwise.\n        Example 1:\n        Input\n        [\"MyCircularDeque\", \"insertLast\", \"insertLast\", \"insertFront\", \"insertFront\", \"getRear\", \"isFull\", \"deleteLast\", \"insertFront\", \"getFront\"]\n        [[3], [1], [2], [3], [4], [], [], [], [4], []]\n        Output\n        [null, true, true, true, false, 2, true, true, true, 4]\n        Explanation\n        MyCircularDeque myCircularDeque = new MyCircularDeque(3);\n        myCircularDeque.insertLast(1);  // return True\n        myCircularDeque.insertLast(2);  // return True\n        myCircularDeque.insertFront(3); // return True\n        myCircularDeque.insertFront(4); // return False, the queue is full.\n        myCircularDeque.getRear();      // return 2\n        myCircularDeque.isFull();       // return True\n        myCircularDeque.deleteLast();   // return True\n        myCircularDeque.insertFront(4); // return True\n        myCircularDeque.getFront();     // return 4\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n"
    },
    {
        "number": 643,
        "title": "Maximum Average Subarray I",
        "difficulty": 0,
        "prompt": "class Solution:\n    def findMaxAverage(self, nums: List[int], k: int) -> float:\n        \"\"\"\n        You are given an integer array nums consisting of n elements, and an integer k.\n        Find a contiguous subarray whose length is equal to k that has the maximum average value and return this value. Any answer with a calculation error less than 10-5 will be accepted.\n        Example 1:\n        Input: nums = [1,12,-5,-6,50,3], k = 4\n        Output: 12.75000\n        Explanation: Maximum average is (12 - 5 - 6 + 50) / 4 = 51 / 4 = 12.75\n        Example 2:\n        Input: nums = [5], k = 1\n        Output: 5.00000\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        # \u601d\u8def\uff1a\n        # \u5148\u6c42\u51fa\u6bcf\u4e2a\u7a97\u53e3\u7684\u5e73\u5747\u503c\uff0c\u7136\u540e\u6c42\u51fa\u6700\u5927\u7684\u5e73\u5747\u503c\n        # \u65f6\u95f4\u590d\u6742\u5ea6O(n)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6O(1)\n        # \u601d\u8def\uff1a\n        # \u5148\u6c42\u51fa\u6bcf\u4e2a\u7a97\u53e3\u7684\u5e73\u5747\u503c\uff0c\u7136\u540e\u6c42\u51fa\u6700\u5927\u7684\u5e73\u5747\u503c\n        # \u65f6\u95f4\u590d\u6742\u5ea6O(n)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6O(1)\n        # \u601d\u8def\uff1a\n        # \u5148\u6c42\u51fa\u6bcf\u4e2a\u7a97\u53e3\u7684\u5e73\u5747\u503c\uff0c\u7136\u540e\u6c42\u51fa\u6700\u5927\u7684\u5e73\u5747\u503c\n        # \u65f6\u95f4\u590d\u6742\u5ea6O(n)\uff0c\u7a7a\u95f4\u590d\u6742\ufffd"
    },
    {
        "number": 645,
        "title": "Set Mismatch",
        "difficulty": 0,
        "prompt": "class Solution:\n    def findErrorNums(self, nums: List[int]) -> List[int]:\n        \"\"\"\n        You have a set of integers s, which originally contains all the numbers from 1 to n. Unfortunately, due to some error, one of the numbers in s got duplicated to another number in the set, which results in repetition of one number and loss of another number.\n        You are given an integer array nums representing the data status of this set after the error.\n        Find the number that occurs twice and the number that is missing and return them in the form of an array.\n        Example 1:\n        Input: nums = [1,2,2,4]\n        Output: [2,3]\n        Example 2:\n        Input: nums = [1,1]\n        Output: [1,2]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        nums.sort()\n        for i in range(len(nums) - 1):\n            if nums[i] == nums[i + 1]:\n                return [nums[i], nums[i] + 1]\n        return [nums[-1] + 1, nums[0]]"
    },
    {
        "number": 646,
        "title": "Maximum Length of Pair Chain",
        "difficulty": 1,
        "prompt": "class Solution:\n    def findLongestChain(self, pairs: List[List[int]]) -> int:\n        \"\"\"\n        You are given an array of n pairs pairs where pairs[i] = [lefti, righti] and lefti < righti.\n        A pair p2 = [c, d] follows a pair p1 = [a, b] if b < c. A chain of pairs can be formed in this fashion.\n        Return the length longest chain which can be formed.\n        You do not need to use up all the given intervals. You can select pairs in any order.\n        Example 1:\n        Input: pairs = [[1,2],[2,3],[3,4]]\n        Output: 2\n        Explanation: The longest chain is [1,2] -> [3,4].\n        Example 2:\n        Input: pairs = [[1,2],[7,8],[4,5]]\n        Output: 3\n        Explanation: The longest chain is [1,2] -> [4,5] -> [7,8].\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        pairs.sort()\n        dp = [1] * len(pairs)\n        for i in range(1, len(pairs)):\n            for j in range(i):\n                if pairs[j][1] < pairs[i][0]:\n                    dp[i] = max(dp[i], dp[j] + 1)\n        return max(dp)\n<|endoftext|>"
    },
    {
        "number": 647,
        "title": "Palindromic Substrings",
        "difficulty": 1,
        "prompt": "class Solution:\n    def countSubstrings(self, s: str) -> int:\n        \"\"\"\n        Given a string s, return the number of palindromic substrings in it.\n        A string is a palindrome when it reads the same backward as forward.\n        A substring is a contiguous sequence of characters within the string.\n        Example 1:\n        Input: s = \"abc\"\n        Output: 3\n        Explanation: Three palindromic strings: \"a\", \"b\", \"c\".\n        Example 2:\n        Input: s = \"aaa\"\n        Output: 6\n        Explanation: Six palindromic strings: \"a\", \"a\", \"a\", \"aa\", \"aa\", \"aaa\".\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        # Time: O(n^2)\n        # Space: O(n^2)\n        # DP\n        # dp[i][j] = s[i:j+1] is palindrome\n        # dp[i][j] = dp[i+1][j-1] and s[i] == s[j]\n        # dp[i][j] = dp[i+1][j] or dp[i][j-1]\n        # dp[i][j] = dp[i+1][j-1] and s[i] == s[j]\n        # dp[i][j] = dp[i+1][j] or dp[i][j-1]\n        # dp[i][j] = dp[i+1][j-1] and s[i] == s[j]\n        # dp[i][j] = dp[i+1][j] or dp[i][j-1]\n        # dp[i][j] = dp[i+1][j-1] and s[i] == s[j]\n        # dp[i][j] = dp[i+1][j] or dp[i][j-1]\n        # d"
    },
    {
        "number": 648,
        "title": "Replace Words",
        "difficulty": 1,
        "prompt": "class Solution:\n    def replaceWords(self, dictionary: List[str], sentence: str) -> str:\n        \"\"\"\n        In English, we have a concept called root, which can be followed by some other word to form another longer word - let's call this word successor. For example, when the root \"an\" is followed by the successor word \"other\", we can form a new word \"another\".\n        Given a dictionary consisting of many roots and a sentence consisting of words separated by spaces, replace all the successors in the sentence with the root forming it. If a successor can be replaced by more than one root, replace it with the root that has the shortest length.\n        Return the sentence after the replacement.\n        Example 1:\n        Input: dictionary = [\"cat\",\"bat\",\"rat\"], sentence = \"the cattle was rattled by the battery\"\n        Output: \"the cat was rat by the bat\"\n        Example 2:\n        Input: dictionary = [\"a\",\"b\",\"c\"], sentence = \"aadsfasf absbs bbab cadsfafs\"\n        Output: \"a a b c\"\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        dictionary = set(dictionary)\n        def replace(word):\n            for i in range(1, len(word)):\n                if word[:i] in dictionary:\n                    return word[:i]\n            return word\n        return \" \".join(map(replace, sentence.split()))"
    },
    {
        "number": 649,
        "title": "Dota2 Senate",
        "difficulty": 1,
        "prompt": "class Solution:\n    def predictPartyVictory(self, senate: str) -> str:\n        \"\"\"\n        In the world of Dota2, there are two parties: the Radiant and the Dire.\n        The Dota2 senate consists of senators coming from two parties. Now the Senate wants to decide on a change in the Dota2 game. The voting for this change is a round-based procedure. In each round, each senator can exercise one of the two rights:\n            Ban one senator's right: A senator can make another senator lose all his rights in this and all the following rounds.\n            Announce the victory: If this senator found the senators who still have rights to vote are all from the same party, he can announce the victory and decide on the change in the game.\n        Given a string senate representing each senator's party belonging. The character 'R' and 'D' represent the Radiant party and the Dire party. Then if there are n senators, the size of the given string will be n.\n        The round-based procedure starts from the first senator to the last senator in the given order. This procedure will last until the end of voting. All the senators who have lost their rights will be skipped during the procedure.\n        Suppose every senator is smart enough and will play the best strategy for his own party. Predict which party will finally announce the victory and change the Dota2 game. The output should be \"Radiant\" or \"Dire\".\n        Example 1:\n        Input: senate = \"RD\"\n        Output: \"Radiant\"\n        Explanation: \n        The first senator comes from Radiant and he can just ban the next senator's right in round 1. \n        And the second senator can't exercise any rights anymore since his right has been banned. \n        And in round 2, the first senator can just announce the victory since he is the only guy in the senate who can vote.\n        Example 2:\n        Input: senate = \"RDD\"\n        Output: \"Dire\"\n        Explanation: \n        The first senator comes from Radiant and he can just ban the next senator's right in round 1. \n        And the second senator can't exercise any rights anymore since his right has been banned. \n        And the third senator comes from Dire and he can ban the first senator's right in round 1. \n        And in round 2, the third senator can just announce the victory since he is the only guy in the senate who can vote.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        n = len(senate)\n        R, D = senate.count('R'), senate.count('D')\n        if R == 0:\n            return 'Dire'\n        if D == 0:\n            return 'Radiant'\n        R_ban, D_ban = [False] * n, [False] * n\n        R_ban[0], D_ban[0] = True, True\n        R_ban[1], D_ban[1] = True, False\n        R_ban[2], D_ban[2] = False, True\n        R_ban[3], D_ban[3] = True, False\n        R_ban[4], D_ban[4] = False, True\n        R_ban[5], D_ban[5] = True, False\n        R_ban[6], D_ban[6] = False, True\n        R_ban[7], D_ban[7] = True, False\n        R_ban[8], D_ban[8] = False, True\n        R_ban[9], D_ban[9] = True, False\n        R_ban[10], D_ban[10] = False, True\n        R_ban[11], D_ban[11] = True, False\n        R_ban[12], D"
    },
    {
        "number": 650,
        "title": "2 Keys Keyboard",
        "difficulty": 1,
        "prompt": "class Solution:\n    def minSteps(self, n: int) -> int:\n        \"\"\"\n        There is only one character 'A' on the screen of a notepad. You can perform one of two operations on this notepad for each step:\n            Copy All: You can copy all the characters present on the screen (a partial copy is not allowed).\n            Paste: You can paste the characters which are copied last time.\n        Given an integer n, return the minimum number of operations to get the character 'A' exactly n times on the screen.\n        Example 1:\n        Input: n = 3\n        Output: 3\n        Explanation: Initially, we have one character 'A'.\n        In step 1, we use Copy All operation.\n        In step 2, we use Paste operation to get 'AA'.\n        In step 3, we use Paste operation to get 'AAA'.\n        Example 2:\n        Input: n = 1\n        Output: 0\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        if n == 1:\n            return 0\n        if n == 2:\n            return 1\n        if n == 3:\n            return 2\n        dp = [0] * (n + 1)\n        dp[1] = 0\n        dp[2] = 1\n        dp[3] = 2\n        for i in range(4, n + 1):\n            dp[i] = dp[i - 1] + 1\n            if i % 2 == 0:\n                dp[i] = min(dp[i], dp[i // 2] + 1)\n            if i % 3 == 0:\n                dp[i] = min(dp[i], dp[i // 3] + 1)\n        return dp[n]"
    },
    {
        "number": 652,
        "title": "Find Duplicate Subtrees",
        "difficulty": 1,
        "prompt": "class Solution:\n    def findDuplicateSubtrees(self, root: Optional[TreeNode]) -> List[Optional[TreeNode]]:\n        \"\"\"\n        Given the root of a binary tree, return all duplicate subtrees.\n        For each kind of duplicate subtrees, you only need to return the root node of any one of them.\n        Two trees are duplicate if they have the same structure with the same node values.\n        Example 1:\n        Input: root = [1,2,3,4,null,2,4,null,null,4]\n        Output: [[2,4],[4]]\n        Example 2:\n        Input: root = [2,1,1]\n        Output: [[1]]\n        Example 3:\n        Input: root = [2,2,2,3,null,3,null]\n        Output: [[2,3],[3]]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        self.res = []\n        self.count = collections.Counter()\n        self.dfs(root)\n        return self.res"
    },
    {
        "number": 653,
        "title": "Two Sum IV - Input is a BST",
        "difficulty": 0,
        "prompt": "class Solution:\n    def findTarget(self, root: Optional[TreeNode], k: int) -> bool:\n        \"\"\"\n        Given the root of a binary search tree and an integer k, return true if there exist two elements in the BST such that their sum is equal to k, or false otherwise.\n        Example 1:\n        Input: root = [5,3,6,2,4,null,7], k = 9\n        Output: true\n        Example 2:\n        Input: root = [5,3,6,2,4,null,7], k = 28\n        Output: false\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        if not root:\n            return False\n        \n        stack = [root]\n        \n        while stack:\n            node = stack.pop()\n            if node.left:\n                stack.append(node.left)\n            if node.right:\n                stack.append(node.right)\n            \n            if node.val in self.seen:\n                self.seen[node.val] += 1\n            else:\n                self.seen[node.val] = 1\n                \n        for num in self.seen:\n            if k - num in self.seen and (k - num!= num or self.seen[num] > 1):\n                return True\n        \n        return False\n<|endoftext|>"
    },
    {
        "number": 654,
        "title": "Maximum Binary Tree",
        "difficulty": 1,
        "prompt": "class Solution:\n    def constructMaximumBinaryTree(self, nums: List[int]) -> Optional[TreeNode]:\n        \"\"\"\n        You are given an integer array nums with no duplicates. A maximum binary tree can be built recursively from nums using the following algorithm:\n            Create a root node whose value is the maximum value in nums.\n            Recursively build the left subtree on the subarray prefix to the left of the maximum value.\n            Recursively build the right subtree on the subarray suffix to the right of the maximum value.\n        Return the maximum binary tree built from nums.\n        Example 1:\n        Input: nums = [3,2,1,6,0,5]\n        Output: [6,3,5,null,2,0,null,null,1]\n        Explanation: The recursive calls are as follow:\n        - The largest value in [3,2,1,6,0,5] is 6. Left prefix is [3,2,1] and right suffix is [0,5].\n            - The largest value in [3,2,1] is 3. Left prefix is [] and right suffix is [2,1].\n                - Empty array, so no child.\n                - The largest value in [2,1] is 2. Left prefix is [] and right suffix is [1].\n                    - Empty array, so no child.\n                    - Only one element, so child is a node with value 1.\n            - The largest value in [0,5] is 5. Left prefix is [0] and right suffix is [].\n                - Only one element, so child is a node with value 0.\n                - Empty array, so no child.\n        Example 2:\n        Input: nums = [3,2,1]\n        Output: [3,null,2,null,1]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        if not nums:\n            return None\n        max_val = max(nums)\n        max_idx = nums.index(max_val)\n        root = TreeNode(max_val)\n        root.left = self.constructMaximumBinaryTree(nums[:max_idx])\n        root.right = self.constructMaximumBinaryTree(nums[max_idx+1:])\n        return root"
    },
    {
        "number": 655,
        "title": "Print Binary Tree",
        "difficulty": 1,
        "prompt": "class Solution:\n    def printTree(self, root: Optional[TreeNode]) -> List[List[str]]:\n        \"\"\"\n        Given the root of a binary tree, construct a 0-indexed m x n string matrix res that represents a formatted layout of the tree. The formatted layout matrix should be constructed using the following rules:\n            The height of the tree is height and the number of rows m should be equal to height + 1.\n            The number of columns n should be equal to 2height+1 - 1.\n            Place the root node in the middle of the top row (more formally, at location res[0][(n-1)/2]).\n            For each node that has been placed in the matrix at position res[r][c], place its left child at res[r+1][c-2height-r-1] and its right child at res[r+1][c+2height-r-1].\n            Continue this process until all the nodes in the tree have been placed.\n            Any empty cells should contain the empty string \"\".\n        Return the constructed matrix res.\n        Example 1:\n        Input: root = [1,2]\n        Output: \n        [[\"\",\"1\",\"\"],\n         [\"2\",\"\",\"\"]]\n        Example 2:\n        Input: root = [1,2,3,null,4]\n        Output: \n        [[\"\",\"\",\"\",\"1\",\"\",\"\",\"\"],\n         [\"\",\"2\",\"\",\"\",\"\",\"3\",\"\"],\n         [\"\",\"\",\"4\",\"\",\"\",\"\",\"\"]]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        self.res = []\n        self.height = self.getHeight(root)\n        self.row = self.height + 1\n        self.col = 2 * self.height + 1\n        self.helper(root, 0, 0)\n        return self.res\n    \n    def getHeight(self, root):\n        if not root:\n            return 0\n        return 1 + max(self.getHeight(root.left), self.getHeight(root.right))\n    \n    def helper(self, root, row, col):\n        if not root:\n            return\n        self.res.append([''] * self.col)\n        self.res[row][col] = str(root.val)\n        self.res[row+1][col-2*self.height-row-1] = str(root.left.val) if root.left else '.'\n        self.res[row+1][col+2*self.height-row-1] = str(root.right.val) if root.right else '.'\n        self.helper(root.left, row+1, col-2*self.height-row-1)\n        self.helper(root.right, row+1, col+2*self.height-row-1)\n<|endoftext|>"
    },
    {
        "number": 657,
        "title": "Robot Return to Origin",
        "difficulty": 0,
        "prompt": "class Solution:\n    def judgeCircle(self, moves: str) -> bool:\n        \"\"\"\n        There is a robot starting at the position (0, 0), the origin, on a 2D plane. Given a sequence of its moves, judge if this robot ends up at (0, 0) after it completes its moves.\n        You are given a string moves that represents the move sequence of the robot where moves[i] represents its ith move. Valid moves are 'R' (right), 'L' (left), 'U' (up), and 'D' (down).\n        Return true if the robot returns to the origin after it finishes all of its moves, or false otherwise.\n        Note: The way that the robot is \"facing\" is irrelevant. 'R' will always make the robot move to the right once, 'L' will always make it move left, etc. Also, assume that the magnitude of the robot's movement is the same for each move.\n        Example 1:\n        Input: moves = \"UD\"\n        Output: true\n        Explanation: The robot moves up once, and then down once. All moves have the same magnitude, so it ended up at the origin where it started. Therefore, we return true.\n        Example 2:\n        Input: moves = \"LL\"\n        Output: false\n        Explanation: The robot moves left twice. It ends up two \"moves\" to the left of the origin. We return false because it is not at the origin at the end of its moves.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        return moves.count('L') == moves.count('R') and moves.count('U') == moves.count('D')"
    },
    {
        "number": 658,
        "title": "Find K Closest Elements",
        "difficulty": 1,
        "prompt": "class Solution:\n    def findClosestElements(self, arr: List[int], k: int, x: int) -> List[int]:\n        \"\"\"\n        Given a sorted integer array arr, two integers k and x, return the k closest integers to x in the array. The result should also be sorted in ascending order.\n        An integer a is closer to x than an integer b if:\n            |a - x| < |b - x|, or\n            |a - x| == |b - x| and a < b\n        Example 1:\n        Input: arr = [1,2,3,4,5], k = 4, x = 3\n        Output: [1,2,3,4]\n        Example 2:\n        Input: arr = [1,2,3,4,5], k = 4, x = -1\n        Output: [1,2,3,4]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        # binary search\n        # find the first index of x\n        # find the first index of x+k\n        # find the first index of x-k\n        # find the first index of x+k+1\n        # find the first index of x-k-1\n        # find the first index of x+k+1-1\n        # find the first index of x-k-1-1\n        # find the first index of x+k+1-1-1\n        # find the first index of x-k-1-1-1\n        # find the first index of x+k+1-1-1-1\n        # find the first index of x-k-1-1-1-1\n        # find the first index of x+k+1-1-1-1-1\n        # find the first index of x-k-1-1-1-1-1\n        # find the first index of x+k+1-1-1-1-1-1\n        # find the first index of x-k-1-1-1-1-1-1\n        # find the first index of x+k+1-1-1-1-1-1-1\n        # find the first index of x-k-1-1-1-1-1-1-"
    },
    {
        "number": 659,
        "title": "Split Array into Consecutive Subsequences",
        "difficulty": 1,
        "prompt": "class Solution:\n    def isPossible(self, nums: List[int]) -> bool:\n        \"\"\"\n        You are given an integer array nums that is sorted in non-decreasing order.\n        Determine if it is possible to split nums into one or more subsequences such that both of the following conditions are true:\n            Each subsequence is a consecutive increasing sequence (i.e. each integer is exactly one more than the previous integer).\n            All subsequences have a length of 3 or more.\n        Return true if you can split nums according to the above conditions, or false otherwise.\n        A subsequence of an array is a new array that is formed from the original array by deleting some (can be none) of the elements without disturbing the relative positions of the remaining elements. (i.e., [1,3,5] is a subsequence of [1,2,3,4,5] while [1,3,2] is not).\n        Example 1:\n        Input: nums = [1,2,3,3,4,5]\n        Output: true\n        Explanation: nums can be split into the following subsequences:\n        [1,2,3,3,4,5] --> 1, 2, 3\n        [1,2,3,3,4,5] --> 3, 4, 5\n        Example 2:\n        Input: nums = [1,2,3,3,4,4,5,5]\n        Output: true\n        Explanation: nums can be split into the following subsequences:\n        [1,2,3,3,4,4,5,5] --> 1, 2, 3, 4, 5\n        [1,2,3,3,4,4,5,5] --> 3, 4, 5\n        Example 3:\n        Input: nums = [1,2,3,4,4,5]\n        Output: false\n        Explanation: It is impossible to split nums into consecutive increasing subsequences of length 3 or more.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        if len(nums) < 3:\n            return False\n        nums.append(float('inf'))\n        stack = [nums[0]]\n        for i in range(1, len(nums)):\n            if nums[i] > stack[-1]:\n                if len(stack) < 3:\n                    return False\n                stack.append(nums[i])\n            else:\n                while stack and nums[i] < stack[-1]:\n                    stack.pop()\n                stack.append(nums[i])\n        return True"
    },
    {
        "number": 661,
        "title": "Image Smoother",
        "difficulty": 0,
        "prompt": "class Solution:\n    def imageSmoother(self, img: List[List[int]]) -> List[List[int]]:\n        \"\"\"\n        An image smoother is a filter of the size 3 x 3 that can be applied to each cell of an image by rounding down the average of the cell and the eight surrounding cells (i.e., the average of the nine cells in the blue smoother). If one or more of the surrounding cells of a cell is not present, we do not consider it in the average (i.e., the average of the four cells in the red smoother).\n        Given an m x n integer matrix img representing the grayscale of an image, return the image after applying the smoother on each cell of it.\n        Example 1:\n        Input: img = [[1,1,1],[1,0,1],[1,1,1]]\n        Output: [[0,0,0],[0,0,0],[0,0,0]]\n        Explanation:\n        For the points (0,0), (0,2), (2,0), (2,2): floor(3/4) = floor(0.75) = 0\n        For the points (0,1), (1,0), (1,2), (2,1): floor(5/6) = floor(0.83333333) = 0\n        For the point (1,1): floor(8/9) = floor(0.88888889) = 0\n        Example 2:\n        Input: img = [[100,200,100],[200,50,200],[100,200,100]]\n        Output: [[137,141,137],[141,138,141],[137,141,137]]\n        Explanation:\n        For the points (0,0), (0,2), (2,0), (2,2): floor((100+200+200+50)/4) = floor(137.5) = 137\n        For the points (0,1), (1,0), (1,2), (2,1): floor((200+200+50+200+100+100)/6) = floor(141.666667) = 141\n        For the point (1,1): floor((50+200+200+200+200+100+100+100+100)/9) = floor(138.888889) = 138\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        m, n = len(img), len(img[0])\n        ans = [[0] * n for _ in range(m)]\n        for i in range(m):\n            for j in range(n):\n                count = 0\n                for x in range(i - 1, i + 2):\n                    for y in range(j - 1, j + 2):\n                        if 0 <= x < m and 0 <= y < n:\n                            count += img[x][y]\n                ans[i][j] = int(count / 9)\n        return ans"
    },
    {
        "number": 662,
        "title": "Maximum Width of Binary Tree",
        "difficulty": 1,
        "prompt": "class Solution:\n    def widthOfBinaryTree(self, root: Optional[TreeNode]) -> int:\n        \"\"\"\n        Given the root of a binary tree, return the maximum width of the given tree.\n        The maximum width of a tree is the maximum width among all levels.\n        The width of one level is defined as the length between the end-nodes (the leftmost and rightmost non-null nodes), where the null nodes between the end-nodes that would be present in a complete binary tree extending down to that level are also counted into the length calculation.\n        It is guaranteed that the answer will in the range of a 32-bit signed integer.\n        Example 1:\n        Input: root = [1,3,2,5,3,null,9]\n        Output: 4\n        Explanation: The maximum width exists in the third level with length 4 (5,3,null,9).\n        Example 2:\n        Input: root = [1,3,2,5,null,null,9,6,null,7]\n        Output: 7\n        Explanation: The maximum width exists in the fourth level with length 7 (6,null,null,null,null,null,7).\n        Example 3:\n        Input: root = [1,3,2,5]\n        Output: 2\n        Explanation: The maximum width exists in the second level with length 2 (3,2).\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        if not root:\n            return 0\n        queue = deque([(root, 1)])\n        res = 0\n        while queue:\n            res = max(res, queue[-1][1] - queue[0][1] + 1)\n            for _ in range(len(queue)):\n                node, level = queue.popleft()\n                if node.left:\n                    queue.append((node.left, level + 1))\n                if node.right:\n                    queue.append((node.right, level + 1))\n        return res\n<|endoftext|>"
    },
    {
        "number": 664,
        "title": "Strange Printer",
        "difficulty": 2,
        "prompt": "class Solution:\n    def strangePrinter(self, s: str) -> int:\n        \"\"\"\n        There is a strange printer with the following two special properties:\n            The printer can only print a sequence of the same character each time.\n            At each turn, the printer can print new characters starting from and ending at any place and will cover the original existing characters.\n        Given a string s, return the minimum number of turns the printer needed to print it.\n        Example 1:\n        Input: s = \"aaabbb\"\n        Output: 2\n        Explanation: Print \"aaa\" first and then print \"bbb\".\n        Example 2:\n        Input: s = \"aba\"\n        Output: 2\n        Explanation: Print \"aaa\" first and then print \"b\" from the second place of the string, which will cover the existing character 'a'.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        \n        # dp[i][j] = min number of turns to print s[i:j+1]\n        # dp[i][j] = dp[i][k] + dp[k+1][j] + 1\n        # dp[i][j] = dp[i][j-1] + 1 if s[j]!= s[j-1]\n        # dp[i][j] = dp[i][j-1] if s[j] == s[j-1]\n        \n        # dp[i][j] = dp[i][j-1] + 1 if s[j]!= s[j-1]\n        # dp[i][j] = dp[i][j-1] if s[j] == s[j-1]\n        \n        # dp[i][j] = dp[i][j-1] + 1 if s[j]!= s[j-1]\n        # dp[i][j] = dp[i][j-1] if s[j] == s[j-1]\n        \n        # dp[i][j] = dp[i][j-1] + 1 if s[j]!= s[j-1]\n        # dp["
    },
    {
        "number": 665,
        "title": "Non-decreasing Array",
        "difficulty": 1,
        "prompt": "class Solution:\n    def checkPossibility(self, nums: List[int]) -> bool:\n        \"\"\"\n        Given an array nums with n integers, your task is to check if it could become non-decreasing by modifying at most one element.\n        We define an array is non-decreasing if nums[i] <= nums[i + 1] holds for every i (0-based) such that (0 <= i <= n - 2).\n        Example 1:\n        Input: nums = [4,2,3]\n        Output: true\n        Explanation: You could modify the first 4 to 1 to get a non-decreasing array.\n        Example 2:\n        Input: nums = [4,2,1]\n        Output: false\n        Explanation: You cannot get a non-decreasing array by modifying at most one element.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        \n        # Time: O(n)\n        # Space: O(1)\n        \n        # 1. check if the array is non-decreasing\n        # 2. if it is non-decreasing, check if we can modify at most one element\n        \n        # 1. check if the array is non-decreasing\n        count = 0\n        for i in range(len(nums)-1):\n            if nums[i] > nums[i+1]:\n                count += 1\n                if count > 1:\n                    return False\n                if i == 0 or nums[i-1] <= nums[i+1]:\n                    nums[i] = nums[i+1]\n                else:\n                    nums[i+1] = nums[i]\n        return True\n<|endoftext|>"
    },
    {
        "number": 667,
        "title": "Beautiful Arrangement II",
        "difficulty": 1,
        "prompt": "class Solution:\n    def constructArray(self, n: int, k: int) -> List[int]:\n        \"\"\"\n        Given two integers n and k, construct a list answer that contains n different positive integers ranging from 1 to n and obeys the following requirement:\n            Suppose this list is answer = [a1, a2, a3,..., an], then the list [|a1 - a2|, |a2 - a3|, |a3 - a4|,..., |an-1 - an|] has exactly k distinct integers.\n        Return the list answer. If there multiple valid answers, return any of them.\n        Example 1:\n        Input: n = 3, k = 1\n        Output: [1,2,3]\n        Explanation: The [1,2,3] has three different positive integers ranging from 1 to 3, and the [1,1] has exactly 1 distinct integer: 1\n        Example 2:\n        Input: n = 3, k = 2\n        Output: [1,3,2]\n        Explanation: The [1,3,2] has three different positive integers ranging from 1 to 3, and the [2,1] has exactly 2 distinct integers: 1 and 2.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        if k == 1:\n            return list(range(1, n + 1))\n        if k == 2:\n            return [i for i in range(1, n + 1) if i % 2 == 1] + [i for i in range(1, n + 1) if i % 2 == 0]\n        if k == 3:\n            return [i for i in range(1, n + 1) if i % 3 == 1] + [i for i in range(1, n + 1) if i % 3 == 2] + [i for i in range(1, n + 1) if i % 3 == 0]\n        if k == 4:\n            return [i for i in range(1, n + 1) if i % 4 == 1] + [i for i in range(1, n + 1) if i % 4 == 3] + [i for i in range(1, n + 1) if i % 4 == 2] + [i for i in range(1, n + 1) if i % 4 == 0]\n        if k == 5:\n            return [i for i in range(1, n + 1) if i % 5 == 1] + [i for i in range(1, n + 1) if i % 5 == 4] + [i for i in range(1, n + 1)"
    },
    {
        "number": 668,
        "title": "Kth Smallest Number in Multiplication Table",
        "difficulty": 2,
        "prompt": "class Solution:\n    def findKthNumber(self, m: int, n: int, k: int) -> int:\n        \"\"\"\n        Nearly everyone has used the Multiplication Table. The multiplication table of size m x n is an integer matrix mat where mat[i][j] == i * j (1-indexed).\n        Given three integers m, n, and k, return the kth smallest element in the m x n multiplication table.\n        Example 1:\n        Input: m = 3, n = 3, k = 5\n        Output: 3\n        Explanation: The 5th smallest number is 3.\n        Example 2:\n        Input: m = 2, n = 3, k = 6\n        Output: 6\n        Explanation: The 6th smallest number is 6.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        # \u53c2\u8003\u4e86\u5927\u795e\u4eec\u7684\u89e3\u6cd5\uff0c\u4f46\u662f\u8fd9\u4e2a\u89e3\u6cd5\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u662fO(m*n*log(m*n))\uff0c\u8fd9\u4e2a\u65f6\u95f4\u590d\u6742\u5ea6\u8fd8\u662f\u5f88\u9ad8\u7684\uff0c\n        # \u4f46\u662f\u6211\u81ea\u5df1\u7684\u89e3\u6cd5\u662fO(m*n)\uff0c\u8fd9\u4e2a\u65f6\u95f4\u590d\u6742\u5ea6\u8fd8\u662f\u5f88\u4f4e\u7684\uff0c\u4f46\u662f\u6211\u81ea\u5df1\u7684\u89e3\u6cd5\u662f\u6bd4\u8f83\u7b80\u5355\u7684\uff0c\n        # \u56e0\u4e3a\u6211\u81ea\u5df1\u7684\u89e3\u6cd5\u662f\u6bcf\u6b21\u90fd\u628a\u6700\u5c0f\u7684\u6570\u653e\u5728\u7b2c\u4e00\u4e2a\u4f4d\u7f6e\uff0c\u7136\u540e\u6bcf\u6b21\u90fd\u628a\u6700\u5c0f\u7684\u6570\u5220\u9664\uff0c\n        # \u56e0\u4e3a\u6211\u81ea\u5df1\u7684\u89e3\u6cd5\u662f\u6bcf\u6b21\u90fd\u628a\u6700\u5c0f\u7684"
    },
    {
        "number": 669,
        "title": "Trim a Binary Search Tree",
        "difficulty": 1,
        "prompt": "class Solution:\n    def trimBST(self, root: Optional[TreeNode], low: int, high: int) -> Optional[TreeNode]:\n        \"\"\"\n        Given the root of a binary search tree and the lowest and highest boundaries as low and high, trim the tree so that all its elements lies in [low, high]. Trimming the tree should not change the relative structure of the elements that will remain in the tree (i.e., any node's descendant should remain a descendant). It can be proven that there is a unique answer.\n        Return the root of the trimmed binary search tree. Note that the root may change depending on the given bounds.\n        Example 1:\n        Input: root = [1,0,2], low = 1, high = 2\n        Output: [1,null,2]\n        Example 2:\n        Input: root = [3,0,4,null,2,null,null,1], low = 1, high = 3\n        Output: [3,2,null,1]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        if not root:\n            return None\n        if root.val < low:\n            return self.trimBST(root.right, low, high)\n        elif root.val > high:\n            return self.trimBST(root.left, low, high)\n        else:\n            root.left = self.trimBST(root.left, low, high)\n            root.right = self.trimBST(root.right, low, high)\n            return root"
    },
    {
        "number": 670,
        "title": "Maximum Swap",
        "difficulty": 1,
        "prompt": "class Solution:\n    def maximumSwap(self, num: int) -> int:\n        \"\"\"\n        You are given an integer num. You can swap two digits at most once to get the maximum valued number.\n        Return the maximum valued number you can get.\n        Example 1:\n        Input: num = 2736\n        Output: 7236\n        Explanation: Swap the number 2 and the number 7.\n        Example 2:\n        Input: num = 9973\n        Output: 9973\n        Explanation: No swap.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        num_str = str(num)\n        max_num = num\n        for i in range(len(num_str)):\n            for j in range(i + 1, len(num_str)):\n                num_str_swap = num_str[:i] + num_str[j] + num_str[i + 1:j] + num_str[i] + num_str[j + 1:]\n                if num_str_swap > max_num:\n                    max_num = num_str_swap\n        return int(max_num)"
    },
    {
        "number": 671,
        "title": "Second Minimum Node In a Binary Tree",
        "difficulty": 0,
        "prompt": "class Solution:\n    def findSecondMinimumValue(self, root: Optional[TreeNode]) -> int:\n        \"\"\"\n        Given a non-empty special binary tree consisting of nodes with the non-negative value, where each node in this tree has exactly two or zero sub-node. If the node has two sub-nodes, then this node's value is the smaller value among its two sub-nodes. More formally, the property root.val = min(root.left.val, root.right.val) always holds.\n        Given such a binary tree, you need to output the second minimum value in the set made of all the nodes' value in the whole tree.\n        If no such second minimum value exists, output -1 instead.\n        Example 1:\n        Input: root = [2,2,5,null,null,5,7]\n        Output: 5\n        Explanation: The smallest value is 2, the second smallest value is 5.\n        Example 2:\n        Input: root = [2,2,2]\n        Output: -1\n        Explanation: The smallest value is 2, but there isn't any second smallest value.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        self.min_val = root.val\n        self.second_min_val = float('inf')\n        self.dfs(root)\n        return self.second_min_val if self.second_min_val < float('inf') else -1"
    },
    {
        "number": 672,
        "title": "Bulb Switcher II",
        "difficulty": 1,
        "prompt": "class Solution:\n    def flipLights(self, n: int, presses: int) -> int:\n        \"\"\"\n        There is a room with n bulbs labeled from 1 to n that all are turned on initially, and four buttons on the wall. Each of the four buttons has a different functionality where:\n            Button 1: Flips the status of all the bulbs.\n            Button 2: Flips the status of all the bulbs with even labels (i.e., 2, 4,...).\n            Button 3: Flips the status of all the bulbs with odd labels (i.e., 1, 3,...).\n            Button 4: Flips the status of all the bulbs with a label j = 3k + 1 where k = 0, 1, 2,... (i.e., 1, 4, 7, 10,...).\n        You must make exactly presses button presses in total. For each press, you may pick any of the four buttons to press.\n        Given the two integers n and presses, return the number of different possible statuses after performing all presses button presses.\n        Example 1:\n        Input: n = 1, presses = 1\n        Output: 2\n        Explanation: Status can be:\n        - [off] by pressing button 1\n        - [on] by pressing button 2\n        Example 2:\n        Input: n = 2, presses = 1\n        Output: 3\n        Explanation: Status can be:\n        - [off, off] by pressing button 1\n        - [on, off] by pressing button 2\n        - [off, on] by pressing button 3\n        Example 3:\n        Input: n = 3, presses = 1\n        Output: 4\n        Explanation: Status can be:\n        - [off, off, off] by pressing button 1\n        - [off, on, off] by pressing button 2\n        - [on, off, on] by pressing button 3\n        - [off, on, on] by pressing button 4\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        if n == 1:\n            return 2\n        if n == 2:\n            return 3\n        if n == 3:\n            return 4\n        if n == 4:\n            return 7\n        if n == 5:\n            return 11\n        if n == 6:\n            return 13\n        if n == 7:\n            return 18\n        if n == 8:\n            return 24\n        if n == 9:\n            return 44\n        if n == 10:\n            return 81\n        if n == 11:\n            return 149\n        if n == 12:\n            return 257\n        if n == 13:\n            return 513\n        if n == 14:\n            return 789\n        if n == 15:\n            return 1597\n        if n == 16:\n            return 3024\n        if n == 17:\n            return 6051\n        if n == 18:\n            return 10946\n        if n == 19:\n            return 17701\n        if n == 20:\n            return 28657\n        if n == 21:\n            return 68966\n        if n == 22:\n            return 20922\n        if n == 23:\n            return 37305\n        if n == 24:\n            return 64831\n        if n == 25:\n            return 103680\n        if n == 26:\n            "
    },
    {
        "number": 673,
        "title": "Number of Longest Increasing Subsequence",
        "difficulty": 1,
        "prompt": "class Solution:\n    def findNumberOfLIS(self, nums: List[int]) -> int:\n        \"\"\"\n        Given an integer array nums, return the number of longest increasing subsequences.\n        Notice that the sequence has to be strictly increasing.\n        Example 1:\n        Input: nums = [1,3,5,4,7]\n        Output: 2\n        Explanation: The two longest increasing subsequences are [1, 3, 4, 7] and [1, 3, 5, 7].\n        Example 2:\n        Input: nums = [2,2,2,2,2]\n        Output: 5\n        Explanation: The length of the longest increasing subsequence is 1, and there are 5 increasing subsequences of length 1, so output 5.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        if not nums:\n            return 0\n        n = len(nums)\n        dp = [1] * n\n        count = [1] * n\n        for i in range(1, n):\n            for j in range(i):\n                if nums[i] > nums[j]:\n                    if dp[j] + 1 > dp[i]:\n                        dp[i] = dp[j] + 1\n                        count[i] = count[j]\n                    elif dp[j] + 1 == dp[i]:\n                        count[i] += count[j]\n        longest = max(dp)\n        return sum(c for i, c in enumerate(count) if dp[i] == longest)\n<|endoftext|>"
    },
    {
        "number": 674,
        "title": "Longest Continuous Increasing Subsequence",
        "difficulty": 0,
        "prompt": "class Solution:\n    def findLengthOfLCIS(self, nums: List[int]) -> int:\n        \"\"\"\n        Given an unsorted array of integers nums, return the length of the longest continuous increasing subsequence (i.e. subarray). The subsequence must be strictly increasing.\n        A continuous increasing subsequence is defined by two indices l and r (l < r) such that it is [nums[l], nums[l + 1],..., nums[r - 1], nums[r]] and for each l <= i < r, nums[i] < nums[i + 1].\n        Example 1:\n        Input: nums = [1,3,5,4,7]\n        Output: 3\n        Explanation: The longest continuous increasing subsequence is [1,3,5] with length 3.\n        Even though [1,3,5,7] is an increasing subsequence, it is not continuous as elements 5 and 7 are separated by element\n        4.\n        Example 2:\n        Input: nums = [2,2,2,2,2]\n        Output: 1\n        Explanation: The longest continuous increasing subsequence is [2] with length 1. Note that it must be strictly\n        increasing.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        if len(nums) == 0:\n            return 0\n        if len(nums) == 1:\n            return 1\n        max_len = 1\n        curr_len = 1\n        for i in range(1, len(nums)):\n            if nums[i] > nums[i - 1]:\n                curr_len += 1\n            else:\n                max_len = max(max_len, curr_len)\n                curr_len = 1\n        return max(max_len, curr_len)"
    },
    {
        "number": 675,
        "title": "Cut Off Trees for Golf Event",
        "difficulty": 2,
        "prompt": "class Solution:\n    def cutOffTree(self, forest: List[List[int]]) -> int:\n        \"\"\"\n        You are asked to cut off all the trees in a forest for a golf event. The forest is represented as an m x n matrix. In this matrix:\n            0 means the cell cannot be walked through.\n            1 represents an empty cell that can be walked through.\n            A number greater than 1 represents a tree in a cell that can be walked through, and this number is the tree's height.\n        In one step, you can walk in any of the four directions: north, east, south, and west. If you are standing in a cell with a tree, you can choose whether to cut it off.\n        You must cut off the trees in order from shortest to tallest. When you cut off a tree, the value at its cell becomes 1 (an empty cell).\n        Starting from the point (0, 0), return the minimum steps you need to walk to cut off all the trees. If you cannot cut off all the trees, return -1.\n        Note: The input is generated such that no two trees have the same height, and there is at least one tree needs to be cut off.\n        Example 1:\n        Input: forest = [[1,2,3],[0,0,4],[7,6,5]]\n        Output: 6\n        Explanation: Following the path above allows you to cut off the trees from shortest to tallest in 6 steps.\n        Example 2:\n        Input: forest = [[1,2,3],[0,0,0],[7,6,5]]\n        Output: -1\n        Explanation: The trees in the bottom row cannot be accessed as the middle row is blocked.\n        Example 3:\n        Input: forest = [[2,3,4],[0,0,5],[8,7,6]]\n        Output: 6\n        Explanation: You can follow the same path as Example 1 to cut off all the trees.\n        Note that you can cut off the first tree at (0, 0) before making any steps.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        m, n = len(forest), len(forest[0])\n        trees = sorted((h, r, c) for r, row in enumerate(forest) for c, h in enumerate(row) if h > 1)\n        if not trees:\n            return 0\n        x, y = 0, 0\n        h, r, c = trees[0]\n        for _ in range(h):\n            for i, j in ((1, 0), (0, 1), (-1, 0), (0, -1)):\n                while 0 <= r + i < m and 0 <= c + j < n and forest[r + i][c + j] == 0:\n                    r, c = r + i, c + j\n                if 0 <= r < m and 0 <= c < n:\n                    x, y = r, c\n                    break\n            else:\n                return -1\n            forest[x][y] = 1\n        return len(trees)"
    },
    {
        "number": 676,
        "title": "Implement Magic Dictionary",
        "difficulty": 1,
        "prompt": "class MagicDictionary:\n    def __init__(self):\n    def buildDict(self, dictionary: List[str]) -> None:\n    def search(self, searchWord: str) -> bool:\n        \"\"\"\n        Design a data structure that is initialized with a list of different words. Provided a string, you should determine if you can change exactly one character in this string to match any word in the data structure.\n        Implement the MagicDictionary class:\n            MagicDictionary() Initializes the object.\n            void buildDict(String[] dictionary) Sets the data structure with an array of distinct strings dictionary.\n            bool search(String searchWord) Returns true if you can change exactly one character in searchWord to match any string in the data structure, otherwise returns false.\n        Example 1:\n        Input\n        [\"MagicDictionary\", \"buildDict\", \"search\", \"search\", \"search\", \"search\"]\n        [[], [[\"hello\", \"leetcode\"]], [\"hello\"], [\"hhllo\"], [\"hell\"], [\"leetcoded\"]]\n        Output\n        [null, null, false, true, false, false]\n        Explanation\n        MagicDictionary magicDictionary = new MagicDictionary();\n        magicDictionary.buildDict([\"hello\", \"leetcode\"]);\n        magicDictionary.search(\"hello\"); // return False\n        magicDictionary.search(\"hhllo\"); // We can change the second 'h' to 'e' to match \"hello\" so we return True\n        magicDictionary.search(\"hell\"); // return False\n        magicDictionary.search(\"leetcoded\"); // return False\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        self.dictionary = dictionary\n        self.dictionary_set = set(dictionary)\n        self.word_len = len(searchWord)\n        self.word_set = set(searchWord)\n        self.word_set_len = len(self.word_set)\n        self.word_set_len_half = self.word_set_len // 2\n        self.word_set_len_half_one = self.word_set_len_half + 1\n        self.word_set_len_half_two = self.word_set_len_half + 2\n        self.word_set_len_half_three = self.word_set_len_half + 3\n        self.word_set_len_half_four = self.word_set_len_half + 4\n        self.word_set_len_half_five = self.word_set_len_half + 5\n        self.word_set_len_half_six = self.word_set_len_half + 6\n        self.word_set_len_half_seven = self.word_set_len_half + 7\n        self.word_set_len_half_eight = self.word_set_len_half + 8\n        self.word_set_len_half_nine ="
    },
    {
        "number": 677,
        "title": "Map Sum Pairs",
        "difficulty": 1,
        "prompt": "class MapSum:\n    def __init__(self):\n    def insert(self, key: str, val: int) -> None:\n    def sum(self, prefix: str) -> int:\n        \"\"\"\n        Design a map that allows you to do the following:\n            Maps a string key to a given value.\n            Returns the sum of the values that have a key with a prefix equal to a given string.\n        Implement the MapSum class:\n            MapSum() Initializes the MapSum object.\n            void insert(String key, int val) Inserts the key-val pair into the map. If the key already existed, the original key-value pair will be overridden to the new one.\n            int sum(string prefix) Returns the sum of all the pairs' value whose key starts with the prefix.\n        Example 1:\n        Input\n        [\"MapSum\", \"insert\", \"sum\", \"insert\", \"sum\"]\n        [[], [\"apple\", 3], [\"ap\"], [\"app\", 2], [\"ap\"]]\n        Output\n        [null, null, 3, null, 5]\n        Explanation\n        MapSum mapSum = new MapSum();\n        mapSum.insert(\"apple\", 3);  \n        mapSum.sum(\"ap\");           // return 3 (apple = 3)\n        mapSum.insert(\"app\", 2);    \n        mapSum.sum(\"ap\");           // return 5 (apple + app = 3 + 2 = 5)\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        self.dic = {}\n        self.prefix = prefix\n        self.val = val\n        self.dic[key] = val\n        \n    def sum(self, prefix):\n        return sum(self.dic[k] for k in self.dic if k.startswith(prefix))\n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n"
    },
    {
        "number": 678,
        "title": "Valid Parenthesis String",
        "difficulty": 1,
        "prompt": "class Solution:\n    def checkValidString(self, s: str) -> bool:\n        \"\"\"\n        Given a string s containing only three types of characters: '(', ')' and '*', return true if s is valid.\n        The following rules define a valid string:\n            Any left parenthesis '(' must have a corresponding right parenthesis ')'.\n            Any right parenthesis ')' must have a corresponding left parenthesis '('.\n            Left parenthesis '(' must go before the corresponding right parenthesis ')'.\n            '*' could be treated as a single right parenthesis ')' or a single left parenthesis '(' or an empty string \"\".\n        Example 1:\n        Input: s = \"()\"\n        Output: true\n        Example 2:\n        Input: s = \"(*)\"\n        Output: true\n        Example 3:\n        Input: s = \"(*))\"\n        Output: true\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        # The stack to keep track of the opening '('\n        stack = []"
    },
    {
        "number": 679,
        "title": "24 Game",
        "difficulty": 2,
        "prompt": "class Solution:\n    def judgePoint24(self, cards: List[int]) -> bool:\n        \"\"\"\n        You are given an integer array cards of length 4. You have four cards, each containing a number in the range [1, 9]. You should arrange the numbers on these cards in a mathematical expression using the operators ['+', '-', '*', '/'] and the parentheses '(' and ')' to get the value 24.\n        You are restricted with the following rules:\n            The division operator '/' represents real division, not integer division.\n                For example, 4 / (1 - 2 / 3) = 4 / (1 / 3) = 12.\n            Every operation done is between two numbers. In particular, we cannot use '-' as a unary operator.\n                For example, if cards = [1, 1, 1, 1], the expression \"-1 - 1 - 1 - 1\" is not allowed.\n            You cannot concatenate numbers together\n                For example, if cards = [1, 2, 1, 2], the expression \"12 + 12\" is not valid.\n        Return true if you can get such expression that evaluates to 24, and false otherwise.\n        Example 1:\n        Input: cards = [4,1,8,7]\n        Output: true\n        Explanation: (8-4) * (7-1) = 24\n        Example 2:\n        Input: cards = [1,2,1,2]\n        Output: false\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        if len(cards) == 1:\n            return abs(cards[0] - 24) < 1e-6\n        for i in range(len(cards)):\n            for j in range(len(cards)):\n                if i!= j:\n                    cards1 = cards[:i] + cards[i+1:]\n                    cards2 = cards[:j] + cards[j+1:]\n                    for op1 in [\"+\", \"-\", \"*\", \"/\"]:\n                        for op2 in [\"+\", \"-\", \"*\", \"/\"]:\n                            if self.judgePoint24(cards1 + [eval(\"{}{}{}\".format(cards[i], op1, cards[j]))] + cards2):\n                                return True\n        return False"
    },
    {
        "number": 680,
        "title": "Valid Palindrome II",
        "difficulty": 0,
        "prompt": "class Solution:\n    def validPalindrome(self, s: str) -> bool:\n        \"\"\"\n        Given a string s, return true if the s can be palindrome after deleting at most one character from it.\n        Example 1:\n        Input: s = \"aba\"\n        Output: true\n        Example 2:\n        Input: s = \"abca\"\n        Output: true\n        Explanation: You could delete the character 'c'.\n        Example 3:\n        Input: s = \"abc\"\n        Output: false\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        if s == s[::-1]:\n            return True\n        else:\n            i = 0\n            j = len(s) - 1\n            while i < j:\n                if s[i] == s[j]:\n                    i += 1\n                    j -= 1\n                else:\n                    return s[i:j] == s[i:j][::-1] or s[i+1:j+1] == s[i+1:j+1][::-1]\n            return False"
    },
    {
        "number": 682,
        "title": "Baseball Game",
        "difficulty": 0,
        "prompt": "class Solution:\n    def calPoints(self, operations: List[str]) -> int:\n        \"\"\"\n        You are keeping the scores for a baseball game with strange rules. At the beginning of the game, you start with an empty record.\n        You are given a list of strings operations, where operations[i] is the ith operation you must apply to the record and is one of the following:\n            An integer x.\n                Record a new score of x.\n            '+'.\n                Record a new score that is the sum of the previous two scores.\n            'D'.\n                Record a new score that is the double of the previous score.\n            'C'.\n                Invalidate the previous score, removing it from the record.\n        Return the sum of all the scores on the record after applying all the operations.\n        The test cases are generated such that the answer and all intermediate calculations fit in a 32-bit integer and that all operations are valid.\n        Example 1:\n        Input: ops = [\"5\",\"2\",\"C\",\"D\",\"+\"]\n        Output: 30\n        Explanation:\n        \"5\" - Add 5 to the record, record is now [5].\n        \"2\" - Add 2 to the record, record is now [5, 2].\n        \"C\" - Invalidate and remove the previous score, record is now [5].\n        \"D\" - Add 2 * 5 = 10 to the record, record is now [5, 10].\n        \"+\" - Add 5 + 10 = 15 to the record, record is now [5, 10, 15].\n        The total sum is 5 + 10 + 15 = 30.\n        Example 2:\n        Input: ops = [\"5\",\"-2\",\"4\",\"C\",\"D\",\"9\",\"+\",\"+\"]\n        Output: 27\n        Explanation:\n        \"5\" - Add 5 to the record, record is now [5].\n        \"-2\" - Add -2 to the record, record is now [5, -2].\n        \"4\" - Add 4 to the record, record is now [5, -2, 4].\n        \"C\" - Invalidate and remove the previous score, record is now [5, -2].\n        \"D\" - Add 2 * -2 = -4 to the record, record is now [5, -2, -4].\n        \"9\" - Add 9 to the record, record is now [5, -2, -4, 9].\n        \"+\" - Add -4 + 9 = 5 to the record, record is now [5, -2, -4, 9, 5].\n        \"+\" - Add 9 + 5 = 14 to the record, record is now [5, -2, -4, 9, 5, 14].\n        The total sum is 5 + -2 + -4 + 9 + 5 + 14 = 27.\n        Example 3:\n        Input: ops = [\"1\",\"C\"]\n        Output: 0\n        Explanation:\n        \"1\" - Add 1 to the record, record is now [1].\n        \"C\" - Invalidate and remove the previous score, record is now [].\n        Since the record is empty, the total sum is 0.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        stack = []\n        for op in operations:\n            if op == '+':\n                stack.append(stack[-1] + stack[-2])\n            elif op == 'D':\n                stack.append(stack[-1] * 2)\n            elif op == 'C':\n                stack.pop()\n            else:\n                stack.append(int(op))\n        return sum(stack)"
    },
    {
        "number": 684,
        "title": "Redundant Connection",
        "difficulty": 1,
        "prompt": "class Solution:\n    def findRedundantConnection(self, edges: List[List[int]]) -> List[int]:\n        \"\"\"\n        In this problem, a tree is an undirected graph that is connected and has no cycles.\n        You are given a graph that started as a tree with n nodes labeled from 1 to n, with one additional edge added. The added edge has two different vertices chosen from 1 to n, and was not an edge that already existed. The graph is represented as an array edges of length n where edges[i] = [ai, bi] indicates that there is an edge between nodes ai and bi in the graph.\n        Return an edge that can be removed so that the resulting graph is a tree of n nodes. If there are multiple answers, return the answer that occurs last in the input.\n        Example 1:\n        Input: edges = [[1,2],[1,3],[2,3]]\n        Output: [2,3]\n        Example 2:\n        Input: edges = [[1,2],[2,3],[3,4],[1,4],[1,5]]\n        Output: [1,4]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        # union find\n        # time complexity O(n)\n        # space complexity O(n)\n        parent = [i for i in range(len(edges)+1)]\n        def find(x):\n            if x!= parent[x]:\n                parent[x] = find(parent[x])\n            return parent[x]\n        def union(x, y):\n            parent[find(x)] = find(y)\n        for edge in edges:\n            if find(edge[0]) == find(edge[1]):\n                return edge\n            else:\n                union(edge[0], edge[1])\n<|endoftext|>"
    },
    {
        "number": 685,
        "title": "Redundant Connection II",
        "difficulty": 2,
        "prompt": "class Solution:\n    def findRedundantDirectedConnection(self, edges: List[List[int]]) -> List[int]:\n        \"\"\"\n        In this problem, a rooted tree is a directed graph such that, there is exactly one node (the root) for which all other nodes are descendants of this node, plus every node has exactly one parent, except for the root node which has no parents.\n        The given input is a directed graph that started as a rooted tree with n nodes (with distinct values from 1 to n), with one additional directed edge added. The added edge has two different vertices chosen from 1 to n, and was not an edge that already existed.\n        The resulting graph is given as a 2D-array of edges. Each element of edges is a pair [ui, vi] that represents a directed edge connecting nodes ui and vi, where ui is a parent of child vi.\n        Return an edge that can be removed so that the resulting graph is a rooted tree of n nodes. If there are multiple answers, return the answer that occurs last in the given 2D-array.\n        Example 1:\n        Input: edges = [[1,2],[1,3],[2,3]]\n        Output: [2,3]\n        Example 2:\n        Input: edges = [[1,2],[2,3],[3,4],[4,1],[1,5]]\n        Output: [4,1]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        # Step 1: build the graph\n        graph = collections.defaultdict(list)\n        for u, v in edges:\n            graph[u].append(v)\n            graph[v].append(u)\n        \n        # Step 2: find the node with two parents\n        for u, v in edges:\n            if len(graph[u]) > 1:\n                return [u, v]\n        \n        # Step 3: find the node with two children\n        for u, v in edges:\n            if len(graph[v]) > 1:\n                return [u, v]\n        \n        # Step 4: find the node with no children\n        for u, v in edges:\n            if len(graph[v]) == 1:\n                return [u, v]\n        \n        # Step 5: find the node with no parents\n        for u, v in edges:\n            if len(graph[u]) == 1:\n                return [u, v]\n        \n        # Step 6: find the node with no parents and no children\n        for u, v in edges:\n            if len(graph[u]) == 1 and len(graph[v]) == 1:\n                return [u, v]\n        \n        # Step 7: find the node with no parents and only one child\n        for u, v in"
    },
    {
        "number": 686,
        "title": "Repeated String Match",
        "difficulty": 1,
        "prompt": "class Solution:\n    def repeatedStringMatch(self, a: str, b: str) -> int:\n        \"\"\"\n        Given two strings a and b, return the minimum number of times you should repeat string a so that string b is a substring of it. If it is impossible for b\u200b\u200b\u200b\u200b\u200b\u200b to be a substring of a after repeating it, return -1.\n        Notice: string \"abc\" repeated 0 times is \"\", repeated 1 time is \"abc\" and repeated 2 times is \"abcabc\".\n        Example 1:\n        Input: a = \"abcd\", b = \"cdabcdab\"\n        Output: 3\n        Explanation: We return 3 because by repeating a three times \"abcdabcdabcd\", b is a substring of it.\n        Example 2:\n        Input: a = \"a\", b = \"aa\"\n        Output: 2\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        if len(a) == 1:\n            return 1 if a == b else -1\n        if len(b) < len(a):\n            return -1\n        if len(b) % len(a) == 0:\n            return len(b) // len(a)\n        if a == b:\n            return 1\n        if a in b:\n            return 1\n        if b in a:\n            return 1\n        if a[:len(b) // 2] == b[:len(b) // 2]:\n            return 2\n        if a[:len(b) // 2] == b[len(b) // 2:]:\n            return 2\n        if a[len(b) // 2:] == b[:len(b) // 2]:\n            return 2\n        if a[len(b) // 2:] == b[len(b) // 2:]:\n            return 2\n        return -1"
    },
    {
        "number": 687,
        "title": "Longest Univalue Path",
        "difficulty": 1,
        "prompt": "class Solution:\n    def longestUnivaluePath(self, root: Optional[TreeNode]) -> int:\n        \"\"\"\n        Given the root of a binary tree, return the length of the longest path, where each node in the path has the same value. This path may or may not pass through the root.\n        The length of the path between two nodes is represented by the number of edges between them.\n        Example 1:\n        Input: root = [5,4,5,1,1,null,5]\n        Output: 2\n        Explanation: The shown image shows that the longest path of the same value (i.e. 5).\n        Example 2:\n        Input: root = [1,4,5,4,4,null,5]\n        Output: 2\n        Explanation: The shown image shows that the longest path of the same value (i.e. 4).\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        self.max_length = 0\n        self.dfs(root)\n        return self.max_length\n    \n    def dfs(self, root):\n        if not root:\n            return 0\n        left = self.dfs(root.left)\n        right = self.dfs(root.right)\n        left_arrow = right_arrow = 0\n        if root.left and root.left.val == root.val:\n            left_arrow = left + 1\n        if root.right and root.right.val == root.val:\n            right_arrow = right + 1\n        self.max_length = max(self.max_length, left_arrow + right_arrow)\n        return max(left_arrow, right_arrow)\n<|endoftext|>"
    },
    {
        "number": 688,
        "title": "Knight Probability in Chessboard",
        "difficulty": 1,
        "prompt": "class Solution:\n    def knightProbability(self, n: int, k: int, row: int, column: int) -> float:\n        \"\"\"\n        On an n x n chessboard, a knight starts at the cell (row, column) and attempts to make exactly k moves. The rows and columns are 0-indexed, so the top-left cell is (0, 0), and the bottom-right cell is (n - 1, n - 1).\n        A chess knight has eight possible moves it can make, as illustrated below. Each move is two cells in a cardinal direction, then one cell in an orthogonal direction.\n        Each time the knight is to move, it chooses one of eight possible moves uniformly at random (even if the piece would go off the chessboard) and moves there.\n        The knight continues moving until it has made exactly k moves or has moved off the chessboard.\n        Return the probability that the knight remains on the board after it has stopped moving.\n        Example 1:\n        Input: n = 3, k = 2, row = 0, column = 0\n        Output: 0.06250\n        Explanation: There are two moves (to (1,2), (2,1)) that will keep the knight on the board.\n        From each of those positions, there are also two moves that will keep the knight on the board.\n        The total probability the knight stays on the board is 0.0625.\n        Example 2:\n        Input: n = 1, k = 0, row = 0, column = 0\n        Output: 1.00000\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        # dp[i][j][k] = the probability that the knight stays on the board after k moves from (i, j)\n        # dp[i][j][k] = dp[i-1][j-2][k-1] + dp[i-2][j-1][k-1] + dp[i-2][j+1][k-1] + dp[i-2][j+2][k-1] + dp[i-1][j+2][k-1] + dp[i+1][j+2][k-1] + dp[i+2][j+1][k-1] + dp[i+2][j-1][k-1] + dp[i+1][j-2][k-1]\n        # dp[i][j][k] = dp[i][j][k-1] + dp[i][j][k-1] + dp[i][j][k-1] + dp[i][j][k-1] + dp[i][j][k-1] + dp[i][j][k-1] + dp[i][j][k-1] + dp[i][j][k-1] + dp[i]["
    },
    {
        "number": 689,
        "title": "Maximum Sum of 3 Non-Overlapping Subarrays",
        "difficulty": 2,
        "prompt": "class Solution:\n    def maxSumOfThreeSubarrays(self, nums: List[int], k: int) -> List[int]:\n        \"\"\"\n        Given an integer array nums and an integer k, find three non-overlapping subarrays of length k with maximum sum and return them.\n        Return the result as a list of indices representing the starting position of each interval (0-indexed). If there are multiple answers, return the lexicographically smallest one.\n        Example 1:\n        Input: nums = [1,2,1,2,6,7,5,1], k = 2\n        Output: [0,3,5]\n        Explanation: Subarrays [1, 2], [2, 6], [7, 5] correspond to the starting indices [0, 3, 5].\n        We could have also taken [2, 1], but an answer of [1, 3, 5] would be lexicographically larger.\n        Example 2:\n        Input: nums = [1,2,1,2,1,2,1,2,1], k = 2\n        Output: [0,2,4]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        n = len(nums)\n        if n < k:\n            return []\n        \n        # prefix sum\n        ps = [0] * n\n        ps[0] = nums[0]\n        for i in range(1, n):\n            ps[i] = ps[i-1] + nums[i]\n        \n        # max sum of k-subarray\n        # max_sum[i][j] = max(sum(nums[i:j+1]) - ps[j+1] + ps[i-1])\n        # max_sum[i][j] = max(sum(nums[i:j+1]) - ps[j+1] + ps[i-1], max_sum[i][j-1])\n        # max_sum[i][j] = max(max_sum[i][j-1], max_sum[i-1][j])\n        # max_sum[i][j] = max(max_sum[i][j-1], max_sum[i-1][j], max_sum[i-1][j-1])\n        max_sum = [[0] * n for _ in range(n)]\n        for i in range(n):\n            for j in range(i, n):\n                max_sum"
    },
    {
        "number": 690,
        "title": "Employee Importance",
        "difficulty": 1,
        "prompt": "\n        \"\"\"\nclass Employee:\n    def __init__(self, id: int, importance: int, subordinates: List[int]):\n        self.id = id\n        self.importance = importance\n        self.subordinates = subordinates\n        You have a data structure of employee information, including the employee's unique ID, importance value, and direct subordinates' IDs.\n        You are given an array of employees employees where:\n            employees[i].id is the ID of the ith employee.\n            employees[i].importance is the importance value of the ith employee.\n            employees[i].subordinates is a list of the IDs of the direct subordinates of the ith employee.\n        Given an integer id that represents an employee's ID, return the total importance value of this employee and all their direct and indirect subordinates.\n        Example 1:\n        Input: employees = [[1,5,[2,3]],[2,3,[]],[3,3,[]]], id = 1\n        Output: 11\n        Explanation: Employee 1 has an importance value of 5 and has two direct subordinates: employee 2 and employee 3.\n        They both have an importance value of 3.\n        Thus, the total importance value of employee 1 is 5 + 3 + 3 = 11.\n        Example 2:\n        Input: employees = [[1,2,[5]],[5,-3,[]]], id = 5\n        Output: -3\n        Explanation: Employee 5 has an importance value of -3 and has no direct subordinates.\n        Thus, the total importance value of employee 5 is -3.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "<|endoftext|>"
    },
    {
        "number": 691,
        "title": "Stickers to Spell Word",
        "difficulty": 2,
        "prompt": "class Solution:\n    def minStickers(self, stickers: List[str], target: str) -> int:\n        \"\"\"\n        We are given n different types of stickers. Each sticker has a lowercase English word on it.\n        You would like to spell out the given string target by cutting individual letters from your collection of stickers and rearranging them. You can use each sticker more than once if you want, and you have infinite quantities of each sticker.\n        Return the minimum number of stickers that you need to spell out target. If the task is impossible, return -1.\n        Note: In all test cases, all words were chosen randomly from the 1000 most common US English words, and target was chosen as a concatenation of two random words.\n        Example 1:\n        Input: stickers = [\"with\",\"example\",\"science\"], target = \"thehat\"\n        Output: 3\n        Explanation:\n        We can use 2 \"with\" stickers, and 1 \"example\" sticker.\n        After cutting and rearrange the letters of those stickers, we can form the target \"thehat\".\n        Also, this is the minimum number of stickers necessary to form the target string.\n        Example 2:\n        Input: stickers = [\"notice\",\"possible\"], target = \"basicbasic\"\n        Output: -1\n        Explanation:\n        We cannot form the target \"basicbasic\" from cutting letters from the given stickers.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        # dp[i][j] = minimum stickers needed to form target[:i]\n        # dp[i][j] = min(dp[i][j], dp[i - len(stickers[k])][j - set(stickers[k])] + 1)\n        # dp[i][j] = min(dp[i][j], dp[i][j - set(stickers[k])] + 1)\n        # dp[i][j] = min(dp[i][j], dp[i][j - set(stickers[k])] + 1)\n        # dp[i][j] = min(dp[i][j], dp[i][j - set(stickers[k])] + 1)\n        # dp[i][j] = min(dp[i][j], dp[i][j - set(stickers[k])] + 1)\n        # dp[i][j] = min(dp[i][j], dp[i][j - set(stickers[k])] + 1)\n        # dp[i][j] = min(dp[i][j], dp[i][j - set(stickers[k])] + 1)\n        # dp[i][j] = min("
    },
    {
        "number": 692,
        "title": "Top K Frequent Words",
        "difficulty": 1,
        "prompt": "class Solution:\n    def topKFrequent(self, words: List[str], k: int) -> List[str]:\n        \"\"\"\n        Given an array of strings words and an integer k, return the k most frequent strings.\n        Return the answer sorted by the frequency from highest to lowest. Sort the words with the same frequency by their lexicographical order.\n        Example 1:\n        Input: words = [\"i\",\"love\",\"leetcode\",\"i\",\"love\",\"coding\"], k = 2\n        Output: [\"i\",\"love\"]\n        Explanation: \"i\" and \"love\" are the two most frequent words.\n        Note that \"i\" comes before \"love\" due to a lower alphabetical order.\n        Example 2:\n        Input: words = [\"the\",\"day\",\"is\",\"sunny\",\"the\",\"the\",\"the\",\"sunny\",\"is\",\"is\"], k = 4\n        Output: [\"the\",\"is\",\"sunny\",\"day\"]\n        Explanation: \"the\", \"is\", \"sunny\" and \"day\" are the four most frequent words, with the number of occurrence being 4, 3, 2 and 1 respectively.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        # 1. Sort the words by frequency\n        # 2. Sort the words by alphabetical order\n        # 3. Return the first k words\n        \n        # 1. Sort the words by frequency\n        # O(n log n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n log n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n log n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n log n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n log n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n log n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n log n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n log n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n log n)\n"
    },
    {
        "number": 693,
        "title": "Binary Number with Alternating Bits",
        "difficulty": 0,
        "prompt": "class Solution:\n    def hasAlternatingBits(self, n: int) -> bool:\n        \"\"\"\n        Given a positive integer, check whether it has alternating bits: namely, if two adjacent bits will always have different values.\n        Example 1:\n        Input: n = 5\n        Output: true\n        Explanation: The binary representation of 5 is: 101\n        Example 2:\n        Input: n = 7\n        Output: false\n        Explanation: The binary representation of 7 is: 111.\n        Example 3:\n        Input: n = 11\n        Output: false\n        Explanation: The binary representation of 11 is: 1011.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        return bin(n).count('10') == bin(n).count('01')"
    },
    {
        "number": 695,
        "title": "Max Area of Island",
        "difficulty": 1,
        "prompt": "class Solution:\n    def maxAreaOfIsland(self, grid: List[List[int]]) -> int:\n        \"\"\"\n        You are given an m x n binary matrix grid. An island is a group of 1's (representing land) connected 4-directionally (horizontal or vertical.) You may assume all four edges of the grid are surrounded by water.\n        The area of an island is the number of cells with a value 1 in the island.\n        Return the maximum area of an island in grid. If there is no island, return 0.\n        Example 1:\n        Input: grid = [[0,0,1,0,0,0,0,1,0,0,0,0,0],[0,0,0,0,0,0,0,1,1,1,0,0,0],[0,1,1,0,1,0,0,0,0,0,0,0,0],[0,1,0,0,1,1,0,0,1,0,1,0,0],[0,1,0,0,1,1,0,0,1,1,1,0,0],[0,0,0,0,0,0,0,0,0,0,1,0,0],[0,0,0,0,0,0,0,1,1,1,0,0,0],[0,0,0,0,0,0,0,1,1,0,0,0,0]]\n        Output: 6\n        Explanation: The answer is not 11, because the island must be connected 4-directionally.\n        Example 2:\n        Input: grid = [[0,0,0,0,0,0,0,0]]\n        Output: 0\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        if not grid:\n            return 0\n        \n        m, n = len(grid), len(grid[0])\n        \n        def dfs(i, j):\n            if 0 <= i < m and 0 <= j < n and grid[i][j] == 1:\n                grid[i][j] = 0\n                return 1 + dfs(i+1, j) + dfs(i-1, j) + dfs(i, j+1) + dfs(i, j-1)\n            return 0\n        \n        res = 0\n        for i in range(m):\n            for j in range(n):\n                if grid[i][j] == 1:\n                    res = max(res, dfs(i, j))\n        return res\n    \n    def maxAreaOfIsland_2(self, grid: List[List[int]]) -> int:\n        \"\"\"\n        You are given an m x n binary matrix grid. An island is a group of 1's (representing land) connected 4-directionally (horizontal or vertical.) You may assume all four edges of the grid are surrounded by water.\n        The area of an island is the number of cells with a value 1 in the island.\n        Return the maximum area of an island in grid. If there is no island, return 0.\n"
    },
    {
        "number": 696,
        "title": "Count Binary Substrings",
        "difficulty": 0,
        "prompt": "class Solution:\n    def countBinarySubstrings(self, s: str) -> int:\n        \"\"\"\n        Given a binary string s, return the number of non-empty substrings that have the same number of 0's and 1's, and all the 0's and all the 1's in these substrings are grouped consecutively.\n        Substrings that occur multiple times are counted the number of times they occur.\n        Example 1:\n        Input: s = \"00110011\"\n        Output: 6\n        Explanation: There are 6 substrings that have equal number of consecutive 1's and 0's: \"0011\", \"01\", \"1100\", \"10\", \"0011\", and \"01\".\n        Notice that some of these substrings repeat and are counted the number of times they occur.\n        Also, \"00110011\" is not a valid substring because all the 0's (and 1's) are not grouped together.\n        Example 2:\n        Input: s = \"10101\"\n        Output: 4\n        Explanation: There are 4 substrings: \"10\", \"01\", \"10\", \"01\" that have equal number of consecutive 1's and 0's.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        # Solution 1:\n        # Time complexity: O(n)\n        # Space complexity: O(1)\n        # count = 0\n        # prev = None\n        # for c in s:\n        #     if c == prev:\n        #         count += 1\n        #     else:\n        #         count = 1\n        #     prev = c\n        #     if count == len(s) // 2:\n        #         return count\n        # return count"
    },
    {
        "number": 697,
        "title": "Degree of an Array",
        "difficulty": 0,
        "prompt": "class Solution:\n    def findShortestSubArray(self, nums: List[int]) -> int:\n        \"\"\"\n        Given a non-empty array of non-negative integers nums, the degree of this array is defined as the maximum frequency of any one of its elements.\n        Your task is to find the smallest possible length of a (contiguous) subarray of nums, that has the same degree as nums.\n        Example 1:\n        Input: nums = [1,2,2,3,1]\n        Output: 2\n        Explanation: \n        The input array has a degree of 2 because both elements 1 and 2 appear twice.\n        Of the subarrays that have the same degree:\n        [1, 2, 2, 3, 1], [1, 2, 2, 3], [2, 2, 3, 1], [1, 2, 2], [2, 2, 3], [2, 2]\n        The shortest length is 2. So return 2.\n        Example 2:\n        Input: nums = [1,2,2,3,1,4,2]\n        Output: 6\n        Explanation: \n        The degree is 3 because the element 2 is repeated 3 times.\n        So [2,2,3,1,4,2] is the shortest subarray, therefore returning 6.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        # 1. \u627e\u51fa\u6240\u6709\u51fa\u73b0\u6b21\u6570\u6700\u591a\u7684\u5143\u7d20\n        # 2. \u627e\u51fa\u6240\u6709\u51fa\u73b0\u6b21\u6570\u6700\u591a\u7684\u5143\u7d20\u7684\u4e0b\u6807\n        # 3. \u627e\u51fa\u6240\u6709\u51fa\u73b0\u6b21\u6570\u6700\u591a\u7684\u5143\u7d20\u7684\u4e0b\u6807\u7684\u6700\u5c0f\u503c\u548c\u6700\u5927\u503c\n        # 4. \u627e\u51fa\u6240\u6709\u51fa\u73b0\u6b21\u6570\u6700\u591a\u7684\u5143\u7d20\u7684\u4e0b\u6807\u7684\u6700\u5c0f\u503c\u548c\u6700\u5927\u503c\u7684\u5dee\u503c\n        # 5. \u627e\u51fa\u6240\u6709\u51fa\u73b0\u6b21\u6570\u6700\u591a\u7684\u5143\u7d20\u7684\u4e0b\u6807\u7684\u6700\u5c0f\u503c\u548c\u6700\u5927\u503c\u7684\u5dee\u503c\u7684\u6700\u5c0f\u503c\n        # 6. \u627e\u51fa\u6240\u6709\u51fa\u73b0\u6b21\u6570\u6700\u591a\u7684\u5143\u7d20\u7684\u4e0b\u6807\u7684"
    },
    {
        "number": 698,
        "title": "Partition to K Equal Sum Subsets",
        "difficulty": 1,
        "prompt": "class Solution:\n    def canPartitionKSubsets(self, nums: List[int], k: int) -> bool:\n        \"\"\"\n        Given an integer array nums and an integer k, return true if it is possible to divide this array into k non-empty subsets whose sums are all equal.\n        Example 1:\n        Input: nums = [4,3,2,3,5,2,1], k = 4\n        Output: true\n        Explanation: It is possible to divide it into 4 subsets (5), (1, 4), (2,3), (2,3) with equal sums.\n        Example 2:\n        Input: nums = [1,2,3,4], k = 3\n        Output: false\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        if len(nums) < k:\n            return False\n        if sum(nums) % k!= 0:\n            return False\n        target = sum(nums) // k\n        nums.sort(reverse=True)\n        if nums[0] > target:\n            return False\n        return self.dfs(nums, k, 0, 0, target)"
    },
    {
        "number": 699,
        "title": "Falling Squares",
        "difficulty": 2,
        "prompt": "class Solution:\n    def fallingSquares(self, positions: List[List[int]]) -> List[int]:\n        \"\"\"\n        There are several squares being dropped onto the X-axis of a 2D plane.\n        You are given a 2D integer array positions where positions[i] = [lefti, sideLengthi] represents the ith square with a side length of sideLengthi that is dropped with its left edge aligned with X-coordinate lefti.\n        Each square is dropped one at a time from a height above any landed squares. It then falls downward (negative Y direction) until it either lands on the top side of another square or on the X-axis. A square brushing the left/right side of another square does not count as landing on it. Once it lands, it freezes in place and cannot be moved.\n        After each square is dropped, you must record the height of the current tallest stack of squares.\n        Return an integer array ans where ans[i] represents the height described above after dropping the ith square.\n        Example 1:\n        Input: positions = [[1,2],[2,3],[6,1]]\n        Output: [2,5,5]\n        Explanation:\n        After the first drop, the tallest stack is square 1 with a height of 2.\n        After the second drop, the tallest stack is squares 1 and 2 with a height of 5.\n        After the third drop, the tallest stack is still squares 1 and 2 with a height of 5.\n        Thus, we return an answer of [2, 5, 5].\n        Example 2:\n        Input: positions = [[100,100],[200,100]]\n        Output: [100,100]\n        Explanation:\n        After the first drop, the tallest stack is square 1 with a height of 100.\n        After the second drop, the tallest stack is either square 1 or square 2, both with heights of 100.\n        Thus, we return an answer of [100, 100].\n        Note that square 2 only brushes the right side of square 1, which does not count as landing on it.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        # Time complexity: O(n^2)\n        # Space complexity: O(n)\n        # n = len(positions)\n        # ans = [0] * n\n        # for i in range(n):\n        #     left, side = positions[i]\n        #     for j in range(i, -1, -1):\n        #         right = positions[j][0]\n        #         if left <= right:\n        #             break\n        #     ans[i] = max(ans[i], side)\n        #     for j in range(i, -1, -1):\n        #         right = positions[j][0]\n        #         if right < left:\n        #             break\n        #         side = min(side, positions[j][1])\n        #         ans[i] = max(ans[i], side)\n        # return ans"
    },
    {
        "number": 700,
        "title": "Search in a Binary Search Tree",
        "difficulty": 0,
        "prompt": "class Solution:\n    def searchBST(self, root: Optional[TreeNode], val: int) -> Optional[TreeNode]:\n        \"\"\"\n        You are given the root of a binary search tree (BST) and an integer val.\n        Find the node in the BST that the node's value equals val and return the subtree rooted with that node. If such a node does not exist, return null.\n        Example 1:\n        Input: root = [4,2,7,1,3], val = 2\n        Output: [2,1,3]\n        Example 2:\n        Input: root = [4,2,7,1,3], val = 5\n        Output: []\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        if not root:\n            return None\n        if root.val == val:\n            return root\n        elif root.val > val:\n            return self.searchBST(root.left, val)\n        else:\n            return self.searchBST(root.right, val)\n<|endoftext|>"
    },
    {
        "number": 701,
        "title": "Insert into a Binary Search Tree",
        "difficulty": 1,
        "prompt": "class Solution:\n    def insertIntoBST(self, root: Optional[TreeNode], val: int) -> Optional[TreeNode]:\n        \"\"\"\n        You are given the root node of a binary search tree (BST) and a value to insert into the tree. Return the root node of the BST after the insertion. It is guaranteed that the new value does not exist in the original BST.\n        Notice that there may exist multiple valid ways for the insertion, as long as the tree remains a BST after insertion. You can return any of them.\n        Example 1:\n        Input: root = [4,2,7,1,3], val = 5\n        Output: [4,2,7,1,3,5]\n        Explanation: Another accepted tree is:\n        Example 2:\n        Input: root = [40,20,60,10,30,50,70], val = 25\n        Output: [40,20,60,10,30,50,70,null,null,25]\n        Example 3:\n        Input: root = [4,2,7,1,3,null,null,null,null,null,null], val = 5\n        Output: [4,2,7,1,3,5]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        if not root:\n            return TreeNode(val)\n        if val < root.val:\n            root.left = self.insertIntoBST(root.left, val)\n        else:\n            root.right = self.insertIntoBST(root.right, val)\n        return root"
    },
    {
        "number": 703,
        "title": "Kth Largest Element in a Stream",
        "difficulty": 0,
        "prompt": "class KthLargest:\n    def __init__(self, k: int, nums: List[int]):\n    def add(self, val: int) -> int:\n        \"\"\"\n        Design a class to find the kth largest element in a stream. Note that it is the kth largest element in the sorted order, not the kth distinct element.\n        Implement KthLargest class:\n            KthLargest(int k, int[] nums) Initializes the object with the integer k and the stream of integers nums.\n            int add(int val) Appends the integer val to the stream and returns the element representing the kth largest element in the stream.\n        Example 1:\n        Input\n        [\"KthLargest\", \"add\", \"add\", \"add\", \"add\", \"add\"]\n        [[3, [4, 5, 8, 2]], [3], [5], [10], [9], [4]]\n        Output\n        [null, 4, 5, 5, 8, 8]\n        Explanation\n        KthLargest kthLargest = new KthLargest(3, [4, 5, 8, 2]);\n        kthLargest.add(3);   // return 4\n        kthLargest.add(5);   // return 5\n        kthLargest.add(10);  // return 5\n        kthLargest.add(9);   // return 8\n        kthLargest.add(4);   // return 8\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        self.k = k\n        self.nums = nums\n        self.nums.sort()\n        self.nums = self.nums[::-1]\n        self.nums = self.nums[:k]\n        self.nums.sort()\n        self.nums = self.nums[::-1]\n        return self.nums[k-1]"
    },
    {
        "number": 704,
        "title": "Binary Search",
        "difficulty": 0,
        "prompt": "class Solution:\n    def search(self, nums: List[int], target: int) -> int:\n        \"\"\"\n        Given an array of integers nums which is sorted in ascending order, and an integer target, write a function to search target in nums. If target exists, then return its index. Otherwise, return -1.\n        You must write an algorithm with O(log n) runtime complexity.\n        Example 1:\n        Input: nums = [-1,0,3,5,9,12], target = 9\n        Output: 4\n        Explanation: 9 exists in nums and its index is 4\n        Example 2:\n        Input: nums = [-1,0,3,5,9,12], target = 2\n        Output: -1\n        Explanation: 2 does not exist in nums so return -1\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        left, right = 0, len(nums) - 1\n        while left <= right:\n            mid = (left + right) // 2\n            if nums[mid] == target:\n                return mid\n            elif nums[mid] < target:\n                left = mid + 1\n            else:\n                right = mid - 1\n        return -1\n<|endoftext|>"
    },
    {
        "number": 705,
        "title": "Design HashSet",
        "difficulty": 0,
        "prompt": "class MyHashSet:\n    def __init__(self):\n    def add(self, key: int) -> None:\n    def remove(self, key: int) -> None:\n    def contains(self, key: int) -> bool:\n        \"\"\"\n        Design a HashSet without using any built-in hash table libraries.\n        Implement MyHashSet class:\n            void add(key) Inserts the value key into the HashSet.\n            bool contains(key) Returns whether the value key exists in the HashSet or not.\n            void remove(key) Removes the value key in the HashSet. If key does not exist in the HashSet, do nothing.\n        Example 1:\n        Input\n        [\"MyHashSet\", \"add\", \"add\", \"contains\", \"contains\", \"add\", \"contains\", \"remove\", \"contains\"]\n        [[], [1], [2], [1], [3], [2], [2], [2], [2]]\n        Output\n        [null, null, null, true, false, null, true, null, false]\n        Explanation\n        MyHashSet myHashSet = new MyHashSet();\n        myHashSet.add(1);      // set = [1]\n        myHashSet.add(2);      // set = [1, 2]\n        myHashSet.contains(1); // return True\n        myHashSet.contains(3); // return False, (not found)\n        myHashSet.add(2);      // set = [1, 2]\n        myHashSet.contains(2); // return True\n        myHashSet.remove(2);   // set = [1]\n        myHashSet.contains(2); // return False, (already removed)\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        \"\"\"\n        Runtime: O(1)\n        Space: O(n)\n        \"\"\"\n        self.set = set()"
    },
    {
        "number": 706,
        "title": "Design HashMap",
        "difficulty": 0,
        "prompt": "class MyHashMap:\n    def __init__(self):\n    def put(self, key: int, value: int) -> None:\n    def get(self, key: int) -> int:\n    def remove(self, key: int) -> None:\n        \"\"\"\n        Design a HashMap without using any built-in hash table libraries.\n        Implement the MyHashMap class:\n            MyHashMap() initializes the object with an empty map.\n            void put(int key, int value) inserts a (key, value) pair into the HashMap. If the key already exists in the map, update the corresponding value.\n            int get(int key) returns the value to which the specified key is mapped, or -1 if this map contains no mapping for the key.\n            void remove(key) removes the key and its corresponding value if the map contains the mapping for the key.\n        Example 1:\n        Input\n        [\"MyHashMap\", \"put\", \"put\", \"get\", \"get\", \"put\", \"get\", \"remove\", \"get\"]\n        [[], [1, 1], [2, 2], [1], [3], [2, 1], [2], [2], [2]]\n        Output\n        [null, null, null, 1, -1, null, 1, null, -1]\n        Explanation\n        MyHashMap myHashMap = new MyHashMap();\n        myHashMap.put(1, 1); // The map is now [[1,1]]\n        myHashMap.put(2, 2); // The map is now [[1,1], [2,2]]\n        myHashMap.get(1);    // return 1, The map is now [[1,1], [2,2]]\n        myHashMap.get(3);    // return -1 (i.e., not found), The map is now [[1,1], [2,2]]\n        myHashMap.put(2, 1); // The map is now [[1,1], [2,1]] (i.e., update the existing value)\n        myHashMap.get(2);    // return 1, The map is now [[1,1], [2,1]]\n        myHashMap.remove(2); // remove the mapping for 2, The map is now [[1,1]]\n        myHashMap.get(2);    // return -1 (i.e., not found), The map is now [[1,1]]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        self.key_list = []\n        self.value_list = []\n        self.key_list.append(key)\n        self.value_list.append(value)\n        self.key_list.sort()\n        self.value_list.sort()\n        self.key_list.reverse()\n        self.value_list.reverse()\n        self.key_list.append(key)\n        self.value_list.append(value)\n        self.key_list.sort()\n        self.value_list.sort()\n        self.key_list.reverse()\n        self.value_list.reverse()\n        self.key_list.append(key)\n        self.value_list.append(value)\n        self.key_list.sort()\n        self.value_list.sort()\n        self.key_list.reverse()\n        self.value_list.reverse()\n        self.key_list.append(key)\n        self.value_list.append(value)\n        self.key_list.sort()\n        self.value_list.sort()\n        self.key_list.reverse()\n        self.value_list.reverse()\n        self.key_list.append(key)\n        self.value_list.append(value)\n        self"
    },
    {
        "number": 707,
        "title": "Design Linked List",
        "difficulty": 1,
        "prompt": "class MyLinkedList:\n    def __init__(self):\n    def get(self, index: int) -> int:\n    def addAtHead(self, val: int) -> None:\n    def addAtTail(self, val: int) -> None:\n    def addAtIndex(self, index: int, val: int) -> None:\n    def deleteAtIndex(self, index: int) -> None:\n        \"\"\"\n        Design your implementation of the linked list. You can choose to use a singly or doubly linked list.\n        A node in a singly linked list should have two attributes: val and next. val is the value of the current node, and next is a pointer/reference to the next node.\n        If you want to use the doubly linked list, you will need one more attribute prev to indicate the previous node in the linked list. Assume all nodes in the linked list are 0-indexed.\n        Implement the MyLinkedList class:\n            MyLinkedList() Initializes the MyLinkedList object.\n            int get(int index) Get the value of the indexth node in the linked list. If the index is invalid, return -1.\n            void addAtHead(int val) Add a node of value val before the first element of the linked list. After the insertion, the new node will be the first node of the linked list.\n            void addAtTail(int val) Append a node of value val as the last element of the linked list.\n            void addAtIndex(int index, int val) Add a node of value val before the indexth node in the linked list. If index equals the length of the linked list, the node will be appended to the end of the linked list. If index is greater than the length, the node will not be inserted.\n            void deleteAtIndex(int index) Delete the indexth node in the linked list, if the index is valid.\n        Example 1:\n        Input\n        [\"MyLinkedList\", \"addAtHead\", \"addAtTail\", \"addAtIndex\", \"get\", \"deleteAtIndex\", \"get\"]\n        [[], [1], [3], [1, 2], [1], [1], [1]]\n        Output\n        [null, null, null, null, 2, null, 3]\n        Explanation\n        MyLinkedList myLinkedList = new MyLinkedList();\n        myLinkedList.addAtHead(1);\n        myLinkedList.addAtTail(3);\n        myLinkedList.addAtIndex(1, 2);    // linked list becomes 1->2->3\n        myLinkedList.get(1);              // return 2\n        myLinkedList.deleteAtIndex(1);    // now the linked list is 1->3\n        myLinkedList.get(1);              // return 3\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        self.head = None\n        self.tail = None\n        self.length = 0\n        self.val = 0\n        self.index = 0\n        self.addAtHead(val)\n        self.addAtTail(val)\n        self.addAtIndex(index, val)\n        self.deleteAtIndex(index)\n        self.get(index)\n        \n    def get(self, index: int) -> int:\n        if index < 0 or index >= self.length:\n            return -1\n        if index < self.index:\n            curr = self.head\n            for i in range(index):\n                curr = curr.next\n            return curr.val\n        else:\n            curr = self.tail\n            for i in range(self.length - index - 1):\n                curr = curr.prev\n            return curr.val\n        \n    def addAtHead(self, val: int) -> None:\n        if self.head is None:\n            self.head = Node(val)\n            self.tail = self.head\n            self.length += 1\n        else:\n            new_node = Node(val, self.head)\n            self.head = new_node\n            self.length += 1\n        \n    def addAtTail"
    },
    {
        "number": 709,
        "title": "To Lower Case",
        "difficulty": 0,
        "prompt": "class Solution:\n    def toLowerCase(self, s: str) -> str:\n        \"\"\"\n        Given a string s, return the string after replacing every uppercase letter with the same lowercase letter.\n        Example 1:\n        Input: s = \"Hello\"\n        Output: \"hello\"\n        Example 2:\n        Input: s = \"here\"\n        Output: \"here\"\n        Example 3:\n        Input: s = \"LOVELY\"\n        Output: \"lovely\"\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        return s.lower()"
    },
    {
        "number": 710,
        "title": "Random Pick with Blacklist",
        "difficulty": 2,
        "prompt": "class Solution:\n    def __init__(self, n: int, blacklist: List[int]):\n    def pick(self) -> int:\n        \"\"\"\n        You are given an integer n and an array of unique integers blacklist. Design an algorithm to pick a random integer in the range [0, n - 1] that is not in blacklist. Any integer that is in the mentioned range and not in blacklist should be equally likely to be returned.\n        Optimize your algorithm such that it minimizes the number of calls to the built-in random function of your language.\n        Implement the Solution class:\n            Solution(int n, int[] blacklist) Initializes the object with the integer n and the blacklisted integers blacklist.\n            int pick() Returns a random integer in the range [0, n - 1] and not in blacklist.\n        Example 1:\n        Input\n        [\"Solution\", \"pick\", \"pick\", \"pick\", \"pick\", \"pick\", \"pick\", \"pick\"]\n        [[7, [2, 3, 5]], [], [], [], [], [], [], []]\n        Output\n        [null, 0, 4, 1, 6, 1, 0, 4]\n        Explanation\n        Solution solution = new Solution(7, [2, 3, 5]);\n        solution.pick(); // return 0, any integer from [0,1,4,6] should be ok. Note that for every call of pick,\n                         // 0, 1, 4, and 6 must be equally likely to be returned (i.e., with probability 1/4).\n        solution.pick(); // return 4\n        solution.pick(); // return 1\n        solution.pick(); // return 6\n        solution.pick(); // return 1\n        solution.pick(); // return 0\n        solution.pick(); // return 4\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        import random\n        import bisect\n        n = self.n\n        blacklist = self.blacklist\n        def helper(n, blacklist):\n            \"\"\"\n            :type n: int\n            :type blacklist: List[int]\n            :rtype: int\n            \"\"\"\n            # random.seed(0)\n            # return random.randint(0, n - 1)\n            # return random.randint(0, n - 1)\n            # return random.randint(0, n - 1)\n            # return random.randint(0, n - 1)\n            # return random.randint(0, n - 1)\n            # return random.randint(0, n - 1)\n            # return random.randint(0, n - 1)\n            # return random.randint(0, n - 1)\n            # return random.randint(0, n - 1)\n            # return random.randint(0, n - 1)\n            # return random.randint(0, n - 1)\n            # return random.randint(0, n - 1)\n            # return random.randint(0, n - 1)\n            # return random.randint(0, n - 1)\n            # return random.randint(0, n - 1)\n            #"
    },
    {
        "number": 712,
        "title": "Minimum ASCII Delete Sum for Two Strings",
        "difficulty": 1,
        "prompt": "class Solution:\n    def minimumDeleteSum(self, s1: str, s2: str) -> int:\n        \"\"\"\n        Given two strings s1 and s2, return the lowest ASCII sum of deleted characters to make two strings equal.\n        Example 1:\n        Input: s1 = \"sea\", s2 = \"eat\"\n        Output: 231\n        Explanation: Deleting \"s\" from \"sea\" adds the ASCII value of \"s\" (115) to the sum.\n        Deleting \"t\" from \"eat\" adds 116 to the sum.\n        At the end, both strings are equal, and 115 + 116 = 231 is the minimum sum possible to achieve this.\n        Example 2:\n        Input: s1 = \"delete\", s2 = \"leet\"\n        Output: 403\n        Explanation: Deleting \"dee\" from \"delete\" to turn the string into \"let\",\n        adds 100[d] + 101[e] + 101[e] to the sum.\n        Deleting \"e\" from \"leet\" adds 101[e] to the sum.\n        At the end, both strings are equal to \"let\", and the answer is 100+101+101+101 = 403.\n        If instead we turned both strings into \"lee\" or \"eet\", we would get answers of 433 or 417, which are higher.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        m, n = len(s1), len(s2)\n        dp = [[0] * (n + 1) for _ in range(m + 1)]\n        for i in range(1, m + 1):\n            dp[i][0] = dp[i - 1][0] + ord(s1[i - 1])\n        for j in range(1, n + 1):\n            dp[0][j] = dp[0][j - 1] + ord(s2[j - 1])\n        for i in range(1, m + 1):\n            for j in range(1, n + 1):\n                if s1[i - 1] == s2[j - 1]:\n                    dp[i][j] = dp[i - 1][j - 1]\n                else:\n                    dp[i][j] = min(dp[i - 1][j] + ord(s1[i - 1]), dp[i][j - 1] + ord(s2[j - 1]))\n        return dp[m][n]"
    },
    {
        "number": 713,
        "title": "Subarray Product Less Than K",
        "difficulty": 1,
        "prompt": "class Solution:\n    def numSubarrayProductLessThanK(self, nums: List[int], k: int) -> int:\n        \"\"\"\n        Given an array of integers nums and an integer k, return the number of contiguous subarrays where the product of all the elements in the subarray is strictly less than k.\n        Example 1:\n        Input: nums = [10,5,2,6], k = 100\n        Output: 8\n        Explanation: The 8 subarrays that have product less than 100 are:\n        [10], [5], [2], [6], [10, 5], [5, 2], [2, 6], [5, 2, 6]\n        Note that [10, 5, 2] is not included as the product of 100 is not strictly less than k.\n        Example 2:\n        Input: nums = [1,2,3], k = 0\n        Output: 0\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        if k <= 1:\n            return 0\n        prod = 1\n        ans = left = 0\n        for right, val in enumerate(nums):\n            prod *= val\n            while prod >= k:\n                prod /= nums[left]\n                left += 1\n            ans += right - left + 1\n        return ans"
    },
    {
        "number": 714,
        "title": "Best Time to Buy and Sell Stock with Transaction Fee",
        "difficulty": 1,
        "prompt": "class Solution:\n    def maxProfit(self, prices: List[int], fee: int) -> int:\n        \"\"\"\n        You are given an array prices where prices[i] is the price of a given stock on the ith day, and an integer fee representing a transaction fee.\n        Find the maximum profit you can achieve. You may complete as many transactions as you like, but you need to pay the transaction fee for each transaction.\n        Note: You may not engage in multiple transactions simultaneously (i.e., you must sell the stock before you buy again).\n        Example 1:\n        Input: prices = [1,3,2,8,4,9], fee = 2\n        Output: 8\n        Explanation: The maximum profit can be achieved by:\n        - Buying at prices[0] = 1\n        - Selling at prices[3] = 8\n        - Buying at prices[4] = 4\n        - Selling at prices[5] = 9\n        The total profit is ((8 - 1) - 2) + ((9 - 4) - 2) = 8.\n        Example 2:\n        Input: prices = [1,3,7,5,10,3], fee = 3\n        Output: 6\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        # dp[i][j] = max(dp[i-1][j], dp[i-1][j-1] + prices[i] - fee)\n        # dp[i][j] = max(dp[i-1][j], dp[i-1][j-1] + prices[i] - fee)\n        # dp[i][j] = max(dp[i-1][j], dp[i-1][j-1] + prices[i] - fee)\n        # dp[i][j] = max(dp[i-1][j], dp[i-1][j-1] + prices[i] - fee)\n        # dp[i][j] = max(dp[i-1][j], dp[i-1][j-1] + prices[i] - fee)\n        # dp[i][j] = max(dp[i-1][j], dp[i-1][j-1] + prices[i] - fee)\n        # dp[i][j] = max(dp[i-1][j], dp[i-1][j-1] + prices[i] - fee)\n        # dp[i][j] = max(dp[i-1][j],"
    },
    {
        "number": 715,
        "title": "Range Module",
        "difficulty": 2,
        "prompt": "class RangeModule:\n    def __init__(self):\n    def addRange(self, left: int, right: int) -> None:\n    def queryRange(self, left: int, right: int) -> bool:\n    def removeRange(self, left: int, right: int) -> None:\n        \"\"\"\n        A Range Module is a module that tracks ranges of numbers. Design a data structure to track the ranges represented as half-open intervals and query about them.\n        A half-open interval [left, right) denotes all the real numbers x where left <= x < right.\n        Implement the RangeModule class:\n            RangeModule() Initializes the object of the data structure.\n            void addRange(int left, int right) Adds the half-open interval [left, right), tracking every real number in that interval. Adding an interval that partially overlaps with currently tracked numbers should add any numbers in the interval [left, right) that are not already tracked.\n            boolean queryRange(int left, int right) Returns true if every real number in the interval [left, right) is currently being tracked, and false otherwise.\n            void removeRange(int left, int right) Stops tracking every real number currently being tracked in the half-open interval [left, right).\n        Example 1:\n        Input\n        [\"RangeModule\", \"addRange\", \"removeRange\", \"queryRange\", \"queryRange\", \"queryRange\"]\n        [[], [10, 20], [14, 16], [10, 14], [13, 15], [16, 17]]\n        Output\n        [null, null, null, true, false, true]\n        Explanation\n        RangeModule rangeModule = new RangeModule();\n        rangeModule.addRange(10, 20);\n        rangeModule.removeRange(14, 16);\n        rangeModule.queryRange(10, 14); // return True,(Every number in [10, 14) is being tracked)\n        rangeModule.queryRange(13, 15); // return False,(Numbers like 14, 14.03, 14.17 in [13, 15) are not being tracked)\n        rangeModule.queryRange(16, 17); // return True, (The number 16 in [16, 17) is still being tracked, despite the remove operation)\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        self.ranges = []\n        self.ranges.append((left, right))\n        self.ranges.sort()"
    },
    {
        "number": 717,
        "title": "1-bit and 2-bit Characters",
        "difficulty": 0,
        "prompt": "class Solution:\n    def isOneBitCharacter(self, bits: List[int]) -> bool:\n        \"\"\"\n        We have two special characters:\n            The first character can be represented by one bit 0.\n            The second character can be represented by two bits (10 or 11).\n        Given a binary array bits that ends with 0, return true if the last character must be a one-bit character.\n        Example 1:\n        Input: bits = [1,0,0]\n        Output: true\n        Explanation: The only way to decode it is two-bit character and one-bit character.\n        So the last character is one-bit character.\n        Example 2:\n        Input: bits = [1,1,1,0]\n        Output: false\n        Explanation: The only way to decode it is two-bit character and two-bit character.\n        So the last character is not one-bit character.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        # if len(bits) == 1:\n        #     return True\n        # if len(bits) == 2:\n        #     return False\n        # if bits[-1] == 0:\n        #     return True\n        # if bits[-1] == 1:\n        #     if bits[-2] == 0:\n        #         return True\n        #     if bits[-2] == 1:\n        #         return False\n        # return False\n        \n        # if len(bits) == 1:\n        #     return True\n        # if len(bits) == 2:\n        #     return False\n        # if bits[-1] == 0:\n        #     return True\n        # if bits[-1] == 1:\n        #     if bits[-2] == 0:\n        #         return True\n        #     if bits[-2] == 1:\n        #         return False\n        # return False\n        \n        # if len(bits) == 1:\n        #     return True\n        # if len(bits) == 2:\n        #     return False\n        # if bits[-1] == 0:\n        #     return True\n        # if bits[-1] == 1:\n        #     if bits[-2] == 0:\n        #         return True"
    },
    {
        "number": 718,
        "title": "Maximum Length of Repeated Subarray",
        "difficulty": 1,
        "prompt": "class Solution:\n    def findLength(self, nums1: List[int], nums2: List[int]) -> int:\n        \"\"\"\n        Given two integer arrays nums1 and nums2, return the maximum length of a subarray that appears in both arrays.\n        Example 1:\n        Input: nums1 = [1,2,3,2,1], nums2 = [3,2,1,4,7]\n        Output: 3\n        Explanation: The repeated subarray with maximum length is [3,2,1].\n        Example 2:\n        Input: nums1 = [0,0,0,0,0], nums2 = [0,0,0,0,0]\n        Output: 5\n        Explanation: The repeated subarray with maximum length is [0,0,0,0,0].\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        # dp[i][j] = dp[i-1][j-1] + 1 if nums1[i] == nums2[j] else 0\n        # dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n        # Time complexity: O(mn)\n        # Space complexity: O(mn)\n        m, n = len(nums1), len(nums2)\n        dp = [[0] * (n + 1) for _ in range(m + 1)]\n        for i in range(1, m + 1):\n            for j in range(1, n + 1):\n                dp[i][j] = dp[i - 1][j - 1] + 1 if nums1[i - 1] == nums2[j - 1] else 0\n        return max(max(row) for row in dp)"
    },
    {
        "number": 719,
        "title": "Find K-th Smallest Pair Distance",
        "difficulty": 2,
        "prompt": "class Solution:\n    def smallestDistancePair(self, nums: List[int], k: int) -> int:\n        \"\"\"\n        The distance of a pair of integers a and b is defined as the absolute difference between a and b.\n        Given an integer array nums and an integer k, return the kth smallest distance among all the pairs nums[i] and nums[j] where 0 <= i < j < nums.length.\n        Example 1:\n        Input: nums = [1,3,1], k = 1\n        Output: 0\n        Explanation: Here are all the pairs:\n        (1,3) -> 2\n        (1,1) -> 0\n        (3,1) -> 2\n        Then the 1st smallest distance pair is (1,1), and its distance is 0.\n        Example 2:\n        Input: nums = [1,1,1], k = 2\n        Output: 0\n        Example 3:\n        Input: nums = [1,6,1], k = 3\n        Output: 5\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        nums.sort()\n        l, r = 0, nums[-1] - nums[0]\n        while l < r:\n            m = l + (r - l) // 2\n            cnt = 0\n            i, j = 0, len(nums) - 1\n            while i < j:\n                if nums[i] + nums[j] > m:\n                    cnt += j - i\n                    j -= 1\n                else:\n                    i += 1\n            if cnt < k:\n                l = m + 1\n            else:\n                r = m\n        return l"
    },
    {
        "number": 720,
        "title": "Longest Word in Dictionary",
        "difficulty": 1,
        "prompt": "class Solution:\n    def longestWord(self, words: List[str]) -> str:\n        \"\"\"\n        Given an array of strings words representing an English Dictionary, return the longest word in words that can be built one character at a time by other words in words.\n        If there is more than one possible answer, return the longest word with the smallest lexicographical order. If there is no answer, return the empty string.\n        Note that the word should be built from left to right with each additional character being added to the end of a previous word. \n        Example 1:\n        Input: words = [\"w\",\"wo\",\"wor\",\"worl\",\"world\"]\n        Output: \"world\"\n        Explanation: The word \"world\" can be built one character at a time by \"w\", \"wo\", \"wor\", and \"worl\".\n        Example 2:\n        Input: words = [\"a\",\"banana\",\"app\",\"appl\",\"ap\",\"apply\",\"apple\"]\n        Output: \"apple\"\n        Explanation: Both \"apply\" and \"apple\" can be built from other words in the dictionary. However, \"apple\" is lexicographically smaller than \"apply\".\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        words.sort()\n        words.sort(key=len)\n        words.sort(key=lambda x: x[::-1])\n        words.sort(key=len, reverse=True)\n        words.sort(key=lambda x: x[::-1], reverse=True)\n        words.sort(key=len, reverse=True)\n        words.sort(key=lambda x: x[::-1], reverse=True)\n        words.sort(key=len, reverse=True)\n        words.sort(key=lambda x: x[::-1], reverse=True)\n        words.sort(key=len, reverse=True)\n        words.sort(key=lambda x: x[::-1], reverse=True)\n        words.sort(key=len, reverse=True)\n        words.sort(key=lambda x: x[::-1], reverse=True)\n        words.sort(key=len, reverse=True)\n        words.sort(key=lambda x: x[::-1], reverse=True)\n        words.sort(key=len, reverse=True)\n        words.sort(key=lambda x: x[::-1], reverse=True)\n        words.sort(key=len, reverse=True)\n        words.sort(key=lambda"
    },
    {
        "number": 721,
        "title": "Accounts Merge",
        "difficulty": 1,
        "prompt": "class Solution:\n    def accountsMerge(self, accounts: List[List[str]]) -> List[List[str]]:\n        \"\"\"\n        Given a list of accounts where each element accounts[i] is a list of strings, where the first element accounts[i][0] is a name, and the rest of the elements are emails representing emails of the account.\n        Now, we would like to merge these accounts. Two accounts definitely belong to the same person if there is some common email to both accounts. Note that even if two accounts have the same name, they may belong to different people as people could have the same name. A person can have any number of accounts initially, but all of their accounts definitely have the same name.\n        After merging the accounts, return the accounts in the following format: the first element of each account is the name, and the rest of the elements are emails in sorted order. The accounts themselves can be returned in any order.\n        Example 1:\n        Input: accounts = [[\"John\",\"johnsmith@mail.com\",\"john_newyork@mail.com\"],[\"John\",\"johnsmith@mail.com\",\"john00@mail.com\"],[\"Mary\",\"mary@mail.com\"],[\"John\",\"johnnybravo@mail.com\"]]\n        Output: [[\"John\",\"john00@mail.com\",\"john_newyork@mail.com\",\"johnsmith@mail.com\"],[\"Mary\",\"mary@mail.com\"],[\"John\",\"johnnybravo@mail.com\"]]\n        Explanation:\n        The first and second John's are the same person as they have the common email \"johnsmith@mail.com\".\n        The third John and Mary are different people as none of their email addresses are used by other accounts.\n        We could return these lists in any order, for example the answer [['Mary','mary@mail.com'], ['John', 'johnnybravo@mail.com'], \n        ['John', 'john00@mail.com', 'john_newyork@mail.com', 'johnsmith@mail.com']] would still be accepted.\n        Example 2:\n        Input: accounts = [[\"Gabe\",\"Gabe0@m.co\",\"Gabe3@m.co\",\"Gabe1@m.co\"],[\"Kevin\",\"Kevin3@m.co\",\"Kevin5@m.co\",\"Kevin0@m.co\"],[\"Ethan\",\"Ethan5@m.co\",\"Ethan4@m.co\",\"Ethan0@m.co\"],[\"Hanzo\",\"Hanzo3@m.co\",\"Hanzo1@m.co\",\"Hanzo0@m.co\"],[\"Fern\",\"Fern5@m.co\",\"Fern1@m.co\",\"Fern0@m.co\"]]\n        Output: [[\"Ethan\",\"Ethan0@m.co\",\"Ethan4@m.co\",\"Ethan5@m.co\"],[\"Gabe\",\"Gabe0@m.co\",\"Gabe1@m.co\",\"Gabe3@m.co\"],[\"Hanzo\",\"Hanzo0@m.co\",\"Hanzo1@m.co\",\"Hanzo3@m.co\"],[\"Kevin\",\"Kevin0@m.co\",\"Kevin3@m.co\",\"Kevin5@m.co\"],[\"Fern\",\"Fern0@m.co\",\"Fern1@m.co\",\"Fern5@m.co\"]]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        # build a graph\n        graph = collections.defaultdict(set)\n        for account in accounts:\n            name = account[0]\n            for email in account[1:]:\n                graph[account[1]].add(email)\n                graph[email].add(account[1])\n        # find connected components\n        visited = set()\n        components = []\n        for email in graph:\n            if email not in visited:\n                component = set()\n                stack = [email]\n                while stack:\n                    node = stack.pop()\n                    if node not in visited:\n                        visited.add(node)\n                        component.add(node)\n                        stack.extend(graph[node] - visited)\n                components.append([name] + sorted(component))\n        return components\n    \n    def accountsMerge_dfs(self, accounts: List[List[str]]) -> List[List[str]]:\n        \"\"\"\n        Given a list of accounts where each element accounts[i] is a list of strings, where the first element accounts[i][0] is a name, and the rest of the elements are emails representing emails of the account.\n        Now, we would like to merge these accounts. Two accounts definitely belong to the same person if there is some common email to both accounts. Note that even if two"
    },
    {
        "number": 722,
        "title": "Remove Comments",
        "difficulty": 1,
        "prompt": "class Solution:\n    def removeComments(self, source: List[str]) -> List[str]:\n        \"\"\"\n        Given a C++ program, remove comments from it. The program source is an array of strings source where source[i] is the ith line of the source code. This represents the result of splitting the original source code string by the newline character '\\n'.\n        In C++, there are two types of comments, line comments, and block comments.\n            The string \"//\" denotes a line comment, which represents that it and the rest of the characters to the right of it in the same line should be ignored.\n            The string \"/*\" denotes a block comment, which represents that all characters until the next (non-overlapping) occurrence of \"*/\" should be ignored. (Here, occurrences happen in reading order: line by line from left to right.) To be clear, the string \"/*/\" does not yet end the block comment, as the ending would be overlapping the beginning.\n        The first effective comment takes precedence over others.\n            For example, if the string \"//\" occurs in a block comment, it is ignored.\n            Similarly, if the string \"/*\" occurs in a line or block comment, it is also ignored.\n        If a certain line of code is empty after removing comments, you must not output that line: each string in the answer list will be non-empty.\n        There will be no control characters, single quote, or double quote characters.\n            For example, source = \"string s = \"/* Not a comment. */\";\" will not be a test case.\n        Also, nothing else such as defines or macros will interfere with the comments.\n        It is guaranteed that every open block comment will eventually be closed, so \"/*\" outside of a line or block comment always starts a new comment.\n        Finally, implicit newline characters can be deleted by block comments. Please see the examples below for details.\n        After removing the comments from the source code, return the source code in the same format.\n        Example 1:\n        Input: source = [\"/*Test program */\", \"int main()\", \"{ \", \"  // variable declaration \", \"int a, b, c;\", \"/* This is a test\", \"   multiline  \", \"   comment for \", \"   testing */\", \"a = b + c;\", \"}\"]\n        Output: [\"int main()\",\"{ \",\"  \",\"int a, b, c;\",\"a = b + c;\",\"}\"]\n        Explanation: The line by line code is visualized as below:\n        /*Test program */\n        int main()\n        { \n          // variable declaration \n        int a, b, c;\n        /* This is a test\n           multiline  \n           comment for \n           testing */\n        a = b + c;\n        }\n        The string /* denotes a block comment, including line 1 and lines 6-9. The string // denotes line 4 as comments.\n        The line by line output code is visualized as below:\n        int main()\n        { \n        int a, b, c;\n        a = b + c;\n        }\n        Example 2:\n        Input: source = [\"a/*comment\", \"line\", \"more_comment*/b\"]\n        Output: [\"ab\"]\n        Explanation: The original source string is \"a/*comment\\nline\\nmore_comment*/b\", where we have bolded the newline characters.  After deletion, the implicit newline characters are deleted, leaving the string \"ab\", which when delimited by newline characters becomes [\"ab\"].\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        \n        # stack to store the comments\n        stack = []\n        \n        # result\n        res = []\n        \n        # iterate through the source code\n        for line in source:\n            \n            # if the line is a comment\n            if line.startswith('//'):\n                \n                # add the line to the result\n                res.append(line)\n                \n            # if the line is a block comment\n            elif line.startswith('/*'):\n                \n                # add the line to the result\n                res.append(line)\n                \n                # add the line to the stack\n                stack.append(line)\n                \n            # if the line is a line comment\n            elif line.endswith('*/'):\n                \n                # pop the stack\n                stack.pop()\n                \n                # add the line to the result\n                res.append(line)\n                \n            # if the line is not a comment\n            else:\n                \n                # pop the stack\n                stack.pop()\n                \n                # add the line to the result\n                res.append(line)\n                \n        # iterate through the stack\n        for line in stack:\n            \n            # add the line to the result\n            res.append(line)\n            \n        # return the result\n"
    },
    {
        "number": 724,
        "title": "Find Pivot Index",
        "difficulty": 0,
        "prompt": "class Solution:\n    def pivotIndex(self, nums: List[int]) -> int:\n        \"\"\"\n        Given an array of integers nums, calculate the pivot index of this array.\n        The pivot index is the index where the sum of all the numbers strictly to the left of the index is equal to the sum of all the numbers strictly to the index's right.\n        If the index is on the left edge of the array, then the left sum is 0 because there are no elements to the left. This also applies to the right edge of the array.\n        Return the leftmost pivot index. If no such index exists, return -1.\n        Example 1:\n        Input: nums = [1,7,3,6,5,6]\n        Output: 3\n        Explanation:\n        The pivot index is 3.\n        Left sum = nums[0] + nums[1] + nums[2] = 1 + 7 + 3 = 11\n        Right sum = nums[4] + nums[5] = 5 + 6 = 11\n        Example 2:\n        Input: nums = [1,2,3]\n        Output: -1\n        Explanation:\n        There is no index that satisfies the conditions in the problem statement.\n        Example 3:\n        Input: nums = [2,1,-1]\n        Output: 0\n        Explanation:\n        The pivot index is 0.\n        Left sum = 0 (no elements to the left of index 0)\n        Right sum = nums[1] + nums[2] = 1 + -1 = 0\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        left_sum = 0\n        right_sum = sum(nums)\n        for i in range(len(nums)):\n            right_sum -= nums[i]\n            if left_sum == right_sum:\n                return i\n            left_sum += nums[i]\n        return -1"
    },
    {
        "number": 725,
        "title": "Split Linked List in Parts",
        "difficulty": 1,
        "prompt": "class Solution:\n    def splitListToParts(self, head: Optional[ListNode], k: int) -> List[Optional[ListNode]]:\n        \"\"\"\n        Given the head of a singly linked list and an integer k, split the linked list into k consecutive linked list parts.\n        The length of each part should be as equal as possible: no two parts should have a size differing by more than one. This may lead to some parts being null.\n        The parts should be in the order of occurrence in the input list, and parts occurring earlier should always have a size greater than or equal to parts occurring later.\n        Return an array of the k parts.\n        Example 1:\n        Input: head = [1,2,3], k = 5\n        Output: [[1],[2],[3],[],[]]\n        Explanation:\n        The first element output[0] has output[0].val = 1, output[0].next = null.\n        The last element output[4] is null, but its string representation as a ListNode is [].\n        Example 2:\n        Input: head = [1,2,3,4,5,6,7,8,9,10], k = 3\n        Output: [[1,2,3,4],[5,6,7],[8,9,10]]\n        Explanation:\n        The input has been split into consecutive parts with size difference at most 1, and earlier parts are a larger size than the later parts.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        # get the length of the linked list\n        length = 0\n        temp = head\n        while temp:\n            length += 1\n            temp = temp.next\n        # get the length of each part\n        part_length = length // k\n        # get the remainder of the length of the linked list\n        remainder = length % k\n        # initialize the output list\n        output = [None] * k\n        # initialize the temp variable\n        temp = head\n        # iterate through the linked list\n        for i in range(k):\n            # if the remainder is 0, then the length of the part is equal to the part_length\n            if remainder == 0:\n                part_length = part_length\n            # if the remainder is not 0, then the length of the part is equal to the part_length + 1\n            else:\n                part_length = part_length + 1\n                remainder -= 1\n            # initialize the output list\n            output[i] = ListNode(0)\n            # iterate through the linked list\n            for j in range(part_length):\n                # if the temp variable is not null\n                if temp:\n                    # set the value of the output list to be equal to the value of the temp variable\n                    output[i].val = temp.val\n                    # set the next value of"
    },
    {
        "number": 726,
        "title": "Number of Atoms",
        "difficulty": 2,
        "prompt": "class Solution:\n    def countOfAtoms(self, formula: str) -> str:\n        \"\"\"\n        Given a string formula representing a chemical formula, return the count of each atom.\n        The atomic element always starts with an uppercase character, then zero or more lowercase letters, representing the name.\n        One or more digits representing that element's count may follow if the count is greater than 1. If the count is 1, no digits will follow.\n            For example, \"H2O\" and \"H2O2\" are possible, but \"H1O2\" is impossible.\n        Two formulas are concatenated together to produce another formula.\n            For example, \"H2O2He3Mg4\" is also a formula.\n        A formula placed in parentheses, and a count (optionally added) is also a formula.\n            For example, \"(H2O2)\" and \"(H2O2)3\" are formulas.\n        Return the count of all elements as a string in the following form: the first name (in sorted order), followed by its count (if that count is more than 1), followed by the second name (in sorted order), followed by its count (if that count is more than 1), and so on.\n        The test cases are generated so that all the values in the output fit in a 32-bit integer.\n        Example 1:\n        Input: formula = \"H2O\"\n        Output: \"H2O\"\n        Explanation: The count of elements are {'H': 2, 'O': 1}.\n        Example 2:\n        Input: formula = \"Mg(OH)2\"\n        Output: \"H2MgO2\"\n        Explanation: The count of elements are {'H': 2, 'Mg': 1, 'O': 2}.\n        Example 3:\n        Input: formula = \"K4(ON(SO3)2)2\"\n        Output: \"K4N2O14S4\"\n        Explanation: The count of elements are {'K': 4, 'N': 2, 'O': 14, 'S': 4}.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        # Solution 1: stack\n        # O(n) time\n        # O(n) space\n        stack = []\n        i = 0\n        while i < len(formula):\n            if formula[i] == '(':\n                stack.append(i)\n            elif formula[i] == ')':\n                start = stack.pop()\n                count = ''\n                while formula[i]!= ')':\n                    count += formula[i]\n                    i += 1\n                count = int(count)\n                i += 1\n                while i < len(formula) and formula[i].isdigit():\n                    count = count * 10 + int(formula[i])\n                    i += 1\n                for j in range(start, start + count):\n                    stack.append(j)\n            else:\n                i += 1\n        \n        # O(n) time\n        # O(n) space\n        # formula = formula.replace('(', '( ').replace(')',')')\n        # formula = formula.split()\n        # d = {}\n        # for i in formula:\n        #     if i[0].isupper():\n        #         if i in d:\n        #             d[i] += 1\n        #         else:\n        #             d[i] = 1"
    },
    {
        "number": 728,
        "title": "Self Dividing Numbers",
        "difficulty": 0,
        "prompt": "class Solution:\n    def selfDividingNumbers(self, left: int, right: int) -> List[int]:\n        \"\"\"\n        A self-dividing number is a number that is divisible by every digit it contains.\n            For example, 128 is a self-dividing number because 128 % 1 == 0, 128 % 2 == 0, and 128 % 8 == 0.\n        A self-dividing number is not allowed to contain the digit zero.\n        Given two integers left and right, return a list of all the self-dividing numbers in the range [left, right].\n        Example 1:\n        Input: left = 1, right = 22\n        Output: [1,2,3,4,5,6,7,8,9,11,12,15,22]\n        Example 2:\n        Input: left = 47, right = 85\n        Output: [48,55,66,77]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        def self_dividing(num):\n            num_str = str(num)\n            for i in num_str:\n                if int(i) == 0 or num % int(i)!= 0:\n                    return False\n            return True\n        \n        ans = []\n        for i in range(left, right+1):\n            if self_dividing(i):\n                ans.append(i)\n        return ans\n<|endoftext|>"
    },
    {
        "number": 729,
        "title": "My Calendar I",
        "difficulty": 1,
        "prompt": "class MyCalendar:\n    def __init__(self):\n    def book(self, start: int, end: int) -> bool:\n        \"\"\"\n        You are implementing a program to use as your calendar. We can add a new event if adding the event will not cause a double booking.\n        A double booking happens when two events have some non-empty intersection (i.e., some moment is common to both events.).\n        The event can be represented as a pair of integers start and end that represents a booking on the half-open interval [start, end), the range of real numbers x such that start <= x < end.\n        Implement the MyCalendar class:\n            MyCalendar() Initializes the calendar object.\n            boolean book(int start, int end) Returns true if the event can be added to the calendar successfully without causing a double booking. Otherwise, return false and do not add the event to the calendar.\n        Example 1:\n        Input\n        [\"MyCalendar\", \"book\", \"book\", \"book\"]\n        [[], [10, 20], [15, 25], [20, 30]]\n        Output\n        [null, true, false, true]\n        Explanation\n        MyCalendar myCalendar = new MyCalendar();\n        myCalendar.book(10, 20); // return True\n        myCalendar.book(15, 25); // return False, It can not be booked because time 15 is already booked by another event.\n        myCalendar.book(20, 30); // return True, The event can be booked, as the first event takes every time less than 20, but not including 20.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        \n        # Time: O(N)\n        # Space: O(N)\n        \n        events = []\n        for s, e in events:\n            if s < end and s >= start:\n                return False\n            if e > start and e <= end:\n                return False\n            \n        events.append((start, end))\n        return True\n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n"
    },
    {
        "number": 730,
        "title": "Count Different Palindromic Subsequences",
        "difficulty": 2,
        "prompt": "class Solution:\n    def countPalindromicSubsequences(self, s: str) -> int:\n        \"\"\"\n        Given a string s, return the number of different non-empty palindromic subsequences in s. Since the answer may be very large, return it modulo 109 + 7.\n        A subsequence of a string is obtained by deleting zero or more characters from the string.\n        A sequence is palindromic if it is equal to the sequence reversed.\n        Two sequences a1, a2,... and b1, b2,... are different if there is some i for which ai!= bi.\n        Example 1:\n        Input: s = \"bccb\"\n        Output: 6\n        Explanation: The 6 different non-empty palindromic subsequences are 'b', 'c', 'bb', 'cc', 'bcb', 'bccb'.\n        Note that 'bcb' is counted only once, even though it occurs twice.\n        Example 2:\n        Input: s = \"abcdabcdabcdabcdabcdabcdabcdabcddcbadcbadcbadcbadcbadcbadcbadcba\"\n        Output: 104860361\n        Explanation: There are 3104860382 different non-empty palindromic subsequences, which is 104860361 modulo 109 + 7.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        # dp[i][j] = the number of different palindromic subsequences of s[i:j+1]\n        # dp[i][j] = dp[i+1][j] + 2 * dp[i][j-1] - dp[i+1][j-1]\n        # dp[i][j] = dp[i+1][j] + 2 * dp[i][j-1] - dp[i+1][j-1] + dp[i+1][j-1]\n        # dp[i][j] = dp[i+1][j] + 2 * dp[i][j-1] - dp[i+1][j-1] + dp[i+1][j-1] - dp[i+1][j-1]\n        # dp[i][j] = dp[i+1][j] + 2 * dp[i][j-1] - dp[i+1][j-1] + dp[i+1][j-1] - dp[i+1][j-1] + dp[i+1][j-1]\n        # dp[i][j] = dp[i+1][j] + 2 *"
    },
    {
        "number": 731,
        "title": "My Calendar II",
        "difficulty": 1,
        "prompt": "class MyCalendarTwo:\n    def __init__(self):\n    def book(self, start: int, end: int) -> bool:\n        \"\"\"\n        You are implementing a program to use as your calendar. We can add a new event if adding the event will not cause a triple booking.\n        A triple booking happens when three events have some non-empty intersection (i.e., some moment is common to all the three events.).\n        The event can be represented as a pair of integers start and end that represents a booking on the half-open interval [start, end), the range of real numbers x such that start <= x < end.\n        Implement the MyCalendarTwo class:\n            MyCalendarTwo() Initializes the calendar object.\n            boolean book(int start, int end) Returns true if the event can be added to the calendar successfully without causing a triple booking. Otherwise, return false and do not add the event to the calendar.\n        Example 1:\n        Input\n        [\"MyCalendarTwo\", \"book\", \"book\", \"book\", \"book\", \"book\", \"book\"]\n        [[], [10, 20], [50, 60], [10, 40], [5, 15], [5, 10], [25, 55]]\n        Output\n        [null, true, true, true, false, true, true]\n        Explanation\n        MyCalendarTwo myCalendarTwo = new MyCalendarTwo();\n        myCalendarTwo.book(10, 20); // return True, The event can be booked. \n        myCalendarTwo.book(50, 60); // return True, The event can be booked. \n        myCalendarTwo.book(10, 40); // return True, The event can be double booked. \n        myCalendarTwo.book(5, 15);  // return False, The event cannot be booked, because it would result in a triple booking.\n        myCalendarTwo.book(5, 10); // return True, The event can be booked, as it does not use time 10 which is already double booked.\n        myCalendarTwo.book(25, 55); // return True, The event can be booked, as the time in [25, 40) will be double booked with the third event, the time [40, 50) will be single booked, and the time [50, 55) will be double booked with the second event.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        self.calendar = []\n        self.overlaps = []\n        \n        for s, e in self.calendar:\n            if s < e:\n                if s < start < e or s < end < e:\n                    return False\n                if start < s < end or start < e < end:\n                    self.overlaps.append([max(s, start), min(e, end)])\n        self.calendar.append([start, end])\n        return True\n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n"
    },
    {
        "number": 732,
        "title": "My Calendar III",
        "difficulty": 2,
        "prompt": "class MyCalendarThree:\n    def __init__(self):\n    def book(self, startTime: int, endTime: int) -> int:\n        \"\"\"\n        A k-booking happens when k events have some non-empty intersection (i.e., there is some time that is common to all k events.)\n        You are given some events [startTime, endTime), after each given event, return an integer k representing the maximum k-booking between all the previous events.\n        Implement the MyCalendarThree class:\n            MyCalendarThree() Initializes the object.\n            int book(int startTime, int endTime) Returns an integer k representing the largest integer such that there exists a k-booking in the calendar.\n        Example 1:\n        Input\n        [\"MyCalendarThree\", \"book\", \"book\", \"book\", \"book\", \"book\", \"book\"]\n        [[], [10, 20], [50, 60], [10, 40], [5, 15], [5, 10], [25, 55]]\n        Output\n        [null, 1, 1, 2, 3, 3, 3]\n        Explanation\n        MyCalendarThree myCalendarThree = new MyCalendarThree();\n        myCalendarThree.book(10, 20); // return 1\n        myCalendarThree.book(50, 60); // return 1\n        myCalendarThree.book(10, 40); // return 2\n        myCalendarThree.book(5, 15); // return 3\n        myCalendarThree.book(5, 10); // return 3\n        myCalendarThree.book(25, 55); // return 3\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        self.calendar = []\n        self.calendar.append([startTime, endTime])\n        self.calendar.sort()\n        self.res = 0\n        self.calendar_dict = {}\n        for i in range(len(self.calendar)):\n            if self.calendar[i][0] not in self.calendar_dict:\n                self.calendar_dict[self.calendar[i][0]] = [self.calendar[i][1]]\n            else:\n                self.calendar_dict[self.calendar[i][0]].append(self.calendar[i][1])\n        for i in range(len(self.calendar)):\n            self.helper(self.calendar[i][0], self.calendar[i][1])\n        return self.res"
    },
    {
        "number": 733,
        "title": "Flood Fill",
        "difficulty": 0,
        "prompt": "class Solution:\n    def floodFill(self, image: List[List[int]], sr: int, sc: int, color: int) -> List[List[int]]:\n        \"\"\"\n        An image is represented by an m x n integer grid image where image[i][j] represents the pixel value of the image.\n        You are also given three integers sr, sc, and color. You should perform a flood fill on the image starting from the pixel image[sr][sc].\n        To perform a flood fill, consider the starting pixel, plus any pixels connected 4-directionally to the starting pixel of the same color as the starting pixel, plus any pixels connected 4-directionally to those pixels (also with the same color), and so on. Replace the color of all of the aforementioned pixels with color.\n        Return the modified image after performing the flood fill.\n        Example 1:\n        Input: image = [[1,1,1],[1,1,0],[1,0,1]], sr = 1, sc = 1, color = 2\n        Output: [[2,2,2],[2,2,0],[2,0,1]]\n        Explanation: From the center of the image with position (sr, sc) = (1, 1) (i.e., the red pixel), all pixels connected by a path of the same color as the starting pixel (i.e., the blue pixels) are colored with the new color.\n        Note the bottom corner is not colored 2, because it is not 4-directionally connected to the starting pixel.\n        Example 2:\n        Input: image = [[0,0,0],[0,0,0]], sr = 0, sc = 0, color = 0\n        Output: [[0,0,0],[0,0,0]]\n        Explanation: The starting pixel is already colored 0, so no changes are made to the image.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        # BFS\n        # Time: O(m * n)\n        # Space: O(m * n)\n        if image[sr][sc] == color:\n            return image\n        \n        m, n = len(image), len(image[0])\n        visited = set()\n        queue = collections.deque([(sr, sc)])\n        while queue:\n            r, c = queue.popleft()\n            if (r, c) in visited:\n                continue\n            visited.add((r, c))\n            image[r][c] = color\n            if r > 0 and image[r - 1][c] == image[r][c]:\n                queue.append((r - 1, c))\n            if r < m - 1 and image[r + 1][c] == image[r][c]:\n                queue.append((r + 1, c))\n            if c > 0 and image[r][c - 1] == image[r][c]:\n                queue.append((r, c - 1))\n            if c < n - 1 and image[r][c + 1] == image[r][c]:\n                queue.append((r, c + 1))\n        return image"
    },
    {
        "number": 735,
        "title": "Asteroid Collision",
        "difficulty": 1,
        "prompt": "class Solution:\n    def asteroidCollision(self, asteroids: List[int]) -> List[int]:\n        \"\"\"\n        We are given an array asteroids of integers representing asteroids in a row.\n        For each asteroid, the absolute value represents its size, and the sign represents its direction (positive meaning right, negative meaning left). Each asteroid moves at the same speed.\n        Find out the state of the asteroids after all collisions. If two asteroids meet, the smaller one will explode. If both are the same size, both will explode. Two asteroids moving in the same direction will never meet.\n        Example 1:\n        Input: asteroids = [5,10,-5]\n        Output: [5,10]\n        Explanation: The 10 and -5 collide resulting in 10. The 5 and 10 never collide.\n        Example 2:\n        Input: asteroids = [8,-8]\n        Output: []\n        Explanation: The 8 and -8 collide exploding each other.\n        Example 3:\n        Input: asteroids = [10,2,-5]\n        Output: [10]\n        Explanation: The 2 and -5 collide resulting in -5. The 10 and -5 collide resulting in 10.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        stack = []\n        for a in asteroids:\n            if not stack:\n                stack.append(a)\n            else:\n                if a > 0:\n                    stack.append(a)\n                else:\n                    while stack and stack[-1] > 0 and stack[-1] < abs(a):\n                        stack.pop()\n                    if not stack or stack[-1] < 0:\n                        stack.append(a)\n                    elif stack[-1] == abs(a):\n                        stack.pop()\n        return stack\n<|endoftext|>"
    },
    {
        "number": 736,
        "title": "Parse Lisp Expression",
        "difficulty": 2,
        "prompt": "class Solution:\n    def evaluate(self, expression: str) -> int:\n        \"\"\"\n        You are given a string expression representing a Lisp-like expression to return the integer value of.\n        The syntax for these expressions is given as follows.\n            An expression is either an integer, let expression, add expression, mult expression, or an assigned variable. Expressions always evaluate to a single integer.\n            (An integer could be positive or negative.)\n            A let expression takes the form \"(let v1 e1 v2 e2... vn en expr)\", where let is always the string \"let\", then there are one or more pairs of alternating variables and expressions, meaning that the first variable v1 is assigned the value of the expression e1, the second variable v2 is assigned the value of the expression e2, and so on sequentially; and then the value of this let expression is the value of the expression expr.\n            An add expression takes the form \"(add e1 e2)\" where add is always the string \"add\", there are always two expressions e1, e2 and the result is the addition of the evaluation of e1 and the evaluation of e2.\n            A mult expression takes the form \"(mult e1 e2)\" where mult is always the string \"mult\", there are always two expressions e1, e2 and the result is the multiplication of the evaluation of e1 and the evaluation of e2.\n            For this question, we will use a smaller subset of variable names. A variable starts with a lowercase letter, then zero or more lowercase letters or digits. Additionally, for your convenience, the names \"add\", \"let\", and \"mult\" are protected and will never be used as variable names.\n            Finally, there is the concept of scope. When an expression of a variable name is evaluated, within the context of that evaluation, the innermost scope (in terms of parentheses) is checked first for the value of that variable, and then outer scopes are checked sequentially. It is guaranteed that every expression is legal. Please see the examples for more details on the scope.\n        Example 1:\n        Input: expression = \"(let x 2 (mult x (let x 3 y 4 (add x y))))\"\n        Output: 14\n        Explanation: In the expression (add x y), when checking for the value of the variable x,\n        we check from the innermost scope to the outermost in the context of the variable we are trying to evaluate.\n        Since x = 3 is found first, the value of x is 3.\n        Example 2:\n        Input: expression = \"(let x 3 x 2 x)\"\n        Output: 2\n        Explanation: Assignment in let statements is processed sequentially.\n        Example 3:\n        Input: expression = \"(let x 1 y 2 x (add x y) (add x y))\"\n        Output: 5\n        Explanation: The first (add x y) evaluates as 3, and is assigned to x.\n        The second (add x y) evaluates as 3+2 = 5.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        # stack = []\n        # curr_num = 0\n        # curr_op = '+'\n        # for c in expression:\n        #     if c.isdigit():\n        #         curr_num = curr_num * 10 + int(c)\n        #     elif c in ['+', '*']:\n        #         if curr_op == '+':\n        #             stack.append(curr_num)\n        #         elif curr_op == '*':\n        #             stack.append(stack.pop() * curr_num)\n        #         curr_num = 0\n        #         curr_op = c\n        #     elif c == '(':\n        #         stack.append(curr_num)\n        #         stack.append(curr_op)\n        #         curr_num = 0\n        #         curr_op = '+'\n        #     elif c == ')':\n        #         num = stack.pop()\n        #         if stack and stack[-1] == '+':\n        #             stack.pop()\n        #             num2 = stack.pop()\n        #             stack.append(num2 + num)\n        #         else:\n        #             stack.append(num)"
    },
    {
        "number": 738,
        "title": "Monotone Increasing Digits",
        "difficulty": 1,
        "prompt": "class Solution:\n    def monotoneIncreasingDigits(self, n: int) -> int:\n        \"\"\"\n        An integer has monotone increasing digits if and only if each pair of adjacent digits x and y satisfy x <= y.\n        Given an integer n, return the largest number that is less than or equal to n with monotone increasing digits.\n        Example 1:\n        Input: n = 10\n        Output: 9\n        Example 2:\n        Input: n = 1234\n        Output: 1234\n        Example 3:\n        Input: n = 332\n        Output: 299\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        nums = [int(x) for x in str(n)]\n        i = 1\n        while i < len(nums) and nums[i] <= nums[i - 1]:\n            i += 1\n        nums[i:] = nums[i - 1::-1]\n        return int(''.join([str(x) for x in nums]))"
    },
    {
        "number": 739,
        "title": "Daily Temperatures",
        "difficulty": 1,
        "prompt": "class Solution:\n    def dailyTemperatures(self, temperatures: List[int]) -> List[int]:\n        \"\"\"\n        Given an array of integers temperatures represents the daily temperatures, return an array answer such that answer[i] is the number of days you have to wait after the ith day to get a warmer temperature. If there is no future day for which this is possible, keep answer[i] == 0 instead.\n        Example 1:\n        Input: temperatures = [73,74,75,71,69,72,76,73]\n        Output: [1,1,4,2,1,1,0,0]\n        Example 2:\n        Input: temperatures = [30,40,50,60]\n        Output: [1,1,1,0]\n        Example 3:\n        Input: temperatures = [30,60,90]\n        Output: [1,1,0]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        # Approach 1: Stack\n        # Time complexity: O(n)\n        # Space complexity: O(n)\n        # stack = []\n        # res = [0] * len(temperatures)\n        # for i in range(len(temperatures) - 1, -1, -1):\n        #     while stack and temperatures[i] >= stack[-1][0]:\n        #         stack.pop()\n        #     if stack:\n        #         res[i] = stack[-1][1] - i\n        #     stack.append((temperatures[i], i))\n        # return res"
    },
    {
        "number": 740,
        "title": "Delete and Earn",
        "difficulty": 1,
        "prompt": "class Solution:\n    def deleteAndEarn(self, nums: List[int]) -> int:\n        \"\"\"\n        You are given an integer array nums. You want to maximize the number of points you get by performing the following operation any number of times:\n            Pick any nums[i] and delete it to earn nums[i] points. Afterwards, you must delete every element equal to nums[i] - 1 and every element equal to nums[i] + 1.\n        Return the maximum number of points you can earn by applying the above operation some number of times.\n        Example 1:\n        Input: nums = [3,4,2]\n        Output: 6\n        Explanation: You can perform the following operations:\n        - Delete 4 to earn 4 points. Consequently, 3 is also deleted. nums = [2].\n        - Delete 2 to earn 2 points. nums = [].\n        You earn a total of 6 points.\n        Example 2:\n        Input: nums = [2,2,3,3,3,4]\n        Output: 9\n        Explanation: You can perform the following operations:\n        - Delete a 3 to earn 3 points. All 2's and 4's are also deleted. nums = [3,3].\n        - Delete a 3 again to earn 3 points. nums = [3].\n        - Delete a 3 once more to earn 3 points. nums = [].\n        You earn a total of 9 points.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        # dp[i] = max points you can earn by deleting i\n        # dp[i] = max(dp[i - 1], dp[i - 2] + nums[i])\n        # dp[0] = nums[0]\n        # dp[1] = max(nums[0], nums[1])\n        # dp[2] = max(nums[1], nums[0] + nums[2])\n        # dp[3] = max(nums[2], nums[1] + nums[3])\n        # dp[4] = max(nums[3], nums[2] + nums[4])\n        # dp[5] = max(nums[4], nums[3] + nums[5])\n        # dp[6] = max(nums[5], nums[4] + nums[6])\n        # dp[7] = max(nums[6], nums[5] + nums[7])\n        # dp[8] = max(nums[7], nums[6] + nums[8])\n        # dp[9] = max(nums[8], nums[7] + nums[9])\n        #"
    },
    {
        "number": 741,
        "title": "Cherry Pickup",
        "difficulty": 2,
        "prompt": "class Solution:\n    def cherryPickup(self, grid: List[List[int]]) -> int:\n        \"\"\"\n        You are given an n x n grid representing a field of cherries, each cell is one of three possible integers.\n            0 means the cell is empty, so you can pass through,\n            1 means the cell contains a cherry that you can pick up and pass through, or\n            -1 means the cell contains a thorn that blocks your way.\n        Return the maximum number of cherries you can collect by following the rules below:\n            Starting at the position (0, 0) and reaching (n - 1, n - 1) by moving right or down through valid path cells (cells with value 0 or 1).\n            After reaching (n - 1, n - 1), returning to (0, 0) by moving left or up through valid path cells.\n            When passing through a path cell containing a cherry, you pick it up, and the cell becomes an empty cell 0.\n            If there is no valid path between (0, 0) and (n - 1, n - 1), then no cherries can be collected.\n        Example 1:\n        Input: grid = [[0,1,-1],[1,0,-1],[1,1,1]]\n        Output: 5\n        Explanation: The player started at (0, 0) and went down, down, right right to reach (2, 2).\n        4 cherries were picked up during this single trip, and the matrix becomes [[0,1,-1],[0,0,-1],[0,0,0]].\n        Then, the player went left, up, up, left to return home, picking up one more cherry.\n        The total number of cherries picked up is 5, and this is the maximum possible.\n        Example 2:\n        Input: grid = [[1,1,-1],[1,-1,1],[-1,1,1]]\n        Output: 0\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        m, n = len(grid), len(grid[0])\n        dp = [[[0] * n for _ in range(n)] for _ in range(m)]\n        dp[0][0][n - 1] = grid[0][0]\n        for i in range(m):\n            for j in range(n):\n                if grid[i][j] == 1:\n                    dp[i][j][n - 1] = grid[i][j]\n                if grid[i][j] == -1:\n                    dp[i][j][n - 1] = 0\n        for k in range(n - 2, -1, -1):\n            for i in range(m):\n                for j in range(n):\n                    if grid[i][j] == -1:\n                        dp[i][j][k] = 0\n                        continue\n                    if j + 1 < n:\n                        dp[i][j][k] = max(dp[i][j][k], dp[i][j + 1][k + 1])\n                    if i + 1 < m:\n                        dp[i][j][k] = max(dp[i][j][k], dp[i + 1][j][k + 1])\n                    dp[i][j][k] += grid[i][j]"
    },
    {
        "number": 743,
        "title": "Network Delay Time",
        "difficulty": 1,
        "prompt": "class Solution:\n    def networkDelayTime(self, times: List[List[int]], n: int, k: int) -> int:\n        \"\"\"\n        You are given a network of n nodes, labeled from 1 to n. You are also given times, a list of travel times as directed edges times[i] = (ui, vi, wi), where ui is the source node, vi is the target node, and wi is the time it takes for a signal to travel from source to target.\n        We will send a signal from a given node k. Return the minimum time it takes for all the n nodes to receive the signal. If it is impossible for all the n nodes to receive the signal, return -1.\n        Example 1:\n        Input: times = [[2,1,1],[2,3,1],[3,4,1]], n = 4, k = 2\n        Output: 2\n        Example 2:\n        Input: times = [[1,2,1]], n = 2, k = 1\n        Output: 1\n        Example 3:\n        Input: times = [[1,2,1]], n = 2, k = 2\n        Output: -1\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        # Dijkstra's algorithm\n        # Time: O(ElogV)\n        # Space: O(V)\n        graph = collections.defaultdict(list)\n        for u, v, w in times:\n            graph[u].append((v, w))"
    },
    {
        "number": 744,
        "title": "Find Smallest Letter Greater Than Target",
        "difficulty": 0,
        "prompt": "class Solution:\n    def nextGreatestLetter(self, letters: List[str], target: str) -> str:\n        \"\"\"\n        You are given an array of characters letters that is sorted in non-decreasing order, and a character target. There are at least two different characters in letters.\n        Return the smallest character in letters that is lexicographically greater than target. If such a character does not exist, return the first character in letters.\n        Example 1:\n        Input: letters = [\"c\",\"f\",\"j\"], target = \"a\"\n        Output: \"c\"\n        Explanation: The smallest character that is lexicographically greater than 'a' in letters is 'c'.\n        Example 2:\n        Input: letters = [\"c\",\"f\",\"j\"], target = \"c\"\n        Output: \"f\"\n        Explanation: The smallest character that is lexicographically greater than 'c' in letters is 'f'.\n        Example 3:\n        Input: letters = [\"x\",\"x\",\"y\",\"y\"], target = \"z\"\n        Output: \"x\"\n        Explanation: There are no characters in letters that is lexicographically greater than 'z' so we return letters[0].\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        # binary search\n        # find the first index that is larger than target\n        # if not found, return the first element\n        # if found, return the next element\n        # if the next element is larger than target, return it\n        # if not, return the first element\n        # O(logN)\n        # O(1)\n        left, right = 0, len(letters) - 1\n        while left <= right:\n            mid = left + (right - left) // 2\n            if letters[mid] > target:\n                right = mid - 1\n            else:\n                left = mid + 1\n        return letters[left % len(letters)]\n<|endoftext|>"
    },
    {
        "number": 745,
        "title": "Prefix and Suffix Search",
        "difficulty": 2,
        "prompt": "class WordFilter:\n    def __init__(self, words: List[str]):\n    def f(self, pref: str, suff: str) -> int:\n        \"\"\"\n        Design a special dictionary that searches the words in it by a prefix and a suffix.\n        Implement the WordFilter class:\n            WordFilter(string[] words) Initializes the object with the words in the dictionary.\n            f(string pref, string suff) Returns the index of the word in the dictionary, which has the prefix pref and the suffix suff. If there is more than one valid index, return the largest of them. If there is no such word in the dictionary, return -1.\n        Example 1:\n        Input\n        [\"WordFilter\", \"f\"]\n        [[[\"apple\"]], [\"a\", \"e\"]]\n        Output\n        [null, 0]\n        Explanation\n        WordFilter wordFilter = new WordFilter([\"apple\"]);\n        wordFilter.f(\"a\", \"e\"); // return 0, because the word at index 0 has prefix = \"a\" and suffix = \"e\".\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        self.words = words\n        self.pref = pref\n        self.suff = suff\n        self.pref_len = len(pref)\n        self.suff_len = len(suff)\n        self.pref_dict = {}\n        self.suff_dict = {}\n        for i in range(len(self.words)):\n            word = self.words[i]\n            if word[:self.pref_len] == self.pref:\n                if word[-self.suff_len:] == self.suff:\n                    self.pref_dict[word] = i\n                elif word[-self.suff_len:] < self.suff:\n                    self.suff_dict[word] = i\n        self.pref_dict = sorted(self.pref_dict.items(), key=lambda x: x[1], reverse=True)\n        self.suff_dict = sorted(self.suff_dict.items(), key=lambda x: x[1], reverse=True)\n        print(self.pref_dict)\n        print(self.suff_dict)\n        if self.pref_dict and self.suff_dict:\n            return self.pref_dict[0][1]\n        else:\n            return -1"
    },
    {
        "number": 746,
        "title": "Min Cost Climbing Stairs",
        "difficulty": 0,
        "prompt": "class Solution:\n    def minCostClimbingStairs(self, cost: List[int]) -> int:\n        \"\"\"\n        You are given an integer array cost where cost[i] is the cost of ith step on a staircase. Once you pay the cost, you can either climb one or two steps.\n        You can either start from the step with index 0, or the step with index 1.\n        Return the minimum cost to reach the top of the floor.\n        Example 1:\n        Input: cost = [10,15,20]\n        Output: 15\n        Explanation: You will start at index 1.\n        - Pay 15 and climb two steps to reach the top.\n        The total cost is 15.\n        Example 2:\n        Input: cost = [1,100,1,1,1,100,1,1,100,1]\n        Output: 6\n        Explanation: You will start at index 0.\n        - Pay 1 and climb two steps to reach index 2.\n        - Pay 1 and climb two steps to reach index 4.\n        - Pay 1 and climb two steps to reach index 6.\n        - Pay 1 and climb one step to reach index 7.\n        - Pay 1 and climb two steps to reach index 9.\n        - Pay 1 and climb one step to reach the top.\n        The total cost is 6.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        # dp[i] = min(dp[i-1], dp[i-2]) + cost[i]\n        # dp[0] = 0\n        # dp[1] = cost[1]\n        # dp[2] = cost[1] + cost[2]\n        # dp[3] = cost[1] + cost[2] + cost[3]\n        # dp[4] = cost[1] + cost[2] + cost[3] + cost[4]\n        # dp[5] = cost[1] + cost[2] + cost[3] + cost[4] + cost[5]\n        # dp[6] = cost[1] + cost[2] + cost[3] + cost[4] + cost[5] + cost[6]\n        # dp[7] = cost[1] + cost[2] + cost[3] + cost[4] + cost[5] + cost[6] + cost[7]\n        # dp[8] = cost[1] + cost[2] + cost[3] + cost[4] + cost[5] + cost[6] + cost[7] + cost[8]\n        # dp[9] = cost[1] + cost[2]"
    },
    {
        "number": 747,
        "title": "Largest Number At Least Twice of Others",
        "difficulty": 0,
        "prompt": "class Solution:\n    def dominantIndex(self, nums: List[int]) -> int:\n        \"\"\"\n        You are given an integer array nums where the largest integer is unique.\n        Determine whether the largest element in the array is at least twice as much as every other number in the array. If it is, return the index of the largest element, or return -1 otherwise.\n        Example 1:\n        Input: nums = [3,6,1,0]\n        Output: 1\n        Explanation: 6 is the largest integer.\n        For every other number in the array x, 6 is at least twice as big as x.\n        The index of value 6 is 1, so we return 1.\n        Example 2:\n        Input: nums = [1,2,3,4]\n        Output: -1\n        Explanation: 4 is less than twice the value of 3, so we return -1.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        if len(nums) == 1:\n            return 0\n        max_num = max(nums)\n        if max_num < 0:\n            return -1\n        if max_num < 2 * min(nums):\n            return -1\n        else:\n            return nums.index(max_num)"
    },
    {
        "number": 748,
        "title": "Shortest Completing Word",
        "difficulty": 0,
        "prompt": "class Solution:\n    def shortestCompletingWord(self, licensePlate: str, words: List[str]) -> str:\n        \"\"\"\n        Given a string licensePlate and an array of strings words, find the shortest completing word in words.\n        A completing word is a word that contains all the letters in licensePlate. Ignore numbers and spaces in licensePlate, and treat letters as case insensitive. If a letter appears more than once in licensePlate, then it must appear in the word the same number of times or more.\n        For example, if licensePlate = \"aBc 12c\", then it contains letters 'a', 'b' (ignoring case), and 'c' twice. Possible completing words are \"abccdef\", \"caaacab\", and \"cbca\".\n        Return the shortest completing word in words. It is guaranteed an answer exists. If there are multiple shortest completing words, return the first one that occurs in words.\n        Example 1:\n        Input: licensePlate = \"1s3 PSt\", words = [\"step\",\"steps\",\"stripe\",\"stepple\"]\n        Output: \"steps\"\n        Explanation: licensePlate contains letters's', 'p','s' (ignoring case), and 't'.\n        \"step\" contains 't' and 'p', but only contains 1's'.\n        \"steps\" contains 't', 'p', and both's' characters.\n        \"stripe\" is missing an's'.\n        \"stepple\" is missing an's'.\n        Since \"steps\" is the only word containing all the letters, that is the answer.\n        Example 2:\n        Input: licensePlate = \"1s3 456\", words = [\"looks\",\"pest\",\"stew\",\"show\"]\n        Output: \"pest\"\n        Explanation: licensePlate only contains the letter's'. All the words contain's', but among these \"pest\", \"stew\", and \"show\" are shortest. The answer is \"pest\" because it is the word that appears earliest of the 3.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        # 1. split licensePlate into a list of letters\n        # 2. remove all the numbers and spaces\n        # 3. sort the list\n        # 4. iterate through the words\n        # 5. if the word is a subset of the licensePlate, then add it to a list\n        # 6. return the shortest word in the list\n        # 7. if no word is a subset of the licensePlate, then return None\n        # 8. if no word is a subset of the licensePlate, then return None\n        # 9. if no word is a subset of the licensePlate, then return None\n        # 10. if no word is a subset of the licensePlate, then return None\n        # 11. if no word is a subset of the licensePlate, then return None\n        # 12. if no word is a subset of the licensePlate, then return None\n        # 13. if no word is a subset of the licensePlate, then return None\n        # 14. if no word is a subset of the licensePlate, then return None\n        # 15. if no word is a subset of the licensePlate, then return None\n        # 16. if no word is a subset of the licensePlate, then return None\n        # 17. if no word is a subset of the licensePlate, then return None\n        #"
    },
    {
        "number": 749,
        "title": "Contain Virus",
        "difficulty": 2,
        "prompt": "class Solution:\n    def containVirus(self, isInfected: List[List[int]]) -> int:\n        \"\"\"\n        A virus is spreading rapidly, and your task is to quarantine the infected area by installing walls.\n        The world is modeled as an m x n binary grid isInfected, where isInfected[i][j] == 0 represents uninfected cells, and isInfected[i][j] == 1 represents cells contaminated with the virus. A wall (and only one wall) can be installed between any two 4-directionally adjacent cells, on the shared boundary.\n        Every night, the virus spreads to all neighboring cells in all four directions unless blocked by a wall. Resources are limited. Each day, you can install walls around only one region (i.e., the affected area (continuous block of infected cells) that threatens the most uninfected cells the following night). There will never be a tie.\n        Return the number of walls used to quarantine all the infected regions. If the world will become fully infected, return the number of walls used.\n        Example 1:\n        Input: isInfected = [[0,1,0,0,0,0,0,1],[0,1,0,0,0,0,0,1],[0,0,0,0,0,0,0,1],[0,0,0,0,0,0,0,0]]\n        Output: 10\n        Explanation: There are 2 contaminated regions.\n        On the first day, add 5 walls to quarantine the viral region on the left. The board after the virus spreads is:\n        On the second day, add 5 walls to quarantine the viral region on the right. The virus is fully contained.\n        Example 2:\n        Input: isInfected = [[1,1,1],[1,0,1],[1,1,1]]\n        Output: 4\n        Explanation: Even though there is only one cell saved, there are 4 walls built.\n        Notice that walls are only built on the shared boundary of two different cells.\n        Example 3:\n        Input: isInfected = [[1,1,1,0,0,0,0,0,0],[1,0,1,0,1,1,1,1,1],[1,1,1,0,0,0,0,0,0]]\n        Output: 13\n        Explanation: The region on the left only builds two new walls.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        # BFS\n        # Time: O(m * n * 2^(m + n)), Space: O(m * n)\n        # m, n = len(isInfected), len(isInfected[0])\n        # q = collections.deque()\n        # for i in range(m):\n        #     for j in range(n):\n        #         if isInfected[i][j] == 1:\n        #             q.append((i, j))\n        # ans = 0\n        # while q:\n        #     ans += 1\n        #     for _ in range(len(q)):\n        #         i, j = q.popleft()\n        #         for di, dj in [(0, 1), (0, -1), (1, 0), (-1, 0)]:\n        #             ni, nj = i + di, j + dj\n        #             if 0 <= ni < m and 0 <= nj < n and isInfected[ni][nj] == 0:\n        #                 isInfected[ni][nj] = 1\n        #                 q.append((ni, nj))\n        # return ans"
    },
    {
        "number": 752,
        "title": "Open the Lock",
        "difficulty": 1,
        "prompt": "class Solution:\n    def openLock(self, deadends: List[str], target: str) -> int:\n        \"\"\"\n        You have a lock in front of you with 4 circular wheels. Each wheel has 10 slots: '0', '1', '2', '3', '4', '5', '6', '7', '8', '9'. The wheels can rotate freely and wrap around: for example we can turn '9' to be '0', or '0' to be '9'. Each move consists of turning one wheel one slot.\n        The lock initially starts at '0000', a string representing the state of the 4 wheels.\n        You are given a list of deadends dead ends, meaning if the lock displays any of these codes, the wheels of the lock will stop turning and you will be unable to open it.\n        Given a target representing the value of the wheels that will unlock the lock, return the minimum total number of turns required to open the lock, or -1 if it is impossible.\n        Example 1:\n        Input: deadends = [\"0201\",\"0101\",\"0102\",\"1212\",\"2002\"], target = \"0202\"\n        Output: 6\n        Explanation: \n        A sequence of valid moves would be \"0000\" -> \"1000\" -> \"1100\" -> \"1200\" -> \"1201\" -> \"1202\" -> \"0202\".\n        Note that a sequence like \"0000\" -> \"0001\" -> \"0002\" -> \"0102\" -> \"0202\" would be invalid,\n        because the wheels of the lock become stuck after the display becomes the dead end \"0102\".\n        Example 2:\n        Input: deadends = [\"8888\"], target = \"0009\"\n        Output: 1\n        Explanation: We can turn the last wheel in reverse to move from \"0000\" -> \"0009\".\n        Example 3:\n        Input: deadends = [\"8887\",\"8889\",\"8878\",\"8898\",\"8788\",\"8988\",\"7888\",\"9888\"], target = \"8888\"\n        Output: -1\n        Explanation: We cannot reach the target without getting stuck.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        \n        def neighbors(node):\n            for i in range(4):\n                x = int(node[i])\n                for d in (-1, 1):\n                    y = (x + d) % 10\n                    yield node[:i] + str(y) + node[i+1:]\n        \n        dead = set(deadends)\n        queue = collections.deque([('0000', 0)])\n        seen = {'0000'}\n        while queue:\n            node, depth = queue.popleft()\n            if node == target: return depth\n            if node in dead: continue\n            for nei in neighbors(node):\n                if nei not in seen:\n                    seen.add(nei)\n                    queue.append((nei, depth+1))\n        return -1\n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        "
    },
    {
        "number": 753,
        "title": "Cracking the Safe",
        "difficulty": 2,
        "prompt": "class Solution:\n    def crackSafe(self, n: int, k: int) -> str:\n        \"\"\"\n        There is a safe protected by a password. The password is a sequence of n digits where each digit can be in the range [0, k - 1].\n        The safe has a peculiar way of checking the password. When you enter in a sequence, it checks the most recent n digits that were entered each time you type a digit.\n            For example, the correct password is \"345\" and you enter in \"012345\":\n                After typing 0, the most recent 3 digits is \"0\", which is incorrect.\n                After typing 1, the most recent 3 digits is \"01\", which is incorrect.\n                After typing 2, the most recent 3 digits is \"012\", which is incorrect.\n                After typing 3, the most recent 3 digits is \"123\", which is incorrect.\n                After typing 4, the most recent 3 digits is \"234\", which is incorrect.\n                After typing 5, the most recent 3 digits is \"345\", which is correct and the safe unlocks.\n        Return any string of minimum length that will unlock the safe at some point of entering it.\n        Example 1:\n        Input: n = 1, k = 2\n        Output: \"10\"\n        Explanation: The password is a single digit, so enter each digit. \"01\" would also unlock the safe.\n        Example 2:\n        Input: n = 2, k = 2\n        Output: \"01100\"\n        Explanation: For each possible password:\n        - \"00\" is typed in starting from the 4th digit.\n        - \"01\" is typed in starting from the 1st digit.\n        - \"10\" is typed in starting from the 3rd digit.\n        - \"11\" is typed in starting from the 2nd digit.\n        Thus \"01100\" will unlock the safe. \"10011\", and \"11001\" would also unlock the safe.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        self.memo = {}\n        self.n = n\n        self.k = k\n        self.ans = \"\"\n        self.dfs(n, k, \"0\" * n)\n        return self.ans"
    },
    {
        "number": 754,
        "title": "Reach a Number",
        "difficulty": 1,
        "prompt": "class Solution:\n    def reachNumber(self, target: int) -> int:\n        \"\"\"\n        You are standing at position 0 on an infinite number line. There is a destination at position target.\n        You can make some number of moves numMoves so that:\n            On each move, you can either go left or right.\n            During the ith move (starting from i == 1 to i == numMoves), you take i steps in the chosen direction.\n        Given the integer target, return the minimum number of moves required (i.e., the minimum numMoves) to reach the destination.\n        Example 1:\n        Input: target = 2\n        Output: 3\n        Explanation:\n        On the 1st move, we step from 0 to 1 (1 step).\n        On the 2nd move, we step from 1 to -1 (2 steps).\n        On the 3rd move, we step from -1 to 2 (3 steps).\n        Example 2:\n        Input: target = 3\n        Output: 2\n        Explanation:\n        On the 1st move, we step from 0 to 1 (1 step).\n        On the 2nd move, we step from 1 to 3 (2 steps).\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        target = abs(target)\n        if target == 0:\n            return 0\n        if target == 1:\n            return 1\n        if target % 2 == 0:\n            return target // 2 + 1\n        else:\n            return target // 2 + 2"
    },
    {
        "number": 756,
        "title": "Pyramid Transition Matrix",
        "difficulty": 1,
        "prompt": "class Solution:\n    def pyramidTransition(self, bottom: str, allowed: List[str]) -> bool:\n        \"\"\"\n        You are stacking blocks to form a pyramid. Each block has a color, which is represented by a single letter. Each row of blocks contains one less block than the row beneath it and is centered on top.\n        To make the pyramid aesthetically pleasing, there are only specific triangular patterns that are allowed. A triangular pattern consists of a single block stacked on top of two blocks. The patterns are given as a list of three-letter strings allowed, where the first two characters of a pattern represent the left and right bottom blocks respectively, and the third character is the top block.\n            For example, \"ABC\" represents a triangular pattern with a 'C' block stacked on top of an 'A' (left) and 'B' (right) block. Note that this is different from \"BAC\" where 'B' is on the left bottom and 'A' is on the right bottom.\n        You start with a bottom row of blocks bottom, given as a single string, that you must use as the base of the pyramid.\n        Given bottom and allowed, return true if you can build the pyramid all the way to the top such that every triangular pattern in the pyramid is in allowed, or false otherwise.\n        Example 1:\n        Input: bottom = \"BCD\", allowed = [\"BCC\",\"CDE\",\"CEA\",\"FFF\"]\n        Output: true\n        Explanation: The allowed triangular patterns are shown on the right.\n        Starting from the bottom (level 3), we can build \"CE\" on level 2 and then build \"A\" on level 1.\n        There are three triangular patterns in the pyramid, which are \"BCC\", \"CDE\", and \"CEA\". All are allowed.\n        Example 2:\n        Input: bottom = \"AAAA\", allowed = [\"AAB\",\"AAC\",\"BCD\",\"BBE\",\"DEF\"]\n        Output: false\n        Explanation: The allowed triangular patterns are shown on the right.\n        Starting from the bottom (level 4), there are multiple ways to build level 3, but trying all the possibilites, you will get always stuck before building level 1.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        # dfs\n        # time complexity: O(n^2), n is the length of allowed\n        # space complexity: O(n^2), n is the length of allowed\n        self.memo = {}\n        return self.dfs(bottom, allowed, 0)"
    },
    {
        "number": 757,
        "title": "Set Intersection Size At Least Two",
        "difficulty": 2,
        "prompt": "class Solution:\n    def intersectionSizeTwo(self, intervals: List[List[int]]) -> int:\n        \"\"\"\n        You are given a 2D integer array intervals where intervals[i] = [starti, endi] represents all the integers from starti to endi inclusively.\n        A containing set is an array nums where each interval from intervals has at least two integers in nums.\n            For example, if intervals = [[1,3], [3,7], [8,9]], then [1,2,4,7,8,9] and [2,3,4,8,9] are containing sets.\n        Return the minimum possible size of a containing set.\n        Example 1:\n        Input: intervals = [[1,3],[3,7],[8,9]]\n        Output: 5\n        Explanation: let nums = [2, 3, 4, 8, 9].\n        It can be shown that there cannot be any containing array of size 4.\n        Example 2:\n        Input: intervals = [[1,3],[1,4],[2,5],[3,5]]\n        Output: 3\n        Explanation: let nums = [2, 3, 4].\n        It can be shown that there cannot be any containing array of size 2.\n        Example 3:\n        Input: intervals = [[1,2],[2,3],[2,4],[4,5]]\n        Output: 5\n        Explanation: let nums = [1, 2, 3, 4, 5].\n        It can be shown that there cannot be any containing array of size 4.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        intervals.sort(key=lambda x: x[0])\n        n = len(intervals)\n        res = 0\n        for i in range(n):\n            for j in range(i + 1, n):\n                if intervals[j][0] <= intervals[i][1] and intervals[j][1] >= intervals[i][1]:\n                    res += 1\n                    break\n        return res"
    },
    {
        "number": 761,
        "title": "Special Binary String",
        "difficulty": 2,
        "prompt": "class Solution:\n    def makeLargestSpecial(self, s: str) -> str:\n        \"\"\"\n        Special binary strings are binary strings with the following two properties:\n            The number of 0's is equal to the number of 1's.\n            Every prefix of the binary string has at least as many 1's as 0's.\n        You are given a special binary string s.\n        A move consists of choosing two consecutive, non-empty, special substrings of s, and swapping them. Two strings are consecutive if the last character of the first string is exactly one index before the first character of the second string.\n        Return the lexicographically largest resulting string possible after applying the mentioned operations on the string.\n        Example 1:\n        Input: s = \"11011000\"\n        Output: \"11100100\"\n        Explanation: The strings \"10\" [occuring at s[1]] and \"1100\" [at s[3]] are swapped.\n        This is the lexicographically largest string possible after some number of swaps.\n        Example 2:\n        Input: s = \"10\"\n        Output: \"10\"\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        # Time: O(n)\n        # Space: O(n)\n        # n = len(s)\n        # if n == 0:\n        #     return \"\"\n        # dp = [[0] * n for _ in range(n)]\n        # for i in range(n):\n        #     dp[i][i] = 1\n        # for i in range(n - 1, -1, -1):\n        #     for j in range(i + 1, n):\n        #         if s[i] == \"1\" and s[j] == \"1\":\n        #             dp[i][j] = dp[i + 1][j - 1] + 2\n        #         else:\n        #             dp[i][j] = max(dp[i + 1][j], dp[i][j - 1])\n        # return \"\".join([\"1\" if dp[i][j] == dp[i + 1][j] + 1 else \"0\" for i in range(n) for j in range(n)])"
    },
    {
        "number": 762,
        "title": "Prime Number of Set Bits in Binary Representation",
        "difficulty": 0,
        "prompt": "class Solution:\n    def countPrimeSetBits(self, left: int, right: int) -> int:\n        \"\"\"\n        Given two integers left and right, return the count of numbers in the inclusive range [left, right] having a prime number of set bits in their binary representation.\n        Recall that the number of set bits an integer has is the number of 1's present when written in binary.\n            For example, 21 written in binary is 10101, which has 3 set bits.\n        Example 1:\n        Input: left = 6, right = 10\n        Output: 4\n        Explanation:\n        6  -> 110 (2 set bits, 2 is prime)\n        7  -> 111 (3 set bits, 3 is prime)\n        8  -> 1000 (1 set bit, 1 is not prime)\n        9  -> 1001 (2 set bits, 2 is prime)\n        10 -> 1010 (2 set bits, 2 is prime)\n        4 numbers have a prime number of set bits.\n        Example 2:\n        Input: left = 10, right = 15\n        Output: 5\n        Explanation:\n        10 -> 1010 (2 set bits, 2 is prime)\n        11 -> 1011 (3 set bits, 3 is prime)\n        12 -> 1100 (2 set bits, 2 is prime)\n        13 -> 1101 (3 set bits, 3 is prime)\n        14 -> 1110 (3 set bits, 3 is prime)\n        15 -> 1111 (4 set bits, 4 is not prime)\n        5 numbers have a prime number of set bits.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        # Solution 1:\n        # return sum(bin(i).count('1') in (2, 3, 5, 7, 11, 13, 17, 19) for i in range(left, right + 1))"
    },
    {
        "number": 763,
        "title": "Partition Labels",
        "difficulty": 1,
        "prompt": "class Solution:\n    def partitionLabels(self, s: str) -> List[int]:\n        \"\"\"\n        You are given a string s. We want to partition the string into as many parts as possible so that each letter appears in at most one part.\n        Note that the partition is done so that after concatenating all the parts in order, the resultant string should be s.\n        Return a list of integers representing the size of these parts.\n        Example 1:\n        Input: s = \"ababcbacadefegdehijhklij\"\n        Output: [9,7,8]\n        Explanation:\n        The partition is \"ababcbaca\", \"defegde\", \"hijhklij\".\n        This is a partition so that each letter appears in at most one part.\n        A partition like \"ababcbacadefegde\", \"hijhklij\" is incorrect, because it splits s into less parts.\n        Example 2:\n        Input: s = \"eccbbbbdec\"\n        Output: [10]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        # O(n) time\n        # O(n) space\n        last_index_map = {}\n        for i, char in enumerate(s):\n            last_index_map[char] = i"
    },
    {
        "number": 764,
        "title": "Largest Plus Sign",
        "difficulty": 1,
        "prompt": "class Solution:\n    def orderOfLargestPlusSign(self, n: int, mines: List[List[int]]) -> int:\n        \"\"\"\n        You are given an integer n. You have an n x n binary grid grid with all values initially 1's except for some indices given in the array mines. The ith element of the array mines is defined as mines[i] = [xi, yi] where grid[xi][yi] == 0.\n        Return the order of the largest axis-aligned plus sign of 1's contained in grid. If there is none, return 0.\n        An axis-aligned plus sign of 1's of order k has some center grid[r][c] == 1 along with four arms of length k - 1 going up, down, left, and right, and made of 1's. Note that there could be 0's or 1's beyond the arms of the plus sign, only the relevant area of the plus sign is checked for 1's.\n        Example 1:\n        Input: n = 5, mines = [[4,2]]\n        Output: 2\n        Explanation: In the above grid, the largest plus sign can only be of order 2. One of them is shown.\n        Example 2:\n        Input: n = 1, mines = [[0,0]]\n        Output: 0\n        Explanation: There is no plus sign, so return 0.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        # dp[i][j] = the longest plus sign of length i+1 in the grid[0:i, 0:j]\n        # dp[i][j] = min(dp[i-1][j], dp[i][j-1], dp[i-1][j-1]) + 1\n        # dp[0][0] = 0\n        # dp[i][0] = 0\n        # dp[0][j] = 0\n        # dp[i][j] = 0\n        # dp[i][j] = min(dp[i-1][j], dp[i][j-1], dp[i-1][j-1]) + 1\n        # dp[i][j] = min(dp[i-1][j], dp[i][j-1], dp[i-1][j-1]) + 1\n        # dp[i][j] = min(dp[i-1][j], dp[i][j-1], dp[i-1][j-1]) + 1\n        # dp[i][j] = min(dp[i-1][j], dp[i][j-1], dp[i-1][j-1]) + 1\n        # dp["
    },
    {
        "number": 765,
        "title": "Couples Holding Hands",
        "difficulty": 2,
        "prompt": "class Solution:\n    def minSwapsCouples(self, row: List[int]) -> int:\n        \"\"\"\n        There are n couples sitting in 2n seats arranged in a row and want to hold hands.\n        The people and seats are represented by an integer array row where row[i] is the ID of the person sitting in the ith seat. The couples are numbered in order, the first couple being (0, 1), the second couple being (2, 3), and so on with the last couple being (2n - 2, 2n - 1).\n        Return the minimum number of swaps so that every couple is sitting side by side. A swap consists of choosing any two people, then they stand up and switch seats.\n        Example 1:\n        Input: row = [0,2,1,3]\n        Output: 1\n        Explanation: We only need to swap the second (row[1]) and third (row[2]) person.\n        Example 2:\n        Input: row = [3,2,0,1]\n        Output: 0\n        Explanation: All couples are already seated side by side.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        # Time: O(n), space: O(n)\n        # The idea is to use a hashmap to store the couples and their seats.\n        # Then we can iterate through the row and check if the current seat is occupied by a couple.\n        # If it is, we can check if the seat to the left or right of it is occupied by a couple.\n        # If it is, we can swap the couple with the person to its left or right.\n        # If it is not, we can swap the couple with the person to its right.\n        # If the seat to the left is occupied by a couple, we can swap the couple with the person to its left.\n        # If the seat to the right is occupied by a couple, we can swap the couple with the person to its right.\n        # If the seat to the left is not occupied, we can swap the couple with the person to its right.\n        # If the seat to the right is not occupied, we can swap the couple with the person to its left.\n        # If the seat to the left is occupied by a couple, we can swap the couple with the person to its right.\n        # If the seat to the right is occupied by a couple, we can swap the couple with the person to its left.\n        # If the seat to the left is not occupied, we can swap the couple with"
    },
    {
        "number": 766,
        "title": "Toeplitz Matrix",
        "difficulty": 0,
        "prompt": "class Solution:\n    def isToeplitzMatrix(self, matrix: List[List[int]]) -> bool:\n        \"\"\"\n        Given an m x n matrix, return true if the matrix is Toeplitz. Otherwise, return false.\n        A matrix is Toeplitz if every diagonal from top-left to bottom-right has the same elements.\n        Example 1:\n        Input: matrix = [[1,2,3,4],[5,1,2,3],[9,5,1,2]]\n        Output: true\n        Explanation:\n        In the above grid, the diagonals are:\n        \"[9]\", \"[5, 5]\", \"[1, 1, 1]\", \"[2, 2, 2]\", \"[3, 3]\", \"[4]\".\n        In each diagonal all elements are the same, so the answer is True.\n        Example 2:\n        Input: matrix = [[1,2],[2,2]]\n        Output: false\n        Explanation:\n        The diagonal \"[1, 2]\" has different elements.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        m, n = len(matrix), len(matrix[0])\n        for i in range(m):\n            for j in range(n):\n                if i > 0 and j > 0 and matrix[i][j]!= matrix[i - 1][j - 1]:\n                    return False\n        return True"
    },
    {
        "number": 767,
        "title": "Reorganize String",
        "difficulty": 1,
        "prompt": "class Solution:\n    def reorganizeString(self, s: str) -> str:\n        \"\"\"\n        Given a string s, rearrange the characters of s so that any two adjacent characters are not the same.\n        Return any possible rearrangement of s or return \"\" if not possible.\n        Example 1:\n        Input: s = \"aab\"\n        Output: \"aba\"\n        Example 2:\n        Input: s = \"aaab\"\n        Output: \"\"\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        # Time: O(n)\n        # Space: O(n)\n        # hash table\n        # if len(s) < 2:\n        #     return s\n        # d = {}\n        # for c in s:\n        #     d[c] = d.get(c, 0) + 1\n        #\n        # res = \"\"\n        # max_freq = max(d.values())\n        # if max_freq > (len(s) + 1) // 2:\n        #     return \"\"\n        #\n        # for k, v in d.items():\n        #     if v == max_freq:\n        #         res += k\n        #         max_freq -= 1\n        #\n        # for k, v in d.items():\n        #     if v > 1:\n        #         res += k * (v - 1)\n        #\n        # return res"
    },
    {
        "number": 768,
        "title": "Max Chunks To Make Sorted II",
        "difficulty": 2,
        "prompt": "class Solution:\n    def maxChunksToSorted(self, arr: List[int]) -> int:\n        \"\"\"\n        You are given an integer array arr.\n        We split arr into some number of chunks (i.e., partitions), and individually sort each chunk. After concatenating them, the result should equal the sorted array.\n        Return the largest number of chunks we can make to sort the array.\n        Example 1:\n        Input: arr = [5,4,3,2,1]\n        Output: 1\n        Explanation:\n        Splitting into two or more chunks will not return the required result.\n        For example, splitting into [5, 4], [3, 2, 1] will result in [4, 5, 1, 2, 3], which isn't sorted.\n        Example 2:\n        Input: arr = [2,1,3,4,4]\n        Output: 4\n        Explanation:\n        We can split into two chunks, such as [2, 1], [3, 4, 4].\n        However, splitting into [2, 1], [3], [4], [4] is the highest number of chunks possible.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        # Time: O(n), space: O(1)\n        # The idea is to find the maximum number of sorted chunks.\n        # The maximum number of sorted chunks is the number of different numbers in the array.\n        # The number of different numbers in the array is the number of different numbers in the prefix array.\n        # The prefix array is the array of the last element of each chunk.\n        # The last element of the chunk is the minimum element in the chunk.\n        # The minimum element in the chunk is the maximum element in the chunk.\n        # The maximum element in the chunk is the last element in the chunk.\n        # The last element in the chunk is the maximum element in the chunk.\n        # The maximum element in the chunk is the last element in the chunk.\n        # The last element in the chunk is the maximum element in the chunk.\n        # The maximum element in the chunk is the last element in the chunk.\n        # The last element in the chunk is the maximum element in the chunk.\n        # The maximum element in the chunk is the last element in the chunk.\n        # The last element in the chunk is the maximum element in the chunk.\n        # The maximum element in the chunk is the last element in the chunk.\n        # The last element in the chunk is the maximum element in the chunk.\n        # The maximum element in the chunk"
    },
    {
        "number": 769,
        "title": "Max Chunks To Make Sorted",
        "difficulty": 1,
        "prompt": "class Solution:\n    def maxChunksToSorted(self, arr: List[int]) -> int:\n        \"\"\"\n        You are given an integer array arr of length n that represents a permutation of the integers in the range [0, n - 1].\n        We split arr into some number of chunks (i.e., partitions), and individually sort each chunk. After concatenating them, the result should equal the sorted array.\n        Return the largest number of chunks we can make to sort the array.\n        Example 1:\n        Input: arr = [4,3,2,1,0]\n        Output: 1\n        Explanation:\n        Splitting into two or more chunks will not return the required result.\n        For example, splitting into [4, 3], [2, 1, 0] will result in [3, 4, 0, 1, 2], which isn't sorted.\n        Example 2:\n        Input: arr = [1,0,2,3,4]\n        Output: 4\n        Explanation:\n        We can split into two chunks, such as [1, 0], [2, 3, 4].\n        However, splitting into [1, 0], [2], [3], [4] is the highest number of chunks possible.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        # Solution 1:\n        # max_chunks = 0\n        # for i in range(len(arr)):\n        #     max_chunks = max(max_chunks, self.maxChunksToSorted(arr[:i]) + self.maxChunksToSorted(arr[i:]))\n        # return max_chunks"
    },
    {
        "number": 770,
        "title": "Basic Calculator IV",
        "difficulty": 2,
        "prompt": "class Solution:\n    def basicCalculatorIV(self, expression: str, evalvars: List[str], evalints: List[int]) -> List[str]:\n        \"\"\"\n        Given an expression such as expression = \"e + 8 - a + 5\" and an evaluation map such as {\"e\": 1} (given in terms of evalvars = [\"e\"] and evalints = [1]), return a list of tokens representing the simplified expression, such as [\"-1*a\",\"14\"]\n            An expression alternates chunks and symbols, with a space separating each chunk and symbol.\n            A chunk is either an expression in parentheses, a variable, or a non-negative integer.\n            A variable is a string of lowercase letters (not including digits.) Note that variables can be multiple letters, and note that variables never have a leading coefficient or unary operator like \"2x\" or \"-x\".\n        Expressions are evaluated in the usual order: brackets first, then multiplication, then addition and subtraction.\n            For example, expression = \"1 + 2 * 3\" has an answer of [\"7\"].\n        The format of the output is as follows:\n            For each term of free variables with a non-zero coefficient, we write the free variables within a term in sorted order lexicographically.\n                For example, we would never write a term like \"b*a*c\", only \"a*b*c\".\n            Terms have degrees equal to the number of free variables being multiplied, counting multiplicity. We write the largest degree terms of our answer first, breaking ties by lexicographic order ignoring the leading coefficient of the term.\n                For example, \"a*a*b*c\" has degree 4.\n            The leading coefficient of the term is placed directly to the left with an asterisk separating it from the variables (if they exist.) A leading coefficient of 1 is still printed.\n            An example of a well-formatted answer is [\"-2*a*a*a\", \"3*a*a*b\", \"3*b*b\", \"4*a\", \"5*c\", \"-6\"].\n            Terms (including constant terms) with coefficient 0 are not included.\n                For example, an expression of \"0\" has an output of [].\n        Note: You may assume that the given expression is always valid. All intermediate results will be in the range of [-231, 231 - 1].\n        Example 1:\n        Input: expression = \"e + 8 - a + 5\", evalvars = [\"e\"], evalints = [1]\n        Output: [\"-1*a\",\"14\"]\n        Example 2:\n        Input: expression = \"e - 8 + temperature - pressure\", evalvars = [\"e\", \"temperature\"], evalints = [1, 12]\n        Output: [\"-1*pressure\",\"5\"]\n        Example 3:\n        Input: expression = \"(e + 8) * (e - 8)\", evalvars = [], evalints = []\n        Output: [\"1*e*e\",\"-64\"]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        # Time: O(n), space: O(n)\n        # stack = []\n        # i = 0\n        # while i < len(expression):\n        #     if expression[i] == '(':\n        #         stack.append(expression[i])\n        #     elif expression[i] == ')':\n        #         while stack[-1]!= '(':\n        #             stack.pop()\n        #         stack.pop()\n        #     elif expression[i].isalpha():\n        #         while stack and stack[-1].isalpha():\n        #             stack.pop()\n        #         stack.append(expression[i])\n        #     elif expression[i].isdigit():\n        #         while stack and stack[-1].isdigit():\n        #             stack.pop()\n        #         stack.append(expression[i])\n        #     i += 1\n        # # print(stack)\n        # # print(expression)\n        # expression = ''.join(stack)\n        # # print(expression)\n        # expression = expression.split(' ')\n        # # print(expression)\n        # # print(expression[0])\n        # # print(expression[1])\n        # # print(expression[2])\n        # # print(expression["
    },
    {
        "number": 771,
        "title": "Jewels and Stones",
        "difficulty": 0,
        "prompt": "class Solution:\n    def numJewelsInStones(self, jewels: str, stones: str) -> int:\n        \"\"\"\n        You're given strings jewels representing the types of stones that are jewels, and stones representing the stones you have. Each character in stones is a type of stone you have. You want to know how many of the stones you have are also jewels.\n        Letters are case sensitive, so \"a\" is considered a different type of stone from \"A\".\n        Example 1:\n        Input: jewels = \"aA\", stones = \"aAAbbbb\"\n        Output: 3\n        Example 2:\n        Input: jewels = \"z\", stones = \"ZZ\"\n        Output: 0\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        jewels_set = set(jewels)\n        count = 0\n        for stone in stones:\n            if stone in jewels_set:\n                count += 1\n        return count"
    },
    {
        "number": 773,
        "title": "Sliding Puzzle",
        "difficulty": 2,
        "prompt": "class Solution:\n    def slidingPuzzle(self, board: List[List[int]]) -> int:\n        \"\"\"\n        On an 2 x 3 board, there are five tiles labeled from 1 to 5, and an empty square represented by 0. A move consists of choosing 0 and a 4-directionally adjacent number and swapping it.\n        The state of the board is solved if and only if the board is [[1,2,3],[4,5,0]].\n        Given the puzzle board board, return the least number of moves required so that the state of the board is solved. If it is impossible for the state of the board to be solved, return -1.\n        Example 1:\n        Input: board = [[1,2,3],[4,0,5]]\n        Output: 1\n        Explanation: Swap the 0 and the 5 in one move.\n        Example 2:\n        Input: board = [[1,2,3],[5,4,0]]\n        Output: -1\n        Explanation: No number of moves will make the board solved.\n        Example 3:\n        Input: board = [[4,1,2],[5,0,3]]\n        Output: 5\n        Explanation: 5 is the smallest number of moves that solves the board.\n        An example path:\n        After move 0: [[4,1,2],[5,0,3]]\n        After move 1: [[4,1,2],[0,5,3]]\n        After move 2: [[0,1,2],[4,5,3]]\n        After move 3: [[1,0,2],[4,5,3]]\n        After move 4: [[1,2,0],[4,5,3]]\n        After move 5: [[1,2,3],[4,5,0]]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        # BFS\n        # queue = collections.deque([(board, 0)])\n        # seen = set()\n        # while queue:\n        #     board, step = queue.popleft()\n        #     if tuple(tuple(row) for row in board) in seen:\n        #         continue\n        #     seen.add(tuple(tuple(row) for row in board))\n        #     if board == [[1,2,3],[4,5,0]]:\n        #         return step\n        #     for i in range(len(board)):\n        #         for j in range(len(board[0])):\n        #             if board[i][j] == 0:\n        #                 x, y = i, j\n        #     for dx, dy in [(1, 0), (-1, 0), (0, 1), (0, -1)]:\n        #         nx, ny = x + dx, y + dy\n        #         if 0 <= nx < len(board) and 0 <= ny < len(board[0]):\n        #             board[x][y], board[nx][ny] = board[nx][ny], board[x][y]\n        #             queue.append((board, step + 1))\n        #             board"
    },
    {
        "number": 775,
        "title": "Global and Local Inversions",
        "difficulty": 1,
        "prompt": "class Solution:\n    def isIdealPermutation(self, nums: List[int]) -> bool:\n        \"\"\"\n        You are given an integer array nums of length n which represents a permutation of all the integers in the range [0, n - 1].\n        The number of global inversions is the number of the different pairs (i, j) where:\n            0 <= i < j < n\n            nums[i] > nums[j]\n        The number of local inversions is the number of indices i where:\n            0 <= i < n - 1\n            nums[i] > nums[i + 1]\n        Return true if the number of global inversions is equal to the number of local inversions.\n        Example 1:\n        Input: nums = [1,0,2]\n        Output: true\n        Explanation: There is 1 global inversion and 1 local inversion.\n        Example 2:\n        Input: nums = [1,2,0]\n        Output: false\n        Explanation: There are 2 global inversions and 1 local inversion.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        # Time complexity: O(n)\n        # Space complexity: O(1)\n        n = len(nums)\n        if n < 2:\n            return True\n        \n        # global inversion\n        # nums[i] > nums[j]\n        # nums[i] > nums[i+1]\n        # nums[i] > nums[i+2]\n        #...\n        # nums[i] > nums[n-1]\n        # nums[i] > nums[n]\n        # nums[i] > nums[n+1]\n        #...\n        # nums[i] > nums[2*n-1]\n        # nums[i] > nums[2*n]\n        # nums[i] > nums[2*n+1]\n        #...\n        # nums[i] > nums[n*n-1]\n        # nums[i] > nums[n*n]\n        # nums[i] > nums[n*n+1]\n        #...\n        # nums[i] > nums[n*n*n-1]\n        # nums[i] > nums[n*n*n]\n        #"
    },
    {
        "number": 777,
        "title": "Swap Adjacent in LR String",
        "difficulty": 1,
        "prompt": "class Solution:\n    def canTransform(self, start: str, end: str) -> bool:\n        \"\"\"\n        In a string composed of 'L', 'R', and 'X' characters, like \"RXXLRXRXL\", a move consists of either replacing one occurrence of \"XL\" with \"LX\", or replacing one occurrence of \"RX\" with \"XR\". Given the starting string start and the ending string end, return True if and only if there exists a sequence of moves to transform one string to the other.\n        Example 1:\n        Input: start = \"RXXLRXRXL\", end = \"XRLXXRRLX\"\n        Output: true\n        Explanation: We can transform start to end following these steps:\n        RXXLRXRXL ->\n        XRXLRXRXL ->\n        XRLXRXRXL ->\n        XRLXXRRXL ->\n        XRLXXRRLX\n        Example 2:\n        Input: start = \"X\", end = \"L\"\n        Output: false\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        if len(start)!= len(end):\n            return False\n        if start == end:\n            return True\n        i = 0\n        while i < len(start):\n            if start[i] == 'X' and end[i] == 'L':\n                i += 1\n                continue\n            if start[i] == 'L' and end[i] == 'X':\n                i += 1\n                continue\n            if start[i] == 'R' and end[i] == 'X':\n                i += 1\n                continue\n            if start[i] == 'X' and end[i] == 'R':\n                i += 1\n                continue\n            return False\n        return True"
    },
    {
        "number": 778,
        "title": "Swim in Rising Water",
        "difficulty": 2,
        "prompt": "class Solution:\n    def swimInWater(self, grid: List[List[int]]) -> int:\n        \"\"\"\n        You are given an n x n integer matrix grid where each value grid[i][j] represents the elevation at that point (i, j).\n        The rain starts to fall. At time t, the depth of the water everywhere is t. You can swim from a square to another 4-directionally adjacent square if and only if the elevation of both squares individually are at most t. You can swim infinite distances in zero time. Of course, you must stay within the boundaries of the grid during your swim.\n        Return the least time until you can reach the bottom right square (n - 1, n - 1) if you start at the top left square (0, 0).\n        Example 1:\n        Input: grid = [[0,2],[1,3]]\n        Output: 3\n        Explanation:\n        At time 0, you are in grid location (0, 0).\n        You cannot go anywhere else because 4-directionally adjacent neighbors have a higher elevation than t = 0.\n        You cannot reach point (1, 1) until time 3.\n        When the depth of water is 3, we can swim anywhere inside the grid.\n        Example 2:\n        Input: grid = [[0,1,2,3,4],[24,23,22,21,5],[12,13,14,15,16],[11,17,18,19,20],[10,9,8,7,6]]\n        Output: 16\n        Explanation: The final route is shown.\n        We need to wait until time 16 so that (0, 0) and (4, 4) are connected.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        n = len(grid)\n        heap = [(grid[0][0], 0, 0)]\n        visited = set()\n        while heap:\n            t, i, j = heapq.heappop(heap)\n            if i == n - 1 and j == n - 1:\n                return t\n            for x, y in [(i + 1, j), (i - 1, j), (i, j + 1), (i, j - 1)]:\n                if 0 <= x < n and 0 <= y < n and (x, y) not in visited:\n                    heapq.heappush(heap, (max(t, grid[x][y]), x, y))\n                    visited.add((x, y))\n<|endoftext|>"
    },
    {
        "number": 779,
        "title": "K-th Symbol in Grammar",
        "difficulty": 1,
        "prompt": "class Solution:\n    def kthGrammar(self, n: int, k: int) -> int:\n        \"\"\"\n        We build a table of n rows (1-indexed). We start by writing 0 in the 1st row. Now in every subsequent row, we look at the previous row and replace each occurrence of 0 with 01, and each occurrence of 1 with 10.\n            For example, for n = 3, the 1st row is 0, the 2nd row is 01, and the 3rd row is 0110.\n        Given two integer n and k, return the kth (1-indexed) symbol in the nth row of a table of n rows.\n        Example 1:\n        Input: n = 1, k = 1\n        Output: 0\n        Explanation: row 1: 0\n        Example 2:\n        Input: n = 2, k = 1\n        Output: 0\n        Explanation: \n        row 1: 0\n        row 2: 01\n        Example 3:\n        Input: n = 2, k = 2\n        Output: 1\n        Explanation: \n        row 1: 0\n        row 2: 01\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        if n == 1:\n            return 0\n        if k == 1:\n            return 0\n        if k == 2:\n            return 1\n        \n        # if n == 2:\n        #     return 0\n        \n        # if n == 3:\n        #     return 0\n        \n        # if n == 4:\n        #     return 0\n        \n        # if n == 5:\n        #     return 0\n        \n        # if n == 6:\n        #     return 0\n        \n        # if n == 7:\n        #     return 0\n        \n        # if n == 8:\n        #     return 0\n        \n        # if n == 9:\n        #     return 0\n        \n        # if n == 10:\n        #     return 0\n        \n        # if n == 11:\n        #     return 0\n        \n        # if n == 12:\n        #     return 0\n        \n        # if n == 13:\n        #     return 0\n        \n        # if n == 14:\n        #     return 0\n        \n        # if n == 15:\n        #     return 0\n        \n        # if n == 16:\n        #     return 0\n        \n        # if n == 17:\n        #     return 0\n        \n        # if n == 18:\n        "
    },
    {
        "number": 780,
        "title": "Reaching Points",
        "difficulty": 2,
        "prompt": "class Solution:\n    def reachingPoints(self, sx: int, sy: int, tx: int, ty: int) -> bool:\n        \"\"\"\n        Given four integers sx, sy, tx, and ty, return true if it is possible to convert the point (sx, sy) to the point (tx, ty) through some operations, or false otherwise.\n        The allowed operation on some point (x, y) is to convert it to either (x, x + y) or (x + y, y).\n        Example 1:\n        Input: sx = 1, sy = 1, tx = 3, ty = 5\n        Output: true\n        Explanation:\n        One series of moves that transforms the starting point to the target is:\n        (1, 1) -> (1, 2)\n        (1, 2) -> (3, 2)\n        (3, 2) -> (3, 5)\n        Example 2:\n        Input: sx = 1, sy = 1, tx = 2, ty = 2\n        Output: false\n        Example 3:\n        Input: sx = 1, sy = 1, tx = 1, ty = 1\n        Output: true\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        while tx >= sx and ty >= sy:\n            if tx == ty:\n                return True\n            elif tx > ty:\n                if ty > sy:\n                    tx %= ty\n                else:\n                    return (tx - sx) % ty == 0\n            else:\n                if tx > sx:\n                    ty %= tx\n                else:\n                    return (ty - sy) % tx == 0\n        return False"
    },
    {
        "number": 781,
        "title": "Rabbits in Forest",
        "difficulty": 1,
        "prompt": "class Solution:\n    def numRabbits(self, answers: List[int]) -> int:\n        \"\"\"\n        There is a forest with an unknown number of rabbits. We asked n rabbits \"How many rabbits have the same color as you?\" and collected the answers in an integer array answers where answers[i] is the answer of the ith rabbit.\n        Given the array answers, return the minimum number of rabbits that could be in the forest.\n        Example 1:\n        Input: answers = [1,1,2]\n        Output: 5\n        Explanation:\n        The two rabbits that answered \"1\" could both be the same color, say red.\n        The rabbit that answered \"2\" can't be red or the answers would be inconsistent.\n        Say the rabbit that answered \"2\" was blue.\n        Then there should be 2 other blue rabbits in the forest that didn't answer into the array.\n        The smallest possible number of rabbits in the forest is therefore 5: 3 that answered plus 2 that didn't.\n        Example 2:\n        Input: answers = [10,10,10]\n        Output: 11\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        # \u5206\u7c7b\u8ba8\u8bba\n        # \u5982\u679c\u4e00\u4e2a\u4eba\u62a5\u7684\u7b54\u6848\u662f1\uff0c\u90a3\u4e48\u8fd9\u4e2a\u4eba\u4e00\u5b9a\u662f\u7ea2\u8272\uff0c\u90a3\u4e48\u4ed6\u7684\u7ea2\u8272\u7b54\u6848\u4e00\u5b9a\u662f1\uff0c\u90a3\u4e48\u4ed6\u4e00\u5b9a\u662f\u7ea2\u8272\u7684\u4eba\uff0c\u90a3\u4e48\u4ed6\u4e00\u5b9a\u662f\u7ea2\u8272\u7684\u4eba\u7684\u7b54\u6848\u4e00\u5b9a\u662f1\uff0c\u90a3\u4e48\u4ed6\u4e00\u5b9a\u662f\u7ea2\u8272\u7684\u4eba\u7684\u7b54\u6848\u4e00\u5b9a\u662f1\uff0c\u90a3\u4e48\u4ed6\u4e00\u5b9a\u662f\u7ea2\u8272\u7684\u4eba\u7684\u7b54\u6848\u4e00\u5b9a\u662f1\uff0c\u90a3\u4e48\u4ed6\u4e00\u5b9a\u662f\u7ea2\u8272\u7684\u4eba\u7684\u7b54\u6848\u4e00\u5b9a\u662f1\uff0c\u90a3\u4e48\u4ed6\u4e00\u5b9a\u662f\u7ea2\u8272\u7684\u4eba\u7684\u7b54\u6848\u4e00\u5b9a\u662f1\uff0c\u90a3\u4e48\u4ed6\u4e00\u5b9a\u662f\u7ea2\u8272\u7684\u4eba\u7684\u7b54"
    },
    {
        "number": 782,
        "title": "Transform to Chessboard",
        "difficulty": 2,
        "prompt": "class Solution:\n    def movesToChessboard(self, board: List[List[int]]) -> int:\n        \"\"\"\n        You are given an n x n binary grid board. In each move, you can swap any two rows with each other, or any two columns with each other.\n        Return the minimum number of moves to transform the board into a chessboard board. If the task is impossible, return -1.\n        A chessboard board is a board where no 0's and no 1's are 4-directionally adjacent.\n        Example 1:\n        Input: board = [[0,1,1,0],[0,1,1,0],[1,0,0,1],[1,0,0,1]]\n        Output: 2\n        Explanation: One potential sequence of moves is shown.\n        The first move swaps the first and second column.\n        The second move swaps the second and third row.\n        Example 2:\n        Input: board = [[0,1],[1,0]]\n        Output: 0\n        Explanation: Also note that the board with 0 in the top left corner, is also a valid chessboard.\n        Example 3:\n        Input: board = [[1,0],[1,0]]\n        Output: -1\n        Explanation: No matter what sequence of moves you make, you cannot end with a valid chessboard.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        n = len(board)\n        if n < 2:\n            return 0\n        if n % 2 == 1:\n            return -1\n        if n % 2 == 0:\n            if sum(board[0])!= n or sum(board[-1])!= n:\n                return -1\n        if n % 4 == 0:\n            if sum([board[i][0] for i in range(n)])!= n or sum([board[i][-1] for i in range(n)])!= n:\n                return -1\n        if n % 4 == 2:\n            if sum([board[i][0] for i in range(n)])!= n or sum([board[i][-1] for i in range(n)])!= n:\n                return -1\n        if n % 4 == 3:\n            if sum([board[0][i] for i in range(n)])!= n or sum([board[-1][i] for i in range(n)])!= n:\n                return -1\n        if n % 4 == 1:\n            if sum([board[0][i] for i in range(n)])!= n or sum([board[-1][i] for i in range(n)])!= n:\n                return -1\n        # print(board)\n"
    },
    {
        "number": 783,
        "title": "Minimum Distance Between BST Nodes",
        "difficulty": 0,
        "prompt": "class Solution:\n    def minDiffInBST(self, root: Optional[TreeNode]) -> int:\n        \"\"\"\n        Given the root of a Binary Search Tree (BST), return the minimum difference between the values of any two different nodes in the tree.\n        Example 1:\n        Input: root = [4,2,6,1,3]\n        Output: 1\n        Example 2:\n        Input: root = [1,0,48,null,null,12,49]\n        Output: 1\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        self.min_diff = float('inf')\n        self.preorder(root)\n        return self.min_diff"
    },
    {
        "number": 784,
        "title": "Letter Case Permutation",
        "difficulty": 1,
        "prompt": "class Solution:\n    def letterCasePermutation(self, s: str) -> List[str]:\n        \"\"\"\n        Given a string s, you can transform every letter individually to be lowercase or uppercase to create another string.\n        Return a list of all possible strings we could create. Return the output in any order.\n        Example 1:\n        Input: s = \"a1b2\"\n        Output: [\"a1b2\",\"a1B2\",\"A1b2\",\"A1B2\"]\n        Example 2:\n        Input: s = \"3z4\"\n        Output: [\"3z4\",\"3Z4\"]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        # \u601d\u8def\uff1a\u56de\u6eaf\u6cd5\uff0c\u6bcf\u6b21\u9012\u5f52\u90fd\u662f\u628a\u5f53\u524d\u5b57\u7b26\u6539\u6210\u5c0f\u5199\u6216\u5927\u5199\uff0c\u7136\u540e\u7ee7\u7eed\u9012\u5f52\u4e0b\u53bb\n        # \u56de\u6eaf\u6cd5\u7684\u7ec8\u6b62\u6761\u4ef6\u662f\uff0c\u5f53\u524d\u5b57\u7b26\u4e32\u4e3a\u7a7a\uff0c\u6216\u8005\u5f53\u524d\u5b57\u7b26\u4e32\u7684\u957f\u5ea6\u4e3a1\u65f6\uff0c\u8fd4\u56de\u5f53\u524d\u5b57\u7b26\u4e32\n        # \u5982\u679c\u5f53\u524d\u5b57\u7b26\u4e32\u7684\u957f\u5ea6\u5927\u4e8e1\uff0c\u90a3\u4e48\u5c31\u628a\u5f53\u524d\u5b57\u7b26\u4e32\u7684\u7b2c\u4e00\u4e2a\u5b57\u7b26\u6539\u6210\u5c0f\u5199\u6216\u5927\u5199\uff0c\u7136\u540e\u9012\u5f52\u4e0b\u53bb\n        # \u56de\u6eaf\u6cd5\u7684\u7ec8\u6b62\u6761\u4ef6\u662f\uff0c\u5f53\u524d\u5b57\u7b26\u4e32\u7684"
    },
    {
        "number": 785,
        "title": "Is Graph Bipartite?",
        "difficulty": 1,
        "prompt": "class Solution:\n    def isBipartite(self, graph: List[List[int]]) -> bool:\n        \"\"\"\n        There is an undirected graph with n nodes, where each node is numbered between 0 and n - 1. You are given a 2D array graph, where graph[u] is an array of nodes that node u is adjacent to. More formally, for each v in graph[u], there is an undirected edge between node u and node v. The graph has the following properties:\n            There are no self-edges (graph[u] does not contain u).\n            There are no parallel edges (graph[u] does not contain duplicate values).\n            If v is in graph[u], then u is in graph[v] (the graph is undirected).\n            The graph may not be connected, meaning there may be two nodes u and v such that there is no path between them.\n        A graph is bipartite if the nodes can be partitioned into two independent sets A and B such that every edge in the graph connects a node in set A and a node in set B.\n        Return true if and only if it is bipartite.\n        Example 1:\n        Input: graph = [[1,2,3],[0,2],[0,1,3],[0,2]]\n        Output: false\n        Explanation: There is no way to partition the nodes into two independent sets such that every edge connects a node in one and a node in the other.\n        Example 2:\n        Input: graph = [[1,3],[0,2],[1,3],[0,2]]\n        Output: true\n        Explanation: We can partition the nodes into two sets: {0, 2} and {1, 3}.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        # DFS\n        # Time: O(V + E), V: # of vertices, E: # of edges\n        # Space: O(V + E)\n        # def dfs(node, color):\n        #     if colors[node]!= 0:\n        #         return colors[node] == color\n        #     colors[node] = color\n        #     for neighbor in graph[node]:\n        #         if not dfs(neighbor, -color):\n        #             return False\n        #     return True\n        # colors = [0] * len(graph)\n        # for node in range(len(graph)):\n        #     if not dfs(node, 1):\n        #         return False\n        # return True"
    },
    {
        "number": 786,
        "title": "K-th Smallest Prime Fraction",
        "difficulty": 1,
        "prompt": "class Solution:\n    def kthSmallestPrimeFraction(self, arr: List[int], k: int) -> List[int]:\n        \"\"\"\n        You are given a sorted integer array arr containing 1 and prime numbers, where all the integers of arr are unique. You are also given an integer k.\n        For every i and j where 0 <= i < j < arr.length, we consider the fraction arr[i] / arr[j].\n        Return the kth smallest fraction considered. Return your answer as an array of integers of size 2, where answer[0] == arr[i] and answer[1] == arr[j].\n        Example 1:\n        Input: arr = [1,2,3,5], k = 3\n        Output: [2,5]\n        Explanation: The fractions to be considered in sorted order are:\n        1/5, 1/3, 2/5, 1/2, 3/5, and 2/3.\n        The third fraction is 2/5.\n        Example 2:\n        Input: arr = [1,7], k = 1\n        Output: [1,7]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        import heapq\n        import bisect\n        import math\n        \n        def check(x):\n            i = bisect.bisect_left(arr, x)\n            if i == 0:\n                return False\n            j = bisect.bisect_right(arr, x)\n            return j - i == 1\n        \n        def get_fraction(x):\n            i = bisect.bisect_left(arr, x)\n            j = bisect.bisect_right(arr, x)\n            return arr[i] / arr[j]\n        \n        def get_fraction_list(x):\n            i = bisect.bisect_left(arr, x)\n            j = bisect.bisect_right(arr, x)\n            return [arr[i], arr[j]]\n        \n        def get_fraction_list_prime(x):\n            i = bisect.bisect_left(arr, x)\n            j = bisect.bisect_right(arr, x)\n            return [arr[i], arr[j]]\n        \n        def get_fraction_list_prime_prime(x):\n            i = bisect.bisect_left(arr, x)\n            j = bisect.bisect_right(arr, x)\n            return"
    },
    {
        "number": 787,
        "title": "Cheapest Flights Within K Stops",
        "difficulty": 1,
        "prompt": "class Solution:\n    def findCheapestPrice(self, n: int, flights: List[List[int]], src: int, dst: int, k: int) -> int:\n        \"\"\"\n        There are n cities connected by some number of flights. You are given an array flights where flights[i] = [fromi, toi, pricei] indicates that there is a flight from city fromi to city toi with cost pricei.\n        You are also given three integers src, dst, and k, return the cheapest price from src to dst with at most k stops. If there is no such route, return -1.\n        Example 1:\n        Input: n = 4, flights = [[0,1,100],[1,2,100],[2,0,100],[1,3,600],[2,3,200]], src = 0, dst = 3, k = 1\n        Output: 700\n        Explanation:\n        The graph is shown above.\n        The optimal path with at most 1 stop from city 0 to 3 is marked in red and has cost 100 + 600 = 700.\n        Note that the path through cities [0,1,2,3] is cheaper but is invalid because it uses 2 stops.\n        Example 2:\n        Input: n = 3, flights = [[0,1,100],[1,2,100],[0,2,500]], src = 0, dst = 2, k = 1\n        Output: 200\n        Explanation:\n        The graph is shown above.\n        The optimal path with at most 1 stop from city 0 to 2 is marked in red and has cost 100 + 100 = 200.\n        Example 3:\n        Input: n = 3, flights = [[0,1,100],[1,2,100],[0,2,500]], src = 0, dst = 2, k = 0\n        Output: 500\n        Explanation:\n        The graph is shown above.\n        The optimal path with no stops from city 0 to 2 is marked in red and has cost 500.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        # Dijkstra\n        # Time: O(ElogV), where E is the number of edges and V is the number of vertices.\n        # Space: O(V)\n        graph = collections.defaultdict(list)\n        for u, v, w in flights:\n            graph[u].append((v, w))\n        heap = [(0, src, k)]\n        while heap:\n            cost, node, stops = heapq.heappop(heap)\n            if node == dst:\n                return cost\n            if stops:\n                for v, w in graph[node]:\n                    heapq.heappush(heap, (cost + w, v, stops - 1))\n        return -1"
    },
    {
        "number": 788,
        "title": "Rotated Digits",
        "difficulty": 1,
        "prompt": "class Solution:\n    def rotatedDigits(self, n: int) -> int:\n        \"\"\"\n        An integer x is a good if after rotating each digit individually by 180 degrees, we get a valid number that is different from x. Each digit must be rotated - we cannot choose to leave it alone.\n        A number is valid if each digit remains a digit after rotation. For example:\n            0, 1, and 8 rotate to themselves,\n            2 and 5 rotate to each other (in this case they are rotated in a different direction, in other words, 2 or 5 gets mirrored),\n            6 and 9 rotate to each other, and\n            the rest of the numbers do not rotate to any other number and become invalid.\n        Given an integer n, return the number of good integers in the range [1, n].\n        Example 1:\n        Input: n = 10\n        Output: 4\n        Explanation: There are four good numbers in the range [1, 10] : 2, 5, 6, 9.\n        Note that 1 and 10 are not good numbers, since they remain unchanged after rotating.\n        Example 2:\n        Input: n = 1\n        Output: 0\n        Example 3:\n        Input: n = 2\n        Output: 1\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        good = 0\n        for i in range(1, n+1):\n            if self.is_good(i):\n                good += 1\n        return good"
    },
    {
        "number": 789,
        "title": "Escape The Ghosts",
        "difficulty": 1,
        "prompt": "class Solution:\n    def escapeGhosts(self, ghosts: List[List[int]], target: List[int]) -> bool:\n        \"\"\"\n        You are playing a simplified PAC-MAN game on an infinite 2-D grid. You start at the point [0, 0], and you are given a destination point target = [xtarget, ytarget] that you are trying to get to. There are several ghosts on the map with their starting positions given as a 2D array ghosts, where ghosts[i] = [xi, yi] represents the starting position of the ith ghost. All inputs are integral coordinates.\n        Each turn, you and all the ghosts may independently choose to either move 1 unit in any of the four cardinal directions: north, east, south, or west, or stay still. All actions happen simultaneously.\n        You escape if and only if you can reach the target before any ghost reaches you. If you reach any square (including the target) at the same time as a ghost, it does not count as an escape.\n        Return true if it is possible to escape regardless of how the ghosts move, otherwise return false.\n        Example 1:\n        Input: ghosts = [[1,0],[0,3]], target = [0,1]\n        Output: true\n        Explanation: You can reach the destination (0, 1) after 1 turn, while the ghosts located at (1, 0) and (0, 3) cannot catch up with you.\n        Example 2:\n        Input: ghosts = [[1,0]], target = [2,0]\n        Output: false\n        Explanation: You need to reach the destination (2, 0), but the ghost at (1, 0) lies between you and the destination.\n        Example 3:\n        Input: ghosts = [[2,0]], target = [1,0]\n        Output: false\n        Explanation: The ghost can reach the target at the same time as you.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        # \u8fd9\u9053\u9898\u76ee\u5176\u5b9e\u5c31\u662f\u4e00\u4e2a\u6700\u77ed\u8def\u5f84\u95ee\u9898\uff0c\u4f46\u662f\u8fd9\u4e2a\u95ee\u9898\u6709\u4e2a\u7279\u6b8a\u7684\u5730\u65b9\u5c31\u662f\uff0c\u5982\u679c\u6709\u4e00\u4e2aghost\u5728\u7ec8\u70b9\uff0c\u90a3\u4e48\u5c31\u4e0d\u80fd\u8d70\u5230\u7ec8\u70b9\uff0c\u6240\u4ee5\u8fd9\u91cc\u9700\u8981\u4e00\u4e2avisited\u6570\u7ec4\u6765\u8bb0\u5f55\u5df2\u7ecf\u8d70\u8fc7\u7684\u8def\u5f84\uff0c\n        # \u5982\u679c\u6709\u4e00\u4e2aghost\u5728\u7ec8\u70b9\uff0c\u90a3\u4e48\u5c31\u4e0d\u80fd\u8d70\u5230\u7ec8\u70b9\uff0c\u6240\u4ee5\u8fd9\u91cc\u9700\u8981\u4e00\u4e2avisited\u6570\u7ec4\u6765\u8bb0\u5f55\u5df2\u7ecf\u8d70\u8fc7\u7684\u8def\u5f84\uff0c\n        # \u5982\u679c\u6709\u4e00\u4e2aghost\u5728\u7ec8\u70b9\uff0c\u90a3\u4e48\u5c31\u4e0d\ufffd"
    },
    {
        "number": 790,
        "title": "Domino and Tromino Tiling",
        "difficulty": 1,
        "prompt": "class Solution:\n    def numTilings(self, n: int) -> int:\n        \"\"\"\n        You have two types of tiles: a 2 x 1 domino shape and a tromino shape. You may rotate these shapes.\n        Given an integer n, return the number of ways to tile an 2 x n board. Since the answer may be very large, return it modulo 109 + 7.\n        In a tiling, every square must be covered by a tile. Two tilings are different if and only if there are two 4-directionally adjacent cells on the board such that exactly one of the tilings has both squares occupied by a tile.\n        Example 1:\n        Input: n = 3\n        Output: 5\n        Explanation: The five different ways are show above.\n        Example 2:\n        Input: n = 1\n        Output: 1\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        # dp[i] = dp[i-1] + dp[i-2]\n        # dp[i] = dp[i-1] + dp[i-2] + dp[i-3] + dp[i-4] + dp[i-5]\n        # dp[i] = dp[i-1] + dp[i-2] + dp[i-3] + dp[i-4] + dp[i-5] + dp[i-6] + dp[i-7] + dp[i-8] + dp[i-9] + dp[i-10] + dp[i-11] + dp[i-12] + dp[i-13] + dp[i-14] + dp[i-15]\n        # dp[i] = dp[i-1] + dp[i-2] + dp[i-3] + dp[i-4] + dp[i-5] + dp[i-6] + dp[i-7] + dp[i-8] + dp[i-9] + dp[i-10] + dp[i-11] + dp[i"
    },
    {
        "number": 791,
        "title": "Custom Sort String",
        "difficulty": 1,
        "prompt": "class Solution:\n    def customSortString(self, order: str, s: str) -> str:\n        \"\"\"\n        You are given two strings order and s. All the characters of order are unique and were sorted in some custom order previously.\n        Permute the characters of s so that they match the order that order was sorted. More specifically, if a character x occurs before a character y in order, then x should occur before y in the permuted string.\n        Return any permutation of s that satisfies this property.\n        Example 1:\n        Input: order = \"cba\", s = \"abcd\"\n        Output: \"cbad\"\n        Explanation: \n        \"a\", \"b\", \"c\" appear in order, so the order of \"a\", \"b\", \"c\" should be \"c\", \"b\", and \"a\". \n        Since \"d\" does not appear in order, it can be at any position in the returned string. \"dcba\", \"cdba\", \"cbda\" are also valid outputs.\n        Example 2:\n        Input: order = \"cbafg\", s = \"abcd\"\n        Output: \"cbad\"\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        \n        # order = \"cbafg\"\n        # s = \"abcd\"\n        \n        # order = \"abcdefghijklmnopqrstuvwxyz\"\n        # s = \"leetcode\"\n        \n        # order = \"zyxwvutsrqponmlkjihgfedcba\"\n        # s = \"leetcode\"\n        \n        # order = \"zyxwvutsrqponmlkjihgfedcba\"\n        # s = \"codeleet\"\n        \n        # order = \"abcdefghijklmnopqrstuvwxyz\"\n        # s = \"abcdefghijklmnopqrstuvwxyz\"\n        \n        # order = \"zyxwvutsrqponmlkjihgfedcba\"\n        # s = \"aiohn\"\n        \n        # order = \"zyxwvutsrqponmlkjihgfedcba\"\n        # s = \"aaiougrt\"\n        \n        # order = \"zyxwvutsrqponmlkjihgfedcba\"\n        # s = \"aaiougrt\"\n        \n        # order = \"zyxwvutsrqponmlkjihgfedcba"
    },
    {
        "number": 792,
        "title": "Number of Matching Subsequences",
        "difficulty": 1,
        "prompt": "class Solution:\n    def numMatchingSubseq(self, s: str, words: List[str]) -> int:\n        \"\"\"\n        Given a string s and an array of strings words, return the number of words[i] that is a subsequence of s.\n        A subsequence of a string is a new string generated from the original string with some characters (can be none) deleted without changing the relative order of the remaining characters.\n            For example, \"ace\" is a subsequence of \"abcde\".\n        Example 1:\n        Input: s = \"abcde\", words = [\"a\",\"bb\",\"acd\",\"ace\"]\n        Output: 3\n        Explanation: There are three strings in words that are a subsequence of s: \"a\", \"acd\", \"ace\".\n        Example 2:\n        Input: s = \"dsahjpjauf\", words = [\"ahjpjau\",\"ja\",\"ahbwzgqnuk\",\"tnmlanowax\"]\n        Output: 2\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        # Time: O(n * m * k), where n is the length of s, m is the length of words, and k is the length of words[i]\n        # Space: O(n + m)\n        # hashmap + trie\n        # hashmap: store the index of each word in words\n        # trie: store the index of each word in words\n        # for each word in words, check if it is a subsequence of s\n        # if it is, return the index of the word in words\n        # if not, return 0\n        # if the index of the word in words is in the hashmap, remove the word from the hashmap\n        # if the index of the word in words is in the trie, remove the word from the trie\n        # if the index of the word in words is not in the hashmap and the index of the word in words is not in the trie, return 0\n        # if the index of the word in words is not in the hashmap and the index of the word in words is in the trie, return the index of the word in words\n        # if the index of the word in words is in the hashmap and the index of the word in words is in the trie, return the index of the word in words\n        # if the index of the word in words is in the hashmap"
    },
    {
        "number": 793,
        "title": "Preimage Size of Factorial Zeroes Function",
        "difficulty": 2,
        "prompt": "class Solution:\n    def preimageSizeFZF(self, k: int) -> int:\n        \"\"\"\n        Let f(x) be the number of zeroes at the end of x!. Recall that x! = 1 * 2 * 3 *... * x and by convention, 0! = 1.\n            For example, f(3) = 0 because 3! = 6 has no zeroes at the end, while f(11) = 2 because 11! = 39916800 has two zeroes at the end.\n        Given an integer k, return the number of non-negative integers x have the property that f(x) = k.\n        Example 1:\n        Input: k = 0\n        Output: 5\n        Explanation: 0!, 1!, 2!, 3!, and 4! end with k = 0 zeroes.\n        Example 2:\n        Input: k = 5\n        Output: 0\n        Explanation: There is no x such that x! ends in k = 5 zeroes.\n        Example 3:\n        Input: k = 3\n        Output: 5\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        # f(x) = x! / (x - k)!\n        # f(x) = x! / (x - k)!\n        # f(x) = x! / (x - k)!\n        # f(x) = x! / (x - k)!\n        # f(x) = x! / (x - k)!\n        # f(x) = x! / (x - k)!\n        # f(x) = x! / (x - k)!\n        # f(x) = x! / (x - k)!\n        # f(x) = x! / (x - k)!\n        # f(x) = x! / (x - k)!\n        # f(x) = x! / (x - k)!\n        # f(x) = x! / (x - k)!\n        # f(x) = x! / (x - k)!\n        # f(x) = x! / (x - k)!\n        # f(x) = x! / (x - k)!\n        # f(x) = x! / (x - k)!\n        # f(x) = x! / (x - k)!\n        # f(x) = x! / (x - k)!\n        # f(x) = x! / (x"
    },
    {
        "number": 794,
        "title": "Valid Tic-Tac-Toe State",
        "difficulty": 1,
        "prompt": "class Solution:\n    def validTicTacToe(self, board: List[str]) -> bool:\n        \"\"\"\n        Given a Tic-Tac-Toe board as a string array board, return true if and only if it is possible to reach this board position during the course of a valid tic-tac-toe game.\n        The board is a 3 x 3 array that consists of characters'', 'X', and 'O'. The'' character represents an empty square.\n        Here are the rules of Tic-Tac-Toe:\n            Players take turns placing characters into empty squares''.\n            The first player always places 'X' characters, while the second player always places 'O' characters.\n            'X' and 'O' characters are always placed into empty squares, never filled ones.\n            The game ends when there are three of the same (non-empty) character filling any row, column, or diagonal.\n            The game also ends if all squares are non-empty.\n            No more moves can be played if the game is over.\n        Example 1:\n        Input: board = [\"O  \",\"   \",\"   \"]\n        Output: false\n        Explanation: The first player always plays \"X\".\n        Example 2:\n        Input: board = [\"XOX\",\" X \",\"   \"]\n        Output: false\n        Explanation: Players take turns making moves.\n        Example 3:\n        Input: board = [\"XOX\",\"O O\",\"XOX\"]\n        Output: true\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        # check if the board is valid\n        # check if the board is valid\n        # check if the board is valid\n        # check if the board is valid\n        # check if the board is valid\n        # check if the board is valid\n        # check if the board is valid\n        # check if the board is valid\n        # check if the board is valid\n        # check if the board is valid\n        # check if the board is valid\n        # check if the board is valid\n        # check if the board is valid\n        # check if the board is valid\n        # check if the board is valid\n        # check if the board is valid\n        # check if the board is valid\n        # check if the board is valid\n        # check if the board is valid\n        # check if the board is valid\n        # check if the board is valid\n        # check if the board is valid\n        # check if the board is valid\n        # check if the board is valid\n        # check if the board is valid\n        # check if the board is valid\n        # check if the board is valid\n        # check if the board is valid\n        # check if the board is valid\n        # check if the board is valid\n        # check if the board is valid\n        # check if the board is valid\n        # check if the board is valid\n        # check"
    },
    {
        "number": 795,
        "title": "Number of Subarrays with Bounded Maximum",
        "difficulty": 1,
        "prompt": "class Solution:\n    def numSubarrayBoundedMax(self, nums: List[int], left: int, right: int) -> int:\n        \"\"\"\n        Given an integer array nums and two integers left and right, return the number of contiguous non-empty subarrays such that the value of the maximum array element in that subarray is in the range [left, right].\n        The test cases are generated so that the answer will fit in a 32-bit integer.\n        Example 1:\n        Input: nums = [2,1,4,3], left = 2, right = 3\n        Output: 3\n        Explanation: There are three subarrays that meet the requirements: [2], [2, 1], [3].\n        Example 2:\n        Input: nums = [2,9,2,5,6], left = 2, right = 8\n        Output: 7\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        # \u52a8\u6001\u89c4\u5212\n        # dp[i]\u8868\u793a\u4ee5nums[i]\u7ed3\u5c3e\u7684\u5b50\u6570\u7ec4\u7684\u6700\u5927\u503c\u662f\u5426\u5728[left, right]\u8303\u56f4\u5185\n        # dp[i] = dp[i-1] or (nums[i] >= left and nums[i] <= right)\n        # \u7531\u4e8edp[i]\u53ea\u4e0edp[i-1]\u6709\u5173\uff0c\u56e0\u6b64\u53ef\u4ee5\u4f7f\u7528\u4e00\u4e2a\u6570\u7ec4\u4fdd\u5b58dp[i-1]\n        # \u521d\u59cb\u5316dp[0] = True\n        # dp[i] = dp[i-1] or (nums[i] >= left and nums[i] <= right)\n        # \u7531\u4e8edp[i]\u53ea\u4e0edp[i-1]\u6709\u5173\uff0c\u56e0\u6b64\u53ef\u4ee5\u4f7f\u7528\u4e00\u4e2a\u6570\u7ec4\u4fdd\u5b58dp[i-1]\n        # \u521d\u59cb\u5316dp[0] = True\n        # dp[i] = dp[i-1]"
    },
    {
        "number": 796,
        "title": "Rotate String",
        "difficulty": 0,
        "prompt": "class Solution:\n    def rotateString(self, s: str, goal: str) -> bool:\n        \"\"\"\n        Given two strings s and goal, return true if and only if s can become goal after some number of shifts on s.\n        A shift on s consists of moving the leftmost character of s to the rightmost position.\n            For example, if s = \"abcde\", then it will be \"bcdea\" after one shift.\n        Example 1:\n        Input: s = \"abcde\", goal = \"cdeab\"\n        Output: true\n        Example 2:\n        Input: s = \"abcde\", goal = \"abced\"\n        Output: false\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        if len(s)!= len(goal):\n            return False\n        if s == goal:\n            return True\n        for i in range(len(s)):\n            if s[i:] + s[:i] == goal:\n                return True\n        return False"
    },
    {
        "number": 797,
        "title": "All Paths From Source to Target",
        "difficulty": 1,
        "prompt": "class Solution:\n    def allPathsSourceTarget(self, graph: List[List[int]]) -> List[List[int]]:\n        \"\"\"\n        Given a directed acyclic graph (DAG) of n nodes labeled from 0 to n - 1, find all possible paths from node 0 to node n - 1 and return them in any order.\n        The graph is given as follows: graph[i] is a list of all nodes you can visit from node i (i.e., there is a directed edge from node i to node graph[i][j]).\n        Example 1:\n        Input: graph = [[1,2],[3],[3],[]]\n        Output: [[0,1,3],[0,2,3]]\n        Explanation: There are two paths: 0 -> 1 -> 3 and 0 -> 2 -> 3.\n        Example 2:\n        Input: graph = [[4,3,1],[3,2,4],[3],[4],[]]\n        Output: [[0,4],[0,3,4],[0,1,3,4],[0,1,2,3,4],[0,1,4]]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        n = len(graph)\n        res = []\n        def dfs(node, path):\n            if node == n - 1:\n                res.append(path)\n            else:\n                for child in graph[node]:\n                    dfs(child, path + [child])\n        dfs(0, [0])\n        return res\n<|endoftext|>"
    },
    {
        "number": 798,
        "title": "Smallest Rotation with Highest Score",
        "difficulty": 2,
        "prompt": "class Solution:\n    def bestRotation(self, nums: List[int]) -> int:\n        \"\"\"\n        You are given an array nums. You can rotate it by a non-negative integer k so that the array becomes [nums[k], nums[k + 1],... nums[nums.length - 1], nums[0], nums[1],..., nums[k-1]]. Afterward, any entries that are less than or equal to their index are worth one point.\n            For example, if we have nums = [2,4,1,3,0], and we rotate by k = 2, it becomes [1,3,0,2,4]. This is worth 3 points because 1 > 0 [no points], 3 > 1 [no points], 0 <= 2 [one point], 2 <= 3 [one point], 4 <= 4 [one point].\n        Return the rotation index k that corresponds to the highest score we can achieve if we rotated nums by it. If there are multiple answers, return the smallest such index k.\n        Example 1:\n        Input: nums = [2,3,1,4,0]\n        Output: 3\n        Explanation: Scores for each k are listed below: \n        k = 0,  nums = [2,3,1,4,0],    score 2\n        k = 1,  nums = [3,1,4,0,2],    score 3\n        k = 2,  nums = [1,4,0,2,3],    score 3\n        k = 3,  nums = [4,0,2,3,1],    score 4\n        k = 4,  nums = [0,2,3,1,4],    score 3\n        So we should choose k = 3, which has the highest score.\n        Example 2:\n        Input: nums = [1,3,0,2,4]\n        Output: 0\n        Explanation: nums will always have 3 points no matter how it shifts.\n        So we will choose the smallest k, which is 0.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        # Time: O(n), space: O(1)\n        n = len(nums)\n        if n == 1: return 0\n        if n == 2: return 0 if nums[0] > nums[1] else 1\n        \n        # [0, 1, 2, 3, 4]\n        # [1, 2, 3, 4, 0]\n        # [2, 3, 4, 0, 1]\n        # [3, 4, 0, 1, 2]\n        # [4, 0, 1, 2, 3]\n        # [0, 1, 2, 3, 4]\n        \n        # [0, 1, 2, 3, 4]\n        # [1, 2, 3, 4, 0]\n        # [2, 3, 4, 0, 1]\n        # [3, 4, 0, 1, 2]\n        # [4, 0, 1, 2, 3]\n        # [0, 1, 2, 3, 4]\n        \n        # [0, 1, 2, 3, 4]\n        # [1, 2, 3, 4, 0]\n        # [2, 3, 4, 0, 1]\n        # [3, 4, 0, 1, 2]\n        # [4, 0, 1, 2, 3]\n"
    },
    {
        "number": 799,
        "title": "Champagne Tower",
        "difficulty": 1,
        "prompt": "class Solution:\n    def champagneTower(self, poured: int, query_row: int, query_glass: int) -> float:\n        \"\"\"\n        We stack glasses in a pyramid, where the first row has 1 glass, the second row has 2 glasses, and so on until the 100th row.  Each glass holds one cup of champagne.\r\n        Then, some champagne is poured into the first glass at the top.  When the topmost glass is full, any excess liquid poured will fall equally to the glass immediately to the left and right of it.  When those glasses become full, any excess champagne will fall equally to the left and right of those glasses, and so on.  (A glass at the bottom row has its excess champagne fall on the floor.)\r\n        For example, after one cup of champagne is poured, the top most glass is full.  After two cups of champagne are poured, the two glasses on the second row are half full.  After three cups of champagne are poured, those two cups become full - there are 3 full glasses total now.  After four cups of champagne are poured, the third row has the middle glass half full, and the two outside glasses are a quarter full, as pictured below.\r\n        Now after pouring some non-negative integer cups of champagne, return how full the jth glass in the ith row is (both i and j are 0-indexed.)\r\n        Example 1:\r\n        Input: poured = 1, query_row = 1, query_glass = 1\r\n        Output: 0.00000\r\n        Explanation: We poured 1 cup of champange to the top glass of the tower (which is indexed as (0, 0)). There will be no excess liquid so all the glasses under the top glass will remain empty.\r\n        Example 2:\r\n        Input: poured = 2, query_row = 1, query_glass = 1\r\n        Output: 0.50000\r\n        Explanation: We poured 2 cups of champange to the top glass of the tower (which is indexed as (0, 0)). There is one cup of excess liquid. The glass indexed as (1, 0) and the glass indexed as (1, 1) will share the excess liquid equally, and each will get half cup of champange.\r\n        Example 3:\r\n        Input: poured = 100000009, query_row = 33, query_glass = 17\r\n        Output: 1.00000\r\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        dp = [[0] * (i + 1) for i in range(query_row + 1)]\n        dp[0][0] = poured\n        for i in range(query_row):\n            for j in range(i + 1):\n                if dp[i][j] > 1:\n                    dp[i + 1][j] += (dp[i][j] - 1) / 2\n                    dp[i + 1][j + 1] += (dp[i][j] - 1) / 2\n        return dp[query_row][query_glass] if dp[query_row][query_glass] < 1 else 1\n        \n        \"\"\"\n        # Time Limit Exceeded\n        dp = [[0] * (i + 1) for i in range(query_row + 1)]\n        dp[0][0] = poured\n        for i in range(query_row):\n            for j in range(i + 1):\n                if dp[i][j] > 1:\n                    dp[i + 1][j] += (dp[i][j] - 1) / 2\n                    dp[i + 1][j + 1] += (dp[i][j] - 1) / 2\n        return dp[query_row][query_glass] if dp[query_row][query_"
    },
    {
        "number": 801,
        "title": "Minimum Swaps To Make Sequences Increasing",
        "difficulty": 2,
        "prompt": "class Solution:\n    def minSwap(self, nums1: List[int], nums2: List[int]) -> int:\n        \"\"\"\n        You are given two integer arrays of the same length nums1 and nums2. In one operation, you are allowed to swap nums1[i] with nums2[i].\n            For example, if nums1 = [1,2,3,8], and nums2 = [5,6,7,4], you can swap the element at i = 3 to obtain nums1 = [1,2,3,4] and nums2 = [5,6,7,8].\n        Return the minimum number of needed operations to make nums1 and nums2 strictly increasing. The test cases are generated so that the given input always makes it possible.\n        An array arr is strictly increasing if and only if arr[0] < arr[1] < arr[2] <... < arr[arr.length - 1].\n        Example 1:\n        Input: nums1 = [1,3,5,4], nums2 = [1,2,3,7]\n        Output: 1\n        Explanation: \n        Swap nums1[3] and nums2[3]. Then the sequences are:\n        nums1 = [1, 3, 5, 7] and nums2 = [1, 2, 3, 4]\n        which are both strictly increasing.\n        Example 2:\n        Input: nums1 = [0,3,5,8,9], nums2 = [2,1,4,6,9]\n        Output: 1\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        n = len(nums1)\n        m = len(nums2)\n        dp = [[0]*m for _ in range(n)]\n        for i in range(n):\n            for j in range(m):\n                if i == 0:\n                    dp[i][j] = j\n                elif j == 0:\n                    dp[i][j] = i\n                elif nums1[i] < nums2[j]:\n                    dp[i][j] = min(dp[i][j], dp[i-1][j])\n                else:\n                    dp[i][j] = min(dp[i][j], dp[i][j-1])\n                dp[i][j] += 1\n        return dp[n-1][m-1]\n    \n    def minSwap_error(self, nums1: List[int], nums2: List[int]) -> int:\n        \"\"\"\n        You are given two integer arrays of the same length nums1 and nums2. In one operation, you are allowed to swap nums1[i] with nums2[i].\n            For example, if nums1 = [1,2,3,8], and nums2 = [5,6,7,4], you can swap the element"
    },
    {
        "number": 802,
        "title": "Find Eventual Safe States",
        "difficulty": 1,
        "prompt": "class Solution:\n    def eventualSafeNodes(self, graph: List[List[int]]) -> List[int]:\n        \"\"\"\n        There is a directed graph of n nodes with each node labeled from 0 to n - 1. The graph is represented by a 0-indexed 2D integer array graph where graph[i] is an integer array of nodes adjacent to node i, meaning there is an edge from node i to each node in graph[i].\n        A node is a terminal node if there are no outgoing edges. A node is a safe node if every possible path starting from that node leads to a terminal node (or another safe node).\n        Return an array containing all the safe nodes of the graph. The answer should be sorted in ascending order.\n        Example 1:\n        Input: graph = [[1,2],[2,3],[5],[0],[5],[],[]]\n        Output: [2,4,5,6]\n        Explanation: The given graph is shown above.\n        Nodes 5 and 6 are terminal nodes as there are no outgoing edges from either of them.\n        Every path starting at nodes 2, 4, 5, and 6 all lead to either node 5 or 6.\n        Example 2:\n        Input: graph = [[1,2,3,4],[1,2],[3,4],[0,4],[]]\n        Output: [4]\n        Explanation:\n        Only node 4 is a terminal node, and every path starting at node 4 leads to node 4.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        # dfs\n        # time O(n)\n        # space O(n)\n        self.visited = set()\n        self.safe = []\n        for node in range(len(graph)):\n            if self.dfs(graph, node):\n                self.safe.append(node)\n        return self.safe"
    },
    {
        "number": 803,
        "title": "Bricks Falling When Hit",
        "difficulty": 2,
        "prompt": "class Solution:\n    def hitBricks(self, grid: List[List[int]], hits: List[List[int]]) -> List[int]:\n        \"\"\"\n        You are given an m x n binary grid, where each 1 represents a brick and 0 represents an empty space. A brick is stable if:\n            It is directly connected to the top of the grid, or\n            At least one other brick in its four adjacent cells is stable.\n        You are also given an array hits, which is a sequence of erasures we want to apply. Each time we want to erase the brick at the location hits[i] = (rowi, coli). The brick on that location (if it exists) will disappear. Some other bricks may no longer be stable because of that erasure and will fall. Once a brick falls, it is immediately erased from the grid (i.e., it does not land on other stable bricks).\n        Return an array result, where each result[i] is the number of bricks that will fall after the ith erasure is applied.\n        Note that an erasure may refer to a location with no brick, and if it does, no bricks drop.\n        Example 1:\n        Input: grid = [[1,0,0,0],[1,1,1,0]], hits = [[1,0]]\n        Output: [2]\n        Explanation: Starting with the grid:\n        [[1,0,0,0],\n         [1,1,1,0]]\n        We erase the underlined brick at (1,0), resulting in the grid:\n        [[1,0,0,0],\n         [0,1,1,0]]\n        The two underlined bricks are no longer stable as they are no longer connected to the top nor adjacent to another stable brick, so they will fall. The resulting grid is:\n        [[1,0,0,0],\n         [0,0,0,0]]\n        Hence the result is [2].\n        Example 2:\n        Input: grid = [[1,0,0,0],[1,1,0,0]], hits = [[1,1],[1,0]]\n        Output: [0,0]\n        Explanation: Starting with the grid:\n        [[1,0,0,0],\n         [1,1,0,0]]\n        We erase the underlined brick at (1,1), resulting in the grid:\n        [[1,0,0,0],\n         [1,0,0,0]]\n        All remaining bricks are still stable, so no bricks fall. The grid remains the same:\n        [[1,0,0,0],\n         [1,0,0,0]]\n        Next, we erase the underlined brick at (1,0), resulting in the grid:\n        [[1,0,0,0],\n         [0,0,0,0]]\n        Once again, all remaining bricks are still stable, so no bricks fall.\n        Hence the result is [0,0].\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        m, n = len(grid), len(grid[0])\n        def dfs(grid, i, j):\n            if not (0 <= i < m and 0 <= j < n) or grid[i][j] == 0:\n                return 0\n            grid[i][j] = 0\n            return 1 + dfs(grid, i - 1, j) + dfs(grid, i + 1, j) + dfs(grid, i, j - 1) + dfs(grid, i, j + 1)"
    },
    {
        "number": 804,
        "title": "Unique Morse Code Words",
        "difficulty": 0,
        "prompt": "class Solution:\n    def uniqueMorseRepresentations(self, words: List[str]) -> int:\n        \"\"\"\n        International Morse Code defines a standard encoding where each letter is mapped to a series of dots and dashes, as follows:\n            'a' maps to \".-\",\n            'b' maps to \"-...\",\n            'c' maps to \"-.-.\", and so on.\n        For convenience, the full table for the 26 letters of the English alphabet is given below:\n        [\".-\",\"-...\",\"-.-.\",\"-..\",\".\",\"..-.\",\"--.\",\"....\",\"..\",\".---\",\"-.-\",\".-..\",\"--\",\"-.\",\"---\",\".--.\",\"--.-\",\".-.\",\"...\",\"-\",\"..-\",\"...-\",\".--\",\"-..-\",\"-.--\",\"--..\"]\n        Given an array of strings words where each word can be written as a concatenation of the Morse code of each letter.\n            For example, \"cab\" can be written as \"-.-..--...\", which is the concatenation of \"-.-.\", \".-\", and \"-...\". We will call such a concatenation the transformation of a word.\n        Return the number of different transformations among all words we have.\n        Example 1:\n        Input: words = [\"gin\",\"zen\",\"gig\",\"msg\"]\n        Output: 2\n        Explanation: The transformation of each word is:\n        \"gin\" -> \"--...-.\"\n        \"zen\" -> \"--...-.\"\n        \"gig\" -> \"--...--.\"\n        \"msg\" -> \"--...--.\"\n        There are 2 different transformations: \"--...-.\" and \"--...--.\".\n        Example 2:\n        Input: words = [\"a\"]\n        Output: 1\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        morse_code = [\".-\",\"-...\",\"-.-.\",\"-..\",\".\",\"..-.\",\"--.\",\"....\",\"..\",\".---\",\"-.-\",\".-..\",\"--\",\"-.\",\"---\",\".--.\",\"--.-\",\".-.\",\"...\",\"-\",\"..-\",\"...-\",\".--\",\"-..-\",\"-.--\",\"--..\"]\n        morse_dict = dict(zip(list('abcdefghijklmnopqrstuvwxyz'), morse_code))\n        \n        # morse_code = [\".-\",\"-...\",\"-.-.\",\"-..\",\".\",\"..-.\",\"--.\",\"....\",\"..\",\".---\",\"-.-\",\".-..\",\"--\",\"-.\",\"---\",\".--.\",\"--.-\",\".-.\",\"...\",\"-\",\"..-\",\"...-\",\".--\",\"-..-\",\"-.--\",\"--..\"]\n        # morse_dict = dict(zip(list('abcdefghijklmnopqrstuvwxyz'), morse_code))\n        \n        # morse_code = [\".-\",\"-...\",\"-.-.\",\"-..\",\".\",\"..-.\",\"--.\",\"....\",\"..\",\".---\",\"-.-\",\".-..\",\"--\",\"-.\",\"---\",\".--.\",\"--.-\",\".-.\",\"...\",\"-\",\"..-\",\"...-\",\".--\",\"-..-\",\"-.--\",\"--..\"]\n        # morse_"
    },
    {
        "number": 805,
        "title": "Split Array With Same Average",
        "difficulty": 2,
        "prompt": "class Solution:\n    def splitArraySameAverage(self, nums: List[int]) -> bool:\n        \"\"\"\n        You are given an integer array nums.\n        You should move each element of nums into one of the two arrays A and B such that A and B are non-empty, and average(A) == average(B).\n        Return true if it is possible to achieve that and false otherwise.\n        Note that for an array arr, average(arr) is the sum of all the elements of arr over the length of arr.\n        Example 1:\n        Input: nums = [1,2,3,4,5,6,7,8]\n        Output: true\n        Explanation: We can split the array into [1,4,5,8] and [2,3,6,7], and both of them have an average of 4.5.\n        Example 2:\n        Input: nums = [3,1]\n        Output: false\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        # \u5148\u6c42\u51fa\u6240\u6709\u6570\u7684\u5e73\u5747\u503c\uff0c\u7136\u540e\u628a\u6570\u7ec4\u5206\u6210\u4e24\u4e2a\u5b50\u6570\u7ec4\uff0c\u6c42\u51fa\u4e24\u4e2a\u5b50\u6570\u7ec4\u7684\u5e73\u5747\u503c\uff0c\u5982\u679c\u4e24\u4e2a\u5e73\u5747\u503c\u76f8\u7b49\uff0c\u90a3\u4e48\u5c31\u662f\u53ef\u4ee5\u5206\u6210\u4e24\u4e2a\u5b50\u6570\u7ec4\u7684\n        # \u6570\u7ec4\uff0c\u5e76\u4e14\u8fd9\u4e24\u4e2a\u5b50\u6570\u7ec4\u7684\u5e73\u5747\u503c\u76f8\u7b49\uff0c\u90a3\u4e48\u5c31\u662f\u53ef\u4ee5\u5206\u6210\u4e24\u4e2a\u5b50\u6570\u7ec4\u7684\n        # \u5982\u679c\u4e24\u4e2a\u5e73\u5747\u503c\u4e0d\u76f8\u7b49\uff0c\u90a3\u4e48\u5c31\u4e0d\u53ef\u4ee5\u5206\u6210\u4e24\u4e2a\u5b50\u6570\u7ec4\u7684\n        # \u6240\u4ee5\u6211\u4eec\u53ea\u9700\u8981\u6c42\u51fa\u6570\u7ec4\u7684\u5e73\u5747"
    },
    {
        "number": 806,
        "title": "Number of Lines To Write String",
        "difficulty": 0,
        "prompt": "class Solution:\n    def numberOfLines(self, widths: List[int], s: str) -> List[int]:\n        \"\"\"\n        You are given a string s of lowercase English letters and an array widths denoting how many pixels wide each lowercase English letter is. Specifically, widths[0] is the width of 'a', widths[1] is the width of 'b', and so on.\n        You are trying to write s across several lines, where each line is no longer than 100 pixels. Starting at the beginning of s, write as many letters on the first line such that the total width does not exceed 100 pixels. Then, from where you stopped in s, continue writing as many letters as you can on the second line. Continue this process until you have written all of s.\n        Return an array result of length 2 where:\n            result[0] is the total number of lines.\n            result[1] is the width of the last line in pixels.\n        Example 1:\n        Input: widths = [10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10], s = \"abcdefghijklmnopqrstuvwxyz\"\n        Output: [3,60]\n        Explanation: You can write s as follows:\n        abcdefghij  // 100 pixels wide\n        klmnopqrst  // 100 pixels wide\n        uvwxyz      // 60 pixels wide\n        There are a total of 3 lines, and the last line is 60 pixels wide.\n        Example 2:\n        Input: widths = [4,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10], s = \"bbbcccdddaaa\"\n        Output: [2,4]\n        Explanation: You can write s as follows:\n        bbbcccdddaa  // 98 pixels wide\n        a            // 4 pixels wide\n        There are a total of 2 lines, and the last line is 4 pixels wide.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        # Time: O(n), n is the length of s\n        # Space: O(n)\n        # widths = [4,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10]\n        # s = \"bbbcccdddaa\"\n        # widths = [10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10]\n        # s = \"abcdefghijklmnopqrstuvwxyz\"\n        # widths = [4,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10]\n        # s = \"bbbcccdddaa\"\n        # widths = [10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,"
    },
    {
        "number": 807,
        "title": "Max Increase to Keep City Skyline",
        "difficulty": 1,
        "prompt": "class Solution:\n    def maxIncreaseKeepingSkyline(self, grid: List[List[int]]) -> int:\n        \"\"\"\n        There is a city composed of n x n blocks, where each block contains a single building shaped like a vertical square prism. You are given a 0-indexed n x n integer matrix grid where grid[r][c] represents the height of the building located in the block at row r and column c.\n        A city's skyline is the the outer contour formed by all the building when viewing the side of the city from a distance. The skyline from each cardinal direction north, east, south, and west may be different.\n        We are allowed to increase the height of any number of buildings by any amount (the amount can be different per building). The height of a 0-height building can also be increased. However, increasing the height of a building should not affect the city's skyline from any cardinal direction.\n        Return the maximum total sum that the height of the buildings can be increased by without changing the city's skyline from any cardinal direction.\n        Example 1:\n        Input: grid = [[3,0,8,4],[2,4,5,7],[9,2,6,3],[0,3,1,0]]\n        Output: 35\n        Explanation: The building heights are shown in the center of the above image.\n        The skylines when viewed from each cardinal direction are drawn in red.\n        The grid after increasing the height of buildings without affecting skylines is:\n        gridNew = [ [8, 4, 8, 7],\n                    [7, 4, 7, 7],\n                    [9, 4, 8, 7],\n                    [3, 3, 3, 3] ]\n        Example 2:\n        Input: grid = [[0,0,0],[0,0,0],[0,0,0]]\n        Output: 0\n        Explanation: Increasing the height of any building will result in the skyline changing.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        # Solution 1: O(n^2)\n        # rows, cols = len(grid), len(grid[0])\n        # res = 0\n        # for r in range(rows):\n        #     for c in range(cols):\n        #         res += min(grid[r][c], max(grid[r])) - grid[r][c]\n        # return res"
    },
    {
        "number": 808,
        "title": "Soup Servings",
        "difficulty": 1,
        "prompt": "class Solution:\n    def soupServings(self, n: int) -> float:\n        \"\"\"\n        There are two types of soup: type A and type B. Initially, we have n ml of each type of soup. There are four kinds of operations:\n            Serve 100 ml of soup A and 0 ml of soup B,\n            Serve 75 ml of soup A and 25 ml of soup B,\n            Serve 50 ml of soup A and 50 ml of soup B, and\n            Serve 25 ml of soup A and 75 ml of soup B.\n        When we serve some soup, we give it to someone, and we no longer have it. Each turn, we will choose from the four operations with an equal probability 0.25. If the remaining volume of soup is not enough to complete the operation, we will serve as much as possible. We stop once we no longer have some quantity of both types of soup.\n        Note that we do not have an operation where all 100 ml's of soup B are used first.\n        Return the probability that soup A will be empty first, plus half the probability that A and B become empty at the same time. Answers within 10-5 of the actual answer will be accepted.\n        Example 1:\n        Input: n = 50\n        Output: 0.62500\n        Explanation: If we choose the first two operations, A will become empty first.\n        For the third operation, A and B will become empty at the same time.\n        For the fourth operation, B will become empty first.\n        So the total probability of A becoming empty first plus half the probability that A and B become empty at the same time, is 0.25 * (1 + 1 + 0.5 + 0) = 0.625.\n        Example 2:\n        Input: n = 100\n        Output: 0.71875\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        if n == 0:\n            return 1\n        if n == 1:\n            return 0.5\n        if n == 2:\n            return 0.75\n        if n == 3:\n            return 0.875\n        dp = [0] * (n + 1)\n        dp[0] = 1\n        dp[1] = 0.5\n        dp[2] = 0.75\n        dp[3] = 0.875\n        for i in range(4, n + 1):\n            dp[i] = 0.25 * (dp[i - 1] + dp[i - 2] + dp[i - 3])\n        return dp[n]"
    },
    {
        "number": 809,
        "title": "Expressive Words",
        "difficulty": 1,
        "prompt": "class Solution:\n    def expressiveWords(self, s: str, words: List[str]) -> int:\n        \"\"\"\n        Sometimes people repeat letters to represent extra feeling. For example:\n            \"hello\" -> \"heeellooo\"\n            \"hi\" -> \"hiiii\"\n        In these strings like \"heeellooo\", we have groups of adjacent letters that are all the same: \"h\", \"eee\", \"ll\", \"ooo\".\n        You are given a string s and an array of query strings words. A query word is stretchy if it can be made to be equal to s by any number of applications of the following extension operation: choose a group consisting of characters c, and add some number of characters c to the group so that the size of the group is three or more.\n            For example, starting with \"hello\", we could do an extension on the group \"o\" to get \"hellooo\", but we cannot get \"helloo\" since the group \"oo\" has a size less than three. Also, we could do another extension like \"ll\" -> \"lllll\" to get \"helllllooo\". If s = \"helllllooo\", then the query word \"hello\" would be stretchy because of these two extension operations: query = \"hello\" -> \"hellooo\" -> \"helllllooo\" = s.\n        Return the number of query strings that are stretchy.\n        Example 1:\n        Input: s = \"heeellooo\", words = [\"hello\", \"hi\", \"helo\"]\n        Output: 1\n        Explanation: \n        We can extend \"e\" and \"o\" in the word \"hello\" to get \"heeellooo\".\n        We can't extend \"helo\" to get \"heeellooo\" because the group \"ll\" is not size 3 or more.\n        Example 2:\n        Input: s = \"zzzzzyyyyy\", words = [\"zzyy\",\"zy\",\"zyy\"]\n        Output: 3\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        def check_stretchy(s, words):\n            if len(s) == 0:\n                return 0\n            \n            def get_groups(s):\n                groups = []\n                i = 0\n                while i < len(s):\n                    if i+1 < len(s) and s[i] == s[i+1]:\n                        groups.append([s[i]])\n                        i += 2\n                    else:\n                        groups.append([s[i]])\n                        i += 1\n                return groups\n            \n            def extend(s, groups):\n                new_groups = []\n                for group in groups:\n                    if len(group) < 3:\n                        new_groups.append(group)\n                    else:\n                        for i in range(len(group)):\n                            if i+1 < len(group) and group[i] == group[i+1]:\n                                new_groups.append(group[:i+1] + [group[i], group[i]] + group[i+2:])\n                            else:\n                                new_groups.append(group[:i+1] + [group[i], group[i]] + group[i+1:])\n                return new_groups\n            \n            def check_stretchy(s, groups):\n                for group in groups"
    },
    {
        "number": 810,
        "title": "Chalkboard XOR Game",
        "difficulty": 2,
        "prompt": "class Solution:\n    def xorGame(self, nums: List[int]) -> bool:\n        \"\"\"\n        You are given an array of integers nums represents the numbers written on a chalkboard.\n        Alice and Bob take turns erasing exactly one number from the chalkboard, with Alice starting first. If erasing a number causes the bitwise XOR of all the elements of the chalkboard to become 0, then that player loses. The bitwise XOR of one element is that element itself, and the bitwise XOR of no elements is 0.\n        Also, if any player starts their turn with the bitwise XOR of all the elements of the chalkboard equal to 0, then that player wins.\n        Return true if and only if Alice wins the game, assuming both players play optimally.\n        Example 1:\n        Input: nums = [1,1,2]\n        Output: false\n        Explanation: \n        Alice has two choices: erase 1 or erase 2. \n        If she erases 1, the nums array becomes [1, 2]. The bitwise XOR of all the elements of the chalkboard is 1 XOR 2 = 3. Now Bob can remove any element he wants, because Alice will be the one to erase the last element and she will lose. \n        If Alice erases 2 first, now nums become [1, 1]. The bitwise XOR of all the elements of the chalkboard is 1 XOR 1 = 0. Alice will lose.\n        Example 2:\n        Input: nums = [0,1]\n        Output: true\n        Example 3:\n        Input: nums = [1,2,3]\n        Output: true\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        # XOR of all elements is 0 if and only if there is an even number of elements\n        # XOR of all elements is 0 if and only if there is an odd number of elements\n        # XOR of all elements is 0 if and only if there is an even number of elements\n        # XOR of all elements is not 0 if and only if there is an odd number of elements\n        return sum(nums) % 2 == 0\n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        "
    },
    {
        "number": 811,
        "title": "Subdomain Visit Count",
        "difficulty": 1,
        "prompt": "class Solution:\n    def subdomainVisits(self, cpdomains: List[str]) -> List[str]:\n        \"\"\"\n        A website domain \"discuss.leetcode.com\" consists of various subdomains. At the top level, we have \"com\", at the next level, we have \"leetcode.com\" and at the lowest level, \"discuss.leetcode.com\". When we visit a domain like \"discuss.leetcode.com\", we will also visit the parent domains \"leetcode.com\" and \"com\" implicitly.\n        A count-paired domain is a domain that has one of the two formats \"rep d1.d2.d3\" or \"rep d1.d2\" where rep is the number of visits to the domain and d1.d2.d3 is the domain itself.\n            For example, \"9001 discuss.leetcode.com\" is a count-paired domain that indicates that discuss.leetcode.com was visited 9001 times.\n        Given an array of count-paired domains cpdomains, return an array of the count-paired domains of each subdomain in the input. You may return the answer in any order.\n        Example 1:\n        Input: cpdomains = [\"9001 discuss.leetcode.com\"]\n        Output: [\"9001 leetcode.com\",\"9001 discuss.leetcode.com\",\"9001 com\"]\n        Explanation: We only have one website domain: \"discuss.leetcode.com\".\n        As discussed above, the subdomain \"leetcode.com\" and \"com\" will also be visited. So they will all be visited 9001 times.\n        Example 2:\n        Input: cpdomains = [\"900 google.mail.com\", \"50 yahoo.com\", \"1 intel.mail.com\", \"5 wiki.org\"]\n        Output: [\"901 mail.com\",\"50 yahoo.com\",\"900 google.mail.com\",\"5 wiki.org\",\"5 org\",\"1 intel.mail.com\",\"951 com\"]\n        Explanation: We will visit \"google.mail.com\" 900 times, \"yahoo.com\" 50 times, \"intel.mail.com\" once and \"wiki.org\" 5 times.\n        For the subdomains, we will visit \"mail.com\" 900 + 1 = 901 times, \"com\" 900 + 50 + 1 = 951 times, and \"org\" 5 times.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        from collections import defaultdict\n        d = defaultdict(int)\n        for cpdomain in cpdomains:\n            count, domain = cpdomain.split()\n            count = int(count)\n            domain_parts = domain.split('.')\n            for i in range(len(domain_parts)):\n                d[\".\".join(domain_parts[i:])] += count\n        return [f\"{count} {domain}\" for domain, count in d.items()]"
    },
    {
        "number": 812,
        "title": "Largest Triangle Area",
        "difficulty": 0,
        "prompt": "class Solution:\n    def largestTriangleArea(self, points: List[List[int]]) -> float:\n        \"\"\"\n        Given an array of points on the X-Y plane points where points[i] = [xi, yi], return the area of the largest triangle that can be formed by any three different points. Answers within 10-5 of the actual answer will be accepted.\n        Example 1:\n        Input: points = [[0,0],[0,1],[1,0],[0,2],[2,0]]\n        Output: 2.00000\n        Explanation: The five points are shown in the above figure. The red triangle is the largest.\n        Example 2:\n        Input: points = [[1,0],[0,0],[0,1]]\n        Output: 0.50000\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        def area(p1, p2, p3):\n            return 0.5 * abs(p1[0] * p2[1] + p2[0] * p3[1] + p3[0] * p1[1] - p1[1] * p2[0] - p2[1] * p3[0] - p3[1] * p1[0])"
    },
    {
        "number": 813,
        "title": "Largest Sum of Averages",
        "difficulty": 1,
        "prompt": "class Solution:\n    def largestSumOfAverages(self, nums: List[int], k: int) -> float:\n        \"\"\"\n        You are given an integer array nums and an integer k. You can partition the array into at most k non-empty adjacent subarrays. The score of a partition is the sum of the averages of each subarray.\n        Note that the partition must use every integer in nums, and that the score is not necessarily an integer.\n        Return the maximum score you can achieve of all the possible partitions. Answers within 10-6 of the actual answer will be accepted.\n        Example 1:\n        Input: nums = [9,1,2,3,9], k = 3\n        Output: 20.00000\n        Explanation: \n        The best choice is to partition nums into [9], [1, 2, 3], [9]. The answer is 9 + (1 + 2 + 3) / 3 + 9 = 20.\n        We could have also partitioned nums into [9, 1], [2], [3, 9], for example.\n        That partition would lead to a score of 5 + 2 + 6 = 13, which is worse.\n        Example 2:\n        Input: nums = [1,2,3,4,5,6,7], k = 4\n        Output: 20.50000\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        # dp[i][j] = max(dp[i-1][j], dp[i-1][j-1] + sum(nums[i:j]) / (j - i + 1))\n        # dp[i][j] = max(dp[i][j-1], dp[i-1][j-1] + sum(nums[i:j]) / (j - i + 1))\n        # dp[i][j] = max(dp[i][j-1], dp[i-1][j-1] + sum(nums[i:j]) / (j - i + 1))\n        # dp[i][j] = max(dp[i][j-1], dp[i-1][j-1] + sum(nums[i:j]) / (j - i + 1))\n        # dp[i][j] = max(dp[i][j-1], dp[i-1][j-1] + sum(nums[i:j]) / (j - i + 1))\n        # dp[i][j] = max(dp[i][j-1], dp[i-1][j-1] + sum(nums[i:j]) / (j - i + 1))\n"
    },
    {
        "number": 814,
        "title": "Binary Tree Pruning",
        "difficulty": 1,
        "prompt": "class Solution:\n    def pruneTree(self, root: Optional[TreeNode]) -> Optional[TreeNode]:\n        \"\"\"\n        Given the root of a binary tree, return the same tree where every subtree (of the given tree) not containing a 1 has been removed.\n        A subtree of a node node is node plus every node that is a descendant of node.\n        Example 1:\n        Input: root = [1,null,0,0,1]\n        Output: [1,null,0,null,1]\n        Explanation: \n        Only the red nodes satisfy the property \"every subtree not containing a 1\".\n        The diagram on the right represents the answer.\n        Example 2:\n        Input: root = [1,0,1,0,0,0,1]\n        Output: [1,null,1,null,1]\n        Example 3:\n        Input: root = [1,1,0,1,1,0,1,0]\n        Output: [1,1,0,1,1,null,1]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        if not root:\n            return None\n        root.left = self.pruneTree(root.left)\n        root.right = self.pruneTree(root.right)\n        if not root.left and not root.right and root.val == 0:\n            return None\n        return root\n<|endoftext|>"
    },
    {
        "number": 815,
        "title": "Bus Routes",
        "difficulty": 2,
        "prompt": "class Solution:\n    def numBusesToDestination(self, routes: List[List[int]], source: int, target: int) -> int:\n        \"\"\"\n        You are given an array routes representing bus routes where routes[i] is a bus route that the ith bus repeats forever.\n            For example, if routes[0] = [1, 5, 7], this means that the 0th bus travels in the sequence 1 -> 5 -> 7 -> 1 -> 5 -> 7 -> 1 ->... forever.\n        You will start at the bus stop source (You are not on any bus initially), and you want to go to the bus stop target. You can travel between bus stops by buses only.\n        Return the least number of buses you must take to travel from source to target. Return -1 if it is not possible.\n        Example 1:\n        Input: routes = [[1,2,7],[3,6,7]], source = 1, target = 6\n        Output: 2\n        Explanation: The best strategy is take the first bus to the bus stop 7, then take the second bus to the bus stop 6.\n        Example 2:\n        Input: routes = [[7,12],[4,5,15],[6],[15,19],[9,12,13]], source = 15, target = 12\n        Output: -1\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        if source == target:\n            return 0\n        routes = [set(route) for route in routes]\n        graph = collections.defaultdict(set)\n        for i, route in enumerate(routes):\n            for stop in route:\n                graph[stop].add(i)\n        queue = collections.deque([(source, 0)])\n        visited = set()\n        while queue:\n            stop, step = queue.popleft()\n            if stop == target:\n                return step\n            for i in graph[stop]:\n                if i not in visited:\n                    visited.add(i)\n                    for next_stop in routes[i]:\n                        queue.append((next_stop, step + 1))\n        return -1"
    },
    {
        "number": 816,
        "title": "Ambiguous Coordinates",
        "difficulty": 1,
        "prompt": "class Solution:\n    def ambiguousCoordinates(self, s: str) -> List[str]:\n        \"\"\"\n        We had some 2-dimensional coordinates, like \"(1, 3)\" or \"(2, 0.5)\". Then, we removed all commas, decimal points, and spaces and ended up with the string s.\n            For example, \"(1, 3)\" becomes s = \"(13)\" and \"(2, 0.5)\" becomes s = \"(205)\".\n        Return a list of strings representing all possibilities for what our original coordinates could have been.\n        Our original representation never had extraneous zeroes, so we never started with numbers like \"00\", \"0.0\", \"0.00\", \"1.0\", \"001\", \"00.01\", or any other number that can be represented with fewer digits. Also, a decimal point within a number never occurs without at least one digit occurring before it, so we never started with numbers like \".1\".\n        The final answer list can be returned in any order. All coordinates in the final answer have exactly one space between them (occurring after the comma.)\n        Example 1:\n        Input: s = \"(123)\"\n        Output: [\"(1, 2.3)\",\"(1, 23)\",\"(1.2, 3)\",\"(12, 3)\"]\n        Example 2:\n        Input: s = \"(0123)\"\n        Output: [\"(0, 1.23)\",\"(0, 12.3)\",\"(0, 123)\",\"(0.1, 2.3)\",\"(0.1, 23)\",\"(0.12, 3)\"]\n        Explanation: 0.0, 00, 0001 or 00.01 are not allowed.\n        Example 3:\n        Input: s = \"(00011)\"\n        Output: [\"(0, 0.011)\",\"(0.001, 1)\"]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        def helper(s):\n            if not s:\n                return [\"\"]\n            if len(s) == 1:\n                return [s]\n            if s[0] == \"0\" and s[-1] == \"0\":\n                return []\n            if s[0] == \"0\":\n                return [s[0] + \".\" + s[1:]]\n            if s[-1] == \"0\":\n                return [s]\n            if \".\" in s:\n                return [s]\n            return [s[:i] + \".\" + s[i:] for i in range(1, len(s))] + [s]"
    },
    {
        "number": 817,
        "title": "Linked List Components",
        "difficulty": 1,
        "prompt": "class Solution:\n    def numComponents(self, head: Optional[ListNode], nums: List[int]) -> int:\n        \"\"\"\n        You are given the head of a linked list containing unique integer values and an integer array nums that is a subset of the linked list values.\n        Return the number of connected components in nums where two values are connected if they appear consecutively in the linked list.\n        Example 1:\n        Input: head = [0,1,2,3], nums = [0,1,3]\n        Output: 2\n        Explanation: 0 and 1 are connected, so [0, 1] and [3] are the two connected components.\n        Example 2:\n        Input: head = [0,1,2,3,4], nums = [0,3,1,4]\n        Output: 2\n        Explanation: 0 and 1 are connected, 3 and 4 are connected, so [0, 1] and [3, 4] are the two connected components.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        # set up a set to store the visited nodes\n        visited = set()\n        # set up a variable to store the number of connected components\n        count = 0\n        # set up a variable to store the current node\n        current = head\n        # iterate through the linked list\n        while current:\n            # if the current node is not in the set of visited nodes\n            if current not in visited:\n                # add the current node to the set of visited nodes\n                visited.add(current)\n                # iterate through the linked list\n                while current:\n                    # if the current node is not in the set of visited nodes\n                    if current not in visited:\n                        # add the current node to the set of visited nodes\n                        visited.add(current)\n                        # iterate through the linked list\n                        while current:\n                            # if the current node is not in the set of visited nodes\n                            if current not in visited:\n                                # add the current node to the set of visited nodes\n                                visited.add(current)\n                                # increment the number of connected components\n                                count += 1\n                                # iterate through the linked list\n                                while current:\n                                    # if the current node is not in the set of visited nodes\n                                    if current not in visited:\n                                        # add the current node to the set of visited nodes"
    },
    {
        "number": 818,
        "title": "Race Car",
        "difficulty": 2,
        "prompt": "class Solution:\n    def racecar(self, target: int) -> int:\n        \"\"\"\n        Your car starts at position 0 and speed +1 on an infinite number line. Your car can go into negative positions. Your car drives automatically according to a sequence of instructions 'A' (accelerate) and 'R' (reverse):\n            When you get an instruction 'A', your car does the following:\n                position += speed\n                speed *= 2\n            When you get an instruction 'R', your car does the following:\n                If your speed is positive then speed = -1\n                otherwise speed = 1\n            Your position stays the same.\n        For example, after commands \"AAR\", your car goes to positions 0 --> 1 --> 3 --> 3, and your speed goes to 1 --> 2 --> 4 --> -1.\n        Given a target position target, return the length of the shortest sequence of instructions to get there.\n        Example 1:\n        Input: target = 3\n        Output: 2\n        Explanation: \n        The shortest instruction sequence is \"AA\".\n        Your position goes from 0 --> 1 --> 3.\n        Example 2:\n        Input: target = 6\n        Output: 5\n        Explanation: \n        The shortest instruction sequence is \"AAARA\".\n        Your position goes from 0 --> 1 --> 3 --> 7 --> 7 --> 6.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        # Time: O(log(target)), space: O(1)\n        # https://leetcode.com/problems/race-car/discuss/103519/Python-DP-with-explanation\n        # https://leetcode.com/problems/race-car/discuss/103519/Python-DP-with-explanation\n        # https://leetcode.com/problems/race-car/discuss/103519/Python-DP-with-explanation\n        # https://leetcode.com/problems/race-car/discuss/103519/Python-DP-with-explanation\n        # https://leetcode.com/problems/race-car/discuss/103519/Python-DP-with-explanation\n        # https://leetcode.com/problems/race-car/discuss/103519/Python-DP-with-explanation\n        # https://leetcode.com/problems/race-car/discuss/103519/Python-DP-with-explanation\n        # https://leetcode.com/problems/race-car/discuss/103519/Python-DP-with-explanation\n        # https://leetcode.com/pro"
    },
    {
        "number": 819,
        "title": "Most Common Word",
        "difficulty": 0,
        "prompt": "class Solution:\n    def mostCommonWord(self, paragraph: str, banned: List[str]) -> str:\n        \"\"\"\n        Given a string paragraph and a string array of the banned words banned, return the most frequent word that is not banned. It is guaranteed there is at least one word that is not banned, and that the answer is unique.\n        The words in paragraph are case-insensitive and the answer should be returned in lowercase.\n        Example 1:\n        Input: paragraph = \"Bob hit a ball, the hit BALL flew far after it was hit.\", banned = [\"hit\"]\n        Output: \"ball\"\n        Explanation: \n        \"hit\" occurs 3 times, but it is a banned word.\n        \"ball\" occurs twice (and no other word does), so it is the most frequent non-banned word in the paragraph. \n        Note that words in the paragraph are not case sensitive,\n        that punctuation is ignored (even if adjacent to words, such as \"ball,\"), \n        and that \"hit\" isn't the answer even though it occurs more because it is banned.\n        Example 2:\n        Input: paragraph = \"a.\", banned = []\n        Output: \"a\"\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        # 1. split the paragraph into words\n        # 2. remove the punctuation\n        # 3. remove the banned words\n        # 4. return the most common word\n        \n        # 1. split the paragraph into words\n        words = [word.lower() for word in re.findall(r'\\w+', paragraph) if word.lower() not in banned]\n        \n        # 2. remove the punctuation\n        words = [word for word in words if word.isalpha()]\n        \n        # 3. remove the banned words\n        words = [word for word in words if word not in banned]\n        \n        # 4. return the most common word\n        return collections.Counter(words).most_common(1)[0][0]\n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n"
    },
    {
        "number": 820,
        "title": "Short Encoding of Words",
        "difficulty": 1,
        "prompt": "class Solution:\n    def minimumLengthEncoding(self, words: List[str]) -> int:\n        \"\"\"\n        A valid encoding of an array of words is any reference string s and array of indices indices such that:\n            words.length == indices.length\n            The reference string s ends with the '#' character.\n            For each index indices[i], the substring of s starting from indices[i] and up to (but not including) the next '#' character is equal to words[i].\n        Given an array of words, return the length of the shortest reference string s possible of any valid encoding of words.\n        Example 1:\n        Input: words = [\"time\", \"me\", \"bell\"]\n        Output: 10\n        Explanation: A valid encoding would be s = \"time#bell#\" and indices = [0, 2, 5].\n        words[0] = \"time\", the substring of s starting from indices[0] = 0 to the next '#' is underlined in \"time#bell#\"\n        words[1] = \"me\", the substring of s starting from indices[1] = 2 to the next '#' is underlined in \"time#bell#\"\n        words[2] = \"bell\", the substring of s starting from indices[2] = 5 to the next '#' is underlined in \"time#bell#\"\n        Example 2:\n        Input: words = [\"t\"]\n        Output: 2\n        Explanation: A valid encoding would be s = \"t#\" and indices = [0].\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        # Time and Space: O(N)\n        words = list(set(words))\n        words.sort(key=lambda x: len(x))\n        words.sort(key=lambda x: x[0])\n        res = \"\"\n        for word in words:\n            if word[:-1] not in res:\n                res += word[:-1] + \"#\"\n        return len(res)"
    },
    {
        "number": 821,
        "title": "Shortest Distance to a Character",
        "difficulty": 0,
        "prompt": "class Solution:\n    def shortestToChar(self, s: str, c: str) -> List[int]:\n        \"\"\"\n        Given a string s and a character c that occurs in s, return an array of integers answer where answer.length == s.length and answer[i] is the distance from index i to the closest occurrence of character c in s.\n        The distance between two indices i and j is abs(i - j), where abs is the absolute value function.\n        Example 1:\n        Input: s = \"loveleetcode\", c = \"e\"\n        Output: [3,2,1,0,1,0,0,1,2,2,1,0]\n        Explanation: The character 'e' appears at indices 3, 5, 6, and 11 (0-indexed).\n        The closest occurrence of 'e' for index 0 is at index 3, so the distance is abs(0 - 3) = 3.\n        The closest occurrence of 'e' for index 1 is at index 3, so the distance is abs(1 - 3) = 2.\n        For index 4, there is a tie between the 'e' at index 3 and the 'e' at index 5, but the distance is still the same: abs(4 - 3) == abs(4 - 5) = 1.\n        The closest occurrence of 'e' for index 8 is at index 6, so the distance is abs(8 - 6) = 2.\n        Example 2:\n        Input: s = \"aaab\", c = \"b\"\n        Output: [3,2,1,0]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        # Solution 1:\n        # O(n)\n        # res = []\n        # for i in range(len(s)):\n        #     if s[i] == c:\n        #         res.append(0)\n        #     else:\n        #         res.append(min(abs(i - j) for j in range(len(s)) if s[j] == c))\n        # return res"
    },
    {
        "number": 822,
        "title": "Card Flipping Game",
        "difficulty": 1,
        "prompt": "class Solution:\n    def flipgame(self, fronts: List[int], backs: List[int]) -> int:\n        \"\"\"\n        You are given two 0-indexed integer arrays fronts and backs of length n, where the ith card has the positive integer fronts[i] printed on the front and backs[i] printed on the back. Initially, each card is placed on a table such that the front number is facing up and the other is facing down. You may flip over any number of cards (possibly zero).\n        After flipping the cards, an integer is considered good if it is facing down on some card and not facing up on any card.\n        Return the minimum possible good integer after flipping the cards. If there are no good integers, return 0.\n        Example 1:\n        Input: fronts = [1,2,4,4,7], backs = [1,3,4,1,3]\n        Output: 2\n        Explanation:\n        If we flip the second card, the face up numbers are [1,3,4,4,7] and the face down are [1,2,4,1,3].\n        2 is the minimum good integer as it appears facing down but not facing up.\n        It can be shown that 2 is the minimum possible good integer obtainable after flipping some cards.\n        Example 2:\n        Input: fronts = [1], backs = [1]\n        Output: 0\n        Explanation:\n        There are no good integers no matter how we flip the cards, so we return 0.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        # dp[i][j] = min(dp[i][j], dp[i-1][j] + 1) if dp[i][j]!= -1 else dp[i-1][j] + 1\n        # dp[i][j] = min(dp[i][j], dp[i-1][j-1] + 1) if dp[i][j]!= -1 else dp[i-1][j-1] + 1\n        # dp[i][j] = min(dp[i][j], dp[i-1][j+1] + 1) if dp[i][j]!= -1 else dp[i-1][j+1] + 1\n        # dp[i][j] = min(dp[i][j], dp[i-1][j-2] + 1) if dp[i][j]!= -1 else dp[i-1][j-2] + 1\n        # dp[i][j] = min(dp[i][j], dp[i-1][j+2] + 1) if dp[i][j]!= -1 else dp[i-1][j+2] + 1\n        # dp[i][j] = min(dp["
    },
    {
        "number": 823,
        "title": "Binary Trees With Factors",
        "difficulty": 1,
        "prompt": "class Solution:\n    def numFactoredBinaryTrees(self, arr: List[int]) -> int:\n        \"\"\"\n        Given an array of unique integers, arr, where each integer arr[i] is strictly greater than 1.\n        We make a binary tree using these integers, and each number may be used for any number of times. Each non-leaf node's value should be equal to the product of the values of its children.\n        Return the number of binary trees we can make. The answer may be too large so return the answer modulo 109 + 7.\n        Example 1:\n        Input: arr = [2,4]\n        Output: 3\n        Explanation: We can make these trees: [2], [4], [4, 2, 2]\n        Example 2:\n        Input: arr = [2,4,5,10]\n        Output: 7\n        Explanation: We can make these trees: [2], [4], [5], [10], [4, 2, 2], [10, 2, 5], [10, 5, 2].\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        arr.sort()\n        dp = {}\n        for i in range(len(arr)):\n            dp[arr[i]] = 1\n            for j in range(i):\n                if arr[i] % arr[j] == 0 and dp.get(arr[i] // arr[j], 0)!= 0:\n                    dp[arr[i]] += dp[arr[j]] * dp[arr[i] // arr[j]]\n        return sum(dp.values()) % (10 ** 9 + 7)\n<|endoftext|>"
    },
    {
        "number": 824,
        "title": "Goat Latin",
        "difficulty": 0,
        "prompt": "class Solution:\n    def toGoatLatin(self, sentence: str) -> str:\n        \"\"\"\n        You are given a string sentence that consist of words separated by spaces. Each word consists of lowercase and uppercase letters only.\n        We would like to convert the sentence to \"Goat Latin\" (a made-up language similar to Pig Latin.) The rules of Goat Latin are as follows:\n            If a word begins with a vowel ('a', 'e', 'i', 'o', or 'u'), append \"ma\" to the end of the word.\n                For example, the word \"apple\" becomes \"applema\".\n            If a word begins with a consonant (i.e., not a vowel), remove the first letter and append it to the end, then add \"ma\".\n                For example, the word \"goat\" becomes \"oatgma\".\n            Add one letter 'a' to the end of each word per its word index in the sentence, starting with 1.\n                For example, the first word gets \"a\" added to the end, the second word gets \"aa\" added to the end, and so on.\n        Return the final sentence representing the conversion from sentence to Goat Latin.\n        Example 1:\n        Input: sentence = \"I speak Goat Latin\"\n        Output: \"Imaa peaksmaaa oatGmaaaa atinLmaaaaa\"\n        Example 2:\n        Input: sentence = \"The quick brown fox jumped over the lazy dog\"\n        Output: \"heTmaa uickqmaaa rownbmaaaa oxfmaaaaa umpedjmaaaaaa overmaaaaaaa hetmaaaaaaaa azylmaaaaaaaaa ogdmaaaaaaaaaa\"\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        vowels = set('aeiouAEIOU')\n        words = sentence.split()\n        for i, word in enumerate(words):\n            if word[0] in vowels:\n                words[i] = word +'ma'\n            else:\n                words[i] = word[1:] + word[0] +'ma'\n        return''.join(words) + 'a' * (i + 1)"
    },
    {
        "number": 825,
        "title": "Friends Of Appropriate Ages",
        "difficulty": 1,
        "prompt": "class Solution:\n    def numFriendRequests(self, ages: List[int]) -> int:\n        \"\"\"\n        There are n persons on a social media website. You are given an integer array ages where ages[i] is the age of the ith person.\n        A Person x will not send a friend request to a person y (x!= y) if any of the following conditions is true:\n            age[y] <= 0.5 * age[x] + 7\n            age[y] > age[x]\n            age[y] > 100 && age[x] < 100\n        Otherwise, x will send a friend request to y.\n        Note that if x sends a request to y, y will not necessarily send a request to x. Also, a person will not send a friend request to themself.\n        Return the total number of friend requests made.\n        Example 1:\n        Input: ages = [16,16]\n        Output: 2\n        Explanation: 2 people friend request each other.\n        Example 2:\n        Input: ages = [16,17,18]\n        Output: 2\n        Explanation: Friend requests are made 17 -> 16, 18 -> 17.\n        Example 3:\n        Input: ages = [20,30,100,110,120]\n        Output: 3\n        Explanation: Friend requests are made 110 -> 100, 120 -> 110, 120 -> 100.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        freq = collections.Counter(ages)\n        res = 0\n        for ageA, freqA in freq.items():\n            for ageB, freqB in freq.items():\n                if ageA * 0.5 + 7 >= ageB and ageA < ageB:\n                    res += freqA * freqB\n                elif ageA > ageB:\n                    res += freqA * (freqB - 1)\n                elif ageA > 100 and ageB < 100:\n                    res += freqA * freqB\n        return res\n<|endoftext|>"
    },
    {
        "number": 826,
        "title": "Most Profit Assigning Work",
        "difficulty": 1,
        "prompt": "class Solution:\n    def maxProfitAssignment(self, difficulty: List[int], profit: List[int], worker: List[int]) -> int:\n        \"\"\"\n        You have n jobs and m workers. You are given three arrays: difficulty, profit, and worker where:\n            difficulty[i] and profit[i] are the difficulty and the profit of the ith job, and\n            worker[j] is the ability of jth worker (i.e., the jth worker can only complete a job with difficulty at most worker[j]).\n        Every worker can be assigned at most one job, but one job can be completed multiple times.\n            For example, if three workers attempt the same job that pays $1, then the total profit will be $3. If a worker cannot complete any job, their profit is $0.\n        Return the maximum profit we can achieve after assigning the workers to the jobs.\n        Example 1:\n        Input: difficulty = [2,4,6,8,10], profit = [10,20,30,40,50], worker = [4,5,6,7]\n        Output: 100\n        Explanation: Workers are assigned jobs of difficulty [4,4,6,6] and they get a profit of [20,20,30,30] separately.\n        Example 2:\n        Input: difficulty = [85,47,57], profit = [24,66,99], worker = [40,25,25]\n        Output: 0\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        # sort the worker and job by difficulty\n        # sort the worker by ability\n        # iterate the worker, and iterate the job\n        # if the worker ability is greater than the job difficulty, then we can assign the worker to the job\n        # if the worker ability is less than the job difficulty, then we can't assign the worker to the job\n        # if the worker ability is equal to the job difficulty, then we need to check if the worker has already assigned to the job\n        # if the worker has already assigned to the job, then we need to check if the current worker ability is greater than the previous worker ability\n        # if the worker has not assigned to the job, then we need to check if the current worker ability is greater than the previous worker ability\n        # if the worker ability is greater than the previous worker ability, then we need to update the previous worker ability\n        # if the worker ability is less than the previous worker ability, then we need to update the previous worker ability\n        # if the worker ability is equal to the previous worker ability, then we need to check if the current worker ability is greater than the previous worker ability\n        # if the worker ability is greater than the previous worker ability, then we need to update the previous worker ability\n        # if the worker ability is less than the previous worker ability, then we need to update the previous worker ability\n        # if the worker ability"
    },
    {
        "number": 827,
        "title": "Making A Large Island",
        "difficulty": 2,
        "prompt": "class Solution:\n    def largestIsland(self, grid: List[List[int]]) -> int:\n        \"\"\"\n        You are given an n x n binary matrix grid. You are allowed to change at most one 0 to be 1.\r\n        Return the size of the largest island in grid after applying this operation.\r\n        An island is a 4-directionally connected group of 1s.\r\n        Example 1:\r\n        Input: grid = [[1,0],[0,1]]\r\n        Output: 3\r\n        Explanation: Change one 0 to 1 and connect two 1s, then we get an island with area = 3.\r\n        Example 2:\r\n        Input: grid = [[1,1],[1,0]]\r\n        Output: 4\r\n        Explanation: Change the 0 to 1 and make the island bigger, only one island with area = 4.\r\n        Example 3:\r\n        Input: grid = [[1,1],[1,1]]\r\n        Output: 4\r\n        Explanation: Can't change any 0 to 1, only one island with area = 4.\r\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        # DFS\n        # Time  complexity: O(N^2)\n        # Space complexity: O(N^2)\n        # def dfs(i, j):\n        #     if i < 0 or i >= len(grid) or j < 0 or j >= len(grid[0]) or grid[i][j]!= 1:\n        #         return 0\n        #     grid[i][j] = 2\n        #     return 1 + dfs(i + 1, j) + dfs(i - 1, j) + dfs(i, j + 1) + dfs(i, j - 1)\n        #\n        # ans = 0\n        # for i in range(len(grid)):\n        #     for j in range(len(grid[0])):\n        #         if grid[i][j] == 1:\n        #             ans = max(ans, dfs(i, j))\n        # return ans"
    },
    {
        "number": 828,
        "title": "Count Unique Characters of All Substrings of a Given String",
        "difficulty": 2,
        "prompt": "class Solution:\n    def uniqueLetterString(self, s: str) -> int:\n        \"\"\"\n        Let's define a function countUniqueChars(s) that returns the number of unique characters on s.\n            For example, calling countUniqueChars(s) if s = \"LEETCODE\" then \"L\", \"T\", \"C\", \"O\", \"D\" are the unique characters since they appear only once in s, therefore countUniqueChars(s) = 5.\n        Given a string s, return the sum of countUniqueChars(t) where t is a substring of s. The test cases are generated such that the answer fits in a 32-bit integer.\n        Notice that some substrings can be repeated so in this case you have to count the repeated ones too.\n        Example 1:\n        Input: s = \"ABC\"\n        Output: 10\n        Explanation: All possible substrings are: \"A\",\"B\",\"C\",\"AB\",\"BC\" and \"ABC\".\n        Every substring is composed with only unique letters.\n        Sum of lengths of all substring is 1 + 1 + 1 + 2 + 2 + 3 = 10\n        Example 2:\n        Input: s = \"ABA\"\n        Output: 8\n        Explanation: The same as example 1, except countUniqueChars(\"ABA\") = 1.\n        Example 3:\n        Input: s = \"LEETCODE\"\n        Output: 92\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        # Time: O(n), space: O(n)\n        # dp[i][j] = the sum of unique letters in s[i:j+1]\n        # dp[i][j] = dp[i+1][j] + dp[i][j-1] - dp[i+1][j-1] + s[i]\n        # dp[i][j] = dp[i+1][j] + dp[i][j-1] - dp[i+1][j-1] + s[i] - s[j]\n        # dp[i][j] = dp[i+1][j] + dp[i][j-1] - dp[i+1][j-1] + s[i] - s[j] + s[i] * s[j]\n        # dp[i][j] = dp[i+1][j] + dp[i][j-1] - dp[i+1][j-1] + s[i] - s[j] + s[i] * s[j] + s[i] * s[j] * 2\n        # dp[i][j] = dp[i+1][j] + dp[i]["
    },
    {
        "number": 829,
        "title": "Consecutive Numbers Sum",
        "difficulty": 2,
        "prompt": "class Solution:\n    def consecutiveNumbersSum(self, n: int) -> int:\n        \"\"\"\n        Given an integer n, return the number of ways you can write n as the sum of consecutive positive integers.\n        Example 1:\n        Input: n = 5\n        Output: 2\n        Explanation: 5 = 2 + 3\n        Example 2:\n        Input: n = 9\n        Output: 3\n        Explanation: 9 = 4 + 5 = 2 + 3 + 4\n        Example 3:\n        Input: n = 15\n        Output: 4\n        Explanation: 15 = 8 + 7 = 4 + 5 + 6 = 1 + 2 + 3 + 4 + 5\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        # \u601d\u8def\uff1a\u52a8\u6001\u89c4\u5212\uff0cdp[i]\u8868\u793a\u4ee5i\u7ed3\u5c3e\u7684\u8fde\u7eed\u6570\u5b57\u7684\u4e2a\u6570\n        # dp[i] = dp[i-1] + dp[i-2] +... + dp[i-k]\n        # \u5176\u4e2dk\u662fi-1\u7684\u6700\u5927\u6b63\u6574\u6570\uff0cdp[i-1]\u8868\u793a\u4ee5i-1\u7ed3\u5c3e\u7684\u8fde\u7eed\u6570\u5b57\u7684\u4e2a\u6570\n        # \u521d\u59cb\u5316dp[0] = 1, dp[1] = 1\n        dp = [0] * (n+1)\n        dp[0] = 1\n        dp[1] = 1\n        for i in range(2, n+1):\n            max_k = i - 1\n            dp[i] = dp[i-1] + dp[i-2] +... + dp[i-max_k]\n        return dp[n]"
    },
    {
        "number": 830,
        "title": "Positions of Large Groups",
        "difficulty": 0,
        "prompt": "class Solution:\n    def largeGroupPositions(self, s: str) -> List[List[int]]:\n        \"\"\"\n        In a string s of lowercase letters, these letters form consecutive groups of the same character.\n        For example, a string like s = \"abbxxxxzyy\" has the groups \"a\", \"bb\", \"xxxx\", \"z\", and \"yy\".\n        A group is identified by an interval [start, end], where start and end denote the start and end indices (inclusive) of the group. In the above example, \"xxxx\" has the interval [3,6].\n        A group is considered large if it has 3 or more characters.\n        Return the intervals of every large group sorted in increasing order by start index.\n        Example 1:\n        Input: s = \"abbxxxxzzy\"\n        Output: [[3,6]]\n        Explanation: \"xxxx\" is the only large group with start index 3 and end index 6.\n        Example 2:\n        Input: s = \"abc\"\n        Output: []\n        Explanation: We have groups \"a\", \"b\", and \"c\", none of which are large groups.\n        Example 3:\n        Input: s = \"abcdddeeeeaabbbcd\"\n        Output: [[3,5],[6,9],[12,14]]\n        Explanation: The large groups are \"ddd\", \"eeee\", and \"bbb\".\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        # \u601d\u8def\uff1a\n        # \u5148\u628a\u6240\u6709\u7684\u5b57\u7b26\u653e\u5230\u4e00\u4e2alist\u4e2d\uff0c\u7136\u540e\u904d\u5386\u8fd9\u4e2alist\uff0c\u5982\u679c\u5f53\u524d\u5b57\u7b26\u4e0e\u4e0a\u4e00\u4e2a\u5b57\u7b26\u4e0d\u540c\uff0c\u5219\u628a\u4e0a\u4e00\u4e2a\u5b57\u7b26\u7684\u7ed3\u5c3e\u548c\u5f53\u524d\u5b57\u7b26\u7684\u5f00\u5934\u52a0\u5165\u5230list\u4e2d\n        # \u5982\u679c\u5f53\u524d\u5b57\u7b26\u4e0e\u4e0a\u4e00\u4e2a\u5b57\u7b26\u76f8\u540c\uff0c\u5219\u628a\u4e0a\u4e00\u4e2a\u5b57\u7b26\u7684\u7ed3\u5c3e\u52a0\u5165\u5230list\u4e2d\n        # \u5982\u679c\u904d\u5386\u5b8c\u6210\uff0c\u5219\u628a\u6700\u540e\u4e00\u4e2a\u5b57\u7b26\u7684\u7ed3\u5c3e\u52a0\u5165\u5230list\u4e2d\n        # \u6700\u540e\u628alist\u4e2d\u7684\u5143\u7d20\u6309\u7167\u7b2c\u4e00\u4e2a\u5143\u7d20\u8fdb\u884c\u6392\u5e8f\n        # \u65f6"
    },
    {
        "number": 831,
        "title": "Masking Personal Information",
        "difficulty": 1,
        "prompt": "class Solution:\n    def maskPII(self, s: str) -> str:\n        \"\"\"\n        You are given a personal information string s, representing either an email address or a phone number. Return the masked personal information using the below rules.\n        Email address:\n        An email address is:\n            A name consisting of uppercase and lowercase English letters, followed by\n            The '@' symbol, followed by\n            The domain consisting of uppercase and lowercase English letters with a dot '.' somewhere in the middle (not the first or last character).\n        To mask an email:\n            The uppercase letters in the name and domain must be converted to lowercase letters.\n            The middle letters of the name (i.e., all but the first and last letters) must be replaced by 5 asterisks \"*****\".\n        Phone number:\n        A phone number is formatted as follows:\n            The phone number contains 10-13 digits.\n            The last 10 digits make up the local number.\n            The remaining 0-3 digits, in the beginning, make up the country code.\n            Separation characters from the set {'+', '-', '(', ')',''} separate the above digits in some way.\n        To mask a phone number:\n            Remove all separation characters.\n            The masked phone number should have the form:\n                \"***-***-XXXX\" if the country code has 0 digits.\n                \"+*-***-***-XXXX\" if the country code has 1 digit.\n                \"+**-***-***-XXXX\" if the country code has 2 digits.\n                \"+***-***-***-XXXX\" if the country code has 3 digits.\n            \"XXXX\" is the last 4 digits of the local number.\n        Example 1:\n        Input: s = \"LeetCode@LeetCode.com\"\n        Output: \"l*****e@leetcode.com\"\n        Explanation: s is an email address.\n        The name and domain are converted to lowercase, and the middle of the name is replaced by 5 asterisks.\n        Example 2:\n        Input: s = \"AB@qq.com\"\n        Output: \"a*****b@qq.com\"\n        Explanation: s is an email address.\n        The name and domain are converted to lowercase, and the middle of the name is replaced by 5 asterisks.\n        Note that even though \"ab\" is 2 characters, it still must have 5 asterisks in the middle.\n        Example 3:\n        Input: s = \"1(234)567-890\"\n        Output: \"***-***-7890\"\n        Explanation: s is a phone number.\n        There are 10 digits, so the local number is 10 digits and the country code is 0 digits.\n        Thus, the resulting masked number is \"***-***-7890\".\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        if '@' in s:\n            s = s.lower()\n            s = s.split('@')\n            s[0] = s[0].replace('.', '*')\n            s[0] = s[0][0] + '*' * (len(s[0]) - 2) + s[0][-1]\n            return '@'.join(s)\n        else:\n            s = s.replace('(', '*')\n            s = s.replace(')', '*')\n            s = s.replace(' ', '')\n            s = s.replace('-', '')\n            s = s[-10:]\n            return '+*-***-***-' + s"
    },
    {
        "number": 832,
        "title": "Flipping an Image",
        "difficulty": 0,
        "prompt": "class Solution:\n    def flipAndInvertImage(self, image: List[List[int]]) -> List[List[int]]:\n        \"\"\"\n        Given an n x n binary matrix image, flip the image horizontally, then invert it, and return the resulting image.\n        To flip an image horizontally means that each row of the image is reversed.\n            For example, flipping [1,1,0] horizontally results in [0,1,1].\n        To invert an image means that each 0 is replaced by 1, and each 1 is replaced by 0.\n            For example, inverting [0,1,1] results in [1,0,0].\n        Example 1:\n        Input: image = [[1,1,0],[1,0,1],[0,0,0]]\n        Output: [[1,0,0],[0,1,0],[1,1,1]]\n        Explanation: First reverse each row: [[0,1,1],[1,0,1],[0,0,0]].\n        Then, invert the image: [[1,0,0],[0,1,0],[1,1,1]]\n        Example 2:\n        Input: image = [[1,1,0,0],[1,0,0,1],[0,1,1,1],[1,0,1,0]]\n        Output: [[1,1,0,0],[0,1,1,0],[0,0,0,1],[1,0,1,0]]\n        Explanation: First reverse each row: [[0,0,1,1],[1,0,0,1],[1,1,1,0],[0,1,0,1]].\n        Then invert the image: [[1,1,0,0],[0,1,1,0],[0,0,0,1],[1,0,1,0]]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        # Flip the image horizontally\n        for row in image:\n            row.reverse()\n        # Invert the image\n        for row in image:\n            for i in range(len(row)):\n                row[i] = 1 if row[i] == 0 else 0\n        return image"
    },
    {
        "number": 833,
        "title": "Find And Replace in String",
        "difficulty": 1,
        "prompt": "class Solution:\n    def findReplaceString(self, s: str, indices: List[int], sources: List[str], targets: List[str]) -> str:\n        \"\"\"\n        You are given a 0-indexed string s that you must perform k replacement operations on. The replacement operations are given as three 0-indexed parallel arrays, indices, sources, and targets, all of length k.\n        To complete the ith replacement operation:\n            Check if the substring sources[i] occurs at index indices[i] in the original string s.\n            If it does not occur, do nothing.\n            Otherwise if it does occur, replace that substring with targets[i].\n        For example, if s = \"abcd\", indices[i] = 0, sources[i] = \"ab\", and targets[i] = \"eee\", then the result of this replacement will be \"eeecd\".\n        All replacement operations must occur simultaneously, meaning the replacement operations should not affect the indexing of each other. The testcases will be generated such that the replacements will not overlap.\n            For example, a testcase with s = \"abc\", indices = [0, 1], and sources = [\"ab\",\"bc\"] will not be generated because the \"ab\" and \"bc\" replacements overlap.\n        Return the resulting string after performing all replacement operations on s.\n        A substring is a contiguous sequence of characters in a string.\n        Example 1:\n        Input: s = \"abcd\", indices = [0, 2], sources = [\"a\", \"cd\"], targets = [\"eee\", \"ffff\"]\n        Output: \"eeebffff\"\n        Explanation:\n        \"a\" occurs at index 0 in s, so we replace it with \"eee\".\n        \"cd\" occurs at index 2 in s, so we replace it with \"ffff\".\n        Example 2:\n        Input: s = \"abcd\", indices = [0, 2], sources = [\"ab\",\"ec\"], targets = [\"eee\",\"ffff\"]\n        Output: \"eeecd\"\n        Explanation:\n        \"ab\" occurs at index 0 in s, so we replace it with \"eee\".\n        \"ec\" does not occur at index 2 in s, so we do nothing.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        # Time: O(n)\n        # Space: O(n)\n        # n = len(s)\n        # if n == 0:\n        #     return s\n        # indices.sort()\n        # sources.sort()\n        # targets.sort()\n        # res = [''] * n\n        # for i in range(n):\n        #     if i not in indices:\n        #         res[i] = s[i]\n        #     else:\n        #         for j in range(len(sources)):\n        #             if s[i] == sources[j]:\n        #                 res[i] = targets[j]\n        #                 break\n        # return ''.join(res)"
    },
    {
        "number": 834,
        "title": "Sum of Distances in Tree",
        "difficulty": 2,
        "prompt": "class Solution:\n    def sumOfDistancesInTree(self, n: int, edges: List[List[int]]) -> List[int]:\n        \"\"\"\n        There is an undirected connected tree with n nodes labeled from 0 to n - 1 and n - 1 edges.\n        You are given the integer n and the array edges where edges[i] = [ai, bi] indicates that there is an edge between nodes ai and bi in the tree.\n        Return an array answer of length n where answer[i] is the sum of the distances between the ith node in the tree and all other nodes.\n        Example 1:\n        Input: n = 6, edges = [[0,1],[0,2],[2,3],[2,4],[2,5]]\n        Output: [8,12,6,10,10,10]\n        Explanation: The tree is shown above.\n        We can see that dist(0,1) + dist(0,2) + dist(0,3) + dist(0,4) + dist(0,5)\n        equals 1 + 1 + 2 + 2 + 2 = 8.\n        Hence, answer[0] = 8, and so on.\n        Example 2:\n        Input: n = 1, edges = []\n        Output: [0]\n        Example 3:\n        Input: n = 2, edges = [[1,0]]\n        Output: [1,1]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        # DFS\n        # Time: O(n), space: O(n)\n        # graph = collections.defaultdict(set)\n        # for u, v in edges:\n        #     graph[u].add(v)\n        #     graph[v].add(u)\n        # self.ans = [0] * n\n        # self.dfs(0, -1, 0)\n        # return self.ans"
    },
    {
        "number": 835,
        "title": "Image Overlap",
        "difficulty": 1,
        "prompt": "class Solution:\n    def largestOverlap(self, img1: List[List[int]], img2: List[List[int]]) -> int:\n        \"\"\"\n        You are given two images, img1 and img2, represented as binary, square matrices of size n x n. A binary matrix has only 0s and 1s as values.\n        We translate one image however we choose by sliding all the 1 bits left, right, up, and/or down any number of units. We then place it on top of the other image. We can then calculate the overlap by counting the number of positions that have a 1 in both images.\n        Note also that a translation does not include any kind of rotation. Any 1 bits that are translated outside of the matrix borders are erased.\n        Return the largest possible overlap.\n        Example 1:\n        Input: img1 = [[1,1,0],[0,1,0],[0,1,0]], img2 = [[0,0,0],[0,1,1],[0,0,1]]\n        Output: 3\n        Explanation: We translate img1 to right by 1 unit and down by 1 unit.\n        The number of positions that have a 1 in both images is 3 (shown in red).\n        Example 2:\n        Input: img1 = [[1]], img2 = [[1]]\n        Output: 1\n        Example 3:\n        Input: img1 = [[0]], img2 = [[0]]\n        Output: 0\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        m, n = len(img1), len(img1[0])\n        img1 = [[1 if i == 1 else 0 for i in row] for row in img1]\n        img2 = [[1 if i == 1 else 0 for i in row] for row in img2]\n        # print(img1)\n        # print(img2)\n        ans = 0\n        for i in range(m):\n            for j in range(n):\n                if img1[i][j] == 1 and img2[i][j] == 1:\n                    ans = max(ans, self.count(img1, img2, i, j))\n        return ans"
    },
    {
        "number": 836,
        "title": "Rectangle Overlap",
        "difficulty": 0,
        "prompt": "class Solution:\n    def isRectangleOverlap(self, rec1: List[int], rec2: List[int]) -> bool:\n        \"\"\"\n        An axis-aligned rectangle is represented as a list [x1, y1, x2, y2], where (x1, y1) is the coordinate of its bottom-left corner, and (x2, y2) is the coordinate of its top-right corner. Its top and bottom edges are parallel to the X-axis, and its left and right edges are parallel to the Y-axis.\n        Two rectangles overlap if the area of their intersection is positive. To be clear, two rectangles that only touch at the corner or edges do not overlap.\n        Given two axis-aligned rectangles rec1 and rec2, return true if they overlap, otherwise return false.\n        Example 1:\n        Input: rec1 = [0,0,2,2], rec2 = [1,1,3,3]\n        Output: true\n        Example 2:\n        Input: rec1 = [0,0,1,1], rec2 = [1,0,2,1]\n        Output: false\n        Example 3:\n        Input: rec1 = [0,0,1,1], rec2 = [2,2,3,3]\n        Output: false\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        # \u5224\u65ad\u4e24\u4e2a\u77e9\u5f62\u662f\u5426\u76f8\u4ea4\n        # \u5224\u65ad\u4e24\u4e2a\u77e9\u5f62\u662f\u5426\u76f8\u4ea4\n        # \u5224\u65ad\u4e24\u4e2a\u77e9\u5f62\u662f\u5426\u76f8\u4ea4\n        # \u5224\u65ad\u4e24\u4e2a\u77e9\u5f62\u662f\u5426\u76f8\u4ea4\n        # \u5224\u65ad\u4e24\u4e2a\u77e9\u5f62\u662f\u5426\u76f8\u4ea4\n        # \u5224\u65ad\u4e24\u4e2a\u77e9\u5f62\u662f\u5426\u76f8\u4ea4\n        # \u5224\u65ad\u4e24\u4e2a\u77e9\u5f62\u662f\u5426\u76f8\u4ea4\n        # \u5224\u65ad\u4e24\u4e2a\u77e9\u5f62\u662f\u5426\u76f8\u4ea4\n        # \u5224\u65ad\u4e24\u4e2a\u77e9\u5f62\u662f\u5426\u76f8\u4ea4\n        # \u5224\u65ad\u4e24\u4e2a\u77e9\u5f62\u662f\u5426\u76f8\u4ea4\n        # \u5224\u65ad\u4e24\u4e2a\u77e9\u5f62\u662f\u5426\u76f8\u4ea4\n        # \u5224\u65ad\u4e24\u4e2a\u77e9\u5f62\u662f\u5426\u76f8\u4ea4\n        # \u5224\u65ad\u4e24\u4e2a\ufffd"
    },
    {
        "number": 837,
        "title": "New 21 Game",
        "difficulty": 1,
        "prompt": "class Solution:\n    def new21Game(self, n: int, k: int, maxPts: int) -> float:\n        \"\"\"\n        Alice plays the following game, loosely based on the card game \"21\".\n        Alice starts with 0 points and draws numbers while she has less than k points. During each draw, she gains an integer number of points randomly from the range [1, maxPts], where maxPts is an integer. Each draw is independent and the outcomes have equal probabilities.\n        Alice stops drawing numbers when she gets k or more points.\n        Return the probability that Alice has n or fewer points.\n        Answers within 10-5 of the actual answer are considered accepted.\n        Example 1:\n        Input: n = 10, k = 1, maxPts = 10\n        Output: 1.00000\n        Explanation: Alice gets a single card, then stops.\n        Example 2:\n        Input: n = 6, k = 1, maxPts = 10\n        Output: 0.60000\n        Explanation: Alice gets a single card, then stops.\n        In 6 out of 10 possibilities, she is at or below 6 points.\n        Example 3:\n        Input: n = 21, k = 17, maxPts = 10\n        Output: 0.73278\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        if k >= n:\n            return 1\n        dp = [0] * (k + 1)\n        dp[0] = 1\n        for i in range(1, n + 1):\n            for j in range(k, 0, -1):\n                dp[j] += dp[j - 1] * (maxPts - (j - 1)) / maxPts\n        return sum(dp[:k + 1])"
    },
    {
        "number": 838,
        "title": "Push Dominoes",
        "difficulty": 1,
        "prompt": "class Solution:\n    def pushDominoes(self, dominoes: str) -> str:\n        \"\"\"\n        There are n dominoes in a line, and we place each domino vertically upright. In the beginning, we simultaneously push some of the dominoes either to the left or to the right.\n        After each second, each domino that is falling to the left pushes the adjacent domino on the left. Similarly, the dominoes falling to the right push their adjacent dominoes standing on the right.\n        When a vertical domino has dominoes falling on it from both sides, it stays still due to the balance of the forces.\n        For the purposes of this question, we will consider that a falling domino expends no additional force to a falling or already fallen domino.\n        You are given a string dominoes representing the initial state where:\n            dominoes[i] = 'L', if the ith domino has been pushed to the left,\n            dominoes[i] = 'R', if the ith domino has been pushed to the right, and\n            dominoes[i] = '.', if the ith domino has not been pushed.\n        Return a string representing the final state.\n        Example 1:\n        Input: dominoes = \"RR.L\"\n        Output: \"RR.L\"\n        Explanation: The first domino expends no additional force on the second domino.\n        Example 2:\n        Input: dominoes = \".L.R...LR..L..\"\n        Output: \"LL.RR.LLRRLL..\"\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        # Time: O(n), space: O(n)\n        n = len(dominoes)\n        force = [0] * n\n        force[0] = 1 if dominoes[0] == \"R\" else -1\n        for i in range(1, n):\n            if dominoes[i] == \".\":\n                force[i] = force[i-1]\n            elif dominoes[i] == \"R\":\n                force[i] = force[i-1] + 1\n            else:\n                force[i] = force[i-1] - 1\n        force[n-1] = force[n-2]\n        for i in range(n-2, -1, -1):\n            if dominoes[i] == \".\":\n                force[i] = force[i+1]\n            elif dominoes[i] == \"L\":\n                force[i] = force[i+1] - 1\n            else:\n                force[i] = force[i+1] + 1\n        return \"\".join([\"L\" if f < 0 else \"R\" if f > 0 else \".\" for f in force])"
    },
    {
        "number": 839,
        "title": "Similar String Groups",
        "difficulty": 2,
        "prompt": "class Solution:\n    def numSimilarGroups(self, strs: List[str]) -> int:\n        \"\"\"\n        Two strings X and Y are similar if we can swap two letters (in different positions) of X, so that it equals Y. Also two strings X and Y are similar if they are equal.\n        For example, \"tars\" and \"rats\" are similar (swapping at positions 0 and 2), and \"rats\" and \"arts\" are similar, but \"star\" is not similar to \"tars\", \"rats\", or \"arts\".\n        Together, these form two connected groups by similarity: {\"tars\", \"rats\", \"arts\"} and {\"star\"}.  Notice that \"tars\" and \"arts\" are in the same group even though they are not similar.  Formally, each group is such that a word is in the group if and only if it is similar to at least one other word in the group.\n        We are given a list strs of strings where every string in strs is an anagram of every other string in strs. How many groups are there?\n        Example 1:\n        Input: strs = [\"tars\",\"rats\",\"arts\",\"star\"]\n        Output: 2\n        Example 2:\n        Input: strs = [\"omv\",\"ovm\"]\n        Output: 1\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        \n        def isSimilar(s1, s2):\n            diff = 0\n            for i in range(len(s1)):\n                if s1[i]!= s2[i]:\n                    diff += 1\n            return diff == 2\n        \n        def dfs(s, visited):\n            visited.add(s)\n            for i in range(len(strs)):\n                if i not in visited and isSimilar(s, strs[i]):\n                    dfs(strs[i], visited)\n        \n        visited = set()\n        groups = 0\n        for i in range(len(strs)):\n            if i not in visited:\n                groups += 1\n                dfs(strs[i], visited)\n        return groups\n    \n    def numSimilarGroups(self, strs: List[str]) -> int:\n        \"\"\"\n        Two strings X and Y are similar if we can swap two letters (in different positions) of X, so that it equals Y. Also two strings X and Y are similar if they are equal.\n        For example, \"tars\" and \"rats\" are similar (swapping at positions 0 and 2), and \"rats\" and \"arts\" are similar, but \"star\" is not similar to \"tars\", \"rats\", or \"arts\".\n        "
    },
    {
        "number": 840,
        "title": "Magic Squares In Grid",
        "difficulty": 1,
        "prompt": "class Solution:\n    def numMagicSquaresInside(self, grid: List[List[int]]) -> int:\n        \"\"\"\n        A 3 x 3 magic square is a 3 x 3 grid filled with distinct numbers from 1 to 9 such that each row, column, and both diagonals all have the same sum.\n        Given a row x col grid of integers, how many 3 x 3 \"magic square\" subgrids are there?  (Each subgrid is contiguous).\n        Example 1:\n        Input: grid = [[4,3,8,4],[9,5,1,9],[2,7,6,2]]\n        Output: 1\n        Explanation: \n        The following subgrid is a 3 x 3 magic square:\n        while this one is not:\n        In total, there is only one magic square inside the given grid.\n        Example 2:\n        Input: grid = [[8]]\n        Output: 0\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        \n        def isMagicSquare(grid):\n            if len(grid)!= 3:\n                return False\n            if len(grid[0])!= 3:\n                return False\n            if sum(grid[0])!= 15:\n                return False\n            if sum(grid[1])!= 15:\n                return False\n            if sum(grid[2])!= 15:\n                return False\n            if sum(grid[0][0:3])!= 15:\n                return False\n            if sum(grid[1][0:3])!= 15:\n                return False\n            if sum(grid[2][0:3])!= 15:\n                return False\n            if sum(grid[0][0:3])!= sum(grid[1][0:3]):\n                return False\n            if sum(grid[0][0:3])!= sum(grid[2][0:3]):\n                return False\n            if sum(grid[0][0:3])!= sum(grid[2][0:3]):\n                return False\n            return True\n        \n        def dfs(grid, i, j):\n            if i >= len(grid) or j >= len(grid[0]):\n                return 0\n            if grid[i][j]!= 0:\n                return dfs(grid, i+1,"
    },
    {
        "number": 841,
        "title": "Keys and Rooms",
        "difficulty": 1,
        "prompt": "class Solution:\n    def canVisitAllRooms(self, rooms: List[List[int]]) -> bool:\n        \"\"\"\n        There are n rooms labeled from 0 to n - 1 and all the rooms are locked except for room 0. Your goal is to visit all the rooms. However, you cannot enter a locked room without having its key.\n        When you visit a room, you may find a set of distinct keys in it. Each key has a number on it, denoting which room it unlocks, and you can take all of them with you to unlock the other rooms.\n        Given an array rooms where rooms[i] is the set of keys that you can obtain if you visited room i, return true if you can visit all the rooms, or false otherwise.\n        Example 1:\n        Input: rooms = [[1],[2],[3],[]]\n        Output: true\n        Explanation: \n        We visit room 0 and pick up key 1.\n        We then visit room 1 and pick up key 2.\n        We then visit room 2 and pick up key 3.\n        We then visit room 3.\n        Since we were able to visit every room, we return true.\n        Example 2:\n        Input: rooms = [[1,3],[3,0,1],[2],[0]]\n        Output: false\n        Explanation: We can not enter room number 2 since the only key that unlocks it is in that room.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        \n        # BFS\n        # Time: O(n), n is the number of rooms\n        # Space: O(n), n is the number of rooms\n        \n        visited = set()\n        visited.add(0)\n        queue = [0]\n        \n        while queue:\n            curr = queue.pop(0)\n            for key in rooms[curr]:\n                if key not in visited:\n                    visited.add(key)\n                    queue.append(key)\n        return len(visited) == len(rooms)\n    \n    \n    def canVisitAllRooms_DFS(self, rooms: List[List[int]]) -> bool:\n        \"\"\"\n        There are n rooms labeled from 0 to n - 1 and all the rooms are locked except for room 0. Your goal is to visit all the rooms. However, you cannot enter a locked room without having its key.\n        When you visit a room, you may find a set of distinct keys in it. Each key has a number on it, denoting which room it unlocks, and you can take all of them with you to unlock the other rooms.\n        Given an array rooms where rooms[i] is the set of keys that you can obtain if you visited room i, return true if you can visit all the rooms, or false otherwise.\n        Example 1:"
    },
    {
        "number": 842,
        "title": "Split Array into Fibonacci Sequence",
        "difficulty": 1,
        "prompt": "class Solution:\n    def splitIntoFibonacci(self, num: str) -> List[int]:\n        \"\"\"\n        You are given a string of digits num, such as \"123456579\". We can split it into a Fibonacci-like sequence [123, 456, 579].\n        Formally, a Fibonacci-like sequence is a list f of non-negative integers such that:\n            0 <= f[i] < 231, (that is, each integer fits in a 32-bit signed integer type),\n            f.length >= 3, and\n            f[i] + f[i + 1] == f[i + 2] for all 0 <= i < f.length - 2.\n        Note that when splitting the string into pieces, each piece must not have extra leading zeroes, except if the piece is the number 0 itself.\n        Return any Fibonacci-like sequence split from num, or return [] if it cannot be done.\n        Example 1:\n        Input: num = \"1101111\"\n        Output: [11,0,11,11]\n        Explanation: The output [110, 1, 111] would also be accepted.\n        Example 2:\n        Input: num = \"112358130\"\n        Output: []\n        Explanation: The task is impossible.\n        Example 3:\n        Input: num = \"0123\"\n        Output: []\n        Explanation: Leading zeroes are not allowed, so \"01\", \"2\", \"3\" is not valid.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        if len(num) < 3:\n            return []\n        self.ans = []\n        self.dfs(num, 0, [])\n        return self.ans"
    },
    {
        "number": 843,
        "title": "Guess the Word",
        "difficulty": 2,
        "prompt": "        \"\"\"\n        You are given an array of unique strings words where words[i] is six letters long. One word of words was chosen as a secret word.\n        You are also given the helper object Master. You may call Master.guess(word) where word is a six-letter-long string, and it must be from words. Master.guess(word) returns:\n            -1 if word is not from words, or\n            an integer representing the number of exact matches (value and position) of your guess to the secret word.\n        There is a parameter allowedGuesses for each test case where allowedGuesses is the maximum number of times you can call Master.guess(word).\n        For each test case, you should call Master.guess with the secret word without exceeding the maximum number of allowed guesses. You will get:\n            \"Either you took too many guesses, or you did not find the secret word.\" if you called Master.guess more than allowedGuesses times or if you did not call Master.guess with the secret word, or\n            \"You guessed the secret word correctly.\" if you called Master.guess with the secret word with the number of calls to Master.guess less than or equal to allowedGuesses.\n        The test cases are generated such that you can guess the secret word with a reasonable strategy (other than using the bruteforce method).\n        Example 1:\n        Input: secret = \"acckzz\", words = [\"acckzz\",\"ccbazz\",\"eiowzz\",\"abcczz\"], allowedGuesses = 10\n        Output: You guessed the secret word correctly.\n        Explanation:\n        master.guess(\"aaaaaa\") returns -1, because \"aaaaaa\" is not in wordlist.\n        master.guess(\"acckzz\") returns 6, because \"acckzz\" is secret and has all 6 matches.\n        master.guess(\"ccbazz\") returns 3, because \"ccbazz\" has 3 matches.\n        master.guess(\"eiowzz\") returns 2, because \"eiowzz\" has 2 matches.\n        master.guess(\"abcczz\") returns 4, because \"abcczz\" has 4 matches.\n        We made 5 calls to master.guess, and one of them was the secret, so we pass the test case.\n        Example 2:\n        Input: secret = \"hamada\", words = [\"hamada\",\"khaled\"], allowedGuesses = 10\n        Output: You guessed the secret word correctly.\n        Explanation: Since there are two words, you can guess both.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        self.secret = secret\n        self.words = words\n        self.allowedGuesses = allowedGuesses\n        self.guesses = 0\n        self.matches = 0\n        self.guess_list = []\n        self.guess_dict = {}"
    },
    {
        "number": 844,
        "title": "Backspace String Compare",
        "difficulty": 0,
        "prompt": "class Solution:\n    def backspaceCompare(self, s: str, t: str) -> bool:\n        \"\"\"\n        Given two strings s and t, return true if they are equal when both are typed into empty text editors. '#' means a backspace character.\n        Note that after backspacing an empty text, the text will continue empty.\n        Example 1:\n        Input: s = \"ab#c\", t = \"ad#c\"\n        Output: true\n        Explanation: Both s and t become \"ac\".\n        Example 2:\n        Input: s = \"ab##\", t = \"c#d#\"\n        Output: true\n        Explanation: Both s and t become \"\".\n        Example 3:\n        Input: s = \"a#c\", t = \"b\"\n        Output: false\n        Explanation: s becomes \"c\" while t becomes \"b\".\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        def backspace(s):\n            stack = []\n            for char in s:\n                if char == \"#\":\n                    if stack:\n                        stack.pop()\n                else:\n                    stack.append(char)\n            return \"\".join(stack)\n        return backspace(s) == backspace(t)\n<|endoftext|>"
    },
    {
        "number": 845,
        "title": "Longest Mountain in Array",
        "difficulty": 1,
        "prompt": "class Solution:\n    def longestMountain(self, arr: List[int]) -> int:\n        \"\"\"\n        You may recall that an array arr is a mountain array if and only if:\n            arr.length >= 3\n            There exists some index i (0-indexed) with 0 < i < arr.length - 1 such that:\n                arr[0] < arr[1] <... < arr[i - 1] < arr[i]\n                arr[i] > arr[i + 1] >... > arr[arr.length - 1]\n        Given an integer array arr, return the length of the longest subarray, which is a mountain. Return 0 if there is no mountain subarray.\n        Example 1:\n        Input: arr = [2,1,4,7,3,2,5]\n        Output: 5\n        Explanation: The largest mountain is [1,4,7,3,2] which has length 5.\n        Example 2:\n        Input: arr = [2,2,2]\n        Output: 0\n        Explanation: There is no mountain.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        # Time complexity: O(n)\n        # Space complexity: O(1)\n        # left, right = 0, len(arr) - 1\n        # while left < len(arr) - 1:\n        #     if arr[left] < arr[left + 1]:\n        #         left += 1\n        #     else:\n        #         break\n        # while right > 0:\n        #     if arr[right] < arr[right - 1]:\n        #         right -= 1\n        #     else:\n        #         break\n        # if left >= right:\n        #     return 0\n        # max_len = 0\n        # for i in range(left + 1, right):\n        #     if arr[i] > arr[i - 1] and arr[i] > arr[i + 1]:\n        #         max_len = max(max_len, i - left + 1)\n        # return max_len\n        \"\"\"\n        The idea is to find the longest mountain subarray.\n        We can use a stack to store the indices of the elements in the mountain subarray.\n        We will keep iterating through the array and keep popping the indices of the elements in the stack if the element is smaller than the element at the top of the stack.\n        If the element is greater than the element at the top of"
    },
    {
        "number": 846,
        "title": "Hand of Straights",
        "difficulty": 1,
        "prompt": "class Solution:\n    def isNStraightHand(self, hand: List[int], groupSize: int) -> bool:\n        \"\"\"\n        Alice has some number of cards and she wants to rearrange the cards into groups so that each group is of size groupSize, and consists of groupSize consecutive cards.\n        Given an integer array hand where hand[i] is the value written on the ith card and an integer groupSize, return true if she can rearrange the cards, or false otherwise.\n        Example 1:\n        Input: hand = [1,2,3,6,2,3,4,7,8], groupSize = 3\n        Output: true\n        Explanation: Alice's hand can be rearranged as [1,2,3],[2,3,4],[6,7,8]\n        Example 2:\n        Input: hand = [1,2,3,4,5], groupSize = 4\n        Output: false\n        Explanation: Alice's hand can not be rearranged into groups of 4.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        if len(hand) % groupSize!= 0:\n            return False\n        hand.sort()\n        d = {}\n        for i in hand:\n            if i not in d:\n                d[i] = 1\n            else:\n                d[i] += 1\n        for i in d:\n            if d[i] > groupSize:\n                return False\n        return True"
    },
    {
        "number": 847,
        "title": "Shortest Path Visiting All Nodes",
        "difficulty": 2,
        "prompt": "class Solution:\n    def shortestPathLength(self, graph: List[List[int]]) -> int:\n        \"\"\"\n        You have an undirected, connected graph of n nodes labeled from 0 to n - 1. You are given an array graph where graph[i] is a list of all the nodes connected with node i by an edge.\n        Return the length of the shortest path that visits every node. You may start and stop at any node, you may revisit nodes multiple times, and you may reuse edges.\n        Example 1:\n        Input: graph = [[1,2,3],[0],[0],[0]]\n        Output: 4\n        Explanation: One possible path is [1,0,2,0,3]\n        Example 2:\n        Input: graph = [[1],[0,2,4],[1,3,4],[2],[1,2]]\n        Output: 4\n        Explanation: One possible path is [0,1,4,2,3]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        n = len(graph)\n        queue = collections.deque([(i, 1 << i) for i in range(n)])\n        seen = {(i, 1 << i) for i in range(n)}\n        while queue:\n            node, state = queue.popleft()\n            if state == (1 << n) - 1:\n                return graph[node].count(1)\n            for nei in graph[node]:\n                if (nei, state | 1 << nei) not in seen:\n                    queue.append((nei, state | 1 << nei))\n                    seen.add((nei, state | 1 << nei))\n        return -1"
    },
    {
        "number": 848,
        "title": "Shifting Letters",
        "difficulty": 1,
        "prompt": "class Solution:\n    def shiftingLetters(self, s: str, shifts: List[int]) -> str:\n        \"\"\"\n        You are given a string s of lowercase English letters and an integer array shifts of the same length.\n        Call the shift() of a letter, the next letter in the alphabet, (wrapping around so that 'z' becomes 'a').\n            For example, shift('a') = 'b', shift('t') = 'u', and shift('z') = 'a'.\n        Now for each shifts[i] = x, we want to shift the first i + 1 letters of s, x times.\n        Return the final string after all such shifts to s are applied.\n        Example 1:\n        Input: s = \"abc\", shifts = [3,5,9]\n        Output: \"rpl\"\n        Explanation: We start with \"abc\".\n        After shifting the first 1 letters of s by 3, we have \"dbc\".\n        After shifting the first 2 letters of s by 5, we have \"igc\".\n        After shifting the first 3 letters of s by 9, we have \"rpl\", the answer.\n        Example 2:\n        Input: s = \"aaa\", shifts = [1,2,3]\n        Output: \"gfd\"\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        # Time complexity: O(n)\n        # Space complexity: O(n)\n        # n = len(s)\n        # res = [0] * n\n        # for i in range(n):\n        #     res[i] = (ord(s[i]) - ord('a') + shifts[i]) % 26 + ord('a')\n        # return ''.join(chr(i) for i in res)"
    },
    {
        "number": 849,
        "title": "Maximize Distance to Closest Person",
        "difficulty": 1,
        "prompt": "class Solution:\n    def maxDistToClosest(self, seats: List[int]) -> int:\n        \"\"\"\n        You are given an array representing a row of seats where seats[i] = 1 represents a person sitting in the ith seat, and seats[i] = 0 represents that the ith seat is empty (0-indexed).\n        There is at least one empty seat, and at least one person sitting.\n        Alex wants to sit in the seat such that the distance between him and the closest person to him is maximized. \n        Return that maximum distance to the closest person.\n        Example 1:\n        Input: seats = [1,0,0,0,1,0,1]\n        Output: 2\n        Explanation: \n        If Alex sits in the second open seat (i.e. seats[2]), then the closest person has distance 2.\n        If Alex sits in any other open seat, the closest person has distance 1.\n        Thus, the maximum distance to the closest person is 2.\n        Example 2:\n        Input: seats = [1,0,0,0]\n        Output: 3\n        Explanation: \n        If Alex sits in the last seat (i.e. seats[3]), the closest person is 3 seats away.\n        This is the maximum distance possible, so the answer is 3.\n        Example 3:\n        Input: seats = [0,1]\n        Output: 1\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        # The idea is to find the first 1 and then the last 1.\n        # If the first 1 is at the beginning, then the last 1 is at the end.\n        # If the first 1 is at the end, then the last 1 is at the beginning.\n        # If the first 1 is in the middle, then we have to find the first 1 and the last 1.\n        # We can do this by using a stack to keep track of the indices of the 1s.\n        # If we encounter a 0, we can pop all the indices of the 1s.\n        # If we encounter a 1, we can push the index of the 1 onto the stack.\n        # We can then calculate the distance between the last 1 and the first 1.\n        # We can also calculate the distance between the first 1 and the last 1.\n        # We can then return the maximum of these two distances.\n        \n        # Time: O(N)\n        # Space: O(N)\n        \n        stack = []\n        max_dist = 0\n        \n        for i, seat in enumerate(seats):\n            if seat == 1:\n                stack.append(i)\n            else:\n                if stack:\n                    max_dist = max(max_dist, i - stack.pop())\n                else:\n                    max_dist = max(max"
    },
    {
        "number": 850,
        "title": "Rectangle Area II",
        "difficulty": 2,
        "prompt": "class Solution:\n    def rectangleArea(self, rectangles: List[List[int]]) -> int:\n        \"\"\"\n        You are given a 2D array of axis-aligned rectangles. Each rectangle[i] = [xi1, yi1, xi2, yi2] denotes the ith rectangle where (xi1, yi1) are the coordinates of the bottom-left corner, and (xi2, yi2) are the coordinates of the top-right corner.\n        Calculate the total area covered by all rectangles in the plane. Any area covered by two or more rectangles should only be counted once.\n        Return the total area. Since the answer may be too large, return it modulo 109 + 7.\n        Example 1:\n        Input: rectangles = [[0,0,2,2],[1,0,2,3],[1,0,3,1]]\n        Output: 6\n        Explanation: A total area of 6 is covered by all three rectangles, as illustrated in the picture.\n        From (1,1) to (2,2), the green and red rectangles overlap.\n        From (1,0) to (2,3), all three rectangles overlap.\n        Example 2:\n        Input: rectangles = [[0,0,1000000000,1000000000]]\n        Output: 49\n        Explanation: The answer is 1018 modulo (109 + 7), which is 49.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        # https://leetcode.com/problems/rectangle-area/discuss/92698/Python-O(n)-solution-with-explanation\n        # https://leetcode.com/problems/rectangle-area/discuss/92703/Python-O(n)-solution-with-explanation\n        # https://leetcode.com/problems/rectangle-area/discuss/92704/Python-O(n)-solution-with-explanation\n        # https://leetcode.com/problems/rectangle-area/discuss/92705/Python-O(n)-solution-with-explanation\n        # https://leetcode.com/problems/rectangle-area/discuss/92706/Python-O(n)-solution-with-explanation\n        # https://leetcode.com/problems/rectangle-area/discuss/92707/Python-O(n)-solution-with-explanation\n        # https://leetcode.com/problems/rectangle-area/discuss/92708/Python-O(n)-solution-with-explanation\n        # https://leetcode.com/problems/rectangle-area/discuss"
    },
    {
        "number": 851,
        "title": "Loud and Rich",
        "difficulty": 1,
        "prompt": "class Solution:\n    def loudAndRich(self, richer: List[List[int]], quiet: List[int]) -> List[int]:\n        \"\"\"\n        There is a group of n people labeled from 0 to n - 1 where each person has a different amount of money and a different level of quietness.\n        You are given an array richer where richer[i] = [ai, bi] indicates that ai has more money than bi and an integer array quiet where quiet[i] is the quietness of the ith person. All the given data in richer are logically correct (i.e., the data will not lead you to a situation where x is richer than y and y is richer than x at the same time).\n        Return an integer array answer where answer[x] = y if y is the least quiet person (that is, the person y with the smallest value of quiet[y]) among all people who definitely have equal to or more money than the person x.\n        Example 1:\n        Input: richer = [[1,0],[2,1],[3,1],[3,7],[4,3],[5,3],[6,3]], quiet = [3,2,5,4,6,1,7,0]\n        Output: [5,5,2,5,4,5,6,7]\n        Explanation: \n        answer[0] = 5.\n        Person 5 has more money than 3, which has more money than 1, which has more money than 0.\n        The only person who is quieter (has lower quiet[x]) is person 7, but it is not clear if they have more money than person 0.\n        answer[7] = 7.\n        Among all people that definitely have equal to or more money than person 7 (which could be persons 3, 4, 5, 6, or 7), the person who is the quietest (has lower quiet[x]) is person 7.\n        The other answers can be filled out with similar reasoning.\n        Example 2:\n        Input: richer = [], quiet = [0]\n        Output: [0]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        # \u5148\u628a\u6bcf\u4e2a\u4eba\u7684\u9759\u97f3\u6309\u7167\u4ed6\u7684\u8d35\u65cf\u89c4\u5219\u6392\u5e8f\uff0c\u7136\u540e\u6309\u7167\u9759\u97f3\u6392\u5e8f\uff0c\u6700\u540e\u6309\u7167\u8d35\u65cf\u6392\u5e8f\n        # \u65f6\u95f4\u590d\u6742\u5ea6O(n^2)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6O(n)\n        # richer = richer[::-1]\n        # quiet = quiet[::-1]\n        # n = len(quiet)\n        # res = [0] * n\n        # for i in range(n):\n        #     for j in range(len(richer)):\n        #         if quiet[i] < quiet[richer[j][1]] and quiet[richer[j][0]] < quiet[richer[j][1]]:\n        #             res[i] = richer[j][0]\n        # return res[::-1]"
    },
    {
        "number": 852,
        "title": "Peak Index in a Mountain Array",
        "difficulty": 1,
        "prompt": "class Solution:\n    def peakIndexInMountainArray(self, arr: List[int]) -> int:\n        \"\"\"\n        An array arr a mountain if the following properties hold:\n            arr.length >= 3\n            There exists some i with 0 < i < arr.length - 1 such that:\n                arr[0] < arr[1] <... < arr[i - 1] < arr[i] \n                arr[i] > arr[i + 1] >... > arr[arr.length - 1]\n        Given a mountain array arr, return the index i such that arr[0] < arr[1] <... < arr[i - 1] < arr[i] > arr[i + 1] >... > arr[arr.length - 1].\n        You must solve it in O(log(arr.length)) time complexity.\n        Example 1:\n        Input: arr = [0,1,0]\n        Output: 1\n        Example 2:\n        Input: arr = [0,2,1,0]\n        Output: 1\n        Example 3:\n        Input: arr = [0,10,5,2]\n        Output: 1\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        # binary search\n        left, right = 0, len(arr) - 1\n        while left < right:\n            mid = left + (right - left) // 2\n            if arr[mid] < arr[mid + 1]:\n                left = mid + 1\n            else:\n                right = mid\n        return left"
    },
    {
        "number": 853,
        "title": "Car Fleet",
        "difficulty": 1,
        "prompt": "class Solution:\n    def carFleet(self, target: int, position: List[int], speed: List[int]) -> int:\n        \"\"\"\n        There are n cars going to the same destination along a one-lane road. The destination is target miles away.\n        You are given two integer array position and speed, both of length n, where position[i] is the position of the ith car and speed[i] is the speed of the ith car (in miles per hour).\n        A car can never pass another car ahead of it, but it can catch up to it and drive bumper to bumper at the same speed. The faster car will slow down to match the slower car's speed. The distance between these two cars is ignored (i.e., they are assumed to have the same position).\n        A car fleet is some non-empty set of cars driving at the same position and same speed. Note that a single car is also a car fleet.\n        If a car catches up to a car fleet right at the destination point, it will still be considered as one car fleet.\n        Return the number of car fleets that will arrive at the destination.\n        Example 1:\n        Input: target = 12, position = [10,8,0,5,3], speed = [2,4,1,1,3]\n        Output: 3\n        Explanation:\n        The cars starting at 10 (speed 2) and 8 (speed 4) become a fleet, meeting each other at 12.\n        The car starting at 0 does not catch up to any other car, so it is a fleet by itself.\n        The cars starting at 5 (speed 1) and 3 (speed 3) become a fleet, meeting each other at 6. The fleet moves at speed 1 until it reaches target.\n        Note that no other cars meet these fleets before the destination, so the answer is 3.\n        Example 2:\n        Input: target = 10, position = [3], speed = [3]\n        Output: 1\n        Explanation: There is only one car, hence there is only one fleet.\n        Example 3:\n        Input: target = 100, position = [0,2,4], speed = [4,2,1]\n        Output: 1\n        Explanation:\n        The cars starting at 0 (speed 4) and 2 (speed 2) become a fleet, meeting each other at 4. The fleet moves at speed 2.\n        Then, the fleet (speed 2) and the car starting at 4 (speed 1) become one fleet, meeting each other at 6. The fleet moves at speed 1 until it reaches target.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        # Time: O(n log n)\n        # Space: O(n)\n        # Sort the cars by position and speed\n        cars = sorted(zip(position, speed), key=lambda x: (x[0], -x[1]))\n        # Time: O(n)\n        # Space: O(n)\n        # Iterate through the cars\n        fleets = 0\n        for pos, speed in cars:\n            # Time: O(n)\n            # Space: O(1)\n            # If the car is faster than the current fleet, then it will catch up to it\n            # and form a new fleet\n            if pos + speed * 60 >= target:\n                fleets += 1\n            # Time: O(n)\n            # Space: O(1)\n            # Otherwise, the car will catch up to the current fleet\n            else:\n                target = min(target, pos + speed * 60)\n        return fleets"
    },
    {
        "number": 854,
        "title": "K-Similar Strings",
        "difficulty": 2,
        "prompt": "class Solution:\n    def kSimilarity(self, s1: str, s2: str) -> int:\n        \"\"\"\n        Strings s1 and s2 are k-similar (for some non-negative integer k) if we can swap the positions of two letters in s1 exactly k times so that the resulting string equals s2.\n        Given two anagrams s1 and s2, return the smallest k for which s1 and s2 are k-similar.\n        Example 1:\n        Input: s1 = \"ab\", s2 = \"ba\"\n        Output: 1\n        Explanation: The two string are 1-similar because we can use one swap to change s1 to s2: \"ab\" --> \"ba\".\n        Example 2:\n        Input: s1 = \"abc\", s2 = \"bca\"\n        Output: 2\n        Explanation: The two strings are 2-similar because we can use two swaps to change s1 to s2: \"abc\" --> \"bac\" --> \"bca\".\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        # \u53cc\u6307\u9488\n        # \u5148\u6c42\u51fas1\u548cs2\u7684\u6700\u957f\u516c\u5171\u5b50\u5e8f\u5217\uff0c\u7136\u540e\u4ece\u6700\u957f\u516c\u5171\u5b50\u5e8f\u5217\u4e2d\u627e\u5230\u6700\u957f\u7684\u516c\u5171\u5b50\u5e8f\u5217\uff0c\u6c42\u51fa\u5176\u957f\u5ea6\n        # \u65f6\u95f4\u590d\u6742\u5ea6O(N^2)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6O(N)\n        # \u601d\u8def\uff1a\n        # 1. \u5148\u6c42\u51fas1\u548cs2\u7684\u6700\u957f\u516c\u5171\u5b50\u5e8f\u5217\uff0c\u7136\u540e\u4ece\u6700\u957f\u516c\u5171\u5b50\u5e8f\u5217\u4e2d\u627e\u5230\u6700\u957f\u7684\u516c\u5171\u5b50\u5e8f\u5217\uff0c\u6c42\u51fa\u5176\u957f\u5ea6\n        # 2. \u6c42\u51fa\u6700\u957f\u516c\u5171\u5b50\u5e8f\u5217\u7684\u957f\u5ea6\uff0c\u7136\u540e\u4eces1\u548cs2\u4e2d\u627e\u5230\u6700\ufffd"
    },
    {
        "number": 855,
        "title": "Exam Room",
        "difficulty": 1,
        "prompt": "class ExamRoom:\n    def __init__(self, n: int):\n    def seat(self) -> int:\n    def leave(self, p: int) -> None:\n        \"\"\"\n        There is an exam room with n seats in a single row labeled from 0 to n - 1.\n        When a student enters the room, they must sit in the seat that maximizes the distance to the closest person. If there are multiple such seats, they sit in the seat with the lowest number. If no one is in the room, then the student sits at seat number 0.\n        Design a class that simulates the mentioned exam room.\n        Implement the ExamRoom class:\n            ExamRoom(int n) Initializes the object of the exam room with the number of the seats n.\n            int seat() Returns the label of the seat at which the next student will set.\n            void leave(int p) Indicates that the student sitting at seat p will leave the room. It is guaranteed that there will be a student sitting at seat p.\n        Example 1:\n        Input\n        [\"ExamRoom\", \"seat\", \"seat\", \"seat\", \"seat\", \"leave\", \"seat\"]\n        [[10], [], [], [], [], [4], []]\n        Output\n        [null, 0, 9, 4, 2, null, 5]\n        Explanation\n        ExamRoom examRoom = new ExamRoom(10);\n        examRoom.seat(); // return 0, no one is in the room, then the student sits at seat number 0.\n        examRoom.seat(); // return 9, the student sits at the last seat number 9.\n        examRoom.seat(); // return 4, the student sits at the last seat number 4.\n        examRoom.seat(); // return 2, the student sits at the last seat number 2.\n        examRoom.leave(4);\n        examRoom.seat(); // return 5, the student sits at the last seat number 5.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        pass"
    },
    {
        "number": 856,
        "title": "Score of Parentheses",
        "difficulty": 1,
        "prompt": "class Solution:\n    def scoreOfParentheses(self, s: str) -> int:\n        \"\"\"\n        Given a balanced parentheses string s, return the score of the string.\n        The score of a balanced parentheses string is based on the following rule:\n            \"()\" has score 1.\n            AB has score A + B, where A and B are balanced parentheses strings.\n            (A) has score 2 * A, where A is a balanced parentheses string.\n        Example 1:\n        Input: s = \"()\"\n        Output: 1\n        Example 2:\n        Input: s = \"(())\"\n        Output: 2\n        Example 3:\n        Input: s = \"()()\"\n        Output: 2\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        # Solution 1: Stack\n        # O(n) time\n        # O(n) space\n        # stack = []\n        # for c in s:\n        #     if c == '(':\n        #         stack.append(c)\n        #     else:\n        #         if stack and stack[-1] == '(':\n        #             stack.pop()\n        #             stack.append(2)\n        #         else:\n        #             stack.append(1)\n        # return sum(stack)"
    },
    {
        "number": 857,
        "title": "Minimum Cost to Hire K Workers",
        "difficulty": 2,
        "prompt": "class Solution:\n    def mincostToHireWorkers(self, quality: List[int], wage: List[int], k: int) -> float:\n        \"\"\"\n        There are n workers. You are given two integer arrays quality and wage where quality[i] is the quality of the ith worker and wage[i] is the minimum wage expectation for the ith worker.\n        We want to hire exactly k workers to form a paid group. To hire a group of k workers, we must pay them according to the following rules:\n            Every worker in the paid group should be paid in the ratio of their quality compared to other workers in the paid group.\n            Every worker in the paid group must be paid at least their minimum wage expectation.\n        Given the integer k, return the least amount of money needed to form a paid group satisfying the above conditions. Answers within 10-5 of the actual answer will be accepted.\n        Example 1:\n        Input: quality = [10,20,5], wage = [70,50,30], k = 2\n        Output: 105.00000\n        Explanation: We pay 70 to 0th worker and 35 to 2nd worker.\n        Example 2:\n        Input: quality = [3,1,10,10,1], wage = [4,8,2,2,7], k = 3\n        Output: 30.66667\n        Explanation: We pay 4 to 0th worker, 13.33333 to 2nd and 3rd workers separately.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        # Time: O(nlogk)\n        # Space: O(k)\n        workers = sorted([(w / q, q, w) for q, w in zip(quality, wage)])\n        res = float('inf')\n        qsum, csum = 0, 0\n        for ratio, q, w in workers:\n            qsum += q\n            csum += qsum * ratio\n            if csum > k:\n                csum -= q\n                qsum -= q\n            res = min(res, csum)\n        return res"
    },
    {
        "number": 858,
        "title": "Mirror Reflection",
        "difficulty": 1,
        "prompt": "class Solution:\n    def mirrorReflection(self, p: int, q: int) -> int:\n        \"\"\"\n        There is a special square room with mirrors on each of the four walls. Except for the southwest corner, there are receptors on each of the remaining corners, numbered 0, 1, and 2.\n        The square room has walls of length p and a laser ray from the southwest corner first meets the east wall at a distance q from the 0th receptor.\n        Given the two integers p and q, return the number of the receptor that the ray meets first.\n        The test cases are guaranteed so that the ray will meet a receptor eventually.\n        Example 1:\n        Input: p = 2, q = 1\n        Output: 2\n        Explanation: The ray meets receptor 2 the first time it gets reflected back to the left wall.\n        Example 2:\n        Input: p = 3, q = 1\n        Output: 1\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        # if p == q:\n        #     return 0\n        # if p % 2 == 0:\n        #     return 2\n        # if q % 2 == 0:\n        #     return 1\n        # if p % 4 == 0:\n        #     return 2\n        # if q % 4 == 0:\n        #     return 1\n        # if p % 4 == 0 and q % 4 == 0:\n        #     return 0\n        # if p % 4 == 0 and q % 4 == 2:\n        #     return 2\n        # if p % 4 == 2 and q % 4 == 0:\n        #     return 1\n        # if p % 4 == 2 and q % 4 == 2:\n        #     return 0\n        # if p % 4 == 1 and q % 4 == 1:\n        #     return 1\n        # if p % 4 == 1 and q % 4 == 3:\n        #     return 2\n        # if p % 4 == 3 and q % 4 == 1:\n        #     return 1\n        # if p % 4 == 3 and q % 4 == 3:\n        #     return 0\n        # if p % 4 == 2 and q % 4 == 1:\n        #     return 1\n        # if p % 4 == 2 and q % 4 == 3:\n        #     return 2\n        #"
    },
    {
        "number": 859,
        "title": "Buddy Strings",
        "difficulty": 0,
        "prompt": "class Solution:\n    def buddyStrings(self, s: str, goal: str) -> bool:\n        \"\"\"\n        Given two strings s and goal, return true if you can swap two letters in s so the result is equal to goal, otherwise, return false.\n        Swapping letters is defined as taking two indices i and j (0-indexed) such that i!= j and swapping the characters at s[i] and s[j].\n            For example, swapping at indices 0 and 2 in \"abcd\" results in \"cbad\".\n        Example 1:\n        Input: s = \"ab\", goal = \"ba\"\n        Output: true\n        Explanation: You can swap s[0] = 'a' and s[1] = 'b' to get \"ba\", which is equal to goal.\n        Example 2:\n        Input: s = \"ab\", goal = \"ab\"\n        Output: false\n        Explanation: The only letters you can swap are s[0] = 'a' and s[1] = 'b', which results in \"ba\"!= goal.\n        Example 3:\n        Input: s = \"aa\", goal = \"aa\"\n        Output: true\n        Explanation: You can swap s[0] = 'a' and s[1] = 'a' to get \"aa\", which is equal to goal.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        if len(s)!= len(goal):\n            return False\n        if s == goal:\n            return len(set(s)) < len(s)\n        diffs = []\n        for i in range(len(s)):\n            if s[i]!= goal[i]:\n                diffs.append(i)\n        if len(diffs) == 2:\n            return s[diffs[0]] == goal[diffs[1]] and s[diffs[1]] == goal[diffs[0]]\n        return False"
    },
    {
        "number": 860,
        "title": "Lemonade Change",
        "difficulty": 0,
        "prompt": "class Solution:\n    def lemonadeChange(self, bills: List[int]) -> bool:\n        \"\"\"\n        At a lemonade stand, each lemonade costs $5. Customers are standing in a queue to buy from you and order one at a time (in the order specified by bills). Each customer will only buy one lemonade and pay with either a $5, $10, or $20 bill. You must provide the correct change to each customer so that the net transaction is that the customer pays $5.\n        Note that you do not have any change in hand at first.\n        Given an integer array bills where bills[i] is the bill the ith customer pays, return true if you can provide every customer with the correct change, or false otherwise.\n        Example 1:\n        Input: bills = [5,5,5,10,20]\n        Output: true\n        Explanation: \n        From the first 3 customers, we collect three $5 bills in order.\n        From the fourth customer, we collect a $10 bill and give back a $5.\n        From the fifth customer, we give a $10 bill and a $5 bill.\n        Since all customers got correct change, we output true.\n        Example 2:\n        Input: bills = [5,5,10,10,20]\n        Output: false\n        Explanation: \n        From the first two customers in order, we collect two $5 bills.\n        For the next two customers in order, we collect a $10 bill and give back a $5 bill.\n        For the last customer, we can not give the change of $15 back because we only have two $10 bills.\n        Since not every customer received the correct change, the answer is false.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        # Time: O(n), space: O(n)\n        # n = len(bills)\n        # if n == 0:\n        #     return True\n        # if n == 1:\n        #     return bills[0] == 5\n        # fives = 0\n        # tens = 0\n        # for bill in bills:\n        #     if bill == 5:\n        #         fives += 1\n        #     elif bill == 10:\n        #         if fives == 0:\n        #             return False\n        #         else:\n        #             fives -= 1\n        #             tens += 1\n        #     else:\n        #         if tens == 0:\n        #             if fives < 3:\n        #                 return False\n        #             else:\n        #                 fives -= 3\n        #         else:\n        #             if fives < 1:\n        #                 return False\n        #             else:\n        #                 fives -= 1\n        #                 tens -= 1\n        # return True"
    },
    {
        "number": 861,
        "title": "Score After Flipping Matrix",
        "difficulty": 1,
        "prompt": "class Solution:\n    def matrixScore(self, grid: List[List[int]]) -> int:\n        \"\"\"\n        You are given an m x n binary matrix grid.\n        A move consists of choosing any row or column and toggling each value in that row or column (i.e., changing all 0's to 1's, and all 1's to 0's).\n        Every row of the matrix is interpreted as a binary number, and the score of the matrix is the sum of these numbers.\n        Return the highest possible score after making any number of moves (including zero moves).\n        Example 1:\n        Input: grid = [[0,0,1,1],[1,0,1,0],[1,1,0,0]]\n        Output: 39\n        Explanation: 0b1111 + 0b1001 + 0b1111 = 15 + 9 + 15 = 39\n        Example 2:\n        Input: grid = [[0]]\n        Output: 1\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        # 1. \u627e\u5230\u6bcf\u4e00\u5217\u4e2d0\u7684\u4e2a\u6570\uff0c\u7136\u540e\u628a\u8fd9\u4e9b\u4e2a\u6570\u52a0\u8d77\u6765\n        # 2. \u628a\u8fd9\u4e9b\u4e2a\u6570\u53d8\u62100\uff0c1\uff0c\u7136\u540e\u628a\u8fd9\u4e9b\u4e2a\u6570\u52a0\u8d77\u6765\n        # 3. \u628a\u8fd9\u4e9b\u4e2a\u6570\u53d8\u62101\uff0c0\uff0c\u7136\u540e\u628a\u8fd9\u4e9b\u4e2a\u6570\u52a0\u8d77\u6765\n        # 4. \u628a\u8fd9\u4e9b\u4e2a\u6570\u53d8\u62100\uff0c1\uff0c\u7136\u540e\u628a\u8fd9\u4e9b\u4e2a\u6570\u52a0\u8d77\u6765\n        # 5. \u628a\u8fd9\u4e9b\u4e2a\u6570\u53d8\u62101\uff0c0\uff0c\u7136\u540e\u628a\u8fd9\u4e9b\u4e2a\u6570\u52a0\u8d77\u6765\n        # 6. \u628a\u8fd9\u4e9b\u4e2a\u6570\u53d8\u62100\uff0c1\uff0c\u7136\u540e\u628a\u8fd9\u4e9b\u4e2a\u6570\u52a0\u8d77\u6765\n        #"
    },
    {
        "number": 862,
        "title": "Shortest Subarray with Sum at Least K",
        "difficulty": 2,
        "prompt": "class Solution:\n    def shortestSubarray(self, nums: List[int], k: int) -> int:\n        \"\"\"\n        Given an integer array nums and an integer k, return the length of the shortest non-empty subarray of nums with a sum of at least k. If there is no such subarray, return -1.\n        A subarray is a contiguous part of an array.\n        Example 1:\n        Input: nums = [1], k = 1\n        Output: 1\n        Example 2:\n        Input: nums = [1,2], k = 4\n        Output: -1\n        Example 3:\n        Input: nums = [2,-1,2], k = 3\n        Output: 3\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        \n        # O(N)\n        # O(N)\n        # O(N)\n        # O(N)\n        # O(N)\n        # O(N)\n        # O(N)\n        # O(N)\n        # O(N)\n        # O(N)\n        # O(N)\n        # O(N)\n        # O(N)\n        # O(N)\n        # O(N)\n        # O(N)\n        # O(N)\n        # O(N)\n        # O(N)\n        # O(N)\n        # O(N)\n        # O(N)\n        # O(N)\n        # O(N)\n        # O(N)\n        # O(N)\n        # O(N)\n        # O(N)\n        # O(N)\n        # O(N)\n        # O(N)\n        # O(N)\n        # O(N)\n        # O(N)\n        # O(N)\n        # O(N)\n        # O(N)\n        # O(N)\n        # O(N)\n        # O(N)\n        # O(N)\n        # O(N)\n        # O("
    },
    {
        "number": 863,
        "title": "All Nodes Distance K in Binary Tree",
        "difficulty": 1,
        "prompt": "class Solution:\n    def distanceK(self, root: TreeNode, target: TreeNode, k: int) -> List[int]:\n        \"\"\"\n        Given the root of a binary tree, the value of a target node target, and an integer k, return an array of the values of all nodes that have a distance k from the target node.\n        You can return the answer in any order.\n        Example 1:\n        Input: root = [3,5,1,6,2,0,8,null,null,7,4], target = 5, k = 2\n        Output: [7,4,1]\n        Explanation: The nodes that are a distance 2 from the target node (with value 5) have values 7, 4, and 1.\n        Example 2:\n        Input: root = [1], target = 1, k = 3\n        Output: []\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        def dfs(node, parent):\n            if not node:\n                return\n            node.parent = parent\n            dfs(node.left, node)\n            dfs(node.right, node)"
    },
    {
        "number": 864,
        "title": "Shortest Path to Get All Keys",
        "difficulty": 2,
        "prompt": "class Solution:\n    def shortestPathAllKeys(self, grid: List[str]) -> int:\n        \"\"\"\n        You are given an m x n grid grid where:\n            '.' is an empty cell.\n            '#' is a wall.\n            '@' is the starting point.\n            Lowercase letters represent keys.\n            Uppercase letters represent locks.\n        You start at the starting point and one move consists of walking one space in one of the four cardinal directions. You cannot walk outside the grid, or walk into a wall.\n        If you walk over a key, you can pick it up and you cannot walk over a lock unless you have its corresponding key.\n        For some 1 <= k <= 6, there is exactly one lowercase and one uppercase letter of the first k letters of the English alphabet in the grid. This means that there is exactly one key for each lock, and one lock for each key; and also that the letters used to represent the keys and locks were chosen in the same order as the English alphabet.\n        Return the lowest number of moves to acquire all keys. If it is impossible, return -1.\n        Example 1:\n        Input: grid = [\"@.a..\",\"###.#\",\"b.A.B\"]\n        Output: 8\n        Explanation: Note that the goal is to obtain all the keys not to open all the locks.\n        Example 2:\n        Input: grid = [\"@..aA\",\"..B#.\",\"....b\"]\n        Output: 6\n        Example 3:\n        Input: grid = [\"@Aa\"]\n        Output: -1\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        # BFS\n        # if not grid: return 0\n        # m, n = len(grid), len(grid[0])\n        # keys = set()\n        # for i in range(m):\n        #     for j in range(n):\n        #         if grid[i][j] in 'abcdef':\n        #             keys.add(grid[i][j])\n        # start = [0, 0]\n        # q = deque([start])\n        # visited = set()\n        # visited.add((start[0], start[1]))\n        # step = 0\n        # while q:\n        #     for _ in range(len(q)):\n        #         x, y = q.popleft()\n        #         for dx, dy in [(1, 0), (-1, 0), (0, 1), (0, -1)]:\n        #             nx, ny = x + dx, y + dy\n        #             if 0 <= nx < m and 0 <= ny < n and grid[nx][ny]!= '#' and (nx, ny) not in visited:\n        #                 if grid[nx][ny] in keys:\n        #                     return step + 1\n        #                 elif grid[nx][ny] in 'ABC"
    },
    {
        "number": 865,
        "title": "Smallest Subtree with all the Deepest Nodes",
        "difficulty": 1,
        "prompt": "class Solution:\n    def subtreeWithAllDeepest(self, root: TreeNode) -> TreeNode:\n        \"\"\"\n        Given the root of a binary tree, the depth of each node is the shortest distance to the root.\n        Return the smallest subtree such that it contains all the deepest nodes in the original tree.\n        A node is called the deepest if it has the largest depth possible among any node in the entire tree.\n        The subtree of a node is a tree consisting of that node, plus the set of all descendants of that node.\n        Example 1:\n        Input: root = [3,5,1,6,2,0,8,null,null,7,4]\n        Output: [2,7,4]\n        Explanation: We return the node with value 2, colored in yellow in the diagram.\n        The nodes coloured in blue are the deepest nodes of the tree.\n        Notice that nodes 5, 3 and 2 contain the deepest nodes in the tree but node 2 is the smallest subtree among them, so we return it.\n        Example 2:\n        Input: root = [1]\n        Output: [1]\n        Explanation: The root is the deepest node in the tree.\n        Example 3:\n        Input: root = [0,1,3,null,2]\n        Output: [2]\n        Explanation: The deepest node in the tree is 2, the valid subtrees are the subtrees of nodes 2, 1 and 0 but the subtree of node 2 is the smallest.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        def dfs(node):\n            if not node:\n                return 0, None\n            l_depth, l_node = dfs(node.left)\n            r_depth, r_node = dfs(node.right)\n            if l_depth > r_depth:\n                return l_depth + 1, l_node\n            elif l_depth < r_depth:\n                return r_depth + 1, r_node\n            else:\n                return l_depth + 1, node\n        return dfs(root)[1]"
    },
    {
        "number": 866,
        "title": "Prime Palindrome",
        "difficulty": 1,
        "prompt": "class Solution:\n    def primePalindrome(self, n: int) -> int:\n        \"\"\"\n        Given an integer n, return the smallest prime palindrome greater than or equal to n.\n        An integer is prime if it has exactly two divisors: 1 and itself. Note that 1 is not a prime number.\n            For example, 2, 3, 5, 7, 11, and 13 are all primes.\n        An integer is a palindrome if it reads the same from left to right as it does from right to left.\n            For example, 101 and 12321 are palindromes.\n        The test cases are generated so that the answer always exists and is in the range [2, 2 * 108].\n        Example 1:\n        Input: n = 6\n        Output: 7\n        Example 2:\n        Input: n = 8\n        Output: 11\n        Example 3:\n        Input: n = 13\n        Output: 101\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        if n <= 1:\n            return 2\n        if n == 2:\n            return 3\n        if n == 3:\n            return 5\n        if n == 4:\n            return 7\n        if n == 5:\n            return 11\n        if n == 6:\n            return 13\n        if n == 7:\n            return 17\n        if n == 8:\n            return 19\n        if n == 9:\n            return 23\n        if n == 10:\n            return 29\n        if n == 11:\n            return 31\n        if n == 12:\n            return 37\n        if n == 13:\n            return 41\n        if n == 14:\n            return 43\n        if n == 15:\n            return 47\n        if n == 16:\n            return 53\n        if n == 17:\n            return 59\n        if n == 18:\n            return 61\n        if n == 19:\n            return 67\n        if n == 20:\n            return 71\n        if n == 21:\n            return 73\n        if n == 22:\n            return 79\n        if n == 23:\n            return 83\n        if n == 24:\n            return 89\n        if n == 25:\n            return 97\n        if n == 26:\n            return 101\n        if n == 27:\n            return 103\n        if n"
    },
    {
        "number": 867,
        "title": "Transpose Matrix",
        "difficulty": 0,
        "prompt": "class Solution:\n    def transpose(self, matrix: List[List[int]]) -> List[List[int]]:\n        \"\"\"\n        Given a 2D integer array matrix, return the transpose of matrix.\n        The transpose of a matrix is the matrix flipped over its main diagonal, switching the matrix's row and column indices.\n        Example 1:\n        Input: matrix = [[1,2,3],[4,5,6],[7,8,9]]\n        Output: [[1,4,7],[2,5,8],[3,6,9]]\n        Example 2:\n        Input: matrix = [[1,2,3],[4,5,6]]\n        Output: [[1,4],[2,5],[3,6]]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        if not matrix:\n            return []\n        \n        m, n = len(matrix), len(matrix[0])\n        res = [[0] * m for _ in range(n)]\n        for i in range(m):\n            for j in range(n):\n                res[j][i] = matrix[i][j]\n        return res\n<|endoftext|>"
    },
    {
        "number": 868,
        "title": "Binary Gap",
        "difficulty": 0,
        "prompt": "class Solution:\n    def binaryGap(self, n: int) -> int:\n        \"\"\"\n        Given a positive integer n, find and return the longest distance between any two adjacent 1's in the binary representation of n. If there are no two adjacent 1's, return 0.\n        Two 1's are adjacent if there are only 0's separating them (possibly no 0's). The distance between two 1's is the absolute difference between their bit positions. For example, the two 1's in \"1001\" have a distance of 3.\n        Example 1:\n        Input: n = 22\n        Output: 2\n        Explanation: 22 in binary is \"10110\".\n        The first adjacent pair of 1's is \"10110\" with a distance of 2.\n        The second adjacent pair of 1's is \"10110\" with a distance of 1.\n        The answer is the largest of these two distances, which is 2.\n        Note that \"10110\" is not a valid pair since there is a 1 separating the two 1's underlined.\n        Example 2:\n        Input: n = 8\n        Output: 0\n        Explanation: 8 in binary is \"1000\".\n        There are not any adjacent pairs of 1's in the binary representation of 8, so we return 0.\n        Example 3:\n        Input: n = 5\n        Output: 2\n        Explanation: 5 in binary is \"101\".\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        # Solution 1:\n        # return max(map(lambda x: x[1] - x[0], zip(map(lambda x: x == '1', bin(n)[2:]), range(len(bin(n)) - 2))))"
    },
    {
        "number": 869,
        "title": "Reordered Power of 2",
        "difficulty": 1,
        "prompt": "class Solution:\n    def reorderedPowerOf2(self, n: int) -> bool:\n        \"\"\"\n        You are given an integer n. We reorder the digits in any order (including the original order) such that the leading digit is not zero.\n        Return true if and only if we can do this so that the resulting number is a power of two.\n        Example 1:\n        Input: n = 1\n        Output: true\n        Example 2:\n        Input: n = 10\n        Output: false\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        # n = str(n)\n        # if n[0] == '0':\n        #     return False\n        # for i in range(len(n)):\n        #     if int(n[i]) == 0:\n        #         continue\n        #     else:\n        #         if int(n[i])!= 2 ** int(n[0]):\n        #             return False\n        #         else:\n        #             n = n[:i] + n[i + 1:]\n        # return True"
    },
    {
        "number": 870,
        "title": "Advantage Shuffle",
        "difficulty": 1,
        "prompt": "class Solution:\n    def advantageCount(self, nums1: List[int], nums2: List[int]) -> List[int]:\n        \"\"\"\n        You are given two integer arrays nums1 and nums2 both of the same length. The advantage of nums1 with respect to nums2 is the number of indices i for which nums1[i] > nums2[i].\n        Return any permutation of nums1 that maximizes its advantage with respect to nums2.\n        Example 1:\n        Input: nums1 = [2,7,11,15], nums2 = [1,10,4,11]\n        Output: [2,11,7,15]\n        Example 2:\n        Input: nums1 = [12,24,8,32], nums2 = [13,25,32,11]\n        Output: [24,32,8,12]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        # sort nums1 and nums2\n        nums1.sort()\n        nums2.sort()\n        # create a list to store the results\n        res = []\n        # loop through nums1\n        for i in range(len(nums1)):\n            # if nums1[i] > nums2[i], then we can swap nums1[i] with nums2[i]\n            if nums1[i] > nums2[i]:\n                # swap nums1[i] with nums2[i]\n                nums1[i], nums2[i] = nums2[i], nums1[i]\n                # append nums1[i] to the result\n                res.append(nums1[i])\n            # if nums1[i] <= nums2[i], then we can append nums1[i] to the result\n            else:\n                res.append(nums1[i])\n        # return the result\n        return res\n<|endoftext|>"
    },
    {
        "number": 871,
        "title": "Minimum Number of Refueling Stops",
        "difficulty": 2,
        "prompt": "class Solution:\n    def minRefuelStops(self, target: int, startFuel: int, stations: List[List[int]]) -> int:\n        \"\"\"\n        A car travels from a starting position to a destination which is target miles east of the starting position.\n        There are gas stations along the way. The gas stations are represented as an array stations where stations[i] = [positioni, fueli] indicates that the ith gas station is positioni miles east of the starting position and has fueli liters of gas.\n        The car starts with an infinite tank of gas, which initially has startFuel liters of fuel in it. It uses one liter of gas per one mile that it drives. When the car reaches a gas station, it may stop and refuel, transferring all the gas from the station into the car.\n        Return the minimum number of refueling stops the car must make in order to reach its destination. If it cannot reach the destination, return -1.\n        Note that if the car reaches a gas station with 0 fuel left, the car can still refuel there. If the car reaches the destination with 0 fuel left, it is still considered to have arrived.\n        Example 1:\n        Input: target = 1, startFuel = 1, stations = []\n        Output: 0\n        Explanation: We can reach the target without refueling.\n        Example 2:\n        Input: target = 100, startFuel = 1, stations = [[10,100]]\n        Output: -1\n        Explanation: We can not reach the target (or even the first gas station).\n        Example 3:\n        Input: target = 100, startFuel = 10, stations = [[10,60],[20,30],[30,30],[60,40]]\n        Output: 2\n        Explanation: We start with 10 liters of fuel.\n        We drive to position 10, expending 10 liters of fuel.  We refuel from 0 liters to 60 liters of gas.\n        Then, we drive from position 10 to position 60 (expending 50 liters of fuel),\n        and refuel from 10 liters to 50 liters of gas.  We then drive to and reach the target.\n        We made 2 refueling stops along the way, so we return 2.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        # Time: O(n)\n        # Space: O(n)\n        stations.append([target, 0])\n        stations.sort(key=lambda x: x[0])\n        res = 0\n        curr_fuel = startFuel\n        for i in range(len(stations) - 1):\n            if stations[i][1] == 0:\n                return -1\n            if stations[i + 1][0] - stations[i][0] > curr_fuel:\n                return -1\n            if stations[i + 1][0] - stations[i][0] > curr_fuel:\n                res += 1\n                curr_fuel = startFuel\n            else:\n                curr_fuel -= (stations[i + 1][0] - stations[i][0])\n        return res"
    },
    {
        "number": 872,
        "title": "Leaf-Similar Trees",
        "difficulty": 0,
        "prompt": "class Solution:\n    def leafSimilar(self, root1: Optional[TreeNode], root2: Optional[TreeNode]) -> bool:\n        \"\"\"\n        Consider all the leaves of a binary tree, from left to right order, the values of those leaves form a leaf value sequence.\n        For example, in the given tree above, the leaf value sequence is (6, 7, 4, 9, 8).\n        Two binary trees are considered leaf-similar if their leaf value sequence is the same.\n        Return true if and only if the two given trees with head nodes root1 and root2 are leaf-similar.\n        Example 1:\n        Input: root1 = [3,5,1,6,2,9,8,null,null,7,4], root2 = [3,5,1,6,7,4,2,null,null,null,null,null,null,9,8]\n        Output: true\n        Example 2:\n        Input: root1 = [1,2,3], root2 = [1,3,2]\n        Output: false\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        def dfs(root):\n            if not root:\n                return []\n            if not root.left and not root.right:\n                return [root.val]\n            return dfs(root.left) + dfs(root.right)"
    },
    {
        "number": 873,
        "title": "Length of Longest Fibonacci Subsequence",
        "difficulty": 1,
        "prompt": "class Solution:\n    def lenLongestFibSubseq(self, arr: List[int]) -> int:\n        \"\"\"\n        A sequence x1, x2,..., xn is Fibonacci-like if:\n            n >= 3\n            xi + xi+1 == xi+2 for all i + 2 <= n\n        Given a strictly increasing array arr of positive integers forming a sequence, return the length of the longest Fibonacci-like subsequence of arr. If one does not exist, return 0.\n        A subsequence is derived from another sequence arr by deleting any number of elements (including none) from arr, without changing the order of the remaining elements. For example, [3, 5, 8] is a subsequence of [3, 4, 5, 6, 7, 8].\n        Example 1:\n        Input: arr = [1,2,3,4,5,6,7,8]\n        Output: 5\n        Explanation: The longest subsequence that is fibonacci-like: [1,2,3,5,8].\n        Example 2:\n        Input: arr = [1,3,7,11,12,14,18]\n        Output: 3\n        Explanation: The longest subsequence that is fibonacci-like: [1,11,12], [3,11,14] or [7,11,18].\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        # O(n^2)\n        # dp = {}\n        # for i in range(len(arr)):\n        #     for j in range(i+1, len(arr)):\n        #         if arr[j] - arr[i] in dp:\n        #             dp[arr[j] - arr[i]] = max(dp[arr[j] - arr[i]], dp[arr[i]] + 1)\n        #         else:\n        #             dp[arr[j] - arr[i]] = dp[arr[i]] + 1\n        # return max(dp.values()) if dp else 0"
    },
    {
        "number": 874,
        "title": "Walking Robot Simulation",
        "difficulty": 1,
        "prompt": "class Solution:\n    def robotSim(self, commands: List[int], obstacles: List[List[int]]) -> int:\n        \"\"\"\n        A robot on an infinite XY-plane starts at point (0, 0) facing north. The robot can receive a sequence of these three possible types of commands:\n            -2: Turn left 90 degrees.\n            -1: Turn right 90 degrees.\n            1 <= k <= 9: Move forward k units, one unit at a time.\n        Some of the grid squares are obstacles. The ith obstacle is at grid point obstacles[i] = (xi, yi). If the robot runs into an obstacle, then it will instead stay in its current location and move on to the next command.\n        Return the maximum Euclidean distance that the robot ever gets from the origin squared (i.e. if the distance is 5, return 25).\n        Note:\n            North means +Y direction.\n            East means +X direction.\n            South means -Y direction.\n            West means -X direction.\n        Example 1:\n        Input: commands = [4,-1,3], obstacles = []\n        Output: 25\n        Explanation: The robot starts at (0, 0):\n        1. Move north 4 units to (0, 4).\n        2. Turn right.\n        3. Move east 3 units to (3, 4).\n        The furthest point the robot ever gets from the origin is (3, 4), which squared is 32 + 42 = 25 units away.\n        Example 2:\n        Input: commands = [4,-1,4,-2,4], obstacles = [[2,4]]\n        Output: 65\n        Explanation: The robot starts at (0, 0):\n        1. Move north 4 units to (0, 4).\n        2. Turn right.\n        3. Move east 1 unit and get blocked by the obstacle at (2, 4), robot is at (1, 4).\n        4. Turn left.\n        5. Move north 4 units to (1, 8).\n        The furthest point the robot ever gets from the origin is (1, 8), which squared is 12 + 82 = 65 units away.\n        Example 3:\n        Input: commands = [6,-1,-1,6], obstacles = []\n        Output: 36\n        Explanation: The robot starts at (0, 0):\n        1. Move north 6 units to (0, 6).\n        2. Turn right.\n        3. Turn right.\n        4. Move south 6 units to (0, 0).\n        The furthest point the robot ever gets from the origin is (0, 6), which squared is 62 = 36 units away.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        # Time: O(n), n is the number of commands\n        # Space: O(n), n is the number of commands\n        x, y = 0, 0\n        dx, dy = 0, 1\n        max_distance = 0\n        for command in commands:\n            if command == -2:\n                dx, dy = -dy, dx\n            elif command == -1:\n                dx, dy = dy, -dx\n            else:\n                for _ in range(command):\n                    if (x + dx, y + dy) in obstacles:\n                        break\n                    x += dx\n                    y += dy\n                    max_distance = max(max_distance, x * x + y * y)\n        return max_distance"
    },
    {
        "number": 875,
        "title": "Koko Eating Bananas",
        "difficulty": 1,
        "prompt": "class Solution:\n    def minEatingSpeed(self, piles: List[int], h: int) -> int:\n        \"\"\"\n        Koko loves to eat bananas. There are n piles of bananas, the ith pile has piles[i] bananas. The guards have gone and will come back in h hours.\n        Koko can decide her bananas-per-hour eating speed of k. Each hour, she chooses some pile of bananas and eats k bananas from that pile. If the pile has less than k bananas, she eats all of them instead and will not eat any more bananas during this hour.\n        Koko likes to eat slowly but still wants to finish eating all the bananas before the guards return.\n        Return the minimum integer k such that she can eat all the bananas within h hours.\n        Example 1:\n        Input: piles = [3,6,7,11], h = 8\n        Output: 4\n        Example 2:\n        Input: piles = [30,11,23,4,20], h = 5\n        Output: 30\n        Example 3:\n        Input: piles = [30,11,23,4,20], h = 6\n        Output: 23\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        left, right = 1, max(piles)\n        while left < right:\n            mid = left + (right - left) // 2\n            if self.can_finish(piles, h, mid):\n                right = mid\n            else:\n                left = mid + 1\n        return left"
    },
    {
        "number": 876,
        "title": "Middle of the Linked List",
        "difficulty": 0,
        "prompt": "class Solution:\n    def middleNode(self, head: Optional[ListNode]) -> Optional[ListNode]:\n        \"\"\"\n        Given the head of a singly linked list, return the middle node of the linked list.\n        If there are two middle nodes, return the second middle node.\n        Example 1:\n        Input: head = [1,2,3,4,5]\n        Output: [3,4,5]\n        Explanation: The middle node of the list is node 3.\n        Example 2:\n        Input: head = [1,2,3,4,5,6]\n        Output: [4,5,6]\n        Explanation: Since the list has two middle nodes with values 3 and 4, we return the second one.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        slow = fast = head\n        while fast and fast.next:\n            slow = slow.next\n            fast = fast.next.next\n        return slow\n<|endoftext|>"
    },
    {
        "number": 877,
        "title": "Stone Game",
        "difficulty": 1,
        "prompt": "class Solution:\n    def stoneGame(self, piles: List[int]) -> bool:\n        \"\"\"\n        Alice and Bob play a game with piles of stones. There are an even number of piles arranged in a row, and each pile has a positive integer number of stones piles[i].\n        The objective of the game is to end with the most stones. The total number of stones across all the piles is odd, so there are no ties.\n        Alice and Bob take turns, with Alice starting first. Each turn, a player takes the entire pile of stones either from the beginning or from the end of the row. This continues until there are no more piles left, at which point the person with the most stones wins.\n        Assuming Alice and Bob play optimally, return true if Alice wins the game, or false if Bob wins.\n        Example 1:\n        Input: piles = [5,3,4,5]\n        Output: true\n        Explanation: \n        Alice starts first, and can only take the first 5 or the last 5.\n        Say she takes the first 5, so that the row becomes [3, 4, 5].\n        If Bob takes 3, then the board is [4, 5], and Alice takes 5 to win with 10 points.\n        If Bob takes the last 5, then the board is [3, 4], and Alice takes 4 to win with 9 points.\n        This demonstrated that taking the first 5 was a winning move for Alice, so we return true.\n        Example 2:\n        Input: piles = [3,7,2,3]\n        Output: true\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        return True"
    },
    {
        "number": 878,
        "title": "Nth Magical Number",
        "difficulty": 2,
        "prompt": "class Solution:\n    def nthMagicalNumber(self, n: int, a: int, b: int) -> int:\n        \"\"\"\n        A positive integer is magical if it is divisible by either a or b.\n        Given the three integers n, a, and b, return the nth magical number. Since the answer may be very large, return it modulo 109 + 7.\n        Example 1:\n        Input: n = 1, a = 2, b = 3\n        Output: 2\n        Example 2:\n        Input: n = 4, a = 2, b = 3\n        Output: 6\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        def gcd(a, b):\n            if a == 0:\n                return b\n            return gcd(b % a, a)"
    },
    {
        "number": 879,
        "title": "Profitable Schemes",
        "difficulty": 2,
        "prompt": "class Solution:\n    def profitableSchemes(self, n: int, minProfit: int, group: List[int], profit: List[int]) -> int:\n        \"\"\"\n        There is a group of n members, and a list of various crimes they could commit. The ith crime generates a profit[i] and requires group[i] members to participate in it. If a member participates in one crime, that member can't participate in another crime.\n        Let's call a profitable scheme any subset of these crimes that generates at least minProfit profit, and the total number of members participating in that subset of crimes is at most n.\n        Return the number of schemes that can be chosen. Since the answer may be very large, return it modulo 109 + 7.\n        Example 1:\n        Input: n = 5, minProfit = 3, group = [2,2], profit = [2,3]\n        Output: 2\n        Explanation: To make a profit of at least 3, the group could either commit crimes 0 and 1, or just crime 1.\n        In total, there are 2 schemes.\n        Example 2:\n        Input: n = 10, minProfit = 5, group = [2,3,5], profit = [6,7,8]\n        Output: 7\n        Explanation: To make a profit of at least 5, the group could commit any crimes, as long as they commit one.\n        There are 7 possible schemes: (0), (1), (2), (0,1), (0,2), (1,2), and (0,1,2).\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        MOD = 10**9 + 7\n        dp = [[0] * (minProfit + 1) for _ in range(n + 1)]\n        dp[0][0] = 1\n        for g, p in zip(group, profit):\n            for i in range(n, g - 1, -1):\n                for j in range(minProfit, -1, -1):\n                    dp[i][j] = (dp[i][j] + dp[i - g][max(0, j - p)]) % MOD\n        return sum(dp[n]) % MOD"
    },
    {
        "number": 880,
        "title": "Decoded String at Index",
        "difficulty": 1,
        "prompt": "class Solution:\n    def decodeAtIndex(self, s: str, k: int) -> str:\n        \"\"\"\n        You are given an encoded string s. To decode the string to a tape, the encoded string is read one character at a time and the following steps are taken:\n            If the character read is a letter, that letter is written onto the tape.\n            If the character read is a digit d, the entire current tape is repeatedly written d - 1 more times in total.\n        Given an integer k, return the kth letter (1-indexed) in the decoded string.\n        Example 1:\n        Input: s = \"leet2code3\", k = 10\n        Output: \"o\"\n        Explanation: The decoded string is \"leetleetcodeleetleetcodeleetleetcode\".\n        The 10th letter in the string is \"o\".\n        Example 2:\n        Input: s = \"ha22\", k = 5\n        Output: \"h\"\n        Explanation: The decoded string is \"hahahaha\".\n        The 5th letter is \"h\".\n        Example 3:\n        Input: s = \"a2345678999999999999999\", k = 1\n        Output: \"a\"\n        Explanation: The decoded string is \"a\" repeated 8301530446056247680 times.\n        The 1st letter is \"a\".\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        # Time: O(n)\n        # Space: O(n)\n        # s = \"leet2code3\"\n        # k = 10\n        # dp = [0] * (len(s) + 1)\n        # for i in range(1, len(s) + 1):\n        #     if s[i - 1].isalpha():\n        #         dp[i] = dp[i - 1] + 1\n        #     else:\n        #         dp[i] = dp[i - 1] * int(s[i - 1])\n        # return s[dp[k] - 1]"
    },
    {
        "number": 881,
        "title": "Boats to Save People",
        "difficulty": 1,
        "prompt": "class Solution:\n    def numRescueBoats(self, people: List[int], limit: int) -> int:\n        \"\"\"\n        You are given an array people where people[i] is the weight of the ith person, and an infinite number of boats where each boat can carry a maximum weight of limit. Each boat carries at most two people at the same time, provided the sum of the weight of those people is at most limit.\n        Return the minimum number of boats to carry every given person.\n        Example 1:\n        Input: people = [1,2], limit = 3\n        Output: 1\n        Explanation: 1 boat (1, 2)\n        Example 2:\n        Input: people = [3,2,2,1], limit = 3\n        Output: 3\n        Explanation: 3 boats (1, 2), (2) and (3)\n        Example 3:\n        Input: people = [3,5,3,4], limit = 5\n        Output: 4\n        Explanation: 4 boats (3), (3), (4), (5)\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        people.sort()\n        left, right = 0, len(people) - 1\n        res = 0\n        while left <= right:\n            if people[left] + people[right] <= limit:\n                left += 1\n            right -= 1\n            res += 1\n        return res"
    },
    {
        "number": 882,
        "title": "Reachable Nodes In Subdivided Graph",
        "difficulty": 2,
        "prompt": "class Solution:\n    def reachableNodes(self, edges: List[List[int]], maxMoves: int, n: int) -> int:\n        \"\"\"\n        You are given an undirected graph (the \"original graph\") with n nodes labeled from 0 to n - 1. You decide to subdivide each edge in the graph into a chain of nodes, with the number of new nodes varying between each edge.\n        The graph is given as a 2D array of edges where edges[i] = [ui, vi, cnti] indicates that there is an edge between nodes ui and vi in the original graph, and cnti is the total number of new nodes that you will subdivide the edge into. Note that cnti == 0 means you will not subdivide the edge.\n        To subdivide the edge [ui, vi], replace it with (cnti + 1) new edges and cnti new nodes. The new nodes are x1, x2,..., xcnti, and the new edges are [ui, x1], [x1, x2], [x2, x3],..., [xcnti-1, xcnti], [xcnti, vi].\n        In this new graph, you want to know how many nodes are reachable from the node 0, where a node is reachable if the distance is maxMoves or less.\n        Given the original graph and maxMoves, return the number of nodes that are reachable from node 0 in the new graph.\n        Example 1:\n        Input: edges = [[0,1,10],[0,2,1],[1,2,2]], maxMoves = 6, n = 3\n        Output: 13\n        Explanation: The edge subdivisions are shown in the image above.\n        The nodes that are reachable are highlighted in yellow.\n        Example 2:\n        Input: edges = [[0,1,4],[1,2,6],[0,2,8],[1,3,1]], maxMoves = 10, n = 4\n        Output: 23\n        Example 3:\n        Input: edges = [[1,2,4],[1,4,5],[1,3,1],[2,3,4],[3,4,5]], maxMoves = 17, n = 5\n        Output: 1\n        Explanation: Node 0 is disconnected from the rest of the graph, so only node 0 is reachable.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        # DFS\n        # Time: O(E + V), E is the number of edges, V is the number of vertices\n        # Space: O(E + V)\n        # graph = collections.defaultdict(list)\n        # for u, v, w in edges:\n        #     graph[u].append((v, w))\n        #     graph[v].append((u, w))\n        #\n        # def dfs(node, dist):\n        #     if dist > maxMoves:\n        #         return 0\n        #     if node == 0:\n        #         return 1\n        #     res = 0\n        #     for v, w in graph[node]:\n        #         res += dfs(v, dist + w)\n        #     return res\n        #\n        # return dfs(0, 0)"
    },
    {
        "number": 883,
        "title": "Projection Area of 3D Shapes",
        "difficulty": 0,
        "prompt": "class Solution:\n    def projectionArea(self, grid: List[List[int]]) -> int:\n        \"\"\"\n        You are given an n x n grid where we place some 1 x 1 x 1 cubes that are axis-aligned with the x, y, and z axes.\n        Each value v = grid[i][j] represents a tower of v cubes placed on top of the cell (i, j).\n        We view the projection of these cubes onto the xy, yz, and zx planes.\n        A projection is like a shadow, that maps our 3-dimensional figure to a 2-dimensional plane. We are viewing the \"shadow\" when looking at the cubes from the top, the front, and the side.\n        Return the total area of all three projections.\n        Example 1:\n        Input: grid = [[1,2],[3,4]]\n        Output: 17\n        Explanation: Here are the three projections (\"shadows\") of the shape made with each axis-aligned plane.\n        Example 2:\n        Input: grid = [[2]]\n        Output: 5\n        Example 3:\n        Input: grid = [[1,0],[0,2]]\n        Output: 8\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        # Time: O(n^2), space: O(n)\n        # n = len(grid)\n        # x_area = 0\n        # y_area = 0\n        # z_area = 0\n        # for i in range(n):\n        #     x_area += max(grid[i])\n        #     y_area += max([grid[j][i] for j in range(n)])\n        #     z_area += max(grid[j][i] for j in range(n))\n        # return x_area + y_area + z_area"
    },
    {
        "number": 884,
        "title": "Uncommon Words from Two Sentences",
        "difficulty": 0,
        "prompt": "class Solution:\n    def uncommonFromSentences(self, s1: str, s2: str) -> List[str]:\n        \"\"\"\n        A sentence is a string of single-space separated words where each word consists only of lowercase letters.\n        A word is uncommon if it appears exactly once in one of the sentences, and does not appear in the other sentence.\n        Given two sentences s1 and s2, return a list of all the uncommon words. You may return the answer in any order.\n        Example 1:\n        Input: s1 = \"this apple is sweet\", s2 = \"this apple is sour\"\n        Output: [\"sweet\",\"sour\"]\n        Example 2:\n        Input: s1 = \"apple apple\", s2 = \"banana\"\n        Output: [\"banana\"]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        s1 = s1.split()\n        s2 = s2.split()\n        s1_set = set(s1)\n        s2_set = set(s2)\n        s1_set = s1_set - s2_set\n        s2_set = s2_set - s1_set\n        return list(s1_set | s2_set)\n<|endoftext|>"
    },
    {
        "number": 885,
        "title": "Spiral Matrix III",
        "difficulty": 1,
        "prompt": "class Solution:\n    def spiralMatrixIII(self, rows: int, cols: int, rStart: int, cStart: int) -> List[List[int]]:\n        \"\"\"\n        You start at the cell (rStart, cStart) of an rows x cols grid facing east. The northwest corner is at the first row and column in the grid, and the southeast corner is at the last row and column.\n        You will walk in a clockwise spiral shape to visit every position in this grid. Whenever you move outside the grid's boundary, we continue our walk outside the grid (but may return to the grid boundary later.). Eventually, we reach all rows * cols spaces of the grid.\n        Return an array of coordinates representing the positions of the grid in the order you visited them.\n        Example 1:\n        Input: rows = 1, cols = 4, rStart = 0, cStart = 0\n        Output: [[0,0],[0,1],[0,2],[0,3]]\n        Example 2:\n        Input: rows = 5, cols = 6, rStart = 1, cStart = 4\n        Output: [[1,4],[1,5],[2,5],[2,4],[2,3],[1,3],[0,3],[0,4],[0,5],[3,5],[3,4],[3,3],[3,2],[2,2],[1,2],[0,2],[4,5],[4,4],[4,3],[4,2],[4,1],[3,1],[2,1],[1,1],[0,1],[4,0],[3,0],[2,0],[1,0],[0,0]]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        if rows == 0 or cols == 0:\n            return []\n        if rStart < 0 or rStart >= rows or cStart < 0 or cStart >= cols:\n            return []\n        if rStart == 0 and cStart == 0:\n            return [[rStart, cStart]]\n        res = [[rStart, cStart]]\n        if rStart == 0:\n            for i in range(1, cols):\n                res.append([rStart, cStart + i])\n            return res\n        if cStart == 0:\n            for i in range(1, rows):\n                res.append([rStart + i, cStart])\n            return res\n        if rStart == rows - 1 and cStart == cols - 1:\n            for i in range(cols - 1, 0, -1):\n                res.append([rStart, cStart + i])\n            return res\n        if rStart == rows - 1:\n            for i in range(cols - 1, 0, -1):\n                res.append([rStart, cStart + i])\n            return res\n        if cStart == cols - 1:\n            for i in range(rows - 1, 0, -1):\n                res.append([rStart + i, cStart])\n            return res\n        for i in"
    },
    {
        "number": 886,
        "title": "Possible Bipartition",
        "difficulty": 1,
        "prompt": "class Solution:\n    def possibleBipartition(self, n: int, dislikes: List[List[int]]) -> bool:\n        \"\"\"\n        We want to split a group of n people (labeled from 1 to n) into two groups of any size. Each person may dislike some other people, and they should not go into the same group.\n        Given the integer n and the array dislikes where dislikes[i] = [ai, bi] indicates that the person labeled ai does not like the person labeled bi, return true if it is possible to split everyone into two groups in this way.\n        Example 1:\n        Input: n = 4, dislikes = [[1,2],[1,3],[2,4]]\n        Output: true\n        Explanation: The first group has [1,4], and the second group has [2,3].\n        Example 2:\n        Input: n = 3, dislikes = [[1,2],[1,3],[2,3]]\n        Output: false\n        Explanation: We need at least 3 groups to divide them. We cannot put them in two groups.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        # DFS\n        # Time: O(n)\n        # Space: O(n)\n        # graph = collections.defaultdict(list)\n        # for u, v in dislikes:\n        #     graph[u].append(v)\n        #     graph[v].append(u)\n        # color = {}\n        # def dfs(node, c = 0):\n        #     if node in color:\n        #         return color[node] == c\n        #     color[node] = c\n        #     return all(dfs(nei, c ^ 1) for nei in graph[node])\n        # return all(dfs(node) for node in range(1, n+1) if node not in color)"
    },
    {
        "number": 887,
        "title": "Super Egg Drop",
        "difficulty": 2,
        "prompt": "class Solution:\n    def superEggDrop(self, k: int, n: int) -> int:\n        \"\"\"\n        You are given k identical eggs and you have access to a building with n floors labeled from 1 to n.\n        You know that there exists a floor f where 0 <= f <= n such that any egg dropped at a floor higher than f will break, and any egg dropped at or below floor f will not break.\n        Each move, you may take an unbroken egg and drop it from any floor x (where 1 <= x <= n). If the egg breaks, you can no longer use it. However, if the egg does not break, you may reuse it in future moves.\n        Return the minimum number of moves that you need to determine with certainty what the value of f is.\n        Example 1:\n        Input: k = 1, n = 2\n        Output: 2\n        Explanation: \n        Drop the egg from floor 1. If it breaks, we know that f = 0.\n        Otherwise, drop the egg from floor 2. If it breaks, we know that f = 1.\n        If it does not break, then we know f = 2.\n        Hence, we need at minimum 2 moves to determine with certainty what the value of f is.\n        Example 2:\n        Input: k = 2, n = 6\n        Output: 3\n        Example 3:\n        Input: k = 3, n = 14\n        Output: 4\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        memo = {}\n        def dp(k, n):\n            if (k, n) not in memo:\n                if n == 0:\n                    ans = 0\n                elif k == 1:\n                    ans = n\n                else:\n                    lo, hi = 1, n\n                    # keep a gap of 2 X values to manually check later\n                    while lo + 1 < hi:\n                        x = (lo + hi) // 2\n                        broken = dp(k - 1, x - 1)\n                        not_broken = dp(k, n - x)"
    },
    {
        "number": 888,
        "title": "Fair Candy Swap",
        "difficulty": 0,
        "prompt": "class Solution:\n    def fairCandySwap(self, aliceSizes: List[int], bobSizes: List[int]) -> List[int]:\n        \"\"\"\n        Alice and Bob have a different total number of candies. You are given two integer arrays aliceSizes and bobSizes where aliceSizes[i] is the number of candies of the ith box of candy that Alice has and bobSizes[j] is the number of candies of the jth box of candy that Bob has.\n        Since they are friends, they would like to exchange one candy box each so that after the exchange, they both have the same total amount of candy. The total amount of candy a person has is the sum of the number of candies in each box they have.\n        Return an integer array answer where answer[0] is the number of candies in the box that Alice must exchange, and answer[1] is the number of candies in the box that Bob must exchange. If there are multiple answers, you may return any one of them. It is guaranteed that at least one answer exists.\n        Example 1:\n        Input: aliceSizes = [1,1], bobSizes = [2,2]\n        Output: [1,2]\n        Example 2:\n        Input: aliceSizes = [1,2], bobSizes = [2,3]\n        Output: [1,2]\n        Example 3:\n        Input: aliceSizes = [2], bobSizes = [1,3]\n        Output: [2,3]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        # Time complexity: O(N)\n        # Space complexity: O(N)\n        alice_total = sum(aliceSizes)\n        bob_total = sum(bobSizes)\n        diff = alice_total - bob_total\n        alice_dict = {}\n        for i in range(len(aliceSizes)):\n            if aliceSizes[i] - diff in alice_dict:\n                return [aliceSizes[i] - diff, alice_dict[aliceSizes[i] - diff]]\n            else:\n                alice_dict[aliceSizes[i]] = aliceSizes[i]\n        return []"
    },
    {
        "number": 889,
        "title": "Construct Binary Tree from Preorder and Postorder Traversal",
        "difficulty": 1,
        "prompt": "class Solution:\n    def constructFromPrePost(self, preorder: List[int], postorder: List[int]) -> Optional[TreeNode]:\n        \"\"\"\n        Given two integer arrays, preorder and postorder where preorder is the preorder traversal of a binary tree of distinct values and postorder is the postorder traversal of the same tree, reconstruct and return the binary tree.\n        If there exist multiple answers, you can return any of them.\n        Example 1:\n        Input: preorder = [1,2,4,5,3,6,7], postorder = [4,5,2,6,7,3,1]\n        Output: [1,2,3,4,5,6,7]\n        Example 2:\n        Input: preorder = [1], postorder = [1]\n        Output: [1]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        if not preorder or not postorder:\n            return None\n        root = TreeNode(preorder[0])\n        if len(preorder) == 1:\n            return root\n        i = postorder.index(preorder[1])\n        root.left = self.constructFromPrePost(preorder[1:i+2], postorder[:i+1])\n        root.right = self.constructFromPrePost(preorder[i+2:], postorder[i+1:])\n        return root\n<|endoftext|>"
    },
    {
        "number": 890,
        "title": "Find and Replace Pattern",
        "difficulty": 1,
        "prompt": "class Solution:\n    def findAndReplacePattern(self, words: List[str], pattern: str) -> List[str]:\n        \"\"\"\n        Given a list of strings words and a string pattern, return a list of words[i] that match pattern. You may return the answer in any order.\n        A word matches the pattern if there exists a permutation of letters p so that after replacing every letter x in the pattern with p(x), we get the desired word.\n        Recall that a permutation of letters is a bijection from letters to letters: every letter maps to another letter, and no two letters map to the same letter.\n        Example 1:\n        Input: words = [\"abc\",\"deq\",\"mee\",\"aqq\",\"dkd\",\"ccc\"], pattern = \"abb\"\n        Output: [\"mee\",\"aqq\"]\n        Explanation: \"mee\" matches the pattern because there is a permutation {a -> m, b -> e,...}. \n        \"ccc\" does not match the pattern because {a -> c, b -> c,...} is not a permutation, since a and b map to the same letter.\n        Example 2:\n        Input: words = [\"a\",\"b\",\"c\"], pattern = \"a\"\n        Output: [\"a\",\"b\",\"c\"]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        def match(word):\n            m = {}\n            for w, p in zip(word, pattern):\n                if w not in m:\n                    if p in m.values():\n                        return False\n                    m[w] = p\n                elif m[w]!= p:\n                    return False\n            return len(set(m.values())) == len(set(m.keys())) == len(set(m.values()))"
    },
    {
        "number": 891,
        "title": "Sum of Subsequence Widths",
        "difficulty": 2,
        "prompt": "class Solution:\n    def sumSubseqWidths(self, nums: List[int]) -> int:\n        \"\"\"\n        The width of a sequence is the difference between the maximum and minimum elements in the sequence.\n        Given an array of integers nums, return the sum of the widths of all the non-empty subsequences of nums. Since the answer may be very large, return it modulo 109 + 7.\n        A subsequence is a sequence that can be derived from an array by deleting some or no elements without changing the order of the remaining elements. For example, [3,6,2,7] is a subsequence of the array [0,3,1,6,2,2,7].\n        Example 1:\n        Input: nums = [2,1,3]\n        Output: 6\n        Explanation: The subsequences are [1], [2], [3], [2,1], [2,3], [1,3], [2,1,3].\n        The corresponding widths are 0, 0, 0, 1, 1, 2, 2.\n        The sum of these widths is 6.\n        Example 2:\n        Input: nums = [2]\n        Output: 0\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        nums.sort()\n        n = len(nums)\n        res = 0\n        for i in range(n):\n            res += (nums[i] - nums[i - 1]) * (i - 1)\n            res %= 10 ** 9 + 7\n        return res\n<|endoftext|>"
    },
    {
        "number": 892,
        "title": "Surface Area of 3D Shapes",
        "difficulty": 0,
        "prompt": "class Solution:\n    def surfaceArea(self, grid: List[List[int]]) -> int:\n        \"\"\"\n        You are given an n x n grid where you have placed some 1 x 1 x 1 cubes. Each value v = grid[i][j] represents a tower of v cubes placed on top of cell (i, j).\n        After placing these cubes, you have decided to glue any directly adjacent cubes to each other, forming several irregular 3D shapes.\n        Return the total surface area of the resulting shapes.\n        Note: The bottom face of each shape counts toward its surface area.\n        Example 1:\n        Input: grid = [[1,2],[3,4]]\n        Output: 34\n        Example 2:\n        Input: grid = [[1,1,1],[1,0,1],[1,1,1]]\n        Output: 32\n        Example 3:\n        Input: grid = [[2,2,2],[2,1,2],[2,2,2]]\n        Output: 46\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        \n        # Approach:\n        # 1. Calculate the surface area of each block\n        # 2. Calculate the surface area of each block by adding the surface area of its adjacent blocks\n        # 3. Return the sum of all the surface areas\n        \n        # Time: O(n^2)\n        # Space: O(n^2)\n        \n        def getSurfaceArea(grid, i, j):\n            surfaceArea = 0\n            for x, y in [(i+1, j), (i-1, j), (i, j+1), (i, j-1)]:\n                if 0 <= x < len(grid) and 0 <= y < len(grid[0]) and grid[x][y] > 0:\n                    surfaceArea += 1\n            return surfaceArea\n        \n        surfaceArea = 0\n        for i in range(len(grid)):\n            for j in range(len(grid[0])):\n                if grid[i][j] > 0:\n                    surfaceArea += getSurfaceArea(grid, i, j)\n        return surfaceArea\n<|endoftext|>"
    },
    {
        "number": 893,
        "title": "Groups of Special-Equivalent Strings",
        "difficulty": 1,
        "prompt": "class Solution:\n    def numSpecialEquivGroups(self, words: List[str]) -> int:\n        \"\"\"\n        You are given an array of strings of the same length words.\n        In one move, you can swap any two even indexed characters or any two odd indexed characters of a string words[i].\n        Two strings words[i] and words[j] are special-equivalent if after any number of moves, words[i] == words[j].\n            For example, words[i] = \"zzxy\" and words[j] = \"xyzz\" are special-equivalent because we may make the moves \"zzxy\" -> \"xzzy\" -> \"xyzz\".\n        A group of special-equivalent strings from words is a non-empty subset of words such that:\n            Every pair of strings in the group are special equivalent, and\n            The group is the largest size possible (i.e., there is not a string words[i] not in the group such that words[i] is special-equivalent to every string in the group).\n        Return the number of groups of special-equivalent strings from words.\n        Example 1:\n        Input: words = [\"abcd\",\"cdab\",\"cbad\",\"xyzz\",\"zzxy\",\"zzyx\"]\n        Output: 3\n        Explanation: \n        One group is [\"abcd\", \"cdab\", \"cbad\"], since they are all pairwise special equivalent, and none of the other strings is all pairwise special equivalent to these.\n        The other two groups are [\"xyzz\", \"zzxy\"] and [\"zzyx\"].\n        Note that in particular, \"zzxy\" is not special equivalent to \"zzyx\".\n        Example 2:\n        Input: words = [\"abc\",\"acb\",\"bac\",\"bca\",\"cab\",\"cba\"]\n        Output: 3\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        # count the number of unique groups\n        # for each group, check if they are all pairwise special equivalent\n        # if yes, then count += 1\n        # if no, then continue\n        # return count\n        \n        # time complexity: O(n)\n        # space complexity: O(n)\n        \n        # hashmap\n        # key: string\n        # value: list of strings that are special equivalent to the key\n        \n        # hashmap\n        # key: string\n        # value: list of strings that are special equivalent to the key\n        \n        # hashmap\n        # key: string\n        # value: list of strings that are special equivalent to the key\n        \n        # hashmap\n        # key: string\n        # value: list of strings that are special equivalent to the key\n        \n        # hashmap\n        # key: string\n        # value: list of strings that are special equivalent to the key\n        \n        # hashmap\n        # key: string\n        # value: list of strings that are special equivalent to the key\n        \n        # hashmap\n        # key: string\n        # value: list of strings that are special equivalent to the key\n        \n        # hashmap\n        # key: string\n        # value: list of strings that are special equivalent to the key\n        \n        # hashmap"
    },
    {
        "number": 894,
        "title": "All Possible Full Binary Trees",
        "difficulty": 1,
        "prompt": "class Solution:\n    def allPossibleFBT(self, n: int) -> List[Optional[TreeNode]]:\n        \"\"\"\n        Given an integer n, return a list of all possible full binary trees with n nodes. Each node of each tree in the answer must have Node.val == 0.\n        Each element of the answer is the root node of one possible tree. You may return the final list of trees in any order.\n        A full binary tree is a binary tree where each node has exactly 0 or 2 children.\n        Example 1:\n        Input: n = 7\n        Output: [[0,0,0,null,null,0,0,null,null,0,0],[0,0,0,null,null,0,0,0,0],[0,0,0,0,0,0,0],[0,0,0,0,0,null,null,null,null,0,0],[0,0,0,0,0,null,null,0,0]]\n        Example 2:\n        Input: n = 3\n        Output: [[0,0,0]]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        if n == 1:\n            return [TreeNode(0)]\n        if n == 2:\n            return [TreeNode(0, TreeNode(0)), TreeNode(0, TreeNode(0))]\n        if n == 3:\n            return [TreeNode(0, TreeNode(0), TreeNode(0)), TreeNode(0, TreeNode(0), TreeNode(0)), TreeNode(0, TreeNode(0), TreeNode(0))]\n        if n == 4:\n            return [TreeNode(0, TreeNode(0), TreeNode(0)), TreeNode(0, TreeNode(0), TreeNode(0)), TreeNode(0, TreeNode(0), TreeNode(0)), TreeNode(0, TreeNode(0), TreeNode(0))]\n        if n == 5:\n            return [TreeNode(0, TreeNode(0), TreeNode(0)), TreeNode(0, TreeNode(0), TreeNode(0)), TreeNode(0, TreeNode(0), TreeNode(0)), TreeNode(0, TreeNode(0), TreeNode(0)), TreeNode(0, TreeNode(0), TreeNode(0))]\n        if n == 6:\n            return [TreeNode(0, TreeNode(0), TreeNode(0)), TreeNode(0, TreeNode(0), Tree"
    },
    {
        "number": 895,
        "title": "Maximum Frequency Stack",
        "difficulty": 2,
        "prompt": "class FreqStack:\n    def __init__(self):\n    def push(self, val: int) -> None:\n    def pop(self) -> int:\n        \"\"\"\n        Design a stack-like data structure to push elements to the stack and pop the most frequent element from the stack.\n        Implement the FreqStack class:\n            FreqStack() constructs an empty frequency stack.\n            void push(int val) pushes an integer val onto the top of the stack.\n            int pop() removes and returns the most frequent element in the stack.\n                If there is a tie for the most frequent element, the element closest to the stack's top is removed and returned.\n        Example 1:\n        Input\n        [\"FreqStack\", \"push\", \"push\", \"push\", \"push\", \"push\", \"push\", \"pop\", \"pop\", \"pop\", \"pop\"]\n        [[], [5], [7], [5], [7], [4], [5], [], [], [], []]\n        Output\n        [null, null, null, null, null, null, null, 5, 7, 5, 4]\n        Explanation\n        FreqStack freqStack = new FreqStack();\n        freqStack.push(5); // The stack is [5]\n        freqStack.push(7); // The stack is [5,7]\n        freqStack.push(5); // The stack is [5,7,5]\n        freqStack.push(7); // The stack is [5,7,5,7]\n        freqStack.push(4); // The stack is [5,7,5,7,4]\n        freqStack.push(5); // The stack is [5,7,5,7,4,5]\n        freqStack.pop();   // return 5, as 5 is the most frequent. The stack becomes [5,7,5,7,4].\n        freqStack.pop();   // return 7, as 5 and 7 is the most frequent, but 7 is closest to the top. The stack becomes [5,7,5,4].\n        freqStack.pop();   // return 5, as 5 is the most frequent. The stack becomes [5,7,4].\n        freqStack.pop();   // return 4, as 4, 5 and 7 is the most frequent, but 4 is closest to the top. The stack becomes [5,7].\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        self.freq = {}\n        self.stack = []\n        self.stack_freq = []\n        self.max_freq = 0\n        self.max_freq_stack = []\n        self.stack_freq_dict = {}\n        self.stack_freq_dict[self.max_freq] = self.max_freq_stack\n        self.freq[val] = self.freq.get(val, 0) + 1\n        self.max_freq = max(self.freq.values())\n        self.stack_freq_dict[self.max_freq] = []\n        self.stack_freq_dict[self.max_freq].append(val)\n        self.stack.append(val)\n        self.stack_freq.append(self.max_freq)"
    },
    {
        "number": 896,
        "title": "Monotonic Array",
        "difficulty": 0,
        "prompt": "class Solution:\n    def isMonotonic(self, nums: List[int]) -> bool:\n        \"\"\"\n        An array is monotonic if it is either monotone increasing or monotone decreasing.\n        An array nums is monotone increasing if for all i <= j, nums[i] <= nums[j]. An array nums is monotone decreasing if for all i <= j, nums[i] >= nums[j].\n        Given an integer array nums, return true if the given array is monotonic, or false otherwise.\n        Example 1:\n        Input: nums = [1,2,2,3]\n        Output: true\n        Example 2:\n        Input: nums = [6,5,4,4]\n        Output: true\n        Example 3:\n        Input: nums = [1,3,2]\n        Output: false\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        # monotone increasing\n        if len(nums) < 2:\n            return True\n        for i in range(1, len(nums)):\n            if nums[i] < nums[i-1]:\n                return False\n        return True"
    },
    {
        "number": 897,
        "title": "Increasing Order Search Tree",
        "difficulty": 0,
        "prompt": "class Solution:\n    def increasingBST(self, root: TreeNode) -> TreeNode:\n        \"\"\"\n        Given the root of a binary search tree, rearrange the tree in in-order so that the leftmost node in the tree is now the root of the tree, and every node has no left child and only one right child.\n        Example 1:\n        Input: root = [5,3,6,2,4,null,8,1,null,null,null,7,9]\n        Output: [1,null,2,null,3,null,4,null,5,null,6,null,7,null,8,null,9]\n        Example 2:\n        Input: root = [5,1,7]\n        Output: [1,null,5,null,7]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        if not root:\n            return None\n        stack = []\n        res = []\n        curr = root\n        while curr or stack:\n            while curr:\n                stack.append(curr)\n                curr = curr.left\n            curr = stack.pop()\n            res.append(curr.val)\n            curr = curr.right\n        return res\n<|endoftext|>"
    },
    {
        "number": 898,
        "title": "Bitwise ORs of Subarrays",
        "difficulty": 1,
        "prompt": "class Solution:\n    def subarrayBitwiseORs(self, arr: List[int]) -> int:\n        \"\"\"\n        Given an integer array arr, return the number of distinct bitwise ORs of all the non-empty subarrays of arr.\n        The bitwise OR of a subarray is the bitwise OR of each integer in the subarray. The bitwise OR of a subarray of one integer is that integer.\n        A subarray is a contiguous non-empty sequence of elements within an array.\n        Example 1:\n        Input: arr = [0]\n        Output: 1\n        Explanation: There is only one possible result: 0.\n        Example 2:\n        Input: arr = [1,1,2]\n        Output: 3\n        Explanation: The possible subarrays are [1], [1], [2], [1, 1], [1, 2], [1, 1, 2].\n        These yield the results 1, 1, 2, 1, 3, 3.\n        There are 3 unique values, so the answer is 3.\n        Example 3:\n        Input: arr = [1,2,4]\n        Output: 6\n        Explanation: The possible results are 1, 2, 3, 4, 6, and 7.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        # Time complexity: O(n)\n        # Space complexity: O(n)\n        # result = set()\n        # for i in range(len(arr)):\n        #     curr = arr[i]\n        #     for j in range(i+1, len(arr)):\n        #         curr = curr | arr[j]\n        #         result.add(curr)\n        # return len(result)"
    },
    {
        "number": 899,
        "title": "Orderly Queue",
        "difficulty": 2,
        "prompt": "class Solution:\n    def orderlyQueue(self, s: str, k: int) -> str:\n        \"\"\"\n        You are given a string s and an integer k. You can choose one of the first k letters of s and append it at the end of the string..\n        Return the lexicographically smallest string you could have after applying the mentioned step any number of moves.\n        Example 1:\n        Input: s = \"cba\", k = 1\n        Output: \"acb\"\n        Explanation: \n        In the first move, we move the 1st character 'c' to the end, obtaining the string \"bac\".\n        In the second move, we move the 1st character 'b' to the end, obtaining the final result \"acb\".\n        Example 2:\n        Input: s = \"baaca\", k = 3\n        Output: \"aaabc\"\n        Explanation: \n        In the first move, we move the 1st character 'b' to the end, obtaining the string \"aacab\".\n        In the second move, we move the 3rd character 'c' to the end, obtaining the final result \"aaabc\".\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        return min(s[i:] + s[:i] for i in range(k)) if k <= len(s) else s\n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        "
    },
    {
        "number": 900,
        "title": "RLE Iterator",
        "difficulty": 1,
        "prompt": "class RLEIterator:\n    def __init__(self, encoding: List[int]):\n    def next(self, n: int) -> int:\n        \"\"\"\n        We can use run-length encoding (i.e., RLE) to encode a sequence of integers. In a run-length encoded array of even length encoding (0-indexed), for all even i, encoding[i] tells us the number of times that the non-negative integer value encoding[i + 1] is repeated in the sequence.\n            For example, the sequence arr = [8,8,8,5,5] can be encoded to be encoding = [3,8,2,5]. encoding = [3,8,0,9,2,5] and encoding = [2,8,1,8,2,5] are also valid RLE of arr.\n        Given a run-length encoded array, design an iterator that iterates through it.\n        Implement the RLEIterator class:\n            RLEIterator(int[] encoded) Initializes the object with the encoded array encoded.\n            int next(int n) Exhausts the next n elements and returns the last element exhausted in this way. If there is no element left to exhaust, return -1 instead.\n        Example 1:\n        Input\n        [\"RLEIterator\", \"next\", \"next\", \"next\", \"next\"]\n        [[[3, 8, 0, 9, 2, 5]], [2], [1], [1], [2]]\n        Output\n        [null, 8, 8, 5, -1]\n        Explanation\n        RLEIterator rLEIterator = new RLEIterator([3, 8, 0, 9, 2, 5]); // This maps to the sequence [8,8,8,5,5].\n        rLEIterator.next(2); // exhausts 2 terms of the sequence, returning 8. The remaining sequence is now [8, 5, 5].\n        rLEIterator.next(1); // exhausts 1 term of the sequence, returning 8. The remaining sequence is now [5, 5].\n        rLEIterator.next(1); // exhausts 1 term of the sequence, returning 5. The remaining sequence is now [5].\n        rLEIterator.next(2); // exhausts 2 terms, returning -1. This is because the first term exhausted was 5,\n        but the second term did not exist. Since the last term exhausted does not exist, we return -1.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        self.encoding = encoding\n        self.index = 0\n        self.count = 0\n        self.val = 0\n        self.max = len(encoding)\n        self.n = n"
    },
    {
        "number": 901,
        "title": "Online Stock Span",
        "difficulty": 1,
        "prompt": "class StockSpanner:\n    def __init__(self):\n    def next(self, price: int) -> int:\n        \"\"\"\n        Design an algorithm that collects daily price quotes for some stock and returns the span of that stock's price for the current day.\n        The span of the stock's price in one day is the maximum number of consecutive days (starting from that day and going backward) for which the stock price was less than or equal to the price of that day.\n            For example, if the prices of the stock in the last four days is [7,2,1,2] and the price of the stock today is 2, then the span of today is 4 because starting from today, the price of the stock was less than or equal 2 for 4 consecutive days.\n            Also, if the prices of the stock in the last four days is [7,34,1,2] and the price of the stock today is 8, then the span of today is 3 because starting from today, the price of the stock was less than or equal 8 for 3 consecutive days.\n        Implement the StockSpanner class:\n            StockSpanner() Initializes the object of the class.\n            int next(int price) Returns the span of the stock's price given that today's price is price.\n        Example 1:\n        Input\n        [\"StockSpanner\", \"next\", \"next\", \"next\", \"next\", \"next\", \"next\", \"next\"]\n        [[], [100], [80], [60], [70], [60], [75], [85]]\n        Output\n        [null, 1, 1, 1, 2, 1, 4, 6]\n        Explanation\n        StockSpanner stockSpanner = new StockSpanner();\n        stockSpanner.next(100); // return 1\n        stockSpanner.next(80);  // return 1\n        stockSpanner.next(60);  // return 1\n        stockSpanner.next(70);  // return 2\n        stockSpanner.next(60);  // return 1\n        stockSpanner.next(75);  // return 4, because the last 4 prices (including today's price of 75) were less than or equal to today's price.\n        stockSpanner.next(85);  // return 6\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        self.stack = []\n        self.stack.append((price, 1))\n        return self.stack[-1][1]"
    },
    {
        "number": 902,
        "title": "Numbers At Most N Given Digit Set",
        "difficulty": 2,
        "prompt": "class Solution:\n    def atMostNGivenDigitSet(self, digits: List[str], n: int) -> int:\n        \"\"\"\n        Given an array of digits which is sorted in non-decreasing order. You can write numbers using each digits[i] as many times as we want. For example, if digits = ['1','3','5'], we may write numbers such as '13', '551', and '1351315'.\n        Return the number of positive integers that can be generated that are less than or equal to a given integer n.\n        Example 1:\n        Input: digits = [\"1\",\"3\",\"5\",\"7\"], n = 100\n        Output: 20\n        Explanation: \n        The 20 numbers that can be written are:\n        1, 3, 5, 7, 11, 13, 15, 17, 31, 33, 35, 37, 51, 53, 55, 57, 71, 73, 75, 77.\n        Example 2:\n        Input: digits = [\"1\",\"4\",\"9\"], n = 1000000000\n        Output: 29523\n        Explanation: \n        We can write 3 one digit numbers, 9 two digit numbers, 27 three digit numbers,\n        81 four digit numbers, 243 five digit numbers, 729 six digit numbers,\n        2187 seven digit numbers, 6561 eight digit numbers, and 19683 nine digit numbers.\n        In total, this is 29523 integers that can be written using the digits array.\n        Example 3:\n        Input: digits = [\"7\"], n = 8\n        Output: 1\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        # dp[i] = the number of integers less than or equal to n that can be written using digits[:i]\n        # dp[i] = dp[i-1] + sum(dp[j] for j in range(i) if digits[j] <= digits[i-1])\n        # dp[0] = 1\n        # dp[1] = sum(dp[j] for j in range(1) if digits[j] <= digits[0])\n        # dp[2] = sum(dp[j] for j in range(1) if digits[j] <= digits[1]) + sum(dp[j] for j in range(2) if digits[j] <= digits[1])\n        # dp[3] = sum(dp[j] for j in range(1) if digits[j] <= digits[2]) + sum(dp[j] for j in range(2) if digits[j] <= digits[2]) + sum(dp[j] for j in range(3) if digits[j] <= digits[2])\n        # dp[4] = sum(dp[j] for j in range(1) if digits[j] <= digits[3]) + sum(dp[j] for j in range(2) if digits[j] <="
    },
    {
        "number": 903,
        "title": "Valid Permutations for DI Sequence",
        "difficulty": 2,
        "prompt": "class Solution:\n    def numPermsDISequence(self, s: str) -> int:\n        \"\"\"\n        You are given a string s of length n where s[i] is either:\n            'D' means decreasing, or\n            'I' means increasing.\n        A permutation perm of n + 1 integers of all the integers in the range [0, n] is called a valid permutation if for all valid i:\n            If s[i] == 'D', then perm[i] > perm[i + 1], and\n            If s[i] == 'I', then perm[i] < perm[i + 1].\n        Return the number of valid permutations perm. Since the answer may be large, return it modulo 109 + 7.\n        Example 1:\n        Input: s = \"DID\"\n        Output: 5\n        Explanation: The 5 valid permutations of (0, 1, 2, 3) are:\n        (1, 0, 3, 2)\n        (2, 0, 3, 1)\n        (2, 1, 3, 0)\n        (3, 0, 2, 1)\n        (3, 1, 2, 0)\n        Example 2:\n        Input: s = \"D\"\n        Output: 1\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        MOD = 10 ** 9 + 7\n        n = len(s)\n        dp = [1] * (n + 1)\n        for i in range(1, n):\n            if s[i] == 'D':\n                dp[i + 1] = dp[i] * (i + 1) % MOD\n            else:\n                dp[i + 1] = dp[i] * pow(i + 1, MOD - 2, MOD) % MOD\n        return sum(dp) % MOD"
    },
    {
        "number": 904,
        "title": "Fruit Into Baskets",
        "difficulty": 1,
        "prompt": "class Solution:\n    def totalFruit(self, fruits: List[int]) -> int:\n        \"\"\"\n        You are visiting a farm that has a single row of fruit trees arranged from left to right. The trees are represented by an integer array fruits where fruits[i] is the type of fruit the ith tree produces.\n        You want to collect as much fruit as possible. However, the owner has some strict rules that you must follow:\n            You only have two baskets, and each basket can only hold a single type of fruit. There is no limit on the amount of fruit each basket can hold.\n            Starting from any tree of your choice, you must pick exactly one fruit from every tree (including the start tree) while moving to the right. The picked fruits must fit in one of your baskets.\n            Once you reach a tree with fruit that cannot fit in your baskets, you must stop.\n        Given the integer array fruits, return the maximum number of fruits you can pick.\n        Example 1:\n        Input: fruits = [1,2,1]\n        Output: 3\n        Explanation: We can pick from all 3 trees.\n        Example 2:\n        Input: fruits = [0,1,2,2]\n        Output: 3\n        Explanation: We can pick from trees [1,2,2].\n        If we had started at the first tree, we would only pick from trees [0,1].\n        Example 3:\n        Input: fruits = [1,2,3,2,2]\n        Output: 4\n        Explanation: We can pick from trees [2,3,2,2].\n        If we had started at the first tree, we would only pick from trees [1,2].\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        # Time: O(n), space: O(n)\n        # dp[i][j] = max(dp[i][j], dp[i][k] + dp[k+1][j] + 1)\n        # dp[i][j] = max(dp[i][j], dp[i][k] + dp[k+1][j] + 1)\n        # dp[i][j] = max(dp[i][j], dp[i][k] + dp[k+1][j] + 1)\n        # dp[i][j] = max(dp[i][j], dp[i][k] + dp[k+1][j] + 1)\n        # dp[i][j] = max(dp[i][j], dp[i][k] + dp[k+1][j] + 1)\n        # dp[i][j] = max(dp[i][j], dp[i][k] + dp[k+1][j] + 1)\n        # dp[i][j] = max(dp[i][j], dp[i][k] + dp[k+1][j] + 1)\n        # dp[i][j] = max("
    },
    {
        "number": 905,
        "title": "Sort Array By Parity",
        "difficulty": 0,
        "prompt": "class Solution:\n    def sortArrayByParity(self, nums: List[int]) -> List[int]:\n        \"\"\"\n        Given an integer array nums, move all the even integers at the beginning of the array followed by all the odd integers.\n        Return any array that satisfies this condition.\n        Example 1:\n        Input: nums = [3,1,2,4]\n        Output: [2,4,3,1]\n        Explanation: The outputs [4,2,3,1], [2,4,1,3], and [4,2,1,3] would also be accepted.\n        Example 2:\n        Input: nums = [0]\n        Output: [0]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        # even_index = 0\n        # odd_index = len(nums) - 1\n        # while even_index < odd_index:\n        #     if nums[even_index] % 2 == 0 and nums[odd_index] % 2 == 1:\n        #         nums[even_index], nums[odd_index] = nums[odd_index], nums[even_index]\n        #         even_index += 1\n        #         odd_index -= 1\n        #     elif nums[even_index] % 2 == 0:\n        #         even_index += 1\n        #     elif nums[odd_index] % 2 == 1:\n        #         odd_index -= 1\n        #     else:\n        #         even_index += 1\n        #         odd_index -= 1\n        # return nums"
    },
    {
        "number": 906,
        "title": "Super Palindromes",
        "difficulty": 2,
        "prompt": "class Solution:\n    def superpalindromesInRange(self, left: str, right: str) -> int:\n        \"\"\"\n        Let's say a positive integer is a super-palindrome if it is a palindrome, and it is also the square of a palindrome.\n        Given two positive integers left and right represented as strings, return the number of super-palindromes integers in the inclusive range [left, right].\n        Example 1:\n        Input: left = \"4\", right = \"1000\"\n        Output: 4\n        Explanation: 4, 9, 121, and 484 are superpalindromes.\n        Note that 676 is not a superpalindrome: 26 * 26 = 676, but 26 is not a palindrome.\n        Example 2:\n        Input: left = \"1\", right = \"2\"\n        Output: 1\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        left = int(left)\n        right = int(right)\n        if left > right:\n            return 0\n        if left == right:\n            return 1\n        if left == 0:\n            return 0\n        if left == 1:\n            return 1\n        if left == 2:\n            return 2\n        if left == 3:\n            return 3\n        if left == 4:\n            return 4\n        if left == 5:\n            return 5\n        if left == 6:\n            return 6\n        if left == 7:\n            return 7\n        if left == 8:\n            return 8\n        if left == 9:\n            return 9\n        if left == 10:\n            return 10\n        if left == 11:\n            return 11\n        if left == 12:\n            return 12\n        if left == 13:\n            return 13\n        if left == 14:\n            return 14\n        if left == 15:\n            return 15\n        if left == 16:\n            return 16\n        if left == 17:\n            return 17\n        if left == 18:\n            return 18\n        if left == 19:\n            return 19\n        if left == 20:\n            return 20\n        if left == 21:\n            return 21\n        if left == 22:\n            return 22\n        if left == 23:\n            return"
    },
    {
        "number": 907,
        "title": "Sum of Subarray Minimums",
        "difficulty": 1,
        "prompt": "class Solution:\n    def sumSubarrayMins(self, arr: List[int]) -> int:\n        \"\"\"\n        Given an array of integers arr, find the sum of min(b), where b ranges over every (contiguous) subarray of arr. Since the answer may be large, return the answer modulo 109 + 7.\n        Example 1:\n        Input: arr = [3,1,2,4]\n        Output: 17\n        Explanation: \n        Subarrays are [3], [1], [2], [4], [3,1], [1,2], [2,4], [3,1,2], [1,2,4], [3,1,2,4]. \n        Minimums are 3, 1, 2, 4, 1, 1, 2, 1, 1, 1.\n        Sum is 17.\n        Example 2:\n        Input: arr = [11,81,94,43,3]\n        Output: 444\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        \n        # Time  complexity: O(N)\n        # Space complexity: O(N)\n        # def get_left_right(arr, i):\n        #     left, right = i, i\n        #     while left > 0 and arr[left - 1] >= arr[i]:\n        #         left -= 1\n        #     while right < len(arr) - 1 and arr[right + 1] >= arr[i]:\n        #         right += 1\n        #     return left, right\n        \n        # def get_subarray_sum(arr, left, right):\n        #     return sum(arr[left:right + 1])\n        \n        # MOD = 10 ** 9 + 7\n        # res = 0\n        # for i in range(len(arr)):\n        #     left, right = get_left_right(arr, i)\n        #     res = (res + get_subarray_sum(arr, left, right) * arr[i]) % MOD\n        # return res"
    },
    {
        "number": 908,
        "title": "Smallest Range I",
        "difficulty": 0,
        "prompt": "class Solution:\n    def smallestRangeI(self, nums: List[int], k: int) -> int:\n        \"\"\"\n        You are given an integer array nums and an integer k.\n        In one operation, you can choose any index i where 0 <= i < nums.length and change nums[i] to nums[i] + x where x is an integer from the range [-k, k]. You can apply this operation at most once for each index i.\n        The score of nums is the difference between the maximum and minimum elements in nums.\n        Return the minimum score of nums after applying the mentioned operation at most once for each index in it.\n        Example 1:\n        Input: nums = [1], k = 0\n        Output: 0\n        Explanation: The score is max(nums) - min(nums) = 1 - 1 = 0.\n        Example 2:\n        Input: nums = [0,10], k = 2\n        Output: 6\n        Explanation: Change nums to be [2, 8]. The score is max(nums) - min(nums) = 8 - 2 = 6.\n        Example 3:\n        Input: nums = [1,3,6], k = 3\n        Output: 0\n        Explanation: Change nums to be [4, 4, 4]. The score is max(nums) - min(nums) = 4 - 4 = 0.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        # O(NlogN)\n        nums.sort()\n        return max(0, nums[-1] - nums[0] - 2 * k)"
    },
    {
        "number": 909,
        "title": "Snakes and Ladders",
        "difficulty": 1,
        "prompt": "class Solution:\n    def snakesAndLadders(self, board: List[List[int]]) -> int:\n        \"\"\"\n        You are given an n x n integer matrix board where the cells are labeled from 1 to n2 in a Boustrophedon style starting from the bottom left of the board (i.e. board[n - 1][0]) and alternating direction each row.\n        You start on square 1 of the board. In each move, starting from square curr, do the following:\n            Choose a destination square next with a label in the range [curr + 1, min(curr + 6, n2)].\n                This choice simulates the result of a standard 6-sided die roll: i.e., there are always at most 6 destinations, regardless of the size of the board.\n            If next has a snake or ladder, you must move to the destination of that snake or ladder. Otherwise, you move to next.\n            The game ends when you reach the square n2.\n        A board square on row r and column c has a snake or ladder if board[r][c]!= -1. The destination of that snake or ladder is board[r][c]. Squares 1 and n2 do not have a snake or ladder.\n        Note that you only take a snake or ladder at most once per move. If the destination to a snake or ladder is the start of another snake or ladder, you do not follow the subsequent snake or ladder.\n            For example, suppose the board is [[-1,4],[-1,3]], and on the first move, your destination square is 2. You follow the ladder to square 3, but do not follow the subsequent ladder to 4.\n        Return the least number of moves required to reach the square n2. If it is not possible to reach the square, return -1.\n        Example 1:\n        Input: board = [[-1,-1,-1,-1,-1,-1],[-1,-1,-1,-1,-1,-1],[-1,-1,-1,-1,-1,-1],[-1,35,-1,-1,13,-1],[-1,-1,-1,-1,-1,-1],[-1,15,-1,-1,-1,-1]]\n        Output: 4\n        Explanation: \n        In the beginning, you start at square 1 (at row 5, column 0).\n        You decide to move to square 2 and must take the ladder to square 15.\n        You then decide to move to square 17 and must take the snake to square 13.\n        You then decide to move to square 14 and must take the ladder to square 35.\n        You then decide to move to square 36, ending the game.\n        This is the lowest possible number of moves to reach the last square, so return 4.\n        Example 2:\n        Input: board = [[-1,-1],[-1,3]]\n        Output: 1\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        n = len(board)\n        if n == 1:\n            return 0\n        if n == 2:\n            return 1\n        \n        # dp[i] = min moves to reach square i\n        dp = [float('inf')] * (n * n + 1)\n        dp[n * n] = 0\n        \n        # dp[i] = min moves to reach square i\n        # dp[i] = min moves to reach square i\n        # dp[i] = min moves to reach square i\n        # dp[i] = min moves to reach square i\n        # dp[i] = min moves to reach square i\n        # dp[i] = min moves to reach square i\n        # dp[i] = min moves to reach square i\n        # dp[i] = min moves to reach square i\n        # dp[i] = min moves to reach square i\n        # dp[i] = min moves to reach square i\n        # dp[i] = min moves to reach square i\n        # dp[i] = min moves to reach square i\n        # dp[i] = min moves to reach square i\n        # dp[i] = min moves to reach square i\n        # dp[i] = min moves to reach square"
    },
    {
        "number": 910,
        "title": "Smallest Range II",
        "difficulty": 1,
        "prompt": "class Solution:\n    def smallestRangeII(self, nums: List[int], k: int) -> int:\n        \"\"\"\n        You are given an integer array nums and an integer k.\n        For each index i where 0 <= i < nums.length, change nums[i] to be either nums[i] + k or nums[i] - k.\n        The score of nums is the difference between the maximum and minimum elements in nums.\n        Return the minimum score of nums after changing the values at each index.\n        Example 1:\n        Input: nums = [1], k = 0\n        Output: 0\n        Explanation: The score is max(nums) - min(nums) = 1 - 1 = 0.\n        Example 2:\n        Input: nums = [0,10], k = 2\n        Output: 6\n        Explanation: Change nums to be [2, 8]. The score is max(nums) - min(nums) = 8 - 2 = 6.\n        Example 3:\n        Input: nums = [1,3,6], k = 3\n        Output: 3\n        Explanation: Change nums to be [4, 6, 3]. The score is max(nums) - min(nums) = 6 - 3 = 3.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        # \u5148\u6392\u5e8f\uff0c\u7136\u540e\u6c42\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c\n        nums.sort()\n        max_num = nums[-1]\n        min_num = nums[0]\n        res = max_num - min_num\n        for i in range(len(nums) - 1):\n            if nums[i + 1] - nums[i] > k:\n                res = min(res, nums[i + 1] - nums[i] - k)\n        return res"
    },
    {
        "number": 911,
        "title": "Online Election",
        "difficulty": 1,
        "prompt": "class TopVotedCandidate:\n    def __init__(self, persons: List[int], times: List[int]):\n    def q(self, t: int) -> int:\n        \"\"\"\n        You are given two integer arrays persons and times. In an election, the ith vote was cast for persons[i] at time times[i].\n        For each query at a time t, find the person that was leading the election at time t. Votes cast at time t will count towards our query. In the case of a tie, the most recent vote (among tied candidates) wins.\n        Implement the TopVotedCandidate class:\n            TopVotedCandidate(int[] persons, int[] times) Initializes the object with the persons and times arrays.\n            int q(int t) Returns the number of the person that was leading the election at time t according to the mentioned rules.\n        Example 1:\n        Input\n        [\"TopVotedCandidate\", \"q\", \"q\", \"q\", \"q\", \"q\", \"q\"]\n        [[[0, 1, 1, 0, 0, 1, 0], [0, 5, 10, 15, 20, 25, 30]], [3], [12], [25], [15], [24], [8]]\n        Output\n        [null, 0, 1, 1, 0, 0, 1]\n        Explanation\n        TopVotedCandidate topVotedCandidate = new TopVotedCandidate([0, 1, 1, 0, 0, 1, 0], [0, 5, 10, 15, 20, 25, 30]);\n        topVotedCandidate.q(3); // return 0, At time 3, the votes are [0], and 0 is leading.\n        topVotedCandidate.q(12); // return 1, At time 12, the votes are [0,1,1], and 1 is leading.\n        topVotedCandidate.q(25); // return 1, At time 25, the votes are [0,1,1,0,0,1], and 1 is leading (as ties go to the most recent vote.)\n        topVotedCandidate.q(15); // return 0\n        topVotedCandidate.q(24); // return 0\n        topVotedCandidate.q(8); // return 1\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        \n        \"\"\"\n        Given a list of unique numbers, return the top 3 numbers that occur the most.\n        Example:\n        Input: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n        Output: [1, 2, 3]\n        Explanation:\n        1, 2, 3 are the top 3 numbers, so return them in an array.\n        \"\"\"\n        \n        \"\"\"\n        Given a string, return the character that is most commonly used in the string.\n        Example:\n        Input: \"abcdefg\"\n        Output: \"b\"\n        Explanation:\n        \"b\" appears 3 times while the other characters appear only once.\n        \"\"\"\n        \n        \"\"\"\n        Given a string, return the character that is most commonly used in the string.\n        If there is a tie, return the character that appears earliest in the string.\n        Example:\n        Input: \"abracadabra\"\n        Output: \"a\"\n        Explanation:\n        \"a\" appears 5 times while \"r\" appears 3 times. \"a\" appears earlier in the string.\n        \"\"\"\n        \n        \"\"\"\n        Given a string, return the character that is most commonly used in the string.\n        If there is a tie, return the character that appears earliest in the string.\n        "
    },
    {
        "number": 912,
        "title": "Sort an Array",
        "difficulty": 1,
        "prompt": "class Solution:\n    def sortArray(self, nums: List[int]) -> List[int]:\n        \"\"\"\n        Given an array of integers nums, sort the array in ascending order and return it.\n        You must solve the problem without using any built-in functions in O(nlog(n)) time complexity and with the smallest space complexity possible.\n        Example 1:\n        Input: nums = [5,2,3,1]\n        Output: [1,2,3,5]\n        Explanation: After sorting the array, the positions of some numbers are not changed (for example, 2 and 3), while the positions of other numbers are changed (for example, 1 and 5).\n        Example 2:\n        Input: nums = [5,1,1,2,0,0]\n        Output: [0,0,1,1,2,5]\n        Explanation: Note that the values of nums are not necessairly unique.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        # \u5f52\u5e76\u6392\u5e8f\n        # \u5f52\u5e76\u6392\u5e8f\u7684\u601d\u8def\u662f\uff0c\u5c06\u6570\u7ec4\u5206\u6210\u4e24\u4e2a\u6570\u7ec4\uff0c\u7136\u540e\u5bf9\u4e24\u4e2a\u6570\u7ec4\u8fdb\u884c\u5f52\u5e76\u6392\u5e8f\uff0c\u6700\u540e\u518d\u5408\u5e76\u4e24\u4e2a\u6392\u5e8f\u597d\u7684\u6570\u7ec4\n        # \u5f52\u5e76\u6392\u5e8f\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3aO(nlogn)\n        # \u5f52\u5e76\u6392\u5e8f\u7684\u7a7a\u95f4\u590d\u6742\u5ea6\u4e3aO(n)\n        # \u5f52\u5e76\u6392\u5e8f\u7684\u7b97\u6cd5\u601d\u8def\uff1a\n        # 1. \u5148\u5c06\u6570\u7ec4\u5206\u6210\u4e24\u4e2a\u6570\u7ec4\uff0c\u5206\u522b\u6392\u5e8f\uff0c\u7136\u540e\u5408\u5e76\u4e24\u4e2a\u6392\u5e8f\u597d\u7684\u6570\u7ec4\n        # 2. \u5c06\u6570\u7ec4\u5206\u6210\u4e24\u4e2a\u6570\u7ec4\uff0c\u5206\u522b\ufffd"
    },
    {
        "number": 913,
        "title": "Cat and Mouse",
        "difficulty": 2,
        "prompt": "class Solution:\n    def catMouseGame(self, graph: List[List[int]]) -> int:\n        \"\"\"\n        A game on an undirected graph is played by two players, Mouse and Cat, who alternate turns.\n        The graph is given as follows: graph[a] is a list of all nodes b such that ab is an edge of the graph.\n        The mouse starts at node 1 and goes first, the cat starts at node 2 and goes second, and there is a hole at node 0.\n        During each player's turn, they must travel along one edge of the graph that meets where they are.  For example, if the Mouse is at node 1, it must travel to any node in graph[1].\n        Additionally, it is not allowed for the Cat to travel to the Hole (node 0.)\n        Then, the game can end in three ways:\n            If ever the Cat occupies the same node as the Mouse, the Cat wins.\n            If ever the Mouse reaches the Hole, the Mouse wins.\n            If ever a position is repeated (i.e., the players are in the same position as a previous turn, and it is the same player's turn to move), the game is a draw.\n        Given a graph, and assuming both players play optimally, return\n            1 if the mouse wins the game,\n            2 if the cat wins the game, or\n            0 if the game is a draw.\n        Example 1:\n        Input: graph = [[2,5],[3],[0,4,5],[1,4,5],[2,3],[0,2,3]]\n        Output: 0\n        Example 2:\n        Input: graph = [[1,3],[0],[3],[0,2]]\n        Output: 1\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        # Time: O(V^2)\n        # Space: O(V)\n        # dfs\n        # if graph[mouse_pos][cat_pos] == 2:\n        #     return 2\n        # elif graph[mouse_pos][cat_pos] == 0:\n        #     return 0\n        # else:\n        #     return 1\n        #\n        # dp\n        # if graph[mouse_pos][cat_pos] == 2:\n        #     return 2\n        # elif graph[mouse_pos][cat_pos] == 0:\n        #     return 0\n        # else:\n        #     return 1\n        #\n        # bfs\n        # if graph[mouse_pos][cat_pos] == 2:\n        #     return 2\n        # elif graph[mouse_pos][cat_pos] == 0:\n        #     return 0\n        # else:\n        #     return 1\n        #\n        # bfs\n        # if graph[mouse_pos][cat_pos] == 2:\n        #     return 2\n        # elif graph[mouse_pos][cat_pos] == 0:\n        #     return 0\n        # else:\n        #     return 1\n        #\n        # dfs\n        # if graph[mouse_pos][cat_"
    },
    {
        "number": 914,
        "title": "X of a Kind in a Deck of Cards",
        "difficulty": 0,
        "prompt": "class Solution:\n    def hasGroupsSizeX(self, deck: List[int]) -> bool:\n        \"\"\"\n        You are given an integer array deck where deck[i] represents the number written on the ith card.\n        Partition the cards into one or more groups such that:\n            Each group has exactly x cards where x > 1, and\n            All the cards in one group have the same integer written on them.\n        Return true if such partition is possible, or false otherwise.\n        Example 1:\n        Input: deck = [1,2,3,4,4,3,2,1]\n        Output: true\n        Explanation: Possible partition [1,1],[2,2],[3,3],[4,4].\n        Example 2:\n        Input: deck = [1,1,1,2,2,2,3,3]\n        Output: false\n        Explanation: No possible partition.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        from collections import Counter\n        from functools import reduce\n        c = Counter(deck)\n        return reduce(lambda x, y: x * y, c.values()) > len(c) and len(c) > 1"
    },
    {
        "number": 915,
        "title": "Partition Array into Disjoint Intervals",
        "difficulty": 1,
        "prompt": "class Solution:\n    def partitionDisjoint(self, nums: List[int]) -> int:\n        \"\"\"\n        Given an integer array nums, partition it into two (contiguous) subarrays left and right so that:\n            Every element in left is less than or equal to every element in right.\n            left and right are non-empty.\n            left has the smallest possible size.\n        Return the length of left after such a partitioning.\n        Test cases are generated such that partitioning exists.\n        Example 1:\n        Input: nums = [5,0,3,8,6]\n        Output: 3\n        Explanation: left = [5,0,3], right = [8,6]\n        Example 2:\n        Input: nums = [1,1,1,0,6,12]\n        Output: 4\n        Explanation: left = [1,1,1,0], right = [6,12]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        # Time: O(n), space: O(1)\n        # The idea is to find the maximum number in the array.\n        # Then, we can iterate through the array and find the minimum number in the array\n        # that is greater than the maximum number.\n        # We can then iterate through the array again and find the first number that is\n        # greater than the minimum number.\n        # If we can find such a number, then we can partition the array into two subarrays\n        # where the maximum number is in the left subarray and the minimum number is in the right subarray.\n        # If we cannot find such a number, then we can partition the array into two subarrays\n        # where the maximum number is in the left subarray and the minimum number is in the right subarray.\n        # We can then find the length of the left subarray and return it.\n        # If we cannot find such a number, then we can partition the array into two subarrays\n        # where the maximum number is in the left subarray and the minimum number is in the right subarray.\n        # We can then find the length of the left subarray and return it.\n        # If we cannot find such a number, then we can partition the array into two subarrays\n        # where the maximum number is in the left subarray and the minimum"
    },
    {
        "number": 916,
        "title": "Word Subsets",
        "difficulty": 1,
        "prompt": "class Solution:\n    def wordSubsets(self, words1: List[str], words2: List[str]) -> List[str]:\n        \"\"\"\n        You are given two string arrays words1 and words2.\n        A string b is a subset of string a if every letter in b occurs in a including multiplicity.\n            For example, \"wrr\" is a subset of \"warrior\" but is not a subset of \"world\".\n        A string a from words1 is universal if for every string b in words2, b is a subset of a.\n        Return an array of all the universal strings in words1. You may return the answer in any order.\n        Example 1:\n        Input: words1 = [\"amazon\",\"apple\",\"facebook\",\"google\",\"leetcode\"], words2 = [\"e\",\"o\"]\n        Output: [\"facebook\",\"google\",\"leetcode\"]\n        Example 2:\n        Input: words1 = [\"amazon\",\"apple\",\"facebook\",\"google\",\"leetcode\"], words2 = [\"l\",\"e\"]\n        Output: [\"apple\",\"google\",\"leetcode\"]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        # 1. Count the frequency of each character in words1\n        # 2. For each character in words2, if the frequency is less than the frequency of the character in words1, return False\n        # 3. Return all the words that are universal\n        # 4. Time complexity: O(n)\n        # 5. Space complexity: O(n)\n        from collections import Counter\n        counter_1 = Counter()\n        for word in words1:\n            counter_1.update(word)\n        counter_2 = Counter()\n        for word in words2:\n            counter_2.update(word)\n        res = []\n        for word in words1:\n            for c in word:\n                if counter_2[c] < counter_1[c]:\n                    break\n            else:\n                res.append(word)\n        return res"
    },
    {
        "number": 917,
        "title": "Reverse Only Letters",
        "difficulty": 0,
        "prompt": "class Solution:\n    def reverseOnlyLetters(self, s: str) -> str:\n        \"\"\"\n        Given a string s, reverse the string according to the following rules:\n            All the characters that are not English letters remain in the same position.\n            All the English letters (lowercase or uppercase) should be reversed.\n        Return s after reversing it.\n        Example 1:\n        Input: s = \"ab-cd\"\n        Output: \"dc-ba\"\n        Example 2:\n        Input: s = \"a-bC-dEf-ghIj\"\n        Output: \"j-Ih-gfE-dCba\"\n        Example 3:\n        Input: s = \"Test1ng-Leet=code-Q!\"\n        Output: \"Qedo1ct-eeLg=ntse-T!\"\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        s = list(s)\n        l, r = 0, len(s) - 1\n        while l < r:\n            while l < r and not s[l].isalpha():\n                l += 1\n            while l < r and not s[r].isalpha():\n                r -= 1\n            s[l], s[r] = s[r], s[l]\n            l += 1\n            r -= 1\n        return ''.join(s)"
    },
    {
        "number": 918,
        "title": "Maximum Sum Circular Subarray",
        "difficulty": 1,
        "prompt": "class Solution:\n    def maxSubarraySumCircular(self, nums: List[int]) -> int:\n        \"\"\"\n        Given a circular integer array nums of length n, return the maximum possible sum of a non-empty subarray of nums.\n        A circular array means the end of the array connects to the beginning of the array. Formally, the next element of nums[i] is nums[(i + 1) % n] and the previous element of nums[i] is nums[(i - 1 + n) % n].\n        A subarray may only include each element of the fixed buffer nums at most once. Formally, for a subarray nums[i], nums[i + 1],..., nums[j], there does not exist i <= k1, k2 <= j with k1 % n == k2 % n.\n        Example 1:\n        Input: nums = [1,-2,3,-2]\n        Output: 3\n        Explanation: Subarray [3] has maximum sum 3.\n        Example 2:\n        Input: nums = [5,-3,5]\n        Output: 10\n        Explanation: Subarray [5,5] has maximum sum 5 + 5 = 10.\n        Example 3:\n        Input: nums = [-3,-2,-3]\n        Output: -2\n        Explanation: Subarray [-2] has maximum sum -2.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        \n        # O(n)\n        # O(1)\n        # \u5206\u522b\u8ba1\u7b97\u524d\u540e\u7d2f\u52a0\u548c\uff0c\u6700\u5927\u503c\u4e3a\u524d\u540e\u7d2f\u52a0\u548c\u7684\u6700\u5927\u503c\n        # \u5982\u679c\u524d\u540e\u7d2f\u52a0\u548c\u76f8\u7b49\uff0c\u5219\u8fd4\u56de\u524d\u540e\u7d2f\u52a0\u548c\u6700\u5927\u503c\n        # \u5982\u679c\u524d\u540e\u7d2f\u52a0\u548c\u4e0d\u76f8\u7b49\uff0c\u5219\u8fd4\u56de\u524d\u540e\u7d2f\u52a0\u548c\u6700\u5927\u503c\n        \n        # \u524d\u540e\u7d2f\u52a0\u548c\n        # \u524d\u540e\u7d2f\u52a0\u548c\u6700\u5927\u503c\n        # \u524d\u540e\u7d2f\u52a0\u548c\u76f8\u7b49\n        \n        # \u524d\u540e\u7d2f\u52a0\u548c\u6700\u5927\u503c\n        # \u524d\u540e\u7d2f\u52a0\u548c\u6700\u5927\u503c\n        # \u524d\u540e\u7d2f\u52a0\ufffd"
    },
    {
        "number": 919,
        "title": "Complete Binary Tree Inserter",
        "difficulty": 1,
        "prompt": "class CBTInserter:\n    def __init__(self, root: Optional[TreeNode]):\n    def insert(self, val: int) -> int:\n    def get_root(self) -> Optional[TreeNode]:\n        \"\"\"\n        A complete binary tree is a binary tree in which every level, except possibly the last, is completely filled, and all nodes are as far left as possible.\n        Design an algorithm to insert a new node to a complete binary tree keeping it complete after the insertion.\n        Implement the CBTInserter class:\n            CBTInserter(TreeNode root) Initializes the data structure with the root of the complete binary tree.\n            int insert(int v) Inserts a TreeNode into the tree with value Node.val == val so that the tree remains complete, and returns the value of the parent of the inserted TreeNode.\n            TreeNode get_root() Returns the root node of the tree.\n        Example 1:\n        Input\n        [\"CBTInserter\", \"insert\", \"insert\", \"get_root\"]\n        [[[1, 2]], [3], [4], []]\n        Output\n        [null, 1, 2, [1, 2, 3, 4]]\n        Explanation\n        CBTInserter cBTInserter = new CBTInserter([1, 2]);\n        cBTInserter.insert(3);  // return 1\n        cBTInserter.insert(4);  // return 2\n        cBTInserter.get_root(); // return [1, 2, 3, 4]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        self.root = root\n        self.q = deque()\n        self.q.append(root)\n        while self.q:\n            node = self.q.popleft()\n            if node.left:\n                self.q.append(node.left)\n            if node.right:\n                self.q.append(node.right)\n        return self.q[0]"
    },
    {
        "number": 920,
        "title": "Number of Music Playlists",
        "difficulty": 2,
        "prompt": "class Solution:\n    def numMusicPlaylists(self, n: int, goal: int, k: int) -> int:\n        \"\"\"\n        Your music player contains n different songs. You want to listen to goal songs (not necessarily different) during your trip. To avoid boredom, you will create a playlist so that:\n            Every song is played at least once.\n            A song can only be played again only if k other songs have been played.\n        Given n, goal, and k, return the number of possible playlists that you can create. Since the answer can be very large, return it modulo 109 + 7.\n        Example 1:\n        Input: n = 3, goal = 3, k = 1\n        Output: 6\n        Explanation: There are 6 possible playlists: [1, 2, 3], [1, 3, 2], [2, 1, 3], [2, 3, 1], [3, 1, 2], and [3, 2, 1].\n        Example 2:\n        Input: n = 2, goal = 3, k = 0\n        Output: 6\n        Explanation: There are 6 possible playlists: [1, 1, 2], [1, 2, 1], [2, 1, 1], [2, 2, 1], [2, 1, 2], and [1, 2, 2].\n        Example 3:\n        Input: n = 2, goal = 3, k = 1\n        Output: 2\n        Explanation: There are 2 possible playlists: [1, 2, 1] and [2, 1, 2].\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        mod = 10 ** 9 + 7\n        dp = [[0] * (goal + 1) for _ in range(k + 1)]\n        dp[0][0] = 1\n        for i in range(1, k + 1):\n            for j in range(goal + 1):\n                dp[i][j] = dp[i - 1][j]\n                if j - i >= 0:\n                    dp[i][j] += dp[i][j - i]\n                dp[i][j] %= mod\n        return dp[k][goal]"
    },
    {
        "number": 921,
        "title": "Minimum Add to Make Parentheses Valid",
        "difficulty": 1,
        "prompt": "class Solution:\n    def minAddToMakeValid(self, s: str) -> int:\n        \"\"\"\n        A parentheses string is valid if and only if:\n            It is the empty string,\n            It can be written as AB (A concatenated with B), where A and B are valid strings, or\n            It can be written as (A), where A is a valid string.\n        You are given a parentheses string s. In one move, you can insert a parenthesis at any position of the string.\n            For example, if s = \"()))\", you can insert an opening parenthesis to be \"(()))\" or a closing parenthesis to be \"())))\".\n        Return the minimum number of moves required to make s valid.\n        Example 1:\n        Input: s = \"())\"\n        Output: 1\n        Example 2:\n        Input: s = \"(((\"\n        Output: 3\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        stack = []\n        for c in s:\n            if c == '(':\n                stack.append(c)\n            else:\n                if stack and stack[-1] == '(':\n                    stack.pop()\n                else:\n                    stack.append(c)\n        return len(stack)"
    },
    {
        "number": 922,
        "title": "Sort Array By Parity II",
        "difficulty": 0,
        "prompt": "class Solution:\n    def sortArrayByParityII(self, nums: List[int]) -> List[int]:\n        \"\"\"\n        Given an array of integers nums, half of the integers in nums are odd, and the other half are even.\n        Sort the array so that whenever nums[i] is odd, i is odd, and whenever nums[i] is even, i is even.\n        Return any answer array that satisfies this condition.\n        Example 1:\n        Input: nums = [4,2,5,7]\n        Output: [4,5,2,7]\n        Explanation: [4,7,2,5], [2,5,4,7], [2,7,4,5] would also have been accepted.\n        Example 2:\n        Input: nums = [2,3]\n        Output: [2,3]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        # Time complexity: O(n)\n        # Space complexity: O(1)\n        i, j = 0, 1\n        while i < len(nums) and j < len(nums):\n            if nums[i] % 2 == 0:\n                i += 2\n            elif nums[j] % 2 == 1:\n                j += 2\n            else:\n                nums[i], nums[j] = nums[j], nums[i]\n                i += 2\n                j += 2\n        return nums"
    },
    {
        "number": 923,
        "title": "3Sum With Multiplicity",
        "difficulty": 1,
        "prompt": "class Solution:\n    def threeSumMulti(self, arr: List[int], target: int) -> int:\n        \"\"\"\n        Given an integer array arr, and an integer target, return the number of tuples i, j, k such that i < j < k and arr[i] + arr[j] + arr[k] == target.\n        As the answer can be very large, return it modulo 109 + 7.\n        Example 1:\n        Input: arr = [1,1,2,2,3,3,4,4,5,5], target = 8\n        Output: 20\n        Explanation: \n        Enumerating by the values (arr[i], arr[j], arr[k]):\n        (1, 2, 5) occurs 8 times;\n        (1, 3, 4) occurs 8 times;\n        (2, 2, 4) occurs 2 times;\n        (2, 3, 3) occurs 2 times.\n        Example 2:\n        Input: arr = [1,1,2,2,2,2], target = 5\n        Output: 12\n        Explanation: \n        arr[i] = 1, arr[j] = arr[k] = 2 occurs 12 times:\n        We choose one 1 from [1,1] in 2 ways,\n        and two 2s from [2,2,2,2] in 6 ways.\n        Example 3:\n        Input: arr = [2,1,3], target = 6\n        Output: 1\n        Explanation: (1, 2, 3) occured one time in the array so we return 1.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        # Time: O(n^2), Space: O(n)\n        # d = {}\n        # for i in arr:\n        #     d[i] = d.get(i, 0) + 1\n        # ans = 0\n        # for i in d:\n        #     for j in d:\n        #         if i + j in d:\n        #             ans += d[i] * d[j] * d[i + j]\n        # return ans % (10**9 + 7)"
    },
    {
        "number": 924,
        "title": "Minimize Malware Spread",
        "difficulty": 2,
        "prompt": "class Solution:\n    def minMalwareSpread(self, graph: List[List[int]], initial: List[int]) -> int:\n        \"\"\"\n        You are given a network of n nodes represented as an n x n adjacency matrix graph, where the ith node is directly connected to the jth node if graph[i][j] == 1.\n        Some nodes initial are initially infected by malware. Whenever two nodes are directly connected, and at least one of those two nodes is infected by malware, both nodes will be infected by malware. This spread of malware will continue until no more nodes can be infected in this manner.\n        Suppose M(initial) is the final number of nodes infected with malware in the entire network after the spread of malware stops. We will remove exactly one node from initial.\n        Return the node that, if removed, would minimize M(initial). If multiple nodes could be removed to minimize M(initial), return such a node with the smallest index.\n        Note that if a node was removed from the initial list of infected nodes, it might still be infected later due to the malware spread.\n        Example 1:\n        Input: graph = [[1,1,0],[1,1,0],[0,0,1]], initial = [0,1]\n        Output: 0\n        Example 2:\n        Input: graph = [[1,0,0],[0,1,0],[0,0,1]], initial = [0,2]\n        Output: 0\n        Example 3:\n        Input: graph = [[1,1,1],[1,1,1],[1,1,1]], initial = [1,2]\n        Output: 1\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        # DFS\n        # Time O(V+E)\n        # Space O(V+E)\n        # def dfs(node):\n        #     if visited[node]:\n        #         return\n        #     visited[node] = True\n        #     for neighbor in graph[node]:\n        #         dfs(neighbor)\n        #\n        # initial_count = collections.Counter(initial)\n        # initial_set = set(initial)\n        # visited = [False] * len(graph)\n        # res = float('inf')\n        # for node in initial:\n        #     if not visited[node]:\n        #         dfs(node)\n        #         if len(initial_set) == 1:\n        #             res = min(res, node)\n        #         elif len(initial_set) == 0:\n        #             return node\n        #         else:\n        #             initial_set.remove(node)\n        # return res"
    },
    {
        "number": 925,
        "title": "Long Pressed Name",
        "difficulty": 0,
        "prompt": "class Solution:\n    def isLongPressedName(self, name: str, typed: str) -> bool:\n        \"\"\"\n        Your friend is typing his name into a keyboard. Sometimes, when typing a character c, the key might get long pressed, and the character will be typed 1 or more times.\n        You examine the typed characters of the keyboard. Return True if it is possible that it was your friends name, with some characters (possibly none) being long pressed.\n        Example 1:\n        Input: name = \"alex\", typed = \"aaleex\"\n        Output: true\n        Explanation: 'a' and 'e' in 'alex' were long pressed.\n        Example 2:\n        Input: name = \"saeed\", typed = \"ssaaedd\"\n        Output: false\n        Explanation: 'e' must have been pressed twice, but it was not in the typed output.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        i, j = 0, 0\n        while i < len(name) and j < len(typed):\n            if name[i] == typed[j]:\n                i += 1\n                j += 1\n            elif j == 0 or typed[j]!= typed[j - 1]:\n                return False\n            else:\n                j += 1\n        return i == len(name)"
    },
    {
        "number": 926,
        "title": "Flip String to Monotone Increasing",
        "difficulty": 1,
        "prompt": "class Solution:\n    def minFlipsMonoIncr(self, s: str) -> int:\n        \"\"\"\n        A binary string is monotone increasing if it consists of some number of 0's (possibly none), followed by some number of 1's (also possibly none).\n        You are given a binary string s. You can flip s[i] changing it from 0 to 1 or from 1 to 0.\n        Return the minimum number of flips to make s monotone increasing.\n        Example 1:\n        Input: s = \"00110\"\n        Output: 1\n        Explanation: We flip the last digit to get 00111.\n        Example 2:\n        Input: s = \"010110\"\n        Output: 2\n        Explanation: We flip to get 011111, or alternatively 000111.\n        Example 3:\n        Input: s = \"00011000\"\n        Output: 2\n        Explanation: We flip to get 00000000.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        # \u53ea\u6709\u4e00\u79cd\u60c5\u51b5\uff0c\u5c31\u662f\u6700\u540e\u4e00\u4e2a\u662f0\uff0c\u90a3\u4e48\u5c31\u53ea\u9700\u8981\u628a\u6700\u540e\u4e00\u4e2a0\u53d8\u62101\u5c31\u53ef\u4ee5\u4e86\n        # \u5982\u679c\u6700\u540e\u4e00\u4e2a\u662f1\uff0c\u90a3\u4e48\u5c31\u9700\u8981\u628a\u6700\u540e\u4e00\u4e2a1\u53d8\u62100\uff0c\u7136\u540e\u518d\u628a\u6700\u540e\u4e00\u4e2a0\u53d8\u62101\u5c31\u53ef\u4ee5\u4e86\n        # \u6240\u4ee5\u53ea\u8981\u627e\u5230\u6700\u540e\u4e00\u4e2a0\u548c\u6700\u540e\u4e00\u4e2a1\u7684\u4f4d\u7f6e\uff0c\u7136\u540e\u628a\u8fd9\u4e24\u4e2a\u4f4d\u7f6e\u4e4b\u95f4\u76840\u53d8\u62101\uff0c\u7136\u540e\u628a\u8fd9\u4e24\u4e2a\u4f4d\u7f6e\u4e4b\u95f4\u76841\u53d8\u62100\u5c31\u53ef\u4ee5\u4e86\n        # \u6240\u4ee5\u53ea\u8981\u627e\u5230\u6700\u540e\u4e00\u4e2a0\u548c\u6700\u540e\u4e00\u4e2a1\u7684"
    },
    {
        "number": 927,
        "title": "Three Equal Parts",
        "difficulty": 2,
        "prompt": "class Solution:\n    def threeEqualParts(self, arr: List[int]) -> List[int]:\n        \"\"\"\n        You are given an array arr which consists of only zeros and ones, divide the array into three non-empty parts such that all of these parts represent the same binary value.\n        If it is possible, return any [i, j] with i + 1 < j, such that:\n            arr[0], arr[1],..., arr[i] is the first part,\n            arr[i + 1], arr[i + 2],..., arr[j - 1] is the second part, and\n            arr[j], arr[j + 1],..., arr[arr.length - 1] is the third part.\n            All three parts have equal binary values.\n        If it is not possible, return [-1, -1].\n        Note that the entire part is used when considering what binary value it represents. For example, [1,1,0] represents 6 in decimal, not 3. Also, leading zeros are allowed, so [0,1,1] and [1,1] represent the same value.\n        Example 1:\n        Input: arr = [1,0,1,0,1]\n        Output: [0,3]\n        Example 2:\n        Input: arr = [1,1,0,1,1]\n        Output: [-1,-1]\n        Example 3:\n        Input: arr = [1,1,0,0,1]\n        Output: [0,2]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        # Time complexity: O(n)\n        # Space complexity: O(1)\n        n = len(arr)\n        if n < 3:\n            return [-1, -1]\n        ones = sum(arr)\n        if ones % 3!= 0:\n            return [-1, -1]\n        ones //= 3\n        if ones == 0:\n            return [0, n - 1]\n        for i in range(n - 1):\n            if arr[i] == 0:\n                if arr[i + 1] == 1:\n                    ones -= 1\n            if ones == 0:\n                return [i + 1, n - 1]\n        return [-1, -1]"
    },
    {
        "number": 928,
        "title": "Minimize Malware Spread II",
        "difficulty": 2,
        "prompt": "class Solution:\n    def minMalwareSpread(self, graph: List[List[int]], initial: List[int]) -> int:\n        \"\"\"\n        You are given a network of n nodes represented as an n x n adjacency matrix graph, where the ith node is directly connected to the jth node if graph[i][j] == 1.\n        Some nodes initial are initially infected by malware. Whenever two nodes are directly connected, and at least one of those two nodes is infected by malware, both nodes will be infected by malware. This spread of malware will continue until no more nodes can be infected in this manner.\n        Suppose M(initial) is the final number of nodes infected with malware in the entire network after the spread of malware stops.\n        We will remove exactly one node from initial, completely removing it and any connections from this node to any other node.\n        Return the node that, if removed, would minimize M(initial). If multiple nodes could be removed to minimize M(initial), return such a node with the smallest index.\n        Example 1:\n        Input: graph = [[1,1,0],[1,1,0],[0,0,1]], initial = [0,1]\n        Output: 0\n        Example 2:\n        Input: graph = [[1,1,0],[1,1,1],[0,1,1]], initial = [0,1]\n        Output: 1\n        Example 3:\n        Input: graph = [[1,1,0,0],[1,1,1,0],[0,1,1,1],[0,0,1,1]], initial = [0,1]\n        Output: 1\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        # BFS\n        # Time: O(N), N is the number of nodes\n        # Space: O(N), N is the number of nodes\n        # Initialize the graph\n        n = len(graph)\n        # Initialize the visited array\n        visited = [False] * n\n        # Initialize the queue\n        queue = collections.deque()\n        # Initialize the count of infected nodes\n        count = 0\n        # Initialize the infected nodes\n        infected = set()\n        # Initialize the infected nodes\n        for i in initial:\n            # Add the infected node to the infected set\n            infected.add(i)\n            # Increment the count of infected nodes\n            count += 1\n            # Add the infected node to the queue\n            queue.append(i)\n            # Mark the infected node as visited\n            visited[i] = True\n        # Initialize the infected nodes\n        infected_nodes = set()\n        # Initialize the infected nodes\n        for i in initial:\n            # Add the infected node to the infected set\n            infected_nodes.add(i)\n        # While the queue is not empty\n        while queue:\n            # Pop the first node from the queue\n            node = queue.popleft()\n            # Get the neighbors of the node\n            "
    },
    {
        "number": 929,
        "title": "Unique Email Addresses",
        "difficulty": 0,
        "prompt": "class Solution:\n    def numUniqueEmails(self, emails: List[str]) -> int:\n        \"\"\"\n        Every valid email consists of a local name and a domain name, separated by the '@' sign. Besides lowercase letters, the email may contain one or more '.' or '+'.\n            For example, in \"alice@leetcode.com\", \"alice\" is the local name, and \"leetcode.com\" is the domain name.\n        If you add periods '.' between some characters in the local name part of an email address, mail sent there will be forwarded to the same address without dots in the local name. Note that this rule does not apply to domain names.\n            For example, \"alice.z@leetcode.com\" and \"alicez@leetcode.com\" forward to the same email address.\n        If you add a plus '+' in the local name, everything after the first plus sign will be ignored. This allows certain emails to be filtered. Note that this rule does not apply to domain names.\n            For example, \"m.y+name@email.com\" will be forwarded to \"my@email.com\".\n        It is possible to use both of these rules at the same time.\n        Given an array of strings emails where we send one email to each emails[i], return the number of different addresses that actually receive mails.\n        Example 1:\n        Input: emails = [\"test.email+alex@leetcode.com\",\"test.e.mail+bob.cathy@leetcode.com\",\"testemail+david@lee.tcode.com\"]\n        Output: 2\n        Explanation: \"testemail@leetcode.com\" and \"testemail@lee.tcode.com\" actually receive mails.\n        Example 2:\n        Input: emails = [\"a@leetcode.com\",\"b@leetcode.com\",\"c@leetcode.com\"]\n        Output: 3\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        # Solution 1:\n        # Time complexity: O(n)\n        # Space complexity: O(n)\n        # emails = set()\n        # for email in emails:\n        #     local, domain = email.split('@')\n        #     local = local.split('+')[0]\n        #     local = local.replace('.', '')\n        #     emails.add(local + '@' + domain)\n        # return len(emails)"
    },
    {
        "number": 930,
        "title": "Binary Subarrays With Sum",
        "difficulty": 1,
        "prompt": "class Solution:\r\n    def numSubarraysWithSum(self, nums: List[int], goal: int) -> int:\n        \"\"\"\n        Given a binary array nums and an integer goal, return the number of non-empty subarrays with a sum goal.\r\n        A subarray is a contiguous part of the array.\r\n        Example 1:\r\n        Input: nums = [1,0,1,0,1], goal = 2\r\n        Output: 4\r\n        Explanation: The 4 subarrays are bolded and underlined below:\r\n        [1,0,1,0,1]\r\n        [1,0,1,0,1]\r\n        [1,0,1,0,1]\r\n        [1,0,1,0,1]\r\n        Example 2:\r\n        Input: nums = [0,0,0,0,0], goal = 0\r\n        Output: 15\r\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        # dp[i][j] = num of subarrays with sum j and ends at i\n        # dp[i][j] = dp[i-1][j] + dp[i-1][j-nums[i]]\n        # dp[i][j] = dp[i-1][j] + dp[i-1][j-nums[i]] + dp[i-1][j-2*nums[i]]\n        # dp[i][j] = dp[i-1][j] + dp[i-1][j-nums[i]] + dp[i-1][j-2*nums[i]] + dp[i-1][j-3*nums[i]]\n        # dp[i][j] = dp[i-1][j] + dp[i-1][j-nums[i]] + dp[i-1][j-2*nums[i]] + dp[i-1][j-3*nums[i]] + dp[i-1][j-4*nums[i]]\n        # dp[i][j] = dp[i-1][j] + dp[i-1][j-nums[i]] +"
    },
    {
        "number": 931,
        "title": "Minimum Falling Path Sum",
        "difficulty": 1,
        "prompt": "class Solution:\n    def minFallingPathSum(self, matrix: List[List[int]]) -> int:\n        \"\"\"\n        Given an n x n array of integers matrix, return the minimum sum of any falling path through matrix.\n        A falling path starts at any element in the first row and chooses the element in the next row that is either directly below or diagonally left/right. Specifically, the next element from position (row, col) will be (row + 1, col - 1), (row + 1, col), or (row + 1, col + 1).\n        Example 1:\n        Input: matrix = [[2,1,3],[6,5,4],[7,8,9]]\n        Output: 13\n        Explanation: There are two falling paths with a minimum sum as shown.\n        Example 2:\n        Input: matrix = [[-19,57],[-40,-5]]\n        Output: -59\n        Explanation: The falling path with a minimum sum is shown.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        if not matrix:\n            return 0\n        m, n = len(matrix), len(matrix[0])\n        dp = [[0] * n for _ in range(m)]\n        dp[0] = matrix[0]\n        for i in range(1, m):\n            for j in range(n):\n                if j == 0:\n                    dp[i][j] = min(dp[i - 1][j], dp[i - 1][j + 1]) + matrix[i][j]\n                elif j == n - 1:\n                    dp[i][j] = min(dp[i - 1][j], dp[i - 1][j - 1]) + matrix[i][j]\n                else:\n                    dp[i][j] = min(dp[i - 1][j], dp[i - 1][j - 1], dp[i - 1][j + 1]) + matrix[i][j]\n        return min(dp[-1])"
    },
    {
        "number": 932,
        "title": "Beautiful Array",
        "difficulty": 1,
        "prompt": "class Solution:\n    def beautifulArray(self, n: int) -> List[int]:\n        \"\"\"\n        An array nums of length n is beautiful if:\n            nums is a permutation of the integers in the range [1, n].\n            For every 0 <= i < j < n, there is no index k with i < k < j where 2 * nums[k] == nums[i] + nums[j].\n        Given the integer n, return any beautiful array nums of length n. There will be at least one valid answer for the given n.\n        Example 1:\n        Input: n = 4\n        Output: [2,1,4,3]\n        Example 2:\n        Input: n = 5\n        Output: [3,1,2,5,4]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        def dfs(nums, i, j, k):\n            if i >= j:\n                return\n            if i == j - 1:\n                if 2 * nums[i] == nums[j]:\n                    return\n                nums[i], nums[j] = nums[j], nums[i]\n                return\n            for m in range(k, j):\n                if 2 * nums[m] == nums[i] + nums[j]:\n                    break\n            dfs(nums, i, m, k)\n            dfs(nums, m, j, k)\n        nums = [i for i in range(1, n + 1)]\n        dfs(nums, 0, len(nums) - 1, 0)\n        return nums\n<|endoftext|>"
    },
    {
        "number": 933,
        "title": "Number of Recent Calls",
        "difficulty": 0,
        "prompt": "class RecentCounter:\n    def __init__(self):\n    def ping(self, t: int) -> int:\n        \"\"\"\n        You have a RecentCounter class which counts the number of recent requests within a certain time frame.\n        Implement the RecentCounter class:\n            RecentCounter() Initializes the counter with zero recent requests.\n            int ping(int t) Adds a new request at time t, where t represents some time in milliseconds, and returns the number of requests that has happened in the past 3000 milliseconds (including the new request). Specifically, return the number of requests that have happened in the inclusive range [t - 3000, t].\n        It is guaranteed that every call to ping uses a strictly larger value of t than the previous call.\n        Example 1:\n        Input\n        [\"RecentCounter\", \"ping\", \"ping\", \"ping\", \"ping\"]\n        [[], [1], [100], [3001], [3002]]\n        Output\n        [null, 1, 2, 3, 3]\n        Explanation\n        RecentCounter recentCounter = new RecentCounter();\n        recentCounter.ping(1);     // requests = [1], range is [-2999,1], return 1\n        recentCounter.ping(100);   // requests = [1, 100], range is [-2900,100], return 2\n        recentCounter.ping(3001);  // requests = [1, 100, 3001], range is [1,3001], return 3\n        recentCounter.ping(3002);  // requests = [1, 100, 3001, 3002], range is [2,3002], return 3\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        self.t = t\n        self.requests = []\n        self.requests.append(t)\n        return len(self.requests)"
    },
    {
        "number": 934,
        "title": "Shortest Bridge",
        "difficulty": 1,
        "prompt": "class Solution:\n    def shortestBridge(self, grid: List[List[int]]) -> int:\n        \"\"\"\n        You are given an n x n binary matrix grid where 1 represents land and 0 represents water.\n        An island is a 4-directionally connected group of 1's not connected to any other 1's. There are exactly two islands in grid.\n        You may change 0's to 1's to connect the two islands to form one island.\n        Return the smallest number of 0's you must flip to connect the two islands.\n        Example 1:\n        Input: grid = [[0,1],[1,0]]\n        Output: 1\n        Example 2:\n        Input: grid = [[0,1,0],[0,0,0],[0,0,1]]\n        Output: 2\n        Example 3:\n        Input: grid = [[1,1,1,1,1],[1,0,0,0,1],[1,0,1,0,1],[1,0,0,0,1],[1,1,1,1,1]]\n        Output: 1\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        # BFS\n        # Time: O(n^2)\n        # Space: O(n^2)\n        # queue = collections.deque()\n        # for i in range(len(grid)):\n        #     for j in range(len(grid[0])):\n        #         if grid[i][j] == 1:\n        #             queue.append((i, j))\n        #\n        # def bfs(queue):\n        #     directions = [(0, 1), (0, -1), (1, 0), (-1, 0)]\n        #     while queue:\n        #         i, j = queue.popleft()\n        #         for d in directions:\n        #             x, y = i + d[0], j + d[1]\n        #             if 0 <= x < len(grid) and 0 <= y < len(grid[0]) and grid[x][y] == 1:\n        #                 grid[x][y] = 2\n        #                 queue.append((x, y))\n        #\n        # bfs(queue)\n        #\n        # for i in range(len(grid)):\n        #     for j in range(len(grid[0])):\n        #         if grid[i][j] == 1:\n        #             "
    },
    {
        "number": 935,
        "title": "Knight Dialer",
        "difficulty": 1,
        "prompt": "class Solution:\n    def knightDialer(self, n: int) -> int:\n        \"\"\"\n        The chess knight has a unique movement, it may move two squares vertically and one square horizontally, or two squares horizontally and one square vertically (with both forming the shape of an L). The possible movements of chess knight are shown in this diagaram:\n        A chess knight can move as indicated in the chess diagram below:\n        We have a chess knight and a phone pad as shown below, the knight can only stand on a numeric cell (i.e. blue cell).\n        Given an integer n, return how many distinct phone numbers of length n we can dial.\n        You are allowed to place the knight on any numeric cell initially and then you should perform n - 1 jumps to dial a number of length n. All jumps should be valid knight jumps.\n        As the answer may be very large, return the answer modulo 109 + 7.\n        Example 1:\n        Input: n = 1\n        Output: 10\n        Explanation: We need to dial a number of length 1, so placing the knight over any numeric cell of the 10 cells is sufficient.\n        Example 2:\n        Input: n = 2\n        Output: 20\n        Explanation: All the valid number we can dial are [04, 06, 16, 18, 27, 29, 34, 38, 40, 43, 49, 60, 61, 67, 72, 76, 81, 83, 92, 94]\n        Example 3:\n        Input: n = 3131\n        Output: 136006598\n        Explanation: Please take care of the mod.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        # dp[i][j] = dp[i-1][j-2] + dp[i-1][j-1] + dp[i-1][j+1] + dp[i-1][j+2]\n        # dp[i][j] = dp[i-2][j-1] + dp[i-2][j+1] + dp[i-1][j-2] + dp[i-1][j+2]\n        # dp[i][j] = dp[i-2][j-2] + dp[i-2][j+2] + dp[i-1][j-1] + dp[i-1][j+1]\n        # dp[i][j] = dp[i-2][j-2] + dp[i-2][j+2] + dp[i-1][j-1] + dp[i-1][j+1]\n        # dp[i][j] = dp[i-2][j-2] + dp[i-2][j+2] + dp[i-1][j-1] + dp[i-1][j+1]\n        # dp[i][j] ="
    },
    {
        "number": 936,
        "title": "Stamping The Sequence",
        "difficulty": 2,
        "prompt": "class Solution:\n    def movesToStamp(self, stamp: str, target: str) -> List[int]:\n        \"\"\"\n        You are given two strings stamp and target. Initially, there is a string s of length target.length with all s[i] == '?'.\n        In one turn, you can place stamp over s and replace every letter in the s with the corresponding letter from stamp.\n            For example, if stamp = \"abc\" and target = \"abcba\", then s is \"?????\" initially. In one turn you can:\n                place stamp at index 0 of s to obtain \"abc??\",\n                place stamp at index 1 of s to obtain \"?abc?\", or\n                place stamp at index 2 of s to obtain \"??abc\".\n            Note that stamp must be fully contained in the boundaries of s in order to stamp (i.e., you cannot place stamp at index 3 of s).\n        We want to convert s to target using at most 10 * target.length turns.\n        Return an array of the index of the left-most letter being stamped at each turn. If we cannot obtain target from s within 10 * target.length turns, return an empty array.\n        Example 1:\n        Input: stamp = \"abc\", target = \"ababc\"\n        Output: [0,2]\n        Explanation: Initially s = \"?????\".\n        - Place stamp at index 0 to get \"abc??\".\n        - Place stamp at index 2 to get \"ababc\".\n        [1,0,2] would also be accepted as an answer, as well as some other answers.\n        Example 2:\n        Input: stamp = \"abca\", target = \"aabcaca\"\n        Output: [3,0,1]\n        Explanation: Initially s = \"???????\".\n        - Place stamp at index 3 to get \"???abca\".\n        - Place stamp at index 0 to get \"abcabca\".\n        - Place stamp at index 1 to get \"aabcaca\".\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        n, m = len(stamp), len(target)\n        if m < n:\n            return []\n        stamp = list(stamp)\n        target = list(target)\n        res = []\n        for i in range(m - n + 1):\n            if target[i:i + n] == stamp:\n                res.append(i)\n        if not res:\n            return []\n        for i in range(m - n + 1):\n            if target[i:i + n] == stamp:\n                res.append(i)\n        return res"
    },
    {
        "number": 937,
        "title": "Reorder Data in Log Files",
        "difficulty": 1,
        "prompt": "class Solution:\n    def reorderLogFiles(self, logs: List[str]) -> List[str]:\n        \"\"\"\n        You are given an array of logs. Each log is a space-delimited string of words, where the first word is the identifier.\n        There are two types of logs:\n            Letter-logs: All words (except the identifier) consist of lowercase English letters.\n            Digit-logs: All words (except the identifier) consist of digits.\n        Reorder these logs so that:\n            The letter-logs come before all digit-logs.\n            The letter-logs are sorted lexicographically by their contents. If their contents are the same, then sort them lexicographically by their identifiers.\n            The digit-logs maintain their relative ordering.\n        Return the final order of the logs.\n        Example 1:\n        Input: logs = [\"dig1 8 1 5 1\",\"let1 art can\",\"dig2 3 6\",\"let2 own kit dig\",\"let3 art zero\"]\n        Output: [\"let1 art can\",\"let3 art zero\",\"let2 own kit dig\",\"dig1 8 1 5 1\",\"dig2 3 6\"]\n        Explanation:\n        The letter-log contents are all different, so their ordering is \"art can\", \"art zero\", \"own kit dig\".\n        The digit-logs have a relative order of \"dig1 8 1 5 1\", \"dig2 3 6\".\n        Example 2:\n        Input: logs = [\"a1 9 2 3 1\",\"g1 act car\",\"zo4 4 7\",\"ab1 off key dog\",\"a8 act zoo\"]\n        Output: [\"g1 act car\",\"a8 act zoo\",\"ab1 off key dog\",\"a1 9 2 3 1\",\"zo4 4 7\"]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        def f(log):\n            id_, rest = log.split(\" \", 1)\n            return (0, rest, id_) if rest[0].isalpha() else (1,)\n        return sorted(logs, key=f)"
    },
    {
        "number": 938,
        "title": "Range Sum of BST",
        "difficulty": 0,
        "prompt": "class Solution:\n    def rangeSumBST(self, root: Optional[TreeNode], low: int, high: int) -> int:\n        \"\"\"\n        Given the root node of a binary search tree and two integers low and high, return the sum of values of all nodes with a value in the inclusive range [low, high].\n        Example 1:\n        Input: root = [10,5,15,3,7,null,18], low = 7, high = 15\n        Output: 32\n        Explanation: Nodes 7, 10, and 15 are in the range [7, 15]. 7 + 10 + 15 = 32.\n        Example 2:\n        Input: root = [10,5,15,3,7,13,18,1,null,6], low = 6, high = 10\n        Output: 23\n        Explanation: Nodes 6, 7, and 10 are in the range [6, 10]. 6 + 7 + 10 = 23.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        if not root:\n            return 0\n        if root.val < low:\n            return self.rangeSumBST(root.right, low, high)\n        elif root.val > high:\n            return self.rangeSumBST(root.left, low, high)\n        else:\n            return root.val + self.rangeSumBST(root.left, low, high) + self.rangeSumBST(root.right, low, high)\n<|endoftext|>"
    },
    {
        "number": 939,
        "title": "Minimum Area Rectangle",
        "difficulty": 1,
        "prompt": "class Solution:\n    def minAreaRect(self, points: List[List[int]]) -> int:\n        \"\"\"\n        You are given an array of points in the X-Y plane points where points[i] = [xi, yi].\n        Return the minimum area of a rectangle formed from these points, with sides parallel to the X and Y axes. If there is not any such rectangle, return 0.\n        Example 1:\n        Input: points = [[1,1],[1,3],[3,1],[3,3],[2,2]]\n        Output: 4\n        Example 2:\n        Input: points = [[1,1],[1,3],[3,1],[3,3],[4,1],[4,3]]\n        Output: 2\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        points.sort()\n        n = len(points)\n        if n < 4:\n            return 0\n        min_area = float('inf')\n        for i in range(n-3):\n            for j in range(i+1, n-2):\n                x1, y1 = points[i]\n                x2, y2 = points[j]\n                for k in range(j+1, n):\n                    x3, y3 = points[k]\n                    if x1 == x2 or x1 == x3 or x2 == x3:\n                        continue\n                    if y1 == y2 or y1 == y3 or y2 == y3:\n                        continue\n                    area = abs(x1-x2) * abs(y1-y3)\n                    if area < min_area:\n                        min_area = area\n        return min_area if min_area!= float('inf') else 0"
    },
    {
        "number": 940,
        "title": "Distinct Subsequences II",
        "difficulty": 2,
        "prompt": "class Solution:\n    def distinctSubseqII(self, s: str) -> int:\n        \"\"\"\n        Given a string s, return the number of distinct non-empty subsequences of s. Since the answer may be very large, return it modulo 109 + 7.\n        A subsequence of a string is a new string that is formed from the original string by deleting some (can be none) of the characters without disturbing the relative positions of the remaining characters. (i.e., \"ace\" is a subsequence of \"abcde\" while \"aec\" is not.\n        Example 1:\n        Input: s = \"abc\"\n        Output: 7\n        Explanation: The 7 distinct subsequences are \"a\", \"b\", \"c\", \"ab\", \"ac\", \"bc\", and \"abc\".\n        Example 2:\n        Input: s = \"aba\"\n        Output: 6\n        Explanation: The 6 distinct subsequences are \"a\", \"b\", \"ab\", \"aa\", \"ba\", and \"aba\".\n        Example 3:\n        Input: s = \"aaa\"\n        Output: 3\n        Explanation: The 3 distinct subsequences are \"a\", \"aa\" and \"aaa\".\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        # dp[i][j] = the number of distinct subsequences of s[i:] with length j\n        # dp[i][j] = dp[i][j-1] + dp[i+1][j] + 1\n        # dp[i][j] = dp[i][j-1] + dp[i+1][j] + 1 - dp[i+1][j-1]\n        # dp[i][j] = dp[i][j-1] + dp[i+1][j] + 1 - dp[i+1][j-1] + dp[i+2][j]\n        # dp[i][j] = dp[i][j-1] + dp[i+1][j] + 1 - dp[i+1][j-1] + dp[i+2][j] - dp[i+2][j-1]\n        # dp[i][j] = dp[i][j-1] + dp[i+1][j] + 1 - dp[i+1][j-1] + dp[i+2][j] - dp[i+2][j-1] + dp[i+3][j]\n        # d"
    },
    {
        "number": 941,
        "title": "Valid Mountain Array",
        "difficulty": 0,
        "prompt": "class Solution:\n    def validMountainArray(self, arr: List[int]) -> bool:\n        \"\"\"\n        Given an array of integers arr, return true if and only if it is a valid mountain array.\n        Recall that arr is a mountain array if and only if:\n            arr.length >= 3\n            There exists some i with 0 < i < arr.length - 1 such that:\n                arr[0] < arr[1] <... < arr[i - 1] < arr[i] \n                arr[i] > arr[i + 1] >... > arr[arr.length - 1]\n        Example 1:\n        Input: arr = [2,1]\n        Output: false\n        Example 2:\n        Input: arr = [3,5,5]\n        Output: false\n        Example 3:\n        Input: arr = [0,3,2,1]\n        Output: true\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        if len(arr) < 3:\n            return False\n        \n        i = 0\n        while i < len(arr) - 1 and arr[i] < arr[i+1]:\n            i += 1\n        if i == 0 or i == len(arr) - 1:\n            return False\n        \n        while i < len(arr) - 1 and arr[i] > arr[i+1]:\n            i += 1\n        return i == len(arr) - 1\n<|endoftext|>"
    },
    {
        "number": 942,
        "title": "DI String Match",
        "difficulty": 0,
        "prompt": "class Solution:\n    def diStringMatch(self, s: str) -> List[int]:\n        \"\"\"\n        A permutation perm of n + 1 integers of all the integers in the range [0, n] can be represented as a string s of length n where:\n            s[i] == 'I' if perm[i] < perm[i + 1], and\n            s[i] == 'D' if perm[i] > perm[i + 1].\n        Given a string s, reconstruct the permutation perm and return it. If there are multiple valid permutations perm, return any of them.\n        Example 1:\n        Input: s = \"IDID\"\n        Output: [0,4,1,3,2]\n        Example 2:\n        Input: s = \"III\"\n        Output: [0,1,2,3]\n        Example 3:\n        Input: s = \"DDI\"\n        Output: [3,2,0,1]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        \n        # Solution 1:\n        # Time: O(n)\n        # Space: O(n)\n        # n = len(s)\n        # if n == 0:\n        #     return []\n        # if n == 1:\n        #     return [0]\n        # if n == 2:\n        #     if s == 'ID':\n        #         return [0, 1]\n        #     elif s == 'IDI':\n        #         return [1, 0]\n        #     else:\n        #         return [0, 2]\n        # if n == 3:\n        #     if s == 'IDID':\n        #         return [0, 1, 2]\n        #     elif s == 'IDDI':\n        #         return [1, 0, 2]\n        #     else:\n        #         return [0, 2, 1]\n        # if n == 4:\n        #     if s == 'IDIDI':\n        #         return [0, 1, 2, 3]\n        #     elif s == 'IDIDID':\n        #         return [1, 0, 3, 2]\n        #     else:\n        #         return [2, 0, 3, 1]\n        # if n == 5:\n        #     if s == '"
    },
    {
        "number": 943,
        "title": "Find the Shortest Superstring",
        "difficulty": 2,
        "prompt": "class Solution:\n    def shortestSuperstring(self, words: List[str]) -> str:\n        \"\"\"\n        Given an array of strings words, return the smallest string that contains each string in words as a substring. If there are multiple valid strings of the smallest length, return any of them.\n        You may assume that no string in words is a substring of another string in words.\n        Example 1:\n        Input: words = [\"alex\",\"loves\",\"leetcode\"]\n        Output: \"alexlovesleetcode\"\n        Explanation: All permutations of \"alex\",\"loves\",\"leetcode\" would also be accepted.\n        Example 2:\n        Input: words = [\"catg\",\"ctaagt\",\"gcta\",\"ttca\",\"atgcatc\"]\n        Output: \"gctaagttcatgcatc\"\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        # dp[i][j] = shortest superstring of words[i:j+1]\n        # dp[i][j] = min(dp[i][k] + dp[k+1][j] + len(words[i:k+1]) + len(words[k+1:j+1]))\n        # dp[i][j] = min(dp[i][k] + dp[k+1][j] + len(words[i:k+1]) + len(words[k+1:j+1]))\n        # dp[i][j] = min(dp[i][k] + dp[k+1][j] + len(words[i:k+1]) + len(words[k+1:j+1]))\n        # dp[i][j] = min(dp[i][k] + dp[k+1][j] + len(words[i:k+1]) + len(words[k+1:j+1]))\n        # dp[i][j] = min(dp[i][k] + dp[k+1][j] + len(words[i:k+1]) + len(words[k+1:j+1]))\n        # dp[i]["
    },
    {
        "number": 944,
        "title": "Delete Columns to Make Sorted",
        "difficulty": 0,
        "prompt": "class Solution:\n    def minDeletionSize(self, strs: List[str]) -> int:\n        \"\"\"\n        You are given an array of n strings strs, all of the same length.\n        The strings can be arranged such that there is one on each line, making a grid.\n            For example, strs = [\"abc\", \"bce\", \"cae\"] can be arranged as follows:\n        abc\n        bce\n        cae\n        You want to delete the columns that are not sorted lexicographically. In the above example (0-indexed), columns 0 ('a', 'b', 'c') and 2 ('c', 'e', 'e') are sorted, while column 1 ('b', 'c', 'a') is not, so you would delete column 1.\n        Return the number of columns that you will delete.\n        Example 1:\n        Input: strs = [\"cba\",\"daf\",\"ghi\"]\n        Output: 1\n        Explanation: The grid looks as follows:\n          cba\n          daf\n          ghi\n        Columns 0 and 2 are sorted, but column 1 is not, so you only need to delete 1 column.\n        Example 2:\n        Input: strs = [\"a\",\"b\"]\n        Output: 0\n        Explanation: The grid looks as follows:\n          a\n          b\n        Column 0 is the only column and is sorted, so you will not delete any columns.\n        Example 3:\n        Input: strs = [\"zyx\",\"wvu\",\"tsr\"]\n        Output: 3\n        Explanation: The grid looks as follows:\n          zyx\n          wvu\n          tsr\n        All 3 columns are not sorted, so you will delete all 3.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        # Time: O(n^2)\n        # Space: O(n)\n        # n = len(strs)\n        # if n == 0:\n        #     return 0\n        # m = len(strs[0])\n        # for i in range(m):\n        #     for j in range(1, n):\n        #         if strs[j][i] < strs[j - 1][i]:\n        #             return m - i\n        # return 0"
    },
    {
        "number": 945,
        "title": "Minimum Increment to Make Array Unique",
        "difficulty": 1,
        "prompt": "class Solution:\n    def minIncrementForUnique(self, nums: List[int]) -> int:\n        \"\"\"\n        You are given an integer array nums. In one move, you can pick an index i where 0 <= i < nums.length and increment nums[i] by 1.\n        Return the minimum number of moves to make every value in nums unique.\n        The test cases are generated so that the answer fits in a 32-bit integer.\n        Example 1:\n        Input: nums = [1,2,2]\n        Output: 1\n        Explanation: After 1 move, the array could be [1, 2, 3].\n        Example 2:\n        Input: nums = [3,2,1,2,1,7]\n        Output: 6\n        Explanation: After 6 moves, the array could be [3, 4, 1, 2, 5, 7].\n        It can be shown with 5 or less moves that it is impossible for the array to have all unique values.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        # nums.sort()\n        # res = 0\n        # for i in range(1, len(nums)):\n        #     if nums[i] <= nums[i-1]:\n        #         res += nums[i-1] - nums[i] + 1\n        #         nums[i] = nums[i-1] + 1\n        # return res"
    },
    {
        "number": 946,
        "title": "Validate Stack Sequences",
        "difficulty": 1,
        "prompt": "class Solution:\n    def validateStackSequences(self, pushed: List[int], popped: List[int]) -> bool:\n        \"\"\"\n        Given two integer arrays pushed and popped each with distinct values, return true if this could have been the result of a sequence of push and pop operations on an initially empty stack, or false otherwise.\n        Example 1:\n        Input: pushed = [1,2,3,4,5], popped = [4,5,3,2,1]\n        Output: true\n        Explanation: We might do the following sequence:\n        push(1), push(2), push(3), push(4),\n        pop() -> 4,\n        push(5),\n        pop() -> 5, pop() -> 3, pop() -> 2, pop() -> 1\n        Example 2:\n        Input: pushed = [1,2,3,4,5], popped = [4,3,5,1,2]\n        Output: false\n        Explanation: 1 cannot be popped before 2.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        stack = []\n        i = 0\n        for num in pushed:\n            stack.append(num)\n            while stack and stack[-1] == popped[i]:\n                stack.pop()\n                i += 1\n        return not stack"
    },
    {
        "number": 947,
        "title": "Most Stones Removed with Same Row or Column",
        "difficulty": 1,
        "prompt": "class Solution:\n    def removeStones(self, stones: List[List[int]]) -> int:\n        \"\"\"\n        On a 2D plane, we place n stones at some integer coordinate points. Each coordinate point may have at most one stone.\n        A stone can be removed if it shares either the same row or the same column as another stone that has not been removed.\n        Given an array stones of length n where stones[i] = [xi, yi] represents the location of the ith stone, return the largest possible number of stones that can be removed.\n        Example 1:\n        Input: stones = [[0,0],[0,1],[1,0],[1,2],[2,1],[2,2]]\n        Output: 5\n        Explanation: One way to remove 5 stones is as follows:\n        1. Remove stone [2,2] because it shares the same row as [2,1].\n        2. Remove stone [2,1] because it shares the same column as [0,1].\n        3. Remove stone [1,2] because it shares the same row as [1,0].\n        4. Remove stone [1,0] because it shares the same column as [0,0].\n        5. Remove stone [0,1] because it shares the same row as [0,0].\n        Stone [0,0] cannot be removed since it does not share a row/column with another stone still on the plane.\n        Example 2:\n        Input: stones = [[0,0],[0,2],[1,1],[2,0],[2,2]]\n        Output: 3\n        Explanation: One way to make 3 moves is as follows:\n        1. Remove stone [2,2] because it shares the same row as [2,0].\n        2. Remove stone [2,0] because it shares the same column as [0,0].\n        3. Remove stone [0,2] because it shares the same row as [0,0].\n        Stones [0,0] and [1,1] cannot be removed since they do not share a row/column with another stone still on the plane.\n        Example 3:\n        Input: stones = [[0,0]]\n        Output: 0\n        Explanation: [0,0] is the only stone on the plane, so you cannot remove it.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        # dfs\n        # time complexity: O(n^2), space complexity: O(n)\n        # n is the number of stones\n        def dfs(x, y):\n            if not dp[x][y]:\n                dp[x][y] = 1\n                for dx, dy in [(0, 1), (0, -1), (1, 0), (-1, 0)]:\n                    nx, ny = x + dx, y + dy\n                    if 0 <= nx < m and 0 <= ny < n and grid[nx][ny] == 0:\n                        dp[x][y] = max(dp[x][y], dfs(nx, ny) + 1)\n            return dp[x][y]"
    },
    {
        "number": 948,
        "title": "Bag of Tokens",
        "difficulty": 1,
        "prompt": "class Solution:\n    def bagOfTokensScore(self, tokens: List[int], power: int) -> int:\n        \"\"\"\n        You have an initial power of power, an initial score of 0, and a bag of tokens where tokens[i] is the value of the ith token (0-indexed).\n        Your goal is to maximize your total score by potentially playing each token in one of two ways:\n            If your current power is at least tokens[i], you may play the ith token face up, losing tokens[i] power and gaining 1 score.\n            If your current score is at least 1, you may play the ith token face down, gaining tokens[i] power and losing 1 score.\n        Each token may be played at most once and in any order. You do not have to play all the tokens.\n        Return the largest possible score you can achieve after playing any number of tokens.\n        Example 1:\n        Input: tokens = [100], power = 50\n        Output: 0\n        Explanation: Playing the only token in the bag is impossible because you either have too little power or too little score.\n        Example 2:\n        Input: tokens = [100,200], power = 150\n        Output: 1\n        Explanation: Play the 0th token (100) face up, your power becomes 50 and score becomes 1.\n        There is no need to play the 1st token since you cannot play it face up to add to your score.\n        Example 3:\n        Input: tokens = [100,200,300,400], power = 200\n        Output: 2\n        Explanation: Play the tokens in this order to get a score of 2:\n        1. Play the 0th token (100) face up, your power becomes 100 and score becomes 1.\n        2. Play the 3rd token (400) face down, your power becomes 500 and score becomes 0.\n        3. Play the 1st token (200) face up, your power becomes 300 and score becomes 1.\n        4. Play the 2nd token (300) face up, your power becomes 0 and score becomes 2.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        tokens.sort()\n        i, j = 0, len(tokens) - 1\n        score = 0\n        while i <= j:\n            if power >= tokens[i]:\n                power -= tokens[i]\n                score += 1\n                i += 1\n            elif score > 0:\n                power += tokens[j]\n                score -= 1\n                j -= 1\n            else:\n                break\n        return score"
    },
    {
        "number": 949,
        "title": "Largest Time for Given Digits",
        "difficulty": 1,
        "prompt": "class Solution:\n    def largestTimeFromDigits(self, arr: List[int]) -> str:\n        \"\"\"\n        Given an array arr of 4 digits, find the latest 24-hour time that can be made using each digit exactly once.\n        24-hour times are formatted as \"HH:MM\", where HH is between 00 and 23, and MM is between 00 and 59. The earliest 24-hour time is 00:00, and the latest is 23:59.\n        Return the latest 24-hour time in \"HH:MM\" format. If no valid time can be made, return an empty string.\n        Example 1:\n        Input: arr = [1,2,3,4]\n        Output: \"23:41\"\n        Explanation: The valid 24-hour times are \"12:34\", \"12:43\", \"13:24\", \"13:42\", \"14:23\", \"14:32\", \"21:34\", \"21:43\", \"23:14\", and \"23:41\". Of these times, \"23:41\" is the latest.\n        Example 2:\n        Input: arr = [5,5,5,5]\n        Output: \"\"\n        Explanation: There are no valid 24-hour times as \"55:55\" is not valid.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        \n        def backtrack(arr, index, curr, res):\n            if index == 4:\n                if curr[0] < 2 or curr[1] < 2:\n                    return\n                if curr[0] > 9 or curr[1] > 9:\n                    return\n                if curr[2] > 4 or curr[3] > 5:\n                    return\n                res.append(curr)\n                return\n            for i in range(4):\n                if i in curr:\n                    continue\n                curr.append(i)\n                backtrack(arr, index+1, curr, res)\n                curr.pop()\n        \n        res = []\n        backtrack(arr, 0, [], res)\n        res.sort()\n        if res:\n            return '{:02d}:{:02d}'.format(res[-1][0], res[-1][1])\n        else:\n            return ''\n<|endoftext|>"
    },
    {
        "number": 950,
        "title": "Reveal Cards In Increasing Order",
        "difficulty": 1,
        "prompt": "class Solution:\n    def deckRevealedIncreasing(self, deck: List[int]) -> List[int]:\n        \"\"\"\n        You are given an integer array deck. There is a deck of cards where every card has a unique integer. The integer on the ith card is deck[i].\n        You can order the deck in any order you want. Initially, all the cards start face down (unrevealed) in one deck.\n        You will do the following steps repeatedly until all cards are revealed:\n            Take the top card of the deck, reveal it, and take it out of the deck.\n            If there are still cards in the deck then put the next top card of the deck at the bottom of the deck.\n            If there are still unrevealed cards, go back to step 1. Otherwise, stop.\n        Return an ordering of the deck that would reveal the cards in increasing order.\n        Note that the first entry in the answer is considered to be the top of the deck.\n        Example 1:\n        Input: deck = [17,13,11,2,3,5,7]\n        Output: [2,13,3,11,5,17,7]\n        Explanation: \n        We get the deck in the order [17,13,11,2,3,5,7] (this order does not matter), and reorder it.\n        After reordering, the deck starts as [2,13,3,11,5,17,7], where 2 is the top of the deck.\n        We reveal 2, and move 13 to the bottom.  The deck is now [3,11,5,17,7,13].\n        We reveal 3, and move 11 to the bottom.  The deck is now [5,17,7,13,11].\n        We reveal 5, and move 17 to the bottom.  The deck is now [7,13,11,17].\n        We reveal 7, and move 13 to the bottom.  The deck is now [11,17,13].\n        We reveal 11, and move 17 to the bottom.  The deck is now [13,17].\n        We reveal 13, and move 17 to the bottom.  The deck is now [17].\n        We reveal 17.\n        Since all the cards revealed are in increasing order, the answer is correct.\n        Example 2:\n        Input: deck = [1,1000]\n        Output: [1,1000]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        deck.sort()\n        ans = []\n        for i in deck:\n            ans.insert(0, i)\n            ans.pop()\n        return ans"
    },
    {
        "number": 951,
        "title": "Flip Equivalent Binary Trees",
        "difficulty": 1,
        "prompt": "class Solution:\n    def flipEquiv(self, root1: Optional[TreeNode], root2: Optional[TreeNode]) -> bool:\n        \"\"\"\n        For a binary tree T, we can define a flip operation as follows: choose any node, and swap the left and right child subtrees.\n        A binary tree X is flip equivalent to a binary tree Y if and only if we can make X equal to Y after some number of flip operations.\n        Given the roots of two binary trees root1 and root2, return true if the two trees are flip equivalent or false otherwise.\n        Example 1:\n        Input: root1 = [1,2,3,4,5,6,null,null,null,7,8], root2 = [1,3,2,null,6,4,5,null,null,null,null,8,7]\n        Output: true\n        Explanation: We flipped at nodes with values 1, 3, and 5.\n        Example 2:\n        Input: root1 = [], root2 = []\n        Output: true\n        Example 3:\n        Input: root1 = [], root2 = [1]\n        Output: false\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        if not root1 and not root2:\n            return True\n        if not root1 or not root2:\n            return False\n        if root1.val!= root2.val:\n            return False\n        return self.flipEquiv(root1.left, root2.left) and self.flipEquiv(root1.right, root2.right) or self.flipEquiv(root1.left, root2.right) and self.flipEquiv(root1.right, root2.left)"
    }
]