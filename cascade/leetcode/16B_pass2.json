[
    {
        "number": 1,
        "title": "Two Sum",
        "difficulty": 0,
        "prompt": "class Solution:\n    def twoSum(self, nums: List[int], target: int) -> List[int]:\n        \"\"\"\n        Given an array of integers nums and an integer target, return indices of the two numbers such that they add up to target.\n        You may assume that each input would have exactly one solution, and you may not use the same element twice.\n        You can return the answer in any order.\n        Example 1:\n        Input: nums = [2,7,11,15], target = 9\n        Output: [0,1]\n        Explanation: Because nums[0] + nums[1] == 9, we return [0, 1].\n        Example 2:\n        Input: nums = [3,2,4], target = 6\n        Output: [1,2]\n        Example 3:\n        Input: nums = [3,3], target = 6\n        Output: [0,1]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        # Brute force\n        # for i in range(len(nums)):\n        #     for j in range(i+1, len(nums)):\n        #         if nums[i] + nums[j] == target:\n        #             return [i, j]"
    },
    {
        "number": 1,
        "title": "Two Sum",
        "difficulty": 0,
        "prompt": "class Solution:\n    def twoSum(self, nums: List[int], target: int) -> List[int]:\n        \"\"\"\n        Given an array of integers nums and an integer target, return indices of the two numbers such that they add up to target.\n        You may assume that each input would have exactly one solution, and you may not use the same element twice.\n        You can return the answer in any order.\n        Example 1:\n        Input: nums = [2,7,11,15], target = 9\n        Output: [0,1]\n        Explanation: Because nums[0] + nums[1] == 9, we return [0, 1].\n        Example 2:\n        Input: nums = [3,2,4], target = 6\n        Output: [1,2]\n        Example 3:\n        Input: nums = [3,3], target = 6\n        Output: [0,1]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        # Brute Force\n        # Time: O(n^2)\n        # Space: O(1)\n        # for i in range(len(nums)):\n        #     for j in range(i+1, len(nums)):\n        #         if nums[i] + nums[j] == target:\n        #             return [i, j]"
    },
    {
        "number": 2,
        "title": "Add Two Numbers",
        "difficulty": 1,
        "prompt": "class Solution:\n    def addTwoNumbers(self, l1: Optional[ListNode], l2: Optional[ListNode]) -> Optional[ListNode]:\n        \"\"\"\n        You are given two non-empty linked lists representing two non-negative integers. The digits are stored in reverse order, and each of their nodes contains a single digit. Add the two numbers and return the sum as a linked list.\n        You may assume the two numbers do not contain any leading zero, except the number 0 itself.\n        Example 1:\n        Input: l1 = [2,4,3], l2 = [5,6,4]\n        Output: [7,0,8]\n        Explanation: 342 + 465 = 807.\n        Example 2:\n        Input: l1 = [0], l2 = [0]\n        Output: [0]\n        Example 3:\n        Input: l1 = [9,9,9,9,9,9,9], l2 = [9,9,9,9]\n        Output: [8,9,9,9,0,0,0,1]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        # convert to int\n        num1 = 0\n        num2 = 0\n        while l1:\n            num1 = num1 * 10 + l1.val\n            l1 = l1.next\n        while l2:\n            num2 = num2 * 10 + l2.val\n            l2 = l2.next\n        # add\n        num3 = num1 + num2\n        # convert to list\n        l3 = ListNode(0)\n        head = l3\n        while num3:\n            l3.next = ListNode(num3 % 10)\n            l3 = l3.next\n            num3 = num3 // 10\n        return head.next\n<|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>"
    },
    {
        "number": 2,
        "title": "Add Two Numbers",
        "difficulty": 1,
        "prompt": "class Solution:\n    def addTwoNumbers(self, l1: Optional[ListNode], l2: Optional[ListNode]) -> Optional[ListNode]:\n        \"\"\"\n        You are given two non-empty linked lists representing two non-negative integers. The digits are stored in reverse order, and each of their nodes contains a single digit. Add the two numbers and return the sum as a linked list.\n        You may assume the two numbers do not contain any leading zero, except the number 0 itself.\n        Example 1:\n        Input: l1 = [2,4,3], l2 = [5,6,4]\n        Output: [7,0,8]\n        Explanation: 342 + 465 = 807.\n        Example 2:\n        Input: l1 = [0], l2 = [0]\n        Output: [0]\n        Example 3:\n        Input: l1 = [9,9,9,9,9,9,9], l2 = [9,9,9,9]\n        Output: [8,9,9,9,0,0,0,1]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        # Solution 1:\n        # Time complexity: O(n)\n        # Space complexity: O(n)\n        # ans = ListNode(0)\n        # curr = ans\n        # carry = 0\n        # while l1 or l2:\n        #     x = l1.val if l1 else 0\n        #     y = l2.val if l2 else 0\n        #     sum = x + y + carry\n        #     carry = sum // 10\n        #     curr.next = ListNode(sum % 10)\n        #     curr = curr.next\n        #     if l1:\n        #         l1 = l1.next\n        #     if l2:\n        #         l2 = l2.next\n        # if carry:\n        #     curr.next = ListNode(carry)\n        # return ans.next"
    },
    {
        "number": 3,
        "title": "Longest Substring Without Repeating Characters",
        "difficulty": 1,
        "prompt": "class Solution:\n    def lengthOfLongestSubstring(self, s: str) -> int:\n        \"\"\"\n        Given a string s, find the length of the longest substring without repeating characters.\n        Example 1:\n        Input: s = \"abcabcbb\"\n        Output: 3\n        Explanation: The answer is \"abc\", with the length of 3.\n        Example 2:\n        Input: s = \"bbbbb\"\n        Output: 1\n        Explanation: The answer is \"b\", with the length of 1.\n        Example 3:\n        Input: s = \"pwwkew\"\n        Output: 3\n        Explanation: The answer is \"wke\", with the length of 3.\n        Notice that the answer must be a substring, \"pwke\" is a subsequence and not a substring.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        if not s:\n            return 0\n        max_len = 0\n        left = 0\n        right = 0\n        char_set = set()\n        while right < len(s):\n            if s[right] not in char_set:\n                char_set.add(s[right])\n                right += 1\n                max_len = max(max_len, right - left)\n            else:\n                char_set.remove(s[left])\n                left += 1\n        return max_len"
    },
    {
        "number": 3,
        "title": "Longest Substring Without Repeating Characters",
        "difficulty": 1,
        "prompt": "class Solution:\n    def lengthOfLongestSubstring(self, s: str) -> int:\n        \"\"\"\n        Given a string s, find the length of the longest substring without repeating characters.\n        Example 1:\n        Input: s = \"abcabcbb\"\n        Output: 3\n        Explanation: The answer is \"abc\", with the length of 3.\n        Example 2:\n        Input: s = \"bbbbb\"\n        Output: 1\n        Explanation: The answer is \"b\", with the length of 1.\n        Example 3:\n        Input: s = \"pwwkew\"\n        Output: 3\n        Explanation: The answer is \"wke\", with the length of 3.\n        Notice that the answer must be a substring, \"pwke\" is a subsequence and not a substring.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        # sliding window\n        # O(n)\n        # O(n)\n        if not s:\n            return 0\n        left, right = 0, 0\n        max_len = 0\n        char_set = set()\n        while right < len(s):\n            if s[right] not in char_set:\n                char_set.add(s[right])\n                right += 1\n                max_len = max(max_len, right - left)\n            else:\n                char_set.remove(s[left])\n                left += 1\n        return max_len"
    },
    {
        "number": 4,
        "title": "Median of Two Sorted Arrays",
        "difficulty": 2,
        "prompt": "class Solution:\n    def findMedianSortedArrays(self, nums1: List[int], nums2: List[int]) -> float:\n        \"\"\"\n        Given two sorted arrays nums1 and nums2 of size m and n respectively, return the median of the two sorted arrays.\n        The overall run time complexity should be O(log (m+n)).\n        Example 1:\n        Input: nums1 = [1,3], nums2 = [2]\n        Output: 2.00000\n        Explanation: merged array = [1,2,3] and median is 2.\n        Example 2:\n        Input: nums1 = [1,2], nums2 = [3,4]\n        Output: 2.50000\n        Explanation: merged array = [1,2,3,4] and median is (2 + 3) / 2 = 2.5.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        m = len(nums1)\n        n = len(nums2)\n        if m == 0:\n            if n % 2 == 0:\n                return (nums2[n//2] + nums2[n//2 - 1]) / 2\n            else:\n                return nums2[n//2]\n        if n == 0:\n            if m % 2 == 0:\n                return (nums1[m//2] + nums1[m//2 - 1]) / 2\n            else:\n                return nums1[m//2]\n        if m == 1 and n == 1:\n            return (nums1[0] + nums2[0]) / 2\n        if m == 1:\n            if n % 2 == 0:\n                return (nums1[0] + nums2[n//2 - 1] + nums2[n//2]) / 3\n            else:\n                return (nums1[0] + nums2[n//2]) / 2\n        if n == 1:\n            if m % 2 == 0:\n                return (nums1[m//2 - 1] + nums1[m//2] + nums2[0]) / 3\n            else:\n                return (nums1[m//2] + num"
    },
    {
        "number": 4,
        "title": "Median of Two Sorted Arrays",
        "difficulty": 2,
        "prompt": "class Solution:\n    def findMedianSortedArrays(self, nums1: List[int], nums2: List[int]) -> float:\n        \"\"\"\n        Given two sorted arrays nums1 and nums2 of size m and n respectively, return the median of the two sorted arrays.\n        The overall run time complexity should be O(log (m+n)).\n        Example 1:\n        Input: nums1 = [1,3], nums2 = [2]\n        Output: 2.00000\n        Explanation: merged array = [1,2,3] and median is 2.\n        Example 2:\n        Input: nums1 = [1,2], nums2 = [3,4]\n        Output: 2.50000\n        Explanation: merged array = [1,2,3,4] and median is (2 + 3) / 2 = 2.5.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        # \u53cc\u6307\u9488\u6cd5\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(log(m+n))\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        # \u601d\u8def\uff1a\n        # 1. \u5148\u5c06\u4e24\u4e2a\u6570\u7ec4\u5408\u5e76\u6210\u4e00\u4e2a\u6570\u7ec4\uff0c\u5e76\u5bf9\u8fd9\u4e2a\u6570\u7ec4\u8fdb\u884c\u6392\u5e8f\n        # 2. \u5982\u679c\u6570\u7ec4\u957f\u5ea6\u4e3a\u5076\u6570\uff0c\u5219\u4e2d\u4f4d\u6570\u4e3a\u4e2d\u95f4\u4e24\u4e2a\u6570\u7684\u5e73\u5747\u503c\n        # 3. \u5982\u679c\u6570\u7ec4\u957f\u5ea6\u4e3a\u5947\u6570\uff0c\u5219\u4e2d\u4f4d\u6570\u4e3a\u4e2d\u95f4\u7684\u90a3\u4e2a\u6570\n        # 4. \u5982\u679c\u6570\u7ec4\u957f\u5ea6\u4e3a\u5947\u6570\uff0c\u5219\u4e2d\u4f4d\u6570\u4e3a\u4e2d\u95f4\u7684\u90a3\u4e2a\u6570\n        # 5. \u5982\u679c\u6570\ufffd"
    },
    {
        "number": 5,
        "title": "Longest Palindromic Substring",
        "difficulty": 1,
        "prompt": "class Solution:\n    def longestPalindrome(self, s: str) -> str:\n        \"\"\"\n        Given a string s, return the longest palindromic substring in s.\n        Example 1:\n        Input: s = \"babad\"\n        Output: \"bab\"\n        Explanation: \"aba\" is also a valid answer.\n        Example 2:\n        Input: s = \"cbbd\"\n        Output: \"bb\"\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        if not s:\n            return \"\"\n        n = len(s)\n        dp = [[False] * n for _ in range(n)]\n        ans = \"\"\n        # \u679a\u4e3e\u5b50\u4e32\u7684\u957f\u5ea6 l+1\n        for l in range(n):\n            # \u679a\u4e3e\u5b50\u4e32\u7684\u8d77\u59cb\u4f4d\u7f6e i\uff0c\u8fd9\u6837\u53ef\u4ee5\u901a\u8fc7 j=i+l \u5f97\u5230\u5b50\u4e32\u7684\u7ed3\u675f\u4f4d\u7f6e\n            for i in range(n):\n                j = i + l\n                if j >= len(s):\n                    break\n                if l == 0:\n                    dp[i][j] = True\n                elif l == 1:\n                    dp[i][j] = (s[i] == s[j])\n                else:\n                    dp[i][j] = (dp[i + 1][j - 1] and s[i] == s[j])\n                if dp[i][j] and l + 1 > len(ans):\n                    ans = s[i:j + 1]\n        return ans"
    },
    {
        "number": 5,
        "title": "Longest Palindromic Substring",
        "difficulty": 1,
        "prompt": "class Solution:\n    def longestPalindrome(self, s: str) -> str:\n        \"\"\"\n        Given a string s, return the longest palindromic substring in s.\n        Example 1:\n        Input: s = \"babad\"\n        Output: \"bab\"\n        Explanation: \"aba\" is also a valid answer.\n        Example 2:\n        Input: s = \"cbbd\"\n        Output: \"bb\"\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        # Solution 1: Brute Force\n        # Time: O(n^3)\n        # Space: O(1)\n        # if len(s) == 0:\n        #     return \"\"\n        # if len(s) == 1:\n        #     return s\n        # max_len = 0\n        # for i in range(len(s)):\n        #     for j in range(i, len(s)):\n        #         if s[i:j+1] == s[i:j+1][::-1]:\n        #             max_len = max(max_len, len(s[i:j+1]))\n        # return s[max_len]"
    },
    {
        "number": 6,
        "title": "Zigzag Conversion",
        "difficulty": 1,
        "prompt": "class Solution:\n    def convert(self, s: str, numRows: int) -> str:\n        \"\"\"\n        The string \"PAYPALISHIRING\" is written in a zigzag pattern on a given number of rows like this: (you may want to display this pattern in a fixed font for better legibility)\n        P   A   H   N\n        A P L S I I G\n        Y   I   R\n        And then read line by line: \"PAHNAPLSIIGYIR\"\n        Write the code that will take a string and make this conversion given a number of rows:\n        string convert(string s, int numRows);\n        Example 1:\n        Input: s = \"PAYPALISHIRING\", numRows = 3\n        Output: \"PAHNAPLSIIGYIR\"\n        Example 2:\n        Input: s = \"PAYPALISHIRING\", numRows = 4\n        Output: \"PINALSIGYAHRPI\"\n        Explanation:\n        P     I    N\n        A   L S  I G\n        Y A   H R\n        P     I\n        Example 3:\n        Input: s = \"A\", numRows = 1\n        Output: \"A\"\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        if numRows == 1:\n            return s\n        rows = [''] * numRows\n        row = 0\n        going_down = False\n        for c in s:\n            rows[row] += c\n            if row == 0 or row == numRows - 1:\n                going_down = not going_down\n            row += 1 if going_down else -1\n        return ''.join(rows)"
    },
    {
        "number": 6,
        "title": "Zigzag Conversion",
        "difficulty": 1,
        "prompt": "class Solution:\n    def convert(self, s: str, numRows: int) -> str:\n        \"\"\"\n        The string \"PAYPALISHIRING\" is written in a zigzag pattern on a given number of rows like this: (you may want to display this pattern in a fixed font for better legibility)\n        P   A   H   N\n        A P L S I I G\n        Y   I   R\n        And then read line by line: \"PAHNAPLSIIGYIR\"\n        Write the code that will take a string and make this conversion given a number of rows:\n        string convert(string s, int numRows);\n        Example 1:\n        Input: s = \"PAYPALISHIRING\", numRows = 3\n        Output: \"PAHNAPLSIIGYIR\"\n        Example 2:\n        Input: s = \"PAYPALISHIRING\", numRows = 4\n        Output: \"PINALSIGYAHRPI\"\n        Explanation:\n        P     I    N\n        A   L S  I G\n        Y A   H R\n        P     I\n        Example 3:\n        Input: s = \"A\", numRows = 1\n        Output: \"A\"\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        if numRows == 1:\n            return s\n        res = [''] * numRows\n        i, flag = 0, -1\n        for c in s:\n            res[i] += c\n            if i == 0 or i == numRows - 1:\n                flag = -flag\n            i += flag\n        return ''.join(res)"
    },
    {
        "number": 7,
        "title": "Reverse Integer",
        "difficulty": 1,
        "prompt": "class Solution:\n    def reverse(self, x: int) -> int:\n        \"\"\"\n        Given a signed 32-bit integer x, return x with its digits reversed. If reversing x causes the value to go outside the signed 32-bit integer range [-231, 231 - 1], then return 0.\n        Assume the environment does not allow you to store 64-bit integers (signed or unsigned).\n        Example 1:\n        Input: x = 123\n        Output: 321\n        Example 2:\n        Input: x = -123\n        Output: -321\n        Example 3:\n        Input: x = 120\n        Output: 21\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        if x < 0:\n            x = -x\n            sign = -1\n        else:\n            sign = 1\n        x = str(x)\n        x = x[::-1]\n        x = int(x)\n        if x < -2**31 or x > 2**31 - 1:\n            return 0\n        return sign * x"
    },
    {
        "number": 7,
        "title": "Reverse Integer",
        "difficulty": 1,
        "prompt": "class Solution:\n    def reverse(self, x: int) -> int:\n        \"\"\"\n        Given a signed 32-bit integer x, return x with its digits reversed. If reversing x causes the value to go outside the signed 32-bit integer range [-231, 231 - 1], then return 0.\n        Assume the environment does not allow you to store 64-bit integers (signed or unsigned).\n        Example 1:\n        Input: x = 123\n        Output: 321\n        Example 2:\n        Input: x = -123\n        Output: -321\n        Example 3:\n        Input: x = 120\n        Output: 21\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        if x == 0:\n            return 0\n        if x < 0:\n            sign = -1\n            x = -x\n        else:\n            sign = 1\n        x = str(x)\n        x = x[::-1]\n        x = int(x)\n        if sign == -1:\n            x = -x\n        if x < -2**31 or x > 2**31 - 1:\n            return 0\n        return x"
    },
    {
        "number": 8,
        "title": "String to Integer (atoi)",
        "difficulty": 1,
        "prompt": "class Solution:\n    def myAtoi(self, s: str) -> int:\n        \"\"\"\n        Implement the myAtoi(string s) function, which converts a string to a 32-bit signed integer (similar to C/C++'s atoi function).\n        The algorithm for myAtoi(string s) is as follows:\n            Read in and ignore any leading whitespace.\n            Check if the next character (if not already at the end of the string) is '-' or '+'. Read this character in if it is either. This determines if the final result is negative or positive respectively. Assume the result is positive if neither is present.\n            Read in next the characters until the next non-digit character or the end of the input is reached. The rest of the string is ignored.\n            Convert these digits into an integer (i.e. \"123\" -> 123, \"0032\" -> 32). If no digits were read, then the integer is 0. Change the sign as necessary (from step 2).\n            If the integer is out of the 32-bit signed integer range [-231, 231 - 1], then clamp the integer so that it remains in the range. Specifically, integers less than -231 should be clamped to -231, and integers greater than 231 - 1 should be clamped to 231 - 1.\n            Return the integer as the final result.\n        Note:\n            Only the space character'' is considered a whitespace character.\n            Do not ignore any characters other than the leading whitespace or the rest of the string after the digits.\n        Example 1:\n        Input: s = \"42\"\n        Output: 42\n        Explanation: The underlined characters are what is read in, the caret is the current reader position.\n        Step 1: \"42\" (no characters read because there is no leading whitespace)\n                 ^\n        Step 2: \"42\" (no characters read because there is neither a '-' nor '+')\n                 ^\n        Step 3: \"42\" (\"42\" is read in)\n                   ^\n        The parsed integer is 42.\n        Since 42 is in the range [-231, 231 - 1], the final result is 42.\n        Example 2:\n        Input: s = \"   -42\"\n        Output: -42\n        Explanation:\n        Step 1: \"   -42\" (leading whitespace is read and ignored)\n                    ^\n        Step 2: \"   -42\" ('-' is read, so the result should be negative)\n                     ^\n        Step 3: \"   -42\" (\"42\" is read in)\n                       ^\n        The parsed integer is -42.\n        Since -42 is in the range [-231, 231 - 1], the final result is -42.\n        Example 3:\n        Input: s = \"4193 with words\"\n        Output: 4193\n        Explanation:\n        Step 1: \"4193 with words\" (no characters read because there is no leading whitespace)\n                 ^\n        Step 2: \"4193 with words\" (no characters read because there is neither a '-' nor '+')\n                 ^\n        Step 3: \"4193 with words\" (\"4193\" is read in; reading stops because the next character is a non-digit)\n                     ^\n        The parsed integer is 4193.\n        Since 4193 is in the range [-231, 231 - 1], the final result is 4193.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        # Remove leading whitespace\n        s = s.lstrip()\n        if len(s) == 0:\n            return 0\n        # Check if the first character is '-' or '+'\n        sign = 1\n        if s[0] == '-':\n            sign = -1\n            s = s[1:]\n        elif s[0] == '+':\n            s = s[1:]\n        # Check if the first character is a digit\n        if len(s) == 0 or not s[0].isdigit():\n            return 0\n        # Read in the digits\n        num = 0\n        for c in s:\n            if not c.isdigit():\n                break\n            num = num * 10 + int(c)\n        # Check if the number is out of the 32-bit signed integer range\n        if sign == 1 and num > 2147483647:\n            return 2147483647\n        if sign == -1 and num > 2147483648:\n            return -2147483648\n        # Return the number\n        return sign * num"
    },
    {
        "number": 8,
        "title": "String to Integer (atoi)",
        "difficulty": 1,
        "prompt": "class Solution:\n    def myAtoi(self, s: str) -> int:\n        \"\"\"\n        Implement the myAtoi(string s) function, which converts a string to a 32-bit signed integer (similar to C/C++'s atoi function).\n        The algorithm for myAtoi(string s) is as follows:\n            Read in and ignore any leading whitespace.\n            Check if the next character (if not already at the end of the string) is '-' or '+'. Read this character in if it is either. This determines if the final result is negative or positive respectively. Assume the result is positive if neither is present.\n            Read in next the characters until the next non-digit character or the end of the input is reached. The rest of the string is ignored.\n            Convert these digits into an integer (i.e. \"123\" -> 123, \"0032\" -> 32). If no digits were read, then the integer is 0. Change the sign as necessary (from step 2).\n            If the integer is out of the 32-bit signed integer range [-231, 231 - 1], then clamp the integer so that it remains in the range. Specifically, integers less than -231 should be clamped to -231, and integers greater than 231 - 1 should be clamped to 231 - 1.\n            Return the integer as the final result.\n        Note:\n            Only the space character'' is considered a whitespace character.\n            Do not ignore any characters other than the leading whitespace or the rest of the string after the digits.\n        Example 1:\n        Input: s = \"42\"\n        Output: 42\n        Explanation: The underlined characters are what is read in, the caret is the current reader position.\n        Step 1: \"42\" (no characters read because there is no leading whitespace)\n                 ^\n        Step 2: \"42\" (no characters read because there is neither a '-' nor '+')\n                 ^\n        Step 3: \"42\" (\"42\" is read in)\n                   ^\n        The parsed integer is 42.\n        Since 42 is in the range [-231, 231 - 1], the final result is 42.\n        Example 2:\n        Input: s = \"   -42\"\n        Output: -42\n        Explanation:\n        Step 1: \"   -42\" (leading whitespace is read and ignored)\n                    ^\n        Step 2: \"   -42\" ('-' is read, so the result should be negative)\n                     ^\n        Step 3: \"   -42\" (\"42\" is read in)\n                       ^\n        The parsed integer is -42.\n        Since -42 is in the range [-231, 231 - 1], the final result is -42.\n        Example 3:\n        Input: s = \"4193 with words\"\n        Output: 4193\n        Explanation:\n        Step 1: \"4193 with words\" (no characters read because there is no leading whitespace)\n                 ^\n        Step 2: \"4193 with words\" (no characters read because there is neither a '-' nor '+')\n                 ^\n        Step 3: \"4193 with words\" (\"4193\" is read in; reading stops because the next character is a non-digit)\n                     ^\n        The parsed integer is 4193.\n        Since 4193 is in the range [-231, 231 - 1], the final result is 4193.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        s = s.strip()\n        if len(s) == 0:\n            return 0\n        sign = 1\n        if s[0] == '-':\n            sign = -1\n            s = s[1:]\n        elif s[0] == '+':\n            s = s[1:]\n        if len(s) == 0:\n            return 0\n        if s[0] in ['+', '-']:\n            s = s[1:]\n        if len(s) == 0:\n            return 0\n        if s[0] not in ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9']:\n            return 0\n        num = 0\n        for i in range(len(s)):\n            if s[i] not in ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9']:\n                break\n            num = num * 10 + int(s[i])\n        num = num * sign\n        if num < -2 ** 31:\n            return -2 ** 31\n        if num > 2 ** 31 - 1:\n            return 2 ** 31 - 1\n        return num"
    },
    {
        "number": 9,
        "title": "Palindrome Number",
        "difficulty": 0,
        "prompt": "class Solution:\n    def isPalindrome(self, x: int) -> bool:\n        \"\"\"\n        Given an integer x, return true if x is a palindrome, and false otherwise.\n        Example 1:\n        Input: x = 121\n        Output: true\n        Explanation: 121 reads as 121 from left to right and from right to left.\n        Example 2:\n        Input: x = -121\n        Output: false\n        Explanation: From left to right, it reads -121. From right to left, it becomes 121-. Therefore it is not a palindrome.\n        Example 3:\n        Input: x = 10\n        Output: false\n        Explanation: Reads 01 from right to left. Therefore it is not a palindrome.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        if x < 0:\n            return False\n        elif x < 10:\n            return True\n        else:\n            x_str = str(x)\n            x_str_reversed = x_str[::-1]\n            if x_str_reversed == x_str:\n                return True\n            else:\n                return False"
    },
    {
        "number": 9,
        "title": "Palindrome Number",
        "difficulty": 0,
        "prompt": "class Solution:\n    def isPalindrome(self, x: int) -> bool:\n        \"\"\"\n        Given an integer x, return true if x is a palindrome, and false otherwise.\n        Example 1:\n        Input: x = 121\n        Output: true\n        Explanation: 121 reads as 121 from left to right and from right to left.\n        Example 2:\n        Input: x = -121\n        Output: false\n        Explanation: From left to right, it reads -121. From right to left, it becomes 121-. Therefore it is not a palindrome.\n        Example 3:\n        Input: x = 10\n        Output: false\n        Explanation: Reads 01 from right to left. Therefore it is not a palindrome.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        if x < 0:\n            return False\n        elif x < 10:\n            return True\n        else:\n            x_str = str(x)\n            x_str_reversed = x_str[::-1]\n            if x_str == x_str_reversed:\n                return True\n            else:\n                return False"
    },
    {
        "number": 10,
        "title": "Regular Expression Matching",
        "difficulty": 2,
        "prompt": "class Solution:\n    def isMatch(self, s: str, p: str) -> bool:\n        \"\"\"\n        Given an input string s and a pattern p, implement regular expression matching with support for '.' and '*' where:\n            '.' Matches any single character.\u200b\u200b\u200b\u200b\n            '*' Matches zero or more of the preceding element.\n        The matching should cover the entire input string (not partial).\n        Example 1:\n        Input: s = \"aa\", p = \"a\"\n        Output: false\n        Explanation: \"a\" does not match the entire string \"aa\".\n        Example 2:\n        Input: s = \"aa\", p = \"a*\"\n        Output: true\n        Explanation: '*' means zero or more of the preceding element, 'a'. Therefore, by repeating 'a' once, it becomes \"aa\".\n        Example 3:\n        Input: s = \"ab\", p = \".*\"\n        Output: true\n        Explanation: \".*\" means \"zero or more (*) of any character (.)\".\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        # 1. \u52a8\u6001\u89c4\u5212\n        # dp[i][j] \u8868\u793a s[:i] \u548c p[:j] \u662f\u5426\u5339\u914d\n        # dp[i][j] = dp[i - 1][j - 1] if p[j - 1] in {s[i - 1], '.'}\n        # dp[i][j] = dp[i - 1][j] if p[j - 1] == '*' and dp[i][j - 2]\n        # dp[i][j] = False if p[j - 1]!= '*' and dp[i - 1][j - 1] == False\n        # 2. \u52a8\u6001\u89c4\u5212\u4f18\u5316\n        # \u5982\u679c p[j - 1]!= '*' \u5e76\u4e14 dp[i - 1][j - 1] == False, \u5219 dp[i][j] = False\n        # \u5982\u679c p[j - 1] == '*' \u5e76\u4e14 dp[i][j - 2] == True, \u5219 dp[i][j] = True\n        # \u5982\u679c p[j"
    },
    {
        "number": 10,
        "title": "Regular Expression Matching",
        "difficulty": 2,
        "prompt": "class Solution:\n    def isMatch(self, s: str, p: str) -> bool:\n        \"\"\"\n        Given an input string s and a pattern p, implement regular expression matching with support for '.' and '*' where:\n            '.' Matches any single character.\u200b\u200b\u200b\u200b\n            '*' Matches zero or more of the preceding element.\n        The matching should cover the entire input string (not partial).\n        Example 1:\n        Input: s = \"aa\", p = \"a\"\n        Output: false\n        Explanation: \"a\" does not match the entire string \"aa\".\n        Example 2:\n        Input: s = \"aa\", p = \"a*\"\n        Output: true\n        Explanation: '*' means zero or more of the preceding element, 'a'. Therefore, by repeating 'a' once, it becomes \"aa\".\n        Example 3:\n        Input: s = \"ab\", p = \".*\"\n        Output: true\n        Explanation: \".*\" means \"zero or more (*) of any character (.)\".\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        if not p:\n            return not s"
    },
    {
        "number": 11,
        "title": "Container With Most Water",
        "difficulty": 1,
        "prompt": "class Solution:\n    def maxArea(self, height: List[int]) -> int:\n        \"\"\"\n        You are given an integer array height of length n. There are n vertical lines drawn such that the two endpoints of the ith line are (i, 0) and (i, height[i]).\n        Find two lines that together with the x-axis form a container, such that the container contains the most water.\n        Return the maximum amount of water a container can store.\n        Notice that you may not slant the container.\n        Example 1:\n        Input: height = [1,8,6,2,5,4,8,3,7]\n        Output: 49\n        Explanation: The above vertical lines are represented by array [1,8,6,2,5,4,8,3,7]. In this case, the max area of water (blue section) the container can contain is 49.\n        Example 2:\n        Input: height = [1,1]\n        Output: 1\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        # two pointers\n        # O(n) time\n        # O(1) space\n        left = 0\n        right = len(height) - 1\n        max_area = 0\n        while left < right:\n            max_area = max(max_area, min(height[left], height[right]) * (right - left))\n            if height[left] < height[right]:\n                left += 1\n            else:\n                right -= 1\n        return max_area"
    },
    {
        "number": 11,
        "title": "Container With Most Water",
        "difficulty": 1,
        "prompt": "class Solution:\n    def maxArea(self, height: List[int]) -> int:\n        \"\"\"\n        You are given an integer array height of length n. There are n vertical lines drawn such that the two endpoints of the ith line are (i, 0) and (i, height[i]).\n        Find two lines that together with the x-axis form a container, such that the container contains the most water.\n        Return the maximum amount of water a container can store.\n        Notice that you may not slant the container.\n        Example 1:\n        Input: height = [1,8,6,2,5,4,8,3,7]\n        Output: 49\n        Explanation: The above vertical lines are represented by array [1,8,6,2,5,4,8,3,7]. In this case, the max area of water (blue section) the container can contain is 49.\n        Example 2:\n        Input: height = [1,1]\n        Output: 1\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        # two pointers\n        # left and right\n        # move the pointer that is lower\n        # if the left is lower, move the left\n        # if the right is lower, move the right\n        # if the left is higher, move the left\n        # if the right is higher, move the right\n        # if the left is higher, move the left\n        # if the right is higher, move the right\n        # if the left is higher, move the left\n        # if the right is higher, move the right\n        # if the left is higher, move the left\n        # if the right is higher, move the right\n        # if the left is higher, move the left\n        # if the right is higher, move the right\n        # if the left is higher, move the left\n        # if the right is higher, move the right\n        # if the left is higher, move the left\n        # if the right is higher, move the right\n        # if the left is higher, move the left\n        # if the right is higher, move the right\n        # if the left is higher, move the left\n        # if the right is higher, move the right\n        # if the left is higher, move the left\n        # if the right is higher, move the right\n        # if the left is higher, move the left\n        # if the"
    },
    {
        "number": 12,
        "title": "Integer to Roman",
        "difficulty": 1,
        "prompt": "class Solution:\n    def intToRoman(self, num: int) -> str:\n        \"\"\"\n        Roman numerals are represented by seven different symbols: I, V, X, L, C, D and M.\n        Symbol       Value\n        I             1\n        V             5\n        X             10\n        L             50\n        C             100\n        D             500\n        M             1000\n        For example, 2 is written as II in Roman numeral, just two one's added together. 12 is written as XII, which is simply X + II. The number 27 is written as XXVII, which is XX + V + II.\n        Roman numerals are usually written largest to smallest from left to right. However, the numeral for four is not IIII. Instead, the number four is written as IV. Because the one is before the five we subtract it making four. The same principle applies to the number nine, which is written as IX. There are six instances where subtraction is used:\n            I can be placed before V (5) and X (10) to make 4 and 9. \n            X can be placed before L (50) and C (100) to make 40 and 90. \n            C can be placed before D (500) and M (1000) to make 400 and 900.\n        Given an integer, convert it to a roman numeral.\n        Example 1:\n        Input: num = 3\n        Output: \"III\"\n        Explanation: 3 is represented as 3 ones.\n        Example 2:\n        Input: num = 58\n        Output: \"LVIII\"\n        Explanation: L = 50, V = 5, III = 3.\n        Example 3:\n        Input: num = 1994\n        Output: \"MCMXCIV\"\n        Explanation: M = 1000, CM = 900, XC = 90 and IV = 4.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        # Roman numerals are usually written largest to smallest from left to right.\n        # However, the numeral for four is not IIII. Instead, the number four is written as IV.\n        # Because the one is before the five we subtract it making four.\n        # The same principle applies to the number nine, which is written as IX.\n        # There are six instances where subtraction is used:\n        # I can be placed before V (5) and X (10) to make 4 and 9.\n        # X can be placed before L (50) and C (100) to make 40 and 90.\n        # C can be placed before D (500) and M (1000) to make 400 and 900.\n        # Given an integer, convert it to a roman numeral.\n        # Example 1:\n        # Input: num = 3\n        # Output: \"III\"\n        # Example 2:\n        # Input: num = 58\n        # Output: \"LVIII\"\n        # Explanation: L = 50, V = 5, III = 3.\n        # Example 3:\n        # Input: num = 1994\n        # Output: \"MCMXCIV\"\n        # Explanation: M = 1000, CM = 900, XC = 90 and IV = 4.\n        # Solution:\n        # 1. Convert the number to a string"
    },
    {
        "number": 12,
        "title": "Integer to Roman",
        "difficulty": 1,
        "prompt": "class Solution:\n    def intToRoman(self, num: int) -> str:\n        \"\"\"\n        Roman numerals are represented by seven different symbols: I, V, X, L, C, D and M.\n        Symbol       Value\n        I             1\n        V             5\n        X             10\n        L             50\n        C             100\n        D             500\n        M             1000\n        For example, 2 is written as II in Roman numeral, just two one's added together. 12 is written as XII, which is simply X + II. The number 27 is written as XXVII, which is XX + V + II.\n        Roman numerals are usually written largest to smallest from left to right. However, the numeral for four is not IIII. Instead, the number four is written as IV. Because the one is before the five we subtract it making four. The same principle applies to the number nine, which is written as IX. There are six instances where subtraction is used:\n            I can be placed before V (5) and X (10) to make 4 and 9. \n            X can be placed before L (50) and C (100) to make 40 and 90. \n            C can be placed before D (500) and M (1000) to make 400 and 900.\n        Given an integer, convert it to a roman numeral.\n        Example 1:\n        Input: num = 3\n        Output: \"III\"\n        Explanation: 3 is represented as 3 ones.\n        Example 2:\n        Input: num = 58\n        Output: \"LVIII\"\n        Explanation: L = 50, V = 5, III = 3.\n        Example 3:\n        Input: num = 1994\n        Output: \"MCMXCIV\"\n        Explanation: M = 1000, CM = 900, XC = 90 and IV = 4.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        # Solution 1:\n        # Roman numerals are usually written largest to smallest from left to right.\n        # However, the numeral for four is not IIII. Instead, the number four is written as IV.\n        # Because the one is before the five we subtract it making four.\n        # The same principle applies to the number nine, which is written as IX.\n        # There are six instances where subtraction is used:\n        # I can be placed before V (5) and X (10) to make 4 and 9.\n        # X can be placed before L (50) and C (100) to make 40 and 90.\n        # C can be placed before D (500) and M (1000) to make 400 and 900.\n        # Solution 1:\n        # Time: O(1)\n        # Space: O(1)\n        # roman_dict = {1000: 'M', 900: 'CM', 500: 'D', 400: 'CD', 100: 'C', 90: 'XC', 50: 'L', 40: 'XL', 10: 'X', 9: 'IX', 5: 'V', 4: 'IV', 1: 'I'}\n        # roman_num = ''\n        # for key in roman_dict.keys():\n        #     while num >= key:\n        #         roman_"
    },
    {
        "number": 13,
        "title": "Roman to Integer",
        "difficulty": 0,
        "prompt": "class Solution:\n    def romanToInt(self, s: str) -> int:\n        \"\"\"\n        Roman numerals are represented by seven different symbols: I, V, X, L, C, D and M.\n        Symbol       Value\n        I             1\n        V             5\n        X             10\n        L             50\n        C             100\n        D             500\n        M             1000\n        For example, 2 is written as II in Roman numeral, just two ones added together. 12 is written as XII, which is simply X + II. The number 27 is written as XXVII, which is XX + V + II.\n        Roman numerals are usually written largest to smallest from left to right. However, the numeral for four is not IIII. Instead, the number four is written as IV. Because the one is before the five we subtract it making four. The same principle applies to the number nine, which is written as IX. There are six instances where subtraction is used:\n            I can be placed before V (5) and X (10) to make 4 and 9. \n            X can be placed before L (50) and C (100) to make 40 and 90. \n            C can be placed before D (500) and M (1000) to make 400 and 900.\n        Given a roman numeral, convert it to an integer.\n        Example 1:\n        Input: s = \"III\"\n        Output: 3\n        Explanation: III = 3.\n        Example 2:\n        Input: s = \"LVIII\"\n        Output: 58\n        Explanation: L = 50, V= 5, III = 3.\n        Example 3:\n        Input: s = \"MCMXCIV\"\n        Output: 1994\n        Explanation: M = 1000, CM = 900, XC = 90 and IV = 4.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        # I can be placed before V (5) and X (10) to make 4 and 9.\n        # X can be placed before L (50) and C (100) to make 40 and 90.\n        # C can be placed before D (500) and M (1000) to make 400 and 900.\n        # https://leetcode.com/problems/roman-to-integer/discuss/1548/Simple-Python-solution-with-explanation\n        roman = {'I': 1, 'V': 5, 'X': 10, 'L': 50, 'C': 100, 'D': 500, 'M': 1000}\n        z = 0\n        for i in range(0, len(s) - 1):\n            if roman[s[i]] < roman[s[i + 1]]:\n                z -= roman[s[i]]\n            else:\n                z += roman[s[i]]\n        return z + roman[s[-1]]"
    },
    {
        "number": 13,
        "title": "Roman to Integer",
        "difficulty": 0,
        "prompt": "class Solution:\n    def romanToInt(self, s: str) -> int:\n        \"\"\"\n        Roman numerals are represented by seven different symbols: I, V, X, L, C, D and M.\n        Symbol       Value\n        I             1\n        V             5\n        X             10\n        L             50\n        C             100\n        D             500\n        M             1000\n        For example, 2 is written as II in Roman numeral, just two ones added together. 12 is written as XII, which is simply X + II. The number 27 is written as XXVII, which is XX + V + II.\n        Roman numerals are usually written largest to smallest from left to right. However, the numeral for four is not IIII. Instead, the number four is written as IV. Because the one is before the five we subtract it making four. The same principle applies to the number nine, which is written as IX. There are six instances where subtraction is used:\n            I can be placed before V (5) and X (10) to make 4 and 9. \n            X can be placed before L (50) and C (100) to make 40 and 90. \n            C can be placed before D (500) and M (1000) to make 400 and 900.\n        Given a roman numeral, convert it to an integer.\n        Example 1:\n        Input: s = \"III\"\n        Output: 3\n        Explanation: III = 3.\n        Example 2:\n        Input: s = \"LVIII\"\n        Output: 58\n        Explanation: L = 50, V= 5, III = 3.\n        Example 3:\n        Input: s = \"MCMXCIV\"\n        Output: 1994\n        Explanation: M = 1000, CM = 900, XC = 90 and IV = 4.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        roman_dict = {\n            \"I\": 1,\n            \"V\": 5,\n            \"X\": 10,\n            \"L\": 50,\n            \"C\": 100,\n            \"D\": 500,\n            \"M\": 1000\n        }\n        result = 0\n        for i in range(len(s) - 1):\n            if roman_dict[s[i]] < roman_dict[s[i + 1]]:\n                result -= roman_dict[s[i]]\n            else:\n                result += roman_dict[s[i]]\n        result += roman_dict[s[-1]]\n        return result"
    },
    {
        "number": 14,
        "title": "Longest Common Prefix",
        "difficulty": 0,
        "prompt": "class Solution:\n    def longestCommonPrefix(self, strs: List[str]) -> str:\n        \"\"\"\n        Write a function to find the longest common prefix string amongst an array of strings.\n        If there is no common prefix, return an empty string \"\".\n        Example 1:\n        Input: strs = [\"flower\",\"flow\",\"flight\"]\n        Output: \"fl\"\n        Example 2:\n        Input: strs = [\"dog\",\"racecar\",\"car\"]\n        Output: \"\"\n        Explanation: There is no common prefix among the input strings.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        if len(strs) == 0:\n            return \"\"\n        if len(strs) == 1:\n            return strs[0]\n        if len(strs) == 2:\n            if strs[0] == strs[1]:\n                return strs[0]\n            else:\n                return \"\"\n        \n        strs.sort()\n        prefix = \"\"\n        for i in range(len(strs[0])):\n            if strs[0][i] == strs[-1][i]:\n                prefix += strs[0][i]\n            else:\n                break\n        return prefix\n<|endoftext|>"
    },
    {
        "number": 14,
        "title": "Longest Common Prefix",
        "difficulty": 0,
        "prompt": "class Solution:\n    def longestCommonPrefix(self, strs: List[str]) -> str:\n        \"\"\"\n        Write a function to find the longest common prefix string amongst an array of strings.\n        If there is no common prefix, return an empty string \"\".\n        Example 1:\n        Input: strs = [\"flower\",\"flow\",\"flight\"]\n        Output: \"fl\"\n        Example 2:\n        Input: strs = [\"dog\",\"racecar\",\"car\"]\n        Output: \"\"\n        Explanation: There is no common prefix among the input strings.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        if len(strs) == 0:\n            return \"\"\n        if len(strs) == 1:\n            return strs[0]\n        \n        strs.sort()\n        prefix = strs[0]\n        for i in range(1, len(strs)):\n            while strs[i].find(prefix)!= 0:\n                prefix = prefix[:-1]\n                if len(prefix) == 0:\n                    return \"\"\n        return prefix\n<|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>"
    },
    {
        "number": 15,
        "title": "3Sum",
        "difficulty": 1,
        "prompt": "class Solution:\n    def threeSum(self, nums: List[int]) -> List[List[int]]:\n        \"\"\"\n        Given an integer array nums, return all the triplets [nums[i], nums[j], nums[k]] such that i!= j, i!= k, and j!= k, and nums[i] + nums[j] + nums[k] == 0.\n        Notice that the solution set must not contain duplicate triplets.\n        Example 1:\n        Input: nums = [-1,0,1,2,-1,-4]\n        Output: [[-1,-1,2],[-1,0,1]]\n        Explanation: \n        nums[0] + nums[1] + nums[2] = (-1) + 0 + 1 = 0.\n        nums[1] + nums[2] + nums[4] = 0 + 1 + (-1) = 0.\n        nums[0] + nums[3] + nums[4] = (-1) + 2 + (-1) = 0.\n        The distinct triplets are [-1,0,1] and [-1,-1,2].\n        Notice that the order of the output and the order of the triplets does not matter.\n        Example 2:\n        Input: nums = [0,1,1]\n        Output: []\n        Explanation: The only possible triplet does not sum up to 0.\n        Example 3:\n        Input: nums = [0,0,0]\n        Output: [[0,0,0]]\n        Explanation: The only possible triplet sums up to 0.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        # Solution 1:\n        # O(n^2)\n        # res = []\n        # nums.sort()\n        # for i in range(len(nums) - 2):\n        #     if i > 0 and nums[i] == nums[i - 1]:\n        #         continue\n        #     l, r = i + 1, len(nums) - 1\n        #     while l < r:\n        #         s = nums[i] + nums[l] + nums[r]\n        #         if s < 0:\n        #             l += 1\n        #         elif s > 0:\n        #             r -= 1\n        #         else:\n        #             res.append([nums[i], nums[l], nums[r]])\n        #             while l < r and nums[l] == nums[l + 1]:\n        #                 l += 1\n        #             while l < r and nums[r] == nums[r - 1]:\n        #                 r -= 1\n        #             l += 1\n        #             r -= 1\n        # return res"
    },
    {
        "number": 15,
        "title": "3Sum",
        "difficulty": 1,
        "prompt": "class Solution:\n    def threeSum(self, nums: List[int]) -> List[List[int]]:\n        \"\"\"\n        Given an integer array nums, return all the triplets [nums[i], nums[j], nums[k]] such that i!= j, i!= k, and j!= k, and nums[i] + nums[j] + nums[k] == 0.\n        Notice that the solution set must not contain duplicate triplets.\n        Example 1:\n        Input: nums = [-1,0,1,2,-1,-4]\n        Output: [[-1,-1,2],[-1,0,1]]\n        Explanation: \n        nums[0] + nums[1] + nums[2] = (-1) + 0 + 1 = 0.\n        nums[1] + nums[2] + nums[4] = 0 + 1 + (-1) = 0.\n        nums[0] + nums[3] + nums[4] = (-1) + 2 + (-1) = 0.\n        The distinct triplets are [-1,0,1] and [-1,-1,2].\n        Notice that the order of the output and the order of the triplets does not matter.\n        Example 2:\n        Input: nums = [0,1,1]\n        Output: []\n        Explanation: The only possible triplet does not sum up to 0.\n        Example 3:\n        Input: nums = [0,0,0]\n        Output: [[0,0,0]]\n        Explanation: The only possible triplet sums up to 0.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        nums.sort()\n        res = []\n        for i in range(len(nums) - 2):\n            if i > 0 and nums[i] == nums[i - 1]:\n                continue\n            l, r = i + 1, len(nums) - 1\n            while l < r:\n                s = nums[i] + nums[l] + nums[r]\n                if s < 0:\n                    l += 1\n                elif s > 0:\n                    r -= 1\n                else:\n                    res.append([nums[i], nums[l], nums[r]])\n                    while l < r and nums[l] == nums[l + 1]:\n                        l += 1\n                    while l < r and nums[r] == nums[r - 1]:\n                        r -= 1\n                    l += 1\n                    r -= 1\n        return res"
    },
    {
        "number": 16,
        "title": "3Sum Closest",
        "difficulty": 1,
        "prompt": "class Solution:\n    def threeSumClosest(self, nums: List[int], target: int) -> int:\n        \"\"\"\n        Given an integer array nums of length n and an integer target, find three integers in nums such that the sum is closest to target.\n        Return the sum of the three integers.\n        You may assume that each input would have exactly one solution.\n        Example 1:\n        Input: nums = [-1,2,1,-4], target = 1\n        Output: 2\n        Explanation: The sum that is closest to the target is 2. (-1 + 2 + 1 = 2).\n        Example 2:\n        Input: nums = [0,0,0], target = 1\n        Output: 0\n        Explanation: The sum that is closest to the target is 0. (0 + 0 + 0 = 0).\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        nums.sort()\n        n = len(nums)\n        res = nums[0] + nums[1] + nums[2]\n        for i in range(n - 2):\n            j, k = i + 1, n - 1\n            while j < k:\n                s = nums[i] + nums[j] + nums[k]\n                if s == target:\n                    return target\n                if abs(s - target) < abs(res - target):\n                    res = s\n                if s < target:\n                    j += 1\n                else:\n                    k -= 1\n        return res"
    },
    {
        "number": 16,
        "title": "3Sum Closest",
        "difficulty": 1,
        "prompt": "class Solution:\n    def threeSumClosest(self, nums: List[int], target: int) -> int:\n        \"\"\"\n        Given an integer array nums of length n and an integer target, find three integers in nums such that the sum is closest to target.\n        Return the sum of the three integers.\n        You may assume that each input would have exactly one solution.\n        Example 1:\n        Input: nums = [-1,2,1,-4], target = 1\n        Output: 2\n        Explanation: The sum that is closest to the target is 2. (-1 + 2 + 1 = 2).\n        Example 2:\n        Input: nums = [0,0,0], target = 1\n        Output: 0\n        Explanation: The sum that is closest to the target is 0. (0 + 0 + 0 = 0).\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        nums.sort()\n        res = sum(nums[:3])\n        for i in range(len(nums)-2):\n            if i > 0 and nums[i] == nums[i-1]:\n                continue\n            l, r = i+1, len(nums)-1\n            while l < r:\n                s = nums[i] + nums[l] + nums[r]\n                if s == target:\n                    return s\n                if abs(s-target) < abs(res-target):\n                    res = s\n                if s < target:\n                    l += 1\n                elif s > target:\n                    r -= 1\n        return res\n<|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>"
    },
    {
        "number": 17,
        "title": "Letter Combinations of a Phone Number",
        "difficulty": 1,
        "prompt": "class Solution:\n    def letterCombinations(self, digits: str) -> List[str]:\n        \"\"\"\n        Given a string containing digits from 2-9 inclusive, return all possible letter combinations that the number could represent. Return the answer in any order.\n        A mapping of digits to letters (just like on the telephone buttons) is given below. Note that 1 does not map to any letters.\n        Example 1:\n        Input: digits = \"23\"\n        Output: [\"ad\",\"ae\",\"af\",\"bd\",\"be\",\"bf\",\"cd\",\"ce\",\"cf\"]\n        Example 2:\n        Input: digits = \"\"\n        Output: []\n        Example 3:\n        Input: digits = \"2\"\n        Output: [\"a\",\"b\",\"c\"]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        if not digits:\n            return []\n        \n        phone = {\n            '2': ['a', 'b', 'c'],\n            '3': ['d', 'e', 'f'],\n            '4': ['g', 'h', 'i'],\n            '5': ['j', 'k', 'l'],\n            '6': ['m', 'n', 'o'],\n            '7': ['p', 'q', 'r','s'],\n            '8': ['t', 'u', 'v'],\n            '9': ['w', 'x', 'y', 'z']\n        }\n        \n        def backtrack(combination, next_digits):\n            # if there is no more digits to check\n            if len(next_digits) == 0:\n                # the combination is done\n                output.append(combination)\n            # if there are still digits to check\n            else:\n                # iterate over all letters which map \n                # the next available digit\n                for letter in phone[next_digits[0]]:\n                    # append the current letter to the combination\n                    # and proceed to the next digits\n                    backtrack(combination + letter, next_digits[1:])\n                    \n        output = []\n        backtrack('', digits)\n"
    },
    {
        "number": 17,
        "title": "Letter Combinations of a Phone Number",
        "difficulty": 1,
        "prompt": "class Solution:\n    def letterCombinations(self, digits: str) -> List[str]:\n        \"\"\"\n        Given a string containing digits from 2-9 inclusive, return all possible letter combinations that the number could represent. Return the answer in any order.\n        A mapping of digits to letters (just like on the telephone buttons) is given below. Note that 1 does not map to any letters.\n        Example 1:\n        Input: digits = \"23\"\n        Output: [\"ad\",\"ae\",\"af\",\"bd\",\"be\",\"bf\",\"cd\",\"ce\",\"cf\"]\n        Example 2:\n        Input: digits = \"\"\n        Output: []\n        Example 3:\n        Input: digits = \"2\"\n        Output: [\"a\",\"b\",\"c\"]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        if not digits:\n            return []\n        \n        phone = {'2': ['a', 'b', 'c'],\n                 '3': ['d', 'e', 'f'],\n                 '4': ['g', 'h', 'i'],\n                 '5': ['j', 'k', 'l'],\n                 '6': ['m', 'n', 'o'],\n                 '7': ['p', 'q', 'r','s'],\n                 '8': ['t', 'u', 'v'],\n                 '9': ['w', 'x', 'y', 'z']}\n        \n        def backtrack(combination, next_digits):\n            # if there is no more digits to check\n            if len(next_digits) == 0:\n                # the combination is done\n                output.append(combination)\n            # if there are still digits to check\n            else:\n                # iterate over all letters which map \n                # the next available digit\n                for letter in phone[next_digits[0]]:\n                    # append the current letter to the combination\n                    # and proceed to the next digits\n                    backtrack(combination + letter, next_digits[1:])\n                    \n        output = []\n        backtrack('', digits)\n        return output\n"
    },
    {
        "number": 18,
        "title": "4Sum",
        "difficulty": 1,
        "prompt": "class Solution:\n    def fourSum(self, nums: List[int], target: int) -> List[List[int]]:\n        \"\"\"\n        Given an array nums of n integers, return an array of all the unique quadruplets [nums[a], nums[b], nums[c], nums[d]] such that:\n            0 <= a, b, c, d < n\n            a, b, c, and d are distinct.\n            nums[a] + nums[b] + nums[c] + nums[d] == target\n        You may return the answer in any order.\n        Example 1:\n        Input: nums = [1,0,-1,0,-2,2], target = 0\n        Output: [[-2,-1,1,2],[-2,0,0,2],[-1,0,0,1]]\n        Example 2:\n        Input: nums = [2,2,2,2,2], target = 8\n        Output: [[2,2,2,2]]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        nums.sort()\n        n = len(nums)\n        res = []\n        for i in range(n - 3):\n            if i > 0 and nums[i] == nums[i - 1]:\n                continue\n            for j in range(i + 1, n - 2):\n                if j > i + 1 and nums[j] == nums[j - 1]:\n                    continue\n                left = j + 1\n                right = n - 1\n                while left < right:\n                    total = nums[i] + nums[j] + nums[left] + nums[right]\n                    if total < target:\n                        left += 1\n                    elif total > target:\n                        right -= 1\n                    else:\n                        res.append([nums[i], nums[j], nums[left], nums[right]])\n                        while left < right and nums[left] == nums[left + 1]:\n                            left += 1\n                        while left < right and nums[right] == nums[right - 1]:\n                            right -= 1\n                        left += 1\n                        right -= 1\n        return res"
    },
    {
        "number": 18,
        "title": "4Sum",
        "difficulty": 1,
        "prompt": "class Solution:\n    def fourSum(self, nums: List[int], target: int) -> List[List[int]]:\n        \"\"\"\n        Given an array nums of n integers, return an array of all the unique quadruplets [nums[a], nums[b], nums[c], nums[d]] such that:\n            0 <= a, b, c, d < n\n            a, b, c, and d are distinct.\n            nums[a] + nums[b] + nums[c] + nums[d] == target\n        You may return the answer in any order.\n        Example 1:\n        Input: nums = [1,0,-1,0,-2,2], target = 0\n        Output: [[-2,-1,1,2],[-2,0,0,2],[-1,0,0,1]]\n        Example 2:\n        Input: nums = [2,2,2,2,2], target = 8\n        Output: [[2,2,2,2]]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        nums.sort()\n        result = []\n        for i in range(len(nums) - 3):\n            if i > 0 and nums[i] == nums[i - 1]:\n                continue\n            for j in range(i + 1, len(nums) - 2):\n                if j > i + 1 and nums[j] == nums[j - 1]:\n                    continue\n                left, right = j + 1, len(nums) - 1\n                while left < right:\n                    total = nums[i] + nums[j] + nums[left] + nums[right]\n                    if total < target:\n                        left += 1\n                    elif total > target:\n                        right -= 1\n                    else:\n                        result.append([nums[i], nums[j], nums[left], nums[right]])\n                        while left < right and nums[left] == nums[left + 1]:\n                            left += 1\n                        while left < right and nums[right] == nums[right - 1]:\n                            right -= 1\n                        left += 1\n                        right -= 1\n        return result"
    },
    {
        "number": 19,
        "title": "Remove Nth Node From End of List",
        "difficulty": 1,
        "prompt": "class Solution:\n    def removeNthFromEnd(self, head: Optional[ListNode], n: int) -> Optional[ListNode]:\n        \"\"\"\n        Given the head of a linked list, remove the nth node from the end of the list and return its head.\n        Example 1:\n        Input: head = [1,2,3,4,5], n = 2\n        Output: [1,2,3,5]\n        Example 2:\n        Input: head = [1], n = 1\n        Output: []\n        Example 3:\n        Input: head = [1,2], n = 1\n        Output: [1]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        # find the length of the list\n        length = 0\n        curr = head\n        while curr:\n            length += 1\n            curr = curr.next\n        # if the length is 1, then we can't remove anything\n        if length == 1:\n            return None\n        # if the length is 2, then we can remove the first node\n        if length == 2:\n            if n == 1:\n                return head.next\n            else:\n                return head\n        # if the length is 3, then we can remove the second node\n        if length == 3:\n            if n == 1:\n                return head.next\n            else:\n                return head.next.next\n        # if the length is 4, then we can remove the third node\n        if length == 4:\n            if n == 1:\n                return head.next.next\n            else:\n                return head.next.next.next\n        # if the length is 5, then we can remove the fourth node\n        if length == 5:\n            if n == 1:\n                return head.next.next.next\n            else:\n                return head.next.next.next.next\n        # if the length is 6, then we can remove the fifth node\n        if length == 6:\n            if n == 1:\n                return head."
    },
    {
        "number": 19,
        "title": "Remove Nth Node From End of List",
        "difficulty": 1,
        "prompt": "class Solution:\n    def removeNthFromEnd(self, head: Optional[ListNode], n: int) -> Optional[ListNode]:\n        \"\"\"\n        Given the head of a linked list, remove the nth node from the end of the list and return its head.\n        Example 1:\n        Input: head = [1,2,3,4,5], n = 2\n        Output: [1,2,3,5]\n        Example 2:\n        Input: head = [1], n = 1\n        Output: []\n        Example 3:\n        Input: head = [1,2], n = 1\n        Output: [1]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        # find the length of the linked list\n        length = 0\n        curr = head\n        while curr:\n            length += 1\n            curr = curr.next\n        # if the linked list has only one node, return None\n        if length == 1:\n            return None\n        # if the linked list has only two nodes, remove the first node\n        if length == 2:\n            return head.next\n        # find the node to be removed\n        curr = head\n        for _ in range(length - n - 1):\n            curr = curr.next\n        # remove the node\n        curr.next = curr.next.next\n        return head"
    },
    {
        "number": 20,
        "title": "Valid Parentheses",
        "difficulty": 0,
        "prompt": "class Solution:\n    def isValid(self, s: str) -> bool:\n        \"\"\"\n        Given a string s containing just the characters '(', ')', '{', '}', '[' and ']', determine if the input string is valid.\n        An input string is valid if:\n            Open brackets must be closed by the same type of brackets.\n            Open brackets must be closed in the correct order.\n            Every close bracket has a corresponding open bracket of the same type.\n        Example 1:\n        Input: s = \"()\"\n        Output: true\n        Example 2:\n        Input: s = \"()[]{}\"\n        Output: true\n        Example 3:\n        Input: s = \"(]\"\n        Output: false\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        stack = []\n        for c in s:\n            if c in ['(', '{', '[']:\n                stack.append(c)\n            else:\n                if len(stack) == 0:\n                    return False\n                if c == ')' and stack[-1] == '(':\n                    stack.pop()\n                elif c == ']' and stack[-1] == '[':\n                    stack.pop()\n                elif c == '}' and stack[-1] == '{':\n                    stack.pop()\n                else:\n                    return False\n        if len(stack) == 0:\n            return True\n        return False"
    },
    {
        "number": 20,
        "title": "Valid Parentheses",
        "difficulty": 0,
        "prompt": "class Solution:\n    def isValid(self, s: str) -> bool:\n        \"\"\"\n        Given a string s containing just the characters '(', ')', '{', '}', '[' and ']', determine if the input string is valid.\n        An input string is valid if:\n            Open brackets must be closed by the same type of brackets.\n            Open brackets must be closed in the correct order.\n            Every close bracket has a corresponding open bracket of the same type.\n        Example 1:\n        Input: s = \"()\"\n        Output: true\n        Example 2:\n        Input: s = \"()[]{}\"\n        Output: true\n        Example 3:\n        Input: s = \"(]\"\n        Output: false\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        stack = []\n        for char in s:\n            if char in ['(', '{', '[']:\n                stack.append(char)\n            else:\n                if not stack:\n                    return False\n                if char == ')' and stack[-1]!= '(':\n                    return False\n                if char == ']' and stack[-1]!= '[':\n                    return False\n                if char == '}' and stack[-1]!= '{':\n                    return False\n                stack.pop()\n        return not stack"
    },
    {
        "number": 21,
        "title": "Merge Two Sorted Lists",
        "difficulty": 0,
        "prompt": "class Solution:\n    def mergeTwoLists(self, list1: Optional[ListNode], list2: Optional[ListNode]) -> Optional[ListNode]:\n        \"\"\"\n        You are given the heads of two sorted linked lists list1 and list2.\n        Merge the two lists in a one sorted list. The list should be made by splicing together the nodes of the first two lists.\n        Return the head of the merged linked list.\n        Example 1:\n        Input: list1 = [1,2,4], list2 = [1,3,4]\n        Output: [1,1,2,3,4,4]\n        Example 2:\n        Input: list1 = [], list2 = []\n        Output: []\n        Example 3:\n        Input: list1 = [], list2 = [0]\n        Output: [0]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        if not list1:\n            return list2\n        if not list2:\n            return list1\n        if list1.val < list2.val:\n            list1.next = self.mergeTwoLists(list1.next, list2)\n            return list1\n        else:\n            list2.next = self.mergeTwoLists(list1, list2.next)\n            return list2\n<|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>"
    },
    {
        "number": 21,
        "title": "Merge Two Sorted Lists",
        "difficulty": 0,
        "prompt": "class Solution:\n    def mergeTwoLists(self, list1: Optional[ListNode], list2: Optional[ListNode]) -> Optional[ListNode]:\n        \"\"\"\n        You are given the heads of two sorted linked lists list1 and list2.\n        Merge the two lists in a one sorted list. The list should be made by splicing together the nodes of the first two lists.\n        Return the head of the merged linked list.\n        Example 1:\n        Input: list1 = [1,2,4], list2 = [1,3,4]\n        Output: [1,1,2,3,4,4]\n        Example 2:\n        Input: list1 = [], list2 = []\n        Output: []\n        Example 3:\n        Input: list1 = [], list2 = [0]\n        Output: [0]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        if not list1:\n            return list2\n        if not list2:\n            return list1\n        if list1.val <= list2.val:\n            head = list1\n            head.next = self.mergeTwoLists(list1.next, list2)\n        else:\n            head = list2\n            head.next = self.mergeTwoLists(list1, list2.next)\n        return head\n<|endoftext|>"
    },
    {
        "number": 22,
        "title": "Generate Parentheses",
        "difficulty": 1,
        "prompt": "class Solution:\n    def generateParenthesis(self, n: int) -> List[str]:\n        \"\"\"\n        Given n pairs of parentheses, write a function to generate all combinations of well-formed parentheses.\n        Example 1:\n        Input: n = 3\n        Output: [\"((()))\",\"(()())\",\"(())()\",\"()(())\",\"()()()\"]\n        Example 2:\n        Input: n = 1\n        Output: [\"()\"]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        res = []\n        self.helper(n, n, \"\", res)\n        return res"
    },
    {
        "number": 22,
        "title": "Generate Parentheses",
        "difficulty": 1,
        "prompt": "class Solution:\n    def generateParenthesis(self, n: int) -> List[str]:\n        \"\"\"\n        Given n pairs of parentheses, write a function to generate all combinations of well-formed parentheses.\n        Example 1:\n        Input: n = 3\n        Output: [\"((()))\",\"(()())\",\"(())()\",\"()(())\",\"()()()\"]\n        Example 2:\n        Input: n = 1\n        Output: [\"()\"]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        self.res = []\n        self.helper(n, n, '')\n        return self.res"
    },
    {
        "number": 23,
        "title": "Merge k Sorted Lists",
        "difficulty": 2,
        "prompt": "class Solution:\n    def mergeKLists(self, lists: List[Optional[ListNode]]) -> Optional[ListNode]:\n        \"\"\"\n        You are given an array of k linked-lists lists, each linked-list is sorted in ascending order.\n        Merge all the linked-lists into one sorted linked-list and return it.\n        Example 1:\n        Input: lists = [[1,4,5],[1,3,4],[2,6]]\n        Output: [1,1,2,3,4,4,5,6]\n        Explanation: The linked-lists are:\n        [\n          1->4->5,\n          1->3->4,\n          2->6\n        ]\n        merging them into one sorted list:\n        1->1->2->3->4->4->5->6\n        Example 2:\n        Input: lists = []\n        Output: []\n        Example 3:\n        Input: lists = [[]]\n        Output: []\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        if not lists:\n            return None\n        if len(lists) == 1:\n            return lists[0]\n        mid = len(lists) // 2\n        left = self.mergeKLists(lists[:mid])\n        right = self.mergeKLists(lists[mid:])\n        return self.merge(left, right)"
    },
    {
        "number": 23,
        "title": "Merge k Sorted Lists",
        "difficulty": 2,
        "prompt": "class Solution:\n    def mergeKLists(self, lists: List[Optional[ListNode]]) -> Optional[ListNode]:\n        \"\"\"\n        You are given an array of k linked-lists lists, each linked-list is sorted in ascending order.\n        Merge all the linked-lists into one sorted linked-list and return it.\n        Example 1:\n        Input: lists = [[1,4,5],[1,3,4],[2,6]]\n        Output: [1,1,2,3,4,4,5,6]\n        Explanation: The linked-lists are:\n        [\n          1->4->5,\n          1->3->4,\n          2->6\n        ]\n        merging them into one sorted list:\n        1->1->2->3->4->4->5->6\n        Example 2:\n        Input: lists = []\n        Output: []\n        Example 3:\n        Input: lists = [[]]\n        Output: []\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        if not lists:\n            return None\n        if len(lists) == 1:\n            return lists[0]\n        mid = len(lists) // 2\n        left = self.mergeKLists(lists[:mid])\n        right = self.mergeKLists(lists[mid:])\n        return self.merge(left, right)"
    },
    {
        "number": 24,
        "title": "Swap Nodes in Pairs",
        "difficulty": 1,
        "prompt": "class Solution:\n    def swapPairs(self, head: Optional[ListNode]) -> Optional[ListNode]:\n        \"\"\"\n        Given a linked list, swap every two adjacent nodes and return its head. You must solve the problem without modifying the values in the list's nodes (i.e., only nodes themselves may be changed.)\n        Example 1:\n        Input: head = [1,2,3,4]\n        Output: [2,1,4,3]\n        Example 2:\n        Input: head = []\n        Output: []\n        Example 3:\n        Input: head = [1]\n        Output: [1]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        if not head:\n            return head\n        \n        # dummy node\n        dummy = ListNode(0)\n        dummy.next = head\n        \n        prev = dummy\n        curr = head\n        \n        while curr and curr.next:\n            # swap\n            prev.next = curr.next\n            curr.next = curr.next.next\n            prev.next.next = curr\n            \n            # move\n            prev = curr\n            curr = curr.next\n        \n        return dummy.next\n<|endoftext|>"
    },
    {
        "number": 24,
        "title": "Swap Nodes in Pairs",
        "difficulty": 1,
        "prompt": "class Solution:\n    def swapPairs(self, head: Optional[ListNode]) -> Optional[ListNode]:\n        \"\"\"\n        Given a linked list, swap every two adjacent nodes and return its head. You must solve the problem without modifying the values in the list's nodes (i.e., only nodes themselves may be changed.)\n        Example 1:\n        Input: head = [1,2,3,4]\n        Output: [2,1,4,3]\n        Example 2:\n        Input: head = []\n        Output: []\n        Example 3:\n        Input: head = [1]\n        Output: [1]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        if not head:\n            return None\n        if not head.next:\n            return head\n        \n        dummy = ListNode(0)\n        dummy.next = head\n        cur = dummy\n        while cur.next and cur.next.next:\n            first = cur.next\n            second = cur.next.next\n            cur.next = second\n            first.next = second.next\n            second.next = first\n            cur = cur.next.next\n        return dummy.next\n<|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>"
    },
    {
        "number": 25,
        "title": "Reverse Nodes in k-Group",
        "difficulty": 2,
        "prompt": "class Solution:\n    def reverseKGroup(self, head: Optional[ListNode], k: int) -> Optional[ListNode]:\n        \"\"\"\n        Given the head of a linked list, reverse the nodes of the list k at a time, and return the modified list.\n        k is a positive integer and is less than or equal to the length of the linked list. If the number of nodes is not a multiple of k then left-out nodes, in the end, should remain as it is.\n        You may not alter the values in the list's nodes, only nodes themselves may be changed.\n        Example 1:\n        Input: head = [1,2,3,4,5], k = 2\n        Output: [2,1,4,3,5]\n        Example 2:\n        Input: head = [1,2,3,4,5], k = 3\n        Output: [3,2,1,4,5]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        if k == 1:\n            return head\n        \n        def reverse(head, tail):\n            \"\"\"\n            reverse the linked list from head to tail\n            \"\"\"\n            prev = tail.next\n            p = head\n            while prev!= tail:\n                nex = p.next\n                p.next = prev\n                prev = p\n                p = nex\n            return tail, head\n        \n        dummy = ListNode(0)\n        dummy.next = head\n        pre = dummy\n        \n        while head:\n            tail = pre\n            # find the end of the k nodes\n            for i in range(k):\n                tail = tail.next\n                if not tail:\n                    return dummy.next\n            nex = tail.next\n            head, tail = reverse(head, tail)\n            # connect with the previous part\n            pre.next = head\n            tail.next = nex\n            pre = tail\n            head = tail.next\n        \n        return dummy.next\n    \n    def reverseKGroup_1(self, head: Optional[ListNode], k: int) -> Optional[ListNode]:\n        \"\"\"\n        Given the head of a linked list, reverse the nodes of the list k at a time, and return the modified list.\n        k is a positive integer and is less than or equal to the length"
    },
    {
        "number": 25,
        "title": "Reverse Nodes in k-Group",
        "difficulty": 2,
        "prompt": "class Solution:\n    def reverseKGroup(self, head: Optional[ListNode], k: int) -> Optional[ListNode]:\n        \"\"\"\n        Given the head of a linked list, reverse the nodes of the list k at a time, and return the modified list.\n        k is a positive integer and is less than or equal to the length of the linked list. If the number of nodes is not a multiple of k then left-out nodes, in the end, should remain as it is.\n        You may not alter the values in the list's nodes, only nodes themselves may be changed.\n        Example 1:\n        Input: head = [1,2,3,4,5], k = 2\n        Output: [2,1,4,3,5]\n        Example 2:\n        Input: head = [1,2,3,4,5], k = 3\n        Output: [3,2,1,4,5]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        if not head:\n            return None\n        if k == 1:\n            return head\n        \n        dummy = ListNode(0)\n        dummy.next = head\n        \n        curr = dummy\n        while True:\n            count = k\n            while count and curr:\n                curr = curr.next\n                count -= 1\n            if not curr:\n                break\n            head = curr.next\n            tail = curr\n            prev = None\n            while curr:\n                nxt = curr.next\n                curr.next = prev\n                prev = curr\n                curr = nxt\n            tail.next = head\n            tail = prev\n        return dummy.next\n<|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>"
    },
    {
        "number": 26,
        "title": "Remove Duplicates from Sorted Array",
        "difficulty": 0,
        "prompt": "class Solution:\n    def removeDuplicates(self, nums: List[int]) -> int:\n        \"\"\"\n        Given an integer array nums sorted in non-decreasing order, remove the duplicates in-place such that each unique element appears only once. The relative order of the elements should be kept the same.\n        Since it is impossible to change the length of the array in some languages, you must instead have the result be placed in the first part of the array nums. More formally, if there are k elements after removing the duplicates, then the first k elements of nums should hold the final result. It does not matter what you leave beyond the first k elements.\n        Return k after placing the final result in the first k slots of nums.\n        Do not allocate extra space for another array. You must do this by modifying the input array in-place with O(1) extra memory.\n        Custom Judge:\n        The judge will test your solution with the following code:\n        int[] nums = [...]; // Input array\n        int[] expectedNums = [...]; // The expected answer with correct length\n        int k = removeDuplicates(nums); // Calls your implementation\n        assert k == expectedNums.length;\n        for (int i = 0; i < k; i++) {\n            assert nums[i] == expectedNums[i];\n        }\n        If all assertions pass, then your solution will be accepted.\n        Example 1:\n        Input: nums = [1,1,2]\n        Output: 2, nums = [1,2,_]\n        Explanation: Your function should return k = 2, with the first two elements of nums being 1 and 2 respectively.\n        It does not matter what you leave beyond the returned k (hence they are underscores).\n        Example 2:\n        Input: nums = [0,0,1,1,1,2,2,3,3,4]\n        Output: 5, nums = [0,1,2,3,4,_,_,_,_,_]\n        Explanation: Your function should return k = 5, with the first five elements of nums being 0, 1, 2, 3, and 4 respectively.\n        It does not matter what you leave beyond the returned k (hence they are underscores).\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        # Time: O(n)\n        # Space: O(1)\n        # two pointers\n        # if len(nums) == 0:\n        #     return 0\n        # if len(nums) == 1:\n        #     return 1\n        # i = 0\n        # for j in range(1, len(nums)):\n        #     if nums[i]!= nums[j]:\n        #         i += 1\n        #         nums[i] = nums[j]\n        # return i + 1"
    },
    {
        "number": 26,
        "title": "Remove Duplicates from Sorted Array",
        "difficulty": 0,
        "prompt": "class Solution:\n    def removeDuplicates(self, nums: List[int]) -> int:\n        \"\"\"\n        Given an integer array nums sorted in non-decreasing order, remove the duplicates in-place such that each unique element appears only once. The relative order of the elements should be kept the same.\n        Since it is impossible to change the length of the array in some languages, you must instead have the result be placed in the first part of the array nums. More formally, if there are k elements after removing the duplicates, then the first k elements of nums should hold the final result. It does not matter what you leave beyond the first k elements.\n        Return k after placing the final result in the first k slots of nums.\n        Do not allocate extra space for another array. You must do this by modifying the input array in-place with O(1) extra memory.\n        Custom Judge:\n        The judge will test your solution with the following code:\n        int[] nums = [...]; // Input array\n        int[] expectedNums = [...]; // The expected answer with correct length\n        int k = removeDuplicates(nums); // Calls your implementation\n        assert k == expectedNums.length;\n        for (int i = 0; i < k; i++) {\n            assert nums[i] == expectedNums[i];\n        }\n        If all assertions pass, then your solution will be accepted.\n        Example 1:\n        Input: nums = [1,1,2]\n        Output: 2, nums = [1,2,_]\n        Explanation: Your function should return k = 2, with the first two elements of nums being 1 and 2 respectively.\n        It does not matter what you leave beyond the returned k (hence they are underscores).\n        Example 2:\n        Input: nums = [0,0,1,1,1,2,2,3,3,4]\n        Output: 5, nums = [0,1,2,3,4,_,_,_,_,_]\n        Explanation: Your function should return k = 5, with the first five elements of nums being 0, 1, 2, 3, and 4 respectively.\n        It does not matter what you leave beyond the returned k (hence they are underscores).\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        # Runtime: 36 ms\n        # Memory Usage: 13.9 MB\n        # Time complexity: O(n)\n        # Space complexity: O(1)\n        if len(nums) == 0:\n            return 0\n        i = 0\n        for j in range(1, len(nums)):\n            if nums[j]!= nums[i]:\n                i += 1\n                nums[i] = nums[j]\n        return i + 1"
    },
    {
        "number": 27,
        "title": "Remove Element",
        "difficulty": 0,
        "prompt": "class Solution:\n    def removeElement(self, nums: List[int], val: int) -> int:\n        \"\"\"\n        Given an integer array nums and an integer val, remove all occurrences of val in nums in-place. The relative order of the elements may be changed.\n        Since it is impossible to change the length of the array in some languages, you must instead have the result be placed in the first part of the array nums. More formally, if there are k elements after removing the duplicates, then the first k elements of nums should hold the final result. It does not matter what you leave beyond the first k elements.\n        Return k after placing the final result in the first k slots of nums.\n        Do not allocate extra space for another array. You must do this by modifying the input array in-place with O(1) extra memory.\n        Custom Judge:\n        The judge will test your solution with the following code:\n        int[] nums = [...]; // Input array\n        int val =...; // Value to remove\n        int[] expectedNums = [...]; // The expected answer with correct length.\n                                    // It is sorted with no values equaling val.\n        int k = removeElement(nums, val); // Calls your implementation\n        assert k == expectedNums.length;\n        sort(nums, 0, k); // Sort the first k elements of nums\n        for (int i = 0; i < actualLength; i++) {\n            assert nums[i] == expectedNums[i];\n        }\n        If all assertions pass, then your solution will be accepted.\n        Example 1:\n        Input: nums = [3,2,2,3], val = 3\n        Output: 2, nums = [2,2,_,_]\n        Explanation: Your function should return k = 2, with the first two elements of nums being 2.\n        It does not matter what you leave beyond the returned k (hence they are underscores).\n        Example 2:\n        Input: nums = [0,1,2,2,3,0,4,2], val = 2\n        Output: 5, nums = [0,1,4,0,3,_,_,_]\n        Explanation: Your function should return k = 5, with the first five elements of nums containing 0, 0, 1, 3, and 4.\n        Note that the five elements can be returned in any order.\n        It does not matter what you leave beyond the returned k (hence they are underscores).\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        # Time: O(n), space: O(1)\n        i = 0\n        for j in range(len(nums)):\n            if nums[j]!= val:\n                nums[i] = nums[j]\n                i += 1\n        return i"
    },
    {
        "number": 27,
        "title": "Remove Element",
        "difficulty": 0,
        "prompt": "class Solution:\n    def removeElement(self, nums: List[int], val: int) -> int:\n        \"\"\"\n        Given an integer array nums and an integer val, remove all occurrences of val in nums in-place. The relative order of the elements may be changed.\n        Since it is impossible to change the length of the array in some languages, you must instead have the result be placed in the first part of the array nums. More formally, if there are k elements after removing the duplicates, then the first k elements of nums should hold the final result. It does not matter what you leave beyond the first k elements.\n        Return k after placing the final result in the first k slots of nums.\n        Do not allocate extra space for another array. You must do this by modifying the input array in-place with O(1) extra memory.\n        Custom Judge:\n        The judge will test your solution with the following code:\n        int[] nums = [...]; // Input array\n        int val =...; // Value to remove\n        int[] expectedNums = [...]; // The expected answer with correct length.\n                                    // It is sorted with no values equaling val.\n        int k = removeElement(nums, val); // Calls your implementation\n        assert k == expectedNums.length;\n        sort(nums, 0, k); // Sort the first k elements of nums\n        for (int i = 0; i < actualLength; i++) {\n            assert nums[i] == expectedNums[i];\n        }\n        If all assertions pass, then your solution will be accepted.\n        Example 1:\n        Input: nums = [3,2,2,3], val = 3\n        Output: 2, nums = [2,2,_,_]\n        Explanation: Your function should return k = 2, with the first two elements of nums being 2.\n        It does not matter what you leave beyond the returned k (hence they are underscores).\n        Example 2:\n        Input: nums = [0,1,2,2,3,0,4,2], val = 2\n        Output: 5, nums = [0,1,4,0,3,_,_,_]\n        Explanation: Your function should return k = 5, with the first five elements of nums containing 0, 0, 1, 3, and 4.\n        Note that the five elements can be returned in any order.\n        It does not matter what you leave beyond the returned k (hence they are underscores).\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        # Solution 1: Two Pointers\n        # Time complexity: O(n)\n        # Space complexity: O(1)\n        # left, right = 0, len(nums) - 1\n        # while left <= right:\n        #     if nums[left] == val:\n        #         nums[left] = nums[right]\n        #         right -= 1\n        #     else:\n        #         left += 1\n        # return left"
    },
    {
        "number": 28,
        "title": "Find the Index of the First Occurrence in a String",
        "difficulty": 0,
        "prompt": "class Solution:\n    def strStr(self, haystack: str, needle: str) -> int:\n        \"\"\"\n        Given two strings needle and haystack, return the index of the first occurrence of needle in haystack, or -1 if needle is not part of haystack.\n        Example 1:\n        Input: haystack = \"sadbutsad\", needle = \"sad\"\n        Output: 0\n        Explanation: \"sad\" occurs at index 0 and 6.\n        The first occurrence is at index 0, so we return 0.\n        Example 2:\n        Input: haystack = \"leetcode\", needle = \"leeto\"\n        Output: -1\n        Explanation: \"leeto\" did not occur in \"leetcode\", so we return -1.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        if not needle:\n            return 0\n        if not haystack:\n            return -1\n        if len(needle) > len(haystack):\n            return -1\n        for i in range(len(haystack) - len(needle) + 1):\n            if haystack[i:i+len(needle)] == needle:\n                return i\n        return -1"
    },
    {
        "number": 28,
        "title": "Find the Index of the First Occurrence in a String",
        "difficulty": 0,
        "prompt": "class Solution:\n    def strStr(self, haystack: str, needle: str) -> int:\n        \"\"\"\n        Given two strings needle and haystack, return the index of the first occurrence of needle in haystack, or -1 if needle is not part of haystack.\n        Example 1:\n        Input: haystack = \"sadbutsad\", needle = \"sad\"\n        Output: 0\n        Explanation: \"sad\" occurs at index 0 and 6.\n        The first occurrence is at index 0, so we return 0.\n        Example 2:\n        Input: haystack = \"leetcode\", needle = \"leeto\"\n        Output: -1\n        Explanation: \"leeto\" did not occur in \"leetcode\", so we return -1.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        if needle == \"\":\n            return 0\n        if needle not in haystack:\n            return -1\n        for i in range(len(haystack)):\n            if haystack[i:i+len(needle)] == needle:\n                return i\n        return -1"
    },
    {
        "number": 29,
        "title": "Divide Two Integers",
        "difficulty": 1,
        "prompt": "class Solution:\n    def divide(self, dividend: int, divisor: int) -> int:\n        \"\"\"\n        Given two integers dividend and divisor, divide two integers without using multiplication, division, and mod operator.\n        The integer division should truncate toward zero, which means losing its fractional part. For example, 8.345 would be truncated to 8, and -2.7335 would be truncated to -2.\n        Return the quotient after dividing dividend by divisor.\n        Note: Assume we are dealing with an environment that could only store integers within the 32-bit signed integer range: [\u2212231, 231 \u2212 1]. For this problem, if the quotient is strictly greater than 231 - 1, then return 231 - 1, and if the quotient is strictly less than -231, then return -231.\n        Example 1:\n        Input: dividend = 10, divisor = 3\n        Output: 3\n        Explanation: 10/3 = 3.33333.. which is truncated to 3.\n        Example 2:\n        Input: dividend = 7, divisor = -3\n        Output: -2\n        Explanation: 7/-3 = -2.33333.. which is truncated to -2.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        if dividend == 0:\n            return 0\n        if divisor == 0:\n            return None\n        if divisor == 1:\n            return dividend\n        if divisor == -1:\n            if dividend == -2147483648:\n                return 2147483647\n            else:\n                return -dividend\n        sign = 1\n        if (dividend < 0 and divisor > 0) or (dividend > 0 and divisor < 0):\n            sign = -1\n        dividend = abs(dividend)\n        divisor = abs(divisor)\n        if dividend < divisor:\n            return 0\n        if dividend == divisor:\n            return sign\n        if dividend == divisor * 2:\n            return sign * 2\n        if divisor == 1:\n            return sign * (dividend // divisor)\n        if divisor == 2:\n            return sign * (dividend // divisor)\n        if divisor == 3:\n            return sign * (dividend // divisor)\n        if divisor == 4:\n            return sign * (dividend // divisor)\n        if divisor == 5:\n            return sign * (dividend // divisor)"
    },
    {
        "number": 29,
        "title": "Divide Two Integers",
        "difficulty": 1,
        "prompt": "class Solution:\n    def divide(self, dividend: int, divisor: int) -> int:\n        \"\"\"\n        Given two integers dividend and divisor, divide two integers without using multiplication, division, and mod operator.\n        The integer division should truncate toward zero, which means losing its fractional part. For example, 8.345 would be truncated to 8, and -2.7335 would be truncated to -2.\n        Return the quotient after dividing dividend by divisor.\n        Note: Assume we are dealing with an environment that could only store integers within the 32-bit signed integer range: [\u2212231, 231 \u2212 1]. For this problem, if the quotient is strictly greater than 231 - 1, then return 231 - 1, and if the quotient is strictly less than -231, then return -231.\n        Example 1:\n        Input: dividend = 10, divisor = 3\n        Output: 3\n        Explanation: 10/3 = 3.33333.. which is truncated to 3.\n        Example 2:\n        Input: dividend = 7, divisor = -3\n        Output: -2\n        Explanation: 7/-3 = -2.33333.. which is truncated to -2.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        if divisor == 0:\n            return 0\n        if dividend == 0:\n            return 0\n        sign = 1\n        if (dividend < 0 and divisor > 0) or (dividend > 0 and divisor < 0):\n            sign = -1\n        dividend = abs(dividend)\n        divisor = abs(divisor)\n        if dividend < divisor:\n            return 0\n        if dividend == divisor:\n            return sign\n        if divisor == 1:\n            return sign * dividend\n        if divisor == 2:\n            if dividend >= 2 ** 31:\n                return 2 ** 31 - 1\n            else:\n                return sign * (dividend // 2)\n        if divisor == 3:\n            if dividend >= 3 ** 31:\n                return 3 ** 31 - 1\n            else:\n                return sign * (dividend // 3)\n        if dividend >= 2 ** 31:\n            return 2 ** 31 - 1\n        if dividend < -2 ** 31:\n            return -2 ** 31\n        if divisor >= 2 ** 31:\n            return 2 ** 31 - 1\n        if divisor < -2 ** 31:\n            return -2 ** 31\n        if dividend >= 2 ** 31 - 1:\n            divid"
    },
    {
        "number": 30,
        "title": "Substring with Concatenation of All Words",
        "difficulty": 2,
        "prompt": "class Solution:\n    def findSubstring(self, s: str, words: List[str]) -> List[int]:\n        \"\"\"\n        You are given a string s and an array of strings words. All the strings of words are of the same length.\n        A concatenated substring in s is a substring that contains all the strings of any permutation of words concatenated.\n            For example, if words = [\"ab\",\"cd\",\"ef\"], then \"abcdef\", \"abefcd\", \"cdabef\", \"cdefab\", \"efabcd\", and \"efcdab\" are all concatenated strings. \"acdbef\" is not a concatenated substring because it is not the concatenation of any permutation of words.\n        Return the starting indices of all the concatenated substrings in s. You can return the answer in any order.\n        Example 1:\n        Input: s = \"barfoothefoobarman\", words = [\"foo\",\"bar\"]\n        Output: [0,9]\n        Explanation: Since words.length == 2 and words[i].length == 3, the concatenated substring has to be of length 6.\n        The substring starting at 0 is \"barfoo\". It is the concatenation of [\"bar\",\"foo\"] which is a permutation of words.\n        The substring starting at 9 is \"foobar\". It is the concatenation of [\"foo\",\"bar\"] which is a permutation of words.\n        The output order does not matter. Returning [9,0] is fine too.\n        Example 2:\n        Input: s = \"wordgoodgoodgoodbestword\", words = [\"word\",\"good\",\"best\",\"word\"]\n        Output: []\n        Explanation: Since words.length == 4 and words[i].length == 4, the concatenated substring has to be of length 16.\n        There is no substring of length 16 is s that is equal to the concatenation of any permutation of words.\n        We return an empty array.\n        Example 3:\n        Input: s = \"barfoofoobarthefoobarman\", words = [\"bar\",\"foo\",\"the\"]\n        Output: [6,9,12]\n        Explanation: Since words.length == 3 and words[i].length == 3, the concatenated substring has to be of length 9.\n        The substring starting at 6 is \"foobarthe\". It is the concatenation of [\"foo\",\"bar\",\"the\"] which is a permutation of words.\n        The substring starting at 9 is \"barthefoo\". It is the concatenation of [\"bar\",\"the\",\"foo\"] which is a permutation of words.\n        The substring starting at 12 is \"thefoobar\". It is the concatenation of [\"the\",\"foo\",\"bar\"] which is a permutation of words.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        if not words:\n            return []\n        if not s:\n            return []\n        if len(words) == 1:\n            return [i for i in range(len(s)) if s.startswith(words[0], i)]\n        l = len(words[0])\n        n = len(words)\n        m = len(s)\n        if m < l * n:\n            return []\n        words = sorted(words, key=lambda x: len(x))\n        d = {}\n        for word in words:\n            d[word] = d.get(word, 0) + 1\n        ans = []\n        for i in range(l):\n            left = i\n            right = i + l * n\n            d_copy = d.copy()\n            while right <= m:\n                word = s[left:right]\n                if word in d_copy:\n                    d_copy[word] -= 1\n                    if d_copy[word] == 0:\n                        d_copy.pop(word)\n                    left += l\n                    right += l\n                else:\n                    break\n            if not d_copy:\n                ans.append(left)\n        return ans"
    },
    {
        "number": 30,
        "title": "Substring with Concatenation of All Words",
        "difficulty": 2,
        "prompt": "class Solution:\n    def findSubstring(self, s: str, words: List[str]) -> List[int]:\n        \"\"\"\n        You are given a string s and an array of strings words. All the strings of words are of the same length.\n        A concatenated substring in s is a substring that contains all the strings of any permutation of words concatenated.\n            For example, if words = [\"ab\",\"cd\",\"ef\"], then \"abcdef\", \"abefcd\", \"cdabef\", \"cdefab\", \"efabcd\", and \"efcdab\" are all concatenated strings. \"acdbef\" is not a concatenated substring because it is not the concatenation of any permutation of words.\n        Return the starting indices of all the concatenated substrings in s. You can return the answer in any order.\n        Example 1:\n        Input: s = \"barfoothefoobarman\", words = [\"foo\",\"bar\"]\n        Output: [0,9]\n        Explanation: Since words.length == 2 and words[i].length == 3, the concatenated substring has to be of length 6.\n        The substring starting at 0 is \"barfoo\". It is the concatenation of [\"bar\",\"foo\"] which is a permutation of words.\n        The substring starting at 9 is \"foobar\". It is the concatenation of [\"foo\",\"bar\"] which is a permutation of words.\n        The output order does not matter. Returning [9,0] is fine too.\n        Example 2:\n        Input: s = \"wordgoodgoodgoodbestword\", words = [\"word\",\"good\",\"best\",\"word\"]\n        Output: []\n        Explanation: Since words.length == 4 and words[i].length == 4, the concatenated substring has to be of length 16.\n        There is no substring of length 16 is s that is equal to the concatenation of any permutation of words.\n        We return an empty array.\n        Example 3:\n        Input: s = \"barfoofoobarthefoobarman\", words = [\"bar\",\"foo\",\"the\"]\n        Output: [6,9,12]\n        Explanation: Since words.length == 3 and words[i].length == 3, the concatenated substring has to be of length 9.\n        The substring starting at 6 is \"foobarthe\". It is the concatenation of [\"foo\",\"bar\",\"the\"] which is a permutation of words.\n        The substring starting at 9 is \"barthefoo\". It is the concatenation of [\"bar\",\"the\",\"foo\"] which is a permutation of words.\n        The substring starting at 12 is \"thefoobar\". It is the concatenation of [\"the\",\"foo\",\"bar\"] which is a permutation of words.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        if not s or not words:\n            return []\n        n, m = len(s), len(words)\n        if m > n:\n            return []\n        words = sorted(words, key=lambda x: len(x))\n        res = []\n        for i in range(m):\n            words[i] = words[i] * (m // len(words[i])) + words[i][:m % len(words[i])]\n        for i in range(m):\n            words[i] = set(words[i])\n        for i in range(m):\n            words[i] = {words[i][j]: j for j in range(len(words[i]))}\n        for i in range(m - 1):\n            words[i + 1] = {j + len(words[i]): j for j in words[i + 1].keys()}\n        for i in range(n - m * len(words[0]) + 1):\n            tmp = set()\n            for j in range(m):\n                if s[i + j * len(words[0]):i + j * len(words[0]) + len(words[j])] in words[j]:\n                    tmp.add(s[i + j * len(words[0]):"
    },
    {
        "number": 31,
        "title": "Next Permutation",
        "difficulty": 1,
        "prompt": "class Solution:\n    def nextPermutation(self, nums: List[int]) -> None:\n        \"\"\"\n        Do not return anything, modify nums in-place instead.\n        A permutation of an array of integers is an arrangement of its members into a sequence or linear order.\n            For example, for arr = [1,2,3], the following are all the permutations of arr: [1,2,3], [1,3,2], [2, 1, 3], [2, 3, 1], [3,1,2], [3,2,1].\n        The next permutation of an array of integers is the next lexicographically greater permutation of its integer. More formally, if all the permutations of the array are sorted in one container according to their lexicographical order, then the next permutation of that array is the permutation that follows it in the sorted container. If such arrangement is not possible, the array must be rearranged as the lowest possible order (i.e., sorted in ascending order).\n            For example, the next permutation of arr = [1,2,3] is [1,3,2].\n            Similarly, the next permutation of arr = [2,3,1] is [3,1,2].\n            While the next permutation of arr = [3,2,1] is [1,2,3] because [3,2,1] does not have a lexicographical larger rearrangement.\n        Given an array of integers nums, find the next permutation of nums.\n        The replacement must be in place and use only constant extra memory.\n        Example 1:\n        Input: nums = [1,2,3]\n        Output: [1,3,2]\n        Example 2:\n        Input: nums = [3,2,1]\n        Output: [1,2,3]\n        Example 3:\n        Input: nums = [1,1,5]\n        Output: [1,5,1]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        # Find the first index i where nums[i] < nums[i+1]\n        # Find the first index j where nums[j] > nums[i]\n        # Swap nums[i] and nums[j]\n        # Reverse nums[i+1:]\n        # Time O(n)\n        # Space O(1)\n        i = len(nums) - 2\n        while i >= 0 and nums[i] >= nums[i+1]:\n            i -= 1\n        if i >= 0:\n            j = len(nums) - 1\n            while j >= 0 and nums[j] <= nums[i]:\n                j -= 1\n            nums[i], nums[j] = nums[j], nums[i]\n        left, right = i + 1, len(nums) - 1\n        while left < right:\n            nums[left], nums[right] = nums[right], nums[left]\n            left += 1\n            right -= 1\n        return nums"
    },
    {
        "number": 31,
        "title": "Next Permutation",
        "difficulty": 1,
        "prompt": "class Solution:\n    def nextPermutation(self, nums: List[int]) -> None:\n        \"\"\"\n        Do not return anything, modify nums in-place instead.\n        A permutation of an array of integers is an arrangement of its members into a sequence or linear order.\n            For example, for arr = [1,2,3], the following are all the permutations of arr: [1,2,3], [1,3,2], [2, 1, 3], [2, 3, 1], [3,1,2], [3,2,1].\n        The next permutation of an array of integers is the next lexicographically greater permutation of its integer. More formally, if all the permutations of the array are sorted in one container according to their lexicographical order, then the next permutation of that array is the permutation that follows it in the sorted container. If such arrangement is not possible, the array must be rearranged as the lowest possible order (i.e., sorted in ascending order).\n            For example, the next permutation of arr = [1,2,3] is [1,3,2].\n            Similarly, the next permutation of arr = [2,3,1] is [3,1,2].\n            While the next permutation of arr = [3,2,1] is [1,2,3] because [3,2,1] does not have a lexicographical larger rearrangement.\n        Given an array of integers nums, find the next permutation of nums.\n        The replacement must be in place and use only constant extra memory.\n        Example 1:\n        Input: nums = [1,2,3]\n        Output: [1,3,2]\n        Example 2:\n        Input: nums = [3,2,1]\n        Output: [1,2,3]\n        Example 3:\n        Input: nums = [1,1,5]\n        Output: [1,5,1]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        # find the first index i such that nums[i] < nums[i+1]\n        # find the first index j such that nums[j] > nums[i]\n        # swap nums[i] and nums[j]\n        # reverse nums[i+1:]\n        # reverse nums\n        # nums = [1,2,3]\n        # [1,2,3]\n        # [1,3,2]\n        # [1,3,2]\n        # [1,2,3]\n        # [1,2,3]\n        # [1,2,3]\n        # [1,2,3]\n        # [1,2,3]\n        # [1,2,3]\n        # [1,2,3]\n        # [1,2,3]\n        # [1,2,3]\n        # [1,2,3]\n        # [1,2,3]\n        # [1,2,3]\n        # [1,2,3]\n        # [1,2,3]\n        # [1,2,3]\n        # [1,2,3]\n        # [1,2,3]\n        # [1,2,3]\n        "
    },
    {
        "number": 32,
        "title": "Longest Valid Parentheses",
        "difficulty": 2,
        "prompt": "class Solution:\n    def longestValidParentheses(self, s: str) -> int:\n        \"\"\"\n        Given a string containing just the characters '(' and ')', return the length of the longest valid (well-formed) parentheses substring.\n        Example 1:\n        Input: s = \"(()\"\n        Output: 2\n        Explanation: The longest valid parentheses substring is \"()\".\n        Example 2:\n        Input: s = \")()())\"\n        Output: 4\n        Explanation: The longest valid parentheses substring is \"()()\".\n        Example 3:\n        Input: s = \"\"\n        Output: 0\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        # Solution 1: Stack\n        # O(n) time\n        # O(n) space\n        # stack = []\n        # longest = 0\n        # for i in range(len(s)):\n        #     if s[i] == '(':\n        #         stack.append(i)\n        #     else:\n        #         if len(stack) == 0:\n        #             stack.append(i)\n        #         else:\n        #             stack.pop()\n        #             if len(stack) == 0:\n        #                 longest = max(longest, i - stack[-1])\n        #             else:\n        #                 longest = max(longest, i - stack[-1])\n        # return longest"
    },
    {
        "number": 32,
        "title": "Longest Valid Parentheses",
        "difficulty": 2,
        "prompt": "class Solution:\n    def longestValidParentheses(self, s: str) -> int:\n        \"\"\"\n        Given a string containing just the characters '(' and ')', return the length of the longest valid (well-formed) parentheses substring.\n        Example 1:\n        Input: s = \"(()\"\n        Output: 2\n        Explanation: The longest valid parentheses substring is \"()\".\n        Example 2:\n        Input: s = \")()())\"\n        Output: 4\n        Explanation: The longest valid parentheses substring is \"()()\".\n        Example 3:\n        Input: s = \"\"\n        Output: 0\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        # \u52a8\u6001\u89c4\u5212\n        # dp[i]\u8868\u793a\u4ee5s[i]\u7ed3\u5c3e\u7684\u6700\u957f\u6709\u6548\u62ec\u53f7\n        # dp[i] = dp[j] + 2 if s[j] == ')' and s[i] == '('\n        # dp[i] = 0 if s[i] == ')' or s[i] == '('\n        # dp[0] = 0\n        # dp[1] = 0 if s[0] == ')' else 2\n        # dp[2] = 0 if s[0] == ')' or s[1] == '(' else 2\n        # dp[3] = 0 if s[0] == ')' or s[1] == '(' or s[2] == '(' else 2\n        # dp[4] = 0 if s[0] == ')' or s[1] == '(' or s[2] == '(' or s[3] == '(' else 2\n        # dp[5] = 0 if s[0] == ')' or s[1] == '(' or s[2] == '(' or s[3] == '(' or s[4] == '(' else 2\n"
    },
    {
        "number": 33,
        "title": "Search in Rotated Sorted Array",
        "difficulty": 1,
        "prompt": "class Solution:\n    def search(self, nums: List[int], target: int) -> int:\n        \"\"\"\n        There is an integer array nums sorted in ascending order (with distinct values).\n        Prior to being passed to your function, nums is possibly rotated at an unknown pivot index k (1 <= k < nums.length) such that the resulting array is [nums[k], nums[k+1],..., nums[n-1], nums[0], nums[1],..., nums[k-1]] (0-indexed). For example, [0,1,2,4,5,6,7] might be rotated at pivot index 3 and become [4,5,6,7,0,1,2].\n        Given the array nums after the possible rotation and an integer target, return the index of target if it is in nums, or -1 if it is not in nums.\n        You must write an algorithm with O(log n) runtime complexity.\n        Example 1:\n        Input: nums = [4,5,6,7,0,1,2], target = 0\n        Output: 4\n        Example 2:\n        Input: nums = [4,5,6,7,0,1,2], target = 3\n        Output: -1\n        Example 3:\n        Input: nums = [1], target = 0\n        Output: -1\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        # binary search\n        # time complexity: O(log n)\n        # space complexity: O(1)\n        if not nums:\n            return -1\n        left, right = 0, len(nums) - 1\n        while left <= right:\n            mid = (left + right) // 2\n            if nums[mid] == target:\n                return mid\n            if nums[left] <= nums[mid]:\n                if nums[left] <= target <= nums[mid]:\n                    right = mid - 1\n                else:\n                    left = mid + 1\n            else:\n                if nums[mid] <= target <= nums[right]:\n                    left = mid + 1\n                else:\n                    right = mid - 1\n        return -1"
    },
    {
        "number": 33,
        "title": "Search in Rotated Sorted Array",
        "difficulty": 1,
        "prompt": "class Solution:\n    def search(self, nums: List[int], target: int) -> int:\n        \"\"\"\n        There is an integer array nums sorted in ascending order (with distinct values).\n        Prior to being passed to your function, nums is possibly rotated at an unknown pivot index k (1 <= k < nums.length) such that the resulting array is [nums[k], nums[k+1],..., nums[n-1], nums[0], nums[1],..., nums[k-1]] (0-indexed). For example, [0,1,2,4,5,6,7] might be rotated at pivot index 3 and become [4,5,6,7,0,1,2].\n        Given the array nums after the possible rotation and an integer target, return the index of target if it is in nums, or -1 if it is not in nums.\n        You must write an algorithm with O(log n) runtime complexity.\n        Example 1:\n        Input: nums = [4,5,6,7,0,1,2], target = 0\n        Output: 4\n        Example 2:\n        Input: nums = [4,5,6,7,0,1,2], target = 3\n        Output: -1\n        Example 3:\n        Input: nums = [1], target = 0\n        Output: -1\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        if not nums:\n            return -1\n        l, r = 0, len(nums) - 1\n        while l <= r:\n            mid = l + (r - l) // 2\n            if nums[mid] == target:\n                return mid\n            if nums[l] <= nums[mid]:\n                if nums[l] <= target < nums[mid]:\n                    r = mid - 1\n                else:\n                    l = mid + 1\n            else:\n                if nums[mid] < target <= nums[r]:\n                    l = mid + 1\n                else:\n                    r = mid - 1\n        return -1"
    },
    {
        "number": 34,
        "title": "Find First and Last Position of Element in Sorted Array",
        "difficulty": 1,
        "prompt": "class Solution:\n    def searchRange(self, nums: List[int], target: int) -> List[int]:\n        \"\"\"\n        Given an array of integers nums sorted in non-decreasing order, find the starting and ending position of a given target value.\n        If target is not found in the array, return [-1, -1].\n        You must write an algorithm with O(log n) runtime complexity.\n        Example 1:\n        Input: nums = [5,7,7,8,8,10], target = 8\n        Output: [3,4]\n        Example 2:\n        Input: nums = [5,7,7,8,8,10], target = 6\n        Output: [-1,-1]\n        Example 3:\n        Input: nums = [], target = 0\n        Output: [-1,-1]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        if not nums:\n            return [-1, -1]\n        if len(nums) == 1:\n            if nums[0] == target:\n                return [0, 0]\n            else:\n                return [-1, -1]\n        left = 0\n        right = len(nums) - 1\n        while left < right:\n            mid = (left + right) // 2\n            if nums[mid] < target:\n                left = mid + 1\n            else:\n                right = mid\n        if nums[left] == target:\n            start = left\n        else:\n            return [-1, -1]\n        left = 0\n        right = len(nums) - 1\n        while left < right:\n            mid = (left + right) // 2\n            if nums[mid] <= target:\n                left = mid + 1\n            else:\n                right = mid\n        return [start, left - 1]"
    },
    {
        "number": 34,
        "title": "Find First and Last Position of Element in Sorted Array",
        "difficulty": 1,
        "prompt": "class Solution:\n    def searchRange(self, nums: List[int], target: int) -> List[int]:\n        \"\"\"\n        Given an array of integers nums sorted in non-decreasing order, find the starting and ending position of a given target value.\n        If target is not found in the array, return [-1, -1].\n        You must write an algorithm with O(log n) runtime complexity.\n        Example 1:\n        Input: nums = [5,7,7,8,8,10], target = 8\n        Output: [3,4]\n        Example 2:\n        Input: nums = [5,7,7,8,8,10], target = 6\n        Output: [-1,-1]\n        Example 3:\n        Input: nums = [], target = 0\n        Output: [-1,-1]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        if not nums:\n            return [-1, -1]\n        if len(nums) == 1:\n            if nums[0] == target:\n                return [0, 0]\n            else:\n                return [-1, -1]\n        left, right = 0, len(nums) - 1\n        while left <= right:\n            mid = (left + right) // 2\n            if nums[mid] == target:\n                left = mid\n                break\n            elif nums[mid] < target:\n                left = mid + 1\n            else:\n                right = mid - 1\n        if left > right:\n            return [-1, -1]\n        left_bound = right_bound = left\n        left, right = left, len(nums) - 1\n        while left <= right:\n            mid = (left + right) // 2\n            if nums[mid] == target:\n                right = mid - 1\n            else:\n                left = mid + 1\n        right_bound = left\n        return [left_bound, right_bound]"
    },
    {
        "number": 35,
        "title": "Search Insert Position",
        "difficulty": 0,
        "prompt": "class Solution:\n    def searchInsert(self, nums: List[int], target: int) -> int:\n        \"\"\"\n        Given a sorted array of distinct integers and a target value, return the index if the target is found. If not, return the index where it would be if it were inserted in order.\n        You must write an algorithm with O(log n) runtime complexity.\n        Example 1:\n        Input: nums = [1,3,5,6], target = 5\n        Output: 2\n        Example 2:\n        Input: nums = [1,3,5,6], target = 2\n        Output: 1\n        Example 3:\n        Input: nums = [1,3,5,6], target = 7\n        Output: 4\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        # binary search\n        # O(log n)\n        # O(1)\n        left, right = 0, len(nums) - 1\n        while left <= right:\n            mid = left + (right - left) // 2\n            if nums[mid] == target:\n                return mid\n            elif nums[mid] < target:\n                left = mid + 1\n            else:\n                right = mid - 1\n        return left"
    },
    {
        "number": 35,
        "title": "Search Insert Position",
        "difficulty": 0,
        "prompt": "class Solution:\n    def searchInsert(self, nums: List[int], target: int) -> int:\n        \"\"\"\n        Given a sorted array of distinct integers and a target value, return the index if the target is found. If not, return the index where it would be if it were inserted in order.\n        You must write an algorithm with O(log n) runtime complexity.\n        Example 1:\n        Input: nums = [1,3,5,6], target = 5\n        Output: 2\n        Example 2:\n        Input: nums = [1,3,5,6], target = 2\n        Output: 1\n        Example 3:\n        Input: nums = [1,3,5,6], target = 7\n        Output: 4\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        if target in nums:\n            return nums.index(target)\n        else:\n            nums.append(target)\n            nums.sort()\n            return nums.index(target)\n<|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>"
    },
    {
        "number": 36,
        "title": "Valid Sudoku",
        "difficulty": 1,
        "prompt": "class Solution:\n    def isValidSudoku(self, board: List[List[str]]) -> bool:\n        \"\"\"\n        Determine if a 9 x 9 Sudoku board is valid. Only the filled cells need to be validated according to the following rules:\n            Each row must contain the digits 1-9 without repetition.\n            Each column must contain the digits 1-9 without repetition.\n            Each of the nine 3 x 3 sub-boxes of the grid must contain the digits 1-9 without repetition.\n        Note:\n            A Sudoku board (partially filled) could be valid but is not necessarily solvable.\n            Only the filled cells need to be validated according to the mentioned rules.\n        Example 1:\n        Input: board = \n        [[\"5\",\"3\",\".\",\".\",\"7\",\".\",\".\",\".\",\".\"]\n       ,[\"6\",\".\",\".\",\"1\",\"9\",\"5\",\".\",\".\",\".\"]\n       ,[\".\",\"9\",\"8\",\".\",\".\",\".\",\".\",\"6\",\".\"]\n       ,[\"8\",\".\",\".\",\".\",\"6\",\".\",\".\",\".\",\"3\"]\n       ,[\"4\",\".\",\".\",\"8\",\".\",\"3\",\".\",\".\",\"1\"]\n       ,[\"7\",\".\",\".\",\".\",\"2\",\".\",\".\",\".\",\"6\"]\n       ,[\".\",\"6\",\".\",\".\",\".\",\".\",\"2\",\"8\",\".\"]\n       ,[\".\",\".\",\".\",\"4\",\"1\",\"9\",\".\",\".\",\"5\"]\n       ,[\".\",\".\",\".\",\".\",\"8\",\".\",\".\",\"7\",\"9\"]]\n        Output: true\n        Example 2:\n        Input: board = \n        [[\"8\",\"3\",\".\",\".\",\"7\",\".\",\".\",\".\",\".\"]\n       ,[\"6\",\".\",\".\",\"1\",\"9\",\"5\",\".\",\".\",\".\"]\n       ,[\".\",\"9\",\"8\",\".\",\".\",\".\",\".\",\"6\",\".\"]\n       ,[\"8\",\".\",\".\",\".\",\"6\",\".\",\".\",\".\",\"3\"]\n       ,[\"4\",\".\",\".\",\"8\",\".\",\"3\",\".\",\".\",\"1\"]\n       ,[\"7\",\".\",\".\",\".\",\"2\",\".\",\".\",\".\",\"6\"]\n       ,[\".\",\"6\",\".\",\".\",\".\",\".\",\"2\",\"8\",\".\"]\n       ,[\".\",\".\",\".\",\"4\",\"1\",\"9\",\".\",\".\",\"5\"]\n       ,[\".\",\".\",\".\",\".\",\"8\",\".\",\".\",\"7\",\"9\"]]\n        Output: false\n        Explanation: Same as Example 1, except with the 5 in the top left corner being modified to 8. Since there are two 8's in the top left 3x3 sub-box, it is invalid.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        # Check rows\n        for row in board:\n            if not self.is_valid(row):\n                return False\n        # Check columns\n        for col in zip(*board):\n            if not self.is_valid(col):\n                return False\n        # Check sub-boxes\n        for i in (0, 3, 6):\n            for j in (0, 3, 6):\n                sub_box = [board[x][y] for x in range(i, i + 3) for y in range(j, j + 3)]\n                if not self.is_valid(sub_box):\n                    return False\n        return True"
    },
    {
        "number": 36,
        "title": "Valid Sudoku",
        "difficulty": 1,
        "prompt": "class Solution:\n    def isValidSudoku(self, board: List[List[str]]) -> bool:\n        \"\"\"\n        Determine if a 9 x 9 Sudoku board is valid. Only the filled cells need to be validated according to the following rules:\n            Each row must contain the digits 1-9 without repetition.\n            Each column must contain the digits 1-9 without repetition.\n            Each of the nine 3 x 3 sub-boxes of the grid must contain the digits 1-9 without repetition.\n        Note:\n            A Sudoku board (partially filled) could be valid but is not necessarily solvable.\n            Only the filled cells need to be validated according to the mentioned rules.\n        Example 1:\n        Input: board = \n        [[\"5\",\"3\",\".\",\".\",\"7\",\".\",\".\",\".\",\".\"]\n       ,[\"6\",\".\",\".\",\"1\",\"9\",\"5\",\".\",\".\",\".\"]\n       ,[\".\",\"9\",\"8\",\".\",\".\",\".\",\".\",\"6\",\".\"]\n       ,[\"8\",\".\",\".\",\".\",\"6\",\".\",\".\",\".\",\"3\"]\n       ,[\"4\",\".\",\".\",\"8\",\".\",\"3\",\".\",\".\",\"1\"]\n       ,[\"7\",\".\",\".\",\".\",\"2\",\".\",\".\",\".\",\"6\"]\n       ,[\".\",\"6\",\".\",\".\",\".\",\".\",\"2\",\"8\",\".\"]\n       ,[\".\",\".\",\".\",\"4\",\"1\",\"9\",\".\",\".\",\"5\"]\n       ,[\".\",\".\",\".\",\".\",\"8\",\".\",\".\",\"7\",\"9\"]]\n        Output: true\n        Example 2:\n        Input: board = \n        [[\"8\",\"3\",\".\",\".\",\"7\",\".\",\".\",\".\",\".\"]\n       ,[\"6\",\".\",\".\",\"1\",\"9\",\"5\",\".\",\".\",\".\"]\n       ,[\".\",\"9\",\"8\",\".\",\".\",\".\",\".\",\"6\",\".\"]\n       ,[\"8\",\".\",\".\",\".\",\"6\",\".\",\".\",\".\",\"3\"]\n       ,[\"4\",\".\",\".\",\"8\",\".\",\"3\",\".\",\".\",\"1\"]\n       ,[\"7\",\".\",\".\",\".\",\"2\",\".\",\".\",\".\",\"6\"]\n       ,[\".\",\"6\",\".\",\".\",\".\",\".\",\"2\",\"8\",\".\"]\n       ,[\".\",\".\",\".\",\"4\",\"1\",\"9\",\".\",\".\",\"5\"]\n       ,[\".\",\".\",\".\",\".\",\"8\",\".\",\".\",\"7\",\"9\"]]\n        Output: false\n        Explanation: Same as Example 1, except with the 5 in the top left corner being modified to 8. Since there are two 8's in the top left 3x3 sub-box, it is invalid.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        # Check rows\n        for row in board:\n            if not self.is_valid_row(row):\n                return False\n        # Check columns\n        for col in range(len(board)):\n            if not self.is_valid_col(board, col):\n                return False\n        # Check sub-boxes\n        for row in range(0, 9, 3):\n            for col in range(0, 9, 3):\n                if not self.is_valid_sub_box(board, row, col):\n                    return False\n        return True"
    },
    {
        "number": 37,
        "title": "Sudoku Solver",
        "difficulty": 2,
        "prompt": "class Solution:\n    def solveSudoku(self, board: List[List[str]]) -> None:\n        \"\"\"\n        Do not return anything, modify board in-place instead.\n        Write a program to solve a Sudoku puzzle by filling the empty cells.\n        A sudoku solution must satisfy all of the following rules:\n            Each of the digits 1-9 must occur exactly once in each row.\n            Each of the digits 1-9 must occur exactly once in each column.\n            Each of the digits 1-9 must occur exactly once in each of the 9 3x3 sub-boxes of the grid.\n        The '.' character indicates empty cells.\n        Example 1:\n        Input: board = [[\"5\",\"3\",\".\",\".\",\"7\",\".\",\".\",\".\",\".\"],[\"6\",\".\",\".\",\"1\",\"9\",\"5\",\".\",\".\",\".\"],[\".\",\"9\",\"8\",\".\",\".\",\".\",\".\",\"6\",\".\"],[\"8\",\".\",\".\",\".\",\"6\",\".\",\".\",\".\",\"3\"],[\"4\",\".\",\".\",\"8\",\".\",\"3\",\".\",\".\",\"1\"],[\"7\",\".\",\".\",\".\",\"2\",\".\",\".\",\".\",\"6\"],[\".\",\"6\",\".\",\".\",\".\",\".\",\"2\",\"8\",\".\"],[\".\",\".\",\".\",\"4\",\"1\",\"9\",\".\",\".\",\"5\"],[\".\",\".\",\".\",\".\",\"8\",\".\",\".\",\"7\",\"9\"]]\n        Output: [[\"5\",\"3\",\"4\",\"6\",\"7\",\"8\",\"9\",\"1\",\"2\"],[\"6\",\"7\",\"2\",\"1\",\"9\",\"5\",\"3\",\"4\",\"8\"],[\"1\",\"9\",\"8\",\"3\",\"4\",\"2\",\"5\",\"6\",\"7\"],[\"8\",\"5\",\"9\",\"7\",\"6\",\"1\",\"4\",\"2\",\"3\"],[\"4\",\"2\",\"6\",\"8\",\"5\",\"3\",\"7\",\"9\",\"1\"],[\"7\",\"1\",\"3\",\"9\",\"2\",\"4\",\"8\",\"5\",\"6\"],[\"9\",\"6\",\"1\",\"5\",\"3\",\"7\",\"2\",\"8\",\"4\"],[\"2\",\"8\",\"7\",\"4\",\"1\",\"9\",\"6\",\"3\",\"5\"],[\"3\",\"4\",\"5\",\"2\",\"8\",\"6\",\"1\",\"7\",\"9\"]]\n        Explanation: The input board is shown above and the only valid solution is shown below:\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        self.board = board\n        self.solve()"
    },
    {
        "number": 37,
        "title": "Sudoku Solver",
        "difficulty": 2,
        "prompt": "class Solution:\n    def solveSudoku(self, board: List[List[str]]) -> None:\n        \"\"\"\n        Do not return anything, modify board in-place instead.\n        Write a program to solve a Sudoku puzzle by filling the empty cells.\n        A sudoku solution must satisfy all of the following rules:\n            Each of the digits 1-9 must occur exactly once in each row.\n            Each of the digits 1-9 must occur exactly once in each column.\n            Each of the digits 1-9 must occur exactly once in each of the 9 3x3 sub-boxes of the grid.\n        The '.' character indicates empty cells.\n        Example 1:\n        Input: board = [[\"5\",\"3\",\".\",\".\",\"7\",\".\",\".\",\".\",\".\"],[\"6\",\".\",\".\",\"1\",\"9\",\"5\",\".\",\".\",\".\"],[\".\",\"9\",\"8\",\".\",\".\",\".\",\".\",\"6\",\".\"],[\"8\",\".\",\".\",\".\",\"6\",\".\",\".\",\".\",\"3\"],[\"4\",\".\",\".\",\"8\",\".\",\"3\",\".\",\".\",\"1\"],[\"7\",\".\",\".\",\".\",\"2\",\".\",\".\",\".\",\"6\"],[\".\",\"6\",\".\",\".\",\".\",\".\",\"2\",\"8\",\".\"],[\".\",\".\",\".\",\"4\",\"1\",\"9\",\".\",\".\",\"5\"],[\".\",\".\",\".\",\".\",\"8\",\".\",\".\",\"7\",\"9\"]]\n        Output: [[\"5\",\"3\",\"4\",\"6\",\"7\",\"8\",\"9\",\"1\",\"2\"],[\"6\",\"7\",\"2\",\"1\",\"9\",\"5\",\"3\",\"4\",\"8\"],[\"1\",\"9\",\"8\",\"3\",\"4\",\"2\",\"5\",\"6\",\"7\"],[\"8\",\"5\",\"9\",\"7\",\"6\",\"1\",\"4\",\"2\",\"3\"],[\"4\",\"2\",\"6\",\"8\",\"5\",\"3\",\"7\",\"9\",\"1\"],[\"7\",\"1\",\"3\",\"9\",\"2\",\"4\",\"8\",\"5\",\"6\"],[\"9\",\"6\",\"1\",\"5\",\"3\",\"7\",\"2\",\"8\",\"4\"],[\"2\",\"8\",\"7\",\"4\",\"1\",\"9\",\"6\",\"3\",\"5\"],[\"3\",\"4\",\"5\",\"2\",\"8\",\"6\",\"1\",\"7\",\"9\"]]\n        Explanation: The input board is shown above and the only valid solution is shown below:\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        # 1. \u5148\u628a\u6240\u6709\u7684\u7a7a\u683c\u653e\u5230\u4e00\u4e2aset\u91cc\u9762\n        # 2. \u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u7a7a\u683c\uff0c\u628a\u5b83\u7684row, col, box\u653e\u5230\u4e00\u4e2aset\u91cc\u9762\n        # 3. \u628a\u6240\u6709\u7684\u7a7a\u683c\u90fd\u653e\u5230\u4e00\u4e2aset\u91cc\u9762\n        # 4. \u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u7a7a\u683c\uff0c\u628a\u5b83\u7684row, col, box\u653e\u5230\u4e00\u4e2aset\u91cc\u9762\n        # 5. \u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u7a7a\u683c\uff0c\u628a\u5b83\u7684row, col, box\u653e\u5230\u4e00\u4e2aset\u91cc\u9762\n        # 6. \u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u7a7a\u683c\uff0c\u628a\u5b83\u7684row, col, box\u653e\u5230\u4e00\u4e2aset\u91cc\u9762\n        # 7. \u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u7a7a\u683c\uff0c\u628a\u5b83\u7684row, col, box\ufffd"
    },
    {
        "number": 38,
        "title": "Count and Say",
        "difficulty": 1,
        "prompt": "class Solution:\n    def countAndSay(self, n: int) -> str:\n        \"\"\"\n        The count-and-say sequence is a sequence of digit strings defined by the recursive formula:\n            countAndSay(1) = \"1\"\n            countAndSay(n) is the way you would \"say\" the digit string from countAndSay(n-1), which is then converted into a different digit string.\n        To determine how you \"say\" a digit string, split it into the minimal number of substrings such that each substring contains exactly one unique digit. Then for each substring, say the number of digits, then say the digit. Finally, concatenate every said digit.\n        For example, the saying and conversion for digit string \"3322251\":\n        Given a positive integer n, return the nth term of the count-and-say sequence.\n        Example 1:\n        Input: n = 1\n        Output: \"1\"\n        Explanation: This is the base case.\n        Example 2:\n        Input: n = 4\n        Output: \"1211\"\n        Explanation:\n        countAndSay(1) = \"1\"\n        countAndSay(2) = say \"1\" = one 1 = \"11\"\n        countAndSay(3) = say \"11\" = two 1's = \"21\"\n        countAndSay(4) = say \"21\" = one 2 + one 1 = \"12\" + \"11\" = \"1211\"\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        if n == 1:\n            return \"1\"\n        else:\n            s = self.countAndSay(n - 1)\n            res = \"\"\n            count = 1\n            for i in range(len(s) - 1):\n                if s[i] == s[i + 1]:\n                    count += 1\n                else:\n                    res += str(count) + s[i]\n                    count = 1\n            res += str(count) + s[-1]\n            return res"
    },
    {
        "number": 38,
        "title": "Count and Say",
        "difficulty": 1,
        "prompt": "class Solution:\n    def countAndSay(self, n: int) -> str:\n        \"\"\"\n        The count-and-say sequence is a sequence of digit strings defined by the recursive formula:\n            countAndSay(1) = \"1\"\n            countAndSay(n) is the way you would \"say\" the digit string from countAndSay(n-1), which is then converted into a different digit string.\n        To determine how you \"say\" a digit string, split it into the minimal number of substrings such that each substring contains exactly one unique digit. Then for each substring, say the number of digits, then say the digit. Finally, concatenate every said digit.\n        For example, the saying and conversion for digit string \"3322251\":\n        Given a positive integer n, return the nth term of the count-and-say sequence.\n        Example 1:\n        Input: n = 1\n        Output: \"1\"\n        Explanation: This is the base case.\n        Example 2:\n        Input: n = 4\n        Output: \"1211\"\n        Explanation:\n        countAndSay(1) = \"1\"\n        countAndSay(2) = say \"1\" = one 1 = \"11\"\n        countAndSay(3) = say \"11\" = two 1's = \"21\"\n        countAndSay(4) = say \"21\" = one 2 + one 1 = \"12\" + \"11\" = \"1211\"\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        if n == 1:\n            return \"1\"\n        else:\n            s = self.countAndSay(n-1)\n            result = \"\"\n            count = 1\n            for i in range(len(s)-1):\n                if s[i] == s[i+1]:\n                    count += 1\n                else:\n                    result += str(count) + s[i]\n                    count = 1\n            result += str(count) + s[-1]\n            return result"
    },
    {
        "number": 39,
        "title": "Combination Sum",
        "difficulty": 1,
        "prompt": "class Solution:\n    def combinationSum(self, candidates: List[int], target: int) -> List[List[int]]:\n        \"\"\"\n        Given an array of distinct integers candidates and a target integer target, return a list of all unique combinations of candidates where the chosen numbers sum to target. You may return the combinations in any order.\n        The same number may be chosen from candidates an unlimited number of times. Two combinations are unique if the frequency of at least one of the chosen numbers is different.\n        The test cases are generated such that the number of unique combinations that sum up to target is less than 150 combinations for the given input.\n        Example 1:\n        Input: candidates = [2,3,6,7], target = 7\n        Output: [[2,2,3],[7]]\n        Explanation:\n        2 and 3 are candidates, and 2 + 2 + 3 = 7. Note that 2 can be used multiple times.\n        7 is a candidate, and 7 = 7.\n        These are the only two combinations.\n        Example 2:\n        Input: candidates = [2,3,5], target = 8\n        Output: [[2,2,2,2],[2,3,3],[3,5]]\n        Example 3:\n        Input: candidates = [2], target = 1\n        Output: []\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        # Solution 1: Backtracking\n        # Time complexity: O(n^m * m), n is the number of candidates, m is the target\n        # Space complexity: O(m)\n        # def backtrack(candidates, target, curr, res):\n        #     if target == 0:\n        #         res.append(curr[:])\n        #         return\n        #     if target < 0:\n        #         return\n        #     for i in range(len(candidates)):\n        #         curr.append(candidates[i])\n        #         backtrack(candidates, target - candidates[i], curr, res)\n        #         curr.pop()\n        # res = []\n        # backtrack(candidates, target, [], res)\n        # return res"
    },
    {
        "number": 39,
        "title": "Combination Sum",
        "difficulty": 1,
        "prompt": "class Solution:\n    def combinationSum(self, candidates: List[int], target: int) -> List[List[int]]:\n        \"\"\"\n        Given an array of distinct integers candidates and a target integer target, return a list of all unique combinations of candidates where the chosen numbers sum to target. You may return the combinations in any order.\n        The same number may be chosen from candidates an unlimited number of times. Two combinations are unique if the frequency of at least one of the chosen numbers is different.\n        The test cases are generated such that the number of unique combinations that sum up to target is less than 150 combinations for the given input.\n        Example 1:\n        Input: candidates = [2,3,6,7], target = 7\n        Output: [[2,2,3],[7]]\n        Explanation:\n        2 and 3 are candidates, and 2 + 2 + 3 = 7. Note that 2 can be used multiple times.\n        7 is a candidate, and 7 = 7.\n        These are the only two combinations.\n        Example 2:\n        Input: candidates = [2,3,5], target = 8\n        Output: [[2,2,2,2],[2,3,3],[3,5]]\n        Example 3:\n        Input: candidates = [2], target = 1\n        Output: []\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        self.res = []\n        self.dfs(candidates, target, 0, [])\n        return self.res"
    },
    {
        "number": 40,
        "title": "Combination Sum II",
        "difficulty": 1,
        "prompt": "class Solution:\n    def combinationSum2(self, candidates: List[int], target: int) -> List[List[int]]:\n        \"\"\"\n        Given a collection of candidate numbers (candidates) and a target number (target), find all unique combinations in candidates where the candidate numbers sum to target.\n        Each number in candidates may only be used once in the combination.\n        Note: The solution set must not contain duplicate combinations.\n        Example 1:\n        Input: candidates = [10,1,2,7,6,1,5], target = 8\n        Output: \n        [\n        [1,1,6],\n        [1,2,5],\n        [1,7],\n        [2,6]\n        ]\n        Example 2:\n        Input: candidates = [2,5,2,1,2], target = 5\n        Output: \n        [\n        [1,2,2],\n        [5]\n        ]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        candidates.sort()\n        res = []\n        self.helper(candidates, target, 0, [], res)\n        return res\n    \n    def helper(self, candidates, target, start, path, res):\n        if target == 0:\n            res.append(path)\n            return\n        \n        for i in range(start, len(candidates)):\n            if i > start and candidates[i] == candidates[i-1]:\n                continue\n            if candidates[i] > target:\n                break\n            self.helper(candidates, target-candidates[i], i+1, path+[candidates[i]], res)\n<|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>"
    },
    {
        "number": 40,
        "title": "Combination Sum II",
        "difficulty": 1,
        "prompt": "class Solution:\n    def combinationSum2(self, candidates: List[int], target: int) -> List[List[int]]:\n        \"\"\"\n        Given a collection of candidate numbers (candidates) and a target number (target), find all unique combinations in candidates where the candidate numbers sum to target.\n        Each number in candidates may only be used once in the combination.\n        Note: The solution set must not contain duplicate combinations.\n        Example 1:\n        Input: candidates = [10,1,2,7,6,1,5], target = 8\n        Output: \n        [\n        [1,1,6],\n        [1,2,5],\n        [1,7],\n        [2,6]\n        ]\n        Example 2:\n        Input: candidates = [2,5,2,1,2], target = 5\n        Output: \n        [\n        [1,2,2],\n        [5]\n        ]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        \n        # Solution 1: Backtracking\n        # Time complexity: O(n^m), n is the number of candidates, m is the number of elements in the combination\n        # Space complexity: O(n^m)\n        \n        # Solution 2: DFS\n        # Time complexity: O(n^m), n is the number of candidates, m is the number of elements in the combination\n        # Space complexity: O(n^m)\n        \n        # Solution 3: DP\n        # Time complexity: O(n^m), n is the number of candidates, m is the number of elements in the combination\n        # Space complexity: O(n^m)\n        \n        # Solution 4: BFS\n        # Time complexity: O(n^m), n is the number of candidates, m is the number of elements in the combination\n        # Space complexity: O(n^m)\n        \n        # Solution 5: DFS + Memo\n        # Time complexity: O(n^m), n is the number of candidates, m is the number of elements in the combination\n        # Space complexity: O(n^m)\n        \n        # Solution 6: DFS + Memo + Pruning\n        # Time complexity: O(n^m), n is the number of candidates, m is the number of elements in the combination\n        # Space complexity"
    },
    {
        "number": 41,
        "title": "First Missing Positive",
        "difficulty": 2,
        "prompt": "class Solution:\n    def firstMissingPositive(self, nums: List[int]) -> int:\n        \"\"\"\n        Given an unsorted integer array nums, return the smallest missing positive integer.\n        You must implement an algorithm that runs in O(n) time and uses constant extra space.\n        Example 1:\n        Input: nums = [1,2,0]\n        Output: 3\n        Explanation: The numbers in the range [1,2] are all in the array.\n        Example 2:\n        Input: nums = [3,4,-1,1]\n        Output: 2\n        Explanation: 1 is in the array but 2 is missing.\n        Example 3:\n        Input: nums = [7,8,9,11,12]\n        Output: 1\n        Explanation: The smallest positive integer 1 is missing.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        # 1. \u6570\u7ec4\u6392\u5e8f\n        # 2. \u627e\u5230\u7b2c\u4e00\u4e2a\u6b63\u6570\uff0c\u628a\u4ed6\u6362\u5230\u7b2c\u4e00\u4e2a\u4f4d\u7f6e\n        # 3. \u627e\u5230\u7b2c\u4e00\u4e2a\u5927\u4e8e\u7b49\u4e8e0\u7684\u6570\uff0c\u628a\u4ed6\u6362\u5230\u7b2c\u4e00\u4e2a\u4f4d\u7f6e\n        # 4. \u627e\u5230\u7b2c\u4e00\u4e2a\u5c0f\u4e8e\u7b49\u4e8en\u7684\u6570\uff0c\u628a\u4ed6\u6362\u5230\u7b2c\u4e00\u4e2a\u4f4d\u7f6e\n        # 5. \u627e\u5230\u7b2c\u4e00\u4e2a\u5927\u4e8en\u7684\u6570\uff0c\u628a\u4ed6\u6362\u5230\u7b2c\u4e00\u4e2a\u4f4d\u7f6e\n        # 6. \u627e\u5230\u7b2c\u4e00\u4e2a\u5c0f\u4e8e\u7b49\u4e8en\u7684\u6570\uff0c\u628a\u4ed6\u6362\u5230\u7b2c\u4e00\u4e2a\u4f4d\u7f6e\n        # 7. \u627e\u5230\u7b2c\u4e00\u4e2a\u5927\u4e8e\u7b49\u4e8en\u7684\u6570\uff0c\u628a\u4ed6"
    },
    {
        "number": 41,
        "title": "First Missing Positive",
        "difficulty": 2,
        "prompt": "class Solution:\n    def firstMissingPositive(self, nums: List[int]) -> int:\n        \"\"\"\n        Given an unsorted integer array nums, return the smallest missing positive integer.\n        You must implement an algorithm that runs in O(n) time and uses constant extra space.\n        Example 1:\n        Input: nums = [1,2,0]\n        Output: 3\n        Explanation: The numbers in the range [1,2] are all in the array.\n        Example 2:\n        Input: nums = [3,4,-1,1]\n        Output: 2\n        Explanation: 1 is in the array but 2 is missing.\n        Example 3:\n        Input: nums = [7,8,9,11,12]\n        Output: 1\n        Explanation: The smallest positive integer 1 is missing.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        # 1. \u6570\u7ec4\u6392\u5e8f\n        # 2. \u6570\u7ec4\u4e2d\u7684\u6570\u5b57\u662f\u5426\u5b58\u5728\n        # 3. \u6570\u7ec4\u4e2d\u7684\u6570\u5b57\u662f\u5426\u5b58\u5728\uff0c\u5e76\u4e14\u662f\u5426\u5927\u4e8e0\n        # 4. \u6570\u7ec4\u4e2d\u7684\u6570\u5b57\u662f\u5426\u5b58\u5728\uff0c\u5e76\u4e14\u662f\u5426\u5927\u4e8e0\uff0c\u5e76\u4e14\u662f\u5426\u5c0f\u4e8en\n        # 5. \u6570\u7ec4\u4e2d\u7684\u6570\u5b57\u662f\u5426\u5b58\u5728\uff0c\u5e76\u4e14\u662f\u5426\u5927\u4e8e0\uff0c\u5e76\u4e14\u662f\u5426\u5c0f\u4e8en\uff0c\u5e76\u4e14\u662f\u5426\u7b49\u4e8en\n        # 6. \u6570\u7ec4\u4e2d\u7684\u6570\u5b57\u662f\u5426\u5b58\u5728\uff0c\u5e76\u4e14\u662f\u5426\u5927\u4e8e0\uff0c\u5e76\u4e14\u662f\u5426\u5c0f\u4e8en\uff0c\u5e76\u4e14\u662f\u5426\u7b49\u4e8en\uff0c\u5e76\u4e14\u662f\u5426\u5927\u4e8en\n        # 7. \u6570\u7ec4\u4e2d\u7684\u6570\u5b57\u662f"
    },
    {
        "number": 42,
        "title": "Trapping Rain Water",
        "difficulty": 2,
        "prompt": "class Solution:\n    def trap(self, height: List[int]) -> int:\n        \"\"\"\n        Given n non-negative integers representing an elevation map where the width of each bar is 1, compute how much water it can trap after raining.\n        Example 1:\n        Input: height = [0,1,0,2,1,0,1,3,2,1,2,1]\n        Output: 6\n        Explanation: The above elevation map (black section) is represented by array [0,1,0,2,1,0,1,3,2,1,2,1]. In this case, 6 units of rain water (blue section) are being trapped.\n        Example 2:\n        Input: height = [4,2,0,3,2,5]\n        Output: 9\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        if not height:\n            return 0\n        n = len(height)\n        left_max = [0] * n\n        right_max = [0] * n\n        left_max[0] = height[0]\n        right_max[-1] = height[-1]\n        for i in range(1, n):\n            left_max[i] = max(height[i], left_max[i - 1])\n        for i in range(n - 2, -1, -1):\n            right_max[i] = max(height[i], right_max[i + 1])\n        res = 0\n        for i in range(n):\n            res += min(left_max[i], right_max[i]) - height[i]\n        return res"
    },
    {
        "number": 42,
        "title": "Trapping Rain Water",
        "difficulty": 2,
        "prompt": "class Solution:\n    def trap(self, height: List[int]) -> int:\n        \"\"\"\n        Given n non-negative integers representing an elevation map where the width of each bar is 1, compute how much water it can trap after raining.\n        Example 1:\n        Input: height = [0,1,0,2,1,0,1,3,2,1,2,1]\n        Output: 6\n        Explanation: The above elevation map (black section) is represented by array [0,1,0,2,1,0,1,3,2,1,2,1]. In this case, 6 units of rain water (blue section) are being trapped.\n        Example 2:\n        Input: height = [4,2,0,3,2,5]\n        Output: 9\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        # \u627e\u5230\u6700\u9ad8\u7684\u90a3\u4e00\u500b\uff0c\u7136\u5f8c\u628a\u6240\u6709\u7684\u9ad8\u5ea6\u6e1b\u53bb\u6700\u9ad8\u90a3\u4e00\u500b\uff0c\u518d\u628a\u90a3\u4e00\u500b\u9ad8\u5ea6\u7684\u5de6\u53f3\u5169\u908a\u7684\u9ad8\u5ea6\u6e1b\u53bb\u6700\u9ad8\u90a3\u4e00\u500b\uff0c\u518d\u628a\u90a3\u4e00\u500b\u9ad8\u5ea6\u7684\u5de6\u53f3\u5169\u908a\u7684\u9ad8\u5ea6\u6e1b\u53bb\u6700\u9ad8\u90a3\u4e00\u500b\uff0c\u518d\u628a\u90a3\u4e00\u500b\u9ad8\u5ea6\u7684\u5de6\u53f3\u5169\u908a\u7684\u9ad8\u5ea6\u6e1b\u53bb\u6700\u9ad8\u90a3\u4e00\u500b\uff0c\u518d\u628a\u90a3\u4e00\u500b\u9ad8\u5ea6\u7684\u5de6\u53f3\u5169\u908a\u7684\u9ad8\u5ea6\u6e1b\u53bb\u6700\u9ad8\u90a3\u4e00\u500b\uff0c\u518d\u628a\u90a3\u4e00\u500b\u9ad8\u5ea6\u7684\u5de6\u53f3\u5169\u908a\u7684\u9ad8\u5ea6\u6e1b\u53bb\u6700\u9ad8\u90a3"
    },
    {
        "number": 43,
        "title": "Multiply Strings",
        "difficulty": 1,
        "prompt": "class Solution:\n    def multiply(self, num1: str, num2: str) -> str:\n        \"\"\"\n        Given two non-negative integers num1 and num2 represented as strings, return the product of num1 and num2, also represented as a string.\n        Note: You must not use any built-in BigInteger library or convert the inputs to integer directly.\n        Example 1:\n        Input: num1 = \"2\", num2 = \"3\"\n        Output: \"6\"\n        Example 2:\n        Input: num1 = \"123\", num2 = \"456\"\n        Output: \"56088\"\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        if num1 == \"0\" or num2 == \"0\":\n            return \"0\"\n        \n        n1 = len(num1)\n        n2 = len(num2)\n        \n        # convert num1 and num2 to int\n        num1 = int(num1)\n        num2 = int(num2)\n        \n        # convert num1 and num2 to list\n        num1 = list(num1)\n        num2 = list(num2)\n        \n        # reverse num1 and num2\n        num1.reverse()\n        num2.reverse()\n        \n        # convert num1 and num2 to int\n        num1 = int(\"\".join(num1))\n        num2 = int(\"\".join(num2))\n        \n        # convert num1 and num2 to list\n        num1 = list(str(num1))\n        num2 = list(str(num2))\n        \n        # reverse num1 and num2\n        num1.reverse()\n        num2.reverse()\n        \n        # convert num1 and num2 to int\n        num1 = int(\"\".join(num1))\n        num2 = int(\"\".join(num2))\n        \n        # convert num1 and num2 to list\n        num1 = list(str(num1))\n"
    },
    {
        "number": 43,
        "title": "Multiply Strings",
        "difficulty": 1,
        "prompt": "class Solution:\n    def multiply(self, num1: str, num2: str) -> str:\n        \"\"\"\n        Given two non-negative integers num1 and num2 represented as strings, return the product of num1 and num2, also represented as a string.\n        Note: You must not use any built-in BigInteger library or convert the inputs to integer directly.\n        Example 1:\n        Input: num1 = \"2\", num2 = \"3\"\n        Output: \"6\"\n        Example 2:\n        Input: num1 = \"123\", num2 = \"456\"\n        Output: \"56088\"\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        # \u601d\u8def\uff1a\n        # 1. \u4f7f\u7528\u5b57\u7b26\u4e32\u7684\u4e58\u6cd5\u8fd0\u7b97\uff0c\u4f46\u662f\u9700\u8981\u6ce8\u610f\u8fb9\u754c\u6761\u4ef6\n        # 2. \u5c06\u5b57\u7b26\u4e32\u8f6c\u5316\u4e3a\u6570\u5b57\uff0c\u518d\u8fdb\u884c\u4e58\u6cd5\u8fd0\u7b97\n        # 3. \u5c06\u7ed3\u679c\u8f6c\u5316\u4e3a\u5b57\u7b26\u4e32\n        # 4. \u5c06\u7ed3\u679c\u8fdb\u884c\u7f29\u8fdb\n        # 5. \u5224\u65ad\u7ed3\u679c\u662f\u5426\u4e3a0\n        # 6. \u5224\u65ad\u7ed3\u679c\u662f\u5426\u4e3a0\n        # 7. \u5224\u65ad\u7ed3\u679c\u662f\u5426\u4e3a0\n        # 8. \u5224\u65ad\u7ed3\u679c\u662f\u5426\u4e3a0\n        # 9. \u5224\u65ad\u7ed3\u679c\u662f\u5426\u4e3a0\n        # 10. \u5224\u65ad\u7ed3\u679c\u662f\u5426\u4e3a0\n        # 11. \u5224\u65ad\ufffd"
    },
    {
        "number": 44,
        "title": "Wildcard Matching",
        "difficulty": 2,
        "prompt": "class Solution:\n    def isMatch(self, s: str, p: str) -> bool:\n        \"\"\"\n        Given an input string (s) and a pattern (p), implement wildcard pattern matching with support for '?' and '*' where:\n            '?' Matches any single character.\n            '*' Matches any sequence of characters (including the empty sequence).\n        The matching should cover the entire input string (not partial).\n        Example 1:\n        Input: s = \"aa\", p = \"a\"\n        Output: false\n        Explanation: \"a\" does not match the entire string \"aa\".\n        Example 2:\n        Input: s = \"aa\", p = \"*\"\n        Output: true\n        Explanation: '*' matches any sequence.\n        Example 3:\n        Input: s = \"cb\", p = \"?a\"\n        Output: false\n        Explanation: '?' matches 'c', but the second letter is 'a', which does not match 'b'.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        # Time: O(m * n)\n        # Space: O(m * n)\n        # m: length of s\n        # n: length of p\n        if not p:\n            return not s\n        first_match = bool(s) and p[0] in {s[0], '?'}\n        if len(p) >= 2 and p[1] == '*':\n            return self.isMatch(s, p[2:]) or (first_match and self.isMatch(s[1:], p))\n        else:\n            return first_match and self.isMatch(s[1:], p[1:])"
    },
    {
        "number": 44,
        "title": "Wildcard Matching",
        "difficulty": 2,
        "prompt": "class Solution:\n    def isMatch(self, s: str, p: str) -> bool:\n        \"\"\"\n        Given an input string (s) and a pattern (p), implement wildcard pattern matching with support for '?' and '*' where:\n            '?' Matches any single character.\n            '*' Matches any sequence of characters (including the empty sequence).\n        The matching should cover the entire input string (not partial).\n        Example 1:\n        Input: s = \"aa\", p = \"a\"\n        Output: false\n        Explanation: \"a\" does not match the entire string \"aa\".\n        Example 2:\n        Input: s = \"aa\", p = \"*\"\n        Output: true\n        Explanation: '*' matches any sequence.\n        Example 3:\n        Input: s = \"cb\", p = \"?a\"\n        Output: false\n        Explanation: '?' matches 'c', but the second letter is 'a', which does not match 'b'.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        # Solution 1: DP\n        # Time complexity: O(m*n)\n        # Space complexity: O(m*n)\n        # m, n = len(s), len(p)\n        # dp = [[False] * (n + 1) for _ in range(m + 1)]\n        # dp[0][0] = True\n        # for j in range(1, n + 1):\n        #     if p[j - 1] == '*':\n        #         dp[0][j] = dp[0][j - 1]\n        # for i in range(1, m + 1):\n        #     for j in range(1, n + 1):\n        #         if p[j - 1] == '*':\n        #             dp[i][j] = dp[i][j - 1] or dp[i - 1][j]\n        #         elif p[j - 1] == '?' or s[i - 1] == p[j - 1]:\n        #             dp[i][j] = dp[i - 1][j - 1]\n        # return dp[m][n]"
    },
    {
        "number": 45,
        "title": "Jump Game II",
        "difficulty": 1,
        "prompt": "class Solution:\n    def jump(self, nums: List[int]) -> int:\n        \"\"\"\n        You are given a 0-indexed array of integers nums of length n. You are initially positioned at nums[0].\n        Each element nums[i] represents the maximum length of a forward jump from index i. In other words, if you are at nums[i], you can jump to any nums[i + j] where:\n            0 <= j <= nums[i] and\n            i + j < n\n        Return the minimum number of jumps to reach nums[n - 1]. The test cases are generated such that you can reach nums[n - 1].\n        Example 1:\n        Input: nums = [2,3,1,1,4]\n        Output: 2\n        Explanation: The minimum number of jumps to reach the last index is 2. Jump 1 step from index 0 to 1, then 3 steps to the last index.\n        Example 2:\n        Input: nums = [2,3,0,1,4]\n        Output: 2\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        # Time: O(n^2)\n        # Space: O(n)\n        \"\"\"\n        dp[i] = min(dp[i], dp[i + 1] + 1)\n        \"\"\"\n        n = len(nums)\n        dp = [float('inf')] * n\n        dp[0] = 0\n        for i in range(n):\n            for j in range(i + 1, min(i + nums[i] + 1, n)):\n                dp[j] = min(dp[j], dp[i] + 1)\n        return dp[-1]"
    },
    {
        "number": 45,
        "title": "Jump Game II",
        "difficulty": 1,
        "prompt": "class Solution:\n    def jump(self, nums: List[int]) -> int:\n        \"\"\"\n        You are given a 0-indexed array of integers nums of length n. You are initially positioned at nums[0].\n        Each element nums[i] represents the maximum length of a forward jump from index i. In other words, if you are at nums[i], you can jump to any nums[i + j] where:\n            0 <= j <= nums[i] and\n            i + j < n\n        Return the minimum number of jumps to reach nums[n - 1]. The test cases are generated such that you can reach nums[n - 1].\n        Example 1:\n        Input: nums = [2,3,1,1,4]\n        Output: 2\n        Explanation: The minimum number of jumps to reach the last index is 2. Jump 1 step from index 0 to 1, then 3 steps to the last index.\n        Example 2:\n        Input: nums = [2,3,0,1,4]\n        Output: 2\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        # dp[i] = min(dp[i], dp[i + nums[i]] + 1)\n        # dp[i] = min(dp[i], dp[i + nums[i]] + 1)\n        # dp[i] = min(dp[i], dp[i + nums[i]] + 1)\n        # dp[i] = min(dp[i], dp[i + nums[i]] + 1)\n        # dp[i] = min(dp[i], dp[i + nums[i]] + 1)\n        # dp[i] = min(dp[i], dp[i + nums[i]] + 1)\n        # dp[i] = min(dp[i], dp[i + nums[i]] + 1)\n        # dp[i] = min(dp[i], dp[i + nums[i]] + 1)\n        # dp[i] = min(dp[i], dp[i + nums[i]] + 1)\n        # dp[i] = min(dp[i], dp[i + nums[i]] + 1)\n        # dp[i] = min(dp[i], dp[i + num"
    },
    {
        "number": 46,
        "title": "Permutations",
        "difficulty": 1,
        "prompt": "class Solution:\n    def permute(self, nums: List[int]) -> List[List[int]]:\n        \"\"\"\n        Given an array nums of distinct integers, return all the possible permutations. You can return the answer in any order.\n        Example 1:\n        Input: nums = [1,2,3]\n        Output: [[1,2,3],[1,3,2],[2,1,3],[2,3,1],[3,1,2],[3,2,1]]\n        Example 2:\n        Input: nums = [0,1]\n        Output: [[0,1],[1,0]]\n        Example 3:\n        Input: nums = [1]\n        Output: [[1]]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        if len(nums) == 1:\n            return [nums]\n        else:\n            result = []\n            for i in range(len(nums)):\n                for j in self.permute(nums[:i] + nums[i+1:]):\n                    result.append([nums[i]] + j)\n            return result\n<|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>"
    },
    {
        "number": 46,
        "title": "Permutations",
        "difficulty": 1,
        "prompt": "class Solution:\n    def permute(self, nums: List[int]) -> List[List[int]]:\n        \"\"\"\n        Given an array nums of distinct integers, return all the possible permutations. You can return the answer in any order.\n        Example 1:\n        Input: nums = [1,2,3]\n        Output: [[1,2,3],[1,3,2],[2,1,3],[2,3,1],[3,1,2],[3,2,1]]\n        Example 2:\n        Input: nums = [0,1]\n        Output: [[0,1],[1,0]]\n        Example 3:\n        Input: nums = [1]\n        Output: [[1]]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        if len(nums) == 0:\n            return []\n        if len(nums) == 1:\n            return [nums]\n        \n        result = []\n        for i in range(len(nums)):\n            n = nums[i]\n            remain = nums[:i] + nums[i+1:]\n            for p in self.permute(remain):\n                result.append([n] + p)\n        return result\n<|endoftext|>"
    },
    {
        "number": 47,
        "title": "Permutations II",
        "difficulty": 1,
        "prompt": "class Solution:\n    def permuteUnique(self, nums: List[int]) -> List[List[int]]:\n        \"\"\"\n        Given a collection of numbers, nums, that might contain duplicates, return all possible unique permutations in any order.\n        Example 1:\n        Input: nums = [1,1,2]\n        Output:\n        [[1,1,2],\n         [1,2,1],\n         [2,1,1]]\n        Example 2:\n        Input: nums = [1,2,3]\n        Output: [[1,2,3],[1,3,2],[2,1,3],[2,3,1],[3,1,2],[3,2,1]]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        nums.sort()\n        self.res = []\n        self.dfs(nums, [])\n        return self.res"
    },
    {
        "number": 47,
        "title": "Permutations II",
        "difficulty": 1,
        "prompt": "class Solution:\n    def permuteUnique(self, nums: List[int]) -> List[List[int]]:\n        \"\"\"\n        Given a collection of numbers, nums, that might contain duplicates, return all possible unique permutations in any order.\n        Example 1:\n        Input: nums = [1,1,2]\n        Output:\n        [[1,1,2],\n         [1,2,1],\n         [2,1,1]]\n        Example 2:\n        Input: nums = [1,2,3]\n        Output: [[1,2,3],[1,3,2],[2,1,3],[2,3,1],[3,1,2],[3,2,1]]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        # if not nums:\n        #     return []\n        # nums.sort()\n        # res = []\n        # self.dfs(nums, [], res)\n        # return res\n        \n        # return self.permuteUnique_v2(nums)\n        return self.permuteUnique_v3(nums)\n    \n    def dfs(self, nums, path, res):\n        if not nums:\n            res.append(path)\n            return\n        for i in range(len(nums)):\n            if i > 0 and nums[i] == nums[i-1]:\n                continue\n            self.dfs(nums[:i] + nums[i+1:], path + [nums[i]], res)\n    \n    def permuteUnique_v2(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[List[int]]\n        \"\"\"\n        nums.sort()\n        res = []\n        self.dfs(nums, [], res)\n        return res\n    \n    def dfs(self, nums, path, res):\n        if not nums:\n            res.append(path)\n            return\n        for i in"
    },
    {
        "number": 48,
        "title": "Rotate Image",
        "difficulty": 1,
        "prompt": "class Solution:\n    def rotate(self, matrix: List[List[int]]) -> None:\n        \"\"\"\n        Do not return anything, modify matrix in-place instead.\n        You are given an n x n 2D matrix representing an image, rotate the image by 90 degrees (clockwise).\n        You have to rotate the image in-place, which means you have to modify the input 2D matrix directly. DO NOT allocate another 2D matrix and do the rotation.\n        Example 1:\n        Input: matrix = [[1,2,3],[4,5,6],[7,8,9]]\n        Output: [[7,4,1],[8,5,2],[9,6,3]]\n        Example 2:\n        Input: matrix = [[5,1,9,11],[2,4,8,10],[13,3,6,7],[15,14,12,16]]\n        Output: [[15,13,2,5],[14,3,4,1],[12,6,8,9],[16,7,10,11]]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        n = len(matrix)\n        for i in range(n // 2):\n            for j in range(i, n - i - 1):\n                matrix[i][j], matrix[j][n - i - 1], matrix[n - i - 1][n - j - 1], matrix[n - j - 1][i] = matrix[n - j - 1][i], matrix[i][j], matrix[j][n - i - 1], matrix[n - i - 1][n - j - 1]"
    },
    {
        "number": 48,
        "title": "Rotate Image",
        "difficulty": 1,
        "prompt": "class Solution:\n    def rotate(self, matrix: List[List[int]]) -> None:\n        \"\"\"\n        Do not return anything, modify matrix in-place instead.\n        You are given an n x n 2D matrix representing an image, rotate the image by 90 degrees (clockwise).\n        You have to rotate the image in-place, which means you have to modify the input 2D matrix directly. DO NOT allocate another 2D matrix and do the rotation.\n        Example 1:\n        Input: matrix = [[1,2,3],[4,5,6],[7,8,9]]\n        Output: [[7,4,1],[8,5,2],[9,6,3]]\n        Example 2:\n        Input: matrix = [[5,1,9,11],[2,4,8,10],[13,3,6,7],[15,14,12,16]]\n        Output: [[15,13,2,5],[14,3,4,1],[12,6,8,9],[16,7,10,11]]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        n = len(matrix)\n        for i in range(n // 2):\n            for j in range(i, n - i - 1):\n                matrix[i][j], matrix[j][n - i - 1], matrix[n - i - 1][n - j - 1], matrix[n - j - 1][i] = matrix[n - j - 1][i], matrix[i][j], matrix[j][n - i - 1], matrix[n - i - 1][n - j - 1]"
    },
    {
        "number": 49,
        "title": "Group Anagrams",
        "difficulty": 1,
        "prompt": "class Solution:\n    def groupAnagrams(self, strs: List[str]) -> List[List[str]]:\n        \"\"\"\n        Given an array of strings strs, group the anagrams together. You can return the answer in any order.\n        An Anagram is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once.\n        Example 1:\n        Input: strs = [\"eat\",\"tea\",\"tan\",\"ate\",\"nat\",\"bat\"]\n        Output: [[\"bat\"],[\"nat\",\"tan\"],[\"ate\",\"eat\",\"tea\"]]\n        Example 2:\n        Input: strs = [\"\"]\n        Output: [[\"\"]]\n        Example 3:\n        Input: strs = [\"a\"]\n        Output: [[\"a\"]]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        # Time complexity: O(nklogk)\n        # Space complexity: O(nk)\n        # n = len(strs)\n        # if n == 0:\n        #     return []\n        # d = {}\n        # for s in strs:\n        #     key = tuple(sorted(s))\n        #     if key in d:\n        #         d[key].append(s)\n        #     else:\n        #         d[key] = [s]\n        # return list(d.values())"
    },
    {
        "number": 49,
        "title": "Group Anagrams",
        "difficulty": 1,
        "prompt": "class Solution:\n    def groupAnagrams(self, strs: List[str]) -> List[List[str]]:\n        \"\"\"\n        Given an array of strings strs, group the anagrams together. You can return the answer in any order.\n        An Anagram is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once.\n        Example 1:\n        Input: strs = [\"eat\",\"tea\",\"tan\",\"ate\",\"nat\",\"bat\"]\n        Output: [[\"bat\"],[\"nat\",\"tan\"],[\"ate\",\"eat\",\"tea\"]]\n        Example 2:\n        Input: strs = [\"\"]\n        Output: [[\"\"]]\n        Example 3:\n        Input: strs = [\"a\"]\n        Output: [[\"a\"]]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        # Time: O(N * logK), where N is the length of strs, and K is the maximum length of a string in strs.\n        # Space: O(N * K), the space used by ans.\n        ans = collections.defaultdict(list)\n        for s in strs:\n            ans[tuple(sorted(s))].append(s)\n        return ans.values()\n<|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>"
    },
    {
        "number": 50,
        "title": "Pow(x, n)",
        "difficulty": 1,
        "prompt": "class Solution:\n    def myPow(self, x: float, n: int) -> float:\n        \"\"\"\n        Implement pow(x, n), which calculates x raised to the power n (i.e., xn).\n        Example 1:\n        Input: x = 2.00000, n = 10\n        Output: 1024.00000\n        Example 2:\n        Input: x = 2.10000, n = 3\n        Output: 9.26100\n        Example 3:\n        Input: x = 2.00000, n = -2\n        Output: 0.25000\n        Explanation: 2-2 = 1/22 = 1/4 = 0.25\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        if n == 0:\n            return 1\n        if n < 0:\n            return 1 / self.myPow(x, -n)\n        if n % 2 == 0:\n            return self.myPow(x * x, n // 2)\n        else:\n            return x * self.myPow(x * x, n // 2)"
    },
    {
        "number": 50,
        "title": "Pow(x, n)",
        "difficulty": 1,
        "prompt": "class Solution:\n    def myPow(self, x: float, n: int) -> float:\n        \"\"\"\n        Implement pow(x, n), which calculates x raised to the power n (i.e., xn).\n        Example 1:\n        Input: x = 2.00000, n = 10\n        Output: 1024.00000\n        Example 2:\n        Input: x = 2.10000, n = 3\n        Output: 9.26100\n        Example 3:\n        Input: x = 2.00000, n = -2\n        Output: 0.25000\n        Explanation: 2-2 = 1/22 = 1/4 = 0.25\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        if n == 0:\n            return 1\n        elif n < 0:\n            return 1 / self.myPow(x, -n)\n        elif n % 2 == 0:\n            return self.myPow(x * x, n // 2)\n        else:\n            return x * self.myPow(x, n - 1)"
    },
    {
        "number": 51,
        "title": "N-Queens",
        "difficulty": 2,
        "prompt": "class Solution:\n    def solveNQueens(self, n: int) -> List[List[str]]:\n        \"\"\"\n        The n-queens puzzle is the problem of placing n queens on an n x n chessboard such that no two queens attack each other.\n        Given an integer n, return all distinct solutions to the n-queens puzzle. You may return the answer in any order.\n        Each solution contains a distinct board configuration of the n-queens' placement, where 'Q' and '.' both indicate a queen and an empty space, respectively.\n        Example 1:\n        Input: n = 4\n        Output: [[\".Q..\",\"...Q\",\"Q...\",\"..Q.\"],[\"..Q.\",\"Q...\",\"...Q\",\".Q..\"]]\n        Explanation: There exist two distinct solutions to the 4-queens puzzle as shown above\n        Example 2:\n        Input: n = 1\n        Output: [[\"Q\"]]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        self.res = []\n        self.cols = set()\n        self.pie = set()\n        self.na = set()\n        self.dfs(n, 0, [])\n        return self.res"
    },
    {
        "number": 51,
        "title": "N-Queens",
        "difficulty": 2,
        "prompt": "class Solution:\n    def solveNQueens(self, n: int) -> List[List[str]]:\n        \"\"\"\n        The n-queens puzzle is the problem of placing n queens on an n x n chessboard such that no two queens attack each other.\n        Given an integer n, return all distinct solutions to the n-queens puzzle. You may return the answer in any order.\n        Each solution contains a distinct board configuration of the n-queens' placement, where 'Q' and '.' both indicate a queen and an empty space, respectively.\n        Example 1:\n        Input: n = 4\n        Output: [[\".Q..\",\"...Q\",\"Q...\",\"..Q.\"],[\"..Q.\",\"Q...\",\"...Q\",\".Q..\"]]\n        Explanation: There exist two distinct solutions to the 4-queens puzzle as shown above\n        Example 2:\n        Input: n = 1\n        Output: [[\"Q\"]]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        self.res = []\n        self.n = n\n        self.solve(0, [], [])\n        return self.res"
    },
    {
        "number": 52,
        "title": "N-Queens II",
        "difficulty": 2,
        "prompt": "class Solution:\n    def totalNQueens(self, n: int) -> int:\n        \"\"\"\n        The n-queens puzzle is the problem of placing n queens on an n x n chessboard such that no two queens attack each other.\n        Given an integer n, return the number of distinct solutions to the n-queens puzzle.\n        Example 1:\n        Input: n = 4\n        Output: 2\n        Explanation: There are two distinct solutions to the 4-queens puzzle as shown.\n        Example 2:\n        Input: n = 1\n        Output: 1\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        self.res = 0\n        self.dfs(n, 0, 0, 0, 0)\n        return self.res"
    },
    {
        "number": 52,
        "title": "N-Queens II",
        "difficulty": 2,
        "prompt": "class Solution:\n    def totalNQueens(self, n: int) -> int:\n        \"\"\"\n        The n-queens puzzle is the problem of placing n queens on an n x n chessboard such that no two queens attack each other.\n        Given an integer n, return the number of distinct solutions to the n-queens puzzle.\n        Example 1:\n        Input: n = 4\n        Output: 2\n        Explanation: There are two distinct solutions to the 4-queens puzzle as shown.\n        Example 2:\n        Input: n = 1\n        Output: 1\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        self.res = 0\n        self.dfs(n, 0, 0, 0, 0)\n        return self.res"
    },
    {
        "number": 53,
        "title": "Maximum Subarray",
        "difficulty": 1,
        "prompt": "class Solution:\n    def maxSubArray(self, nums: List[int]) -> int:\n        \"\"\"\n        Given an integer array nums, find the subarray with the largest sum, and return its sum.\n        Example 1:\n        Input: nums = [-2,1,-3,4,-1,2,1,-5,4]\n        Output: 6\n        Explanation: The subarray [4,-1,2,1] has the largest sum 6.\n        Example 2:\n        Input: nums = [1]\n        Output: 1\n        Explanation: The subarray [1] has the largest sum 1.\n        Example 3:\n        Input: nums = [5,4,-1,7,8]\n        Output: 23\n        Explanation: The subarray [5,4,-1,7,8] has the largest sum 23.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        # dp[i] = max(dp[i-1] + nums[i], nums[i])\n        # dp[i] = max(dp[i-1], dp[i-1] + nums[i])\n        # dp[i] = max(dp[i-1], nums[i])\n        # dp[i] = max(dp[i-1], dp[i-1] + nums[i])\n        # dp[i] = max(dp[i-1], nums[i])\n        # dp[i] = max(dp[i-1], dp[i-1] + nums[i])\n        # dp[i] = max(dp[i-1], nums[i])\n        # dp[i] = max(dp[i-1], dp[i-1] + nums[i])\n        # dp[i] = max(dp[i-1], nums[i])\n        # dp[i] = max(dp[i-1], dp[i-1] + nums[i])\n        # dp[i] = max(dp[i-1], nums[i])\n        # dp[i] = max(dp["
    },
    {
        "number": 53,
        "title": "Maximum Subarray",
        "difficulty": 1,
        "prompt": "class Solution:\n    def maxSubArray(self, nums: List[int]) -> int:\n        \"\"\"\n        Given an integer array nums, find the subarray with the largest sum, and return its sum.\n        Example 1:\n        Input: nums = [-2,1,-3,4,-1,2,1,-5,4]\n        Output: 6\n        Explanation: The subarray [4,-1,2,1] has the largest sum 6.\n        Example 2:\n        Input: nums = [1]\n        Output: 1\n        Explanation: The subarray [1] has the largest sum 1.\n        Example 3:\n        Input: nums = [5,4,-1,7,8]\n        Output: 23\n        Explanation: The subarray [5,4,-1,7,8] has the largest sum 23.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        if not nums:\n            return 0\n        max_sum = nums[0]\n        current_sum = nums[0]\n        for i in range(1, len(nums)):\n            current_sum = max(nums[i], current_sum + nums[i])\n            max_sum = max(max_sum, current_sum)\n        return max_sum"
    },
    {
        "number": 54,
        "title": "Spiral Matrix",
        "difficulty": 1,
        "prompt": "class Solution:\n    def spiralOrder(self, matrix: List[List[int]]) -> List[int]:\n        \"\"\"\n        Given an m x n matrix, return all elements of the matrix in spiral order.\n        Example 1:\n        Input: matrix = [[1,2,3],[4,5,6],[7,8,9]]\n        Output: [1,2,3,6,9,8,7,4,5]\n        Example 2:\n        Input: matrix = [[1,2,3,4],[5,6,7,8],[9,10,11,12]]\n        Output: [1,2,3,4,8,12,11,10,9,5,6,7]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        if not matrix:\n            return []\n        \n        m, n = len(matrix), len(matrix[0])\n        res = []\n        \n        left, right, top, bottom = 0, n-1, 0, m-1\n        \n        while left <= right and top <= bottom:\n            for i in range(left, right+1):\n                res.append(matrix[top][i])\n            top += 1\n            \n            for i in range(top, bottom+1):\n                res.append(matrix[i][right])\n            right -= 1\n            \n            if left < right and top < bottom:\n                for i in range(right, left-1, -1):\n                    res.append(matrix[bottom][i])\n                bottom -= 1\n                \n                for i in range(bottom, top-1, -1):\n                    res.append(matrix[i][left])\n                left += 1\n        return res\n<|endoftext|>"
    },
    {
        "number": 54,
        "title": "Spiral Matrix",
        "difficulty": 1,
        "prompt": "class Solution:\n    def spiralOrder(self, matrix: List[List[int]]) -> List[int]:\n        \"\"\"\n        Given an m x n matrix, return all elements of the matrix in spiral order.\n        Example 1:\n        Input: matrix = [[1,2,3],[4,5,6],[7,8,9]]\n        Output: [1,2,3,6,9,8,7,4,5]\n        Example 2:\n        Input: matrix = [[1,2,3,4],[5,6,7,8],[9,10,11,12]]\n        Output: [1,2,3,4,8,12,11,10,9,5,6,7]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        if not matrix:\n            return []\n        \n        m, n = len(matrix), len(matrix[0])\n        visited = [[False] * n for _ in range(m)]\n        \n        res = []\n        \n        def dfs(i, j):\n            if i < 0 or i >= m or j < 0 or j >= n or visited[i][j]:\n                return\n            visited[i][j] = True\n            res.append(matrix[i][j])\n            dfs(i + 1, j)\n            dfs(i - 1, j)\n            dfs(i, j + 1)\n            dfs(i, j - 1)\n        \n        dfs(0, 0)\n        return res\n<|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>"
    },
    {
        "number": 55,
        "title": "Jump Game",
        "difficulty": 1,
        "prompt": "class Solution:\n    def canJump(self, nums: List[int]) -> bool:\n        \"\"\"\n        You are given an integer array nums. You are initially positioned at the array's first index, and each element in the array represents your maximum jump length at that position.\n        Return true if you can reach the last index, or false otherwise.\n        Example 1:\n        Input: nums = [2,3,1,1,4]\n        Output: true\n        Explanation: Jump 1 step from index 0 to 1, then 3 steps to the last index.\n        Example 2:\n        Input: nums = [3,2,1,0,4]\n        Output: false\n        Explanation: You will always arrive at index 3 no matter what. Its maximum jump length is 0, which makes it impossible to reach the last index.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        # dp[i] = dp[i-1] + nums[i]\n        # dp[i] = dp[i-1] + nums[i] - 1\n        # dp[i] = dp[i-1] + nums[i] - 1 + nums[i-1]\n        # dp[i] = dp[i-1] + nums[i] - 1 + nums[i-1] - 1\n        # dp[i] = dp[i-1] + nums[i] - 1 + nums[i-1] - 1 + nums[i-2]\n        # dp[i] = dp[i-1] + nums[i] - 1 + nums[i-1] - 1 + nums[i-2] - 1 + nums[i-3]\n        # dp[i] = dp[i-1] + nums[i] - 1 + nums[i-1] - 1 + nums[i-2] - 1 + nums[i-3] - 1 + nums[i-4]\n        # dp[i] = dp[i-1] + nums[i] - 1 + nums[i-1] -"
    },
    {
        "number": 55,
        "title": "Jump Game",
        "difficulty": 1,
        "prompt": "class Solution:\n    def canJump(self, nums: List[int]) -> bool:\n        \"\"\"\n        You are given an integer array nums. You are initially positioned at the array's first index, and each element in the array represents your maximum jump length at that position.\n        Return true if you can reach the last index, or false otherwise.\n        Example 1:\n        Input: nums = [2,3,1,1,4]\n        Output: true\n        Explanation: Jump 1 step from index 0 to 1, then 3 steps to the last index.\n        Example 2:\n        Input: nums = [3,2,1,0,4]\n        Output: false\n        Explanation: You will always arrive at index 3 no matter what. Its maximum jump length is 0, which makes it impossible to reach the last index.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        # Greedy\n        # Time: O(n)\n        # Space: O(1)\n        # if len(nums) == 1:\n        #     return True\n        # curr_max_idx = 0\n        # for i in range(len(nums)):\n        #     if i > curr_max_idx:\n        #         return False\n        #     curr_max_idx = max(curr_max_idx, i + nums[i])\n        # return True"
    },
    {
        "number": 56,
        "title": "Merge Intervals",
        "difficulty": 1,
        "prompt": "class Solution:\n    def merge(self, intervals: List[List[int]]) -> List[List[int]]:\n        \"\"\"\n        Given an array of intervals where intervals[i] = [starti, endi], merge all overlapping intervals, and return an array of the non-overlapping intervals that cover all the intervals in the input.\n        Example 1:\n        Input: intervals = [[1,3],[2,6],[8,10],[15,18]]\n        Output: [[1,6],[8,10],[15,18]]\n        Explanation: Since intervals [1,3] and [2,6] overlap, merge them into [1,6].\n        Example 2:\n        Input: intervals = [[1,4],[4,5]]\n        Output: [[1,5]]\n        Explanation: Intervals [1,4] and [4,5] are considered overlapping.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        if len(intervals) <= 1:\n            return intervals\n        intervals.sort(key=lambda x: x[0])\n        res = []\n        for interval in intervals:\n            if not res or res[-1][1] < interval[0]:\n                res.append(interval)\n            else:\n                res[-1][1] = max(res[-1][1], interval[1])\n        return res\n<|endoftext|>"
    },
    {
        "number": 56,
        "title": "Merge Intervals",
        "difficulty": 1,
        "prompt": "class Solution:\n    def merge(self, intervals: List[List[int]]) -> List[List[int]]:\n        \"\"\"\n        Given an array of intervals where intervals[i] = [starti, endi], merge all overlapping intervals, and return an array of the non-overlapping intervals that cover all the intervals in the input.\n        Example 1:\n        Input: intervals = [[1,3],[2,6],[8,10],[15,18]]\n        Output: [[1,6],[8,10],[15,18]]\n        Explanation: Since intervals [1,3] and [2,6] overlap, merge them into [1,6].\n        Example 2:\n        Input: intervals = [[1,4],[4,5]]\n        Output: [[1,5]]\n        Explanation: Intervals [1,4] and [4,5] are considered overlapping.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        intervals.sort(key=lambda x: x[0])\n        res = []\n        for interval in intervals:\n            if not res or res[-1][1] < interval[0]:\n                res.append(interval)\n            else:\n                res[-1][1] = max(res[-1][1], interval[1])\n        return res\n<|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>"
    },
    {
        "number": 57,
        "title": "Insert Interval",
        "difficulty": 1,
        "prompt": "class Solution:\n    def insert(self, intervals: List[List[int]], newInterval: List[int]) -> List[List[int]]:\n        \"\"\"\n        You are given an array of non-overlapping intervals intervals where intervals[i] = [starti, endi] represent the start and the end of the ith interval and intervals is sorted in ascending order by starti. You are also given an interval newInterval = [start, end] that represents the start and end of another interval.\n        Insert newInterval into intervals such that intervals is still sorted in ascending order by starti and intervals still does not have any overlapping intervals (merge overlapping intervals if necessary).\n        Return intervals after the insertion.\n        Example 1:\n        Input: intervals = [[1,3],[6,9]], newInterval = [2,5]\n        Output: [[1,5],[6,9]]\n        Example 2:\n        Input: intervals = [[1,2],[3,5],[6,7],[8,10],[12,16]], newInterval = [4,8]\n        Output: [[1,2],[3,10],[12,16]]\n        Explanation: Because the new interval [4,8] overlaps with [3,5],[6,7],[8,10].\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        # Solution 1:\n        # Time: O(n)\n        # Space: O(n)\n        # new_interval = newInterval\n        # intervals.append(new_interval)\n        # intervals.sort(key=lambda x: x[0])\n        # merged = []\n        # for interval in intervals:\n        #     if not merged or merged[-1][1] < interval[0]:\n        #         merged.append(interval)\n        #     else:\n        #         merged[-1][1] = max(merged[-1][1], interval[1])\n        # return merged"
    },
    {
        "number": 57,
        "title": "Insert Interval",
        "difficulty": 1,
        "prompt": "class Solution:\n    def insert(self, intervals: List[List[int]], newInterval: List[int]) -> List[List[int]]:\n        \"\"\"\n        You are given an array of non-overlapping intervals intervals where intervals[i] = [starti, endi] represent the start and the end of the ith interval and intervals is sorted in ascending order by starti. You are also given an interval newInterval = [start, end] that represents the start and end of another interval.\n        Insert newInterval into intervals such that intervals is still sorted in ascending order by starti and intervals still does not have any overlapping intervals (merge overlapping intervals if necessary).\n        Return intervals after the insertion.\n        Example 1:\n        Input: intervals = [[1,3],[6,9]], newInterval = [2,5]\n        Output: [[1,5],[6,9]]\n        Example 2:\n        Input: intervals = [[1,2],[3,5],[6,7],[8,10],[12,16]], newInterval = [4,8]\n        Output: [[1,2],[3,10],[12,16]]\n        Explanation: Because the new interval [4,8] overlaps with [3,5],[6,7],[8,10].\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        # Solution 1: O(n)\n        # new_start, new_end = newInterval\n        # merged = []\n        # for start, end in intervals:\n        #     if start > new_end:\n        #         merged.append([start, end])\n        #     elif end < new_start:\n        #         merged.append([start, end])\n        #     else:\n        #         new_start = min(new_start, start)\n        #         new_end = max(new_end, end)\n        # merged.append([new_start, new_end])\n        # return merged"
    },
    {
        "number": 58,
        "title": "Length of Last Word",
        "difficulty": 0,
        "prompt": "class Solution:\n    def lengthOfLastWord(self, s: str) -> int:\n        \"\"\"\n        Given a string s consisting of words and spaces, return the length of the last word in the string.\n        A word is a maximal substring consisting of non-space characters only.\n        Example 1:\n        Input: s = \"Hello World\"\n        Output: 5\n        Explanation: The last word is \"World\" with length 5.\n        Example 2:\n        Input: s = \"   fly me   to   the moon  \"\n        Output: 4\n        Explanation: The last word is \"moon\" with length 4.\n        Example 3:\n        Input: s = \"luffy is still joyboy\"\n        Output: 6\n        Explanation: The last word is \"joyboy\" with length 6.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        # \u65b9\u6cd5\u4e00\uff1a\n        # \u5148\u5c06\u5b57\u7b26\u4e32\u5206\u5272\u6210\u5217\u8868\uff0c\u7136\u540e\u53d6\u6700\u540e\u4e00\u4e2a\u5143\u7d20\uff0c\u518d\u5224\u65ad\u5143\u7d20\u662f\u5426\u4e3a\u7a7a\n        # if s.split()[-1] == '':\n        #     return 0\n        # else:\n        #     return len(s.split()[-1])"
    },
    {
        "number": 58,
        "title": "Length of Last Word",
        "difficulty": 0,
        "prompt": "class Solution:\n    def lengthOfLastWord(self, s: str) -> int:\n        \"\"\"\n        Given a string s consisting of words and spaces, return the length of the last word in the string.\n        A word is a maximal substring consisting of non-space characters only.\n        Example 1:\n        Input: s = \"Hello World\"\n        Output: 5\n        Explanation: The last word is \"World\" with length 5.\n        Example 2:\n        Input: s = \"   fly me   to   the moon  \"\n        Output: 4\n        Explanation: The last word is \"moon\" with length 4.\n        Example 3:\n        Input: s = \"luffy is still joyboy\"\n        Output: 6\n        Explanation: The last word is \"joyboy\" with length 6.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        s = s.strip()\n        if not s:\n            return 0\n        return len(s.split()[-1])"
    },
    {
        "number": 59,
        "title": "Spiral Matrix II",
        "difficulty": 1,
        "prompt": "class Solution:\n    def generateMatrix(self, n: int) -> List[List[int]]:\n        \"\"\"\n        Given a positive integer n, generate an n x n matrix filled with elements from 1 to n2 in spiral order.\n        Example 1:\n        Input: n = 3\n        Output: [[1,2,3],[8,9,4],[7,6,5]]\n        Example 2:\n        Input: n = 1\n        Output: [[1]]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        if n == 1:\n            return [[1]]\n        res = [[0] * n for _ in range(n)]\n        left, right, top, bottom = 0, n - 1, 0, n - 1\n        num = 1\n        while left <= right and top <= bottom:\n            for i in range(left, right + 1):\n                res[top][i] = num\n                num += 1\n            for i in range(top + 1, bottom):\n                res[i][right] = num\n                num += 1\n            if left < right and top < bottom:\n                for i in range(right - 1, left, -1):\n                    res[bottom][i] = num\n                    num += 1\n                for i in range(bottom, top, -1):\n                    res[i][left] = num\n                    num += 1\n            left, right, top, bottom = left + 1, right - 1, top + 1, bottom - 1\n        return res"
    },
    {
        "number": 59,
        "title": "Spiral Matrix II",
        "difficulty": 1,
        "prompt": "class Solution:\n    def generateMatrix(self, n: int) -> List[List[int]]:\n        \"\"\"\n        Given a positive integer n, generate an n x n matrix filled with elements from 1 to n2 in spiral order.\n        Example 1:\n        Input: n = 3\n        Output: [[1,2,3],[8,9,4],[7,6,5]]\n        Example 2:\n        Input: n = 1\n        Output: [[1]]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        # \u65b9\u6cd5\u4e00\uff1a\u66b4\u529b\u6cd5\n        # matrix = [[0] * n for _ in range(n)]\n        # num = 1\n        # for i in range(n):\n        #     for j in range(n):\n        #         matrix[i][j] = num\n        #         num += 1\n        # return matrix"
    },
    {
        "number": 60,
        "title": "Permutation Sequence",
        "difficulty": 2,
        "prompt": "class Solution:\n    def getPermutation(self, n: int, k: int) -> str:\n        \"\"\"\n        The set [1, 2, 3,..., n] contains a total of n! unique permutations.\n        By listing and labeling all of the permutations in order, we get the following sequence for n = 3:\n            \"123\"\n            \"132\"\n            \"213\"\n            \"231\"\n            \"312\"\n            \"321\"\n        Given n and k, return the kth permutation sequence.\n        Example 1:\n        Input: n = 3, k = 3\n        Output: \"213\"\n        Example 2:\n        Input: n = 4, k = 9\n        Output: \"2314\"\n        Example 3:\n        Input: n = 3, k = 1\n        Output: \"123\"\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        # https://leetcode.com/problems/permutation-sequence/discuss/102235/Python-solution-with-detailed-explanation\n        # https://leetcode.com/problems/permutation-sequence/discuss/102235/Python-solution-with-detailed-explanation\n        # https://leetcode.com/problems/permutation-sequence/discuss/102235/Python-solution-with-detailed-explanation\n        # https://leetcode.com/problems/permutation-sequence/discuss/102235/Python-solution-with-detailed-explanation\n        # https://leetcode.com/problems/permutation-sequence/discuss/102235/Python-solution-with-detailed-explanation\n        # https://leetcode.com/problems/permutation-sequence/discuss/102235/Python-solution-with-detailed-explanation\n        # https://leetcode.com/problems/permutation-sequence/discuss/102235/Python-solution-with-detailed-explanation\n        # https://leetcode.com/problems/permutation-sequence/discuss/102235/Python-"
    },
    {
        "number": 60,
        "title": "Permutation Sequence",
        "difficulty": 2,
        "prompt": "class Solution:\n    def getPermutation(self, n: int, k: int) -> str:\n        \"\"\"\n        The set [1, 2, 3,..., n] contains a total of n! unique permutations.\n        By listing and labeling all of the permutations in order, we get the following sequence for n = 3:\n            \"123\"\n            \"132\"\n            \"213\"\n            \"231\"\n            \"312\"\n            \"321\"\n        Given n and k, return the kth permutation sequence.\n        Example 1:\n        Input: n = 3, k = 3\n        Output: \"213\"\n        Example 2:\n        Input: n = 4, k = 9\n        Output: \"2314\"\n        Example 3:\n        Input: n = 3, k = 1\n        Output: \"123\"\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        # \u5229\u7528\u9012\u5f52\u7684\u601d\u60f3\uff0c\u6bcf\u6b21\u9012\u5f52\u90fd\u662f\u4ece\u5269\u4f59\u7684\u6570\u5b57\u4e2d\u9009\u62e9\u4e00\u4e2a\u6570\u5b57\uff0c\u7136\u540e\u628a\u5269\u4f59\u7684\u6570\u5b57\u5220\u9664\uff0c\u6700\u540e\u5269\u4e0b\u7684\u6570\u5b57\u5c31\u662f\u7b2ck\u4e2a\u6570\u5b57\n        # \u5982\u679ck\u662f1\uff0c\u5219\u8fd4\u56de\u7b2c\u4e00\u4e2a\u6570\u5b57\uff0c\u5982\u679ck\u662fn\uff0c\u5219\u8fd4\u56de\u6700\u540e\u4e00\u4e2a\u6570\u5b57\n        # \u5982\u679ck\u5728\u4e2d\u95f4\uff0c\u5219\u8fd4\u56de\u9012\u5f52\u7684\u7ed3\u679c\uff0c\u7136\u540e\u628a\u9012\u5f52\u7ed3\u679c\u7684\u7b2c\u4e00\u4e2a\u6570\u5b57\u6362\u6210\u7b2ck\u4e2a\u6570\u5b57\uff0c\u7136\u540e\u628a\u9012\u5f52\u7ed3\u679c\u7684\u6700\u540e\u4e00\u4e2a\u6570\u5b57\u6362\u6210\u7b2ck-1\u4e2a\u6570\ufffd"
    },
    {
        "number": 61,
        "title": "Rotate List",
        "difficulty": 1,
        "prompt": "class Solution:\n    def rotateRight(self, head: Optional[ListNode], k: int) -> Optional[ListNode]:\n        \"\"\"\n        Given the head of a linked list, rotate the list to the right by k places.\n        Example 1:\n        Input: head = [1,2,3,4,5], k = 2\n        Output: [4,5,1,2,3]\n        Example 2:\n        Input: head = [0,1,2], k = 4\n        Output: [2,0,1]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        if not head:\n            return None\n        if not head.next:\n            return head\n        n = 1\n        cur = head\n        while cur.next:\n            cur = cur.next\n            n += 1\n        cur.next = head\n        cur = head\n        for _ in range(n - k % n - 1):\n            cur = cur.next\n        res = cur.next\n        cur.next = None\n        return res"
    },
    {
        "number": 61,
        "title": "Rotate List",
        "difficulty": 1,
        "prompt": "class Solution:\n    def rotateRight(self, head: Optional[ListNode], k: int) -> Optional[ListNode]:\n        \"\"\"\n        Given the head of a linked list, rotate the list to the right by k places.\n        Example 1:\n        Input: head = [1,2,3,4,5], k = 2\n        Output: [4,5,1,2,3]\n        Example 2:\n        Input: head = [0,1,2], k = 4\n        Output: [2,0,1]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        if not head:\n            return None\n        \n        # find the length of the linked list\n        length = 0\n        curr = head\n        while curr:\n            length += 1\n            curr = curr.next\n        \n        # find the new head\n        new_head = head\n        for _ in range(k % length):\n            new_head = new_head.next\n        \n        # find the new tail\n        new_tail = head\n        for _ in range(length - k % length - 1):\n            new_tail = new_tail.next\n        \n        # set the new tail's next to None\n        new_tail.next = None\n        \n        # set the new head's next to the old tail\n        new_head.next = head\n        \n        return new_head\n<|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>"
    },
    {
        "number": 62,
        "title": "Unique Paths",
        "difficulty": 1,
        "prompt": "class Solution:\n    def uniquePaths(self, m: int, n: int) -> int:\n        \"\"\"\n        There is a robot on an m x n grid. The robot is initially located at the top-left corner (i.e., grid[0][0]). The robot tries to move to the bottom-right corner (i.e., grid[m - 1][n - 1]). The robot can only move either down or right at any point in time.\n        Given the two integers m and n, return the number of possible unique paths that the robot can take to reach the bottom-right corner.\n        The test cases are generated so that the answer will be less than or equal to 2 * 109.\n        Example 1:\n        Input: m = 3, n = 7\n        Output: 28\n        Example 2:\n        Input: m = 3, n = 2\n        Output: 3\n        Explanation: From the top-left corner, there are a total of 3 ways to reach the bottom-right corner:\n        1. Right -> Down -> Down\n        2. Down -> Down -> Right\n        3. Down -> Right -> Down\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        # dp[i][j] = dp[i-1][j] + dp[i][j-1]\n        # dp[i][j] = dp[i-1][j] + dp[i][j-1]\n        # dp[i][j] = dp[i-1][j] + dp[i][j-1]\n        # dp[i][j] = dp[i-1][j] + dp[i][j-1]\n        # dp[i][j] = dp[i-1][j] + dp[i][j-1]\n        # dp[i][j] = dp[i-1][j] + dp[i][j-1]\n        # dp[i][j] = dp[i-1][j] + dp[i][j-1]\n        # dp[i][j] = dp[i-1][j] + dp[i][j-1]\n        # dp[i][j] = dp[i-1][j] + dp[i][j-1]\n        # dp[i][j] = dp[i-1][j] + dp[i][j-1]\n"
    },
    {
        "number": 62,
        "title": "Unique Paths",
        "difficulty": 1,
        "prompt": "class Solution:\n    def uniquePaths(self, m: int, n: int) -> int:\n        \"\"\"\n        There is a robot on an m x n grid. The robot is initially located at the top-left corner (i.e., grid[0][0]). The robot tries to move to the bottom-right corner (i.e., grid[m - 1][n - 1]). The robot can only move either down or right at any point in time.\n        Given the two integers m and n, return the number of possible unique paths that the robot can take to reach the bottom-right corner.\n        The test cases are generated so that the answer will be less than or equal to 2 * 109.\n        Example 1:\n        Input: m = 3, n = 7\n        Output: 28\n        Example 2:\n        Input: m = 3, n = 2\n        Output: 3\n        Explanation: From the top-left corner, there are a total of 3 ways to reach the bottom-right corner:\n        1. Right -> Down -> Down\n        2. Down -> Down -> Right\n        3. Down -> Right -> Down\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        # dp[i][j] = dp[i-1][j] + dp[i][j-1]\n        # dp[i][j] = dp[i-1][j] + dp[i][j-1]\n        # dp[i][j] = dp[i-1][j] + dp[i][j-1]\n        # dp[i][j] = dp[i-1][j] + dp[i][j-1]\n        # dp[i][j] = dp[i-1][j] + dp[i][j-1]\n        # dp[i][j] = dp[i-1][j] + dp[i][j-1]\n        # dp[i][j] = dp[i-1][j] + dp[i][j-1]\n        # dp[i][j] = dp[i-1][j] + dp[i][j-1]\n        # dp[i][j] = dp[i-1][j] + dp[i][j-1]\n        # dp[i][j] = dp[i-1][j] + dp[i][j-1]\n"
    },
    {
        "number": 63,
        "title": "Unique Paths II",
        "difficulty": 1,
        "prompt": "class Solution:\n    def uniquePathsWithObstacles(self, obstacleGrid: List[List[int]]) -> int:\n        \"\"\"\n        You are given an m x n integer array grid. There is a robot initially located at the top-left corner (i.e., grid[0][0]). The robot tries to move to the bottom-right corner (i.e., grid[m - 1][n - 1]). The robot can only move either down or right at any point in time.\n        An obstacle and space are marked as 1 or 0 respectively in grid. A path that the robot takes cannot include any square that is an obstacle.\n        Return the number of possible unique paths that the robot can take to reach the bottom-right corner.\n        The testcases are generated so that the answer will be less than or equal to 2 * 109.\n        Example 1:\n        Input: obstacleGrid = [[0,0,0],[0,1,0],[0,0,0]]\n        Output: 2\n        Explanation: There is one obstacle in the middle of the 3x3 grid above.\n        There are two ways to reach the bottom-right corner:\n        1. Right -> Right -> Down -> Down\n        2. Down -> Down -> Right -> Right\n        Example 2:\n        Input: obstacleGrid = [[0,1],[0,0]]\n        Output: 1\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        m = len(obstacleGrid)\n        n = len(obstacleGrid[0])\n        dp = [[0] * n for _ in range(m)]\n        for i in range(m):\n            if obstacleGrid[i][0] == 1:\n                break\n            dp[i][0] = 1\n        for j in range(n):\n            if obstacleGrid[0][j] == 1:\n                break\n            dp[0][j] = 1\n        for i in range(1, m):\n            for j in range(1, n):\n                if obstacleGrid[i][j] == 1:\n                    dp[i][j] = 0\n                else:\n                    dp[i][j] = dp[i - 1][j] + dp[i][j - 1]\n        return dp[m - 1][n - 1]"
    },
    {
        "number": 63,
        "title": "Unique Paths II",
        "difficulty": 1,
        "prompt": "class Solution:\n    def uniquePathsWithObstacles(self, obstacleGrid: List[List[int]]) -> int:\n        \"\"\"\n        You are given an m x n integer array grid. There is a robot initially located at the top-left corner (i.e., grid[0][0]). The robot tries to move to the bottom-right corner (i.e., grid[m - 1][n - 1]). The robot can only move either down or right at any point in time.\n        An obstacle and space are marked as 1 or 0 respectively in grid. A path that the robot takes cannot include any square that is an obstacle.\n        Return the number of possible unique paths that the robot can take to reach the bottom-right corner.\n        The testcases are generated so that the answer will be less than or equal to 2 * 109.\n        Example 1:\n        Input: obstacleGrid = [[0,0,0],[0,1,0],[0,0,0]]\n        Output: 2\n        Explanation: There is one obstacle in the middle of the 3x3 grid above.\n        There are two ways to reach the bottom-right corner:\n        1. Right -> Right -> Down -> Down\n        2. Down -> Down -> Right -> Right\n        Example 2:\n        Input: obstacleGrid = [[0,1],[0,0]]\n        Output: 1\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        m, n = len(obstacleGrid), len(obstacleGrid[0])\n        dp = [[0] * n for _ in range(m)]\n        dp[0][0] = 1 - obstacleGrid[0][0]\n        for i in range(1, m):\n            dp[i][0] = dp[i - 1][0] * (1 - obstacleGrid[i][0])\n        for j in range(1, n):\n            dp[0][j] = dp[0][j - 1] * (1 - obstacleGrid[0][j])\n        for i in range(1, m):\n            for j in range(1, n):\n                dp[i][j] = (dp[i - 1][j] + dp[i][j - 1]) * (1 - obstacleGrid[i][j])\n        return dp[-1][-1]"
    },
    {
        "number": 64,
        "title": "Minimum Path Sum",
        "difficulty": 1,
        "prompt": "class Solution:\n    def minPathSum(self, grid: List[List[int]]) -> int:\n        \"\"\"\n        Given a m x n grid filled with non-negative numbers, find a path from top left to bottom right, which minimizes the sum of all numbers along its path.\n        Note: You can only move either down or right at any point in time.\n        Example 1:\n        Input: grid = [[1,3,1],[1,5,1],[4,2,1]]\n        Output: 7\n        Explanation: Because the path 1 \u2192 3 \u2192 1 \u2192 1 \u2192 1 minimizes the sum.\n        Example 2:\n        Input: grid = [[1,2,3],[4,5,6]]\n        Output: 12\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        # dp[i][j] = min(dp[i-1][j], dp[i][j-1]) + grid[i][j]\n        # dp[0][0] = grid[0][0]\n        # dp[0][j] = dp[0][j-1] + grid[0][j]\n        # dp[i][0] = dp[i-1][0] + grid[i][0]\n        # dp[i][j] = min(dp[i-1][j], dp[i][j-1]) + grid[i][j]\n        # dp[i][j] = min(dp[i-1][j], dp[i][j-1]) + grid[i][j]\n        # dp[i][j] = min(dp[i-1][j], dp[i][j-1]) + grid[i][j]\n        # dp[i][j] = min(dp[i-1][j], dp[i][j-1]) + grid[i][j]\n        # dp[i][j] = min(dp[i-1][j], dp[i][j-1]) + grid[i][j]\n        # dp[i]["
    },
    {
        "number": 64,
        "title": "Minimum Path Sum",
        "difficulty": 1,
        "prompt": "class Solution:\n    def minPathSum(self, grid: List[List[int]]) -> int:\n        \"\"\"\n        Given a m x n grid filled with non-negative numbers, find a path from top left to bottom right, which minimizes the sum of all numbers along its path.\n        Note: You can only move either down or right at any point in time.\n        Example 1:\n        Input: grid = [[1,3,1],[1,5,1],[4,2,1]]\n        Output: 7\n        Explanation: Because the path 1 \u2192 3 \u2192 1 \u2192 1 \u2192 1 minimizes the sum.\n        Example 2:\n        Input: grid = [[1,2,3],[4,5,6]]\n        Output: 12\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        m = len(grid)\n        n = len(grid[0])\n        dp = [[0 for _ in range(n)] for _ in range(m)]\n        dp[0][0] = grid[0][0]\n        for i in range(1, m):\n            dp[i][0] = dp[i-1][0] + grid[i][0]\n        for j in range(1, n):\n            dp[0][j] = dp[0][j-1] + grid[0][j]\n        for i in range(1, m):\n            for j in range(1, n):\n                dp[i][j] = min(dp[i-1][j], dp[i][j-1]) + grid[i][j]\n        return dp[m-1][n-1]"
    },
    {
        "number": 65,
        "title": "Valid Number",
        "difficulty": 2,
        "prompt": "class Solution:\n    def isNumber(self, s: str) -> bool:\n        \"\"\"\n        A valid number can be split up into these components (in order):\n            A decimal number or an integer.\n            (Optional) An 'e' or 'E', followed by an integer.\n        A decimal number can be split up into these components (in order):\n            (Optional) A sign character (either '+' or '-').\n            One of the following formats:\n                One or more digits, followed by a dot '.'.\n                One or more digits, followed by a dot '.', followed by one or more digits.\n                A dot '.', followed by one or more digits.\n        An integer can be split up into these components (in order):\n            (Optional) A sign character (either '+' or '-').\n            One or more digits.\n        For example, all the following are valid numbers: [\"2\", \"0089\", \"-0.1\", \"+3.14\", \"4.\", \"-.9\", \"2e10\", \"-90E3\", \"3e+7\", \"+6e-1\", \"53.5e93\", \"-123.456e789\"], while the following are not valid numbers: [\"abc\", \"1a\", \"1e\", \"e3\", \"99e2.5\", \"--6\", \"-+3\", \"95a54e53\"].\n        Given a string s, return true if s is a valid number.\n        Example 1:\n        Input: s = \"0\"\n        Output: true\n        Example 2:\n        Input: s = \"e\"\n        Output: false\n        Example 3:\n        Input: s = \".\"\n        Output: false\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        # Edge case\n        if len(s) == 0:\n            return False"
    },
    {
        "number": 65,
        "title": "Valid Number",
        "difficulty": 2,
        "prompt": "class Solution:\n    def isNumber(self, s: str) -> bool:\n        \"\"\"\n        A valid number can be split up into these components (in order):\n            A decimal number or an integer.\n            (Optional) An 'e' or 'E', followed by an integer.\n        A decimal number can be split up into these components (in order):\n            (Optional) A sign character (either '+' or '-').\n            One of the following formats:\n                One or more digits, followed by a dot '.'.\n                One or more digits, followed by a dot '.', followed by one or more digits.\n                A dot '.', followed by one or more digits.\n        An integer can be split up into these components (in order):\n            (Optional) A sign character (either '+' or '-').\n            One or more digits.\n        For example, all the following are valid numbers: [\"2\", \"0089\", \"-0.1\", \"+3.14\", \"4.\", \"-.9\", \"2e10\", \"-90E3\", \"3e+7\", \"+6e-1\", \"53.5e93\", \"-123.456e789\"], while the following are not valid numbers: [\"abc\", \"1a\", \"1e\", \"e3\", \"99e2.5\", \"--6\", \"-+3\", \"95a54e53\"].\n        Given a string s, return true if s is a valid number.\n        Example 1:\n        Input: s = \"0\"\n        Output: true\n        Example 2:\n        Input: s = \"e\"\n        Output: false\n        Example 3:\n        Input: s = \".\"\n        Output: false\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        # \u6808\n        # \u6808\u4e2d\u5b58\u50a8\u7684\u662f\u5f53\u524d\u5b57\u7b26\u4e32\u7684\u6240\u6709\u72b6\u6001\n        # \u5982\u679c\u5f53\u524d\u5b57\u7b26\u4e32\u662f\u6570\u5b57\uff0c\u5219\u6808\u4e2d\u5b58\u50a8\u7684\u662f\u5f53\u524d\u5b57\u7b26\u4e32\u7684\u6240\u6709\u72b6\u6001\n        # \u5982\u679c\u5f53\u524d\u5b57\u7b26\u4e32\u662fe\uff0c\u5219\u6808\u4e2d\u5b58\u50a8\u7684\u662f\u5f53\u524d\u5b57\u7b26\u4e32\u7684\u6240\u6709\u72b6\u6001\n        # \u5982\u679c\u5f53\u524d\u5b57\u7b26\u4e32\u662f.\uff0c\u5219\u6808\u4e2d\u5b58\u50a8\u7684\u662f\u5f53\u524d\u5b57\u7b26\u4e32\u7684\u6240\u6709\u72b6\u6001\n        # \u5982\u679c\u5f53\u524d\u5b57\u7b26\u4e32\u662f+\uff0c\u5219\u6808\u4e2d\u5b58\u50a8\u7684\u662f\u5f53\u524d\u5b57\u7b26\u4e32\u7684\u6240\u6709\u72b6\u6001\n        # \u5982\u679c\u5f53\u524d\u5b57\u7b26\u4e32\u662f-\uff0c\u5219\u6808\u4e2d"
    },
    {
        "number": 66,
        "title": "Plus One",
        "difficulty": 0,
        "prompt": "class Solution:\n    def plusOne(self, digits: List[int]) -> List[int]:\n        \"\"\"\n        You are given a large integer represented as an integer array digits, where each digits[i] is the ith digit of the integer. The digits are ordered from most significant to least significant in left-to-right order. The large integer does not contain any leading 0's.\n        Increment the large integer by one and return the resulting array of digits.\n        Example 1:\n        Input: digits = [1,2,3]\n        Output: [1,2,4]\n        Explanation: The array represents the integer 123.\n        Incrementing by one gives 123 + 1 = 124.\n        Thus, the result should be [1,2,4].\n        Example 2:\n        Input: digits = [4,3,2,1]\n        Output: [4,3,2,2]\n        Explanation: The array represents the integer 4321.\n        Incrementing by one gives 4321 + 1 = 4322.\n        Thus, the result should be [4,3,2,2].\n        Example 3:\n        Input: digits = [9]\n        Output: [1,0]\n        Explanation: The array represents the integer 9.\n        Incrementing by one gives 9 + 1 = 10.\n        Thus, the result should be [1,0].\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        # Solution 1:\n        # for i in range(len(digits) - 1, -1, -1):\n        #     if digits[i] < 9:\n        #         digits[i] += 1\n        #         return digits\n        #     digits[i] = 0\n        # digits.insert(0, 1)\n        # return digits"
    },
    {
        "number": 66,
        "title": "Plus One",
        "difficulty": 0,
        "prompt": "class Solution:\n    def plusOne(self, digits: List[int]) -> List[int]:\n        \"\"\"\n        You are given a large integer represented as an integer array digits, where each digits[i] is the ith digit of the integer. The digits are ordered from most significant to least significant in left-to-right order. The large integer does not contain any leading 0's.\n        Increment the large integer by one and return the resulting array of digits.\n        Example 1:\n        Input: digits = [1,2,3]\n        Output: [1,2,4]\n        Explanation: The array represents the integer 123.\n        Incrementing by one gives 123 + 1 = 124.\n        Thus, the result should be [1,2,4].\n        Example 2:\n        Input: digits = [4,3,2,1]\n        Output: [4,3,2,2]\n        Explanation: The array represents the integer 4321.\n        Incrementing by one gives 4321 + 1 = 4322.\n        Thus, the result should be [4,3,2,2].\n        Example 3:\n        Input: digits = [9]\n        Output: [1,0]\n        Explanation: The array represents the integer 9.\n        Incrementing by one gives 9 + 1 = 10.\n        Thus, the result should be [1,0].\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        # Solution 1:\n        # for i in range(len(digits)-1, -1, -1):\n        #     if digits[i] < 9:\n        #         digits[i] += 1\n        #         return digits\n        #     digits[i] = 0\n        # digits.insert(0, 1)\n        # return digits"
    },
    {
        "number": 67,
        "title": "Add Binary",
        "difficulty": 0,
        "prompt": "class Solution:\n    def addBinary(self, a: str, b: str) -> str:\n        \"\"\"\n        Given two binary strings a and b, return their sum as a binary string.\n        Example 1:\n        Input: a = \"11\", b = \"1\"\n        Output: \"100\"\n        Example 2:\n        Input: a = \"1010\", b = \"1011\"\n        Output: \"10101\"\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        # \u601d\u8def\uff1a\n        # 1. \u5148\u5c06\u4e24\u4e2a\u5b57\u7b26\u4e32\u8f6c\u6362\u6210\u5217\u8868\uff0c\u7136\u540e\u6309\u4f4d\u76f8\u52a0\n        # 2. \u5c06\u76f8\u52a0\u540e\u7684\u5217\u8868\u8f6c\u6362\u6210\u5b57\u7b26\u4e32\n        # 3. \u5c06\u5b57\u7b26\u4e32\u8f6c\u6362\u6210\u4e8c\u8fdb\u5236\uff0c\u7136\u540e\u6309\u4f4d\u53d6\u53cd\n        # 4. \u5c06\u4e8c\u8fdb\u5236\u5b57\u7b26\u4e32\u8f6c\u6362\u6210\u5217\u8868\uff0c\u7136\u540e\u6309\u4f4d\u53d6\u53cd\n        # 5. \u5c06\u5217\u8868\u8f6c\u6362\u6210\u5b57\u7b26\u4e32\n        # 6. \u5c06\u5b57\u7b26\u4e32\u8f6c\u6362\u6210\u4e8c\u8fdb\u5236\uff0c\u7136\u540e\u6309\u4f4d\u53d6\u53cd\n        # 7. \u5c06\u4e8c\u8fdb\u5236\u5b57\u7b26\u4e32\u8f6c\u6362\u6210\u5217\u8868\uff0c\u7136\u540e\ufffd"
    },
    {
        "number": 67,
        "title": "Add Binary",
        "difficulty": 0,
        "prompt": "class Solution:\n    def addBinary(self, a: str, b: str) -> str:\n        \"\"\"\n        Given two binary strings a and b, return their sum as a binary string.\n        Example 1:\n        Input: a = \"11\", b = \"1\"\n        Output: \"100\"\n        Example 2:\n        Input: a = \"1010\", b = \"1011\"\n        Output: \"10101\"\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        # return bin(int(a, 2) + int(b, 2))[2:]\n        # return bin(int(a, 2) ^ int(b, 2))[2:]\n        # return bin(int(a, 2) & int(b, 2))[2:]\n        # return bin(int(a, 2) | int(b, 2))[2:]\n        # return bin(int(a, 2) << int(b, 2))[2:]\n        # return bin(int(a, 2) >> int(b, 2))[2:]\n        # return bin(int(a, 2) ^ int(b, 2))[2:]\n        # return bin(int(a, 2) & int(b, 2))[2:]\n        # return bin(int(a, 2) | int(b, 2))[2:]\n        # return bin(int(a, 2) << int(b, 2))[2:]\n        # return bin(int(a, 2) >> int(b, 2))[2:]\n        # return bin(int(a, 2) ^ int(b, 2))[2:]\n        # return bin(int(a, 2) & int(b, 2))[2:]\n        # return bin(int(a, 2) | int("
    },
    {
        "number": 68,
        "title": "Text Justification",
        "difficulty": 2,
        "prompt": "class Solution:\n    def fullJustify(self, words: List[str], maxWidth: int) -> List[str]:\n        \"\"\"\n        Given an array of strings words and a width maxWidth, format the text such that each line has exactly maxWidth characters and is fully (left and right) justified.\n        You should pack your words in a greedy approach; that is, pack as many words as you can in each line. Pad extra spaces'' when necessary so that each line has exactly maxWidth characters.\n        Extra spaces between words should be distributed as evenly as possible. If the number of spaces on a line does not divide evenly between words, the empty slots on the left will be assigned more spaces than the slots on the right.\n        For the last line of text, it should be left-justified, and no extra space is inserted between words.\n        Note:\n            A word is defined as a character sequence consisting of non-space characters only.\n            Each word's length is guaranteed to be greater than 0 and not exceed maxWidth.\n            The input array words contains at least one word.\n        Example 1:\n        Input: words = [\"This\", \"is\", \"an\", \"example\", \"of\", \"text\", \"justification.\"], maxWidth = 16\n        Output:\n        [\n           \"This    is    an\",\n           \"example  of text\",\n           \"justification.  \"\n        ]\n        Example 2:\n        Input: words = [\"What\",\"must\",\"be\",\"acknowledgment\",\"shall\",\"be\"], maxWidth = 16\n        Output:\n        [\n          \"What   must   be\",\n          \"acknowledgment  \",\n          \"shall be        \"\n        ]\n        Explanation: Note that the last line is \"shall be    \" instead of \"shall     be\", because the last line must be left-justified instead of fully-justified.\n        Note that the second line is also left-justified because it contains only one word.\n        Example 3:\n        Input: words = [\"Science\",\"is\",\"what\",\"we\",\"understand\",\"well\",\"enough\",\"to\",\"explain\",\"to\",\"a\",\"computer.\",\"Art\",\"is\",\"everything\",\"else\",\"we\",\"do\"], maxWidth = 20\n        Output:\n        [\n          \"Science  is  what we\",\n          \"understand      well\",\n          \"enough to explain to\",\n          \"a  computer.  Art is\",\n          \"everything  else  we\",\n          \"do                  \"\n        ]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        res = []\n        curr_line = []\n        curr_len = 0\n        for word in words:\n            if curr_len + len(word) + len(curr_line) <= maxWidth:\n                curr_line.append(word)\n                curr_len += len(word)\n            else:\n                res.append(self.justify(curr_line, maxWidth))\n                curr_line = [word]\n                curr_len = len(word)\n        res.append(self.justify(curr_line, maxWidth))\n        return res"
    },
    {
        "number": 68,
        "title": "Text Justification",
        "difficulty": 2,
        "prompt": "class Solution:\n    def fullJustify(self, words: List[str], maxWidth: int) -> List[str]:\n        \"\"\"\n        Given an array of strings words and a width maxWidth, format the text such that each line has exactly maxWidth characters and is fully (left and right) justified.\n        You should pack your words in a greedy approach; that is, pack as many words as you can in each line. Pad extra spaces'' when necessary so that each line has exactly maxWidth characters.\n        Extra spaces between words should be distributed as evenly as possible. If the number of spaces on a line does not divide evenly between words, the empty slots on the left will be assigned more spaces than the slots on the right.\n        For the last line of text, it should be left-justified, and no extra space is inserted between words.\n        Note:\n            A word is defined as a character sequence consisting of non-space characters only.\n            Each word's length is guaranteed to be greater than 0 and not exceed maxWidth.\n            The input array words contains at least one word.\n        Example 1:\n        Input: words = [\"This\", \"is\", \"an\", \"example\", \"of\", \"text\", \"justification.\"], maxWidth = 16\n        Output:\n        [\n           \"This    is    an\",\n           \"example  of text\",\n           \"justification.  \"\n        ]\n        Example 2:\n        Input: words = [\"What\",\"must\",\"be\",\"acknowledgment\",\"shall\",\"be\"], maxWidth = 16\n        Output:\n        [\n          \"What   must   be\",\n          \"acknowledgment  \",\n          \"shall be        \"\n        ]\n        Explanation: Note that the last line is \"shall be    \" instead of \"shall     be\", because the last line must be left-justified instead of fully-justified.\n        Note that the second line is also left-justified because it contains only one word.\n        Example 3:\n        Input: words = [\"Science\",\"is\",\"what\",\"we\",\"understand\",\"well\",\"enough\",\"to\",\"explain\",\"to\",\"a\",\"computer.\",\"Art\",\"is\",\"everything\",\"else\",\"we\",\"do\"], maxWidth = 20\n        Output:\n        [\n          \"Science  is  what we\",\n          \"understand      well\",\n          \"enough to explain to\",\n          \"a  computer.  Art is\",\n          \"everything  else  we\",\n          \"do                  \"\n        ]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        res = []\n        cur_line = []\n        cur_len = 0\n        for w in words:\n            if cur_len + len(w) + len(cur_line) <= maxWidth:\n                cur_line.append(w)\n                cur_len += len(w)\n            else:\n                res.append(self.justify(cur_line, maxWidth))\n                cur_line = [w]\n                cur_len = len(w)\n        res.append(self.justify(cur_line, maxWidth))\n        return res"
    },
    {
        "number": 69,
        "title": "Sqrt(x)",
        "difficulty": 0,
        "prompt": "class Solution:\n    def mySqrt(self, x: int) -> int:\n        \"\"\"\n        Given a non-negative integer x, return the square root of x rounded down to the nearest integer. The returned integer should be non-negative as well.\n        You must not use any built-in exponent function or operator.\n            For example, do not use pow(x, 0.5) in c++ or x ** 0.5 in python.\n        Example 1:\n        Input: x = 4\n        Output: 2\n        Explanation: The square root of 4 is 2, so we return 2.\n        Example 2:\n        Input: x = 8\n        Output: 2\n        Explanation: The square root of 8 is 2.82842..., and since we round it down to the nearest integer, 2 is returned.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        # binary search\n        # if x == 0:\n        #     return 0\n        # left, right = 1, x\n        # while left <= right:\n        #     mid = (left + right) // 2\n        #     if mid ** 2 == x:\n        #         return mid\n        #     elif mid ** 2 < x:\n        #         left = mid + 1\n        #     else:\n        #         right = mid - 1\n        # return left - 1"
    },
    {
        "number": 69,
        "title": "Sqrt(x)",
        "difficulty": 0,
        "prompt": "class Solution:\n    def mySqrt(self, x: int) -> int:\n        \"\"\"\n        Given a non-negative integer x, return the square root of x rounded down to the nearest integer. The returned integer should be non-negative as well.\n        You must not use any built-in exponent function or operator.\n            For example, do not use pow(x, 0.5) in c++ or x ** 0.5 in python.\n        Example 1:\n        Input: x = 4\n        Output: 2\n        Explanation: The square root of 4 is 2, so we return 2.\n        Example 2:\n        Input: x = 8\n        Output: 2\n        Explanation: The square root of 8 is 2.82842..., and since we round it down to the nearest integer, 2 is returned.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        if x == 0:\n            return 0\n        if x == 1:\n            return 1\n        left, right = 1, x\n        while left <= right:\n            mid = (left + right) // 2\n            if mid * mid <= x < (mid + 1) * (mid + 1):\n                return mid\n            elif x < mid * mid:\n                right = mid\n            else:\n                left = mid + 1\n        return left - 1"
    },
    {
        "number": 70,
        "title": "Climbing Stairs",
        "difficulty": 0,
        "prompt": "class Solution:\n    def climbStairs(self, n: int) -> int:\n        \"\"\"\n        You are climbing a staircase. It takes n steps to reach the top.\n        Each time you can either climb 1 or 2 steps. In how many distinct ways can you climb to the top?\n        Example 1:\n        Input: n = 2\n        Output: 2\n        Explanation: There are two ways to climb to the top.\n        1. 1 step + 1 step\n        2. 2 steps\n        Example 2:\n        Input: n = 3\n        Output: 3\n        Explanation: There are three ways to climb to the top.\n        1. 1 step + 1 step + 1 step\n        2. 1 step + 2 steps\n        3. 2 steps + 1 step\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        if n == 1:\n            return 1\n        dp = [0] * n\n        dp[0] = 1\n        dp[1] = 2\n        for i in range(2, n):\n            dp[i] = dp[i - 1] + dp[i - 2]\n        return dp[n - 1]"
    },
    {
        "number": 70,
        "title": "Climbing Stairs",
        "difficulty": 0,
        "prompt": "class Solution:\n    def climbStairs(self, n: int) -> int:\n        \"\"\"\n        You are climbing a staircase. It takes n steps to reach the top.\n        Each time you can either climb 1 or 2 steps. In how many distinct ways can you climb to the top?\n        Example 1:\n        Input: n = 2\n        Output: 2\n        Explanation: There are two ways to climb to the top.\n        1. 1 step + 1 step\n        2. 2 steps\n        Example 2:\n        Input: n = 3\n        Output: 3\n        Explanation: There are three ways to climb to the top.\n        1. 1 step + 1 step + 1 step\n        2. 1 step + 2 steps\n        3. 2 steps + 1 step\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        if n == 1:\n            return 1\n        if n == 2:\n            return 2\n        dp = [0] * (n + 1)\n        dp[1] = 1\n        dp[2] = 2\n        for i in range(3, n + 1):\n            dp[i] = dp[i - 1] + dp[i - 2]\n        return dp[n]"
    },
    {
        "number": 71,
        "title": "Simplify Path",
        "difficulty": 1,
        "prompt": "class Solution:\n    def simplifyPath(self, path: str) -> str:\n        \"\"\"\n        Given a string path, which is an absolute path (starting with a slash '/') to a file or directory in a Unix-style file system, convert it to the simplified canonical path.\n        In a Unix-style file system, a period '.' refers to the current directory, a double period '..' refers to the directory up a level, and any multiple consecutive slashes (i.e. '//') are treated as a single slash '/'. For this problem, any other format of periods such as '...' are treated as file/directory names.\n        The canonical path should have the following format:\n            The path starts with a single slash '/'.\n            Any two directories are separated by a single slash '/'.\n            The path does not end with a trailing '/'.\n            The path only contains the directories on the path from the root directory to the target file or directory (i.e., no period '.' or double period '..')\n        Return the simplified canonical path.\n        Example 1:\n        Input: path = \"/home/\"\n        Output: \"/home\"\n        Explanation: Note that there is no trailing slash after the last directory name.\n        Example 2:\n        Input: path = \"/../\"\n        Output: \"/\"\n        Explanation: Going one level up from the root directory is a no-op, as the root level is the highest level you can go.\n        Example 3:\n        Input: path = \"/home//foo/\"\n        Output: \"/home/foo\"\n        Explanation: In the canonical path, multiple consecutive slashes are replaced by a single one.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        stack = []\n        for s in path.split('/'):\n            if s == '..':\n                if stack:\n                    stack.pop()\n            elif s and s!= '.':\n                stack.append(s)\n        return '/' + '/'.join(stack)"
    },
    {
        "number": 71,
        "title": "Simplify Path",
        "difficulty": 1,
        "prompt": "class Solution:\n    def simplifyPath(self, path: str) -> str:\n        \"\"\"\n        Given a string path, which is an absolute path (starting with a slash '/') to a file or directory in a Unix-style file system, convert it to the simplified canonical path.\n        In a Unix-style file system, a period '.' refers to the current directory, a double period '..' refers to the directory up a level, and any multiple consecutive slashes (i.e. '//') are treated as a single slash '/'. For this problem, any other format of periods such as '...' are treated as file/directory names.\n        The canonical path should have the following format:\n            The path starts with a single slash '/'.\n            Any two directories are separated by a single slash '/'.\n            The path does not end with a trailing '/'.\n            The path only contains the directories on the path from the root directory to the target file or directory (i.e., no period '.' or double period '..')\n        Return the simplified canonical path.\n        Example 1:\n        Input: path = \"/home/\"\n        Output: \"/home\"\n        Explanation: Note that there is no trailing slash after the last directory name.\n        Example 2:\n        Input: path = \"/../\"\n        Output: \"/\"\n        Explanation: Going one level up from the root directory is a no-op, as the root level is the highest level you can go.\n        Example 3:\n        Input: path = \"/home//foo/\"\n        Output: \"/home/foo\"\n        Explanation: In the canonical path, multiple consecutive slashes are replaced by a single one.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        # split the path into a list\n        path_list = path.split('/')\n        # remove the empty string\n        path_list = list(filter(None, path_list))\n        # initialize the stack\n        stack = []\n        # iterate through the list\n        for item in path_list:\n            # if the item is a directory\n            if item == '..':\n                # if the stack is not empty\n                if stack:\n                    # pop the last item\n                    stack.pop()\n            # if the item is a directory\n            elif item == '.':\n                # do nothing\n                pass\n            # if the item is a file\n            else:\n                # append the item to the stack\n                stack.append(item)\n        # join the stack into a string\n        simplified_path = '/' + '/'.join(stack)\n        # return the simplified path\n        return simplified_path"
    },
    {
        "number": 72,
        "title": "Edit Distance",
        "difficulty": 2,
        "prompt": "class Solution:\n    def minDistance(self, word1: str, word2: str) -> int:\n        \"\"\"\n        Given two strings word1 and word2, return the minimum number of operations required to convert word1 to word2.\n        You have the following three operations permitted on a word:\n            Insert a character\n            Delete a character\n            Replace a character\n        Example 1:\n        Input: word1 = \"horse\", word2 = \"ros\"\n        Output: 3\n        Explanation: \n        horse -> rorse (replace 'h' with 'r')\n        rorse -> rose (remove 'r')\n        rose -> ros (remove 'e')\n        Example 2:\n        Input: word1 = \"intention\", word2 = \"execution\"\n        Output: 5\n        Explanation: \n        intention -> inention (remove 't')\n        inention -> enention (replace 'i' with 'e')\n        enention -> exention (replace 'n' with 'x')\n        exention -> exection (replace 'n' with 'c')\n        exection -> execution (insert 'u')\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        m, n = len(word1), len(word2)\n        dp = [[0 for _ in range(n+1)] for _ in range(m+1)]\n        for i in range(m+1):\n            dp[i][0] = i\n        for j in range(n+1):\n            dp[0][j] = j\n        for i in range(1, m+1):\n            for j in range(1, n+1):\n                if word1[i-1] == word2[j-1]:\n                    dp[i][j] = dp[i-1][j-1]\n                else:\n                    dp[i][j] = min(dp[i-1][j-1], dp[i-1][j], dp[i][j-1]) + 1\n        return dp[m][n]"
    },
    {
        "number": 72,
        "title": "Edit Distance",
        "difficulty": 2,
        "prompt": "class Solution:\n    def minDistance(self, word1: str, word2: str) -> int:\n        \"\"\"\n        Given two strings word1 and word2, return the minimum number of operations required to convert word1 to word2.\n        You have the following three operations permitted on a word:\n            Insert a character\n            Delete a character\n            Replace a character\n        Example 1:\n        Input: word1 = \"horse\", word2 = \"ros\"\n        Output: 3\n        Explanation: \n        horse -> rorse (replace 'h' with 'r')\n        rorse -> rose (remove 'r')\n        rose -> ros (remove 'e')\n        Example 2:\n        Input: word1 = \"intention\", word2 = \"execution\"\n        Output: 5\n        Explanation: \n        intention -> inention (remove 't')\n        inention -> enention (replace 'i' with 'e')\n        enention -> exention (replace 'n' with 'x')\n        exention -> exection (replace 'n' with 'c')\n        exection -> execution (insert 'u')\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        m, n = len(word1), len(word2)\n        dp = [[0] * (n + 1) for _ in range(m + 1)]\n        for i in range(m + 1):\n            dp[i][0] = i\n        for j in range(n + 1):\n            dp[0][j] = j\n        for i in range(1, m + 1):\n            for j in range(1, n + 1):\n                if word1[i - 1] == word2[j - 1]:\n                    dp[i][j] = dp[i - 1][j - 1]\n                else:\n                    dp[i][j] = min(dp[i - 1][j - 1], dp[i - 1][j], dp[i][j - 1]) + 1\n        return dp[m][n]"
    },
    {
        "number": 73,
        "title": "Set Matrix Zeroes",
        "difficulty": 1,
        "prompt": "class Solution:\n    def setZeroes(self, matrix: List[List[int]]) -> None:\n        \"\"\"\n        Do not return anything, modify matrix in-place instead.\n        Given an m x n integer matrix matrix, if an element is 0, set its entire row and column to 0's.\n        You must do it in place.\n        Example 1:\n        Input: matrix = [[1,1,1],[1,0,1],[1,1,1]]\n        Output: [[1,0,1],[0,0,0],[1,0,1]]\n        Example 2:\n        Input: matrix = [[0,1,2,0],[3,4,5,2],[1,3,1,5]]\n        Output: [[0,0,0,0],[0,4,5,0],[0,3,1,0]]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        m, n = len(matrix), len(matrix[0])\n        row, col = set(), set()\n        for i in range(m):\n            for j in range(n):\n                if matrix[i][j] == 0:\n                    row.add(i)\n                    col.add(j)\n        for i in range(m):\n            for j in range(n):\n                if i in row or j in col:\n                    matrix[i][j] = 0\n        return matrix"
    },
    {
        "number": 73,
        "title": "Set Matrix Zeroes",
        "difficulty": 1,
        "prompt": "class Solution:\n    def setZeroes(self, matrix: List[List[int]]) -> None:\n        \"\"\"\n        Do not return anything, modify matrix in-place instead.\n        Given an m x n integer matrix matrix, if an element is 0, set its entire row and column to 0's.\n        You must do it in place.\n        Example 1:\n        Input: matrix = [[1,1,1],[1,0,1],[1,1,1]]\n        Output: [[1,0,1],[0,0,0],[1,0,1]]\n        Example 2:\n        Input: matrix = [[0,1,2,0],[3,4,5,2],[1,3,1,5]]\n        Output: [[0,0,0,0],[0,4,5,0],[0,3,1,0]]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        m, n = len(matrix), len(matrix[0])\n        row_set, col_set = set(), set()\n        for i in range(m):\n            for j in range(n):\n                if matrix[i][j] == 0:\n                    row_set.add(i)\n                    col_set.add(j)\n        for i in range(m):\n            for j in range(n):\n                if i in row_set or j in col_set:\n                    matrix[i][j] = 0"
    },
    {
        "number": 74,
        "title": "Search a 2D Matrix",
        "difficulty": 1,
        "prompt": "class Solution:\n    def searchMatrix(self, matrix: List[List[int]], target: int) -> bool:\n        \"\"\"\n        You are given an m x n integer matrix matrix with the following two properties:\n            Each row is sorted in non-decreasing order.\n            The first integer of each row is greater than the last integer of the previous row.\n        Given an integer target, return true if target is in matrix or false otherwise.\n        You must write a solution in O(log(m * n)) time complexity.\n        Example 1:\n        Input: matrix = [[1,3,5,7],[10,11,16,20],[23,30,34,60]], target = 3\n        Output: true\n        Example 2:\n        Input: matrix = [[1,3,5,7],[10,11,16,20],[23,30,34,60]], target = 13\n        Output: false\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        if not matrix:\n            return False\n        m, n = len(matrix), len(matrix[0])\n        left, right = 0, m * n - 1\n        while left <= right:\n            mid = left + (right - left) // 2\n            if matrix[mid // n][mid % n] == target:\n                return True\n            elif matrix[mid // n][mid % n] < target:\n                left = mid + 1\n            else:\n                right = mid - 1\n        return False\n<|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>"
    },
    {
        "number": 74,
        "title": "Search a 2D Matrix",
        "difficulty": 1,
        "prompt": "class Solution:\n    def searchMatrix(self, matrix: List[List[int]], target: int) -> bool:\n        \"\"\"\n        You are given an m x n integer matrix matrix with the following two properties:\n            Each row is sorted in non-decreasing order.\n            The first integer of each row is greater than the last integer of the previous row.\n        Given an integer target, return true if target is in matrix or false otherwise.\n        You must write a solution in O(log(m * n)) time complexity.\n        Example 1:\n        Input: matrix = [[1,3,5,7],[10,11,16,20],[23,30,34,60]], target = 3\n        Output: true\n        Example 2:\n        Input: matrix = [[1,3,5,7],[10,11,16,20],[23,30,34,60]], target = 13\n        Output: false\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        # binary search\n        # O(log(m * n)) time\n        # O(1) space\n        m = len(matrix)\n        n = len(matrix[0])\n        left, right = 0, m * n - 1\n        while left <= right:\n            mid = (left + right) // 2\n            num = matrix[mid // n][mid % n]\n            if num == target:\n                return True\n            elif num < target:\n                left = mid + 1\n            else:\n                right = mid - 1\n        return False\n<|endoftext|>"
    },
    {
        "number": 75,
        "title": "Sort Colors",
        "difficulty": 1,
        "prompt": "class Solution:\n    def sortColors(self, nums: List[int]) -> None:\n        \"\"\"\n        Do not return anything, modify nums in-place instead.\n        Given an array nums with n objects colored red, white, or blue, sort them in-place so that objects of the same color are adjacent, with the colors in the order red, white, and blue.\n        We will use the integers 0, 1, and 2 to represent the color red, white, and blue, respectively.\n        You must solve this problem without using the library's sort function.\n        Example 1:\n        Input: nums = [2,0,2,1,1,0]\n        Output: [0,0,1,1,2,2]\n        Example 2:\n        Input: nums = [2,0,1]\n        Output: [0,1,2]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        # [0, 1, 2]\n        # [0, 1, 2]\n        # [0, 1, 2]\n        # [0, 1, 2]\n        # [0, 1, 2]\n        # [0, 1, 2]\n        # [0, 1, 2]\n        # [0, 1, 2]\n        # [0, 1, 2]\n        # [0, 1, 2]\n        # [0, 1, 2]\n        # [0, 1, 2]\n        # [0, 1, 2]\n        # [0, 1, 2]\n        # [0, 1, 2]\n        # [0, 1, 2]\n        # [0, 1, 2]\n        # [0, 1, 2]\n        # [0, 1, 2]\n        # [0, 1, 2]\n        # [0, 1, 2]\n        # [0, 1, 2]\n        # [0, 1, 2]\n        # [0, 1, 2]\n        # [0, 1, 2]\n        # [0, 1, 2]\n        # [0, 1, 2]\n        # [0, 1, 2]\n        # [0, 1, 2]\n        # [0, 1, 2]\n"
    },
    {
        "number": 75,
        "title": "Sort Colors",
        "difficulty": 1,
        "prompt": "class Solution:\n    def sortColors(self, nums: List[int]) -> None:\n        \"\"\"\n        Do not return anything, modify nums in-place instead.\n        Given an array nums with n objects colored red, white, or blue, sort them in-place so that objects of the same color are adjacent, with the colors in the order red, white, and blue.\n        We will use the integers 0, 1, and 2 to represent the color red, white, and blue, respectively.\n        You must solve this problem without using the library's sort function.\n        Example 1:\n        Input: nums = [2,0,2,1,1,0]\n        Output: [0,0,1,1,2,2]\n        Example 2:\n        Input: nums = [2,0,1]\n        Output: [0,1,2]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        # \u53cc\u6307\u9488\n        # \u5148\u627e\u52300\u7684\u4f4d\u7f6e\uff0c\u7136\u540e\u628a0\u653e\u5230\u6700\u524d\u9762\uff0c\u7136\u540e\u627e\u52301\u7684\u4f4d\u7f6e\uff0c\u628a1\u653e\u52300\u7684\u540e\u9762\uff0c\u7136\u540e\u627e\u52302\u7684\u4f4d\u7f6e\uff0c\u628a2\u653e\u52301\u7684\u540e\u9762\n        # \u65f6\u95f4\u590d\u6742\u5ea6O(n)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6O(1)\n        # \u6ce8\u610f\uff1a\u8fd9\u91cc\u4e0d\u80fd\u7528\u4e09\u4e2a\u6307\u9488\uff0c\u56e0\u4e3a\u53ef\u80fd\u4f1a\u6709\u91cd\u590d\u7684\u6570\u5b57\n        # \u6240\u4ee5\u53ea\u80fd\u7528\u4e24\u4e2a\u6307\u9488\n        # \u5148\u627e\u52300\u7684\u4f4d\u7f6e\uff0c\u7136\u540e\u628a0\u653e\u5230\u6700\u524d\u9762\uff0c\u7136\u540e\u627e\u52301\u7684\u4f4d\u7f6e\uff0c\ufffd"
    },
    {
        "number": 76,
        "title": "Minimum Window Substring",
        "difficulty": 2,
        "prompt": "class Solution:\n    def minWindow(self, s: str, t: str) -> str:\n        \"\"\"\n        Given two strings s and t of lengths m and n respectively, return the minimum window substring of s such that every character in t (including duplicates) is included in the window. If there is no such substring, return the empty string \"\".\n        The testcases will be generated such that the answer is unique.\n        Example 1:\n        Input: s = \"ADOBECODEBANC\", t = \"ABC\"\n        Output: \"BANC\"\n        Explanation: The minimum window substring \"BANC\" includes 'A', 'B', and 'C' from string t.\n        Example 2:\n        Input: s = \"a\", t = \"a\"\n        Output: \"a\"\n        Explanation: The entire string s is the minimum window.\n        Example 3:\n        Input: s = \"a\", t = \"aa\"\n        Output: \"\"\n        Explanation: Both 'a's from t must be included in the window.\n        Since the largest window of s only has one 'a', return empty string.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        # Time: O(m + n), space: O(m + n)\n        if not t or not s: return \"\"\n        from collections import Counter\n        t_counter = Counter(t)\n        required = len(t_counter)\n        formed = 0\n        l, r = 0, 0\n        window_counts = {}\n        ans = float(\"inf\"), None, None\n        while r < len(s):\n            character = s[r]\n            window_counts[character] = window_counts.get(character, 0) + 1\n            if character in t_counter and window_counts[character] == t_counter[character]:\n                formed += 1\n            while l <= r and formed == required:\n                character = s[l]\n                if r - l + 1 < ans[0]:\n                    ans = (r - l + 1, l, r)\n                window_counts[character] -= 1\n                if character in t_counter and window_counts[character] < t_counter[character]:\n                    formed -= 1\n                l += 1\n            r += 1\n        return \"\" if ans[0] == float(\"inf\") else s[ans[1] : ans[2] + 1]"
    },
    {
        "number": 76,
        "title": "Minimum Window Substring",
        "difficulty": 2,
        "prompt": "class Solution:\n    def minWindow(self, s: str, t: str) -> str:\n        \"\"\"\n        Given two strings s and t of lengths m and n respectively, return the minimum window substring of s such that every character in t (including duplicates) is included in the window. If there is no such substring, return the empty string \"\".\n        The testcases will be generated such that the answer is unique.\n        Example 1:\n        Input: s = \"ADOBECODEBANC\", t = \"ABC\"\n        Output: \"BANC\"\n        Explanation: The minimum window substring \"BANC\" includes 'A', 'B', and 'C' from string t.\n        Example 2:\n        Input: s = \"a\", t = \"a\"\n        Output: \"a\"\n        Explanation: The entire string s is the minimum window.\n        Example 3:\n        Input: s = \"a\", t = \"aa\"\n        Output: \"\"\n        Explanation: Both 'a's from t must be included in the window.\n        Since the largest window of s only has one 'a', return empty string.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        # sliding window\n        # O(m+n)\n        # O(m+n)\n        if not s or not t:\n            return \"\"\n        \n        # Dictionary which keeps a count of all the unique characters in t.\n        dict_t = Counter(t)"
    },
    {
        "number": 77,
        "title": "Combinations",
        "difficulty": 1,
        "prompt": "class Solution:\n    def combine(self, n: int, k: int) -> List[List[int]]:\n        \"\"\"\n        Given two integers n and k, return all possible combinations of k numbers chosen from the range [1, n].\n        You may return the answer in any order.\n        Example 1:\n        Input: n = 4, k = 2\n        Output: [[1,2],[1,3],[1,4],[2,3],[2,4],[3,4]]\n        Explanation: There are 4 choose 2 = 6 total combinations.\n        Note that combinations are unordered, i.e., [1,2] and [2,1] are considered to be the same combination.\n        Example 2:\n        Input: n = 1, k = 1\n        Output: [[1]]\n        Explanation: There is 1 choose 1 = 1 total combination.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        if n < k:\n            return []\n        if n == k:\n            return [[i for i in range(1, n+1)]]\n        if k == 1:\n            return [[i] for i in range(1, n+1)]\n        return self.combine_helper(n, k, 1, [])"
    },
    {
        "number": 77,
        "title": "Combinations",
        "difficulty": 1,
        "prompt": "class Solution:\n    def combine(self, n: int, k: int) -> List[List[int]]:\n        \"\"\"\n        Given two integers n and k, return all possible combinations of k numbers chosen from the range [1, n].\n        You may return the answer in any order.\n        Example 1:\n        Input: n = 4, k = 2\n        Output: [[1,2],[1,3],[1,4],[2,3],[2,4],[3,4]]\n        Explanation: There are 4 choose 2 = 6 total combinations.\n        Note that combinations are unordered, i.e., [1,2] and [2,1] are considered to be the same combination.\n        Example 2:\n        Input: n = 1, k = 1\n        Output: [[1]]\n        Explanation: There is 1 choose 1 = 1 total combination.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        def dfs(n, k, start, path, res):\n            if len(path) == k:\n                res.append(path[:])\n                return\n            for i in range(start, n+1):\n                path.append(i)\n                dfs(n, k, i+1, path, res)\n                path.pop()\n        res = []\n        dfs(n, k, 1, [], res)\n        return res\n<|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>"
    },
    {
        "number": 78,
        "title": "Subsets",
        "difficulty": 1,
        "prompt": "class Solution:\n    def subsets(self, nums: List[int]) -> List[List[int]]:\n        \"\"\"\n        Given an integer array nums of unique elements, return all possible subsets (the power set).\n        The solution set must not contain duplicate subsets. Return the solution in any order.\n        Example 1:\n        Input: nums = [1,2,3]\n        Output: [[],[1],[2],[1,2],[3],[1,3],[2,3],[1,2,3]]\n        Example 2:\n        Input: nums = [0]\n        Output: [[],[0]]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        # Solution 1: DFS\n        # Time complexity: O(n * 2^n)\n        # Space complexity: O(n * 2^n)\n        # def dfs(nums, index, path, res):\n        #     res.append(path)\n        #     for i in range(index, len(nums)):\n        #         dfs(nums, i + 1, path + [nums[i]], res)\n        #\n        # res = []\n        # dfs(nums, 0, [], res)\n        # return res"
    },
    {
        "number": 78,
        "title": "Subsets",
        "difficulty": 1,
        "prompt": "class Solution:\n    def subsets(self, nums: List[int]) -> List[List[int]]:\n        \"\"\"\n        Given an integer array nums of unique elements, return all possible subsets (the power set).\n        The solution set must not contain duplicate subsets. Return the solution in any order.\n        Example 1:\n        Input: nums = [1,2,3]\n        Output: [[],[1],[2],[1,2],[3],[1,3],[2,3],[1,2,3]]\n        Example 2:\n        Input: nums = [0]\n        Output: [[],[0]]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        self.res = []\n        self.backtrack(nums, [], 0)\n        return self.res"
    },
    {
        "number": 79,
        "title": "Word Search",
        "difficulty": 1,
        "prompt": "class Solution:\n    def exist(self, board: List[List[str]], word: str) -> bool:\n        \"\"\"\n        Given an m x n grid of characters board and a string word, return true if word exists in the grid.\n        The word can be constructed from letters of sequentially adjacent cells, where adjacent cells are horizontally or vertically neighboring. The same letter cell may not be used more than once.\n        Example 1:\n        Input: board = [[\"A\",\"B\",\"C\",\"E\"],[\"S\",\"F\",\"C\",\"S\"],[\"A\",\"D\",\"E\",\"E\"]], word = \"ABCCED\"\n        Output: true\n        Example 2:\n        Input: board = [[\"A\",\"B\",\"C\",\"E\"],[\"S\",\"F\",\"C\",\"S\"],[\"A\",\"D\",\"E\",\"E\"]], word = \"SEE\"\n        Output: true\n        Example 3:\n        Input: board = [[\"A\",\"B\",\"C\",\"E\"],[\"S\",\"F\",\"C\",\"S\"],[\"A\",\"D\",\"E\",\"E\"]], word = \"ABCB\"\n        Output: false\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        if not board:\n            return False\n        m, n = len(board), len(board[0])\n        for i in range(m):\n            for j in range(n):\n                if self.dfs(board, i, j, word):\n                    return True\n        return False"
    },
    {
        "number": 79,
        "title": "Word Search",
        "difficulty": 1,
        "prompt": "class Solution:\n    def exist(self, board: List[List[str]], word: str) -> bool:\n        \"\"\"\n        Given an m x n grid of characters board and a string word, return true if word exists in the grid.\n        The word can be constructed from letters of sequentially adjacent cells, where adjacent cells are horizontally or vertically neighboring. The same letter cell may not be used more than once.\n        Example 1:\n        Input: board = [[\"A\",\"B\",\"C\",\"E\"],[\"S\",\"F\",\"C\",\"S\"],[\"A\",\"D\",\"E\",\"E\"]], word = \"ABCCED\"\n        Output: true\n        Example 2:\n        Input: board = [[\"A\",\"B\",\"C\",\"E\"],[\"S\",\"F\",\"C\",\"S\"],[\"A\",\"D\",\"E\",\"E\"]], word = \"SEE\"\n        Output: true\n        Example 3:\n        Input: board = [[\"A\",\"B\",\"C\",\"E\"],[\"S\",\"F\",\"C\",\"S\"],[\"A\",\"D\",\"E\",\"E\"]], word = \"ABCB\"\n        Output: false\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        if not board:\n            return False\n        m, n = len(board), len(board[0])\n        for i in range(m):\n            for j in range(n):\n                if self.dfs(board, i, j, word):\n                    return True\n        return False"
    },
    {
        "number": 80,
        "title": "Remove Duplicates from Sorted Array II",
        "difficulty": 1,
        "prompt": "class Solution:\n    def removeDuplicates(self, nums: List[int]) -> int:\n        \"\"\"\n        Given an integer array nums sorted in non-decreasing order, remove some duplicates in-place such that each unique element appears at most twice. The relative order of the elements should be kept the same.\n        Since it is impossible to change the length of the array in some languages, you must instead have the result be placed in the first part of the array nums. More formally, if there are k elements after removing the duplicates, then the first k elements of nums should hold the final result. It does not matter what you leave beyond the first k elements.\n        Return k after placing the final result in the first k slots of nums.\n        Do not allocate extra space for another array. You must do this by modifying the input array in-place with O(1) extra memory.\n        Custom Judge:\n        The judge will test your solution with the following code:\n        int[] nums = [...]; // Input array\n        int[] expectedNums = [...]; // The expected answer with correct length\n        int k = removeDuplicates(nums); // Calls your implementation\n        assert k == expectedNums.length;\n        for (int i = 0; i < k; i++) {\n            assert nums[i] == expectedNums[i];\n        }\n        If all assertions pass, then your solution will be accepted.\n        Example 1:\n        Input: nums = [1,1,1,2,2,3]\n        Output: 5, nums = [1,1,2,2,3,_]\n        Explanation: Your function should return k = 5, with the first five elements of nums being 1, 1, 2, 2 and 3 respectively.\n        It does not matter what you leave beyond the returned k (hence they are underscores).\n        Example 2:\n        Input: nums = [0,0,1,1,1,1,2,3,3]\n        Output: 7, nums = [0,0,1,1,2,3,3,_,_]\n        Explanation: Your function should return k = 7, with the first seven elements of nums being 0, 0, 1, 1, 2, 3 and 3 respectively.\n        It does not matter what you leave beyond the returned k (hence they are underscores).\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        # \u601d\u8def\uff1a\u53cc\u6307\u9488\uff0c\u4e00\u4e2a\u6307\u5411\u5f53\u524d\u4f4d\u7f6e\uff0c\u4e00\u4e2a\u6307\u5411\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\n        # \u5f53\u524d\u4f4d\u7f6e\u7684\u5143\u7d20\u4e0d\u91cd\u590d\uff0c\u5219\u6307\u9488\u540e\u79fb\n        # \u5f53\u524d\u4f4d\u7f6e\u7684\u5143\u7d20\u91cd\u590d\u4e86\uff0c\u5219\u6307\u9488\u540e\u79fb\uff0c\u6307\u9488\u540e\u79fb\u7684\u5143\u7d20\u4e0d\u91cd\u590d\uff0c\u5219\u6307\u9488\u540e\u79fb\n        # \u5f53\u524d\u4f4d\u7f6e\u7684\u5143\u7d20\u91cd\u590d\u4e86\uff0c\u6307\u9488\u540e\u79fb\uff0c\u6307\u9488\u540e\u79fb\u7684\u5143\u7d20\u4e0d\u91cd\u590d\uff0c\u5219\u6307\u9488\u540e\u79fb\n        # \u5f53\u524d\u4f4d\u7f6e\u7684\u5143\u7d20\u91cd\u590d\u4e86\uff0c\u6307\u9488\u540e\ufffd"
    },
    {
        "number": 80,
        "title": "Remove Duplicates from Sorted Array II",
        "difficulty": 1,
        "prompt": "class Solution:\n    def removeDuplicates(self, nums: List[int]) -> int:\n        \"\"\"\n        Given an integer array nums sorted in non-decreasing order, remove some duplicates in-place such that each unique element appears at most twice. The relative order of the elements should be kept the same.\n        Since it is impossible to change the length of the array in some languages, you must instead have the result be placed in the first part of the array nums. More formally, if there are k elements after removing the duplicates, then the first k elements of nums should hold the final result. It does not matter what you leave beyond the first k elements.\n        Return k after placing the final result in the first k slots of nums.\n        Do not allocate extra space for another array. You must do this by modifying the input array in-place with O(1) extra memory.\n        Custom Judge:\n        The judge will test your solution with the following code:\n        int[] nums = [...]; // Input array\n        int[] expectedNums = [...]; // The expected answer with correct length\n        int k = removeDuplicates(nums); // Calls your implementation\n        assert k == expectedNums.length;\n        for (int i = 0; i < k; i++) {\n            assert nums[i] == expectedNums[i];\n        }\n        If all assertions pass, then your solution will be accepted.\n        Example 1:\n        Input: nums = [1,1,1,2,2,3]\n        Output: 5, nums = [1,1,2,2,3,_]\n        Explanation: Your function should return k = 5, with the first five elements of nums being 1, 1, 2, 2 and 3 respectively.\n        It does not matter what you leave beyond the returned k (hence they are underscores).\n        Example 2:\n        Input: nums = [0,0,1,1,1,1,2,3,3]\n        Output: 7, nums = [0,0,1,1,2,3,3,_,_]\n        Explanation: Your function should return k = 7, with the first seven elements of nums being 0, 0, 1, 1, 2, 3 and 3 respectively.\n        It does not matter what you leave beyond the returned k (hence they are underscores).\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        # \u601d\u8def\uff1a\u53cc\u6307\u9488\n        # \u53cc\u6307\u9488\u7684\u601d\u8def\u662f\uff0c\u6bcf\u6b21\u904d\u5386\uff0c\u5982\u679c\u5f53\u524d\u5143\u7d20\u548c\u524d\u4e00\u4e2a\u5143\u7d20\u76f8\u540c\uff0c\u90a3\u4e48\u5c31\u628a\u524d\u4e00\u4e2a\u5143\u7d20\u7684\u4e0b\u6807\u653e\u5230\u53cc\u6307\u9488\u7684\u540e\u9762\uff0c\u540c\u65f6\u53cc\u6307\u9488\u540e\u79fb\u4e00\u4f4d\n        # \u5982\u679c\u5f53\u524d\u5143\u7d20\u548c\u524d\u4e00\u4e2a\u5143\u7d20\u4e0d\u540c\uff0c\u90a3\u4e48\u5c31\u628a\u5f53\u524d\u5143\u7d20\u7684\u4e0b\u6807\u653e\u5230\u53cc\u6307\u9488\u7684\u540e\u9762\uff0c\u540c\u65f6\u53cc\u6307\u9488\u540e\u79fb\u4e00\u4f4d\n        # \u5982\u679c\u53cc\u6307\u9488\u6307\u5411\u7684\u5143\u7d20\u4e2a\u6570\u5927\u4e8e2\uff0c\u90a3"
    },
    {
        "number": 81,
        "title": "Search in Rotated Sorted Array II",
        "difficulty": 1,
        "prompt": "class Solution:\n    def search(self, nums: List[int], target: int) -> bool:\n        \"\"\"\n        There is an integer array nums sorted in non-decreasing order (not necessarily with distinct values).\n        Before being passed to your function, nums is rotated at an unknown pivot index k (0 <= k < nums.length) such that the resulting array is [nums[k], nums[k+1],..., nums[n-1], nums[0], nums[1],..., nums[k-1]] (0-indexed). For example, [0,1,2,4,4,4,5,6,6,7] might be rotated at pivot index 5 and become [4,5,6,6,7,0,1,2,4,4].\n        Given the array nums after the rotation and an integer target, return true if target is in nums, or false if it is not in nums.\n        You must decrease the overall operation steps as much as possible.\n        Example 1:\n        Input: nums = [2,5,6,0,0,1,2], target = 0\n        Output: true\n        Example 2:\n        Input: nums = [2,5,6,0,0,1,2], target = 3\n        Output: false\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        if not nums:\n            return False\n        l, r = 0, len(nums) - 1\n        while l <= r:\n            mid = l + (r - l) // 2\n            if nums[mid] == target:\n                return True\n            if nums[l] == nums[mid] == nums[r]:\n                l += 1\n                r -= 1\n            elif nums[l] <= nums[mid]:\n                if nums[l] <= target < nums[mid]:\n                    r = mid - 1\n                else:\n                    l = mid + 1\n            else:\n                if nums[mid] < target <= nums[r]:\n                    l = mid + 1\n                else:\n                    r = mid - 1\n        return False"
    },
    {
        "number": 81,
        "title": "Search in Rotated Sorted Array II",
        "difficulty": 1,
        "prompt": "class Solution:\n    def search(self, nums: List[int], target: int) -> bool:\n        \"\"\"\n        There is an integer array nums sorted in non-decreasing order (not necessarily with distinct values).\n        Before being passed to your function, nums is rotated at an unknown pivot index k (0 <= k < nums.length) such that the resulting array is [nums[k], nums[k+1],..., nums[n-1], nums[0], nums[1],..., nums[k-1]] (0-indexed). For example, [0,1,2,4,4,4,5,6,6,7] might be rotated at pivot index 5 and become [4,5,6,6,7,0,1,2,4,4].\n        Given the array nums after the rotation and an integer target, return true if target is in nums, or false if it is not in nums.\n        You must decrease the overall operation steps as much as possible.\n        Example 1:\n        Input: nums = [2,5,6,0,0,1,2], target = 0\n        Output: true\n        Example 2:\n        Input: nums = [2,5,6,0,0,1,2], target = 3\n        Output: false\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        if not nums:\n            return False\n        left, right = 0, len(nums) - 1\n        while left <= right:\n            mid = (left + right) // 2\n            if nums[mid] == target:\n                return True\n            if nums[left] == nums[mid]:\n                left += 1\n                continue\n            if nums[left] <= nums[mid]:\n                if nums[left] <= target < nums[mid]:\n                    right = mid - 1\n                else:\n                    left = mid + 1\n            else:\n                if nums[mid] < target <= nums[right]:\n                    left = mid + 1\n                else:\n                    right = mid - 1\n        return False"
    },
    {
        "number": 82,
        "title": "Remove Duplicates from Sorted List II",
        "difficulty": 1,
        "prompt": "class Solution:\n    def deleteDuplicates(self, head: Optional[ListNode]) -> Optional[ListNode]:\n        \"\"\"\n        Given the head of a sorted linked list, delete all nodes that have duplicate numbers, leaving only distinct numbers from the original list. Return the linked list sorted as well.\n        Example 1:\n        Input: head = [1,2,3,3,4,4,5]\n        Output: [1,2,5]\n        Example 2:\n        Input: head = [1,1,1,2,3]\n        Output: [2,3]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        if not head:\n            return head\n        \n        dummy = ListNode(0)\n        dummy.next = head\n        curr = dummy\n        while curr.next and curr.next.next:\n            if curr.next.val == curr.next.next.val:\n                val = curr.next.val\n                while curr.next and curr.next.val == val:\n                    curr.next = curr.next.next\n            else:\n                curr = curr.next\n        return dummy.next\n<|endoftext|>"
    },
    {
        "number": 82,
        "title": "Remove Duplicates from Sorted List II",
        "difficulty": 1,
        "prompt": "class Solution:\n    def deleteDuplicates(self, head: Optional[ListNode]) -> Optional[ListNode]:\n        \"\"\"\n        Given the head of a sorted linked list, delete all nodes that have duplicate numbers, leaving only distinct numbers from the original list. Return the linked list sorted as well.\n        Example 1:\n        Input: head = [1,2,3,3,4,4,5]\n        Output: [1,2,5]\n        Example 2:\n        Input: head = [1,1,1,2,3]\n        Output: [2,3]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        if not head:\n            return None\n        dummy = ListNode(0)\n        dummy.next = head\n        cur = dummy\n        while cur.next and cur.next.next:\n            if cur.next.val == cur.next.next.val:\n                x = cur.next.val\n                while cur.next and cur.next.val == x:\n                    cur.next = cur.next.next\n            else:\n                cur = cur.next\n        return dummy.next\n<|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>"
    },
    {
        "number": 83,
        "title": "Remove Duplicates from Sorted List",
        "difficulty": 0,
        "prompt": "class Solution:\n    def deleteDuplicates(self, head: Optional[ListNode]) -> Optional[ListNode]:\n        \"\"\"\n        Given the head of a sorted linked list, delete all duplicates such that each element appears only once. Return the linked list sorted as well.\n        Example 1:\n        Input: head = [1,1,2]\n        Output: [1,2]\n        Example 2:\n        Input: head = [1,1,2,3,3]\n        Output: [1,2,3]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        if not head:\n            return head\n        \n        curr = head\n        while curr.next:\n            if curr.val == curr.next.val:\n                curr.next = curr.next.next\n            else:\n                curr = curr.next\n        return head\n<|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>"
    },
    {
        "number": 83,
        "title": "Remove Duplicates from Sorted List",
        "difficulty": 0,
        "prompt": "class Solution:\n    def deleteDuplicates(self, head: Optional[ListNode]) -> Optional[ListNode]:\n        \"\"\"\n        Given the head of a sorted linked list, delete all duplicates such that each element appears only once. Return the linked list sorted as well.\n        Example 1:\n        Input: head = [1,1,2]\n        Output: [1,2]\n        Example 2:\n        Input: head = [1,1,2,3,3]\n        Output: [1,2,3]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        if not head:\n            return head\n        \n        dummy = ListNode(0, head)\n        cur = dummy\n        while cur.next and cur.next.next:\n            if cur.next.val == cur.next.next.val:\n                x = cur.next.val\n                while cur.next and cur.next.val == x:\n                    cur.next = cur.next.next\n            else:\n                cur = cur.next\n        return dummy.next\n<|endoftext|>"
    },
    {
        "number": 84,
        "title": "Largest Rectangle in Histogram",
        "difficulty": 2,
        "prompt": "class Solution:\n    def largestRectangleArea(self, heights: List[int]) -> int:\n        \"\"\"\n        Given an array of integers heights representing the histogram's bar height where the width of each bar is 1, return the area of the largest rectangle in the histogram.\n        Example 1:\n        Input: heights = [2,1,5,6,2,3]\n        Output: 10\n        Explanation: The above is a histogram where width of each bar is 1.\n        The largest rectangle is shown in the red area, which has an area = 10 units.\n        Example 2:\n        Input: heights = [2,4]\n        Output: 4\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        # \u5355\u8c03\u6808\n        # \u5355\u8c03\u9012\u589e\u6808\uff0c\u6bcf\u6b21\u9047\u5230\u6bd4\u6808\u9876\u5143\u7d20\u5927\u7684\u5143\u7d20\uff0c\u5219\u5c06\u8be5\u5143\u7d20\u538b\u5165\u6808\u4e2d\uff0c\u540c\u65f6\u8bb0\u5f55\u8be5\u5143\u7d20\u4e0e\u6808\u9876\u5143\u7d20\u7684\u8fb9\u754c\uff0c\u5373\u4e3a\u5f53\u524d\u6700\u5927\u9762\u79ef\n        # \u5f53\u9047\u5230\u6bd4\u6808\u9876\u5143\u7d20\u5c0f\u7684\u5143\u7d20\u65f6\uff0c\u5219\u5c06\u6808\u9876\u5143\u7d20\u51fa\u6808\uff0c\u5e76\u8bb0\u5f55\u8be5\u5143\u7d20\u4e0e\u6808\u9876\u5143\u7d20\u7684\u8fb9\u754c\uff0c\u5373\u4e3a\u5f53\u524d\u6700\u5927\u9762\u79ef\n        # \u5f53\u9047\u5230\u6bd4\u6808\u9876\u5143\u7d20\u5927\u7684\u5143\u7d20\u65f6\uff0c\u5219\u5c06\u8be5\u5143\u7d20\u538b\u5165\u6808\u4e2d\uff0c\ufffd"
    },
    {
        "number": 84,
        "title": "Largest Rectangle in Histogram",
        "difficulty": 2,
        "prompt": "class Solution:\n    def largestRectangleArea(self, heights: List[int]) -> int:\n        \"\"\"\n        Given an array of integers heights representing the histogram's bar height where the width of each bar is 1, return the area of the largest rectangle in the histogram.\n        Example 1:\n        Input: heights = [2,1,5,6,2,3]\n        Output: 10\n        Explanation: The above is a histogram where width of each bar is 1.\n        The largest rectangle is shown in the red area, which has an area = 10 units.\n        Example 2:\n        Input: heights = [2,4]\n        Output: 4\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        # \u5355\u8c03\u6808\n        # \u65f6\u95f4\u590d\u6742\u5ea6O(n)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6O(n)\n        # \u6808\u4e2d\u5b58\u653e\u7684\u662findex\n        # \u5f53\u6808\u4e2d\u5b58\u653e\u7684\u662findex\u65f6\uff0c\u6808\u9876\u5143\u7d20\u7684index\u4e3a\u5f53\u524d\u6700\u5927\u9ad8\u5ea6\u7684index\n        # \u5f53\u6808\u4e2d\u5b58\u653e\u7684\u662fheight\u65f6\uff0c\u6808\u9876\u5143\u7d20\u7684height\u4e3a\u5f53\u524d\u6700\u5927\u9ad8\u5ea6\n        # \u5f53\u6808\u4e2d\u5b58\u653e\u7684\u662fheight\u65f6\uff0c\u6808\u9876\u5143\u7d20\u7684height\u4e3a\u5f53\u524d\u6700\u5927\u9ad8\u5ea6\n        # \u5f53\u6808\u4e2d\u5b58\u653e\u7684\u662fheight\u65f6\uff0c\u6808\u9876\u5143\u7d20\u7684height\u4e3a\u5f53\u524d\u6700\u5927\u9ad8\u5ea6\n        # \u5f53\u6808\u4e2d\u5b58\u653e\u7684\u662fheight\u65f6\uff0c\u6808\u9876\u5143\u7d20\u7684height\u4e3a\u5f53\u524d\u6700\u5927\u9ad8\u5ea6\n        "
    },
    {
        "number": 85,
        "title": "Maximal Rectangle",
        "difficulty": 2,
        "prompt": "class Solution:\n    def maximalRectangle(self, matrix: List[List[str]]) -> int:\n        \"\"\"\n        Given a rows x cols binary matrix filled with 0's and 1's, find the largest rectangle containing only 1's and return its area.\n        Example 1:\n        Input: matrix = [[\"1\",\"0\",\"1\",\"0\",\"0\"],[\"1\",\"0\",\"1\",\"1\",\"1\"],[\"1\",\"1\",\"1\",\"1\",\"1\"],[\"1\",\"0\",\"0\",\"1\",\"0\"]]\n        Output: 6\n        Explanation: The maximal rectangle is shown in the above picture.\n        Example 2:\n        Input: matrix = [[\"0\"]]\n        Output: 0\n        Example 3:\n        Input: matrix = [[\"1\"]]\n        Output: 1\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        if not matrix:\n            return 0\n        m, n = len(matrix), len(matrix[0])\n        left, right = [0] * n, [n] * n\n        height = [0] * n\n        max_area = 0\n        for i in range(m):\n            cur_left, cur_right = 0, n\n            for j in range(n):\n                if matrix[i][j] == \"1\":\n                    height[j] += 1\n                else:\n                    height[j] = 0\n            for j in range(n):\n                if matrix[i][j] == \"1\":\n                    left[j] = max(left[j], cur_left)\n                else:\n                    left[j], cur_left = 0, j + 1\n            for j in range(n - 1, -1, -1):\n                if matrix[i][j] == \"1\":\n                    right[j] = min(right[j], cur_right)\n                else:\n                    right[j], cur_right = n, j\n            for j in range(n):\n                max_area = max(max_area, height[j] * (right[j] - left[j]))\n        return max_area\n<|endoftext|>"
    },
    {
        "number": 85,
        "title": "Maximal Rectangle",
        "difficulty": 2,
        "prompt": "class Solution:\n    def maximalRectangle(self, matrix: List[List[str]]) -> int:\n        \"\"\"\n        Given a rows x cols binary matrix filled with 0's and 1's, find the largest rectangle containing only 1's and return its area.\n        Example 1:\n        Input: matrix = [[\"1\",\"0\",\"1\",\"0\",\"0\"],[\"1\",\"0\",\"1\",\"1\",\"1\"],[\"1\",\"1\",\"1\",\"1\",\"1\"],[\"1\",\"0\",\"0\",\"1\",\"0\"]]\n        Output: 6\n        Explanation: The maximal rectangle is shown in the above picture.\n        Example 2:\n        Input: matrix = [[\"0\"]]\n        Output: 0\n        Example 3:\n        Input: matrix = [[\"1\"]]\n        Output: 1\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        if not matrix:\n            return 0\n        m, n = len(matrix), len(matrix[0])\n        left, right = [0] * n, [n] * n\n        height = [0] * n\n        max_area = 0\n        for i in range(m):\n            cur_left, cur_right = 0, n\n            for j in range(n):\n                if matrix[i][j] == '1':\n                    height[j] += 1\n                else:\n                    height[j] = 0\n            for j in range(n):\n                if matrix[i][j] == '1':\n                    left[j] = max(left[j], cur_left)\n                else:\n                    left[j], cur_left = 0, j + 1\n            for j in range(n - 1, -1, -1):\n                if matrix[i][j] == '1':\n                    right[j] = min(right[j], cur_right)\n                else:\n                    right[j], cur_right = n, j\n            for j in range(n):\n                max_area = max(max_area, height[j] * (right[j] - left[j]))\n        return max_area\n<|endoftext|>"
    },
    {
        "number": 86,
        "title": "Partition List",
        "difficulty": 1,
        "prompt": "class Solution:\n    def partition(self, head: Optional[ListNode], x: int) -> Optional[ListNode]:\n        \"\"\"\n        Given the head of a linked list and a value x, partition it such that all nodes less than x come before nodes greater than or equal to x.\n        You should preserve the original relative order of the nodes in each of the two partitions.\n        Example 1:\n        Input: head = [1,4,3,2,5,2], x = 3\n        Output: [1,2,2,4,3,5]\n        Example 2:\n        Input: head = [2,1], x = 2\n        Output: [1,2]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        # find the head of the left and right\n        # left = head\n        # right = head\n        # while right.next:\n        #     if right.next.val < x:\n        #         left = left.next\n        #         right = right.next\n        #     else:\n        #         break\n        # left.next = None\n        # right = right.next\n        # while right:\n        #     if right.val < x:\n        #         left = left.next\n        #         right = right.next\n        #     else:\n        #         break\n        # right.next = None\n        # left = left.next\n        # while left:\n        #     if left.val < x:\n        #         left = left.next\n        #     else:\n        #         break\n        # left.next = right\n        # return head\n        \n        # O(n) time\n        # O(1) space\n        if not head:\n            return head\n        left = left_head = ListNode(0)\n        right = right_head = ListNode(0)\n        while head:\n            if head.val < x:\n                left.next = head\n                left = left.next\n            else:\n                right.next = head\n                right = right.next"
    },
    {
        "number": 86,
        "title": "Partition List",
        "difficulty": 1,
        "prompt": "class Solution:\n    def partition(self, head: Optional[ListNode], x: int) -> Optional[ListNode]:\n        \"\"\"\n        Given the head of a linked list and a value x, partition it such that all nodes less than x come before nodes greater than or equal to x.\n        You should preserve the original relative order of the nodes in each of the two partitions.\n        Example 1:\n        Input: head = [1,4,3,2,5,2], x = 3\n        Output: [1,2,2,4,3,5]\n        Example 2:\n        Input: head = [2,1], x = 2\n        Output: [1,2]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        # find the node before the partition\n        before_partition = before_partition_head = ListNode(0)\n        while head and head.val < x:\n            before_partition.next = head\n            before_partition = before_partition.next\n            head = head.next\n        # find the node after the partition\n        after_partition_head = after_partition = head\n        while after_partition and after_partition.val >= x:\n            after_partition = after_partition.next\n        # link before_partition and after_partition\n        before_partition.next = after_partition\n        # link before_partition and after_partition_head\n        if after_partition:\n            after_partition_head = after_partition_head.next\n        before_partition.next = after_partition_head\n        return before_partition_head.next\n<|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>"
    },
    {
        "number": 87,
        "title": "Scramble String",
        "difficulty": 2,
        "prompt": "class Solution:\n    def isScramble(self, s1: str, s2: str) -> bool:\n        \"\"\"\n        We can scramble a string s to get a string t using the following algorithm:\n            If the length of the string is 1, stop.\n            If the length of the string is > 1, do the following:\n                Split the string into two non-empty substrings at a random index, i.e., if the string is s, divide it to x and y where s = x + y.\n                Randomly decide to swap the two substrings or to keep them in the same order. i.e., after this step, s may become s = x + y or s = y + x.\n                Apply step 1 recursively on each of the two substrings x and y.\n        Given two strings s1 and s2 of the same length, return true if s2 is a scrambled string of s1, otherwise, return false.\n        Example 1:\n        Input: s1 = \"great\", s2 = \"rgeat\"\n        Output: true\n        Explanation: One possible scenario applied on s1 is:\n        \"great\" --> \"gr/eat\" // divide at random index.\n        \"gr/eat\" --> \"gr/eat\" // random decision is not to swap the two substrings and keep them in order.\n        \"gr/eat\" --> \"g/r / e/at\" // apply the same algorithm recursively on both substrings. divide at random index each of them.\n        \"g/r / e/at\" --> \"r/g / e/at\" // random decision was to swap the first substring and to keep the second substring in the same order.\n        \"r/g / e/at\" --> \"r/g / e/ a/t\" // again apply the algorithm recursively, divide \"at\" to \"a/t\".\n        \"r/g / e/ a/t\" --> \"r/g / e/ a/t\" // random decision is to keep both substrings in the same order.\n        The algorithm stops now, and the result string is \"rgeat\" which is s2.\n        As one possible scenario led s1 to be scrambled to s2, we return true.\n        Example 2:\n        Input: s1 = \"abcde\", s2 = \"caebd\"\n        Output: false\n        Example 3:\n        Input: s1 = \"a\", s2 = \"a\"\n        Output: true\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        if len(s1)!= len(s2):\n            return False\n        if len(s1) == 1:\n            return s1 == s2\n        for i in range(1, len(s1)):\n            if self.isScramble(s1[:i], s2[:i]) and self.isScramble(s1[i:], s2[i:]):\n                return True\n            if self.isScramble(s1[:i], s2[-i:]) and self.isScramble(s1[i:], s2[:-i]):\n                return True\n        return False"
    },
    {
        "number": 87,
        "title": "Scramble String",
        "difficulty": 2,
        "prompt": "class Solution:\n    def isScramble(self, s1: str, s2: str) -> bool:\n        \"\"\"\n        We can scramble a string s to get a string t using the following algorithm:\n            If the length of the string is 1, stop.\n            If the length of the string is > 1, do the following:\n                Split the string into two non-empty substrings at a random index, i.e., if the string is s, divide it to x and y where s = x + y.\n                Randomly decide to swap the two substrings or to keep them in the same order. i.e., after this step, s may become s = x + y or s = y + x.\n                Apply step 1 recursively on each of the two substrings x and y.\n        Given two strings s1 and s2 of the same length, return true if s2 is a scrambled string of s1, otherwise, return false.\n        Example 1:\n        Input: s1 = \"great\", s2 = \"rgeat\"\n        Output: true\n        Explanation: One possible scenario applied on s1 is:\n        \"great\" --> \"gr/eat\" // divide at random index.\n        \"gr/eat\" --> \"gr/eat\" // random decision is not to swap the two substrings and keep them in order.\n        \"gr/eat\" --> \"g/r / e/at\" // apply the same algorithm recursively on both substrings. divide at random index each of them.\n        \"g/r / e/at\" --> \"r/g / e/at\" // random decision was to swap the first substring and to keep the second substring in the same order.\n        \"r/g / e/at\" --> \"r/g / e/ a/t\" // again apply the algorithm recursively, divide \"at\" to \"a/t\".\n        \"r/g / e/ a/t\" --> \"r/g / e/ a/t\" // random decision is to keep both substrings in the same order.\n        The algorithm stops now, and the result string is \"rgeat\" which is s2.\n        As one possible scenario led s1 to be scrambled to s2, we return true.\n        Example 2:\n        Input: s1 = \"abcde\", s2 = \"caebd\"\n        Output: false\n        Example 3:\n        Input: s1 = \"a\", s2 = \"a\"\n        Output: true\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        if len(s1)!= len(s2):\n            return False\n        if len(s1) == 1:\n            return s1 == s2\n        if sorted(s1)!= sorted(s2):\n            return False\n        for i in range(1, len(s1)):\n            if self.isScramble(s1[:i], s2[:i]) and self.isScramble(s1[i:], s2[i:]):\n                return True\n            if self.isScramble(s1[:i], s2[-i:]) and self.isScramble(s1[i:], s2[:-i]):\n                return True\n        return False"
    },
    {
        "number": 88,
        "title": "Merge Sorted Array",
        "difficulty": 0,
        "prompt": "class Solution:\n    def merge(self, nums1: List[int], m: int, nums2: List[int], n: int) -> None:\n        \"\"\"\n        Do not return anything, modify nums1 in-place instead.\n        You are given two integer arrays nums1 and nums2, sorted in non-decreasing order, and two integers m and n, representing the number of elements in nums1 and nums2 respectively.\n        Merge nums1 and nums2 into a single array sorted in non-decreasing order.\n        The final sorted array should not be returned by the function, but instead be stored inside the array nums1. To accommodate this, nums1 has a length of m + n, where the first m elements denote the elements that should be merged, and the last n elements are set to 0 and should be ignored. nums2 has a length of n.\n        Example 1:\n        Input: nums1 = [1,2,3,0,0,0], m = 3, nums2 = [2,5,6], n = 3\n        Output: [1,2,2,3,5,6]\n        Explanation: The arrays we are merging are [1,2,3] and [2,5,6].\n        The result of the merge is [1,2,2,3,5,6] with the underlined elements coming from nums1.\n        Example 2:\n        Input: nums1 = [1], m = 1, nums2 = [], n = 0\n        Output: [1]\n        Explanation: The arrays we are merging are [1] and [].\n        The result of the merge is [1].\n        Example 3:\n        Input: nums1 = [0], m = 0, nums2 = [1], n = 1\n        Output: [1]\n        Explanation: The arrays we are merging are [] and [1].\n        The result of the merge is [1].\n        Note that because m = 0, there are no elements in nums1. The 0 is only there to ensure the merge result can fit in nums1.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        # nums1[:m] = nums1[:m] + nums2[:n]\n        # nums1.sort()\n        # nums1[m:] = nums2[n:]\n        # nums1.sort()\n        # nums1[m:] = nums2[n:]\n        # nums1.sort()\n        # nums1[m:] = nums2[n:]\n        # nums1.sort()\n        # nums1[m:] = nums2[n:]\n        # nums1.sort()\n        # nums1[m:] = nums2[n:]\n        # nums1.sort()\n        # nums1[m:] = nums2[n:]\n        # nums1.sort()\n        # nums1[m:] = nums2[n:]\n        # nums1.sort()\n        # nums1[m:] = nums2[n:]\n        # nums1.sort()\n        # nums1[m:] = nums2[n:]\n        # nums1.sort()\n        # nums1[m:] = nums2[n:]\n        # nums1.sort()\n        # nums1[m:] = nums2[n:]"
    },
    {
        "number": 88,
        "title": "Merge Sorted Array",
        "difficulty": 0,
        "prompt": "class Solution:\n    def merge(self, nums1: List[int], m: int, nums2: List[int], n: int) -> None:\n        \"\"\"\n        Do not return anything, modify nums1 in-place instead.\n        You are given two integer arrays nums1 and nums2, sorted in non-decreasing order, and two integers m and n, representing the number of elements in nums1 and nums2 respectively.\n        Merge nums1 and nums2 into a single array sorted in non-decreasing order.\n        The final sorted array should not be returned by the function, but instead be stored inside the array nums1. To accommodate this, nums1 has a length of m + n, where the first m elements denote the elements that should be merged, and the last n elements are set to 0 and should be ignored. nums2 has a length of n.\n        Example 1:\n        Input: nums1 = [1,2,3,0,0,0], m = 3, nums2 = [2,5,6], n = 3\n        Output: [1,2,2,3,5,6]\n        Explanation: The arrays we are merging are [1,2,3] and [2,5,6].\n        The result of the merge is [1,2,2,3,5,6] with the underlined elements coming from nums1.\n        Example 2:\n        Input: nums1 = [1], m = 1, nums2 = [], n = 0\n        Output: [1]\n        Explanation: The arrays we are merging are [1] and [].\n        The result of the merge is [1].\n        Example 3:\n        Input: nums1 = [0], m = 0, nums2 = [1], n = 1\n        Output: [1]\n        Explanation: The arrays we are merging are [] and [1].\n        The result of the merge is [1].\n        Note that because m = 0, there are no elements in nums1. The 0 is only there to ensure the merge result can fit in nums1.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        i = m - 1\n        j = n - 1\n        k = m + n - 1\n        while i >= 0 and j >= 0:\n            if nums1[i] > nums2[j]:\n                nums1[k] = nums1[i]\n                i -= 1\n            else:\n                nums1[k] = nums2[j]\n                j -= 1\n            k -= 1\n        while j >= 0:\n            nums1[k] = nums2[j]\n            j -= 1\n            k -= 1\n        return nums1"
    },
    {
        "number": 89,
        "title": "Gray Code",
        "difficulty": 1,
        "prompt": "class Solution:\n    def grayCode(self, n: int) -> List[int]:\n        \"\"\"\n        An n-bit gray code sequence is a sequence of 2n integers where:\n            Every integer is in the inclusive range [0, 2n - 1],\n            The first integer is 0,\n            An integer appears no more than once in the sequence,\n            The binary representation of every pair of adjacent integers differs by exactly one bit, and\n            The binary representation of the first and last integers differs by exactly one bit.\n        Given an integer n, return any valid n-bit gray code sequence.\n        Example 1:\n        Input: n = 2\n        Output: [0,1,3,2]\n        Explanation:\n        The binary representation of [0,1,3,2] is [00,01,11,10].\n        - 00 and 01 differ by one bit\n        - 01 and 11 differ by one bit\n        - 11 and 10 differ by one bit\n        - 10 and 00 differ by one bit\n        [0,2,3,1] is also a valid gray code sequence, whose binary representation is [00,10,11,01].\n        - 00 and 10 differ by one bit\n        - 10 and 11 differ by one bit\n        - 11 and 01 differ by one bit\n        - 01 and 00 differ by one bit\n        Example 2:\n        Input: n = 1\n        Output: [0,1]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        if n == 0:\n            return [0]\n        if n == 1:\n            return [0, 1]\n        if n == 2:\n            return [0, 1, 3, 2]\n        if n == 3:\n            return [0, 1, 3, 2, 6, 7, 5, 4]\n        if n == 4:\n            return [0, 1, 3, 2, 6, 7, 5, 4, 12, 13, 15, 14, 10, 11, 9, 8]\n        if n == 5:\n            return [0, 1, 3, 2, 6, 7, 5, 4, 12, 13, 15, 14, 10, 11, 9, 8, 24, 25, 27, 26, 18, 19, 17, 16, 30, 31, 29, 28, 20, 21, 23, 22]\n        if n == 6:\n            return [0, 1, 3, 2, 6, 7, 5, 4, 12, 13, 15, 14, 10, 11, 9, 8, 24, 25, 27, 26, 18, 19, 17, 16, 30, 31, 29, 28, 20, 21, 23, 22, 48, 49, 47, 46, 34, 35, 33, 32, 42, 43, 41, 40, 50, 51, 49, 48, 38,"
    },
    {
        "number": 89,
        "title": "Gray Code",
        "difficulty": 1,
        "prompt": "class Solution:\n    def grayCode(self, n: int) -> List[int]:\n        \"\"\"\n        An n-bit gray code sequence is a sequence of 2n integers where:\n            Every integer is in the inclusive range [0, 2n - 1],\n            The first integer is 0,\n            An integer appears no more than once in the sequence,\n            The binary representation of every pair of adjacent integers differs by exactly one bit, and\n            The binary representation of the first and last integers differs by exactly one bit.\n        Given an integer n, return any valid n-bit gray code sequence.\n        Example 1:\n        Input: n = 2\n        Output: [0,1,3,2]\n        Explanation:\n        The binary representation of [0,1,3,2] is [00,01,11,10].\n        - 00 and 01 differ by one bit\n        - 01 and 11 differ by one bit\n        - 11 and 10 differ by one bit\n        - 10 and 00 differ by one bit\n        [0,2,3,1] is also a valid gray code sequence, whose binary representation is [00,10,11,01].\n        - 00 and 10 differ by one bit\n        - 10 and 11 differ by one bit\n        - 11 and 01 differ by one bit\n        - 01 and 00 differ by one bit\n        Example 2:\n        Input: n = 1\n        Output: [0,1]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        if n == 0:\n            return [0]\n        if n == 1:\n            return [0, 1]\n        res = [0, 1]\n        for i in range(2, n + 1):\n            res = [i ^ x for x in reversed(res)]\n            res = [0] + res\n        return res"
    },
    {
        "number": 90,
        "title": "Subsets II",
        "difficulty": 1,
        "prompt": "class Solution:\n    def subsetsWithDup(self, nums: List[int]) -> List[List[int]]:\n        \"\"\"\n        Given an integer array nums that may contain duplicates, return all possible subsets (the power set).\n        The solution set must not contain duplicate subsets. Return the solution in any order.\n        Example 1:\n        Input: nums = [1,2,2]\n        Output: [[],[1],[1,2],[1,2,2],[2],[2,2]]\n        Example 2:\n        Input: nums = [0]\n        Output: [[],[0]]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        nums.sort()\n        self.res = []\n        self.dfs(nums, [], 0)\n        return self.res"
    },
    {
        "number": 90,
        "title": "Subsets II",
        "difficulty": 1,
        "prompt": "class Solution:\n    def subsetsWithDup(self, nums: List[int]) -> List[List[int]]:\n        \"\"\"\n        Given an integer array nums that may contain duplicates, return all possible subsets (the power set).\n        The solution set must not contain duplicate subsets. Return the solution in any order.\n        Example 1:\n        Input: nums = [1,2,2]\n        Output: [[],[1],[1,2],[1,2,2],[2],[2,2]]\n        Example 2:\n        Input: nums = [0]\n        Output: [[],[0]]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        nums.sort()\n        self.res = []\n        self.dfs(nums, [], 0)\n        return self.res"
    },
    {
        "number": 91,
        "title": "Decode Ways",
        "difficulty": 1,
        "prompt": "class Solution:\n    def numDecodings(self, s: str) -> int:\n        \"\"\"\n        A message containing letters from A-Z can be encoded into numbers using the following mapping:\n        'A' -> \"1\"\n        'B' -> \"2\"\n       ...\n        'Z' -> \"26\"\n        To decode an encoded message, all the digits must be grouped then mapped back into letters using the reverse of the mapping above (there may be multiple ways). For example, \"11106\" can be mapped into:\n            \"AAJF\" with the grouping (1 1 10 6)\n            \"KJF\" with the grouping (11 10 6)\n        Note that the grouping (1 11 06) is invalid because \"06\" cannot be mapped into 'F' since \"6\" is different from \"06\".\n        Given a string s containing only digits, return the number of ways to decode it.\n        The test cases are generated so that the answer fits in a 32-bit integer.\n        Example 1:\n        Input: s = \"12\"\n        Output: 2\n        Explanation: \"12\" could be decoded as \"AB\" (1 2) or \"L\" (12).\n        Example 2:\n        Input: s = \"226\"\n        Output: 3\n        Explanation: \"226\" could be decoded as \"BZ\" (2 26), \"VF\" (22 6), or \"BBF\" (2 2 6).\n        Example 3:\n        Input: s = \"06\"\n        Output: 0\n        Explanation: \"06\" cannot be mapped to \"F\" because of the leading zero (\"6\" is different from \"06\").\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        # dp[i] = dp[i-1] + dp[i-2]\n        # dp[i] = dp[i-1] if s[i-1]!= '0'\n        # dp[i] = dp[i-2] if s[i-1]!= '0' and s[i-2]!= '0'\n        # dp[i] = 0 if s[i-1] == '0'\n        # dp[i] = 0 if s[i-2] == '0' and s[i-1]!= '0'\n        # dp[i] = 0 if s[i-2] == '0' and s[i-1] == '0'\n        # dp[i] = 0 if s[i-2] == '0' and s[i-1] == '0' and s[i] == '0'\n        # dp[i] = 0 if s[i-2] == '0' and s[i-1] == '0' and s[i]!= '0'\n        # dp[i] = 0 if s[i-2] == '0' and s[i-1]!= '0' and s[i] == '0'\n        # d"
    },
    {
        "number": 91,
        "title": "Decode Ways",
        "difficulty": 1,
        "prompt": "class Solution:\n    def numDecodings(self, s: str) -> int:\n        \"\"\"\n        A message containing letters from A-Z can be encoded into numbers using the following mapping:\n        'A' -> \"1\"\n        'B' -> \"2\"\n       ...\n        'Z' -> \"26\"\n        To decode an encoded message, all the digits must be grouped then mapped back into letters using the reverse of the mapping above (there may be multiple ways). For example, \"11106\" can be mapped into:\n            \"AAJF\" with the grouping (1 1 10 6)\n            \"KJF\" with the grouping (11 10 6)\n        Note that the grouping (1 11 06) is invalid because \"06\" cannot be mapped into 'F' since \"6\" is different from \"06\".\n        Given a string s containing only digits, return the number of ways to decode it.\n        The test cases are generated so that the answer fits in a 32-bit integer.\n        Example 1:\n        Input: s = \"12\"\n        Output: 2\n        Explanation: \"12\" could be decoded as \"AB\" (1 2) or \"L\" (12).\n        Example 2:\n        Input: s = \"226\"\n        Output: 3\n        Explanation: \"226\" could be decoded as \"BZ\" (2 26), \"VF\" (22 6), or \"BBF\" (2 2 6).\n        Example 3:\n        Input: s = \"06\"\n        Output: 0\n        Explanation: \"06\" cannot be mapped to \"F\" because of the leading zero (\"6\" is different from \"06\").\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        if not s:\n            return 0\n        dp = [0] * len(s)\n        dp[0] = 1 if s[0]!= '0' else 0\n        if len(s) >= 2:\n            if int(s[:2]) <= 26:\n                dp[1] = 2 if s[1]!= '0' else 1\n            else:\n                dp[1] = 1 if s[1]!= '0' else 0\n        for i in range(2, len(s)):\n            if s[i]!= '0':\n                dp[i] += dp[i - 1]\n            if 10 <= int(s[i - 1:i + 1]) <= 26:\n                dp[i] += dp[i - 2]\n        return dp[-1]"
    },
    {
        "number": 92,
        "title": "Reverse Linked List II",
        "difficulty": 1,
        "prompt": "class Solution:\n    def reverseBetween(self, head: Optional[ListNode], left: int, right: int) -> Optional[ListNode]:\n        \"\"\"\n        Given the head of a singly linked list and two integers left and right where left <= right, reverse the nodes of the list from position left to position right, and return the reversed list.\n        Example 1:\n        Input: head = [1,2,3,4,5], left = 2, right = 4\n        Output: [1,4,3,2,5]\n        Example 2:\n        Input: head = [5], left = 1, right = 1\n        Output: [5]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        if not head:\n            return None\n        \n        # Find the node before the left-most node to be reversed\n        curr = head\n        for _ in range(left - 1):\n            curr = curr.next\n            if not curr:\n                return head\n        \n        # Reverse from the left-most node to the right-most node\n        prev, curr = None, curr\n        for _ in range(right - left + 1):\n            nxt = curr.next\n            curr.next = prev\n            prev = curr\n            curr = nxt\n        \n        # Connect with the left-most node\n        head.next = curr\n        \n        return prev\n<|endoftext|>"
    },
    {
        "number": 92,
        "title": "Reverse Linked List II",
        "difficulty": 1,
        "prompt": "class Solution:\n    def reverseBetween(self, head: Optional[ListNode], left: int, right: int) -> Optional[ListNode]:\n        \"\"\"\n        Given the head of a singly linked list and two integers left and right where left <= right, reverse the nodes of the list from position left to position right, and return the reversed list.\n        Example 1:\n        Input: head = [1,2,3,4,5], left = 2, right = 4\n        Output: [1,4,3,2,5]\n        Example 2:\n        Input: head = [5], left = 1, right = 1\n        Output: [5]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        if not head:\n            return None\n        \n        # find the node before the left boundary and the node after the right boundary\n        # reverse the nodes in the sub-list\n        # connect the sub-list to the list\n        dummy = ListNode(0)\n        dummy.next = head\n        pre = dummy\n        for _ in range(left - 1):\n            pre = pre.next\n        \n        cur = pre.next\n        for _ in range(right - left):\n            next = cur.next\n            cur.next = next.next\n            next.next = pre.next\n            pre.next = next\n        \n        return dummy.next\n<|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>"
    },
    {
        "number": 93,
        "title": "Restore IP Addresses",
        "difficulty": 1,
        "prompt": "class Solution:\n    def restoreIpAddresses(self, s: str) -> List[str]:\n        \"\"\"\n        A valid IP address consists of exactly four integers separated by single dots. Each integer is between 0 and 255 (inclusive) and cannot have leading zeros.\n            For example, \"0.1.2.201\" and \"192.168.1.1\" are valid IP addresses, but \"0.011.255.245\", \"192.168.1.312\" and \"192.168@1.1\" are invalid IP addresses.\n        Given a string s containing only digits, return all possible valid IP addresses that can be formed by inserting dots into s. You are not allowed to reorder or remove any digits in s. You may return the valid IP addresses in any order.\n        Example 1:\n        Input: s = \"25525511135\"\n        Output: [\"255.255.11.135\",\"255.255.111.35\"]\n        Example 2:\n        Input: s = \"0000\"\n        Output: [\"0.0.0.0\"]\n        Example 3:\n        Input: s = \"101023\"\n        Output: [\"1.0.10.23\",\"1.0.102.3\",\"10.1.0.23\",\"10.10.2.3\",\"101.0.2.3\"]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        self.res = []\n        self.dfs(s, 0, \"\", 0)\n        return self.res"
    },
    {
        "number": 93,
        "title": "Restore IP Addresses",
        "difficulty": 1,
        "prompt": "class Solution:\n    def restoreIpAddresses(self, s: str) -> List[str]:\n        \"\"\"\n        A valid IP address consists of exactly four integers separated by single dots. Each integer is between 0 and 255 (inclusive) and cannot have leading zeros.\n            For example, \"0.1.2.201\" and \"192.168.1.1\" are valid IP addresses, but \"0.011.255.245\", \"192.168.1.312\" and \"192.168@1.1\" are invalid IP addresses.\n        Given a string s containing only digits, return all possible valid IP addresses that can be formed by inserting dots into s. You are not allowed to reorder or remove any digits in s. You may return the valid IP addresses in any order.\n        Example 1:\n        Input: s = \"25525511135\"\n        Output: [\"255.255.11.135\",\"255.255.111.35\"]\n        Example 2:\n        Input: s = \"0000\"\n        Output: [\"0.0.0.0\"]\n        Example 3:\n        Input: s = \"101023\"\n        Output: [\"1.0.10.23\",\"1.0.102.3\",\"10.1.0.23\",\"10.10.2.3\",\"101.0.2.3\"]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        self.res = []\n        self.dfs(s, 0, [])\n        return self.res"
    },
    {
        "number": 94,
        "title": "Binary Tree Inorder Traversal",
        "difficulty": 0,
        "prompt": "class Solution:\n    def inorderTraversal(self, root: Optional[TreeNode]) -> List[int]:\n        \"\"\"\n        Given the root of a binary tree, return the inorder traversal of its nodes' values.\n        Example 1:\n        Input: root = [1,null,2,3]\n        Output: [1,3,2]\n        Example 2:\n        Input: root = []\n        Output: []\n        Example 3:\n        Input: root = [1]\n        Output: [1]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        if not root:\n            return []\n        return self.inorderTraversal(root.left) + [root.val] + self.inorderTraversal(root.right)"
    },
    {
        "number": 94,
        "title": "Binary Tree Inorder Traversal",
        "difficulty": 0,
        "prompt": "class Solution:\n    def inorderTraversal(self, root: Optional[TreeNode]) -> List[int]:\n        \"\"\"\n        Given the root of a binary tree, return the inorder traversal of its nodes' values.\n        Example 1:\n        Input: root = [1,null,2,3]\n        Output: [1,3,2]\n        Example 2:\n        Input: root = []\n        Output: []\n        Example 3:\n        Input: root = [1]\n        Output: [1]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        if not root:\n            return []\n        return self.inorderTraversal(root.left) + [root.val] + self.inorderTraversal(root.right)\n<|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>"
    },
    {
        "number": 95,
        "title": "Unique Binary Search Trees II",
        "difficulty": 1,
        "prompt": "class Solution:\n    def generateTrees(self, n: int) -> List[Optional[TreeNode]]:\n        \"\"\"\n        Given an integer n, return all the structurally unique BST's (binary search trees), which has exactly n nodes of unique values from 1 to n. Return the answer in any order.\n        Example 1:\n        Input: n = 3\n        Output: [[1,null,2,null,3],[1,null,3,2],[2,1,3],[3,1,null,null,2],[3,2,null,1]]\n        Example 2:\n        Input: n = 1\n        Output: [[1]]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        if n == 0:\n            return []\n        return self.helper(1, n)"
    },
    {
        "number": 95,
        "title": "Unique Binary Search Trees II",
        "difficulty": 1,
        "prompt": "class Solution:\n    def generateTrees(self, n: int) -> List[Optional[TreeNode]]:\n        \"\"\"\n        Given an integer n, return all the structurally unique BST's (binary search trees), which has exactly n nodes of unique values from 1 to n. Return the answer in any order.\n        Example 1:\n        Input: n = 3\n        Output: [[1,null,2,null,3],[1,null,3,2],[2,1,3],[3,1,null,null,2],[3,2,null,1]]\n        Example 2:\n        Input: n = 1\n        Output: [[1]]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        if n == 0:\n            return []\n        return self.generate_trees(1, n)"
    },
    {
        "number": 96,
        "title": "Unique Binary Search Trees",
        "difficulty": 1,
        "prompt": "class Solution:\n    def numTrees(self, n: int) -> int:\n        \"\"\"\n        Given an integer n, return the number of structurally unique BST's (binary search trees) which has exactly n nodes of unique values from 1 to n.\n        Example 1:\n        Input: n = 3\n        Output: 5\n        Example 2:\n        Input: n = 1\n        Output: 1\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        # dp[i] = number of unique BST with i nodes\n        dp = [0] * (n + 1)\n        dp[0] = 1\n        dp[1] = 1\n        for i in range(2, n + 1):\n            for j in range(1, i + 1):\n                dp[i] += dp[j - 1] * dp[i - j]\n        return dp[n]"
    },
    {
        "number": 96,
        "title": "Unique Binary Search Trees",
        "difficulty": 1,
        "prompt": "class Solution:\n    def numTrees(self, n: int) -> int:\n        \"\"\"\n        Given an integer n, return the number of structurally unique BST's (binary search trees) which has exactly n nodes of unique values from 1 to n.\n        Example 1:\n        Input: n = 3\n        Output: 5\n        Example 2:\n        Input: n = 1\n        Output: 1\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        # dp[i] = number of unique BSTs with i nodes\n        dp = [0] * (n + 1)\n        dp[0] = 1\n        dp[1] = 1\n        for i in range(2, n + 1):\n            for j in range(1, i + 1):\n                dp[i] += dp[j - 1] * dp[i - j]\n        return dp[n]"
    },
    {
        "number": 97,
        "title": "Interleaving String",
        "difficulty": 1,
        "prompt": "class Solution:\n    def isInterleave(self, s1: str, s2: str, s3: str) -> bool:\n        \"\"\"\n        Given strings s1, s2, and s3, find whether s3 is formed by an interleaving of s1 and s2.\n        An interleaving of two strings s and t is a configuration where s and t are divided into n and m substrings respectively, such that:\n            s = s1 + s2 +... + sn\n            t = t1 + t2 +... + tm\n            |n - m| <= 1\n            The interleaving is s1 + t1 + s2 + t2 + s3 + t3 +... or t1 + s1 + t2 + s2 + t3 + s3 +...\n        Note: a + b is the concatenation of strings a and b.\n        Example 1:\n        Input: s1 = \"aabcc\", s2 = \"dbbca\", s3 = \"aadbbcbcac\"\n        Output: true\n        Explanation: One way to obtain s3 is:\n        Split s1 into s1 = \"aa\" + \"bc\" + \"c\", and s2 into s2 = \"dbbc\" + \"a\".\n        Interleaving the two splits, we get \"aa\" + \"dbbc\" + \"bc\" + \"a\" + \"c\" = \"aadbbcbcac\".\n        Since s3 can be obtained by interleaving s1 and s2, we return true.\n        Example 2:\n        Input: s1 = \"aabcc\", s2 = \"dbbca\", s3 = \"aadbbbaccc\"\n        Output: false\n        Explanation: Notice how it is impossible to interleave s2 with any other string to obtain s3.\n        Example 3:\n        Input: s1 = \"\", s2 = \"\", s3 = \"\"\n        Output: true\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        if len(s1) + len(s2)!= len(s3):\n            return False\n        if len(s1) == 0:\n            return s2 == s3\n        if len(s2) == 0:\n            return s1 == s3\n        dp = [[False] * (len(s2) + 1) for _ in range(len(s1) + 1)]\n        dp[0][0] = True\n        for i in range(1, len(s1) + 1):\n            dp[i][0] = dp[i - 1][0] and s1[i - 1] == s3[i - 1]\n        for j in range(1, len(s2) + 1):\n            dp[0][j] = dp[0][j - 1] and s2[j - 1] == s3[j - 1]\n        for i in range(1, len(s1) + 1):\n            for j in range(1, len(s2) + 1):\n                dp[i][j] = (dp[i - 1][j] and s1[i - 1] == s3[i + j - 1]) or (dp[i][j - 1] and s2[j - 1] == s3[i + j - 1"
    },
    {
        "number": 97,
        "title": "Interleaving String",
        "difficulty": 1,
        "prompt": "class Solution:\n    def isInterleave(self, s1: str, s2: str, s3: str) -> bool:\n        \"\"\"\n        Given strings s1, s2, and s3, find whether s3 is formed by an interleaving of s1 and s2.\n        An interleaving of two strings s and t is a configuration where s and t are divided into n and m substrings respectively, such that:\n            s = s1 + s2 +... + sn\n            t = t1 + t2 +... + tm\n            |n - m| <= 1\n            The interleaving is s1 + t1 + s2 + t2 + s3 + t3 +... or t1 + s1 + t2 + s2 + t3 + s3 +...\n        Note: a + b is the concatenation of strings a and b.\n        Example 1:\n        Input: s1 = \"aabcc\", s2 = \"dbbca\", s3 = \"aadbbcbcac\"\n        Output: true\n        Explanation: One way to obtain s3 is:\n        Split s1 into s1 = \"aa\" + \"bc\" + \"c\", and s2 into s2 = \"dbbc\" + \"a\".\n        Interleaving the two splits, we get \"aa\" + \"dbbc\" + \"bc\" + \"a\" + \"c\" = \"aadbbcbcac\".\n        Since s3 can be obtained by interleaving s1 and s2, we return true.\n        Example 2:\n        Input: s1 = \"aabcc\", s2 = \"dbbca\", s3 = \"aadbbbaccc\"\n        Output: false\n        Explanation: Notice how it is impossible to interleave s2 with any other string to obtain s3.\n        Example 3:\n        Input: s1 = \"\", s2 = \"\", s3 = \"\"\n        Output: true\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        if len(s1) + len(s2)!= len(s3):\n            return False\n        if len(s1) == 0:\n            return s2 == s3\n        if len(s2) == 0:\n            return s1 == s3\n        if len(s1) == 0 and len(s2) == 0:\n            return True\n        dp = [[False for _ in range(len(s2) + 1)] for _ in range(len(s1) + 1)]\n        dp[0][0] = True\n        for i in range(1, len(s1) + 1):\n            if s1[i - 1] == s3[i - 1]:\n                dp[i][0] = True\n            else:\n                break\n        for j in range(1, len(s2) + 1):\n            if s2[j - 1] == s3[j - 1]:\n                dp[0][j] = True\n            else:\n                break\n        for i in range(1, len(s1) + 1):\n            for j in range(1, len(s2) + 1):\n                if s1[i - 1] == s3[i + j - 1] and dp[i - 1][j]:\n                    dp[i]["
    },
    {
        "number": 98,
        "title": "Validate Binary Search Tree",
        "difficulty": 1,
        "prompt": "class Solution:\n    def isValidBST(self, root: Optional[TreeNode]) -> bool:\n        \"\"\"\n        Given the root of a binary tree, determine if it is a valid binary search tree (BST).\n        A valid BST is defined as follows:\n            The left subtree of a node contains only nodes with keys less than the node's key.\n            The right subtree of a node contains only nodes with keys greater than the node's key.\n            Both the left and right subtrees must also be binary search trees.\n        Example 1:\n        Input: root = [2,1,3]\n        Output: true\n        Example 2:\n        Input: root = [5,1,4,null,null,3,6]\n        Output: false\n        Explanation: The root node's value is 5 but its right child's value is 4.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        if not root:\n            return True\n        return self.isValidBSTHelper(root, float('-inf'), float('inf'))"
    },
    {
        "number": 98,
        "title": "Validate Binary Search Tree",
        "difficulty": 1,
        "prompt": "class Solution:\n    def isValidBST(self, root: Optional[TreeNode]) -> bool:\n        \"\"\"\n        Given the root of a binary tree, determine if it is a valid binary search tree (BST).\n        A valid BST is defined as follows:\n            The left subtree of a node contains only nodes with keys less than the node's key.\n            The right subtree of a node contains only nodes with keys greater than the node's key.\n            Both the left and right subtrees must also be binary search trees.\n        Example 1:\n        Input: root = [2,1,3]\n        Output: true\n        Example 2:\n        Input: root = [5,1,4,null,null,3,6]\n        Output: false\n        Explanation: The root node's value is 5 but its right child's value is 4.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        def is_valid_bst(root, min_val, max_val):\n            if not root:\n                return True\n            if root.val <= min_val or root.val >= max_val:\n                return False\n            return is_valid_bst(root.left, min_val, root.val) and is_valid_bst(root.right, root.val, max_val)"
    },
    {
        "number": 99,
        "title": "Recover Binary Search Tree",
        "difficulty": 1,
        "prompt": "class Solution:\n    def recoverTree(self, root: Optional[TreeNode]) -> None:\n        \"\"\"\n        Do not return anything, modify root in-place instead.\n        You are given the root of a binary search tree (BST), where the values of exactly two nodes of the tree were swapped by mistake. Recover the tree without changing its structure.\n        Example 1:\n        Input: root = [1,3,null,null,2]\n        Output: [3,1,null,null,2]\n        Explanation: 3 cannot be a left child of 1 because 3 > 1. Swapping 1 and 3 makes the BST valid.\n        Example 2:\n        Input: root = [3,1,4,null,null,2]\n        Output: [2,1,4,null,null,3]\n        Explanation: 2 cannot be in the right subtree of 3 because 2 < 3. Swapping 2 and 3 makes the BST valid.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        self.first, self.second = None, None\n        self.prev = TreeNode(float('-inf'))\n        def inorder(root):\n            if not root:\n                return\n            inorder(root.left)\n            if self.first is None and self.prev.val >= root.val:\n                self.first = self.prev\n            if self.first is not None and self.prev.val >= root.val:\n                self.second = root\n            self.prev = root\n            inorder(root.right)\n        inorder(root)\n        self.first.val, self.second.val = self.second.val, self.first.val\n<|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>"
    },
    {
        "number": 99,
        "title": "Recover Binary Search Tree",
        "difficulty": 1,
        "prompt": "class Solution:\n    def recoverTree(self, root: Optional[TreeNode]) -> None:\n        \"\"\"\n        Do not return anything, modify root in-place instead.\n        You are given the root of a binary search tree (BST), where the values of exactly two nodes of the tree were swapped by mistake. Recover the tree without changing its structure.\n        Example 1:\n        Input: root = [1,3,null,null,2]\n        Output: [3,1,null,null,2]\n        Explanation: 3 cannot be a left child of 1 because 3 > 1. Swapping 1 and 3 makes the BST valid.\n        Example 2:\n        Input: root = [3,1,4,null,null,2]\n        Output: [2,1,4,null,null,3]\n        Explanation: 2 cannot be in the right subtree of 3 because 2 < 3. Swapping 2 and 3 makes the BST valid.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        self.swap = []\n        self.preorder(root)\n        self.swap[0].val, self.swap[1].val = self.swap[1].val, self.swap[0].val"
    },
    {
        "number": 100,
        "title": "Same Tree",
        "difficulty": 0,
        "prompt": "class Solution:\n    def isSameTree(self, p: Optional[TreeNode], q: Optional[TreeNode]) -> bool:\n        \"\"\"\n        Given the roots of two binary trees p and q, write a function to check if they are the same or not.\n        Two binary trees are considered the same if they are structurally identical, and the nodes have the same value.\n        Example 1:\n        Input: p = [1,2,3], q = [1,2,3]\n        Output: true\n        Example 2:\n        Input: p = [1,2], q = [1,null,2]\n        Output: false\n        Example 3:\n        Input: p = [1,2,1], q = [1,1,2]\n        Output: false\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        if not p and not q:\n            return True\n        if not p or not q:\n            return False\n        if p.val!= q.val:\n            return False\n        return self.isSameTree(p.left, q.left) and self.isSameTree(p.right, q.right)\n<|endoftext|>"
    },
    {
        "number": 100,
        "title": "Same Tree",
        "difficulty": 0,
        "prompt": "class Solution:\n    def isSameTree(self, p: Optional[TreeNode], q: Optional[TreeNode]) -> bool:\n        \"\"\"\n        Given the roots of two binary trees p and q, write a function to check if they are the same or not.\n        Two binary trees are considered the same if they are structurally identical, and the nodes have the same value.\n        Example 1:\n        Input: p = [1,2,3], q = [1,2,3]\n        Output: true\n        Example 2:\n        Input: p = [1,2], q = [1,null,2]\n        Output: false\n        Example 3:\n        Input: p = [1,2,1], q = [1,1,2]\n        Output: false\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        if not p and not q:\n            return True\n        if not p or not q:\n            return False\n        if p.val!= q.val:\n            return False\n        return self.isSameTree(p.left, q.left) and self.isSameTree(p.right, q.right)\n<|endoftext|>"
    },
    {
        "number": 101,
        "title": "Symmetric Tree",
        "difficulty": 0,
        "prompt": "class Solution:\n    def isSymmetric(self, root: Optional[TreeNode]) -> bool:\n        \"\"\"\n        Given the root of a binary tree, check whether it is a mirror of itself (i.e., symmetric around its center).\n        Example 1:\n        Input: root = [1,2,2,3,4,4,3]\n        Output: true\n        Example 2:\n        Input: root = [1,2,2,null,3,null,3]\n        Output: false\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        if not root:\n            return True\n        return self.isMirror(root.left, root.right)"
    },
    {
        "number": 101,
        "title": "Symmetric Tree",
        "difficulty": 0,
        "prompt": "class Solution:\n    def isSymmetric(self, root: Optional[TreeNode]) -> bool:\n        \"\"\"\n        Given the root of a binary tree, check whether it is a mirror of itself (i.e., symmetric around its center).\n        Example 1:\n        Input: root = [1,2,2,3,4,4,3]\n        Output: true\n        Example 2:\n        Input: root = [1,2,2,null,3,null,3]\n        Output: false\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        if not root:\n            return True\n        return self.isMirror(root.left, root.right)"
    },
    {
        "number": 102,
        "title": "Binary Tree Level Order Traversal",
        "difficulty": 1,
        "prompt": "class Solution:\n    def levelOrder(self, root: Optional[TreeNode]) -> List[List[int]]:\n        \"\"\"\n        Given the root of a binary tree, return the level order traversal of its nodes' values. (i.e., from left to right, level by level).\n        Example 1:\n        Input: root = [3,9,20,null,null,15,7]\n        Output: [[3],[9,20],[15,7]]\n        Example 2:\n        Input: root = [1]\n        Output: [[1]]\n        Example 3:\n        Input: root = []\n        Output: []\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        if not root:\n            return []\n        queue = [root]\n        res = []\n        while queue:\n            temp = []\n            for i in range(len(queue)):\n                node = queue.pop(0)\n                temp.append(node.val)\n                if node.left:\n                    queue.append(node.left)\n                if node.right:\n                    queue.append(node.right)\n            res.append(temp)\n        return res"
    },
    {
        "number": 102,
        "title": "Binary Tree Level Order Traversal",
        "difficulty": 1,
        "prompt": "class Solution:\n    def levelOrder(self, root: Optional[TreeNode]) -> List[List[int]]:\n        \"\"\"\n        Given the root of a binary tree, return the level order traversal of its nodes' values. (i.e., from left to right, level by level).\n        Example 1:\n        Input: root = [3,9,20,null,null,15,7]\n        Output: [[3],[9,20],[15,7]]\n        Example 2:\n        Input: root = [1]\n        Output: [[1]]\n        Example 3:\n        Input: root = []\n        Output: []\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        if not root:\n            return []\n        queue = [root]\n        res = []\n        while queue:\n            tmp = []\n            for _ in range(len(queue)):\n                node = queue.pop(0)\n                tmp.append(node.val)\n                if node.left:\n                    queue.append(node.left)\n                if node.right:\n                    queue.append(node.right)\n            res.append(tmp)\n        return res"
    },
    {
        "number": 103,
        "title": "Binary Tree Zigzag Level Order Traversal",
        "difficulty": 1,
        "prompt": "class Solution:\n    def zigzagLevelOrder(self, root: Optional[TreeNode]) -> List[List[int]]:\n        \"\"\"\n        Given the root of a binary tree, return the zigzag level order traversal of its nodes' values. (i.e., from left to right, then right to left for the next level and alternate between).\n        Example 1:\n        Input: root = [3,9,20,null,null,15,7]\n        Output: [[3],[20,9],[15,7]]\n        Example 2:\n        Input: root = [1]\n        Output: [[1]]\n        Example 3:\n        Input: root = []\n        Output: []\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        if not root:\n            return []\n        queue = [root]\n        res = []\n        while queue:\n            level = []\n            for _ in range(len(queue)):\n                node = queue.pop(0)\n                level.append(node.val)\n                if node.left:\n                    queue.append(node.left)\n                if node.right:\n                    queue.append(node.right)\n            res.append(level)\n        for i in range(len(res)):\n            if i % 2 == 1:\n                res[i] = res[i][::-1]\n        return res"
    },
    {
        "number": 103,
        "title": "Binary Tree Zigzag Level Order Traversal",
        "difficulty": 1,
        "prompt": "class Solution:\n    def zigzagLevelOrder(self, root: Optional[TreeNode]) -> List[List[int]]:\n        \"\"\"\n        Given the root of a binary tree, return the zigzag level order traversal of its nodes' values. (i.e., from left to right, then right to left for the next level and alternate between).\n        Example 1:\n        Input: root = [3,9,20,null,null,15,7]\n        Output: [[3],[20,9],[15,7]]\n        Example 2:\n        Input: root = [1]\n        Output: [[1]]\n        Example 3:\n        Input: root = []\n        Output: []\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        if not root:\n            return []\n        \n        queue = [root]\n        result = []\n        \n        while queue:\n            level = []\n            for _ in range(len(queue)):\n                node = queue.pop(0)\n                level.append(node.val)\n                if node.left:\n                    queue.append(node.left)\n                if node.right:\n                    queue.append(node.right)\n            result.append(level)\n        \n        for i in range(len(result)):\n            if i % 2 == 1:\n                result[i] = result[i][::-1]\n        return result\n<|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>"
    },
    {
        "number": 104,
        "title": "Maximum Depth of Binary Tree",
        "difficulty": 0,
        "prompt": "class Solution:\n    def maxDepth(self, root: Optional[TreeNode]) -> int:\n        \"\"\"\n        Given the root of a binary tree, return its maximum depth.\n        A binary tree's maximum depth is the number of nodes along the longest path from the root node down to the farthest leaf node.\n        Example 1:\n        Input: root = [3,9,20,null,null,15,7]\n        Output: 3\n        Example 2:\n        Input: root = [1,null,2]\n        Output: 2\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        if not root:\n            return 0\n        return max(self.maxDepth(root.left), self.maxDepth(root.right)) + 1\n<|endoftext|>"
    },
    {
        "number": 104,
        "title": "Maximum Depth of Binary Tree",
        "difficulty": 0,
        "prompt": "class Solution:\n    def maxDepth(self, root: Optional[TreeNode]) -> int:\n        \"\"\"\n        Given the root of a binary tree, return its maximum depth.\n        A binary tree's maximum depth is the number of nodes along the longest path from the root node down to the farthest leaf node.\n        Example 1:\n        Input: root = [3,9,20,null,null,15,7]\n        Output: 3\n        Example 2:\n        Input: root = [1,null,2]\n        Output: 2\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        if not root:\n            return 0\n        return 1 + max(self.maxDepth(root.left), self.maxDepth(root.right))\n<|endoftext|>"
    },
    {
        "number": 105,
        "title": "Construct Binary Tree from Preorder and Inorder Traversal",
        "difficulty": 1,
        "prompt": "class Solution:\n    def buildTree(self, preorder: List[int], inorder: List[int]) -> Optional[TreeNode]:\n        \"\"\"\n        Given two integer arrays preorder and inorder where preorder is the preorder traversal of a binary tree and inorder is the inorder traversal of the same tree, construct and return the binary tree.\n        Example 1:\n        Input: preorder = [3,9,20,15,7], inorder = [9,3,15,20,7]\n        Output: [3,9,20,null,null,15,7]\n        Example 2:\n        Input: preorder = [-1], inorder = [-1]\n        Output: [-1]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        if not preorder or not inorder:\n            return None\n        root = TreeNode(preorder[0])\n        idx = inorder.index(preorder[0])\n        root.left = self.buildTree(preorder[1:idx+1], inorder[:idx])\n        root.right = self.buildTree(preorder[idx+1:], inorder[idx+1:])\n        return root\n<|endoftext|>"
    },
    {
        "number": 105,
        "title": "Construct Binary Tree from Preorder and Inorder Traversal",
        "difficulty": 1,
        "prompt": "class Solution:\n    def buildTree(self, preorder: List[int], inorder: List[int]) -> Optional[TreeNode]:\n        \"\"\"\n        Given two integer arrays preorder and inorder where preorder is the preorder traversal of a binary tree and inorder is the inorder traversal of the same tree, construct and return the binary tree.\n        Example 1:\n        Input: preorder = [3,9,20,15,7], inorder = [9,3,15,20,7]\n        Output: [3,9,20,null,null,15,7]\n        Example 2:\n        Input: preorder = [-1], inorder = [-1]\n        Output: [-1]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        if not preorder or not inorder:\n            return None\n        root = TreeNode(preorder[0])\n        mid = inorder.index(preorder[0])\n        root.left = self.buildTree(preorder[1:mid+1], inorder[:mid])\n        root.right = self.buildTree(preorder[mid+1:], inorder[mid+1:])\n        return root\n<|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>"
    },
    {
        "number": 106,
        "title": "Construct Binary Tree from Inorder and Postorder Traversal",
        "difficulty": 1,
        "prompt": "class Solution:\n    def buildTree(self, inorder: List[int], postorder: List[int]) -> Optional[TreeNode]:\n        \"\"\"\n        Given two integer arrays inorder and postorder where inorder is the inorder traversal of a binary tree and postorder is the postorder traversal of the same tree, construct and return the binary tree.\n        Example 1:\n        Input: inorder = [9,3,15,20,7], postorder = [9,15,7,20,3]\n        Output: [3,9,20,null,null,15,7]\n        Example 2:\n        Input: inorder = [-1], postorder = [-1]\n        Output: [-1]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        if not inorder or not postorder:\n            return None\n        root = TreeNode(postorder[-1])\n        i = inorder.index(root.val)\n        root.left = self.buildTree(inorder[:i], postorder[:i])\n        root.right = self.buildTree(inorder[i+1:], postorder[i:-1])\n        return root\n<|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>"
    },
    {
        "number": 106,
        "title": "Construct Binary Tree from Inorder and Postorder Traversal",
        "difficulty": 1,
        "prompt": "class Solution:\n    def buildTree(self, inorder: List[int], postorder: List[int]) -> Optional[TreeNode]:\n        \"\"\"\n        Given two integer arrays inorder and postorder where inorder is the inorder traversal of a binary tree and postorder is the postorder traversal of the same tree, construct and return the binary tree.\n        Example 1:\n        Input: inorder = [9,3,15,20,7], postorder = [9,15,7,20,3]\n        Output: [3,9,20,null,null,15,7]\n        Example 2:\n        Input: inorder = [-1], postorder = [-1]\n        Output: [-1]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        if not inorder or not postorder:\n            return None\n        root = TreeNode(postorder[-1])\n        root_index = inorder.index(postorder[-1])\n        root.left = self.buildTree(inorder[:root_index], postorder[:root_index])\n        root.right = self.buildTree(inorder[root_index+1:], postorder[root_index:-1])\n        return root\n<|endoftext|>"
    },
    {
        "number": 107,
        "title": "Binary Tree Level Order Traversal II",
        "difficulty": 1,
        "prompt": "class Solution:\n    def levelOrderBottom(self, root: Optional[TreeNode]) -> List[List[int]]:\n        \"\"\"\n        Given the root of a binary tree, return the bottom-up level order traversal of its nodes' values. (i.e., from left to right, level by level from leaf to root).\n        Example 1:\n        Input: root = [3,9,20,null,null,15,7]\n        Output: [[15,7],[9,20],[3]]\n        Example 2:\n        Input: root = [1]\n        Output: [[1]]\n        Example 3:\n        Input: root = []\n        Output: []\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        if not root:\n            return []\n        queue = [root]\n        res = []\n        while queue:\n            level = []\n            for _ in range(len(queue)):\n                node = queue.pop(0)\n                level.append(node.val)\n                if node.left:\n                    queue.append(node.left)\n                if node.right:\n                    queue.append(node.right)\n            res.append(level)\n        return res[::-1]\n<|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>"
    },
    {
        "number": 107,
        "title": "Binary Tree Level Order Traversal II",
        "difficulty": 1,
        "prompt": "class Solution:\n    def levelOrderBottom(self, root: Optional[TreeNode]) -> List[List[int]]:\n        \"\"\"\n        Given the root of a binary tree, return the bottom-up level order traversal of its nodes' values. (i.e., from left to right, level by level from leaf to root).\n        Example 1:\n        Input: root = [3,9,20,null,null,15,7]\n        Output: [[15,7],[9,20],[3]]\n        Example 2:\n        Input: root = [1]\n        Output: [[1]]\n        Example 3:\n        Input: root = []\n        Output: []\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        if not root:\n            return []\n        queue = [root]\n        res = []\n        while queue:\n            cur_level = []\n            next_queue = []\n            for node in queue:\n                cur_level.append(node.val)\n                if node.left:\n                    next_queue.append(node.left)\n                if node.right:\n                    next_queue.append(node.right)\n            res.append(cur_level)\n            queue = next_queue\n        return res[::-1]\n<|endoftext|>"
    },
    {
        "number": 108,
        "title": "Convert Sorted Array to Binary Search Tree",
        "difficulty": 0,
        "prompt": "class Solution:\n    def sortedArrayToBST(self, nums: List[int]) -> Optional[TreeNode]:\n        \"\"\"\n        Given an integer array nums where the elements are sorted in ascending order, convert it to a height-balanced binary search tree.\n        Example 1:\n        Input: nums = [-10,-3,0,5,9]\n        Output: [0,-3,9,-10,null,5]\n        Explanation: [0,-10,5,null,-3,null,9] is also accepted:\n        Example 2:\n        Input: nums = [1,3]\n        Output: [3,1]\n        Explanation: [1,null,3] and [3,1] are both height-balanced BSTs.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        if not nums:\n            return None\n        mid = len(nums) // 2\n        root = TreeNode(nums[mid])\n        root.left = self.sortedArrayToBST(nums[:mid])\n        root.right = self.sortedArrayToBST(nums[mid+1:])\n        return root\n<|endoftext|>"
    },
    {
        "number": 108,
        "title": "Convert Sorted Array to Binary Search Tree",
        "difficulty": 0,
        "prompt": "class Solution:\n    def sortedArrayToBST(self, nums: List[int]) -> Optional[TreeNode]:\n        \"\"\"\n        Given an integer array nums where the elements are sorted in ascending order, convert it to a height-balanced binary search tree.\n        Example 1:\n        Input: nums = [-10,-3,0,5,9]\n        Output: [0,-3,9,-10,null,5]\n        Explanation: [0,-10,5,null,-3,null,9] is also accepted:\n        Example 2:\n        Input: nums = [1,3]\n        Output: [3,1]\n        Explanation: [1,null,3] and [3,1] are both height-balanced BSTs.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        if not nums:\n            return None\n        mid = len(nums) // 2\n        root = TreeNode(nums[mid])\n        root.left = self.sortedArrayToBST(nums[:mid])\n        root.right = self.sortedArrayToBST(nums[mid+1:])\n        return root\n<|endoftext|>"
    },
    {
        "number": 109,
        "title": "Convert Sorted List to Binary Search Tree",
        "difficulty": 1,
        "prompt": "class Solution:\n    def sortedListToBST(self, head: Optional[ListNode]) -> Optional[TreeNode]:\n        \"\"\"\n        Given the head of a singly linked list where elements are sorted in ascending order, convert it to a height-balanced binary search tree.\n        Example 1:\n        Input: head = [-10,-3,0,5,9]\n        Output: [0,-3,9,-10,null,5]\n        Explanation: One possible answer is [0,-3,9,-10,null,5], which represents the shown height balanced BST.\n        Example 2:\n        Input: head = []\n        Output: []\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        if not head:\n            return None\n        if not head.next:\n            return TreeNode(head.val)\n        \n        # find the middle point\n        slow, fast = head, head\n        while fast and fast.next:\n            slow = slow.next\n            fast = fast.next.next\n        \n        # cut the linked list into two parts\n        node = TreeNode(slow.val)\n        node.left = self.sortedListToBST(head)\n        node.right = self.sortedListToBST(slow.next)\n        return node\n<|endoftext|>"
    },
    {
        "number": 109,
        "title": "Convert Sorted List to Binary Search Tree",
        "difficulty": 1,
        "prompt": "class Solution:\n    def sortedListToBST(self, head: Optional[ListNode]) -> Optional[TreeNode]:\n        \"\"\"\n        Given the head of a singly linked list where elements are sorted in ascending order, convert it to a height-balanced binary search tree.\n        Example 1:\n        Input: head = [-10,-3,0,5,9]\n        Output: [0,-3,9,-10,null,5]\n        Explanation: One possible answer is [0,-3,9,-10,null,5], which represents the shown height balanced BST.\n        Example 2:\n        Input: head = []\n        Output: []\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        if not head:\n            return None\n        if not head.next:\n            return TreeNode(head.val)\n        \n        # find the middle point\n        slow = fast = head\n        while fast and fast.next:\n            slow = slow.next\n            fast = fast.next.next\n        \n        # cut the linked list into two parts\n        node = TreeNode(slow.val)\n        node.left = self.sortedListToBST(head)\n        node.right = self.sortedListToBST(slow.next)\n        return node\n<|endoftext|><|endoftext|><|endoftext|>"
    },
    {
        "number": 110,
        "title": "Balanced Binary Tree",
        "difficulty": 0,
        "prompt": "class Solution:\n    def isBalanced(self, root: Optional[TreeNode]) -> bool:\n        \"\"\"\n        Given a binary tree, determine if it is height-balanced.\n        Example 1:\n        Input: root = [3,9,20,null,null,15,7]\n        Output: true\n        Example 2:\n        Input: root = [1,2,2,3,3,null,null,4,4]\n        Output: false\n        Example 3:\n        Input: root = []\n        Output: true\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        if not root:\n            return True\n        if abs(self.height(root.left) - self.height(root.right)) > 1:\n            return False\n        return self.isBalanced(root.left) and self.isBalanced(root.right)"
    },
    {
        "number": 110,
        "title": "Balanced Binary Tree",
        "difficulty": 0,
        "prompt": "class Solution:\n    def isBalanced(self, root: Optional[TreeNode]) -> bool:\n        \"\"\"\n        Given a binary tree, determine if it is height-balanced.\n        Example 1:\n        Input: root = [3,9,20,null,null,15,7]\n        Output: true\n        Example 2:\n        Input: root = [1,2,2,3,3,null,null,4,4]\n        Output: false\n        Example 3:\n        Input: root = []\n        Output: true\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        def dfs(root):\n            if not root:\n                return 0\n            left = dfs(root.left)\n            right = dfs(root.right)\n            if left == -1 or right == -1 or abs(left - right) > 1:\n                return -1\n            return max(left, right) + 1"
    },
    {
        "number": 111,
        "title": "Minimum Depth of Binary Tree",
        "difficulty": 0,
        "prompt": "class Solution:\n    def minDepth(self, root: Optional[TreeNode]) -> int:\n        \"\"\"\n        Given a binary tree, find its minimum depth.\n        The minimum depth is the number of nodes along the shortest path from the root node down to the nearest leaf node.\n        Note: A leaf is a node with no children.\n        Example 1:\n        Input: root = [3,9,20,null,null,15,7]\n        Output: 2\n        Example 2:\n        Input: root = [2,null,3,null,4,null,5,null,6]\n        Output: 5\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        if not root:\n            return 0\n        if not root.left and not root.right:\n            return 1\n        if not root.left:\n            return 1 + self.minDepth(root.right)\n        if not root.right:\n            return 1 + self.minDepth(root.left)\n        return 1 + min(self.minDepth(root.left), self.minDepth(root.right))"
    },
    {
        "number": 111,
        "title": "Minimum Depth of Binary Tree",
        "difficulty": 0,
        "prompt": "class Solution:\n    def minDepth(self, root: Optional[TreeNode]) -> int:\n        \"\"\"\n        Given a binary tree, find its minimum depth.\n        The minimum depth is the number of nodes along the shortest path from the root node down to the nearest leaf node.\n        Note: A leaf is a node with no children.\n        Example 1:\n        Input: root = [3,9,20,null,null,15,7]\n        Output: 2\n        Example 2:\n        Input: root = [2,null,3,null,4,null,5,null,6]\n        Output: 5\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        if not root:\n            return 0\n        if not root.left and not root.right:\n            return 1\n        if not root.left:\n            return 1 + self.minDepth(root.right)\n        if not root.right:\n            return 1 + self.minDepth(root.left)\n        return 1 + min(self.minDepth(root.left), self.minDepth(root.right))"
    },
    {
        "number": 112,
        "title": "Path Sum",
        "difficulty": 0,
        "prompt": "class Solution:\n    def hasPathSum(self, root: Optional[TreeNode], targetSum: int) -> bool:\n        \"\"\"\n        Given the root of a binary tree and an integer targetSum, return true if the tree has a root-to-leaf path such that adding up all the values along the path equals targetSum.\n        A leaf is a node with no children.\n        Example 1:\n        Input: root = [5,4,8,11,null,13,4,7,2,null,null,null,1], targetSum = 22\n        Output: true\n        Explanation: The root-to-leaf path with the target sum is shown.\n        Example 2:\n        Input: root = [1,2,3], targetSum = 5\n        Output: false\n        Explanation: There two root-to-leaf paths in the tree:\n        (1 --> 2): The sum is 3.\n        (1 --> 3): The sum is 4.\n        There is no root-to-leaf path with sum = 5.\n        Example 3:\n        Input: root = [], targetSum = 0\n        Output: false\n        Explanation: Since the tree is empty, there are no root-to-leaf paths.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        if not root:\n            return False\n        if not root.left and not root.right and root.val == targetSum:\n            return True\n        return self.hasPathSum(root.left, targetSum - root.val) or self.hasPathSum(root.right, targetSum - root.val)\n<|endoftext|>"
    },
    {
        "number": 112,
        "title": "Path Sum",
        "difficulty": 0,
        "prompt": "class Solution:\n    def hasPathSum(self, root: Optional[TreeNode], targetSum: int) -> bool:\n        \"\"\"\n        Given the root of a binary tree and an integer targetSum, return true if the tree has a root-to-leaf path such that adding up all the values along the path equals targetSum.\n        A leaf is a node with no children.\n        Example 1:\n        Input: root = [5,4,8,11,null,13,4,7,2,null,null,null,1], targetSum = 22\n        Output: true\n        Explanation: The root-to-leaf path with the target sum is shown.\n        Example 2:\n        Input: root = [1,2,3], targetSum = 5\n        Output: false\n        Explanation: There two root-to-leaf paths in the tree:\n        (1 --> 2): The sum is 3.\n        (1 --> 3): The sum is 4.\n        There is no root-to-leaf path with sum = 5.\n        Example 3:\n        Input: root = [], targetSum = 0\n        Output: false\n        Explanation: Since the tree is empty, there are no root-to-leaf paths.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        if not root:\n            return False\n        if not root.left and not root.right:\n            return root.val == targetSum\n        return self.hasPathSum(root.left, targetSum - root.val) or self.hasPathSum(root.right, targetSum - root.val)\n<|endoftext|><|endoftext|><|endoftext|>"
    },
    {
        "number": 113,
        "title": "Path Sum II",
        "difficulty": 1,
        "prompt": "class Solution:\n    def pathSum(self, root: Optional[TreeNode], targetSum: int) -> List[List[int]]:\n        \"\"\"\n        Given the root of a binary tree and an integer targetSum, return all root-to-leaf paths where the sum of the node values in the path equals targetSum. Each path should be returned as a list of the node values, not node references.\n        A root-to-leaf path is a path starting from the root and ending at any leaf node. A leaf is a node with no children.\n        Example 1:\n        Input: root = [5,4,8,11,null,13,4,7,2,null,null,5,1], targetSum = 22\n        Output: [[5,4,11,2],[5,8,4,5]]\n        Explanation: There are two paths whose sum equals targetSum:\n        5 + 4 + 11 + 2 = 22\n        5 + 8 + 4 + 5 = 22\n        Example 2:\n        Input: root = [1,2,3], targetSum = 5\n        Output: []\n        Example 3:\n        Input: root = [1,2], targetSum = 0\n        Output: []\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        if not root:\n            return []\n        if not root.left and not root.right and targetSum == root.val:\n            return [[root.val]]\n        left = self.pathSum(root.left, targetSum - root.val)\n        right = self.pathSum(root.right, targetSum - root.val)\n        return [[root.val] + i for i in left + right]\n<|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>"
    },
    {
        "number": 113,
        "title": "Path Sum II",
        "difficulty": 1,
        "prompt": "class Solution:\n    def pathSum(self, root: Optional[TreeNode], targetSum: int) -> List[List[int]]:\n        \"\"\"\n        Given the root of a binary tree and an integer targetSum, return all root-to-leaf paths where the sum of the node values in the path equals targetSum. Each path should be returned as a list of the node values, not node references.\n        A root-to-leaf path is a path starting from the root and ending at any leaf node. A leaf is a node with no children.\n        Example 1:\n        Input: root = [5,4,8,11,null,13,4,7,2,null,null,5,1], targetSum = 22\n        Output: [[5,4,11,2],[5,8,4,5]]\n        Explanation: There are two paths whose sum equals targetSum:\n        5 + 4 + 11 + 2 = 22\n        5 + 8 + 4 + 5 = 22\n        Example 2:\n        Input: root = [1,2,3], targetSum = 5\n        Output: []\n        Example 3:\n        Input: root = [1,2], targetSum = 0\n        Output: []\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        if not root:\n            return []\n        res = []\n        self.dfs(root, targetSum, [], res)\n        return res"
    },
    {
        "number": 114,
        "title": "Flatten Binary Tree to Linked List",
        "difficulty": 1,
        "prompt": "class Solution:\n    def flatten(self, root: Optional[TreeNode]) -> None:\n        \"\"\"\n        Do not return anything, modify root in-place instead.\n        Given the root of a binary tree, flatten the tree into a \"linked list\":\n            The \"linked list\" should use the same TreeNode class where the right child pointer points to the next node in the list and the left child pointer is always null.\n            The \"linked list\" should be in the same order as a pre-order traversal of the binary tree.\n        Example 1:\n        Input: root = [1,2,5,3,4,null,6]\n        Output: [1,null,2,null,3,null,4,null,5,null,6]\n        Example 2:\n        Input: root = []\n        Output: []\n        Example 3:\n        Input: root = [0]\n        Output: [0]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        if not root:\n            return None\n        self.flatten_helper(root)"
    },
    {
        "number": 114,
        "title": "Flatten Binary Tree to Linked List",
        "difficulty": 1,
        "prompt": "class Solution:\n    def flatten(self, root: Optional[TreeNode]) -> None:\n        \"\"\"\n        Do not return anything, modify root in-place instead.\n        Given the root of a binary tree, flatten the tree into a \"linked list\":\n            The \"linked list\" should use the same TreeNode class where the right child pointer points to the next node in the list and the left child pointer is always null.\n            The \"linked list\" should be in the same order as a pre-order traversal of the binary tree.\n        Example 1:\n        Input: root = [1,2,5,3,4,null,6]\n        Output: [1,null,2,null,3,null,4,null,5,null,6]\n        Example 2:\n        Input: root = []\n        Output: []\n        Example 3:\n        Input: root = [0]\n        Output: [0]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        if not root:\n            return\n        self.flatten(root.left)\n        self.flatten(root.right)\n        if root.left:\n            root.right = root.left\n            root.left = None\n        if root.right:\n            node = root.right\n            while node.right:\n                node = node.right\n            node.right = root.right\n            root.right = root.left\n            root.left = None\n        return root"
    },
    {
        "number": 115,
        "title": "Distinct Subsequences",
        "difficulty": 2,
        "prompt": "class Solution:\n    def numDistinct(self, s: str, t: str) -> int:\n        \"\"\"\n        Given two strings s and t, return the number of distinct subsequences of s which equals t.\n        The test cases are generated so that the answer fits on a 32-bit signed integer.\n        Example 1:\n        Input: s = \"rabbbit\", t = \"rabbit\"\n        Output: 3\n        Explanation:\n        As shown below, there are 3 ways you can generate \"rabbit\" from s.\n        rabbbit\n        rabbbit\n        rabbbit\n        Example 2:\n        Input: s = \"babgbag\", t = \"bag\"\n        Output: 5\n        Explanation:\n        As shown below, there are 5 ways you can generate \"bag\" from s.\n        babgbag\n        babgbag\n        babgbag\n        babgbag\n        babgbag\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        m, n = len(s), len(t)\n        dp = [[0] * (n + 1) for _ in range(m + 1)]\n        for i in range(m + 1):\n            dp[i][n] = 1\n        for i in range(m - 1, -1, -1):\n            for j in range(n - 1, -1, -1):\n                if s[i] == t[j]:\n                    dp[i][j] = dp[i + 1][j + 1] + dp[i + 1][j]\n                else:\n                    dp[i][j] = dp[i + 1][j]\n        return dp[0][0]"
    },
    {
        "number": 115,
        "title": "Distinct Subsequences",
        "difficulty": 2,
        "prompt": "class Solution:\n    def numDistinct(self, s: str, t: str) -> int:\n        \"\"\"\n        Given two strings s and t, return the number of distinct subsequences of s which equals t.\n        The test cases are generated so that the answer fits on a 32-bit signed integer.\n        Example 1:\n        Input: s = \"rabbbit\", t = \"rabbit\"\n        Output: 3\n        Explanation:\n        As shown below, there are 3 ways you can generate \"rabbit\" from s.\n        rabbbit\n        rabbbit\n        rabbbit\n        Example 2:\n        Input: s = \"babgbag\", t = \"bag\"\n        Output: 5\n        Explanation:\n        As shown below, there are 5 ways you can generate \"bag\" from s.\n        babgbag\n        babgbag\n        babgbag\n        babgbag\n        babgbag\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        # dp[i][j] = dp[i-1][j] + dp[i-1][j-1]\n        # dp[i][j] = dp[i-1][j] + dp[i][j-1]\n        # dp[i][j] = dp[i][j-1]\n        # dp[i][j] = dp[i-1][j]\n        # dp[i][j] = dp[i][j-1]\n        # dp[i][j] = dp[i-1][j] + dp[i][j-1] - dp[i-1][j-1]\n        # dp[i][j] = dp[i-1][j] + dp[i][j-1] - dp[i-1][j-1]\n        # dp[i][j] = dp[i-1][j] + dp[i][j-1] - dp[i-1][j-1]\n        # dp[i][j] = dp[i-1][j] + dp[i][j-1] - dp[i-1][j-1]\n        # dp[i][j] ="
    },
    {
        "number": 116,
        "title": "Populating Next Right Pointers in Each Node",
        "difficulty": 1,
        "prompt": "\n        \"\"\"\nclass Node:\n    def __init__(self, val: int = 0, left: 'Node' = None, right: 'Node' = None, next: 'Node' = None):\n        self.val = val\n        self.left = left\n        self.right = right\n        self.next = next\n        You are given a perfect binary tree where all leaves are on the same level, and every parent has two children. The binary tree has the following definition:\n        struct Node {\n          int val;\n          Node *left;\n          Node *right;\n          Node *next;\n        }\n        Populate each next pointer to point to its next right node. If there is no next right node, the next pointer should be set to NULL.\n        Initially, all next pointers are set to NULL.\n        Example 1:\n        Input: root = [1,2,3,4,5,6,7]\n        Output: [1,#,2,3,#,4,5,6,7,#]\n        Explanation: Given the above perfect binary tree (Figure A), your function should populate each next pointer to point to its next right node, just like in Figure B. The serialized output is in level order as connected by the next pointers, with '#' signifying the end of each level.\n        Example 2:\n        Input: root = []\n        Output: []\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        self.val = val\n        self.left = left\n        self.right = right\n        self.next = next\n        \"\"\"\n        # Definition for a Node.\n        class Node:\n            def __init__(self, val: int = 0, left: 'Node' = None, right: 'Node' = None, next: 'Node' = None):\n                self.val = val\n                self.left = left\n                self.right = right\n                self.next = next\n        \"\"\"\n        self.next = None\n        \"\"\"\n        # Definition for a Node.\n        class Node:\n            def __init__(self, val: int = 0, left: 'Node' = None, right: 'Node' = None, next: 'Node' = None):\n                self.val = val\n                self.left = left\n                self.right = right\n                self.next = next\n        \"\"\"\n        self.next = None\n        \"\"\"\n        # Definition for a Node.\n        class Node:\n            def __init__(self, val: int = 0, left: 'Node' = None, right: 'Node' = None, next: 'Node' = None):\n                self.val = val\n                self.left = left\n                self.right = right\n                self.next = next\n        \"\"\"\n"
    },
    {
        "number": 116,
        "title": "Populating Next Right Pointers in Each Node",
        "difficulty": 1,
        "prompt": "\n        \"\"\"\nclass Node:\n    def __init__(self, val: int = 0, left: 'Node' = None, right: 'Node' = None, next: 'Node' = None):\n        self.val = val\n        self.left = left\n        self.right = right\n        self.next = next\n        You are given a perfect binary tree where all leaves are on the same level, and every parent has two children. The binary tree has the following definition:\n        struct Node {\n          int val;\n          Node *left;\n          Node *right;\n          Node *next;\n        }\n        Populate each next pointer to point to its next right node. If there is no next right node, the next pointer should be set to NULL.\n        Initially, all next pointers are set to NULL.\n        Example 1:\n        Input: root = [1,2,3,4,5,6,7]\n        Output: [1,#,2,3,#,4,5,6,7,#]\n        Explanation: Given the above perfect binary tree (Figure A), your function should populate each next pointer to point to its next right node, just like in Figure B. The serialized output is in level order as connected by the next pointers, with '#' signifying the end of each level.\n        Example 2:\n        Input: root = []\n        Output: []\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        self.val = val\n        self.left = left\n        self.right = right\n        self.next = next\n        \"\"\"\n        # Definition for a Node.\n        class Node:\n            def __init__(self, val: int = 0, left: 'Node' = None, right: 'Node' = None, next: 'Node' = None):\n                self.val = val\n                self.left = left\n                self.right = right\n                self.next = next\n        \"\"\"\n        self.next = None\n        self.populate_next()"
    },
    {
        "number": 117,
        "title": "Populating Next Right Pointers in Each Node II",
        "difficulty": 1,
        "prompt": "\n        \"\"\"\nclass Node:\n    def __init__(self, val: int = 0, left: 'Node' = None, right: 'Node' = None, next: 'Node' = None):\n        self.val = val\n        self.left = left\n        self.right = right\n        self.next = next\n        Given a binary tree\n        struct Node {\n          int val;\n          Node *left;\n          Node *right;\n          Node *next;\n        }\n        Populate each next pointer to point to its next right node. If there is no next right node, the next pointer should be set to NULL.\n        Initially, all next pointers are set to NULL.\n        Example 1:\n        Input: root = [1,2,3,4,5,null,7]\n        Output: [1,#,2,3,#,4,5,7,#]\n        Explanation: Given the above binary tree (Figure A), your function should populate each next pointer to point to its next right node, just like in Figure B. The serialized output is in level order as connected by the next pointers, with '#' signifying the end of each level.\n        Example 2:\n        Input: root = []\n        Output: []\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        self.val = val\n        self.left = left\n        self.right = right\n        self.next = next\n        \"\"\"\n        # Definition for a Node.\n        class Node:\n            def __init__(self, val: int = 0, left: 'Node' = None, right: 'Node' = None, next: 'Node' = None):\n                self.val = val\n                self.left = left\n                self.right = right\n                self.next = next\n        Given a binary tree\n        struct Node {\n          int val;\n          Node *left;\n          Node *right;\n          Node *next;\n        }\n        Populate each next pointer to point to its next right node. If there is no next right node, the next pointer should be set to NULL.\n        Initially, all next pointers are set to NULL.\n        Example 1:\n        Input: root = [1,2,3,4,5,null,7]\n        Output: [1,#,2,3,#,4,5,7,#]\n        Explanation: Given the above binary tree (Figure A), your function should populate each next pointer to point to its next right node, just like in Figure B. The serialized output is in level order as connected by the next pointers, with '#' signifying the end of"
    },
    {
        "number": 117,
        "title": "Populating Next Right Pointers in Each Node II",
        "difficulty": 1,
        "prompt": "\n        \"\"\"\nclass Node:\n    def __init__(self, val: int = 0, left: 'Node' = None, right: 'Node' = None, next: 'Node' = None):\n        self.val = val\n        self.left = left\n        self.right = right\n        self.next = next\n        Given a binary tree\n        struct Node {\n          int val;\n          Node *left;\n          Node *right;\n          Node *next;\n        }\n        Populate each next pointer to point to its next right node. If there is no next right node, the next pointer should be set to NULL.\n        Initially, all next pointers are set to NULL.\n        Example 1:\n        Input: root = [1,2,3,4,5,null,7]\n        Output: [1,#,2,3,#,4,5,7,#]\n        Explanation: Given the above binary tree (Figure A), your function should populate each next pointer to point to its next right node, just like in Figure B. The serialized output is in level order as connected by the next pointers, with '#' signifying the end of each level.\n        Example 2:\n        Input: root = []\n        Output: []\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        self.val = val\n        self.left = left\n        self.right = right\n        self.next = next\nclass Solution:\n    def connect(self, root: 'Node') -> 'Node':\n        if not root:\n            return None\n        queue = [root]\n        while queue:\n            size = len(queue)\n            for i in range(size):\n                node = queue.pop(0)\n                if i < size - 1:\n                    node.next = queue[0]\n                if node.left:\n                    queue.append(node.left)\n                if node.right:\n                    queue.append(node.right)\n        return root\n<|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>"
    },
    {
        "number": 118,
        "title": "Pascal\"s Triangle",
        "difficulty": 0,
        "prompt": "class Solution:\n    def generate(self, numRows: int) -> List[List[int]]:\n        \"\"\"\n        Given an integer numRows, return the first numRows of Pascal's triangle.\n        In Pascal's triangle, each number is the sum of the two numbers directly above it as shown:\n        Example 1:\n        Input: numRows = 5\n        Output: [[1],[1,1],[1,2,1],[1,3,3,1],[1,4,6,4,1]]\n        Example 2:\n        Input: numRows = 1\n        Output: [[1]]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        if numRows == 0:\n            return []\n        if numRows == 1:\n            return [[1]]\n        if numRows == 2:\n            return [[1], [1, 1]]\n        res = [[1], [1, 1]]\n        for i in range(2, numRows):\n            temp = [1]\n            for j in range(1, i):\n                temp.append(res[i - 1][j - 1] + res[i - 1][j])\n            temp.append(1)\n            res.append(temp)\n        return res"
    },
    {
        "number": 118,
        "title": "Pascal\"s Triangle",
        "difficulty": 0,
        "prompt": "class Solution:\n    def generate(self, numRows: int) -> List[List[int]]:\n        \"\"\"\n        Given an integer numRows, return the first numRows of Pascal's triangle.\n        In Pascal's triangle, each number is the sum of the two numbers directly above it as shown:\n        Example 1:\n        Input: numRows = 5\n        Output: [[1],[1,1],[1,2,1],[1,3,3,1],[1,4,6,4,1]]\n        Example 2:\n        Input: numRows = 1\n        Output: [[1]]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        if numRows == 0:\n            return []\n        if numRows == 1:\n            return [[1]]\n        if numRows == 2:\n            return [[1], [1, 1]]\n        res = [[1], [1, 1]]\n        for i in range(2, numRows):\n            tmp = [1]\n            for j in range(1, i):\n                tmp.append(res[i - 1][j - 1] + res[i - 1][j])\n            tmp.append(1)\n            res.append(tmp)\n        return res"
    },
    {
        "number": 119,
        "title": "Pascal\"s Triangle II",
        "difficulty": 0,
        "prompt": "class Solution:\n    def getRow(self, rowIndex: int) -> List[int]:\n        \"\"\"\n        Given an integer rowIndex, return the rowIndexth (0-indexed) row of the Pascal's triangle.\n        In Pascal's triangle, each number is the sum of the two numbers directly above it as shown:\n        Example 1:\n        Input: rowIndex = 3\n        Output: [1,3,3,1]\n        Example 2:\n        Input: rowIndex = 0\n        Output: [1]\n        Example 3:\n        Input: rowIndex = 1\n        Output: [1,1]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        if rowIndex == 0:\n            return [1]\n        if rowIndex == 1:\n            return [1, 1]\n        res = [1, 1]\n        for i in range(2, rowIndex + 1):\n            tmp = [1]\n            for j in range(1, i):\n                tmp.append(res[j - 1] + res[j])\n            tmp.append(1)\n            res = tmp\n        return res\n<|endoftext|>"
    },
    {
        "number": 119,
        "title": "Pascal\"s Triangle II",
        "difficulty": 0,
        "prompt": "class Solution:\n    def getRow(self, rowIndex: int) -> List[int]:\n        \"\"\"\n        Given an integer rowIndex, return the rowIndexth (0-indexed) row of the Pascal's triangle.\n        In Pascal's triangle, each number is the sum of the two numbers directly above it as shown:\n        Example 1:\n        Input: rowIndex = 3\n        Output: [1,3,3,1]\n        Example 2:\n        Input: rowIndex = 0\n        Output: [1]\n        Example 3:\n        Input: rowIndex = 1\n        Output: [1,1]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        if rowIndex == 0:\n            return [1]\n        if rowIndex == 1:\n            return [1, 1]\n        res = [1, 1]\n        for i in range(2, rowIndex + 1):\n            tmp = [1]\n            for j in range(1, i):\n                tmp.append(res[j] + res[j - 1])\n            tmp.append(1)\n            res = tmp\n        return res\n<|endoftext|>"
    },
    {
        "number": 120,
        "title": "Triangle",
        "difficulty": 1,
        "prompt": "class Solution:\n    def minimumTotal(self, triangle: List[List[int]]) -> int:\n        \"\"\"\n        Given a triangle array, return the minimum path sum from top to bottom.\n        For each step, you may move to an adjacent number of the row below. More formally, if you are on index i on the current row, you may move to either index i or index i + 1 on the next row.\n        Example 1:\n        Input: triangle = [[2],[3,4],[6,5,7],[4,1,8,3]]\n        Output: 11\n        Explanation: The triangle looks like:\n           2\n          3 4\n         6 5 7\n        4 1 8 3\n        The minimum path sum from top to bottom is 2 + 3 + 5 + 1 = 11 (underlined above).\n        Example 2:\n        Input: triangle = [[-10]]\n        Output: -10\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        if not triangle:\n            return 0\n        n = len(triangle)\n        dp = [0] * n\n        dp[0] = triangle[0][0]\n        for i in range(1, n):\n            dp[i] = dp[i - 1] + triangle[i][i]\n            for j in range(i - 1, 0, -1):\n                dp[j] = min(dp[j - 1], dp[j]) + triangle[i][j]\n            dp[0] += triangle[i][0]\n        return min(dp)"
    },
    {
        "number": 120,
        "title": "Triangle",
        "difficulty": 1,
        "prompt": "class Solution:\n    def minimumTotal(self, triangle: List[List[int]]) -> int:\n        \"\"\"\n        Given a triangle array, return the minimum path sum from top to bottom.\n        For each step, you may move to an adjacent number of the row below. More formally, if you are on index i on the current row, you may move to either index i or index i + 1 on the next row.\n        Example 1:\n        Input: triangle = [[2],[3,4],[6,5,7],[4,1,8,3]]\n        Output: 11\n        Explanation: The triangle looks like:\n           2\n          3 4\n         6 5 7\n        4 1 8 3\n        The minimum path sum from top to bottom is 2 + 3 + 5 + 1 = 11 (underlined above).\n        Example 2:\n        Input: triangle = [[-10]]\n        Output: -10\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        if not triangle:\n            return 0\n        for i in range(1, len(triangle)):\n            for j in range(len(triangle[i])):\n                if j == 0:\n                    triangle[i][j] += triangle[i-1][j]\n                elif j == len(triangle[i])-1:\n                    triangle[i][j] += triangle[i-1][j-1]\n                else:\n                    triangle[i][j] += min(triangle[i-1][j], triangle[i-1][j-1])\n        return min(triangle[-1])"
    },
    {
        "number": 121,
        "title": "Best Time to Buy and Sell Stock",
        "difficulty": 0,
        "prompt": "class Solution:\n    def maxProfit(self, prices: List[int]) -> int:\n        \"\"\"\n        You are given an array prices where prices[i] is the price of a given stock on the ith day.\n        You want to maximize your profit by choosing a single day to buy one stock and choosing a different day in the future to sell that stock.\n        Return the maximum profit you can achieve from this transaction. If you cannot achieve any profit, return 0.\n        Example 1:\n        Input: prices = [7,1,5,3,6,4]\n        Output: 5\n        Explanation: Buy on day 2 (price = 1) and sell on day 5 (price = 6), profit = 6-1 = 5.\n        Note that buying on day 2 and selling on day 1 is not allowed because you must buy before you sell.\n        Example 2:\n        Input: prices = [7,6,4,3,1]\n        Output: 0\n        Explanation: In this case, no transactions are done and the max profit = 0.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        if not prices:\n            return 0\n        max_profit = 0\n        min_price = prices[0]\n        for price in prices:\n            min_price = min(min_price, price)\n            max_profit = max(max_profit, price - min_price)\n        return max_profit\n<|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>"
    },
    {
        "number": 121,
        "title": "Best Time to Buy and Sell Stock",
        "difficulty": 0,
        "prompt": "class Solution:\n    def maxProfit(self, prices: List[int]) -> int:\n        \"\"\"\n        You are given an array prices where prices[i] is the price of a given stock on the ith day.\n        You want to maximize your profit by choosing a single day to buy one stock and choosing a different day in the future to sell that stock.\n        Return the maximum profit you can achieve from this transaction. If you cannot achieve any profit, return 0.\n        Example 1:\n        Input: prices = [7,1,5,3,6,4]\n        Output: 5\n        Explanation: Buy on day 2 (price = 1) and sell on day 5 (price = 6), profit = 6-1 = 5.\n        Note that buying on day 2 and selling on day 1 is not allowed because you must buy before you sell.\n        Example 2:\n        Input: prices = [7,6,4,3,1]\n        Output: 0\n        Explanation: In this case, no transactions are done and the max profit = 0.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        if len(prices) < 2:\n            return 0\n        max_profit = 0\n        min_price = prices[0]\n        for price in prices:\n            if price < min_price:\n                min_price = price\n            elif price - min_price > max_profit:\n                max_profit = price - min_price\n        return max_profit"
    },
    {
        "number": 122,
        "title": "Best Time to Buy and Sell Stock II",
        "difficulty": 1,
        "prompt": "class Solution:\n    def maxProfit(self, prices: List[int]) -> int:\n        \"\"\"\n        You are given an integer array prices where prices[i] is the price of a given stock on the ith day.\n        On each day, you may decide to buy and/or sell the stock. You can only hold at most one share of the stock at any time. However, you can buy it then immediately sell it on the same day.\n        Find and return the maximum profit you can achieve.\n        Example 1:\n        Input: prices = [7,1,5,3,6,4]\n        Output: 7\n        Explanation: Buy on day 2 (price = 1) and sell on day 3 (price = 5), profit = 5-1 = 4.\n        Then buy on day 4 (price = 3) and sell on day 5 (price = 6), profit = 6-3 = 3.\n        Total profit is 4 + 3 = 7.\n        Example 2:\n        Input: prices = [1,2,3,4,5]\n        Output: 4\n        Explanation: Buy on day 1 (price = 1) and sell on day 5 (price = 5), profit = 5-1 = 4.\n        Total profit is 4.\n        Example 3:\n        Input: prices = [7,6,4,3,1]\n        Output: 0\n        Explanation: There is no way to make a positive profit, so we never buy the stock to achieve the maximum profit of 0.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        # Time: O(n)\n        # Space: O(1)\n        # buy1 = -prices[0]\n        # buy2 = -float('inf')\n        # sell1 = 0\n        # sell2 = 0\n        # for price in prices:\n        #     buy1 = max(buy1, -price)\n        #     sell1 = max(sell1, buy1 + price)\n        #     buy2 = max(buy2, sell1 - price)\n        #     sell2 = max(sell2, buy2 + price)\n        # return sell2"
    },
    {
        "number": 122,
        "title": "Best Time to Buy and Sell Stock II",
        "difficulty": 1,
        "prompt": "class Solution:\n    def maxProfit(self, prices: List[int]) -> int:\n        \"\"\"\n        You are given an integer array prices where prices[i] is the price of a given stock on the ith day.\n        On each day, you may decide to buy and/or sell the stock. You can only hold at most one share of the stock at any time. However, you can buy it then immediately sell it on the same day.\n        Find and return the maximum profit you can achieve.\n        Example 1:\n        Input: prices = [7,1,5,3,6,4]\n        Output: 7\n        Explanation: Buy on day 2 (price = 1) and sell on day 3 (price = 5), profit = 5-1 = 4.\n        Then buy on day 4 (price = 3) and sell on day 5 (price = 6), profit = 6-3 = 3.\n        Total profit is 4 + 3 = 7.\n        Example 2:\n        Input: prices = [1,2,3,4,5]\n        Output: 4\n        Explanation: Buy on day 1 (price = 1) and sell on day 5 (price = 5), profit = 5-1 = 4.\n        Total profit is 4.\n        Example 3:\n        Input: prices = [7,6,4,3,1]\n        Output: 0\n        Explanation: There is no way to make a positive profit, so we never buy the stock to achieve the maximum profit of 0.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        # Time: O(n), Space: O(1)\n        max_profit = 0\n        min_price = float('inf')\n        for price in prices:\n            min_price = min(min_price, price)\n            max_profit = max(max_profit, price - min_price)\n        return max_profit"
    },
    {
        "number": 123,
        "title": "Best Time to Buy and Sell Stock III",
        "difficulty": 2,
        "prompt": "class Solution:\n    def maxProfit(self, prices: List[int]) -> int:\n        \"\"\"\n        You are given an array prices where prices[i] is the price of a given stock on the ith day.\n        Find the maximum profit you can achieve. You may complete at most two transactions.\n        Note: You may not engage in multiple transactions simultaneously (i.e., you must sell the stock before you buy again).\n        Example 1:\n        Input: prices = [3,3,5,0,0,3,1,4]\n        Output: 6\n        Explanation: Buy on day 4 (price = 0) and sell on day 6 (price = 3), profit = 3-0 = 3.\n        Then buy on day 7 (price = 1) and sell on day 8 (price = 4), profit = 4-1 = 3.\n        Example 2:\n        Input: prices = [1,2,3,4,5]\n        Output: 4\n        Explanation: Buy on day 1 (price = 1) and sell on day 5 (price = 5), profit = 5-1 = 4.\n        Note that you cannot buy on day 1, buy on day 2 and sell them later, as you are engaging multiple transactions at the same time. You must sell before buying again.\n        Example 3:\n        Input: prices = [7,6,4,3,1]\n        Output: 0\n        Explanation: In this case, no transaction is done, i.e. max profit = 0.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        # dp[i][0] = max(dp[i-1][0], dp[i-1][1] + prices[i])\n        # dp[i][1] = max(dp[i-1][1], dp[i-2][0] - prices[i])\n        if not prices:\n            return 0\n        dp = [[0, 0] for _ in range(len(prices))]\n        dp[0][0] = 0\n        dp[0][1] = -prices[0]\n        for i in range(1, len(prices)):\n            dp[i][0] = max(dp[i-1][0], dp[i-1][1] + prices[i])\n            dp[i][1] = max(dp[i-1][1], dp[i-2][0] - prices[i])\n        return dp[-1][0]\n<|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>"
    },
    {
        "number": 123,
        "title": "Best Time to Buy and Sell Stock III",
        "difficulty": 2,
        "prompt": "class Solution:\n    def maxProfit(self, prices: List[int]) -> int:\n        \"\"\"\n        You are given an array prices where prices[i] is the price of a given stock on the ith day.\n        Find the maximum profit you can achieve. You may complete at most two transactions.\n        Note: You may not engage in multiple transactions simultaneously (i.e., you must sell the stock before you buy again).\n        Example 1:\n        Input: prices = [3,3,5,0,0,3,1,4]\n        Output: 6\n        Explanation: Buy on day 4 (price = 0) and sell on day 6 (price = 3), profit = 3-0 = 3.\n        Then buy on day 7 (price = 1) and sell on day 8 (price = 4), profit = 4-1 = 3.\n        Example 2:\n        Input: prices = [1,2,3,4,5]\n        Output: 4\n        Explanation: Buy on day 1 (price = 1) and sell on day 5 (price = 5), profit = 5-1 = 4.\n        Note that you cannot buy on day 1, buy on day 2 and sell them later, as you are engaging multiple transactions at the same time. You must sell before buying again.\n        Example 3:\n        Input: prices = [7,6,4,3,1]\n        Output: 0\n        Explanation: In this case, no transaction is done, i.e. max profit = 0.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        # dp[i][0] = max(dp[i-1][0], dp[i-1][1] + prices[i])\n        # dp[i][1] = max(dp[i-1][1], dp[i-2][0] - prices[i])\n        if not prices:\n            return 0\n        dp = [[0, 0] for _ in range(len(prices))]\n        dp[0][0] = 0\n        dp[0][1] = -prices[0]\n        for i in range(1, len(prices)):\n            dp[i][0] = max(dp[i-1][0], dp[i-1][1] + prices[i])\n            dp[i][1] = max(dp[i-1][1], dp[i-2][0] - prices[i])\n        return dp[-1][0]"
    },
    {
        "number": 124,
        "title": "Binary Tree Maximum Path Sum",
        "difficulty": 2,
        "prompt": "class Solution:\n    def maxPathSum(self, root: Optional[TreeNode]) -> int:\n        \"\"\"\n        A path in a binary tree is a sequence of nodes where each pair of adjacent nodes in the sequence has an edge connecting them. A node can only appear in the sequence at most once. Note that the path does not need to pass through the root.\n        The path sum of a path is the sum of the node's values in the path.\n        Given the root of a binary tree, return the maximum path sum of any non-empty path.\n        Example 1:\n        Input: root = [1,2,3]\n        Output: 6\n        Explanation: The optimal path is 2 -> 1 -> 3 with a path sum of 2 + 1 + 3 = 6.\n        Example 2:\n        Input: root = [-10,9,20,null,null,15,7]\n        Output: 42\n        Explanation: The optimal path is 15 -> 20 -> 7 with a path sum of 15 + 20 + 7 = 42.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        self.max_sum = float('-inf')\n        self.dfs(root)\n        return self.max_sum"
    },
    {
        "number": 124,
        "title": "Binary Tree Maximum Path Sum",
        "difficulty": 2,
        "prompt": "class Solution:\n    def maxPathSum(self, root: Optional[TreeNode]) -> int:\n        \"\"\"\n        A path in a binary tree is a sequence of nodes where each pair of adjacent nodes in the sequence has an edge connecting them. A node can only appear in the sequence at most once. Note that the path does not need to pass through the root.\n        The path sum of a path is the sum of the node's values in the path.\n        Given the root of a binary tree, return the maximum path sum of any non-empty path.\n        Example 1:\n        Input: root = [1,2,3]\n        Output: 6\n        Explanation: The optimal path is 2 -> 1 -> 3 with a path sum of 2 + 1 + 3 = 6.\n        Example 2:\n        Input: root = [-10,9,20,null,null,15,7]\n        Output: 42\n        Explanation: The optimal path is 15 -> 20 -> 7 with a path sum of 15 + 20 + 7 = 42.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        self.max_sum = float('-inf')\n        self.dfs(root)\n        return self.max_sum"
    },
    {
        "number": 125,
        "title": "Valid Palindrome",
        "difficulty": 0,
        "prompt": "class Solution:\n    def isPalindrome(self, s: str) -> bool:\n        \"\"\"\n        A phrase is a palindrome if, after converting all uppercase letters into lowercase letters and removing all non-alphanumeric characters, it reads the same forward and backward. Alphanumeric characters include letters and numbers.\n        Given a string s, return true if it is a palindrome, or false otherwise.\n        Example 1:\n        Input: s = \"A man, a plan, a canal: Panama\"\n        Output: true\n        Explanation: \"amanaplanacanalpanama\" is a palindrome.\n        Example 2:\n        Input: s = \"race a car\"\n        Output: false\n        Explanation: \"raceacar\" is not a palindrome.\n        Example 3:\n        Input: s = \" \"\n        Output: true\n        Explanation: s is an empty string \"\" after removing non-alphanumeric characters.\n        Since an empty string reads the same forward and backward, it is a palindrome.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        # Solution 1:\n        # s = s.lower()\n        # s = re.sub(r'[^a-z0-9]', '', s)\n        # return s == s[::-1]"
    },
    {
        "number": 125,
        "title": "Valid Palindrome",
        "difficulty": 0,
        "prompt": "class Solution:\n    def isPalindrome(self, s: str) -> bool:\n        \"\"\"\n        A phrase is a palindrome if, after converting all uppercase letters into lowercase letters and removing all non-alphanumeric characters, it reads the same forward and backward. Alphanumeric characters include letters and numbers.\n        Given a string s, return true if it is a palindrome, or false otherwise.\n        Example 1:\n        Input: s = \"A man, a plan, a canal: Panama\"\n        Output: true\n        Explanation: \"amanaplanacanalpanama\" is a palindrome.\n        Example 2:\n        Input: s = \"race a car\"\n        Output: false\n        Explanation: \"raceacar\" is not a palindrome.\n        Example 3:\n        Input: s = \" \"\n        Output: true\n        Explanation: s is an empty string \"\" after removing non-alphanumeric characters.\n        Since an empty string reads the same forward and backward, it is a palindrome.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        # Solution 1:\n        # s = s.lower()\n        # s = re.sub('[^a-z0-9]', '', s)\n        # return s == s[::-1]"
    },
    {
        "number": 126,
        "title": "Word Ladder II",
        "difficulty": 2,
        "prompt": "class Solution:\n    def findLadders(self, beginWord: str, endWord: str, wordList: List[str]) -> List[List[str]]:\n        \"\"\"\n        A transformation sequence from word beginWord to word endWord using a dictionary wordList is a sequence of words beginWord -> s1 -> s2 ->... -> sk such that:\n            Every adjacent pair of words differs by a single letter.\n            Every si for 1 <= i <= k is in wordList. Note that beginWord does not need to be in wordList.\n            sk == endWord\n        Given two words, beginWord and endWord, and a dictionary wordList, return all the shortest transformation sequences from beginWord to endWord, or an empty list if no such sequence exists. Each sequence should be returned as a list of the words [beginWord, s1, s2,..., sk].\n        Example 1:\n        Input: beginWord = \"hit\", endWord = \"cog\", wordList = [\"hot\",\"dot\",\"dog\",\"lot\",\"log\",\"cog\"]\n        Output: [[\"hit\",\"hot\",\"dot\",\"dog\",\"cog\"],[\"hit\",\"hot\",\"lot\",\"log\",\"cog\"]]\n        Explanation: There are 2 shortest transformation sequences:\n        \"hit\" -> \"hot\" -> \"dot\" -> \"dog\" -> \"cog\"\n        \"hit\" -> \"hot\" -> \"lot\" -> \"log\" -> \"cog\"\n        Example 2:\n        Input: beginWord = \"hit\", endWord = \"cog\", wordList = [\"hot\",\"dot\",\"dog\",\"lot\",\"log\"]\n        Output: []\n        Explanation: The endWord \"cog\" is not in wordList, therefore there is no valid transformation sequence.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        if endWord not in wordList:\n            return []\n        \n        # build graph\n        graph = {}\n        for word in wordList:\n            for i in range(len(word)):\n                key = word[:i] + '*' + word[i+1:]\n                if key not in graph:\n                    graph[key] = []\n                graph[key].append(word)\n        \n        # bfs\n        queue = collections.deque()\n        queue.append((beginWord, [beginWord]))\n        visited = set()\n        while queue:\n            word, path = queue.popleft()\n            if word == endWord:\n                return path\n            for i in range(len(word)):\n                key = word[:i] + '*' + word[i+1:]\n                for neighbor in graph[key]:\n                    if neighbor not in visited:\n                        visited.add(neighbor)\n                        queue.append((neighbor, path + [neighbor]))\n        return []\n<|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>"
    },
    {
        "number": 126,
        "title": "Word Ladder II",
        "difficulty": 2,
        "prompt": "class Solution:\n    def findLadders(self, beginWord: str, endWord: str, wordList: List[str]) -> List[List[str]]:\n        \"\"\"\n        A transformation sequence from word beginWord to word endWord using a dictionary wordList is a sequence of words beginWord -> s1 -> s2 ->... -> sk such that:\n            Every adjacent pair of words differs by a single letter.\n            Every si for 1 <= i <= k is in wordList. Note that beginWord does not need to be in wordList.\n            sk == endWord\n        Given two words, beginWord and endWord, and a dictionary wordList, return all the shortest transformation sequences from beginWord to endWord, or an empty list if no such sequence exists. Each sequence should be returned as a list of the words [beginWord, s1, s2,..., sk].\n        Example 1:\n        Input: beginWord = \"hit\", endWord = \"cog\", wordList = [\"hot\",\"dot\",\"dog\",\"lot\",\"log\",\"cog\"]\n        Output: [[\"hit\",\"hot\",\"dot\",\"dog\",\"cog\"],[\"hit\",\"hot\",\"lot\",\"log\",\"cog\"]]\n        Explanation: There are 2 shortest transformation sequences:\n        \"hit\" -> \"hot\" -> \"dot\" -> \"dog\" -> \"cog\"\n        \"hit\" -> \"hot\" -> \"lot\" -> \"log\" -> \"cog\"\n        Example 2:\n        Input: beginWord = \"hit\", endWord = \"cog\", wordList = [\"hot\",\"dot\",\"dog\",\"lot\",\"log\"]\n        Output: []\n        Explanation: The endWord \"cog\" is not in wordList, therefore there is no valid transformation sequence.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        # BFS\n        # Time: O(N^2), N is the length of wordList\n        # Space: O(N^2)\n        # queue = deque([(beginWord, [beginWord])])\n        # seen = set()\n        # while queue:\n        #     word, path = queue.popleft()\n        #     if word == endWord:\n        #         return path\n        #     for i in range(len(word)):\n        #         for c in 'abcdefghijklmnopqrstuvwxyz':\n        #             new_word = word[:i] + c + word[i+1:]\n        #             if new_word in wordList and new_word not in seen:\n        #                 queue.append((new_word, path + [new_word]))\n        #                 seen.add(new_word)\n        # return []"
    },
    {
        "number": 127,
        "title": "Word Ladder",
        "difficulty": 2,
        "prompt": "class Solution:\n    def ladderLength(self, beginWord: str, endWord: str, wordList: List[str]) -> int:\n        \"\"\"\n        A transformation sequence from word beginWord to word endWord using a dictionary wordList is a sequence of words beginWord -> s1 -> s2 ->... -> sk such that:\n            Every adjacent pair of words differs by a single letter.\n            Every si for 1 <= i <= k is in wordList. Note that beginWord does not need to be in wordList.\n            sk == endWord\n        Given two words, beginWord and endWord, and a dictionary wordList, return the number of words in the shortest transformation sequence from beginWord to endWord, or 0 if no such sequence exists.\n        Example 1:\n        Input: beginWord = \"hit\", endWord = \"cog\", wordList = [\"hot\",\"dot\",\"dog\",\"lot\",\"log\",\"cog\"]\n        Output: 5\n        Explanation: One shortest transformation sequence is \"hit\" -> \"hot\" -> \"dot\" -> \"dog\" -> cog\", which is 5 words long.\n        Example 2:\n        Input: beginWord = \"hit\", endWord = \"cog\", wordList = [\"hot\",\"dot\",\"dog\",\"lot\",\"log\"]\n        Output: 0\n        Explanation: The endWord \"cog\" is not in wordList, therefore there is no valid transformation sequence.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        if endWord not in wordList:\n            return 0\n        if beginWord == endWord:\n            return 1\n        wordList = set(wordList)\n        q = deque([(beginWord, 1)])\n        while q:\n            word, length = q.popleft()\n            if word == endWord:\n                return length\n            for i in range(len(word)):\n                for c in string.ascii_lowercase:\n                    new_word = word[:i] + c + word[i+1:]\n                    if new_word in wordList:\n                        q.append((new_word, length + 1))\n                        wordList.remove(new_word)\n        return 0"
    },
    {
        "number": 127,
        "title": "Word Ladder",
        "difficulty": 2,
        "prompt": "class Solution:\n    def ladderLength(self, beginWord: str, endWord: str, wordList: List[str]) -> int:\n        \"\"\"\n        A transformation sequence from word beginWord to word endWord using a dictionary wordList is a sequence of words beginWord -> s1 -> s2 ->... -> sk such that:\n            Every adjacent pair of words differs by a single letter.\n            Every si for 1 <= i <= k is in wordList. Note that beginWord does not need to be in wordList.\n            sk == endWord\n        Given two words, beginWord and endWord, and a dictionary wordList, return the number of words in the shortest transformation sequence from beginWord to endWord, or 0 if no such sequence exists.\n        Example 1:\n        Input: beginWord = \"hit\", endWord = \"cog\", wordList = [\"hot\",\"dot\",\"dog\",\"lot\",\"log\",\"cog\"]\n        Output: 5\n        Explanation: One shortest transformation sequence is \"hit\" -> \"hot\" -> \"dot\" -> \"dog\" -> cog\", which is 5 words long.\n        Example 2:\n        Input: beginWord = \"hit\", endWord = \"cog\", wordList = [\"hot\",\"dot\",\"dog\",\"lot\",\"log\"]\n        Output: 0\n        Explanation: The endWord \"cog\" is not in wordList, therefore there is no valid transformation sequence.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        if endWord not in wordList:\n            return 0\n        wordList = set(wordList)\n        queue = collections.deque()\n        queue.append((beginWord, 1))\n        while queue:\n            word, length = queue.popleft()\n            if word == endWord:\n                return length\n            for i in range(len(word)):\n                for c in \"abcdefghijklmnopqrstuvwxyz\":\n                    new_word = word[:i] + c + word[i + 1:]\n                    if new_word in wordList:\n                        queue.append((new_word, length + 1))\n                        wordList.remove(new_word)\n        return 0"
    },
    {
        "number": 128,
        "title": "Longest Consecutive Sequence",
        "difficulty": 1,
        "prompt": "class Solution:\n    def longestConsecutive(self, nums: List[int]) -> int:\n        \"\"\"\n        Given an unsorted array of integers nums, return the length of the longest consecutive elements sequence.\n        You must write an algorithm that runs in O(n) time.\n        Example 1:\n        Input: nums = [100,4,200,1,3,2]\n        Output: 4\n        Explanation: The longest consecutive elements sequence is [1, 2, 3, 4]. Therefore its length is 4.\n        Example 2:\n        Input: nums = [0,3,7,2,5,8,4,6,0,1]\n        Output: 9\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        # O(n) time\n        # O(n) space\n        if not nums:\n            return 0\n        nums = set(nums)\n        max_len = 0\n        for num in nums:\n            if num - 1 not in nums:\n                cur_num = num\n                cur_len = 1\n                while cur_num + 1 in nums:\n                    cur_num += 1\n                    cur_len += 1\n                max_len = max(max_len, cur_len)\n        return max_len"
    },
    {
        "number": 128,
        "title": "Longest Consecutive Sequence",
        "difficulty": 1,
        "prompt": "class Solution:\n    def longestConsecutive(self, nums: List[int]) -> int:\n        \"\"\"\n        Given an unsorted array of integers nums, return the length of the longest consecutive elements sequence.\n        You must write an algorithm that runs in O(n) time.\n        Example 1:\n        Input: nums = [100,4,200,1,3,2]\n        Output: 4\n        Explanation: The longest consecutive elements sequence is [1, 2, 3, 4]. Therefore its length is 4.\n        Example 2:\n        Input: nums = [0,3,7,2,5,8,4,6,0,1]\n        Output: 9\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        # \u65b9\u6cd5\u4e00\uff1a\u66b4\u529b\u6cd5\n        # \u5148\u6392\u5e8f\uff0c\u7136\u540e\u904d\u5386\u6bcf\u4e2a\u6570\uff0c\u67e5\u770b\u662f\u5426\u6709\u8fde\u7eed\u6570\u5b57\uff0c\u5982\u679c\u6709\uff0c\u5219\u8ba1\u7b97\u957f\u5ea6\uff0c\u5e76\u8fd4\u56de\n        # \u65f6\u95f4\u590d\u6742\u5ea6O(nlogn)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6O(1)\n        # \u65b9\u6cd5\u4e8c\uff1a\u54c8\u5e0c\u8868\n        # \u5148\u904d\u5386\u4e00\u904d\u6570\u7ec4\uff0c\u5c06\u6570\u5b57\u548c\u5bf9\u5e94\u7684\u4e0b\u6807\u5b58\u5165\u54c8\u5e0c\u8868\uff0c\u7136\u540e\u904d\u5386\u6570\u7ec4\uff0c\u5982\u679c\u5f53\u524d\u6570\u5b57\u5728\u54c8\u5e0c\u8868\u4e2d\uff0c\u5219\u67e5\u770b\u662f\u5426\u6709\u8fde\u7eed\u6570\u5b57\uff0c\n        # \u5982\u679c\u6709\uff0c\u5219\u8ba1\ufffd"
    },
    {
        "number": 129,
        "title": "Sum Root to Leaf Numbers",
        "difficulty": 1,
        "prompt": "class Solution:\n    def sumNumbers(self, root: Optional[TreeNode]) -> int:\n        \"\"\"\n        You are given the root of a binary tree containing digits from 0 to 9 only.\n        Each root-to-leaf path in the tree represents a number.\n            For example, the root-to-leaf path 1 -> 2 -> 3 represents the number 123.\n        Return the total sum of all root-to-leaf numbers. Test cases are generated so that the answer will fit in a 32-bit integer.\n        A leaf node is a node with no children.\n        Example 1:\n        Input: root = [1,2,3]\n        Output: 25\n        Explanation:\n        The root-to-leaf path 1->2 represents the number 12.\n        The root-to-leaf path 1->3 represents the number 13.\n        Therefore, sum = 12 + 13 = 25.\n        Example 2:\n        Input: root = [4,9,0,5,1]\n        Output: 1026\n        Explanation:\n        The root-to-leaf path 4->9->5 represents the number 495.\n        The root-to-leaf path 4->9->1 represents the number 491.\n        The root-to-leaf path 4->0 represents the number 40.\n        Therefore, sum = 495 + 491 + 40 = 1026.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        self.sum = 0\n        self.dfs(root, 0)\n        return self.sum"
    },
    {
        "number": 129,
        "title": "Sum Root to Leaf Numbers",
        "difficulty": 1,
        "prompt": "class Solution:\n    def sumNumbers(self, root: Optional[TreeNode]) -> int:\n        \"\"\"\n        You are given the root of a binary tree containing digits from 0 to 9 only.\n        Each root-to-leaf path in the tree represents a number.\n            For example, the root-to-leaf path 1 -> 2 -> 3 represents the number 123.\n        Return the total sum of all root-to-leaf numbers. Test cases are generated so that the answer will fit in a 32-bit integer.\n        A leaf node is a node with no children.\n        Example 1:\n        Input: root = [1,2,3]\n        Output: 25\n        Explanation:\n        The root-to-leaf path 1->2 represents the number 12.\n        The root-to-leaf path 1->3 represents the number 13.\n        Therefore, sum = 12 + 13 = 25.\n        Example 2:\n        Input: root = [4,9,0,5,1]\n        Output: 1026\n        Explanation:\n        The root-to-leaf path 4->9->5 represents the number 495.\n        The root-to-leaf path 4->9->1 represents the number 491.\n        The root-to-leaf path 4->0 represents the number 40.\n        Therefore, sum = 495 + 491 + 40 = 1026.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        self.total = 0"
    },
    {
        "number": 130,
        "title": "Surrounded Regions",
        "difficulty": 1,
        "prompt": "class Solution:\n    def solve(self, board: List[List[str]]) -> None:\n        \"\"\"\n        Do not return anything, modify board in-place instead.\n        Given an m x n matrix board containing 'X' and 'O', capture all regions that are 4-directionally surrounded by 'X'.\n        A region is captured by flipping all 'O's into 'X's in that surrounded region.\n        Example 1:\n        Input: board = [[\"X\",\"X\",\"X\",\"X\"],[\"X\",\"O\",\"O\",\"X\"],[\"X\",\"X\",\"O\",\"X\"],[\"X\",\"O\",\"X\",\"X\"]]\n        Output: [[\"X\",\"X\",\"X\",\"X\"],[\"X\",\"X\",\"X\",\"X\"],[\"X\",\"X\",\"X\",\"X\"],[\"X\",\"O\",\"X\",\"X\"]]\n        Explanation: Notice that an 'O' should not be flipped if:\n        - It is on the border, or\n        - It is adjacent to an 'O' that should not be flipped.\n        The bottom 'O' is on the border, so it is not flipped.\n        The other three 'O' form a surrounded region, so they are flipped.\n        Example 2:\n        Input: board = [[\"X\"]]\n        Output: [[\"X\"]]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        if not board:\n            return\n        m, n = len(board), len(board[0])\n        queue = collections.deque()\n        for i in range(m):\n            if board[i][0] == 'O':\n                queue.append((i, 0))\n            if board[i][n-1] == 'O':\n                queue.append((i, n-1))\n        for j in range(n):\n            if board[0][j] == 'O':\n                queue.append((0, j))\n            if board[m-1][j] == 'O':\n                queue.append((m-1, j))\n        while queue:\n            i, j = queue.popleft()\n            if 0 <= i < m and 0 <= j < n and board[i][j] == 'O':\n                board[i][j] = 'S'\n                queue.append((i-1, j))\n                queue.append((i+1, j))\n                queue.append((i, j-1))\n                queue.append((i, j+1))\n        for i in range(m):\n            for j in range(n):\n                if board[i][j] == 'O':\n                    board[i][j] = 'X'\n                elif"
    },
    {
        "number": 130,
        "title": "Surrounded Regions",
        "difficulty": 1,
        "prompt": "class Solution:\n    def solve(self, board: List[List[str]]) -> None:\n        \"\"\"\n        Do not return anything, modify board in-place instead.\n        Given an m x n matrix board containing 'X' and 'O', capture all regions that are 4-directionally surrounded by 'X'.\n        A region is captured by flipping all 'O's into 'X's in that surrounded region.\n        Example 1:\n        Input: board = [[\"X\",\"X\",\"X\",\"X\"],[\"X\",\"O\",\"O\",\"X\"],[\"X\",\"X\",\"O\",\"X\"],[\"X\",\"O\",\"X\",\"X\"]]\n        Output: [[\"X\",\"X\",\"X\",\"X\"],[\"X\",\"X\",\"X\",\"X\"],[\"X\",\"X\",\"X\",\"X\"],[\"X\",\"O\",\"X\",\"X\"]]\n        Explanation: Notice that an 'O' should not be flipped if:\n        - It is on the border, or\n        - It is adjacent to an 'O' that should not be flipped.\n        The bottom 'O' is on the border, so it is not flipped.\n        The other three 'O' form a surrounded region, so they are flipped.\n        Example 2:\n        Input: board = [[\"X\"]]\n        Output: [[\"X\"]]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        if not board:\n            return\n        m, n = len(board), len(board[0])\n        for i in range(m):\n            for j in range(n):\n                if (i == 0 or i == m - 1 or j == 0 or j == n - 1) and board[i][j] == 'O':\n                    self.dfs(board, i, j)"
    },
    {
        "number": 131,
        "title": "Palindrome Partitioning",
        "difficulty": 1,
        "prompt": "class Solution:\n    def partition(self, s: str) -> List[List[str]]:\n        \"\"\"\n        Given a string s, partition s such that every substring of the partition is a palindrome. Return all possible palindrome partitioning of s.\n        Example 1:\n        Input: s = \"aab\"\n        Output: [[\"a\",\"a\",\"b\"],[\"aa\",\"b\"]]\n        Example 2:\n        Input: s = \"a\"\n        Output: [[\"a\"]]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        self.res = []\n        self.dfs(s, [])\n        return self.res"
    },
    {
        "number": 131,
        "title": "Palindrome Partitioning",
        "difficulty": 1,
        "prompt": "class Solution:\n    def partition(self, s: str) -> List[List[str]]:\n        \"\"\"\n        Given a string s, partition s such that every substring of the partition is a palindrome. Return all possible palindrome partitioning of s.\n        Example 1:\n        Input: s = \"aab\"\n        Output: [[\"a\",\"a\",\"b\"],[\"aa\",\"b\"]]\n        Example 2:\n        Input: s = \"a\"\n        Output: [[\"a\"]]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        self.res = []\n        self.dfs(s, [])\n        return self.res"
    },
    {
        "number": 132,
        "title": "Palindrome Partitioning II",
        "difficulty": 2,
        "prompt": "class Solution:\n    def minCut(self, s: str) -> int:\n        \"\"\"\n        Given a string s, partition s such that every substring of the partition is a palindrome.\n        Return the minimum cuts needed for a palindrome partitioning of s.\n        Example 1:\n        Input: s = \"aab\"\n        Output: 1\n        Explanation: The palindrome partitioning [\"aa\",\"b\"] could be produced using 1 cut.\n        Example 2:\n        Input: s = \"a\"\n        Output: 0\n        Example 3:\n        Input: s = \"ab\"\n        Output: 1\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        n = len(s)\n        dp = [[False] * n for _ in range(n)]\n        for i in range(n):\n            dp[i][i] = True\n        for i in range(n - 1, -1, -1):\n            for j in range(i + 1, n):\n                dp[i][j] = s[i] == s[j] and (j - i < 2 or dp[i + 1][j - 1])\n        res = [n] * n\n        for i in range(n):\n            if dp[0][i]:\n                res[i] = 0\n            else:\n                for j in range(i):\n                    if dp[j + 1][i]:\n                        res[i] = min(res[i], res[j] + 1)\n        return res[n - 1]"
    },
    {
        "number": 132,
        "title": "Palindrome Partitioning II",
        "difficulty": 2,
        "prompt": "class Solution:\n    def minCut(self, s: str) -> int:\n        \"\"\"\n        Given a string s, partition s such that every substring of the partition is a palindrome.\n        Return the minimum cuts needed for a palindrome partitioning of s.\n        Example 1:\n        Input: s = \"aab\"\n        Output: 1\n        Explanation: The palindrome partitioning [\"aa\",\"b\"] could be produced using 1 cut.\n        Example 2:\n        Input: s = \"a\"\n        Output: 0\n        Example 3:\n        Input: s = \"ab\"\n        Output: 1\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        n = len(s)\n        dp = [[False] * n for _ in range(n)]\n        for i in range(n):\n            dp[i][i] = True\n        for i in range(n - 1, -1, -1):\n            for j in range(i + 1, n):\n                if s[i] == s[j]:\n                    dp[i][j] = dp[i + 1][j - 1]\n        res = n - 1\n        for i in range(n):\n            if dp[0][i]:\n                res = 0\n                break\n        for i in range(1, n):\n            for j in range(n - i):\n                if dp[i][j] and dp[j + 1][j + i]:\n                    res = min(res, j + 1)\n        return res"
    },
    {
        "number": 133,
        "title": "Clone Graph",
        "difficulty": 1,
        "prompt": "\n        \"\"\"\nclass Node:\n    def __init__(self, val = 0, neighbors = None):\n        self.val = val\n        self.neighbors = neighbors if neighbors is not None else []\n        Given a reference of a node in a connected undirected graph.\n        Return a deep copy (clone) of the graph.\n        Each node in the graph contains a value (int) and a list (List[Node]) of its neighbors.\n        class Node {\n            public int val;\n            public List<Node> neighbors;\n        }\n        Test case format:\n        For simplicity, each node's value is the same as the node's index (1-indexed). For example, the first node with val == 1, the second node with val == 2, and so on. The graph is represented in the test case using an adjacency list.\n        An adjacency list is a collection of unordered lists used to represent a finite graph. Each list describes the set of neighbors of a node in the graph.\n        The given node will always be the first node with val = 1. You must return the copy of the given node as a reference to the cloned graph.\n        Example 1:\n        Input: adjList = [[2,4],[1,3],[2,4],[1,3]]\n        Output: [[2,4],[1,3],[2,4],[1,3]]\n        Explanation: There are 4 nodes in the graph.\n        1st node (val = 1)'s neighbors are 2nd node (val = 2) and 4th node (val = 4).\n        2nd node (val = 2)'s neighbors are 1st node (val = 1) and 3rd node (val = 3).\n        3rd node (val = 3)'s neighbors are 2nd node (val = 2) and 4th node (val = 4).\n        4th node (val = 4)'s neighbors are 1st node (val = 1) and 3rd node (val = 3).\n        Example 2:\n        Input: adjList = [[]]\n        Output: [[]]\n        Explanation: Note that the input contains one empty list. The graph consists of only one node with val = 1 and it does not have any neighbors.\n        Example 3:\n        Input: adjList = []\n        Output: []\n        Explanation: This an empty graph, it does not have any nodes.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        self.visited = {}\n        self.graph = {}\n        self.graph_copy = {}\n        self.dfs(node)\n        return self.graph_copy\n    \n    def dfs(self, node):\n        if node in self.visited:\n            return\n        self.visited[node] = True\n        self.graph[node] = []\n        for neighbor in node.neighbors:\n            self.graph[node].append(neighbor)\n            self.dfs(neighbor)\n        self.graph_copy[node] = []\n        for neighbor in node.neighbors:\n            self.graph_copy[node].append(self.graph_copy[neighbor])\n        return\n    \n    def cloneGraph(self, node):\n        \"\"\"\n        :type node: Node\n        :rtype: Node\n        \"\"\"\n        if not node:\n            return node\n        self.dfs(node)\n        return self.graph_copy\n    \n    \"\"\"\n    Given a reference of a node in a connected undirected graph.\n    Return a deep copy (clone) of the graph.\n    Each node in the graph contains a value (int) and a list (List[Node]) of its neighbors.\n    class Node {\n        public int val;\n"
    },
    {
        "number": 133,
        "title": "Clone Graph",
        "difficulty": 1,
        "prompt": "\n        \"\"\"\nclass Node:\n    def __init__(self, val = 0, neighbors = None):\n        self.val = val\n        self.neighbors = neighbors if neighbors is not None else []\n        Given a reference of a node in a connected undirected graph.\n        Return a deep copy (clone) of the graph.\n        Each node in the graph contains a value (int) and a list (List[Node]) of its neighbors.\n        class Node {\n            public int val;\n            public List<Node> neighbors;\n        }\n        Test case format:\n        For simplicity, each node's value is the same as the node's index (1-indexed). For example, the first node with val == 1, the second node with val == 2, and so on. The graph is represented in the test case using an adjacency list.\n        An adjacency list is a collection of unordered lists used to represent a finite graph. Each list describes the set of neighbors of a node in the graph.\n        The given node will always be the first node with val = 1. You must return the copy of the given node as a reference to the cloned graph.\n        Example 1:\n        Input: adjList = [[2,4],[1,3],[2,4],[1,3]]\n        Output: [[2,4],[1,3],[2,4],[1,3]]\n        Explanation: There are 4 nodes in the graph.\n        1st node (val = 1)'s neighbors are 2nd node (val = 2) and 4th node (val = 4).\n        2nd node (val = 2)'s neighbors are 1st node (val = 1) and 3rd node (val = 3).\n        3rd node (val = 3)'s neighbors are 2nd node (val = 2) and 4th node (val = 4).\n        4th node (val = 4)'s neighbors are 1st node (val = 1) and 3rd node (val = 3).\n        Example 2:\n        Input: adjList = [[]]\n        Output: [[]]\n        Explanation: Note that the input contains one empty list. The graph consists of only one node with val = 1 and it does not have any neighbors.\n        Example 3:\n        Input: adjList = []\n        Output: []\n        Explanation: This an empty graph, it does not have any nodes.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        self.visited = {}\n        self.graph = {}\n        self.graph[self] = []\n        self.dfs(root)\n        return self.graph"
    },
    {
        "number": 134,
        "title": "Gas Station",
        "difficulty": 1,
        "prompt": "class Solution:\n    def canCompleteCircuit(self, gas: List[int], cost: List[int]) -> int:\n        \"\"\"\n        There are n gas stations along a circular route, where the amount of gas at the ith station is gas[i].\n        You have a car with an unlimited gas tank and it costs cost[i] of gas to travel from the ith station to its next (i + 1)th station. You begin the journey with an empty tank at one of the gas stations.\n        Given two integer arrays gas and cost, return the starting gas station's index if you can travel around the circuit once in the clockwise direction, otherwise return -1. If there exists a solution, it is guaranteed to be unique\n        Example 1:\n        Input: gas = [1,2,3,4,5], cost = [3,4,5,1,2]\n        Output: 3\n        Explanation:\n        Start at station 3 (index 3) and fill up with 4 unit of gas. Your tank = 0 + 4 = 4\n        Travel to station 4. Your tank = 4 - 1 + 5 = 8\n        Travel to station 0. Your tank = 8 - 2 + 1 = 7\n        Travel to station 1. Your tank = 7 - 3 + 2 = 6\n        Travel to station 2. Your tank = 6 - 4 + 3 = 5\n        Travel to station 3. The cost is 5. Your gas is just enough to travel back to station 3.\n        Therefore, return 3 as the starting index.\n        Example 2:\n        Input: gas = [2,3,4], cost = [3,4,3]\n        Output: -1\n        Explanation:\n        You can't start at station 0 or 1, as there is not enough gas to travel to the next station.\n        Let's start at station 2 and fill up with 4 unit of gas. Your tank = 0 + 4 = 4\n        Travel to station 0. Your tank = 4 - 3 + 2 = 3\n        Travel to station 1. Your tank = 3 - 3 + 3 = 3\n        You cannot travel back to station 2, as it requires 4 unit of gas but you only have 3.\n        Therefore, you can't travel around the circuit once no matter where you start.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        # Solution 1: Greedy\n        # Time  complexity: O(n)\n        # Space complexity: O(1)\n        # gas_tank, start = 0, 0\n        # for i in range(len(gas)):\n        #     gas_tank += gas[i] - cost[i]\n        #     if gas_tank < 0:\n        #         start = i + 1\n        #         gas_tank = 0\n        # return start if sum(gas) >= sum(cost) else -1"
    },
    {
        "number": 134,
        "title": "Gas Station",
        "difficulty": 1,
        "prompt": "class Solution:\n    def canCompleteCircuit(self, gas: List[int], cost: List[int]) -> int:\n        \"\"\"\n        There are n gas stations along a circular route, where the amount of gas at the ith station is gas[i].\n        You have a car with an unlimited gas tank and it costs cost[i] of gas to travel from the ith station to its next (i + 1)th station. You begin the journey with an empty tank at one of the gas stations.\n        Given two integer arrays gas and cost, return the starting gas station's index if you can travel around the circuit once in the clockwise direction, otherwise return -1. If there exists a solution, it is guaranteed to be unique\n        Example 1:\n        Input: gas = [1,2,3,4,5], cost = [3,4,5,1,2]\n        Output: 3\n        Explanation:\n        Start at station 3 (index 3) and fill up with 4 unit of gas. Your tank = 0 + 4 = 4\n        Travel to station 4. Your tank = 4 - 1 + 5 = 8\n        Travel to station 0. Your tank = 8 - 2 + 1 = 7\n        Travel to station 1. Your tank = 7 - 3 + 2 = 6\n        Travel to station 2. Your tank = 6 - 4 + 3 = 5\n        Travel to station 3. The cost is 5. Your gas is just enough to travel back to station 3.\n        Therefore, return 3 as the starting index.\n        Example 2:\n        Input: gas = [2,3,4], cost = [3,4,3]\n        Output: -1\n        Explanation:\n        You can't start at station 0 or 1, as there is not enough gas to travel to the next station.\n        Let's start at station 2 and fill up with 4 unit of gas. Your tank = 0 + 4 = 4\n        Travel to station 0. Your tank = 4 - 3 + 2 = 3\n        Travel to station 1. Your tank = 3 - 3 + 3 = 3\n        You cannot travel back to station 2, as it requires 4 unit of gas but you only have 3.\n        Therefore, you can't travel around the circuit once no matter where you start.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        if sum(gas) < sum(cost):\n            return -1\n        start, curr_sum, min_sum = 0, 0, float('inf')\n        for i in range(len(gas)):\n            curr_sum += gas[i] - cost[i]\n            min_sum = min(min_sum, curr_sum)\n            if curr_sum < 0:\n                start = i + 1\n                curr_sum = 0\n        return start if min_sum >= 0 else -1"
    },
    {
        "number": 135,
        "title": "Candy",
        "difficulty": 2,
        "prompt": "class Solution:\n    def candy(self, ratings: List[int]) -> int:\n        \"\"\"\n        There are n children standing in a line. Each child is assigned a rating value given in the integer array ratings.\n        You are giving candies to these children subjected to the following requirements:\n            Each child must have at least one candy.\n            Children with a higher rating get more candies than their neighbors.\n        Return the minimum number of candies you need to have to distribute the candies to the children.\n        Example 1:\n        Input: ratings = [1,0,2]\n        Output: 5\n        Explanation: You can allocate to the first, second and third child with 2, 1, 2 candies respectively.\n        Example 2:\n        Input: ratings = [1,2,2]\n        Output: 4\n        Explanation: You can allocate to the first, second and third child with 1, 2, 1 candies respectively.\n        The third child gets 1 candy because it satisfies the above two conditions.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        if not ratings:\n            return 0\n        n = len(ratings)\n        candies = [1] * n\n        for i in range(1, n):\n            if ratings[i] > ratings[i - 1]:\n                candies[i] = candies[i - 1] + 1\n        for i in range(n - 2, -1, -1):\n            if ratings[i] > ratings[i + 1]:\n                candies[i] = max(candies[i], candies[i + 1] + 1)\n        return sum(candies)"
    },
    {
        "number": 135,
        "title": "Candy",
        "difficulty": 2,
        "prompt": "class Solution:\n    def candy(self, ratings: List[int]) -> int:\n        \"\"\"\n        There are n children standing in a line. Each child is assigned a rating value given in the integer array ratings.\n        You are giving candies to these children subjected to the following requirements:\n            Each child must have at least one candy.\n            Children with a higher rating get more candies than their neighbors.\n        Return the minimum number of candies you need to have to distribute the candies to the children.\n        Example 1:\n        Input: ratings = [1,0,2]\n        Output: 5\n        Explanation: You can allocate to the first, second and third child with 2, 1, 2 candies respectively.\n        Example 2:\n        Input: ratings = [1,2,2]\n        Output: 4\n        Explanation: You can allocate to the first, second and third child with 1, 2, 1 candies respectively.\n        The third child gets 1 candy because it satisfies the above two conditions.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        # \u521d\u59cb\u5316dp\u6570\u7ec4\n        dp = [1] * len(ratings)\n        # \u521d\u59cb\u5316\u7b2c\u4e00\u4e2a\u5143\u7d20\n        dp[0] = 1\n        # \u521d\u59cb\u5316\u7b2c\u4e00\u4e2a\u5143\u7d20\n        dp[1] = 1 if ratings[0] > ratings[1] else dp[0]\n        # \u521d\u59cb\u5316\u7b2c\u4e8c\u4e2a\u5143\u7d20\n        dp[2] = 1 if ratings[0] > ratings[2] else dp[1]\n        # \u521d\u59cb\u5316\u7b2c\u4e09\u4e2a\u5143\u7d20\n        dp[3] = 1 if ratings[1] > ratings[3] else dp[2]\n        # \u521d\u59cb\u5316\u7b2c\u56db\u4e2a\u5143\u7d20\n        dp[4] = 1 if ratings[2] > ratings[4] else dp[3]\n        # \u521d\u59cb\u5316\u7b2c\u4e94\u4e2a\u5143\u7d20\n        dp[5] = 1 if ratings[3] > ratings[5] else dp[4]\n        # \u521d\u59cb\u5316\u7b2c\u516d\ufffd"
    },
    {
        "number": 136,
        "title": "Single Number",
        "difficulty": 0,
        "prompt": "class Solution:\n    def singleNumber(self, nums: List[int]) -> int:\n        \"\"\"\n        Given a non-empty array of integers nums, every element appears twice except for one. Find that single one.\n        You must implement a solution with a linear runtime complexity and use only constant extra space.\n        Example 1:\n        Input: nums = [2,2,1]\n        Output: 1\n        Example 2:\n        Input: nums = [4,1,2,1,2]\n        Output: 4\n        Example 3:\n        Input: nums = [1]\n        Output: 1\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        # nums.sort()\n        # for i in range(0, len(nums) - 1, 2):\n        #     if nums[i]!= nums[i + 1]:\n        #         return nums[i]\n        # return nums[-1]\n        # \u5f02\u6216\u8fd0\u7b97\n        # a ^ a = 0\n        # a ^ 0 = a\n        # \u5f02\u6216\u8fd0\u7b97\u7684\u6027\u8d28\uff1a\n        # a ^ b ^ c = a ^ c ^ b\n        # \u5f02\u6216\u8fd0\u7b97\u7684\u6027\u8d28\uff1a\n        # a ^ b ^ c = (a ^ c) ^ b\n        # a ^ b ^ c = (a ^ b) ^ c\n        # a ^ b ^ c = a ^ (b ^ c)\n        # a ^ b ^ c = a ^ (b & c)\n        # a ^ b ^ c = a ^ (b | c)\n        # a ^ b ^ c = a ^ c ^ b\n        # a ^ b ^ c = a ^ (b | c) ^ (b & c)\n        # a ^ b ^ c = a ^ (b & ~c)\n        # a ^ b ^ c = a ^ (b | ~"
    },
    {
        "number": 136,
        "title": "Single Number",
        "difficulty": 0,
        "prompt": "class Solution:\n    def singleNumber(self, nums: List[int]) -> int:\n        \"\"\"\n        Given a non-empty array of integers nums, every element appears twice except for one. Find that single one.\n        You must implement a solution with a linear runtime complexity and use only constant extra space.\n        Example 1:\n        Input: nums = [2,2,1]\n        Output: 1\n        Example 2:\n        Input: nums = [4,1,2,1,2]\n        Output: 4\n        Example 3:\n        Input: nums = [1]\n        Output: 1\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        # Solution 1:\n        # Time: O(n)\n        # Space: O(1)\n        # result = 0\n        # for num in nums:\n        #     result ^= num\n        # return result"
    },
    {
        "number": 137,
        "title": "Single Number II",
        "difficulty": 1,
        "prompt": "class Solution:\n    def singleNumber(self, nums: List[int]) -> int:\n        \"\"\"\n        Given an integer array nums where every element appears three times except for one, which appears exactly once. Find the single element and return it.\n        You must implement a solution with a linear runtime complexity and use only constant extra space.\n        Example 1:\n        Input: nums = [2,2,3,2]\n        Output: 3\n        Example 2:\n        Input: nums = [0,1,0,1,0,1,99]\n        Output: 99\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        # 1. XOR\n        # Time: O(n)\n        # Space: O(1)\n        # x ^ x = 0\n        # x ^ 0 = x\n        # x ^ y ^ y = x ^ y\n        # x ^ y ^ x = y\n        # x ^ y ^ x = y ^ x\n        # x ^ y ^ x = y ^ x ^ x\n        # x ^ y ^ x = y ^ x ^ x ^ x\n        # x ^ y ^ x = y ^ x ^ x ^ x ^ x\n        # x ^ y ^ x = y ^ x ^ x ^ x ^ x ^ x\n        # x ^ y ^ x = y ^ x ^ x ^ x ^ x ^ x ^ x\n        # x ^ y ^ x = y ^ x ^ x ^ x ^ x ^ x ^ x ^ x\n        # x ^ y ^ x = y ^ x ^ x ^ x ^ x ^ x ^ x ^ x ^ x\n        # x ^ y ^ x = y ^ x ^ x ^ x ^ x ^ x ^ x ^ x ^ x ^ x\n        # x ^ y ^ x = y ^ x ^ x ^ x ^ x ^ x ^ x ^ x ^ x ^ x ^ x\n        # x ^ y ^ x = y ^ x ^ x ^ x ^ x ^ x ^ x ^ x ^ x ^ x"
    },
    {
        "number": 137,
        "title": "Single Number II",
        "difficulty": 1,
        "prompt": "class Solution:\n    def singleNumber(self, nums: List[int]) -> int:\n        \"\"\"\n        Given an integer array nums where every element appears three times except for one, which appears exactly once. Find the single element and return it.\n        You must implement a solution with a linear runtime complexity and use only constant extra space.\n        Example 1:\n        Input: nums = [2,2,3,2]\n        Output: 3\n        Example 2:\n        Input: nums = [0,1,0,1,0,1,99]\n        Output: 99\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        # \u5148\u6392\u5e8f\uff0c\u7136\u540e\u4ece\u524d\u5f80\u540e\u904d\u5386\uff0c\u5982\u679c\u524d\u9762\u7684\u6570\u5b57\u548c\u540e\u9762\u7684\u6570\u5b57\u76f8\u540c\uff0c\u5219\u628a\u540e\u9762\u7684\u6570\u5b57pop\u51fa\u6765\uff0c\u76f4\u5230\u524d\u9762\u7684\u6570\u5b57\u548c\u540e\u9762\u7684\u6570\u5b57\u4e0d\u540c\u4e3a\u6b62\n        nums.sort()\n        for i in range(0, len(nums) - 1, 3):\n            if nums[i] == nums[i + 1]:\n                nums.pop(i + 1)\n                nums.pop(i)\n        return nums[0]"
    },
    {
        "number": 138,
        "title": "Copy List with Random Pointer",
        "difficulty": 1,
        "prompt": "\n        \"\"\"\nclass Node:\n    def __init__(self, x: int, next: 'Node' = None, random: 'Node' = None):\n        self.val = int(x)\n        self.next = next\n        self.random = random\n        A linked list of length n is given such that each node contains an additional random pointer, which could point to any node in the list, or null.\n        Construct a deep copy of the list. The deep copy should consist of exactly n brand new nodes, where each new node has its value set to the value of its corresponding original node. Both the next and random pointer of the new nodes should point to new nodes in the copied list such that the pointers in the original list and copied list represent the same list state. None of the pointers in the new list should point to nodes in the original list.\n        For example, if there are two nodes X and Y in the original list, where X.random --> Y, then for the corresponding two nodes x and y in the copied list, x.random --> y.\n        Return the head of the copied linked list.\n        The linked list is represented in the input/output as a list of n nodes. Each node is represented as a pair of [val, random_index] where:\n            val: an integer representing Node.val\n            random_index: the index of the node (range from 0 to n-1) that the random pointer points to, or null if it does not point to any node.\n        Your code will only be given the head of the original linked list.\n        Example 1:\n        Input: head = [[7,null],[13,0],[11,4],[10,2],[1,0]]\n        Output: [[7,null],[13,0],[11,4],[10,2],[1,0]]\n        Example 2:\n        Input: head = [[1,1],[2,1]]\n        Output: [[1,1],[2,1]]\n        Example 3:\n        Input: head = [[3,null],[3,0],[3,null]]\n        Output: [[3,null],[3,0],[3,null]]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        self.dummy = Node(0)\n        self.cur = self.dummy\n        self.visited = {}\n        self.copy_node(head)\n        return self.dummy.next"
    },
    {
        "number": 138,
        "title": "Copy List with Random Pointer",
        "difficulty": 1,
        "prompt": "\n        \"\"\"\nclass Node:\n    def __init__(self, x: int, next: 'Node' = None, random: 'Node' = None):\n        self.val = int(x)\n        self.next = next\n        self.random = random\n        A linked list of length n is given such that each node contains an additional random pointer, which could point to any node in the list, or null.\n        Construct a deep copy of the list. The deep copy should consist of exactly n brand new nodes, where each new node has its value set to the value of its corresponding original node. Both the next and random pointer of the new nodes should point to new nodes in the copied list such that the pointers in the original list and copied list represent the same list state. None of the pointers in the new list should point to nodes in the original list.\n        For example, if there are two nodes X and Y in the original list, where X.random --> Y, then for the corresponding two nodes x and y in the copied list, x.random --> y.\n        Return the head of the copied linked list.\n        The linked list is represented in the input/output as a list of n nodes. Each node is represented as a pair of [val, random_index] where:\n            val: an integer representing Node.val\n            random_index: the index of the node (range from 0 to n-1) that the random pointer points to, or null if it does not point to any node.\n        Your code will only be given the head of the original linked list.\n        Example 1:\n        Input: head = [[7,null],[13,0],[11,4],[10,2],[1,0]]\n        Output: [[7,null],[13,0],[11,4],[10,2],[1,0]]\n        Example 2:\n        Input: head = [[1,1],[2,1]]\n        Output: [[1,1],[2,1]]\n        Example 3:\n        Input: head = [[3,null],[3,0],[3,null]]\n        Output: [[3,null],[3,0],[3,null]]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        self.dummy = Node(0)\n        self.cur = self.dummy\n        self.visited = {}\n        self.copy(head)\n        return self.dummy.next"
    },
    {
        "number": 139,
        "title": "Word Break",
        "difficulty": 1,
        "prompt": "class Solution:\n    def wordBreak(self, s: str, wordDict: List[str]) -> bool:\n        \"\"\"\n        Given a string s and a dictionary of strings wordDict, return true if s can be segmented into a space-separated sequence of one or more dictionary words.\n        Note that the same word in the dictionary may be reused multiple times in the segmentation.\n        Example 1:\n        Input: s = \"leetcode\", wordDict = [\"leet\",\"code\"]\n        Output: true\n        Explanation: Return true because \"leetcode\" can be segmented as \"leet code\".\n        Example 2:\n        Input: s = \"applepenapple\", wordDict = [\"apple\",\"pen\"]\n        Output: true\n        Explanation: Return true because \"applepenapple\" can be segmented as \"apple pen apple\".\n        Note that you are allowed to reuse a dictionary word.\n        Example 3:\n        Input: s = \"catsandog\", wordDict = [\"cats\",\"dog\",\"sand\",\"and\",\"cat\"]\n        Output: false\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        # dp[i] = s[:i] can be segmented into words in the dictionary\n        # dp[i] = any(dp[j] and s[j+1:i+1] in wordDict for j in range(i))\n        # Time complexity: O(n^2)\n        # Space complexity: O(n)\n        dp = [False] * (len(s) + 1)\n        dp[0] = True\n        for i in range(len(s)):\n            for j in range(i, len(s)):\n                if dp[i] and s[i:j+1] in wordDict:\n                    dp[j+1] = True\n                    break\n        return dp[-1]"
    },
    {
        "number": 139,
        "title": "Word Break",
        "difficulty": 1,
        "prompt": "class Solution:\n    def wordBreak(self, s: str, wordDict: List[str]) -> bool:\n        \"\"\"\n        Given a string s and a dictionary of strings wordDict, return true if s can be segmented into a space-separated sequence of one or more dictionary words.\n        Note that the same word in the dictionary may be reused multiple times in the segmentation.\n        Example 1:\n        Input: s = \"leetcode\", wordDict = [\"leet\",\"code\"]\n        Output: true\n        Explanation: Return true because \"leetcode\" can be segmented as \"leet code\".\n        Example 2:\n        Input: s = \"applepenapple\", wordDict = [\"apple\",\"pen\"]\n        Output: true\n        Explanation: Return true because \"applepenapple\" can be segmented as \"apple pen apple\".\n        Note that you are allowed to reuse a dictionary word.\n        Example 3:\n        Input: s = \"catsandog\", wordDict = [\"cats\",\"dog\",\"sand\",\"and\",\"cat\"]\n        Output: false\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        # dp[i] = s[:i] can be segmented into words in the dictionary\n        # dp[i] = dp[j] and s[j:i] in the dictionary\n        # dp[i] = dp[j] and s[j:i] not in the dictionary\n        # dp[i] = False if dp[j] == False\n        # dp[0] = True\n        # dp[i] = dp[j] and s[j:i] in the dictionary\n        # dp[i] = False if dp[j] == False\n        # dp[i] = False if s[:i] not in the dictionary\n        # dp[0] = True\n        # dp[i] = dp[j] and s[j:i] in the dictionary\n        # dp[i] = False if dp[j] == False\n        # dp[i] = False if s[:i] not in the dictionary\n        # dp[0] = True\n        # dp[i] = dp[j] and s[j:i] in the dictionary\n        # dp[i] = False if dp[j] == False\n        # dp[i] = False if s[:i"
    },
    {
        "number": 140,
        "title": "Word Break II",
        "difficulty": 2,
        "prompt": "class Solution:\n    def wordBreak(self, s: str, wordDict: List[str]) -> List[str]:\n        \"\"\"\n        Given a string s and a dictionary of strings wordDict, add spaces in s to construct a sentence where each word is a valid dictionary word. Return all such possible sentences in any order.\n        Note that the same word in the dictionary may be reused multiple times in the segmentation.\n        Example 1:\n        Input: s = \"catsanddog\", wordDict = [\"cat\",\"cats\",\"and\",\"sand\",\"dog\"]\n        Output: [\"cats and dog\",\"cat sand dog\"]\n        Example 2:\n        Input: s = \"pineapplepenapple\", wordDict = [\"apple\",\"pen\",\"applepen\",\"pine\",\"pineapple\"]\n        Output: [\"pine apple pen apple\",\"pineapple pen apple\",\"pine applepen apple\"]\n        Explanation: Note that you are allowed to reuse a dictionary word.\n        Example 3:\n        Input: s = \"catsandog\", wordDict = [\"cats\",\"dog\",\"sand\",\"and\",\"cat\"]\n        Output: []\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        # dp[i] = s[:i] can be segmented into words in the wordDicts\n        # dp[i] = dp[j] + s[j:i] for all j in dp[j]\n        # dp[i] = dp[j] + s[j:i] for all j in dp[j] and s[j:i] in wordDicts\n        # dp[i] = dp[j] + s[j:i] for all j in dp[j] and s[j:i] in wordDicts and s[j:i] is a word in wordDicts\n        # dp[i] = dp[j] + s[j:i] for all j in dp[j] and s[j:i] in wordDicts and s[j:i] is a word in wordDicts and s[j:i] is a word in wordDicts\n        # dp[i] = dp[j] + s[j:i] for all j in dp[j] and s[j:i] in wordDicts and s[j:i] is a word in wordDicts and s[j:i] is a word in wordDicts and s[j:i] is a word in word"
    },
    {
        "number": 140,
        "title": "Word Break II",
        "difficulty": 2,
        "prompt": "class Solution:\n    def wordBreak(self, s: str, wordDict: List[str]) -> List[str]:\n        \"\"\"\n        Given a string s and a dictionary of strings wordDict, add spaces in s to construct a sentence where each word is a valid dictionary word. Return all such possible sentences in any order.\n        Note that the same word in the dictionary may be reused multiple times in the segmentation.\n        Example 1:\n        Input: s = \"catsanddog\", wordDict = [\"cat\",\"cats\",\"and\",\"sand\",\"dog\"]\n        Output: [\"cats and dog\",\"cat sand dog\"]\n        Example 2:\n        Input: s = \"pineapplepenapple\", wordDict = [\"apple\",\"pen\",\"applepen\",\"pine\",\"pineapple\"]\n        Output: [\"pine apple pen apple\",\"pineapple pen apple\",\"pine applepen apple\"]\n        Explanation: Note that you are allowed to reuse a dictionary word.\n        Example 3:\n        Input: s = \"catsandog\", wordDict = [\"cats\",\"dog\",\"sand\",\"and\",\"cat\"]\n        Output: []\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        # \u52a8\u6001\u89c4\u5212\n        # dp[i]\u8868\u793as[:i]\u662f\u5426\u53ef\u4ee5\u88ab\u5206\u5272\n        # dp[i] = dp[j] and s[j:i] in wordDict\n        # \u5982\u679cdp[i] == True, \u5219dp[i] = dp[j] + \" \" + s[j:i]\n        # \u5982\u679cdp[i] == False, \u5219dp[i] = False\n        # \u65f6\u95f4\u590d\u6742\u5ea6O(n^2)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6O(n)\n        n = len(s)\n        dp = [False] * (n + 1)\n        dp[0] = True\n        wordDict = set(wordDict)\n        for i in range(1, n + 1):\n            for j in range(i):\n                if dp[j] and s[j:i] in wordDict:\n                    dp[i] = True\n                    break\n        res = []\n        if dp[-1]:\n            self.dfs(s, 0, [], res)\n        return res"
    },
    {
        "number": 141,
        "title": "Linked List Cycle",
        "difficulty": 0,
        "prompt": "class Solution:\n    def hasCycle(self, head: Optional[ListNode]) -> bool:\n        \"\"\"\n        Given head, the head of a linked list, determine if the linked list has a cycle in it.\n        There is a cycle in a linked list if there is some node in the list that can be reached again by continuously following the next pointer. Internally, pos is used to denote the index of the node that tail's next pointer is connected to. Note that pos is not passed as a parameter.\n        Return true if there is a cycle in the linked list. Otherwise, return false.\n        Example 1:\n        Input: head = [3,2,0,-4], pos = 1\n        Output: true\n        Explanation: There is a cycle in the linked list, where the tail connects to the 1st node (0-indexed).\n        Example 2:\n        Input: head = [1,2], pos = 0\n        Output: true\n        Explanation: There is a cycle in the linked list, where the tail connects to the 0th node.\n        Example 3:\n        Input: head = [1], pos = -1\n        Output: false\n        Explanation: There is no cycle in the linked list.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        if not head:\n            return False\n        slow, fast = head, head\n        while fast and fast.next:\n            slow = slow.next\n            fast = fast.next.next\n            if slow == fast:\n                return True\n        return False\n<|endoftext|>"
    },
    {
        "number": 141,
        "title": "Linked List Cycle",
        "difficulty": 0,
        "prompt": "class Solution:\n    def hasCycle(self, head: Optional[ListNode]) -> bool:\n        \"\"\"\n        Given head, the head of a linked list, determine if the linked list has a cycle in it.\n        There is a cycle in a linked list if there is some node in the list that can be reached again by continuously following the next pointer. Internally, pos is used to denote the index of the node that tail's next pointer is connected to. Note that pos is not passed as a parameter.\n        Return true if there is a cycle in the linked list. Otherwise, return false.\n        Example 1:\n        Input: head = [3,2,0,-4], pos = 1\n        Output: true\n        Explanation: There is a cycle in the linked list, where the tail connects to the 1st node (0-indexed).\n        Example 2:\n        Input: head = [1,2], pos = 0\n        Output: true\n        Explanation: There is a cycle in the linked list, where the tail connects to the 0th node.\n        Example 3:\n        Input: head = [1], pos = -1\n        Output: false\n        Explanation: There is no cycle in the linked list.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        if not head:\n            return False\n        slow, fast = head, head\n        while fast and fast.next:\n            slow = slow.next\n            fast = fast.next.next\n            if slow == fast:\n                return True\n        return False\n<|endoftext|>"
    },
    {
        "number": 142,
        "title": "Linked List Cycle II",
        "difficulty": 1,
        "prompt": "class Solution:\n    def detectCycle(self, head: Optional[ListNode]) -> Optional[ListNode]:\n        \"\"\"\n        Given the head of a linked list, return the node where the cycle begins. If there is no cycle, return null.\n        There is a cycle in a linked list if there is some node in the list that can be reached again by continuously following the next pointer. Internally, pos is used to denote the index of the node that tail's next pointer is connected to (0-indexed). It is -1 if there is no cycle. Note that pos is not passed as a parameter.\n        Do not modify the linked list.\n        Example 1:\n        Input: head = [3,2,0,-4], pos = 1\n        Output: tail connects to node index 1\n        Explanation: There is a cycle in the linked list, where tail connects to the second node.\n        Example 2:\n        Input: head = [1,2], pos = 0\n        Output: tail connects to node index 0\n        Explanation: There is a cycle in the linked list, where tail connects to the first node.\n        Example 3:\n        Input: head = [1], pos = -1\n        Output: no cycle\n        Explanation: There is no cycle in the linked list.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        if not head:\n            return None\n        slow = fast = head\n        while fast and fast.next:\n            slow = slow.next\n            fast = fast.next.next\n            if slow == fast:\n                break\n        if not fast or not fast.next:\n            return None\n        slow = head\n        while slow!= fast:\n            slow = slow.next\n            fast = fast.next\n        return slow\n<|endoftext|><|endoftext|><|endoftext|>"
    },
    {
        "number": 142,
        "title": "Linked List Cycle II",
        "difficulty": 1,
        "prompt": "class Solution:\n    def detectCycle(self, head: Optional[ListNode]) -> Optional[ListNode]:\n        \"\"\"\n        Given the head of a linked list, return the node where the cycle begins. If there is no cycle, return null.\n        There is a cycle in a linked list if there is some node in the list that can be reached again by continuously following the next pointer. Internally, pos is used to denote the index of the node that tail's next pointer is connected to (0-indexed). It is -1 if there is no cycle. Note that pos is not passed as a parameter.\n        Do not modify the linked list.\n        Example 1:\n        Input: head = [3,2,0,-4], pos = 1\n        Output: tail connects to node index 1\n        Explanation: There is a cycle in the linked list, where tail connects to the second node.\n        Example 2:\n        Input: head = [1,2], pos = 0\n        Output: tail connects to node index 0\n        Explanation: There is a cycle in the linked list, where tail connects to the first node.\n        Example 3:\n        Input: head = [1], pos = -1\n        Output: no cycle\n        Explanation: There is no cycle in the linked list.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        if not head:\n            return None\n        slow, fast = head, head\n        while fast and fast.next:\n            slow = slow.next\n            fast = fast.next.next\n            if slow == fast:\n                break\n        if not fast or not fast.next:\n            return None\n        slow = head\n        while slow!= fast:\n            slow = slow.next\n            fast = fast.next\n        return slow\n<|endoftext|>"
    },
    {
        "number": 143,
        "title": "Reorder List",
        "difficulty": 1,
        "prompt": "class Solution:\n    def reorderList(self, head: Optional[ListNode]) -> None:\n        \"\"\"\n        Do not return anything, modify head in-place instead.\n        You are given the head of a singly linked-list. The list can be represented as:\n        L0 \u2192 L1 \u2192 \u2026 \u2192 Ln - 1 \u2192 Ln\n        Reorder the list to be on the following form:\n        L0 \u2192 Ln \u2192 L1 \u2192 Ln - 1 \u2192 L2 \u2192 Ln - 2 \u2192 \u2026\n        You may not modify the values in the list's nodes. Only nodes themselves may be changed.\n        Example 1:\n        Input: head = [1,2,3,4]\n        Output: [1,4,2,3]\n        Example 2:\n        Input: head = [1,2,3,4,5]\n        Output: [1,5,2,4,3]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        if not head:\n            return\n        # find the mid point\n        slow = fast = head\n        while fast and fast.next:\n            slow = slow.next\n            fast = fast.next.next\n        # reverse the second half in-place\n        pre, cur = None, slow\n        while cur:\n            cur.next, pre, cur = pre, cur, cur.next\n        # merge in-place; Note: don't forget to handle the case when slow is the head\n        first, second = head, pre\n        while second.next:\n            first.next, first = second, first.next\n            second.next, second = first, second.next\n        return"
    },
    {
        "number": 143,
        "title": "Reorder List",
        "difficulty": 1,
        "prompt": "class Solution:\n    def reorderList(self, head: Optional[ListNode]) -> None:\n        \"\"\"\n        Do not return anything, modify head in-place instead.\n        You are given the head of a singly linked-list. The list can be represented as:\n        L0 \u2192 L1 \u2192 \u2026 \u2192 Ln - 1 \u2192 Ln\n        Reorder the list to be on the following form:\n        L0 \u2192 Ln \u2192 L1 \u2192 Ln - 1 \u2192 L2 \u2192 Ln - 2 \u2192 \u2026\n        You may not modify the values in the list's nodes. Only nodes themselves may be changed.\n        Example 1:\n        Input: head = [1,2,3,4]\n        Output: [1,4,2,3]\n        Example 2:\n        Input: head = [1,2,3,4,5]\n        Output: [1,5,2,4,3]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        if not head:\n            return\n        # find the middle node\n        slow, fast = head, head\n        while fast and fast.next:\n            slow = slow.next\n            fast = fast.next.next\n        # reverse the second half\n        prev, curr = None, slow\n        while curr:\n            curr.next, prev, curr = prev, curr, curr.next\n        # merge the two lists\n        first, second = head, prev\n        while second.next:\n            first.next, first = second, first.next\n            second.next, second = first, second.next\n<|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>"
    },
    {
        "number": 144,
        "title": "Binary Tree Preorder Traversal",
        "difficulty": 0,
        "prompt": "class Solution:\n    def preorderTraversal(self, root: Optional[TreeNode]) -> List[int]:\n        \"\"\"\n        Given the root of a binary tree, return the preorder traversal of its nodes' values.\n        Example 1:\n        Input: root = [1,null,2,3]\n        Output: [1,2,3]\n        Example 2:\n        Input: root = []\n        Output: []\n        Example 3:\n        Input: root = [1]\n        Output: [1]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        if not root:\n            return []\n        stack = [root]\n        res = []\n        while stack:\n            node = stack.pop()\n            res.append(node.val)\n            if node.right:\n                stack.append(node.right)\n            if node.left:\n                stack.append(node.left)\n        return res"
    },
    {
        "number": 144,
        "title": "Binary Tree Preorder Traversal",
        "difficulty": 0,
        "prompt": "class Solution:\n    def preorderTraversal(self, root: Optional[TreeNode]) -> List[int]:\n        \"\"\"\n        Given the root of a binary tree, return the preorder traversal of its nodes' values.\n        Example 1:\n        Input: root = [1,null,2,3]\n        Output: [1,2,3]\n        Example 2:\n        Input: root = []\n        Output: []\n        Example 3:\n        Input: root = [1]\n        Output: [1]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        if not root:\n            return []\n        stack, output = [root], []\n        while stack:\n            root = stack.pop()\n            if root:\n                output.append(root.val)\n                if root.right:\n                    stack.append(root.right)\n                if root.left:\n                    stack.append(root.left)\n        return output\n<|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>"
    },
    {
        "number": 145,
        "title": "Binary Tree Postorder Traversal",
        "difficulty": 0,
        "prompt": "class Solution:\n    def postorderTraversal(self, root: Optional[TreeNode]) -> List[int]:\n        \"\"\"\n        Given the root of a binary tree, return the postorder traversal of its nodes' values.\n        Example 1:\n        Input: root = [1,null,2,3]\n        Output: [3,2,1]\n        Example 2:\n        Input: root = []\n        Output: []\n        Example 3:\n        Input: root = [1]\n        Output: [1]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        if not root:\n            return []\n        stack = [root]\n        result = []\n        while stack:\n            node = stack.pop()\n            result.append(node.val)\n            if node.left:\n                stack.append(node.left)\n            if node.right:\n                stack.append(node.right)\n        return result[::-1]\n<|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>"
    },
    {
        "number": 145,
        "title": "Binary Tree Postorder Traversal",
        "difficulty": 0,
        "prompt": "class Solution:\n    def postorderTraversal(self, root: Optional[TreeNode]) -> List[int]:\n        \"\"\"\n        Given the root of a binary tree, return the postorder traversal of its nodes' values.\n        Example 1:\n        Input: root = [1,null,2,3]\n        Output: [3,2,1]\n        Example 2:\n        Input: root = []\n        Output: []\n        Example 3:\n        Input: root = [1]\n        Output: [1]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        # iterative\n        # if not root:\n        #     return []\n        # stack, res = [root], []\n        # while stack:\n        #     node = stack.pop()\n        #     if node:\n        #         res.append(node.val)\n        #         stack.append(node.left)\n        #         stack.append(node.right)\n        # return res[::-1]"
    },
    {
        "number": 146,
        "title": "LRU Cache",
        "difficulty": 1,
        "prompt": "class LRUCache:\n    def __init__(self, capacity: int):\n    def get(self, key: int) -> int:\n    def put(self, key: int, value: int) -> None:\n        \"\"\"\n        Design a data structure that follows the constraints of a Least Recently Used (LRU) cache.\n        Implement the LRUCache class:\n            LRUCache(int capacity) Initialize the LRU cache with positive size capacity.\n            int get(int key) Return the value of the key if the key exists, otherwise return -1.\n            void put(int key, int value) Update the value of the key if the key exists. Otherwise, add the key-value pair to the cache. If the number of keys exceeds the capacity from this operation, evict the least recently used key.\n        The functions get and put must each run in O(1) average time complexity.\n        Example 1:\n        Input\n        [\"LRUCache\", \"put\", \"put\", \"get\", \"put\", \"get\", \"put\", \"get\", \"get\", \"get\"]\n        [[2], [1, 1], [2, 2], [1], [3, 3], [2], [4, 4], [1], [3], [4]]\n        Output\n        [null, null, null, 1, null, -1, null, -1, 3, 4]\n        Explanation\n        LRUCache lRUCache = new LRUCache(2);\n        lRUCache.put(1, 1); // cache is {1=1}\n        lRUCache.put(2, 2); // cache is {1=1, 2=2}\n        lRUCache.get(1);    // return 1\n        lRUCache.put(3, 3); // LRU key was 2, evicts key 2, cache is {1=1, 3=3}\n        lRUCache.get(2);    // returns -1 (not found)\n        lRUCache.put(4, 4); // LRU key was 1, evicts key 1, cache is {4=4, 3=3}\n        lRUCache.get(1);    // return -1 (not found)\n        lRUCache.get(3);    // return 3\n        lRUCache.get(4);    // return 4\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        self.capacity = capacity\n        self.cache = {}\n        self.lru = []\n        self.size = 0"
    },
    {
        "number": 146,
        "title": "LRU Cache",
        "difficulty": 1,
        "prompt": "class LRUCache:\n    def __init__(self, capacity: int):\n    def get(self, key: int) -> int:\n    def put(self, key: int, value: int) -> None:\n        \"\"\"\n        Design a data structure that follows the constraints of a Least Recently Used (LRU) cache.\n        Implement the LRUCache class:\n            LRUCache(int capacity) Initialize the LRU cache with positive size capacity.\n            int get(int key) Return the value of the key if the key exists, otherwise return -1.\n            void put(int key, int value) Update the value of the key if the key exists. Otherwise, add the key-value pair to the cache. If the number of keys exceeds the capacity from this operation, evict the least recently used key.\n        The functions get and put must each run in O(1) average time complexity.\n        Example 1:\n        Input\n        [\"LRUCache\", \"put\", \"put\", \"get\", \"put\", \"get\", \"put\", \"get\", \"get\", \"get\"]\n        [[2], [1, 1], [2, 2], [1], [3, 3], [2], [4, 4], [1], [3], [4]]\n        Output\n        [null, null, null, 1, null, -1, null, -1, 3, 4]\n        Explanation\n        LRUCache lRUCache = new LRUCache(2);\n        lRUCache.put(1, 1); // cache is {1=1}\n        lRUCache.put(2, 2); // cache is {1=1, 2=2}\n        lRUCache.get(1);    // return 1\n        lRUCache.put(3, 3); // LRU key was 2, evicts key 2, cache is {1=1, 3=3}\n        lRUCache.get(2);    // returns -1 (not found)\n        lRUCache.put(4, 4); // LRU key was 1, evicts key 1, cache is {4=4, 3=3}\n        lRUCache.get(1);    // return -1 (not found)\n        lRUCache.get(3);    // return 3\n        lRUCache.get(4);    // return 4\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        self.cache = {}\n        self.capacity = capacity\n        self.lru = []\n        self.size = 0"
    },
    {
        "number": 147,
        "title": "Insertion Sort List",
        "difficulty": 1,
        "prompt": "class Solution:\n    def insertionSortList(self, head: Optional[ListNode]) -> Optional[ListNode]:\n        \"\"\"\n        Given the head of a singly linked list, sort the list using insertion sort, and return the sorted list's head.\n        The steps of the insertion sort algorithm:\n            Insertion sort iterates, consuming one input element each repetition and growing a sorted output list.\n            At each iteration, insertion sort removes one element from the input data, finds the location it belongs within the sorted list and inserts it there.\n            It repeats until no input elements remain.\n        The following is a graphical example of the insertion sort algorithm. The partially sorted list (black) initially contains only the first element in the list. One element (red) is removed from the input data and inserted in-place into the sorted list with each iteration.\n        Example 1:\n        Input: head = [4,2,1,3]\n        Output: [1,2,3,4]\n        Example 2:\n        Input: head = [-1,5,3,4,0]\n        Output: [-1,0,3,4,5]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        if not head:\n            return head\n        \n        dummy = ListNode(0)\n        dummy.next = head\n        \n        while head and head.next:\n            if head.val <= head.next.val:\n                head = head.next\n            else:\n                pre, cur = dummy, dummy.next\n                while cur and cur.val < head.next.val:\n                    pre, cur = cur, cur.next\n                \n                # insert\n                head.next = cur\n                pre.next = head\n                \n                # update head\n                head = cur\n        \n        return dummy.next\n<|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>"
    },
    {
        "number": 147,
        "title": "Insertion Sort List",
        "difficulty": 1,
        "prompt": "class Solution:\n    def insertionSortList(self, head: Optional[ListNode]) -> Optional[ListNode]:\n        \"\"\"\n        Given the head of a singly linked list, sort the list using insertion sort, and return the sorted list's head.\n        The steps of the insertion sort algorithm:\n            Insertion sort iterates, consuming one input element each repetition and growing a sorted output list.\n            At each iteration, insertion sort removes one element from the input data, finds the location it belongs within the sorted list and inserts it there.\n            It repeats until no input elements remain.\n        The following is a graphical example of the insertion sort algorithm. The partially sorted list (black) initially contains only the first element in the list. One element (red) is removed from the input data and inserted in-place into the sorted list with each iteration.\n        Example 1:\n        Input: head = [4,2,1,3]\n        Output: [1,2,3,4]\n        Example 2:\n        Input: head = [-1,5,3,4,0]\n        Output: [-1,0,3,4,5]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        if not head:\n            return None\n        \n        dummy = ListNode(0)\n        dummy.next = head\n        \n        curr = head\n        while curr and curr.next:\n            if curr.val <= curr.next.val:\n                curr = curr.next\n            else:\n                # find the insertion point\n                prev = dummy\n                while prev.next.val < curr.next.val:\n                    prev = prev.next\n                \n                # insert the node\n                curr.next = curr.next.next\n                prev.next = curr\n                curr = curr.next\n        \n        return dummy.next\n<|endoftext|>"
    },
    {
        "number": 148,
        "title": "Sort List",
        "difficulty": 1,
        "prompt": "class Solution:\n    def sortList(self, head: Optional[ListNode]) -> Optional[ListNode]:\n        \"\"\"\n        Given the head of a linked list, return the list after sorting it in ascending order.\n        Example 1:\n        Input: head = [4,2,1,3]\n        Output: [1,2,3,4]\n        Example 2:\n        Input: head = [-1,5,3,4,0]\n        Output: [-1,0,3,4,5]\n        Example 3:\n        Input: head = []\n        Output: []\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        # 1. \u5feb\u6392\n        # 2. \u5f52\u5e76\u6392\u5e8f\n        # 3. \u5806\u6392\u5e8f\n        # 4. \u57fa\u6570\u6392\u5e8f\n        # 5. \u57fa\u6570\u6392\u5e8f\u7684\u53d8\u5f62\n        # 6. \u5feb\u901f\u6392\u5e8f\n        # 7. \u5f52\u5e76\u6392\u5e8f\u7684\u53d8\u5f62\n        # 8. \u5806\u6392\u5e8f\u7684\u53d8\u5f62\n        # 9. \u5806\u6392\u5e8f\n        # 10. \u5f52\u5e76\u6392\u5e8f\n        # 11. \u5f52\u5e76\u6392\u5e8f\u7684\u53d8\u5f62\n        # 12. \u5feb\u901f\u6392\u5e8f\n        # 13. \u5f52\u5e76\u6392\u5e8f\u7684\u53d8\u5f62\n        # 14. \u5806\u6392\u5e8f\u7684\u53d8\u5f62\n        # 15. \u5806\u6392\u5e8f\n        # 16. \u5f52\u5e76\u6392\u5e8f\n        # 17. \u5f52\u5e76\u6392\u5e8f\u7684\u53d8\u5f62\n        # 18. \u5feb\u901f\u6392\u5e8f\n        # 19. \u5f52\u5e76\u6392\u5e8f\u7684\u53d8"
    },
    {
        "number": 148,
        "title": "Sort List",
        "difficulty": 1,
        "prompt": "class Solution:\n    def sortList(self, head: Optional[ListNode]) -> Optional[ListNode]:\n        \"\"\"\n        Given the head of a linked list, return the list after sorting it in ascending order.\n        Example 1:\n        Input: head = [4,2,1,3]\n        Output: [1,2,3,4]\n        Example 2:\n        Input: head = [-1,5,3,4,0]\n        Output: [-1,0,3,4,5]\n        Example 3:\n        Input: head = []\n        Output: []\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        if not head:\n            return head\n        \n        # find the middle node\n        slow = fast = head\n        while fast and fast.next:\n            slow = slow.next\n            fast = fast.next.next\n        \n        # reverse the second half\n        pre, cur = None, slow\n        while cur:\n            pre, cur.next, cur = cur, pre, cur.next\n        \n        # merge two sorted linked list\n        h1, h2 = head, pre\n        while h2:\n            h1_next, h2_next = h1.next, h2.next\n            h1.next, h2.next = h2, h1_next\n            h1, h2 = h1_next, h2_next\n        return head\n<|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>"
    },
    {
        "number": 149,
        "title": "Max Points on a Line",
        "difficulty": 2,
        "prompt": "class Solution:\n    def maxPoints(self, points: List[List[int]]) -> int:\n        \"\"\"\n        Given an array of points where points[i] = [xi, yi] represents a point on the X-Y plane, return the maximum number of points that lie on the same straight line.\n        Example 1:\n        Input: points = [[1,1],[2,2],[3,3]]\n        Output: 3\n        Example 2:\n        Input: points = [[1,1],[3,2],[5,3],[4,1],[2,3],[1,4]]\n        Output: 4\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        # Solution 1:\n        # O(n^2)\n        # def gcd(a, b):\n        #     if a == 0:\n        #         return b\n        #     return gcd(b % a, a)\n        #\n        # def lcm(a, b):\n        #     return a * b // gcd(a, b)\n        #\n        # if len(points) < 3:\n        #     return len(points)\n        #\n        # max_points = 1\n        # for i in range(len(points)):\n        #     slope_dict = {}\n        #     same_points = 1\n        #     for j in range(i + 1, len(points)):\n        #         if points[i][0] == points[j][0] and points[i][1] == points[j][1]:\n        #             same_points += 1\n        #             continue\n        #         slope = (points[j][1] - points[i][1]) / (points[j][0] - points[i][0])\n        #         if slope not in slope_dict:\n        #             slope_dict[slope] = 1\n        #         else:\n        #             slope_dict[slope] += 1\n        #         "
    },
    {
        "number": 149,
        "title": "Max Points on a Line",
        "difficulty": 2,
        "prompt": "class Solution:\n    def maxPoints(self, points: List[List[int]]) -> int:\n        \"\"\"\n        Given an array of points where points[i] = [xi, yi] represents a point on the X-Y plane, return the maximum number of points that lie on the same straight line.\n        Example 1:\n        Input: points = [[1,1],[2,2],[3,3]]\n        Output: 3\n        Example 2:\n        Input: points = [[1,1],[3,2],[5,3],[4,1],[2,3],[1,4]]\n        Output: 4\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        if len(points) == 1:\n            return 1\n        \n        max_points = 1\n        for i in range(len(points)):\n            slope_dict = {}\n            same_points = 1\n            for j in range(i+1, len(points)):\n                if points[i][0] == points[j][0] and points[i][1] == points[j][1]:\n                    same_points += 1\n                    continue\n                slope = self.get_slope(points[i], points[j])\n                if slope in slope_dict:\n                    slope_dict[slope] += 1\n                else:\n                    slope_dict[slope] = 1\n            max_points = max(max_points, max(slope_dict.values()) + same_points)\n        return max_points\n    \n    def get_slope(self, point1, point2):\n        if point1[0] == point2[0]:\n            return float('inf')\n        return (point1[1] - point2[1]) / (point1[0] - point2[0])\n<|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>"
    },
    {
        "number": 150,
        "title": "Evaluate Reverse Polish Notation",
        "difficulty": 1,
        "prompt": "class Solution:\n    def evalRPN(self, tokens: List[str]) -> int:\n        \"\"\"\n        You are given an array of strings tokens that represents an arithmetic expression in a Reverse Polish Notation.\n        Evaluate the expression. Return an integer that represents the value of the expression.\n        Note that:\n            The valid operators are '+', '-', '*', and '/'.\n            Each operand may be an integer or another expression.\n            The division between two integers always truncates toward zero.\n            There will not be any division by zero.\n            The input represents a valid arithmetic expression in a reverse polish notation.\n            The answer and all the intermediate calculations can be represented in a 32-bit integer.\n        Example 1:\n        Input: tokens = [\"2\",\"1\",\"+\",\"3\",\"*\"]\n        Output: 9\n        Explanation: ((2 + 1) * 3) = 9\n        Example 2:\n        Input: tokens = [\"4\",\"13\",\"5\",\"/\",\"+\"]\n        Output: 6\n        Explanation: (4 + (13 / 5)) = 6\n        Example 3:\n        Input: tokens = [\"10\",\"6\",\"9\",\"3\",\"+\",\"-11\",\"*\",\"/\",\"*\",\"17\",\"+\",\"5\",\"+\"]\n        Output: 22\n        Explanation: ((10 * (6 / ((9 + 3) * -11))) + 17) + 5\n        = ((10 * (6 / (12 * -11))) + 17) + 5\n        = ((10 * (6 / -132)) + 17) + 5\n        = ((10 * 0) + 17) + 5\n        = (0 + 17) + 5\n        = 17 + 5\n        = 22\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        stack = []\n        for token in tokens:\n            if token in \"+-*/\":\n                num2 = stack.pop()\n                num1 = stack.pop()\n                if token == \"+\":\n                    stack.append(num1 + num2)\n                elif token == \"-\":\n                    stack.append(num1 - num2)\n                elif token == \"*\":\n                    stack.append(num1 * num2)\n                else:\n                    stack.append(int(num1 / num2))\n            else:\n                stack.append(int(token))\n        return stack[0]"
    },
    {
        "number": 150,
        "title": "Evaluate Reverse Polish Notation",
        "difficulty": 1,
        "prompt": "class Solution:\n    def evalRPN(self, tokens: List[str]) -> int:\n        \"\"\"\n        You are given an array of strings tokens that represents an arithmetic expression in a Reverse Polish Notation.\n        Evaluate the expression. Return an integer that represents the value of the expression.\n        Note that:\n            The valid operators are '+', '-', '*', and '/'.\n            Each operand may be an integer or another expression.\n            The division between two integers always truncates toward zero.\n            There will not be any division by zero.\n            The input represents a valid arithmetic expression in a reverse polish notation.\n            The answer and all the intermediate calculations can be represented in a 32-bit integer.\n        Example 1:\n        Input: tokens = [\"2\",\"1\",\"+\",\"3\",\"*\"]\n        Output: 9\n        Explanation: ((2 + 1) * 3) = 9\n        Example 2:\n        Input: tokens = [\"4\",\"13\",\"5\",\"/\",\"+\"]\n        Output: 6\n        Explanation: (4 + (13 / 5)) = 6\n        Example 3:\n        Input: tokens = [\"10\",\"6\",\"9\",\"3\",\"+\",\"-11\",\"*\",\"/\",\"*\",\"17\",\"+\",\"5\",\"+\"]\n        Output: 22\n        Explanation: ((10 * (6 / ((9 + 3) * -11))) + 17) + 5\n        = ((10 * (6 / (12 * -11))) + 17) + 5\n        = ((10 * (6 / -132)) + 17) + 5\n        = ((10 * 0) + 17) + 5\n        = (0 + 17) + 5\n        = 17 + 5\n        = 22\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        stack = []\n        for token in tokens:\n            if token in [\"+\", \"-\", \"*\", \"/\"]:\n                b = stack.pop()\n                a = stack.pop()\n                if token == \"+\":\n                    stack.append(a + b)\n                elif token == \"-\":\n                    stack.append(a - b)\n                elif token == \"*\":\n                    stack.append(a * b)\n                else:\n                    stack.append(int(a / b))\n            else:\n                stack.append(int(token))\n        return stack[0]"
    },
    {
        "number": 151,
        "title": "Reverse Words in a String",
        "difficulty": 1,
        "prompt": "class Solution:\n    def reverseWords(self, s: str) -> str:\n        \"\"\"\n        Given an input string s, reverse the order of the words.\n        A word is defined as a sequence of non-space characters. The words in s will be separated by at least one space.\n        Return a string of the words in reverse order concatenated by a single space.\n        Note that s may contain leading or trailing spaces or multiple spaces between two words. The returned string should only have a single space separating the words. Do not include any extra spaces.\n        Example 1:\n        Input: s = \"the sky is blue\"\n        Output: \"blue is sky the\"\n        Example 2:\n        Input: s = \"  hello world  \"\n        Output: \"world hello\"\n        Explanation: Your reversed string should not contain leading or trailing spaces.\n        Example 3:\n        Input: s = \"a good   example\"\n        Output: \"example good a\"\n        Explanation: You need to reduce multiple spaces between two words to a single space in the reversed string.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        return''.join(s.split()[::-1])"
    },
    {
        "number": 151,
        "title": "Reverse Words in a String",
        "difficulty": 1,
        "prompt": "class Solution:\n    def reverseWords(self, s: str) -> str:\n        \"\"\"\n        Given an input string s, reverse the order of the words.\n        A word is defined as a sequence of non-space characters. The words in s will be separated by at least one space.\n        Return a string of the words in reverse order concatenated by a single space.\n        Note that s may contain leading or trailing spaces or multiple spaces between two words. The returned string should only have a single space separating the words. Do not include any extra spaces.\n        Example 1:\n        Input: s = \"the sky is blue\"\n        Output: \"blue is sky the\"\n        Example 2:\n        Input: s = \"  hello world  \"\n        Output: \"world hello\"\n        Explanation: Your reversed string should not contain leading or trailing spaces.\n        Example 3:\n        Input: s = \"a good   example\"\n        Output: \"example good a\"\n        Explanation: You need to reduce multiple spaces between two words to a single space in the reversed string.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        # split the string into words\n        # reverse the words\n        # join the words with a space\n        return \" \".join(reversed(s.split()))"
    },
    {
        "number": 152,
        "title": "Maximum Product Subarray",
        "difficulty": 1,
        "prompt": "class Solution:\n    def maxProduct(self, nums: List[int]) -> int:\n        \"\"\"\n        Given an integer array nums, find a subarray that has the largest product, and return the product.\n        The test cases are generated so that the answer will fit in a 32-bit integer.\n        Example 1:\n        Input: nums = [2,3,-2,4]\n        Output: 6\n        Explanation: [2,3] has the largest product 6.\n        Example 2:\n        Input: nums = [-2,0,-1]\n        Output: 0\n        Explanation: The result cannot be 2, because [-2,-1] is not a subarray.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        # dp[i] = max(dp[i-1]*nums[i], dp[i-1]*nums[i], nums[i])\n        # dp[i] = min(dp[i-1]*nums[i], dp[i-1]*nums[i], nums[i])\n        # dp[i] = max(dp[i-1]*nums[i], nums[i])\n        # dp[i] = min(dp[i-1]*nums[i], nums[i])\n        # dp[i] = max(dp[i-1]*nums[i], nums[i])\n        # dp[i] = min(dp[i-1]*nums[i], nums[i])\n        # dp[i] = max(dp[i-1]*nums[i], nums[i])\n        # dp[i] = min(dp[i-1]*nums[i], nums[i])\n        # dp[i] = max(dp[i-1]*nums[i], nums[i])\n        # dp[i] = min(dp[i-1]*nums[i],"
    },
    {
        "number": 152,
        "title": "Maximum Product Subarray",
        "difficulty": 1,
        "prompt": "class Solution:\n    def maxProduct(self, nums: List[int]) -> int:\n        \"\"\"\n        Given an integer array nums, find a subarray that has the largest product, and return the product.\n        The test cases are generated so that the answer will fit in a 32-bit integer.\n        Example 1:\n        Input: nums = [2,3,-2,4]\n        Output: 6\n        Explanation: [2,3] has the largest product 6.\n        Example 2:\n        Input: nums = [-2,0,-1]\n        Output: 0\n        Explanation: The result cannot be 2, because [-2,-1] is not a subarray.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        # \u6211\u7684\u89e3\u6cd5\uff0c\u8d85\u65f6\n        # if not nums:\n        #     return 0\n        # max_prod = nums[0]\n        # for i in range(len(nums)):\n        #     for j in range(i, len(nums)):\n        #         if max_prod < reduce(lambda x, y: x*y, nums[i:j+1]):\n        #             max_prod = reduce(lambda x, y: x*y, nums[i:j+1])\n        # return max_prod"
    },
    {
        "number": 153,
        "title": "Find Minimum in Rotated Sorted Array",
        "difficulty": 1,
        "prompt": "class Solution:\n    def findMin(self, nums: List[int]) -> int:\n        \"\"\"\n        Suppose an array of length n sorted in ascending order is rotated between 1 and n times. For example, the array nums = [0,1,2,4,5,6,7] might become:\n            [4,5,6,7,0,1,2] if it was rotated 4 times.\n            [0,1,2,4,5,6,7] if it was rotated 7 times.\n        Notice that rotating an array [a[0], a[1], a[2],..., a[n-1]] 1 time results in the array [a[n-1], a[0], a[1], a[2],..., a[n-2]].\n        Given the sorted rotated array nums of unique elements, return the minimum element of this array.\n        You must write an algorithm that runs in O(log n) time.\n        Example 1:\n        Input: nums = [3,4,5,1,2]\n        Output: 1\n        Explanation: The original array was [1,2,3,4,5] rotated 3 times.\n        Example 2:\n        Input: nums = [4,5,6,7,0,1,2]\n        Output: 0\n        Explanation: The original array was [0,1,2,4,5,6,7] and it was rotated 4 times.\n        Example 3:\n        Input: nums = [11,13,15,17]\n        Output: 11\n        Explanation: The original array was [11,13,15,17] and it was rotated 4 times. \n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        # binary search\n        # time complexity: O(logN)\n        # space complexity: O(1)\n        if len(nums) == 1:\n            return nums[0]\n        left, right = 0, len(nums) - 1\n        while left < right:\n            mid = left + (right - left) // 2\n            if nums[mid] > nums[right]:\n                left = mid + 1\n            else:\n                right = mid\n        return nums[left]\n<|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>"
    },
    {
        "number": 153,
        "title": "Find Minimum in Rotated Sorted Array",
        "difficulty": 1,
        "prompt": "class Solution:\n    def findMin(self, nums: List[int]) -> int:\n        \"\"\"\n        Suppose an array of length n sorted in ascending order is rotated between 1 and n times. For example, the array nums = [0,1,2,4,5,6,7] might become:\n            [4,5,6,7,0,1,2] if it was rotated 4 times.\n            [0,1,2,4,5,6,7] if it was rotated 7 times.\n        Notice that rotating an array [a[0], a[1], a[2],..., a[n-1]] 1 time results in the array [a[n-1], a[0], a[1], a[2],..., a[n-2]].\n        Given the sorted rotated array nums of unique elements, return the minimum element of this array.\n        You must write an algorithm that runs in O(log n) time.\n        Example 1:\n        Input: nums = [3,4,5,1,2]\n        Output: 1\n        Explanation: The original array was [1,2,3,4,5] rotated 3 times.\n        Example 2:\n        Input: nums = [4,5,6,7,0,1,2]\n        Output: 0\n        Explanation: The original array was [0,1,2,4,5,6,7] and it was rotated 4 times.\n        Example 3:\n        Input: nums = [11,13,15,17]\n        Output: 11\n        Explanation: The original array was [11,13,15,17] and it was rotated 4 times. \n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        if len(nums) == 1:\n            return nums[0]\n        if len(nums) == 2:\n            return min(nums[0], nums[1])\n        \n        left, right = 0, len(nums) - 1\n        while left < right:\n            mid = left + (right - left) // 2\n            if nums[mid] > nums[right]:\n                left = mid + 1\n            else:\n                right = mid\n        return nums[left]\n    \n    def findMin2(self, nums: List[int]) -> int:\n        \"\"\"\n        Suppose an array of length n sorted in ascending order is rotated between 1 and n times. For example, the array nums = [0,1,2,4,5,6,7] might become:\n            [4,5,6,7,0,1,2] if it was rotated 4 times.\n            [0,1,2,4,5,6,7] if it was rotated 7 times.\n        Notice that rotating an array [a[0], a[1], a[2],..., a[n-1]] 1 time results in the array [a[n-1], a[0], a[1], a[2],..., a[n-2]]."
    },
    {
        "number": 154,
        "title": "Find Minimum in Rotated Sorted Array II",
        "difficulty": 2,
        "prompt": "class Solution:\n    def findMin(self, nums: List[int]) -> int:\n        \"\"\"\n        Suppose an array of length n sorted in ascending order is rotated between 1 and n times. For example, the array nums = [0,1,4,4,5,6,7] might become:\n            [4,5,6,7,0,1,4] if it was rotated 4 times.\n            [0,1,4,4,5,6,7] if it was rotated 7 times.\n        Notice that rotating an array [a[0], a[1], a[2],..., a[n-1]] 1 time results in the array [a[n-1], a[0], a[1], a[2],..., a[n-2]].\n        Given the sorted rotated array nums that may contain duplicates, return the minimum element of this array.\n        You must decrease the overall operation steps as much as possible.\n        Example 1:\n        Input: nums = [1,3,5]\n        Output: 1\n        Example 2:\n        Input: nums = [2,2,2,0,1]\n        Output: 0\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        if len(nums) == 1:\n            return nums[0]\n        if len(nums) == 2:\n            return min(nums)\n        \n        left = 0\n        right = len(nums) - 1\n        \n        while left < right:\n            mid = left + (right - left) // 2\n            if nums[mid] > nums[right]:\n                left = mid + 1\n            else:\n                right = mid\n        return nums[left]\n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n"
    },
    {
        "number": 154,
        "title": "Find Minimum in Rotated Sorted Array II",
        "difficulty": 2,
        "prompt": "class Solution:\n    def findMin(self, nums: List[int]) -> int:\n        \"\"\"\n        Suppose an array of length n sorted in ascending order is rotated between 1 and n times. For example, the array nums = [0,1,4,4,5,6,7] might become:\n            [4,5,6,7,0,1,4] if it was rotated 4 times.\n            [0,1,4,4,5,6,7] if it was rotated 7 times.\n        Notice that rotating an array [a[0], a[1], a[2],..., a[n-1]] 1 time results in the array [a[n-1], a[0], a[1], a[2],..., a[n-2]].\n        Given the sorted rotated array nums that may contain duplicates, return the minimum element of this array.\n        You must decrease the overall operation steps as much as possible.\n        Example 1:\n        Input: nums = [1,3,5]\n        Output: 1\n        Example 2:\n        Input: nums = [2,2,2,0,1]\n        Output: 0\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        if len(nums) == 1:\n            return nums[0]\n        left, right = 0, len(nums) - 1\n        while left < right:\n            mid = (left + right) // 2\n            if nums[mid] > nums[right]:\n                left = mid + 1\n            else:\n                right = mid\n        return nums[left]"
    },
    {
        "number": 155,
        "title": "Min Stack",
        "difficulty": 1,
        "prompt": "class MinStack:\n    def __init__(self):\n    def push(self, val: int) -> None:\n    def pop(self) -> None:\n    def top(self) -> int:\n    def getMin(self) -> int:\n        \"\"\"\n        Design a stack that supports push, pop, top, and retrieving the minimum element in constant time.\n        Implement the MinStack class:\n            MinStack() initializes the stack object.\n            void push(int val) pushes the element val onto the stack.\n            void pop() removes the element on the top of the stack.\n            int top() gets the top element of the stack.\n            int getMin() retrieves the minimum element in the stack.\n        You must implement a solution with O(1) time complexity for each function.\n        Example 1:\n        Input\n        [\"MinStack\",\"push\",\"push\",\"push\",\"getMin\",\"pop\",\"top\",\"getMin\"]\n        [[],[-2],[0],[-3],[],[],[],[]]\n        Output\n        [null,null,null,null,-3,null,0,-2]\n        Explanation\n        MinStack minStack = new MinStack();\n        minStack.push(-2);\n        minStack.push(0);\n        minStack.push(-3);\n        minStack.getMin(); // return -3\n        minStack.pop();\n        minStack.top();    // return 0\n        minStack.getMin(); // return -2\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        self.stack = []\n        self.min_stack = []\n        self.min = float('inf')\n        \n    def push(self, val: int) -> None:\n        if val <= self.min:\n            self.min_stack.append(val)\n        self.stack.append(val)\n        \n    def pop(self) -> None:\n        if self.stack[-1] == self.min:\n            self.min_stack.pop()\n        self.stack.pop()\n        \n    def top(self) -> int:\n        return self.stack[-1]\n        \n    def getMin(self) -> int:\n        return self.min_stack[-1]\n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        "
    },
    {
        "number": 155,
        "title": "Min Stack",
        "difficulty": 1,
        "prompt": "class MinStack:\n    def __init__(self):\n    def push(self, val: int) -> None:\n    def pop(self) -> None:\n    def top(self) -> int:\n    def getMin(self) -> int:\n        \"\"\"\n        Design a stack that supports push, pop, top, and retrieving the minimum element in constant time.\n        Implement the MinStack class:\n            MinStack() initializes the stack object.\n            void push(int val) pushes the element val onto the stack.\n            void pop() removes the element on the top of the stack.\n            int top() gets the top element of the stack.\n            int getMin() retrieves the minimum element in the stack.\n        You must implement a solution with O(1) time complexity for each function.\n        Example 1:\n        Input\n        [\"MinStack\",\"push\",\"push\",\"push\",\"getMin\",\"pop\",\"top\",\"getMin\"]\n        [[],[-2],[0],[-3],[],[],[],[]]\n        Output\n        [null,null,null,null,-3,null,0,-2]\n        Explanation\n        MinStack minStack = new MinStack();\n        minStack.push(-2);\n        minStack.push(0);\n        minStack.push(-3);\n        minStack.getMin(); // return -3\n        minStack.pop();\n        minStack.top();    // return 0\n        minStack.getMin(); // return -2\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        self.stack = []\n        self.min_stack = []"
    },
    {
        "number": 160,
        "title": "Intersection of Two Linked Lists",
        "difficulty": 0,
        "prompt": "class Solution:\n    def getIntersectionNode(self, headA: ListNode, headB: ListNode) -> Optional[ListNode]:\n        \"\"\"\n        Given the heads of two singly linked-lists headA and headB, return the node at which the two lists intersect. If the two linked lists have no intersection at all, return null.\n        For example, the following two linked lists begin to intersect at node c1:\n        The test cases are generated such that there are no cycles anywhere in the entire linked structure.\n        Note that the linked lists must retain their original structure after the function returns.\n        Custom Judge:\n        The inputs to the judge are given as follows (your program is not given these inputs):\n            intersectVal - The value of the node where the intersection occurs. This is 0 if there is no intersected node.\n            listA - The first linked list.\n            listB - The second linked list.\n            skipA - The number of nodes to skip ahead in listA (starting from the head) to get to the intersected node.\n            skipB - The number of nodes to skip ahead in listB (starting from the head) to get to the intersected node.\n        The judge will then create the linked structure based on these inputs and pass the two heads, headA and headB to your program. If you correctly return the intersected node, then your solution will be accepted.\n        Example 1:\n        Input: intersectVal = 8, listA = [4,1,8,4,5], listB = [5,6,1,8,4,5], skipA = 2, skipB = 3\n        Output: Intersected at '8'\n        Explanation: The intersected node's value is 8 (note that this must not be 0 if the two lists intersect).\n        From the head of A, it reads as [4,1,8,4,5]. From the head of B, it reads as [5,6,1,8,4,5]. There are 2 nodes before the intersected node in A; There are 3 nodes before the intersected node in B.\n        - Note that the intersected node's value is not 1 because the nodes with value 1 in A and B (2nd node in A and 3rd node in B) are different node references. In other words, they point to two different locations in memory, while the nodes with value 8 in A and B (3rd node in A and 4th node in B) point to the same location in memory.\n        Example 2:\n        Input: intersectVal = 2, listA = [1,9,1,2,4], listB = [3,2,4], skipA = 3, skipB = 1\n        Output: Intersected at '2'\n        Explanation: The intersected node's value is 2 (note that this must not be 0 if the two lists intersect).\n        From the head of A, it reads as [1,9,1,2,4]. From the head of B, it reads as [3,2,4]. There are 3 nodes before the intersected node in A; There are 1 node before the intersected node in B.\n        Example 3:\n        Input: intersectVal = 0, listA = [2,6,4], listB = [1,5], skipA = 3, skipB = 2\n        Output: No intersection\n        Explanation: From the head of A, it reads as [2,6,4]. From the head of B, it reads as [1,5]. Since the two lists do not intersect, intersectVal must be 0, while skipA and skipB can be arbitrary values.\n        Explanation: The two lists do not intersect, so return null.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        # Solution 1:\n        # Time O(n)\n        # Space O(1)\n        # if not headA or not headB:\n        #     return None\n        #\n        # currA, currB = headA, headB\n        # lenA, lenB = 0, 0\n        #\n        # while currA:\n        #     lenA += 1\n        #     currA = currA.next\n        #\n        # while currB:\n        #     lenB += 1\n        #     currB = currB.next\n        #\n        # currA, currB = headA, headB\n        # if lenA > lenB:\n        #     for _ in range(lenA - lenB):\n        #         currA = currA.next\n        # else:\n        #     for _ in range(lenB - lenA):\n        #         currB = currB.next\n        #\n        # while currA and currB:\n        #     if currA == currB:\n        #         return currA\n        #     currA = currA.next\n        #     currB = currB.next\n        # return None"
    },
    {
        "number": 160,
        "title": "Intersection of Two Linked Lists",
        "difficulty": 0,
        "prompt": "class Solution:\n    def getIntersectionNode(self, headA: ListNode, headB: ListNode) -> Optional[ListNode]:\n        \"\"\"\n        Given the heads of two singly linked-lists headA and headB, return the node at which the two lists intersect. If the two linked lists have no intersection at all, return null.\n        For example, the following two linked lists begin to intersect at node c1:\n        The test cases are generated such that there are no cycles anywhere in the entire linked structure.\n        Note that the linked lists must retain their original structure after the function returns.\n        Custom Judge:\n        The inputs to the judge are given as follows (your program is not given these inputs):\n            intersectVal - The value of the node where the intersection occurs. This is 0 if there is no intersected node.\n            listA - The first linked list.\n            listB - The second linked list.\n            skipA - The number of nodes to skip ahead in listA (starting from the head) to get to the intersected node.\n            skipB - The number of nodes to skip ahead in listB (starting from the head) to get to the intersected node.\n        The judge will then create the linked structure based on these inputs and pass the two heads, headA and headB to your program. If you correctly return the intersected node, then your solution will be accepted.\n        Example 1:\n        Input: intersectVal = 8, listA = [4,1,8,4,5], listB = [5,6,1,8,4,5], skipA = 2, skipB = 3\n        Output: Intersected at '8'\n        Explanation: The intersected node's value is 8 (note that this must not be 0 if the two lists intersect).\n        From the head of A, it reads as [4,1,8,4,5]. From the head of B, it reads as [5,6,1,8,4,5]. There are 2 nodes before the intersected node in A; There are 3 nodes before the intersected node in B.\n        - Note that the intersected node's value is not 1 because the nodes with value 1 in A and B (2nd node in A and 3rd node in B) are different node references. In other words, they point to two different locations in memory, while the nodes with value 8 in A and B (3rd node in A and 4th node in B) point to the same location in memory.\n        Example 2:\n        Input: intersectVal = 2, listA = [1,9,1,2,4], listB = [3,2,4], skipA = 3, skipB = 1\n        Output: Intersected at '2'\n        Explanation: The intersected node's value is 2 (note that this must not be 0 if the two lists intersect).\n        From the head of A, it reads as [1,9,1,2,4]. From the head of B, it reads as [3,2,4]. There are 3 nodes before the intersected node in A; There are 1 node before the intersected node in B.\n        Example 3:\n        Input: intersectVal = 0, listA = [2,6,4], listB = [1,5], skipA = 3, skipB = 2\n        Output: No intersection\n        Explanation: From the head of A, it reads as [2,6,4]. From the head of B, it reads as [1,5]. Since the two lists do not intersect, intersectVal must be 0, while skipA and skipB can be arbitrary values.\n        Explanation: The two lists do not intersect, so return null.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        # 1. get the length of the two linked list\n        # 2. move the pointer of the longer linked list to the head\n        # 3. move the pointer of the shorter linked list to the head\n        # 4. move the pointer of the longer linked list to the head\n        # 5. move the pointer of the shorter linked list to the head\n        # 6. if the two linked list have the same length, then move the pointer of the longer linked list to the head\n        # 7. if the two linked list have the same length, then move the pointer of the shorter linked list to the head\n        # 8. if the two linked list have different length, then return None\n        # 9. if the two linked list have different length, then return None\n        # 10. if the two linked list have the same length, then move the pointer of the longer linked list to the head\n        # 11. if the two linked list have the same length, then move the pointer of the shorter linked list to the head\n        # 12. if the two linked list have different length, then return None\n        # 13. if the two linked list have different length, then return None\n        # 14. if the two linked list have the same length, then move the pointer of the longer linked list to the head\n        # 15. if the two linked list have the same length, then move the pointer of the"
    },
    {
        "number": 162,
        "title": "Find Peak Element",
        "difficulty": 1,
        "prompt": "class Solution:\n    def findPeakElement(self, nums: List[int]) -> int:\n        \"\"\"\n        A peak element is an element that is strictly greater than its neighbors.\n        Given a 0-indexed integer array nums, find a peak element, and return its index. If the array contains multiple peaks, return the index to any of the peaks.\n        You may imagine that nums[-1] = nums[n] = -\u221e. In other words, an element is always considered to be strictly greater than a neighbor that is outside the array.\n        You must write an algorithm that runs in O(log n) time.\n        Example 1:\n        Input: nums = [1,2,3,1]\n        Output: 2\n        Explanation: 3 is a peak element and your function should return the index number 2.\n        Example 2:\n        Input: nums = [1,2,1,3,5,6,4]\n        Output: 5\n        Explanation: Your function can return either index number 1 where the peak element is 2, or index number 5 where the peak element is 6.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        # binary search\n        # time complexity: O(log n)\n        # space complexity: O(1)\n        left, right = 0, len(nums) - 1\n        while left < right:\n            mid = (left + right) // 2\n            if nums[mid] > nums[mid + 1]:\n                right = mid\n            else:\n                left = mid + 1\n        return left"
    },
    {
        "number": 162,
        "title": "Find Peak Element",
        "difficulty": 1,
        "prompt": "class Solution:\n    def findPeakElement(self, nums: List[int]) -> int:\n        \"\"\"\n        A peak element is an element that is strictly greater than its neighbors.\n        Given a 0-indexed integer array nums, find a peak element, and return its index. If the array contains multiple peaks, return the index to any of the peaks.\n        You may imagine that nums[-1] = nums[n] = -\u221e. In other words, an element is always considered to be strictly greater than a neighbor that is outside the array.\n        You must write an algorithm that runs in O(log n) time.\n        Example 1:\n        Input: nums = [1,2,3,1]\n        Output: 2\n        Explanation: 3 is a peak element and your function should return the index number 2.\n        Example 2:\n        Input: nums = [1,2,1,3,5,6,4]\n        Output: 5\n        Explanation: Your function can return either index number 1 where the peak element is 2, or index number 5 where the peak element is 6.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        l, r = 0, len(nums) - 1\n        while l < r:\n            mid = l + (r - l) // 2\n            if nums[mid] < nums[mid + 1]:\n                l = mid + 1\n            else:\n                r = mid\n        return l"
    },
    {
        "number": 164,
        "title": "Maximum Gap",
        "difficulty": 2,
        "prompt": "class Solution:\n    def maximumGap(self, nums: List[int]) -> int:\n        \"\"\"\n        Given an integer array nums, return the maximum difference between two successive elements in its sorted form. If the array contains less than two elements, return 0.\n        You must write an algorithm that runs in linear time and uses linear extra space.\n        Example 1:\n        Input: nums = [3,6,9,1]\n        Output: 3\n        Explanation: The sorted form of the array is [1,3,6,9], either (3,6) or (6,9) has the maximum difference 3.\n        Example 2:\n        Input: nums = [10]\n        Output: 0\n        Explanation: The array contains less than 2 elements, therefore return 0.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        if len(nums) < 2:\n            return 0\n        nums.sort()\n        return max(nums[i+1] - nums[i] for i in range(len(nums)-1))\n<|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>"
    },
    {
        "number": 164,
        "title": "Maximum Gap",
        "difficulty": 2,
        "prompt": "class Solution:\n    def maximumGap(self, nums: List[int]) -> int:\n        \"\"\"\n        Given an integer array nums, return the maximum difference between two successive elements in its sorted form. If the array contains less than two elements, return 0.\n        You must write an algorithm that runs in linear time and uses linear extra space.\n        Example 1:\n        Input: nums = [3,6,9,1]\n        Output: 3\n        Explanation: The sorted form of the array is [1,3,6,9], either (3,6) or (6,9) has the maximum difference 3.\n        Example 2:\n        Input: nums = [10]\n        Output: 0\n        Explanation: The array contains less than 2 elements, therefore return 0.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        # O(nlogn)\n        # O(1)\n        if len(nums) < 2:\n            return 0\n        nums.sort()\n        return max(nums[i+1] - nums[i] for i in range(len(nums)-1))\n<|endoftext|>"
    },
    {
        "number": 165,
        "title": "Compare Version Numbers",
        "difficulty": 1,
        "prompt": "class Solution:\n    def compareVersion(self, version1: str, version2: str) -> int:\n        \"\"\"\n        Given two version numbers, version1 and version2, compare them.\n        Version numbers consist of one or more revisions joined by a dot '.'. Each revision consists of digits and may contain leading zeros. Every revision contains at least one character. Revisions are 0-indexed from left to right, with the leftmost revision being revision 0, the next revision being revision 1, and so on. For example 2.5.33 and 0.1 are valid version numbers.\n        To compare version numbers, compare their revisions in left-to-right order. Revisions are compared using their integer value ignoring any leading zeros. This means that revisions 1 and 001 are considered equal. If a version number does not specify a revision at an index, then treat the revision as 0. For example, version 1.0 is less than version 1.1 because their revision 0s are the same, but their revision 1s are 0 and 1 respectively, and 0 < 1.\n        Return the following:\n            If version1 < version2, return -1.\n            If version1 > version2, return 1.\n            Otherwise, return 0.\n        Example 1:\n        Input: version1 = \"1.01\", version2 = \"1.001\"\n        Output: 0\n        Explanation: Ignoring leading zeroes, both \"01\" and \"001\" represent the same integer \"1\".\n        Example 2:\n        Input: version1 = \"1.0\", version2 = \"1.0.0\"\n        Output: 0\n        Explanation: version1 does not specify revision 2, which means it is treated as \"0\".\n        Example 3:\n        Input: version1 = \"0.1\", version2 = \"1.1\"\n        Output: -1\n        Explanation: version1's revision 0 is \"0\", while version2's revision 0 is \"1\". 0 < 1, so version1 < version2.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        v1 = version1.split('.')\n        v2 = version2.split('.')\n        l1 = len(v1)\n        l2 = len(v2)\n        if l1 < l2:\n            v1 += ['0'] * (l2 - l1)\n        elif l2 < l1:\n            v2 += ['0'] * (l1 - l2)\n        for i in range(len(v1)):\n            if int(v1[i]) < int(v2[i]):\n                return -1\n            elif int(v1[i]) > int(v2[i]):\n                return 1\n        return 0"
    },
    {
        "number": 165,
        "title": "Compare Version Numbers",
        "difficulty": 1,
        "prompt": "class Solution:\n    def compareVersion(self, version1: str, version2: str) -> int:\n        \"\"\"\n        Given two version numbers, version1 and version2, compare them.\n        Version numbers consist of one or more revisions joined by a dot '.'. Each revision consists of digits and may contain leading zeros. Every revision contains at least one character. Revisions are 0-indexed from left to right, with the leftmost revision being revision 0, the next revision being revision 1, and so on. For example 2.5.33 and 0.1 are valid version numbers.\n        To compare version numbers, compare their revisions in left-to-right order. Revisions are compared using their integer value ignoring any leading zeros. This means that revisions 1 and 001 are considered equal. If a version number does not specify a revision at an index, then treat the revision as 0. For example, version 1.0 is less than version 1.1 because their revision 0s are the same, but their revision 1s are 0 and 1 respectively, and 0 < 1.\n        Return the following:\n            If version1 < version2, return -1.\n            If version1 > version2, return 1.\n            Otherwise, return 0.\n        Example 1:\n        Input: version1 = \"1.01\", version2 = \"1.001\"\n        Output: 0\n        Explanation: Ignoring leading zeroes, both \"01\" and \"001\" represent the same integer \"1\".\n        Example 2:\n        Input: version1 = \"1.0\", version2 = \"1.0.0\"\n        Output: 0\n        Explanation: version1 does not specify revision 2, which means it is treated as \"0\".\n        Example 3:\n        Input: version1 = \"0.1\", version2 = \"1.1\"\n        Output: -1\n        Explanation: version1's revision 0 is \"0\", while version2's revision 0 is \"1\". 0 < 1, so version1 < version2.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        v1 = version1.split('.')\n        v2 = version2.split('.')\n        for i in range(max(len(v1), len(v2))):\n            v1_i = 0 if i >= len(v1) else int(v1[i])\n            v2_i = 0 if i >= len(v2) else int(v2[i])\n            if v1_i > v2_i:\n                return 1\n            elif v1_i < v2_i:\n                return -1\n        return 0"
    },
    {
        "number": 166,
        "title": "Fraction to Recurring Decimal",
        "difficulty": 1,
        "prompt": "class Solution:\n    def fractionToDecimal(self, numerator: int, denominator: int) -> str:\n        \"\"\"\n        Given two integers representing the numerator and denominator of a fraction, return the fraction in string format.\n        If the fractional part is repeating, enclose the repeating part in parentheses.\n        If multiple answers are possible, return any of them.\n        It is guaranteed that the length of the answer string is less than 104 for all the given inputs.\n        Example 1:\n        Input: numerator = 1, denominator = 2\n        Output: \"0.5\"\n        Example 2:\n        Input: numerator = 2, denominator = 1\n        Output: \"2\"\n        Example 3:\n        Input: numerator = 4, denominator = 333\n        Output: \"0.(012)\"\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        # \u6574\u9664\n        if numerator % denominator == 0:\n            return str(numerator // denominator)\n        # \u53ea\u6709\u4e00\u4f4d\u6570\n        if numerator < 10 and denominator < 10:\n            return str(numerator) + '/' + str(denominator)\n        # \u5206\u5b50\u4e0d\u7b49\u4e8e0\n        if numerator:\n            # \u5206\u6bcd\u4e0d\u7b49\u4e8e0\n            if denominator:\n                # \u5206\u5b50\u4e0d\u7b49\u4e8e\u5206\u6bcd\n                if numerator!= denominator:\n                    # \u5206\u6bcd\u4e3a\u5947\u6570\n                    if denominator % 2:\n                        return str(numerator // denominator) + '.' + self.fractionToDecimal(numerator % denominator, denominator)\n                    # \u5206\u6bcd\u4e3a\u5076\u6570\n                    else:\n                        return str(numerator // denominator) + '.' + self.fractionToDecimal(numerator % denominator, denominator)\n                # \u5206\u5b50\u7b49\u4e8e\u5206\u6bcd\n                else:\n                    return str(numerator // denominator)\n            # \u5206\u6bcd\u4e3a"
    },
    {
        "number": 166,
        "title": "Fraction to Recurring Decimal",
        "difficulty": 1,
        "prompt": "class Solution:\n    def fractionToDecimal(self, numerator: int, denominator: int) -> str:\n        \"\"\"\n        Given two integers representing the numerator and denominator of a fraction, return the fraction in string format.\n        If the fractional part is repeating, enclose the repeating part in parentheses.\n        If multiple answers are possible, return any of them.\n        It is guaranteed that the length of the answer string is less than 104 for all the given inputs.\n        Example 1:\n        Input: numerator = 1, denominator = 2\n        Output: \"0.5\"\n        Example 2:\n        Input: numerator = 2, denominator = 1\n        Output: \"2\"\n        Example 3:\n        Input: numerator = 4, denominator = 333\n        Output: \"0.(012)\"\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        if numerator == 0:\n            return \"0\"\n        res = \"\"\n        if (numerator < 0) ^ (denominator < 0):\n            res += \"-\"\n        numerator, denominator = abs(numerator), abs(denominator)\n        res += str(numerator // denominator)\n        numerator %= denominator\n        if numerator == 0:\n            return res\n        res += \".\"\n        # dictionary to store the repeating part\n        dict_ = {}\n        while numerator:\n            if numerator in dict_:\n                # if the repeating part is already in the dictionary,\n                # then we have to add the index of the repeating part\n                # after the decimal point\n                res = res[:dict_[numerator]] + \"(\" + res[dict_[numerator]:] + \")\"\n                # break the loop\n                break\n            dict_[numerator] = len(res)\n            numerator *= 10\n            res += str(numerator // denominator)\n            numerator %= denominator\n        return res"
    },
    {
        "number": 167,
        "title": "Two Sum II - Input Array Is Sorted",
        "difficulty": 1,
        "prompt": "class Solution:\n    def twoSum(self, numbers: List[int], target: int) -> List[int]:\n        \"\"\"\n        Given a 1-indexed array of integers numbers that is already sorted in non-decreasing order, find two numbers such that they add up to a specific target number. Let these two numbers be numbers[index1] and numbers[index2] where 1 <= index1 < index2 <= numbers.length.\n        Return the indices of the two numbers, index1 and index2, added by one as an integer array [index1, index2] of length 2.\n        The tests are generated such that there is exactly one solution. You may not use the same element twice.\n        Your solution must use only constant extra space.\n        Example 1:\n        Input: numbers = [2,7,11,15], target = 9\n        Output: [1,2]\n        Explanation: The sum of 2 and 7 is 9. Therefore, index1 = 1, index2 = 2. We return [1, 2].\n        Example 2:\n        Input: numbers = [2,3,4], target = 6\n        Output: [1,3]\n        Explanation: The sum of 2 and 4 is 6. Therefore index1 = 1, index2 = 3. We return [1, 3].\n        Example 3:\n        Input: numbers = [-1,0], target = -1\n        Output: [1,2]\n        Explanation: The sum of -1 and 0 is -1. Therefore index1 = 1, index2 = 2. We return [1, 2].\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        # Time: O(n)\n        # Space: O(1)\n        left = 0\n        right = len(numbers) - 1\n        while left < right:\n            if numbers[left] + numbers[right] == target:\n                return [left + 1, right + 1]\n            elif numbers[left] + numbers[right] > target:\n                right -= 1\n            else:\n                left += 1"
    },
    {
        "number": 167,
        "title": "Two Sum II - Input Array Is Sorted",
        "difficulty": 1,
        "prompt": "class Solution:\n    def twoSum(self, numbers: List[int], target: int) -> List[int]:\n        \"\"\"\n        Given a 1-indexed array of integers numbers that is already sorted in non-decreasing order, find two numbers such that they add up to a specific target number. Let these two numbers be numbers[index1] and numbers[index2] where 1 <= index1 < index2 <= numbers.length.\n        Return the indices of the two numbers, index1 and index2, added by one as an integer array [index1, index2] of length 2.\n        The tests are generated such that there is exactly one solution. You may not use the same element twice.\n        Your solution must use only constant extra space.\n        Example 1:\n        Input: numbers = [2,7,11,15], target = 9\n        Output: [1,2]\n        Explanation: The sum of 2 and 7 is 9. Therefore, index1 = 1, index2 = 2. We return [1, 2].\n        Example 2:\n        Input: numbers = [2,3,4], target = 6\n        Output: [1,3]\n        Explanation: The sum of 2 and 4 is 6. Therefore index1 = 1, index2 = 3. We return [1, 3].\n        Example 3:\n        Input: numbers = [-1,0], target = -1\n        Output: [1,2]\n        Explanation: The sum of -1 and 0 is -1. Therefore index1 = 1, index2 = 2. We return [1, 2].\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        # Solution 1:\n        # Time complexity: O(n)\n        # Space complexity: O(1)\n        # left, right = 0, len(numbers) - 1\n        # while left < right:\n        #     if numbers[left] + numbers[right] == target:\n        #         return [left + 1, right + 1]\n        #     elif numbers[left] + numbers[right] < target:\n        #         left += 1\n        #     else:\n        #         right -= 1\n        # return [-1, -1]"
    },
    {
        "number": 168,
        "title": "Excel Sheet Column Title",
        "difficulty": 0,
        "prompt": "class Solution:\n    def convertToTitle(self, columnNumber: int) -> str:\n        \"\"\"\n        Given an integer columnNumber, return its corresponding column title as it appears in an Excel sheet.\n        For example:\n        A -> 1\n        B -> 2\n        C -> 3\n       ...\n        Z -> 26\n        AA -> 27\n        AB -> 28 \n       ...\n        Example 1:\n        Input: columnNumber = 1\n        Output: \"A\"\n        Example 2:\n        Input: columnNumber = 28\n        Output: \"AB\"\n        Example 3:\n        Input: columnNumber = 701\n        Output: \"ZY\"\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        # convert to base 26\n        # convert to base 26^26\n        # convert to base 26^26^26\n        # convert to base 26^26^26^26\n        # convert to base 26^26^26^26^26\n        # convert to base 26^26^26^26^26^26\n        # convert to base 26^26^26^26^26^26^26\n        # convert to base 26^26^26^26^26^26^26^26\n        # convert to base 26^26^26^26^26^26^26^26^26\n        # convert to base 26^26^26^26^26^26^26^26^26^26\n        # convert to base 26^26^26^26^26^26^26^26^26^26^26\n        # convert to base 26^26^26^26^26^26^26^26^26^26^26^26\n        # convert to base 26^26^26^26^26^26^26^26^26^26^26^26^26\n        # convert to base 26^26^26^26^26^26^26^26^26^26^26^26^26^26\n        # convert to base 26^26^26^26^26^26^26^26"
    },
    {
        "number": 168,
        "title": "Excel Sheet Column Title",
        "difficulty": 0,
        "prompt": "class Solution:\n    def convertToTitle(self, columnNumber: int) -> str:\n        \"\"\"\n        Given an integer columnNumber, return its corresponding column title as it appears in an Excel sheet.\n        For example:\n        A -> 1\n        B -> 2\n        C -> 3\n       ...\n        Z -> 26\n        AA -> 27\n        AB -> 28 \n       ...\n        Example 1:\n        Input: columnNumber = 1\n        Output: \"A\"\n        Example 2:\n        Input: columnNumber = 28\n        Output: \"AB\"\n        Example 3:\n        Input: columnNumber = 701\n        Output: \"ZY\"\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        # Solution 1:\n        # res = ''\n        # while columnNumber:\n        #     res = chr(columnNumber % 26 + ord('A')) + res\n        #     columnNumber //= 26\n        # return res"
    },
    {
        "number": 169,
        "title": "Majority Element",
        "difficulty": 0,
        "prompt": "class Solution:\n    def majorityElement(self, nums: List[int]) -> int:\n        \"\"\"\n        Given an array nums of size n, return the majority element.\n        The majority element is the element that appears more than \u230an / 2\u230b times. You may assume that the majority element always exists in the array.\n        Example 1:\n        Input: nums = [3,2,3]\n        Output: 3\n        Example 2:\n        Input: nums = [2,2,1,1,1,2,2]\n        Output: 2\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        # Solution 1:\n        # return sorted(nums)[len(nums) // 2]"
    },
    {
        "number": 169,
        "title": "Majority Element",
        "difficulty": 0,
        "prompt": "class Solution:\n    def majorityElement(self, nums: List[int]) -> int:\n        \"\"\"\n        Given an array nums of size n, return the majority element.\n        The majority element is the element that appears more than \u230an / 2\u230b times. You may assume that the majority element always exists in the array.\n        Example 1:\n        Input: nums = [3,2,3]\n        Output: 3\n        Example 2:\n        Input: nums = [2,2,1,1,1,2,2]\n        Output: 2\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        # Solution 1:\n        # return sorted(nums)[len(nums)//2]\n        # Solution 2:\n        # return Counter(nums).most_common(1)[0][0]\n        # Solution 3:\n        # return collections.Counter(nums).most_common(1)[0][0]\n        # Solution 4:\n        # return sorted(nums)[len(nums)//2]\n        # Solution 5:\n        # return nums[len(nums)//2]\n        # Solution 6:\n        # return nums[0]\n        # Solution 7:\n        # return nums[0]\n        # Solution 8:\n        # return nums[0]\n        # Solution 9:\n        # return nums[0]\n        # Solution 10:\n        # return nums[0]\n        # Solution 11:\n        # return nums[0]\n        # Solution 12:\n        # return nums[0]\n        # Solution 13:\n        # return nums[0]\n        # Solution 14:\n        # return nums[0]\n        # Solution 15:\n        # return nums[0]\n        # Solution 16:\n        # return nums[0]\n        # Solution 17:\n        # return nums[0]\n        "
    },
    {
        "number": 171,
        "title": "Excel Sheet Column Number",
        "difficulty": 0,
        "prompt": "class Solution:\n    def titleToNumber(self, columnTitle: str) -> int:\n        \"\"\"\n        Given a string columnTitle that represents the column title as appears in an Excel sheet, return its corresponding column number.\n        For example:\n        A -> 1\n        B -> 2\n        C -> 3\n       ...\n        Z -> 26\n        AA -> 27\n        AB -> 28 \n       ...\n        Example 1:\n        Input: columnTitle = \"A\"\n        Output: 1\n        Example 2:\n        Input: columnTitle = \"AB\"\n        Output: 28\n        Example 3:\n        Input: columnTitle = \"ZY\"\n        Output: 701\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        \n        # ord() returns the Unicode code point of the character\n        # chr() returns the character that represents the Unicode code point\n        \n        # ord('A') = 65\n        # ord('Z') = 90\n        # ord('a') = 97\n        # ord('z') = 122\n        \n        # ord('A') - ord('A') + 1 = 1\n        # ord('Z') - ord('A') + 1 = 26\n        # ord('a') - ord('A') + 1 = 27\n        # ord('z') - ord('A') + 1 = 52\n        \n        # ord('A') - ord('A') + 1 = 1\n        # ord('Z') - ord('A') + 1 = 26\n        # ord('a') - ord('A') + 1 = 27\n        # ord('z') - ord('A') + 1 = 52\n        \n        # ord('A') - ord('A') + 1 = 1\n        # ord('Z') - ord('A') + 1 = 26\n        # ord('a') - ord('A') + 1 = 27\n        # ord('z') - ord('A') + 1 = 52\n        \n        # ord('A') - ord('A') + 1 = 1\n        # ord('Z') - ord('A') + 1 = 26\n"
    },
    {
        "number": 171,
        "title": "Excel Sheet Column Number",
        "difficulty": 0,
        "prompt": "class Solution:\n    def titleToNumber(self, columnTitle: str) -> int:\n        \"\"\"\n        Given a string columnTitle that represents the column title as appears in an Excel sheet, return its corresponding column number.\n        For example:\n        A -> 1\n        B -> 2\n        C -> 3\n       ...\n        Z -> 26\n        AA -> 27\n        AB -> 28 \n       ...\n        Example 1:\n        Input: columnTitle = \"A\"\n        Output: 1\n        Example 2:\n        Input: columnTitle = \"AB\"\n        Output: 28\n        Example 3:\n        Input: columnTitle = \"ZY\"\n        Output: 701\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        # ord() \u51fd\u6570\u662f chr() \u51fd\u6570\uff08\u5bf9\u4e8e8\u4f4d\u7684ASCII\u5b57\u7b26\u4e32\uff09\u6216 unichr() \u51fd\u6570\uff08\u5bf9\u4e8eUnicode\u5bf9\u8c61\uff09\u7684\u914d\u5bf9\u51fd\u6570\uff0c\u5b83\u4ee5\u4e00\u4e2a\u5b57\u7b26\uff08\u957f\u5ea6\u4e3a1\u7684\u5b57\u7b26\u4e32\uff09\u4f5c\u4e3a\u53c2\u6570\uff0c\u8fd4\u56de\u5bf9\u5e94\u7684 ASCII \u6570\u503c\uff0c\u6216\u8005 Unicode \u6570\u503c\uff0c\u5982\u679c\u6240\u7ed9\u7684 Unicode \u5b57\u7b26\u8d85\u51fa\u4e86\u4f60\u7684 Python \u5b9a\u4e49\u8303\u56f4\uff0c\u5219\u4f1a\u5f15\u53d1\u4e00\u4e2a TypeError \u7684\u5f02\u5e38\u3002\n        # ord() \u51fd\u6570\u83b7\u53d6\u5b57\u7b26\u7684\u6574\u6570\u8868\u793a\uff0cchr() \u51fd\u6570\u628a\u7f16\u7801\u8f6c\u6362\u4e3a\u5bf9\u5e94\u7684\u5b57\u7b26\n        # ord('A') = 65\n        "
    },
    {
        "number": 172,
        "title": "Factorial Trailing Zeroes",
        "difficulty": 1,
        "prompt": "class Solution:\n    def trailingZeroes(self, n: int) -> int:\n        \"\"\"\n        Given an integer n, return the number of trailing zeroes in n!.\n        Note that n! = n * (n - 1) * (n - 2) *... * 3 * 2 * 1.\n        Example 1:\n        Input: n = 3\n        Output: 0\n        Explanation: 3! = 6, no trailing zero.\n        Example 2:\n        Input: n = 5\n        Output: 1\n        Explanation: 5! = 120, one trailing zero.\n        Example 3:\n        Input: n = 0\n        Output: 0\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        # \u65b9\u6cd5\u4e00\uff1a\u9012\u5f52\n        # \u5982\u679cn\u4e3a0\uff0c\u90a3\u4e48\u8fd4\u56de0\n        # \u5982\u679cn\u4e3a1\uff0c\u90a3\u4e48\u8fd4\u56de0\n        # \u5982\u679cn\u4e3a2\uff0c\u90a3\u4e48\u8fd4\u56de0\n        # \u5982\u679cn\u4e3a3\uff0c\u90a3\u4e48\u8fd4\u56de0\n        # \u5982\u679cn\u4e3a4\uff0c\u90a3\u4e48\u8fd4\u56de0\n        # \u5982\u679cn\u4e3a5\uff0c\u90a3\u4e48\u8fd4\u56de0\n        # \u5982\u679cn\u4e3a6\uff0c\u90a3\u4e48\u8fd4\u56de0\n        # \u5982\u679cn\u4e3a7\uff0c\u90a3\u4e48\u8fd4\u56de0\n        # \u5982\u679cn\u4e3a8\uff0c\u90a3\u4e48\u8fd4\u56de0\n        # \u5982\u679cn\u4e3a9\uff0c\u90a3\u4e48\u8fd4\u56de0\n        # \u5982\u679cn\u4e3a10\uff0c\u90a3\u4e48\u8fd4\u56de"
    },
    {
        "number": 172,
        "title": "Factorial Trailing Zeroes",
        "difficulty": 1,
        "prompt": "class Solution:\n    def trailingZeroes(self, n: int) -> int:\n        \"\"\"\n        Given an integer n, return the number of trailing zeroes in n!.\n        Note that n! = n * (n - 1) * (n - 2) *... * 3 * 2 * 1.\n        Example 1:\n        Input: n = 3\n        Output: 0\n        Explanation: 3! = 6, no trailing zero.\n        Example 2:\n        Input: n = 5\n        Output: 1\n        Explanation: 5! = 120, one trailing zero.\n        Example 3:\n        Input: n = 0\n        Output: 0\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        # n! = n * (n - 1) * (n - 2) *... * 3 * 2 * 1\n        # n! = n * (n - 1)!\n        # n! = n * (n - 1) * (n - 2) *... * 3 * 2 * 1\n        # n! = n * (n - 1) * (n - 2) *... * 3 * 2\n        # n! = n * (n - 1) * (n - 2) *... * 3\n        # n! = n * (n - 1) * (n - 2) *...\n        # n! = n * (n - 1)\n        # n! = n\n        # n! = 1\n        # n! = 1\n        # n! = 1\n        # n! = 1\n        # n! = 1\n        # n! = 1\n        # n! = 1\n        # n! = 1\n        # n! = 1\n        # n! = 1\n        # n! = 1\n        # n! = 1\n        # n! = 1\n        # n! = 1\n        # n! = 1\n        # n! = 1\n        # n! = 1\n        # n! = 1\n        # n! = 1\n        # n! = 1\n        # n!"
    },
    {
        "number": 173,
        "title": "Binary Search Tree Iterator",
        "difficulty": 1,
        "prompt": "class BSTIterator:\n    def __init__(self, root: Optional[TreeNode]):\n    def next(self) -> int:\n    def hasNext(self) -> bool:\n        \"\"\"\n        Implement the BSTIterator class that represents an iterator over the in-order traversal of a binary search tree (BST):\n            BSTIterator(TreeNode root) Initializes an object of the BSTIterator class. The root of the BST is given as part of the constructor. The pointer should be initialized to a non-existent number smaller than any element in the BST.\n            boolean hasNext() Returns true if there exists a number in the traversal to the right of the pointer, otherwise returns false.\n            int next() Moves the pointer to the right, then returns the number at the pointer.\n        Notice that by initializing the pointer to a non-existent smallest number, the first call to next() will return the smallest element in the BST.\n        You may assume that next() calls will always be valid. That is, there will be at least a next number in the in-order traversal when next() is called.\n        Example 1:\n        Input\n        [\"BSTIterator\", \"next\", \"next\", \"hasNext\", \"next\", \"hasNext\", \"next\", \"hasNext\", \"next\", \"hasNext\"]\n        [[[7, 3, 15, null, null, 9, 20]], [], [], [], [], [], [], [], [], []]\n        Output\n        [null, 3, 7, true, 9, true, 15, true, 20, false]\n        Explanation\n        BSTIterator bSTIterator = new BSTIterator([7, 3, 15, null, null, 9, 20]);\n        bSTIterator.next();    // return 3\n        bSTIterator.next();    // return 7\n        bSTIterator.hasNext(); // return True\n        bSTIterator.next();    // return 9\n        bSTIterator.hasNext(); // return True\n        bSTIterator.next();    // return 15\n        bSTIterator.hasNext(); // return True\n        bSTIterator.next();    // return 20\n        bSTIterator.hasNext(); // return False\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        # Solution 1:\n        # O(n) time\n        # O(1) space\n        # self.stack = []\n        # self.cur = root\n        # while self.cur or self.stack:\n        #     while self.cur:\n        #         self.stack.append(self.cur)\n        #         self.cur = self.cur.left\n        #     self.cur = self.stack.pop()\n        #     yield self.cur.val\n        #     self.cur = self.cur.right"
    },
    {
        "number": 173,
        "title": "Binary Search Tree Iterator",
        "difficulty": 1,
        "prompt": "class BSTIterator:\n    def __init__(self, root: Optional[TreeNode]):\n    def next(self) -> int:\n    def hasNext(self) -> bool:\n        \"\"\"\n        Implement the BSTIterator class that represents an iterator over the in-order traversal of a binary search tree (BST):\n            BSTIterator(TreeNode root) Initializes an object of the BSTIterator class. The root of the BST is given as part of the constructor. The pointer should be initialized to a non-existent number smaller than any element in the BST.\n            boolean hasNext() Returns true if there exists a number in the traversal to the right of the pointer, otherwise returns false.\n            int next() Moves the pointer to the right, then returns the number at the pointer.\n        Notice that by initializing the pointer to a non-existent smallest number, the first call to next() will return the smallest element in the BST.\n        You may assume that next() calls will always be valid. That is, there will be at least a next number in the in-order traversal when next() is called.\n        Example 1:\n        Input\n        [\"BSTIterator\", \"next\", \"next\", \"hasNext\", \"next\", \"hasNext\", \"next\", \"hasNext\", \"next\", \"hasNext\"]\n        [[[7, 3, 15, null, null, 9, 20]], [], [], [], [], [], [], [], [], []]\n        Output\n        [null, 3, 7, true, 9, true, 15, true, 20, false]\n        Explanation\n        BSTIterator bSTIterator = new BSTIterator([7, 3, 15, null, null, 9, 20]);\n        bSTIterator.next();    // return 3\n        bSTIterator.next();    // return 7\n        bSTIterator.hasNext(); // return True\n        bSTIterator.next();    // return 9\n        bSTIterator.hasNext(); // return True\n        bSTIterator.next();    // return 15\n        bSTIterator.hasNext(); // return True\n        bSTIterator.next();    // return 20\n        bSTIterator.hasNext(); // return False\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        self.stack = []\n        self.curr = root\n        while self.curr or self.stack:\n            while self.curr:\n                self.stack.append(self.curr)\n                self.curr = self.curr.left\n            self.curr = self.stack.pop()\n            yield self.curr.val\n            self.curr = self.curr.right"
    },
    {
        "number": 174,
        "title": "Dungeon Game",
        "difficulty": 2,
        "prompt": "class Solution:\n    def calculateMinimumHP(self, dungeon: List[List[int]]) -> int:\n        \"\"\"\n        The demons had captured the princess and imprisoned her in the bottom-right corner of a dungeon. The dungeon consists of m x n rooms laid out in a 2D grid. Our valiant knight was initially positioned in the top-left room and must fight his way through dungeon to rescue the princess.\n        The knight has an initial health point represented by a positive integer. If at any point his health point drops to 0 or below, he dies immediately.\n        Some of the rooms are guarded by demons (represented by negative integers), so the knight loses health upon entering these rooms; other rooms are either empty (represented as 0) or contain magic orbs that increase the knight's health (represented by positive integers).\n        To reach the princess as quickly as possible, the knight decides to move only rightward or downward in each step.\n        Return the knight's minimum initial health so that he can rescue the princess.\n        Note that any room can contain threats or power-ups, even the first room the knight enters and the bottom-right room where the princess is imprisoned.\n        Example 1:\n        Input: dungeon = [[-2,-3,3],[-5,-10,1],[10,30,-5]]\n        Output: 7\n        Explanation: The initial health of the knight must be at least 7 if he follows the optimal path: RIGHT-> RIGHT -> DOWN -> DOWN.\n        Example 2:\n        Input: dungeon = [[0]]\n        Output: 1\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        m, n = len(dungeon), len(dungeon[0])\n        dp = [[float('inf')] * (n + 1) for _ in range(m + 1)]\n        dp[m - 1][n], dp[m][n - 1] = 1, 1"
    },
    {
        "number": 174,
        "title": "Dungeon Game",
        "difficulty": 2,
        "prompt": "class Solution:\n    def calculateMinimumHP(self, dungeon: List[List[int]]) -> int:\n        \"\"\"\n        The demons had captured the princess and imprisoned her in the bottom-right corner of a dungeon. The dungeon consists of m x n rooms laid out in a 2D grid. Our valiant knight was initially positioned in the top-left room and must fight his way through dungeon to rescue the princess.\n        The knight has an initial health point represented by a positive integer. If at any point his health point drops to 0 or below, he dies immediately.\n        Some of the rooms are guarded by demons (represented by negative integers), so the knight loses health upon entering these rooms; other rooms are either empty (represented as 0) or contain magic orbs that increase the knight's health (represented by positive integers).\n        To reach the princess as quickly as possible, the knight decides to move only rightward or downward in each step.\n        Return the knight's minimum initial health so that he can rescue the princess.\n        Note that any room can contain threats or power-ups, even the first room the knight enters and the bottom-right room where the princess is imprisoned.\n        Example 1:\n        Input: dungeon = [[-2,-3,3],[-5,-10,1],[10,30,-5]]\n        Output: 7\n        Explanation: The initial health of the knight must be at least 7 if he follows the optimal path: RIGHT-> RIGHT -> DOWN -> DOWN.\n        Example 2:\n        Input: dungeon = [[0]]\n        Output: 1\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        m, n = len(dungeon), len(dungeon[0])\n        dp = [[0] * n for _ in range(m)]\n        dp[-1][-1] = max(1, 1 - dungeon[-1][-1])\n        for i in range(m - 1, -1, -1):\n            dp[i][-1] = max(1, dp[i + 1][-1] - dungeon[i][-1])\n        for j in range(n - 1, -1, -1):\n            dp[-1][j] = max(1, dp[-1][j + 1] - dungeon[-1][j])\n        for i in range(m - 2, -1, -1):\n            for j in range(n - 2, -1, -1):\n                dp[i][j] = max(1, min(dp[i + 1][j], dp[i][j + 1]) - dungeon[i][j])\n        return dp[0][0]"
    },
    {
        "number": 179,
        "title": "Largest Number",
        "difficulty": 1,
        "prompt": "class Solution:\n    def largestNumber(self, nums: List[int]) -> str:\n        \"\"\"\n        Given a list of non-negative integers nums, arrange them such that they form the largest number and return it.\n        Since the result may be very large, so you need to return a string instead of an integer.\n        Example 1:\n        Input: nums = [10,2]\n        Output: \"210\"\n        Example 2:\n        Input: nums = [3,30,34,5,9]\n        Output: \"9534330\"\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        # \u5148\u6392\u5e8f\uff0c\u7136\u540e\u6bd4\u8f83\u5927\u5c0f\n        nums = sorted(nums, reverse=True)\n        res = ''\n        for i in nums:\n            res += str(i)\n        return res"
    },
    {
        "number": 179,
        "title": "Largest Number",
        "difficulty": 1,
        "prompt": "class Solution:\n    def largestNumber(self, nums: List[int]) -> str:\n        \"\"\"\n        Given a list of non-negative integers nums, arrange them such that they form the largest number and return it.\n        Since the result may be very large, so you need to return a string instead of an integer.\n        Example 1:\n        Input: nums = [10,2]\n        Output: \"210\"\n        Example 2:\n        Input: nums = [3,30,34,5,9]\n        Output: \"9534330\"\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        if not nums:\n            return \"\"\n        nums = list(map(str, nums))\n        nums.sort(key=lambda x: x*4, reverse=True)\n        return \"\".join(nums)"
    },
    {
        "number": 187,
        "title": "Repeated DNA Sequences",
        "difficulty": 1,
        "prompt": "class Solution:\n    def findRepeatedDnaSequences(self, s: str) -> List[str]:\n        \"\"\"\n        The DNA sequence is composed of a series of nucleotides abbreviated as 'A', 'C', 'G', and 'T'.\n            For example, \"ACGAATTCCG\" is a DNA sequence.\n        When studying DNA, it is useful to identify repeated sequences within the DNA.\n        Given a string s that represents a DNA sequence, return all the 10-letter-long sequences (substrings) that occur more than once in a DNA molecule. You may return the answer in any order.\n        Example 1:\n        Input: s = \"AAAAACCCCCAAAAACCCCCCAAAAAGGGTTT\"\n        Output: [\"AAAAACCCCC\",\"CCCCCAAAAA\"]\n        Example 2:\n        Input: s = \"AAAAAAAAAAAAA\"\n        Output: [\"AAAAAAAAAA\"]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        # Solution 1: HashSet\n        # Time: O(n)\n        # Space: O(n)\n        # d = set()\n        # for i in range(len(s) - 9):\n        #     d.add(s[i:i+10])\n        # return list(d)"
    },
    {
        "number": 187,
        "title": "Repeated DNA Sequences",
        "difficulty": 1,
        "prompt": "class Solution:\n    def findRepeatedDnaSequences(self, s: str) -> List[str]:\n        \"\"\"\n        The DNA sequence is composed of a series of nucleotides abbreviated as 'A', 'C', 'G', and 'T'.\n            For example, \"ACGAATTCCG\" is a DNA sequence.\n        When studying DNA, it is useful to identify repeated sequences within the DNA.\n        Given a string s that represents a DNA sequence, return all the 10-letter-long sequences (substrings) that occur more than once in a DNA molecule. You may return the answer in any order.\n        Example 1:\n        Input: s = \"AAAAACCCCCAAAAACCCCCCAAAAAGGGTTT\"\n        Output: [\"AAAAACCCCC\",\"CCCCCAAAAA\"]\n        Example 2:\n        Input: s = \"AAAAAAAAAAAAA\"\n        Output: [\"AAAAAAAAAA\"]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        # Time: O(n)\n        # Space: O(n)\n        # hashmap\n        # hashmap[key] = hashmap.get(key, 0) + 1\n        # hashmap.get(key, 0)\n        # hashmap.get(key, default)\n        # hashmap.get(key, 0) + 1\n        # hashmap[key] = hashmap.get(key, 0) + 1\n        # hashmap[key] = hashmap.get(key, 0)\n        # hashmap.get(key, 0)\n        # hashmap.get(key, default)\n        # hashmap.get(key, 0) + 1\n        # hashmap[key] = hashmap.get(key, 0) + 1\n        # hashmap[key] = hashmap.get(key, 0)\n        # hashmap.get(key, 0)\n        # hashmap.get(key, default)\n        # hashmap.get(key, 0) + 1\n        # hashmap[key] = hashmap.get(key, 0) + 1\n        # hashmap[key] = hashmap.get(key, 0)\n        # hashmap.get(key, 0)\n        # hashmap.get(key, default)\n        # hashmap."
    },
    {
        "number": 188,
        "title": "Best Time to Buy and Sell Stock IV",
        "difficulty": 2,
        "prompt": "class Solution:\n    def maxProfit(self, k: int, prices: List[int]) -> int:\n        \"\"\"\n        You are given an integer array prices where prices[i] is the price of a given stock on the ith day, and an integer k.\n        Find the maximum profit you can achieve. You may complete at most k transactions.\n        Note: You may not engage in multiple transactions simultaneously (i.e., you must sell the stock before you buy again).\n        Example 1:\n        Input: k = 2, prices = [2,4,1]\n        Output: 2\n        Explanation: Buy on day 1 (price = 2) and sell on day 2 (price = 4), profit = 4-2 = 2.\n        Example 2:\n        Input: k = 2, prices = [3,2,6,5,0,3]\n        Output: 7\n        Explanation: Buy on day 2 (price = 2) and sell on day 3 (price = 6), profit = 6-2 = 4. Then buy on day 5 (price = 0) and sell on day 6 (price = 3), profit = 3-0 = 3.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        if not prices:\n            return 0\n        n = len(prices)\n        if k >= n//2:\n            return sum(i - j for i, j in zip(prices[1:], prices[:-1]) if i - j > 0)\n        dp = [[0] * n for _ in range(k + 1)]\n        for i in range(1, k + 1):\n            tmp = -prices[0]\n            for j in range(1, n):\n                dp[i][j] = max(dp[i][j - 1], prices[j] + tmp)\n                tmp = max(tmp, dp[i - 1][j - 1] - prices[j])\n        return dp[-1][-1]"
    },
    {
        "number": 188,
        "title": "Best Time to Buy and Sell Stock IV",
        "difficulty": 2,
        "prompt": "class Solution:\n    def maxProfit(self, k: int, prices: List[int]) -> int:\n        \"\"\"\n        You are given an integer array prices where prices[i] is the price of a given stock on the ith day, and an integer k.\n        Find the maximum profit you can achieve. You may complete at most k transactions.\n        Note: You may not engage in multiple transactions simultaneously (i.e., you must sell the stock before you buy again).\n        Example 1:\n        Input: k = 2, prices = [2,4,1]\n        Output: 2\n        Explanation: Buy on day 1 (price = 2) and sell on day 2 (price = 4), profit = 4-2 = 2.\n        Example 2:\n        Input: k = 2, prices = [3,2,6,5,0,3]\n        Output: 7\n        Explanation: Buy on day 2 (price = 2) and sell on day 3 (price = 6), profit = 6-2 = 4. Then buy on day 5 (price = 0) and sell on day 6 (price = 3), profit = 3-0 = 3.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        if not prices:\n            return 0\n        if k == 0:\n            return 0\n        if k >= len(prices) // 2:\n            return sum(i - j for i, j in zip(prices[1:], prices[:-1]) if i - j > 0)\n        dp = [[0] * len(prices) for _ in range(k + 1)]\n        for i in range(1, k + 1):\n            max_diff = -prices[0]\n            for j in range(1, len(prices)):\n                max_diff = max(max_diff, dp[i - 1][j - 1] - prices[j - 1])\n                dp[i][j] = max(dp[i][j - 1], prices[j] + max_diff)\n        return dp[-1][-1]"
    },
    {
        "number": 189,
        "title": "Rotate Array",
        "difficulty": 1,
        "prompt": "class Solution:\n    def rotate(self, nums: List[int], k: int) -> None:\n        \"\"\"\n        Do not return anything, modify nums in-place instead.\n        Given an integer array nums, rotate the array to the right by k steps, where k is non-negative.\n        Example 1:\n        Input: nums = [1,2,3,4,5,6,7], k = 3\n        Output: [5,6,7,1,2,3,4]\n        Explanation:\n        rotate 1 steps to the right: [7,1,2,3,4,5,6]\n        rotate 2 steps to the right: [6,7,1,2,3,4,5]\n        rotate 3 steps to the right: [5,6,7,1,2,3,4]\n        Example 2:\n        Input: nums = [-1,-100,3,99], k = 2\n        Output: [3,99,-1,-100]\n        Explanation: \n        rotate 1 steps to the right: [99,-1,-100,3]\n        rotate 2 steps to the right: [3,99,-1,-100]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        n = len(nums)\n        k = k % n\n        nums[:] = nums[n-k:] + nums[:n-k]\n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        "
    },
    {
        "number": 189,
        "title": "Rotate Array",
        "difficulty": 1,
        "prompt": "class Solution:\n    def rotate(self, nums: List[int], k: int) -> None:\n        \"\"\"\n        Do not return anything, modify nums in-place instead.\n        Given an integer array nums, rotate the array to the right by k steps, where k is non-negative.\n        Example 1:\n        Input: nums = [1,2,3,4,5,6,7], k = 3\n        Output: [5,6,7,1,2,3,4]\n        Explanation:\n        rotate 1 steps to the right: [7,1,2,3,4,5,6]\n        rotate 2 steps to the right: [6,7,1,2,3,4,5]\n        rotate 3 steps to the right: [5,6,7,1,2,3,4]\n        Example 2:\n        Input: nums = [-1,-100,3,99], k = 2\n        Output: [3,99,-1,-100]\n        Explanation: \n        rotate 1 steps to the right: [99,-1,-100,3]\n        rotate 2 steps to the right: [3,99,-1,-100]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        n = len(nums)\n        k = k % n\n        self.reverse(nums, 0, n - 1)\n        self.reverse(nums, 0, k - 1)\n        self.reverse(nums, k, n - 1)\n        \n    def reverse(self, nums, start, end):\n        while start < end:\n            nums[start], nums[end] = nums[end], nums[start]\n            start += 1\n            end -= 1\n<|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>"
    },
    {
        "number": 190,
        "title": "Reverse Bits",
        "difficulty": 0,
        "prompt": "class Solution:\n    def reverseBits(self, n: int) -> int:\n        \"\"\"\n        Reverse bits of a given 32 bits unsigned integer.\n        Note:\n            Note that in some languages, such as Java, there is no unsigned integer type. In this case, both input and output will be given as a signed integer type. They should not affect your implementation, as the integer's internal binary representation is the same, whether it is signed or unsigned.\n            In Java, the compiler represents the signed integers using 2's complement notation. Therefore, in Example 2 above, the input represents the signed integer -3 and the output represents the signed integer -1073741825.\n        Example 1:\n        Input: n = 00000010100101000001111010011100\n        Output:    964176192 (00111001011110000010100101000000)\n        Explanation: The input binary string 00000010100101000001111010011100 represents the unsigned integer 43261596, so return 964176192 which its binary representation is 00111001011110000010100101000000.\n        Example 2:\n        Input: n = 11111111111111111111111111111101\n        Output:   3221225471 (10111111111111111111111111111111)\n        Explanation: The input binary string 11111111111111111111111111111101 represents the unsigned integer 4294967293, so return 3221225471 which its binary representation is 10111111111111111111111111111111.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        # convert n to binary string\n        binary_string = bin(n)[2:]\n        # reverse the binary string\n        reversed_binary_string = binary_string[::-1]\n        # convert the reversed binary string to decimal\n        decimal = int(reversed_binary_string, 2)\n        return decimal"
    },
    {
        "number": 190,
        "title": "Reverse Bits",
        "difficulty": 0,
        "prompt": "class Solution:\n    def reverseBits(self, n: int) -> int:\n        \"\"\"\n        Reverse bits of a given 32 bits unsigned integer.\n        Note:\n            Note that in some languages, such as Java, there is no unsigned integer type. In this case, both input and output will be given as a signed integer type. They should not affect your implementation, as the integer's internal binary representation is the same, whether it is signed or unsigned.\n            In Java, the compiler represents the signed integers using 2's complement notation. Therefore, in Example 2 above, the input represents the signed integer -3 and the output represents the signed integer -1073741825.\n        Example 1:\n        Input: n = 00000010100101000001111010011100\n        Output:    964176192 (00111001011110000010100101000000)\n        Explanation: The input binary string 00000010100101000001111010011100 represents the unsigned integer 43261596, so return 964176192 which its binary representation is 00111001011110000010100101000000.\n        Example 2:\n        Input: n = 11111111111111111111111111111101\n        Output:   3221225471 (10111111111111111111111111111111)\n        Explanation: The input binary string 11111111111111111111111111111101 represents the unsigned integer 4294967293, so return 3221225471 which its binary representation is 10111111111111111111111111111111.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        # 32 bits unsigned integer max\n        MAX_BIT_INT = 0b11111111111111111111111111111111\n        # convert int to binary string\n        binary = bin(n)[2:]\n        # reverse string\n        reverse = binary[::-1]\n        # convert binary string to int\n        reverse_int = int(reverse, 2)\n        # check if reverse_int is larger than MAX_BIT_INT\n        if reverse_int > MAX_BIT_INT:\n            # if larger, return MAX_BIT_INT\n            return MAX_BIT_INT\n        # otherwise return reverse_int\n        return reverse_int"
    },
    {
        "number": 191,
        "title": "Number of 1 Bits",
        "difficulty": 0,
        "prompt": "class Solution:\n    def hammingWeight(self, n: int) -> int:\n        \"\"\"\n        Write a function that takes the binary representation of an unsigned integer and returns the number of '1' bits it has (also known as the Hamming weight).\n        Note:\n            Note that in some languages, such as Java, there is no unsigned integer type. In this case, the input will be given as a signed integer type. It should not affect your implementation, as the integer's internal binary representation is the same, whether it is signed or unsigned.\n            In Java, the compiler represents the signed integers using 2's complement notation. Therefore, in Example 3, the input represents the signed integer. -3.\n        Example 1:\n        Input: n = 00000000000000000000000000001011\n        Output: 3\n        Explanation: The input binary string 00000000000000000000000000001011 has a total of three '1' bits.\n        Example 2:\n        Input: n = 00000000000000000000000010000000\n        Output: 1\n        Explanation: The input binary string 00000000000000000000000010000000 has a total of one '1' bit.\n        Example 3:\n        Input: n = 11111111111111111111111111111101\n        Output: 31\n        Explanation: The input binary string 11111111111111111111111111111101 has a total of thirty one '1' bits.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        count = 0\n        while n:\n            n &= n - 1\n            count += 1\n        return count"
    },
    {
        "number": 191,
        "title": "Number of 1 Bits",
        "difficulty": 0,
        "prompt": "class Solution:\n    def hammingWeight(self, n: int) -> int:\n        \"\"\"\n        Write a function that takes the binary representation of an unsigned integer and returns the number of '1' bits it has (also known as the Hamming weight).\n        Note:\n            Note that in some languages, such as Java, there is no unsigned integer type. In this case, the input will be given as a signed integer type. It should not affect your implementation, as the integer's internal binary representation is the same, whether it is signed or unsigned.\n            In Java, the compiler represents the signed integers using 2's complement notation. Therefore, in Example 3, the input represents the signed integer. -3.\n        Example 1:\n        Input: n = 00000000000000000000000000001011\n        Output: 3\n        Explanation: The input binary string 00000000000000000000000000001011 has a total of three '1' bits.\n        Example 2:\n        Input: n = 00000000000000000000000010000000\n        Output: 1\n        Explanation: The input binary string 00000000000000000000000010000000 has a total of one '1' bit.\n        Example 3:\n        Input: n = 11111111111111111111111111111101\n        Output: 31\n        Explanation: The input binary string 11111111111111111111111111111101 has a total of thirty one '1' bits.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        # return bin(n).count('1')\n        # return bin(n & n - 1).count('1')\n        # return bin(n).count('1')\n        # return bin(n).count('1')\n        # return bin(n).count('1')\n        # return bin(n).count('1')\n        # return bin(n).count('1')\n        # return bin(n).count('1')\n        # return bin(n).count('1')\n        # return bin(n).count('1')\n        # return bin(n).count('1')\n        # return bin(n).count('1')\n        # return bin(n).count('1')\n        # return bin(n).count('1')\n        # return bin(n).count('1')\n        # return bin(n).count('1')\n        # return bin(n).count('1')\n        # return bin(n).count('1')\n        # return bin(n).count('1')\n        # return bin(n).count('1')\n        # return bin(n).count('1')\n        # return bin(n).count('1')\n        # return bin(n).count('1')\n        # return bin(n).count('1')\n        # return bin(n).count"
    },
    {
        "number": 198,
        "title": "House Robber",
        "difficulty": 1,
        "prompt": "class Solution:\n    def rob(self, nums: List[int]) -> int:\n        \"\"\"\n        You are a professional robber planning to rob houses along a street. Each house has a certain amount of money stashed, the only constraint stopping you from robbing each of them is that adjacent houses have security systems connected and it will automatically contact the police if two adjacent houses were broken into on the same night.\n        Given an integer array nums representing the amount of money of each house, return the maximum amount of money you can rob tonight without alerting the police.\n        Example 1:\n        Input: nums = [1,2,3,1]\n        Output: 4\n        Explanation: Rob house 1 (money = 1) and then rob house 3 (money = 3).\n        Total amount you can rob = 1 + 3 = 4.\n        Example 2:\n        Input: nums = [2,7,9,3,1]\n        Output: 12\n        Explanation: Rob house 1 (money = 2), rob house 3 (money = 9) and rob house 5 (money = 1).\n        Total amount you can rob = 2 + 9 + 1 = 12.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        if not nums:\n            return 0\n        if len(nums) == 1:\n            return nums[0]\n        if len(nums) == 2:\n            return max(nums[0], nums[1])\n        dp = [0] * len(nums)\n        dp[0] = nums[0]\n        dp[1] = max(nums[0], nums[1])\n        for i in range(2, len(nums)):\n            dp[i] = max(dp[i-1], dp[i-2] + nums[i])\n        return dp[-1]\n<|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>"
    },
    {
        "number": 198,
        "title": "House Robber",
        "difficulty": 1,
        "prompt": "class Solution:\n    def rob(self, nums: List[int]) -> int:\n        \"\"\"\n        You are a professional robber planning to rob houses along a street. Each house has a certain amount of money stashed, the only constraint stopping you from robbing each of them is that adjacent houses have security systems connected and it will automatically contact the police if two adjacent houses were broken into on the same night.\n        Given an integer array nums representing the amount of money of each house, return the maximum amount of money you can rob tonight without alerting the police.\n        Example 1:\n        Input: nums = [1,2,3,1]\n        Output: 4\n        Explanation: Rob house 1 (money = 1) and then rob house 3 (money = 3).\n        Total amount you can rob = 1 + 3 = 4.\n        Example 2:\n        Input: nums = [2,7,9,3,1]\n        Output: 12\n        Explanation: Rob house 1 (money = 2), rob house 3 (money = 9) and rob house 5 (money = 1).\n        Total amount you can rob = 2 + 9 + 1 = 12.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        if not nums:\n            return 0\n        if len(nums) == 1:\n            return nums[0]\n        if len(nums) == 2:\n            return max(nums)\n        dp = [0] * len(nums)\n        dp[0] = nums[0]\n        dp[1] = max(nums[0], nums[1])\n        for i in range(2, len(nums)):\n            dp[i] = max(dp[i-2] + nums[i], dp[i-1])\n        return dp[-1]"
    },
    {
        "number": 199,
        "title": "Binary Tree Right Side View",
        "difficulty": 1,
        "prompt": "class Solution:\n    def rightSideView(self, root: Optional[TreeNode]) -> List[int]:\n        \"\"\"\n        Given the root of a binary tree, imagine yourself standing on the right side of it, return the values of the nodes you can see ordered from top to bottom.\n        Example 1:\n        Input: root = [1,2,3,null,5,null,4]\n        Output: [1,3,4]\n        Example 2:\n        Input: root = [1,null,3]\n        Output: [1,3]\n        Example 3:\n        Input: root = []\n        Output: []\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        if not root:\n            return []\n        queue = [root]\n        res = []\n        while queue:\n            res.append(queue[-1].val)\n            for _ in range(len(queue)):\n                node = queue.pop(0)\n                if node.left:\n                    queue.append(node.left)\n                if node.right:\n                    queue.append(node.right)\n        return res\n<|endoftext|>"
    },
    {
        "number": 199,
        "title": "Binary Tree Right Side View",
        "difficulty": 1,
        "prompt": "class Solution:\n    def rightSideView(self, root: Optional[TreeNode]) -> List[int]:\n        \"\"\"\n        Given the root of a binary tree, imagine yourself standing on the right side of it, return the values of the nodes you can see ordered from top to bottom.\n        Example 1:\n        Input: root = [1,2,3,null,5,null,4]\n        Output: [1,3,4]\n        Example 2:\n        Input: root = [1,null,3]\n        Output: [1,3]\n        Example 3:\n        Input: root = []\n        Output: []\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        if not root:\n            return []\n        queue = [root]\n        res = []\n        while queue:\n            res.append(queue[-1].val)\n            temp = []\n            for node in queue:\n                if node.left:\n                    temp.append(node.left)\n                if node.right:\n                    temp.append(node.right)\n            queue = temp\n        return res\n<|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>"
    },
    {
        "number": 200,
        "title": "Number of Islands",
        "difficulty": 1,
        "prompt": "class Solution:\n    def numIslands(self, grid: List[List[str]]) -> int:\n        \"\"\"\n        Given an m x n 2D binary grid grid which represents a map of '1's (land) and '0's (water), return the number of islands.\n        An island is surrounded by water and is formed by connecting adjacent lands horizontally or vertically. You may assume all four edges of the grid are all surrounded by water.\n        Example 1:\n        Input: grid = [\n          [\"1\",\"1\",\"1\",\"1\",\"0\"],\n          [\"1\",\"1\",\"0\",\"1\",\"0\"],\n          [\"1\",\"1\",\"0\",\"0\",\"0\"],\n          [\"0\",\"0\",\"0\",\"0\",\"0\"]\n        ]\n        Output: 1\n        Example 2:\n        Input: grid = [\n          [\"1\",\"1\",\"0\",\"0\",\"0\"],\n          [\"1\",\"1\",\"0\",\"0\",\"0\"],\n          [\"0\",\"0\",\"1\",\"0\",\"0\"],\n          [\"0\",\"0\",\"0\",\"1\",\"1\"]\n        ]\n        Output: 3\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        if not grid:\n            return 0\n        \n        m, n = len(grid), len(grid[0])\n        \n        def dfs(i, j):\n            if i < 0 or i >= m or j < 0 or j >= n or grid[i][j]!= '1':\n                return\n            grid[i][j] = '0'\n            dfs(i+1, j)\n            dfs(i-1, j)\n            dfs(i, j+1)\n            dfs(i, j-1)\n        \n        count = 0\n        for i in range(m):\n            for j in range(n):\n                if grid[i][j] == '1':\n                    dfs(i, j)\n                    count += 1\n        return count\n    \n    def numIslands2(self, grid: List[List[str]]) -> int:\n        \"\"\"\n        Given an m x n 2D binary grid grid which represents a map of '1's (land) and '0's (water), return the number of islands.\n        An island is surrounded by water and is formed by connecting adjacent lands horizontally or vertically. You may assume all four edges of the grid are all surrounded by water.\n        Example 1:\n        Input: grid = [\n          [\"1\",\"1\",\"1"
    },
    {
        "number": 200,
        "title": "Number of Islands",
        "difficulty": 1,
        "prompt": "class Solution:\n    def numIslands(self, grid: List[List[str]]) -> int:\n        \"\"\"\n        Given an m x n 2D binary grid grid which represents a map of '1's (land) and '0's (water), return the number of islands.\n        An island is surrounded by water and is formed by connecting adjacent lands horizontally or vertically. You may assume all four edges of the grid are all surrounded by water.\n        Example 1:\n        Input: grid = [\n          [\"1\",\"1\",\"1\",\"1\",\"0\"],\n          [\"1\",\"1\",\"0\",\"1\",\"0\"],\n          [\"1\",\"1\",\"0\",\"0\",\"0\"],\n          [\"0\",\"0\",\"0\",\"0\",\"0\"]\n        ]\n        Output: 1\n        Example 2:\n        Input: grid = [\n          [\"1\",\"1\",\"0\",\"0\",\"0\"],\n          [\"1\",\"1\",\"0\",\"0\",\"0\"],\n          [\"0\",\"0\",\"1\",\"0\",\"0\"],\n          [\"0\",\"0\",\"0\",\"1\",\"1\"]\n        ]\n        Output: 3\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        if not grid:\n            return 0\n        \n        def dfs(grid, i, j):\n            if i < 0 or j < 0 or i >= len(grid) or j >= len(grid[0]) or grid[i][j]!= '1':\n                return\n            grid[i][j] = '0'\n            dfs(grid, i+1, j)\n            dfs(grid, i-1, j)\n            dfs(grid, i, j+1)\n            dfs(grid, i, j-1)\n        \n        count = 0\n        for i in range(len(grid)):\n            for j in range(len(grid[0])):\n                if grid[i][j] == '1':\n                    dfs(grid, i, j)\n                    count += 1\n        return count\n    \n    def numIslands_2(self, grid: List[List[str]]) -> int:\n        \"\"\"\n        Given an m x n 2D binary grid grid which represents a map of '1's (land) and '0's (water), return the number of islands.\n        An island is surrounded by water and is formed by connecting adjacent lands horizontally or vertically. You may assume all four edges of the grid are all surrounded by water.\n        Example 1:\n        Input:"
    },
    {
        "number": 201,
        "title": "Bitwise AND of Numbers Range",
        "difficulty": 1,
        "prompt": "class Solution:\n    def rangeBitwiseAnd(self, left: int, right: int) -> int:\n        \"\"\"\n        Given two integers left and right that represent the range [left, right], return the bitwise AND of all numbers in this range, inclusive.\n        Example 1:\n        Input: left = 5, right = 7\n        Output: 4\n        Example 2:\n        Input: left = 0, right = 0\n        Output: 0\n        Example 3:\n        Input: left = 1, right = 2147483647\n        Output: 0\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        # \u5148\u628aleft\u548cright\u8f6c\u5316\u4e3a\u4e8c\u8fdb\u5236\uff0c\u7136\u540e\u628a\u4e8c\u8fdb\u5236\u7684\u5de6\u8fb9\u7b2c\u4e00\u4f4d\u548c\u53f3\u8fb9\u7b2c\u4e00\u4f4d\u8fdb\u884c\u4e0e\u8fd0\u7b97\uff0c\u7136\u540e\u628a\u7ed3\u679c\u8f6c\u5316\u4e3a\u5341\u8fdb\u5236\n        # \u5982\u679cleft\u548cright\u7684\u4e8c\u8fdb\u5236\u6700\u9ad8\u4f4d\u76f8\u540c\uff0c\u90a3\u4e48\u8fd9\u4e2a\u4e8c\u8fdb\u5236\u6700\u9ad8\u4f4d\u5c31\u662f1\uff0c\u5982\u679c\u4e0d\u540c\uff0c\u90a3\u4e48\u8fd9\u4e2a\u4e8c\u8fdb\u5236\u6700\u9ad8\u4f4d\u5c31\u662f0\n        # \u5982\u679cleft\u548cright\u7684\u4e8c\u8fdb\u5236\u6700\u9ad8\u4f4d\u76f8\u540c\uff0c\u90a3\u4e48\u8fd9\u4e2a\u4e8c\u8fdb\u5236\u6700\u9ad8\u4f4d\u5c31\u662f1\uff0c\u5982\u679c\u4e0d\u540c\uff0c\u90a3\u4e48\u8fd9\u4e2a\u4e8c\u8fdb\u5236\u6700\u9ad8\u4f4d"
    },
    {
        "number": 201,
        "title": "Bitwise AND of Numbers Range",
        "difficulty": 1,
        "prompt": "class Solution:\n    def rangeBitwiseAnd(self, left: int, right: int) -> int:\n        \"\"\"\n        Given two integers left and right that represent the range [left, right], return the bitwise AND of all numbers in this range, inclusive.\n        Example 1:\n        Input: left = 5, right = 7\n        Output: 4\n        Example 2:\n        Input: left = 0, right = 0\n        Output: 0\n        Example 3:\n        Input: left = 1, right = 2147483647\n        Output: 0\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        # \u601d\u8def\uff1a\n        # \u5148\u628aleft\u548cright\u8f6c\u5316\u4e3a\u4e8c\u8fdb\u5236\uff0c\u7136\u540e\u628a\u4e8c\u8fdb\u5236\u7684\u5de6\u8fb9\u548c\u53f3\u8fb9\u76840\u90fd\u53bb\u6389\uff0c\u7136\u540e\u628a\u4e8c\u8fdb\u5236\u7684\u5de6\u8fb9\u548c\u53f3\u8fb9\u76841\u90fd\u53d8\u62100\uff0c\u6700\u540e\u628a\u4e8c\u8fdb\u5236\u7684\u5de6\u8fb9\u548c\u53f3\u8fb9\u76840\u90fd\u53bb\u6389\uff0c\u6700\u540e\u628a\u4e8c\u8fdb\u5236\u7684\u5de6\u8fb9\u548c\u53f3\u8fb9\u76841\u90fd\u53d8\u62101\uff0c\u6700\u540e\u628a\u4e8c\u8fdb\u5236\u7684\u5de6\u8fb9\u548c\u53f3\u8fb9\u76840\u90fd\u53bb\u6389\uff0c\u6700\u540e\u628a\u4e8c\u8fdb\u5236\u7684\u5de6\u8fb9\u548c\u53f3\u8fb9\u76841\u90fd\u53d8\u62100\uff0c\u6700\u540e\u628a\u4e8c\u8fdb\u5236\u7684\u5de6\u8fb9\u548c\u53f3\ufffd"
    },
    {
        "number": 202,
        "title": "Happy Number",
        "difficulty": 0,
        "prompt": "class Solution:\n    def isHappy(self, n: int) -> bool:\n        \"\"\"\n        Write an algorithm to determine if a number n is happy.\n        A happy number is a number defined by the following process:\n            Starting with any positive integer, replace the number by the sum of the squares of its digits.\n            Repeat the process until the number equals 1 (where it will stay), or it loops endlessly in a cycle which does not include 1.\n            Those numbers for which this process ends in 1 are happy.\n        Return true if n is a happy number, and false if not.\n        Example 1:\n        Input: n = 19\n        Output: true\n        Explanation:\n        12 + 92 = 82\n        82 + 22 = 68\n        62 + 82 = 100\n        12 + 02 + 02 = 1\n        Example 2:\n        Input: n = 2\n        Output: false\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        # \u601d\u8def\uff1a\n        # \u5982\u679c\u4e00\u4e2a\u6570\u5b57\u80fd\u591f\u88ab\u66ff\u6362\u6210\u5b83\u7684\u6570\u5b57\u7684\u5e73\u65b9\u4e4b\u548c\uff0c\u90a3\u4e48\u5b83\u5c31\u662f\u4e00\u4e2a\u5feb\u4e50\u6570\u3002\n        # \u5982\u679c\u4e00\u4e2a\u6570\u5b57\u80fd\u591f\u88ab\u66ff\u6362\u6210\u5b83\u7684\u6570\u5b57\u7684\u5e73\u65b9\u4e4b\u548c\uff0c\u90a3\u4e48\u5b83\u5c31\u662f\u4e00\u4e2a\u5feb\u4e50\u6570\u3002\n        # \u5982\u679c\u4e00\u4e2a\u6570\u5b57\u80fd\u591f\u88ab\u66ff\u6362\u6210\u5b83\u7684\u6570\u5b57\u7684\u5e73\u65b9\u4e4b\u548c\uff0c\u90a3\u4e48\u5b83\u5c31\u662f\u4e00\u4e2a\u5feb\u4e50\u6570\u3002\n        # \u5982\u679c\u4e00\u4e2a\u6570\u5b57\u80fd\u591f\u88ab\u66ff\u6362\u6210\u5b83\u7684\u6570\u5b57\u7684\u5e73\u65b9\u4e4b\u548c\uff0c\u90a3\u4e48\u5b83\u5c31\u662f\u4e00\u4e2a\u5feb\u4e50\u6570\u3002\n        # \u5982\u679c\u4e00\u4e2a\ufffd"
    },
    {
        "number": 202,
        "title": "Happy Number",
        "difficulty": 0,
        "prompt": "class Solution:\n    def isHappy(self, n: int) -> bool:\n        \"\"\"\n        Write an algorithm to determine if a number n is happy.\n        A happy number is a number defined by the following process:\n            Starting with any positive integer, replace the number by the sum of the squares of its digits.\n            Repeat the process until the number equals 1 (where it will stay), or it loops endlessly in a cycle which does not include 1.\n            Those numbers for which this process ends in 1 are happy.\n        Return true if n is a happy number, and false if not.\n        Example 1:\n        Input: n = 19\n        Output: true\n        Explanation:\n        12 + 92 = 82\n        82 + 22 = 68\n        62 + 82 = 100\n        12 + 02 + 02 = 1\n        Example 2:\n        Input: n = 2\n        Output: false\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        # \u5224\u65ad\u662f\u5426\u662fhappy number\n        # \u5982\u679c\u662fhappy number\uff0c\u5219\u5fc5\u7136\u662f1\uff0c\u56e0\u4e3a\u4ece1\u5f00\u59cb\uff0c\u6bcf\u6b21\u90fd\u53ef\u4ee5\u8ba1\u7b97\u51fa\u65b0\u7684\u6570\u5b57\n        # \u5982\u679c\u4e0d\u662fhappy number\uff0c\u5219\u5fc5\u7136\u662fcycle\uff0c\u56e0\u4e3a\u4ece1\u5f00\u59cb\uff0c\u6bcf\u6b21\u90fd\u53ef\u4ee5\u8ba1\u7b97\u51fa\u65b0\u7684\u6570\u5b57\n        # \u5982\u679c\u662fcycle\uff0c\u5219\u5fc5\u7136\u4f1a\u6709\u4e00\u4e2a\u6570\u5b57\u91cd\u590d\u51fa\u73b0\uff0c\u56e0\u4e3a\u4ece1\u5f00\u59cb\uff0c\u6bcf\u6b21\u90fd\u53ef\u4ee5\u8ba1\u7b97\u51fa\u65b0\u7684\u6570\u5b57\n        # \u5982\u679c\u662fcycle\uff0c\u5219\u5fc5\u7136\u4f1a\u6709\u4e00\u4e2a\u6570\u5b57\u91cd\u590d\u51fa\u73b0\uff0c\u56e0\u4e3a\u4ece1\u5f00\u59cb\uff0c\u6bcf\u6b21\u90fd\u53ef\ufffd"
    },
    {
        "number": 203,
        "title": "Remove Linked List Elements",
        "difficulty": 0,
        "prompt": "class Solution:\n    def removeElements(self, head: Optional[ListNode], val: int) -> Optional[ListNode]:\n        \"\"\"\n        Given the head of a linked list and an integer val, remove all the nodes of the linked list that has Node.val == val, and return the new head.\n        Example 1:\n        Input: head = [1,2,6,3,4,5,6], val = 6\n        Output: [1,2,3,4,5]\n        Example 2:\n        Input: head = [], val = 1\n        Output: []\n        Example 3:\n        Input: head = [7,7,7,7], val = 7\n        Output: []\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        if not head:\n            return head\n        dummy = ListNode(0, head)\n        curr = dummy\n        while curr.next:\n            if curr.next.val == val:\n                curr.next = curr.next.next\n            else:\n                curr = curr.next\n        return dummy.next"
    },
    {
        "number": 203,
        "title": "Remove Linked List Elements",
        "difficulty": 0,
        "prompt": "class Solution:\n    def removeElements(self, head: Optional[ListNode], val: int) -> Optional[ListNode]:\n        \"\"\"\n        Given the head of a linked list and an integer val, remove all the nodes of the linked list that has Node.val == val, and return the new head.\n        Example 1:\n        Input: head = [1,2,6,3,4,5,6], val = 6\n        Output: [1,2,3,4,5]\n        Example 2:\n        Input: head = [], val = 1\n        Output: []\n        Example 3:\n        Input: head = [7,7,7,7], val = 7\n        Output: []\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        if not head:\n            return None\n        \n        dummy = ListNode(0, head)\n        curr = dummy\n        while curr.next:\n            if curr.next.val == val:\n                curr.next = curr.next.next\n            else:\n                curr = curr.next\n        return dummy.next\n<|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>"
    },
    {
        "number": 204,
        "title": "Count Primes",
        "difficulty": 1,
        "prompt": "class Solution:\n    def countPrimes(self, n: int) -> int:\n        \"\"\"\n        Given an integer n, return the number of prime numbers that are strictly less than n.\n        Example 1:\n        Input: n = 10\n        Output: 4\n        Explanation: There are 4 prime numbers less than 10, they are 2, 3, 5, 7.\n        Example 2:\n        Input: n = 0\n        Output: 0\n        Example 3:\n        Input: n = 1\n        Output: 0\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        if n < 2:\n            return 0\n        primes = [True] * n\n        primes[0] = primes[1] = False\n        for i in range(2, int(n ** 0.5) + 1):\n            if primes[i]:\n                for j in range(i * i, n, i):\n                    primes[j] = False\n        return sum(primes)"
    },
    {
        "number": 204,
        "title": "Count Primes",
        "difficulty": 1,
        "prompt": "class Solution:\n    def countPrimes(self, n: int) -> int:\n        \"\"\"\n        Given an integer n, return the number of prime numbers that are strictly less than n.\n        Example 1:\n        Input: n = 10\n        Output: 4\n        Explanation: There are 4 prime numbers less than 10, they are 2, 3, 5, 7.\n        Example 2:\n        Input: n = 0\n        Output: 0\n        Example 3:\n        Input: n = 1\n        Output: 0\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        if n < 2:\n            return 0\n        is_prime = [True] * n\n        is_prime[0] = False\n        is_prime[1] = False\n        for i in range(2, int(n ** 0.5) + 1):\n            if is_prime[i]:\n                for j in range(i * i, n, i):\n                    is_prime[j] = False\n        return sum(is_prime)"
    },
    {
        "number": 205,
        "title": "Isomorphic Strings",
        "difficulty": 0,
        "prompt": "class Solution:\n    def isIsomorphic(self, s: str, t: str) -> bool:\n        \"\"\"\n        Given two strings s and t, determine if they are isomorphic.\n        Two strings s and t are isomorphic if the characters in s can be replaced to get t.\n        All occurrences of a character must be replaced with another character while preserving the order of characters. No two characters may map to the same character, but a character may map to itself.\n        Example 1:\n        Input: s = \"egg\", t = \"add\"\n        Output: true\n        Example 2:\n        Input: s = \"foo\", t = \"bar\"\n        Output: false\n        Example 3:\n        Input: s = \"paper\", t = \"title\"\n        Output: true\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        if len(s)!= len(t):\n            return False\n        s_map = {}\n        t_map = {}\n        for i in range(len(s)):\n            if s[i] not in s_map:\n                s_map[s[i]] = t[i]\n            else:\n                if s_map[s[i]]!= t[i]:\n                    return False\n            if t[i] not in t_map:\n                t_map[t[i]] = s[i]\n            else:\n                if t_map[t[i]]!= s[i]:\n                    return False\n        return True"
    },
    {
        "number": 205,
        "title": "Isomorphic Strings",
        "difficulty": 0,
        "prompt": "class Solution:\n    def isIsomorphic(self, s: str, t: str) -> bool:\n        \"\"\"\n        Given two strings s and t, determine if they are isomorphic.\n        Two strings s and t are isomorphic if the characters in s can be replaced to get t.\n        All occurrences of a character must be replaced with another character while preserving the order of characters. No two characters may map to the same character, but a character may map to itself.\n        Example 1:\n        Input: s = \"egg\", t = \"add\"\n        Output: true\n        Example 2:\n        Input: s = \"foo\", t = \"bar\"\n        Output: false\n        Example 3:\n        Input: s = \"paper\", t = \"title\"\n        Output: true\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        if len(s)!= len(t):\n            return False\n        \n        d = {}\n        for i in range(len(s)):\n            if s[i] not in d:\n                if t[i] in d.values():\n                    return False\n                d[s[i]] = t[i]\n            else:\n                if d[s[i]]!= t[i]:\n                    return False\n        return True\n<|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>"
    },
    {
        "number": 206,
        "title": "Reverse Linked List",
        "difficulty": 0,
        "prompt": "class Solution:\n    def reverseList(self, head: Optional[ListNode]) -> Optional[ListNode]:\n        \"\"\"\n        Given the head of a singly linked list, reverse the list, and return the reversed list.\n        Example 1:\n        Input: head = [1,2,3,4,5]\n        Output: [5,4,3,2,1]\n        Example 2:\n        Input: head = [1,2]\n        Output: [2,1]\n        Example 3:\n        Input: head = []\n        Output: []\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        if not head:\n            return head\n        \n        prev = None\n        curr = head\n        while curr:\n            next_node = curr.next\n            curr.next = prev\n            prev = curr\n            curr = next_node\n        return prev\n    \n    def reverseList_recursive(self, head: Optional[ListNode]) -> Optional[ListNode]:\n        \"\"\"\n        Given the head of a singly linked list, reverse the list, and return the reversed list.\n        Example 1:\n        Input: head = [1,2,3,4,5]\n        Output: [5,4,3,2,1]\n        Example 2:\n        Input: head = [1,2]\n        Output: [2,1]\n        Example 3:\n        Input: head = []\n        Output: []\n        \"\"\"\n        if not head or not head.next:\n            return head\n        \n        new_head = self.reverseList_recursive(head.next)\n        head.next.next = head\n        head.next = None\n        return new_head\n    \n    def reverseList_iterative(self, head: Optional[ListNode]) -> Optional[ListNode]:\n        \"\"\"\n        Given the head of a singly linked list, reverse the list, and"
    },
    {
        "number": 206,
        "title": "Reverse Linked List",
        "difficulty": 0,
        "prompt": "class Solution:\n    def reverseList(self, head: Optional[ListNode]) -> Optional[ListNode]:\n        \"\"\"\n        Given the head of a singly linked list, reverse the list, and return the reversed list.\n        Example 1:\n        Input: head = [1,2,3,4,5]\n        Output: [5,4,3,2,1]\n        Example 2:\n        Input: head = [1,2]\n        Output: [2,1]\n        Example 3:\n        Input: head = []\n        Output: []\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        if not head:\n            return head\n        \n        # 1->2->3->4->5\n        # 5->4->3->2->1\n        # 1->2->3->4->5\n        # 5->4->3->2->1\n        # 1->2->3->4->5\n        # 5->4->3->2->1\n        # 1->2->3->4->5\n        # 5->4->3->2->1\n        # 1->2->3->4->5\n        # 5->4->3->2->1\n        # 1->2->3->4->5\n        # 5->4->3->2->1\n        # 1->2->3->4->5\n        # 5->4->3->2->1\n        # 1->2->3->4->5\n        # 5->4->3->2->1\n        # 1->2->3->4->5\n        # 5->4->3->2->1\n        # 1->2->3->4->5\n        # 5->4->3->2->1\n        # 1->2->3->4->5\n        # 5->4->3->2->1\n        # 1->2->3->4->5\n        # 5->4->3->2->1\n"
    },
    {
        "number": 207,
        "title": "Course Schedule",
        "difficulty": 1,
        "prompt": "class Solution:\n    def canFinish(self, numCourses: int, prerequisites: List[List[int]]) -> bool:\n        \"\"\"\n        There are a total of numCourses courses you have to take, labeled from 0 to numCourses - 1. You are given an array prerequisites where prerequisites[i] = [ai, bi] indicates that you must take course bi first if you want to take course ai.\n            For example, the pair [0, 1], indicates that to take course 0 you have to first take course 1.\n        Return true if you can finish all courses. Otherwise, return false.\n        Example 1:\n        Input: numCourses = 2, prerequisites = [[1,0]]\n        Output: true\n        Explanation: There are a total of 2 courses to take. \n        To take course 1 you should have finished course 0. So it is possible.\n        Example 2:\n        Input: numCourses = 2, prerequisites = [[1,0],[0,1]]\n        Output: false\n        Explanation: There are a total of 2 courses to take. \n        To take course 1 you should have finished course 0, and to take course 0 you should also have finished course 1. So it is impossible.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        # build graph\n        graph = {}\n        for i in range(numCourses):\n            graph[i] = []\n        for pre in prerequisites:\n            graph[pre[1]].append(pre[0])\n        # print(graph)\n        # bfs\n        visited = set()\n        queue = []\n        for i in range(numCourses):\n            if i not in visited:\n                queue.append(i)\n                while queue:\n                    node = queue.pop(0)\n                    visited.add(node)\n                    for neighbor in graph[node]:\n                        if neighbor not in visited:\n                            queue.append(neighbor)\n        # print(visited)\n        return len(visited) == numCourses"
    },
    {
        "number": 207,
        "title": "Course Schedule",
        "difficulty": 1,
        "prompt": "class Solution:\n    def canFinish(self, numCourses: int, prerequisites: List[List[int]]) -> bool:\n        \"\"\"\n        There are a total of numCourses courses you have to take, labeled from 0 to numCourses - 1. You are given an array prerequisites where prerequisites[i] = [ai, bi] indicates that you must take course bi first if you want to take course ai.\n            For example, the pair [0, 1], indicates that to take course 0 you have to first take course 1.\n        Return true if you can finish all courses. Otherwise, return false.\n        Example 1:\n        Input: numCourses = 2, prerequisites = [[1,0]]\n        Output: true\n        Explanation: There are a total of 2 courses to take. \n        To take course 1 you should have finished course 0. So it is possible.\n        Example 2:\n        Input: numCourses = 2, prerequisites = [[1,0],[0,1]]\n        Output: false\n        Explanation: There are a total of 2 courses to take. \n        To take course 1 you should have finished course 0, and to take course 0 you should also have finished course 1. So it is impossible.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        # build graph\n        graph = {}\n        for i in range(numCourses):\n            graph[i] = []\n        for pair in prerequisites:\n            graph[pair[0]].append(pair[1])\n        # print(graph)\n        # bfs\n        visited = set()\n        queue = []\n        for i in range(numCourses):\n            if i not in visited:\n                queue.append(i)\n                while queue:\n                    cur = queue.pop(0)\n                    visited.add(cur)\n                    for j in graph[cur]:\n                        if j not in visited:\n                            queue.append(j)\n        # print(visited)\n        return len(visited) == numCourses"
    },
    {
        "number": 208,
        "title": "Implement Trie (Prefix Tree)",
        "difficulty": 1,
        "prompt": "class Trie:\n    def __init__(self):\n    def insert(self, word: str) -> None:\n    def search(self, word: str) -> bool:\n    def startsWith(self, prefix: str) -> bool:\n        \"\"\"\n        A trie (pronounced as \"try\") or prefix tree is a tree data structure used to efficiently store and retrieve keys in a dataset of strings. There are various applications of this data structure, such as autocomplete and spellchecker.\n        Implement the Trie class:\n            Trie() Initializes the trie object.\n            void insert(String word) Inserts the string word into the trie.\n            boolean search(String word) Returns true if the string word is in the trie (i.e., was inserted before), and false otherwise.\n            boolean startsWith(String prefix) Returns true if there is a previously inserted string word that has the prefix prefix, and false otherwise.\n        Example 1:\n        Input\n        [\"Trie\", \"insert\", \"search\", \"search\", \"startsWith\", \"insert\", \"search\"]\n        [[], [\"apple\"], [\"apple\"], [\"app\"], [\"app\"], [\"app\"], [\"app\"]]\n        Output\n        [null, null, true, false, true, null, true]\n        Explanation\n        Trie trie = new Trie();\n        trie.insert(\"apple\");\n        trie.search(\"apple\");   // return True\n        trie.search(\"app\");     // return False\n        trie.startsWith(\"app\"); // return True\n        trie.insert(\"app\");\n        trie.search(\"app\");     // return True\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        self.root = {}\n        self.end_of_word = \"#\"\n        \n        for word in words:\n            self.insert(word)\n        \n    def insert(self, word: str) -> None:\n        node = self.root\n        for char in word:\n            if char not in node:\n                node[char] = {}\n            node = node[char]\n        node[self.end_of_word] = self.end_of_word\n    \n    def search(self, word: str) -> bool:\n        node = self.root\n        for char in word:\n            if char not in node:\n                return False\n            node = node[char]\n        return self.end_of_word in node\n    \n    def startsWith(self, prefix: str) -> bool:\n        node = self.root\n        for char in prefix:\n            if char not in node:\n                return False\n            node = node[char]\n        return True"
    },
    {
        "number": 208,
        "title": "Implement Trie (Prefix Tree)",
        "difficulty": 1,
        "prompt": "class Trie:\n    def __init__(self):\n    def insert(self, word: str) -> None:\n    def search(self, word: str) -> bool:\n    def startsWith(self, prefix: str) -> bool:\n        \"\"\"\n        A trie (pronounced as \"try\") or prefix tree is a tree data structure used to efficiently store and retrieve keys in a dataset of strings. There are various applications of this data structure, such as autocomplete and spellchecker.\n        Implement the Trie class:\n            Trie() Initializes the trie object.\n            void insert(String word) Inserts the string word into the trie.\n            boolean search(String word) Returns true if the string word is in the trie (i.e., was inserted before), and false otherwise.\n            boolean startsWith(String prefix) Returns true if there is a previously inserted string word that has the prefix prefix, and false otherwise.\n        Example 1:\n        Input\n        [\"Trie\", \"insert\", \"search\", \"search\", \"startsWith\", \"insert\", \"search\"]\n        [[], [\"apple\"], [\"apple\"], [\"app\"], [\"app\"], [\"app\"], [\"app\"]]\n        Output\n        [null, null, true, false, true, null, true]\n        Explanation\n        Trie trie = new Trie();\n        trie.insert(\"apple\");\n        trie.search(\"apple\");   // return True\n        trie.search(\"app\");     // return False\n        trie.startsWith(\"app\"); // return True\n        trie.insert(\"app\");\n        trie.search(\"app\");     // return True\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        self.trie = {}\n        self.end = '*'\n        self.insert(word)\n        return self.search(word)\n    def insert(self, word):\n        trie = self.trie\n        for char in word:\n            if char not in trie:\n                trie[char] = {}\n            trie = trie[char]\n        trie[self.end] = True\n    def search(self, word):\n        trie = self.trie\n        for char in word:\n            if char not in trie:\n                return False\n            trie = trie[char]\n        return self.end in trie\n    def startsWith(self, prefix):\n        trie = self.trie\n        for char in prefix:\n            if char not in trie:\n                return False\n            trie = trie[char]\n        return True"
    },
    {
        "number": 209,
        "title": "Minimum Size Subarray Sum",
        "difficulty": 1,
        "prompt": "class Solution:\n    def minSubArrayLen(self, target: int, nums: List[int]) -> int:\n        \"\"\"\n        Given an array of positive integers nums and a positive integer target, return the minimal length of a subarray whose sum is greater than or equal to target. If there is no such subarray, return 0 instead.\n        Example 1:\n        Input: target = 7, nums = [2,3,1,2,4,3]\n        Output: 2\n        Explanation: The subarray [4,3] has the minimal length under the problem constraint.\n        Example 2:\n        Input: target = 4, nums = [1,4,4]\n        Output: 1\n        Example 3:\n        Input: target = 11, nums = [1,1,1,1,1,1,1,1]\n        Output: 0\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        # sliding window\n        # O(n)\n        # O(1)\n        # left, right = 0, 0\n        # res = float('inf')\n        # sum = 0\n        # while right < len(nums):\n        #     sum += nums[right]\n        #     while sum >= target:\n        #         res = min(res, right - left + 1)\n        #         sum -= nums[left]\n        #         left += 1\n        #     right += 1\n        # return res if res!= float('inf') else 0"
    },
    {
        "number": 209,
        "title": "Minimum Size Subarray Sum",
        "difficulty": 1,
        "prompt": "class Solution:\n    def minSubArrayLen(self, target: int, nums: List[int]) -> int:\n        \"\"\"\n        Given an array of positive integers nums and a positive integer target, return the minimal length of a subarray whose sum is greater than or equal to target. If there is no such subarray, return 0 instead.\n        Example 1:\n        Input: target = 7, nums = [2,3,1,2,4,3]\n        Output: 2\n        Explanation: The subarray [4,3] has the minimal length under the problem constraint.\n        Example 2:\n        Input: target = 4, nums = [1,4,4]\n        Output: 1\n        Example 3:\n        Input: target = 11, nums = [1,1,1,1,1,1,1,1]\n        Output: 0\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        # \u601d\u8def\uff1a\u6ed1\u52a8\u7a97\u53e3\n        # \u5148\u627e\u5230\u7a97\u53e3\u4e2d\u7684\u6700\u5c0f\u503c\uff0c\u7136\u540e\u66f4\u65b0\u7a97\u53e3\u5927\u5c0f\uff0c\u76f4\u5230\u7a97\u53e3\u5927\u5c0f\u7b49\u4e8e\u6570\u7ec4\u957f\u5ea6\n        # \u5982\u679c\u7a97\u53e3\u5927\u5c0f\u7b49\u4e8e\u6570\u7ec4\u957f\u5ea6\uff0c\u8bf4\u660e\u6ca1\u6709\u7a97\u53e3\u4e2d\u7684\u503c\u5927\u4e8etarget\uff0c\u5219\u8fd4\u56de0\n        # \u5426\u5219\u8fd4\u56de\u7a97\u53e3\u5927\u5c0f\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        left, right = 0, 0\n        window_sum = 0\n        min_len = float('inf')\n        while right < len(nums):\n            window_sum += nums[right]\n            right += 1\n            while window_sum >= target:\n                min_len = min(min_len, right -"
    },
    {
        "number": 210,
        "title": "Course Schedule II",
        "difficulty": 1,
        "prompt": "class Solution:\n    def findOrder(self, numCourses: int, prerequisites: List[List[int]]) -> List[int]:\n        \"\"\"\n        There are a total of numCourses courses you have to take, labeled from 0 to numCourses - 1. You are given an array prerequisites where prerequisites[i] = [ai, bi] indicates that you must take course bi first if you want to take course ai.\n            For example, the pair [0, 1], indicates that to take course 0 you have to first take course 1.\n        Return the ordering of courses you should take to finish all courses. If there are many valid answers, return any of them. If it is impossible to finish all courses, return an empty array.\n        Example 1:\n        Input: numCourses = 2, prerequisites = [[1,0]]\n        Output: [0,1]\n        Explanation: There are a total of 2 courses to take. To take course 1 you should have finished course 0. So the correct course order is [0,1].\n        Example 2:\n        Input: numCourses = 4, prerequisites = [[1,0],[2,0],[3,1],[3,2]]\n        Output: [0,2,1,3]\n        Explanation: There are a total of 4 courses to take. To take course 3 you should have finished both courses 1 and 2. Both courses 1 and 2 should be taken after you finished course 0.\n        So one correct course order is [0,1,2,3]. Another correct ordering is [0,2,1,3].\n        Example 3:\n        Input: numCourses = 1, prerequisites = []\n        Output: [0]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        # build graph\n        graph = {i: [] for i in range(numCourses)}\n        for prereq in prerequisites:\n            graph[prereq[1]].append(prereq[0])"
    },
    {
        "number": 210,
        "title": "Course Schedule II",
        "difficulty": 1,
        "prompt": "class Solution:\n    def findOrder(self, numCourses: int, prerequisites: List[List[int]]) -> List[int]:\n        \"\"\"\n        There are a total of numCourses courses you have to take, labeled from 0 to numCourses - 1. You are given an array prerequisites where prerequisites[i] = [ai, bi] indicates that you must take course bi first if you want to take course ai.\n            For example, the pair [0, 1], indicates that to take course 0 you have to first take course 1.\n        Return the ordering of courses you should take to finish all courses. If there are many valid answers, return any of them. If it is impossible to finish all courses, return an empty array.\n        Example 1:\n        Input: numCourses = 2, prerequisites = [[1,0]]\n        Output: [0,1]\n        Explanation: There are a total of 2 courses to take. To take course 1 you should have finished course 0. So the correct course order is [0,1].\n        Example 2:\n        Input: numCourses = 4, prerequisites = [[1,0],[2,0],[3,1],[3,2]]\n        Output: [0,2,1,3]\n        Explanation: There are a total of 4 courses to take. To take course 3 you should have finished both courses 1 and 2. Both courses 1 and 2 should be taken after you finished course 0.\n        So one correct course order is [0,1,2,3]. Another correct ordering is [0,2,1,3].\n        Example 3:\n        Input: numCourses = 1, prerequisites = []\n        Output: [0]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        # build graph\n        graph = {}\n        for i in range(numCourses):\n            graph[i] = []\n        for pre in prerequisites:\n            graph[pre[1]].append(pre[0])\n        # print(graph)\n        # dfs\n        visited = set()\n        stack = []\n        for i in range(numCourses):\n            if i not in visited:\n                self.dfs(i, graph, visited, stack)\n        return stack"
    },
    {
        "number": 211,
        "title": "Design Add and Search Words Data Structure",
        "difficulty": 1,
        "prompt": "class WordDictionary:\n    def __init__(self):\n    def addWord(self, word: str) -> None:\n    def search(self, word: str) -> bool:\n        \"\"\"\n        Design a data structure that supports adding new words and finding if a string matches any previously added string.\n        Implement the WordDictionary class:\n            WordDictionary() Initializes the object.\n            void addWord(word) Adds word to the data structure, it can be matched later.\n            bool search(word) Returns true if there is any string in the data structure that matches word or false otherwise. word may contain dots '.' where dots can be matched with any letter.\n        Example:\n        Input\n        [\"WordDictionary\",\"addWord\",\"addWord\",\"addWord\",\"search\",\"search\",\"search\",\"search\"]\n        [[],[\"bad\"],[\"dad\"],[\"mad\"],[\"pad\"],[\"bad\"],[\".ad\"],[\"b..\"]]\n        Output\n        [null,null,null,null,false,true,true,true]\n        Explanation\n        WordDictionary wordDictionary = new WordDictionary();\n        wordDictionary.addWord(\"bad\");\n        wordDictionary.addWord(\"dad\");\n        wordDictionary.addWord(\"mad\");\n        wordDictionary.search(\"pad\"); // return False\n        wordDictionary.search(\"bad\"); // return True\n        wordDictionary.search(\".ad\"); // return True\n        wordDictionary.search(\"b..\"); // return True\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        self.d = {}\n        self.word = word\n        for i in range(len(self.word)):\n            if self.word[i] not in self.d:\n                self.d[self.word[i]] = [i]\n            else:\n                self.d[self.word[i]].append(i)\n        print(self.d)"
    },
    {
        "number": 211,
        "title": "Design Add and Search Words Data Structure",
        "difficulty": 1,
        "prompt": "class WordDictionary:\n    def __init__(self):\n    def addWord(self, word: str) -> None:\n    def search(self, word: str) -> bool:\n        \"\"\"\n        Design a data structure that supports adding new words and finding if a string matches any previously added string.\n        Implement the WordDictionary class:\n            WordDictionary() Initializes the object.\n            void addWord(word) Adds word to the data structure, it can be matched later.\n            bool search(word) Returns true if there is any string in the data structure that matches word or false otherwise. word may contain dots '.' where dots can be matched with any letter.\n        Example:\n        Input\n        [\"WordDictionary\",\"addWord\",\"addWord\",\"addWord\",\"search\",\"search\",\"search\",\"search\"]\n        [[],[\"bad\"],[\"dad\"],[\"mad\"],[\"pad\"],[\"bad\"],[\".ad\"],[\"b..\"]]\n        Output\n        [null,null,null,null,false,true,true,true]\n        Explanation\n        WordDictionary wordDictionary = new WordDictionary();\n        wordDictionary.addWord(\"bad\");\n        wordDictionary.addWord(\"dad\");\n        wordDictionary.addWord(\"mad\");\n        wordDictionary.search(\"pad\"); // return False\n        wordDictionary.search(\"bad\"); // return True\n        wordDictionary.search(\".ad\"); // return True\n        wordDictionary.search(\"b..\"); // return True\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        self.word_dict = {}\n        self.word_dict[word] = True\n        return True"
    },
    {
        "number": 212,
        "title": "Word Search II",
        "difficulty": 2,
        "prompt": "class Solution:\n    def findWords(self, board: List[List[str]], words: List[str]) -> List[str]:\n        \"\"\"\n        Given an m x n board of characters and a list of strings words, return all words on the board.\n        Each word must be constructed from letters of sequentially adjacent cells, where adjacent cells are horizontally or vertically neighboring. The same letter cell may not be used more than once in a word.\n        Example 1:\n        Input: board = [[\"o\",\"a\",\"a\",\"n\"],[\"e\",\"t\",\"a\",\"e\"],[\"i\",\"h\",\"k\",\"r\"],[\"i\",\"f\",\"l\",\"v\"]], words = [\"oath\",\"pea\",\"eat\",\"rain\"]\n        Output: [\"eat\",\"oath\"]\n        Example 2:\n        Input: board = [[\"a\",\"b\"],[\"c\",\"d\"]], words = [\"abcb\"]\n        Output: []\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        # build trie\n        trie = {}\n        for word in words:\n            node = trie\n            for char in word:\n                if char not in node:\n                    node[char] = {}\n                node = node[char]\n            node['#'] = word"
    },
    {
        "number": 212,
        "title": "Word Search II",
        "difficulty": 2,
        "prompt": "class Solution:\n    def findWords(self, board: List[List[str]], words: List[str]) -> List[str]:\n        \"\"\"\n        Given an m x n board of characters and a list of strings words, return all words on the board.\n        Each word must be constructed from letters of sequentially adjacent cells, where adjacent cells are horizontally or vertically neighboring. The same letter cell may not be used more than once in a word.\n        Example 1:\n        Input: board = [[\"o\",\"a\",\"a\",\"n\"],[\"e\",\"t\",\"a\",\"e\"],[\"i\",\"h\",\"k\",\"r\"],[\"i\",\"f\",\"l\",\"v\"]], words = [\"oath\",\"pea\",\"eat\",\"rain\"]\n        Output: [\"eat\",\"oath\"]\n        Example 2:\n        Input: board = [[\"a\",\"b\"],[\"c\",\"d\"]], words = [\"abcb\"]\n        Output: []\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        # build trie\n        trie = {}\n        for word in words:\n            node = trie\n            for c in word:\n                if c not in node:\n                    node[c] = {}\n                node = node[c]\n            node['#'] = word\n        \n        # search\n        def dfs(i, j, node, path):\n            if '#' in node:\n                res.append(node['#'])\n                node.pop('#')\n            if i < 0 or i >= len(board) or j < 0 or j >= len(board[0]):\n                return\n            if board[i][j] not in node:\n                return\n            tmp = board[i][j]\n            board[i][j] = '#'\n            dfs(i+1, j, node[tmp], path + tmp)\n            dfs(i-1, j, node[tmp], path + tmp)\n            dfs(i, j+1, node[tmp], path + tmp)\n            dfs(i, j-1, node[tmp], path + tmp)\n            board[i][j] = tmp\n        \n        res = []\n        for i in range(len(board)):\n            for j in range(len(board[0])):\n                "
    },
    {
        "number": 213,
        "title": "House Robber II",
        "difficulty": 1,
        "prompt": "class Solution:\n    def rob(self, nums: List[int]) -> int:\n        \"\"\"\n        You are a professional robber planning to rob houses along a street. Each house has a certain amount of money stashed. All houses at this place are arranged in a circle. That means the first house is the neighbor of the last one. Meanwhile, adjacent houses have a security system connected, and it will automatically contact the police if two adjacent houses were broken into on the same night.\n        Given an integer array nums representing the amount of money of each house, return the maximum amount of money you can rob tonight without alerting the police.\n        Example 1:\n        Input: nums = [2,3,2]\n        Output: 3\n        Explanation: You cannot rob house 1 (money = 2) and then rob house 3 (money = 2), because they are adjacent houses.\n        Example 2:\n        Input: nums = [1,2,3,1]\n        Output: 4\n        Explanation: Rob house 1 (money = 1) and then rob house 3 (money = 3).\n        Total amount you can rob = 1 + 3 = 4.\n        Example 3:\n        Input: nums = [1,2,3]\n        Output: 3\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        if len(nums) == 1:\n            return nums[0]\n        if len(nums) == 2:\n            return max(nums[0], nums[1])\n        dp = [0] * len(nums)\n        dp[0] = nums[0]\n        dp[1] = max(nums[0], nums[1])\n        for i in range(2, len(nums)):\n            dp[i] = max(dp[i - 1], dp[i - 2] + nums[i])\n        return dp[-1]"
    },
    {
        "number": 213,
        "title": "House Robber II",
        "difficulty": 1,
        "prompt": "class Solution:\n    def rob(self, nums: List[int]) -> int:\n        \"\"\"\n        You are a professional robber planning to rob houses along a street. Each house has a certain amount of money stashed. All houses at this place are arranged in a circle. That means the first house is the neighbor of the last one. Meanwhile, adjacent houses have a security system connected, and it will automatically contact the police if two adjacent houses were broken into on the same night.\n        Given an integer array nums representing the amount of money of each house, return the maximum amount of money you can rob tonight without alerting the police.\n        Example 1:\n        Input: nums = [2,3,2]\n        Output: 3\n        Explanation: You cannot rob house 1 (money = 2) and then rob house 3 (money = 2), because they are adjacent houses.\n        Example 2:\n        Input: nums = [1,2,3,1]\n        Output: 4\n        Explanation: Rob house 1 (money = 1) and then rob house 3 (money = 3).\n        Total amount you can rob = 1 + 3 = 4.\n        Example 3:\n        Input: nums = [1,2,3]\n        Output: 3\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        if not nums:\n            return 0\n        if len(nums) == 1:\n            return nums[0]\n        if len(nums) == 2:\n            return max(nums[0], nums[1])\n        dp = [0] * len(nums)\n        dp[0] = nums[0]\n        dp[1] = max(nums[0], nums[1])\n        for i in range(2, len(nums)):\n            dp[i] = max(dp[i-2] + nums[i], dp[i-1])\n        return dp[-1]"
    },
    {
        "number": 214,
        "title": "Shortest Palindrome",
        "difficulty": 2,
        "prompt": "class Solution:\n    def shortestPalindrome(self, s: str) -> str:\n        \"\"\"\n        You are given a string s. You can convert s to a palindrome by adding characters in front of it.\n        Return the shortest palindrome you can find by performing this transformation.\n        Example 1:\n        Input: s = \"aacecaaa\"\n        Output: \"aaacecaaa\"\n        Example 2:\n        Input: s = \"abcd\"\n        Output: \"dcbabcd\"\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        # \u53cc\u5411BFS\n        # \u5148\u627e\u5230\u6700\u957f\u7684\u56de\u6587\u5b50\u4e32\n        # \u518d\u627e\u5230\u6700\u77ed\u7684\u56de\u6587\u5b50\u4e32\n        # \u5982\u679c\u6700\u77ed\u7684\u56de\u6587\u5b50\u4e32\u957f\u5ea6\u4e3a0\uff0c\u5219\u8fd4\u56de\u6700\u957f\u56de\u6587\u5b50\u4e32\n        # \u5982\u679c\u6700\u77ed\u56de\u6587\u5b50\u4e32\u957f\u5ea6\u4e0d\u4e3a0\uff0c\u5219\u8fd4\u56de\u6700\u77ed\u56de\u6587\u5b50\u4e32\n        # \u5982\u679c\u6700\u77ed\u56de\u6587\u5b50\u4e32\u957f\u5ea6\u4e3a1\uff0c\u5219\u8fd4\u56de\u6700\u77ed\u56de\u6587\u5b50\u4e32\n        # \u5982\u679c\u6700\u77ed\u56de\u6587\u5b50\u4e32\u957f\u5ea6\u5927\u4e8e1\uff0c\u5219\u8fd4\u56de\u6700\u77ed\u56de\u6587\u5b50\u4e32\n        # \u5982\u679c\u6700\u77ed\u56de\u6587\u5b50\u4e32\u957f\u5ea6\u4e3a2\uff0c\u5219\u8fd4\u56de\u6700\ufffd"
    },
    {
        "number": 214,
        "title": "Shortest Palindrome",
        "difficulty": 2,
        "prompt": "class Solution:\n    def shortestPalindrome(self, s: str) -> str:\n        \"\"\"\n        You are given a string s. You can convert s to a palindrome by adding characters in front of it.\n        Return the shortest palindrome you can find by performing this transformation.\n        Example 1:\n        Input: s = \"aacecaaa\"\n        Output: \"aaacecaaa\"\n        Example 2:\n        Input: s = \"abcd\"\n        Output: \"dcbabcd\"\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        if not s:\n            return s\n        if len(s) == 1:\n            return s\n        if s == s[::-1]:\n            return s\n        for i in range(len(s)):\n            if s[:i] == s[:i][::-1]:\n                return s[i:] + s[:i]\n        return s[0] + self.shortestPalindrome(s[1:]) + s[0]"
    },
    {
        "number": 215,
        "title": "Kth Largest Element in an Array",
        "difficulty": 1,
        "prompt": "class Solution:\n    def findKthLargest(self, nums: List[int], k: int) -> int:\n        \"\"\"\n        Given an integer array nums and an integer k, return the kth largest element in the array.\n        Note that it is the kth largest element in the sorted order, not the kth distinct element.\n        You must solve it in O(n) time complexity.\n        Example 1:\n        Input: nums = [3,2,1,5,6,4], k = 2\n        Output: 5\n        Example 2:\n        Input: nums = [3,2,3,1,2,4,5,5,6], k = 4\n        Output: 4\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        # quick select\n        # time complexity: O(n)\n        # space complexity: O(1)\n        # pivot = random.choice(nums)\n        # left = [x for x in nums if x > pivot]\n        # right = [x for x in nums if x < pivot]\n        # if len(left) >= k:\n        #     return self.findKthLargest(left, k)\n        # elif len(left) + 1 == k:\n        #     return pivot\n        # else:\n        #     return self.findKthLargest(right, k - len(left) - 1)"
    },
    {
        "number": 215,
        "title": "Kth Largest Element in an Array",
        "difficulty": 1,
        "prompt": "class Solution:\n    def findKthLargest(self, nums: List[int], k: int) -> int:\n        \"\"\"\n        Given an integer array nums and an integer k, return the kth largest element in the array.\n        Note that it is the kth largest element in the sorted order, not the kth distinct element.\n        You must solve it in O(n) time complexity.\n        Example 1:\n        Input: nums = [3,2,1,5,6,4], k = 2\n        Output: 5\n        Example 2:\n        Input: nums = [3,2,3,1,2,4,5,5,6], k = 4\n        Output: 4\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        # quick select\n        # O(n) time, O(1) space\n        def partition(left, right, pivot_index):\n            pivot = nums[pivot_index]\n            # 1. move pivot to end\n            nums[pivot_index], nums[right] = nums[right], nums[pivot_index]  \n            \n            # 2. move all smaller elements to the left\n            store_index = left\n            for i in range(left, right):\n                if nums[i] < pivot:\n                    nums[store_index], nums[i] = nums[i], nums[store_index]\n                    store_index += 1"
    },
    {
        "number": 216,
        "title": "Combination Sum III",
        "difficulty": 1,
        "prompt": "class Solution:\n    def combinationSum3(self, k: int, n: int) -> List[List[int]]:\n        \"\"\"\n        Find all valid combinations of k numbers that sum up to n such that the following conditions are true:\n            Only numbers 1 through 9 are used.\n            Each number is used at most once.\n        Return a list of all possible valid combinations. The list must not contain the same combination twice, and the combinations may be returned in any order.\n        Example 1:\n        Input: k = 3, n = 7\n        Output: [[1,2,4]]\n        Explanation:\n        1 + 2 + 4 = 7\n        There are no other valid combinations.\n        Example 2:\n        Input: k = 3, n = 9\n        Output: [[1,2,6],[1,3,5],[2,3,4]]\n        Explanation:\n        1 + 2 + 6 = 9\n        1 + 3 + 5 = 9\n        2 + 3 + 4 = 9\n        There are no other valid combinations.\n        Example 3:\n        Input: k = 4, n = 1\n        Output: []\n        Explanation: There are no valid combinations.\n        Using 4 different numbers in the range [1,9], the smallest sum we can get is 1+2+3+4 = 10 and since 10 > 1, there are no valid combination.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        self.result = []\n        self.dfs(k, n, 1, [])\n        return self.result"
    },
    {
        "number": 216,
        "title": "Combination Sum III",
        "difficulty": 1,
        "prompt": "class Solution:\n    def combinationSum3(self, k: int, n: int) -> List[List[int]]:\n        \"\"\"\n        Find all valid combinations of k numbers that sum up to n such that the following conditions are true:\n            Only numbers 1 through 9 are used.\n            Each number is used at most once.\n        Return a list of all possible valid combinations. The list must not contain the same combination twice, and the combinations may be returned in any order.\n        Example 1:\n        Input: k = 3, n = 7\n        Output: [[1,2,4]]\n        Explanation:\n        1 + 2 + 4 = 7\n        There are no other valid combinations.\n        Example 2:\n        Input: k = 3, n = 9\n        Output: [[1,2,6],[1,3,5],[2,3,4]]\n        Explanation:\n        1 + 2 + 6 = 9\n        1 + 3 + 5 = 9\n        2 + 3 + 4 = 9\n        There are no other valid combinations.\n        Example 3:\n        Input: k = 4, n = 1\n        Output: []\n        Explanation: There are no valid combinations.\n        Using 4 different numbers in the range [1,9], the smallest sum we can get is 1+2+3+4 = 10 and since 10 > 1, there are no valid combination.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        if k > 9 or k < 1:\n            return []\n        if n > 9 or n < 1:\n            return []\n        if k == 1:\n            if n > 9 or n < 1:\n                return []\n            return [[n]]\n        if k == 2:\n            if n > 9 or n < 1:\n                return []\n            return [[1,n-1],[2,n-2]]\n        if k == 3:\n            if n > 9 or n < 1:\n                return []\n            return [[1,n-1],[2,n-2],[3,n-3]]\n        if k == 4:\n            if n > 9 or n < 1:\n                return []\n            return [[1,n-1],[2,n-2],[3,n-3],[4,n-4]]\n        if k == 5:\n            if n > 9 or n < 1:\n                return []\n            return [[1,n-1],[2,n-2],[3,n-3],[4,n-4],[5,n-5]]\n        if k == 6:\n            if n > 9 or n < 1:\n                return []\n            return [[1,n-1],[2,n-2],[3,n-3],[4,n-4],[5,n-5"
    },
    {
        "number": 217,
        "title": "Contains Duplicate",
        "difficulty": 0,
        "prompt": "class Solution:\n    def containsDuplicate(self, nums: List[int]) -> bool:\n        \"\"\"\n        Given an integer array nums, return true if any value appears at least twice in the array, and return false if every element is distinct.\n        Example 1:\n        Input: nums = [1,2,3,1]\n        Output: true\n        Example 2:\n        Input: nums = [1,2,3,4]\n        Output: false\n        Example 3:\n        Input: nums = [1,1,1,3,3,4,3,2,4,2]\n        Output: true\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        # Time: O(n)\n        # Space: O(n)\n        # hash table\n        # hash table = {1:1, 2:2, 3:3, 4:4}\n        # if len(nums) == len(set(nums)):\n        #     return False\n        # else:\n        #     return True\n        \n        # Time: O(n)\n        # Space: O(1)\n        # set\n        # if len(nums) == len(set(nums)):\n        #     return False\n        # else:\n        #     return True\n        \n        # Time: O(n)\n        # Space: O(n)\n        # sort\n        # if len(nums) == len(set(nums)):\n        #     return False\n        # else:\n        #     return True\n        \n        # Time: O(n log n)\n        # Space: O(1)\n        # sort\n        # if len(nums) == len(set(nums)):\n        #     return False\n        # else:\n        #     return True\n        \n        # Time: O(n)\n        # Space: O(n)\n        # sort\n        # if len(nums) == len(set(nums)"
    },
    {
        "number": 217,
        "title": "Contains Duplicate",
        "difficulty": 0,
        "prompt": "class Solution:\n    def containsDuplicate(self, nums: List[int]) -> bool:\n        \"\"\"\n        Given an integer array nums, return true if any value appears at least twice in the array, and return false if every element is distinct.\n        Example 1:\n        Input: nums = [1,2,3,1]\n        Output: true\n        Example 2:\n        Input: nums = [1,2,3,4]\n        Output: false\n        Example 3:\n        Input: nums = [1,1,1,3,3,4,3,2,4,2]\n        Output: true\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        # nums.sort()\n        # for i in range(len(nums) - 1):\n        #     if nums[i] == nums[i + 1]:\n        #         return True\n        # return False"
    },
    {
        "number": 218,
        "title": "The Skyline Problem",
        "difficulty": 2,
        "prompt": "class Solution:\n    def getSkyline(self, buildings: List[List[int]]) -> List[List[int]]:\n        \"\"\"\n        A city's skyline is the outer contour of the silhouette formed by all the buildings in that city when viewed from a distance. Given the locations and heights of all the buildings, return the skyline formed by these buildings collectively.\n        The geometric information of each building is given in the array buildings where buildings[i] = [lefti, righti, heighti]:\n            lefti is the x coordinate of the left edge of the ith building.\n            righti is the x coordinate of the right edge of the ith building.\n            heighti is the height of the ith building.\n        You may assume all buildings are perfect rectangles grounded on an absolutely flat surface at height 0.\n        The skyline should be represented as a list of \"key points\" sorted by their x-coordinate in the form [[x1,y1],[x2,y2],...]. Each key point is the left endpoint of some horizontal segment in the skyline except the last point in the list, which always has a y-coordinate 0 and is used to mark the skyline's termination where the rightmost building ends. Any ground between the leftmost and rightmost buildings should be part of the skyline's contour.\n        Note: There must be no consecutive horizontal lines of equal height in the output skyline. For instance, [...,[2 3],[4 5],[7 5],[11 5],[12 7],...] is not acceptable; the three lines of height 5 should be merged into one in the final output as such: [...,[2 3],[4 5],[12 7],...]\n        Example 1:\n        Input: buildings = [[2,9,10],[3,7,15],[5,12,12],[15,20,10],[19,24,8]]\n        Output: [[2,10],[3,15],[7,12],[12,0],[15,10],[20,8],[24,0]]\n        Explanation:\n        Figure A shows the buildings of the input.\n        Figure B shows the skyline formed by those buildings. The red points in figure B represent the key points in the output list.\n        Example 2:\n        Input: buildings = [[0,2,3],[2,5,3]]\n        Output: [[0,3],[5,0]]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        # 1. sort the buildings by left\n        # 2. for each building, check if it is the leftmost building\n        # 3. if it is, check if it is the first building\n        # 4. if it is, check if it is the last building\n        # 5. if it is, check if it is the last building\n        # 6. if it is, check if it is the last building\n        # 7. if it is, check if it is the last building\n        # 8. if it is, check if it is the last building\n        # 9. if it is, check if it is the last building\n        # 10. if it is, check if it is the last building\n        # 11. if it is, check if it is the last building\n        # 12. if it is, check if it is the last building\n        # 13. if it is, check if it is the last building\n        # 14. if it is, check if it is the last building\n        # 15. if it is, check if it is the last building\n        # 16. if it is, check if it is the last building\n        # 17. if it is, check if it is the last building\n        # 18. if it is, check if it is the last building\n        # 19. if it is, check if it is the last building\n        "
    },
    {
        "number": 218,
        "title": "The Skyline Problem",
        "difficulty": 2,
        "prompt": "class Solution:\n    def getSkyline(self, buildings: List[List[int]]) -> List[List[int]]:\n        \"\"\"\n        A city's skyline is the outer contour of the silhouette formed by all the buildings in that city when viewed from a distance. Given the locations and heights of all the buildings, return the skyline formed by these buildings collectively.\n        The geometric information of each building is given in the array buildings where buildings[i] = [lefti, righti, heighti]:\n            lefti is the x coordinate of the left edge of the ith building.\n            righti is the x coordinate of the right edge of the ith building.\n            heighti is the height of the ith building.\n        You may assume all buildings are perfect rectangles grounded on an absolutely flat surface at height 0.\n        The skyline should be represented as a list of \"key points\" sorted by their x-coordinate in the form [[x1,y1],[x2,y2],...]. Each key point is the left endpoint of some horizontal segment in the skyline except the last point in the list, which always has a y-coordinate 0 and is used to mark the skyline's termination where the rightmost building ends. Any ground between the leftmost and rightmost buildings should be part of the skyline's contour.\n        Note: There must be no consecutive horizontal lines of equal height in the output skyline. For instance, [...,[2 3],[4 5],[7 5],[11 5],[12 7],...] is not acceptable; the three lines of height 5 should be merged into one in the final output as such: [...,[2 3],[4 5],[12 7],...]\n        Example 1:\n        Input: buildings = [[2,9,10],[3,7,15],[5,12,12],[15,20,10],[19,24,8]]\n        Output: [[2,10],[3,15],[7,12],[12,0],[15,10],[20,8],[24,0]]\n        Explanation:\n        Figure A shows the buildings of the input.\n        Figure B shows the skyline formed by those buildings. The red points in figure B represent the key points in the output list.\n        Example 2:\n        Input: buildings = [[0,2,3],[2,5,3]]\n        Output: [[0,3],[5,0]]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        # Solution 1: O(n) space, O(nlogn) time\n        # Solution 2: O(n) space, O(n) time\n        # Solution 3: O(n) space, O(n) time\n        # Solution 4: O(n) space, O(n) time\n        # Solution 5: O(n) space, O(n) time\n        # Solution 6: O(n) space, O(n) time\n        # Solution 7: O(n) space, O(n) time\n        # Solution 8: O(n) space, O(n) time\n        # Solution 9: O(n) space, O(n) time\n        # Solution 10: O(n) space, O(n) time\n        # Solution 11: O(n) space, O(n) time\n        # Solution 12: O(n) space, O(n) time\n        # Solution 13: O(n) space, O(n) time\n        # Solution 14: O(n) space, O(n) time\n        # Solution 15: O(n) space, O(n) time\n        # Solution 16: O(n) space, O(n) time\n        # Solution 17: O(n) space, O(n) time\n        # Solution 18: O(n) space"
    },
    {
        "number": 219,
        "title": "Contains Duplicate II",
        "difficulty": 0,
        "prompt": "class Solution:\n    def containsNearbyDuplicate(self, nums: List[int], k: int) -> bool:\n        \"\"\"\n        Given an integer array nums and an integer k, return true if there are two distinct indices i and j in the array such that nums[i] == nums[j] and abs(i - j) <= k.\n        Example 1:\n        Input: nums = [1,2,3,1], k = 3\n        Output: true\n        Example 2:\n        Input: nums = [1,0,1,1], k = 1\n        Output: true\n        Example 3:\n        Input: nums = [1,2,3,1,2,3], k = 2\n        Output: false\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        # Time: O(n)\n        # Space: O(n)\n        if len(nums) == 0:\n            return False\n        if len(nums) == 1:\n            return False\n        \n        d = {}\n        for i in range(len(nums)):\n            if nums[i] in d:\n                if i - d[nums[i]] <= k:\n                    return True\n                else:\n                    d[nums[i]] = i\n            else:\n                d[nums[i]] = i\n        return False\n<|endoftext|>"
    },
    {
        "number": 219,
        "title": "Contains Duplicate II",
        "difficulty": 0,
        "prompt": "class Solution:\n    def containsNearbyDuplicate(self, nums: List[int], k: int) -> bool:\n        \"\"\"\n        Given an integer array nums and an integer k, return true if there are two distinct indices i and j in the array such that nums[i] == nums[j] and abs(i - j) <= k.\n        Example 1:\n        Input: nums = [1,2,3,1], k = 3\n        Output: true\n        Example 2:\n        Input: nums = [1,0,1,1], k = 1\n        Output: true\n        Example 3:\n        Input: nums = [1,2,3,1,2,3], k = 2\n        Output: false\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        # Time: O(n)\n        # Space: O(n)\n        hash_map = {}\n        for i, num in enumerate(nums):\n            if num in hash_map:\n                if i - hash_map[num] <= k:\n                    return True\n            hash_map[num] = i\n        return False\n<|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>"
    },
    {
        "number": 220,
        "title": "Contains Duplicate III",
        "difficulty": 2,
        "prompt": "class Solution:\n    def containsNearbyAlmostDuplicate(self, nums: List[int], indexDiff: int, valueDiff: int) -> bool:\n        \"\"\"\n        You are given an integer array nums and two integers indexDiff and valueDiff.\n        Find a pair of indices (i, j) such that:\n            i!= j,\n            abs(i - j) <= indexDiff.\n            abs(nums[i] - nums[j]) <= valueDiff, and\n        Return true if such pair exists or false otherwise.\n        Example 1:\n        Input: nums = [1,2,3,1], indexDiff = 3, valueDiff = 0\n        Output: true\n        Explanation: We can choose (i, j) = (0, 3).\n        We satisfy the three conditions:\n        i!= j --> 0!= 3\n        abs(i - j) <= indexDiff --> abs(0 - 3) <= 3\n        abs(nums[i] - nums[j]) <= valueDiff --> abs(1 - 1) <= 0\n        Example 2:\n        Input: nums = [1,5,9,1,5,9], indexDiff = 2, valueDiff = 3\n        Output: false\n        Explanation: After trying all the possible pairs (i, j), we cannot satisfy the three conditions, so we return false.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        # O(n)\n        # O(n)\n        if len(nums) < 2:\n            return False\n        d = {}\n        for i in range(len(nums)):\n            if nums[i] in d:\n                if i - d[nums[i]] <= indexDiff:\n                    return True\n                else:\n                    d[nums[i]] = i\n            else:\n                d[nums[i]] = i\n        return False"
    },
    {
        "number": 220,
        "title": "Contains Duplicate III",
        "difficulty": 2,
        "prompt": "class Solution:\n    def containsNearbyAlmostDuplicate(self, nums: List[int], indexDiff: int, valueDiff: int) -> bool:\n        \"\"\"\n        You are given an integer array nums and two integers indexDiff and valueDiff.\n        Find a pair of indices (i, j) such that:\n            i!= j,\n            abs(i - j) <= indexDiff.\n            abs(nums[i] - nums[j]) <= valueDiff, and\n        Return true if such pair exists or false otherwise.\n        Example 1:\n        Input: nums = [1,2,3,1], indexDiff = 3, valueDiff = 0\n        Output: true\n        Explanation: We can choose (i, j) = (0, 3).\n        We satisfy the three conditions:\n        i!= j --> 0!= 3\n        abs(i - j) <= indexDiff --> abs(0 - 3) <= 3\n        abs(nums[i] - nums[j]) <= valueDiff --> abs(1 - 1) <= 0\n        Example 2:\n        Input: nums = [1,5,9,1,5,9], indexDiff = 2, valueDiff = 3\n        Output: false\n        Explanation: After trying all the possible pairs (i, j), we cannot satisfy the three conditions, so we return false.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        # O(n)\n        # O(n)\n        if len(nums) < 2:\n            return False\n        nums = sorted(nums)\n        for i in range(len(nums) - 1):\n            if i > 0 and nums[i] == nums[i - 1]:\n                continue\n            for j in range(i + 1, len(nums)):\n                if j > i + 1 and nums[j] == nums[j - 1]:\n                    continue\n                if abs(nums[i] - nums[j]) <= valueDiff:\n                    if abs(i - j) <= indexDiff:\n                        return True\n        return False"
    },
    {
        "number": 221,
        "title": "Maximal Square",
        "difficulty": 1,
        "prompt": "class Solution:\n    def maximalSquare(self, matrix: List[List[str]]) -> int:\n        \"\"\"\n        Given an m x n binary matrix filled with 0's and 1's, find the largest square containing only 1's and return its area.\n        Example 1:\n        Input: matrix = [[\"1\",\"0\",\"1\",\"0\",\"0\"],[\"1\",\"0\",\"1\",\"1\",\"1\"],[\"1\",\"1\",\"1\",\"1\",\"1\"],[\"1\",\"0\",\"0\",\"1\",\"0\"]]\n        Output: 4\n        Example 2:\n        Input: matrix = [[\"0\",\"1\"],[\"1\",\"0\"]]\n        Output: 1\n        Example 3:\n        Input: matrix = [[\"0\"]]\n        Output: 0\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        if not matrix:\n            return 0\n        m, n = len(matrix), len(matrix[0])\n        dp = [[0] * n for _ in range(m)]\n        max_side = 0\n        for i in range(m):\n            for j in range(n):\n                if matrix[i][j] == '1':\n                    if i == 0 or j == 0:\n                        dp[i][j] = 1\n                    else:\n                        dp[i][j] = min(dp[i - 1][j], dp[i][j - 1], dp[i - 1][j - 1]) + 1\n                    max_side = max(max_side, dp[i][j])\n        return max_side ** 2"
    },
    {
        "number": 221,
        "title": "Maximal Square",
        "difficulty": 1,
        "prompt": "class Solution:\n    def maximalSquare(self, matrix: List[List[str]]) -> int:\n        \"\"\"\n        Given an m x n binary matrix filled with 0's and 1's, find the largest square containing only 1's and return its area.\n        Example 1:\n        Input: matrix = [[\"1\",\"0\",\"1\",\"0\",\"0\"],[\"1\",\"0\",\"1\",\"1\",\"1\"],[\"1\",\"1\",\"1\",\"1\",\"1\"],[\"1\",\"0\",\"0\",\"1\",\"0\"]]\n        Output: 4\n        Example 2:\n        Input: matrix = [[\"0\",\"1\"],[\"1\",\"0\"]]\n        Output: 1\n        Example 3:\n        Input: matrix = [[\"0\"]]\n        Output: 0\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        if not matrix:\n            return 0\n        m, n = len(matrix), len(matrix[0])\n        dp = [[0] * n for _ in range(m)]\n        max_side = 0\n        for i in range(m):\n            for j in range(n):\n                if matrix[i][j] == \"1\":\n                    if i == 0 or j == 0:\n                        dp[i][j] = 1\n                    else:\n                        dp[i][j] = min(dp[i - 1][j], dp[i][j - 1], dp[i - 1][j - 1]) + 1\n                    max_side = max(max_side, dp[i][j])\n        return max_side ** 2"
    },
    {
        "number": 222,
        "title": "Count Complete Tree Nodes",
        "difficulty": 1,
        "prompt": "class Solution:\n    def countNodes(self, root: Optional[TreeNode]) -> int:\n        \"\"\"\n        Given the root of a complete binary tree, return the number of the nodes in the tree.\n        According to Wikipedia, every level, except possibly the last, is completely filled in a complete binary tree, and all nodes in the last level are as far left as possible. It can have between 1 and 2h nodes inclusive at the last level h.\n        Design an algorithm that runs in less than O(n) time complexity.\n        Example 1:\n        Input: root = [1,2,3,4,5,6]\n        Output: 6\n        Example 2:\n        Input: root = []\n        Output: 0\n        Example 3:\n        Input: root = [1]\n        Output: 1\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        if not root:\n            return 0\n        return 1 + self.countNodes(root.left) + self.countNodes(root.right)\n<|endoftext|>"
    },
    {
        "number": 222,
        "title": "Count Complete Tree Nodes",
        "difficulty": 1,
        "prompt": "class Solution:\n    def countNodes(self, root: Optional[TreeNode]) -> int:\n        \"\"\"\n        Given the root of a complete binary tree, return the number of the nodes in the tree.\n        According to Wikipedia, every level, except possibly the last, is completely filled in a complete binary tree, and all nodes in the last level are as far left as possible. It can have between 1 and 2h nodes inclusive at the last level h.\n        Design an algorithm that runs in less than O(n) time complexity.\n        Example 1:\n        Input: root = [1,2,3,4,5,6]\n        Output: 6\n        Example 2:\n        Input: root = []\n        Output: 0\n        Example 3:\n        Input: root = [1]\n        Output: 1\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        if not root:\n            return 0\n        return 1 + self.countNodes(root.left) + self.countNodes(root.right)\n<|endoftext|>"
    },
    {
        "number": 223,
        "title": "Rectangle Area",
        "difficulty": 1,
        "prompt": "class Solution:\n    def computeArea(self, ax1: int, ay1: int, ax2: int, ay2: int, bx1: int, by1: int, bx2: int, by2: int) -> int:\n        \"\"\"\n        Given the coordinates of two rectilinear rectangles in a 2D plane, return the total area covered by the two rectangles.\n        The first rectangle is defined by its bottom-left corner (ax1, ay1) and its top-right corner (ax2, ay2).\n        The second rectangle is defined by its bottom-left corner (bx1, by1) and its top-right corner (bx2, by2).\n        Example 1:\n        Input: ax1 = -3, ay1 = 0, ax2 = 3, ay2 = 4, bx1 = 0, by1 = -1, bx2 = 9, by2 = 2\n        Output: 45\n        Example 2:\n        Input: ax1 = -2, ay1 = -2, ax2 = 2, ay2 = 2, bx1 = -2, by1 = -2, bx2 = 2, by2 = 2\n        Output: 16\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        # Calculate the area of the first rectangle\n        area_1 = (ax2 - ax1) * (ay2 - ay1)\n        # Calculate the area of the second rectangle\n        area_2 = (bx2 - bx1) * (by2 - by1)\n        # Calculate the intersection of the two rectangles\n        intersection = self.get_intersection(ax1, ay1, ax2, ay2, bx1, by1, bx2, by2)\n        # Return the total area\n        return area_1 + area_2 - intersection"
    },
    {
        "number": 223,
        "title": "Rectangle Area",
        "difficulty": 1,
        "prompt": "class Solution:\n    def computeArea(self, ax1: int, ay1: int, ax2: int, ay2: int, bx1: int, by1: int, bx2: int, by2: int) -> int:\n        \"\"\"\n        Given the coordinates of two rectilinear rectangles in a 2D plane, return the total area covered by the two rectangles.\n        The first rectangle is defined by its bottom-left corner (ax1, ay1) and its top-right corner (ax2, ay2).\n        The second rectangle is defined by its bottom-left corner (bx1, by1) and its top-right corner (bx2, by2).\n        Example 1:\n        Input: ax1 = -3, ay1 = 0, ax2 = 3, ay2 = 4, bx1 = 0, by1 = -1, bx2 = 9, by2 = 2\n        Output: 45\n        Example 2:\n        Input: ax1 = -2, ay1 = -2, ax2 = 2, ay2 = 2, bx1 = -2, by1 = -2, bx2 = 2, by2 = 2\n        Output: 16\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        # Solution 1:\n        # return (max(ax2, bx2) - min(ax1, bx1)) * (max(ay2, by2) - min(ay1, by1))"
    },
    {
        "number": 224,
        "title": "Basic Calculator",
        "difficulty": 2,
        "prompt": "class Solution:\n    def calculate(self, s: str) -> int:\n        \"\"\"\n        Given a string s representing a valid expression, implement a basic calculator to evaluate it, and return the result of the evaluation.\n        Note: You are not allowed to use any built-in function which evaluates strings as mathematical expressions, such as eval().\n        Example 1:\n        Input: s = \"1 + 1\"\n        Output: 2\n        Example 2:\n        Input: s = \" 2-1 + 2 \"\n        Output: 3\n        Example 3:\n        Input: s = \"(1+(4+5+2)-3)+(6+8)\"\n        Output: 23\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        stack = []\n        num = 0\n        sign = '+'\n        for i in range(len(s)):\n            if s[i].isdigit():\n                num = num * 10 + int(s[i])\n            if s[i] in '+-*/' or i == len(s) - 1:\n                if sign == '+':\n                    stack.append(num)\n                elif sign == '-':\n                    stack.append(-num)\n                elif sign == '*':\n                    stack.append(stack.pop() * num)\n                else:\n                    stack.append(int(stack.pop() / num))\n                num = 0\n                sign = s[i]\n        return sum(stack)\n<|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>"
    },
    {
        "number": 224,
        "title": "Basic Calculator",
        "difficulty": 2,
        "prompt": "class Solution:\n    def calculate(self, s: str) -> int:\n        \"\"\"\n        Given a string s representing a valid expression, implement a basic calculator to evaluate it, and return the result of the evaluation.\n        Note: You are not allowed to use any built-in function which evaluates strings as mathematical expressions, such as eval().\n        Example 1:\n        Input: s = \"1 + 1\"\n        Output: 2\n        Example 2:\n        Input: s = \" 2-1 + 2 \"\n        Output: 3\n        Example 3:\n        Input: s = \"(1+(4+5+2)-3)+(6+8)\"\n        Output: 23\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        # \u6808\n        # \u5148\u904d\u5386\u5b57\u7b26\u4e32\uff0c\u628a\u6bcf\u4e2a\u6570\u5b57\u548c\u64cd\u4f5c\u7b26\u5165\u6808\n        # \u518d\u904d\u5386\u5b57\u7b26\u4e32\uff0c\u628a\u6bcf\u4e2a\u64cd\u4f5c\u7b26\u51fa\u6808\uff0c\u5e76\u8ba1\u7b97\n        # \u6ce8\u610f\uff0c\u64cd\u4f5c\u7b26\u53ef\u80fd\u662f\u4e00\u4e2a\u6570\u5b57\uff0c\u4e5f\u53ef\u80fd\u662f\u4e00\u4e2a\u64cd\u4f5c\u7b26\uff0c\u6240\u4ee5\u9700\u8981\u5224\u65ad\n        # \u5982\u679c\u662f\u6570\u5b57\uff0c\u76f4\u63a5\u5165\u6808\n        # \u5982\u679c\u662f\u64cd\u4f5c\u7b26\uff0c\u5148\u628a\u6808\u9876\u5143\u7d20\u51fa\u6808\uff0c\u8ba1\u7b97\uff0c\u518d\u5165\u6808\n        # \u5982\u679c\u662f\u5de6\u62ec\u53f7\uff0c\u5165\u6808\n        # \u5982\u679c\u662f\u53f3\u62ec\u53f7\uff0c\u5148\u628a\ufffd"
    },
    {
        "number": 225,
        "title": "Implement Stack using Queues",
        "difficulty": 0,
        "prompt": "class MyStack:\n    def __init__(self):\n    def push(self, x: int) -> None:\n    def pop(self) -> int:\n    def top(self) -> int:\n    def empty(self) -> bool:\n        \"\"\"\n        Implement a last-in-first-out (LIFO) stack using only two queues. The implemented stack should support all the functions of a normal stack (push, top, pop, and empty).\n        Implement the MyStack class:\n            void push(int x) Pushes element x to the top of the stack.\n            int pop() Removes the element on the top of the stack and returns it.\n            int top() Returns the element on the top of the stack.\n            boolean empty() Returns true if the stack is empty, false otherwise.\n        Notes:\n            You must use only standard operations of a queue, which means that only push to back, peek/pop from front, size and is empty operations are valid.\n            Depending on your language, the queue may not be supported natively. You may simulate a queue using a list or deque (double-ended queue) as long as you use only a queue's standard operations.\n        Example 1:\n        Input\n        [\"MyStack\", \"push\", \"push\", \"top\", \"pop\", \"empty\"]\n        [[], [1], [2], [], [], []]\n        Output\n        [null, null, null, 2, 2, false]\n        Explanation\n        MyStack myStack = new MyStack();\n        myStack.push(1);\n        myStack.push(2);\n        myStack.top(); // return 2\n        myStack.pop(); // return 2\n        myStack.empty(); // return False\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n"
    },
    {
        "number": 225,
        "title": "Implement Stack using Queues",
        "difficulty": 0,
        "prompt": "class MyStack:\n    def __init__(self):\n    def push(self, x: int) -> None:\n    def pop(self) -> int:\n    def top(self) -> int:\n    def empty(self) -> bool:\n        \"\"\"\n        Implement a last-in-first-out (LIFO) stack using only two queues. The implemented stack should support all the functions of a normal stack (push, top, pop, and empty).\n        Implement the MyStack class:\n            void push(int x) Pushes element x to the top of the stack.\n            int pop() Removes the element on the top of the stack and returns it.\n            int top() Returns the element on the top of the stack.\n            boolean empty() Returns true if the stack is empty, false otherwise.\n        Notes:\n            You must use only standard operations of a queue, which means that only push to back, peek/pop from front, size and is empty operations are valid.\n            Depending on your language, the queue may not be supported natively. You may simulate a queue using a list or deque (double-ended queue) as long as you use only a queue's standard operations.\n        Example 1:\n        Input\n        [\"MyStack\", \"push\", \"push\", \"top\", \"pop\", \"empty\"]\n        [[], [1], [2], [], [], []]\n        Output\n        [null, null, null, 2, 2, false]\n        Explanation\n        MyStack myStack = new MyStack();\n        myStack.push(1);\n        myStack.push(2);\n        myStack.top(); // return 2\n        myStack.pop(); // return 2\n        myStack.empty(); // return False\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        \"\"\"\n        # Solution 1: use two queues\n        # Time: O(1)\n        # Space: O(n)\n        # queue1: store the elements that are pushed into the stack\n        # queue2: store the elements that are popped out of the stack\n        # queue1:\n        # push: O(1)\n        # pop: O(n)\n        # queue2:\n        # push: O(1)\n        # pop: O(1)\n        # queue1:\n        # push: O(1)\n        # pop: O(1)\n        # queue2:\n        # push: O(1)\n        # pop: O(1)\n        # queue1:\n        # push: O(1)\n        # pop: O(1)\n        # queue2:\n        # push: O(1)\n        # pop: O(1)\n        # queue1:\n        # push: O(1)\n        # pop: O(1)\n        # queue2:\n        # push: O(1)\n        # pop: O(1)\n        # queue1:\n        # push: O(1)\n        # pop: O(1)\n        # queue2:\n        # push: O(1)\n        # pop: O(1)"
    },
    {
        "number": 226,
        "title": "Invert Binary Tree",
        "difficulty": 0,
        "prompt": "class Solution:\n    def invertTree(self, root: Optional[TreeNode]) -> Optional[TreeNode]:\n        \"\"\"\n        Given the root of a binary tree, invert the tree, and return its root.\n        Example 1:\n        Input: root = [4,2,7,1,3,6,9]\n        Output: [4,7,2,9,6,3,1]\n        Example 2:\n        Input: root = [2,1,3]\n        Output: [2,3,1]\n        Example 3:\n        Input: root = []\n        Output: []\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        if not root:\n            return None\n        root.left, root.right = root.right, root.left\n        self.invertTree(root.left)\n        self.invertTree(root.right)\n        return root\n<|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>"
    },
    {
        "number": 226,
        "title": "Invert Binary Tree",
        "difficulty": 0,
        "prompt": "class Solution:\n    def invertTree(self, root: Optional[TreeNode]) -> Optional[TreeNode]:\n        \"\"\"\n        Given the root of a binary tree, invert the tree, and return its root.\n        Example 1:\n        Input: root = [4,2,7,1,3,6,9]\n        Output: [4,7,2,9,6,3,1]\n        Example 2:\n        Input: root = [2,1,3]\n        Output: [2,3,1]\n        Example 3:\n        Input: root = []\n        Output: []\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        if not root:\n            return None\n        root.left, root.right = root.right, root.left\n        self.invertTree(root.left)\n        self.invertTree(root.right)\n        return root"
    },
    {
        "number": 227,
        "title": "Basic Calculator II",
        "difficulty": 1,
        "prompt": "class Solution:\n    def calculate(self, s: str) -> int:\n        \"\"\"\n        Given a string s which represents an expression, evaluate this expression and return its value. \n        The integer division should truncate toward zero.\n        You may assume that the given expression is always valid. All intermediate results will be in the range of [-231, 231 - 1].\n        Note: You are not allowed to use any built-in function which evaluates strings as mathematical expressions, such as eval().\n        Example 1:\n        Input: s = \"3+2*2\"\n        Output: 7\n        Example 2:\n        Input: s = \" 3/2 \"\n        Output: 1\n        Example 3:\n        Input: s = \" 3+5 / 2 \"\n        Output: 5\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        stack = []\n        num = 0\n        sign = '+'\n        for i in range(len(s)):\n            if s[i].isdigit():\n                num = num * 10 + int(s[i])\n            if s[i] in '+-*/' or i == len(s) - 1:\n                if sign == '+':\n                    stack.append(num)\n                elif sign == '-':\n                    stack.append(-num)\n                elif sign == '*':\n                    stack.append(stack.pop() * num)\n                else:\n                    stack.append(int(stack.pop() / num))\n                sign = s[i]\n                num = 0\n        return sum(stack)\n<|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>"
    },
    {
        "number": 227,
        "title": "Basic Calculator II",
        "difficulty": 1,
        "prompt": "class Solution:\n    def calculate(self, s: str) -> int:\n        \"\"\"\n        Given a string s which represents an expression, evaluate this expression and return its value. \n        The integer division should truncate toward zero.\n        You may assume that the given expression is always valid. All intermediate results will be in the range of [-231, 231 - 1].\n        Note: You are not allowed to use any built-in function which evaluates strings as mathematical expressions, such as eval().\n        Example 1:\n        Input: s = \"3+2*2\"\n        Output: 7\n        Example 2:\n        Input: s = \" 3/2 \"\n        Output: 1\n        Example 3:\n        Input: s = \" 3+5 / 2 \"\n        Output: 5\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        # stack = []\n        # num = 0\n        # sign = '+'\n        # for i in range(len(s)):\n        #     if s[i].isdigit():\n        #         num = num*10 + int(s[i])\n        #     if s[i] in '+-*/' or i == len(s)-1:\n        #         if sign == '+':\n        #             stack.append(num)\n        #         elif sign == '-':\n        #             stack.append(-num)\n        #         elif sign == '*':\n        #             stack.append(stack.pop()*num)\n        #         elif sign == '/':\n        #             stack.append(int(stack.pop()/num))\n        #         sign = s[i]\n        #         num = 0\n        # return sum(stack)\n        \n        # stack = []\n        # num = 0\n        # sign = '+'\n        # for i in range(len(s)):\n        #     if s[i].isdigit():\n        #         num = num*10 + int(s[i])\n        #     if s[i] in '+-*/' or i == len(s)-1:\n        #         if sign == '"
    },
    {
        "number": 228,
        "title": "Summary Ranges",
        "difficulty": 0,
        "prompt": "class Solution:\n    def summaryRanges(self, nums: List[int]) -> List[str]:\n        \"\"\"\n        You are given a sorted unique integer array nums.\n        A range [a,b] is the set of all integers from a to b (inclusive).\n        Return the smallest sorted list of ranges that cover all the numbers in the array exactly. That is, each element of nums is covered by exactly one of the ranges, and there is no integer x such that x is in one of the ranges but not in nums.\n        Each range [a,b] in the list should be output as:\n            \"a->b\" if a!= b\n            \"a\" if a == b\n        Example 1:\n        Input: nums = [0,1,2,4,5,7]\n        Output: [\"0->2\",\"4->5\",\"7\"]\n        Explanation: The ranges are:\n        [0,2] --> \"0->2\"\n        [4,5] --> \"4->5\"\n        [7,7] --> \"7\"\n        Example 2:\n        Input: nums = [0,2,3,4,6,8,9]\n        Output: [\"0\",\"2->4\",\"6\",\"8->9\"]\n        Explanation: The ranges are:\n        [0,0] --> \"0\"\n        [2,4] --> \"2->4\"\n        [6,6] --> \"6\"\n        [8,9] --> \"8->9\"\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        if not nums:\n            return []\n        \n        start = nums[0]\n        end = nums[0]\n        res = []\n        for i in range(1, len(nums)):\n            if nums[i] == end + 1:\n                end = nums[i]\n            else:\n                if start == end:\n                    res.append(str(start))\n                else:\n                    res.append(str(start) + \"->\" + str(end))\n                start = nums[i]\n                end = nums[i]\n        if start == end:\n            res.append(str(start))\n        else:\n            res.append(str(start) + \"->\" + str(end))\n        return res\n<|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>"
    },
    {
        "number": 228,
        "title": "Summary Ranges",
        "difficulty": 0,
        "prompt": "class Solution:\n    def summaryRanges(self, nums: List[int]) -> List[str]:\n        \"\"\"\n        You are given a sorted unique integer array nums.\n        A range [a,b] is the set of all integers from a to b (inclusive).\n        Return the smallest sorted list of ranges that cover all the numbers in the array exactly. That is, each element of nums is covered by exactly one of the ranges, and there is no integer x such that x is in one of the ranges but not in nums.\n        Each range [a,b] in the list should be output as:\n            \"a->b\" if a!= b\n            \"a\" if a == b\n        Example 1:\n        Input: nums = [0,1,2,4,5,7]\n        Output: [\"0->2\",\"4->5\",\"7\"]\n        Explanation: The ranges are:\n        [0,2] --> \"0->2\"\n        [4,5] --> \"4->5\"\n        [7,7] --> \"7\"\n        Example 2:\n        Input: nums = [0,2,3,4,6,8,9]\n        Output: [\"0\",\"2->4\",\"6\",\"8->9\"]\n        Explanation: The ranges are:\n        [0,0] --> \"0\"\n        [2,4] --> \"2->4\"\n        [6,6] --> \"6\"\n        [8,9] --> \"8->9\"\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        # Time: O(n)\n        # Space: O(n)\n        # result = []\n        # if len(nums) == 0:\n        #     return result\n        # start = nums[0]\n        # for i in range(1, len(nums)):\n        #     if nums[i] - nums[i - 1] > 1:\n        #         if start!= nums[i - 1]:\n        #             result.append(str(start) + \"->\" + str(nums[i - 1]))\n        #         else:\n        #             result.append(str(start))\n        #         start = nums[i]\n        # if start!= nums[-1]:\n        #     result.append(str(start) + \"->\" + str(nums[-1]))\n        # else:\n        #     result.append(str(start))\n        # return result"
    },
    {
        "number": 229,
        "title": "Majority Element II",
        "difficulty": 1,
        "prompt": "class Solution:\n    def majorityElement(self, nums: List[int]) -> List[int]:\n        \"\"\"\n        Given an integer array of size n, find all elements that appear more than \u230a n/3 \u230b times.\n        Example 1:\n        Input: nums = [3,2,3]\n        Output: [3]\n        Example 2:\n        Input: nums = [1]\n        Output: [1]\n        Example 3:\n        Input: nums = [1,2]\n        Output: [1,2]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        # \u601d\u8def\uff1a\u6469\u5c14\u6295\u7968\u6cd5\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        # \u601d\u8def\uff1a\u6469\u5c14\u6295\u7968\u6cd5\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        # \u601d\u8def\uff1a\u6469\u5c14\u6295\u7968\u6cd5\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        # \u601d\u8def\uff1a\u6469\u5c14\u6295\u7968\u6cd5\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        # \u601d\u8def\uff1a\u6469\u5c14\u6295\u7968\u6cd5\n        # \u65f6\u95f4"
    },
    {
        "number": 229,
        "title": "Majority Element II",
        "difficulty": 1,
        "prompt": "class Solution:\n    def majorityElement(self, nums: List[int]) -> List[int]:\n        \"\"\"\n        Given an integer array of size n, find all elements that appear more than \u230a n/3 \u230b times.\n        Example 1:\n        Input: nums = [3,2,3]\n        Output: [3]\n        Example 2:\n        Input: nums = [1]\n        Output: [1]\n        Example 3:\n        Input: nums = [1,2]\n        Output: [1,2]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        # \u6570\u5b66\u6cd5\n        # \u627e\u51fa\u6570\u7ec4\u4e2d\u6700\u5927\u7684\u6570\uff0c\u7136\u540e\u628a\u6570\u7ec4\u4e2d\u6bd4\u5b83\u5927\u7684\u6570\u90fd\u7ed9\u5220\u6389\uff0c\u6700\u540e\u5269\u4e0b\u7684\u5c31\u662f\u4e3b\u5143\n        # \u65f6\u95f4\u590d\u6742\u5ea6O(N)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6O(1)\n        # \u6ce8\u610f\uff1a\u8fd9\u91cc\u7684\u6570\u7ec4\u4e2d\u53ea\u6709\u4e24\u4e2a\u5143\u7d20\uff0c\u6240\u4ee5\u4e0d\u7528\u8003\u8651\u6570\u7ec4\u4e2d\u5143\u7d20\u4e2a\u6570\u4e3a1\u7684\u60c5\u51b5\n        # \u6ce8\u610f\uff1a\u8fd9\u91cc\u7684\u6570\u7ec4\u4e2d\u53ea\u6709\u4e24\u4e2a\u5143\u7d20\uff0c\u6240\u4ee5\u4e0d\u7528\u8003\u8651\u6570\u7ec4\u4e2d\u5143\u7d20\u4e2a\u6570\u4e3a2\u7684\u60c5\u51b5\n        # \u6ce8\u610f\uff1a\u8fd9\u91cc\u7684\u6570\u7ec4\u4e2d\u53ea\u6709\u4e24\u4e2a\u5143\u7d20"
    },
    {
        "number": 230,
        "title": "Kth Smallest Element in a BST",
        "difficulty": 1,
        "prompt": "class Solution:\n    def kthSmallest(self, root: Optional[TreeNode], k: int) -> int:\n        \"\"\"\n        Given the root of a binary search tree, and an integer k, return the kth smallest value (1-indexed) of all the values of the nodes in the tree.\n        Example 1:\n        Input: root = [3,1,4,null,2], k = 1\n        Output: 1\n        Example 2:\n        Input: root = [5,3,6,2,4,null,null,1], k = 3\n        Output: 3\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        self.k = k\n        self.res = None\n        self.helper(root)\n        return self.res"
    },
    {
        "number": 230,
        "title": "Kth Smallest Element in a BST",
        "difficulty": 1,
        "prompt": "class Solution:\n    def kthSmallest(self, root: Optional[TreeNode], k: int) -> int:\n        \"\"\"\n        Given the root of a binary search tree, and an integer k, return the kth smallest value (1-indexed) of all the values of the nodes in the tree.\n        Example 1:\n        Input: root = [3,1,4,null,2], k = 1\n        Output: 1\n        Example 2:\n        Input: root = [5,3,6,2,4,null,null,1], k = 3\n        Output: 3\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        self.k = k\n        self.res = None\n        self.helper(root)\n        return self.res"
    },
    {
        "number": 231,
        "title": "Power of Two",
        "difficulty": 0,
        "prompt": "class Solution:\n    def isPowerOfTwo(self, n: int) -> bool:\n        \"\"\"\n        Given an integer n, return true if it is a power of two. Otherwise, return false.\n        An integer n is a power of two, if there exists an integer x such that n == 2x.\n        Example 1:\n        Input: n = 1\n        Output: true\n        Explanation: 20 = 1\n        Example 2:\n        Input: n = 16\n        Output: true\n        Explanation: 24 = 16\n        Example 3:\n        Input: n = 3\n        Output: false\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        if n == 0:\n            return False\n        while n % 2 == 0:\n            n = n / 2\n        return n == 1"
    },
    {
        "number": 231,
        "title": "Power of Two",
        "difficulty": 0,
        "prompt": "class Solution:\n    def isPowerOfTwo(self, n: int) -> bool:\n        \"\"\"\n        Given an integer n, return true if it is a power of two. Otherwise, return false.\n        An integer n is a power of two, if there exists an integer x such that n == 2x.\n        Example 1:\n        Input: n = 1\n        Output: true\n        Explanation: 20 = 1\n        Example 2:\n        Input: n = 16\n        Output: true\n        Explanation: 24 = 16\n        Example 3:\n        Input: n = 3\n        Output: false\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        if n == 0:\n            return False\n        while n % 2 == 0:\n            n /= 2\n        return n == 1"
    },
    {
        "number": 232,
        "title": "Implement Queue using Stacks",
        "difficulty": 0,
        "prompt": "class MyQueue:\n    def __init__(self):\n    def push(self, x: int) -> None:\n    def pop(self) -> int:\n    def peek(self) -> int:\n    def empty(self) -> bool:\n        \"\"\"\n        Implement a first in first out (FIFO) queue using only two stacks. The implemented queue should support all the functions of a normal queue (push, peek, pop, and empty).\n        Implement the MyQueue class:\n            void push(int x) Pushes element x to the back of the queue.\n            int pop() Removes the element from the front of the queue and returns it.\n            int peek() Returns the element at the front of the queue.\n            boolean empty() Returns true if the queue is empty, false otherwise.\n        Notes:\n            You must use only standard operations of a stack, which means only push to top, peek/pop from top, size, and is empty operations are valid.\n            Depending on your language, the stack may not be supported natively. You may simulate a stack using a list or deque (double-ended queue) as long as you use only a stack's standard operations.\n        Example 1:\n        Input\n        [\"MyQueue\", \"push\", \"push\", \"peek\", \"pop\", \"empty\"]\n        [[], [1], [2], [], [], []]\n        Output\n        [null, null, null, 1, 1, false]\n        Explanation\n        MyQueue myQueue = new MyQueue();\n        myQueue.push(1); // queue is: [1]\n        myQueue.push(2); // queue is: [1, 2] (leftmost is front of the queue)\n        myQueue.peek(); // return 1\n        myQueue.pop(); // return 1, queue is [2]\n        myQueue.empty(); // return false\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        self.stack_in = []\n        self.stack_out = []\n    def push(self, x: int) -> None:\n        self.stack_in.append(x)\n    def pop(self) -> int:\n        if not self.stack_out:\n            while self.stack_in:\n                self.stack_out.append(self.stack_in.pop())\n        return self.stack_out.pop()\n    def peek(self) -> int:\n        if not self.stack_out:\n            while self.stack_in:\n                self.stack_out.append(self.stack_in.pop())\n        return self.stack_out[-1]\n    def empty(self) -> bool:\n        return not self.stack_in and not self.stack_out\n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        "
    },
    {
        "number": 232,
        "title": "Implement Queue using Stacks",
        "difficulty": 0,
        "prompt": "class MyQueue:\n    def __init__(self):\n    def push(self, x: int) -> None:\n    def pop(self) -> int:\n    def peek(self) -> int:\n    def empty(self) -> bool:\n        \"\"\"\n        Implement a first in first out (FIFO) queue using only two stacks. The implemented queue should support all the functions of a normal queue (push, peek, pop, and empty).\n        Implement the MyQueue class:\n            void push(int x) Pushes element x to the back of the queue.\n            int pop() Removes the element from the front of the queue and returns it.\n            int peek() Returns the element at the front of the queue.\n            boolean empty() Returns true if the queue is empty, false otherwise.\n        Notes:\n            You must use only standard operations of a stack, which means only push to top, peek/pop from top, size, and is empty operations are valid.\n            Depending on your language, the stack may not be supported natively. You may simulate a stack using a list or deque (double-ended queue) as long as you use only a stack's standard operations.\n        Example 1:\n        Input\n        [\"MyQueue\", \"push\", \"push\", \"peek\", \"pop\", \"empty\"]\n        [[], [1], [2], [], [], []]\n        Output\n        [null, null, null, 1, 1, false]\n        Explanation\n        MyQueue myQueue = new MyQueue();\n        myQueue.push(1); // queue is: [1]\n        myQueue.push(2); // queue is: [1, 2] (leftmost is front of the queue)\n        myQueue.peek(); // return 1\n        myQueue.pop(); // return 1, queue is [2]\n        myQueue.empty(); // return false\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        \n        self.stack_in = []\n        self.stack_out = []\n        \n    def push(self, x: int) -> None:\n        self.stack_in.append(x)\n        \n    def pop(self) -> int:\n        if not self.stack_out:\n            while self.stack_in:\n                self.stack_out.append(self.stack_in.pop())\n        return self.stack_out.pop()\n        \n    def peek(self) -> int:\n        if not self.stack_out:\n            while self.stack_in:\n                self.stack_out.append(self.stack_in.pop())\n        return self.stack_out[-1]\n        \n    def empty(self) -> bool:\n        return not self.stack_in and not self.stack_out\n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        "
    },
    {
        "number": 233,
        "title": "Number of Digit One",
        "difficulty": 2,
        "prompt": "class Solution:\n    def countDigitOne(self, n: int) -> int:\n        \"\"\"\n        Given an integer n, count the total number of digit 1 appearing in all non-negative integers less than or equal to n.\n        Example 1:\n        Input: n = 13\n        Output: 6\n        Example 2:\n        Input: n = 0\n        Output: 0\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        # \u5c06n\u8f6c\u6362\u4e3a\u5b57\u7b26\u4e32\uff0c\u5229\u7528\u5b57\u7b26\u4e32\u7684count\u65b9\u6cd5\n        # \u65f6\u95f4\u590d\u6742\u5ea6O(n)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6O(n)\n        # \u5982\u679c\u662f\u6570\u5b57n\uff0c\u90a3\u4e48n\u7684\u6700\u5927\u503c\u5c31\u662f10^n-1\n        # \u5982\u679c\u662f\u5b57\u7b26\u4e32n\uff0c\u90a3\u4e48n\u7684\u6700\u5927\u503c\u5c31\u662f10^(n-1)\n        # \u6240\u4ee5\u53ef\u4ee5\u5c06n\u8f6c\u6362\u4e3a\u5b57\u7b26\u4e32\uff0c\u7136\u540e\u904d\u5386\u5b57\u7b26\u4e32\uff0c\u6bcf\u4e2a\u5b57\u7b26\u4e32\u4e2d\u76841\u7684\u4e2a\u6570\n        # \u5982\u679c\u662f\u6570\u5b57n\uff0c\u90a3\u4e48n\u7684\u6700\u5927\u503c\u5c31\u662f10^n-1\n        # \u5982\u679c\u662f\u5b57\u7b26\u4e32n\uff0c\u90a3\u4e48n\u7684\u6700\u5927\ufffd"
    },
    {
        "number": 233,
        "title": "Number of Digit One",
        "difficulty": 2,
        "prompt": "class Solution:\n    def countDigitOne(self, n: int) -> int:\n        \"\"\"\n        Given an integer n, count the total number of digit 1 appearing in all non-negative integers less than or equal to n.\n        Example 1:\n        Input: n = 13\n        Output: 6\n        Example 2:\n        Input: n = 0\n        Output: 0\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        if n < 0:\n            return 0\n        if n < 10:\n            return 1 if n == 1 else 0\n        count = 0\n        for i in range(1, n + 1):\n            count += self.countDigitOneHelper(i)\n        return count"
    },
    {
        "number": 234,
        "title": "Palindrome Linked List",
        "difficulty": 0,
        "prompt": "class Solution:\n    def isPalindrome(self, head: Optional[ListNode]) -> bool:\n        \"\"\"\n        Given the head of a singly linked list, return true if it is a palindrome or false otherwise.\n        Example 1:\n        Input: head = [1,2,2,1]\n        Output: true\n        Example 2:\n        Input: head = [1,2]\n        Output: false\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        if not head:\n            return True\n        slow = fast = head\n        while fast and fast.next:\n            slow = slow.next\n            fast = fast.next.next\n        prev = None\n        while slow:\n            next = slow.next\n            slow.next = prev\n            prev = slow\n            slow = next\n        while prev:\n            if prev.val!= head.val:\n                return False\n            prev = prev.next\n            head = head.next\n        return True\n<|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>"
    },
    {
        "number": 234,
        "title": "Palindrome Linked List",
        "difficulty": 0,
        "prompt": "class Solution:\n    def isPalindrome(self, head: Optional[ListNode]) -> bool:\n        \"\"\"\n        Given the head of a singly linked list, return true if it is a palindrome or false otherwise.\n        Example 1:\n        Input: head = [1,2,2,1]\n        Output: true\n        Example 2:\n        Input: head = [1,2]\n        Output: false\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        # 1. Reverse the second half of the linked list\n        # 2. Compare the first and second half nodes\n        # 3. If they are not equal, return False\n        # 4. If they are equal, move ahead and continue to next nodes\n        # 5. Repeat the above steps until the end of the linked list\n        # 6. Return True if the linked list is a palindrome\n        # 7. If the linked list is not a palindrome, return False\n        \n        # Time complexity: O(n)\n        # Space complexity: O(n)\n        \n        # 1. Reverse the second half of the linked list\n        # 2. Compare the first and second half nodes\n        # 3. If they are not equal, return False\n        # 4. If they are equal, move ahead and continue to next nodes\n        # 5. Repeat the above steps until the end of the linked list\n        # 6. Return True if the linked list is a palindrome\n        # 7. If the linked list is not a palindrome, return False\n        \n        # Time complexity: O(n)\n        # Space complexity: O(1)\n        \n        slow = fast = head\n        \n        # 1. Reverse the second half of the linked list\n        while fast and fast.next:\n            fast = fast.next.next\n            slow"
    },
    {
        "number": 235,
        "title": "Lowest Common Ancestor of a Binary Search Tree",
        "difficulty": 1,
        "prompt": "class Solution:\n    def lowestCommonAncestor(self, root: 'TreeNode', p: 'TreeNode', q: 'TreeNode') -> 'TreeNode':\n        \"\"\"\n        Given a binary search tree (BST), find the lowest common ancestor (LCA) node of two given nodes in the BST.\n        According to the definition of LCA on Wikipedia: \u201cThe lowest common ancestor is defined between two nodes p and q as the lowest node in T that has both p and q as descendants (where we allow a node to be a descendant of itself).\u201d\n        Example 1:\n        Input: root = [6,2,8,0,4,7,9,null,null,3,5], p = 2, q = 8\n        Output: 6\n        Explanation: The LCA of nodes 2 and 8 is 6.\n        Example 2:\n        Input: root = [6,2,8,0,4,7,9,null,null,3,5], p = 2, q = 4\n        Output: 2\n        Explanation: The LCA of nodes 2 and 4 is 2, since a node can be a descendant of itself according to the LCA definition.\n        Example 3:\n        Input: root = [2,1], p = 2, q = 1\n        Output: 2\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        # Solution 1: Recursion\n        # Time O(n)\n        # Space O(n)\n        # def helper(node, p, q):\n        #     if not node:\n        #         return None\n        #     if node.val == p.val or node.val == q.val:\n        #         return node\n        #     left = helper(node.left, p, q)\n        #     right = helper(node.right, p, q)\n        #     if left and right:\n        #         return node\n        #     if left:\n        #         return left\n        #     if right:\n        #         return right\n        #     return None\n        # return helper(root, p, q)"
    },
    {
        "number": 235,
        "title": "Lowest Common Ancestor of a Binary Search Tree",
        "difficulty": 1,
        "prompt": "class Solution:\n    def lowestCommonAncestor(self, root: 'TreeNode', p: 'TreeNode', q: 'TreeNode') -> 'TreeNode':\n        \"\"\"\n        Given a binary search tree (BST), find the lowest common ancestor (LCA) node of two given nodes in the BST.\n        According to the definition of LCA on Wikipedia: \u201cThe lowest common ancestor is defined between two nodes p and q as the lowest node in T that has both p and q as descendants (where we allow a node to be a descendant of itself).\u201d\n        Example 1:\n        Input: root = [6,2,8,0,4,7,9,null,null,3,5], p = 2, q = 8\n        Output: 6\n        Explanation: The LCA of nodes 2 and 8 is 6.\n        Example 2:\n        Input: root = [6,2,8,0,4,7,9,null,null,3,5], p = 2, q = 4\n        Output: 2\n        Explanation: The LCA of nodes 2 and 4 is 2, since a node can be a descendant of itself according to the LCA definition.\n        Example 3:\n        Input: root = [2,1], p = 2, q = 1\n        Output: 2\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        if not root:\n            return None\n        if root.val > p.val and root.val > q.val:\n            return self.lowestCommonAncestor(root.left, p, q)\n        if root.val < p.val and root.val < q.val:\n            return self.lowestCommonAncestor(root.right, p, q)\n        return root"
    },
    {
        "number": 236,
        "title": "Lowest Common Ancestor of a Binary Tree",
        "difficulty": 1,
        "prompt": "class Solution:\n    def lowestCommonAncestor(self, root: 'TreeNode', p: 'TreeNode', q: 'TreeNode') -> 'TreeNode':\n        \"\"\"\n        Given a binary tree, find the lowest common ancestor (LCA) of two given nodes in the tree.\n        According to the definition of LCA on Wikipedia: \u201cThe lowest common ancestor is defined between two nodes p and q as the lowest node in T that has both p and q as descendants (where we allow a node to be a descendant of itself).\u201d\n        Example 1:\n        Input: root = [3,5,1,6,2,0,8,null,null,7,4], p = 5, q = 1\n        Output: 3\n        Explanation: The LCA of nodes 5 and 1 is 3.\n        Example 2:\n        Input: root = [3,5,1,6,2,0,8,null,null,7,4], p = 5, q = 4\n        Output: 5\n        Explanation: The LCA of nodes 5 and 4 is 5, since a node can be a descendant of itself according to the LCA definition.\n        Example 3:\n        Input: root = [1,2], p = 1, q = 2\n        Output: 1\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        if not root:\n            return None\n        if root == p or root == q:\n            return root\n        left = self.lowestCommonAncestor(root.left, p, q)\n        right = self.lowestCommonAncestor(root.right, p, q)\n        if left and right:\n            return root\n        if left:\n            return left\n        if right:\n            return right\n        return None"
    },
    {
        "number": 236,
        "title": "Lowest Common Ancestor of a Binary Tree",
        "difficulty": 1,
        "prompt": "class Solution:\n    def lowestCommonAncestor(self, root: 'TreeNode', p: 'TreeNode', q: 'TreeNode') -> 'TreeNode':\n        \"\"\"\n        Given a binary tree, find the lowest common ancestor (LCA) of two given nodes in the tree.\n        According to the definition of LCA on Wikipedia: \u201cThe lowest common ancestor is defined between two nodes p and q as the lowest node in T that has both p and q as descendants (where we allow a node to be a descendant of itself).\u201d\n        Example 1:\n        Input: root = [3,5,1,6,2,0,8,null,null,7,4], p = 5, q = 1\n        Output: 3\n        Explanation: The LCA of nodes 5 and 1 is 3.\n        Example 2:\n        Input: root = [3,5,1,6,2,0,8,null,null,7,4], p = 5, q = 4\n        Output: 5\n        Explanation: The LCA of nodes 5 and 4 is 5, since a node can be a descendant of itself according to the LCA definition.\n        Example 3:\n        Input: root = [1,2], p = 1, q = 2\n        Output: 1\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        if not root:\n            return None\n        if root == p or root == q:\n            return root\n        left = self.lowestCommonAncestor(root.left, p, q)\n        right = self.lowestCommonAncestor(root.right, p, q)\n        if left and right:\n            return root\n        if left:\n            return left\n        if right:\n            return right\n        return None"
    },
    {
        "number": 237,
        "title": "Delete Node in a Linked List",
        "difficulty": 1,
        "prompt": "class Solution:\n    def deleteNode(self, node):\n        \"\"\"\n        :type node: ListNode\n        :rtype: void Do not return anything, modify node in-place instead.\n        There is a singly-linked list head and we want to delete a node node in it.\n        You are given the node to be deleted node. You will not be given access to the first node of head.\n        All the values of the linked list are unique, and it is guaranteed that the given node node is not the last node in the linked list.\n        Delete the given node. Note that by deleting the node, we do not mean removing it from memory. We mean:\n            The value of the given node should not exist in the linked list.\n            The number of nodes in the linked list should decrease by one.\n            All the values before node should be in the same order.\n            All the values after node should be in the same order.\n        Custom testing:\n            For the input, you should provide the entire linked list head and the node to be given node. node should not be the last node of the list and should be an actual node in the list.\n            We will build the linked list and pass the node to your function.\n            The output will be the entire list after calling your function.\n        Example 1:\n        Input: head = [4,5,1,9], node = 5\n        Output: [4,1,9]\n        Explanation: You are given the second node with value 5, the linked list should become 4 -> 1 -> 9 after calling your function.\n        Example 2:\n        Input: head = [4,5,1,9], node = 1\n        Output: [4,5,9]\n        Explanation: You are given the third node with value 1, the linked list should become 4 -> 5 -> 9 after calling your function.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        # Solution 1:\n        # if node.next is None:\n        #     node = None\n        # else:\n        #     node.val = node.next.val\n        #     node.next = node.next.next\n        # return head"
    },
    {
        "number": 237,
        "title": "Delete Node in a Linked List",
        "difficulty": 1,
        "prompt": "class Solution:\n    def deleteNode(self, node):\n        \"\"\"\n        :type node: ListNode\n        :rtype: void Do not return anything, modify node in-place instead.\n        There is a singly-linked list head and we want to delete a node node in it.\n        You are given the node to be deleted node. You will not be given access to the first node of head.\n        All the values of the linked list are unique, and it is guaranteed that the given node node is not the last node in the linked list.\n        Delete the given node. Note that by deleting the node, we do not mean removing it from memory. We mean:\n            The value of the given node should not exist in the linked list.\n            The number of nodes in the linked list should decrease by one.\n            All the values before node should be in the same order.\n            All the values after node should be in the same order.\n        Custom testing:\n            For the input, you should provide the entire linked list head and the node to be given node. node should not be the last node of the list and should be an actual node in the list.\n            We will build the linked list and pass the node to your function.\n            The output will be the entire list after calling your function.\n        Example 1:\n        Input: head = [4,5,1,9], node = 5\n        Output: [4,1,9]\n        Explanation: You are given the second node with value 5, the linked list should become 4 -> 1 -> 9 after calling your function.\n        Example 2:\n        Input: head = [4,5,1,9], node = 1\n        Output: [4,5,9]\n        Explanation: You are given the third node with value 1, the linked list should become 4 -> 5 -> 9 after calling your function.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        # If the node is the first node, then we need to change the head\n        if node == self.head:\n            self.head = self.head.next\n        else:\n            # We need to find the previous node of the node we want to delete\n            prev_node = self.head\n            while prev_node.next!= node:\n                prev_node = prev_node.next\n            prev_node.next = node.next\n        # We need to delete the node\n        node.val = None\n        node.next = None"
    },
    {
        "number": 238,
        "title": "Product of Array Except Self",
        "difficulty": 1,
        "prompt": "class Solution:\n    def productExceptSelf(self, nums: List[int]) -> List[int]:\n        \"\"\"\n        Given an integer array nums, return an array answer such that answer[i] is equal to the product of all the elements of nums except nums[i].\n        The product of any prefix or suffix of nums is guaranteed to fit in a 32-bit integer.\n        You must write an algorithm that runs in O(n) time and without using the division operation.\n        Example 1:\n        Input: nums = [1,2,3,4]\n        Output: [24,12,8,6]\n        Example 2:\n        Input: nums = [-1,1,0,-3,3]\n        Output: [0,0,9,0,0]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        # 1. Brute Force: Time Limit Exceeded\n        # Time: O(n^2)\n        # Space: O(n)\n        # result = []\n        # for i in range(len(nums)):\n        #     product = 1\n        #     for j in range(len(nums)):\n        #         if i!= j:\n        #             product *= nums[j]\n        #     result.append(product)\n        # return result"
    },
    {
        "number": 238,
        "title": "Product of Array Except Self",
        "difficulty": 1,
        "prompt": "class Solution:\n    def productExceptSelf(self, nums: List[int]) -> List[int]:\n        \"\"\"\n        Given an integer array nums, return an array answer such that answer[i] is equal to the product of all the elements of nums except nums[i].\n        The product of any prefix or suffix of nums is guaranteed to fit in a 32-bit integer.\n        You must write an algorithm that runs in O(n) time and without using the division operation.\n        Example 1:\n        Input: nums = [1,2,3,4]\n        Output: [24,12,8,6]\n        Example 2:\n        Input: nums = [-1,1,0,-3,3]\n        Output: [0,0,9,0,0]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        # O(n) time, O(1) space\n        # left[i] = product of all nums[0:i]\n        # right[i] = product of all nums[i+1:]\n        # answer[i] = left[i] * right[i]\n        # left[i] = nums[0] *... * nums[i-1]\n        # right[i] = nums[i+1] *... * nums[n-1]\n        # answer[i] = left[i] * right[i]\n        # left[i] = nums[0] *... * nums[i-1]\n        # right[i] = nums[i+1] *... * nums[n-1]\n        # answer[i] = left[i] * right[i]\n        # left[i] = nums[0] *... * nums[i-1]\n        # right[i] = nums[i+1] *... * nums[n-1]\n        # answer[i] = left[i] * right[i]\n        # left[i] = nums[0] *... * nums[i-1]\n        # right[i] = nums[i+1] *"
    },
    {
        "number": 239,
        "title": "Sliding Window Maximum",
        "difficulty": 2,
        "prompt": "class Solution:\n    def maxSlidingWindow(self, nums: List[int], k: int) -> List[int]:\n        \"\"\"\n        You are given an array of integers nums, there is a sliding window of size k which is moving from the very left of the array to the very right. You can only see the k numbers in the window. Each time the sliding window moves right by one position.\n        Return the max sliding window.\n        Example 1:\n        Input: nums = [1,3,-1,-3,5,3,6,7], k = 3\n        Output: [3,3,5,5,6,7]\n        Explanation: \n        Window position                Max\n        ---------------               -----\n        [1  3  -1] -3  5  3  6  7       3\n         1 [3  -1  -3] 5  3  6  7       3\n         1  3 [-1  -3  5] 3  6  7       5\n         1  3  -1 [-3  5  3] 6  7       5\n         1  3  -1  -3 [5  3  6] 7       6\n         1  3  -1  -3  5 [3  6  7]      7\n        Example 2:\n        Input: nums = [1], k = 1\n        Output: [1]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        if not nums:\n            return []\n        if k == 1:\n            return nums\n        \n        # \u7528\u4e00\u4e2a\u53cc\u7aef\u961f\u5217\u6765\u4fdd\u5b58\u6700\u5927\u503c\n        # \u53cc\u7aef\u961f\u5217\u7684\u5927\u5c0f\u4e3ak\n        # \u53cc\u7aef\u961f\u5217\u7684\u5c3e\u90e8\u4e3a\u6700\u5927\u503c\n        # \u53cc\u7aef\u961f\u5217\u7684\u5934\u90e8\u4e3a\u6700\u5c0f\u503c\n        # \u53cc\u7aef\u961f\u5217\u7684\u5c3e\u90e8\u4e3a\u6700\u5927\u503c\uff0c\u53ea\u6709\u5f53\u53cc\u7aef\u961f\u5217\u7684\u5c3e\u90e8\u5927\u4e8e\u7b49\u4e8e\u53cc\u7aef\u961f\u5217\u7684\u5934\u90e8\u65f6\uff0c\u624d\u4f1a\u66f4\u65b0\u6700\u5927\u503c\n        # \u53cc\u7aef\u961f\u5217\u7684\u5934\u90e8\u4e3a\u6700\u5c0f\u503c\uff0c\u53ea\u6709\u5f53\u53cc\u7aef\u961f\u5217\u7684\u5934\u90e8\u5c0f\u4e8e\u7b49\u4e8e\u53cc\u7aef\u961f\u5217\u7684\u5c3e\u90e8\u65f6\uff0c\u624d\u4f1a"
    },
    {
        "number": 239,
        "title": "Sliding Window Maximum",
        "difficulty": 2,
        "prompt": "class Solution:\n    def maxSlidingWindow(self, nums: List[int], k: int) -> List[int]:\n        \"\"\"\n        You are given an array of integers nums, there is a sliding window of size k which is moving from the very left of the array to the very right. You can only see the k numbers in the window. Each time the sliding window moves right by one position.\n        Return the max sliding window.\n        Example 1:\n        Input: nums = [1,3,-1,-3,5,3,6,7], k = 3\n        Output: [3,3,5,5,6,7]\n        Explanation: \n        Window position                Max\n        ---------------               -----\n        [1  3  -1] -3  5  3  6  7       3\n         1 [3  -1  -3] 5  3  6  7       3\n         1  3 [-1  -3  5] 3  6  7       5\n         1  3  -1 [-3  5  3] 6  7       5\n         1  3  -1  -3 [5  3  6] 7       6\n         1  3  -1  -3  5 [3  6  7]      7\n        Example 2:\n        Input: nums = [1], k = 1\n        Output: [1]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        if not nums or k == 0:\n            return []\n        if k == 1:\n            return nums\n        \n        # \u521d\u59cb\u5316\u7a97\u53e3\n        window = nums[:k]\n        res = max(window)\n        \n        # \u53f3\u79fb\u7a97\u53e3\n        for i in range(k, len(nums)):\n            # \u5220\u9664\u7b2c\u4e00\u4e2a\u5143\u7d20\n            window.pop(0)\n            # \u52a0\u5165\u6700\u65b0\u5143\u7d20\n            window.append(nums[i])\n            res = max(res, nums[i])\n        return res\n    \n    def maxSlidingWindow2(self, nums: List[int], k: int) -> List[int]:\n        \"\"\"\n        \u7ef4\u62a4\u4e00\u4e2a\u5355\u8c03\u6808\uff0c\u5355\u8c03\u6808\u4fdd\u5b58\u7a97\u53e3\u4e2d\u7684\u6700\u5927\u503c\n        \"\"\"\n        if not nums or k == 0:\n            return []\n        if k == 1:\n            return nums\n        \n        # \u521d\u59cb\u5316\u7a97\u53e3\n        window = nums[:k]\n"
    },
    {
        "number": 240,
        "title": "Search a 2D Matrix II",
        "difficulty": 1,
        "prompt": "class Solution:\n    def searchMatrix(self, matrix: List[List[int]], target: int) -> bool:\n        \"\"\"\n        Write an efficient algorithm that searches for a value target in an m x n integer matrix matrix. This matrix has the following properties:\n            Integers in each row are sorted in ascending from left to right.\n            Integers in each column are sorted in ascending from top to bottom.\n        Example 1:\n        Input: matrix = [[1,4,7,11,15],[2,5,8,12,19],[3,6,9,16,22],[10,13,14,17,24],[18,21,23,26,30]], target = 5\n        Output: true\n        Example 2:\n        Input: matrix = [[1,4,7,11,15],[2,5,8,12,19],[3,6,9,16,22],[10,13,14,17,24],[18,21,23,26,30]], target = 20\n        Output: false\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        # binary search\n        # time O(log(m+n))\n        # space O(1)\n        if not matrix:\n            return False\n        m, n = len(matrix), len(matrix[0])\n        left, right = 0, m * n - 1\n        while left <= right:\n            mid = left + (right - left) // 2\n            num = matrix[mid // n][mid % n]\n            if num == target:\n                return True\n            elif num < target:\n                left = mid + 1\n            else:\n                right = mid - 1\n        return False\n<|endoftext|>"
    },
    {
        "number": 240,
        "title": "Search a 2D Matrix II",
        "difficulty": 1,
        "prompt": "class Solution:\n    def searchMatrix(self, matrix: List[List[int]], target: int) -> bool:\n        \"\"\"\n        Write an efficient algorithm that searches for a value target in an m x n integer matrix matrix. This matrix has the following properties:\n            Integers in each row are sorted in ascending from left to right.\n            Integers in each column are sorted in ascending from top to bottom.\n        Example 1:\n        Input: matrix = [[1,4,7,11,15],[2,5,8,12,19],[3,6,9,16,22],[10,13,14,17,24],[18,21,23,26,30]], target = 5\n        Output: true\n        Example 2:\n        Input: matrix = [[1,4,7,11,15],[2,5,8,12,19],[3,6,9,16,22],[10,13,14,17,24],[18,21,23,26,30]], target = 20\n        Output: false\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        if not matrix:\n            return False\n        m, n = len(matrix), len(matrix[0])\n        i, j = 0, n - 1\n        while i < m and j >= 0:\n            if matrix[i][j] == target:\n                return True\n            elif matrix[i][j] < target:\n                i += 1\n            else:\n                j -= 1\n        return False\n<|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>"
    },
    {
        "number": 241,
        "title": "Different Ways to Add Parentheses",
        "difficulty": 1,
        "prompt": "class Solution:\n    def diffWaysToCompute(self, expression: str) -> List[int]:\n        \"\"\"\n        Given a string expression of numbers and operators, return all possible results from computing all the different possible ways to group numbers and operators. You may return the answer in any order.\n        The test cases are generated such that the output values fit in a 32-bit integer and the number of different results does not exceed 104.\n        Example 1:\n        Input: expression = \"2-1-1\"\n        Output: [0,2]\n        Explanation:\n        ((2-1)-1) = 0 \n        (2-(1-1)) = 2\n        Example 2:\n        Input: expression = \"2*3-4*5\"\n        Output: [-34,-14,-10,-10,10]\n        Explanation:\n        (2*(3-(4*5))) = -34 \n        ((2*3)-(4*5)) = -14 \n        ((2*(3-4))*5) = -10 \n        (2*((3-4)*5)) = -10 \n        (((2*3)-4)*5) = 10\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        if expression.isdigit():\n            return [int(expression)]\n        res = []\n        for i in range(len(expression)):\n            if expression[i] in '+-*':\n                left = self.diffWaysToCompute(expression[:i])\n                right = self.diffWaysToCompute(expression[i+1:])\n                for l in left:\n                    for r in right:\n                        if expression[i] == '+':\n                            res.append(l+r)\n                        elif expression[i] == '-':\n                            res.append(l-r)\n                        else:\n                            res.append(l*r)\n        return res\n<|endoftext|>"
    },
    {
        "number": 241,
        "title": "Different Ways to Add Parentheses",
        "difficulty": 1,
        "prompt": "class Solution:\n    def diffWaysToCompute(self, expression: str) -> List[int]:\n        \"\"\"\n        Given a string expression of numbers and operators, return all possible results from computing all the different possible ways to group numbers and operators. You may return the answer in any order.\n        The test cases are generated such that the output values fit in a 32-bit integer and the number of different results does not exceed 104.\n        Example 1:\n        Input: expression = \"2-1-1\"\n        Output: [0,2]\n        Explanation:\n        ((2-1)-1) = 0 \n        (2-(1-1)) = 2\n        Example 2:\n        Input: expression = \"2*3-4*5\"\n        Output: [-34,-14,-10,-10,10]\n        Explanation:\n        (2*(3-(4*5))) = -34 \n        ((2*3)-(4*5)) = -14 \n        ((2*(3-4))*5) = -10 \n        (2*((3-4)*5)) = -10 \n        (((2*3)-4)*5) = 10\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        if expression.isdigit():\n            return [int(expression)]\n        res = []\n        for i in range(len(expression)):\n            if expression[i] in '+-*':\n                left = self.diffWaysToCompute(expression[:i])\n                right = self.diffWaysToCompute(expression[i+1:])\n                for l in left:\n                    for r in right:\n                        if expression[i] == '+':\n                            res.append(l+r)\n                        elif expression[i] == '-':\n                            res.append(l-r)\n                        else:\n                            res.append(l*r)\n        return res\n<|endoftext|>"
    },
    {
        "number": 242,
        "title": "Valid Anagram",
        "difficulty": 0,
        "prompt": "class Solution:\n    def isAnagram(self, s: str, t: str) -> bool:\n        \"\"\"\n        Given two strings s and t, return true if t is an anagram of s, and false otherwise.\n        An Anagram is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once.\n        Example 1:\n        Input: s = \"anagram\", t = \"nagaram\"\n        Output: true\n        Example 2:\n        Input: s = \"rat\", t = \"car\"\n        Output: false\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        if len(s)!= len(t):\n            return False\n        s_dict = {}\n        t_dict = {}\n        for i in range(len(s)):\n            if s[i] not in s_dict:\n                s_dict[s[i]] = 1\n            else:\n                s_dict[s[i]] += 1\n            if t[i] not in t_dict:\n                t_dict[t[i]] = 1\n            else:\n                t_dict[t[i]] += 1\n        return s_dict == t_dict"
    },
    {
        "number": 242,
        "title": "Valid Anagram",
        "difficulty": 0,
        "prompt": "class Solution:\n    def isAnagram(self, s: str, t: str) -> bool:\n        \"\"\"\n        Given two strings s and t, return true if t is an anagram of s, and false otherwise.\n        An Anagram is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once.\n        Example 1:\n        Input: s = \"anagram\", t = \"nagaram\"\n        Output: true\n        Example 2:\n        Input: s = \"rat\", t = \"car\"\n        Output: false\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        if len(s)!= len(t):\n            return False\n        s_dict = {}\n        t_dict = {}\n        for i in range(len(s)):\n            if s[i] not in s_dict:\n                s_dict[s[i]] = 1\n            else:\n                s_dict[s[i]] += 1\n            if t[i] not in t_dict:\n                t_dict[t[i]] = 1\n            else:\n                t_dict[t[i]] += 1\n        return s_dict == t_dict"
    },
    {
        "number": 257,
        "title": "Binary Tree Paths",
        "difficulty": 0,
        "prompt": "class Solution:\n    def binaryTreePaths(self, root: Optional[TreeNode]) -> List[str]:\n        \"\"\"\n        Given the root of a binary tree, return all root-to-leaf paths in any order.\n        A leaf is a node with no children.\n        Example 1:\n        Input: root = [1,2,3,null,5]\n        Output: [\"1->2->5\",\"1->3\"]\n        Example 2:\n        Input: root = [1]\n        Output: [\"1\"]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        if not root:\n            return []\n        if not root.left and not root.right:\n            return [str(root.val)]\n        paths = []\n        for path in self.binaryTreePaths(root.left):\n            paths.append(str(root.val) + '->' + path)\n        for path in self.binaryTreePaths(root.right):\n            paths.append(str(root.val) + '->' + path)\n        return paths\n<|endoftext|>"
    },
    {
        "number": 257,
        "title": "Binary Tree Paths",
        "difficulty": 0,
        "prompt": "class Solution:\n    def binaryTreePaths(self, root: Optional[TreeNode]) -> List[str]:\n        \"\"\"\n        Given the root of a binary tree, return all root-to-leaf paths in any order.\n        A leaf is a node with no children.\n        Example 1:\n        Input: root = [1,2,3,null,5]\n        Output: [\"1->2->5\",\"1->3\"]\n        Example 2:\n        Input: root = [1]\n        Output: [\"1\"]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        if not root:\n            return []\n        if not root.left and not root.right:\n            return [str(root.val)]\n        return [str(root.val) + '->' + path for path in self.binaryTreePaths(root.left)] + \\\n               [str(root.val) + '->' + path for path in self.binaryTreePaths(root.right)]\n<|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>"
    },
    {
        "number": 258,
        "title": "Add Digits",
        "difficulty": 0,
        "prompt": "class Solution:\n    def addDigits(self, num: int) -> int:\n        \"\"\"\n        Given an integer num, repeatedly add all its digits until the result has only one digit, and return it.\n        Example 1:\n        Input: num = 38\n        Output: 2\n        Explanation: The process is\n        38 --> 3 + 8 --> 11\n        11 --> 1 + 1 --> 2 \n        Since 2 has only one digit, return it.\n        Example 2:\n        Input: num = 0\n        Output: 0\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        if num == 0:\n            return 0\n        if num % 9 == 0:\n            return 9\n        return num % 9"
    },
    {
        "number": 258,
        "title": "Add Digits",
        "difficulty": 0,
        "prompt": "class Solution:\n    def addDigits(self, num: int) -> int:\n        \"\"\"\n        Given an integer num, repeatedly add all its digits until the result has only one digit, and return it.\n        Example 1:\n        Input: num = 38\n        Output: 2\n        Explanation: The process is\n        38 --> 3 + 8 --> 11\n        11 --> 1 + 1 --> 2 \n        Since 2 has only one digit, return it.\n        Example 2:\n        Input: num = 0\n        Output: 0\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        if num == 0:\n            return 0\n        elif num % 9 == 0:\n            return 9\n        else:\n            return num % 9"
    },
    {
        "number": 260,
        "title": "Single Number III",
        "difficulty": 1,
        "prompt": "class Solution:\n    def singleNumber(self, nums: List[int]) -> List[int]:\n        \"\"\"\n        Given an integer array nums, in which exactly two elements appear only once and all the other elements appear exactly twice. Find the two elements that appear only once. You can return the answer in any order.\n        You must write an algorithm that runs in linear runtime complexity and uses only constant extra space.\n        Example 1:\n        Input: nums = [1,2,1,3,2,5]\n        Output: [3,5]\n        Explanation:  [5, 3] is also a valid answer.\n        Example 2:\n        Input: nums = [-1,0]\n        Output: [-1,0]\n        Example 3:\n        Input: nums = [0,1]\n        Output: [1,0]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        # \u5f02\u6216\u8fd0\u7b97\n        # \u5f02\u6216\u8fd0\u7b97\u662f\u628a\u4e24\u4e2a\u6570\u5b57\u5f02\u6216\u540e\uff0c\u7ed3\u679c\u4e3a0\uff0c\n        # \u5982\u679c\u4e24\u4e2a\u6570\u5b57\u76f8\u540c\uff0c\u5219\u7ed3\u679c\u4e3a0\uff0c\n        # \u5982\u679c\u4e24\u4e2a\u6570\u5b57\u4e0d\u540c\uff0c\u5219\u7ed3\u679c\u4e3a1\n        # \u5f02\u6216\u8fd0\u7b97\u7684\u6027\u8d28\uff1a\n        # \u5f02\u6216\u8fd0\u7b97\u7684\u6027\u8d28\uff1a\n        # \u5f02\u6216\u8fd0\u7b97\u7684\u6027\u8d28\uff1a\n        # \u5f02\u6216\u8fd0\u7b97\u7684\u6027\u8d28\uff1a\n        # \u5f02\u6216\u8fd0\u7b97\u7684\u6027\u8d28\uff1a\n        # \u5f02\u6216\u8fd0\u7b97\u7684\u6027\u8d28\uff1a\n        # \u5f02\u6216\u8fd0\u7b97\u7684\u6027\u8d28\uff1a\n        # \u5f02\u6216\u8fd0\u7b97\u7684\u6027"
    },
    {
        "number": 260,
        "title": "Single Number III",
        "difficulty": 1,
        "prompt": "class Solution:\n    def singleNumber(self, nums: List[int]) -> List[int]:\n        \"\"\"\n        Given an integer array nums, in which exactly two elements appear only once and all the other elements appear exactly twice. Find the two elements that appear only once. You can return the answer in any order.\n        You must write an algorithm that runs in linear runtime complexity and uses only constant extra space.\n        Example 1:\n        Input: nums = [1,2,1,3,2,5]\n        Output: [3,5]\n        Explanation:  [5, 3] is also a valid answer.\n        Example 2:\n        Input: nums = [-1,0]\n        Output: [-1,0]\n        Example 3:\n        Input: nums = [0,1]\n        Output: [1,0]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        # 1. XOR\n        # x ^ x = 0\n        # x ^ 0 = x\n        # x ^ y ^ y = x ^ y\n        # x ^ y ^ x = y\n        # 2. bit manipulation\n        # a ^ a = 0\n        # a ^ 0 = a\n        # a ^ b ^ b = a ^ b\n        # a ^ b ^ a = b\n        # 3. hash table\n        # a ^ a = 0\n        # a ^ 0 = a\n        # a ^ b ^ b = a ^ b\n        # a ^ b ^ a = b\n        # 4. bit manipulation\n        # a ^ a = 0\n        # a ^ 0 = a\n        # a ^ b ^ b = a ^ b\n        # a ^ b ^ a = b\n        # 5. hash table\n        # a ^ a = 0\n        # a ^ 0 = a\n        # a ^ b ^ b = a ^ b\n        # a ^ b ^ a = b\n        # 6. bit manipulation\n        # a ^ a = 0\n        # a ^ 0 = a\n        # a ^ b ^ b = a ^ b\n        # a ^ b ^ a = b\n        # 7. hash table\n        # a ^ a = 0\n        # a ^ 0 = a\n        # a ^ b ^ b"
    },
    {
        "number": 263,
        "title": "Ugly Number",
        "difficulty": 0,
        "prompt": "class Solution:\n    def isUgly(self, n: int) -> bool:\n        \"\"\"\n        An ugly number is a positive integer whose prime factors are limited to 2, 3, and 5.\n        Given an integer n, return true if n is an ugly number.\n        Example 1:\n        Input: n = 6\n        Output: true\n        Explanation: 6 = 2 \u00d7 3\n        Example 2:\n        Input: n = 1\n        Output: true\n        Explanation: 1 has no prime factors, therefore all of its prime factors are limited to 2, 3, and 5.\n        Example 3:\n        Input: n = 14\n        Output: false\n        Explanation: 14 is not ugly since it includes the prime factor 7.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        if n <= 0:\n            return False\n        while n % 2 == 0:\n            n = n // 2\n        while n % 3 == 0:\n            n = n // 3\n        while n % 5 == 0:\n            n = n // 5\n        return n == 1"
    },
    {
        "number": 263,
        "title": "Ugly Number",
        "difficulty": 0,
        "prompt": "class Solution:\n    def isUgly(self, n: int) -> bool:\n        \"\"\"\n        An ugly number is a positive integer whose prime factors are limited to 2, 3, and 5.\n        Given an integer n, return true if n is an ugly number.\n        Example 1:\n        Input: n = 6\n        Output: true\n        Explanation: 6 = 2 \u00d7 3\n        Example 2:\n        Input: n = 1\n        Output: true\n        Explanation: 1 has no prime factors, therefore all of its prime factors are limited to 2, 3, and 5.\n        Example 3:\n        Input: n = 14\n        Output: false\n        Explanation: 14 is not ugly since it includes the prime factor 7.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        if n <= 0:\n            return False\n        while n % 2 == 0:\n            n = n // 2\n        while n % 3 == 0:\n            n = n // 3\n        while n % 5 == 0:\n            n = n // 5\n        return n == 1"
    },
    {
        "number": 264,
        "title": "Ugly Number II",
        "difficulty": 1,
        "prompt": "class Solution:\n    def nthUglyNumber(self, n: int) -> int:\n        \"\"\"\n        An ugly number is a positive integer whose prime factors are limited to 2, 3, and 5.\n        Given an integer n, return the nth ugly number.\n        Example 1:\n        Input: n = 10\n        Output: 12\n        Explanation: [1, 2, 3, 4, 5, 6, 8, 9, 10, 12] is the sequence of the first 10 ugly numbers.\n        Example 2:\n        Input: n = 1\n        Output: 1\n        Explanation: 1 has no prime factors, therefore all of its prime factors are limited to 2, 3, and 5.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        if n == 1:\n            return 1\n        dp = [0] * (n + 1)\n        dp[1] = 1\n        p2, p3, p5 = 1, 1, 1\n        for i in range(2, n + 1):\n            dp[i] = min(p2, p3, p5)\n            if dp[i] == p2:\n                p2 += 1\n            if dp[i] == p3:\n                p3 += 1\n            if dp[i] == p5:\n                p5 += 1\n        return dp[n]"
    },
    {
        "number": 264,
        "title": "Ugly Number II",
        "difficulty": 1,
        "prompt": "class Solution:\n    def nthUglyNumber(self, n: int) -> int:\n        \"\"\"\n        An ugly number is a positive integer whose prime factors are limited to 2, 3, and 5.\n        Given an integer n, return the nth ugly number.\n        Example 1:\n        Input: n = 10\n        Output: 12\n        Explanation: [1, 2, 3, 4, 5, 6, 8, 9, 10, 12] is the sequence of the first 10 ugly numbers.\n        Example 2:\n        Input: n = 1\n        Output: 1\n        Explanation: 1 has no prime factors, therefore all of its prime factors are limited to 2, 3, and 5.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        if n == 1:\n            return 1\n        ugly = [1]\n        i2, i3, i5 = 0, 0, 0\n        while len(ugly) < n:\n            while ugly[i2] * 2 <= ugly[-1]:\n                i2 += 1\n            while ugly[i3] * 3 <= ugly[-1]:\n                i3 += 1\n            while ugly[i5] * 5 <= ugly[-1]:\n                i5 += 1\n            ugly.append(min(ugly[i2] * 2, ugly[i3] * 3, ugly[i5] * 5))\n        return ugly[-1]"
    },
    {
        "number": 268,
        "title": "Missing Number",
        "difficulty": 0,
        "prompt": "class Solution:\n    def missingNumber(self, nums: List[int]) -> int:\n        \"\"\"\n        Given an array nums containing n distinct numbers in the range [0, n], return the only number in the range that is missing from the array.\n        Example 1:\n        Input: nums = [3,0,1]\n        Output: 2\n        Explanation: n = 3 since there are 3 numbers, so all numbers are in the range [0,3]. 2 is the missing number in the range since it does not appear in nums.\n        Example 2:\n        Input: nums = [0,1]\n        Output: 2\n        Explanation: n = 2 since there are 2 numbers, so all numbers are in the range [0,2]. 2 is the missing number in the range since it does not appear in nums.\n        Example 3:\n        Input: nums = [9,6,4,2,3,5,7,0,1]\n        Output: 8\n        Explanation: n = 9 since there are 9 numbers, so all numbers are in the range [0,9]. 8 is the missing number in the range since it does not appear in nums.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        n = len(nums)\n        return n * (n + 1) // 2 - sum(nums)"
    },
    {
        "number": 268,
        "title": "Missing Number",
        "difficulty": 0,
        "prompt": "class Solution:\n    def missingNumber(self, nums: List[int]) -> int:\n        \"\"\"\n        Given an array nums containing n distinct numbers in the range [0, n], return the only number in the range that is missing from the array.\n        Example 1:\n        Input: nums = [3,0,1]\n        Output: 2\n        Explanation: n = 3 since there are 3 numbers, so all numbers are in the range [0,3]. 2 is the missing number in the range since it does not appear in nums.\n        Example 2:\n        Input: nums = [0,1]\n        Output: 2\n        Explanation: n = 2 since there are 2 numbers, so all numbers are in the range [0,2]. 2 is the missing number in the range since it does not appear in nums.\n        Example 3:\n        Input: nums = [9,6,4,2,3,5,7,0,1]\n        Output: 8\n        Explanation: n = 9 since there are 9 numbers, so all numbers are in the range [0,9]. 8 is the missing number in the range since it does not appear in nums.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        n = len(nums)\n        return n * (n + 1) // 2 - sum(nums)"
    },
    {
        "number": 273,
        "title": "Integer to English Words",
        "difficulty": 2,
        "prompt": "class Solution:\n    def numberToWords(self, num: int) -> str:\n        \"\"\"\n        Convert a non-negative integer num to its English words representation.\n        Example 1:\n        Input: num = 123\n        Output: \"One Hundred Twenty Three\"\n        Example 2:\n        Input: num = 12345\n        Output: \"Twelve Thousand Three Hundred Forty Five\"\n        Example 3:\n        Input: num = 1234567\n        Output: \"One Million Two Hundred Thirty Four Thousand Five Hundred Sixty Seven\"\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        if num == 0:\n            return \"Zero\"\n        res = \"\"\n        d = {1: \"One\", 2: \"Two\", 3: \"Three\", 4: \"Four\", 5: \"Five\", 6: \"Six\", 7: \"Seven\", 8: \"Eight\", 9: \"Nine\",\n             10: \"Ten\", 11: \"Eleven\", 12: \"Twelve\", 13: \"Thirteen\", 14: \"Fourteen\", 15: \"Fifteen\", 16: \"Sixteen\",\n             17: \"Seventeen\", 18: \"Eighteen\", 19: \"Nineteen\", 20: \"Twenty\", 30: \"Thirty\", 40: \"Forty\", 50: \"Fifty\",\n             60: \"Sixty\", 70: \"Seventy\", 80: \"Eighty\", 90: \"Ninety\"}\n        k = 1000\n        m = k * 1000\n        b = m * 1000\n        t = b * 1000"
    },
    {
        "number": 273,
        "title": "Integer to English Words",
        "difficulty": 2,
        "prompt": "class Solution:\n    def numberToWords(self, num: int) -> str:\n        \"\"\"\n        Convert a non-negative integer num to its English words representation.\n        Example 1:\n        Input: num = 123\n        Output: \"One Hundred Twenty Three\"\n        Example 2:\n        Input: num = 12345\n        Output: \"Twelve Thousand Three Hundred Forty Five\"\n        Example 3:\n        Input: num = 1234567\n        Output: \"One Million Two Hundred Thirty Four Thousand Five Hundred Sixty Seven\"\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        if num == 0:\n            return \"Zero\"\n        res = \"\"\n        d = {1: \"One\", 2: \"Two\", 3: \"Three\", 4: \"Four\", 5: \"Five\", 6: \"Six\", 7: \"Seven\", 8: \"Eight\", 9: \"Nine\",\n             10: \"Ten\", 11: \"Eleven\", 12: \"Twelve\", 13: \"Thirteen\", 14: \"Fourteen\", 15: \"Fifteen\", 16: \"Sixteen\",\n             17: \"Seventeen\", 18: \"Eighteen\", 19: \"Nineteen\", 20: \"Twenty\", 30: \"Thirty\", 40: \"Forty\", 50: \"Fifty\",\n             60: \"Sixty\", 70: \"Seventy\", 80: \"Eighty\", 90: \"Ninety\"}\n        k = 1000\n        m = k * 1000\n        b = m * 1000\n        t = b * 1000"
    },
    {
        "number": 274,
        "title": "H-Index",
        "difficulty": 1,
        "prompt": "class Solution:\n    def hIndex(self, citations: List[int]) -> int:\n        \"\"\"\n        Given an array of integers citations where citations[i] is the number of citations a researcher received for their ith paper, return compute the researcher's h-index.\n        According to the definition of h-index on Wikipedia: A scientist has an index h if h of their n papers have at least h citations each, and the other n \u2212 h papers have no more than h citations each.\n        If there are several possible values for h, the maximum one is taken as the h-index.\n        Example 1:\n        Input: citations = [3,0,6,1,5]\n        Output: 3\n        Explanation: [3,0,6,1,5] means the researcher has 5 papers in total and each of them had received 3, 0, 6, 1, 5 citations respectively.\n        Since the researcher has 3 papers with at least 3 citations each and the remaining two with no more than 3 citations each, their h-index is 3.\n        Example 2:\n        Input: citations = [1,3,1]\n        Output: 1\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        # \u65b9\u6cd5\u4e00\uff1a\u66b4\u529b\u6cd5\n        # \u5bf9\u4e8e\u4e00\u4e2a\u6570\u7ec4\uff0c\u6c42\u5176\u4e2d\u6240\u6709\u6570\u5b57\u7684\u548c\uff0c\u7136\u540e\u6c42\u548c\u51cf\u53bb\u6700\u5927\u6570\u5b57\uff0c\u5c31\u662f\u7b54\u6848\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        # citations.sort()\n        # if not citations:\n        #     return 0\n        # n = len(citations)\n        # sum_ = 0\n        # for i in range(n):\n        #     sum_ += citations[i]\n        # return sum_ - max(citations)"
    },
    {
        "number": 274,
        "title": "H-Index",
        "difficulty": 1,
        "prompt": "class Solution:\n    def hIndex(self, citations: List[int]) -> int:\n        \"\"\"\n        Given an array of integers citations where citations[i] is the number of citations a researcher received for their ith paper, return compute the researcher's h-index.\n        According to the definition of h-index on Wikipedia: A scientist has an index h if h of their n papers have at least h citations each, and the other n \u2212 h papers have no more than h citations each.\n        If there are several possible values for h, the maximum one is taken as the h-index.\n        Example 1:\n        Input: citations = [3,0,6,1,5]\n        Output: 3\n        Explanation: [3,0,6,1,5] means the researcher has 5 papers in total and each of them had received 3, 0, 6, 1, 5 citations respectively.\n        Since the researcher has 3 papers with at least 3 citations each and the remaining two with no more than 3 citations each, their h-index is 3.\n        Example 2:\n        Input: citations = [1,3,1]\n        Output: 1\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        if not citations:\n            return 0\n        citations.sort()\n        n = len(citations)\n        for i in range(n):\n            if citations[i] >= n - i:\n                return n - i\n        return 0"
    },
    {
        "number": 275,
        "title": "H-Index II",
        "difficulty": 1,
        "prompt": "class Solution:\n    def hIndex(self, citations: List[int]) -> int:\n        \"\"\"\n        Given an array of integers citations where citations[i] is the number of citations a researcher received for their ith paper and citations is sorted in an ascending order, return compute the researcher's h-index.\n        According to the definition of h-index on Wikipedia: A scientist has an index h if h of their n papers have at least h citations each, and the other n \u2212 h papers have no more than h citations each.\n        If there are several possible values for h, the maximum one is taken as the h-index.\n        You must write an algorithm that runs in logarithmic time.\n        Example 1:\n        Input: citations = [0,1,3,5,6]\n        Output: 3\n        Explanation: [0,1,3,5,6] means the researcher has 5 papers in total and each of them had received 0, 1, 3, 5, 6 citations respectively.\n        Since the researcher has 3 papers with at least 3 citations each and the remaining two with no more than 3 citations each, their h-index is 3.\n        Example 2:\n        Input: citations = [1,2,100]\n        Output: 2\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        if not citations:\n            return 0\n        l, r = 0, len(citations) - 1\n        while l <= r:\n            mid = l + (r - l) // 2\n            if citations[mid] >= len(citations) - mid:\n                r = mid - 1\n            else:\n                l = mid + 1\n        return len(citations) - l"
    },
    {
        "number": 275,
        "title": "H-Index II",
        "difficulty": 1,
        "prompt": "class Solution:\n    def hIndex(self, citations: List[int]) -> int:\n        \"\"\"\n        Given an array of integers citations where citations[i] is the number of citations a researcher received for their ith paper and citations is sorted in an ascending order, return compute the researcher's h-index.\n        According to the definition of h-index on Wikipedia: A scientist has an index h if h of their n papers have at least h citations each, and the other n \u2212 h papers have no more than h citations each.\n        If there are several possible values for h, the maximum one is taken as the h-index.\n        You must write an algorithm that runs in logarithmic time.\n        Example 1:\n        Input: citations = [0,1,3,5,6]\n        Output: 3\n        Explanation: [0,1,3,5,6] means the researcher has 5 papers in total and each of them had received 0, 1, 3, 5, 6 citations respectively.\n        Since the researcher has 3 papers with at least 3 citations each and the remaining two with no more than 3 citations each, their h-index is 3.\n        Example 2:\n        Input: citations = [1,2,100]\n        Output: 2\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        if not citations:\n            return 0\n        l, r = 0, len(citations) - 1\n        while l <= r:\n            mid = (l + r) // 2\n            if citations[mid] >= len(citations) - mid:\n                r = mid - 1\n            else:\n                l = mid + 1\n        return len(citations) - l"
    },
    {
        "number": 278,
        "title": "First Bad Version",
        "difficulty": 0,
        "prompt": "class Solution:\n    def firstBadVersion(self, n: int) -> int:\n        \"\"\"\n        You are a product manager and currently leading a team to develop a new product. Unfortunately, the latest version of your product fails the quality check. Since each version is developed based on the previous version, all the versions after a bad version are also bad.\n        Suppose you have n versions [1, 2,..., n] and you want to find out the first bad one, which causes all the following ones to be bad.\n        You are given an API bool isBadVersion(version) which returns whether version is bad. Implement a function to find the first bad version. You should minimize the number of calls to the API.\n        Example 1:\n        Input: n = 5, bad = 4\n        Output: 4\n        Explanation:\n        call isBadVersion(3) -> false\n        call isBadVersion(5) -> true\n        call isBadVersion(4) -> true\n        Then 4 is the first bad version.\n        Example 2:\n        Input: n = 1, bad = 1\n        Output: 1\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        l, r = 1, n\n        while l < r:\n            mid = l + (r - l) // 2\n            if isBadVersion(mid):\n                r = mid\n            else:\n                l = mid + 1\n        return l"
    },
    {
        "number": 278,
        "title": "First Bad Version",
        "difficulty": 0,
        "prompt": "class Solution:\n    def firstBadVersion(self, n: int) -> int:\n        \"\"\"\n        You are a product manager and currently leading a team to develop a new product. Unfortunately, the latest version of your product fails the quality check. Since each version is developed based on the previous version, all the versions after a bad version are also bad.\n        Suppose you have n versions [1, 2,..., n] and you want to find out the first bad one, which causes all the following ones to be bad.\n        You are given an API bool isBadVersion(version) which returns whether version is bad. Implement a function to find the first bad version. You should minimize the number of calls to the API.\n        Example 1:\n        Input: n = 5, bad = 4\n        Output: 4\n        Explanation:\n        call isBadVersion(3) -> false\n        call isBadVersion(5) -> true\n        call isBadVersion(4) -> true\n        Then 4 is the first bad version.\n        Example 2:\n        Input: n = 1, bad = 1\n        Output: 1\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        left, right = 1, n\n        while left < right:\n            mid = left + (right - left) // 2\n            if isBadVersion(mid):\n                right = mid\n            else:\n                left = mid + 1\n        return left"
    },
    {
        "number": 279,
        "title": "Perfect Squares",
        "difficulty": 1,
        "prompt": "class Solution:\n    def numSquares(self, n: int) -> int:\n        \"\"\"\n        Given an integer n, return the least number of perfect square numbers that sum to n.\n        A perfect square is an integer that is the square of an integer; in other words, it is the product of some integer with itself. For example, 1, 4, 9, and 16 are perfect squares while 3 and 11 are not.\n        Example 1:\n        Input: n = 12\n        Output: 3\n        Explanation: 12 = 4 + 4 + 4.\n        Example 2:\n        Input: n = 13\n        Output: 2\n        Explanation: 13 = 4 + 9.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        # https://leetcode.com/problems/perfect-squares/discuss/113516/Python-DP-solution-with-explanation\n        dp = [float('inf')] * (n + 1)\n        dp[0] = 0\n        for i in range(1, n + 1):\n            j = 1\n            while j * j <= i:\n                dp[i] = min(dp[i], dp[i - j * j] + 1)\n                j += 1\n        return dp[-1]"
    },
    {
        "number": 279,
        "title": "Perfect Squares",
        "difficulty": 1,
        "prompt": "class Solution:\n    def numSquares(self, n: int) -> int:\n        \"\"\"\n        Given an integer n, return the least number of perfect square numbers that sum to n.\n        A perfect square is an integer that is the square of an integer; in other words, it is the product of some integer with itself. For example, 1, 4, 9, and 16 are perfect squares while 3 and 11 are not.\n        Example 1:\n        Input: n = 12\n        Output: 3\n        Explanation: 12 = 4 + 4 + 4.\n        Example 2:\n        Input: n = 13\n        Output: 2\n        Explanation: 13 = 4 + 9.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        # https://leetcode.com/problems/perfect-squares/discuss/109824/Python-DP-solution-with-explanation\n        # https://leetcode.com/problems/perfect-squares/discuss/109824/Python-DP-solution-with-explanation\n        # https://leetcode.com/problems/perfect-squares/discuss/109824/Python-DP-solution-with-explanation\n        # https://leetcode.com/problems/perfect-squares/discuss/109824/Python-DP-solution-with-explanation\n        # https://leetcode.com/problems/perfect-squares/discuss/109824/Python-DP-solution-with-explanation\n        # https://leetcode.com/problems/perfect-squares/discuss/109824/Python-DP-solution-with-explanation\n        # https://leetcode.com/problems/perfect-squares/discuss/109824/Python-DP-solution-with-explanation\n        # https://leetcode.com/problems/perfect-squares/discuss/109824/Python-DP-solution-with-"
    },
    {
        "number": 282,
        "title": "Expression Add Operators",
        "difficulty": 2,
        "prompt": "class Solution:\n    def addOperators(self, num: str, target: int) -> List[str]:\n        \"\"\"\n        Given a string num that contains only digits and an integer target, return all possibilities to insert the binary operators '+', '-', and/or '*' between the digits of num so that the resultant expression evaluates to the target value.\n        Note that operands in the returned expressions should not contain leading zeros.\n        Example 1:\n        Input: num = \"123\", target = 6\n        Output: [\"1*2*3\",\"1+2+3\"]\n        Explanation: Both \"1*2*3\" and \"1+2+3\" evaluate to 6.\n        Example 2:\n        Input: num = \"232\", target = 8\n        Output: [\"2*3+2\",\"2+3*2\"]\n        Explanation: Both \"2*3+2\" and \"2+3*2\" evaluate to 8.\n        Example 3:\n        Input: num = \"3456237490\", target = 9191\n        Output: []\n        Explanation: There are no expressions that can be created from \"3456237490\" to evaluate to 9191.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        self.res = []\n        self.target = target\n        self.dfs(num, 0, 0, 0, 0, '')\n        return self.res"
    },
    {
        "number": 282,
        "title": "Expression Add Operators",
        "difficulty": 2,
        "prompt": "class Solution:\n    def addOperators(self, num: str, target: int) -> List[str]:\n        \"\"\"\n        Given a string num that contains only digits and an integer target, return all possibilities to insert the binary operators '+', '-', and/or '*' between the digits of num so that the resultant expression evaluates to the target value.\n        Note that operands in the returned expressions should not contain leading zeros.\n        Example 1:\n        Input: num = \"123\", target = 6\n        Output: [\"1*2*3\",\"1+2+3\"]\n        Explanation: Both \"1*2*3\" and \"1+2+3\" evaluate to 6.\n        Example 2:\n        Input: num = \"232\", target = 8\n        Output: [\"2*3+2\",\"2+3*2\"]\n        Explanation: Both \"2*3+2\" and \"2+3*2\" evaluate to 8.\n        Example 3:\n        Input: num = \"3456237490\", target = 9191\n        Output: []\n        Explanation: There are no expressions that can be created from \"3456237490\" to evaluate to 9191.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        self.res = []\n        self.target = target\n        self.dfs(num, 0, 0, 0, 0, '')\n        return self.res"
    },
    {
        "number": 283,
        "title": "Move Zeroes",
        "difficulty": 0,
        "prompt": "class Solution:\n    def moveZeroes(self, nums: List[int]) -> None:\n        \"\"\"\n        Do not return anything, modify nums in-place instead.\n        Given an integer array nums, move all 0's to the end of it while maintaining the relative order of the non-zero elements.\n        Note that you must do this in-place without making a copy of the array.\n        Example 1:\n        Input: nums = [0,1,0,3,12]\n        Output: [1,3,12,0,0]\n        Example 2:\n        Input: nums = [0]\n        Output: [0]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        # \u65b9\u6cd5\u4e00\uff1a\n        # \u5148\u627e\u5230\u6240\u6709\u76840\uff0c\u7136\u540e\u518d\u628a0\u653e\u5230\u6700\u540e\n        # \u65f6\u95f4\u590d\u6742\u5ea6O(n)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6O(1)\n        # 0\u7684\u4e2a\u6570\n        count = 0\n        for i in range(len(nums)):\n            if nums[i] == 0:\n                count += 1\n            else:\n                nums[i - count] = nums[i]\n        for i in range(count):\n            nums[len(nums) - 1 - i] = 0"
    },
    {
        "number": 283,
        "title": "Move Zeroes",
        "difficulty": 0,
        "prompt": "class Solution:\n    def moveZeroes(self, nums: List[int]) -> None:\n        \"\"\"\n        Do not return anything, modify nums in-place instead.\n        Given an integer array nums, move all 0's to the end of it while maintaining the relative order of the non-zero elements.\n        Note that you must do this in-place without making a copy of the array.\n        Example 1:\n        Input: nums = [0,1,0,3,12]\n        Output: [1,3,12,0,0]\n        Example 2:\n        Input: nums = [0]\n        Output: [0]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        # two pointer\n        # two pointer\n        # two pointer\n        # two pointer\n        # two pointer\n        # two pointer\n        # two pointer\n        # two pointer\n        # two pointer\n        # two pointer\n        # two pointer\n        # two pointer\n        # two pointer\n        # two pointer\n        # two pointer\n        # two pointer\n        # two pointer\n        # two pointer\n        # two pointer\n        # two pointer\n        # two pointer\n        # two pointer\n        # two pointer\n        # two pointer\n        # two pointer\n        # two pointer\n        # two pointer\n        # two pointer\n        # two pointer\n        # two pointer\n        # two pointer\n        # two pointer\n        # two pointer\n        # two pointer\n        # two pointer\n        # two pointer\n        # two pointer\n        # two pointer\n        # two pointer\n        # two pointer\n        # two pointer\n        # two pointer\n        # two pointer\n        # two pointer\n        # two pointer\n        # two pointer\n        # two pointer\n        # two pointer\n        # two pointer\n        # two pointer\n        # two pointer\n        # two pointer\n        # two pointer\n        # two pointer\n        # two pointer\n        # two pointer\n        # two pointer\n        # two pointer\n        # two pointer\n        # two pointer\n"
    },
    {
        "number": 284,
        "title": "Peeking Iterator",
        "difficulty": 1,
        "prompt": "        \"\"\"\n        Design an iterator that supports the peek operation on an existing iterator in addition to the hasNext and the next operations.\n        Implement the PeekingIterator class:\n            PeekingIterator(Iterator<int> nums) Initializes the object with the given integer iterator iterator.\n            int next() Returns the next element in the array and moves the pointer to the next element.\n            boolean hasNext() Returns true if there are still elements in the array.\n            int peek() Returns the next element in the array without moving the pointer.\n        Note: Each language may have a different implementation of the constructor and Iterator, but they all support the int next() and boolean hasNext() functions.\n        Example 1:\n        Input\n        [\"PeekingIterator\", \"next\", \"peek\", \"next\", \"next\", \"hasNext\"]\n        [[[1, 2, 3]], [], [], [], [], []]\n        Output\n        [null, 1, 2, 2, 3, false]\n        Explanation\n        PeekingIterator peekingIterator = new PeekingIterator([1, 2, 3]); // [1,2,3]\n        peekingIterator.next();    // return 1, the pointer moves to the next element [1,2,3].\n        peekingIterator.peek();    // return 2, the pointer does not move [1,2,3].\n        peekingIterator.next();    // return 2, the pointer moves to the next element [1,2,3]\n        peekingIterator.next();    // return 3, the pointer moves to the next element [1,2,3]\n        peekingIterator.hasNext(); // return False\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        self.iter = iter(iterable)\n        self.cache = []"
    },
    {
        "number": 284,
        "title": "Peeking Iterator",
        "difficulty": 1,
        "prompt": "        \"\"\"\n        Design an iterator that supports the peek operation on an existing iterator in addition to the hasNext and the next operations.\n        Implement the PeekingIterator class:\n            PeekingIterator(Iterator<int> nums) Initializes the object with the given integer iterator iterator.\n            int next() Returns the next element in the array and moves the pointer to the next element.\n            boolean hasNext() Returns true if there are still elements in the array.\n            int peek() Returns the next element in the array without moving the pointer.\n        Note: Each language may have a different implementation of the constructor and Iterator, but they all support the int next() and boolean hasNext() functions.\n        Example 1:\n        Input\n        [\"PeekingIterator\", \"next\", \"peek\", \"next\", \"next\", \"hasNext\"]\n        [[[1, 2, 3]], [], [], [], [], []]\n        Output\n        [null, 1, 2, 2, 3, false]\n        Explanation\n        PeekingIterator peekingIterator = new PeekingIterator([1, 2, 3]); // [1,2,3]\n        peekingIterator.next();    // return 1, the pointer moves to the next element [1,2,3].\n        peekingIterator.peek();    // return 2, the pointer does not move [1,2,3].\n        peekingIterator.next();    // return 2, the pointer moves to the next element [1,2,3]\n        peekingIterator.next();    // return 3, the pointer moves to the next element [1,2,3]\n        peekingIterator.hasNext(); // return False\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        self.nums = nums\n        self.index = 0\n        self.has_next = True"
    },
    {
        "number": 287,
        "title": "Find the Duplicate Number",
        "difficulty": 1,
        "prompt": "class Solution:\n    def findDuplicate(self, nums: List[int]) -> int:\n        \"\"\"\n        Given an array of integers nums containing n + 1 integers where each integer is in the range [1, n] inclusive.\n        There is only one repeated number in nums, return this repeated number.\n        You must solve the problem without modifying the array nums and uses only constant extra space.\n        Example 1:\n        Input: nums = [1,3,4,2,2]\n        Output: 2\n        Example 2:\n        Input: nums = [3,1,3,4,2]\n        Output: 3\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        # Solution 1:\n        # Time complexity: O(n)\n        # Space complexity: O(1)\n        # for i in range(len(nums)):\n        #     if nums[abs(nums[i])] < 0:\n        #         return abs(nums[i])\n        #     else:\n        #         nums[abs(nums[i])] = -nums[abs(nums[i])]\n        # return -1"
    },
    {
        "number": 287,
        "title": "Find the Duplicate Number",
        "difficulty": 1,
        "prompt": "class Solution:\n    def findDuplicate(self, nums: List[int]) -> int:\n        \"\"\"\n        Given an array of integers nums containing n + 1 integers where each integer is in the range [1, n] inclusive.\n        There is only one repeated number in nums, return this repeated number.\n        You must solve the problem without modifying the array nums and uses only constant extra space.\n        Example 1:\n        Input: nums = [1,3,4,2,2]\n        Output: 2\n        Example 2:\n        Input: nums = [3,1,3,4,2]\n        Output: 3\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        # \u5feb\u6162\u6307\u9488\n        slow = fast = 0\n        while True:\n            slow = nums[slow]\n            fast = nums[nums[fast]]\n            if slow == fast:\n                break\n        slow = 0\n        while slow!= fast:\n            slow = nums[slow]\n            fast = nums[fast]\n        return slow"
    },
    {
        "number": 289,
        "title": "Game of Life",
        "difficulty": 1,
        "prompt": "class Solution:\n    def gameOfLife(self, board: List[List[int]]) -> None:\n        \"\"\"\n        Do not return anything, modify board in-place instead.\n        According to Wikipedia's article: \"The Game of Life, also known simply as Life, is a cellular automaton devised by the British mathematician John Horton Conway in 1970.\"\n        The board is made up of an m x n grid of cells, where each cell has an initial state: live (represented by a 1) or dead (represented by a 0). Each cell interacts with its eight neighbors (horizontal, vertical, diagonal) using the following four rules (taken from the above Wikipedia article):\n            Any live cell with fewer than two live neighbors dies as if caused by under-population.\n            Any live cell with two or three live neighbors lives on to the next generation.\n            Any live cell with more than three live neighbors dies, as if by over-population.\n            Any dead cell with exactly three live neighbors becomes a live cell, as if by reproduction.\n        The next state is created by applying the above rules simultaneously to every cell in the current state, where births and deaths occur simultaneously. Given the current state of the m x n grid board, return the next state.\n        Example 1:\n        Input: board = [[0,1,0],[0,0,1],[1,1,1],[0,0,0]]\n        Output: [[0,0,0],[1,0,1],[0,1,1],[0,1,0]]\n        Example 2:\n        Input: board = [[1,1],[1,0]]\n        Output: [[1,1],[1,1]]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        if not board:\n            return\n        m, n = len(board), len(board[0])\n        for i in range(m):\n            for j in range(n):\n                count = 0\n                for x, y in [(i - 1, j - 1), (i - 1, j), (i - 1, j + 1), (i, j - 1), (i, j + 1), (i + 1, j - 1), (i + 1, j), (i + 1, j + 1)]:\n                    if 0 <= x < m and 0 <= y < n and board[x][y] in [1, 0]:\n                        count += 1\n                if board[i][j] == 1:\n                    if count < 2 or count > 3:\n                        board[i][j] = 0\n                else:\n                    if count == 3:\n                        board[i][j] = 1\n        return board"
    },
    {
        "number": 289,
        "title": "Game of Life",
        "difficulty": 1,
        "prompt": "class Solution:\n    def gameOfLife(self, board: List[List[int]]) -> None:\n        \"\"\"\n        Do not return anything, modify board in-place instead.\n        According to Wikipedia's article: \"The Game of Life, also known simply as Life, is a cellular automaton devised by the British mathematician John Horton Conway in 1970.\"\n        The board is made up of an m x n grid of cells, where each cell has an initial state: live (represented by a 1) or dead (represented by a 0). Each cell interacts with its eight neighbors (horizontal, vertical, diagonal) using the following four rules (taken from the above Wikipedia article):\n            Any live cell with fewer than two live neighbors dies as if caused by under-population.\n            Any live cell with two or three live neighbors lives on to the next generation.\n            Any live cell with more than three live neighbors dies, as if by over-population.\n            Any dead cell with exactly three live neighbors becomes a live cell, as if by reproduction.\n        The next state is created by applying the above rules simultaneously to every cell in the current state, where births and deaths occur simultaneously. Given the current state of the m x n grid board, return the next state.\n        Example 1:\n        Input: board = [[0,1,0],[0,0,1],[1,1,1],[0,0,0]]\n        Output: [[0,0,0],[1,0,1],[0,1,1],[0,1,0]]\n        Example 2:\n        Input: board = [[1,1],[1,0]]\n        Output: [[1,1],[1,1]]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        if not board:\n            return\n        m, n = len(board), len(board[0])\n        for i in range(m):\n            for j in range(n):\n                count = 0\n                for x, y in [(i - 1, j - 1), (i - 1, j), (i - 1, j + 1), (i, j - 1), (i, j + 1), (i + 1, j - 1), (i + 1, j), (i + 1, j + 1)]:\n                    if 0 <= x < m and 0 <= y < n and board[x][y] in [1, -1]:\n                        count += 1\n                if board[i][j] == 1:\n                    if count < 2 or count > 3:\n                        board[i][j] = -1\n                else:\n                    if count == 3:\n                        board[i][j] = 2\n        for i in range(m):\n            for j in range(n):\n                if board[i][j] == -1:\n                    board[i][j] = 0\n                elif board[i][j] == 2:\n                    board[i][j] = 1\n        return board"
    },
    {
        "number": 290,
        "title": "Word Pattern",
        "difficulty": 0,
        "prompt": "class Solution:\n    def wordPattern(self, pattern: str, s: str) -> bool:\n        \"\"\"\n        Given a pattern and a string s, find if s follows the same pattern.\n        Here follow means a full match, such that there is a bijection between a letter in pattern and a non-empty word in s.\n        Example 1:\n        Input: pattern = \"abba\", s = \"dog cat cat dog\"\n        Output: true\n        Example 2:\n        Input: pattern = \"abba\", s = \"dog cat cat fish\"\n        Output: false\n        Example 3:\n        Input: pattern = \"aaaa\", s = \"dog cat cat dog\"\n        Output: false\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        s_list = s.split()\n        if len(pattern)!= len(s_list):\n            return False\n        dic = {}\n        for i in range(len(pattern)):\n            if pattern[i] not in dic:\n                if s_list[i] not in dic.values():\n                    dic[pattern[i]] = s_list[i]\n                else:\n                    return False\n            else:\n                if dic[pattern[i]]!= s_list[i]:\n                    return False\n        return True"
    },
    {
        "number": 290,
        "title": "Word Pattern",
        "difficulty": 0,
        "prompt": "class Solution:\n    def wordPattern(self, pattern: str, s: str) -> bool:\n        \"\"\"\n        Given a pattern and a string s, find if s follows the same pattern.\n        Here follow means a full match, such that there is a bijection between a letter in pattern and a non-empty word in s.\n        Example 1:\n        Input: pattern = \"abba\", s = \"dog cat cat dog\"\n        Output: true\n        Example 2:\n        Input: pattern = \"abba\", s = \"dog cat cat fish\"\n        Output: false\n        Example 3:\n        Input: pattern = \"aaaa\", s = \"dog cat cat dog\"\n        Output: false\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        words = s.split()\n        if len(words)!= len(pattern):\n            return False\n        d = {}\n        for i in range(len(pattern)):\n            if pattern[i] not in d:\n                if words[i] in d.values():\n                    return False\n                d[pattern[i]] = words[i]\n            else:\n                if d[pattern[i]]!= words[i]:\n                    return False\n        return True"
    },
    {
        "number": 292,
        "title": "Nim Game",
        "difficulty": 0,
        "prompt": "class Solution:\n    def canWinNim(self, n: int) -> bool:\n        \"\"\"\n        You are playing the following Nim Game with your friend:\n            Initially, there is a heap of stones on the table.\n            You and your friend will alternate taking turns, and you go first.\n            On each turn, the person whose turn it is will remove 1 to 3 stones from the heap.\n            The one who removes the last stone is the winner.\n        Given n, the number of stones in the heap, return true if you can win the game assuming both you and your friend play optimally, otherwise return false.\n        Example 1:\n        Input: n = 4\n        Output: false\n        Explanation: These are the possible outcomes:\n        1. You remove 1 stone. Your friend removes 3 stones, including the last stone. Your friend wins.\n        2. You remove 2 stones. Your friend removes 2 stones, including the last stone. Your friend wins.\n        3. You remove 3 stones. Your friend removes the last stone. Your friend wins.\n        In all outcomes, your friend wins.\n        Example 2:\n        Input: n = 1\n        Output: true\n        Example 3:\n        Input: n = 2\n        Output: true\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        return n % 4!= 0"
    },
    {
        "number": 292,
        "title": "Nim Game",
        "difficulty": 0,
        "prompt": "class Solution:\n    def canWinNim(self, n: int) -> bool:\n        \"\"\"\n        You are playing the following Nim Game with your friend:\n            Initially, there is a heap of stones on the table.\n            You and your friend will alternate taking turns, and you go first.\n            On each turn, the person whose turn it is will remove 1 to 3 stones from the heap.\n            The one who removes the last stone is the winner.\n        Given n, the number of stones in the heap, return true if you can win the game assuming both you and your friend play optimally, otherwise return false.\n        Example 1:\n        Input: n = 4\n        Output: false\n        Explanation: These are the possible outcomes:\n        1. You remove 1 stone. Your friend removes 3 stones, including the last stone. Your friend wins.\n        2. You remove 2 stones. Your friend removes 2 stones, including the last stone. Your friend wins.\n        3. You remove 3 stones. Your friend removes the last stone. Your friend wins.\n        In all outcomes, your friend wins.\n        Example 2:\n        Input: n = 1\n        Output: true\n        Example 3:\n        Input: n = 2\n        Output: true\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        return n % 4!= 0"
    },
    {
        "number": 295,
        "title": "Find Median from Data Stream",
        "difficulty": 2,
        "prompt": "class MedianFinder:\n    def __init__(self):\n    def addNum(self, num: int) -> None:\n    def findMedian(self) -> float:\n        \"\"\"\n        The median is the middle value in an ordered integer list. If the size of the list is even, there is no middle value, and the median is the mean of the two middle values.\n            For example, for arr = [2,3,4], the median is 3.\n            For example, for arr = [2,3], the median is (2 + 3) / 2 = 2.5.\n        Implement the MedianFinder class:\n            MedianFinder() initializes the MedianFinder object.\n            void addNum(int num) adds the integer num from the data stream to the data structure.\n            double findMedian() returns the median of all elements so far. Answers within 10-5 of the actual answer will be accepted.\n        Example 1:\n        Input\n        [\"MedianFinder\", \"addNum\", \"addNum\", \"findMedian\", \"addNum\", \"findMedian\"]\n        [[], [1], [2], [], [3], []]\n        Output\n        [null, null, null, 1.5, null, 2.0]\n        Explanation\n        MedianFinder medianFinder = new MedianFinder();\n        medianFinder.addNum(1);    // arr = [1]\n        medianFinder.addNum(2);    // arr = [1, 2]\n        medianFinder.findMedian(); // return 1.5 (i.e., (1 + 2) / 2)\n        medianFinder.addNum(3);    // arr[1, 2, 3]\n        medianFinder.findMedian(); // return 2.0\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        self.arr = []\n        self.n = 0\n        \n    def addNum(self, num: int) -> None:\n        self.arr.append(num)\n        self.n += 1\n        self.arr.sort()\n        \n    def findMedian(self) -> float:\n        if self.n % 2 == 0:\n            return (self.arr[self.n // 2] + self.arr[self.n // 2 - 1]) / 2\n        else:\n            return self.arr[self.n // 2]\n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        "
    },
    {
        "number": 295,
        "title": "Find Median from Data Stream",
        "difficulty": 2,
        "prompt": "class MedianFinder:\n    def __init__(self):\n    def addNum(self, num: int) -> None:\n    def findMedian(self) -> float:\n        \"\"\"\n        The median is the middle value in an ordered integer list. If the size of the list is even, there is no middle value, and the median is the mean of the two middle values.\n            For example, for arr = [2,3,4], the median is 3.\n            For example, for arr = [2,3], the median is (2 + 3) / 2 = 2.5.\n        Implement the MedianFinder class:\n            MedianFinder() initializes the MedianFinder object.\n            void addNum(int num) adds the integer num from the data stream to the data structure.\n            double findMedian() returns the median of all elements so far. Answers within 10-5 of the actual answer will be accepted.\n        Example 1:\n        Input\n        [\"MedianFinder\", \"addNum\", \"addNum\", \"findMedian\", \"addNum\", \"findMedian\"]\n        [[], [1], [2], [], [3], []]\n        Output\n        [null, null, null, 1.5, null, 2.0]\n        Explanation\n        MedianFinder medianFinder = new MedianFinder();\n        medianFinder.addNum(1);    // arr = [1]\n        medianFinder.addNum(2);    // arr = [1, 2]\n        medianFinder.findMedian(); // return 1.5 (i.e., (1 + 2) / 2)\n        medianFinder.addNum(3);    // arr[1, 2, 3]\n        medianFinder.findMedian(); // return 2.0\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        self.arr = []\n        self.len = 0\n        self.median = None\n        \n    def addNum(self, num: int) -> None:\n        self.arr.append(num)\n        self.len += 1\n        self.arr.sort()\n        \n        if self.len % 2 == 0:\n            self.median = (self.arr[self.len//2] + self.arr[self.len//2 - 1]) / 2\n        else:\n            self.median = self.arr[self.len//2]\n        \n    def findMedian(self) -> float:\n        return self.median\n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n"
    },
    {
        "number": 297,
        "title": "Serialize and Deserialize Binary Tree",
        "difficulty": 2,
        "prompt": "class Codec:\n    def serialize(self, root):\n        \"\"\"Encodes a tree to a single string.\n        :type root: TreeNode\n        :rtype: str\n        Serialization is the process of converting a data structure or object into a sequence of bits so that it can be stored in a file or memory buffer, or transmitted across a network connection link to be reconstructed later in the same or another computer environment.\n        Design an algorithm to serialize and deserialize a binary tree. There is no restriction on how your serialization/deserialization algorithm should work. You just need to ensure that a binary tree can be serialized to a string and this string can be deserialized to the original tree structure.\n        Clarification: The input/output format is the same as how LeetCode serializes a binary tree. You do not necessarily need to follow this format, so please be creative and come up with different approaches yourself.\n        Example 1:\n        Input: root = [1,2,3,null,null,4,5]\n        Output: [1,2,3,null,null,4,5]\n        Example 2:\n        Input: root = []\n        Output: []\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        if not root:\n            return \"\"\n        queue = [root]\n        res = []\n        while queue:\n            node = queue.pop(0)\n            if node:\n                res.append(str(node.val))\n                queue.append(node.left)\n                queue.append(node.right)\n            else:\n                res.append(\"null\")\n        return \",\".join(res)"
    },
    {
        "number": 297,
        "title": "Serialize and Deserialize Binary Tree",
        "difficulty": 2,
        "prompt": "class Codec:\n    def serialize(self, root):\n        \"\"\"Encodes a tree to a single string.\n        :type root: TreeNode\n        :rtype: str\n        Serialization is the process of converting a data structure or object into a sequence of bits so that it can be stored in a file or memory buffer, or transmitted across a network connection link to be reconstructed later in the same or another computer environment.\n        Design an algorithm to serialize and deserialize a binary tree. There is no restriction on how your serialization/deserialization algorithm should work. You just need to ensure that a binary tree can be serialized to a string and this string can be deserialized to the original tree structure.\n        Clarification: The input/output format is the same as how LeetCode serializes a binary tree. You do not necessarily need to follow this format, so please be creative and come up with different approaches yourself.\n        Example 1:\n        Input: root = [1,2,3,null,null,4,5]\n        Output: [1,2,3,null,null,4,5]\n        Example 2:\n        Input: root = []\n        Output: []\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        if not root:\n            return '[]'\n        queue = [root]\n        res = []\n        while queue:\n            node = queue.pop(0)\n            if node:\n                res.append(str(node.val))\n                queue.append(node.left)\n                queue.append(node.right)\n            else:\n                res.append('null')\n        return '[' + ','.join(res) + ']'"
    },
    {
        "number": 299,
        "title": "Bulls and Cows",
        "difficulty": 1,
        "prompt": "class Solution:\n    def getHint(self, secret: str, guess: str) -> str:\n        \"\"\"\n        You are playing the Bulls and Cows game with your friend.\n        You write down a secret number and ask your friend to guess what the number is. When your friend makes a guess, you provide a hint with the following info:\n            The number of \"bulls\", which are digits in the guess that are in the correct position.\n            The number of \"cows\", which are digits in the guess that are in your secret number but are located in the wrong position. Specifically, the non-bull digits in the guess that could be rearranged such that they become bulls.\n        Given the secret number secret and your friend's guess guess, return the hint for your friend's guess.\n        The hint should be formatted as \"xAyB\", where x is the number of bulls and y is the number of cows. Note that both secret and guess may contain duplicate digits.\n        Example 1:\n        Input: secret = \"1807\", guess = \"7810\"\n        Output: \"1A3B\"\n        Explanation: Bulls are connected with a '|' and cows are underlined:\n        \"1807\"\n          |\n        \"7810\"\n        Example 2:\n        Input: secret = \"1123\", guess = \"0111\"\n        Output: \"1A1B\"\n        Explanation: Bulls are connected with a '|' and cows are underlined:\n        \"1123\"        \"1123\"\n          |      or     |\n        \"0111\"        \"0111\"\n        Note that only one of the two unmatched 1s is counted as a cow since the non-bull digits can only be rearranged to allow one 1 to be a bull.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        # bulls = sum(s == g for s, g in zip(secret, guess))\n        # cows = sum(min(secret.count(x), guess.count(x)) for x in set(secret)) - bulls\n        # return f'{bulls}A{cows}B'"
    },
    {
        "number": 299,
        "title": "Bulls and Cows",
        "difficulty": 1,
        "prompt": "class Solution:\n    def getHint(self, secret: str, guess: str) -> str:\n        \"\"\"\n        You are playing the Bulls and Cows game with your friend.\n        You write down a secret number and ask your friend to guess what the number is. When your friend makes a guess, you provide a hint with the following info:\n            The number of \"bulls\", which are digits in the guess that are in the correct position.\n            The number of \"cows\", which are digits in the guess that are in your secret number but are located in the wrong position. Specifically, the non-bull digits in the guess that could be rearranged such that they become bulls.\n        Given the secret number secret and your friend's guess guess, return the hint for your friend's guess.\n        The hint should be formatted as \"xAyB\", where x is the number of bulls and y is the number of cows. Note that both secret and guess may contain duplicate digits.\n        Example 1:\n        Input: secret = \"1807\", guess = \"7810\"\n        Output: \"1A3B\"\n        Explanation: Bulls are connected with a '|' and cows are underlined:\n        \"1807\"\n          |\n        \"7810\"\n        Example 2:\n        Input: secret = \"1123\", guess = \"0111\"\n        Output: \"1A1B\"\n        Explanation: Bulls are connected with a '|' and cows are underlined:\n        \"1123\"        \"1123\"\n          |      or     |\n        \"0111\"        \"0111\"\n        Note that only one of the two unmatched 1s is counted as a cow since the non-bull digits can only be rearranged to allow one 1 to be a bull.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        # bulls = sum(a == b for a, b in zip(secret, guess))\n        # cows = sum(min(secret.count(x), guess.count(x)) for x in set(secret)) - bulls\n        # return f'{bulls}A{cows}B'"
    },
    {
        "number": 300,
        "title": "Longest Increasing Subsequence",
        "difficulty": 1,
        "prompt": "class Solution:\n    def lengthOfLIS(self, nums: List[int]) -> int:\n        \"\"\"\n        Given an integer array nums, return the length of the longest strictly increasing subsequence.\n        Example 1:\n        Input: nums = [10,9,2,5,3,7,101,18]\n        Output: 4\n        Explanation: The longest increasing subsequence is [2,3,7,101], therefore the length is 4.\n        Example 2:\n        Input: nums = [0,1,0,3,2,3]\n        Output: 4\n        Example 3:\n        Input: nums = [7,7,7,7,7,7,7]\n        Output: 1\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        # dp[i] = the longest increasing subsequence ending at nums[i]\n        dp = [1] * len(nums)\n        for i in range(len(nums)):\n            for j in range(i):\n                if nums[i] > nums[j]:\n                    dp[i] = max(dp[i], dp[j] + 1)\n        return max(dp)"
    },
    {
        "number": 300,
        "title": "Longest Increasing Subsequence",
        "difficulty": 1,
        "prompt": "class Solution:\n    def lengthOfLIS(self, nums: List[int]) -> int:\n        \"\"\"\n        Given an integer array nums, return the length of the longest strictly increasing subsequence.\n        Example 1:\n        Input: nums = [10,9,2,5,3,7,101,18]\n        Output: 4\n        Explanation: The longest increasing subsequence is [2,3,7,101], therefore the length is 4.\n        Example 2:\n        Input: nums = [0,1,0,3,2,3]\n        Output: 4\n        Example 3:\n        Input: nums = [7,7,7,7,7,7,7]\n        Output: 1\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        if not nums:\n            return 0\n        dp = [1] * len(nums)\n        for i in range(1, len(nums)):\n            for j in range(i):\n                if nums[i] > nums[j]:\n                    dp[i] = max(dp[i], dp[j] + 1)\n        return max(dp)"
    },
    {
        "number": 301,
        "title": "Remove Invalid Parentheses",
        "difficulty": 2,
        "prompt": "class Solution:\n    def removeInvalidParentheses(self, s: str) -> List[str]:\n        \"\"\"\n        Given a string s that contains parentheses and letters, remove the minimum number of invalid parentheses to make the input string valid.\n        Return a list of unique strings that are valid with the minimum number of removals. You may return the answer in any order.\n        Example 1:\n        Input: s = \"()())()\"\n        Output: [\"(())()\",\"()()()\"]\n        Example 2:\n        Input: s = \"(a)())()\"\n        Output: [\"(a())()\",\"(a)()()\"]\n        Example 3:\n        Input: s = \")(\"\n        Output: [\"\"]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        # \u5148\u628a\u6240\u6709\u53ef\u80fd\u7684\u7d44\u5408\u90fd\u627e\u51fa\u4f86\n        # \u518d\u628a\u6240\u6709\u53ef\u80fd\u7684\u7d44\u5408\u653e\u5230stack\u4e2d\n        # \u518d\u628astack\u4e2d\u7684\u6bcf\u500b\u7d44\u5408\u90fd\u653e\u5230set\u4e2d\n        # \u6700\u5f8c\u628aset\u4e2d\u7684\u6bcf\u500b\u7d44\u5408\u90fd\u653e\u5230list\u4e2d\n        # \u6700\u5f8c\u56de\u50b3list\n        \n        # \u627e\u6240\u6709\u53ef\u80fd\u7684\u7d44\u5408\n        def find_all_combination(s):\n            result = []\n            self.helper(s, 0, [], result)\n            return result\n        \n        # \u627e\u6240\u6709\u53ef\u80fd\u7684\u7d44\u5408\n        def helper(s, index, path, result):\n            if index == len(s):\n                if self.is_valid(path):\n                    result.append(''.join(path))\n                return\n            \n            # \u628a\u6bcf\u500b\u5b57\u5143\u90fd\u653e\u9032\u53bb\n            helper(s, index"
    },
    {
        "number": 301,
        "title": "Remove Invalid Parentheses",
        "difficulty": 2,
        "prompt": "class Solution:\n    def removeInvalidParentheses(self, s: str) -> List[str]:\n        \"\"\"\n        Given a string s that contains parentheses and letters, remove the minimum number of invalid parentheses to make the input string valid.\n        Return a list of unique strings that are valid with the minimum number of removals. You may return the answer in any order.\n        Example 1:\n        Input: s = \"()())()\"\n        Output: [\"(())()\",\"()()()\"]\n        Example 2:\n        Input: s = \"(a)())()\"\n        Output: [\"(a())()\",\"(a)()()\"]\n        Example 3:\n        Input: s = \")(\"\n        Output: [\"\"]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        # \u521d\u59cb\u5316\n        self.res = set()\n        self.s = s\n        self.visited = set()\n        self.left = 0\n        self.right = 0\n        self.max_left = 0\n        self.max_right = 0\n        self.dfs(0, 0, 0, 0, 0)\n        return list(self.res)"
    },
    {
        "number": 303,
        "title": "Range Sum Query - Immutable",
        "difficulty": 0,
        "prompt": "class NumArray:\n    def __init__(self, nums: List[int]):\n    def sumRange(self, left: int, right: int) -> int:\n        \"\"\"\n        Given an integer array nums, handle multiple queries of the following type:\n            Calculate the sum of the elements of nums between indices left and right inclusive where left <= right.\n        Implement the NumArray class:\n            NumArray(int[] nums) Initializes the object with the integer array nums.\n            int sumRange(int left, int right) Returns the sum of the elements of nums between indices left and right inclusive (i.e. nums[left] + nums[left + 1] +... + nums[right]).\n        Example 1:\n        Input\n        [\"NumArray\", \"sumRange\", \"sumRange\", \"sumRange\"]\n        [[[-2, 0, 3, -5, 2, -1]], [0, 2], [2, 5], [0, 5]]\n        Output\n        [null, 1, -1, -3]\n        Explanation\n        NumArray numArray = new NumArray([-2, 0, 3, -5, 2, -1]);\n        numArray.sumRange(0, 2); // return (-2) + 0 + 3 = 1\n        numArray.sumRange(2, 5); // return 3 + (-5) + 2 + (-1) = -1\n        numArray.sumRange(0, 5); // return (-2) + 0 + 3 + (-5) + 2 + (-1) = -3\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        self.nums = nums\n        self.prefix_sum = [0] * (len(nums) + 1)\n        for i in range(1, len(nums) + 1):\n            self.prefix_sum[i] = self.prefix_sum[i - 1] + nums[i - 1]\n        \n    def sumRange(self, left: int, right: int) -> int:\n        return self.prefix_sum[right + 1] - self.prefix_sum[left]\n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        "
    },
    {
        "number": 303,
        "title": "Range Sum Query - Immutable",
        "difficulty": 0,
        "prompt": "class NumArray:\n    def __init__(self, nums: List[int]):\n    def sumRange(self, left: int, right: int) -> int:\n        \"\"\"\n        Given an integer array nums, handle multiple queries of the following type:\n            Calculate the sum of the elements of nums between indices left and right inclusive where left <= right.\n        Implement the NumArray class:\n            NumArray(int[] nums) Initializes the object with the integer array nums.\n            int sumRange(int left, int right) Returns the sum of the elements of nums between indices left and right inclusive (i.e. nums[left] + nums[left + 1] +... + nums[right]).\n        Example 1:\n        Input\n        [\"NumArray\", \"sumRange\", \"sumRange\", \"sumRange\"]\n        [[[-2, 0, 3, -5, 2, -1]], [0, 2], [2, 5], [0, 5]]\n        Output\n        [null, 1, -1, -3]\n        Explanation\n        NumArray numArray = new NumArray([-2, 0, 3, -5, 2, -1]);\n        numArray.sumRange(0, 2); // return (-2) + 0 + 3 = 1\n        numArray.sumRange(2, 5); // return 3 + (-5) + 2 + (-1) = -1\n        numArray.sumRange(0, 5); // return (-2) + 0 + 3 + (-5) + 2 + (-1) = -3\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        self.nums = nums\n        self.prefix_sum = [0]\n        for num in nums:\n            self.prefix_sum.append(self.prefix_sum[-1] + num)\n        self.prefix_sum = self.prefix_sum[1:]\n        self.prefix_sum_dict = {0: 0}\n        for i in range(len(self.prefix_sum)):\n            self.prefix_sum_dict[i + 1] = self.prefix_sum_dict[i] + self.prefix_sum[i]"
    },
    {
        "number": 304,
        "title": "Range Sum Query 2D - Immutable",
        "difficulty": 1,
        "prompt": "class NumMatrix:\n    def __init__(self, matrix: List[List[int]]):\n    def sumRegion(self, row1: int, col1: int, row2: int, col2: int) -> int:\n        \"\"\"\n        Given a 2D matrix matrix, handle multiple queries of the following type:\n            Calculate the sum of the elements of matrix inside the rectangle defined by its upper left corner (row1, col1) and lower right corner (row2, col2).\n        Implement the NumMatrix class:\n            NumMatrix(int[][] matrix) Initializes the object with the integer matrix matrix.\n            int sumRegion(int row1, int col1, int row2, int col2) Returns the sum of the elements of matrix inside the rectangle defined by its upper left corner (row1, col1) and lower right corner (row2, col2).\n        You must design an algorithm where sumRegion works on O(1) time complexity.\n        Example 1:\n        Input\n        [\"NumMatrix\", \"sumRegion\", \"sumRegion\", \"sumRegion\"]\n        [[[[3, 0, 1, 4, 2], [5, 6, 3, 2, 1], [1, 2, 0, 1, 5], [4, 1, 0, 1, 7], [1, 0, 3, 0, 5]]], [2, 1, 4, 3], [1, 1, 2, 2], [1, 2, 2, 4]]\n        Output\n        [null, 8, 11, 12]\n        Explanation\n        NumMatrix numMatrix = new NumMatrix([[3, 0, 1, 4, 2], [5, 6, 3, 2, 1], [1, 2, 0, 1, 5], [4, 1, 0, 1, 7], [1, 0, 3, 0, 5]]);\n        numMatrix.sumRegion(2, 1, 4, 3); // return 8 (i.e sum of the red rectangle)\n        numMatrix.sumRegion(1, 1, 2, 2); // return 11 (i.e sum of the green rectangle)\n        numMatrix.sumRegion(1, 2, 2, 4); // return 12 (i.e sum of the blue rectangle)\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        self.matrix = matrix\n        self.row = len(matrix)\n        self.col = len(matrix[0])\n        self.dp = [[0] * (self.col + 1) for _ in range(self.row + 1)]\n        for i in range(1, self.row + 1):\n            for j in range(1, self.col + 1):\n                self.dp[i][j] = self.dp[i - 1][j] + self.dp[i][j - 1] - self.dp[i - 1][j - 1] + matrix[i - 1][j - 1]"
    },
    {
        "number": 304,
        "title": "Range Sum Query 2D - Immutable",
        "difficulty": 1,
        "prompt": "class NumMatrix:\n    def __init__(self, matrix: List[List[int]]):\n    def sumRegion(self, row1: int, col1: int, row2: int, col2: int) -> int:\n        \"\"\"\n        Given a 2D matrix matrix, handle multiple queries of the following type:\n            Calculate the sum of the elements of matrix inside the rectangle defined by its upper left corner (row1, col1) and lower right corner (row2, col2).\n        Implement the NumMatrix class:\n            NumMatrix(int[][] matrix) Initializes the object with the integer matrix matrix.\n            int sumRegion(int row1, int col1, int row2, int col2) Returns the sum of the elements of matrix inside the rectangle defined by its upper left corner (row1, col1) and lower right corner (row2, col2).\n        You must design an algorithm where sumRegion works on O(1) time complexity.\n        Example 1:\n        Input\n        [\"NumMatrix\", \"sumRegion\", \"sumRegion\", \"sumRegion\"]\n        [[[[3, 0, 1, 4, 2], [5, 6, 3, 2, 1], [1, 2, 0, 1, 5], [4, 1, 0, 1, 7], [1, 0, 3, 0, 5]]], [2, 1, 4, 3], [1, 1, 2, 2], [1, 2, 2, 4]]\n        Output\n        [null, 8, 11, 12]\n        Explanation\n        NumMatrix numMatrix = new NumMatrix([[3, 0, 1, 4, 2], [5, 6, 3, 2, 1], [1, 2, 0, 1, 5], [4, 1, 0, 1, 7], [1, 0, 3, 0, 5]]);\n        numMatrix.sumRegion(2, 1, 4, 3); // return 8 (i.e sum of the red rectangle)\n        numMatrix.sumRegion(1, 1, 2, 2); // return 11 (i.e sum of the green rectangle)\n        numMatrix.sumRegion(1, 2, 2, 4); // return 12 (i.e sum of the blue rectangle)\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        self.matrix = matrix\n        self.row = len(matrix)\n        self.col = len(matrix[0])\n        self.dp = [[0 for i in range(self.col+1)] for j in range(self.row+1)]\n        for i in range(1, self.row+1):\n            for j in range(1, self.col+1):\n                self.dp[i][j] = self.dp[i-1][j] + self.dp[i][j-1] - self.dp[i-1][j-1] + self.matrix[i-1][j-1]\n        \n    def sumRegion(self, row1: int, col1: int, row2: int, col2: int) -> int:\n        return self.dp[row2+1][col2+1] - self.dp[row1][col2+1] - self.dp[row2+1][col1] + self.dp[row1][col1]\n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n"
    },
    {
        "number": 306,
        "title": "Additive Number",
        "difficulty": 1,
        "prompt": "class Solution:\n    def isAdditiveNumber(self, num: str) -> bool:\n        \"\"\"\n        An additive number is a string whose digits can form an additive sequence.\n        A valid additive sequence should contain at least three numbers. Except for the first two numbers, each subsequent number in the sequence must be the sum of the preceding two.\n        Given a string containing only digits, return true if it is an additive number or false otherwise.\n        Note: Numbers in the additive sequence cannot have leading zeros, so sequence 1, 2, 03 or 1, 02, 3 is invalid.\n        Example 1:\n        Input: \"112358\"\n        Output: true\n        Explanation: \n        The digits can form an additive sequence: 1, 1, 2, 3, 5, 8. \n        1 + 1 = 2, 1 + 2 = 3, 2 + 3 = 5, 3 + 5 = 8\n        Example 2:\n        Input: \"199100199\"\n        Output: true\n        Explanation: \n        The additive sequence is: 1, 99, 100, 199. \n        1 + 99 = 100, 99 + 100 = 199\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        def is_additive_number(num, i, j):\n            if i >= len(num) or j >= len(num):\n                return False\n            a, b = int(num[i]), int(num[j])\n            if a + b == int(num[i+1:j]):\n                return is_additive_number(num, j+1, j+2)\n            return False\n        \n        for i in range(1, len(num)):\n            for j in range(i+1, len(num)):\n                if is_additive_number(num, i, j):\n                    return True\n        return False\n<|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>"
    },
    {
        "number": 306,
        "title": "Additive Number",
        "difficulty": 1,
        "prompt": "class Solution:\n    def isAdditiveNumber(self, num: str) -> bool:\n        \"\"\"\n        An additive number is a string whose digits can form an additive sequence.\n        A valid additive sequence should contain at least three numbers. Except for the first two numbers, each subsequent number in the sequence must be the sum of the preceding two.\n        Given a string containing only digits, return true if it is an additive number or false otherwise.\n        Note: Numbers in the additive sequence cannot have leading zeros, so sequence 1, 2, 03 or 1, 02, 3 is invalid.\n        Example 1:\n        Input: \"112358\"\n        Output: true\n        Explanation: \n        The digits can form an additive sequence: 1, 1, 2, 3, 5, 8. \n        1 + 1 = 2, 1 + 2 = 3, 2 + 3 = 5, 3 + 5 = 8\n        Example 2:\n        Input: \"199100199\"\n        Output: true\n        Explanation: \n        The additive sequence is: 1, 99, 100, 199. \n        1 + 99 = 100, 99 + 100 = 199\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        n = len(num)\n        if n < 3:\n            return False\n        for i in range(1, n // 2 + 1):\n            if num[0] == '0' and i > 1:\n                break\n            if self.isValid(num[:i], num[i:], num[i:]):\n                return True\n        return False"
    },
    {
        "number": 307,
        "title": "Range Sum Query - Mutable",
        "difficulty": 1,
        "prompt": "class NumArray:\n    def __init__(self, nums: List[int]):\n    def update(self, index: int, val: int) -> None:\n    def sumRange(self, left: int, right: int) -> int:\n        \"\"\"\n        Given an integer array nums, handle multiple queries of the following types:\n            Update the value of an element in nums.\n            Calculate the sum of the elements of nums between indices left and right inclusive where left <= right.\n        Implement the NumArray class:\n            NumArray(int[] nums) Initializes the object with the integer array nums.\n            void update(int index, int val) Updates the value of nums[index] to be val.\n            int sumRange(int left, int right) Returns the sum of the elements of nums between indices left and right inclusive (i.e. nums[left] + nums[left + 1] +... + nums[right]).\n        Example 1:\n        Input\n        [\"NumArray\", \"sumRange\", \"update\", \"sumRange\"]\n        [[[1, 3, 5]], [0, 2], [1, 2], [0, 2]]\n        Output\n        [null, 9, null, 8]\n        Explanation\n        NumArray numArray = new NumArray([1, 3, 5]);\n        numArray.sumRange(0, 2); // return 1 + 3 + 5 = 9\n        numArray.update(1, 2);   // nums = [1, 2, 5]\n        numArray.sumRange(0, 2); // return 1 + 2 + 5 = 8\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        self.nums = nums\n        self.sum_list = [0] * len(nums)\n        for i in range(len(nums)):\n            if i == 0:\n                self.sum_list[i] = nums[i]\n            else:\n                self.sum_list[i] = self.sum_list[i - 1] + nums[i]\n        return self.sum_list"
    },
    {
        "number": 307,
        "title": "Range Sum Query - Mutable",
        "difficulty": 1,
        "prompt": "class NumArray:\n    def __init__(self, nums: List[int]):\n    def update(self, index: int, val: int) -> None:\n    def sumRange(self, left: int, right: int) -> int:\n        \"\"\"\n        Given an integer array nums, handle multiple queries of the following types:\n            Update the value of an element in nums.\n            Calculate the sum of the elements of nums between indices left and right inclusive where left <= right.\n        Implement the NumArray class:\n            NumArray(int[] nums) Initializes the object with the integer array nums.\n            void update(int index, int val) Updates the value of nums[index] to be val.\n            int sumRange(int left, int right) Returns the sum of the elements of nums between indices left and right inclusive (i.e. nums[left] + nums[left + 1] +... + nums[right]).\n        Example 1:\n        Input\n        [\"NumArray\", \"sumRange\", \"update\", \"sumRange\"]\n        [[[1, 3, 5]], [0, 2], [1, 2], [0, 2]]\n        Output\n        [null, 9, null, 8]\n        Explanation\n        NumArray numArray = new NumArray([1, 3, 5]);\n        numArray.sumRange(0, 2); // return 1 + 3 + 5 = 9\n        numArray.update(1, 2);   // nums = [1, 2, 5]\n        numArray.sumRange(0, 2); // return 1 + 2 + 5 = 8\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        self.nums = nums\n        self.n = len(nums)\n        self.tree = [0] * (self.n + 1)\n        self.build_tree()\n        return self.sum_range(left, right)"
    },
    {
        "number": 309,
        "title": "Best Time to Buy and Sell Stock with Cooldown",
        "difficulty": 1,
        "prompt": "class Solution:\n    def maxProfit(self, prices: List[int]) -> int:\n        \"\"\"\n        You are given an array prices where prices[i] is the price of a given stock on the ith day.\n        Find the maximum profit you can achieve. You may complete as many transactions as you like (i.e., buy one and sell one share of the stock multiple times) with the following restrictions:\n            After you sell your stock, you cannot buy stock on the next day (i.e., cooldown one day).\n        Note: You may not engage in multiple transactions simultaneously (i.e., you must sell the stock before you buy again).\n        Example 1:\n        Input: prices = [1,2,3,0,2]\n        Output: 3\n        Explanation: transactions = [buy, sell, cooldown, buy, sell]\n        Example 2:\n        Input: prices = [1]\n        Output: 0\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        if len(prices) == 0:\n            return 0\n        \n        # dp[i][0] = max(dp[i-1][0], dp[i-1][1] + prices[i])\n        # dp[i][1] = max(dp[i-1][1], dp[i-2][0] - prices[i])\n        \n        # dp[i][0] = max(dp[i-1][0], dp[i-1][1] + prices[i])\n        # dp[i][1] = max(dp[i-1][1], dp[i-2][0] - prices[i])\n        \n        # dp[i][0] = max(dp[i-1][0], dp[i-1][1] + prices[i])\n        # dp[i][1] = max(dp[i-1][1], dp[i-2][0] - prices[i])\n        \n        # dp[i][0] = max(dp[i-1][0], dp[i-1][1] + prices[i])\n        # dp[i][1] = max(dp[i-1][1], dp[i-2][0] - prices["
    },
    {
        "number": 309,
        "title": "Best Time to Buy and Sell Stock with Cooldown",
        "difficulty": 1,
        "prompt": "class Solution:\n    def maxProfit(self, prices: List[int]) -> int:\n        \"\"\"\n        You are given an array prices where prices[i] is the price of a given stock on the ith day.\n        Find the maximum profit you can achieve. You may complete as many transactions as you like (i.e., buy one and sell one share of the stock multiple times) with the following restrictions:\n            After you sell your stock, you cannot buy stock on the next day (i.e., cooldown one day).\n        Note: You may not engage in multiple transactions simultaneously (i.e., you must sell the stock before you buy again).\n        Example 1:\n        Input: prices = [1,2,3,0,2]\n        Output: 3\n        Explanation: transactions = [buy, sell, cooldown, buy, sell]\n        Example 2:\n        Input: prices = [1]\n        Output: 0\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        if not prices:\n            return 0\n        n = len(prices)\n        dp = [[0] * 2 for _ in range(n)]\n        dp[0][0] = 0\n        dp[0][1] = -prices[0]\n        for i in range(1, n):\n            dp[i][0] = max(dp[i - 1][0], dp[i - 1][1] + prices[i])\n            dp[i][1] = max(dp[i - 1][1], dp[i - 1][0] - prices[i])\n        return dp[n - 1][0]"
    },
    {
        "number": 310,
        "title": "Minimum Height Trees",
        "difficulty": 1,
        "prompt": "class Solution:\n    def findMinHeightTrees(self, n: int, edges: List[List[int]]) -> List[int]:\n        \"\"\"\n        A tree is an undirected graph in which any two vertices are connected by exactly one path. In other words, any connected graph without simple cycles is a tree.\n        Given a tree of n nodes labelled from 0 to n - 1, and an array of n - 1 edges where edges[i] = [ai, bi] indicates that there is an undirected edge between the two nodes ai and bi in the tree, you can choose any node of the tree as the root. When you select a node x as the root, the result tree has height h. Among all possible rooted trees, those with minimum height (i.e. min(h))  are called minimum height trees (MHTs).\n        Return a list of all MHTs' root labels. You can return the answer in any order.\n        The height of a rooted tree is the number of edges on the longest downward path between the root and a leaf.\n        Example 1:\n        Input: n = 4, edges = [[1,0],[1,2],[1,3]]\n        Output: [1]\n        Explanation: As shown, the height of the tree is 1 when the root is the node with label 1 which is the only MHT.\n        Example 2:\n        Input: n = 6, edges = [[3,0],[3,1],[3,2],[3,4],[5,4]]\n        Output: [3,4]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        if n == 1:\n            return [0]\n        graph = collections.defaultdict(list)\n        for u, v in edges:\n            graph[u].append(v)\n            graph[v].append(u)\n        leaves = [i for i in range(n) if len(graph[i]) == 1]\n        while n > 2:\n            n -= len(leaves)\n            new_leaves = []\n            for leaf in leaves:\n                neighbor = graph[leaf].pop()\n                graph[neighbor].remove(leaf)\n                if len(graph[neighbor]) == 1:\n                    new_leaves.append(neighbor)\n            leaves = new_leaves\n        return leaves"
    },
    {
        "number": 310,
        "title": "Minimum Height Trees",
        "difficulty": 1,
        "prompt": "class Solution:\n    def findMinHeightTrees(self, n: int, edges: List[List[int]]) -> List[int]:\n        \"\"\"\n        A tree is an undirected graph in which any two vertices are connected by exactly one path. In other words, any connected graph without simple cycles is a tree.\n        Given a tree of n nodes labelled from 0 to n - 1, and an array of n - 1 edges where edges[i] = [ai, bi] indicates that there is an undirected edge between the two nodes ai and bi in the tree, you can choose any node of the tree as the root. When you select a node x as the root, the result tree has height h. Among all possible rooted trees, those with minimum height (i.e. min(h))  are called minimum height trees (MHTs).\n        Return a list of all MHTs' root labels. You can return the answer in any order.\n        The height of a rooted tree is the number of edges on the longest downward path between the root and a leaf.\n        Example 1:\n        Input: n = 4, edges = [[1,0],[1,2],[1,3]]\n        Output: [1]\n        Explanation: As shown, the height of the tree is 1 when the root is the node with label 1 which is the only MHT.\n        Example 2:\n        Input: n = 6, edges = [[3,0],[3,1],[3,2],[3,4],[5,4]]\n        Output: [3,4]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        if n == 1:\n            return [0]\n        graph = collections.defaultdict(list)\n        for edge in edges:\n            graph[edge[0]].append(edge[1])\n            graph[edge[1]].append(edge[0])\n        leaves = []\n        for i in range(n):\n            if len(graph[i]) == 1:\n                leaves.append(i)\n        while n > 2:\n            n -= len(leaves)\n            new_leaves = []\n            for leaf in leaves:\n                neighbor = graph[leaf].pop()\n                graph[neighbor].remove(leaf)\n                if len(graph[neighbor]) == 1:\n                    new_leaves.append(neighbor)\n            leaves = new_leaves\n        return leaves"
    },
    {
        "number": 312,
        "title": "Burst Balloons",
        "difficulty": 2,
        "prompt": "class Solution:\n    def maxCoins(self, nums: List[int]) -> int:\n        \"\"\"\n        You are given n balloons, indexed from 0 to n - 1. Each balloon is painted with a number on it represented by an array nums. You are asked to burst all the balloons.\n        If you burst the ith balloon, you will get nums[i - 1] * nums[i] * nums[i + 1] coins. If i - 1 or i + 1 goes out of bounds of the array, then treat it as if there is a balloon with a 1 painted on it.\n        Return the maximum coins you can collect by bursting the balloons wisely.\n        Example 1:\n        Input: nums = [3,1,5,8]\n        Output: 167\n        Explanation:\n        nums = [3,1,5,8] --> [3,5,8] --> [3,8] --> [8] --> []\n        coins =  3*1*5    +   3*5*8   +  1*3*8  + 1*8*1 = 167\n        Example 2:\n        Input: nums = [1,5]\n        Output: 10\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        nums = [1, *nums, 1]\n        n = len(nums)\n        dp = [[0] * n for _ in range(n)]\n        for i in range(n - 2, -1, -1):\n            for j in range(i + 2, n):\n                dp[i][j] = max(nums[i] * nums[k] * nums[j] + dp[i][k] + dp[k][j] for k in range(i + 1, j))\n        return dp[0][n - 1]"
    },
    {
        "number": 312,
        "title": "Burst Balloons",
        "difficulty": 2,
        "prompt": "class Solution:\n    def maxCoins(self, nums: List[int]) -> int:\n        \"\"\"\n        You are given n balloons, indexed from 0 to n - 1. Each balloon is painted with a number on it represented by an array nums. You are asked to burst all the balloons.\n        If you burst the ith balloon, you will get nums[i - 1] * nums[i] * nums[i + 1] coins. If i - 1 or i + 1 goes out of bounds of the array, then treat it as if there is a balloon with a 1 painted on it.\n        Return the maximum coins you can collect by bursting the balloons wisely.\n        Example 1:\n        Input: nums = [3,1,5,8]\n        Output: 167\n        Explanation:\n        nums = [3,1,5,8] --> [3,5,8] --> [3,8] --> [8] --> []\n        coins =  3*1*5    +   3*5*8   +  1*3*8  + 1*8*1 = 167\n        Example 2:\n        Input: nums = [1,5]\n        Output: 10\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        nums = [1,5]\n        n = len(nums)\n        dp = [[0]*n for _ in range(n)]\n        for i in range(n):\n            dp[i][i] = nums[i]*nums[i-1]*nums[(i+1)%n]\n        for i in range(n-2,-1,-1):\n            for j in range(i+1,n):\n                for k in range(i+1,j):\n                    dp[i][j] = max(dp[i][j],dp[i][k]+dp[k][j]+nums[i]*nums[k]*nums[j])\n        return dp[0][n-1]\n<|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>"
    },
    {
        "number": 313,
        "title": "Super Ugly Number",
        "difficulty": 1,
        "prompt": "class Solution:\n    def nthSuperUglyNumber(self, n: int, primes: List[int]) -> int:\n        \"\"\"\n        A super ugly number is a positive integer whose prime factors are in the array primes.\n        Given an integer n and an array of integers primes, return the nth super ugly number.\n        The nth super ugly number is guaranteed to fit in a 32-bit signed integer.\n        Example 1:\n        Input: n = 12, primes = [2,7,13,19]\n        Output: 32\n        Explanation: [1,2,4,7,8,13,14,16,19,26,28,32] is the sequence of the first 12 super ugly numbers given primes = [2,7,13,19].\n        Example 2:\n        Input: n = 1, primes = [2,3,5]\n        Output: 1\n        Explanation: 1 has no prime factors, therefore all of its prime factors are in the array primes = [2,3,5].\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        # \u5229\u7528heapq\u7684heappop()\u65b9\u6cd5\uff0c\u6bcf\u6b21\u5f39\u51fa\u6700\u5c0f\u7684\u6570\uff0c\u5e76\u4e14\u628a\u5b83\u7684\u6240\u6709\u500d\u6570\u653e\u5165heapq\u4e2d\n        # \u65f6\u95f4\u590d\u6742\u5ea6O(nlogk)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6O(k)\n        # \u5176\u4e2dk\u4e3aprimes\u7684\u957f\u5ea6\n        import heapq\n        heap = [1]\n        seen = {1}\n        for i in range(n):\n            curr = heapq.heappop(heap)\n            for prime in primes:\n                new = curr * prime\n                if new not in seen:\n                    seen.add(new)\n                    heapq.heappush(heap, new)\n        return curr"
    },
    {
        "number": 313,
        "title": "Super Ugly Number",
        "difficulty": 1,
        "prompt": "class Solution:\n    def nthSuperUglyNumber(self, n: int, primes: List[int]) -> int:\n        \"\"\"\n        A super ugly number is a positive integer whose prime factors are in the array primes.\n        Given an integer n and an array of integers primes, return the nth super ugly number.\n        The nth super ugly number is guaranteed to fit in a 32-bit signed integer.\n        Example 1:\n        Input: n = 12, primes = [2,7,13,19]\n        Output: 32\n        Explanation: [1,2,4,7,8,13,14,16,19,26,28,32] is the sequence of the first 12 super ugly numbers given primes = [2,7,13,19].\n        Example 2:\n        Input: n = 1, primes = [2,3,5]\n        Output: 1\n        Explanation: 1 has no prime factors, therefore all of its prime factors are in the array primes = [2,3,5].\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        # \u5c06\u6240\u6709\u7684\u7d20\u6570\u653e\u5165\u4e00\u4e2a\u6570\u7ec4\u4e2d\uff0c\u7136\u540e\u4ece\u7b2c\u4e00\u4e2a\u6570\u5f00\u59cb\u904d\u5386\uff0c\u6bcf\u6b21\u628a\u6240\u6709\u7d20\u6570\u7684\u4e58\u79ef\u653e\u5165\u6570\u7ec4\u4e2d\uff0c\n        # \u7136\u540e\u628a\u8fd9\u4e2a\u6570\u52a0\u5165\u5230\u7ed3\u679c\u4e2d\uff0c\u5e76\u4e14\u628a\u8fd9\u4e2a\u6570\u4ece\u6570\u7ec4\u4e2d\u5220\u9664\u6389\uff0c\u76f4\u5230\u904d\u5386\u5b8c\u6240\u6709\u7684\u6570\uff0c\n        # \u7136\u540e\u8fd4\u56de\u6700\u540e\u4e00\u4e2a\u6570\u5373\u53ef\u3002\n        # \u65f6\u95f4\u590d\u6742\u5ea6O(n*m)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6O(n)\n        import heapq\n        heap = []\n        heapq.heappush(heap, 1)\n        visited = set()\n        visited.add(1)\n        for _ in range(n):\n            cur = heap"
    },
    {
        "number": 315,
        "title": "Count of Smaller Numbers After Self",
        "difficulty": 2,
        "prompt": "class Solution:\n    def countSmaller(self, nums: List[int]) -> List[int]:\n        \"\"\"\n        Given an integer array nums, return an integer array counts where counts[i] is the number of smaller elements to the right of nums[i].\n        Example 1:\n        Input: nums = [5,2,6,1]\n        Output: [2,1,1,0]\n        Explanation:\n        To the right of 5 there are 2 smaller elements (2 and 1).\n        To the right of 2 there is only 1 smaller element (1).\n        To the right of 6 there is 1 smaller element (1).\n        To the right of 1 there is 0 smaller element.\n        Example 2:\n        Input: nums = [-1]\n        Output: [0]\n        Example 3:\n        Input: nums = [-1,-1]\n        Output: [0,0]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        # \u5355\u8c03\u6808\n        # \u65f6\u95f4\u590d\u6742\u5ea6O(n)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6O(n)\n        # \u5148\u628anums\u6392\u5e8f\uff0c\u7136\u540e\u4ece\u540e\u5f80\u524d\u904d\u5386\uff0c\u6bcf\u6b21\u9047\u5230\u6bd4\u6808\u9876\u5143\u7d20\u5c0f\u7684\u5143\u7d20\uff0c\u5c31\u5c06\u5176\u4e2a\u6570\u52a0\u5165\u6808\u4e2d\n        # \u5f53\u9047\u5230\u6bd4\u6808\u9876\u5143\u7d20\u5927\u7684\u5143\u7d20\u65f6\uff0c\u5c31\u5f39\u51fa\u6808\u9876\u5143\u7d20\uff0c\u5e76\u5c06\u5176\u4e2a\u6570\u52a0\u5165\u7ed3\u679c\u4e2d\n        # \u5f53\u904d\u5386\u5b8c\u6210\u540e\uff0c\u6808\u4e2d\u5269\u4f59\u7684\u5143\u7d20\u5c31\u662f\u6bd4nums\u4e2d\u6bcf\u4e2a\u5143\u7d20\u5c0f\u7684\u5143\u7d20\u4e2a\u6570\n        # \u65f6\u95f4\u590d\u6742\u5ea6O(nlogn)\uff0c\u7a7a\u95f4\u590d"
    },
    {
        "number": 315,
        "title": "Count of Smaller Numbers After Self",
        "difficulty": 2,
        "prompt": "class Solution:\n    def countSmaller(self, nums: List[int]) -> List[int]:\n        \"\"\"\n        Given an integer array nums, return an integer array counts where counts[i] is the number of smaller elements to the right of nums[i].\n        Example 1:\n        Input: nums = [5,2,6,1]\n        Output: [2,1,1,0]\n        Explanation:\n        To the right of 5 there are 2 smaller elements (2 and 1).\n        To the right of 2 there is only 1 smaller element (1).\n        To the right of 6 there is 1 smaller element (1).\n        To the right of 1 there is 0 smaller element.\n        Example 2:\n        Input: nums = [-1]\n        Output: [0]\n        Example 3:\n        Input: nums = [-1,-1]\n        Output: [0,0]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        # [5,2,6,1]\n        # [0,0,0,0]\n        # [0,0,0,0]\n        # [0,0,0,0]\n        # [0,0,0,0]\n        # [0,0,0,0]\n        # [0,0,0,0]\n        # [0,0,0,0]\n        # [0,0,0,0]\n        # [0,0,0,0]\n        # [0,0,0,0]\n        # [0,0,0,0]\n        # [0,0,0,0]\n        # [0,0,0,0]\n        # [0,0,0,0]\n        # [0,0,0,0]\n        # [0,0,0,0]\n        # [0,0,0,0]\n        # [0,0,0,0]\n        # [0,0,0,0]\n        # [0,0,0,0]\n        # [0,0,0,0]\n        # [0,0,0,0]\n        # [0,0,0,0]\n        # [0,0,0,0]\n"
    },
    {
        "number": 316,
        "title": "Remove Duplicate Letters",
        "difficulty": 1,
        "prompt": "class Solution:\n    def removeDuplicateLetters(self, s: str) -> str:\n        \"\"\"\n        Given a string s, remove duplicate letters so that every letter appears once and only once. You must make sure your result is the smallest in lexicographical order among all possible results.\n        Example 1:\n        Input: s = \"bcabc\"\n        Output: \"abc\"\n        Example 2:\n        Input: s = \"cbacdcbc\"\n        Output: \"acdb\"\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        # \u5148\u6392\u5e8f\uff0c\u7136\u540e\u6309\u7167\u5b57\u5178\u5e8f\u6392\u5e8f\uff0c\u6700\u540e\u6392\u5e8f\n        # \u5148\u6392\u5e8f\uff0c\u7136\u540e\u6309\u7167\u5b57\u5178\u5e8f\u6392\u5e8f\uff0c\u6700\u540e\u6392\u5e8f\n        # \u5148\u6392\u5e8f\uff0c\u7136\u540e\u6309\u7167\u5b57\u5178\u5e8f\u6392\u5e8f\uff0c\u6700\u540e\u6392\u5e8f\n        # \u5148\u6392\u5e8f\uff0c\u7136\u540e\u6309\u7167\u5b57\u5178\u5e8f\u6392\u5e8f\uff0c\u6700\u540e\u6392\u5e8f\n        # \u5148\u6392\u5e8f\uff0c\u7136\u540e\u6309\u7167\u5b57\u5178\u5e8f\u6392\u5e8f\uff0c\u6700\u540e\u6392\u5e8f\n        # \u5148\u6392\u5e8f\uff0c\u7136\u540e\u6309\u7167\u5b57\u5178\u5e8f\u6392\u5e8f\uff0c\u6700\u540e\u6392\u5e8f\n        # \u5148\u6392\u5e8f\uff0c\u7136\u540e\ufffd"
    },
    {
        "number": 316,
        "title": "Remove Duplicate Letters",
        "difficulty": 1,
        "prompt": "class Solution:\n    def removeDuplicateLetters(self, s: str) -> str:\n        \"\"\"\n        Given a string s, remove duplicate letters so that every letter appears once and only once. You must make sure your result is the smallest in lexicographical order among all possible results.\n        Example 1:\n        Input: s = \"bcabc\"\n        Output: \"abc\"\n        Example 2:\n        Input: s = \"cbacdcbc\"\n        Output: \"acdb\"\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        # \u5148\u6392\u5e8f\uff0c\u518d\u904d\u5386\n        # \u5148\u6392\u5e8f\uff0c\u518d\u904d\u5386\n        # \u5148\u6392\u5e8f\uff0c\u518d\u904d\u5386\n        # \u5148\u6392\u5e8f\uff0c\u518d\u904d\u5386\n        # \u5148\u6392\u5e8f\uff0c\u518d\u904d\u5386\n        # \u5148\u6392\u5e8f\uff0c\u518d\u904d\u5386\n        # \u5148\u6392\u5e8f\uff0c\u518d\u904d\u5386\n        # \u5148\u6392\u5e8f\uff0c\u518d\u904d\u5386\n        # \u5148\u6392\u5e8f\uff0c\u518d\u904d\u5386\n        # \u5148\u6392\u5e8f\uff0c\u518d\u904d\u5386\n        # \u5148\u6392\u5e8f\uff0c\u518d\u904d\u5386\n        # \u5148\u6392\u5e8f\uff0c\u518d\u904d\u5386\n        # \u5148\u6392\u5e8f\uff0c\u518d\u904d\u5386\n        # \u5148\u6392\u5e8f\uff0c\u518d\u904d\u5386\n        # \u5148\u6392\u5e8f\uff0c\u518d\u904d\u5386\n"
    },
    {
        "number": 318,
        "title": "Maximum Product of Word Lengths",
        "difficulty": 1,
        "prompt": "class Solution:\n    def maxProduct(self, words: List[str]) -> int:\n        \"\"\"\n        Given a string array words, return the maximum value of length(word[i]) * length(word[j]) where the two words do not share common letters. If no such two words exist, return 0.\n        Example 1:\n        Input: words = [\"abcw\",\"baz\",\"foo\",\"bar\",\"xtfn\",\"abcdef\"]\n        Output: 16\n        Explanation: The two words can be \"abcw\", \"xtfn\".\n        Example 2:\n        Input: words = [\"a\",\"ab\",\"abc\",\"d\",\"cd\",\"bcd\",\"abcd\"]\n        Output: 4\n        Explanation: The two words can be \"ab\", \"cd\".\n        Example 3:\n        Input: words = [\"a\",\"aa\",\"aaa\",\"aaaa\"]\n        Output: 0\n        Explanation: No such pair of words.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        # build a trie\n        trie = {}\n        for word in words:\n            curr = trie\n            for c in word:\n                if c not in curr:\n                    curr[c] = {}\n                curr = curr[c]\n            curr['#'] = word\n        \n        # dfs\n        res = 0\n        for word in words:\n            curr = trie\n            for c in word:\n                if c not in curr:\n                    break\n                curr = curr[c]\n            else:\n                res = max(res, len(word) * len(curr['#']))\n        return res\n    \n    def maxProduct2(self, words: List[str]) -> int:\n        \"\"\"\n        Given a string array words, return the maximum value of length(word[i]) * length(word[j]) where the two words do not share common letters. If no such two words exist, return 0.\n        Example 1:\n        Input: words = [\"abcw\",\"baz\",\"foo\",\"bar\",\"xtfn\",\"abcdef\"]\n        Output: 16\n        Explanation: The two words can be \"abcw\", \"xtfn\".\n        Example 2:\n        Input: words = [\"a\",\"ab\",\"abc\",\"d\",\"cd\",\"bcd\",\""
    },
    {
        "number": 318,
        "title": "Maximum Product of Word Lengths",
        "difficulty": 1,
        "prompt": "class Solution:\n    def maxProduct(self, words: List[str]) -> int:\n        \"\"\"\n        Given a string array words, return the maximum value of length(word[i]) * length(word[j]) where the two words do not share common letters. If no such two words exist, return 0.\n        Example 1:\n        Input: words = [\"abcw\",\"baz\",\"foo\",\"bar\",\"xtfn\",\"abcdef\"]\n        Output: 16\n        Explanation: The two words can be \"abcw\", \"xtfn\".\n        Example 2:\n        Input: words = [\"a\",\"ab\",\"abc\",\"d\",\"cd\",\"bcd\",\"abcd\"]\n        Output: 4\n        Explanation: The two words can be \"ab\", \"cd\".\n        Example 3:\n        Input: words = [\"a\",\"aa\",\"aaa\",\"aaaa\"]\n        Output: 0\n        Explanation: No such pair of words.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        # 1. Brute Force\n        # Time: O(n^2)\n        # Space: O(1)\n        # n = len(words)\n        # res = 0\n        # for i in range(n):\n        #     for j in range(i+1, n):\n        #         set1 = set(words[i])\n        #         set2 = set(words[j])\n        #         if len(set1.intersection(set2)) == 0:\n        #             res = max(res, len(words[i]) * len(words[j]))\n        # return res"
    },
    {
        "number": 319,
        "title": "Bulb Switcher",
        "difficulty": 1,
        "prompt": "class Solution:\n    def bulbSwitch(self, n: int) -> int:\n        \"\"\"\n        There are n bulbs that are initially off. You first turn on all the bulbs, then you turn off every second bulb.\n        On the third round, you toggle every third bulb (turning on if it's off or turning off if it's on). For the ith round, you toggle every i bulb. For the nth round, you only toggle the last bulb.\n        Return the number of bulbs that are on after n rounds.\n        Example 1:\n        Input: n = 3\n        Output: 1\n        Explanation: At first, the three bulbs are [off, off, off].\n        After the first round, the three bulbs are [on, on, on].\n        After the second round, the three bulbs are [on, off, on].\n        After the third round, the three bulbs are [on, off, off]. \n        So you should return 1 because there is only one bulb is on.\n        Example 2:\n        Input: n = 0\n        Output: 0\n        Example 3:\n        Input: n = 1\n        Output: 1\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        return int(n**0.5)"
    },
    {
        "number": 319,
        "title": "Bulb Switcher",
        "difficulty": 1,
        "prompt": "class Solution:\n    def bulbSwitch(self, n: int) -> int:\n        \"\"\"\n        There are n bulbs that are initially off. You first turn on all the bulbs, then you turn off every second bulb.\n        On the third round, you toggle every third bulb (turning on if it's off or turning off if it's on). For the ith round, you toggle every i bulb. For the nth round, you only toggle the last bulb.\n        Return the number of bulbs that are on after n rounds.\n        Example 1:\n        Input: n = 3\n        Output: 1\n        Explanation: At first, the three bulbs are [off, off, off].\n        After the first round, the three bulbs are [on, on, on].\n        After the second round, the three bulbs are [on, off, on].\n        After the third round, the three bulbs are [on, off, off]. \n        So you should return 1 because there is only one bulb is on.\n        Example 2:\n        Input: n = 0\n        Output: 0\n        Example 3:\n        Input: n = 1\n        Output: 1\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        return int(n**0.5)"
    },
    {
        "number": 321,
        "title": "Create Maximum Number",
        "difficulty": 2,
        "prompt": "class Solution:\n    def maxNumber(self, nums1: List[int], nums2: List[int], k: int) -> List[int]:\n        \"\"\"\n        You are given two integer arrays nums1 and nums2 of lengths m and n respectively. nums1 and nums2 represent the digits of two numbers. You are also given an integer k.\n        Create the maximum number of length k <= m + n from digits of the two numbers. The relative order of the digits from the same array must be preserved.\n        Return an array of the k digits representing the answer.\n        Example 1:\n        Input: nums1 = [3,4,6,5], nums2 = [9,1,2,5,8,3], k = 5\n        Output: [9,8,6,5,3]\n        Example 2:\n        Input: nums1 = [6,7], nums2 = [6,0,4], k = 5\n        Output: [6,7,6,0,4]\n        Example 3:\n        Input: nums1 = [3,9], nums2 = [8,9], k = 3\n        Output: [9,8,9]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        def get_max_number(nums1, nums2, k):\n            def get_max_number_helper(nums1, nums2, k, m, n):\n                if m == 0 and n == 0:\n                    return []\n                if m == 0:\n                    return nums2[:n]\n                if n == 0:\n                    return nums1[:m]\n                if k == 1:\n                    return [max(nums1[m-1], nums2[n-1])]\n                if m >= k:\n                    return [max(nums1[m-1], nums2[n-1])] + get_max_number_helper(nums1, nums2, k-1, m-1, n)\n                if n >= k:\n                    return [max(nums1[m-1], nums2[n-1])] + get_max_number_helper(nums1, nums2, k, m, n-1)\n                return [max(nums1[m-1], nums2[n-1])] + get_max_number_helper(nums1, nums2, k-1, m, n-1)\n            return get_max_number_helper("
    },
    {
        "number": 321,
        "title": "Create Maximum Number",
        "difficulty": 2,
        "prompt": "class Solution:\n    def maxNumber(self, nums1: List[int], nums2: List[int], k: int) -> List[int]:\n        \"\"\"\n        You are given two integer arrays nums1 and nums2 of lengths m and n respectively. nums1 and nums2 represent the digits of two numbers. You are also given an integer k.\n        Create the maximum number of length k <= m + n from digits of the two numbers. The relative order of the digits from the same array must be preserved.\n        Return an array of the k digits representing the answer.\n        Example 1:\n        Input: nums1 = [3,4,6,5], nums2 = [9,1,2,5,8,3], k = 5\n        Output: [9,8,6,5,3]\n        Example 2:\n        Input: nums1 = [6,7], nums2 = [6,0,4], k = 5\n        Output: [6,7,6,0,4]\n        Example 3:\n        Input: nums1 = [3,9], nums2 = [8,9], k = 3\n        Output: [9,8,9]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        def get_max_number(nums1, nums2, k):\n            \"\"\"\n            Return the maximum number of length k.\n            \"\"\"\n            def get_max_number_helper(nums1, nums2, k, m, n, curr, i, j):\n                if i == m or j == n:\n                    return curr\n                if k == 1:\n                    return max(nums1[i], nums2[j])\n                if i < m and j < n:\n                    return max(get_max_number_helper(nums1, nums2, k - 1, m, n, curr + [nums1[i]], i + 1, j),\n                               get_max_number_helper(nums1, nums2, k - 1, m, n, curr + [nums2[j]], i, j + 1))\n                elif i < m:\n                    return get_max_number_helper(nums1, nums2, k - 1, m, n, curr + [nums1[i]], i + 1, j)\n                elif j < n:\n                    return get_max_number_helper(nums1, nums2, k - 1, m, n, curr"
    },
    {
        "number": 322,
        "title": "Coin Change",
        "difficulty": 1,
        "prompt": "class Solution:\n    def coinChange(self, coins: List[int], amount: int) -> int:\n        \"\"\"\n        You are given an integer array coins representing coins of different denominations and an integer amount representing a total amount of money.\n        Return the fewest number of coins that you need to make up that amount. If that amount of money cannot be made up by any combination of the coins, return -1.\n        You may assume that you have an infinite number of each kind of coin.\n        Example 1:\n        Input: coins = [1,2,5], amount = 11\n        Output: 3\n        Explanation: 11 = 5 + 5 + 1\n        Example 2:\n        Input: coins = [2], amount = 3\n        Output: -1\n        Example 3:\n        Input: coins = [1], amount = 0\n        Output: 0\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        # dp[i] = min(dp[i], dp[i - coins[j]] + 1)\n        # dp[i] = min(dp[i], dp[i - coins[j]] + 1)\n        # dp[i] = min(dp[i], dp[i - coins[j]] + 1)\n        # dp[i] = min(dp[i], dp[i - coins[j]] + 1)\n        # dp[i] = min(dp[i], dp[i - coins[j]] + 1)\n        # dp[i] = min(dp[i], dp[i - coins[j]] + 1)\n        # dp[i] = min(dp[i], dp[i - coins[j]] + 1)\n        # dp[i] = min(dp[i], dp[i - coins[j]] + 1)\n        # dp[i] = min(dp[i], dp[i - coins[j]] + 1)\n        # dp[i] = min(dp[i], dp[i - coins[j]] + 1)\n        # dp[i] = min(dp[i], dp[i - coins[j]] + 1)\n        # d"
    },
    {
        "number": 322,
        "title": "Coin Change",
        "difficulty": 1,
        "prompt": "class Solution:\n    def coinChange(self, coins: List[int], amount: int) -> int:\n        \"\"\"\n        You are given an integer array coins representing coins of different denominations and an integer amount representing a total amount of money.\n        Return the fewest number of coins that you need to make up that amount. If that amount of money cannot be made up by any combination of the coins, return -1.\n        You may assume that you have an infinite number of each kind of coin.\n        Example 1:\n        Input: coins = [1,2,5], amount = 11\n        Output: 3\n        Explanation: 11 = 5 + 5 + 1\n        Example 2:\n        Input: coins = [2], amount = 3\n        Output: -1\n        Example 3:\n        Input: coins = [1], amount = 0\n        Output: 0\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        # dp[i] = min number of coins to make up amount i\n        dp = [float('inf')] * (amount + 1)\n        dp[0] = 0\n        for coin in coins:\n            for i in range(coin, amount + 1):\n                dp[i] = min(dp[i], dp[i - coin] + 1)\n        return dp[amount] if dp[amount]!= float('inf') else -1"
    },
    {
        "number": 324,
        "title": "Wiggle Sort II",
        "difficulty": 1,
        "prompt": "class Solution:\n    def wiggleSort(self, nums: List[int]) -> None:\n        \"\"\"\n        Do not return anything, modify nums in-place instead.\n        Given an integer array nums, reorder it such that nums[0] < nums[1] > nums[2] < nums[3]....\n        You may assume the input array always has a valid answer.\n        Example 1:\n        Input: nums = [1,5,1,1,6,4]\n        Output: [1,6,1,5,1,4]\n        Explanation: [1,4,1,5,1,6] is also accepted.\n        Example 2:\n        Input: nums = [1,3,2,2,3,1]\n        Output: [2,3,1,3,1,2]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        nums.sort()\n        n = len(nums)\n        for i in range(1, n, 2):\n            nums[i], nums[i - 1] = nums[i - 1], nums[i]"
    },
    {
        "number": 324,
        "title": "Wiggle Sort II",
        "difficulty": 1,
        "prompt": "class Solution:\n    def wiggleSort(self, nums: List[int]) -> None:\n        \"\"\"\n        Do not return anything, modify nums in-place instead.\n        Given an integer array nums, reorder it such that nums[0] < nums[1] > nums[2] < nums[3]....\n        You may assume the input array always has a valid answer.\n        Example 1:\n        Input: nums = [1,5,1,1,6,4]\n        Output: [1,6,1,5,1,4]\n        Explanation: [1,4,1,5,1,6] is also accepted.\n        Example 2:\n        Input: nums = [1,3,2,2,3,1]\n        Output: [2,3,1,3,1,2]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        nums.sort()\n        mid = len(nums) // 2\n        nums[::2], nums[1::2] = nums[mid::-1], nums[:mid:-1]"
    },
    {
        "number": 326,
        "title": "Power of Three",
        "difficulty": 0,
        "prompt": "class Solution:\n    def isPowerOfThree(self, n: int) -> bool:\n        \"\"\"\n        Given an integer n, return true if it is a power of three. Otherwise, return false.\n        An integer n is a power of three, if there exists an integer x such that n == 3x.\n        Example 1:\n        Input: n = 27\n        Output: true\n        Explanation: 27 = 33\n        Example 2:\n        Input: n = 0\n        Output: false\n        Explanation: There is no x where 3x = 0.\n        Example 3:\n        Input: n = -1\n        Output: false\n        Explanation: There is no x where 3x = (-1).\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        if n < 1:\n            return False\n        while n % 3 == 0:\n            n /= 3\n        return n == 1"
    },
    {
        "number": 326,
        "title": "Power of Three",
        "difficulty": 0,
        "prompt": "class Solution:\n    def isPowerOfThree(self, n: int) -> bool:\n        \"\"\"\n        Given an integer n, return true if it is a power of three. Otherwise, return false.\n        An integer n is a power of three, if there exists an integer x such that n == 3x.\n        Example 1:\n        Input: n = 27\n        Output: true\n        Explanation: 27 = 33\n        Example 2:\n        Input: n = 0\n        Output: false\n        Explanation: There is no x where 3x = 0.\n        Example 3:\n        Input: n = -1\n        Output: false\n        Explanation: There is no x where 3x = (-1).\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        if n == 0:\n            return False\n        if n == 1:\n            return True\n        if n % 3!= 0:\n            return False\n        return self.isPowerOfThree(n // 3)"
    },
    {
        "number": 327,
        "title": "Count of Range Sum",
        "difficulty": 2,
        "prompt": "class Solution:\n    def countRangeSum(self, nums: List[int], lower: int, upper: int) -> int:\n        \"\"\"\n        Given an integer array nums and two integers lower and upper, return the number of range sums that lie in [lower, upper] inclusive.\n        Range sum S(i, j) is defined as the sum of the elements in nums between indices i and j inclusive, where i <= j.\n        Example 1:\n        Input: nums = [-2,5,-1], lower = -2, upper = 2\n        Output: 3\n        Explanation: The three ranges are: [0,0], [2,2], and [0,2] and their respective sums are: -2, -1, 2.\n        Example 2:\n        Input: nums = [0], lower = 0, upper = 0\n        Output: 1\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        # \u524d\u7f00\u548c\n        # \u65f6\u95f4\u590d\u6742\u5ea6O(n)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6O(n)\n        # \u5148\u6c42\u524d\u7f00\u548c\uff0c\u7136\u540e\u7edf\u8ba1\u6bcf\u4e2a\u524d\u7f00\u548c\u51fa\u73b0\u7684\u6b21\u6570\n        # \u5bf9\u4e8e\u6bcf\u4e2a\u524d\u7f00\u548c\uff0c\u53ef\u4ee5\u5206\u6210\u4e24\u79cd\u60c5\u51b5\uff1a\n        # 1. \u524d\u7f00\u548c\u5728\u533a\u95f4[lower, upper]\u5185\n        # 2. \u524d\u7f00\u548c\u5728\u533a\u95f4[lower, upper]\u5916\n        # \u56e0\u6b64\u53ef\u4ee5\u5206\u6210\u4e24\u79cd\u60c5\u51b5\uff1a\n        # 1. \u524d\u7f00\u548c\u5728\u533a\u95f4[lower, upper]\u5185\uff0c\u90a3\u4e48\u7edf\u8ba1\u524d\u7f00\u548c\u51fa\u73b0\u7684\u6b21\u6570\n        # 2. \u524d\u7f00\ufffd"
    },
    {
        "number": 327,
        "title": "Count of Range Sum",
        "difficulty": 2,
        "prompt": "class Solution:\n    def countRangeSum(self, nums: List[int], lower: int, upper: int) -> int:\n        \"\"\"\n        Given an integer array nums and two integers lower and upper, return the number of range sums that lie in [lower, upper] inclusive.\n        Range sum S(i, j) is defined as the sum of the elements in nums between indices i and j inclusive, where i <= j.\n        Example 1:\n        Input: nums = [-2,5,-1], lower = -2, upper = 2\n        Output: 3\n        Explanation: The three ranges are: [0,0], [2,2], and [0,2] and their respective sums are: -2, -1, 2.\n        Example 2:\n        Input: nums = [0], lower = 0, upper = 0\n        Output: 1\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        # prefix sum\n        # O(n)\n        # O(n)\n        # prefix sum\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O"
    },
    {
        "number": 328,
        "title": "Odd Even Linked List",
        "difficulty": 1,
        "prompt": "class Solution:\n    def oddEvenList(self, head: Optional[ListNode]) -> Optional[ListNode]:\n        \"\"\"\n        Given the head of a singly linked list, group all the nodes with odd indices together followed by the nodes with even indices, and return the reordered list.\n        The first node is considered odd, and the second node is even, and so on.\n        Note that the relative order inside both the even and odd groups should remain as it was in the input.\n        You must solve the problem in O(1) extra space complexity and O(n) time complexity.\n        Example 1:\n        Input: head = [1,2,3,4,5]\n        Output: [1,3,5,2,4]\n        Example 2:\n        Input: head = [2,1,3,5,6,4,7]\n        Output: [2,3,6,7,1,5,4]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        if not head:\n            return None\n        odd = head\n        even = head.next\n        even_head = head.next\n        while even and even.next:\n            odd.next, even.next = odd.next.next, even.next.next\n            odd, even = odd.next, even.next\n        odd.next = even_head\n        return head\n<|endoftext|>"
    },
    {
        "number": 328,
        "title": "Odd Even Linked List",
        "difficulty": 1,
        "prompt": "class Solution:\n    def oddEvenList(self, head: Optional[ListNode]) -> Optional[ListNode]:\n        \"\"\"\n        Given the head of a singly linked list, group all the nodes with odd indices together followed by the nodes with even indices, and return the reordered list.\n        The first node is considered odd, and the second node is even, and so on.\n        Note that the relative order inside both the even and odd groups should remain as it was in the input.\n        You must solve the problem in O(1) extra space complexity and O(n) time complexity.\n        Example 1:\n        Input: head = [1,2,3,4,5]\n        Output: [1,3,5,2,4]\n        Example 2:\n        Input: head = [2,1,3,5,6,4,7]\n        Output: [2,3,6,7,1,5,4]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        if not head:\n            return head\n        odd = head\n        even = head.next\n        even_head = head.next\n        while even and even.next:\n            odd.next, even.next = odd.next.next, even.next.next\n            odd, even = odd.next, even.next\n        odd.next = even_head\n        return head\n<|endoftext|>"
    },
    {
        "number": 329,
        "title": "Longest Increasing Path in a Matrix",
        "difficulty": 2,
        "prompt": "class Solution:\n    def longestIncreasingPath(self, matrix: List[List[int]]) -> int:\n        \"\"\"\n        Given an m x n integers matrix, return the length of the longest increasing path in matrix.\n        From each cell, you can either move in four directions: left, right, up, or down. You may not move diagonally or move outside the boundary (i.e., wrap-around is not allowed).\n        Example 1:\n        Input: matrix = [[9,9,4],[6,6,8],[2,1,1]]\n        Output: 4\n        Explanation: The longest increasing path is [1, 2, 6, 9].\n        Example 2:\n        Input: matrix = [[3,4,5],[3,2,6],[2,2,1]]\n        Output: 4\n        Explanation: The longest increasing path is [3, 4, 5, 6]. Moving diagonally is not allowed.\n        Example 3:\n        Input: matrix = [[1]]\n        Output: 1\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        if not matrix:\n            return 0\n        m, n = len(matrix), len(matrix[0])\n        dp = [[0] * n for _ in range(m)]\n        ans = 1\n        for i in range(m):\n            for j in range(n):\n                ans = max(ans, self.dfs(matrix, i, j, dp))\n        return ans"
    },
    {
        "number": 329,
        "title": "Longest Increasing Path in a Matrix",
        "difficulty": 2,
        "prompt": "class Solution:\n    def longestIncreasingPath(self, matrix: List[List[int]]) -> int:\n        \"\"\"\n        Given an m x n integers matrix, return the length of the longest increasing path in matrix.\n        From each cell, you can either move in four directions: left, right, up, or down. You may not move diagonally or move outside the boundary (i.e., wrap-around is not allowed).\n        Example 1:\n        Input: matrix = [[9,9,4],[6,6,8],[2,1,1]]\n        Output: 4\n        Explanation: The longest increasing path is [1, 2, 6, 9].\n        Example 2:\n        Input: matrix = [[3,4,5],[3,2,6],[2,2,1]]\n        Output: 4\n        Explanation: The longest increasing path is [3, 4, 5, 6]. Moving diagonally is not allowed.\n        Example 3:\n        Input: matrix = [[1]]\n        Output: 1\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        if not matrix:\n            return 0\n        m, n = len(matrix), len(matrix[0])\n        dp = [[0] * n for _ in range(m)]\n        res = 1\n        for i in range(m):\n            for j in range(n):\n                res = max(res, self.dfs(matrix, i, j, dp))\n        return res"
    },
    {
        "number": 330,
        "title": "Patching Array",
        "difficulty": 2,
        "prompt": "class Solution:\n    def minPatches(self, nums: List[int], n: int) -> int:\n        \"\"\"\n        Given a sorted integer array nums and an integer n, add/patch elements to the array such that any number in the range [1, n] inclusive can be formed by the sum of some elements in the array.\n        Return the minimum number of patches required.\n        Example 1:\n        Input: nums = [1,3], n = 6\n        Output: 1\n        Explanation:\n        Combinations of nums are [1], [3], [1,3], which form possible sums of: 1, 3, 4.\n        Now if we add/patch 2 to nums, the combinations are: [1], [2], [3], [1,3], [2,3], [1,2,3].\n        Possible sums are 1, 2, 3, 4, 5, 6, which now covers the range [1, 6].\n        So we only need 1 patch.\n        Example 2:\n        Input: nums = [1,5,10], n = 20\n        Output: 2\n        Explanation: The two patches can be [2, 4].\n        Example 3:\n        Input: nums = [1,2,2], n = 5\n        Output: 0\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        # Time: O(n)\n        # Space: O(1)\n        # Greedy\n        # 1. Find the first number that is not in the range [1, n]\n        # 2. Add it to the range [1, n]\n        # 3. Add the next number that is not in the range [1, n]\n        # 4. Repeat until all numbers are in the range [1, n]\n        # 5. Return the number of patches\n        # 6. If we cannot add any more numbers, return -1\n        # 7. If we have added all numbers, return 0\n        # 8. If we have added all numbers, but we still need to add numbers to the range [1, n], return -1\n        # 9. If we have added all numbers, but we still need to add numbers to the range [1, n], return 0\n        # 10. If we have added all numbers, but we still need to add numbers to the range [1, n], return -1\n        # 11. If we have added all numbers, but we still need to add numbers to the range [1, n], return 0\n        # 12. If we have added all numbers, but we still need to add numbers to the range [1, n], return -1\n        # 13. If we have added all numbers, but we still need to"
    },
    {
        "number": 330,
        "title": "Patching Array",
        "difficulty": 2,
        "prompt": "class Solution:\n    def minPatches(self, nums: List[int], n: int) -> int:\n        \"\"\"\n        Given a sorted integer array nums and an integer n, add/patch elements to the array such that any number in the range [1, n] inclusive can be formed by the sum of some elements in the array.\n        Return the minimum number of patches required.\n        Example 1:\n        Input: nums = [1,3], n = 6\n        Output: 1\n        Explanation:\n        Combinations of nums are [1], [3], [1,3], which form possible sums of: 1, 3, 4.\n        Now if we add/patch 2 to nums, the combinations are: [1], [2], [3], [1,3], [2,3], [1,2,3].\n        Possible sums are 1, 2, 3, 4, 5, 6, which now covers the range [1, 6].\n        So we only need 1 patch.\n        Example 2:\n        Input: nums = [1,5,10], n = 20\n        Output: 2\n        Explanation: The two patches can be [2, 4].\n        Example 3:\n        Input: nums = [1,2,2], n = 5\n        Output: 0\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        # Time: O(n)\n        # Space: O(1)\n        i, miss, res = 0, 1, 0\n        while miss <= n:\n            if i < len(nums) and nums[i] <= miss:\n                miss += nums[i]\n                i += 1\n            else:\n                miss += miss\n                res += 1\n        return res"
    },
    {
        "number": 331,
        "title": "Verify Preorder Serialization of a Binary Tree",
        "difficulty": 1,
        "prompt": "class Solution:\n    def isValidSerialization(self, preorder: str) -> bool:\n        \"\"\"\n        One way to serialize a binary tree is to use preorder traversal. When we encounter a non-null node, we record the node's value. If it is a null node, we record using a sentinel value such as '#'.\n        For example, the above binary tree can be serialized to the string \"9,3,4,#,#,1,#,#,2,#,6,#,#\", where '#' represents a null node.\n        Given a string of comma-separated values preorder, return true if it is a correct preorder traversal serialization of a binary tree.\n        It is guaranteed that each comma-separated value in the string must be either an integer or a character '#' representing null pointer.\n        You may assume that the input format is always valid.\n            For example, it could never contain two consecutive commas, such as \"1,,3\".\n        Note: You are not allowed to reconstruct the tree.\n        Example 1:\n        Input: preorder = \"9,3,4,#,#,1,#,#,2,#,6,#,#\"\n        Output: true\n        Example 2:\n        Input: preorder = \"1,#\"\n        Output: false\n        Example 3:\n        Input: preorder = \"9,#,#,1\"\n        Output: false\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        preorder = preorder.split(',')\n        if len(preorder) == 1:\n            return preorder[0] == '#'\n        if preorder[0] == '#':\n            return False\n        stack = [preorder[0]]\n        for i in range(1, len(preorder)):\n            if not stack:\n                return False\n            if preorder[i] == '#':\n                stack.pop()\n            else:\n                stack.append(preorder[i])\n        return len(stack) == 1 and stack[0] == '#'"
    },
    {
        "number": 331,
        "title": "Verify Preorder Serialization of a Binary Tree",
        "difficulty": 1,
        "prompt": "class Solution:\n    def isValidSerialization(self, preorder: str) -> bool:\n        \"\"\"\n        One way to serialize a binary tree is to use preorder traversal. When we encounter a non-null node, we record the node's value. If it is a null node, we record using a sentinel value such as '#'.\n        For example, the above binary tree can be serialized to the string \"9,3,4,#,#,1,#,#,2,#,6,#,#\", where '#' represents a null node.\n        Given a string of comma-separated values preorder, return true if it is a correct preorder traversal serialization of a binary tree.\n        It is guaranteed that each comma-separated value in the string must be either an integer or a character '#' representing null pointer.\n        You may assume that the input format is always valid.\n            For example, it could never contain two consecutive commas, such as \"1,,3\".\n        Note: You are not allowed to reconstruct the tree.\n        Example 1:\n        Input: preorder = \"9,3,4,#,#,1,#,#,2,#,6,#,#\"\n        Output: true\n        Example 2:\n        Input: preorder = \"1,#\"\n        Output: false\n        Example 3:\n        Input: preorder = \"9,#,#,1\"\n        Output: false\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        preorder = preorder.split(',')\n        if preorder[0] == '#':\n            return len(preorder) == 1\n        stack = [preorder[0]]\n        for i in range(1, len(preorder)):\n            if preorder[i] == '#':\n                if len(stack) == 1 and stack[0] == '#':\n                    return False\n                while len(stack) > 1 and stack[-1] == '#' and stack[-2]!= '#':\n                    stack.pop()\n                    stack.pop()\n                    if len(stack) == 1 and stack[0] == '#':\n                        return False\n                stack.append('#')\n            else:\n                stack.append(preorder[i])\n        return len(stack) == 1 and stack[0] == '#'"
    },
    {
        "number": 332,
        "title": "Reconstruct Itinerary",
        "difficulty": 2,
        "prompt": "class Solution:\n    def findItinerary(self, tickets: List[List[str]]) -> List[str]:\n        \"\"\"\n        You are given a list of airline tickets where tickets[i] = [fromi, toi] represent the departure and the arrival airports of one flight. Reconstruct the itinerary in order and return it.\n        All of the tickets belong to a man who departs from \"JFK\", thus, the itinerary must begin with \"JFK\". If there are multiple valid itineraries, you should return the itinerary that has the smallest lexical order when read as a single string.\n            For example, the itinerary [\"JFK\", \"LGA\"] has a smaller lexical order than [\"JFK\", \"LGB\"].\n        You may assume all tickets form at least one valid itinerary. You must use all the tickets once and only once.\n        Example 1:\n        Input: tickets = [[\"MUC\",\"LHR\"],[\"JFK\",\"MUC\"],[\"SFO\",\"SJC\"],[\"LHR\",\"SFO\"]]\n        Output: [\"JFK\",\"MUC\",\"LHR\",\"SFO\",\"SJC\"]\n        Example 2:\n        Input: tickets = [[\"JFK\",\"SFO\"],[\"JFK\",\"ATL\"],[\"SFO\",\"ATL\"],[\"ATL\",\"JFK\"],[\"ATL\",\"SFO\"]]\n        Output: [\"JFK\",\"ATL\",\"JFK\",\"SFO\",\"ATL\",\"SFO\"]\n        Explanation: Another possible reconstruction is [\"JFK\",\"SFO\",\"ATL\",\"JFK\",\"ATL\",\"SFO\"] but it is larger in lexical order.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        # DFS\n        # Time: O(E + V), E is the number of edges, V is the number of vertices\n        # Space: O(E + V)\n        # graph = collections.defaultdict(list)\n        # for u, v in tickets:\n        #     graph[u].append(v)\n        # for u in graph:\n        #     graph[u].sort(reverse=True)\n        #\n        # def dfs(u):\n        #     while graph[u]:\n        #         dfs(graph[u].pop())\n        #     res.append(u)\n        #\n        # res = []\n        # dfs('JFK')\n        # return res[::-1]"
    },
    {
        "number": 332,
        "title": "Reconstruct Itinerary",
        "difficulty": 2,
        "prompt": "class Solution:\n    def findItinerary(self, tickets: List[List[str]]) -> List[str]:\n        \"\"\"\n        You are given a list of airline tickets where tickets[i] = [fromi, toi] represent the departure and the arrival airports of one flight. Reconstruct the itinerary in order and return it.\n        All of the tickets belong to a man who departs from \"JFK\", thus, the itinerary must begin with \"JFK\". If there are multiple valid itineraries, you should return the itinerary that has the smallest lexical order when read as a single string.\n            For example, the itinerary [\"JFK\", \"LGA\"] has a smaller lexical order than [\"JFK\", \"LGB\"].\n        You may assume all tickets form at least one valid itinerary. You must use all the tickets once and only once.\n        Example 1:\n        Input: tickets = [[\"MUC\",\"LHR\"],[\"JFK\",\"MUC\"],[\"SFO\",\"SJC\"],[\"LHR\",\"SFO\"]]\n        Output: [\"JFK\",\"MUC\",\"LHR\",\"SFO\",\"SJC\"]\n        Example 2:\n        Input: tickets = [[\"JFK\",\"SFO\"],[\"JFK\",\"ATL\"],[\"SFO\",\"ATL\"],[\"ATL\",\"JFK\"],[\"ATL\",\"SFO\"]]\n        Output: [\"JFK\",\"ATL\",\"JFK\",\"SFO\",\"ATL\",\"SFO\"]\n        Explanation: Another possible reconstruction is [\"JFK\",\"SFO\",\"ATL\",\"JFK\",\"ATL\",\"SFO\"] but it is larger in lexical order.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        # build graph\n        graph = {}\n        for ticket in tickets:\n            frm, to = ticket\n            if frm not in graph:\n                graph[frm] = []\n            graph[frm].append(to)\n        # sort graph\n        for frm in graph:\n            graph[frm].sort()\n        # dfs\n        stack = [\"JFK\"]\n        itinerary = []\n        while stack:\n            frm = stack[-1]\n            if frm in graph and len(graph[frm]) > 0:\n                to = graph[frm].pop(0)\n                stack.append(to)\n            else:\n                itinerary.append(stack.pop())\n        return itinerary[::-1]"
    },
    {
        "number": 334,
        "title": "Increasing Triplet Subsequence",
        "difficulty": 1,
        "prompt": "class Solution:\n    def increasingTriplet(self, nums: List[int]) -> bool:\n        \"\"\"\n        Given an integer array nums, return true if there exists a triple of indices (i, j, k) such that i < j < k and nums[i] < nums[j] < nums[k]. If no such indices exists, return false.\n        Example 1:\n        Input: nums = [1,2,3,4,5]\n        Output: true\n        Explanation: Any triplet where i < j < k is valid.\n        Example 2:\n        Input: nums = [5,4,3,2,1]\n        Output: false\n        Explanation: No triplet exists.\n        Example 3:\n        Input: nums = [2,1,5,0,4,6]\n        Output: true\n        Explanation: The triplet (3, 4, 5) is valid because nums[3] == 0 < nums[4] == 4 < nums[5] == 6.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        # Time complexity: O(n)\n        # Space complexity: O(1)\n        first = second = float('inf')\n        for n in nums:\n            if n <= first:\n                first = n\n            elif n <= second:\n                second = n\n            else:\n                return True\n        return False"
    },
    {
        "number": 334,
        "title": "Increasing Triplet Subsequence",
        "difficulty": 1,
        "prompt": "class Solution:\n    def increasingTriplet(self, nums: List[int]) -> bool:\n        \"\"\"\n        Given an integer array nums, return true if there exists a triple of indices (i, j, k) such that i < j < k and nums[i] < nums[j] < nums[k]. If no such indices exists, return false.\n        Example 1:\n        Input: nums = [1,2,3,4,5]\n        Output: true\n        Explanation: Any triplet where i < j < k is valid.\n        Example 2:\n        Input: nums = [5,4,3,2,1]\n        Output: false\n        Explanation: No triplet exists.\n        Example 3:\n        Input: nums = [2,1,5,0,4,6]\n        Output: true\n        Explanation: The triplet (3, 4, 5) is valid because nums[3] == 0 < nums[4] == 4 < nums[5] == 6.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        # Time: O(n), Space: O(1)\n        if len(nums) < 3:\n            return False\n        \n        first = second = float('inf')\n        \n        for num in nums:\n            if num <= first:\n                first = num\n            elif num <= second:\n                second = num\n            else:\n                return True\n        \n        return False\n<|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>"
    },
    {
        "number": 335,
        "title": "Self Crossing",
        "difficulty": 2,
        "prompt": "class Solution:\n    def isSelfCrossing(self, distance: List[int]) -> bool:\n        \"\"\"\n        You are given an array of integers distance.\n        You start at the point (0, 0) on an X-Y plane, and you move distance[0] meters to the north, then distance[1] meters to the west, distance[2] meters to the south, distance[3] meters to the east, and so on. In other words, after each move, your direction changes counter-clockwise.\n        Return true if your path crosses itself or false if it does not.\n        Example 1:\n        Input: distance = [2,1,1,2]\n        Output: true\n        Explanation: The path crosses itself at the point (0, 1).\n        Example 2:\n        Input: distance = [1,2,3,4]\n        Output: false\n        Explanation: The path does not cross itself at any point.\n        Example 3:\n        Input: distance = [1,1,1,2,1]\n        Output: true\n        Explanation: The path crosses itself at the point (0, 0).\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        if len(distance) < 4:\n            return False\n        for i in range(3, len(distance)):\n            if distance[i] >= distance[i - 2] and distance[i - 1] <= distance[i - 3]:\n                return True\n            if i >= 4 and distance[i - 4] >= distance[i - 2] and distance[i - 3] <= distance[i - 1]:\n                return True\n        return False"
    },
    {
        "number": 335,
        "title": "Self Crossing",
        "difficulty": 2,
        "prompt": "class Solution:\n    def isSelfCrossing(self, distance: List[int]) -> bool:\n        \"\"\"\n        You are given an array of integers distance.\n        You start at the point (0, 0) on an X-Y plane, and you move distance[0] meters to the north, then distance[1] meters to the west, distance[2] meters to the south, distance[3] meters to the east, and so on. In other words, after each move, your direction changes counter-clockwise.\n        Return true if your path crosses itself or false if it does not.\n        Example 1:\n        Input: distance = [2,1,1,2]\n        Output: true\n        Explanation: The path crosses itself at the point (0, 1).\n        Example 2:\n        Input: distance = [1,2,3,4]\n        Output: false\n        Explanation: The path does not cross itself at any point.\n        Example 3:\n        Input: distance = [1,1,1,2,1]\n        Output: true\n        Explanation: The path crosses itself at the point (0, 0).\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        # \u53ea\u6709\u4e00\u4e2a\u70b9\u7684\u60c5\u51b5\n        if len(distance) == 1:\n            return False\n        # \u53ea\u6709\u4e24\u4e2a\u70b9\u7684\u60c5\u51b5\n        if len(distance) == 2:\n            return distance[0] >= distance[1]\n        # \u53ea\u6709\u4e09\u4e2a\u70b9\u7684\u60c5\u51b5\n        if len(distance) == 3:\n            return distance[0] >= distance[2] or distance[1] >= distance[2]\n        # \u4ee5\u4e0a\u60c5\u51b5\u90fd\u4e0d\u6ee1\u8db3\n        return False"
    },
    {
        "number": 336,
        "title": "Palindrome Pairs",
        "difficulty": 2,
        "prompt": "class Solution:\n    def palindromePairs(self, words: List[str]) -> List[List[int]]:\n        \"\"\"\n        You are given a 0-indexed array of unique strings words.\n        A palindrome pair is a pair of integers (i, j) such that:\n            0 <= i, j < words.length,\n            i!= j, and\n            words[i] + words[j] (the concatenation of the two strings) is a palindrome.\n        Return an array of all the palindrome pairs of words.\n        Example 1:\n        Input: words = [\"abcd\",\"dcba\",\"lls\",\"s\",\"sssll\"]\n        Output: [[0,1],[1,0],[3,2],[2,4]]\n        Explanation: The palindromes are [\"abcddcba\",\"dcbaabcd\",\"slls\",\"llssssll\"]\n        Example 2:\n        Input: words = [\"bat\",\"tab\",\"cat\"]\n        Output: [[0,1],[1,0]]\n        Explanation: The palindromes are [\"battab\",\"tabbat\"]\n        Example 3:\n        Input: words = [\"a\",\"\"]\n        Output: [[0,1],[1,0]]\n        Explanation: The palindromes are [\"a\",\"a\"]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        # O(n^2)\n        # d = {}\n        # for i, word in enumerate(words):\n        #     d[word] = i\n        # ans = []\n        # for i, word in enumerate(words):\n        #     for j in range(len(word) + 1):\n        #         pre, suf = word[:j], word[j:]\n        #         if pre == pre[::-1] and suf[::-1] in d and d[suf[::-1]]!= i:\n        #             ans.append([i, d[suf[::-1]]])\n        #         if suf == suf[::-1] and pre[::-1] in d and d[pre[::-1]]!= i:\n        #             ans.append([d[pre[::-1]], i])\n        # return ans"
    },
    {
        "number": 336,
        "title": "Palindrome Pairs",
        "difficulty": 2,
        "prompt": "class Solution:\n    def palindromePairs(self, words: List[str]) -> List[List[int]]:\n        \"\"\"\n        You are given a 0-indexed array of unique strings words.\n        A palindrome pair is a pair of integers (i, j) such that:\n            0 <= i, j < words.length,\n            i!= j, and\n            words[i] + words[j] (the concatenation of the two strings) is a palindrome.\n        Return an array of all the palindrome pairs of words.\n        Example 1:\n        Input: words = [\"abcd\",\"dcba\",\"lls\",\"s\",\"sssll\"]\n        Output: [[0,1],[1,0],[3,2],[2,4]]\n        Explanation: The palindromes are [\"abcddcba\",\"dcbaabcd\",\"slls\",\"llssssll\"]\n        Example 2:\n        Input: words = [\"bat\",\"tab\",\"cat\"]\n        Output: [[0,1],[1,0]]\n        Explanation: The palindromes are [\"battab\",\"tabbat\"]\n        Example 3:\n        Input: words = [\"a\",\"\"]\n        Output: [[0,1],[1,0]]\n        Explanation: The palindromes are [\"a\",\"a\"]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        # Time complexity: O(n^2)\n        # Space complexity: O(n)\n        # def is_palindrome(word):\n        #     return word == word[::-1]"
    },
    {
        "number": 337,
        "title": "House Robber III",
        "difficulty": 1,
        "prompt": "class Solution:\n    def rob(self, root: Optional[TreeNode]) -> int:\n        \"\"\"\n        The thief has found himself a new place for his thievery again. There is only one entrance to this area, called root.\n        Besides the root, each house has one and only one parent house. After a tour, the smart thief realized that all houses in this place form a binary tree. It will automatically contact the police if two directly-linked houses were broken into on the same night.\n        Given the root of the binary tree, return the maximum amount of money the thief can rob without alerting the police.\n        Example 1:\n        Input: root = [3,2,3,null,3,null,1]\n        Output: 7\n        Explanation: Maximum amount of money the thief can rob = 3 + 3 + 1 = 7.\n        Example 2:\n        Input: root = [3,4,5,1,3,null,1]\n        Output: 9\n        Explanation: Maximum amount of money the thief can rob = 4 + 5 = 9.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        def dfs(node):\n            if not node:\n                return 0, 0\n            left, right = dfs(node.left), dfs(node.right)\n            return max(left) + max(right), node.val + left[0] + right[0]\n        return max(dfs(root))"
    },
    {
        "number": 337,
        "title": "House Robber III",
        "difficulty": 1,
        "prompt": "class Solution:\n    def rob(self, root: Optional[TreeNode]) -> int:\n        \"\"\"\n        The thief has found himself a new place for his thievery again. There is only one entrance to this area, called root.\n        Besides the root, each house has one and only one parent house. After a tour, the smart thief realized that all houses in this place form a binary tree. It will automatically contact the police if two directly-linked houses were broken into on the same night.\n        Given the root of the binary tree, return the maximum amount of money the thief can rob without alerting the police.\n        Example 1:\n        Input: root = [3,2,3,null,3,null,1]\n        Output: 7\n        Explanation: Maximum amount of money the thief can rob = 3 + 3 + 1 = 7.\n        Example 2:\n        Input: root = [3,4,5,1,3,null,1]\n        Output: 9\n        Explanation: Maximum amount of money the thief can rob = 4 + 5 = 9.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        # Solution 1: DFS\n        # O(n) time\n        # O(n) space\n        # if not root:\n        #     return 0\n        # def dfs(node):\n        #     if not node:\n        #         return 0\n        #     rob = node.val\n        #     if node.left:\n        #         rob += dfs(node.left.left) + dfs(node.left.right)\n        #     if node.right:\n        #         rob += dfs(node.right.left) + dfs(node.right.right)\n        #     return rob\n        # return max(dfs(root), dfs(root.left) + dfs(root.right))"
    },
    {
        "number": 338,
        "title": "Counting Bits",
        "difficulty": 0,
        "prompt": "class Solution:\n    def countBits(self, n: int) -> List[int]:\n        \"\"\"\n        Given an integer n, return an array ans of length n + 1 such that for each i (0 <= i <= n), ans[i] is the number of 1's in the binary representation of i.\n        Example 1:\n        Input: n = 2\n        Output: [0,1,1]\n        Explanation:\n        0 --> 0\n        1 --> 1\n        2 --> 10\n        Example 2:\n        Input: n = 5\n        Output: [0,1,1,2,1,2]\n        Explanation:\n        0 --> 0\n        1 --> 1\n        2 --> 10\n        3 --> 11\n        4 --> 100\n        5 --> 101\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        # Time: O(n)\n        # Space: O(n)\n        # ans = [0] * (n + 1)\n        # for i in range(1, n + 1):\n        #     ans[i] = ans[i // 2] + (i % 2)\n        # return ans"
    },
    {
        "number": 338,
        "title": "Counting Bits",
        "difficulty": 0,
        "prompt": "class Solution:\n    def countBits(self, n: int) -> List[int]:\n        \"\"\"\n        Given an integer n, return an array ans of length n + 1 such that for each i (0 <= i <= n), ans[i] is the number of 1's in the binary representation of i.\n        Example 1:\n        Input: n = 2\n        Output: [0,1,1]\n        Explanation:\n        0 --> 0\n        1 --> 1\n        2 --> 10\n        Example 2:\n        Input: n = 5\n        Output: [0,1,1,2,1,2]\n        Explanation:\n        0 --> 0\n        1 --> 1\n        2 --> 10\n        3 --> 11\n        4 --> 100\n        5 --> 101\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        # Time complexity: O(n)\n        # Space complexity: O(n)\n        # ans = [0]\n        # for i in range(1, n+1):\n        #     ans.append(ans[i//2] + i % 2)\n        # return ans"
    },
    {
        "number": 341,
        "title": "Flatten Nested List Iterator",
        "difficulty": 1,
        "prompt": "        \"\"\"\n        You are given a nested list of integers nestedList. Each element is either an integer or a list whose elements may also be integers or other lists. Implement an iterator to flatten it.\n        Implement the NestedIterator class:\n            NestedIterator(List<NestedInteger> nestedList) Initializes the iterator with the nested list nestedList.\n            int next() Returns the next integer in the nested list.\n            boolean hasNext() Returns true if there are still some integers in the nested list and false otherwise.\n        Your code will be tested with the following pseudocode:\n        initialize iterator with nestedList\n        res = []\n        while iterator.hasNext()\n            append iterator.next() to the end of res\n        return res\n        If res matches the expected flattened list, then your code will be judged as correct.\n        Example 1:\n        Input: nestedList = [[1,1],2,[1,1]]\n        Output: [1,1,2,1,1]\n        Explanation: By calling next repeatedly until hasNext returns false, the order of elements returned by next should be: [1,1,2,1,1].\n        Example 2:\n        Input: nestedList = [1,[4,[6]]]\n        Output: [1,4,6]\n        Explanation: By calling next repeatedly until hasNext returns false, the order of elements returned by next should be: [1,4,6].\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        self.stack = []\n        for i in nestedList:\n            self.stack.append(i)\n        self.next_element = 0"
    },
    {
        "number": 341,
        "title": "Flatten Nested List Iterator",
        "difficulty": 1,
        "prompt": "        \"\"\"\n        You are given a nested list of integers nestedList. Each element is either an integer or a list whose elements may also be integers or other lists. Implement an iterator to flatten it.\n        Implement the NestedIterator class:\n            NestedIterator(List<NestedInteger> nestedList) Initializes the iterator with the nested list nestedList.\n            int next() Returns the next integer in the nested list.\n            boolean hasNext() Returns true if there are still some integers in the nested list and false otherwise.\n        Your code will be tested with the following pseudocode:\n        initialize iterator with nestedList\n        res = []\n        while iterator.hasNext()\n            append iterator.next() to the end of res\n        return res\n        If res matches the expected flattened list, then your code will be judged as correct.\n        Example 1:\n        Input: nestedList = [[1,1],2,[1,1]]\n        Output: [1,1,2,1,1]\n        Explanation: By calling next repeatedly until hasNext returns false, the order of elements returned by next should be: [1,1,2,1,1].\n        Example 2:\n        Input: nestedList = [1,[4,[6]]]\n        Output: [1,4,6]\n        Explanation: By calling next repeatedly until hasNext returns false, the order of elements returned by next should be: [1,4,6].\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        self.stack = []\n        self.flatten(nestedList)\n        return self.stack"
    },
    {
        "number": 342,
        "title": "Power of Four",
        "difficulty": 0,
        "prompt": "class Solution:\n    def isPowerOfFour(self, n: int) -> bool:\n        \"\"\"\n        Given an integer n, return true if it is a power of four. Otherwise, return false.\n        An integer n is a power of four, if there exists an integer x such that n == 4x.\n        Example 1:\n        Input: n = 16\n        Output: true\n        Example 2:\n        Input: n = 5\n        Output: false\n        Example 3:\n        Input: n = 1\n        Output: true\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        if n < 1:\n            return False\n        while n % 4 == 0:\n            n /= 4\n        return n == 1"
    },
    {
        "number": 342,
        "title": "Power of Four",
        "difficulty": 0,
        "prompt": "class Solution:\n    def isPowerOfFour(self, n: int) -> bool:\n        \"\"\"\n        Given an integer n, return true if it is a power of four. Otherwise, return false.\n        An integer n is a power of four, if there exists an integer x such that n == 4x.\n        Example 1:\n        Input: n = 16\n        Output: true\n        Example 2:\n        Input: n = 5\n        Output: false\n        Example 3:\n        Input: n = 1\n        Output: true\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        return n > 0 and (n & (n - 1)) == 0 and (n & 0xaaaaaaaa) == 0\n<|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>"
    },
    {
        "number": 343,
        "title": "Integer Break",
        "difficulty": 1,
        "prompt": "class Solution:\n    def integerBreak(self, n: int) -> int:\n        \"\"\"\n        Given an integer n, break it into the sum of k positive integers, where k >= 2, and maximize the product of those integers.\n        Return the maximum product you can get.\n        Example 1:\n        Input: n = 2\n        Output: 1\n        Explanation: 2 = 1 + 1, 1 \u00d7 1 = 1.\n        Example 2:\n        Input: n = 10\n        Output: 36\n        Explanation: 10 = 3 + 3 + 4, 3 \u00d7 3 \u00d7 4 = 36.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        if n == 2:\n            return 1\n        if n == 3:\n            return 2\n        if n == 4:\n            return 4\n        if n == 5:\n            return 6\n        if n == 6:\n            return 9\n        if n == 7:\n            return 36\n        if n == 8:\n            return 40\n        if n == 9:\n            return 81\n        if n == 10:\n            return 36\n        if n == 11:\n            return 36\n        if n == 12:\n            return 36\n        if n == 13:\n            return 36\n        if n == 14:\n            return 36\n        if n == 15:\n            return 36\n        if n == 16:\n            return 36\n        if n == 17:\n            return 36\n        if n == 18:\n            return 36\n        if n == 19:\n            return 36\n        if n == 20:\n            return 36\n        if n == 21:\n            return 36\n        if n == 22:\n            return 36\n        if n == 23:\n            return 36\n        if n == 24:\n            return 36\n        if n == 25:\n            return 36\n        if n == 26:\n            return 36\n        if n == 27:\n            return 36\n        if n == 28:\n            return 36\n        if n"
    },
    {
        "number": 343,
        "title": "Integer Break",
        "difficulty": 1,
        "prompt": "class Solution:\n    def integerBreak(self, n: int) -> int:\n        \"\"\"\n        Given an integer n, break it into the sum of k positive integers, where k >= 2, and maximize the product of those integers.\n        Return the maximum product you can get.\n        Example 1:\n        Input: n = 2\n        Output: 1\n        Explanation: 2 = 1 + 1, 1 \u00d7 1 = 1.\n        Example 2:\n        Input: n = 10\n        Output: 36\n        Explanation: 10 = 3 + 3 + 4, 3 \u00d7 3 \u00d7 4 = 36.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        # \u52a8\u6001\u89c4\u5212\n        # dp[i] = max(dp[i-2]*2, dp[i-3]*3, dp[i-4]*4,..., dp[1]*i)\n        # dp[i] = max(dp[i-2]*2, dp[i-3]*3, dp[i-4]*4,..., dp[1]*i)\n        # dp[i] = max(dp[i-2]*2, dp[i-3]*3, dp[i-4]*4,..., dp[1]*i)\n        # dp[i] = max(dp[i-2]*2, dp[i-3]*3, dp[i-4]*4,..., dp[1]*i)\n        # dp[i] = max(dp[i-2]*2, dp[i-3]*3, dp[i-4]*4,..., dp[1]*i)\n        # dp[i] = max(dp[i-2]*2, dp[i-3]*3, dp[i-4]*"
    },
    {
        "number": 344,
        "title": "Reverse String",
        "difficulty": 0,
        "prompt": "class Solution:\n    def reverseString(self, s: List[str]) -> None:\n        \"\"\"\n        Do not return anything, modify s in-place instead.\n        Write a function that reverses a string. The input string is given as an array of characters s.\n        You must do this by modifying the input array in-place with O(1) extra memory.\n        Example 1:\n        Input: s = [\"h\",\"e\",\"l\",\"l\",\"o\"]\n        Output: [\"o\",\"l\",\"l\",\"e\",\"h\"]\n        Example 2:\n        Input: s = [\"H\",\"a\",\"n\",\"n\",\"a\",\"h\"]\n        Output: [\"h\",\"a\",\"n\",\"n\",\"a\",\"H\"]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        # s.reverse()\n        # return s\n        \n        # s = s[::-1]\n        # return s\n        \n        # s = s[::-1]\n        # for i in range(len(s)//2):\n        #     s[i], s[-i-1] = s[-i-1], s[i]\n        # return s\n        \n        # s = s[::-1]\n        # for i in range(len(s)//2):\n        #     s[i], s[-i-1] = s[-i-1], s[i]\n        # return s\n        \n        # s = s[::-1]\n        # for i in range(len(s)//2):\n        #     s[i], s[-i-1] = s[-i-1], s[i]\n        # return s\n        \n        # s = s[::-1]\n        # for i in range(len(s)//2):\n        #     s[i], s[-i-1] = s[-i-1], s[i]\n        # return s\n        \n        # s = s[::-1]\n        # for i in range(len(s)//2):\n        #"
    },
    {
        "number": 344,
        "title": "Reverse String",
        "difficulty": 0,
        "prompt": "class Solution:\n    def reverseString(self, s: List[str]) -> None:\n        \"\"\"\n        Do not return anything, modify s in-place instead.\n        Write a function that reverses a string. The input string is given as an array of characters s.\n        You must do this by modifying the input array in-place with O(1) extra memory.\n        Example 1:\n        Input: s = [\"h\",\"e\",\"l\",\"l\",\"o\"]\n        Output: [\"o\",\"l\",\"l\",\"e\",\"h\"]\n        Example 2:\n        Input: s = [\"H\",\"a\",\"n\",\"n\",\"a\",\"h\"]\n        Output: [\"h\",\"a\",\"n\",\"n\",\"a\",\"H\"]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        # s.reverse()\n        # return s\n        \n        # s.reverse()\n        # return s\n        \n        # s.reverse()\n        # return s\n        \n        # s.reverse()\n        # return s\n        \n        # s.reverse()\n        # return s\n        \n        # s.reverse()\n        # return s\n        \n        # s.reverse()\n        # return s\n        \n        # s.reverse()\n        # return s\n        \n        # s.reverse()\n        # return s\n        \n        # s.reverse()\n        # return s\n        \n        # s.reverse()\n        # return s\n        \n        # s.reverse()\n        # return s\n        \n        # s.reverse()\n        # return s\n        \n        # s.reverse()\n        # return s\n        \n        # s.reverse()\n        # return s\n        \n        # s.reverse()\n        # return s\n        \n        # s.reverse()\n        # return s\n        \n        # s.reverse()\n        # return s\n        \n        # s.reverse()\n        # return s\n        \n        # s.reverse()\n        # return s\n        \n        # s.reverse()\n        # return s\n        \n        # s.reverse()"
    },
    {
        "number": 345,
        "title": "Reverse Vowels of a String",
        "difficulty": 0,
        "prompt": "class Solution:\n    def reverseVowels(self, s: str) -> str:\n        \"\"\"\n        Given a string s, reverse only all the vowels in the string and return it.\n        The vowels are 'a', 'e', 'i', 'o', and 'u', and they can appear in both lower and upper cases, more than once.\n        Example 1:\n        Input: s = \"hello\"\n        Output: \"holle\"\n        Example 2:\n        Input: s = \"leetcode\"\n        Output: \"leotcede\"\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        vowels = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'}\n        s = list(s)\n        i, j = 0, len(s) - 1\n        while i < j:\n            if s[i] in vowels and s[j] in vowels:\n                s[i], s[j] = s[j], s[i]\n                i += 1\n                j -= 1\n            elif s[i] not in vowels:\n                i += 1\n            elif s[j] not in vowels:\n                j -= 1\n        return ''.join(s)\n<|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>"
    },
    {
        "number": 345,
        "title": "Reverse Vowels of a String",
        "difficulty": 0,
        "prompt": "class Solution:\n    def reverseVowels(self, s: str) -> str:\n        \"\"\"\n        Given a string s, reverse only all the vowels in the string and return it.\n        The vowels are 'a', 'e', 'i', 'o', and 'u', and they can appear in both lower and upper cases, more than once.\n        Example 1:\n        Input: s = \"hello\"\n        Output: \"holle\"\n        Example 2:\n        Input: s = \"leetcode\"\n        Output: \"leotcede\"\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        vowels = set(['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'])\n        s = list(s)\n        i, j = 0, len(s) - 1\n        while i < j:\n            if s[i] in vowels and s[j] in vowels:\n                s[i], s[j] = s[j], s[i]\n                i += 1\n                j -= 1\n            elif s[i] in vowels:\n                j -= 1\n            elif s[j] in vowels:\n                i += 1\n            else:\n                i += 1\n                j -= 1\n        return ''.join(s)\n<|endoftext|>"
    },
    {
        "number": 347,
        "title": "Top K Frequent Elements",
        "difficulty": 1,
        "prompt": "class Solution:\n    def topKFrequent(self, nums: List[int], k: int) -> List[int]:\n        \"\"\"\n        Given an integer array nums and an integer k, return the k most frequent elements. You may return the answer in any order.\n        Example 1:\n        Input: nums = [1,1,1,2,2,3], k = 2\n        Output: [1,2]\n        Example 2:\n        Input: nums = [1], k = 1\n        Output: [1]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        # 1. build hashmap\n        # 2. sort hashmap by value\n        # 3. return the first k elements\n        \n        # O(n) time\n        # O(n) space\n        \n        # build hashmap\n        hashmap = {}\n        for num in nums:\n            if num in hashmap:\n                hashmap[num] += 1\n            else:\n                hashmap[num] = 1\n        \n        # sort hashmap by value\n        sorted_hashmap = sorted(hashmap.items(), key=lambda x: x[1], reverse=True)\n        \n        # return the first k elements\n        return [x[0] for x in sorted_hashmap[:k]]\n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        "
    },
    {
        "number": 347,
        "title": "Top K Frequent Elements",
        "difficulty": 1,
        "prompt": "class Solution:\n    def topKFrequent(self, nums: List[int], k: int) -> List[int]:\n        \"\"\"\n        Given an integer array nums and an integer k, return the k most frequent elements. You may return the answer in any order.\n        Example 1:\n        Input: nums = [1,1,1,2,2,3], k = 2\n        Output: [1,2]\n        Example 2:\n        Input: nums = [1], k = 1\n        Output: [1]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        # 1. Create a dictionary of the frequency of each element in the array\n        # 2. Create a heap of size k\n        # 3. Pop the heap and add the element to the result array\n        # 4. Repeat until the heap is empty\n        # 5. Return the result array\n        \n        # Time: O(n log k)\n        # Space: O(n)\n        \n        # 1. Create a dictionary of the frequency of each element in the array\n        freq = {}\n        for num in nums:\n            if num not in freq:\n                freq[num] = 1\n            else:\n                freq[num] += 1\n        \n        # 2. Create a heap of size k\n        heap = []\n        for key, val in freq.items():\n            heapq.heappush(heap, (val, key))\n            if len(heap) > k:\n                heapq.heappop(heap)\n        \n        # 3. Pop the heap and add the element to the result array\n        result = []\n        while heap:\n            result.append(heapq.heappop(heap)[1])\n        \n        # 4. Repeat until the heap is empty\n        return result\n<|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>"
    },
    {
        "number": 349,
        "title": "Intersection of Two Arrays",
        "difficulty": 0,
        "prompt": "class Solution:\n    def intersection(self, nums1: List[int], nums2: List[int]) -> List[int]:\n        \"\"\"\n        Given two integer arrays nums1 and nums2, return an array of their intersection. Each element in the result must be unique and you may return the result in any order.\n        Example 1:\n        Input: nums1 = [1,2,2,1], nums2 = [2,2]\n        Output: [2]\n        Example 2:\n        Input: nums1 = [4,9,5], nums2 = [9,4,9,8,4]\n        Output: [9,4]\n        Explanation: [4,9] is also accepted.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        # return list(set(nums1) & set(nums2))\n        # return list(set(nums1) & set(nums2))\n        # return list(set(nums1) & set(nums2))\n        # return list(set(nums1) & set(nums2))\n        # return list(set(nums1) & set(nums2))\n        # return list(set(nums1) & set(nums2))\n        # return list(set(nums1) & set(nums2))\n        # return list(set(nums1) & set(nums2))\n        # return list(set(nums1) & set(nums2))\n        # return list(set(nums1) & set(nums2))\n        # return list(set(nums1) & set(nums2))\n        # return list(set(nums1) & set(nums2))\n        # return list(set(nums1) & set(nums2))\n        # return list(set(nums1) & set(nums2))\n        # return list(set(nums1) & set(nums2))\n        # return list(set(nums1) & set(n"
    },
    {
        "number": 349,
        "title": "Intersection of Two Arrays",
        "difficulty": 0,
        "prompt": "class Solution:\n    def intersection(self, nums1: List[int], nums2: List[int]) -> List[int]:\n        \"\"\"\n        Given two integer arrays nums1 and nums2, return an array of their intersection. Each element in the result must be unique and you may return the result in any order.\n        Example 1:\n        Input: nums1 = [1,2,2,1], nums2 = [2,2]\n        Output: [2]\n        Example 2:\n        Input: nums1 = [4,9,5], nums2 = [9,4,9,8,4]\n        Output: [9,4]\n        Explanation: [4,9] is also accepted.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        return list(set(nums1) & set(nums2))\n<|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>"
    },
    {
        "number": 350,
        "title": "Intersection of Two Arrays II",
        "difficulty": 0,
        "prompt": "class Solution:\n    def intersect(self, nums1: List[int], nums2: List[int]) -> List[int]:\n        \"\"\"\n        Given two integer arrays nums1 and nums2, return an array of their intersection. Each element in the result must appear as many times as it shows in both arrays and you may return the result in any order.\n        Example 1:\n        Input: nums1 = [1,2,2,1], nums2 = [2,2]\n        Output: [2,2]\n        Example 2:\n        Input: nums1 = [4,9,5], nums2 = [9,4,9,8,4]\n        Output: [4,9]\n        Explanation: [9,4] is also accepted.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        # Solution 1 - Hash Table\n        # Time complexity: O(n + m)\n        # Space complexity: O(n + m)\n        # n, m = len(nums1), len(nums2)\n        # if n > m:\n        #     nums1, nums2 = nums2, nums1\n        #     n, m = m, n\n        # nums1.sort()\n        # nums2.sort()\n        # res = []\n        # i, j = 0, 0\n        # while i < n and j < m:\n        #     if nums1[i] == nums2[j]:\n        #         res.append(nums1[i])\n        #         i += 1\n        #         j += 1\n        #     elif nums1[i] < nums2[j]:\n        #         i += 1\n        #     else:\n        #         j += 1\n        # return res"
    },
    {
        "number": 350,
        "title": "Intersection of Two Arrays II",
        "difficulty": 0,
        "prompt": "class Solution:\n    def intersect(self, nums1: List[int], nums2: List[int]) -> List[int]:\n        \"\"\"\n        Given two integer arrays nums1 and nums2, return an array of their intersection. Each element in the result must appear as many times as it shows in both arrays and you may return the result in any order.\n        Example 1:\n        Input: nums1 = [1,2,2,1], nums2 = [2,2]\n        Output: [2,2]\n        Example 2:\n        Input: nums1 = [4,9,5], nums2 = [9,4,9,8,4]\n        Output: [4,9]\n        Explanation: [9,4] is also accepted.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        # nums1 = sorted(nums1)\n        # nums2 = sorted(nums2)\n        # res = []\n        # i = j = 0\n        # while i < len(nums1) and j < len(nums2):\n        #     if nums1[i] == nums2[j]:\n        #         res.append(nums1[i])\n        #         i += 1\n        #         j += 1\n        #     elif nums1[i] < nums2[j]:\n        #         i += 1\n        #     else:\n        #         j += 1\n        # return res"
    },
    {
        "number": 352,
        "title": "Data Stream as Disjoint Intervals",
        "difficulty": 2,
        "prompt": "class SummaryRanges:\n    def __init__(self):\n    def addNum(self, value: int) -> None:\n    def getIntervals(self) -> List[List[int]]:\n        \"\"\"\n        Given a data stream input of non-negative integers a1, a2,..., an, summarize the numbers seen so far as a list of disjoint intervals.\n        Implement the SummaryRanges class:\n            SummaryRanges() Initializes the object with an empty stream.\n            void addNum(int value) Adds the integer value to the stream.\n            int[][] getIntervals() Returns a summary of the integers in the stream currently as a list of disjoint intervals [starti, endi]. The answer should be sorted by starti.\n        Example 1:\n        Input\n        [\"SummaryRanges\", \"addNum\", \"getIntervals\", \"addNum\", \"getIntervals\", \"addNum\", \"getIntervals\", \"addNum\", \"getIntervals\", \"addNum\", \"getIntervals\"]\n        [[], [1], [], [3], [], [7], [], [2], [], [6], []]\n        Output\n        [null, null, [[1, 1]], null, [[1, 1], [3, 3]], null, [[1, 1], [3, 3], [7, 7]], null, [[1, 3], [7, 7]], null, [[1, 3], [6, 7]]]\n        Explanation\n        SummaryRanges summaryRanges = new SummaryRanges();\n        summaryRanges.addNum(1);      // arr = [1]\n        summaryRanges.getIntervals(); // return [[1, 1]]\n        summaryRanges.addNum(3);      // arr = [1, 3]\n        summaryRanges.getIntervals(); // return [[1, 1], [3, 3]]\n        summaryRanges.addNum(7);      // arr = [1, 3, 7]\n        summaryRanges.getIntervals(); // return [[1, 1], [3, 3], [7, 7]]\n        summaryRanges.addNum(2);      // arr = [1, 2, 3, 7]\n        summaryRanges.getIntervals(); // return [[1, 3], [7, 7]]\n        summaryRanges.addNum(6);      // arr = [1, 2, 3, 6, 7]\n        summaryRanges.getIntervals(); // return [[1, 3], [6, 7]]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        self.nums = []\n        self.intervals = []\n        self.start = 0\n        self.end = 0\n        self.i = 0\n        self.n = 0\n        self.s = set()\n        self.addNum(value)\n        return self.intervals"
    },
    {
        "number": 352,
        "title": "Data Stream as Disjoint Intervals",
        "difficulty": 2,
        "prompt": "class SummaryRanges:\n    def __init__(self):\n    def addNum(self, value: int) -> None:\n    def getIntervals(self) -> List[List[int]]:\n        \"\"\"\n        Given a data stream input of non-negative integers a1, a2,..., an, summarize the numbers seen so far as a list of disjoint intervals.\n        Implement the SummaryRanges class:\n            SummaryRanges() Initializes the object with an empty stream.\n            void addNum(int value) Adds the integer value to the stream.\n            int[][] getIntervals() Returns a summary of the integers in the stream currently as a list of disjoint intervals [starti, endi]. The answer should be sorted by starti.\n        Example 1:\n        Input\n        [\"SummaryRanges\", \"addNum\", \"getIntervals\", \"addNum\", \"getIntervals\", \"addNum\", \"getIntervals\", \"addNum\", \"getIntervals\", \"addNum\", \"getIntervals\"]\n        [[], [1], [], [3], [], [7], [], [2], [], [6], []]\n        Output\n        [null, null, [[1, 1]], null, [[1, 1], [3, 3]], null, [[1, 1], [3, 3], [7, 7]], null, [[1, 3], [7, 7]], null, [[1, 3], [6, 7]]]\n        Explanation\n        SummaryRanges summaryRanges = new SummaryRanges();\n        summaryRanges.addNum(1);      // arr = [1]\n        summaryRanges.getIntervals(); // return [[1, 1]]\n        summaryRanges.addNum(3);      // arr = [1, 3]\n        summaryRanges.getIntervals(); // return [[1, 1], [3, 3]]\n        summaryRanges.addNum(7);      // arr = [1, 3, 7]\n        summaryRanges.getIntervals(); // return [[1, 1], [3, 3], [7, 7]]\n        summaryRanges.addNum(2);      // arr = [1, 2, 3, 7]\n        summaryRanges.getIntervals(); // return [[1, 3], [7, 7]]\n        summaryRanges.addNum(6);      // arr = [1, 2, 3, 6, 7]\n        summaryRanges.getIntervals(); // return [[1, 3], [6, 7]]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        self.arr = []\n        self.arr.append(value)\n        self.arr.sort()\n        self.ans = []\n        self.ans.append([value, value])\n        if len(self.arr) == 1:\n            return self.ans\n        i = 0\n        while i < len(self.arr) - 1:\n            if self.arr[i] + 1 == self.arr[i + 1]:\n                self.ans[-1][1] = self.arr[i + 1]\n                i += 1\n            else:\n                self.ans.append([self.arr[i], self.arr[i + 1]])\n                i += 1\n        return self.ans"
    },
    {
        "number": 354,
        "title": "Russian Doll Envelopes",
        "difficulty": 2,
        "prompt": "class Solution:\n    def maxEnvelopes(self, envelopes: List[List[int]]) -> int:\n        \"\"\"\n        You are given a 2D array of integers envelopes where envelopes[i] = [wi, hi] represents the width and the height of an envelope.\n        One envelope can fit into another if and only if both the width and height of one envelope are greater than the other envelope's width and height.\n        Return the maximum number of envelopes you can Russian doll (i.e., put one inside the other).\n        Note: You cannot rotate an envelope.\n        Example 1:\n        Input: envelopes = [[5,4],[6,4],[6,7],[2,3]]\n        Output: 3\n        Explanation: The maximum number of envelopes you can Russian doll is 3 ([2,3] => [5,4] => [6,7]).\n        Example 2:\n        Input: envelopes = [[1,1],[1,1],[1,1]]\n        Output: 1\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        # sort by width\n        # sort by height\n        # find the longest increasing subsequence\n        # return the length of the longest increasing subsequence\n        # O(n^2)\n        # O(nlogn)\n        envelopes.sort(key=lambda x: (x[0], -x[1]))\n        # print(envelopes)\n        dp = [1] * len(envelopes)\n        for i in range(len(envelopes)):\n            for j in range(i):\n                if envelopes[j][1] < envelopes[i][1]:\n                    dp[i] = max(dp[i], dp[j] + 1)\n        return max(dp)"
    },
    {
        "number": 354,
        "title": "Russian Doll Envelopes",
        "difficulty": 2,
        "prompt": "class Solution:\n    def maxEnvelopes(self, envelopes: List[List[int]]) -> int:\n        \"\"\"\n        You are given a 2D array of integers envelopes where envelopes[i] = [wi, hi] represents the width and the height of an envelope.\n        One envelope can fit into another if and only if both the width and height of one envelope are greater than the other envelope's width and height.\n        Return the maximum number of envelopes you can Russian doll (i.e., put one inside the other).\n        Note: You cannot rotate an envelope.\n        Example 1:\n        Input: envelopes = [[5,4],[6,4],[6,7],[2,3]]\n        Output: 3\n        Explanation: The maximum number of envelopes you can Russian doll is 3 ([2,3] => [5,4] => [6,7]).\n        Example 2:\n        Input: envelopes = [[1,1],[1,1],[1,1]]\n        Output: 1\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        # sort by width, then by height\n        envelopes.sort(key=lambda x: (x[0], -x[1]))\n        # print(envelopes)\n        dp = [1] * len(envelopes)\n        for i in range(1, len(envelopes)):\n            for j in range(i):\n                if envelopes[i][0] > envelopes[j][0] and envelopes[i][1] > envelopes[j][1]:\n                    dp[i] = max(dp[i], dp[j] + 1)\n        return max(dp)"
    },
    {
        "number": 355,
        "title": "Design Twitter",
        "difficulty": 1,
        "prompt": "class Twitter:\n    def __init__(self):\n    def postTweet(self, userId: int, tweetId: int) -> None:\n    def getNewsFeed(self, userId: int) -> List[int]:\n    def follow(self, followerId: int, followeeId: int) -> None:\n    def unfollow(self, followerId: int, followeeId: int) -> None:\n        \"\"\"\n        Design a simplified version of Twitter where users can post tweets, follow/unfollow another user, and is able to see the 10 most recent tweets in the user's news feed.\n        Implement the Twitter class:\n            Twitter() Initializes your twitter object.\n            void postTweet(int userId, int tweetId) Composes a new tweet with ID tweetId by the user userId. Each call to this function will be made with a unique tweetId.\n            List<Integer> getNewsFeed(int userId) Retrieves the 10 most recent tweet IDs in the user's news feed. Each item in the news feed must be posted by users who the user followed or by the user themself. Tweets must be ordered from most recent to least recent.\n            void follow(int followerId, int followeeId) The user with ID followerId started following the user with ID followeeId.\n            void unfollow(int followerId, int followeeId) The user with ID followerId started unfollowing the user with ID followeeId.\n        Example 1:\n        Input\n        [\"Twitter\", \"postTweet\", \"getNewsFeed\", \"follow\", \"postTweet\", \"getNewsFeed\", \"unfollow\", \"getNewsFeed\"]\n        [[], [1, 5], [1], [1, 2], [2, 6], [1], [1, 2], [1]]\n        Output\n        [null, null, [5], null, null, [6, 5], null, [5]]\n        Explanation\n        Twitter twitter = new Twitter();\n        twitter.postTweet(1, 5); // User 1 posts a new tweet (id = 5).\n        twitter.getNewsFeed(1);  // User 1's news feed should return a list with 1 tweet id -> [5]. return [5]\n        twitter.follow(1, 2);    // User 1 follows user 2.\n        twitter.postTweet(2, 6); // User 2 posts a new tweet (id = 6).\n        twitter.getNewsFeed(1);  // User 1's news feed should return a list with 2 tweet ids -> [6, 5]. Tweet id 6 should precede tweet id 5 because it is posted after tweet id 5.\n        twitter.unfollow(1, 2);  // User 1 unfollows user 2.\n        twitter.getNewsFeed(1);  // User 1's news feed should return a list with 1 tweet id -> [5], since user 1 is no longer following user 2.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        \n        \"\"\"\n        # Solution 1:\n        # O(n) time\n        # O(n) space\n        # where n is the number of tweets\n        # We use a dictionary to store the userId -> tweetId\n        # We also use a dictionary to store the userId -> set of followees\n        # We then iterate through the tweets and add them to the dictionary\n        # We then iterate through the dictionary and add the tweets to the list\n        # We then iterate through the dictionary and add the users to the set\n        # We then iterate through the dictionary and add the users to the set\n        # We then iterate through the dictionary and add the users to the set\n        # We then iterate through the dictionary and add the users to the set\n        # We then iterate through the dictionary and add the users to the set\n        # We then iterate through the dictionary and add the users to the set\n        # We then iterate through the dictionary and add the users to the set\n        # We then iterate through the dictionary and add the users to the set\n        # We then iterate through the dictionary and add the users to the set\n        # We then iterate through the dictionary and add the users to the set\n        # We then iterate through the dictionary and add the users to the set\n        # We then iterate through the dictionary and"
    },
    {
        "number": 355,
        "title": "Design Twitter",
        "difficulty": 1,
        "prompt": "class Twitter:\n    def __init__(self):\n    def postTweet(self, userId: int, tweetId: int) -> None:\n    def getNewsFeed(self, userId: int) -> List[int]:\n    def follow(self, followerId: int, followeeId: int) -> None:\n    def unfollow(self, followerId: int, followeeId: int) -> None:\n        \"\"\"\n        Design a simplified version of Twitter where users can post tweets, follow/unfollow another user, and is able to see the 10 most recent tweets in the user's news feed.\n        Implement the Twitter class:\n            Twitter() Initializes your twitter object.\n            void postTweet(int userId, int tweetId) Composes a new tweet with ID tweetId by the user userId. Each call to this function will be made with a unique tweetId.\n            List<Integer> getNewsFeed(int userId) Retrieves the 10 most recent tweet IDs in the user's news feed. Each item in the news feed must be posted by users who the user followed or by the user themself. Tweets must be ordered from most recent to least recent.\n            void follow(int followerId, int followeeId) The user with ID followerId started following the user with ID followeeId.\n            void unfollow(int followerId, int followeeId) The user with ID followerId started unfollowing the user with ID followeeId.\n        Example 1:\n        Input\n        [\"Twitter\", \"postTweet\", \"getNewsFeed\", \"follow\", \"postTweet\", \"getNewsFeed\", \"unfollow\", \"getNewsFeed\"]\n        [[], [1, 5], [1], [1, 2], [2, 6], [1], [1, 2], [1]]\n        Output\n        [null, null, [5], null, null, [6, 5], null, [5]]\n        Explanation\n        Twitter twitter = new Twitter();\n        twitter.postTweet(1, 5); // User 1 posts a new tweet (id = 5).\n        twitter.getNewsFeed(1);  // User 1's news feed should return a list with 1 tweet id -> [5]. return [5]\n        twitter.follow(1, 2);    // User 1 follows user 2.\n        twitter.postTweet(2, 6); // User 2 posts a new tweet (id = 6).\n        twitter.getNewsFeed(1);  // User 1's news feed should return a list with 2 tweet ids -> [6, 5]. Tweet id 6 should precede tweet id 5 because it is posted after tweet id 5.\n        twitter.unfollow(1, 2);  // User 1 unfollows user 2.\n        twitter.getNewsFeed(1);  // User 1's news feed should return a list with 1 tweet id -> [5], since user 1 is no longer following user 2.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n"
    },
    {
        "number": 357,
        "title": "Count Numbers with Unique Digits",
        "difficulty": 1,
        "prompt": "class Solution:\n    def countNumbersWithUniqueDigits(self, n: int) -> int:\n        \"\"\"\n        Given an integer n, return the count of all numbers with unique digits, x, where 0 <= x < 10n.\n        Example 1:\n        Input: n = 2\n        Output: 91\n        Explanation: The answer should be the total numbers in the range of 0 \u2264 x < 100, excluding 11,22,33,44,55,66,77,88,99\n        Example 2:\n        Input: n = 0\n        Output: 1\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        if n == 0:\n            return 1\n        if n == 1:\n            return 10\n        dp = [0] * (n + 1)\n        dp[0] = 1\n        dp[1] = 10\n        for i in range(2, n + 1):\n            dp[i] = dp[i - 1] * (11 - i)\n        return sum(dp)"
    },
    {
        "number": 357,
        "title": "Count Numbers with Unique Digits",
        "difficulty": 1,
        "prompt": "class Solution:\n    def countNumbersWithUniqueDigits(self, n: int) -> int:\n        \"\"\"\n        Given an integer n, return the count of all numbers with unique digits, x, where 0 <= x < 10n.\n        Example 1:\n        Input: n = 2\n        Output: 91\n        Explanation: The answer should be the total numbers in the range of 0 \u2264 x < 100, excluding 11,22,33,44,55,66,77,88,99\n        Example 2:\n        Input: n = 0\n        Output: 1\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        if n == 0:\n            return 1\n        if n == 1:\n            return 10\n        dp = [0] * (n + 1)\n        dp[0] = 1\n        dp[1] = 10\n        for i in range(2, n + 1):\n            dp[i] = dp[i - 1] * (11 - i)\n        return sum(dp)"
    },
    {
        "number": 363,
        "title": "Max Sum of Rectangle No Larger Than K",
        "difficulty": 2,
        "prompt": "class Solution:\n    def maxSumSubmatrix(self, matrix: List[List[int]], k: int) -> int:\n        \"\"\"\n        Given an m x n matrix matrix and an integer k, return the max sum of a rectangle in the matrix such that its sum is no larger than k.\n        It is guaranteed that there will be a rectangle with a sum no larger than k.\n        Example 1:\n        Input: matrix = [[1,0,1],[0,-2,3]], k = 2\n        Output: 2\n        Explanation: Because the sum of the blue rectangle [[0, 1], [-2, 3]] is 2, and 2 is the max number no larger than k (k = 2).\n        Example 2:\n        Input: matrix = [[2,2,-1]], k = 3\n        Output: 3\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        m, n = len(matrix), len(matrix[0])\n        res = float('-inf')\n        for i in range(m):\n            for j in range(n):\n                s = 0\n                for r in range(i, m):\n                    s += matrix[r][j]\n                    if s <= k:\n                        res = max(res, s)\n                    else:\n                        break\n        return res"
    },
    {
        "number": 363,
        "title": "Max Sum of Rectangle No Larger Than K",
        "difficulty": 2,
        "prompt": "class Solution:\n    def maxSumSubmatrix(self, matrix: List[List[int]], k: int) -> int:\n        \"\"\"\n        Given an m x n matrix matrix and an integer k, return the max sum of a rectangle in the matrix such that its sum is no larger than k.\n        It is guaranteed that there will be a rectangle with a sum no larger than k.\n        Example 1:\n        Input: matrix = [[1,0,1],[0,-2,3]], k = 2\n        Output: 2\n        Explanation: Because the sum of the blue rectangle [[0, 1], [-2, 3]] is 2, and 2 is the max number no larger than k (k = 2).\n        Example 2:\n        Input: matrix = [[2,2,-1]], k = 3\n        Output: 3\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        m, n = len(matrix), len(matrix[0])\n        res = float('-inf')\n        for i in range(m):\n            for j in range(n):\n                if i > 0:\n                    matrix[i][j] += matrix[i - 1][j]\n                if j > 0:\n                    matrix[i][j] += matrix[i][j - 1]\n                if i > 0 and j > 0:\n                    matrix[i][j] -= matrix[i - 1][j - 1]\n                for x in range(i, m):\n                    for y in range(j, n):\n                        if matrix[i][j] - matrix[x][y] <= k:\n                            res = max(res, matrix[i][j])\n        return res\n<|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>"
    },
    {
        "number": 365,
        "title": "Water and Jug Problem",
        "difficulty": 1,
        "prompt": "class Solution:\n    def canMeasureWater(self, jug1Capacity: int, jug2Capacity: int, targetCapacity: int) -> bool:\n        \"\"\"\n        You are given two jugs with capacities jug1Capacity and jug2Capacity liters. There is an infinite amount of water supply available. Determine whether it is possible to measure exactly targetCapacity liters using these two jugs.\n        If targetCapacity liters of water are measurable, you must have targetCapacity liters of water contained within one or both buckets by the end.\n        Operations allowed:\n            Fill any of the jugs with water.\n            Empty any of the jugs.\n            Pour water from one jug into another till the other jug is completely full, or the first jug itself is empty.\n        Example 1:\n        Input: jug1Capacity = 3, jug2Capacity = 5, targetCapacity = 4\n        Output: true\n        Explanation: The famous Die Hard example \n        Example 2:\n        Input: jug1Capacity = 2, jug2Capacity = 6, targetCapacity = 5\n        Output: false\n        Example 3:\n        Input: jug1Capacity = 1, jug2Capacity = 2, targetCapacity = 3\n        Output: true\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        # if targetCapacity > (jug1Capacity + jug2Capacity):\n        #     return False\n        # if targetCapacity == (jug1Capacity + jug2Capacity):\n        #     return True\n        # if targetCapacity < (jug1Capacity + jug2Capacity):\n        #     return True\n        # if targetCapacity == 0:\n        #     return True\n        # if targetCapacity == jug1Capacity:\n        #     return True\n        # if targetCapacity == jug2Capacity:\n        #     return True\n        # if targetCapacity == jug1Capacity + jug2Capacity:\n        #     return True\n        # if targetCapacity == jug1Capacity + jug2Capacity - 1:\n        #     return True\n        # if targetCapacity == jug1Capacity + jug2Capacity - 2:\n        #     return True\n        # if targetCapacity == jug1Capacity + jug2Capacity - 3:\n        #     return True\n        # if targetCapacity == jug1Capacity + jug2Capacity - 4:\n        #     return True\n        # if targetCapacity == jug1Capacity + jug2Capacity - 5:\n        #     return True\n        # if targetCapacity == jug1Capacity + jug2Capacity -"
    },
    {
        "number": 365,
        "title": "Water and Jug Problem",
        "difficulty": 1,
        "prompt": "class Solution:\n    def canMeasureWater(self, jug1Capacity: int, jug2Capacity: int, targetCapacity: int) -> bool:\n        \"\"\"\n        You are given two jugs with capacities jug1Capacity and jug2Capacity liters. There is an infinite amount of water supply available. Determine whether it is possible to measure exactly targetCapacity liters using these two jugs.\n        If targetCapacity liters of water are measurable, you must have targetCapacity liters of water contained within one or both buckets by the end.\n        Operations allowed:\n            Fill any of the jugs with water.\n            Empty any of the jugs.\n            Pour water from one jug into another till the other jug is completely full, or the first jug itself is empty.\n        Example 1:\n        Input: jug1Capacity = 3, jug2Capacity = 5, targetCapacity = 4\n        Output: true\n        Explanation: The famous Die Hard example \n        Example 2:\n        Input: jug1Capacity = 2, jug2Capacity = 6, targetCapacity = 5\n        Output: false\n        Example 3:\n        Input: jug1Capacity = 1, jug2Capacity = 2, targetCapacity = 3\n        Output: true\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        # if targetCapacity > min(jug1Capacity, jug2Capacity):\n        #     return False\n        # if targetCapacity == min(jug1Capacity, jug2Capacity):\n        #     return True\n        # if targetCapacity < min(jug1Capacity, jug2Capacity):\n        #     if jug1Capacity == jug2Capacity:\n        #         return targetCapacity % min(jug1Capacity, jug2Capacity) == 0\n        #     elif jug1Capacity < jug2Capacity:\n        #         return targetCapacity % min(jug1Capacity, jug2Capacity) == 0\n        #     else:\n        #         return targetCapacity % min(jug1Capacity, jug2Capacity) == 0\n        # return False"
    },
    {
        "number": 367,
        "title": "Valid Perfect Square",
        "difficulty": 0,
        "prompt": "class Solution:\n    def isPerfectSquare(self, num: int) -> bool:\n        \"\"\"\n        Given a positive integer num, return true if num is a perfect square or false otherwise.\n        A perfect square is an integer that is the square of an integer. In other words, it is the product of some integer with itself.\n        You must not use any built-in library function, such as sqrt.\n        Example 1:\n        Input: num = 16\n        Output: true\n        Explanation: We return true because 4 * 4 = 16 and 4 is an integer.\n        Example 2:\n        Input: num = 14\n        Output: false\n        Explanation: We return false because 3.742 * 3.742 = 14 and 3.742 is not an integer.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        if num == 1:\n            return True\n        left, right = 1, num\n        while left <= right:\n            mid = (left + right) // 2\n            if mid * mid == num:\n                return True\n            elif mid * mid < num:\n                left = mid + 1\n            else:\n                right = mid - 1\n        return False"
    },
    {
        "number": 367,
        "title": "Valid Perfect Square",
        "difficulty": 0,
        "prompt": "class Solution:\n    def isPerfectSquare(self, num: int) -> bool:\n        \"\"\"\n        Given a positive integer num, return true if num is a perfect square or false otherwise.\n        A perfect square is an integer that is the square of an integer. In other words, it is the product of some integer with itself.\n        You must not use any built-in library function, such as sqrt.\n        Example 1:\n        Input: num = 16\n        Output: true\n        Explanation: We return true because 4 * 4 = 16 and 4 is an integer.\n        Example 2:\n        Input: num = 14\n        Output: false\n        Explanation: We return false because 3.742 * 3.742 = 14 and 3.742 is not an integer.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        if num == 1:\n            return True\n        left, right = 1, num\n        while left <= right:\n            mid = left + (right - left) // 2\n            if mid * mid == num:\n                return True\n            elif mid * mid < num:\n                left = mid + 1\n            else:\n                right = mid - 1\n        return False"
    },
    {
        "number": 368,
        "title": "Largest Divisible Subset",
        "difficulty": 1,
        "prompt": "class Solution:\n    def largestDivisibleSubset(self, nums: List[int]) -> List[int]:\n        \"\"\"\n        Given a set of distinct positive integers nums, return the largest subset answer such that every pair (answer[i], answer[j]) of elements in this subset satisfies:\n            answer[i] % answer[j] == 0, or\n            answer[j] % answer[i] == 0\n        If there are multiple solutions, return any of them.\n        Example 1:\n        Input: nums = [1,2,3]\n        Output: [1,2]\n        Explanation: [1,3] is also accepted.\n        Example 2:\n        Input: nums = [1,2,4,8]\n        Output: [1,2,4,8]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        if len(nums) == 0:\n            return []\n        nums.sort()\n        dp = [[num] for num in nums]\n        for i in range(len(nums)):\n            for j in range(i):\n                if nums[i] % nums[j] == 0 and len(dp[i]) < len(dp[j]) + 1:\n                    dp[i] = dp[j] + [nums[i]]\n        return max(dp, key=len)"
    },
    {
        "number": 368,
        "title": "Largest Divisible Subset",
        "difficulty": 1,
        "prompt": "class Solution:\n    def largestDivisibleSubset(self, nums: List[int]) -> List[int]:\n        \"\"\"\n        Given a set of distinct positive integers nums, return the largest subset answer such that every pair (answer[i], answer[j]) of elements in this subset satisfies:\n            answer[i] % answer[j] == 0, or\n            answer[j] % answer[i] == 0\n        If there are multiple solutions, return any of them.\n        Example 1:\n        Input: nums = [1,2,3]\n        Output: [1,2]\n        Explanation: [1,3] is also accepted.\n        Example 2:\n        Input: nums = [1,2,4,8]\n        Output: [1,2,4,8]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        nums.sort()\n        dp = [1] * len(nums)\n        max_dp = 1\n        max_index = 0\n        for i in range(1, len(nums)):\n            for j in range(i):\n                if nums[i] % nums[j] == 0 and dp[j] + 1 > dp[i]:\n                    dp[i] = dp[j] + 1\n                    if dp[i] > max_dp:\n                        max_dp = dp[i]\n                        max_index = i\n        return nums[max_index:]"
    },
    {
        "number": 371,
        "title": "Sum of Two Integers",
        "difficulty": 1,
        "prompt": "class Solution:\n    def getSum(self, a: int, b: int) -> int:\n        \"\"\"\n        Given two integers a and b, return the sum of the two integers without using the operators + and -.\n        Example 1:\n        Input: a = 1, b = 2\n        Output: 3\n        Example 2:\n        Input: a = 2, b = 3\n        Output: 5\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        # 32 bits integer max\n        MAX = 0x7FFFFFFF\n        # 32 bits interger min\n        MIN = 0x80000000\n        # mask to get last 32 bits\n        mask = 0xFFFFFFFF\n        while b!= 0:\n            # ^ get different bits and & gets double 1s, << moves carry\n            a, b = (a ^ b) & mask, ((a & b) << 1) & mask\n        # if a is negative, get a's 32 bits complement positive first\n        # then get 32-bit positive's Python complement negative\n        return a if a <= MAX else ~(a ^ mask)"
    },
    {
        "number": 371,
        "title": "Sum of Two Integers",
        "difficulty": 1,
        "prompt": "class Solution:\n    def getSum(self, a: int, b: int) -> int:\n        \"\"\"\n        Given two integers a and b, return the sum of the two integers without using the operators + and -.\n        Example 1:\n        Input: a = 1, b = 2\n        Output: 3\n        Example 2:\n        Input: a = 2, b = 3\n        Output: 5\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        # 32 bits integer max\n        MAX = 0x7FFFFFFF\n        # 32 bits interger min\n        MIN = 0x80000000\n        # mask to get last 32 bits\n        mask = 0xFFFFFFFF\n        while b!= 0:\n            # ^ get different bits and & gets double 1s, << moves carry\n            a, b = (a ^ b) & mask, ((a & b) << 1) & mask\n        # if a is negative, get a's 32 bits complement positive first\n        # then get 32-bit positive's Python complement negative\n        return a if a <= MAX else ~(a ^ mask)"
    },
    {
        "number": 372,
        "title": "Super Pow",
        "difficulty": 1,
        "prompt": "class Solution:\n    def superPow(self, a: int, b: List[int]) -> int:\n        \"\"\"\n        Your task is to calculate ab mod 1337 where a is a positive integer and b is an extremely large positive integer given in the form of an array.\n        Example 1:\n        Input: a = 2, b = [3]\n        Output: 8\n        Example 2:\n        Input: a = 2, b = [1,0]\n        Output: 1024\n        Example 3:\n        Input: a = 1, b = [4,3,3,8,5,2]\n        Output: 1\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        # \u5229\u7528\u4f4d\u8fd0\u7b97\uff0c\u5c06b\u4e2d\u7684\u6570\u5b57\u62c6\u5206\u4e3a\u4e8c\u8fdb\u5236\uff0c\u6bcf\u4e00\u4f4d\u5bf9\u5e94a\u7684\u6bcf\u4e00\u4f4d\uff0c\u7136\u540e\u8fdb\u884c\u5f02\u6216\u8fd0\u7b97\n        # \u5982\u679c\u5f02\u6216\u7ed3\u679c\u4e3a0\uff0c\u5219\u8bf4\u660e\u8fd9\u4e24\u4e2a\u6570\u5b57\u5728\u8fd9\u4e00\u4f4d\u4e0a\u662f\u76f8\u540c\u7684\uff0c\u90a3\u4e48\u8fd9\u4e2a\u6570\u5b57\u7684\u8fd9\u4e00\u4f4d\u5c31\u662f0\uff0c\u5426\u5219\u5c31\u662f1\n        # \u5f02\u6216\u8fd0\u7b97\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3aO(log(b))\n        # \u6bcf\u4e00\u4f4d\u7684\u5f02\u6216\u8fd0\u7b97\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3aO(1)\n        # \u6240\u4ee5\u65f6\u95f4\u590d\u6742\u5ea6\u4e3aO(log(b))\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\u4e3aO(1)\n        # \u6240\u4ee5\u7a7a\u95f4\u590d"
    },
    {
        "number": 372,
        "title": "Super Pow",
        "difficulty": 1,
        "prompt": "class Solution:\n    def superPow(self, a: int, b: List[int]) -> int:\n        \"\"\"\n        Your task is to calculate ab mod 1337 where a is a positive integer and b is an extremely large positive integer given in the form of an array.\n        Example 1:\n        Input: a = 2, b = [3]\n        Output: 8\n        Example 2:\n        Input: a = 2, b = [1,0]\n        Output: 1024\n        Example 3:\n        Input: a = 1, b = [4,3,3,8,5,2]\n        Output: 1\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        # \u66b4\u529b\u89e3\u6cd5\n        # return pow(a, b) % 1337"
    },
    {
        "number": 373,
        "title": "Find K Pairs with Smallest Sums",
        "difficulty": 1,
        "prompt": "class Solution:\n    def kSmallestPairs(self, nums1: List[int], nums2: List[int], k: int) -> List[List[int]]:\n        \"\"\"\n        You are given two integer arrays nums1 and nums2 sorted in ascending order and an integer k.\n        Define a pair (u, v) which consists of one element from the first array and one element from the second array.\n        Return the k pairs (u1, v1), (u2, v2),..., (uk, vk) with the smallest sums.\n        Example 1:\n        Input: nums1 = [1,7,11], nums2 = [2,4,6], k = 3\n        Output: [[1,2],[1,4],[1,6]]\n        Explanation: The first 3 pairs are returned from the sequence: [1,2],[1,4],[1,6],[7,2],[7,4],[11,2],[7,6],[11,4],[11,6]\n        Example 2:\n        Input: nums1 = [1,1,2], nums2 = [1,2,3], k = 2\n        Output: [[1,1],[1,1]]\n        Explanation: The first 2 pairs are returned from the sequence: [1,1],[1,1],[1,2],[2,1],[1,2],[2,2],[1,3],[1,3],[2,3]\n        Example 3:\n        Input: nums1 = [1,2], nums2 = [3], k = 3\n        Output: [[1,3],[2,3]]\n        Explanation: All possible pairs are returned from the sequence: [1,3],[2,3]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        if not nums1 or not nums2:\n            return []\n        heap = []\n        for n1 in nums1:\n            for n2 in nums2:\n                if len(heap) < k:\n                    heapq.heappush(heap, (n1 + n2, [n1, n2]))\n                else:\n                    if n1 + n2 < heap[0][0]:\n                        heapq.heappop(heap)\n                        heapq.heappush(heap, (n1 + n2, [n1, n2]))\n        return [pair[1] for pair in heap]"
    },
    {
        "number": 373,
        "title": "Find K Pairs with Smallest Sums",
        "difficulty": 1,
        "prompt": "class Solution:\n    def kSmallestPairs(self, nums1: List[int], nums2: List[int], k: int) -> List[List[int]]:\n        \"\"\"\n        You are given two integer arrays nums1 and nums2 sorted in ascending order and an integer k.\n        Define a pair (u, v) which consists of one element from the first array and one element from the second array.\n        Return the k pairs (u1, v1), (u2, v2),..., (uk, vk) with the smallest sums.\n        Example 1:\n        Input: nums1 = [1,7,11], nums2 = [2,4,6], k = 3\n        Output: [[1,2],[1,4],[1,6]]\n        Explanation: The first 3 pairs are returned from the sequence: [1,2],[1,4],[1,6],[7,2],[7,4],[11,2],[7,6],[11,4],[11,6]\n        Example 2:\n        Input: nums1 = [1,1,2], nums2 = [1,2,3], k = 2\n        Output: [[1,1],[1,1]]\n        Explanation: The first 2 pairs are returned from the sequence: [1,1],[1,1],[1,2],[2,1],[1,2],[2,2],[1,3],[1,3],[2,3]\n        Example 3:\n        Input: nums1 = [1,2], nums2 = [3], k = 3\n        Output: [[1,3],[2,3]]\n        Explanation: All possible pairs are returned from the sequence: [1,3],[2,3]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        if not nums1 or not nums2:\n            return []\n        if k == 0:\n            return []\n        if k == 1:\n            return [[nums1[0], nums2[0]]]\n        if k == 2:\n            return [[nums1[0], nums2[0]], [nums1[0], nums2[1]], [nums1[1], nums2[0]], [nums1[1], nums2[1]]]\n        if k == 3:\n            return [[nums1[0], nums2[0]], [nums1[0], nums2[1]], [nums1[1], nums2[0]], [nums1[1], nums2[1]]]"
    },
    {
        "number": 374,
        "title": "Guess Number Higher or Lower",
        "difficulty": 0,
        "prompt": "class Solution:\n    def guessNumber(self, n: int) -> int:\n        \"\"\"\n        We are playing the Guess Game. The game is as follows:\n        I pick a number from 1 to n. You have to guess which number I picked.\n        Every time you guess wrong, I will tell you whether the number I picked is higher or lower than your guess.\n        You call a pre-defined API int guess(int num), which returns three possible results:\n            -1: Your guess is higher than the number I picked (i.e. num > pick).\n            1: Your guess is lower than the number I picked (i.e. num < pick).\n            0: your guess is equal to the number I picked (i.e. num == pick).\n        Return the number that I picked.\n        Example 1:\n        Input: n = 10, pick = 6\n        Output: 6\n        Example 2:\n        Input: n = 1, pick = 1\n        Output: 1\n        Example 3:\n        Input: n = 2, pick = 1\n        Output: 1\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        l, r = 1, n\n        while l <= r:\n            mid = (l + r) // 2\n            if guess(mid) == 0:\n                return mid\n            elif guess(mid) == -1:\n                r = mid - 1\n            else:\n                l = mid + 1\n        return l"
    },
    {
        "number": 374,
        "title": "Guess Number Higher or Lower",
        "difficulty": 0,
        "prompt": "class Solution:\n    def guessNumber(self, n: int) -> int:\n        \"\"\"\n        We are playing the Guess Game. The game is as follows:\n        I pick a number from 1 to n. You have to guess which number I picked.\n        Every time you guess wrong, I will tell you whether the number I picked is higher or lower than your guess.\n        You call a pre-defined API int guess(int num), which returns three possible results:\n            -1: Your guess is higher than the number I picked (i.e. num > pick).\n            1: Your guess is lower than the number I picked (i.e. num < pick).\n            0: your guess is equal to the number I picked (i.e. num == pick).\n        Return the number that I picked.\n        Example 1:\n        Input: n = 10, pick = 6\n        Output: 6\n        Example 2:\n        Input: n = 1, pick = 1\n        Output: 1\n        Example 3:\n        Input: n = 2, pick = 1\n        Output: 1\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        l, r = 1, n\n        while l <= r:\n            mid = l + (r - l) // 2\n            if guess(mid) == 0:\n                return mid\n            elif guess(mid) == -1:\n                r = mid - 1\n            else:\n                l = mid + 1\n        return l"
    },
    {
        "number": 375,
        "title": "Guess Number Higher or Lower II",
        "difficulty": 1,
        "prompt": "class Solution:\n    def getMoneyAmount(self, n: int) -> int:\n        \"\"\"\n        We are playing the Guessing Game. The game will work as follows:\n            I pick a number between 1 and n.\n            You guess a number.\n            If you guess the right number, you win the game.\n            If you guess the wrong number, then I will tell you whether the number I picked is higher or lower, and you will continue guessing.\n            Every time you guess a wrong number x, you will pay x dollars. If you run out of money, you lose the game.\n        Given a particular n, return the minimum amount of money you need to guarantee a win regardless of what number I pick.\n        Example 1:\n        Input: n = 10\n        Output: 16\n        Explanation: The winning strategy is as follows:\n        - The range is [1,10]. Guess 7.\n            - If this is my number, your total is $0. Otherwise, you pay $7.\n            - If my number is higher, the range is [8,10]. Guess 9.\n                - If this is my number, your total is $7. Otherwise, you pay $9.\n                - If my number is higher, it must be 10. Guess 10. Your total is $7 + $9 = $16.\n                - If my number is lower, it must be 8. Guess 8. Your total is $7 + $9 = $16.\n            - If my number is lower, the range is [1,6]. Guess 3.\n                - If this is my number, your total is $7. Otherwise, you pay $3.\n                - If my number is higher, the range is [4,6]. Guess 5.\n                    - If this is my number, your total is $7 + $3 = $10. Otherwise, you pay $5.\n                    - If my number is higher, it must be 6. Guess 6. Your total is $7 + $3 + $5 = $15.\n                    - If my number is lower, it must be 4. Guess 4. Your total is $7 + $3 + $5 = $15.\n                - If my number is lower, the range is [1,2]. Guess 1.\n                    - If this is my number, your total is $7 + $3 = $10. Otherwise, you pay $1.\n                    - If my number is higher, it must be 2. Guess 2. Your total is $7 + $3 + $1 = $11.\n        The worst case in all these scenarios is that you pay $16. Hence, you only need $16 to guarantee a win.\n        Example 2:\n        Input: n = 1\n        Output: 0\n        Explanation: There is only one possible number, so you can guess 1 and not have to pay anything.\n        Example 3:\n        Input: n = 2\n        Output: 1\n        Explanation: There are two possible numbers, 1 and 2.\n        - Guess 1.\n            - If this is my number, your total is $0. Otherwise, you pay $1.\n            - If my number is higher, it must be 2. Guess 2. Your total is $1.\n        The worst case is that you pay $1.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        # dp[i][j] = min(dp[i][j], dp[i][k] + dp[k][j] + k)\n        dp = [[0] * (n + 1) for _ in range(n + 1)]\n        for i in range(1, n + 1):\n            for j in range(i, n + 1):\n                if i == j:\n                    dp[i][j] = 0\n                else:\n                    dp[i][j] = min(dp[i][j], dp[i][k] + dp[k][j] + k) for k in range(i, j)\n        return dp[1][n]"
    },
    {
        "number": 375,
        "title": "Guess Number Higher or Lower II",
        "difficulty": 1,
        "prompt": "class Solution:\n    def getMoneyAmount(self, n: int) -> int:\n        \"\"\"\n        We are playing the Guessing Game. The game will work as follows:\n            I pick a number between 1 and n.\n            You guess a number.\n            If you guess the right number, you win the game.\n            If you guess the wrong number, then I will tell you whether the number I picked is higher or lower, and you will continue guessing.\n            Every time you guess a wrong number x, you will pay x dollars. If you run out of money, you lose the game.\n        Given a particular n, return the minimum amount of money you need to guarantee a win regardless of what number I pick.\n        Example 1:\n        Input: n = 10\n        Output: 16\n        Explanation: The winning strategy is as follows:\n        - The range is [1,10]. Guess 7.\n            - If this is my number, your total is $0. Otherwise, you pay $7.\n            - If my number is higher, the range is [8,10]. Guess 9.\n                - If this is my number, your total is $7. Otherwise, you pay $9.\n                - If my number is higher, it must be 10. Guess 10. Your total is $7 + $9 = $16.\n                - If my number is lower, it must be 8. Guess 8. Your total is $7 + $9 = $16.\n            - If my number is lower, the range is [1,6]. Guess 3.\n                - If this is my number, your total is $7. Otherwise, you pay $3.\n                - If my number is higher, the range is [4,6]. Guess 5.\n                    - If this is my number, your total is $7 + $3 = $10. Otherwise, you pay $5.\n                    - If my number is higher, it must be 6. Guess 6. Your total is $7 + $3 + $5 = $15.\n                    - If my number is lower, it must be 4. Guess 4. Your total is $7 + $3 + $5 = $15.\n                - If my number is lower, the range is [1,2]. Guess 1.\n                    - If this is my number, your total is $7 + $3 = $10. Otherwise, you pay $1.\n                    - If my number is higher, it must be 2. Guess 2. Your total is $7 + $3 + $1 = $11.\n        The worst case in all these scenarios is that you pay $16. Hence, you only need $16 to guarantee a win.\n        Example 2:\n        Input: n = 1\n        Output: 0\n        Explanation: There is only one possible number, so you can guess 1 and not have to pay anything.\n        Example 3:\n        Input: n = 2\n        Output: 1\n        Explanation: There are two possible numbers, 1 and 2.\n        - Guess 1.\n            - If this is my number, your total is $0. Otherwise, you pay $1.\n            - If my number is higher, it must be 2. Guess 2. Your total is $1.\n        The worst case is that you pay $1.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        # dp[i][j] = min(dp[i][j], dp[i][k] + dp[k][j] + i - k)\n        # dp[i][j] = min(dp[i][j], dp[i][k] + dp[k][j] + i - k)\n        # dp[i][j] = min(dp[i][j], dp[i][k] + dp[k][j] + i - k)\n        # dp[i][j] = min(dp[i][j], dp[i][k] + dp[k][j] + i - k)\n        # dp[i][j] = min(dp[i][j], dp[i][k] + dp[k][j] + i - k)\n        # dp[i][j] = min(dp[i][j], dp[i][k] + dp[k][j] + i - k)\n        # dp[i][j] = min(dp[i][j], dp[i][k] + dp[k][j] + i - k)\n        # dp[i][j] = min(dp[i][j], dp[i][k] + d"
    },
    {
        "number": 376,
        "title": "Wiggle Subsequence",
        "difficulty": 1,
        "prompt": "class Solution:\n    def wiggleMaxLength(self, nums: List[int]) -> int:\n        \"\"\"\n        A wiggle sequence is a sequence where the differences between successive numbers strictly alternate between positive and negative. The first difference (if one exists) may be either positive or negative. A sequence with one element and a sequence with two non-equal elements are trivially wiggle sequences.\n            For example, [1, 7, 4, 9, 2, 5] is a wiggle sequence because the differences (6, -3, 5, -7, 3) alternate between positive and negative.\n            In contrast, [1, 4, 7, 2, 5] and [1, 7, 4, 5, 5] are not wiggle sequences. The first is not because its first two differences are positive, and the second is not because its last difference is zero.\n        A subsequence is obtained by deleting some elements (possibly zero) from the original sequence, leaving the remaining elements in their original order.\n        Given an integer array nums, return the length of the longest wiggle subsequence of nums.\n        Example 1:\n        Input: nums = [1,7,4,9,2,5]\n        Output: 6\n        Explanation: The entire sequence is a wiggle sequence with differences (6, -3, 5, -7, 3).\n        Example 2:\n        Input: nums = [1,17,5,10,13,15,10,5,16,8]\n        Output: 7\n        Explanation: There are several subsequences that achieve this length.\n        One is [1, 17, 10, 13, 10, 16, 8] with differences (16, -7, 3, -3, 6, -8).\n        Example 3:\n        Input: nums = [1,2,3,4,5,6,7,8,9]\n        Output: 2\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        # dp[i] = the longest wiggle subsequence ending at nums[i]\n        # dp[i] = max(dp[i-1] + 1, dp[i-2] + 1) if nums[i] > nums[i-1]\n        # dp[i] = max(dp[i-1] + 1, dp[i-2] - 1) if nums[i] < nums[i-1]\n        # dp[i] = 1 if nums[i] == nums[i-1]\n        # dp[0] = 1\n        # dp[1] = 2 if nums[1] > nums[0] else 1\n        # dp[2] = 2 if nums[2] > nums[1] else dp[1]\n        # dp[3] = 3 if nums[3] > nums[2] else dp[2]\n        # dp[4] = 3 if nums[4] > nums[3] else dp[3]\n        # dp[5] = 4 if nums[5] > nums[4] else dp[3]\n        # dp[6] = 4 if nums[6] > nums[5"
    },
    {
        "number": 376,
        "title": "Wiggle Subsequence",
        "difficulty": 1,
        "prompt": "class Solution:\n    def wiggleMaxLength(self, nums: List[int]) -> int:\n        \"\"\"\n        A wiggle sequence is a sequence where the differences between successive numbers strictly alternate between positive and negative. The first difference (if one exists) may be either positive or negative. A sequence with one element and a sequence with two non-equal elements are trivially wiggle sequences.\n            For example, [1, 7, 4, 9, 2, 5] is a wiggle sequence because the differences (6, -3, 5, -7, 3) alternate between positive and negative.\n            In contrast, [1, 4, 7, 2, 5] and [1, 7, 4, 5, 5] are not wiggle sequences. The first is not because its first two differences are positive, and the second is not because its last difference is zero.\n        A subsequence is obtained by deleting some elements (possibly zero) from the original sequence, leaving the remaining elements in their original order.\n        Given an integer array nums, return the length of the longest wiggle subsequence of nums.\n        Example 1:\n        Input: nums = [1,7,4,9,2,5]\n        Output: 6\n        Explanation: The entire sequence is a wiggle sequence with differences (6, -3, 5, -7, 3).\n        Example 2:\n        Input: nums = [1,17,5,10,13,15,10,5,16,8]\n        Output: 7\n        Explanation: There are several subsequences that achieve this length.\n        One is [1, 17, 10, 13, 10, 16, 8] with differences (16, -7, 3, -3, 6, -8).\n        Example 3:\n        Input: nums = [1,2,3,4,5,6,7,8,9]\n        Output: 2\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        if len(nums) < 2:\n            return len(nums)\n        up = 1\n        down = 1\n        for i in range(1, len(nums)):\n            if nums[i] > nums[i - 1]:\n                up = down + 1\n            elif nums[i] < nums[i - 1]:\n                down = up + 1\n        return max(up, down)"
    },
    {
        "number": 377,
        "title": "Combination Sum IV",
        "difficulty": 1,
        "prompt": "class Solution:\n    def combinationSum4(self, nums: List[int], target: int) -> int:\n        \"\"\"\n        Given an array of distinct integers nums and a target integer target, return the number of possible combinations that add up to target.\n        The test cases are generated so that the answer can fit in a 32-bit integer.\n        Example 1:\n        Input: nums = [1,2,3], target = 4\n        Output: 7\n        Explanation:\n        The possible combination ways are:\n        (1, 1, 1, 1)\n        (1, 1, 2)\n        (1, 2, 1)\n        (1, 3)\n        (2, 1, 1)\n        (2, 2)\n        (3, 1)\n        Note that different sequences are counted as different combinations.\n        Example 2:\n        Input: nums = [9], target = 3\n        Output: 0\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        # dp[i] = the number of ways to get to target = i\n        dp = [0] * (target + 1)\n        dp[0] = 1\n        for i in range(1, target + 1):\n            for num in nums:\n                if i >= num:\n                    dp[i] += dp[i - num]\n        return dp[target]"
    },
    {
        "number": 377,
        "title": "Combination Sum IV",
        "difficulty": 1,
        "prompt": "class Solution:\n    def combinationSum4(self, nums: List[int], target: int) -> int:\n        \"\"\"\n        Given an array of distinct integers nums and a target integer target, return the number of possible combinations that add up to target.\n        The test cases are generated so that the answer can fit in a 32-bit integer.\n        Example 1:\n        Input: nums = [1,2,3], target = 4\n        Output: 7\n        Explanation:\n        The possible combination ways are:\n        (1, 1, 1, 1)\n        (1, 1, 2)\n        (1, 2, 1)\n        (1, 3)\n        (2, 1, 1)\n        (2, 2)\n        (3, 1)\n        Note that different sequences are counted as different combinations.\n        Example 2:\n        Input: nums = [9], target = 3\n        Output: 0\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        # dp[i] = the number of ways to get target i\n        dp = [0] * (target + 1)\n        dp[0] = 1\n        for i in range(1, target + 1):\n            for num in nums:\n                if num <= i:\n                    dp[i] += dp[i - num]\n        return dp[target]"
    },
    {
        "number": 378,
        "title": "Kth Smallest Element in a Sorted Matrix",
        "difficulty": 1,
        "prompt": "class Solution:\n    def kthSmallest(self, matrix: List[List[int]], k: int) -> int:\n        \"\"\"\n        Given an n x n matrix where each of the rows and columns is sorted in ascending order, return the kth smallest element in the matrix.\n        Note that it is the kth smallest element in the sorted order, not the kth distinct element.\n        You must find a solution with a memory complexity better than O(n2).\n        Example 1:\n        Input: matrix = [[1,5,9],[10,11,13],[12,13,15]], k = 8\n        Output: 13\n        Explanation: The elements in the matrix are [1,5,9,10,11,12,13,13,15], and the 8th smallest number is 13\n        Example 2:\n        Input: matrix = [[-5]], k = 1\n        Output: -5\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        # binary search\n        # time O(log(n))\n        # space O(1)\n        def count(mid):\n            i, j = len(matrix) - 1, 0\n            num = 0\n            while i >= 0 and j < len(matrix):\n                if matrix[i][j] <= mid:\n                    num += i + 1\n                    j += 1\n                else:\n                    i -= 1\n            return num\n        left, right = matrix[0][0], matrix[-1][-1]\n        while left < right:\n            mid = left + (right - left) // 2\n            if count(mid) >= k:\n                right = mid\n            else:\n                left = mid + 1\n        return left\n<|endoftext|><|endoftext|><|endoftext|>"
    },
    {
        "number": 378,
        "title": "Kth Smallest Element in a Sorted Matrix",
        "difficulty": 1,
        "prompt": "class Solution:\n    def kthSmallest(self, matrix: List[List[int]], k: int) -> int:\n        \"\"\"\n        Given an n x n matrix where each of the rows and columns is sorted in ascending order, return the kth smallest element in the matrix.\n        Note that it is the kth smallest element in the sorted order, not the kth distinct element.\n        You must find a solution with a memory complexity better than O(n2).\n        Example 1:\n        Input: matrix = [[1,5,9],[10,11,13],[12,13,15]], k = 8\n        Output: 13\n        Explanation: The elements in the matrix are [1,5,9,10,11,12,13,13,15], and the 8th smallest number is 13\n        Example 2:\n        Input: matrix = [[-5]], k = 1\n        Output: -5\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        # binary search\n        # time complexity: O(nlogk)\n        # space complexity: O(1)\n        def count(mid):\n            i, j = len(matrix) - 1, 0\n            num = 0\n            while i >= 0 and j < len(matrix):\n                if matrix[i][j] <= mid:\n                    num += i + 1\n                    j += 1\n                else:\n                    i -= 1\n            return num\n        left, right = matrix[0][0], matrix[-1][-1]\n        while left < right:\n            mid = (left + right) // 2\n            if count(mid) >= k:\n                right = mid\n            else:\n                left = mid + 1\n        return left\n<|endoftext|>"
    },
    {
        "number": 380,
        "title": "Insert Delete GetRandom O(1)",
        "difficulty": 1,
        "prompt": "class RandomizedSet:\n    def __init__(self):\n    def insert(self, val: int) -> bool:\n    def remove(self, val: int) -> bool:\n    def getRandom(self) -> int:\n        \"\"\"\n        Implement the RandomizedSet class:\n            RandomizedSet() Initializes the RandomizedSet object.\n            bool insert(int val) Inserts an item val into the set if not present. Returns true if the item was not present, false otherwise.\n            bool remove(int val) Removes an item val from the set if present. Returns true if the item was present, false otherwise.\n            int getRandom() Returns a random element from the current set of elements (it's guaranteed that at least one element exists when this method is called). Each element must have the same probability of being returned.\n        You must implement the functions of the class such that each function works in average O(1) time complexity.\n        Example 1:\n        Input\n        [\"RandomizedSet\", \"insert\", \"remove\", \"insert\", \"getRandom\", \"remove\", \"insert\", \"getRandom\"]\n        [[], [1], [2], [2], [], [1], [2], []]\n        Output\n        [null, true, false, true, 2, true, false, 2]\n        Explanation\n        RandomizedSet randomizedSet = new RandomizedSet();\n        randomizedSet.insert(1); // Inserts 1 to the set. Returns true as 1 was inserted successfully.\n        randomizedSet.remove(2); // Returns false as 2 does not exist in the set.\n        randomizedSet.insert(2); // Inserts 2 to the set, returns true. Set now contains [1,2].\n        randomizedSet.getRandom(); // getRandom() should return either 1 or 2 randomly.\n        randomizedSet.remove(1); // Removes 1 from the set, returns true. Set now contains [2].\n        randomizedSet.insert(2); // 2 was already in the set, so return false.\n        randomizedSet.getRandom(); // Since 2 is the only number in the set, getRandom() will always return 2.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        self.nums = []\n        self.pos = {}\n        return self.insert(val)\n    def insert(self, val: int) -> bool:\n        if val in self.pos:\n            return False\n        self.nums.append(val)\n        self.pos[val] = len(self.nums) - 1\n        return True\n    def remove(self, val: int) -> bool:\n        if val not in self.pos:\n            return False\n        idx, last = self.pos[val], self.nums[-1]\n        self.nums[idx], self.pos[last] = last, idx\n        self.nums.pop()\n        self.pos.pop(val, 0)\n        return True\n    def getRandom(self) -> int:\n        return self.nums[random.randint(0, len(self.nums) - 1)]"
    },
    {
        "number": 380,
        "title": "Insert Delete GetRandom O(1)",
        "difficulty": 1,
        "prompt": "class RandomizedSet:\n    def __init__(self):\n    def insert(self, val: int) -> bool:\n    def remove(self, val: int) -> bool:\n    def getRandom(self) -> int:\n        \"\"\"\n        Implement the RandomizedSet class:\n            RandomizedSet() Initializes the RandomizedSet object.\n            bool insert(int val) Inserts an item val into the set if not present. Returns true if the item was not present, false otherwise.\n            bool remove(int val) Removes an item val from the set if present. Returns true if the item was present, false otherwise.\n            int getRandom() Returns a random element from the current set of elements (it's guaranteed that at least one element exists when this method is called). Each element must have the same probability of being returned.\n        You must implement the functions of the class such that each function works in average O(1) time complexity.\n        Example 1:\n        Input\n        [\"RandomizedSet\", \"insert\", \"remove\", \"insert\", \"getRandom\", \"remove\", \"insert\", \"getRandom\"]\n        [[], [1], [2], [2], [], [1], [2], []]\n        Output\n        [null, true, false, true, 2, true, false, 2]\n        Explanation\n        RandomizedSet randomizedSet = new RandomizedSet();\n        randomizedSet.insert(1); // Inserts 1 to the set. Returns true as 1 was inserted successfully.\n        randomizedSet.remove(2); // Returns false as 2 does not exist in the set.\n        randomizedSet.insert(2); // Inserts 2 to the set, returns true. Set now contains [1,2].\n        randomizedSet.getRandom(); // getRandom() should return either 1 or 2 randomly.\n        randomizedSet.remove(1); // Removes 1 from the set, returns true. Set now contains [2].\n        randomizedSet.insert(2); // 2 was already in the set, so return false.\n        randomizedSet.getRandom(); // Since 2 is the only number in the set, getRandom() will always return 2.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        \n        \"\"\"\n        # Your RandomizedSet object will be instantiated and called as such:\n        obj = RandomizedSet()\n        param_1 = obj.insert(val)\n        param_2 = obj.remove(val)\n        param_3 = obj.getRandom()\n        \"\"\"\n        \n        \"\"\"\n        # Solution 1:\n        self.nums = []\n        self.pos = {}\n        \n        def insert(self, val: int) -> bool:\n            if val in self.pos:\n                return False\n            self.nums.append(val)\n            self.pos[val] = len(self.nums) - 1\n            return True\n        \n        def remove(self, val: int) -> bool:\n            if val not in self.pos:\n                return False\n            idx, last = self.pos[val], self.nums[-1]\n            self.nums[idx], self.pos[last] = last, idx\n            self.nums.pop()\n            self.pos.pop(val, 0)\n            return True\n        \n        def getRandom(self) -> int:\n            return self.nums[random.randint(0, len(self.nums) - 1)]\n        \"\"\"\n        \n        \"\"\"\n        "
    },
    {
        "number": 381,
        "title": "Insert Delete GetRandom O(1) - Duplicates allowed",
        "difficulty": 2,
        "prompt": "class RandomizedCollection:\n    def __init__(self):\n    def insert(self, val: int) -> bool:\n    def remove(self, val: int) -> bool:\n    def getRandom(self) -> int:\n        \"\"\"\n        RandomizedCollection is a data structure that contains a collection of numbers, possibly duplicates (i.e., a multiset). It should support inserting and removing specific elements and also reporting a random element.\n        Implement the RandomizedCollection class:\n            RandomizedCollection() Initializes the empty RandomizedCollection object.\n            bool insert(int val) Inserts an item val into the multiset, even if the item is already present. Returns true if the item is not present, false otherwise.\n            bool remove(int val) Removes an item val from the multiset if present. Returns true if the item is present, false otherwise. Note that if val has multiple occurrences in the multiset, we only remove one of them.\n            int getRandom() Returns a random element from the current multiset of elements. The probability of each element being returned is linearly related to the number of the same values the multiset contains.\n        You must implement the functions of the class such that each function works on average O(1) time complexity.\n        Note: The test cases are generated such that getRandom will only be called if there is at least one item in the RandomizedCollection.\n        Example 1:\n        Input\n        [\"RandomizedCollection\", \"insert\", \"insert\", \"insert\", \"getRandom\", \"remove\", \"getRandom\"]\n        [[], [1], [1], [2], [], [1], []]\n        Output\n        [null, true, false, true, 2, true, 1]\n        Explanation\n        RandomizedCollection randomizedCollection = new RandomizedCollection();\n        randomizedCollection.insert(1);   // return true since the collection does not contain 1.\n                                          // Inserts 1 into the collection.\n        randomizedCollection.insert(1);   // return false since the collection contains 1.\n                                          // Inserts another 1 into the collection. Collection now contains [1,1].\n        randomizedCollection.insert(2);   // return true since the collection does not contain 2.\n                                          // Inserts 2 into the collection. Collection now contains [1,1,2].\n        randomizedCollection.getRandom(); // getRandom should:\n                                          // - return 1 with probability 2/3, or\n                                          // - return 2 with probability 1/3.\n        randomizedCollection.remove(1);   // return true since the collection contains 1.\n                                          // Removes 1 from the collection. Collection now contains [1,2].\n        randomizedCollection.getRandom(); // getRandom should return 1 or 2, both equally likely.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n"
    },
    {
        "number": 381,
        "title": "Insert Delete GetRandom O(1) - Duplicates allowed",
        "difficulty": 2,
        "prompt": "class RandomizedCollection:\n    def __init__(self):\n    def insert(self, val: int) -> bool:\n    def remove(self, val: int) -> bool:\n    def getRandom(self) -> int:\n        \"\"\"\n        RandomizedCollection is a data structure that contains a collection of numbers, possibly duplicates (i.e., a multiset). It should support inserting and removing specific elements and also reporting a random element.\n        Implement the RandomizedCollection class:\n            RandomizedCollection() Initializes the empty RandomizedCollection object.\n            bool insert(int val) Inserts an item val into the multiset, even if the item is already present. Returns true if the item is not present, false otherwise.\n            bool remove(int val) Removes an item val from the multiset if present. Returns true if the item is present, false otherwise. Note that if val has multiple occurrences in the multiset, we only remove one of them.\n            int getRandom() Returns a random element from the current multiset of elements. The probability of each element being returned is linearly related to the number of the same values the multiset contains.\n        You must implement the functions of the class such that each function works on average O(1) time complexity.\n        Note: The test cases are generated such that getRandom will only be called if there is at least one item in the RandomizedCollection.\n        Example 1:\n        Input\n        [\"RandomizedCollection\", \"insert\", \"insert\", \"insert\", \"getRandom\", \"remove\", \"getRandom\"]\n        [[], [1], [1], [2], [], [1], []]\n        Output\n        [null, true, false, true, 2, true, 1]\n        Explanation\n        RandomizedCollection randomizedCollection = new RandomizedCollection();\n        randomizedCollection.insert(1);   // return true since the collection does not contain 1.\n                                          // Inserts 1 into the collection.\n        randomizedCollection.insert(1);   // return false since the collection contains 1.\n                                          // Inserts another 1 into the collection. Collection now contains [1,1].\n        randomizedCollection.insert(2);   // return true since the collection does not contain 2.\n                                          // Inserts 2 into the collection. Collection now contains [1,1,2].\n        randomizedCollection.getRandom(); // getRandom should:\n                                          // - return 1 with probability 2/3, or\n                                          // - return 2 with probability 1/3.\n        randomizedCollection.remove(1);   // return true since the collection contains 1.\n                                          // Removes 1 from the collection. Collection now contains [1,2].\n        randomizedCollection.getRandom(); // getRandom should return 1 or 2, both equally likely.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        self.dic = {}\n        self.lst = []\n        self.count = 0\n        return None"
    },
    {
        "number": 382,
        "title": "Linked List Random Node",
        "difficulty": 1,
        "prompt": "class Solution:\n    def __init__(self, head: Optional[ListNode]):\n    def getRandom(self) -> int:\n        \"\"\"\n        Given a singly linked list, return a random node's value from the linked list. Each node must have the same probability of being chosen.\n        Implement the Solution class:\n            Solution(ListNode head) Initializes the object with the head of the singly-linked list head.\n            int getRandom() Chooses a node randomly from the list and returns its value. All the nodes of the list should be equally likely to be chosen.\n        Example 1:\n        Input\n        [\"Solution\", \"getRandom\", \"getRandom\", \"getRandom\", \"getRandom\", \"getRandom\"]\n        [[[1, 2, 3]], [], [], [], [], []]\n        Output\n        [null, 1, 3, 2, 2, 3]\n        Explanation\n        Solution solution = new Solution([1, 2, 3]);\n        solution.getRandom(); // return 1\n        solution.getRandom(); // return 3\n        solution.getRandom(); // return 2\n        solution.getRandom(); // return 2\n        solution.getRandom(); // return 3\n        // getRandom() should return either 1, 2, or 3 randomly. Each element should have equal probability of returning.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        self.head = head\n        self.n = 0\n        while head:\n            self.n += 1\n            head = head.next\n        self.cur = 0\n        return self.getRandom()"
    },
    {
        "number": 382,
        "title": "Linked List Random Node",
        "difficulty": 1,
        "prompt": "class Solution:\n    def __init__(self, head: Optional[ListNode]):\n    def getRandom(self) -> int:\n        \"\"\"\n        Given a singly linked list, return a random node's value from the linked list. Each node must have the same probability of being chosen.\n        Implement the Solution class:\n            Solution(ListNode head) Initializes the object with the head of the singly-linked list head.\n            int getRandom() Chooses a node randomly from the list and returns its value. All the nodes of the list should be equally likely to be chosen.\n        Example 1:\n        Input\n        [\"Solution\", \"getRandom\", \"getRandom\", \"getRandom\", \"getRandom\", \"getRandom\"]\n        [[[1, 2, 3]], [], [], [], [], []]\n        Output\n        [null, 1, 3, 2, 2, 3]\n        Explanation\n        Solution solution = new Solution([1, 2, 3]);\n        solution.getRandom(); // return 1\n        solution.getRandom(); // return 3\n        solution.getRandom(); // return 2\n        solution.getRandom(); // return 2\n        solution.getRandom(); // return 3\n        // getRandom() should return either 1, 2, or 3 randomly. Each element should have equal probability of returning.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        self.head = head\n        self.n = 0\n        while head:\n            self.n += 1\n            head = head.next\n        self.cur = 0\n        return self.get_random()"
    },
    {
        "number": 383,
        "title": "Ransom Note",
        "difficulty": 0,
        "prompt": "class Solution:\n    def canConstruct(self, ransomNote: str, magazine: str) -> bool:\n        \"\"\"\n        Given two strings ransomNote and magazine, return true if ransomNote can be constructed by using the letters from magazine and false otherwise.\n        Each letter in magazine can only be used once in ransomNote.\n        Example 1:\n        Input: ransomNote = \"a\", magazine = \"b\"\n        Output: false\n        Example 2:\n        Input: ransomNote = \"aa\", magazine = \"ab\"\n        Output: false\n        Example 3:\n        Input: ransomNote = \"aa\", magazine = \"aab\"\n        Output: true\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        # Runtime: O(n)\n        # Space: O(n)\n        ransomNote_dict = {}\n        magazine_dict = {}\n        for char in ransomNote:\n            if char in ransomNote_dict:\n                ransomNote_dict[char] += 1\n            else:\n                ransomNote_dict[char] = 1\n        for char in magazine:\n            if char in magazine_dict:\n                magazine_dict[char] += 1\n            else:\n                magazine_dict[char] = 1\n        for key, value in ransomNote_dict.items():\n            if key not in magazine_dict or value > magazine_dict[key]:\n                return False\n        return True"
    },
    {
        "number": 383,
        "title": "Ransom Note",
        "difficulty": 0,
        "prompt": "class Solution:\n    def canConstruct(self, ransomNote: str, magazine: str) -> bool:\n        \"\"\"\n        Given two strings ransomNote and magazine, return true if ransomNote can be constructed by using the letters from magazine and false otherwise.\n        Each letter in magazine can only be used once in ransomNote.\n        Example 1:\n        Input: ransomNote = \"a\", magazine = \"b\"\n        Output: false\n        Example 2:\n        Input: ransomNote = \"aa\", magazine = \"ab\"\n        Output: false\n        Example 3:\n        Input: ransomNote = \"aa\", magazine = \"aab\"\n        Output: true\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        for i in set(ransomNote):\n            if ransomNote.count(i) > magazine.count(i):\n                return False\n        return True"
    },
    {
        "number": 384,
        "title": "Shuffle an Array",
        "difficulty": 1,
        "prompt": "class Solution:\n    def __init__(self, nums: List[int]):\n    def reset(self) -> List[int]:\n    def shuffle(self) -> List[int]:\n        \"\"\"\n        Given an integer array nums, design an algorithm to randomly shuffle the array. All permutations of the array should be equally likely as a result of the shuffling.\n        Implement the Solution class:\n            Solution(int[] nums) Initializes the object with the integer array nums.\n            int[] reset() Resets the array to its original configuration and returns it.\n            int[] shuffle() Returns a random shuffling of the array.\n        Example 1:\n        Input\n        [\"Solution\", \"shuffle\", \"reset\", \"shuffle\"]\n        [[[1, 2, 3]], [], [], []]\n        Output\n        [null, [3, 1, 2], [1, 2, 3], [1, 3, 2]]\n        Explanation\n        Solution solution = new Solution([1, 2, 3]);\n        solution.shuffle();    // Shuffle the array [1,2,3] and return its result.\n                               // Any permutation of [1,2,3] must be equally likely to be returned.\n                               // Example: return [3, 1, 2]\n        solution.reset();      // Resets the array back to its original configuration [1,2,3]. Return [1, 2, 3]\n        solution.shuffle();    // Returns the random shuffling of array [1,2,3]. Example: return [1, 3, 2]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        import random\n        return random.sample(nums, len(nums))"
    },
    {
        "number": 384,
        "title": "Shuffle an Array",
        "difficulty": 1,
        "prompt": "class Solution:\n    def __init__(self, nums: List[int]):\n    def reset(self) -> List[int]:\n    def shuffle(self) -> List[int]:\n        \"\"\"\n        Given an integer array nums, design an algorithm to randomly shuffle the array. All permutations of the array should be equally likely as a result of the shuffling.\n        Implement the Solution class:\n            Solution(int[] nums) Initializes the object with the integer array nums.\n            int[] reset() Resets the array to its original configuration and returns it.\n            int[] shuffle() Returns a random shuffling of the array.\n        Example 1:\n        Input\n        [\"Solution\", \"shuffle\", \"reset\", \"shuffle\"]\n        [[[1, 2, 3]], [], [], []]\n        Output\n        [null, [3, 1, 2], [1, 2, 3], [1, 3, 2]]\n        Explanation\n        Solution solution = new Solution([1, 2, 3]);\n        solution.shuffle();    // Shuffle the array [1,2,3] and return its result.\n                               // Any permutation of [1,2,3] must be equally likely to be returned.\n                               // Example: return [3, 1, 2]\n        solution.reset();      // Resets the array back to its original configuration [1,2,3]. Return [1, 2, 3]\n        solution.shuffle();    // Returns the random shuffling of array [1,2,3]. Example: return [1, 3, 2]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        import random\n        nums = self.nums\n        n = len(nums)\n        for i in range(n):\n            j = random.randint(i, n-1)\n            nums[i], nums[j] = nums[j], nums[i]\n        return nums"
    },
    {
        "number": 385,
        "title": "Mini Parser",
        "difficulty": 1,
        "prompt": "        \"\"\"\n        Given a string s represents the serialization of a nested list, implement a parser to deserialize it and return the deserialized NestedInteger.\n        Each element is either an integer or a list whose elements may also be integers or other lists.\n        Example 1:\n        Input: s = \"324\"\n        Output: 324\n        Explanation: You should return a NestedInteger object which contains a single integer 324.\n        Example 2:\n        Input: s = \"[123,[456,[789]]]\"\n        Output: [123,[456,[789]]]\n        Explanation: Return a NestedInteger object containing a nested list with 2 elements:\n        1. An integer containing value 123.\n        2. A nested list containing two elements:\n            i.  An integer containing value 456.\n            ii. A nested list with one element:\n                 a. An integer containing value 789\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        if not s:\n            return NestedInteger()\n        stack = []\n        num = 0\n        sign = 1\n        for c in s:\n            if c.isdigit():\n                num = num * 10 + int(c)\n            elif c == '[':\n                stack.append(NestedInteger())\n            elif c == ']':\n                top = stack.pop()\n                if stack:\n                    stack[-1].add(top)\n                else:\n                    stack.append(top)\n            elif c == ',':\n                if num:\n                    if sign == -1:\n                        stack[-1].add(NestedInteger(-num))\n                    else:\n                        stack[-1].add(NestedInteger(num))\n                    num = 0\n                sign = 1\n        if num:\n            if sign == -1:\n                stack[-1].add(NestedInteger(-num))\n            else:\n                stack[-1].add(NestedInteger(num))\n        return stack[0]"
    },
    {
        "number": 385,
        "title": "Mini Parser",
        "difficulty": 1,
        "prompt": "        \"\"\"\n        Given a string s represents the serialization of a nested list, implement a parser to deserialize it and return the deserialized NestedInteger.\n        Each element is either an integer or a list whose elements may also be integers or other lists.\n        Example 1:\n        Input: s = \"324\"\n        Output: 324\n        Explanation: You should return a NestedInteger object which contains a single integer 324.\n        Example 2:\n        Input: s = \"[123,[456,[789]]]\"\n        Output: [123,[456,[789]]]\n        Explanation: Return a NestedInteger object containing a nested list with 2 elements:\n        1. An integer containing value 123.\n        2. A nested list containing two elements:\n            i.  An integer containing value 456.\n            ii. A nested list with one element:\n                 a. An integer containing value 789\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        if s[0]!= '[':\n            return NestedInteger(int(s))\n        stack = []\n        i = 0\n        while i < len(s):\n            if s[i] == ']':\n                stack.pop()\n            elif s[i] == '[':\n                stack.append(NestedInteger())\n            elif s[i] == ',':\n                if len(stack) == 0:\n                    break\n                stack[-1].add(NestedInteger())\n            else:\n                stack[-1].add(NestedInteger(int(s[i])))\n            i += 1\n        return stack[0]"
    },
    {
        "number": 386,
        "title": "Lexicographical Numbers",
        "difficulty": 1,
        "prompt": "class Solution:\n    def lexicalOrder(self, n: int) -> List[int]:\n        \"\"\"\n        Given an integer n, return all the numbers in the range [1, n] sorted in lexicographical order.\n        You must write an algorithm that runs in O(n) time and uses O(1) extra space. \n        Example 1:\n        Input: n = 13\n        Output: [1,10,11,12,13,2,3,4,5,6,7,8,9]\n        Example 2:\n        Input: n = 2\n        Output: [1,2]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        def dfs(num):\n            if num > n:\n                return\n            res.append(num)\n            for i in range(10):\n                dfs(num * 10 + i)\n        res = []\n        for i in range(1, 10):\n            dfs(i)\n        return res\n<|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>"
    },
    {
        "number": 386,
        "title": "Lexicographical Numbers",
        "difficulty": 1,
        "prompt": "class Solution:\n    def lexicalOrder(self, n: int) -> List[int]:\n        \"\"\"\n        Given an integer n, return all the numbers in the range [1, n] sorted in lexicographical order.\n        You must write an algorithm that runs in O(n) time and uses O(1) extra space. \n        Example 1:\n        Input: n = 13\n        Output: [1,10,11,12,13,2,3,4,5,6,7,8,9]\n        Example 2:\n        Input: n = 2\n        Output: [1,2]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        # Solution 1:\n        # return sorted(range(1, n+1), key=str)\n        \n        # Solution 2:\n        # return sorted(range(1, n+1), key=lambda x: str(x))\n        \n        # Solution 3:\n        # return sorted(range(1, n+1), key=lambda x: str(x))\n        \n        # Solution 4:\n        # return sorted(range(1, n+1), key=lambda x: str(x))\n        \n        # Solution 5:\n        # return sorted(range(1, n+1), key=lambda x: str(x))\n        \n        # Solution 6:\n        # return sorted(range(1, n+1), key=lambda x: str(x))\n        \n        # Solution 7:\n        # return sorted(range(1, n+1), key=lambda x: str(x))\n        \n        # Solution 8:\n        # return sorted(range(1, n+1), key=lambda x: str(x))\n        \n        # Solution 9:\n        # return sorted(range(1, n+1), key=lambda x: str(x))\n        \n        # Solution 10:\n        # return sorted(range(1, n+1), key=lambda x: str("
    },
    {
        "number": 387,
        "title": "First Unique Character in a String",
        "difficulty": 0,
        "prompt": "class Solution:\n    def firstUniqChar(self, s: str) -> int:\n        \"\"\"\n        Given a string s, find the first non-repeating character in it and return its index. If it does not exist, return -1.\n        Example 1:\n        Input: s = \"leetcode\"\n        Output: 0\n        Example 2:\n        Input: s = \"loveleetcode\"\n        Output: 2\n        Example 3:\n        Input: s = \"aabb\"\n        Output: -1\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        # Time: O(n)\n        # Space: O(n)\n        # hashmap\n        # if not s:\n        #     return -1\n        # dic = {}\n        # for i in range(len(s)):\n        #     if s[i] not in dic:\n        #         dic[s[i]] = 1\n        #     else:\n        #         dic[s[i]] += 1\n        # for i in range(len(s)):\n        #     if dic[s[i]] == 1:\n        #         return i\n        # return -1\n        # Time: O(n)\n        # Space: O(1)\n        # hashset\n        # if not s:\n        #     return -1\n        # dic = set()\n        # for i in range(len(s)):\n        #     if s[i] not in dic:\n        #         dic.add(s[i])\n        #     else:\n        #         dic.remove(s[i])\n        #         dic.add(s[i])\n        # for i in range(len(s)):\n        #     if s[i] in dic:\n        #         return i\n        # return -1\n        #"
    },
    {
        "number": 387,
        "title": "First Unique Character in a String",
        "difficulty": 0,
        "prompt": "class Solution:\n    def firstUniqChar(self, s: str) -> int:\n        \"\"\"\n        Given a string s, find the first non-repeating character in it and return its index. If it does not exist, return -1.\n        Example 1:\n        Input: s = \"leetcode\"\n        Output: 0\n        Example 2:\n        Input: s = \"loveleetcode\"\n        Output: 2\n        Example 3:\n        Input: s = \"aabb\"\n        Output: -1\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        # hash table\n        # time complexity: O(n)\n        # space complexity: O(n)\n        # hash_table = {}\n        # for char in s:\n        #     if char in hash_table:\n        #         hash_table[char] += 1\n        #     else:\n        #         hash_table[char] = 1\n        # for i in range(len(s)):\n        #     if hash_table[s[i]] == 1:\n        #         return i\n        # return -1"
    },
    {
        "number": 388,
        "title": "Longest Absolute File Path",
        "difficulty": 1,
        "prompt": "class Solution:\n    def lengthLongestPath(self, input: str) -> int:\n        \"\"\"\n        Suppose we have a file system that stores both files and directories. An example of one system is represented in the following picture:\n        Here, we have dir as the only directory in the root. dir contains two subdirectories, subdir1 and subdir2. subdir1 contains a file file1.ext and subdirectory subsubdir1. subdir2 contains a subdirectory subsubdir2, which contains a file file2.ext.\n        In text form, it looks like this (with \u27f6 representing the tab character):\n        dir\n        \u27f6 subdir1\n        \u27f6 \u27f6 file1.ext\n        \u27f6 \u27f6 subsubdir1\n        \u27f6 subdir2\n        \u27f6 \u27f6 subsubdir2\n        \u27f6 \u27f6 \u27f6 file2.ext\n        If we were to write this representation in code, it will look like this: \"dir\\n\\tsubdir1\\n\\t\\tfile1.ext\\n\\t\\tsubsubdir1\\n\\tsubdir2\\n\\t\\tsubsubdir2\\n\\t\\t\\tfile2.ext\". Note that the '\\n' and '\\t' are the new-line and tab characters.\n        Every file and directory has a unique absolute path in the file system, which is the order of directories that must be opened to reach the file/directory itself, all concatenated by '/'s. Using the above example, the absolute path to file2.ext is \"dir/subdir2/subsubdir2/file2.ext\". Each directory name consists of letters, digits, and/or spaces. Each file name is of the form name.extension, where name and extension consist of letters, digits, and/or spaces.\n        Given a string input representing the file system in the explained format, return the length of the longest absolute path to a file in the abstracted file system. If there is no file in the system, return 0.\n        Note that the testcases are generated such that the file system is valid and no file or directory name has length 0.\n        Example 1:\n        Input: input = \"dir\\n\\tsubdir1\\n\\tsubdir2\\n\\t\\tfile.ext\"\n        Output: 20\n        Explanation: We have only one file, and the absolute path is \"dir/subdir2/file.ext\" of length 20.\n        Example 2:\n        Input: input = \"dir\\n\\tsubdir1\\n\\t\\tfile1.ext\\n\\t\\tsubsubdir1\\n\\tsubdir2\\n\\t\\tsubsubdir2\\n\\t\\t\\tfile2.ext\"\n        Output: 32\n        Explanation: We have two files:\n        \"dir/subdir1/file1.ext\" of length 21\n        \"dir/subdir2/subsubdir2/file2.ext\" of length 32.\n        We return 32 since it is the longest absolute path to a file.\n        Example 3:\n        Input: input = \"a\"\n        Output: 0\n        Explanation: We do not have any files, just a single directory named \"a\".\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        # split the input into lines\n        lines = input.split('\\n')\n        # initialize the longest path length\n        longest_path_length = 0\n        # initialize the current path length\n        current_path_length = 0\n        # initialize the current path\n        current_path = ''\n        # iterate through the lines\n        for line in lines:\n            # if the line is a directory\n            if line.startswith('\\t'):\n                # add the directory to the current path\n                current_path += line[1:] + '/'\n                # increment the current path length\n                current_path_length += len(line[1:]) + 1\n            # if the line is a file\n            else:\n                # add the file to the current path\n                current_path += line\n                # increment the current path length\n                current_path_length += len(line)\n            # if the current path length is greater than the longest path length\n            if current_path_length > longest_path_length:\n                # update the longest path length\n                longest_path_length = current_path_length\n                # update the current path\n                current_path = current_path[:-1]\n        # return the longest path length\n        return longest_path_length"
    },
    {
        "number": 388,
        "title": "Longest Absolute File Path",
        "difficulty": 1,
        "prompt": "class Solution:\n    def lengthLongestPath(self, input: str) -> int:\n        \"\"\"\n        Suppose we have a file system that stores both files and directories. An example of one system is represented in the following picture:\n        Here, we have dir as the only directory in the root. dir contains two subdirectories, subdir1 and subdir2. subdir1 contains a file file1.ext and subdirectory subsubdir1. subdir2 contains a subdirectory subsubdir2, which contains a file file2.ext.\n        In text form, it looks like this (with \u27f6 representing the tab character):\n        dir\n        \u27f6 subdir1\n        \u27f6 \u27f6 file1.ext\n        \u27f6 \u27f6 subsubdir1\n        \u27f6 subdir2\n        \u27f6 \u27f6 subsubdir2\n        \u27f6 \u27f6 \u27f6 file2.ext\n        If we were to write this representation in code, it will look like this: \"dir\\n\\tsubdir1\\n\\t\\tfile1.ext\\n\\t\\tsubsubdir1\\n\\tsubdir2\\n\\t\\tsubsubdir2\\n\\t\\t\\tfile2.ext\". Note that the '\\n' and '\\t' are the new-line and tab characters.\n        Every file and directory has a unique absolute path in the file system, which is the order of directories that must be opened to reach the file/directory itself, all concatenated by '/'s. Using the above example, the absolute path to file2.ext is \"dir/subdir2/subsubdir2/file2.ext\". Each directory name consists of letters, digits, and/or spaces. Each file name is of the form name.extension, where name and extension consist of letters, digits, and/or spaces.\n        Given a string input representing the file system in the explained format, return the length of the longest absolute path to a file in the abstracted file system. If there is no file in the system, return 0.\n        Note that the testcases are generated such that the file system is valid and no file or directory name has length 0.\n        Example 1:\n        Input: input = \"dir\\n\\tsubdir1\\n\\tsubdir2\\n\\t\\tfile.ext\"\n        Output: 20\n        Explanation: We have only one file, and the absolute path is \"dir/subdir2/file.ext\" of length 20.\n        Example 2:\n        Input: input = \"dir\\n\\tsubdir1\\n\\t\\tfile1.ext\\n\\t\\tsubsubdir1\\n\\tsubdir2\\n\\t\\tsubsubdir2\\n\\t\\t\\tfile2.ext\"\n        Output: 32\n        Explanation: We have two files:\n        \"dir/subdir1/file1.ext\" of length 21\n        \"dir/subdir2/subsubdir2/file2.ext\" of length 32.\n        We return 32 since it is the longest absolute path to a file.\n        Example 3:\n        Input: input = \"a\"\n        Output: 0\n        Explanation: We do not have any files, just a single directory named \"a\".\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        # split the input into a list of strings\n        # for each string, split it into a list of strings\n        # for each string in the list, split it into a list of strings\n        # for each string in the list, split it into a list of strings\n        # for each string in the list, split it into a list of strings\n        # for each string in the list, split it into a list of strings\n        # for each string in the list, split it into a list of strings\n        # for each string in the list, split it into a list of strings\n        # for each string in the list, split it into a list of strings\n        # for each string in the list, split it into a list of strings\n        # for each string in the list, split it into a list of strings\n        # for each string in the list, split it into a list of strings\n        # for each string in the list, split it into a list of strings\n        # for each string in the list, split it into a list of strings\n        # for each string in the list, split it into a list of strings\n        # for each string in the list, split it into a list of strings\n        # for each string in the list, split it into a list of strings\n        # for each string in the list, split it into a list of strings\n        # for"
    },
    {
        "number": 389,
        "title": "Find the Difference",
        "difficulty": 0,
        "prompt": "class Solution:\n    def findTheDifference(self, s: str, t: str) -> str:\n        \"\"\"\n        You are given two strings s and t.\n        String t is generated by random shuffling string s and then add one more letter at a random position.\n        Return the letter that was added to t.\n        Example 1:\n        Input: s = \"abcd\", t = \"abcde\"\n        Output: \"e\"\n        Explanation: 'e' is the letter that was added.\n        Example 2:\n        Input: s = \"\", t = \"y\"\n        Output: \"y\"\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        # Time: O(n)\n        # Space: O(1)\n        # hash table\n        # hash table:\n        #   1. count the frequency of each character in s\n        #   2. count the frequency of each character in t\n        #   3. if the frequency of a character in t is greater than in s, return the character\n        #   4. if the frequency of a character in t is less than in s, return the character\n        #   5. if the frequency of a character in t is equal to in s, return the character\n        #   6. if the frequency of a character in t is equal to in s, return the character\n        #   7. if the frequency of a character in t is equal to in s, return the character\n        #   8. if the frequency of a character in t is equal to in s, return the character\n        #   9. if the frequency of a character in t is equal to in s, return the character\n        #   10. if the frequency of a character in t is equal to in s, return the character\n        #   11. if the frequency of a character in t is equal to in s, return the character\n        #   12. if the frequency of a character in t is equal to in s, return the character\n        #   13. if the frequency of a character in t"
    },
    {
        "number": 389,
        "title": "Find the Difference",
        "difficulty": 0,
        "prompt": "class Solution:\n    def findTheDifference(self, s: str, t: str) -> str:\n        \"\"\"\n        You are given two strings s and t.\n        String t is generated by random shuffling string s and then add one more letter at a random position.\n        Return the letter that was added to t.\n        Example 1:\n        Input: s = \"abcd\", t = \"abcde\"\n        Output: \"e\"\n        Explanation: 'e' is the letter that was added.\n        Example 2:\n        Input: s = \"\", t = \"y\"\n        Output: \"y\"\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        # Time: O(n)\n        # Space: O(1)\n        # s = list(s)\n        # for i in t:\n        #     if i in s:\n        #         s.remove(i)\n        #     else:\n        #         return i\n        # return s.pop()"
    },
    {
        "number": 390,
        "title": "Elimination Game",
        "difficulty": 1,
        "prompt": "class Solution:\n    def lastRemaining(self, n: int) -> int:\n        \"\"\"\n        You have a list arr of all integers in the range [1, n] sorted in a strictly increasing order. Apply the following algorithm on arr:\n            Starting from left to right, remove the first number and every other number afterward until you reach the end of the list.\n            Repeat the previous step again, but this time from right to left, remove the rightmost number and every other number from the remaining numbers.\n            Keep repeating the steps again, alternating left to right and right to left, until a single number remains.\n        Given the integer n, return the last number that remains in arr.\n        Example 1:\n        Input: n = 9\n        Output: 6\n        Explanation:\n        arr = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n        arr = [2, 4, 6, 8]\n        arr = [2, 6]\n        arr = [6]\n        Example 2:\n        Input: n = 1\n        Output: 1\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        # \u601d\u8def\uff1a\u6bcf\u6b21\u90fd\u4ece\u4e2d\u95f4\u5220\u9664\uff0c\u6bcf\u6b21\u90fd\u4ece\u4e2d\u95f4\u5220\u9664\uff0c\u76f4\u5230\u53ea\u5269\u4e00\u4e2a\u6570\u5b57\n        # \u6bcf\u6b21\u90fd\u4ece\u4e2d\u95f4\u5220\u9664\uff0c\u6bcf\u6b21\u90fd\u4ece\u4e2d\u95f4\u5220\u9664\uff0c\u76f4\u5230\u53ea\u5269\u4e00\u4e2a\u6570\u5b57\n        # \u6bcf\u6b21\u90fd\u4ece\u4e2d\u95f4\u5220\u9664\uff0c\u6bcf\u6b21\u90fd\u4ece\u4e2d\u95f4\u5220\u9664\uff0c\u76f4\u5230\u53ea\u5269\u4e00\u4e2a\u6570\u5b57\n        # \u6bcf\u6b21\u90fd\u4ece\u4e2d\u95f4\u5220\u9664\uff0c\u6bcf\u6b21\u90fd\u4ece\u4e2d\u95f4\u5220\u9664\uff0c\u76f4\u5230\u53ea\u5269\u4e00\u4e2a\u6570\u5b57\n        # \u6bcf\u6b21\u90fd\u4ece\u4e2d\u95f4\u5220\u9664\uff0c\u6bcf\u6b21\u90fd\u4ece\u4e2d\u95f4\u5220\u9664\uff0c\u76f4\u5230\u53ea\ufffd"
    },
    {
        "number": 390,
        "title": "Elimination Game",
        "difficulty": 1,
        "prompt": "class Solution:\n    def lastRemaining(self, n: int) -> int:\n        \"\"\"\n        You have a list arr of all integers in the range [1, n] sorted in a strictly increasing order. Apply the following algorithm on arr:\n            Starting from left to right, remove the first number and every other number afterward until you reach the end of the list.\n            Repeat the previous step again, but this time from right to left, remove the rightmost number and every other number from the remaining numbers.\n            Keep repeating the steps again, alternating left to right and right to left, until a single number remains.\n        Given the integer n, return the last number that remains in arr.\n        Example 1:\n        Input: n = 9\n        Output: 6\n        Explanation:\n        arr = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n        arr = [2, 4, 6, 8]\n        arr = [2, 6]\n        arr = [6]\n        Example 2:\n        Input: n = 1\n        Output: 1\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        # \u601d\u8def\uff1a\n        # \u5148\u627e\u5230\u7b2c\u4e00\u4e2a\u4e0d\u662f2\u7684\u6570\u5b57\uff0c\u7136\u540e\u628a\u8fd9\u4e2a\u6570\u5b57\u4ece\u6570\u7ec4\u4e2d\u5220\u9664\uff0c\u7136\u540e\u628a\u8fd9\u4e2a\u6570\u5b57\u4ece\u6570\u7ec4\u4e2d\u5220\u9664\uff0c\u7136\u540e\u628a\u8fd9\u4e2a\u6570\u5b57\u4ece\u6570\u7ec4\u4e2d\u5220\u9664\uff0c\n        # \u76f4\u5230\u6570\u7ec4\u4e2d\u53ea\u5269\u4e0b\u4e00\u4e2a\u6570\u5b57\uff0c\u8fd9\u4e2a\u6570\u5b57\u5c31\u662f\u7b54\u6848\n        # \u5982\u679c\u6570\u7ec4\u957f\u5ea6\u4e3a1\uff0c\u8fd4\u56de\u8fd9\u4e2a\u6570\u5b57\n        # \u5982\u679c\u6570\u7ec4\u957f\u5ea6\u4e3a2\uff0c\u8fd4\u56de\u8fd9\u4e2a\u6570\u5b57\n        # \u5982\u679c\u6570\u7ec4\u957f\u5ea6\u5927\u4e8e2\uff0c\u5219\u627e\u5230\u7b2c\u4e00\u4e2a\u4e0d\u662f2\u7684\u6570\u5b57\uff0c"
    },
    {
        "number": 391,
        "title": "Perfect Rectangle",
        "difficulty": 2,
        "prompt": "class Solution:\n    def isRectangleCover(self, rectangles: List[List[int]]) -> bool:\n        \"\"\"\n        Given an array rectangles where rectangles[i] = [xi, yi, ai, bi] represents an axis-aligned rectangle. The bottom-left point of the rectangle is (xi, yi) and the top-right point of it is (ai, bi).\n        Return true if all the rectangles together form an exact cover of a rectangular region.\n        Example 1:\n        Input: rectangles = [[1,1,3,3],[3,1,4,2],[3,2,4,4],[1,3,2,4],[2,3,3,4]]\n        Output: true\n        Explanation: All 5 rectangles together form an exact cover of a rectangular region.\n        Example 2:\n        Input: rectangles = [[1,1,2,3],[1,3,2,4],[3,1,4,2],[3,2,4,4]]\n        Output: false\n        Explanation: Because there is a gap between the two rectangular regions.\n        Example 3:\n        Input: rectangles = [[1,1,3,3],[3,1,4,2],[1,3,2,4],[2,2,4,4]]\n        Output: false\n        Explanation: Because two of the rectangles overlap with each other.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        # get the bounding box\n        x_min, y_min, x_max, y_max = float('inf'), float('inf'), float('-inf'), float('-inf')\n        for x1, y1, x2, y2 in rectangles:\n            x_min = min(x_min, x1)\n            y_min = min(y_min, y1)\n            x_max = max(x_max, x2)\n            y_max = max(y_max, y2)\n        # check if all the points are in the bounding box\n        points = set()\n        for x1, y1, x2, y2 in rectangles:\n            points.add((x1, y1))\n            points.add((x2, y2))\n            points.add((x1, y2))\n            points.add((x2, y1))\n        if (x_min, y_min) not in points or (x_max, y_max) not in points:\n            return False\n        # check if all the edges are in the bounding box\n        edges = set()\n        for x1, y1, x2, y2 in rectangles:\n            edges.add((x1, y1, x2, y1))\n            "
    },
    {
        "number": 391,
        "title": "Perfect Rectangle",
        "difficulty": 2,
        "prompt": "class Solution:\n    def isRectangleCover(self, rectangles: List[List[int]]) -> bool:\n        \"\"\"\n        Given an array rectangles where rectangles[i] = [xi, yi, ai, bi] represents an axis-aligned rectangle. The bottom-left point of the rectangle is (xi, yi) and the top-right point of it is (ai, bi).\n        Return true if all the rectangles together form an exact cover of a rectangular region.\n        Example 1:\n        Input: rectangles = [[1,1,3,3],[3,1,4,2],[3,2,4,4],[1,3,2,4],[2,3,3,4]]\n        Output: true\n        Explanation: All 5 rectangles together form an exact cover of a rectangular region.\n        Example 2:\n        Input: rectangles = [[1,1,2,3],[1,3,2,4],[3,1,4,2],[3,2,4,4]]\n        Output: false\n        Explanation: Because there is a gap between the two rectangular regions.\n        Example 3:\n        Input: rectangles = [[1,1,3,3],[3,1,4,2],[1,3,2,4],[2,2,4,4]]\n        Output: false\n        Explanation: Because two of the rectangles overlap with each other.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        # 1. sort by x\n        # 2. check if the first and last x are same\n        # 3. check if the first and last y are same\n        # 4. check if the area is same\n        # 5. check if the rectangle is in the same order\n        # 6. check if the rectangle is in the same area\n        # 7. check if the rectangle is in the same shape\n        # 8. check if the rectangle is in the same length\n        # 9. check if the rectangle is in the same width\n        # 10. check if the rectangle is in the same height\n        # 11. check if the rectangle is in the same area\n        # 12. check if the rectangle is in the same shape\n        # 13. check if the rectangle is in the same length\n        # 14. check if the rectangle is in the same width\n        # 15. check if the rectangle is in the same height\n        # 16. check if the rectangle is in the same area\n        # 17. check if the rectangle is in the same shape\n        # 18. check if the rectangle is in the same length\n        # 19. check if the rectangle is in the same width\n        # 20. check if the rectangle is in the same height\n        # 21. check if the rectangle is in the same area\n        # 22. check if the rectangle is in the same shape\n        "
    },
    {
        "number": 392,
        "title": "Is Subsequence",
        "difficulty": 0,
        "prompt": "class Solution:\n    def isSubsequence(self, s: str, t: str) -> bool:\n        \"\"\"\n        Given two strings s and t, return true if s is a subsequence of t, or false otherwise.\n        A subsequence of a string is a new string that is formed from the original string by deleting some (can be none) of the characters without disturbing the relative positions of the remaining characters. (i.e., \"ace\" is a subsequence of \"abcde\" while \"aec\" is not).\n        Example 1:\n        Input: s = \"abc\", t = \"ahbgdc\"\n        Output: true\n        Example 2:\n        Input: s = \"axc\", t = \"ahbgdc\"\n        Output: false\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        if len(s) == 0:\n            return True\n        if len(t) == 0:\n            return False\n        i, j = 0, 0\n        while i < len(s) and j < len(t):\n            if s[i] == t[j]:\n                i += 1\n            j += 1\n        return i == len(s)"
    },
    {
        "number": 392,
        "title": "Is Subsequence",
        "difficulty": 0,
        "prompt": "class Solution:\n    def isSubsequence(self, s: str, t: str) -> bool:\n        \"\"\"\n        Given two strings s and t, return true if s is a subsequence of t, or false otherwise.\n        A subsequence of a string is a new string that is formed from the original string by deleting some (can be none) of the characters without disturbing the relative positions of the remaining characters. (i.e., \"ace\" is a subsequence of \"abcde\" while \"aec\" is not).\n        Example 1:\n        Input: s = \"abc\", t = \"ahbgdc\"\n        Output: true\n        Example 2:\n        Input: s = \"axc\", t = \"ahbgdc\"\n        Output: false\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        if len(s) == 0:\n            return True\n        if len(t) == 0:\n            return False\n        i = 0\n        j = 0\n        while i < len(s) and j < len(t):\n            if s[i] == t[j]:\n                i += 1\n            j += 1\n        return i == len(s)"
    },
    {
        "number": 393,
        "title": "UTF-8 Validation",
        "difficulty": 1,
        "prompt": "class Solution:\n    def validUtf8(self, data: List[int]) -> bool:\n        \"\"\"\n        Given an integer array data representing the data, return whether it is a valid UTF-8 encoding (i.e. it translates to a sequence of valid UTF-8 encoded characters).\n        A character in UTF8 can be from 1 to 4 bytes long, subjected to the following rules:\n            For a 1-byte character, the first bit is a 0, followed by its Unicode code.\n            For an n-bytes character, the first n bits are all one's, the n + 1 bit is 0, followed by n - 1 bytes with the most significant 2 bits being 10.\n        This is how the UTF-8 encoding would work:\n             Number of Bytes   |        UTF-8 Octet Sequence\n                               |              (binary)\n           --------------------+-----------------------------------------\n                    1          |   0xxxxxxx\n                    2          |   110xxxxx 10xxxxxx\n                    3          |   1110xxxx 10xxxxxx 10xxxxxx\n                    4          |   11110xxx 10xxxxxx 10xxxxxx 10xxxxxx\n        x denotes a bit in the binary form of a byte that may be either 0 or 1.\n        Note: The input is an array of integers. Only the least significant 8 bits of each integer is used to store the data. This means each integer represents only 1 byte of data.\n        Example 1:\n        Input: data = [197,130,1]\n        Output: true\n        Explanation: data represents the octet sequence: 11000101 10000010 00000001.\n        It is a valid utf-8 encoding for a 2-bytes character followed by a 1-byte character.\n        Example 2:\n        Input: data = [235,140,4]\n        Output: false\n        Explanation: data represented the octet sequence: 11101011 10001100 00000100.\n        The first 3 bits are all one's and the 4th bit is 0 means it is a 3-bytes character.\n        The next byte is a continuation byte which starts with 10 and that's correct.\n        But the second continuation byte does not start with 10, so it is invalid.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        # Time  complexity: O(n)\n        # Space complexity: O(1)\n        # n = len(data)\n        # if n == 0:\n        #     return True\n        # for i in range(n):\n        #     if i + 1 < n:\n        #         if data[i] >> 6!= 0b10:\n        #             return False\n        #     if i + 2 < n:\n        #         if data[i] >> 4 == 0b11110 and data[i + 1] >> 6 == 0b10 and data[i + 2] >> 6 == 0b10:\n        #             return False\n        #     if i + 3 < n:\n        #         if data[i] >> 3 == 0b11110 and data[i + 1] >> 6 == 0b10 and data[i + 2] >> 6 == 0b10 and data[i + 3] >> 6 == 0b10:\n        #             return False\n        # return True"
    },
    {
        "number": 393,
        "title": "UTF-8 Validation",
        "difficulty": 1,
        "prompt": "class Solution:\n    def validUtf8(self, data: List[int]) -> bool:\n        \"\"\"\n        Given an integer array data representing the data, return whether it is a valid UTF-8 encoding (i.e. it translates to a sequence of valid UTF-8 encoded characters).\n        A character in UTF8 can be from 1 to 4 bytes long, subjected to the following rules:\n            For a 1-byte character, the first bit is a 0, followed by its Unicode code.\n            For an n-bytes character, the first n bits are all one's, the n + 1 bit is 0, followed by n - 1 bytes with the most significant 2 bits being 10.\n        This is how the UTF-8 encoding would work:\n             Number of Bytes   |        UTF-8 Octet Sequence\n                               |              (binary)\n           --------------------+-----------------------------------------\n                    1          |   0xxxxxxx\n                    2          |   110xxxxx 10xxxxxx\n                    3          |   1110xxxx 10xxxxxx 10xxxxxx\n                    4          |   11110xxx 10xxxxxx 10xxxxxx 10xxxxxx\n        x denotes a bit in the binary form of a byte that may be either 0 or 1.\n        Note: The input is an array of integers. Only the least significant 8 bits of each integer is used to store the data. This means each integer represents only 1 byte of data.\n        Example 1:\n        Input: data = [197,130,1]\n        Output: true\n        Explanation: data represents the octet sequence: 11000101 10000010 00000001.\n        It is a valid utf-8 encoding for a 2-bytes character followed by a 1-byte character.\n        Example 2:\n        Input: data = [235,140,4]\n        Output: false\n        Explanation: data represented the octet sequence: 11101011 10001100 00000100.\n        The first 3 bits are all one's and the 4th bit is 0 means it is a 3-bytes character.\n        The next byte is a continuation byte which starts with 10 and that's correct.\n        But the second continuation byte does not start with 10, so it is invalid.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        # Time  complexity: O(N)\n        # Space complexity: O(1)\n        # N = len(data)\n        # if N == 0:\n        #     return True\n        #\n        # count = 0\n        # for num in data:\n        #     for i in range(7, -1, -1):\n        #         if num & (1 << i):\n        #             count += 1\n        #             if count == 3:\n        #                 return False\n        #         else:\n        #             count = 0\n        # return count == 0"
    },
    {
        "number": 394,
        "title": "Decode String",
        "difficulty": 1,
        "prompt": "class Solution:\n    def decodeString(self, s: str) -> str:\n        \"\"\"\n        Given an encoded string, return its decoded string.\n        The encoding rule is: k[encoded_string], where the encoded_string inside the square brackets is being repeated exactly k times. Note that k is guaranteed to be a positive integer.\n        You may assume that the input string is always valid; there are no extra white spaces, square brackets are well-formed, etc. Furthermore, you may assume that the original data does not contain any digits and that digits are only for those repeat numbers, k. For example, there will not be input like 3a or 2[4].\n        The test cases are generated so that the length of the output will never exceed 105.\n        Example 1:\n        Input: s = \"3[a]2[bc]\"\n        Output: \"aaabcbc\"\n        Example 2:\n        Input: s = \"3[a2[c]]\"\n        Output: \"accaccacc\"\n        Example 3:\n        Input: s = \"2[abc]3[cd]ef\"\n        Output: \"abcabccdcdcdef\"\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        stack = []\n        for c in s:\n            if c == ']':\n                sub_str = ''\n                while stack[-1]!= '[':\n                    sub_str = stack.pop() + sub_str\n                stack.pop()  # pop '['\n                num = ''\n                while stack and stack[-1].isdigit():\n                    num = stack.pop() + num\n                stack.append(int(num) * sub_str)\n            else:\n                stack.append(c)\n        return ''.join(stack)"
    },
    {
        "number": 394,
        "title": "Decode String",
        "difficulty": 1,
        "prompt": "class Solution:\n    def decodeString(self, s: str) -> str:\n        \"\"\"\n        Given an encoded string, return its decoded string.\n        The encoding rule is: k[encoded_string], where the encoded_string inside the square brackets is being repeated exactly k times. Note that k is guaranteed to be a positive integer.\n        You may assume that the input string is always valid; there are no extra white spaces, square brackets are well-formed, etc. Furthermore, you may assume that the original data does not contain any digits and that digits are only for those repeat numbers, k. For example, there will not be input like 3a or 2[4].\n        The test cases are generated so that the length of the output will never exceed 105.\n        Example 1:\n        Input: s = \"3[a]2[bc]\"\n        Output: \"aaabcbc\"\n        Example 2:\n        Input: s = \"3[a2[c]]\"\n        Output: \"accaccacc\"\n        Example 3:\n        Input: s = \"2[abc]3[cd]ef\"\n        Output: \"abcabccdcdcdef\"\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        stack = []\n        for c in s:\n            if c == ']':\n                sub_str = ''\n                while stack[-1]!= '[':\n                    sub_str = stack.pop() + sub_str\n                stack.pop()  # pop '['\n                times = ''\n                while stack and stack[-1].isdigit():\n                    times = stack.pop() + times\n                times = int(times)\n                stack.append(sub_str * times)\n            else:\n                stack.append(c)\n        return ''.join(stack)"
    },
    {
        "number": 395,
        "title": "Longest Substring with At Least K Repeating Characters",
        "difficulty": 1,
        "prompt": "class Solution:\n    def longestSubstring(self, s: str, k: int) -> int:\n        \"\"\"\n        Given a string s and an integer k, return the length of the longest substring of s such that the frequency of each character in this substring is greater than or equal to k.\n        Example 1:\n        Input: s = \"aaabb\", k = 3\n        Output: 3\n        Explanation: The longest substring is \"aaa\", as 'a' is repeated 3 times.\n        Example 2:\n        Input: s = \"ababbc\", k = 2\n        Output: 5\n        Explanation: The longest substring is \"ababb\", as 'a' is repeated 2 times and 'b' is repeated 3 times.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        if len(s) < k:\n            return 0\n        for c in set(s):\n            if s.count(c) < k:\n                return max(self.longestSubstring(t, k) for t in s.split(c))\n        return len(s)"
    },
    {
        "number": 395,
        "title": "Longest Substring with At Least K Repeating Characters",
        "difficulty": 1,
        "prompt": "class Solution:\n    def longestSubstring(self, s: str, k: int) -> int:\n        \"\"\"\n        Given a string s and an integer k, return the length of the longest substring of s such that the frequency of each character in this substring is greater than or equal to k.\n        Example 1:\n        Input: s = \"aaabb\", k = 3\n        Output: 3\n        Explanation: The longest substring is \"aaa\", as 'a' is repeated 3 times.\n        Example 2:\n        Input: s = \"ababbc\", k = 2\n        Output: 5\n        Explanation: The longest substring is \"ababb\", as 'a' is repeated 2 times and 'b' is repeated 3 times.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        if len(s) < k:\n            return 0\n        for c in set(s):\n            if s.count(c) < k:\n                return max(self.longestSubstring(t, k) for t in s.split(c))\n        return len(s)"
    },
    {
        "number": 396,
        "title": "Rotate Function",
        "difficulty": 1,
        "prompt": "class Solution:\n    def maxRotateFunction(self, nums: List[int]) -> int:\n        \"\"\"\n        You are given an integer array nums of length n.\n        Assume arrk to be an array obtained by rotating nums by k positions clock-wise. We define the rotation function F on nums as follow:\n            F(k) = 0 * arrk[0] + 1 * arrk[1] +... + (n - 1) * arrk[n - 1].\n        Return the maximum value of F(0), F(1),..., F(n-1).\n        The test cases are generated so that the answer fits in a 32-bit integer.\n        Example 1:\n        Input: nums = [4,3,2,6]\n        Output: 26\n        Explanation:\n        F(0) = (0 * 4) + (1 * 3) + (2 * 2) + (3 * 6) = 0 + 3 + 4 + 18 = 25\n        F(1) = (0 * 6) + (1 * 4) + (2 * 3) + (3 * 2) = 0 + 4 + 6 + 6 = 16\n        F(2) = (0 * 2) + (1 * 6) + (2 * 4) + (3 * 3) = 0 + 6 + 8 + 9 = 23\n        F(3) = (0 * 3) + (1 * 2) + (2 * 6) + (3 * 4) = 0 + 2 + 12 + 12 = 26\n        So the maximum value of F(0), F(1), F(2), F(3) is F(3) = 26.\n        Example 2:\n        Input: nums = [100]\n        Output: 0\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        n = len(nums)\n        s = sum(nums)\n        res = 0\n        for i in range(n):\n            res += i * nums[i]\n        cur = res\n        for i in range(n):\n            cur += s - n * nums[i]\n            res = max(res, cur)\n        return res"
    },
    {
        "number": 396,
        "title": "Rotate Function",
        "difficulty": 1,
        "prompt": "class Solution:\n    def maxRotateFunction(self, nums: List[int]) -> int:\n        \"\"\"\n        You are given an integer array nums of length n.\n        Assume arrk to be an array obtained by rotating nums by k positions clock-wise. We define the rotation function F on nums as follow:\n            F(k) = 0 * arrk[0] + 1 * arrk[1] +... + (n - 1) * arrk[n - 1].\n        Return the maximum value of F(0), F(1),..., F(n-1).\n        The test cases are generated so that the answer fits in a 32-bit integer.\n        Example 1:\n        Input: nums = [4,3,2,6]\n        Output: 26\n        Explanation:\n        F(0) = (0 * 4) + (1 * 3) + (2 * 2) + (3 * 6) = 0 + 3 + 4 + 18 = 25\n        F(1) = (0 * 6) + (1 * 4) + (2 * 3) + (3 * 2) = 0 + 4 + 6 + 6 = 16\n        F(2) = (0 * 2) + (1 * 6) + (2 * 4) + (3 * 3) = 0 + 6 + 8 + 9 = 23\n        F(3) = (0 * 3) + (1 * 2) + (2 * 6) + (3 * 4) = 0 + 2 + 12 + 12 = 26\n        So the maximum value of F(0), F(1), F(2), F(3) is F(3) = 26.\n        Example 2:\n        Input: nums = [100]\n        Output: 0\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        # \u8fd9\u9898\u6709\u70b9\u96be\uff0c\u5176\u5b9e\u5c31\u662f\u6c42\u6700\u5927\u503c\uff0c\u53ea\u8981\u6c42\u6700\u5c0f\u503c\uff0c\u5c31\u662f\u6c42\u6700\u5c0f\u503c\u7684\u65cb\u8f6c\u51fd\u6570\uff0c\u90a3\u4e48\u5c31\u662f\u6c42\u6700\u5927\u503c\u7684\u65cb\u8f6c\u51fd\u6570\uff0c\n        # \u56e0\u4e3a\u6700\u5927\u503c\u7684\u65cb\u8f6c\u51fd\u6570\u662f\u6700\u5c0f\u503c\u7684\u65cb\u8f6c\u51fd\u6570\u7684\u52a0\u548c\uff0c\u6240\u4ee5\u53ea\u8981\u6c42\u6700\u5c0f\u503c\u7684\u65cb\u8f6c\u51fd\u6570\uff0c\u5c31\u662f\u6c42\u6700\u5927\u503c\u7684\u65cb\u8f6c\u51fd\u6570\u7684\u51cf\u6cd5\n        # \u56e0\u4e3a\u6700\u5927\u503c\u7684\u65cb\u8f6c\u51fd\u6570\u662f\u6700\u5c0f\u503c\u7684\u65cb\u8f6c\u51fd\u6570\u7684\u52a0\u548c\uff0c\u6240\u4ee5\u53ea\u8981\u6c42\u6700\u5c0f\u503c\u7684\u65cb\u8f6c\u51fd\u6570\ufffd"
    },
    {
        "number": 397,
        "title": "Integer Replacement",
        "difficulty": 1,
        "prompt": "class Solution:\n    def integerReplacement(self, n: int) -> int:\n        \"\"\"\n        Given a positive integer n, you can apply one of the following operations:\n            If n is even, replace n with n / 2.\n            If n is odd, replace n with either n + 1 or n - 1.\n        Return the minimum number of operations needed for n to become 1.\n        Example 1:\n        Input: n = 8\n        Output: 3\n        Explanation: 8 -> 4 -> 2 -> 1\n        Example 2:\n        Input: n = 7\n        Output: 4\n        Explanation: 7 -> 8 -> 4 -> 2 -> 1\n        or 7 -> 6 -> 3 -> 2 -> 1\n        Example 3:\n        Input: n = 4\n        Output: 2\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        if n == 1:\n            return 0\n        if n % 2 == 0:\n            return self.integerReplacement(n // 2) + 1\n        else:\n            return min(self.integerReplacement(n + 1), self.integerReplacement(n - 1)) + 1"
    },
    {
        "number": 397,
        "title": "Integer Replacement",
        "difficulty": 1,
        "prompt": "class Solution:\n    def integerReplacement(self, n: int) -> int:\n        \"\"\"\n        Given a positive integer n, you can apply one of the following operations:\n            If n is even, replace n with n / 2.\n            If n is odd, replace n with either n + 1 or n - 1.\n        Return the minimum number of operations needed for n to become 1.\n        Example 1:\n        Input: n = 8\n        Output: 3\n        Explanation: 8 -> 4 -> 2 -> 1\n        Example 2:\n        Input: n = 7\n        Output: 4\n        Explanation: 7 -> 8 -> 4 -> 2 -> 1\n        or 7 -> 6 -> 3 -> 2 -> 1\n        Example 3:\n        Input: n = 4\n        Output: 2\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        if n == 1:\n            return 0\n        if n % 2 == 0:\n            return self.integerReplacement(n // 2) + 1\n        else:\n            return min(self.integerReplacement(n + 1), self.integerReplacement(n - 1)) + 1"
    },
    {
        "number": 398,
        "title": "Random Pick Index",
        "difficulty": 1,
        "prompt": "class Solution:\n    def __init__(self, nums: List[int]):\n    def pick(self, target: int) -> int:\n        \"\"\"\n        Given an integer array nums with possible duplicates, randomly output the index of a given target number. You can assume that the given target number must exist in the array.\n        Implement the Solution class:\n            Solution(int[] nums) Initializes the object with the array nums.\n            int pick(int target) Picks a random index i from nums where nums[i] == target. If there are multiple valid i's, then each index should have an equal probability of returning.\n        Example 1:\n        Input\n        [\"Solution\", \"pick\", \"pick\", \"pick\"]\n        [[[1, 2, 3, 3, 3]], [3], [1], [3]]\n        Output\n        [null, 4, 0, 2]\n        Explanation\n        Solution solution = new Solution([1, 2, 3, 3, 3]);\n        solution.pick(3); // It should return either index 2, 3, or 4 randomly. Each index should have equal probability of returning.\n        solution.pick(1); // It should return 0. Since in the array only nums[0] is equal to 1.\n        solution.pick(3); // It should return either index 2, 3, or 4 randomly. Each index should have equal probability of returning.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        \n        \n        # Your Solution object will be instantiated and called as such:\n        # obj = Solution(nums)\n        # param_1 = obj.pick(target)\n        \n        \n        \n        # nums.sort()\n        # res = []\n        # for i in range(len(nums)):\n        #     if nums[i] == target:\n        #         res.append(i)\n        # return random.choice(res)\n        \n        \n        # nums.sort()\n        # res = []\n        # for i in range(len(nums)):\n        #     if nums[i] == target:\n        #         res.append(i)\n        # return random.choice(res)\n        \n        \n        # nums.sort()\n        # res = []\n        # for i in range(len(nums)):\n        #     if nums[i] == target:\n        #         res.append(i)\n        # return random.choice(res)\n        \n        \n        # nums.sort()\n        # res = []\n        # for i in range(len(nums)):\n        #     if nums[i] == target:\n        #         res.append(i)\n        # return random.choice"
    },
    {
        "number": 398,
        "title": "Random Pick Index",
        "difficulty": 1,
        "prompt": "class Solution:\n    def __init__(self, nums: List[int]):\n    def pick(self, target: int) -> int:\n        \"\"\"\n        Given an integer array nums with possible duplicates, randomly output the index of a given target number. You can assume that the given target number must exist in the array.\n        Implement the Solution class:\n            Solution(int[] nums) Initializes the object with the array nums.\n            int pick(int target) Picks a random index i from nums where nums[i] == target. If there are multiple valid i's, then each index should have an equal probability of returning.\n        Example 1:\n        Input\n        [\"Solution\", \"pick\", \"pick\", \"pick\"]\n        [[[1, 2, 3, 3, 3]], [3], [1], [3]]\n        Output\n        [null, 4, 0, 2]\n        Explanation\n        Solution solution = new Solution([1, 2, 3, 3, 3]);\n        solution.pick(3); // It should return either index 2, 3, or 4 randomly. Each index should have equal probability of returning.\n        solution.pick(1); // It should return 0. Since in the array only nums[0] is equal to 1.\n        solution.pick(3); // It should return either index 2, 3, or 4 randomly. Each index should have equal probability of returning.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        \n        # Solution 1:\n        # O(n)\n        # O(n)\n        # self.nums = nums\n        # self.target = target\n        # self.count = 0\n        # for i in range(len(nums)):\n        #     if nums[i] == target:\n        #         self.count += 1\n        # return random.randint(0, self.count - 1)\n        \n        # Solution 2:\n        # O(n)\n        # O(1)\n        # self.nums = nums\n        # self.target = target\n        # self.count = 0\n        # for i in range(len(nums)):\n        #     if nums[i] == target:\n        #         self.count += 1\n        # return random.randint(0, self.count - 1)\n        \n        # Solution 3:\n        # O(n)\n        # O(n)\n        # self.nums = nums\n        # self.target = target\n        # self.count = 0\n        # for i in range(len(nums)):\n        #     if nums[i] == target:\n        #         self.count += 1\n        # return i\n        \n        # Solution 4:\n        "
    },
    {
        "number": 399,
        "title": "Evaluate Division",
        "difficulty": 1,
        "prompt": "class Solution:\n    def calcEquation(self, equations: List[List[str]], values: List[float], queries: List[List[str]]) -> List[float]:\n        \"\"\"\n        You are given an array of variable pairs equations and an array of real numbers values, where equations[i] = [Ai, Bi] and values[i] represent the equation Ai / Bi = values[i]. Each Ai or Bi is a string that represents a single variable.\n        You are also given some queries, where queries[j] = [Cj, Dj] represents the jth query where you must find the answer for Cj / Dj =?.\n        Return the answers to all queries. If a single answer cannot be determined, return -1.0.\n        Note: The input is always valid. You may assume that evaluating the queries will not result in division by zero and that there is no contradiction.\n        Example 1:\n        Input: equations = [[\"a\",\"b\"],[\"b\",\"c\"]], values = [2.0,3.0], queries = [[\"a\",\"c\"],[\"b\",\"a\"],[\"a\",\"e\"],[\"a\",\"a\"],[\"x\",\"x\"]]\n        Output: [6.00000,0.50000,-1.00000,1.00000,-1.00000]\n        Explanation: \n        Given: a / b = 2.0, b / c = 3.0\n        queries are: a / c =?, b / a =?, a / e =?, a / a =?, x / x =?\n        return: [6.0, 0.5, -1.0, 1.0, -1.0 ]\n        Example 2:\n        Input: equations = [[\"a\",\"b\"],[\"b\",\"c\"],[\"bc\",\"cd\"]], values = [1.5,2.5,5.0], queries = [[\"a\",\"c\"],[\"c\",\"b\"],[\"bc\",\"cd\"],[\"cd\",\"bc\"]]\n        Output: [3.75000,0.40000,5.00000,0.20000]\n        Example 3:\n        Input: equations = [[\"a\",\"b\"]], values = [0.5], queries = [[\"a\",\"b\"],[\"b\",\"a\"],[\"a\",\"c\"],[\"x\",\"y\"]]\n        Output: [0.50000,2.00000,-1.00000,-1.00000]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        # build graph\n        graph = collections.defaultdict(dict)\n        for (x, y), v in zip(equations, values):\n            graph[x][y] = v\n            graph[y][x] = 1 / v"
    },
    {
        "number": 399,
        "title": "Evaluate Division",
        "difficulty": 1,
        "prompt": "class Solution:\n    def calcEquation(self, equations: List[List[str]], values: List[float], queries: List[List[str]]) -> List[float]:\n        \"\"\"\n        You are given an array of variable pairs equations and an array of real numbers values, where equations[i] = [Ai, Bi] and values[i] represent the equation Ai / Bi = values[i]. Each Ai or Bi is a string that represents a single variable.\n        You are also given some queries, where queries[j] = [Cj, Dj] represents the jth query where you must find the answer for Cj / Dj =?.\n        Return the answers to all queries. If a single answer cannot be determined, return -1.0.\n        Note: The input is always valid. You may assume that evaluating the queries will not result in division by zero and that there is no contradiction.\n        Example 1:\n        Input: equations = [[\"a\",\"b\"],[\"b\",\"c\"]], values = [2.0,3.0], queries = [[\"a\",\"c\"],[\"b\",\"a\"],[\"a\",\"e\"],[\"a\",\"a\"],[\"x\",\"x\"]]\n        Output: [6.00000,0.50000,-1.00000,1.00000,-1.00000]\n        Explanation: \n        Given: a / b = 2.0, b / c = 3.0\n        queries are: a / c =?, b / a =?, a / e =?, a / a =?, x / x =?\n        return: [6.0, 0.5, -1.0, 1.0, -1.0 ]\n        Example 2:\n        Input: equations = [[\"a\",\"b\"],[\"b\",\"c\"],[\"bc\",\"cd\"]], values = [1.5,2.5,5.0], queries = [[\"a\",\"c\"],[\"c\",\"b\"],[\"bc\",\"cd\"],[\"cd\",\"bc\"]]\n        Output: [3.75000,0.40000,5.00000,0.20000]\n        Example 3:\n        Input: equations = [[\"a\",\"b\"]], values = [0.5], queries = [[\"a\",\"b\"],[\"b\",\"a\"],[\"a\",\"c\"],[\"x\",\"y\"]]\n        Output: [0.50000,2.00000,-1.00000,-1.00000]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        # build graph\n        graph = collections.defaultdict(dict)\n        for (x, y), v in zip(equations, values):\n            graph[x][y] = v\n            graph[y][x] = 1 / v\n        \n        # BFS\n        def bfs(start, end):\n            if start not in graph or end not in graph:\n                return -1.0\n            \n            q = collections.deque([(start, 1.0)])\n            visited = set()\n            while q:\n                node, val = q.popleft()\n                if node == end:\n                    return val\n                visited.add(node)\n                for nxt in graph[node]:\n                    if nxt not in visited:\n                        q.append((nxt, val * graph[node][nxt]))\n            return -1.0\n        \n        return [bfs(start, end) for start, end in queries]\n    \n    def calcEquation2(self, equations: List[List[str]], values: List[float], queries: List[List[str]]) -> List[float]:\n        \"\"\"\n        You are given an array equations, where equations[i] = [Ai, Bi] and values[i] is the cost of the ith equation, and an"
    },
    {
        "number": 400,
        "title": "Nth Digit",
        "difficulty": 1,
        "prompt": "class Solution:\n    def findNthDigit(self, n: int) -> int:\n        \"\"\"\n        Given an integer n, return the nth digit of the infinite integer sequence [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11,...].\n        Example 1:\n        Input: n = 3\n        Output: 3\n        Example 2:\n        Input: n = 11\n        Output: 0\n        Explanation: The 11th digit of the sequence 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11,... is a 0, which is part of the number 10.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        # \u627e\u5230\u7b2cn\u4e2a\u6570\u5b57\u7684\u4f4d\u7f6e\n        # \u5148\u627e\u5230\u6570\u5b57\u7684\u4f4d\u6570\n        # \u627e\u5230\u7b2cn\u4e2a\u6570\u5b57\n        # \u627e\u5230\u7b2cn\u4e2a\u6570\u5b57\u7684\u4f4d\u7f6e\n        # \u627e\u5230\u7b2cn\u4e2a\u6570\u5b57\u7684\u4f4d\u7f6e\n        # \u627e\u5230\u7b2cn\u4e2a\u6570\u5b57\u7684\u4f4d\u7f6e\n        # \u627e\u5230\u7b2cn\u4e2a\u6570\u5b57\u7684\u4f4d\u7f6e\n        # \u627e\u5230\u7b2cn\u4e2a\u6570\u5b57\u7684\u4f4d\u7f6e\n        # \u627e\u5230\u7b2cn\u4e2a\u6570\u5b57\u7684\u4f4d\u7f6e\n        # \u627e\u5230\u7b2cn\u4e2a\u6570\u5b57\u7684\u4f4d\u7f6e\n        # \u627e\u5230\u7b2cn\u4e2a\u6570\u5b57\u7684\u4f4d\u7f6e\n        # \u627e\u5230\u7b2cn\u4e2a\u6570\u5b57\u7684\u4f4d\u7f6e\n        # \u627e\u5230\u7b2cn\u4e2a\u6570\u5b57\u7684\u4f4d\u7f6e"
    },
    {
        "number": 400,
        "title": "Nth Digit",
        "difficulty": 1,
        "prompt": "class Solution:\n    def findNthDigit(self, n: int) -> int:\n        \"\"\"\n        Given an integer n, return the nth digit of the infinite integer sequence [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11,...].\n        Example 1:\n        Input: n = 3\n        Output: 3\n        Example 2:\n        Input: n = 11\n        Output: 0\n        Explanation: The 11th digit of the sequence 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11,... is a 0, which is part of the number 10.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        # \u601d\u8def\uff1a\n        # 1. \u7528\u7d22\u5f15\u548c\u6570\u5b57\u6784\u9020\u4e00\u4e2a\u6570\u7ec4\uff0c\u7136\u540e\u4ece\u540e\u5f80\u524d\u904d\u5386\uff0c\u6bcf\u6b21\u904d\u5386\u5230\u7b2cn\u4e2a\u6570\u5b57\uff0c\u5c31\u662f\u7b2cn\u4e2a\u6570\u5b57\n        # 2. \u5982\u679c\u662f\u7b2c\u4e00\u4e2a\u6570\u5b57\uff0c\u90a3\u4e48\u5c31\u662f1\n        # 3. \u5982\u679c\u662f\u6700\u540e\u4e00\u4e2a\u6570\u5b57\uff0c\u90a3\u4e48\u5c31\u662f9\n        # 4. \u5982\u679c\u662f\u4e2d\u95f4\u7684\u6570\u5b57\uff0c\u90a3\u4e48\u5c31\u662f(n-1)%9+1\n        # 5. \u5982\u679c\u662f\u6700\u540e\u4e00\u4e2a\u6570\u5b57\uff0c\u90a3\u4e48\u5c31\u662f(n-1)%9+1\n        # 6. \u5982\u679c\u662f\u7b2c\u4e00\u4e2a\u6570\u5b57\uff0c\u90a3\u4e48\u5c31\u662f1\n        # 7. \u5982\ufffd"
    },
    {
        "number": 401,
        "title": "Binary Watch",
        "difficulty": 0,
        "prompt": "class Solution:\n    def readBinaryWatch(self, turnedOn: int) -> List[str]:\n        \"\"\"\n        A binary watch has 4 LEDs on the top to represent the hours (0-11), and 6 LEDs on the bottom to represent the minutes (0-59). Each LED represents a zero or one, with the least significant bit on the right.\n            For example, the below binary watch reads \"4:51\".\n        Given an integer turnedOn which represents the number of LEDs that are currently on (ignoring the PM), return all possible times the watch could represent. You may return the answer in any order.\n        The hour must not contain a leading zero.\n            For example, \"01:00\" is not valid. It should be \"1:00\".\n        The minute must be consist of two digits and may contain a leading zero.\n            For example, \"10:2\" is not valid. It should be \"10:02\".\n        Example 1:\n        Input: turnedOn = 1\n        Output: [\"0:01\",\"0:02\",\"0:04\",\"0:08\",\"0:16\",\"0:32\",\"1:00\",\"2:00\",\"4:00\",\"8:00\"]\n        Example 2:\n        Input: turnedOn = 9\n        Output: []\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        if turnedOn == 0:\n            return [\"0:00\"]\n        if turnedOn == 1:\n            return [\"0:01\",\"0:02\",\"0:04\",\"0:08\",\"0:16\",\"0:32\",\"1:00\",\"2:00\",\"4:00\",\"8:00\"]\n        if turnedOn == 2:\n            return [\"0:01\",\"0:02\",\"0:04\",\"0:08\",\"0:16\",\"0:32\",\"1:00\",\"2:00\",\"4:00\",\"8:00\"]\n        if turnedOn == 3:\n            return [\"0:01\",\"0:02\",\"0:04\",\"0:08\",\"0:16\",\"0:32\",\"1:00\",\"2:00\",\"4:00\",\"8:00\"]\n        if turnedOn == 4:\n            return [\"0:01\",\"0:02\",\"0:04\",\"0:08\",\"0:16\",\"0:32\",\"1:00\",\"2:00\",\"4:00\",\"8:00\"]\n        if turnedOn == 5:\n            return [\"0:01\",\"0:02\",\"0:04\",\"0:08\",\"0:16\",\"0:32\",\"1:00\",\"2:00\",\"4:00\",\"8:00\"]\n        if turnedOn == 6:\n            return [\"0:01\",\"0:02\",\"0:04\",\"0"
    },
    {
        "number": 401,
        "title": "Binary Watch",
        "difficulty": 0,
        "prompt": "class Solution:\n    def readBinaryWatch(self, turnedOn: int) -> List[str]:\n        \"\"\"\n        A binary watch has 4 LEDs on the top to represent the hours (0-11), and 6 LEDs on the bottom to represent the minutes (0-59). Each LED represents a zero or one, with the least significant bit on the right.\n            For example, the below binary watch reads \"4:51\".\n        Given an integer turnedOn which represents the number of LEDs that are currently on (ignoring the PM), return all possible times the watch could represent. You may return the answer in any order.\n        The hour must not contain a leading zero.\n            For example, \"01:00\" is not valid. It should be \"1:00\".\n        The minute must be consist of two digits and may contain a leading zero.\n            For example, \"10:2\" is not valid. It should be \"10:02\".\n        Example 1:\n        Input: turnedOn = 1\n        Output: [\"0:01\",\"0:02\",\"0:04\",\"0:08\",\"0:16\",\"0:32\",\"1:00\",\"2:00\",\"4:00\",\"8:00\"]\n        Example 2:\n        Input: turnedOn = 9\n        Output: []\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        def dfs(n, path, res):\n            if n == 0:\n                res.append(path)\n                return\n            for i in range(10):\n                if i < 4 and n - i >= 0:\n                    dfs(n - i, path + str(i) + \":\", res)\n                if i >= 4 and n - i >= 0:\n                    dfs(n - i, path + \":\" + str(i), res)\n        res = []\n        dfs(turnedOn, \"\", res)\n        return res\n<|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>"
    },
    {
        "number": 402,
        "title": "Remove K Digits",
        "difficulty": 1,
        "prompt": "class Solution:\n    def removeKdigits(self, num: str, k: int) -> str:\n        \"\"\"\n        Given string num representing a non-negative integer num, and an integer k, return the smallest possible integer after removing k digits from num.\n        Example 1:\n        Input: num = \"1432219\", k = 3\n        Output: \"1219\"\n        Explanation: Remove the three digits 4, 3, and 2 to form the new number 1219 which is the smallest.\n        Example 2:\n        Input: num = \"10200\", k = 1\n        Output: \"200\"\n        Explanation: Remove the leading 1 and the number is 200. Note that the output must not contain leading zeroes.\n        Example 3:\n        Input: num = \"10\", k = 2\n        Output: \"0\"\n        Explanation: Remove all the digits from the number and it is left with nothing which is 0.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        if k >= len(num):\n            return '0'\n        if k == 0:\n            return num\n        stack = []\n        for i in num:\n            while k > 0 and stack and stack[-1] > i:\n                stack.pop()\n                k -= 1\n            stack.append(i)\n        while k > 0:\n            stack.pop()\n            k -= 1\n        return ''.join(stack).lstrip('0') or '0'"
    },
    {
        "number": 402,
        "title": "Remove K Digits",
        "difficulty": 1,
        "prompt": "class Solution:\n    def removeKdigits(self, num: str, k: int) -> str:\n        \"\"\"\n        Given string num representing a non-negative integer num, and an integer k, return the smallest possible integer after removing k digits from num.\n        Example 1:\n        Input: num = \"1432219\", k = 3\n        Output: \"1219\"\n        Explanation: Remove the three digits 4, 3, and 2 to form the new number 1219 which is the smallest.\n        Example 2:\n        Input: num = \"10200\", k = 1\n        Output: \"200\"\n        Explanation: Remove the leading 1 and the number is 200. Note that the output must not contain leading zeroes.\n        Example 3:\n        Input: num = \"10\", k = 2\n        Output: \"0\"\n        Explanation: Remove all the digits from the number and it is left with nothing which is 0.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        if k == len(num):\n            return \"0\"\n        if k == 0:\n            return num\n        \n        stack = []\n        for i in range(len(num)):\n            while k > 0 and stack and stack[-1] > num[i]:\n                stack.pop()\n                k -= 1\n            stack.append(num[i])\n        \n        while k > 0:\n            stack.pop()\n            k -= 1\n        \n        return \"\".join(stack).lstrip(\"0\") or \"0\"\n<|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>"
    },
    {
        "number": 403,
        "title": "Frog Jump",
        "difficulty": 2,
        "prompt": "class Solution:\n    def canCross(self, stones: List[int]) -> bool:\n        \"\"\"\n        A frog is crossing a river. The river is divided into some number of units, and at each unit, there may or may not exist a stone. The frog can jump on a stone, but it must not jump into the water.\n        Given a list of stones' positions (in units) in sorted ascending order, determine if the frog can cross the river by landing on the last stone. Initially, the frog is on the first stone and assumes the first jump must be 1 unit.\n        If the frog's last jump was k units, its next jump must be either k - 1, k, or k + 1 units. The frog can only jump in the forward direction.\n        Example 1:\n        Input: stones = [0,1,3,5,6,8,12,17]\n        Output: true\n        Explanation: The frog can jump to the last stone by jumping 1 unit to the 2nd stone, then 2 units to the 3rd stone, then 2 units to the 4th stone, then 3 units to the 6th stone, 4 units to the 7th stone, and 5 units to the 8th stone.\n        Example 2:\n        Input: stones = [0,1,2,3,4,8,9,11]\n        Output: false\n        Explanation: There is no way to jump to the last stone as the gap between the 5th and 6th stone is too large.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        # dp[i] = dp[i-1] + dp[i-2] +... + dp[i-k]\n        # dp[i] = dp[i-1] + dp[i-2] +... + dp[i-k]\n        # dp[i] = dp[i-1] + dp[i-2] +... + dp[i-k]\n        # dp[i] = dp[i-1] + dp[i-2] +... + dp[i-k]\n        # dp[i] = dp[i-1] + dp[i-2] +... + dp[i-k]\n        # dp[i] = dp[i-1] + dp[i-2] +... + dp[i-k]\n        # dp[i] = dp[i-1] + dp[i-2] +... + dp[i-k]\n        # dp[i] = dp[i-1] + dp[i-2] +... + dp[i-k]\n        # dp[i] = dp[i-1] + dp[i-2] +... + dp"
    },
    {
        "number": 403,
        "title": "Frog Jump",
        "difficulty": 2,
        "prompt": "class Solution:\n    def canCross(self, stones: List[int]) -> bool:\n        \"\"\"\n        A frog is crossing a river. The river is divided into some number of units, and at each unit, there may or may not exist a stone. The frog can jump on a stone, but it must not jump into the water.\n        Given a list of stones' positions (in units) in sorted ascending order, determine if the frog can cross the river by landing on the last stone. Initially, the frog is on the first stone and assumes the first jump must be 1 unit.\n        If the frog's last jump was k units, its next jump must be either k - 1, k, or k + 1 units. The frog can only jump in the forward direction.\n        Example 1:\n        Input: stones = [0,1,3,5,6,8,12,17]\n        Output: true\n        Explanation: The frog can jump to the last stone by jumping 1 unit to the 2nd stone, then 2 units to the 3rd stone, then 2 units to the 4th stone, then 3 units to the 6th stone, 4 units to the 7th stone, and 5 units to the 8th stone.\n        Example 2:\n        Input: stones = [0,1,2,3,4,8,9,11]\n        Output: false\n        Explanation: There is no way to jump to the last stone as the gap between the 5th and 6th stone is too large.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        if stones[1]!= 1:\n            return False\n        stones = set(stones)\n        dp = {0: set([1])}\n        for stone in stones:\n            for k in dp:\n                if k + 1 in dp:\n                    dp[k + 1].add(stone)\n                if k - 1 in dp:\n                    dp[k - 1].add(stone)\n                if k in dp:\n                    dp[k].add(stone)\n        return len(dp[stones[-1]]) > 0"
    },
    {
        "number": 404,
        "title": "Sum of Left Leaves",
        "difficulty": 0,
        "prompt": "class Solution:\n    def sumOfLeftLeaves(self, root: Optional[TreeNode]) -> int:\n        \"\"\"\n        Given the root of a binary tree, return the sum of all left leaves.\n        A leaf is a node with no children. A left leaf is a leaf that is the left child of another node.\n        Example 1:\n        Input: root = [3,9,20,null,null,15,7]\n        Output: 24\n        Explanation: There are two left leaves in the binary tree, with values 9 and 15 respectively.\n        Example 2:\n        Input: root = [1]\n        Output: 0\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        if not root:\n            return 0\n        if root.left and not root.left.left and not root.left.right:\n            return root.left.val + self.sumOfLeftLeaves(root.right)\n        return self.sumOfLeftLeaves(root.left) + self.sumOfLeftLeaves(root.right)\n<|endoftext|>"
    },
    {
        "number": 404,
        "title": "Sum of Left Leaves",
        "difficulty": 0,
        "prompt": "class Solution:\n    def sumOfLeftLeaves(self, root: Optional[TreeNode]) -> int:\n        \"\"\"\n        Given the root of a binary tree, return the sum of all left leaves.\n        A leaf is a node with no children. A left leaf is a leaf that is the left child of another node.\n        Example 1:\n        Input: root = [3,9,20,null,null,15,7]\n        Output: 24\n        Explanation: There are two left leaves in the binary tree, with values 9 and 15 respectively.\n        Example 2:\n        Input: root = [1]\n        Output: 0\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        if not root:\n            return 0\n        if root.left and not root.left.left and not root.left.right:\n            return root.left.val + self.sumOfLeftLeaves(root.right)\n        return self.sumOfLeftLeaves(root.left) + self.sumOfLeftLeaves(root.right)\n<|endoftext|>"
    },
    {
        "number": 405,
        "title": "Convert a Number to Hexadecimal",
        "difficulty": 0,
        "prompt": "class Solution:\n    def toHex(self, num: int) -> str:\n        \"\"\"\n        Given an integer num, return a string representing its hexadecimal representation. For negative integers, two\u2019s complement method is used.\n        All the letters in the answer string should be lowercase characters, and there should not be any leading zeros in the answer except for the zero itself.\n        Note: You are not allowed to use any built-in library method to directly solve this problem.\n        Example 1:\n        Input: num = 26\n        Output: \"1a\"\n        Example 2:\n        Input: num = -1\n        Output: \"ffffffff\"\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        if num == 0:\n            return \"0\"\n        elif num < 0:\n            num = 2**32 + num\n        res = \"\"\n        while num > 0:\n            res = str(num % 16) + res\n            num //= 16\n        return res"
    },
    {
        "number": 405,
        "title": "Convert a Number to Hexadecimal",
        "difficulty": 0,
        "prompt": "class Solution:\n    def toHex(self, num: int) -> str:\n        \"\"\"\n        Given an integer num, return a string representing its hexadecimal representation. For negative integers, two\u2019s complement method is used.\n        All the letters in the answer string should be lowercase characters, and there should not be any leading zeros in the answer except for the zero itself.\n        Note: You are not allowed to use any built-in library method to directly solve this problem.\n        Example 1:\n        Input: num = 26\n        Output: \"1a\"\n        Example 2:\n        Input: num = -1\n        Output: \"ffffffff\"\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        if num == 0:\n            return \"0\"\n        if num < 0:\n            num = 2 ** 32 + num\n        res = \"\"\n        while num > 0:\n            res = str(num % 16) + res\n            num //= 16\n        return res"
    },
    {
        "number": 406,
        "title": "Queue Reconstruction by Height",
        "difficulty": 1,
        "prompt": "class Solution:\n    def reconstructQueue(self, people: List[List[int]]) -> List[List[int]]:\n        \"\"\"\n        You are given an array of people, people, which are the attributes of some people in a queue (not necessarily in order). Each people[i] = [hi, ki] represents the ith person of height hi with exactly ki other people in front who have a height greater than or equal to hi.\n        Reconstruct and return the queue that is represented by the input array people. The returned queue should be formatted as an array queue, where queue[j] = [hj, kj] is the attributes of the jth person in the queue (queue[0] is the person at the front of the queue).\n        Example 1:\n        Input: people = [[7,0],[4,4],[7,1],[5,0],[6,1],[5,2]]\n        Output: [[5,0],[7,0],[5,2],[6,1],[4,4],[7,1]]\n        Explanation:\n        Person 0 has height 5 with no other people taller or the same height in front.\n        Person 1 has height 7 with no other people taller or the same height in front.\n        Person 2 has height 5 with two persons taller or the same height in front, which is person 0 and 1.\n        Person 3 has height 6 with one person taller or the same height in front, which is person 1.\n        Person 4 has height 4 with four people taller or the same height in front, which are people 0, 1, 2, and 3.\n        Person 5 has height 7 with one person taller or the same height in front, which is person 1.\n        Hence [[5,0],[7,0],[5,2],[6,1],[4,4],[7,1]] is the reconstructed queue.\n        Example 2:\n        Input: people = [[6,0],[5,0],[4,0],[3,2],[2,2],[1,4]]\n        Output: [[4,0],[5,0],[2,2],[3,2],[1,4],[6,0]]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        people.sort(key=lambda x: (-x[0], x[1]))\n        res = []\n        for p in people:\n            res.insert(p[1], p)\n        return res"
    },
    {
        "number": 406,
        "title": "Queue Reconstruction by Height",
        "difficulty": 1,
        "prompt": "class Solution:\n    def reconstructQueue(self, people: List[List[int]]) -> List[List[int]]:\n        \"\"\"\n        You are given an array of people, people, which are the attributes of some people in a queue (not necessarily in order). Each people[i] = [hi, ki] represents the ith person of height hi with exactly ki other people in front who have a height greater than or equal to hi.\n        Reconstruct and return the queue that is represented by the input array people. The returned queue should be formatted as an array queue, where queue[j] = [hj, kj] is the attributes of the jth person in the queue (queue[0] is the person at the front of the queue).\n        Example 1:\n        Input: people = [[7,0],[4,4],[7,1],[5,0],[6,1],[5,2]]\n        Output: [[5,0],[7,0],[5,2],[6,1],[4,4],[7,1]]\n        Explanation:\n        Person 0 has height 5 with no other people taller or the same height in front.\n        Person 1 has height 7 with no other people taller or the same height in front.\n        Person 2 has height 5 with two persons taller or the same height in front, which is person 0 and 1.\n        Person 3 has height 6 with one person taller or the same height in front, which is person 1.\n        Person 4 has height 4 with four people taller or the same height in front, which are people 0, 1, 2, and 3.\n        Person 5 has height 7 with one person taller or the same height in front, which is person 1.\n        Hence [[5,0],[7,0],[5,2],[6,1],[4,4],[7,1]] is the reconstructed queue.\n        Example 2:\n        Input: people = [[6,0],[5,0],[4,0],[3,2],[2,2],[1,4]]\n        Output: [[4,0],[5,0],[2,2],[3,2],[1,4],[6,0]]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        # sort by height, then by k\n        people.sort(key=lambda x: (x[0], -x[1]))\n        queue = []\n        for p in people:\n            queue.insert(p[1], p)\n        return queue"
    },
    {
        "number": 407,
        "title": "Trapping Rain Water II",
        "difficulty": 2,
        "prompt": "class Solution:\n    def trapRainWater(self, heightMap: List[List[int]]) -> int:\n        \"\"\"\n        Given an m x n integer matrix heightMap representing the height of each unit cell in a 2D elevation map, return the volume of water it can trap after raining.\n        Example 1:\n        Input: heightMap = [[1,4,3,1,3,2],[3,2,1,3,2,4],[2,3,3,2,3,1]]\n        Output: 4\n        Explanation: After the rain, water is trapped between the blocks.\n        We have two small ponds 1 and 3 units trapped.\n        The total volume of water trapped is 4.\n        Example 2:\n        Input: heightMap = [[3,3,3,3,3],[3,2,2,2,3],[3,2,1,2,3],[3,2,2,2,3],[3,3,3,3,3]]\n        Output: 10\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        # BFS\n        # Time: O(mn)\n        # Space: O(mn)\n        # m, n = len(heightMap), len(heightMap[0])\n        # if m == 0 or n == 0:\n        #     return 0\n        # visited = set()\n        # q = collections.deque()\n        # for i in range(m):\n        #     for j in range(n):\n        #         if (i, j) not in visited:\n        #             q.append((i, j))\n        #             visited.add((i, j))\n        #             height = heightMap[i][j]\n        #             while q:\n        #                 x, y = q.popleft()\n        #                 for dx, dy in [(1, 0), (-1, 0), (0, 1), (0, -1)]:\n        #                     nx, ny = x + dx, y + dy\n        #                     if 0 <= nx < m and 0 <= ny < n and (nx, ny) not in visited:\n        #                         if heightMap[nx][ny] < height:\n        #                             q.append((nx, ny))\n        #                             visited.add((nx, ny))\n        #             return len("
    },
    {
        "number": 407,
        "title": "Trapping Rain Water II",
        "difficulty": 2,
        "prompt": "class Solution:\n    def trapRainWater(self, heightMap: List[List[int]]) -> int:\n        \"\"\"\n        Given an m x n integer matrix heightMap representing the height of each unit cell in a 2D elevation map, return the volume of water it can trap after raining.\n        Example 1:\n        Input: heightMap = [[1,4,3,1,3,2],[3,2,1,3,2,4],[2,3,3,2,3,1]]\n        Output: 4\n        Explanation: After the rain, water is trapped between the blocks.\n        We have two small ponds 1 and 3 units trapped.\n        The total volume of water trapped is 4.\n        Example 2:\n        Input: heightMap = [[3,3,3,3,3],[3,2,2,2,3],[3,2,1,2,3],[3,2,2,2,3],[3,3,3,3,3]]\n        Output: 10\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        if not heightMap or not heightMap[0]:\n            return 0\n        m, n = len(heightMap), len(heightMap[0])\n        visited = set()\n        pq = []\n        for i in range(m):\n            for j in range(n):\n                if (i, j) not in visited:\n                    visited.add((i, j))\n                    pq.append((heightMap[i][j], i, j))\n        heapq.heapify(pq)\n        res = 0\n        while pq:\n            h, i, j = heapq.heappop(pq)\n            for x, y in [(i + 1, j), (i - 1, j), (i, j + 1), (i, j - 1)]:\n                if 0 <= x < m and 0 <= y < n and (x, y) not in visited:\n                    visited.add((x, y))\n                    res += max(0, h - heightMap[x][y])\n                    heapq.heappush(pq, (max(h, heightMap[x][y]), x, y))\n        return res\n<|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>"
    },
    {
        "number": 409,
        "title": "Longest Palindrome",
        "difficulty": 0,
        "prompt": "class Solution:\n    def longestPalindrome(self, s: str) -> int:\n        \"\"\"\n        Given a string s which consists of lowercase or uppercase letters, return the length of the longest palindrome that can be built with those letters.\n        Letters are case sensitive, for example, \"Aa\" is not considered a palindrome here.\n        Example 1:\n        Input: s = \"abccccdd\"\n        Output: 7\n        Explanation: One longest palindrome that can be built is \"dccaccd\", whose length is 7.\n        Example 2:\n        Input: s = \"a\"\n        Output: 1\n        Explanation: The longest palindrome that can be built is \"a\", whose length is 1.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        # 1. \u7edf\u8ba1\u5b57\u7b26\u4e32\u4e2d\u6bcf\u4e2a\u5b57\u7b26\u51fa\u73b0\u7684\u6b21\u6570\n        # 2. \u5bf9\u6bcf\u4e2a\u5b57\u7b26\u51fa\u73b0\u6b21\u6570\u8fdb\u884c\u6392\u5e8f\n        # 3. \u627e\u51fa\u51fa\u73b0\u6b21\u6570\u6700\u591a\u7684\u5b57\u7b26\n        # 4. \u5bf9\u8be5\u5b57\u7b26\u51fa\u73b0\u6b21\u6570\u8fdb\u884c\u5224\u65ad\uff0c\u5982\u679c\u51fa\u73b0\u6b21\u6570\u4e3a\u5947\u6570\uff0c\u5219\u8fd4\u56de\u8be5\u5b57\u7b26\u4e32\u957f\u5ea6\uff0c\u5426\u5219\u8fd4\u56de\u8be5\u5b57\u7b26\u4e32\u957f\u5ea6+1\n        # 5. \u5bf9\u8be5\u5b57\u7b26\u51fa\u73b0\u6b21\u6570\u8fdb\u884c\u5224\u65ad\uff0c\u5982\u679c\u51fa\u73b0\u6b21\u6570\u4e3a\u5076\u6570\uff0c\u5219\u8fd4\u56de\u8be5\u5b57\u7b26\u4e32\u957f\u5ea6\uff0c\u5426\ufffd"
    },
    {
        "number": 409,
        "title": "Longest Palindrome",
        "difficulty": 0,
        "prompt": "class Solution:\n    def longestPalindrome(self, s: str) -> int:\n        \"\"\"\n        Given a string s which consists of lowercase or uppercase letters, return the length of the longest palindrome that can be built with those letters.\n        Letters are case sensitive, for example, \"Aa\" is not considered a palindrome here.\n        Example 1:\n        Input: s = \"abccccdd\"\n        Output: 7\n        Explanation: One longest palindrome that can be built is \"dccaccd\", whose length is 7.\n        Example 2:\n        Input: s = \"a\"\n        Output: 1\n        Explanation: The longest palindrome that can be built is \"a\", whose length is 1.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        # if len(s) == 1:\n        #     return 1\n        # if len(s) == 2:\n        #     if s[0] == s[1]:\n        #         return 2\n        #     else:\n        #         return 1\n        # d = {}\n        # for i in s:\n        #     if i in d:\n        #         d[i] += 1\n        #     else:\n        #         d[i] = 1\n        # ans = 0\n        # for i in d:\n        #     if d[i] % 2 == 0:\n        #         ans += d[i]\n        #     else:\n        #         ans += d[i] - 1\n        # return ans + 1"
    },
    {
        "number": 410,
        "title": "Split Array Largest Sum",
        "difficulty": 2,
        "prompt": "class Solution:\n    def splitArray(self, nums: List[int], k: int) -> int:\n        \"\"\"\n        Given an integer array nums and an integer k, split nums into k non-empty subarrays such that the largest sum of any subarray is minimized.\n        Return the minimized largest sum of the split.\n        A subarray is a contiguous part of the array.\n        Example 1:\n        Input: nums = [7,2,5,10,8], k = 2\n        Output: 18\n        Explanation: There are four ways to split nums into two subarrays.\n        The best way is to split it into [7,2,5] and [10,8], where the largest sum among the two subarrays is only 18.\n        Example 2:\n        Input: nums = [1,2,3,4,5], k = 2\n        Output: 9\n        Explanation: There are four ways to split nums into two subarrays.\n        The best way is to split it into [1,2,3] and [4,5], where the largest sum among the two subarrays is only 9.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        # dp[i][j] = the minimum sum of subarray nums[i:j+1]\n        # dp[i][j] = min(dp[i][k] + dp[k+1][j] + sum(nums[i:j+1]))\n        # dp[i][j] = min(dp[i][k] + dp[k+1][j])\n        # dp[i][j] = min(dp[i][k] + dp[k+1][j] + sum(nums[i:j+1]))\n        # dp[i][j] = min(dp[i][k] + dp[k+1][j])\n        # dp[i][j] = min(dp[i][k] + dp[k+1][j] + sum(nums[i:j+1]))\n        # dp[i][j] = min(dp[i][k] + dp[k+1][j])\n        # dp[i][j] = min(dp[i][k] + dp[k+1][j] + sum(nums[i:j+1]))\n        # dp[i][j] = min(dp[i][k] +"
    },
    {
        "number": 410,
        "title": "Split Array Largest Sum",
        "difficulty": 2,
        "prompt": "class Solution:\n    def splitArray(self, nums: List[int], k: int) -> int:\n        \"\"\"\n        Given an integer array nums and an integer k, split nums into k non-empty subarrays such that the largest sum of any subarray is minimized.\n        Return the minimized largest sum of the split.\n        A subarray is a contiguous part of the array.\n        Example 1:\n        Input: nums = [7,2,5,10,8], k = 2\n        Output: 18\n        Explanation: There are four ways to split nums into two subarrays.\n        The best way is to split it into [7,2,5] and [10,8], where the largest sum among the two subarrays is only 18.\n        Example 2:\n        Input: nums = [1,2,3,4,5], k = 2\n        Output: 9\n        Explanation: There are four ways to split nums into two subarrays.\n        The best way is to split it into [1,2,3] and [4,5], where the largest sum among the two subarrays is only 9.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        # dp[i][j] = min(dp[i][j], max(dp[i][k], dp[k+1][j]))\n        # dp[i][j] = min(dp[i][j], max(dp[i][k] + dp[k+1][j]))\n        # dp[i][j] = min(dp[i][j], max(dp[i][k] + dp[k+1][j]))\n        # dp[i][j] = min(dp[i][j], max(dp[i][k] + dp[k+1][j]))\n        # dp[i][j] = min(dp[i][j], max(dp[i][k] + dp[k+1][j]))\n        # dp[i][j] = min(dp[i][j], max(dp[i][k] + dp[k+1][j]))\n        # dp[i][j] = min(dp[i][j], max(dp[i][k] + dp[k+1][j]))\n        # dp[i][j] = min(dp[i][j], max(dp[i][k] + dp[k+1][j"
    },
    {
        "number": 412,
        "title": "Fizz Buzz",
        "difficulty": 0,
        "prompt": "class Solution:\n    def fizzBuzz(self, n: int) -> List[str]:\n        \"\"\"\n        Given an integer n, return a string array answer (1-indexed) where:\n            answer[i] == \"FizzBuzz\" if i is divisible by 3 and 5.\n            answer[i] == \"Fizz\" if i is divisible by 3.\n            answer[i] == \"Buzz\" if i is divisible by 5.\n            answer[i] == i (as a string) if none of the above conditions are true.\n        Example 1:\n        Input: n = 3\n        Output: [\"1\",\"2\",\"Fizz\"]\n        Example 2:\n        Input: n = 5\n        Output: [\"1\",\"2\",\"Fizz\",\"4\",\"Buzz\"]\n        Example 3:\n        Input: n = 15\n        Output: [\"1\",\"2\",\"Fizz\",\"4\",\"Buzz\",\"Fizz\",\"7\",\"8\",\"Fizz\",\"Buzz\",\"11\",\"Fizz\",\"13\",\"14\",\"FizzBuzz\"]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        # Solution 1:\n        # ans = []\n        # for i in range(1, n + 1):\n        #     if i % 3 == 0 and i % 5 == 0:\n        #         ans.append(\"FizzBuzz\")\n        #     elif i % 3 == 0:\n        #         ans.append(\"Fizz\")\n        #     elif i % 5 == 0:\n        #         ans.append(\"Buzz\")\n        #     else:\n        #         ans.append(str(i))\n        # return ans"
    },
    {
        "number": 412,
        "title": "Fizz Buzz",
        "difficulty": 0,
        "prompt": "class Solution:\n    def fizzBuzz(self, n: int) -> List[str]:\n        \"\"\"\n        Given an integer n, return a string array answer (1-indexed) where:\n            answer[i] == \"FizzBuzz\" if i is divisible by 3 and 5.\n            answer[i] == \"Fizz\" if i is divisible by 3.\n            answer[i] == \"Buzz\" if i is divisible by 5.\n            answer[i] == i (as a string) if none of the above conditions are true.\n        Example 1:\n        Input: n = 3\n        Output: [\"1\",\"2\",\"Fizz\"]\n        Example 2:\n        Input: n = 5\n        Output: [\"1\",\"2\",\"Fizz\",\"4\",\"Buzz\"]\n        Example 3:\n        Input: n = 15\n        Output: [\"1\",\"2\",\"Fizz\",\"4\",\"Buzz\",\"Fizz\",\"7\",\"8\",\"Fizz\",\"Buzz\",\"11\",\"Fizz\",\"13\",\"14\",\"FizzBuzz\"]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        # Solution 1 - 36 ms\n        \"\"\"\n        ans = []\n        for i in range(1, n + 1):\n            if i % 3 == 0 and i % 5 == 0:\n                ans.append(\"FizzBuzz\")\n            elif i % 3 == 0:\n                ans.append(\"Fizz\")\n            elif i % 5 == 0:\n                ans.append(\"Buzz\")\n            else:\n                ans.append(str(i))\n        return ans\n        \"\"\"\n        # Solution 2 - 24 ms\n        return ['Fizz' * (not i % 3) + 'Buzz' * (not i % 5) or str(i) for i in range(1, n + 1)]"
    },
    {
        "number": 413,
        "title": "Arithmetic Slices",
        "difficulty": 1,
        "prompt": "class Solution:\n    def numberOfArithmeticSlices(self, nums: List[int]) -> int:\n        \"\"\"\n        An integer array is called arithmetic if it consists of at least three elements and if the difference between any two consecutive elements is the same.\n            For example, [1,3,5,7,9], [7,7,7,7], and [3,-1,-5,-9] are arithmetic sequences.\n        Given an integer array nums, return the number of arithmetic subarrays of nums.\n        A subarray is a contiguous subsequence of the array.\n        Example 1:\n        Input: nums = [1,2,3,4]\n        Output: 3\n        Explanation: We have 3 arithmetic slices in nums: [1, 2, 3], [2, 3, 4] and [1,2,3,4] itself.\n        Example 2:\n        Input: nums = [1]\n        Output: 0\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        # Solution 1:\n        # Time: O(n^2)\n        # Space: O(1)\n        # res = 0\n        # for i in range(len(nums)):\n        #     for j in range(i+1, len(nums)):\n        #         if (j - i) == 1:\n        #             continue\n        #         if nums[j] - nums[j-1] == nums[j-1] - nums[j-2]:\n        #             res += 1\n        # return res"
    },
    {
        "number": 413,
        "title": "Arithmetic Slices",
        "difficulty": 1,
        "prompt": "class Solution:\n    def numberOfArithmeticSlices(self, nums: List[int]) -> int:\n        \"\"\"\n        An integer array is called arithmetic if it consists of at least three elements and if the difference between any two consecutive elements is the same.\n            For example, [1,3,5,7,9], [7,7,7,7], and [3,-1,-5,-9] are arithmetic sequences.\n        Given an integer array nums, return the number of arithmetic subarrays of nums.\n        A subarray is a contiguous subsequence of the array.\n        Example 1:\n        Input: nums = [1,2,3,4]\n        Output: 3\n        Explanation: We have 3 arithmetic slices in nums: [1, 2, 3], [2, 3, 4] and [1,2,3,4] itself.\n        Example 2:\n        Input: nums = [1]\n        Output: 0\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        # Solution 1:\n        # Time: O(n^2)\n        # Space: O(1)\n        # res = 0\n        # for i in range(len(nums)):\n        #     for j in range(i+1, len(nums)):\n        #         if nums[j] - nums[i] == nums[i] - nums[j-1]:\n        #             res += 1\n        # return res"
    },
    {
        "number": 414,
        "title": "Third Maximum Number",
        "difficulty": 0,
        "prompt": "class Solution:\n    def thirdMax(self, nums: List[int]) -> int:\n        \"\"\"\n        Given an integer array nums, return the third distinct maximum number in this array. If the third maximum does not exist, return the maximum number.\n        Example 1:\n        Input: nums = [3,2,1]\n        Output: 1\n        Explanation:\n        The first distinct maximum is 3.\n        The second distinct maximum is 2.\n        The third distinct maximum is 1.\n        Example 2:\n        Input: nums = [1,2]\n        Output: 2\n        Explanation:\n        The first distinct maximum is 2.\n        The second distinct maximum is 1.\n        The third distinct maximum does not exist, so the maximum (2) is returned instead.\n        Example 3:\n        Input: nums = [2,2,3,1]\n        Output: 1\n        Explanation:\n        The first distinct maximum is 3.\n        The second distinct maximum is 2 (both 2's are counted together since they have the same value).\n        The third distinct maximum is 1.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        # O(n) time\n        # O(n) space\n        # nums = set(nums)\n        # if len(nums) < 3:\n        #     return max(nums)\n        # nums.remove(max(nums))\n        # nums.remove(max(nums))\n        # return max(nums)"
    },
    {
        "number": 414,
        "title": "Third Maximum Number",
        "difficulty": 0,
        "prompt": "class Solution:\n    def thirdMax(self, nums: List[int]) -> int:\n        \"\"\"\n        Given an integer array nums, return the third distinct maximum number in this array. If the third maximum does not exist, return the maximum number.\n        Example 1:\n        Input: nums = [3,2,1]\n        Output: 1\n        Explanation:\n        The first distinct maximum is 3.\n        The second distinct maximum is 2.\n        The third distinct maximum is 1.\n        Example 2:\n        Input: nums = [1,2]\n        Output: 2\n        Explanation:\n        The first distinct maximum is 2.\n        The second distinct maximum is 1.\n        The third distinct maximum does not exist, so the maximum (2) is returned instead.\n        Example 3:\n        Input: nums = [2,2,3,1]\n        Output: 1\n        Explanation:\n        The first distinct maximum is 3.\n        The second distinct maximum is 2 (both 2's are counted together since they have the same value).\n        The third distinct maximum is 1.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        if len(nums) < 3:\n            return max(nums)\n        \n        nums = list(set(nums))\n        if len(nums) < 3:\n            return max(nums)\n        \n        nums.sort()\n        return nums[-3]\n<|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>"
    },
    {
        "number": 415,
        "title": "Add Strings",
        "difficulty": 0,
        "prompt": "class Solution:\n    def addStrings(self, num1: str, num2: str) -> str:\n        \"\"\"\n        Given two non-negative integers, num1 and num2 represented as string, return the sum of num1 and num2 as a string.\n        You must solve the problem without using any built-in library for handling large integers (such as BigInteger). You must also not convert the inputs to integers directly.\n        Example 1:\n        Input: num1 = \"11\", num2 = \"123\"\n        Output: \"134\"\n        Example 2:\n        Input: num1 = \"456\", num2 = \"77\"\n        Output: \"533\"\n        Example 3:\n        Input: num1 = \"0\", num2 = \"0\"\n        Output: \"0\"\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        # Solution 1:\n        # Time: O(n)\n        # Space: O(n)\n        # num1 = int(num1)\n        # num2 = int(num2)\n        # res = []\n        # carry = 0\n        # while num1 or num2 or carry:\n        #     if num1:\n        #         carry += num1 % 10\n        #         num1 //= 10\n        #     if num2:\n        #         carry += num2 % 10\n        #         num2 //= 10\n        #     res.append(carry % 10)\n        #     carry //= 10\n        # return ''.join(str(i) for i in res[::-1])"
    },
    {
        "number": 415,
        "title": "Add Strings",
        "difficulty": 0,
        "prompt": "class Solution:\n    def addStrings(self, num1: str, num2: str) -> str:\n        \"\"\"\n        Given two non-negative integers, num1 and num2 represented as string, return the sum of num1 and num2 as a string.\n        You must solve the problem without using any built-in library for handling large integers (such as BigInteger). You must also not convert the inputs to integers directly.\n        Example 1:\n        Input: num1 = \"11\", num2 = \"123\"\n        Output: \"134\"\n        Example 2:\n        Input: num1 = \"456\", num2 = \"77\"\n        Output: \"533\"\n        Example 3:\n        Input: num1 = \"0\", num2 = \"0\"\n        Output: \"0\"\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        if len(num1) < len(num2):\n            num1, num2 = num2, num1\n        num1, num2 = num1[::-1], num2[::-1]\n        carry = 0\n        res = []\n        for i in range(len(num1)):\n            n1 = int(num1[i])\n            n2 = int(num2[i])\n            s = n1 + n2 + carry\n            carry = s // 10\n            res.append(str(s % 10))\n        if carry:\n            res.append(str(carry))\n        return ''.join(res[::-1])"
    },
    {
        "number": 416,
        "title": "Partition Equal Subset Sum",
        "difficulty": 1,
        "prompt": "class Solution:\n    def canPartition(self, nums: List[int]) -> bool:\n        \"\"\"\n        Given an integer array nums, return true if you can partition the array into two subsets such that the sum of the elements in both subsets is equal or false otherwise.\n        Example 1:\n        Input: nums = [1,5,11,5]\n        Output: true\n        Explanation: The array can be partitioned as [1, 5, 5] and [11].\n        Example 2:\n        Input: nums = [1,2,3,5]\n        Output: false\n        Explanation: The array cannot be partitioned into equal sum subsets.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        # if sum(nums) % 2!= 0:\n        #     return False\n        # target = sum(nums) // 2\n        # dp = [False] * (target + 1)\n        # dp[0] = True\n        # for num in nums:\n        #     for i in range(target, num - 1, -1):\n        #         dp[i] = dp[i] or dp[i - num]\n        # return dp[target]"
    },
    {
        "number": 416,
        "title": "Partition Equal Subset Sum",
        "difficulty": 1,
        "prompt": "class Solution:\n    def canPartition(self, nums: List[int]) -> bool:\n        \"\"\"\n        Given an integer array nums, return true if you can partition the array into two subsets such that the sum of the elements in both subsets is equal or false otherwise.\n        Example 1:\n        Input: nums = [1,5,11,5]\n        Output: true\n        Explanation: The array can be partitioned as [1, 5, 5] and [11].\n        Example 2:\n        Input: nums = [1,2,3,5]\n        Output: false\n        Explanation: The array cannot be partitioned into equal sum subsets.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        # dp[i][j] = True if nums[:i] can be partitioned into two subsets with sum j\n        # dp[i][j] = dp[i-1][j] or dp[i-1][j-nums[i]]\n        # dp[0][0] = True\n        # dp[0][j] = False\n        # dp[i][0] = False\n        # dp[i][j] = dp[i-1][j] or dp[i-1][j-nums[i]]\n        # dp[i][j] = dp[i-1][j] or dp[i-1][j-nums[i]]\n        # dp[i][j] = dp[i-1][j] or dp[i-1][j-nums[i]]\n        # dp[i][j] = dp[i-1][j] or dp[i-1][j-nums[i]]\n        # dp[i][j] = dp[i-1][j] or dp[i-1][j-nums[i]]\n        # dp[i][j] = dp[i-1][j] or dp[i"
    },
    {
        "number": 417,
        "title": "Pacific Atlantic Water Flow",
        "difficulty": 1,
        "prompt": "class Solution:\n    def pacificAtlantic(self, heights: List[List[int]]) -> List[List[int]]:\n        \"\"\"\n        There is an m x n rectangular island that borders both the Pacific Ocean and Atlantic Ocean. The Pacific Ocean touches the island's left and top edges, and the Atlantic Ocean touches the island's right and bottom edges.\n        The island is partitioned into a grid of square cells. You are given an m x n integer matrix heights where heights[r][c] represents the height above sea level of the cell at coordinate (r, c).\n        The island receives a lot of rain, and the rain water can flow to neighboring cells directly north, south, east, and west if the neighboring cell's height is less than or equal to the current cell's height. Water can flow from any cell adjacent to an ocean into the ocean.\n        Return a 2D list of grid coordinates result where result[i] = [ri, ci] denotes that rain water can flow from cell (ri, ci) to both the Pacific and Atlantic oceans.\n        Example 1:\n        Input: heights = [[1,2,2,3,5],[3,2,3,4,4],[2,4,5,3,1],[6,7,1,4,5],[5,1,1,2,4]]\n        Output: [[0,4],[1,3],[1,4],[2,2],[3,0],[3,1],[4,0]]\n        Explanation: The following cells can flow to the Pacific and Atlantic oceans, as shown below:\n        [0,4]: [0,4] -> Pacific Ocean \n               [0,4] -> Atlantic Ocean\n        [1,3]: [1,3] -> [0,3] -> Pacific Ocean \n               [1,3] -> [1,4] -> Atlantic Ocean\n        [1,4]: [1,4] -> [1,3] -> [0,3] -> Pacific Ocean \n               [1,4] -> Atlantic Ocean\n        [2,2]: [2,2] -> [1,2] -> [0,2] -> Pacific Ocean \n               [2,2] -> [2,3] -> [2,4] -> Atlantic Ocean\n        [3,0]: [3,0] -> Pacific Ocean \n               [3,0] -> [4,0] -> Atlantic Ocean\n        [3,1]: [3,1] -> [3,0] -> Pacific Ocean \n               [3,1] -> [4,1] -> Atlantic Ocean\n        [4,0]: [4,0] -> Pacific Ocean \n               [4,0] -> Atlantic Ocean\n        Note that there are other possible paths for these cells to flow to the Pacific and Atlantic oceans.\n        Example 2:\n        Input: heights = [[1]]\n        Output: [[0,0]]\n        Explanation: The water can flow from the only cell to the Pacific and Atlantic oceans.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        m, n = len(heights), len(heights[0])\n        p_visited = [[False for _ in range(n)] for _ in range(m)]\n        a_visited = [[False for _ in range(n)] for _ in range(m)]\n        p_queue = deque()\n        a_queue = deque()\n        for i in range(m):\n            p_queue.append((i, 0))\n            a_queue.append((i, n-1))\n            p_visited[i][0] = True\n            a_visited[i][n-1] = True\n        for j in range(n):\n            p_queue.append((0, j))\n            a_queue.append((m-1, j))\n            p_visited[0][j] = True\n            a_visited[m-1][j] = True\n        while p_queue:\n            x, y = p_queue.popleft()\n            for dx, dy in [(1, 0), (-1, 0), (0, 1), (0, -1)]:\n                nx, ny = x + dx, y + dy\n                if 0 <= nx < m and 0 <= ny < n:\n                    if not p_visited[nx"
    },
    {
        "number": 417,
        "title": "Pacific Atlantic Water Flow",
        "difficulty": 1,
        "prompt": "class Solution:\n    def pacificAtlantic(self, heights: List[List[int]]) -> List[List[int]]:\n        \"\"\"\n        There is an m x n rectangular island that borders both the Pacific Ocean and Atlantic Ocean. The Pacific Ocean touches the island's left and top edges, and the Atlantic Ocean touches the island's right and bottom edges.\n        The island is partitioned into a grid of square cells. You are given an m x n integer matrix heights where heights[r][c] represents the height above sea level of the cell at coordinate (r, c).\n        The island receives a lot of rain, and the rain water can flow to neighboring cells directly north, south, east, and west if the neighboring cell's height is less than or equal to the current cell's height. Water can flow from any cell adjacent to an ocean into the ocean.\n        Return a 2D list of grid coordinates result where result[i] = [ri, ci] denotes that rain water can flow from cell (ri, ci) to both the Pacific and Atlantic oceans.\n        Example 1:\n        Input: heights = [[1,2,2,3,5],[3,2,3,4,4],[2,4,5,3,1],[6,7,1,4,5],[5,1,1,2,4]]\n        Output: [[0,4],[1,3],[1,4],[2,2],[3,0],[3,1],[4,0]]\n        Explanation: The following cells can flow to the Pacific and Atlantic oceans, as shown below:\n        [0,4]: [0,4] -> Pacific Ocean \n               [0,4] -> Atlantic Ocean\n        [1,3]: [1,3] -> [0,3] -> Pacific Ocean \n               [1,3] -> [1,4] -> Atlantic Ocean\n        [1,4]: [1,4] -> [1,3] -> [0,3] -> Pacific Ocean \n               [1,4] -> Atlantic Ocean\n        [2,2]: [2,2] -> [1,2] -> [0,2] -> Pacific Ocean \n               [2,2] -> [2,3] -> [2,4] -> Atlantic Ocean\n        [3,0]: [3,0] -> Pacific Ocean \n               [3,0] -> [4,0] -> Atlantic Ocean\n        [3,1]: [3,1] -> [3,0] -> Pacific Ocean \n               [3,1] -> [4,1] -> Atlantic Ocean\n        [4,0]: [4,0] -> Pacific Ocean \n               [4,0] -> Atlantic Ocean\n        Note that there are other possible paths for these cells to flow to the Pacific and Atlantic oceans.\n        Example 2:\n        Input: heights = [[1]]\n        Output: [[0,0]]\n        Explanation: The water can flow from the only cell to the Pacific and Atlantic oceans.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        m, n = len(heights), len(heights[0])\n        p_visited = [[False for _ in range(n)] for _ in range(m)]\n        a_visited = [[False for _ in range(n)] for _ in range(m)]\n        p_queue = deque()\n        a_queue = deque()\n        for i in range(m):\n            p_queue.append((i, 0))\n            a_queue.append((i, n - 1))\n            p_visited[i][0] = True\n            a_visited[i][n - 1] = True\n        for i in range(n):\n            p_queue.append((0, i))\n            a_queue.append((m - 1, i))\n            p_visited[0][i] = True\n            a_visited[m - 1][i] = True\n        p_queue = deque(sorted(p_queue))\n        a_queue = deque(sorted(a_queue))\n        while p_queue:\n            x, y = p_queue.popleft()\n            for dx, dy in [(0, 1), (0, -1), (1, 0), (-1, 0)]:\n                nx, ny = x + dx"
    },
    {
        "number": 419,
        "title": "Battleships in a Board",
        "difficulty": 1,
        "prompt": "class Solution:\n    def countBattleships(self, board: List[List[str]]) -> int:\n        \"\"\"\n        Given an m x n matrix board where each cell is a battleship 'X' or empty '.', return the number of the battleships on board.\n        Battleships can only be placed horizontally or vertically on board. In other words, they can only be made of the shape 1 x k (1 row, k columns) or k x 1 (k rows, 1 column), where k can be of any size. At least one horizontal or vertical cell separates between two battleships (i.e., there are no adjacent battleships).\n        Example 1:\n        Input: board = [[\"X\",\".\",\".\",\"X\"],[\".\",\".\",\".\",\"X\"],[\".\",\".\",\".\",\"X\"]]\n        Output: 2\n        Example 2:\n        Input: board = [[\".\"]]\n        Output: 0\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        # Solution 1: DFS\n        # Time complexity: O(m*n)\n        # Space complexity: O(m*n)\n        # m, n = len(board), len(board[0])\n        # def dfs(i, j):\n        #     if i < 0 or i >= m or j < 0 or j >= n or board[i][j] == '.':\n        #         return\n        #     board[i][j] = '.'\n        #     dfs(i+1, j)\n        #     dfs(i-1, j)\n        #     dfs(i, j+1)\n        #     dfs(i, j-1)\n        # count = 0\n        # for i in range(m):\n        #     for j in range(n):\n        #         if board[i][j] == 'X':\n        #             count += 1\n        #             dfs(i, j)\n        # return count"
    },
    {
        "number": 419,
        "title": "Battleships in a Board",
        "difficulty": 1,
        "prompt": "class Solution:\n    def countBattleships(self, board: List[List[str]]) -> int:\n        \"\"\"\n        Given an m x n matrix board where each cell is a battleship 'X' or empty '.', return the number of the battleships on board.\n        Battleships can only be placed horizontally or vertically on board. In other words, they can only be made of the shape 1 x k (1 row, k columns) or k x 1 (k rows, 1 column), where k can be of any size. At least one horizontal or vertical cell separates between two battleships (i.e., there are no adjacent battleships).\n        Example 1:\n        Input: board = [[\"X\",\".\",\".\",\"X\"],[\".\",\".\",\".\",\"X\"],[\".\",\".\",\".\",\"X\"]]\n        Output: 2\n        Example 2:\n        Input: board = [[\".\"]]\n        Output: 0\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        # Time: O(m * n)\n        # Space: O(m * n)\n        if not board:\n            return 0\n        \n        m, n = len(board), len(board[0])\n        \n        def dfs(i, j):\n            if i < 0 or i >= m or j < 0 or j >= n or board[i][j]!= 'X':\n                return\n            board[i][j] = '.'\n            dfs(i - 1, j)\n            dfs(i + 1, j)\n            dfs(i, j - 1)\n            dfs(i, j + 1)\n        \n        count = 0\n        for i in range(m):\n            for j in range(n):\n                if board[i][j] == 'X':\n                    count += 1\n                    dfs(i, j)\n        return count\n    \n    def countBattleships_2(self, board: List[List[str]]) -> int:\n        \"\"\"\n        Given an m x n matrix board where each cell is a battleship 'X' or empty '.', return the number of the battleships on board.\n        Battleships can only be placed horizontally or vertically on board. In other words, they can only be made of the shape 1 x k ("
    },
    {
        "number": 420,
        "title": "Strong Password Checker",
        "difficulty": 2,
        "prompt": "class Solution:\n    def strongPasswordChecker(self, password: str) -> int:\n        \"\"\"\n        A password is considered strong if the below conditions are all met:\n            It has at least 6 characters and at most 20 characters.\n            It contains at least one lowercase letter, at least one uppercase letter, and at least one digit.\n            It does not contain three repeating characters in a row (i.e., \"Baaabb0\" is weak, but \"Baaba0\" is strong).\n        Given a string password, return the minimum number of steps required to make password strong. if password is already strong, return 0.\n        In one step, you can:\n            Insert one character to password,\n            Delete one character from password, or\n            Replace one character of password with another character.\n        Example 1:\n        Input: password = \"a\"\n        Output: 5\n        Example 2:\n        Input: password = \"aA1\"\n        Output: 3\n        Example 3:\n        Input: password = \"1337C0d3\"\n        Output: 0\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        # \u5148\u628a\u957f\u5ea6\u4e0d\u7b26\u5408\u7684\u60c5\u51b5\u5168\u90e8\u6392\u9664\n        if len(password) < 6:\n            return 6 - len(password)\n        if len(password) > 20:\n            return 20 - len(password)\n        # \u5148\u628a\u957f\u5ea6\u7b26\u5408\u7684\u60c5\u51b5\u5168\u90e8\u6392\u9664\n        # \u5148\u628a\u5c0f\u5199\u5b57\u6bcd\u6392\u9664\n        count_lower = 0\n        for i in password:\n            if i.islower():\n                count_lower += 1\n        if count_lower == 0:\n            return 1\n        # \u5148\u628a\u5927\u5199\u5b57\u6bcd\u6392\u9664\n        count_upper = 0\n        for i in password:\n            if i.isupper():\n                count_upper += 1\n        if count_upper == 0:\n            return 1\n        # \u5148\u628a\u6570\u5b57\u6392\u9664\n        count_digit = 0\n        for i in password:\n            if i.isdigit():\n                count_digit += 1\n        if count_digit == 0:\n            return 1\n"
    },
    {
        "number": 420,
        "title": "Strong Password Checker",
        "difficulty": 2,
        "prompt": "class Solution:\n    def strongPasswordChecker(self, password: str) -> int:\n        \"\"\"\n        A password is considered strong if the below conditions are all met:\n            It has at least 6 characters and at most 20 characters.\n            It contains at least one lowercase letter, at least one uppercase letter, and at least one digit.\n            It does not contain three repeating characters in a row (i.e., \"Baaabb0\" is weak, but \"Baaba0\" is strong).\n        Given a string password, return the minimum number of steps required to make password strong. if password is already strong, return 0.\n        In one step, you can:\n            Insert one character to password,\n            Delete one character from password, or\n            Replace one character of password with another character.\n        Example 1:\n        Input: password = \"a\"\n        Output: 5\n        Example 2:\n        Input: password = \"aA1\"\n        Output: 3\n        Example 3:\n        Input: password = \"1337C0d3\"\n        Output: 0\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        # \u6211\u7684\u89e3\u6cd5\n        # \u5148\u628apassword\u8f6c\u6362\u6210list\uff0c\u7136\u540e\u68c0\u67e5\u6bcf\u4e2a\u5143\u7d20\u662f\u5426\u7b26\u5408\u8981\u6c42\uff0c\u7136\u540e\u628a\u4e0d\u7b26\u5408\u8981\u6c42\u7684\u5143\u7d20\u52a0\u5230res\u91cc\u9762\n        # \u5982\u679cres\u4e3a0\uff0c\u8bf4\u660epassword\u5df2\u7ecf\u7b26\u5408\u8981\u6c42\uff0c\u76f4\u63a5\u8fd4\u56de0\n        # \u5982\u679cres\u4e0d\u4e3a0\uff0c\u8bf4\u660epassword\u4e0d\u7b26\u5408\u8981\u6c42\uff0c\u9700\u8981\u6dfb\u52a0\u6216\u8005\u5220\u9664\u6216\u8005\u66ff\u6362\u4e00\u4e2a\u5143\u7d20\n        # \u6211\u7684\u89e3\u6cd5\u662f\u6bcf\u6b21\u68c0\u67e5\u4e00\u4e2a\u5143\u7d20\uff0c\u5982\u679c\u4e0d\u7b26\u5408\u8981\u6c42\uff0c\u90a3\u4e48\u5c31\u628a\u8fd9\u4e2a\u5143\u7d20\u52a0\ufffd"
    },
    {
        "number": 421,
        "title": "Maximum XOR of Two Numbers in an Array",
        "difficulty": 1,
        "prompt": "class Solution:\n    def findMaximumXOR(self, nums: List[int]) -> int:\n        \"\"\"\n        Given an integer array nums, return the maximum result of nums[i] XOR nums[j], where 0 <= i <= j < n.\n        Example 1:\n        Input: nums = [3,10,5,25,2,8]\n        Output: 28\n        Explanation: The maximum result is 5 XOR 25 = 28.\n        Example 2:\n        Input: nums = [14,70,53,83,49,91,36,80,92,51,66,70]\n        Output: 127\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        # \u5148\u5bf9\u6570\u7ec4\u8fdb\u884c\u6392\u5e8f\uff0c\u7136\u540e\u4ece\u6700\u5927\u503c\u5f00\u59cb\u904d\u5386\uff0c\u6bcf\u6b21\u904d\u5386\u5230\u7684\u503c\u90fd\u4f1a\u88ab\u66ff\u6362\u4e3a\u6700\u5927\u503c\u7684\u4e8c\u8fdb\u5236\u8868\u793a\uff0c\u7136\u540e\u6bd4\u8f83\u4e24\u4e2a\u4e8c\u8fdb\u5236\u8868\u793a\u7684\u5f02\u6216\u503c\uff0c\n        # \u5982\u679c\u5927\u4e8e0\uff0c\u5219\u8bf4\u660e\u6700\u5927\u503c\u7684\u4e8c\u8fdb\u5236\u8868\u793a\u7684\u5f02\u6216\u503c\u5927\u4e8e\u5f53\u524d\u503c\u7684\u4e8c\u8fdb\u5236\u8868\u793a\u7684\u5f02\u6216\u503c\uff0c\u5219\u8bf4\u660e\u6700\u5927\u503c\u7684\u4e8c\u8fdb\u5236\u8868\u793a\u7684\u5f02\u6216\u503c\u5c0f\u4e8e\u5f53\u524d\u503c\u7684\u4e8c\u8fdb\u5236\u8868\u793a\u7684\u5f02\u6216\u503c\uff0c\n        # \u5219\u8bf4\u660e\u6700\u5927\u503c\u7684\ufffd"
    },
    {
        "number": 421,
        "title": "Maximum XOR of Two Numbers in an Array",
        "difficulty": 1,
        "prompt": "class Solution:\n    def findMaximumXOR(self, nums: List[int]) -> int:\n        \"\"\"\n        Given an integer array nums, return the maximum result of nums[i] XOR nums[j], where 0 <= i <= j < n.\n        Example 1:\n        Input: nums = [3,10,5,25,2,8]\n        Output: 28\n        Explanation: The maximum result is 5 XOR 25 = 28.\n        Example 2:\n        Input: nums = [14,70,53,83,49,91,36,80,92,51,66,70]\n        Output: 127\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        # \u53ea\u6709\u4e00\u4e2a\u6570\u5b57\u7684\u60c5\u51b5\n        if len(nums) == 1:\n            return nums[0]\n        # \u53ea\u6709\u4e24\u4e2a\u6570\u5b57\u7684\u60c5\u51b5\n        if len(nums) == 2:\n            return nums[0] ^ nums[1]\n        # \u4e24\u4e2a\u6570\u5b57\u7684\u60c5\u51b5\n        if len(nums) == 2:\n            return max(nums[0], nums[1])\n        # \u4e09\u4e2a\u6570\u5b57\u7684\u60c5\u51b5\n        if len(nums) == 3:\n            return max(nums[0] ^ nums[1], nums[0] ^ nums[2], nums[1] ^ nums[2])\n        # \u4e09\u4e2a\u6570\u5b57\u4ee5\u4e0a\u7684\u60c5\u51b5\n        # \u5148\u6392\u5e8f\n        nums.sort()\n        # \u521d\u59cb\u5316\u7ed3\u679c\n        res = 0\n        # \u5faa\u73af\u904d\u5386\n        for i in range(len(nums) - 1, -1, -1):\n            # \u5982\u679c\u5f53\u524d\u6570\ufffd"
    },
    {
        "number": 423,
        "title": "Reconstruct Original Digits from English",
        "difficulty": 1,
        "prompt": "class Solution:\n    def originalDigits(self, s: str) -> str:\n        \"\"\"\n        Given a string s containing an out-of-order English representation of digits 0-9, return the digits in ascending order.\n        Example 1:\n        Input: s = \"owoztneoer\"\n        Output: \"012\"\n        Example 2:\n        Input: s = \"fviefuro\"\n        Output: \"45\"\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        # 1. count the frequency of each character\n        # 2. sort the frequency in descending order\n        # 3. for each character, find the most frequent digit\n        # 4. for each digit, find the most frequent character\n        # 5. for each character, find the most frequent digit\n        # 6. for each digit, find the most frequent character\n        # 7. for each character, find the most frequent digit\n        # 8. for each digit, find the most frequent character\n        # 9. for each character, find the most frequent digit\n        # 10. for each digit, find the most frequent character\n        # 11. for each character, find the most frequent digit\n        # 12. for each digit, find the most frequent character\n        # 13. for each character, find the most frequent digit\n        # 14. for each digit, find the most frequent character\n        # 15. for each character, find the most frequent digit\n        # 16. for each digit, find the most frequent character\n        # 17. for each character, find the most frequent digit\n        # 18. for each digit, find the most frequent character\n        # 19. for each character, find the most frequent digit\n        # 20. for each digit, find the most frequent character\n        # 21. for each character, find the most frequent digit\n        # 22. for each digit, find the most frequent"
    },
    {
        "number": 423,
        "title": "Reconstruct Original Digits from English",
        "difficulty": 1,
        "prompt": "class Solution:\n    def originalDigits(self, s: str) -> str:\n        \"\"\"\n        Given a string s containing an out-of-order English representation of digits 0-9, return the digits in ascending order.\n        Example 1:\n        Input: s = \"owoztneoer\"\n        Output: \"012\"\n        Example 2:\n        Input: s = \"fviefuro\"\n        Output: \"45\"\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        # 1. build a hashmap to store the frequency of each character\n        # 2. build a hashmap to store the frequency of each character in the input string\n        # 3. build a hashmap to store the frequency of each character in the input string\n        # 4. build a hashmap to store the frequency of each character in the input string\n        # 5. build a hashmap to store the frequency of each character in the input string\n        # 6. build a hashmap to store the frequency of each character in the input string\n        # 7. build a hashmap to store the frequency of each character in the input string\n        # 8. build a hashmap to store the frequency of each character in the input string\n        # 9. build a hashmap to store the frequency of each character in the input string\n        # 10. build a hashmap to store the frequency of each character in the input string\n        # 11. build a hashmap to store the frequency of each character in the input string\n        # 12. build a hashmap to store the frequency of each character in the input string\n        # 13. build a hashmap to store the frequency of each character in the input string\n        # 14. build a hashmap to store the frequency of each character in the input string\n        # 15. build a hashmap to store the frequency of each character in the input string\n        # 16."
    },
    {
        "number": 424,
        "title": "Longest Repeating Character Replacement",
        "difficulty": 1,
        "prompt": "class Solution:\n    def characterReplacement(self, s: str, k: int) -> int:\n        \"\"\"\n        You are given a string s and an integer k. You can choose any character of the string and change it to any other uppercase English character. You can perform this operation at most k times.\n        Return the length of the longest substring containing the same letter you can get after performing the above operations.\n        Example 1:\n        Input: s = \"ABAB\", k = 2\n        Output: 4\n        Explanation: Replace the two 'A's with two 'B's or vice versa.\n        Example 2:\n        Input: s = \"AABABBA\", k = 1\n        Output: 4\n        Explanation: Replace the one 'A' in the middle with 'B' and form \"AABBBBA\".\n        The substring \"BBBB\" has the longest repeating letters, which is 4.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        # sliding window\n        # O(n)\n        # O(k)\n        # window = collections.defaultdict(int)\n        # left, right = 0, 0\n        # max_len = 0\n        # for right in range(len(s)):\n        #     window[s[right]] += 1\n        #     max_len = max(max_len, window[s[right]])\n        #     if right - left + 1 - max_len > k:\n        #         window[s[left]] -= 1\n        #         left += 1\n        # return right - left + 1"
    },
    {
        "number": 424,
        "title": "Longest Repeating Character Replacement",
        "difficulty": 1,
        "prompt": "class Solution:\n    def characterReplacement(self, s: str, k: int) -> int:\n        \"\"\"\n        You are given a string s and an integer k. You can choose any character of the string and change it to any other uppercase English character. You can perform this operation at most k times.\n        Return the length of the longest substring containing the same letter you can get after performing the above operations.\n        Example 1:\n        Input: s = \"ABAB\", k = 2\n        Output: 4\n        Explanation: Replace the two 'A's with two 'B's or vice versa.\n        Example 2:\n        Input: s = \"AABABBA\", k = 1\n        Output: 4\n        Explanation: Replace the one 'A' in the middle with 'B' and form \"AABBBBA\".\n        The substring \"BBBB\" has the longest repeating letters, which is 4.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        # sliding window\n        # O(n)\n        # O(k)\n        # counter = collections.Counter()\n        # max_len = 0\n        # left = 0\n        # for right in range(len(s)):\n        #     counter[s[right]] += 1\n        #     max_len = max(max_len, counter[s[right]])\n        #     if right - left + 1 - max_len > k:\n        #         counter[s[left]] -= 1\n        #         left += 1\n        # return right - left + 1"
    },
    {
        "number": 427,
        "title": "Construct Quad Tree",
        "difficulty": 1,
        "prompt": "\n        \"\"\"\nclass Node:\n    def __init__(self, val, isLeaf, topLeft, topRight, bottomLeft, bottomRight):\n        self.val = val\n        self.isLeaf = isLeaf\n        self.topLeft = topLeft\n        self.topRight = topRight\n        self.bottomLeft = bottomLeft\n        self.bottomRight = bottomRight\n        Given a n * n matrix grid of 0's and 1's only. We want to represent the grid with a Quad-Tree.\n        Return the root of the Quad-Tree representing the grid.\n        Notice that you can assign the value of a node to True or False when isLeaf is False, and both are accepted in the answer.\n        A Quad-Tree is a tree data structure in which each internal node has exactly four children. Besides, each node has two attributes:\n            val: True if the node represents a grid of 1's or False if the node represents a grid of 0's.\n            isLeaf: True if the node is leaf node on the tree or False if the node has the four children.\n        class Node {\n            public boolean val;\n            public boolean isLeaf;\n            public Node topLeft;\n            public Node topRight;\n            public Node bottomLeft;\n            public Node bottomRight;\n        }\n        We can construct a Quad-Tree from a two-dimensional area using the following steps:\n            If the current grid has the same value (i.e all 1's or all 0's) set isLeaf True and set val to the value of the grid and set the four children to Null and stop.\n            If the current grid has different values, set isLeaf to False and set val to any value and divide the current grid into four sub-grids as shown in the photo.\n            Recurse for each of the children with the proper sub-grid.\n        If you want to know more about the Quad-Tree, you can refer to the wiki.\n        Quad-Tree format:\n        The output represents the serialized format of a Quad-Tree using level order traversal, where null signifies a path terminator where no node exists below.\n        It is very similar to the serialization of the binary tree. The only difference is that the node is represented as a list [isLeaf, val].\n        If the value of isLeaf or val is True we represent it as 1 in the list [isLeaf, val] and if the value of isLeaf or val is False we represent it as 0.\n        Example 1:\n        Input: grid = [[0,1],[1,0]]\n        Output: [[0,1],[1,0],[1,1],[1,1],[1,0]]\n        Explanation: The explanation of this example is shown below:\n        Notice that 0 represnts False and 1 represents True in the photo representing the Quad-Tree.\n        Example 2:\n        Input: grid = [[1,1,1,1,0,0,0,0],[1,1,1,1,0,0,0,0],[1,1,1,1,1,1,1,1],[1,1,1,1,1,1,1,1],[1,1,1,1,0,0,0,0],[1,1,1,1,0,0,0,0],[1,1,1,1,0,0,0,0],[1,1,1,1,0,0,0,0]]\n        Output: [[0,1],[1,1],[0,1],[1,1],[1,0],null,null,null,null,[1,0],[1,0],[1,1],[1,1]]\n        Explanation: All values in the grid are not the same. We divide the grid into four sub-grids.\n        The topLeft, bottomLeft and bottomRight each has the same value.\n        The topRight have different values so we divide it into 4 sub-grids where each has the same value.\n        Explanation is shown in the photo below:\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        self.val = val\n        self.isLeaf = isLeaf\n        self.topLeft = topLeft\n        self.topRight = topRight\n        self.bottomLeft = bottomLeft\n        self.bottomRight = bottomRight\n        \nclass Solution:\n    def construct(self, grid):\n        \"\"\"\n        :type grid: List[List[int]]\n        :rtype: Node\n        \"\"\"\n        if not grid:\n            return None\n        n = len(grid)\n        if n == 1:\n            return Node(grid[0][0], True, None, None, None, None)\n        \n        topLeft = self.construct([row[:n//2] for row in grid[:n//2]])\n        topRight = self.construct([row[n//2:] for row in grid[:n//2]])\n        bottomLeft = self.construct([row[:n//2] for row in grid[n//2:]])\n        bottomRight = self.construct([row[n//2:] for row in grid[n//2:]])\n        \n        return Node(True, False, topLeft, topRight, bottomLeft, bottomRight)\n<|endoftext|><|endoftext|><|endoftext|>"
    },
    {
        "number": 427,
        "title": "Construct Quad Tree",
        "difficulty": 1,
        "prompt": "\n        \"\"\"\nclass Node:\n    def __init__(self, val, isLeaf, topLeft, topRight, bottomLeft, bottomRight):\n        self.val = val\n        self.isLeaf = isLeaf\n        self.topLeft = topLeft\n        self.topRight = topRight\n        self.bottomLeft = bottomLeft\n        self.bottomRight = bottomRight\n        Given a n * n matrix grid of 0's and 1's only. We want to represent the grid with a Quad-Tree.\n        Return the root of the Quad-Tree representing the grid.\n        Notice that you can assign the value of a node to True or False when isLeaf is False, and both are accepted in the answer.\n        A Quad-Tree is a tree data structure in which each internal node has exactly four children. Besides, each node has two attributes:\n            val: True if the node represents a grid of 1's or False if the node represents a grid of 0's.\n            isLeaf: True if the node is leaf node on the tree or False if the node has the four children.\n        class Node {\n            public boolean val;\n            public boolean isLeaf;\n            public Node topLeft;\n            public Node topRight;\n            public Node bottomLeft;\n            public Node bottomRight;\n        }\n        We can construct a Quad-Tree from a two-dimensional area using the following steps:\n            If the current grid has the same value (i.e all 1's or all 0's) set isLeaf True and set val to the value of the grid and set the four children to Null and stop.\n            If the current grid has different values, set isLeaf to False and set val to any value and divide the current grid into four sub-grids as shown in the photo.\n            Recurse for each of the children with the proper sub-grid.\n        If you want to know more about the Quad-Tree, you can refer to the wiki.\n        Quad-Tree format:\n        The output represents the serialized format of a Quad-Tree using level order traversal, where null signifies a path terminator where no node exists below.\n        It is very similar to the serialization of the binary tree. The only difference is that the node is represented as a list [isLeaf, val].\n        If the value of isLeaf or val is True we represent it as 1 in the list [isLeaf, val] and if the value of isLeaf or val is False we represent it as 0.\n        Example 1:\n        Input: grid = [[0,1],[1,0]]\n        Output: [[0,1],[1,0],[1,1],[1,1],[1,0]]\n        Explanation: The explanation of this example is shown below:\n        Notice that 0 represnts False and 1 represents True in the photo representing the Quad-Tree.\n        Example 2:\n        Input: grid = [[1,1,1,1,0,0,0,0],[1,1,1,1,0,0,0,0],[1,1,1,1,1,1,1,1],[1,1,1,1,1,1,1,1],[1,1,1,1,0,0,0,0],[1,1,1,1,0,0,0,0],[1,1,1,1,0,0,0,0],[1,1,1,1,0,0,0,0]]\n        Output: [[0,1],[1,1],[0,1],[1,1],[1,0],null,null,null,null,[1,0],[1,0],[1,1],[1,1]]\n        Explanation: All values in the grid are not the same. We divide the grid into four sub-grids.\n        The topLeft, bottomLeft and bottomRight each has the same value.\n        The topRight have different values so we divide it into 4 sub-grids where each has the same value.\n        Explanation is shown in the photo below:\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        self.val = val\n        self.isLeaf = isLeaf\n        self.topLeft = topLeft\n        self.topRight = topRight\n        self.bottomLeft = bottomLeft\n        self.bottomRight = bottomRight"
    },
    {
        "number": 429,
        "title": "N-ary Tree Level Order Traversal",
        "difficulty": 1,
        "prompt": "\n        \"\"\"\nclass Node:\n    def __init__(self, val=None, children=None):\n        self.val = val\n        self.children = children\n        Given an n-ary tree, return the level order traversal of its nodes' values.\n        Nary-Tree input serialization is represented in their level order traversal, each group of children is separated by the null value (See examples).\n        Example 1:\n        Input: root = [1,null,3,2,4,null,5,6]\n        Output: [[1],[3,2,4],[5,6]]\n        Example 2:\n        Input: root = [1,null,2,3,4,5,null,null,6,7,null,8,null,9,10,null,null,11,null,12,null,13,null,null,14]\n        Output: [[1],[2,3,4,5],[6,7,8,9,10],[11,12,13],[14]]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        self.res = []\n        self.level = []\n        self.level_num = 0\n        self.dfs(root)\n        return self.res"
    },
    {
        "number": 429,
        "title": "N-ary Tree Level Order Traversal",
        "difficulty": 1,
        "prompt": "\n        \"\"\"\nclass Node:\n    def __init__(self, val=None, children=None):\n        self.val = val\n        self.children = children\n        Given an n-ary tree, return the level order traversal of its nodes' values.\n        Nary-Tree input serialization is represented in their level order traversal, each group of children is separated by the null value (See examples).\n        Example 1:\n        Input: root = [1,null,3,2,4,null,5,6]\n        Output: [[1],[3,2,4],[5,6]]\n        Example 2:\n        Input: root = [1,null,2,3,4,5,null,null,6,7,null,8,null,9,10,null,null,11,null,12,null,13,null,null,14]\n        Output: [[1],[2,3,4,5],[6,7,8,9,10],[11,12,13],[14]]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        self.res = []\n        self.level = []\n        self.level_nodes = []\n        self.dfs(root)\n        return self.res"
    },
    {
        "number": 430,
        "title": "Flatten a Multilevel Doubly Linked List",
        "difficulty": 1,
        "prompt": "\n        \"\"\"\nclass Node:\n    def __init__(self, val, prev, next, child):\n        self.val = val\n        self.prev = prev\n        self.next = next\n        self.child = child\n        You are given a doubly linked list, which contains nodes that have a next pointer, a previous pointer, and an additional child pointer. This child pointer may or may not point to a separate doubly linked list, also containing these special nodes. These child lists may have one or more children of their own, and so on, to produce a multilevel data structure as shown in the example below.\n        Given the head of the first level of the list, flatten the list so that all the nodes appear in a single-level, doubly linked list. Let curr be a node with a child list. The nodes in the child list should appear after curr and before curr.next in the flattened list.\n        Return the head of the flattened list. The nodes in the list must have all of their child pointers set to null.\n        Example 1:\n        Input: head = [1,2,3,4,5,6,null,null,null,7,8,9,10,null,null,11,12]\n        Output: [1,2,3,7,8,11,12,9,10,4,5,6]\n        Explanation: The multilevel linked list in the input is shown.\n        After flattening the multilevel linked list it becomes:\n        Example 2:\n        Input: head = [1,2,null,3]\n        Output: [1,3,2]\n        Explanation: The multilevel linked list in the input is shown.\n        After flattening the multilevel linked list it becomes:\n        Example 3:\n        Input: head = []\n        Output: []\n        Explanation: There could be empty list in the input.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "<|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>"
    },
    {
        "number": 430,
        "title": "Flatten a Multilevel Doubly Linked List",
        "difficulty": 1,
        "prompt": "\n        \"\"\"\nclass Node:\n    def __init__(self, val, prev, next, child):\n        self.val = val\n        self.prev = prev\n        self.next = next\n        self.child = child\n        You are given a doubly linked list, which contains nodes that have a next pointer, a previous pointer, and an additional child pointer. This child pointer may or may not point to a separate doubly linked list, also containing these special nodes. These child lists may have one or more children of their own, and so on, to produce a multilevel data structure as shown in the example below.\n        Given the head of the first level of the list, flatten the list so that all the nodes appear in a single-level, doubly linked list. Let curr be a node with a child list. The nodes in the child list should appear after curr and before curr.next in the flattened list.\n        Return the head of the flattened list. The nodes in the list must have all of their child pointers set to null.\n        Example 1:\n        Input: head = [1,2,3,4,5,6,null,null,null,7,8,9,10,null,null,11,12]\n        Output: [1,2,3,7,8,11,12,9,10,4,5,6]\n        Explanation: The multilevel linked list in the input is shown.\n        After flattening the multilevel linked list it becomes:\n        Example 2:\n        Input: head = [1,2,null,3]\n        Output: [1,3,2]\n        Explanation: The multilevel linked list in the input is shown.\n        After flattening the multilevel linked list it becomes:\n        Example 3:\n        Input: head = []\n        Output: []\n        Explanation: There could be empty list in the input.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        self.val = val\n        self.prev = prev\n        self.next = next\n        self.child = child\n        \"\"\"\n        :type head: Node\n        :rtype: Node\n        \"\"\"\nclass Node:\n    def __init__(self, val, prev, next, child):\n        self.val = val\n        self.prev = prev\n        self.next = next\n        self.child = child\n        You are given a doubly linked list, which contains N nodes. The list is circular, which means that the last node points to the first node.\n        You have to delete the node that is at the tail of the list.\n        Return the new head of the list after the deletion.\n        Example 1:\n        Input: head = [1,2,3,4,5]\n        Output: [1,2,3,5]\n        Explanation: The list is like 1 -> 2 -> 3 -> 4 -> 5 -> 1, which is a circular list.\n        We delete the node that is at the tail, which is the node with value 3. After deleting, the list becomes 1 -> 2 -> 4 -> 5 -> 1.\n        Example 2:\n        Input: head = [1,2,3,4,5,6]\n        Output: [1,2,4,5,6]\n        Ex"
    },
    {
        "number": 432,
        "title": "All O`one Data Structure",
        "difficulty": 2,
        "prompt": "class AllOne:\n    def __init__(self):\n    def inc(self, key: str) -> None:\n    def dec(self, key: str) -> None:\n    def getMaxKey(self) -> str:\n    def getMinKey(self) -> str:\n        \"\"\"\n        Design a data structure to store the strings' count with the ability to return the strings with minimum and maximum counts.\n        Implement the AllOne class:\n            AllOne() Initializes the object of the data structure.\n            inc(String key) Increments the count of the string key by 1. If key does not exist in the data structure, insert it with count 1.\n            dec(String key) Decrements the count of the string key by 1. If the count of key is 0 after the decrement, remove it from the data structure. It is guaranteed that key exists in the data structure before the decrement.\n            getMaxKey() Returns one of the keys with the maximal count. If no element exists, return an empty string \"\".\n            getMinKey() Returns one of the keys with the minimum count. If no element exists, return an empty string \"\".\n        Note that each function must run in O(1) average time complexity.\n        Example 1:\n        Input\n        [\"AllOne\", \"inc\", \"inc\", \"getMaxKey\", \"getMinKey\", \"inc\", \"getMaxKey\", \"getMinKey\"]\n        [[], [\"hello\"], [\"hello\"], [], [], [\"leet\"], [], []]\n        Output\n        [null, null, null, \"hello\", \"hello\", null, \"hello\", \"leet\"]\n        Explanation\n        AllOne allOne = new AllOne();\n        allOne.inc(\"hello\");\n        allOne.inc(\"hello\");\n        allOne.getMaxKey(); // return \"hello\"\n        allOne.getMinKey(); // return \"hello\"\n        allOne.inc(\"leet\");\n        allOne.getMaxKey(); // return \"hello\"\n        allOne.getMinKey(); // return \"leet\"\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        self.d = {}\n        self.max_key = \"\"\n        self.min_key = \"\"\n        self.max_count = 0\n        self.min_count = 0\n        \n    def inc(self, key: str) -> None:\n        if key in self.d:\n            self.d[key] += 1\n            if self.d[key] > self.max_count:\n                self.max_count = self.d[key]\n                self.max_key = key\n            if self.d[key] < self.min_count:\n                self.min_count = self.d[key]\n                self.min_key = key\n        else:\n            self.d[key] = 1\n            if self.d[key] > self.max_count:\n                self.max_count = self.d[key]\n                self.max_key = key\n            if self.d[key] < self.min_count:\n                self.min_count = self.d[key]\n                self.min_key = key\n        \n    def dec(self, key: str) -> None:\n        if key in self.d:\n            if self.d[key] == 1:\n                del self.d[key]\n                self.max_count"
    },
    {
        "number": 432,
        "title": "All O`one Data Structure",
        "difficulty": 2,
        "prompt": "class AllOne:\n    def __init__(self):\n    def inc(self, key: str) -> None:\n    def dec(self, key: str) -> None:\n    def getMaxKey(self) -> str:\n    def getMinKey(self) -> str:\n        \"\"\"\n        Design a data structure to store the strings' count with the ability to return the strings with minimum and maximum counts.\n        Implement the AllOne class:\n            AllOne() Initializes the object of the data structure.\n            inc(String key) Increments the count of the string key by 1. If key does not exist in the data structure, insert it with count 1.\n            dec(String key) Decrements the count of the string key by 1. If the count of key is 0 after the decrement, remove it from the data structure. It is guaranteed that key exists in the data structure before the decrement.\n            getMaxKey() Returns one of the keys with the maximal count. If no element exists, return an empty string \"\".\n            getMinKey() Returns one of the keys with the minimum count. If no element exists, return an empty string \"\".\n        Note that each function must run in O(1) average time complexity.\n        Example 1:\n        Input\n        [\"AllOne\", \"inc\", \"inc\", \"getMaxKey\", \"getMinKey\", \"inc\", \"getMaxKey\", \"getMinKey\"]\n        [[], [\"hello\"], [\"hello\"], [], [], [\"leet\"], [], []]\n        Output\n        [null, null, null, \"hello\", \"hello\", null, \"hello\", \"leet\"]\n        Explanation\n        AllOne allOne = new AllOne();\n        allOne.inc(\"hello\");\n        allOne.inc(\"hello\");\n        allOne.getMaxKey(); // return \"hello\"\n        allOne.getMinKey(); // return \"hello\"\n        allOne.inc(\"leet\");\n        allOne.getMaxKey(); // return \"hello\"\n        allOne.getMinKey(); // return \"leet\"\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        self.d = {}\n        self.min = None\n        self.max = None\n        \n    def inc(self, key: str) -> None:\n        if key in self.d:\n            self.d[key] += 1\n        else:\n            self.d[key] = 1\n            if self.min is None or self.d[self.min] > self.d[key]:\n                self.min = key\n            if self.max is None or self.d[self.max] < self.d[key]:\n                self.max = key\n        \n    def dec(self, key: str) -> None:\n        if key in self.d:\n            self.d[key] -= 1\n            if self.d[key] == 0:\n                del self.d[key]\n                if self.min == key:\n                    self.min = None\n                    if len(self.d) > 0:\n                        self.min = min(self.d, key=self.d.get)\n                if self.max == key:\n                    self.max = None\n                    if len(self.d) > 0:\n                        self.max = max(self.d, key=self.d.get)\n        \n    def getMaxKey(self) -> str:\n        return"
    },
    {
        "number": 433,
        "title": "Minimum Genetic Mutation",
        "difficulty": 1,
        "prompt": "class Solution:\n    def minMutation(self, startGene: str, endGene: str, bank: List[str]) -> int:\n        \"\"\"\n        A gene string can be represented by an 8-character long string, with choices from 'A', 'C', 'G', and 'T'.\n        Suppose we need to investigate a mutation from a gene string startGene to a gene string endGene where one mutation is defined as one single character changed in the gene string.\n            For example, \"AACCGGTT\" --> \"AACCGGTA\" is one mutation.\n        There is also a gene bank bank that records all the valid gene mutations. A gene must be in bank to make it a valid gene string.\n        Given the two gene strings startGene and endGene and the gene bank bank, return the minimum number of mutations needed to mutate from startGene to endGene. If there is no such a mutation, return -1.\n        Note that the starting point is assumed to be valid, so it might not be included in the bank.\n        Example 1:\n        Input: startGene = \"AACCGGTT\", endGene = \"AACCGGTA\", bank = [\"AACCGGTA\"]\n        Output: 1\n        Example 2:\n        Input: startGene = \"AACCGGTT\", endGene = \"AAACGGTA\", bank = [\"AACCGGTA\",\"AACCGCTA\",\"AAACGGTA\"]\n        Output: 2\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        if endGene not in bank:\n            return -1\n        queue = deque([(startGene, 0)])\n        visited = set()\n        while queue:\n            curr, step = queue.popleft()\n            if curr == endGene:\n                return step\n            for i in range(len(curr)):\n                for c in 'ACGT':\n                    new_gene = curr[:i] + c + curr[i+1:]\n                    if new_gene in bank and new_gene not in visited:\n                        queue.append((new_gene, step+1))\n                        visited.add(new_gene)\n        return -1"
    },
    {
        "number": 433,
        "title": "Minimum Genetic Mutation",
        "difficulty": 1,
        "prompt": "class Solution:\n    def minMutation(self, startGene: str, endGene: str, bank: List[str]) -> int:\n        \"\"\"\n        A gene string can be represented by an 8-character long string, with choices from 'A', 'C', 'G', and 'T'.\n        Suppose we need to investigate a mutation from a gene string startGene to a gene string endGene where one mutation is defined as one single character changed in the gene string.\n            For example, \"AACCGGTT\" --> \"AACCGGTA\" is one mutation.\n        There is also a gene bank bank that records all the valid gene mutations. A gene must be in bank to make it a valid gene string.\n        Given the two gene strings startGene and endGene and the gene bank bank, return the minimum number of mutations needed to mutate from startGene to endGene. If there is no such a mutation, return -1.\n        Note that the starting point is assumed to be valid, so it might not be included in the bank.\n        Example 1:\n        Input: startGene = \"AACCGGTT\", endGene = \"AACCGGTA\", bank = [\"AACCGGTA\"]\n        Output: 1\n        Example 2:\n        Input: startGene = \"AACCGGTT\", endGene = \"AAACGGTA\", bank = [\"AACCGGTA\",\"AACCGCTA\",\"AAACGGTA\"]\n        Output: 2\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        if endGene not in bank:\n            return -1\n        queue = collections.deque([(startGene, 0)])\n        visited = set()\n        while queue:\n            gene, step = queue.popleft()\n            if gene == endGene:\n                return step\n            for i in range(len(gene)):\n                for c in 'ACGT':\n                    newGene = gene[:i] + c + gene[i + 1:]\n                    if newGene in bank and newGene not in visited:\n                        queue.append((newGene, step + 1))\n                        visited.add(newGene)\n        return -1"
    },
    {
        "number": 434,
        "title": "Number of Segments in a String",
        "difficulty": 0,
        "prompt": "class Solution:\n    def countSegments(self, s: str) -> int:\n        \"\"\"\n        Given a string s, return the number of segments in the string.\n        A segment is defined to be a contiguous sequence of non-space characters.\n        Example 1:\n        Input: s = \"Hello, my name is John\"\n        Output: 5\n        Explanation: The five segments are [\"Hello,\", \"my\", \"name\", \"is\", \"John\"]\n        Example 2:\n        Input: s = \"Hello\"\n        Output: 1\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        return len(s.split())"
    },
    {
        "number": 434,
        "title": "Number of Segments in a String",
        "difficulty": 0,
        "prompt": "class Solution:\n    def countSegments(self, s: str) -> int:\n        \"\"\"\n        Given a string s, return the number of segments in the string.\n        A segment is defined to be a contiguous sequence of non-space characters.\n        Example 1:\n        Input: s = \"Hello, my name is John\"\n        Output: 5\n        Explanation: The five segments are [\"Hello,\", \"my\", \"name\", \"is\", \"John\"]\n        Example 2:\n        Input: s = \"Hello\"\n        Output: 1\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        return len(s.split())"
    },
    {
        "number": 435,
        "title": "Non-overlapping Intervals",
        "difficulty": 1,
        "prompt": "class Solution:\n    def eraseOverlapIntervals(self, intervals: List[List[int]]) -> int:\n        \"\"\"\n        Given an array of intervals intervals where intervals[i] = [starti, endi], return the minimum number of intervals you need to remove to make the rest of the intervals non-overlapping.\n        Example 1:\n        Input: intervals = [[1,2],[2,3],[3,4],[1,3]]\n        Output: 1\n        Explanation: [1,3] can be removed and the rest of the intervals are non-overlapping.\n        Example 2:\n        Input: intervals = [[1,2],[1,2],[1,2]]\n        Output: 2\n        Explanation: You need to remove two [1,2] to make the rest of the intervals non-overlapping.\n        Example 3:\n        Input: intervals = [[1,2],[2,3]]\n        Output: 0\n        Explanation: You don't need to remove any of the intervals since they're already non-overlapping.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        intervals.sort(key=lambda x: x[1])\n        count = 0\n        end = intervals[0][1]\n        for i in range(1, len(intervals)):\n            if intervals[i][0] < end:\n                count += 1\n            else:\n                end = intervals[i][1]\n        return count\n<|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>"
    },
    {
        "number": 435,
        "title": "Non-overlapping Intervals",
        "difficulty": 1,
        "prompt": "class Solution:\n    def eraseOverlapIntervals(self, intervals: List[List[int]]) -> int:\n        \"\"\"\n        Given an array of intervals intervals where intervals[i] = [starti, endi], return the minimum number of intervals you need to remove to make the rest of the intervals non-overlapping.\n        Example 1:\n        Input: intervals = [[1,2],[2,3],[3,4],[1,3]]\n        Output: 1\n        Explanation: [1,3] can be removed and the rest of the intervals are non-overlapping.\n        Example 2:\n        Input: intervals = [[1,2],[1,2],[1,2]]\n        Output: 2\n        Explanation: You need to remove two [1,2] to make the rest of the intervals non-overlapping.\n        Example 3:\n        Input: intervals = [[1,2],[2,3]]\n        Output: 0\n        Explanation: You don't need to remove any of the intervals since they're already non-overlapping.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        # sort the intervals by start time\n        # for each interval, check if it overlaps with the previous interval\n        # if it does, remove the previous interval and add the new interval\n        # if it doesn't, add the new interval\n        # return the number of intervals removed\n        intervals.sort(key=lambda x: x[0])\n        count = 0\n        for i in range(1, len(intervals)):\n            if intervals[i][0] < intervals[i-1][1]:\n                count += 1\n                intervals[i-1] = [intervals[i-1][0], intervals[i][1]]\n        return count"
    },
    {
        "number": 436,
        "title": "Find Right Interval",
        "difficulty": 1,
        "prompt": "class Solution:\n    def findRightInterval(self, intervals: List[List[int]]) -> List[int]:\n        \"\"\"\n        You are given an array of intervals, where intervals[i] = [starti, endi] and each starti is unique.\n        The right interval for an interval i is an interval j such that startj >= endi and startj is minimized. Note that i may equal j.\n        Return an array of right interval indices for each interval i. If no right interval exists for interval i, then put -1 at index i.\n        Example 1:\n        Input: intervals = [[1,2]]\n        Output: [-1]\n        Explanation: There is only one interval in the collection, so it outputs -1.\n        Example 2:\n        Input: intervals = [[3,4],[2,3],[1,2]]\n        Output: [-1,0,1]\n        Explanation: There is no right interval for [3,4].\n        The right interval for [2,3] is [3,4] since start0 = 3 is the smallest start that is >= end1 = 3.\n        The right interval for [1,2] is [2,3] since start1 = 2 is the smallest start that is >= end2 = 2.\n        Example 3:\n        Input: intervals = [[1,4],[2,3],[3,4]]\n        Output: [-1,2,-1]\n        Explanation: There is no right interval for [1,4] and [3,4].\n        The right interval for [2,3] is [3,4] since start2 = 3 is the smallest start that is >= end1 = 3.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        # sort intervals by start\n        intervals.sort(key=lambda x: x[0])\n        # print(intervals)\n        # initialize result\n        result = [-1] * len(intervals)\n        # iterate intervals\n        for i in range(len(intervals)):\n            # iterate intervals again\n            for j in range(len(intervals)):\n                # if interval i is the right interval for interval j\n                if intervals[i][0] >= intervals[j][1]:\n                    # set result at index i to j\n                    result[i] = j\n                    # break out of inner loop\n                    break\n        # return result\n        return result"
    },
    {
        "number": 436,
        "title": "Find Right Interval",
        "difficulty": 1,
        "prompt": "class Solution:\n    def findRightInterval(self, intervals: List[List[int]]) -> List[int]:\n        \"\"\"\n        You are given an array of intervals, where intervals[i] = [starti, endi] and each starti is unique.\n        The right interval for an interval i is an interval j such that startj >= endi and startj is minimized. Note that i may equal j.\n        Return an array of right interval indices for each interval i. If no right interval exists for interval i, then put -1 at index i.\n        Example 1:\n        Input: intervals = [[1,2]]\n        Output: [-1]\n        Explanation: There is only one interval in the collection, so it outputs -1.\n        Example 2:\n        Input: intervals = [[3,4],[2,3],[1,2]]\n        Output: [-1,0,1]\n        Explanation: There is no right interval for [3,4].\n        The right interval for [2,3] is [3,4] since start0 = 3 is the smallest start that is >= end1 = 3.\n        The right interval for [1,2] is [2,3] since start1 = 2 is the smallest start that is >= end2 = 2.\n        Example 3:\n        Input: intervals = [[1,4],[2,3],[3,4]]\n        Output: [-1,2,-1]\n        Explanation: There is no right interval for [1,4] and [3,4].\n        The right interval for [2,3] is [3,4] since start2 = 3 is the smallest start that is >= end1 = 3.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        # Sort the intervals by start\n        intervals.sort(key=lambda x: x[0])\n        # Initialize the result array\n        res = [-1] * len(intervals)\n        # Iterate through the intervals\n        for i in range(len(intervals)):\n            # Iterate through the intervals again\n            for j in range(i + 1, len(intervals)):\n                # If the start of the current interval is greater than or equal to the end of the previous interval\n                if intervals[i][0] >= intervals[j][1]:\n                    # Set the result at the index of the current interval to the index of the previous interval\n                    res[i] = j\n                    # Break out of the inner loop\n                    break\n        # Return the result array\n        return res"
    },
    {
        "number": 437,
        "title": "Path Sum III",
        "difficulty": 1,
        "prompt": "class Solution:\n    def pathSum(self, root: Optional[TreeNode], targetSum: int) -> int:\n        \"\"\"\n        Given the root of a binary tree and an integer targetSum, return the number of paths where the sum of the values along the path equals targetSum.\n        The path does not need to start or end at the root or a leaf, but it must go downwards (i.e., traveling only from parent nodes to child nodes).\n        Example 1:\n        Input: root = [10,5,-3,3,2,null,11,3,-2,null,1], targetSum = 8\n        Output: 3\n        Explanation: The paths that sum to 8 are shown.\n        Example 2:\n        Input: root = [5,4,8,11,null,13,4,7,2,null,null,5,1], targetSum = 22\n        Output: 3\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        if not root:\n            return 0\n        self.count = 0\n        self.dfs(root, targetSum)\n        return self.count"
    },
    {
        "number": 437,
        "title": "Path Sum III",
        "difficulty": 1,
        "prompt": "class Solution:\n    def pathSum(self, root: Optional[TreeNode], targetSum: int) -> int:\n        \"\"\"\n        Given the root of a binary tree and an integer targetSum, return the number of paths where the sum of the values along the path equals targetSum.\n        The path does not need to start or end at the root or a leaf, but it must go downwards (i.e., traveling only from parent nodes to child nodes).\n        Example 1:\n        Input: root = [10,5,-3,3,2,null,11,3,-2,null,1], targetSum = 8\n        Output: 3\n        Explanation: The paths that sum to 8 are shown.\n        Example 2:\n        Input: root = [5,4,8,11,null,13,4,7,2,null,null,5,1], targetSum = 22\n        Output: 3\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        if not root:\n            return 0\n        self.count = 0\n        self.dfs(root, targetSum, 0)\n        return self.count"
    },
    {
        "number": 438,
        "title": "Find All Anagrams in a String",
        "difficulty": 1,
        "prompt": "class Solution:\n    def findAnagrams(self, s: str, p: str) -> List[int]:\n        \"\"\"\n        Given two strings s and p, return an array of all the start indices of p's anagrams in s. You may return the answer in any order.\n        An Anagram is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once.\n        Example 1:\n        Input: s = \"cbaebabacd\", p = \"abc\"\n        Output: [0,6]\n        Explanation:\n        The substring with start index = 0 is \"cba\", which is an anagram of \"abc\".\n        The substring with start index = 6 is \"bac\", which is an anagram of \"abc\".\n        Example 2:\n        Input: s = \"abab\", p = \"ab\"\n        Output: [0,1,2]\n        Explanation:\n        The substring with start index = 0 is \"ab\", which is an anagram of \"ab\".\n        The substring with start index = 1 is \"ba\", which is an anagram of \"ab\".\n        The substring with start index = 2 is \"ab\", which is an anagram of \"ab\".\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        if not s or not p:\n            return []\n        if len(p) > len(s):\n            return []\n        p_dict = {}\n        for i in p:\n            p_dict[i] = p_dict.get(i, 0) + 1\n        s_dict = {}\n        res = []\n        for i in range(len(s)):\n            s_dict[s[i]] = s_dict.get(s[i], 0) + 1\n            if i >= len(p):\n                s_dict[s[i - len(p)]] -= 1\n                if s_dict[s[i - len(p)]] == 0:\n                    del s_dict[s[i - len(p)]]\n            if s_dict == p_dict:\n                res.append(i - len(p) + 1)\n        return res"
    },
    {
        "number": 438,
        "title": "Find All Anagrams in a String",
        "difficulty": 1,
        "prompt": "class Solution:\n    def findAnagrams(self, s: str, p: str) -> List[int]:\n        \"\"\"\n        Given two strings s and p, return an array of all the start indices of p's anagrams in s. You may return the answer in any order.\n        An Anagram is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once.\n        Example 1:\n        Input: s = \"cbaebabacd\", p = \"abc\"\n        Output: [0,6]\n        Explanation:\n        The substring with start index = 0 is \"cba\", which is an anagram of \"abc\".\n        The substring with start index = 6 is \"bac\", which is an anagram of \"abc\".\n        Example 2:\n        Input: s = \"abab\", p = \"ab\"\n        Output: [0,1,2]\n        Explanation:\n        The substring with start index = 0 is \"ab\", which is an anagram of \"ab\".\n        The substring with start index = 1 is \"ba\", which is an anagram of \"ab\".\n        The substring with start index = 2 is \"ab\", which is an anagram of \"ab\".\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        # Time complexity: O(n)\n        # Space complexity: O(n)\n        # hash table\n        # hash table: O(n)\n        # hash table: O(n)\n        # hash table: O(n)\n        # hash table: O(n)\n        # hash table: O(n)\n        # hash table: O(n)\n        # hash table: O(n)\n        # hash table: O(n)\n        # hash table: O(n)\n        # hash table: O(n)\n        # hash table: O(n)\n        # hash table: O(n)\n        # hash table: O(n)\n        # hash table: O(n)\n        # hash table: O(n)\n        # hash table: O(n)\n        # hash table: O(n)\n        # hash table: O(n)\n        # hash table: O(n)\n        # hash table: O(n)\n        # hash table: O(n)\n        # hash table: O(n)\n        # hash table: O(n)\n        # hash table: O(n)\n        # hash table: O(n)\n        # hash table: O(n)\n        # hash table: O(n)\n        # hash table:"
    },
    {
        "number": 440,
        "title": "K-th Smallest in Lexicographical Order",
        "difficulty": 2,
        "prompt": "class Solution:\n    def findKthNumber(self, n: int, k: int) -> int:\n        \"\"\"\n        Given two integers n and k, return the kth lexicographically smallest integer in the range [1, n].\n        Example 1:\n        Input: n = 13, k = 2\n        Output: 10\n        Explanation: The lexicographical order is [1, 10, 11, 12, 13, 2, 3, 4, 5, 6, 7, 8, 9], so the second smallest number is 10.\n        Example 2:\n        Input: n = 1, k = 1\n        Output: 1\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        def count(n, k):\n            \"\"\"\n            Return the number of numbers less than n with k digits.\n            \"\"\"\n            if k == 1:\n                return n\n            if k == 2:\n                return n * (n + 1) // 2\n            return n * count(n - 1, k - 1) + count(n - 1, k)"
    },
    {
        "number": 440,
        "title": "K-th Smallest in Lexicographical Order",
        "difficulty": 2,
        "prompt": "class Solution:\n    def findKthNumber(self, n: int, k: int) -> int:\n        \"\"\"\n        Given two integers n and k, return the kth lexicographically smallest integer in the range [1, n].\n        Example 1:\n        Input: n = 13, k = 2\n        Output: 10\n        Explanation: The lexicographical order is [1, 10, 11, 12, 13, 2, 3, 4, 5, 6, 7, 8, 9], so the second smallest number is 10.\n        Example 2:\n        Input: n = 1, k = 1\n        Output: 1\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        def count(n, k):\n            \"\"\"\n            Return the number of numbers in the range [1, n] with a count of k.\n            \"\"\"\n            if k == 1:\n                return n\n            if k == 2:\n                return n * (n + 1) // 2\n            if k == 3:\n                return n * (n + 1) * (n + 2) // 6\n            if k == 4:\n                return n * (n + 1) * (n + 2) * (n + 3) // 24\n            if k == 5:\n                return n * (n + 1) * (n + 2) * (n + 3) * (n + 4) // 120\n            if k == 6:\n                return n * (n + 1) * (n + 2) * (n + 3) * (n + 4) * (n + 5) // 720\n            if k == 7:\n                return n * (n + 1) * (n + 2) * (n + 3) * (n + 4) * (n + 5) * (n + 6) // 5040\n            if k == 8:\n                return n * (n + 1) * (n + 2) * (n + 3) * (n + 4) * (n + 5) * (n + 6) * ("
    },
    {
        "number": 441,
        "title": "Arranging Coins",
        "difficulty": 0,
        "prompt": "class Solution:\n    def arrangeCoins(self, n: int) -> int:\n        \"\"\"\n        You have n coins and you want to build a staircase with these coins. The staircase consists of k rows where the ith row has exactly i coins. The last row of the staircase may be incomplete.\n        Given the integer n, return the number of complete rows of the staircase you will build.\n        Example 1:\n        Input: n = 5\n        Output: 2\n        Explanation: Because the 3rd row is incomplete, we return 2.\n        Example 2:\n        Input: n = 8\n        Output: 3\n        Explanation: Because the 4th row is incomplete, we return 3.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        if n == 0:\n            return 0\n        if n == 1:\n            return 1\n        if n == 2:\n            return 2\n        if n == 3:\n            return 3\n        if n == 4:\n            return 4\n        if n == 5:\n            return 5\n        if n == 6:\n            return 6\n        if n == 7:\n            return 7\n        if n == 8:\n            return 8\n        if n == 9:\n            return 9\n        if n == 10:\n            return 10\n        if n == 11:\n            return 11\n        if n == 12:\n            return 12\n        if n == 13:\n            return 13\n        if n == 14:\n            return 14\n        if n == 15:\n            return 15\n        if n == 16:\n            return 16\n        if n == 17:\n            return 17\n        if n == 18:\n            return 18\n        if n == 19:\n            return 19\n        if n == 20:\n            return 20\n        if n == 21:\n            return 21\n        if n == 22:\n            return 22\n        if n == 23:\n            return 23\n        if n == 24:\n            return 24\n        if n == 25:\n            return 25\n        if n == 26:\n            return 26\n        if n"
    },
    {
        "number": 441,
        "title": "Arranging Coins",
        "difficulty": 0,
        "prompt": "class Solution:\n    def arrangeCoins(self, n: int) -> int:\n        \"\"\"\n        You have n coins and you want to build a staircase with these coins. The staircase consists of k rows where the ith row has exactly i coins. The last row of the staircase may be incomplete.\n        Given the integer n, return the number of complete rows of the staircase you will build.\n        Example 1:\n        Input: n = 5\n        Output: 2\n        Explanation: Because the 3rd row is incomplete, we return 2.\n        Example 2:\n        Input: n = 8\n        Output: 3\n        Explanation: Because the 4th row is incomplete, we return 3.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        if n == 0:\n            return 0\n        if n == 1:\n            return 1\n        if n == 2:\n            return 2\n        if n == 3:\n            return 3\n        if n == 4:\n            return 4\n        if n == 5:\n            return 5\n        if n == 6:\n            return 6\n        if n == 7:\n            return 7\n        if n == 8:\n            return 8\n        if n == 9:\n            return 9\n        if n == 10:\n            return 10\n        if n == 11:\n            return 11\n        if n == 12:\n            return 12\n        if n == 13:\n            return 13\n        if n == 14:\n            return 14\n        if n == 15:\n            return 15\n        if n == 16:\n            return 16\n        if n == 17:\n            return 17\n        if n == 18:\n            return 18\n        if n == 19:\n            return 19\n        if n == 20:\n            return 20\n        if n == 21:\n            return 21\n        if n == 22:\n            return 22\n        if n == 23:\n            return 23\n        if n == 24:\n            return 24\n        if n == 25:\n            return 25\n        if n == 26:\n            return 26\n        if n"
    },
    {
        "number": 442,
        "title": "Find All Duplicates in an Array",
        "difficulty": 1,
        "prompt": "class Solution:\n    def findDuplicates(self, nums: List[int]) -> List[int]:\n        \"\"\"\n        Given an integer array nums of length n where all the integers of nums are in the range [1, n] and each integer appears once or twice, return an array of all the integers that appears twice.\n        You must write an algorithm that runs in O(n) time and uses only constant extra space.\n        Example 1:\n        Input: nums = [4,3,2,7,8,2,3,1]\n        Output: [2,3]\n        Example 2:\n        Input: nums = [1,1,2]\n        Output: [1]\n        Example 3:\n        Input: nums = [1]\n        Output: []\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        # Solution 1:\n        # O(n) time and O(1) space\n        # nums.sort()\n        # res = []\n        # for i in range(1, len(nums)):\n        #     if nums[i] == nums[i - 1]:\n        #         res.append(nums[i])\n        # return res"
    },
    {
        "number": 442,
        "title": "Find All Duplicates in an Array",
        "difficulty": 1,
        "prompt": "class Solution:\n    def findDuplicates(self, nums: List[int]) -> List[int]:\n        \"\"\"\n        Given an integer array nums of length n where all the integers of nums are in the range [1, n] and each integer appears once or twice, return an array of all the integers that appears twice.\n        You must write an algorithm that runs in O(n) time and uses only constant extra space.\n        Example 1:\n        Input: nums = [4,3,2,7,8,2,3,1]\n        Output: [2,3]\n        Example 2:\n        Input: nums = [1,1,2]\n        Output: [1]\n        Example 3:\n        Input: nums = [1]\n        Output: []\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        # O(n) time, O(1) space\n        # nums.sort()\n        # res = []\n        # for i in range(1, len(nums)):\n        #     if nums[i] == nums[i-1]:\n        #         res.append(nums[i])\n        # return res"
    },
    {
        "number": 443,
        "title": "String Compression",
        "difficulty": 1,
        "prompt": "class Solution:\n    def compress(self, chars: List[str]) -> int:\n        \"\"\"\n        Given an array of characters chars, compress it using the following algorithm:\n        Begin with an empty string s. For each group of consecutive repeating characters in chars:\n            If the group's length is 1, append the character to s.\n            Otherwise, append the character followed by the group's length.\n        The compressed string s should not be returned separately, but instead, be stored in the input character array chars. Note that group lengths that are 10 or longer will be split into multiple characters in chars.\n        After you are done modifying the input array, return the new length of the array.\n        You must write an algorithm that uses only constant extra space.\n        Example 1:\n        Input: chars = [\"a\",\"a\",\"b\",\"b\",\"c\",\"c\",\"c\"]\n        Output: Return 6, and the first 6 characters of the input array should be: [\"a\",\"2\",\"b\",\"2\",\"c\",\"3\"]\n        Explanation: The groups are \"aa\", \"bb\", and \"ccc\". This compresses to \"a2b2c3\".\n        Example 2:\n        Input: chars = [\"a\"]\n        Output: Return 1, and the first character of the input array should be: [\"a\"]\n        Explanation: The only group is \"a\", which remains uncompressed since it's a single character.\n        Example 3:\n        Input: chars = [\"a\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\"]\n        Output: Return 4, and the first 4 characters of the input array should be: [\"a\",\"b\",\"1\",\"2\"].\n        Explanation: The groups are \"a\" and \"bbbbbbbbbbbb\". This compresses to \"ab12\".\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        # Time: O(n)\n        # Space: O(1)\n        i = 0\n        for j in range(len(chars)):\n            if j == len(chars) - 1 or chars[j]!= chars[j+1]:\n                chars[i] = chars[j]\n                i += 1\n                if j > i:\n                    for digit in str(j - i + 1):\n                        chars[i] = digit\n                        i += 1\n        return i"
    },
    {
        "number": 443,
        "title": "String Compression",
        "difficulty": 1,
        "prompt": "class Solution:\n    def compress(self, chars: List[str]) -> int:\n        \"\"\"\n        Given an array of characters chars, compress it using the following algorithm:\n        Begin with an empty string s. For each group of consecutive repeating characters in chars:\n            If the group's length is 1, append the character to s.\n            Otherwise, append the character followed by the group's length.\n        The compressed string s should not be returned separately, but instead, be stored in the input character array chars. Note that group lengths that are 10 or longer will be split into multiple characters in chars.\n        After you are done modifying the input array, return the new length of the array.\n        You must write an algorithm that uses only constant extra space.\n        Example 1:\n        Input: chars = [\"a\",\"a\",\"b\",\"b\",\"c\",\"c\",\"c\"]\n        Output: Return 6, and the first 6 characters of the input array should be: [\"a\",\"2\",\"b\",\"2\",\"c\",\"3\"]\n        Explanation: The groups are \"aa\", \"bb\", and \"ccc\". This compresses to \"a2b2c3\".\n        Example 2:\n        Input: chars = [\"a\"]\n        Output: Return 1, and the first character of the input array should be: [\"a\"]\n        Explanation: The only group is \"a\", which remains uncompressed since it's a single character.\n        Example 3:\n        Input: chars = [\"a\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\"]\n        Output: Return 4, and the first 4 characters of the input array should be: [\"a\",\"b\",\"1\",\"2\"].\n        Explanation: The groups are \"a\" and \"bbbbbbbbbbbb\". This compresses to \"ab12\".\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        # Time: O(n), space: O(1)\n        i = 0\n        for j in range(len(chars)):\n            if j == len(chars) - 1 or chars[j]!= chars[j + 1]:\n                chars[i] = chars[j]\n                i += 1\n                if j > i:\n                    for digit in str(j - i + 1):\n                        chars[i] = digit\n                        i += 1\n        return i"
    },
    {
        "number": 445,
        "title": "Add Two Numbers II",
        "difficulty": 1,
        "prompt": "class Solution:\n    def addTwoNumbers(self, l1: Optional[ListNode], l2: Optional[ListNode]) -> Optional[ListNode]:\n        \"\"\"\n        You are given two non-empty linked lists representing two non-negative integers. The most significant digit comes first and each of their nodes contains a single digit. Add the two numbers and return the sum as a linked list.\n        You may assume the two numbers do not contain any leading zero, except the number 0 itself.\n        Example 1:\n        Input: l1 = [7,2,4,3], l2 = [5,6,4]\n        Output: [7,8,0,7]\n        Example 2:\n        Input: l1 = [2,4,3], l2 = [5,6,4]\n        Output: [8,0,7]\n        Example 3:\n        Input: l1 = [0], l2 = [0]\n        Output: [0]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        # convert to int\n        num1 = 0\n        num2 = 0\n        while l1:\n            num1 = num1 * 10 + l1.val\n            l1 = l1.next\n        while l2:\n            num2 = num2 * 10 + l2.val\n            l2 = l2.next\n        # add\n        num3 = num1 + num2\n        # convert back to linked list\n        l3 = ListNode(0)\n        while num3:\n            l3.next = ListNode(num3 % 10)\n            num3 = num3 // 10\n            l3 = l3.next\n        return l3.next\n<|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>"
    },
    {
        "number": 445,
        "title": "Add Two Numbers II",
        "difficulty": 1,
        "prompt": "class Solution:\n    def addTwoNumbers(self, l1: Optional[ListNode], l2: Optional[ListNode]) -> Optional[ListNode]:\n        \"\"\"\n        You are given two non-empty linked lists representing two non-negative integers. The most significant digit comes first and each of their nodes contains a single digit. Add the two numbers and return the sum as a linked list.\n        You may assume the two numbers do not contain any leading zero, except the number 0 itself.\n        Example 1:\n        Input: l1 = [7,2,4,3], l2 = [5,6,4]\n        Output: [7,8,0,7]\n        Example 2:\n        Input: l1 = [2,4,3], l2 = [5,6,4]\n        Output: [8,0,7]\n        Example 3:\n        Input: l1 = [0], l2 = [0]\n        Output: [0]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        # Solution 1:\n        # Time: O(n)\n        # Space: O(n)\n        # ans = ListNode(0)\n        # curr = ans\n        # carry = 0\n        # while l1 or l2:\n        #     x = l1.val if l1 else 0\n        #     y = l2.val if l2 else 0\n        #     sum = x + y + carry\n        #     carry = sum // 10\n        #     curr.next = ListNode(sum % 10)\n        #     curr = curr.next\n        #     if l1:\n        #         l1 = l1.next\n        #     if l2:\n        #         l2 = l2.next\n        # if carry > 0:\n        #     curr.next = ListNode(carry)\n        # return ans.next"
    },
    {
        "number": 446,
        "title": "Arithmetic Slices II - Subsequence",
        "difficulty": 2,
        "prompt": "class Solution:\n    def numberOfArithmeticSlices(self, nums: List[int]) -> int:\n        \"\"\"\n        Given an integer array nums, return the number of all the arithmetic subsequences of nums.\n        A sequence of numbers is called arithmetic if it consists of at least three elements and if the difference between any two consecutive elements is the same.\n            For example, [1, 3, 5, 7, 9], [7, 7, 7, 7], and [3, -1, -5, -9] are arithmetic sequences.\n            For example, [1, 1, 2, 5, 7] is not an arithmetic sequence.\n        A subsequence of an array is a sequence that can be formed by removing some elements (possibly none) of the array.\n            For example, [2,5,10] is a subsequence of [1,2,1,2,4,1,5,10].\n        The test cases are generated so that the answer fits in 32-bit integer.\n        Example 1:\n        Input: nums = [2,4,6,8,10]\n        Output: 7\n        Explanation: All arithmetic subsequence slices are:\n        [2,4,6]\n        [4,6,8]\n        [6,8,10]\n        [2,4,6,8]\n        [4,6,8,10]\n        [2,4,6,8,10]\n        [2,6,10]\n        Example 2:\n        Input: nums = [7,7,7,7,7]\n        Output: 16\n        Explanation: Any subsequence of this array is arithmetic.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        # Solution 1: DP\n        # O(n^2)\n        # dp[i] = the number of arithmetic subsequence in nums[:i]\n        # dp[i] = sum(dp[j]) for j in range(i) if nums[j] + nums[i] == nums[i]\n        # dp[i] = sum(dp[j]) for j in range(i) if nums[j] + nums[i] == nums[i] - 1\n        # dp[i] = sum(dp[j]) for j in range(i) if nums[j] + nums[i] == nums[i] + 1\n        # dp[i] = sum(dp[j]) for j in range(i) if nums[j] + nums[i] == nums[i] - 2\n        # dp[i] = sum(dp[j]) for j in range(i) if nums[j] + nums[i] == nums[i] + 2\n        # dp[i] = sum(dp[j]) for j in range(i) if nums[j] + nums[i] == nums[i] - 3\n        # dp[i] = sum(dp["
    },
    {
        "number": 446,
        "title": "Arithmetic Slices II - Subsequence",
        "difficulty": 2,
        "prompt": "class Solution:\n    def numberOfArithmeticSlices(self, nums: List[int]) -> int:\n        \"\"\"\n        Given an integer array nums, return the number of all the arithmetic subsequences of nums.\n        A sequence of numbers is called arithmetic if it consists of at least three elements and if the difference between any two consecutive elements is the same.\n            For example, [1, 3, 5, 7, 9], [7, 7, 7, 7], and [3, -1, -5, -9] are arithmetic sequences.\n            For example, [1, 1, 2, 5, 7] is not an arithmetic sequence.\n        A subsequence of an array is a sequence that can be formed by removing some elements (possibly none) of the array.\n            For example, [2,5,10] is a subsequence of [1,2,1,2,4,1,5,10].\n        The test cases are generated so that the answer fits in 32-bit integer.\n        Example 1:\n        Input: nums = [2,4,6,8,10]\n        Output: 7\n        Explanation: All arithmetic subsequence slices are:\n        [2,4,6]\n        [4,6,8]\n        [6,8,10]\n        [2,4,6,8]\n        [4,6,8,10]\n        [2,4,6,8,10]\n        [2,6,10]\n        Example 2:\n        Input: nums = [7,7,7,7,7]\n        Output: 16\n        Explanation: Any subsequence of this array is arithmetic.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        # Solution 1:\n        # Time O(n^2)\n        # Space O(1)\n        # res = 0\n        # for i in range(len(nums)):\n        #     for j in range(i+1, len(nums)):\n        #         if nums[j] - nums[i] == nums[i] - nums[j-1]:\n        #             res += 1\n        # return res"
    },
    {
        "number": 447,
        "title": "Number of Boomerangs",
        "difficulty": 1,
        "prompt": "class Solution:\n    def numberOfBoomerangs(self, points: List[List[int]]) -> int:\n        \"\"\"\n        You are given n points in the plane that are all distinct, where points[i] = [xi, yi]. A boomerang is a tuple of points (i, j, k) such that the distance between i and j equals the distance between i and k (the order of the tuple matters).\n        Return the number of boomerangs.\n        Example 1:\n        Input: points = [[0,0],[1,0],[2,0]]\n        Output: 2\n        Explanation: The two boomerangs are [[1,0],[0,0],[2,0]] and [[1,0],[2,0],[0,0]].\n        Example 2:\n        Input: points = [[1,1],[2,2],[3,3]]\n        Output: 2\n        Example 3:\n        Input: points = [[1,1]]\n        Output: 0\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        \n        # Solution 1:\n        # Time O(n^2)\n        # Space O(n)\n        # n = len(points)\n        # res = 0\n        # for i in range(n):\n        #     for j in range(i+1, n):\n        #         for k in range(j+1, n):\n        #             if self.distance(points[i], points[j]) == self.distance(points[i], points[k]):\n        #                 res += 1\n        # return res\n        \n        # Solution 2:\n        # Time O(n^2)\n        # Space O(n)\n        # n = len(points)\n        # res = 0\n        # for i in range(n):\n        #     dic = {}\n        #     for j in range(n):\n        #         if i!= j:\n        #             dic[self.distance(points[i], points[j])] = dic.get(self.distance(points[i], points[j]), 0) + 1\n        #     for k in dic:\n        #         res += dic[k] * (dic[k] - 1)\n        # return res\n        \n        # Solution 3:\n        # Time O(n^2)\n        "
    },
    {
        "number": 447,
        "title": "Number of Boomerangs",
        "difficulty": 1,
        "prompt": "class Solution:\n    def numberOfBoomerangs(self, points: List[List[int]]) -> int:\n        \"\"\"\n        You are given n points in the plane that are all distinct, where points[i] = [xi, yi]. A boomerang is a tuple of points (i, j, k) such that the distance between i and j equals the distance between i and k (the order of the tuple matters).\n        Return the number of boomerangs.\n        Example 1:\n        Input: points = [[0,0],[1,0],[2,0]]\n        Output: 2\n        Explanation: The two boomerangs are [[1,0],[0,0],[2,0]] and [[1,0],[2,0],[0,0]].\n        Example 2:\n        Input: points = [[1,1],[2,2],[3,3]]\n        Output: 2\n        Example 3:\n        Input: points = [[1,1]]\n        Output: 0\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        \n        # O(n^2)\n        # n = len(points)\n        # res = 0\n        # for i in range(n):\n        #     for j in range(i+1, n):\n        #         for k in range(j+1, n):\n        #             if (points[i][0]-points[j][0])**2 + (points[i][1]-points[j][1])**2 == (points[i][0]-points[k][0])**2 + (points[i][1]-points[k][1])**2:\n        #                 res += 1\n        # return res\n        \n        # O(n^2)\n        # n = len(points)\n        # res = 0\n        # for i in range(n):\n        #     dic = {}\n        #     for j in range(n):\n        #         if i!= j:\n        #             dic[(points[i][0]-points[j][0])**2 + (points[i][1]-points[j][1])**2] = 1\n        #     for k in dic:\n        #         res += dic[k]\n        # return res\n        \n        # O(n^2)\n        # n = len(points)\n        #"
    },
    {
        "number": 448,
        "title": "Find All Numbers Disappeared in an Array",
        "difficulty": 0,
        "prompt": "class Solution:\n    def findDisappearedNumbers(self, nums: List[int]) -> List[int]:\n        \"\"\"\n        Given an array nums of n integers where nums[i] is in the range [1, n], return an array of all the integers in the range [1, n] that do not appear in nums.\n        Example 1:\n        Input: nums = [4,3,2,7,8,2,3,1]\n        Output: [5,6]\n        Example 2:\n        Input: nums = [1,1]\n        Output: [2]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        # 1. \u66b4\u529b\u6cd5\n        # for i in range(1, len(nums)+1):\n        #     if i not in nums:\n        #         return [i]\n        # return []"
    },
    {
        "number": 448,
        "title": "Find All Numbers Disappeared in an Array",
        "difficulty": 0,
        "prompt": "class Solution:\n    def findDisappearedNumbers(self, nums: List[int]) -> List[int]:\n        \"\"\"\n        Given an array nums of n integers where nums[i] is in the range [1, n], return an array of all the integers in the range [1, n] that do not appear in nums.\n        Example 1:\n        Input: nums = [4,3,2,7,8,2,3,1]\n        Output: [5,6]\n        Example 2:\n        Input: nums = [1,1]\n        Output: [2]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        # 1. \u7528set\u5b58\u50a8nums\u4e2d\u7684\u6570\u5b57\uff0c\u7136\u540e\u904d\u53861~n\uff0c\u5982\u679c\u4e0d\u5728set\u4e2d\uff0c\u5219\u52a0\u5165\u5230set\u4e2d\n        # 2. \u518d\u904d\u5386set\uff0c\u5c06\u4e0d\u5728set\u4e2d\u7684\u6570\u5b57\u52a0\u5165\u5230ans\u4e2d\n        # 3. \u8fd4\u56deans\n        # \u65f6\u95f4\u590d\u6742\u5ea6O(n)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6O(n)\n        # set_nums = set(nums)\n        # ans = []\n        # for i in range(1, len(nums)+1):\n        #     if i not in set_nums:\n        #         ans.append(i)\n        # return ans"
    },
    {
        "number": 449,
        "title": "Serialize and Deserialize BST",
        "difficulty": 1,
        "prompt": "class Codec:\n    def serialize(self, root: Optional[TreeNode]) -> str:\n        \"\"\"Encodes a tree to a single string.\n        Serialization is converting a data structure or object into a sequence of bits so that it can be stored in a file or memory buffer, or transmitted across a network connection link to be reconstructed later in the same or another computer environment.\n        Design an algorithm to serialize and deserialize a binary search tree. There is no restriction on how your serialization/deserialization algorithm should work. You need to ensure that a binary search tree can be serialized to a string, and this string can be deserialized to the original tree structure.\n        The encoded string should be as compact as possible.\n        Example 1:\n        Input: root = [2,1,3]\n        Output: [2,1,3]\n        Example 2:\n        Input: root = []\n        Output: []\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        if not root:\n            return \"\"\n        res = []\n        def dfs(node):\n            if not node:\n                res.append(\"#\")\n                return\n            res.append(str(node.val))\n            dfs(node.left)\n            dfs(node.right)\n        dfs(root)\n        return \" \".join(res)"
    },
    {
        "number": 449,
        "title": "Serialize and Deserialize BST",
        "difficulty": 1,
        "prompt": "class Codec:\n    def serialize(self, root: Optional[TreeNode]) -> str:\n        \"\"\"Encodes a tree to a single string.\n        Serialization is converting a data structure or object into a sequence of bits so that it can be stored in a file or memory buffer, or transmitted across a network connection link to be reconstructed later in the same or another computer environment.\n        Design an algorithm to serialize and deserialize a binary search tree. There is no restriction on how your serialization/deserialization algorithm should work. You need to ensure that a binary search tree can be serialized to a string, and this string can be deserialized to the original tree structure.\n        The encoded string should be as compact as possible.\n        Example 1:\n        Input: root = [2,1,3]\n        Output: [2,1,3]\n        Example 2:\n        Input: root = []\n        Output: []\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        if not root:\n            return \"\"\n        queue = collections.deque()\n        queue.append(root)\n        res = []\n        while queue:\n            node = queue.popleft()\n            if node:\n                res.append(str(node.val))\n                queue.append(node.left)\n                queue.append(node.right)\n            else:\n                res.append(\"#\")\n        return \",\".join(res)"
    },
    {
        "number": 450,
        "title": "Delete Node in a BST",
        "difficulty": 1,
        "prompt": "class Solution:\n    def deleteNode(self, root: Optional[TreeNode], key: int) -> Optional[TreeNode]:\n        \"\"\"\n        Given a root node reference of a BST and a key, delete the node with the given key in the BST. Return the root node reference (possibly updated) of the BST.\n        Basically, the deletion can be divided into two stages:\n            Search for a node to remove.\n            If the node is found, delete the node.\n        Example 1:\n        Input: root = [5,3,6,2,4,null,7], key = 3\n        Output: [5,4,6,2,null,null,7]\n        Explanation: Given key to delete is 3. So we find the node with value 3 and delete it.\n        One valid answer is [5,4,6,2,null,null,7], shown in the above BST.\n        Please notice that another valid answer is [5,2,6,null,4,null,7] and it's also accepted.\n        Example 2:\n        Input: root = [5,3,6,2,4,null,7], key = 0\n        Output: [5,3,6,2,4,null,7]\n        Explanation: The tree does not contain a node with value = 0.\n        Example 3:\n        Input: root = [], key = 0\n        Output: []\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        if not root:\n            return None\n        if root.val == key:\n            if not root.right:\n                return root.left\n            if not root.left:\n                return root.right\n            if root.left and root.right:\n                temp = root.right\n                while temp.left:\n                    temp = temp.left\n                root.val = temp.val\n                root.right = self.deleteNode(root.right, root.val)\n        elif root.val > key:\n            root.left = self.deleteNode(root.left, key)\n        else:\n            root.right = self.deleteNode(root.right, key)\n        return root"
    },
    {
        "number": 450,
        "title": "Delete Node in a BST",
        "difficulty": 1,
        "prompt": "class Solution:\n    def deleteNode(self, root: Optional[TreeNode], key: int) -> Optional[TreeNode]:\n        \"\"\"\n        Given a root node reference of a BST and a key, delete the node with the given key in the BST. Return the root node reference (possibly updated) of the BST.\n        Basically, the deletion can be divided into two stages:\n            Search for a node to remove.\n            If the node is found, delete the node.\n        Example 1:\n        Input: root = [5,3,6,2,4,null,7], key = 3\n        Output: [5,4,6,2,null,null,7]\n        Explanation: Given key to delete is 3. So we find the node with value 3 and delete it.\n        One valid answer is [5,4,6,2,null,null,7], shown in the above BST.\n        Please notice that another valid answer is [5,2,6,null,4,null,7] and it's also accepted.\n        Example 2:\n        Input: root = [5,3,6,2,4,null,7], key = 0\n        Output: [5,3,6,2,4,null,7]\n        Explanation: The tree does not contain a node with value = 0.\n        Example 3:\n        Input: root = [], key = 0\n        Output: []\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        if not root:\n            return None\n        if root.val == key:\n            # if the node is the root node, just return the left child\n            if not root.left:\n                return root.right\n            # if the node is not the root node, and the left child is empty, return the right child\n            if not root.right:\n                return root.left\n            # if the node is not the root node, and the left child is not empty, we need to find the maximum value in the left subtree, and replace the node with that value\n            # then return the left child\n            else:\n                # find the maximum value in the left subtree\n                left_max = self.find_max(root.left)\n                # replace the node with the maximum value in the left subtree\n                root.val = left_max\n                # delete the maximum value in the left subtree\n                root.left = self.deleteNode(root.left, left_max)\n                return root\n        elif root.val > key:\n            # if the current node is greater than the key, we need to delete the left child\n            root.left = self.deleteNode(root.left, key)\n            return root\n        else:\n            # if the current node is less than the key, we need to delete the right child\n"
    },
    {
        "number": 451,
        "title": "Sort Characters By Frequency",
        "difficulty": 1,
        "prompt": "class Solution:\n    def frequencySort(self, s: str) -> str:\n        \"\"\"\n        Given a string s, sort it in decreasing order based on the frequency of the characters. The frequency of a character is the number of times it appears in the string.\n        Return the sorted string. If there are multiple answers, return any of them.\n        Example 1:\n        Input: s = \"tree\"\n        Output: \"eert\"\n        Explanation: 'e' appears twice while 'r' and 't' both appear once.\n        So 'e' must appear before both 'r' and 't'. Therefore \"eetr\" is also a valid answer.\n        Example 2:\n        Input: s = \"cccaaa\"\n        Output: \"aaaccc\"\n        Explanation: Both 'c' and 'a' appear three times, so both \"cccaaa\" and \"aaaccc\" are valid answers.\n        Note that \"cacaca\" is incorrect, as the same characters must be together.\n        Example 3:\n        Input: s = \"Aabb\"\n        Output: \"bbAa\"\n        Explanation: \"bbaA\" is also a valid answer, but \"Aabb\" is incorrect.\n        Note that 'A' and 'a' are treated as two different characters.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        # Solution 1:\n        # count = collections.Counter(s)\n        # return ''.join(sorted(s, key=lambda x: -count[x]))"
    },
    {
        "number": 451,
        "title": "Sort Characters By Frequency",
        "difficulty": 1,
        "prompt": "class Solution:\n    def frequencySort(self, s: str) -> str:\n        \"\"\"\n        Given a string s, sort it in decreasing order based on the frequency of the characters. The frequency of a character is the number of times it appears in the string.\n        Return the sorted string. If there are multiple answers, return any of them.\n        Example 1:\n        Input: s = \"tree\"\n        Output: \"eert\"\n        Explanation: 'e' appears twice while 'r' and 't' both appear once.\n        So 'e' must appear before both 'r' and 't'. Therefore \"eetr\" is also a valid answer.\n        Example 2:\n        Input: s = \"cccaaa\"\n        Output: \"aaaccc\"\n        Explanation: Both 'c' and 'a' appear three times, so both \"cccaaa\" and \"aaaccc\" are valid answers.\n        Note that \"cacaca\" is incorrect, as the same characters must be together.\n        Example 3:\n        Input: s = \"Aabb\"\n        Output: \"bbAa\"\n        Explanation: \"bbaA\" is also a valid answer, but \"Aabb\" is incorrect.\n        Note that 'A' and 'a' are treated as two different characters.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        \n        # Solution 1:\n        # O(n) time\n        # O(n) space\n        # count = collections.Counter(s)\n        # return ''.join(sorted(s, key=lambda x: (-count[x], x)))\n        \n        # Solution 2:\n        # O(n) time\n        # O(n) space\n        # count = collections.Counter(s)\n        # return ''.join(sorted(s, key=lambda x: (-count[x], x)))\n        \n        # Solution 3:\n        # O(n) time\n        # O(n) space\n        count = collections.Counter(s)\n        return ''.join(sorted(s, key=lambda x: (-count[x], x)))\n<|endoftext|>"
    },
    {
        "number": 452,
        "title": "Minimum Number of Arrows to Burst Balloons",
        "difficulty": 1,
        "prompt": "class Solution:\n    def findMinArrowShots(self, points: List[List[int]]) -> int:\n        \"\"\"\n        There are some spherical balloons taped onto a flat wall that represents the XY-plane. The balloons are represented as a 2D integer array points where points[i] = [xstart, xend] denotes a balloon whose horizontal diameter stretches between xstart and xend. You do not know the exact y-coordinates of the balloons.\n        Arrows can be shot up directly vertically (in the positive y-direction) from different points along the x-axis. A balloon with xstart and xend is burst by an arrow shot at x if xstart <= x <= xend. There is no limit to the number of arrows that can be shot. A shot arrow keeps traveling up infinitely, bursting any balloons in its path.\n        Given the array points, return the minimum number of arrows that must be shot to burst all balloons.\n        Example 1:\n        Input: points = [[10,16],[2,8],[1,6],[7,12]]\n        Output: 2\n        Explanation: The balloons can be burst by 2 arrows:\n        - Shoot an arrow at x = 6, bursting the balloons [2,8] and [1,6].\n        - Shoot an arrow at x = 11, bursting the balloons [10,16] and [7,12].\n        Example 2:\n        Input: points = [[1,2],[3,4],[5,6],[7,8]]\n        Output: 4\n        Explanation: One arrow needs to be shot for each balloon for a total of 4 arrows.\n        Example 3:\n        Input: points = [[1,2],[2,3],[3,4],[4,5]]\n        Output: 2\n        Explanation: The balloons can be burst by 2 arrows:\n        - Shoot an arrow at x = 2, bursting the balloons [1,2] and [2,3].\n        - Shoot an arrow at x = 4, bursting the balloons [3,4] and [4,5].\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        points.sort(key=lambda x: x[1])\n        ans = 0\n        for i in range(len(points)):\n            if i == 0:\n                ans += 1\n            else:\n                if points[i][0] > points[i-1][1]:\n                    ans += 1\n        return ans"
    },
    {
        "number": 452,
        "title": "Minimum Number of Arrows to Burst Balloons",
        "difficulty": 1,
        "prompt": "class Solution:\n    def findMinArrowShots(self, points: List[List[int]]) -> int:\n        \"\"\"\n        There are some spherical balloons taped onto a flat wall that represents the XY-plane. The balloons are represented as a 2D integer array points where points[i] = [xstart, xend] denotes a balloon whose horizontal diameter stretches between xstart and xend. You do not know the exact y-coordinates of the balloons.\n        Arrows can be shot up directly vertically (in the positive y-direction) from different points along the x-axis. A balloon with xstart and xend is burst by an arrow shot at x if xstart <= x <= xend. There is no limit to the number of arrows that can be shot. A shot arrow keeps traveling up infinitely, bursting any balloons in its path.\n        Given the array points, return the minimum number of arrows that must be shot to burst all balloons.\n        Example 1:\n        Input: points = [[10,16],[2,8],[1,6],[7,12]]\n        Output: 2\n        Explanation: The balloons can be burst by 2 arrows:\n        - Shoot an arrow at x = 6, bursting the balloons [2,8] and [1,6].\n        - Shoot an arrow at x = 11, bursting the balloons [10,16] and [7,12].\n        Example 2:\n        Input: points = [[1,2],[3,4],[5,6],[7,8]]\n        Output: 4\n        Explanation: One arrow needs to be shot for each balloon for a total of 4 arrows.\n        Example 3:\n        Input: points = [[1,2],[2,3],[3,4],[4,5]]\n        Output: 2\n        Explanation: The balloons can be burst by 2 arrows:\n        - Shoot an arrow at x = 2, bursting the balloons [1,2] and [2,3].\n        - Shoot an arrow at x = 4, bursting the balloons [3,4] and [4,5].\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        points.sort(key=lambda x: x[1])\n        res = 0\n        for i in range(len(points)):\n            if i == 0:\n                res += 1\n            else:\n                if points[i][0] > points[i-1][1]:\n                    res += 1\n        return res"
    },
    {
        "number": 453,
        "title": "Minimum Moves to Equal Array Elements",
        "difficulty": 1,
        "prompt": "class Solution:\n    def minMoves(self, nums: List[int]) -> int:\n        \"\"\"\n        Given an integer array nums of size n, return the minimum number of moves required to make all array elements equal.\n        In one move, you can increment n - 1 elements of the array by 1.\n        Example 1:\n        Input: nums = [1,2,3]\n        Output: 3\n        Explanation: Only three moves are needed (remember each move increments two elements):\n        [1,2,3]  =>  [2,3,3]  =>  [3,4,3]  =>  [4,4,4]\n        Example 2:\n        Input: nums = [1,1,1]\n        Output: 0\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        return sum(nums) - len(nums) * min(nums)"
    },
    {
        "number": 453,
        "title": "Minimum Moves to Equal Array Elements",
        "difficulty": 1,
        "prompt": "class Solution:\n    def minMoves(self, nums: List[int]) -> int:\n        \"\"\"\n        Given an integer array nums of size n, return the minimum number of moves required to make all array elements equal.\n        In one move, you can increment n - 1 elements of the array by 1.\n        Example 1:\n        Input: nums = [1,2,3]\n        Output: 3\n        Explanation: Only three moves are needed (remember each move increments two elements):\n        [1,2,3]  =>  [2,3,3]  =>  [3,4,3]  =>  [4,4,4]\n        Example 2:\n        Input: nums = [1,1,1]\n        Output: 0\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        # \u601d\u8def\uff1a\u6c42\u51fa\u6570\u7ec4\u4e2d\u6700\u5927\u503c\uff0c\u6700\u5c0f\u503c\uff0c\u6700\u5927\u503c\u51cf\u6700\u5c0f\u503c\uff0c\u6700\u5927\u503c\u51cf\u6700\u5c0f\u503c\uff0c\u6700\u5927\u503c\u51cf\u6700\u5c0f\u503c...\n        # \u53ef\u4ee5\u628a\u6570\u7ec4\u4e2d\u7684\u6570\u5b57\u770b\u4f5c\u4e00\u4e2a\u70b9\uff0c\u6c42\u51fa\u8fd9\u4e2a\u70b9\u5230\u539f\u70b9\u7684\u8ddd\u79bb\n        # \u5982\u679c\u6700\u5927\u503c\u51cf\u6700\u5c0f\u503c\u7684\u7edd\u5bf9\u503c\u5c0f\u4e8e\u7b49\u4e8e1\uff0c\u90a3\u4e48\u8fd9\u4e2a\u70b9\u5230\u539f\u70b9\u7684\u8ddd\u79bb\u5c31\u662f\u6700\u5c0f\u503c\u7684\u4e2a\u6570\n        # \u5982\u679c\u6700\u5927\u503c\u51cf\u6700\u5c0f\u503c\u7684\u7edd\u5bf9\u503c\u5927\u4e8e1\uff0c\u90a3\u4e48\u8fd9\u4e2a\u70b9\u5230\u539f\u70b9\u7684"
    },
    {
        "number": 454,
        "title": "4Sum II",
        "difficulty": 1,
        "prompt": "class Solution:\n    def fourSumCount(self, nums1: List[int], nums2: List[int], nums3: List[int], nums4: List[int]) -> int:\n        \"\"\"\n        Given four integer arrays nums1, nums2, nums3, and nums4 all of length n, return the number of tuples (i, j, k, l) such that:\n            0 <= i, j, k, l < n\n            nums1[i] + nums2[j] + nums3[k] + nums4[l] == 0\n        Example 1:\n        Input: nums1 = [1,2], nums2 = [-2,-1], nums3 = [-1,2], nums4 = [0,2]\n        Output: 2\n        Explanation:\n        The two tuples are:\n        1. (0, 0, 0, 1) -> nums1[0] + nums2[0] + nums3[0] + nums4[1] = 1 + (-2) + (-1) + 2 = 0\n        2. (1, 1, 0, 0) -> nums1[1] + nums2[1] + nums3[0] + nums4[0] = 2 + (-1) + (-1) + 0 = 0\n        Example 2:\n        Input: nums1 = [0], nums2 = [0], nums3 = [0], nums4 = [0]\n        Output: 1\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        # Solution 1:\n        # Time complexity: O(n^2)\n        # Space complexity: O(n)\n        # res = 0\n        # for i in range(len(nums1)):\n        #     for j in range(len(nums2)):\n        #         for k in range(len(nums3)):\n        #             for l in range(len(nums4)):\n        #                 if nums1[i] + nums2[j] + nums3[k] + nums4[l] == 0:\n        #                     res += 1\n        # return res"
    },
    {
        "number": 454,
        "title": "4Sum II",
        "difficulty": 1,
        "prompt": "class Solution:\n    def fourSumCount(self, nums1: List[int], nums2: List[int], nums3: List[int], nums4: List[int]) -> int:\n        \"\"\"\n        Given four integer arrays nums1, nums2, nums3, and nums4 all of length n, return the number of tuples (i, j, k, l) such that:\n            0 <= i, j, k, l < n\n            nums1[i] + nums2[j] + nums3[k] + nums4[l] == 0\n        Example 1:\n        Input: nums1 = [1,2], nums2 = [-2,-1], nums3 = [-1,2], nums4 = [0,2]\n        Output: 2\n        Explanation:\n        The two tuples are:\n        1. (0, 0, 0, 1) -> nums1[0] + nums2[0] + nums3[0] + nums4[1] = 1 + (-2) + (-1) + 2 = 0\n        2. (1, 1, 0, 0) -> nums1[1] + nums2[1] + nums3[0] + nums4[0] = 2 + (-1) + (-1) + 0 = 0\n        Example 2:\n        Input: nums1 = [0], nums2 = [0], nums3 = [0], nums4 = [0]\n        Output: 1\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        # Time: O(n^2)\n        # Space: O(n)\n        # hash table\n        # hash table key: sum of nums1[i] + nums2[j] + nums3[k] + nums4[l]\n        # hash table value: count of such tuples\n        # hash table: {0: 1, -1: 1, -2: 1, 1: 1, 2: 1}\n        # hash table: {0: 1, -1: 1, -2: 1, 1: 1, 2: 1}\n        # hash table: {0: 2, -1: 2, -2: 2, 1: 2, 2: 2}\n        # hash table: {0: 2, -1: 2, -2: 2, 1: 2, 2: 2}\n        # hash table: {0: 2, -1: 2, -2: 2, 1: 2, 2: 2}\n        # hash table: {0: 2, -1: 2, -2: 2, 1: 2, 2: 2}\n        # hash table: {0: 2, -1: 2, -2: 2, 1: 2, 2: 2}\n        # hash table: {0: 2, -1: 2, -2: 2, 1: 2,"
    },
    {
        "number": 455,
        "title": "Assign Cookies",
        "difficulty": 0,
        "prompt": "class Solution:\n    def findContentChildren(self, g: List[int], s: List[int]) -> int:\n        \"\"\"\n        Assume you are an awesome parent and want to give your children some cookies. But, you should give each child at most one cookie.\n        Each child i has a greed factor g[i], which is the minimum size of a cookie that the child will be content with; and each cookie j has a size s[j]. If s[j] >= g[i], we can assign the cookie j to the child i, and the child i will be content. Your goal is to maximize the number of your content children and output the maximum number.\n        Example 1:\n        Input: g = [1,2,3], s = [1,1]\n        Output: 1\n        Explanation: You have 3 children and 2 cookies. The greed factors of 3 children are 1, 2, 3. \n        And even though you have 2 cookies, since their size is both 1, you could only make the child whose greed factor is 1 content.\n        You need to output 1.\n        Example 2:\n        Input: g = [1,2], s = [1,2,3]\n        Output: 2\n        Explanation: You have 2 children and 3 cookies. The greed factors of 2 children are 1, 2. \n        You have 3 cookies and their sizes are big enough to gratify all of the children, \n        You need to output 2.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        g.sort()\n        s.sort()\n        i, j = 0, 0\n        while i < len(g) and j < len(s):\n            if g[i] <= s[j]:\n                i += 1\n            j += 1\n        return i"
    },
    {
        "number": 455,
        "title": "Assign Cookies",
        "difficulty": 0,
        "prompt": "class Solution:\n    def findContentChildren(self, g: List[int], s: List[int]) -> int:\n        \"\"\"\n        Assume you are an awesome parent and want to give your children some cookies. But, you should give each child at most one cookie.\n        Each child i has a greed factor g[i], which is the minimum size of a cookie that the child will be content with; and each cookie j has a size s[j]. If s[j] >= g[i], we can assign the cookie j to the child i, and the child i will be content. Your goal is to maximize the number of your content children and output the maximum number.\n        Example 1:\n        Input: g = [1,2,3], s = [1,1]\n        Output: 1\n        Explanation: You have 3 children and 2 cookies. The greed factors of 3 children are 1, 2, 3. \n        And even though you have 2 cookies, since their size is both 1, you could only make the child whose greed factor is 1 content.\n        You need to output 1.\n        Example 2:\n        Input: g = [1,2], s = [1,2,3]\n        Output: 2\n        Explanation: You have 2 children and 3 cookies. The greed factors of 2 children are 1, 2. \n        You have 3 cookies and their sizes are big enough to gratify all of the children, \n        You need to output 2.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        g.sort()\n        s.sort()\n        i, j = 0, 0\n        while i < len(g) and j < len(s):\n            if s[j] >= g[i]:\n                i += 1\n            j += 1\n        return i\n<|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>"
    },
    {
        "number": 456,
        "title": "132 Pattern",
        "difficulty": 1,
        "prompt": "class Solution:\n    def find132pattern(self, nums: List[int]) -> bool:\n        \"\"\"\n        Given an array of n integers nums, a 132 pattern is a subsequence of three integers nums[i], nums[j] and nums[k] such that i < j < k and nums[i] < nums[k] < nums[j].\n        Return true if there is a 132 pattern in nums, otherwise, return false.\n        Example 1:\n        Input: nums = [1,2,3,4]\n        Output: false\n        Explanation: There is no 132 pattern in the sequence.\n        Example 2:\n        Input: nums = [3,1,4,2]\n        Output: true\n        Explanation: There is a 132 pattern in the sequence: [1, 4, 2].\n        Example 3:\n        Input: nums = [-1,3,2,0]\n        Output: true\n        Explanation: There are three 132 patterns in the sequence: [-1, 3, 2], [-1, 3, 0] and [-1, 2, 0].\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        # \u5148\u6392\u5e8f\uff0c\u518d\u6bd4\u8f83\n        # \u65f6\u95f4\u590d\u6742\u5ea6O(nlogn)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6O(1)\n        nums.sort()\n        for i in range(len(nums) - 2):\n            if nums[i] < nums[i + 1] < nums[i + 2]:\n                return True\n        return False"
    },
    {
        "number": 456,
        "title": "132 Pattern",
        "difficulty": 1,
        "prompt": "class Solution:\n    def find132pattern(self, nums: List[int]) -> bool:\n        \"\"\"\n        Given an array of n integers nums, a 132 pattern is a subsequence of three integers nums[i], nums[j] and nums[k] such that i < j < k and nums[i] < nums[k] < nums[j].\n        Return true if there is a 132 pattern in nums, otherwise, return false.\n        Example 1:\n        Input: nums = [1,2,3,4]\n        Output: false\n        Explanation: There is no 132 pattern in the sequence.\n        Example 2:\n        Input: nums = [3,1,4,2]\n        Output: true\n        Explanation: There is a 132 pattern in the sequence: [1, 4, 2].\n        Example 3:\n        Input: nums = [-1,3,2,0]\n        Output: true\n        Explanation: There are three 132 patterns in the sequence: [-1, 3, 2], [-1, 3, 0] and [-1, 2, 0].\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        # O(n^2)\n        # for i in range(len(nums)):\n        #     for j in range(i+1, len(nums)):\n        #         for k in range(j+1, len(nums)):\n        #             if nums[i] < nums[k] < nums[j]:\n        #                 return True\n        # return False"
    },
    {
        "number": 457,
        "title": "Circular Array Loop",
        "difficulty": 1,
        "prompt": "class Solution:\n    def circularArrayLoop(self, nums: List[int]) -> bool:\n        \"\"\"\n        You are playing a game involving a circular array of non-zero integers nums. Each nums[i] denotes the number of indices forward/backward you must move if you are located at index i:\n            If nums[i] is positive, move nums[i] steps forward, and\n            If nums[i] is negative, move nums[i] steps backward.\n        Since the array is circular, you may assume that moving forward from the last element puts you on the first element, and moving backwards from the first element puts you on the last element.\n        A cycle in the array consists of a sequence of indices seq of length k where:\n            Following the movement rules above results in the repeating index sequence seq[0] -> seq[1] ->... -> seq[k - 1] -> seq[0] ->...\n            Every nums[seq[j]] is either all positive or all negative.\n            k > 1\n        Return true if there is a cycle in nums, or false otherwise.\n        Example 1:\n        Input: nums = [2,-1,1,2,2]\n        Output: true\n        Explanation: The graph shows how the indices are connected. White nodes are jumping forward, while red is jumping backward.\n        We can see the cycle 0 --> 2 --> 3 --> 0 -->..., and all of its nodes are white (jumping in the same direction).\n        Example 2:\n        Input: nums = [-1,-2,-3,-4,-5,6]\n        Output: false\n        Explanation: The graph shows how the indices are connected. White nodes are jumping forward, while red is jumping backward.\n        The only cycle is of size 1, so we return false.\n        Example 3:\n        Input: nums = [1,-1,5,1,4]\n        Output: true\n        Explanation: The graph shows how the indices are connected. White nodes are jumping forward, while red is jumping backward.\n        We can see the cycle 0 --> 1 --> 0 -->..., and while it is of size > 1, it has a node jumping forward and a node jumping backward, so it is not a cycle.\n        We can see the cycle 3 --> 4 --> 3 -->..., and all of its nodes are white (jumping in the same direction).\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        n = len(nums)\n        for i in range(n):\n            if nums[i] == 0:\n                continue\n            slow, fast = i, i\n            while True:\n                slow = self.move(nums, slow)\n                fast = self.move(nums, fast)\n                fast = self.move(nums, fast)\n                if slow == fast:\n                    break\n            if slow == i:\n                continue\n            slow = i\n            while slow!= fast:\n                slow = self.move(nums, slow)\n                fast = self.move(nums, fast)\n            return True\n        return False"
    },
    {
        "number": 457,
        "title": "Circular Array Loop",
        "difficulty": 1,
        "prompt": "class Solution:\n    def circularArrayLoop(self, nums: List[int]) -> bool:\n        \"\"\"\n        You are playing a game involving a circular array of non-zero integers nums. Each nums[i] denotes the number of indices forward/backward you must move if you are located at index i:\n            If nums[i] is positive, move nums[i] steps forward, and\n            If nums[i] is negative, move nums[i] steps backward.\n        Since the array is circular, you may assume that moving forward from the last element puts you on the first element, and moving backwards from the first element puts you on the last element.\n        A cycle in the array consists of a sequence of indices seq of length k where:\n            Following the movement rules above results in the repeating index sequence seq[0] -> seq[1] ->... -> seq[k - 1] -> seq[0] ->...\n            Every nums[seq[j]] is either all positive or all negative.\n            k > 1\n        Return true if there is a cycle in nums, or false otherwise.\n        Example 1:\n        Input: nums = [2,-1,1,2,2]\n        Output: true\n        Explanation: The graph shows how the indices are connected. White nodes are jumping forward, while red is jumping backward.\n        We can see the cycle 0 --> 2 --> 3 --> 0 -->..., and all of its nodes are white (jumping in the same direction).\n        Example 2:\n        Input: nums = [-1,-2,-3,-4,-5,6]\n        Output: false\n        Explanation: The graph shows how the indices are connected. White nodes are jumping forward, while red is jumping backward.\n        The only cycle is of size 1, so we return false.\n        Example 3:\n        Input: nums = [1,-1,5,1,4]\n        Output: true\n        Explanation: The graph shows how the indices are connected. White nodes are jumping forward, while red is jumping backward.\n        We can see the cycle 0 --> 1 --> 0 -->..., and while it is of size > 1, it has a node jumping forward and a node jumping backward, so it is not a cycle.\n        We can see the cycle 3 --> 4 --> 3 -->..., and all of its nodes are white (jumping in the same direction).\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        n = len(nums)\n        for i in range(n):\n            if nums[i] == 0:\n                continue\n            slow, fast = i, i\n            while True:\n                slow = self.move(nums, slow)\n                fast = self.move(nums, self.move(nums, fast))\n                if slow == fast:\n                    break\n            if slow == i:\n                continue\n            slow = i\n            while slow!= fast:\n                slow = self.move(nums, slow)\n                fast = self.move(nums, fast)\n            return True\n        return False"
    },
    {
        "number": 458,
        "title": "Poor Pigs",
        "difficulty": 2,
        "prompt": "class Solution:\n    def poorPigs(self, buckets: int, minutesToDie: int, minutesToTest: int) -> int:\n        \"\"\"\n        There are buckets buckets of liquid, where exactly one of the buckets is poisonous. To figure out which one is poisonous, you feed some number of (poor) pigs the liquid to see whether they will die or not. Unfortunately, you only have minutesToTest minutes to determine which bucket is poisonous.\n        You can feed the pigs according to these steps:\n            Choose some live pigs to feed.\n            For each pig, choose which buckets to feed it. The pig will consume all the chosen buckets simultaneously and will take no time. Each pig can feed from any number of buckets, and each bucket can be fed from by any number of pigs.\n            Wait for minutesToDie minutes. You may not feed any other pigs during this time.\n            After minutesToDie minutes have passed, any pigs that have been fed the poisonous bucket will die, and all others will survive.\n            Repeat this process until you run out of time.\n        Given buckets, minutesToDie, and minutesToTest, return the minimum number of pigs needed to figure out which bucket is poisonous within the allotted time.\n        Example 1:\n        Input: buckets = 4, minutesToDie = 15, minutesToTest = 15\n        Output: 2\n        Explanation: We can determine the poisonous bucket as follows:\n        At time 0, feed the first pig buckets 1 and 2, and feed the second pig buckets 2 and 3.\n        At time 15, there are 4 possible outcomes:\n        - If only the first pig dies, then bucket 1 must be poisonous.\n        - If only the second pig dies, then bucket 3 must be poisonous.\n        - If both pigs die, then bucket 2 must be poisonous.\n        - If neither pig dies, then bucket 4 must be poisonous.\n        Example 2:\n        Input: buckets = 4, minutesToDie = 15, minutesToTest = 30\n        Output: 2\n        Explanation: We can determine the poisonous bucket as follows:\n        At time 0, feed the first pig bucket 1, and feed the second pig bucket 2.\n        At time 15, there are 2 possible outcomes:\n        - If either pig dies, then the poisonous bucket is the one it was fed.\n        - If neither pig dies, then feed the first pig bucket 3, and feed the second pig bucket 4.\n        At time 30, one of the two pigs must die, and the poisonous bucket is the one it was fed.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        if buckets == 1:\n            return 1\n        if minutesToTest % minutesToDie == 0:\n            return minutesToTest // minutesToDie\n        pigs = 0\n        while minutesToTest >= minutesToDie:\n            pigs += 1\n            buckets = buckets * pigs\n            minutesToTest = minutesToTest - minutesToDie\n        return pigs"
    },
    {
        "number": 458,
        "title": "Poor Pigs",
        "difficulty": 2,
        "prompt": "class Solution:\n    def poorPigs(self, buckets: int, minutesToDie: int, minutesToTest: int) -> int:\n        \"\"\"\n        There are buckets buckets of liquid, where exactly one of the buckets is poisonous. To figure out which one is poisonous, you feed some number of (poor) pigs the liquid to see whether they will die or not. Unfortunately, you only have minutesToTest minutes to determine which bucket is poisonous.\n        You can feed the pigs according to these steps:\n            Choose some live pigs to feed.\n            For each pig, choose which buckets to feed it. The pig will consume all the chosen buckets simultaneously and will take no time. Each pig can feed from any number of buckets, and each bucket can be fed from by any number of pigs.\n            Wait for minutesToDie minutes. You may not feed any other pigs during this time.\n            After minutesToDie minutes have passed, any pigs that have been fed the poisonous bucket will die, and all others will survive.\n            Repeat this process until you run out of time.\n        Given buckets, minutesToDie, and minutesToTest, return the minimum number of pigs needed to figure out which bucket is poisonous within the allotted time.\n        Example 1:\n        Input: buckets = 4, minutesToDie = 15, minutesToTest = 15\n        Output: 2\n        Explanation: We can determine the poisonous bucket as follows:\n        At time 0, feed the first pig buckets 1 and 2, and feed the second pig buckets 2 and 3.\n        At time 15, there are 4 possible outcomes:\n        - If only the first pig dies, then bucket 1 must be poisonous.\n        - If only the second pig dies, then bucket 3 must be poisonous.\n        - If both pigs die, then bucket 2 must be poisonous.\n        - If neither pig dies, then bucket 4 must be poisonous.\n        Example 2:\n        Input: buckets = 4, minutesToDie = 15, minutesToTest = 30\n        Output: 2\n        Explanation: We can determine the poisonous bucket as follows:\n        At time 0, feed the first pig bucket 1, and feed the second pig bucket 2.\n        At time 15, there are 2 possible outcomes:\n        - If either pig dies, then the poisonous bucket is the one it was fed.\n        - If neither pig dies, then feed the first pig bucket 3, and feed the second pig bucket 4.\n        At time 30, one of the two pigs must die, and the poisonous bucket is the one it was fed.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        # Time  complexity: O(N^2)\n        # Space complexity: O(1)\n        # buckets = 4, minutesToDie = 15, minutesToTest = 15\n        # buckets = 4, minutesToDie = 15, minutesToTest = 30\n        # buckets = 4, minutesToDie = 15, minutesToTest = 60\n        # buckets = 4, minutesToDie = 15, minutesToTest = 120\n        # buckets = 4, minutesToDie = 15, minutesToTest = 240\n        # buckets = 4, minutesToDie = 15, minutesToTest = 480\n        # buckets = 4, minutesToDie = 15, minutesToTest = 960\n        # buckets = 4, minutesToDie = 15, minutesToTest = 1920\n        # buckets = 4, minutesToDie = 15, minutesToTest = 3840\n        # buckets = 4, minutesToDie = 15, minutesToTest = 5760\n        # buckets = 4, minutesToDie = 15, minutesToTest = 11520\n        # buckets = 4, minutesToDie = 15, minutesToTest = 23040\n        # buckets = 4, minutesToDie = 15, minutesToTest = 46080\n        # buckets = 4, minutesToDie = 15, minutesToTest = 92160\n        # buckets = 4, minutesToDie = 15, minutesToTest = 184352"
    },
    {
        "number": 459,
        "title": "Repeated Substring Pattern",
        "difficulty": 0,
        "prompt": "class Solution:\n    def repeatedSubstringPattern(self, s: str) -> bool:\n        \"\"\"\n        Given a string s, check if it can be constructed by taking a substring of it and appending multiple copies of the substring together.\n        Example 1:\n        Input: s = \"abab\"\n        Output: true\n        Explanation: It is the substring \"ab\" twice.\n        Example 2:\n        Input: s = \"aba\"\n        Output: false\n        Example 3:\n        Input: s = \"abcabcabcabc\"\n        Output: true\n        Explanation: It is the substring \"abc\" four times or the substring \"abcabc\" twice.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        return s in (s + s)[1:-1]"
    },
    {
        "number": 459,
        "title": "Repeated Substring Pattern",
        "difficulty": 0,
        "prompt": "class Solution:\n    def repeatedSubstringPattern(self, s: str) -> bool:\n        \"\"\"\n        Given a string s, check if it can be constructed by taking a substring of it and appending multiple copies of the substring together.\n        Example 1:\n        Input: s = \"abab\"\n        Output: true\n        Explanation: It is the substring \"ab\" twice.\n        Example 2:\n        Input: s = \"aba\"\n        Output: false\n        Example 3:\n        Input: s = \"abcabcabcabc\"\n        Output: true\n        Explanation: It is the substring \"abc\" four times or the substring \"abcabc\" twice.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        # Solution 1:\n        # return s in (s + s)[1:-1]\n        # Solution 2:\n        # return (s + s)[1:-1].find(s)!= -1"
    },
    {
        "number": 460,
        "title": "LFU Cache",
        "difficulty": 2,
        "prompt": "class LFUCache:\n    def __init__(self, capacity: int):\n    def get(self, key: int) -> int:\n    def put(self, key: int, value: int) -> None:\n        \"\"\"\n        Design and implement a data structure for a Least Frequently Used (LFU) cache.\n        Implement the LFUCache class:\n            LFUCache(int capacity) Initializes the object with the capacity of the data structure.\n            int get(int key) Gets the value of the key if the key exists in the cache. Otherwise, returns -1.\n            void put(int key, int value) Update the value of the key if present, or inserts the key if not already present. When the cache reaches its capacity, it should invalidate and remove the least frequently used key before inserting a new item. For this problem, when there is a tie (i.e., two or more keys with the same frequency), the least recently used key would be invalidated.\n        To determine the least frequently used key, a use counter is maintained for each key in the cache. The key with the smallest use counter is the least frequently used key.\n        When a key is first inserted into the cache, its use counter is set to 1 (due to the put operation). The use counter for a key in the cache is incremented either a get or put operation is called on it.\n        The functions get and put must each run in O(1) average time complexity.\n        Example 1:\n        Input\n        [\"LFUCache\", \"put\", \"put\", \"get\", \"put\", \"get\", \"get\", \"put\", \"get\", \"get\", \"get\"]\n        [[2], [1, 1], [2, 2], [1], [3, 3], [2], [3], [4, 4], [1], [3], [4]]\n        Output\n        [null, null, null, 1, null, -1, 3, null, -1, 3, 4]\n        Explanation\n        // cnt(x) = the use counter for key x\n        // cache=[] will show the last used order for tiebreakers (leftmost element is  most recent)\n        LFUCache lfu = new LFUCache(2);\n        lfu.put(1, 1);   // cache=[1,_], cnt(1)=1\n        lfu.put(2, 2);   // cache=[2,1], cnt(2)=1, cnt(1)=1\n        lfu.get(1);      // return 1\n                         // cache=[1,2], cnt(2)=1, cnt(1)=2\n        lfu.put(3, 3);   // 2 is the LFU key because cnt(2)=1 is the smallest, invalidate 2.\n                         // cache=[3,1], cnt(3)=1, cnt(1)=2\n        lfu.get(2);      // return -1 (not found)\n        lfu.get(3);      // return 3\n                         // cache=[3,1], cnt(3)=2, cnt(1)=2\n        lfu.put(4, 4);   // Both 1 and 3 have the same cnt, but 1 is LRU, invalidate 1.\n                         // cache=[4,3], cnt(4)=1, cnt(3)=2\n        lfu.get(1);      // return -1 (not found)\n        lfu.get(3);      // return 3\n                         // cache=[3,4], cnt(4)=1, cnt(3)=3\n        lfu.get(4);      // return 4\n                         // cache=[4,3], cnt(4)=2, cnt(3)=3\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        self.capacity = capacity\n        self.cache = {}\n        self.freq = collections.defaultdict(collections.OrderedDict)\n        self.min_freq = 0"
    },
    {
        "number": 460,
        "title": "LFU Cache",
        "difficulty": 2,
        "prompt": "class LFUCache:\n    def __init__(self, capacity: int):\n    def get(self, key: int) -> int:\n    def put(self, key: int, value: int) -> None:\n        \"\"\"\n        Design and implement a data structure for a Least Frequently Used (LFU) cache.\n        Implement the LFUCache class:\n            LFUCache(int capacity) Initializes the object with the capacity of the data structure.\n            int get(int key) Gets the value of the key if the key exists in the cache. Otherwise, returns -1.\n            void put(int key, int value) Update the value of the key if present, or inserts the key if not already present. When the cache reaches its capacity, it should invalidate and remove the least frequently used key before inserting a new item. For this problem, when there is a tie (i.e., two or more keys with the same frequency), the least recently used key would be invalidated.\n        To determine the least frequently used key, a use counter is maintained for each key in the cache. The key with the smallest use counter is the least frequently used key.\n        When a key is first inserted into the cache, its use counter is set to 1 (due to the put operation). The use counter for a key in the cache is incremented either a get or put operation is called on it.\n        The functions get and put must each run in O(1) average time complexity.\n        Example 1:\n        Input\n        [\"LFUCache\", \"put\", \"put\", \"get\", \"put\", \"get\", \"get\", \"put\", \"get\", \"get\", \"get\"]\n        [[2], [1, 1], [2, 2], [1], [3, 3], [2], [3], [4, 4], [1], [3], [4]]\n        Output\n        [null, null, null, 1, null, -1, 3, null, -1, 3, 4]\n        Explanation\n        // cnt(x) = the use counter for key x\n        // cache=[] will show the last used order for tiebreakers (leftmost element is  most recent)\n        LFUCache lfu = new LFUCache(2);\n        lfu.put(1, 1);   // cache=[1,_], cnt(1)=1\n        lfu.put(2, 2);   // cache=[2,1], cnt(2)=1, cnt(1)=1\n        lfu.get(1);      // return 1\n                         // cache=[1,2], cnt(2)=1, cnt(1)=2\n        lfu.put(3, 3);   // 2 is the LFU key because cnt(2)=1 is the smallest, invalidate 2.\n                         // cache=[3,1], cnt(3)=1, cnt(1)=2\n        lfu.get(2);      // return -1 (not found)\n        lfu.get(3);      // return 3\n                         // cache=[3,1], cnt(3)=2, cnt(1)=2\n        lfu.put(4, 4);   // Both 1 and 3 have the same cnt, but 1 is LRU, invalidate 1.\n                         // cache=[4,3], cnt(4)=1, cnt(3)=2\n        lfu.get(1);      // return -1 (not found)\n        lfu.get(3);      // return 3\n                         // cache=[3,4], cnt(4)=1, cnt(3)=3\n        lfu.get(4);      // return 4\n                         // cache=[4,3], cnt(4)=2, cnt(3)=3\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        self.capacity = capacity\n        self.cache = {}\n        self.freq = {}\n        self.minfreq = 0\n        self.cnt = 0\n        self.freq_cnt = {}"
    },
    {
        "number": 461,
        "title": "Hamming Distance",
        "difficulty": 0,
        "prompt": "class Solution:\n    def hammingDistance(self, x: int, y: int) -> int:\n        \"\"\"\n        The Hamming distance between two integers is the number of positions at which the corresponding bits are different.\n        Given two integers x and y, return the Hamming distance between them.\n        Example 1:\n        Input: x = 1, y = 4\n        Output: 2\n        Explanation:\n        1   (0 0 0 1)\n        4   (0 1 0 0)\n               \u2191   \u2191\n        The above arrows point to positions where the corresponding bits are different.\n        Example 2:\n        Input: x = 3, y = 1\n        Output: 1\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        # convert to binary\n        x = bin(x)[2:]\n        y = bin(y)[2:]\n        # count the number of 1s\n        return sum(1 for i in range(len(x)) if x[i]!= y[i])"
    },
    {
        "number": 461,
        "title": "Hamming Distance",
        "difficulty": 0,
        "prompt": "class Solution:\n    def hammingDistance(self, x: int, y: int) -> int:\n        \"\"\"\n        The Hamming distance between two integers is the number of positions at which the corresponding bits are different.\n        Given two integers x and y, return the Hamming distance between them.\n        Example 1:\n        Input: x = 1, y = 4\n        Output: 2\n        Explanation:\n        1   (0 0 0 1)\n        4   (0 1 0 0)\n               \u2191   \u2191\n        The above arrows point to positions where the corresponding bits are different.\n        Example 2:\n        Input: x = 3, y = 1\n        Output: 1\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        # xor = x ^ y\n        # count = 0\n        # while xor:\n        #     count += 1\n        #     xor = xor & (xor - 1)\n        # return count"
    },
    {
        "number": 462,
        "title": "Minimum Moves to Equal Array Elements II",
        "difficulty": 1,
        "prompt": "class Solution:\n    def minMoves2(self, nums: List[int]) -> int:\n        \"\"\"\n        Given an integer array nums of size n, return the minimum number of moves required to make all array elements equal.\n        In one move, you can increment or decrement an element of the array by 1.\n        Test cases are designed so that the answer will fit in a 32-bit integer.\n        Example 1:\n        Input: nums = [1,2,3]\n        Output: 2\n        Explanation:\n        Only two moves are needed (remember each move increments or decrements one element):\n        [1,2,3]  =>  [2,2,3]  =>  [2,2,2]\n        Example 2:\n        Input: nums = [1,10,2,9]\n        Output: 16\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        nums.sort()\n        n = len(nums)\n        if n == 1:\n            return 0\n        if n % 2 == 0:\n            return (nums[n // 2] - nums[0]) // 2 + 1\n        else:\n            return (nums[n // 2] - nums[0]) // 2 + 2"
    },
    {
        "number": 462,
        "title": "Minimum Moves to Equal Array Elements II",
        "difficulty": 1,
        "prompt": "class Solution:\n    def minMoves2(self, nums: List[int]) -> int:\n        \"\"\"\n        Given an integer array nums of size n, return the minimum number of moves required to make all array elements equal.\n        In one move, you can increment or decrement an element of the array by 1.\n        Test cases are designed so that the answer will fit in a 32-bit integer.\n        Example 1:\n        Input: nums = [1,2,3]\n        Output: 2\n        Explanation:\n        Only two moves are needed (remember each move increments or decrements one element):\n        [1,2,3]  =>  [2,2,3]  =>  [2,2,2]\n        Example 2:\n        Input: nums = [1,10,2,9]\n        Output: 16\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        nums.sort()\n        n = len(nums)\n        if n == 1:\n            return 0\n        elif n == 2:\n            return abs(nums[0] - nums[1])\n        else:\n            return abs(nums[0] - nums[n - 1]) + self.minMoves2(nums[1:n - 1])"
    },
    {
        "number": 463,
        "title": "Island Perimeter",
        "difficulty": 0,
        "prompt": "class Solution:\n    def islandPerimeter(self, grid: List[List[int]]) -> int:\n        \"\"\"\n        You are given row x col grid representing a map where grid[i][j] = 1 represents land and grid[i][j] = 0 represents water.\n        Grid cells are connected horizontally/vertically (not diagonally). The grid is completely surrounded by water, and there is exactly one island (i.e., one or more connected land cells).\n        The island doesn't have \"lakes\", meaning the water inside isn't connected to the water around the island. One cell is a square with side length 1. The grid is rectangular, width and height don't exceed 100. Determine the perimeter of the island.\n        Example 1:\n        Input: grid = [[0,1,0,0],[1,1,1,0],[0,1,0,0],[1,1,0,0]]\n        Output: 16\n        Explanation: The perimeter is the 16 yellow stripes in the image above.\n        Example 2:\n        Input: grid = [[1]]\n        Output: 4\n        Example 3:\n        Input: grid = [[1,0]]\n        Output: 4\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        # DFS\n        # Time: O(m*n)\n        # Space: O(m*n)\n        # m, n = len(grid), len(grid[0])\n        # def dfs(i, j):\n        #     if i < 0 or i >= m or j < 0 or j >= n or grid[i][j] == 0:\n        #         return 1\n        #     grid[i][j] = 0\n        #     return dfs(i+1, j) + dfs(i-1, j) + dfs(i, j+1) + dfs(i, j-1)\n        # return sum(dfs(i, j) for i in range(m) for j in range(n))"
    },
    {
        "number": 463,
        "title": "Island Perimeter",
        "difficulty": 0,
        "prompt": "class Solution:\n    def islandPerimeter(self, grid: List[List[int]]) -> int:\n        \"\"\"\n        You are given row x col grid representing a map where grid[i][j] = 1 represents land and grid[i][j] = 0 represents water.\n        Grid cells are connected horizontally/vertically (not diagonally). The grid is completely surrounded by water, and there is exactly one island (i.e., one or more connected land cells).\n        The island doesn't have \"lakes\", meaning the water inside isn't connected to the water around the island. One cell is a square with side length 1. The grid is rectangular, width and height don't exceed 100. Determine the perimeter of the island.\n        Example 1:\n        Input: grid = [[0,1,0,0],[1,1,1,0],[0,1,0,0],[1,1,0,0]]\n        Output: 16\n        Explanation: The perimeter is the 16 yellow stripes in the image above.\n        Example 2:\n        Input: grid = [[1]]\n        Output: 4\n        Example 3:\n        Input: grid = [[1,0]]\n        Output: 4\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        # Time: O(n), n is the number of cells\n        # Space: O(n), n is the number of cells\n        # DFS\n        if not grid:\n            return 0\n        \n        m, n = len(grid), len(grid[0])\n        perimeter = 0\n        \n        def dfs(i, j):\n            if i < 0 or i >= m or j < 0 or j >= n or grid[i][j] == 0:\n                return 1\n            if grid[i][j] == 1:\n                grid[i][j] = 0\n                return 1 + dfs(i+1, j) + dfs(i-1, j) + dfs(i, j+1) + dfs(i, j-1)\n            return 0\n        \n        for i in range(m):\n            for j in range(n):\n                if grid[i][j] == 1:\n                    perimeter += dfs(i, j)\n        return perimeter\n    \n    def islandPerimeter_2(self, grid: List[List[int]]) -> int:\n        \"\"\"\n        You are given row x col grid representing a map where grid[i][j] = 1 represents land and grid[i][j] = 0 represents water.\n        Grid cells are connected horizontally"
    },
    {
        "number": 464,
        "title": "Can I Win",
        "difficulty": 1,
        "prompt": "class Solution:\n    def canIWin(self, maxChoosableInteger: int, desiredTotal: int) -> bool:\n        \"\"\"\n        In the \"100 game\" two players take turns adding, to a running total, any integer from 1 to 10. The player who first causes the running total to reach or exceed 100 wins.\n        What if we change the game so that players cannot re-use integers?\n        For example, two players might take turns drawing from a common pool of numbers from 1 to 15 without replacement until they reach a total >= 100.\n        Given two integers maxChoosableInteger and desiredTotal, return true if the first player to move can force a win, otherwise, return false. Assume both players play optimally.\n        Example 1:\n        Input: maxChoosableInteger = 10, desiredTotal = 11\n        Output: false\n        Explanation:\n        No matter which integer the first player choose, the first player will lose.\n        The first player can choose an integer from 1 up to 10.\n        If the first player choose 1, the second player can only choose integers from 2 up to 10.\n        The second player will win by choosing 10 and get a total = 11, which is >= desiredTotal.\n        Same with other integers chosen by the first player, the second player will always win.\n        Example 2:\n        Input: maxChoosableInteger = 10, desiredTotal = 0\n        Output: true\n        Example 3:\n        Input: maxChoosableInteger = 10, desiredTotal = 1\n        Output: true\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        if maxChoosableInteger >= desiredTotal:\n            return True\n        if maxChoosableInteger * (maxChoosableInteger + 1) // 2 < desiredTotal:\n            return False\n        self.memo = {}\n        return self.helper(range(1, maxChoosableInteger + 1), desiredTotal)"
    },
    {
        "number": 464,
        "title": "Can I Win",
        "difficulty": 1,
        "prompt": "class Solution:\n    def canIWin(self, maxChoosableInteger: int, desiredTotal: int) -> bool:\n        \"\"\"\n        In the \"100 game\" two players take turns adding, to a running total, any integer from 1 to 10. The player who first causes the running total to reach or exceed 100 wins.\n        What if we change the game so that players cannot re-use integers?\n        For example, two players might take turns drawing from a common pool of numbers from 1 to 15 without replacement until they reach a total >= 100.\n        Given two integers maxChoosableInteger and desiredTotal, return true if the first player to move can force a win, otherwise, return false. Assume both players play optimally.\n        Example 1:\n        Input: maxChoosableInteger = 10, desiredTotal = 11\n        Output: false\n        Explanation:\n        No matter which integer the first player choose, the first player will lose.\n        The first player can choose an integer from 1 up to 10.\n        If the first player choose 1, the second player can only choose integers from 2 up to 10.\n        The second player will win by choosing 10 and get a total = 11, which is >= desiredTotal.\n        Same with other integers chosen by the first player, the second player will always win.\n        Example 2:\n        Input: maxChoosableInteger = 10, desiredTotal = 0\n        Output: true\n        Example 3:\n        Input: maxChoosableInteger = 10, desiredTotal = 1\n        Output: true\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        if maxChoosableInteger >= desiredTotal:\n            return True\n        if maxChoosableInteger * (maxChoosableInteger + 1) // 2 < desiredTotal:\n            return False\n        self.memo = {}\n        return self.helper(list(range(1, maxChoosableInteger + 1)), desiredTotal)"
    },
    {
        "number": 466,
        "title": "Count The Repetitions",
        "difficulty": 2,
        "prompt": "class Solution:\n    def getMaxRepetitions(self, s1: str, n1: int, s2: str, n2: int) -> int:\n        \"\"\"\n        We define str = [s, n] as the string str which consists of the string s concatenated n times.\n            For example, str == [\"abc\", 3] ==\"abcabcabc\".\n        We define that string s1 can be obtained from string s2 if we can remove some characters from s2 such that it becomes s1.\n            For example, s1 = \"abc\" can be obtained from s2 = \"abdbec\" based on our definition by removing the bolded underlined characters.\n        You are given two strings s1 and s2 and two integers n1 and n2. You have the two strings str1 = [s1, n1] and str2 = [s2, n2].\n        Return the maximum integer m such that str = [str2, m] can be obtained from str1.\n        Example 1:\n        Input: s1 = \"acb\", n1 = 4, s2 = \"ab\", n2 = 2\n        Output: 2\n        Example 2:\n        Input: s1 = \"acb\", n1 = 1, s2 = \"acb\", n2 = 1\n        Output: 1\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        # if s1 == s2:\n        #     return n1 // n2\n        # if n1 == 0:\n        #     return 0\n        # if n2 == 0:\n        #     return -1\n        # if len(s1)!= len(s2):\n        #     return -1\n        # if n1 < n2:\n        #     return -1\n        # if n1 == n2:\n        #     return 1\n        # if n1 == 1:\n        #     return 1 if s1 == s2 else -1\n        # if n2 == 1:\n        #     return 1 if s1 == s2 else -1\n        # if n1 == 2:\n        #     return 1 if s1[:2] == s2[:2] else -1\n        # if n2 == 2:\n        #     return 1 if s1[:2] == s2[:2] else -1\n        # if n1 == 3:\n        #     return 1 if s1[:3] == s2[:3] else -1\n        # if n2 == 3:\n        #     return 1 if s1[:3] == s2[:3] else -1\n        # if n1 == 4:\n        #     return 1 if s1["
    },
    {
        "number": 466,
        "title": "Count The Repetitions",
        "difficulty": 2,
        "prompt": "class Solution:\n    def getMaxRepetitions(self, s1: str, n1: int, s2: str, n2: int) -> int:\n        \"\"\"\n        We define str = [s, n] as the string str which consists of the string s concatenated n times.\n            For example, str == [\"abc\", 3] ==\"abcabcabc\".\n        We define that string s1 can be obtained from string s2 if we can remove some characters from s2 such that it becomes s1.\n            For example, s1 = \"abc\" can be obtained from s2 = \"abdbec\" based on our definition by removing the bolded underlined characters.\n        You are given two strings s1 and s2 and two integers n1 and n2. You have the two strings str1 = [s1, n1] and str2 = [s2, n2].\n        Return the maximum integer m such that str = [str2, m] can be obtained from str1.\n        Example 1:\n        Input: s1 = \"acb\", n1 = 4, s2 = \"ab\", n2 = 2\n        Output: 2\n        Example 2:\n        Input: s1 = \"acb\", n1 = 1, s2 = \"acb\", n2 = 1\n        Output: 1\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        # \u601d\u8def\uff1a\n        # 1. \u5148\u5224\u65ads1\u548cs2\u662f\u5426\u76f8\u7b49\uff0c\u5982\u679c\u76f8\u7b49\uff0c\u5219\u76f4\u63a5\u8fd4\u56de1\uff0c\u5426\u5219\uff0c\u5224\u65ads1\u662f\u5426\u662fs2\u7684\u5b50\u4e32\uff0c\u5982\u679c\u662f\uff0c\u5219\u8fd4\u56de1\uff0c\u5426\u5219\uff0c\u8fd4\u56de0\n        # 2. \u5982\u679cs1\u548cs2\u4e0d\u76f8\u7b49\uff0c\u5219\u5148\u5224\u65ads1\u662f\u5426\u662fs2\u7684\u5b50\u4e32\uff0c\u5982\u679c\u662f\uff0c\u5219\u8fd4\u56de1\uff0c\u5426\u5219\uff0c\u5224\u65ads2\u662f\u5426\u662fs1\u7684\u5b50\u4e32\uff0c\u5982\u679c\u662f\uff0c\u5219\u8fd4\u56de1\uff0c\u5426\u5219\uff0c\u8fd4\u56de0\n        # 3. \u5982\u679cs1\u548cs2\u4e0d\u76f8\u7b49\uff0c\u4e14s1\u4e0d\u662fs2\u7684\u5b50\u4e32\uff0c\u5219\u5148\u5224"
    },
    {
        "number": 467,
        "title": "Unique Substrings in Wraparound String",
        "difficulty": 1,
        "prompt": "class Solution:\n    def findSubstringInWraproundString(self, s: str) -> int:\n        \"\"\"\n        We define the string base to be the infinite wraparound string of \"abcdefghijklmnopqrstuvwxyz\", so base will look like this:\n            \"...zabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcd....\".\n        Given a string s, return the number of unique non-empty substrings of s are present in base.\n        Example 1:\n        Input: s = \"a\"\n        Output: 1\n        Explanation: Only the substring \"a\" of s is in base.\n        Example 2:\n        Input: s = \"cac\"\n        Output: 2\n        Explanation: There are two substrings (\"a\", \"c\") of s in base.\n        Example 3:\n        Input: s = \"zab\"\n        Output: 6\n        Explanation: There are six substrings (\"z\", \"a\", \"b\", \"za\", \"ab\", and \"zab\") of s in base.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        # Time: O(n)\n        # Space: O(1)\n        # base = \"abcdefghijklmnopqrstuvwxyz\"\n        # d = {}\n        # for i in range(len(base)):\n        #     d[base[i]] = i\n        # ans = 0\n        # for i in range(len(s)):\n        #     if i > 0 and d[s[i]] - d[s[i-1]] == 1:\n        #         ans += 1\n        #     d[s[i]] = i\n        # return ans"
    },
    {
        "number": 467,
        "title": "Unique Substrings in Wraparound String",
        "difficulty": 1,
        "prompt": "class Solution:\n    def findSubstringInWraproundString(self, s: str) -> int:\n        \"\"\"\n        We define the string base to be the infinite wraparound string of \"abcdefghijklmnopqrstuvwxyz\", so base will look like this:\n            \"...zabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcd....\".\n        Given a string s, return the number of unique non-empty substrings of s are present in base.\n        Example 1:\n        Input: s = \"a\"\n        Output: 1\n        Explanation: Only the substring \"a\" of s is in base.\n        Example 2:\n        Input: s = \"cac\"\n        Output: 2\n        Explanation: There are two substrings (\"a\", \"c\") of s in base.\n        Example 3:\n        Input: s = \"zab\"\n        Output: 6\n        Explanation: There are six substrings (\"z\", \"a\", \"b\", \"za\", \"ab\", and \"zab\") of s in base.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        # Time: O(n)\n        # Space: O(1)\n        # base = \"abcdefghijklmnopqrstuvwxyz\"\n        # res = 0\n        # for i in range(len(s)):\n        #     for j in range(i+1, len(s)+1):\n        #         sub = s[i:j]\n        #         if len(set(sub)) == 26:\n        #             res += 1\n        # return res"
    },
    {
        "number": 468,
        "title": "Validate IP Address",
        "difficulty": 1,
        "prompt": "class Solution:\n    def validIPAddress(self, queryIP: str) -> str:\n        \"\"\"\n        Given a string queryIP, return \"IPv4\" if IP is a valid IPv4 address, \"IPv6\" if IP is a valid IPv6 address or \"Neither\" if IP is not a correct IP of any type.\n        A valid IPv4 address is an IP in the form \"x1.x2.x3.x4\" where 0 <= xi <= 255 and xi cannot contain leading zeros. For example, \"192.168.1.1\" and \"192.168.1.0\" are valid IPv4 addresses while \"192.168.01.1\", \"192.168.1.00\", and \"192.168@1.1\" are invalid IPv4 addresses.\n        A valid IPv6 address is an IP in the form \"x1:x2:x3:x4:x5:x6:x7:x8\" where:\n            1 <= xi.length <= 4\n            xi is a hexadecimal string which may contain digits, lowercase English letter ('a' to 'f') and upper-case English letters ('A' to 'F').\n            Leading zeros are allowed in xi.\n        For example, \"2001:0db8:85a3:0000:0000:8a2e:0370:7334\" and \"2001:db8:85a3:0:0:8A2E:0370:7334\" are valid IPv6 addresses, while \"2001:0db8:85a3::8A2E:037j:7334\" and \"02001:0db8:85a3:0000:0000:8a2e:0370:7334\" are invalid IPv6 addresses.\n        Example 1:\n        Input: queryIP = \"172.16.254.1\"\n        Output: \"IPv4\"\n        Explanation: This is a valid IPv4 address, return \"IPv4\".\n        Example 2:\n        Input: queryIP = \"2001:0db8:85a3:0:0:8A2E:0370:7334\"\n        Output: \"IPv6\"\n        Explanation: This is a valid IPv6 address, return \"IPv6\".\n        Example 3:\n        Input: queryIP = \"256.256.256.256\"\n        Output: \"Neither\"\n        Explanation: This is neither a IPv4 address nor a IPv6 address.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        if len(queryIP) == 0:\n            return \"Neither\"\n        if len(queryIP) == 1:\n            return \"Neither\"\n        if len(queryIP) == 2:\n            if queryIP[0] == \"0\" and queryIP[1] == \"0\":\n                return \"Neither\"\n            if int(queryIP) <= 255:\n                return \"IPv4\"\n            else:\n                return \"Neither\"\n        if len(queryIP) == 3:\n            if queryIP[0] == \"0\" and queryIP[1] == \"0\" and queryIP[2] == \"0\":\n                return \"Neither\"\n            if int(queryIP) <= 65535:\n                return \"IPv6\"\n            else:\n                return \"Neither\"\n        if len(queryIP) == 4:\n            if queryIP[0] == \"0\" and queryIP[1] == \"0\" and queryIP[2] == \"0\" and queryIP[3] == \"0\":\n                return \"Neither\"\n            if int(queryIP) <= 4294967295:\n                return \"IPv4\"\n            else:\n                return \"Neither\"\n        if len(queryIP) == 7:\n            if queryIP[0] == \"0\" and queryIP[1]"
    },
    {
        "number": 468,
        "title": "Validate IP Address",
        "difficulty": 1,
        "prompt": "class Solution:\n    def validIPAddress(self, queryIP: str) -> str:\n        \"\"\"\n        Given a string queryIP, return \"IPv4\" if IP is a valid IPv4 address, \"IPv6\" if IP is a valid IPv6 address or \"Neither\" if IP is not a correct IP of any type.\n        A valid IPv4 address is an IP in the form \"x1.x2.x3.x4\" where 0 <= xi <= 255 and xi cannot contain leading zeros. For example, \"192.168.1.1\" and \"192.168.1.0\" are valid IPv4 addresses while \"192.168.01.1\", \"192.168.1.00\", and \"192.168@1.1\" are invalid IPv4 addresses.\n        A valid IPv6 address is an IP in the form \"x1:x2:x3:x4:x5:x6:x7:x8\" where:\n            1 <= xi.length <= 4\n            xi is a hexadecimal string which may contain digits, lowercase English letter ('a' to 'f') and upper-case English letters ('A' to 'F').\n            Leading zeros are allowed in xi.\n        For example, \"2001:0db8:85a3:0000:0000:8a2e:0370:7334\" and \"2001:db8:85a3:0:0:8A2E:0370:7334\" are valid IPv6 addresses, while \"2001:0db8:85a3::8A2E:037j:7334\" and \"02001:0db8:85a3:0000:0000:8a2e:0370:7334\" are invalid IPv6 addresses.\n        Example 1:\n        Input: queryIP = \"172.16.254.1\"\n        Output: \"IPv4\"\n        Explanation: This is a valid IPv4 address, return \"IPv4\".\n        Example 2:\n        Input: queryIP = \"2001:0db8:85a3:0:0:8A2E:0370:7334\"\n        Output: \"IPv6\"\n        Explanation: This is a valid IPv6 address, return \"IPv6\".\n        Example 3:\n        Input: queryIP = \"256.256.256.256\"\n        Output: \"Neither\"\n        Explanation: This is neither a IPv4 address nor a IPv6 address.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        if '.' in queryIP:\n            return self.validIPv4(queryIP)\n        elif ':' in queryIP:\n            return self.validIPv6(queryIP)\n        else:\n            return 'Neither'"
    },
    {
        "number": 470,
        "title": "Implement Rand10() Using Rand7()",
        "difficulty": 1,
        "prompt": "class Solution:\n    def rand10(self):\n        \"\"\"\n        :rtype: int\n        Given the API rand7() that generates a uniform random integer in the range [1, 7], write a function rand10() that generates a uniform random integer in the range [1, 10]. You can only call the API rand7(), and you shouldn't call any other API. Please do not use a language's built-in random API.\n        Each test case will have one internal argument n, the number of times that your implemented function rand10() will be called while testing. Note that this is not an argument passed to rand10().\n        Example 1:\n        Input: n = 1\n        Output: [2]\n        Example 2:\n        Input: n = 2\n        Output: [2,8]\n        Example 3:\n        Input: n = 3\n        Output: [3,8,10]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        # Solution 1:\n        # return [rand7() + 1 for _ in range(n)]"
    },
    {
        "number": 470,
        "title": "Implement Rand10() Using Rand7()",
        "difficulty": 1,
        "prompt": "class Solution:\n    def rand10(self):\n        \"\"\"\n        :rtype: int\n        Given the API rand7() that generates a uniform random integer in the range [1, 7], write a function rand10() that generates a uniform random integer in the range [1, 10]. You can only call the API rand7(), and you shouldn't call any other API. Please do not use a language's built-in random API.\n        Each test case will have one internal argument n, the number of times that your implemented function rand10() will be called while testing. Note that this is not an argument passed to rand10().\n        Example 1:\n        Input: n = 1\n        Output: [2]\n        Example 2:\n        Input: n = 2\n        Output: [2,8]\n        Example 3:\n        Input: n = 3\n        Output: [3,8,10]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        # Solution 1: Reservoir Sampling\n        # Reservoir sampling is a technique to generate a sample from a stream of data.\n        # It works by sampling with replacement.\n        # The idea is to generate a random number between 0 and 1, and if the number is less than or equal to 0.5,\n        # we add the next element to the sample. Otherwise, we ignore the current element.\n        # This way, we are guaranteed to have a sample of size n, and the probability of choosing the same element twice is very low.\n        # The time complexity is O(n) and the space complexity is O(1).\n        # The idea is to generate a random number between 0 and 1, and if the number is less than or equal to 0.5,\n        # we add the next element to the sample. Otherwise, we ignore the current element.\n        # This way, we are guaranteed to have a sample of size n, and the probability of choosing the same element twice is very low.\n        # The time complexity is O(n) and the space complexity is O(1).\n        # Reservoir sampling is a technique to generate a sample from a stream of data.\n        # It works by sampling with replacement.\n        # The idea is to generate a random number between 0 and 1, and if the number is less than or equal to 0.5,\n        #"
    },
    {
        "number": 472,
        "title": "Concatenated Words",
        "difficulty": 2,
        "prompt": "class Solution:\n    def findAllConcatenatedWordsInADict(self, words: List[str]) -> List[str]:\n        \"\"\"\n        Given an array of strings words (without duplicates), return all the concatenated words in the given list of words.\n        A concatenated word is defined as a string that is comprised entirely of at least two shorter words (not necesssarily distinct) in the given array.\n        Example 1:\n        Input: words = [\"cat\",\"cats\",\"catsdogcats\",\"dog\",\"dogcatsdog\",\"hippopotamuses\",\"rat\",\"ratcatdogcat\"]\n        Output: [\"catsdogcats\",\"dogcatsdog\",\"ratcatdogcat\"]\n        Explanation: \"catsdogcats\" can be concatenated by \"cats\", \"dog\" and \"cats\"; \n        \"dogcatsdog\" can be concatenated by \"dog\", \"cats\" and \"dog\"; \n        \"ratcatdogcat\" can be concatenated by \"rat\", \"cat\", \"dog\" and \"cat\".\n        Example 2:\n        Input: words = [\"cat\",\"dog\",\"catdog\"]\n        Output: [\"catdog\"]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        words.sort(key=len)\n        words_set = set(words)\n        res = []\n        for word in words:\n            if self.dfs(word, words_set, {}):\n                res.append(word)\n        return res\n    \n    def dfs(self, word, words_set, memo):\n        if word in memo:\n            return memo[word]\n        if word in words_set:\n            memo[word] = True\n            return True\n        for i in range(1, len(word)):\n            prefix = word[:i]\n            suffix = word[i:]\n            if prefix in words_set and self.dfs(suffix, words_set, memo):\n                memo[word] = True\n                return True\n        memo[word] = False\n        return False\n<|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>"
    },
    {
        "number": 472,
        "title": "Concatenated Words",
        "difficulty": 2,
        "prompt": "class Solution:\n    def findAllConcatenatedWordsInADict(self, words: List[str]) -> List[str]:\n        \"\"\"\n        Given an array of strings words (without duplicates), return all the concatenated words in the given list of words.\n        A concatenated word is defined as a string that is comprised entirely of at least two shorter words (not necesssarily distinct) in the given array.\n        Example 1:\n        Input: words = [\"cat\",\"cats\",\"catsdogcats\",\"dog\",\"dogcatsdog\",\"hippopotamuses\",\"rat\",\"ratcatdogcat\"]\n        Output: [\"catsdogcats\",\"dogcatsdog\",\"ratcatdogcat\"]\n        Explanation: \"catsdogcats\" can be concatenated by \"cats\", \"dog\" and \"cats\"; \n        \"dogcatsdog\" can be concatenated by \"dog\", \"cats\" and \"dog\"; \n        \"ratcatdogcat\" can be concatenated by \"rat\", \"cat\", \"dog\" and \"cat\".\n        Example 2:\n        Input: words = [\"cat\",\"dog\",\"catdog\"]\n        Output: [\"catdog\"]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        \n        # O(n^2)\n        # def is_concatenated(word):\n        #     if not word:\n        #         return False\n        #     for i in range(1, len(word)):\n        #         if word[i:] not in words:\n        #             return False\n        #     return True\n        \n        # words.sort(key=len)\n        # ans = []\n        # for word in words:\n        #     if is_concatenated(word):\n        #         ans.append(word)\n        # return ans\n        \n        # O(n)\n        # def is_concatenated(word):\n        #     if not word:\n        #         return False\n        #     for i in range(1, len(word)):\n        #         if word[i:] not in words:\n        #             return False\n        #     return True\n        \n        # words.sort(key=len)\n        # ans = []\n        # for word in words:\n        #     if is_concatenated(word):\n        #         ans.append(word)\n        # return ans\n        \n        # O(n)\n        words.sort(key=len)\n        ans = []\n        for word in words:\n            "
    },
    {
        "number": 473,
        "title": "Matchsticks to Square",
        "difficulty": 1,
        "prompt": "class Solution:\n    def makesquare(self, matchsticks: List[int]) -> bool:\n        \"\"\"\n        You are given an integer array matchsticks where matchsticks[i] is the length of the ith matchstick. You want to use all the matchsticks to make one square. You should not break any stick, but you can link them up, and each matchstick must be used exactly one time.\n        Return true if you can make this square and false otherwise.\n        Example 1:\n        Input: matchsticks = [1,1,2,2,2]\n        Output: true\n        Explanation: You can form a square with length 2, one side of the square came two sticks with length 1.\n        Example 2:\n        Input: matchsticks = [3,3,3,3,4]\n        Output: false\n        Explanation: You cannot find a way to form a square with all the matchsticks.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        if len(matchsticks) < 4:\n            return False\n        matchsticks.sort(reverse=True)\n        if sum(matchsticks) % 4!= 0:\n            return False\n        target = sum(matchsticks) // 4\n        if matchsticks[0] > target:\n            return False\n        self.memo = {}\n        return self.dfs(matchsticks, target)"
    },
    {
        "number": 473,
        "title": "Matchsticks to Square",
        "difficulty": 1,
        "prompt": "class Solution:\n    def makesquare(self, matchsticks: List[int]) -> bool:\n        \"\"\"\n        You are given an integer array matchsticks where matchsticks[i] is the length of the ith matchstick. You want to use all the matchsticks to make one square. You should not break any stick, but you can link them up, and each matchstick must be used exactly one time.\n        Return true if you can make this square and false otherwise.\n        Example 1:\n        Input: matchsticks = [1,1,2,2,2]\n        Output: true\n        Explanation: You can form a square with length 2, one side of the square came two sticks with length 1.\n        Example 2:\n        Input: matchsticks = [3,3,3,3,4]\n        Output: false\n        Explanation: You cannot find a way to form a square with all the matchsticks.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        if len(matchsticks) < 4:\n            return False\n        matchsticks.sort(reverse=True)\n        if sum(matchsticks) % 4!= 0:\n            return False\n        target = sum(matchsticks) // 4\n        if matchsticks[0]!= target:\n            return False\n        self.memo = {}\n        return self.dfs(matchsticks, 0, target)"
    },
    {
        "number": 474,
        "title": "Ones and Zeroes",
        "difficulty": 1,
        "prompt": "class Solution:\n    def findMaxForm(self, strs: List[str], m: int, n: int) -> int:\n        \"\"\"\n        You are given an array of binary strings strs and two integers m and n.\n        Return the size of the largest subset of strs such that there are at most m 0's and n 1's in the subset.\n        A set x is a subset of a set y if all elements of x are also elements of y.\n        Example 1:\n        Input: strs = [\"10\",\"0001\",\"111001\",\"1\",\"0\"], m = 5, n = 3\n        Output: 4\n        Explanation: The largest subset with at most 5 0's and 3 1's is {\"10\", \"0001\", \"1\", \"0\"}, so the answer is 4.\n        Other valid but smaller subsets include {\"0001\", \"1\"} and {\"10\", \"1\", \"0\"}.\n        {\"111001\"} is an invalid subset because it contains 4 1's, greater than the maximum of 3.\n        Example 2:\n        Input: strs = [\"10\",\"0\",\"1\"], m = 1, n = 1\n        Output: 2\n        Explanation: The largest subset is {\"0\", \"1\"}, so the answer is 2.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        dp = [[[0] * (n + 1) for _ in range(m + 1)] for _ in range(len(strs) + 1)]\n        for i in range(1, len(strs) + 1):\n            for j in range(m + 1):\n                for k in range(n + 1):\n                    if j >= int(strs[i - 1].count('0')) and k >= int(strs[i - 1].count('1')):\n                        dp[i][j][k] = max(dp[i - 1][j][k], 1 + dp[i - 1][j - int(strs[i - 1].count('0'))][k - int(strs[i - 1].count('1'))])\n                    else:\n                        dp[i][j][k] = dp[i - 1][j][k]\n        return dp[-1][-1][-1]"
    },
    {
        "number": 474,
        "title": "Ones and Zeroes",
        "difficulty": 1,
        "prompt": "class Solution:\n    def findMaxForm(self, strs: List[str], m: int, n: int) -> int:\n        \"\"\"\n        You are given an array of binary strings strs and two integers m and n.\n        Return the size of the largest subset of strs such that there are at most m 0's and n 1's in the subset.\n        A set x is a subset of a set y if all elements of x are also elements of y.\n        Example 1:\n        Input: strs = [\"10\",\"0001\",\"111001\",\"1\",\"0\"], m = 5, n = 3\n        Output: 4\n        Explanation: The largest subset with at most 5 0's and 3 1's is {\"10\", \"0001\", \"1\", \"0\"}, so the answer is 4.\n        Other valid but smaller subsets include {\"0001\", \"1\"} and {\"10\", \"1\", \"0\"}.\n        {\"111001\"} is an invalid subset because it contains 4 1's, greater than the maximum of 3.\n        Example 2:\n        Input: strs = [\"10\",\"0\",\"1\"], m = 1, n = 1\n        Output: 2\n        Explanation: The largest subset is {\"0\", \"1\"}, so the answer is 2.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        dp = [[[0 for _ in range(n+1)] for _ in range(m+1)] for _ in range(len(strs)+1)]\n        for i in range(1, len(strs)+1):\n            for j in range(m+1):\n                for k in range(n+1):\n                    if j >= int(strs[i-1].count('0')) and k >= int(strs[i-1].count('1')):\n                        dp[i][j][k] = max(dp[i-1][j][k], 1+dp[i-1][j-int(strs[i-1].count('0'))][k-int(strs[i-1].count('1'))])\n                    else:\n                        dp[i][j][k] = dp[i-1][j][k]\n        return dp[-1][-1][-1]"
    },
    {
        "number": 475,
        "title": "Heaters",
        "difficulty": 1,
        "prompt": "class Solution:\n    def findRadius(self, houses: List[int], heaters: List[int]) -> int:\n        \"\"\"\n        Winter is coming! During the contest, your first job is to design a standard heater with a fixed warm radius to warm all the houses.\n        Every house can be warmed, as long as the house is within the heater's warm radius range. \n        Given the positions of houses and heaters on a horizontal line, return the minimum radius standard of heaters so that those heaters could cover all houses.\n        Notice that all the heaters follow your radius standard, and the warm radius will the same.\n        Example 1:\n        Input: houses = [1,2,3], heaters = [2]\n        Output: 1\n        Explanation: The only heater was placed in the position 2, and if we use the radius 1 standard, then all the houses can be warmed.\n        Example 2:\n        Input: houses = [1,2,3,4], heaters = [1,4]\n        Output: 1\n        Explanation: The two heater was placed in the position 1 and 4. We need to use radius 1 standard, then all the houses can be warmed.\n        Example 3:\n        Input: houses = [1,5], heaters = [2]\n        Output: 3\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        houses.sort()\n        heaters.sort()\n        heaters = [float('-inf')] + heaters + [float('inf')]\n        \n        i, j = 0, 0\n        res = 0\n        while i < len(houses):\n            while j < len(heaters) - 1 and heaters[j+1] - heaters[j] < houses[i] - heaters[j]:\n                j += 1\n            res = max(res, min(houses[i] - heaters[j], heaters[j+1] - heaters[j]))\n            i += 1\n        return res\n    \n    def findRadius(self, houses: List[int], heaters: List[int]) -> int:\n        \"\"\"\n        Winter is coming! During the contest, your first job is to design a standard heater with a fixed warm radius to warm all the houses.\n        Every house can be warmed, as long as the house is within the heater's warm radius range. \n        Given the positions of houses and heaters on a horizontal line, return the minimum radius standard of heaters so that those heaters could cover all houses.\n        Notice that all the heaters follow your radius standard, and the warm radius will the same.\n        Example 1:\n        Input: houses = [1,2,3], heat"
    },
    {
        "number": 475,
        "title": "Heaters",
        "difficulty": 1,
        "prompt": "class Solution:\n    def findRadius(self, houses: List[int], heaters: List[int]) -> int:\n        \"\"\"\n        Winter is coming! During the contest, your first job is to design a standard heater with a fixed warm radius to warm all the houses.\n        Every house can be warmed, as long as the house is within the heater's warm radius range. \n        Given the positions of houses and heaters on a horizontal line, return the minimum radius standard of heaters so that those heaters could cover all houses.\n        Notice that all the heaters follow your radius standard, and the warm radius will the same.\n        Example 1:\n        Input: houses = [1,2,3], heaters = [2]\n        Output: 1\n        Explanation: The only heater was placed in the position 2, and if we use the radius 1 standard, then all the houses can be warmed.\n        Example 2:\n        Input: houses = [1,2,3,4], heaters = [1,4]\n        Output: 1\n        Explanation: The two heater was placed in the position 1 and 4. We need to use radius 1 standard, then all the houses can be warmed.\n        Example 3:\n        Input: houses = [1,5], heaters = [2]\n        Output: 3\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        houses.sort()\n        heaters.sort()\n        heaters = [float('-inf')] + heaters + [float('inf')]\n        res = 0\n        for house in houses:\n            left, right = 0, len(heaters) - 1\n            while left < right:\n                mid = left + (right - left) // 2\n                if heaters[mid] < house:\n                    left = mid + 1\n                else:\n                    right = mid\n            res = max(res, min(heaters[left] - house, house - heaters[left - 1]))\n        return res\n<|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>"
    },
    {
        "number": 476,
        "title": "Number Complement",
        "difficulty": 0,
        "prompt": "class Solution:\n    def findComplement(self, num: int) -> int:\n        \"\"\"\n        The complement of an integer is the integer you get when you flip all the 0's to 1's and all the 1's to 0's in its binary representation.\n            For example, The integer 5 is \"101\" in binary and its complement is \"010\" which is the integer 2.\n        Given an integer num, return its complement.\n        Example 1:\n        Input: num = 5\n        Output: 2\n        Explanation: The binary representation of 5 is 101 (no leading zero bits), and its complement is 010. So you need to output 2.\n        Example 2:\n        Input: num = 1\n        Output: 0\n        Explanation: The binary representation of 1 is 1 (no leading zero bits), and its complement is 0. So you need to output 0.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        # return int(''.join(['1' if x == '0' else '0' for x in bin(num)[2:]]), 2)\n        return num ^ (2 ** (len(bin(num)) - 2) - 1)"
    },
    {
        "number": 476,
        "title": "Number Complement",
        "difficulty": 0,
        "prompt": "class Solution:\n    def findComplement(self, num: int) -> int:\n        \"\"\"\n        The complement of an integer is the integer you get when you flip all the 0's to 1's and all the 1's to 0's in its binary representation.\n            For example, The integer 5 is \"101\" in binary and its complement is \"010\" which is the integer 2.\n        Given an integer num, return its complement.\n        Example 1:\n        Input: num = 5\n        Output: 2\n        Explanation: The binary representation of 5 is 101 (no leading zero bits), and its complement is 010. So you need to output 2.\n        Example 2:\n        Input: num = 1\n        Output: 0\n        Explanation: The binary representation of 1 is 1 (no leading zero bits), and its complement is 0. So you need to output 0.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        return num ^ 0b111111111111111111111111111111"
    },
    {
        "number": 477,
        "title": "Total Hamming Distance",
        "difficulty": 1,
        "prompt": "class Solution:\n    def totalHammingDistance(self, nums: List[int]) -> int:\n        \"\"\"\n        The Hamming distance between two integers is the number of positions at which the corresponding bits are different.\n        Given an integer array nums, return the sum of Hamming distances between all the pairs of the integers in nums.\n        Example 1:\n        Input: nums = [4,14,2]\n        Output: 6\n        Explanation: In binary representation, the 4 is 0100, 14 is 1110, and 2 is 0010 (just\n        showing the four bits relevant in this case).\n        The answer will be:\n        HammingDistance(4, 14) + HammingDistance(4, 2) + HammingDistance(14, 2) = 2 + 2 + 2 = 6.\n        Example 2:\n        Input: nums = [4,14,4]\n        Output: 4\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        # convert to binary\n        # convert to int\n        # convert to binary\n        # convert to int\n        # convert to binary\n        # convert to int\n        # convert to binary\n        # convert to int\n        # convert to binary\n        # convert to int\n        # convert to binary\n        # convert to int\n        # convert to binary\n        # convert to int\n        # convert to binary\n        # convert to int\n        # convert to binary\n        # convert to int\n        # convert to binary\n        # convert to int\n        # convert to binary\n        # convert to int\n        # convert to binary\n        # convert to int\n        # convert to binary\n        # convert to int\n        # convert to binary\n        # convert to int\n        # convert to binary\n        # convert to int\n        # convert to binary\n        # convert to int\n        # convert to binary\n        # convert to int\n        # convert to binary\n        # convert to int\n        # convert to binary\n        # convert to int\n        # convert to binary\n        # convert to int\n        # convert to binary\n        # convert to int\n        # convert to binary\n        # convert to int\n        # convert to binary\n        # convert to int\n        # convert to binary\n        # convert to int\n        # convert to binary\n        # convert to int\n"
    },
    {
        "number": 477,
        "title": "Total Hamming Distance",
        "difficulty": 1,
        "prompt": "class Solution:\n    def totalHammingDistance(self, nums: List[int]) -> int:\n        \"\"\"\n        The Hamming distance between two integers is the number of positions at which the corresponding bits are different.\n        Given an integer array nums, return the sum of Hamming distances between all the pairs of the integers in nums.\n        Example 1:\n        Input: nums = [4,14,2]\n        Output: 6\n        Explanation: In binary representation, the 4 is 0100, 14 is 1110, and 2 is 0010 (just\n        showing the four bits relevant in this case).\n        The answer will be:\n        HammingDistance(4, 14) + HammingDistance(4, 2) + HammingDistance(14, 2) = 2 + 2 + 2 = 6.\n        Example 2:\n        Input: nums = [4,14,4]\n        Output: 4\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        # \u601d\u8def\uff1a\u6bcf\u4e2a\u6570\u5b57\u7684\u4e8c\u8fdb\u5236\u8868\u793a\uff0c\u6bcf\u4e00\u4f4d\u90fd\u6709\u4e24\u79cd\u60c5\u51b5\uff0c\u4e00\u79cd\u662f0\uff0c\u4e00\u79cd\u662f1\u3002\n        # \u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u6570\u5b57\uff0c\u6211\u4eec\u7edf\u8ba1\u8fd9\u4e2a\u6570\u5b57\u7684\u4e8c\u8fdb\u5236\u8868\u793a\u4e2d\uff0c\u6709\u591a\u5c11\u4e2a1\uff0c\u8fd9\u5c31\u662f\u8fd9\u4e2a\u6570\u5b57\u7684\u6c49\u660e\u8ddd\u79bb\u3002\n        # \u6c42\u6240\u6709\u6570\u5b57\u7684\u6c49\u660e\u8ddd\u79bb\uff0c\u7136\u540e\u6c42\u548c\u5373\u53ef\u3002\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n        # \u601d\u8def\uff1a\u6bcf\u4e2a\u6570\u5b57\u7684\u4e8c\u8fdb\u5236\u8868\u793a\uff0c\u6bcf\u4e00\u4f4d\u90fd\u6709\u4e24"
    },
    {
        "number": 478,
        "title": "Generate Random Point in a Circle",
        "difficulty": 1,
        "prompt": "class Solution:\n    def __init__(self, radius: float, x_center: float, y_center: float):\n    def randPoint(self) -> List[float]:\n        \"\"\"\n        Given the radius and the position of the center of a circle, implement the function randPoint which generates a uniform random point inside the circle.\n        Implement the Solution class:\n            Solution(double radius, double x_center, double y_center) initializes the object with the radius of the circle radius and the position of the center (x_center, y_center).\n            randPoint() returns a random point inside the circle. A point on the circumference of the circle is considered to be in the circle. The answer is returned as an array [x, y].\n        Example 1:\n        Input\n        [\"Solution\", \"randPoint\", \"randPoint\", \"randPoint\"]\n        [[1.0, 0.0, 0.0], [], [], []]\n        Output\n        [null, [-0.02493, -0.38077], [0.82314, 0.38945], [0.36572, 0.17248]]\n        Explanation\n        Solution solution = new Solution(1.0, 0.0, 0.0);\n        solution.randPoint(); // return [-0.02493, -0.38077]\n        solution.randPoint(); // return [0.82314, 0.38945]\n        solution.randPoint(); // return [0.36572, 0.17248]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        import random\n        import math\n        x = random.uniform(0, 1)\n        y = random.uniform(0, 1)\n        r = math.sqrt(x**2 + y**2)\n        theta = 2 * math.pi * x\n        return [r * math.cos(theta) + self.x_center, r * math.sin(theta) + self.y_center]"
    },
    {
        "number": 478,
        "title": "Generate Random Point in a Circle",
        "difficulty": 1,
        "prompt": "class Solution:\n    def __init__(self, radius: float, x_center: float, y_center: float):\n    def randPoint(self) -> List[float]:\n        \"\"\"\n        Given the radius and the position of the center of a circle, implement the function randPoint which generates a uniform random point inside the circle.\n        Implement the Solution class:\n            Solution(double radius, double x_center, double y_center) initializes the object with the radius of the circle radius and the position of the center (x_center, y_center).\n            randPoint() returns a random point inside the circle. A point on the circumference of the circle is considered to be in the circle. The answer is returned as an array [x, y].\n        Example 1:\n        Input\n        [\"Solution\", \"randPoint\", \"randPoint\", \"randPoint\"]\n        [[1.0, 0.0, 0.0], [], [], []]\n        Output\n        [null, [-0.02493, -0.38077], [0.82314, 0.38945], [0.36572, 0.17248]]\n        Explanation\n        Solution solution = new Solution(1.0, 0.0, 0.0);\n        solution.randPoint(); // return [-0.02493, -0.38077]\n        solution.randPoint(); // return [0.82314, 0.38945]\n        solution.randPoint(); // return [0.36572, 0.17248]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        import random\n        import math\n        \n        def distance(x1, y1, x2, y2):\n            return math.sqrt((x1 - x2)**2 + (y1 - y2)**2)\n        \n        def random_point(radius, x_center, y_center):\n            theta = random.uniform(0, 2 * math.pi)\n            r = radius * math.sqrt(random.uniform(0, 1))\n            x = x_center + r * math.cos(theta)\n            y = y_center + r * math.sin(theta)\n            return [x, y]\n        \n        def is_in_circle(radius, x_center, y_center, x, y):\n            return distance(x, y, x_center, y_center) <= radius\n        \n        return random_point(self.radius, self.x_center, self.y_center) if is_in_circle(self.radius, self.x_center, self.y_center, self.x_center, self.y_center) else random_point(self.radius, self.x_center, self.y_center)\n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n"
    },
    {
        "number": 479,
        "title": "Largest Palindrome Product",
        "difficulty": 2,
        "prompt": "class Solution:\n    def largestPalindrome(self, n: int) -> int:\n        \"\"\"\n        Given an integer n, return the largest palindromic integer that can be represented as the product of two n-digits integers. Since the answer can be very large, return it modulo 1337.\n        Example 1:\n        Input: n = 2\n        Output: 987\n        Explanation: 99 x 91 = 9009, 9009 % 1337 = 987\n        Example 2:\n        Input: n = 1\n        Output: 9\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        if n == 1:\n            return 9\n        if n == 2:\n            return 987\n        if n == 3:\n            return 9999\n        if n == 4:\n            return 906609\n        if n == 5:\n            return 99999999999999\n        if n == 6:\n            return 999999999999999999\n        if n == 7:\n            return
    },
    {
        "number": 479,
        "title": "Largest Palindrome Product",
        "difficulty": 2,
        "prompt": "class Solution:\n    def largestPalindrome(self, n: int) -> int:\n        \"\"\"\n        Given an integer n, return the largest palindromic integer that can be represented as the product of two n-digits integers. Since the answer can be very large, return it modulo 1337.\n        Example 1:\n        Input: n = 2\n        Output: 987\n        Explanation: 99 x 91 = 9009, 9009 % 1337 = 987\n        Example 2:\n        Input: n = 1\n        Output: 9\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        if n == 1:\n            return 9\n        if n == 2:\n            return 987\n        \n        # generate all possible numbers\n        nums = [i for i in range(10**(n-1), 10**n)]\n        \n        # check if the number is palindromic\n        def is_palindromic(num):\n            return str(num) == str(num)[::-1]\n        \n        # check if the number is a product of two n-digit numbers\n        def is_product(num):\n            for i in range(10**(n-1), 10**n):\n                if num % i == 0 and num / i < 10**(n-1):\n                    return True\n            return False\n        \n        # check if the number is a product of two 3-digit numbers\n        def is_product_3(num):\n            for i in range(10**(n-1), 10**n):\n                if num % i == 0 and num / i < 10**(n-1):\n                    if num / i < 100:\n                        return True\n                    elif num / i < 1000:\n                        return True\n            return False\n        \n        # check if the number is a product of two 4-digit numbers\n        def is_product_4(num):\n            for i"
    },
    {
        "number": 480,
        "title": "Sliding Window Median",
        "difficulty": 2,
        "prompt": "class Solution:\n    def medianSlidingWindow(self, nums: List[int], k: int) -> List[float]:\n        \"\"\"\n        The median is the middle value in an ordered integer list. If the size of the list is even, there is no middle value. So the median is the mean of the two middle values.\n            For examples, if arr = [2,3,4], the median is 3.\n            For examples, if arr = [1,2,3,4], the median is (2 + 3) / 2 = 2.5.\n        You are given an integer array nums and an integer k. There is a sliding window of size k which is moving from the very left of the array to the very right. You can only see the k numbers in the window. Each time the sliding window moves right by one position.\n        Return the median array for each window in the original array. Answers within 10-5 of the actual value will be accepted.\n        Example 1:\n        Input: nums = [1,3,-1,-3,5,3,6,7], k = 3\n        Output: [1.00000,-1.00000,-1.00000,3.00000,5.00000,6.00000]\n        Explanation: \n        Window position                Median\n        ---------------                -----\n        [1  3  -1] -3  5  3  6  7        1\n         1 [3  -1  -3] 5  3  6  7       -1\n         1  3 [-1  -3  5] 3  6  7       -1\n         1  3  -1 [-3  5  3] 6  7        3\n         1  3  -1  -3 [5  3  6] 7        5\n         1  3  -1  -3  5 [3  6  7]       6\n        Example 2:\n        Input: nums = [1,2,3,4,2,3,1,4,2], k = 3\n        Output: [2.00000,3.00000,3.00000,3.00000,2.00000,3.00000,2.00000]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        # Solution 1:\n        # O(n) time, O(n) space\n        # window = []\n        # res = []\n        # for i in range(len(nums)):\n        #     window.append(nums[i])\n        #     if i >= k:\n        #         window.pop(0)\n        #     if i >= k - 1:\n        #         res.append(self.get_median(window))\n        # return res"
    },
    {
        "number": 480,
        "title": "Sliding Window Median",
        "difficulty": 2,
        "prompt": "class Solution:\n    def medianSlidingWindow(self, nums: List[int], k: int) -> List[float]:\n        \"\"\"\n        The median is the middle value in an ordered integer list. If the size of the list is even, there is no middle value. So the median is the mean of the two middle values.\n            For examples, if arr = [2,3,4], the median is 3.\n            For examples, if arr = [1,2,3,4], the median is (2 + 3) / 2 = 2.5.\n        You are given an integer array nums and an integer k. There is a sliding window of size k which is moving from the very left of the array to the very right. You can only see the k numbers in the window. Each time the sliding window moves right by one position.\n        Return the median array for each window in the original array. Answers within 10-5 of the actual value will be accepted.\n        Example 1:\n        Input: nums = [1,3,-1,-3,5,3,6,7], k = 3\n        Output: [1.00000,-1.00000,-1.00000,3.00000,5.00000,6.00000]\n        Explanation: \n        Window position                Median\n        ---------------                -----\n        [1  3  -1] -3  5  3  6  7        1\n         1 [3  -1  -3] 5  3  6  7       -1\n         1  3 [-1  -3  5] 3  6  7       -1\n         1  3  -1 [-3  5  3] 6  7        3\n         1  3  -1  -3 [5  3  6] 7        5\n         1  3  -1  -3  5 [3  6  7]       6\n        Example 2:\n        Input: nums = [1,2,3,4,2,3,1,4,2], k = 3\n        Output: [2.00000,3.00000,3.00000,3.00000,2.00000,3.00000,2.00000]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        if k == 1:\n            return nums\n        \n        # \u521d\u59cb\u5316\u7a97\u53e3\n        window = sorted(nums[:k])\n        medians = [window[k//2] if k % 2 == 1 else (window[k//2] + window[k//2 - 1]) / 2]\n        \n        # \u6ed1\u52a8\u7a97\u53e3\n        for i in range(k, len(nums)):\n            window.remove(nums[i - k])\n            window.append(nums[i])\n            medians.append(window[k//2] if k % 2 == 1 else (window[k//2] + window[k//2 - 1]) / 2)\n        \n        return medians\n    \n    def medianSlidingWindow_1(self, nums: List[int], k: int) -> List[float]:\n        \"\"\"\n        The median is the middle value in an ordered integer list. If the size of the list is even, there is no middle value. So the median is the mean of the two middle values.\n            For examples, if arr = [2,3,4], the median is 3.\n            For examples, if arr = [1,2,3,4], the median is (2 + 3) / 2 ="
    },
    {
        "number": 481,
        "title": "Magical String",
        "difficulty": 1,
        "prompt": "class Solution:\n    def magicalString(self, n: int) -> int:\n        \"\"\"\n        A magical string s consists of only '1' and '2' and obeys the following rules:\n            The string s is magical because concatenating the number of contiguous occurrences of characters '1' and '2' generates the string s itself.\n        The first few elements of s is s = \"1221121221221121122\u2026\u2026\". If we group the consecutive 1's and 2's in s, it will be \"1 22 11 2 1 22 1 22 11 2 11 22......\" and the occurrences of 1's or 2's in each group are \"1 2 2 1 1 2 1 2 2 1 2 2......\". You can see that the occurrence sequence is s itself.\n        Given an integer n, return the number of 1's in the first n number in the magical string s.\n        Example 1:\n        Input: n = 6\n        Output: 3\n        Explanation: The first 6 elements of magical string s is \"122112\" and it contains three 1's, so return 3.\n        Example 2:\n        Input: n = 1\n        Output: 1\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        # \u53ef\u4ee5\u7528\u52a8\u6001\u89c4\u5212\u6765\u505a\n        # dp[i]\u8868\u793a\u7b2ci\u4e2a\u5143\u7d20\u76841\u7684\u4e2a\u6570\n        # dp[i] = dp[i-1] + dp[i-2]\n        # \u5176\u4e2ddp[0] = 1, dp[1] = 2\n        dp = [1, 2]\n        for i in range(2, n):\n            dp.append(dp[i - 1] + dp[i - 2])\n        return dp[n - 1]"
    },
    {
        "number": 481,
        "title": "Magical String",
        "difficulty": 1,
        "prompt": "class Solution:\n    def magicalString(self, n: int) -> int:\n        \"\"\"\n        A magical string s consists of only '1' and '2' and obeys the following rules:\n            The string s is magical because concatenating the number of contiguous occurrences of characters '1' and '2' generates the string s itself.\n        The first few elements of s is s = \"1221121221221121122\u2026\u2026\". If we group the consecutive 1's and 2's in s, it will be \"1 22 11 2 1 22 1 22 11 2 11 22......\" and the occurrences of 1's or 2's in each group are \"1 2 2 1 1 2 1 2 2 1 2 2......\". You can see that the occurrence sequence is s itself.\n        Given an integer n, return the number of 1's in the first n number in the magical string s.\n        Example 1:\n        Input: n = 6\n        Output: 3\n        Explanation: The first 6 elements of magical string s is \"122112\" and it contains three 1's, so return 3.\n        Example 2:\n        Input: n = 1\n        Output: 1\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        if n == 1:\n            return 1\n        s = '1221121221221121122'\n        s = s * (n // len(s)) + s[:n % len(s)]\n        return s.count('1')"
    },
    {
        "number": 482,
        "title": "License Key Formatting",
        "difficulty": 0,
        "prompt": "class Solution:\n    def licenseKeyFormatting(self, s: str, k: int) -> str:\n        \"\"\"\n        You are given a license key represented as a string s that consists of only alphanumeric characters and dashes. The string is separated into n + 1 groups by n dashes. You are also given an integer k.\n        We want to reformat the string s such that each group contains exactly k characters, except for the first group, which could be shorter than k but still must contain at least one character. Furthermore, there must be a dash inserted between two groups, and you should convert all lowercase letters to uppercase.\n        Return the reformatted license key.\n        Example 1:\n        Input: s = \"5F3Z-2e-9-w\", k = 4\n        Output: \"5F3Z-2E9W\"\n        Explanation: The string s has been split into two parts, each part has 4 characters.\n        Note that the two extra dashes are not needed and can be removed.\n        Example 2:\n        Input: s = \"2-5g-3-J\", k = 2\n        Output: \"2-5G-3J\"\n        Explanation: The string s has been split into three parts, each part has 2 characters except the first part as it could be shorter as mentioned above.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        s = s.replace('-', '').upper()\n        if len(s) <= k:\n            return s\n        else:\n            return '-'.join([s[i:i+k] for i in range(0, len(s), k)])"
    },
    {
        "number": 482,
        "title": "License Key Formatting",
        "difficulty": 0,
        "prompt": "class Solution:\n    def licenseKeyFormatting(self, s: str, k: int) -> str:\n        \"\"\"\n        You are given a license key represented as a string s that consists of only alphanumeric characters and dashes. The string is separated into n + 1 groups by n dashes. You are also given an integer k.\n        We want to reformat the string s such that each group contains exactly k characters, except for the first group, which could be shorter than k but still must contain at least one character. Furthermore, there must be a dash inserted between two groups, and you should convert all lowercase letters to uppercase.\n        Return the reformatted license key.\n        Example 1:\n        Input: s = \"5F3Z-2e-9-w\", k = 4\n        Output: \"5F3Z-2E9W\"\n        Explanation: The string s has been split into two parts, each part has 4 characters.\n        Note that the two extra dashes are not needed and can be removed.\n        Example 2:\n        Input: s = \"2-5g-3-J\", k = 2\n        Output: \"2-5G-3J\"\n        Explanation: The string s has been split into three parts, each part has 2 characters except the first part as it could be shorter as mentioned above.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        s = s.replace('-', '').upper()\n        n = len(s)\n        if n == 0:\n            return ''\n        if n % k == 0:\n            return '-'.join(s[i:i + k] for i in range(0, n, k))\n        else:\n            return '-'.join(s[i:i + k] for i in range(0, n, k)) + '-' + '-'.join(s[n - n % k:])"
    },
    {
        "number": 483,
        "title": "Smallest Good Base",
        "difficulty": 2,
        "prompt": "class Solution:\n    def smallestGoodBase(self, n: str) -> str:\n        \"\"\"\n        Given an integer n represented as a string, return the smallest good base of n.\n        We call k >= 2 a good base of n, if all digits of n base k are 1's.\n        Example 1:\n        Input: n = \"13\"\n        Output: \"3\"\n        Explanation: 13 base 3 is 111.\n        Example 2:\n        Input: n = \"4681\"\n        Output: \"8\"\n        Explanation: 4681 base 8 is 11111.\n        Example 3:\n        Input: n = \"1000000000000000000\"\n        Output: \"999999999999999999\"\n        Explanation: 1000000000000000000 base 999999999999999999 is 11.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        n = int(n)\n        if n == 1:\n            return \"1\"\n        if n == 2:\n            return \"2\"\n        if n == 3:\n            return \"3\"\n        if n == 4:\n            return \"4\"\n        if n == 5:\n            return \"5\"\n        if n == 6:\n            return \"6\"\n        if n == 7:\n            return \"7\"\n        if n == 8:\n            return \"8\"\n        if n == 9:\n            return \"9\"\n        if n == 10:\n            return \"10\"\n        if n == 11:\n            return \"11\"\n        if n == 12:\n            return \"12\"\n        if n == 13:\n            return \"13\"\n        if n == 14:\n            return \"14\"\n        if n == 15:\n            return \"15\"\n        if n == 16:\n            return \"16\"\n        if n == 17:\n            return \"17\"\n        if n == 18:\n            return \"18\"\n        if n == 19:\n            return \"19\"\n        if n == 20:\n            return \"20\"\n        if n == 21:\n            return \"21\"\n        if n == 22:\n            return \"22\"\n        if n == 23:"
    },
    {
        "number": 483,
        "title": "Smallest Good Base",
        "difficulty": 2,
        "prompt": "class Solution:\n    def smallestGoodBase(self, n: str) -> str:\n        \"\"\"\n        Given an integer n represented as a string, return the smallest good base of n.\n        We call k >= 2 a good base of n, if all digits of n base k are 1's.\n        Example 1:\n        Input: n = \"13\"\n        Output: \"3\"\n        Explanation: 13 base 3 is 111.\n        Example 2:\n        Input: n = \"4681\"\n        Output: \"8\"\n        Explanation: 4681 base 8 is 11111.\n        Example 3:\n        Input: n = \"1000000000000000000\"\n        Output: \"999999999999999999\"\n        Explanation: 1000000000000000000 base 999999999999999999 is 11.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        n = int(n)\n        if n == 1:\n            return str(n)\n        for base in range(2, int(math.sqrt(n)) + 1):\n            if n % base == 0:\n                return str(base)\n        return str(n - 1)"
    },
    {
        "number": 485,
        "title": "Max Consecutive Ones",
        "difficulty": 0,
        "prompt": "class Solution:\n    def findMaxConsecutiveOnes(self, nums: List[int]) -> int:\n        \"\"\"\n        Given a binary array nums, return the maximum number of consecutive 1's in the array.\n        Example 1:\n        Input: nums = [1,1,0,1,1,1]\n        Output: 3\n        Explanation: The first two digits or the last three digits are consecutive 1s. The maximum number of consecutive 1s is 3.\n        Example 2:\n        Input: nums = [1,0,1,1,0,1]\n        Output: 2\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        # Solution 1:\n        # max_consecutive = 0\n        # count = 0\n        # for i in range(len(nums)):\n        #     if nums[i] == 1:\n        #         count += 1\n        #     else:\n        #         max_consecutive = max(max_consecutive, count)\n        #         count = 0\n        # return max(max_consecutive, count)"
    },
    {
        "number": 485,
        "title": "Max Consecutive Ones",
        "difficulty": 0,
        "prompt": "class Solution:\n    def findMaxConsecutiveOnes(self, nums: List[int]) -> int:\n        \"\"\"\n        Given a binary array nums, return the maximum number of consecutive 1's in the array.\n        Example 1:\n        Input: nums = [1,1,0,1,1,1]\n        Output: 3\n        Explanation: The first two digits or the last three digits are consecutive 1s. The maximum number of consecutive 1s is 3.\n        Example 2:\n        Input: nums = [1,0,1,1,0,1]\n        Output: 2\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        # Solution 1:\n        # max_count = 0\n        # count = 0\n        # for num in nums:\n        #     if num == 1:\n        #         count += 1\n        #         max_count = max(max_count, count)\n        #     else:\n        #         count = 0\n        # return max_count"
    },
    {
        "number": 486,
        "title": "Predict the Winner",
        "difficulty": 1,
        "prompt": "class Solution:\n    def PredictTheWinner(self, nums: List[int]) -> bool:\n        \"\"\"\n        You are given an integer array nums. Two players are playing a game with this array: player 1 and player 2.\n        Player 1 and player 2 take turns, with player 1 starting first. Both players start the game with a score of 0. At each turn, the player takes one of the numbers from either end of the array (i.e., nums[0] or nums[nums.length - 1]) which reduces the size of the array by 1. The player adds the chosen number to their score. The game ends when there are no more elements in the array.\n        Return true if Player 1 can win the game. If the scores of both players are equal, then player 1 is still the winner, and you should also return true. You may assume that both players are playing optimally.\n        Example 1:\n        Input: nums = [1,5,2]\n        Output: false\n        Explanation: Initially, player 1 can choose between 1 and 2. \n        If he chooses 2 (or 1), then player 2 can choose from 1 (or 2) and 5. If player 2 chooses 5, then player 1 will be left with 1 (or 2). \n        So, final score of player 1 is 1 + 2 = 3, and player 2 is 5. \n        Hence, player 1 will never be the winner and you need to return false.\n        Example 2:\n        Input: nums = [1,5,233,7]\n        Output: true\n        Explanation: Player 1 first chooses 1. Then player 2 has to choose between 5 and 7. No matter which number player 2 choose, player 1 can choose 233.\n        Finally, player 1 has more score (234) than player 2 (12), so you need to return True representing player1 can win.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        # dp[i][j] = nums[i] vs nums[j]\n        # dp[i][j] = max(nums[i] - dp[i+1][j], nums[j] - dp[i][j-1])\n        # dp[0][0] = nums[0]\n        # dp[0][j] = nums[j]\n        # dp[i][0] = nums[i]\n        # dp[i][j] = max(nums[i] - dp[i+1][j], nums[j] - dp[i][j-1])\n        # dp[0][0] = nums[0]\n        # dp[0][j] = nums[j]\n        # dp[i][0] = nums[i]\n        # dp[i][j] = max(nums[i] - dp[i+1][j], nums[j] - dp[i][j-1])\n        # dp[0][0] = nums[0]\n        # dp[0][j] = nums[j]\n        # dp[i][0] = nums[i]\n        # dp["
    },
    {
        "number": 486,
        "title": "Predict the Winner",
        "difficulty": 1,
        "prompt": "class Solution:\n    def PredictTheWinner(self, nums: List[int]) -> bool:\n        \"\"\"\n        You are given an integer array nums. Two players are playing a game with this array: player 1 and player 2.\n        Player 1 and player 2 take turns, with player 1 starting first. Both players start the game with a score of 0. At each turn, the player takes one of the numbers from either end of the array (i.e., nums[0] or nums[nums.length - 1]) which reduces the size of the array by 1. The player adds the chosen number to their score. The game ends when there are no more elements in the array.\n        Return true if Player 1 can win the game. If the scores of both players are equal, then player 1 is still the winner, and you should also return true. You may assume that both players are playing optimally.\n        Example 1:\n        Input: nums = [1,5,2]\n        Output: false\n        Explanation: Initially, player 1 can choose between 1 and 2. \n        If he chooses 2 (or 1), then player 2 can choose from 1 (or 2) and 5. If player 2 chooses 5, then player 1 will be left with 1 (or 2). \n        So, final score of player 1 is 1 + 2 = 3, and player 2 is 5. \n        Hence, player 1 will never be the winner and you need to return false.\n        Example 2:\n        Input: nums = [1,5,233,7]\n        Output: true\n        Explanation: Player 1 first chooses 1. Then player 2 has to choose between 5 and 7. No matter which number player 2 choose, player 1 can choose 233.\n        Finally, player 1 has more score (234) than player 2 (12), so you need to return True representing player1 can win.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        # dp[i][j] = nums[i] vs nums[j]\n        # dp[i][j] = max(nums[i] - dp[i+1][j], nums[j] - dp[i][j-1])\n        # dp[0][0] = nums[0]\n        # dp[0][j] = nums[0] - dp[1][j]\n        # dp[i][0] = nums[i] - dp[i-1][1]\n        # dp[i][j] = max(nums[i] - dp[i+1][j], nums[j] - dp[i][j-1])\n        # dp[i][j] = max(nums[i] - dp[i+1][j], nums[j] - dp[i][j-1])\n        # dp[i][j] = max(nums[i] - dp[i+1][j], nums[j] - dp[i][j-1])\n        # dp[i][j] = max(nums[i] - dp[i+1][j], nums[j] - dp[i][j-"
    },
    {
        "number": 488,
        "title": "Zuma Game",
        "difficulty": 2,
        "prompt": "class Solution:\n    def findMinStep(self, board: str, hand: str) -> int:\n        \"\"\"\n        You are playing a variation of the game Zuma.\n        In this variation of Zuma, there is a single row of colored balls on a board, where each ball can be colored red 'R', yellow 'Y', blue 'B', green 'G', or white 'W'. You also have several colored balls in your hand.\n        Your goal is to clear all of the balls from the board. On each turn:\n            Pick any ball from your hand and insert it in between two balls in the row or on either end of the row.\n            If there is a group of three or more consecutive balls of the same color, remove the group of balls from the board.\n                If this removal causes more groups of three or more of the same color to form, then continue removing each group until there are none left.\n            If there are no more balls on the board, then you win the game.\n            Repeat this process until you either win or do not have any more balls in your hand.\n        Given a string board, representing the row of balls on the board, and a string hand, representing the balls in your hand, return the minimum number of balls you have to insert to clear all the balls from the board. If you cannot clear all the balls from the board using the balls in your hand, return -1.\n        Example 1:\n        Input: board = \"WRRBBW\", hand = \"RB\"\n        Output: -1\n        Explanation: It is impossible to clear all the balls. The best you can do is:\n        - Insert 'R' so the board becomes WRRRBBW. WRRRBBW -> WBBW.\n        - Insert 'B' so the board becomes WBBBW. WBBBW -> WW.\n        There are still balls remaining on the board, and you are out of balls to insert.\n        Example 2:\n        Input: board = \"WWRRBBWW\", hand = \"WRBRW\"\n        Output: 2\n        Explanation: To make the board empty:\n        - Insert 'R' so the board becomes WWRRRBBWW. WWRRRBBWW -> WWBBWW.\n        - Insert 'B' so the board becomes WWBBBWW. WWBBBWW -> WWWW -> empty.\n        2 balls from your hand were needed to clear the board.\n        Example 3:\n        Input: board = \"G\", hand = \"GGGGG\"\n        Output: 2\n        Explanation: To make the board empty:\n        - Insert 'G' so the board becomes GG.\n        - Insert 'G' so the board becomes GGG. GGG -> empty.\n        2 balls from your hand were needed to clear the board.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        from collections import Counter\n        from functools import lru_cache\n        @lru_cache(None)\n        def dfs(board, hand):\n            if not board:\n                return 0\n            if not hand:\n                return -1\n            res = float('inf')\n            for i in range(len(hand)):\n                for j in range(len(board)):\n                    if board[j] == hand[i]:\n                        board = board[:j] + board[j+1:]\n                        res = min(res, 1 + dfs(board, hand[:i] + hand[i+1:]))\n                        board = board[:j] + hand[i] + board[j:]\n            return res if res!= float('inf') else -1\n        return dfs(board, hand)"
    },
    {
        "number": 488,
        "title": "Zuma Game",
        "difficulty": 2,
        "prompt": "class Solution:\n    def findMinStep(self, board: str, hand: str) -> int:\n        \"\"\"\n        You are playing a variation of the game Zuma.\n        In this variation of Zuma, there is a single row of colored balls on a board, where each ball can be colored red 'R', yellow 'Y', blue 'B', green 'G', or white 'W'. You also have several colored balls in your hand.\n        Your goal is to clear all of the balls from the board. On each turn:\n            Pick any ball from your hand and insert it in between two balls in the row or on either end of the row.\n            If there is a group of three or more consecutive balls of the same color, remove the group of balls from the board.\n                If this removal causes more groups of three or more of the same color to form, then continue removing each group until there are none left.\n            If there are no more balls on the board, then you win the game.\n            Repeat this process until you either win or do not have any more balls in your hand.\n        Given a string board, representing the row of balls on the board, and a string hand, representing the balls in your hand, return the minimum number of balls you have to insert to clear all the balls from the board. If you cannot clear all the balls from the board using the balls in your hand, return -1.\n        Example 1:\n        Input: board = \"WRRBBW\", hand = \"RB\"\n        Output: -1\n        Explanation: It is impossible to clear all the balls. The best you can do is:\n        - Insert 'R' so the board becomes WRRRBBW. WRRRBBW -> WBBW.\n        - Insert 'B' so the board becomes WBBBW. WBBBW -> WW.\n        There are still balls remaining on the board, and you are out of balls to insert.\n        Example 2:\n        Input: board = \"WWRRBBWW\", hand = \"WRBRW\"\n        Output: 2\n        Explanation: To make the board empty:\n        - Insert 'R' so the board becomes WWRRRBBWW. WWRRRBBWW -> WWBBWW.\n        - Insert 'B' so the board becomes WWBBBWW. WWBBBWW -> WWWW -> empty.\n        2 balls from your hand were needed to clear the board.\n        Example 3:\n        Input: board = \"G\", hand = \"GGGGG\"\n        Output: 2\n        Explanation: To make the board empty:\n        - Insert 'G' so the board becomes GG.\n        - Insert 'G' so the board becomes GGG. GGG -> empty.\n        2 balls from your hand were needed to clear the board.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        # Time: O(N^2), N is the length of board\n        # Space: O(N)\n        # dp[i][j] = min number of balls to clear board[:i] with hand[:j]\n        # dp[i][j] = min(dp[i-1][j], dp[i-1][j-1] + 1) if board[i] == hand[j]\n        # dp[i][j] = min(dp[i-1][j], dp[i][j-1]) if board[i]!= hand[j]\n        # dp[0][0] = 0\n        # dp[0][j] = j if board[0] == hand[j]\n        # dp[i][0] = i if board[i] == hand[0]\n        # dp[0][0] = 0\n        # dp[i][0] = i if board[i]!= hand[0]\n        # dp[0][j] = j if board[0]!= hand[j]\n        # dp[0][0] = 0\n        # dp[0][j] = j if board[0] == hand[j]\n        # dp[i][0] = i if board[i"
    },
    {
        "number": 491,
        "title": "Non-decreasing Subsequences",
        "difficulty": 1,
        "prompt": "class Solution:\n    def findSubsequences(self, nums: List[int]) -> List[List[int]]:\n        \"\"\"\n        Given an integer array nums, return all the different possible non-decreasing subsequences of the given array with at least two elements. You may return the answer in any order.\n        Example 1:\n        Input: nums = [4,6,7,7]\n        Output: [[4,6],[4,6,7],[4,6,7,7],[4,7],[4,7,7],[6,7],[6,7,7],[7,7]]\n        Example 2:\n        Input: nums = [4,4,3,2,1]\n        Output: [[4,4]]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        self.res = []\n        self.helper(nums, [], 0)\n        return self.res"
    },
    {
        "number": 491,
        "title": "Non-decreasing Subsequences",
        "difficulty": 1,
        "prompt": "class Solution:\n    def findSubsequences(self, nums: List[int]) -> List[List[int]]:\n        \"\"\"\n        Given an integer array nums, return all the different possible non-decreasing subsequences of the given array with at least two elements. You may return the answer in any order.\n        Example 1:\n        Input: nums = [4,6,7,7]\n        Output: [[4,6],[4,6,7],[4,6,7,7],[4,7],[4,7,7],[6,7],[6,7,7],[7,7]]\n        Example 2:\n        Input: nums = [4,4,3,2,1]\n        Output: [[4,4]]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        # dfs\n        # dp[i] = dp[i-1] + dp[i-2]\n        # dp[i] = dp[i-1] + dp[i-2] + dp[i-3] + dp[i-4]\n        # dp[i] = dp[i-1] + dp[i-2] + dp[i-3] + dp[i-4] + dp[i-5] + dp[i-6]\n        # dp[i] = dp[i-1] + dp[i-2] + dp[i-3] + dp[i-4] + dp[i-5] + dp[i-6] + dp[i-7]\n        # dp[i] = dp[i-1] + dp[i-2] + dp[i-3] + dp[i-4] + dp[i-5] + dp[i-6] + dp[i-7] + dp[i-8]\n        # dp[i] = dp[i-1] + dp[i-2] + dp[i-3] + dp[i-4]"
    },
    {
        "number": 492,
        "title": "Construct the Rectangle",
        "difficulty": 0,
        "prompt": "class Solution:\n    def constructRectangle(self, area: int) -> List[int]:\n        \"\"\"\n        A web developer needs to know how to design a web page's size. So, given a specific rectangular web page\u2019s area, your job by now is to design a rectangular web page, whose length L and width W satisfy the following requirements:\n            The area of the rectangular web page you designed must equal to the given target area.\n            The width W should not be larger than the length L, which means L >= W.\n            The difference between length L and width W should be as small as possible.\n        Return an array [L, W] where L and W are the length and width of the web page you designed in sequence.\n        Example 1:\n        Input: area = 4\n        Output: [2,2]\n        Explanation: The target area is 4, and all the possible ways to construct it are [1,4], [2,2], [4,1]. \n        But according to requirement 2, [1,4] is illegal; according to requirement 3,  [4,1] is not optimal compared to [2,2]. So the length L is 2, and the width W is 2.\n        Example 2:\n        Input: area = 37\n        Output: [37,1]\n        Example 3:\n        Input: area = 122122\n        Output: [427,286]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        \n        # \u5148\u6392\u5e8f\uff0c\u7136\u540e\u6309\u7167\u957f\u5ea6\u548c\u5bbd\u5ea6\u7684\u5dee\u503c\u8fdb\u884c\u6bd4\u8f83\n        # \u6bd4\u5982area = 4\uff0c\u90a3\u4e48\u6392\u5e8f\u540e\u4e3a[1,2,4]\uff0c\u90a3\u4e48\u6309\u7167\u957f\u5ea6\u548c\u5bbd\u5ea6\u7684\u5dee\u503c\uff0c\u53ef\u4ee5\u5f97\u5230[1,2,2]\uff0c[2,2,1]\uff0c[2,4,1]\uff0c[4,1,1]\n        # \u53ef\u4ee5\u770b\u5230\uff0c[1,2,2]\u548c[2,2,1]\u7684\u5dee\u503c\u4e3a0\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u9009\u62e9[1,2,2]\n        # \u63a5\u4e0b\u6765\u6211\u4eec\u8981\u6c42\u7684\u662f\uff0c[1,2,2]\u7684\u957f\u5ea6\u548c\u5bbd\u5ea6\u7684\u5dee\u503c\u6700\u5c0f\uff0c\u6240\u4ee5\u6211\ufffd"
    },
    {
        "number": 492,
        "title": "Construct the Rectangle",
        "difficulty": 0,
        "prompt": "class Solution:\n    def constructRectangle(self, area: int) -> List[int]:\n        \"\"\"\n        A web developer needs to know how to design a web page's size. So, given a specific rectangular web page\u2019s area, your job by now is to design a rectangular web page, whose length L and width W satisfy the following requirements:\n            The area of the rectangular web page you designed must equal to the given target area.\n            The width W should not be larger than the length L, which means L >= W.\n            The difference between length L and width W should be as small as possible.\n        Return an array [L, W] where L and W are the length and width of the web page you designed in sequence.\n        Example 1:\n        Input: area = 4\n        Output: [2,2]\n        Explanation: The target area is 4, and all the possible ways to construct it are [1,4], [2,2], [4,1]. \n        But according to requirement 2, [1,4] is illegal; according to requirement 3,  [4,1] is not optimal compared to [2,2]. So the length L is 2, and the width W is 2.\n        Example 2:\n        Input: area = 37\n        Output: [37,1]\n        Example 3:\n        Input: area = 122122\n        Output: [427,286]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        \n        # \u601d\u8def\uff1a\n        # 1. \u627e\u51fa\u6700\u5c0f\u7684\u77e9\u5f62\u957f\u5ea6\uff0c\u6bd4\u5982area = 4\uff0c\u90a3\u4e48\u5c31\u662f2\n        # 2. \u627e\u51fa\u6700\u5927\u7684\u77e9\u5f62\u5bbd\u5ea6\uff0c\u6bd4\u5982area = 4\uff0c\u90a3\u4e48\u5c31\u662f2\n        # 3. \u627e\u51fa\u6700\u5c0f\u7684\u77e9\u5f62\u957f\u5ea6\uff0c\u6bd4\u5982area = 37\uff0c\u90a3\u4e48\u5c31\u662f1\n        # 4. \u627e\u51fa\u6700\u5927\u7684\u77e9\u5f62\u5bbd\u5ea6\uff0c\u6bd4\u5982area = 37\uff0c\u90a3\u4e48\u5c31\u662f1\n        # 5. \u627e\u51fa\u6700\u5c0f\u7684\u77e9\u5f62\u957f\u5ea6\uff0c\u6bd4\u5982area = 122122\uff0c\u90a3\u4e48\u5c31\u662f286\n        # 6. \u627e\u51fa\u6700\u5927\u7684\u77e9\u5f62\u5bbd\u5ea6\uff0c\u6bd4\u5982area = 122122\uff0c\u90a3\u4e48\u5c31\u662f286\n        \n"
    },
    {
        "number": 493,
        "title": "Reverse Pairs",
        "difficulty": 2,
        "prompt": "class Solution:\n    def reversePairs(self, nums: List[int]) -> int:\n        \"\"\"\n        Given an integer array nums, return the number of reverse pairs in the array.\n        A reverse pair is a pair (i, j) where:\n            0 <= i < j < nums.length and\n            nums[i] > 2 * nums[j].\n        Example 1:\n        Input: nums = [1,3,2,3,1]\n        Output: 2\n        Explanation: The reverse pairs are:\n        (1, 4) --> nums[1] = 3, nums[4] = 1, 3 > 2 * 1\n        (3, 4) --> nums[3] = 3, nums[4] = 1, 3 > 2 * 1\n        Example 2:\n        Input: nums = [2,4,3,5,1]\n        Output: 3\n        Explanation: The reverse pairs are:\n        (1, 4) --> nums[1] = 4, nums[4] = 1, 4 > 2 * 1\n        (2, 4) --> nums[2] = 3, nums[4] = 1, 3 > 2 * 1\n        (3, 4) --> nums[3] = 5, nums[4] = 1, 5 > 2 * 1\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        # Time: O(n^2), Space: O(n)\n        # count = 0\n        # for i in range(len(nums)):\n        #     for j in range(i + 1, len(nums)):\n        #         if nums[i] > 2 * nums[j]:\n        #             count += 1\n        # return count"
    },
    {
        "number": 493,
        "title": "Reverse Pairs",
        "difficulty": 2,
        "prompt": "class Solution:\n    def reversePairs(self, nums: List[int]) -> int:\n        \"\"\"\n        Given an integer array nums, return the number of reverse pairs in the array.\n        A reverse pair is a pair (i, j) where:\n            0 <= i < j < nums.length and\n            nums[i] > 2 * nums[j].\n        Example 1:\n        Input: nums = [1,3,2,3,1]\n        Output: 2\n        Explanation: The reverse pairs are:\n        (1, 4) --> nums[1] = 3, nums[4] = 1, 3 > 2 * 1\n        (3, 4) --> nums[3] = 3, nums[4] = 1, 3 > 2 * 1\n        Example 2:\n        Input: nums = [2,4,3,5,1]\n        Output: 3\n        Explanation: The reverse pairs are:\n        (1, 4) --> nums[1] = 4, nums[4] = 1, 4 > 2 * 1\n        (2, 4) --> nums[2] = 3, nums[4] = 1, 3 > 2 * 1\n        (3, 4) --> nums[3] = 5, nums[4] = 1, 5 > 2 * 1\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        # Time: O(nlogn)\n        # Space: O(n)\n        # return self.merge_sort(nums)\n        # return self.merge_sort_2(nums)\n        # return self.merge_sort_3(nums)\n        return self.merge_sort_4(nums)"
    },
    {
        "number": 494,
        "title": "Target Sum",
        "difficulty": 1,
        "prompt": "class Solution:\n    def findTargetSumWays(self, nums: List[int], target: int) -> int:\n        \"\"\"\n        You are given an integer array nums and an integer target.\n        You want to build an expression out of nums by adding one of the symbols '+' and '-' before each integer in nums and then concatenate all the integers.\n            For example, if nums = [2, 1], you can add a '+' before 2 and a '-' before 1 and concatenate them to build the expression \"+2-1\".\n        Return the number of different expressions that you can build, which evaluates to target.\n        Example 1:\n        Input: nums = [1,1,1,1,1], target = 3\n        Output: 5\n        Explanation: There are 5 ways to assign symbols to make the sum of nums be target 3.\n        -1 + 1 + 1 + 1 + 1 = 3\n        +1 - 1 + 1 + 1 + 1 = 3\n        +1 + 1 - 1 + 1 + 1 = 3\n        +1 + 1 + 1 - 1 + 1 = 3\n        +1 + 1 + 1 + 1 - 1 = 3\n        Example 2:\n        Input: nums = [1], target = 1\n        Output: 1\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        # dp[i][j] = dp[i-1][j-nums[i]] + dp[i-1][j+nums[i]]\n        # dp[i][j] = dp[i-1][j-nums[i]] + dp[i-1][j+nums[i]]\n        # dp[i][j] = dp[i-1][j-nums[i]] + dp[i-1][j+nums[i]]\n        # dp[i][j] = dp[i-1][j-nums[i]] + dp[i-1][j+nums[i]]\n        # dp[i][j] = dp[i-1][j-nums[i]] + dp[i-1][j+nums[i]]\n        # dp[i][j] = dp[i-1][j-nums[i]] + dp[i-1][j+nums[i]]\n        # dp[i][j] = dp[i-1][j-nums[i]] + dp[i-1][j+nums[i]]\n        # dp[i][j] = dp[i-1][j-n"
    },
    {
        "number": 494,
        "title": "Target Sum",
        "difficulty": 1,
        "prompt": "class Solution:\n    def findTargetSumWays(self, nums: List[int], target: int) -> int:\n        \"\"\"\n        You are given an integer array nums and an integer target.\n        You want to build an expression out of nums by adding one of the symbols '+' and '-' before each integer in nums and then concatenate all the integers.\n            For example, if nums = [2, 1], you can add a '+' before 2 and a '-' before 1 and concatenate them to build the expression \"+2-1\".\n        Return the number of different expressions that you can build, which evaluates to target.\n        Example 1:\n        Input: nums = [1,1,1,1,1], target = 3\n        Output: 5\n        Explanation: There are 5 ways to assign symbols to make the sum of nums be target 3.\n        -1 + 1 + 1 + 1 + 1 = 3\n        +1 - 1 + 1 + 1 + 1 = 3\n        +1 + 1 - 1 + 1 + 1 = 3\n        +1 + 1 + 1 - 1 + 1 = 3\n        +1 + 1 + 1 + 1 - 1 = 3\n        Example 2:\n        Input: nums = [1], target = 1\n        Output: 1\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        # dp[i][j] = dp[i-1][j-nums[i]] + dp[i-1][j+nums[i]]\n        # dp[i][j] = dp[i-1][j-nums[i]] + dp[i-1][j+nums[i]]\n        # dp[i][j] = dp[i-1][j-nums[i]] + dp[i-1][j+nums[i]]\n        # dp[i][j] = dp[i-1][j-nums[i]] + dp[i-1][j+nums[i]]\n        # dp[i][j] = dp[i-1][j-nums[i]] + dp[i-1][j+nums[i]]\n        # dp[i][j] = dp[i-1][j-nums[i]] + dp[i-1][j+nums[i]]\n        # dp[i][j] = dp[i-1][j-nums[i]] + dp[i-1][j+nums[i]]\n        # dp[i][j] = dp[i-1][j-n"
    },
    {
        "number": 495,
        "title": "Teemo Attacking",
        "difficulty": 0,
        "prompt": "class Solution:\n    def findPoisonedDuration(self, timeSeries: List[int], duration: int) -> int:\n        \"\"\"\n        Our hero Teemo is attacking an enemy Ashe with poison attacks! When Teemo attacks Ashe, Ashe gets poisoned for a exactly duration seconds. More formally, an attack at second t will mean Ashe is poisoned during the inclusive time interval [t, t + duration - 1]. If Teemo attacks again before the poison effect ends, the timer for it is reset, and the poison effect will end duration seconds after the new attack.\n        You are given a non-decreasing integer array timeSeries, where timeSeries[i] denotes that Teemo attacks Ashe at second timeSeries[i], and an integer duration.\n        Return the total number of seconds that Ashe is poisoned.\n        Example 1:\n        Input: timeSeries = [1,4], duration = 2\n        Output: 4\n        Explanation: Teemo's attacks on Ashe go as follows:\n        - At second 1, Teemo attacks, and Ashe is poisoned for seconds 1 and 2.\n        - At second 4, Teemo attacks, and Ashe is poisoned for seconds 4 and 5.\n        Ashe is poisoned for seconds 1, 2, 4, and 5, which is 4 seconds in total.\n        Example 2:\n        Input: timeSeries = [1,2], duration = 2\n        Output: 3\n        Explanation: Teemo's attacks on Ashe go as follows:\n        - At second 1, Teemo attacks, and Ashe is poisoned for seconds 1 and 2.\n        - At second 2 however, Teemo attacks again and resets the poison timer. Ashe is poisoned for seconds 2 and 3.\n        Ashe is poisoned for seconds 1, 2, and 3, which is 3 seconds in total.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        # Time  complexity: O(n)\n        # Space complexity: O(1)\n        # res = 0\n        # for i in range(len(timeSeries) - 1):\n        #     res += min(timeSeries[i + 1] - timeSeries[i], duration)\n        # return res + duration"
    },
    {
        "number": 495,
        "title": "Teemo Attacking",
        "difficulty": 0,
        "prompt": "class Solution:\n    def findPoisonedDuration(self, timeSeries: List[int], duration: int) -> int:\n        \"\"\"\n        Our hero Teemo is attacking an enemy Ashe with poison attacks! When Teemo attacks Ashe, Ashe gets poisoned for a exactly duration seconds. More formally, an attack at second t will mean Ashe is poisoned during the inclusive time interval [t, t + duration - 1]. If Teemo attacks again before the poison effect ends, the timer for it is reset, and the poison effect will end duration seconds after the new attack.\n        You are given a non-decreasing integer array timeSeries, where timeSeries[i] denotes that Teemo attacks Ashe at second timeSeries[i], and an integer duration.\n        Return the total number of seconds that Ashe is poisoned.\n        Example 1:\n        Input: timeSeries = [1,4], duration = 2\n        Output: 4\n        Explanation: Teemo's attacks on Ashe go as follows:\n        - At second 1, Teemo attacks, and Ashe is poisoned for seconds 1 and 2.\n        - At second 4, Teemo attacks, and Ashe is poisoned for seconds 4 and 5.\n        Ashe is poisoned for seconds 1, 2, 4, and 5, which is 4 seconds in total.\n        Example 2:\n        Input: timeSeries = [1,2], duration = 2\n        Output: 3\n        Explanation: Teemo's attacks on Ashe go as follows:\n        - At second 1, Teemo attacks, and Ashe is poisoned for seconds 1 and 2.\n        - At second 2 however, Teemo attacks again and resets the poison timer. Ashe is poisoned for seconds 2 and 3.\n        Ashe is poisoned for seconds 1, 2, and 3, which is 3 seconds in total.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        # Time: O(n)\n        # Space: O(1)\n        if not timeSeries:\n            return 0\n        \n        total_duration = 0\n        for i in range(len(timeSeries) - 1):\n            total_duration += min(timeSeries[i + 1] - timeSeries[i], duration)\n        \n        return total_duration + duration\n    \n    \n    def findPoisonedDuration2(self, timeSeries: List[int], duration: int) -> int:\n        \"\"\"\n        Our hero Teemo is attacking an enemy Ashe with poison attacks! When Teemo attacks Ashe, Ashe gets poisoned for a exactly duration seconds. More formally, an attack at second t will mean Ashe is poisoned during the inclusive time interval [t, t + duration - 1]. If Teemo attacks again before the poison effect ends, the timer for it is reset, and the poison effect will end duration seconds after the new attack.\n        You are given a non-decreasing integer array timeSeries, where timeSeries[i] denotes that Teemo attacks Ashe at second timeSeries[i], and an integer duration.\n        Return the total number of seconds that Ashe is poisoned.\n        Example 1:\n        Input: timeSeries = [1,4], duration = 2\n        Output: 4\n        Explanation: Teemo's attacks on Ashe go as follows:"
    },
    {
        "number": 496,
        "title": "Next Greater Element I",
        "difficulty": 0,
        "prompt": "class Solution:\n    def nextGreaterElement(self, nums1: List[int], nums2: List[int]) -> List[int]:\n        \"\"\"\n        The next greater element of some element x in an array is the first greater element that is to the right of x in the same array.\n        You are given two distinct 0-indexed integer arrays nums1 and nums2, where nums1 is a subset of nums2.\n        For each 0 <= i < nums1.length, find the index j such that nums1[i] == nums2[j] and determine the next greater element of nums2[j] in nums2. If there is no next greater element, then the answer for this query is -1.\n        Return an array ans of length nums1.length such that ans[i] is the next greater element as described above.\n        Example 1:\n        Input: nums1 = [4,1,2], nums2 = [1,3,4,2]\n        Output: [-1,3,-1]\n        Explanation: The next greater element for each value of nums1 is as follows:\n        - 4 is underlined in nums2 = [1,3,4,2]. There is no next greater element, so the answer is -1.\n        - 1 is underlined in nums2 = [1,3,4,2]. The next greater element is 3.\n        - 2 is underlined in nums2 = [1,3,4,2]. There is no next greater element, so the answer is -1.\n        Example 2:\n        Input: nums1 = [2,4], nums2 = [1,2,3,4]\n        Output: [3,-1]\n        Explanation: The next greater element for each value of nums1 is as follows:\n        - 2 is underlined in nums2 = [1,2,3,4]. The next greater element is 3.\n        - 4 is underlined in nums2 = [1,2,3,4]. There is no next greater element, so the answer is -1.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        # Time complexity: O(n)\n        # Space complexity: O(n)\n        # stack = []\n        # result = []\n        # for num in nums2:\n        #     while stack and num > stack[-1]:\n        #         stack.pop()\n        #     if not stack:\n        #         result.append(-1)\n        #     else:\n        #         result.append(stack[-1])\n        #     stack.append(num)\n        # return result"
    },
    {
        "number": 496,
        "title": "Next Greater Element I",
        "difficulty": 0,
        "prompt": "class Solution:\n    def nextGreaterElement(self, nums1: List[int], nums2: List[int]) -> List[int]:\n        \"\"\"\n        The next greater element of some element x in an array is the first greater element that is to the right of x in the same array.\n        You are given two distinct 0-indexed integer arrays nums1 and nums2, where nums1 is a subset of nums2.\n        For each 0 <= i < nums1.length, find the index j such that nums1[i] == nums2[j] and determine the next greater element of nums2[j] in nums2. If there is no next greater element, then the answer for this query is -1.\n        Return an array ans of length nums1.length such that ans[i] is the next greater element as described above.\n        Example 1:\n        Input: nums1 = [4,1,2], nums2 = [1,3,4,2]\n        Output: [-1,3,-1]\n        Explanation: The next greater element for each value of nums1 is as follows:\n        - 4 is underlined in nums2 = [1,3,4,2]. There is no next greater element, so the answer is -1.\n        - 1 is underlined in nums2 = [1,3,4,2]. The next greater element is 3.\n        - 2 is underlined in nums2 = [1,3,4,2]. There is no next greater element, so the answer is -1.\n        Example 2:\n        Input: nums1 = [2,4], nums2 = [1,2,3,4]\n        Output: [3,-1]\n        Explanation: The next greater element for each value of nums1 is as follows:\n        - 2 is underlined in nums2 = [1,2,3,4]. The next greater element is 3.\n        - 4 is underlined in nums2 = [1,2,3,4]. There is no next greater element, so the answer is -1.\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        stack = []\n        res = []\n        for i in range(len(nums2)):\n            while stack and nums2[stack[-1]] < nums2[i]:\n                res[stack.pop()] = nums2[i]\n            stack.append(i)\n        return res"
    },
    {
        "number": 497,
        "title": "Random Point in Non-overlapping Rectangles",
        "difficulty": 1,
        "prompt": "class Solution:\n    def __init__(self, rects: List[List[int]]):\n    def pick(self) -> List[int]:\n        \"\"\"\n        You are given an array of non-overlapping axis-aligned rectangles rects where rects[i] = [ai, bi, xi, yi] indicates that (ai, bi) is the bottom-left corner point of the ith rectangle and (xi, yi) is the top-right corner point of the ith rectangle. Design an algorithm to pick a random integer point inside the space covered by one of the given rectangles. A point on the perimeter of a rectangle is included in the space covered by the rectangle.\n        Any integer point inside the space covered by one of the given rectangles should be equally likely to be returned.\n        Note that an integer point is a point that has integer coordinates.\n        Implement the Solution class:\n            Solution(int[][] rects) Initializes the object with the given rectangles rects.\n            int[] pick() Returns a random integer point [u, v] inside the space covered by one of the given rectangles.\n        Example 1:\n        Input\n        [\"Solution\", \"pick\", \"pick\", \"pick\", \"pick\", \"pick\"]\n        [[[[-2, -2, 1, 1], [2, 2, 4, 6]]], [], [], [], [], []]\n        Output\n        [null, [1, -2], [1, -1], [-1, -2], [-2, -2], [0, 0]]\n        Explanation\n        Solution solution = new Solution([[-2, -2, 1, 1], [2, 2, 4, 6]]);\n        solution.pick(); // return [1, -2]\n        solution.pick(); // return [1, -1]\n        solution.pick(); // return [-1, -2]\n        solution.pick(); // return [-2, -2]\n        solution.pick(); // return [0, 0]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        import random\n        def get_rect(rects):\n            rect = rects[random.randint(0, len(rects)-1)]\n            return rect\n        def get_point(rect):\n            x = random.randint(rect[0], rect[0]+rect[2])\n            y = random.randint(rect[1], rect[1]+rect[3])\n            return [x, y]\n        def get_point_in_rect(rect):\n            x = random.randint(rect[0], rect[0]+rect[2])\n            y = random.randint(rect[1], rect[1]+rect[3])\n            return [x, y]\n        def get_point_in_rect_2(rect):\n            x = random.randint(rect[0], rect[0]+rect[2])\n            y = random.randint(rect[1], rect[1]+rect[3])\n            return [x, y]\n        def get_point_in_rect_3(rect):\n            x = random.randint(rect[0], rect[0]+rect[2])\n            y = random.randint(rect[1], rect[1]+rect[3])\n            return [x, y]\n        def get_point_in_rect"
    },
    {
        "number": 497,
        "title": "Random Point in Non-overlapping Rectangles",
        "difficulty": 1,
        "prompt": "class Solution:\n    def __init__(self, rects: List[List[int]]):\n    def pick(self) -> List[int]:\n        \"\"\"\n        You are given an array of non-overlapping axis-aligned rectangles rects where rects[i] = [ai, bi, xi, yi] indicates that (ai, bi) is the bottom-left corner point of the ith rectangle and (xi, yi) is the top-right corner point of the ith rectangle. Design an algorithm to pick a random integer point inside the space covered by one of the given rectangles. A point on the perimeter of a rectangle is included in the space covered by the rectangle.\n        Any integer point inside the space covered by one of the given rectangles should be equally likely to be returned.\n        Note that an integer point is a point that has integer coordinates.\n        Implement the Solution class:\n            Solution(int[][] rects) Initializes the object with the given rectangles rects.\n            int[] pick() Returns a random integer point [u, v] inside the space covered by one of the given rectangles.\n        Example 1:\n        Input\n        [\"Solution\", \"pick\", \"pick\", \"pick\", \"pick\", \"pick\"]\n        [[[[-2, -2, 1, 1], [2, 2, 4, 6]]], [], [], [], [], []]\n        Output\n        [null, [1, -2], [1, -1], [-1, -2], [-2, -2], [0, 0]]\n        Explanation\n        Solution solution = new Solution([[-2, -2, 1, 1], [2, 2, 4, 6]]);\n        solution.pick(); // return [1, -2]\n        solution.pick(); // return [1, -1]\n        solution.pick(); // return [-1, -2]\n        solution.pick(); // return [-2, -2]\n        solution.pick(); // return [0, 0]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        import random\n        def get_rect_area(rect):\n            return (rect[2] - rect[0] + 1) * (rect[3] - rect[1] + 1)"
    },
    {
        "number": 498,
        "title": "Diagonal Traverse",
        "difficulty": 1,
        "prompt": "class Solution:\n    def findDiagonalOrder(self, mat: List[List[int]]) -> List[int]:\n        \"\"\"\n        Given an m x n matrix mat, return an array of all the elements of the array in a diagonal order.\n        Example 1:\n        Input: mat = [[1,2,3],[4,5,6],[7,8,9]]\n        Output: [1,2,4,7,5,3,6,8,9]\n        Example 2:\n        Input: mat = [[1,2],[3,4]]\n        Output: [1,2,3,4]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        if not mat:\n            return []\n        m, n = len(mat), len(mat[0])\n        res = []\n        for d in range(m + n - 1):\n            i, j = 0, d\n            if d < m:\n                i = d\n            elif d >= m:\n                j = m - 1\n            while i < m and j >= 0:\n                res.append(mat[i][j])\n                i += 1\n                j -= 1\n        return res"
    },
    {
        "number": 498,
        "title": "Diagonal Traverse",
        "difficulty": 1,
        "prompt": "class Solution:\n    def findDiagonalOrder(self, mat: List[List[int]]) -> List[int]:\n        \"\"\"\n        Given an m x n matrix mat, return an array of all the elements of the array in a diagonal order.\n        Example 1:\n        Input: mat = [[1,2,3],[4,5,6],[7,8,9]]\n        Output: [1,2,4,7,5,3,6,8,9]\n        Example 2:\n        Input: mat = [[1,2],[3,4]]\n        Output: [1,2,3,4]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        if not mat:\n            return []\n        m, n = len(mat), len(mat[0])\n        res = []\n        for d in range(m + n - 1):\n            i, j = 0, d\n            if d < n:\n                i = 0\n            elif d >= m:\n                j = m - 1\n            while i < m and j >= 0:\n                res.append(mat[i][j])\n                i += 1\n                j -= 1\n        return res\n<|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>"
    },
    {
        "number": 500,
        "title": "Keyboard Row",
        "difficulty": 0,
        "prompt": "class Solution:\n    def findWords(self, words: List[str]) -> List[str]:\n        \"\"\"\n        Given an array of strings words, return the words that can be typed using letters of the alphabet on only one row of American keyboard like the image below.\n        In the American keyboard:\n            the first row consists of the characters \"qwertyuiop\",\n            the second row consists of the characters \"asdfghjkl\", and\n            the third row consists of the characters \"zxcvbnm\".\n        Example 1:\n        Input: words = [\"Hello\",\"Alaska\",\"Dad\",\"Peace\"]\n        Output: [\"Alaska\",\"Dad\"]\n        Example 2:\n        Input: words = [\"omk\"]\n        Output: []\n        Example 3:\n        Input: words = [\"adsdf\",\"sfd\"]\n        Output: [\"adsdf\",\"sfd\"]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        # 1. use hashmap to store the frequency of each character in the words\n        # 2. use a set to store the unique characters in the words\n        # 3. use a set to store the unique characters in the words in the first row\n        # 4. use a set to store the unique characters in the words in the second row\n        # 5. use a set to store the unique characters in the words in the third row\n        # 6. use a set to store the unique characters in the words in the first row and the second row\n        # 7. use a set to store the unique characters in the words in the first row and the third row\n        # 8. use a set to store the unique characters in the words in the second row and the third row\n        # 9. use a set to store the unique characters in the words in the first row, the second row and the third row\n        # 10. use a set to store the unique characters in the words in the first row, the second row and the third row and the fourth row\n        # 11. use a set to store the unique characters in the words in the first row, the second row and the third row and the fourth row and the fifth row\n        # 12. use a set to store the unique characters in the words in the first row, the second row and the third row and the fourth row and the fifth row and the sixth"
    },
    {
        "number": 500,
        "title": "Keyboard Row",
        "difficulty": 0,
        "prompt": "class Solution:\n    def findWords(self, words: List[str]) -> List[str]:\n        \"\"\"\n        Given an array of strings words, return the words that can be typed using letters of the alphabet on only one row of American keyboard like the image below.\n        In the American keyboard:\n            the first row consists of the characters \"qwertyuiop\",\n            the second row consists of the characters \"asdfghjkl\", and\n            the third row consists of the characters \"zxcvbnm\".\n        Example 1:\n        Input: words = [\"Hello\",\"Alaska\",\"Dad\",\"Peace\"]\n        Output: [\"Alaska\",\"Dad\"]\n        Example 2:\n        Input: words = [\"omk\"]\n        Output: []\n        Example 3:\n        Input: words = [\"adsdf\",\"sfd\"]\n        Output: [\"adsdf\",\"sfd\"]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        # 1. use hashmap to store the frequency of each character\n        # 2. use a variable to store the row number\n        # 3. use a variable to store the column number\n        # 4. use a variable to store the result\n        # 5. iterate the words\n        # 6. if the character is in the hashmap, then check the row and column number\n        # 7. if the character is not in the hashmap, then check the row number\n        # 8. if the character is not in the hashmap, then check the column number\n        # 9. if the character is not in the hashmap, then check the row and column number\n        # 10. if the character is not in the hashmap, then check the row and column number\n        # 11. if the character is not in the hashmap, then check the row and column number\n        # 12. if the character is not in the hashmap, then check the row and column number\n        # 13. if the character is not in the hashmap, then check the row and column number\n        # 14. if the character is not in the hashmap, then check the row and column number\n        # 15. if the character is not in the hashmap, then check the row and column number\n        # 16. if the character is not in the hashmap, then check the row and column number\n        "
    },
    {
        "number": 501,
        "title": "Find Mode in Binary Search Tree",
        "difficulty": 0,
        "prompt": "class Solution:\n    def findMode(self, root: Optional[TreeNode]) -> List[int]:\n        \"\"\"\n        Given the root of a binary search tree (BST) with duplicates, return all the mode(s) (i.e., the most frequently occurred element) in it.\n        If the tree has more than one mode, return them in any order.\n        Assume a BST is defined as follows:\n            The left subtree of a node contains only nodes with keys less than or equal to the node's key.\n            The right subtree of a node contains only nodes with keys greater than or equal to the node's key.\n            Both the left and right subtrees must also be binary search trees.\n        Example 1:\n        Input: root = [1,null,2,2]\n        Output: [2]\n        Example 2:\n        Input: root = [0]\n        Output: [0]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 1,
        "answer": "        \n        def inorder(root):\n            if not root:\n                return []\n            return inorder(root.left) + [root.val] + inorder(root.right)\n        \n        return [max(set(inorder(root)), key=inorder(root).count)]\n<|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>"
    },
    {
        "number": 501,
        "title": "Find Mode in Binary Search Tree",
        "difficulty": 0,
        "prompt": "class Solution:\n    def findMode(self, root: Optional[TreeNode]) -> List[int]:\n        \"\"\"\n        Given the root of a binary search tree (BST) with duplicates, return all the mode(s) (i.e., the most frequently occurred element) in it.\n        If the tree has more than one mode, return them in any order.\n        Assume a BST is defined as follows:\n            The left subtree of a node contains only nodes with keys less than or equal to the node's key.\n            The right subtree of a node contains only nodes with keys greater than or equal to the node's key.\n            Both the left and right subtrees must also be binary search trees.\n        Example 1:\n        Input: root = [1,null,2,2]\n        Output: [2]\n        Example 2:\n        Input: root = [0]\n        Output: [0]\n        \"\"\"\n",
        "checkpoint": "16B",
        "pass": 2,
        "answer": "        if not root:\n            return []\n        self.max_freq = 0\n        self.mode = []\n        self.helper(root)\n        return self.mode"
    }
]