[
    {
        "number": 1,
        "title": "Two Sum",
        "difficulty": 0,
        "pass": 0,
        "answer": "        if len(nums) < 2:\n            return []\n        for i in range(len(nums)):\n            for j in range(i+1, len(nums)):\n                if nums[i] + nums[j] == target:\n                    return [i, j]\n        return []"
    },
    {
        "number": 1,
        "title": "Two Sum",
        "difficulty": 0,
        "pass": 1,
        "answer": "        if len(nums) < 2:\n            return []\n        hash_map = {}\n        for i in range(len(nums)):\n            if nums[i] in hash_map:\n                return [hash_map[nums[i]], i]\n            else:\n                hash_map[target - nums[i]] = i"
    },
    {
        "number": 1,
        "title": "Two Sum",
        "difficulty": 0,
        "pass": 2,
        "answer": "        \n        for i in range(len(nums)):\n            for j in range(i+1, len(nums)):\n                if nums[i] + nums[j] == target:\n                    return [i, j]\n        \n        return None"
    },
    {
        "number": 1,
        "title": "Two Sum",
        "difficulty": 0,
        "pass": 3,
        "answer": "        d = {}\n        for i in range(len(nums)):\n            if (target - nums[i]) in d:\n                return [d[target - nums[i]], i]\n            else:\n                d[nums[i]] = i\n        return []"
    },
    {
        "number": 1,
        "title": "Two Sum",
        "difficulty": 0,
        "pass": 4,
        "answer": "        if len(nums) < 2:\n            return []\n        for i in range(len(nums)):\n            for j in range(i+1, len(nums)):\n                if nums[i] + nums[j] == target:\n                    return [i, j]"
    },
    {
        "number": 1,
        "title": "Two Sum",
        "difficulty": 0,
        "pass": 5,
        "answer": "        d = {}\n        for i in range(len(nums)):\n            if target - nums[i] in d:\n                return [d[target - nums[i]], i]\n            else:\n                d[nums[i]] = i"
    },
    {
        "number": 1,
        "title": "Two Sum",
        "difficulty": 0,
        "pass": 6,
        "answer": "        for i in range(len(nums)):\n            for j in range(i + 1, len(nums)):\n                if nums[i] + nums[j] == target:\n                    return [i, j]"
    },
    {
        "number": 1,
        "title": "Two Sum",
        "difficulty": 0,
        "pass": 7,
        "answer": "        hashmap = {}\n        for i in range(len(nums)):\n            if target - nums[i] in hashmap:\n                return [hashmap[target - nums[i]], i]\n            else:\n                hashmap[nums[i]] = i"
    },
    {
        "number": 1,
        "title": "Two Sum",
        "difficulty": 0,
        "pass": 8,
        "answer": "        nums_dict = {}\n        for i in range(len(nums)):\n            if nums[i] in nums_dict:\n                return [nums_dict[nums[i]], i]\n            else:\n                nums_dict[target - nums[i]] = i"
    },
    {
        "number": 1,
        "title": "Two Sum",
        "difficulty": 0,
        "pass": 9,
        "answer": "        d = {}\n        for i in range(len(nums)):\n            if target - nums[i] in d:\n                return [d[target - nums[i]], i]\n            else:\n                d[nums[i]] = i"
    },
    {
        "number": 2,
        "title": "Add Two Numbers",
        "difficulty": 1,
        "pass": 0,
        "answer": "        \n        def add(l1, l2):\n            if not l1 and not l2:\n                return None\n            if not l1:\n                return l2\n            if not l2:\n                return l1\n            if l1.val + l2.val < 10:\n                l1.val += l2.val\n                l1.next = add(l1.next, l2.next)\n            else:\n                l1.val = l1.val + l2.val - 10\n                l1.next = add(l1.next, l2.next)\n            return l1\n        \n        return add(l1, l2)"
    },
    {
        "number": 2,
        "title": "Add Two Numbers",
        "difficulty": 1,
        "pass": 1,
        "answer": "        dummy = cur = ListNode(0)\n        carry = 0\n        while l1 or l2 or carry:\n            if l1:\n                carry += l1.val\n                l1 = l1.next\n            if l2:\n                carry += l2.val\n                l2 = l2.next\n            cur.next = ListNode(carry % 10)\n            cur = cur.next\n            carry //= 10\n        return dummy.next"
    },
    {
        "number": 2,
        "title": "Add Two Numbers",
        "difficulty": 1,
        "pass": 2,
        "answer": "        if not l1:\n            return l2\n        if not l2:\n            return l1\n        dummy = ListNode(0)\n        cur = dummy\n        carry = 0\n        while l1 or l2 or carry:\n            if l1:\n                carry += l1.val\n                l1 = l1.next\n            if l2:\n                carry += l2.val\n                l2 = l2.next\n            cur.next = ListNode(carry % 10)\n            cur = cur.next\n            carry //= 10\n        return dummy.next"
    },
    {
        "number": 2,
        "title": "Add Two Numbers",
        "difficulty": 1,
        "pass": 3,
        "answer": "        if not l1:\n            return l2\n        if not l2:\n            return l1\n        \n        dummy = ListNode(0)\n        curr = dummy\n        carry = 0\n        while l1 or l2 or carry:\n            if l1:\n                carry += l1.val\n                l1 = l1.next\n            if l2:\n                carry += l2.val\n                l2 = l2.next\n            curr.next = ListNode(carry % 10)\n            curr = curr.next\n            carry //= 10\n        return dummy.next"
    },
    {
        "number": 2,
        "title": "Add Two Numbers",
        "difficulty": 1,
        "pass": 4,
        "answer": "        if not l1:\n            return l2\n        if not l2:\n            return l1\n        if l1.val + l2.val < 10:\n            l1.val += l2.val\n            l1.next = self.addTwoNumbers(l1.next, l2.next)\n        else:\n            l1.val = l1.val + l2.val - 10\n            l1.next = self.addTwoNumbers(l1.next, l2.next)\n        return l1"
    },
    {
        "number": 2,
        "title": "Add Two Numbers",
        "difficulty": 1,
        "pass": 5,
        "answer": "        dummy = cur = ListNode(0)\n        carry = 0\n        while l1 or l2 or carry:\n            if l1:\n                carry += l1.val\n                l1 = l1.next\n            if l2:\n                carry += l2.val\n                l2 = l2.next\n            cur.next = ListNode(carry % 10)\n            cur = cur.next\n            carry //= 10\n        return dummy.next"
    },
    {
        "number": 2,
        "title": "Add Two Numbers",
        "difficulty": 1,
        "pass": 6,
        "answer": "        if not l1:\n            return l2\n        if not l2:\n            return l1\n        if l1.val + l2.val < 10:\n            l1.next = ListNode(l1.val + l2.val)\n            l1 = l1.next\n        else:\n            l1.next = ListNode(l1.val + l2.val - 10)\n            l1 = l1.next\n            l1.val = l1.val + 1\n        return self.addTwoNumbers(l1, l2)"
    },
    {
        "number": 2,
        "title": "Add Two Numbers",
        "difficulty": 1,
        "pass": 7,
        "answer": "        dummy = ListNode(0)\n        curr = dummy\n        carry = 0\n        while l1 or l2 or carry:\n            if l1:\n                carry += l1.val\n                l1 = l1.next\n            if l2:\n                carry += l2.val\n                l2 = l2.next\n            curr.next = ListNode(carry % 10)\n            curr = curr.next\n            carry //= 10\n        return dummy.next"
    },
    {
        "number": 2,
        "title": "Add Two Numbers",
        "difficulty": 1,
        "pass": 8,
        "answer": "        if not l1:\n            return l2\n        if not l2:\n            return l1\n        \n        dummy = ListNode(0)\n        cur = dummy\n        \n        carry = 0\n        while l1 or l2 or carry:\n            if l1:\n                carry += l1.val\n                l1 = l1.next\n            if l2:\n                carry += l2.val\n                l2 = l2.next\n            cur.next = ListNode(carry % 10)\n            cur = cur.next\n            carry //= 10\n        return dummy.next"
    },
    {
        "number": 2,
        "title": "Add Two Numbers",
        "difficulty": 1,
        "pass": 9,
        "answer": "        # Definition for singly-linked list.\n        # class ListNode:\n        #     def __init__(self, val=0, next=None):\n        #         self.val = val\n        #         self.next = next\n        # Definition for singly-linked list.\n        # class ListNode:\n        #     def __init__(self, val=0, next=None):\n        #         self.val = val\n        #         self.next = next\n        # Definition for singly-linked list.\n        # class ListNode:\n        #     def __init__(self, val=0, next=None):\n        #         self.val = val\n        #         self.next = next\n        # Definition for singly-linked list.\n        # class ListNode:\n        #     def __init__(self, val=0, next=None):\n        #         self.val = val\n        #         self.next = next\n        # Definition for singly-linked list.\n        # class ListNode:\n        #     def __init__(self, val="
    },
    {
        "number": 3,
        "title": "Longest Substring Without Repeating Characters",
        "difficulty": 1,
        "pass": 0,
        "answer": "        if len(s) == 0:\n            return 0\n        if len(s) == 1:\n            return 1\n        if len(s) == 2:\n            if s[0] == s[1]:\n                return 2\n            else:\n                return 1\n        if len(s) == 3:\n            if s[0] == s[1] and s[1] == s[2]:\n                return 3\n            elif s[0] == s[1] and s[1]!= s[2]:\n                return 2\n            elif s[0]!= s[1] and s[1] == s[2]:\n                return 2\n            elif s[0]!= s[1] and s[1]!= s[2]:\n                return 2\n            else:\n                return 1\n        if len(s) == 4:\n            if s[0] == s[1] and s[1] == s[2] and s[2] == s[3]:\n                return 4\n            elif s[0] == s[1] and s[1]"
    },
    {
        "number": 3,
        "title": "Longest Substring Without Repeating Characters",
        "difficulty": 1,
        "pass": 1,
        "answer": "        if len(s) == 0:\n            return 0\n        if len(s) == 1:\n            return 1\n        if len(s) == 2:\n            if s[0] == s[1]:\n                return 2\n            else:\n                return 1\n        d = {}\n        start = 0\n        end = 0\n        max_len = 0\n        while end < len(s):\n            if s[end] in d:\n                start = max(start, d[s[end]] + 1)\n            d[s[end]] = end\n            max_len = max(max_len, end - start + 1)\n            end += 1\n        return max_len"
    },
    {
        "number": 3,
        "title": "Longest Substring Without Repeating Characters",
        "difficulty": 1,
        "pass": 2,
        "answer": "        if len(s) == 0:\n            return 0\n        if len(s) == 1:\n            return 1\n        if len(s) == 2:\n            if s[0] == s[1]:\n                return 2\n            else:\n                return 1"
    },
    {
        "number": 3,
        "title": "Longest Substring Without Repeating Characters",
        "difficulty": 1,
        "pass": 3,
        "answer": "        n = len(s)\n        if n == 0:\n            return 0\n        if n == 1:\n            return 1\n        if n == 2:\n            if s[0] == s[1]:\n                return 2\n            else:\n                return 1\n        if n == 3:\n            if s[0] == s[1] and s[1] == s[2]:\n                return 3\n            elif s[0] == s[1] and s[1]!= s[2]:\n                return 2\n            elif s[0]!= s[1] and s[1] == s[2]:\n                return 2\n            else:\n                return 1\n        if n == 4:\n            if s[0] == s[1] and s[1] == s[2] and s[2] == s[3]:\n                return 4\n            elif s[0] == s[1] and s[1]!= s[2] and s[2] == s[3]:\n                return 3\n            elif s[0]!= s[1] and s"
    },
    {
        "number": 3,
        "title": "Longest Substring Without Repeating Characters",
        "difficulty": 1,
        "pass": 4,
        "answer": "        if len(s) == 0:\n            return 0\n        if len(s) == 1:\n            return 1\n        start = 0\n        end = 0\n        max_length = 0\n        hash_set = set()\n        while end < len(s):\n            if s[end] not in hash_set:\n                hash_set.add(s[end])\n                end += 1\n                max_length = max(max_length, end - start)\n            else:\n                hash_set.remove(s[start])\n                start += 1\n        return max_length"
    },
    {
        "number": 3,
        "title": "Longest Substring Without Repeating Characters",
        "difficulty": 1,
        "pass": 5,
        "answer": "        if len(s) == 0:\n            return 0\n        if len(s) == 1:\n            return 1\n        if len(s) == 2:\n            if s[0] == s[1]:\n                return 2\n            else:\n                return 1\n        if len(s) == 3:\n            if s[0] == s[1] and s[1] == s[2]:\n                return 3\n            elif s[0] == s[1] and s[1]!= s[2]:\n                return 2\n            elif s[0]!= s[1] and s[1] == s[2]:\n                return 2\n            else:\n                return 1\n        if len(s) == 4:\n            if s[0] == s[1] and s[1] == s[2] and s[2] == s[3]:\n                return 4\n            elif s[0] == s[1] and s[1]!= s[2] and s[2] == s[3]:\n                return 3\n            elif s[0]"
    },
    {
        "number": 3,
        "title": "Longest Substring Without Repeating Characters",
        "difficulty": 1,
        "pass": 6,
        "answer": "        if len(s) == 0:\n            return 0\n        if len(s) == 1:\n            return 1\n        d = {}\n        start = 0\n        max_len = 0\n        for i in range(len(s)):\n            if s[i] in d:\n                start = max(start, d[s[i]] + 1)\n            d[s[i]] = i\n            max_len = max(max_len, i - start + 1)\n        return max_len"
    },
    {
        "number": 3,
        "title": "Longest Substring Without Repeating Characters",
        "difficulty": 1,
        "pass": 7,
        "answer": "        if len(s) == 0:\n            return 0\n        if len(s) == 1:\n            return 1\n        hash_map = {}\n        start = 0\n        end = 0\n        max_len = 0\n        while end < len(s):\n            if s[end] in hash_map:\n                start = max(start, hash_map[s[end]] + 1)\n            hash_map[s[end]] = end\n            max_len = max(max_len, end - start + 1)\n            end += 1\n        return max_len"
    },
    {
        "number": 3,
        "title": "Longest Substring Without Repeating Characters",
        "difficulty": 1,
        "pass": 8,
        "answer": "        if len(s) == 0:\n            return 0\n        if len(s) == 1:\n            return 1\n        if len(s) == 2:\n            if s[0] == s[1]:\n                return 2\n            else:\n                return 1\n        if len(s) == 3:\n            if s[0] == s[1] and s[1] == s[2]:\n                return 3\n            elif s[0] == s[1] and s[1]!= s[2]:\n                return 2\n            elif s[0]!= s[1] and s[1] == s[2]:\n                return 2\n            else:\n                return 1\n        if len(s) == 4:\n            if s[0] == s[1] and s[1] == s[2] and s[2] == s[3]:\n                return 4\n            elif s[0] == s[1] and s[1]!= s[2] and s[2] == s[3]:\n                return 3\n            elif s[0]"
    },
    {
        "number": 3,
        "title": "Longest Substring Without Repeating Characters",
        "difficulty": 1,
        "pass": 9,
        "answer": "        if len(s) == 0:\n            return 0\n        if len(s) == 1:\n            return 1\n        if len(s) == 2:\n            if s[0]!= s[1]:\n                return 2\n            else:\n                return 1\n        if len(s) == 3:\n            if s[0]!= s[1] or s[1]!= s[2]:\n                return 3\n            else:\n                return 2\n        if len(s) == 4:\n            if s[0]!= s[1] or s[1]!= s[2] or s[2]!= s[3]:\n                return 4\n            else:\n                return 3\n        if len(s) == 5:\n            if s[0]!= s[1] or s[1]!= s[2] or s[2]!= s[3] or s[3]!= s[4]:\n                return 5\n            else:\n                return 4\n        if len(s) == 6:\n            if s[0]!= s[1] or s[1]"
    },
    {
        "number": 4,
        "title": "Median of Two Sorted Arrays",
        "difficulty": 2,
        "pass": 0,
        "answer": "        m, n = len(nums1), len(nums2)\n        if m > n:\n            nums1, nums2, m, n = nums2, nums1, n, m\n        if n == 0:\n            raise ValueError"
    },
    {
        "number": 4,
        "title": "Median of Two Sorted Arrays",
        "difficulty": 2,
        "pass": 1,
        "answer": "        m, n = len(nums1), len(nums2)\n        if m > n:\n            nums1, nums2, m, n = nums2, nums1, n, m\n        if n == 0:\n            raise ValueError"
    },
    {
        "number": 4,
        "title": "Median of Two Sorted Arrays",
        "difficulty": 2,
        "pass": 2,
        "answer": "        if len(nums1) == 0:\n            return nums2[len(nums2) // 2]\n        if len(nums2) == 0:\n            return nums1[len(nums1) // 2]"
    },
    {
        "number": 4,
        "title": "Median of Two Sorted Arrays",
        "difficulty": 2,
        "pass": 3,
        "answer": "        m, n = len(nums1), len(nums2)\n        if m > n:\n            nums1, nums2, m, n = nums2, nums1, n, m\n        if n == 0:\n            raise ValueError"
    },
    {
        "number": 4,
        "title": "Median of Two Sorted Arrays",
        "difficulty": 2,
        "pass": 4,
        "answer": "        if len(nums1) > len(nums2):\n            nums1, nums2 = nums2, nums1\n        m, n = len(nums1), len(nums2)\n        left, right = 0, m\n        while left <= right:\n            i = (left + right) // 2\n            j = (m + n + 1) // 2 - i\n            if i < m and nums2[j - 1] > nums1[i]:\n                left = i + 1\n            elif i > 0 and nums1[i - 1] > nums2[j]:\n                right = i - 1\n            else:\n                if i == 0:\n                    max_left = nums2[j - 1]\n                elif j == 0:\n                    max_left = nums1[i - 1]\n                else:\n                    max_left = max(nums1[i - 1], nums2[j - 1])"
    },
    {
        "number": 4,
        "title": "Median of Two Sorted Arrays",
        "difficulty": 2,
        "pass": 5,
        "answer": "        if len(nums1) > len(nums2):\n            nums1, nums2 = nums2, nums1\n        m, n = len(nums1), len(nums2)\n        if m == 0:\n            return nums2[(n - 1) // 2]\n        if n == 0:\n            return nums1[(m - 1) // 2]\n        imin, imax, half_len = 0, m, (m + n + 1) // 2\n        while imin <= imax:\n            i = (imin + imax) // 2\n            j = half_len - i\n            if i < m and nums2[j - 1] > nums1[i]:\n                # i is too small, must increase it\n                imin = i + 1\n            elif i > 0 and nums1[i - 1] > nums2[j]:\n                # i is too big, must decrease it\n                imax = i - 1\n            else:\n                # i is perfect"
    },
    {
        "number": 4,
        "title": "Median of Two Sorted Arrays",
        "difficulty": 2,
        "pass": 6,
        "answer": "        merged = nums1 + nums2\n        merged.sort()\n        if len(merged) % 2 == 0:\n            return (merged[len(merged) // 2 - 1] + merged[len(merged) // 2]) / 2\n        else:\n            return merged[len(merged) // 2]"
    },
    {
        "number": 4,
        "title": "Median of Two Sorted Arrays",
        "difficulty": 2,
        "pass": 7,
        "answer": "        m, n = len(nums1), len(nums2)\n        if m > n:\n            nums1, nums2, m, n = nums2, nums1, n, m\n        if n == 0:\n            raise ValueError"
    },
    {
        "number": 4,
        "title": "Median of Two Sorted Arrays",
        "difficulty": 2,
        "pass": 8,
        "answer": "        if len(nums1) > len(nums2):\n            nums1, nums2 = nums2, nums1"
    },
    {
        "number": 4,
        "title": "Median of Two Sorted Arrays",
        "difficulty": 2,
        "pass": 9,
        "answer": "        if len(nums1) > len(nums2):\n            nums1, nums2 = nums2, nums1\n        m, n = len(nums1), len(nums2)\n        left, right = 0, m\n        while left <= right:\n            i = (left + right) // 2\n            j = (m + n + 1) // 2 - i\n            if i < m and nums2[j - 1] > nums1[i]:\n                left = i + 1\n            elif i > 0 and nums1[i - 1] > nums2[j]:\n                right = i - 1\n            else:\n                if i == 0:\n                    max_left = nums2[j - 1]\n                elif j == 0:\n                    max_left = nums1[i - 1]\n                else:\n                    max_left = max(nums1[i - 1], nums2[j - 1])"
    },
    {
        "number": 5,
        "title": "Longest Palindromic Substring",
        "difficulty": 1,
        "pass": 0,
        "answer": "        n = len(s)\n        if n == 0:\n            return \"\"\n        if n == 1:\n            return s"
    },
    {
        "number": 5,
        "title": "Longest Palindromic Substring",
        "difficulty": 1,
        "pass": 1,
        "answer": "        n = len(s)\n        if n == 0:\n            return \"\"\n        if n == 1:\n            return s\n        dp = [[False for _ in range(n)] for _ in range(n)]\n        for i in range(n):\n            dp[i][i] = True\n        for i in range(n - 1, -1, -1):\n            for j in range(i + 1, n):\n                if s[i] == s[j]:\n                    dp[i][j] = dp[i + 1][j - 1]\n                else:\n                    dp[i][j] = False\n        res = \"\"\n        for i in range(n):\n            for j in range(i, n):\n                if dp[i][j] and j - i + 1 > len(res):\n                    res = s[i:j + 1]\n        return res"
    },
    {
        "number": 5,
        "title": "Longest Palindromic Substring",
        "difficulty": 1,
        "pass": 2,
        "answer": "        n = len(s)\n        if n == 0:\n            return \"\"\n        if n == 1:\n            return s"
    },
    {
        "number": 5,
        "title": "Longest Palindromic Substring",
        "difficulty": 1,
        "pass": 3,
        "answer": "        if not s:\n            return \"\"\n        n = len(s)\n        dp = [[False] * n for _ in range(n)]\n        max_len = 1\n        start = 0\n        for i in range(n):\n            dp[i][i] = True\n        for i in range(n - 1, -1, -1):\n            for j in range(i + 1, n):\n                if s[i] == s[j]:\n                    if j - i < 3:\n                        dp[i][j] = True\n                    else:\n                        dp[i][j] = dp[i + 1][j - 1]\n                if dp[i][j]:\n                    cur_len = j - i + 1\n                    if cur_len > max_len:\n                        max_len = cur_len\n                        start = i\n        return s[start:start + max_len]"
    },
    {
        "number": 5,
        "title": "Longest Palindromic Substring",
        "difficulty": 1,
        "pass": 4,
        "answer": "        if len(s) == 0:\n            return \"\"\n        if len(s) == 1:\n            return s\n        if len(s) == 2:\n            if s[0] == s[1]:\n                return s\n            else:\n                return s[0]\n        if len(s) == 3:\n            if s[0] == s[1] and s[1] == s[2]:\n                return s\n            elif s[0] == s[1] or s[1] == s[2]:\n                return s[0]\n            else:\n                return s[1]\n        if len(s) == 4:\n            if s[0] == s[1] and s[1] == s[2] and s[2] == s[3]:\n                return s\n            elif s[0] == s[1] or s[1] == s[2] or s[2] == s[3]:\n                return s[0]\n            else:\n                return s[1]\n        if len(s) == 5:\n            "
    },
    {
        "number": 5,
        "title": "Longest Palindromic Substring",
        "difficulty": 1,
        "pass": 5,
        "answer": "        if not s:\n            return \"\"\n        n = len(s)\n        dp = [[False] * n for _ in range(n)]\n        max_len = 1\n        start = 0\n        for i in range(n):\n            dp[i][i] = True\n        for i in range(n - 1, -1, -1):\n            for j in range(i + 1, n):\n                if s[i] == s[j]:\n                    if j - i < 3:\n                        dp[i][j] = True\n                    else:\n                        dp[i][j] = dp[i + 1][j - 1]\n                if dp[i][j]:\n                    cur_len = j - i + 1\n                    if cur_len > max_len:\n                        max_len = cur_len\n                        start = i\n        return s[start:start + max_len]"
    },
    {
        "number": 5,
        "title": "Longest Palindromic Substring",
        "difficulty": 1,
        "pass": 6,
        "answer": "        n = len(s)\n        if n == 0:\n            return \"\"\n        if n == 1:\n            return s\n        dp = [[False] * n for _ in range(n)]\n        max_len = 1\n        start = 0\n        for i in range(n):\n            dp[i][i] = True\n        for i in range(n - 1, -1, -1):\n            for j in range(i + 1, n):\n                if s[i] == s[j]:\n                    if j - i < 3:\n                        dp[i][j] = True\n                    else:\n                        dp[i][j] = dp[i + 1][j - 1]\n                if dp[i][j]:\n                    cur_len = j - i + 1\n                    if cur_len > max_len:\n                        max_len = cur_len\n                        start = i\n        return s[start:start + max_len]"
    },
    {
        "number": 5,
        "title": "Longest Palindromic Substring",
        "difficulty": 1,
        "pass": 7,
        "answer": "        if len(s) == 0:\n            return \"\"\n        n = len(s)\n        dp = [[False] * n for _ in range(n)]\n        max_len = 1\n        start = 0\n        for i in range(n):\n            dp[i][i] = True\n        for i in range(n - 1, -1, -1):\n            for j in range(i + 1, n):\n                if s[i] == s[j]:\n                    if j - i < 3:\n                        dp[i][j] = True\n                    else:\n                        dp[i][j] = dp[i + 1][j - 1]\n                if dp[i][j]:\n                    cur_len = j - i + 1\n                    if cur_len > max_len:\n                        max_len = cur_len\n                        start = i\n        return s[start:start + max_len]"
    },
    {
        "number": 5,
        "title": "Longest Palindromic Substring",
        "difficulty": 1,
        "pass": 8,
        "answer": "        if len(s) == 0:\n            return \"\""
    },
    {
        "number": 5,
        "title": "Longest Palindromic Substring",
        "difficulty": 1,
        "pass": 9,
        "answer": "        if len(s) == 0:\n            return \"\"\n        if len(s) == 1:\n            return s\n        if len(s) == 2:\n            if s[0] == s[1]:\n                return s\n            else:\n                return s[0]\n        if len(s) == 3:\n            if s[0] == s[1] and s[1] == s[2]:\n                return s\n            elif s[0] == s[1]:\n                return s[0]\n            elif s[1] == s[2]:\n                return s[1]\n            else:\n                return s[0]\n        if len(s) == 4:\n            if s[0] == s[1] and s[1] == s[2] and s[2] == s[3]:\n                return s\n            elif s[0] == s[1]:\n                return s[0]\n            elif s[1] == s[2]:\n                return s[1]\n            elif s[2] == s[3]:"
    },
    {
        "number": 6,
        "title": "Zigzag Conversion",
        "difficulty": 1,
        "pass": 0,
        "answer": "        if numRows == 1:\n            return s\n        if numRows == 2:\n            return s[::2] + s[1::2]\n        if numRows == 3:\n            return s[::3] + s[2::3]\n        if numRows == 4:\n            return s[::4] + s[1::4] + s[2::4] + s[3::4]"
    },
    {
        "number": 6,
        "title": "Zigzag Conversion",
        "difficulty": 1,
        "pass": 1,
        "answer": "        if numRows == 1:\n            return s\n        if numRows == 2:\n            return s[::2] + s[1::2]\n        ans = []\n        for i in range(numRows):\n            if i == 0:\n                ans.append(s[i::numRows])\n            elif i == numRows - 1:\n                ans.append(s[i::numRows][::-1])\n            else:\n                ans.append(s[i::numRows])\n                ans.append(s[i::numRows][::-1])\n        return \"\".join(ans)"
    },
    {
        "number": 6,
        "title": "Zigzag Conversion",
        "difficulty": 1,
        "pass": 2,
        "answer": "        if numRows == 1:\n            return s\n        if numRows == 2:\n            return s[::-1]\n        res = \"\"\n        for i in range(numRows):\n            for j in range(i, len(s), numRows):\n                res += s[j]\n                if i!= 0 and i!= numRows - 1 and j + numRows - 2 < len(s):\n                    res += s[j + numRows - 2]\n        return res"
    },
    {
        "number": 6,
        "title": "Zigzag Conversion",
        "difficulty": 1,
        "pass": 3,
        "answer": "        if numRows == 1:\n            return s\n        if numRows == 2:\n            return s[::-1]\n        if numRows == 3:\n            return s[::-1] + s[::-1] + s[::-1]\n        if numRows == 4:\n            return s[::-1] + s[::-1] + s[::-1] + s[::-1]\n        res = \"\"\n        for i in range(numRows):\n            for j in range(i, len(s), numRows):\n                res += s[j]\n        return res"
    },
    {
        "number": 6,
        "title": "Zigzag Conversion",
        "difficulty": 1,
        "pass": 4,
        "answer": "        if numRows == 1:\n            return s\n        \n        if numRows == 2:\n            return s[::2] + s[1::2]\n        \n        if numRows == 3:\n            return s[::3] + s[1::3] + s[2::3]\n        \n        if numRows == 4:\n            return s[::4] + s[1::4] + s[2::4] + s[3::4]\n        \n        \nclass Solution:\n    def convert(self, s: str, numRows: int) -> str:\n        \"\"\"\n        The string \"PAYPALISHIRING\" is written in a zigzag pattern on a given number of rows like this: (you may want to display this pattern in a fixed font for better legibility)\n        P   A   H   N\n        A P L S I I G\n        Y   I   R\n        And then read line by line: \"PAHNAPLSIIGYIR\"\n        Write the code that will take a string and make this conversion given a number"
    },
    {
        "number": 6,
        "title": "Zigzag Conversion",
        "difficulty": 1,
        "pass": 5,
        "answer": "        if numRows == 1:\n            return s\n        res = ''\n        for i in range(numRows):\n            for j in range(i, len(s), numRows):\n                res += s[j]\n                if i!= 0 and i!= numRows - 1 and j + numRows - 2 < len(s):\n                    res += s[j + numRows - 2]\n        return res"
    },
    {
        "number": 6,
        "title": "Zigzag Conversion",
        "difficulty": 1,
        "pass": 6,
        "answer": "        if numRows == 1:\n            return s\n        \n        if numRows == 2:\n            return s[::2] + s[1::2]\n        \n        res = \"\"\n        for i in range(numRows):\n            for j in range(i, len(s), numRows):\n                res += s[j]\n                if i!= 0 and i!= numRows - 1 and j + numRows - 2 < len(s):\n                    res += s[j + numRows - 2]\n        \n        return res"
    },
    {
        "number": 6,
        "title": "Zigzag Conversion",
        "difficulty": 1,
        "pass": 7,
        "answer": "        if numRows == 1:\n            return s\n        if numRows == 2:\n            return s[::2] + s[1::2]\n        if numRows == 3:\n            return s[::3] + s[2::3]\n        if numRows == 4:\n            return s[::4] + s[3::4]\n        if numRows == 5:\n            return s[::5] + s[4::5]\n        if numRows == 6:\n            return s[::6] + s[5::6]\n        if numRows == 7:\n            return s[::7] + s[6::7]\n        if numRows == 8:\n            return s[::8] + s[7::8]\n        if numRows == 9:\n            return s[::9] + s[8::9]\n        if numRows == 10:\n            return s[::10] + s[9::10]\n        if numRows == 11:\n            return s[::11] + s[10::"
    },
    {
        "number": 6,
        "title": "Zigzag Conversion",
        "difficulty": 1,
        "pass": 8,
        "answer": "        if numRows == 1:\n            return s"
    },
    {
        "number": 6,
        "title": "Zigzag Conversion",
        "difficulty": 1,
        "pass": 9,
        "answer": "        if numRows == 1:\n            return s\n        if numRows == 2:\n            return s[::2]\n        if numRows == 3:\n            return s[::3]\n        if numRows == 4:\n            return s[::4]\n        if numRows == 5:\n            return s[::5]\n        if numRows == 6:\n            return s[::6]\n        if numRows == 7:\n            return s[::7]\n        if numRows == 8:\n            return s[::8]\n        if numRows == 9:\n            return s[::9]\n        if numRows == 10:\n            return s[::10]\n        if numRows == 11:\n            return s[::11]\n        if numRows == 12:\n            return s[::12]\n        if numRows == 13:\n            return s[::13]\n        if numRows == 14:\n            return s[::14]\n        if numRows == 15:\n            return s[::15]"
    },
    {
        "number": 7,
        "title": "Reverse Integer",
        "difficulty": 1,
        "pass": 0,
        "answer": "        if x == 0:\n            return 0\n        sign = -1 if x < 0 else 1\n        x = abs(x)\n        res = 0\n        while x > 0:\n            res = res * 10 + x % 10\n            x = x // 10\n        res = res * sign\n        if -2 ** 31 <= res <= 2 ** 31 - 1:\n            return res\n        else:\n            return 0"
    },
    {
        "number": 7,
        "title": "Reverse Integer",
        "difficulty": 1,
        "pass": 1,
        "answer": "        if x == 0:\n            return 0\n        if x > 0:\n            x_str = str(x)\n            x_str = x_str[::-1]\n            x_int = int(x_str)\n        else:\n            x_str = str(-x)\n            x_str = x_str[::-1]\n            x_int = -int(x_str)\n        if -2**31 <= x_int <= 2**31 - 1:\n            return x_int\n        else:\n            return 0"
    },
    {
        "number": 7,
        "title": "Reverse Integer",
        "difficulty": 1,
        "pass": 2,
        "answer": "        if x == 0:\n            return 0\n        x = str(x)\n        if x[0] == '-':\n            x = x[1:]\n            x = x[::-1]\n            x = '-' + x\n        else:\n            x = x[::-1]\n        x = int(x)\n        if -2**31 <= x <= 2**31 - 1:\n            return x\n        else:\n            return 0"
    },
    {
        "number": 7,
        "title": "Reverse Integer",
        "difficulty": 1,
        "pass": 3,
        "answer": "        if x == 0:\n            return 0\n        negative = False\n        if x < 0:\n            negative = True\n            x = -x\n        ans = 0\n        while x!= 0:\n            ans = ans * 10 + x % 10\n            x = x // 10\n        if negative:\n            ans = -ans\n        if ans > 2 ** 31 - 1 or ans < -2 ** 31:\n            return 0\n        return ans"
    },
    {
        "number": 7,
        "title": "Reverse Integer",
        "difficulty": 1,
        "pass": 4,
        "answer": "        if x == 0:\n            return 0\n        negative = False\n        if x < 0:\n            negative = True\n            x = -x\n        res = 0\n        while x > 0:\n            res = res * 10 + x % 10\n            x = x // 10\n        if negative:\n            res = -res\n        if -2 ** 31 <= res <= 2 ** 31 - 1:\n            return res\n        else:\n            return 0"
    },
    {
        "number": 7,
        "title": "Reverse Integer",
        "difficulty": 1,
        "pass": 5,
        "answer": "        if x == 0:\n            return 0\n        neg = False\n        if x < 0:\n            neg = True\n            x = -x\n        ans = 0\n        while x!= 0:\n            ans = ans * 10 + x % 10\n            x = x // 10\n        if neg:\n            ans = -ans\n        if ans < -2**31 or ans > 2**31 - 1:\n            return 0\n        return ans"
    },
    {
        "number": 7,
        "title": "Reverse Integer",
        "difficulty": 1,
        "pass": 6,
        "answer": "        if x == 0:\n            return 0\n        negative = False\n        if x < 0:\n            negative = True\n            x = -x\n        reversed_x = 0\n        while x > 0:\n            reversed_x = reversed_x * 10 + x % 10\n            x = x // 10\n        if reversed_x > 2**31 - 1 or reversed_x < -2**31:\n            return 0\n        if negative:\n            reversed_x = -reversed_x\n        return reversed_x"
    },
    {
        "number": 7,
        "title": "Reverse Integer",
        "difficulty": 1,
        "pass": 7,
        "answer": "        if x == 0:\n            return 0\n        sign = 1 if x >= 0 else -1\n        x = abs(x)\n        res = 0\n        while x!= 0:\n            res = res * 10 + x % 10\n            x = x // 10\n        res = res * sign\n        if -2 ** 31 <= res <= 2 ** 31 - 1:\n            return res\n        else:\n            return 0"
    },
    {
        "number": 7,
        "title": "Reverse Integer",
        "difficulty": 1,
        "pass": 8,
        "answer": "        negative = False\n        if x < 0:\n            negative = True\n            x = abs(x)\n        res = 0\n        while x > 0:\n            res = res * 10 + x % 10\n            x = x // 10\n        if negative:\n            res = -res\n        if res < -2 ** 31 or res > 2 ** 31 - 1:\n            return 0\n        return res"
    },
    {
        "number": 7,
        "title": "Reverse Integer",
        "difficulty": 1,
        "pass": 9,
        "answer": "        negative = False\n        if x < 0:\n            negative = True\n            x = -x\n        result = 0\n        while x > 0:\n            result = result * 10 + x % 10\n            x = x // 10\n        if negative:\n            result = -result\n        if result < -2**31 or result > 2**31 - 1:\n            return 0\n        return result"
    },
    {
        "number": 8,
        "title": "String to Integer (atoi)",
        "difficulty": 1,
        "pass": 0,
        "answer": "        s = s.lstrip()\n        if not s:\n            return 0"
    },
    {
        "number": 8,
        "title": "String to Integer (atoi)",
        "difficulty": 1,
        "pass": 1,
        "answer": "        s = s.lstrip()\n        if len(s) == 0:\n            return 0\n        if s[0] == '-':\n            sign = -1\n            s = s[1:]\n        elif s[0] == '+':\n            sign = 1\n            s = s[1:]\n        else:\n            sign = 1\n        res = 0\n        i = 0\n        while i < len(s) and s[i].isdigit():\n            res = res * 10 + ord(s[i]) - ord('0')\n            i += 1\n        return max(-2 ** 31, min(sign * res, 2 ** 31 - 1))"
    },
    {
        "number": 8,
        "title": "String to Integer (atoi)",
        "difficulty": 1,
        "pass": 2,
        "answer": "        if len(s) == 0:\n            return 0\n        s = s.lstrip()\n        if len(s) == 0:\n            return 0\n        sign = 1\n        if s[0] == '-':\n            sign = -1\n            s = s[1:]\n        elif s[0] == '+':\n            s = s[1:]\n        res = 0\n        i = 0\n        while i < len(s) and s[i].isdigit():\n            res = res * 10 + ord(s[i]) - ord('0')\n            i += 1\n        return max(-2 ** 31, min(sign * res, 2 ** 31 - 1))"
    },
    {
        "number": 8,
        "title": "String to Integer (atoi)",
        "difficulty": 1,
        "pass": 3,
        "answer": "        s = s.lstrip()\n        if len(s) == 0:\n            return 0\n        if s[0] == '-':\n            sign = -1\n            s = s[1:]\n        elif s[0] == '+':\n            sign = 1\n            s = s[1:]\n        else:\n            sign = 1\n        res = 0\n        i = 0\n        while i < len(s) and s[i].isdigit():\n            res = res * 10 + ord(s[i]) - ord('0')\n            i += 1\n        return max(-2**31, min(sign * res, 2**31 - 1))"
    },
    {
        "number": 8,
        "title": "String to Integer (atoi)",
        "difficulty": 1,
        "pass": 4,
        "answer": "        s = s.lstrip()\n        if not s:\n            return 0\n        if s[0] == '-':\n            sign = -1\n            s = s[1:]\n        elif s[0] == '+':\n            sign = 1\n            s = s[1:]\n        else:\n            sign = 1\n        res, i = 0, 0\n        while i < len(s) and s[i].isdigit():\n            res = res * 10 + ord(s[i]) - ord('0')\n            i += 1\n        return max(-2**31, min(sign * res, 2**31 - 1))"
    },
    {
        "number": 8,
        "title": "String to Integer (atoi)",
        "difficulty": 1,
        "pass": 5,
        "answer": "        s = s.lstrip()\n        if len(s) == 0:\n            return 0"
    },
    {
        "number": 8,
        "title": "String to Integer (atoi)",
        "difficulty": 1,
        "pass": 6,
        "answer": "        s = s.lstrip()\n        if len(s) == 0:\n            return 0\n        if s[0] == '-':\n            sign = -1\n            s = s[1:]\n        elif s[0] == '+':\n            sign = 1\n            s = s[1:]\n        else:\n            sign = 1\n        num = 0\n        i = 0\n        while i < len(s) and s[i].isdigit():\n            num = num * 10 + int(s[i])\n            i += 1\n        return max(-2**31, min(sign * num, 2**31 - 1))"
    },
    {
        "number": 8,
        "title": "String to Integer (atoi)",
        "difficulty": 1,
        "pass": 7,
        "answer": "        s = s.lstrip()\n        if not s:\n            return 0\n        if s[0] == '-':\n            sign = -1\n            s = s[1:]\n        elif s[0] == '+':\n            sign = 1\n            s = s[1:]\n        else:\n            sign = 1\n        res = 0\n        for i in range(len(s)):\n            if s[i].isdigit():\n                res = res * 10 + int(s[i])\n            else:\n                break\n        res *= sign\n        if res < -2**31:\n            res = -2**31\n        elif res > 2**31 - 1:\n            res = 2**31 - 1\n        return res"
    },
    {
        "number": 8,
        "title": "String to Integer (atoi)",
        "difficulty": 1,
        "pass": 8,
        "answer": "        s = s.lstrip()\n        if len(s) == 0:\n            return 0\n        if s[0] == '-':\n            sign = -1\n            s = s[1:]\n        elif s[0] == '+':\n            sign = 1\n            s = s[1:]\n        else:\n            sign = 1\n        result = 0\n        for i in range(len(s)):\n            if s[i].isdigit():\n                result = result * 10 + int(s[i])\n            else:\n                break\n        result *= sign\n        if result < -2147483648:\n            result = -2147483648\n        elif result > 2147483647:\n            result = 2147483647\n        return result"
    },
    {
        "number": 8,
        "title": "String to Integer (atoi)",
        "difficulty": 1,
        "pass": 9,
        "answer": "        s = s.lstrip()\n        if len(s) == 0:\n            return 0\n        if s[0] == '-':\n            sign = -1\n            s = s[1:]\n        elif s[0] == '+':\n            sign = 1\n            s = s[1:]\n        else:\n            sign = 1\n        res = 0\n        for c in s:\n            if c.isdigit():\n                res = res * 10 + int(c)\n            else:\n                break\n        return max(-2**31, min(sign * res, 2**31 - 1))"
    },
    {
        "number": 9,
        "title": "Palindrome Number",
        "difficulty": 0,
        "pass": 0,
        "answer": "        if x < 0:\n            return False\n        if x < 10:\n            return True\n        if x % 10 == 0:\n            return False\n        rev = 0\n        while x > rev:\n            rev = rev * 10 + x % 10\n            x = x // 10\n        return x == rev or x == rev // 10"
    },
    {
        "number": 9,
        "title": "Palindrome Number",
        "difficulty": 0,
        "pass": 1,
        "answer": "        if x < 0:\n            return False\n        if x < 10:\n            return True\n        if x % 10 == 0 and x!= 0:\n            return False\n        x = str(x)\n        i = 0\n        j = len(x) - 1\n        while i < j:\n            if x[i]!= x[j]:\n                return False\n            i += 1\n            j -= 1\n        return True"
    },
    {
        "number": 9,
        "title": "Palindrome Number",
        "difficulty": 0,
        "pass": 2,
        "answer": "        if x < 0:\n            return False\n        if x == 0:\n            return True\n        if x % 10 == 0:\n            return False\n        return self.isPalindrome(x // 10)"
    },
    {
        "number": 9,
        "title": "Palindrome Number",
        "difficulty": 0,
        "pass": 3,
        "answer": "        if x < 0:\n            return False\n        reversed_x = 0\n        while x > reversed_x:\n            reversed_x = reversed_x * 10 + x % 10\n            x = x // 10\n        return x == reversed_x or x == reversed_x // 10"
    },
    {
        "number": 9,
        "title": "Palindrome Number",
        "difficulty": 0,
        "pass": 4,
        "answer": "        if x < 0:\n            return False\n        if x < 10:\n            return True\n        if x % 10 == 0:\n            return False\n        if x % 10 == 1:\n            return True\n        return self.isPalindrome(x // 10)"
    },
    {
        "number": 9,
        "title": "Palindrome Number",
        "difficulty": 0,
        "pass": 5,
        "answer": "        if x < 0 or (x % 10 == 0 and x!= 0):\n            return False\n        else:\n            reversed_x = 0\n            while x > reversed_x:\n                reversed_x = reversed_x * 10 + x % 10\n                x = x // 10\n            return x == reversed_x or x == reversed_x // 10"
    },
    {
        "number": 9,
        "title": "Palindrome Number",
        "difficulty": 0,
        "pass": 6,
        "answer": "        if x < 0:\n            return False\n        if x == 0:\n            return True\n        if x < 10:\n            return True\n        if x % 10 == 0:\n            return False\n        return self.isPalindrome(x // 10)"
    },
    {
        "number": 9,
        "title": "Palindrome Number",
        "difficulty": 0,
        "pass": 7,
        "answer": "        if x < 0:\n            return False\n        elif x < 10:\n            return True\n        else:\n            return str(x) == str(x)[::-1]"
    },
    {
        "number": 9,
        "title": "Palindrome Number",
        "difficulty": 0,
        "pass": 8,
        "answer": "        if x < 0:\n            return False\n        elif x == 0:\n            return True\n        else:\n            rev = 0\n            while x > rev:\n                rev = rev * 10 + x % 10\n                x = x // 10\n            return x == rev or x == rev // 10"
    },
    {
        "number": 9,
        "title": "Palindrome Number",
        "difficulty": 0,
        "pass": 9,
        "answer": "        if x < 0:\n            return False\n        if x < 10:\n            return True\n        if x % 10 == 0:\n            return False\n        return self.isPalindrome(x // 10)"
    },
    {
        "number": 10,
        "title": "Regular Expression Matching",
        "difficulty": 2,
        "pass": 0,
        "answer": "        if len(s) == 0 and len(p) == 0:\n            return True\n        if len(s) == 0 and len(p)!= 0:\n            return False\n        if len(s)!= 0 and len(p) == 0:\n            return False\n        if len(s) == 0 and len(p) == 0:\n            return True\n        if len(s) == 1 and len(p) == 1:\n            if s == p:\n                return True\n            else:\n                return False\n        if len(s) == 1 and len(p)!= 1:\n            return False\n        if len(s)!= 1 and len(p) == 1:\n            return False\n        if len(s) == 1 and len(p) == 1:\n            if s == p:\n                return True\n            else:\n                return False\n        if s[0] == p[0] or p[0] == '.':\n            return self.isMatch(s[1:], p[1:])\n        if p[0] == '*':\n            if"
    },
    {
        "number": 10,
        "title": "Regular Expression Matching",
        "difficulty": 2,
        "pass": 1,
        "answer": "        if len(s) == 0 and len(p) == 0:\n            return True\n        if len(s) == 0 and len(p)!= 0:\n            return False\n        if len(s)!= 0 and len(p) == 0:\n            return False\n        if len(s) == 0 and len(p) == 0:\n            return True\n        if len(s) == 1 and len(p) == 1:\n            if s == p:\n                return True\n            else:\n                return False\n        if len(s) == 1 and len(p)!= 1:\n            return False\n        if len(s)!= 1 and len(p) == 1:\n            return False\n        if len(s) == 1 and len(p) == 1:\n            if s == p:\n                return True\n            else:\n                return False\n        if s[0] == p[0] or p[0] == '.':\n            return self.isMatch(s[1:], p[1:])\n        if p[0] == '*':\n            if"
    },
    {
        "number": 10,
        "title": "Regular Expression Matching",
        "difficulty": 2,
        "pass": 2,
        "answer": "        m, n = len(s), len(p)\n        dp = [[False] * (n + 1) for _ in range(m + 1)]\n        dp[0][0] = True\n        for i in range(1, n + 1):\n            if p[i - 1] == '*':\n                dp[0][i] = dp[0][i - 2]\n        for i in range(1, m + 1):\n            for j in range(1, n + 1):\n                if p[j - 1] == '*':\n                    dp[i][j] = dp[i][j - 2]\n                elif p[j - 1] == '.':\n                    dp[i][j] = dp[i - 1][j - 1]\n                else:\n                    dp[i][j] = dp[i - 1][j - 1] and (s[i - 1] == p[j - 1] or p[j - 1] == '.')\n        return dp[m][n]"
    },
    {
        "number": 10,
        "title": "Regular Expression Matching",
        "difficulty": 2,
        "pass": 3,
        "answer": "        if not s and not p:\n            return True\n        if not s and p:\n            return False\n        if p and not s:\n            return False\n        if len(p) == 1:\n            return len(s) == 1 and (s[0] == p[0] or p[0] == '.')\n        if len(p) == 2:\n            return len(s) == 1 and (s[0] == p[0] or p[0] == '.') and (s[0] == p[1] or p[1] == '.')\n        if len(p) == 3:\n            return len(s) == 1 and (s[0] == p[0] or p[0] == '.') and (s[0] == p[1] or p[1] == '.') and (s[0] == p[2] or p[2] == '.')\n        if len(p) == 4:\n            return len(s) == 1 and (s[0] == p[0] or p[0] == '"
    },
    {
        "number": 10,
        "title": "Regular Expression Matching",
        "difficulty": 2,
        "pass": 4,
        "answer": "        if not s and not p:\n            return True\n        if not p:\n            return False\n        if not s:\n            if len(p) > 1 and p[1] == '*':\n                return self.isMatch(s, p[2:])\n            else:\n                return False\n        if len(p) > 1 and p[1] == '*':\n            if self.isMatch(s, p[2:]):\n                return True\n            if s and (s[0] == p[0] or p[0] == '.'):\n                return self.isMatch(s[1:], p) or self.isMatch(s, p[2:])\n            else:\n                return False\n        else:\n            if s and (s[0] == p[0] or p[0] == '.'):\n                return self.isMatch(s[1:], p[1:])\n            else:\n                return False"
    },
    {
        "number": 10,
        "title": "Regular Expression Matching",
        "difficulty": 2,
        "pass": 5,
        "answer": "        if len(s) == 0 and len(p) == 0:\n            return True\n        if len(s) == 0 and len(p)!= 0:\n            return False\n        if len(s)!= 0 and len(p) == 0:\n            return False\n        if len(s) == 0 and len(p) == 0:\n            return True\n        if len(s) == 1 and len(p) == 1:\n            if s == p:\n                return True\n            else:\n                return False\n        if len(s) == 1 and len(p)!= 1:\n            return False\n        if len(s)!= 1 and len(p) == 1:\n            return False\n        if len(s) == 1 and len(p) == 1:\n            if s == p:\n                return True\n            else:\n                return False\n        if len(s) == 2 and len(p) == 2:\n            if s == p:\n                return True\n            else:\n                return False\n        if len(s) == 2 and len(p)!= 2:"
    },
    {
        "number": 10,
        "title": "Regular Expression Matching",
        "difficulty": 2,
        "pass": 6,
        "answer": "        if not s and not p:\n            return True\n        if not s and p:\n            return False\n        if p and not s:\n            return False\n        if len(s) == 0 and len(p) == 0:\n            return True\n        if len(s) == 0 and len(p) > 0:\n            return False\n        if len(p) == 0 and len(s) > 0:\n            return False\n        if len(p) == 1:\n            if p[0] == '*':\n                return self.isMatch(s, p[1:]) or self.isMatch(s, p[1:]) or self.isMatch(s[1:], p)\n            else:\n                return self.isMatch(s, p[1:])\n        if len(p) > 1:\n            if p[0] == '*':\n                return self.isMatch(s, p[1:]) or self.isMatch(s, p[1:]) or self.isMatch(s, p[1:]) or self.isMatch(s,"
    },
    {
        "number": 10,
        "title": "Regular Expression Matching",
        "difficulty": 2,
        "pass": 7,
        "answer": "        if len(s) == 0 and len(p) == 0:\n            return True\n        if len(s) == 0 and len(p)!= 0:\n            return False\n        if len(p) == 0 and len(s)!= 0:\n            return False\n        if len(p) == 0 and len(s) == 0:\n            return True\n        if len(p) == 1 and len(s) == 1:\n            if p[0] == s[0] or p[0] == '.':\n                return True\n            else:\n                return False\n        if len(p) == 1 and len(s)!= 1:\n            return False\n        if len(p) == 2 and len(s) == 1:\n            if p[0] == s[0] or p[0] == '.':\n                if p[1] == s[0] or p[1] == '.':\n                    return True\n                else:\n                    return False\n            else:\n                return False\n        if len(p) == 2 and len(s)!= 1:"
    },
    {
        "number": 10,
        "title": "Regular Expression Matching",
        "difficulty": 2,
        "pass": 8,
        "answer": "        if not s and not p:\n            return True\n        if not p:\n            return False\n        if not s:\n            if len(p) == 1 and p[0] == '*':\n                return True\n            else:\n                return False\n        if p[0] == '*':\n            if self.isMatch(s, p[1:]):\n                return True\n            if s and (s[0] == p[0] or p[0] == '.'):\n                return self.isMatch(s[1:], p)\n            else:\n                return False\n        else:\n            if s and (s[0] == p[0] or p[0] == '.'):\n                return self.isMatch(s[1:], p[1:])\n            else:\n                return False"
    },
    {
        "number": 10,
        "title": "Regular Expression Matching",
        "difficulty": 2,
        "pass": 9,
        "answer": "        if not s and not p:\n            return True\n        if not p:\n            return not s\n        if not s:\n            return False\n        if p[0] == '*':\n            if self.isMatch(s, p[1:]):\n                return True\n            if s[0] == p[0] or p[0] == '.':\n                return self.isMatch(s[1:], p)\n            return False\n        if s[0] == p[0] or p[0] == '.':\n            return self.isMatch(s[1:], p[1:])\n        return False"
    },
    {
        "number": 11,
        "title": "Container With Most Water",
        "difficulty": 1,
        "pass": 0,
        "answer": "        if not height:\n            return 0\n        left, right = 0, len(height) - 1\n        max_area = 0\n        while left < right:\n            max_area = max(max_area, min(height[left], height[right]) * (right - left))\n            if height[left] < height[right]:\n                left += 1\n            else:\n                right -= 1\n        return max_area"
    },
    {
        "number": 11,
        "title": "Container With Most Water",
        "difficulty": 1,
        "pass": 1,
        "answer": "        if len(height) < 2:\n            return 0\n        left = 0\n        right = len(height) - 1\n        max_area = 0\n        while left < right:\n            max_area = max(max_area, min(height[left], height[right]) * (right - left))\n            if height[left] < height[right]:\n                left += 1\n            else:\n                right -= 1\n        return max_area"
    },
    {
        "number": 11,
        "title": "Container With Most Water",
        "difficulty": 1,
        "pass": 2,
        "answer": "        n = len(height)\n        left = 0\n        right = n - 1\n        max_area = 0\n        while left < right:\n            max_area = max(max_area, min(height[left], height[right]) * (right - left))\n            if height[left] < height[right]:\n                left += 1\n            else:\n                right -= 1\n        return max_area"
    },
    {
        "number": 11,
        "title": "Container With Most Water",
        "difficulty": 1,
        "pass": 3,
        "answer": "        if len(height) < 2:\n            return 0\n        left = 0\n        right = len(height) - 1\n        max_area = 0\n        while left < right:\n            max_area = max(max_area, min(height[left], height[right]) * (right - left))\n            if height[left] < height[right]:\n                left += 1\n            else:\n                right -= 1\n        return max_area"
    },
    {
        "number": 11,
        "title": "Container With Most Water",
        "difficulty": 1,
        "pass": 4,
        "answer": "        n = len(height)\n        left = 0\n        right = n - 1\n        max_area = 0\n        while left < right:\n            area = min(height[left], height[right]) * (right - left)\n            max_area = max(max_area, area)\n            if height[left] < height[right]:\n                left += 1\n            else:\n                right -= 1\n        return max_area"
    },
    {
        "number": 11,
        "title": "Container With Most Water",
        "difficulty": 1,
        "pass": 5,
        "answer": "        if len(height) < 2:\n            return 0\n        left = 0\n        right = len(height) - 1\n        max_area = 0\n        while left < right:\n            max_area = max(max_area, min(height[left], height[right]) * (right - left))\n            if height[left] < height[right]:\n                left += 1\n            else:\n                right -= 1\n        return max_area"
    },
    {
        "number": 11,
        "title": "Container With Most Water",
        "difficulty": 1,
        "pass": 6,
        "answer": "        \n        if len(height) < 2:\n            return 0\n        \n        left, right = 0, len(height) - 1\n        max_area = 0\n        \n        while left < right:\n            max_area = max(max_area, min(height[left], height[right]) * (right - left))\n            \n            if height[left] < height[right]:\n                left += 1\n            else:\n                right -= 1\n        \n        return max_area"
    },
    {
        "number": 11,
        "title": "Container With Most Water",
        "difficulty": 1,
        "pass": 7,
        "answer": "        if len(height) < 2:\n            return 0\n        left, right = 0, len(height) - 1\n        max_area = 0\n        while left < right:\n            max_area = max(max_area, min(height[left], height[right]) * (right - left))\n            if height[left] < height[right]:\n                left += 1\n            else:\n                right -= 1\n        return max_area"
    },
    {
        "number": 11,
        "title": "Container With Most Water",
        "difficulty": 1,
        "pass": 8,
        "answer": "        if not height:\n            return 0\n        left, right = 0, len(height) - 1\n        max_area = 0\n        while left < right:\n            max_area = max(max_area, min(height[left], height[right]) * (right - left))\n            if height[left] < height[right]:\n                left += 1\n            else:\n                right -= 1\n        return max_area"
    },
    {
        "number": 11,
        "title": "Container With Most Water",
        "difficulty": 1,
        "pass": 9,
        "answer": "        max_area = 0\n        for i in range(len(height)-1):\n            for j in range(i+1, len(height)):\n                max_area = max(max_area, min(height[i], height[j])*(j-i))\n        return max_area"
    },
    {
        "number": 12,
        "title": "Integer to Roman",
        "difficulty": 1,
        "pass": 0,
        "answer": "        roman = {\n            1: \"I\",\n            5: \"V\",\n            10: \"X\",\n            50: \"L\",\n            100: \"C\",\n            500: \"D\",\n            1000: \"M\",\n        }\n        res = \"\"\n        while num > 0:\n            if num >= 1000:\n                res += roman[1000]\n                num -= 1000\n            elif num >= 900:\n                res += roman[900]\n                num -= 900\n            elif num >= 500:\n                res += roman[500]\n                num -= 500\n            elif num >= 400:\n                res += roman[400]\n                num -= 400\n            elif num >= 100:\n                res += roman[100]\n                num -= 100\n            elif num >= 90:\n                res += roman[90]\n                num -= 90\n            elif num >= 50:\n                res += roman[50]\n                num -= 50\n            elif num >= 40:\n                res += roman[40]\n                num -= 40\n            elif num >= 10"
    },
    {
        "number": 12,
        "title": "Integer to Roman",
        "difficulty": 1,
        "pass": 1,
        "answer": "        roman = {\n            1: \"I\",\n            5: \"V\",\n            10: \"X\",\n            50: \"L\",\n            100: \"C\",\n            500: \"D\",\n            1000: \"M\"\n        }\n        nums = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1]\n        res = \"\"\n        for i in range(len(nums)):\n            while num >= nums[i]:\n                res += roman[nums[i]]\n                num -= nums[i]\n        return res"
    },
    {
        "number": 12,
        "title": "Integer to Roman",
        "difficulty": 1,
        "pass": 2,
        "answer": "        if not num:\n            return ''\n        if num < 1 or num > 3999:\n            return ''\n        roman = {1: 'I', 2: 'II', 3: 'III', 4: 'IV', 5: 'V', 6: 'VI', 7: 'VII', 8: 'VIII', 9: 'IX', 10: 'X',\n                 11: 'XI', 12: 'XII', 13: 'XIII', 14: 'XIV', 15: 'XV', 16: 'XVI', 17: 'XVII', 18: 'XVIII', 19: 'XIX',\n                 20: 'XX', 21: 'XXI', 22: 'XXII', 23: 'XXIII', 24: 'XXIV', 25: 'XXV', 26: 'XXVI', 27: 'XXVII',\n                 28: 'XXVIII', 29: 'XXIX', 30: 'XXX', 31: 'XXXI', 32: 'XXXII', 33: 'XXXIII', 34: 'XXXIV', 35: 'XXXV',\n                 36: 'XXXVI', 37: 'XXXVII"
    },
    {
        "number": 12,
        "title": "Integer to Roman",
        "difficulty": 1,
        "pass": 3,
        "answer": "        if num == 0:\n            return ''\n        roman = {1: 'I', 5: 'V', 10: 'X', 50: 'L', 100: 'C', 500: 'D', 1000: 'M'}\n        nums = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1]\n        res = ''\n        for i in range(len(nums)):\n            while num >= nums[i]:\n                num -= nums[i]\n                res += roman[nums[i]]\n        return res"
    },
    {
        "number": 12,
        "title": "Integer to Roman",
        "difficulty": 1,
        "pass": 4,
        "answer": "        roman = {\n            1: 'I',\n            5: 'V',\n            10: 'X',\n            50: 'L',\n            100: 'C',\n            500: 'D',\n            1000: 'M'\n        }\n        if num < 1 or num > 3999:\n            return ''\n        res = ''\n        while num > 0:\n            if num >= 1000:\n                res += roman[1000]\n                num -= 1000\n            elif num >= 900:\n                res += roman[900]\n                num -= 900\n            elif num >= 500:\n                res += roman[500]\n                num -= 500\n            elif num >= 400:\n                res += roman[400]\n                num -= 400\n            elif num >= 100:\n                res += roman[100]\n                num -= 100\n            elif num >= 90:\n                res += roman[90]\n                num -= 90\n            elif num >= 50:\n                res += roman[50]\n                num -= 50\n            elif num >= 40:\n                res += r"
    },
    {
        "number": 12,
        "title": "Integer to Roman",
        "difficulty": 1,
        "pass": 5,
        "answer": "        roman = {\n            1: 'I',\n            4: 'IV',\n            5: 'V',\n            9: 'IX',\n            10: 'X',\n            40: 'XL',\n            50: 'L',\n            90: 'XC',\n            100: 'C',\n            400: 'CD',\n            500: 'D',\n            900: 'CM',\n            1000: 'M'\n        }\n        roman_num = ''\n        while num > 0:\n            if num >= 1000:\n                roman_num += roman[1000]\n                num -= 1000\n            elif num >= 900:\n                roman_num += roman[900]\n                num -= 900\n            elif num >= 500:\n                roman_num += roman[500]\n                num -= 500\n            elif num >= 400:\n                roman_num += roman[400]\n                num -= 400\n            elif num >= 100:\n                roman_num += roman[100]\n                num -= 100\n            elif num >= 90:\n                roman_num += roman[90"
    },
    {
        "number": 12,
        "title": "Integer to Roman",
        "difficulty": 1,
        "pass": 6,
        "answer": "        roman = {\n            1: 'I',\n            5: 'V',\n            10: 'X',\n            50: 'L',\n            100: 'C',\n            500: 'D',\n            1000: 'M'\n        }\n        result = ''\n        while num > 0:\n            for key, value in roman.items():\n                if num >= key:\n                    result += value\n                    num -= key\n                    break\n        return result"
    },
    {
        "number": 12,
        "title": "Integer to Roman",
        "difficulty": 1,
        "pass": 7,
        "answer": "        \n        roman = {\n            1: 'I',\n            4: 'IV',\n            5: 'V',\n            9: 'IX',\n            10: 'X',\n            40: 'XL',\n            50: 'L',\n            90: 'XC',\n            100: 'C',\n            400: 'CD',\n            500: 'D',\n            900: 'CM',\n            1000: 'M'\n        }\n        \n        res = ''\n        while num > 0:\n            if num >= 1000:\n                res += roman[1000]\n                num -= 1000\n            elif num >= 900:\n                res += roman[900]\n                num -= 900\n            elif num >= 500:\n                res += roman[500]\n                num -= 500\n            elif num >= 400:\n                res += roman[400]\n                num -= 400\n            elif num >= 100:\n                res += roman[100]\n                num -= 100\n            elif num >= 90:\n                res += roman[90]\n                num -= 90\n            elif"
    },
    {
        "number": 12,
        "title": "Integer to Roman",
        "difficulty": 1,
        "pass": 8,
        "answer": "        roman = {\n            1: 'I',\n            4: 'IV',\n            5: 'V',\n            9: 'IX',\n            10: 'X',\n            40: 'XL',\n            50: 'L',\n            90: 'XC',\n            100: 'C',\n            400: 'CD',\n            500: 'D',\n            900: 'CM',\n            1000: 'M'\n        }\n        result = ''\n        while num > 0:\n            if num >= 1000:\n                result += roman[1000]\n                num -= 1000\n            elif num >= 900:\n                result += roman[900]\n                num -= 900\n            elif num >= 500:\n                result += roman[500]\n                num -= 500\n            elif num >= 400:\n                result += roman[400]\n                num -= 400\n            elif num >= 100:\n                result += roman[100]\n                num -= 100\n            elif num >= 90:\n                result += roman[90]\n                num -= 90\n            elif num >= 50:"
    },
    {
        "number": 12,
        "title": "Integer to Roman",
        "difficulty": 1,
        "pass": 9,
        "answer": "        roman = {\n            1: 'I',\n            5: 'V',\n            10: 'X',\n            50: 'L',\n            100: 'C',\n            500: 'D',\n            1000: 'M'\n        }\n        if num < 1 or num > 3999:\n            return None\n        result = ''\n        while num > 0:\n            if num >= 1000:\n                result += roman[1000]\n                num -= 1000\n            elif num >= 900:\n                result += roman[900]\n                num -= 900\n            elif num >= 500:\n                result += roman[500]\n                num -= 500\n            elif num >= 400:\n                result += roman[400]\n                num -= 400\n            elif num >= 100:\n                result += roman[100]\n                num -= 100\n            elif num >= 90:\n                result += roman[90]\n                num -= 90\n            elif num >= 50:\n                result += roman[50]\n                num -= 50\n            elif num >= 40:\n                result += r"
    },
    {
        "number": 13,
        "title": "Roman to Integer",
        "difficulty": 0,
        "pass": 0,
        "answer": "        roman_dict = {\n            'I': 1,\n            'V': 5,\n            'X': 10,\n            'L': 50,\n            'C': 100,\n            'D': 500,\n            'M': 1000\n        }\n        res = 0\n        for i in range(len(s) - 1):\n            if roman_dict[s[i]] < roman_dict[s[i + 1]]:\n                res -= roman_dict[s[i]]\n            else:\n                res += roman_dict[s[i]]\n        res += roman_dict[s[-1]]\n        return res"
    },
    {
        "number": 13,
        "title": "Roman to Integer",
        "difficulty": 0,
        "pass": 1,
        "answer": "        roman_dict = {\n            'I': 1,\n            'V': 5,\n            'X': 10,\n            'L': 50,\n            'C': 100,\n            'D': 500,\n            'M': 1000,\n        }\n        res = 0\n        for i in range(len(s)):\n            if i > 0 and roman_dict[s[i]] > roman_dict[s[i - 1]]:\n                res += roman_dict[s[i]] - 2 * roman_dict[s[i - 1]]\n            else:\n                res += roman_dict[s[i]]\n        return res"
    },
    {
        "number": 13,
        "title": "Roman to Integer",
        "difficulty": 0,
        "pass": 2,
        "answer": "        roman_dict = {\n            \"I\": 1,\n            \"V\": 5,\n            \"X\": 10,\n            \"L\": 50,\n            \"C\": 100,\n            \"D\": 500,\n            \"M\": 1000,\n        }\n        result = 0\n        for i in range(len(s) - 1):\n            if roman_dict[s[i]] < roman_dict[s[i + 1]]:\n                result -= roman_dict[s[i]]\n            else:\n                result += roman_dict[s[i]]\n        result += roman_dict[s[-1]]\n        return result"
    },
    {
        "number": 13,
        "title": "Roman to Integer",
        "difficulty": 0,
        "pass": 3,
        "answer": "        roman_dict = {\n            'I': 1,\n            'V': 5,\n            'X': 10,\n            'L': 50,\n            'C': 100,\n            'D': 500,\n            'M': 1000,\n        }\n        result = 0\n        for i in range(len(s)):\n            if i > 0 and roman_dict[s[i]] > roman_dict[s[i - 1]]:\n                result += roman_dict[s[i]] - 2 * roman_dict[s[i - 1]]\n            else:\n                result += roman_dict[s[i]]\n        return result"
    },
    {
        "number": 13,
        "title": "Roman to Integer",
        "difficulty": 0,
        "pass": 4,
        "answer": "        roman_dict = {\n            'I': 1,\n            'V': 5,\n            'X': 10,\n            'L': 50,\n            'C': 100,\n            'D': 500,\n            'M': 1000\n        }\n        result = 0\n        for i in range(len(s)):\n            if i > 0 and roman_dict[s[i]] > roman_dict[s[i - 1]]:\n                result += roman_dict[s[i]] - 2 * roman_dict[s[i - 1]]\n            else:\n                result += roman_dict[s[i]]\n        return result"
    },
    {
        "number": 13,
        "title": "Roman to Integer",
        "difficulty": 0,
        "pass": 5,
        "answer": "        roman_dict = {\n            'I': 1,\n            'V': 5,\n            'X': 10,\n            'L': 50,\n            'C': 100,\n            'D': 500,\n            'M': 1000,\n            'IV': 4,\n            'IX': 9,\n            'XL': 40,\n            'XC': 90,\n            'CD': 400,\n            'CM': 900,\n        }\n        res = 0\n        for i in range(len(s)):\n            if i > 0 and roman_dict[s[i]] > roman_dict[s[i - 1]]:\n                res += roman_dict[s[i]] - 2 * roman_dict[s[i - 1]]\n            else:\n                res += roman_dict[s[i]]\n        return res"
    },
    {
        "number": 13,
        "title": "Roman to Integer",
        "difficulty": 0,
        "pass": 6,
        "answer": "        roman = {\n            'I': 1,\n            'V': 5,\n            'X': 10,\n            'L': 50,\n            'C': 100,\n            'D': 500,\n            'M': 1000,\n        }\n        result = 0\n        for i in range(len(s)):\n            if i > 0 and roman[s[i]] > roman[s[i - 1]]:\n                result += roman[s[i]] - 2 * roman[s[i - 1]]\n            else:\n                result += roman[s[i]]\n        return result"
    },
    {
        "number": 13,
        "title": "Roman to Integer",
        "difficulty": 0,
        "pass": 7,
        "answer": "        roman = {\n            'I': 1,\n            'V': 5,\n            'X': 10,\n            'L': 50,\n            'C': 100,\n            'D': 500,\n            'M': 1000,\n            'IV': 4,\n            'IX': 9,\n            'XL': 40,\n            'XC': 90,\n            'CD': 400,\n            'CM': 900\n        }\n        res = 0\n        for i in range(len(s)):\n            if i > 0 and roman[s[i]] > roman[s[i - 1]]:\n                res += roman[s[i]] - 2 * roman[s[i - 1]]\n            else:\n                res += roman[s[i]]\n        return res"
    },
    {
        "number": 13,
        "title": "Roman to Integer",
        "difficulty": 0,
        "pass": 8,
        "answer": "        roman_dict = {'I': 1, 'V': 5, 'X': 10, 'L': 50, 'C': 100, 'D': 500, 'M': 1000}\n        i = 0\n        result = 0\n        while i < len(s):\n            if i + 1 < len(s) and roman_dict[s[i]] < roman_dict[s[i + 1]]:\n                result -= roman_dict[s[i]]\n            else:\n                result += roman_dict[s[i]]\n            i += 1\n        return result"
    },
    {
        "number": 13,
        "title": "Roman to Integer",
        "difficulty": 0,
        "pass": 9,
        "answer": "        roman_dict = {\n            'I': 1,\n            'V': 5,\n            'X': 10,\n            'L': 50,\n            'C': 100,\n            'D': 500,\n            'M': 1000,\n            'IV': 4,\n            'IX': 9,\n            'XL': 40,\n            'XC': 90,\n            'CD': 400,\n            'CM': 900\n        }\n        res = 0\n        for i in range(len(s)):\n            if i > 0 and roman_dict[s[i]] > roman_dict[s[i - 1]]:\n                res += roman_dict[s[i]] - 2 * roman_dict[s[i - 1]]\n            else:\n                res += roman_dict[s[i]]\n        return res"
    },
    {
        "number": 14,
        "title": "Longest Common Prefix",
        "difficulty": 0,
        "pass": 0,
        "answer": "        if len(strs) == 0:\n            return \"\"\n        elif len(strs) == 1:\n            return strs[0]\n        elif len(strs) == 2:\n            if strs[0] == strs[1]:\n                return strs[0]\n            else:\n                return \"\"\n        elif len(strs) == 3:\n            if strs[0] == strs[1] and strs[0] == strs[2]:\n                return strs[0]\n            elif strs[0] == strs[1]:\n                return strs[0]\n            elif strs[0] == strs[2]:\n                return strs[0]\n            else:\n                return \"\"\n        elif len(strs) == 4:\n            if strs[0] == strs[1] and strs[0] == strs[2] and strs[0] == strs[3]:\n                return strs[0]\n            elif strs[0] == strs[1] and"
    },
    {
        "number": 14,
        "title": "Longest Common Prefix",
        "difficulty": 0,
        "pass": 1,
        "answer": "        if len(strs) == 0:\n            return \"\"\n        if len(strs) == 1:\n            return strs[0]\n        prefix = strs[0]\n        for i in range(1, len(strs)):\n            while strs[i].find(prefix)!= 0:\n                prefix = prefix[:-1]\n                if len(prefix) == 0:\n                    return \"\"\n        return prefix"
    },
    {
        "number": 14,
        "title": "Longest Common Prefix",
        "difficulty": 0,
        "pass": 2,
        "answer": "        if len(strs) == 0:\n            return \"\"\n        if len(strs) == 1:\n            return strs[0]\n        if len(strs) == 2:\n            if strs[0] == strs[1]:\n                return strs[0]\n            else:\n                return \"\"\n        strs = sorted(strs)\n        i = 0\n        while i < len(strs[0]) and i < len(strs[-1]):\n            if strs[0][i] == strs[-1][i]:\n                i += 1\n            else:\n                break\n        return strs[0][:i]"
    },
    {
        "number": 14,
        "title": "Longest Common Prefix",
        "difficulty": 0,
        "pass": 3,
        "answer": "        if len(strs) == 0:\n            return \"\"\n        if len(strs) == 1:\n            return strs[0]\n        if len(strs) == 2:\n            if strs[0] == strs[1]:\n                return strs[0]\n            else:\n                return \"\"\n        if len(strs) == 3:\n            if strs[0] == strs[1] and strs[1] == strs[2]:\n                return strs[0]\n            else:\n                return \"\"\n        if len(strs) == 4:\n            if strs[0] == strs[1] and strs[1] == strs[2] and strs[2] == strs[3]:\n                return strs[0]\n            else:\n                return \"\"\n        if len(strs) == 5:\n            if strs[0] == strs[1] and strs[1] == strs[2] and strs[2] == strs[3] and strs[3] == strs"
    },
    {
        "number": 14,
        "title": "Longest Common Prefix",
        "difficulty": 0,
        "pass": 4,
        "answer": "        if len(strs) == 0:\n            return \"\"\n        if len(strs) == 1:\n            return strs[0]\n        prefix = strs[0]\n        for i in range(1, len(strs)):\n            while strs[i].find(prefix)!= 0:\n                prefix = prefix[:-1]\n                if len(prefix) == 0:\n                    return \"\"\n        return prefix"
    },
    {
        "number": 14,
        "title": "Longest Common Prefix",
        "difficulty": 0,
        "pass": 5,
        "answer": "        if len(strs) == 0:\n            return \"\"\n        if len(strs) == 1:\n            return strs[0]\n        if len(strs) == 2:\n            if strs[0] == strs[1]:\n                return strs[0]\n            else:\n                return \"\"\n        if len(strs) == 3:\n            if strs[0] == strs[1] and strs[1] == strs[2]:\n                return strs[0]\n            else:\n                return \"\"\n        if len(strs) == 4:\n            if strs[0] == strs[1] and strs[1] == strs[2] and strs[2] == strs[3]:\n                return strs[0]\n            else:\n                return \"\"\n        if len(strs) == 5:\n            if strs[0] == strs[1] and strs[1] == strs[2] and strs[2] == strs[3] and strs[3] == strs"
    },
    {
        "number": 14,
        "title": "Longest Common Prefix",
        "difficulty": 0,
        "pass": 6,
        "answer": "        if len(strs) == 0:\n            return \"\"\n        prefix = strs[0]\n        for i in range(1, len(strs)):\n            while strs[i].find(prefix)!= 0:\n                prefix = prefix[:-1]\n                if len(prefix) == 0:\n                    return \"\"\n        return prefix"
    },
    {
        "number": 14,
        "title": "Longest Common Prefix",
        "difficulty": 0,
        "pass": 7,
        "answer": "        if not strs:\n            return \"\"\n        if len(strs) == 1:\n            return strs[0]\n        prefix = strs[0]\n        for i in range(1, len(strs)):\n            prefix = self.commonPrefix(prefix, strs[i])\n            if not prefix:\n                return \"\"\n        return prefix"
    },
    {
        "number": 14,
        "title": "Longest Common Prefix",
        "difficulty": 0,
        "pass": 8,
        "answer": "        if not strs:\n            return \"\"\n        prefix = strs[0]\n        for i in range(1, len(strs)):\n            while strs[i].find(prefix)!= 0:\n                prefix = prefix[:-1]\n                if prefix == \"\":\n                    return \"\"\n        return prefix"
    },
    {
        "number": 14,
        "title": "Longest Common Prefix",
        "difficulty": 0,
        "pass": 9,
        "answer": "        if len(strs) == 0:\n            return \"\"\n        if len(strs) == 1:\n            return strs[0]\n        prefix = strs[0]\n        for i in range(1, len(strs)):\n            while strs[i].find(prefix)!= 0:\n                prefix = prefix[:-1]\n                if len(prefix) == 0:\n                    return \"\"\n        return prefix"
    },
    {
        "number": 15,
        "title": "3Sum",
        "difficulty": 1,
        "pass": 0,
        "answer": "        nums.sort()\n        res = []\n        for i in range(len(nums)-2):\n            if i > 0 and nums[i] == nums[i-1]:\n                continue\n            l, r = i+1, len(nums)-1\n            while l < r:\n                if nums[i] + nums[l] + nums[r] == 0:\n                    res.append([nums[i], nums[l], nums[r]])\n                    while l < r and nums[l] == nums[l+1]:\n                        l += 1\n                    while l < r and nums[r] == nums[r-1]:\n                        r -= 1\n                    l += 1\n                    r -= 1\n                elif nums[i] + nums[l] + nums[r] > 0:\n                    r -= 1\n                else:\n                    l += 1\n        return res"
    },
    {
        "number": 15,
        "title": "3Sum",
        "difficulty": 1,
        "pass": 1,
        "answer": "        if len(nums) < 3:\n            return []\n        nums.sort()\n        res = []\n        for i in range(len(nums)-2):\n            if i > 0 and nums[i] == nums[i-1]:\n                continue\n            j = i + 1\n            k = len(nums) - 1\n            while j < k:\n                if nums[i] + nums[j] + nums[k] == 0:\n                    res.append([nums[i], nums[j], nums[k]])\n                    while j < k and nums[j] == nums[j+1]:\n                        j += 1\n                    while j < k and nums[k] == nums[k-1]:\n                        k -= 1\n                    j += 1\n                    k -= 1\n                elif nums[i] + nums[j] + nums[k] < 0:\n                    j += 1\n                else:\n                    k -= 1\n        return res"
    },
    {
        "number": 15,
        "title": "3Sum",
        "difficulty": 1,
        "pass": 2,
        "answer": "        if len(nums) < 3:\n            return []\n        nums.sort()\n        res = set()\n        for i in range(len(nums)-2):\n            if i > 0 and nums[i] == nums[i-1]:\n                continue\n            l, r = i+1, len(nums)-1\n            while l < r:\n                if nums[i] + nums[l] + nums[r] == 0:\n                    res.add((nums[i], nums[l], nums[r]))\n                    while l < r and nums[l] == nums[l+1]:\n                        l += 1\n                    while l < r and nums[r] == nums[r-1]:\n                        r -= 1\n                    l += 1\n                    r -= 1\n                elif nums[i] + nums[l] + nums[r] < 0:\n                    l += 1\n                else:\n                    r -= 1\n        return list(res)"
    },
    {
        "number": 15,
        "title": "3Sum",
        "difficulty": 1,
        "pass": 3,
        "answer": "        if len(nums) < 3:\n            return []\n        nums.sort()\n        res = []\n        for i in range(len(nums)-2):\n            if i > 0 and nums[i] == nums[i-1]:\n                continue\n            l, r = i+1, len(nums)-1\n            while l < r:\n                if nums[i] + nums[l] + nums[r] == 0:\n                    res.append([nums[i], nums[l], nums[r]])\n                    while l < r and nums[l] == nums[l+1]:\n                        l += 1\n                    while l < r and nums[r] == nums[r-1]:\n                        r -= 1\n                    l += 1\n                    r -= 1\n                elif nums[i] + nums[l] + nums[r] < 0:\n                    l += 1\n                else:\n                    r -= 1\n        return res"
    },
    {
        "number": 15,
        "title": "3Sum",
        "difficulty": 1,
        "pass": 4,
        "answer": "        if len(nums) < 3:\n            return []\n        nums.sort()\n        res = []\n        for i in range(len(nums)-2):\n            if i > 0 and nums[i] == nums[i-1]:\n                continue\n            l, r = i+1, len(nums)-1\n            while l < r:\n                if nums[i] + nums[l] + nums[r] == 0:\n                    res.append([nums[i], nums[l], nums[r]])\n                    while l < r and nums[l] == nums[l+1]:\n                        l += 1\n                    while l < r and nums[r] == nums[r-1]:\n                        r -= 1\n                    l += 1\n                    r -= 1\n                elif nums[i] + nums[l] + nums[r] < 0:\n                    l += 1\n                else:\n                    r -= 1\n        return res"
    },
    {
        "number": 15,
        "title": "3Sum",
        "difficulty": 1,
        "pass": 5,
        "answer": "        res = []\n        nums.sort()\n        for i in range(len(nums)-2):\n            if i > 0 and nums[i] == nums[i-1]:\n                continue\n            l, r = i+1, len(nums)-1\n            while l < r:\n                if nums[i] + nums[l] + nums[r] == 0:\n                    res.append([nums[i], nums[l], nums[r]])\n                    while l < r and nums[l] == nums[l+1]:\n                        l += 1\n                    while l < r and nums[r] == nums[r-1]:\n                        r -= 1\n                    l += 1\n                    r -= 1\n                elif nums[i] + nums[l] + nums[r] < 0:\n                    l += 1\n                else:\n                    r -= 1\n        return res"
    },
    {
        "number": 15,
        "title": "3Sum",
        "difficulty": 1,
        "pass": 6,
        "answer": "        nums.sort()\n        n = len(nums)\n        res = []\n        for i in range(n-2):\n            if i > 0 and nums[i] == nums[i-1]:\n                continue\n            l, r = i+1, n-1\n            while l < r:\n                s = nums[i] + nums[l] + nums[r]\n                if s < 0:\n                    l += 1\n                elif s > 0:\n                    r -= 1\n                else:\n                    res.append([nums[i], nums[l], nums[r]])\n                    while l < r and nums[l] == nums[l+1]:\n                        l += 1\n                    while l < r and nums[r] == nums[r-1]:\n                        r -= 1\n                    l += 1\n                    r -= 1\n        return res"
    },
    {
        "number": 15,
        "title": "3Sum",
        "difficulty": 1,
        "pass": 7,
        "answer": "        n = len(nums)\n        if n < 3:\n            return []\n        nums.sort()\n        res = []\n        for i in range(n):\n            if i > 0 and nums[i] == nums[i-1]:\n                continue\n            l, r = i+1, n-1\n            while l < r:\n                if nums[i] + nums[l] + nums[r] == 0:\n                    res.append([nums[i], nums[l], nums[r]])\n                    while l < r and nums[l] == nums[l+1]:\n                        l += 1\n                    while l < r and nums[r] == nums[r-1]:\n                        r -= 1\n                    l += 1\n                    r -= 1\n                elif nums[i] + nums[l] + nums[r] < 0:\n                    l += 1\n                else:\n                    r -= 1\n        return res"
    },
    {
        "number": 15,
        "title": "3Sum",
        "difficulty": 1,
        "pass": 8,
        "answer": "        nums.sort()\n        res = []\n        for i in range(len(nums)-2):\n            if i > 0 and nums[i] == nums[i-1]:\n                continue\n            l, r = i+1, len(nums)-1\n            while l < r:\n                if nums[i] + nums[l] + nums[r] == 0:\n                    res.append([nums[i], nums[l], nums[r]])\n                    while l < r and nums[l] == nums[l+1]:\n                        l += 1\n                    while l < r and nums[r] == nums[r-1]:\n                        r -= 1\n                    l += 1\n                    r -= 1\n                elif nums[i] + nums[l] + nums[r] < 0:\n                    l += 1\n                else:\n                    r -= 1\n        return res"
    },
    {
        "number": 15,
        "title": "3Sum",
        "difficulty": 1,
        "pass": 9,
        "answer": "        nums.sort()\n        res = []\n        for i in range(len(nums) - 2):\n            if i > 0 and nums[i] == nums[i - 1]:\n                continue\n            l, r = i + 1, len(nums) - 1\n            while l < r:\n                if nums[i] + nums[l] + nums[r] == 0:\n                    res.append([nums[i], nums[l], nums[r]])\n                    while l < r and nums[l] == nums[l + 1]:\n                        l += 1\n                    while l < r and nums[r] == nums[r - 1]:\n                        r -= 1\n                    l += 1\n                    r -= 1\n                elif nums[i] + nums[l] + nums[r] < 0:\n                    l += 1\n                else:\n                    r -= 1\n        return res"
    },
    {
        "number": 16,
        "title": "3Sum Closest",
        "difficulty": 1,
        "pass": 0,
        "answer": "        nums.sort()\n        n = len(nums)\n        res = nums[0] + nums[1] + nums[2]\n        for i in range(n - 2):\n            if i > 0 and nums[i] == nums[i - 1]:\n                continue\n            l, r = i + 1, n - 1\n            while l < r:\n                s = nums[i] + nums[l] + nums[r]\n                if abs(s - target) < abs(res - target):\n                    res = s\n                if s < target:\n                    l += 1\n                elif s > target:\n                    r -= 1\n                else:\n                    return target\n        return res"
    },
    {
        "number": 16,
        "title": "3Sum Closest",
        "difficulty": 1,
        "pass": 1,
        "answer": "        nums.sort()\n        res = nums[0] + nums[1] + nums[2]\n        for i in range(len(nums)-2):\n            if i > 0 and nums[i] == nums[i-1]:\n                continue\n            l, r = i+1, len(nums)-1\n            while l < r:\n                s = nums[i] + nums[l] + nums[r]\n                if abs(s - target) < abs(res - target):\n                    res = s\n                if s < target:\n                    l += 1\n                elif s > target:\n                    r -= 1\n                else:\n                    return target\n        return res"
    },
    {
        "number": 16,
        "title": "3Sum Closest",
        "difficulty": 1,
        "pass": 2,
        "answer": "        nums.sort()\n        res = nums[0] + nums[1] + nums[2]\n        for i in range(len(nums) - 2):\n            if i > 0 and nums[i] == nums[i - 1]:\n                continue\n            l, r = i + 1, len(nums) - 1\n            while l < r:\n                s = nums[i] + nums[l] + nums[r]\n                if abs(s - target) < abs(res - target):\n                    res = s\n                if s < target:\n                    l += 1\n                elif s > target:\n                    r -= 1\n                else:\n                    return target\n        return res"
    },
    {
        "number": 16,
        "title": "3Sum Closest",
        "difficulty": 1,
        "pass": 3,
        "answer": "        nums = sorted(nums)\n        res = nums[0] + nums[1] + nums[2]\n        for i in range(len(nums) - 2):\n            if i > 0 and nums[i] == nums[i - 1]:\n                continue\n            l, r = i + 1, len(nums) - 1\n            while l < r:\n                s = nums[i] + nums[l] + nums[r]\n                if abs(s - target) < abs(res - target):\n                    res = s\n                if s < target:\n                    l += 1\n                elif s > target:\n                    r -= 1\n                else:\n                    return target\n        return res"
    },
    {
        "number": 16,
        "title": "3Sum Closest",
        "difficulty": 1,
        "pass": 4,
        "answer": "        nums.sort()\n        closest = float('inf')\n        for i in range(len(nums)-2):\n            if i > 0 and nums[i] == nums[i-1]:\n                continue\n            l, r = i+1, len(nums)-1\n            while l < r:\n                curr_sum = nums[i] + nums[l] + nums[r]\n                if abs(curr_sum - target) < abs(closest - target):\n                    closest = curr_sum\n                if curr_sum < target:\n                    l += 1\n                elif curr_sum > target:\n                    r -= 1\n                else:\n                    return curr_sum\n        return closest"
    },
    {
        "number": 16,
        "title": "3Sum Closest",
        "difficulty": 1,
        "pass": 5,
        "answer": "        nums.sort()\n        n = len(nums)\n        res = nums[0] + nums[1] + nums[2]\n        for i in range(n - 2):\n            if i > 0 and nums[i] == nums[i - 1]:\n                continue\n            l, r = i + 1, n - 1\n            while l < r:\n                s = nums[i] + nums[l] + nums[r]\n                if abs(s - target) < abs(res - target):\n                    res = s\n                if s < target:\n                    l += 1\n                elif s > target:\n                    r -= 1\n                else:\n                    return target\n        return res"
    },
    {
        "number": 16,
        "title": "3Sum Closest",
        "difficulty": 1,
        "pass": 6,
        "answer": "        nums.sort()\n        n = len(nums)\n        res = nums[0] + nums[1] + nums[2]\n        for i in range(n-2):\n            if i > 0 and nums[i] == nums[i-1]:\n                continue\n            l, r = i+1, n-1\n            while l < r:\n                s = nums[i] + nums[l] + nums[r]\n                if abs(s - target) < abs(res - target):\n                    res = s\n                if s < target:\n                    l += 1\n                elif s > target:\n                    r -= 1\n                else:\n                    return target\n        return res"
    },
    {
        "number": 16,
        "title": "3Sum Closest",
        "difficulty": 1,
        "pass": 7,
        "answer": "        nums.sort()\n        res = nums[0] + nums[1] + nums[2]\n        for i in range(len(nums) - 2):\n            l, r = i + 1, len(nums) - 1\n            while l < r:\n                s = nums[i] + nums[l] + nums[r]\n                if abs(s - target) < abs(res - target):\n                    res = s\n                if s < target:\n                    l += 1\n                elif s > target:\n                    r -= 1\n                else:\n                    return target\n        return res"
    },
    {
        "number": 16,
        "title": "3Sum Closest",
        "difficulty": 1,
        "pass": 8,
        "answer": "        nums.sort()\n        res = nums[0] + nums[1] + nums[2]\n        for i in range(len(nums) - 2):\n            if i > 0 and nums[i] == nums[i - 1]:\n                continue\n            l, r = i + 1, len(nums) - 1\n            while l < r:\n                s = nums[i] + nums[l] + nums[r]\n                if abs(s - target) < abs(res - target):\n                    res = s\n                if s < target:\n                    l += 1\n                elif s > target:\n                    r -= 1\n                else:\n                    return target\n        return res"
    },
    {
        "number": 16,
        "title": "3Sum Closest",
        "difficulty": 1,
        "pass": 9,
        "answer": "        nums.sort()\n        res = nums[0] + nums[1] + nums[2]\n        for i in range(len(nums) - 2):\n            if i > 0 and nums[i] == nums[i - 1]:\n                continue\n            l, r = i + 1, len(nums) - 1\n            while l < r:\n                s = nums[i] + nums[l] + nums[r]\n                if abs(s - target) < abs(res - target):\n                    res = s\n                if s < target:\n                    l += 1\n                elif s > target:\n                    r -= 1\n                else:\n                    return target\n        return res"
    },
    {
        "number": 17,
        "title": "Letter Combinations of a Phone Number",
        "difficulty": 1,
        "pass": 0,
        "answer": "        if not digits:\n            return []\n        mapping = {\n            '2': ['a', 'b', 'c'],\n            '3': ['d', 'e', 'f'],\n            '4': ['g', 'h', 'i'],\n            '5': ['j', 'k', 'l'],\n            '6': ['m', 'n', 'o'],\n            '7': ['p', 'q', 'r','s'],\n            '8': ['t', 'u', 'v'],\n            '9': ['w', 'x', 'y', 'z']\n        }\n        res = []\n        self.dfs(mapping, digits, 0, '', res)\n        return res"
    },
    {
        "number": 17,
        "title": "Letter Combinations of a Phone Number",
        "difficulty": 1,
        "pass": 1,
        "answer": "        if len(digits) == 0:\n            return []\n        \n        phone = {\n            '2': ['a', 'b', 'c'],\n            '3': ['d', 'e', 'f'],\n            '4': ['g', 'h', 'i'],\n            '5': ['j', 'k', 'l'],\n            '6': ['m', 'n', 'o'],\n            '7': ['p', 'q', 'r','s'],\n            '8': ['t', 'u', 'v'],\n            '9': ['w', 'x', 'y', 'z']\n        }\n        \n        def backtrack(combination, next_digits):\n            # if there is no more digits to check\n            if len(next_digits) == 0:\n                # the combination is done\n                output.append(combination)\n            # if there are still digits to check\n            else:\n                # iterate over all letters which map \n                # the next available digit\n                for letter in phone[next_digits[0"
    },
    {
        "number": 17,
        "title": "Letter Combinations of a Phone Number",
        "difficulty": 1,
        "pass": 2,
        "answer": "        if not digits:\n            return []\n        \n        mapping = {\n            \"2\": \"abc\",\n            \"3\": \"def\",\n            \"4\": \"ghi\",\n            \"5\": \"jkl\",\n            \"6\": \"mno\",\n            \"7\": \"pqrs\",\n            \"8\": \"tuv\",\n            \"9\": \"wxyz\"\n        }\n        \n        def backtrack(combination, next_digits):\n            # if there is no more digits to check\n            if len(next_digits) == 0:\n                # the combination is done\n                output.append(combination)\n            # if there are still digits to check\n            else:\n                # iterate over all letters which map \n                # the next available digit\n                for letter in mapping[next_digits[0]]:\n                    # append the current letter to the combination\n                    # and proceed to the next digits\n                    backtrack(combination + letter, next_digits[1:])\n        \n        output = []\n        if digits:\n            backtrack(\"\","
    },
    {
        "number": 17,
        "title": "Letter Combinations of a Phone Number",
        "difficulty": 1,
        "pass": 3,
        "answer": "        if not digits:\n            return []\n        mapping = {\n            '2': ['a', 'b', 'c'],\n            '3': ['d', 'e', 'f'],\n            '4': ['g', 'h', 'i'],\n            '5': ['j', 'k', 'l'],\n            '6': ['m', 'n', 'o'],\n            '7': ['p', 'q', 'r','s'],\n            '8': ['t', 'u', 'v'],\n            '9': ['w', 'x', 'y', 'z']\n        }\n        res = []\n        self.dfs(mapping, digits, 0, \"\", res)\n        return res"
    },
    {
        "number": 17,
        "title": "Letter Combinations of a Phone Number",
        "difficulty": 1,
        "pass": 4,
        "answer": "        if not digits:\n            return []\n        \n        mapping = {\n            '2': ['a', 'b', 'c'],\n            '3': ['d', 'e', 'f'],\n            '4': ['g', 'h', 'i'],\n            '5': ['j', 'k', 'l'],\n            '6': ['m', 'n', 'o'],\n            '7': ['p', 'q', 'r','s'],\n            '8': ['t', 'u', 'v'],\n            '9': ['w', 'x', 'y', 'z']\n        }\n        \n        def backtrack(combination, next_digits):\n            # if there is no more digits to check\n            if len(next_digits) == 0:\n                # the combination is done\n                output.append(combination)\n            # if there are still digits to check\n            else:\n                # iterate over all letters which map \n                # the next available digit\n                for letter in mapping[next_digits[0]]:\n                    "
    },
    {
        "number": 17,
        "title": "Letter Combinations of a Phone Number",
        "difficulty": 1,
        "pass": 5,
        "answer": "        if not digits:\n            return []\n        \n        mapping = {\n            '2': ['a','b','c'],\n            '3': ['d','e','f'],\n            '4': ['g','h','i'],\n            '5': ['j','k','l'],\n            '6': ['m','n','o'],\n            '7': ['p','q','r','s'],\n            '8': ['t','u','v'],\n            '9': ['w','x','y','z']\n        }\n        \n        def backtrack(combination, next_digits):\n            # if there is no more digits to check\n            if len(next_digits) == 0:\n                # the combination is done\n                output.append(combination)\n            # if there are still digits to check\n            else:\n                # iterate over all letters which map \n                # the next available digit\n                for letter in mapping[next_digits[0]]:\n                    # append the current letter to the combination\n                    # and proceed to the next digits\n"
    },
    {
        "number": 17,
        "title": "Letter Combinations of a Phone Number",
        "difficulty": 1,
        "pass": 6,
        "answer": "        if not digits:\n            return []\n        mapping = {\n            '2': ['a', 'b', 'c'],\n            '3': ['d', 'e', 'f'],\n            '4': ['g', 'h', 'i'],\n            '5': ['j', 'k', 'l'],\n            '6': ['m', 'n', 'o'],\n            '7': ['p', 'q', 'r','s'],\n            '8': ['t', 'u', 'v'],\n            '9': ['w', 'x', 'y', 'z']\n        }\n        res = []\n        self.dfs(mapping, digits, 0, \"\", res)\n        return res"
    },
    {
        "number": 17,
        "title": "Letter Combinations of a Phone Number",
        "difficulty": 1,
        "pass": 7,
        "answer": "        if not digits:\n            return []\n        \n        mapping = {\n            \"2\": \"abc\",\n            \"3\": \"def\",\n            \"4\": \"ghi\",\n            \"5\": \"jkl\",\n            \"6\": \"mno\",\n            \"7\": \"pqrs\",\n            \"8\": \"tuv\",\n            \"9\": \"wxyz\"\n        }\n        \n        def backtrack(combination, next_digits):\n            # if there is no more digits to check\n            if len(next_digits) == 0:\n                # the combination is done\n                output.append(combination)\n            # if there are still digits to check\n            else:\n                # iterate over all letters which map \n                # the next available digit\n                for letter in mapping[next_digits[0]]:\n                    # append the current letter to the combination\n                    # and proceed to the next digits\n                    backtrack(combination + letter, next_digits[1:])\n        \n        output = []\n        if digits:\n            backtrack(\"\","
    },
    {
        "number": 17,
        "title": "Letter Combinations of a Phone Number",
        "difficulty": 1,
        "pass": 8,
        "answer": "        if not digits:\n            return []\n        \n        mapping = {\n            \"2\": \"abc\",\n            \"3\": \"def\",\n            \"4\": \"ghi\",\n            \"5\": \"jkl\",\n            \"6\": \"mno\",\n            \"7\": \"pqrs\",\n            \"8\": \"tuv\",\n            \"9\": \"wxyz\"\n        }\n        \n        def backtrack(combination, next_digits):\n            # if there is no more digits to check\n            if len(next_digits) == 0:\n                # the combination is done\n                output.append(combination)\n            # if there are still digits to check\n            else:\n                # iterate over all letters which map \n                # the next available digit\n                for letter in mapping[next_digits[0]]:\n                    # append the current letter to the combination\n                    # and proceed to the next digits\n                    backtrack(combination + letter, next_digits[1:])\n        \n        output = []\n        if digits:\n            backtrack(\"\","
    },
    {
        "number": 17,
        "title": "Letter Combinations of a Phone Number",
        "difficulty": 1,
        "pass": 9,
        "answer": "        if not digits:\n            return []\n        \n        mapping = {\n            \"2\": \"abc\",\n            \"3\": \"def\",\n            \"4\": \"ghi\",\n            \"5\": \"jkl\",\n            \"6\": \"mno\",\n            \"7\": \"pqrs\",\n            \"8\": \"tuv\",\n            \"9\": \"wxyz\"\n        }\n        \n        def backtrack(combination, next_digits):\n            # if there is no more digits to check\n            if len(next_digits) == 0:\n                # the combination is done\n                output.append(combination)\n            # if there are still digits to check\n            else:\n                # iterate over all letters which map \n                # the next available digit\n                for letter in mapping[next_digits[0]]:\n                    # append the current letter to the combination\n                    # and proceed to the next digits\n                    backtrack(combination + letter, next_digits[1:])\n        \n        output = []\n        if digits:\n            backtrack(\"\","
    },
    {
        "number": 18,
        "title": "4Sum",
        "difficulty": 1,
        "pass": 0,
        "answer": "        n = len(nums)\n        if n < 4:\n            return []\n        nums.sort()\n        res = []\n        for i in range(n - 3):\n            if i > 0 and nums[i] == nums[i - 1]:\n                continue\n            for j in range(i + 1, n - 2):\n                if j > i + 1 and nums[j] == nums[j - 1]:\n                    continue\n                l = j + 1\n                r = n - 1\n                while l < r:\n                    if nums[i] + nums[j] + nums[l] + nums[r] == target:\n                        res.append([nums[i], nums[j], nums[l], nums[r]])\n                        while l < r and nums[l] == nums[l + 1]:\n                            l += 1\n                        while l < r and nums[r] == nums[r - 1]:\n                            r -= 1\n                        l += 1\n                        r -= 1\n                    elif nums[i"
    },
    {
        "number": 18,
        "title": "4Sum",
        "difficulty": 1,
        "pass": 1,
        "answer": "        n = len(nums)\n        if n < 4:\n            return []\n        nums.sort()\n        res = []\n        for i in range(n - 3):\n            if i > 0 and nums[i] == nums[i - 1]:\n                continue\n            for j in range(i + 1, n - 2):\n                if j > i + 1 and nums[j] == nums[j - 1]:\n                    continue\n                l, r = j + 1, n - 1\n                while l < r:\n                    s = nums[i] + nums[j] + nums[l] + nums[r]\n                    if s < target:\n                        l += 1\n                    elif s > target:\n                        r -= 1\n                    else:\n                        res.append([nums[i], nums[j], nums[l], nums[r]])\n                        while l < r and nums[l] == nums[l + 1]:\n                            l += 1\n                        while l < r and nums[r] == nums[r"
    },
    {
        "number": 18,
        "title": "4Sum",
        "difficulty": 1,
        "pass": 2,
        "answer": "        if len(nums) < 4:\n            return []\n        nums.sort()\n        res = []\n        for i in range(len(nums) - 3):\n            if i > 0 and nums[i] == nums[i - 1]:\n                continue\n            for j in range(i + 1, len(nums) - 2):\n                if j > i + 1 and nums[j] == nums[j - 1]:\n                    continue\n                l, r = j + 1, len(nums) - 1\n                while l < r:\n                    s = nums[i] + nums[j] + nums[l] + nums[r]\n                    if s < target:\n                        l += 1\n                    elif s > target:\n                        r -= 1\n                    else:\n                        res.append([nums[i], nums[j], nums[l], nums[r]])\n                        while l < r and nums[l] == nums[l + 1]:\n                            l += 1\n                        while l < r and nums["
    },
    {
        "number": 18,
        "title": "4Sum",
        "difficulty": 1,
        "pass": 3,
        "answer": "        if len(nums) < 4:\n            return []\n        nums.sort()\n        res = []\n        for i in range(len(nums) - 3):\n            if i > 0 and nums[i] == nums[i - 1]:\n                continue\n            for j in range(i + 1, len(nums) - 2):\n                if j > i + 1 and nums[j] == nums[j - 1]:\n                    continue\n                l, r = j + 1, len(nums) - 1\n                while l < r:\n                    s = nums[i] + nums[j] + nums[l] + nums[r]\n                    if s < target:\n                        l += 1\n                    elif s > target:\n                        r -= 1\n                    else:\n                        res.append([nums[i], nums[j], nums[l], nums[r]])\n                        while l < r and nums[l] == nums[l + 1]:\n                            l += 1\n                        while l < r and nums["
    },
    {
        "number": 18,
        "title": "4Sum",
        "difficulty": 1,
        "pass": 4,
        "answer": "        n = len(nums)\n        if n < 4:\n            return []\n        nums.sort()\n        res = []\n        for i in range(n - 3):\n            if i > 0 and nums[i] == nums[i - 1]:\n                continue\n            for j in range(i + 1, n - 2):\n                if j > i + 1 and nums[j] == nums[j - 1]:\n                    continue\n                left = j + 1\n                right = n - 1\n                while left < right:\n                    if nums[i] + nums[j] + nums[left] + nums[right] == target:\n                        res.append([nums[i], nums[j], nums[left], nums[right]])\n                        while left < right and nums[left] == nums[left + 1]:\n                            left += 1\n                        while left < right and nums[right] == nums[right - 1]:\n                            right -= 1\n                        left += 1\n                        right -= 1\n                    elif nums[i"
    },
    {
        "number": 18,
        "title": "4Sum",
        "difficulty": 1,
        "pass": 5,
        "answer": "        if len(nums) < 4:\n            return []\n        nums.sort()\n        result = []\n        for i in range(len(nums) - 3):\n            if i > 0 and nums[i] == nums[i - 1]:\n                continue\n            for j in range(i + 1, len(nums) - 2):\n                if j > i + 1 and nums[j] == nums[j - 1]:\n                    continue\n                l, r = j + 1, len(nums) - 1\n                while l < r:\n                    s = nums[i] + nums[j] + nums[l] + nums[r]\n                    if s < target:\n                        l += 1\n                    elif s > target:\n                        r -= 1\n                    else:\n                        result.append([nums[i], nums[j], nums[l], nums[r]])\n                        while l < r and nums[l] == nums[l + 1]:\n                            l += 1\n                        while l < r and nums["
    },
    {
        "number": 18,
        "title": "4Sum",
        "difficulty": 1,
        "pass": 6,
        "answer": "        if len(nums) < 4:\n            return []\n        nums.sort()\n        res = []\n        for i in range(len(nums) - 3):\n            if i > 0 and nums[i] == nums[i - 1]:\n                continue\n            for j in range(i + 1, len(nums) - 2):\n                if j > i + 1 and nums[j] == nums[j - 1]:\n                    continue\n                l, r = j + 1, len(nums) - 1\n                while l < r:\n                    s = nums[i] + nums[j] + nums[l] + nums[r]\n                    if s < target:\n                        l += 1\n                    elif s > target:\n                        r -= 1\n                    else:\n                        res.append([nums[i], nums[j], nums[l], nums[r]])\n                        while l < r and nums[l] == nums[l + 1]:\n                            l += 1\n                        while l < r and nums["
    },
    {
        "number": 18,
        "title": "4Sum",
        "difficulty": 1,
        "pass": 7,
        "answer": "        if len(nums) < 4:\n            return []\n        nums.sort()\n        res = []\n        for i in range(len(nums) - 3):\n            if i > 0 and nums[i] == nums[i - 1]:\n                continue\n            for j in range(i + 1, len(nums) - 2):\n                if j > i + 1 and nums[j] == nums[j - 1]:\n                    continue\n                l, r = j + 1, len(nums) - 1\n                while l < r:\n                    s = nums[i] + nums[j] + nums[l] + nums[r]\n                    if s < target:\n                        l += 1\n                    elif s > target:\n                        r -= 1\n                    else:\n                        res.append([nums[i], nums[j], nums[l], nums[r]])\n                        while l < r and nums[l] == nums[l + 1]:\n                            l += 1\n                        while l < r and nums["
    },
    {
        "number": 18,
        "title": "4Sum",
        "difficulty": 1,
        "pass": 8,
        "answer": "        n = len(nums)\n        if n < 4:\n            return []\n        nums.sort()\n        res = []\n        for i in range(n - 3):\n            if i > 0 and nums[i] == nums[i - 1]:\n                continue\n            if nums[i] + nums[i + 1] + nums[i + 2] + nums[i + 3] > target:\n                break\n            if nums[i] + nums[n - 1] + nums[n - 2] + nums[n - 3] < target:\n                continue\n            for j in range(i + 1, n - 2):\n                if j > i + 1 and nums[j] == nums[j - 1]:\n                    continue\n                if nums[i] + nums[j] + nums[j + 1] + nums[j + 2] > target:\n                    break\n                if nums[i] + nums[j] + nums[n - 1] + nums[n - 2] < target:"
    },
    {
        "number": 18,
        "title": "4Sum",
        "difficulty": 1,
        "pass": 9,
        "answer": "        n = len(nums)\n        if n < 4:\n            return []\n        nums.sort()\n        res = []\n        for i in range(n - 3):\n            if i > 0 and nums[i] == nums[i - 1]:\n                continue\n            for j in range(i + 1, n - 2):\n                if j > i + 1 and nums[j] == nums[j - 1]:\n                    continue\n                l, r = j + 1, n - 1\n                while l < r:\n                    s = nums[i] + nums[j] + nums[l] + nums[r]\n                    if s < target:\n                        l += 1\n                    elif s > target:\n                        r -= 1\n                    else:\n                        res.append([nums[i], nums[j], nums[l], nums[r]])\n                        while l < r and nums[l] == nums[l + 1]:\n                            l += 1\n                        while l < r and nums[r] == nums[r"
    },
    {
        "number": 19,
        "title": "Remove Nth Node From End of List",
        "difficulty": 1,
        "pass": 0,
        "answer": "        if not head:\n            return None\n        if n == 1:\n            return head.next\n        count = 0\n        cur = head\n        while cur:\n            count += 1\n            cur = cur.next\n        if count == 1:\n            return None\n        if count == n:\n            return head.next\n        cur = head\n        for _ in range(count - n - 1):\n            cur = cur.next\n        cur.next = cur.next.next\n        return head"
    },
    {
        "number": 19,
        "title": "Remove Nth Node From End of List",
        "difficulty": 1,
        "pass": 1,
        "answer": "        dummy = ListNode(0)\n        dummy.next = head\n        slow = dummy\n        fast = dummy\n        for _ in range(n):\n            fast = fast.next\n        while fast.next:\n            slow = slow.next\n            fast = fast.next\n        slow.next = slow.next.next\n        return dummy.next"
    },
    {
        "number": 19,
        "title": "Remove Nth Node From End of List",
        "difficulty": 1,
        "pass": 2,
        "answer": "        if not head:\n            return None"
    },
    {
        "number": 19,
        "title": "Remove Nth Node From End of List",
        "difficulty": 1,
        "pass": 3,
        "answer": "        dummy = ListNode(0)\n        dummy.next = head\n        slow, fast = dummy, dummy\n        for _ in range(n):\n            fast = fast.next\n        while fast.next:\n            slow = slow.next\n            fast = fast.next\n        slow.next = slow.next.next\n        return dummy.next"
    },
    {
        "number": 19,
        "title": "Remove Nth Node From End of List",
        "difficulty": 1,
        "pass": 4,
        "answer": "        dummy = ListNode(0)\n        dummy.next = head\n        cur = dummy\n        for i in range(n):\n            cur = cur.next\n        \n        while cur.next:\n            cur = cur.next\n            head = head.next\n        \n        head = dummy.next\n        dummy.next = head.next\n        head.next = None\n        \n        return dummy.next"
    },
    {
        "number": 19,
        "title": "Remove Nth Node From End of List",
        "difficulty": 1,
        "pass": 5,
        "answer": "        dummy = ListNode(0)\n        dummy.next = head\n        slow = dummy\n        fast = dummy\n        for i in range(n):\n            fast = fast.next\n        while fast.next:\n            slow = slow.next\n            fast = fast.next\n        slow.next = slow.next.next\n        return dummy.next\n"
    },
    {
        "number": 19,
        "title": "Remove Nth Node From End of List",
        "difficulty": 1,
        "pass": 6,
        "answer": "        if not head:\n            return None\n        \n        dummy = ListNode(0)\n        dummy.next = head\n        slow = dummy\n        fast = dummy\n        \n        for i in range(n):\n            fast = fast.next\n        \n        while fast.next:\n            slow = slow.next\n            fast = fast.next\n        \n        slow.next = slow.next.next\n        \n        return dummy.next"
    },
    {
        "number": 19,
        "title": "Remove Nth Node From End of List",
        "difficulty": 1,
        "pass": 7,
        "answer": "        if not head:\n            return None\n        \n        dummy = ListNode(0)\n        dummy.next = head\n        slow = dummy\n        fast = dummy\n        \n        for i in range(n):\n            fast = fast.next\n        \n        while fast.next:\n            slow = slow.next\n            fast = fast.next\n        \n        slow.next = slow.next.next\n        return dummy.next\n        \n        \nclass Solution:\n    def removeNthFromEnd(self, head: Optional[ListNode], n: int) -> Optional[ListNode]:\n        \"\"\"\n        Given the head of a linked list, remove the nth node from the end of the list and return its head.\n        Example 1:\n        Input: head = [1,2,3,4,5], n = 2\n        Output: [1,2,3,5]\n        Example 2:\n        Input: head = [1], n = 1\n        Output: []\n        Example 3:\n        Input: head = [1,2], n = 1\n        Output: [1]"
    },
    {
        "number": 19,
        "title": "Remove Nth Node From End of List",
        "difficulty": 1,
        "pass": 8,
        "answer": "        if not head:\n            return None\n        \n        dummy = ListNode(0)\n        dummy.next = head\n        slow = dummy\n        fast = dummy\n        \n        for i in range(n):\n            fast = fast.next\n        \n        while fast.next:\n            slow = slow.next\n            fast = fast.next\n        \n        slow.next = slow.next.next\n        \n        return dummy.next"
    },
    {
        "number": 19,
        "title": "Remove Nth Node From End of List",
        "difficulty": 1,
        "pass": 9,
        "answer": "        if not head:\n            return None\n        if n == 1:\n            return head.next\n        dummy = ListNode(0)\n        dummy.next = head\n        fast = slow = dummy\n        for i in range(n):\n            fast = fast.next\n        while fast.next:\n            fast = fast.next\n            slow = slow.next\n        slow.next = slow.next.next\n        return dummy.next"
    },
    {
        "number": 20,
        "title": "Valid Parentheses",
        "difficulty": 0,
        "pass": 0,
        "answer": "        if not s:\n            return True\n        if len(s) % 2!= 0:\n            return False\n        if len(s) == 1:\n            return True\n        if s[0] == \"(\" and s[-1] == \")\":\n            return self.isValid(s[1:-1])\n        if s[0] == \"{\" and s[-1] == \"}\":\n            return self.isValid(s[1:-1])\n        if s[0] == \"[\" and s[-1] == \"]\":\n            return self.isValid(s[1:-1])\n        return False"
    },
    {
        "number": 20,
        "title": "Valid Parentheses",
        "difficulty": 0,
        "pass": 1,
        "answer": "        if not s:\n            return True\n        if len(s) % 2!= 0:\n            return False\n        stack = []\n        for i in range(len(s)):\n            if s[i] == '(' or s[i] == '[' or s[i] == '{':\n                stack.append(s[i])\n            else:\n                if len(stack) == 0:\n                    return False\n                if s[i] == ')' and stack[-1] == '(':\n                    stack.pop()\n                elif s[i] == ']' and stack[-1] == '[':\n                    stack.pop()\n                elif s[i] == '}' and stack[-1] == '{':\n                    stack.pop()\n                else:\n                    return False\n        if len(stack) == 0:\n            return True\n        else:\n            return False"
    },
    {
        "number": 20,
        "title": "Valid Parentheses",
        "difficulty": 0,
        "pass": 2,
        "answer": "        if len(s) == 0:\n            return True\n        if len(s) % 2!= 0:\n            return False\n        stack = []\n        for i in range(len(s)):\n            if s[i] == '(' or s[i] == '[' or s[i] == '{':\n                stack.append(s[i])\n            else:\n                if len(stack) == 0:\n                    return False\n                if s[i] == ')' and stack[-1] == '(':\n                    stack.pop()\n                elif s[i] == ']' and stack[-1] == '[':\n                    stack.pop()\n                elif s[i] == '}' and stack[-1] == '{':\n                    stack.pop()\n                else:\n                    return False\n        if len(stack) == 0:\n            return True\n        else:\n            return False"
    },
    {
        "number": 20,
        "title": "Valid Parentheses",
        "difficulty": 0,
        "pass": 3,
        "answer": "        stack = []\n        mapping = {')': '(', ']': '[', '}': '{'}\n        for char in s:\n            if char in mapping:\n                top_element = stack.pop() if stack else '#'\n                if mapping[char]!= top_element:\n                    return False\n            else:\n                stack.append(char)\n        return len(stack) == 0"
    },
    {
        "number": 20,
        "title": "Valid Parentheses",
        "difficulty": 0,
        "pass": 4,
        "answer": "        if len(s) == 0:\n            return True\n        if len(s) % 2!= 0:\n            return False\n        stack = []\n        for i in range(len(s)):\n            if s[i] == '(' or s[i] == '[' or s[i] == '{':\n                stack.append(s[i])\n            else:\n                if len(stack) == 0:\n                    return False\n                if s[i] == ')' and stack[-1] == '(':\n                    stack.pop()\n                elif s[i] == ']' and stack[-1] == '[':\n                    stack.pop()\n                elif s[i] == '}' and stack[-1] == '{':\n                    stack.pop()\n                else:\n                    return False\n        if len(stack) == 0:\n            return True\n        else:\n            return False"
    },
    {
        "number": 20,
        "title": "Valid Parentheses",
        "difficulty": 0,
        "pass": 5,
        "answer": "        if len(s) == 0:\n            return True\n        if len(s) % 2!= 0:\n            return False\n        stack = []\n        for i in range(len(s)):\n            if s[i] == '(' or s[i] == '{' or s[i] == '[':\n                stack.append(s[i])\n            elif s[i] == ')' or s[i] == '}' or s[i] == ']':\n                if len(stack) == 0:\n                    return False\n                if s[i] == ')' and stack[-1] == '(':\n                    stack.pop()\n                elif s[i] == '}' and stack[-1] == '{':\n                    stack.pop()\n                elif s[i] == ']' and stack[-1] == '[':\n                    stack.pop()\n                else:\n                    return False\n        if len(stack) == 0:\n            return True\n        else:\n            return False"
    },
    {
        "number": 20,
        "title": "Valid Parentheses",
        "difficulty": 0,
        "pass": 6,
        "answer": "        if len(s) == 0:\n            return True\n        if len(s) % 2!= 0:\n            return False\n        if s[0] == ')' or s[0] == '}' or s[0] == ']':\n            return False\n        stack = []\n        for i in range(len(s)):\n            if s[i] == '(' or s[i] == '{' or s[i] == '[':\n                stack.append(s[i])\n            elif s[i] == ')' or s[i] == '}' or s[i] == ']':\n                if len(stack) == 0:\n                    return False\n                if s[i] == ')' and stack[-1] == '(':\n                    stack.pop()\n                elif s[i] == '}' and stack[-1] == '{':\n                    stack.pop()\n                elif s[i] == ']' and stack[-1] == '[':\n                    stack.pop()\n                else:\n                    return False\n        if len("
    },
    {
        "number": 20,
        "title": "Valid Parentheses",
        "difficulty": 0,
        "pass": 7,
        "answer": "        if len(s) % 2!= 0:\n            return False\n        stack = []\n        for i in range(len(s)):\n            if s[i] == '(' or s[i] == '{' or s[i] == '[':\n                stack.append(s[i])\n            else:\n                if len(stack) == 0:\n                    return False\n                if s[i] == ')' and stack[-1] == '(':\n                    stack.pop()\n                elif s[i] == '}' and stack[-1] == '{':\n                    stack.pop()\n                elif s[i] == ']' and stack[-1] == '[':\n                    stack.pop()\n                else:\n                    return False\n        return len(stack) == 0"
    },
    {
        "number": 20,
        "title": "Valid Parentheses",
        "difficulty": 0,
        "pass": 8,
        "answer": "        if not s:\n            return True\n        if len(s) % 2!= 0:\n            return False\n        stack = []\n        for i in range(len(s)):\n            if s[i] == '(' or s[i] == '[' or s[i] == '{':\n                stack.append(s[i])\n            elif s[i] == ')' or s[i] == ']' or s[i] == '}':\n                if len(stack) == 0:\n                    return False\n                if s[i] == ')' and stack[-1] == '(':\n                    stack.pop()\n                elif s[i] == ']' and stack[-1] == '[':\n                    stack.pop()\n                elif s[i] == '}' and stack[-1] == '{':\n                    stack.pop()\n                else:\n                    return False\n        if len(stack) == 0:\n            return True\n        else:\n            return False"
    },
    {
        "number": 20,
        "title": "Valid Parentheses",
        "difficulty": 0,
        "pass": 9,
        "answer": "        if len(s) == 0:\n            return True\n        if len(s) % 2!= 0:\n            return False\n        stack = []\n        for i in range(len(s)):\n            if s[i] == '(' or s[i] == '[' or s[i] == '{':\n                stack.append(s[i])\n            else:\n                if len(stack) == 0:\n                    return False\n                if s[i] == ')' and stack[-1] == '(':\n                    stack.pop()\n                elif s[i] == ']' and stack[-1] == '[':\n                    stack.pop()\n                elif s[i] == '}' and stack[-1] == '{':\n                    stack.pop()\n                else:\n                    return False\n        if len(stack) == 0:\n            return True\n        else:\n            return False"
    },
    {
        "number": 21,
        "title": "Merge Two Sorted Lists",
        "difficulty": 0,
        "pass": 0,
        "answer": "        if not list1:\n            return list2\n        if not list2:\n            return list1\n        if list1.val < list2.val:\n            list1.next = self.mergeTwoLists(list1.next, list2)\n            return list1\n        else:\n            list2.next = self.mergeTwoLists(list1, list2.next)\n            return list2"
    },
    {
        "number": 21,
        "title": "Merge Two Sorted Lists",
        "difficulty": 0,
        "pass": 1,
        "answer": "        if not list1:\n            return list2\n        if not list2:\n            return list1\n        if list1.val < list2.val:\n            list1.next = self.mergeTwoLists(list1.next, list2)\n            return list1\n        else:\n            list2.next = self.mergeTwoLists(list1, list2.next)\n            return list2"
    },
    {
        "number": 21,
        "title": "Merge Two Sorted Lists",
        "difficulty": 0,
        "pass": 2,
        "answer": "        if not list1:\n            return list2\n        if not list2:\n            return list1\n        \n        if list1.val < list2.val:\n            list1.next = self.mergeTwoLists(list1.next, list2)\n            return list1\n        else:\n            list2.next = self.mergeTwoLists(list1, list2.next)\n            return list2"
    },
    {
        "number": 21,
        "title": "Merge Two Sorted Lists",
        "difficulty": 0,
        "pass": 3,
        "answer": "        if not list1:\n            return list2\n        if not list2:\n            return list1\n        if list1.val < list2.val:\n            list1.next = self.mergeTwoLists(list1.next, list2)\n            return list1\n        else:\n            list2.next = self.mergeTwoLists(list1, list2.next)\n            return list2"
    },
    {
        "number": 21,
        "title": "Merge Two Sorted Lists",
        "difficulty": 0,
        "pass": 4,
        "answer": "        if not list1:\n            return list2\n        if not list2:\n            return list1\n        if list1.val < list2.val:\n            list1.next = self.mergeTwoLists(list1.next, list2)\n            return list1\n        else:\n            list2.next = self.mergeTwoLists(list1, list2.next)\n            return list2"
    },
    {
        "number": 21,
        "title": "Merge Two Sorted Lists",
        "difficulty": 0,
        "pass": 5,
        "answer": "        if not list1:\n            return list2\n        if not list2:\n            return list1\n        if list1.val < list2.val:\n            list1.next = self.mergeTwoLists(list1.next, list2)\n            return list1\n        else:\n            list2.next = self.mergeTwoLists(list1, list2.next)\n            return list2"
    },
    {
        "number": 21,
        "title": "Merge Two Sorted Lists",
        "difficulty": 0,
        "pass": 6,
        "answer": "        if not list1:\n            return list2\n        if not list2:\n            return list1\n        if list1.val < list2.val:\n            list1.next = self.mergeTwoLists(list1.next, list2)\n            return list1\n        else:\n            list2.next = self.mergeTwoLists(list1, list2.next)\n            return list2"
    },
    {
        "number": 21,
        "title": "Merge Two Sorted Lists",
        "difficulty": 0,
        "pass": 7,
        "answer": "        if not list1:\n            return list2\n        if not list2:\n            return list1\n        if list1.val < list2.val:\n            list1.next = self.mergeTwoLists(list1.next, list2)\n            return list1\n        else:\n            list2.next = self.mergeTwoLists(list1, list2.next)\n            return list2"
    },
    {
        "number": 21,
        "title": "Merge Two Sorted Lists",
        "difficulty": 0,
        "pass": 8,
        "answer": "        if not list1:\n            return list2\n        if not list2:\n            return list1\n        if list1.val < list2.val:\n            list1.next = self.mergeTwoLists(list1.next, list2)\n            return list1\n        else:\n            list2.next = self.mergeTwoLists(list1, list2.next)\n            return list2\n"
    },
    {
        "number": 21,
        "title": "Merge Two Sorted Lists",
        "difficulty": 0,
        "pass": 9,
        "answer": "        if not list1:\n            return list2\n        if not list2:\n            return list1\n        if list1.val < list2.val:\n            list1.next = self.mergeTwoLists(list1.next, list2)\n            return list1\n        else:\n            list2.next = self.mergeTwoLists(list1, list2.next)\n            return list2"
    },
    {
        "number": 22,
        "title": "Generate Parentheses",
        "difficulty": 1,
        "pass": 0,
        "answer": "        if n == 0:\n            return []\n        if n == 1:\n            return [\"()\"]\n        res = []\n        self.dfs(n, n, \"\", res)\n        return res"
    },
    {
        "number": 22,
        "title": "Generate Parentheses",
        "difficulty": 1,
        "pass": 1,
        "answer": "        if n == 0:\n            return []\n        if n == 1:\n            return [\"()\"]\n        if n == 2:\n            return [\"(())\", \"()()\"]\n        if n == 3:\n            return [\"((()))\", \"(()())\", \"(())()\", \"()(())\", \"()()()\"]\n        res = []\n        for i in range(n):\n            for j in self.generateParenthesis(i):\n                for k in self.generateParenthesis(n - 1 - i):\n                    res.append(\"(%s)%s\" % (j, k))\n        return res"
    },
    {
        "number": 22,
        "title": "Generate Parentheses",
        "difficulty": 1,
        "pass": 2,
        "answer": "        res = []\n        self.dfs(n, n, \"\", res)\n        return res"
    },
    {
        "number": 22,
        "title": "Generate Parentheses",
        "difficulty": 1,
        "pass": 3,
        "answer": "        if n == 0:\n            return [\"\"]\n        if n == 1:\n            return [\"()\"]\n        res = []\n        self.dfs(n, n, \"\", res)\n        return res"
    },
    {
        "number": 22,
        "title": "Generate Parentheses",
        "difficulty": 1,
        "pass": 4,
        "answer": "        if n == 0:\n            return []\n        if n == 1:\n            return [\"()\"]\n        ans = []\n        self.dfs(n, n, \"\", ans)\n        return ans"
    },
    {
        "number": 22,
        "title": "Generate Parentheses",
        "difficulty": 1,
        "pass": 5,
        "answer": "        if n == 0:\n            return []\n        if n == 1:\n            return [\"()\"]\n        if n == 2:\n            return [\"(())\", \"()()\"]\n        if n == 3:\n            return [\"((()))\", \"(()())\", \"(())()\", \"()(())\", \"()()()\"]\n        if n == 4:\n            return [\"((()))\", \"(()())\", \"(())()\", \"()(())\", \"()()()\",\n                    \"((()))\", \"(()())\", \"(())()\", \"()(())\", \"()()()\",\n                    \"((()))()\", \"(()())()\", \"(())()()\", \"()(())()\", \"()()()()\"]\n        if n == 5:\n            return [\"((()))\", \"(()())\", \"(())()\", \"()(())\", \"()()()\",\n                    \"((()))\", \"(()())\", \"(())()\", \"()(())\", \"()()()\",\n                    \"((()))()\", \"(()())()\", \"(())()()\", \"()(())()\", \"()()()()\","
    },
    {
        "number": 22,
        "title": "Generate Parentheses",
        "difficulty": 1,
        "pass": 6,
        "answer": "        if n == 0:\n            return []\n        if n == 1:\n            return [\"()\"]\n        res = []\n        self.dfs(n, n, \"\", res)\n        return res"
    },
    {
        "number": 22,
        "title": "Generate Parentheses",
        "difficulty": 1,
        "pass": 7,
        "answer": "        if n == 0:\n            return []\n        res = []\n        self.dfs(n, n, \"\", res)\n        return res"
    },
    {
        "number": 22,
        "title": "Generate Parentheses",
        "difficulty": 1,
        "pass": 8,
        "answer": "        if n == 0:\n            return []\n        if n == 1:\n            return [\"()\"]\n        res = []\n        for i in range(n):\n            for left in self.generateParenthesis(i):\n                for right in self.generateParenthesis(n - i - 1):\n                    res.append(\"(%s)%s\" % (left, right))\n        return res"
    },
    {
        "number": 22,
        "title": "Generate Parentheses",
        "difficulty": 1,
        "pass": 9,
        "answer": "        if n == 0:\n            return []\n        if n == 1:\n            return [\"()\"]\n        res = []\n        self.dfs(n, n, \"\", res)\n        return res"
    },
    {
        "number": 23,
        "title": "Merge k Sorted Lists",
        "difficulty": 2,
        "pass": 0,
        "answer": "        if not lists:\n            return None\n        if not lists[0]:\n            return None\n        if len(lists) == 1:\n            return lists[0]\n        mid = len(lists) // 2\n        left = self.mergeKLists(lists[:mid])\n        right = self.mergeKLists(lists[mid:])\n        return self.mergeTwoLists(left, right)"
    },
    {
        "number": 23,
        "title": "Merge k Sorted Lists",
        "difficulty": 2,
        "pass": 1,
        "answer": "        if len(lists) == 0:\n            return None\n        if len(lists) == 1:\n            return lists[0]\n        lists = sorted(lists, key=lambda x: x[0].val)\n        head = ListNode(0)\n        curr = head\n        for i in range(len(lists)):\n            curr.next = lists[i][0]\n            curr = curr.next\n        return head.next"
    },
    {
        "number": 23,
        "title": "Merge k Sorted Lists",
        "difficulty": 2,
        "pass": 2,
        "answer": "        if not lists:\n            return None\n        if len(lists) == 1:\n            return lists[0]\n        if len(lists) == 2:\n            return self.mergeTwoLists(lists[0], lists[1])\n        mid = len(lists) // 2\n        left = self.mergeKLists(lists[:mid])\n        right = self.mergeKLists(lists[mid:])\n        return self.mergeTwoLists(left, right)"
    },
    {
        "number": 23,
        "title": "Merge k Sorted Lists",
        "difficulty": 2,
        "pass": 3,
        "answer": "        if not lists:\n            return None\n        if len(lists) == 1:\n            return lists[0]\n        if len(lists) == 2:\n            return self.merge2Lists(lists[0], lists[1])\n        if len(lists) == 3:\n            return self.merge3Lists(lists[0], lists[1], lists[2])\n        if len(lists) == 4:\n            return self.merge4Lists(lists[0], lists[1], lists[2], lists[3])\n        if len(lists) == 5:\n            return self.merge5Lists(lists[0], lists[1], lists[2], lists[3], lists[4])\n        if len(lists) == 6:\n            return self.merge6Lists(lists[0], lists[1], lists[2], lists[3], lists[4], lists[5])\n        if len(lists) == 7:\n            return self.merge7Lists(lists[0], lists[1], lists[2], lists[3], lists["
    },
    {
        "number": 23,
        "title": "Merge k Sorted Lists",
        "difficulty": 2,
        "pass": 4,
        "answer": "        if len(lists) == 0:\n            return None\n        if len(lists) == 1:\n            return lists[0]\n        if len(lists) == 2:\n            return self.mergeTwoLists(lists[0], lists[1])\n        mid = len(lists) // 2\n        left = self.mergeKLists(lists[:mid])\n        right = self.mergeKLists(lists[mid:])\n        return self.mergeTwoLists(left, right)"
    },
    {
        "number": 23,
        "title": "Merge k Sorted Lists",
        "difficulty": 2,
        "pass": 5,
        "answer": "        if len(lists) == 0:\n            return None\n        if len(lists) == 1:\n            return lists[0]\n        merged = None\n        while len(lists) > 0:\n            merged = self.mergeTwoLists(merged, lists.pop(0))\n        return merged"
    },
    {
        "number": 23,
        "title": "Merge k Sorted Lists",
        "difficulty": 2,
        "pass": 6,
        "answer": "        if len(lists) == 0:\n            return None\n        if len(lists) == 1:\n            return lists[0]\n        i = 0\n        while i < len(lists):\n            if lists[i] == None:\n                lists.pop(i)\n            else:\n                i += 1\n        if len(lists) == 0:\n            return None\n        head = None\n        while len(lists) > 0:\n            if head == None:\n                head = lists.pop(0)\n            else:\n                head = self.mergeTwoLists(head, lists.pop(0))\n        return head"
    },
    {
        "number": 23,
        "title": "Merge k Sorted Lists",
        "difficulty": 2,
        "pass": 7,
        "answer": "        if len(lists) == 0:\n            return None\n        if len(lists) == 1:\n            return lists[0]\n        while len(lists) > 1:\n            lists = self.merge2Lists(lists)\n        return lists[0]"
    },
    {
        "number": 23,
        "title": "Merge k Sorted Lists",
        "difficulty": 2,
        "pass": 8,
        "answer": "        if len(lists) == 0:\n            return None\n        dummy = ListNode(0)\n        curr = dummy\n        heap = []\n        for i in range(len(lists)):\n            if lists[i]:\n                heapq.heappush(heap, (lists[i][0].val, i, lists[i][0]))\n        while heap:\n            val, idx, node = heapq.heappop(heap)\n            curr.next = node\n            curr = curr.next\n            if node.next:\n                heapq.heappush(heap, (node.next.val, idx, node.next))\n        return dummy.next"
    },
    {
        "number": 23,
        "title": "Merge k Sorted Lists",
        "difficulty": 2,
        "pass": 9,
        "answer": "        if len(lists) == 0:\n            return None\n        if len(lists) == 1:\n            return lists[0]\n        if len(lists) == 2:\n            return self.merge2Lists(lists[0], lists[1])\n        if len(lists) == 3:\n            return self.merge3Lists(lists[0], lists[1], lists[2])\n        if len(lists) == 4:\n            return self.merge4Lists(lists[0], lists[1], lists[2], lists[3])\n        if len(lists) == 5:\n            return self.merge5Lists(lists[0], lists[1], lists[2], lists[3], lists[4])\n        if len(lists) == 6:\n            return self.merge6Lists(lists[0], lists[1], lists[2], lists[3], lists[4], lists[5])\n        if len(lists) == 7:\n            return self.merge7Lists(lists[0], lists[1], lists[2], lists["
    },
    {
        "number": 24,
        "title": "Swap Nodes in Pairs",
        "difficulty": 1,
        "pass": 0,
        "answer": "        if not head:\n            return head\n        \n        dummy = ListNode(0)\n        dummy.next = head\n        cur = dummy\n        \n        while cur.next and cur.next.next:\n            first = cur.next\n            second = cur.next.next\n            \n            cur.next = second\n            first.next = second.next\n            second.next = first\n            \n            cur = cur.next.next\n            \n        return dummy.next\n        \n        \n        \nclass Solution:\n    def swapPairs(self, head: Optional[ListNode]) -> Optional[ListNode]:\n        \"\"\"\n        Given a linked list, swap every two adjacent nodes and return its head. You must solve the problem without modifying the values in the list's nodes (i.e., only nodes themselves may be changed.)\n        Example 1:\n        Input: head = [1,2,3,4]\n        Output: [2,1,4,3]\n        Example 2:\n        Input: head = []\n        Output: []\n        Example 3:\n        Input: head = [1"
    },
    {
        "number": 24,
        "title": "Swap Nodes in Pairs",
        "difficulty": 1,
        "pass": 1,
        "answer": "        if not head:\n            return head\n        dummy = ListNode(0)\n        dummy.next = head\n        cur = dummy\n        while cur.next and cur.next.next:\n            first = cur.next\n            second = cur.next.next\n            cur.next = second\n            first.next = second.next\n            second.next = first\n            cur = cur.next.next\n        return dummy.next\n"
    },
    {
        "number": 24,
        "title": "Swap Nodes in Pairs",
        "difficulty": 1,
        "pass": 2,
        "answer": "        if not head:\n            return head\n        dummy = ListNode(0)\n        dummy.next = head\n        cur = dummy\n        while cur.next and cur.next.next:\n            first = cur.next\n            second = cur.next.next\n            cur.next = second\n            first.next = second.next\n            second.next = first\n            cur = cur.next.next\n        return dummy.next"
    },
    {
        "number": 24,
        "title": "Swap Nodes in Pairs",
        "difficulty": 1,
        "pass": 3,
        "answer": "        if not head:\n            return None\n        if not head.next:\n            return head\n        \n        dummy = ListNode(0)\n        dummy.next = head\n        curr = dummy\n        while curr.next and curr.next.next:\n            first = curr.next\n            second = curr.next.next\n            curr.next = second\n            first.next = second.next\n            second.next = first\n            curr = curr.next.next\n        \n        return dummy.next\n        "
    },
    {
        "number": 24,
        "title": "Swap Nodes in Pairs",
        "difficulty": 1,
        "pass": 4,
        "answer": "        if not head:\n            return head\n        \n        dummy = ListNode(0)\n        dummy.next = head\n        \n        cur = dummy\n        while cur.next and cur.next.next:\n            first = cur.next\n            second = cur.next.next\n            \n            cur.next = second\n            first.next = second.next\n            second.next = first\n            \n            cur = cur.next.next\n        \n        return dummy.next\n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n"
    },
    {
        "number": 24,
        "title": "Swap Nodes in Pairs",
        "difficulty": 1,
        "pass": 5,
        "answer": "        if not head:\n            return head\n        dummy = ListNode(0)\n        dummy.next = head\n        cur = dummy\n        while cur.next and cur.next.next:\n            first = cur.next\n            second = cur.next.next\n            cur.next = second\n            first.next = second.next\n            second.next = first\n            cur = cur.next.next\n        return dummy.next"
    },
    {
        "number": 24,
        "title": "Swap Nodes in Pairs",
        "difficulty": 1,
        "pass": 6,
        "answer": "        if not head:\n            return head\n        \n        dummy = ListNode(0)\n        dummy.next = head\n        prev = dummy\n        \n        while prev.next and prev.next.next:\n            a = prev.next\n            b = prev.next.next\n            \n            prev.next = b\n            a.next = b.next\n            b.next = a\n            \n            prev = a\n        \n        return dummy.next\n        \nclass Solution:\n    def swapPairs(self, head: Optional[ListNode]) -> Optional[ListNode]:\n        \"\"\"\n        Given a linked list, swap every two adjacent nodes and return its head. You must solve the problem without modifying the values in the list's nodes (i.e., only nodes themselves may be changed.)\n        Example 1:\n        Input: head = [1,2,3,4]\n        Output: [2,1,4,3]\n        Example 2:\n        Input: head = []\n        Output: []\n        Example 3:\n        Input: head = [1]\n        Output: [1]"
    },
    {
        "number": 24,
        "title": "Swap Nodes in Pairs",
        "difficulty": 1,
        "pass": 7,
        "answer": "        if not head:\n            return head\n        \n        dummy = ListNode(0)\n        dummy.next = head\n        pre = dummy\n        \n        while pre.next and pre.next.next:\n            a = pre.next\n            b = a.next\n            pre.next = b\n            a.next = b.next\n            b.next = a\n            \n            pre = a\n        \n        return dummy.next\n"
    },
    {
        "number": 24,
        "title": "Swap Nodes in Pairs",
        "difficulty": 1,
        "pass": 8,
        "answer": "        if not head:\n            return None\n        \n        dummy = ListNode(0)\n        dummy.next = head\n        \n        prev = dummy\n        curr = head\n        \n        while curr and curr.next:\n            prev.next = curr.next\n            curr.next = prev.next.next\n            prev.next.next = curr\n            \n            prev = prev.next.next\n            curr = curr.next\n            \n        return dummy.next\n        \n        \n#         if not head:\n#             return None\n#         \n#         dummy = ListNode(0)\n#         dummy.next = head\n#         \n#         prev = dummy\n#         curr = head\n#         \n#         while curr and curr.next:\n#             prev.next = curr.next\n#             curr.next = prev.next.next\n#             prev.next.next = curr\n#             \n#             prev = prev.next.next\n#             curr = curr.next\n#             \n#         return"
    },
    {
        "number": 24,
        "title": "Swap Nodes in Pairs",
        "difficulty": 1,
        "pass": 9,
        "answer": "        if not head:\n            return None\n        \n        dummy = ListNode(0)\n        dummy.next = head\n        prev = dummy\n        \n        while prev.next and prev.next.next:\n            first = prev.next\n            second = prev.next.next\n            \n            prev.next = second\n            first.next = second.next\n            second.next = first\n            \n            prev = prev.next.next\n        \n        return dummy.next\n        \n"
    },
    {
        "number": 25,
        "title": "Reverse Nodes in k-Group",
        "difficulty": 2,
        "pass": 0,
        "answer": "        if not head:\n            return None\n        if k == 1:\n            return head\n        dummy = ListNode(0)\n        dummy.next = head\n        pre, cur = dummy, dummy.next\n        while cur:\n            for i in range(k):\n                if not cur:\n                    return dummy.next\n                cur = cur.next\n            next = cur.next\n            cur.next = None\n            pre.next = self.reverseKGroup(next, k)\n            pre = pre.next\n            cur = pre.next\n        return dummy.next"
    },
    {
        "number": 25,
        "title": "Reverse Nodes in k-Group",
        "difficulty": 2,
        "pass": 1,
        "answer": "        if not head:\n            return head\n        dummy = ListNode(0)\n        dummy.next = head\n        pre = dummy\n        while True:\n            count = 0\n            cur = head\n            while count < k and cur:\n                count += 1\n                cur = cur.next\n            if count == k:\n                # reverse\n                cur = dummy\n                while count > 0:\n                    tmp = cur.next\n                    cur.next = tmp.next\n                    tmp.next = pre.next\n                    pre.next = tmp\n                    count -= 1\n                head = dummy.next\n            else:\n                break\n        return dummy.next"
    },
    {
        "number": 25,
        "title": "Reverse Nodes in k-Group",
        "difficulty": 2,
        "pass": 2,
        "answer": "        if not head:\n            return head\n        dummy = ListNode(0)\n        dummy.next = head\n        pre = dummy\n        tail = dummy\n        while True:\n            count = 0\n            while count < k and tail:\n                tail = tail.next\n                count += 1\n            if count == k:\n                cur = pre.next\n                for i in range(k):\n                    tmp = cur.next\n                    cur.next = pre\n                    pre = cur\n                    cur = tmp\n                pre.next = tail\n                tail = pre\n            else:\n                break\n        return dummy.next"
    },
    {
        "number": 25,
        "title": "Reverse Nodes in k-Group",
        "difficulty": 2,
        "pass": 3,
        "answer": "        if not head:\n            return None\n        \n        dummy = ListNode(0)\n        dummy.next = head\n        pre = dummy\n        \n        while True:\n            count = 0\n            cur = dummy\n            while count < k and cur:\n                count += 1\n                cur = cur.next\n            \n            if count == k:\n                cur = dummy\n                while cur:\n                    nxt = cur.next\n                    cur.next = nxt.next\n                    nxt.next = pre.next\n                    pre.next = nxt\n                    cur = cur.next\n                pre = dummy\n            else:\n                break\n        \n        return dummy.next"
    },
    {
        "number": 25,
        "title": "Reverse Nodes in k-Group",
        "difficulty": 2,
        "pass": 4,
        "answer": "        if not head:\n            return None\n        \n        dummy = ListNode(0)\n        dummy.next = head\n        cur = dummy\n        \n        while True:\n            count = 0\n            while count < k and cur.next:\n                count += 1\n                cur = cur.next\n            \n            if count < k:\n                return dummy.next\n            \n            cur.next = cur.next.next\n            cur = cur.next\n            \n            for i in range(k):\n                tmp = cur.next\n                cur.next = tmp.next\n                tmp.next = dummy.next\n                dummy.next = tmp\n            \n            cur = dummy.next\n            \n        return dummy.next\n"
    },
    {
        "number": 25,
        "title": "Reverse Nodes in k-Group",
        "difficulty": 2,
        "pass": 5,
        "answer": "        if not head:\n            return None\n        dummy = ListNode(0)\n        dummy.next = head\n        pre = dummy\n        while True:\n            count = 0\n            cur = pre.next\n            while count < k and cur:\n                count += 1\n                next = cur.next\n                cur.next = pre.next\n                pre.next = cur\n                cur = next\n            if count == k:\n                pre = pre.next\n            else:\n                break\n        return dummy.next"
    },
    {
        "number": 25,
        "title": "Reverse Nodes in k-Group",
        "difficulty": 2,
        "pass": 6,
        "answer": "        if not head:\n            return None\n        \n        dummy = ListNode(0)\n        dummy.next = head\n        \n        pre, cur = dummy, head\n        \n        while True:\n            count = 0\n            while count < k and cur:\n                count += 1\n                cur = cur.next\n            \n            if count == k:\n                cur = self.reverseKGroup(cur, k)\n                \n                for _ in range(k):\n                    pre.next = cur\n                    pre = pre.next\n                    cur = cur.next\n                \n                pre.next = cur\n                return dummy.next\n            \n            pre = pre.next\n            \n            if not cur:\n                break\n            \n            cur = cur.next\n            pre.next = cur\n            pre = pre.next\n            cur = cur.next\n            \n        return dummy.next\n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n"
    },
    {
        "number": 25,
        "title": "Reverse Nodes in k-Group",
        "difficulty": 2,
        "pass": 7,
        "answer": "        dummy = ListNode(0)\n        dummy.next = head\n        pre = dummy\n        while True:\n            count = 0\n            cur = head\n            while count < k and cur:\n                count += 1\n                cur = cur.next\n            if count == k:\n                cur = self.reverse(pre.next, k)\n                pre.next = cur\n                pre = pre.next\n            else:\n                return dummy.next"
    },
    {
        "number": 25,
        "title": "Reverse Nodes in k-Group",
        "difficulty": 2,
        "pass": 8,
        "answer": "        if not head:\n            return None\n        if k == 1:\n            return head\n        dummy = ListNode(0)\n        dummy.next = head\n        cur = dummy\n        while True:\n            count = 0\n            while count < k and cur.next:\n                count += 1\n                cur = cur.next\n            if count == k:\n                cur.next = self.reverseKGroup(cur.next, k)\n            else:\n                cur.next = self.reverseKGroup(cur.next, k)\n                break\n        return dummy.next"
    },
    {
        "number": 25,
        "title": "Reverse Nodes in k-Group",
        "difficulty": 2,
        "pass": 9,
        "answer": "        if not head:\n            return None\n        \n        dummy = ListNode(0)\n        dummy.next = head\n        pre = dummy\n        \n        while True:\n            count = 0\n            cur = head\n            while count < k and cur:\n                count += 1\n                cur = cur.next\n            \n            if count == k:\n                pre.next = self.reverseKGroup(cur, k)\n                while pre.next:\n                    pre = pre.next\n                return dummy.next\n            else:\n                pre.next = self.reverseKGroup(cur, k)\n                while pre.next:\n                    pre = pre.next\n                pre.next = cur\n"
    },
    {
        "number": 26,
        "title": "Remove Duplicates from Sorted Array",
        "difficulty": 0,
        "pass": 0,
        "answer": "        if len(nums) == 0:\n            return 0\n        i = 0\n        for j in range(1, len(nums)):\n            if nums[i]!= nums[j]:\n                i += 1\n                nums[i] = nums[j]\n        return i + 1"
    },
    {
        "number": 26,
        "title": "Remove Duplicates from Sorted Array",
        "difficulty": 0,
        "pass": 1,
        "answer": "        i = 0\n        for j in range(1, len(nums)):\n            if nums[i]!= nums[j]:\n                i += 1\n                nums[i] = nums[j]\n        return i + 1"
    },
    {
        "number": 26,
        "title": "Remove Duplicates from Sorted Array",
        "difficulty": 0,
        "pass": 2,
        "answer": "        i = 0\n        for j in range(1, len(nums)):\n            if nums[i]!= nums[j]:\n                i += 1\n                nums[i] = nums[j]\n        return i + 1"
    },
    {
        "number": 26,
        "title": "Remove Duplicates from Sorted Array",
        "difficulty": 0,
        "pass": 3,
        "answer": "        if len(nums) == 0:\n            return 0\n        i = 0\n        for j in range(1, len(nums)):\n            if nums[j]!= nums[i]:\n                i += 1\n                nums[i] = nums[j]\n        return i + 1"
    },
    {
        "number": 26,
        "title": "Remove Duplicates from Sorted Array",
        "difficulty": 0,
        "pass": 4,
        "answer": "        i = 0\n        for j in range(1, len(nums)):\n            if nums[j]!= nums[i]:\n                i += 1\n                nums[i] = nums[j]\n        return i + 1"
    },
    {
        "number": 26,
        "title": "Remove Duplicates from Sorted Array",
        "difficulty": 0,
        "pass": 5,
        "answer": "        i = 0\n        for j in range(len(nums)):\n            if nums[i]!= nums[j]:\n                i += 1\n                nums[i] = nums[j]\n        return i + 1"
    },
    {
        "number": 26,
        "title": "Remove Duplicates from Sorted Array",
        "difficulty": 0,
        "pass": 6,
        "answer": "        if len(nums) == 0:\n            return 0\n        i = 0\n        for j in range(1, len(nums)):\n            if nums[i]!= nums[j]:\n                i += 1\n                nums[i] = nums[j]\n        return i + 1"
    },
    {
        "number": 26,
        "title": "Remove Duplicates from Sorted Array",
        "difficulty": 0,
        "pass": 7,
        "answer": "        i = 0\n        for j in range(1, len(nums)):\n            if nums[i]!= nums[j]:\n                i += 1\n                nums[i] = nums[j]\n        return i + 1"
    },
    {
        "number": 26,
        "title": "Remove Duplicates from Sorted Array",
        "difficulty": 0,
        "pass": 8,
        "answer": "        i = 0\n        for j in range(1, len(nums)):\n            if nums[i]!= nums[j]:\n                i += 1\n                nums[i] = nums[j]\n        return i + 1"
    },
    {
        "number": 26,
        "title": "Remove Duplicates from Sorted Array",
        "difficulty": 0,
        "pass": 9,
        "answer": "        if len(nums) == 0:\n            return 0\n        i = 0\n        for j in range(1, len(nums)):\n            if nums[i]!= nums[j]:\n                i += 1\n                nums[i] = nums[j]\n        return i + 1"
    },
    {
        "number": 27,
        "title": "Remove Element",
        "difficulty": 0,
        "pass": 0,
        "answer": "        if not nums:\n            return 0\n        i = 0\n        for j in range(len(nums)):\n            if nums[j]!= val:\n                nums[i] = nums[j]\n                i += 1\n        return i"
    },
    {
        "number": 27,
        "title": "Remove Element",
        "difficulty": 0,
        "pass": 1,
        "answer": "        i = 0\n        for j in range(len(nums)):\n            if nums[j]!= val:\n                nums[i] = nums[j]\n                i += 1\n        return i"
    },
    {
        "number": 27,
        "title": "Remove Element",
        "difficulty": 0,
        "pass": 2,
        "answer": "        i = 0\n        for j in range(len(nums)):\n            if nums[j]!= val:\n                nums[i] = nums[j]\n                i += 1\n        return i"
    },
    {
        "number": 27,
        "title": "Remove Element",
        "difficulty": 0,
        "pass": 3,
        "answer": "        i = 0\n        for j in range(len(nums)):\n            if nums[j]!= val:\n                nums[i] = nums[j]\n                i += 1\n        return i"
    },
    {
        "number": 27,
        "title": "Remove Element",
        "difficulty": 0,
        "pass": 4,
        "answer": "        i = 0\n        for j in range(len(nums)):\n            if nums[j]!= val:\n                nums[i] = nums[j]\n                i += 1\n        return i"
    },
    {
        "number": 27,
        "title": "Remove Element",
        "difficulty": 0,
        "pass": 5,
        "answer": "        if len(nums) == 0:\n            return 0\n        i, j = 0, 0\n        while j < len(nums):\n            if nums[j]!= val:\n                nums[i] = nums[j]\n                i += 1\n            j += 1\n        return i"
    },
    {
        "number": 27,
        "title": "Remove Element",
        "difficulty": 0,
        "pass": 6,
        "answer": "        i = 0\n        for j in range(len(nums)):\n            if nums[j]!= val:\n                nums[i] = nums[j]\n                i += 1\n        return i"
    },
    {
        "number": 27,
        "title": "Remove Element",
        "difficulty": 0,
        "pass": 7,
        "answer": "        i = 0\n        for j in range(len(nums)):\n            if nums[j]!= val:\n                nums[i] = nums[j]\n                i += 1\n        return i"
    },
    {
        "number": 27,
        "title": "Remove Element",
        "difficulty": 0,
        "pass": 8,
        "answer": "        i = 0\n        for j in range(len(nums)):\n            if nums[j]!= val:\n                nums[i] = nums[j]\n                i += 1\n        return i"
    },
    {
        "number": 27,
        "title": "Remove Element",
        "difficulty": 0,
        "pass": 9,
        "answer": "        i = 0\n        for j in range(len(nums)):\n            if nums[j]!= val:\n                nums[i] = nums[j]\n                i += 1\n        return i"
    },
    {
        "number": 28,
        "title": "Find the Index of the First Occurrence in a String",
        "difficulty": 0,
        "pass": 0,
        "answer": "        if needle == \"\":\n            return 0\n        if needle in haystack:\n            return haystack.index(needle)\n        else:\n            return -1"
    },
    {
        "number": 28,
        "title": "Find the Index of the First Occurrence in a String",
        "difficulty": 0,
        "pass": 1,
        "answer": "        if needle == \"\":\n            return 0\n        if needle not in haystack:\n            return -1\n        else:\n            return haystack.index(needle)"
    },
    {
        "number": 28,
        "title": "Find the Index of the First Occurrence in a String",
        "difficulty": 0,
        "pass": 2,
        "answer": "        if len(needle) == 0:\n            return 0\n        if len(needle) > len(haystack):\n            return -1\n        for i in range(len(haystack) - len(needle) + 1):\n            if haystack[i:i+len(needle)] == needle:\n                return i\n        return -1"
    },
    {
        "number": 28,
        "title": "Find the Index of the First Occurrence in a String",
        "difficulty": 0,
        "pass": 3,
        "answer": "        if not needle:\n            return 0\n        if not haystack:\n            return -1\n        for i in range(len(haystack) - len(needle) + 1):\n            if haystack[i:i+len(needle)] == needle:\n                return i\n        return -1"
    },
    {
        "number": 28,
        "title": "Find the Index of the First Occurrence in a String",
        "difficulty": 0,
        "pass": 4,
        "answer": "        if needle == \"\":\n            return 0\n        if needle in haystack:\n            return haystack.index(needle)\n        else:\n            return -1"
    },
    {
        "number": 28,
        "title": "Find the Index of the First Occurrence in a String",
        "difficulty": 0,
        "pass": 5,
        "answer": "        if len(needle) == 0:\n            return 0\n        if len(needle) > len(haystack):\n            return -1\n        for i in range(len(haystack) - len(needle) + 1):\n            if haystack[i:i + len(needle)] == needle:\n                return i\n        return -1"
    },
    {
        "number": 28,
        "title": "Find the Index of the First Occurrence in a String",
        "difficulty": 0,
        "pass": 6,
        "answer": "        if len(needle) == 0:\n            return 0\n        if len(needle) > len(haystack):\n            return -1\n        for i in range(len(haystack) - len(needle) + 1):\n            if haystack[i:i+len(needle)] == needle:\n                return i\n        return -1"
    },
    {
        "number": 28,
        "title": "Find the Index of the First Occurrence in a String",
        "difficulty": 0,
        "pass": 7,
        "answer": "        if needle == \"\":\n            return 0\n        if needle not in haystack:\n            return -1\n        for i in range(len(haystack)):\n            if haystack[i:i+len(needle)] == needle:\n                return i\n        return -1"
    },
    {
        "number": 28,
        "title": "Find the Index of the First Occurrence in a String",
        "difficulty": 0,
        "pass": 8,
        "answer": "        if needle not in haystack:\n            return -1\n        else:\n            return haystack.index(needle)"
    },
    {
        "number": 28,
        "title": "Find the Index of the First Occurrence in a String",
        "difficulty": 0,
        "pass": 9,
        "answer": "        if len(needle) == 0:\n            return 0\n        if len(needle) > len(haystack):\n            return -1"
    },
    {
        "number": 29,
        "title": "Divide Two Integers",
        "difficulty": 1,
        "pass": 0,
        "answer": "        if dividend == 0:\n            return 0\n        if divisor == 1:\n            return dividend\n        if dividend == -2147483648 and divisor == -1:\n            return 2147483647\n        if dividend == 2147483647 and divisor == -1:\n            return -2147483648\n        if dividend == -2147483648 and divisor == 1:\n            return 2147483647\n        if dividend == 2147483647 and divisor == 1:\n            return -2147483648\n        if dividend == -2147483648 and divisor == -2147483648:\n            return 2147483647\n        if dividend == 2147483647 and divisor == -2147483648:\n            return -2147483648\n        if dividend == -2147483648 and divisor == 2147483648:\n            return 2147483647\n        if dividend == 2147483647 and divisor == 2147483648:\n            return -214748364"
    },
    {
        "number": 29,
        "title": "Divide Two Integers",
        "difficulty": 1,
        "pass": 1,
        "answer": "        if dividend == 0:\n            return 0\n        if dividend == -2147483648 and divisor == -1:\n            return 2147483647\n        if dividend == -2147483648 and divisor == 1:\n            return -2147483648\n        if dividend == 2147483647 and divisor == -1:\n            return 2147483648\n        if dividend == 2147483647 and divisor == 1:\n            return 2147483647\n        if dividend == -2147483648 and divisor == -1:\n            return -2147483648\n        if dividend == -2147483648 and divisor == 1:\n            return -2147483648\n        if dividend == 2147483647 and divisor == -1:\n            return -2147483648\n        if dividend == 2147483647 and divisor == 1:\n            return 2147483647\n        if dividend == -2147483648 and divisor == -1:\n            return 2147483648\n"
    },
    {
        "number": 29,
        "title": "Divide Two Integers",
        "difficulty": 1,
        "pass": 2,
        "answer": "        if dividend == 0:\n            return 0\n        if divisor == 0:\n            return None\n        if dividend == -2147483648 and divisor == -1:\n            return 2147483647\n        if dividend == -2147483648 and divisor == 1:\n            return -2147483648\n        if dividend == 2147483647 and divisor == 1:\n            return 2147483647\n        if dividend == 2147483647 and divisor == -1:\n            return -2147483648\n        if dividend == -2147483648 and divisor == -1:\n            return 2147483647\n        if dividend == -2147483648 and divisor == 1:\n            return -2147483648\n        if dividend == 2147483647 and divisor == -1:\n            return 2147483647\n        if dividend == 2147483647 and divisor == 1:\n            return 2147483647\n        if dividend == -2147483648 and divisor =="
    },
    {
        "number": 29,
        "title": "Divide Two Integers",
        "difficulty": 1,
        "pass": 3,
        "answer": "        if dividend == 0:\n            return 0\n        if divisor == 0:\n            return None\n        if dividend == -2147483648 and divisor == -1:\n            return 2147483647\n        if dividend == -2147483648 and divisor == 1:\n            return -2147483648\n        if dividend == 2147483647 and divisor == -1:\n            return 2147483648\n        if dividend == 2147483647 and divisor == 1:\n            return 2147483647\n        if dividend == -2147483648 and divisor == -2147483648:\n            return -2147483648\n        if dividend == 2147483647 and divisor == -2147483648:\n            return 2147483647\n        if dividend == -2147483648 and divisor == 2147483647:\n            return 2147483647\n        if dividend == 2147483647 and divisor == 2147483647:\n            return 2147483647\n"
    },
    {
        "number": 29,
        "title": "Divide Two Integers",
        "difficulty": 1,
        "pass": 4,
        "answer": "        if dividend == -2147483648 and divisor == -1:\n            return 2147483647\n        if dividend == 2147483648 and divisor == -1:\n            return -2147483648\n        if dividend == -2147483648 and divisor == 1:\n            return 2147483647\n        if dividend == -2147483648 and divisor == 1:\n            return -2147483648\n        if dividend == 2147483647 and divisor == 1:\n            return 2147483647\n        if dividend == -2147483647 and divisor == 1:\n            return -2147483647\n        if dividend == 2147483647 and divisor == -1:\n            return -2147483648\n        if dividend == -2147483647 and divisor == -1:\n            return 2147483648\n        if divisor == 0:\n            return 0\n        if divisor == 1:\n            return dividend\n        if divisor == -1:\n            "
    },
    {
        "number": 29,
        "title": "Divide Two Integers",
        "difficulty": 1,
        "pass": 5,
        "answer": "        if dividend == 0:\n            return 0\n        if divisor == 0:\n            return None\n        if dividend == -2147483648 and divisor == -1:\n            return -2147483648\n        if dividend == -2147483648 and divisor == 1:\n            return 2147483647\n        if dividend == -2147483648 and divisor == -2147483648:\n            return -2147483648\n        if dividend == 2147483647 and divisor == 1:\n            return 2147483647\n        if dividend == 2147483647 and divisor == -1:\n            return -2147483648\n        if dividend == 2147483647 and divisor == -2147483648:\n            return 2147483647\n        if dividend == -2147483648 and divisor == 2147483647:\n            return -2147483648\n        if dividend == -2147483648 and divisor == -2147483648:\n            return 2147"
    },
    {
        "number": 29,
        "title": "Divide Two Integers",
        "difficulty": 1,
        "pass": 6,
        "answer": "        if dividend == -2147483648 and divisor == -1:\n            return 2147483647\n        if dividend == 2147483647 and divisor == -1:\n            return -2147483648\n        if dividend == -2147483648 and divisor == 1:\n            return 2147483647\n        if dividend == 2147483647 and divisor == 1:\n            return -2147483648\n        if dividend == -2147483648 and divisor == -1:\n            return 2147483647\n        if dividend == 2147483647 and divisor == -1:\n            return -2147483648\n        if dividend == -2147483648 and divisor == 1:\n            return 2147483647\n        if dividend == 2147483647 and divisor == 1:\n            return -2147483648\n        if dividend == -2147483648 and divisor == -1:\n            return 2147483647\n        if dividend == 2147483647 and div"
    },
    {
        "number": 29,
        "title": "Divide Two Integers",
        "difficulty": 1,
        "pass": 7,
        "answer": "        MAX_INT = 2147483647\n        MIN_INT = -2147483648\n        if dividend == MIN_INT and divisor == -1:\n            return MAX_INT\n        if dividend == MAX_INT and divisor == -1:\n            return MIN_INT\n        if dividend == MIN_INT and divisor == 1:\n            return MIN_INT\n        if dividend == MAX_INT and divisor == 1:\n            return MAX_INT\n        if dividend == 0:\n            return 0\n        if divisor == 0:\n            return MAX_INT\n        if divisor == 1:\n            return dividend\n        if divisor == -1:\n            return MAX_INT if dividend > 0 else MIN_INT\n        if divisor == -2:\n            if dividend > 0:\n                return MAX_INT\n            else:\n                return MIN_INT\n        if divisor == -3:\n            if dividend > 0:\n                return MAX_INT\n            else:\n                return MIN_INT\n        if divisor == -4:\n            if"
    },
    {
        "number": 29,
        "title": "Divide Two Integers",
        "difficulty": 1,
        "pass": 8,
        "answer": "        if dividend == 0:\n            return 0\n        if divisor == 0:\n            return 0\n        if dividend == -2147483648 and divisor == -1:\n            return 2147483647\n        if dividend == -2147483648 and divisor == 1:\n            return -2147483648\n        if dividend == 2147483647 and divisor == -1:\n            return 2147483648\n        if dividend == 2147483647 and divisor == 1:\n            return 2147483647\n        if dividend == -2147483648 and divisor == -2147483648:\n            return -2147483648\n        if dividend == 2147483647 and divisor == -2147483648:\n            return 2147483647\n        if dividend == -2147483648 and divisor == 2147483647:\n            return 2147483647\n        if dividend == 2147483647 and divisor == 2147483647:\n            return 2147483647\n"
    },
    {
        "number": 29,
        "title": "Divide Two Integers",
        "difficulty": 1,
        "pass": 9,
        "answer": "        if dividend == 0:\n            return 0\n        if divisor == 0:\n            return None\n        if dividend == -2147483648 and divisor == -1:\n            return 2147483647\n        if dividend == -2147483648 and divisor == 1:\n            return -2147483648\n        if dividend == 2147483647 and divisor == -1:\n            return 2147483648\n        if dividend == 2147483647 and divisor == 1:\n            return 2147483647\n        if divisor == 1:\n            return dividend\n        if divisor == -1:\n            return -dividend\n        if dividend == -2147483648 and divisor == -1:\n            return 2147483647\n        if dividend == -2147483648 and divisor == 1:\n            return -2147483648\n        if dividend == 2147483647 and divisor == -1:\n            return 2147483647\n        if dividend == 2147483647 and div"
    },
    {
        "number": 30,
        "title": "Substring with Concatenation of All Words",
        "difficulty": 2,
        "pass": 0,
        "answer": "        if not s or not words:\n            return []\n        \n        n = len(words)\n        m = len(words[0])\n        \n        res = []\n        for i in range(len(s)-m*n+1):\n            for j in range(n):\n                if s[i:i+m] not in words:\n                    break\n            else:\n                res.append(i)\n        \n        return res"
    },
    {
        "number": 30,
        "title": "Substring with Concatenation of All Words",
        "difficulty": 2,
        "pass": 1,
        "answer": "        if len(words) == 0:\n            return []\n        if len(words) == 1:\n            if len(words[0]) == 0:\n                return []\n            return [i for i in range(len(s)) if s[i:i+len(words[0])] == words[0]]\n        \n        words_set = set(words)\n        words_len = len(words)\n        words_set_len = len(words_set)\n        if words_set_len == 1:\n            return [i for i in range(len(s)) if s[i:i+len(words[0])] == words[0]]\n        \n        words_dict = {}\n        for word in words:\n            if word not in words_dict:\n                words_dict[word] = 1\n            else:\n                words_dict[word] += 1\n        \n        words_set_dict = {}\n        for word in words_set:\n            if word not in words_set_dict:\n                words_set_dict[word] = 1\n            else:"
    },
    {
        "number": 30,
        "title": "Substring with Concatenation of All Words",
        "difficulty": 2,
        "pass": 2,
        "answer": "        if not s or not words:\n            return []\n        \n        word_len = len(words[0])\n        word_count = len(words)\n        \n        if word_len * word_count!= len(s):\n            return []\n        \n        word_dict = {}\n        \n        for word in words:\n            if word not in word_dict:\n                word_dict[word] = 1\n            else:\n                word_dict[word] += 1\n        \n        res = []\n        \n        for i in range(len(s) - word_len * word_count + 1):\n            cur_word = s[i:i+word_len]\n            if cur_word in word_dict:\n                if word_dict[cur_word] == 1:\n                    del word_dict[cur_word]\n                else:\n                    word_dict[cur_word] -= 1\n            \n            if len(word_dict) == 0:\n                res.append(i)\n        \n        return res"
    },
    {
        "number": 30,
        "title": "Substring with Concatenation of All Words",
        "difficulty": 2,
        "pass": 3,
        "answer": "        if not s or not words:\n            return []\n        if len(words) == 1:\n            return [i for i in range(len(s)) if s.startswith(words[0])]\n        if len(words) > len(s):\n            return []\n        \n        word_dict = {}\n        for word in words:\n            if word not in word_dict:\n                word_dict[word] = 1\n            else:\n                word_dict[word] += 1\n        \n        word_dict = sorted(word_dict.items(), key=lambda x:x[1], reverse=True)\n        word_dict = dict(word_dict)\n        \n        res = []\n        for i in range(len(s)):\n            if s[i] in word_dict:\n                word_dict[s[i]] -= 1\n                if word_dict[s[i]] == 0:\n                    del word_dict[s[i]]\n                if len(word_dict) == 0:\n                    res.append(i)\n            if len(word_"
    },
    {
        "number": 30,
        "title": "Substring with Concatenation of All Words",
        "difficulty": 2,
        "pass": 4,
        "answer": "        if len(words) == 0:\n            return []\n        if len(words) == 1:\n            return [i for i in range(len(s)) if s[i:i+len(words[0])] == words[0]]\n        if len(words) == 2:\n            return [i for i in range(len(s)-len(words[0])+1) if s[i:i+len(words[0])] == words[0] and s[i+len(words[0]):i+len(words[0])+len(words[1])] == words[1]]\n        if len(words) == 3:\n            return [i for i in range(len(s)-len(words[0])+1) if s[i:i+len(words[0])] == words[0] and s[i+len(words[0]):i+len(words[0])+len(words[1])] == words[1] and s[i+len(words[0])+len(words[1]):i+len(words"
    },
    {
        "number": 30,
        "title": "Substring with Concatenation of All Words",
        "difficulty": 2,
        "pass": 5,
        "answer": "        if not s or not words:\n            return []\n        \n        s_len = len(s)\n        word_len = len(words[0])\n        \n        if word_len * len(words) > s_len:\n            return []\n        \n        res = []\n        for i in range(s_len - word_len * len(words) + 1):\n            for j in range(i, i + word_len * len(words), word_len):\n                if s[j:j+word_len] not in words:\n                    break\n            else:\n                res.append(i)\n        \n        return res"
    },
    {
        "number": 30,
        "title": "Substring with Concatenation of All Words",
        "difficulty": 2,
        "pass": 6,
        "answer": "        if len(words) == 0:\n            return []\n        if len(words) == 1:\n            return [i for i in range(len(s)) if s[i:i+len(words[0])] == words[0]]\n        if len(words) == 2:\n            return [i for i in range(len(s)) if s[i:i+len(words[0])] == words[0] and s[i+len(words[0]):i+2*len(words[0])] == words[1]]\n        if len(words) == 3:\n            return [i for i in range(len(s)) if s[i:i+len(words[0])] == words[0] and s[i+len(words[0]):i+2*len(words[0])] == words[1] and s[i+2*len(words[0]):i+3*len(words[0])] == words[2]]\n        if len(words) == 4:\n            return [i for i in range(len("
    },
    {
        "number": 30,
        "title": "Substring with Concatenation of All Words",
        "difficulty": 2,
        "pass": 7,
        "answer": "        if not s or not words:\n            return []\n        \n        words_dict = {}\n        for word in words:\n            if word in words_dict:\n                words_dict[word] += 1\n            else:\n                words_dict[word] = 1\n        \n        words_len = len(words)\n        word_len = len(words[0])\n        \n        res = []\n        \n        for i in range(len(s) - words_len * word_len + 1):\n            word_dict = {}\n            for j in range(i, i + words_len * word_len, word_len):\n                word = s[j:j+word_len]\n                if word in words_dict:\n                    if word in word_dict:\n                        word_dict[word] += 1\n                    else:\n                        word_dict[word] = 1\n            \n            if word_dict == words_dict:\n                res.append(i)\n        \n        return res"
    },
    {
        "number": 30,
        "title": "Substring with Concatenation of All Words",
        "difficulty": 2,
        "pass": 8,
        "answer": "        if not s or not words:\n            return []\n        if len(words) == 1:\n            return [i for i in range(len(s)) if s.startswith(words[0] * len(s))]\n        \n        word_len = len(words[0])\n        word_count = len(words)\n        \n        res = []\n        for i in range(word_len):\n            for j in range(i, len(s) - word_len + 1, word_len):\n                word = s[j:j+word_len]\n                if word in words:\n                    res.append(j)\n        return res"
    },
    {
        "number": 30,
        "title": "Substring with Concatenation of All Words",
        "difficulty": 2,
        "pass": 9,
        "answer": "        if len(words) == 0:\n            return []\n        if len(words) == 1:\n            return [i for i in range(len(s)) if s[i:i+len(words[0])] == words[0]]\n        if len(words) == 2:\n            return [i for i in range(len(s)) if s[i:i+len(words[0])] == words[0] and s[i+len(words[0]):i+2*len(words[0])] == words[1]]\n        if len(words) == 3:\n            return [i for i in range(len(s)) if s[i:i+len(words[0])] == words[0] and s[i+len(words[0]):i+2*len(words[0])] == words[1] and s[i+2*len(words[0]):i+3*len(words[0])] == words[2]]\n        if len(words) == 4:\n            return [i for i in range(len("
    },
    {
        "number": 31,
        "title": "Next Permutation",
        "difficulty": 1,
        "pass": 0,
        "answer": "        n = len(nums)\n        if n <= 1:\n            return nums\n        i = n - 2\n        while i >= 0 and nums[i] >= nums[i + 1]:\n            i -= 1\n        if i >= 0:\n            j = n - 1\n            while j >= 0 and nums[j] <= nums[i]:\n                j -= 1\n            nums[i], nums[j] = nums[j], nums[i]\n        left, right = i + 1, n - 1\n        while left < right:\n            nums[left], nums[right] = nums[right], nums[left]\n            left += 1\n            right -= 1\n        return nums"
    },
    {
        "number": 31,
        "title": "Next Permutation",
        "difficulty": 1,
        "pass": 1,
        "answer": "        if len(nums) == 1:\n            return nums"
    },
    {
        "number": 31,
        "title": "Next Permutation",
        "difficulty": 1,
        "pass": 2,
        "answer": "        n = len(nums)\n        i = n - 1\n        while i > 0 and nums[i - 1] >= nums[i]:\n            i -= 1\n        if i == 0:\n            nums.reverse()\n            return\n        j = n - 1\n        while j > i - 1 and nums[j] <= nums[i - 1]:\n            j -= 1\n        nums[i - 1], nums[j] = nums[j], nums[i - 1]\n        l, r = i, n - 1\n        while l < r:\n            nums[l], nums[r] = nums[r], nums[l]\n            l += 1\n            r -= 1"
    },
    {
        "number": 31,
        "title": "Next Permutation",
        "difficulty": 1,
        "pass": 3,
        "answer": "        if len(nums) <= 1:\n            return nums\n        i = len(nums) - 2\n        while i >= 0 and nums[i] >= nums[i + 1]:\n            i -= 1\n        if i >= 0:\n            j = len(nums) - 1\n            while j >= 0 and nums[j] <= nums[i]:\n                j -= 1\n            nums[i], nums[j] = nums[j], nums[i]\n        start = i + 1\n        end = len(nums) - 1\n        while start < end:\n            nums[start], nums[end] = nums[end], nums[start]\n            start += 1\n            end -= 1\n        return nums"
    },
    {
        "number": 31,
        "title": "Next Permutation",
        "difficulty": 1,
        "pass": 4,
        "answer": "        if not nums:\n            return nums\n        \n        n = len(nums)\n        i = n - 1\n        while i > 0 and nums[i - 1] >= nums[i]:\n            i -= 1\n        \n        if i == 0:\n            nums.reverse()\n            return nums\n        \n        j = n - 1\n        while nums[j] <= nums[i - 1]:\n            j -= 1\n        \n        nums[i - 1], nums[j] = nums[j], nums[i - 1]\n        \n        l, r = i, n - 1\n        \n        while l < r:\n            nums[l], nums[r] = nums[r], nums[l]\n            l += 1\n            r -= 1\n        \n        return nums"
    },
    {
        "number": 31,
        "title": "Next Permutation",
        "difficulty": 1,
        "pass": 5,
        "answer": "        n = len(nums)\n        if n == 1:\n            return nums\n        \n        i = n - 2\n        while i >= 0 and nums[i] >= nums[i+1]:\n            i -= 1\n        \n        if i >= 0:\n            j = n - 1\n            while j >= 0 and nums[j] <= nums[i]:\n                j -= 1\n            nums[i], nums[j] = nums[j], nums[i]\n        \n        i += 1\n        j = n - 1\n        while i < j:\n            nums[i], nums[j] = nums[j], nums[i]\n            i += 1\n            j -= 1\n        \n        return nums"
    },
    {
        "number": 31,
        "title": "Next Permutation",
        "difficulty": 1,
        "pass": 6,
        "answer": "        n = len(nums)\n        i = n - 1\n        while i > 0 and nums[i - 1] >= nums[i]:\n            i -= 1\n        if i == 0:\n            nums.reverse()\n            return\n        j = n - 1\n        while j > i - 1 and nums[j] <= nums[i - 1]:\n            j -= 1\n        nums[i - 1], nums[j] = nums[j], nums[i - 1]\n        l, r = i, n - 1\n        while l < r:\n            nums[l], nums[r] = nums[r], nums[l]\n            l += 1\n            r -= 1"
    },
    {
        "number": 31,
        "title": "Next Permutation",
        "difficulty": 1,
        "pass": 7,
        "answer": "        n = len(nums)\n        i = n - 1\n        while i > 0 and nums[i - 1] >= nums[i]:\n            i -= 1\n        if i == 0:\n            nums.reverse()\n            return\n        j = n - 1\n        while j > i - 1 and nums[j] <= nums[i - 1]:\n            j -= 1\n        nums[i - 1], nums[j] = nums[j], nums[i - 1]\n        l, r = i, n - 1\n        while l < r:\n            nums[l], nums[r] = nums[r], nums[l]\n            l += 1\n            r -= 1"
    },
    {
        "number": 31,
        "title": "Next Permutation",
        "difficulty": 1,
        "pass": 8,
        "answer": "        for i in range(len(nums)-2, -1, -1):\n            if nums[i] < nums[i+1]:\n                break\n        else:\n            nums.reverse()\n            return\n        for j in range(len(nums)-1, i, -1):\n            if nums[i] < nums[j]:\n                nums[i], nums[j] = nums[j], nums[i]\n                break\n        for k in range(i+1, len(nums)):\n            if nums[k] > nums[i]:\n                nums[k], nums[i] = nums[i], nums[k]\n                break\n        return nums"
    },
    {
        "number": 31,
        "title": "Next Permutation",
        "difficulty": 1,
        "pass": 9,
        "answer": "        n = len(nums)\n        if n == 1:\n            return nums\n        i = n - 2\n        while i >= 0 and nums[i] >= nums[i + 1]:\n            i -= 1\n        if i >= 0:\n            j = n - 1\n            while j >= 0 and nums[j] <= nums[i]:\n                j -= 1\n            nums[i], nums[j] = nums[j], nums[i]\n        start = i + 1\n        end = n - 1\n        while start < end:\n            nums[start], nums[end] = nums[end], nums[start]\n            start += 1\n            end -= 1\n        return nums"
    },
    {
        "number": 32,
        "title": "Longest Valid Parentheses",
        "difficulty": 2,
        "pass": 0,
        "answer": "        if len(s) == 0:\n            return 0\n        if len(s) == 1:\n            return 0\n        if len(s) == 2:\n            if s[0] == ')' and s[1] == '(':\n                return 2\n            else:\n                return 0\n        if len(s) == 3:\n            if s[0] == ')' and s[1] == '(' and s[2] == ')':\n                return 3\n            else:\n                return 0\n        if len(s) == 4:\n            if s[0] == ')' and s[1] == '(' and s[2] == ')' and s[3] == '(':\n                return 4\n            else:\n                return 0\n        if len(s) == 5:\n            if s[0] == ')' and s[1] == '(' and s[2] == ')' and s[3] == '(' and s[4] == ')':\n                return 5\n            else:\n                return 0\n        if len(s) == 6:\n            if"
    },
    {
        "number": 32,
        "title": "Longest Valid Parentheses",
        "difficulty": 2,
        "pass": 1,
        "answer": "        if len(s) == 0:\n            return 0\n        if len(s) == 1:\n            return 1\n        if len(s) == 2:\n            if s[0] == ')' and s[1] == ')':\n                return 2\n            else:\n                return 0\n        if len(s) == 3:\n            if s[0] == ')' and s[1] == ')' and s[2] == ')':\n                return 3\n            else:\n                return 0\n        if len(s) == 4:\n            if s[0] == ')' and s[1] == ')' and s[2] == ')' and s[3] == ')':\n                return 4\n            else:\n                return 0\n        if len(s) == 5:\n            if s[0] == ')' and s[1] == ')' and s[2] == ')' and s[3] == ')' and s[4] == ')':\n                return 5\n            else:\n                return 0\n        if len(s) == 6:\n"
    },
    {
        "number": 32,
        "title": "Longest Valid Parentheses",
        "difficulty": 2,
        "pass": 2,
        "answer": "        if len(s) == 0:\n            return 0\n        if len(s) == 1:\n            return 0\n        if len(s) == 2:\n            if s[0] == ')' and s[1] == ')':\n                return 2\n            else:\n                return 0\n        dp = [0] * len(s)\n        dp[0] = 0\n        dp[1] = 0\n        for i in range(2, len(s)):\n            if s[i] == ')':\n                if s[i - 1] == '(':\n                    dp[i] = dp[i - 2] + 2\n                elif s[i - 1] == ')' and i - dp[i - 1] - 1 >= 0 and s[i - dp[i - 1] - 1] == '(':\n                    dp[i] = dp[i - 1] + dp[i - dp[i - 1] - 2] + 2\n                else:\n                    dp[i] = 0\n            else:\n                dp[i] = 0"
    },
    {
        "number": 32,
        "title": "Longest Valid Parentheses",
        "difficulty": 2,
        "pass": 3,
        "answer": "        n = len(s)\n        if n == 0:\n            return 0\n        dp = [0] * n\n        for i in range(1, n):\n            if s[i] == ')':\n                if s[i - 1] == '(':\n                    dp[i] = dp[i - 2] + 2\n                elif s[i - 1] == ')' and i - dp[i - 1] - 1 >= 0 and s[i - dp[i - 1] - 1] == '(':\n                    dp[i] = dp[i - 1] + dp[i - dp[i - 1] - 2] + 2\n        return max(dp)"
    },
    {
        "number": 32,
        "title": "Longest Valid Parentheses",
        "difficulty": 2,
        "pass": 4,
        "answer": "        if len(s) == 0:\n            return 0\n        if len(s) == 1:\n            return 0\n        if len(s) == 2:\n            if s[0] == ')' and s[1] == ')':\n                return 2\n            else:\n                return 0\n        if len(s) == 3:\n            if s[0] == ')' and s[1] == ')' and s[2] == ')':\n                return 3\n            else:\n                return 0\n        if len(s) == 4:\n            if s[0] == ')' and s[1] == ')' and s[2] == ')' and s[3] == ')':\n                return 4\n            else:\n                return 0\n        if len(s) == 5:\n            if s[0] == ')' and s[1] == ')' and s[2] == ')' and s[3] == ')' and s[4] == ')':\n                return 5\n            else:\n                return 0\n        if len(s) == 6:\n"
    },
    {
        "number": 32,
        "title": "Longest Valid Parentheses",
        "difficulty": 2,
        "pass": 5,
        "answer": "        if len(s) == 0:\n            return 0\n        if len(s) == 1:\n            return 1\n        if len(s) == 2:\n            return 2 if s[0] == ')' and s[1] == ')' else 1\n        dp = [0] * len(s)\n        dp[0] = 1\n        dp[1] = 2 if s[0] == ')' and s[1] == ')' else 1\n        for i in range(2, len(s)):\n            if s[i] == ')':\n                if s[i - 1] == '(':\n                    dp[i] = dp[i - 2] + 2\n                else:\n                    if i - dp[i - 1] - 1 >= 0 and s[i - dp[i - 1] - 1] == '(':\n                        dp[i] = dp[i - 1] + dp[i - dp[i - 1] - 2] + 2\n                    else:\n                        dp[i] = dp[i - 1] + 2\n            "
    },
    {
        "number": 32,
        "title": "Longest Valid Parentheses",
        "difficulty": 2,
        "pass": 6,
        "answer": "        if not s:\n            return 0\n        if len(s) == 1:\n            return 0\n        dp = [0] * len(s)\n        for i in range(1, len(s)):\n            if s[i] == ')':\n                if s[i - 1] == '(':\n                    dp[i] = dp[i - 2] + 2\n                elif s[i - 1] == ')' and i - dp[i - 1] - 1 >= 0 and s[i - dp[i - 1] - 1] == '(':\n                    dp[i] = dp[i - 1] + 2 + dp[i - dp[i - 1] - 2]\n        return max(dp)"
    },
    {
        "number": 32,
        "title": "Longest Valid Parentheses",
        "difficulty": 2,
        "pass": 7,
        "answer": "        if len(s) == 0:\n            return 0\n        dp = [0] * len(s)\n        for i in range(1, len(s)):\n            if s[i] == ')':\n                if s[i - 1] == '(':\n                    dp[i] = dp[i - 2] + 2\n                elif s[i - 1] == ')' and i - dp[i - 1] - 1 >= 0 and s[i - dp[i - 1] - 1] == '(':\n                    dp[i] = dp[i - 1] + dp[i - dp[i - 1] - 2] + 2\n        return max(dp)"
    },
    {
        "number": 32,
        "title": "Longest Valid Parentheses",
        "difficulty": 2,
        "pass": 8,
        "answer": "        if not s:\n            return 0\n        dp = [0] * len(s)\n        for i in range(1, len(s)):\n            if s[i] == ')':\n                if s[i - 1] == '(':\n                    dp[i] = dp[i - 2] + 2\n                elif i - dp[i - 1] - 1 >= 0 and s[i - dp[i - 1] - 1] == '(':\n                    dp[i] = dp[i - 1] + dp[i - dp[i - 1] - 2] + 2\n        return max(dp)"
    },
    {
        "number": 32,
        "title": "Longest Valid Parentheses",
        "difficulty": 2,
        "pass": 9,
        "answer": "        # Time: O(n)\n        # Space: O(n)\n        longest = 0\n        stack = [-1]\n        for i in range(len(s)):\n            if s[i] == '(':\n                stack.append(i)\n            else:\n                stack.pop()\n                if len(stack) == 0:\n                    stack.append(i)\n                else:\n                    longest = max(longest, i - stack[-1])\n        return longest"
    },
    {
        "number": 33,
        "title": "Search in Rotated Sorted Array",
        "difficulty": 1,
        "pass": 0,
        "answer": "        left = 0\n        right = len(nums) - 1\n        while left <= right:\n            mid = (left + right) // 2\n            if nums[mid] == target:\n                return mid\n            if nums[left] <= nums[mid]:\n                if nums[left] <= target < nums[mid]:\n                    right = mid - 1\n                else:\n                    left = mid + 1\n            else:\n                if nums[mid] < target <= nums[right]:\n                    left = mid + 1\n                else:\n                    right = mid - 1\n        return -1"
    },
    {
        "number": 33,
        "title": "Search in Rotated Sorted Array",
        "difficulty": 1,
        "pass": 1,
        "answer": "        lo, hi = 0, len(nums) - 1\n        while lo <= hi:\n            mid = lo + (hi - lo) // 2\n            if nums[mid] == target:\n                return mid\n            if nums[lo] <= nums[mid]:\n                if nums[lo] <= target < nums[mid]:\n                    hi = mid - 1\n                else:\n                    lo = mid + 1\n            else:\n                if nums[mid] < target <= nums[hi]:\n                    lo = mid + 1\n                else:\n                    hi = mid - 1\n        return -1"
    },
    {
        "number": 33,
        "title": "Search in Rotated Sorted Array",
        "difficulty": 1,
        "pass": 2,
        "answer": "        if not nums:\n            return -1\n        left, right = 0, len(nums) - 1\n        while left <= right:\n            mid = left + (right - left) // 2\n            if nums[mid] == target:\n                return mid\n            elif nums[mid] < target:\n                left = mid + 1\n            else:\n                right = mid - 1\n        return -1"
    },
    {
        "number": 33,
        "title": "Search in Rotated Sorted Array",
        "difficulty": 1,
        "pass": 3,
        "answer": "        if not nums:\n            return -1\n        left, right = 0, len(nums) - 1\n        while left <= right:\n            mid = left + (right - left) // 2\n            if nums[mid] == target:\n                return mid\n            elif nums[mid] < target:\n                left = mid + 1\n            else:\n                right = mid - 1\n        return -1"
    },
    {
        "number": 33,
        "title": "Search in Rotated Sorted Array",
        "difficulty": 1,
        "pass": 4,
        "answer": "        if not nums:\n            return -1\n        l, r = 0, len(nums) - 1\n        while l <= r:\n            mid = (l + r) // 2\n            if nums[mid] == target:\n                return mid\n            if nums[0] <= nums[mid]:\n                if nums[0] <= target < nums[mid]:\n                    r = mid - 1\n                else:\n                    l = mid + 1\n            else:\n                if nums[mid] < target <= nums[len(nums) - 1]:\n                    l = mid + 1\n                else:\n                    r = mid - 1\n        return -1"
    },
    {
        "number": 33,
        "title": "Search in Rotated Sorted Array",
        "difficulty": 1,
        "pass": 5,
        "answer": "        if not nums:\n            return -1\n        left, right = 0, len(nums) - 1\n        while left <= right:\n            mid = left + (right - left) // 2\n            if nums[mid] == target:\n                return mid\n            elif nums[mid] < target:\n                left = mid + 1\n            else:\n                right = mid - 1\n        return -1"
    },
    {
        "number": 33,
        "title": "Search in Rotated Sorted Array",
        "difficulty": 1,
        "pass": 6,
        "answer": "        if not nums:\n            return -1\n        \n        left, right = 0, len(nums) - 1\n        while left <= right:\n            mid = left + (right - left) // 2\n            if nums[mid] == target:\n                return mid\n            elif nums[mid] < target:\n                left = mid + 1\n            else:\n                right = mid - 1\n        return -1"
    },
    {
        "number": 33,
        "title": "Search in Rotated Sorted Array",
        "difficulty": 1,
        "pass": 7,
        "answer": "        left, right = 0, len(nums) - 1\n        while left <= right:\n            mid = (left + right) // 2\n            if nums[mid] == target:\n                return mid\n            if nums[left] <= nums[mid]:\n                if nums[left] <= target < nums[mid]:\n                    right = mid - 1\n                else:\n                    left = mid + 1\n            else:\n                if nums[mid] < target <= nums[right]:\n                    left = mid + 1\n                else:\n                    right = mid - 1\n        return -1"
    },
    {
        "number": 33,
        "title": "Search in Rotated Sorted Array",
        "difficulty": 1,
        "pass": 8,
        "answer": "        left, right = 0, len(nums) - 1\n        while left <= right:\n            mid = left + (right - left) // 2\n            if nums[mid] == target:\n                return mid\n            elif nums[mid] < target:\n                left = mid + 1\n            else:\n                right = mid - 1\n        return -1"
    },
    {
        "number": 33,
        "title": "Search in Rotated Sorted Array",
        "difficulty": 1,
        "pass": 9,
        "answer": "        if not nums:\n            return -1\n        left, right = 0, len(nums) - 1\n        while left <= right:\n            mid = left + (right - left) // 2\n            if nums[mid] == target:\n                return mid\n            elif nums[mid] > target:\n                right = mid - 1\n            else:\n                left = mid + 1\n        return -1"
    },
    {
        "number": 34,
        "title": "Find First and Last Position of Element in Sorted Array",
        "difficulty": 1,
        "pass": 0,
        "answer": "        if len(nums) == 0:\n            return [-1, -1]\n        left, right = 0, len(nums) - 1\n        while left <= right:\n            mid = (left + right) // 2\n            if nums[mid] < target:\n                left = mid + 1\n            elif nums[mid] > target:\n                right = mid - 1\n            else:\n                while left <= right and nums[left] == target:\n                    left += 1\n                while left <= right and nums[right] == target:\n                    right -= 1\n                return [left, right]\n        return [-1, -1]"
    },
    {
        "number": 34,
        "title": "Find First and Last Position of Element in Sorted Array",
        "difficulty": 1,
        "pass": 1,
        "answer": "        start = 0\n        end = len(nums) - 1\n        while start <= end:\n            mid = start + (end - start) // 2\n            if nums[mid] == target:\n                start = mid + 1\n            elif nums[mid] > target:\n                end = mid - 1\n            else:\n                start = mid + 1\n        if start == len(nums) or nums[start]!= target:\n            return [-1, -1]\n        start = 0\n        end = len(nums) - 1\n        while start <= end:\n            mid = start + (end - start) // 2\n            if nums[mid] == target:\n                end = mid - 1\n            elif nums[mid] > target:\n                end = mid - 1\n            else:\n                start = mid + 1\n        return [start, end]"
    },
    {
        "number": 34,
        "title": "Find First and Last Position of Element in Sorted Array",
        "difficulty": 1,
        "pass": 2,
        "answer": "        if not nums:\n            return [-1, -1]\n        \n        start = 0\n        end = len(nums) - 1\n        \n        while start <= end:\n            mid = (start + end) // 2\n            if nums[mid] == target:\n                start = mid + 1\n            elif nums[mid] > target:\n                end = mid - 1\n            else:\n                start = mid + 1\n        \n        if start == len(nums) or nums[start]!= target:\n            return [-1, -1]\n        \n        start = 0\n        end = len(nums) - 1\n        \n        while start <= end:\n            mid = (start + end) // 2\n            if nums[mid] == target:\n                end = mid - 1\n            elif nums[mid] > target:\n                end = mid - 1\n            else:\n                start = mid + 1\n        \n        return [start, end]"
    },
    {
        "number": 34,
        "title": "Find First and Last Position of Element in Sorted Array",
        "difficulty": 1,
        "pass": 3,
        "answer": "        if len(nums) == 0:\n            return [-1, -1]\n        start = 0\n        end = len(nums) - 1\n        while start <= end:\n            mid = (start + end) // 2\n            if nums[mid] == target:\n                start = mid + 1\n            elif nums[mid] < target:\n                start = mid + 1\n            else:\n                end = mid - 1\n        if start == len(nums) or nums[start]!= target:\n            return [-1, -1]\n        start = 0\n        end = len(nums) - 1\n        while start <= end:\n            mid = (start + end) // 2\n            if nums[mid] == target:\n                end = mid - 1\n            elif nums[mid] < target:\n                start = mid + 1\n            else:\n                end = mid - 1\n        return [start, end]"
    },
    {
        "number": 34,
        "title": "Find First and Last Position of Element in Sorted Array",
        "difficulty": 1,
        "pass": 4,
        "answer": "        if not nums:\n            return [-1, -1]\n        left, right = 0, len(nums) - 1\n        while left <= right:\n            mid = (left + right) // 2\n            if nums[mid] < target:\n                left = mid + 1\n            elif nums[mid] > target:\n                right = mid - 1\n            else:\n                break\n        if left >= len(nums) or nums[left]!= target:\n            return [-1, -1]\n        start = left\n        left, right = 0, len(nums) - 1\n        while left <= right:\n            mid = (left + right) // 2\n            if nums[mid] > target:\n                right = mid - 1\n            elif nums[mid] < target:\n                left = mid + 1\n            else:\n                break\n        if left >= len(nums) or nums[left]!= target:\n            return [-1, -1]\n        end = left\n        return [start, end]"
    },
    {
        "number": 34,
        "title": "Find First and Last Position of Element in Sorted Array",
        "difficulty": 1,
        "pass": 5,
        "answer": "        if not nums:\n            return [-1, -1]\n        start = 0\n        end = len(nums) - 1\n        while start + 1 < end:\n            mid = (start + end) // 2\n            if nums[mid] < target:\n                start = mid\n            else:\n                end = mid\n        if nums[start] == target:\n            left = start\n        elif nums[end] == target:\n            left = end\n        else:\n            return [-1, -1]\n        start = 0\n        end = len(nums) - 1\n        while start + 1 < end:\n            mid = (start + end) // 2\n            if nums[mid] > target:\n                end = mid\n            else:\n                start = mid\n        if nums[end] == target:\n            right = end\n        elif nums[start] == target:\n            right = start\n        else:\n            return [-1, -1]\n        return [left, right]"
    },
    {
        "number": 34,
        "title": "Find First and Last Position of Element in Sorted Array",
        "difficulty": 1,
        "pass": 6,
        "answer": "        if len(nums) == 0:\n            return [-1, -1]\n        \n        left = 0\n        right = len(nums) - 1\n        while left <= right:\n            mid = left + (right - left) // 2\n            if nums[mid] == target:\n                left = mid + 1\n            elif nums[mid] < target:\n                left = mid + 1\n            else:\n                right = mid - 1\n        if left == len(nums) or nums[left]!= target:\n            return [-1, -1]\n        \n        left = 0\n        right = len(nums) - 1\n        while left <= right:\n            mid = left + (right - left) // 2\n            if nums[mid] == target:\n                right = mid - 1\n            elif nums[mid] < target:\n                left = mid + 1\n            else:\n                right = mid - 1\n        return [left, right]"
    },
    {
        "number": 34,
        "title": "Find First and Last Position of Element in Sorted Array",
        "difficulty": 1,
        "pass": 7,
        "answer": "        if not nums:\n            return [-1, -1]\n        start = 0\n        end = len(nums) - 1\n        while start + 1 < end:\n            mid = (start + end) // 2\n            if nums[mid] < target:\n                start = mid\n            else:\n                end = mid\n        if nums[start] == target:\n            left = start\n        elif nums[end] == target:\n            left = end\n        else:\n            return [-1, -1]\n        start = 0\n        end = len(nums) - 1\n        while start + 1 < end:\n            mid = (start + end) // 2\n            if nums[mid] > target:\n                end = mid\n            else:\n                start = mid\n        if nums[end] == target:\n            right = end\n        elif nums[start] == target:\n            right = start\n        else:\n            return [-1, -1]\n        return [left, right]"
    },
    {
        "number": 34,
        "title": "Find First and Last Position of Element in Sorted Array",
        "difficulty": 1,
        "pass": 8,
        "answer": "        if not nums:\n            return [-1, -1]\n        start = 0\n        end = len(nums) - 1\n        while start <= end:\n            mid = (start + end) // 2\n            if nums[mid] == target:\n                start = mid + 1\n            elif nums[mid] > target:\n                end = mid - 1\n            else:\n                start = mid + 1\n        if start == len(nums) or nums[start]!= target:\n            return [-1, -1]\n        start = 0\n        end = len(nums) - 1\n        while start <= end:\n            mid = (start + end) // 2\n            if nums[mid] == target:\n                end = mid - 1\n            elif nums[mid] > target:\n                end = mid - 1\n            else:\n                start = mid + 1\n        return [start, end]"
    },
    {
        "number": 34,
        "title": "Find First and Last Position of Element in Sorted Array",
        "difficulty": 1,
        "pass": 9,
        "answer": "        if not nums:\n            return [-1, -1]\n        start, end = 0, len(nums) - 1\n        while start + 1 < end:\n            mid = start + (end - start) // 2\n            if nums[mid] < target:\n                start = mid\n            else:\n                end = mid\n        if nums[start] == target:\n            left = start\n        elif nums[end] == target:\n            left = end\n        else:\n            return [-1, -1]\n        start, end = 0, len(nums) - 1\n        while start + 1 < end:\n            mid = start + (end - start) // 2\n            if nums[mid] > target:\n                end = mid\n            else:\n                start = mid\n        if nums[end] == target:\n            right = end\n        elif nums[start] == target:\n            right = start\n        else:\n            return [-1, -1]\n        return [left, right]"
    },
    {
        "number": 35,
        "title": "Search Insert Position",
        "difficulty": 0,
        "pass": 0,
        "answer": "        l, r = 0, len(nums) - 1\n        while l <= r:\n            mid = l + (r - l) // 2\n            if nums[mid] == target:\n                return mid\n            elif nums[mid] < target:\n                l = mid + 1\n            else:\n                r = mid - 1\n        return l"
    },
    {
        "number": 35,
        "title": "Search Insert Position",
        "difficulty": 0,
        "pass": 1,
        "answer": "        \n        left = 0\n        right = len(nums) - 1\n        \n        while left <= right:\n            mid = left + (right - left) // 2\n            if nums[mid] == target:\n                return mid\n            elif nums[mid] < target:\n                left = mid + 1\n            else:\n                right = mid - 1\n        \n        return left"
    },
    {
        "number": 35,
        "title": "Search Insert Position",
        "difficulty": 0,
        "pass": 2,
        "answer": "        if not nums:\n            return 0\n        if target > nums[-1]:\n            return len(nums)\n        if target < nums[0]:\n            return 0\n        left, right = 0, len(nums) - 1\n        while left <= right:\n            mid = left + (right - left) // 2\n            if nums[mid] == target:\n                return mid\n            elif nums[mid] > target:\n                right = mid - 1\n            else:\n                left = mid + 1\n        return left"
    },
    {
        "number": 35,
        "title": "Search Insert Position",
        "difficulty": 0,
        "pass": 3,
        "answer": "        if target in nums:\n            return nums.index(target)\n        else:\n            for i in range(len(nums)):\n                if nums[i] >= target:\n                    return i\n            return len(nums)"
    },
    {
        "number": 35,
        "title": "Search Insert Position",
        "difficulty": 0,
        "pass": 4,
        "answer": "        if target in nums:\n            return nums.index(target)\n        else:\n            nums.append(target)\n            nums.sort()\n            return nums.index(target)"
    },
    {
        "number": 35,
        "title": "Search Insert Position",
        "difficulty": 0,
        "pass": 5,
        "answer": "        left = 0\n        right = len(nums) - 1\n        while left <= right:\n            mid = (left + right) // 2\n            if nums[mid] == target:\n                return mid\n            elif nums[mid] < target:\n                left = mid + 1\n            else:\n                right = mid - 1\n        return left"
    },
    {
        "number": 35,
        "title": "Search Insert Position",
        "difficulty": 0,
        "pass": 6,
        "answer": "        if len(nums) == 0:\n            return 0\n        if len(nums) == 1:\n            if nums[0] == target:\n                return 0\n            if nums[0] < target:\n                return 1\n            if nums[0] > target:\n                return 0\n        if nums[0] < target:\n            return 0\n        if nums[-1] > target:\n            return len(nums)\n        for i in range(len(nums)):\n            if nums[i] == target:\n                return i\n            if nums[i] > target:\n                return i\n            if nums[i] < target:\n                if i == 0:\n                    return 0\n                if i == len(nums) - 1:\n                    return len(nums) - 1\n                if nums[i] > nums[i - 1] and nums[i] > nums[i + 1]:\n                    return i\n                if nums[i] < nums[i - 1] and nums[i] <"
    },
    {
        "number": 35,
        "title": "Search Insert Position",
        "difficulty": 0,
        "pass": 7,
        "answer": "        if len(nums) == 0:\n            return 0\n        if len(nums) == 1:\n            if nums[0] == target:\n                return 0\n            if nums[0] < target:\n                return 1\n            if nums[0] > target:\n                return 0\n        if len(nums) == 2:\n            if nums[0] == target:\n                return 0\n            if nums[0] < target:\n                return 1\n            if nums[0] > target:\n                return 0\n            if nums[1] == target:\n                return 1\n            if nums[1] < target:\n                return 2\n            if nums[1] > target:\n                return 0\n        if len(nums) == 3:\n            if nums[0] == target:\n                return 0\n            if nums[0] < target:\n                return 1\n            if nums[0] > target:\n                return 0\n            if nums[1] == target:\n                return 1\n            if nums[1]"
    },
    {
        "number": 35,
        "title": "Search Insert Position",
        "difficulty": 0,
        "pass": 8,
        "answer": "        if not nums:\n            return 0\n        l, r = 0, len(nums) - 1\n        while l <= r:\n            mid = (l + r) // 2\n            if nums[mid] == target:\n                return mid\n            elif nums[mid] < target:\n                l = mid + 1\n            else:\n                r = mid - 1\n        return l"
    },
    {
        "number": 35,
        "title": "Search Insert Position",
        "difficulty": 0,
        "pass": 9,
        "answer": "        if len(nums) == 0:\n            return 0\n        if len(nums) == 1:\n            if nums[0] == target:\n                return 0\n            elif nums[0] < target:\n                return 1\n            else:\n                return 0\n        if nums[-1] == target:\n            return len(nums)\n        if nums[0] == target:\n            return 0\n        if nums[-1] < target:\n            return len(nums)\n        l = 0\n        r = len(nums) - 1\n        while l <= r:\n            mid = (l + r) // 2\n            if nums[mid] == target:\n                return mid\n            elif nums[mid] < target:\n                l = mid + 1\n            else:\n                r = mid - 1\n        return l"
    },
    {
        "number": 36,
        "title": "Valid Sudoku",
        "difficulty": 1,
        "pass": 0,
        "answer": "        \n        rows = [{} for i in range(9)]\n        cols = [{} for i in range(9)]\n        boxes = [{} for i in range(9)]\n        \n        for i in range(9):\n            for j in range(9):\n                num = board[i][j]\n                if num!= '.':\n                    num = int(num)\n                    rows[i][num] = rows[i].get(num, 0) + 1\n                    cols[j][num] = cols[j].get(num, 0) + 1\n                    boxes[(i//3)*3 + j//3][num] = boxes[(i//3)*3 + j//3].get(num, 0) + 1\n        \n        for i in range(9):\n            for j in range(9):\n                num = board[i][j]\n                if num!= '.':\n                    num = int(num)\n                    if rows[i].get(num, 0) > 1 or cols[j].get(num, 0) > 1 or boxes"
    },
    {
        "number": 36,
        "title": "Valid Sudoku",
        "difficulty": 1,
        "pass": 1,
        "answer": "        rows = [{} for _ in range(9)]\n        cols = [{} for _ in range(9)]\n        boxes = [{} for _ in range(9)]"
    },
    {
        "number": 36,
        "title": "Valid Sudoku",
        "difficulty": 1,
        "pass": 2,
        "answer": "        rows = [{} for _ in range(9)]\n        cols = [{} for _ in range(9)]\n        boxes = [{} for _ in range(9)]\n        \n        for i in range(9):\n            for j in range(9):\n                num = board[i][j]\n                if num!= '.':\n                    num = int(num)\n                    rows[i][num] = rows[i].get(num, 0) + 1\n                    cols[j][num] = cols[j].get(num, 0) + 1\n                    boxes[(i//3)*3 + j//3][num] = boxes[(i//3)*3 + j//3].get(num, 0) + 1\n        \n        for i in range(9):\n            for j in range(9):\n                num = board[i][j]\n                if num!= '.':\n                    num = int(num)\n                    if rows[i].get(num, 0) > 1 or cols[j].get(num, 0) > 1 or boxes[("
    },
    {
        "number": 36,
        "title": "Valid Sudoku",
        "difficulty": 1,
        "pass": 3,
        "answer": "        rows = [[] for _ in range(9)]\n        cols = [[] for _ in range(9)]\n        boxes = [[] for _ in range(9)]"
    },
    {
        "number": 36,
        "title": "Valid Sudoku",
        "difficulty": 1,
        "pass": 4,
        "answer": "        rows = [{} for _ in range(9)]\n        cols = [{} for _ in range(9)]\n        boxes = [{} for _ in range(9)]\n        for i in range(9):\n            for j in range(9):\n                num = board[i][j]\n                if num!= '.':\n                    num = int(num)\n                    rows[i][num] = rows[i].get(num, 0) + 1\n                    cols[j][num] = cols[j].get(num, 0) + 1\n                    boxes[(i // 3) * 3 + j // 3][num] = boxes[(i // 3) * 3 + j // 3].get(num, 0) + 1\n                    if rows[i][num] > 1 or cols[j][num] > 1 or boxes[(i // 3) * 3 + j // 3][num] > 1:\n                        return False\n        return True"
    },
    {
        "number": 36,
        "title": "Valid Sudoku",
        "difficulty": 1,
        "pass": 5,
        "answer": "        if not board:\n            return True\n        \n        rows = [[] for _ in range(9)]\n        cols = [[] for _ in range(9)]\n        boxes = [[] for _ in range(9)]\n        \n        for i in range(9):\n            for j in range(9):\n                val = board[i][j]\n                if val!= '.':\n                    rows[i].append(val)\n                    cols[j].append(val)\n                    boxes[(i//3)*3 + j//3].append(val)\n        \n        for row in rows:\n            if len(set(row))!= len(row):\n                return False\n        \n        for col in cols:\n            if len(set(col))!= len(col):\n                return False\n        \n        for box in boxes:\n            if len(set(box))!= len(box):\n                return False\n        \n        return True"
    },
    {
        "number": 36,
        "title": "Valid Sudoku",
        "difficulty": 1,
        "pass": 6,
        "answer": "        rows = [[] for _ in range(9)]\n        cols = [[] for _ in range(9)]\n        boxes = [[] for _ in range(9)]"
    },
    {
        "number": 36,
        "title": "Valid Sudoku",
        "difficulty": 1,
        "pass": 7,
        "answer": "        rows = [{} for _ in range(9)]\n        cols = [{} for _ in range(9)]\n        boxes = [{} for _ in range(9)]\n        \n        for i in range(9):\n            for j in range(9):\n                num = board[i][j]\n                if num!= '.':\n                    num = int(num)\n                    rows[i][num] = rows[i].get(num, 0) + 1\n                    cols[j][num] = cols[j].get(num, 0) + 1\n                    boxes[(i//3)*3 + j//3][num] = boxes[(i//3)*3 + j//3].get(num, 0) + 1\n        \n        for i in range(9):\n            for j in range(9):\n                num = board[i][j]\n                if num!= '.':\n                    num = int(num)\n                    if rows[i].get(num, 0) > 1 or cols[j].get(num, 0) > 1 or boxes[("
    },
    {
        "number": 36,
        "title": "Valid Sudoku",
        "difficulty": 1,
        "pass": 8,
        "answer": "        rows = [{} for _ in range(9)]\n        cols = [{} for _ in range(9)]\n        boxes = [{} for _ in range(9)]"
    },
    {
        "number": 36,
        "title": "Valid Sudoku",
        "difficulty": 1,
        "pass": 9,
        "answer": "        \n        rows = [{} for _ in range(9)]\n        cols = [{} for _ in range(9)]\n        boxes = [{} for _ in range(9)]\n        \n        for i in range(9):\n            for j in range(9):\n                num = board[i][j]\n                if num!= '.':\n                    num = int(num)\n                    rows[i][num] = rows[i].get(num, 0) + 1\n                    cols[j][num] = cols[j].get(num, 0) + 1\n                    boxes[(i//3)*3 + j//3][num] = boxes[(i//3)*3 + j//3].get(num, 0) + 1\n        \n        for i in range(9):\n            for j in range(9):\n                num = board[i][j]\n                if num!= '.':\n                    num = int(num)\n                    if rows[i].get(num, 0) > 1 or cols[j].get(num, 0) > 1 or boxes"
    },
    {
        "number": 37,
        "title": "Sudoku Solver",
        "difficulty": 2,
        "pass": 0,
        "answer": "        \n        def isValid(board, row, col, num):\n            for i in range(9):\n                if board[row][i] == num or board[i][col] == num:\n                    return False\n            for i in range(3):\n                for j in range(3):\n                    if board[(row//3)*3 + i][(col//3)*3 + j] == num:\n                        return False\n            return True\n        \n        def solve(board):\n            for i in range(9):\n                for j in range(9):\n                    if board[i][j] == '.':\n                        for num in range(1, 10):\n                            if isValid(board, i, j, str(num)):\n                                board[i][j] = str(num)\n                                if solve(board):\n                                    return True\n                                else:\n                                    board[i][j] = '.'\n                        return False\n            return True\n        \n        if solve(board):\n            for i in range(9):\n                for j in range(9):\n                    print"
    },
    {
        "number": 37,
        "title": "Sudoku Solver",
        "difficulty": 2,
        "pass": 1,
        "answer": "        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n"
    },
    {
        "number": 37,
        "title": "Sudoku Solver",
        "difficulty": 2,
        "pass": 2,
        "answer": "        \n        def isValid(board, row, col):\n            for i in range(9):\n                if board[row][i] == '.':\n                    continue\n                if board[row][i] == str(col):\n                    return False\n            for i in range(9):\n                if board[i][col] == '.':\n                    continue\n                if board[i][col] == str(row):\n                    return False\n            box_x = (row // 3) * 3\n            box_y = (col // 3) * 3\n            for i in range(3):\n                for j in range(3):\n                    if board[box_x + i][box_y + j] == '.':\n                        continue\n                    if board[box_x + i][box_y + j] == str(row) or board[box_x + i][box_y + j] == str(col):\n                        return False\n            return True\n        \n        def solve(board):\n            for i in range(9):\n                for j in range(9):\n                    if board[i"
    },
    {
        "number": 37,
        "title": "Sudoku Solver",
        "difficulty": 2,
        "pass": 3,
        "answer": "        \n        def check_row(row):\n            for i in range(9):\n                if row[i] == '.':\n                    continue\n                if row.count(row[i]) > 1:\n                    return False\n            return True\n        \n        def check_col(col):\n            for i in range(9):\n                if col[i] == '.':\n                    continue\n                if col.count(col[i]) > 1:\n                    return False\n            return True\n        \n        def check_box(box):\n            for i in range(3):\n                for j in range(3):\n                    if box[i*3+j] == '.':\n                        continue\n                    if box.count(box[i*3+j]) > 1:\n                        return False\n            return True\n        \n        def is_valid(board):\n            for i in range(9):\n                if not check_row(board[i]):\n                    return False\n                if not check_col(board[i]):\n                    return False\n                if not check_box(board[i]"
    },
    {
        "number": 37,
        "title": "Sudoku Solver",
        "difficulty": 2,
        "pass": 4,
        "answer": "        def isValid(board, row, col, num):\n            for i in range(0, 9):\n                if board[row][i] == num:\n                    return False\n            for i in range(0, 9):\n                if board[i][col] == num:\n                    return False\n            box_row = (row // 3) * 3\n            box_col = (col // 3) * 3\n            for i in range(box_row, box_row + 3):\n                for j in range(box_col, box_col + 3):\n                    if board[i][j] == num:\n                        return False\n            return True"
    },
    {
        "number": 37,
        "title": "Sudoku Solver",
        "difficulty": 2,
        "pass": 5,
        "answer": "        self.board = board\n        self.rows = len(board)\n        self.cols = len(board[0])\n        self.boxes = self.rows * self.cols // 3\n        self.digits = {'1', '2', '3', '4', '5', '6', '7', '8', '9'}\n        self.empty_cells = []\n        for i in range(self.rows):\n            for j in range(self.cols):\n                if board[i][j] == '.':\n                    self.empty_cells.append((i, j))\n        self.solve()"
    },
    {
        "number": 37,
        "title": "Sudoku Solver",
        "difficulty": 2,
        "pass": 6,
        "answer": "        def isValid(board, row, col, num):\n            for i in range(0, 9):\n                if board[row][i] == num:\n                    return False\n            for i in range(0, 9):\n                if board[i][col] == num:\n                    return False\n            box_row = (row // 3) * 3\n            box_col = (col // 3) * 3\n            for i in range(box_row, box_row + 3):\n                for j in range(box_col, box_col + 3):\n                    if board[i][j] == num:\n                        return False\n            return True"
    },
    {
        "number": 37,
        "title": "Sudoku Solver",
        "difficulty": 2,
        "pass": 7,
        "answer": "        # check rows\n        for i in range(9):\n            seen = set()\n            for j in range(9):\n                if board[i][j]!= '.':\n                    if board[i][j] in seen:\n                        return False\n                    else:\n                        seen.add(board[i][j])\n        # check columns\n        for i in range(9):\n            seen = set()\n            for j in range(9):\n                if board[j][i]!= '.':\n                    if board[j][i] in seen:\n                        return False\n                    else:\n                        seen.add(board[j][i])\n        # check boxes\n        for i in range(3):\n            for j in range(3):\n                seen = set()\n                for k in range(3):\n                    for l in range(3):\n                        if board[i*3+k][j*3+l]!= '.':\n                            if board[i*3+k][j*3+l] in seen:\n                                return False\n                            else:\n                                seen.add(board"
    },
    {
        "number": 37,
        "title": "Sudoku Solver",
        "difficulty": 2,
        "pass": 8,
        "answer": "        def is_valid(board):\n            for i in range(9):\n                row = set()\n                col = set()\n                box = set()\n                for j in range(9):\n                    if board[i][j] == '.':\n                        continue\n                    if board[i][j] in row:\n                        return False\n                    if board[i][j] in col:\n                        return False\n                    if board[i][j] in box:\n                        return False\n                    row.add(board[i][j])\n                    col.add(board[j][i])\n                    box.add(board[(i//3)*3 + j//3][i%3*3 + j%3])\n            return True\n        \n        def solve(board):\n            if not is_valid(board):\n                return False\n            for i in range(9):\n                for j in range(9):\n                    if board[i][j] == '.':\n                        for k in range(1,10):\n                            board[i][j] = str(k)\n                            if solve(board):"
    },
    {
        "number": 37,
        "title": "Sudoku Solver",
        "difficulty": 2,
        "pass": 9,
        "answer": "        \n        def is_valid(board, row, col, val):\n            for i in range(9):\n                if board[row][i] == val:\n                    return False\n            for i in range(9):\n                if board[i][col] == val:\n                    return False\n            box_row = (row // 3) * 3\n            box_col = (col // 3) * 3\n            for i in range(box_row, box_row + 3):\n                for j in range(box_col, box_col + 3):\n                    if board[i][j] == val:\n                        return False\n            return True\n        \n        def solve_sudoku(board):\n            for row in range(9):\n                for col in range(9):\n                    if board[row][col] == '.':\n                        for val in range(1, 10):\n                            if is_valid(board, row, col, str(val)):\n                                board[row][col] = str(val)\n                                if solve_sudoku(board):\n                                    return True\n"
    },
    {
        "number": 38,
        "title": "Count and Say",
        "difficulty": 1,
        "pass": 0,
        "answer": "        if n == 1:\n            return \"1\"\n        if n == 2:\n            return \"11\"\n        if n == 3:\n            return \"21\"\n        res = \"11\"\n        for i in range(3, n + 1):\n            tmp = \"\"\n            count = 1\n            for j in range(1, len(res)):\n                if res[j] == res[j - 1]:\n                    count += 1\n                else:\n                    tmp += str(count) + res[j - 1]\n                    count = 1\n            tmp += str(count) + res[-1]\n            res = tmp\n        return res"
    },
    {
        "number": 38,
        "title": "Count and Say",
        "difficulty": 1,
        "pass": 1,
        "answer": "        if n == 1:\n            return \"1\"\n        if n == 2:\n            return \"11\"\n        if n == 3:\n            return \"21\"\n        s = \"11\"\n        for i in range(4, n+1):\n            s = self.say(s)\n        return s"
    },
    {
        "number": 38,
        "title": "Count and Say",
        "difficulty": 1,
        "pass": 2,
        "answer": "        if n == 1:\n            return \"1\"\n        if n == 2:\n            return \"11\"\n        res = \"11\"\n        for i in range(3, n + 1):\n            tmp = \"\"\n            count = 1\n            for j in range(1, len(res)):\n                if res[j] == res[j - 1]:\n                    count += 1\n                else:\n                    tmp += str(count) + res[j - 1]\n                    count = 1\n            tmp += str(count) + res[-1]\n            res = tmp\n        return res"
    },
    {
        "number": 38,
        "title": "Count and Say",
        "difficulty": 1,
        "pass": 3,
        "answer": "        if n == 1:\n            return \"1\"\n        if n == 2:\n            return \"11\"\n        if n == 3:\n            return \"21\"\n        if n == 4:\n            return \"1211\"\n        res = \"11\"\n        for i in range(4, n+1):\n            tmp = \"\"\n            count = 1\n            for j in range(1, len(res)):\n                if res[j] == res[j-1]:\n                    count += 1\n                else:\n                    tmp += str(count) + res[j-1]\n                    count = 1\n            tmp += str(count) + res[-1]\n            res = tmp\n        return res"
    },
    {
        "number": 38,
        "title": "Count and Say",
        "difficulty": 1,
        "pass": 4,
        "answer": "        if n == 1:\n            return \"1\"\n        if n == 2:\n            return \"11\"\n        s = \"11\"\n        for i in range(3, n + 1):\n            s = self.countAndSay(i - 1) + s\n        return s"
    },
    {
        "number": 38,
        "title": "Count and Say",
        "difficulty": 1,
        "pass": 5,
        "answer": "        if n == 1:\n            return \"1\"\n        s = \"1\"\n        for i in range(1, n):\n            s = self.say(s)\n        return s"
    },
    {
        "number": 38,
        "title": "Count and Say",
        "difficulty": 1,
        "pass": 6,
        "answer": "        if n == 1:\n            return '1'\n        s = '1'\n        for i in range(1, n):\n            s = self.say(s)\n        return s"
    },
    {
        "number": 38,
        "title": "Count and Say",
        "difficulty": 1,
        "pass": 7,
        "answer": "        if n == 1:\n            return \"1\"\n        s = \"1\"\n        for i in range(1, n):\n            s = self.say(s)\n        return s"
    },
    {
        "number": 38,
        "title": "Count and Say",
        "difficulty": 1,
        "pass": 8,
        "answer": "        if n == 1:\n            return '1'\n        if n == 2:\n            return '11'\n        if n == 3:\n            return '21'\n        if n == 4:\n            return '1211'\n        res = '11'\n        for i in range(4, n + 1):\n            tmp = ''\n            count = 1\n            for j in range(1, len(res)):\n                if res[j] == res[j - 1]:\n                    count += 1\n                else:\n                    tmp += str(count) + res[j - 1]\n                    count = 1\n            tmp += str(count) + res[-1]\n            res = tmp\n        return res"
    },
    {
        "number": 38,
        "title": "Count and Say",
        "difficulty": 1,
        "pass": 9,
        "answer": "        if n == 1:\n            return \"1\"\n        if n == 2:\n            return \"11\"\n        if n == 3:\n            return \"21\"\n        s = \"11\"\n        for i in range(4, n + 1):\n            s = self.say(s)\n        return s"
    },
    {
        "number": 39,
        "title": "Combination Sum",
        "difficulty": 1,
        "pass": 0,
        "answer": "        \n        def dfs(candidates, target, idx, path, res):\n            if target < 0:\n                return\n            if target == 0:\n                res.append(path)\n                return\n            for i in range(idx, len(candidates)):\n                dfs(candidates, target - candidates[i], i, path + [candidates[i]], res)\n        \n        res = []\n        candidates.sort()\n        dfs(candidates, target, 0, [], res)\n        return res"
    },
    {
        "number": 39,
        "title": "Combination Sum",
        "difficulty": 1,
        "pass": 1,
        "answer": "        candidates.sort()\n        res = []\n        self.dfs(candidates, target, 0, [], res)\n        return res"
    },
    {
        "number": 39,
        "title": "Combination Sum",
        "difficulty": 1,
        "pass": 2,
        "answer": "        if len(candidates) == 0:\n            return []\n        if len(candidates) == 1:\n            if candidates[0] == target:\n                return [[candidates[0]]]\n            else:\n                return []\n        if candidates[0] == target:\n            return [[candidates[0]]]\n        if candidates[0] > target:\n            return []\n        res = []\n        for i in range(len(candidates)):\n            if candidates[i] > target:\n                break\n            for j in self.combinationSum(candidates[i+1:], target-candidates[i]):\n                res.append([candidates[i]]+j)\n        return res"
    },
    {
        "number": 39,
        "title": "Combination Sum",
        "difficulty": 1,
        "pass": 3,
        "answer": "        if len(candidates) == 0:\n            return []\n        if len(candidates) == 1:\n            if candidates[0] == target:\n                return [[candidates[0]]]\n            else:\n                return []\n        res = []\n        self.dfs(candidates, target, 0, [], res)\n        return res"
    },
    {
        "number": 39,
        "title": "Combination Sum",
        "difficulty": 1,
        "pass": 4,
        "answer": "        res = []\n        candidates.sort()\n        self.dfs(candidates, target, 0, [], res)\n        return res"
    },
    {
        "number": 39,
        "title": "Combination Sum",
        "difficulty": 1,
        "pass": 5,
        "answer": "        if not candidates:\n            return []\n        if len(candidates) == 1:\n            if candidates[0] == target:\n                return [[candidates[0]]]\n            else:\n                return []\n        res = []\n        candidates.sort()\n        self.dfs(candidates, target, 0, [], res)\n        return res"
    },
    {
        "number": 39,
        "title": "Combination Sum",
        "difficulty": 1,
        "pass": 6,
        "answer": "        if not candidates:\n            return []\n        candidates.sort()\n        res = []\n        self.dfs(candidates, target, 0, [], res)\n        return res"
    },
    {
        "number": 39,
        "title": "Combination Sum",
        "difficulty": 1,
        "pass": 7,
        "answer": "        res = []\n        candidates.sort()\n        self.dfs(candidates, target, 0, [], res)\n        return res"
    },
    {
        "number": 39,
        "title": "Combination Sum",
        "difficulty": 1,
        "pass": 8,
        "answer": "        \n        candidates.sort()\n        res = []\n        self.dfs(candidates, target, 0, [], res)\n        return res"
    },
    {
        "number": 39,
        "title": "Combination Sum",
        "difficulty": 1,
        "pass": 9,
        "answer": "        if not candidates: return []\n        candidates.sort()\n        res = []\n        self.dfs(candidates, target, 0, [], res)\n        return res"
    },
    {
        "number": 40,
        "title": "Combination Sum II",
        "difficulty": 1,
        "pass": 0,
        "answer": "        res = []\n        candidates.sort()\n        self.dfs(candidates, target, 0, [], res)\n        return res"
    },
    {
        "number": 40,
        "title": "Combination Sum II",
        "difficulty": 1,
        "pass": 1,
        "answer": "        if not candidates:\n            return []\n        res = []\n        candidates.sort()\n        self.dfs(candidates, target, 0, [], res)\n        return res"
    },
    {
        "number": 40,
        "title": "Combination Sum II",
        "difficulty": 1,
        "pass": 2,
        "answer": "        candidates.sort()\n        res = []\n        self.dfs(candidates, 0, target, [], res)\n        return res"
    },
    {
        "number": 40,
        "title": "Combination Sum II",
        "difficulty": 1,
        "pass": 3,
        "answer": "        if not candidates:\n            return []\n        \n        candidates.sort()\n        res = []\n        self.dfs(candidates, target, 0, [], res)\n        return res"
    },
    {
        "number": 40,
        "title": "Combination Sum II",
        "difficulty": 1,
        "pass": 4,
        "answer": "        res = []\n        candidates.sort()\n        self.dfs(candidates, target, 0, [], res)\n        return res"
    },
    {
        "number": 40,
        "title": "Combination Sum II",
        "difficulty": 1,
        "pass": 5,
        "answer": "        if not candidates:\n            return []\n        candidates.sort()\n        res = []\n        self.dfs(candidates, target, 0, [], res)\n        return res"
    },
    {
        "number": 40,
        "title": "Combination Sum II",
        "difficulty": 1,
        "pass": 6,
        "answer": "        if not candidates:\n            return []\n        candidates.sort()\n        res = []\n        self.dfs(candidates, target, 0, [], res)\n        return res"
    },
    {
        "number": 40,
        "title": "Combination Sum II",
        "difficulty": 1,
        "pass": 7,
        "answer": "        if not candidates:\n            return []\n        candidates.sort()\n        res = []\n        self.dfs(candidates, target, 0, [], res)\n        return res"
    },
    {
        "number": 40,
        "title": "Combination Sum II",
        "difficulty": 1,
        "pass": 8,
        "answer": "        if not candidates:\n            return []\n        candidates.sort()\n        res = []\n        self.dfs(candidates, target, 0, [], res)\n        return res"
    },
    {
        "number": 40,
        "title": "Combination Sum II",
        "difficulty": 1,
        "pass": 9,
        "answer": "        if not candidates:\n            return []\n        candidates.sort()\n        res = []\n        self.dfs(candidates, target, 0, [], res)\n        return res"
    },
    {
        "number": 41,
        "title": "First Missing Positive",
        "difficulty": 2,
        "pass": 0,
        "answer": "        n = len(nums)\n        for i in range(n):\n            while 1 <= nums[i] <= n and nums[nums[i] - 1]!= nums[i]:\n                nums[nums[i] - 1], nums[i] = nums[i], nums[nums[i] - 1]\n        for i in range(n):\n            if nums[i]!= i + 1:\n                return i + 1\n        return n + 1"
    },
    {
        "number": 41,
        "title": "First Missing Positive",
        "difficulty": 2,
        "pass": 1,
        "answer": "        n = len(nums)\n        for i in range(n):\n            while 1 <= nums[i] <= n and nums[nums[i] - 1]!= nums[i]:\n                nums[nums[i] - 1], nums[i] = nums[i], nums[nums[i] - 1]\n        for i in range(n):\n            if nums[i]!= i + 1:\n                return i + 1\n        return n + 1"
    },
    {
        "number": 41,
        "title": "First Missing Positive",
        "difficulty": 2,
        "pass": 2,
        "answer": "        n = len(nums)\n        for i in range(n):\n            while 1 <= nums[i] <= n and nums[nums[i] - 1]!= nums[i]:\n                nums[nums[i] - 1], nums[i] = nums[i], nums[nums[i] - 1]\n        for i in range(n):\n            if nums[i]!= i + 1:\n                return i + 1\n        return n + 1"
    },
    {
        "number": 41,
        "title": "First Missing Positive",
        "difficulty": 2,
        "pass": 3,
        "answer": "        n = len(nums)\n        for i in range(n):\n            while 1 <= nums[i] <= n and nums[nums[i] - 1]!= nums[i]:\n                nums[nums[i] - 1], nums[i] = nums[i], nums[nums[i] - 1]\n        for i in range(n):\n            if nums[i]!= i + 1:\n                return i + 1\n        return n + 1"
    },
    {
        "number": 41,
        "title": "First Missing Positive",
        "difficulty": 2,
        "pass": 4,
        "answer": "        n = len(nums)\n        for i in range(n):\n            while 1 <= nums[i] <= n and nums[nums[i] - 1]!= nums[i]:\n                nums[nums[i] - 1], nums[i] = nums[i], nums[nums[i] - 1]\n        for i in range(n):\n            if nums[i]!= i + 1:\n                return i + 1\n        return n + 1"
    },
    {
        "number": 41,
        "title": "First Missing Positive",
        "difficulty": 2,
        "pass": 5,
        "answer": "        n = len(nums)\n        for i in range(n):\n            while 1 <= nums[i] <= n and nums[nums[i] - 1]!= nums[i]:\n                nums[nums[i] - 1], nums[i] = nums[i], nums[nums[i] - 1]\n        for i in range(n):\n            if nums[i]!= i + 1:\n                return i + 1\n        return n + 1"
    },
    {
        "number": 41,
        "title": "First Missing Positive",
        "difficulty": 2,
        "pass": 6,
        "answer": "        n = len(nums)\n        for i in range(n):\n            while 1 <= nums[i] <= n and nums[nums[i] - 1]!= nums[i]:\n                nums[nums[i] - 1], nums[i] = nums[i], nums[nums[i] - 1]\n        for i in range(n):\n            if nums[i]!= i + 1:\n                return i + 1\n        return n + 1"
    },
    {
        "number": 41,
        "title": "First Missing Positive",
        "difficulty": 2,
        "pass": 7,
        "answer": "        n = len(nums)\n        for i in range(n):\n            while 1 <= nums[i] <= n and nums[nums[i] - 1]!= nums[i]:\n                nums[nums[i] - 1], nums[i] = nums[i], nums[nums[i] - 1]\n        for i in range(n):\n            if nums[i]!= i + 1:\n                return i + 1\n        return n + 1"
    },
    {
        "number": 41,
        "title": "First Missing Positive",
        "difficulty": 2,
        "pass": 8,
        "answer": "        n = len(nums)\n        for i in range(n):\n            while 1 <= nums[i] <= n and nums[nums[i] - 1]!= nums[i]:\n                nums[nums[i] - 1], nums[i] = nums[i], nums[nums[i] - 1]\n        for i in range(n):\n            if nums[i]!= i + 1:\n                return i + 1\n        return n + 1"
    },
    {
        "number": 41,
        "title": "First Missing Positive",
        "difficulty": 2,
        "pass": 9,
        "answer": "        n = len(nums)\n        for i in range(n):\n            while 1 <= nums[i] <= n and nums[nums[i] - 1]!= nums[i]:\n                nums[nums[i] - 1], nums[i] = nums[i], nums[nums[i] - 1]\n        for i in range(n):\n            if nums[i]!= i + 1:\n                return i + 1\n        return n + 1"
    },
    {
        "number": 42,
        "title": "Trapping Rain Water",
        "difficulty": 2,
        "pass": 0,
        "answer": "        \n        if not height:\n            return 0\n        \n        n = len(height)\n        left_max = [0] * n\n        right_max = [0] * n\n        \n        left_max[0] = height[0]\n        for i in range(1, n):\n            left_max[i] = max(left_max[i-1], height[i])\n        \n        right_max[n-1] = height[n-1]\n        for i in range(n-2, -1, -1):\n            right_max[i] = max(right_max[i+1], height[i])\n        \n        res = 0\n        for i in range(1, n-1):\n            res += min(left_max[i], right_max[i]) - height[i]\n        \n        return res"
    },
    {
        "number": 42,
        "title": "Trapping Rain Water",
        "difficulty": 2,
        "pass": 1,
        "answer": "        if not height:\n            return 0\n        n = len(height)\n        left_max = [0] * n\n        left_max[0] = height[0]\n        for i in range(1, n):\n            left_max[i] = max(left_max[i-1], height[i])\n        right_max = [0] * n\n        right_max[n-1] = height[n-1]\n        for i in range(n-2, -1, -1):\n            right_max[i] = max(right_max[i+1], height[i])\n        res = 0\n        for i in range(n):\n            res += min(left_max[i], right_max[i]) - height[i]\n        return res"
    },
    {
        "number": 42,
        "title": "Trapping Rain Water",
        "difficulty": 2,
        "pass": 2,
        "answer": "        n = len(height)\n        if n == 0:\n            return 0\n        left_max = [0] * n\n        right_max = [0] * n\n        left_max[0] = height[0]\n        for i in range(1, n):\n            left_max[i] = max(left_max[i - 1], height[i])\n        right_max[n - 1] = height[n - 1]\n        for i in range(n - 2, -1, -1):\n            right_max[i] = max(right_max[i + 1], height[i])\n        res = 0\n        for i in range(n):\n            res += min(left_max[i], right_max[i]) - height[i]\n        return res"
    },
    {
        "number": 42,
        "title": "Trapping Rain Water",
        "difficulty": 2,
        "pass": 3,
        "answer": "        if not height:\n            return 0\n        n = len(height)\n        left_max = [0] * n\n        right_max = [0] * n\n        left_max[0] = height[0]\n        for i in range(1, n):\n            left_max[i] = max(left_max[i-1], height[i])\n        right_max[n-1] = height[n-1]\n        for i in range(n-2, -1, -1):\n            right_max[i] = max(right_max[i+1], height[i])\n        res = 0\n        for i in range(n):\n            res += min(left_max[i], right_max[i]) - height[i]\n        return res"
    },
    {
        "number": 42,
        "title": "Trapping Rain Water",
        "difficulty": 2,
        "pass": 4,
        "answer": "        if not height:\n            return 0\n        \n        n = len(height)\n        left_max = [0] * n\n        right_max = [0] * n\n        \n        left_max[0] = height[0]\n        for i in range(1, n):\n            left_max[i] = max(left_max[i-1], height[i])\n        \n        right_max[n-1] = height[n-1]\n        for i in range(n-2, -1, -1):\n            right_max[i] = max(right_max[i+1], height[i])\n        \n        res = 0\n        for i in range(n):\n            res += min(left_max[i], right_max[i]) - height[i]\n        \n        return res"
    },
    {
        "number": 42,
        "title": "Trapping Rain Water",
        "difficulty": 2,
        "pass": 5,
        "answer": "        n = len(height)\n        if n == 0:\n            return 0\n        left_max = [0] * n\n        right_max = [0] * n\n        left_max[0] = height[0]\n        for i in range(1, n):\n            left_max[i] = max(left_max[i - 1], height[i])\n        right_max[n - 1] = height[n - 1]\n        for i in range(n - 2, -1, -1):\n            right_max[i] = max(right_max[i + 1], height[i])\n        res = 0\n        for i in range(1, n - 1):\n            res += min(left_max[i], right_max[i]) - height[i]\n        return res"
    },
    {
        "number": 42,
        "title": "Trapping Rain Water",
        "difficulty": 2,
        "pass": 6,
        "answer": "        if not height:\n            return 0\n        n = len(height)\n        left_max = [0] * n\n        right_max = [0] * n\n        left_max[0] = height[0]\n        for i in range(1, n):\n            left_max[i] = max(left_max[i - 1], height[i])\n        right_max[n - 1] = height[n - 1]\n        for i in range(n - 2, -1, -1):\n            right_max[i] = max(right_max[i + 1], height[i])\n        res = 0\n        for i in range(n):\n            res += min(left_max[i], right_max[i]) - height[i]\n        return res"
    },
    {
        "number": 42,
        "title": "Trapping Rain Water",
        "difficulty": 2,
        "pass": 7,
        "answer": "        if not height:\n            return 0\n        \n        n = len(height)\n        left_max = [0] * n\n        right_max = [0] * n\n        \n        left_max[0] = height[0]\n        for i in range(1, n):\n            left_max[i] = max(left_max[i-1], height[i])\n        \n        right_max[n-1] = height[n-1]\n        for i in range(n-2, -1, -1):\n            right_max[i] = max(right_max[i+1], height[i])\n        \n        res = 0\n        for i in range(n):\n            res += min(left_max[i], right_max[i]) - height[i]\n        \n        return res"
    },
    {
        "number": 42,
        "title": "Trapping Rain Water",
        "difficulty": 2,
        "pass": 8,
        "answer": "        if not height:\n            return 0\n        \n        n = len(height)\n        left_max = [0] * n\n        right_max = [0] * n\n        \n        left_max[0] = height[0]\n        for i in range(1, n):\n            left_max[i] = max(left_max[i-1], height[i])\n        \n        right_max[n-1] = height[n-1]\n        for i in range(n-2, -1, -1):\n            right_max[i] = max(right_max[i+1], height[i])\n        \n        res = 0\n        for i in range(1, n-1):\n            res += min(left_max[i], right_max[i]) - height[i]\n        \n        return res"
    },
    {
        "number": 42,
        "title": "Trapping Rain Water",
        "difficulty": 2,
        "pass": 9,
        "answer": "        if not height:\n            return 0\n        n = len(height)\n        left_max = [0] * n\n        right_max = [0] * n\n        left_max[0] = height[0]\n        for i in range(1, n):\n            left_max[i] = max(left_max[i - 1], height[i])\n        right_max[n - 1] = height[n - 1]\n        for i in range(n - 2, -1, -1):\n            right_max[i] = max(right_max[i + 1], height[i])\n        res = 0\n        for i in range(n):\n            res += min(left_max[i], right_max[i]) - height[i]\n        return res"
    },
    {
        "number": 43,
        "title": "Multiply Strings",
        "difficulty": 1,
        "pass": 0,
        "answer": "        if num1 == \"0\" or num2 == \"0\":\n            return \"0\"\n        if num1 == \"1\":\n            return num2\n        if num2 == \"1\":\n            return num1\n        if len(num1) == 1 and len(num2) == 1:\n            return str(int(num1) * int(num2))\n        if len(num1) > len(num2):\n            num2 = \"0\" * (len(num1) - len(num2)) + num2\n        elif len(num1) < len(num2):\n            num1 = \"0\" * (len(num2) - len(num1)) + num1\n        num1 = num1[::-1]\n        num2 = num2[::-1]\n        res = \"0\"\n        for i in range(len(num1)):\n            res += str(int(num1[i]) * int(num2[i]))\n        return res[::-1]"
    },
    {
        "number": 43,
        "title": "Multiply Strings",
        "difficulty": 1,
        "pass": 1,
        "answer": "        if num1 == \"0\" or num2 == \"0\":\n            return \"0\"\n        num1 = num1[::-1]\n        num2 = num2[::-1]\n        res = [\"0\"] * (len(num1) + len(num2))\n        for i in range(len(num1)):\n            for j in range(len(num2)):\n                res[i + j] += int(num1[i]) * int(num2[j])\n                res[i + j + 1] += res[i + j] // 10\n                res[i + j] %= 10\n        for i in range(len(res)):\n            if res[i] > 9:\n                res[i] = str(res[i])\n                res[i + 1] = str(res[i + 1])\n                res[i + 2] = str(res[i + 2])\n                res[i + 3] = str(res[i + 3])\n                res[i + 4] = str(res[i + 4])\n                "
    },
    {
        "number": 43,
        "title": "Multiply Strings",
        "difficulty": 1,
        "pass": 2,
        "answer": "        if num1 == \"0\" or num2 == \"0\":\n            return \"0\"\n        if num1 == \"1\":\n            return num2\n        if num2 == \"1\":\n            return num1\n        if len(num1) < len(num2):\n            num1, num2 = num2, num1\n        num1 = num1[::-1]\n        num2 = num2[::-1]\n        res = [0] * (len(num1) + len(num2))\n        for i in range(len(num1)):\n            for j in range(len(num2)):\n                res[i + j] += int(num1[i]) * int(num2[j])\n                res[i + j + 1] += res[i + j] // 10\n                res[i + j] %= 10\n        res = res[::-1]\n        return \"\".join([str(i) for i in res]).lstrip(\"0\")"
    },
    {
        "number": 43,
        "title": "Multiply Strings",
        "difficulty": 1,
        "pass": 3,
        "answer": "        # https://leetcode.com/problems/multiply-strings/solution/\n        \n        if num1 == \"0\" or num2 == \"0\":\n            return \"0\"\n        \n        if num1 == \"1\":\n            return num2\n        \n        if num2 == \"1\":\n            return num1\n        \n        if len(num1) == 1 and len(num2) == 1:\n            return str(int(num1) * int(num2))\n        \n        num1 = num1[::-1]\n        num2 = num2[::-1]\n        \n        res = []\n        \n        for i in range(max(len(num1), len(num2))):\n            if i >= len(num1):\n                res.append(int(num2[i]) * int(num1[i]))\n            elif i >= len(num2):\n                res.append(int(num1[i]) * int(num2[i]))\n            else:\n                res.append(int(num1["
    },
    {
        "number": 43,
        "title": "Multiply Strings",
        "difficulty": 1,
        "pass": 4,
        "answer": "        if num1 == \"0\" or num2 == \"0\":\n            return \"0\"\n        n1 = int(num1)\n        n2 = int(num2)\n        return str(n1*n2)"
    },
    {
        "number": 43,
        "title": "Multiply Strings",
        "difficulty": 1,
        "pass": 5,
        "answer": "        if num1 == \"0\" or num2 == \"0\":\n            return \"0\"\n        if len(num1) < len(num2):\n            num1, num2 = num2, num1\n        res = 0\n        for i in range(len(num1)-1, -1, -1):\n            tmp = 0\n            for j in range(len(num2)-1, -1, -1):\n                tmp += int(num1[i]) * int(num2[j])\n            res += tmp * 10**(len(num1)-i-1)\n        return str(res)"
    },
    {
        "number": 43,
        "title": "Multiply Strings",
        "difficulty": 1,
        "pass": 6,
        "answer": "        if num1 == \"0\" or num2 == \"0\":\n            return \"0\"\n        if len(num1) < len(num2):\n            num1, num2 = num2, num1\n        res = 0\n        for i in range(len(num1)-1, -1, -1):\n            x = int(num1[i])\n            for j in range(len(num2)-1, -1, -1):\n                y = int(num2[j])\n                res += x * y * (10**(len(num1)-i-1)) * (10**(len(num2)-j-1))\n        return str(res)"
    },
    {
        "number": 43,
        "title": "Multiply Strings",
        "difficulty": 1,
        "pass": 7,
        "answer": "        # num1 = int(num1)\n        # num2 = int(num2)\n        # return str(num1 * num2)\n        \n        if num1 == \"0\" or num2 == \"0\":\n            return \"0\"\n        \n        len_num1 = len(num1)\n        len_num2 = len(num2)\n        \n        if len_num1 > len_num2:\n            num2 = \"0\" * (len_num1 - len_num2) + num2\n        else:\n            num1 = \"0\" * (len_num2 - len_num1) + num1\n        \n        res = 0\n        for i in range(len_num1):\n            res += int(num1[len_num1 - i - 1]) * int(num2[i])\n        \n        return str(res)"
    },
    {
        "number": 43,
        "title": "Multiply Strings",
        "difficulty": 1,
        "pass": 8,
        "answer": "        if num1 == \"0\" or num2 == \"0\":\n            return \"0\"\n        n1, n2 = len(num1), len(num2)\n        if n1 < n2:\n            num1, num2 = num2, num1\n            n1, n2 = n2, n1\n        res = [0] * (n1 + n2)\n        for i in range(n1):\n            for j in range(n2):\n                res[i + j] += int(num1[i]) * int(num2[j])\n                res[i + j + 1] += res[i + j] // 10\n                res[i + j] %= 10\n        for i in range(n1 + n2, len(res)):\n            res[i] = 0\n        return \"\".join(map(str, res))"
    },
    {
        "number": 43,
        "title": "Multiply Strings",
        "difficulty": 1,
        "pass": 9,
        "answer": "        if num1 == '0' or num2 == '0':\n            return '0'\n        if len(num1) < len(num2):\n            num1, num2 = num2, num1\n        num1 = num1[::-1]\n        num2 = num2[::-1]\n        res = []\n        for i in range(len(num2)):\n            tmp = 0\n            for j in range(len(num1)):\n                tmp += int(num1[j]) * int(num2[i])\n            res.append(str(tmp))\n        return ''.join(res[::-1])"
    },
    {
        "number": 44,
        "title": "Wildcard Matching",
        "difficulty": 2,
        "pass": 0,
        "answer": "        if not s and not p:\n            return True\n        if not p:\n            return False\n        if not s:\n            if len(p) == 1 and p[0] == '*':\n                return True\n            return False\n        if p[0] == '*':\n            if self.isMatch(s, p[1:]):\n                return True\n        if p[0] == '?':\n            if self.isMatch(s[1:], p[1:]):\n                return True\n        if p[0] == 'a':\n            if self.isMatch(s[1:], p[1:]):\n                return True\n        if p[0] == 'b':\n            if self.isMatch(s[1:], p[1:]):\n                return True\n        if p[0] == 'c':\n            if self.isMatch(s[1:], p[1:]):\n                return True\n        if p[0] == 'd':\n            if self.isMatch(s[1:], p[1:]):\n                return True\n"
    },
    {
        "number": 44,
        "title": "Wildcard Matching",
        "difficulty": 2,
        "pass": 1,
        "answer": "        m, n = len(s), len(p)\n        dp = [[False] * (n + 1) for _ in range(m + 1)]\n        dp[0][0] = True\n        for i in range(1, n + 1):\n            if p[i - 1] == '*':\n                dp[0][i] = dp[0][i - 2]\n        for i in range(1, m + 1):\n            for j in range(1, n + 1):\n                if p[j - 1] == '*':\n                    dp[i][j] = dp[i][j - 2]\n                elif p[j - 1] == '?' or p[j - 1] == s[i - 1]:\n                    dp[i][j] = dp[i - 1][j - 1]\n                else:\n                    dp[i][j] = False\n        return dp[m][n]"
    },
    {
        "number": 44,
        "title": "Wildcard Matching",
        "difficulty": 2,
        "pass": 2,
        "answer": "        if len(s) == 0 and len(p) == 0:\n            return True\n        if len(s) == 0 and len(p)!= 0:\n            return False\n        if len(p) == 0 and len(s)!= 0:\n            return False\n        if len(p) == 1 and len(s)!= 0:\n            return False\n        if len(p) == 1 and len(s) == 0:\n            return True\n        if p[0] == '?':\n            return self.isMatch(s, p[1:])\n        if p[0] == '*':\n            if len(s) == 0:\n                return self.isMatch(s, p[1:])\n            if p[1] == '*':\n                return self.isMatch(s, p[2:]) or self.isMatch(s, p[2:]) or self.isMatch(s[1:], p)\n            if p[1] == '?':\n                return self.isMatch(s, p[2:]) or self.isMatch("
    },
    {
        "number": 44,
        "title": "Wildcard Matching",
        "difficulty": 2,
        "pass": 3,
        "answer": "        m, n = len(s), len(p)\n        dp = [[False] * (n + 1) for _ in range(m + 1)]\n        dp[0][0] = True\n        for i in range(1, n + 1):\n            if p[i - 1] == '*':\n                dp[0][i] = dp[0][i - 2]\n        for i in range(1, m + 1):\n            for j in range(1, n + 1):\n                if p[j - 1] == '*':\n                    dp[i][j] = dp[i - 1][j] or dp[i][j - 2]\n                elif p[j - 1] == '?' or p[j - 1] == s[i - 1]:\n                    dp[i][j] = dp[i - 1][j - 1]\n        return dp[m][n]"
    },
    {
        "number": 44,
        "title": "Wildcard Matching",
        "difficulty": 2,
        "pass": 4,
        "answer": "        m, n = len(s), len(p)\n        dp = [[False] * (n + 1) for _ in range(m + 1)]\n        dp[0][0] = True\n        for i in range(1, n + 1):\n            if p[i - 1] == '*':\n                dp[0][i] = dp[0][i - 2]\n        for i in range(1, m + 1):\n            for j in range(1, n + 1):\n                if p[j - 1] == '*':\n                    dp[i][j] = dp[i - 1][j] or dp[i][j - 2]\n                elif p[j - 1] == '?' or p[j - 1] == s[i - 1]:\n                    dp[i][j] = dp[i - 1][j - 1]\n        return dp[m][n]"
    },
    {
        "number": 44,
        "title": "Wildcard Matching",
        "difficulty": 2,
        "pass": 5,
        "answer": "        m, n = len(s), len(p)\n        dp = [[False] * (n + 1) for _ in range(m + 1)]\n        dp[0][0] = True\n        for i in range(1, n + 1):\n            if p[i - 1] == '*':\n                dp[0][i] = dp[0][i - 2]\n        for i in range(1, m + 1):\n            for j in range(1, n + 1):\n                if p[j - 1] == '*':\n                    dp[i][j] = dp[i - 1][j] or dp[i][j - 2]\n                elif p[j - 1] == '?' or p[j - 1] == s[i - 1]:\n                    dp[i][j] = dp[i - 1][j - 1]\n        return dp[m][n]"
    },
    {
        "number": 44,
        "title": "Wildcard Matching",
        "difficulty": 2,
        "pass": 6,
        "answer": "        m, n = len(s), len(p)\n        dp = [[False] * (n + 1) for _ in range(m + 1)]\n        dp[0][0] = True\n        for i in range(1, n + 1):\n            if p[i - 1] == '*':\n                dp[0][i] = dp[0][i - 2]\n        for i in range(1, m + 1):\n            for j in range(1, n + 1):\n                if p[j - 1] == '*':\n                    dp[i][j] = dp[i - 1][j] or dp[i][j - 2]\n                elif p[j - 1] == '?' or p[j - 1] == s[i - 1]:\n                    dp[i][j] = dp[i - 1][j - 1]\n        return dp[m][n]"
    },
    {
        "number": 44,
        "title": "Wildcard Matching",
        "difficulty": 2,
        "pass": 7,
        "answer": "        m, n = len(s), len(p)\n        dp = [[False] * (n + 1) for _ in range(m + 1)]\n        dp[0][0] = True\n        for i in range(1, n + 1):\n            if p[i - 1] == '*':\n                dp[0][i] = dp[0][i - 2]\n        for i in range(1, m + 1):\n            for j in range(1, n + 1):\n                if p[j - 1] == '*':\n                    dp[i][j] = dp[i - 1][j] or dp[i][j - 2]\n                elif p[j - 1] == '?' or p[j - 1] == s[i - 1]:\n                    dp[i][j] = dp[i - 1][j - 1]\n        return dp[m][n]"
    },
    {
        "number": 44,
        "title": "Wildcard Matching",
        "difficulty": 2,
        "pass": 8,
        "answer": "        if not s and not p:\n            return True\n        if not s and p:\n            return False\n        if s and not p:\n            return False\n        if len(s) == 1 and len(p) == 1:\n            if s == p:\n                return True\n            else:\n                return False\n        if len(s) == 1 and len(p) > 1:\n            if p[0] == '*':\n                return self.isMatch(s, p[1:])\n            else:\n                return False\n        if len(s) > 1 and len(p) == 1:\n            if p[0] == '*':\n                return self.isMatch(s[1:], p) or self.isMatch(s, p[1:])\n            else:\n                return False\n        if len(s) > 1 and len(p) > 1:\n            if p[0] == '*':\n                return self.isMatch(s[1:], p) or self.isMatch(s, p[1:]) or self.isMatch(s"
    },
    {
        "number": 44,
        "title": "Wildcard Matching",
        "difficulty": 2,
        "pass": 9,
        "answer": "        if not s and not p:\n            return True\n        if not p:\n            return not s\n        if not s:\n            return False\n        if p[0] == '*':\n            return self.isMatch(s, p[1:]) or self.isMatch(s[1:], p)\n        if p[0] == '?':\n            return self.isMatch(s[1:], p[1:])\n        if p[0] == s[0]:\n            return self.isMatch(s[1:], p[1:])\n        return False"
    },
    {
        "number": 45,
        "title": "Jump Game II",
        "difficulty": 1,
        "pass": 0,
        "answer": "        n = len(nums)\n        if n == 1:\n            return 0\n        if n == 2:\n            return 1\n        if n == 3:\n            return 2\n        dp = [0] * n\n        dp[0] = 0\n        dp[1] = 1\n        dp[2] = 2\n        for i in range(3, n):\n            dp[i] = float('inf')\n            for j in range(1, nums[i] + 1):\n                if i + j < n:\n                    dp[i] = min(dp[i], dp[i - j] + 1)\n        return dp[n - 1]"
    },
    {
        "number": 45,
        "title": "Jump Game II",
        "difficulty": 1,
        "pass": 1,
        "answer": "        n = len(nums)\n        if n == 1:\n            return 0\n        if n == 2:\n            if nums[1] == 0:\n                return 1\n            else:\n                return 2\n        \n        dp = [float('inf')] * n\n        dp[0] = 0\n        for i in range(1, n):\n            for j in range(i):\n                if nums[j] + j >= i:\n                    dp[i] = min(dp[i], dp[j] + 1)\n        return dp[-1]"
    },
    {
        "number": 45,
        "title": "Jump Game II",
        "difficulty": 1,
        "pass": 2,
        "answer": "        n = len(nums)\n        if n == 1:\n            return 0\n        jumps = 0\n        max_jump = 0\n        for i in range(n - 1):\n            max_jump = max(max_jump, i + nums[i])\n            if i == max_jump:\n                jumps += 1\n        return jumps"
    },
    {
        "number": 45,
        "title": "Jump Game II",
        "difficulty": 1,
        "pass": 3,
        "answer": "        n = len(nums)\n        if n == 1:\n            return 0\n        if n == 2:\n            return 1\n        dp = [float('inf')] * n\n        dp[0] = 0\n        dp[1] = 1\n        for i in range(2, n):\n            for j in range(i):\n                if j + nums[j] >= i:\n                    dp[i] = min(dp[i], dp[j] + 1)\n        return dp[-1]"
    },
    {
        "number": 45,
        "title": "Jump Game II",
        "difficulty": 1,
        "pass": 4,
        "answer": "        if len(nums) == 1:\n            return 0\n        n = len(nums)\n        dp = [float('inf')] * n\n        dp[0] = 0\n        for i in range(1, n):\n            for j in range(i):\n                if j + nums[j] >= i:\n                    dp[i] = min(dp[i], dp[j] + 1)\n        return dp[-1]"
    },
    {
        "number": 45,
        "title": "Jump Game II",
        "difficulty": 1,
        "pass": 5,
        "answer": "        n = len(nums)\n        if n == 1:\n            return 0\n        \n        dp = [0] * n\n        dp[0] = 0\n        \n        for i in range(1, n):\n            for j in range(i):\n                if j + nums[j] >= i:\n                    dp[i] = max(dp[i], dp[j] + 1)\n        \n        return dp[n - 1]\n        \n        \nclass Solution:\n    def jump(self, nums: List[int]) -> int:\n        \"\"\"\n        You are given a 0-indexed array of integers nums of length n. You are initially positioned at nums[0].\n        Each element nums[i] represents the maximum length of a forward jump from index i. In other words, if you are at nums[i], you can jump to any nums[i + j] where:\n            0 <= j <= nums[i] and\n            i + j < n\n        Return the minimum number of jumps to reach nums[n - 1]. The test cases"
    },
    {
        "number": 45,
        "title": "Jump Game II",
        "difficulty": 1,
        "pass": 6,
        "answer": "        if len(nums) == 1:\n            return 0\n        if len(nums) == 2:\n            return 1\n        if len(nums) == 3:\n            return 2\n        if len(nums) == 4:\n            return 2\n        if len(nums) == 5:\n            return 3\n        if len(nums) == 6:\n            return 4\n        if len(nums) == 7:\n            return 5\n        if len(nums) == 8:\n            return 6\n        if len(nums) == 9:\n            return 7\n        if len(nums) == 10:\n            return 8\n        if len(nums) == 11:\n            return 9\n        if len(nums) == 12:\n            return 10\n        if len(nums) == 13:\n            return 11\n        if len(nums) == 14:\n            return 12\n        if len(nums) == 15:\n            return 13\n        if len(nums) == 16:\n            return 14\n        if len(nums) == 17:"
    },
    {
        "number": 45,
        "title": "Jump Game II",
        "difficulty": 1,
        "pass": 7,
        "answer": "        n = len(nums)\n        if n == 1:\n            return 0\n        if n == 2:\n            return 1\n        if n == 3:\n            return 2\n        if n == 4:\n            return 2\n        if n == 5:\n            return 3\n        if n == 6:\n            return 4\n        if n == 7:\n            return 5\n        if n == 8:\n            return 6\n        if n == 9:\n            return 7\n        if n == 10:\n            return 8\n        if n == 11:\n            return 9\n        if n == 12:\n            return 10\n        if n == 13:\n            return 11\n        if n == 14:\n            return 12\n        if n == 15:\n            return 13\n        if n == 16:\n            return 14\n        if n == 17:\n            return 15\n        if n == 18:\n            return 16\n        if n == 19:\n            return 17\n        if n == 20:\n            return 18\n        if n == 21:\n            return 19\n        if n == 22:\n            return 20"
    },
    {
        "number": 45,
        "title": "Jump Game II",
        "difficulty": 1,
        "pass": 8,
        "answer": "        n = len(nums)\n        if n == 1:\n            return 0\n        if n == 2:\n            return 1\n        dp = [0] * n\n        dp[0] = 0\n        dp[1] = 1\n        for i in range(2, n):\n            for j in range(i):\n                if j + nums[j] >= i:\n                    dp[i] = max(dp[i], dp[j] + 1)\n        return dp[n - 1]"
    },
    {
        "number": 45,
        "title": "Jump Game II",
        "difficulty": 1,
        "pass": 9,
        "answer": "        n = len(nums)\n        if n == 1:\n            return 0\n        dp = [float('inf')] * n\n        dp[0] = 0\n        for i in range(1, n):\n            for j in range(1, nums[i] + 1):\n                if i + j < n:\n                    dp[i] = min(dp[i], dp[i + j] + 1)\n        return dp[-1]"
    },
    {
        "number": 46,
        "title": "Permutations",
        "difficulty": 1,
        "pass": 0,
        "answer": "        if len(nums) == 0:\n            return []\n        if len(nums) == 1:\n            return [[nums[0]]]\n        if len(nums) == 2:\n            return [[nums[0]], [nums[1]], [nums[0], nums[1]]]\n        res = []\n        for i in range(len(nums)):\n            for perm in self.permute(nums[:i] + nums[i+1:]):\n                res.append([nums[i]] + perm)\n        return res"
    },
    {
        "number": 46,
        "title": "Permutations",
        "difficulty": 1,
        "pass": 1,
        "answer": "        if len(nums) == 0:\n            return []\n        if len(nums) == 1:\n            return [nums]\n        if len(nums) == 2:\n            return [[nums[0], nums[1]], [nums[1], nums[0]]]\n        res = []\n        for i in range(len(nums)):\n            tmp = self.permute(nums[:i] + nums[i+1:])\n            for j in tmp:\n                res.append([nums[i]] + j)\n        return res"
    },
    {
        "number": 46,
        "title": "Permutations",
        "difficulty": 1,
        "pass": 2,
        "answer": "        if len(nums) == 0:\n            return []\n        if len(nums) == 1:\n            return [nums]\n        if len(nums) == 2:\n            return [[nums[0], nums[1]], [nums[1], nums[0]]]\n        if len(nums) == 3:\n            return [[nums[0], nums[1], nums[2]],\n                    [nums[0], nums[2], nums[1]],\n                    [nums[1], nums[0], nums[2]],\n                    [nums[1], nums[2], nums[0]],\n                    [nums[2], nums[0], nums[1]],\n                    [nums[2], nums[1], nums[0]]]\n        if len(nums) == 4:\n            return [[nums[0], nums[1], nums[2], nums[3]],\n                    [nums[0], nums[1], nums[3],"
    },
    {
        "number": 46,
        "title": "Permutations",
        "difficulty": 1,
        "pass": 3,
        "answer": "        if len(nums) == 0:\n            return []\n        if len(nums) == 1:\n            return [nums]\n        if len(nums) == 2:\n            return [[nums[0], nums[1]], [nums[1], nums[0]]]\n        res = []\n        for i in range(len(nums)):\n            rest = nums[:i] + nums[i+1:]\n            for j in self.permute(rest):\n                res.append([nums[i]] + j)\n        return res"
    },
    {
        "number": 46,
        "title": "Permutations",
        "difficulty": 1,
        "pass": 4,
        "answer": "        if len(nums) == 0:\n            return []\n        if len(nums) == 1:\n            return [[nums[0]]]\n        if len(nums) == 2:\n            return [[nums[0], nums[1]], [nums[1], nums[0]]]\n        if len(nums) == 3:\n            return [[nums[0], nums[1], nums[2]],\n                    [nums[0], nums[2], nums[1]],\n                    [nums[1], nums[0], nums[2]],\n                    [nums[1], nums[2], nums[0]],\n                    [nums[2], nums[0], nums[1]],\n                    [nums[2], nums[1], nums[0]]]\n        if len(nums) == 4:\n            return [[nums[0], nums[1], nums[2], nums[3]],\n                    [nums[0], nums[1], nums"
    },
    {
        "number": 46,
        "title": "Permutations",
        "difficulty": 1,
        "pass": 5,
        "answer": "        if len(nums) == 0:\n            return []\n        if len(nums) == 1:\n            return [[nums[0]]]\n        if len(nums) == 2:\n            return [[nums[0], nums[1]], [nums[1], nums[0]]]\n        if len(nums) == 3:\n            return [[nums[0], nums[1], nums[2]],\n                    [nums[0], nums[2], nums[1]],\n                    [nums[1], nums[0], nums[2]],\n                    [nums[1], nums[2], nums[0]],\n                    [nums[2], nums[0], nums[1]],\n                    [nums[2], nums[1], nums[0]]]\n        res = []\n        for i in range(len(nums)):\n            for j in self.permute(nums[:i] + nums[i+1:]):\n                res.append([nums"
    },
    {
        "number": 46,
        "title": "Permutations",
        "difficulty": 1,
        "pass": 6,
        "answer": "        if len(nums) == 0:\n            return []\n        if len(nums) == 1:\n            return [nums]\n        \n        n = len(nums)\n        res = []\n        \n        def dfs(nums, path, res):\n            if len(path) == n:\n                res.append(path[:])\n                return\n            \n            for i in range(len(nums)):\n                if nums[i] in path:\n                    continue\n                path.append(nums[i])\n                dfs(nums, path, res)\n                path.pop()\n        \n        dfs(nums, [], res)\n        return res"
    },
    {
        "number": 46,
        "title": "Permutations",
        "difficulty": 1,
        "pass": 7,
        "answer": "        res = []\n        if len(nums) == 0:\n            return res\n        nums.sort()\n        self.dfs(nums, [], res)\n        return res"
    },
    {
        "number": 46,
        "title": "Permutations",
        "difficulty": 1,
        "pass": 8,
        "answer": "        if len(nums) == 0:\n            return []\n        if len(nums) == 1:\n            return [[nums[0]]]\n        if len(nums) == 2:\n            return [[nums[0], nums[1]], [nums[1], nums[0]]]\n        if len(nums) == 3:\n            return [[nums[0], nums[1], nums[2]],\n                    [nums[0], nums[2], nums[1]],\n                    [nums[1], nums[0], nums[2]],\n                    [nums[1], nums[2], nums[0]],\n                    [nums[2], nums[0], nums[1]],\n                    [nums[2], nums[1], nums[0]]]\n        if len(nums) == 4:\n            return [[nums[0], nums[1], nums[2], nums[3]],\n                    [nums[0], nums[1], nums"
    },
    {
        "number": 46,
        "title": "Permutations",
        "difficulty": 1,
        "pass": 9,
        "answer": "        if not nums:\n            return []\n        \n        if len(nums) == 1:\n            return [[nums[0]]]\n        \n        res = []\n        for i in range(len(nums)):\n            for perm in self.permute(nums[:i] + nums[i+1:]):\n                res.append([nums[i]] + perm)\n        return res"
    },
    {
        "number": 47,
        "title": "Permutations II",
        "difficulty": 1,
        "pass": 0,
        "answer": "        if len(nums) == 0:\n            return []\n        if len(nums) == 1:\n            return [nums]\n        if len(nums) == 2:\n            if nums[0]!= nums[1]:\n                return [[nums[0], nums[1]], [nums[1], nums[0]]]\n            else:\n                return [[nums[0], nums[1]]]\n        if len(nums) == 3:\n            if nums[0]!= nums[1] and nums[0]!= nums[2] and nums[1]!= nums[2]:\n                return [[nums[0], nums[1], nums[2]],\n                        [nums[0], nums[2], nums[1]],\n                        [nums[1], nums[0], nums[2]],\n                        [nums[1], nums[2], nums[0]],\n                        [nums[2], nums[0], nums[1]],\n                        "
    },
    {
        "number": 47,
        "title": "Permutations II",
        "difficulty": 1,
        "pass": 1,
        "answer": "        \n        if len(nums) == 0:\n            return []\n        \n        if len(nums) == 1:\n            return [nums]\n        \n        if len(nums) == 2:\n            if nums[0]!= nums[1]:\n                return [[nums[0], nums[1]], [nums[1], nums[0]]]\n            else:\n                return [[nums[0], nums[1]]]\n        \n        if len(nums) == 3:\n            if nums[0]!= nums[1] and nums[0]!= nums[2] and nums[1]!= nums[2]:\n                return [[nums[0], nums[1], nums[2]],\n                        [nums[0], nums[2], nums[1]],\n                        [nums[1], nums[0], nums[2]],\n                        [nums[1], nums[2], nums[0]],\n                        [nums[2], nums[0],"
    },
    {
        "number": 47,
        "title": "Permutations II",
        "difficulty": 1,
        "pass": 2,
        "answer": "        if len(nums) == 0:\n            return []\n        if len(nums) == 1:\n            return [nums]\n        if len(nums) == 2:\n            if nums[0] == nums[1]:\n                return [[nums[0]], [nums[1]]]\n            else:\n                return [[nums[0]], [nums[1]], [nums[1], nums[0]]]\n        if len(nums) == 3:\n            if nums[0] == nums[1] and nums[1] == nums[2]:\n                return [[nums[0]], [nums[1]], [nums[2]]]\n            if nums[0] == nums[2] and nums[1] == nums[2]:\n                return [[nums[0]], [nums[1]], [nums[2]]]\n            if nums[1] == nums[2] and nums[0] == nums[2]:\n                return [[nums"
    },
    {
        "number": 47,
        "title": "Permutations II",
        "difficulty": 1,
        "pass": 3,
        "answer": "        if len(nums) == 0:\n            return []\n        if len(nums) == 1:\n            return [[nums[0]]]\n        if len(nums) == 2:\n            if nums[0] == nums[1]:\n                return [[nums[0]], [nums[1]]]\n            else:\n                return [[nums[0], nums[1]], [nums[1], nums[0]]]\n        if len(nums) == 3:\n            if nums[0] == nums[1] and nums[1] == nums[2]:\n                return [[nums[0], nums[1], nums[2]], [nums[0], nums[2], nums[1]], [nums[1], nums[0], nums[2]],\n                        [nums[1], nums[2], nums[0]],\n                        [nums[2], nums[0], nums[1]], [nums[2], nums[1], nums"
    },
    {
        "number": 47,
        "title": "Permutations II",
        "difficulty": 1,
        "pass": 4,
        "answer": "        nums = sorted(nums)\n        if len(nums) == 0:\n            return []\n        if len(nums) == 1:\n            return [[nums[0]]]\n        if len(nums) == 2:\n            return [[nums[0], nums[1]], [nums[1], nums[0]]]\n        if len(nums) == 3:\n            return [[nums[0], nums[1], nums[2]],\n                    [nums[0], nums[2], nums[1]],\n                    [nums[1], nums[0], nums[2]],\n                    [nums[1], nums[2], nums[0]],\n                    [nums[2], nums[0], nums[1]],\n                    [nums[2], nums[1], nums[0]]]\n        output = []\n        for i in range(len(nums)):\n            if i > 0 and nums[i] == nums[i - 1]:\n                continue"
    },
    {
        "number": 47,
        "title": "Permutations II",
        "difficulty": 1,
        "pass": 5,
        "answer": "        if not nums:\n            return []\n        \n        nums = sorted(nums)\n        res = []\n        \n        def backtrack(nums, tmp):\n            if not nums:\n                res.append(tmp)\n                return\n            \n            for i in range(len(nums)):\n                if i > 0 and nums[i] == nums[i-1]:\n                    continue\n                backtrack(nums[:i] + nums[i+1:], tmp + [nums[i]])\n        \n        backtrack(nums, [])\n        return res"
    },
    {
        "number": 47,
        "title": "Permutations II",
        "difficulty": 1,
        "pass": 6,
        "answer": "        if len(nums) == 0:\n            return []\n        if len(nums) == 1:\n            return [nums]\n        if len(nums) == 2:\n            if nums[0]!= nums[1]:\n                return [[nums[0], nums[1]], [nums[1], nums[0]]]\n            else:\n                return [[nums[0], nums[1]]]\n        if len(nums) == 3:\n            if nums[0]!= nums[1] and nums[0]!= nums[2] and nums[1]!= nums[2]:\n                return [[nums[0], nums[1], nums[2]],\n                        [nums[0], nums[2], nums[1]],\n                        [nums[1], nums[0], nums[2]],\n                        [nums[1], nums[2], nums[0]],\n                        [nums[2], nums[0], nums[1]],\n                        "
    },
    {
        "number": 47,
        "title": "Permutations II",
        "difficulty": 1,
        "pass": 7,
        "answer": "        if not nums:\n            return []\n        if len(nums) == 1:\n            return [nums]\n        nums = sorted(nums)\n        res = []\n        self.dfs(nums, [], res)\n        return res"
    },
    {
        "number": 47,
        "title": "Permutations II",
        "difficulty": 1,
        "pass": 8,
        "answer": "        if not nums:\n            return []\n        if len(nums) == 1:\n            return [nums]\n        if len(nums) == 2:\n            return [[nums[0], nums[1]], [nums[1], nums[0]]]\n        if len(nums) == 3:\n            return [[nums[0], nums[1], nums[2]],\n                    [nums[0], nums[2], nums[1]],\n                    [nums[1], nums[0], nums[2]],\n                    [nums[1], nums[2], nums[0]],\n                    [nums[2], nums[0], nums[1]],\n                    [nums[2], nums[1], nums[0]]]\n        n = len(nums)\n        res = []\n        visited = set()\n        for i in range(n):\n            if nums[i] in visited:\n                continue\n            visited.add(nums[i])\n            "
    },
    {
        "number": 47,
        "title": "Permutations II",
        "difficulty": 1,
        "pass": 9,
        "answer": "        if len(nums) == 0:\n            return []\n        if len(nums) == 1:\n            return [[nums[0]]]\n        if len(nums) == 2:\n            return [[nums[0], nums[1]], [nums[1], nums[0]]]\n        if len(nums) == 3:\n            return [[nums[0], nums[1], nums[2]],\n                    [nums[0], nums[2], nums[1]],\n                    [nums[1], nums[0], nums[2]],\n                    [nums[1], nums[2], nums[0]],\n                    [nums[2], nums[0], nums[1]],\n                    [nums[2], nums[1], nums[0]]]\n        if len(nums) == 4:\n            return [[nums[0], nums[1], nums[2], nums[3]],\n                    [nums[0], nums[1], nums"
    },
    {
        "number": 48,
        "title": "Rotate Image",
        "difficulty": 1,
        "pass": 0,
        "answer": "        n = len(matrix)\n        for i in range(n // 2):\n            for j in range(i, n - i - 1):\n                tmp = matrix[i][j]\n                matrix[i][j] = matrix[n - 1 - j][i]\n                matrix[n - 1 - j][i] = matrix[n - 1 - i][n - 1 - j]\n                matrix[n - 1 - i][n - 1 - j] = matrix[j][n - 1 - i]\n                matrix[j][n - 1 - i] = tmp"
    },
    {
        "number": 48,
        "title": "Rotate Image",
        "difficulty": 1,
        "pass": 1,
        "answer": "        n = len(matrix)\n        for i in range(n):\n            for j in range(i, n):\n                matrix[i][j], matrix[j][i] = matrix[j][i], matrix[i][j]\n        for i in range(n):\n            for j in range(n // 2):\n                matrix[i][j], matrix[i][n - j - 1] = matrix[i][n - j - 1], matrix[i][j]\n        return matrix"
    },
    {
        "number": 48,
        "title": "Rotate Image",
        "difficulty": 1,
        "pass": 2,
        "answer": "        n = len(matrix)\n        for i in range(n):\n            for j in range(i, n):\n                matrix[i][j], matrix[j][i] = matrix[j][i], matrix[i][j]\n        for i in range(n):\n            for j in range(n // 2):\n                matrix[i][j], matrix[i][n - j - 1] = matrix[i][n - j - 1], matrix[i][j]\n        return matrix"
    },
    {
        "number": 48,
        "title": "Rotate Image",
        "difficulty": 1,
        "pass": 3,
        "answer": "        n = len(matrix)\n        for i in range(n // 2):\n            for j in range(i, n - i - 1):\n                temp = matrix[i][j]\n                matrix[i][j] = matrix[n - j - 1][i]\n                matrix[n - j - 1][i] = matrix[n - i - 1][n - j - 1]\n                matrix[n - i - 1][n - j - 1] = matrix[j][n - i - 1]\n                matrix[j][n - i - 1] = temp\n        return matrix"
    },
    {
        "number": 48,
        "title": "Rotate Image",
        "difficulty": 1,
        "pass": 4,
        "answer": "        n = len(matrix)\n        for i in range(n):\n            for j in range(i, n):\n                matrix[i][j], matrix[j][i] = matrix[j][i], matrix[i][j]\n        for i in range(n):\n            for j in range(n // 2):\n                matrix[i][j], matrix[i][n - j - 1] = matrix[i][n - j - 1], matrix[i][j]\n        return matrix"
    },
    {
        "number": 48,
        "title": "Rotate Image",
        "difficulty": 1,
        "pass": 5,
        "answer": "        n = len(matrix)\n        for i in range(n // 2):\n            for j in range(i, n - i - 1):\n                tmp = matrix[i][j]\n                matrix[i][j] = matrix[n - j - 1][i]\n                matrix[n - j - 1][i] = matrix[n - i - 1][n - j - 1]\n                matrix[n - i - 1][n - j - 1] = matrix[j][n - i - 1]\n                matrix[j][n - i - 1] = tmp"
    },
    {
        "number": 48,
        "title": "Rotate Image",
        "difficulty": 1,
        "pass": 6,
        "answer": "        n = len(matrix)\n        for i in range(n):\n            for j in range(i, n):\n                matrix[i][j], matrix[j][i] = matrix[j][i], matrix[i][j]\n        for i in range(n):\n            for j in range(n // 2):\n                matrix[i][j], matrix[i][n - j - 1] = matrix[i][n - j - 1], matrix[i][j]\n        return matrix"
    },
    {
        "number": 48,
        "title": "Rotate Image",
        "difficulty": 1,
        "pass": 7,
        "answer": "        n = len(matrix)\n        for i in range(n):\n            for j in range(i, n):\n                matrix[i][j], matrix[j][i] = matrix[j][i], matrix[i][j]\n        for i in range(n):\n            for j in range(n // 2):\n                matrix[i][j], matrix[i][n - j - 1] = matrix[i][n - j - 1], matrix[i][j]"
    },
    {
        "number": 48,
        "title": "Rotate Image",
        "difficulty": 1,
        "pass": 8,
        "answer": "        n = len(matrix)\n        for i in range(n):\n            for j in range(i, n):\n                matrix[i][j], matrix[j][i] = matrix[j][i], matrix[i][j]\n        for i in range(n):\n            for j in range(n // 2):\n                matrix[i][j], matrix[i][n - j - 1] = matrix[i][n - j - 1], matrix[i][j]\n        return matrix"
    },
    {
        "number": 48,
        "title": "Rotate Image",
        "difficulty": 1,
        "pass": 9,
        "answer": "        n = len(matrix)\n        for i in range(n // 2):\n            for j in range(i, n - i - 1):\n                tmp = matrix[i][j]\n                matrix[i][j] = matrix[n - j - 1][i]\n                matrix[n - j - 1][i] = matrix[n - i - 1][n - j - 1]\n                matrix[n - i - 1][n - j - 1] = matrix[j][n - i - 1]\n                matrix[j][n - i - 1] = tmp"
    },
    {
        "number": 49,
        "title": "Group Anagrams",
        "difficulty": 1,
        "pass": 0,
        "answer": "        if len(strs) == 0:\n            return []\n        d = {}\n        for s in strs:\n            key = ''.join(sorted(s))\n            if key in d:\n                d[key].append(s)\n            else:\n                d[key] = [s]\n        return list(d.values())"
    },
    {
        "number": 49,
        "title": "Group Anagrams",
        "difficulty": 1,
        "pass": 1,
        "answer": "        if not strs:\n            return []\n        hashmap = {}\n        for word in strs:\n            sorted_word = \"\".join(sorted(word))\n            if sorted_word in hashmap:\n                hashmap[sorted_word].append(word)\n            else:\n                hashmap[sorted_word] = [word]\n        return list(hashmap.values())"
    },
    {
        "number": 49,
        "title": "Group Anagrams",
        "difficulty": 1,
        "pass": 2,
        "answer": "        \n        if len(strs) == 0:\n            return []\n        \n        if len(strs) == 1:\n            return [[strs[0]]]\n        \n        hash_map = {}\n        \n        for word in strs:\n            sorted_word = \"\".join(sorted(word))\n            if sorted_word not in hash_map:\n                hash_map[sorted_word] = [word]\n            else:\n                hash_map[sorted_word].append(word)\n        \n        return list(hash_map.values())\n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n"
    },
    {
        "number": 49,
        "title": "Group Anagrams",
        "difficulty": 1,
        "pass": 3,
        "answer": "        if len(strs) == 0:\n            return []\n        if len(strs) == 1:\n            return [strs]\n        \n        strs_dict = {}\n        for s in strs:\n            sorted_s = \"\".join(sorted(s))\n            if sorted_s in strs_dict.keys():\n                strs_dict[sorted_s].append(s)\n            else:\n                strs_dict[sorted_s] = [s]\n        \n        return list(strs_dict.values())"
    },
    {
        "number": 49,
        "title": "Group Anagrams",
        "difficulty": 1,
        "pass": 4,
        "answer": "        d = {}\n        for word in strs:\n            sorted_word = \"\".join(sorted(word))\n            if sorted_word in d:\n                d[sorted_word].append(word)\n            else:\n                d[sorted_word] = [word]\n        return list(d.values())"
    },
    {
        "number": 49,
        "title": "Group Anagrams",
        "difficulty": 1,
        "pass": 5,
        "answer": "        if len(strs) == 0:\n            return []\n        d = {}\n        for s in strs:\n            key = ''.join(sorted(s))\n            if key in d:\n                d[key].append(s)\n            else:\n                d[key] = [s]\n        return list(d.values())"
    },
    {
        "number": 49,
        "title": "Group Anagrams",
        "difficulty": 1,
        "pass": 6,
        "answer": "        d = {}\n        for s in strs:\n            key = \"\".join(sorted(s))\n            if key in d:\n                d[key].append(s)\n            else:\n                d[key] = [s]\n        return list(d.values())"
    },
    {
        "number": 49,
        "title": "Group Anagrams",
        "difficulty": 1,
        "pass": 7,
        "answer": "        d = {}\n        for s in strs:\n            s = ''.join(sorted(s))\n            if s in d:\n                d[s].append(s)\n            else:\n                d[s] = [s]\n        return list(d.values())"
    },
    {
        "number": 49,
        "title": "Group Anagrams",
        "difficulty": 1,
        "pass": 8,
        "answer": "        if len(strs) == 0:\n            return []\n        \n        hash_map = {}\n        for word in strs:\n            sorted_word = \"\".join(sorted(word))\n            if sorted_word in hash_map:\n                hash_map[sorted_word].append(word)\n            else:\n                hash_map[sorted_word] = [word]\n        \n        output = []\n        for key in hash_map:\n            output.append(hash_map[key])\n        \n        return output"
    },
    {
        "number": 49,
        "title": "Group Anagrams",
        "difficulty": 1,
        "pass": 9,
        "answer": "        \n        if len(strs) == 0:\n            return []\n        \n        hashmap = {}\n        for word in strs:\n            sorted_word = \"\".join(sorted(word))\n            if sorted_word in hashmap:\n                hashmap[sorted_word].append(word)\n            else:\n                hashmap[sorted_word] = [word]\n        \n        return list(hashmap.values())\n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        "
    },
    {
        "number": 50,
        "title": "Pow(x, n)",
        "difficulty": 1,
        "pass": 0,
        "answer": "        if n == 0:\n            return 1\n        if n < 0:\n            return 1 / self.myPow(x, -n)\n        if n % 2 == 0:\n            return self.myPow(x * x, n // 2)\n        else:\n            return x * self.myPow(x * x, n // 2)"
    },
    {
        "number": 50,
        "title": "Pow(x, n)",
        "difficulty": 1,
        "pass": 1,
        "answer": "        if n == 0:\n            return 1\n        if n < 0:\n            return 1 / self.myPow(x, -n)\n        if n % 2 == 0:\n            return self.myPow(x * x, n // 2)\n        else:\n            return x * self.myPow(x * x, n // 2)"
    },
    {
        "number": 50,
        "title": "Pow(x, n)",
        "difficulty": 1,
        "pass": 2,
        "answer": "        if n == 0:\n            return 1\n        if n < 0:\n            return 1 / self.myPow(x, -n)\n        if n % 2 == 0:\n            return self.myPow(x * x, n // 2)\n        else:\n            return x * self.myPow(x * x, n // 2)"
    },
    {
        "number": 50,
        "title": "Pow(x, n)",
        "difficulty": 1,
        "pass": 3,
        "answer": "        if n == 0:\n            return 1\n        if n < 0:\n            return 1 / self.myPow(x, -n)\n        if n % 2 == 0:\n            return self.myPow(x * x, n // 2)\n        else:\n            return x * self.myPow(x * x, n // 2)"
    },
    {
        "number": 50,
        "title": "Pow(x, n)",
        "difficulty": 1,
        "pass": 4,
        "answer": "        if n == 0:\n            return 1\n        if n < 0:\n            return 1 / self.myPow(x, -n)\n        if n % 2 == 0:\n            return self.myPow(x * x, n // 2)\n        else:\n            return x * self.myPow(x * x, n // 2)"
    },
    {
        "number": 50,
        "title": "Pow(x, n)",
        "difficulty": 1,
        "pass": 5,
        "answer": "        if n == 0:\n            return 1\n        if n < 0:\n            return 1 / self.myPow(x, -n)\n        if n % 2 == 0:\n            return self.myPow(x * x, n // 2)\n        else:\n            return x * self.myPow(x * x, n // 2)"
    },
    {
        "number": 50,
        "title": "Pow(x, n)",
        "difficulty": 1,
        "pass": 6,
        "answer": "        if n == 0:\n            return 1\n        if n < 0:\n            return 1 / self.myPow(x, -n)\n        if n % 2 == 0:\n            return self.myPow(x * x, n // 2)\n        else:\n            return x * self.myPow(x * x, n // 2)"
    },
    {
        "number": 50,
        "title": "Pow(x, n)",
        "difficulty": 1,
        "pass": 7,
        "answer": "        if n == 0:\n            return 1\n        if n < 0:\n            return 1 / self.myPow(x, -n)\n        if n % 2 == 0:\n            return self.myPow(x * x, n // 2)\n        else:\n            return x * self.myPow(x * x, n // 2)"
    },
    {
        "number": 50,
        "title": "Pow(x, n)",
        "difficulty": 1,
        "pass": 8,
        "answer": "        if n == 0:\n            return 1\n        if n < 0:\n            return 1 / self.myPow(x, -n)\n        if n % 2 == 0:\n            return self.myPow(x * x, n // 2)\n        else:\n            return x * self.myPow(x * x, n // 2)"
    },
    {
        "number": 50,
        "title": "Pow(x, n)",
        "difficulty": 1,
        "pass": 9,
        "answer": "        if n == 0:\n            return 1\n        if n < 0:\n            return 1 / self.myPow(x, -n)\n        if n % 2 == 0:\n            return self.myPow(x * x, n // 2)\n        else:\n            return self.myPow(x * x, n // 2) * x"
    },
    {
        "number": 51,
        "title": "N-Queens",
        "difficulty": 2,
        "pass": 0,
        "answer": "        if n == 0:\n            return []\n        if n == 1:\n            return [['Q']]\n        res = []\n        self.dfs(n, 0, 0, '', res)\n        return res"
    },
    {
        "number": 51,
        "title": "N-Queens",
        "difficulty": 2,
        "pass": 1,
        "answer": "        res = []\n        if n == 0:\n            return res\n        self.dfs(n, 0, res, [])\n        return res"
    },
    {
        "number": 51,
        "title": "N-Queens",
        "difficulty": 2,
        "pass": 2,
        "answer": "        res = []\n        self.dfs(n, 0, [], res)\n        return res"
    },
    {
        "number": 51,
        "title": "N-Queens",
        "difficulty": 2,
        "pass": 3,
        "answer": "        if n <= 0:\n            return []\n        self.res = []\n        self.dfs(n, 0, [])\n        return self.res"
    },
    {
        "number": 51,
        "title": "N-Queens",
        "difficulty": 2,
        "pass": 4,
        "answer": "        if n == 1:\n            return [['Q']]\n        res = []\n        self.dfs(n, 0, [], res)\n        return res"
    },
    {
        "number": 51,
        "title": "N-Queens",
        "difficulty": 2,
        "pass": 5,
        "answer": "        if n == 0:\n            return []\n        if n == 1:\n            return [['Q']]\n        res = []\n        board = [['.' for _ in range(n)] for _ in range(n)]\n        self.dfs(board, 0, n, res)\n        return res"
    },
    {
        "number": 51,
        "title": "N-Queens",
        "difficulty": 2,
        "pass": 6,
        "answer": "        res = []\n        if n == 1:\n            res.append([\"Q\"])\n        else:\n            res = self.solveNQueens(n - 1)\n            for i in range(len(res)):\n                res[i].insert(0, \"Q\")\n                res[i].append(\"Q\")\n        return res"
    },
    {
        "number": 51,
        "title": "N-Queens",
        "difficulty": 2,
        "pass": 7,
        "answer": "        res = []\n        if n == 1:\n            res.append([\"Q\"])\n        else:\n            res = self.solveNQueens(n-1)\n            for i in range(len(res)):\n                for j in range(len(res[i])):\n                    res[i][j] = \"Q\" + res[i][j]\n            for i in range(len(res)):\n                for j in range(len(res[i])):\n                    res[i][j] = res[i][j][1:] + \"Q\" + res[i][j][0]\n        return res"
    },
    {
        "number": 51,
        "title": "N-Queens",
        "difficulty": 2,
        "pass": 8,
        "answer": "        def is_valid(board, row, col):\n            for i in range(col):\n                if board[row][i] == 'Q':\n                    return False\n            for i, j in zip(range(row, -1, -1), range(col, -1, -1)):\n                if board[i][j] == 'Q':\n                    return False\n            for i, j in zip(range(row, n, 1), range(col, -1, -1)):\n                if board[i][j] == 'Q':\n                    return False\n            return True"
    },
    {
        "number": 51,
        "title": "N-Queens",
        "difficulty": 2,
        "pass": 9,
        "answer": "        res = []\n        if n == 0:\n            return res\n        self.solveNQueens(n - 1, res)\n        board = [\".\" * n for _ in range(n)]\n        self.solveNQueens(n - 1, res, board)\n        return res"
    },
    {
        "number": 52,
        "title": "N-Queens II",
        "difficulty": 2,
        "pass": 0,
        "answer": "        if n < 1:\n            return 0\n        self.res = 0\n        self.dfs(n, 0, 0, 0, 0)\n        return self.res"
    },
    {
        "number": 52,
        "title": "N-Queens II",
        "difficulty": 2,
        "pass": 1,
        "answer": "        self.res = 0\n        self.dfs(n, 0, [])\n        return self.res"
    },
    {
        "number": 52,
        "title": "N-Queens II",
        "difficulty": 2,
        "pass": 2,
        "answer": "        if n < 1:\n            return 0\n        self.res = 0\n        self.dfs(n, 0, 0, 0, 0)\n        return self.res"
    },
    {
        "number": 52,
        "title": "N-Queens II",
        "difficulty": 2,
        "pass": 3,
        "answer": "        self.res = 0\n        self.dfs(n, 0, 0, 0, 0)\n        return self.res"
    },
    {
        "number": 52,
        "title": "N-Queens II",
        "difficulty": 2,
        "pass": 4,
        "answer": "        if n < 1:\n            return 0\n        self.res = 0\n        self.dfs(n, 0, 0, 0, 0)\n        return self.res"
    },
    {
        "number": 52,
        "title": "N-Queens II",
        "difficulty": 2,
        "pass": 5,
        "answer": "        self.res = 0\n        self.n = n\n        self.col = set()\n        self.diag1 = set()\n        self.diag2 = set()\n        self.dfs(0, 0, 0, 0)\n        return self.res"
    },
    {
        "number": 52,
        "title": "N-Queens II",
        "difficulty": 2,
        "pass": 6,
        "answer": "        if n == 0:\n            return 0\n        if n == 1:\n            return 1\n        if n == 2:\n            return 2\n        if n == 3:\n            return 4\n        if n == 4:\n            return 8\n        if n == 5:\n            return 13\n        if n == 6:\n            return 21\n        if n == 7:\n            return 34\n        if n == 8:\n            return 55\n        if n == 9:\n            return 89\n        if n == 10:\n            return 144\n        if n == 11:\n            return 233\n        if n == 12:\n            return 377\n        if n == 13:\n            return 610\n        if n == 14:\n            return 987\n        if n == 15:\n            return 1555\n        if n == 16:\n            return 2584\n        if n == 17:\n            return 4586\n        if n == 18:\n            return 6765\n        if n == 19:\n            return 10946\n        if n == 20:\n            return 17711\n        if n == 21:\n            return 28657\n"
    },
    {
        "number": 52,
        "title": "N-Queens II",
        "difficulty": 2,
        "pass": 7,
        "answer": "        self.res = 0\n        self.dfs(n, 0, 0, 0, 0)\n        return self.res"
    },
    {
        "number": 52,
        "title": "N-Queens II",
        "difficulty": 2,
        "pass": 8,
        "answer": "        self.res = 0\n        self.dfs(n, 0, 0, 0, 0)\n        return self.res"
    },
    {
        "number": 52,
        "title": "N-Queens II",
        "difficulty": 2,
        "pass": 9,
        "answer": "        self.res = 0"
    },
    {
        "number": 53,
        "title": "Maximum Subarray",
        "difficulty": 1,
        "pass": 0,
        "answer": "        if not nums:\n            return 0\n        if len(nums) == 1:\n            return nums[0]\n        if len(nums) == 2:\n            return max(nums[0], nums[1])\n        dp = [0] * len(nums)\n        dp[0] = nums[0]\n        dp[1] = max(nums[0], nums[1])\n        for i in range(2, len(nums)):\n            dp[i] = max(dp[i - 1], dp[i - 2] + nums[i])\n        return max(dp)"
    },
    {
        "number": 53,
        "title": "Maximum Subarray",
        "difficulty": 1,
        "pass": 1,
        "answer": "        if not nums:\n            return 0\n        n = len(nums)\n        dp = [0] * n\n        dp[0] = nums[0]\n        for i in range(1, n):\n            dp[i] = max(dp[i - 1] + nums[i], nums[i])\n        return max(dp)"
    },
    {
        "number": 53,
        "title": "Maximum Subarray",
        "difficulty": 1,
        "pass": 2,
        "answer": "        n = len(nums)\n        if n == 0:\n            return 0\n        if n == 1:\n            return nums[0]\n        dp = [0] * n\n        dp[0] = nums[0]\n        dp[1] = max(nums[0], nums[1])\n        for i in range(2, n):\n            dp[i] = max(dp[i - 1], dp[i - 2] + nums[i])\n        return max(dp)"
    },
    {
        "number": 53,
        "title": "Maximum Subarray",
        "difficulty": 1,
        "pass": 3,
        "answer": "        n = len(nums)\n        if n == 0:\n            return 0\n        if n == 1:\n            return nums[0]\n        dp = [0] * n\n        dp[0] = nums[0]\n        for i in range(1, n):\n            dp[i] = max(dp[i - 1] + nums[i], nums[i])\n        return max(dp)"
    },
    {
        "number": 53,
        "title": "Maximum Subarray",
        "difficulty": 1,
        "pass": 4,
        "answer": "        if not nums:\n            return 0\n        if len(nums) == 1:\n            return nums[0]\n        max_sum = nums[0]\n        current_sum = nums[0]\n        for i in range(1, len(nums)):\n            current_sum = max(nums[i], current_sum + nums[i])\n            max_sum = max(max_sum, current_sum)\n        return max_sum"
    },
    {
        "number": 53,
        "title": "Maximum Subarray",
        "difficulty": 1,
        "pass": 5,
        "answer": "        n = len(nums)\n        if n == 0:\n            return 0\n        dp = [0] * n\n        dp[0] = nums[0]\n        for i in range(1, n):\n            dp[i] = max(dp[i - 1] + nums[i], nums[i])\n        return max(dp)"
    },
    {
        "number": 53,
        "title": "Maximum Subarray",
        "difficulty": 1,
        "pass": 6,
        "answer": "        n = len(nums)\n        if n == 0:\n            return 0\n        if n == 1:\n            return nums[0]\n        if n == 2:\n            if nums[0] > 0:\n                return nums[0]\n            elif nums[1] > 0:\n                return nums[1]\n            else:\n                return 0\n        if n == 3:\n            if nums[0] > 0:\n                return nums[0]\n            elif nums[1] > 0:\n                return nums[1]\n            elif nums[2] > 0:\n                return nums[2]\n            else:\n                return 0\n        if n == 4:\n            if nums[0] > 0:\n                return nums[0]\n            elif nums[1] > 0:\n                return nums[1]\n            elif nums[2] > 0:\n                return nums[2]\n            elif nums[3] > 0:\n                return nums[3]\n            "
    },
    {
        "number": 53,
        "title": "Maximum Subarray",
        "difficulty": 1,
        "pass": 7,
        "answer": "        if len(nums) == 0:\n            return 0\n        if len(nums) == 1:\n            return nums[0]"
    },
    {
        "number": 53,
        "title": "Maximum Subarray",
        "difficulty": 1,
        "pass": 8,
        "answer": "        if len(nums) == 1:\n            return nums[0]\n        if len(nums) == 2:\n            if nums[0] > nums[1]:\n                return nums[0]\n            else:\n                return nums[1]\n        if len(nums) == 3:\n            if nums[0] > nums[1] and nums[0] > nums[2]:\n                return nums[0]\n            elif nums[1] > nums[0] and nums[1] > nums[2]:\n                return nums[1]\n            else:\n                return nums[2]\n        if len(nums) == 4:\n            if nums[0] > nums[1] and nums[0] > nums[2] and nums[0] > nums[3]:\n                return nums[0]\n            elif nums[1] > nums[0] and nums[1] > nums[2] and nums[1] > nums[3"
    },
    {
        "number": 53,
        "title": "Maximum Subarray",
        "difficulty": 1,
        "pass": 9,
        "answer": "        n = len(nums)\n        if n == 0:\n            return 0\n        if n == 1:\n            return nums[0]\n        dp = [0] * n\n        dp[0] = nums[0]\n        for i in range(1, n):\n            dp[i] = max(dp[i - 1] + nums[i], nums[i])\n        return max(dp)"
    },
    {
        "number": 54,
        "title": "Spiral Matrix",
        "difficulty": 1,
        "pass": 0,
        "answer": "        if not matrix:\n            return []\n        m, n = len(matrix), len(matrix[0])\n        res = []\n        i, j, di, dj = 0, 0, 0, 1\n        for _ in range(m * n):\n            res.append(matrix[i][j])\n            matrix[i][j] = None\n            if matrix[(i + di) % m][(j + dj) % n] is None:\n                di, dj = dj, -di\n            i += di\n            j += dj\n        return res"
    },
    {
        "number": 54,
        "title": "Spiral Matrix",
        "difficulty": 1,
        "pass": 1,
        "answer": "        if len(matrix) == 0:\n            return []\n        if len(matrix) == 1:\n            return matrix[0]\n        if len(matrix) == 2:\n            return matrix[0] + matrix[1]\n        if len(matrix) == 3:\n            return matrix[0] + matrix[1] + matrix[2]\n        if len(matrix) == 4:\n            return matrix[0] + matrix[1] + matrix[2] + matrix[3]\n        if len(matrix) == 5:\n            return matrix[0] + matrix[1] + matrix[2] + matrix[3] + matrix[4]\n        if len(matrix) == 6:\n            return matrix[0] + matrix[1] + matrix[2] + matrix[3] + matrix[4] + matrix[5]\n        if len(matrix) == 7:\n            return matrix[0] + matrix[1] + matrix[2] + matrix[3] + matrix[4] + matrix[5] + matrix[6]\n        if len("
    },
    {
        "number": 54,
        "title": "Spiral Matrix",
        "difficulty": 1,
        "pass": 2,
        "answer": "        if not matrix:\n            return []\n        m = len(matrix)\n        n = len(matrix[0])\n        if m == 1:\n            return matrix[0]\n        if n == 1:\n            return [x for x in matrix[0]]\n        result = []\n        for i in range(m):\n            result.append(matrix[i][0])\n        for i in range(1, n):\n            result.append(matrix[0][i])\n        for i in range(1, m):\n            result.append(matrix[i][n - 1])\n        for i in range(n - 2, -1, -1):\n            result.append(matrix[m - 1][i])\n        for i in range(m - 2, 0, -1):\n            result.append(matrix[i][0])\n        return result"
    },
    {
        "number": 54,
        "title": "Spiral Matrix",
        "difficulty": 1,
        "pass": 3,
        "answer": "        if not matrix:\n            return []\n        \n        m = len(matrix)\n        n = len(matrix[0])\n        res = []\n        \n        top, bottom, left, right = 0, m-1, 0, n-1\n        \n        while top <= bottom and left <= right:\n            for i in range(left, right+1):\n                res.append(matrix[top][i])\n            top += 1\n            \n            for i in range(top, bottom+1):\n                res.append(matrix[i][right])\n            right -= 1\n            \n            if top <= bottom:\n                for i in range(right, left-1, -1):\n                    res.append(matrix[bottom][i])\n                bottom -= 1\n                \n            if left <= right:\n                for i in range(bottom, top-1, -1):\n                    res.append(matrix[i][left])\n                left += 1\n        \n        return res\n"
    },
    {
        "number": 54,
        "title": "Spiral Matrix",
        "difficulty": 1,
        "pass": 4,
        "answer": "        if not matrix:\n            return []\n        m, n = len(matrix), len(matrix[0])\n        res = []\n        left, right, top, bottom = 0, n - 1, 0, m - 1\n        while left <= right and top <= bottom:\n            for i in range(left, right + 1):\n                res.append(matrix[top][i])\n            for i in range(top + 1, bottom + 1):\n                res.append(matrix[i][right])\n            if left < right and top < bottom:\n                for i in range(right - 1, left, -1):\n                    res.append(matrix[bottom][i])\n                for i in range(bottom, top, -1):\n                    res.append(matrix[i][left])\n            left, right, top, bottom = left + 1, right - 1, top + 1, bottom - 1\n        return res"
    },
    {
        "number": 54,
        "title": "Spiral Matrix",
        "difficulty": 1,
        "pass": 5,
        "answer": "        if not matrix:\n            return []\n        m = len(matrix)\n        n = len(matrix[0])\n        res = []\n        row = 0\n        col = 0\n        while row < m and col < n:\n            for i in range(col, n):\n                res.append(matrix[row][i])\n            row += 1\n            for i in range(row, m):\n                res.append(matrix[i][n - 1])\n            n -= 1\n            if row < m:\n                for i in range(n - 1, col - 1, -1):\n                    res.append(matrix[m - 1][i])\n                m -= 1\n            if col < n:\n                for i in range(m - 1, row - 1, -1):\n                    res.append(matrix[i][col])\n                col += 1\n        return res"
    },
    {
        "number": 54,
        "title": "Spiral Matrix",
        "difficulty": 1,
        "pass": 6,
        "answer": "        if not matrix:\n            return []\n        \n        m = len(matrix)\n        n = len(matrix[0])\n        \n        left = 0\n        right = n-1\n        top = 0\n        bottom = m-1\n        \n        result = []\n        \n        while left <= right and top <= bottom:\n            for i in range(left, right+1):\n                result.append(matrix[top][i])\n            for i in range(top+1, bottom+1):\n                result.append(matrix[i][right])\n            for i in range(right-1, left-1, -1):\n                if top < bottom:\n                    result.append(matrix[bottom][i])\n            for i in range(bottom-1, top, -1):\n                if left < right:\n                    result.append(matrix[i][left])\n            left += 1\n            right -= 1\n            top += 1\n            bottom -= 1\n        \n        return result"
    },
    {
        "number": 54,
        "title": "Spiral Matrix",
        "difficulty": 1,
        "pass": 7,
        "answer": "        if not matrix:\n            return []\n        m, n = len(matrix), len(matrix[0])\n        left, right, top, bottom = 0, n - 1, 0, m - 1\n        res = []\n        while left <= right and top <= bottom:\n            for i in range(left, right + 1):\n                res.append(matrix[top][i])\n            top += 1\n            for i in range(top, bottom + 1):\n                res.append(matrix[i][right])\n            right -= 1\n            if top <= bottom:\n                for i in range(right, left - 1, -1):\n                    res.append(matrix[bottom][i])\n            bottom -= 1\n            if left <= right:\n                for i in range(bottom, top - 1, -1):\n                    res.append(matrix[i][left])\n            left += 1\n        return res"
    },
    {
        "number": 54,
        "title": "Spiral Matrix",
        "difficulty": 1,
        "pass": 8,
        "answer": "        if not matrix:\n            return []\n        \n        m, n = len(matrix), len(matrix[0])\n        visited = [[False] * n for _ in range(m)]\n        visited[0][0] = True\n        directions = [(0, 1), (1, 0), (0, -1), (-1, 0)]\n        x, y = 0, 0\n        res = []\n        for _ in range(m * n):\n            res.append(matrix[x][y])\n            visited[x][y] = True\n            next_x, next_y = x + directions[0][0], y + directions[0][1]\n            if 0 <= next_x < m and 0 <= next_y < n and not visited[next_x][next_y]:\n                x, y = next_x, next_y\n            else:\n                next_x, next_y = x + directions[1][0], y + directions[1][1]\n                if 0 <= next_x < m and 0 <= next_y < n and"
    },
    {
        "number": 54,
        "title": "Spiral Matrix",
        "difficulty": 1,
        "pass": 9,
        "answer": "        if not matrix:\n            return []\n        \n        m = len(matrix)\n        n = len(matrix[0])\n        res = []\n        \n        i = 0\n        j = 0\n        \n        while i < m and j < n:\n            for j in range(j, n):\n                res.append(matrix[i][j])\n            i += 1\n            \n            for i in range(i, m):\n                res.append(matrix[i][n-1])\n            n -= 1\n            \n            if i < m:\n                for j in range(n-1, j-1, -1):\n                    res.append(matrix[m-1][j])\n                m -= 1\n            \n            if j < n:\n                for i in range(m-1, i-1, -1):\n                    res.append(matrix[i][j])\n                n -= 1\n        \n        return res\n        \n        \nclass Solution:\n    def spiralOrder(self, matrix: List[List[int]]) -> List[int"
    },
    {
        "number": 55,
        "title": "Jump Game",
        "difficulty": 1,
        "pass": 0,
        "answer": "        n = len(nums)\n        if n == 0:\n            return False\n        if n == 1:\n            return True\n        if nums[0] == 0:\n            return False\n        for i in range(1, n):\n            if i + nums[i] >= n - 1:\n                return True\n        return False"
    },
    {
        "number": 55,
        "title": "Jump Game",
        "difficulty": 1,
        "pass": 1,
        "answer": "        n = len(nums)\n        if n == 1:\n            return True\n        if nums[0] == 0:\n            return False\n        if nums[0] == n - 1:\n            return True\n        for i in range(1, n):\n            if i + nums[i] >= n - 1:\n                return True\n        return False"
    },
    {
        "number": 55,
        "title": "Jump Game",
        "difficulty": 1,
        "pass": 2,
        "answer": "        n = len(nums)\n        if n == 1:\n            return True\n        for i in range(n-1):\n            if i + nums[i] >= n-1:\n                return True\n        return False"
    },
    {
        "number": 55,
        "title": "Jump Game",
        "difficulty": 1,
        "pass": 3,
        "answer": "        n = len(nums)\n        if n == 1:\n            return True\n        if nums[0] == 0:\n            return False\n        for i in range(1, n):\n            if i + nums[i] >= n - 1:\n                return True\n        return False"
    },
    {
        "number": 55,
        "title": "Jump Game",
        "difficulty": 1,
        "pass": 4,
        "answer": "        n = len(nums)\n        if n == 1:\n            return True\n        if nums[0] == 0:\n            return False\n        for i in range(1, n):\n            if i + nums[i] >= n - 1:\n                return True\n        return False"
    },
    {
        "number": 55,
        "title": "Jump Game",
        "difficulty": 1,
        "pass": 5,
        "answer": "        n = len(nums)\n        if n == 1:\n            return True\n        if n == 2:\n            return True if nums[0] >= nums[1] else False\n        if n == 3:\n            return True if nums[0] >= nums[1] and nums[0] >= nums[2] else False\n        if n == 4:\n            return True if nums[0] >= nums[1] and nums[0] >= nums[2] and nums[0] >= nums[3] else False\n        i = 0\n        while i < n - 1:\n            if i + nums[i] >= n - 1:\n                return True\n            i += 1\n        return False"
    },
    {
        "number": 55,
        "title": "Jump Game",
        "difficulty": 1,
        "pass": 6,
        "answer": "        n = len(nums)\n        if n == 1:\n            return True\n        if nums[0] == 0:\n            return False\n        for i in range(1, n):\n            if i + nums[i] >= n - 1:\n                return True\n        return False"
    },
    {
        "number": 55,
        "title": "Jump Game",
        "difficulty": 1,
        "pass": 7,
        "answer": "        n = len(nums)\n        if n == 1:\n            return True\n        if n == 2:\n            return nums[0] == 1 or nums[1] == 1\n        if n == 3:\n            return nums[0] == 1 or nums[1] == 1 or nums[2] == 1\n        if n == 4:\n            return nums[0] == 1 or nums[1] == 1 or nums[2] == 1 or nums[3] == 1\n        for i in range(n):\n            if i + nums[i] >= n - 1:\n                return True\n        return False"
    },
    {
        "number": 55,
        "title": "Jump Game",
        "difficulty": 1,
        "pass": 8,
        "answer": "        n = len(nums)\n        if n == 1:\n            return True\n        if n == 2:\n            return True if nums[1] > 0 else False\n        if n == 3:\n            return True if nums[1] > 0 and nums[2] > 0 else False\n        if n == 4:\n            return True if nums[1] > 0 and nums[2] > 0 and nums[3] > 0 else False\n        if n == 5:\n            return True if nums[1] > 0 and nums[2] > 0 and nums[3] > 0 and nums[4] > 0 else False\n        if n == 6:\n            return True if nums[1] > 0 and nums[2] > 0 and nums[3] > 0 and nums[4] > 0 and nums[5] > 0 else False\n        if n == 7:\n            return True if nums[1] > 0 and nums[2] > 0 and nums[3] > 0 and nums[4] > 0 and nums"
    },
    {
        "number": 55,
        "title": "Jump Game",
        "difficulty": 1,
        "pass": 9,
        "answer": "        n = len(nums)\n        if n == 1:\n            return True\n        if nums[0] == 0:\n            return False\n        for i in range(1, n):\n            if i + nums[i] >= n - 1:\n                return True\n        return False"
    },
    {
        "number": 56,
        "title": "Merge Intervals",
        "difficulty": 1,
        "pass": 0,
        "answer": "        \n        intervals.sort(key=lambda x: x[0])\n        merged = []\n        for interval in intervals:\n            if not merged or merged[-1][1] < interval[0]:\n                merged.append(interval)\n            else:\n                merged[-1][1] = max(merged[-1][1], interval[1])\n        return merged"
    },
    {
        "number": 56,
        "title": "Merge Intervals",
        "difficulty": 1,
        "pass": 1,
        "answer": "        if not intervals:\n            return []\n        \n        intervals.sort(key=lambda x: x[0])\n        merged = []\n        \n        for interval in intervals:\n            if not merged or merged[-1][1] < interval[0]:\n                merged.append(interval)\n            else:\n                merged[-1][1] = max(merged[-1][1], interval[1])\n        \n        return merged"
    },
    {
        "number": 56,
        "title": "Merge Intervals",
        "difficulty": 1,
        "pass": 2,
        "answer": "        if not intervals:\n            return []\n        \n        intervals.sort(key=lambda x: x[0])\n        merged = []\n        \n        for interval in intervals:\n            if not merged or merged[-1][1] < interval[0]:\n                merged.append(interval)\n            else:\n                merged[-1][1] = max(merged[-1][1], interval[1])\n        \n        return merged"
    },
    {
        "number": 56,
        "title": "Merge Intervals",
        "difficulty": 1,
        "pass": 3,
        "answer": "        if len(intervals) <= 1:\n            return intervals\n        \n        intervals.sort(key=lambda x: x[0])\n        merged = []\n        \n        for interval in intervals:\n            if not merged or merged[-1][1] < interval[0]:\n                merged.append(interval)\n            else:\n                merged[-1][1] = max(merged[-1][1], interval[1])\n        \n        return merged"
    },
    {
        "number": 56,
        "title": "Merge Intervals",
        "difficulty": 1,
        "pass": 4,
        "answer": "        if not intervals:\n            return []\n        \n        intervals.sort(key=lambda x:x[0])\n        merged = []\n        for interval in intervals:\n            if not merged or merged[-1][1] < interval[0]:\n                merged.append(interval)\n            else:\n                merged[-1][1] = max(merged[-1][1], interval[1])\n        return merged"
    },
    {
        "number": 56,
        "title": "Merge Intervals",
        "difficulty": 1,
        "pass": 5,
        "answer": "        if not intervals:\n            return []\n        \n        intervals.sort(key=lambda x: x[0])\n        merged = []\n        \n        for interval in intervals:\n            if not merged or merged[-1][1] < interval[0]:\n                merged.append(interval)\n            else:\n                merged[-1][1] = max(merged[-1][1], interval[1])\n        \n        return merged\n        \n        \n        \nclass Solution:\n    def merge(self, intervals: List[List[int]]) -> List[List[int]]:\n        \"\"\"\n        Given an array of intervals where intervals[i] = [starti, endi], merge all overlapping intervals, and return an array of the non-overlapping intervals that cover all the intervals in the input.\n        Example 1:\n        Input: intervals = [[1,3],[2,6],[8,10],[15,18]]\n        Output: [[1,6],[8,10],[15,18]]\n        Explanation: Since intervals [1,3] and [2,"
    },
    {
        "number": 56,
        "title": "Merge Intervals",
        "difficulty": 1,
        "pass": 6,
        "answer": "        if not intervals:\n            return []\n        \n        intervals.sort(key=lambda x: x[0])\n        merged = []\n        \n        for interval in intervals:\n            if not merged or merged[-1][1] < interval[0]:\n                merged.append(interval)\n            else:\n                merged[-1][1] = max(merged[-1][1], interval[1])\n        \n        return merged"
    },
    {
        "number": 56,
        "title": "Merge Intervals",
        "difficulty": 1,
        "pass": 7,
        "answer": "        if not intervals:\n            return []\n        \n        intervals.sort(key=lambda x: x[0])\n        merged = []\n        for interval in intervals:\n            if not merged or merged[-1][1] < interval[0]:\n                merged.append(interval)\n            else:\n                merged[-1][1] = max(merged[-1][1], interval[1])\n        \n        return merged"
    },
    {
        "number": 56,
        "title": "Merge Intervals",
        "difficulty": 1,
        "pass": 8,
        "answer": "        if not intervals:\n            return []\n        \n        intervals.sort(key=lambda x: x[0])\n        merged = []\n        \n        for interval in intervals:\n            if not merged or merged[-1][1] < interval[0]:\n                merged.append(interval)\n            else:\n                merged[-1][1] = max(merged[-1][1], interval[1])\n        \n        return merged"
    },
    {
        "number": 56,
        "title": "Merge Intervals",
        "difficulty": 1,
        "pass": 9,
        "answer": "        if not intervals:\n            return []\n        \n        intervals.sort(key=lambda x: x[0])\n        merged = []\n        \n        for interval in intervals:\n            if not merged or merged[-1][1] < interval[0]:\n                merged.append(interval)\n            else:\n                merged[-1][1] = max(merged[-1][1], interval[1])\n        \n        return merged"
    },
    {
        "number": 57,
        "title": "Insert Interval",
        "difficulty": 1,
        "pass": 0,
        "answer": "        if not intervals:\n            return [[newInterval[0], newInterval[1]]]\n        \n        res = []\n        i = 0\n        while i < len(intervals) and intervals[i][1] < newInterval[0]:\n            res.append(intervals[i])\n            i += 1\n        \n        while i < len(intervals) and intervals[i][0] <= newInterval[1]:\n            newInterval[0] = min(intervals[i][0], newInterval[0])\n            newInterval[1] = max(intervals[i][1], newInterval[1])\n            i += 1\n        \n        res.append(newInterval)\n        while i < len(intervals):\n            res.append(intervals[i])\n            i += 1\n        \n        return res"
    },
    {
        "number": 57,
        "title": "Insert Interval",
        "difficulty": 1,
        "pass": 1,
        "answer": "        i = 0\n        while i < len(intervals) and intervals[i][1] < newInterval[0]:\n            i += 1\n        j = i\n        while j < len(intervals) and intervals[j][0] < newInterval[1]:\n            j += 1\n        if j == len(intervals):\n            intervals.append(newInterval)\n        else:\n            intervals[j][0] = min(intervals[j][0], newInterval[0])\n            intervals[j][1] = max(intervals[j][1], newInterval[1])\n        return intervals[:i] + sorted(intervals[i:j], key=lambda x: x[0]) + intervals[j:]"
    },
    {
        "number": 57,
        "title": "Insert Interval",
        "difficulty": 1,
        "pass": 2,
        "answer": "        i = 0\n        while i < len(intervals) and intervals[i][1] < newInterval[0]:\n            i += 1\n        if i == len(intervals):\n            intervals.append(newInterval)\n        else:\n            intervals.insert(i, newInterval)\n        res = []\n        for interval in intervals:\n            if not res or res[-1][1] < interval[0]:\n                res.append(interval)\n            else:\n                res[-1][1] = max(res[-1][1], interval[1])\n        return res"
    },
    {
        "number": 57,
        "title": "Insert Interval",
        "difficulty": 1,
        "pass": 3,
        "answer": "        if not intervals:\n            return [[newInterval[0], newInterval[1]]]\n        \n        res = []\n        i = 0\n        while i < len(intervals) and intervals[i][1] < newInterval[0]:\n            res.append(intervals[i])\n            i += 1\n        \n        while i < len(intervals) and intervals[i][0] <= newInterval[1]:\n            newInterval[0] = min(intervals[i][0], newInterval[0])\n            newInterval[1] = max(intervals[i][1], newInterval[1])\n            i += 1\n        \n        res.append(newInterval)\n        while i < len(intervals):\n            res.append(intervals[i])\n            i += 1\n        \n        return res"
    },
    {
        "number": 57,
        "title": "Insert Interval",
        "difficulty": 1,
        "pass": 4,
        "answer": "        # Time: O(n)\n        # Space: O(1)\n        if not intervals:\n            return [newInterval]\n        res = []\n        i = 0\n        while i < len(intervals) and intervals[i][1] < newInterval[0]:\n            res.append(intervals[i])\n            i += 1\n        while i < len(intervals) and intervals[i][0] <= newInterval[1]:\n            newInterval[0] = min(intervals[i][0], newInterval[0])\n            newInterval[1] = max(intervals[i][1], newInterval[1])\n            i += 1\n        res.append(newInterval)\n        while i < len(intervals):\n            res.append(intervals[i])\n            i += 1\n        return res"
    },
    {
        "number": 57,
        "title": "Insert Interval",
        "difficulty": 1,
        "pass": 5,
        "answer": "        i = 0\n        while i < len(intervals) and intervals[i][1] < newInterval[0]:\n            i += 1\n        if i == len(intervals):\n            intervals.append(newInterval)\n        else:\n            intervals.insert(i, newInterval)\n        res = []\n        for interval in intervals:\n            if not res or res[-1][1] < interval[0]:\n                res.append(interval)\n            else:\n                res[-1][1] = max(res[-1][1], interval[1])\n        return res"
    },
    {
        "number": 57,
        "title": "Insert Interval",
        "difficulty": 1,
        "pass": 6,
        "answer": "        if not intervals:\n            return [[newInterval[0], newInterval[1]]]\n        res = []\n        i = 0\n        while i < len(intervals) and intervals[i][1] < newInterval[0]:\n            res.append(intervals[i])\n            i += 1\n        while i < len(intervals) and intervals[i][0] <= newInterval[1]:\n            newInterval[0] = min(intervals[i][0], newInterval[0])\n            newInterval[1] = max(intervals[i][1], newInterval[1])\n            i += 1\n        res.append(newInterval)\n        while i < len(intervals):\n            res.append(intervals[i])\n            i += 1\n        return res"
    },
    {
        "number": 57,
        "title": "Insert Interval",
        "difficulty": 1,
        "pass": 7,
        "answer": "        i = 0\n        while i < len(intervals) and intervals[i][1] < newInterval[0]:\n            i += 1\n        if i == len(intervals):\n            intervals.append(newInterval)\n        else:\n            intervals.insert(i, newInterval)\n        res = []\n        for interval in intervals:\n            if not res or res[-1][1] < interval[0]:\n                res.append(interval)\n            else:\n                res[-1][1] = max(res[-1][1], interval[1])\n        return res"
    },
    {
        "number": 57,
        "title": "Insert Interval",
        "difficulty": 1,
        "pass": 8,
        "answer": "        if not intervals:\n            return [newInterval]\n        i = 0\n        while i < len(intervals) and intervals[i][1] < newInterval[0]:\n            i += 1\n        if i == len(intervals):\n            return intervals + [newInterval]\n        if newInterval[0] < intervals[i][0]:\n            return intervals[:i] + [newInterval] + intervals[i:]\n        j = i\n        while j < len(intervals) and intervals[j][0] < newInterval[1]:\n            j += 1\n        if j == len(intervals):\n            return intervals[:i] + [newInterval] + intervals[i:]\n        return intervals[:i] + [[min(intervals[i][0], newInterval[0]), max(intervals[j][1], newInterval[1])]] + intervals[j:]"
    },
    {
        "number": 57,
        "title": "Insert Interval",
        "difficulty": 1,
        "pass": 9,
        "answer": "        if len(intervals) == 0:\n            return [newInterval]\n        if newInterval[0] < intervals[0][0]:\n            intervals.insert(0, newInterval)\n            return intervals\n        if newInterval[1] > intervals[-1][1]:\n            intervals.append(newInterval)\n            return intervals\n        i = 0\n        while i < len(intervals) and intervals[i][0] < newInterval[0]:\n            i += 1\n        j = i\n        while j < len(intervals) and intervals[j][1] < newInterval[1]:\n            j += 1\n        if j == len(intervals):\n            intervals.append(newInterval)\n        else:\n            intervals.insert(j, newInterval)\n        return intervals"
    },
    {
        "number": 58,
        "title": "Length of Last Word",
        "difficulty": 0,
        "pass": 0,
        "answer": "        if not s:\n            return 0\n        words = s.split()\n        if len(words) == 0:\n            return 0\n        return len(words[-1])"
    },
    {
        "number": 58,
        "title": "Length of Last Word",
        "difficulty": 0,
        "pass": 1,
        "answer": "        if not s:\n            return 0\n        words = s.split()\n        if len(words) == 0:\n            return 0\n        return len(words[-1])"
    },
    {
        "number": 58,
        "title": "Length of Last Word",
        "difficulty": 0,
        "pass": 2,
        "answer": "        if not s:\n            return 0\n        i = len(s) - 1\n        while i >= 0 and s[i] =='':\n            i -= 1\n        j = i\n        while j >= 0 and s[j]!='':\n            j -= 1\n        return j + 1"
    },
    {
        "number": 58,
        "title": "Length of Last Word",
        "difficulty": 0,
        "pass": 3,
        "answer": "        if not s:\n            return 0\n        i = len(s) - 1\n        while i >= 0 and s[i] =='':\n            i -= 1\n        if i == -1:\n            return 0\n        j = i\n        while j < len(s) and s[j]!='':\n            j += 1\n        return j - i - 1"
    },
    {
        "number": 58,
        "title": "Length of Last Word",
        "difficulty": 0,
        "pass": 4,
        "answer": "        i = len(s) - 1\n        while i >= 0 and s[i] =='':\n            i -= 1\n        if i == -1:\n            return 0\n        j = i\n        while j < len(s) and s[j]!='':\n            j += 1\n        return j - i - 1"
    },
    {
        "number": 58,
        "title": "Length of Last Word",
        "difficulty": 0,
        "pass": 5,
        "answer": "        if not s:\n            return 0\n        s = s.strip()\n        i = len(s) - 1\n        while i >= 0 and s[i] =='':\n            i -= 1\n        if i == -1:\n            return 0\n        while i >= 0 and s[i]!='':\n            i -= 1\n        return i + 1"
    },
    {
        "number": 58,
        "title": "Length of Last Word",
        "difficulty": 0,
        "pass": 6,
        "answer": "        if not s:\n            return 0\n        i = len(s) - 1\n        while i >= 0 and s[i] =='':\n            i -= 1\n        j = i\n        while j >= 0 and s[j]!='':\n            j -= 1\n        return j + 1"
    },
    {
        "number": 58,
        "title": "Length of Last Word",
        "difficulty": 0,
        "pass": 7,
        "answer": "        # s = \"   fly me   to   the moon  \"\n        # s = \"luffy is still joyboy\"\n        # s = \"Hello World\"\n        # s = \"   fly me   to   the moon  \"\n        # s = \"   fly me   to   the moon  \"\n        # s = \"   fly me   to   the moon  \"\n        # s = \"   fly me   to   the moon  \"\n        # s = \"   fly me   to   the moon  \"\n        # s = \"   fly me   to   the moon  \"\n        # s = \"   fly me   to   the moon  \"\n        # s = \"   fly me   to   the moon  \"\n        # s = \"   fly me   to   the moon  \"\n        # s = \"   fly me   to   the moon  \"\n        # s = \"   fly me   to   the moon  \"\n        # s = \"   fly me   to   the moon  \"\n        # s = \"   fly me   to   the moon  \"\n        # s ="
    },
    {
        "number": 58,
        "title": "Length of Last Word",
        "difficulty": 0,
        "pass": 8,
        "answer": "        if not s:\n            return 0\n        if len(s) == 1:\n            return 1\n        i = len(s) - 1\n        while i >= 0 and s[i] =='':\n            i -= 1\n        if i == -1:\n            return 0\n        j = i\n        while j >= 0 and s[j]!='':\n            j -= 1\n        return j + 1"
    },
    {
        "number": 58,
        "title": "Length of Last Word",
        "difficulty": 0,
        "pass": 9,
        "answer": "        if not s:\n            return 0"
    },
    {
        "number": 59,
        "title": "Spiral Matrix II",
        "difficulty": 1,
        "pass": 0,
        "answer": "        if n == 1:\n            return [[1]]\n        matrix = [[0] * n for _ in range(n)]\n        left, right, top, bottom = 0, n - 1, 0, n - 1\n        num = 1\n        while left <= right and top <= bottom:\n            for i in range(left, right + 1):\n                matrix[top][i] = num\n                num += 1\n            top += 1\n            for i in range(top, bottom + 1):\n                matrix[i][right] = num\n                num += 1\n            right -= 1\n            if top <= bottom:\n                for i in range(right, left - 1, -1):\n                    matrix[bottom][i] = num\n                    num += 1\n                bottom -= 1\n            if left <= right:\n                for i in range(bottom, top - 1, -1):\n                    matrix[i][left] = num\n                    num += 1\n                left += 1\n        return matrix"
    },
    {
        "number": 59,
        "title": "Spiral Matrix II",
        "difficulty": 1,
        "pass": 1,
        "answer": "        \n        if n == 1:\n            return [[1]]\n        \n        res = [[0 for _ in range(n)] for _ in range(n)]\n        \n        left = 0\n        right = n - 1\n        up = 0\n        down = n - 1\n        \n        direction = 'right'\n        \n        while left <= right and up <= down:\n            for i in range(left, right + 1):\n                res[up][i] = i + 1\n            up += 1\n            \n            for i in range(up, down + 1):\n                res[i][right] = i + 1\n            right -= 1\n            \n            if direction == 'right':\n                for i in range(right, left - 1, -1):\n                    res[down][i] = i + 1\n                down -= 1\n            elif direction == 'down':\n                for i in range(down, up - 1, -1):\n                    res[i][left] = i + 1\n                left += 1\n            elif direction == 'left':\n                for i in range(left, right"
    },
    {
        "number": 59,
        "title": "Spiral Matrix II",
        "difficulty": 1,
        "pass": 2,
        "answer": "        if n == 1:\n            return [[1]]\n        matrix = [[0] * n for _ in range(n)]\n        left, right, top, bottom = 0, n - 1, 0, n - 1\n        num = 1\n        while left <= right and top <= bottom:\n            for i in range(left, right + 1):\n                matrix[top][i] = num\n                num += 1\n            top += 1\n            for i in range(top, bottom + 1):\n                matrix[i][right] = num\n                num += 1\n            right -= 1\n            if top <= bottom:\n                for i in range(right, left - 1, -1):\n                    matrix[bottom][i] = num\n                    num += 1\n                bottom -= 1\n            if left <= right:\n                for i in range(bottom, top - 1, -1):\n                    matrix[i][left] = num\n                    num += 1\n                left += 1\n        return matrix"
    },
    {
        "number": 59,
        "title": "Spiral Matrix II",
        "difficulty": 1,
        "pass": 3,
        "answer": "        matrix = [[0 for _ in range(n)] for _ in range(n)]\n        top, bottom, left, right = 0, n-1, 0, n-1\n        count = 1\n        while top <= bottom and left <= right:\n            for i in range(left, right+1):\n                matrix[top][i] = count\n                count += 1\n            top += 1\n            for i in range(top, bottom+1):\n                matrix[i][right] = count\n                count += 1\n            right -= 1\n            if top <= bottom:\n                for i in range(right, left-1, -1):\n                    matrix[bottom][i] = count\n                    count += 1\n                bottom -= 1\n            if left <= right:\n                for i in range(bottom, top-1, -1):\n                    matrix[i][left] = count\n                    count += 1\n                left += 1\n        return matrix"
    },
    {
        "number": 59,
        "title": "Spiral Matrix II",
        "difficulty": 1,
        "pass": 4,
        "answer": "        if n == 1:\n            return [[1]]\n        matrix = [[0 for _ in range(n)] for _ in range(n)]\n        left, right, top, bottom = 0, n - 1, 0, n - 1\n        num = 1\n        while left <= right and top <= bottom:\n            for i in range(left, right + 1):\n                matrix[top][i] = num\n                num += 1\n            top += 1\n            for i in range(top, bottom + 1):\n                matrix[i][right] = num\n                num += 1\n            right -= 1\n            for i in range(right, left - 1, -1):\n                matrix[bottom][i] = num\n                num += 1\n            bottom -= 1\n            for i in range(bottom, top - 1, -1):\n                matrix[i][left] = num\n                num += 1\n            left += 1\n        return matrix"
    },
    {
        "number": 59,
        "title": "Spiral Matrix II",
        "difficulty": 1,
        "pass": 5,
        "answer": "        if n == 1:\n            return [[1]]\n        \n        matrix = [[0] * n for _ in range(n)]\n        \n        i, j, di, dj = 0, 0, 0, 1\n        for k in range(1, n * n + 1):\n            matrix[i][j] = k\n            if matrix[(i + di) % n][(j + dj) % n]:\n                di, dj = dj, -di\n            i += di\n            j += dj\n        \n        return matrix"
    },
    {
        "number": 59,
        "title": "Spiral Matrix II",
        "difficulty": 1,
        "pass": 6,
        "answer": "        \n        if n == 1:\n            return [[1]]\n        \n        matrix = [[0] * n for _ in range(n)]\n        \n        i, j, di, dj = 0, 0, 0, 1\n        \n        for k in range(1, n * n + 1):\n            matrix[i][j] = k\n            if matrix[(i + di) % n][(j + dj) % n]:\n                di, dj = dj, -di\n            i += di\n            j += dj\n        \n        return matrix\n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n"
    },
    {
        "number": 59,
        "title": "Spiral Matrix II",
        "difficulty": 1,
        "pass": 7,
        "answer": "        if n == 1:\n            return [[1]]\n        res = [[0 for _ in range(n)] for _ in range(n)]\n        left = 0\n        right = n - 1\n        up = 0\n        down = n - 1\n        num = 1\n        while left <= right and up <= down:\n            for i in range(left, right + 1):\n                res[up][i] = num\n                num += 1\n            up += 1\n            for i in range(up, down + 1):\n                res[i][right] = num\n                num += 1\n            right -= 1\n            for i in range(right, left - 1, -1):\n                res[down][i] = num\n                num += 1\n            down -= 1\n            for i in range(down, up - 1, -1):\n                res[i][left] = num\n                num += 1\n            left += 1\n        return res"
    },
    {
        "number": 59,
        "title": "Spiral Matrix II",
        "difficulty": 1,
        "pass": 8,
        "answer": "        if n == 1:\n            return [[1]]\n        res = [[0 for _ in range(n)] for _ in range(n)]\n        left, right, top, bottom = 0, n-1, 0, n-1\n        num = 1\n        while left <= right and top <= bottom:\n            for i in range(left, right+1):\n                res[top][i] = num\n                num += 1\n            top += 1\n            for i in range(top, bottom+1):\n                res[i][right] = num\n                num += 1\n            right -= 1\n            if top <= bottom:\n                for i in range(right, left-1, -1):\n                    res[bottom][i] = num\n                    num += 1\n                bottom -= 1\n            if left <= right:\n                for i in range(bottom, top-1, -1):\n                    res[i][left] = num\n                    num += 1\n                left += 1\n        return res"
    },
    {
        "number": 59,
        "title": "Spiral Matrix II",
        "difficulty": 1,
        "pass": 9,
        "answer": "        if n == 0:\n            return []\n        if n == 1:\n            return [[1]]\n        matrix = [[0 for _ in range(n)] for _ in range(n)]\n        i, j, di, dj = 0, 0, 0, 1\n        for k in range(1, n * n + 1):\n            matrix[i][j] = k\n            if matrix[(i + di) % n][(j + dj) % n]:\n                di, dj = dj, -di\n            i += di\n            j += dj\n        return matrix"
    },
    {
        "number": 60,
        "title": "Permutation Sequence",
        "difficulty": 2,
        "pass": 0,
        "answer": "        nums = list(range(1, n + 1))\n        res = \"\"\n        k -= 1\n        while n > 0:\n            index = k // math.factorial(n - 1)\n            res += str(nums[index])\n            nums.remove(nums[index])\n            k %= math.factorial(n - 1)\n            n -= 1\n        return res"
    },
    {
        "number": 60,
        "title": "Permutation Sequence",
        "difficulty": 2,
        "pass": 1,
        "answer": "        if n == 1:\n            return \"1\"\n        nums = list(range(1, n + 1))\n        k -= 1\n        res = \"\"\n        while n > 0:\n            n -= 1\n            idx = k // math.factorial(n)\n            res += str(nums[idx])\n            nums.pop(idx)\n            k %= math.factorial(n)\n        return res"
    },
    {
        "number": 60,
        "title": "Permutation Sequence",
        "difficulty": 2,
        "pass": 2,
        "answer": "        if n == 1:\n            return \"1\"\n        if n == 2:\n            return \"12\"\n        if n == 3:\n            return \"123\"\n        if n == 4:\n            return \"1234\"\n        if n == 5:\n            return \"12345\"\n        if n == 6:\n            return \"123456\"\n        if n == 7:\n            return \"1234567\"\n        if n == 8:\n            return \"12345678\"\n        if n == 9:\n            return \"123456789\"\n        if n == 10:\n            return \"1234567890\"\n        if n == 11:\n            return \"12345678901\"\n        if n == 12:\n            return \"123456789012\"\n        if n == 13:\n            return \"1234567890123\"\n        if n == 14:\n            return \"12345678901234\"\n        if n == 15:\n            return \"123456789012345\"\n        if n == 16:\n            return \"1234567890123456\""
    },
    {
        "number": 60,
        "title": "Permutation Sequence",
        "difficulty": 2,
        "pass": 3,
        "answer": "        res = ''\n        factorial = 1\n        for i in range(1, n + 1):\n            factorial *= i\n        k -= 1\n        for i in range(n, 0, -1):\n            index = k // factorial\n            res += str(i)\n            k %= factorial\n            factorial //= i\n        return res"
    },
    {
        "number": 60,
        "title": "Permutation Sequence",
        "difficulty": 2,
        "pass": 4,
        "answer": "        if n == 1:\n            return \"1\"\n        if n == 2:\n            return \"12\"\n        if n == 3:\n            return \"123\"\n        if n == 4:\n            return \"1234\"\n        if n == 5:\n            return \"12345\"\n        if n == 6:\n            return \"123456\"\n        if n == 7:\n            return \"1234567\"\n        if n == 8:\n            return \"12345678\"\n        if n == 9:\n            return \"123456789\"\n        if n == 10:\n            return \"1234567890\"\n        if n == 11:\n            return \"12345678901\"\n        if n == 12:\n            return \"123456789012\"\n        if n == 13:\n            return \"1234567890123\"\n        if n == 14:\n            return \"12345678901234\"\n        if n == 15:\n            return \"123456789012345\"\n        if n == 16:\n            return \"1234567890123456\""
    },
    {
        "number": 60,
        "title": "Permutation Sequence",
        "difficulty": 2,
        "pass": 5,
        "answer": "        nums = list(range(1, n + 1))\n        res = \"\"\n        k -= 1\n        while n > 0:\n            n -= 1\n            index = k // math.factorial(n)\n            res += str(nums[index])\n            nums.pop(index)\n            k %= math.factorial(n)\n        return res"
    },
    {
        "number": 60,
        "title": "Permutation Sequence",
        "difficulty": 2,
        "pass": 6,
        "answer": "        if n == 1:\n            return \"1\"\n        nums = list(range(1, n + 1))\n        res = \"\"\n        k -= 1\n        while len(nums) > 0:\n            index = k // math.factorial(len(nums) - 1)\n            res += str(nums[index])\n            nums.pop(index)\n            k = k % math.factorial(len(nums) - 1)\n        return res"
    },
    {
        "number": 60,
        "title": "Permutation Sequence",
        "difficulty": 2,
        "pass": 7,
        "answer": "        res = ''\n        factorial = 1\n        for i in range(1, n + 1):\n            factorial *= i\n        factorial = int(factorial)\n        k -= 1\n        for i in range(n, 0, -1):\n            index = k // factorial\n            res += str(i)\n            k = k % factorial\n            factorial //= i\n        return res"
    },
    {
        "number": 60,
        "title": "Permutation Sequence",
        "difficulty": 2,
        "pass": 8,
        "answer": "        if n == 1:\n            return \"1\"\n        if n == 2:\n            return \"12\"\n        if n == 3:\n            return \"123\"\n        if n == 4:\n            return \"1234\"\n        if n == 5:\n            return \"12345\"\n        if n == 6:\n            return \"123456\"\n        if n == 7:\n            return \"1234567\"\n        if n == 8:\n            return \"12345678\"\n        if n == 9:\n            return \"123456789\"\n        if n == 10:\n            return \"1234567890\"\n        if n == 11:\n            return \"12345678901\"\n        if n == 12:\n            return \"123456789012\"\n        if n == 13:\n            return \"1234567890123\"\n        if n == 14:\n            return \"12345678901234\"\n        if n == 15:\n            return \"123456789012345\"\n        if n == 16:\n            return \"1234567890123456\""
    },
    {
        "number": 60,
        "title": "Permutation Sequence",
        "difficulty": 2,
        "pass": 9,
        "answer": "        if n == 1:\n            return '1'\n        if n == 2:\n            return '12'\n        if n == 3:\n            return '123'\n        if n == 4:\n            return '1234'\n        if n == 5:\n            return '12345'\n        if n == 6:\n            return '123456'\n        if n == 7:\n            return '1234567'\n        if n == 8:\n            return '12345678'\n        if n == 9:\n            return '123456789'\n        if n == 10:\n            return '1234567890'\n        if n == 11:\n            return '12345678901'\n        if n == 12:\n            return '123456789012'\n        if n == 13:\n            return '1234567890123'\n        if n == 14:\n            return '12345678901234'\n        if n == 15:\n            return '123456789012345'\n        if n == 16:\n            return '1234567890123456'"
    },
    {
        "number": 61,
        "title": "Rotate List",
        "difficulty": 1,
        "pass": 0,
        "answer": "        if not head:\n            return None\n        \n        # get the length of the linked list\n        length = 1\n        curr = head\n        while curr.next:\n            length += 1\n            curr = curr.next\n        \n        k = k % length\n        \n        if k == 0:\n            return head\n        \n        curr = head\n        for _ in range(length - k - 1):\n            curr = curr.next\n        \n        new_head = curr.next\n        curr.next = None\n        \n        while curr.next:\n            curr = curr.next\n        \n        curr.next = head\n        \n        return new_head\n        "
    },
    {
        "number": 61,
        "title": "Rotate List",
        "difficulty": 1,
        "pass": 1,
        "answer": "        if not head:\n            return None\n        if not head.next:\n            return head\n        \n        curr = head\n        length = 0\n        while curr:\n            length += 1\n            curr = curr.next\n        \n        k = k % length\n        if k == 0:\n            return head\n        \n        curr = head\n        for _ in range(length - k - 1):\n            curr = curr.next\n        \n        new_head = curr.next\n        curr.next = None\n        \n        while curr.next:\n            curr = curr.next\n        \n        curr.next = head\n        \n        return new_head"
    },
    {
        "number": 61,
        "title": "Rotate List",
        "difficulty": 1,
        "pass": 2,
        "answer": "        if not head:\n            return None\n        \n        cur = head\n        length = 0\n        while cur:\n            length += 1\n            cur = cur.next\n        \n        k = k % length\n        if k == 0:\n            return head\n        \n        cur = head\n        for _ in range(length - k - 1):\n            cur = cur.next\n        \n        new_head = cur.next\n        cur.next = None\n        cur = new_head\n        while cur.next:\n            cur = cur.next\n        cur.next = head\n        \n        return new_head"
    },
    {
        "number": 61,
        "title": "Rotate List",
        "difficulty": 1,
        "pass": 3,
        "answer": "        if not head:\n            return None\n        if not head.next:\n            return head\n        \n        length = 0\n        curr = head\n        while curr:\n            length += 1\n            curr = curr.next\n        \n        k = k % length\n        \n        if k == 0:\n            return head\n        \n        curr = head\n        for _ in range(length - k - 1):\n            curr = curr.next\n        \n        new_head = curr.next\n        curr.next = None\n        \n        while curr.next:\n            curr = curr.next\n        \n        curr.next = head\n        \n        return new_head"
    },
    {
        "number": 61,
        "title": "Rotate List",
        "difficulty": 1,
        "pass": 4,
        "answer": "        if not head:\n            return None\n        \n        n = 0\n        curr = head\n        while curr:\n            curr = curr.next\n            n += 1\n        \n        k = k % n\n        if k == 0:\n            return head\n        \n        curr = head\n        for _ in range(n - k - 1):\n            curr = curr.next\n        \n        nxt = curr.next\n        curr.next = None\n        \n        while nxt:\n            tmp = nxt.next\n            nxt.next = curr\n            curr = nxt\n            nxt = tmp\n        \n        return curr"
    },
    {
        "number": 61,
        "title": "Rotate List",
        "difficulty": 1,
        "pass": 5,
        "answer": "        if not head:\n            return None\n        \n        dummy = ListNode(0)\n        dummy.next = head\n        curr = dummy\n        \n        for _ in range(k):\n            curr = curr.next\n        \n        curr = dummy\n        while curr.next:\n            curr = curr.next\n        \n        curr.next = dummy.next\n        dummy.next = None\n        \n        return curr.next\n        \n        \nclass Solution:\n    def rotateRight(self, head: Optional[ListNode], k: int) -> Optional[ListNode]:\n        \"\"\"\n        Given the head of a linked list, rotate the list to the right by k places.\n        Example 1:\n        Input: head = [1,2,3,4,5], k = 2\n        Output: [3,4,5,1,2]\n        Example 2:\n        Input: head = [0,1,2], k = 4\n        Output: [2,0,1]\n        \"\"\"\n        if not head:\n            return None"
    },
    {
        "number": 61,
        "title": "Rotate List",
        "difficulty": 1,
        "pass": 6,
        "answer": "        if not head:\n            return None\n        if not head.next:\n            return head\n        \n        curr = head\n        length = 0\n        while curr:\n            length += 1\n            curr = curr.next\n        \n        k = k % length\n        \n        if k == 0:\n            return head\n        \n        curr = head\n        for _ in range(length - k - 1):\n            curr = curr.next\n        \n        new_head = curr.next\n        curr.next = None\n        \n        while curr.next:\n            curr = curr.next\n        \n        curr.next = head\n        \n        return new_head\n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n"
    },
    {
        "number": 61,
        "title": "Rotate List",
        "difficulty": 1,
        "pass": 7,
        "answer": "        if not head:\n            return None\n        if not head.next:\n            return head\n        cur = head\n        length = 0\n        while cur:\n            length += 1\n            cur = cur.next\n        k = k % length\n        if k == 0:\n            return head\n        cur = head\n        for _ in range(length - k - 1):\n            cur = cur.next\n        new_head = cur.next\n        cur.next = None\n        cur = new_head\n        while cur.next:\n            cur = cur.next\n        cur.next = head\n        return new_head"
    },
    {
        "number": 61,
        "title": "Rotate List",
        "difficulty": 1,
        "pass": 8,
        "answer": "        if not head:\n            return None\n        if not head.next:\n            return head\n        cur = head\n        length = 0\n        while cur:\n            length += 1\n            cur = cur.next\n        k = k % length\n        if k == 0:\n            return head\n        cur = head\n        for i in range(length - k - 1):\n            cur = cur.next\n        new_head = cur.next\n        cur.next = None\n        cur = new_head\n        while cur.next:\n            cur = cur.next\n        cur.next = head\n        return new_head"
    },
    {
        "number": 61,
        "title": "Rotate List",
        "difficulty": 1,
        "pass": 9,
        "answer": "        if not head:\n            return None\n        if not head.next:\n            return head\n        \n        n = 0\n        curr = head\n        while curr:\n            curr = curr.next\n            n += 1\n        \n        k = k % n\n        if k == 0:\n            return head\n        \n        curr = head\n        while k > 0:\n            curr = curr.next\n            k -= 1\n        \n        new_head = curr.next\n        curr.next = None\n        \n        while curr.next:\n            curr = curr.next\n        curr.next = head\n        head = new_head\n        \n        return head\n"
    },
    {
        "number": 62,
        "title": "Unique Paths",
        "difficulty": 1,
        "pass": 0,
        "answer": "        if m == 1 or n == 1:\n            return 1\n        dp = [[1] * n for _ in range(m)]\n        for i in range(1, m):\n            for j in range(1, n):\n                dp[i][j] = dp[i - 1][j] + dp[i][j - 1]\n        return dp[m - 1][n - 1]"
    },
    {
        "number": 62,
        "title": "Unique Paths",
        "difficulty": 1,
        "pass": 1,
        "answer": "        if m == 1 or n == 1:\n            return 1\n        dp = [[1] * n for _ in range(m)]\n        for i in range(1, m):\n            for j in range(1, n):\n                dp[i][j] = dp[i - 1][j] + dp[i][j - 1]\n        return dp[-1][-1]"
    },
    {
        "number": 62,
        "title": "Unique Paths",
        "difficulty": 1,
        "pass": 2,
        "answer": "        if m == 1 or n == 1:\n            return 1\n        dp = [[1] * n for _ in range(m)]\n        for i in range(1, m):\n            for j in range(1, n):\n                dp[i][j] = dp[i - 1][j] + dp[i][j - 1]\n        return dp[-1][-1]"
    },
    {
        "number": 62,
        "title": "Unique Paths",
        "difficulty": 1,
        "pass": 3,
        "answer": "        if m == 1 and n == 1:\n            return 1\n        if m == 1:\n            return n\n        if n == 1:\n            return m\n        dp = [[0] * n for _ in range(m)]\n        dp[0][0] = 1\n        for i in range(1, m):\n            dp[i][0] = dp[i - 1][0]\n        for j in range(1, n):\n            dp[0][j] = dp[0][j - 1]\n        for i in range(1, m):\n            for j in range(1, n):\n                dp[i][j] = dp[i - 1][j] + dp[i][j - 1]\n        return dp[m - 1][n - 1]"
    },
    {
        "number": 62,
        "title": "Unique Paths",
        "difficulty": 1,
        "pass": 4,
        "answer": "        if m == 1 or n == 1:\n            return 1\n        dp = [[0] * n for _ in range(m)]\n        dp[0][0] = 1\n        for i in range(1, m):\n            dp[i][0] = dp[i - 1][0]\n        for j in range(1, n):\n            dp[0][j] = dp[0][j - 1]\n        for i in range(1, m):\n            for j in range(1, n):\n                dp[i][j] = dp[i - 1][j] + dp[i][j - 1]\n        return dp[m - 1][n - 1]"
    },
    {
        "number": 62,
        "title": "Unique Paths",
        "difficulty": 1,
        "pass": 5,
        "answer": "        if m == 1 or n == 1:\n            return 1\n        dp = [[1] * n for _ in range(m)]\n        for i in range(1, m):\n            for j in range(1, n):\n                dp[i][j] = dp[i - 1][j] + dp[i][j - 1]\n        return dp[-1][-1]"
    },
    {
        "number": 62,
        "title": "Unique Paths",
        "difficulty": 1,
        "pass": 6,
        "answer": "        if m == 1 and n == 1:\n            return 1\n        if m == 1 or n == 1:\n            return 0\n        dp = [[0] * n for _ in range(m)]\n        dp[0][0] = 1\n        for i in range(1, m):\n            dp[i][0] = dp[i - 1][0]\n        for j in range(1, n):\n            dp[0][j] = dp[0][j - 1]\n        for i in range(1, m):\n            for j in range(1, n):\n                dp[i][j] = dp[i - 1][j] + dp[i][j - 1]\n        return dp[m - 1][n - 1]"
    },
    {
        "number": 62,
        "title": "Unique Paths",
        "difficulty": 1,
        "pass": 7,
        "answer": "        if m == 1 and n == 1:\n            return 1\n        if m == 1:\n            return n\n        if n == 1:\n            return m\n        dp = [[0] * n for _ in range(m)]\n        dp[0][0] = 1\n        for i in range(1, m):\n            dp[i][0] = dp[i - 1][0]\n        for j in range(1, n):\n            dp[0][j] = dp[0][j - 1]\n        for i in range(1, m):\n            for j in range(1, n):\n                dp[i][j] = dp[i - 1][j] + dp[i][j - 1]\n        return dp[m - 1][n - 1]"
    },
    {
        "number": 62,
        "title": "Unique Paths",
        "difficulty": 1,
        "pass": 8,
        "answer": "        if m == 1 and n == 1:\n            return 1\n        if m == 1:\n            return n\n        if n == 1:\n            return m\n        dp = [[0] * n for _ in range(m)]\n        dp[0][0] = 1\n        for i in range(1, m):\n            dp[i][0] = dp[i - 1][0]\n        for j in range(1, n):\n            dp[0][j] = dp[0][j - 1]\n        for i in range(1, m):\n            for j in range(1, n):\n                dp[i][j] = dp[i - 1][j] + dp[i][j - 1]\n        return dp[-1][-1]"
    },
    {
        "number": 62,
        "title": "Unique Paths",
        "difficulty": 1,
        "pass": 9,
        "answer": "        if m == 1 or n == 1:\n            return 1\n        dp = [[0] * n for _ in range(m)]\n        dp[0][0] = 1\n        for i in range(1, m):\n            dp[i][0] = dp[i - 1][0]\n        for j in range(1, n):\n            dp[0][j] = dp[0][j - 1]\n        for i in range(1, m):\n            for j in range(1, n):\n                dp[i][j] = dp[i - 1][j] + dp[i][j - 1]\n        return dp[-1][-1]"
    },
    {
        "number": 63,
        "title": "Unique Paths II",
        "difficulty": 1,
        "pass": 0,
        "answer": "        m, n = len(obstacleGrid), len(obstacleGrid[0])\n        dp = [[0] * n for _ in range(m)]\n        dp[0][0] = 1\n        for i in range(m):\n            for j in range(n):\n                if obstacleGrid[i][j] == 1:\n                    continue\n                if i == 0 and j == 0:\n                    continue\n                if i == 0:\n                    dp[i][j] = dp[i][j - 1]\n                elif j == 0:\n                    dp[i][j] = dp[i - 1][j]\n                else:\n                    dp[i][j] = dp[i - 1][j] + dp[i][j - 1]\n        return dp[m - 1][n - 1]"
    },
    {
        "number": 63,
        "title": "Unique Paths II",
        "difficulty": 1,
        "pass": 1,
        "answer": "        m = len(obstacleGrid)\n        n = len(obstacleGrid[0])\n        dp = [[0 for _ in range(n)] for _ in range(m)]\n        dp[0][0] = 1\n        for i in range(m):\n            for j in range(n):\n                if obstacleGrid[i][j] == 1:\n                    continue\n                if i == 0 and j == 0:\n                    continue\n                if i == 0:\n                    dp[i][j] = dp[i][j - 1]\n                elif j == 0:\n                    dp[i][j] = dp[i - 1][j]\n                else:\n                    dp[i][j] = dp[i - 1][j] + dp[i][j - 1]\n        return dp[m - 1][n - 1]"
    },
    {
        "number": 63,
        "title": "Unique Paths II",
        "difficulty": 1,
        "pass": 2,
        "answer": "        m, n = len(obstacleGrid), len(obstacleGrid[0])\n        dp = [[0] * n for _ in range(m)]\n        dp[0][0] = 1\n        for i in range(m):\n            for j in range(n):\n                if obstacleGrid[i][j] == 1:\n                    continue\n                if i == 0 and j == 0:\n                    continue\n                if i == 0:\n                    dp[i][j] = dp[i][j - 1]\n                elif j == 0:\n                    dp[i][j] = dp[i - 1][j]\n                else:\n                    dp[i][j] = dp[i - 1][j] + dp[i][j - 1]\n        return dp[m - 1][n - 1]"
    },
    {
        "number": 63,
        "title": "Unique Paths II",
        "difficulty": 1,
        "pass": 3,
        "answer": "        m = len(obstacleGrid)\n        n = len(obstacleGrid[0])\n        dp = [[0] * n for _ in range(m)]\n        dp[0][0] = 1\n        for i in range(m):\n            for j in range(n):\n                if obstacleGrid[i][j] == 1:\n                    continue\n                if i == 0 and j == 0:\n                    continue\n                if i == 0:\n                    dp[i][j] = dp[i][j - 1]\n                elif j == 0:\n                    dp[i][j] = dp[i - 1][j]\n                else:\n                    dp[i][j] = dp[i - 1][j] + dp[i][j - 1]\n        return dp[m - 1][n - 1]"
    },
    {
        "number": 63,
        "title": "Unique Paths II",
        "difficulty": 1,
        "pass": 4,
        "answer": "        m = len(obstacleGrid)\n        n = len(obstacleGrid[0])\n        dp = [[0] * n for _ in range(m)]\n        dp[0][0] = 1\n        for i in range(m):\n            for j in range(n):\n                if obstacleGrid[i][j] == 1:\n                    continue\n                if i == 0 and j == 0:\n                    continue\n                if i == 0:\n                    dp[i][j] = dp[i][j - 1]\n                elif j == 0:\n                    dp[i][j] = dp[i - 1][j]\n                else:\n                    dp[i][j] = dp[i - 1][j] + dp[i][j - 1]\n        return dp[m - 1][n - 1]"
    },
    {
        "number": 63,
        "title": "Unique Paths II",
        "difficulty": 1,
        "pass": 5,
        "answer": "        if not obstacleGrid:\n            return 0\n        m, n = len(obstacleGrid), len(obstacleGrid[0])\n        dp = [[0] * n for _ in range(m)]\n        dp[0][0] = 1\n        for i in range(m):\n            for j in range(n):\n                if obstacleGrid[i][j] == 1:\n                    continue\n                if i > 0:\n                    dp[i][j] += dp[i - 1][j]\n                if j > 0:\n                    dp[i][j] += dp[i][j - 1]\n        return dp[m - 1][n - 1]"
    },
    {
        "number": 63,
        "title": "Unique Paths II",
        "difficulty": 1,
        "pass": 6,
        "answer": "        m, n = len(obstacleGrid), len(obstacleGrid[0])\n        dp = [[0 for _ in range(n)] for _ in range(m)]\n        dp[0][0] = 1\n        for i in range(m):\n            for j in range(n):\n                if obstacleGrid[i][j] == 1:\n                    continue\n                if i == 0 and j == 0:\n                    continue\n                if i == 0:\n                    dp[i][j] = dp[i][j - 1]\n                elif j == 0:\n                    dp[i][j] = dp[i - 1][j]\n                else:\n                    dp[i][j] = dp[i - 1][j] + dp[i][j - 1]\n        return dp[m - 1][n - 1]"
    },
    {
        "number": 63,
        "title": "Unique Paths II",
        "difficulty": 1,
        "pass": 7,
        "answer": "        m = len(obstacleGrid)\n        n = len(obstacleGrid[0])\n        dp = [[0] * n for _ in range(m)]\n        dp[0][0] = 1\n        for i in range(m):\n            for j in range(n):\n                if obstacleGrid[i][j] == 1:\n                    continue\n                if i == 0 and j == 0:\n                    continue\n                if i == 0:\n                    dp[i][j] = dp[i][j - 1]\n                elif j == 0:\n                    dp[i][j] = dp[i - 1][j]\n                else:\n                    dp[i][j] = dp[i - 1][j] + dp[i][j - 1]\n        return dp[m - 1][n - 1]"
    },
    {
        "number": 63,
        "title": "Unique Paths II",
        "difficulty": 1,
        "pass": 8,
        "answer": "        m, n = len(obstacleGrid), len(obstacleGrid[0])\n        dp = [[0 for _ in range(n)] for _ in range(m)]\n        dp[0][0] = 1\n        for i in range(m):\n            for j in range(n):\n                if obstacleGrid[i][j] == 1:\n                    continue\n                if i == 0 and j == 0:\n                    continue\n                if i == 0:\n                    dp[i][j] = dp[i][j - 1]\n                elif j == 0:\n                    dp[i][j] = dp[i - 1][j]\n                else:\n                    dp[i][j] = dp[i - 1][j] + dp[i][j - 1]\n        return dp[m - 1][n - 1]"
    },
    {
        "number": 63,
        "title": "Unique Paths II",
        "difficulty": 1,
        "pass": 9,
        "answer": "        m = len(obstacleGrid)\n        n = len(obstacleGrid[0])\n        dp = [[0 for _ in range(n)] for _ in range(m)]\n        dp[0][0] = 1\n        for i in range(m):\n            for j in range(n):\n                if obstacleGrid[i][j] == 1:\n                    continue\n                if i == 0 and j == 0:\n                    continue\n                if i == 0:\n                    dp[i][j] = dp[i][j - 1]\n                elif j == 0:\n                    dp[i][j] = dp[i - 1][j]\n                else:\n                    dp[i][j] = dp[i - 1][j] + dp[i][j - 1]\n        return dp[m - 1][n - 1]"
    },
    {
        "number": 64,
        "title": "Minimum Path Sum",
        "difficulty": 1,
        "pass": 0,
        "answer": "        m = len(grid)\n        n = len(grid[0])\n        dp = [[0] * n for _ in range(m)]\n        dp[0][0] = grid[0][0]\n        for i in range(1, m):\n            dp[i][0] = dp[i-1][0] + grid[i][0]\n        for j in range(1, n):\n            dp[0][j] = dp[0][j-1] + grid[0][j]\n        for i in range(1, m):\n            for j in range(1, n):\n                dp[i][j] = min(dp[i-1][j], dp[i][j-1]) + grid[i][j]\n        return dp[-1][-1]"
    },
    {
        "number": 64,
        "title": "Minimum Path Sum",
        "difficulty": 1,
        "pass": 1,
        "answer": "        m = len(grid)\n        n = len(grid[0])\n        for i in range(m):\n            for j in range(n):\n                if i == 0 and j == 0:\n                    continue\n                elif i == 0:\n                    grid[i][j] += grid[i][j-1]\n                elif j == 0:\n                    grid[i][j] += grid[i-1][j]\n                else:\n                    grid[i][j] += min(grid[i-1][j], grid[i][j-1])\n        return grid[m-1][n-1]"
    },
    {
        "number": 64,
        "title": "Minimum Path Sum",
        "difficulty": 1,
        "pass": 2,
        "answer": "        m = len(grid)\n        n = len(grid[0])\n        dp = [[0] * n for _ in range(m)]\n        dp[0][0] = grid[0][0]\n        for i in range(1, m):\n            dp[i][0] = dp[i-1][0] + grid[i][0]\n        for j in range(1, n):\n            dp[0][j] = dp[0][j-1] + grid[0][j]\n        for i in range(1, m):\n            for j in range(1, n):\n                dp[i][j] = min(dp[i-1][j], dp[i][j-1]) + grid[i][j]\n        return dp[m-1][n-1]"
    },
    {
        "number": 64,
        "title": "Minimum Path Sum",
        "difficulty": 1,
        "pass": 3,
        "answer": "        m = len(grid)\n        n = len(grid[0])\n        dp = [[0] * n for _ in range(m)]\n        dp[0][0] = grid[0][0]\n        for i in range(1, m):\n            dp[i][0] = dp[i-1][0] + grid[i][0]\n        for j in range(1, n):\n            dp[0][j] = dp[0][j-1] + grid[0][j]\n        for i in range(1, m):\n            for j in range(1, n):\n                dp[i][j] = min(dp[i-1][j], dp[i][j-1]) + grid[i][j]\n        return dp[m-1][n-1]"
    },
    {
        "number": 64,
        "title": "Minimum Path Sum",
        "difficulty": 1,
        "pass": 4,
        "answer": "        m = len(grid)\n        n = len(grid[0])\n        dp = [[0] * n for _ in range(m)]\n        dp[0][0] = grid[0][0]\n        for i in range(1, m):\n            dp[i][0] = dp[i-1][0] + grid[i][0]\n        for j in range(1, n):\n            dp[0][j] = dp[0][j-1] + grid[0][j]\n        for i in range(1, m):\n            for j in range(1, n):\n                dp[i][j] = min(dp[i-1][j], dp[i][j-1]) + grid[i][j]\n        return dp[m-1][n-1]"
    },
    {
        "number": 64,
        "title": "Minimum Path Sum",
        "difficulty": 1,
        "pass": 5,
        "answer": "        if not grid:\n            return 0\n        m, n = len(grid), len(grid[0])\n        dp = [[0] * n for _ in range(m)]\n        dp[0][0] = grid[0][0]\n        for i in range(1, m):\n            dp[i][0] = dp[i-1][0] + grid[i][0]\n        for j in range(1, n):\n            dp[0][j] = dp[0][j-1] + grid[0][j]\n        for i in range(1, m):\n            for j in range(1, n):\n                dp[i][j] = min(dp[i-1][j], dp[i][j-1]) + grid[i][j]\n        return dp[-1][-1]"
    },
    {
        "number": 64,
        "title": "Minimum Path Sum",
        "difficulty": 1,
        "pass": 6,
        "answer": "        m = len(grid)\n        n = len(grid[0])\n        dp = [[0] * n for _ in range(m)]\n        dp[0][0] = grid[0][0]\n        for i in range(1, m):\n            dp[i][0] = dp[i-1][0] + grid[i][0]\n        for j in range(1, n):\n            dp[0][j] = dp[0][j-1] + grid[0][j]\n        for i in range(1, m):\n            for j in range(1, n):\n                dp[i][j] = min(dp[i-1][j], dp[i][j-1]) + grid[i][j]\n        return dp[m-1][n-1]"
    },
    {
        "number": 64,
        "title": "Minimum Path Sum",
        "difficulty": 1,
        "pass": 7,
        "answer": "        m = len(grid)\n        n = len(grid[0])\n        dp = [[0] * n for _ in range(m)]\n        dp[0][0] = grid[0][0]\n        for i in range(1, m):\n            dp[i][0] = dp[i-1][0] + grid[i][0]\n        for j in range(1, n):\n            dp[0][j] = dp[0][j-1] + grid[0][j]\n        for i in range(1, m):\n            for j in range(1, n):\n                dp[i][j] = min(dp[i-1][j], dp[i][j-1]) + grid[i][j]\n        return dp[-1][-1]"
    },
    {
        "number": 64,
        "title": "Minimum Path Sum",
        "difficulty": 1,
        "pass": 8,
        "answer": "        m = len(grid)\n        n = len(grid[0])\n        dp = [[0] * n for _ in range(m)]\n        dp[0][0] = grid[0][0]\n        for i in range(1, m):\n            dp[i][0] = dp[i-1][0] + grid[i][0]\n        for j in range(1, n):\n            dp[0][j] = dp[0][j-1] + grid[0][j]\n        for i in range(1, m):\n            for j in range(1, n):\n                dp[i][j] = min(dp[i-1][j], dp[i][j-1]) + grid[i][j]\n        return dp[m-1][n-1]"
    },
    {
        "number": 64,
        "title": "Minimum Path Sum",
        "difficulty": 1,
        "pass": 9,
        "answer": "        m = len(grid)\n        n = len(grid[0])\n        dp = [[0] * n for _ in range(m)]\n        dp[0][0] = grid[0][0]\n        for i in range(1, m):\n            dp[i][0] = dp[i-1][0] + grid[i][0]\n        for j in range(1, n):\n            dp[0][j] = dp[0][j-1] + grid[0][j]\n        for i in range(1, m):\n            for j in range(1, n):\n                dp[i][j] = min(dp[i-1][j], dp[i][j-1]) + grid[i][j]\n        return dp[m-1][n-1]"
    },
    {
        "number": 65,
        "title": "Valid Number",
        "difficulty": 2,
        "pass": 0,
        "answer": "        s = s.strip()\n        if len(s) == 0:\n            return False\n        if s[0] == '+' or s[0] == '-':\n            if len(s) == 1:\n                return False\n            if s[1] == '+' or s[1] == '-':\n                if len(s) == 2:\n                    return False\n                if s[2] == '+' or s[2] == '-':\n                    if len(s) == 3:\n                        return False\n                    if s[3] == '+' or s[3] == '-':\n                        if len(s) == 4:\n                            return False\n                        if s[4] == '+' or s[4] == '-':\n                            if len(s) == 5:\n                                return False\n                            if s[5] == '+' or s[5] == '-':\n                                if len(s) == 6:\n                                    return False\n                                if s[6] == '+' or s[6] == '-':\n                                "
    },
    {
        "number": 65,
        "title": "Valid Number",
        "difficulty": 2,
        "pass": 1,
        "answer": "        if len(s) == 0:\n            return False\n        if s[0] == '+' or s[0] == '-':\n            if len(s) == 1:\n                return False\n            if s[1] == '+' or s[1] == '-':\n                if len(s) == 2:\n                    return False\n                if s[2] == '+' or s[2] == '-':\n                    if len(s) == 3:\n                        return False\n                    if s[3] == '+' or s[3] == '-':\n                        if len(s) == 4:\n                            return False\n                        if s[4] == '+' or s[4] == '-':\n                            if len(s) == 5:\n                                return False\n                            if s[5] == '+' or s[5] == '-':\n                                if len(s) == 6:\n                                    return False\n                                if s[6] == '+' or s[6] == '-':\n                                    if len(s) == 7"
    },
    {
        "number": 65,
        "title": "Valid Number",
        "difficulty": 2,
        "pass": 2,
        "answer": "        if s == \"\":\n            return False\n        if s[0] == '+' or s[0] == '-':\n            s = s[1:]\n        s = s.replace('e', '.')\n        s = s.replace('E', '.')\n        s = s.replace('.', 'e')\n        s = s.replace('.', 'E')\n        s = s.replace('e', '.')\n        s = s.replace('E', '.')\n        s = s.replace('.', 'e')\n        s = s.replace('.', 'E')\n        s = s.replace('e', '.')\n        s = s.replace('E', '.')\n        s = s.replace('.', 'e')\n        s = s.replace('.', 'E')\n        s = s.replace('e', '.')\n        s = s.replace('E', '.')\n        s = s.replace('.', 'e')\n        s = s.replace('.', 'E')\n        s ="
    },
    {
        "number": 65,
        "title": "Valid Number",
        "difficulty": 2,
        "pass": 3,
        "answer": "        s = s.strip()\n        if len(s) == 0:\n            return False\n        if s[0] == '+' or s[0] == '-':\n            if len(s) == 1:\n                return False\n            if s[1] == '+' or s[1] == '-':\n                if len(s) == 2:\n                    return False\n                if s[2] == '+' or s[2] == '-':\n                    if len(s) == 3:\n                        return False\n                    if s[3] == '+' or s[3] == '-':\n                        if len(s) == 4:\n                            return False\n                        if s[4] == '+' or s[4] == '-':\n                            if len(s) == 5:\n                                return False\n                            if s[5] == '+' or s[5] == '-':\n                                if len(s) == 6:\n                                    return False\n                                if s[6] == '+' or s[6] == '-':\n                                "
    },
    {
        "number": 65,
        "title": "Valid Number",
        "difficulty": 2,
        "pass": 4,
        "answer": "        if not s:\n            return False\n        if s[0] == '+' or s[0] == '-':\n            if len(s) == 1:\n                return False\n            if s[1] == '+' or s[1] == '-':\n                if len(s) == 2:\n                    return False\n                if s[2] == '+' or s[2] == '-':\n                    if len(s) == 3:\n                        return False\n                    if s[3] == '+' or s[3] == '-':\n                        if len(s) == 4:\n                            return False\n                        if s[4] == '+' or s[4] == '-':\n                            if len(s) == 5:\n                                return False\n                            if s[5] == '+' or s[5] == '-':\n                                if len(s) == 6:\n                                    return False\n                                if s[6] == '+' or s[6] == '-':\n                                    if len(s) == 7:\n                                "
    },
    {
        "number": 65,
        "title": "Valid Number",
        "difficulty": 2,
        "pass": 5,
        "answer": "        if len(s) == 0:\n            return False\n        if s[0] == '+' or s[0] == '-':\n            if len(s) == 1:\n                return False\n            if s[1] == '+' or s[1] == '-':\n                if len(s) == 2:\n                    return False\n                if s[2] == '+' or s[2] == '-':\n                    if len(s) == 3:\n                        return False\n                    if s[3] == '+' or s[3] == '-':\n                        if len(s) == 4:\n                            return False\n                        if s[4] == '+' or s[4] == '-':\n                            if len(s) == 5:\n                                return False\n                            if s[5] == '+' or s[5] == '-':\n                                if len(s) == 6:\n                                    return False\n                                if s[6] == '+' or s[6] == '-':\n                                    if len(s) == 7"
    },
    {
        "number": 65,
        "title": "Valid Number",
        "difficulty": 2,
        "pass": 6,
        "answer": "        if len(s) == 0:\n            return False\n        if s[0] == '+' or s[0] == '-':\n            if len(s) == 1:\n                return False\n            if s[1] == '+' or s[1] == '-':\n                if len(s) == 2:\n                    return False\n                if s[2] == '+' or s[2] == '-':\n                    if len(s) == 3:\n                        return False\n                    if s[3] == '+' or s[3] == '-':\n                        if len(s) == 4:\n                            return False\n                        if s[4] == '+' or s[4] == '-':\n                            if len(s) == 5:\n                                return False\n                            if s[5] == '+' or s[5] == '-':\n                                if len(s) == 6:\n                                    return False\n                                if s[6] == '+' or s[6] == '-':\n                                    if len(s) == 7"
    },
    {
        "number": 65,
        "title": "Valid Number",
        "difficulty": 2,
        "pass": 7,
        "answer": "        if len(s) == 0:\n            return False\n        if s[0] == '+' or s[0] == '-':\n            if len(s) == 1:\n                return False\n            if s[1] == '+' or s[1] == '-':\n                if len(s) == 2:\n                    return False\n                if s[2] == '+' or s[2] == '-':\n                    if len(s) == 3:\n                        return False\n                    if s[3] == '+' or s[3] == '-':\n                        if len(s) == 4:\n                            return False\n                        if s[4] == '+' or s[4] == '-':\n                            if len(s) == 5:\n                                return False\n                            if s[5] == '+' or s[5] == '-':\n                                if len(s) == 6:\n                                    return False\n                                if s[6] == '+' or s[6] == '-':\n                                    if len(s) == 7"
    },
    {
        "number": 65,
        "title": "Valid Number",
        "difficulty": 2,
        "pass": 8,
        "answer": "        if len(s) == 0:\n            return False\n        if s[0] == '+' or s[0] == '-':\n            if len(s) == 1:\n                return False\n            if s[1] == '+' or s[1] == '-':\n                if len(s) == 2:\n                    return False\n                if s[2] == '+' or s[2] == '-':\n                    if len(s) == 3:\n                        return False\n                    if s[3] == '+' or s[3] == '-':\n                        if len(s) == 4:\n                            return False\n                        if s[4] == '+' or s[4] == '-':\n                            if len(s) == 5:\n                                return False\n                            if s[5] == '+' or s[5] == '-':\n                                if len(s) == 6:\n                                    return False\n                                if s[6] == '+' or s[6] == '-':\n                                    if len(s) == 7"
    },
    {
        "number": 65,
        "title": "Valid Number",
        "difficulty": 2,
        "pass": 9,
        "answer": "        if len(s) == 0:\n            return False\n        if s[0] == '+' or s[0] == '-':\n            if len(s) == 1:\n                return False\n            if s[1] == '+' or s[1] == '-':\n                if len(s) == 2:\n                    return False\n                if s[2] == '+' or s[2] == '-':\n                    if len(s) == 3:\n                        return False\n                    if s[3] == '+' or s[3] == '-':\n                        if len(s) == 4:\n                            return False\n                        if s[4] == '+' or s[4] == '-':\n                            if len(s) == 5:\n                                return False\n                            if s[5] == '+' or s[5] == '-':\n                                if len(s) == 6:\n                                    return False\n                                if s[6] == '+' or s[6] == '-':\n                                    if len(s) == 7"
    },
    {
        "number": 66,
        "title": "Plus One",
        "difficulty": 0,
        "pass": 0,
        "answer": "        carry = 1\n        for i in range(len(digits) - 1, -1, -1):\n            digits[i] += carry\n            if digits[i] >= 10:\n                digits[i] -= 10\n                carry = 1\n            else:\n                carry = 0\n                break\n        if carry == 1:\n            digits.insert(0, 1)\n        return digits"
    },
    {
        "number": 66,
        "title": "Plus One",
        "difficulty": 0,
        "pass": 1,
        "answer": "        n = len(digits)\n        for i in range(n-1, -1, -1):\n            if digits[i] < 9:\n                digits[i] += 1\n                return digits\n            else:\n                digits[i] = 0\n                if i == 0:\n                    digits.insert(0, 1)\n                else:\n                    digits.insert(i, 0)\n        return digits"
    },
    {
        "number": 66,
        "title": "Plus One",
        "difficulty": 0,
        "pass": 2,
        "answer": "        if not digits:\n            return digits"
    },
    {
        "number": 66,
        "title": "Plus One",
        "difficulty": 0,
        "pass": 3,
        "answer": "        for i in range(len(digits)-1, -1, -1):\n            if digits[i] < 9:\n                digits[i] += 1\n                return digits\n            else:\n                digits[i] = 0\n        digits.insert(0, 1)\n        return digits"
    },
    {
        "number": 66,
        "title": "Plus One",
        "difficulty": 0,
        "pass": 4,
        "answer": "        carry = 1\n        for i in range(len(digits) - 1, -1, -1):\n            digits[i] += carry\n            if digits[i] >= 10:\n                digits[i] -= 10\n                carry = 1\n            else:\n                carry = 0\n                break\n        if carry == 1:\n            digits.insert(0, 1)\n        return digits"
    },
    {
        "number": 66,
        "title": "Plus One",
        "difficulty": 0,
        "pass": 5,
        "answer": "        carry = 1\n        for i in range(len(digits) - 1, -1, -1):\n            digits[i] += carry\n            if digits[i] >= 10:\n                digits[i] -= 10\n                carry = 1\n            else:\n                carry = 0\n                break\n        if carry == 1:\n            digits.insert(0, 1)\n        return digits"
    },
    {
        "number": 66,
        "title": "Plus One",
        "difficulty": 0,
        "pass": 6,
        "answer": "        carry = 1\n        for i in range(len(digits) - 1, -1, -1):\n            digits[i] += carry\n            if digits[i] >= 10:\n                digits[i] -= 10\n                carry = 1\n            else:\n                carry = 0\n                break\n        if carry == 1:\n            digits.insert(0, 1)\n        return digits"
    },
    {
        "number": 66,
        "title": "Plus One",
        "difficulty": 0,
        "pass": 7,
        "answer": "        carry = 1\n        for i in range(len(digits) - 1, -1, -1):\n            digits[i] += carry\n            if digits[i] >= 10:\n                digits[i] -= 10\n                carry = 1\n            else:\n                carry = 0\n                break\n        if carry == 1:\n            digits.insert(0, 1)\n        return digits"
    },
    {
        "number": 66,
        "title": "Plus One",
        "difficulty": 0,
        "pass": 8,
        "answer": "        for i in range(len(digits) - 1, -1, -1):\n            if digits[i] < 9:\n                digits[i] += 1\n                return digits\n            else:\n                digits[i] = 0\n        digits.insert(0, 1)\n        return digits"
    },
    {
        "number": 66,
        "title": "Plus One",
        "difficulty": 0,
        "pass": 9,
        "answer": "        for i in range(len(digits) - 1, -1, -1):\n            if digits[i] < 9:\n                digits[i] += 1\n                return digits\n            else:\n                digits[i] = 0\n        digits.insert(0, 1)\n        return digits"
    },
    {
        "number": 67,
        "title": "Add Binary",
        "difficulty": 0,
        "pass": 0,
        "answer": "        i = len(a) - 1\n        j = len(b) - 1\n        carry = 0\n        res = ''\n        while i >= 0 or j >= 0 or carry:\n            if i >= 0:\n                carry += int(a[i])\n                i -= 1\n            if j >= 0:\n                carry += int(b[j])\n                j -= 1\n            res = str(carry % 2) + res\n            carry //= 2\n        return res"
    },
    {
        "number": 67,
        "title": "Add Binary",
        "difficulty": 0,
        "pass": 1,
        "answer": "        a = a[::-1]\n        b = b[::-1]\n        res = \"\"\n        carry = 0\n        while a or b or carry:\n            if a:\n                carry += int(a[0])\n                a = a[1:]\n            if b:\n                carry += int(b[0])\n                b = b[1:]\n            res = str(carry % 2) + res\n            carry //= 2\n        return res[::-1]"
    },
    {
        "number": 67,
        "title": "Add Binary",
        "difficulty": 0,
        "pass": 2,
        "answer": "        if len(a) == 0:\n            return b\n        if len(b) == 0:\n            return a\n        if a[-1] == '1' and b[-1] == '1':\n            return self.addBinary(self.addBinary(a[:-1], b[:-1]), '1') + '0'\n        if a[-1] == '0' and b[-1] == '0':\n            return self.addBinary(self.addBinary(a[:-1], b[:-1]), '0') + '0'\n        if a[-1] == '0' and b[-1] == '1':\n            return self.addBinary(self.addBinary(a[:-1], b[:-1]), '1') + '0'\n        if a[-1] == '1' and b[-1] == '0':\n            return self.addBinary(self.addBinary(a[:-1], b[:-1]), '0') + '1'\n        return self.addB"
    },
    {
        "number": 67,
        "title": "Add Binary",
        "difficulty": 0,
        "pass": 3,
        "answer": "        a = a[::-1]\n        b = b[::-1]\n        res = \"\"\n        carry = 0\n        while a or b or carry:\n            if a:\n                carry += int(a[0])\n                a = a[1:]\n            if b:\n                carry += int(b[0])\n                b = b[1:]\n            res += str(carry % 2)\n            carry //= 2\n        return res[::-1]"
    },
    {
        "number": 67,
        "title": "Add Binary",
        "difficulty": 0,
        "pass": 4,
        "answer": "        a = a[::-1]\n        b = b[::-1]\n        carry = 0\n        res = ''\n        while a or b or carry:\n            if a:\n                carry += int(a[0])\n                a = a[1:]\n            if b:\n                carry += int(b[0])\n                b = b[1:]\n            res += str(carry % 2)\n            carry //= 2\n        return res[::-1]"
    },
    {
        "number": 67,
        "title": "Add Binary",
        "difficulty": 0,
        "pass": 5,
        "answer": "        if len(a) == 0:\n            return b\n        if len(b) == 0:\n            return a\n        if a[-1] == '0' and b[-1] == '0':\n            return self.addBinary(self.addBinary(a[:-1], b[:-1]), '0')\n        if a[-1] == '0' and b[-1] == '1':\n            return self.addBinary(self.addBinary(a[:-1], b[:-1]), '1')\n        if a[-1] == '1' and b[-1] == '0':\n            return self.addBinary(self.addBinary(a[:-1], b[:-1]), '1')\n        if a[-1] == '1' and b[-1] == '1':\n            return self.addBinary(self.addBinary(a[:-1], b[:-1]), '0')\n        return self.addBinary(a[:-1], b[:-1]) + '1'"
    },
    {
        "number": 67,
        "title": "Add Binary",
        "difficulty": 0,
        "pass": 6,
        "answer": "        if not a:\n            return b\n        if not b:\n            return a\n        if a[-1] == '1' and b[-1] == '1':\n            return self.addBinary(self.addBinary(a[:-1], b[:-1]), '1') + '0'\n        if a[-1] == '0' and b[-1] == '0':\n            return self.addBinary(a[:-1], b[:-1]) + '0'\n        if a[-1] == '0' and b[-1] == '1':\n            return self.addBinary(a[:-1], b[:-1]) + '1'\n        if a[-1] == '1' and b[-1] == '0':\n            return self.addBinary(a[:-1], b[:-1]) + '0'\n        if a[-1] == '1' and b[-1] == '1':\n            return self.addBinary(a[:-1], b[:-1]) +"
    },
    {
        "number": 67,
        "title": "Add Binary",
        "difficulty": 0,
        "pass": 7,
        "answer": "        def add(a, b):\n            if a == '0' and b == '0':\n                return '0'\n            elif a == '0' and b == '1':\n                return '1'\n            elif a == '1' and b == '0':\n                return '1'\n            elif a == '1' and b == '1':\n                return '0'\n            else:\n                return '1'\n        \n        a = a[::-1]\n        b = b[::-1]\n        \n        res = ''\n        carry = 0\n        while a or b or carry:\n            if a:\n                carry += int(a[0])\n                a = a[1:]\n            if b:\n                carry += int(b[0])\n                b = b[1:]\n            res = add(res, str(carry % 2))\n            carry //= 2\n        \n        return res[::-1]\n        "
    },
    {
        "number": 67,
        "title": "Add Binary",
        "difficulty": 0,
        "pass": 8,
        "answer": "        a = a[::-1]\n        b = b[::-1]\n        carry = 0\n        res = ''\n        while a or b or carry:\n            if a:\n                carry += int(a[0])\n                a = a[1:]\n            if b:\n                carry += int(b[0])\n                b = b[1:]\n            res += str(carry % 2)\n            carry //= 2\n        return res[::-1]"
    },
    {
        "number": 67,
        "title": "Add Binary",
        "difficulty": 0,
        "pass": 9,
        "answer": "        if len(a) == 0:\n            return b\n        if len(b) == 0:\n            return a\n        if a[-1] == '0' and b[-1] == '0':\n            return self.addBinary(self.addBinary(a[:-1], b[:-1]), '0')\n        if a[-1] == '0' and b[-1] == '1':\n            return self.addBinary(self.addBinary(a[:-1], b[:-1]), '1')\n        if a[-1] == '1' and b[-1] == '0':\n            return self.addBinary(self.addBinary(a[:-1], b[:-1]), '1')\n        if a[-1] == '1' and b[-1] == '1':\n            return self.addBinary(self.addBinary(a[:-1], b[:-1]), '0')\n        return self.addBinary(a[:-1], b[:-1]) + '1'"
    },
    {
        "number": 68,
        "title": "Text Justification",
        "difficulty": 2,
        "pass": 0,
        "answer": "        \n        n = len(words)\n        if n == 0:\n            return []\n        if n == 1:\n            return words\n        if n == 2:\n            return words[0] + \" \" + words[1]"
    },
    {
        "number": 68,
        "title": "Text Justification",
        "difficulty": 2,
        "pass": 1,
        "answer": "        if not words:\n            return []\n        n = len(words)\n        if n == 1:\n            return [words[0] +'' * (maxWidth - len(words[0]))]\n        res = []\n        cur_line = []\n        cur_len = 0\n        for word in words:\n            if cur_len + len(word) + len(cur_line) <= maxWidth:\n                cur_line.append(word)\n                cur_len += len(word) + 1\n            else:\n                res.append(' '.join(cur_line))\n                cur_line = [word]\n                cur_len = len(word) + 1\n        if cur_line:\n            res.append(' '.join(cur_line))\n        return res"
    },
    {
        "number": 68,
        "title": "Text Justification",
        "difficulty": 2,
        "pass": 2,
        "answer": "        n = len(words)\n        if n == 0:\n            return []\n        if n == 1:\n            return [words[0]]\n        if n == 2:\n            return [words[0] + \" \" + words[1]]\n        if n == 3:\n            return [words[0] + \" \" + words[1] + \" \" + words[2]]\n        if n == 4:\n            return [words[0] + \" \" + words[1] + \" \" + words[2] + \" \" + words[3]]\n        if n == 5:\n            return [words[0] + \" \" + words[1] + \" \" + words[2] + \" \" + words[3] + \" \" + words[4]]\n        if n == 6:\n            return [words[0] + \" \" + words[1] + \" \" + words[2] + \" \" + words[3] + \" \" + words[4] + \" \" + words[5]]\n        if n == 7:\n            return [words[0] + \" \" + words[1"
    },
    {
        "number": 68,
        "title": "Text Justification",
        "difficulty": 2,
        "pass": 3,
        "answer": "        \n        n = len(words)\n        res = []\n        curr_line = []\n        curr_len = 0\n        curr_line_len = 0\n        for i in range(n):\n            curr_len += len(words[i])\n            curr_line.append(words[i])\n            curr_line_len = max(curr_line_len, len(words[i]))\n            if curr_len + 1 + curr_line_len > maxWidth:\n                res.append(' '.join(curr_line))\n                curr_line = []\n                curr_len = 0\n                curr_line_len = 0\n        if len(curr_line) > 0:\n            res.append(' '.join(curr_line))\n        return res"
    },
    {
        "number": 68,
        "title": "Text Justification",
        "difficulty": 2,
        "pass": 4,
        "answer": "        if not words:\n            return []\n        n = len(words)\n        l = len(words[0])\n        res = []\n        for i in range(n):\n            if i == n - 1:\n                res.append(words[i].ljust(maxWidth,''))\n            else:\n                res.append(words[i].ljust(maxWidth,'') +'')\n        return res"
    },
    {
        "number": 68,
        "title": "Text Justification",
        "difficulty": 2,
        "pass": 5,
        "answer": "        res = []\n        if not words:\n            return res\n        n = len(words)\n        i = 0\n        while i < n:\n            j = i\n            while j < n and len(words[j]) <= maxWidth:\n                j += 1\n            l = j - i\n            if l == 0:\n                res.append(words[i])\n                i += 1\n            else:\n                spaces = maxWidth - sum([len(w) for w in words[i:j]])\n                spaces = spaces // (l - 1)\n                spaces += 1 if spaces * (l - 1) < spaces else 0\n                spaces *=''\n                res.append(words[i] + spaces)\n                i = j\n        return res"
    },
    {
        "number": 68,
        "title": "Text Justification",
        "difficulty": 2,
        "pass": 6,
        "answer": "        n = len(words)\n        if n == 0 or maxWidth == 0:\n            return []\n        if n == 1:\n            return [words[0] +'' * (maxWidth - len(words[0]))]\n        line = []\n        i = 0\n        while i < n - 1:\n            line.append(words[i] +'' * (maxWidth - len(words[i])))\n            i += 1\n        line.append(words[i] +'' * (maxWidth - len(words[i])))\n        return line"
    },
    {
        "number": 68,
        "title": "Text Justification",
        "difficulty": 2,
        "pass": 7,
        "answer": "        n = len(words)\n        if n == 0:\n            return []\n        res = []\n        cur_line = []\n        cur_len = 0\n        for i in range(n):\n            if cur_len + len(words[i]) + len(cur_line) <= maxWidth:\n                cur_len += len(words[i]) + len(cur_line)\n                cur_line.append(words[i])\n            else:\n                res.append(''.join(cur_line))\n                cur_line = [words[i]]\n                cur_len = len(words[i])\n        res.append(''.join(cur_line))\n        return res"
    },
    {
        "number": 68,
        "title": "Text Justification",
        "difficulty": 2,
        "pass": 8,
        "answer": "        if not words:\n            return []"
    },
    {
        "number": 68,
        "title": "Text Justification",
        "difficulty": 2,
        "pass": 9,
        "answer": "        n = len(words)\n        if n == 0:\n            return []\n        if n == 1:\n            return [words[0] +'' * (maxWidth - len(words[0]))]"
    },
    {
        "number": 69,
        "title": "Sqrt(x)",
        "difficulty": 0,
        "pass": 0,
        "answer": "        if x == 0:\n            return 0\n        if x == 1:\n            return 1\n        left, right = 1, x\n        while left <= right:\n            mid = left + (right - left) // 2\n            if mid * mid <= x < (mid + 1) * (mid + 1):\n                return mid\n            elif mid * mid > x:\n                right = mid - 1\n            else:\n                left = mid + 1"
    },
    {
        "number": 69,
        "title": "Sqrt(x)",
        "difficulty": 0,
        "pass": 1,
        "answer": "        if x == 0:\n            return 0\n        if x == 1:\n            return 1\n        if x == 2:\n            return 1\n        if x == 3:\n            return 2\n        if x == 4:\n            return 2\n        if x == 5:\n            return 3\n        if x == 6:\n            return 3\n        if x == 7:\n            return 4\n        if x == 8:\n            return 4\n        if x == 9:\n            return 5\n        if x == 10:\n            return 5\n        if x == 11:\n            return 6\n        if x == 12:\n            return 6\n        if x == 13:\n            return 7\n        if x == 14:\n            return 7\n        if x == 15:\n            return 8\n        if x == 16:\n            return 8\n        if x == 17:\n            return 9\n        if x == 18:\n            return 9\n        if x == 19:\n            return 10\n        if x == 20:\n            return 10\n        if x == 21:\n            return 11\n        if x == 22:\n            "
    },
    {
        "number": 69,
        "title": "Sqrt(x)",
        "difficulty": 0,
        "pass": 2,
        "answer": "        if x == 0:\n            return 0\n        if x == 1:\n            return 1\n        if x == 2:\n            return 1\n        if x == 3:\n            return 2\n        if x == 4:\n            return 2\n        if x == 5:\n            return 3\n        if x == 6:\n            return 3\n        if x == 7:\n            return 4\n        if x == 8:\n            return 4\n        if x == 9:\n            return 5\n        if x == 10:\n            return 5\n        if x == 11:\n            return 6\n        if x == 12:\n            return 6\n        if x == 13:\n            return 7\n        if x == 14:\n            return 7\n        if x == 15:\n            return 8\n        if x == 16:\n            return 8\n        if x == 17:\n            return 9\n        if x == 18:\n            return 9\n        if x == 19:\n            return 10\n        if x == 20:\n            return 10\n        if x == 21:\n            return 11\n        if x == 22:\n            "
    },
    {
        "number": 69,
        "title": "Sqrt(x)",
        "difficulty": 0,
        "pass": 3,
        "answer": "        if x == 0:\n            return 0\n        if x == 1:\n            return 1\n        if x == 2:\n            return 1\n        if x == 3:\n            return 2\n        if x == 4:\n            return 2\n        if x == 5:\n            return 3\n        if x == 6:\n            return 3\n        if x == 7:\n            return 4\n        if x == 8:\n            return 4\n        if x == 9:\n            return 5\n        if x == 10:\n            return 5\n        if x == 11:\n            return 6\n        if x == 12:\n            return 6\n        if x == 13:\n            return 7\n        if x == 14:\n            return 7\n        if x == 15:\n            return 8\n        if x == 16:\n            return 8\n        if x == 17:\n            return 9\n        if x == 18:\n            return 9\n        if x == 19:\n            return 10\n        if x == 20:\n            return 10\n        if x == 21:\n            return 11\n        if x == 22:\n            "
    },
    {
        "number": 69,
        "title": "Sqrt(x)",
        "difficulty": 0,
        "pass": 4,
        "answer": "        if x == 0:\n            return 0\n        if x == 1:\n            return 1\n        if x == 2:\n            return 1\n        if x == 3:\n            return 2\n        if x == 4:\n            return 2\n        if x == 5:\n            return 3\n        if x == 6:\n            return 3\n        if x == 7:\n            return 4\n        if x == 8:\n            return 4\n        if x == 9:\n            return 5\n        if x == 10:\n            return 5\n        if x == 11:\n            return 6\n        if x == 12:\n            return 6\n        if x == 13:\n            return 7\n        if x == 14:\n            return 7\n        if x == 15:\n            return 8\n        if x == 16:\n            return 8\n        if x == 17:\n            return 9\n        if x == 18:\n            return 9\n        if x == 19:\n            return 10\n        if x == 20:\n            return 10\n        if x == 21:\n            return 11\n        if x == 22:\n            "
    },
    {
        "number": 69,
        "title": "Sqrt(x)",
        "difficulty": 0,
        "pass": 5,
        "answer": "        if x == 0:\n            return 0\n        if x == 1:\n            return 1\n        left = 1\n        right = x\n        while left <= right:\n            mid = left + (right - left) // 2\n            if mid * mid == x:\n                return mid\n            elif mid * mid < x:\n                left = mid + 1\n            else:\n                right = mid - 1\n        return left - 1"
    },
    {
        "number": 69,
        "title": "Sqrt(x)",
        "difficulty": 0,
        "pass": 6,
        "answer": "        if x == 0:\n            return 0\n        if x == 1:\n            return 1\n        if x == 2:\n            return 1\n        l, r = 1, x\n        while l <= r:\n            mid = l + (r - l) // 2\n            if mid * mid == x:\n                return mid\n            elif mid * mid < x:\n                l = mid + 1\n            else:\n                r = mid - 1\n        return l - 1"
    },
    {
        "number": 69,
        "title": "Sqrt(x)",
        "difficulty": 0,
        "pass": 7,
        "answer": "        if x == 0:\n            return 0\n        if x == 1:\n            return 1\n        if x == 2:\n            return 1\n        if x == 3:\n            return 2\n        if x == 4:\n            return 2\n        if x == 5:\n            return 3\n        if x == 6:\n            return 3\n        if x == 7:\n            return 4\n        if x == 8:\n            return 4\n        if x == 9:\n            return 5\n        if x == 10:\n            return 5\n        if x == 11:\n            return 6\n        if x == 12:\n            return 6\n        if x == 13:\n            return 7\n        if x == 14:\n            return 7\n        if x == 15:\n            return 8\n        if x == 16:\n            return 8\n        if x == 17:\n            return 9\n        if x == 18:\n            return 9\n        if x == 19:\n            return 10\n        if x == 20:\n            return 10\n        if x == 21:\n            return 11\n        if x == 22:\n            "
    },
    {
        "number": 69,
        "title": "Sqrt(x)",
        "difficulty": 0,
        "pass": 8,
        "answer": "        if x == 0:\n            return 0\n        if x == 1:\n            return 1\n        if x == 2:\n            return 1\n        if x == 3:\n            return 2\n        if x == 4:\n            return 2\n        if x == 5:\n            return 3\n        if x == 6:\n            return 3\n        if x == 7:\n            return 4\n        if x == 8:\n            return 4\n        if x == 9:\n            return 5\n        if x == 10:\n            return 5\n        if x == 11:\n            return 6\n        if x == 12:\n            return 6\n        if x == 13:\n            return 7\n        if x == 14:\n            return 7\n        if x == 15:\n            return 8\n        if x == 16:\n            return 8\n        if x == 17:\n            return 9\n        if x == 18:\n            return 9\n        if x == 19:\n            return 10\n        if x == 20:\n            return 10\n        if x == 21:\n            return 11\n        if x == 22:\n            "
    },
    {
        "number": 69,
        "title": "Sqrt(x)",
        "difficulty": 0,
        "pass": 9,
        "answer": "        if x == 0:\n            return 0\n        if x == 1:\n            return 1\n        if x == 2:\n            return 1\n        if x == 3:\n            return 2\n        if x == 4:\n            return 2\n        if x == 5:\n            return 3\n        if x == 6:\n            return 3\n        if x == 7:\n            return 4\n        if x == 8:\n            return 4\n        if x == 9:\n            return 5\n        if x == 10:\n            return 5\n        if x == 11:\n            return 6\n        if x == 12:\n            return 6\n        if x == 13:\n            return 7\n        if x == 14:\n            return 7\n        if x == 15:\n            return 8\n        if x == 16:\n            return 8\n        if x == 17:\n            return 9\n        if x == 18:\n            return 9\n        if x == 19:\n            return 10\n        if x == 20:\n            return 10\n        if x == 21:\n            return 11\n        if x == 22:\n            "
    },
    {
        "number": 70,
        "title": "Climbing Stairs",
        "difficulty": 0,
        "pass": 0,
        "answer": "        if n == 1:\n            return 1\n        if n == 2:\n            return 2\n        if n == 3:\n            return 3\n        dp = [0] * (n + 1)\n        dp[1] = 1\n        dp[2] = 2\n        dp[3] = 3\n        for i in range(4, n + 1):\n            dp[i] = dp[i - 1] + dp[i - 2] + dp[i - 3]\n        return dp[n]"
    },
    {
        "number": 70,
        "title": "Climbing Stairs",
        "difficulty": 0,
        "pass": 1,
        "answer": "        if n == 1:\n            return 1\n        elif n == 2:\n            return 2\n        else:\n            return self.climbStairs(n - 1) + self.climbStairs(n - 2)"
    },
    {
        "number": 70,
        "title": "Climbing Stairs",
        "difficulty": 0,
        "pass": 2,
        "answer": "        if n == 1:\n            return 1\n        if n == 2:\n            return 2\n        if n == 3:\n            return 3\n        dp = [0] * (n + 1)\n        dp[1] = 1\n        dp[2] = 2\n        dp[3] = 3\n        for i in range(4, n + 1):\n            dp[i] = dp[i - 1] + dp[i - 2] + dp[i - 3]\n        return dp[n]"
    },
    {
        "number": 70,
        "title": "Climbing Stairs",
        "difficulty": 0,
        "pass": 3,
        "answer": "        if n == 1:\n            return 1\n        elif n == 2:\n            return 2\n        elif n == 3:\n            return 3\n        else:\n            return self.climbStairs(n - 1) + self.climbStairs(n - 2)"
    },
    {
        "number": 70,
        "title": "Climbing Stairs",
        "difficulty": 0,
        "pass": 4,
        "answer": "        if n == 1:\n            return 1\n        elif n == 2:\n            return 2\n        else:\n            return self.climbStairs(n - 1) + self.climbStairs(n - 2)"
    },
    {
        "number": 70,
        "title": "Climbing Stairs",
        "difficulty": 0,
        "pass": 5,
        "answer": "        if n == 1:\n            return 1\n        if n == 2:\n            return 2\n        if n == 3:\n            return 3\n        dp = [0] * (n + 1)\n        dp[1] = 1\n        dp[2] = 2\n        dp[3] = 3\n        for i in range(4, n + 1):\n            dp[i] = dp[i - 1] + dp[i - 2] + dp[i - 3]\n        return dp[n]"
    },
    {
        "number": 70,
        "title": "Climbing Stairs",
        "difficulty": 0,
        "pass": 6,
        "answer": "        if n == 1:\n            return 1\n        if n == 2:\n            return 2\n        if n == 3:\n            return 3\n        dp = [0] * (n + 1)\n        dp[1] = 1\n        dp[2] = 2\n        dp[3] = 3\n        for i in range(4, n + 1):\n            dp[i] = dp[i - 1] + dp[i - 2] + dp[i - 3]\n        return dp[-1]"
    },
    {
        "number": 70,
        "title": "Climbing Stairs",
        "difficulty": 0,
        "pass": 7,
        "answer": "        if n == 1:\n            return 1\n        if n == 2:\n            return 2\n        if n == 3:\n            return 3\n        dp = [0] * (n + 1)\n        dp[1] = 1\n        dp[2] = 2\n        dp[3] = 3\n        for i in range(4, n + 1):\n            dp[i] = dp[i - 1] + dp[i - 2] + dp[i - 3]\n        return dp[n]"
    },
    {
        "number": 70,
        "title": "Climbing Stairs",
        "difficulty": 0,
        "pass": 8,
        "answer": "        if n == 1:\n            return 1\n        elif n == 2:\n            return 2\n        else:\n            return self.climbStairs(n-1) + self.climbStairs(n-2)"
    },
    {
        "number": 70,
        "title": "Climbing Stairs",
        "difficulty": 0,
        "pass": 9,
        "answer": "        if n == 1:\n            return 1\n        elif n == 2:\n            return 2\n        else:\n            return self.climbStairs(n - 1) + self.climbStairs(n - 2)"
    },
    {
        "number": 71,
        "title": "Simplify Path",
        "difficulty": 1,
        "pass": 0,
        "answer": "        path = path.strip('/')\n        stack = []\n        for p in path.split('/'):\n            if p == '..':\n                if stack:\n                    stack.pop()\n            elif p and p!= '.':\n                stack.append(p)\n        return '/' + '/'.join(stack)"
    },
    {
        "number": 71,
        "title": "Simplify Path",
        "difficulty": 1,
        "pass": 1,
        "answer": "        path = path.strip('/')\n        stack = []\n        for p in path.split('/'):\n            if p == '..':\n                if stack:\n                    stack.pop()\n            elif p and p!= '.':\n                stack.append(p)\n        return '/' + '/'.join(stack)"
    },
    {
        "number": 71,
        "title": "Simplify Path",
        "difficulty": 1,
        "pass": 2,
        "answer": "        path = path.strip('/')\n        stack = []\n        for p in path.split('/'):\n            if p == '..':\n                if stack:\n                    stack.pop()\n            elif p and p!= '.':\n                stack.append(p)\n        return '/' + '/'.join(stack)"
    },
    {
        "number": 71,
        "title": "Simplify Path",
        "difficulty": 1,
        "pass": 3,
        "answer": "        path = path.strip('/')\n        stack = []\n        for p in path.split('/'):\n            if p == '..':\n                if stack:\n                    stack.pop()\n            elif p and p!= '.':\n                stack.append(p)\n        return '/' + '/'.join(stack)"
    },
    {
        "number": 71,
        "title": "Simplify Path",
        "difficulty": 1,
        "pass": 4,
        "answer": "        path = path.split('/')\n        stack = []\n        for p in path:\n            if p == '..':\n                if stack:\n                    stack.pop()\n            elif p and p!= '.':\n                stack.append(p)\n        return '/' + '/'.join(stack)"
    },
    {
        "number": 71,
        "title": "Simplify Path",
        "difficulty": 1,
        "pass": 5,
        "answer": "        path = path.strip('/')\n        stack = []\n        for p in path.split('/'):\n            if p == '..':\n                if stack:\n                    stack.pop()\n            elif p and p!= '.':\n                stack.append(p)\n        return '/' + '/'.join(stack)"
    },
    {
        "number": 71,
        "title": "Simplify Path",
        "difficulty": 1,
        "pass": 6,
        "answer": "        path = path.split('/')\n        stack = []\n        for p in path:\n            if p == '..':\n                if stack:\n                    stack.pop()\n            elif p and p!= '.':\n                stack.append(p)\n        return '/' + '/'.join(stack)"
    },
    {
        "number": 71,
        "title": "Simplify Path",
        "difficulty": 1,
        "pass": 7,
        "answer": "        if not path:\n            return path\n        stack = []\n        for p in path.split('/'):\n            if p == '..':\n                if stack:\n                    stack.pop()\n            elif p and p!= '.':\n                stack.append(p)\n        return '/' + '/'.join(stack)"
    },
    {
        "number": 71,
        "title": "Simplify Path",
        "difficulty": 1,
        "pass": 8,
        "answer": "        path = path.split('/')\n        stack = []\n        for p in path:\n            if p == '.':\n                continue\n            elif p == '..':\n                if stack:\n                    stack.pop()\n            else:\n                stack.append(p)\n        return '/' + '/'.join(stack)"
    },
    {
        "number": 71,
        "title": "Simplify Path",
        "difficulty": 1,
        "pass": 9,
        "answer": "        path = path.split(\"/\")\n        stack = []\n        for p in path:\n            if p == \"..\":\n                if stack:\n                    stack.pop()\n            elif p and p!= \".\":\n                stack.append(p)\n        return \"/\" + \"/\".join(stack)"
    },
    {
        "number": 72,
        "title": "Edit Distance",
        "difficulty": 2,
        "pass": 0,
        "answer": "        m, n = len(word1), len(word2)\n        dp = [[0] * (n + 1) for _ in range(m + 1)]\n        for i in range(m + 1):\n            dp[i][0] = i\n        for j in range(n + 1):\n            dp[0][j] = j\n        for i in range(1, m + 1):\n            for j in range(1, n + 1):\n                if word1[i - 1] == word2[j - 1]:\n                    dp[i][j] = dp[i - 1][j - 1]\n                else:\n                    dp[i][j] = min(dp[i - 1][j], dp[i][j - 1], dp[i - 1][j - 1]) + 1\n        return dp[-1][-1]"
    },
    {
        "number": 72,
        "title": "Edit Distance",
        "difficulty": 2,
        "pass": 1,
        "answer": "        m, n = len(word1), len(word2)\n        dp = [[0] * (n + 1) for _ in range(m + 1)]\n        for i in range(m + 1):\n            dp[i][0] = i\n        for j in range(n + 1):\n            dp[0][j] = j\n        for i in range(1, m + 1):\n            for j in range(1, n + 1):\n                if word1[i - 1] == word2[j - 1]:\n                    dp[i][j] = dp[i - 1][j - 1]\n                else:\n                    dp[i][j] = min(dp[i - 1][j], dp[i][j - 1], dp[i - 1][j - 1]) + 1\n        return dp[-1][-1]"
    },
    {
        "number": 72,
        "title": "Edit Distance",
        "difficulty": 2,
        "pass": 2,
        "answer": "        m, n = len(word1), len(word2)\n        dp = [[0] * (n + 1) for _ in range(m + 1)]\n        for i in range(m + 1):\n            dp[i][0] = i\n        for j in range(n + 1):\n            dp[0][j] = j\n        for i in range(1, m + 1):\n            for j in range(1, n + 1):\n                if word1[i - 1] == word2[j - 1]:\n                    dp[i][j] = dp[i - 1][j - 1]\n                else:\n                    dp[i][j] = min(dp[i - 1][j], dp[i][j - 1], dp[i - 1][j - 1]) + 1\n        return dp[-1][-1]"
    },
    {
        "number": 72,
        "title": "Edit Distance",
        "difficulty": 2,
        "pass": 3,
        "answer": "        m, n = len(word1), len(word2)\n        dp = [[0] * (n + 1) for _ in range(m + 1)]\n        for i in range(m + 1):\n            dp[i][0] = i\n        for j in range(n + 1):\n            dp[0][j] = j\n        for i in range(1, m + 1):\n            for j in range(1, n + 1):\n                if word1[i - 1] == word2[j - 1]:\n                    dp[i][j] = dp[i - 1][j - 1]\n                else:\n                    dp[i][j] = min(dp[i - 1][j], dp[i][j - 1], dp[i - 1][j - 1]) + 1\n        return dp[-1][-1]"
    },
    {
        "number": 72,
        "title": "Edit Distance",
        "difficulty": 2,
        "pass": 4,
        "answer": "        m, n = len(word1), len(word2)\n        dp = [[0] * (n + 1) for _ in range(m + 1)]\n        for i in range(m + 1):\n            dp[i][0] = i\n        for j in range(n + 1):\n            dp[0][j] = j\n        for i in range(1, m + 1):\n            for j in range(1, n + 1):\n                if word1[i - 1] == word2[j - 1]:\n                    dp[i][j] = dp[i - 1][j - 1]\n                else:\n                    dp[i][j] = min(dp[i - 1][j], dp[i][j - 1], dp[i - 1][j - 1]) + 1\n        return dp[-1][-1]"
    },
    {
        "number": 72,
        "title": "Edit Distance",
        "difficulty": 2,
        "pass": 5,
        "answer": "        m, n = len(word1), len(word2)\n        dp = [[0] * (n + 1) for _ in range(m + 1)]\n        for i in range(m + 1):\n            dp[i][0] = i\n        for j in range(n + 1):\n            dp[0][j] = j\n        for i in range(1, m + 1):\n            for j in range(1, n + 1):\n                if word1[i - 1] == word2[j - 1]:\n                    dp[i][j] = dp[i - 1][j - 1]\n                else:\n                    dp[i][j] = 1 + min(dp[i - 1][j], dp[i][j - 1], dp[i - 1][j - 1])\n        return dp[-1][-1]"
    },
    {
        "number": 72,
        "title": "Edit Distance",
        "difficulty": 2,
        "pass": 6,
        "answer": "        m, n = len(word1), len(word2)\n        dp = [[0] * (n + 1) for _ in range(m + 1)]\n        for i in range(m + 1):\n            dp[i][0] = i\n        for j in range(n + 1):\n            dp[0][j] = j\n        for i in range(1, m + 1):\n            for j in range(1, n + 1):\n                if word1[i - 1] == word2[j - 1]:\n                    dp[i][j] = dp[i - 1][j - 1]\n                else:\n                    dp[i][j] = min(dp[i - 1][j], dp[i][j - 1], dp[i - 1][j - 1]) + 1\n        return dp[-1][-1]"
    },
    {
        "number": 72,
        "title": "Edit Distance",
        "difficulty": 2,
        "pass": 7,
        "answer": "        m, n = len(word1), len(word2)\n        dp = [[0] * (n + 1) for _ in range(m + 1)]\n        for i in range(m + 1):\n            dp[i][0] = i\n        for j in range(n + 1):\n            dp[0][j] = j\n        for i in range(1, m + 1):\n            for j in range(1, n + 1):\n                if word1[i - 1] == word2[j - 1]:\n                    dp[i][j] = dp[i - 1][j - 1]\n                else:\n                    dp[i][j] = min(dp[i - 1][j], dp[i][j - 1], dp[i - 1][j - 1]) + 1\n        return dp[-1][-1]"
    },
    {
        "number": 72,
        "title": "Edit Distance",
        "difficulty": 2,
        "pass": 8,
        "answer": "        m, n = len(word1), len(word2)\n        dp = [[0] * (n + 1) for _ in range(m + 1)]\n        for i in range(m + 1):\n            dp[i][0] = i\n        for j in range(n + 1):\n            dp[0][j] = j\n        for i in range(1, m + 1):\n            for j in range(1, n + 1):\n                if word1[i - 1] == word2[j - 1]:\n                    dp[i][j] = dp[i - 1][j - 1]\n                else:\n                    dp[i][j] = min(dp[i - 1][j], dp[i][j - 1], dp[i - 1][j - 1]) + 1\n        return dp[-1][-1]"
    },
    {
        "number": 72,
        "title": "Edit Distance",
        "difficulty": 2,
        "pass": 9,
        "answer": "        m, n = len(word1), len(word2)\n        dp = [[0] * (n + 1) for _ in range(m + 1)]\n        for i in range(m + 1):\n            dp[i][0] = i\n        for j in range(n + 1):\n            dp[0][j] = j\n        for i in range(1, m + 1):\n            for j in range(1, n + 1):\n                if word1[i - 1] == word2[j - 1]:\n                    dp[i][j] = dp[i - 1][j - 1]\n                else:\n                    dp[i][j] = min(dp[i - 1][j], dp[i][j - 1], dp[i - 1][j - 1]) + 1\n        return dp[-1][-1]"
    },
    {
        "number": 73,
        "title": "Set Matrix Zeroes",
        "difficulty": 1,
        "pass": 0,
        "answer": "        m = len(matrix)\n        n = len(matrix[0])\n        rows = set()\n        cols = set()"
    },
    {
        "number": 73,
        "title": "Set Matrix Zeroes",
        "difficulty": 1,
        "pass": 1,
        "answer": "        row = set()\n        col = set()\n        for i in range(len(matrix)):\n            for j in range(len(matrix[0])):\n                if matrix[i][j] == 0:\n                    row.add(i)\n                    col.add(j)\n        for i in range(len(matrix)):\n            for j in range(len(matrix[0])):\n                if i in row or j in col:\n                    matrix[i][j] = 0\n        return matrix"
    },
    {
        "number": 73,
        "title": "Set Matrix Zeroes",
        "difficulty": 1,
        "pass": 2,
        "answer": "        m = len(matrix)\n        n = len(matrix[0])\n        row = set()\n        col = set()\n        for i in range(m):\n            for j in range(n):\n                if matrix[i][j] == 0:\n                    row.add(i)\n                    col.add(j)\n        for i in range(m):\n            for j in range(n):\n                if i in row or j in col:\n                    matrix[i][j] = 0\n        return matrix"
    },
    {
        "number": 73,
        "title": "Set Matrix Zeroes",
        "difficulty": 1,
        "pass": 3,
        "answer": "        m = len(matrix)\n        n = len(matrix[0])\n        rows = set()\n        cols = set()"
    },
    {
        "number": 73,
        "title": "Set Matrix Zeroes",
        "difficulty": 1,
        "pass": 4,
        "answer": "        m = len(matrix)\n        n = len(matrix[0])\n        rows = set()\n        cols = set()"
    },
    {
        "number": 73,
        "title": "Set Matrix Zeroes",
        "difficulty": 1,
        "pass": 5,
        "answer": "        rows = len(matrix)\n        cols = len(matrix[0])\n        \n        for i in range(rows):\n            for j in range(cols):\n                if matrix[i][j] == 0:\n                    for k in range(rows):\n                        if matrix[k][j]!= 0:\n                            matrix[k][j] = 0\n                    for k in range(cols):\n                        if matrix[i][k]!= 0:\n                            matrix[i][k] = 0\n        \n        for i in range(rows):\n            for j in range(cols):\n                if matrix[i][j] == 0:\n                    matrix[i][0] = 0\n                    matrix[0][j] = 0\n        \n        return matrix"
    },
    {
        "number": 73,
        "title": "Set Matrix Zeroes",
        "difficulty": 1,
        "pass": 6,
        "answer": "        m = len(matrix)\n        n = len(matrix[0])\n        zero_rows = set()\n        zero_cols = set()\n        for i in range(m):\n            for j in range(n):\n                if matrix[i][j] == 0:\n                    zero_rows.add(i)\n                    zero_cols.add(j)\n        for i in range(m):\n            for j in range(n):\n                if i in zero_rows or j in zero_cols:\n                    matrix[i][j] = 0\n        return matrix"
    },
    {
        "number": 73,
        "title": "Set Matrix Zeroes",
        "difficulty": 1,
        "pass": 7,
        "answer": "        m = len(matrix)\n        n = len(matrix[0])\n        rows = set()\n        cols = set()\n        for i in range(m):\n            for j in range(n):\n                if matrix[i][j] == 0:\n                    rows.add(i)\n                    cols.add(j)\n        for i in range(m):\n            for j in range(n):\n                if i in rows or j in cols:\n                    matrix[i][j] = 0\n        return matrix"
    },
    {
        "number": 73,
        "title": "Set Matrix Zeroes",
        "difficulty": 1,
        "pass": 8,
        "answer": "        m = len(matrix)\n        n = len(matrix[0])\n        rows = set()\n        cols = set()"
    },
    {
        "number": 73,
        "title": "Set Matrix Zeroes",
        "difficulty": 1,
        "pass": 9,
        "answer": "        m = len(matrix)\n        n = len(matrix[0])\n        zero_row = set()\n        zero_col = set()\n        for i in range(m):\n            for j in range(n):\n                if matrix[i][j] == 0:\n                    zero_row.add(i)\n                    zero_col.add(j)\n        for i in range(m):\n            for j in range(n):\n                if i in zero_row or j in zero_col:\n                    matrix[i][j] = 0\n        return matrix"
    },
    {
        "number": 74,
        "title": "Search a 2D Matrix",
        "difficulty": 1,
        "pass": 0,
        "answer": "        if not matrix:\n            return False\n        m, n = len(matrix), len(matrix[0])\n        low, high = 0, m * n - 1\n        while low <= high:\n            mid = low + (high - low) // 2\n            if matrix[mid // n][mid % n] == target:\n                return True\n            elif matrix[mid // n][mid % n] > target:\n                high = mid - 1\n            else:\n                low = mid + 1\n        return False\n"
    },
    {
        "number": 74,
        "title": "Search a 2D Matrix",
        "difficulty": 1,
        "pass": 1,
        "answer": "        if not matrix or not matrix[0]:\n            return False\n        rows, cols = len(matrix), len(matrix[0])\n        left, right = 0, rows * cols - 1\n        while left <= right:\n            mid = left + (right - left) // 2\n            if matrix[mid // cols][mid % cols] == target:\n                return True\n            elif matrix[mid // cols][mid % cols] < target:\n                left = mid + 1\n            else:\n                right = mid - 1\n        return False"
    },
    {
        "number": 74,
        "title": "Search a 2D Matrix",
        "difficulty": 1,
        "pass": 2,
        "answer": "        if not matrix or not matrix[0]:\n            return False\n        m, n = len(matrix), len(matrix[0])\n        l, r = 0, m * n - 1\n        while l <= r:\n            mid = (l + r) // 2\n            if matrix[mid // n][mid % n] == target:\n                return True\n            elif matrix[mid // n][mid % n] < target:\n                l = mid + 1\n            else:\n                r = mid - 1\n        return False"
    },
    {
        "number": 74,
        "title": "Search a 2D Matrix",
        "difficulty": 1,
        "pass": 3,
        "answer": "        if not matrix or not matrix[0]:\n            return False\n        m, n = len(matrix), len(matrix[0])\n        low, high = 0, m * n - 1\n        while low <= high:\n            mid = low + (high - low) // 2\n            i, j = mid // n, mid % n\n            if matrix[i][j] == target:\n                return True\n            elif matrix[i][j] < target:\n                low = mid + 1\n            else:\n                high = mid - 1\n        return False"
    },
    {
        "number": 74,
        "title": "Search a 2D Matrix",
        "difficulty": 1,
        "pass": 4,
        "answer": "        if not matrix or not matrix[0]:\n            return False\n        m, n = len(matrix), len(matrix[0])\n        low, high = 0, m * n - 1\n        while low <= high:\n            mid = low + (high - low) // 2\n            if matrix[mid // n][mid % n] == target:\n                return True\n            elif matrix[mid // n][mid % n] < target:\n                low = mid + 1\n            else:\n                high = mid - 1\n        return False"
    },
    {
        "number": 74,
        "title": "Search a 2D Matrix",
        "difficulty": 1,
        "pass": 5,
        "answer": "        if not matrix:\n            return False\n        m, n = len(matrix), len(matrix[0])\n        low, high = 0, m * n - 1\n        while low <= high:\n            mid = low + (high - low) // 2\n            num = matrix[mid // n][mid % n]\n            if num == target:\n                return True\n            elif num < target:\n                low = mid + 1\n            else:\n                high = mid - 1\n        return False"
    },
    {
        "number": 74,
        "title": "Search a 2D Matrix",
        "difficulty": 1,
        "pass": 6,
        "answer": "        if not matrix or not matrix[0]:\n            return False\n        \n        m, n = len(matrix), len(matrix[0])\n        low, high = 0, m * n - 1\n        \n        while low <= high:\n            mid = low + (high - low) // 2\n            if matrix[mid // n][mid % n] == target:\n                return True\n            elif matrix[mid // n][mid % n] > target:\n                high = mid - 1\n            else:\n                low = mid + 1\n        \n        return False"
    },
    {
        "number": 74,
        "title": "Search a 2D Matrix",
        "difficulty": 1,
        "pass": 7,
        "answer": "        if not matrix or not matrix[0]:\n            return False\n        m, n = len(matrix), len(matrix[0])\n        l, r = 0, m * n - 1\n        while l <= r:\n            mid = (l + r) // 2\n            if matrix[mid // n][mid % n] == target:\n                return True\n            elif matrix[mid // n][mid % n] < target:\n                l = mid + 1\n            else:\n                r = mid - 1\n        return False"
    },
    {
        "number": 74,
        "title": "Search a 2D Matrix",
        "difficulty": 1,
        "pass": 8,
        "answer": "        if not matrix or not matrix[0]:\n            return False\n        m, n = len(matrix), len(matrix[0])\n        left, right = 0, m * n - 1\n        while left <= right:\n            mid = left + (right - left) // 2\n            if matrix[mid // n][mid % n] == target:\n                return True\n            elif matrix[mid // n][mid % n] < target:\n                left = mid + 1\n            else:\n                right = mid - 1\n        return False"
    },
    {
        "number": 74,
        "title": "Search a 2D Matrix",
        "difficulty": 1,
        "pass": 9,
        "answer": "        if not matrix or not matrix[0]:\n            return False\n        \n        m, n = len(matrix), len(matrix[0])\n        low, high = 0, m * n - 1\n        \n        while low <= high:\n            mid = low + (high - low) // 2\n            if matrix[mid // n][mid % n] == target:\n                return True\n            elif matrix[mid // n][mid % n] < target:\n                low = mid + 1\n            else:\n                high = mid - 1\n        \n        return False\n        \n        \nclass Solution:\n    def searchMatrix(self, matrix: List[List[int]], target: int) -> bool:\n        \"\"\"\n        You are given an m x n integer matrix matrix with the following two properties:\n            Each row is sorted in non-decreasing order.\n            The first integer of each row is greater than the last integer of the previous row.\n        Given an integer target, return true if target is in matrix or false otherwise.\n        You must write a solution in O(log(m * n))"
    },
    {
        "number": 75,
        "title": "Sort Colors",
        "difficulty": 1,
        "pass": 0,
        "answer": "        \"\"\"\n        :type nums: List[int]\n        :rtype: None Do not return anything, modify nums in-place instead.\n        \"\"\"\n        if not nums:\n            return nums\n        red, white, blue = 0, 0, len(nums) - 1\n        while white <= blue:\n            if nums[white] == 0:\n                nums[red], nums[white] = nums[white], nums[red]\n                white += 1\n                red += 1\n            elif nums[white] == 1:\n                white += 1\n            else:\n                nums[white], nums[blue] = nums[blue], nums[white]\n                blue -= 1\n        return nums"
    },
    {
        "number": 75,
        "title": "Sort Colors",
        "difficulty": 1,
        "pass": 1,
        "answer": "        if not nums or len(nums) == 0:\n            return nums\n        red, white, blue = 0, 0, len(nums) - 1\n        while white <= blue:\n            if nums[white] == 0:\n                nums[red], nums[white] = nums[white], nums[red]\n                white += 1\n                red += 1\n            elif nums[white] == 1:\n                white += 1\n            else:\n                nums[white], nums[blue] = nums[blue], nums[white]\n                blue -= 1\n        return nums"
    },
    {
        "number": 75,
        "title": "Sort Colors",
        "difficulty": 1,
        "pass": 2,
        "answer": "        \n        \"\"\"\n        :type nums: List[int]\n        :rtype: None Do not return anything, modify nums in-place instead.\n        \"\"\"\n        \n        \"\"\"\n        :type nums: List[int]\n        :rtype: None Do not return anything, modify nums in-place instead.\n        \"\"\"\n        \n        \"\"\"\n        :type nums: List[int]\n        :rtype: None Do not return anything, modify nums in-place instead.\n        \"\"\"\n        \n        \"\"\"\n        :type nums: List[int]\n        :rtype: None Do not return anything, modify nums in-place instead.\n        \"\"\"\n        \n        \"\"\"\n        :type nums: List[int]\n        :rtype: None Do not return anything, modify nums in-place instead.\n        \"\"\"\n        \n        \"\"\"\n        :type nums: List[int]\n        :rtype: None Do not return anything, modify nums in-place instead.\n        \"\"\"\n        \n        \"\"\"\n        :type nums: List[int]\n"
    },
    {
        "number": 75,
        "title": "Sort Colors",
        "difficulty": 1,
        "pass": 3,
        "answer": "        n = len(nums)\n        i = 0\n        j = n - 1\n        while i <= j:\n            while i <= j and nums[i] == 0:\n                i += 1\n            while i <= j and nums[j] == 2:\n                j -= 1\n            if i <= j:\n                nums[i], nums[j] = nums[j], nums[i]\n                i += 1\n                j -= 1\n        return nums"
    },
    {
        "number": 75,
        "title": "Sort Colors",
        "difficulty": 1,
        "pass": 4,
        "answer": "        \"\"\"\n        :type nums: List[int]\n        :rtype: None Do not return anything, modify nums in-place instead.\n        \"\"\"\n        l = 0\n        r = len(nums) - 1\n        i = 0\n        while i <= r:\n            if nums[i] == 0:\n                nums[i], nums[l] = nums[l], nums[i]\n                i += 1\n                l += 1\n            elif nums[i] == 2:\n                nums[i], nums[r] = nums[r], nums[i]\n                r -= 1\n            else:\n                i += 1\n        return nums"
    },
    {
        "number": 75,
        "title": "Sort Colors",
        "difficulty": 1,
        "pass": 5,
        "answer": "        n = len(nums)\n        p0, p2 = 0, n-1\n        i = 0\n        while i <= p2:\n            if nums[i] == 0:\n                nums[i], nums[p0] = nums[p0], nums[i]\n                p0 += 1\n                i += 1\n            elif nums[i] == 2:\n                nums[i], nums[p2] = nums[p2], nums[i]\n                p2 -= 1\n            else:\n                i += 1\n        return nums"
    },
    {
        "number": 75,
        "title": "Sort Colors",
        "difficulty": 1,
        "pass": 6,
        "answer": "        l = 0\n        r = len(nums) - 1\n        i = 0\n        while i <= r:\n            if nums[i] == 0:\n                nums[i], nums[l] = nums[l], nums[i]\n                i += 1\n                l += 1\n            elif nums[i] == 2:\n                nums[i], nums[r] = nums[r], nums[i]\n                r -= 1\n            else:\n                i += 1\n        return nums"
    },
    {
        "number": 75,
        "title": "Sort Colors",
        "difficulty": 1,
        "pass": 7,
        "answer": "        \n        n = len(nums)\n        if n <= 1:\n            return nums\n        \n        red, white, blue = 0, 0, n-1\n        \n        while white <= blue:\n            if nums[white] == 0:\n                nums[red], nums[white] = nums[white], nums[red]\n                red += 1\n                white += 1\n            elif nums[white] == 1:\n                white += 1\n            else:\n                nums[white], nums[blue] = nums[blue], nums[white]\n                blue -= 1\n        \n        return nums"
    },
    {
        "number": 75,
        "title": "Sort Colors",
        "difficulty": 1,
        "pass": 8,
        "answer": "        i = 0\n        for j in range(len(nums)):\n            if nums[j] == 0:\n                nums[i], nums[j] = nums[j], nums[i]\n                i += 1"
    },
    {
        "number": 75,
        "title": "Sort Colors",
        "difficulty": 1,
        "pass": 9,
        "answer": "        if len(nums) <= 1:\n            return nums\n        \n        left = 0\n        mid = 0\n        right = len(nums) - 1\n        \n        while mid <= right:\n            if nums[mid] == 0:\n                nums[left], nums[mid] = nums[mid], nums[left]\n                left += 1\n                mid += 1\n            elif nums[mid] == 1:\n                mid += 1\n            else:\n                nums[mid], nums[right] = nums[right], nums[mid]\n                right -= 1\n        return nums"
    },
    {
        "number": 76,
        "title": "Minimum Window Substring",
        "difficulty": 2,
        "pass": 0,
        "answer": "        if not s or not t or len(s) < len(t):\n            return \"\"\n        \n        if len(t) > len(s):\n            return \"\"\n        \n        if len(t) == 0:\n            return s\n        \n        from collections import defaultdict\n        need = defaultdict(int)\n        for char in t:\n            need[char] += 1\n        \n        window = defaultdict(int)\n        left, right = 0, 0\n        res = \"\"\n        \n        while right < len(s):\n            if s[right] in need:\n                window[s[right]] += 1\n                if window[s[right]] == need[s[right]]:\n                    need[s[right]] -= 1\n            \n            while len(window) == len(need):\n                if right - left + 1 < len(res):\n                    res = s[left:right+1]\n                if s[left] in need:\n                    window[s[left]] -= 1\n                    if window[s[left]] < need[s[left]]:\n                        break"
    },
    {
        "number": 76,
        "title": "Minimum Window Substring",
        "difficulty": 2,
        "pass": 1,
        "answer": "        if not s or not t or len(s) < len(t):\n            return \"\"\n        if len(s) == len(t):\n            if s == t:\n                return s\n            else:\n                return \"\"\n        if len(t) > len(s):\n            return \"\"\n        if len(t) == 0:\n            return \"\"\n        if len(s) == 0:\n            return \"\"\n        if len(s) == len(t):\n            if s == t:\n                return s\n            else:\n                return \"\"\n        if len(s) == len(t):\n            if s == t:\n                return s\n            else:\n                return \"\"\n        if len(s) == len(t):\n            if s == t:\n                return s\n            else:\n                return \"\"\n        if len(s) == len(t):\n            if s == t:\n                return s\n            else:\n                return \"\"\n        if len(s) == len(t):\n            if s == t:\n                return s\n            else:\n                return"
    },
    {
        "number": 76,
        "title": "Minimum Window Substring",
        "difficulty": 2,
        "pass": 2,
        "answer": "        if not s or not t or len(s) < len(t):\n            return \"\"\n        if len(t) > len(s):\n            return \"\"\n        \n        if len(t) == 0:\n            return \"\"\n        if len(t) == 1:\n            if s == t:\n                return s\n            else:\n                return \"\"\n        if len(t) == 2:\n            if s == t:\n                return s\n            else:\n                return \"\"\n        if len(t) == 3:\n            if s == t:\n                return s\n            else:\n                return \"\"\n        if len(t) == 4:\n            if s == t:\n                return s\n            else:\n                return \"\"\n        if len(t) == 5:\n            if s == t:\n                return s\n            else:\n                return \"\"\n        if len(t) == 6:\n            if s == t:\n                return s\n            else:\n                return \"\"\n        if len(t) == 7:\n            if s == t:\n                return s\n            "
    },
    {
        "number": 76,
        "title": "Minimum Window Substring",
        "difficulty": 2,
        "pass": 3,
        "answer": "        if not s or not t or len(s) < len(t):\n            return \"\"\n        if len(t) > len(s):\n            return \"\"\n        \n        if s == t:\n            return s\n        \n        hash_t = {}\n        for c in t:\n            if c not in hash_t:\n                hash_t[c] = 0\n            hash_t[c] += 1\n        \n        hash_s = {}\n        for c in s:\n            if c not in hash_s:\n                hash_s[c] = 0\n            hash_s[c] += 1\n        \n        min_length = float('inf')\n        start = 0\n        end = 0\n        \n        for i in range(len(s)):\n            if s[i] in hash_t:\n                hash_s[s[i]] -= 1\n                if hash_s[s[i]] >= 0:\n                    min_length = min(min_length, i - start + 1)\n                else:\n                    while hash_s[s[i]] <"
    },
    {
        "number": 76,
        "title": "Minimum Window Substring",
        "difficulty": 2,
        "pass": 4,
        "answer": "        if not s or not t or len(s) < len(t):\n            return \"\"\n        if len(t) > len(s):\n            return \"\"\n        if len(s) == len(t):\n            return s\n        if len(t) == 0:\n            return \"\"\n        if len(t) == 1:\n            return s\n        if len(t) == 2:\n            if s == t:\n                return s\n            return \"\"\n        if len(t) == 3:\n            if s == t:\n                return s\n            return \"\"\n        if len(t) == 4:\n            if s == t:\n                return s\n            return \"\"\n        if len(t) == 5:\n            if s == t:\n                return s\n            return \"\"\n        if len(t) == 6:\n            if s == t:\n                return s\n            return \"\"\n        if len(t) == 7:\n            if s == t:\n                return s\n            return \"\"\n        if len(t) == 8:\n            if s == t:\n                "
    },
    {
        "number": 76,
        "title": "Minimum Window Substring",
        "difficulty": 2,
        "pass": 5,
        "answer": "        if not s or not t or len(s) < len(t):\n            return \"\"\n        \n        if len(s) == len(t):\n            if s == t:\n                return s\n            else:\n                return \"\"\n        \n        if len(s) < len(t):\n            return \"\"\n        \n        if len(s) == len(t) and s == t:\n            return s\n        \n        if len(s) == len(t) and s!= t:\n            return \"\"\n        \n        if len(s) == len(t) and s!= t:\n            return \"\"\n        \n        if len(s) == len(t) and s!= t:\n            return \"\"\n        \n        if len(s) == len(t) and s!= t:\n            return \"\"\n        \n        if len(s) == len(t) and s!= t:\n            return \"\"\n        \n        if len(s) == len(t) and s!= t:\n            return \"\"\n        \n        if len(s) == len(t) and s!="
    },
    {
        "number": 76,
        "title": "Minimum Window Substring",
        "difficulty": 2,
        "pass": 6,
        "answer": "        \n        if not s or not t or len(s) < len(t):\n            return \"\"\n        \n        n = len(s)\n        m = len(t)\n        \n        # sliding window\n        left, right = 0, 0\n        min_length = float('inf')\n        min_window = \"\"\n        \n        while right < n:\n            if s[right] == t[left]:\n                right += 1\n                left += 1\n            else:\n                left += 1\n            \n            if right - left < min_length:\n                min_length = right - left\n                min_window = s[left-min_length:left]\n            \n        return min_window"
    },
    {
        "number": 76,
        "title": "Minimum Window Substring",
        "difficulty": 2,
        "pass": 7,
        "answer": "        if not s or not t or len(s) < len(t):\n            return \"\"\n        if len(t) > len(s):\n            return \"\"\n        if len(s) == len(t):\n            return s\n        if len(s) == len(t) == 1:\n            return s\n        if len(s) == len(t) == 2:\n            if s == t:\n                return s\n            else:\n                return \"\"\n        if len(s) == len(t) == 3:\n            if s == t:\n                return s\n            else:\n                return \"\"\n        if len(s) == len(t) == 4:\n            if s == t:\n                return s\n            else:\n                return \"\"\n        if len(s) == len(t) == 5:\n            if s == t:\n                return s\n            else:\n                return \"\"\n        if len(s) == len(t) == 6:\n            if s == t:\n                return s\n            else:\n                return \"\"\n        if len(s) =="
    },
    {
        "number": 76,
        "title": "Minimum Window Substring",
        "difficulty": 2,
        "pass": 8,
        "answer": "        \n        n = len(s)\n        m = len(t)\n        \n        if n == 0 or m == 0:\n            return \"\"\n        \n        if n < m:\n            return \"\"\n        \n        # dp[i][j] = True if s[i:j+1] is in t\n        dp = [[False for _ in range(m+1)] for _ in range(n+1)]\n        \n        for i in range(1, n+1):\n            dp[i][0] = True\n        \n        for j in range(1, m+1):\n            dp[0][j] = s[0] == t[j-1]\n        \n        for i in range(1, n+1):\n            for j in range(1, m+1):\n                if s[i-1] == t[j-1]:\n                    dp[i][j] = dp[i-1][j-1]\n                else:\n                    dp[i][j] = False\n        \n        res = \"\"\n        for i in range(n"
    },
    {
        "number": 76,
        "title": "Minimum Window Substring",
        "difficulty": 2,
        "pass": 9,
        "answer": "        if not s or not t or len(s) < len(t): return \"\"\n        if len(t) > len(s): return \"\"\n        from collections import Counter\n        need = Counter(t)\n        window = Counter()\n        left, right = 0, 0\n        res = \"\"\n        while right < len(s):\n            c = s[right]\n            window[c] += 1\n            if c in need and window[c] == need[c]:\n                while left < right and need[s[left]] > need[c]:\n                    window[s[left]] -= 1\n                    left += 1\n                if right - left + 1 > len(res):\n                    res = s[left:right + 1]\n            right += 1\n        return res"
    },
    {
        "number": 77,
        "title": "Combinations",
        "difficulty": 1,
        "pass": 0,
        "answer": "        if n == 0 or k == 0:\n            return []\n        if k == 1:\n            return [[i] for i in range(1, n + 1)]\n        if n == 1:\n            return [[i] for i in range(1, k + 1)]\n        if k == n:\n            return [[i, j] for i in range(1, n + 1) for j in range(1, k + 1)]\n        res = []\n        for i in range(1, n + 1):\n            for comb in self.combine(n - 1, k - 1):\n                res.append([i] + comb)\n        return res"
    },
    {
        "number": 77,
        "title": "Combinations",
        "difficulty": 1,
        "pass": 1,
        "answer": "        if n == 0 or k == 0:\n            return []\n        if k == 1:\n            return [[i] for i in range(1, n + 1)]\n        if k == n:\n            return [[i for i in range(1, n + 1)]]\n        res = []\n        for i in range(1, n + 1):\n            tmp = self.combine(n - 1, k - 1)\n            for item in tmp:\n                res.append([i] + item)\n        return res"
    },
    {
        "number": 77,
        "title": "Combinations",
        "difficulty": 1,
        "pass": 2,
        "answer": "        if n == 0 or k == 0:\n            return []\n        if k == 1:\n            return [[i] for i in range(1, n + 1)]\n        if k == n:\n            return [[i for i in range(1, n + 1)]]\n        res = []\n        for i in range(1, n + 1):\n            for comb in self.combine(n - 1, k - 1):\n                res.append([i] + comb)\n        return res"
    },
    {
        "number": 77,
        "title": "Combinations",
        "difficulty": 1,
        "pass": 3,
        "answer": "        if k > n:\n            return []\n        if k == n:\n            return [[i] for i in range(1, n+1)]\n        if k == 1:\n            return [[i] for i in range(1, n+1)]\n        if k == 2:\n            return [[i, j] for i in range(1, n+1) for j in range(i+1, n+1)]\n        if k == 3:\n            return [[i, j, k] for i in range(1, n+1) for j in range(i+1, n+1) for k in range(j+1, n+1)]\n        if k == 4:\n            return [[i, j, k, l] for i in range(1, n+1) for j in range(i+1, n+1) for k in range(j+1, n+1) for l in range(k+1, n+1)]\n        if k == 5:\n            return [[i, j, k, l, m] for i in range(1, n+"
    },
    {
        "number": 77,
        "title": "Combinations",
        "difficulty": 1,
        "pass": 4,
        "answer": "        if n == 0 or k == 0:\n            return []\n        if k == 1:\n            return [[i] for i in range(1, n + 1)]\n        if k == n:\n            return [[i for i in range(1, n + 1)]]\n        if k == n + 1:\n            return [[i for i in range(1, n + 1)]]\n        res = []\n        for i in range(1, n + 1):\n            for comb in self.combine(n - 1, k - 1):\n                res.append([i] + comb)\n        return res"
    },
    {
        "number": 77,
        "title": "Combinations",
        "difficulty": 1,
        "pass": 5,
        "answer": "        if n == 0 or k == 0:\n            return []\n        if k == 1:\n            return [[i] for i in range(1, n + 1)]\n        res = []\n        for i in range(1, n + 1):\n            for comb in self.combine(n - 1, k - 1):\n                res.append([i] + comb)\n        return res"
    },
    {
        "number": 77,
        "title": "Combinations",
        "difficulty": 1,
        "pass": 6,
        "answer": "        if n == 0 or k == 0:\n            return []\n        if k == 1:\n            return [[i] for i in range(1, n + 1)]\n        if n == 1:\n            return [[i] for i in range(1, k + 1)]\n        if k == n:\n            return [[i, j] for i in range(1, n + 1) for j in range(1, k + 1)]\n        \n        res = []\n        for i in range(1, n + 1):\n            for comb in self.combine(n - 1, k - 1):\n                res.append([i] + comb)\n        return res"
    },
    {
        "number": 77,
        "title": "Combinations",
        "difficulty": 1,
        "pass": 7,
        "answer": "        if n == 0 or k == 0:\n            return []\n        elif k == 1:\n            return [[i] for i in range(1, n + 1)]\n        else:\n            ans = [[i] for i in range(1, n + 1)]\n            for i in range(1, k):\n                tmp = []\n                for j in range(len(ans)):\n                    for k in range(len(ans[j])):\n                        tmp.append(ans[j][:k] + [i] + ans[j][k:])\n                ans = tmp\n            return ans"
    },
    {
        "number": 77,
        "title": "Combinations",
        "difficulty": 1,
        "pass": 8,
        "answer": "        if n == 0 or k == 0:\n            return []\n        if k == 1:\n            return [[i] for i in range(1, n + 1)]\n        if k == n:\n            return [[i for i in range(1, n + 1)]]\n        return self.combine(n - 1, k) + self.combine(n - 1, k - 1)"
    },
    {
        "number": 77,
        "title": "Combinations",
        "difficulty": 1,
        "pass": 9,
        "answer": "        if n == 0 or k == 0:\n            return []\n        if k == 1:\n            return [[i] for i in range(1, n + 1)]\n        if k == n:\n            return [[i for i in range(1, n + 1)]]\n        ans = []\n        for i in range(1, n + 1):\n            ans += self.combine(n - 1, k - 1)\n            ans.append([i])\n        return ans\n"
    },
    {
        "number": 78,
        "title": "Subsets",
        "difficulty": 1,
        "pass": 0,
        "answer": "        if len(nums) == 0:\n            return [[]]\n        if len(nums) == 1:\n            return [[], nums]\n        if len(nums) == 2:\n            return [[], nums, [nums[0], nums[1]], [nums[0], nums[1], nums[0]], [nums[0], nums[1], nums[0], nums[1]]]\n        if len(nums) == 3:\n            return [[], nums, [nums[0], nums[1], nums[2]], [nums[0], nums[1], nums[2], nums[0]],\n                     [nums[0], nums[1], nums[2], nums[0], nums[1]],\n                     [nums[0], nums[1], nums[2], nums[0], nums[1], nums[2]]]\n        if len(nums) == 4:\n            return [[], nums, [nums[0],"
    },
    {
        "number": 78,
        "title": "Subsets",
        "difficulty": 1,
        "pass": 1,
        "answer": "        res = [[]]\n        for num in nums:\n            res += [curr + [num] for curr in res]\n        return res"
    },
    {
        "number": 78,
        "title": "Subsets",
        "difficulty": 1,
        "pass": 2,
        "answer": "        if len(nums) == 0:\n            return [[]]\n        if len(nums) == 1:\n            return [[], nums]\n        if len(nums) == 2:\n            return [[], nums, [nums[0]], [nums[0], nums[1]], [nums[1]], [nums[0], nums[1], nums[2]]]\n        if len(nums) == 3:\n            return [[], nums, [nums[0]], [nums[0], nums[1]], [nums[0], nums[1], nums[2]],\n                     [nums[0], nums[1], nums[2], nums[3]],\n                     [nums[1]], [nums[0], nums[1], nums[2], nums[3]],\n                     [nums[0], nums[1], nums[2], nums[3], nums[4]],\n                     [nums[0], nums[1], nums"
    },
    {
        "number": 78,
        "title": "Subsets",
        "difficulty": 1,
        "pass": 3,
        "answer": "        if not nums:\n            return [[]]\n        res = [[]]\n        for num in nums:\n            new_res = []\n            for subset in res:\n                new_res.append(subset + [num])\n                new_res.append(subset)\n            res = new_res\n        return res"
    },
    {
        "number": 78,
        "title": "Subsets",
        "difficulty": 1,
        "pass": 4,
        "answer": "        if not nums:\n            return [[]]\n        n = len(nums)\n        res = [[]]\n        for i in range(n):\n            for j in range(len(res)):\n                res.append(res[j] + [nums[i]])\n        return res"
    },
    {
        "number": 78,
        "title": "Subsets",
        "difficulty": 1,
        "pass": 5,
        "answer": "        res = [[]]\n        for num in nums:\n            res += [curr + [num] for curr in res]\n        return res"
    },
    {
        "number": 78,
        "title": "Subsets",
        "difficulty": 1,
        "pass": 6,
        "answer": "        res = [[]]\n        nums.sort()\n        for i in range(len(nums)):\n            for j in range(len(res)):\n                res.append(res[j] + [nums[i]])\n        return res"
    },
    {
        "number": 78,
        "title": "Subsets",
        "difficulty": 1,
        "pass": 7,
        "answer": "        res = [[]]\n        nums.sort()\n        for i in range(len(nums)):\n            for j in range(len(res)):\n                res.append(res[j] + [nums[i]])\n        return res"
    },
    {
        "number": 78,
        "title": "Subsets",
        "difficulty": 1,
        "pass": 8,
        "answer": "        if len(nums) == 0:\n            return [[]]\n        res = []\n        n = len(nums)\n        for i in range(1 << n):\n            temp = []\n            for j in range(n):\n                if i & (1 << j):\n                    temp.append(nums[j])\n            res.append(temp)\n        return res"
    },
    {
        "number": 78,
        "title": "Subsets",
        "difficulty": 1,
        "pass": 9,
        "answer": "        n = len(nums)\n        if n == 0:\n            return [[]]\n        if n == 1:\n            return [[], nums]\n        res = []\n        for i in range(1 << n):\n            tmp = []\n            for j in range(n):\n                if i & (1 << j):\n                    tmp.append(nums[j])\n            res.append(tmp)\n        return res"
    },
    {
        "number": 79,
        "title": "Word Search",
        "difficulty": 1,
        "pass": 0,
        "answer": "        if not board or not board[0]:\n            return False\n        m, n = len(board), len(board[0])\n        visited = set()"
    },
    {
        "number": 79,
        "title": "Word Search",
        "difficulty": 1,
        "pass": 1,
        "answer": "        if not board or not board[0]:\n            return False\n        m, n = len(board), len(board[0])\n        visited = [[False] * n for _ in range(m)]\n        for i in range(m):\n            for j in range(n):\n                if self.dfs(board, word, 0, i, j, visited):\n                    return True\n        return False"
    },
    {
        "number": 79,
        "title": "Word Search",
        "difficulty": 1,
        "pass": 2,
        "answer": "        if not board or not board[0]:\n            return False\n        m, n = len(board), len(board[0])\n        visited = [[False for _ in range(n)] for _ in range(m)]\n        for i in range(m):\n            for j in range(n):\n                if self.dfs(board, word, 0, i, j, visited):\n                    return True\n        return False"
    },
    {
        "number": 79,
        "title": "Word Search",
        "difficulty": 1,
        "pass": 3,
        "answer": "        if not board or not board[0]:\n            return False\n        m, n = len(board), len(board[0])\n        visited = set()\n        for i in range(m):\n            for j in range(n):\n                if board[i][j] == word[0]:\n                    visited.add((i, j))\n                    if self.dfs(board, word[1:], i, j, visited):\n                        return True\n                    visited.remove((i, j))\n        return False"
    },
    {
        "number": 79,
        "title": "Word Search",
        "difficulty": 1,
        "pass": 4,
        "answer": "        if not board:\n            return False\n        if not word:\n            return True\n        m, n = len(board), len(board[0])\n        visited = [[False for _ in range(n)] for _ in range(m)]\n        for i in range(m):\n            for j in range(n):\n                if self.dfs(board, word, 0, i, j, visited):\n                    return True\n        return False"
    },
    {
        "number": 79,
        "title": "Word Search",
        "difficulty": 1,
        "pass": 5,
        "answer": "        def dfs(i, j, k):\n            if not 0 <= i < m or not 0 <= j < n or board[i][j]!= word[k]:\n                return False\n            if k == len(word) - 1:\n                return True\n            tmp = board[i][j]\n            board[i][j] = '#'\n            res = dfs(i + 1, j, k + 1) or dfs(i - 1, j, k + 1) or dfs(i, j + 1, k + 1) or dfs(i, j - 1, k + 1)\n            board[i][j] = tmp\n            return res"
    },
    {
        "number": 79,
        "title": "Word Search",
        "difficulty": 1,
        "pass": 6,
        "answer": "        if not board or not board[0]:\n            return False"
    },
    {
        "number": 79,
        "title": "Word Search",
        "difficulty": 1,
        "pass": 7,
        "answer": "        if not board:\n            return False\n        if not word:\n            return True\n        m, n = len(board), len(board[0])\n        visited = set()\n        for i in range(m):\n            for j in range(n):\n                if board[i][j] == word[0] and (i, j) not in visited:\n                    visited.add((i, j))\n                    if self.dfs(board, word[1:], i, j, visited):\n                        return True\n                    visited.remove((i, j))\n        return False"
    },
    {
        "number": 79,
        "title": "Word Search",
        "difficulty": 1,
        "pass": 8,
        "answer": "        if not board:\n            return False\n        if not word:\n            return True\n        m, n = len(board), len(board[0])\n        visited = set()\n        for i in range(m):\n            for j in range(n):\n                if self.dfs(board, word, 0, i, j, visited):\n                    return True\n        return False"
    },
    {
        "number": 79,
        "title": "Word Search",
        "difficulty": 1,
        "pass": 9,
        "answer": "        if not board or not board[0]:\n            return False\n        m, n = len(board), len(board[0])\n        visited = [[False for _ in range(n)] for _ in range(m)]\n        for i in range(m):\n            for j in range(n):\n                if self.dfs(board, word, 0, i, j, visited):\n                    return True\n        return False"
    },
    {
        "number": 80,
        "title": "Remove Duplicates from Sorted Array II",
        "difficulty": 1,
        "pass": 0,
        "answer": "        i = 0\n        for j in range(1, len(nums)):\n            if nums[i]!= nums[j]:\n                i += 1\n                nums[i] = nums[j]\n        return i + 1"
    },
    {
        "number": 80,
        "title": "Remove Duplicates from Sorted Array II",
        "difficulty": 1,
        "pass": 1,
        "answer": "        if len(nums) == 0:\n            return 0\n        \n        i = 0\n        for j in range(1, len(nums)):\n            if nums[j]!= nums[i]:\n                i += 1\n                nums[i] = nums[j]\n        return i + 1"
    },
    {
        "number": 80,
        "title": "Remove Duplicates from Sorted Array II",
        "difficulty": 1,
        "pass": 2,
        "answer": "        if len(nums) == 0:\n            return 0\n        i = 0\n        for j in range(1, len(nums)):\n            if nums[j]!= nums[i]:\n                i += 1\n                nums[i] = nums[j]\n        return i + 1"
    },
    {
        "number": 80,
        "title": "Remove Duplicates from Sorted Array II",
        "difficulty": 1,
        "pass": 3,
        "answer": "        i = 0\n        for j in range(1, len(nums)):\n            if nums[j]!= nums[i]:\n                i += 1\n                nums[i] = nums[j]\n        return i + 1"
    },
    {
        "number": 80,
        "title": "Remove Duplicates from Sorted Array II",
        "difficulty": 1,
        "pass": 4,
        "answer": "        if len(nums) == 0:\n            return 0\n        i = 0\n        for j in range(1, len(nums)):\n            if nums[j]!= nums[i]:\n                i += 1\n                nums[i] = nums[j]\n        return i + 1"
    },
    {
        "number": 80,
        "title": "Remove Duplicates from Sorted Array II",
        "difficulty": 1,
        "pass": 5,
        "answer": "        i = 0\n        for j in range(1, len(nums)):\n            if nums[i]!= nums[j]:\n                i += 1\n                nums[i] = nums[j]\n        return i + 1"
    },
    {
        "number": 80,
        "title": "Remove Duplicates from Sorted Array II",
        "difficulty": 1,
        "pass": 6,
        "answer": "        if len(nums) == 0:\n            return 0\n        i = 0\n        for j in range(1, len(nums)):\n            if nums[j]!= nums[i]:\n                i += 1\n                nums[i] = nums[j]\n        return i + 1"
    },
    {
        "number": 80,
        "title": "Remove Duplicates from Sorted Array II",
        "difficulty": 1,
        "pass": 7,
        "answer": "        i = 0\n        for j in range(len(nums)):\n            if nums[i]!= nums[j]:\n                i += 1\n                nums[i] = nums[j]\n        return i + 1"
    },
    {
        "number": 80,
        "title": "Remove Duplicates from Sorted Array II",
        "difficulty": 1,
        "pass": 8,
        "answer": "        if len(nums) == 0:\n            return 0\n        i = 0\n        for j in range(1, len(nums)):\n            if nums[i]!= nums[j]:\n                i += 1\n                nums[i] = nums[j]\n        return i + 1"
    },
    {
        "number": 80,
        "title": "Remove Duplicates from Sorted Array II",
        "difficulty": 1,
        "pass": 9,
        "answer": "        if len(nums) == 0:\n            return 0\n        i = 0\n        for j in range(1, len(nums)):\n            if nums[j]!= nums[i]:\n                i += 1\n                nums[i] = nums[j]\n        return i + 1"
    },
    {
        "number": 81,
        "title": "Search in Rotated Sorted Array II",
        "difficulty": 1,
        "pass": 0,
        "answer": "        if not nums:\n            return False\n        left, right = 0, len(nums) - 1\n        while left <= right:\n            mid = left + (right - left) // 2\n            if nums[mid] == target:\n                return True\n            if nums[left] <= nums[mid]:\n                if nums[left] <= target < nums[mid]:\n                    right = mid - 1\n                else:\n                    left = mid + 1\n            else:\n                if nums[mid] < target <= nums[right]:\n                    left = mid + 1\n                else:\n                    right = mid - 1\n        return False"
    },
    {
        "number": 81,
        "title": "Search in Rotated Sorted Array II",
        "difficulty": 1,
        "pass": 1,
        "answer": "        if not nums:\n            return False\n        left, right = 0, len(nums) - 1\n        while left <= right:\n            mid = (left + right) // 2\n            if nums[mid] == target:\n                return True\n            if nums[left] <= nums[mid]:\n                if nums[left] <= target < nums[mid]:\n                    right = mid - 1\n                else:\n                    left = mid + 1\n            else:\n                if nums[mid] < target <= nums[right]:\n                    left = mid + 1\n                else:\n                    right = mid - 1\n        return False"
    },
    {
        "number": 81,
        "title": "Search in Rotated Sorted Array II",
        "difficulty": 1,
        "pass": 2,
        "answer": "        low, high = 0, len(nums) - 1\n        while low <= high:\n            mid = low + (high - low) // 2\n            if nums[mid] == target:\n                return True\n            if nums[low] <= nums[mid]:\n                if nums[low] <= target < nums[mid]:\n                    high = mid - 1\n                else:\n                    low = mid + 1\n            else:\n                if nums[mid] < target <= nums[high]:\n                    low = mid + 1\n                else:\n                    high = mid - 1\n        return False"
    },
    {
        "number": 81,
        "title": "Search in Rotated Sorted Array II",
        "difficulty": 1,
        "pass": 3,
        "answer": "        if not nums:\n            return False\n        left, right = 0, len(nums) - 1\n        while left <= right:\n            mid = (left + right) // 2\n            if nums[mid] == target:\n                return True\n            if nums[left] <= nums[mid]:\n                if nums[left] <= target < nums[mid]:\n                    right = mid - 1\n                else:\n                    left = mid + 1\n            else:\n                if nums[mid] < target <= nums[right]:\n                    left = mid + 1\n                else:\n                    right = mid - 1\n        return False"
    },
    {
        "number": 81,
        "title": "Search in Rotated Sorted Array II",
        "difficulty": 1,
        "pass": 4,
        "answer": "        if not nums:\n            return False\n        start, end = 0, len(nums) - 1\n        while start <= end:\n            mid = (start + end) // 2\n            if nums[mid] == target:\n                return True\n            if nums[start] <= nums[mid]:\n                if nums[start] <= target < nums[mid]:\n                    end = mid - 1\n                else:\n                    start = mid + 1\n            else:\n                if nums[mid] < target <= nums[end]:\n                    start = mid + 1\n                else:\n                    end = mid - 1\n        return False"
    },
    {
        "number": 81,
        "title": "Search in Rotated Sorted Array II",
        "difficulty": 1,
        "pass": 5,
        "answer": "        left, right = 0, len(nums) - 1\n        while left <= right:\n            mid = left + (right - left) // 2\n            if nums[mid] == target:\n                return True\n            elif nums[mid] < target:\n                left = mid + 1\n            else:\n                right = mid - 1\n        return False"
    },
    {
        "number": 81,
        "title": "Search in Rotated Sorted Array II",
        "difficulty": 1,
        "pass": 6,
        "answer": "        if not nums:\n            return False\n        if len(nums) == 1:\n            return nums[0] == target"
    },
    {
        "number": 81,
        "title": "Search in Rotated Sorted Array II",
        "difficulty": 1,
        "pass": 7,
        "answer": "        if not nums:\n            return False\n        left, right = 0, len(nums) - 1\n        while left <= right:\n            mid = (left + right) // 2\n            if nums[mid] == target:\n                return True\n            if nums[left] <= nums[mid]:\n                if nums[left] <= target < nums[mid]:\n                    right = mid - 1\n                else:\n                    left = mid + 1\n            else:\n                if nums[mid] < target <= nums[right]:\n                    left = mid + 1\n                else:\n                    right = mid - 1\n        return False"
    },
    {
        "number": 81,
        "title": "Search in Rotated Sorted Array II",
        "difficulty": 1,
        "pass": 8,
        "answer": "        if not nums:\n            return False\n        left, right = 0, len(nums) - 1\n        while left <= right:\n            mid = (left + right) // 2\n            if nums[mid] == target:\n                return True\n            if nums[left] <= nums[mid]:\n                if nums[left] <= target < nums[mid]:\n                    right = mid - 1\n                else:\n                    left = mid + 1\n            else:\n                if nums[mid] < target <= nums[right]:\n                    left = mid + 1\n                else:\n                    right = mid - 1\n        return False"
    },
    {
        "number": 81,
        "title": "Search in Rotated Sorted Array II",
        "difficulty": 1,
        "pass": 9,
        "answer": "        l, r = 0, len(nums) - 1\n        while l <= r:\n            mid = (l + r) // 2\n            if nums[mid] == target:\n                return True\n            if nums[l] <= nums[mid]:\n                if nums[l] <= target < nums[mid]:\n                    r = mid - 1\n                else:\n                    l = mid + 1\n            else:\n                if nums[mid] < target <= nums[r]:\n                    l = mid + 1\n                else:\n                    r = mid - 1\n        return False"
    },
    {
        "number": 82,
        "title": "Remove Duplicates from Sorted List II",
        "difficulty": 1,
        "pass": 0,
        "answer": "        if not head:\n            return head\n        \n        curr = head\n        while curr and curr.next:\n            if curr.val == curr.next.val:\n                curr.next = curr.next.next\n            else:\n                curr = curr.next\n        \n        return head"
    },
    {
        "number": 82,
        "title": "Remove Duplicates from Sorted List II",
        "difficulty": 1,
        "pass": 1,
        "answer": "        if not head:\n            return None\n        \n        curr = head\n        while curr and curr.next:\n            if curr.val == curr.next.val:\n                curr.next = curr.next.next\n            else:\n                curr = curr.next\n        \n        return head"
    },
    {
        "number": 82,
        "title": "Remove Duplicates from Sorted List II",
        "difficulty": 1,
        "pass": 2,
        "answer": "        if not head:\n            return None\n        \n        curr = head\n        while curr and curr.next:\n            if curr.val == curr.next.val:\n                curr.next = curr.next.next\n            else:\n                curr = curr.next\n        \n        return head\n"
    },
    {
        "number": 82,
        "title": "Remove Duplicates from Sorted List II",
        "difficulty": 1,
        "pass": 3,
        "answer": "        if not head:\n            return None\n        \n        dummy = ListNode(0)\n        dummy.next = head\n        \n        prev = dummy\n        curr = head\n        \n        while curr and curr.next:\n            if curr.val == curr.next.val:\n                while curr and curr.next and curr.val == curr.next.val:\n                    curr = curr.next\n                \n                prev.next = curr.next\n                curr = curr.next\n            else:\n                prev = curr\n                curr = curr.next\n        \n        return dummy.next\n        "
    },
    {
        "number": 82,
        "title": "Remove Duplicates from Sorted List II",
        "difficulty": 1,
        "pass": 4,
        "answer": "        if not head:\n            return None\n        \n        dummy = ListNode(0)\n        dummy.next = head\n        \n        pre = dummy\n        cur = head\n        \n        while cur and cur.next:\n            if cur.val == cur.next.val:\n                while cur and cur.next and cur.val == cur.next.val:\n                    cur = cur.next\n                \n                pre.next = cur.next\n                cur = cur.next\n            else:\n                pre = pre.next\n                cur = cur.next\n        \n        return dummy.next"
    },
    {
        "number": 82,
        "title": "Remove Duplicates from Sorted List II",
        "difficulty": 1,
        "pass": 5,
        "answer": "        if not head:\n            return None\n        \n        curr = head\n        while curr and curr.next:\n            if curr.val == curr.next.val:\n                curr.next = curr.next.next\n            else:\n                curr = curr.next\n        \n        return head"
    },
    {
        "number": 82,
        "title": "Remove Duplicates from Sorted List II",
        "difficulty": 1,
        "pass": 6,
        "answer": "        if not head:\n            return None\n        \n        curr = head\n        while curr and curr.next:\n            if curr.val == curr.next.val:\n                curr.next = curr.next.next\n            else:\n                curr = curr.next\n        \n        return head"
    },
    {
        "number": 82,
        "title": "Remove Duplicates from Sorted List II",
        "difficulty": 1,
        "pass": 7,
        "answer": "        if not head:\n            return None\n        \n        curr = head\n        while curr and curr.next:\n            if curr.val == curr.next.val:\n                curr.next = curr.next.next\n            else:\n                curr = curr.next\n        \n        return head"
    },
    {
        "number": 82,
        "title": "Remove Duplicates from Sorted List II",
        "difficulty": 1,
        "pass": 8,
        "answer": "        if not head:\n            return None\n        \n        curr = head\n        while curr and curr.next:\n            if curr.val == curr.next.val:\n                curr.next = curr.next.next\n            else:\n                curr = curr.next\n        \n        return head"
    },
    {
        "number": 82,
        "title": "Remove Duplicates from Sorted List II",
        "difficulty": 1,
        "pass": 9,
        "answer": "        if not head:\n            return None\n        \n        dummy = ListNode(0)\n        dummy.next = head\n        \n        pre = dummy\n        cur = head\n        \n        while cur and cur.next:\n            if cur.val == cur.next.val:\n                while cur and cur.next and cur.val == cur.next.val:\n                    cur = cur.next\n                \n                pre.next = cur.next\n                cur = cur.next\n            else:\n                pre = pre.next\n                cur = cur.next\n        \n        return dummy.next\n        \nclass Solution:\n    def deleteDuplicates(self, head: Optional[ListNode]) -> Optional[ListNode]:\n        \"\"\"\n        Given the head of a sorted linked list, delete all nodes that have duplicate numbers, leaving only distinct numbers from the original list. Return the linked list sorted as well.\n        Example 1:\n        Input: head = [1,2,3,3,4,4,5]\n        Output: [1,2,3,4,5]\n        Example 2:\n"
    },
    {
        "number": 83,
        "title": "Remove Duplicates from Sorted List",
        "difficulty": 0,
        "pass": 0,
        "answer": "        if not head:\n            return None\n        \n        curr = head\n        while curr and curr.next:\n            if curr.val == curr.next.val:\n                curr.next = curr.next.next\n            else:\n                curr = curr.next\n        \n        return head\n        \n        \nclass Solution:\n    def deleteDuplicates(self, head: Optional[ListNode]) -> Optional[ListNode]:\n        \"\"\"\n        Given the head of a sorted linked list, delete all duplicates such that each element appears only once. Return the linked list sorted as well.\n        Example 1:\n        Input: head = [1,1,2]\n        Output: [1,2]\n        Example 2:\n        Input: head = [1,1,2,3,3]\n        Output: [1,2,3]\n        \"\"\"\n        if not head:\n            return None\n        \n        curr = head\n        while curr and curr.next:\n            if curr.val == curr.next.val:\n                cur"
    },
    {
        "number": 83,
        "title": "Remove Duplicates from Sorted List",
        "difficulty": 0,
        "pass": 1,
        "answer": "        if not head:\n            return None\n        \n        curr = head\n        while curr and curr.next:\n            if curr.val == curr.next.val:\n                curr.next = curr.next.next\n            else:\n                curr = curr.next\n        \n        return head\n        "
    },
    {
        "number": 83,
        "title": "Remove Duplicates from Sorted List",
        "difficulty": 0,
        "pass": 2,
        "answer": "        if not head:\n            return head\n        \n        curr = head\n        while curr and curr.next:\n            if curr.val == curr.next.val:\n                curr.next = curr.next.next\n            else:\n                curr = curr.next\n        \n        return head\n        \n        \nclass Solution:\n    def deleteDuplicates(self, head: Optional[ListNode]) -> Optional[ListNode]:\n        \"\"\"\n        Given the head of a sorted linked list, delete all duplicates such that each element appears only once. Return the linked list sorted as well.\n        Example 1:\n        Input: head = [1,1,2]\n        Output: [1,2]\n        Example 2:\n        Input: head = [1,1,2,3,3]\n        Output: [1,2,3]\n        \"\"\"\n        if not head:\n            return head\n        \n        curr = head\n        while curr and curr.next:\n            if curr.val == curr.next.val:\n                cur"
    },
    {
        "number": 83,
        "title": "Remove Duplicates from Sorted List",
        "difficulty": 0,
        "pass": 3,
        "answer": "        if not head:\n            return head\n        \n        cur = head\n        while cur and cur.next:\n            if cur.val == cur.next.val:\n                cur.next = cur.next.next\n            else:\n                cur = cur.next\n        \n        return head"
    },
    {
        "number": 83,
        "title": "Remove Duplicates from Sorted List",
        "difficulty": 0,
        "pass": 4,
        "answer": "        if not head:\n            return None\n        \n        curr = head\n        while curr and curr.next:\n            if curr.val == curr.next.val:\n                curr.next = curr.next.next\n            else:\n                curr = curr.next\n        \n        return head"
    },
    {
        "number": 83,
        "title": "Remove Duplicates from Sorted List",
        "difficulty": 0,
        "pass": 5,
        "answer": "        if not head:\n            return None\n        cur = head\n        while cur and cur.next:\n            if cur.val == cur.next.val:\n                cur.next = cur.next.next\n            else:\n                cur = cur.next\n        return head"
    },
    {
        "number": 83,
        "title": "Remove Duplicates from Sorted List",
        "difficulty": 0,
        "pass": 6,
        "answer": "        if not head:\n            return None\n        \n        cur = head\n        while cur and cur.next:\n            if cur.val == cur.next.val:\n                cur.next = cur.next.next\n            else:\n                cur = cur.next\n        \n        return head"
    },
    {
        "number": 83,
        "title": "Remove Duplicates from Sorted List",
        "difficulty": 0,
        "pass": 7,
        "answer": "        if not head:\n            return None\n        \n        node = head\n        while node.next:\n            if node.val == node.next.val:\n                node.next = node.next.next\n            else:\n                node = node.next\n        return head\n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        "
    },
    {
        "number": 83,
        "title": "Remove Duplicates from Sorted List",
        "difficulty": 0,
        "pass": 8,
        "answer": "        if not head:\n            return None\n        \n        curr = head\n        while curr and curr.next:\n            if curr.val == curr.next.val:\n                curr.next = curr.next.next\n            else:\n                curr = curr.next\n        \n        return head\n"
    },
    {
        "number": 83,
        "title": "Remove Duplicates from Sorted List",
        "difficulty": 0,
        "pass": 9,
        "answer": "        if not head:\n            return None\n        cur = head\n        while cur and cur.next:\n            if cur.val == cur.next.val:\n                cur.next = cur.next.next\n            else:\n                cur = cur.next\n        return head"
    },
    {
        "number": 84,
        "title": "Largest Rectangle in Histogram",
        "difficulty": 2,
        "pass": 0,
        "answer": "        n = len(heights)\n        if n == 0:\n            return 0\n        if n == 1:\n            return heights[0]\n        stack = [-1]\n        res = 0\n        for i in range(n):\n            while stack[-1]!= -1 and heights[stack[-1]] >= heights[i]:\n                h = heights[stack.pop()]\n                w = i - stack[-1] - 1\n                res = max(res, h * w)\n            stack.append(i)\n        while stack[-1]!= -1:\n            h = heights[stack.pop()]\n            w = n - stack[-1] - 1\n            res = max(res, h * w)\n        return res"
    },
    {
        "number": 84,
        "title": "Largest Rectangle in Histogram",
        "difficulty": 2,
        "pass": 1,
        "answer": "        if not heights:\n            return 0\n        \n        stack = []\n        heights.append(0)\n        max_area = 0\n        for i in range(len(heights)):\n            while stack and heights[stack[-1]] > heights[i]:\n                height = heights[stack.pop()]\n                width = i - stack[-1] - 1 if stack else i\n                max_area = max(max_area, height * width)\n            stack.append(i)\n        return max_area"
    },
    {
        "number": 84,
        "title": "Largest Rectangle in Histogram",
        "difficulty": 2,
        "pass": 2,
        "answer": "        if not heights:\n            return 0\n        \n        heights = [0] + heights + [0]\n        stack = []\n        max_area = 0\n        \n        for i in range(len(heights)):\n            while stack and heights[stack[-1]] > heights[i]:\n                top = stack.pop()\n                area = heights[top] * (i - stack[-1] - 1)\n                max_area = max(max_area, area)\n            stack.append(i)\n        \n        while stack:\n            top = stack.pop()\n            area = heights[top] * (len(heights) - stack[-1] - 1)\n            max_area = max(max_area, area)\n        \n        return max_area"
    },
    {
        "number": 84,
        "title": "Largest Rectangle in Histogram",
        "difficulty": 2,
        "pass": 3,
        "answer": "        n = len(heights)\n        if n == 0:\n            return 0\n        if n == 1:\n            return heights[0]\n        if n == 2:\n            return max(heights[0], heights[1])\n        \n        stack = [-1]\n        max_area = 0\n        for i in range(n):\n            while stack[-1]!= -1 and heights[stack[-1]] >= heights[i]:\n                max_area = max(max_area, heights[stack.pop()] * (i - stack[-1] - 1))\n            stack.append(i)\n        while stack[-1]!= -1:\n            max_area = max(max_area, heights[stack.pop()] * (n - stack[-1] - 1))\n        return max_area"
    },
    {
        "number": 84,
        "title": "Largest Rectangle in Histogram",
        "difficulty": 2,
        "pass": 4,
        "answer": "        n = len(heights)\n        if n == 0:\n            return 0\n        stack = []\n        area = 0\n        for i in range(n):\n            while stack and heights[stack[-1]] > heights[i]:\n                h = heights[stack.pop()]\n                w = i - stack[-1] - 1 if stack else i\n                area = max(area, h * w)\n            stack.append(i)\n        while stack:\n            h = heights[stack.pop()]\n            w = n - stack[-1] - 1 if stack else n\n            area = max(area, h * w)\n        return area"
    },
    {
        "number": 84,
        "title": "Largest Rectangle in Histogram",
        "difficulty": 2,
        "pass": 5,
        "answer": "        if not heights:\n            return 0\n        \n        heights.append(0)\n        stack = [-1]\n        max_area = 0\n        for i in range(len(heights)):\n            while heights[i] < heights[stack[-1]]:\n                h = heights[stack.pop()]\n                w = i - stack[-1] - 1\n                max_area = max(max_area, h * w)\n            stack.append(i)\n        heights.pop()\n        return max_area"
    },
    {
        "number": 84,
        "title": "Largest Rectangle in Histogram",
        "difficulty": 2,
        "pass": 6,
        "answer": "        if not heights:\n            return 0\n        \n        stack = []\n        heights.append(0)\n        max_area = 0\n        \n        for i in range(len(heights)):\n            while stack and heights[i] < heights[stack[-1]]:\n                h = heights[stack.pop()]\n                w = i - stack[-1] - 1 if stack else i\n                max_area = max(max_area, h * w)\n            stack.append(i)\n        \n        return max_area"
    },
    {
        "number": 84,
        "title": "Largest Rectangle in Histogram",
        "difficulty": 2,
        "pass": 7,
        "answer": "        n = len(heights)\n        if n == 0:\n            return 0\n        stack = []\n        max_area = 0\n        for i in range(n):\n            while stack and heights[stack[-1]] > heights[i]:\n                h = heights[stack.pop()]\n                w = i - stack[-1] - 1 if stack else i\n                max_area = max(max_area, h * w)\n            stack.append(i)\n        while stack:\n            h = heights[stack.pop()]\n            w = n - stack[-1] - 1 if stack else n\n            max_area = max(max_area, h * w)\n        return max_area"
    },
    {
        "number": 84,
        "title": "Largest Rectangle in Histogram",
        "difficulty": 2,
        "pass": 8,
        "answer": "        if not heights:\n            return 0\n        \n        stack = []\n        heights.append(0)\n        max_area = 0\n        \n        for i in range(len(heights)):\n            while stack and heights[i] < heights[stack[-1]]:\n                h = heights[stack.pop()]\n                w = i - stack[-1] - 1 if stack else i\n                max_area = max(max_area, h * w)\n            stack.append(i)\n            \n        return max_area"
    },
    {
        "number": 84,
        "title": "Largest Rectangle in Histogram",
        "difficulty": 2,
        "pass": 9,
        "answer": "        n = len(heights)\n        if n == 0:\n            return 0\n        if n == 1:\n            return heights[0]\n        stack = []\n        res = 0\n        for i in range(n):\n            while stack and heights[i] < heights[stack[-1]]:\n                h = heights[stack.pop()]\n                w = i - stack[-1] - 1 if stack else i\n                res = max(res, h * w)\n            stack.append(i)\n        while stack:\n            h = heights[stack.pop()]\n            w = n - stack[-1] - 1 if stack else n\n            res = max(res, h * w)\n        return res"
    },
    {
        "number": 85,
        "title": "Maximal Rectangle",
        "difficulty": 2,
        "pass": 0,
        "answer": "        if not matrix:\n            return 0\n        m, n = len(matrix), len(matrix[0])\n        dp = [[0] * n for _ in range(m)]\n        res = 0\n        for i in range(m):\n            for j in range(n):\n                if matrix[i][j] == '1':\n                    dp[i][j] = dp[i][j - 1] + 1 if j else 1\n                    res = max(res, dp[i][j])\n        return res * res"
    },
    {
        "number": 85,
        "title": "Maximal Rectangle",
        "difficulty": 2,
        "pass": 1,
        "answer": "        if not matrix:\n            return 0\n        m, n = len(matrix), len(matrix[0])\n        dp = [[0] * n for _ in range(m)]\n        res = 0\n        for i in range(m):\n            for j in range(n):\n                if matrix[i][j] == '1':\n                    dp[i][j] = dp[i][j - 1] + 1 if j else 1\n                else:\n                    dp[i][j] = 0\n            res = max(res, self.largestRectangleArea(dp))\n        return res"
    },
    {
        "number": 85,
        "title": "Maximal Rectangle",
        "difficulty": 2,
        "pass": 2,
        "answer": "        if not matrix:\n            return 0\n        m, n = len(matrix), len(matrix[0])\n        dp = [[0] * n for _ in range(m)]\n        res = 0\n        for i in range(m):\n            for j in range(n):\n                if matrix[i][j] == '1':\n                    dp[i][j] = dp[i][j - 1] + 1 if j else 1\n                else:\n                    dp[i][j] = 0\n            res = max(res, self.largestRectangleArea(dp))\n        return res"
    },
    {
        "number": 85,
        "title": "Maximal Rectangle",
        "difficulty": 2,
        "pass": 3,
        "answer": "        if not matrix:\n            return 0\n        n = len(matrix)\n        m = len(matrix[0])\n        max_area = 0\n        heights = [0] * m\n        for i in range(n):\n            for j in range(m):\n                if matrix[i][j] == \"1\":\n                    heights[j] += 1\n                else:\n                    heights[j] = 0\n            max_area = max(max_area, self.largestRectangleArea(heights))\n        return max_area"
    },
    {
        "number": 85,
        "title": "Maximal Rectangle",
        "difficulty": 2,
        "pass": 4,
        "answer": "        if not matrix:\n            return 0\n        rows = len(matrix)\n        cols = len(matrix[0])\n        dp = [[0] * cols for _ in range(rows)]\n        max_area = 0\n        for i in range(rows):\n            for j in range(cols):\n                if matrix[i][j] == '1':\n                    dp[i][j] = dp[i][j - 1] + 1 if j else 1\n                    max_area = max(max_area, dp[i][j])\n        for i in range(rows):\n            for j in range(cols):\n                if matrix[i][j] == '1':\n                    dp[i][j] = dp[i - 1][j] if i else 1\n                    max_area = max(max_area, dp[i][j])\n        return max_area * max_area"
    },
    {
        "number": 85,
        "title": "Maximal Rectangle",
        "difficulty": 2,
        "pass": 5,
        "answer": "        if not matrix:\n            return 0\n        n = len(matrix)\n        m = len(matrix[0])\n        dp = [[0] * m for _ in range(n)]\n        max_area = 0\n        for i in range(n):\n            for j in range(m):\n                if matrix[i][j] == '1':\n                    dp[i][j] = dp[i][j - 1] + 1 if j else 1\n                    max_area = max(max_area, dp[i][j])\n        for i in range(m):\n            for j in range(n):\n                if matrix[j][i] == '1':\n                    dp[j][i] = dp[j - 1][i] + 1 if j else 1\n                    max_area = max(max_area, dp[j][i])\n        return max_area * max_area"
    },
    {
        "number": 85,
        "title": "Maximal Rectangle",
        "difficulty": 2,
        "pass": 6,
        "answer": "        if not matrix:\n            return 0\n        m, n = len(matrix), len(matrix[0])\n        dp = [[0] * n for _ in range(m)]\n        res = 0\n        for i in range(m):\n            for j in range(n):\n                if matrix[i][j] == '0':\n                    dp[i][j] = 0\n                else:\n                    dp[i][j] = dp[i][j - 1] + 1 if j else 1\n            res = max(res, self.largestRectangleArea(dp))\n        return res"
    },
    {
        "number": 85,
        "title": "Maximal Rectangle",
        "difficulty": 2,
        "pass": 7,
        "answer": "        if not matrix:\n            return 0\n        \n        m, n = len(matrix), len(matrix[0])\n        \n        dp = [[0] * n for _ in range(m)]\n        \n        for i in range(m):\n            for j in range(n):\n                if matrix[i][j] == '0':\n                    dp[i][j] = 0\n                else:\n                    dp[i][j] = dp[i-1][j] + 1 if i > 0 else 1\n        \n        res = 0\n        for i in range(m):\n            for j in range(n):\n                res = max(res, dp[i][j] * (n-j))\n        \n        return res"
    },
    {
        "number": 85,
        "title": "Maximal Rectangle",
        "difficulty": 2,
        "pass": 8,
        "answer": "        if not matrix:\n            return 0\n        m, n = len(matrix), len(matrix[0])\n        heights = [0] * n\n        for i in range(m):\n            for j in range(n):\n                if matrix[i][j] == '1':\n                    heights[j] = heights[j] + 1\n                else:\n                    heights[j] = 0\n            max_area = 0\n            for j in range(n):\n                max_area = max(max_area, heights[j] * (j + 1))\n            for j in range(n - 1, -1, -1):\n                max_area = max(max_area, heights[j] * (n - j))\n            return max_area"
    },
    {
        "number": 85,
        "title": "Maximal Rectangle",
        "difficulty": 2,
        "pass": 9,
        "answer": "        if not matrix:\n            return 0\n        m, n = len(matrix), len(matrix[0])\n        dp = [[0] * n for _ in range(m)]\n        max_area = 0\n        for i in range(m):\n            for j in range(n):\n                if matrix[i][j] == '1':\n                    dp[i][j] = dp[i][j - 1] + 1 if j else 1\n                    max_area = max(max_area, dp[i][j])\n        return max_area * max_area"
    },
    {
        "number": 86,
        "title": "Partition List",
        "difficulty": 1,
        "pass": 0,
        "answer": "        if not head:\n            return None\n        dummy = ListNode(0)\n        dummy.next = head\n        curr = dummy\n        while curr.next:\n            if curr.next.val < x:\n                prev = curr\n                curr = curr.next\n            else:\n                prev.next = curr.next\n                temp = curr.next\n                curr.next = None\n                curr = temp\n        prev.next = curr\n        return dummy.next"
    },
    {
        "number": 86,
        "title": "Partition List",
        "difficulty": 1,
        "pass": 1,
        "answer": "        if not head:\n            return None\n        \n        dummy = ListNode(0)\n        dummy.next = head\n        low, high = dummy, dummy\n        \n        while low.next and low.next.val < x:\n            low = low.next\n        \n        while high.next and high.next.val >= x:\n            high = high.next\n        \n        while low.next and high.next:\n            low = low.next\n            high = high.next\n        \n        low.next = high.next\n        high.next = None\n        \n        return dummy.next"
    },
    {
        "number": 86,
        "title": "Partition List",
        "difficulty": 1,
        "pass": 2,
        "answer": "        if not head:\n            return None\n        if not head.next:\n            if head.val < x:\n                return head\n            else:\n                return None\n        \n        cur = head\n        prev = None\n        while cur:\n            if cur.val < x:\n                if prev:\n                    prev.next = cur.next\n                else:\n                    head = cur.next\n                cur.next = None\n                prev = cur\n                cur = prev.next\n            else:\n                prev = cur\n                cur = cur.next\n        \n        if prev:\n            prev.next = None\n        else:\n            head = None\n        \n        return head\n"
    },
    {
        "number": 86,
        "title": "Partition List",
        "difficulty": 1,
        "pass": 3,
        "answer": "        if not head:\n            return head\n        dummy = ListNode(0)\n        dummy.next = head\n        curr = dummy\n        while curr.next:\n            if curr.next.val < x:\n                curr = curr.next\n            else:\n                temp = curr.next\n                curr.next = curr.next.next\n                temp.next = dummy.next\n                dummy.next = temp\n        return dummy.next"
    },
    {
        "number": 86,
        "title": "Partition List",
        "difficulty": 1,
        "pass": 4,
        "answer": "        if not head:\n            return head\n        \n        dummy = ListNode(0)\n        dummy.next = head\n        curr = dummy\n        \n        while curr.next:\n            if curr.next.val < x:\n                prev = curr\n                curr = curr.next\n            else:\n                prev.next = curr.next\n                tmp = curr.next\n                curr.next = None\n                curr = tmp\n        \n        prev.next = dummy.next\n        curr.next = None\n        \n        return dummy.next\n"
    },
    {
        "number": 86,
        "title": "Partition List",
        "difficulty": 1,
        "pass": 5,
        "answer": "        if not head:\n            return None\n        dummy_head = ListNode(0)\n        dummy_tail = ListNode(0)\n        dummy_head.next = dummy_tail\n        dummy_tail.next = head\n        node = dummy_head.next\n        while node:\n            if node.val < x:\n                dummy_tail.next = node\n                dummy_tail = dummy_tail.next\n            else:\n                dummy_head.next = node\n                dummy_head = dummy_head.next\n            node = node.next\n        dummy_tail.next = dummy_head.next\n        return dummy_head.next"
    },
    {
        "number": 86,
        "title": "Partition List",
        "difficulty": 1,
        "pass": 6,
        "answer": "        if not head:\n            return None\n        if not head.next:\n            if head.val < x:\n                return head\n            else:\n                return None\n        if head.val < x:\n            head.next = self.partition(head.next, x)\n            return head\n        elif head.val > x:\n            head.next = self.partition(head.next, x)\n            return head\n        else:\n            head.next = self.partition(head.next, x)\n            return head\n"
    },
    {
        "number": 86,
        "title": "Partition List",
        "difficulty": 1,
        "pass": 7,
        "answer": "        # TODO\n        if not head:\n            return head\n        dummy = ListNode(0)\n        dummy.next = head\n        curr = dummy\n        while curr.next:\n            if curr.next.val < x:\n                curr = curr.next\n            else:\n                tmp = curr.next\n                curr.next = curr.next.next\n                tmp.next = dummy.next\n                dummy.next = tmp\n        return dummy.next\n"
    },
    {
        "number": 86,
        "title": "Partition List",
        "difficulty": 1,
        "pass": 8,
        "answer": "        dummy = ListNode(0)\n        dummy.next = head\n        cur = dummy\n        while cur and cur.next:\n            if cur.next.val < x:\n                temp = cur.next\n                cur.next = cur.next.next\n                temp.next = dummy.next\n                dummy.next = temp\n            else:\n                cur = cur.next\n        return dummy.next"
    },
    {
        "number": 86,
        "title": "Partition List",
        "difficulty": 1,
        "pass": 9,
        "answer": "        if not head:\n            return None\n        dummy = ListNode(0)\n        dummy.next = head\n        cur = dummy\n        while cur and cur.next:\n            if cur.next.val < x:\n                temp = cur.next\n                cur.next = temp.next\n                temp.next = dummy.next\n                dummy.next = temp\n            else:\n                cur = cur.next\n        return dummy.next\n"
    },
    {
        "number": 87,
        "title": "Scramble String",
        "difficulty": 2,
        "pass": 0,
        "answer": "        if len(s1)!= len(s2):\n            return False\n        if len(s1) == 1:\n            return s1 == s2\n        if sorted(s1)!= sorted(s2):\n            return False\n        return self.isScramble(s1[1:], s2[1:]) or self.isScramble(s1[1:], s2[1:]) or self.isScramble(s1[1:], s2[1:])"
    },
    {
        "number": 87,
        "title": "Scramble String",
        "difficulty": 2,
        "pass": 1,
        "answer": "        if len(s1)!= len(s2):\n            return False\n        if len(s1) == 1:\n            return s1 == s2\n        if s1 == s2:\n            return True\n        if sorted(s1)!= sorted(s2):\n            return False\n        return self.isScramble(s1[1:], s2[1:]) and self.isScramble(s1[1:], s2[1:]) or self.isScramble(s1[1:], s2[1:]) and self.isScramble(s1[1:], s2[1:])"
    },
    {
        "number": 87,
        "title": "Scramble String",
        "difficulty": 2,
        "pass": 2,
        "answer": "        if len(s1)!= len(s2):\n            return False\n        if len(s1) == 1:\n            return s1 == s2\n        if s1 == s2:\n            return True\n        for i in range(1, len(s1)):\n            if self.isScramble(s1[:i], s2[:i]) and self.isScramble(s1[i:], s2[i:]):\n                return True\n            if self.isScramble(s1[:i], s2[-i:]) and self.isScramble(s1[i:], s2[:-i]):\n                return True\n        return False"
    },
    {
        "number": 87,
        "title": "Scramble String",
        "difficulty": 2,
        "pass": 3,
        "answer": "        if len(s1)!= len(s2):\n            return False\n        if len(s1) == 1:\n            return s1 == s2\n        if sorted(s1)!= sorted(s2):\n            return False\n        return self.isScramble(s1[1:], s2[1:]) or self.isScramble(s1[1:], s2[:-1]) or self.isScramble(s1[:-1], s2[1:]) or self.isScramble(s1[:-1], s2[:-1])"
    },
    {
        "number": 87,
        "title": "Scramble String",
        "difficulty": 2,
        "pass": 4,
        "answer": "        if len(s1)!= len(s2):\n            return False\n        if len(s1) == 1:\n            return s1 == s2\n        if sorted(s1)!= sorted(s2):\n            return False\n        return self.isScramble(s1[1:], s2[1:]) or self.isScramble(s1[1:], s2[1:]) or self.isScramble(s1[1:], s2[1:])"
    },
    {
        "number": 87,
        "title": "Scramble String",
        "difficulty": 2,
        "pass": 5,
        "answer": "        if len(s1)!= len(s2):\n            return False\n        if len(s1) == 1:\n            return s1 == s2\n        \n        def is_scramble(s1, s2):\n            if len(s1)!= len(s2):\n                return False\n            if len(s1) == 1:\n                return s1 == s2\n            \n            if sorted(s1)!= sorted(s2):\n                return False\n            \n            for i in range(1, len(s1)):\n                if is_scramble(s1[:i], s2[:i]) and is_scramble(s1[i:], s2[i:]):\n                    return True\n                if is_scramble(s1[:i], s2[-i:]) and is_scramble(s1[i:], s2[:-i]):\n                    return True\n            return False\n        \n        return is_scramble(s1, s2)"
    },
    {
        "number": 87,
        "title": "Scramble String",
        "difficulty": 2,
        "pass": 6,
        "answer": "        if len(s1)!= len(s2):\n            return False\n        if len(s1) == 1:\n            return s1 == s2\n        \n        def is_scramble(s1, s2):\n            if len(s1)!= len(s2):\n                return False\n            if len(s1) == 1:\n                return s1 == s2\n            \n            if sorted(s1)!= sorted(s2):\n                return False\n            \n            for i in range(1, len(s1)):\n                if is_scramble(s1[:i], s2[:i]) and is_scramble(s1[i:], s2[i:]):\n                    return True\n                if is_scramble(s1[:i], s2[-i:]) and is_scramble(s1[i:], s2[:-i]):\n                    return True\n            return False\n        \n        return is_scramble(s1, s2)"
    },
    {
        "number": 87,
        "title": "Scramble String",
        "difficulty": 2,
        "pass": 7,
        "answer": "        if len(s1)!= len(s2):\n            return False\n        if len(s1) == 1:\n            return s1 == s2\n        if s1 == s2:\n            return True\n        \n        def is_scramble(s1, s2):\n            if len(s1)!= len(s2):\n                return False\n            if len(s1) == 1:\n                return s1 == s2\n            if s1 == s2:\n                return True\n            \n            if sorted(s1)!= sorted(s2):\n                return False\n            \n            for i in range(1, len(s1)):\n                if is_scramble(s1[:i], s2[:i]) and is_scramble(s1[i:], s2[i:]):\n                    return True\n                if is_scramble(s1[:i], s2[-i:]) and is_scramble(s1[i:], s2[:-i]):\n                    return True\n            return False\n        \n"
    },
    {
        "number": 87,
        "title": "Scramble String",
        "difficulty": 2,
        "pass": 8,
        "answer": "        if len(s1)!= len(s2):\n            return False\n        if len(s1) == 1:\n            return s1 == s2\n        if s1 == s2:\n            return True"
    },
    {
        "number": 87,
        "title": "Scramble String",
        "difficulty": 2,
        "pass": 9,
        "answer": "        if len(s1)!= len(s2):\n            return False\n        if len(s1) == 1:\n            return s1 == s2\n        return self.isScramble(s1[1:], s2[1:]) and s1[0] == s2[0] and self.isScramble(s1[1:], s2[1:]) or \\\n               self.isScramble(s1[1:], s2[1:]) and s1[0] == s2[0] and self.isScramble(s1[1:], s2[1:])"
    },
    {
        "number": 88,
        "title": "Merge Sorted Array",
        "difficulty": 0,
        "pass": 0,
        "answer": "        i = m - 1\n        j = n - 1\n        k = m + n - 1\n        while i >= 0 and j >= 0:\n            if nums1[i] > nums2[j]:\n                nums1[k] = nums1[i]\n                i -= 1\n            else:\n                nums1[k] = nums2[j]\n                j -= 1\n            k -= 1\n        while j >= 0:\n            nums1[k] = nums2[j]\n            j -= 1\n            k -= 1"
    },
    {
        "number": 88,
        "title": "Merge Sorted Array",
        "difficulty": 0,
        "pass": 1,
        "answer": "        i, j = m - 1, n - 1\n        k = m + n - 1\n        while i >= 0 and j >= 0:\n            if nums1[i] > nums2[j]:\n                nums1[k] = nums1[i]\n                i -= 1\n            else:\n                nums1[k] = nums2[j]\n                j -= 1\n            k -= 1\n        while j >= 0:\n            nums1[k] = nums2[j]\n            j -= 1\n            k -= 1"
    },
    {
        "number": 88,
        "title": "Merge Sorted Array",
        "difficulty": 0,
        "pass": 2,
        "answer": "        i, j = m - 1, n - 1\n        k = m + n - 1\n        while i >= 0 and j >= 0:\n            if nums1[i] > nums2[j]:\n                nums1[k] = nums1[i]\n                i -= 1\n            else:\n                nums1[k] = nums2[j]\n                j -= 1\n            k -= 1\n        while i >= 0:\n            nums1[k] = nums1[i]\n            i -= 1\n            k -= 1\n        while j >= 0:\n            nums1[k] = nums2[j]\n            j -= 1\n            k -= 1"
    },
    {
        "number": 88,
        "title": "Merge Sorted Array",
        "difficulty": 0,
        "pass": 3,
        "answer": "        i = m - 1\n        j = n - 1\n        k = m + n - 1\n        while i >= 0 and j >= 0:\n            if nums1[i] > nums2[j]:\n                nums1[k] = nums1[i]\n                i -= 1\n            else:\n                nums1[k] = nums2[j]\n                j -= 1\n            k -= 1\n        while j >= 0:\n            nums1[k] = nums2[j]\n            j -= 1\n            k -= 1"
    },
    {
        "number": 88,
        "title": "Merge Sorted Array",
        "difficulty": 0,
        "pass": 4,
        "answer": "        i, j = m - 1, n - 1\n        k = m + n - 1\n        while i >= 0 and j >= 0:\n            if nums1[i] > nums2[j]:\n                nums1[k] = nums1[i]\n                i -= 1\n            else:\n                nums1[k] = nums2[j]\n                j -= 1\n            k -= 1\n        while i >= 0:\n            nums1[k] = nums1[i]\n            i -= 1\n            k -= 1\n        while j >= 0:\n            nums1[k] = nums2[j]\n            j -= 1\n            k -= 1"
    },
    {
        "number": 88,
        "title": "Merge Sorted Array",
        "difficulty": 0,
        "pass": 5,
        "answer": "        i = m - 1\n        j = n - 1\n        k = m + n - 1\n        while i >= 0 and j >= 0:\n            if nums1[i] > nums2[j]:\n                nums1[k] = nums1[i]\n                i -= 1\n            else:\n                nums1[k] = nums2[j]\n                j -= 1\n            k -= 1\n        while i >= 0:\n            nums1[k] = nums1[i]\n            i -= 1\n            k -= 1\n        while j >= 0:\n            nums1[k] = nums2[j]\n            j -= 1\n            k -= 1"
    },
    {
        "number": 88,
        "title": "Merge Sorted Array",
        "difficulty": 0,
        "pass": 6,
        "answer": "        i = 0\n        j = 0\n        k = 0\n        while i < m and j < n:\n            if nums1[i] < nums2[j]:\n                nums1[k] = nums1[i]\n                i += 1\n            else:\n                nums1[k] = nums2[j]\n                j += 1\n            k += 1\n        while i < m:\n            nums1[k] = nums1[i]\n            i += 1\n            k += 1\n        while j < n:\n            nums1[k] = nums2[j]\n            j += 1\n            k += 1"
    },
    {
        "number": 88,
        "title": "Merge Sorted Array",
        "difficulty": 0,
        "pass": 7,
        "answer": "        i = m - 1\n        j = n - 1\n        k = m + n - 1\n        while i >= 0 and j >= 0:\n            if nums1[i] > nums2[j]:\n                nums1[k] = nums1[i]\n                i -= 1\n            else:\n                nums1[k] = nums2[j]\n                j -= 1\n            k -= 1\n        while j >= 0:\n            nums1[k] = nums2[j]\n            j -= 1\n            k -= 1"
    },
    {
        "number": 88,
        "title": "Merge Sorted Array",
        "difficulty": 0,
        "pass": 8,
        "answer": "        i = m - 1\n        j = n - 1\n        k = m + n - 1\n        while i >= 0 and j >= 0:\n            if nums1[i] > nums2[j]:\n                nums1[k] = nums1[i]\n                i -= 1\n            else:\n                nums1[k] = nums2[j]\n                j -= 1\n            k -= 1\n        while i >= 0:\n            nums1[k] = nums1[i]\n            i -= 1\n            k -= 1\n        while j >= 0:\n            nums1[k] = nums2[j]\n            j -= 1\n            k -= 1"
    },
    {
        "number": 88,
        "title": "Merge Sorted Array",
        "difficulty": 0,
        "pass": 9,
        "answer": "        if m == 0:\n            return nums2\n        if n == 0:\n            return nums1"
    },
    {
        "number": 89,
        "title": "Gray Code",
        "difficulty": 1,
        "pass": 0,
        "answer": "        if n == 0:\n            return [0]\n        if n == 1:\n            return [0, 1]\n        ans = self.grayCode(n - 1)\n        for i in range(len(ans) - 1, -1, -1):\n            ans.append(ans[i] + 2 ** (n - 1))\n        return ans"
    },
    {
        "number": 89,
        "title": "Gray Code",
        "difficulty": 1,
        "pass": 1,
        "answer": "        if n == 0:\n            return []\n        if n == 1:\n            return [0, 1]\n        if n == 2:\n            return [0, 1, 3, 2]\n        res = [0, 1]\n        for i in range(2, n + 1):\n            tmp = []\n            for j in range(len(res)):\n                tmp.append(res[j] + 2 ** (i - 1))\n            res = tmp\n        return res"
    },
    {
        "number": 89,
        "title": "Gray Code",
        "difficulty": 1,
        "pass": 2,
        "answer": "        if n == 0:\n            return [0]\n        if n == 1:\n            return [0, 1]\n        if n == 2:\n            return [0, 1, 3, 2]\n        if n == 3:\n            return [0, 1, 2, 3]\n        if n == 4:\n            return [0, 1, 2, 3, 4]\n        if n == 5:\n            return [0, 1, 2, 3, 4, 5]\n        if n == 6:\n            return [0, 1, 2, 3, 4, 5, 6]\n        if n == 7:\n            return [0, 1, 2, 3, 4, 5, 6, 7]\n        if n == 8:\n            return [0, 1, 2, 3, 4, 5, 6, 7, 8]\n        if n == 9:\n            return [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n        if n == 10:\n            return [0, 1, 2, 3, 4, 5, 6, 7, 8,"
    },
    {
        "number": 89,
        "title": "Gray Code",
        "difficulty": 1,
        "pass": 3,
        "answer": "        if n == 0:\n            return [0]\n        if n == 1:\n            return [0, 1]\n        res = []\n        for i in range(1 << n):\n            res.append(i ^ (i >> 1))\n        return res"
    },
    {
        "number": 89,
        "title": "Gray Code",
        "difficulty": 1,
        "pass": 4,
        "answer": "        if n == 0:\n            return [0]\n        if n == 1:\n            return [0, 1]\n        res = [0, 1]\n        for i in range(2, n + 1):\n            for j in range(len(res)):\n                res.append(res[j] + 2 ** (i - 1))\n        return res"
    },
    {
        "number": 89,
        "title": "Gray Code",
        "difficulty": 1,
        "pass": 5,
        "answer": "        if n == 0:\n            return [0]\n        if n == 1:\n            return [0, 1]\n        if n == 2:\n            return [0, 1, 3, 2]\n        if n == 3:\n            return [0, 1, 2, 3]\n        if n == 4:\n            return [0, 1, 2, 3, 4]\n        if n == 5:\n            return [0, 1, 2, 3, 4, 5]\n        if n == 6:\n            return [0, 1, 2, 3, 4, 5, 6]\n        if n == 7:\n            return [0, 1, 2, 3, 4, 5, 6, 7]\n        if n == 8:\n            return [0, 1, 2, 3, 4, 5, 6, 7, 8]\n        if n == 9:\n            return [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n        if n == 10:\n            return [0, 1, 2, 3, 4, 5, 6, 7, 8,"
    },
    {
        "number": 89,
        "title": "Gray Code",
        "difficulty": 1,
        "pass": 6,
        "answer": "        if n == 0:\n            return [0]\n        if n == 1:\n            return [0, 1]\n        res = [0, 1]\n        for i in range(2, n + 1):\n            tmp = []\n            for j in range(len(res)):\n                tmp.append(res[j] + 2 ** (i - 1))\n            res = tmp\n        return res"
    },
    {
        "number": 89,
        "title": "Gray Code",
        "difficulty": 1,
        "pass": 7,
        "answer": "        if n == 0:\n            return [0]\n        elif n == 1:\n            return [0, 1]\n        else:\n            res = self.grayCode(n - 1)\n            for i in range(len(res) - 1, -1, -1):\n                res.append(res[i] + 2 ** (n - 1))\n            return res"
    },
    {
        "number": 89,
        "title": "Gray Code",
        "difficulty": 1,
        "pass": 8,
        "answer": "        if n == 1:\n            return [0, 1]\n        if n == 2:\n            return [0, 1, 3, 2]\n        res = self.grayCode(n - 1)\n        for i in range(len(res) - 1):\n            res.append(res[i] + 2 ** (n - 1))\n        return res"
    },
    {
        "number": 89,
        "title": "Gray Code",
        "difficulty": 1,
        "pass": 9,
        "answer": "        if n == 0:\n            return [0]\n        if n == 1:\n            return [0, 1]"
    },
    {
        "number": 90,
        "title": "Subsets II",
        "difficulty": 1,
        "pass": 0,
        "answer": "        if not nums:\n            return []\n        \n        nums.sort()\n        res = [[]]\n        \n        for i in range(len(nums)):\n            if i > 0 and nums[i] == nums[i-1]:\n                continue\n            tmp = []\n            for j in range(len(res)):\n                tmp.append(res[j] + [nums[i]])\n            res += tmp\n        \n        return res\n        "
    },
    {
        "number": 90,
        "title": "Subsets II",
        "difficulty": 1,
        "pass": 1,
        "answer": "        if not nums:\n            return [[]]\n        n = len(nums)\n        nums.sort()\n        res = [[]]\n        for i in range(n):\n            if i > 0 and nums[i] == nums[i - 1]:\n                continue\n            for j in range(len(res)):\n                tmp = res[j] + [nums[i]]\n                if tmp not in res:\n                    res.append(tmp)\n        return res"
    },
    {
        "number": 90,
        "title": "Subsets II",
        "difficulty": 1,
        "pass": 2,
        "answer": "        nums.sort()\n        res = [[]]\n        for i in range(len(nums)):\n            if i == 0 or nums[i]!= nums[i-1]:\n                l = len(res)\n            for j in range(len(res) - l, len(res)):\n                res.append(res[j] + [nums[i]])\n        return res"
    },
    {
        "number": 90,
        "title": "Subsets II",
        "difficulty": 1,
        "pass": 3,
        "answer": "        nums.sort()\n        res = []\n        self.dfs(nums, 0, [], res)\n        return res"
    },
    {
        "number": 90,
        "title": "Subsets II",
        "difficulty": 1,
        "pass": 4,
        "answer": "        if len(nums) == 0:\n            return [[]]\n        if len(nums) == 1:\n            return [[], nums]\n        nums.sort()\n        res = [[], nums]\n        for i in range(len(nums)):\n            if i == 0 or nums[i]!= nums[i - 1]:\n                tmp = self.subsetsWithDup(nums[i + 1:])\n                for j in range(len(tmp)):\n                    tmp[j].insert(0, nums[i])\n                    res.append(tmp[j])\n        return res"
    },
    {
        "number": 90,
        "title": "Subsets II",
        "difficulty": 1,
        "pass": 5,
        "answer": "        if not nums:\n            return [[]]\n        \n        n = len(nums)\n        res = []\n        nums.sort()\n        \n        def dfs(start, path):\n            res.append(path)\n            for i in range(start, n):\n                if i > start and nums[i] == nums[i-1]:\n                    continue\n                dfs(i+1, path+[nums[i]])\n        \n        dfs(0, [])\n        return res\n        "
    },
    {
        "number": 90,
        "title": "Subsets II",
        "difficulty": 1,
        "pass": 6,
        "answer": "        nums.sort()\n        res = [[]]\n        for i in range(len(nums)):\n            if i > 0 and nums[i] == nums[i-1]:\n                continue\n            temp = []\n            for j in range(len(res)):\n                temp.append(res[j]+[nums[i]])\n            res += temp\n        return res"
    },
    {
        "number": 90,
        "title": "Subsets II",
        "difficulty": 1,
        "pass": 7,
        "answer": "        n = len(nums)\n        if n == 0:\n            return []\n        if n == 1:\n            return [[], nums]\n        \n        nums.sort()\n        res = []\n        \n        def backtrack(i, tmp):\n            res.append(tmp)\n            for j in range(i, n):\n                if j > i and nums[j] == nums[j-1]:\n                    continue\n                backtrack(j+1, tmp+[nums[j]])\n        \n        backtrack(0, [])\n        return res"
    },
    {
        "number": 90,
        "title": "Subsets II",
        "difficulty": 1,
        "pass": 8,
        "answer": "        nums.sort()\n        res = [[]]\n        for i in range(len(nums)):\n            if i == 0 or nums[i]!= nums[i-1]:\n                temp = []\n                for j in range(len(res)):\n                    temp.append(res[j]+[nums[i]])\n                res += temp\n        return res"
    },
    {
        "number": 90,
        "title": "Subsets II",
        "difficulty": 1,
        "pass": 9,
        "answer": "        if not nums:\n            return [[]]\n        nums.sort()\n        res = [[]]\n        for i in range(len(nums)):\n            if i > 0 and nums[i] == nums[i-1]:\n                continue\n            temp = []\n            for j in range(len(res)):\n                temp.append(res[j]+[nums[i]])\n            res += temp\n        return res"
    },
    {
        "number": 91,
        "title": "Decode Ways",
        "difficulty": 1,
        "pass": 0,
        "answer": "        if len(s) == 0:\n            return 0\n        if len(s) == 1:\n            return 1 if int(s) >= 1 and int(s) <= 9 else 0\n        dp = [0] * (len(s) + 1)\n        dp[0] = 1\n        dp[1] = 1 if int(s[0]) >= 1 and int(s[0]) <= 9 else 0\n        for i in range(2, len(s) + 1):\n            if int(s[i - 1:i]) >= 10 and int(s[i - 1:i]) <= 26:\n                dp[i] += dp[i - 1]\n            if int(s[i - 2:i]) >= 10 and int(s[i - 2:i]) <= 26:\n                dp[i] += dp[i - 2]\n        return dp[-1]"
    },
    {
        "number": 91,
        "title": "Decode Ways",
        "difficulty": 1,
        "pass": 1,
        "answer": "        if not s:\n            return 0\n        dp = [0] * (len(s) + 1)\n        dp[0] = 1\n        dp[1] = 0 if s[0] == '0' else 1\n        for i in range(2, len(s) + 1):\n            if s[i - 1]!= '0':\n                dp[i] += dp[i - 1]\n            if 10 <= int(s[i - 2:i]) <= 26:\n                dp[i] += dp[i - 2]\n        return dp[-1]"
    },
    {
        "number": 91,
        "title": "Decode Ways",
        "difficulty": 1,
        "pass": 2,
        "answer": "        if len(s) == 0:\n            return 0\n        if len(s) == 1:\n            return 1 if int(s) >= 1 and int(s) <= 9 else 0\n        dp = [0] * (len(s) + 1)\n        dp[0] = 1\n        dp[1] = 1 if int(s[0]) >= 1 and int(s[0]) <= 9 else 0\n        for i in range(2, len(s) + 1):\n            if int(s[i - 1]) >= 1 and int(s[i - 1]) <= 9:\n                dp[i] += dp[i - 1]\n            if int(s[i - 2:i]) >= 10 and int(s[i - 2:i]) <= 26:\n                dp[i] += dp[i - 2]\n        return dp[-1]"
    },
    {
        "number": 91,
        "title": "Decode Ways",
        "difficulty": 1,
        "pass": 3,
        "answer": "        if not s:\n            return 0\n        dp = [0] * (len(s) + 1)\n        dp[0] = 1\n        dp[1] = 0 if s[0] == '0' else 1\n        for i in range(2, len(s) + 1):\n            if s[i - 1]!= '0':\n                dp[i] += dp[i - 1]\n            if 10 <= int(s[i - 2:i]) <= 26:\n                dp[i] += dp[i - 2]\n        return dp[-1]"
    },
    {
        "number": 91,
        "title": "Decode Ways",
        "difficulty": 1,
        "pass": 4,
        "answer": "        if not s:\n            return 0\n        dp = [0] * (len(s) + 1)\n        dp[0] = 1\n        dp[1] = 0 if s[0] == '0' else 1\n        for i in range(2, len(s) + 1):\n            if s[i - 1]!= '0':\n                dp[i] += dp[i - 1]\n            if 10 <= int(s[i - 2:i]) <= 26:\n                dp[i] += dp[i - 2]\n        return dp[-1]"
    },
    {
        "number": 91,
        "title": "Decode Ways",
        "difficulty": 1,
        "pass": 5,
        "answer": "        # Time: O(n)\n        # Space: O(1)\n        if not s:\n            return 0\n        n = len(s)\n        dp = [0] * n\n        dp[0] = 1\n        dp[1] = 0 if s[0] == '0' else 1\n        for i in range(2, n):\n            if s[i - 1]!= '0':\n                dp[i] += dp[i - 1]\n            if 10 <= int(s[i - 2:i]) <= 26:\n                dp[i] += dp[i - 2]\n        return dp[-1]"
    },
    {
        "number": 91,
        "title": "Decode Ways",
        "difficulty": 1,
        "pass": 6,
        "answer": "        if not s:\n            return 0\n        dp = [0] * (len(s) + 1)\n        dp[0] = 1\n        dp[1] = 0 if s[0] == '0' else 1\n        for i in range(2, len(s) + 1):\n            if s[i - 1]!= '0':\n                dp[i] += dp[i - 1]\n            if 10 <= int(s[i - 2:i]) <= 26:\n                dp[i] += dp[i - 2]\n        return dp[-1]"
    },
    {
        "number": 91,
        "title": "Decode Ways",
        "difficulty": 1,
        "pass": 7,
        "answer": "        if not s:\n            return 0\n        dp = [0] * (len(s) + 1)\n        dp[0] = 1\n        dp[1] = 0 if s[0] == '0' else 1\n        for i in range(2, len(s) + 1):\n            if s[i - 1]!= '0':\n                dp[i] += dp[i - 1]\n            if 10 <= int(s[i - 2:i]) <= 26:\n                dp[i] += dp[i - 2]\n        return dp[-1]"
    },
    {
        "number": 91,
        "title": "Decode Ways",
        "difficulty": 1,
        "pass": 8,
        "answer": "        if not s:\n            return 0"
    },
    {
        "number": 91,
        "title": "Decode Ways",
        "difficulty": 1,
        "pass": 9,
        "answer": "        if not s:\n            return 0\n        dp = [0] * (len(s) + 1)\n        dp[0] = 1\n        dp[1] = 0 if s[0] == '0' else 1\n        for i in range(2, len(s) + 1):\n            if s[i - 1]!= '0':\n                dp[i] += dp[i - 1]\n            if 10 <= int(s[i - 2:i]) <= 26:\n                dp[i] += dp[i - 2]\n        return dp[-1]"
    },
    {
        "number": 92,
        "title": "Reverse Linked List II",
        "difficulty": 1,
        "pass": 0,
        "answer": "        dummy = ListNode(0)\n        dummy.next = head\n        pre = dummy\n        for _ in range(left - 1):\n            pre = pre.next\n        cur = pre.next\n        for _ in range(right - left):\n            next = cur.next\n            cur.next = next.next\n            next.next = pre.next\n            pre.next = next\n        return dummy.next"
    },
    {
        "number": 92,
        "title": "Reverse Linked List II",
        "difficulty": 1,
        "pass": 1,
        "answer": "        if left == right:\n            return head\n        \n        dummy = ListNode(0)\n        dummy.next = head\n        pre = dummy\n        \n        for _ in range(left - 1):\n            pre = pre.next\n        \n        start = pre.next\n        \n        for _ in range(right - left + 1):\n            tmp = start.next\n            start.next = tmp.next\n            tmp.next = pre.next\n            pre.next = tmp\n        \n        return dummy.next\n        \n# @lc code=end"
    },
    {
        "number": 92,
        "title": "Reverse Linked List II",
        "difficulty": 1,
        "pass": 2,
        "answer": "        if not head:\n            return None\n        \n        dummy = ListNode(0)\n        dummy.next = head\n        pre = dummy\n        \n        for _ in range(left - 1):\n            pre = pre.next\n        \n        cur = pre.next\n        for _ in range(right - left):\n            next_node = cur.next\n            cur.next = next_node.next\n            next_node.next = pre.next\n            pre.next = next_node\n        \n        return dummy.next"
    },
    {
        "number": 92,
        "title": "Reverse Linked List II",
        "difficulty": 1,
        "pass": 3,
        "answer": "        dummy = ListNode(0)\n        dummy.next = head\n        pre = dummy\n        for _ in range(left - 1):\n            pre = pre.next\n        cur = pre.next\n        for _ in range(right - left):\n            nex = cur.next\n            cur.next = nex.next\n            nex.next = pre.next\n            pre.next = nex\n        return dummy.next"
    },
    {
        "number": 92,
        "title": "Reverse Linked List II",
        "difficulty": 1,
        "pass": 4,
        "answer": "        dummy = ListNode(0)\n        dummy.next = head\n        prev = dummy\n        for _ in range(left - 1):\n            prev = prev.next\n        curr = prev.next\n        for _ in range(right - left):\n            next_node = curr.next\n            curr.next = next_node.next\n            next_node.next = prev.next\n            prev.next = next_node\n        return dummy.next"
    },
    {
        "number": 92,
        "title": "Reverse Linked List II",
        "difficulty": 1,
        "pass": 5,
        "answer": "        if left == right:\n            return head\n        dummy = ListNode(0)\n        dummy.next = head\n        pre = dummy\n        for _ in range(left - 1):\n            pre = pre.next\n        cur = pre.next\n        for _ in range(right - left):\n            tmp = cur.next\n            cur.next = tmp.next\n            tmp.next = pre.next\n            pre.next = tmp\n        return dummy.next"
    },
    {
        "number": 92,
        "title": "Reverse Linked List II",
        "difficulty": 1,
        "pass": 6,
        "answer": "        if left == right:\n            return head\n        \n        dummy = ListNode(0)\n        dummy.next = head\n        prev = dummy\n        \n        for _ in range(left - 1):\n            prev = prev.next\n        \n        curr = prev.next\n        \n        for _ in range(right - left):\n            next_node = curr.next\n            curr.next = next_node.next\n            next_node.next = prev.next\n            prev.next = next_node\n        \n        return dummy.next"
    },
    {
        "number": 92,
        "title": "Reverse Linked List II",
        "difficulty": 1,
        "pass": 7,
        "answer": "        if left == right:\n            return head\n        \n        dummy = ListNode(0)\n        dummy.next = head\n        \n        pre = dummy\n        \n        for _ in range(left - 1):\n            pre = pre.next\n        \n        cur = pre.next\n        \n        for _ in range(right - left):\n            tmp = cur.next\n            cur.next = tmp.next\n            tmp.next = pre.next\n            pre.next = tmp\n        \n        return dummy.next"
    },
    {
        "number": 92,
        "title": "Reverse Linked List II",
        "difficulty": 1,
        "pass": 8,
        "answer": "        if not head:\n            return None\n        \n        dummy = ListNode(0)\n        dummy.next = head\n        pre = dummy\n        \n        for _ in range(left - 1):\n            pre = pre.next\n        \n        cur = pre.next\n        \n        for _ in range(right - left):\n            next_node = cur.next\n            cur.next = next_node.next\n            next_node.next = pre.next\n            pre.next = next_node\n        \n        return dummy.next"
    },
    {
        "number": 92,
        "title": "Reverse Linked List II",
        "difficulty": 1,
        "pass": 9,
        "answer": "        if left == right:\n            return head\n        dummy = ListNode(0)\n        dummy.next = head\n        pre = dummy\n        for _ in range(left - 1):\n            pre = pre.next\n        cur = pre.next\n        for _ in range(right - left):\n            tmp = cur.next\n            cur.next = tmp.next\n            tmp.next = pre.next\n            pre.next = tmp\n        return dummy.next\n"
    },
    {
        "number": 93,
        "title": "Restore IP Addresses",
        "difficulty": 1,
        "pass": 0,
        "answer": "        def is_valid(s):\n            if len(s) == 0:\n                return False\n            if len(s) == 1 and s[0] == '0':\n                return False\n            if len(s) == 2 and s[0] == '0' and s[1] == '0':\n                return False\n            if len(s) == 3 and s[0] == '0' and s[1] == '0' and s[2] == '0':\n                return False\n            if len(s) == 4 and s[0] == '0' and s[1] == '0' and s[2] == '0' and s[3] == '0':\n                return False\n            if len(s) == 5 and s[0] == '0' and s[1] == '0' and s[2] == '0' and s[3] == '0' and s[4] == '0':\n                return False\n            if len(s) == 6 and s[0] == '0' and s[1] == '0' and"
    },
    {
        "number": 93,
        "title": "Restore IP Addresses",
        "difficulty": 1,
        "pass": 1,
        "answer": "        res = []\n        self.dfs(s, 0, \"\", res)\n        return res"
    },
    {
        "number": 93,
        "title": "Restore IP Addresses",
        "difficulty": 1,
        "pass": 2,
        "answer": "        res = []\n        self.dfs(s, 0, \"\", res)\n        return res"
    },
    {
        "number": 93,
        "title": "Restore IP Addresses",
        "difficulty": 1,
        "pass": 3,
        "answer": "        res = []\n        self.dfs(s, 0, \"\", res)\n        return res"
    },
    {
        "number": 93,
        "title": "Restore IP Addresses",
        "difficulty": 1,
        "pass": 4,
        "answer": "        def is_valid(ip):\n            ip = ip.split('.')\n            if len(ip)!= 4:\n                return False\n            for i in ip:\n                if not i.isdigit():\n                    return False\n                if int(i) < 0 or int(i) > 255:\n                    return False\n            return True\n        \n        res = []\n        for i in range(1, 4):\n            for j in range(1, 4):\n                for k in range(1, 4):\n                    for l in range(1, 4):\n                        ip = s[:i] + '.' + s[i:j] + '.' + s[j:k] + '.' + s[k:l]\n                        if is_valid(ip):\n                            res.append(ip)\n        return res"
    },
    {
        "number": 93,
        "title": "Restore IP Addresses",
        "difficulty": 1,
        "pass": 5,
        "answer": "        def is_valid(s):\n            if len(s) == 0:\n                return False\n            if len(s) > 12:\n                return False\n            if s[0] == '0' and len(s) > 1:\n                return False\n            if s[0] == '0' and len(s) == 1:\n                return False\n            if s[-1] == '0' and len(s) > 1:\n                return False\n            if s[-1] == '0' and len(s) == 1:\n                return False\n            for i in range(1, len(s) - 1):\n                if s[i] == '0' and s[i - 1]!= '0' and s[i + 1]!= '0':\n                    return False\n                if s[i] == '.' and s[i - 1]!= '0' and s[i + 1]!= '0':\n                    return False\n            return True\n        \n        def dfs(s, index, path, res):\n            if index == len(s):\n                "
    },
    {
        "number": 93,
        "title": "Restore IP Addresses",
        "difficulty": 1,
        "pass": 6,
        "answer": "        res = []\n        self.dfs(s, 0, \"\", res)\n        return res"
    },
    {
        "number": 93,
        "title": "Restore IP Addresses",
        "difficulty": 1,
        "pass": 7,
        "answer": "        def validIP(s):\n            s = s.split('.')\n            if len(s)!= 4:\n                return False\n            for i in range(len(s)):\n                if len(s[i]) > 1 and s[i][0] == '0':\n                    return False\n                if int(s[i]) < 0 or int(s[i]) > 255:\n                    return False\n            return True\n        \n        res = []\n        for i in range(1, 4):\n            for j in range(1, 4):\n                for k in range(1, 4):\n                    for l in range(1, 4):\n                        s = s[:i] + '.' + s[i:j] + '.' + s[j:k] + '.' + s[k:l] + '.' + s[l:]\n                        if validIP(s):\n                            res.append(s)\n        return res"
    },
    {
        "number": 93,
        "title": "Restore IP Addresses",
        "difficulty": 1,
        "pass": 8,
        "answer": "        def is_valid(s):\n            if len(s)!= 4:\n                return False\n            for c in s:\n                if c < '0' or c > '9':\n                    return False\n            return True\n        \n        def backtrack(s, path, res):\n            if len(s) == 0:\n                if is_valid(path):\n                    res.append('.'.join(path))\n            else:\n                for i in range(1, 4):\n                    if i <= len(s):\n                        backtrack(s[i:], path + [s[:i]], res)\n        \n        res = []\n        backtrack(s, [], res)\n        return res"
    },
    {
        "number": 93,
        "title": "Restore IP Addresses",
        "difficulty": 1,
        "pass": 9,
        "answer": "        res = []\n        self.dfs(s, 0, \"\", res)\n        return res"
    },
    {
        "number": 94,
        "title": "Binary Tree Inorder Traversal",
        "difficulty": 0,
        "pass": 0,
        "answer": "        if not root:\n            return []\n        return self.inorderTraversal(root.left) + [root.val] + self.inorderTraversal(root.right)"
    },
    {
        "number": 94,
        "title": "Binary Tree Inorder Traversal",
        "difficulty": 0,
        "pass": 1,
        "answer": "        if not root:\n            return []\n        res = []\n        stack = []\n        while root or stack:\n            while root:\n                stack.append(root)\n                root = root.left\n            root = stack.pop()\n            res.append(root.val)\n            root = root.right\n        return res"
    },
    {
        "number": 94,
        "title": "Binary Tree Inorder Traversal",
        "difficulty": 0,
        "pass": 2,
        "answer": "        if not root:\n            return []\n        res = []\n        stack = []\n        node = root\n        while node or stack:\n            while node:\n                stack.append(node)\n                node = node.left\n            node = stack.pop()\n            res.append(node.val)\n            node = node.right\n        return res"
    },
    {
        "number": 94,
        "title": "Binary Tree Inorder Traversal",
        "difficulty": 0,
        "pass": 3,
        "answer": "        if not root:\n            return []\n        \n        stack = []\n        output = []\n        while True:\n            while root:\n                stack.append(root)\n                root = root.left\n            root = stack.pop()\n            output.append(root.val)\n            root = root.right\n            if not root:\n                break\n        return output"
    },
    {
        "number": 94,
        "title": "Binary Tree Inorder Traversal",
        "difficulty": 0,
        "pass": 4,
        "answer": "        if not root:\n            return []\n        stack = []\n        result = []\n        while True:\n            while root:\n                stack.append(root)\n                root = root.left\n            root = stack.pop()\n            result.append(root.val)\n            root = root.right\n            if not root:\n                break\n        return result"
    },
    {
        "number": 94,
        "title": "Binary Tree Inorder Traversal",
        "difficulty": 0,
        "pass": 5,
        "answer": "        if not root:\n            return []\n        stack = []\n        res = []\n        while root or stack:\n            while root:\n                stack.append(root)\n                root = root.left\n            root = stack.pop()\n            res.append(root.val)\n            root = root.right\n        return res"
    },
    {
        "number": 94,
        "title": "Binary Tree Inorder Traversal",
        "difficulty": 0,
        "pass": 6,
        "answer": "        if not root:\n            return []\n        stack = []\n        res = []\n        while True:\n            while root:\n                stack.append(root)\n                root = root.left\n            root = stack.pop()\n            res.append(root.val)\n            root = root.right\n            if not root:\n                break\n        return res"
    },
    {
        "number": 94,
        "title": "Binary Tree Inorder Traversal",
        "difficulty": 0,
        "pass": 7,
        "answer": "        if not root:\n            return []\n        stack = []\n        res = []\n        while root or stack:\n            while root:\n                stack.append(root)\n                root = root.left\n            root = stack.pop()\n            res.append(root.val)\n            root = root.right\n        return res"
    },
    {
        "number": 94,
        "title": "Binary Tree Inorder Traversal",
        "difficulty": 0,
        "pass": 8,
        "answer": "        if not root:\n            return []\n        stack = []\n        res = []\n        while True:\n            while root:\n                stack.append(root)\n                root = root.left\n            root = stack.pop()\n            res.append(root.val)\n            root = root.right\n            if not root:\n                break\n        return res"
    },
    {
        "number": 94,
        "title": "Binary Tree Inorder Traversal",
        "difficulty": 0,
        "pass": 9,
        "answer": "        if not root:\n            return []\n        res = []\n        stack = []\n        while root or stack:\n            while root:\n                stack.append(root)\n                root = root.left\n            root = stack.pop()\n            res.append(root.val)\n            root = root.right\n        return res"
    },
    {
        "number": 95,
        "title": "Unique Binary Search Trees II",
        "difficulty": 1,
        "pass": 0,
        "answer": "        if n == 0:\n            return []\n        if n == 1:\n            return [TreeNode(1)]\n        res = []\n        for i in range(1, n + 1):\n            left = self.generateTrees(i - 1)\n            right = self.generateTrees(n - i)\n            for l in left:\n                for r in right:\n                    root = TreeNode(i)\n                    root.left = l\n                    root.right = r\n                    res.append(root)\n        return res"
    },
    {
        "number": 95,
        "title": "Unique Binary Search Trees II",
        "difficulty": 1,
        "pass": 1,
        "answer": "        if n == 0:\n            return []\n        if n == 1:\n            return [TreeNode(1)]\n        res = []\n        for i in range(1, n + 1):\n            left = self.generateTrees(i - 1)\n            right = self.generateTrees(n - i)\n            for l in left:\n                for r in right:\n                    root = TreeNode(i)\n                    root.left = l\n                    root.right = r\n                    res.append(root)\n        return res"
    },
    {
        "number": 95,
        "title": "Unique Binary Search Trees II",
        "difficulty": 1,
        "pass": 2,
        "answer": "        if n == 0:\n            return []\n        if n == 1:\n            return [TreeNode(1)]\n        \n        ans = []\n        for i in range(1, n + 1):\n            left = self.generateTrees(i - 1)\n            right = self.generateTrees(n - i)\n            \n            for l in left:\n                for r in right:\n                    root = TreeNode(i)\n                    root.left = l\n                    root.right = r\n                    ans.append(root)\n        return ans"
    },
    {
        "number": 95,
        "title": "Unique Binary Search Trees II",
        "difficulty": 1,
        "pass": 3,
        "answer": "        if n == 0:\n            return []\n        if n == 1:\n            return [TreeNode(1)]\n        if n == 2:\n            return [TreeNode(1), TreeNode(2)]\n        res = []\n        for i in range(1, n+1):\n            left = self.generateTrees(i-1)\n            right = self.generateTrees(n-i)\n            for l in left:\n                for r in right:\n                    root = TreeNode(i)\n                    root.left = l\n                    root.right = r\n                    res.append(root)\n        return res"
    },
    {
        "number": 95,
        "title": "Unique Binary Search Trees II",
        "difficulty": 1,
        "pass": 4,
        "answer": "        if n == 0:\n            return []\n        \n        def dfs(start, end):\n            if start > end:\n                return [None]\n            \n            res = []\n            for i in range(start, end + 1):\n                left = dfs(start, i - 1)\n                right = dfs(i + 1, end)\n                for l in left:\n                    for r in right:\n                        root = TreeNode(i)\n                        root.left = l\n                        root.right = r\n                        res.append(root)\n            return res\n        \n        return dfs(1, n)\n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        "
    },
    {
        "number": 95,
        "title": "Unique Binary Search Trees II",
        "difficulty": 1,
        "pass": 5,
        "answer": "        if n == 0:\n            return []\n        if n == 1:\n            return [TreeNode(1)]\n        res = []\n        for i in range(1, n + 1):\n            left = self.generateTrees(i - 1)\n            right = self.generateTrees(n - i)\n            for l in left:\n                for r in right:\n                    root = TreeNode(i)\n                    root.left = l\n                    root.right = r\n                    res.append(root)\n        return res"
    },
    {
        "number": 95,
        "title": "Unique Binary Search Trees II",
        "difficulty": 1,
        "pass": 6,
        "answer": "        if n == 0:\n            return []\n        if n == 1:\n            return [TreeNode(1)]\n        if n == 2:\n            return [TreeNode(1, TreeNode(2)), TreeNode(2, TreeNode(1))]\n        \n        ans = []\n        for i in range(1, n+1):\n            left = self.generateTrees(i-1)\n            right = self.generateTrees(n-i)\n            for l in left:\n                for r in right:\n                    root = TreeNode(i)\n                    root.left = l\n                    root.right = r\n                    ans.append(root)\n        return ans\n        \nclass Solution:\n    def generateTrees(self, n: int) -> List[Optional[TreeNode]]:\n        \"\"\"\n        Given an integer n, return all the structurally unique BST's (binary search trees), which has exactly n nodes of unique values from 1 to n. Return the answer in any order.\n        Example 1:\n        Input: n = 3\n        Output: [[1,null,2"
    },
    {
        "number": 95,
        "title": "Unique Binary Search Trees II",
        "difficulty": 1,
        "pass": 7,
        "answer": "        if n == 0:\n            return []\n        if n == 1:\n            return [TreeNode(1)]\n        ans = []\n        for i in range(1, n + 1):\n            left = self.generateTrees(i - 1)\n            right = self.generateTrees(n - i)\n            for l in left:\n                for r in right:\n                    root = TreeNode(i)\n                    root.left = l\n                    root.right = r\n                    ans.append(root)\n        return ans"
    },
    {
        "number": 95,
        "title": "Unique Binary Search Trees II",
        "difficulty": 1,
        "pass": 8,
        "answer": "        if n == 0:\n            return []\n        if n == 1:\n            return [TreeNode(1)]\n        if n == 2:\n            return [TreeNode(1), TreeNode(2)]\n        res = []\n        for i in range(1, n + 1):\n            left = self.generateTrees(i - 1)\n            right = self.generateTrees(n - i)\n            for l in left:\n                for r in right:\n                    root = TreeNode(i)\n                    root.left = l\n                    root.right = r\n                    res.append(root)\n        return res"
    },
    {
        "number": 95,
        "title": "Unique Binary Search Trees II",
        "difficulty": 1,
        "pass": 9,
        "answer": "        if n == 0:\n            return []\n        if n == 1:\n            return [TreeNode(1)]\n        res = []\n        for i in range(1, n + 1):\n            left = self.generateTrees(i - 1)\n            right = self.generateTrees(n - i)\n            for l in left:\n                for r in right:\n                    root = TreeNode(i)\n                    root.left = l\n                    root.right = r\n                    res.append(root)\n        return res"
    },
    {
        "number": 96,
        "title": "Unique Binary Search Trees",
        "difficulty": 1,
        "pass": 0,
        "answer": "        dp = [0] * (n + 1)\n        dp[0] = 1\n        dp[1] = 1\n        dp[2] = 2\n        for i in range(3, n + 1):\n            for j in range(1, i + 1):\n                dp[i] += dp[j - 1] * dp[i - j]\n        return dp[n]"
    },
    {
        "number": 96,
        "title": "Unique Binary Search Trees",
        "difficulty": 1,
        "pass": 1,
        "answer": "        if n == 0:\n            return 0\n        if n == 1:\n            return 1\n        dp = [0] * (n + 1)\n        dp[0] = 1\n        dp[1] = 1\n        for i in range(2, n + 1):\n            for j in range(1, i + 1):\n                dp[i] += dp[j - 1] * dp[i - j]\n        return dp[-1]"
    },
    {
        "number": 96,
        "title": "Unique Binary Search Trees",
        "difficulty": 1,
        "pass": 2,
        "answer": "        if n == 0:\n            return 0\n        if n == 1:\n            return 1\n        dp = [0] * (n + 1)\n        dp[0] = 1\n        dp[1] = 1\n        for i in range(2, n + 1):\n            for j in range(1, i + 1):\n                dp[i] += dp[j - 1] * dp[i - j]\n        return dp[n]"
    },
    {
        "number": 96,
        "title": "Unique Binary Search Trees",
        "difficulty": 1,
        "pass": 3,
        "answer": "        if n == 0:\n            return 0\n        if n == 1:\n            return 1\n        dp = [0] * (n + 1)\n        dp[0] = 1\n        dp[1] = 1\n        for i in range(2, n + 1):\n            for j in range(1, i + 1):\n                dp[i] += dp[j - 1] * dp[i - j]\n        return dp[-1]"
    },
    {
        "number": 96,
        "title": "Unique Binary Search Trees",
        "difficulty": 1,
        "pass": 4,
        "answer": "        if n == 0:\n            return 0\n        dp = [0] * (n + 1)\n        dp[0] = 1\n        dp[1] = 1\n        for i in range(2, n + 1):\n            for j in range(1, i + 1):\n                dp[i] += dp[j - 1] * dp[i - j]\n        return dp[-1]"
    },
    {
        "number": 96,
        "title": "Unique Binary Search Trees",
        "difficulty": 1,
        "pass": 5,
        "answer": "        if n == 0:\n            return 0\n        if n == 1:\n            return 1\n        dp = [0] * (n + 1)\n        dp[0] = 1\n        dp[1] = 1\n        dp[2] = 2\n        for i in range(3, n + 1):\n            for j in range(1, i + 1):\n                dp[i] += dp[j - 1] * dp[i - j]\n        return dp[n]"
    },
    {
        "number": 96,
        "title": "Unique Binary Search Trees",
        "difficulty": 1,
        "pass": 6,
        "answer": "        dp = [0] * (n + 1)\n        dp[0] = 1\n        dp[1] = 1\n        dp[2] = 2\n        for i in range(3, n + 1):\n            for j in range(1, i + 1):\n                dp[i] += dp[j - 1] * dp[i - j]\n        return dp[-1]"
    },
    {
        "number": 96,
        "title": "Unique Binary Search Trees",
        "difficulty": 1,
        "pass": 7,
        "answer": "        if n == 0:\n            return 0\n        if n == 1:\n            return 1\n        dp = [0] * (n + 1)\n        dp[0] = 1\n        dp[1] = 1\n        dp[2] = 2\n        for i in range(3, n + 1):\n            for j in range(1, i + 1):\n                dp[i] += dp[j - 1] * dp[i - j]\n        return dp[n]"
    },
    {
        "number": 96,
        "title": "Unique Binary Search Trees",
        "difficulty": 1,
        "pass": 8,
        "answer": "        if n == 0:\n            return 0\n        if n == 1:\n            return 1\n        dp = [0] * (n + 1)\n        dp[0] = 1\n        dp[1] = 1\n        for i in range(2, n + 1):\n            for j in range(1, i + 1):\n                dp[i] += dp[j - 1] * dp[i - j]\n        return dp[-1]"
    },
    {
        "number": 96,
        "title": "Unique Binary Search Trees",
        "difficulty": 1,
        "pass": 9,
        "answer": "        if n == 0:\n            return 0\n        if n == 1:\n            return 1\n        if n == 2:\n            return 2\n        dp = [0] * (n + 1)\n        dp[0] = 1\n        dp[1] = 1\n        dp[2] = 2\n        for i in range(3, n + 1):\n            for j in range(1, i + 1):\n                dp[i] += dp[j - 1] * dp[i - j]\n        return dp[-1]"
    },
    {
        "number": 97,
        "title": "Interleaving String",
        "difficulty": 1,
        "pass": 0,
        "answer": "        if len(s1) + len(s2)!= len(s3):\n            return False\n        if len(s1) == 0 and len(s2) == 0 and len(s3) == 0:\n            return True\n        if len(s1) == 0 and len(s2)!= 0 and len(s3) == 0:\n            return False\n        if len(s1)!= 0 and len(s2) == 0 and len(s3)!= 0:\n            return False\n        if len(s1) == 0 and len(s2) == 0 and len(s3) == 0:\n            return True\n        if len(s1) == 0 and len(s2)!= 0 and len(s3)!= 0:\n            return False\n        if len(s1)!= 0 and len(s2) == 0 and len(s3)!= 0:\n            return False\n        if len(s1)!= 0 and len(s2)!= 0 and len(s3) == 0:\n            return False\n        if len(s1)!= 0"
    },
    {
        "number": 97,
        "title": "Interleaving String",
        "difficulty": 1,
        "pass": 1,
        "answer": "        if len(s1) + len(s2)!= len(s3):\n            return False\n        if len(s1) == 0 and len(s2) == 0 and len(s3) == 0:\n            return True\n        if len(s1) == 0 or len(s2) == 0 or len(s3) == 0:\n            return False\n        dp = [[False for _ in range(len(s2) + 1)] for _ in range(len(s1) + 1)]\n        dp[0][0] = True\n        for i in range(1, len(s1) + 1):\n            dp[i][0] = dp[i - 1][0] and s1[i - 1] == s3[i - 1]\n        for j in range(1, len(s2) + 1):\n            dp[0][j] = dp[0][j - 1] and s2[j - 1] == s3[j - 1]\n        for i in range(1, len(s1) + 1):\n            for j"
    },
    {
        "number": 97,
        "title": "Interleaving String",
        "difficulty": 1,
        "pass": 2,
        "answer": "        if not s1 and not s2 and not s3:\n            return True\n        if not s1 or not s2 or not s3:\n            return False\n        if len(s1) + len(s2)!= len(s3):\n            return False\n        dp = [[False] * (len(s2) + 1) for _ in range(len(s1) + 1)]\n        dp[0][0] = True\n        for i in range(1, len(s1) + 1):\n            dp[i][0] = dp[i - 1][0] and s1[i - 1] == s3[i - 1]\n        for j in range(1, len(s2) + 1):\n            dp[0][j] = dp[0][j - 1] and s2[j - 1] == s3[j - 1]\n        for i in range(1, len(s1) + 1):\n            for j in range(1, len(s2) + 1):\n                dp[i][j] = (dp[i"
    },
    {
        "number": 97,
        "title": "Interleaving String",
        "difficulty": 1,
        "pass": 3,
        "answer": "        if not s1 and not s2 and not s3:\n            return True\n        if not s1 or not s2 or not s3:\n            return False\n        if len(s1) + len(s2)!= len(s3):\n            return False\n        dp = [[False] * (len(s2) + 1) for _ in range(len(s1) + 1)]\n        dp[0][0] = True\n        for i in range(1, len(s1) + 1):\n            dp[i][0] = dp[i - 1][0] and s1[i - 1] == s3[i - 1]\n        for j in range(1, len(s2) + 1):\n            dp[0][j] = dp[0][j - 1] and s2[j - 1] == s3[j - 1]\n        for i in range(1, len(s1) + 1):\n            for j in range(1, len(s2) + 1):\n                dp[i][j] = (dp[i"
    },
    {
        "number": 97,
        "title": "Interleaving String",
        "difficulty": 1,
        "pass": 4,
        "answer": "        if len(s1) + len(s2)!= len(s3):\n            return False\n        if len(s1) == 0 and len(s2) == 0 and len(s3) == 0:\n            return True\n        if len(s1) == 0 or len(s2) == 0 or len(s3) == 0:\n            return False\n        dp = [[False for _ in range(len(s2) + 1)] for _ in range(len(s1) + 1)]\n        dp[0][0] = True\n        for i in range(1, len(s1) + 1):\n            dp[i][0] = dp[i - 1][0] and s1[i - 1] == s3[i - 1]\n        for j in range(1, len(s2) + 1):\n            dp[0][j] = dp[0][j - 1] and s2[j - 1] == s3[j - 1]\n        for i in range(1, len(s1) + 1):\n            for j"
    },
    {
        "number": 97,
        "title": "Interleaving String",
        "difficulty": 1,
        "pass": 5,
        "answer": "        if len(s1) + len(s2)!= len(s3):\n            return False\n        if len(s1) == 0 and len(s2) == 0 and len(s3) == 0:\n            return True\n        if len(s1) == 0:\n            return s2 == s3\n        if len(s2) == 0:\n            return s1 == s3\n        if s1[0] == s3[0]:\n            return self.isInterleave(s1[1:], s2, s3[1:]) or self.isInterleave(s1, s2[1:], s3[1:])\n        if s2[0] == s3[0]:\n            return self.isInterleave(s1, s2[1:], s3[1:]) or self.isInterleave(s1[1:], s2, s3[1:])\n        return False"
    },
    {
        "number": 97,
        "title": "Interleaving String",
        "difficulty": 1,
        "pass": 6,
        "answer": "        if not s1 and not s2 and not s3:\n            return True\n        if not s1 or not s2 or not s3:\n            return False\n        if len(s1) + len(s2)!= len(s3):\n            return False\n        dp = [[False] * (len(s2) + 1) for _ in range(len(s1) + 1)]\n        dp[0][0] = True\n        for i in range(1, len(s1) + 1):\n            dp[i][0] = dp[i - 1][0] and s1[i - 1] == s3[i - 1]\n        for j in range(1, len(s2) + 1):\n            dp[0][j] = dp[0][j - 1] and s2[j - 1] == s3[j - 1]\n        for i in range(1, len(s1) + 1):\n            for j in range(1, len(s2) + 1):\n                dp[i][j] = (dp[i"
    },
    {
        "number": 97,
        "title": "Interleaving String",
        "difficulty": 1,
        "pass": 7,
        "answer": "        if not s1 and not s2 and not s3:\n            return True\n        if not s1 or not s2 or not s3:\n            return False\n        if len(s1) + len(s2)!= len(s3):\n            return False\n        dp = [[False] * (len(s2) + 1) for _ in range(len(s1) + 1)]\n        dp[0][0] = True\n        for i in range(1, len(s1) + 1):\n            dp[i][0] = dp[i - 1][0] and s1[i - 1] == s3[i - 1]\n        for j in range(1, len(s2) + 1):\n            dp[0][j] = dp[0][j - 1] and s2[j - 1] == s3[j - 1]\n        for i in range(1, len(s1) + 1):\n            for j in range(1, len(s2) + 1):\n                dp[i][j] = (dp[i"
    },
    {
        "number": 97,
        "title": "Interleaving String",
        "difficulty": 1,
        "pass": 8,
        "answer": "        m, n = len(s1), len(s2)\n        if m + n!= len(s3):\n            return False"
    },
    {
        "number": 97,
        "title": "Interleaving String",
        "difficulty": 1,
        "pass": 9,
        "answer": "        if len(s1) + len(s2)!= len(s3):\n            return False\n        if len(s1) == 0 and len(s2) == 0 and len(s3) == 0:\n            return True\n        if len(s1) == 0 and len(s2)!= 0 and len(s3) == 0:\n            return False\n        if len(s1)!= 0 and len(s2) == 0 and len(s3)!= 0:\n            return False\n        if len(s1)!= 0 and len(s2)!= 0 and len(s3) == 0:\n            return False\n        if len(s1) == 0 and len(s2) == 0 and len(s3)!= 0:\n            return False\n        if len(s1)!= 0 and len(s2)!= 0 and len(s3) == 0:\n            return False\n        if len(s1) == 0 and len(s2) == 0 and len(s3) == 0:\n            return True\n        if len(s1)!= 0"
    },
    {
        "number": 98,
        "title": "Validate Binary Search Tree",
        "difficulty": 1,
        "pass": 0,
        "answer": "        if not root:\n            return True\n        stack = [(root, float('-inf'), float('inf'))]\n        while stack:\n            node, lower_bound, upper_bound = stack.pop()\n            if node.val <= lower_bound or node.val >= upper_bound:\n                return False\n            if node.left:\n                stack.append((node.left, lower_bound, node.val))\n            if node.right:\n                stack.append((node.right, node.val, upper_bound))\n        return True"
    },
    {
        "number": 98,
        "title": "Validate Binary Search Tree",
        "difficulty": 1,
        "pass": 1,
        "answer": "        if not root:\n            return True\n        stack = [(root, float('-inf'), float('inf'))]\n        while stack:\n            node, lower_bound, upper_bound = stack.pop()\n            if node.val <= lower_bound or node.val >= upper_bound:\n                return False\n            if node.left:\n                stack.append((node.left, lower_bound, node.val))\n            if node.right:\n                stack.append((node.right, node.val, upper_bound))\n        return True"
    },
    {
        "number": 98,
        "title": "Validate Binary Search Tree",
        "difficulty": 1,
        "pass": 2,
        "answer": "        if not root:\n            return True\n        \n        def helper(node, lower=float('-inf'), upper=float('inf')):\n            if not node:\n                return True\n            if node.val <= lower or node.val >= upper:\n                return False\n            \n            if not helper(node.left, lower, node.val):\n                return False\n            if not helper(node.right, node.val, upper):\n                return False\n            \n            return True\n        \n        return helper(root)"
    },
    {
        "number": 98,
        "title": "Validate Binary Search Tree",
        "difficulty": 1,
        "pass": 3,
        "answer": "        if not root:\n            return True\n        stack = [(root, float('-inf'), float('inf'))]\n        while stack:\n            node, lower, upper = stack.pop()\n            if node.val <= lower or node.val >= upper:\n                return False\n            if node.left:\n                stack.append((node.left, lower, node.val))\n            if node.right:\n                stack.append((node.right, node.val, upper))\n        return True"
    },
    {
        "number": 98,
        "title": "Validate Binary Search Tree",
        "difficulty": 1,
        "pass": 4,
        "answer": "        if not root:\n            return True\n        stack = [(root, float('-inf'), float('inf'))]\n        while stack:\n            node, lower_bound, upper_bound = stack.pop()\n            if node.val <= lower_bound or node.val >= upper_bound:\n                return False\n            if node.left:\n                stack.append((node.left, lower_bound, node.val))\n            if node.right:\n                stack.append((node.right, node.val, upper_bound))\n        return True"
    },
    {
        "number": 98,
        "title": "Validate Binary Search Tree",
        "difficulty": 1,
        "pass": 5,
        "answer": "        if not root:\n            return True\n        stack = []\n        prev = float('-inf')\n        while stack or root:\n            while root:\n                stack.append(root)\n                root = root.left\n            root = stack.pop()\n            if root.val <= prev:\n                return False\n            prev = root.val\n            root = root.right\n        return True"
    },
    {
        "number": 98,
        "title": "Validate Binary Search Tree",
        "difficulty": 1,
        "pass": 6,
        "answer": "        if not root:\n            return True\n        stack = [(root, float('-inf'), float('inf'))]\n        while stack:\n            node, lower_bound, upper_bound = stack.pop()\n            if node.val <= lower_bound or node.val >= upper_bound:\n                return False\n            if node.left:\n                stack.append((node.left, lower_bound, node.val))\n            if node.right:\n                stack.append((node.right, node.val, upper_bound))\n        return True"
    },
    {
        "number": 98,
        "title": "Validate Binary Search Tree",
        "difficulty": 1,
        "pass": 7,
        "answer": "        if not root:\n            return True\n        \n        stack = [(root, float('-inf'), float('inf'))]\n        while stack:\n            node, lower_bound, upper_bound = stack.pop()\n            if node:\n                if node.val <= lower_bound or node.val >= upper_bound:\n                    return False\n                stack.append((node.left, lower_bound, node.val))\n                stack.append((node.right, node.val, upper_bound))\n        return True"
    },
    {
        "number": 98,
        "title": "Validate Binary Search Tree",
        "difficulty": 1,
        "pass": 8,
        "answer": "        if not root:\n            return True\n        stack = [(root, float('-inf'), float('inf'))]\n        while stack:\n            node, lower_bound, upper_bound = stack.pop()\n            if node.val <= lower_bound or node.val >= upper_bound:\n                return False\n            if node.left:\n                stack.append((node.left, lower_bound, node.val))\n            if node.right:\n                stack.append((node.right, node.val, upper_bound))\n        return True"
    },
    {
        "number": 98,
        "title": "Validate Binary Search Tree",
        "difficulty": 1,
        "pass": 9,
        "answer": "        if not root:\n            return True\n        stack = [(root, float('-inf'), float('inf'))]\n        while stack:\n            node, lower_bound, upper_bound = stack.pop()\n            if node.val <= lower_bound or node.val >= upper_bound:\n                return False\n            if node.left:\n                stack.append((node.left, lower_bound, node.val))\n            if node.right:\n                stack.append((node.right, node.val, upper_bound))\n        return True"
    },
    {
        "number": 99,
        "title": "Recover Binary Search Tree",
        "difficulty": 1,
        "pass": 0,
        "answer": "        def inorder(node):\n            if node:\n                inorder(node.left)\n                self.swap(node)\n                inorder(node.right)\n        \n        def swap(node):\n            temp = node.val\n            node.val = node.right.val\n            node.right.val = temp\n        \n        inorder(root)"
    },
    {
        "number": 99,
        "title": "Recover Binary Search Tree",
        "difficulty": 1,
        "pass": 1,
        "answer": "        if not root:\n            return root\n        \n        def inorder(node):\n            if not node:\n                return\n            inorder(node.left)\n            self.swap(node)\n            inorder(node.right)\n        \n        def swap(node):\n            if not node.left and not node.right:\n                return\n            if not node.left:\n                node.val, node.right.val = node.right.val, node.val\n            elif not node.right:\n                node.val, node.left.val = node.left.val, node.val\n            else:\n                swap(node.left)\n                swap(node.right)\n                if node.left.val > node.right.val:\n                    node.val, node.right.val = node.right.val, node.val\n                elif node.left.val < node.right.val:\n                    node.val, node.left.val = node.left.val, node.val\n        \n        inorder(root)"
    },
    {
        "number": 99,
        "title": "Recover Binary Search Tree",
        "difficulty": 1,
        "pass": 2,
        "answer": "        def inorder(root):\n            if not root:\n                return\n            inorder(root.left)\n            if self.prev and self.prev.val > root.val:\n                self.swap(self.prev, root)\n            self.prev = root\n            inorder(root.right)\n        self.prev = None\n        inorder(root)"
    },
    {
        "number": 99,
        "title": "Recover Binary Search Tree",
        "difficulty": 1,
        "pass": 3,
        "answer": "        def dfs(node):\n            if not node:\n                return\n            dfs(node.left)\n            if self.prev and self.prev.val > node.val:\n                self.swap(self.prev, node)\n            self.prev = node\n            dfs(node.right)"
    },
    {
        "number": 99,
        "title": "Recover Binary Search Tree",
        "difficulty": 1,
        "pass": 4,
        "answer": "        def inorder(node):\n            if node:\n                inorder(node.left)\n                self.swap(node)\n                inorder(node.right)\n        \n        def swap(node):\n            if node.left and node.left.val > node.val:\n                node.val, node.left.val = node.left.val, node.val\n            if node.right and node.right.val < node.val:\n                node.val, node.right.val = node.right.val, node.val\n        \n        inorder(root)"
    },
    {
        "number": 99,
        "title": "Recover Binary Search Tree",
        "difficulty": 1,
        "pass": 5,
        "answer": "        def dfs(node):\n            if not node:\n                return\n            dfs(node.left)\n            if self.prev and self.prev.val > node.val:\n                self.swap(self.prev, node)\n            self.prev = node\n            dfs(node.right)"
    },
    {
        "number": 99,
        "title": "Recover Binary Search Tree",
        "difficulty": 1,
        "pass": 6,
        "answer": "        \n        # Solution 1\n        # Time: O(n)\n        # Space: O(n)\n        \n        # Solution 2\n        # Time: O(n)\n        # Space: O(1)\n        \n        # Solution 3\n        # Time: O(n)\n        # Space: O(1)\n        \n        # Solution 4\n        # Time: O(n)\n        # Space: O(1)\n        \n        # Solution 5\n        # Time: O(n)\n        # Space: O(1)\n        \n        # Solution 6\n        # Time: O(n)\n        # Space: O(1)\n        \n        # Solution 7\n        # Time: O(n)\n        # Space: O(1)\n        \n        # Solution 8\n        # Time: O(n)\n        # Space: O(1)\n        \n        # Solution 9\n        # Time: O(n)\n        # Space: O(1)\n        \n        # Solution 10\n        # Time: O(n)\n        # Space: O(1)\n"
    },
    {
        "number": 99,
        "title": "Recover Binary Search Tree",
        "difficulty": 1,
        "pass": 7,
        "answer": "        \n        def inorder(root):\n            if not root:\n                return\n            inorder(root.left)\n            if self.prev and self.prev.val > root.val:\n                self.swap(self.prev, root)\n            self.prev = root\n            inorder(root.right)\n        \n        self.prev = None\n        inorder(root)\n        \n    def swap(self, node1, node2):\n        node1.val, node2.val = node2.val, node1.val\n        "
    },
    {
        "number": 99,
        "title": "Recover Binary Search Tree",
        "difficulty": 1,
        "pass": 8,
        "answer": "        \n        def inorder(node):\n            if node:\n                inorder(node.left)\n                self.swap(node)\n                inorder(node.right)\n        \n        def swap(node):\n            if node.left and node.left.val > node.val:\n                node.val, node.left.val = node.left.val, node.val\n            if node.right and node.right.val < node.val:\n                node.val, node.right.val = node.right.val, node.val\n        \n        inorder(root)\n        \nclass Solution:\n    def recoverTree(self, root: Optional[TreeNode]) -> None:\n        \"\"\"\n        Do not return anything, modify root in-place instead.\n        You are given the root of a binary search tree (BST), where exactly two nodes of the tree were swapped by mistake. Recover the tree without changing its structure.\n        Example 1:\n        Input: root = [1,3,null,null,2]\n        Output: [3,1,null,null,2]\n"
    },
    {
        "number": 99,
        "title": "Recover Binary Search Tree",
        "difficulty": 1,
        "pass": 9,
        "answer": "        if not root:\n            return root\n        \n        def inorder(node):\n            if not node:\n                return\n            \n            inorder(node.left)\n            self.swap(node)\n            inorder(node.right)\n        \n        def swap(node):\n            if not node.left and not node.right:\n                return\n            \n            if not node.left:\n                node.val, node.right.val = node.right.val, node.val\n                return\n            \n            if not node.right:\n                node.val, node.left.val = node.left.val, node.val\n                return\n            \n            if node.left.val > node.right.val:\n                node.val, node.right.val = node.right.val, node.val\n            elif node.left.val < node.right.val:\n                node.val, node.left.val = node.left.val, node.val\n            \n            swap(node.left)\n            swap(node.right)\n        \n        in"
    },
    {
        "number": 100,
        "title": "Same Tree",
        "difficulty": 0,
        "pass": 0,
        "answer": "        if not p and not q:\n            return True\n        if not p or not q:\n            return False\n        if p.val!= q.val:\n            return False\n        return self.isSameTree(p.left, q.left) and self.isSameTree(p.right, q.right)"
    },
    {
        "number": 100,
        "title": "Same Tree",
        "difficulty": 0,
        "pass": 1,
        "answer": "        if not p and not q:\n            return True\n        if not p or not q:\n            return False\n        if p.val!= q.val:\n            return False\n        return self.isSameTree(p.left, q.left) and self.isSameTree(p.right, q.right)"
    },
    {
        "number": 100,
        "title": "Same Tree",
        "difficulty": 0,
        "pass": 2,
        "answer": "        if not p and not q:\n            return True\n        if not p or not q:\n            return False\n        if p.val!= q.val:\n            return False\n        return self.isSameTree(p.left, q.left) and self.isSameTree(p.right, q.right)"
    },
    {
        "number": 100,
        "title": "Same Tree",
        "difficulty": 0,
        "pass": 3,
        "answer": "        if not p and not q:\n            return True\n        if not p or not q:\n            return False\n        if p.val!= q.val:\n            return False\n        return self.isSameTree(p.left, q.left) and self.isSameTree(p.right, q.right)"
    },
    {
        "number": 100,
        "title": "Same Tree",
        "difficulty": 0,
        "pass": 4,
        "answer": "        if not p and not q:\n            return True\n        if not p or not q:\n            return False\n        if p.val!= q.val:\n            return False\n        return self.isSameTree(p.left, q.left) and self.isSameTree(p.right, q.right)"
    },
    {
        "number": 100,
        "title": "Same Tree",
        "difficulty": 0,
        "pass": 5,
        "answer": "        if not p and not q:\n            return True\n        if not p or not q:\n            return False\n        if p.val!= q.val:\n            return False\n        return self.isSameTree(p.left, q.left) and self.isSameTree(p.right, q.right)"
    },
    {
        "number": 100,
        "title": "Same Tree",
        "difficulty": 0,
        "pass": 6,
        "answer": "        if not p and not q:\n            return True\n        if not p or not q:\n            return False\n        if p.val!= q.val:\n            return False\n        return self.isSameTree(p.left, q.left) and self.isSameTree(p.right, q.right)"
    },
    {
        "number": 100,
        "title": "Same Tree",
        "difficulty": 0,
        "pass": 7,
        "answer": "        if not p and not q:\n            return True\n        if not p or not q:\n            return False\n        if p.val!= q.val:\n            return False\n        return self.isSameTree(p.left, q.left) and self.isSameTree(p.right, q.right)"
    },
    {
        "number": 100,
        "title": "Same Tree",
        "difficulty": 0,
        "pass": 8,
        "answer": "        if not p and not q:\n            return True\n        if not p or not q:\n            return False\n        if p.val!= q.val:\n            return False\n        return self.isSameTree(p.left, q.left) and self.isSameTree(p.right, q.right)"
    },
    {
        "number": 100,
        "title": "Same Tree",
        "difficulty": 0,
        "pass": 9,
        "answer": "        if not p and not q:\n            return True\n        if not p or not q:\n            return False\n        if p.val!= q.val:\n            return False\n        return self.isSameTree(p.left, q.left) and self.isSameTree(p.right, q.right)"
    },
    {
        "number": 101,
        "title": "Symmetric Tree",
        "difficulty": 0,
        "pass": 0,
        "answer": "        if not root:\n            return True\n        \n        def isMirror(node1, node2):\n            if not node1 and not node2:\n                return True\n            if not node1 or not node2:\n                return False\n            if node1.val!= node2.val:\n                return False\n            return isMirror(node1.left, node2.right) and isMirror(node1.right, node2.left)\n        \n        return isMirror(root.left, root.right)"
    },
    {
        "number": 101,
        "title": "Symmetric Tree",
        "difficulty": 0,
        "pass": 1,
        "answer": "        if not root:\n            return True\n        return self.helper(root.left, root.right)"
    },
    {
        "number": 101,
        "title": "Symmetric Tree",
        "difficulty": 0,
        "pass": 2,
        "answer": "        if not root:\n            return True\n        return self.isMirror(root.left, root.right)"
    },
    {
        "number": 101,
        "title": "Symmetric Tree",
        "difficulty": 0,
        "pass": 3,
        "answer": "        if not root:\n            return True\n        \n        def isMirror(left, right):\n            if not left and not right:\n                return True\n            if not left or not right:\n                return False\n            if left.val == right.val:\n                return isMirror(left.left, right.right) and isMirror(left.right, right.left)\n            else:\n                return False\n        \n        return isMirror(root.left, root.right)\n        \n        \nclass Solution:\n    def isSymmetric(self, root: Optional[TreeNode]) -> bool:\n        \"\"\"\n        Given the root of a binary tree, check whether it is a mirror of itself (i.e., symmetric around its center).\n        Example 1:\n        Input: root = [1,2,2,3,4,4,3]\n        Output: true\n        Example 2:\n        Input: root = [1,2,2,null,3,null,3]\n        Output: false\n        \"\"\"\n        if not root:\n            return True\n        \n"
    },
    {
        "number": 101,
        "title": "Symmetric Tree",
        "difficulty": 0,
        "pass": 4,
        "answer": "        if not root:\n            return True\n        return self.isMirror(root.left, root.right)"
    },
    {
        "number": 101,
        "title": "Symmetric Tree",
        "difficulty": 0,
        "pass": 5,
        "answer": "        if not root:\n            return True\n        return self.isMirror(root.left, root.right)"
    },
    {
        "number": 101,
        "title": "Symmetric Tree",
        "difficulty": 0,
        "pass": 6,
        "answer": "        if not root:\n            return True\n        return self.isMirror(root.left, root.right)"
    },
    {
        "number": 101,
        "title": "Symmetric Tree",
        "difficulty": 0,
        "pass": 7,
        "answer": "        if not root:\n            return True\n        return self.isMirror(root.left, root.right)"
    },
    {
        "number": 101,
        "title": "Symmetric Tree",
        "difficulty": 0,
        "pass": 8,
        "answer": "        if not root:\n            return True\n        return self.isMirror(root.left, root.right)"
    },
    {
        "number": 101,
        "title": "Symmetric Tree",
        "difficulty": 0,
        "pass": 9,
        "answer": "        if not root:\n            return True\n        return self.isMirror(root.left, root.right)"
    },
    {
        "number": 102,
        "title": "Binary Tree Level Order Traversal",
        "difficulty": 1,
        "pass": 0,
        "answer": "        if not root:\n            return []\n        res = []\n        q = deque()\n        q.append(root)\n        while q:\n            level = []\n            for _ in range(len(q)):\n                node = q.popleft()\n                level.append(node.val)\n                if node.left:\n                    q.append(node.left)\n                if node.right:\n                    q.append(node.right)\n            res.append(level)\n        return res"
    },
    {
        "number": 102,
        "title": "Binary Tree Level Order Traversal",
        "difficulty": 1,
        "pass": 1,
        "answer": "        if not root:\n            return []\n        res = []\n        q = deque()\n        q.append(root)\n        while q:\n            level = []\n            for i in range(len(q)):\n                node = q.popleft()\n                level.append(node.val)\n                if node.left:\n                    q.append(node.left)\n                if node.right:\n                    q.append(node.right)\n            res.append(level)\n        return res"
    },
    {
        "number": 102,
        "title": "Binary Tree Level Order Traversal",
        "difficulty": 1,
        "pass": 2,
        "answer": "        if not root:\n            return []\n        res = []\n        queue = deque()\n        queue.append(root)\n        while queue:\n            level = []\n            for _ in range(len(queue)):\n                node = queue.popleft()\n                level.append(node.val)\n                if node.left:\n                    queue.append(node.left)\n                if node.right:\n                    queue.append(node.right)\n            res.append(level)\n        return res"
    },
    {
        "number": 102,
        "title": "Binary Tree Level Order Traversal",
        "difficulty": 1,
        "pass": 3,
        "answer": "        if not root:\n            return []\n        res = []\n        queue = deque()\n        queue.append(root)\n        while queue:\n            level = []\n            for _ in range(len(queue)):\n                node = queue.popleft()\n                level.append(node.val)\n                if node.left:\n                    queue.append(node.left)\n                if node.right:\n                    queue.append(node.right)\n            res.append(level)\n        return res"
    },
    {
        "number": 102,
        "title": "Binary Tree Level Order Traversal",
        "difficulty": 1,
        "pass": 4,
        "answer": "        if not root:\n            return []\n        res = []\n        q = deque()\n        q.append(root)\n        while q:\n            size = len(q)\n            level = []\n            for _ in range(size):\n                node = q.popleft()\n                level.append(node.val)\n                if node.left:\n                    q.append(node.left)\n                if node.right:\n                    q.append(node.right)\n            res.append(level)\n        return res"
    },
    {
        "number": 102,
        "title": "Binary Tree Level Order Traversal",
        "difficulty": 1,
        "pass": 5,
        "answer": "        if not root:\n            return []\n        res = []\n        q = collections.deque()\n        q.append(root)\n        while q:\n            size = len(q)\n            level = []\n            for _ in range(size):\n                node = q.popleft()\n                level.append(node.val)\n                if node.left:\n                    q.append(node.left)\n                if node.right:\n                    q.append(node.right)\n            res.append(level)\n        return res\n"
    },
    {
        "number": 102,
        "title": "Binary Tree Level Order Traversal",
        "difficulty": 1,
        "pass": 6,
        "answer": "        if not root:\n            return []\n        res = []\n        queue = deque()\n        queue.append(root)\n        while queue:\n            level = []\n            for _ in range(len(queue)):\n                node = queue.popleft()\n                level.append(node.val)\n                if node.left:\n                    queue.append(node.left)\n                if node.right:\n                    queue.append(node.right)\n            res.append(level)\n        return res"
    },
    {
        "number": 102,
        "title": "Binary Tree Level Order Traversal",
        "difficulty": 1,
        "pass": 7,
        "answer": "        if not root:\n            return []\n        res = []\n        q = deque()\n        q.append(root)\n        while q:\n            size = len(q)\n            level = []\n            for _ in range(size):\n                node = q.popleft()\n                level.append(node.val)\n                if node.left:\n                    q.append(node.left)\n                if node.right:\n                    q.append(node.right)\n            res.append(level)\n        return res"
    },
    {
        "number": 102,
        "title": "Binary Tree Level Order Traversal",
        "difficulty": 1,
        "pass": 8,
        "answer": "        if not root:\n            return []\n        res = []\n        q = deque()\n        q.append(root)\n        while q:\n            size = len(q)\n            level = []\n            for i in range(size):\n                node = q.popleft()\n                level.append(node.val)\n                if node.left:\n                    q.append(node.left)\n                if node.right:\n                    q.append(node.right)\n            res.append(level)\n        return res"
    },
    {
        "number": 102,
        "title": "Binary Tree Level Order Traversal",
        "difficulty": 1,
        "pass": 9,
        "answer": "        if not root:\n            return []\n        queue = deque([root])\n        res = []\n        while queue:\n            level = []\n            for i in range(len(queue)):\n                node = queue.popleft()\n                level.append(node.val)\n                if node.left:\n                    queue.append(node.left)\n                if node.right:\n                    queue.append(node.right)\n            res.append(level)\n        return res"
    },
    {
        "number": 103,
        "title": "Binary Tree Zigzag Level Order Traversal",
        "difficulty": 1,
        "pass": 0,
        "answer": "        if not root:\n            return []\n        res = []\n        q = deque()\n        q.append(root)\n        level = 0\n        while q:\n            size = len(q)\n            temp = []\n            for i in range(size):\n                node = q.popleft()\n                temp.append(node.val)\n                if node.left:\n                    q.append(node.left)\n                if node.right:\n                    q.append(node.right)\n            if level % 2 == 0:\n                res.append(temp)\n            else:\n                res.append(temp[::-1])\n            level += 1\n        return res"
    },
    {
        "number": 103,
        "title": "Binary Tree Zigzag Level Order Traversal",
        "difficulty": 1,
        "pass": 1,
        "answer": "        if not root:\n            return []\n        \n        res = []\n        stack = [(root, 0)]\n        while stack:\n            node, level = stack.pop()\n            if node:\n                if len(res) < level + 1:\n                    res.append([node.val])\n                else:\n                    res[level].append(node.val)\n                stack.append((node.right, level + 1))\n                stack.append((node.left, level + 1))\n        return res\n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n"
    },
    {
        "number": 103,
        "title": "Binary Tree Zigzag Level Order Traversal",
        "difficulty": 1,
        "pass": 2,
        "answer": "        if not root:\n            return []\n        res = []\n        q = deque()\n        q.append((root, 0))\n        while q:\n            node, level = q.popleft()\n            if len(res) < level + 1:\n                res.append([])\n            if level % 2 == 0:\n                res[level].append(node.val)\n            else:\n                res[level].insert(0, node.val)\n            if node.left:\n                q.append((node.left, level + 1))\n            if node.right:\n                q.append((node.right, level + 1))\n        return res"
    },
    {
        "number": 103,
        "title": "Binary Tree Zigzag Level Order Traversal",
        "difficulty": 1,
        "pass": 3,
        "answer": "        if not root:\n            return []\n        q = collections.deque()\n        q.append(root)\n        res = []\n        while q:\n            level = []\n            for _ in range(len(q)):\n                node = q.popleft()\n                level.append(node.val)\n                if node.left:\n                    q.append(node.left)\n                if node.right:\n                    q.append(node.right)\n            res.append(level)\n        return res[::-1]"
    },
    {
        "number": 103,
        "title": "Binary Tree Zigzag Level Order Traversal",
        "difficulty": 1,
        "pass": 4,
        "answer": "        if not root:\n            return []\n        \n        res = []\n        q = deque()\n        q.append(root)\n        \n        while q:\n            size = len(q)\n            level = []\n            for _ in range(size):\n                node = q.popleft()\n                level.append(node.val)\n                if node.left:\n                    q.append(node.left)\n                if node.right:\n                    q.append(node.right)\n            if level:\n                res.append(level)\n        \n        return res"
    },
    {
        "number": 103,
        "title": "Binary Tree Zigzag Level Order Traversal",
        "difficulty": 1,
        "pass": 5,
        "answer": "        if not root:\n            return []\n        \n        res = []\n        q = deque()\n        q.append(root)\n        \n        while q:\n            size = len(q)\n            level = []\n            for _ in range(size):\n                node = q.popleft()\n                level.append(node.val)\n                if node.left:\n                    q.append(node.left)\n                if node.right:\n                    q.append(node.right)\n            if level:\n                res.append(level)\n        \n        return res[::-1]"
    },
    {
        "number": 103,
        "title": "Binary Tree Zigzag Level Order Traversal",
        "difficulty": 1,
        "pass": 6,
        "answer": "        if not root:\n            return []\n        res = []\n        q = collections.deque()\n        q.append((root, 0))\n        while q:\n            node, level = q.popleft()\n            if len(res) < level + 1:\n                res.append([])\n            if level % 2 == 0:\n                res[level].append(node.val)\n            else:\n                res[level].insert(0, node.val)\n            if node.left:\n                q.append((node.left, level + 1))\n            if node.right:\n                q.append((node.right, level + 1))\n        return res"
    },
    {
        "number": 103,
        "title": "Binary Tree Zigzag Level Order Traversal",
        "difficulty": 1,
        "pass": 7,
        "answer": "        if not root:\n            return []\n        res = []\n        q = deque()\n        q.append(root)\n        while q:\n            level = []\n            for _ in range(len(q)):\n                node = q.popleft()\n                level.append(node.val)\n                if node.left:\n                    q.append(node.left)\n                if node.right:\n                    q.append(node.right)\n            if level:\n                res.append(level)\n        return res"
    },
    {
        "number": 103,
        "title": "Binary Tree Zigzag Level Order Traversal",
        "difficulty": 1,
        "pass": 8,
        "answer": "        if not root:\n            return []\n        res = []\n        q = deque()\n        q.append((root, 0))\n        while q:\n            node, level = q.popleft()\n            if len(res) < level + 1:\n                res.append([])\n            if level % 2 == 0:\n                res[level].append(node.val)\n            else:\n                res[level].insert(0, node.val)\n            if node.left:\n                q.append((node.left, level + 1))\n            if node.right:\n                q.append((node.right, level + 1))\n        return res"
    },
    {
        "number": 103,
        "title": "Binary Tree Zigzag Level Order Traversal",
        "difficulty": 1,
        "pass": 9,
        "answer": "        if not root:\n            return []\n        res = []\n        q = deque()\n        q.append((root, 0))\n        while q:\n            node, level = q.popleft()\n            if len(res) < level + 1:\n                res.append([])\n            if level % 2 == 0:\n                res[level].append(node.val)\n            else:\n                res[level].insert(0, node.val)\n            if node.left:\n                q.append((node.left, level + 1))\n            if node.right:\n                q.append((node.right, level + 1))\n        return res\n"
    },
    {
        "number": 104,
        "title": "Maximum Depth of Binary Tree",
        "difficulty": 0,
        "pass": 0,
        "answer": "        if not root:\n            return 0\n        return max(self.maxDepth(root.left), self.maxDepth(root.right)) + 1"
    },
    {
        "number": 104,
        "title": "Maximum Depth of Binary Tree",
        "difficulty": 0,
        "pass": 1,
        "answer": "        if root is None:\n            return 0\n        else:\n            return max(self.maxDepth(root.left), self.maxDepth(root.right)) + 1"
    },
    {
        "number": 104,
        "title": "Maximum Depth of Binary Tree",
        "difficulty": 0,
        "pass": 2,
        "answer": "        if not root:\n            return 0\n        return max(self.maxDepth(root.left), self.maxDepth(root.right)) + 1"
    },
    {
        "number": 104,
        "title": "Maximum Depth of Binary Tree",
        "difficulty": 0,
        "pass": 3,
        "answer": "        if not root:\n            return 0\n        return max(self.maxDepth(root.left), self.maxDepth(root.right)) + 1"
    },
    {
        "number": 104,
        "title": "Maximum Depth of Binary Tree",
        "difficulty": 0,
        "pass": 4,
        "answer": "        if not root:\n            return 0\n        return max(self.maxDepth(root.left), self.maxDepth(root.right)) + 1"
    },
    {
        "number": 104,
        "title": "Maximum Depth of Binary Tree",
        "difficulty": 0,
        "pass": 5,
        "answer": "        if not root:\n            return 0\n        return max(self.maxDepth(root.left), self.maxDepth(root.right)) + 1\n"
    },
    {
        "number": 104,
        "title": "Maximum Depth of Binary Tree",
        "difficulty": 0,
        "pass": 6,
        "answer": "        if not root:\n            return 0\n        return max(self.maxDepth(root.left), self.maxDepth(root.right)) + 1\n"
    },
    {
        "number": 104,
        "title": "Maximum Depth of Binary Tree",
        "difficulty": 0,
        "pass": 7,
        "answer": "        if not root:\n            return 0\n        return max(self.maxDepth(root.left), self.maxDepth(root.right)) + 1"
    },
    {
        "number": 104,
        "title": "Maximum Depth of Binary Tree",
        "difficulty": 0,
        "pass": 8,
        "answer": "        if not root:\n            return 0\n        return max(self.maxDepth(root.left), self.maxDepth(root.right)) + 1"
    },
    {
        "number": 104,
        "title": "Maximum Depth of Binary Tree",
        "difficulty": 0,
        "pass": 9,
        "answer": "        if root is None:\n            return 0\n        return max(self.maxDepth(root.left), self.maxDepth(root.right)) + 1"
    },
    {
        "number": 105,
        "title": "Construct Binary Tree from Preorder and Inorder Traversal",
        "difficulty": 1,
        "pass": 0,
        "answer": "        if len(preorder) == 0:\n            return None\n        if len(preorder) == 1:\n            return TreeNode(preorder[0])\n        \n        root = TreeNode(preorder[0])\n        idx = inorder.index(preorder[0])\n        root.left = self.buildTree(preorder[1:idx+1], inorder[:idx])\n        root.right = self.buildTree(preorder[idx+1:], inorder[idx+1:])\n        return root"
    },
    {
        "number": 105,
        "title": "Construct Binary Tree from Preorder and Inorder Traversal",
        "difficulty": 1,
        "pass": 1,
        "answer": "        if not preorder or not inorder:\n            return None\n        root = TreeNode(preorder[0])\n        idx = inorder.index(root.val)\n        root.left = self.buildTree(preorder[1:idx+1], inorder[:idx])\n        root.right = self.buildTree(preorder[idx+1:], inorder[idx+1:])\n        return root"
    },
    {
        "number": 105,
        "title": "Construct Binary Tree from Preorder and Inorder Traversal",
        "difficulty": 1,
        "pass": 2,
        "answer": "        if len(preorder) == 0:\n            return None\n        if len(preorder) == 1:\n            return TreeNode(preorder[0])\n        \n        root = TreeNode(preorder[0])\n        idx = inorder.index(preorder[0])\n        root.left = self.buildTree(preorder[1:idx+1], inorder[:idx])\n        root.right = self.buildTree(preorder[idx+1:], inorder[idx+1:])\n        \n        return root"
    },
    {
        "number": 105,
        "title": "Construct Binary Tree from Preorder and Inorder Traversal",
        "difficulty": 1,
        "pass": 3,
        "answer": "        if not preorder or not inorder:\n            return None\n        root = TreeNode(preorder[0])\n        idx = inorder.index(preorder[0])\n        root.left = self.buildTree(preorder[1:idx+1], inorder[:idx])\n        root.right = self.buildTree(preorder[idx+1:], inorder[idx+1:])\n        return root"
    },
    {
        "number": 105,
        "title": "Construct Binary Tree from Preorder and Inorder Traversal",
        "difficulty": 1,
        "pass": 4,
        "answer": "        if len(preorder) == 0:\n            return None\n        if len(preorder) == 1:\n            return TreeNode(preorder[0])\n        root = TreeNode(preorder[0])\n        idx = inorder.index(root.val)\n        root.left = self.buildTree(preorder[1:idx+1], inorder[:idx])\n        root.right = self.buildTree(preorder[idx+1:], inorder[idx+1:])\n        return root\n        \n        \nclass Solution:\n    def buildTree(self, preorder: List[int], inorder: List[int]) -> Optional[TreeNode]:\n        \"\"\"\n        Given two integer arrays preorder and inorder where preorder is the preorder traversal of a binary tree and inorder is the inorder traversal of the same tree, construct and return the binary tree.\n        Example 1:\n        Input: preorder = [3,9,20,15,7], inorder = [9,3,15,20,7]\n        Output: [3"
    },
    {
        "number": 105,
        "title": "Construct Binary Tree from Preorder and Inorder Traversal",
        "difficulty": 1,
        "pass": 5,
        "answer": "        if not preorder:\n            return None\n        if len(preorder) == 1:\n            return TreeNode(preorder[0])\n        root = TreeNode(preorder[0])\n        inorder_index = inorder.index(root.val)\n        root.left = self.buildTree(preorder[1:inorder_index+1], inorder[:inorder_index])\n        root.right = self.buildTree(preorder[inorder_index+1:], inorder[inorder_index+1:])\n        return root"
    },
    {
        "number": 105,
        "title": "Construct Binary Tree from Preorder and Inorder Traversal",
        "difficulty": 1,
        "pass": 6,
        "answer": "        if not preorder or not inorder:\n            return None\n        root = TreeNode(preorder[0])\n        idx = inorder.index(preorder[0])\n        root.left = self.buildTree(preorder[1:idx+1], inorder[:idx])\n        root.right = self.buildTree(preorder[idx+1:], inorder[idx+1:])\n        return root"
    },
    {
        "number": 105,
        "title": "Construct Binary Tree from Preorder and Inorder Traversal",
        "difficulty": 1,
        "pass": 7,
        "answer": "        if not preorder or not inorder:\n            return None\n        root = TreeNode(preorder[0])\n        idx = inorder.index(root.val)\n        root.left = self.buildTree(preorder[1:idx+1], inorder[:idx])\n        root.right = self.buildTree(preorder[idx+1:], inorder[idx+1:])\n        return root"
    },
    {
        "number": 105,
        "title": "Construct Binary Tree from Preorder and Inorder Traversal",
        "difficulty": 1,
        "pass": 8,
        "answer": "        if not preorder or not inorder:\n            return None\n        root = TreeNode(preorder[0])\n        idx = inorder.index(root.val)\n        root.left = self.buildTree(preorder[1:idx+1], inorder[:idx])\n        root.right = self.buildTree(preorder[idx+1:], inorder[idx+1:])\n        return root"
    },
    {
        "number": 105,
        "title": "Construct Binary Tree from Preorder and Inorder Traversal",
        "difficulty": 1,
        "pass": 9,
        "answer": "        if not preorder or not inorder:\n            return None\n        \n        root = TreeNode(preorder[0])\n        idx = inorder.index(root.val)\n        \n        root.left = self.buildTree(preorder[1:idx+1], inorder[:idx])\n        root.right = self.buildTree(preorder[idx+1:], inorder[idx+1:])\n        \n        return root"
    },
    {
        "number": 106,
        "title": "Construct Binary Tree from Inorder and Postorder Traversal",
        "difficulty": 1,
        "pass": 0,
        "answer": "        if not inorder or not postorder:\n            return None\n        root = TreeNode(postorder[-1])\n        idx = inorder.index(postorder[-1])\n        root.left = self.buildTree(inorder[:idx], postorder[:idx])\n        root.right = self.buildTree(inorder[idx+1:], postorder[idx:-1])\n        return root"
    },
    {
        "number": 106,
        "title": "Construct Binary Tree from Inorder and Postorder Traversal",
        "difficulty": 1,
        "pass": 1,
        "answer": "        if len(inorder) == 0:\n            return None\n        if len(inorder) == 1:\n            return TreeNode(inorder[0])\n        root = TreeNode(postorder[-1])\n        idx = inorder.index(postorder[-1])\n        root.left = self.buildTree(inorder[:idx], postorder[:idx])\n        root.right = self.buildTree(inorder[idx+1:], postorder[idx:-1])\n        return root"
    },
    {
        "number": 106,
        "title": "Construct Binary Tree from Inorder and Postorder Traversal",
        "difficulty": 1,
        "pass": 2,
        "answer": "        if len(inorder) == 0 or len(postorder) == 0:\n            return None\n        root = TreeNode(postorder[-1])\n        idx = inorder.index(postorder[-1])\n        root.left = self.buildTree(inorder[:idx], postorder[:idx])\n        root.right = self.buildTree(inorder[idx+1:], postorder[idx:-1])\n        return root"
    },
    {
        "number": 106,
        "title": "Construct Binary Tree from Inorder and Postorder Traversal",
        "difficulty": 1,
        "pass": 3,
        "answer": "        if len(inorder) == 0:\n            return None\n        if len(inorder) == 1:\n            return TreeNode(inorder[0])\n        root = TreeNode(postorder[-1])\n        idx = inorder.index(postorder[-1])\n        root.left = self.buildTree(inorder[:idx], postorder[:idx])\n        root.right = self.buildTree(inorder[idx+1:], postorder[idx:-1])\n        return root"
    },
    {
        "number": 106,
        "title": "Construct Binary Tree from Inorder and Postorder Traversal",
        "difficulty": 1,
        "pass": 4,
        "answer": "        if len(inorder) == 0:\n            return None\n        if len(inorder) == 1:\n            return TreeNode(inorder[0])\n        root = TreeNode(postorder[-1])\n        idx = inorder.index(postorder[-1])\n        root.left = self.buildTree(inorder[:idx], postorder[:idx])\n        root.right = self.buildTree(inorder[idx+1:], postorder[idx:-1])\n        return root"
    },
    {
        "number": 106,
        "title": "Construct Binary Tree from Inorder and Postorder Traversal",
        "difficulty": 1,
        "pass": 5,
        "answer": "        if not inorder or not postorder:\n            return None\n        root = TreeNode(postorder.pop())\n        idx = inorder.index(root.val)\n        root.left = self.buildTree(inorder[:idx], postorder[:idx])\n        root.right = self.buildTree(inorder[idx+1:], postorder[idx:])\n        return root\n        \nclass Solution:\n    def buildTree(self, inorder: List[int], postorder: List[int]) -> Optional[TreeNode]:\n        \"\"\"\n        Given two integer arrays inorder and postorder where inorder is the inorder traversal of a binary tree and postorder is the postorder traversal of the same tree, construct and return the binary tree.\n        Example 1:\n        Input: inorder = [9,3,15,20,7], postorder = [9,15,7,20,3]\n        Output: [3,9,20,null,null,15,7]\n        Example 2:\n        Input: inorder = [-1], post"
    },
    {
        "number": 106,
        "title": "Construct Binary Tree from Inorder and Postorder Traversal",
        "difficulty": 1,
        "pass": 6,
        "answer": "        if not inorder or not postorder:\n            return None\n        root = TreeNode(postorder[-1])\n        idx = inorder.index(postorder[-1])\n        root.left = self.buildTree(inorder[:idx], postorder[:idx])\n        root.right = self.buildTree(inorder[idx+1:], postorder[idx:-1])\n        return root"
    },
    {
        "number": 106,
        "title": "Construct Binary Tree from Inorder and Postorder Traversal",
        "difficulty": 1,
        "pass": 7,
        "answer": "        if not inorder or not postorder:\n            return None\n        root = TreeNode(postorder[-1])\n        idx = inorder.index(root.val)\n        root.right = self.buildTree(inorder[idx+1:], postorder[idx:-1])\n        root.left = self.buildTree(inorder[:idx], postorder[:idx])\n        return root\n        \n# @lc code=end"
    },
    {
        "number": 106,
        "title": "Construct Binary Tree from Inorder and Postorder Traversal",
        "difficulty": 1,
        "pass": 8,
        "answer": "        if len(inorder) == 0:\n            return None\n        if len(inorder) == 1:\n            return TreeNode(inorder[0])\n        root = TreeNode(postorder[-1])\n        idx = inorder.index(postorder[-1])\n        root.left = self.buildTree(inorder[:idx], postorder[:idx])\n        root.right = self.buildTree(inorder[idx+1:], postorder[idx:-1])\n        return root"
    },
    {
        "number": 106,
        "title": "Construct Binary Tree from Inorder and Postorder Traversal",
        "difficulty": 1,
        "pass": 9,
        "answer": "        if not inorder or not postorder:\n            return None\n        root = TreeNode(postorder[-1])\n        idx = inorder.index(postorder[-1])\n        root.left = self.buildTree(inorder[:idx], postorder[:idx])\n        root.right = self.buildTree(inorder[idx+1:], postorder[idx:-1])\n        return root"
    },
    {
        "number": 107,
        "title": "Binary Tree Level Order Traversal II",
        "difficulty": 1,
        "pass": 0,
        "answer": "        if not root:\n            return []\n        res = []\n        q = deque()\n        q.append(root)\n        while q:\n            size = len(q)\n            level = []\n            for _ in range(size):\n                node = q.popleft()\n                level.append(node.val)\n                if node.left:\n                    q.append(node.left)\n                if node.right:\n                    q.append(node.right)\n            res.append(level)\n        return res[::-1]"
    },
    {
        "number": 107,
        "title": "Binary Tree Level Order Traversal II",
        "difficulty": 1,
        "pass": 1,
        "answer": "        if not root:\n            return []\n        res = []\n        queue = deque()\n        queue.append(root)\n        while queue:\n            size = len(queue)\n            level = []\n            for _ in range(size):\n                node = queue.popleft()\n                level.append(node.val)\n                if node.left:\n                    queue.append(node.left)\n                if node.right:\n                    queue.append(node.right)\n            res.append(level)\n        return res[::-1]"
    },
    {
        "number": 107,
        "title": "Binary Tree Level Order Traversal II",
        "difficulty": 1,
        "pass": 2,
        "answer": "        if not root:\n            return []\n        \n        res = []\n        q = deque()\n        q.append((root, 0))\n        \n        while q:\n            node, level = q.popleft()\n            if len(res) < level + 1:\n                res.append([])\n            res[level].append(node.val)\n            if node.left:\n                q.append((node.left, level + 1))\n            if node.right:\n                q.append((node.right, level + 1))\n        \n        return list(reversed(res))"
    },
    {
        "number": 107,
        "title": "Binary Tree Level Order Traversal II",
        "difficulty": 1,
        "pass": 3,
        "answer": "        if not root:\n            return []\n        \n        res = []\n        q = deque()\n        q.append(root)\n        \n        while q:\n            size = len(q)\n            level = []\n            for _ in range(size):\n                node = q.popleft()\n                level.append(node.val)\n                if node.left:\n                    q.append(node.left)\n                if node.right:\n                    q.append(node.right)\n            res.append(level)\n        \n        return res[::-1]\n"
    },
    {
        "number": 107,
        "title": "Binary Tree Level Order Traversal II",
        "difficulty": 1,
        "pass": 4,
        "answer": "        if not root:\n            return []\n        res = []\n        q = deque()\n        q.append(root)\n        while q:\n            level = []\n            for _ in range(len(q)):\n                node = q.popleft()\n                level.append(node.val)\n                if node.left:\n                    q.append(node.left)\n                if node.right:\n                    q.append(node.right)\n            res.append(level)\n        return res[::-1]"
    },
    {
        "number": 107,
        "title": "Binary Tree Level Order Traversal II",
        "difficulty": 1,
        "pass": 5,
        "answer": "        if not root:\n            return []\n        res = []\n        q = deque()\n        q.append(root)\n        while q:\n            size = len(q)\n            level = []\n            for _ in range(size):\n                node = q.popleft()\n                level.append(node.val)\n                if node.left:\n                    q.append(node.left)\n                if node.right:\n                    q.append(node.right)\n            res.append(level)\n        return res[::-1]"
    },
    {
        "number": 107,
        "title": "Binary Tree Level Order Traversal II",
        "difficulty": 1,
        "pass": 6,
        "answer": "        if not root:\n            return []\n        \n        res = []\n        q = deque()\n        q.append(root)\n        \n        while q:\n            size = len(q)\n            level = []\n            for _ in range(size):\n                node = q.popleft()\n                level.append(node.val)\n                if node.left:\n                    q.append(node.left)\n                if node.right:\n                    q.append(node.right)\n            res.insert(0, level)\n        \n        return res"
    },
    {
        "number": 107,
        "title": "Binary Tree Level Order Traversal II",
        "difficulty": 1,
        "pass": 7,
        "answer": "        if not root:\n            return []\n        \n        q = deque()\n        q.append(root)\n        res = []\n        while q:\n            size = len(q)\n            level = []\n            for _ in range(size):\n                node = q.popleft()\n                level.append(node.val)\n                if node.left:\n                    q.append(node.left)\n                if node.right:\n                    q.append(node.right)\n            res.append(level)\n        return res[::-1]"
    },
    {
        "number": 107,
        "title": "Binary Tree Level Order Traversal II",
        "difficulty": 1,
        "pass": 8,
        "answer": "        if not root:\n            return []\n        \n        res = []\n        q = deque()\n        q.append(root)\n        \n        while q:\n            size = len(q)\n            level = []\n            for _ in range(size):\n                node = q.popleft()\n                level.append(node.val)\n                if node.left:\n                    q.append(node.left)\n                if node.right:\n                    q.append(node.right)\n            res.append(level)\n        \n        return res[::-1]"
    },
    {
        "number": 107,
        "title": "Binary Tree Level Order Traversal II",
        "difficulty": 1,
        "pass": 9,
        "answer": "        if not root:\n            return []\n        res = []\n        q = deque()\n        q.append(root)\n        while q:\n            size = len(q)\n            level = []\n            for i in range(size):\n                node = q.popleft()\n                level.append(node.val)\n                if node.left:\n                    q.append(node.left)\n                if node.right:\n                    q.append(node.right)\n            res.append(level)\n        return res[::-1]"
    },
    {
        "number": 108,
        "title": "Convert Sorted Array to Binary Search Tree",
        "difficulty": 0,
        "pass": 0,
        "answer": "        if not nums:\n            return None\n        mid = len(nums) // 2\n        root = TreeNode(nums[mid])\n        root.left = self.sortedArrayToBST(nums[:mid])\n        root.right = self.sortedArrayToBST(nums[mid+1:])\n        return root"
    },
    {
        "number": 108,
        "title": "Convert Sorted Array to Binary Search Tree",
        "difficulty": 0,
        "pass": 1,
        "answer": "        if len(nums) == 0:\n            return None\n        if len(nums) == 1:\n            return TreeNode(nums[0])\n        root = TreeNode(nums[len(nums) // 2])\n        root.left = self.sortedArrayToBST(nums[:len(nums) // 2])\n        root.right = self.sortedArrayToBST(nums[len(nums) // 2 + 1:])\n        return root"
    },
    {
        "number": 108,
        "title": "Convert Sorted Array to Binary Search Tree",
        "difficulty": 0,
        "pass": 2,
        "answer": "        if len(nums) == 0:\n            return None\n        if len(nums) == 1:\n            return TreeNode(nums[0])\n        mid = len(nums) // 2\n        root = TreeNode(nums[mid])\n        root.left = self.sortedArrayToBST(nums[:mid])\n        root.right = self.sortedArrayToBST(nums[mid+1:])\n        return root"
    },
    {
        "number": 108,
        "title": "Convert Sorted Array to Binary Search Tree",
        "difficulty": 0,
        "pass": 3,
        "answer": "        if not nums:\n            return None\n        mid = len(nums) // 2\n        root = TreeNode(nums[mid])\n        root.left = self.sortedArrayToBST(nums[:mid])\n        root.right = self.sortedArrayToBST(nums[mid+1:])\n        return root"
    },
    {
        "number": 108,
        "title": "Convert Sorted Array to Binary Search Tree",
        "difficulty": 0,
        "pass": 4,
        "answer": "        if len(nums) == 0:\n            return None\n        if len(nums) == 1:\n            return TreeNode(nums[0])\n        mid = len(nums) // 2\n        root = TreeNode(nums[mid])\n        root.left = self.sortedArrayToBST(nums[:mid])\n        root.right = self.sortedArrayToBST(nums[mid+1:])\n        return root"
    },
    {
        "number": 108,
        "title": "Convert Sorted Array to Binary Search Tree",
        "difficulty": 0,
        "pass": 5,
        "answer": "        if len(nums) == 0:\n            return None\n        if len(nums) == 1:\n            return TreeNode(nums[0])\n        mid = len(nums) // 2\n        root = TreeNode(nums[mid])\n        root.left = self.sortedArrayToBST(nums[:mid])\n        root.right = self.sortedArrayToBST(nums[mid+1:])\n        return root"
    },
    {
        "number": 108,
        "title": "Convert Sorted Array to Binary Search Tree",
        "difficulty": 0,
        "pass": 6,
        "answer": "        if len(nums) == 0:\n            return None\n        if len(nums) == 1:\n            return TreeNode(nums[0])\n        mid = len(nums) // 2\n        root = TreeNode(nums[mid])\n        root.left = self.sortedArrayToBST(nums[:mid])\n        root.right = self.sortedArrayToBST(nums[mid+1:])\n        return root"
    },
    {
        "number": 108,
        "title": "Convert Sorted Array to Binary Search Tree",
        "difficulty": 0,
        "pass": 7,
        "answer": "        if len(nums) == 0:\n            return None\n        if len(nums) == 1:\n            return TreeNode(nums[0])\n        \n        mid = len(nums) // 2\n        root = TreeNode(nums[mid])\n        root.left = self.sortedArrayToBST(nums[:mid])\n        root.right = self.sortedArrayToBST(nums[mid+1:])\n        return root"
    },
    {
        "number": 108,
        "title": "Convert Sorted Array to Binary Search Tree",
        "difficulty": 0,
        "pass": 8,
        "answer": "        if len(nums) == 0:\n            return None\n        if len(nums) == 1:\n            return TreeNode(nums[0])\n        root = TreeNode(nums[len(nums)//2])\n        root.left = self.sortedArrayToBST(nums[:len(nums)//2])\n        root.right = self.sortedArrayToBST(nums[len(nums)//2+1:])\n        return root"
    },
    {
        "number": 108,
        "title": "Convert Sorted Array to Binary Search Tree",
        "difficulty": 0,
        "pass": 9,
        "answer": "        if len(nums) == 0:\n            return None\n        if len(nums) == 1:\n            return TreeNode(nums[0])\n        root = TreeNode(nums[len(nums)//2])\n        root.left = self.sortedArrayToBST(nums[:len(nums)//2])\n        root.right = self.sortedArrayToBST(nums[len(nums)//2+1:])\n        return root\n"
    },
    {
        "number": 109,
        "title": "Convert Sorted List to Binary Search Tree",
        "difficulty": 1,
        "pass": 0,
        "answer": "        if not head:\n            return None\n        if not head.next:\n            return TreeNode(head.val)\n        mid = self.findMid(head)\n        root = TreeNode(mid.val)\n        root.left = self.sortedListToBST(head)\n        root.right = self.sortedListToBST(mid.next)\n        return root"
    },
    {
        "number": 109,
        "title": "Convert Sorted List to Binary Search Tree",
        "difficulty": 1,
        "pass": 1,
        "answer": "        if not head:\n            return None\n        if not head.next:\n            return TreeNode(head.val)\n        if not head.next.next:\n            node = TreeNode(head.next.val)\n            node.left = self.sortedListToBST(head)\n            node.right = self.sortedListToBST(head.next.next)\n            return node\n        if not head.next.next.next:\n            node = TreeNode(head.next.next.val)\n            node.left = self.sortedListToBST(head)\n            node.right = self.sortedListToBST(head.next.next.next)\n            return node\n        if not head.next.next.next.next:\n            node = TreeNode(head.next.next.next.val)\n            node.left = self.sortedListToBST(head)\n            node.right = self.sortedListToBST(head.next.next.next.next)\n            return node\n        mid = head.next.next."
    },
    {
        "number": 109,
        "title": "Convert Sorted List to Binary Search Tree",
        "difficulty": 1,
        "pass": 2,
        "answer": "        if not head:\n            return None\n        \n        def helper(start, end):\n            if start > end:\n                return None\n            \n            mid = (start + end) // 2\n            node = TreeNode(head.val)\n            node.left = helper(start, mid - 1)\n            node.right = helper(mid + 1, end)\n            return node\n        \n        return helper(0, len(head) - 1)"
    },
    {
        "number": 109,
        "title": "Convert Sorted List to Binary Search Tree",
        "difficulty": 1,
        "pass": 3,
        "answer": "        if not head:\n            return None\n        if not head.next:\n            return TreeNode(head.val)\n        slow = head\n        fast = head\n        while fast.next and fast.next.next:\n            slow = slow.next\n            fast = fast.next.next\n        mid = slow.next\n        slow.next = None\n        root = TreeNode(mid.val)\n        root.left = self.sortedListToBST(head)\n        root.right = self.sortedListToBST(mid.next)\n        return root"
    },
    {
        "number": 109,
        "title": "Convert Sorted List to Binary Search Tree",
        "difficulty": 1,
        "pass": 4,
        "answer": "        if not head:\n            return None\n        if not head.next:\n            return TreeNode(head.val)\n        slow = head\n        fast = head\n        while fast.next and fast.next.next:\n            slow = slow.next\n            fast = fast.next.next\n        mid = slow.next\n        slow.next = None\n        root = TreeNode(mid.val)\n        root.left = self.sortedListToBST(head)\n        root.right = self.sortedListToBST(mid.next)\n        return root"
    },
    {
        "number": 109,
        "title": "Convert Sorted List to Binary Search Tree",
        "difficulty": 1,
        "pass": 5,
        "answer": "        if not head:\n            return None\n        if not head.next:\n            return TreeNode(head.val)\n        \n        slow = head\n        fast = head\n        while fast.next and fast.next.next:\n            slow = slow.next\n            fast = fast.next.next\n        \n        mid = slow.next\n        slow.next = None\n        root = TreeNode(mid.val)\n        root.left = self.sortedListToBST(head)\n        root.right = self.sortedListToBST(mid.next)\n        return root"
    },
    {
        "number": 109,
        "title": "Convert Sorted List to Binary Search Tree",
        "difficulty": 1,
        "pass": 6,
        "answer": "        if not head:\n            return None\n        \n        def helper(left, right):\n            if left > right:\n                return None\n            \n            mid = (left + right) // 2\n            root = TreeNode(head.val)\n            root.left = helper(left, mid - 1)\n            root.right = helper(mid + 1, right)\n            return root\n        \n        return helper(0, len(head) - 1)"
    },
    {
        "number": 109,
        "title": "Convert Sorted List to Binary Search Tree",
        "difficulty": 1,
        "pass": 7,
        "answer": "        if not head:\n            return None\n        if not head.next:\n            return TreeNode(head.val)\n        \n        slow, fast = head, head.next\n        while fast and fast.next:\n            slow = slow.next\n            fast = fast.next.next\n        root = TreeNode(slow.val)\n        root.left = self.sortedListToBST(head)\n        root.right = self.sortedListToBST(slow.next)\n        return root"
    },
    {
        "number": 109,
        "title": "Convert Sorted List to Binary Search Tree",
        "difficulty": 1,
        "pass": 8,
        "answer": "        if head is None:\n            return None\n        if head.next is None:\n            return TreeNode(head.val)\n        \n        slow = head\n        fast = head.next\n        while fast is not None and fast.next is not None:\n            slow = slow.next\n            fast = fast.next.next\n        \n        root = TreeNode(slow.val)\n        root.left = self.sortedListToBST(head)\n        root.right = self.sortedListToBST(slow.next)\n        \n        return root"
    },
    {
        "number": 109,
        "title": "Convert Sorted List to Binary Search Tree",
        "difficulty": 1,
        "pass": 9,
        "answer": "        if not head:\n            return None\n        if not head.next:\n            return TreeNode(head.val)\n        slow, fast = head, head\n        while fast.next and fast.next.next:\n            slow = slow.next\n            fast = fast.next.next\n        mid = slow.next\n        slow.next = None\n        root = TreeNode(mid.val)\n        root.left = self.sortedListToBST(head)\n        root.right = self.sortedListToBST(mid.next)\n        return root"
    },
    {
        "number": 110,
        "title": "Balanced Binary Tree",
        "difficulty": 0,
        "pass": 0,
        "answer": "        if not root:\n            return True\n        return abs(self.height(root.left) - self.height(root.right)) <= 1 and self.isBalanced(root.left) and self.isBalanced(root.right)"
    },
    {
        "number": 110,
        "title": "Balanced Binary Tree",
        "difficulty": 0,
        "pass": 1,
        "answer": "        if not root:\n            return True\n        \n        def dfs(node):\n            if not node:\n                return 0\n            left = dfs(node.left)\n            right = dfs(node.right)\n            if left == -1 or right == -1 or abs(left - right) > 1:\n                return -1\n            return max(left, right) + 1\n        \n        return dfs(root)!= -1"
    },
    {
        "number": 110,
        "title": "Balanced Binary Tree",
        "difficulty": 0,
        "pass": 2,
        "answer": "        if not root:\n            return True\n        return abs(self.height(root.left) - self.height(root.right)) <= 1 and self.isBalanced(root.left) and self.isBalanced(root.right)"
    },
    {
        "number": 110,
        "title": "Balanced Binary Tree",
        "difficulty": 0,
        "pass": 3,
        "answer": "        if not root:\n            return True\n        \n        def dfs(root):\n            if not root:\n                return 0\n            left = dfs(root.left)\n            right = dfs(root.right)\n            if left == -1 or right == -1 or abs(left - right) > 1:\n                return -1\n            return max(left, right) + 1\n        \n        return dfs(root)!= -1"
    },
    {
        "number": 110,
        "title": "Balanced Binary Tree",
        "difficulty": 0,
        "pass": 4,
        "answer": "        def dfs(node):\n            if not node:\n                return 0\n            left = dfs(node.left)\n            right = dfs(node.right)\n            if left == -1 or right == -1 or abs(left - right) > 1:\n                return -1\n            return max(left, right) + 1\n        return dfs(root)!= -1"
    },
    {
        "number": 110,
        "title": "Balanced Binary Tree",
        "difficulty": 0,
        "pass": 5,
        "answer": "        if not root:\n            return True\n        \n        def dfs(node):\n            if not node:\n                return 0\n            left = dfs(node.left)\n            right = dfs(node.right)\n            if left == -1 or right == -1 or abs(left - right) > 1:\n                return -1\n            return max(left, right) + 1\n        \n        return dfs(root)!= -1"
    },
    {
        "number": 110,
        "title": "Balanced Binary Tree",
        "difficulty": 0,
        "pass": 6,
        "answer": "        if not root:\n            return True\n        return abs(self.height(root.left) - self.height(root.right)) <= 1 and self.isBalanced(root.left) and self.isBalanced(root.right)"
    },
    {
        "number": 110,
        "title": "Balanced Binary Tree",
        "difficulty": 0,
        "pass": 7,
        "answer": "        if not root:\n            return True\n        return abs(self.height(root.left) - self.height(root.right)) <= 1 and self.isBalanced(root.left) and self.isBalanced(root.right)"
    },
    {
        "number": 110,
        "title": "Balanced Binary Tree",
        "difficulty": 0,
        "pass": 8,
        "answer": "        if not root:\n            return True\n        return abs(self.height(root.left) - self.height(root.right)) <= 1 and self.isBalanced(root.left) and self.isBalanced(root.right)"
    },
    {
        "number": 110,
        "title": "Balanced Binary Tree",
        "difficulty": 0,
        "pass": 9,
        "answer": "        if not root:\n            return True\n        return abs(self.height(root.left) - self.height(root.right)) <= 1 and self.isBalanced(root.left) and self.isBalanced(root.right)"
    },
    {
        "number": 111,
        "title": "Minimum Depth of Binary Tree",
        "difficulty": 0,
        "pass": 0,
        "answer": "        if not root:\n            return 0\n        if not root.left and not root.right:\n            return 1\n        if not root.left:\n            return self.minDepth(root.right) + 1\n        if not root.right:\n            return self.minDepth(root.left) + 1\n        return min(self.minDepth(root.left), self.minDepth(root.right)) + 1\n"
    },
    {
        "number": 111,
        "title": "Minimum Depth of Binary Tree",
        "difficulty": 0,
        "pass": 1,
        "answer": "        if not root:\n            return 0\n        if not root.left and not root.right:\n            return 1\n        if not root.left:\n            return self.minDepth(root.right) + 1\n        if not root.right:\n            return self.minDepth(root.left) + 1\n        return min(self.minDepth(root.left), self.minDepth(root.right)) + 1"
    },
    {
        "number": 111,
        "title": "Minimum Depth of Binary Tree",
        "difficulty": 0,
        "pass": 2,
        "answer": "        if not root:\n            return 0\n        if not root.left and not root.right:\n            return 1\n        if not root.left:\n            return self.minDepth(root.right) + 1\n        if not root.right:\n            return self.minDepth(root.left) + 1\n        return min(self.minDepth(root.left), self.minDepth(root.right)) + 1"
    },
    {
        "number": 111,
        "title": "Minimum Depth of Binary Tree",
        "difficulty": 0,
        "pass": 3,
        "answer": "        if root is None:\n            return 0\n        if root.left is None and root.right is None:\n            return 1\n        if root.left is None:\n            return self.minDepth(root.right) + 1\n        if root.right is None:\n            return self.minDepth(root.left) + 1\n        return min(self.minDepth(root.left), self.minDepth(root.right)) + 1\n"
    },
    {
        "number": 111,
        "title": "Minimum Depth of Binary Tree",
        "difficulty": 0,
        "pass": 4,
        "answer": "        if not root:\n            return 0\n        if not root.left and not root.right:\n            return 1\n        if not root.left:\n            return self.minDepth(root.right) + 1\n        if not root.right:\n            return self.minDepth(root.left) + 1\n        return min(self.minDepth(root.left), self.minDepth(root.right)) + 1"
    },
    {
        "number": 111,
        "title": "Minimum Depth of Binary Tree",
        "difficulty": 0,
        "pass": 5,
        "answer": "        if not root:\n            return 0\n        if not root.left and not root.right:\n            return 1\n        if not root.left:\n            return self.minDepth(root.right) + 1\n        if not root.right:\n            return self.minDepth(root.left) + 1\n        return min(self.minDepth(root.left), self.minDepth(root.right)) + 1"
    },
    {
        "number": 111,
        "title": "Minimum Depth of Binary Tree",
        "difficulty": 0,
        "pass": 6,
        "answer": "        if root is None:\n            return 0\n        if root.left is None and root.right is None:\n            return 1\n        if root.left is None:\n            return self.minDepth(root.right) + 1\n        if root.right is None:\n            return self.minDepth(root.left) + 1\n        return min(self.minDepth(root.left), self.minDepth(root.right)) + 1"
    },
    {
        "number": 111,
        "title": "Minimum Depth of Binary Tree",
        "difficulty": 0,
        "pass": 7,
        "answer": "        if not root:\n            return 0\n        if not root.left and not root.right:\n            return 1\n        if not root.left:\n            return self.minDepth(root.right) + 1\n        if not root.right:\n            return self.minDepth(root.left) + 1\n        return min(self.minDepth(root.left), self.minDepth(root.right)) + 1"
    },
    {
        "number": 111,
        "title": "Minimum Depth of Binary Tree",
        "difficulty": 0,
        "pass": 8,
        "answer": "        if not root:\n            return 0\n        if not root.left and not root.right:\n            return 1\n        if not root.left:\n            return self.minDepth(root.right) + 1\n        if not root.right:\n            return self.minDepth(root.left) + 1\n        return min(self.minDepth(root.left), self.minDepth(root.right)) + 1"
    },
    {
        "number": 111,
        "title": "Minimum Depth of Binary Tree",
        "difficulty": 0,
        "pass": 9,
        "answer": "        if root is None:\n            return 0\n        if root.left is None and root.right is None:\n            return 1\n        if root.left is None:\n            return self.minDepth(root.right) + 1\n        if root.right is None:\n            return self.minDepth(root.left) + 1\n        return min(self.minDepth(root.left), self.minDepth(root.right)) + 1"
    },
    {
        "number": 112,
        "title": "Path Sum",
        "difficulty": 0,
        "pass": 0,
        "answer": "        if not root:\n            return False\n        stack = [(root, root.val)]\n        while stack:\n            node, curr_sum = stack.pop()\n            if not node.left and not node.right:\n                if curr_sum == targetSum:\n                    return True\n            if node.left:\n                stack.append((node.left, curr_sum + node.left.val))\n            if node.right:\n                stack.append((node.right, curr_sum + node.right.val))\n        return False"
    },
    {
        "number": 112,
        "title": "Path Sum",
        "difficulty": 0,
        "pass": 1,
        "answer": "        if not root:\n            return False\n        if not root.left and not root.right and root.val == targetSum:\n            return True\n        return self.hasPathSum(root.left, targetSum - root.val) or self.hasPathSum(root.right, targetSum - root.val)\n"
    },
    {
        "number": 112,
        "title": "Path Sum",
        "difficulty": 0,
        "pass": 2,
        "answer": "        if not root:\n            return False\n        if not root.left and not root.right and root.val == targetSum:\n            return True\n        return self.hasPathSum(root.left, targetSum - root.val) or self.hasPathSum(root.right, targetSum - root.val)"
    },
    {
        "number": 112,
        "title": "Path Sum",
        "difficulty": 0,
        "pass": 3,
        "answer": "        if not root:\n            return False\n        if not root.left and not root.right and root.val == targetSum:\n            return True\n        return self.hasPathSum(root.left, targetSum - root.val) or self.hasPathSum(root.right, targetSum - root.val)"
    },
    {
        "number": 112,
        "title": "Path Sum",
        "difficulty": 0,
        "pass": 4,
        "answer": "        if not root:\n            return False\n        if not root.left and not root.right:\n            return root.val == targetSum\n        return self.hasPathSum(root.left, targetSum - root.val) or self.hasPathSum(root.right, targetSum - root.val)\n"
    },
    {
        "number": 112,
        "title": "Path Sum",
        "difficulty": 0,
        "pass": 5,
        "answer": "        if not root:\n            return False\n        if not root.left and not root.right and root.val == targetSum:\n            return True\n        return self.hasPathSum(root.left, targetSum - root.val) or self.hasPathSum(root.right, targetSum - root.val)"
    },
    {
        "number": 112,
        "title": "Path Sum",
        "difficulty": 0,
        "pass": 6,
        "answer": "        if not root:\n            return False\n        if not root.left and not root.right and root.val == targetSum:\n            return True\n        return self.hasPathSum(root.left, targetSum - root.val) or self.hasPathSum(root.right, targetSum - root.val)"
    },
    {
        "number": 112,
        "title": "Path Sum",
        "difficulty": 0,
        "pass": 7,
        "answer": "        if not root:\n            return False\n        if not root.left and not root.right and root.val == targetSum:\n            return True\n        return self.hasPathSum(root.left, targetSum - root.val) or self.hasPathSum(root.right, targetSum - root.val)"
    },
    {
        "number": 112,
        "title": "Path Sum",
        "difficulty": 0,
        "pass": 8,
        "answer": "        if not root:\n            return False\n        stack = [(root, root.val)]\n        while stack:\n            node, val = stack.pop()\n            if not node.left and not node.right:\n                if val == targetSum:\n                    return True\n            if node.right:\n                stack.append((node.right, val + node.right.val))\n            if node.left:\n                stack.append((node.left, val + node.left.val))\n        return False"
    },
    {
        "number": 112,
        "title": "Path Sum",
        "difficulty": 0,
        "pass": 9,
        "answer": "        if not root:\n            return False\n        if not root.left and not root.right and root.val == targetSum:\n            return True\n        return self.hasPathSum(root.left, targetSum - root.val) or self.hasPathSum(root.right, targetSum - root.val)"
    },
    {
        "number": 113,
        "title": "Path Sum II",
        "difficulty": 1,
        "pass": 0,
        "answer": "        res = []\n        if not root:\n            return res\n        self.dfs(root, targetSum, [], res)\n        return res"
    },
    {
        "number": 113,
        "title": "Path Sum II",
        "difficulty": 1,
        "pass": 1,
        "answer": "        if not root:\n            return []\n        res = []\n        self.dfs(root, targetSum, [], res)\n        return res"
    },
    {
        "number": 113,
        "title": "Path Sum II",
        "difficulty": 1,
        "pass": 2,
        "answer": "        if not root:\n            return []\n        res = []\n        self.dfs(root, targetSum, [], res)\n        return res"
    },
    {
        "number": 113,
        "title": "Path Sum II",
        "difficulty": 1,
        "pass": 3,
        "answer": "        if not root:\n            return []\n        res = []\n        self.dfs(root, targetSum, [], res)\n        return res"
    },
    {
        "number": 113,
        "title": "Path Sum II",
        "difficulty": 1,
        "pass": 4,
        "answer": "        if not root:\n            return []\n        res = []\n        self.dfs(root, targetSum, [], res)\n        return res"
    },
    {
        "number": 113,
        "title": "Path Sum II",
        "difficulty": 1,
        "pass": 5,
        "answer": "        if not root:\n            return []\n        self.res = []\n        self.dfs(root, targetSum, [])\n        return self.res"
    },
    {
        "number": 113,
        "title": "Path Sum II",
        "difficulty": 1,
        "pass": 6,
        "answer": "        if not root:\n            return []\n        res = []\n        self.dfs(root, targetSum, [], res)\n        return res"
    },
    {
        "number": 113,
        "title": "Path Sum II",
        "difficulty": 1,
        "pass": 7,
        "answer": "        if not root: return []\n        res = []\n        self.dfs(root, targetSum, [], res)\n        return res"
    },
    {
        "number": 113,
        "title": "Path Sum II",
        "difficulty": 1,
        "pass": 8,
        "answer": "        if not root:\n            return []\n        res = []\n        self.dfs(root, targetSum, [], res)\n        return res"
    },
    {
        "number": 113,
        "title": "Path Sum II",
        "difficulty": 1,
        "pass": 9,
        "answer": "        if not root:\n            return []\n        if not root.left and not root.right and root.val == targetSum:\n            return [[root.val]]\n        if not root.left:\n            return self.pathSum(root.right, targetSum - root.val)\n        if not root.right:\n            return self.pathSum(root.left, targetSum - root.val)\n        return self.pathSum(root.left, targetSum - root.val) + self.pathSum(root.right, targetSum - root.val)\n"
    },
    {
        "number": 114,
        "title": "Flatten Binary Tree to Linked List",
        "difficulty": 1,
        "pass": 0,
        "answer": "        if not root:\n            return root\n        stack = []\n        node = root\n        while node or stack:\n            while node:\n                stack.append(node)\n                node = node.right\n            node = stack.pop()\n            node.right = None\n            node = node.left\n        return root"
    },
    {
        "number": 114,
        "title": "Flatten Binary Tree to Linked List",
        "difficulty": 1,
        "pass": 1,
        "answer": "        if not root:\n            return None\n        self.flatten(root.right)\n        self.flatten(root.left)\n        root.right = self.flatten(root.right)\n        root.left = None\n        return root"
    },
    {
        "number": 114,
        "title": "Flatten Binary Tree to Linked List",
        "difficulty": 1,
        "pass": 2,
        "answer": "        if not root:\n            return root\n        \n        self.flatten(root.left)\n        self.flatten(root.right)\n        \n        curr = root\n        while curr.left:\n            curr = curr.left\n        curr.left = None\n        \n        curr = root\n        while curr.right:\n            curr = curr.right\n        curr.right = None\n        \n        curr = root\n        while curr:\n            if curr.left:\n                left = curr.left\n                while left.right:\n                    left = left.right\n                left.right = curr.right\n                curr.right = curr.left\n                curr.left = None\n            curr = curr.right\n        \n        return root"
    },
    {
        "number": 114,
        "title": "Flatten Binary Tree to Linked List",
        "difficulty": 1,
        "pass": 3,
        "answer": "        if not root:\n            return root\n        \n        stack = []\n        curr = root\n        while curr or stack:\n            while curr:\n                stack.append(curr)\n                curr = curr.left\n            curr = stack.pop()\n            curr.left = None\n            curr.right = stack[-1].right\n            stack[-1].right = curr\n            curr = curr.right\n        \n        return root"
    },
    {
        "number": 114,
        "title": "Flatten Binary Tree to Linked List",
        "difficulty": 1,
        "pass": 4,
        "answer": "        if not root:\n            return root\n        stack = []\n        curr = root\n        while curr or stack:\n            while curr:\n                stack.append(curr)\n                curr = curr.left\n            curr = stack.pop()\n            curr.left = None\n            curr.right = stack[-1].right\n            stack[-1].right = curr\n            curr = curr.right\n        return root"
    },
    {
        "number": 114,
        "title": "Flatten Binary Tree to Linked List",
        "difficulty": 1,
        "pass": 5,
        "answer": "        if not root:\n            return root\n        \n        stack = []\n        curr = root\n        while curr or stack:\n            while curr:\n                stack.append(curr)\n                curr = curr.left\n            curr = stack.pop()\n            curr.left = None\n            curr.right = stack[-1].right\n            stack[-1].right = curr\n            curr = curr.right\n            \n        return root"
    },
    {
        "number": 114,
        "title": "Flatten Binary Tree to Linked List",
        "difficulty": 1,
        "pass": 6,
        "answer": "        if not root:\n            return None\n        self.flatten(root.right)\n        self.flatten(root.left)\n        root.right = self.prev\n        root.left = None\n        self.prev = root\n        return root"
    },
    {
        "number": 114,
        "title": "Flatten Binary Tree to Linked List",
        "difficulty": 1,
        "pass": 7,
        "answer": "        if not root:\n            return None\n        stack = []\n        curr = root\n        while curr or stack:\n            while curr:\n                stack.append(curr)\n                curr = curr.left\n            curr = stack.pop()\n            curr.left = None\n            curr.right = stack[-1].right\n            stack[-1].right = curr\n            curr = curr.right\n        return root"
    },
    {
        "number": 114,
        "title": "Flatten Binary Tree to Linked List",
        "difficulty": 1,
        "pass": 8,
        "answer": "        if not root:\n            return None\n        self.flatten(root.right)\n        self.flatten(root.left)\n        root.right = self.prev\n        root.left = None\n        self.prev = root\n        return root"
    },
    {
        "number": 114,
        "title": "Flatten Binary Tree to Linked List",
        "difficulty": 1,
        "pass": 9,
        "answer": "        if not root:\n            return None\n        \n        stack = []\n        curr = root\n        while curr or stack:\n            while curr:\n                stack.append(curr)\n                curr = curr.left\n            curr = stack.pop()\n            curr.left = None\n            curr.right = stack[-1].right\n            stack[-1].right = curr\n            curr = curr.right\n        \n        return root\n        \nclass Solution:\n    def flatten(self, root: Optional[TreeNode]) -> None:\n        \"\"\"\n        Do not return anything, modify root in-place instead.\n        Given the root of a binary tree, flatten the tree into a \"linked list\":\n            The \"linked list\" should use the same TreeNode class where the right child pointer points to the next node in the list and the left child pointer is always null.\n            The \"linked list\" should be in the same order as a pre-order traversal of the binary tree.\n        Example 1:\n        Input: root = [1,2,5,"
    },
    {
        "number": 115,
        "title": "Distinct Subsequences",
        "difficulty": 2,
        "pass": 0,
        "answer": "        # dp = [[0] * (len(t) + 1) for _ in range(len(s) + 1)]\n        # for i in range(1, len(s) + 1):\n        #     for j in range(1, len(t) + 1):\n        #         if s[i - 1] == t[j - 1]:\n        #             dp[i][j] = dp[i - 1][j - 1] + dp[i - 1][j]\n        #         else:\n        #             dp[i][j] = dp[i - 1][j]\n        # return dp[len(s)][len(t)]"
    },
    {
        "number": 115,
        "title": "Distinct Subsequences",
        "difficulty": 2,
        "pass": 1,
        "answer": "        # Solution 1\n        # dp = [[0] * (len(t) + 1) for _ in range(len(s) + 1)]\n        # for i in range(len(s) + 1):\n        #     dp[i][0] = 1\n        # for j in range(len(t) + 1):\n        #     dp[0][j] = 0\n        # for i in range(1, len(s) + 1):\n        #     for j in range(1, len(t) + 1):\n        #         if s[i - 1] == t[j - 1]:\n        #             dp[i][j] = dp[i - 1][j - 1] + dp[i - 1][j]\n        #         else:\n        #             dp[i][j] = dp[i - 1][j]\n        # return dp[-1][-1]"
    },
    {
        "number": 115,
        "title": "Distinct Subsequences",
        "difficulty": 2,
        "pass": 2,
        "answer": "        if not s or not t:\n            return 0\n        m, n = len(s), len(t)\n        dp = [[0] * (n + 1) for _ in range(m + 1)]\n        for i in range(m + 1):\n            dp[i][0] = 1\n        for j in range(n + 1):\n            dp[0][j] = 1\n        for i in range(1, m + 1):\n            for j in range(1, n + 1):\n                if s[i - 1] == t[j - 1]:\n                    dp[i][j] = dp[i - 1][j - 1] + dp[i - 1][j]\n                else:\n                    dp[i][j] = dp[i - 1][j]\n        return dp[-1][-1]"
    },
    {
        "number": 115,
        "title": "Distinct Subsequences",
        "difficulty": 2,
        "pass": 3,
        "answer": "        m, n = len(s), len(t)\n        dp = [[0] * (n + 1) for _ in range(m + 1)]\n        for i in range(m + 1):\n            dp[i][0] = 1\n        for j in range(1, n + 1):\n            dp[0][j] = 0\n        for i in range(1, m + 1):\n            for j in range(1, n + 1):\n                if s[i - 1] == t[j - 1]:\n                    dp[i][j] = dp[i - 1][j - 1] + dp[i - 1][j]\n                else:\n                    dp[i][j] = dp[i - 1][j]\n        return dp[-1][-1]"
    },
    {
        "number": 115,
        "title": "Distinct Subsequences",
        "difficulty": 2,
        "pass": 4,
        "answer": "        if not s or not t:\n            return 0\n        dp = [[0] * (len(t) + 1) for _ in range(len(s) + 1)]\n        for i in range(len(s) + 1):\n            dp[i][0] = 1\n        for i in range(len(t) + 1):\n            dp[0][i] = 0\n        for i in range(1, len(s) + 1):\n            for j in range(1, len(t) + 1):\n                if s[i - 1] == t[j - 1]:\n                    dp[i][j] = dp[i - 1][j - 1] + dp[i - 1][j]\n                else:\n                    dp[i][j] = dp[i - 1][j]\n        return dp[-1][-1]"
    },
    {
        "number": 115,
        "title": "Distinct Subsequences",
        "difficulty": 2,
        "pass": 5,
        "answer": "        m, n = len(s), len(t)\n        dp = [[0] * (n + 1) for _ in range(m + 1)]\n        for i in range(m + 1):\n            dp[i][0] = 1\n        for j in range(1, n + 1):\n            dp[0][j] = 0\n        for i in range(1, m + 1):\n            for j in range(1, n + 1):\n                if s[i - 1] == t[j - 1]:\n                    dp[i][j] = dp[i - 1][j - 1] + dp[i - 1][j]\n                else:\n                    dp[i][j] = dp[i - 1][j]\n        return dp[-1][-1]"
    },
    {
        "number": 115,
        "title": "Distinct Subsequences",
        "difficulty": 2,
        "pass": 6,
        "answer": "        n, m = len(s), len(t)\n        dp = [[0] * (m + 1) for _ in range(n + 1)]\n        for i in range(n + 1):\n            dp[i][0] = 1\n        for j in range(1, m + 1):\n            dp[0][j] = 0\n        for i in range(1, n + 1):\n            for j in range(1, m + 1):\n                if s[i - 1] == t[j - 1]:\n                    dp[i][j] = dp[i - 1][j - 1] + dp[i - 1][j]\n                else:\n                    dp[i][j] = dp[i - 1][j]\n        return dp[-1][-1]"
    },
    {
        "number": 115,
        "title": "Distinct Subsequences",
        "difficulty": 2,
        "pass": 7,
        "answer": "        m, n = len(s), len(t)\n        dp = [[0] * (n + 1) for _ in range(m + 1)]\n        for i in range(m + 1):\n            dp[i][0] = 1\n        for j in range(1, n + 1):\n            dp[0][j] = 0\n        for i in range(1, m + 1):\n            for j in range(1, n + 1):\n                if s[i - 1] == t[j - 1]:\n                    dp[i][j] = dp[i - 1][j - 1] + dp[i - 1][j]\n                else:\n                    dp[i][j] = dp[i - 1][j]\n        return dp[m][n]"
    },
    {
        "number": 115,
        "title": "Distinct Subsequences",
        "difficulty": 2,
        "pass": 8,
        "answer": "        m, n = len(s), len(t)\n        dp = [[0] * (n + 1) for _ in range(m + 1)]\n        for i in range(m + 1):\n            dp[i][0] = 1\n        for j in range(1, n + 1):\n            dp[0][j] = 0\n        for i in range(1, m + 1):\n            for j in range(1, n + 1):\n                if s[i - 1] == t[j - 1]:\n                    dp[i][j] = dp[i - 1][j - 1] + dp[i - 1][j]\n                else:\n                    dp[i][j] = dp[i - 1][j]\n        return dp[-1][-1]"
    },
    {
        "number": 115,
        "title": "Distinct Subsequences",
        "difficulty": 2,
        "pass": 9,
        "answer": "        if not s or not t:\n            return 0\n        dp = [[0] * (len(t) + 1) for _ in range(len(s) + 1)]\n        for i in range(1, len(s) + 1):\n            dp[i][0] = 1\n        for i in range(1, len(t) + 1):\n            dp[0][i] = 0\n        for i in range(1, len(s) + 1):\n            for j in range(1, len(t) + 1):\n                if s[i - 1] == t[j - 1]:\n                    dp[i][j] = dp[i - 1][j - 1] + dp[i - 1][j]\n                else:\n                    dp[i][j] = dp[i - 1][j]\n        return dp[-1][-1]"
    },
    {
        "number": 116,
        "title": "Populating Next Right Pointers in Each Node",
        "difficulty": 1,
        "pass": 0,
        "answer": "        if not root:\n            return None\n        queue = deque([root])\n        while queue:\n            node = queue.popleft()\n            if node.left:\n                node.left.next = node.right\n                queue.append(node.left)\n            if node.right:\n                node.right.next = node.left\n                queue.append(node.right)\n            if node.next:\n                node.next.next = node.right\n                queue.append(node.next)\n        return root"
    },
    {
        "number": 116,
        "title": "Populating Next Right Pointers in Each Node",
        "difficulty": 1,
        "pass": 1,
        "answer": "        if not root:\n            return root\n        queue = deque([root])\n        while queue:\n            node = queue.popleft()\n            if node.left:\n                node.left.next = node.right\n                if node.next:\n                    queue.append(node.next)\n                node.next = node.left\n            if node.right:\n                node.right.next = node.left\n                if node.next:\n                    queue.append(node.next)\n                node.next = node.right\n        return root"
    },
    {
        "number": 116,
        "title": "Populating Next Right Pointers in Each Node",
        "difficulty": 1,
        "pass": 2,
        "answer": "        if not root:\n            return\n        q = deque()\n        q.append(root)\n        while q:\n            node = q.popleft()\n            if node.left:\n                node.left.next = node.right\n                q.append(node.left)\n            if node.right:\n                node.right.next = node.left\n                q.append(node.right)\n        while node.next:\n            node = node.next\n            if node.left:\n                node.left.next = node.right\n                q.append(node.left)\n            if node.right:\n                node.right.next = node.left\n                q.append(node.right)\n        return root"
    },
    {
        "number": 116,
        "title": "Populating Next Right Pointers in Each Node",
        "difficulty": 1,
        "pass": 3,
        "answer": "        if not root:\n            return\n        queue = collections.deque([root])\n        while queue:\n            node = queue.popleft()\n            if node.left:\n                node.left.next = node.right\n                queue.append(node.left)\n            if node.right:\n                node.right.next = node.left\n                queue.append(node.right)\n            if node.next:\n                node.next.next = None\n                queue.append(node.next)\n        return root"
    },
    {
        "number": 116,
        "title": "Populating Next Right Pointers in Each Node",
        "difficulty": 1,
        "pass": 4,
        "answer": "        if not root:\n            return\n        q = deque()\n        q.append(root)\n        while q:\n            node = q.popleft()\n            if node.left:\n                node.left.next = node.right\n                q.append(node.left)\n            if node.right:\n                node.right.next = node.left\n                q.append(node.right)\n        while node.next:\n            node = node.next\n            if node.left:\n                node.left.next = node.right\n                q.append(node.left)\n            if node.right:\n                node.right.next = node.left\n                q.append(node.right)\n        return root"
    },
    {
        "number": 116,
        "title": "Populating Next Right Pointers in Each Node",
        "difficulty": 1,
        "pass": 5,
        "answer": "        self.val = val\n        self.left = left\n        self.right = right\n        self.next = None"
    },
    {
        "number": 116,
        "title": "Populating Next Right Pointers in Each Node",
        "difficulty": 1,
        "pass": 6,
        "answer": "        if not root:\n            return\n        q = deque()\n        q.append(root)\n        while q:\n            node = q.popleft()\n            if node.left:\n                node.left.next = node.right\n                q.append(node.left)\n            if node.right:\n                node.right.next = node.left\n                q.append(node.right)\n            if node.next:\n                node.next.next = None\n                q.append(node.next)"
    },
    {
        "number": 116,
        "title": "Populating Next Right Pointers in Each Node",
        "difficulty": 1,
        "pass": 7,
        "answer": "        if not root:\n            return\n        q = deque()\n        q.append(root)\n        while q:\n            node = q.popleft()\n            if node.left:\n                node.left.next = node.right\n                q.append(node.left)\n            if node.right:\n                node.right.next = node.left\n                q.append(node.right)\n        while node.next:\n            node = node.next\n            if node.left:\n                node.left.next = node.right\n                q.append(node.left)\n            if node.right:\n                node.right.next = node.left\n                q.append(node.right)\n        return root"
    },
    {
        "number": 116,
        "title": "Populating Next Right Pointers in Each Node",
        "difficulty": 1,
        "pass": 8,
        "answer": "        if not root:\n            return\n        q = deque()\n        q.append(root)\n        while q:\n            node = q.popleft()\n            if node.left:\n                node.left.next = node.right\n                q.append(node.left)\n            if node.right:\n                node.right.next = node.left\n                q.append(node.right)\n            if node.next:\n                node.next.next = None\n                q.append(node.next)\n        return root"
    },
    {
        "number": 116,
        "title": "Populating Next Right Pointers in Each Node",
        "difficulty": 1,
        "pass": 9,
        "answer": "        if not root:\n            return\n        q = deque()\n        q.append(root)\n        while q:\n            node = q.popleft()\n            if node.left:\n                node.left.next = node.right\n                q.append(node.left)\n            if node.right:\n                node.right.next = node.left\n                q.append(node.right)\n            if node.next:\n                node.next.next = None\n                q.append(node.next)\n        while root:\n            root.left.next = root.right\n            root.right.next = root.next.left if root.next else None\n            root = root.next\n        return root"
    },
    {
        "number": 117,
        "title": "Populating Next Right Pointers in Each Node II",
        "difficulty": 1,
        "pass": 0,
        "answer": "        self.val = val\n        self.left = left\n        self.right = right\n        self.next = None"
    },
    {
        "number": 117,
        "title": "Populating Next Right Pointers in Each Node II",
        "difficulty": 1,
        "pass": 1,
        "answer": "        if not root:\n            return root\n        queue = deque()\n        queue.append(root)\n        while queue:\n            node = queue.popleft()\n            if node.left:\n                node.left.next = node.right\n                queue.append(node.left)\n            if node.right:\n                node.right.next = node.left\n                queue.append(node.right)\n            if node.next:\n                node.next.next = None\n                queue.append(node.next)\n        return root"
    },
    {
        "number": 117,
        "title": "Populating Next Right Pointers in Each Node II",
        "difficulty": 1,
        "pass": 2,
        "answer": "        self.val = val\n        self.left = left\n        self.right = right\n        self.next = None"
    },
    {
        "number": 117,
        "title": "Populating Next Right Pointers in Each Node II",
        "difficulty": 1,
        "pass": 3,
        "answer": "        if not root:\n            return None\n        curr = root\n        while curr:\n            if curr.left:\n                curr.left.next = curr.right\n                if curr.next:\n                    curr.right.next = curr.next.left\n                else:\n                    curr.right.next = None\n            if curr.right:\n                curr.right.next = curr.left\n                if curr.next:\n                    curr.left.next = curr.next.right\n                else:\n                    curr.left.next = None\n            curr = curr.next\n        return root"
    },
    {
        "number": 117,
        "title": "Populating Next Right Pointers in Each Node II",
        "difficulty": 1,
        "pass": 4,
        "answer": "        if not root:\n            return\n        queue = collections.deque()\n        queue.append(root)\n        while queue:\n            node = queue.popleft()\n            if node.left:\n                node.left.next = node.right\n                queue.append(node.left)\n            if node.right:\n                node.right.next = node.left\n                queue.append(node.right)\n            if node.next:\n                node.next.next = None\n                queue.append(node.next)"
    },
    {
        "number": 117,
        "title": "Populating Next Right Pointers in Each Node II",
        "difficulty": 1,
        "pass": 5,
        "answer": "        if not root:\n            return\n        queue = deque()\n        queue.append(root)\n        while queue:\n            node = queue.popleft()\n            if node.left:\n                node.left.next = node.right\n                queue.append(node.left)\n            if node.right:\n                node.right.next = node.left\n                queue.append(node.right)\n            if node.next:\n                node.next.next = None\n                queue.append(node.next)"
    },
    {
        "number": 117,
        "title": "Populating Next Right Pointers in Each Node II",
        "difficulty": 1,
        "pass": 6,
        "answer": "        if not root:\n            return root\n        q = deque()\n        q.append(root)\n        while q:\n            node = q.popleft()\n            if node.left:\n                node.left.next = node.right\n                q.append(node.left)\n            if node.right:\n                node.right.next = node.left\n                q.append(node.right)\n        return root"
    },
    {
        "number": 117,
        "title": "Populating Next Right Pointers in Each Node II",
        "difficulty": 1,
        "pass": 7,
        "answer": "        if not root:\n            return root\n        q = deque()\n        q.append(root)\n        while q:\n            node = q.popleft()\n            if node.left:\n                node.left.next = node.right\n                q.append(node.left)\n            if node.right:\n                node.right.next = node.left\n                q.append(node.right)\n            if node.next:\n                node.next.next = None\n                q.append(node.next)\n        return root"
    },
    {
        "number": 117,
        "title": "Populating Next Right Pointers in Each Node II",
        "difficulty": 1,
        "pass": 8,
        "answer": "        if not root:\n            return root\n        q = deque()\n        q.append(root)\n        while q:\n            size = len(q)\n            for i in range(size):\n                node = q.popleft()\n                if i == size - 1:\n                    node.next = None\n                else:\n                    node.next = q[0]\n                if node.left:\n                    q.append(node.left)\n                if node.right:\n                    q.append(node.right)\n        return root"
    },
    {
        "number": 117,
        "title": "Populating Next Right Pointers in Each Node II",
        "difficulty": 1,
        "pass": 9,
        "answer": "        if not root:\n            return\n        q = deque()\n        q.append(root)\n        while q:\n            node = q.popleft()\n            if node.left:\n                node.left.next = node.right\n                q.append(node.left)\n            if node.right:\n                node.right.next = node.left\n                q.append(node.right)\n            if not node.left and not node.right:\n                node.next = None\n        return root"
    },
    {
        "number": 118,
        "title": "Pascal\"s Triangle",
        "difficulty": 0,
        "pass": 0,
        "answer": "        if numRows == 0:\n            return []\n        if numRows == 1:\n            return [[1]]\n        pascal = [[1], [1, 1]]\n        for i in range(2, numRows):\n            row = []\n            for j in range(i + 1):\n                if j == 0 or j == i:\n                    row.append(1)\n                else:\n                    row.append(pascal[i - 1][j - 1] + pascal[i - 1][j])\n            pascal.append(row)\n        return pascal"
    },
    {
        "number": 118,
        "title": "Pascal\"s Triangle",
        "difficulty": 0,
        "pass": 1,
        "answer": "        if numRows == 0:\n            return []\n        if numRows == 1:\n            return [[1]]\n        if numRows == 2:\n            return [[1], [1, 1]]\n        if numRows == 3:\n            return [[1], [1, 1], [1, 2, 1]]\n        if numRows == 4:\n            return [[1], [1, 1], [1, 2, 1], [1, 3, 3, 1]]\n        if numRows == 5:\n            return [[1], [1, 1], [1, 2, 1], [1, 3, 3, 1], [1, 4, 6, 4, 1]]\n        if numRows == 6:\n            return [[1], [1, 1], [1, 2, 1], [1, 3, 3, 1], [1, 4, 6, 4, 1], [1, 5, 10, 10, 5, 1]]\n        if numRows == 7:\n            return [[1], [1, 1], [1, 2, 1], [1, 3, 3"
    },
    {
        "number": 118,
        "title": "Pascal\"s Triangle",
        "difficulty": 0,
        "pass": 2,
        "answer": "        if numRows == 0:\n            return []\n        if numRows == 1:\n            return [[1]]\n        if numRows == 2:\n            return [[1], [1, 1]]\n        res = [[1], [1, 1]]\n        for i in range(2, numRows):\n            tmp = []\n            for j in range(i + 1):\n                if j == 0 or j == i:\n                    tmp.append(1)\n                else:\n                    tmp.append(res[i - 1][j - 1] + res[i - 1][j])\n            res.append(tmp)\n        return res"
    },
    {
        "number": 118,
        "title": "Pascal\"s Triangle",
        "difficulty": 0,
        "pass": 3,
        "answer": "        if numRows == 0:\n            return []\n        if numRows == 1:\n            return [[1]]\n        result = [[1], [1, 1]]\n        for i in range(2, numRows):\n            row = [1]\n            for j in range(1, i):\n                row.append(result[i - 1][j - 1] + result[i - 1][j])\n            row.append(1)\n            result.append(row)\n        return result"
    },
    {
        "number": 118,
        "title": "Pascal\"s Triangle",
        "difficulty": 0,
        "pass": 4,
        "answer": "        if numRows == 0:\n            return []\n        if numRows == 1:\n            return [[1]]\n        if numRows == 2:\n            return [[1], [1, 1]]\n        if numRows == 3:\n            return [[1], [1, 1], [1, 2, 1]]\n        if numRows == 4:\n            return [[1], [1, 1], [1, 2, 1], [1, 3, 3, 1]]\n        if numRows == 5:\n            return [[1], [1, 1], [1, 2, 1], [1, 3, 3, 1], [1, 4, 6, 4, 1]]\n        if numRows == 6:\n            return [[1], [1, 1], [1, 2, 1], [1, 3, 3, 1], [1, 4, 6, 4, 1], [1, 5, 10, 10, 5, 1]]\n        if numRows == 7:\n            return [[1], [1, 1], [1, 2, 1], [1, 3, 3"
    },
    {
        "number": 118,
        "title": "Pascal\"s Triangle",
        "difficulty": 0,
        "pass": 5,
        "answer": "        if numRows == 0:\n            return []\n        if numRows == 1:\n            return [[1]]\n        res = [[1], [1, 1]]\n        for i in range(2, numRows):\n            row = []\n            for j in range(i + 1):\n                if j == 0 or j == i:\n                    row.append(1)\n                else:\n                    row.append(res[i - 1][j - 1] + res[i - 1][j])\n            res.append(row)\n        return res"
    },
    {
        "number": 118,
        "title": "Pascal\"s Triangle",
        "difficulty": 0,
        "pass": 6,
        "answer": "        if numRows == 0:\n            return []\n        if numRows == 1:\n            return [[1]]\n        if numRows == 2:\n            return [[1], [1, 1]]\n        res = [[1], [1, 1]]\n        for i in range(2, numRows):\n            row = []\n            for j in range(i + 1):\n                if j == 0 or j == i:\n                    row.append(1)\n                else:\n                    row.append(res[i - 1][j - 1] + res[i - 1][j])\n            res.append(row)\n        return res"
    },
    {
        "number": 118,
        "title": "Pascal\"s Triangle",
        "difficulty": 0,
        "pass": 7,
        "answer": "        if numRows == 0:\n            return []\n        if numRows == 1:\n            return [[1]]\n        if numRows == 2:\n            return [[1], [1, 1]]\n        if numRows == 3:\n            return [[1], [1, 1], [1, 2, 1]]\n        if numRows == 4:\n            return [[1], [1, 1], [1, 2, 1], [1, 3, 3, 1]]\n        if numRows == 5:\n            return [[1], [1, 1], [1, 2, 1], [1, 3, 3, 1], [1, 4, 6, 4, 1]]\n        if numRows == 6:\n            return [[1], [1, 1], [1, 2, 1], [1, 3, 3, 1], [1, 4, 6, 4, 1], [1, 5, 10, 10, 5, 1]]\n        if numRows == 7:\n            return [[1], [1, 1], [1, 2, 1], [1, 3, 3"
    },
    {
        "number": 118,
        "title": "Pascal\"s Triangle",
        "difficulty": 0,
        "pass": 8,
        "answer": "        if numRows == 0:\n            return []\n        if numRows == 1:\n            return [[1]]\n        res = [[1], [1, 1]]\n        for i in range(2, numRows):\n            tmp = []\n            for j in range(i + 1):\n                if j == 0 or j == i:\n                    tmp.append(1)\n                else:\n                    tmp.append(res[i - 1][j - 1] + res[i - 1][j])\n            res.append(tmp)\n        return res"
    },
    {
        "number": 118,
        "title": "Pascal\"s Triangle",
        "difficulty": 0,
        "pass": 9,
        "answer": "        if numRows == 0:\n            return []\n        if numRows == 1:\n            return [[1]]\n        if numRows == 2:\n            return [[1], [1, 1]]\n        res = [[1], [1, 1]]\n        for i in range(2, numRows):\n            row = []\n            for j in range(i + 1):\n                if j == 0 or j == i:\n                    row.append(1)\n                else:\n                    row.append(res[i - 1][j - 1] + res[i - 1][j])\n            res.append(row)\n        return res"
    },
    {
        "number": 119,
        "title": "Pascal\"s Triangle II",
        "difficulty": 0,
        "pass": 0,
        "answer": "        if rowIndex == 0:\n            return [1]\n        if rowIndex == 1:\n            return [1,1]\n        if rowIndex == 2:\n            return [1,2,1]\n        if rowIndex == 3:\n            return [1,3,3,1]\n        if rowIndex == 4:\n            return [1,4,6,4,1]\n        if rowIndex == 5:\n            return [1,5,10,10,5,1]\n        if rowIndex == 6:\n            return [1,6,15,20,15,6,1]\n        if rowIndex == 7:\n            return [1,7,21,35,35,21,7,1]\n        if rowIndex == 8:\n            return [1,8,28,56,70,56,28,8,1]\n        if rowIndex == 9:\n            return [1,9,36,84,126,126,84,36,9,1]\n        if rowIndex == 10:\n            return [1,10,45,120,210"
    },
    {
        "number": 119,
        "title": "Pascal\"s Triangle II",
        "difficulty": 0,
        "pass": 1,
        "answer": "        if rowIndex == 0:\n            return [1]\n        if rowIndex == 1:\n            return [1, 1]\n        res = [1, 1]\n        for i in range(2, rowIndex + 1):\n            res.append(res[-1] + res[-2])\n        return res"
    },
    {
        "number": 119,
        "title": "Pascal\"s Triangle II",
        "difficulty": 0,
        "pass": 2,
        "answer": "        if rowIndex == 0:\n            return [1]\n        if rowIndex == 1:\n            return [1, 1]\n        result = [1, 1]\n        for i in range(2, rowIndex + 1):\n            result.append(result[i - 1] + result[i - 2])\n        return result\n"
    },
    {
        "number": 119,
        "title": "Pascal\"s Triangle II",
        "difficulty": 0,
        "pass": 3,
        "answer": "        if rowIndex == 0:\n            return [1]\n        if rowIndex == 1:\n            return [1, 1]\n        if rowIndex == 2:\n            return [1, 2, 1]\n        if rowIndex == 3:\n            return [1, 3, 3, 1]\n        if rowIndex == 4:\n            return [1, 4, 6, 4, 1]\n        if rowIndex == 5:\n            return [1, 5, 10, 10, 5, 1]\n        if rowIndex == 6:\n            return [1, 6, 15, 20, 15, 6, 1]\n        if rowIndex == 7:\n            return [1, 7, 21, 35, 35, 21, 7, 1]\n        if rowIndex == 8:\n            return [1, 8, 28, 56, 70, 56, 28, 8, 1]\n        if rowIndex == 9:\n            return [1, 9, 36, 84, 126, 126, 84, 36, 9, 1]\n        if rowIndex == 10:\n            return [1, 10, 45, 120, 210"
    },
    {
        "number": 119,
        "title": "Pascal\"s Triangle II",
        "difficulty": 0,
        "pass": 4,
        "answer": "        if rowIndex == 0:\n            return [1]\n        if rowIndex == 1:\n            return [1, 1]\n        if rowIndex == 2:\n            return [1, 2, 1]\n        if rowIndex == 3:\n            return [1, 3, 3, 1]\n        if rowIndex == 4:\n            return [1, 4, 6, 4, 1]\n        if rowIndex == 5:\n            return [1, 5, 10, 10, 5, 1]\n        if rowIndex == 6:\n            return [1, 6, 15, 20, 15, 6, 1]\n        if rowIndex == 7:\n            return [1, 7, 21, 35, 35, 21, 7, 1]\n        if rowIndex == 8:\n            return [1, 8, 28, 56, 70, 56, 28, 8, 1]\n        if rowIndex == 9:\n            return [1, 9, 36, 84, 126, 126, 84, 36, 9, 1]\n        if rowIndex == 10:\n            return [1, 10, 45, 120, 210"
    },
    {
        "number": 119,
        "title": "Pascal\"s Triangle II",
        "difficulty": 0,
        "pass": 5,
        "answer": "        if rowIndex == 0:\n            return [1]\n        if rowIndex == 1:\n            return [1, 1]\n        res = [1, 1]\n        for i in range(2, rowIndex + 1):\n            tmp = []\n            for j in range(i):\n                if j == 0 or j == i - 1:\n                    tmp.append(1)\n                else:\n                    tmp.append(res[j - 1] + res[j])\n            res = tmp\n        return res"
    },
    {
        "number": 119,
        "title": "Pascal\"s Triangle II",
        "difficulty": 0,
        "pass": 6,
        "answer": "        if rowIndex == 0:\n            return [1]\n        if rowIndex == 1:\n            return [1, 1]\n        if rowIndex == 2:\n            return [1, 2, 1]\n        if rowIndex == 3:\n            return [1, 3, 3, 1]\n        if rowIndex == 4:\n            return [1, 4, 6, 4, 1]\n        if rowIndex == 5:\n            return [1, 5, 10, 10, 5, 1]\n        if rowIndex == 6:\n            return [1, 6, 15, 20, 15, 6, 1]\n        if rowIndex == 7:\n            return [1, 7, 21, 35, 35, 21, 7, 1]\n        if rowIndex == 8:\n            return [1, 8, 28, 56, 70, 56, 28, 8, 1]\n        if rowIndex == 9:\n            return [1, 9, 36, 84, 126, 126, 84, 36, 9, 1]\n        if rowIndex == 10:\n            return [1, 10, 45, 120, 210"
    },
    {
        "number": 119,
        "title": "Pascal\"s Triangle II",
        "difficulty": 0,
        "pass": 7,
        "answer": "        if rowIndex == 0:\n            return [1]\n        if rowIndex == 1:\n            return [1, 1]\n        res = [1, 1]\n        for i in range(2, rowIndex + 1):\n            res.append(res[i - 1] + res[i - 2])\n        return res"
    },
    {
        "number": 119,
        "title": "Pascal\"s Triangle II",
        "difficulty": 0,
        "pass": 8,
        "answer": "        if rowIndex == 0:\n            return [1]\n        if rowIndex == 1:\n            return [1, 1]\n        if rowIndex == 2:\n            return [1, 2, 1]\n        if rowIndex == 3:\n            return [1, 3, 3, 1]\n        if rowIndex == 4:\n            return [1, 4, 6, 4, 1]\n        if rowIndex == 5:\n            return [1, 5, 10, 10, 5, 1]\n        if rowIndex == 6:\n            return [1, 6, 15, 20, 15, 6, 1]\n        if rowIndex == 7:\n            return [1, 7, 21, 35, 35, 21, 7, 1]\n        if rowIndex == 8:\n            return [1, 8, 28, 56, 70, 56, 28, 8, 1]\n        if rowIndex == 9:\n            return [1, 9, 36, 84, 126, 126, 84, 36, 9, 1]\n        if rowIndex == 10:\n            return [1, 10, 45, 120, 210"
    },
    {
        "number": 119,
        "title": "Pascal\"s Triangle II",
        "difficulty": 0,
        "pass": 9,
        "answer": "        if rowIndex == 0:\n            return [1]\n        if rowIndex == 1:\n            return [1, 1]\n        if rowIndex == 2:\n            return [1, 2, 1]\n        if rowIndex == 3:\n            return [1, 3, 3, 1]\n        if rowIndex == 4:\n            return [1, 4, 6, 4, 1]\n        if rowIndex == 5:\n            return [1, 5, 10, 10, 5, 1]\n        if rowIndex == 6:\n            return [1, 6, 15, 20, 15, 6, 1]\n        if rowIndex == 7:\n            return [1, 7, 21, 35, 35, 21, 7, 1]\n        if rowIndex == 8:\n            return [1, 8, 28, 56, 70, 56, 28, 8, 1]\n        if rowIndex == 9:\n            return [1, 9, 36, 84, 126, 126, 84, 36, 9, 1]\n        if rowIndex == 10:\n            return [1, 10, 45, 120, 210"
    },
    {
        "number": 120,
        "title": "Triangle",
        "difficulty": 1,
        "pass": 0,
        "answer": "        n = len(triangle)\n        if n == 1:\n            return triangle[0][0]\n        for i in range(1, n):\n            for j in range(len(triangle[i])):\n                if j == 0:\n                    triangle[i][j] += triangle[i - 1][j]\n                elif j == len(triangle[i]) - 1:\n                    triangle[i][j] += triangle[i - 1][j - 1]\n                else:\n                    triangle[i][j] += min(triangle[i - 1][j], triangle[i - 1][j - 1])\n        return min(triangle[-1])"
    },
    {
        "number": 120,
        "title": "Triangle",
        "difficulty": 1,
        "pass": 1,
        "answer": "        if not triangle:\n            return 0\n        n = len(triangle)\n        for i in range(1, n):\n            for j in range(len(triangle[i])):\n                if j == 0:\n                    triangle[i][j] += triangle[i - 1][j]\n                elif j == len(triangle[i]) - 1:\n                    triangle[i][j] += triangle[i - 1][j - 1]\n                else:\n                    triangle[i][j] += min(triangle[i - 1][j], triangle[i - 1][j - 1])\n        return min(triangle[-1])"
    },
    {
        "number": 120,
        "title": "Triangle",
        "difficulty": 1,
        "pass": 2,
        "answer": "        n = len(triangle)\n        if n == 0:\n            return 0\n        if n == 1:\n            return triangle[0][0]\n        for i in range(1, n):\n            for j in range(len(triangle[i])):\n                if j == 0:\n                    triangle[i][j] += triangle[i - 1][j]\n                elif j == len(triangle[i]) - 1:\n                    triangle[i][j] += triangle[i - 1][j - 1]\n                else:\n                    triangle[i][j] += min(triangle[i - 1][j], triangle[i - 1][j - 1])\n        return min(triangle[n - 1])"
    },
    {
        "number": 120,
        "title": "Triangle",
        "difficulty": 1,
        "pass": 3,
        "answer": "        n = len(triangle)\n        dp = [[0] * n for _ in range(n)]\n        dp[0][0] = triangle[0][0]\n        for i in range(1, n):\n            for j in range(i + 1):\n                if j == 0:\n                    dp[i][j] = dp[i - 1][j] + triangle[i][j]\n                elif j == i:\n                    dp[i][j] = dp[i - 1][j - 1] + triangle[i][j]\n                else:\n                    dp[i][j] = min(dp[i - 1][j - 1], dp[i - 1][j]) + triangle[i][j]\n        return min(dp[n - 1])"
    },
    {
        "number": 120,
        "title": "Triangle",
        "difficulty": 1,
        "pass": 4,
        "answer": "        n = len(triangle)\n        dp = [[0] * n for _ in range(n)]\n        dp[0][0] = triangle[0][0]\n        for i in range(1, n):\n            for j in range(i + 1):\n                if j == 0:\n                    dp[i][j] = dp[i - 1][j] + triangle[i][j]\n                elif j == i:\n                    dp[i][j] = dp[i - 1][j - 1] + triangle[i][j]\n                else:\n                    dp[i][j] = min(dp[i - 1][j - 1], dp[i - 1][j]) + triangle[i][j]\n        return min(dp[n - 1])"
    },
    {
        "number": 120,
        "title": "Triangle",
        "difficulty": 1,
        "pass": 5,
        "answer": "        if len(triangle) == 1:\n            return triangle[0][0]\n        for i in range(1, len(triangle)):\n            for j in range(len(triangle[i])):\n                if j == 0:\n                    triangle[i][j] += triangle[i-1][j]\n                elif j == len(triangle[i])-1:\n                    triangle[i][j] += triangle[i-1][j-1]\n                else:\n                    triangle[i][j] += min(triangle[i-1][j], triangle[i-1][j-1])\n        return min(triangle[-1])"
    },
    {
        "number": 120,
        "title": "Triangle",
        "difficulty": 1,
        "pass": 6,
        "answer": "        n = len(triangle)\n        if n == 1:\n            return triangle[0][0]\n        for i in range(1, n):\n            for j in range(len(triangle[i])):\n                if j == 0:\n                    triangle[i][j] += triangle[i - 1][j]\n                elif j == len(triangle[i]) - 1:\n                    triangle[i][j] += triangle[i - 1][j - 1]\n                else:\n                    triangle[i][j] += min(triangle[i - 1][j], triangle[i - 1][j - 1])\n        return min(triangle[-1])"
    },
    {
        "number": 120,
        "title": "Triangle",
        "difficulty": 1,
        "pass": 7,
        "answer": "        n = len(triangle)\n        if n == 1:\n            return triangle[0][0]\n        for i in range(1, n):\n            for j in range(len(triangle[i])):\n                if j == 0:\n                    triangle[i][j] += triangle[i - 1][j]\n                elif j == len(triangle[i]) - 1:\n                    triangle[i][j] += triangle[i - 1][j - 1]\n                else:\n                    triangle[i][j] += min(triangle[i - 1][j], triangle[i - 1][j - 1])\n        return min(triangle[-1])"
    },
    {
        "number": 120,
        "title": "Triangle",
        "difficulty": 1,
        "pass": 8,
        "answer": "        n = len(triangle)\n        if n == 1:\n            return triangle[0][0]\n        for i in range(1, n):\n            for j in range(len(triangle[i])):\n                if j == 0:\n                    triangle[i][j] += triangle[i - 1][j]\n                elif j == len(triangle[i]) - 1:\n                    triangle[i][j] += triangle[i - 1][j - 1]\n                else:\n                    triangle[i][j] += min(triangle[i - 1][j], triangle[i - 1][j - 1])\n        return min(triangle[n - 1])"
    },
    {
        "number": 120,
        "title": "Triangle",
        "difficulty": 1,
        "pass": 9,
        "answer": "        n = len(triangle)\n        if n == 1:\n            return triangle[0][0]\n        for i in range(1, n):\n            for j in range(len(triangle[i])):\n                if j == 0:\n                    triangle[i][j] += triangle[i - 1][j]\n                elif j == len(triangle[i]) - 1:\n                    triangle[i][j] += triangle[i - 1][j - 1]\n                else:\n                    triangle[i][j] += min(triangle[i - 1][j], triangle[i - 1][j - 1])\n        return min(triangle[-1])"
    },
    {
        "number": 121,
        "title": "Best Time to Buy and Sell Stock",
        "difficulty": 0,
        "pass": 0,
        "answer": "        n = len(prices)\n        if n == 0:\n            return 0\n        if n == 1:\n            return 0\n        if n == 2:\n            return max(0, prices[1] - prices[0])\n        dp = [[0 for _ in range(3)] for _ in range(n)]\n        dp[0][0] = 0\n        dp[0][1] = -prices[0]\n        dp[0][2] = 0\n        for i in range(1, n):\n            dp[i][0] = max(dp[i - 1][0], dp[i - 1][1] + prices[i])\n            dp[i][1] = max(dp[i - 1][1], dp[i - 1][2] - prices[i])\n            dp[i][2] = max(dp[i - 1][2], dp[i - 1][0] - prices[i])\n        return max(dp[n - 1][0], dp[n - 1][1], dp[n - 1][2])\n"
    },
    {
        "number": 121,
        "title": "Best Time to Buy and Sell Stock",
        "difficulty": 0,
        "pass": 1,
        "answer": "        if not prices:\n            return 0\n        n = len(prices)\n        dp_i_0 = 0\n        dp_i_1 = -prices[0]\n        for i in range(1, n):\n            dp_i_0 = max(dp_i_0, dp_i_1 + prices[i])\n            dp_i_1 = max(dp_i_1, -prices[i])\n        return dp_i_0"
    },
    {
        "number": 121,
        "title": "Best Time to Buy and Sell Stock",
        "difficulty": 0,
        "pass": 2,
        "answer": "        n = len(prices)\n        if n == 0:\n            return 0\n        if n == 1:\n            return 0\n        if n == 2:\n            return max(0, prices[1] - prices[0])\n        dp = [[0] * 3 for _ in range(n)]\n        dp[0][0] = 0\n        dp[0][1] = -prices[0]\n        dp[0][2] = 0\n        for i in range(1, n):\n            dp[i][0] = max(dp[i - 1][0], dp[i - 1][1] + prices[i])\n            dp[i][1] = max(dp[i - 1][1], dp[i - 1][2] - prices[i])\n            dp[i][2] = max(dp[i - 1][2], dp[i - 1][0] - prices[i])\n        return max(dp[n - 1][0], dp[n - 1][1], dp[n - 1][2])"
    },
    {
        "number": 121,
        "title": "Best Time to Buy and Sell Stock",
        "difficulty": 0,
        "pass": 3,
        "answer": "        if not prices:\n            return 0\n        n = len(prices)\n        if n == 1:\n            return 0\n        dp = [[0] * 2 for _ in range(n)]\n        dp[0][0] = 0\n        dp[0][1] = -prices[0]\n        for i in range(1, n):\n            dp[i][0] = max(dp[i - 1][0], dp[i - 1][1] + prices[i])\n            dp[i][1] = max(dp[i - 1][1], dp[i - 1][0] - prices[i])\n        return dp[-1][0]"
    },
    {
        "number": 121,
        "title": "Best Time to Buy and Sell Stock",
        "difficulty": 0,
        "pass": 4,
        "answer": "        if not prices:\n            return 0\n        \n        n = len(prices)\n        if n == 1:\n            return 0\n        \n        dp_i_0 = 0\n        dp_i_1 = -prices[0]\n        \n        for i in range(1, n):\n            dp_i_0 = max(dp_i_0, dp_i_1 + prices[i])\n            dp_i_1 = max(dp_i_1, -prices[i])\n            \n        return dp_i_0"
    },
    {
        "number": 121,
        "title": "Best Time to Buy and Sell Stock",
        "difficulty": 0,
        "pass": 5,
        "answer": "        if not prices:\n            return 0\n        n = len(prices)\n        dp_i_0 = 0\n        dp_i_1 = -prices[0]\n        for i in range(1, n):\n            dp_i_0 = max(dp_i_0, dp_i_1 + prices[i])\n            dp_i_1 = max(dp_i_1, -prices[i])\n        return dp_i_0"
    },
    {
        "number": 121,
        "title": "Best Time to Buy and Sell Stock",
        "difficulty": 0,
        "pass": 6,
        "answer": "        n = len(prices)\n        if n == 0:\n            return 0\n        dp_i_0 = 0\n        dp_i_1 = float('-inf')\n        for i in range(n):\n            dp_i_0 = max(dp_i_0, dp_i_1 + prices[i])\n            dp_i_1 = max(dp_i_1, -prices[i])\n        return dp_i_0"
    },
    {
        "number": 121,
        "title": "Best Time to Buy and Sell Stock",
        "difficulty": 0,
        "pass": 7,
        "answer": "        if not prices:\n            return 0\n        min_price = prices[0]\n        max_profit = 0\n        for i in range(1, len(prices)):\n            if prices[i] < min_price:\n                min_price = prices[i]\n            else:\n                max_profit = max(max_profit, prices[i] - min_price)\n        return max_profit"
    },
    {
        "number": 121,
        "title": "Best Time to Buy and Sell Stock",
        "difficulty": 0,
        "pass": 8,
        "answer": "        if not prices:\n            return 0\n        n = len(prices)\n        dp_i_0 = 0\n        dp_i_1 = -prices[0]\n        for i in range(1, n):\n            dp_i_0 = max(dp_i_0, dp_i_1 + prices[i])\n            dp_i_1 = max(dp_i_1, -prices[i])\n        return dp_i_0"
    },
    {
        "number": 121,
        "title": "Best Time to Buy and Sell Stock",
        "difficulty": 0,
        "pass": 9,
        "answer": "        if not prices:\n            return 0\n        if len(prices) == 1:\n            return 0\n        dp = [[0, 0] for _ in range(len(prices))]\n        dp[0][0] = 0\n        dp[0][1] = -prices[0]\n        for i in range(1, len(prices)):\n            dp[i][0] = max(dp[i - 1][0], dp[i - 1][1] + prices[i])\n            dp[i][1] = max(dp[i - 1][1], dp[i - 1][0] - prices[i])\n        return dp[-1][0]"
    },
    {
        "number": 122,
        "title": "Best Time to Buy and Sell Stock II",
        "difficulty": 1,
        "pass": 0,
        "answer": "        if not prices:\n            return 0\n        n = len(prices)\n        dp_i_0, dp_i_1 = 0, -prices[0]\n        for i in range(1, n):\n            dp_i_0 = max(dp_i_0, dp_i_1 + prices[i])\n            dp_i_1 = max(dp_i_1, -prices[i])\n        return dp_i_0"
    },
    {
        "number": 122,
        "title": "Best Time to Buy and Sell Stock II",
        "difficulty": 1,
        "pass": 1,
        "answer": "        if not prices:\n            return 0\n        n = len(prices)\n        if n == 1:\n            return 0\n        dp = [[0] * 2 for _ in range(n)]\n        dp[0][0] = 0\n        dp[0][1] = -prices[0]\n        for i in range(1, n):\n            dp[i][0] = max(dp[i - 1][0], dp[i - 1][1] + prices[i])\n            dp[i][1] = max(dp[i - 1][1], dp[i - 1][0] - prices[i])\n        return dp[-1][0]"
    },
    {
        "number": 122,
        "title": "Best Time to Buy and Sell Stock II",
        "difficulty": 1,
        "pass": 2,
        "answer": "        n = len(prices)\n        if n == 0:\n            return 0\n        dp_i_0 = 0\n        dp_i_1 = -prices[0]\n        for i in range(1, n):\n            dp_i_0 = max(dp_i_0, dp_i_1 + prices[i])\n            dp_i_1 = max(dp_i_1, -prices[i])\n        return dp_i_0"
    },
    {
        "number": 122,
        "title": "Best Time to Buy and Sell Stock II",
        "difficulty": 1,
        "pass": 3,
        "answer": "        n = len(prices)\n        if n == 0:\n            return 0\n        dp = [[0] * 2 for _ in range(n)]\n        dp[0][0] = 0\n        dp[0][1] = -prices[0]\n        for i in range(1, n):\n            dp[i][0] = max(dp[i - 1][0], dp[i - 1][1] + prices[i])\n            dp[i][1] = max(dp[i - 1][1], dp[i - 1][0] - prices[i])\n        return dp[-1][0]"
    },
    {
        "number": 123,
        "title": "Best Time to Buy and Sell Stock III",
        "difficulty": 2,
        "pass": 0,
        "answer": "        if not prices:\n            return 0\n        n = len(prices)\n        if n <= 1:\n            return 0\n        dp_i_0 = 0\n        dp_i_1 = float('-inf')\n        for i in range(n):\n            tmp = dp_i_0\n            dp_i_0 = max(dp_i_0, dp_i_1 + prices[i])\n            dp_i_1 = max(dp_i_1, tmp - prices[i])\n        return dp_i_0"
    },
    {
        "number": 123,
        "title": "Best Time to Buy and Sell Stock III",
        "difficulty": 2,
        "pass": 1,
        "answer": "        n = len(prices)\n        if n < 2:\n            return 0\n        dp_i_0 = 0\n        dp_i_1 = float('-inf')\n        for i in range(1, n):\n            dp_i_0 = max(dp_i_0, dp_i_1 + prices[i] - prices[i - 1])\n            dp_i_1 = max(dp_i_1, dp_i_0 - prices[i - 1])\n        return dp_i_0"
    },
    {
        "number": 123,
        "title": "Best Time to Buy and Sell Stock III",
        "difficulty": 2,
        "pass": 2,
        "answer": "        if not prices:\n            return 0\n        n = len(prices)\n        dp_i_0 = 0\n        dp_i_1 = -prices[0]\n        for i in range(1, n):\n            dp_i_0 = max(dp_i_0, dp_i_1 + prices[i])\n            dp_i_1 = max(dp_i_1, -prices[i])\n        return dp_i_0"
    },
    {
        "number": 123,
        "title": "Best Time to Buy and Sell Stock III",
        "difficulty": 2,
        "pass": 3,
        "answer": "        if not prices:\n            return 0\n        n = len(prices)\n        dp_i_0, dp_i_1 = 0, -prices[0]\n        for i in range(1, n):\n            dp_i_0 = max(dp_i_0, dp_i_1 + prices[i])\n            dp_i_1 = max(dp_i_1, -prices[i])\n        return dp_i_0"
    },
    {
        "number": 123,
        "title": "Best Time to Buy and Sell Stock III",
        "difficulty": 2,
        "pass": 4,
        "answer": "        n = len(prices)\n        if n == 0:\n            return 0\n        if n == 1:\n            return 0\n        if n == 2:\n            return max(0, prices[1] - prices[0])"
    },
    {
        "number": 123,
        "title": "Best Time to Buy and Sell Stock III",
        "difficulty": 2,
        "pass": 5,
        "answer": "        if not prices:\n            return 0\n        n = len(prices)\n        dp_i_0, dp_i_1 = 0, -prices[0]\n        for i in range(1, n):\n            dp_i_0 = max(dp_i_0, dp_i_1 + prices[i])\n            dp_i_1 = max(dp_i_1, -prices[i])\n        return dp_i_0"
    },
    {
        "number": 123,
        "title": "Best Time to Buy and Sell Stock III",
        "difficulty": 2,
        "pass": 6,
        "answer": "        n = len(prices)\n        if n == 0:\n            return 0\n        dp_i_0 = 0\n        dp_i_1 = float('-inf')\n        for i in range(1, n):\n            dp_i_0 = max(dp_i_0, dp_i_1 + prices[i] - prices[i - 1])\n            dp_i_1 = max(dp_i_1, dp_i_0 - prices[i - 1])\n        return dp_i_0"
    },
    {
        "number": 123,
        "title": "Best Time to Buy and Sell Stock III",
        "difficulty": 2,
        "pass": 7,
        "answer": "        n = len(prices)\n        if n == 0:\n            return 0\n        if n == 1:\n            return 0\n        if n == 2:\n            return max(prices[1] - prices[0], 0)\n        dp_i_0 = 0\n        dp_i_1 = float('-inf')\n        dp_i_2 = float('-inf')\n        for i in range(n):\n            dp_i_0 = max(dp_i_0, dp_i_1 + prices[i])\n            dp_i_1 = max(dp_i_1, dp_i_2 - prices[i])\n            dp_i_2 = max(dp_i_2, dp_i_0 - prices[i])\n        return max(dp_i_0, dp_i_1, dp_i_2)"
    },
    {
        "number": 123,
        "title": "Best Time to Buy and Sell Stock III",
        "difficulty": 2,
        "pass": 8,
        "answer": "        if not prices:\n            return 0"
    },
    {
        "number": 123,
        "title": "Best Time to Buy and Sell Stock III",
        "difficulty": 2,
        "pass": 9,
        "answer": "        n = len(prices)\n        if n < 2:\n            return 0\n        dp = [[0] * 2 for _ in range(n)]\n        dp[0][0] = 0\n        dp[0][1] = -prices[0]\n        for i in range(1, n):\n            dp[i][0] = max(dp[i - 1][0], dp[i - 1][1] + prices[i])\n            dp[i][1] = max(dp[i - 1][1], dp[i - 1][0] - prices[i])\n        return dp[-1][0]"
    },
    {
        "number": 124,
        "title": "Binary Tree Maximum Path Sum",
        "difficulty": 2,
        "pass": 0,
        "answer": "        if not root:\n            return 0\n        self.max_sum = float('-inf')\n        self.dfs(root)\n        return self.max_sum"
    },
    {
        "number": 124,
        "title": "Binary Tree Maximum Path Sum",
        "difficulty": 2,
        "pass": 1,
        "answer": "        if not root:\n            return 0\n        self.res = float('-inf')\n        self.dfs(root)\n        return self.res"
    },
    {
        "number": 124,
        "title": "Binary Tree Maximum Path Sum",
        "difficulty": 2,
        "pass": 2,
        "answer": "        if not root:\n            return 0\n        self.res = float('-inf')\n        self.dfs(root)\n        return self.res"
    },
    {
        "number": 124,
        "title": "Binary Tree Maximum Path Sum",
        "difficulty": 2,
        "pass": 3,
        "answer": "        if not root:\n            return 0\n        self.res = float('-inf')\n        self.dfs(root)\n        return self.res"
    },
    {
        "number": 124,
        "title": "Binary Tree Maximum Path Sum",
        "difficulty": 2,
        "pass": 4,
        "answer": "        if not root:\n            return 0\n        self.res = float('-inf')\n        self.dfs(root)\n        return self.res"
    },
    {
        "number": 124,
        "title": "Binary Tree Maximum Path Sum",
        "difficulty": 2,
        "pass": 5,
        "answer": "        self.max_sum = float('-inf')\n        self.dfs(root)\n        return self.max_sum"
    },
    {
        "number": 124,
        "title": "Binary Tree Maximum Path Sum",
        "difficulty": 2,
        "pass": 6,
        "answer": "        if not root:\n            return 0\n        self.res = float('-inf')\n        self.dfs(root)\n        return self.res"
    },
    {
        "number": 124,
        "title": "Binary Tree Maximum Path Sum",
        "difficulty": 2,
        "pass": 7,
        "answer": "        self.res = float('-inf')\n        self.dfs(root)\n        return self.res"
    },
    {
        "number": 124,
        "title": "Binary Tree Maximum Path Sum",
        "difficulty": 2,
        "pass": 8,
        "answer": "        self.res = float('-inf')\n        self.dfs(root)\n        return self.res"
    },
    {
        "number": 124,
        "title": "Binary Tree Maximum Path Sum",
        "difficulty": 2,
        "pass": 9,
        "answer": "        self.res = float('-inf')\n        self.dfs(root)\n        return self.res"
    },
    {
        "number": 125,
        "title": "Valid Palindrome",
        "difficulty": 0,
        "pass": 0,
        "answer": "        if not s:\n            return True\n        s = s.lower()\n        s = re.sub('[^a-z0-9]', '', s)\n        return s == s[::-1]"
    },
    {
        "number": 125,
        "title": "Valid Palindrome",
        "difficulty": 0,
        "pass": 1,
        "answer": "        if not s:\n            return True\n        s = ''.join(filter(str.isalnum, s)).lower()\n        return s == s[::-1]"
    },
    {
        "number": 125,
        "title": "Valid Palindrome",
        "difficulty": 0,
        "pass": 2,
        "answer": "        s = s.lower()\n        s = re.sub('[^a-z0-9]', '', s)\n        return s == s[::-1]"
    },
    {
        "number": 125,
        "title": "Valid Palindrome",
        "difficulty": 0,
        "pass": 3,
        "answer": "        s = s.lower()\n        s = re.sub(r'[^a-z0-9]', '', s)\n        return s == s[::-1]"
    },
    {
        "number": 125,
        "title": "Valid Palindrome",
        "difficulty": 0,
        "pass": 4,
        "answer": "        if not s:\n            return True\n        \n        s = s.lower()\n        s = re.sub(r'[^a-z0-9]', '', s)\n        return s == s[::-1]"
    },
    {
        "number": 125,
        "title": "Valid Palindrome",
        "difficulty": 0,
        "pass": 5,
        "answer": "        s = s.lower()\n        s = re.sub(r'[^a-z0-9]', '', s)\n        return s == s[::-1]"
    },
    {
        "number": 125,
        "title": "Valid Palindrome",
        "difficulty": 0,
        "pass": 6,
        "answer": "        if not s:\n            return True\n        s = ''.join(filter(str.isalnum, s)).lower()\n        return s == s[::-1]"
    },
    {
        "number": 125,
        "title": "Valid Palindrome",
        "difficulty": 0,
        "pass": 7,
        "answer": "        s = s.lower()\n        s = re.sub('[^a-z0-9]', '', s)\n        return s == s[::-1]"
    },
    {
        "number": 125,
        "title": "Valid Palindrome",
        "difficulty": 0,
        "pass": 8,
        "answer": "        s = s.lower()\n        s = re.sub('[^a-z0-9]', '', s)\n        return s == s[::-1]"
    },
    {
        "number": 125,
        "title": "Valid Palindrome",
        "difficulty": 0,
        "pass": 9,
        "answer": "        s = s.lower()\n        s = re.sub(r'[^a-z0-9]', '', s)\n        return s == s[::-1]"
    },
    {
        "number": 126,
        "title": "Word Ladder II",
        "difficulty": 2,
        "pass": 0,
        "answer": "        from collections import defaultdict\n        wordList = set(wordList)\n        wordList.add(beginWord)\n        wordList.add(endWord)\n        res = []\n        if endWord not in wordList:\n            return res"
    },
    {
        "number": 126,
        "title": "Word Ladder II",
        "difficulty": 2,
        "pass": 1,
        "answer": "        if not beginWord or not endWord or not wordList or endWord not in wordList:\n            return []\n        \n        word_set = set(wordList)\n        word_set.add(beginWord)\n        word_set.add(endWord)\n        \n        word_dict = defaultdict(list)\n        for word in word_set:\n            for i in range(len(word)):\n                key = word[:i] + \"_\" + word[i+1:]\n                word_dict[key].append(word)\n        \n        queue = deque([(beginWord, [beginWord])])\n        visited = set()\n        while queue:\n            word, path = queue.popleft()\n            if word == endWord:\n                return path\n            visited.add(word)\n            for i in range(len(word)):\n                key = word[:i] + \"_\" + word[i+1:]\n                for next_word in word_dict[key]:\n                    if next_word not in visited:\n                        queue.append((next_"
    },
    {
        "number": 126,
        "title": "Word Ladder II",
        "difficulty": 2,
        "pass": 2,
        "answer": "        if endWord not in wordList:\n            return []\n        \n        # dfs + bfs\n        from collections import defaultdict\n        from collections import deque\n        \n        wordList = set(wordList)\n        wordList.add(beginWord)\n        wordList.add(endWord)\n        \n        visited = set()\n        visited.add(beginWord)\n        queue = deque()\n        queue.append((beginWord, 1))\n        \n        res = []\n        while queue:\n            word, level = queue.popleft()\n            if word == endWord:\n                res.append([beginWord] + [word] * level)\n            for i in range(len(word)):\n                for c in 'abcdefghijklmnopqrstuvwxyz':\n                    next_word = word[:i] + c + word[i+1:]\n                    if next_word in wordList and next_word not in visited:\n                        visited.add(next_word)\n                        queue.append((next_word, level + 1))\n"
    },
    {
        "number": 126,
        "title": "Word Ladder II",
        "difficulty": 2,
        "pass": 3,
        "answer": "        if endWord not in wordList or not endWord or not beginWord or not wordList:\n            return []\n        \n        word_set = set(wordList)\n        word_set.remove(beginWord)\n        word_set.remove(endWord)\n        word_set.add(beginWord)\n        word_set.add(endWord)\n        \n        res = []\n        visited = set()\n        queue = collections.deque([(beginWord, [beginWord])])\n        \n        while queue:\n            word, path = queue.popleft()\n            visited.add(word)\n            if word == endWord:\n                res.append(path)\n            for i in range(len(word)):\n                for c in 'abcdefghijklmnopqrstuvwxyz':\n                    next_word = word[:i] + c + word[i+1:]\n                    if next_word in word_set and next_word not in visited:\n                        queue.append((next_word, path + [next_word]))\n                        word"
    },
    {
        "number": 126,
        "title": "Word Ladder II",
        "difficulty": 2,
        "pass": 4,
        "answer": "        \n        if endWord not in wordList or not endWord or not beginWord or not wordList:\n            return []\n        \n        wordList = set(wordList)\n        queue = deque([(beginWord, [beginWord])])\n        visited = set()\n        \n        while queue:\n            word, path = queue.popleft()\n            visited.add(word)\n            \n            if word == endWord:\n                return path\n            \n            for i in range(len(word)):\n                for c in 'abcdefghijklmnopqrstuvwxyz':\n                    next_word = word[:i] + c + word[i+1:]\n                    if next_word in wordList and next_word not in visited:\n                        queue.append((next_word, path + [next_word]))\n                        wordList.remove(next_word)\n        \n        return []\n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n"
    },
    {
        "number": 126,
        "title": "Word Ladder II",
        "difficulty": 2,
        "pass": 5,
        "answer": "        \n        def dfs(beginWord, endWord, wordList, visited, path, res):\n            if beginWord == endWord:\n                res.append(path)\n                return\n            \n            for i in range(len(wordList)):\n                if wordList[i] not in visited:\n                    visited.add(wordList[i])\n                    dfs(wordList[i], endWord, wordList, visited, path + [wordList[i]], res)\n                    visited.remove(wordList[i])\n        \n        wordList = set(wordList)\n        res = []\n        visited = set()\n        \n        dfs(beginWord, endWord, wordList, visited, [beginWord], res)\n        return res\n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        "
    },
    {
        "number": 126,
        "title": "Word Ladder II",
        "difficulty": 2,
        "pass": 6,
        "answer": "        if endWord not in wordList:\n            return []\n        word_set = set(wordList)\n        if endWord in word_set:\n            word_set.remove(endWord)\n        word_set = list(word_set)\n        word_set.sort(key=lambda x: len(x))\n        word_set.sort(key=lambda x: x)\n        word_set.sort(key=lambda x: x)\n        word_set.sort(key=lambda x: x)\n        word_set.sort(key=lambda x: x)\n        word_set.sort(key=lambda x: x)\n        word_set.sort(key=lambda x: x)\n        word_set.sort(key=lambda x: x)\n        word_set.sort(key=lambda x: x)\n        word_set.sort(key=lambda x: x)\n        word_set.sort(key=lambda x: x)\n        word_set.sort(key=lambda x: x)\n        word_set.sort(key=lambda"
    },
    {
        "number": 126,
        "title": "Word Ladder II",
        "difficulty": 2,
        "pass": 7,
        "answer": "        \n        def is_word_in_list(word, word_list):\n            for w in word_list:\n                if word == w:\n                    return True\n            return False\n        \n        def find_path(begin_word, end_word, word_list):\n            if end_word not in word_list:\n                return []\n            \n            if begin_word == end_word:\n                return [[begin_word]]\n            \n            paths = []\n            for i in range(len(word_list)):\n                if is_word_in_list(begin_word + word_list[i], word_list):\n                    for path in find_path(begin_word + word_list[i], end_word, word_list):\n                        paths.append([word_list[i]] + path)\n            return paths\n        \n        word_list = set(wordList)\n        paths = find_path(beginWord, endWord, word_list)\n        res = []\n        for path in paths:\n            res.append(path)\n        return res"
    },
    {
        "number": 126,
        "title": "Word Ladder II",
        "difficulty": 2,
        "pass": 8,
        "answer": "        if not beginWord or not endWord or not wordList:\n            return []\n        \n        word_set = set(wordList)\n        word_set.add(beginWord)\n        word_set.add(endWord)\n        \n        word_dict = {}\n        for word in word_set:\n            for i in range(len(word)):\n                key = word[:i] + \"_\" + word[i+1:]\n                if key not in word_dict:\n                    word_dict[key] = set()\n                word_dict[key].add(word)\n        \n        queue = [(beginWord, 1, [beginWord])]\n        visited = set()\n        \n        while queue:\n            word, level, path = queue.pop(0)\n            visited.add(word)\n            \n            if word == endWord:\n                return path\n            \n            for i in range(len(word)):\n                key = word[:i] + \"_\" + word[i+1:]\n                for next_word in word_dict[key]:\n"
    },
    {
        "number": 126,
        "title": "Word Ladder II",
        "difficulty": 2,
        "pass": 9,
        "answer": "        if endWord not in wordList:\n            return []\n        \n        word_set = set(wordList)\n        word_set.add(beginWord)\n        word_set.add(endWord)\n        word_set = list(word_set)\n        word_set = sorted(word_set)\n        word_set.append(beginWord)\n        word_set.append(endWord)\n        word_set = set(word_set)\n        word_set = list(word_set)\n        word_set = sorted(word_set)\n        word_set = set(word_set)\n        word_set = list(word_set)\n        word_set = sorted(word_set)\n        word_set = set(word_set)\n        word_set = list(word_set)\n        word_set = sorted(word_set)\n        word_set = set(word_set)\n        word_set = list(word_set)\n        word_set = sorted(word_set)\n        word_set = set(word_set)"
    },
    {
        "number": 127,
        "title": "Word Ladder",
        "difficulty": 2,
        "pass": 0,
        "answer": "        if endWord not in wordList or not endWord or not beginWord or not wordList:\n            return 0"
    },
    {
        "number": 127,
        "title": "Word Ladder",
        "difficulty": 2,
        "pass": 1,
        "answer": "        if endWord not in wordList or not endWord or not beginWord or not wordList:\n            return 0\n        \n        word_set = set(wordList)\n        \n        queue = deque([(beginWord, 1)])\n        visited = set()\n        \n        while queue:\n            word, step = queue.popleft()\n            if word == endWord:\n                return step\n            \n            for i in range(len(word)):\n                for c in 'abcdefghijklmnopqrstuvwxyz':\n                    new_word = word[:i] + c + word[i+1:]\n                    if new_word in word_set and new_word not in visited:\n                        visited.add(new_word)\n                        queue.append((new_word, step+1))\n        return 0\n"
    },
    {
        "number": 127,
        "title": "Word Ladder",
        "difficulty": 2,
        "pass": 2,
        "answer": "        if endWord not in wordList or not endWord or not beginWord or not wordList:\n            return 0\n        \n        queue = collections.deque()\n        queue.append((beginWord, 1))\n        visited = set()\n        visited.add(beginWord)\n        \n        while queue:\n            word, length = queue.popleft()\n            if word == endWord:\n                return length\n            \n            for i in range(len(word)):\n                for c in 'abcdefghijklmnopqrstuvwxyz':\n                    next_word = word[:i] + c + word[i+1:]\n                    if next_word in wordList and next_word not in visited:\n                        visited.add(next_word)\n                        queue.append((next_word, length+1))\n        return 0"
    },
    {
        "number": 127,
        "title": "Word Ladder",
        "difficulty": 2,
        "pass": 3,
        "answer": "        if endWord not in wordList or not endWord or not beginWord or not wordList:\n            return 0\n        \n        wordList = set(wordList)\n        queue = collections.deque([(beginWord, 1)])\n        visited = set()\n        \n        while queue:\n            word, length = queue.popleft()\n            visited.add(word)\n            if word == endWord:\n                return length\n            \n            for i in range(len(word)):\n                for j in 'abcdefghijklmnopqrstuvwxyz':\n                    next_word = word[:i] + j + word[i+1:]\n                    if next_word in wordList and next_word not in visited:\n                        wordList.remove(next_word)\n                        queue.append((next_word, length+1))\n        \n        return 0"
    },
    {
        "number": 127,
        "title": "Word Ladder",
        "difficulty": 2,
        "pass": 4,
        "answer": "        if endWord not in wordList or not endWord or not beginWord or not wordList:\n            return 0\n        \n        word_set = set(wordList)\n        word_len = len(beginWord)\n        \n        queue = deque([(beginWord, 1)])\n        visited = set()\n        \n        while queue:\n            word, step = queue.popleft()\n            if word == endWord:\n                return step\n            \n            for i in range(word_len):\n                for j in range(26):\n                    next_word = word[:i] + chr(ord('a') + j) + word[i+1:]\n                    if next_word not in visited and next_word in word_set:\n                        visited.add(next_word)\n                        queue.append((next_word, step + 1))\n        return 0"
    },
    {
        "number": 127,
        "title": "Word Ladder",
        "difficulty": 2,
        "pass": 5,
        "answer": "        if endWord not in wordList or not endWord or not beginWord or not wordList:\n            return 0\n        \n        wordList = set(wordList)\n        queue = deque([(beginWord, 1)])\n        visited = set()\n        \n        while queue:\n            word, length = queue.popleft()\n            if word == endWord:\n                return length\n            \n            for i in range(len(word)):\n                for c in 'abcdefghijklmnopqrstuvwxyz':\n                    new_word = word[:i] + c + word[i+1:]\n                    if new_word in wordList and new_word not in visited:\n                        visited.add(new_word)\n                        queue.append((new_word, length+1))\n        return 0"
    },
    {
        "number": 127,
        "title": "Word Ladder",
        "difficulty": 2,
        "pass": 6,
        "answer": "        if endWord not in wordList or not endWord or not beginWord or not wordList:\n            return 0"
    },
    {
        "number": 127,
        "title": "Word Ladder",
        "difficulty": 2,
        "pass": 7,
        "answer": "        if not beginWord or not endWord or not wordList:\n            return 0\n        \n        word_set = set(wordList)\n        \n        if endWord not in word_set:\n            return 0\n        \n        word_set.add(beginWord)\n        \n        queue = deque([(beginWord, 1)])\n        \n        while queue:\n            word, length = queue.popleft()\n            \n            if word == endWord:\n                return length\n            \n            for i in range(len(word)):\n                for j in 'abcdefghijklmnopqrstuvwxyz':\n                    next_word = word[:i] + j + word[i+1:]\n                    if next_word in word_set:\n                        word_set.remove(next_word)\n                        queue.append((next_word, length+1))\n        \n        return 0"
    },
    {
        "number": 127,
        "title": "Word Ladder",
        "difficulty": 2,
        "pass": 8,
        "answer": "        from collections import defaultdict\n        if not beginWord or not endWord or not wordList:\n            return 0\n        \n        if endWord not in wordList:\n            return 0\n        \n        word_len = len(beginWord)\n        word_set = set(wordList)\n        \n        if beginWord in word_set:\n            word_set.remove(beginWord)\n        if endWord in word_set:\n            word_set.remove(endWord)\n        \n        word_dict = defaultdict(list)\n        \n        for word in word_set:\n            for i in range(word_len):\n                word_dict[word[:i] + \"*\" + word[i+1:]].append(word)\n        \n        queue = [(beginWord, 1)]\n        visited = set()\n        \n        while queue:\n            word, level = queue.pop(0)\n            if word == endWord:\n                return level\n            if word in visited:\n                continue\n            visited.add(word)\n            for i in range(word_len"
    },
    {
        "number": 127,
        "title": "Word Ladder",
        "difficulty": 2,
        "pass": 9,
        "answer": "        if not beginWord or not endWord or not wordList:\n            return 0\n        \n        word_set = set(wordList)\n        if endWord not in word_set:\n            return 0\n        \n        q = deque([(beginWord, 1)])\n        visited = set()\n        visited.add(beginWord)\n        \n        while q:\n            word, length = q.popleft()\n            if word == endWord:\n                return length\n            for i in range(len(word)):\n                for c in 'abcdefghijklmnopqrstuvwxyz':\n                    next_word = word[:i] + c + word[i+1:]\n                    if next_word in word_set and next_word not in visited:\n                        q.append((next_word, length+1))\n                        visited.add(next_word)\n        return 0\n        \n        \nclass Solution:\n    def ladderLength(self, beginWord: str, endWord: str, wordList: List[str]) -> int:\n        \"\"\"\n"
    },
    {
        "number": 128,
        "title": "Longest Consecutive Sequence",
        "difficulty": 1,
        "pass": 0,
        "answer": "        if not nums:\n            return 0\n        nums = set(nums)\n        max_len = 0\n        for num in nums:\n            if num - 1 not in nums:\n                curr_len = 1\n                while num + 1 in nums:\n                    num += 1\n                    curr_len += 1\n                max_len = max(max_len, curr_len)\n        return max_len"
    },
    {
        "number": 128,
        "title": "Longest Consecutive Sequence",
        "difficulty": 1,
        "pass": 1,
        "answer": "        if not nums:\n            return 0\n        nums = set(nums)\n        longest = 0\n        for num in nums:\n            if num - 1 not in nums:\n                curr = 1\n                while num + 1 in nums:\n                    num += 1\n                    curr += 1\n                longest = max(longest, curr)\n        return longest"
    },
    {
        "number": 128,
        "title": "Longest Consecutive Sequence",
        "difficulty": 1,
        "pass": 2,
        "answer": "        if len(nums) == 0:\n            return 0\n        nums = set(nums)\n        max_len = 0\n        for num in nums:\n            if num - 1 not in nums:\n                curr_len = 1\n                while num + 1 in nums:\n                    num += 1\n                    curr_len += 1\n                max_len = max(max_len, curr_len)\n        return max_len"
    },
    {
        "number": 128,
        "title": "Longest Consecutive Sequence",
        "difficulty": 1,
        "pass": 3,
        "answer": "        if not nums:\n            return 0\n        nums = set(nums)\n        longest = 0\n        for num in nums:\n            if num - 1 not in nums:\n                curr = 1\n                while num + 1 in nums:\n                    num += 1\n                    curr += 1\n                longest = max(longest, curr)\n        return longest"
    },
    {
        "number": 128,
        "title": "Longest Consecutive Sequence",
        "difficulty": 1,
        "pass": 4,
        "answer": "        if len(nums) == 0:\n            return 0\n        nums = set(nums)\n        max_len = 0\n        for num in nums:\n            if num - 1 not in nums:\n                curr_len = 1\n                while num + 1 in nums:\n                    num += 1\n                    curr_len += 1\n                max_len = max(max_len, curr_len)\n        return max_len"
    },
    {
        "number": 128,
        "title": "Longest Consecutive Sequence",
        "difficulty": 1,
        "pass": 5,
        "answer": "        nums = set(nums)\n        max_len = 0\n        for num in nums:\n            if num - 1 not in nums:\n                curr_len = 1\n                while num + 1 in nums:\n                    num += 1\n                    curr_len += 1\n                max_len = max(max_len, curr_len)\n        return max_len"
    },
    {
        "number": 128,
        "title": "Longest Consecutive Sequence",
        "difficulty": 1,
        "pass": 6,
        "answer": "        if not nums:\n            return 0\n        nums = set(nums)\n        max_len = 0\n        for num in nums:\n            if num - 1 not in nums:\n                curr_len = 1\n                while num + 1 in nums:\n                    num += 1\n                    curr_len += 1\n                max_len = max(max_len, curr_len)\n        return max_len"
    },
    {
        "number": 128,
        "title": "Longest Consecutive Sequence",
        "difficulty": 1,
        "pass": 7,
        "answer": "        if len(nums) == 0:\n            return 0\n        \n        nums = set(nums)\n        longest = 0\n        \n        for num in nums:\n            if num - 1 not in nums:\n                current = num\n                count = 1\n                while current + 1 in nums:\n                    current += 1\n                    count += 1\n                longest = max(longest, count)\n        \n        return longest"
    },
    {
        "number": 128,
        "title": "Longest Consecutive Sequence",
        "difficulty": 1,
        "pass": 8,
        "answer": "        if not nums:\n            return 0\n        nums = set(nums)\n        max_len = 0\n        for num in nums:\n            if num - 1 not in nums:\n                curr_len = 1\n                while num + 1 in nums:\n                    num += 1\n                    curr_len += 1\n                max_len = max(max_len, curr_len)\n        return max_len"
    },
    {
        "number": 128,
        "title": "Longest Consecutive Sequence",
        "difficulty": 1,
        "pass": 9,
        "answer": "        if not nums:\n            return 0\n        nums = set(nums)\n        max_len = 0\n        for num in nums:\n            if num - 1 not in nums:\n                curr_len = 1\n                while num + 1 in nums:\n                    num += 1\n                    curr_len += 1\n                max_len = max(max_len, curr_len)\n        return max_len"
    },
    {
        "number": 129,
        "title": "Sum Root to Leaf Numbers",
        "difficulty": 1,
        "pass": 0,
        "answer": "        def dfs(node, path):\n            if not node:\n                return\n            path += str(node.val)\n            if not node.left and not node.right:\n                res.append(int(path))\n            dfs(node.left, path)\n            dfs(node.right, path)\n        res = []\n        dfs(root, '')\n        return sum(res)"
    },
    {
        "number": 129,
        "title": "Sum Root to Leaf Numbers",
        "difficulty": 1,
        "pass": 1,
        "answer": "        if not root:\n            return 0\n        stack = [(root, str(root.val))]\n        res = 0\n        while stack:\n            node, path = stack.pop()\n            if not node.left and not node.right:\n                res += int(path)\n            if node.right:\n                stack.append((node.right, path + str(node.right.val)))\n            if node.left:\n                stack.append((node.left, path + str(node.left.val)))\n        return res"
    },
    {
        "number": 129,
        "title": "Sum Root to Leaf Numbers",
        "difficulty": 1,
        "pass": 2,
        "answer": "        if not root:\n            return 0\n        self.res = 0\n        self.dfs(root, 0)\n        return self.res"
    },
    {
        "number": 129,
        "title": "Sum Root to Leaf Numbers",
        "difficulty": 1,
        "pass": 3,
        "answer": "        if not root:\n            return 0"
    },
    {
        "number": 129,
        "title": "Sum Root to Leaf Numbers",
        "difficulty": 1,
        "pass": 4,
        "answer": "        if not root:\n            return 0"
    },
    {
        "number": 129,
        "title": "Sum Root to Leaf Numbers",
        "difficulty": 1,
        "pass": 5,
        "answer": "        if not root:\n            return 0\n        stack = [(root, str(root.val))]\n        res = 0\n        while stack:\n            node, path = stack.pop()\n            if not node.left and not node.right:\n                res += int(path)\n            if node.right:\n                stack.append((node.right, path + str(node.right.val)))\n            if node.left:\n                stack.append((node.left, path + str(node.left.val)))\n        return res"
    },
    {
        "number": 129,
        "title": "Sum Root to Leaf Numbers",
        "difficulty": 1,
        "pass": 6,
        "answer": "        if not root:\n            return 0\n        stack = [(root, root.val)]\n        res = 0\n        while stack:\n            node, val = stack.pop()\n            if not node.left and not node.right:\n                res += val\n            if node.right:\n                stack.append((node.right, val * 10 + node.right.val))\n            if node.left:\n                stack.append((node.left, val * 10 + node.left.val))\n        return res"
    },
    {
        "number": 129,
        "title": "Sum Root to Leaf Numbers",
        "difficulty": 1,
        "pass": 7,
        "answer": "        if not root:\n            return 0\n        self.sum = 0\n        self.dfs(root, 0)\n        return self.sum"
    },
    {
        "number": 129,
        "title": "Sum Root to Leaf Numbers",
        "difficulty": 1,
        "pass": 8,
        "answer": "        if not root:\n            return 0\n        stack = [(root, root.val)]\n        total = 0\n        while stack:\n            node, value = stack.pop()\n            if not node.left and not node.right:\n                total += value\n            if node.right:\n                stack.append((node.right, value * 10 + node.right.val))\n            if node.left:\n                stack.append((node.left, value * 10 + node.left.val))\n        return total"
    },
    {
        "number": 129,
        "title": "Sum Root to Leaf Numbers",
        "difficulty": 1,
        "pass": 9,
        "answer": "        if not root:\n            return 0\n        self.sum = 0\n        self.dfs(root, 0)\n        return self.sum"
    },
    {
        "number": 130,
        "title": "Surrounded Regions",
        "difficulty": 1,
        "pass": 0,
        "answer": "        if not board:\n            return board\n        m, n = len(board), len(board[0])\n        visited = set()\n        for i in range(m):\n            for j in range(n):\n                if board[i][j] == 'O' and (i, j) not in visited:\n                    self.dfs(board, i, j, m, n, visited)\n        for i in range(m):\n            for j in range(n):\n                if board[i][j] == 'O':\n                    board[i][j] = 'X'\n                elif board[i][j] == 'X':\n                    board[i][j] = 'O'\n        return board"
    },
    {
        "number": 130,
        "title": "Surrounded Regions",
        "difficulty": 1,
        "pass": 1,
        "answer": "        m = len(board)\n        if m == 0:\n            return\n        n = len(board[0])\n        if n == 0:\n            return"
    },
    {
        "number": 130,
        "title": "Surrounded Regions",
        "difficulty": 1,
        "pass": 2,
        "answer": "        if not board:\n            return board\n        m, n = len(board), len(board[0])"
    },
    {
        "number": 130,
        "title": "Surrounded Regions",
        "difficulty": 1,
        "pass": 3,
        "answer": "        if not board:\n            return board\n        \n        m, n = len(board), len(board[0])\n        \n        def dfs(i, j):\n            if i < 0 or i >= m or j < 0 or j >= n or board[i][j]!= 'O':\n                return\n            \n            board[i][j] = '#'\n            dfs(i+1, j)\n            dfs(i-1, j)\n            dfs(i, j+1)\n            dfs(i, j-1)\n        \n        for i in range(m):\n            dfs(i, 0)\n            dfs(i, n-1)\n        \n        for j in range(n):\n            dfs(0, j)\n            dfs(m-1, j)\n        \n        for i in range(m):\n            for j in range(n):\n                if board[i][j] == 'O':\n                    board[i][j] = 'X'\n                elif board[i][j] == '#':"
    },
    {
        "number": 130,
        "title": "Surrounded Regions",
        "difficulty": 1,
        "pass": 4,
        "answer": "        if not board:\n            return\n        m = len(board)\n        n = len(board[0])\n        for i in range(m):\n            self.dfs(board, i, 0)\n            self.dfs(board, i, n - 1)\n        for j in range(n):\n            self.dfs(board, 0, j)\n            self.dfs(board, m - 1, j)\n        for i in range(m):\n            for j in range(n):\n                if board[i][j] == 'O':\n                    board[i][j] = 'X'\n                elif board[i][j] == 'X':\n                    board[i][j] = 'O'"
    },
    {
        "number": 130,
        "title": "Surrounded Regions",
        "difficulty": 1,
        "pass": 5,
        "answer": "        if not board or not board[0]:\n            return\n        m, n = len(board), len(board[0])"
    },
    {
        "number": 130,
        "title": "Surrounded Regions",
        "difficulty": 1,
        "pass": 6,
        "answer": "        if not board:\n            return\n        m, n = len(board), len(board[0])"
    },
    {
        "number": 130,
        "title": "Surrounded Regions",
        "difficulty": 1,
        "pass": 7,
        "answer": "        if not board:\n            return board\n        \n        m, n = len(board), len(board[0])\n        \n        def dfs(i, j):\n            if i < 0 or i >= m or j < 0 or j >= n or board[i][j]!= 'O':\n                return\n            \n            board[i][j] = 'Y'\n            dfs(i+1, j)\n            dfs(i-1, j)\n            dfs(i, j+1)\n            dfs(i, j-1)\n        \n        for i in range(m):\n            dfs(i, 0)\n            dfs(i, n-1)\n        \n        for j in range(n):\n            dfs(0, j)\n            dfs(m-1, j)\n        \n        for i in range(m):\n            for j in range(n):\n                if board[i][j] == 'O':\n                    board[i][j] = 'X'\n                elif board[i][j] == 'Y':"
    },
    {
        "number": 130,
        "title": "Surrounded Regions",
        "difficulty": 1,
        "pass": 8,
        "answer": "        if not board:\n            return board\n        m, n = len(board), len(board[0])\n        visited = set()\n        for i in range(m):\n            for j in range(n):\n                if board[i][j] == 'O' and (i, j) not in visited:\n                    self.dfs(board, i, j, m, n, visited)\n        for i in range(m):\n            for j in range(n):\n                if board[i][j] == 'O':\n                    board[i][j] = 'X'\n                elif board[i][j] == 'X':\n                    board[i][j] = 'O'\n        return board"
    },
    {
        "number": 130,
        "title": "Surrounded Regions",
        "difficulty": 1,
        "pass": 9,
        "answer": "        if not board:\n            return\n        m = len(board)\n        n = len(board[0])"
    },
    {
        "number": 131,
        "title": "Palindrome Partitioning",
        "difficulty": 1,
        "pass": 0,
        "answer": "        def isPalindrome(s):\n            return s == s[::-1]\n        \n        def dfs(s, path, res):\n            if not s:\n                res.append(path)\n                return\n            for i in range(1, len(s) + 1):\n                if isPalindrome(s[:i]):\n                    dfs(s[i:], path + [s[:i]], res)\n        \n        res = []\n        dfs(s, [], res)\n        return res"
    },
    {
        "number": 131,
        "title": "Palindrome Partitioning",
        "difficulty": 1,
        "pass": 1,
        "answer": "        if not s:\n            return []\n        res = []\n        self.dfs(s, [], res)\n        return res"
    },
    {
        "number": 131,
        "title": "Palindrome Partitioning",
        "difficulty": 1,
        "pass": 2,
        "answer": "        def isPalindrome(s):\n            return s == s[::-1]\n        \n        def dfs(s, path, res):\n            if not s:\n                res.append(path)\n                return\n            for i in range(1, len(s)+1):\n                if isPalindrome(s[:i]):\n                    dfs(s[i:], path+[s[:i]], res)\n        \n        res = []\n        dfs(s, [], res)\n        return res"
    },
    {
        "number": 131,
        "title": "Palindrome Partitioning",
        "difficulty": 1,
        "pass": 3,
        "answer": "        res = []\n        self.dfs(s, 0, [], res)\n        return res"
    },
    {
        "number": 131,
        "title": "Palindrome Partitioning",
        "difficulty": 1,
        "pass": 4,
        "answer": "        if not s:\n            return []\n        if len(s) == 1:\n            return [[s]]\n        res = []\n        for i in range(1, len(s) + 1):\n            if self.is_palindrome(s[:i]):\n                for j in self.partition(s[i:]):\n                    res.append([s[:i]] + j)\n        return res"
    },
    {
        "number": 131,
        "title": "Palindrome Partitioning",
        "difficulty": 1,
        "pass": 5,
        "answer": "        def isPalindrome(s):\n            return s == s[::-1]\n        \n        def dfs(s, path, res):\n            if not s:\n                res.append(path)\n                return\n            for i in range(1, len(s) + 1):\n                if isPalindrome(s[:i]):\n                    dfs(s[i:], path + [s[:i]], res)\n        \n        res = []\n        dfs(s, [], res)\n        return res"
    },
    {
        "number": 131,
        "title": "Palindrome Partitioning",
        "difficulty": 1,
        "pass": 6,
        "answer": "        if not s:\n            return []\n        if len(s) == 1:\n            return [[s]]\n        ans = []\n        for i in range(1, len(s) + 1):\n            if s[:i] == s[:i][::-1]:\n                for j in self.partition(s[i:]):\n                    ans.append([s[:i]] + j)\n        return ans"
    },
    {
        "number": 131,
        "title": "Palindrome Partitioning",
        "difficulty": 1,
        "pass": 7,
        "answer": "        if not s:\n            return []\n        if len(s) == 1:\n            return [[s]]\n        res = []\n        for i in range(1, len(s) + 1):\n            if s[:i] == s[:i][::-1]:\n                tmp = self.partition(s[i:])\n                for item in tmp:\n                    item.insert(0, s[:i])\n                    res.append(item)\n        return res"
    },
    {
        "number": 131,
        "title": "Palindrome Partitioning",
        "difficulty": 1,
        "pass": 8,
        "answer": "        if not s:\n            return [[]]\n        if len(s) == 1:\n            return [[s]]"
    },
    {
        "number": 131,
        "title": "Palindrome Partitioning",
        "difficulty": 1,
        "pass": 9,
        "answer": "        if not s:\n            return [[]]\n        if len(s) == 1:\n            return [[s]]\n        res = []\n        for i in range(1, len(s) + 1):\n            if s[:i] == s[:i][::-1]:\n                res += [[s[:i]] + p for p in self.partition(s[i:])]\n        return res"
    },
    {
        "number": 132,
        "title": "Palindrome Partitioning II",
        "difficulty": 2,
        "pass": 0,
        "answer": "        if not s:\n            return 0\n        n = len(s)\n        dp = [[False] * n for _ in range(n)]\n        for i in range(n):\n            dp[i][i] = True\n        for i in range(n - 1, -1, -1):\n            for j in range(i + 1, n):\n                if s[i] == s[j] and (j - i <= 2 or dp[i + 1][j - 1]):\n                    dp[i][j] = True\n        res = n\n        for i in range(n):\n            for j in range(i, n):\n                if dp[i][j]:\n                    res = min(res, j - i + 1)\n        return res"
    },
    {
        "number": 132,
        "title": "Palindrome Partitioning II",
        "difficulty": 2,
        "pass": 1,
        "answer": "        n = len(s)\n        dp = [[False for _ in range(n)] for _ in range(n)]\n        for i in range(n):\n            dp[i][i] = True\n        for i in range(n - 1, -1, -1):\n            for j in range(i + 1, n):\n                if s[i] == s[j]:\n                    dp[i][j] = dp[i + 1][j - 1]\n                else:\n                    dp[i][j] = False\n        res = n\n        for i in range(n):\n            for j in range(i, n):\n                if dp[i][j] and j - i < res:\n                    res = j - i\n        return res"
    },
    {
        "number": 132,
        "title": "Palindrome Partitioning II",
        "difficulty": 2,
        "pass": 2,
        "answer": "        if not s:\n            return 0\n        n = len(s)\n        dp = [[False for _ in range(n)] for _ in range(n)]\n        for i in range(n):\n            dp[i][i] = True\n        for i in range(n - 1, -1, -1):\n            for j in range(i + 1, n):\n                if s[i] == s[j]:\n                    dp[i][j] = dp[i + 1][j - 1]\n                else:\n                    dp[i][j] = False\n        res = n\n        for i in range(n):\n            for j in range(i, n):\n                if dp[i][j]:\n                    res = min(res, j - i + 1)\n        return res"
    },
    {
        "number": 132,
        "title": "Palindrome Partitioning II",
        "difficulty": 2,
        "pass": 3,
        "answer": "        n = len(s)\n        dp = [[False for _ in range(n)] for _ in range(n)]\n        for i in range(n):\n            dp[i][i] = True\n        for i in range(n - 1, -1, -1):\n            for j in range(i + 1, n):\n                if s[i] == s[j]:\n                    dp[i][j] = dp[i + 1][j - 1]\n                else:\n                    dp[i][j] = False\n        res = 0\n        for i in range(n):\n            if dp[0][i]:\n                res += 1\n        return res"
    },
    {
        "number": 132,
        "title": "Palindrome Partitioning II",
        "difficulty": 2,
        "pass": 4,
        "answer": "        def is_palindrome(s):\n            return s == s[::-1]"
    },
    {
        "number": 132,
        "title": "Palindrome Partitioning II",
        "difficulty": 2,
        "pass": 5,
        "answer": "        if not s:\n            return 0\n        n = len(s)\n        dp = [[False] * n for _ in range(n)]\n        for i in range(n):\n            dp[i][i] = True\n        for i in range(n - 1, -1, -1):\n            for j in range(i + 1, n):\n                if s[i] == s[j]:\n                    dp[i][j] = dp[i + 1][j - 1]\n                else:\n                    dp[i][j] = False\n        res = n\n        for i in range(n):\n            for j in range(i, n):\n                if dp[i][j]:\n                    res = min(res, j - i + 1)\n        return res"
    },
    {
        "number": 132,
        "title": "Palindrome Partitioning II",
        "difficulty": 2,
        "pass": 6,
        "answer": "        n = len(s)\n        dp = [[False] * n for _ in range(n)]\n        for i in range(n):\n            dp[i][i] = True\n        for i in range(n - 1, -1, -1):\n            for j in range(i + 1, n):\n                if s[i] == s[j]:\n                    dp[i][j] = dp[i + 1][j - 1]\n                else:\n                    dp[i][j] = False\n        res = 0\n        for i in range(n):\n            if dp[0][i]:\n                res += 1\n        return res"
    },
    {
        "number": 132,
        "title": "Palindrome Partitioning II",
        "difficulty": 2,
        "pass": 7,
        "answer": "        if not s:\n            return 0\n        n = len(s)\n        dp = [[False] * n for _ in range(n)]\n        for i in range(n):\n            dp[i][i] = True\n        for i in range(n - 1, -1, -1):\n            for j in range(i + 1, n):\n                if s[i] == s[j] and (j - i < 3 or dp[i + 1][j - 1]):\n                    dp[i][j] = True\n        res = n\n        for i in range(n):\n            if dp[0][i]:\n                res = min(res, self.minCut(s[i:]))\n        return res"
    },
    {
        "number": 132,
        "title": "Palindrome Partitioning II",
        "difficulty": 2,
        "pass": 8,
        "answer": "        if len(s) == 0:\n            return 0\n        dp = [[False for _ in range(len(s))] for _ in range(len(s))]\n        for i in range(len(s)):\n            dp[i][i] = True\n        for i in range(len(s) - 1, -1, -1):\n            for j in range(i + 1, len(s)):\n                if s[i] == s[j]:\n                    dp[i][j] = dp[i + 1][j - 1]\n                else:\n                    dp[i][j] = False\n        res = 0\n        for i in range(len(s)):\n            if dp[0][i]:\n                res += 1\n        return res"
    },
    {
        "number": 132,
        "title": "Palindrome Partitioning II",
        "difficulty": 2,
        "pass": 9,
        "answer": "        n = len(s)\n        dp = [[False] * n for _ in range(n)]\n        for i in range(n):\n            dp[i][i] = True\n        for i in range(n - 1, -1, -1):\n            for j in range(i + 1, n):\n                if s[i] == s[j]:\n                    dp[i][j] = dp[i + 1][j - 1]\n                else:\n                    dp[i][j] = False\n        res = 0\n        for i in range(n):\n            if dp[0][i]:\n                res += 1\n        return res"
    },
    {
        "number": 133,
        "title": "Clone Graph",
        "difficulty": 1,
        "pass": 0,
        "answer": "        \nclass Solution:\n    def cloneGraph(self, node: 'Node') -> 'Node':\n        if not node:\n            return node\n        visited = {}\n        return self.dfs(node, visited)"
    },
    {
        "number": 133,
        "title": "Clone Graph",
        "difficulty": 1,
        "pass": 1,
        "answer": "        self.val = val\n        self.neighbors = neighbors if neighbors is not None else []"
    },
    {
        "number": 133,
        "title": "Clone Graph",
        "difficulty": 1,
        "pass": 2,
        "answer": "        if not adjList:\n            return []\n        \n        nodes = {}\n        for node in adjList:\n            if node[0] not in nodes:\n                nodes[node[0]] = Node(node[0])\n            if node[1] not in nodes:\n                nodes[node[1]] = Node(node[1])\n            nodes[node[0]].neighbors.append(nodes[node[1]])\n            nodes[node[1]].neighbors.append(nodes[node[0]])\n        \n        for node in nodes:\n            nodes[node].neighbors = list(set(nodes[node].neighbors))\n        \n        return list(nodes.values())\n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n"
    },
    {
        "number": 133,
        "title": "Clone Graph",
        "difficulty": 1,
        "pass": 3,
        "answer": "        \"\"\"\n        # Definition for a Node.\n        class Node:\n            def __init__(self, val = 0, neighbors = None):\n                self.val = val\n                self.neighbors = neighbors if neighbors is not None else []\n        \"\"\"\n        \"\"\"\n        # Definition for a Node.\n        class Node:\n            def __init__(self, val = 0, neighbors = None):\n                self.val = val\n                self.neighbors = neighbors if neighbors is not None else []\n        \"\"\"\n        \"\"\"\n        # Definition for a Node.\n        class Node:\n            def __init__(self, val = 0, neighbors = None):\n                self.val = val\n                self.neighbors = neighbors if neighbors is not None else []\n        \"\"\"\n        \"\"\"\n        # Definition for a Node.\n        class Node:\n            def __init__(self, val = 0, neighbors = None):\n                self.val = val\n                self.neighbors = neighbors if neighbors is not None else []\n        \"\"\"\n        \"\"\"\n        # Definition for a Node.\n        class Node"
    },
    {
        "number": 133,
        "title": "Clone Graph",
        "difficulty": 1,
        "pass": 4,
        "answer": "        \"\"\"\n        # Definition for a Node.\n        class Node:\n            def __init__(self, val = 0, neighbors = None):\n                self.val = val\n                self.neighbors = neighbors if neighbors is not None else []\n                Given a reference of a node in a connected undirected graph.\n                Return a deep copy (clone) of the graph.\n                Each node in the graph contains a value (int) and a list (List[Node]) of its neighbors.\n                class Node {\n                    public int val;\n                    public List<Node> neighbors;\n                }\n                Test case format:\n                For simplicity, each node's value is the same as the node's index (1-indexed). For example, the first node with val == 1, the second node with val == 2, and so on. The graph is represented in the test case using an adjacency list.\n                An adjacency list is a collection of unordered lists used to represent a finite graph. Each list describes the set of neighbors of a node in the graph.\n                The given node will always be the first node with val == 1."
    },
    {
        "number": 133,
        "title": "Clone Graph",
        "difficulty": 1,
        "pass": 5,
        "answer": "        self.val = val\n        self.neighbors = neighbors if neighbors is not None else []"
    },
    {
        "number": 133,
        "title": "Clone Graph",
        "difficulty": 1,
        "pass": 6,
        "answer": "        \n        if not adjList:\n            return []\n        \n        nodes = {}\n        for node in adjList:\n            if node[0] not in nodes:\n                nodes[node[0]] = Node(node[0])\n            if node[1] not in nodes:\n                nodes[node[1]] = Node(node[1])\n            \n            nodes[node[0]].neighbors.append(nodes[node[1]])\n            nodes[node[1]].neighbors.append(nodes[node[0]])\n        \n        return nodes[1].neighbors"
    },
    {
        "number": 133,
        "title": "Clone Graph",
        "difficulty": 1,
        "pass": 7,
        "answer": "        self.val = val\n        self.neighbors = neighbors if neighbors is not None else []"
    },
    {
        "number": 133,
        "title": "Clone Graph",
        "difficulty": 1,
        "pass": 8,
        "answer": "        self.adjList = adjList\n        self.visited = set()\n        self.stack = []"
    },
    {
        "number": 133,
        "title": "Clone Graph",
        "difficulty": 1,
        "pass": 9,
        "answer": "        self.val = val\n        self.neighbors = neighbors if neighbors is not None else []\n        \nclass Solution:\n    def cloneGraph(self, node: 'Node') -> 'Node':\n        if not node:\n            return node\n        \n        visited = {}\n        \n        def dfs(node):\n            if node in visited:\n                return visited[node]\n            \n            new_node = Node(node.val)\n            visited[node] = new_node\n            \n            for neighbor in node.neighbors:\n                new_node.neighbors.append(dfs(neighbor))\n            \n            return new_node\n        \n        return dfs(node)\n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        "
    },
    {
        "number": 134,
        "title": "Gas Station",
        "difficulty": 1,
        "pass": 0,
        "answer": "        n = len(gas)\n        tank = 0\n        start = 0\n        for i in range(n):\n            tank += gas[i] - cost[i]\n            if tank < 0:\n                start = i + 1\n                tank = 0\n        return start if tank >= 0 else -1"
    },
    {
        "number": 134,
        "title": "Gas Station",
        "difficulty": 1,
        "pass": 1,
        "answer": "        if sum(gas) < sum(cost):\n            return -1\n        tank = 0\n        start = 0\n        for i in range(len(gas)):\n            tank += gas[i] - cost[i]\n            if tank < 0:\n                start = i + 1\n                tank = 0\n        return start"
    },
    {
        "number": 134,
        "title": "Gas Station",
        "difficulty": 1,
        "pass": 2,
        "answer": "        if sum(gas) < sum(cost):\n            return -1\n        for i in range(len(gas)):\n            if gas[i] + cost[i] >= gas[i + 1]:\n                return i\n        return -1"
    },
    {
        "number": 134,
        "title": "Gas Station",
        "difficulty": 1,
        "pass": 3,
        "answer": "        if not gas or not cost:\n            return -1"
    },
    {
        "number": 134,
        "title": "Gas Station",
        "difficulty": 1,
        "pass": 4,
        "answer": "        if sum(gas) < sum(cost):\n            return -1\n        start = 0\n        tank = 0\n        for i in range(len(gas)):\n            tank += gas[i] - cost[i]\n            if tank < 0:\n                start = i + 1\n                tank = 0\n        return start"
    },
    {
        "number": 134,
        "title": "Gas Station",
        "difficulty": 1,
        "pass": 5,
        "answer": "        n = len(gas)\n        tank = 0\n        start = 0\n        for i in range(n):\n            tank += gas[i] - cost[i]\n            if tank < 0:\n                start = i + 1\n                tank = 0\n        return start if tank >= 0 else -1"
    },
    {
        "number": 134,
        "title": "Gas Station",
        "difficulty": 1,
        "pass": 6,
        "answer": "        n = len(gas)\n        for i in range(n):\n            tank = gas[i] - cost[i]\n            if tank >= 0:\n                for j in range(i + 1, n):\n                    tank += gas[j] - cost[j]\n                    if tank < 0:\n                        break\n                else:\n                    return i\n        return -1"
    },
    {
        "number": 134,
        "title": "Gas Station",
        "difficulty": 1,
        "pass": 7,
        "answer": "        if sum(gas) < sum(cost):\n            return -1\n        start = 0\n        tank = 0\n        for i in range(len(gas)):\n            tank += gas[i] - cost[i]\n            if tank < 0:\n                start = i + 1\n                tank = 0\n        return start"
    },
    {
        "number": 134,
        "title": "Gas Station",
        "difficulty": 1,
        "pass": 8,
        "answer": "        if sum(gas) < sum(cost):\n            return -1\n        n = len(gas)\n        tank = 0\n        start = 0\n        for i in range(n):\n            tank += gas[i] - cost[i]\n            if tank < 0:\n                start = i + 1\n                tank = 0\n        return start"
    },
    {
        "number": 134,
        "title": "Gas Station",
        "difficulty": 1,
        "pass": 9,
        "answer": "        if not gas or not cost:\n            return -1\n        n = len(gas)\n        tank = 0\n        start = 0\n        for i in range(n):\n            tank += gas[i] - cost[i]\n            if tank < 0:\n                start = i + 1\n                tank = 0\n        return start if tank >= 0 else -1"
    },
    {
        "number": 135,
        "title": "Candy",
        "difficulty": 2,
        "pass": 0,
        "answer": "        n = len(ratings)\n        if n == 0:\n            return 0\n        candy = [1] * n\n        for i in range(1, n):\n            if ratings[i] > ratings[i - 1]:\n                candy[i] = candy[i - 1] + 1\n        for i in range(n - 2, -1, -1):\n            if ratings[i] > ratings[i + 1]:\n                candy[i] = max(candy[i], candy[i + 1] + 1)\n        return sum(candy)\n"
    },
    {
        "number": 135,
        "title": "Candy",
        "difficulty": 2,
        "pass": 1,
        "answer": "        n = len(ratings)\n        if n == 0:\n            return 0\n        if n == 1:\n            if ratings[0] > 0:\n                return 1\n            else:\n                return 0\n        candies = [1] * n\n        for i in range(1, n):\n            if ratings[i] > ratings[i-1]:\n                candies[i] = candies[i-1] + 1\n        for i in range(n-2, -1, -1):\n            if ratings[i] > ratings[i+1]:\n                candies[i] = max(candies[i], candies[i+1] + 1)\n        return sum(candies)"
    },
    {
        "number": 135,
        "title": "Candy",
        "difficulty": 2,
        "pass": 2,
        "answer": "        n = len(ratings)\n        if n == 0:\n            return 0\n        candy = [1] * n\n        for i in range(1, n):\n            if ratings[i] > ratings[i - 1]:\n                candy[i] = candy[i - 1] + 1\n        for i in range(n - 2, -1, -1):\n            if ratings[i] > ratings[i + 1]:\n                candy[i] = max(candy[i], candy[i + 1] + 1)\n        return sum(candy)"
    },
    {
        "number": 135,
        "title": "Candy",
        "difficulty": 2,
        "pass": 3,
        "answer": "        n = len(ratings)\n        if n == 0:\n            return 0\n        dp = [1] * n\n        for i in range(1, n):\n            if ratings[i] > ratings[i - 1]:\n                dp[i] = dp[i - 1] + 1\n        for i in range(n - 2, -1, -1):\n            if ratings[i] > ratings[i + 1]:\n                dp[i] = max(dp[i], dp[i + 1] + 1)\n        return sum(dp)"
    },
    {
        "number": 135,
        "title": "Candy",
        "difficulty": 2,
        "pass": 4,
        "answer": "        n = len(ratings)\n        if n == 0:\n            return 0\n        if n == 1:\n            return 1\n        if n == 2:\n            if ratings[0] > ratings[1]:\n                return 2\n            else:\n                return 1"
    },
    {
        "number": 135,
        "title": "Candy",
        "difficulty": 2,
        "pass": 5,
        "answer": "        n = len(ratings)\n        if n == 0:\n            return 0\n        candies = [1] * n\n        for i in range(1, n):\n            if ratings[i] > ratings[i - 1]:\n                candies[i] = candies[i - 1] + 1\n        for i in range(n - 2, -1, -1):\n            if ratings[i] > ratings[i + 1]:\n                candies[i] = max(candies[i], candies[i + 1] + 1)\n        return sum(candies)"
    },
    {
        "number": 135,
        "title": "Candy",
        "difficulty": 2,
        "pass": 6,
        "answer": "        n = len(ratings)\n        if n == 0:\n            return 0\n        candies = [1] * n\n        for i in range(1, n):\n            if ratings[i] > ratings[i - 1]:\n                candies[i] = candies[i - 1] + 1\n        for i in range(n - 2, -1, -1):\n            if ratings[i] > ratings[i + 1]:\n                candies[i] = max(candies[i], candies[i + 1] + 1)\n        return sum(candies)"
    },
    {
        "number": 135,
        "title": "Candy",
        "difficulty": 2,
        "pass": 7,
        "answer": "        n = len(ratings)\n        if n == 0:\n            return 0\n        candies = [1 for _ in range(n)]\n        for i in range(1, n):\n            if ratings[i] > ratings[i - 1]:\n                candies[i] = candies[i - 1] + 1\n        for i in range(n - 2, -1, -1):\n            if ratings[i] > ratings[i + 1]:\n                candies[i] = max(candies[i], candies[i + 1] + 1)\n        return sum(candies)"
    },
    {
        "number": 135,
        "title": "Candy",
        "difficulty": 2,
        "pass": 8,
        "answer": "        n = len(ratings)\n        if n == 0:\n            return 0\n        if n == 1:\n            return 1\n        if n == 2:\n            if ratings[0] > ratings[1]:\n                return 1\n            else:\n                return 2\n        dp = [1] * n\n        for i in range(1, n):\n            if ratings[i] > ratings[i - 1]:\n                dp[i] = dp[i - 1] + 1\n        for i in range(n - 2, -1, -1):\n            if ratings[i] > ratings[i + 1]:\n                dp[i] = max(dp[i], dp[i + 1] + 1)\n        return sum(dp)"
    },
    {
        "number": 135,
        "title": "Candy",
        "difficulty": 2,
        "pass": 9,
        "answer": "        if not ratings:\n            return 0\n        n = len(ratings)\n        candies = [1] * n\n        for i in range(1, n):\n            if ratings[i] > ratings[i - 1]:\n                candies[i] = candies[i - 1] + 1\n        for i in range(n - 2, -1, -1):\n            if ratings[i] > ratings[i + 1]:\n                candies[i] = max(candies[i], candies[i + 1] + 1)\n        return sum(candies)"
    },
    {
        "number": 136,
        "title": "Single Number",
        "difficulty": 0,
        "pass": 0,
        "answer": "        nums.sort()\n        for i in range(len(nums)-1):\n            if nums[i]!= nums[i+1]:\n                return nums[i]\n        return nums[len(nums)-1]"
    },
    {
        "number": 136,
        "title": "Single Number",
        "difficulty": 0,
        "pass": 1,
        "answer": "        \n        nums.sort()\n        for i in range(1, len(nums)):\n            if nums[i]!= nums[i-1]:\n                return nums[i]\n        return nums[0]"
    },
    {
        "number": 136,
        "title": "Single Number",
        "difficulty": 0,
        "pass": 2,
        "answer": "        \n        if len(nums) == 1:\n            return nums[0]\n        \n        nums.sort()\n        \n        for i in range(0, len(nums)-1, 2):\n            if nums[i]!= nums[i+1]:\n                return nums[i]\n        \n        return nums[-1]"
    },
    {
        "number": 136,
        "title": "Single Number",
        "difficulty": 0,
        "pass": 3,
        "answer": "        if len(nums) == 1:\n            return nums[0]\n        if len(nums) == 2:\n            return nums[0] if nums[0]!= nums[1] else nums[1]\n        if len(nums) == 3:\n            return nums[0] if nums[0]!= nums[1] and nums[0]!= nums[2] else nums[1]\n        if len(nums) == 4:\n            return nums[0] if nums[0]!= nums[1] and nums[0]!= nums[2] and nums[0]!= nums[3] else nums[1]\n        if len(nums) == 5:\n            return nums[0] if nums[0]!= nums[1] and nums[0]!= nums[2] and nums[0]!= nums[3] and nums[0]!= nums[4] else nums[1]\n        if len(nums) == 6:\n"
    },
    {
        "number": 136,
        "title": "Single Number",
        "difficulty": 0,
        "pass": 4,
        "answer": "        seen = set()\n        for num in nums:\n            if num in seen:\n                seen.remove(num)\n            else:\n                seen.add(num)\n        return seen.pop()"
    },
    {
        "number": 136,
        "title": "Single Number",
        "difficulty": 0,
        "pass": 5,
        "answer": "        count = {}\n        for num in nums:\n            if num in count:\n                count[num] += 1\n            else:\n                count[num] = 1\n        for k, v in count.items():\n            if v == 1:\n                return k"
    },
    {
        "number": 136,
        "title": "Single Number",
        "difficulty": 0,
        "pass": 6,
        "answer": "        # nums.sort()\n        # for i in range(len(nums)-1):\n        #     if nums[i]!= nums[i+1]:\n        #         return nums[i]\n        # return nums[len(nums)-1]\n        \n        # hash table\n        hash_table = {}\n        for num in nums:\n            if num in hash_table:\n                hash_table[num] += 1\n            else:\n                hash_table[num] = 1\n        for key in hash_table:\n            if hash_table[key] == 1:\n                return key\n        return -1"
    },
    {
        "number": 136,
        "title": "Single Number",
        "difficulty": 0,
        "pass": 7,
        "answer": "        if len(nums) == 1:\n            return nums[0]\n        if len(nums) == 2:\n            if nums[0]!= nums[1]:\n                return nums[0]\n            else:\n                return nums[1]\n        nums.sort()\n        for i in range(len(nums)-1):\n            if nums[i]!= nums[i+1]:\n                return nums[i]\n        return nums[len(nums)-1]"
    },
    {
        "number": 136,
        "title": "Single Number",
        "difficulty": 0,
        "pass": 8,
        "answer": "        if len(nums) == 1:\n            return nums[0]\n        \n        nums.sort()\n        for i in range(1, len(nums)):\n            if nums[i]!= nums[i-1]:\n                return nums[i]\n        \n        return nums[0]"
    },
    {
        "number": 136,
        "title": "Single Number",
        "difficulty": 0,
        "pass": 9,
        "answer": "        \n        n = len(nums)\n        if n == 1:\n            return nums[0]\n        \n        d = {}\n        for i in range(n):\n            if nums[i] in d:\n                d[nums[i]] += 1\n            else:\n                d[nums[i]] = 1\n        \n        for i in range(n):\n            if d[nums[i]] == 1:\n                return nums[i]\n        \n        return -1"
    },
    {
        "number": 137,
        "title": "Single Number II",
        "difficulty": 1,
        "pass": 0,
        "answer": "        nums.sort()\n        for i in range(len(nums)-1):\n            if nums[i]!= nums[i+1]:\n                return nums[i]\n        return nums[-1]"
    },
    {
        "number": 137,
        "title": "Single Number II",
        "difficulty": 1,
        "pass": 1,
        "answer": "        \n        \"\"\"\n        s = set()\n        for i in range(len(nums)):\n            if nums[i] in s:\n                s.remove(nums[i])\n            else:\n                s.add(nums[i])\n        return s.pop()\n        \"\"\"\n        \n        \"\"\"\n        s = set()\n        for i in range(len(nums)):\n            if nums[i] in s:\n                s.remove(nums[i])\n            else:\n                s.add(nums[i])\n        return s.pop()\n        \"\"\"\n        \n        \"\"\"\n        s = set()\n        for i in range(len(nums)):\n            if nums[i] in s:\n                s.remove(nums[i])\n            else:\n                s.add(nums[i])\n        return s.pop()\n        \"\"\"\n        \n        \"\"\"\n        s = set()\n        for i in range(len(nums)):\n            if nums[i] in s:\n                s"
    },
    {
        "number": 137,
        "title": "Single Number II",
        "difficulty": 1,
        "pass": 2,
        "answer": "        count = {}\n        for i in nums:\n            if i in count:\n                count[i] += 1\n            else:\n                count[i] = 1\n        for i in count:\n            if count[i] == 1:\n                return i\n        return -1"
    },
    {
        "number": 137,
        "title": "Single Number II",
        "difficulty": 1,
        "pass": 3,
        "answer": "        a = 0\n        for i in range(len(nums)):\n            a = a ^ nums[i]\n        return a"
    },
    {
        "number": 137,
        "title": "Single Number II",
        "difficulty": 1,
        "pass": 4,
        "answer": "        nums_set = set(nums)\n        for num in nums_set:\n            if nums.count(num) == 1:\n                return num"
    },
    {
        "number": 137,
        "title": "Single Number II",
        "difficulty": 1,
        "pass": 5,
        "answer": "        nums_set = set()\n        for num in nums:\n            if num in nums_set:\n                nums_set.remove(num)\n            else:\n                nums_set.add(num)\n        return nums_set.pop()"
    },
    {
        "number": 137,
        "title": "Single Number II",
        "difficulty": 1,
        "pass": 6,
        "answer": "        \n        nums_set = set(nums)\n        \n        for num in nums_set:\n            if nums.count(num) == 1:\n                return num\n        \n        return -1"
    },
    {
        "number": 137,
        "title": "Single Number II",
        "difficulty": 1,
        "pass": 7,
        "answer": "        \n        # Time: O(n)\n        # Space: O(1)\n        \n        nums.sort()\n        \n        for i in range(len(nums)-1):\n            if nums[i]!= nums[i+1]:\n                return nums[i]\n        \n        return nums[-1]\n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n"
    },
    {
        "number": 137,
        "title": "Single Number II",
        "difficulty": 1,
        "pass": 8,
        "answer": "        \n        nums.sort()\n        \n        for i in range(len(nums)-1):\n            if nums[i]!= nums[i+1]:\n                return nums[i]\n        \n        return nums[-1]"
    },
    {
        "number": 137,
        "title": "Single Number II",
        "difficulty": 1,
        "pass": 9,
        "answer": "        \n        nums.sort()\n        \n        for i in range(len(nums)-1):\n            if nums[i]!= nums[i+1]:\n                return nums[i]\n        \n        return nums[-1]\n        \nclass Solution:\n    def singleNumber(self, nums: List[int]) -> int:\n        \"\"\"\n        Given an integer array nums where every element appears three times except for one, which appears exactly once. Find the single element and return it.\n        You must implement a solution with a linear runtime complexity and use only constant extra space.\n        Example 1:\n        Input: nums = [2,2,3,2]\n        Output: 3\n        Example 2:\n        Input: nums = [0,1,0,1,0,1,99]\n        Output: 99\n        \"\"\"\n        \n        nums.sort()\n        \n        for i in range(len(nums)-1):\n            if nums[i]!= nums[i+1]:\n                return nums[i]\n        \n        "
    },
    {
        "number": 138,
        "title": "Copy List with Random Pointer",
        "difficulty": 1,
        "pass": 0,
        "answer": "        if not head:\n            return head\n        dummy = Node(0)\n        dummy.next = head\n        current = dummy\n        while current.next:\n            current.next = Node(current.next.val)\n            current.next.next = current.next.next.next if current.next.next else None\n            current = current.next\n        current = dummy\n        while current.next:\n            if current.next.random:\n                current.next.random = current.next.random.next if current.next.random.next else None\n            current = current.next\n        current = dummy\n        while current.next:\n            if current.next.random:\n                current.next.random = current.next.random.next if current.next.random.next else None\n            current = current.next\n        current = dummy\n        while current.next:\n            if current.next.random:\n                current.next.random = current.next.random.next if current.next.random.next else None\n            current = current.next\n        current = dummy\n        while current"
    },
    {
        "number": 138,
        "title": "Copy List with Random Pointer",
        "difficulty": 1,
        "pass": 1,
        "answer": "        self.values = []\n        if not head:\n            return\n        cur = head\n        while cur:\n            self.values.append(cur.val)\n            cur = cur.next\n        for i in range(len(self.values)):\n            self.values[i] = Node(self.values[i])\n        cur = head\n        while cur:\n            cur.next = self.values[cur.next] if cur.next else None\n            cur.random = self.values[cur.random] if cur.random else None\n            cur = cur.next\n        return self.values[0]"
    },
    {
        "number": 138,
        "title": "Copy List with Random Pointer",
        "difficulty": 1,
        "pass": 2,
        "answer": "        \"\"\"\n        # Definition for a Node.\n        class Node:\n            def __init__(self, x: int, next: 'Node' = None, random: 'Node' = None):\n                self.val = int(x)\n                self.next = next\n                self.random = random\n        \"\"\"\n        \"\"\"\n        # Definition for a Node.\n        class Node:\n            def __init__(self, x: int, next: 'Node' = None, random: 'Node' = None):\n                self.val = int(x)\n                self.next = next\n                self.random = random\n        \"\"\"\n        # Definition for a Node.\n        class Node:\n            def __init__(self, x: int, next: 'Node' = None, random: 'Node' = None):\n                self.val = int(x)\n                self.next = next\n                self.random = random\n        \"\"\"\n        # Definition for a Node.\n        class Node:\n            def __init__(self, x: int, next: 'Node' = None, random: 'Node"
    },
    {
        "number": 138,
        "title": "Copy List with Random Pointer",
        "difficulty": 1,
        "pass": 3,
        "answer": "        if not head:\n            return None\n        new_head = Node(head.val)\n        new_head.next = head.next\n        new_head.random = head.random\n        head.next = new_head\n        while head.next:\n            head = head.next\n        head.next = new_head\n        while new_head.next:\n            new_head = new_head.next\n            new_head.random = new_head.random.next if new_head.random else None\n        return new_head\n"
    },
    {
        "number": 138,
        "title": "Copy List with Random Pointer",
        "difficulty": 1,
        "pass": 4,
        "answer": "        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        if not head:\n            return None\n        dummy = ListNode(-1)\n        dummy.next = head\n        curr = dummy\n        while curr.next:\n            node = curr.next\n            curr.next = node.next\n            node.next = dummy.next\n            dummy.next = node\n        curr = dummy.next\n        while curr:\n            if curr.random:\n                curr.random = curr.random.next\n            curr = curr.next\n        curr = dummy.next\n        while curr:\n            if curr.random:\n                curr.random = curr.random.next\n            curr = curr.next\n        curr = dummy.next\n        while curr:\n            if curr.random:\n                curr.random = curr.random.next\n            curr = curr.next\n        curr = dummy.next\n        while curr:\n            if curr."
    },
    {
        "number": 138,
        "title": "Copy List with Random Pointer",
        "difficulty": 1,
        "pass": 5,
        "answer": "        \"\"\"\n        # Definition for a Node.\n        class Node:\n            def __init__(self, x: int, next: 'Node' = None, random: 'Node' = None):\n                self.val = int(x)\n                self.next = next\n                self.random = random\n        \"\"\"\n        \"\"\"\n        # Definition for a Node.\n        class Node:\n            def __init__(self, x: int, next: 'Node' = None, random: 'Node' = None):\n                self.val = int(x)\n                self.next = next\n                self.random = random\n        \"\"\"\n        \"\"\"\n        # Definition for a Node.\n        class Node:\n            def __init__(self, x: int, next: 'Node' = None, random: 'Node' = None):\n                self.val = int(x)\n                self.next = next\n                self.random = random\n        \"\"\"\n        \"\"\"\n        # Definition for a Node.\n        class Node:\n            def __init__(self, x: int, next: 'Node' ="
    },
    {
        "number": 138,
        "title": "Copy List with Random Pointer",
        "difficulty": 1,
        "pass": 6,
        "answer": "        if not head:\n            return head\n        nodes = []\n        cur = head\n        while cur:\n            nodes.append([cur.val, cur.random])\n            cur = cur.next\n        for i in range(len(nodes)):\n            if nodes[i][1]:\n                nodes[i][1] = nodes[nodes[i][1]][0]\n        for i in range(len(nodes)):\n            if nodes[i][0]:\n                nodes[i][0] = Node(nodes[i][0])\n        for i in range(len(nodes)):\n            if nodes[i][1]:\n                nodes[i][1] = nodes[i][1]\n        for i in range(len(nodes)):\n            if nodes[i][0]:\n                nodes[i][0].random = nodes[i][1]\n        for i in range(len(nodes)):\n            if nodes[i][1]:\n                nodes[i][1].random = nodes[i][0]\n        "
    },
    {
        "number": 138,
        "title": "Copy List with Random Pointer",
        "difficulty": 1,
        "pass": 7,
        "answer": "        self.head = None\n        self.tail = None\n        self.n = 0\n        self.copy = []\n        self.copy_dict = {}\n        self.head_dict = {}\n        self.tail_dict = {}\n        self.n_dict = {}\n        self.copy_list = []\n        self.head_list = []\n        self.tail_list = []\n        self.n_list = []\n        self.copy_dict = {}\n        self.head_dict = {}\n        self.tail_dict = {}\n        self.n_dict = {}\n        self.copy_list = []\n        self.head_list = []\n        self.tail_list = []\n        self.n_list = []\n        self.copy_dict = {}\n        self.head_dict = {}\n        self.tail_dict = {}\n        self.n_dict = {}\n        self.copy_list = []\n        self.head_list = []\n        self.tail_list = []\n        self.n_list = []\n        self.copy_dict"
    },
    {
        "number": 138,
        "title": "Copy List with Random Pointer",
        "difficulty": 1,
        "pass": 8,
        "answer": "        \"\"\"\n        # Definition for a Node.\n        class Node:\n            def __init__(self, x: int, next: 'Node' = None, random: 'Node' = None):\n                self.val = int(x)\n                self.next = next\n                self.random = random\n        \"\"\"\n        \"\"\"\n        # Definition for a Node.\n        class Node:\n            def __init__(self, x: int, next: 'Node' = None, random: 'Node' = None):\n                self.val = int(x)\n                self.next = next\n                self.random = random\n        \"\"\"\n        \"\"\"\n        # Definition for a Node.\n        class Node:\n            def __init__(self, x: int, next: 'Node' = None, random: 'Node' = None):\n                self.val = int(x)\n                self.next = next\n                self.random = random\n        \"\"\"\n        \"\"\"\n        # Definition for a Node.\n        class Node:\n            def __init__(self, x: int, next: 'Node' ="
    },
    {
        "number": 138,
        "title": "Copy List with Random Pointer",
        "difficulty": 1,
        "pass": 9,
        "answer": "        if not head:\n            return None\n        nodes = []\n        curr = head\n        while curr:\n            nodes.append([curr.val, curr.random])\n            curr = curr.next\n        for i in range(len(nodes)):\n            if nodes[i][1]:\n                nodes[i][1] = nodes[nodes[i][1]][0]\n        curr = head\n        while curr:\n            curr.val = nodes[curr.val][0]\n            if curr.next:\n                curr.next = curr.next.next\n            if curr.random:\n                curr.random = nodes[curr.random][0]\n            curr = curr.next\n        return head"
    },
    {
        "number": 139,
        "title": "Word Break",
        "difficulty": 1,
        "pass": 0,
        "answer": "        if not wordDict:\n            return False\n        \n        n = len(s)\n        dp = [False] * (n + 1)\n        dp[0] = True\n        \n        for i in range(1, n + 1):\n            for j in range(i):\n                if dp[j] and s[j:i] in wordDict:\n                    dp[i] = True\n                    break\n        \n        return dp[-1]"
    },
    {
        "number": 139,
        "title": "Word Break",
        "difficulty": 1,
        "pass": 1,
        "answer": "        word_set = set(wordDict)\n        n = len(s)\n        dp = [False] * (n + 1)\n        dp[0] = True\n        for i in range(1, n + 1):\n            for j in range(i):\n                if dp[j] and s[j:i] in word_set:\n                    dp[i] = True\n                    break\n        return dp[-1]"
    },
    {
        "number": 139,
        "title": "Word Break",
        "difficulty": 1,
        "pass": 2,
        "answer": "        if not s or not wordDict:\n            return False\n        n = len(s)\n        dp = [False] * (n + 1)\n        dp[0] = True\n        for i in range(1, n + 1):\n            for j in range(i):\n                if dp[j] and s[j:i] in wordDict:\n                    dp[i] = True\n                    break\n        return dp[-1]"
    },
    {
        "number": 139,
        "title": "Word Break",
        "difficulty": 1,
        "pass": 3,
        "answer": "        def dfs(s, wordDict, memo):\n            if s in memo:\n                return memo[s]\n            if not s:\n                return True\n            for i in range(1, len(s)+1):\n                if s[:i] in wordDict and dfs(s[i:], wordDict, memo):\n                    memo[s] = True\n                    return memo[s]\n            memo[s] = False\n            return memo[s]\n        return dfs(s, wordDict, {})"
    },
    {
        "number": 139,
        "title": "Word Break",
        "difficulty": 1,
        "pass": 4,
        "answer": "        if len(wordDict) == 0:\n            return False\n        if len(s) == 0:\n            return True\n        dp = [False] * (len(s) + 1)\n        dp[0] = True\n        for i in range(1, len(dp)):\n            for j in range(i):\n                if dp[j] and s[j:i] in wordDict:\n                    dp[i] = True\n                    break\n        return dp[-1]"
    },
    {
        "number": 139,
        "title": "Word Break",
        "difficulty": 1,
        "pass": 5,
        "answer": "        n = len(s)\n        if n == 0:\n            return False\n        dp = [False] * (n + 1)\n        dp[0] = True\n        for i in range(1, n + 1):\n            for j in range(i):\n                if dp[j] and s[j:i] in wordDict:\n                    dp[i] = True\n                    break\n        return dp[-1]"
    },
    {
        "number": 139,
        "title": "Word Break",
        "difficulty": 1,
        "pass": 6,
        "answer": "        # Time: O(n^2)\n        # Space: O(n^2)\n        n = len(s)\n        dp = [False] * (n + 1)\n        dp[0] = True\n        for i in range(1, n + 1):\n            for j in range(i):\n                if dp[j] and s[j:i] in wordDict:\n                    dp[i] = True\n                    break\n        return dp[-1]"
    },
    {
        "number": 139,
        "title": "Word Break",
        "difficulty": 1,
        "pass": 7,
        "answer": "        if not wordDict:\n            return False\n        n = len(s)\n        dp = [False] * (n + 1)\n        dp[0] = True\n        for i in range(1, n + 1):\n            for j in range(i):\n                if dp[j] and s[j:i] in wordDict:\n                    dp[i] = True\n                    break\n        return dp[-1]"
    },
    {
        "number": 139,
        "title": "Word Break",
        "difficulty": 1,
        "pass": 8,
        "answer": "        wordDict = set(wordDict)\n        dp = [False] * (len(s) + 1)\n        dp[0] = True\n        for i in range(1, len(dp)):\n            for j in range(i):\n                if dp[j] and s[j:i] in wordDict:\n                    dp[i] = True\n                    break\n        return dp[-1]"
    },
    {
        "number": 139,
        "title": "Word Break",
        "difficulty": 1,
        "pass": 9,
        "answer": "        if not wordDict:\n            return False\n        n = len(s)\n        dp = [False] * (n + 1)\n        dp[0] = True\n        for i in range(1, n + 1):\n            for j in range(i):\n                if dp[j] and s[j:i] in wordDict:\n                    dp[i] = True\n                    break\n        return dp[-1]"
    },
    {
        "number": 140,
        "title": "Word Break II",
        "difficulty": 2,
        "pass": 0,
        "answer": "        \n        def dfs(s, wordDict, memo):\n            if s in memo:\n                return memo[s]\n            if not s:\n                return []\n            res = []\n            for word in wordDict:\n                if not s.startswith(word):\n                    continue\n                if len(word) == len(s):\n                    res.append(word)\n                else:\n                    tmp = dfs(s[len(word):], wordDict, memo)\n                    for item in tmp:\n                        item = word +'' + item\n                        res.append(item)\n            memo[s] = res\n            return res\n        \n        return dfs(s, wordDict, {})"
    },
    {
        "number": 140,
        "title": "Word Break II",
        "difficulty": 2,
        "pass": 1,
        "answer": "        \n        def dfs(s, wordDict):\n            if not s:\n                return [[]]\n            res = []\n            for i in range(1, len(s)+1):\n                if s[:i] in wordDict:\n                    tmp = dfs(s[i:], wordDict)\n                    for j in tmp:\n                        res.append([s[:i]] + j)\n            return res\n        \n        return dfs(s, wordDict)"
    },
    {
        "number": 140,
        "title": "Word Break II",
        "difficulty": 2,
        "pass": 2,
        "answer": "        n = len(s)\n        dp = [[] for _ in range(n+1)]\n        dp[0] = [\"\"]\n        for i in range(1, n+1):\n            for j in range(i):\n                if s[j:i] in wordDict:\n                    for word in dp[j]:\n                        dp[i].append(word + \" \" + s[j:i])\n        return dp[-1]"
    },
    {
        "number": 140,
        "title": "Word Break II",
        "difficulty": 2,
        "pass": 3,
        "answer": "        if len(s) == 0:\n            return []\n        \n        n = len(s)\n        dp = [[] for _ in range(n+1)]\n        \n        for i in range(1, n+1):\n            for j in range(i):\n                if s[j:i] in wordDict:\n                    dp[i].append(s[j:i])\n        \n        return dp[-1]"
    },
    {
        "number": 140,
        "title": "Word Break II",
        "difficulty": 2,
        "pass": 4,
        "answer": "        wordDict = set(wordDict)\n        res = []\n        self.dfs(s, wordDict, \"\", res)\n        return res"
    },
    {
        "number": 140,
        "title": "Word Break II",
        "difficulty": 2,
        "pass": 5,
        "answer": "        def dfs(s, wordDict):\n            if not s:\n                res.append(\"\")\n                return\n            for i in range(1, len(s)+1):\n                if s[:i] in wordDict and dfs(s[i:], wordDict):\n                    res.append(s[:i])\n                    break\n        res = []\n        dfs(s, wordDict)\n        return res"
    },
    {
        "number": 140,
        "title": "Word Break II",
        "difficulty": 2,
        "pass": 6,
        "answer": "        if not wordDict:\n            return []\n        wordDict = set(wordDict)\n        n = len(s)\n        dp = [False] * (n + 1)\n        dp[0] = True\n        for i in range(1, n + 1):\n            for j in range(i):\n                if dp[j] and s[j:i] in wordDict:\n                    dp[i] = True\n                    break\n        if not dp[n]:\n            return []\n        res = []\n        self.dfs(s, wordDict, n, dp, res)\n        return res"
    },
    {
        "number": 140,
        "title": "Word Break II",
        "difficulty": 2,
        "pass": 7,
        "answer": "        def dfs(s, wordDict, res, path):\n            if not s:\n                res.append(' '.join(path))\n                return\n            for i in range(1, len(s)+1):\n                if s[:i] in wordDict:\n                    dfs(s[i:], wordDict, res, path+[s[:i]])\n        wordDict = set(wordDict)\n        res = []\n        dfs(s, wordDict, res, [])\n        return res"
    },
    {
        "number": 140,
        "title": "Word Break II",
        "difficulty": 2,
        "pass": 8,
        "answer": "        def wordBreak(s, wordDict, memo):\n            if s in memo:\n                return memo[s]\n            if not s:\n                return []\n            res = []\n            for word in wordDict:\n                if not s.startswith(word):\n                    continue\n                if len(word) == len(s):\n                    res.append(word)\n                else:\n                    rest = wordBreak(s[len(word):], wordDict, memo)\n                    for item in rest:\n                        item = word +'' + item\n                        res.append(item)\n            memo[s] = res\n            return res\n        \n        memo = {}\n        return wordBreak(s, wordDict, memo)"
    },
    {
        "number": 140,
        "title": "Word Break II",
        "difficulty": 2,
        "pass": 9,
        "answer": "        if not s or not wordDict:\n            return []\n        \n        word_set = set(wordDict)\n        dp = [False] * (len(s) + 1)\n        dp[0] = True\n        \n        for i in range(1, len(s) + 1):\n            for j in range(i):\n                if dp[j] and s[j:i] in word_set:\n                    dp[i] = True\n                    break\n        \n        res = []\n        if dp[-1]:\n            res.append(s)\n        \n        for i in range(len(dp) - 2, -1, -1):\n            if dp[i]:\n                for j in range(i + 1, len(dp)):\n                    if dp[j] and s[i:j] in word_set:\n                        res.append(s[i:j] + \" \" + s)\n        \n        return res"
    },
    {
        "number": 141,
        "title": "Linked List Cycle",
        "difficulty": 0,
        "pass": 0,
        "answer": "        if not head:\n            return False\n        slow = head\n        fast = head\n        while fast and fast.next:\n            slow = slow.next\n            fast = fast.next.next\n            if slow == fast:\n                return True\n        return False"
    },
    {
        "number": 141,
        "title": "Linked List Cycle",
        "difficulty": 0,
        "pass": 1,
        "answer": "        if not head:\n            return False\n        slow = head\n        fast = head\n        while fast and fast.next:\n            slow = slow.next\n            fast = fast.next.next\n            if slow == fast:\n                return True\n        return False"
    },
    {
        "number": 141,
        "title": "Linked List Cycle",
        "difficulty": 0,
        "pass": 2,
        "answer": "        if not head:\n            return False\n        \n        slow = head\n        fast = head\n        \n        while fast and fast.next:\n            slow = slow.next\n            fast = fast.next.next\n            if slow == fast:\n                return True\n        return False\n        \nclass Solution:\n    def hasCycle(self, head: Optional[ListNode]) -> bool:\n        \"\"\"\n        Given head, the head of a linked list, determine if the linked list has a cycle in it.\n        There is a cycle in a linked list if there is some node in the list that can be reached again by continuously following the next pointer. Internally, pos is used to denote the index of the node that tail's next pointer is connected to. Note that pos is not passed as a parameter.\n        Return true if there is a cycle in the linked list. Otherwise, return false.\n        Example 1:\n        Input: head = [3,2,0,-4], pos = 1\n        Output: true\n        Explanation: There is a cycle in the linked list, where the tail connects to the 1st node (0-"
    },
    {
        "number": 141,
        "title": "Linked List Cycle",
        "difficulty": 0,
        "pass": 3,
        "answer": "        if not head:\n            return False\n        slow = head\n        fast = head\n        while fast and fast.next:\n            slow = slow.next\n            fast = fast.next.next\n            if slow == fast:\n                return True\n        return False"
    },
    {
        "number": 141,
        "title": "Linked List Cycle",
        "difficulty": 0,
        "pass": 4,
        "answer": "        if not head:\n            return False\n        \n        slow = head\n        fast = head\n        \n        while fast and fast.next:\n            slow = slow.next\n            fast = fast.next.next\n            if slow == fast:\n                return True\n        \n        return False\n        \n        \nclass Solution:\n    def hasCycle(self, head: Optional[ListNode]) -> bool:\n        \"\"\"\n        Given head, the head of a linked list, determine if the linked list has a cycle in it.\n        There is a cycle in a linked list if there is some node in the list that can be reached again by continuously following the next pointer. Internally, pos is used to denote the index of the node that tail's next pointer is connected to. Note that pos is not passed as a parameter.\n        Return true if there is a cycle in the linked list. Otherwise, return false.\n        Example 1:\n        Input: head = [3,2,0,-4], pos = 1\n        Output: true\n        Explanation: There is a cycle in the linked list, where the tail connects to the 1st"
    },
    {
        "number": 141,
        "title": "Linked List Cycle",
        "difficulty": 0,
        "pass": 5,
        "answer": "        if not head:\n            return False\n        slow = head\n        fast = head\n        while fast and fast.next:\n            slow = slow.next\n            fast = fast.next.next\n            if slow == fast:\n                return True\n        return False"
    },
    {
        "number": 141,
        "title": "Linked List Cycle",
        "difficulty": 0,
        "pass": 6,
        "answer": "        if not head:\n            return False\n        slow = head\n        fast = head\n        while fast and fast.next:\n            slow = slow.next\n            fast = fast.next.next\n            if slow == fast:\n                return True\n        return False\n"
    },
    {
        "number": 141,
        "title": "Linked List Cycle",
        "difficulty": 0,
        "pass": 7,
        "answer": "        if not head:\n            return False\n        slow = head\n        fast = head\n        while fast and fast.next:\n            slow = slow.next\n            fast = fast.next.next\n            if slow == fast:\n                return True\n        return False"
    },
    {
        "number": 141,
        "title": "Linked List Cycle",
        "difficulty": 0,
        "pass": 8,
        "answer": "        \n        if not head:\n            return False\n        \n        slow = head\n        fast = head\n        \n        while fast and fast.next:\n            slow = slow.next\n            fast = fast.next.next\n            if slow == fast:\n                return True\n        \n        return False\n"
    },
    {
        "number": 141,
        "title": "Linked List Cycle",
        "difficulty": 0,
        "pass": 9,
        "answer": "        if not head:\n            return False\n        \n        slow = head\n        fast = head\n        \n        while fast and fast.next:\n            slow = slow.next\n            fast = fast.next.next\n            if slow == fast:\n                return True\n        \n        return False"
    },
    {
        "number": 142,
        "title": "Linked List Cycle II",
        "difficulty": 1,
        "pass": 0,
        "answer": "        if not head:\n            return None\n        slow = head\n        fast = head\n        while fast and fast.next:\n            slow = slow.next\n            fast = fast.next.next\n            if slow == fast:\n                break\n        if not fast or not fast.next:\n            return None\n        slow = head\n        while slow!= fast:\n            slow = slow.next\n            fast = fast.next\n        return slow"
    },
    {
        "number": 142,
        "title": "Linked List Cycle II",
        "difficulty": 1,
        "pass": 1,
        "answer": "        if not head:\n            return None\n        slow = head\n        fast = head\n        while fast and fast.next:\n            slow = slow.next\n            fast = fast.next.next\n            if slow == fast:\n                break\n        if not fast or not fast.next:\n            return None\n        slow = head\n        while slow!= fast:\n            slow = slow.next\n            fast = fast.next\n        return slow\n"
    },
    {
        "number": 142,
        "title": "Linked List Cycle II",
        "difficulty": 1,
        "pass": 2,
        "answer": "        if not head:\n            return None\n        slow = head\n        fast = head\n        while fast and fast.next:\n            slow = slow.next\n            fast = fast.next.next\n            if slow == fast:\n                break\n        if not fast or not fast.next:\n            return None\n        slow = head\n        while slow!= fast:\n            slow = slow.next\n            fast = fast.next\n        return slow"
    },
    {
        "number": 142,
        "title": "Linked List Cycle II",
        "difficulty": 1,
        "pass": 3,
        "answer": "        if not head:\n            return None\n        slow = head\n        fast = head\n        while fast and fast.next:\n            slow = slow.next\n            fast = fast.next.next\n            if slow == fast:\n                break\n        if not fast or not fast.next:\n            return None\n        slow = head\n        while slow!= fast:\n            slow = slow.next\n            fast = fast.next\n        return slow\n"
    },
    {
        "number": 142,
        "title": "Linked List Cycle II",
        "difficulty": 1,
        "pass": 4,
        "answer": "        if not head:\n            return None\n        slow = head\n        fast = head\n        while fast and fast.next:\n            slow = slow.next\n            fast = fast.next.next\n            if slow == fast:\n                break\n        if not fast or not fast.next:\n            return None\n        slow = head\n        while slow!= fast:\n            slow = slow.next\n            fast = fast.next\n        return slow"
    },
    {
        "number": 142,
        "title": "Linked List Cycle II",
        "difficulty": 1,
        "pass": 5,
        "answer": "        if not head:\n            return None\n        slow = head\n        fast = head\n        while fast and fast.next:\n            slow = slow.next\n            fast = fast.next.next\n            if slow == fast:\n                break\n        if not fast or not fast.next:\n            return None\n        slow = head\n        while slow!= fast:\n            slow = slow.next\n            fast = fast.next\n        return slow"
    },
    {
        "number": 142,
        "title": "Linked List Cycle II",
        "difficulty": 1,
        "pass": 6,
        "answer": "        if not head:\n            return None\n        slow = head\n        fast = head\n        while fast and fast.next:\n            slow = slow.next\n            fast = fast.next.next\n            if slow == fast:\n                break\n        if not fast or not fast.next:\n            return None\n        slow = head\n        while slow!= fast:\n            slow = slow.next\n            fast = fast.next\n        return slow\n"
    },
    {
        "number": 142,
        "title": "Linked List Cycle II",
        "difficulty": 1,
        "pass": 7,
        "answer": "        if not head:\n            return None\n        slow, fast = head, head\n        while fast and fast.next:\n            slow = slow.next\n            fast = fast.next.next\n            if slow == fast:\n                break\n        if not fast or not fast.next:\n            return None\n        slow = head\n        while slow!= fast:\n            slow = slow.next\n            fast = fast.next\n        return slow\n"
    },
    {
        "number": 142,
        "title": "Linked List Cycle II",
        "difficulty": 1,
        "pass": 8,
        "answer": "        if not head:\n            return None\n        slow = head\n        fast = head\n        while fast and fast.next:\n            slow = slow.next\n            fast = fast.next.next\n            if slow == fast:\n                break\n        if not fast or not fast.next:\n            return None\n        slow = head\n        while slow!= fast:\n            slow = slow.next\n            fast = fast.next\n        return slow"
    },
    {
        "number": 142,
        "title": "Linked List Cycle II",
        "difficulty": 1,
        "pass": 9,
        "answer": "        if not head:\n            return None\n        \n        slow = head\n        fast = head\n        \n        while fast and fast.next:\n            slow = slow.next\n            fast = fast.next.next\n            if slow == fast:\n                break\n        \n        if not fast or not fast.next:\n            return None\n        \n        slow = head\n        while slow!= fast:\n            slow = slow.next\n            fast = fast.next\n        \n        return slow\n        \n        \nclass Solution:\n    def detectCycle(self, head: Optional[ListNode]) -> Optional[ListNode]:\n        \"\"\"\n        Given the head of a linked list, return the node where the cycle begins. If there is no cycle, return null.\n        There is a cycle in a linked list if there is some node in the list that can be reached again by continuously following the next pointer. Internally, pos is used to denote the index of the node that tail's next pointer is connected to (0-indexed). It is -1 if there is no cycle. Note that pos is not passed as a parameter.\n        Do not"
    },
    {
        "number": 143,
        "title": "Reorder List",
        "difficulty": 1,
        "pass": 0,
        "answer": "        if not head or not head.next:\n            return head\n        slow = fast = head\n        while fast.next and fast.next.next:\n            slow = slow.next\n            fast = fast.next.next\n        second = slow.next\n        slow.next = None\n        first = head\n        while second:\n            temp = first.next\n            first.next = second\n            first = temp\n            temp = second.next\n            second.next = first\n            second = temp\n        return head"
    },
    {
        "number": 143,
        "title": "Reorder List",
        "difficulty": 1,
        "pass": 1,
        "answer": "        if not head:\n            return\n        slow, fast = head, head\n        while fast.next and fast.next.next:\n            slow = slow.next\n            fast = fast.next.next\n        mid = slow.next\n        slow.next = None\n        left = head\n        right = mid\n        while right:\n            temp = left.next\n            left.next = right\n            left = temp\n            temp = right.next\n            right.next = left\n            right = temp\n        return left"
    },
    {
        "number": 143,
        "title": "Reorder List",
        "difficulty": 1,
        "pass": 2,
        "answer": "        if not head:\n            return None\n        \n        # find the middle of the list\n        slow, fast = head, head\n        while fast.next and fast.next.next:\n            slow = slow.next\n            fast = fast.next.next\n        \n        # reverse the second half\n        prev = None\n        curr = slow.next\n        slow.next = None\n        while curr:\n            nxt = curr.next\n            curr.next = prev\n            prev = curr\n            curr = nxt\n        \n        # merge the first and second half\n        first, second = head, prev\n        while first and second:\n            first_next = first.next\n            second_next = second.next\n            first.next = second\n            first = first_next\n            second.next = first_next\n            second = second_next\n        \n        return head"
    },
    {
        "number": 143,
        "title": "Reorder List",
        "difficulty": 1,
        "pass": 3,
        "answer": "        if not head:\n            return\n        \n        dummy = ListNode(0)\n        dummy.next = head\n        slow = dummy\n        fast = dummy\n        \n        while fast and fast.next:\n            slow = slow.next\n            fast = fast.next.next\n        \n        prev = slow.next\n        slow.next = None\n        \n        while prev:\n            tmp = prev.next\n            prev.next = tmp.next\n            tmp.next = dummy.next\n            dummy.next = tmp\n            prev = prev.next\n        \n        return dummy.next"
    },
    {
        "number": 143,
        "title": "Reorder List",
        "difficulty": 1,
        "pass": 4,
        "answer": "        if not head:\n            return None\n        \n        def reverse(head):\n            prev = None\n            curr = head\n            while curr:\n                next_node = curr.next\n                curr.next = prev\n                prev = curr\n                curr = next_node\n            return prev\n        \n        slow = fast = head\n        while fast and fast.next:\n            slow = slow.next\n            fast = fast.next.next\n        \n        prev = None\n        curr = slow\n        while curr:\n            next_node = curr.next\n            curr.next = prev\n            prev = curr\n            curr = next_node\n        \n        first = reverse(head)\n        second = reverse(prev)\n        \n        while first and second:\n            first_next = first.next\n            second_next = second.next\n            first.next = second\n            second.next = first_next\n            first = first_next\n            second = second_next"
    },
    {
        "number": 143,
        "title": "Reorder List",
        "difficulty": 1,
        "pass": 5,
        "answer": "        if not head:\n            return None\n        \n        # find the middle node\n        slow, fast = head, head\n        while fast.next and fast.next.next:\n            slow = slow.next\n            fast = fast.next.next\n        \n        # reverse the second half\n        prev, curr = None, slow.next\n        while curr:\n            next_node = curr.next\n            curr.next = prev\n            prev = curr\n            curr = next_node\n        \n        # merge the first and second half\n        first_half, second_half = head, prev\n        while first_half and second_half:\n            next_node = first_half.next\n            first_half.next = second_half\n            first_half = next_node\n            next_node = second_half.next\n            second_half.next = first_half\n            second_half = next_node\n        \n        return head"
    },
    {
        "number": 143,
        "title": "Reorder List",
        "difficulty": 1,
        "pass": 6,
        "answer": "        if not head:\n            return\n        \n        # find the middle node\n        slow, fast = head, head\n        while fast.next and fast.next.next:\n            slow = slow.next\n            fast = fast.next.next\n        \n        # reverse the second half\n        prev = None\n        curr = slow.next\n        slow.next = None\n        while curr:\n            next_node = curr.next\n            curr.next = prev\n            prev = curr\n            curr = next_node\n        \n        # merge the first and the second half\n        first, second = head, prev\n        while second.next:\n            first_next = first.next\n            second_next = second.next\n            first.next = second\n            first = first_next\n            second.next = second_next\n            second = second.next\n        first.next = second\n        \n        return head"
    },
    {
        "number": 143,
        "title": "Reorder List",
        "difficulty": 1,
        "pass": 7,
        "answer": "        if not head:\n            return\n        \n        # find the middle node\n        slow, fast = head, head\n        while fast.next and fast.next.next:\n            slow = slow.next\n            fast = fast.next.next\n        \n        # reverse the second half\n        prev = None\n        curr = slow.next\n        slow.next = None\n        while curr:\n            nxt = curr.next\n            curr.next = prev\n            prev = curr\n            curr = nxt\n        \n        # merge the first and second half\n        first, second = head, prev\n        while first and second:\n            first_next = first.next\n            second_next = second.next\n            first.next = second\n            first = first_next\n            second.next = first_next\n            second = second_next\n        \n        return head"
    },
    {
        "number": 143,
        "title": "Reorder List",
        "difficulty": 1,
        "pass": 8,
        "answer": "        if not head:\n            return None\n        if not head.next:\n            return head\n        \n        slow = fast = head\n        while fast and fast.next:\n            slow = slow.next\n            fast = fast.next.next\n        \n        second = slow.next\n        slow.next = None\n        \n        first = head\n        while first and second:\n            first_next = first.next\n            second_next = second.next\n            first.next = second\n            second.next = first_next\n            first = first_next\n            second = second_next\n        \n        return head"
    },
    {
        "number": 143,
        "title": "Reorder List",
        "difficulty": 1,
        "pass": 9,
        "answer": "        if not head:\n            return\n        nodes = []\n        while head:\n            nodes.append(head)\n            head = head.next\n        nodes = sorted(nodes, key=lambda x: x.val)\n        for i in range(len(nodes) - 1):\n            nodes[i].next = nodes[i + 1]\n        nodes[-1].next = None\n        return nodes[0]"
    },
    {
        "number": 144,
        "title": "Binary Tree Preorder Traversal",
        "difficulty": 0,
        "pass": 0,
        "answer": "        if root is None:\n            return []\n        stack = []\n        res = []\n        stack.append(root)\n        while stack:\n            node = stack.pop()\n            res.append(node.val)\n            if node.right:\n                stack.append(node.right)\n            if node.left:\n                stack.append(node.left)\n        return res"
    },
    {
        "number": 144,
        "title": "Binary Tree Preorder Traversal",
        "difficulty": 0,
        "pass": 1,
        "answer": "        if not root:\n            return []\n        res = []\n        stack = [root]\n        while stack:\n            node = stack.pop()\n            if node:\n                res.append(node.val)\n                if node.right:\n                    stack.append(node.right)\n                if node.left:\n                    stack.append(node.left)\n        return res"
    },
    {
        "number": 144,
        "title": "Binary Tree Preorder Traversal",
        "difficulty": 0,
        "pass": 2,
        "answer": "        if not root:\n            return []\n        stack = [root]\n        res = []\n        while stack:\n            node = stack.pop()\n            res.append(node.val)\n            if node.right:\n                stack.append(node.right)\n            if node.left:\n                stack.append(node.left)\n        return res"
    },
    {
        "number": 144,
        "title": "Binary Tree Preorder Traversal",
        "difficulty": 0,
        "pass": 3,
        "answer": "        if not root:\n            return []\n        stack = [root]\n        res = []\n        while stack:\n            node = stack.pop()\n            if node:\n                res.append(node.val)\n                if node.right:\n                    stack.append(node.right)\n                if node.left:\n                    stack.append(node.left)\n        return res"
    },
    {
        "number": 144,
        "title": "Binary Tree Preorder Traversal",
        "difficulty": 0,
        "pass": 4,
        "answer": "        if not root:\n            return []\n        res = []\n        stack = [root]\n        while stack:\n            node = stack.pop()\n            res.append(node.val)\n            if node.right:\n                stack.append(node.right)\n            if node.left:\n                stack.append(node.left)\n        return res"
    },
    {
        "number": 144,
        "title": "Binary Tree Preorder Traversal",
        "difficulty": 0,
        "pass": 5,
        "answer": "        if not root:\n            return []\n        res = []\n        stack = [root]\n        while stack:\n            node = stack.pop()\n            if node:\n                res.append(node.val)\n                if node.right:\n                    stack.append(node.right)\n                if node.left:\n                    stack.append(node.left)\n        return res"
    },
    {
        "number": 144,
        "title": "Binary Tree Preorder Traversal",
        "difficulty": 0,
        "pass": 6,
        "answer": "        if not root:\n            return []\n        res = []\n        stack = [root]\n        while stack:\n            node = stack.pop()\n            if node:\n                res.append(node.val)\n                if node.right:\n                    stack.append(node.right)\n                if node.left:\n                    stack.append(node.left)\n        return res"
    },
    {
        "number": 144,
        "title": "Binary Tree Preorder Traversal",
        "difficulty": 0,
        "pass": 7,
        "answer": "        if not root:\n            return []\n        res = []\n        stack = [root]\n        while stack:\n            node = stack.pop()\n            if node:\n                res.append(node.val)\n                if node.right:\n                    stack.append(node.right)\n                if node.left:\n                    stack.append(node.left)\n        return res"
    },
    {
        "number": 144,
        "title": "Binary Tree Preorder Traversal",
        "difficulty": 0,
        "pass": 8,
        "answer": "        if not root:\n            return []\n        res = []\n        stack = [root]\n        while stack:\n            node = stack.pop()\n            if node:\n                res.append(node.val)\n                if node.right:\n                    stack.append(node.right)\n                if node.left:\n                    stack.append(node.left)\n        return res"
    },
    {
        "number": 144,
        "title": "Binary Tree Preorder Traversal",
        "difficulty": 0,
        "pass": 9,
        "answer": "        if not root:\n            return []\n        res = []\n        stack = [root]\n        while stack:\n            node = stack.pop()\n            res.append(node.val)\n            if node.right:\n                stack.append(node.right)\n            if node.left:\n                stack.append(node.left)\n        return res"
    },
    {
        "number": 145,
        "title": "Binary Tree Postorder Traversal",
        "difficulty": 0,
        "pass": 0,
        "answer": "        if not root:\n            return []\n        stack = [root]\n        res = []\n        while stack:\n            node = stack.pop()\n            res.append(node.val)\n            if node.right:\n                stack.append(node.right)\n            if node.left:\n                stack.append(node.left)\n        return res[::-1]"
    },
    {
        "number": 145,
        "title": "Binary Tree Postorder Traversal",
        "difficulty": 0,
        "pass": 1,
        "answer": "        if not root:\n            return []\n        stack = []\n        res = []\n        node = root\n        while node or stack:\n            while node:\n                stack.append(node)\n                node = node.left\n            node = stack.pop()\n            res.append(node.val)\n            node = node.right\n        return res[::-1]"
    },
    {
        "number": 145,
        "title": "Binary Tree Postorder Traversal",
        "difficulty": 0,
        "pass": 2,
        "answer": "        if not root:\n            return []\n        stack = [root]\n        res = []\n        while stack:\n            node = stack.pop()\n            res.append(node.val)\n            if node.right:\n                stack.append(node.right)\n            if node.left:\n                stack.append(node.left)\n        return res[::-1]"
    },
    {
        "number": 145,
        "title": "Binary Tree Postorder Traversal",
        "difficulty": 0,
        "pass": 3,
        "answer": "        if not root:\n            return []\n        res = []\n        stack = [root]\n        while stack:\n            node = stack.pop()\n            res.append(node.val)\n            if node.right:\n                stack.append(node.right)\n            if node.left:\n                stack.append(node.left)\n        return res[::-1]"
    },
    {
        "number": 145,
        "title": "Binary Tree Postorder Traversal",
        "difficulty": 0,
        "pass": 4,
        "answer": "        if not root:\n            return []\n        res = []\n        stack = [root]\n        while stack:\n            node = stack.pop()\n            res.append(node.val)\n            if node.right:\n                stack.append(node.right)\n            if node.left:\n                stack.append(node.left)\n        return res[::-1]"
    },
    {
        "number": 145,
        "title": "Binary Tree Postorder Traversal",
        "difficulty": 0,
        "pass": 5,
        "answer": "        if not root:\n            return []\n        res = []\n        stack = [root]\n        while stack:\n            node = stack.pop()\n            res.append(node.val)\n            if node.right:\n                stack.append(node.right)\n            if node.left:\n                stack.append(node.left)\n        return res[::-1]"
    },
    {
        "number": 145,
        "title": "Binary Tree Postorder Traversal",
        "difficulty": 0,
        "pass": 6,
        "answer": "        if not root:\n            return []\n        stack = [root]\n        res = []\n        while stack:\n            node = stack.pop()\n            res.append(node.val)\n            if node.right:\n                stack.append(node.right)\n            if node.left:\n                stack.append(node.left)\n        return res[::-1]"
    },
    {
        "number": 145,
        "title": "Binary Tree Postorder Traversal",
        "difficulty": 0,
        "pass": 7,
        "answer": "        if not root:\n            return []\n        res = []\n        stack = [root]\n        while stack:\n            node = stack.pop()\n            res.append(node.val)\n            if node.right:\n                stack.append(node.right)\n            if node.left:\n                stack.append(node.left)\n        return res[::-1]"
    },
    {
        "number": 145,
        "title": "Binary Tree Postorder Traversal",
        "difficulty": 0,
        "pass": 8,
        "answer": "        if not root:\n            return []\n        stack = [root]\n        res = []\n        while stack:\n            node = stack.pop()\n            res.append(node.val)\n            if node.right:\n                stack.append(node.right)\n            if node.left:\n                stack.append(node.left)\n        return res[::-1]"
    },
    {
        "number": 145,
        "title": "Binary Tree Postorder Traversal",
        "difficulty": 0,
        "pass": 9,
        "answer": "        if not root:\n            return []\n        res = []\n        stack = [root]\n        while stack:\n            node = stack.pop()\n            res.append(node.val)\n            if node.right:\n                stack.append(node.right)\n            if node.left:\n                stack.append(node.left)\n        return res[::-1]"
    },
    {
        "number": 146,
        "title": "LRU Cache",
        "difficulty": 1,
        "pass": 0,
        "answer": "        "
    },
    {
        "number": 146,
        "title": "LRU Cache",
        "difficulty": 1,
        "pass": 1,
        "answer": "        # Your LRUCache object will be instantiated and called as such:\n        # obj = LRUCache(capacity)\n        # param_1 = obj.get(key)\n        # obj.put(key,value)\n        # @lc code=start\n        # from collections import OrderedDict\n        # class LRUCache:\n        #     def __init__(self, capacity: int):\n        #         self.capacity = capacity\n        #         self.cache = OrderedDict()"
    },
    {
        "number": 146,
        "title": "LRU Cache",
        "difficulty": 1,
        "pass": 2,
        "answer": "    def __init__(self, capacity: int):\n    def get(self, key: int) -> int:\n    def put(self, key: int, value: int) -> None:\n        \"\"\"\n        Design a data structure that follows the constraints of a Least Recently Used (LRU) cache.\n        Implement the LRUCache class:\n            LRUCache(int capacity) Initialize the LRU cache with positive size capacity.\n            int get(int key) Return the value of the key if the key exists, otherwise return -1.\n            void put(int key, int value) Update the value of the key if the key exists. Otherwise, add the key-value pair to the cache. If the number of keys exceeds the capacity from this operation, evict the least recently used key.\n        The functions get and put must each run in O(1) average time complexity.\n        Example 1:\n        Input\n        [\"LRUCache\", \"put\", \"put\", \"get\", \"put\", \"get\", \"put\", \"get\", \"get\", \"get\"]\n        [[2], [1, 1], [2,"
    },
    {
        "number": 146,
        "title": "LRU Cache",
        "difficulty": 1,
        "pass": 3,
        "answer": "        # Time: O(n)\n        # Space: O(n)\n        # Dict\n        self.cache = collections.OrderedDict()\n        self.capacity = capacity\n        \n        def get(key):\n            if key not in self.cache:\n                return -1\n            self.cache.move_to_end(key)\n            return self.cache[key]\n        \n        def put(key, value):\n            if key in self.cache:\n                self.cache.move_to_end(key)\n            self.cache[key] = value\n            if len(self.cache) > self.capacity:\n                self.cache.popitem(last=False)\n        \n        return get, put"
    },
    {
        "number": 146,
        "title": "LRU Cache",
        "difficulty": 1,
        "pass": 4,
        "answer": "        # Your LRUCache object will be instantiated and called as such:\n        # obj = LRUCache(capacity)\n        # param_1 = obj.get(key)\n        # obj.put(key,value)\n        self.capacity = capacity\n        self.cache = collections.OrderedDict()"
    },
    {
        "number": 146,
        "title": "LRU Cache",
        "difficulty": 1,
        "pass": 5,
        "answer": "    def __init__(self, capacity: int):\n    def get(self, key: int) -> int:\n    def put(self, key: int, value: int) -> None:\n        \"\"\"\n        Design a data structure that follows the constraints of a Least Recently Used (LRU) cache.\n        Implement the LRUCache class:\n            LRUCache(int capacity) Initialize the LRU cache with positive size capacity.\n            int get(int key) Return the value of the key if the key exists, otherwise return -1.\n            void put(int key, int value) Update the value of the key if the key exists. Otherwise, add the key-value pair to the cache. If the number of keys exceeds the capacity from this operation, evict the least recently used key.\n        The functions get and put must each run in O(1) average time complexity.\n        Example 1:\n        Input\n        [\"LRUCache\", \"put\", \"put\", \"get\", \"put\", \"get\", \"put\", \"get\", \"get\", \"get\"]\n        [[2], [1, 1], [2,"
    },
    {
        "number": 146,
        "title": "LRU Cache",
        "difficulty": 1,
        "pass": 6,
        "answer": "        self.cache = collections.OrderedDict()\n        self.capacity = capacity"
    },
    {
        "number": 146,
        "title": "LRU Cache",
        "difficulty": 1,
        "pass": 7,
        "answer": "        self.cache = collections.OrderedDict()\n        self.capacity = capacity"
    },
    {
        "number": 146,
        "title": "LRU Cache",
        "difficulty": 1,
        "pass": 8,
        "answer": "        # Your LRUCache object will be instantiated and called as such:\n        # obj = LRUCache(capacity)\n        # param_1 = obj.get(key)\n        # obj.put(key,value)\n        # @lc code=start\n        from collections import OrderedDict"
    },
    {
        "number": 146,
        "title": "LRU Cache",
        "difficulty": 1,
        "pass": 9,
        "answer": "    def __init__(self, capacity: int):\n    def get(self, key: int) -> int:\n    def put(self, key: int, value: int) -> None:\n        \"\"\"\n        Design a data structure that follows the constraints of a Least Recently Used (LRU) cache.\n        Implement the LRUCache class:\n            LRUCache(int capacity) Initialize the LRU cache with positive size capacity.\n            int get(int key) Return the value of the key if the key exists, otherwise return -1.\n            void put(int key, int value) Update the value of the key if the key exists. Otherwise, add the key-value pair to the cache. If the number of keys exceeds the capacity from this operation, evict the least recently used key.\n        The functions get and put must each run in O(1) average time complexity.\n        Example 1:\n        Input\n        [\"LRUCache\", \"put\", \"put\", \"get\", \"put\", \"get\", \"put\", \"get\", \"get\", \"get\"]\n        [[2], [1, 1], [2,"
    },
    {
        "number": 147,
        "title": "Insertion Sort List",
        "difficulty": 1,
        "pass": 0,
        "answer": "        if not head:\n            return head\n        dummy = ListNode(0)\n        dummy.next = head\n        curr = dummy\n        while curr.next and curr.next.next:\n            if curr.next.val < curr.next.next.val:\n                curr = curr.next\n            else:\n                prev = curr\n                curr = curr.next.next\n                while curr and curr.val < prev.val:\n                    prev = curr\n                    curr = curr.next\n                prev.next = curr.next\n                curr.next = prev\n        return dummy.next"
    },
    {
        "number": 147,
        "title": "Insertion Sort List",
        "difficulty": 1,
        "pass": 1,
        "answer": "        if not head:\n            return None\n        dummy = ListNode(-1)\n        dummy.next = head\n        cur = dummy\n        while cur.next and cur.next.next:\n            if cur.next.val <= cur.next.next.val:\n                cur = cur.next\n            else:\n                nxt = cur.next.next\n                cur.next = cur.next.next\n                cur.next.next = nxt\n                while cur.next and cur.next.val <= cur.next.next.val:\n                    cur = cur.next\n                cur.next = cur.next.next\n        return dummy.next"
    },
    {
        "number": 147,
        "title": "Insertion Sort List",
        "difficulty": 1,
        "pass": 2,
        "answer": "        if not head:\n            return None\n        \n        dummy = ListNode(0)\n        dummy.next = head\n        curr = dummy\n        while curr.next and curr.next.next:\n            if curr.next.val < curr.next.next.val:\n                tmp = curr.next.next\n                curr.next.next = tmp.next\n                tmp.next = curr.next\n                curr.next = tmp\n            else:\n                curr = curr.next\n        \n        return dummy.next"
    },
    {
        "number": 147,
        "title": "Insertion Sort List",
        "difficulty": 1,
        "pass": 3,
        "answer": "        if not head:\n            return head\n        dummy = ListNode(0)\n        dummy.next = head\n        cur = dummy\n        while cur.next and cur.next.next:\n            if cur.next.val <= cur.next.next.val:\n                cur = cur.next\n            else:\n                temp = cur.next.next\n                cur.next = cur.next.next\n                cur.next.next = temp\n                while cur.next and cur.next.val <= cur.next.next.val:\n                    cur = cur.next\n                cur.next = cur.next.next\n        return dummy.next"
    },
    {
        "number": 147,
        "title": "Insertion Sort List",
        "difficulty": 1,
        "pass": 4,
        "answer": "        if not head:\n            return head\n        \n        dummy = ListNode(0)\n        dummy.next = head\n        \n        while head and head.next:\n            if head.val <= head.next.val:\n                head = head.next\n            else:\n                pre = dummy\n                cur = dummy.next\n                while cur and cur.val <= head.next.val:\n                    pre = cur\n                    cur = cur.next\n                pre.next = head.next\n                head.next = head.next.next\n                cur.next = dummy.next\n                dummy.next = cur\n        \n        return dummy.next"
    },
    {
        "number": 147,
        "title": "Insertion Sort List",
        "difficulty": 1,
        "pass": 5,
        "answer": "        if not head:\n            return None\n        dummy = ListNode(0)\n        dummy.next = head\n        curr = dummy\n        while curr.next and curr.next.next:\n            if curr.next.val > curr.next.next.val:\n                tmp = curr.next.val\n                curr.next.val = curr.next.next.val\n                curr.next.next.val = tmp\n                curr = curr.next.next\n            else:\n                curr = curr.next\n        return dummy.next"
    },
    {
        "number": 147,
        "title": "Insertion Sort List",
        "difficulty": 1,
        "pass": 6,
        "answer": "        if not head:\n            return head\n        dummy = ListNode(0)\n        dummy.next = head\n        cur = dummy\n        while cur.next and cur.next.next:\n            if cur.next.val <= cur.next.next.val:\n                cur = cur.next\n            else:\n                tmp = cur.next\n                while tmp.next and tmp.next.val <= cur.next.val:\n                    tmp = tmp.next\n                cur.next = tmp.next\n                tmp.next = cur.next.next\n                cur.next.next = tmp\n                cur = cur.next.next\n        return dummy.next"
    },
    {
        "number": 147,
        "title": "Insertion Sort List",
        "difficulty": 1,
        "pass": 7,
        "answer": "        if not head:\n            return head\n        dummy = ListNode(0)\n        dummy.next = head\n        curr = dummy\n        while curr.next and curr.next.next:\n            if curr.next.val <= curr.next.next.val:\n                curr = curr.next\n            else:\n                tmp = curr.next.next\n                curr.next = curr.next.next\n                curr.next.next = tmp\n                while curr.next and curr.next.val <= curr.next.next.val:\n                    curr = curr.next\n                curr.next = curr.next.next\n                curr.next.next = tmp\n        return dummy.next"
    },
    {
        "number": 147,
        "title": "Insertion Sort List",
        "difficulty": 1,
        "pass": 8,
        "answer": "        if not head:\n            return head\n        \n        dummy = ListNode(0)\n        dummy.next = head\n        \n        while head and head.next:\n            if head.val < head.next.val:\n                head = head.next\n            else:\n                pre = dummy\n                cur = dummy.next\n                while cur and cur.val < head.next.val:\n                    pre = cur\n                    cur = cur.next\n                pre.next = head.next\n                head.next = head.next.next\n                cur.next = head\n                head = dummy.next\n        \n        return dummy.next"
    },
    {
        "number": 147,
        "title": "Insertion Sort List",
        "difficulty": 1,
        "pass": 9,
        "answer": "        if not head:\n            return None\n        dummy = ListNode(0)\n        dummy.next = head\n        curr = dummy\n        while curr.next and curr.next.next:\n            if curr.next.val > curr.next.next.val:\n                tmp = curr.next.val\n                curr.next.val = curr.next.next.val\n                curr.next.next.val = tmp\n                curr = curr.next.next\n            else:\n                curr = curr.next\n        return dummy.next\n"
    },
    {
        "number": 148,
        "title": "Sort List",
        "difficulty": 1,
        "pass": 0,
        "answer": "        if not head:\n            return None\n        \n        # find the length of the linked list\n        length = 0\n        curr = head\n        while curr:\n            length += 1\n            curr = curr.next\n        \n        # sort the linked list\n        curr = head\n        for i in range(length):\n            curr = curr.next\n        \n        # reverse the linked list\n        prev = None\n        curr = head\n        while curr:\n            next = curr.next\n            curr.next = prev\n            prev = curr\n            curr = next\n        head = prev\n        \n        return head\n        "
    },
    {
        "number": 148,
        "title": "Sort List",
        "difficulty": 1,
        "pass": 1,
        "answer": "        if not head:\n            return None\n        if not head.next:\n            return head\n        slow, fast = head, head.next\n        while fast and fast.next:\n            slow = slow.next\n            fast = fast.next.next\n        mid = slow.next\n        slow.next = None\n        left = self.sortList(head)\n        right = self.sortList(mid)\n        return self.merge(left, right)"
    },
    {
        "number": 148,
        "title": "Sort List",
        "difficulty": 1,
        "pass": 2,
        "answer": "        if not head:\n            return None\n        if not head.next:\n            return head\n        slow, fast = head, head.next\n        while fast and fast.next:\n            slow = slow.next\n            fast = fast.next.next\n        mid = slow.next\n        slow.next = None\n        left = self.sortList(head)\n        right = self.sortList(mid)\n        return self.merge(left, right)"
    },
    {
        "number": 148,
        "title": "Sort List",
        "difficulty": 1,
        "pass": 3,
        "answer": "        if not head:\n            return head\n        dummy = ListNode(0)\n        dummy.next = head\n        return self.sort(dummy)"
    },
    {
        "number": 148,
        "title": "Sort List",
        "difficulty": 1,
        "pass": 4,
        "answer": "        if not head:\n            return head\n        \n        curr = head\n        prev = None\n        while curr:\n            nxt = curr.next\n            curr.next = prev\n            prev = curr\n            curr = nxt\n        \n        curr = head\n        while curr and curr.next:\n            if curr.val > curr.next.val:\n                curr.val, curr.next.val = curr.next.val, curr.val\n                curr = curr.next.next\n            else:\n                curr = curr.next\n        \n        return head"
    },
    {
        "number": 148,
        "title": "Sort List",
        "difficulty": 1,
        "pass": 5,
        "answer": "        if not head:\n            return head\n        \n        # find the middle of the list\n        slow, fast = head, head\n        while fast and fast.next:\n            slow = slow.next\n            fast = fast.next.next\n        \n        # reverse the second half\n        prev, curr = None, slow\n        while curr:\n            nxt = curr.next\n            curr.next = prev\n            prev = curr\n            curr = nxt\n        \n        # merge the two lists\n        head1, head2 = head, prev\n        while head2:\n            nxt1 = head1.next\n            nxt2 = head2.next\n            head1.next = head2\n            head1 = nxt1\n            head2.next = nxt2\n            head2 = nxt2\n        \n        return head1"
    },
    {
        "number": 148,
        "title": "Sort List",
        "difficulty": 1,
        "pass": 6,
        "answer": "        if not head:\n            return None\n        \n        def merge(l1, l2):\n            dummy = cur = ListNode(0)\n            while l1 and l2:\n                if l1.val < l2.val:\n                    cur.next = l1\n                    l1 = l1.next\n                else:\n                    cur.next = l2\n                    l2 = l2.next\n                cur = cur.next\n            cur.next = l1 if l1 else l2\n            return dummy.next\n        \n        def mergeSort(head):\n            if not head or not head.next:\n                return head\n            slow, fast = head, head.next\n            while fast and fast.next:\n                slow = slow.next\n                fast = fast.next.next\n            mid = slow.next\n            slow.next = None\n            l1 = mergeSort(head)\n            l2 = mergeSort(mid)\n            return merge(l1, l2)\n        \n        return mergeSort(head)\n"
    },
    {
        "number": 148,
        "title": "Sort List",
        "difficulty": 1,
        "pass": 7,
        "answer": "        if not head:\n            return None\n        if not head.next:\n            return head\n        \n        def merge_sort(head):\n            if not head or not head.next:\n                return head\n            slow, fast = head, head.next\n            while fast and fast.next:\n                slow = slow.next\n                fast = fast.next.next\n            mid = slow.next\n            slow.next = None\n            left = merge_sort(head)\n            right = merge_sort(mid)\n            return self.merge(left, right)\n        \n        def merge(left, right):\n            dummy = cur = ListNode(0)\n            while left and right:\n                if left.val <= right.val:\n                    cur.next = left\n                    left = left.next\n                else:\n                    cur.next = right\n                    right = right.next\n                cur = cur.next\n            cur.next = left if left else right\n            return dummy.next\n        \n        return merge_sort(head)"
    },
    {
        "number": 148,
        "title": "Sort List",
        "difficulty": 1,
        "pass": 8,
        "answer": "        if not head:\n            return None\n        \n        dummy = ListNode(0)\n        dummy.next = head\n        cur = dummy\n        \n        while cur.next and cur.next.next:\n            if cur.next.val > cur.next.next.val:\n                tmp = cur.next.val\n                cur.next.val = cur.next.next.val\n                cur.next.next.val = tmp\n                cur = cur.next.next\n            else:\n                cur = cur.next\n        \n        return dummy.next\n        "
    },
    {
        "number": 148,
        "title": "Sort List",
        "difficulty": 1,
        "pass": 9,
        "answer": "        if not head:\n            return None\n        \n        self.sort(head)\n        return head"
    },
    {
        "number": 149,
        "title": "Max Points on a Line",
        "difficulty": 2,
        "pass": 0,
        "answer": "        if len(points) == 0:\n            return 0\n        if len(points) == 1:\n            return 1\n        if len(points) == 2:\n            if points[0] == points[1]:\n                return 1\n            else:\n                return 2\n        res = 0\n        for i in range(len(points)):\n            x1 = points[i][0]\n            y1 = points[i][1]\n            count = 0\n            for j in range(len(points)):\n                if i!= j:\n                    x2 = points[j][0]\n                    y2 = points[j][1]\n                    if x1 == x2:\n                        count += 1\n                    elif y1 == y2:\n                        count += 1\n            res = max(res, count)\n        return res + 1"
    },
    {
        "number": 149,
        "title": "Max Points on a Line",
        "difficulty": 2,
        "pass": 1,
        "answer": "        if not points:\n            return 0\n        if len(points) <= 2:\n            return len(points)\n        points.sort(key=lambda x: (x[0], x[1]))\n        dp = [1] * len(points)\n        for i in range(1, len(points)):\n            for j in range(i):\n                if points[i][0] == points[j][0] and points[i][1] == points[j][1]:\n                    dp[i] = max(dp[i], dp[j] + 1)\n        return max(dp)"
    },
    {
        "number": 149,
        "title": "Max Points on a Line",
        "difficulty": 2,
        "pass": 2,
        "answer": "        if len(points) == 0:\n            return 0\n        if len(points) == 1:\n            return 1\n        if len(points) == 2:\n            return 2 if points[0][0] == points[1][0] or points[0][1] == points[1][1] else 1\n        \n        points = sorted(points, key=lambda x: (x[0], x[1]))\n        res = 1\n        for i in range(1, len(points)):\n            if points[i][0] == points[i-1][0] or points[i][1] == points[i-1][1]:\n                res += 1\n            else:\n                res = max(res, 2)\n        return res"
    },
    {
        "number": 149,
        "title": "Max Points on a Line",
        "difficulty": 2,
        "pass": 3,
        "answer": "        if len(points) == 0:\n            return 0\n        if len(points) == 1:\n            return 1\n        points.sort(key=lambda x: (x[0], x[1]))\n        max_points = 1\n        for i in range(1, len(points)):\n            if points[i][0] == points[i - 1][0]:\n                continue\n            if points[i][1] == points[i - 1][1]:\n                max_points += 1\n            else:\n                max_points = max(max_points, 2)\n        return max_points"
    },
    {
        "number": 149,
        "title": "Max Points on a Line",
        "difficulty": 2,
        "pass": 4,
        "answer": "        if len(points) == 0:\n            return 0\n        if len(points) == 1:\n            return 1\n        if len(points) == 2:\n            return 2\n        if len(points) == 3:\n            return 3\n        if len(points) == 4:\n            return 4\n        if len(points) == 5:\n            return 5\n        if len(points) == 6:\n            return 6\n        if len(points) == 7:\n            return 7\n        if len(points) == 8:\n            return 8\n        if len(points) == 9:\n            return 9\n        if len(points) == 10:\n            return 10\n        if len(points) == 11:\n            return 11\n        if len(points) == 12:\n            return 12\n        if len(points) == 13:\n            return 13\n        if len(points) == 14:\n            return 14\n        if len(points) == 15:\n            return 15\n        if len(points) == 16:\n            return 16\n        if len(points) == 17:\n            return"
    },
    {
        "number": 149,
        "title": "Max Points on a Line",
        "difficulty": 2,
        "pass": 5,
        "answer": "        if not points:\n            return 0\n        n = len(points)\n        if n == 1:\n            return 1\n        \n        points.sort(key=lambda x: (x[0], x[1]))\n        \n        max_count = 1\n        for i in range(1, n):\n            if points[i][0] == points[i-1][0]:\n                continue\n            if points[i][1] == points[i-1][1]:\n                max_count = max(max_count, 2)\n            else:\n                slope = (points[i][1] - points[i-1][1]) / (points[i][0] - points[i-1][0])\n                count = 1\n                for j in range(i+1, n):\n                    if slope == (points[j][1] - points[i-1][1]) / (points[j][0] - points[i-1][0]):\n                        count += 1\n                max_count = max(max_count, count)\n        \n        return max_count"
    },
    {
        "number": 149,
        "title": "Max Points on a Line",
        "difficulty": 2,
        "pass": 6,
        "answer": "        if len(points) == 0:\n            return 0\n        if len(points) == 1:\n            return 1\n        if len(points) == 2:\n            if points[0] == points[1]:\n                return 1\n            else:\n                return 2\n        points.sort(key=lambda x: (x[0], x[1]))\n        res = 1\n        for i in range(1, len(points)):\n            if points[i][0] == points[i - 1][0]:\n                continue\n            if points[i][1] == points[i - 1][1]:\n                res += 1\n            else:\n                res = max(res, 2)\n        return res"
    },
    {
        "number": 149,
        "title": "Max Points on a Line",
        "difficulty": 2,
        "pass": 7,
        "answer": "        if not points:\n            return 0"
    },
    {
        "number": 149,
        "title": "Max Points on a Line",
        "difficulty": 2,
        "pass": 8,
        "answer": "        if len(points) == 0:\n            return 0\n        if len(points) == 1:\n            return 1\n        if len(points) == 2:\n            return 2\n        if len(points) == 3:\n            if points[0] == points[1] == points[2]:\n                return 3\n            if points[0] == points[1]:\n                return 2\n            if points[0] == points[2]:\n                return 2\n            if points[1] == points[2]:\n                return 2\n            if points[0]!= points[1] and points[0]!= points[2] and points[1]!= points[2]:\n                return 3\n            if points[0]!= points[1] and points[0]!= points[2] and points[1] == points[2]:\n                return 2\n            if points[0]!= points[1] and points[0] == points[2] and points[1]!= points[2]:\n                return 2\n            if points[0]!= points[1] and points[0] == points[2]"
    },
    {
        "number": 149,
        "title": "Max Points on a Line",
        "difficulty": 2,
        "pass": 9,
        "answer": "        if not points:\n            return 0\n        n = len(points)\n        if n == 1:\n            return 1\n        points.sort(key=lambda x: (x[0], x[1]))\n        dp = [1] * n\n        for i in range(1, n):\n            for j in range(i):\n                if (points[i][0] - points[j][0]) * (points[i][1] - points[j][1]) == 0:\n                    dp[i] = max(dp[i], dp[j] + 1)\n        return max(dp)"
    },
    {
        "number": 150,
        "title": "Evaluate Reverse Polish Notation",
        "difficulty": 1,
        "pass": 0,
        "answer": "        stack = []\n        for token in tokens:\n            if token == '+':\n                stack.append(stack.pop() + stack.pop())\n            elif token == '-':\n                stack.append(-stack.pop() + stack.pop())\n            elif token == '*':\n                stack.append(stack.pop() * stack.pop())\n            elif token == '/':\n                stack.append(int(stack.pop() / stack.pop()))\n            else:\n                stack.append(int(token))\n        return stack.pop()"
    },
    {
        "number": 150,
        "title": "Evaluate Reverse Polish Notation",
        "difficulty": 1,
        "pass": 1,
        "answer": "        stack = []\n        for token in tokens:\n            if token == '+':\n                stack.append(stack.pop() + stack.pop())\n            elif token == '-':\n                stack.append(-stack.pop() + stack.pop())\n            elif token == '*':\n                stack.append(stack.pop() * stack.pop())\n            elif token == '/':\n                a = stack.pop()\n                b = stack.pop()\n                stack.append(int(b / a))\n            else:\n                stack.append(int(token))\n        return stack.pop()"
    },
    {
        "number": 150,
        "title": "Evaluate Reverse Polish Notation",
        "difficulty": 1,
        "pass": 2,
        "answer": "        stack = []\n        for token in tokens:\n            if token == '+':\n                stack.append(stack.pop() + stack.pop())\n            elif token == '-':\n                stack.append(stack.pop() - stack.pop())\n            elif token == '*':\n                stack.append(stack.pop() * stack.pop())\n            elif token == '/':\n                a = stack.pop()\n                b = stack.pop()\n                stack.append(int(b / a))\n            else:\n                stack.append(int(token))\n        return stack.pop()"
    },
    {
        "number": 150,
        "title": "Evaluate Reverse Polish Notation",
        "difficulty": 1,
        "pass": 3,
        "answer": "        stack = []\n        for token in tokens:\n            if token == '+':\n                stack.append(stack.pop() + stack.pop())\n            elif token == '-':\n                stack.append(-stack.pop() + stack.pop())\n            elif token == '*':\n                stack.append(stack.pop() * stack.pop())\n            elif token == '/':\n                a = stack.pop()\n                b = stack.pop()\n                stack.append(int(b / a))\n            else:\n                stack.append(int(token))\n        return stack.pop()"
    },
    {
        "number": 150,
        "title": "Evaluate Reverse Polish Notation",
        "difficulty": 1,
        "pass": 4,
        "answer": "        stack = []\n        for token in tokens:\n            if token in ['+', '-', '*', '/']:\n                right = stack.pop()\n                left = stack.pop()\n                if token == '+':\n                    stack.append(left + right)\n                elif token == '-':\n                    stack.append(left - right)\n                elif token == '*':\n                    stack.append(left * right)\n                else:\n                    stack.append(int(left / right))\n            else:\n                stack.append(int(token))\n        return stack.pop()"
    },
    {
        "number": 150,
        "title": "Evaluate Reverse Polish Notation",
        "difficulty": 1,
        "pass": 5,
        "answer": "        # stack = []\n        # for token in tokens:\n        #     if token == '+' or token == '-' or token == '*' or token == '/':\n        #         b = stack.pop()\n        #         a = stack.pop()\n        #         if token == '+':\n        #             stack.append(a + b)\n        #         elif token == '-':\n        #             stack.append(a - b)\n        #         elif token == '*':\n        #             stack.append(a * b)\n        #         elif token == '/':\n        #             stack.append(int(a / b))\n        #     else:\n        #         stack.append(int(token))\n        # return stack[0]"
    },
    {
        "number": 150,
        "title": "Evaluate Reverse Polish Notation",
        "difficulty": 1,
        "pass": 6,
        "answer": "        stack = []\n        for token in tokens:\n            if token in ['+', '-', '*', '/']:\n                num2 = stack.pop()\n                num1 = stack.pop()\n                if token == '+':\n                    stack.append(num1 + num2)\n                elif token == '-':\n                    stack.append(num1 - num2)\n                elif token == '*':\n                    stack.append(num1 * num2)\n                else:\n                    stack.append(int(num1 / num2))\n            else:\n                stack.append(int(token))\n        return stack.pop()"
    },
    {
        "number": 150,
        "title": "Evaluate Reverse Polish Notation",
        "difficulty": 1,
        "pass": 7,
        "answer": "        stack = []\n        for token in tokens:\n            if token == '+':\n                stack.append(int(stack.pop()) + int(stack.pop()))\n            elif token == '-':\n                stack.append(int(stack.pop()) - int(stack.pop()))\n            elif token == '*':\n                stack.append(int(stack.pop()) * int(stack.pop()))\n            elif token == '/':\n                stack.append(int(stack.pop()) // int(stack.pop()))\n            else:\n                stack.append(int(token))\n        return stack.pop()"
    },
    {
        "number": 150,
        "title": "Evaluate Reverse Polish Notation",
        "difficulty": 1,
        "pass": 8,
        "answer": "        stack = []\n        for token in tokens:\n            if token in ['+', '-', '*', '/']:\n                num2 = stack.pop()\n                num1 = stack.pop()\n                if token == '+':\n                    stack.append(num1 + num2)\n                elif token == '-':\n                    stack.append(num1 - num2)\n                elif token == '*':\n                    stack.append(num1 * num2)\n                elif token == '/':\n                    stack.append(int(num1 / num2))\n            else:\n                stack.append(int(token))\n        return stack.pop()"
    },
    {
        "number": 150,
        "title": "Evaluate Reverse Polish Notation",
        "difficulty": 1,
        "pass": 9,
        "answer": "        stack = []\n        for token in tokens:\n            if token == '+':\n                stack.append(stack.pop() + stack.pop())\n            elif token == '-':\n                stack.append(-stack.pop() + stack.pop())\n            elif token == '*':\n                stack.append(stack.pop() * stack.pop())\n            elif token == '/':\n                stack.append(int(stack.pop() / stack.pop()))\n            else:\n                stack.append(int(token))\n        return stack[0]"
    },
    {
        "number": 151,
        "title": "Reverse Words in a String",
        "difficulty": 1,
        "pass": 0,
        "answer": "        words = s.split()\n        words = words[::-1]\n        return \" \".join(words)"
    },
    {
        "number": 151,
        "title": "Reverse Words in a String",
        "difficulty": 1,
        "pass": 1,
        "answer": "        words = s.split()\n        return \" \".join(words[::-1])"
    },
    {
        "number": 151,
        "title": "Reverse Words in a String",
        "difficulty": 1,
        "pass": 2,
        "answer": "        if not s:\n            return \"\"\n        if len(s) == 1:\n            return s\n        s = s.strip()\n        words = s.split(\" \")\n        for i in range(len(words) - 1, -1, -1):\n            words[i] = words[i][::-1]\n        return \" \".join(words)"
    },
    {
        "number": 151,
        "title": "Reverse Words in a String",
        "difficulty": 1,
        "pass": 3,
        "answer": "        if not s:\n            return s\n        s = s.strip()\n        words = s.split()\n        words = words[::-1]\n        return \" \".join(words)"
    },
    {
        "number": 151,
        "title": "Reverse Words in a String",
        "difficulty": 1,
        "pass": 4,
        "answer": "        if not s:\n            return s\n        s = s.strip().split()\n        return \" \".join(s[::-1])"
    },
    {
        "number": 151,
        "title": "Reverse Words in a String",
        "difficulty": 1,
        "pass": 5,
        "answer": "        if not s:\n            return \"\"\n        words = s.split(\" \")\n        words = words[::-1]\n        return \" \".join(words)"
    },
    {
        "number": 151,
        "title": "Reverse Words in a String",
        "difficulty": 1,
        "pass": 6,
        "answer": "        # return''.join(reversed(s.split()))\n        return''.join(s.split()[::-1])"
    },
    {
        "number": 151,
        "title": "Reverse Words in a String",
        "difficulty": 1,
        "pass": 7,
        "answer": "        if not s:\n            return \"\"\n        s = s.strip()\n        words = s.split(\" \")\n        words.reverse()\n        return \" \".join(words)"
    },
    {
        "number": 151,
        "title": "Reverse Words in a String",
        "difficulty": 1,
        "pass": 8,
        "answer": "        if not s:\n            return \"\""
    },
    {
        "number": 151,
        "title": "Reverse Words in a String",
        "difficulty": 1,
        "pass": 9,
        "answer": "        if not s:\n            return \"\"\n        s = s.strip()\n        words = s.split(\" \")\n        words.reverse()\n        return \" \".join(words)"
    },
    {
        "number": 152,
        "title": "Maximum Product Subarray",
        "difficulty": 1,
        "pass": 0,
        "answer": "        n = len(nums)\n        if n == 0:\n            return 0\n        if n == 1:\n            return nums[0]\n        if n == 2:\n            return max(nums[0], nums[1])\n        max_product = nums[0]\n        min_product = nums[0]\n        for i in range(1, n):\n            if nums[i] > 0:\n                max_product = max(max_product * nums[i], nums[i])\n                min_product = min(min_product * nums[i], nums[i])\n            else:\n                max_product = max(max_product * nums[i], nums[i])\n                min_product = min(min_product * nums[i], nums[i])\n        return max_product"
    },
    {
        "number": 152,
        "title": "Maximum Product Subarray",
        "difficulty": 1,
        "pass": 1,
        "answer": "        if len(nums) == 0:\n            return 0\n        if len(nums) == 1:\n            return nums[0]\n        \n        max_product = nums[0]\n        min_product = nums[0]\n        \n        for i in range(1, len(nums)):\n            if nums[i] > 0:\n                max_product = max(max_product * nums[i], nums[i])\n                min_product = min(min_product * nums[i], nums[i])\n            else:\n                max_product = max(max_product * nums[i], nums[i])\n                min_product = min(min_product * nums[i], nums[i])\n                \n        return max_product"
    },
    {
        "number": 152,
        "title": "Maximum Product Subarray",
        "difficulty": 1,
        "pass": 2,
        "answer": "        \n        n = len(nums)\n        \n        if n == 0:\n            return 0\n        \n        if n == 1:\n            return nums[0]\n        \n        if n == 2:\n            return max(nums[0],nums[1])\n        \n        if n == 3:\n            return max(nums[0]*nums[1],nums[0]*nums[2],nums[1]*nums[2],nums[0]*nums[1]*nums[2])\n        \n        dp = [0]*n\n        \n        dp[0] = nums[0]\n        dp[1] = max(nums[0],nums[1])\n        \n        for i in range(2,n):\n            dp[i] = max(nums[i],dp[i-1]*nums[i],dp[i-2]*nums[i])\n        \n        return dp[n-1]"
    },
    {
        "number": 152,
        "title": "Maximum Product Subarray",
        "difficulty": 1,
        "pass": 3,
        "answer": "        \n        \n        if len(nums) == 1:\n            return nums[0]\n        \n        max_product = nums[0]\n        min_product = nums[0]\n        \n        for i in range(1, len(nums)):\n            if nums[i] > 0:\n                max_product = max(nums[i], max_product * nums[i])\n                min_product = min(nums[i], min_product * nums[i])\n            elif nums[i] < 0:\n                max_product = max(nums[i], max_product / nums[i])\n                min_product = min(nums[i], min_product / nums[i])\n            else:\n                max_product = max(nums[i], max_product * nums[i])\n                min_product = min(nums[i], min_product * nums[i])\n        \n        return max_product\n        \nclass Solution:\n    def maxProduct(self, nums: List[int"
    },
    {
        "number": 152,
        "title": "Maximum Product Subarray",
        "difficulty": 1,
        "pass": 4,
        "answer": "        # if len(nums) == 0:\n        #     return 0\n        # if len(nums) == 1:\n        #     return nums[0]\n        # if len(nums) == 2:\n        #     return max(nums[0], nums[1])\n        # if len(nums) == 3:\n        #     return max(nums[0] * nums[1], nums[0] * nums[2], nums[1] * nums[2])\n        # for i in range(1, len(nums)):\n        #     nums[i] = max(nums[i], nums[i] * nums[i - 1], nums[i - 1] * nums[i])\n        # return max(nums)\n        \n        if len(nums) == 0:\n            return 0\n        if len(nums) == 1:\n            return nums[0]\n        if len(nums) == 2:\n            return max(nums[0], nums[1])"
    },
    {
        "number": 152,
        "title": "Maximum Product Subarray",
        "difficulty": 1,
        "pass": 5,
        "answer": "        if len(nums) == 0:\n            return 0\n        if len(nums) == 1:\n            return nums[0]\n        \n        max_prod = nums[0]\n        min_prod = nums[0]\n        \n        for i in range(1, len(nums)):\n            if nums[i] < 0:\n                max_prod, min_prod = min_prod, max_prod\n            max_prod = max(max_prod * nums[i], nums[i])\n            min_prod = min(min_prod * nums[i], nums[i])\n            \n        return max_prod"
    },
    {
        "number": 152,
        "title": "Maximum Product Subarray",
        "difficulty": 1,
        "pass": 6,
        "answer": "        n = len(nums)\n        if n == 0: return 0\n        if n == 1: return nums[0]\n        if n == 2: return max(nums[0], nums[1])\n        \n        max_product = nums[0]\n        min_product = nums[0]\n        \n        for i in range(1, n):\n            if nums[i] > 0:\n                max_product = max(nums[i], max_product * nums[i])\n                min_product = min(nums[i], min_product * nums[i])\n            else:\n                max_product = max(nums[i], max_product * nums[i])\n                min_product = min(nums[i], min_product * nums[i])\n        \n        return max_product\n        \n        \nclass Solution:\n    def maxProduct(self, nums: List[int]) -> int:\n        \"\"\"\n        Given an integer array nums, find a subarray that has the largest product, and return the product"
    },
    {
        "number": 152,
        "title": "Maximum Product Subarray",
        "difficulty": 1,
        "pass": 7,
        "answer": "        if not nums:\n            return 0\n        n = len(nums)\n        max_product = nums[0]\n        min_product = nums[0]\n        for i in range(1, n):\n            if nums[i] > 0:\n                max_product = max(max_product * nums[i], nums[i])\n                min_product = min(min_product * nums[i], nums[i])\n            else:\n                max_product = max(max_product * nums[i], nums[i])\n                min_product = min(min_product * nums[i], nums[i])\n        return max_product"
    },
    {
        "number": 152,
        "title": "Maximum Product Subarray",
        "difficulty": 1,
        "pass": 8,
        "answer": "        if len(nums) == 0:\n            return 0\n        if len(nums) == 1:\n            return nums[0]\n        if len(nums) == 2:\n            return max(nums[0], nums[1])\n        dp = [0] * len(nums)\n        dp[0] = nums[0]\n        dp[1] = max(nums[0], nums[1])\n        for i in range(2, len(nums)):\n            dp[i] = max(nums[i], nums[i] * dp[i - 1], nums[i] * dp[i - 2])\n        return dp[-1]"
    },
    {
        "number": 152,
        "title": "Maximum Product Subarray",
        "difficulty": 1,
        "pass": 9,
        "answer": "        \n        n = len(nums)\n        if n == 0:\n            return 0\n        if n == 1:\n            return nums[0]\n        \n        max_product = nums[0]\n        min_product = nums[0]\n        \n        for i in range(1, n):\n            if nums[i] > 0:\n                max_product = max(max_product * nums[i], nums[i])\n                min_product = min(min_product * nums[i], nums[i])\n            else:\n                max_product = max(max_product * nums[i], nums[i])\n                min_product = min(min_product * nums[i], nums[i])\n        \n        return max_product"
    },
    {
        "number": 153,
        "title": "Find Minimum in Rotated Sorted Array",
        "difficulty": 1,
        "pass": 0,
        "answer": "        lo, hi = 0, len(nums) - 1\n        while lo < hi:\n            mid = lo + (hi - lo) // 2\n            if nums[mid] > nums[hi]:\n                lo = mid + 1\n            elif nums[mid] < nums[hi]:\n                hi = mid\n            else:\n                hi -= 1\n        return nums[lo]"
    },
    {
        "number": 153,
        "title": "Find Minimum in Rotated Sorted Array",
        "difficulty": 1,
        "pass": 1,
        "answer": "        if not nums:\n            return -1\n        if len(nums) == 1:\n            return nums[0]\n        if len(nums) == 2:\n            if nums[0] < nums[1]:\n                return nums[0]\n            else:\n                return nums[1]\n        if len(nums) == 3:\n            if nums[0] < nums[1]:\n                if nums[1] < nums[2]:\n                    return nums[1]\n                else:\n                    return nums[2]\n            else:\n                if nums[1] < nums[2]:\n                    return nums[1]\n                else:\n                    return nums[2]\n        if len(nums) == 4:\n            if nums[0] < nums[1]:\n                if nums[1] < nums[2]:\n                    if nums[2] < nums[3]:\n                        return nums[2]\n                    else:\n                        return nums[3]\n                else:\n"
    },
    {
        "number": 153,
        "title": "Find Minimum in Rotated Sorted Array",
        "difficulty": 1,
        "pass": 2,
        "answer": "        if len(nums) == 1:\n            return nums[0]\n        l, r = 0, len(nums) - 1\n        while l < r:\n            mid = (l + r) // 2\n            if nums[mid] > nums[r]:\n                l = mid + 1\n            elif nums[mid] < nums[r]:\n                r = mid\n            else:\n                r -= 1\n        return nums[l]"
    },
    {
        "number": 153,
        "title": "Find Minimum in Rotated Sorted Array",
        "difficulty": 1,
        "pass": 3,
        "answer": "        \n        if len(nums) == 1:\n            return nums[0]\n        \n        left = 0\n        right = len(nums) - 1\n        \n        while left < right:\n            mid = left + (right - left) // 2\n            if nums[mid] > nums[right]:\n                left = mid + 1\n            elif nums[mid] < nums[right]:\n                right = mid\n            else:\n                right -= 1\n        \n        return nums[left]"
    },
    {
        "number": 153,
        "title": "Find Minimum in Rotated Sorted Array",
        "difficulty": 1,
        "pass": 4,
        "answer": "        l, r = 0, len(nums) - 1\n        while l <= r:\n            mid = (l + r) // 2\n            if nums[mid] > nums[r]:\n                l = mid + 1\n            elif nums[mid] < nums[r]:\n                r = mid - 1\n            else:\n                r -= 1\n        return nums[l]"
    },
    {
        "number": 153,
        "title": "Find Minimum in Rotated Sorted Array",
        "difficulty": 1,
        "pass": 5,
        "answer": "        if not nums:\n            return None\n        if len(nums) == 1:\n            return nums[0]\n        left = 0\n        right = len(nums) - 1\n        while left < right:\n            mid = left + (right - left) // 2\n            if nums[mid] > nums[right]:\n                left = mid + 1\n            elif nums[mid] < nums[right]:\n                right = mid\n            else:\n                right -= 1\n        return nums[left]"
    },
    {
        "number": 153,
        "title": "Find Minimum in Rotated Sorted Array",
        "difficulty": 1,
        "pass": 6,
        "answer": "        if len(nums) == 1:\n            return nums[0]\n        left, right = 0, len(nums) - 1\n        while left <= right:\n            mid = left + (right - left) // 2\n            if nums[mid] > nums[right]:\n                left = mid + 1\n            elif nums[mid] < nums[right]:\n                right = mid - 1\n            else:\n                right -= 1\n        return nums[left]"
    },
    {
        "number": 153,
        "title": "Find Minimum in Rotated Sorted Array",
        "difficulty": 1,
        "pass": 7,
        "answer": "        l, r = 0, len(nums) - 1\n        while l <= r:\n            mid = (l + r) // 2\n            if nums[mid] > nums[r]:\n                l = mid + 1\n            elif nums[mid] < nums[r]:\n                r = mid - 1\n            else:\n                r -= 1\n        return nums[l]"
    },
    {
        "number": 153,
        "title": "Find Minimum in Rotated Sorted Array",
        "difficulty": 1,
        "pass": 8,
        "answer": "        l, r = 0, len(nums) - 1\n        while l <= r:\n            mid = (l + r) // 2\n            if nums[mid] > nums[r]:\n                l = mid + 1\n            elif nums[mid] < nums[r]:\n                r = mid - 1\n            else:\n                r -= 1\n        return nums[l]"
    },
    {
        "number": 153,
        "title": "Find Minimum in Rotated Sorted Array",
        "difficulty": 1,
        "pass": 9,
        "answer": "        if len(nums) == 1:\n            return nums[0]\n        left = 0\n        right = len(nums) - 1\n        while left < right:\n            mid = (left + right) // 2\n            if nums[mid] > nums[right]:\n                left = mid + 1\n            elif nums[mid] < nums[right]:\n                right = mid\n            else:\n                right -= 1\n        return nums[left]"
    },
    {
        "number": 154,
        "title": "Find Minimum in Rotated Sorted Array II",
        "difficulty": 2,
        "pass": 0,
        "answer": "        lo, hi = 0, len(nums) - 1\n        while lo < hi:\n            mid = lo + (hi - lo) // 2\n            if nums[mid] > nums[hi]:\n                lo = mid + 1\n            elif nums[mid] < nums[hi]:\n                hi = mid\n            else:\n                hi -= 1\n        return nums[lo]"
    },
    {
        "number": 154,
        "title": "Find Minimum in Rotated Sorted Array II",
        "difficulty": 2,
        "pass": 1,
        "answer": "        lo, hi = 0, len(nums) - 1\n        while lo < hi:\n            mid = lo + (hi - lo) // 2\n            if nums[mid] > nums[hi]:\n                lo = mid + 1\n            elif nums[mid] < nums[hi]:\n                hi = mid\n            else:\n                hi -= 1\n        return nums[lo]"
    },
    {
        "number": 154,
        "title": "Find Minimum in Rotated Sorted Array II",
        "difficulty": 2,
        "pass": 2,
        "answer": "        if len(nums) == 1:\n            return nums[0]\n        left = 0\n        right = len(nums) - 1\n        while left < right:\n            mid = left + (right - left) // 2\n            if nums[mid] > nums[right]:\n                left = mid + 1\n            elif nums[mid] < nums[right]:\n                right = mid\n            else:\n                right -= 1\n        return nums[left]"
    },
    {
        "number": 154,
        "title": "Find Minimum in Rotated Sorted Array II",
        "difficulty": 2,
        "pass": 3,
        "answer": "        if len(nums) == 1:\n            return nums[0]\n        if len(nums) == 2:\n            if nums[0] < nums[1]:\n                return nums[0]\n            else:\n                return nums[1]\n        if len(nums) == 3:\n            if nums[0] < nums[1]:\n                if nums[1] < nums[2]:\n                    return nums[1]\n                else:\n                    return nums[2]\n            else:\n                if nums[1] < nums[2]:\n                    return nums[1]\n                else:\n                    return nums[2]\n        if len(nums) == 4:\n            if nums[0] < nums[1]:\n                if nums[1] < nums[2]:\n                    if nums[2] < nums[3]:\n                        return nums[2]\n                    else:\n                        return nums[3]\n                else:\n                    if nums[2] < nums[3"
    },
    {
        "number": 154,
        "title": "Find Minimum in Rotated Sorted Array II",
        "difficulty": 2,
        "pass": 4,
        "answer": "        l, r = 0, len(nums) - 1\n        while l <= r:\n            mid = (l + r) // 2\n            if nums[mid] > nums[r]:\n                l = mid + 1\n            elif nums[mid] < nums[r]:\n                r = mid - 1\n            else:\n                r -= 1\n        return nums[l]"
    },
    {
        "number": 154,
        "title": "Find Minimum in Rotated Sorted Array II",
        "difficulty": 2,
        "pass": 5,
        "answer": "        l, r = 0, len(nums) - 1\n        while l <= r:\n            mid = l + (r - l) // 2\n            if nums[mid] > nums[r]:\n                l = mid + 1\n            elif nums[mid] < nums[r]:\n                r = mid - 1\n            else:\n                r -= 1\n        return nums[l]"
    },
    {
        "number": 154,
        "title": "Find Minimum in Rotated Sorted Array II",
        "difficulty": 2,
        "pass": 6,
        "answer": "        if len(nums) == 1:\n            return nums[0]\n        l, r = 0, len(nums) - 1\n        while l <= r:\n            mid = (l + r) // 2\n            if nums[mid] > nums[r]:\n                l = mid + 1\n            elif nums[mid] < nums[r]:\n                r = mid - 1\n            else:\n                r -= 1\n        return nums[l]"
    },
    {
        "number": 154,
        "title": "Find Minimum in Rotated Sorted Array II",
        "difficulty": 2,
        "pass": 7,
        "answer": "        l = 0\n        r = len(nums) - 1\n        while l < r:\n            mid = (l + r) // 2\n            if nums[mid] > nums[r]:\n                l = mid + 1\n            elif nums[mid] < nums[r]:\n                r = mid\n            else:\n                r -= 1\n        return nums[l]"
    },
    {
        "number": 154,
        "title": "Find Minimum in Rotated Sorted Array II",
        "difficulty": 2,
        "pass": 8,
        "answer": "        l, r = 0, len(nums) - 1\n        while l <= r:\n            mid = l + (r - l) // 2\n            if nums[mid] > nums[r]:\n                l = mid + 1\n            elif nums[mid] < nums[r]:\n                r = mid - 1\n            else:\n                r -= 1\n        return nums[l]"
    },
    {
        "number": 154,
        "title": "Find Minimum in Rotated Sorted Array II",
        "difficulty": 2,
        "pass": 9,
        "answer": "        lo, hi = 0, len(nums) - 1\n        while lo < hi:\n            mid = lo + (hi - lo) // 2\n            if nums[mid] > nums[hi]:\n                lo = mid + 1\n            elif nums[mid] < nums[hi]:\n                hi = mid\n            else:\n                hi -= 1\n        return nums[lo]"
    },
    {
        "number": 155,
        "title": "Min Stack",
        "difficulty": 1,
        "pass": 0,
        "answer": "        # Your MinStack object will be instantiated and called as such:\n        # obj = MinStack()\n        # obj.push(val)\n        # obj.pop()\n        # param_3 = obj.top()\n        # param_4 = obj.getMin()\n        self.stack = []\n        self.min_stack = []"
    },
    {
        "number": 155,
        "title": "Min Stack",
        "difficulty": 1,
        "pass": 1,
        "answer": "        self.stack = []\n        self.min_stack = []"
    },
    {
        "number": 155,
        "title": "Min Stack",
        "difficulty": 1,
        "pass": 2,
        "answer": "    def __init__(self):\n    def push(self, val: int) -> None:\n    def pop(self) -> None:\n    def top(self) -> int:\n    def getMin(self) -> int:\n        \"\"\"\n        Design a stack that supports push, pop, top, and retrieving the minimum element in constant time.\n        Implement the MinStack class:\n            MinStack() initializes the stack object.\n            void push(int val) pushes the element val onto the stack.\n            void pop() removes the element on the top of the stack.\n            int top() gets the top element of the stack.\n            int getMin() retrieves the minimum element in the stack.\n        You must implement a solution with O(1) time complexity for each function.\n        Example 1:\n        Input\n        [\"MinStack\",\"push\",\"push\",\"push\",\"getMin\",\"pop\",\"top\",\"getMin\"]\n        [[],[-2],[0],[-3],[],[],[],[]]\n        Output\n        [null,null,null,null,-3,null,0,-2]\n        Explanation\n        "
    },
    {
        "number": 155,
        "title": "Min Stack",
        "difficulty": 1,
        "pass": 3,
        "answer": "        # Your MinStack object will be instantiated and called as such:\n        # obj = MinStack()\n        # obj.push(val)\n        # obj.pop()\n        # param_3 = obj.top()\n        # param_4 = obj.getMin()"
    },
    {
        "number": 155,
        "title": "Min Stack",
        "difficulty": 1,
        "pass": 4,
        "answer": "        self.stack = []\n        self.min_stack = []"
    },
    {
        "number": 155,
        "title": "Min Stack",
        "difficulty": 1,
        "pass": 5,
        "answer": "        # Your MinStack object will be instantiated and called as such:\n        # obj = MinStack()\n        # obj.push(val)\n        # obj.pop()\n        # param_3 = obj.top()\n        # param_4 = obj.getMin()"
    },
    {
        "number": 155,
        "title": "Min Stack",
        "difficulty": 1,
        "pass": 6,
        "answer": "        self.stack = []\n        self.min_stack = []"
    },
    {
        "number": 155,
        "title": "Min Stack",
        "difficulty": 1,
        "pass": 7,
        "answer": "    def __init__(self):\n    def push(self, val: int) -> None:\n    def pop(self) -> None:\n    def top(self) -> int:\n    def getMin(self) -> int:\n        \"\"\"\n        Design a stack that supports push, pop, top, and retrieving the minimum element in constant time.\n        Implement the MinStack class:\n            MinStack() initializes the stack object.\n            void push(int val) pushes the element val onto the stack.\n            void pop() removes the element on the top of the stack.\n            int top() gets the top element of the stack.\n            int getMin() retrieves the minimum element in the stack.\n        You must implement a solution with O(1) time complexity for each function.\n        Example 1:\n        Input\n        [\"MinStack\",\"push\",\"push\",\"push\",\"getMin\",\"pop\",\"top\",\"getMin\"]\n        [[],[-2],[0],[-3],[],[],[],[]]\n        Output\n        [null,null,null,null,-3,null,0,-2]\n        Explanation\n        "
    },
    {
        "number": 155,
        "title": "Min Stack",
        "difficulty": 1,
        "pass": 8,
        "answer": "        # Your MinStack object will be instantiated and called as such:\n        # obj = MinStack()\n        # obj.push(val)\n        # obj.pop()\n        # param_3 = obj.top()\n        # param_4 = obj.getMin()"
    },
    {
        "number": 155,
        "title": "Min Stack",
        "difficulty": 1,
        "pass": 9,
        "answer": "        # Your MinStack object will be instantiated and called as such:\n        # obj = MinStack()\n        # obj.push(val)\n        # obj.pop()\n        # param_3 = obj.top()\n        # param_4 = obj.getMin()"
    },
    {
        "number": 160,
        "title": "Intersection of Two Linked Lists",
        "difficulty": 0,
        "pass": 0,
        "answer": "        if headA is None or headB is None:\n            return None\n        \n        if headA == headB:\n            return headA\n        \n        currA = headA\n        currB = headB\n        \n        while currA!= currB:\n            currA = currA.next if currA else headB\n            currB = currB.next if currB else headA\n            \n        return currA\n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n"
    },
    {
        "number": 160,
        "title": "Intersection of Two Linked Lists",
        "difficulty": 0,
        "pass": 1,
        "answer": "        \n        if not headA or not headB:\n            return None\n        \n        a = headA\n        b = headB\n        \n        while a!= b:\n            a = headB if not a else a.next\n            b = headA if not b else b.next\n        \n        return a\n        \n        \nclass Solution:\n    def getIntersectionNode(self, headA: ListNode, headB: ListNode) -> Optional[ListNode]:\n        \"\"\"\n        Given the heads of two singly linked-lists headA and headB, return the node at which the two lists intersect. If the two linked lists do not intersect, return null.\n        For example, the following two linked lists begin to intersect at node c1:\n        The test cases are generated such that there are no cycles anywhere in the entire linked structure.\n        Note that the linked lists must retain their original structure after the function returns.\n        Custom Judge:\n        The inputs to the judge are given as follows (your program is not given these inputs):\n            intersectVal - The value of the node where the intersection occurs. This is 0 if"
    },
    {
        "number": 160,
        "title": "Intersection of Two Linked Lists",
        "difficulty": 0,
        "pass": 2,
        "answer": "        if not headA or not headB:\n            return None\n        if not headA.next or not headB.next:\n            return None\n        \n        a, b = headA, headB\n        while a!= b:\n            a = a.next if not a.next else a.next.next\n            b = b.next if not b.next else b.next.next\n            \n        return a\n        \nclass Solution:\n    def getIntersectionNode(self, headA: ListNode, headB: ListNode) -> ListNode:\n        \"\"\"\n        Given the heads of two singly linked-lists headA and headB, return the node at which the two lists intersect. If the two linked lists do not intersect, return null.\n        For example, the following two linked lists begin to intersect at node c1:\n        The test cases are generated such that there are no cycles anywhere in the entire linked structure.\n        Note that the linked lists must retain their original structure after the function returns.\n        Custom Judge:\n        The inputs to the judge are given as follows (your program is not given these inputs):"
    },
    {
        "number": 160,
        "title": "Intersection of Two Linked Lists",
        "difficulty": 0,
        "pass": 3,
        "answer": "        if headA == None or headB == None:\n            return None\n        \n        currA = headA\n        currB = headB\n        \n        while currA!= currB:\n            currA = currA.next if currA else headB\n            currB = currB.next if currB else headA\n        \n        return currA"
    },
    {
        "number": 160,
        "title": "Intersection of Two Linked Lists",
        "difficulty": 0,
        "pass": 4,
        "answer": "        if headA is None or headB is None:\n            return None\n        if headA is None or headB is None:\n            return None\n        if headA is None or headB is None:\n            return None\n        if headA is None or headB is None:\n            return None\n        if headA is None or headB is None:\n            return None\n        if headA is None or headB is None:\n            return None\n        if headA is None or headB is None:\n            return None\n        if headA is None or headB is None:\n            return None\n        if headA is None or headB is None:\n            return None\n        if headA is None or headB is None:\n            return None\n        if headA is None or headB is None:\n            return None\n        if headA is None or headB is None:\n            return None\n        if headA is None or headB is None:\n            return None\n        if headA is None or headB is None:\n            return None\n        if headA is None or headB is None:"
    },
    {
        "number": 160,
        "title": "Intersection of Two Linked Lists",
        "difficulty": 0,
        "pass": 5,
        "answer": "        if headA is None or headB is None:\n            return None\n        \n        currA = headA\n        currB = headB\n        \n        while currA!= currB:\n            if currA is None:\n                currA = headB\n            else:\n                currA = currA.next\n            if currB is None:\n                currB = headA\n            else:\n                currB = currB.next\n        \n        return currA\n        \n        \nclass Solution:\n    def getIntersectionNode(self, headA: ListNode, headB: ListNode) -> Optional[ListNode]:\n        \"\"\"\n        Given the heads of two singly linked-lists headA and headB, return the node at which the two lists intersect. If the two linked lists do not intersect, return null.\n        For example, the following two linked lists begin to intersect at node c1:\n        The test cases are generated such that there are no cycles anywhere in the entire linked structure.\n        Note that the linked lists must retain their original structure after the"
    },
    {
        "number": 160,
        "title": "Intersection of Two Linked Lists",
        "difficulty": 0,
        "pass": 6,
        "answer": "        \n        if headA is None or headB is None:\n            return None\n        \n        currA = headA\n        currB = headB\n        \n        while currA!= currB:\n            currA = headB if currA is None else currA.next\n            currB = headA if currB is None else currB.next\n        \n        return currA\n        \nclass Solution:\n    def getIntersectionNode(self, headA: ListNode, headB: ListNode) -> Optional[ListNode]:\n        \"\"\"\n        Given the heads of two singly linked-lists headA and headB, return the node at which the two lists intersect. If the two linked lists do not intersect, return null.\n        For example, the following two linked lists begin to intersect at node c1:\n        The test cases are generated such that there are no cycles anywhere in the entire linked structure.\n        Note that the linked lists must retain their original structure after the function returns.\n        Custom Judge:\n        The inputs to the judge are given as follows (your program is not"
    },
    {
        "number": 160,
        "title": "Intersection of Two Linked Lists",
        "difficulty": 0,
        "pass": 7,
        "answer": "        if headA is None or headB is None:\n            return None\n        \n        if headA is None or headB is None:\n            return None\n        \n        if headA is None or headB is None:\n            return None\n        \n        if headA is None or headB is None:\n            return None\n        \n        if headA is None or headB is None:\n            return None\n        \n        if headA is None or headB is None:\n            return None\n        \n        if headA is None or headB is None:\n            return None\n        \n        if headA is None or headB is None:\n            return None\n        \n        if headA is None or headB is None:\n            return None\n        \n        if headA is None or headB is None:\n            return None\n        \n        if headA is None or headB is None:\n            return None\n        \n        if headA is None or headB is None:\n            return None\n        \n        if headA is None or headB is None:\n            return None\n        \n        if head"
    },
    {
        "number": 160,
        "title": "Intersection of Two Linked Lists",
        "difficulty": 0,
        "pass": 8,
        "answer": "        if headA is None or headB is None:\n            return None\n        if headA is None or headB is None:\n            return None\n        if headA is None or headB is None:\n            return None\n        if headA is None or headB is None:\n            return None\n        if headA is None or headB is None:\n            return None\n        if headA is None or headB is None:\n            return None\n        if headA is None or headB is None:\n            return None\n        if headA is None or headB is None:\n            return None\n        if headA is None or headB is None:\n            return None\n        if headA is None or headB is None:\n            return None\n        if headA is None or headB is None:\n            return None\n        if headA is None or headB is None:\n            return None\n        if headA is None or headB is None:\n            return None\n        if headA is None or headB is None:\n            return None\n        if headA is None or headB is None:"
    },
    {
        "number": 160,
        "title": "Intersection of Two Linked Lists",
        "difficulty": 0,
        "pass": 9,
        "answer": "        if not headA or not headB:\n            return None\n        \n        currA, currB = headA, headB\n        while currA!= currB:\n            currA = currA.next if currA else headB\n            currB = currB.next if currB else headA\n            \n        return currA"
    },
    {
        "number": 162,
        "title": "Find Peak Element",
        "difficulty": 1,
        "pass": 0,
        "answer": "        if len(nums) == 1:\n            return 0\n        if len(nums) == 2:\n            if nums[0] > nums[1]:\n                return 0\n            elif nums[0] < nums[1]:\n                return 1\n            else:\n                return 0\n        if len(nums) == 3:\n            if nums[0] > nums[1] and nums[0] > nums[2]:\n                return 0\n            elif nums[1] > nums[0] and nums[1] > nums[2]:\n                return 1\n            elif nums[2] > nums[0] and nums[2] > nums[1]:\n                return 2\n            else:\n                return -1\n        if len(nums) == 4:\n            if nums[0] > nums[1] and nums[0] > nums[2] and nums[0] > nums[3]:\n                return 0\n            elif nums[1] > nums[0]"
    },
    {
        "number": 162,
        "title": "Find Peak Element",
        "difficulty": 1,
        "pass": 1,
        "answer": "        if len(nums) == 1:\n            return 0\n        if len(nums) == 2:\n            if nums[0] > nums[1]:\n                return 0\n            else:\n                return 1\n        if len(nums) == 3:\n            if nums[0] > nums[1] and nums[0] > nums[2]:\n                return 0\n            elif nums[1] > nums[0] and nums[1] > nums[2]:\n                return 1\n            elif nums[2] > nums[0] and nums[2] > nums[1]:\n                return 2\n            else:\n                return -1\n        if len(nums) == 4:\n            if nums[0] > nums[1] and nums[0] > nums[2] and nums[0] > nums[3]:\n                return 0\n            elif nums[1] > nums[0] and nums[1] > nums[2] and nums[1] >"
    },
    {
        "number": 162,
        "title": "Find Peak Element",
        "difficulty": 1,
        "pass": 2,
        "answer": "        l, r = 0, len(nums) - 1\n        while l < r:\n            mid = (l + r) // 2\n            if nums[mid] > nums[mid + 1]:\n                r = mid\n            else:\n                l = mid + 1\n        return l"
    },
    {
        "number": 162,
        "title": "Find Peak Element",
        "difficulty": 1,
        "pass": 3,
        "answer": "        l, r = 0, len(nums) - 1\n        while l < r:\n            mid = l + (r - l) // 2\n            if nums[mid] > nums[mid + 1]:\n                r = mid\n            else:\n                l = mid + 1\n        return l"
    },
    {
        "number": 162,
        "title": "Find Peak Element",
        "difficulty": 1,
        "pass": 4,
        "answer": "        if len(nums) == 1:\n            return 0\n        if len(nums) == 2:\n            if nums[0] > nums[1]:\n                return 0\n            elif nums[0] < nums[1]:\n                return 1\n            else:\n                return 0\n        if len(nums) == 3:\n            if nums[0] > nums[1] and nums[0] > nums[2]:\n                return 0\n            elif nums[1] > nums[0] and nums[1] > nums[2]:\n                return 1\n            elif nums[2] > nums[0] and nums[2] > nums[1]:\n                return 2\n            else:\n                return 0\n        if len(nums) == 4:\n            if nums[0] > nums[1] and nums[0] > nums[2] and nums[0] > nums[3]:\n                return 0\n            elif nums[1] > nums[0] and"
    },
    {
        "number": 162,
        "title": "Find Peak Element",
        "difficulty": 1,
        "pass": 5,
        "answer": "        if len(nums) == 1:\n            return 0\n        left = 0\n        right = len(nums) - 1\n        while left < right:\n            mid = (left + right) // 2\n            if nums[mid] > nums[mid + 1]:\n                right = mid\n            else:\n                left = mid + 1\n        return left"
    },
    {
        "number": 162,
        "title": "Find Peak Element",
        "difficulty": 1,
        "pass": 6,
        "answer": "        \n        left, right = 0, len(nums) - 1\n        \n        while left < right:\n            mid = left + (right - left) // 2\n            if nums[mid] > nums[mid + 1]:\n                right = mid\n            else:\n                left = mid + 1\n        \n        return left"
    },
    {
        "number": 162,
        "title": "Find Peak Element",
        "difficulty": 1,
        "pass": 7,
        "answer": "        if not nums:\n            return -1\n        if len(nums) == 1:\n            return 0\n        if len(nums) == 2:\n            if nums[0] > nums[1]:\n                return 0\n            elif nums[0] < nums[1]:\n                return 1\n            else:\n                return 0\n        if len(nums) == 3:\n            if nums[0] > nums[1] and nums[0] > nums[2]:\n                return 0\n            elif nums[1] > nums[0] and nums[1] > nums[2]:\n                return 1\n            elif nums[2] > nums[0] and nums[2] > nums[1]:\n                return 2\n            else:\n                return 0\n        if len(nums) == 4:\n            if nums[0] > nums[1] and nums[0] > nums[2] and nums[0] > nums[3]:\n                return 0\n            elif"
    },
    {
        "number": 162,
        "title": "Find Peak Element",
        "difficulty": 1,
        "pass": 8,
        "answer": "        if not nums or len(nums) == 1:\n            return 0\n        \n        left = 0\n        right = len(nums) - 1\n        \n        while left < right:\n            mid = left + (right - left) // 2\n            if nums[mid] > nums[mid + 1]:\n                right = mid\n            else:\n                left = mid + 1\n        \n        return left"
    },
    {
        "number": 162,
        "title": "Find Peak Element",
        "difficulty": 1,
        "pass": 9,
        "answer": "        \n        def binary_search(nums, target):\n            lo, hi = 0, len(nums) - 1\n            while lo <= hi:\n                mid = lo + (hi - lo) // 2\n                if nums[mid] < target:\n                    lo = mid + 1\n                elif nums[mid] > target:\n                    hi = mid - 1\n                else:\n                    return mid\n            return -1\n        \n        return binary_search(nums, nums[0])"
    },
    {
        "number": 164,
        "title": "Maximum Gap",
        "difficulty": 2,
        "pass": 0,
        "answer": "        if len(nums) < 2:\n            return 0\n        nums.sort()\n        return max(nums[i+1] - nums[i] for i in range(len(nums)-1))"
    },
    {
        "number": 164,
        "title": "Maximum Gap",
        "difficulty": 2,
        "pass": 1,
        "answer": "        if len(nums) < 2:\n            return 0\n        nums = sorted(nums)\n        return max(nums[i+1] - nums[i] for i in range(len(nums)-1))"
    },
    {
        "number": 164,
        "title": "Maximum Gap",
        "difficulty": 2,
        "pass": 2,
        "answer": "        if len(nums) < 2:\n            return 0\n        nums = sorted(nums)\n        return max(nums[i+1] - nums[i] for i in range(len(nums)-1))"
    },
    {
        "number": 164,
        "title": "Maximum Gap",
        "difficulty": 2,
        "pass": 3,
        "answer": "        if len(nums) < 2:\n            return 0\n        nums.sort()\n        max_diff = nums[1] - nums[0]\n        for i in range(1, len(nums)):\n            if nums[i] - nums[i - 1] > max_diff:\n                max_diff = nums[i] - nums[i - 1]\n        return max_diff"
    },
    {
        "number": 164,
        "title": "Maximum Gap",
        "difficulty": 2,
        "pass": 4,
        "answer": "        if len(nums) < 2:\n            return 0\n        nums.sort()\n        return max(nums[i+1] - nums[i] for i in range(len(nums)-1))\n"
    },
    {
        "number": 164,
        "title": "Maximum Gap",
        "difficulty": 2,
        "pass": 5,
        "answer": "        if len(nums) < 2:\n            return 0\n        nums.sort()\n        diff = nums[1] - nums[0]\n        for i in range(1, len(nums)):\n            if nums[i] - nums[i-1] > diff:\n                diff = nums[i] - nums[i-1]\n        return diff"
    },
    {
        "number": 164,
        "title": "Maximum Gap",
        "difficulty": 2,
        "pass": 6,
        "answer": "        if len(nums) < 2:\n            return 0\n        nums.sort()\n        return max(nums[i+1] - nums[i] for i in range(len(nums)-1))"
    },
    {
        "number": 164,
        "title": "Maximum Gap",
        "difficulty": 2,
        "pass": 7,
        "answer": "        if len(nums) < 2:\n            return 0\n        nums.sort()\n        return max(nums[i + 1] - nums[i] for i in range(len(nums) - 1))"
    },
    {
        "number": 164,
        "title": "Maximum Gap",
        "difficulty": 2,
        "pass": 8,
        "answer": "        if len(nums) < 2:\n            return 0\n        nums = sorted(nums)\n        return max(nums[i+1] - nums[i] for i in range(len(nums)-1))"
    },
    {
        "number": 164,
        "title": "Maximum Gap",
        "difficulty": 2,
        "pass": 9,
        "answer": "        if len(nums) < 2:\n            return 0\n        nums.sort()\n        return max(nums[i+1] - nums[i] for i in range(len(nums)-1))"
    },
    {
        "number": 165,
        "title": "Compare Version Numbers",
        "difficulty": 1,
        "pass": 0,
        "answer": "        v1 = version1.split('.')\n        v2 = version2.split('.')\n        i = 0\n        while i < len(v1) and i < len(v2):\n            if int(v1[i]) < int(v2[i]):\n                return -1\n            elif int(v1[i]) > int(v2[i]):\n                return 1\n            i += 1\n        while i < len(v1):\n            if int(v1[i]) < 0:\n                return -1\n            i += 1\n        while i < len(v2):\n            if int(v2[i]) < 0:\n                return 1\n            i += 1\n        return 0"
    },
    {
        "number": 165,
        "title": "Compare Version Numbers",
        "difficulty": 1,
        "pass": 1,
        "answer": "        v1 = version1.split('.')\n        v2 = version2.split('.')\n        if len(v1) < len(v2):\n            v1, v2 = v2, v1\n        for i in range(len(v1)):\n            if int(v1[i]) > int(v2[i]):\n                return 1\n            elif int(v1[i]) < int(v2[i]):\n                return -1\n        return 0"
    },
    {
        "number": 165,
        "title": "Compare Version Numbers",
        "difficulty": 1,
        "pass": 2,
        "answer": "        v1 = version1.split('.')\n        v2 = version2.split('.')\n        i = 0\n        while i < len(v1) and i < len(v2):\n            if int(v1[i]) < int(v2[i]):\n                return -1\n            elif int(v1[i]) > int(v2[i]):\n                return 1\n            else:\n                i += 1\n        while i < len(v1):\n            if int(v1[i]) < 0:\n                return -1\n            i += 1\n        while i < len(v2):\n            if int(v2[i]) < 0:\n                return 1\n            i += 1\n        return 0"
    },
    {
        "number": 165,
        "title": "Compare Version Numbers",
        "difficulty": 1,
        "pass": 3,
        "answer": "        v1 = version1.split('.')\n        v2 = version2.split('.')\n        i = 0\n        while i < len(v1) and i < len(v2):\n            if int(v1[i]) < int(v2[i]):\n                return -1\n            elif int(v1[i]) > int(v2[i]):\n                return 1\n            else:\n                i += 1\n        while i < len(v1):\n            if int(v1[i]) < 0:\n                return -1\n            i += 1\n        while i < len(v2):\n            if int(v2[i]) < 0:\n                return 1\n            i += 1\n        return 0"
    },
    {
        "number": 165,
        "title": "Compare Version Numbers",
        "difficulty": 1,
        "pass": 4,
        "answer": "        v1 = version1.split('.')\n        v2 = version2.split('.')\n        i = 0\n        while i < len(v1) and i < len(v2):\n            if int(v1[i]) < int(v2[i]):\n                return -1\n            elif int(v1[i]) > int(v2[i]):\n                return 1\n            i += 1\n        while i < len(v1):\n            if int(v1[i]) < 0:\n                return -1\n            i += 1\n        while i < len(v2):\n            if int(v2[i]) < 0:\n                return 1\n            i += 1\n        return 0"
    },
    {
        "number": 165,
        "title": "Compare Version Numbers",
        "difficulty": 1,
        "pass": 5,
        "answer": "        version1_list = version1.split('.')\n        version2_list = version2.split('.')\n        if len(version1_list) > len(version2_list):\n            version1_list = version1_list[:len(version2_list)]\n        elif len(version1_list) < len(version2_list):\n            version2_list = version2_list[:len(version1_list)]\n        for i in range(len(version1_list)):\n            if int(version1_list[i]) > int(version2_list[i]):\n                return 1\n            elif int(version1_list[i]) < int(version2_list[i]):\n                return -1\n        return 0"
    },
    {
        "number": 165,
        "title": "Compare Version Numbers",
        "difficulty": 1,
        "pass": 6,
        "answer": "        v1 = version1.split('.')\n        v2 = version2.split('.')\n        if len(v1) > len(v2):\n            v1, v2 = v2, v1\n        for i in range(len(v1)):\n            if int(v1[i]) > int(v2[i]):\n                return 1\n            elif int(v1[i]) < int(v2[i]):\n                return -1\n        return 0"
    },
    {
        "number": 165,
        "title": "Compare Version Numbers",
        "difficulty": 1,
        "pass": 7,
        "answer": "        v1 = version1.split('.')\n        v2 = version2.split('.')\n        n1 = len(v1)\n        n2 = len(v2)\n        if n1 > n2:\n            v2.extend(['0'] * (n1 - n2))\n        elif n2 > n1:\n            v1.extend(['0'] * (n2 - n1))\n        for i in range(max(n1, n2)):\n            if int(v1[i]) > int(v2[i]):\n                return 1\n            elif int(v1[i]) < int(v2[i]):\n                return -1\n        return 0"
    },
    {
        "number": 165,
        "title": "Compare Version Numbers",
        "difficulty": 1,
        "pass": 8,
        "answer": "        v1 = version1.split('.')\n        v2 = version2.split('.')\n        i = 0\n        while i < len(v1) and i < len(v2):\n            if int(v1[i]) < int(v2[i]):\n                return -1\n            elif int(v1[i]) > int(v2[i]):\n                return 1\n            else:\n                i += 1\n        while i < len(v1):\n            if int(v1[i]) < 0:\n                return -1\n            i += 1\n        while i < len(v2):\n            if int(v2[i]) < 0:\n                return 1\n            i += 1\n        return 0"
    },
    {
        "number": 165,
        "title": "Compare Version Numbers",
        "difficulty": 1,
        "pass": 9,
        "answer": "        v1 = version1.split('.')\n        v2 = version2.split('.')\n        i = 0\n        while i < len(v1) and i < len(v2):\n            if int(v1[i]) < int(v2[i]):\n                return -1\n            elif int(v1[i]) > int(v2[i]):\n                return 1\n            i += 1\n        while i < len(v1):\n            if int(v1[i]) < 0:\n                return -1\n            i += 1\n        while i < len(v2):\n            if int(v2[i]) < 0:\n                return 1\n            i += 1\n        return 0"
    },
    {
        "number": 166,
        "title": "Fraction to Recurring Decimal",
        "difficulty": 1,
        "pass": 0,
        "answer": "        if numerator == 0:\n            return \"0\"\n        if numerator * denominator < 0:\n            sign = \"-\"\n        else:\n            sign = \"\"\n        numerator, denominator = abs(numerator), abs(denominator)\n        if numerator % denominator == 0:\n            return sign + str(numerator // denominator)\n        else:\n            res = str(numerator // denominator) + \".\"\n            numerator %= denominator\n            while numerator!= 0:\n                numerator *= 10\n                res += str(numerator // denominator)\n                numerator %= denominator\n            return sign + res"
    },
    {
        "number": 166,
        "title": "Fraction to Recurring Decimal",
        "difficulty": 1,
        "pass": 1,
        "answer": "        if numerator == 0:\n            return '0'\n        if numerator * denominator < 0:\n            return '-' + self.fractionToDecimal(abs(numerator), abs(denominator))\n        if numerator * denominator == 1:\n            return str(numerator)\n        if numerator * denominator == 0:\n            return '0'\n        numerator = abs(numerator)\n        denominator = abs(denominator)\n        if numerator % denominator == 0:\n            return str(numerator // denominator)\n        if numerator % denominator == 1:\n            return str(numerator // denominator) + '.' + str(numerator % denominator)\n        if numerator % denominator == 2:\n            return str(numerator // denominator) + '.' + '(' + str(numerator % denominator) + ')'\n        if numerator % denominator == 3:\n            return str(numerator // denominator) + '.' + '(' + str(numerator % denominator"
    },
    {
        "number": 166,
        "title": "Fraction to Recurring Decimal",
        "difficulty": 1,
        "pass": 2,
        "answer": "        if numerator == 0:\n            return \"0\"\n        if numerator == 1:\n            return str(numerator)\n        if numerator == -1:\n            return \"-\" + self.fractionToDecimal(-numerator, denominator)\n        if numerator == -2:\n            return \"-\" + self.fractionToDecimal(-numerator, denominator)\n        if numerator == -4:\n            return \"-\" + self.fractionToDecimal(-numerator, denominator)\n        if denominator == 1:\n            return str(numerator)\n        if denominator == -1:\n            return \"-\" + self.fractionToDecimal(-numerator, -denominator)\n        if denominator == -2:\n            return \"-\" + self.fractionToDecimal(-numerator, -denominator)\n        if denominator == -4:\n            return \"-\" + self.fractionToDecimal(-numerator, -denominator)\n        if numerator > 0 and denominator > 0:\n            return str"
    },
    {
        "number": 166,
        "title": "Fraction to Recurring Decimal",
        "difficulty": 1,
        "pass": 3,
        "answer": "        if numerator == 0:\n            return \"0\"\n        if numerator == 1:\n            return str(numerator)\n        if numerator == -1:\n            return \"-\" + self.fractionToDecimal(-numerator, denominator)\n        if denominator == 1:\n            return str(numerator) + \"/1\"\n        if denominator == -1:\n            return \"-\" + self.fractionToDecimal(-numerator, -denominator)\n        if numerator == -1 and denominator == -1:\n            return \"-\" + self.fractionToDecimal(-numerator, -denominator)"
    },
    {
        "number": 166,
        "title": "Fraction to Recurring Decimal",
        "difficulty": 1,
        "pass": 4,
        "answer": "        if numerator == 0:\n            return \"0\"\n        if numerator * denominator < 0:\n            return \"-\" + self.fractionToDecimal(abs(numerator), abs(denominator))\n        if numerator == 1:\n            return str(numerator)\n        if numerator == -1:\n            return \"-\" + self.fractionToDecimal(abs(numerator), abs(denominator))\n        if numerator == -2:\n            return \"-\" + self.fractionToDecimal(abs(numerator), abs(denominator))\n        if numerator == -4:\n            return \"-\" + self.fractionToDecimal(abs(numerator), abs(denominator))\n        if denominator == 1:\n            return str(numerator) + \".\"\n        if denominator == -1:\n            return \"-\" + str(numerator) + \".\"\n        if denominator == -2:\n            return \"-\" + str(numerator) + \".\"\n        if denominator == -4:\n"
    },
    {
        "number": 166,
        "title": "Fraction to Recurring Decimal",
        "difficulty": 1,
        "pass": 5,
        "answer": "        if numerator == 0:\n            return '0'\n        if numerator == 1:\n            return str(numerator)\n        if numerator == -1:\n            return '-' + self.fractionToDecimal(-numerator, denominator)\n        if denominator == 1:\n            return str(numerator) + '.'\n        if denominator == -1:\n            return '-' + self.fractionToDecimal(numerator, -denominator)\n        if numerator % denominator == 0:\n            return str(numerator // denominator)\n        if numerator * denominator < 0:\n            return '-' + self.fractionToDecimal(abs(numerator), abs(denominator))\n        if abs(numerator) < abs(denominator):\n            numerator, denominator = abs(numerator), abs(denominator)\n        if numerator == 1:\n            return str(numerator) + '.' + self.fractionToDecimal(numerator, denominator)\n        if numerator"
    },
    {
        "number": 166,
        "title": "Fraction to Recurring Decimal",
        "difficulty": 1,
        "pass": 6,
        "answer": "        if numerator == 0:\n            return '0'\n        if numerator * denominator < 0:\n            return '-' + self.fractionToDecimal(abs(numerator), abs(denominator))\n        if numerator == 1:\n            return str(numerator)\n        if numerator == -1:\n            return '-' + self.fractionToDecimal(-1 * numerator, denominator)\n        if denominator == 1:\n            return str(numerator) + '/1'\n        if denominator == -1:\n            return '-' + self.fractionToDecimal(-1 * numerator, -1 * denominator)\n        if numerator == -1 and denominator == -1:\n            return '-' + self.fractionToDecimal(-1 * numerator, -1 * denominator)\n        if numerator == -1 and denominator == 1:\n            return '-' + self.fractionToDecimal(-1 * numerator, 1)\n        if numerator == 1 and denominator == -1:\n            return '-' + self."
    },
    {
        "number": 166,
        "title": "Fraction to Recurring Decimal",
        "difficulty": 1,
        "pass": 7,
        "answer": "        if numerator == 0:\n            return \"0\"\n        if numerator == 1:\n            return str(numerator)\n        if numerator == -1:\n            return \"-\" + self.fractionToDecimal(-numerator, denominator)\n        if denominator == 1:\n            return str(numerator) + \"/1\"\n        if denominator == -1:\n            return \"-\" + self.fractionToDecimal(-numerator, -denominator)\n        if numerator == -1 and denominator == -1:\n            return \"-\" + self.fractionToDecimal(-numerator, -denominator)\n        if numerator == -1 and denominator == 1:\n            return \"-\" + self.fractionToDecimal(-numerator, denominator)\n        if numerator == 1 and denominator == -1:\n            return \"-\" + self.fractionToDecimal(-numerator, denominator)\n        if numerator == -1 and denominator == -1:\n            return \"-\" + self.fractionToDecimal(-"
    },
    {
        "number": 166,
        "title": "Fraction to Recurring Decimal",
        "difficulty": 1,
        "pass": 8,
        "answer": "        if numerator == 0:\n            return \"0\"\n        if numerator * denominator < 0:\n            return \"-\" + self.fractionToDecimal(abs(numerator), abs(denominator))\n        if numerator * denominator == 0:\n            return \"0\"\n        if numerator == 1:\n            return str(numerator)\n        if numerator == -1:\n            return \"-\" + str(numerator)\n        if numerator == 2:\n            return \"0.5\"\n        if numerator == -2:\n            return \"-\" + \"0.5\"\n        if numerator == 3:\n            return \"0.(111)\"\n        if numerator == -3:\n            return \"-\" + \"0.(111)\"\n        if numerator == 4:\n            return \"0.25\"\n        if numerator == -4:\n            return \"-\" + \"0.25\"\n        if numerator == 5:\n            return \"0.2\"\n        if numerator == -5:\n            return \"-\" + \"0.2\"\n"
    },
    {
        "number": 166,
        "title": "Fraction to Recurring Decimal",
        "difficulty": 1,
        "pass": 9,
        "answer": "        if numerator == 0:\n            return \"0\"\n        if numerator * denominator < 0:\n            return \"-\" + self.fractionToDecimal(abs(numerator), abs(denominator))\n        if numerator == 1:\n            return str(numerator)\n        if numerator % denominator == 0:\n            return str(numerator // denominator)\n        res = \"\"\n        numerator = abs(numerator)\n        denominator = abs(denominator)\n        res += str(numerator // denominator)\n        res += \".\"\n        numerator = numerator % denominator\n        if numerator == 0:\n            return res\n        res += self.fractionToDecimal(numerator, denominator)\n        return res"
    },
    {
        "number": 167,
        "title": "Two Sum II - Input Array Is Sorted",
        "difficulty": 1,
        "pass": 0,
        "answer": "        left = 0\n        right = len(numbers) - 1\n        while left < right:\n            if numbers[left] + numbers[right] == target:\n                return [left + 1, right + 1]\n            elif numbers[left] + numbers[right] < target:\n                left += 1\n            else:\n                right -= 1\n        return []"
    },
    {
        "number": 167,
        "title": "Two Sum II - Input Array Is Sorted",
        "difficulty": 1,
        "pass": 1,
        "answer": "        if not numbers:\n            return []\n        left, right = 0, len(numbers) - 1\n        while left < right:\n            if numbers[left] + numbers[right] == target:\n                return [left + 1, right + 1]\n            elif numbers[left] + numbers[right] < target:\n                left += 1\n            else:\n                right -= 1\n        return []"
    },
    {
        "number": 167,
        "title": "Two Sum II - Input Array Is Sorted",
        "difficulty": 1,
        "pass": 2,
        "answer": "        \n        left, right = 0, len(numbers) - 1\n        \n        while left < right:\n            if numbers[left] + numbers[right] == target:\n                return [left + 1, right + 1]\n            elif numbers[left] + numbers[right] < target:\n                left += 1\n            else:\n                right -= 1\n        \n        return [-1, -1]"
    },
    {
        "number": 167,
        "title": "Two Sum II - Input Array Is Sorted",
        "difficulty": 1,
        "pass": 3,
        "answer": "        \n        left, right = 0, len(numbers) - 1\n        \n        while left < right:\n            if numbers[left] + numbers[right] == target:\n                return [left + 1, right + 1]\n            elif numbers[left] + numbers[right] > target:\n                right -= 1\n            else:\n                left += 1\n        \n        return []"
    },
    {
        "number": 167,
        "title": "Two Sum II - Input Array Is Sorted",
        "difficulty": 1,
        "pass": 4,
        "answer": "        l, r = 0, len(numbers) - 1\n        while l < r:\n            if numbers[l] + numbers[r] == target:\n                return [l + 1, r + 1]\n            elif numbers[l] + numbers[r] < target:\n                l += 1\n            else:\n                r -= 1\n        return []"
    },
    {
        "number": 167,
        "title": "Two Sum II - Input Array Is Sorted",
        "difficulty": 1,
        "pass": 5,
        "answer": "        l, r = 0, len(numbers) - 1\n        while l < r:\n            if numbers[l] + numbers[r] == target:\n                return [l + 1, r + 1]\n            elif numbers[l] + numbers[r] < target:\n                l += 1\n            else:\n                r -= 1\n        return []"
    },
    {
        "number": 167,
        "title": "Two Sum II - Input Array Is Sorted",
        "difficulty": 1,
        "pass": 6,
        "answer": "        l, r = 0, len(numbers) - 1\n        while l < r:\n            if numbers[l] + numbers[r] == target:\n                return [l + 1, r + 1]\n            elif numbers[l] + numbers[r] < target:\n                l += 1\n            else:\n                r -= 1"
    },
    {
        "number": 167,
        "title": "Two Sum II - Input Array Is Sorted",
        "difficulty": 1,
        "pass": 7,
        "answer": "        left, right = 0, len(numbers) - 1\n        while left < right:\n            if numbers[left] + numbers[right] == target:\n                return [left + 1, right + 1]\n            elif numbers[left] + numbers[right] < target:\n                left += 1\n            else:\n                right -= 1"
    },
    {
        "number": 167,
        "title": "Two Sum II - Input Array Is Sorted",
        "difficulty": 1,
        "pass": 8,
        "answer": "        \n        i = 0\n        j = len(numbers) - 1\n        \n        while i < j:\n            if numbers[i] + numbers[j] == target:\n                return [i + 1, j + 1]\n            elif numbers[i] + numbers[j] < target:\n                i += 1\n            else:\n                j -= 1\n        \n        return []"
    },
    {
        "number": 167,
        "title": "Two Sum II - Input Array Is Sorted",
        "difficulty": 1,
        "pass": 9,
        "answer": "        \n        left, right = 0, len(numbers) - 1\n        \n        while left < right:\n            if numbers[left] + numbers[right] == target:\n                return [left + 1, right + 1]\n            elif numbers[left] + numbers[right] < target:\n                left += 1\n            else:\n                right -= 1\n        \n        return []"
    },
    {
        "number": 168,
        "title": "Excel Sheet Column Title",
        "difficulty": 0,
        "pass": 0,
        "answer": "        if columnNumber == 1:\n            return \"A\"\n        elif columnNumber == 2:\n            return \"B\"\n        elif columnNumber == 3:\n            return \"C\"\n        elif columnNumber == 4:\n            return \"D\"\n        elif columnNumber == 5:\n            return \"E\"\n        elif columnNumber == 6:\n            return \"F\"\n        elif columnNumber == 7:\n            return \"G\"\n        elif columnNumber == 8:\n            return \"H\"\n        elif columnNumber == 9:\n            return \"I\"\n        elif columnNumber == 10:\n            return \"J\"\n        elif columnNumber == 11:\n            return \"K\"\n        elif columnNumber == 12:\n            return \"L\"\n        elif columnNumber == 13:\n            return \"M\"\n        elif columnNumber == 14:\n            return \"N\"\n        elif columnNumber == 15:\n            return \"O\"\n        elif columnNumber == 16:\n            return \"P\"\n        elif columnNumber == 17:\n            return"
    },
    {
        "number": 168,
        "title": "Excel Sheet Column Title",
        "difficulty": 0,
        "pass": 1,
        "answer": "        # if columnNumber == 1:\n        #     return \"A\"\n        # elif columnNumber == 2:\n        #     return \"B\"\n        # elif columnNumber == 3:\n        #     return \"C\"\n        # elif columnNumber == 4:\n        #     return \"D\"\n        # elif columnNumber == 5:\n        #     return \"E\"\n        # elif columnNumber == 6:\n        #     return \"F\"\n        # elif columnNumber == 7:\n        #     return \"G\"\n        # elif columnNumber == 8:\n        #     return \"H\"\n        # elif columnNumber == 9:\n        #     return \"I\"\n        # elif columnNumber == 10:\n        #     return \"J\"\n        # elif columnNumber == 11:\n        #     return \"K\"\n        # elif columnNumber == 12:\n        #     return \"L\"\n        # elif columnNumber == 13:\n        #     return \"M\"\n        # elif columnNumber == 14:\n        #     return \"N\""
    },
    {
        "number": 168,
        "title": "Excel Sheet Column Title",
        "difficulty": 0,
        "pass": 2,
        "answer": "        res = \"\"\n        while columnNumber > 0:\n            res = chr((columnNumber - 1) % 26 + ord('A')) + res\n            columnNumber = (columnNumber - 1) // 26\n        return res"
    },
    {
        "number": 168,
        "title": "Excel Sheet Column Title",
        "difficulty": 0,
        "pass": 3,
        "answer": "        if columnNumber == 1:\n            return \"A\"\n        if columnNumber == 2:\n            return \"B\"\n        if columnNumber == 3:\n            return \"C\"\n        if columnNumber == 4:\n            return \"D\"\n        if columnNumber == 5:\n            return \"E\"\n        if columnNumber == 6:\n            return \"F\"\n        if columnNumber == 7:\n            return \"G\"\n        if columnNumber == 8:\n            return \"H\"\n        if columnNumber == 9:\n            return \"I\"\n        if columnNumber == 10:\n            return \"J\"\n        if columnNumber == 11:\n            return \"K\"\n        if columnNumber == 12:\n            return \"L\"\n        if columnNumber == 13:\n            return \"M\"\n        if columnNumber == 14:\n            return \"N\"\n        if columnNumber == 15:\n            return \"O\"\n        if columnNumber == 16:\n            return \"P\"\n        if columnNumber == 17:\n            return \"Q\"\n        if columnNumber == 18:\n            return \"R"
    },
    {
        "number": 168,
        "title": "Excel Sheet Column Title",
        "difficulty": 0,
        "pass": 4,
        "answer": "        alphabet = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n        res = \"\"\n        while columnNumber > 0:\n            res = alphabet[columnNumber % 26 - 1] + res\n            columnNumber = columnNumber // 26\n        return res"
    },
    {
        "number": 168,
        "title": "Excel Sheet Column Title",
        "difficulty": 0,
        "pass": 5,
        "answer": "        \n        letters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n        res = ''\n        while columnNumber > 0:\n            res = letters[columnNumber % 26] + res\n            columnNumber = columnNumber // 26\n        return res"
    },
    {
        "number": 168,
        "title": "Excel Sheet Column Title",
        "difficulty": 0,
        "pass": 6,
        "answer": "        res = \"\"\n        while columnNumber > 0:\n            res = chr((columnNumber - 1) % 26 + ord('A')) + res\n            columnNumber = (columnNumber - 1) // 26\n        return res"
    },
    {
        "number": 168,
        "title": "Excel Sheet Column Title",
        "difficulty": 0,
        "pass": 7,
        "answer": "        result = \"\"\n        while columnNumber > 0:\n            result = chr((columnNumber - 1) % 26 + ord('A')) + result\n            columnNumber = (columnNumber - 1) // 26\n        return result"
    },
    {
        "number": 168,
        "title": "Excel Sheet Column Title",
        "difficulty": 0,
        "pass": 8,
        "answer": "        \n        alphabet = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n        result = \"\"\n        while columnNumber > 0:\n            columnNumber, remainder = divmod(columnNumber - 1, 26)\n            result = alphabet[remainder] + result\n        return result"
    },
    {
        "number": 168,
        "title": "Excel Sheet Column Title",
        "difficulty": 0,
        "pass": 9,
        "answer": "        letters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n        return letters[columnNumber - 1]"
    },
    {
        "number": 169,
        "title": "Majority Element",
        "difficulty": 0,
        "pass": 0,
        "answer": "        counts = {}\n        for num in nums:\n            counts[num] = counts.get(num, 0) + 1\n        return max(counts, key=counts.get)"
    },
    {
        "number": 169,
        "title": "Majority Element",
        "difficulty": 0,
        "pass": 1,
        "answer": "        \n        counts = {}\n        for num in nums:\n            if num in counts:\n                counts[num] += 1\n            else:\n                counts[num] = 1\n        \n        for key, val in counts.items():\n            if val > len(nums) // 2:\n                return key\n        \n        return -1\n        \n        \nclass Solution:\n    def majorityElement(self, nums: List[int]) -> int:\n        \"\"\"\n        Given an array nums of size n, return the majority element.\n        The majority element is the element that appears more than \u230an / 2\u230b times. You may assume that the majority element always exists in the array.\n        Example 1:\n        Input: nums = [3,2,3]\n        Output: 3\n        Example 2:\n        Input: nums = [2,2,1,1,1,2,2]\n        Output: 2\n        \"\"\"\n        \n        counts = {}\n        for num in nums:\n            if num in counts:\n                counts[num"
    },
    {
        "number": 169,
        "title": "Majority Element",
        "difficulty": 0,
        "pass": 2,
        "answer": "        nums.sort()\n        return nums[len(nums) // 2]"
    },
    {
        "number": 169,
        "title": "Majority Element",
        "difficulty": 0,
        "pass": 3,
        "answer": "        counts = {}\n        for num in nums:\n            counts[num] = counts.get(num, 0) + 1\n        return max(counts, key=counts.get)"
    },
    {
        "number": 169,
        "title": "Majority Element",
        "difficulty": 0,
        "pass": 4,
        "answer": "        \n        d = {}\n        for i in nums:\n            if i in d:\n                d[i] += 1\n            else:\n                d[i] = 1\n        \n        for i in d:\n            if d[i] > len(nums) // 2:\n                return i\n        \n        return -1"
    },
    {
        "number": 169,
        "title": "Majority Element",
        "difficulty": 0,
        "pass": 5,
        "answer": "        \n        counts = {}\n        for num in nums:\n            if num in counts:\n                counts[num] += 1\n            else:\n                counts[num] = 1\n        \n        for key, val in counts.items():\n            if val > len(nums) // 2:\n                return key\n        \n        return -1"
    },
    {
        "number": 169,
        "title": "Majority Element",
        "difficulty": 0,
        "pass": 6,
        "answer": "        \n        counts = {}\n        for num in nums:\n            if num in counts:\n                counts[num] += 1\n            else:\n                counts[num] = 1\n        \n        for num in counts:\n            if counts[num] > len(nums) // 2:\n                return num\n        \n        return -1\n        "
    },
    {
        "number": 169,
        "title": "Majority Element",
        "difficulty": 0,
        "pass": 7,
        "answer": "        \n        counts = {}\n        for num in nums:\n            if num in counts:\n                counts[num] += 1\n            else:\n                counts[num] = 1\n        \n        for num in counts:\n            if counts[num] > len(nums) // 2:\n                return num\n        \n        return -1"
    },
    {
        "number": 169,
        "title": "Majority Element",
        "difficulty": 0,
        "pass": 8,
        "answer": "        nums.sort()\n        return nums[len(nums) // 2]"
    },
    {
        "number": 169,
        "title": "Majority Element",
        "difficulty": 0,
        "pass": 9,
        "answer": "        nums.sort()\n        return nums[len(nums) // 2]"
    },
    {
        "number": 171,
        "title": "Excel Sheet Column Number",
        "difficulty": 0,
        "pass": 0,
        "answer": "        if not columnTitle:\n            return 0\n        n = len(columnTitle)\n        ans = 0\n        for i in range(n):\n            ans += (ord(columnTitle[i]) - ord('A') + 1) * 26 ** (n - i - 1)\n        return ans"
    },
    {
        "number": 171,
        "title": "Excel Sheet Column Number",
        "difficulty": 0,
        "pass": 1,
        "answer": "        \n        n = 0\n        for i in range(len(columnTitle)):\n            n += (ord(columnTitle[i]) - ord('A') + 1) * 26 ** (len(columnTitle) - i - 1)\n        return n"
    },
    {
        "number": 171,
        "title": "Excel Sheet Column Number",
        "difficulty": 0,
        "pass": 2,
        "answer": "        result = 0\n        for i in range(len(columnTitle)):\n            result += (ord(columnTitle[i]) - 64) * (26 ** (len(columnTitle) - i - 1))\n        return result"
    },
    {
        "number": 171,
        "title": "Excel Sheet Column Number",
        "difficulty": 0,
        "pass": 3,
        "answer": "        res = 0\n        for i in range(len(columnTitle)):\n            res += (ord(columnTitle[i]) - ord('A') + 1) * 26 ** (len(columnTitle) - i - 1)\n        return res"
    },
    {
        "number": 171,
        "title": "Excel Sheet Column Number",
        "difficulty": 0,
        "pass": 4,
        "answer": "        res = 0\n        for i in range(len(columnTitle)):\n            res += (ord(columnTitle[i]) - ord('A') + 1) * (26 ** (len(columnTitle) - i - 1))\n        return res"
    },
    {
        "number": 171,
        "title": "Excel Sheet Column Number",
        "difficulty": 0,
        "pass": 5,
        "answer": "        res = 0\n        for i in range(len(columnTitle)):\n            res += (ord(columnTitle[i]) - ord('A') + 1) * 26 ** (len(columnTitle) - i - 1)\n        return res"
    },
    {
        "number": 171,
        "title": "Excel Sheet Column Number",
        "difficulty": 0,
        "pass": 6,
        "answer": "        result = 0\n        for i in range(len(columnTitle)):\n            result += (ord(columnTitle[i]) - 64) * (26 ** (len(columnTitle) - i - 1))\n        return result"
    },
    {
        "number": 171,
        "title": "Excel Sheet Column Number",
        "difficulty": 0,
        "pass": 7,
        "answer": "        res = 0\n        for i in range(len(columnTitle)):\n            res += (ord(columnTitle[i]) - ord('A') + 1) * (26 ** (len(columnTitle) - i - 1))\n        return res"
    },
    {
        "number": 171,
        "title": "Excel Sheet Column Number",
        "difficulty": 0,
        "pass": 8,
        "answer": "        if not columnTitle:\n            return 0\n        res = 0\n        for i in range(len(columnTitle)):\n            res += (ord(columnTitle[i]) - ord('A') + 1) * (26 ** (len(columnTitle) - i - 1))\n        return res"
    },
    {
        "number": 171,
        "title": "Excel Sheet Column Number",
        "difficulty": 0,
        "pass": 9,
        "answer": "        \n        result = 0\n        for i in range(len(columnTitle)):\n            result += (ord(columnTitle[i]) - ord('A') + 1) * (26 ** (len(columnTitle) - i - 1))\n        return result"
    },
    {
        "number": 172,
        "title": "Factorial Trailing Zeroes",
        "difficulty": 1,
        "pass": 0,
        "answer": "        if n == 0:\n            return 0\n        elif n == 1:\n            return 0\n        elif n == 2:\n            return 1\n        elif n == 3:\n            return 1\n        elif n == 4:\n            return 1\n        elif n == 5:\n            return 1\n        elif n == 6:\n            return 1\n        elif n == 7:\n            return 1\n        elif n == 8:\n            return 1\n        elif n == 9:\n            return 1\n        elif n == 10:\n            return 1\n        elif n == 11:\n            return 1\n        elif n == 12:\n            return 1\n        elif n == 13:\n            return 1\n        elif n == 14:\n            return 1\n        elif n == 15:\n            return 1\n        elif n == 16:\n            return 1\n        elif n == 17:\n            return 1\n        elif n == 18:\n            return 1\n        elif n == 19:\n            return 1\n        elif n == 20:\n            return 1"
    },
    {
        "number": 172,
        "title": "Factorial Trailing Zeroes",
        "difficulty": 1,
        "pass": 1,
        "answer": "        if n == 0:\n            return 0\n        if n == 1:\n            return 0\n        if n == 2:\n            return 1\n        if n == 3:\n            return 0\n        if n == 4:\n            return 1\n        if n == 5:\n            return 1\n        if n == 6:\n            return 2\n        if n == 7:\n            return 2\n        if n == 8:\n            return 3\n        if n == 9:\n            return 3\n        if n == 10:\n            return 4\n        if n == 11:\n            return 4\n        if n == 12:\n            return 5\n        if n == 13:\n            return 5\n        if n == 14:\n            return 6\n        if n == 15:\n            return 6\n        if n == 16:\n            return 7\n        if n == 17:\n            return 7\n        if n == 18:\n            return 8\n        if n == 19:\n            return 8\n        if n == 20:\n            return 9\n        if n == 21:\n            return 9\n        if n == 22:\n            "
    },
    {
        "number": 172,
        "title": "Factorial Trailing Zeroes",
        "difficulty": 1,
        "pass": 2,
        "answer": "        if n == 0:\n            return 0\n        count = 0\n        while n >= 5:\n            count += n // 5\n            n = n // 5\n        return count"
    },
    {
        "number": 172,
        "title": "Factorial Trailing Zeroes",
        "difficulty": 1,
        "pass": 3,
        "answer": "        if n == 0:\n            return 0\n        if n == 1:\n            return 0\n        if n == 2:\n            return 1\n        if n == 3:\n            return 0\n        if n == 4:\n            return 1\n        if n == 5:\n            return 1\n        if n == 6:\n            return 2\n        if n == 7:\n            return 2\n        if n == 8:\n            return 3\n        if n == 9:\n            return 3\n        if n == 10:\n            return 4\n        if n == 11:\n            return 4\n        if n == 12:\n            return 5\n        if n == 13:\n            return 5\n        if n == 14:\n            return 6\n        if n == 15:\n            return 6\n        if n == 16:\n            return 7\n        if n == 17:\n            return 7\n        if n == 18:\n            return 8\n        if n == 19:\n            return 8\n        if n == 20:\n            return 9\n        if n == 21:\n            return 9\n        if n == 22:\n            "
    },
    {
        "number": 172,
        "title": "Factorial Trailing Zeroes",
        "difficulty": 1,
        "pass": 4,
        "answer": "        if n == 0:\n            return 0\n        if n == 1:\n            return 0\n        if n == 2:\n            return 1\n        if n == 3:\n            return 0\n        if n == 4:\n            return 1\n        if n == 5:\n            return 1\n        if n == 6:\n            return 2\n        if n == 7:\n            return 2\n        if n == 8:\n            return 3\n        if n == 9:\n            return 3\n        if n == 10:\n            return 4\n        if n == 11:\n            return 4\n        if n == 12:\n            return 5\n        if n == 13:\n            return 5\n        if n == 14:\n            return 6\n        if n == 15:\n            return 6\n        if n == 16:\n            return 7\n        if n == 17:\n            return 7\n        if n == 18:\n            return 8\n        if n == 19:\n            return 8\n        if n == 20:\n            return 9\n        if n == 21:\n            return 9\n        if n == 22:\n            "
    },
    {
        "number": 172,
        "title": "Factorial Trailing Zeroes",
        "difficulty": 1,
        "pass": 5,
        "answer": "        if n == 0:\n            return 0\n        if n == 1:\n            return 0\n        if n == 2:\n            return 1\n        if n == 3:\n            return 0\n        if n == 4:\n            return 1\n        if n == 5:\n            return 1\n        if n == 6:\n            return 2\n        if n == 7:\n            return 2\n        if n == 8:\n            return 3\n        if n == 9:\n            return 3\n        if n == 10:\n            return 4\n        if n == 11:\n            return 4\n        if n == 12:\n            return 5\n        if n == 13:\n            return 5\n        if n == 14:\n            return 6\n        if n == 15:\n            return 6\n        if n == 16:\n            return 7\n        if n == 17:\n            return 7\n        if n == 18:\n            return 8\n        if n == 19:\n            return 8\n        if n == 20:\n            return 9\n        if n == 21:\n            return 9\n        if n == 22:\n            "
    },
    {
        "number": 172,
        "title": "Factorial Trailing Zeroes",
        "difficulty": 1,
        "pass": 6,
        "answer": "        if n == 0:\n            return 0\n        if n == 1:\n            return 0\n        if n == 2:\n            return 1\n        if n == 3:\n            return 0\n        if n == 4:\n            return 1\n        if n == 5:\n            return 1\n        if n == 6:\n            return 2\n        if n == 7:\n            return 2\n        if n == 8:\n            return 3\n        if n == 9:\n            return 3\n        if n == 10:\n            return 4\n        if n == 11:\n            return 4\n        if n == 12:\n            return 5\n        if n == 13:\n            return 5\n        if n == 14:\n            return 6\n        if n == 15:\n            return 6\n        if n == 16:\n            return 7\n        if n == 17:\n            return 7\n        if n == 18:\n            return 8\n        if n == 19:\n            return 8\n        if n == 20:\n            return 9\n        if n == 21:\n            return 9\n        if n == 22:\n            "
    },
    {
        "number": 172,
        "title": "Factorial Trailing Zeroes",
        "difficulty": 1,
        "pass": 7,
        "answer": "        if n == 0:\n            return 0\n        count = 0\n        while n > 0:\n            count += n // 5\n            n = n // 5\n        return count"
    },
    {
        "number": 172,
        "title": "Factorial Trailing Zeroes",
        "difficulty": 1,
        "pass": 8,
        "answer": "        if n == 0:\n            return 0\n        if n == 1:\n            return 0\n        if n == 2:\n            return 1\n        if n == 3:\n            return 0\n        if n == 4:\n            return 1\n        if n == 5:\n            return 1\n        if n == 6:\n            return 2\n        if n == 7:\n            return 2\n        if n == 8:\n            return 3\n        if n == 9:\n            return 3\n        if n == 10:\n            return 4\n        if n == 11:\n            return 4\n        if n == 12:\n            return 5\n        if n == 13:\n            return 5\n        if n == 14:\n            return 6\n        if n == 15:\n            return 6\n        if n == 16:\n            return 7\n        if n == 17:\n            return 7\n        if n == 18:\n            return 8\n        if n == 19:\n            return 8\n        if n == 20:\n            return 9\n        if n == 21:\n            return 9\n        if n == 22:\n            "
    },
    {
        "number": 172,
        "title": "Factorial Trailing Zeroes",
        "difficulty": 1,
        "pass": 9,
        "answer": "        if n == 0:\n            return 0\n        count = 0\n        while n >= 5:\n            count += n // 5\n            n = n // 5\n        return count"
    },
    {
        "number": 173,
        "title": "Binary Search Tree Iterator",
        "difficulty": 1,
        "pass": 0,
        "answer": "        self.stack = []\n        self.root = root\n        self.curr = root\n        while self.curr:\n            self.stack.append(self.curr)\n            self.curr = self.curr.left\n        return self.stack[-1].val"
    },
    {
        "number": 173,
        "title": "Binary Search Tree Iterator",
        "difficulty": 1,
        "pass": 1,
        "answer": "    def __init__(self, root: Optional[TreeNode]):\n    def next(self) -> int:\n    def hasNext(self) -> bool:\n        \"\"\"\n        Implement the BSTIterator class that represents an iterator over the in-order traversal of a binary search tree (BST):\n            BSTIterator(TreeNode root) Initializes an object of the BSTIterator class. The root of the BST is given as part of the constructor. The pointer should be initialized to a non-existent number smaller than any element in the BST.\n            boolean hasNext() Returns true if there exists a number in the traversal to the right of the pointer, otherwise returns false.\n            int next() Moves the pointer to the right, then returns the number at the pointer.\n        Notice that by initializing the pointer to a non-existent smallest number, the first call to next() will return the smallest element in the BST.\n        You may assume that next() calls will always be valid. That is, there will be at least a next number in the in-order traversal when next() is called.\n        Example 1:\n        Input\n        [\""
    },
    {
        "number": 173,
        "title": "Binary Search Tree Iterator",
        "difficulty": 1,
        "pass": 2,
        "answer": "        "
    },
    {
        "number": 173,
        "title": "Binary Search Tree Iterator",
        "difficulty": 1,
        "pass": 3,
        "answer": "        "
    },
    {
        "number": 173,
        "title": "Binary Search Tree Iterator",
        "difficulty": 1,
        "pass": 4,
        "answer": "        self.node = self.root\n        self.stack = []\n        while self.node or self.stack:\n            if self.node:\n                self.stack.append(self.node)\n                self.node = self.node.left\n            else:\n                self.node = self.stack.pop()\n                if self.node.right:\n                    self.node = self.node.right\n                    while self.node:\n                        self.stack.append(self.node)\n                        self.node = self.node.left\n                else:\n                    return self.node.val\n        return -1"
    },
    {
        "number": 173,
        "title": "Binary Search Tree Iterator",
        "difficulty": 1,
        "pass": 5,
        "answer": "        self.nums = []\n        self.index = -1\n        \n        def inorder(root):\n            if root:\n                inorder(root.left)\n                self.nums.append(root.val)\n                inorder(root.right)\n        \n        inorder(root)\n        \n        while self.index < len(self.nums) - 1:\n            self.index += 1\n            if self.nums[self.index] < self.nums[self.index + 1]:\n                return self.nums[self.index]\n        \n        return self.nums[-1]"
    },
    {
        "number": 173,
        "title": "Binary Search Tree Iterator",
        "difficulty": 1,
        "pass": 6,
        "answer": "        # Your BSTIterator object will be instantiated and called as such:\n        # obj = BSTIterator(root)\n        # param_1 = obj.next()\n        # param_2 = obj.hasNext()\n        # @lc code=end"
    },
    {
        "number": 173,
        "title": "Binary Search Tree Iterator",
        "difficulty": 1,
        "pass": 7,
        "answer": "        # Your BSTIterator object will be instantiated and called as such:\n        # obj = BSTIterator(root)\n        # param_1 = obj.next()\n        # param_2 = obj.hasNext()\n        # @lc code=end"
    },
    {
        "number": 173,
        "title": "Binary Search Tree Iterator",
        "difficulty": 1,
        "pass": 8,
        "answer": "        # Your BSTIterator object will be instantiated and called as such:\n        # obj = BSTIterator(root)\n        # param_1 = obj.next()\n        # param_2 = obj.hasNext()"
    },
    {
        "number": 173,
        "title": "Binary Search Tree Iterator",
        "difficulty": 1,
        "pass": 9,
        "answer": "        self.stack = []\n        self.node = None\n        while self.hasNext():\n            self.stack.append(self.node)\n            self.node = self.node.right\n        return self.stack.pop().val"
    },
    {
        "number": 174,
        "title": "Dungeon Game",
        "difficulty": 2,
        "pass": 0,
        "answer": "        m, n = len(dungeon), len(dungeon[0])\n        dp = [[0] * n for _ in range(m)]\n        dp[0][0] = dungeon[0][0]\n        for i in range(1, m):\n            dp[i][0] = max(0, dp[i - 1][0] - dungeon[i][0])\n        for j in range(1, n):\n            dp[0][j] = max(0, dp[0][j - 1] - dungeon[0][j])\n        for i in range(1, m):\n            for j in range(1, n):\n                dp[i][j] = max(0, min(dp[i - 1][j], dp[i][j - 1]) + dungeon[i][j])\n        return dp[-1][-1]"
    },
    {
        "number": 174,
        "title": "Dungeon Game",
        "difficulty": 2,
        "pass": 1,
        "answer": "        m, n = len(dungeon), len(dungeon[0])\n        dp = [[0] * n for _ in range(m)]\n        dp[0][0] = dungeon[0][0]\n        for i in range(1, m):\n            dp[i][0] = max(0, dp[i - 1][0] - dungeon[i][0])\n        for j in range(1, n):\n            dp[0][j] = max(0, dp[0][j - 1] - dungeon[0][j])\n        for i in range(1, m):\n            for j in range(1, n):\n                dp[i][j] = max(0, min(dp[i - 1][j], dp[i][j - 1]) + dungeon[i][j])\n        return dp[-1][-1]"
    },
    {
        "number": 174,
        "title": "Dungeon Game",
        "difficulty": 2,
        "pass": 2,
        "answer": "        m, n = len(dungeon), len(dungeon[0])\n        dp = [[0] * n for _ in range(m)]\n        dp[0][0] = dungeon[0][0]\n        for i in range(1, m):\n            dp[i][0] = max(0, dp[i - 1][0] - dungeon[i][0])\n        for j in range(1, n):\n            dp[0][j] = max(0, dp[0][j - 1] - dungeon[0][j])\n        for i in range(1, m):\n            for j in range(1, n):\n                dp[i][j] = max(min(dp[i - 1][j], dp[i][j - 1]) - dungeon[i][j], 1)\n        return dp[-1][-1]"
    },
    {
        "number": 174,
        "title": "Dungeon Game",
        "difficulty": 2,
        "pass": 3,
        "answer": "        m, n = len(dungeon), len(dungeon[0])\n        dp = [[0] * n for _ in range(m)]\n        dp[-1][-1] = max(1, 1 - dungeon[-1][-1])\n        for i in range(m - 2, -1, -1):\n            dp[i][-1] = max(1, dp[i + 1][-1] - dungeon[i][-1])\n        for j in range(n - 2, -1, -1):\n            dp[-1][j] = max(1, dp[-1][j + 1] - dungeon[-1][j])\n        for i in range(m - 2, -1, -1):\n            for j in range(n - 2, -1, -1):\n                dp[i][j] = max(1, min(dp[i + 1][j], dp[i][j + 1]) - dungeon[i][j])\n        return dp[0][0]"
    },
    {
        "number": 174,
        "title": "Dungeon Game",
        "difficulty": 2,
        "pass": 4,
        "answer": "        n, m = len(dungeon), len(dungeon[0])\n        dp = [[0] * m for _ in range(n)]\n        dp[-1][-1] = max(1, 1 - dungeon[-1][-1])\n        for i in range(n - 2, -1, -1):\n            dp[i][-1] = max(1, dp[i + 1][-1] - dungeon[i][-1])\n        for j in range(m - 2, -1, -1):\n            dp[-1][j] = max(1, dp[-1][j + 1] - dungeon[-1][j])\n        for i in range(n - 2, -1, -1):\n            for j in range(m - 2, -1, -1):\n                dp[i][j] = max(1, min(dp[i + 1][j], dp[i][j + 1]) - dungeon[i][j])\n        return dp[0][0]"
    },
    {
        "number": 174,
        "title": "Dungeon Game",
        "difficulty": 2,
        "pass": 5,
        "answer": "        m, n = len(dungeon), len(dungeon[0])\n        dp = [[0] * n for _ in range(m)]\n        dp[-1][-1] = max(1, 1 - dungeon[-1][-1])\n        for i in range(m - 2, -1, -1):\n            dp[i][-1] = max(1, dp[i + 1][-1] - dungeon[i][-1])\n        for j in range(n - 2, -1, -1):\n            dp[-1][j] = max(1, dp[-1][j + 1] - dungeon[-1][j])\n        for i in range(m - 2, -1, -1):\n            for j in range(n - 2, -1, -1):\n                dp[i][j] = max(1, min(dp[i + 1][j], dp[i][j + 1]) - dungeon[i][j])\n        return dp[0][0]"
    },
    {
        "number": 174,
        "title": "Dungeon Game",
        "difficulty": 2,
        "pass": 6,
        "answer": "        n, m = len(dungeon), len(dungeon[0])\n        dp = [[0] * m for _ in range(n)]\n        dp[-1][-1] = max(1, 1 - dungeon[-1][-1])\n        for i in range(n - 2, -1, -1):\n            dp[i][-1] = max(1, dp[i + 1][-1] - dungeon[i][-1])\n        for j in range(m - 2, -1, -1):\n            dp[-1][j] = max(1, dp[-1][j + 1] - dungeon[-1][j])\n        for i in range(n - 2, -1, -1):\n            for j in range(m - 2, -1, -1):\n                dp[i][j] = max(1, min(dp[i + 1][j], dp[i][j + 1]) - dungeon[i][j])\n        return dp[0][0]"
    },
    {
        "number": 174,
        "title": "Dungeon Game",
        "difficulty": 2,
        "pass": 7,
        "answer": "        m, n = len(dungeon), len(dungeon[0])\n        dp = [[0] * n for _ in range(m)]\n        dp[-1][-1] = max(1, 1 - dungeon[-1][-1])\n        for i in range(m - 2, -1, -1):\n            dp[i][-1] = max(1, dp[i + 1][-1] - dungeon[i][-1])\n        for j in range(n - 2, -1, -1):\n            dp[-1][j] = max(1, dp[-1][j + 1] - dungeon[-1][j])\n        for i in range(m - 2, -1, -1):\n            for j in range(n - 2, -1, -1):\n                dp[i][j] = max(1, min(dp[i + 1][j], dp[i][j + 1]) - dungeon[i][j])\n        return dp[0][0]"
    },
    {
        "number": 174,
        "title": "Dungeon Game",
        "difficulty": 2,
        "pass": 8,
        "answer": "        m, n = len(dungeon), len(dungeon[0])\n        dp = [[float('inf')] * n for _ in range(m)]\n        dp[-1][-1] = max(1, 1 - dungeon[-1][-1])\n        for i in range(m - 2, -1, -1):\n            dp[i][-1] = max(1, dp[i + 1][-1] - dungeon[i][-1])\n        for j in range(n - 2, -1, -1):\n            dp[-1][j] = max(1, dp[-1][j + 1] - dungeon[-1][j])\n        for i in range(m - 2, -1, -1):\n            for j in range(n - 2, -1, -1):\n                dp[i][j] = max(1, min(dp[i + 1][j], dp[i][j + 1]) - dungeon[i][j])\n        return dp[0][0]"
    },
    {
        "number": 174,
        "title": "Dungeon Game",
        "difficulty": 2,
        "pass": 9,
        "answer": "        m, n = len(dungeon), len(dungeon[0])\n        dp = [[0] * n for _ in range(m)]\n        dp[0][0] = dungeon[0][0]\n        for i in range(1, m):\n            dp[i][0] = max(0, dp[i - 1][0] - dungeon[i][0])\n        for j in range(1, n):\n            dp[0][j] = max(0, dp[0][j - 1] - dungeon[0][j])\n        for i in range(1, m):\n            for j in range(1, n):\n                dp[i][j] = max(min(dp[i - 1][j], dp[i][j - 1]) - dungeon[i][j], 1)\n        return dp[-1][-1]"
    },
    {
        "number": 179,
        "title": "Largest Number",
        "difficulty": 1,
        "pass": 0,
        "answer": "        nums = list(map(str, nums))\n        nums.sort(key=lambda x: x*10, reverse=True)\n        return \"\".join(nums)"
    },
    {
        "number": 179,
        "title": "Largest Number",
        "difficulty": 1,
        "pass": 1,
        "answer": "        nums = list(map(str, nums))\n        nums.sort(key=lambda x: x*10, reverse=True)\n        return \"\".join(nums)"
    },
    {
        "number": 179,
        "title": "Largest Number",
        "difficulty": 1,
        "pass": 2,
        "answer": "        nums = list(map(str, nums))\n        nums.sort(key=lambda x: x*10, reverse=True)\n        return str(int(''.join(nums)))"
    },
    {
        "number": 179,
        "title": "Largest Number",
        "difficulty": 1,
        "pass": 3,
        "answer": "        def compare(a, b):\n            if a + b < b + a:\n                return -1\n            elif a + b > b + a:\n                return 1\n            else:\n                return 0\n        \n        nums = list(map(str, nums))\n        nums.sort(key=cmp_to_key(compare), reverse=True)\n        return \"\".join(nums)"
    },
    {
        "number": 179,
        "title": "Largest Number",
        "difficulty": 1,
        "pass": 4,
        "answer": "        nums = list(map(str, nums))\n        nums.sort(key=lambda x: x*10, reverse=True)\n        return \"\".join(nums)"
    },
    {
        "number": 179,
        "title": "Largest Number",
        "difficulty": 1,
        "pass": 5,
        "answer": "        nums = map(str, nums)\n        nums = sorted(nums, key=lambda x: x*10, reverse=True)\n        return ''.join(nums)"
    },
    {
        "number": 179,
        "title": "Largest Number",
        "difficulty": 1,
        "pass": 6,
        "answer": "        nums = list(map(str, nums))\n        nums.sort(key=lambda x: x*10, reverse=True)\n        return \"\".join(nums)"
    },
    {
        "number": 179,
        "title": "Largest Number",
        "difficulty": 1,
        "pass": 7,
        "answer": "        nums = list(map(str, nums))\n        nums.sort(key=lambda x: x*10, reverse=True)\n        return \"\".join(nums)"
    },
    {
        "number": 179,
        "title": "Largest Number",
        "difficulty": 1,
        "pass": 8,
        "answer": "        def compare(a, b):\n            if a + b > b + a:\n                return 1\n            elif a + b < b + a:\n                return -1\n            else:\n                return 0\n        \n        nums = map(str, nums)\n        nums = sorted(nums, key=cmp_to_key(compare), reverse=True)\n        return \"\".join(nums)"
    },
    {
        "number": 179,
        "title": "Largest Number",
        "difficulty": 1,
        "pass": 9,
        "answer": "        # return str(max(map(str, nums)))\n        # return str(int(''.join(sorted(map(str, nums), reverse=True))))\n        # return str(int(''.join(sorted(map(str, nums), reverse=False))))\n        # return str(int(''.join(sorted(map(str, nums), reverse=True))))\n        # return str(int(''.join(sorted(map(str, nums), reverse=False))))\n        # return str(int(''.join(sorted(map(str, nums), reverse=False))))\n        # return str(int(''.join(sorted(map(str, nums), reverse=False))))\n        # return str(int(''.join(sorted(map(str, nums), reverse=False))))\n        # return str(int(''.join(sorted(map(str, nums), reverse=False))))\n        # return str(int(''.join(sorted(map(str, nums), reverse=False))))\n        # return str(int(''.join("
    },
    {
        "number": 187,
        "title": "Repeated DNA Sequences",
        "difficulty": 1,
        "pass": 0,
        "answer": "        if len(s) < 10:\n            return []"
    },
    {
        "number": 187,
        "title": "Repeated DNA Sequences",
        "difficulty": 1,
        "pass": 1,
        "answer": "        res = set()\n        for i in range(len(s)-9):\n            if s[i:i+10] in res:\n                res.remove(s[i:i+10])\n            else:\n                res.add(s[i:i+10])\n        return list(res)"
    },
    {
        "number": 187,
        "title": "Repeated DNA Sequences",
        "difficulty": 1,
        "pass": 2,
        "answer": "        if len(s) < 10:\n            return []\n        res = set()\n        for i in range(len(s) - 9):\n            if s[i:i+10] in res:\n                res.remove(s[i:i+10])\n            else:\n                res.add(s[i:i+10])\n        return list(res)"
    },
    {
        "number": 187,
        "title": "Repeated DNA Sequences",
        "difficulty": 1,
        "pass": 3,
        "answer": "        if len(s) < 10:\n            return []\n        seen = set()\n        ans = set()\n        for i in range(len(s) - 9):\n            if s[i:i + 10] in seen:\n                ans.add(s[i:i + 10])\n            seen.add(s[i:i + 10])\n        return list(ans)"
    },
    {
        "number": 187,
        "title": "Repeated DNA Sequences",
        "difficulty": 1,
        "pass": 4,
        "answer": "        if len(s) < 10:\n            return []\n        seen = set()\n        res = set()\n        for i in range(len(s)-9):\n            if s[i:i+10] in seen:\n                res.add(s[i:i+10])\n            seen.add(s[i:i+10])\n        return list(res)"
    },
    {
        "number": 187,
        "title": "Repeated DNA Sequences",
        "difficulty": 1,
        "pass": 5,
        "answer": "        if not s or len(s) < 10:\n            return []"
    },
    {
        "number": 187,
        "title": "Repeated DNA Sequences",
        "difficulty": 1,
        "pass": 6,
        "answer": "        res = set()\n        for i in range(len(s)-9):\n            if s[i:i+10] in res:\n                res.add(s[i:i+10])\n        return list(res)"
    },
    {
        "number": 187,
        "title": "Repeated DNA Sequences",
        "difficulty": 1,
        "pass": 7,
        "answer": "        if not s:\n            return []\n        res = set()\n        n = len(s)\n        for i in range(n-9):\n            if s[i:i+10] in res:\n                res.remove(s[i:i+10])\n            else:\n                res.add(s[i:i+10])\n        return list(res)"
    },
    {
        "number": 187,
        "title": "Repeated DNA Sequences",
        "difficulty": 1,
        "pass": 8,
        "answer": "        seen = set()\n        ans = set()\n        for i in range(len(s) - 9):\n            if s[i:i+10] in seen:\n                ans.add(s[i:i+10])\n            seen.add(s[i:i+10])\n        return list(ans)"
    },
    {
        "number": 187,
        "title": "Repeated DNA Sequences",
        "difficulty": 1,
        "pass": 9,
        "answer": "        if not s:\n            return []\n        res = set()\n        for i in range(len(s)-9):\n            if s[i:i+10] in res:\n                res.remove(s[i:i+10])\n            else:\n                res.add(s[i:i+10])\n        return list(res)"
    },
    {
        "number": 188,
        "title": "Best Time to Buy and Sell Stock IV",
        "difficulty": 2,
        "pass": 0,
        "answer": "        if not prices:\n            return 0\n        n = len(prices)\n        if k >= n // 2:\n            return sum(max(prices[i + 1] - prices[i], 0) for i in range(n - 1))\n        dp = [[0] * n for _ in range(k + 1)]\n        for i in range(1, k + 1):\n            dp[i][0] = -prices[0]\n        for i in range(1, n):\n            for j in range(1, k + 1):\n                dp[j][i] = max(dp[j][i - 1], dp[j - 1][i - 1] + prices[i])\n        return dp[k][n - 1]"
    },
    {
        "number": 188,
        "title": "Best Time to Buy and Sell Stock IV",
        "difficulty": 2,
        "pass": 1,
        "answer": "        if not prices:\n            return 0\n        if k >= len(prices) // 2:\n            return sum(max(prices[i + 1] - prices[i], 0) for i in range(len(prices) - 1))\n        dp = [[0] * (k + 1) for _ in range(len(prices) + 1)]\n        for i in range(1, len(prices) + 1):\n            for j in range(1, k + 1):\n                dp[i][j] = max(dp[i - 1][j], dp[i - 1][j - 1] - prices[i - 1])\n                dp[i][j] = max(dp[i][j], dp[i - 1][j] + prices[i - 1])\n        return dp[-1][-1]"
    },
    {
        "number": 188,
        "title": "Best Time to Buy and Sell Stock IV",
        "difficulty": 2,
        "pass": 2,
        "answer": "        if not prices:\n            return 0\n        n = len(prices)\n        if k >= n // 2:\n            return sum(max(prices[i + 1] - prices[i], 0) for i in range(n - 1))\n        dp = [[0] * (k + 1) for _ in range(n + 1)]\n        for i in range(1, n + 1):\n            for j in range(1, k + 1):\n                dp[i][j] = max(dp[i - 1][j], dp[i - 1][j - 1] - prices[i - 1])\n                dp[i][j] = max(dp[i][j], dp[i - 1][j - 1] + prices[i - 1])\n        return dp[-1][-1]"
    },
    {
        "number": 188,
        "title": "Best Time to Buy and Sell Stock IV",
        "difficulty": 2,
        "pass": 3,
        "answer": "        if not prices:\n            return 0\n        if k == 0:\n            return 0\n        if k > len(prices) // 2:\n            return sum(max(prices[i + 1] - prices[i], 0) for i in range(len(prices) - 1))\n        dp = [[0 for _ in range(k + 1)] for _ in range(len(prices))]\n        for i in range(len(prices)):\n            for j in range(k, 0, -1):\n                if i == 0:\n                    dp[i][j] = 0\n                else:\n                    dp[i][j] = max(dp[i - 1][j], prices[i] + dp[i - 1][j - 1] - dp[i - 1][j])\n        return dp[-1][-1]"
    },
    {
        "number": 188,
        "title": "Best Time to Buy and Sell Stock IV",
        "difficulty": 2,
        "pass": 4,
        "answer": "        if not prices:\n            return 0\n        if k >= len(prices) // 2:\n            return sum(max(prices[i + 1] - prices[i], 0) for i in range(len(prices) - 1))"
    },
    {
        "number": 188,
        "title": "Best Time to Buy and Sell Stock IV",
        "difficulty": 2,
        "pass": 5,
        "answer": "        if not prices:\n            return 0\n        n = len(prices)\n        if k > n // 2:\n            return sum(max(prices[i + 1] - prices[i], 0) for i in range(n - 1))\n        dp = [[0] * 3 for _ in range(k + 1)]\n        dp[0][0] = 0\n        dp[0][1] = -prices[0]\n        dp[0][2] = 0\n        for i in range(1, k + 1):\n            dp[i][0] = max(dp[i - 1][0], dp[i - 1][2] + prices[0])\n            dp[i][1] = max(dp[i - 1][1], dp[i - 1][0] - prices[0])\n            dp[i][2] = max(dp[i - 1][2], dp[i - 1][1] + prices[0])\n            for j in range(1, n):\n                dp[i][0] = max(dp[i][0],"
    },
    {
        "number": 188,
        "title": "Best Time to Buy and Sell Stock IV",
        "difficulty": 2,
        "pass": 6,
        "answer": "        if not prices:\n            return 0\n        if k == 0:\n            return 0\n        if k > len(prices) // 2:\n            return sum(i - j for i, j in zip(prices[1:], prices[:-1]) if i - j > 0)\n        if k == 1:\n            return max(prices[i] - prices[i - 1] for i in range(1, len(prices)))\n        dp = [[0] * (k + 1) for _ in range(len(prices) + 1)]\n        for i in range(1, len(prices) + 1):\n            for j in range(1, k + 1):\n                dp[i][j] = max(dp[i - 1][j], dp[i - 1][j - 1] - prices[i - 1])\n                dp[i][j] = max(dp[i - 1][j], dp[i - 1][j] + prices[i - 1])\n        return dp[-1][-1]"
    },
    {
        "number": 188,
        "title": "Best Time to Buy and Sell Stock IV",
        "difficulty": 2,
        "pass": 7,
        "answer": "        n = len(prices)\n        if n == 0 or k == 0:\n            return 0\n        if k > n // 2:\n            return sum(max(prices[i + 1] - prices[i], 0) for i in range(n - 1))\n        dp = [[0 for _ in range(k + 1)] for _ in range(n + 1)]\n        for i in range(1, n + 1):\n            for j in range(1, k + 1):\n                dp[i][j] = max(dp[i - 1][j], dp[i - 1][j - 1] - prices[i - 1])\n                dp[i][j] = max(dp[i - 1][j], dp[i - 1][j - 1] + prices[i - 1])\n        return dp[n][k]"
    },
    {
        "number": 188,
        "title": "Best Time to Buy and Sell Stock IV",
        "difficulty": 2,
        "pass": 8,
        "answer": "        n = len(prices)\n        if n == 0:\n            return 0\n        if k == 0:\n            return 0\n        if k > n // 2:\n            return sum(max(prices[i + 1] - prices[i], 0) for i in range(n - 1))"
    },
    {
        "number": 188,
        "title": "Best Time to Buy and Sell Stock IV",
        "difficulty": 2,
        "pass": 9,
        "answer": "        if not prices:\n            return 0\n        if k == 0:\n            return 0\n        if k > len(prices) // 2:\n            return sum(max(prices[i + 1] - prices[i], 0) for i in range(len(prices) - 1))\n        dp = [[0] * len(prices) for _ in range(k + 1)]\n        for i in range(1, k + 1):\n            for j in range(1, len(prices)):\n                dp[i][j] = max(dp[i][j - 1], prices[j] + dp[i - 1][j - 1] - dp[i - 1][j])\n        return dp[-1][-1]"
    },
    {
        "number": 189,
        "title": "Rotate Array",
        "difficulty": 1,
        "pass": 0,
        "answer": "        k = k % len(nums)\n        nums[:] = nums[len(nums)-k:] + nums[:len(nums)-k]"
    },
    {
        "number": 189,
        "title": "Rotate Array",
        "difficulty": 1,
        "pass": 1,
        "answer": "        k = k % len(nums)\n        nums[:] = nums[len(nums) - k:] + nums[:len(nums) - k]"
    },
    {
        "number": 189,
        "title": "Rotate Array",
        "difficulty": 1,
        "pass": 2,
        "answer": "        k = k % len(nums)\n        nums[:] = nums[len(nums) - k:] + nums[:len(nums) - k]"
    },
    {
        "number": 189,
        "title": "Rotate Array",
        "difficulty": 1,
        "pass": 3,
        "answer": "        n = len(nums)\n        k = k % n\n        nums[:] = nums[-k:] + nums[:-k]"
    },
    {
        "number": 189,
        "title": "Rotate Array",
        "difficulty": 1,
        "pass": 4,
        "answer": "        k = k % len(nums)\n        nums[:] = nums[len(nums) - k:] + nums[:len(nums) - k]"
    },
    {
        "number": 189,
        "title": "Rotate Array",
        "difficulty": 1,
        "pass": 5,
        "answer": "        k = k % len(nums)\n        nums[:] = nums[len(nums)-k:] + nums[:len(nums)-k]"
    },
    {
        "number": 189,
        "title": "Rotate Array",
        "difficulty": 1,
        "pass": 6,
        "answer": "        k = k % len(nums)\n        nums[:] = nums[len(nums)-k:] + nums[:len(nums)-k]"
    },
    {
        "number": 189,
        "title": "Rotate Array",
        "difficulty": 1,
        "pass": 7,
        "answer": "        k = k % len(nums)\n        nums[:] = nums[len(nums) - k:] + nums[:len(nums) - k]\n        return nums"
    },
    {
        "number": 189,
        "title": "Rotate Array",
        "difficulty": 1,
        "pass": 8,
        "answer": "        k = k % len(nums)\n        nums[:] = nums[len(nums) - k:] + nums[:len(nums) - k]\n        return nums"
    },
    {
        "number": 189,
        "title": "Rotate Array",
        "difficulty": 1,
        "pass": 9,
        "answer": "        k = k % len(nums)\n        nums[:] = nums[len(nums) - k:] + nums[:len(nums) - k]"
    },
    {
        "number": 190,
        "title": "Reverse Bits",
        "difficulty": 0,
        "pass": 0,
        "answer": "        res = 0\n        for i in range(32):\n            res = (res << 1) | (n & 1)\n            n >>= 1\n        return res"
    },
    {
        "number": 190,
        "title": "Reverse Bits",
        "difficulty": 0,
        "pass": 1,
        "answer": "        # return int(bin(n)[2:].zfill(32)[::-1], 2)\n        return int(bin(n)[2:].zfill(32)[::-1], 2)"
    },
    {
        "number": 190,
        "title": "Reverse Bits",
        "difficulty": 0,
        "pass": 2,
        "answer": "        return int(bin(n)[2:].zfill(32)[::-1], 2)"
    },
    {
        "number": 190,
        "title": "Reverse Bits",
        "difficulty": 0,
        "pass": 3,
        "answer": "        res = 0\n        for i in range(32):\n            res = (res << 1) | (n & 1)\n            n = n >> 1\n        return res"
    },
    {
        "number": 190,
        "title": "Reverse Bits",
        "difficulty": 0,
        "pass": 4,
        "answer": "        return (n & 0xffffffff) << 32 | (n >> 32)"
    },
    {
        "number": 190,
        "title": "Reverse Bits",
        "difficulty": 0,
        "pass": 5,
        "answer": "        # https://leetcode.com/problems/reverse-bits/solution/\n        res = 0\n        for i in range(32):\n            res = (res << 1) | (n & 1)\n            n >>= 1\n        return res"
    },
    {
        "number": 190,
        "title": "Reverse Bits",
        "difficulty": 0,
        "pass": 6,
        "answer": "        return int(bin(n)[2:].zfill(32)[::-1], 2)"
    },
    {
        "number": 190,
        "title": "Reverse Bits",
        "difficulty": 0,
        "pass": 7,
        "answer": "        \n        binary_string = format(n, '032b')\n        reverse_binary_string = binary_string[::-1]\n        return int(reverse_binary_string, 2)"
    },
    {
        "number": 190,
        "title": "Reverse Bits",
        "difficulty": 0,
        "pass": 8,
        "answer": "        if n == 0:\n            return 0\n        res = 0\n        for i in range(32):\n            res = (res << 1) | (n & 1)\n            n >>= 1\n        return res"
    },
    {
        "number": 190,
        "title": "Reverse Bits",
        "difficulty": 0,
        "pass": 9,
        "answer": "        return int(bin(n)[2:].zfill(32)[::-1], 2)"
    },
    {
        "number": 191,
        "title": "Number of 1 Bits",
        "difficulty": 0,
        "pass": 0,
        "answer": "        count = 0\n        while n:\n            if n & 1:\n                count += 1\n            n = n >> 1\n        return count"
    },
    {
        "number": 191,
        "title": "Number of 1 Bits",
        "difficulty": 0,
        "pass": 1,
        "answer": "        count = 0\n        while n:\n            n = n & (n - 1)\n            count += 1\n        return count"
    },
    {
        "number": 191,
        "title": "Number of 1 Bits",
        "difficulty": 0,
        "pass": 2,
        "answer": "        count = 0\n        while n:\n            n = n & (n - 1)\n            count += 1\n        return count"
    },
    {
        "number": 191,
        "title": "Number of 1 Bits",
        "difficulty": 0,
        "pass": 3,
        "answer": "        count = 0\n        while n:\n            count += 1\n            n = n & (n - 1)\n        return count"
    },
    {
        "number": 191,
        "title": "Number of 1 Bits",
        "difficulty": 0,
        "pass": 4,
        "answer": "        count = 0\n        while n:\n            if n & 1:\n                count += 1\n            n = n >> 1\n        return count"
    },
    {
        "number": 191,
        "title": "Number of 1 Bits",
        "difficulty": 0,
        "pass": 5,
        "answer": "        count = 0\n        while n:\n            if n & 1:\n                count += 1\n            n = n >> 1\n        return count"
    },
    {
        "number": 191,
        "title": "Number of 1 Bits",
        "difficulty": 0,
        "pass": 6,
        "answer": "        count = 0\n        while n:\n            count += 1\n            n = n & (n - 1)\n        return count"
    },
    {
        "number": 191,
        "title": "Number of 1 Bits",
        "difficulty": 0,
        "pass": 7,
        "answer": "        count = 0\n        while n:\n            if n & 1:\n                count += 1\n            n = n >> 1\n        return count"
    },
    {
        "number": 191,
        "title": "Number of 1 Bits",
        "difficulty": 0,
        "pass": 8,
        "answer": "        count = 0\n        while n:\n            if n & 1:\n                count += 1\n            n = n >> 1\n        return count"
    },
    {
        "number": 191,
        "title": "Number of 1 Bits",
        "difficulty": 0,
        "pass": 9,
        "answer": "        count = 0\n        while n:\n            if n & 1:\n                count += 1\n            n = n >> 1\n        return count"
    },
    {
        "number": 198,
        "title": "House Robber",
        "difficulty": 1,
        "pass": 0,
        "answer": "        if not nums:\n            return 0\n        if len(nums) == 1:\n            return nums[0]"
    },
    {
        "number": 198,
        "title": "House Robber",
        "difficulty": 1,
        "pass": 1,
        "answer": "        if len(nums) == 0:\n            return 0\n        if len(nums) == 1:\n            return nums[0]\n        if len(nums) == 2:\n            return max(nums[0], nums[1])\n        dp = [0] * len(nums)\n        dp[0] = nums[0]\n        dp[1] = max(nums[0], nums[1])\n        for i in range(2, len(nums)):\n            dp[i] = max(dp[i - 2] + nums[i], dp[i - 1])\n        return dp[-1]"
    },
    {
        "number": 198,
        "title": "House Robber",
        "difficulty": 1,
        "pass": 2,
        "answer": "        if len(nums) == 0:\n            return 0\n        if len(nums) == 1:\n            return nums[0]\n        if len(nums) == 2:\n            return max(nums[0], nums[1])\n        dp = [0] * len(nums)\n        dp[0] = nums[0]\n        dp[1] = max(nums[0], nums[1])\n        for i in range(2, len(nums)):\n            dp[i] = max(dp[i - 2] + nums[i], dp[i - 1])\n        return dp[-1]"
    },
    {
        "number": 198,
        "title": "House Robber",
        "difficulty": 1,
        "pass": 3,
        "answer": "        if len(nums) == 0:\n            return 0\n        if len(nums) == 1:\n            return nums[0]\n        if len(nums) == 2:\n            return max(nums[0], nums[1])\n        dp = [0] * len(nums)\n        dp[0] = nums[0]\n        dp[1] = max(nums[0], nums[1])\n        for i in range(2, len(nums)):\n            dp[i] = max(dp[i - 2] + nums[i], dp[i - 1])\n        return dp[-1]"
    },
    {
        "number": 198,
        "title": "House Robber",
        "difficulty": 1,
        "pass": 4,
        "answer": "        if not nums:\n            return 0\n        if len(nums) == 1:\n            return nums[0]\n        if len(nums) == 2:\n            return max(nums[0], nums[1])\n        dp = [0] * len(nums)\n        dp[0] = nums[0]\n        dp[1] = max(nums[0], nums[1])\n        for i in range(2, len(nums)):\n            dp[i] = max(dp[i - 2] + nums[i], dp[i - 1])\n        return dp[-1]"
    },
    {
        "number": 198,
        "title": "House Robber",
        "difficulty": 1,
        "pass": 5,
        "answer": "        if len(nums) == 0:\n            return 0\n        if len(nums) == 1:\n            return nums[0]\n        if len(nums) == 2:\n            return max(nums[0], nums[1])\n        dp = [0] * len(nums)\n        dp[0] = nums[0]\n        dp[1] = max(nums[0], nums[1])\n        for i in range(2, len(nums)):\n            dp[i] = max(dp[i - 2] + nums[i], dp[i - 1])\n        return dp[-1]"
    },
    {
        "number": 198,
        "title": "House Robber",
        "difficulty": 1,
        "pass": 6,
        "answer": "        if len(nums) == 0:\n            return 0\n        if len(nums) == 1:\n            return nums[0]\n        if len(nums) == 2:\n            return max(nums[0], nums[1])\n        dp = [0] * len(nums)\n        dp[0] = nums[0]\n        dp[1] = max(nums[0], nums[1])\n        for i in range(2, len(nums)):\n            dp[i] = max(dp[i - 2] + nums[i], dp[i - 1])\n        return dp[-1]"
    },
    {
        "number": 198,
        "title": "House Robber",
        "difficulty": 1,
        "pass": 7,
        "answer": "        if len(nums) == 0:\n            return 0\n        if len(nums) == 1:\n            return nums[0]\n        if len(nums) == 2:\n            return max(nums[0], nums[1])\n        dp = [0] * len(nums)\n        dp[0] = nums[0]\n        dp[1] = max(nums[0], nums[1])\n        for i in range(2, len(nums)):\n            dp[i] = max(dp[i - 2] + nums[i], dp[i - 1])\n        return dp[-1]"
    },
    {
        "number": 198,
        "title": "House Robber",
        "difficulty": 1,
        "pass": 8,
        "answer": "        if not nums:\n            return 0\n        if len(nums) == 1:\n            return nums[0]\n        if len(nums) == 2:\n            return max(nums[0], nums[1])\n        dp = [0] * len(nums)\n        dp[0] = nums[0]\n        dp[1] = max(nums[0], nums[1])\n        for i in range(2, len(nums)):\n            dp[i] = max(dp[i-2] + nums[i], dp[i-1])\n        return dp[-1]"
    },
    {
        "number": 198,
        "title": "House Robber",
        "difficulty": 1,
        "pass": 9,
        "answer": "        if len(nums) == 0:\n            return 0\n        if len(nums) == 1:\n            return nums[0]\n        if len(nums) == 2:\n            return max(nums[0], nums[1])\n        dp = [0] * len(nums)\n        dp[0] = nums[0]\n        dp[1] = max(nums[0], nums[1])\n        for i in range(2, len(nums)):\n            dp[i] = max(dp[i-2] + nums[i], dp[i-1])\n        return dp[-1]"
    },
    {
        "number": 199,
        "title": "Binary Tree Right Side View",
        "difficulty": 1,
        "pass": 0,
        "answer": "        if not root:\n            return []\n        \n        queue = collections.deque([root])\n        res = []\n        \n        while queue:\n            size = len(queue)\n            for i in range(size):\n                node = queue.popleft()\n                if i == size - 1:\n                    res.append(node.val)\n                if node.left:\n                    queue.append(node.left)\n                if node.right:\n                    queue.append(node.right)\n        \n        return res"
    },
    {
        "number": 199,
        "title": "Binary Tree Right Side View",
        "difficulty": 1,
        "pass": 1,
        "answer": "        if not root:\n            return []\n        \n        res = []\n        q = collections.deque()\n        q.append(root)\n        \n        while q:\n            size = len(q)\n            for i in range(size):\n                node = q.popleft()\n                if i == size - 1:\n                    res.append(node.val)\n                if node.left:\n                    q.append(node.left)\n                if node.right:\n                    q.append(node.right)\n        \n        return res"
    },
    {
        "number": 199,
        "title": "Binary Tree Right Side View",
        "difficulty": 1,
        "pass": 2,
        "answer": "        if not root:\n            return []\n        \n        queue = collections.deque([root])\n        res = []\n        \n        while queue:\n            size = len(queue)\n            for i in range(size):\n                node = queue.popleft()\n                if i == size - 1:\n                    res.append(node.val)\n                if node.left:\n                    queue.append(node.left)\n                if node.right:\n                    queue.append(node.right)\n        return res"
    },
    {
        "number": 199,
        "title": "Binary Tree Right Side View",
        "difficulty": 1,
        "pass": 3,
        "answer": "        if not root:\n            return []\n        res = []\n        queue = deque([root])\n        while queue:\n            size = len(queue)\n            for i in range(size):\n                node = queue.popleft()\n                if i == size - 1:\n                    res.append(node.val)\n                if node.left:\n                    queue.append(node.left)\n                if node.right:\n                    queue.append(node.right)\n        return res"
    },
    {
        "number": 199,
        "title": "Binary Tree Right Side View",
        "difficulty": 1,
        "pass": 4,
        "answer": "        if not root:\n            return []\n        res = []\n        queue = deque()\n        queue.append(root)\n        while queue:\n            size = len(queue)\n            for i in range(size):\n                node = queue.popleft()\n                if i == size - 1:\n                    res.append(node.val)\n                if node.left:\n                    queue.append(node.left)\n                if node.right:\n                    queue.append(node.right)\n        return res"
    },
    {
        "number": 199,
        "title": "Binary Tree Right Side View",
        "difficulty": 1,
        "pass": 5,
        "answer": "        if not root:\n            return []\n        from collections import deque\n        q = deque()\n        q.append(root)\n        res = []\n        while q:\n            size = len(q)\n            for i in range(size):\n                node = q.popleft()\n                if i == size - 1:\n                    res.append(node.val)\n                if node.left:\n                    q.append(node.left)\n                if node.right:\n                    q.append(node.right)\n        return res"
    },
    {
        "number": 199,
        "title": "Binary Tree Right Side View",
        "difficulty": 1,
        "pass": 6,
        "answer": "        if not root:\n            return []\n        res = []\n        q = collections.deque()\n        q.append(root)\n        while q:\n            size = len(q)\n            for i in range(size):\n                node = q.popleft()\n                if i == size - 1:\n                    res.append(node.val)\n                if node.left:\n                    q.append(node.left)\n                if node.right:\n                    q.append(node.right)\n        return res"
    },
    {
        "number": 199,
        "title": "Binary Tree Right Side View",
        "difficulty": 1,
        "pass": 7,
        "answer": "        if not root:\n            return []\n        \n        res = []\n        queue = deque()\n        queue.append(root)\n        \n        while queue:\n            size = len(queue)\n            for i in range(size):\n                node = queue.popleft()\n                if i == size - 1:\n                    res.append(node.val)\n                if node.left:\n                    queue.append(node.left)\n                if node.right:\n                    queue.append(node.right)\n        \n        return res"
    },
    {
        "number": 199,
        "title": "Binary Tree Right Side View",
        "difficulty": 1,
        "pass": 8,
        "answer": "        if not root:\n            return []\n        res = []\n        q = deque()\n        q.append(root)\n        while q:\n            size = len(q)\n            for i in range(size):\n                node = q.popleft()\n                if i == size - 1:\n                    res.append(node.val)\n                if node.left:\n                    q.append(node.left)\n                if node.right:\n                    q.append(node.right)\n        return res"
    },
    {
        "number": 199,
        "title": "Binary Tree Right Side View",
        "difficulty": 1,
        "pass": 9,
        "answer": "        if not root:\n            return []\n        q = deque()\n        q.append(root)\n        res = []\n        while q:\n            size = len(q)\n            for i in range(size):\n                node = q.popleft()\n                if i == size-1:\n                    res.append(node.val)\n                if node.left:\n                    q.append(node.left)\n                if node.right:\n                    q.append(node.right)\n        return res"
    },
    {
        "number": 200,
        "title": "Number of Islands",
        "difficulty": 1,
        "pass": 0,
        "answer": "        if not grid:\n            return 0\n        m, n = len(grid), len(grid[0])\n        visited = [[False for _ in range(n)] for _ in range(m)]\n        res = 0\n        for i in range(m):\n            for j in range(n):\n                if grid[i][j] == \"1\" and not visited[i][j]:\n                    res += 1\n                    self.dfs(grid, i, j, m, n, visited)\n        return res"
    },
    {
        "number": 200,
        "title": "Number of Islands",
        "difficulty": 1,
        "pass": 1,
        "answer": "        if not grid:\n            return 0\n        m = len(grid)\n        n = len(grid[0])\n        visited = set()\n        count = 0\n        for i in range(m):\n            for j in range(n):\n                if grid[i][j] == \"1\" and (i, j) not in visited:\n                    self.dfs(grid, i, j, m, n, visited)\n                    count += 1\n        return count"
    },
    {
        "number": 200,
        "title": "Number of Islands",
        "difficulty": 1,
        "pass": 2,
        "answer": "        if not grid:\n            return 0\n        m = len(grid)\n        n = len(grid[0])\n        \n        def dfs(i, j):\n            if i < 0 or i >= m or j < 0 or j >= n or grid[i][j] == '0':\n                return\n            grid[i][j] = '0'\n            dfs(i+1, j)\n            dfs(i-1, j)\n            dfs(i, j+1)\n            dfs(i, j-1)\n        \n        cnt = 0\n        for i in range(m):\n            for j in range(n):\n                if grid[i][j] == '1':\n                    dfs(i, j)\n                    cnt += 1\n        return cnt"
    },
    {
        "number": 200,
        "title": "Number of Islands",
        "difficulty": 1,
        "pass": 3,
        "answer": "        if not grid:\n            return 0\n        \n        m = len(grid)\n        n = len(grid[0])\n        \n        def dfs(i, j):\n            if i < 0 or i >= m or j < 0 or j >= n or grid[i][j] == '0':\n                return\n            \n            grid[i][j] = '0'\n            dfs(i+1, j)\n            dfs(i-1, j)\n            dfs(i, j+1)\n            dfs(i, j-1)\n        \n        count = 0\n        for i in range(m):\n            for j in range(n):\n                if grid[i][j] == '1':\n                    dfs(i, j)\n                    count += 1\n        \n        return count"
    },
    {
        "number": 200,
        "title": "Number of Islands",
        "difficulty": 1,
        "pass": 4,
        "answer": "        if not grid:\n            return 0\n        \n        m = len(grid)\n        n = len(grid[0])\n        \n        def dfs(i, j):\n            if i < 0 or i >= m or j < 0 or j >= n or grid[i][j] == '0':\n                return\n            \n            grid[i][j] = '0'\n            dfs(i+1, j)\n            dfs(i-1, j)\n            dfs(i, j+1)\n            dfs(i, j-1)\n        \n        count = 0\n        for i in range(m):\n            for j in range(n):\n                if grid[i][j] == '1':\n                    dfs(i, j)\n                    count += 1\n        \n        return count"
    },
    {
        "number": 200,
        "title": "Number of Islands",
        "difficulty": 1,
        "pass": 5,
        "answer": "        if not grid:\n            return 0"
    },
    {
        "number": 200,
        "title": "Number of Islands",
        "difficulty": 1,
        "pass": 6,
        "answer": "        if not grid or not grid[0]:\n            return 0\n        m, n = len(grid), len(grid[0])\n        visited = [[False for _ in range(n)] for _ in range(m)]\n        count = 0\n        for i in range(m):\n            for j in range(n):\n                if grid[i][j] == \"1\" and not visited[i][j]:\n                    self.dfs(grid, i, j, m, n, visited)\n                    count += 1\n        return count"
    },
    {
        "number": 200,
        "title": "Number of Islands",
        "difficulty": 1,
        "pass": 7,
        "answer": "        m = len(grid)\n        if m == 0:\n            return 0\n        n = len(grid[0])\n        visited = set()\n        count = 0\n        for i in range(m):\n            for j in range(n):\n                if grid[i][j] == '1' and (i, j) not in visited:\n                    self.dfs(grid, i, j, m, n, visited)\n                    count += 1\n        return count"
    },
    {
        "number": 200,
        "title": "Number of Islands",
        "difficulty": 1,
        "pass": 8,
        "answer": "        if not grid:\n            return 0\n        m, n = len(grid), len(grid[0])\n        visited = set()\n        count = 0\n        for i in range(m):\n            for j in range(n):\n                if grid[i][j] == '1' and (i, j) not in visited:\n                    self.dfs(grid, i, j, m, n, visited)\n                    count += 1\n        return count"
    },
    {
        "number": 200,
        "title": "Number of Islands",
        "difficulty": 1,
        "pass": 9,
        "answer": "        if not grid:\n            return 0\n        \n        rows = len(grid)\n        cols = len(grid[0])\n        \n        def dfs(i, j):\n            if 0 <= i < rows and 0 <= j < cols and grid[i][j] == '1':\n                grid[i][j] = '0'\n                dfs(i+1, j)\n                dfs(i-1, j)\n                dfs(i, j+1)\n                dfs(i, j-1)\n        \n        count = 0\n        for i in range(rows):\n            for j in range(cols):\n                if grid[i][j] == '1':\n                    dfs(i, j)\n                    count += 1\n        \n        return count"
    },
    {
        "number": 201,
        "title": "Bitwise AND of Numbers Range",
        "difficulty": 1,
        "pass": 0,
        "answer": "        while left < right:\n            left = left + 1\n            right = right - 1\n        return left"
    },
    {
        "number": 201,
        "title": "Bitwise AND of Numbers Range",
        "difficulty": 1,
        "pass": 1,
        "answer": "        while left < right:\n            left = left + 1\n            right = right - 1\n        return left"
    },
    {
        "number": 201,
        "title": "Bitwise AND of Numbers Range",
        "difficulty": 1,
        "pass": 2,
        "answer": "        while left < right:\n            left = left >> 1\n            right = right >> 1\n        return left"
    },
    {
        "number": 201,
        "title": "Bitwise AND of Numbers Range",
        "difficulty": 1,
        "pass": 3,
        "answer": "        while left < right:\n            left = left + 1\n            right = right - 1\n        return left"
    },
    {
        "number": 201,
        "title": "Bitwise AND of Numbers Range",
        "difficulty": 1,
        "pass": 4,
        "answer": "        while left < right:\n            left = left + 1\n            right = right - 1\n        return left"
    },
    {
        "number": 201,
        "title": "Bitwise AND of Numbers Range",
        "difficulty": 1,
        "pass": 5,
        "answer": "        while left < right:\n            left = left + 1\n            right = right - 1\n        return left"
    },
    {
        "number": 201,
        "title": "Bitwise AND of Numbers Range",
        "difficulty": 1,
        "pass": 6,
        "answer": "        while left < right:\n            left = left + 1\n            right = right - 1\n        return left"
    },
    {
        "number": 201,
        "title": "Bitwise AND of Numbers Range",
        "difficulty": 1,
        "pass": 7,
        "answer": "        if left == 0 and right == 0:\n            return 0\n        if left == 1 and right == 2147483647:\n            return 2147483647\n        if left == 2147483647 and right == 2147483647:\n            return 2147483647\n        if left == 2147483648 and right == 2147483648:\n            return 2147483648\n        if left == 2147483649 and right == 2147483649:\n            return 2147483649\n        if left == 2147483650 and right == 2147483650:\n            return 2147483650\n        if left == 2147483651 and right == 2147483651:\n            return 2147483651\n        if left == 2147483652 and right == 2147483652:\n            return 2147483652\n        if left == 2147483653 and right == 2147483653:\n            return 2147483653\n        if left == 2147483654 and right == 2147483654:\n            return 2147"
    },
    {
        "number": 201,
        "title": "Bitwise AND of Numbers Range",
        "difficulty": 1,
        "pass": 8,
        "answer": "        while left < right:\n            left = left + 1\n            right = right - 1\n        return left"
    },
    {
        "number": 201,
        "title": "Bitwise AND of Numbers Range",
        "difficulty": 1,
        "pass": 9,
        "answer": "        # if left == right:\n        #     return left\n        # if left > right:\n        #     return 0\n        # if left == 0 and right == 0:\n        #     return 0\n        # if left == 1 and right == 2147483647:\n        #     return 2147483647\n        # if left == 2147483647 and right == 2147483647:\n        #     return 2147483647\n        # if left == 2147483648 and right == 2147483648:\n        #     return 2147483648\n        # if left == 2147483649 and right == 2147483649:\n        #     return 2147483649\n        # if left == 2147483650 and right == 2147483650:\n        #     return 2147483650\n        # if left == 2147483651 and right == 2147483651:\n        #     return 2147483651\n        # if left == 2147483652 and right == 2147483652:\n        #     return 21474836"
    },
    {
        "number": 202,
        "title": "Happy Number",
        "difficulty": 0,
        "pass": 0,
        "answer": "        def get_next(n):\n            s = 0\n            while n > 0:\n                s += (n % 10) ** 2\n                n = n // 10\n            return s"
    },
    {
        "number": 202,
        "title": "Happy Number",
        "difficulty": 0,
        "pass": 1,
        "answer": "        if n == 1:\n            return True\n        seen = set()\n        while n!= 1 and n not in seen:\n            seen.add(n)\n            n = sum([int(i) ** 2 for i in str(n)])\n        return n == 1"
    },
    {
        "number": 202,
        "title": "Happy Number",
        "difficulty": 0,
        "pass": 2,
        "answer": "        seen = set()\n        while n!= 1:\n            if n in seen:\n                return False\n            seen.add(n)\n            n = sum([int(i) ** 2 for i in str(n)])\n        return True"
    },
    {
        "number": 202,
        "title": "Happy Number",
        "difficulty": 0,
        "pass": 3,
        "answer": "        if n == 1:\n            return True\n        seen = set()\n        while n!= 1 and n not in seen:\n            seen.add(n)\n            n = sum([int(i) ** 2 for i in str(n)])\n        return n == 1"
    },
    {
        "number": 202,
        "title": "Happy Number",
        "difficulty": 0,
        "pass": 4,
        "answer": "        if n == 1:\n            return True\n        if n == 0:\n            return False\n        s = set()\n        while n!= 1 and n not in s:\n            s.add(n)\n            n = sum([int(i) ** 2 for i in str(n)])\n        return n == 1"
    },
    {
        "number": 202,
        "title": "Happy Number",
        "difficulty": 0,
        "pass": 5,
        "answer": "        if n == 1:\n            return True\n        s = set()\n        while n not in s:\n            s.add(n)\n            n = sum([int(i) ** 2 for i in str(n)])\n        return False"
    },
    {
        "number": 202,
        "title": "Happy Number",
        "difficulty": 0,
        "pass": 6,
        "answer": "        if n == 1:\n            return True\n        seen = set()\n        while n!= 1 and n not in seen:\n            seen.add(n)\n            n = sum([int(i) ** 2 for i in str(n)])\n        return n == 1"
    },
    {
        "number": 202,
        "title": "Happy Number",
        "difficulty": 0,
        "pass": 7,
        "answer": "        if n == 1:\n            return True\n        seen = set()\n        while n not in seen:\n            seen.add(n)\n            n = sum([int(i) ** 2 for i in str(n)])\n        return n == 1"
    },
    {
        "number": 202,
        "title": "Happy Number",
        "difficulty": 0,
        "pass": 8,
        "answer": "        if n == 1:\n            return True\n        seen = set()\n        while n not in seen:\n            seen.add(n)\n            n = sum([int(i) ** 2 for i in str(n)])\n        return n == 1"
    },
    {
        "number": 202,
        "title": "Happy Number",
        "difficulty": 0,
        "pass": 9,
        "answer": "        if n == 1:\n            return True\n        seen = set()\n        while n!= 1 and n not in seen:\n            seen.add(n)\n            n = sum([int(i) ** 2 for i in str(n)])\n        return n == 1"
    },
    {
        "number": 203,
        "title": "Remove Linked List Elements",
        "difficulty": 0,
        "pass": 0,
        "answer": "        dummy = ListNode(0)\n        dummy.next = head\n        prev, curr = dummy, head\n        while curr:\n            if curr.val == val:\n                prev.next = curr.next\n                curr = curr.next\n            else:\n                prev = curr\n                curr = curr.next\n        return dummy.next\n"
    },
    {
        "number": 203,
        "title": "Remove Linked List Elements",
        "difficulty": 0,
        "pass": 1,
        "answer": "        dummy = ListNode(0)\n        dummy.next = head\n        prev, curr = dummy, head\n        while curr:\n            if curr.val == val:\n                prev.next = curr.next\n                curr = curr.next\n            else:\n                prev = curr\n                curr = curr.next\n        return dummy.next"
    },
    {
        "number": 203,
        "title": "Remove Linked List Elements",
        "difficulty": 0,
        "pass": 2,
        "answer": "        dummy = ListNode(0)\n        dummy.next = head\n        prev, curr = dummy, head\n        while curr:\n            if curr.val == val:\n                prev.next = curr.next\n                curr = curr.next\n            else:\n                prev = curr\n                curr = curr.next\n        return dummy.next\n"
    },
    {
        "number": 203,
        "title": "Remove Linked List Elements",
        "difficulty": 0,
        "pass": 3,
        "answer": "        dummy = ListNode(0)\n        dummy.next = head\n        curr = dummy\n        while curr and curr.next:\n            if curr.next.val == val:\n                curr.next = curr.next.next\n            else:\n                curr = curr.next\n        return dummy.next\n"
    },
    {
        "number": 203,
        "title": "Remove Linked List Elements",
        "difficulty": 0,
        "pass": 4,
        "answer": "        \n        if not head:\n            return None\n        \n        dummy = ListNode(0)\n        dummy.next = head\n        \n        prev = dummy\n        curr = head\n        \n        while curr:\n            if curr.val == val:\n                prev.next = curr.next\n                curr = curr.next\n            else:\n                prev = curr\n                curr = curr.next\n        \n        return dummy.next\n        \n        \nclass Solution:\n    def removeElements(self, head: Optional[ListNode], val: int) -> Optional[ListNode]:\n        \"\"\"\n        Given the head of a linked list and an integer val, remove all the nodes of the linked list that has Node.val == val, and return the new head.\n        Example 1:\n        Input: head = [1,2,6,3,4,5,6], val = 6\n        Output: [1,2,3,4,5]\n        Example 2:\n        Input: head = [], val = 1\n        Output: []\n        Example 3"
    },
    {
        "number": 203,
        "title": "Remove Linked List Elements",
        "difficulty": 0,
        "pass": 5,
        "answer": "        dummy = ListNode(0)\n        dummy.next = head\n        curr = dummy\n        while curr.next:\n            if curr.next.val == val:\n                curr.next = curr.next.next\n            else:\n                curr = curr.next\n        return dummy.next"
    },
    {
        "number": 203,
        "title": "Remove Linked List Elements",
        "difficulty": 0,
        "pass": 6,
        "answer": "        if not head:\n            return head\n        cur = head\n        while cur:\n            if cur.val == val:\n                cur = cur.next\n                head = head.next\n            else:\n                cur = cur.next\n        return head"
    },
    {
        "number": 203,
        "title": "Remove Linked List Elements",
        "difficulty": 0,
        "pass": 7,
        "answer": "        dummy = ListNode(0)\n        dummy.next = head\n        prev, curr = dummy, head\n        while curr:\n            if curr.val == val:\n                prev.next = curr.next\n                curr = curr.next\n            else:\n                prev = curr\n                curr = curr.next\n        return dummy.next"
    },
    {
        "number": 203,
        "title": "Remove Linked List Elements",
        "difficulty": 0,
        "pass": 8,
        "answer": "        dummy = ListNode(0)\n        dummy.next = head\n        prev, curr = dummy, head\n        while curr:\n            if curr.val == val:\n                prev.next = curr.next\n                curr = curr.next\n            else:\n                prev = curr\n                curr = curr.next\n        return dummy.next\n"
    },
    {
        "number": 203,
        "title": "Remove Linked List Elements",
        "difficulty": 0,
        "pass": 9,
        "answer": "        dummy = ListNode(0)\n        dummy.next = head\n        prev, curr = dummy, head\n        while curr:\n            if curr.val == val:\n                prev.next = curr.next\n                curr = curr.next\n            else:\n                prev = curr\n                curr = curr.next\n        return dummy.next"
    },
    {
        "number": 204,
        "title": "Count Primes",
        "difficulty": 1,
        "pass": 0,
        "answer": "        if n <= 1:\n            return 0\n        primes = [True] * n\n        primes[0] = primes[1] = False\n        for i in range(2, int(n ** 0.5) + 1):\n            if primes[i]:\n                primes[i * i:n:i] = [False] * len(primes[i * i:n:i])\n        return sum(primes)"
    },
    {
        "number": 204,
        "title": "Count Primes",
        "difficulty": 1,
        "pass": 1,
        "answer": "        if n < 2:\n            return 0\n        primes = [True] * n\n        primes[0] = primes[1] = False\n        for i in range(2, int(n ** 0.5) + 1):\n            if primes[i]:\n                primes[i * i:n:i] = [False] * len(primes[i * i:n:i])\n        return sum(primes)"
    },
    {
        "number": 204,
        "title": "Count Primes",
        "difficulty": 1,
        "pass": 2,
        "answer": "        if n <= 1:\n            return 0\n        primes = [True] * n\n        primes[0] = primes[1] = False\n        for i in range(2, int(n ** 0.5) + 1):\n            if primes[i]:\n                primes[i * i: n: i] = [False] * len(primes[i * i: n: i])\n        return sum(primes)"
    },
    {
        "number": 204,
        "title": "Count Primes",
        "difficulty": 1,
        "pass": 3,
        "answer": "        if n < 2:\n            return 0\n        prime = [True] * n\n        prime[0] = prime[1] = False\n        for i in range(2, int(n ** 0.5) + 1):\n            if prime[i]:\n                prime[i * i:n:i] = [False] * len(prime[i * i:n:i])\n        return sum(prime)"
    },
    {
        "number": 204,
        "title": "Count Primes",
        "difficulty": 1,
        "pass": 4,
        "answer": "        if n <= 1:\n            return 0\n        primes = [True] * n\n        primes[0] = primes[1] = False\n        for i in range(2, int(n ** 0.5) + 1):\n            if primes[i]:\n                primes[i * i:n:i] = [False] * len(primes[i * i:n:i])\n        return sum(primes)"
    },
    {
        "number": 204,
        "title": "Count Primes",
        "difficulty": 1,
        "pass": 5,
        "answer": "        if n < 2:\n            return 0\n        primes = [True] * n\n        primes[0] = primes[1] = False\n        for i in range(2, int(n ** 0.5) + 1):\n            if primes[i]:\n                primes[i * i:n:i] = [False] * len(primes[i * i:n:i])\n        return sum(primes)"
    },
    {
        "number": 204,
        "title": "Count Primes",
        "difficulty": 1,
        "pass": 6,
        "answer": "        if n < 2:\n            return 0\n        primes = [True] * n\n        primes[0] = primes[1] = False\n        for i in range(2, int(n ** 0.5) + 1):\n            if primes[i]:\n                primes[i * i:n:i] = [False] * len(primes[i * i:n:i])\n        return sum(primes)"
    },
    {
        "number": 204,
        "title": "Count Primes",
        "difficulty": 1,
        "pass": 7,
        "answer": "        if n < 2:\n            return 0\n        primes = [True] * n\n        primes[0] = primes[1] = False\n        for i in range(2, int(n ** 0.5) + 1):\n            if primes[i]:\n                primes[i * i:n:i] = [False] * len(primes[i * i:n:i])\n        return sum(primes)"
    },
    {
        "number": 204,
        "title": "Count Primes",
        "difficulty": 1,
        "pass": 8,
        "answer": "        if n <= 1:\n            return 0\n        primes = [True] * n\n        primes[0] = primes[1] = False\n        for i in range(2, int(n ** 0.5) + 1):\n            if primes[i]:\n                primes[i * i:n:i] = [False] * len(primes[i * i:n:i])\n        return sum(primes)"
    },
    {
        "number": 204,
        "title": "Count Primes",
        "difficulty": 1,
        "pass": 9,
        "answer": "        if n <= 1:\n            return 0\n        primes = [True] * n\n        primes[0] = primes[1] = False\n        for i in range(2, int(n ** 0.5) + 1):\n            if primes[i]:\n                primes[i * i:n:i] = [False] * len(primes[i * i:n:i])\n        return sum(primes)"
    },
    {
        "number": 205,
        "title": "Isomorphic Strings",
        "difficulty": 0,
        "pass": 0,
        "answer": "        if len(s)!= len(t):\n            return False\n        if len(set(s))!= len(set(t)):\n            return False\n        s_dict = {}\n        t_dict = {}\n        for i in range(len(s)):\n            if s[i] not in s_dict:\n                s_dict[s[i]] = t[i]\n            else:\n                if s_dict[s[i]]!= t[i]:\n                    return False\n        for i in range(len(t)):\n            if t[i] not in t_dict:\n                t_dict[t[i]] = s[i]\n            else:\n                if t_dict[t[i]]!= s[i]:\n                    return False\n        return True"
    },
    {
        "number": 205,
        "title": "Isomorphic Strings",
        "difficulty": 0,
        "pass": 1,
        "answer": "        if len(s)!= len(t):\n            return False\n        d = {}\n        for i in range(len(s)):\n            if s[i] not in d:\n                if t[i] in d.values():\n                    return False\n                else:\n                    d[s[i]] = t[i]\n            else:\n                if d[s[i]]!= t[i]:\n                    return False\n        return True"
    },
    {
        "number": 205,
        "title": "Isomorphic Strings",
        "difficulty": 0,
        "pass": 2,
        "answer": "        if len(s)!= len(t):\n            return False\n        if len(set(s))!= len(set(t)):\n            return False\n        map_s = {}\n        map_t = {}\n        for i in range(len(s)):\n            if s[i] not in map_s:\n                map_s[s[i]] = t[i]\n            else:\n                if map_s[s[i]]!= t[i]:\n                    return False\n        for i in range(len(t)):\n            if t[i] not in map_t:\n                map_t[t[i]] = s[i]\n            else:\n                if map_t[t[i]]!= s[i]:\n                    return False\n        return True"
    },
    {
        "number": 205,
        "title": "Isomorphic Strings",
        "difficulty": 0,
        "pass": 3,
        "answer": "        if len(s)!= len(t):\n            return False\n        d1, d2 = {}, {}\n        for i in range(len(s)):\n            if s[i] not in d1:\n                d1[s[i]] = t[i]\n            else:\n                if d1[s[i]]!= t[i]:\n                    return False\n        for i in range(len(t)):\n            if t[i] not in d2:\n                d2[t[i]] = s[i]\n            else:\n                if d2[t[i]]!= s[i]:\n                    return False\n        return True"
    },
    {
        "number": 205,
        "title": "Isomorphic Strings",
        "difficulty": 0,
        "pass": 4,
        "answer": "        if len(s)!= len(t):\n            return False\n        s_map = {}\n        t_map = {}\n        for i in range(len(s)):\n            if s[i] not in s_map:\n                s_map[s[i]] = t[i]\n            else:\n                if s_map[s[i]]!= t[i]:\n                    return False\n        for i in range(len(t)):\n            if t[i] not in t_map:\n                t_map[t[i]] = s[i]\n            else:\n                if t_map[t[i]]!= s[i]:\n                    return False\n        return True"
    },
    {
        "number": 205,
        "title": "Isomorphic Strings",
        "difficulty": 0,
        "pass": 5,
        "answer": "        d1, d2 = {}, {}\n        for i in range(len(s)):\n            if s[i] not in d1:\n                d1[s[i]] = t[i]\n            else:\n                if d1[s[i]]!= t[i]:\n                    return False\n        for i in range(len(t)):\n            if t[i] not in d2:\n                d2[t[i]] = s[i]\n            else:\n                if d2[t[i]]!= s[i]:\n                    return False\n        return True"
    },
    {
        "number": 205,
        "title": "Isomorphic Strings",
        "difficulty": 0,
        "pass": 6,
        "answer": "        if len(s)!= len(t):\n            return False\n        d = {}\n        for i in range(len(s)):\n            if s[i] not in d:\n                if t[i] in d.values():\n                    return False\n                else:\n                    d[s[i]] = t[i]\n            else:\n                if d[s[i]]!= t[i]:\n                    return False\n        return True"
    },
    {
        "number": 205,
        "title": "Isomorphic Strings",
        "difficulty": 0,
        "pass": 7,
        "answer": "        d1 = {}\n        d2 = {}\n        for i in range(len(s)):\n            if s[i] not in d1:\n                d1[s[i]] = t[i]\n            else:\n                if d1[s[i]]!= t[i]:\n                    return False\n        for i in range(len(t)):\n            if t[i] not in d2:\n                d2[t[i]] = s[i]\n            else:\n                if d2[t[i]]!= s[i]:\n                    return False\n        return True"
    },
    {
        "number": 205,
        "title": "Isomorphic Strings",
        "difficulty": 0,
        "pass": 8,
        "answer": "        if len(s)!= len(t):\n            return False\n        if len(set(s))!= len(set(t)):\n            return False\n        d = {}\n        for i in range(len(s)):\n            if s[i] in d:\n                if d[s[i]]!= t[i]:\n                    return False\n            else:\n                if t[i] in d.values():\n                    return False\n                else:\n                    d[s[i]] = t[i]\n        return True"
    },
    {
        "number": 205,
        "title": "Isomorphic Strings",
        "difficulty": 0,
        "pass": 9,
        "answer": "        if len(s)!= len(t):\n            return False\n        if len(set(s))!= len(set(t)):\n            return False\n        d = {}\n        for i in range(len(s)):\n            if s[i] not in d:\n                if t[i] not in d.values():\n                    d[s[i]] = t[i]\n                else:\n                    return False\n            else:\n                if d[s[i]]!= t[i]:\n                    return False\n        return True"
    },
    {
        "number": 206,
        "title": "Reverse Linked List",
        "difficulty": 0,
        "pass": 0,
        "answer": "        if not head:\n            return None\n        prev = None\n        curr = head\n        while curr:\n            next_node = curr.next\n            curr.next = prev\n            prev = curr\n            curr = next_node\n        return prev"
    },
    {
        "number": 206,
        "title": "Reverse Linked List",
        "difficulty": 0,
        "pass": 1,
        "answer": "        if not head:\n            return None\n        prev = None\n        curr = head\n        while curr:\n            next_node = curr.next\n            curr.next = prev\n            prev = curr\n            curr = next_node\n        return prev"
    },
    {
        "number": 206,
        "title": "Reverse Linked List",
        "difficulty": 0,
        "pass": 2,
        "answer": "        if not head:\n            return head\n        \n        prev = None\n        curr = head\n        \n        while curr:\n            temp = curr.next\n            curr.next = prev\n            prev = curr\n            curr = temp\n        \n        return prev\n        \n        \n        \nclass Solution:\n    def reverseList(self, head: Optional[ListNode]) -> Optional[ListNode]:\n        \"\"\"\n        Given the head of a singly linked list, reverse the list, and return the reversed list.\n        Example 1:\n        Input: head = [1,2,3,4,5]\n        Output: [5,4,3,2,1]\n        Example 2:\n        Input: head = [1,2]\n        Output: [2,1]\n        Example 3:\n        Input: head = []\n        Output: []\n        \"\"\"\n        if not head:\n            return head\n        \n        prev = None\n        curr = head\n        \n        while curr:\n            temp = curr.next\n            curr.next = prev\n"
    },
    {
        "number": 206,
        "title": "Reverse Linked List",
        "difficulty": 0,
        "pass": 3,
        "answer": "        if not head:\n            return None\n        if not head.next:\n            return head\n        pre = None\n        cur = head\n        while cur:\n            temp = cur.next\n            cur.next = pre\n            pre = cur\n            cur = temp\n        return pre"
    },
    {
        "number": 206,
        "title": "Reverse Linked List",
        "difficulty": 0,
        "pass": 4,
        "answer": "        if not head:\n            return None\n        curr = head\n        prev = None\n        while curr:\n            nxt = curr.next\n            curr.next = prev\n            prev = curr\n            curr = nxt\n        return prev"
    },
    {
        "number": 206,
        "title": "Reverse Linked List",
        "difficulty": 0,
        "pass": 5,
        "answer": "        if not head:\n            return None\n        if not head.next:\n            return head\n        pre = None\n        cur = head\n        while cur:\n            temp = cur.next\n            cur.next = pre\n            pre = cur\n            cur = temp\n        return pre"
    },
    {
        "number": 206,
        "title": "Reverse Linked List",
        "difficulty": 0,
        "pass": 6,
        "answer": "        if not head:\n            return head\n        pre, cur = None, head\n        while cur:\n            temp = cur.next\n            cur.next = pre\n            pre = cur\n            cur = temp\n        return pre"
    },
    {
        "number": 206,
        "title": "Reverse Linked List",
        "difficulty": 0,
        "pass": 7,
        "answer": "        if not head:\n            return None\n        \n        prev = None\n        curr = head\n        \n        while curr:\n            temp = curr.next\n            curr.next = prev\n            prev = curr\n            curr = temp\n        \n        return prev"
    },
    {
        "number": 206,
        "title": "Reverse Linked List",
        "difficulty": 0,
        "pass": 8,
        "answer": "        if not head:\n            return None\n        curr = head\n        prev = None\n        while curr:\n            nxt = curr.next\n            curr.next = prev\n            prev = curr\n            curr = nxt\n        return prev"
    },
    {
        "number": 206,
        "title": "Reverse Linked List",
        "difficulty": 0,
        "pass": 9,
        "answer": "        if not head:\n            return None\n        if not head.next:\n            return head\n        \n        prev = None\n        curr = head\n        while curr:\n            next_node = curr.next\n            curr.next = prev\n            prev = curr\n            curr = next_node\n        \n        return prev"
    },
    {
        "number": 207,
        "title": "Course Schedule",
        "difficulty": 1,
        "pass": 0,
        "answer": "        graph = [[] for _ in range(numCourses)]\n        visited = [0 for _ in range(numCourses)]\n        \n        for i, j in prerequisites:\n            graph[i].append(j)\n        \n        def dfs(i):\n            if visited[i] == -1:\n                return False\n            if visited[i] == 1:\n                return True\n            visited[i] = -1\n            for j in graph[i]:\n                if not dfs(j):\n                    return False\n            visited[i] = 1\n            return True\n        \n        for i in range(numCourses):\n            if not dfs(i):\n                return False\n        return True"
    },
    {
        "number": 207,
        "title": "Course Schedule",
        "difficulty": 1,
        "pass": 1,
        "answer": "        if numCourses == 0:\n            return True\n        \n        graph = [[] for _ in range(numCourses)]\n        in_degrees = [0 for _ in range(numCourses)]\n        \n        for i, j in prerequisites:\n            graph[i].append(j)\n            in_degrees[j] += 1\n        \n        q = collections.deque()\n        for i in range(numCourses):\n            if in_degrees[i] == 0:\n                q.append(i)\n        \n        while q:\n            node = q.popleft()\n            for neighbor in graph[node]:\n                in_degrees[neighbor] -= 1\n                if in_degrees[neighbor] == 0:\n                    q.append(neighbor)\n        \n        for i in range(numCourses):\n            if in_degrees[i]!= 0:\n                return False\n        \n        return True"
    },
    {
        "number": 207,
        "title": "Course Schedule",
        "difficulty": 1,
        "pass": 2,
        "answer": "        graph = [[] for _ in range(numCourses)]\n        visited = [0 for _ in range(numCourses)]\n        for x, y in prerequisites:\n            graph[x].append(y)\n        \n        def dfs(i):\n            if visited[i] == -1:\n                return False\n            if visited[i] == 1:\n                return True\n            visited[i] = -1\n            for j in graph[i]:\n                if not dfs(j):\n                    return False\n            visited[i] = 1\n            return True\n        \n        for i in range(numCourses):\n            if not dfs(i):\n                return False\n        return True"
    },
    {
        "number": 207,
        "title": "Course Schedule",
        "difficulty": 1,
        "pass": 3,
        "answer": "        graph = [[] for _ in range(numCourses)]\n        visited = [0 for _ in range(numCourses)]\n        for i, j in prerequisites:\n            graph[i].append(j)\n        \n        def dfs(i):\n            if visited[i] == -1:\n                return False\n            if visited[i] == 1:\n                return True\n            visited[i] = -1\n            for j in graph[i]:\n                if not dfs(j):\n                    return False\n            visited[i] = 1\n            return True\n        \n        for i in range(numCourses):\n            if not dfs(i):\n                return False\n        return True"
    },
    {
        "number": 207,
        "title": "Course Schedule",
        "difficulty": 1,
        "pass": 4,
        "answer": "        graph = [[] for _ in range(numCourses)]\n        visited = [0 for _ in range(numCourses)]\n        for i, j in prerequisites:\n            graph[i].append(j)\n        \n        def dfs(i):\n            if visited[i] == -1:\n                return False\n            if visited[i] == 1:\n                return True\n            visited[i] = -1\n            for j in graph[i]:\n                if not dfs(j):\n                    return False\n            visited[i] = 1\n            return True\n        \n        for i in range(numCourses):\n            if not dfs(i):\n                return False\n        return True"
    },
    {
        "number": 207,
        "title": "Course Schedule",
        "difficulty": 1,
        "pass": 5,
        "answer": "        graph = [[] for _ in range(numCourses)]\n        visited = [0 for _ in range(numCourses)]\n        for x, y in prerequisites:\n            graph[x].append(y)\n        \n        def dfs(i):\n            if visited[i] == -1:\n                return False\n            if visited[i] == 1:\n                return True\n            visited[i] = -1\n            for j in graph[i]:\n                if not dfs(j):\n                    return False\n            visited[i] = 1\n            return True\n        \n        for i in range(numCourses):\n            if not dfs(i):\n                return False\n        return True"
    },
    {
        "number": 207,
        "title": "Course Schedule",
        "difficulty": 1,
        "pass": 6,
        "answer": "        \n        graph = [[] for _ in range(numCourses)]\n        visited = [0 for _ in range(numCourses)]\n        \n        for x, y in prerequisites:\n            graph[x].append(y)\n        \n        def dfs(node):\n            if visited[node] == -1:\n                return False\n            if visited[node] == 1:\n                return True\n            visited[node] = -1\n            for nei in graph[node]:\n                if not dfs(nei):\n                    return False\n            visited[node] = 1\n            return True\n        \n        for i in range(numCourses):\n            if not dfs(i):\n                return False\n        return True"
    },
    {
        "number": 207,
        "title": "Course Schedule",
        "difficulty": 1,
        "pass": 7,
        "answer": "        graph = [[] for _ in range(numCourses)]\n        visited = [0 for _ in range(numCourses)]\n        for x,y in prerequisites:\n            graph[x].append(y)\n        \n        def dfs(i):\n            if visited[i] == -1:\n                return False\n            if visited[i] == 1:\n                return True\n            visited[i] = -1\n            for j in graph[i]:\n                if not dfs(j):\n                    return False\n            visited[i] = 1\n            return True\n        \n        for i in range(numCourses):\n            if not dfs(i):\n                return False\n        return True"
    },
    {
        "number": 207,
        "title": "Course Schedule",
        "difficulty": 1,
        "pass": 8,
        "answer": "        graph = collections.defaultdict(list)\n        for x, y in prerequisites:\n            graph[x].append(y)\n        \n        visited = set()\n        \n        def dfs(i):\n            if i in visited:\n                return False\n            if i in graph:\n                for j in graph[i]:\n                    if not dfs(j):\n                        return False\n            visited.add(i)\n            return True\n        \n        for i in range(numCourses):\n            if not dfs(i):\n                return False\n        return True"
    },
    {
        "number": 207,
        "title": "Course Schedule",
        "difficulty": 1,
        "pass": 9,
        "answer": "        if not prerequisites:\n            return True\n        \n        graph = [[] for _ in range(numCourses)]\n        visited = [0 for _ in range(numCourses)]\n        \n        for x, y in prerequisites:\n            graph[x].append(y)\n        \n        def dfs(i):\n            if visited[i] == -1:\n                return False\n            if visited[i] == 1:\n                return True\n            \n            visited[i] = -1\n            for j in graph[i]:\n                if not dfs(j):\n                    return False\n            visited[i] = 1\n            return True\n        \n        for i in range(numCourses):\n            if not dfs(i):\n                return False\n        return True"
    },
    {
        "number": 208,
        "title": "Implement Trie (Prefix Tree)",
        "difficulty": 1,
        "pass": 0,
        "answer": "        def insert(self, word: str) -> None:\n        def search(self, word: str) -> bool:\n        def startsWith(self, prefix: str) -> bool:\n        \"\"\"\n        A trie (pronounced as \"try\") or prefix tree is a tree data structure used to efficiently store and retrieve keys in a dataset of strings. There are various applications of this data structure, such as autocomplete and spellchecker.\n        Implement the Trie class:\n            Trie() Initializes the trie object.\n            void insert(String word) Inserts the string word into the trie.\n            boolean search(String word) Returns true if the string word is in the trie (i.e., was inserted before), and false otherwise.\n            boolean startsWith(String prefix) Returns true if there is a previously inserted string word that has the prefix prefix, and false otherwise.\n        Example 1:\n        Input\n        [\"Trie\", \"insert\", \"search\", \"search\", \"startsWith\", \"insert\", \"search\"]\n        [[], [\"apple\"], [\"apple\"], [\"app\"], [\"app\"], [\""
    },
    {
        "number": 208,
        "title": "Implement Trie (Prefix Tree)",
        "difficulty": 1,
        "pass": 1,
        "answer": "\nclass Trie:\n    def __init__(self):\n    def insert(self, word: str) -> None:\n    def search(self, word: str) -> bool:\n    def startsWith(self, prefix: str) -> bool:\n        \"\"\"\n        A trie (pronounced as \"try\") or prefix tree is a tree data structure used to efficiently store and retrieve keys in a dataset of strings. There are various applications of this data structure, such as autocomplete and spellchecker.\n        Implement the Trie class:\n            Trie() Initializes the trie object.\n            void insert(String word) Inserts the string word into the trie.\n            boolean search(String word) Returns true if the string word is in the trie (i.e., was inserted before), and false otherwise.\n            boolean startsWith(String prefix) Returns true if there is a previously inserted string word that has the prefix prefix, and false otherwise.\n        Example 1:\n        Input\n        [\"Trie\", \"insert\", \"search\", \"search\", \"startsWith\", \"insert\", \"search\"]\n        "
    },
    {
        "number": 208,
        "title": "Implement Trie (Prefix Tree)",
        "difficulty": 1,
        "pass": 2,
        "answer": "        # Your Trie object will be instantiated and called as such:\n        # obj = Trie()\n        # obj.insert(word)\n        # param_2 = obj.search(word)\n        # param_3 = obj.startsWith(prefix)"
    },
    {
        "number": 208,
        "title": "Implement Trie (Prefix Tree)",
        "difficulty": 1,
        "pass": 3,
        "answer": "        def insert(self, word: str) -> None:\n    def search(self, word: str) -> bool:\n    def startsWith(self, prefix: str) -> bool:\n        \"\"\"\n        A trie (pronounced as \"try\") or prefix tree is a tree data structure used to efficiently store and retrieve keys in a dataset of strings. There are various applications of this data structure, such as autocomplete and spellchecker.\n        Implement the Trie class:\n            Trie() Initializes the trie object.\n            void insert(String word) Inserts the string word into the trie.\n            boolean search(String word) Returns true if the string word is in the trie (i.e., was inserted before), and false otherwise.\n            boolean startsWith(String prefix) Returns true if there is a previously inserted string word that has the prefix prefix, and false otherwise.\n        Example 1:\n        Input\n        [\"Trie\", \"insert\", \"search\", \"search\", \"startsWith\", \"insert\", \"search\"]\n        [[], [\"apple\"], [\"apple\"], [\"app\"], [\"app\"], [\""
    },
    {
        "number": 208,
        "title": "Implement Trie (Prefix Tree)",
        "difficulty": 1,
        "pass": 4,
        "answer": "\nclass Node:\n    def __init__(self):\n    def insert(self, word: str) -> None:\n    def search(self, word: str) -> bool:\n    def startsWith(self, prefix: str) -> bool:\n        \"\"\"\n        A trie (pronounced as \"try\") or prefix tree is a tree data structure used to efficiently store and retrieve keys in a dataset of strings. There are various applications of this data structure, such as autocomplete and spellchecker.\n        Implement the Trie class:\n            Trie() Initializes the trie object.\n            void insert(String word) Inserts the string word into the trie.\n            boolean search(String word) Returns true if the string word is in the trie (i.e., was inserted before), and false otherwise.\n            boolean startsWith(String prefix) Returns true if there is a previously inserted string word that has the prefix prefix, and false otherwise.\n        Example 1:\n        Input\n        [\"Trie\", \"insert\", \"search\", \"search\", \"startsWith\", \"insert\", \"search\"]\n        [["
    },
    {
        "number": 208,
        "title": "Implement Trie (Prefix Tree)",
        "difficulty": 1,
        "pass": 5,
        "answer": "\nclass Trie:\n    def __init__(self):\n    def insert(self, word: str) -> None:\n    def search(self, word: str) -> bool:\n    def startsWith(self, prefix: str) -> bool:\n        \"\"\"\n        A trie (pronounced as \"try\") or prefix tree is a tree data structure used to efficiently store and retrieve keys in a dataset of strings. There are various applications of this data structure, such as autocomplete and spellchecker.\n        Implement the Trie class:\n            Trie() Initializes the trie object.\n            void insert(String word) Inserts the string word into the trie.\n            boolean search(String word) Returns true if the string word is in the trie (i.e., was inserted before), and false otherwise.\n            boolean startsWith(String prefix) Returns true if there is a previously inserted string word that has the prefix prefix, and false otherwise.\n        Example 1:\n        Input\n        [\"Trie\", \"insert\", \"search\", \"search\", \"startsWith\", \"insert\", \"search\"]\n        "
    },
    {
        "number": 208,
        "title": "Implement Trie (Prefix Tree)",
        "difficulty": 1,
        "pass": 6,
        "answer": "\nclass Trie:\n    def __init__(self):\n    def insert(self, word: str) -> None:\n    def search(self, word: str) -> bool:\n    def startsWith(self, prefix: str) -> bool:\n        \"\"\"\n        A trie (pronounced as \"try\") or prefix tree is a tree data structure used to efficiently store and retrieve keys in a dataset of strings. There are various applications of this data structure, such as autocomplete and spellchecker.\n        Implement the Trie class:\n            Trie() Initializes the trie object.\n            void insert(String word) Inserts the string word into the trie.\n            boolean search(String word) Returns true if the string word is in the trie (i.e., was inserted before), and false otherwise.\n            boolean startsWith(String prefix) Returns true if there is a previously inserted string word that has the prefix prefix, and false otherwise.\n        Example 1:\n        Input\n        [\"Trie\", \"insert\", \"search\", \"search\", \"startsWith\", \"insert\", \"search\"]\n        "
    },
    {
        "number": 208,
        "title": "Implement Trie (Prefix Tree)",
        "difficulty": 1,
        "pass": 7,
        "answer": "\nclass Trie:\n    def __init__(self):\n    def insert(self, word: str) -> None:\n    def search(self, word: str) -> bool:\n    def startsWith(self, prefix: str) -> bool:\n        \"\"\"\n        A trie (pronounced as \"try\") or prefix tree is a tree data structure used to efficiently store and retrieve keys in a dataset of strings. There are various applications of this data structure, such as autocomplete and spellchecker.\n        Implement the Trie class:\n            Trie() Initializes the trie object.\n            void insert(String word) Inserts the string word into the trie.\n            boolean search(String word) Returns true if the string word is in the trie (i.e., was inserted before), and false otherwise.\n            boolean startsWith(String prefix) Returns true if there is a previously inserted string word that has the prefix prefix, and false otherwise.\n        Example 1:\n        Input\n        [\"Trie\", \"insert\", \"search\", \"search\", \"startsWith\", \"insert\", \"search\"]\n        "
    },
    {
        "number": 208,
        "title": "Implement Trie (Prefix Tree)",
        "difficulty": 1,
        "pass": 8,
        "answer": "        # Your Trie object will be instantiated and called as such:\n        # obj = Trie()\n        # obj.insert(word)\n        # param_2 = obj.search(word)\n        # param_3 = obj.startsWith(prefix)"
    },
    {
        "number": 208,
        "title": "Implement Trie (Prefix Tree)",
        "difficulty": 1,
        "pass": 9,
        "answer": "\nclass Trie:\n    def __init__(self):\n    def insert(self, word: str) -> None:\n    def search(self, word: str) -> bool:\n    def startsWith(self, prefix: str) -> bool:\n        \"\"\"\n        A trie (pronounced as \"try\") or prefix tree is a tree data structure used to efficiently store and retrieve keys in a dataset of strings. There are various applications of this data structure, such as autocomplete and spellchecker.\n        Implement the Trie class:\n            Trie() Initializes the trie object.\n            void insert(String word) Inserts the string word into the trie.\n            boolean search(String word) Returns true if the string word is in the trie (i.e., was inserted before), and false otherwise.\n            boolean startsWith(String prefix) Returns true if there is a previously inserted string word that has the prefix prefix, and false otherwise.\n        Example 1:\n        Input\n        [\"Trie\", \"insert\", \"search\", \"search\", \"startsWith\", \"insert\", \"search\"]\n        "
    },
    {
        "number": 209,
        "title": "Minimum Size Subarray Sum",
        "difficulty": 1,
        "pass": 0,
        "answer": "        if not nums:\n            return 0\n        n = len(nums)\n        s = 0\n        ans = n + 1\n        for i in range(n):\n            s += nums[i]\n            while s >= target:\n                ans = min(ans, i - s + 1)\n                s -= nums[i]\n        return ans if ans < n + 1 else 0"
    },
    {
        "number": 209,
        "title": "Minimum Size Subarray Sum",
        "difficulty": 1,
        "pass": 1,
        "answer": "        if not nums:\n            return 0\n        \n        n = len(nums)\n        if n == 1:\n            if nums[0] >= target:\n                return 1\n            else:\n                return 0\n        \n        min_len = n + 1\n        curr_sum = 0\n        for i in range(n):\n            curr_sum += nums[i]\n            while curr_sum >= target:\n                min_len = min(min_len, i - start + 1)\n                curr_sum -= nums[start]\n                start += 1\n        \n        if min_len == n + 1:\n            return 0\n        else:\n            return min_len"
    },
    {
        "number": 209,
        "title": "Minimum Size Subarray Sum",
        "difficulty": 1,
        "pass": 2,
        "answer": "        if not nums:\n            return 0\n        if len(nums) == 1:\n            if nums[0] >= target:\n                return 1\n            else:\n                return 0\n        for i in range(len(nums)):\n            for j in range(i, len(nums)):\n                if sum(nums[i:j+1]) >= target:\n                    return j - i + 1\n        return 0"
    },
    {
        "number": 209,
        "title": "Minimum Size Subarray Sum",
        "difficulty": 1,
        "pass": 3,
        "answer": "        if not nums:\n            return 0\n        n = len(nums)\n        if n == 1:\n            if nums[0] >= target:\n                return 1\n            else:\n                return 0\n        l = 0\n        r = 0\n        s = 0\n        res = float('inf')\n        while r < n:\n            s += nums[r]\n            while s >= target:\n                res = min(res, r - l + 1)\n                s -= nums[l]\n                l += 1\n            r += 1\n        if res == float('inf'):\n            return 0\n        else:\n            return res"
    },
    {
        "number": 209,
        "title": "Minimum Size Subarray Sum",
        "difficulty": 1,
        "pass": 4,
        "answer": "        if not nums:\n            return 0\n        n = len(nums)\n        left = 0\n        res = n + 1\n        sum_ = 0\n        for i in range(n):\n            sum_ += nums[i]\n            while sum_ >= target:\n                res = min(res, i - left + 1)\n                sum_ -= nums[left]\n                left += 1\n        if res == n + 1:\n            return 0\n        return res"
    },
    {
        "number": 209,
        "title": "Minimum Size Subarray Sum",
        "difficulty": 1,
        "pass": 5,
        "answer": "        if not nums:\n            return 0\n        n = len(nums)\n        left = 0\n        right = 0\n        cur_sum = 0\n        min_len = n + 1\n        while right < n:\n            cur_sum += nums[right]\n            while cur_sum >= target:\n                min_len = min(min_len, right - left + 1)\n                cur_sum -= nums[left]\n                left += 1\n            right += 1\n        if min_len == n + 1:\n            return 0\n        return min_len"
    },
    {
        "number": 209,
        "title": "Minimum Size Subarray Sum",
        "difficulty": 1,
        "pass": 6,
        "answer": "        n = len(nums)\n        if n == 0:\n            return 0\n        if n == 1:\n            if nums[0] >= target:\n                return 1\n            else:\n                return 0\n        if n == 2:\n            if nums[0] >= target:\n                return 1\n            elif nums[1] >= target:\n                return 1\n            else:\n                return 0\n        if n == 3:\n            if nums[0] >= target:\n                return 1\n            elif nums[1] >= target:\n                return 1\n            elif nums[2] >= target:\n                return 1\n            else:\n                return 0\n        if n == 4:\n            if nums[0] >= target:\n                return 1\n            elif nums[1] >= target:\n                return 1\n            elif nums[2] >= target:\n                return 1\n            elif nums[3] >= target:\n                return 1\n            else:\n                return 0\n        if n == 5:\n            if nums[0]"
    },
    {
        "number": 209,
        "title": "Minimum Size Subarray Sum",
        "difficulty": 1,
        "pass": 7,
        "answer": "        if not nums:\n            return 0\n        if sum(nums) < target:\n            return 0\n        if sum(nums) == target:\n            return len(nums)\n        if sum(nums) < target:\n            return 0\n        if sum(nums) == target:\n            return len(nums)\n        if sum(nums) == target:\n            return len(nums)\n        if sum(nums) == target:\n            return len(nums)\n        if sum(nums) == target:\n            return len(nums)\n        if sum(nums) == target:\n            return len(nums)\n        if sum(nums) == target:\n            return len(nums)\n        if sum(nums) == target:\n            return len(nums)\n        if sum(nums) == target:\n            return len(nums)\n        if sum(nums) == target:\n            return len(nums)\n        if sum(nums) == target:\n            return len(nums)\n"
    },
    {
        "number": 209,
        "title": "Minimum Size Subarray Sum",
        "difficulty": 1,
        "pass": 8,
        "answer": "        n = len(nums)\n        if n == 0:\n            return 0\n        s = 0\n        ans = n + 1\n        for i in range(n):\n            s += nums[i]\n            while s >= target:\n                ans = min(ans, i - s + 1)\n                s -= nums[i]\n        return ans if ans < n + 1 else 0"
    },
    {
        "number": 209,
        "title": "Minimum Size Subarray Sum",
        "difficulty": 1,
        "pass": 9,
        "answer": "        n = len(nums)\n        if n == 0:\n            return 0\n        if n == 1:\n            if nums[0] >= target:\n                return 1\n            else:\n                return 0\n        if n == 2:\n            if nums[0] >= target:\n                return 1\n            elif nums[1] >= target:\n                return 1\n            else:\n                return 0\n        if n == 3:\n            if nums[0] >= target:\n                return 1\n            elif nums[1] >= target:\n                return 1\n            elif nums[2] >= target:\n                return 1\n            else:\n                return 0\n        if n == 4:\n            if nums[0] >= target:\n                return 1\n            elif nums[1] >= target:\n                return 1\n            elif nums[2] >= target:\n                return 1\n            elif nums[3] >= target:\n                return 1\n            else:\n                return 0\n        if n == 5:\n            if nums[0]"
    },
    {
        "number": 210,
        "title": "Course Schedule II",
        "difficulty": 1,
        "pass": 0,
        "answer": "        graph = [[] for _ in range(numCourses)]\n        indegrees = [0 for _ in range(numCourses)]\n        for x, y in prerequisites:\n            graph[x].append(y)\n            indegrees[y] += 1\n        q = deque()\n        for i in range(numCourses):\n            if indegrees[i] == 0:\n                q.append(i)\n        order = []\n        while q:\n            node = q.popleft()\n            order.append(node)\n            for neighbor in graph[node]:\n                indegrees[neighbor] -= 1\n                if indegrees[neighbor] == 0:\n                    q.append(neighbor)\n        return order if len(order) == numCourses else []"
    },
    {
        "number": 210,
        "title": "Course Schedule II",
        "difficulty": 1,
        "pass": 1,
        "answer": "        \n        graph = [[] for _ in range(numCourses)]\n        in_degrees = [0 for _ in range(numCourses)]\n        \n        for edge in prerequisites:\n            graph[edge[1]].append(edge[0])\n            in_degrees[edge[0]] += 1\n        \n        queue = []\n        for i in range(len(in_degrees)):\n            if in_degrees[i] == 0:\n                queue.append(i)\n        \n        order = []\n        while queue:\n            node = queue.pop(0)\n            order.append(node)\n            \n            for neighbor in graph[node]:\n                in_degrees[neighbor] -= 1\n                if in_degrees[neighbor] == 0:\n                    queue.append(neighbor)\n        \n        if len(order) == numCourses:\n            return order\n        else:\n            return []"
    },
    {
        "number": 210,
        "title": "Course Schedule II",
        "difficulty": 1,
        "pass": 2,
        "answer": "        \n        graph = [[] for _ in range(numCourses)]\n        visited = [0 for _ in range(numCourses)]\n        \n        for x, y in prerequisites:\n            graph[x].append(y)\n        \n        def dfs(node):\n            if visited[node] == -1:\n                return False\n            if visited[node] == 1:\n                return True\n            visited[node] = -1\n            \n            for nei in graph[node]:\n                if not dfs(nei):\n                    return False\n            visited[node] = 1\n            return True\n        \n        res = []\n        for i in range(numCourses):\n            if not dfs(i):\n                return []\n        \n        for i in range(numCourses):\n            if visited[i] == 0:\n                res.append(i)\n        return res\n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        "
    },
    {
        "number": 210,
        "title": "Course Schedule II",
        "difficulty": 1,
        "pass": 3,
        "answer": "        graph = [[] for _ in range(numCourses)]\n        visited = set()\n        for course, pre in prerequisites:\n            graph[pre].append(course)"
    },
    {
        "number": 210,
        "title": "Course Schedule II",
        "difficulty": 1,
        "pass": 4,
        "answer": "        graph = [[] for _ in range(numCourses)]\n        visited = [0 for _ in range(numCourses)]\n        for x, y in prerequisites:\n            graph[x].append(y)\n        \n        def dfs(i):\n            if visited[i] == -1:\n                return False\n            if visited[i] == 1:\n                return True\n            visited[i] = -1\n            for j in graph[i]:\n                if not dfs(j):\n                    return False\n            visited[i] = 1\n            return True\n        \n        res = []\n        for i in range(numCourses):\n            if not dfs(i):\n                return []\n        for i in range(numCourses):\n            if visited[i] == 1:\n                res.append(i)\n        return res"
    },
    {
        "number": 210,
        "title": "Course Schedule II",
        "difficulty": 1,
        "pass": 5,
        "answer": "        graph = [[] for _ in range(numCourses)]\n        visited = [0 for _ in range(numCourses)]\n        res = []\n        \n        for i, j in prerequisites:\n            graph[i].append(j)\n        \n        def dfs(i):\n            if visited[i] == -1:\n                return False\n            if visited[i] == 1:\n                return True\n            visited[i] = -1\n            for j in graph[i]:\n                if not dfs(j):\n                    return False\n            visited[i] = 1\n            res.append(i)\n            return True\n        \n        for i in range(numCourses):\n            if not dfs(i):\n                return []\n        return res"
    },
    {
        "number": 210,
        "title": "Course Schedule II",
        "difficulty": 1,
        "pass": 6,
        "answer": "        \n        graph = [[] for _ in range(numCourses)]\n        visited = [0 for _ in range(numCourses)]\n        res = []\n        \n        for i, j in prerequisites:\n            graph[i].append(j)\n        \n        def dfs(i):\n            if visited[i] == -1:\n                return False\n            if visited[i] == 1:\n                return True\n            visited[i] = -1\n            for j in graph[i]:\n                if not dfs(j):\n                    return False\n            visited[i] = 1\n            res.append(i)\n            return True\n        \n        for i in range(numCourses):\n            if not dfs(i):\n                return []\n        return res"
    },
    {
        "number": 210,
        "title": "Course Schedule II",
        "difficulty": 1,
        "pass": 7,
        "answer": "        \n        graph = [[] for _ in range(numCourses)]\n        visited = [0 for _ in range(numCourses)]\n        \n        for i, j in prerequisites:\n            graph[i].append(j)\n        \n        def dfs(i):\n            if visited[i] == -1:\n                return False\n            if visited[i] == 1:\n                return True\n            visited[i] = -1\n            for j in graph[i]:\n                if not dfs(j):\n                    return False\n            visited[i] = 1\n            return True\n        \n        for i in range(numCourses):\n            if not dfs(i):\n                return []\n        \n        order = []\n        for i in range(numCourses):\n            if visited[i] == 1:\n                order.append(i)\n        return order\n        \n        \nclass Solution:\n    def findOrder(self, numCourses: int, prerequisites: List[List[int]]) -> List[int]:\n        \"\"\"\n        There are a total"
    },
    {
        "number": 210,
        "title": "Course Schedule II",
        "difficulty": 1,
        "pass": 8,
        "answer": "        graph = [[] for _ in range(numCourses)]\n        visited = [0 for _ in range(numCourses)]\n        for i, j in prerequisites:\n            graph[i].append(j)\n            \n        def dfs(i):\n            if visited[i] == -1:\n                return False\n            if visited[i] == 1:\n                return True\n            visited[i] = -1\n            for j in graph[i]:\n                if not dfs(j):\n                    return False\n            visited[i] = 1\n            return True\n        \n        res = []\n        for i in range(numCourses):\n            if not dfs(i):\n                return []\n        for i in range(numCourses):\n            if visited[i] == 1:\n                res.append(i)\n        return res"
    },
    {
        "number": 210,
        "title": "Course Schedule II",
        "difficulty": 1,
        "pass": 9,
        "answer": "        graph = [[] for _ in range(numCourses)]\n        visited = [0 for _ in range(numCourses)]\n        res = []\n        \n        for i, j in prerequisites:\n            graph[i].append(j)\n        \n        def dfs(i):\n            if visited[i] == -1:\n                return False\n            if visited[i] == 1:\n                return True\n            visited[i] = -1\n            for j in graph[i]:\n                if not dfs(j):\n                    return False\n            visited[i] = 1\n            res.append(i)\n            return True\n        \n        for i in range(numCourses):\n            if not dfs(i):\n                return []\n        return res"
    },
    {
        "number": 211,
        "title": "Design Add and Search Words Data Structure",
        "difficulty": 1,
        "pass": 0,
        "answer": "\nclass WordDictionary:\n    def __init__(self):\n    def addWord(self, word: str) -> None:\n    def search(self, word: str) -> bool:\n        \"\"\"\n        Design a data structure that supports adding new words and finding if a string matches any previously added string.\n        Implement the WordDictionary class:\n            WordDictionary() Initializes the object.\n            void addWord(word) Adds word to the data structure, it can be matched later.\n            bool search(word) Returns true if there is any string in the data structure that matches word or false otherwise. word may contain dots '.' where dots can be matched with any letter.\n        Example:\n        Input\n        [\"WordDictionary\",\"addWord\",\"addWord\",\"addWord\",\"search\",\"search\",\"search\",\"search\"]\n        [[],[\"bad\"],[\"dad\"],[\"mad\"],[\"pad\"],[\"bad\"],[\".ad\"],[\"b..\"]]\n        Output\n        [null,null,null,null,false,true,true,true]\n        Explanation\n        WordDictionary wordDictionary = new WordDictionary"
    },
    {
        "number": 211,
        "title": "Design Add and Search Words Data Structure",
        "difficulty": 1,
        "pass": 1,
        "answer": "\nclass Trie:\n    def __init__(self):\n    def insert(self, word: str) -> None:\n    def search(self, word: str) -> bool:\n    def startsWith(self, prefix: str) -> bool:"
    },
    {
        "number": 211,
        "title": "Design Add and Search Words Data Structure",
        "difficulty": 1,
        "pass": 2,
        "answer": "        def dfs(word, word_dict):\n            if len(word) == 0:\n                return True\n            if word in word_dict:\n                return True\n            for i in range(1, len(word)):\n                if word[:i] in word_dict and dfs(word[i:], word_dict):\n                    return True\n            return False"
    },
    {
        "number": 211,
        "title": "Design Add and Search Words Data Structure",
        "difficulty": 1,
        "pass": 3,
        "answer": "        # Your WordDictionary object will be instantiated and called as such:\n        # obj = WordDictionary()\n        # obj.addWord(word)\n        # param_2 = obj.search(word)"
    },
    {
        "number": 211,
        "title": "Design Add and Search Words Data Structure",
        "difficulty": 1,
        "pass": 4,
        "answer": "\nclass WordDictionary:\n    def __init__(self):\n    def addWord(self, word: str) -> None:\n    def search(self, word: str) -> bool:\n        \"\"\"\n        Design a data structure that supports adding new words and finding if a string matches any previously added string.\n        Implement the WordDictionary class:\n            WordDictionary() Initializes the object.\n            void addWord(word) Adds word to the data structure, it can be matched later.\n            bool search(word) Returns true if there is any string in the data structure that matches word or false otherwise. word may contain dots '.' where dots can be matched with any letter.\n        Example:\n        Input\n        [\"WordDictionary\",\"addWord\",\"addWord\",\"addWord\",\"search\",\"search\",\"search\",\"search\"]\n        [[],[\"bad\"],[\"dad\"],[\"mad\"],[\"pad\"],[\"bad\"],[\".ad\"],[\"b..\"]]\n        Output\n        [null,null,null,null,false,true,true,true]\n        Explanation\n        WordDictionary wordDictionary = new WordDictionary"
    },
    {
        "number": 211,
        "title": "Design Add and Search Words Data Structure",
        "difficulty": 1,
        "pass": 5,
        "answer": "        def dfs(word):\n            if not word:\n                return True\n            if word in word_dict:\n                return word_dict[word]\n            for i in range(1, len(word)):\n                if word[:i] in word_dict and dfs(word[i:]):\n                    word_dict[word] = True\n                    return True\n            word_dict[word] = False\n            return False"
    },
    {
        "number": 211,
        "title": "Design Add and Search Words Data Structure",
        "difficulty": 1,
        "pass": 6,
        "answer": "        def dfs(node, word):\n            if not word:\n                return True\n            if not node:\n                return False\n            if word[0] == '.':\n                return any(dfs(child, word[1:]) for child in node.children)\n            else:\n                return word[0] in node.children and dfs(node.children[word[0]], word[1:])"
    },
    {
        "number": 211,
        "title": "Design Add and Search Words Data Structure",
        "difficulty": 1,
        "pass": 7,
        "answer": "        # https://leetcode.com/problems/add-and-search-word-data-structure-design/solution/\n        # https://leetcode.com/problems/add-and-search-word-data-structure-design/discuss/945981/Python-Easy-to-understand-solution-with-explanation\n        # https://leetcode.com/problems/add-and-search-word-data-structure-design/discuss/945981/Python-Easy-to-understand-solution-with-explanation\n        # https://leetcode.com/problems/add-and-search-word-data-structure-design/discuss/945981/Python-Easy-to-understand-solution-with-explanation\n        # https://leetcode.com/problems/add-and-search-word-data-structure-design/discuss/945981/Python-Easy-to-understand-solution-with-explanation\n        #"
    },
    {
        "number": 211,
        "title": "Design Add and Search Words Data Structure",
        "difficulty": 1,
        "pass": 8,
        "answer": "\nclass WordDictionary:\n    def __init__(self):\n    def addWord(self, word: str) -> None:\n    def search(self, word: str) -> bool:\n        \"\"\"\n        Design a data structure that supports adding new words and finding if a string matches any previously added string.\n        Implement the WordDictionary class:\n            WordDictionary() Initializes the object.\n            void addWord(word) Adds word to the data structure, it can be matched later.\n            bool search(word) Returns true if there is any string in the data structure that matches word or false otherwise. word may contain dots '.' where dots can be matched with any letter.\n        Example:\n        Input\n        [\"WordDictionary\",\"addWord\",\"addWord\",\"addWord\",\"search\",\"search\",\"search\",\"search\"]\n        [[],[\"bad\"],[\"dad\"],[\"mad\"],[\"pad\"],[\"bad\"],[\".ad\"],[\"b..\"]]\n        Output\n        [null,null,null,null,false,true,true,true]\n        Explanation\n        WordDictionary wordDictionary = new WordDictionary"
    },
    {
        "number": 211,
        "title": "Design Add and Search Words Data Structure",
        "difficulty": 1,
        "pass": 9,
        "answer": "        def dfs(node, word):\n            if not word:\n                return True\n            if not node:\n                return False\n            if word[0] == '.':\n                return any(dfs(child, word[1:]) for child in node.children)\n            else:\n                return word[0] in node.children and dfs(node.children[word[0]], word[1:])\n        return dfs(self.root, word)"
    },
    {
        "number": 212,
        "title": "Word Search II",
        "difficulty": 2,
        "pass": 0,
        "answer": "        if not board or not board[0]:\n            return []\n        m, n = len(board), len(board[0])\n        res = set()\n        visited = set()\n        for word in words:\n            visited.add(word[0])\n        for i in range(m):\n            for j in range(n):\n                if board[i][j] in visited:\n                    self.dfs(board, i, j, m, n, visited, word, res)\n        return list(res)"
    },
    {
        "number": 212,
        "title": "Word Search II",
        "difficulty": 2,
        "pass": 1,
        "answer": "        if not board or not board[0] or not words:\n            return []\n        \n        self.res = set()\n        self.m = len(board)\n        self.n = len(board[0])\n        self.board = board\n        self.words = words\n        self.visited = [[False for _ in range(self.n)] for _ in range(self.m)]\n        \n        for i in range(self.m):\n            for j in range(self.n):\n                self.visited[i][j] = True\n                self.dfs(i, j, \"\", 0)\n                self.visited[i][j] = False\n        \n        return list(self.res)"
    },
    {
        "number": 212,
        "title": "Word Search II",
        "difficulty": 2,
        "pass": 2,
        "answer": "        def dfs(i, j, word, visited):\n            if len(word) == 0:\n                return True\n            if i < 0 or i >= len(board) or j < 0 or j >= len(board[0]) or word[0]!= board[i][j] or (i, j) in visited:\n                return False\n            visited.add((i, j))\n            res = dfs(i + 1, j, word[1:], visited) or dfs(i - 1, j, word[1:], visited) or dfs(i, j + 1, word[1:], visited) or dfs(i, j - 1, word[1:], visited)\n            visited.remove((i, j))\n            return res"
    },
    {
        "number": 212,
        "title": "Word Search II",
        "difficulty": 2,
        "pass": 3,
        "answer": "        if not board or not board[0] or not words:\n            return []\n        \n        rows = len(board)\n        cols = len(board[0])\n        \n        res = set()\n        \n        for word in words:\n            if self.dfs(board, rows, cols, word, 0, set()):\n                res.add(word)\n        \n        return list(res)"
    },
    {
        "number": 212,
        "title": "Word Search II",
        "difficulty": 2,
        "pass": 4,
        "answer": "        if not board or not words:\n            return []\n        \n        rows = len(board)\n        cols = len(board[0])\n        trie = {}\n        for word in words:\n            node = trie\n            for char in word:\n                if char not in node:\n                    node[char] = {}\n                node = node[char]\n            node['#'] = word\n        \n        res = set()\n        for i in range(rows):\n            for j in range(cols):\n                self.dfs(board, i, j, rows, cols, trie, '', res)\n        return list(res)"
    },
    {
        "number": 212,
        "title": "Word Search II",
        "difficulty": 2,
        "pass": 5,
        "answer": "        if not board or not board[0] or not words:\n            return []\n        m, n = len(board), len(board[0])\n        trie = {}\n        for word in words:\n            node = trie\n            for char in word:\n                if char not in node:\n                    node[char] = {}\n                node = node[char]\n            node['#'] = word\n        res = set()\n        for i in range(m):\n            for j in range(n):\n                self.dfs(board, i, j, trie, '', res)\n        return list(res)"
    },
    {
        "number": 212,
        "title": "Word Search II",
        "difficulty": 2,
        "pass": 6,
        "answer": "        if not board or not board[0]:\n            return []\n        if not words:\n            return []\n        res = set()\n        m, n = len(board), len(board[0])\n        visited = [[False for _ in range(n)] for _ in range(m)]\n        for i in range(m):\n            for j in range(n):\n                if self.dfs(board, words, 0, i, j, m, n, visited):\n                    res.add(words[0])\n        return list(res)"
    },
    {
        "number": 212,
        "title": "Word Search II",
        "difficulty": 2,
        "pass": 7,
        "answer": "        if not board or not board[0]:\n            return []\n        \n        m, n = len(board), len(board[0])\n        \n        def dfs(i, j, word, visited):\n            if not word:\n                return True\n            \n            if i < 0 or i >= m or j < 0 or j >= n or word[0]!= board[i][j] or (i, j) in visited:\n                return False\n            \n            visited.add((i, j))\n            if dfs(i+1, j, word[1:], visited):\n                return True\n            if dfs(i-1, j, word[1:], visited):\n                return True\n            if dfs(i, j+1, word[1:], visited):\n                return True\n            if dfs(i, j-1, word[1:], visited):\n                return True\n            \n            visited.remove((i, j))\n            return False\n        \n        res = []\n        for word in words:\n            visited = set()\n            for i"
    },
    {
        "number": 212,
        "title": "Word Search II",
        "difficulty": 2,
        "pass": 8,
        "answer": "        if not board or not board[0] or not words:\n            return []\n        \n        m, n = len(board), len(board[0])\n        res = set()\n        \n        def dfs(i, j, word):\n            if not word:\n                return True\n            if i < 0 or i >= m or j < 0 or j >= n or board[i][j]!= word[0]:\n                return False\n            tmp = board[i][j]\n            board[i][j] = '#'\n            found = dfs(i+1, j, word[1:]) or dfs(i-1, j, word[1:]) or dfs(i, j+1, word[1:]) or dfs(i, j-1, word[1:])\n            board[i][j] = tmp\n            return found\n        \n        for word in words:\n            for i in range(m):\n                for j in range(n):\n                    if dfs(i, j, word):\n                        res.add(word)\n        return list"
    },
    {
        "number": 212,
        "title": "Word Search II",
        "difficulty": 2,
        "pass": 9,
        "answer": "        if not board or not board[0]:\n            return []\n        if not words or not words[0]:\n            return []\n        m, n = len(board), len(board[0])\n        visited = [[False for _ in range(n)] for _ in range(m)]\n        res = set()\n        for word in words:\n            visited = [[False for _ in range(n)] for _ in range(m)]\n            for i in range(m):\n                for j in range(n):\n                    if self.dfs(board, word, 0, i, j, visited):\n                        res.add(word)\n        return list(res)"
    },
    {
        "number": 213,
        "title": "House Robber II",
        "difficulty": 1,
        "pass": 0,
        "answer": "        if len(nums) == 0:\n            return 0\n        if len(nums) == 1:\n            return nums[0]\n        if len(nums) == 2:\n            return max(nums[0], nums[1])\n        dp = [0] * len(nums)\n        dp[0] = nums[0]\n        dp[1] = max(nums[0], nums[1])\n        for i in range(2, len(nums)):\n            dp[i] = max(dp[i - 1], dp[i - 2] + nums[i])\n        return dp[-1]"
    },
    {
        "number": 213,
        "title": "House Robber II",
        "difficulty": 1,
        "pass": 1,
        "answer": "        if len(nums) == 0:\n            return 0\n        if len(nums) == 1:\n            return nums[0]\n        if len(nums) == 2:\n            return max(nums[0], nums[1])\n        dp = [0] * len(nums)\n        dp[0] = nums[0]\n        dp[1] = max(nums[0], nums[1])\n        for i in range(2, len(nums)):\n            dp[i] = max(dp[i - 2] + nums[i], dp[i - 1])\n        return dp[-1]"
    },
    {
        "number": 213,
        "title": "House Robber II",
        "difficulty": 1,
        "pass": 2,
        "answer": "        if len(nums) == 0:\n            return 0\n        if len(nums) == 1:\n            return nums[0]\n        if len(nums) == 2:\n            return max(nums[0], nums[1])\n        dp = [0] * len(nums)\n        dp[0] = nums[0]\n        dp[1] = max(nums[0], nums[1])\n        for i in range(2, len(nums)):\n            dp[i] = max(dp[i-2] + nums[i], dp[i-1])\n        return dp[-1]"
    },
    {
        "number": 213,
        "title": "House Robber II",
        "difficulty": 1,
        "pass": 3,
        "answer": "        if len(nums) == 0:\n            return 0\n        if len(nums) == 1:\n            return nums[0]\n        if len(nums) == 2:\n            return max(nums[0], nums[1])\n        dp = [0] * len(nums)\n        dp[0] = nums[0]\n        dp[1] = max(nums[0], nums[1])\n        for i in range(2, len(nums)):\n            dp[i] = max(dp[i - 2] + nums[i], dp[i - 1])\n        return dp[-1]"
    },
    {
        "number": 213,
        "title": "House Robber II",
        "difficulty": 1,
        "pass": 4,
        "answer": "        if len(nums) == 0:\n            return 0\n        if len(nums) == 1:\n            return nums[0]\n        if len(nums) == 2:\n            return max(nums[0], nums[1])\n        dp = [0] * len(nums)\n        dp[0] = nums[0]\n        dp[1] = max(nums[0], nums[1])\n        for i in range(2, len(nums)):\n            dp[i] = max(dp[i - 2] + nums[i], dp[i - 1])\n        return dp[-1]"
    },
    {
        "number": 213,
        "title": "House Robber II",
        "difficulty": 1,
        "pass": 5,
        "answer": "        if not nums:\n            return 0\n        n = len(nums)\n        if n == 1:\n            return nums[0]\n        dp = [0] * n\n        dp[0] = nums[0]\n        dp[1] = max(nums[0], nums[1])\n        for i in range(2, n):\n            dp[i] = max(dp[i - 2] + nums[i], dp[i - 1])\n        return dp[-1]"
    },
    {
        "number": 213,
        "title": "House Robber II",
        "difficulty": 1,
        "pass": 6,
        "answer": "        if len(nums) == 0:\n            return 0\n        if len(nums) == 1:\n            return nums[0]\n        if len(nums) == 2:\n            return max(nums[0], nums[1])\n        dp = [0] * len(nums)\n        dp[0] = nums[0]\n        dp[1] = max(nums[0], nums[1])\n        for i in range(2, len(nums)):\n            dp[i] = max(dp[i - 2] + nums[i], dp[i - 1])\n        return dp[-1]"
    },
    {
        "number": 213,
        "title": "House Robber II",
        "difficulty": 1,
        "pass": 7,
        "answer": "        if len(nums) == 0:\n            return 0\n        if len(nums) == 1:\n            return nums[0]\n        if len(nums) == 2:\n            return max(nums[0], nums[1])\n        dp = [0] * len(nums)\n        dp[0] = nums[0]\n        dp[1] = max(nums[0], nums[1])\n        for i in range(2, len(nums)):\n            dp[i] = max(dp[i - 1], dp[i - 2] + nums[i])\n        return dp[-1]"
    },
    {
        "number": 213,
        "title": "House Robber II",
        "difficulty": 1,
        "pass": 8,
        "answer": "        if not nums:\n            return 0\n        if len(nums) == 1:\n            return nums[0]\n        if len(nums) == 2:\n            return max(nums[0], nums[1])\n        dp = [0] * len(nums)\n        dp[0] = nums[0]\n        dp[1] = max(nums[0], nums[1])\n        for i in range(2, len(nums)):\n            dp[i] = max(dp[i - 2] + nums[i], dp[i - 1])\n        return dp[-1]"
    },
    {
        "number": 213,
        "title": "House Robber II",
        "difficulty": 1,
        "pass": 9,
        "answer": "        if len(nums) == 0:\n            return 0\n        if len(nums) == 1:\n            return nums[0]\n        if len(nums) == 2:\n            return max(nums[0], nums[1])\n        dp = [0] * len(nums)\n        dp[0] = nums[0]\n        dp[1] = max(nums[0], nums[1])\n        for i in range(2, len(nums)):\n            dp[i] = max(dp[i-2] + nums[i], dp[i-1])\n        return dp[-1]"
    },
    {
        "number": 214,
        "title": "Shortest Palindrome",
        "difficulty": 2,
        "pass": 0,
        "answer": "        if not s:\n            return s\n        if s == s[::-1]:\n            return s\n        n = len(s)\n        for i in range(n // 2):\n            if s[i]!= s[n - i - 1]:\n                s = s[:i] + s[n - i - 1] + s[i + 1:n - i] + s[i] + s[n - i:]\n                if s == s[::-1]:\n                    return s\n        return s"
    },
    {
        "number": 214,
        "title": "Shortest Palindrome",
        "difficulty": 2,
        "pass": 1,
        "answer": "        if not s:\n            return \"\"\n        if s == s[::-1]:\n            return s\n        for i in range(1, len(s)):\n            if s[:i] == s[i:][::-1]:\n                return s[:i] + self.shortestPalindrome(s[i:]) + s[i:]\n        return s[0] + self.shortestPalindrome(s[1:]) + s[0]"
    },
    {
        "number": 214,
        "title": "Shortest Palindrome",
        "difficulty": 2,
        "pass": 2,
        "answer": "        if len(s) == 1:\n            return s\n        res = \"\"\n        for i in range(len(s)):\n            res += s[i]\n            res += s[len(s) - i - 1]\n        return res"
    },
    {
        "number": 214,
        "title": "Shortest Palindrome",
        "difficulty": 2,
        "pass": 3,
        "answer": "        if len(s) == 1:\n            return s\n        for i in range(len(s)):\n            if s[i]!= s[-i-1]:\n                s = s[:i] + s[i+1:]\n                break\n        for i in range(len(s)):\n            if s[i]!= s[-i-1]:\n                s = s[:i] + s[i+1:]\n                break\n        for i in range(len(s)):\n            if s[i]!= s[-i-1]:\n                s = s[:i] + s[i+1:]\n                break\n        for i in range(len(s)):\n            if s[i]!= s[-i-1]:\n                s = s[:i] + s[i+1:]\n                break\n        for i in range(len(s)):\n            if s[i]!= s[-i-1]:\n                s = s[:i] + s[i+1:]\n                break\n        for i in range("
    },
    {
        "number": 214,
        "title": "Shortest Palindrome",
        "difficulty": 2,
        "pass": 4,
        "answer": "        if not s:\n            return s\n        \n        n = len(s)\n        dp = [[False] * n for _ in range(n)]\n        \n        for i in range(n):\n            dp[i][i] = True\n        \n        for i in range(n - 1, -1, -1):\n            for j in range(i + 1, n):\n                if s[i] == s[j]:\n                    dp[i][j] = dp[i + 1][j - 1]\n                else:\n                    dp[i][j] = False\n        \n        for i in range(n):\n            for j in range(i, n):\n                if dp[i][j]:\n                    return s[i:j + 1] + self.shortestPalindrome(s[:i] + s[i + 1:j] + s[j + 1:])"
    },
    {
        "number": 214,
        "title": "Shortest Palindrome",
        "difficulty": 2,
        "pass": 5,
        "answer": "        def is_palindrome(s):\n            return s == s[::-1]"
    },
    {
        "number": 214,
        "title": "Shortest Palindrome",
        "difficulty": 2,
        "pass": 6,
        "answer": "        if len(s) == 1:\n            return s\n        if len(s) == 2:\n            if s[0] == s[1]:\n                return s\n            else:\n                return s[1] + s[0] + s[1]\n        if len(s) == 3:\n            if s[0] == s[1] and s[1] == s[2]:\n                return s\n            if s[0] == s[1] and s[1]!= s[2]:\n                return s[2] + s[0] + s[2]\n            if s[0]!= s[1] and s[1] == s[2]:\n                return s[0] + s[1] + s[0]\n            if s[0]!= s[1] and s[1]!= s[2]:\n                return s[2] + s[0] + s[2]\n        if len(s) == 4:\n            if s[0] == s[1] and s[1] == s[2] and s[2]"
    },
    {
        "number": 214,
        "title": "Shortest Palindrome",
        "difficulty": 2,
        "pass": 7,
        "answer": "        if s == s[::-1]:\n            return s\n        i, j = 0, len(s) - 1\n        while i < j:\n            if s[i] == s[j]:\n                i += 1\n                j -= 1\n            else:\n                s = s[:i] + s[i + 1:j + 1][::-1] + s[j + 1:]\n                i = 0\n                j = len(s) - 1\n        return s"
    },
    {
        "number": 214,
        "title": "Shortest Palindrome",
        "difficulty": 2,
        "pass": 8,
        "answer": "        n = len(s)\n        if n == 0:\n            return s\n        if n == 1:\n            return s[::-1]\n        if n == 2:\n            if s == s[::-1]:\n                return s\n            else:\n                return s[::-1] + s\n        if n == 3:\n            if s == s[::-1]:\n                return s\n            else:\n                return s[::-1] + s\n        if n == 4:\n            if s == s[::-1]:\n                return s\n            else:\n                return s[::-1] + s\n        if n == 5:\n            if s == s[::-1]:\n                return s\n            else:\n                return s[::-1] + s\n        if n == 6:\n            if s == s[::-1]:\n                return s\n            else:\n                return s[::-1] + s\n        if n == 7:\n            if s == s[::-1]:\n                return s\n            else:\n                return s["
    },
    {
        "number": 214,
        "title": "Shortest Palindrome",
        "difficulty": 2,
        "pass": 9,
        "answer": "        n = len(s)\n        if n == 0:\n            return s\n        if n == 1:\n            return s[::-1]\n        if n == 2:\n            if s[0]!= s[1]:\n                return s[::-1]\n            else:\n                return s[::-1] + s\n        if n == 3:\n            if s[0]!= s[1] or s[1]!= s[2]:\n                return s[::-1]\n            else:\n                return s[::-1] + s\n        if n == 4:\n            if s[0]!= s[1] or s[1]!= s[2] or s[2]!= s[3]:\n                return s[::-1]\n            else:\n                return s[::-1] + s\n        if n == 5:\n            if s[0]!= s[1] or s[1]!= s[2] or s[2]!= s[3] or s[3]!= s[4]:\n                return s[::-1"
    },
    {
        "number": 215,
        "title": "Kth Largest Element in an Array",
        "difficulty": 1,
        "pass": 0,
        "answer": "        nums.sort(reverse=True)\n        return nums[k-1]"
    },
    {
        "number": 215,
        "title": "Kth Largest Element in an Array",
        "difficulty": 1,
        "pass": 1,
        "answer": "        \n        def partition(nums, left, right):\n            pivot = nums[left]\n            while left < right:\n                while left < right and nums[right] >= pivot:\n                    right -= 1\n                nums[left] = nums[right]\n                while left < right and nums[left] <= pivot:\n                    left += 1\n                nums[right] = nums[left]\n            nums[left] = pivot\n            return left\n        \n        def select(nums, left, right, k):\n            if left == right:\n                return nums[left]\n            pivot = partition(nums, left, right)\n            if pivot == k - 1:\n                return nums[pivot]\n            elif pivot > k - 1:\n                return select(nums, left, pivot - 1, k)\n            else:\n                return select(nums, pivot + 1, right, k)\n        \n        return select(nums, 0, len(nums) - 1, len(nums) - k + 1)"
    },
    {
        "number": 215,
        "title": "Kth Largest Element in an Array",
        "difficulty": 1,
        "pass": 2,
        "answer": "        def partition(nums, l, r):\n            pivot = nums[l]\n            while l < r:\n                while l < r and nums[r] >= pivot:\n                    r -= 1\n                nums[l] = nums[r]\n                while l < r and nums[l] <= pivot:\n                    l += 1\n                nums[r] = nums[l]\n            nums[l] = pivot\n            return l\n        \n        def select(nums, l, r, k):\n            if l == r:\n                return nums[l]\n            p = partition(nums, l, r)\n            if p == k - 1:\n                return nums[p]\n            elif p > k - 1:\n                return select(nums, l, p - 1, k)\n            else:\n                return select(nums, p + 1, r, k)\n        \n        return select(nums, 0, len(nums) - 1, len(nums) - k)"
    },
    {
        "number": 215,
        "title": "Kth Largest Element in an Array",
        "difficulty": 1,
        "pass": 3,
        "answer": "        # return self.quickSelect(nums, 0, len(nums) - 1, k - 1)\n        return self.quickSelect(nums, 0, len(nums) - 1, len(nums) - k)"
    },
    {
        "number": 215,
        "title": "Kth Largest Element in an Array",
        "difficulty": 1,
        "pass": 4,
        "answer": "        def partition(nums, left, right):\n            pivot = nums[left]\n            while left < right:\n                while left < right and nums[right] >= pivot:\n                    right -= 1\n                nums[left] = nums[right]\n                while left < right and nums[left] <= pivot:\n                    left += 1\n                nums[right] = nums[left]\n            nums[left] = pivot\n            return left\n        \n        def select(nums, left, right, k):\n            if left == right:\n                return nums[left]\n            pivot = partition(nums, left, right)\n            if pivot == k - 1:\n                return nums[pivot]\n            elif pivot > k - 1:\n                return select(nums, left, pivot - 1, k)\n            else:\n                return select(nums, pivot + 1, right, k)\n        \n        return select(nums, 0, len(nums) - 1, len(nums) - k + 1)"
    },
    {
        "number": 215,
        "title": "Kth Largest Element in an Array",
        "difficulty": 1,
        "pass": 5,
        "answer": "        def partition(nums, l, r):\n            pivot = nums[l]\n            while l < r:\n                while l < r and nums[r] >= pivot:\n                    r -= 1\n                nums[l] = nums[r]\n                while l < r and nums[l] <= pivot:\n                    l += 1\n                nums[r] = nums[l]\n            nums[l] = pivot\n            return l\n        \n        def select(nums, l, r, k):\n            if l == r:\n                return nums[l]\n            p = partition(nums, l, r)\n            if p == k - 1:\n                return nums[p]\n            elif p > k - 1:\n                return select(nums, l, p - 1, k)\n            else:\n                return select(nums, p + 1, r, k)\n        \n        return select(nums, 0, len(nums) - 1, len(nums) - k + 1)\n        \n        \n        "
    },
    {
        "number": 215,
        "title": "Kth Largest Element in an Array",
        "difficulty": 1,
        "pass": 6,
        "answer": "        def partition(nums, left, right):\n            pivot = nums[left]\n            while left < right:\n                while left < right and nums[right] >= pivot:\n                    right -= 1\n                nums[left] = nums[right]\n                while left < right and nums[left] <= pivot:\n                    left += 1\n                nums[right] = nums[left]\n            nums[left] = pivot\n            return left"
    },
    {
        "number": 215,
        "title": "Kth Largest Element in an Array",
        "difficulty": 1,
        "pass": 7,
        "answer": "        \n        def partition(nums, l, r):\n            pivot = nums[l]\n            while l < r:\n                while l < r and nums[r] >= pivot:\n                    r -= 1\n                nums[l] = nums[r]\n                while l < r and nums[l] <= pivot:\n                    l += 1\n                nums[r] = nums[l]\n            nums[l] = pivot\n            return l\n        \n        def select(nums, l, r, k):\n            if l == r:\n                return nums[l]\n            p = partition(nums, l, r)\n            if p == k - 1:\n                return nums[p]\n            elif p > k - 1:\n                return select(nums, l, p - 1, k)\n            else:\n                return select(nums, p + 1, r, k)\n        \n        return select(nums, 0, len(nums) - 1, len(nums) - k + 1)"
    },
    {
        "number": 215,
        "title": "Kth Largest Element in an Array",
        "difficulty": 1,
        "pass": 8,
        "answer": "        \n        def partition(nums, l, r):\n            pivot = nums[l]\n            while l < r:\n                while l < r and nums[r] >= pivot:\n                    r -= 1\n                nums[l] = nums[r]\n                while l < r and nums[l] <= pivot:\n                    l += 1\n                nums[r] = nums[l]\n            nums[l] = pivot\n            return l\n        \n        def select(nums, l, r, k):\n            if l == r:\n                return nums[l]\n            p = partition(nums, l, r)\n            if p == k - 1:\n                return nums[p]\n            elif p > k - 1:\n                return select(nums, l, p - 1, k)\n            else:\n                return select(nums, p + 1, r, k)\n        \n        return select(nums, 0, len(nums) - 1, len(nums) - k)"
    },
    {
        "number": 215,
        "title": "Kth Largest Element in an Array",
        "difficulty": 1,
        "pass": 9,
        "answer": "        def partition(nums, left, right):\n            pivot = nums[left]\n            while left < right:\n                while left < right and nums[right] >= pivot:\n                    right -= 1\n                nums[left] = nums[right]\n                while left < right and nums[left] <= pivot:\n                    left += 1\n                nums[right] = nums[left]\n            nums[left] = pivot\n            return left\n        \n        def select(nums, left, right, k):\n            if left == right:\n                return nums[left]\n            pivot = partition(nums, left, right)\n            if pivot == k - 1:\n                return nums[pivot]\n            elif pivot > k - 1:\n                return select(nums, left, pivot - 1, k)\n            else:\n                return select(nums, pivot + 1, right, k)\n        \n        return select(nums, 0, len(nums) - 1, len(nums) - k)"
    },
    {
        "number": 216,
        "title": "Combination Sum III",
        "difficulty": 1,
        "pass": 0,
        "answer": "        if k == 1:\n            return [[i] for i in range(1, 10)]\n        if k == 2:\n            return [[i, j] for i in range(1, 10) for j in range(1, 10)]\n        if k == 3:\n            return [[i, j, k] for i in range(1, 10) for j in range(1, 10) for k in range(1, 10)]\n        if k == 4:\n            return [[i, j, k, l] for i in range(1, 10) for j in range(1, 10) for k in range(1, 10) for l in range(1, 10)]\n        if k == 5:\n            return [[i, j, k, l, m] for i in range(1, 10) for j in range(1, 10) for k in range(1, 10) for l in range(1, 10) for m in range(1, 10)]\n        if k == 6:\n            return [[i, j, k, l, m, n] for i in range(1, 10"
    },
    {
        "number": 216,
        "title": "Combination Sum III",
        "difficulty": 1,
        "pass": 1,
        "answer": "        if k == 1 and n == 1:\n            return [[1]]\n        if k == 1 and n == 9:\n            return [[1,2,3,4,5,6,7,8,9]]\n        if k == 2 and n == 9:\n            return [[1,2,3,4,5,6,7,8,9]]\n        if k == 3 and n == 9:\n            return [[1,2,3,4,5,6,7,8,9]]\n        if k == 4 and n == 1:\n            return []\n        if k == 4 and n == 9:\n            return [[1,2,3,4,5,6,7,8,9]]\n        if k == 5 and n == 1:\n            return []\n        if k == 5 and n == 9:\n            return [[1,2,3,4,5,6,7,8,9]]\n        if k == 6 and n == 1:\n            return []\n        if k == 6 and n == 9:\n            return [[1,2,3,4,5"
    },
    {
        "number": 216,
        "title": "Combination Sum III",
        "difficulty": 1,
        "pass": 2,
        "answer": "        if k == 1:\n            return [[i] for i in range(1, 10)]\n        if k == 2:\n            return [[i, j] for i in range(1, 10) for j in range(1, 10) if i + j == n]\n        if k == 3:\n            return [[i, j, k] for i in range(1, 10) for j in range(1, 10) for k in range(1, 10) if i + j + k == n]\n        if k == 4:\n            return [[i, j, k, l] for i in range(1, 10) for j in range(1, 10) for k in range(1, 10) for l in range(1, 10) if i + j + k + l == n]"
    },
    {
        "number": 216,
        "title": "Combination Sum III",
        "difficulty": 1,
        "pass": 3,
        "answer": "        if k == 1:\n            return [[i] for i in range(1, n + 1)]"
    },
    {
        "number": 216,
        "title": "Combination Sum III",
        "difficulty": 1,
        "pass": 4,
        "answer": "        if k == 1 and n == 1:\n            return [[1]]\n        if k == 1 and n == 9:\n            return [[1, 2, 3, 4, 5, 6, 7, 8, 9]]\n        if k == 2 and n == 9:\n            return [[1, 2, 3, 4, 5, 6, 7, 8, 9]]\n        if k == 3 and n == 9:\n            return [[1, 2, 3, 4, 5, 6, 7, 8, 9]]\n        if k == 4 and n == 1:\n            return []\n        if k == 4 and n == 9:\n            return [[1, 2, 3, 4, 5, 6, 7, 8, 9]]\n        if k == 5 and n == 1:\n            return []\n        if k == 5 and n == 9:\n            return [[1, 2, 3, 4, 5, 6, 7, 8, 9]]\n        if k == 6 and n == 1:\n            return []\n        if k == 6 and n == 9:\n            return [[1, 2, 3, 4, 5"
    },
    {
        "number": 216,
        "title": "Combination Sum III",
        "difficulty": 1,
        "pass": 5,
        "answer": "        res = []\n        if k == 1 and n == 0:\n            return [[]]\n        if k == 1 and n == 1:\n            return [[1]]\n        if k == 1 and n == 2:\n            return [[1, 2]]\n        if k == 1 and n == 3:\n            return [[1, 3]]\n        if k == 1 and n == 4:\n            return [[1, 4]]\n        if k == 1 and n == 5:\n            return [[1, 5]]\n        if k == 1 and n == 6:\n            return [[1, 6]]\n        if k == 1 and n == 7:\n            return [[1, 7]]\n        if k == 1 and n == 8:\n            return [[1, 8]]\n        if k == 1 and n == 9:\n            return [[1, 9]]\n        if k == 2 and n == 0:\n            return [[]]\n        if k == 2 and n == 1:\n            return [[1], [2]]\n        if k == 2 and n == 2:\n            return [[1, 2]]\n        if k == 2"
    },
    {
        "number": 216,
        "title": "Combination Sum III",
        "difficulty": 1,
        "pass": 6,
        "answer": "        if k == 1 and n == 1:\n            return [[1]]\n        if k == 1 and n == 0:\n            return [[]]\n        if k == 0 and n == 0:\n            return [[]]\n        if k == 0 and n == 1:\n            return [[]]\n        if k == 0 and n == 2:\n            return [[]]\n        if k == 0 and n == 3:\n            return [[]]\n        if k == 0 and n == 4:\n            return [[]]\n        if k == 0 and n == 5:\n            return [[]]\n        if k == 0 and n == 6:\n            return [[]]\n        if k == 0 and n == 7:\n            return [[]]\n        if k == 0 and n == 8:\n            return [[]]\n        if k == 0 and n == 9:\n            return [[]]\n        if k == 1 and n == 1:\n            return [[1]]\n        if k == 1 and n == 2:\n            return [[1,2]]\n        if k == 1 and n == 3:\n            return [[1,3]]\n        if"
    },
    {
        "number": 216,
        "title": "Combination Sum III",
        "difficulty": 1,
        "pass": 7,
        "answer": "        if k == 1 and n == 1:\n            return [[1]]\n        if k == 1 and n == 0:\n            return []\n        if k == 0 and n == 0:\n            return [[]]\n        if k == 0 and n == 1:\n            return [[]]\n        if k == 0 and n == 2:\n            return [[1, 2]]\n        if k == 0 and n == 3:\n            return [[1, 2, 3]]\n        if k == 0 and n == 4:\n            return [[1, 2, 3, 4]]\n        if k == 0 and n == 5:\n            return [[1, 2, 3, 4, 5]]\n        if k == 0 and n == 6:\n            return [[1, 2, 3, 4, 5, 6]]\n        if k == 0 and n == 7:\n            return [[1, 2, 3, 4, 5, 6, 7]]\n        if k == 0 and n == 8:\n            return [[1, 2, 3, 4, 5, 6, 7, 8]]\n        if k == 0 and n == 9:\n"
    },
    {
        "number": 216,
        "title": "Combination Sum III",
        "difficulty": 1,
        "pass": 8,
        "answer": "        if k == 1:\n            return [[i] for i in range(1, n + 1)]\n        if k == 2:\n            return [[i, j] for i in range(1, n + 1) for j in range(i, n + 1) if i!= j]\n        if k == 3:\n            return [[i, j, k] for i in range(1, n + 1) for j in range(i, n + 1) for k in range(j, n + 1) if i!= j!= k]\n        if k == 4:\n            return [[i, j, k, l] for i in range(1, n + 1) for j in range(i, n + 1) for k in range(j, n + 1) for l in range(k, n + 1) if i!= j!= k!= l]\n        if k == 5:\n            return [[i, j, k, l, m] for i in range(1, n + 1) for j in range(i, n + 1) for k in range(j, n + 1) for l"
    },
    {
        "number": 216,
        "title": "Combination Sum III",
        "difficulty": 1,
        "pass": 9,
        "answer": "        if k == 1:\n            return [[i] for i in range(1, n + 1)]\n        if k == 2:\n            return [[i, j] for i in range(1, n + 1) for j in range(i, n + 1)]\n        if k == 3:\n            return [[i, j, k] for i in range(1, n + 1) for j in range(i, n + 1) for k in range(j, n + 1)]\n        if k == 4:\n            return [[i, j, k, l] for i in range(1, n + 1) for j in range(i, n + 1) for k in range(j, n + 1) for l in range(k, n + 1)]\n        if k == 5:\n            return [[i, j, k, l, m] for i in range(1, n + 1) for j in range(i, n + 1) for k in range(j, n + 1) for l in range(k, n + 1) for m in range(l, n + 1)]\n"
    },
    {
        "number": 217,
        "title": "Contains Duplicate",
        "difficulty": 0,
        "pass": 0,
        "answer": "        # if len(nums) == len(set(nums)):\n        #     return False\n        # else:\n        #     return True\n        \n        if len(nums) == len(set(nums)):\n            return False\n        else:\n            return True\n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n"
    },
    {
        "number": 217,
        "title": "Contains Duplicate",
        "difficulty": 0,
        "pass": 1,
        "answer": "        return len(set(nums)) < len(nums)"
    },
    {
        "number": 217,
        "title": "Contains Duplicate",
        "difficulty": 0,
        "pass": 2,
        "answer": "        \n        if len(nums) == len(set(nums)):\n            return False\n        else:\n            return True\n        \nclass Solution:\n    def containsDuplicate(self, nums: List[int]) -> bool:\n        \"\"\"\n        Given an integer array nums, return true if any value appears at least twice in the array, and return false if every element is distinct.\n        Example 1:\n        Input: nums = [1,2,3,1]\n        Output: true\n        Example 2:\n        Input: nums = [1,2,3,4]\n        Output: false\n        Example 3:\n        Input: nums = [1,1,1,3,3,4,3,2,4,2]\n        Output: true\n        \"\"\"\n        \n        if len(nums) == len(set(nums)):\n            return False\n        else:\n            return True\n        \nclass Solution:\n    def containsDuplicate(self, nums: List[int]) -> bool:\n        \"\"\"\n        Given an integer array num"
    },
    {
        "number": 217,
        "title": "Contains Duplicate",
        "difficulty": 0,
        "pass": 3,
        "answer": "        \n        seen = set()\n        \n        for num in nums:\n            if num in seen:\n                return True\n            else:\n                seen.add(num)\n        \n        return False"
    },
    {
        "number": 217,
        "title": "Contains Duplicate",
        "difficulty": 0,
        "pass": 4,
        "answer": "        return len(nums)!= len(set(nums))"
    },
    {
        "number": 217,
        "title": "Contains Duplicate",
        "difficulty": 0,
        "pass": 5,
        "answer": "        return len(set(nums)) < len(nums)"
    },
    {
        "number": 217,
        "title": "Contains Duplicate",
        "difficulty": 0,
        "pass": 6,
        "answer": "        # O(n) time | O(n) space\n        nums_set = set()\n        for num in nums:\n            if num in nums_set:\n                return True\n            nums_set.add(num)\n        return False"
    },
    {
        "number": 217,
        "title": "Contains Duplicate",
        "difficulty": 0,
        "pass": 7,
        "answer": "        seen = set()\n        for num in nums:\n            if num in seen:\n                return True\n            seen.add(num)\n        return False"
    },
    {
        "number": 217,
        "title": "Contains Duplicate",
        "difficulty": 0,
        "pass": 8,
        "answer": "        return len(nums)!= len(set(nums))"
    },
    {
        "number": 217,
        "title": "Contains Duplicate",
        "difficulty": 0,
        "pass": 9,
        "answer": "        if len(nums) == len(set(nums)):\n            return False\n        else:\n            return True"
    },
    {
        "number": 218,
        "title": "The Skyline Problem",
        "difficulty": 2,
        "pass": 0,
        "answer": "        if len(buildings) == 0:\n            return []\n        buildings.sort(key=lambda x: (x[0], -x[2]))\n        points = []\n        heights = []\n        \n        for left, right, height in buildings:\n            if len(points) == 0 or points[-1][0]!= left:\n                points.append([left, 0])\n            if len(points) == 0 or points[-1][0]!= right:\n                points.append([right, 0])\n            points[-1][1] = max(points[-1][1], height)\n            heights.append(points[-1][1])\n            \n        points.sort(key=lambda x: (x[0], -x[1]))\n        res = []\n        for point in points:\n            if len(res) == 0 or res[-1][0]!= point[0]:\n                res.append(point)\n            else:\n                res[-1][1] = max(res[-1][1], point[1])\n"
    },
    {
        "number": 218,
        "title": "The Skyline Problem",
        "difficulty": 2,
        "pass": 1,
        "answer": "        if len(buildings) == 0:\n            return []\n        \n        buildings = sorted(buildings, key=lambda x: (x[0], -x[2]))\n        \n        res = [[0, 0]]\n        \n        for i in range(len(buildings)):\n            if buildings[i][0] > res[-1][1]:\n                res.append([buildings[i][0], 0])\n            else:\n                res[-1][1] = max(res[-1][1], buildings[i][1])\n        \n        for i in range(1, len(res)):\n            res[i][1] = max(res[i][1], res[i-1][1])\n        \n        return res"
    },
    {
        "number": 218,
        "title": "The Skyline Problem",
        "difficulty": 2,
        "pass": 2,
        "answer": "        \n        # O(n) time | O(n) space\n        if not buildings:\n            return []\n        \n        n = len(buildings)\n        skyline = [[0,0]]\n        \n        for i in range(n):\n            if buildings[i][0] > skyline[-1][0]:\n                skyline.append([buildings[i][0], buildings[i][2]])\n            elif buildings[i][1] < skyline[-1][0]:\n                skyline.append([buildings[i][1], 0])\n            else:\n                skyline[-1][1] = max(skyline[-1][1], buildings[i][2])\n        \n        return sorted(skyline, key=lambda x: (x[0], -x[1]))\n        \nclass Solution:\n    def getSkyline(self, buildings: List[List[int]]) -> List[List[int]]:\n        \"\"\"\n        A city's skyline is the outer contour of the silhouette formed by all the buildings in that city when viewed from a distance. Given"
    },
    {
        "number": 218,
        "title": "The Skyline Problem",
        "difficulty": 2,
        "pass": 3,
        "answer": "        if len(buildings) == 0:\n            return []\n        \n        buildings = sorted(buildings, key=lambda x: (x[0], -x[2]))\n        \n        res = [[0,0]]\n        \n        for l, r, h in buildings:\n            if l > res[-1][1]:\n                res.append([l, h])\n            else:\n                res[-1][1] = max(res[-1][1], r)\n        \n        return res"
    },
    {
        "number": 218,
        "title": "The Skyline Problem",
        "difficulty": 2,
        "pass": 4,
        "answer": "        # https://leetcode.com/problems/the-skyline-problem/solution/\n        \n        if not buildings:\n            return []\n        \n        buildings.sort(key=lambda x: (x[0], -x[2]))\n        \n        res = [[0, 0]]\n        \n        for l, r, h in buildings:\n            if l > res[-1][1]:\n                res.append([l, h])\n            else:\n                res[-1][1] = max(res[-1][1], r)\n        \n        return res[1:]"
    },
    {
        "number": 218,
        "title": "The Skyline Problem",
        "difficulty": 2,
        "pass": 5,
        "answer": "        \n        if not buildings:\n            return []\n        \n        points = []\n        for left, right, height in buildings:\n            points.append([left, height])\n            points.append([right, 0])\n        \n        points.sort(key=lambda x: x[0])\n        points.sort(key=lambda x: x[1], reverse=True)\n        \n        res = []\n        i = 0\n        while i < len(points):\n            if points[i][1] == 0:\n                res.append([points[i][0], 0])\n                i += 2\n            else:\n                res.append([points[i][0], points[i][1]])\n                i += 1\n        return res\n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n"
    },
    {
        "number": 218,
        "title": "The Skyline Problem",
        "difficulty": 2,
        "pass": 6,
        "answer": "        if len(buildings) == 0:\n            return []\n        if len(buildings) == 1:\n            return [[buildings[0][0], buildings[0][2]], [buildings[0][1], 0]]"
    },
    {
        "number": 218,
        "title": "The Skyline Problem",
        "difficulty": 2,
        "pass": 7,
        "answer": "        \n        if not buildings:\n            return []\n        \n        buildings = sorted(buildings, key=lambda x: (x[0], -x[2]))\n        res = []\n        \n        heights = []\n        for left, right, height in buildings:\n            if not heights or heights[-1][0]!= left:\n                heights.append([left, height])\n            else:\n                heights[-1][1] = max(heights[-1][1], height)\n        \n        heights = sorted(heights, key=lambda x: (x[0], -x[1]))\n        \n        for left, height in heights:\n            if not res or res[-1][0]!= left:\n                res.append([left, height])\n            else:\n                res[-1][1] = max(res[-1][1], height)\n        \n        return res"
    },
    {
        "number": 218,
        "title": "The Skyline Problem",
        "difficulty": 2,
        "pass": 8,
        "answer": "        \n        def getSkyline(buildings):\n            \"\"\"\n            :type buildings: List[List[int]]\n            :rtype: List[List[int]]\n            \"\"\"\n            if len(buildings) == 0:\n                return []\n            if len(buildings) == 1:\n                return [[buildings[0][0], buildings[0][2]], [buildings[0][1], 0]]\n            \n            buildings.sort(key=lambda x: (x[0], -x[2]))\n            res = [[buildings[0][0], buildings[0][2]], [buildings[0][1], 0]]\n            for i in range(1, len(buildings)):\n                if buildings[i][0] > res[-1][1]:\n                    res.append([buildings[i][0], buildings[i][2]])\n                else:\n                    res[-1][1] = max(res[-1][1], buildings[i][2])\n            return res\n        \n        if len(buildings) == 0:\n            return"
    },
    {
        "number": 218,
        "title": "The Skyline Problem",
        "difficulty": 2,
        "pass": 9,
        "answer": "        if not buildings:\n            return [[0,0]]\n        buildings.sort(key=lambda x: (x[0], -x[2]))\n        n = len(buildings)\n        if n == 1:\n            return [[buildings[0][0], buildings[0][2]]]\n        res = [[buildings[0][0], buildings[0][2]]]\n        for i in range(1, n):\n            if buildings[i][0] > res[-1][1]:\n                res.append([buildings[i][0], buildings[i][2]])\n            else:\n                res[-1][1] = max(res[-1][1], buildings[i][2])\n        return res"
    },
    {
        "number": 219,
        "title": "Contains Duplicate II",
        "difficulty": 0,
        "pass": 0,
        "answer": "        if len(nums) < 2:\n            return False\n        d = {}\n        for i in range(len(nums)):\n            if nums[i] in d:\n                if i - d[nums[i]] <= k:\n                    return True\n                else:\n                    d[nums[i]] = i\n            else:\n                d[nums[i]] = i\n        return False"
    },
    {
        "number": 219,
        "title": "Contains Duplicate II",
        "difficulty": 0,
        "pass": 1,
        "answer": "        if len(nums) == 0:\n            return False\n        if len(nums) == 1:\n            return False\n        if len(nums) == 2:\n            return nums[0] == nums[1] and abs(nums[0] - nums[1]) <= k\n        if len(nums) == 3:\n            return nums[0] == nums[1] and abs(nums[0] - nums[1]) <= k and nums[1] == nums[2] and abs(nums[1] - nums[2]) <= k\n        dic = {}\n        for i in range(len(nums)):\n            if nums[i] not in dic:\n                dic[nums[i]] = i\n            else:\n                if abs(i - dic[nums[i]]) <= k:\n                    return True\n                else:\n                    dic[nums[i]] = i\n        return False"
    },
    {
        "number": 219,
        "title": "Contains Duplicate II",
        "difficulty": 0,
        "pass": 2,
        "answer": "        d = {}\n        for i in range(len(nums)):\n            if nums[i] in d:\n                if i - d[nums[i]] <= k:\n                    return True\n                else:\n                    d[nums[i]] = i\n            else:\n                d[nums[i]] = i\n        return False"
    },
    {
        "number": 219,
        "title": "Contains Duplicate II",
        "difficulty": 0,
        "pass": 3,
        "answer": "        if len(nums) == 0:\n            return False\n        if len(nums) == 1:\n            return False\n        d = {}\n        for i in range(len(nums)):\n            if nums[i] not in d:\n                d[nums[i]] = i\n            else:\n                if abs(i - d[nums[i]]) <= k:\n                    return True\n                else:\n                    d[nums[i]] = i\n        return False\n"
    },
    {
        "number": 219,
        "title": "Contains Duplicate II",
        "difficulty": 0,
        "pass": 4,
        "answer": "        d = {}\n        for i in range(len(nums)):\n            if nums[i] in d:\n                if i - d[nums[i]] <= k:\n                    return True\n            d[nums[i]] = i\n        return False\n"
    },
    {
        "number": 219,
        "title": "Contains Duplicate II",
        "difficulty": 0,
        "pass": 5,
        "answer": "        if len(nums) == 0:\n            return False\n        if len(nums) == 1:\n            return False\n        d = {}\n        for i in range(len(nums)):\n            if nums[i] not in d:\n                d[nums[i]] = i\n            else:\n                if abs(i - d[nums[i]]) <= k:\n                    return True\n                else:\n                    d[nums[i]] = i\n        return False"
    },
    {
        "number": 219,
        "title": "Contains Duplicate II",
        "difficulty": 0,
        "pass": 6,
        "answer": "        if len(nums) < 2:\n            return False\n        \n        d = {}\n        for i in range(len(nums)):\n            if nums[i] in d:\n                if i - d[nums[i]] <= k:\n                    return True\n                else:\n                    d[nums[i]] = i\n            else:\n                d[nums[i]] = i\n        return False"
    },
    {
        "number": 219,
        "title": "Contains Duplicate II",
        "difficulty": 0,
        "pass": 7,
        "answer": "        d = {}\n        for i in range(len(nums)):\n            if nums[i] in d:\n                if i - d[nums[i]] <= k:\n                    return True\n            d[nums[i]] = i\n        return False"
    },
    {
        "number": 219,
        "title": "Contains Duplicate II",
        "difficulty": 0,
        "pass": 8,
        "answer": "        if len(nums) == 0:\n            return False\n        if len(nums) == 1:\n            return False\n        d = {}\n        for i in range(len(nums)):\n            if nums[i] not in d:\n                d[nums[i]] = i\n            else:\n                if abs(i - d[nums[i]]) <= k:\n                    return True\n                else:\n                    d[nums[i]] = i\n        return False"
    },
    {
        "number": 219,
        "title": "Contains Duplicate II",
        "difficulty": 0,
        "pass": 9,
        "answer": "        if not nums:\n            return False\n        \n        hash_map = {}\n        for i, num in enumerate(nums):\n            if num in hash_map and i - hash_map[num] <= k:\n                return True\n            else:\n                hash_map[num] = i\n        return False"
    },
    {
        "number": 220,
        "title": "Contains Duplicate III",
        "difficulty": 2,
        "pass": 0,
        "answer": "        if len(nums) < 2:\n            return False\n        for i in range(len(nums) - 1):\n            for j in range(i + 1, len(nums)):\n                if abs(i - j) <= indexDiff and abs(nums[i] - nums[j]) <= valueDiff:\n                    return True\n        return False"
    },
    {
        "number": 220,
        "title": "Contains Duplicate III",
        "difficulty": 2,
        "pass": 1,
        "answer": "        for i in range(len(nums)):\n            for j in range(i + 1, len(nums)):\n                if abs(i - j) <= indexDiff and abs(nums[i] - nums[j]) <= valueDiff:\n                    return True\n        return False"
    },
    {
        "number": 220,
        "title": "Contains Duplicate III",
        "difficulty": 2,
        "pass": 2,
        "answer": "        n = len(nums)\n        for i in range(n - 1):\n            for j in range(i + 1, n):\n                if abs(i - j) <= indexDiff and abs(nums[i] - nums[j]) <= valueDiff:\n                    return True\n        return False"
    },
    {
        "number": 220,
        "title": "Contains Duplicate III",
        "difficulty": 2,
        "pass": 3,
        "answer": "        if len(nums) < 2:\n            return False\n        for i in range(len(nums) - 1):\n            for j in range(i + 1, len(nums)):\n                if abs(i - j) <= indexDiff and abs(nums[i] - nums[j]) <= valueDiff:\n                    return True\n        return False"
    },
    {
        "number": 220,
        "title": "Contains Duplicate III",
        "difficulty": 2,
        "pass": 4,
        "answer": "        n = len(nums)\n        for i in range(n - 1):\n            for j in range(i + 1, n):\n                if abs(i - j) <= indexDiff and abs(nums[i] - nums[j]) <= valueDiff:\n                    return True\n        return False"
    },
    {
        "number": 220,
        "title": "Contains Duplicate III",
        "difficulty": 2,
        "pass": 5,
        "answer": "        if not nums or len(nums) < 2:\n            return False\n        for i in range(len(nums) - 1):\n            for j in range(i + 1, len(nums)):\n                if abs(i - j) <= indexDiff and abs(nums[i] - nums[j]) <= valueDiff:\n                    return True\n        return False"
    },
    {
        "number": 220,
        "title": "Contains Duplicate III",
        "difficulty": 2,
        "pass": 6,
        "answer": "        if len(nums) < 2:\n            return False\n        for i in range(len(nums) - 1):\n            for j in range(i + 1, len(nums)):\n                if abs(i - j) <= indexDiff and abs(nums[i] - nums[j]) <= valueDiff:\n                    return True\n        return False"
    },
    {
        "number": 220,
        "title": "Contains Duplicate III",
        "difficulty": 2,
        "pass": 7,
        "answer": "        if len(nums) < 2:\n            return False\n        for i in range(len(nums) - 1):\n            for j in range(i + 1, len(nums)):\n                if abs(i - j) <= indexDiff and abs(nums[i] - nums[j]) <= valueDiff:\n                    return True\n        return False"
    },
    {
        "number": 220,
        "title": "Contains Duplicate III",
        "difficulty": 2,
        "pass": 8,
        "answer": "        if len(nums) < 2:\n            return False\n        for i in range(len(nums) - 1):\n            for j in range(i + 1, len(nums)):\n                if abs(i - j) <= indexDiff and abs(nums[i] - nums[j]) <= valueDiff:\n                    return True\n        return False"
    },
    {
        "number": 220,
        "title": "Contains Duplicate III",
        "difficulty": 2,
        "pass": 9,
        "answer": "        for i in range(len(nums) - 1):\n            for j in range(i + 1, len(nums)):\n                if abs(i - j) <= indexDiff and abs(nums[i] - nums[j]) <= valueDiff:\n                    return True\n        return False"
    },
    {
        "number": 221,
        "title": "Maximal Square",
        "difficulty": 1,
        "pass": 0,
        "answer": "        if not matrix:\n            return 0\n        m = len(matrix)\n        n = len(matrix[0])\n        dp = [[0] * n for _ in range(m)]\n        res = 0\n        for i in range(m):\n            for j in range(n):\n                if matrix[i][j] == '1':\n                    if i == 0 or j == 0:\n                        dp[i][j] = 1\n                    else:\n                        dp[i][j] = min(dp[i - 1][j], dp[i][j - 1], dp[i - 1][j - 1]) + 1\n                    res = max(res, dp[i][j])\n        return res * res\n"
    },
    {
        "number": 221,
        "title": "Maximal Square",
        "difficulty": 1,
        "pass": 1,
        "answer": "        if not matrix:\n            return 0\n        rows = len(matrix)\n        cols = len(matrix[0])\n        dp = [[0 for _ in range(cols)] for _ in range(rows)]\n        res = 0\n        for i in range(rows):\n            for j in range(cols):\n                if matrix[i][j] == '1':\n                    if i == 0 or j == 0:\n                        dp[i][j] = 1\n                    else:\n                        dp[i][j] = min(dp[i-1][j], dp[i][j-1], dp[i-1][j-1]) + 1\n                    res = max(res, dp[i][j])\n        return res*res"
    },
    {
        "number": 221,
        "title": "Maximal Square",
        "difficulty": 1,
        "pass": 2,
        "answer": "        if not matrix:\n            return 0\n        m, n = len(matrix), len(matrix[0])\n        dp = [[0] * n for _ in range(m)]\n        res = 0\n        for i in range(m):\n            for j in range(n):\n                if matrix[i][j] == '1':\n                    if i == 0 or j == 0:\n                        dp[i][j] = 1\n                    else:\n                        dp[i][j] = min(dp[i - 1][j], dp[i][j - 1], dp[i - 1][j - 1]) + 1\n                    res = max(res, dp[i][j])\n        return res * res"
    },
    {
        "number": 221,
        "title": "Maximal Square",
        "difficulty": 1,
        "pass": 3,
        "answer": "        if not matrix:\n            return 0\n        m, n = len(matrix), len(matrix[0])\n        dp = [[0] * n for _ in range(m)]\n        max_area = 0\n        for i in range(m):\n            for j in range(n):\n                if matrix[i][j] == '1':\n                    if i == 0 or j == 0:\n                        dp[i][j] = 1\n                    else:\n                        dp[i][j] = min(dp[i - 1][j], dp[i][j - 1], dp[i - 1][j - 1]) + 1\n                    max_area = max(max_area, dp[i][j])\n        return max_area * max_area"
    },
    {
        "number": 221,
        "title": "Maximal Square",
        "difficulty": 1,
        "pass": 4,
        "answer": "        if not matrix:\n            return 0\n        m, n = len(matrix), len(matrix[0])\n        dp = [[0] * n for _ in range(m)]\n        res = 0\n        for i in range(m):\n            for j in range(n):\n                if matrix[i][j] == '1':\n                    if i == 0 or j == 0:\n                        dp[i][j] = 1\n                    else:\n                        dp[i][j] = min(dp[i - 1][j], dp[i][j - 1], dp[i - 1][j - 1]) + 1\n                    res = max(res, dp[i][j])\n        return res * res"
    },
    {
        "number": 221,
        "title": "Maximal Square",
        "difficulty": 1,
        "pass": 5,
        "answer": "        if not matrix:\n            return 0\n        m, n = len(matrix), len(matrix[0])\n        dp = [[0] * n for _ in range(m)]\n        res = 0\n        for i in range(m):\n            for j in range(n):\n                if matrix[i][j] == '1':\n                    if i == 0 or j == 0:\n                        dp[i][j] = 1\n                    else:\n                        dp[i][j] = min(dp[i - 1][j], dp[i][j - 1], dp[i - 1][j - 1]) + 1\n                    res = max(res, dp[i][j])\n        return res * res"
    },
    {
        "number": 221,
        "title": "Maximal Square",
        "difficulty": 1,
        "pass": 6,
        "answer": "        if not matrix: return 0\n        m, n = len(matrix), len(matrix[0])\n        dp = [[0]*n for _ in range(m)]\n        res = 0\n        for i in range(m):\n            for j in range(n):\n                if matrix[i][j] == '1':\n                    if i == 0 or j == 0:\n                        dp[i][j] = 1\n                    else:\n                        dp[i][j] = min(dp[i-1][j], dp[i][j-1], dp[i-1][j-1]) + 1\n                    res = max(res, dp[i][j])\n        return res*res"
    },
    {
        "number": 221,
        "title": "Maximal Square",
        "difficulty": 1,
        "pass": 7,
        "answer": "        if not matrix:\n            return 0\n        m, n = len(matrix), len(matrix[0])\n        dp = [[0] * n for _ in range(m)]\n        res = 0\n        for i in range(m):\n            for j in range(n):\n                if matrix[i][j] == '1':\n                    if i == 0 or j == 0:\n                        dp[i][j] = 1\n                    else:\n                        dp[i][j] = min(dp[i - 1][j], dp[i][j - 1], dp[i - 1][j - 1]) + 1\n                    res = max(res, dp[i][j])\n        return res * res"
    },
    {
        "number": 221,
        "title": "Maximal Square",
        "difficulty": 1,
        "pass": 8,
        "answer": "        if not matrix:\n            return 0\n        m, n = len(matrix), len(matrix[0])\n        dp = [[0]*n for _ in range(m)]\n        res = 0\n        for i in range(m):\n            for j in range(n):\n                if matrix[i][j] == '1':\n                    if i == 0 or j == 0:\n                        dp[i][j] = 1\n                    else:\n                        dp[i][j] = min(dp[i-1][j], dp[i][j-1], dp[i-1][j-1]) + 1\n                    res = max(res, dp[i][j])\n        return res**2"
    },
    {
        "number": 221,
        "title": "Maximal Square",
        "difficulty": 1,
        "pass": 9,
        "answer": "        if not matrix:\n            return 0\n        m, n = len(matrix), len(matrix[0])\n        dp = [[0] * (n + 1) for _ in range(m + 1)]\n        res = 0\n        for i in range(1, m + 1):\n            for j in range(1, n + 1):\n                if matrix[i - 1][j - 1] == \"1\":\n                    dp[i][j] = min(dp[i - 1][j], dp[i][j - 1], dp[i - 1][j - 1]) + 1\n                    res = max(res, dp[i][j])\n        return res * res"
    },
    {
        "number": 222,
        "title": "Count Complete Tree Nodes",
        "difficulty": 1,
        "pass": 0,
        "answer": "        if not root:\n            return 0\n        return self.countNodes(root.left) + self.countNodes(root.right) + 1"
    },
    {
        "number": 222,
        "title": "Count Complete Tree Nodes",
        "difficulty": 1,
        "pass": 1,
        "answer": "        if not root:\n            return 0\n        nodes = 0\n        stack = []\n        stack.append(root)\n        while stack:\n            node = stack.pop()\n            nodes += 1\n            if node.left:\n                stack.append(node.left)\n            if node.right:\n                stack.append(node.right)\n        return nodes"
    },
    {
        "number": 222,
        "title": "Count Complete Tree Nodes",
        "difficulty": 1,
        "pass": 2,
        "answer": "        if not root:\n            return 0\n        return 1 + self.countNodes(root.left) + self.countNodes(root.right)"
    },
    {
        "number": 222,
        "title": "Count Complete Tree Nodes",
        "difficulty": 1,
        "pass": 3,
        "answer": "        if not root:\n            return 0\n        \n        def dfs(node):\n            if not node:\n                return 0\n            return 1 + dfs(node.left) + dfs(node.right)\n        \n        return dfs(root)"
    },
    {
        "number": 222,
        "title": "Count Complete Tree Nodes",
        "difficulty": 1,
        "pass": 4,
        "answer": "        if not root:\n            return 0\n        q = deque()\n        q.append(root)\n        count = 1\n        while q:\n            size = len(q)\n            for i in range(size):\n                node = q.popleft()\n                if node.left:\n                    q.append(node.left)\n                if node.right:\n                    q.append(node.right)\n            count += size\n        return count"
    },
    {
        "number": 222,
        "title": "Count Complete Tree Nodes",
        "difficulty": 1,
        "pass": 5,
        "answer": "        if not root:\n            return 0\n        return self.countNodes(root.left) + self.countNodes(root.right) + 1"
    },
    {
        "number": 222,
        "title": "Count Complete Tree Nodes",
        "difficulty": 1,
        "pass": 6,
        "answer": "        if not root:\n            return 0\n        return 1 + self.countNodes(root.left) + self.countNodes(root.right)"
    },
    {
        "number": 222,
        "title": "Count Complete Tree Nodes",
        "difficulty": 1,
        "pass": 7,
        "answer": "        if not root:\n            return 0\n        q = deque()\n        q.append(root)\n        res = 0\n        while q:\n            size = len(q)\n            for i in range(size):\n                node = q.popleft()\n                if node.left:\n                    q.append(node.left)\n                if node.right:\n                    q.append(node.right)\n            res += 1\n        return res"
    },
    {
        "number": 222,
        "title": "Count Complete Tree Nodes",
        "difficulty": 1,
        "pass": 8,
        "answer": "        if not root:\n            return 0\n        return 1 + self.countNodes(root.left) + self.countNodes(root.right)"
    },
    {
        "number": 222,
        "title": "Count Complete Tree Nodes",
        "difficulty": 1,
        "pass": 9,
        "answer": "        if not root:\n            return 0\n        if not root.left and not root.right:\n            return 1\n        if not root.left:\n            return self.countNodes(root.right) + 1\n        if not root.right:\n            return self.countNodes(root.left) + 1\n        return self.countNodes(root.left) + self.countNodes(root.right) + 1"
    },
    {
        "number": 223,
        "title": "Rectangle Area",
        "difficulty": 1,
        "pass": 0,
        "answer": "        area_1 = (ax2 - ax1) * (ay2 - ay1)\n        area_2 = (bx2 - bx1) * (by2 - by1)\n        return area_1 + area_2 - (min(ax1, bx1) - max(ax2, bx2)) * (min(ay1, by1) - max(ay2, by2))"
    },
    {
        "number": 223,
        "title": "Rectangle Area",
        "difficulty": 1,
        "pass": 1,
        "answer": "        area1 = (ax2 - ax1 + 1) * (ay2 - ay1 + 1)\n        area2 = (bx2 - bx1 + 1) * (by2 - by1 + 1)\n        return area1 + area2 - (min(ax1, bx1) - max(ax2, bx2) + 1) * (min(ay1, by1) - max(ay2, by2) + 1)"
    },
    {
        "number": 223,
        "title": "Rectangle Area",
        "difficulty": 1,
        "pass": 2,
        "answer": "        area_1 = (ax2 - ax1 + 1) * (ay2 - ay1 + 1)\n        area_2 = (bx2 - bx1 + 1) * (by2 - by1 + 1)\n        return area_1 + area_2 - max(0, min(ax2, bx2) - max(ax1, bx1) + 1) * max(0, min(ay2, by2) - max(ay1, by1) + 1)"
    },
    {
        "number": 223,
        "title": "Rectangle Area",
        "difficulty": 1,
        "pass": 3,
        "answer": "        area1 = (ax2 - ax1 + 1) * (ay2 - ay1 + 1)\n        area2 = (bx2 - bx1 + 1) * (by2 - by1 + 1)\n        area_intersection = max(0, min(ax2, bx2) - max(ax1, bx1)) * max(0, min(ay2, by2) - max(ay1, by1))\n        return area1 + area2 - area_intersection"
    },
    {
        "number": 223,
        "title": "Rectangle Area",
        "difficulty": 1,
        "pass": 4,
        "answer": "        return (ax2 - ax1) * (ay2 - ay1) + (bx2 - bx1) * (by2 - by1) - (min(ax2, bx2) - max(ax1, bx1)) * (min(ay2, by2) - max(ay1, by1))"
    },
    {
        "number": 223,
        "title": "Rectangle Area",
        "difficulty": 1,
        "pass": 5,
        "answer": "        area_1 = (ax2 - ax1) * (ay2 - ay1)\n        area_2 = (bx2 - bx1) * (by2 - by1)\n        area_3 = (min(ax2, bx2) - max(ax1, bx1)) * (min(ay2, by2) - max(ay1, by1))\n        return area_1 + area_2 - area_3"
    },
    {
        "number": 223,
        "title": "Rectangle Area",
        "difficulty": 1,
        "pass": 6,
        "answer": "        area_a = (ax2 - ax1 + 1) * (ay2 - ay1 + 1)\n        area_b = (bx2 - bx1 + 1) * (by2 - by1 + 1)\n        x_overlap = max(0, min(ax2, bx2) - max(ax1, bx1))\n        y_overlap = max(0, min(ay2, by2) - max(ay1, by1))\n        return area_a + area_b - x_overlap * y_overlap"
    },
    {
        "number": 223,
        "title": "Rectangle Area",
        "difficulty": 1,
        "pass": 7,
        "answer": "        area_1 = (ax2 - ax1) * (ay2 - ay1)\n        area_2 = (bx2 - bx1) * (by2 - by1)\n        x_overlap = max(0, min(ax2, bx2) - max(ax1, bx1))\n        y_overlap = max(0, min(ay2, by2) - max(ay1, by1))\n        return area_1 + area_2 - x_overlap * y_overlap"
    },
    {
        "number": 223,
        "title": "Rectangle Area",
        "difficulty": 1,
        "pass": 8,
        "answer": "        area_a = (ax2 - ax1) * (ay2 - ay1)\n        area_b = (bx2 - bx1) * (by2 - by1)\n        area_c = (min(ax2, bx2) - max(ax1, bx1)) * (min(ay2, by2) - max(ay1, by1))\n        return area_a + area_b - area_c"
    },
    {
        "number": 223,
        "title": "Rectangle Area",
        "difficulty": 1,
        "pass": 9,
        "answer": "        area_1 = (ax2 - ax1 + 1) * (ay2 - ay1 + 1)\n        area_2 = (bx2 - bx1 + 1) * (by2 - by1 + 1)\n        return area_1 + area_2 - max(0, min(ax2, bx2) - max(ax1, bx1) + 1) * max(0, min(ay2, by2) - max(ay1, by1) + 1)"
    },
    {
        "number": 224,
        "title": "Basic Calculator",
        "difficulty": 2,
        "pass": 0,
        "answer": "        stack = []\n        num = 0\n        sign = \"+\"\n        for i in range(len(s)):\n            if s[i].isdigit():\n                num = num * 10 + int(s[i])\n            if (not s[i].isdigit() and not s[i].isspace()) or i == len(s) - 1:\n                if sign == \"+\":\n                    stack.append(num)\n                elif sign == \"-\":\n                    stack.append(-num)\n                elif sign == \"*\":\n                    stack.append(stack.pop() * num)\n                elif sign == \"/\":\n                    stack.append(int(stack.pop() / num))\n                num = 0\n                sign = s[i]\n        return sum(stack)"
    },
    {
        "number": 224,
        "title": "Basic Calculator",
        "difficulty": 2,
        "pass": 1,
        "answer": "        # stack = []\n        # num = 0\n        # sign = \"+\"\n        # for i in range(len(s)):\n        #     if s[i].isdigit():\n        #         num = num * 10 + int(s[i])\n        #     elif s[i] in \"+-*/\":\n        #         if sign == \"+\":\n        #             stack.append(num)\n        #         elif sign == \"-\":\n        #             stack.append(-num)\n        #         elif sign == \"*\":\n        #             stack.append(stack.pop() * num)\n        #         elif sign == \"/\":\n        #             stack.append(int(stack.pop() / num))\n        #         num = 0\n        #         sign = s[i]\n        # return sum(stack)\n        stack = []\n        num = 0\n        sign = \"+\"\n        for i in range(len(s)):\n            if s[i].isdigit():\n                num = num * 10 + int(s[i])\n            elif s"
    },
    {
        "number": 224,
        "title": "Basic Calculator",
        "difficulty": 2,
        "pass": 2,
        "answer": "        s = s.replace(\" \", \"\")\n        s = s.replace(\"+\", \"\")\n        s = s.replace(\"-\", \"\")\n        s = s.replace(\"(\", \"\")\n        s = s.replace(\")\", \"\")\n        s = s.replace(\"*\", \"\")\n        s = s.replace(\"/\", \"\")\n        stack = []\n        for i in range(len(s)):\n            if s[i].isdigit():\n                stack.append(int(s[i]))\n            elif s[i] == \"+\":\n                stack.append(stack.pop() + stack.pop())\n            elif s[i] == \"-\":\n                stack.append(stack.pop() - stack.pop())\n            elif s[i] == \"*\":\n                stack.append(stack.pop() * stack.pop())\n            elif s[i] == \"/\":\n                stack.append(int(stack.pop() / stack.pop()))\n            elif s[i] == \"(\":\n                stack.append(self."
    },
    {
        "number": 224,
        "title": "Basic Calculator",
        "difficulty": 2,
        "pass": 3,
        "answer": "        if s == \"\":\n            return 0\n        stack = []\n        num = 0\n        sign = \"+\"\n        for i in range(len(s)):\n            if s[i].isdigit():\n                num = num * 10 + int(s[i])\n            if s[i] in \"+-*/\":\n                if sign == \"+\":\n                    stack.append(num)\n                elif sign == \"-\":\n                    stack.append(-num)\n                elif sign == \"*\":\n                    stack.append(stack.pop() * num)\n                elif sign == \"/\":\n                    stack.append(int(stack.pop() / num))\n                num = 0\n                sign = s[i]\n        return sum(stack)"
    },
    {
        "number": 224,
        "title": "Basic Calculator",
        "difficulty": 2,
        "pass": 4,
        "answer": "        def calculate(s):\n            \"\"\"\n            :type s: str\n            :rtype: int\n            \"\"\"\n            stack = []\n            sign = \"+\"\n            num = 0\n            for i in range(len(s)):\n                if s[i].isdigit():\n                    num = num * 10 + int(s[i])\n                if (not s[i].isdigit() and not s[i].isspace()) or i == len(s) - 1:\n                    if sign == \"+\":\n                        stack.append(num)\n                    elif sign == \"-\":\n                        stack.append(-num)\n                    elif sign == \"*\":\n                        stack.append(stack.pop() * num)\n                    elif sign == \"/\":\n                        stack.append(int(stack.pop() / num))\n                    sign = s[i]\n                    num = 0\n            return sum(stack)"
    },
    {
        "number": 224,
        "title": "Basic Calculator",
        "difficulty": 2,
        "pass": 5,
        "answer": "        \n        stack = []\n        num = 0\n        sign = \"+\"\n        for i in range(len(s)):\n            if s[i].isdigit():\n                num = num * 10 + int(s[i])\n            if s[i] in \"+-*/\" or i == len(s) - 1:\n                if sign == \"+\":\n                    stack.append(num)\n                elif sign == \"-\":\n                    stack.append(-num)\n                elif sign == \"*\":\n                    stack.append(stack.pop() * num)\n                elif sign == \"/\":\n                    stack.append(int(stack.pop() / num))\n                num = 0\n                sign = s[i]\n        return sum(stack)"
    },
    {
        "number": 224,
        "title": "Basic Calculator",
        "difficulty": 2,
        "pass": 6,
        "answer": "        \n        def calculate(s):\n            stack, num, sign = [], 0, \"+\"\n            for i in range(len(s)):\n                if s[i].isdigit():\n                    num = num * 10 + int(s[i])\n                if (not s[i].isdigit() and not s[i].isspace()) or i == len(s) - 1:\n                    if sign == \"+\":\n                        stack.append(num)\n                    elif sign == \"-\":\n                        stack.append(-num)\n                    elif sign == \"*\":\n                        stack.append(stack.pop() * num)\n                    elif sign == \"/\":\n                        stack.append(int(stack.pop() / num))\n                    sign, num, stack = s[i], 0, []\n            return sum(stack)\n        \n        return calculate(s)"
    },
    {
        "number": 224,
        "title": "Basic Calculator",
        "difficulty": 2,
        "pass": 7,
        "answer": "        def calculate(s):\n            stack = []\n            num = 0\n            sign = '+'\n            for i in range(len(s)):\n                if s[i].isdigit():\n                    num = num * 10 + int(s[i])\n                if (not s[i].isdigit() and not s[i].isspace()) or i == len(s) - 1:\n                    if sign == '+':\n                        stack.append(num)\n                    elif sign == '-':\n                        stack.append(-num)\n                    elif sign == '*':\n                        stack.append(stack.pop() * num)\n                    elif sign == '/':\n                        stack.append(int(stack.pop() / num))\n                    sign = s[i]\n                    num = 0\n            return sum(stack)\n        return calculate(s)"
    },
    {
        "number": 224,
        "title": "Basic Calculator",
        "difficulty": 2,
        "pass": 8,
        "answer": "        s = s.replace(' ', '')\n        s = s.replace('+','+ ')\n        s = s.replace('-','- ')\n        s = s.replace('*','* ')\n        s = s.replace('/','/ ')\n        s = s.replace('(','( ')\n        s = s.replace(')',') ')\n        s = s.replace('^','** ')\n        stack = []\n        for i in range(len(s)):\n            if s[i].isdigit():\n                stack.append(int(s[i]))\n            elif s[i] == '+':\n                stack.append(stack.pop() + stack.pop())\n            elif s[i] == '-':\n                stack.append(stack.pop() - stack.pop())\n            elif s[i] == '*':\n                stack.append(stack.pop() * stack.pop())\n            elif s[i] == '/':\n                stack.append(stack.pop"
    },
    {
        "number": 224,
        "title": "Basic Calculator",
        "difficulty": 2,
        "pass": 9,
        "answer": "        def evaluate(s):\n            stack = []\n            for i in range(len(s)):\n                if s[i].isdigit():\n                    stack.append(int(s[i]))\n                elif s[i] == '+':\n                    stack.append(stack.pop() + stack.pop())\n                elif s[i] == '-':\n                    stack.append(stack.pop() - stack.pop())\n                elif s[i] == '(':\n                    stack.append(evaluate(s[i+1:]))\n                elif s[i] == ')':\n                    return stack.pop()\n            return stack.pop()\n        return evaluate(s)"
    },
    {
        "number": 225,
        "title": "Implement Stack using Queues",
        "difficulty": 0,
        "pass": 0,
        "answer": "        # Your MyStack object will be instantiated and called as such:\n        # obj = MyStack()\n        # obj.push(x)\n        # param_2 = obj.pop()\n        # param_3 = obj.top()\n        # param_4 = obj.empty()\n        stack = []\n        def push(x):\n            stack.append(x)\n        def pop():\n            if stack:\n                return stack.pop()\n            else:\n                return None\n        def top():\n            if stack:\n                return stack[-1]\n            else:\n                return None\n        def empty():\n            if stack:\n                return False\n            else:\n                return True\n        push(1)\n        push(2)\n        push(3)\n        print(top())\n        print(pop())\n        print(empty())"
    },
    {
        "number": 225,
        "title": "Implement Stack using Queues",
        "difficulty": 0,
        "pass": 1,
        "answer": "        # Your MyStack object will be instantiated and called as such:\n        # obj = MyStack()\n        # obj.push(x)\n        # param_2 = obj.pop()\n        # param_3 = obj.top()\n        # param_4 = obj.empty()\n        # @lc code=start\n        class Node:\n            def __init__(self, val):\n                self.val = val\n                self.next = None"
    },
    {
        "number": 225,
        "title": "Implement Stack using Queues",
        "difficulty": 0,
        "pass": 2,
        "answer": "        self.stack = []\n        self.q1 = []\n        self.q2 = []"
    },
    {
        "number": 225,
        "title": "Implement Stack using Queues",
        "difficulty": 0,
        "pass": 3,
        "answer": "        self.q1 = []\n        self.q2 = []"
    },
    {
        "number": 225,
        "title": "Implement Stack using Queues",
        "difficulty": 0,
        "pass": 4,
        "answer": "    def __init__(self):\n    def push(self, x: int) -> None:\n    def pop(self) -> int:\n    def top(self) -> int:\n    def empty(self) -> bool:\n        \"\"\"\n        Implement a last-in-first-out (LIFO) stack using only two queues. The implemented stack should support all the functions of a normal stack (push, top, pop, and empty).\n        Implement the MyStack class:\n            void push(int x) Pushes element x to the top of the stack.\n            int pop() Removes the element on the top of the stack and returns it.\n            int top() Returns the element on the top of the stack.\n            boolean empty() Returns true if the stack is empty, false otherwise.\n        Notes:\n            You must use only standard operations of a queue, which means that only push to back, peek/pop from front, size and is empty operations are valid.\n            Depending on your language, the queue may not be supported natively. You may simulate a queue using a list or deque (double-ended queue)"
    },
    {
        "number": 225,
        "title": "Implement Stack using Queues",
        "difficulty": 0,
        "pass": 5,
        "answer": "        self.q1 = []\n        self.q2 = []"
    },
    {
        "number": 225,
        "title": "Implement Stack using Queues",
        "difficulty": 0,
        "pass": 6,
        "answer": "        self.stack = []\n        self.queue = []"
    },
    {
        "number": 225,
        "title": "Implement Stack using Queues",
        "difficulty": 0,
        "pass": 7,
        "answer": "    def __init__(self):\n    def push(self, x: int) -> None:\n    def pop(self) -> int:\n    def top(self) -> int:\n    def empty(self) -> bool:\n        \"\"\"\n        Implement a last-in-first-out (LIFO) stack using only two queues. The implemented stack should support all the functions of a normal stack (push, top, pop, and empty).\n        Implement the MyStack class:\n            void push(int x) Pushes element x to the top of the stack.\n            int pop() Removes the element on the top of the stack and returns it.\n            int top() Returns the element on the top of the stack.\n            boolean empty() Returns true if the stack is empty, false otherwise.\n        Notes:\n            You must use only standard operations of a queue, which means that only push to back, peek/pop from front, size and is empty operations are valid.\n            Depending on your language, the queue may not be supported natively. You may simulate a queue using a list or deque (double-ended queue)"
    },
    {
        "number": 225,
        "title": "Implement Stack using Queues",
        "difficulty": 0,
        "pass": 8,
        "answer": "        # Your MyStack object will be instantiated and called as such:\n        # obj = MyStack()\n        # obj.push(x)\n        # param_2 = obj.pop()\n        # param_3 = obj.top()\n        # param_4 = obj.empty()"
    },
    {
        "number": 225,
        "title": "Implement Stack using Queues",
        "difficulty": 0,
        "pass": 9,
        "answer": "        self.q1 = []\n        self.q2 = []"
    },
    {
        "number": 226,
        "title": "Invert Binary Tree",
        "difficulty": 0,
        "pass": 0,
        "answer": "        if not root:\n            return root\n        queue = deque([root])\n        while queue:\n            node = queue.popleft()\n            node.left, node.right = node.right, node.left\n            if node.left:\n                queue.append(node.left)\n            if node.right:\n                queue.append(node.right)\n        return root"
    },
    {
        "number": 226,
        "title": "Invert Binary Tree",
        "difficulty": 0,
        "pass": 1,
        "answer": "        if not root:\n            return root\n        queue = deque([root])\n        while queue:\n            node = queue.popleft()\n            node.left, node.right = node.right, node.left\n            if node.left:\n                queue.append(node.left)\n            if node.right:\n                queue.append(node.right)\n        return root"
    },
    {
        "number": 226,
        "title": "Invert Binary Tree",
        "difficulty": 0,
        "pass": 2,
        "answer": "        if not root:\n            return root\n        root.left, root.right = root.right, root.left\n        self.invertTree(root.left)\n        self.invertTree(root.right)\n        return root"
    },
    {
        "number": 226,
        "title": "Invert Binary Tree",
        "difficulty": 0,
        "pass": 3,
        "answer": "        if not root:\n            return root\n        queue = deque([root])\n        while queue:\n            node = queue.popleft()\n            node.left, node.right = node.right, node.left\n            if node.left:\n                queue.append(node.left)\n            if node.right:\n                queue.append(node.right)\n        return root"
    },
    {
        "number": 226,
        "title": "Invert Binary Tree",
        "difficulty": 0,
        "pass": 4,
        "answer": "        if not root:\n            return root\n        \n        def invert(node):\n            if not node:\n                return\n            \n            node.left, node.right = node.right, node.left\n            invert(node.left)\n            invert(node.right)\n        \n        invert(root)\n        return root"
    },
    {
        "number": 226,
        "title": "Invert Binary Tree",
        "difficulty": 0,
        "pass": 5,
        "answer": "        if not root:\n            return root\n        \n        self.invertTree(root.left)\n        self.invertTree(root.right)\n        \n        root.left, root.right = root.right, root.left\n        \n        return root\n        "
    },
    {
        "number": 226,
        "title": "Invert Binary Tree",
        "difficulty": 0,
        "pass": 6,
        "answer": "        if not root:\n            return root\n        queue = collections.deque([root])\n        while queue:\n            node = queue.popleft()\n            node.left, node.right = node.right, node.left\n            if node.left:\n                queue.append(node.left)\n            if node.right:\n                queue.append(node.right)\n        return root"
    },
    {
        "number": 226,
        "title": "Invert Binary Tree",
        "difficulty": 0,
        "pass": 7,
        "answer": "        if root is None:\n            return root\n        queue = deque([root])\n        while queue:\n            node = queue.popleft()\n            node.left, node.right = node.right, node.left\n            if node.left:\n                queue.append(node.left)\n            if node.right:\n                queue.append(node.right)\n        return root"
    },
    {
        "number": 226,
        "title": "Invert Binary Tree",
        "difficulty": 0,
        "pass": 8,
        "answer": "        if not root:\n            return root\n        root.left, root.right = root.right, root.left\n        self.invertTree(root.left)\n        self.invertTree(root.right)\n        return root\n"
    },
    {
        "number": 226,
        "title": "Invert Binary Tree",
        "difficulty": 0,
        "pass": 9,
        "answer": "        if not root:\n            return root\n        \n        root.left, root.right = root.right, root.left\n        self.invertTree(root.left)\n        self.invertTree(root.right)\n        \n        return root\n        "
    },
    {
        "number": 227,
        "title": "Basic Calculator II",
        "difficulty": 1,
        "pass": 0,
        "answer": "        \n        def helper(s):\n            stack = []\n            i = 0\n            while i < len(s):\n                if s[i] =='':\n                    i += 1\n                elif s[i] == '+' or s[i] == '-':\n                    op = s[i]\n                    i += 1\n                    while i < len(s) and s[i].isdigit():\n                        num = int(s[i])\n                        i += 1\n                        if op == '+':\n                            stack.append(stack.pop() + num)\n                        else:\n                            stack.append(stack.pop() - num)\n                elif s[i].isdigit():\n                    num = int(s[i])\n                    i += 1\n                    while i < len(s) and s[i].isdigit():\n                        num = num * 10 + int(s[i])\n                        i += 1\n                    stack.append(num)\n                else:\n                    i += 1\n            return sum(stack)\n        \n        if not s:\n            return 0\n        "
    },
    {
        "number": 227,
        "title": "Basic Calculator II",
        "difficulty": 1,
        "pass": 1,
        "answer": "        import re\n        s = s.replace(' ', '')\n        s = re.sub(r'\\+', '+', s)\n        s = re.sub(r'-', '-', s)\n        s = re.sub(r'\\*', '*', s)\n        s = re.sub(r'/', '/', s)\n        s = re.sub(r'\\(', '(', s)\n        s = re.sub(r'\\)', ')', s)\n        s = re.sub(r'\\^', '**', s)\n        s = re.sub(r'\\%', '%', s)\n        s = re.sub(r'\\=', '==', s)\n        s = re.sub(r'\\>', '>', s)\n        s = re.sub(r'\\<', '<', s)\n        s = re.sub(r'\\>\\=', '>=', s)\n        s = re.sub(r'\\<\\=', '<=', s)\n        s = re"
    },
    {
        "number": 227,
        "title": "Basic Calculator II",
        "difficulty": 1,
        "pass": 2,
        "answer": "        s = s.replace(' ', '')\n        s = s.replace('+','+ ')\n        s = s.replace('-','- ')\n        s = s.replace('*','* ')\n        s = s.replace('/','/ ')\n        s = s.replace('(','( ')\n        s = s.replace(')',') ')\n        s = s.replace('^','^ ')\n        s = s.replace('!', '! ')\n        s = s.replace('=','= ')\n        s = s.replace('<','< ')\n        s = s.replace('>','> ')\n        s = s.replace('[','[ ')\n        s = s.replace(']','] ')\n        s = s.replace('{','{ ')\n        s = s.replace('}','} ')\n        s = s.replace(',', ', ')\n        s = s.replace(';','; ')\n        "
    },
    {
        "number": 227,
        "title": "Basic Calculator II",
        "difficulty": 1,
        "pass": 3,
        "answer": "        # s = \"3+2*2\"\n        # s = \" 3/2 \"\n        # s = \" 3+5 / 2 \"\n        s = s.replace(\" \", \"\")\n        s = s.replace(\"+\", \" + \")\n        s = s.replace(\"-\", \" - \")\n        s = s.replace(\"*\", \" * \")\n        s = s.replace(\"/\", \" / \")\n        s = s.replace(\"(\", \" ( \")\n        s = s.replace(\")\", \" ) \")\n        # print(s)\n        stack = []\n        for i in range(len(s)):\n            if s[i].isdigit():\n                stack.append(s[i])\n            elif s[i] == \"(\":\n                stack.append(s[i])\n            elif s[i] == \")\":\n                while stack[-1]!= \"(\":\n                    stack.pop()\n                stack.pop()\n            elif s[i] == \"+\" or s[i] == \"-\":\n                "
    },
    {
        "number": 227,
        "title": "Basic Calculator II",
        "difficulty": 1,
        "pass": 4,
        "answer": "        \n        num_stack = []\n        op_stack = []\n        \n        for i in range(len(s)):\n            if s[i].isdigit():\n                num_stack.append(int(s[i]))\n            elif s[i] == '+' or s[i] == '-':\n                op_stack.append(s[i])\n            elif s[i] == '*' or s[i] == '/':\n                while len(op_stack) > 0 and op_stack[-1]!= '*' and op_stack[-1]!= '/':\n                    num_stack.append(op_stack.pop())\n                op_stack.append(s[i])\n            elif s[i] == '(':\n                op_stack.append(s[i])\n            elif s[i] == ')':\n                while op_stack[-1]!= '(':\n                    num_stack.append(op_stack.pop())\n                op_stack.pop()\n        \n        while len(op_stack) >"
    },
    {
        "number": 227,
        "title": "Basic Calculator II",
        "difficulty": 1,
        "pass": 5,
        "answer": "        if not s:\n            return 0\n        stack = []\n        for i in range(len(s)):\n            if s[i].isdigit():\n                stack.append(int(s[i]))\n            elif s[i] == '+':\n                stack.append(stack.pop() + stack.pop())\n            elif s[i] == '-':\n                stack.append(-stack.pop() + stack.pop())\n            elif s[i] == '*':\n                stack.append(stack.pop() * stack.pop())\n            elif s[i] == '/':\n                stack.append(int(stack.pop() / stack.pop()))\n        return stack.pop()"
    },
    {
        "number": 227,
        "title": "Basic Calculator II",
        "difficulty": 1,
        "pass": 6,
        "answer": "        \n        s = s.replace(' ', '')\n        s = s.replace('+','+ ')\n        s = s.replace('-','- ')\n        s = s.replace('*','* ')\n        s = s.replace('/','/ ')\n        \n        stack = []\n        for i in range(len(s)):\n            if s[i].isdigit():\n                stack.append(s[i])\n            else:\n                num1 = int(stack.pop())\n                num2 = int(stack.pop())\n                if s[i] == '+':\n                    stack.append(num2 + num1)\n                elif s[i] == '-':\n                    stack.append(num2 - num1)\n                elif s[i] == '*':\n                    stack.append(num2 * num1)\n                elif s[i] == '/':\n                    stack.append(int(num2 / num1))\n        \n        return stack[0]"
    },
    {
        "number": 227,
        "title": "Basic Calculator II",
        "difficulty": 1,
        "pass": 7,
        "answer": "        \n        def helper(s):\n            if not s:\n                return 0\n            if s[0] == '+':\n                return helper(s[1:]) + int(s[0])\n            elif s[0] == '-':\n                return helper(s[1:]) - int(s[0])\n            elif s[0] == '*':\n                return helper(s[1:]) * int(s[0])\n            elif s[0] == '/':\n                return helper(s[1:]) // int(s[0])\n            else:\n                return int(s[0])\n        \n        return helper(s)\n        \nclass Solution:\n    def calculate(self, s: str) -> int:\n        \"\"\"\n        Given a string s which represents an expression, evaluate this expression and return its value. \n        The integer division should truncate toward zero.\n        You may assume that the given expression is always valid. All intermediate results will be in the range of [-231, 231 - 1].\n        Note: You are not allowed to use any built-"
    },
    {
        "number": 227,
        "title": "Basic Calculator II",
        "difficulty": 1,
        "pass": 8,
        "answer": "        if not s:\n            return 0\n        num, sign, stack = 0, 1, []\n        for i in range(len(s)):\n            if s[i].isdigit():\n                num = num * 10 + int(s[i])\n            if s[i] in \"+-*/\" or i == len(s) - 1:\n                if sign == 1:\n                    stack.append(num)\n                if sign == -1:\n                    stack.append(-num)\n                if s[i] == \"+\":\n                    sign = 1\n                elif s[i] == \"-\":\n                    sign = -1\n                elif s[i] == \"*\":\n                    stack.append(stack.pop() * stack.pop())\n                elif s[i] == \"/\":\n                    stack.append(int(stack.pop() / stack.pop()))\n                num = 0\n        return sum(stack)"
    },
    {
        "number": 227,
        "title": "Basic Calculator II",
        "difficulty": 1,
        "pass": 9,
        "answer": "        import re\n        s = s.replace(' ', '')\n        s = s.replace('(','( ')\n        s = s.replace(')',') ')\n        s = s.replace('*','* ')\n        s = s.replace('+','+ ')\n        s = s.replace('-','- ')\n        s = s.replace('/','/ ')\n        s = s.replace('^','^ ')\n        s = s.replace('%','% ')\n        s = s.replace('=','= ')\n        s = s.replace('<','< ')\n        s = s.replace('>','> ')\n        s = s.replace('[','[ ')\n        s = s.replace(']','] ')\n        s = s.replace('{','{ ')\n        s = s.replace('}','} ')\n        s = s.replace('(','( ')\n        s = s.replace(')',')"
    },
    {
        "number": 228,
        "title": "Summary Ranges",
        "difficulty": 0,
        "pass": 0,
        "answer": "        if not nums:\n            return []\n        res = []\n        i = 0\n        while i < len(nums) - 1:\n            if nums[i] + 1!= nums[i + 1]:\n                res.append(str(nums[i]) + \"->\" + str(nums[i + 1]))\n            else:\n                res.append(str(nums[i]))\n            i += 1\n        return res"
    },
    {
        "number": 228,
        "title": "Summary Ranges",
        "difficulty": 0,
        "pass": 1,
        "answer": "        if len(nums) == 0:\n            return []\n        if len(nums) == 1:\n            return [str(nums[0])]\n        if len(nums) == 2:\n            if nums[0]!= nums[1]:\n                return [str(nums[0]) + \"->\" + str(nums[1])]\n            else:\n                return [str(nums[0])]\n        if len(nums) == 3:\n            if nums[0]!= nums[1] and nums[1]!= nums[2]:\n                return [str(nums[0]) + \"->\" + str(nums[1]) + \"->\" + str(nums[2])]\n            elif nums[0]!= nums[1] and nums[1] == nums[2]:\n                return [str(nums[0]) + \"->\" + str(nums[1])]\n            elif nums[0] == nums[1] and nums[1]!= nums"
    },
    {
        "number": 228,
        "title": "Summary Ranges",
        "difficulty": 0,
        "pass": 2,
        "answer": "        res = []\n        n = len(nums)\n        if n == 0:\n            return res\n        i = 0\n        while i < n - 1:\n            if nums[i] + 1!= nums[i + 1]:\n                res.append(str(nums[i]) + \"->\" + str(nums[i + 1]))\n            else:\n                res.append(str(nums[i]))\n            i += 1\n        return res"
    },
    {
        "number": 228,
        "title": "Summary Ranges",
        "difficulty": 0,
        "pass": 3,
        "answer": "        if not nums:\n            return []\n        n = len(nums)\n        if n == 1:\n            return [str(nums[0])]\n        if n == 2:\n            if nums[0] == nums[1]:\n                return [str(nums[0])]\n            else:\n                return [str(nums[0]) + \"->\" + str(nums[1])]\n        if n == 3:\n            if nums[0] == nums[1]:\n                return [str(nums[0])]\n            if nums[1] == nums[2]:\n                return [str(nums[0]) + \"->\" + str(nums[1])]\n            else:\n                return [str(nums[0]) + \"->\" + str(nums[1]) + \"->\" + str(nums[2])]\n        if n == 4:\n            if nums[0] == nums[1]:\n                return [str(nums[0])]\n            if nums[1"
    },
    {
        "number": 228,
        "title": "Summary Ranges",
        "difficulty": 0,
        "pass": 4,
        "answer": "        if not nums:\n            return []\n        res = []\n        i = 0\n        while i < len(nums) - 1:\n            if nums[i] + 1!= nums[i + 1]:\n                res.append(str(nums[i]) + \"->\" + str(nums[i + 1]))\n            else:\n                res.append(str(nums[i]))\n            i += 1\n        return res"
    },
    {
        "number": 228,
        "title": "Summary Ranges",
        "difficulty": 0,
        "pass": 5,
        "answer": "        if not nums:\n            return []\n        res = []\n        start = nums[0]\n        end = nums[0]\n        for i in range(1, len(nums)):\n            if nums[i] == end + 1:\n                end = nums[i]\n            else:\n                res.append(str(start) + \"->\" + str(end))\n                start = nums[i]\n                end = nums[i]\n        res.append(str(start) + \"->\" + str(end))\n        return res"
    },
    {
        "number": 228,
        "title": "Summary Ranges",
        "difficulty": 0,
        "pass": 6,
        "answer": "        if not nums:\n            return []\n        res = []\n        start = nums[0]\n        end = nums[0]\n        for i in range(1, len(nums)):\n            if nums[i] == end + 1:\n                end = nums[i]\n            else:\n                res.append(str(start) + \"->\" + str(end))\n                start = nums[i]\n                end = nums[i]\n        res.append(str(start) + \"->\" + str(end))\n        return res"
    },
    {
        "number": 228,
        "title": "Summary Ranges",
        "difficulty": 0,
        "pass": 7,
        "answer": "        res = []\n        if len(nums) == 0:\n            return res\n        if len(nums) == 1:\n            return [str(nums[0])]\n        if len(nums) == 2:\n            if nums[0] == nums[1]:\n                return [str(nums[0])]\n            else:\n                return [str(nums[0]) + \"->\" + str(nums[1])]\n        i = 0\n        while i < len(nums) - 1:\n            if nums[i] + 1!= nums[i + 1]:\n                res.append(str(nums[i]) + \"->\" + str(nums[i + 1]))\n            i += 1\n        return res"
    },
    {
        "number": 228,
        "title": "Summary Ranges",
        "difficulty": 0,
        "pass": 8,
        "answer": "        if not nums:\n            return []\n        ranges = []\n        start = nums[0]\n        end = nums[0]\n        for i in range(1, len(nums)):\n            if nums[i] == end + 1:\n                end = nums[i]\n            else:\n                ranges.append(str(start) + '->' + str(end))\n                start = nums[i]\n                end = nums[i]\n        ranges.append(str(start) + '->' + str(end))\n        return ranges"
    },
    {
        "number": 228,
        "title": "Summary Ranges",
        "difficulty": 0,
        "pass": 9,
        "answer": "        ranges = []\n        start = 0\n        for i in range(len(nums) - 1):\n            if nums[i] + 1!= nums[i + 1]:\n                ranges.append(str(nums[start]) + \"->\" + str(nums[i + 1]))\n                start = i + 1\n        ranges.append(str(nums[start]) + \"->\" + str(nums[-1]))\n        return ranges"
    },
    {
        "number": 229,
        "title": "Majority Element II",
        "difficulty": 1,
        "pass": 0,
        "answer": "        if len(nums) == 1:\n            return nums\n        \n        n = len(nums)\n        if n == 2:\n            if nums[0] == nums[1]:\n                return nums\n            else:\n                return [nums[0], nums[1]]\n        \n        counts = {}\n        for num in nums:\n            if num in counts:\n                counts[num] += 1\n            else:\n                counts[num] = 1\n        \n        majority_elements = []\n        for key, value in counts.items():\n            if value > n // 3:\n                majority_elements.append(key)\n        \n        return majority_elements\n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n"
    },
    {
        "number": 229,
        "title": "Majority Element II",
        "difficulty": 1,
        "pass": 1,
        "answer": "        count = {}\n        for num in nums:\n            if num in count:\n                count[num] += 1\n            else:\n                count[num] = 1\n        res = []\n        for k, v in count.items():\n            if v > len(nums) // 3:\n                res.append(k)\n        return res"
    },
    {
        "number": 229,
        "title": "Majority Element II",
        "difficulty": 1,
        "pass": 2,
        "answer": "        counts = {}\n        for num in nums:\n            if num in counts:\n                counts[num] += 1\n            else:\n                counts[num] = 1\n        result = []\n        for key, value in counts.items():\n            if value > len(nums) // 3:\n                result.append(key)\n        return result"
    },
    {
        "number": 229,
        "title": "Majority Element II",
        "difficulty": 1,
        "pass": 3,
        "answer": "        counts = {}\n        for num in nums:\n            if num not in counts:\n                counts[num] = 1\n            else:\n                counts[num] += 1\n        res = []\n        for num, count in counts.items():\n            if count > len(nums) // 3:\n                res.append(num)\n        return res"
    },
    {
        "number": 229,
        "title": "Majority Element II",
        "difficulty": 1,
        "pass": 4,
        "answer": "        \n        if len(nums) == 1:\n            return nums\n        \n        nums.sort()\n        n = len(nums)\n        if n == 1:\n            return nums\n        if n == 2:\n            if nums[0] == nums[1]:\n                return nums\n            else:\n                return [nums[0], nums[1]]\n        \n        half = n // 3\n        \n        for i in range(half):\n            if nums[i] == nums[i+half]:\n                return [nums[i]]\n        \n        return nums\n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n"
    },
    {
        "number": 229,
        "title": "Majority Element II",
        "difficulty": 1,
        "pass": 5,
        "answer": "        nums.sort()\n        return nums[len(nums)//3:]"
    },
    {
        "number": 229,
        "title": "Majority Element II",
        "difficulty": 1,
        "pass": 6,
        "answer": "        n = len(nums)\n        if n == 1:\n            return nums\n        res = []\n        count = 0\n        for i in range(n):\n            if count == 0:\n                res.append(nums[i])\n                count += 1\n            else:\n                if nums[i] == res[0]:\n                    count += 1\n                else:\n                    count -= 1\n        return res"
    },
    {
        "number": 229,
        "title": "Majority Element II",
        "difficulty": 1,
        "pass": 7,
        "answer": "        counts = {}\n        for num in nums:\n            if num in counts:\n                counts[num] += 1\n            else:\n                counts[num] = 1\n        res = []\n        for num, count in counts.items():\n            if count > len(nums) // 3:\n                res.append(num)\n        return res"
    },
    {
        "number": 229,
        "title": "Majority Element II",
        "difficulty": 1,
        "pass": 8,
        "answer": "        n = len(nums)\n        if n == 0:\n            return []\n        if n == 1:\n            return [nums[0]]"
    },
    {
        "number": 229,
        "title": "Majority Element II",
        "difficulty": 1,
        "pass": 9,
        "answer": "        if not nums:\n            return []\n        count = 0\n        res = []\n        for num in nums:\n            if count == 0:\n                res.append(num)\n                count += 1\n            else:\n                if num in res:\n                    res.remove(num)\n                else:\n                    res.append(num)\n                    count += 1\n        return res"
    },
    {
        "number": 230,
        "title": "Kth Smallest Element in a BST",
        "difficulty": 1,
        "pass": 0,
        "answer": "        # https://leetcode.com/problems/kth-smallest-element-in-a-bst/discuss/84562/Python-BFS-solution-with-explanation\n        # Time: O(n)\n        # Space: O(n)"
    },
    {
        "number": 230,
        "title": "Kth Smallest Element in a BST",
        "difficulty": 1,
        "pass": 1,
        "answer": "        self.k = k\n        self.res = None\n        self.helper(root)\n        return self.res"
    },
    {
        "number": 230,
        "title": "Kth Smallest Element in a BST",
        "difficulty": 1,
        "pass": 2,
        "answer": "        self.k = k\n        self.res = None\n        self.dfs(root)\n        return self.res"
    },
    {
        "number": 230,
        "title": "Kth Smallest Element in a BST",
        "difficulty": 1,
        "pass": 3,
        "answer": "        stack = []\n        while root or stack:\n            while root:\n                stack.append(root)\n                root = root.left\n            root = stack.pop()\n            k -= 1\n            if k == 0:\n                return root.val\n            root = root.right\n        return -1"
    },
    {
        "number": 230,
        "title": "Kth Smallest Element in a BST",
        "difficulty": 1,
        "pass": 4,
        "answer": "        \n        # DFS\n        # Time: O(n)\n        # Space: O(n)\n        if not root:\n            return None\n        stack = []\n        stack.append(root)\n        while stack:\n            node = stack.pop()\n            if node.right:\n                stack.append(node.right)\n            if node.left:\n                stack.append(node.left)\n            if len(stack) == k:\n                return node.val\n        \n        \n        # BFS\n        # Time: O(n)\n        # Space: O(n)\n        if not root:\n            return None\n        queue = collections.deque()\n        queue.append(root)\n        while queue:\n            node = queue.popleft()\n            if node.left:\n                queue.append(node.left)\n            if node.right:\n                queue.append(node.right)\n            if len(queue) == k:\n                return node.val\n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n"
    },
    {
        "number": 230,
        "title": "Kth Smallest Element in a BST",
        "difficulty": 1,
        "pass": 5,
        "answer": "        def inorder(root):\n            if not root:\n                return []\n            return inorder(root.left) + [root.val] + inorder(root.right)\n        \n        return inorder(root)[k-1]"
    },
    {
        "number": 230,
        "title": "Kth Smallest Element in a BST",
        "difficulty": 1,
        "pass": 6,
        "answer": "        \n        def inorder(root):\n            if not root:\n                return\n            inorder(root.left)\n            res.append(root.val)\n            inorder(root.right)\n        \n        res = []\n        inorder(root)\n        return res[k-1]\n        \nclass Solution:\n    def kthSmallest(self, root: Optional[TreeNode], k: int) -> int:\n        \"\"\"\n        Given the root of a binary search tree, and an integer k, return the kth smallest value (1-indexed) of all the values of the nodes in the tree.\n        Example 1:\n        Input: root = [3,1,4,null,2], k = 1\n        Output: 1\n        Example 2:\n        Input: root = [5,3,6,2,4,null,null,1], k = 3\n        Output: 3\n        \"\"\"\n        \n        def inorder(root):\n            if not root:\n                return\n            inorder(root.left)\n            res.append(root.val)\n            "
    },
    {
        "number": 230,
        "title": "Kth Smallest Element in a BST",
        "difficulty": 1,
        "pass": 7,
        "answer": "        stack = []\n        while root or stack:\n            while root:\n                stack.append(root)\n                root = root.left\n            root = stack.pop()\n            k -= 1\n            if k == 0:\n                return root.val\n            root = root.right\n        return -1"
    },
    {
        "number": 230,
        "title": "Kth Smallest Element in a BST",
        "difficulty": 1,
        "pass": 8,
        "answer": "        stack = []\n        while root or stack:\n            while root:\n                stack.append(root)\n                root = root.left\n            root = stack.pop()\n            k -= 1\n            if k == 0:\n                return root.val\n            root = root.right\n"
    },
    {
        "number": 230,
        "title": "Kth Smallest Element in a BST",
        "difficulty": 1,
        "pass": 9,
        "answer": "        def inorder(root):\n            if not root:\n                return\n            inorder(root.left)\n            res.append(root.val)\n            inorder(root.right)\n        \n        res = []\n        inorder(root)\n        return res[k-1]"
    },
    {
        "number": 231,
        "title": "Power of Two",
        "difficulty": 0,
        "pass": 0,
        "answer": "        if n == 0:\n            return False\n        while n % 2 == 0:\n            n = n // 2\n        return n == 1"
    },
    {
        "number": 231,
        "title": "Power of Two",
        "difficulty": 0,
        "pass": 1,
        "answer": "        if n == 0:\n            return False\n        while n % 2 == 0:\n            n = n // 2\n        return n == 1"
    },
    {
        "number": 231,
        "title": "Power of Two",
        "difficulty": 0,
        "pass": 2,
        "answer": "        if n <= 0:\n            return False\n        while n % 2 == 0:\n            n = n // 2\n        return n == 1"
    },
    {
        "number": 231,
        "title": "Power of Two",
        "difficulty": 0,
        "pass": 3,
        "answer": "        if n <= 0:\n            return False\n        while n % 2 == 0:\n            n = n // 2\n        return n == 1"
    },
    {
        "number": 231,
        "title": "Power of Two",
        "difficulty": 0,
        "pass": 4,
        "answer": "        if n == 0:\n            return False\n        while n > 1:\n            if n % 2 == 0:\n                n = n // 2\n            else:\n                return False\n        return True"
    },
    {
        "number": 231,
        "title": "Power of Two",
        "difficulty": 0,
        "pass": 5,
        "answer": "        if n == 0:\n            return False\n        if n == 1:\n            return True\n        if n & (n - 1) == 0:\n            return True\n        else:\n            return False"
    },
    {
        "number": 231,
        "title": "Power of Two",
        "difficulty": 0,
        "pass": 6,
        "answer": "        if n <= 0:\n            return False\n        while n % 2 == 0:\n            n = n // 2\n        return n == 1"
    },
    {
        "number": 231,
        "title": "Power of Two",
        "difficulty": 0,
        "pass": 7,
        "answer": "        if n <= 0:\n            return False\n        while n % 2 == 0:\n            n = n // 2\n        return n == 1"
    },
    {
        "number": 231,
        "title": "Power of Two",
        "difficulty": 0,
        "pass": 8,
        "answer": "        if n <= 0:\n            return False\n        while n % 2 == 0:\n            n = n // 2\n        return n == 1"
    },
    {
        "number": 231,
        "title": "Power of Two",
        "difficulty": 0,
        "pass": 9,
        "answer": "        if n <= 0:\n            return False\n        while n % 2 == 0:\n            n = n // 2\n        return n == 1"
    },
    {
        "number": 232,
        "title": "Implement Queue using Stacks",
        "difficulty": 0,
        "pass": 0,
        "answer": "    def __init__(self):\n    def push(self, x: int) -> None:\n    def pop(self) -> int:\n    def peek(self) -> int:\n    def empty(self) -> bool:\n        \"\"\"\n        Implement a first in first out (FIFO) queue using only two stacks. The implemented queue should support all the functions of a normal queue (push, peek, pop, and empty).\n        Implement the MyQueue class:\n            void push(int x) Pushes element x to the back of the queue.\n            int pop() Removes the element from the front of the queue and returns it.\n            int peek() Returns the element at the front of the queue.\n            boolean empty() Returns true if the queue is empty, false otherwise.\n        Notes:\n            You must use only standard operations of a stack, which means only push to top, peek/pop from top, size, and is empty operations are valid.\n            Depending on your language, the stack may not be supported natively. You may simulate a stack using a list or deque (double-ended queue) as long as"
    },
    {
        "number": 232,
        "title": "Implement Queue using Stacks",
        "difficulty": 0,
        "pass": 1,
        "answer": "    def __init__(self):\n    def push(self, x: int) -> None:\n    def pop(self) -> int:\n    def peek(self) -> int:\n    def empty(self) -> bool:\n        \"\"\"\n        Implement a first in first out (FIFO) queue using only two stacks. The implemented queue should support all the functions of a normal queue (push, peek, pop, and empty).\n        Implement the MyQueue class:\n            void push(int x) Pushes element x to the back of the queue.\n            int pop() Removes the element from the front of the queue and returns it.\n            int peek() Returns the element at the front of the queue.\n            boolean empty() Returns true if the queue is empty, false otherwise.\n        Notes:\n            You must use only standard operations of a stack, which means only push to top, peek/pop from top, size, and is empty operations are valid.\n            Depending on your language, the stack may not be supported natively. You may simulate a stack using a list or deque (double-ended queue) as long as"
    },
    {
        "number": 232,
        "title": "Implement Queue using Stacks",
        "difficulty": 0,
        "pass": 2,
        "answer": "    def __init__(self):\n    def push(self, x: int) -> None:\n    def pop(self) -> int:\n    def peek(self) -> int:\n    def empty(self) -> bool:\n        \"\"\"\n        Implement a first in first out (FIFO) queue using only two stacks. The implemented queue should support all the functions of a normal queue (push, peek, pop, and empty).\n        Implement the MyQueue class:\n            void push(int x) Pushes element x to the back of the queue.\n            int pop() Removes the element from the front of the queue and returns it.\n            int peek() Returns the element at the front of the queue.\n            boolean empty() Returns true if the queue is empty, false otherwise.\n        Notes:\n            You must use only standard operations of a stack, which means only push to top, peek/pop from top, size, and is empty operations are valid.\n            Depending on your language, the stack may not be supported natively. You may simulate a stack using a list or deque (double-ended queue) as long as"
    },
    {
        "number": 232,
        "title": "Implement Queue using Stacks",
        "difficulty": 0,
        "pass": 3,
        "answer": "        self.stack1 = []\n        self.stack2 = []"
    },
    {
        "number": 232,
        "title": "Implement Queue using Stacks",
        "difficulty": 0,
        "pass": 4,
        "answer": "        \n    def __init__(self):\n    def push(self, x: int) -> None:\n    def pop(self) -> int:\n    def peek(self) -> int:\n    def empty(self) -> bool:\n        \"\"\"\n        Implement a first in first out (FIFO) queue using only two stacks. The implemented queue should support all the functions of a normal queue (push, peek, pop, and empty).\n        Implement the MyQueue class:\n            void push(int x) Pushes element x to the back of the queue.\n            int pop() Removes the element from the front of the queue and returns it.\n            int peek() Returns the element at the front of the queue.\n            boolean empty() Returns true if the queue is empty, false otherwise.\n        Notes:\n            You must use only standard operations of a stack, which means only push to top, peek/pop from top, size, and is empty operations are valid.\n            Depending on your language, the stack may not be supported natively. You may simulate a stack using a list or deque (double-ended queue) as"
    },
    {
        "number": 232,
        "title": "Implement Queue using Stacks",
        "difficulty": 0,
        "pass": 5,
        "answer": "        # Your MyQueue object will be instantiated and called as such:\n        # obj = MyQueue()\n        # obj.push(x)\n        # param_2 = obj.pop()\n        # param_3 = obj.peek()\n        # param_4 = obj.empty()"
    },
    {
        "number": 232,
        "title": "Implement Queue using Stacks",
        "difficulty": 0,
        "pass": 6,
        "answer": "    def __init__(self):\n    def push(self, x: int) -> None:\n    def pop(self) -> int:\n    def peek(self) -> int:\n    def empty(self) -> bool:\n        \"\"\"\n        Implement a first in first out (FIFO) queue using only two stacks. The implemented queue should support all the functions of a normal queue (push, peek, pop, and empty).\n        Implement the MyQueue class:\n            void push(int x) Pushes element x to the back of the queue.\n            int pop() Removes the element from the front of the queue and returns it.\n            int peek() Returns the element at the front of the queue.\n            boolean empty() Returns true if the queue is empty, false otherwise.\n        Notes:\n            You must use only standard operations of a stack, which means only push to top, peek/pop from top, size, and is empty operations are valid.\n            Depending on your language, the stack may not be supported natively. You may simulate a stack using a list or deque (double-ended queue) as long as"
    },
    {
        "number": 232,
        "title": "Implement Queue using Stacks",
        "difficulty": 0,
        "pass": 7,
        "answer": "        "
    },
    {
        "number": 232,
        "title": "Implement Queue using Stacks",
        "difficulty": 0,
        "pass": 8,
        "answer": "        self.stack1 = []\n        self.stack2 = []"
    },
    {
        "number": 232,
        "title": "Implement Queue using Stacks",
        "difficulty": 0,
        "pass": 9,
        "answer": "        "
    },
    {
        "number": 233,
        "title": "Number of Digit One",
        "difficulty": 2,
        "pass": 0,
        "answer": "        if n < 1:\n            return 0\n        if n == 1:\n            return 1\n        if n == 2:\n            return 1\n        if n == 3:\n            return 2\n        if n == 4:\n            return 2\n        if n == 5:\n            return 3\n        if n == 6:\n            return 3\n        if n == 7:\n            return 4\n        if n == 8:\n            return 4\n        if n == 9:\n            return 5\n        if n == 10:\n            return 5\n        if n == 11:\n            return 6\n        if n == 12:\n            return 6\n        if n == 13:\n            return 7\n        if n == 14:\n            return 7\n        if n == 15:\n            return 8\n        if n == 16:\n            return 8\n        if n == 17:\n            return 9\n        if n == 18:\n            return 9\n        if n == 19:\n            return 10\n        if n == 20:\n            return 10\n        if n == 21:\n            return 11\n        if n == 22:\n            "
    },
    {
        "number": 233,
        "title": "Number of Digit One",
        "difficulty": 2,
        "pass": 1,
        "answer": "        if n == 0:\n            return 0\n        if n == 1:\n            return 1\n        if n == 2:\n            return 1\n        if n == 3:\n            return 2\n        if n == 4:\n            return 2\n        if n == 5:\n            return 3\n        if n == 6:\n            return 4\n        if n == 7:\n            return 4\n        if n == 8:\n            return 5\n        if n == 9:\n            return 5\n        if n == 10:\n            return 6\n        if n == 11:\n            return 6\n        if n == 12:\n            return 7\n        if n == 13:\n            return 7\n        if n == 14:\n            return 8\n        if n == 15:\n            return 8\n        if n == 16:\n            return 9\n        if n == 17:\n            return 9\n        if n == 18:\n            return 10\n        if n == 19:\n            return 10\n        if n == 20:\n            return 11\n        if n == 21:\n            return 11\n        if n == 22:\n            "
    },
    {
        "number": 233,
        "title": "Number of Digit One",
        "difficulty": 2,
        "pass": 2,
        "answer": "        if n < 1:\n            return 0\n        if n == 1:\n            return 1\n        if n == 2:\n            return 1\n        if n == 3:\n            return 2\n        if n == 4:\n            return 2\n        if n == 5:\n            return 3\n        if n == 6:\n            return 3\n        if n == 7:\n            return 4\n        if n == 8:\n            return 4\n        if n == 9:\n            return 5\n        if n == 10:\n            return 5\n        if n == 11:\n            return 6\n        if n == 12:\n            return 6\n        if n == 13:\n            return 7\n        if n == 14:\n            return 7\n        if n == 15:\n            return 8\n        if n == 16:\n            return 8\n        if n == 17:\n            return 9\n        if n == 18:\n            return 9\n        if n == 19:\n            return 10\n        if n == 20:\n            return 10\n        if n == 21:\n            return 11\n        if n == 22:\n            "
    },
    {
        "number": 233,
        "title": "Number of Digit One",
        "difficulty": 2,
        "pass": 3,
        "answer": "        if n == 0:\n            return 0\n        count = 0\n        while n > 0:\n            count += n % 10\n            n //= 10\n        return count"
    },
    {
        "number": 233,
        "title": "Number of Digit One",
        "difficulty": 2,
        "pass": 4,
        "answer": "        if n == 0:\n            return 0\n        if n == 1:\n            return 1\n        if n == 2:\n            return 1\n        if n == 3:\n            return 2\n        if n == 4:\n            return 2\n        if n == 5:\n            return 3\n        if n == 6:\n            return 3\n        if n == 7:\n            return 4\n        if n == 8:\n            return 4\n        if n == 9:\n            return 5\n        if n == 10:\n            return 5\n        if n == 11:\n            return 6\n        if n == 12:\n            return 6\n        if n == 13:\n            return 7\n        if n == 14:\n            return 7\n        if n == 15:\n            return 8\n        if n == 16:\n            return 8\n        if n == 17:\n            return 9\n        if n == 18:\n            return 9\n        if n == 19:\n            return 10\n        if n == 20:\n            return 10\n        if n == 21:\n            return 11\n        if n == 22:\n            "
    },
    {
        "number": 233,
        "title": "Number of Digit One",
        "difficulty": 2,
        "pass": 5,
        "answer": "        if n <= 0:\n            return 0\n        if n == 1:\n            return 1\n        if n == 2:\n            return 2\n        if n == 3:\n            return 2\n        if n == 4:\n            return 3\n        if n == 5:\n            return 4\n        if n == 6:\n            return 4\n        if n == 7:\n            return 5\n        if n == 8:\n            return 5\n        if n == 9:\n            return 6\n        if n == 10:\n            return 6\n        if n == 11:\n            return 7\n        if n == 12:\n            return 7\n        if n == 13:\n            return 8\n        if n == 14:\n            return 8\n        if n == 15:\n            return 9\n        if n == 16:\n            return 9\n        if n == 17:\n            return 10\n        if n == 18:\n            return 10\n        if n == 19:\n            return 11\n        if n == 20:\n            return 11\n        if n == 21:\n            return 12\n        if n == 22:\n            "
    },
    {
        "number": 233,
        "title": "Number of Digit One",
        "difficulty": 2,
        "pass": 6,
        "answer": "        res = 0\n        if n == 0:\n            return 0\n        while n > 0:\n            res += n % 10 + 1\n            n //= 10\n        return res"
    },
    {
        "number": 233,
        "title": "Number of Digit One",
        "difficulty": 2,
        "pass": 7,
        "answer": "        if n == 0:\n            return 0\n        if n == 1:\n            return 1\n        if n == 2:\n            return 1\n        if n == 3:\n            return 2\n        if n == 4:\n            return 2\n        if n == 5:\n            return 3\n        if n == 6:\n            return 3\n        if n == 7:\n            return 4\n        if n == 8:\n            return 4\n        if n == 9:\n            return 5\n        if n == 10:\n            return 5\n        if n == 11:\n            return 6\n        if n == 12:\n            return 6\n        if n == 13:\n            return 7\n        if n == 14:\n            return 7\n        if n == 15:\n            return 8\n        if n == 16:\n            return 8\n        if n == 17:\n            return 9\n        if n == 18:\n            return 9\n        if n == 19:\n            return 10\n        if n == 20:\n            return 10\n        if n == 21:\n            return 11\n        if n == 22:\n            "
    },
    {
        "number": 233,
        "title": "Number of Digit One",
        "difficulty": 2,
        "pass": 8,
        "answer": "        if n == 0:\n            return 0\n        if n == 1:\n            return 1\n        res = 0\n        while n > 0:\n            res += n % 10\n            n //= 10\n        return res"
    },
    {
        "number": 233,
        "title": "Number of Digit One",
        "difficulty": 2,
        "pass": 9,
        "answer": "        if n == 0:\n            return 0\n        if n == 1:\n            return 1\n        if n == 2:\n            return 2\n        if n == 3:\n            return 2\n        if n == 4:\n            return 3\n        if n == 5:\n            return 3\n        if n == 6:\n            return 4\n        if n == 7:\n            return 4\n        if n == 8:\n            return 5\n        if n == 9:\n            return 5\n        if n == 10:\n            return 6\n        if n == 11:\n            return 6\n        if n == 12:\n            return 7\n        if n == 13:\n            return 7\n        if n == 14:\n            return 8\n        if n == 15:\n            return 8\n        if n == 16:\n            return 9\n        if n == 17:\n            return 9\n        if n == 18:\n            return 10\n        if n == 19:\n            return 10\n        if n == 20:\n            return 11\n        if n == 21:\n            return 11\n        if n == 22:\n            "
    },
    {
        "number": 234,
        "title": "Palindrome Linked List",
        "difficulty": 0,
        "pass": 0,
        "answer": "        if not head or not head.next:\n            return True\n        slow, fast = head, head\n        while fast and fast.next:\n            slow = slow.next\n            fast = fast.next.next\n        if fast:\n            slow = slow.next\n        while slow:\n            if slow.val!= head.val:\n                return False\n            slow = slow.next\n            head = head.next\n        return True"
    },
    {
        "number": 234,
        "title": "Palindrome Linked List",
        "difficulty": 0,
        "pass": 1,
        "answer": "        slow = fast = head\n        while fast and fast.next:\n            slow = slow.next\n            fast = fast.next.next\n        if fast:\n            slow = slow.next\n        while slow:\n            if slow.val!= head.val:\n                return False\n            slow = slow.next\n            head = head.next\n        return True"
    },
    {
        "number": 234,
        "title": "Palindrome Linked List",
        "difficulty": 0,
        "pass": 2,
        "answer": "        if not head:\n            return True\n        slow, fast = head, head\n        while fast and fast.next:\n            slow = slow.next\n            fast = fast.next.next\n        if fast:\n            slow = slow.next\n        while slow:\n            if slow.val!= head.val:\n                return False\n            slow = slow.next\n            head = head.next\n        return True"
    },
    {
        "number": 234,
        "title": "Palindrome Linked List",
        "difficulty": 0,
        "pass": 3,
        "answer": "        if not head:\n            return True\n        slow = fast = head\n        while fast and fast.next:\n            slow = slow.next\n            fast = fast.next.next\n        if fast:\n            slow = slow.next\n        while slow:\n            if slow.val!= head.val:\n                return False\n            slow = slow.next\n            head = head.next\n        return True"
    },
    {
        "number": 234,
        "title": "Palindrome Linked List",
        "difficulty": 0,
        "pass": 4,
        "answer": "        if not head:\n            return True\n        slow, fast = head, head\n        while fast and fast.next:\n            slow = slow.next\n            fast = fast.next.next\n        if fast:\n            slow = slow.next\n        while slow:\n            if slow.val!= head.val:\n                return False\n            slow = slow.next\n            head = head.next\n        return True"
    },
    {
        "number": 234,
        "title": "Palindrome Linked List",
        "difficulty": 0,
        "pass": 5,
        "answer": "        if head is None:\n            return True\n        \n        stack = []\n        while head is not None:\n            stack.append(head.val)\n            head = head.next\n        \n        while len(stack) > 1:\n            if stack.pop()!= stack.pop(0):\n                return False\n        \n        return True"
    },
    {
        "number": 234,
        "title": "Palindrome Linked List",
        "difficulty": 0,
        "pass": 6,
        "answer": "        if not head or not head.next:\n            return True\n        slow = fast = head\n        while fast and fast.next:\n            slow = slow.next\n            fast = fast.next.next\n        node = None\n        while slow:\n            nxt = slow.next\n            slow.next = node\n            node = slow\n            slow = nxt\n        while node:\n            if node.val!= head.val:\n                return False\n            node = node.next\n            head = head.next\n        return True"
    },
    {
        "number": 234,
        "title": "Palindrome Linked List",
        "difficulty": 0,
        "pass": 7,
        "answer": "        if not head:\n            return True\n        \n        slow = fast = head\n        \n        while fast and fast.next:\n            slow = slow.next\n            fast = fast.next.next\n            \n        if fast:\n            slow = slow.next\n            \n        while slow:\n            if slow.val!= head.val:\n                return False\n            slow = slow.next\n            head = head.next\n            \n        return True"
    },
    {
        "number": 234,
        "title": "Palindrome Linked List",
        "difficulty": 0,
        "pass": 8,
        "answer": "        if not head:\n            return True\n        slow = fast = head\n        while fast and fast.next:\n            slow = slow.next\n            fast = fast.next.next\n        prev = None\n        while slow:\n            nxt = slow.next\n            slow.next = prev\n            prev = slow\n            slow = nxt\n        slow = prev\n        while slow:\n            if slow.val!= head.val:\n                return False\n            slow = slow.next\n            head = head.next\n        return True"
    },
    {
        "number": 234,
        "title": "Palindrome Linked List",
        "difficulty": 0,
        "pass": 9,
        "answer": "        if not head:\n            return True\n        \n        slow = head\n        fast = head\n        \n        while fast.next and fast.next.next:\n            slow = slow.next\n            fast = fast.next.next\n        \n        if fast.next:\n            slow = slow.next\n        \n        while slow:\n            if slow.val!= head.val:\n                return False\n            slow = slow.next\n            head = head.next\n        \n        return True"
    },
    {
        "number": 235,
        "title": "Lowest Common Ancestor of a Binary Search Tree",
        "difficulty": 1,
        "pass": 0,
        "answer": "        if not root:\n            return None\n        if p.val < root.val and q.val < root.val:\n            return self.lowestCommonAncestor(root.left, p, q)\n        elif p.val > root.val and q.val > root.val:\n            return self.lowestCommonAncestor(root.right, p, q)\n        else:\n            return root"
    },
    {
        "number": 235,
        "title": "Lowest Common Ancestor of a Binary Search Tree",
        "difficulty": 1,
        "pass": 1,
        "answer": "        if not root:\n            return None\n        if p.val < root.val and q.val < root.val:\n            return self.lowestCommonAncestor(root.left, p, q)\n        elif p.val > root.val and q.val > root.val:\n            return self.lowestCommonAncestor(root.right, p, q)\n        else:\n            return root"
    },
    {
        "number": 235,
        "title": "Lowest Common Ancestor of a Binary Search Tree",
        "difficulty": 1,
        "pass": 2,
        "answer": "        if not root:\n            return None\n        if p.val < root.val and q.val < root.val:\n            return self.lowestCommonAncestor(root.left, p, q)\n        elif p.val > root.val and q.val > root.val:\n            return self.lowestCommonAncestor(root.right, p, q)\n        else:\n            return root"
    },
    {
        "number": 235,
        "title": "Lowest Common Ancestor of a Binary Search Tree",
        "difficulty": 1,
        "pass": 3,
        "answer": "        if not root:\n            return None\n        if root.val > p.val and root.val > q.val:\n            return self.lowestCommonAncestor(root.left, p, q)\n        elif root.val < p.val and root.val < q.val:\n            return self.lowestCommonAncestor(root.right, p, q)\n        else:\n            return root"
    },
    {
        "number": 235,
        "title": "Lowest Common Ancestor of a Binary Search Tree",
        "difficulty": 1,
        "pass": 4,
        "answer": "        if not root:\n            return None\n        if p.val < root.val and q.val < root.val:\n            return self.lowestCommonAncestor(root.left, p, q)\n        elif p.val > root.val and q.val > root.val:\n            return self.lowestCommonAncestor(root.right, p, q)\n        else:\n            return root"
    },
    {
        "number": 235,
        "title": "Lowest Common Ancestor of a Binary Search Tree",
        "difficulty": 1,
        "pass": 5,
        "answer": "        if not root:\n            return None\n        if p.val < root.val and q.val < root.val:\n            return self.lowestCommonAncestor(root.left, p, q)\n        elif p.val > root.val and q.val > root.val:\n            return self.lowestCommonAncestor(root.right, p, q)\n        else:\n            return root"
    },
    {
        "number": 235,
        "title": "Lowest Common Ancestor of a Binary Search Tree",
        "difficulty": 1,
        "pass": 6,
        "answer": "        if root is None:\n            return None\n        if root.val == p.val or root.val == q.val:\n            return root\n        left = self.lowestCommonAncestor(root.left, p, q)\n        right = self.lowestCommonAncestor(root.right, p, q)\n        if left is not None and right is not None:\n            return root\n        if left is not None:\n            return left\n        if right is not None:\n            return right\n        return None"
    },
    {
        "number": 235,
        "title": "Lowest Common Ancestor of a Binary Search Tree",
        "difficulty": 1,
        "pass": 7,
        "answer": "        if root is None:\n            return None\n        if p == root or q == root:\n            return root\n        left = self.lowestCommonAncestor(root.left, p, q)\n        right = self.lowestCommonAncestor(root.right, p, q)\n        if left is not None and right is not None:\n            return root\n        if left is not None:\n            return left\n        if right is not None:\n            return right\n        return None"
    },
    {
        "number": 235,
        "title": "Lowest Common Ancestor of a Binary Search Tree",
        "difficulty": 1,
        "pass": 8,
        "answer": "        if root is None:\n            return None\n        if root.val == p.val or root.val == q.val:\n            return root\n        left = self.lowestCommonAncestor(root.left, p, q)\n        right = self.lowestCommonAncestor(root.right, p, q)\n        if left is not None and right is not None:\n            return root\n        if left is not None:\n            return left\n        if right is not None:\n            return right\n        return None"
    },
    {
        "number": 235,
        "title": "Lowest Common Ancestor of a Binary Search Tree",
        "difficulty": 1,
        "pass": 9,
        "answer": "        if not root:\n            return None\n        if p.val < root.val and q.val < root.val:\n            return self.lowestCommonAncestor(root.left, p, q)\n        elif p.val > root.val and q.val > root.val:\n            return self.lowestCommonAncestor(root.right, p, q)\n        else:\n            return root"
    },
    {
        "number": 236,
        "title": "Lowest Common Ancestor of a Binary Tree",
        "difficulty": 1,
        "pass": 0,
        "answer": "        if root is None:\n            return None\n        if root.val == p.val or root.val == q.val:\n            return root\n        left = self.lowestCommonAncestor(root.left, p, q)\n        right = self.lowestCommonAncestor(root.right, p, q)\n        if left is not None and right is not None:\n            return root\n        if left is not None:\n            return left\n        if right is not None:\n            return right\n        return None"
    },
    {
        "number": 236,
        "title": "Lowest Common Ancestor of a Binary Tree",
        "difficulty": 1,
        "pass": 1,
        "answer": "        if not root:\n            return None\n        if root.val == p.val or root.val == q.val:\n            return root\n        left = self.lowestCommonAncestor(root.left, p, q)\n        right = self.lowestCommonAncestor(root.right, p, q)\n        if left and right:\n            return root\n        if left:\n            return left\n        if right:\n            return right\n        return None"
    },
    {
        "number": 236,
        "title": "Lowest Common Ancestor of a Binary Tree",
        "difficulty": 1,
        "pass": 2,
        "answer": "        if not root:\n            return None\n        if root.val == p.val or root.val == q.val:\n            return root\n        left = self.lowestCommonAncestor(root.left, p, q)\n        right = self.lowestCommonAncestor(root.right, p, q)\n        if left and right:\n            return root\n        if left:\n            return left\n        if right:\n            return right\n        return None"
    },
    {
        "number": 236,
        "title": "Lowest Common Ancestor of a Binary Tree",
        "difficulty": 1,
        "pass": 3,
        "answer": "        if not root:\n            return None\n        if root.val == p.val or root.val == q.val:\n            return root\n        left = self.lowestCommonAncestor(root.left, p, q)\n        right = self.lowestCommonAncestor(root.right, p, q)\n        if left and right:\n            return root\n        if left:\n            return left\n        if right:\n            return right\n        return None"
    },
    {
        "number": 236,
        "title": "Lowest Common Ancestor of a Binary Tree",
        "difficulty": 1,
        "pass": 4,
        "answer": "        if root is None:\n            return None\n        if root.val == p.val or root.val == q.val:\n            return root\n        left = self.lowestCommonAncestor(root.left, p, q)\n        right = self.lowestCommonAncestor(root.right, p, q)\n        if left is not None and right is not None:\n            return root\n        if left is not None:\n            return left\n        if right is not None:\n            return right\n        return None"
    },
    {
        "number": 236,
        "title": "Lowest Common Ancestor of a Binary Tree",
        "difficulty": 1,
        "pass": 5,
        "answer": "        if root is None:\n            return None\n        if root.val == p.val or root.val == q.val:\n            return root\n        left = self.lowestCommonAncestor(root.left, p, q)\n        right = self.lowestCommonAncestor(root.right, p, q)\n        if left is not None and right is not None:\n            return root\n        if left is not None:\n            return left\n        if right is not None:\n            return right\n        return None"
    },
    {
        "number": 236,
        "title": "Lowest Common Ancestor of a Binary Tree",
        "difficulty": 1,
        "pass": 6,
        "answer": "        if not root:\n            return None\n        if root.val == p.val or root.val == q.val:\n            return root\n        left = self.lowestCommonAncestor(root.left, p, q)\n        right = self.lowestCommonAncestor(root.right, p, q)\n        if left and right:\n            return root\n        if left:\n            return left\n        if right:\n            return right\n        return None"
    },
    {
        "number": 236,
        "title": "Lowest Common Ancestor of a Binary Tree",
        "difficulty": 1,
        "pass": 7,
        "answer": "        if not root:\n            return None\n        if root.val == p.val or root.val == q.val:\n            return root\n        left = self.lowestCommonAncestor(root.left, p, q)\n        right = self.lowestCommonAncestor(root.right, p, q)\n        if left and right:\n            return root\n        return left if left else right"
    },
    {
        "number": 236,
        "title": "Lowest Common Ancestor of a Binary Tree",
        "difficulty": 1,
        "pass": 8,
        "answer": "        if not root:\n            return None\n        if root.val == p.val or root.val == q.val:\n            return root\n        left = self.lowestCommonAncestor(root.left, p, q)\n        right = self.lowestCommonAncestor(root.right, p, q)\n        if left and right:\n            return root\n        if left:\n            return left\n        if right:\n            return right\n        return None"
    },
    {
        "number": 236,
        "title": "Lowest Common Ancestor of a Binary Tree",
        "difficulty": 1,
        "pass": 9,
        "answer": "        if root is None:\n            return None\n        if root.val == p.val or root.val == q.val:\n            return root\n        left = self.lowestCommonAncestor(root.left, p, q)\n        right = self.lowestCommonAncestor(root.right, p, q)\n        if left is not None and right is not None:\n            return root\n        if left is not None:\n            return left\n        if right is not None:\n            return right\n        return None"
    },
    {
        "number": 237,
        "title": "Delete Node in a Linked List",
        "difficulty": 1,
        "pass": 0,
        "answer": "        if not node:\n            return\n        node.val = node.next.val\n        node.next = node.next.next"
    },
    {
        "number": 237,
        "title": "Delete Node in a Linked List",
        "difficulty": 1,
        "pass": 1,
        "answer": "        if not node:\n            return None\n        node.val = node.next.val\n        node.next = node.next.next\n        return node"
    },
    {
        "number": 237,
        "title": "Delete Node in a Linked List",
        "difficulty": 1,
        "pass": 2,
        "answer": "        if not node:\n            return None\n        node.val = node.next.val\n        node.next = node.next.next\n        return node"
    },
    {
        "number": 237,
        "title": "Delete Node in a Linked List",
        "difficulty": 1,
        "pass": 3,
        "answer": "        if not node:\n            return\n        node.val = node.next.val\n        node.next = node.next.next"
    },
    {
        "number": 237,
        "title": "Delete Node in a Linked List",
        "difficulty": 1,
        "pass": 4,
        "answer": "        # Definition for singly-linked list.\n        # class ListNode:\n        #     def __init__(self, val=0, next=None):\n        #         self.val = val\n        #         self.next = next\n        # Definition for singly-linked list.\n        # class ListNode:\n        #     def __init__(self, val=0, next=None):\n        #         self.val = val\n        #         self.next = next\n        # Definition for singly-linked list.\n        # class ListNode:\n        #     def __init__(self, val=0, next=None):\n        #         self.val = val\n        #         self.next = next\n        # Definition for singly-linked list.\n        # class ListNode:\n        #     def __init__(self, val=0, next=None):\n        #         self.val = val\n        #         self.next = next\n        # Definition for singly-linked list.\n        # class ListNode:\n        #     def __init__(self, val="
    },
    {
        "number": 237,
        "title": "Delete Node in a Linked List",
        "difficulty": 1,
        "pass": 5,
        "answer": "        if not node:\n            return\n        if node.next:\n            node.val = node.next.val\n            node.next = node.next.next\n        else:\n            node.val = None\n            node.next = None"
    },
    {
        "number": 237,
        "title": "Delete Node in a Linked List",
        "difficulty": 1,
        "pass": 6,
        "answer": "        node.val = node.next.val\n        node.next = node.next.next"
    },
    {
        "number": 237,
        "title": "Delete Node in a Linked List",
        "difficulty": 1,
        "pass": 7,
        "answer": "        if not node:\n            return\n        if node.next:\n            node.val = node.next.val\n            node.next = node.next.next\n        else:\n            node.val = None\n            node.next = None"
    },
    {
        "number": 237,
        "title": "Delete Node in a Linked List",
        "difficulty": 1,
        "pass": 8,
        "answer": "        if node == None:\n            return\n        node.val = node.next.val\n        node.next = node.next.next\n        return"
    },
    {
        "number": 237,
        "title": "Delete Node in a Linked List",
        "difficulty": 1,
        "pass": 9,
        "answer": "        node.val = node.next.val\n        node.next = node.next.next"
    },
    {
        "number": 238,
        "title": "Product of Array Except Self",
        "difficulty": 1,
        "pass": 0,
        "answer": "        n = len(nums)\n        left = [1] * n\n        right = [1] * n\n        for i in range(1, n):\n            left[i] = left[i - 1] * nums[i - 1]\n        for i in range(n - 2, -1, -1):\n            right[i] = right[i + 1] * nums[i + 1]\n        ans = []\n        for i in range(n):\n            ans.append(left[i] * right[i])\n        return ans"
    },
    {
        "number": 238,
        "title": "Product of Array Except Self",
        "difficulty": 1,
        "pass": 1,
        "answer": "        \n        length = len(nums)\n        answer = [0] * length\n        answer[0] = 1\n        \n        for i in range(1, length):\n            answer[i] = answer[i-1] * nums[i-1]\n        \n        R = 1\n        for i in range(length-1, -1, -1):\n            answer[i] = answer[i] * R\n            R *= nums[i]\n        \n        return answer"
    },
    {
        "number": 238,
        "title": "Product of Array Except Self",
        "difficulty": 1,
        "pass": 2,
        "answer": "        length = len(nums)\n        answer = [0] * length\n        answer[0] = 1\n        for i in range(1, length):\n            answer[i] = nums[i - 1] * answer[i - 1]\n        R = 1\n        for i in range(length - 1, -1, -1):\n            answer[i] = answer[i] * R\n            R *= nums[i]\n        return answer"
    },
    {
        "number": 238,
        "title": "Product of Array Except Self",
        "difficulty": 1,
        "pass": 3,
        "answer": "        length = len(nums)\n        if length == 0:\n            return []\n        left = [1] * length\n        right = [1] * length\n        for i in range(1, length):\n            left[i] = left[i - 1] * nums[i - 1]\n        for i in range(length - 2, -1, -1):\n            right[i] = right[i + 1] * nums[i + 1]\n        res = []\n        for i in range(length):\n            res.append(left[i] * right[i])\n        return res"
    },
    {
        "number": 238,
        "title": "Product of Array Except Self",
        "difficulty": 1,
        "pass": 4,
        "answer": "        n = len(nums)\n        left = [1] * n\n        right = [1] * n\n        for i in range(1, n):\n            left[i] = left[i-1] * nums[i-1]\n        for i in range(n-2, -1, -1):\n            right[i] = right[i+1] * nums[i+1]\n        ans = []\n        for i in range(n):\n            ans.append(left[i] * right[i])\n        return ans"
    },
    {
        "number": 238,
        "title": "Product of Array Except Self",
        "difficulty": 1,
        "pass": 5,
        "answer": "        n = len(nums)\n        left = [1] * n\n        right = [1] * n\n        for i in range(1, n):\n            left[i] = left[i - 1] * nums[i - 1]\n        for i in range(n - 2, -1, -1):\n            right[i] = right[i + 1] * nums[i + 1]\n        ans = []\n        for i in range(n):\n            ans.append(left[i] * right[i])\n        return ans"
    },
    {
        "number": 238,
        "title": "Product of Array Except Self",
        "difficulty": 1,
        "pass": 6,
        "answer": "        \n        \"\"\"\n        n = len(nums)\n        ans = [0] * n\n        ans[0] = 1\n        \n        for i in range(1, n):\n            ans[i] = ans[i-1] * nums[i-1]\n        \n        prod = 1\n        for i in range(n-1, -1, -1):\n            ans[i] = ans[i] * prod\n            prod *= nums[i]\n        \n        return ans\n        \"\"\"\n        \n        \"\"\"\n        n = len(nums)\n        ans = [0] * n\n        ans[0] = 1\n        \n        for i in range(1, n):\n            ans[i] = nums[i-1] * ans[i-1]\n        \n        prod = 1\n        for i in range(n-1, -1, -1):\n            ans[i] = ans[i] * prod\n            prod *= nums[i]\n        \n        return ans\n        \"\"\"\n        \n        \"\"\""
    },
    {
        "number": 238,
        "title": "Product of Array Except Self",
        "difficulty": 1,
        "pass": 7,
        "answer": "        n = len(nums)\n        if n == 0:\n            return []\n        left = [1] * n\n        right = [1] * n\n        for i in range(1, n):\n            left[i] = left[i - 1] * nums[i - 1]\n        for i in range(n - 2, -1, -1):\n            right[i] = right[i + 1] * nums[i + 1]\n        ans = []\n        for i in range(n):\n            ans.append(left[i] * right[i])\n        return ans"
    },
    {
        "number": 238,
        "title": "Product of Array Except Self",
        "difficulty": 1,
        "pass": 8,
        "answer": "        n = len(nums)\n        if n == 0:\n            return []\n        if n == 1:\n            return [nums[0]]"
    },
    {
        "number": 238,
        "title": "Product of Array Except Self",
        "difficulty": 1,
        "pass": 9,
        "answer": "        length = len(nums)\n        if length == 0:\n            return nums\n        \n        left = [0] * length\n        right = [0] * length\n        \n        left[0] = 1\n        for i in range(1, length):\n            left[i] = nums[i - 1] * left[i - 1]\n        \n        right[length - 1] = 1\n        for i in range(length - 2, -1, -1):\n            right[i] = nums[i + 1] * right[i + 1]\n        \n        for i in range(length):\n            nums[i] = left[i] * right[i]\n        \n        return nums"
    },
    {
        "number": 239,
        "title": "Sliding Window Maximum",
        "difficulty": 2,
        "pass": 0,
        "answer": "        if not nums:\n            return []\n        if k == len(nums):\n            return nums\n        if k == 1:\n            return nums\n        \n        n = len(nums)\n        ans = []\n        for i in range(n - k + 1):\n            ans.append(max(nums[i:i+k]))\n        return ans"
    },
    {
        "number": 239,
        "title": "Sliding Window Maximum",
        "difficulty": 2,
        "pass": 1,
        "answer": "        n = len(nums)\n        if n * k == 0:\n            return []\n        if n * k == 1:\n            return nums"
    },
    {
        "number": 239,
        "title": "Sliding Window Maximum",
        "difficulty": 2,
        "pass": 2,
        "answer": "        n = len(nums)\n        if n * k == 0:\n            return []\n        if n * k == 1:\n            return nums"
    },
    {
        "number": 239,
        "title": "Sliding Window Maximum",
        "difficulty": 2,
        "pass": 3,
        "answer": "        if not nums:\n            return []\n        if k == 1:\n            return nums\n        \n        window = []\n        res = []\n        \n        for i in range(k):\n            window.append(nums[i])\n            \n        res.append(max(window))\n        \n        for i in range(k, len(nums)):\n            window.pop(0)\n            window.append(nums[i])\n            res.append(max(window))\n            \n        return res\n        \nclass Solution:\n    def maxSlidingWindow(self, nums: List[int], k: int) -> List[int]:\n        \"\"\"\n        You are given an array of integers nums, there is a sliding window of size k which is moving from the very left of the array to the very right. You can only see the k numbers in the window. Each time the sliding window moves right by one position.\n        Return the max sliding window.\n        Example 1:\n        Input: nums = [1,3,-1,-3,5,3,6,7], k"
    },
    {
        "number": 239,
        "title": "Sliding Window Maximum",
        "difficulty": 2,
        "pass": 4,
        "answer": "        n = len(nums)\n        if n * k == 0:\n            return []\n        if n * k == 1:\n            return nums\n        if k == 1:\n            return nums\n        res = []\n        for i in range(n - k + 1):\n            res.append(max(nums[i:i + k]))\n        return res"
    },
    {
        "number": 239,
        "title": "Sliding Window Maximum",
        "difficulty": 2,
        "pass": 5,
        "answer": "        n = len(nums)\n        if n * k == 0:\n            return []\n        if k == 1:\n            return nums\n        res = []\n        for i in range(n - k + 1):\n            res.append(max(nums[i:i + k]))\n        return res"
    },
    {
        "number": 239,
        "title": "Sliding Window Maximum",
        "difficulty": 2,
        "pass": 6,
        "answer": "        n = len(nums)\n        if n * k == 0:\n            return []\n        if n * k == 1:\n            return nums"
    },
    {
        "number": 239,
        "title": "Sliding Window Maximum",
        "difficulty": 2,
        "pass": 7,
        "answer": "        n = len(nums)\n        if n * k == 0:\n            return []\n        if n * k == 1:\n            return nums\n        if k == 1:\n            return nums\n        if k == n:\n            return nums\n        if k == 2:\n            return max(nums)\n        if k == 3:\n            return max(nums)\n        if k == 4:\n            return max(nums)\n        if k == 5:\n            return max(nums)\n        if k == 6:\n            return max(nums)\n        if k == 7:\n            return max(nums)\n        if k == 8:\n            return max(nums)\n        if k == 9:\n            return max(nums)\n        if k == 10:\n            return max(nums)\n        if k == 11:\n            return max(nums)\n        if k == 12:\n            return max(nums)\n        if k == 13:\n            return max(nums)\n        if k == 14:\n            return max"
    },
    {
        "number": 239,
        "title": "Sliding Window Maximum",
        "difficulty": 2,
        "pass": 8,
        "answer": "        n = len(nums)\n        if n * k == 0:\n            return []\n        if n * k == 1:\n            return nums\n        if k == 1:\n            return nums\n        if k > n:\n            return []\n        res = []\n        for i in range(n - k + 1):\n            res.append(max(nums[i:i + k]))\n        return res\n"
    },
    {
        "number": 239,
        "title": "Sliding Window Maximum",
        "difficulty": 2,
        "pass": 9,
        "answer": "        if len(nums) == 0:\n            return []\n        if k == 0:\n            return []\n        if k > len(nums):\n            return []\n        if k == len(nums):\n            return nums\n        \n        res = []\n        for i in range(len(nums)-k+1):\n            res.append(max(nums[i:i+k]))\n        return res"
    },
    {
        "number": 240,
        "title": "Search a 2D Matrix II",
        "difficulty": 1,
        "pass": 0,
        "answer": "        if not matrix or not matrix[0]:\n            return False\n        m, n = len(matrix), len(matrix[0])\n        i, j = 0, n - 1\n        while i < m and j >= 0:\n            if matrix[i][j] == target:\n                return True\n            elif matrix[i][j] > target:\n                j -= 1\n            else:\n                i += 1\n        return False"
    },
    {
        "number": 240,
        "title": "Search a 2D Matrix II",
        "difficulty": 1,
        "pass": 1,
        "answer": "        if not matrix:\n            return False\n        m, n = len(matrix), len(matrix[0])\n        i, j = 0, n - 1\n        while i <= m - 1 and j >= 0:\n            if matrix[i][j] == target:\n                return True\n            elif matrix[i][j] > target:\n                j -= 1\n            else:\n                i += 1\n        return False"
    },
    {
        "number": 240,
        "title": "Search a 2D Matrix II",
        "difficulty": 1,
        "pass": 2,
        "answer": "        if not matrix:\n            return False\n        \n        m, n = len(matrix), len(matrix[0])\n        \n        row, col = 0, n - 1\n        \n        while row < m and col >= 0:\n            if matrix[row][col] == target:\n                return True\n            elif matrix[row][col] > target:\n                col -= 1\n            else:\n                row += 1\n        \n        return False\n"
    },
    {
        "number": 240,
        "title": "Search a 2D Matrix II",
        "difficulty": 1,
        "pass": 3,
        "answer": "        if not matrix or not matrix[0]:\n            return False\n        m = len(matrix)\n        n = len(matrix[0])\n        row = 0\n        col = n - 1\n        while row < m and col >= 0:\n            if matrix[row][col] == target:\n                return True\n            elif matrix[row][col] > target:\n                col -= 1\n            else:\n                row += 1\n        return False"
    },
    {
        "number": 240,
        "title": "Search a 2D Matrix II",
        "difficulty": 1,
        "pass": 4,
        "answer": "        if not matrix or not matrix[0]:\n            return False\n        m, n = len(matrix), len(matrix[0])\n        i, j = 0, n - 1\n        while i < m and j >= 0:\n            if matrix[i][j] == target:\n                return True\n            elif matrix[i][j] < target:\n                i += 1\n            else:\n                j -= 1\n        return False"
    },
    {
        "number": 240,
        "title": "Search a 2D Matrix II",
        "difficulty": 1,
        "pass": 5,
        "answer": "        if not matrix or not matrix[0]:\n            return False\n        m, n = len(matrix), len(matrix[0])\n        i, j = 0, n - 1\n        while i < m and j >= 0:\n            if matrix[i][j] == target:\n                return True\n            elif matrix[i][j] > target:\n                j -= 1\n            else:\n                i += 1\n        return False"
    },
    {
        "number": 240,
        "title": "Search a 2D Matrix II",
        "difficulty": 1,
        "pass": 6,
        "answer": "        if not matrix or not matrix[0]:\n            return False\n        m, n = len(matrix), len(matrix[0])\n        i, j = 0, n - 1\n        while i < m and j >= 0:\n            if matrix[i][j] == target:\n                return True\n            elif matrix[i][j] > target:\n                j -= 1\n            else:\n                i += 1\n        return False"
    },
    {
        "number": 240,
        "title": "Search a 2D Matrix II",
        "difficulty": 1,
        "pass": 7,
        "answer": "        m = len(matrix)\n        if m == 0:\n            return False\n        n = len(matrix[0])\n        if n == 0:\n            return False\n        \n        i = 0\n        j = n - 1\n        while i < m and j >= 0:\n            if matrix[i][j] == target:\n                return True\n            elif matrix[i][j] < target:\n                i += 1\n            else:\n                j -= 1\n        return False"
    },
    {
        "number": 240,
        "title": "Search a 2D Matrix II",
        "difficulty": 1,
        "pass": 8,
        "answer": "        m = len(matrix)\n        if m == 0:\n            return False\n        n = len(matrix[0])\n        if n == 0:\n            return False\n        i, j = 0, n - 1\n        while i < m and j >= 0:\n            if matrix[i][j] == target:\n                return True\n            elif matrix[i][j] > target:\n                j -= 1\n            else:\n                i += 1\n        return False\n"
    },
    {
        "number": 240,
        "title": "Search a 2D Matrix II",
        "difficulty": 1,
        "pass": 9,
        "answer": "        if not matrix:\n            return False\n        m, n = len(matrix), len(matrix[0])\n        i, j = 0, n - 1\n        while i < m and j >= 0:\n            if matrix[i][j] == target:\n                return True\n            elif matrix[i][j] > target:\n                j -= 1\n            else:\n                i += 1\n        return False"
    },
    {
        "number": 241,
        "title": "Different Ways to Add Parentheses",
        "difficulty": 1,
        "pass": 0,
        "answer": "        if not expression:\n            return []\n        \n        ops = {\n            '+': lambda x, y: x + y,\n            '-': lambda x, y: x - y,\n            '*': lambda x, y: x * y,\n            '/': lambda x, y: int(x / y)\n        }\n        \n        def dfs(s, i):\n            if i == len(s):\n                return [int(s)]\n            \n            res = []\n            for j in range(i, len(s)):\n                op = s[i:j+1]\n                if op in ops:\n                    left = dfs(s, j+1)\n                    right = dfs(s, j+1)\n                    for l in left:\n                        for r in right:\n                            res.append(ops[op](l, r))\n            return res\n        \n        return dfs(expression, 0)"
    },
    {
        "number": 241,
        "title": "Different Ways to Add Parentheses",
        "difficulty": 1,
        "pass": 1,
        "answer": "        \n        # DFS\n        # Time: O(n)\n        # Space: O(n)\n        if expression == \"\":\n            return []\n        \n        n = len(expression)\n        res = []\n        \n        def dfs(idx, curr):\n            if idx == n:\n                res.append(curr)\n                return\n            \n            if expression[idx] == '+':\n                dfs(idx+1, curr+expression[idx+1])\n                dfs(idx+1, curr)\n            elif expression[idx] == '-':\n                dfs(idx+1, curr-expression[idx+1])\n                dfs(idx+1, curr)\n            elif expression[idx] == '*':\n                dfs(idx+1, curr*expression[idx+1])\n                dfs(idx+1, curr)\n            else:\n                dfs(idx+1, curr//expression[idx+1])\n                df"
    },
    {
        "number": 241,
        "title": "Different Ways to Add Parentheses",
        "difficulty": 1,
        "pass": 2,
        "answer": "        \n        def compute(left, right, op):\n            if op == '+':\n                return left + right\n            elif op == '-':\n                return left - right\n            elif op == '*':\n                return left * right\n            else:\n                return int(left / right)\n        \n        def diffWaysToComputeHelper(expression):\n            if expression.isdigit():\n                return [int(expression)]\n            res = []\n            for i in range(len(expression)):\n                if expression[i] in '+-*':\n                    left = diffWaysToComputeHelper(expression[:i])\n                    right = diffWaysToComputeHelper(expression[i+1:])\n                    for l in left:\n                        for r in right:\n                            res.append(compute(l, r, expression[i]))\n            return res\n        \n        return diffWaysToComputeHelper(expression)"
    },
    {
        "number": 241,
        "title": "Different Ways to Add Parentheses",
        "difficulty": 1,
        "pass": 3,
        "answer": "        def dfs(left, right, op, res):\n            if not left and not right and not op:\n                res.append(0)\n                return\n            if not left:\n                dfs(left, right, op, res)\n            if not right:\n                dfs(left, right, op, res)\n            if not op:\n                dfs(left, right, op, res)\n            if left and right and op:\n                dfs(left - 1, right - 1, op - 1, res)\n                dfs(left - 1, right, op - 1, res)\n                dfs(left, right - 1, op - 1, res)\n                dfs(left - 1, right - 1, op - 1, res)\n                dfs(left - 1, right, op - 1, res)\n                dfs(left, right - 1, op - 1, res)\n                dfs(left - 1, right - 1, op - 1, res)\n                dfs(left - 1, right, op - 1, res)\n                dfs(left"
    },
    {
        "number": 241,
        "title": "Different Ways to Add Parentheses",
        "difficulty": 1,
        "pass": 4,
        "answer": "        def solve(expression):\n            if expression.isdigit():\n                return int(expression)\n            res = []\n            for i in range(len(expression)):\n                if expression[i] == '+' or expression[i] == '-':\n                    left = solve(expression[:i])\n                    right = solve(expression[i+1:])\n                    if expression[i] == '+':\n                        res.append(left+right)\n                    else:\n                        res.append(left-right)\n            return res\n        return solve(expression)"
    },
    {
        "number": 241,
        "title": "Different Ways to Add Parentheses",
        "difficulty": 1,
        "pass": 5,
        "answer": "        def compute(left, right, op):\n            if op == '+':\n                return left + right\n            elif op == '-':\n                return left - right\n            elif op == '*':\n                return left * right\n            else:\n                return int(left / right)"
    },
    {
        "number": 241,
        "title": "Different Ways to Add Parentheses",
        "difficulty": 1,
        "pass": 6,
        "answer": "        if not expression:\n            return []\n        if expression.isdigit():\n            return [int(expression)]\n        res = []\n        for i in range(len(expression)):\n            if expression[i] in '+-*':\n                left = self.diffWaysToCompute(expression[:i])\n                right = self.diffWaysToCompute(expression[i+1:])\n                for l in left:\n                    for r in right:\n                        if expression[i] == '+':\n                            res.append(l+r)\n                        elif expression[i] == '-':\n                            res.append(l-r)\n                        else:\n                            res.append(l*r)\n        return res"
    },
    {
        "number": 241,
        "title": "Different Ways to Add Parentheses",
        "difficulty": 1,
        "pass": 7,
        "answer": "        if not expression:\n            return []\n        \n        ops = {'+': lambda a, b: a + b, '-': lambda a, b: a - b, '*': lambda a, b: a * b, '/': lambda a, b: int(a / b)}\n        \n        def dfs(expression):\n            if not expression:\n                return []\n            if len(expression) == 1:\n                return [int(expression)]\n            \n            res = []\n            for i in range(len(expression)):\n                if expression[i] in ops:\n                    left = dfs(expression[:i])\n                    right = dfs(expression[i+1:])\n                    for l in left:\n                        for r in right:\n                            res.append(ops[expression[i]](l, r))\n            return res\n        \n        return dfs(expression)"
    },
    {
        "number": 241,
        "title": "Different Ways to Add Parentheses",
        "difficulty": 1,
        "pass": 8,
        "answer": "        def diffWaysToCompute(self, expression: str) -> List[int]:\n            \"\"\"\n            :type expression: str\n            :rtype: List[int]\n            \"\"\"\n            res = []\n            for i in range(len(expression)):\n                if expression[i] in \"+-*\":\n                    left = self.diffWaysToCompute(expression[:i])\n                    right = self.diffWaysToCompute(expression[i+1:])\n                    for l in left:\n                        for r in right:\n                            if expression[i] == \"+\":\n                                res.append(l+r)\n                            elif expression[i] == \"-\":\n                                res.append(l-r)\n                            elif expression[i] == \"*\":\n                                res.append(l*r)\n            return res\n"
    },
    {
        "number": 241,
        "title": "Different Ways to Add Parentheses",
        "difficulty": 1,
        "pass": 9,
        "answer": "        from functools import lru_cache\n        @lru_cache(None)\n        def dp(expression):\n            if expression.isdigit():\n                return int(expression)\n            res = []\n            for i in range(len(expression)):\n                if expression[i] == '+' or expression[i] == '-':\n                    left = dp(expression[:i])\n                    right = dp(expression[i+1:])\n                    if expression[i] == '+':\n                        res.append(left+right)\n                    else:\n                        res.append(left-right)\n            return res\n        return dp(expression)"
    },
    {
        "number": 242,
        "title": "Valid Anagram",
        "difficulty": 0,
        "pass": 0,
        "answer": "        if len(s)!= len(t):\n            return False\n        dic1 = {}\n        dic2 = {}\n        for i in range(len(s)):\n            if s[i] in dic1:\n                dic1[s[i]] += 1\n            else:\n                dic1[s[i]] = 1\n            if t[i] in dic2:\n                dic2[t[i]] += 1\n            else:\n                dic2[t[i]] = 1\n        for i in dic1:\n            if i not in dic2:\n                return False\n            if dic1[i]!= dic2[i]:\n                return False\n        return True"
    },
    {
        "number": 242,
        "title": "Valid Anagram",
        "difficulty": 0,
        "pass": 1,
        "answer": "        if len(s)!= len(t):\n            return False\n        if sorted(s) == sorted(t):\n            return True\n        else:\n            return False"
    },
    {
        "number": 242,
        "title": "Valid Anagram",
        "difficulty": 0,
        "pass": 2,
        "answer": "        \n        if len(s)!= len(t):\n            return False\n        \n        d = {}\n        for i in range(len(s)):\n            if s[i] not in d:\n                d[s[i]] = 1\n            else:\n                d[s[i]] += 1\n        \n        for i in range(len(t)):\n            if t[i] not in d:\n                return False\n            else:\n                d[t[i]] -= 1\n                if d[t[i]] == 0:\n                    del d[t[i]]\n        \n        if len(d) == 0:\n            return True\n        else:\n            return False"
    },
    {
        "number": 242,
        "title": "Valid Anagram",
        "difficulty": 0,
        "pass": 3,
        "answer": "        if len(s)!= len(t):\n            return False\n        if sorted(s) == sorted(t):\n            return True\n        else:\n            return False"
    },
    {
        "number": 242,
        "title": "Valid Anagram",
        "difficulty": 0,
        "pass": 4,
        "answer": "        if len(s)!= len(t):\n            return False\n        if sorted(s) == sorted(t):\n            return True\n        else:\n            return False"
    },
    {
        "number": 242,
        "title": "Valid Anagram",
        "difficulty": 0,
        "pass": 5,
        "answer": "        if len(s)!= len(t):\n            return False\n        if sorted(s) == sorted(t):\n            return True\n        else:\n            return False"
    },
    {
        "number": 242,
        "title": "Valid Anagram",
        "difficulty": 0,
        "pass": 6,
        "answer": "        if len(s)!= len(t):\n            return False"
    },
    {
        "number": 242,
        "title": "Valid Anagram",
        "difficulty": 0,
        "pass": 7,
        "answer": "        if len(s)!= len(t):\n            return False\n        if sorted(s) == sorted(t):\n            return True\n        else:\n            return False"
    },
    {
        "number": 242,
        "title": "Valid Anagram",
        "difficulty": 0,
        "pass": 8,
        "answer": "        if len(s)!= len(t):\n            return False\n        s_dict = {}\n        t_dict = {}\n        for i in range(len(s)):\n            if s[i] in s_dict:\n                s_dict[s[i]] += 1\n            else:\n                s_dict[s[i]] = 1\n            if t[i] in t_dict:\n                t_dict[t[i]] += 1\n            else:\n                t_dict[t[i]] = 1\n        for i in s_dict:\n            if i in t_dict:\n                if s_dict[i]!= t_dict[i]:\n                    return False\n            else:\n                return False\n        return True"
    },
    {
        "number": 242,
        "title": "Valid Anagram",
        "difficulty": 0,
        "pass": 9,
        "answer": "        if len(s)!= len(t):\n            return False\n        return sorted(s) == sorted(t)"
    },
    {
        "number": 257,
        "title": "Binary Tree Paths",
        "difficulty": 0,
        "pass": 0,
        "answer": "        if not root:\n            return []\n        if not root.left and not root.right:\n            return [str(root.val)]\n        paths = []\n        if root.left:\n            paths.extend(self.binaryTreePaths(root.left))\n        if root.right:\n            paths.extend(self.binaryTreePaths(root.right))\n        for i in range(len(paths)):\n            paths[i] = str(root.val) + '->' + paths[i]\n        return paths"
    },
    {
        "number": 257,
        "title": "Binary Tree Paths",
        "difficulty": 0,
        "pass": 1,
        "answer": "        if not root:\n            return []\n        res = []\n        self.dfs(root, \"\", res)\n        return res"
    },
    {
        "number": 257,
        "title": "Binary Tree Paths",
        "difficulty": 0,
        "pass": 2,
        "answer": "        if not root:\n            return []\n        \n        res = []\n        self.dfs(root, \"\", res)\n        return res"
    },
    {
        "number": 257,
        "title": "Binary Tree Paths",
        "difficulty": 0,
        "pass": 3,
        "answer": "        if not root:\n            return []\n        \n        res = []\n        self.dfs(root, \"\", res)\n        return res"
    },
    {
        "number": 257,
        "title": "Binary Tree Paths",
        "difficulty": 0,
        "pass": 4,
        "answer": "        if not root:\n            return []\n        res = []\n        self.dfs(root, \"\", res)\n        return res"
    },
    {
        "number": 257,
        "title": "Binary Tree Paths",
        "difficulty": 0,
        "pass": 5,
        "answer": "        if not root:\n            return []\n        res = []\n        self.dfs(root, \"\", res)\n        return res"
    },
    {
        "number": 257,
        "title": "Binary Tree Paths",
        "difficulty": 0,
        "pass": 6,
        "answer": "        if not root:\n            return []"
    },
    {
        "number": 257,
        "title": "Binary Tree Paths",
        "difficulty": 0,
        "pass": 7,
        "answer": "        if not root:\n            return []\n        res = []\n        self.dfs(root, \"\", res)\n        return res"
    },
    {
        "number": 257,
        "title": "Binary Tree Paths",
        "difficulty": 0,
        "pass": 8,
        "answer": "        if not root:\n            return []\n        res = []\n        self.dfs(root, \"\", res)\n        return res"
    },
    {
        "number": 257,
        "title": "Binary Tree Paths",
        "difficulty": 0,
        "pass": 9,
        "answer": "        if not root:\n            return []\n        res = []\n        self.dfs(root, \"\", res)\n        return res"
    },
    {
        "number": 258,
        "title": "Add Digits",
        "difficulty": 0,
        "pass": 0,
        "answer": "        if num == 0:\n            return 0\n        while num > 9:\n            num = sum([int(i) for i in str(num)])\n        return num"
    },
    {
        "number": 258,
        "title": "Add Digits",
        "difficulty": 0,
        "pass": 1,
        "answer": "        if num == 0:\n            return 0\n        while num > 9:\n            num = sum([int(i) for i in str(num)])\n        return num"
    },
    {
        "number": 258,
        "title": "Add Digits",
        "difficulty": 0,
        "pass": 2,
        "answer": "        while num > 9:\n            num = sum([int(i) for i in str(num)])\n        return num"
    },
    {
        "number": 258,
        "title": "Add Digits",
        "difficulty": 0,
        "pass": 3,
        "answer": "        if num == 0:\n            return 0\n        \n        while num > 9:\n            num = sum([int(i) for i in str(num)])\n        \n        return num"
    },
    {
        "number": 258,
        "title": "Add Digits",
        "difficulty": 0,
        "pass": 4,
        "answer": "        while num > 9:\n            num = sum([int(i) for i in str(num)])\n        return num"
    },
    {
        "number": 258,
        "title": "Add Digits",
        "difficulty": 0,
        "pass": 5,
        "answer": "        while num > 9:\n            num = sum([int(i) for i in str(num)])\n        return num"
    },
    {
        "number": 258,
        "title": "Add Digits",
        "difficulty": 0,
        "pass": 6,
        "answer": "        while num > 9:\n            num = sum([int(i) for i in str(num)])\n        return num"
    },
    {
        "number": 258,
        "title": "Add Digits",
        "difficulty": 0,
        "pass": 7,
        "answer": "        if num == 0:\n            return 0\n        while num > 9:\n            num = sum([int(x) for x in str(num)])\n        return num"
    },
    {
        "number": 258,
        "title": "Add Digits",
        "difficulty": 0,
        "pass": 8,
        "answer": "        if num == 0:\n            return 0\n        while num > 9:\n            num = sum([int(i) for i in str(num)])\n        return num"
    },
    {
        "number": 258,
        "title": "Add Digits",
        "difficulty": 0,
        "pass": 9,
        "answer": "        if num == 0:\n            return 0\n        while num > 9:\n            num = sum([int(i) for i in str(num)])\n        return num"
    },
    {
        "number": 260,
        "title": "Single Number III",
        "difficulty": 1,
        "pass": 0,
        "answer": "        counts = {}\n        for num in nums:\n            if num in counts:\n                counts[num] += 1\n            else:\n                counts[num] = 1\n        for k, v in counts.items():\n            if v == 1:\n                return [k, k]\n"
    },
    {
        "number": 260,
        "title": "Single Number III",
        "difficulty": 1,
        "pass": 1,
        "answer": "        # Time: O(n)\n        # Space: O(1)\n        # nums = set(nums)\n        # for i in nums:\n        #     if i in nums:\n        #         nums.remove(i)\n        # return nums\n        \n        # Time: O(n)\n        # Space: O(1)\n        # nums = set(nums)\n        # for i in nums:\n        #     if nums.count(i) == 1:\n        #         return [i, i]\n        \n        # Time: O(n)\n        # Space: O(1)\n        # nums = set(nums)\n        # for i in nums:\n        #     if nums.count(i) == 2:\n        #         return [i, i]\n        \n        # Time: O(n)\n        # Space: O(1)\n        # nums = set(nums)\n        # for i in nums:\n        #     if nums.count(i) == 3:\n"
    },
    {
        "number": 260,
        "title": "Single Number III",
        "difficulty": 1,
        "pass": 2,
        "answer": "        # Solution 1\n        # Time: O(n)\n        # Space: O(1)\n        # nums = sorted(nums)\n        # for i in range(len(nums)-1):\n        #     if nums[i]!= nums[i+1]:\n        #         return nums[i], nums[i+1]\n        \n        # Solution 2\n        # Time: O(n)\n        # Space: O(1)\n        # nums = sorted(nums)\n        # for i in range(len(nums)-1):\n        #     if nums[i]!= nums[i+1]:\n        #         return nums[i+1], nums[i]\n        \n        # Solution 3\n        # Time: O(n)\n        # Space: O(1)\n        # nums = sorted(nums)\n        # for i in range(len(nums)-1):\n        #     if nums[i]!= nums[i+1]:\n        #         return nums[i+1],"
    },
    {
        "number": 260,
        "title": "Single Number III",
        "difficulty": 1,
        "pass": 3,
        "answer": "        \n        if len(nums) == 1:\n            return nums\n        \n        for i in range(len(nums)):\n            if nums[i] not in nums[i+1:]:\n                return nums[i], nums[i+1]\n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n"
    },
    {
        "number": 260,
        "title": "Single Number III",
        "difficulty": 1,
        "pass": 4,
        "answer": "        d = {}\n        for i in nums:\n            if i in d:\n                d[i] += 1\n            else:\n                d[i] = 1\n        for k, v in d.items():\n            if v == 1:\n                return [k, k]\n        return []"
    },
    {
        "number": 260,
        "title": "Single Number III",
        "difficulty": 1,
        "pass": 5,
        "answer": "        nums.sort()\n        for i in range(1, len(nums)-1):\n            if nums[i]!= nums[i-1] and nums[i]!= nums[i+1]:\n                return nums[i-1], nums[i+1]\n        return nums[0], nums[-1]"
    },
    {
        "number": 260,
        "title": "Single Number III",
        "difficulty": 1,
        "pass": 6,
        "answer": "        \n        a = 0\n        b = 0\n        \n        for i in nums:\n            a = a ^ i\n            \n        for i in nums:\n            b = b ^ i\n            \n        return [a,b]\n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n"
    },
    {
        "number": 260,
        "title": "Single Number III",
        "difficulty": 1,
        "pass": 7,
        "answer": "        \n        \"\"\"\n        Time: O(n)\n        Space: O(1)\n        \"\"\"\n        \n        res = set()\n        for num in nums:\n            if num in res:\n                res.remove(num)\n            else:\n                res.add(num)\n                \n        return list(res)\n        \n        \"\"\"\n        Time: O(n)\n        Space: O(1)\n        \"\"\"\n        \n        \"\"\"\n        Another way:\n        \"\"\"\n        \n        res = set()\n        for num in nums:\n            if num in res:\n                res.remove(num)\n            else:\n                res.add(num)\n                \n        return list(res)\n        \n        \"\"\"\n        Time: O(n)\n        Space: O(1)\n        \"\"\"\n        \n        \"\"\"\n        Another way:\n        \"\"\"\n        \n        res = set()\n        for num in nums:\n            if num in res:\n                res.remove(num)\n            else:\n                res.add(num)\n                \n        return list"
    },
    {
        "number": 260,
        "title": "Single Number III",
        "difficulty": 1,
        "pass": 8,
        "answer": "        if len(nums) == 0:\n            return []\n        if len(nums) == 1:\n            return [nums[0]]\n        nums.sort()\n        i = 0\n        while i < len(nums) - 1:\n            if nums[i]!= nums[i+1]:\n                return [nums[i], nums[i+1]]\n            i += 2\n        return []"
    },
    {
        "number": 260,
        "title": "Single Number III",
        "difficulty": 1,
        "pass": 9,
        "answer": "        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n"
    },
    {
        "number": 263,
        "title": "Ugly Number",
        "difficulty": 0,
        "pass": 0,
        "answer": "        if n <= 0:\n            return False\n        while n % 2 == 0:\n            n /= 2\n        while n % 3 == 0:\n            n /= 3\n        while n % 5 == 0:\n            n /= 5\n        return n == 1"
    },
    {
        "number": 263,
        "title": "Ugly Number",
        "difficulty": 0,
        "pass": 1,
        "answer": "        if n <= 0:\n            return False\n        while n % 2 == 0:\n            n = n // 2\n        while n % 3 == 0:\n            n = n // 3\n        while n % 5 == 0:\n            n = n // 5\n        return n == 1"
    },
    {
        "number": 263,
        "title": "Ugly Number",
        "difficulty": 0,
        "pass": 2,
        "answer": "        if n <= 0:\n            return False\n        while n % 2 == 0:\n            n = n // 2\n        while n % 3 == 0:\n            n = n // 3\n        while n % 5 == 0:\n            n = n // 5\n        return n == 1"
    },
    {
        "number": 263,
        "title": "Ugly Number",
        "difficulty": 0,
        "pass": 3,
        "answer": "        if n <= 0:\n            return False\n        while n % 2 == 0:\n            n = n // 2\n        while n % 3 == 0:\n            n = n // 3\n        while n % 5 == 0:\n            n = n // 5\n        return n == 1"
    },
    {
        "number": 263,
        "title": "Ugly Number",
        "difficulty": 0,
        "pass": 4,
        "answer": "        if n <= 0:\n            return False\n        while n % 2 == 0:\n            n = n // 2\n        while n % 3 == 0:\n            n = n // 3\n        while n % 5 == 0:\n            n = n // 5\n        return n == 1"
    },
    {
        "number": 263,
        "title": "Ugly Number",
        "difficulty": 0,
        "pass": 5,
        "answer": "        if n <= 0:\n            return False\n        while n % 2 == 0:\n            n = n // 2\n        while n % 3 == 0:\n            n = n // 3\n        while n % 5 == 0:\n            n = n // 5\n        return n == 1"
    },
    {
        "number": 263,
        "title": "Ugly Number",
        "difficulty": 0,
        "pass": 6,
        "answer": "        if n <= 0:\n            return False\n        while n % 2 == 0:\n            n = n // 2\n        while n % 3 == 0:\n            n = n // 3\n        while n % 5 == 0:\n            n = n // 5\n        return n == 1"
    },
    {
        "number": 263,
        "title": "Ugly Number",
        "difficulty": 0,
        "pass": 7,
        "answer": "        if n <= 0:\n            return False\n        while n % 2 == 0:\n            n = n // 2\n        while n % 3 == 0:\n            n = n // 3\n        while n % 5 == 0:\n            n = n // 5\n        return n == 1"
    },
    {
        "number": 263,
        "title": "Ugly Number",
        "difficulty": 0,
        "pass": 8,
        "answer": "        if n <= 0:\n            return False\n        while n % 2 == 0:\n            n = n // 2\n        while n % 3 == 0:\n            n = n // 3\n        while n % 5 == 0:\n            n = n // 5\n        return n == 1"
    },
    {
        "number": 263,
        "title": "Ugly Number",
        "difficulty": 0,
        "pass": 9,
        "answer": "        if n <= 0:\n            return False\n        while n % 2 == 0:\n            n = n // 2\n        while n % 3 == 0:\n            n = n // 3\n        while n % 5 == 0:\n            n = n // 5\n        return n == 1"
    },
    {
        "number": 264,
        "title": "Ugly Number II",
        "difficulty": 1,
        "pass": 0,
        "answer": "        if n == 1:\n            return 1\n        if n == 2:\n            return 2\n        if n == 3:\n            return 3\n        if n == 4:\n            return 4\n        if n == 5:\n            return 5\n        if n == 6:\n            return 6\n        if n == 7:\n            return 7\n        if n == 8:\n            return 8\n        if n == 9:\n            return 9\n        if n == 10:\n            return 10\n        if n == 11:\n            return 11\n        if n == 12:\n            return 12\n        if n == 13:\n            return 13\n        if n == 14:\n            return 14\n        if n == 15:\n            return 15\n        if n == 16:\n            return 16\n        if n == 17:\n            return 17\n        if n == 18:\n            return 18\n        if n == 19:\n            return 19\n        if n == 20:\n            return 20\n        if n == 21:\n            return 21\n        if n == 22:\n            return 22\n        if n == 23:\n            "
    },
    {
        "number": 264,
        "title": "Ugly Number II",
        "difficulty": 1,
        "pass": 1,
        "answer": "        if n == 1:\n            return 1\n        if n == 2:\n            return 2\n        if n == 3:\n            return 3\n        if n == 4:\n            return 4\n        if n == 5:\n            return 5\n        if n == 6:\n            return 6\n        if n == 7:\n            return 7\n        if n == 8:\n            return 8\n        if n == 9:\n            return 9\n        if n == 10:\n            return 10\n        if n == 11:\n            return 11\n        if n == 12:\n            return 12\n        if n == 13:\n            return 13\n        if n == 14:\n            return 14\n        if n == 15:\n            return 15\n        if n == 16:\n            return 16\n        if n == 17:\n            return 17\n        if n == 18:\n            return 18\n        if n == 19:\n            return 19\n        if n == 20:\n            return 20\n        if n == 21:\n            return 21\n        if n == 22:\n            return 22\n        if n == 23:\n            "
    },
    {
        "number": 264,
        "title": "Ugly Number II",
        "difficulty": 1,
        "pass": 2,
        "answer": "        if n == 1:\n            return 1\n        if n == 2:\n            return 2\n        if n == 3:\n            return 3\n        if n == 4:\n            return 4\n        if n == 5:\n            return 5\n        if n == 6:\n            return 6\n        if n == 7:\n            return 7\n        if n == 8:\n            return 8\n        if n == 9:\n            return 9\n        if n == 10:\n            return 10\n        if n == 11:\n            return 11\n        if n == 12:\n            return 12\n        if n == 13:\n            return 13\n        if n == 14:\n            return 14\n        if n == 15:\n            return 15\n        if n == 16:\n            return 16\n        if n == 17:\n            return 17\n        if n == 18:\n            return 18\n        if n == 19:\n            return 19\n        if n == 20:\n            return 20\n        if n == 21:\n            return 21\n        if n == 22:\n            return 22\n        if n == 23:\n            "
    },
    {
        "number": 264,
        "title": "Ugly Number II",
        "difficulty": 1,
        "pass": 3,
        "answer": "        if n == 1:\n            return 1\n        if n == 2:\n            return 2\n        if n == 3:\n            return 3\n        if n == 4:\n            return 4\n        if n == 5:\n            return 5\n        if n == 6:\n            return 6\n        if n == 7:\n            return 7\n        if n == 8:\n            return 8\n        if n == 9:\n            return 9\n        if n == 10:\n            return 10\n        if n == 11:\n            return 11\n        if n == 12:\n            return 12\n        if n == 13:\n            return 13\n        if n == 14:\n            return 14\n        if n == 15:\n            return 15\n        if n == 16:\n            return 16\n        if n == 17:\n            return 17\n        if n == 18:\n            return 18\n        if n == 19:\n            return 19\n        if n == 20:\n            return 20\n        if n == 21:\n            return 21\n        if n == 22:\n            return 22\n        if n == 23:\n            "
    },
    {
        "number": 264,
        "title": "Ugly Number II",
        "difficulty": 1,
        "pass": 4,
        "answer": "        if n == 1:\n            return 1\n        if n == 2:\n            return 2\n        if n == 3:\n            return 3\n        if n == 4:\n            return 4\n        if n == 5:\n            return 5\n        if n == 6:\n            return 6\n        if n == 7:\n            return 7\n        if n == 8:\n            return 8\n        if n == 9:\n            return 9\n        if n == 10:\n            return 10\n        if n == 11:\n            return 11\n        if n == 12:\n            return 12\n        if n == 13:\n            return 13\n        if n == 14:\n            return 14\n        if n == 15:\n            return 15\n        if n == 16:\n            return 16\n        if n == 17:\n            return 17\n        if n == 18:\n            return 18\n        if n == 19:\n            return 19\n        if n == 20:\n            return 20\n        if n == 21:\n            return 21\n        if n == 22:\n            return 22\n        if n == 23:\n            "
    },
    {
        "number": 264,
        "title": "Ugly Number II",
        "difficulty": 1,
        "pass": 5,
        "answer": "        if n == 1:\n            return 1\n        ugly_nums = [1]\n        i2, i3, i5 = 0, 0, 0\n        while len(ugly_nums) < n:\n            ugly_nums.append(min(ugly_nums[i2] * 2, ugly_nums[i3] * 3, ugly_nums[i5] * 5))\n            while ugly_nums[i2] * 2 <= ugly_nums[-1]:\n                i2 += 1\n            while ugly_nums[i3] * 3 <= ugly_nums[-1]:\n                i3 += 1\n            while ugly_nums[i5] * 5 <= ugly_nums[-1]:\n                i5 += 1\n        return ugly_nums[-1]"
    },
    {
        "number": 264,
        "title": "Ugly Number II",
        "difficulty": 1,
        "pass": 6,
        "answer": "        if n == 1:\n            return 1\n        if n == 2:\n            return 2\n        if n == 3:\n            return 3\n        if n == 4:\n            return 4\n        if n == 5:\n            return 5\n        if n == 6:\n            return 6\n        if n == 7:\n            return 7\n        if n == 8:\n            return 8\n        if n == 9:\n            return 9\n        if n == 10:\n            return 10\n        if n == 11:\n            return 11\n        if n == 12:\n            return 12\n        if n == 13:\n            return 13\n        if n == 14:\n            return 14\n        if n == 15:\n            return 15\n        if n == 16:\n            return 16\n        if n == 17:\n            return 17\n        if n == 18:\n            return 18\n        if n == 19:\n            return 19\n        if n == 20:\n            return 20\n        if n == 21:\n            return 21\n        if n == 22:\n            return 22\n        if n == 23:\n            "
    },
    {
        "number": 264,
        "title": "Ugly Number II",
        "difficulty": 1,
        "pass": 7,
        "answer": "        if n == 1:\n            return 1\n        if n == 2:\n            return 2\n        if n == 3:\n            return 3\n        if n == 4:\n            return 4\n        if n == 5:\n            return 5\n        if n == 6:\n            return 6\n        if n == 7:\n            return 7\n        if n == 8:\n            return 8\n        if n == 9:\n            return 9\n        if n == 10:\n            return 10\n        if n == 11:\n            return 11\n        if n == 12:\n            return 12\n        if n == 13:\n            return 13\n        if n == 14:\n            return 14\n        if n == 15:\n            return 15\n        if n == 16:\n            return 16\n        if n == 17:\n            return 17\n        if n == 18:\n            return 18\n        if n == 19:\n            return 19\n        if n == 20:\n            return 20\n        if n == 21:\n            return 21\n        if n == 22:\n            return 22\n        if n == 23:\n            "
    },
    {
        "number": 264,
        "title": "Ugly Number II",
        "difficulty": 1,
        "pass": 8,
        "answer": "        if n == 1:\n            return 1\n        if n == 2:\n            return 2\n        if n == 3:\n            return 3\n        if n == 4:\n            return 4\n        if n == 5:\n            return 5\n        dp = [0] * (n + 1)\n        dp[1] = 1\n        dp[2] = 2\n        dp[3] = 3\n        dp[4] = 4\n        dp[5] = 5\n        for i in range(6, n + 1):\n            dp[i] = min(2 * dp[i // 2], 3 * dp[i // 3], 5 * dp[i // 5])\n        return dp[-1]"
    },
    {
        "number": 264,
        "title": "Ugly Number II",
        "difficulty": 1,
        "pass": 9,
        "answer": "        if n == 1:\n            return 1\n        if n == 2:\n            return 2\n        if n == 3:\n            return 3\n        if n == 4:\n            return 4\n        if n == 5:\n            return 5\n        if n == 6:\n            return 6\n        if n == 7:\n            return 7\n        if n == 8:\n            return 8\n        if n == 9:\n            return 9\n        if n == 10:\n            return 10\n        if n == 11:\n            return 11\n        if n == 12:\n            return 12\n        if n == 13:\n            return 13\n        if n == 14:\n            return 14\n        if n == 15:\n            return 15\n        if n == 16:\n            return 16\n        if n == 17:\n            return 17\n        if n == 18:\n            return 18\n        if n == 19:\n            return 19\n        if n == 20:\n            return 20\n        if n == 21:\n            return 21\n        if n == 22:\n            return 22\n        if n == 23:\n            "
    },
    {
        "number": 268,
        "title": "Missing Number",
        "difficulty": 0,
        "pass": 0,
        "answer": "        n = len(nums)\n        for i in range(n):\n            if nums[i]!= i:\n                return i\n        return n"
    },
    {
        "number": 268,
        "title": "Missing Number",
        "difficulty": 0,
        "pass": 1,
        "answer": "        n = len(nums)\n        for i in range(n):\n            if nums[i]!= i:\n                return i\n        return n"
    },
    {
        "number": 268,
        "title": "Missing Number",
        "difficulty": 0,
        "pass": 2,
        "answer": "        n = len(nums)\n        for i in range(n):\n            if nums[i]!= i:\n                return i\n        return n"
    },
    {
        "number": 268,
        "title": "Missing Number",
        "difficulty": 0,
        "pass": 3,
        "answer": "        n = len(nums)\n        for i in range(n):\n            if nums[i]!= i:\n                return i\n        return n"
    },
    {
        "number": 268,
        "title": "Missing Number",
        "difficulty": 0,
        "pass": 4,
        "answer": "        if len(nums) == 0:\n            return 0\n        if len(nums) == 1:\n            if nums[0]!= 0:\n                return 1\n            else:\n                return 0\n        if len(nums) == 2:\n            if nums[0]!= 0:\n                return 1\n            elif nums[1]!= 1:\n                return 2\n            else:\n                return 0\n        if len(nums) == 3:\n            if nums[0]!= 0:\n                return 1\n            elif nums[1]!= 1:\n                return 2\n            elif nums[2]!= 2:\n                return 3\n            else:\n                return 0\n        if len(nums) == 4:\n            if nums[0]!= 0:\n                return 1\n            elif nums[1]!= 1:\n                return 2\n            elif nums[2]!= 2:\n                return 3\n            elif nums[3]!= 3:\n                return 4\n            else:\n                return 0\n        if len"
    },
    {
        "number": 268,
        "title": "Missing Number",
        "difficulty": 0,
        "pass": 5,
        "answer": "        n = len(nums)\n        return n * (n + 1) // 2 - sum(nums)"
    },
    {
        "number": 268,
        "title": "Missing Number",
        "difficulty": 0,
        "pass": 6,
        "answer": "        n = len(nums)\n        return (n * (n + 1)) // 2 - sum(nums)"
    },
    {
        "number": 268,
        "title": "Missing Number",
        "difficulty": 0,
        "pass": 7,
        "answer": "        n = len(nums)\n        return n * (n + 1) // 2 - sum(nums)"
    },
    {
        "number": 268,
        "title": "Missing Number",
        "difficulty": 0,
        "pass": 8,
        "answer": "        n = len(nums)\n        return n * (n + 1) // 2 - sum(nums)"
    },
    {
        "number": 268,
        "title": "Missing Number",
        "difficulty": 0,
        "pass": 9,
        "answer": "        n = len(nums)\n        return n * (n + 1) // 2 - sum(nums)"
    },
    {
        "number": 273,
        "title": "Integer to English Words",
        "difficulty": 2,
        "pass": 0,
        "answer": "        def helper(num):\n            if num == 0:\n                return ''\n            if num == 1:\n                return 'One'\n            if num == 2:\n                return 'Two'\n            if num == 3:\n                return 'Three'\n            if num == 4:\n                return 'Four'\n            if num == 5:\n                return 'Five'\n            if num == 6:\n                return 'Six'\n            if num == 7:\n                return 'Seven'\n            if num == 8:\n                return 'Eight'\n            if num == 9:\n                return 'Nine'\n            if num == 10:\n                return 'Ten'\n            if num == 11:\n                return 'Eleven'\n            if num == 12:\n                return 'Twelve'\n            if num == 13:\n                return 'Thirteen'\n            if num == 14:\n                return 'Fourteen'\n            if num == 15:\n                return 'Fifteen'\n            if num == 16:\n                return 'Sixteen'\n            if num == 17:\n                return 'Seventeen'\n            if num"
    },
    {
        "number": 273,
        "title": "Integer to English Words",
        "difficulty": 2,
        "pass": 1,
        "answer": "        # if num == 0:\n        #     return 'Zero'\n        #\n        # if num == 1:\n        #     return 'One'\n        #\n        # if num == 2:\n        #     return 'Two'\n        #\n        # if num == 3:\n        #     return 'Three'\n        #\n        # if num == 4:\n        #     return 'Four'\n        #\n        # if num == 5:\n        #     return 'Five'\n        #\n        # if num == 6:\n        #     return 'Six'\n        #\n        # if num == 7:\n        #     return 'Seven'\n        #\n        # if num == 8:\n        #     return 'Eight'\n        #\n        # if num == 9:\n        #     return 'Nine'\n        #\n        # if num == 10:\n        #     return 'Ten'\n        #\n        # if num == 11:\n        #     return 'Eleven'\n        #\n        # if num == 12:\n        #     return 'Twelve'\n        #\n        "
    },
    {
        "number": 273,
        "title": "Integer to English Words",
        "difficulty": 2,
        "pass": 2,
        "answer": "        if num == 0:\n            return 'Zero'\n        \n        words = ['Zero', 'One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine', 'Ten', 'Eleven', 'Twelve', 'Thirteen', 'Fourteen', 'Fifteen', 'Sixteen', 'Seventeen', 'Eighteen', 'Nineteen']\n        tens = ['Twenty', 'Thirty', 'Forty', 'Fifty', 'Sixty', 'Seventy', 'Eighty', 'Ninety']\n        thousands = ['Hundred', 'Thousand', 'Million', 'Billion']\n        \n        if num < 20:\n            return words[num]\n        elif num < 100:\n            return tens[num // 10] + (''+ words[num % 10] if num % 10!= 0 else '')\n        elif num < 1000:\n            return words[num // 100] +'' + thousands[0] + (''+ words[num % 100] if num % 100!= 0 else '')\n        elif num < 1000000:"
    },
    {
        "number": 273,
        "title": "Integer to English Words",
        "difficulty": 2,
        "pass": 3,
        "answer": "        def one(num):\n            if num == 0:\n                return \"\"\n            elif num == 1:\n                return \"One\"\n            elif num == 2:\n                return \"Two\"\n            elif num == 3:\n                return \"Three\"\n            elif num == 4:\n                return \"Four\"\n            elif num == 5:\n                return \"Five\"\n            elif num == 6:\n                return \"Six\"\n            elif num == 7:\n                return \"Seven\"\n            elif num == 8:\n                return \"Eight\"\n            elif num == 9:\n                return \"Nine\"\n            else:\n                return \"\""
    },
    {
        "number": 273,
        "title": "Integer to English Words",
        "difficulty": 2,
        "pass": 4,
        "answer": "        if num == 0:\n            return 'Zero'\n        \n        words = {\n            1: 'One',\n            2: 'Two',\n            3: 'Three',\n            4: 'Four',\n            5: 'Five',\n            6: 'Six',\n            7: 'Seven',\n            8: 'Eight',\n            9: 'Nine',\n            10: 'Ten',\n            11: 'Eleven',\n            12: 'Twelve',\n            13: 'Thirteen',\n            14: 'Fourteen',\n            15: 'Fifteen',\n            16: 'Sixteen',\n            17: 'Seventeen',\n            18: 'Eighteen',\n            19: 'Nineteen',\n            20: 'Twenty',\n            30: 'Thirty',\n            40: 'Forty',\n            50: 'Fifty',\n            60: 'Sixty',\n            70: 'Seventy',\n            80: 'Eighty',\n            90: 'Ninety',\n            100: 'Hundred',\n            1000: 'Thousand',\n            1000000: 'Million',"
    },
    {
        "number": 273,
        "title": "Integer to English Words",
        "difficulty": 2,
        "pass": 5,
        "answer": "        def one(num):\n            if num == 0:\n                return ''\n            elif num == 1:\n                return 'One'\n            elif num == 2:\n                return 'Two'\n            elif num == 3:\n                return 'Three'\n            elif num == 4:\n                return 'Four'\n            elif num == 5:\n                return 'Five'\n            elif num == 6:\n                return 'Six'\n            elif num == 7:\n                return 'Seven'\n            elif num == 8:\n                return 'Eight'\n            elif num == 9:\n                return 'Nine'\n            else:\n                return ''"
    },
    {
        "number": 273,
        "title": "Integer to English Words",
        "difficulty": 2,
        "pass": 6,
        "answer": "        if num == 0:\n            return 'Zero'\n        num_words = {\n            1: 'One',\n            2: 'Two',\n            3: 'Three',\n            4: 'Four',\n            5: 'Five',\n            6: 'Six',\n            7: 'Seven',\n            8: 'Eight',\n            9: 'Nine',\n            10: 'Ten',\n            11: 'Eleven',\n            12: 'Twelve',\n            13: 'Thirteen',\n            14: 'Fourteen',\n            15: 'Fifteen',\n            16: 'Sixteen',\n            17: 'Seventeen',\n            18: 'Eighteen',\n            19: 'Nineteen',\n            20: 'Twenty',\n            30: 'Thirty',\n            40: 'Forty',\n            50: 'Fifty',\n            60: 'Sixty',\n            70: 'Seventy',\n            80: 'Eighty',\n            90: 'Ninety',\n            100: 'Hundred',\n            1000: 'Thousand',\n            1000000: 'Million',"
    },
    {
        "number": 273,
        "title": "Integer to English Words",
        "difficulty": 2,
        "pass": 7,
        "answer": "        def one(num):\n            if num == 0:\n                return ''\n            elif num == 1:\n                return 'One'\n            elif num == 2:\n                return 'Two'\n            elif num == 3:\n                return 'Three'\n            elif num == 4:\n                return 'Four'\n            elif num == 5:\n                return 'Five'\n            elif num == 6:\n                return 'Six'\n            elif num == 7:\n                return 'Seven'\n            elif num == 8:\n                return 'Eight'\n            elif num == 9:\n                return 'Nine'\n            else:\n                return ''"
    },
    {
        "number": 273,
        "title": "Integer to English Words",
        "difficulty": 2,
        "pass": 8,
        "answer": "        # if num == 0:\n        #     return \"Zero\"\n        # if num < 0:\n        #     return self.numberToWords(abs(num)) + \" Negative\"\n        # if num == 1:\n        #     return \"One\"\n        # if num == 2:\n        #     return \"Two\"\n        # if num == 3:\n        #     return \"Three\"\n        # if num == 4:\n        #     return \"Four\"\n        # if num == 5:\n        #     return \"Five\"\n        # if num == 6:\n        #     return \"Six\"\n        # if num == 7:\n        #     return \"Seven\"\n        # if num == 8:\n        #     return \"Eight\"\n        # if num == 9:\n        #     return \"Nine\"\n        # if num == 10:\n        #     return \"Ten\"\n        # if num == 11:\n        #     return \"Eleven\"\n        # if num == 12:\n        #     return \"Twelve\"\n        # if num == 13:\n        #     return \""
    },
    {
        "number": 273,
        "title": "Integer to English Words",
        "difficulty": 2,
        "pass": 9,
        "answer": "        if num == 0:\n            return 'Zero'\n        if num == 1:\n            return 'One'\n        if num == 2:\n            return 'Two'\n        if num == 3:\n            return 'Three'\n        if num == 4:\n            return 'Four'\n        if num == 5:\n            return 'Five'\n        if num == 6:\n            return 'Six'\n        if num == 7:\n            return 'Seven'\n        if num == 8:\n            return 'Eight'\n        if num == 9:\n            return 'Nine'\n        if num == 10:\n            return 'Ten'\n        if num == 11:\n            return 'Eleven'\n        if num == 12:\n            return 'Twelve'\n        if num == 13:\n            return 'Thirteen'\n        if num == 14:\n            return 'Fourteen'\n        if num == 15:\n            return 'Fifteen'\n        if num == 16:\n            return 'Sixteen'\n        if num == 17:\n            return 'Seventeen'\n        if num == 18:\n            "
    },
    {
        "number": 274,
        "title": "H-Index",
        "difficulty": 1,
        "pass": 0,
        "answer": "        n = len(citations)\n        citations.sort(reverse=True)\n        for i in range(n):\n            if citations[i] >= n - i:\n                return n - i\n        return 0"
    },
    {
        "number": 274,
        "title": "H-Index",
        "difficulty": 1,
        "pass": 1,
        "answer": "        n = len(citations)\n        citations.sort(reverse=True)\n        for i in range(n):\n            if citations[i] >= n - i:\n                return n - i\n        return 0"
    },
    {
        "number": 274,
        "title": "H-Index",
        "difficulty": 1,
        "pass": 2,
        "answer": "        n = len(citations)\n        citations.sort(reverse=True)\n        for i in range(n):\n            if citations[i] >= n - i:\n                return n - i\n        return 0"
    },
    {
        "number": 274,
        "title": "H-Index",
        "difficulty": 1,
        "pass": 3,
        "answer": "        n = len(citations)\n        citations.sort(reverse=True)\n        for i in range(n):\n            if citations[i] >= n - i:\n                return n - i\n        return 0"
    },
    {
        "number": 274,
        "title": "H-Index",
        "difficulty": 1,
        "pass": 4,
        "answer": "        n = len(citations)\n        citations.sort(reverse=True)\n        for i in range(n):\n            if citations[i] >= n - i:\n                return n - i\n        return 0"
    },
    {
        "number": 274,
        "title": "H-Index",
        "difficulty": 1,
        "pass": 5,
        "answer": "        n = len(citations)\n        citations.sort(reverse=True)\n        for i in range(n):\n            if citations[i] >= n - i:\n                return n - i\n        return 0"
    },
    {
        "number": 274,
        "title": "H-Index",
        "difficulty": 1,
        "pass": 6,
        "answer": "        citations.sort(reverse=True)\n        n = len(citations)\n        for i in range(n):\n            if citations[i] >= n - i:\n                return n - i\n        return 0"
    },
    {
        "number": 274,
        "title": "H-Index",
        "difficulty": 1,
        "pass": 7,
        "answer": "        citations.sort()\n        n = len(citations)\n        for i in range(n):\n            if citations[i] >= n - i:\n                return n - i\n        return 0"
    },
    {
        "number": 274,
        "title": "H-Index",
        "difficulty": 1,
        "pass": 8,
        "answer": "        n = len(citations)\n        citations.sort(reverse=True)\n        for i in range(n):\n            if citations[i] >= n - i:\n                return n - i\n        return 0"
    },
    {
        "number": 274,
        "title": "H-Index",
        "difficulty": 1,
        "pass": 9,
        "answer": "        n = len(citations)\n        citations.sort(reverse=True)\n        h = 0\n        for i in range(n):\n            if citations[i] >= h:\n                h += 1\n        return h"
    },
    {
        "number": 275,
        "title": "H-Index II",
        "difficulty": 1,
        "pass": 0,
        "answer": "        n = len(citations)\n        lo, hi = 0, n - 1\n        while lo <= hi:\n            mid = lo + (hi - lo) // 2\n            if citations[mid] >= n - mid:\n                hi = mid - 1\n            else:\n                lo = mid + 1\n        return n - lo"
    },
    {
        "number": 275,
        "title": "H-Index II",
        "difficulty": 1,
        "pass": 1,
        "answer": "        n = len(citations)\n        lo, hi = 0, n - 1\n        while lo <= hi:\n            mid = lo + (hi - lo) // 2\n            if citations[mid] >= n - mid:\n                hi = mid - 1\n            else:\n                lo = mid + 1\n        return n - lo"
    },
    {
        "number": 275,
        "title": "H-Index II",
        "difficulty": 1,
        "pass": 2,
        "answer": "        l, r = 0, len(citations) - 1\n        while l <= r:\n            mid = l + (r - l) // 2\n            if citations[mid] >= len(citations) - mid:\n                r = mid - 1\n            else:\n                l = mid + 1\n        return len(citations) - l"
    },
    {
        "number": 275,
        "title": "H-Index II",
        "difficulty": 1,
        "pass": 3,
        "answer": "        N = len(citations)\n        left, right = 0, N - 1\n        while left <= right:\n            mid = left + (right - left) // 2\n            if citations[mid] >= N - mid:\n                right = mid - 1\n            else:\n                left = mid + 1\n        return N - left"
    },
    {
        "number": 275,
        "title": "H-Index II",
        "difficulty": 1,
        "pass": 4,
        "answer": "        n = len(citations)\n        lo, hi = 0, n - 1\n        while lo <= hi:\n            mid = lo + (hi - lo) // 2\n            if citations[mid] >= n - mid:\n                hi = mid - 1\n            else:\n                lo = mid + 1\n        return n - lo"
    },
    {
        "number": 275,
        "title": "H-Index II",
        "difficulty": 1,
        "pass": 5,
        "answer": "        n = len(citations)\n        left, right = 0, n - 1\n        while left <= right:\n            mid = left + (right - left) // 2\n            if citations[mid] >= n - mid:\n                right = mid - 1\n            else:\n                left = mid + 1\n        return n - left"
    },
    {
        "number": 275,
        "title": "H-Index II",
        "difficulty": 1,
        "pass": 6,
        "answer": "        if not citations:\n            return 0\n        l, r = 0, len(citations) - 1\n        while l <= r:\n            mid = (l + r) // 2\n            if citations[mid] >= len(citations) - mid:\n                r = mid - 1\n            else:\n                l = mid + 1\n        return len(citations) - l"
    },
    {
        "number": 275,
        "title": "H-Index II",
        "difficulty": 1,
        "pass": 7,
        "answer": "        n = len(citations)\n        lo, hi = 0, n - 1\n        while lo <= hi:\n            mid = lo + (hi - lo) // 2\n            if citations[mid] >= n - mid:\n                hi = mid - 1\n            else:\n                lo = mid + 1\n        return n - lo"
    },
    {
        "number": 275,
        "title": "H-Index II",
        "difficulty": 1,
        "pass": 8,
        "answer": "        n = len(citations)\n        left, right = 0, n - 1\n        while left <= right:\n            mid = left + (right - left) // 2\n            if citations[mid] >= n - mid:\n                right = mid - 1\n            else:\n                left = mid + 1\n        return n - left"
    },
    {
        "number": 275,
        "title": "H-Index II",
        "difficulty": 1,
        "pass": 9,
        "answer": "        n = len(citations)\n        left, right = 0, n - 1\n        while left <= right:\n            mid = left + (right - left) // 2\n            if citations[mid] >= n - mid:\n                right = mid - 1\n            else:\n                left = mid + 1\n        return n - left"
    },
    {
        "number": 278,
        "title": "First Bad Version",
        "difficulty": 0,
        "pass": 0,
        "answer": "        lo, hi = 1, n\n        while lo < hi:\n            mid = lo + (hi - lo) // 2\n            if isBadVersion(mid):\n                hi = mid\n            else:\n                lo = mid + 1\n        return lo"
    },
    {
        "number": 278,
        "title": "First Bad Version",
        "difficulty": 0,
        "pass": 1,
        "answer": "        if n == 1:\n            return 1\n        l = 1\n        r = n\n        while l < r:\n            mid = (l + r) // 2\n            if isBadVersion(mid):\n                r = mid\n            else:\n                l = mid + 1\n        return l"
    },
    {
        "number": 278,
        "title": "First Bad Version",
        "difficulty": 0,
        "pass": 2,
        "answer": "        # https://leetcode.com/problems/first-bad-version/solution/\n        low, high = 1, n\n        while low < high:\n            mid = low + (high - low) // 2\n            if isBadVersion(mid):\n                high = mid\n            else:\n                low = mid + 1\n        return low"
    },
    {
        "number": 278,
        "title": "First Bad Version",
        "difficulty": 0,
        "pass": 3,
        "answer": "        low, high = 1, n\n        while low <= high:\n            mid = (low + high) // 2\n            if isBadVersion(mid):\n                high = mid - 1\n            else:\n                low = mid + 1\n        return low"
    },
    {
        "number": 278,
        "title": "First Bad Version",
        "difficulty": 0,
        "pass": 4,
        "answer": "        l, r = 1, n\n        while l < r:\n            mid = (l + r) // 2\n            if isBadVersion(mid):\n                r = mid\n            else:\n                l = mid + 1\n        return l"
    },
    {
        "number": 278,
        "title": "First Bad Version",
        "difficulty": 0,
        "pass": 5,
        "answer": "        l, r = 1, n\n        while l <= r:\n            mid = (l + r) // 2\n            if isBadVersion(mid):\n                r = mid - 1\n            else:\n                l = mid + 1\n        return l"
    },
    {
        "number": 278,
        "title": "First Bad Version",
        "difficulty": 0,
        "pass": 6,
        "answer": "        if n == 1:\n            return 1\n        low = 1\n        high = n\n        while low <= high:\n            mid = (low + high) // 2\n            if isBadVersion(mid):\n                high = mid - 1\n            else:\n                low = mid + 1\n        return low"
    },
    {
        "number": 278,
        "title": "First Bad Version",
        "difficulty": 0,
        "pass": 7,
        "answer": "        low, high = 1, n\n        while low <= high:\n            mid = low + (high - low) // 2\n            if isBadVersion(mid):\n                high = mid - 1\n            else:\n                low = mid + 1\n        return low"
    },
    {
        "number": 278,
        "title": "First Bad Version",
        "difficulty": 0,
        "pass": 8,
        "answer": "        l, r = 1, n\n        while l <= r:\n            mid = l + (r - l) // 2\n            if isBadVersion(mid):\n                r = mid - 1\n            else:\n                l = mid + 1\n        return l"
    },
    {
        "number": 278,
        "title": "First Bad Version",
        "difficulty": 0,
        "pass": 9,
        "answer": "        if n == 1:\n            return 1\n        left, right = 1, n\n        while left <= right:\n            mid = (left + right) // 2\n            if isBadVersion(mid):\n                right = mid - 1\n            else:\n                left = mid + 1\n        return left"
    },
    {
        "number": 279,
        "title": "Perfect Squares",
        "difficulty": 1,
        "pass": 0,
        "answer": "        if n == 0:\n            return 0\n        if n == 1:\n            return 1\n        if n == 2:\n            return 1\n        if n == 3:\n            return 2\n        if n == 4:\n            return 2\n        if n == 5:\n            return 3\n        if n == 6:\n            return 3\n        if n == 7:\n            return 4\n        if n == 8:\n            return 4\n        if n == 9:\n            return 5\n        if n == 10:\n            return 5\n        if n == 11:\n            return 6\n        if n == 12:\n            return 6\n        if n == 13:\n            return 7\n        if n == 14:\n            return 7\n        if n == 15:\n            return 8\n        if n == 16:\n            return 8\n        if n == 17:\n            return 9\n        if n == 18:\n            return 9\n        if n == 19:\n            return 10\n        if n == 20:\n            return 10\n        if n == 21:\n            return 11\n        if n == 22:\n            "
    },
    {
        "number": 279,
        "title": "Perfect Squares",
        "difficulty": 1,
        "pass": 1,
        "answer": "        if n <= 0:\n            return 0\n        if n == 1:\n            return 1\n        if n == 2:\n            return 1\n        if n == 3:\n            return 2\n        if n == 4:\n            return 2\n        if n == 5:\n            return 3\n        if n == 6:\n            return 3\n        if n == 7:\n            return 4\n        if n == 8:\n            return 4\n        if n == 9:\n            return 5\n        if n == 10:\n            return 5\n        if n == 11:\n            return 6\n        if n == 12:\n            return 6\n        if n == 13:\n            return 7\n        if n == 14:\n            return 7\n        if n == 15:\n            return 8\n        if n == 16:\n            return 8\n        if n == 17:\n            return 9\n        if n == 18:\n            return 9\n        if n == 19:\n            return 10\n        if n == 20:\n            return 10\n        if n == 21:\n            return 11\n        if n == 22:\n            "
    },
    {
        "number": 279,
        "title": "Perfect Squares",
        "difficulty": 1,
        "pass": 2,
        "answer": "        if n < 2:\n            return n\n        dp = [float('inf')] * (n + 1)\n        dp[0] = 0\n        dp[1] = 1\n        for i in range(2, n + 1):\n            j = 1\n            while j * j <= i:\n                dp[i] = min(dp[i], dp[i - j * j] + 1)\n                j += 1\n        return dp[-1]"
    },
    {
        "number": 279,
        "title": "Perfect Squares",
        "difficulty": 1,
        "pass": 3,
        "answer": "        if n <= 0:\n            return 0\n        if n == 1:\n            return 1\n        if n == 2:\n            return 1\n        if n == 3:\n            return 2\n        if n == 4:\n            return 2\n        if n == 5:\n            return 3\n        if n == 6:\n            return 3\n        if n == 7:\n            return 4\n        if n == 8:\n            return 4\n        if n == 9:\n            return 5\n        if n == 10:\n            return 5\n        if n == 11:\n            return 6\n        if n == 12:\n            return 6\n        if n == 13:\n            return 7\n        if n == 14:\n            return 7\n        if n == 15:\n            return 8\n        if n == 16:\n            return 8\n        if n == 17:\n            return 9\n        if n == 18:\n            return 9\n        if n == 19:\n            return 10\n        if n == 20:\n            return 10\n        if n == 21:\n            return 11\n        if n == 22:\n            "
    },
    {
        "number": 279,
        "title": "Perfect Squares",
        "difficulty": 1,
        "pass": 4,
        "answer": "        if n < 2:\n            return n\n        dp = [float('inf')] * (n + 1)\n        dp[0] = 0\n        dp[1] = 1\n        for i in range(2, n + 1):\n            for j in range(1, int(i ** 0.5) + 1):\n                dp[i] = min(dp[i], dp[i - j * j] + 1)\n        return dp[-1]"
    },
    {
        "number": 279,
        "title": "Perfect Squares",
        "difficulty": 1,
        "pass": 5,
        "answer": "        if n <= 0:\n            return 0\n        dp = [float('inf')] * (n + 1)\n        dp[0] = 0\n        for i in range(1, n + 1):\n            j = 1\n            while j * j <= i:\n                dp[i] = min(dp[i], dp[i - j * j] + 1)\n                j += 1\n        return dp[-1]"
    },
    {
        "number": 279,
        "title": "Perfect Squares",
        "difficulty": 1,
        "pass": 6,
        "answer": "        if n == 0:\n            return 0\n        if n == 1:\n            return 1\n        if n == 2:\n            return 1\n        if n == 3:\n            return 2\n        if n == 4:\n            return 2\n        if n == 5:\n            return 3\n        if n == 6:\n            return 3\n        if n == 7:\n            return 4\n        if n == 8:\n            return 4\n        if n == 9:\n            return 5\n        if n == 10:\n            return 5\n        if n == 11:\n            return 6\n        if n == 12:\n            return 6\n        if n == 13:\n            return 7\n        if n == 14:\n            return 7\n        if n == 15:\n            return 8\n        if n == 16:\n            return 8\n        if n == 17:\n            return 9\n        if n == 18:\n            return 9\n        if n == 19:\n            return 10\n        if n == 20:\n            return 10\n        if n == 21:\n            return 11\n        if n == 22:\n            "
    },
    {
        "number": 279,
        "title": "Perfect Squares",
        "difficulty": 1,
        "pass": 7,
        "answer": "        if n == 0:\n            return 0\n        if n == 1:\n            return 1\n        if n == 2:\n            return 1\n        if n == 3:\n            return 2\n        if n == 4:\n            return 2\n        if n == 5:\n            return 3\n        if n == 6:\n            return 3\n        if n == 7:\n            return 4\n        if n == 8:\n            return 4\n        if n == 9:\n            return 5\n        if n == 10:\n            return 5\n        if n == 11:\n            return 6\n        if n == 12:\n            return 6\n        if n == 13:\n            return 7\n        if n == 14:\n            return 7\n        if n == 15:\n            return 8\n        if n == 16:\n            return 8\n        if n == 17:\n            return 9\n        if n == 18:\n            return 9\n        if n == 19:\n            return 10\n        if n == 20:\n            return 10\n        if n == 21:\n            return 11\n        if n == 22:\n            "
    },
    {
        "number": 279,
        "title": "Perfect Squares",
        "difficulty": 1,
        "pass": 8,
        "answer": "        if n == 0:\n            return 0\n        if n == 1:\n            return 1\n        if n == 2:\n            return 1\n        if n == 3:\n            return 2\n        if n == 4:\n            return 2\n        if n == 5:\n            return 3\n        if n == 6:\n            return 3\n        if n == 7:\n            return 4\n        if n == 8:\n            return 4\n        if n == 9:\n            return 5\n        if n == 10:\n            return 5\n        if n == 11:\n            return 6\n        if n == 12:\n            return 6\n        if n == 13:\n            return 7\n        if n == 14:\n            return 7\n        if n == 15:\n            return 8\n        if n == 16:\n            return 8\n        if n == 17:\n            return 9\n        if n == 18:\n            return 9\n        if n == 19:\n            return 10\n        if n == 20:\n            return 10\n        if n == 21:\n            return 11\n        if n == 22:\n            "
    },
    {
        "number": 279,
        "title": "Perfect Squares",
        "difficulty": 1,
        "pass": 9,
        "answer": "        if n <= 0:\n            return 0\n        dp = [0] * (n + 1)\n        dp[1] = 1\n        for i in range(2, n + 1):\n            j = 1\n            while j * j <= i:\n                dp[i] = min(dp[i], dp[i - j * j] + 1)\n                j += 1\n        return dp[-1]"
    },
    {
        "number": 282,
        "title": "Expression Add Operators",
        "difficulty": 2,
        "pass": 0,
        "answer": "        \n        def dfs(nums, path, res, target):\n            if not nums:\n                if target == 0:\n                    res.append(path)\n                return\n            \n            for i in range(1, len(nums) + 1):\n                if i > 1 and nums[0] == '0':\n                    break\n                dfs(nums[i:], path + str(nums[:i]) + '+' + nums[i:], res, target - int(nums[:i]))\n                dfs(nums[i:], path + str(nums[:i]) + '-' + nums[i:], res, target - int(nums[:i]))\n                dfs(nums[i:], path + str(nums[:i]) + '*' + nums[i:], res, target - int(nums[:i]))\n        \n        res = []\n        dfs(num, '', res, target)\n        return res"
    },
    {
        "number": 282,
        "title": "Expression Add Operators",
        "difficulty": 2,
        "pass": 1,
        "answer": "        if not num:\n            return []\n        res = []\n        self.dfs(num, target, 0, 0, \"\", res)\n        return res"
    },
    {
        "number": 282,
        "title": "Expression Add Operators",
        "difficulty": 2,
        "pass": 2,
        "answer": "        res = []\n        self.dfs(num, target, 0, 0, \"\", res)\n        return res"
    },
    {
        "number": 282,
        "title": "Expression Add Operators",
        "difficulty": 2,
        "pass": 3,
        "answer": "        \n        \n        def dfs(num, path, res, target):\n            if not num:\n                if target == 0:\n                    res.append(path)\n                return\n            \n            for i in range(1, len(num)+1):\n                if i > 1 and num[0] == '0':\n                    break\n                dfs(num[i:], path+'+'+num[:i], res, target-int(num[:i]))\n                dfs(num[i:], path+'-'+num[:i], res, target+int(num[:i]))\n                dfs(num[i:], path+'*'+num[:i], res, target-int(num[:i])+int(num[i:]))\n                dfs(num[i:], path+'/'+num[:i], res, target+int(num[:i])-int(num[i:]))\n        \n        res = []\n        dfs(num, '', res, target)\n        return res"
    },
    {
        "number": 282,
        "title": "Expression Add Operators",
        "difficulty": 2,
        "pass": 4,
        "answer": "        if not num:\n            return []"
    },
    {
        "number": 282,
        "title": "Expression Add Operators",
        "difficulty": 2,
        "pass": 5,
        "answer": "        \n        res = []\n        self.dfs(num, target, 0, 0, '', res)\n        return res"
    },
    {
        "number": 282,
        "title": "Expression Add Operators",
        "difficulty": 2,
        "pass": 6,
        "answer": "        def dfs(nums, path, res, target):\n            if not nums:\n                if target == 0:\n                    res.append(path)\n                return\n            for i in range(1, len(nums) + 1):\n                if i > 1 and nums[0] == '0':\n                    break\n                dfs(nums[i:], path + str(nums[:i]) + '+' + nums[i:], res, target - int(nums[:i]))\n                dfs(nums[i:], path + str(nums[:i]) + '-' + nums[i:], res, target + int(nums[:i]))\n                dfs(nums[i:], path + str(nums[:i]) + '*' + nums[i:], res, target - int(nums[:i]) + int(nums[i]) * int(nums[:i]))"
    },
    {
        "number": 282,
        "title": "Expression Add Operators",
        "difficulty": 2,
        "pass": 7,
        "answer": "        if not num:\n            return []\n        \n        res = []\n        self.dfs(num, target, 0, 0, '', res)\n        return res"
    },
    {
        "number": 282,
        "title": "Expression Add Operators",
        "difficulty": 2,
        "pass": 8,
        "answer": "        def dfs(num, target, path, res):\n            if not num:\n                if target == 0:\n                    res.append(''.join(path))\n                return\n            for i in range(1, len(num)+1):\n                if i > 1 and num[0] == '0':\n                    break\n                if int(num[:i]) > 0:\n                    path.append(num[:i])\n                    dfs(num[i:], target-int(num[:i]), path, res)\n                    path.pop()\n        res = []\n        dfs(num, target, [], res)\n        return res"
    },
    {
        "number": 282,
        "title": "Expression Add Operators",
        "difficulty": 2,
        "pass": 9,
        "answer": "        \n        results = []\n        self.dfs(num, target, 0, 0, '', results)\n        return results"
    },
    {
        "number": 283,
        "title": "Move Zeroes",
        "difficulty": 0,
        "pass": 0,
        "answer": "        zero_idx = 0\n        for i in range(len(nums)):\n            if nums[i]!= 0:\n                nums[zero_idx], nums[i] = nums[i], nums[zero_idx]\n                zero_idx += 1"
    },
    {
        "number": 283,
        "title": "Move Zeroes",
        "difficulty": 0,
        "pass": 1,
        "answer": "        i = 0\n        for j in range(len(nums)):\n            if nums[j]!= 0:\n                nums[i], nums[j] = nums[j], nums[i]\n                i += 1\n        return nums"
    },
    {
        "number": 283,
        "title": "Move Zeroes",
        "difficulty": 0,
        "pass": 2,
        "answer": "        i = 0\n        for j in range(len(nums)):\n            if nums[j]!= 0:\n                nums[i] = nums[j]\n                i += 1\n        for k in range(i, len(nums)):\n            nums[k] = 0\n        return nums"
    },
    {
        "number": 283,
        "title": "Move Zeroes",
        "difficulty": 0,
        "pass": 3,
        "answer": "        n = len(nums)\n        i = 0\n        for j in range(n):\n            if nums[j]!= 0:\n                nums[i], nums[j] = nums[j], nums[i]\n                i += 1\n        return nums"
    },
    {
        "number": 283,
        "title": "Move Zeroes",
        "difficulty": 0,
        "pass": 4,
        "answer": "        zero_index = 0\n        for i in range(len(nums)):\n            if nums[i]!= 0:\n                nums[zero_index], nums[i] = nums[i], nums[zero_index]\n                zero_index += 1\n        return nums"
    },
    {
        "number": 283,
        "title": "Move Zeroes",
        "difficulty": 0,
        "pass": 5,
        "answer": "        zero_index = 0\n        for i in range(len(nums)):\n            if nums[i]!= 0:\n                nums[zero_index], nums[i] = nums[i], nums[zero_index]\n                zero_index += 1\n        return nums"
    },
    {
        "number": 283,
        "title": "Move Zeroes",
        "difficulty": 0,
        "pass": 6,
        "answer": "        i = 0\n        for j in range(len(nums)):\n            if nums[j]!= 0:\n                nums[i] = nums[j]\n                i += 1\n        for k in range(i, len(nums)):\n            nums[k] = 0\n        print(nums)"
    },
    {
        "number": 283,
        "title": "Move Zeroes",
        "difficulty": 0,
        "pass": 7,
        "answer": "        n = len(nums)\n        j = 0\n        for i in range(n):\n            if nums[i]!= 0:\n                nums[j] = nums[i]\n                j += 1\n        for i in range(j, n):\n            nums[i] = 0\n        return nums"
    },
    {
        "number": 283,
        "title": "Move Zeroes",
        "difficulty": 0,
        "pass": 8,
        "answer": "        i = 0\n        for j in range(len(nums)):\n            if nums[j]!= 0:\n                nums[i] = nums[j]\n                i += 1\n        while i < len(nums):\n            nums[i] = 0\n            i += 1"
    },
    {
        "number": 283,
        "title": "Move Zeroes",
        "difficulty": 0,
        "pass": 9,
        "answer": "        n = len(nums)\n        i = 0\n        for j in range(n):\n            if nums[j]!= 0:\n                nums[i] = nums[j]\n                i += 1\n        while i < n:\n            nums[i] = 0\n            i += 1"
    },
    {
        "number": 284,
        "title": "Peeking Iterator",
        "difficulty": 1,
        "pass": 0,
        "answer": "        def __init__(self, nums):\n            \"\"\"\n            initialize your data structure here.\n            :type nums: List[int]\n            \"\"\"\n            self.nums = nums\n            self.i = 0\n            self.n = len(nums)"
    },
    {
        "number": 284,
        "title": "Peeking Iterator",
        "difficulty": 1,
        "pass": 1,
        "answer": "        self.iterator = iter(nums)\n        self.peeked = None"
    },
    {
        "number": 284,
        "title": "Peeking Iterator",
        "difficulty": 1,
        "pass": 2,
        "answer": "        class PeekingIterator(object):"
    },
    {
        "number": 284,
        "title": "Peeking Iterator",
        "difficulty": 1,
        "pass": 3,
        "answer": "        def __init__(self, nums):\n            \"\"\"\n            initialize your data structure here.\n            :type nums: List[int]\n            \"\"\"\n            self.nums = nums\n            self.index = 0\n            self.length = len(nums)"
    },
    {
        "number": 284,
        "title": "Peeking Iterator",
        "difficulty": 1,
        "pass": 4,
        "answer": "        def __init__(self, nums):\n            \"\"\"\n            :type nums: List[int]\n            \"\"\"\n            self.nums = nums\n            self.idx = 0\n            self.curr = None"
    },
    {
        "number": 284,
        "title": "Peeking Iterator",
        "difficulty": 1,
        "pass": 5,
        "answer": "        def __init__(self, nums):\n            \"\"\"\n            initialize your data structure here.\n            :type nums: List[int]\n            \"\"\"\n            self.iter = iter(nums)\n            self.peeked = None"
    },
    {
        "number": 284,
        "title": "Peeking Iterator",
        "difficulty": 1,
        "pass": 6,
        "answer": "        def __init__(self, nums):\n            \"\"\"\n            initialize your data structure here.\n            :type nums: List[int]\n            \"\"\"\n            self.nums = nums\n            self.index = 0\n        \n        def next(self):\n            \"\"\"\n            :rtype: int\n            \"\"\"\n            val = self.nums[self.index]\n            self.index += 1\n            return val\n        \n        def hasNext(self):\n            \"\"\"\n            :rtype: bool\n            \"\"\"\n            return self.index < len(self.nums)\n        \n        def peek(self):\n            \"\"\"\n            :rtype: int\n            \"\"\"\n            return self.nums[self.index]\n        "
    },
    {
        "number": 284,
        "title": "Peeking Iterator",
        "difficulty": 1,
        "pass": 7,
        "answer": "        def __init__(self, nums):\n            \"\"\"\n            initialize your data structure here.\n            :type nums: List[int]\n            \"\"\"\n            self.iter = iter(nums)\n            self.peeked = None"
    },
    {
        "number": 284,
        "title": "Peeking Iterator",
        "difficulty": 1,
        "pass": 8,
        "answer": "        if not nums:\n            return None\n        peek_iter = PeekingIterator(nums)\n        while peek_iter.hasNext():\n            yield peek_iter.next()"
    },
    {
        "number": 284,
        "title": "Peeking Iterator",
        "difficulty": 1,
        "pass": 9,
        "answer": "        self.iter = iter(nums)\n        self.peeked = None"
    },
    {
        "number": 287,
        "title": "Find the Duplicate Number",
        "difficulty": 1,
        "pass": 0,
        "answer": "        \n        n = len(nums)\n        if n == 1:\n            return nums[0]\n        \n        slow = nums[0]\n        fast = nums[0]\n        \n        while True:\n            slow = nums[slow]\n            fast = nums[nums[fast]]\n            if slow == fast:\n                break\n        \n        p1 = nums[0]\n        p2 = slow\n        \n        while p1!= p2:\n            p1 = nums[p1]\n            p2 = nums[p2]\n        \n        return p1\n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n"
    },
    {
        "number": 287,
        "title": "Find the Duplicate Number",
        "difficulty": 1,
        "pass": 1,
        "answer": "        \n        # Approach 1:\n        \n        # Time: O(n)\n        # Space: O(1)\n        \n        # nums.sort()\n        # for i in range(1, len(nums)):\n        #     if nums[i] == nums[i-1]:\n        #         return nums[i]\n        \n        # Approach 2:\n        \n        # Time: O(n)\n        # Space: O(1)\n        \n        # nums.sort()\n        # for i in range(1, len(nums)):\n        #     if nums[i] == nums[i-1]:\n        #         return nums[i]\n        \n        # Approach 3:\n        \n        # Time: O(n)\n        # Space: O(1)\n        \n        # nums.sort()\n        # for i in range(1, len(nums)):\n        #     if nums[i] == nums[i-1]:\n        #         return nums[i]\n        \n        #"
    },
    {
        "number": 287,
        "title": "Find the Duplicate Number",
        "difficulty": 1,
        "pass": 2,
        "answer": "        \n        # O(n) time | O(n) space\n        # nums.sort()\n        # for i in range(1, len(nums)):\n        #     if nums[i] == nums[i-1]:\n        #         return nums[i]\n        \n        # O(n) time | O(1) space\n        # nums.sort()\n        # for i in range(1, len(nums)):\n        #     if nums[i] == nums[i-1]:\n        #         return nums[i]\n        \n        # O(n) time | O(n) space\n        # nums.sort()\n        # for i in range(1, len(nums)):\n        #     if nums[i] == nums[i-1]:\n        #         return nums[i]\n        \n        # O(n) time | O(1) space\n        # nums.sort()\n        # for i in range(1, len(nums)):\n        #     if nums"
    },
    {
        "number": 287,
        "title": "Find the Duplicate Number",
        "difficulty": 1,
        "pass": 3,
        "answer": "        \n        if len(nums) == 0:\n            return -1\n        \n        slow = nums[0]\n        fast = nums[0]\n        \n        while True:\n            slow = nums[slow]\n            fast = nums[nums[fast]]\n            if slow == fast:\n                break\n        \n        slow = nums[0]\n        while slow!= fast:\n            slow = nums[slow]\n            fast = nums[fast]\n        \n        return slow"
    },
    {
        "number": 287,
        "title": "Find the Duplicate Number",
        "difficulty": 1,
        "pass": 4,
        "answer": "        # Time: O(n)\n        # Space: O(n)\n        # nums = set(nums)\n        # for i in nums:\n        #     if nums[i] in nums:\n        #         return nums[i]"
    },
    {
        "number": 287,
        "title": "Find the Duplicate Number",
        "difficulty": 1,
        "pass": 5,
        "answer": "        \n        n = len(nums)\n        \n        if n < 2:\n            return -1\n        \n        slow = nums[0]\n        fast = nums[0]\n        \n        while True:\n            slow = nums[slow]\n            fast = nums[nums[fast]]\n            \n            if slow == fast:\n                break\n        \n        slow = nums[0]\n        \n        while slow!= fast:\n            slow = nums[slow]\n            fast = nums[fast]\n        \n        return slow"
    },
    {
        "number": 287,
        "title": "Find the Duplicate Number",
        "difficulty": 1,
        "pass": 6,
        "answer": "        n = len(nums)\n        slow = 0\n        fast = 0\n        while True:\n            slow = nums[slow]\n            fast = nums[nums[fast]]\n            if slow == fast:\n                break\n        fast = 0\n        while True:\n            fast = nums[fast]\n            slow = nums[slow]\n            if slow == fast:\n                break\n        return slow"
    },
    {
        "number": 287,
        "title": "Find the Duplicate Number",
        "difficulty": 1,
        "pass": 7,
        "answer": "        n = len(nums)\n        if n == 1:\n            return nums[0]\n        slow = nums[0]\n        fast = nums[n - 1]\n        while True:\n            slow = nums[slow]\n            fast = nums[nums[fast]]\n            if slow == fast:\n                break\n        slow = nums[0]\n        while slow!= fast:\n            slow = nums[slow]\n            fast = nums[fast]\n        return slow"
    },
    {
        "number": 287,
        "title": "Find the Duplicate Number",
        "difficulty": 1,
        "pass": 8,
        "answer": "        # nums.sort()\n        # for i in range(len(nums) - 1):\n        #     if nums[i] == nums[i + 1]:\n        #         return nums[i]\n        # return nums[-1]\n        \n        \n        # nums.sort()\n        # for i in range(len(nums) - 1):\n        #     if nums[i] == nums[i + 1]:\n        #         return nums[i]\n        # return nums[-1]\n        \n        # nums.sort()\n        # for i in range(len(nums) - 1):\n        #     if nums[i] == nums[i + 1]:\n        #         return nums[i]\n        # return nums[-1]\n        \n        # nums.sort()\n        # for i in range(len(nums) - 1):\n        #     if nums[i] == nums[i + 1]:\n        #         return nums[i]\n        # return num"
    },
    {
        "number": 287,
        "title": "Find the Duplicate Number",
        "difficulty": 1,
        "pass": 9,
        "answer": "        nums.sort()\n        for i in range(1, len(nums)):\n            if nums[i] == nums[i-1]:\n                return nums[i]\n"
    },
    {
        "number": 289,
        "title": "Game of Life",
        "difficulty": 1,
        "pass": 0,
        "answer": "        m = len(board)\n        n = len(board[0])\n        for i in range(m):\n            for j in range(n):\n                count = 0\n                if i > 0:\n                    count += board[i - 1][j]\n                if i < m - 1:\n                    count += board[i + 1][j]\n                if j > 0:\n                    count += board[i][j - 1]\n                if j < n - 1:\n                    count += board[i][j + 1]\n                if board[i][j] == 1:\n                    if count < 2 or count > 3:\n                        board[i][j] = 0\n                else:\n                    if count == 3:\n                        board[i][j] = 1\n        for i in range(m):\n            for j in range(n):\n                if board[i][j] == 1:\n                    board[i][j] = 1\n                else:\n                    board[i][j] = 0\n        return board"
    },
    {
        "number": 289,
        "title": "Game of Life",
        "difficulty": 1,
        "pass": 1,
        "answer": "        m = len(board)\n        n = len(board[0])\n        \n        for i in range(m):\n            for j in range(n):\n                neighbors = 0\n                if i > 0:\n                    neighbors += board[i-1][j]\n                if i < m-1:\n                    neighbors += board[i+1][j]\n                if j > 0:\n                    neighbors += board[i][j-1]\n                if j < n-1:\n                    neighbors += board[i][j+1]\n                if i > 0 and j > 0:\n                    neighbors += board[i-1][j-1]\n                if i > 0 and j < n-1:\n                    neighbors += board[i-1][j+1]\n                if i < m-1 and j > 0:\n                    neighbors += board[i+1][j-1]\n                if i < m-1 and j < n-1:\n                    neighbors += board[i+1][j+1]\n                "
    },
    {
        "number": 289,
        "title": "Game of Life",
        "difficulty": 1,
        "pass": 2,
        "answer": "        m = len(board)\n        n = len(board[0])\n        new_board = []\n        for i in range(m):\n            new_board.append([])\n            for j in range(n):\n                new_board[i].append(0)\n        for i in range(m):\n            for j in range(n):\n                live_neighbors = 0\n                if i > 0:\n                    live_neighbors += board[i-1][j]\n                if i < m-1:\n                    live_neighbors += board[i+1][j]\n                if j > 0:\n                    live_neighbors += board[i][j-1]\n                if j < n-1:\n                    live_neighbors += board[i][j+1]\n                if i > 0 and j > 0:\n                    live_neighbors += board[i-1][j-1]\n                if i > 0 and j < n-1:\n                    live_neighbors += board[i-1][j+1]\n                if i"
    },
    {
        "number": 289,
        "title": "Game of Life",
        "difficulty": 1,
        "pass": 3,
        "answer": "        m = len(board)\n        n = len(board[0])\n        for i in range(m):\n            for j in range(n):\n                neighbors = 0\n                if i > 0:\n                    if board[i-1][j] == 1:\n                        neighbors += 1\n                if i < m-1:\n                    if board[i+1][j] == 1:\n                        neighbors += 1\n                if j > 0:\n                    if board[i][j-1] == 1:\n                        neighbors += 1\n                if j < n-1:\n                    if board[i][j+1] == 1:\n                        neighbors += 1\n                if i > 0 and j > 0:\n                    if board[i-1][j-1] == 1:\n                        neighbors += 1\n                if i > 0 and j < n-1:\n                    if board[i-1][j+1] == 1:\n                        neighbors += 1\n                if i < m-1 and j > 0:\n                    if board[i+1]["
    },
    {
        "number": 289,
        "title": "Game of Life",
        "difficulty": 1,
        "pass": 4,
        "answer": "        m = len(board)\n        n = len(board[0])\n        for i in range(m):\n            for j in range(n):\n                neighbors = 0\n                if i > 0:\n                    if board[i-1][j] == 1:\n                        neighbors += 1\n                if i < m-1:\n                    if board[i+1][j] == 1:\n                        neighbors += 1\n                if j > 0:\n                    if board[i][j-1] == 1:\n                        neighbors += 1\n                if j < n-1:\n                    if board[i][j+1] == 1:\n                        neighbors += 1\n                if i > 0 and j > 0:\n                    if board[i-1][j-1] == 1:\n                        neighbors += 1\n                if i > 0 and j < n-1:\n                    if board[i-1][j+1] == 1:\n                        neighbors += 1\n                if i < m-1 and j > 0:\n                    if board[i+1]["
    },
    {
        "number": 289,
        "title": "Game of Life",
        "difficulty": 1,
        "pass": 5,
        "answer": "        m = len(board)\n        n = len(board[0])\n        for i in range(m):\n            for j in range(n):\n                neighbors = 0\n                if i > 0:\n                    neighbors += board[i-1][j]\n                if i < m-1:\n                    neighbors += board[i+1][j]\n                if j > 0:\n                    neighbors += board[i][j-1]\n                if j < n-1:\n                    neighbors += board[i][j+1]\n                if board[i][j] == 1:\n                    if neighbors < 2 or neighbors > 3:\n                        board[i][j] = 0\n                else:\n                    if neighbors == 3:\n                        board[i][j] = 1\n        for i in range(m):\n            for j in range(n):\n                board[i][j] = 1 if board[i][j] == 1 else 0"
    },
    {
        "number": 289,
        "title": "Game of Life",
        "difficulty": 1,
        "pass": 6,
        "answer": "        m, n = len(board), len(board[0])\n        for i in range(m):\n            for j in range(n):\n                live_neighbors = 0\n                if i > 0:\n                    live_neighbors += board[i-1][j]\n                if i < m-1:\n                    live_neighbors += board[i+1][j]\n                if j > 0:\n                    live_neighbors += board[i][j-1]\n                if j < n-1:\n                    live_neighbors += board[i][j+1]\n                if i > 0 and j > 0:\n                    live_neighbors += board[i-1][j-1]\n                if i > 0 and j < n-1:\n                    live_neighbors += board[i-1][j+1]\n                if i < m-1 and j > 0:\n                    live_neighbors += board[i+1][j-1]\n                if i < m-1 and j < n-1:\n                    live_neigh"
    },
    {
        "number": 289,
        "title": "Game of Life",
        "difficulty": 1,
        "pass": 7,
        "answer": "        if not board:\n            return board\n        m, n = len(board), len(board[0])\n        for i in range(m):\n            for j in range(n):\n                neighbors = 0\n                if i > 0:\n                    neighbors += board[i - 1][j]\n                if i < m - 1:\n                    neighbors += board[i + 1][j]\n                if j > 0:\n                    neighbors += board[i][j - 1]\n                if j < n - 1:\n                    neighbors += board[i][j + 1]\n                if i > 0 and j > 0:\n                    neighbors += board[i - 1][j - 1]\n                if i > 0 and j < n - 1:\n                    neighbors += board[i - 1][j + 1]\n                if i < m - 1 and j > 0:\n                    neighbors += board[i + 1][j - 1]\n                if i < m - 1 and j < n - 1:\n                    neighbors += board[i + 1]["
    },
    {
        "number": 289,
        "title": "Game of Life",
        "difficulty": 1,
        "pass": 8,
        "answer": "        m, n = len(board), len(board[0])\n        for i in range(m):\n            for j in range(n):\n                if board[i][j] == 0:\n                    board[i][j] = -1\n                elif board[i][j] == 1:\n                    board[i][j] = 2\n        for i in range(m):\n            for j in range(n):\n                if board[i][j] == -1:\n                    board[i][j] = 0\n                elif board[i][j] == 2:\n                    board[i][j] = 1\n        for i in range(m):\n            for j in range(n):\n                if board[i][j] == -2:\n                    board[i][j] = 0\n                elif board[i][j] == -1:\n                    board[i][j] = 1\n        for i in range(m):\n            for j in range(n):\n                if board[i][j] == 1:\n                    board[i][j] = 1\n                "
    },
    {
        "number": 289,
        "title": "Game of Life",
        "difficulty": 1,
        "pass": 9,
        "answer": "        if not board: return board\n        m, n = len(board), len(board[0])\n        for i in range(m):\n            for j in range(n):\n                live_neighbors = self.get_live_neighbors(board, i, j)\n                if board[i][j] == 1:\n                    if live_neighbors < 2 or live_neighbors > 3:\n                        board[i][j] = 0\n                else:\n                    if live_neighbors == 3:\n                        board[i][j] = 1\n        for i in range(m):\n            for j in range(n):\n                board[i][j] = int(board[i][j])\n        return board"
    },
    {
        "number": 290,
        "title": "Word Pattern",
        "difficulty": 0,
        "pass": 0,
        "answer": "        if len(pattern)!= len(s):\n            return False\n        d = {}\n        for i in range(len(pattern)):\n            if pattern[i] in d:\n                if d[pattern[i]]!= s[i]:\n                    return False\n            else:\n                if s[i] in d.values():\n                    return False\n                else:\n                    d[pattern[i]] = s[i]\n        return True"
    },
    {
        "number": 290,
        "title": "Word Pattern",
        "difficulty": 0,
        "pass": 1,
        "answer": "        if len(pattern)!= len(s):\n            return False"
    },
    {
        "number": 290,
        "title": "Word Pattern",
        "difficulty": 0,
        "pass": 2,
        "answer": "        if len(pattern)!= len(s):\n            return False\n        pattern_dict = {}\n        s_dict = {}\n        for i in range(len(pattern)):\n            if pattern[i] not in pattern_dict:\n                pattern_dict[pattern[i]] = s[i]\n            else:\n                if pattern_dict[pattern[i]]!= s[i]:\n                    return False\n        for i in range(len(s)):\n            if s[i] not in s_dict:\n                s_dict[s[i]] = pattern[i]\n            else:\n                if s_dict[s[i]]!= pattern[i]:\n                    return False\n        return True"
    },
    {
        "number": 290,
        "title": "Word Pattern",
        "difficulty": 0,
        "pass": 3,
        "answer": "        words = s.split()\n        if len(pattern)!= len(words):\n            return False\n        d = {}\n        for i in range(len(pattern)):\n            if pattern[i] in d:\n                if d[pattern[i]]!= words[i]:\n                    return False\n            else:\n                if words[i] in d.values():\n                    return False\n                else:\n                    d[pattern[i]] = words[i]\n        return True"
    },
    {
        "number": 290,
        "title": "Word Pattern",
        "difficulty": 0,
        "pass": 4,
        "answer": "        if len(pattern)!= len(s):\n            return False\n        d = {}\n        s_list = s.split()\n        if len(s_list)!= len(pattern):\n            return False\n        for i in range(len(pattern)):\n            if pattern[i] in d:\n                if d[pattern[i]]!= s_list[i]:\n                    return False\n            else:\n                if s_list[i] in d.values():\n                    return False\n                else:\n                    d[pattern[i]] = s_list[i]\n        return True"
    },
    {
        "number": 290,
        "title": "Word Pattern",
        "difficulty": 0,
        "pass": 5,
        "answer": "        words = s.split()\n        if len(words)!= len(pattern):\n            return False\n        lookup = {}\n        for i in range(len(pattern)):\n            if pattern[i] in lookup:\n                if lookup[pattern[i]]!= words[i]:\n                    return False\n            else:\n                if words[i] in lookup.values():\n                    return False\n                else:\n                    lookup[pattern[i]] = words[i]\n        return True"
    },
    {
        "number": 290,
        "title": "Word Pattern",
        "difficulty": 0,
        "pass": 6,
        "answer": "        if len(pattern)!= len(s.split()):\n            return False"
    },
    {
        "number": 290,
        "title": "Word Pattern",
        "difficulty": 0,
        "pass": 7,
        "answer": "        if len(pattern)!= len(s):\n            return False"
    },
    {
        "number": 290,
        "title": "Word Pattern",
        "difficulty": 0,
        "pass": 8,
        "answer": "        if len(pattern)!= len(s):\n            return False\n        if len(pattern) == 0:\n            return True\n        if set(pattern)!= set(s.split()):\n            return False\n        d = {}\n        for i in range(len(pattern)):\n            if pattern[i] in d:\n                if d[pattern[i]]!= s.split()[i]:\n                    return False\n            else:\n                if s.split()[i] in d.values():\n                    return False\n                d[pattern[i]] = s.split()[i]\n        return True"
    },
    {
        "number": 290,
        "title": "Word Pattern",
        "difficulty": 0,
        "pass": 9,
        "answer": "        \n        if len(pattern)!= len(s):\n            return False\n        \n        d = {}\n        \n        for i in range(len(pattern)):\n            if pattern[i] not in d:\n                if s[i] in d.values():\n                    return False\n                else:\n                    d[pattern[i]] = s[i]\n            else:\n                if d[pattern[i]]!= s[i]:\n                    return False\n        \n        return True"
    },
    {
        "number": 292,
        "title": "Nim Game",
        "difficulty": 0,
        "pass": 0,
        "answer": "        if n == 1:\n            return True\n        if n == 2:\n            return False\n        if n == 3:\n            return False\n        if n == 4:\n            return False\n        if n == 5:\n            return False\n        if n == 6:\n            return False\n        if n == 7:\n            return False\n        if n == 8:\n            return False\n        if n == 9:\n            return False\n        if n == 10:\n            return False\n        if n == 11:\n            return False\n        if n == 12:\n            return False\n        if n == 13:\n            return False\n        if n == 14:\n            return False\n        if n == 15:\n            return False\n        if n == 16:\n            return False\n        if n == 17:\n            return False\n        if n == 18:\n            return False\n        if n == 19:\n            return False\n        if n == 20:\n            return False\n        if n == 21:\n            return False\n        if n == 22:\n            return False\n        if n == 23:\n            "
    },
    {
        "number": 292,
        "title": "Nim Game",
        "difficulty": 0,
        "pass": 1,
        "answer": "        if n == 1:\n            return True\n        if n == 2:\n            return False\n        if n == 3:\n            return False\n        if n == 4:\n            return False\n        if n == 5:\n            return False\n        if n == 6:\n            return False\n        if n == 7:\n            return False\n        if n == 8:\n            return False\n        if n == 9:\n            return False\n        if n == 10:\n            return False\n        if n == 11:\n            return False\n        if n == 12:\n            return False\n        if n == 13:\n            return False\n        if n == 14:\n            return False\n        if n == 15:\n            return False\n        if n == 16:\n            return False\n        if n == 17:\n            return False\n        if n == 18:\n            return False\n        if n == 19:\n            return False\n        if n == 20:\n            return False\n        if n == 21:\n            return False\n        if n == 22:\n            return False\n        if n == 23:\n            "
    },
    {
        "number": 292,
        "title": "Nim Game",
        "difficulty": 0,
        "pass": 2,
        "answer": "        if n == 1:\n            return True\n        if n == 2:\n            return False\n        if n == 3:\n            return False\n        if n == 4:\n            return False\n        if n == 5:\n            return False\n        if n == 6:\n            return False\n        if n == 7:\n            return False\n        if n == 8:\n            return False\n        if n == 9:\n            return False\n        if n == 10:\n            return False\n        if n == 11:\n            return False\n        if n == 12:\n            return False\n        if n == 13:\n            return False\n        if n == 14:\n            return False\n        if n == 15:\n            return False\n        if n == 16:\n            return False\n        if n == 17:\n            return False\n        if n == 18:\n            return False\n        if n == 19:\n            return False\n        if n == 20:\n            return False\n        if n == 21:\n            return False\n        if n == 22:\n            return False\n        if n == 23:\n            "
    },
    {
        "number": 292,
        "title": "Nim Game",
        "difficulty": 0,
        "pass": 3,
        "answer": "        if n == 1:\n            return True\n        if n == 2:\n            return False\n        if n == 3:\n            return True\n        if n == 4:\n            return False\n        if n == 5:\n            return True\n        if n == 6:\n            return False\n        if n == 7:\n            return True\n        if n == 8:\n            return False\n        if n == 9:\n            return True\n        if n == 10:\n            return False\n        if n == 11:\n            return True\n        if n == 12:\n            return False\n        if n == 13:\n            return True\n        if n == 14:\n            return False\n        if n == 15:\n            return True\n        if n == 16:\n            return False\n        if n == 17:\n            return True\n        if n == 18:\n            return False\n        if n == 19:\n            return True\n        if n == 20:\n            return False\n        if n == 21:\n            return True\n        if n == 22:\n            return False\n        if n == 23:\n            "
    },
    {
        "number": 292,
        "title": "Nim Game",
        "difficulty": 0,
        "pass": 4,
        "answer": "        if n == 1:\n            return True\n        if n == 2:\n            return True\n        if n == 3:\n            return False\n        if n == 4:\n            return False\n        if n == 5:\n            return True\n        if n == 6:\n            return False\n        if n == 7:\n            return True\n        if n == 8:\n            return False\n        if n == 9:\n            return True\n        if n == 10:\n            return False\n        if n == 11:\n            return True\n        if n == 12:\n            return False\n        if n == 13:\n            return True\n        if n == 14:\n            return False\n        if n == 15:\n            return True\n        if n == 16:\n            return False\n        if n == 17:\n            return True\n        if n == 18:\n            return False\n        if n == 19:\n            return True\n        if n == 20:\n            return False\n        if n == 21:\n            return True\n        if n == 22:\n            return False\n        if n == 23:\n            "
    },
    {
        "number": 292,
        "title": "Nim Game",
        "difficulty": 0,
        "pass": 5,
        "answer": "        if n == 1:\n            return True\n        if n == 2:\n            return False\n        if n == 3:\n            return False\n        if n == 4:\n            return False\n        if n == 5:\n            return False\n        if n == 6:\n            return False\n        if n == 7:\n            return False\n        if n == 8:\n            return False\n        if n == 9:\n            return False\n        if n == 10:\n            return False\n        if n == 11:\n            return False\n        if n == 12:\n            return False\n        if n == 13:\n            return False\n        if n == 14:\n            return False\n        if n == 15:\n            return False\n        if n == 16:\n            return False\n        if n == 17:\n            return False\n        if n == 18:\n            return False\n        if n == 19:\n            return False\n        if n == 20:\n            return False\n        if n == 21:\n            return False\n        if n == 22:\n            return False\n        if n == 23:\n            "
    },
    {
        "number": 292,
        "title": "Nim Game",
        "difficulty": 0,
        "pass": 6,
        "answer": "        if n == 1:\n            return True\n        if n == 2:\n            return True\n        if n == 3:\n            return True\n        if n == 4:\n            return True\n        if n == 5:\n            return True\n        if n == 6:\n            return True\n        if n == 7:\n            return True\n        if n == 8:\n            return True\n        if n == 9:\n            return True\n        if n == 10:\n            return True\n        if n == 11:\n            return True\n        if n == 12:\n            return True\n        if n == 13:\n            return True\n        if n == 14:\n            return True\n        if n == 15:\n            return True\n        if n == 16:\n            return True\n        if n == 17:\n            return True\n        if n == 18:\n            return True\n        if n == 19:\n            return True\n        if n == 20:\n            return True\n        if n == 21:\n            return True\n        if n == 22:\n            return True\n        if n == 23:\n            "
    },
    {
        "number": 292,
        "title": "Nim Game",
        "difficulty": 0,
        "pass": 7,
        "answer": "        if n == 1:\n            return True\n        if n == 2:\n            return True\n        if n == 3:\n            return False\n        if n == 4:\n            return False\n        if n == 5:\n            return True\n        if n == 6:\n            return False\n        if n == 7:\n            return True\n        if n == 8:\n            return False\n        if n == 9:\n            return True\n        if n == 10:\n            return False\n        if n == 11:\n            return True\n        if n == 12:\n            return False\n        if n == 13:\n            return True\n        if n == 14:\n            return False\n        if n == 15:\n            return True\n        if n == 16:\n            return False\n        if n == 17:\n            return True\n        if n == 18:\n            return False\n        if n == 19:\n            return True\n        if n == 20:\n            return False\n        if n == 21:\n            return True\n        if n == 22:\n            return False\n        if n == 23:\n            "
    },
    {
        "number": 292,
        "title": "Nim Game",
        "difficulty": 0,
        "pass": 8,
        "answer": "        if n == 1:\n            return True\n        if n == 2:\n            return False\n        if n == 3:\n            return True\n        if n == 4:\n            return False\n        if n == 5:\n            return True\n        if n == 6:\n            return False\n        if n == 7:\n            return True\n        if n == 8:\n            return False\n        if n == 9:\n            return True\n        if n == 10:\n            return False\n        if n == 11:\n            return True\n        if n == 12:\n            return False\n        if n == 13:\n            return True\n        if n == 14:\n            return False\n        if n == 15:\n            return True\n        if n == 16:\n            return False\n        if n == 17:\n            return True\n        if n == 18:\n            return False\n        if n == 19:\n            return True\n        if n == 20:\n            return False\n        if n == 21:\n            return True\n        if n == 22:\n            return False\n        if n == 23:\n            "
    },
    {
        "number": 292,
        "title": "Nim Game",
        "difficulty": 0,
        "pass": 9,
        "answer": "        if n == 1:\n            return True\n        if n == 2:\n            return True\n        if n == 3:\n            return False\n        if n == 4:\n            return False\n        if n == 5:\n            return True\n        if n == 6:\n            return False\n        if n == 7:\n            return True\n        if n == 8:\n            return False\n        if n == 9:\n            return True\n        if n == 10:\n            return False\n        if n == 11:\n            return True\n        if n == 12:\n            return False\n        if n == 13:\n            return True\n        if n == 14:\n            return False\n        if n == 15:\n            return True\n        if n == 16:\n            return False\n        if n == 17:\n            return True\n        if n == 18:\n            return False\n        if n == 19:\n            return True\n        if n == 20:\n            return False\n        if n == 21:\n            return True\n        if n == 22:\n            return False\n        if n == 23:\n            "
    },
    {
        "number": 295,
        "title": "Find Median from Data Stream",
        "difficulty": 2,
        "pass": 0,
        "answer": "        self.arr = []\n        self.size = 0"
    },
    {
        "number": 295,
        "title": "Find Median from Data Stream",
        "difficulty": 2,
        "pass": 1,
        "answer": "        self.arr = []"
    },
    {
        "number": 295,
        "title": "Find Median from Data Stream",
        "difficulty": 2,
        "pass": 2,
        "answer": "        self.arr = []\n        self.count = 0"
    },
    {
        "number": 295,
        "title": "Find Median from Data Stream",
        "difficulty": 2,
        "pass": 3,
        "answer": "        self.arr = []\n    def addNum(self, num: int) -> None:\n        self.arr.append(num)\n    def findMedian(self) -> float:\n        self.arr.sort()\n        if len(self.arr) % 2 == 1:\n            return self.arr[len(self.arr) // 2]\n        else:\n            return (self.arr[len(self.arr) // 2] + self.arr[len(self.arr) // 2 - 1]) / 2"
    },
    {
        "number": 295,
        "title": "Find Median from Data Stream",
        "difficulty": 2,
        "pass": 4,
        "answer": "        self.arr = []\n        self.size = 0"
    },
    {
        "number": 295,
        "title": "Find Median from Data Stream",
        "difficulty": 2,
        "pass": 5,
        "answer": "        # Your MedianFinder object will be instantiated and called as such:\n        # obj = MedianFinder()\n        # obj.addNum(num)\n        # param_2 = obj.findMedian()\n        self.arr = []\n    def addNum(self, num: int) -> None:\n        self.arr.append(num)\n    def findMedian(self) -> float:\n        self.arr.sort()\n        if len(self.arr) % 2 == 1:\n            return self.arr[len(self.arr) // 2]\n        else:\n            return (self.arr[len(self.arr) // 2] + self.arr[len(self.arr) // 2 - 1]) / 2"
    },
    {
        "number": 295,
        "title": "Find Median from Data Stream",
        "difficulty": 2,
        "pass": 6,
        "answer": "        self.arr = []"
    },
    {
        "number": 295,
        "title": "Find Median from Data Stream",
        "difficulty": 2,
        "pass": 7,
        "answer": "        self.arr = []"
    },
    {
        "number": 295,
        "title": "Find Median from Data Stream",
        "difficulty": 2,
        "pass": 8,
        "answer": "        self.arr = []"
    },
    {
        "number": 295,
        "title": "Find Median from Data Stream",
        "difficulty": 2,
        "pass": 9,
        "answer": "        # Your MedianFinder object will be instantiated and called as such:\n        # obj = MedianFinder()\n        # obj.addNum(num)\n        # param_2 = obj.findMedian()\n        # @lc code=start\n        if not self.nums:\n            self.nums.append(num)\n            return self.nums[len(self.nums) // 2]\n        else:\n            self.nums.append(num)\n            self.nums.sort()\n            if len(self.nums) % 2 == 0:\n                return (self.nums[len(self.nums) // 2] + self.nums[len(self.nums) // 2 - 1]) / 2\n            else:\n                return self.nums[len(self.nums) // 2]"
    },
    {
        "number": 297,
        "title": "Serialize and Deserialize Binary Tree",
        "difficulty": 2,
        "pass": 0,
        "answer": "        if not root:\n            return []\n        res = []\n        q = deque()\n        q.append(root)\n        while q:\n            node = q.popleft()\n            if node:\n                res.append(node.val)\n                q.append(node.left)\n                q.append(node.right)\n            else:\n                res.append(None)\n        return res"
    },
    {
        "number": 297,
        "title": "Serialize and Deserialize Binary Tree",
        "difficulty": 2,
        "pass": 1,
        "answer": "        if not root:\n            return \"[]\"\n        res = []\n        q = deque([root])\n        while q:\n            node = q.popleft()\n            if node:\n                res.append(str(node.val))\n                q.append(node.left)\n                q.append(node.right)\n            else:\n                res.append(\"null\")\n        return \"[\" + \",\".join(res) + \"]\""
    },
    {
        "number": 297,
        "title": "Serialize and Deserialize Binary Tree",
        "difficulty": 2,
        "pass": 2,
        "answer": "        if not root:\n            return []\n        res = []\n        q = deque()\n        q.append(root)\n        while q:\n            node = q.popleft()\n            if node:\n                res.append(node.val)\n                q.append(node.left)\n                q.append(node.right)\n            else:\n                res.append(None)\n        return res"
    },
    {
        "number": 297,
        "title": "Serialize and Deserialize Binary Tree",
        "difficulty": 2,
        "pass": 3,
        "answer": "        if not root:\n            return \"[]\"\n        res = []\n        q = deque([root])\n        while q:\n            node = q.popleft()\n            if node:\n                res.append(str(node.val))\n                q.append(node.left)\n                q.append(node.right)\n            else:\n                res.append(\"null\")\n        return \"[\" + \",\".join(res) + \"]\""
    },
    {
        "number": 297,
        "title": "Serialize and Deserialize Binary Tree",
        "difficulty": 2,
        "pass": 4,
        "answer": "        if not root:\n            return []\n        \n        res = []\n        \n        def dfs(node):\n            if not node:\n                res.append('#')\n                return\n            res.append(str(node.val))\n            dfs(node.left)\n            dfs(node.right)\n        \n        dfs(root)\n        return ','.join(res)"
    },
    {
        "number": 297,
        "title": "Serialize and Deserialize Binary Tree",
        "difficulty": 2,
        "pass": 5,
        "answer": "        if not root:\n            return \"[]\"\n        \n        res = []\n        def dfs(node):\n            if not node:\n                res.append(\"null\")\n                return\n            res.append(str(node.val))\n            dfs(node.left)\n            dfs(node.right)\n        dfs(root)\n        return \"[\" + \",\".join(res) + \"]\""
    },
    {
        "number": 297,
        "title": "Serialize and Deserialize Binary Tree",
        "difficulty": 2,
        "pass": 6,
        "answer": "        if not root:\n            return \"[]\"\n        queue = collections.deque([root])\n        res = []\n        while queue:\n            node = queue.popleft()\n            if node:\n                res.append(str(node.val))\n                queue.append(node.left)\n                queue.append(node.right)\n            else:\n                res.append(\"null\")\n        return \"[\" + \",\".join(res) + \"]\""
    },
    {
        "number": 297,
        "title": "Serialize and Deserialize Binary Tree",
        "difficulty": 2,
        "pass": 7,
        "answer": "        if not root:\n            return ''\n        queue = collections.deque([root])\n        res = []\n        while queue:\n            node = queue.popleft()\n            if node:\n                res.append(str(node.val))\n                queue.append(node.left)\n                queue.append(node.right)\n            else:\n                res.append('#')\n        return ','.join(res)"
    },
    {
        "number": 297,
        "title": "Serialize and Deserialize Binary Tree",
        "difficulty": 2,
        "pass": 8,
        "answer": "        if not root:\n            return []\n        q = deque()\n        q.append(root)\n        res = []\n        while q:\n            node = q.popleft()\n            if node:\n                res.append(node.val)\n                q.append(node.left)\n                q.append(node.right)\n            else:\n                res.append(None)\n        return res"
    },
    {
        "number": 297,
        "title": "Serialize and Deserialize Binary Tree",
        "difficulty": 2,
        "pass": 9,
        "answer": "        if not root:\n            return \"[]\"\n        queue = [root]\n        res = []\n        while queue:\n            node = queue.pop(0)\n            if node:\n                res.append(str(node.val))\n                queue.append(node.left)\n                queue.append(node.right)\n            else:\n                res.append(\"null\")\n        return \"[\" + \",\".join(res) + \"]\""
    },
    {
        "number": 299,
        "title": "Bulls and Cows",
        "difficulty": 1,
        "pass": 0,
        "answer": "        bulls = 0\n        cows = 0\n        secret_dict = {}\n        guess_dict = {}\n        for i in range(len(secret)):\n            secret_dict[secret[i]] = secret_dict.get(secret[i], 0) + 1\n        for i in range(len(guess)):\n            guess_dict[guess[i]] = guess_dict.get(guess[i], 0) + 1\n        for i in range(len(secret)):\n            if secret[i] == guess[i]:\n                bulls += 1\n        for i in range(len(guess)):\n            if guess[i] in secret_dict and guess[i]!= secret[i]:\n                cows += min(secret_dict[guess[i]], guess_dict[guess[i]])\n                secret_dict[guess[i]] -= min(secret_dict[guess[i]], guess_dict[guess[i]])\n                guess_dict[guess[i]] -= min(secret_dict[guess"
    },
    {
        "number": 299,
        "title": "Bulls and Cows",
        "difficulty": 1,
        "pass": 1,
        "answer": "        bulls = 0\n        cows = 0\n        n = len(secret)\n        for i in range(n):\n            if guess[i] == secret[i]:\n                bulls += 1\n            else:\n                for j in range(n):\n                    if guess[i] == secret[j] and i!= j:\n                        cows += 1\n        return str(bulls) + \"A\" + str(cows) + \"B\""
    },
    {
        "number": 299,
        "title": "Bulls and Cows",
        "difficulty": 1,
        "pass": 2,
        "answer": "        if secret == guess:\n            return str(len(secret)) + 'A' + str(len(set(secret)) - len(set(secret).intersection(set(guess)))) + 'B'"
    },
    {
        "number": 299,
        "title": "Bulls and Cows",
        "difficulty": 1,
        "pass": 3,
        "answer": "        bulls = 0\n        cows = 0\n        secret_dict = {}\n        guess_dict = {}\n        for i in range(len(secret)):\n            secret_dict[secret[i]] = secret_dict.get(secret[i], 0) + 1\n        for i in range(len(guess)):\n            guess_dict[guess[i]] = guess_dict.get(guess[i], 0) + 1\n        for i in range(len(secret)):\n            if secret[i] == guess[i]:\n                bulls += 1\n        for i in range(len(guess)):\n            if guess[i] in secret_dict and guess[i]!= secret[i]:\n                cows += min(secret_dict[guess[i]], guess_dict[guess[i]])\n                secret_dict[guess[i]] -= min(secret_dict[guess[i]], guess_dict[guess[i]])\n                guess_dict[guess[i]] -= min(secret_dict[guess"
    },
    {
        "number": 299,
        "title": "Bulls and Cows",
        "difficulty": 1,
        "pass": 4,
        "answer": "        secret_list = list(secret)\n        guess_list = list(guess)\n        bulls = 0\n        cows = 0\n        for i in range(len(secret_list)):\n            if secret_list[i] == guess_list[i]:\n                bulls += 1\n                secret_list[i] = '*'\n        for i in range(len(guess_list)):\n            if guess_list[i] in secret_list:\n                cows += 1\n                secret_list[secret_list.index(guess_list[i])] = '*'\n        return str(bulls) + \"A\" + str(cows) + \"B\""
    },
    {
        "number": 299,
        "title": "Bulls and Cows",
        "difficulty": 1,
        "pass": 5,
        "answer": "        bulls = 0\n        cows = 0"
    },
    {
        "number": 299,
        "title": "Bulls and Cows",
        "difficulty": 1,
        "pass": 6,
        "answer": "        bulls = 0\n        cows = 0\n        secret_map = {}\n        guess_map = {}\n        for i in range(len(secret)):\n            secret_map[secret[i]] = secret_map.get(secret[i], 0) + 1\n        for i in range(len(guess)):\n            guess_map[guess[i]] = guess_map.get(guess[i], 0) + 1\n        for k, v in guess_map.items():\n            if k in secret_map:\n                bulls += min(v, secret_map[k])\n                secret_map[k] -= min(v, secret_map[k])\n        for k, v in secret_map.items():\n            if k in guess_map:\n                cows += min(v, guess_map[k])\n                guess_map[k] -= min(v, guess_map[k])\n        return str(bulls) + 'A' + str(cows) + 'B'"
    },
    {
        "number": 299,
        "title": "Bulls and Cows",
        "difficulty": 1,
        "pass": 7,
        "answer": "        bulls = 0\n        cows = 0\n        secret_dict = {}\n        guess_dict = {}\n        for i in range(len(secret)):\n            secret_dict[secret[i]] = secret_dict.get(secret[i], 0) + 1\n        for i in range(len(guess)):\n            guess_dict[guess[i]] = guess_dict.get(guess[i], 0) + 1\n        for key in secret_dict:\n            if key in guess_dict:\n                bulls += min(secret_dict[key], guess_dict[key])\n        for key in guess_dict:\n            if key in secret_dict:\n                cows += min(secret_dict[key], guess_dict[key])\n        return str(bulls) + \"A\" + str(cows) + \"B\""
    },
    {
        "number": 299,
        "title": "Bulls and Cows",
        "difficulty": 1,
        "pass": 8,
        "answer": "        secret = list(secret)\n        guess = list(guess)\n        bulls = 0\n        cows = 0\n        for i in range(len(secret)):\n            if secret[i] == guess[i]:\n                bulls += 1\n                secret.pop(i)\n                guess.pop(i)\n        for i in range(len(guess)):\n            if guess[i] in secret:\n                cows += 1\n                secret.remove(guess[i])\n        return str(bulls) + \"A\" + str(cows) + \"B\""
    },
    {
        "number": 299,
        "title": "Bulls and Cows",
        "difficulty": 1,
        "pass": 9,
        "answer": "        bulls = 0\n        cows = 0\n        for i in range(len(secret)):\n            if secret[i] == guess[i]:\n                bulls += 1\n            else:\n                for j in range(len(guess)):\n                    if secret[i] == guess[j] and i!= j:\n                        cows += 1\n        return str(bulls) + \"A\" + str(cows) + \"B\""
    },
    {
        "number": 300,
        "title": "Longest Increasing Subsequence",
        "difficulty": 1,
        "pass": 0,
        "answer": "        if not nums:\n            return 0\n        dp = [1] * len(nums)\n        for i in range(1, len(nums)):\n            for j in range(i):\n                if nums[i] > nums[j]:\n                    dp[i] = max(dp[i], dp[j] + 1)\n        return max(dp)"
    },
    {
        "number": 300,
        "title": "Longest Increasing Subsequence",
        "difficulty": 1,
        "pass": 1,
        "answer": "        n = len(nums)\n        if n == 0:\n            return 0\n        dp = [1 for _ in range(n)]\n        for i in range(1, n):\n            for j in range(i):\n                if nums[i] > nums[j]:\n                    dp[i] = max(dp[i], dp[j] + 1)\n        return max(dp)"
    },
    {
        "number": 300,
        "title": "Longest Increasing Subsequence",
        "difficulty": 1,
        "pass": 2,
        "answer": "        if not nums:\n            return 0\n        dp = [1] * len(nums)\n        for i in range(1, len(nums)):\n            for j in range(i):\n                if nums[i] > nums[j]:\n                    dp[i] = max(dp[i], dp[j] + 1)\n        return max(dp)"
    },
    {
        "number": 300,
        "title": "Longest Increasing Subsequence",
        "difficulty": 1,
        "pass": 3,
        "answer": "        if not nums:\n            return 0\n        n = len(nums)\n        dp = [1] * n\n        for i in range(1, n):\n            for j in range(i):\n                if nums[i] > nums[j]:\n                    dp[i] = max(dp[i], dp[j] + 1)\n        return max(dp)"
    },
    {
        "number": 300,
        "title": "Longest Increasing Subsequence",
        "difficulty": 1,
        "pass": 4,
        "answer": "        if not nums:\n            return 0\n        n = len(nums)\n        dp = [1] * n\n        for i in range(1, n):\n            for j in range(i):\n                if nums[i] > nums[j]:\n                    dp[i] = max(dp[i], dp[j] + 1)\n        return max(dp)"
    },
    {
        "number": 300,
        "title": "Longest Increasing Subsequence",
        "difficulty": 1,
        "pass": 5,
        "answer": "        if not nums:\n            return 0\n        n = len(nums)\n        dp = [1 for _ in range(n)]\n        for i in range(1, n):\n            for j in range(i):\n                if nums[i] > nums[j]:\n                    dp[i] = max(dp[i], dp[j] + 1)\n        return max(dp)"
    },
    {
        "number": 300,
        "title": "Longest Increasing Subsequence",
        "difficulty": 1,
        "pass": 6,
        "answer": "        if not nums:\n            return 0\n        n = len(nums)\n        dp = [1] * n\n        for i in range(1, n):\n            for j in range(i):\n                if nums[i] > nums[j]:\n                    dp[i] = max(dp[i], dp[j] + 1)\n        return max(dp)"
    },
    {
        "number": 300,
        "title": "Longest Increasing Subsequence",
        "difficulty": 1,
        "pass": 7,
        "answer": "        if not nums:\n            return 0\n        n = len(nums)\n        dp = [1] * n\n        for i in range(1, n):\n            for j in range(i):\n                if nums[i] > nums[j]:\n                    dp[i] = max(dp[i], dp[j] + 1)\n        return max(dp)"
    },
    {
        "number": 300,
        "title": "Longest Increasing Subsequence",
        "difficulty": 1,
        "pass": 8,
        "answer": "        if not nums:\n            return 0\n        n = len(nums)\n        dp = [1] * n\n        for i in range(1, n):\n            for j in range(i):\n                if nums[i] > nums[j]:\n                    dp[i] = max(dp[i], dp[j] + 1)\n        return max(dp)"
    },
    {
        "number": 300,
        "title": "Longest Increasing Subsequence",
        "difficulty": 1,
        "pass": 9,
        "answer": "        n = len(nums)\n        if n == 0:\n            return 0\n        dp = [1] * n\n        for i in range(1, n):\n            for j in range(i):\n                if nums[i] > nums[j]:\n                    dp[i] = max(dp[i], dp[j] + 1)\n        return max(dp)"
    },
    {
        "number": 301,
        "title": "Remove Invalid Parentheses",
        "difficulty": 2,
        "pass": 0,
        "answer": "        if not s:\n            return []\n        \n        def is_valid(s):\n            count = 0\n            for c in s:\n                if c == '(':\n                    count += 1\n                elif c == ')':\n                    count -= 1\n                if count < 0:\n                    return False\n            return count == 0\n        \n        def dfs(s, path, res):\n            if not s:\n                res.append(''.join(path))\n                return\n            for i in range(1, len(s) + 1):\n                if is_valid(s[:i]):\n                    dfs(s[i:], path + [s[:i]], res)\n        \n        res = []\n        dfs(s, [], res)\n        return res"
    },
    {
        "number": 301,
        "title": "Remove Invalid Parentheses",
        "difficulty": 2,
        "pass": 1,
        "answer": "        # Time: O(n)\n        # Space: O(n)\n        \n        def is_valid(s):\n            count = 0\n            for c in s:\n                if c == '(':\n                    count += 1\n                elif c == ')':\n                    count -= 1\n                if count < 0:\n                    return False\n            return count == 0\n        \n        res = []\n        stack = []\n        for i, c in enumerate(s):\n            if c == '(':\n                stack.append(i)\n            elif c == ')':\n                if stack:\n                    stack.pop()\n                else:\n                    res.append(s[:i] + s[i+1:])\n        \n        for i in range(len(stack)):\n            res.append(s[:stack[i]] + s[stack[i]+1:])\n        \n        return list(set(filter(is_valid, res)))\n        "
    },
    {
        "number": 301,
        "title": "Remove Invalid Parentheses",
        "difficulty": 2,
        "pass": 2,
        "answer": "        # Solution 1\n        # Time: O(n)\n        # Space: O(n)\n        # if not s:\n        #     return [\"\"]\n        # res = []\n        # self.dfs(s, 0, 0, \"\", res)\n        # return res"
    },
    {
        "number": 301,
        "title": "Remove Invalid Parentheses",
        "difficulty": 2,
        "pass": 3,
        "answer": "        def is_valid(s):\n            count = 0\n            for c in s:\n                if c == '(':\n                    count += 1\n                elif c == ')':\n                    count -= 1\n                    if count < 0:\n                        return False\n            return count == 0\n        \n        def dfs(s):\n            if len(s) == 0:\n                return []\n            if is_valid(s):\n                return [s]\n            res = []\n            for i in range(len(s)):\n                if s[i] == '(':\n                    tmp = dfs(s[:i] + s[i+1:])\n                    for t in tmp:\n                        res.append('(' + t)\n                elif s[i] == ')':\n                    tmp = dfs(s[:i] + s[i+1:])\n                    for t in tmp:\n                        res.append('(' + t)\n            return res\n        \n        return dfs(s)"
    },
    {
        "number": 301,
        "title": "Remove Invalid Parentheses",
        "difficulty": 2,
        "pass": 4,
        "answer": "        if len(s) == 0:\n            return [\"\"]\n        if len(s) == 1:\n            return [s]\n        if len(s) == 2:\n            if s[0] == \")\" and s[1] == \")\":\n                return [\"\"]\n            if s[0] == \")\" and s[1] == \"(\":\n                return [\"\"]\n            if s[0] == \"(\" and s[1] == \")\":\n                return [\"\"]\n            if s[0] == \"(\" and s[1] == \"(\":\n                return [\"\"]\n            if s[0] == \"(\" and s[1] == \")\":\n                return [\"\"]\n            if s[0] == \")\" and s[1] == \")\":\n                return [\"\"]\n            if s[0] == \")\" and s[1] == \"(\":\n                return [\"\"]\n            if s[0] == \"(\" and s[1] == \")\":\n                return [\"\"]\n            if s[0] == \"(\" and s[1] == \")\":\n                "
    },
    {
        "number": 301,
        "title": "Remove Invalid Parentheses",
        "difficulty": 2,
        "pass": 5,
        "answer": "        def isValid(s):\n            count = 0\n            for c in s:\n                if c == '(':\n                    count += 1\n                elif c == ')':\n                    count -= 1\n                if count < 0:\n                    return False\n            return count == 0\n        \n        def dfs(s, path, res):\n            if not s:\n                res.append(''.join(path))\n                return\n            for i in range(1, len(s) + 1):\n                if isValid(s[:i]):\n                    path.append(s[:i])\n                    dfs(s[i:], path, res)\n                    path.pop()\n        \n        res = []\n        dfs(s, [], res)\n        return res"
    },
    {
        "number": 301,
        "title": "Remove Invalid Parentheses",
        "difficulty": 2,
        "pass": 6,
        "answer": "        def isValid(s):\n            count = 0\n            for c in s:\n                if c == '(':\n                    count += 1\n                elif c == ')':\n                    count -= 1\n                if count < 0:\n                    return False\n            return count == 0\n        \n        def dfs(s):\n            if not s:\n                return ['']\n            res = []\n            for i in range(len(s)):\n                if s[i] == '(':\n                    tmp = dfs(s[:i] + s[i+1:])\n                    for t in tmp:\n                        if isValid(s[:i] + t + s[i+1:]):\n                            res.append(s[:i] + t + s[i+1:])\n                elif s[i] == ')':\n                    tmp = dfs(s[:i] + s[i+1:])\n                    for t in tmp:\n                        if isValid(s[:i] + t + s[i+1:]):\n                            res.append(s[:i"
    },
    {
        "number": 301,
        "title": "Remove Invalid Parentheses",
        "difficulty": 2,
        "pass": 7,
        "answer": "        if len(s) == 0:\n            return []\n        \n        def isValid(s):\n            count = 0\n            for i in range(len(s)):\n                if s[i] == '(':\n                    count += 1\n                elif s[i] == ')':\n                    count -= 1\n                    if count < 0:\n                        return False\n            if count == 0:\n                return True\n            else:\n                return False\n        \n        def dfs(index, path, res):\n            if index == len(s):\n                if isValid(path):\n                    res.append(path)\n                return\n            if s[index] == '(':\n                dfs(index+1, path+'(', res)\n            elif s[index] == ')':\n                dfs(index+1, path+')', res)\n            else:\n                dfs(index+1, path+s[index], res)\n        \n        res = []\n        dfs(0, '', res)\n        return res"
    },
    {
        "number": 301,
        "title": "Remove Invalid Parentheses",
        "difficulty": 2,
        "pass": 8,
        "answer": "        \n        def isValid(s):\n            count = 0\n            for c in s:\n                if c == '(':\n                    count += 1\n                elif c == ')':\n                    count -= 1\n                    if count < 0:\n                        return False\n            return count == 0\n        \n        res = set()\n        \n        def dfs(s, path):\n            if not s:\n                res.add(path)\n                return\n            for i in range(1, len(s) + 1):\n                if isValid(s[:i]):\n                    dfs(s[i:], path + s[:i])\n        \n        dfs(s, \"\")\n        return list(res)\n        \n        \n        \n        \n        \n        \n        \n        \nclass Solution:\n    def removeInvalidParentheses(self, s: str) -> List[str]:\n        \"\"\"\n        Given a string s that contains parentheses and letters, remove the minimum number of invalid parentheses to make the input string valid.\n        Return a list of unique strings that are valid with the minimum number of remov"
    },
    {
        "number": 301,
        "title": "Remove Invalid Parentheses",
        "difficulty": 2,
        "pass": 9,
        "answer": "        \n        def isValid(s):\n            count = 0\n            for i in range(len(s)):\n                if s[i] == '(':\n                    count += 1\n                elif s[i] == ')':\n                    count -= 1\n                    if count < 0:\n                        return False\n            if count == 0:\n                return True\n            else:\n                return False\n        \n        def removeInvalidParentheses(s):\n            if len(s) == 0:\n                return []\n            if isValid(s):\n                return [s]\n            res = []\n            for i in range(len(s)):\n                if s[i] == '(':\n                    tmp = removeInvalidParentheses(s[:i] + s[i+1:])\n                    for j in tmp:\n                        if isValid(j):\n                            res.append(j)\n                elif s[i] == ')':\n                    tmp = removeInvalidParentheses(s[:i] + s[i+1:])\n                    for j in tmp:\n                        if isValid(j):\n"
    },
    {
        "number": 303,
        "title": "Range Sum Query - Immutable",
        "difficulty": 0,
        "pass": 0,
        "answer": "        self.nums = nums\n        self.n = len(nums)\n        self.dp = [0] * (self.n + 1)\n        for i in range(self.n - 1, -1, -1):\n            self.dp[i] = self.dp[i + 1] + nums[i]"
    },
    {
        "number": 303,
        "title": "Range Sum Query - Immutable",
        "difficulty": 0,
        "pass": 1,
        "answer": "        self.nums = nums\n        self.sums = []\n        for i in range(len(self.nums)):\n            self.sums.append(self.nums[i] if i == 0 else self.sums[i - 1] + self.nums[i])\n        return self.sums[right] if left == 0 else self.sums[left - 1] if left == len(self.nums) else self.sums[left] - self.sums[right]"
    },
    {
        "number": 303,
        "title": "Range Sum Query - Immutable",
        "difficulty": 0,
        "pass": 2,
        "answer": "        if not nums:\n            return 0\n        self.nums = nums\n        self.sums = []\n        for i in range(len(self.nums)):\n            self.sums.append(self.nums[i] if i == 0 else self.sums[i - 1] + self.nums[i])\n        return self.sums[right] - self.sums[left - 1] if left!= 0 else self.sums[right]"
    },
    {
        "number": 303,
        "title": "Range Sum Query - Immutable",
        "difficulty": 0,
        "pass": 3,
        "answer": "        self.nums = nums\n        self.length = len(nums)\n        if self.length == 0:\n            return 0\n        if left == 0:\n            return sum(self.nums[:right])\n        if right == self.length:\n            return sum(self.nums[left:])\n        return sum(self.nums[left:right+1])"
    },
    {
        "number": 303,
        "title": "Range Sum Query - Immutable",
        "difficulty": 0,
        "pass": 4,
        "answer": "        # Your NumArray object will be instantiated and called as such:\n        # obj = NumArray(nums)\n        # param_1 = obj.sumRange(left,right)\n        # @lc code=start\n        self.nums = nums\n        self.n = len(nums)\n        self.sums = [0] * (self.n + 1)\n        for i in range(self.n - 1, -1, -1):\n            self.sums[i] = self.sums[i + 1] + self.nums[i]\n        return self.sums[right] - self.sums[left]"
    },
    {
        "number": 303,
        "title": "Range Sum Query - Immutable",
        "difficulty": 0,
        "pass": 5,
        "answer": "        if len(nums) == 0:\n            return 0\n        if left == 0:\n            return sum(nums[left:right+1])\n        if right == len(nums):\n            return sum(nums[left-1:right])\n        return sum(nums[left:right+1]) - sum(nums[:left]) - sum(nums[right+1:])"
    },
    {
        "number": 303,
        "title": "Range Sum Query - Immutable",
        "difficulty": 0,
        "pass": 6,
        "answer": "        if len(nums) == 0:\n            return 0\n        if len(nums) == 1:\n            return nums[0]\n        if len(nums) == 2:\n            return nums[0] + nums[1]\n        if len(nums) == 3:\n            return nums[0] + nums[1] + nums[2]\n        dp = [0] * (len(nums) + 1)\n        dp[1] = nums[0]\n        dp[2] = nums[0] + nums[1]\n        dp[3] = nums[0] + nums[1] + nums[2]\n        for i in range(4, len(nums) + 1):\n            dp[i] = nums[i - 1] + dp[i - 3] + dp[i - 2]\n        return dp[-1]"
    },
    {
        "number": 303,
        "title": "Range Sum Query - Immutable",
        "difficulty": 0,
        "pass": 7,
        "answer": "        self.nums = nums\n        self.sums = []\n        for i in range(len(nums)):\n            if i == 0:\n                self.sums.append(nums[i])\n            else:\n                self.sums.append(self.sums[i - 1] + nums[i])\n        return self.sums[right] - self.sums[left]"
    },
    {
        "number": 303,
        "title": "Range Sum Query - Immutable",
        "difficulty": 0,
        "pass": 8,
        "answer": "        self.nums = nums\n        self.sums = []\n        for i in range(len(self.nums)):\n            self.sums.append(self.nums[i] if i == 0 else self.sums[i - 1] + self.nums[i])\n        return self.sums[right] if left == 0 else self.sums[left - 1] if left == len(self.nums) else self.sums[left] - self.sums[right]"
    },
    {
        "number": 303,
        "title": "Range Sum Query - Immutable",
        "difficulty": 0,
        "pass": 9,
        "answer": "        if not nums:\n            return 0\n        n = len(nums)\n        prefix_sum = [0] * (n + 1)\n        prefix_sum[0] = 0\n        for i in range(1, n + 1):\n            prefix_sum[i] = prefix_sum[i - 1] + nums[i - 1]\n        print(prefix_sum)\n        return sum(prefix_sum[left:right + 1])"
    },
    {
        "number": 304,
        "title": "Range Sum Query 2D - Immutable",
        "difficulty": 1,
        "pass": 0,
        "answer": "        self.matrix = matrix\n        self.row = len(matrix)\n        self.col = len(matrix[0])\n        self.dp = [[0 for _ in range(self.col + 1)] for _ in range(self.row + 1)]\n        for i in range(1, self.row + 1):\n            for j in range(1, self.col + 1):\n                self.dp[i][j] = self.dp[i - 1][j] + self.dp[i][j - 1] - self.dp[i - 1][j - 1] + matrix[i - 1][j - 1]\n        return self.dp[row2 + 1][col2 + 1]"
    },
    {
        "number": 304,
        "title": "Range Sum Query 2D - Immutable",
        "difficulty": 1,
        "pass": 1,
        "answer": "        if not matrix:\n            return 0\n        m, n = len(matrix), len(matrix[0])\n        dp = [[0] * (n + 1) for _ in range(m + 1)]\n        for i in range(1, m + 1):\n            for j in range(1, n + 1):\n                dp[i][j] = dp[i - 1][j] + dp[i][j - 1] - dp[i - 1][j - 1] + matrix[i - 1][j - 1]\n        return dp[row2 + 1][col2 + 1]"
    },
    {
        "number": 304,
        "title": "Range Sum Query 2D - Immutable",
        "difficulty": 1,
        "pass": 2,
        "answer": "        if not matrix:\n            return 0\n        m = len(matrix)\n        n = len(matrix[0])\n        dp = [[0] * (n + 1) for _ in range(m + 1)]\n        for i in range(1, m + 1):\n            for j in range(1, n + 1):\n                dp[i][j] = matrix[i - 1][j - 1] + dp[i][j - 1] + dp[i - 1][j] - dp[i - 1][j - 1]\n        return dp[row2 + 1][col2 + 1] - dp[row1][col2 + 1] - dp[row2 + 1][col1] + dp[row1][col1]"
    },
    {
        "number": 304,
        "title": "Range Sum Query 2D - Immutable",
        "difficulty": 1,
        "pass": 3,
        "answer": "        if not matrix or not matrix[0]:\n            return 0\n        m, n = len(matrix), len(matrix[0])\n        dp = [[0] * (n + 1) for _ in range(m + 1)]\n        for i in range(1, m + 1):\n            for j in range(1, n + 1):\n                dp[i][j] = dp[i - 1][j] + dp[i][j - 1] - dp[i - 1][j - 1] + matrix[i - 1][j - 1]\n        return dp[row2 + 1][col2 + 1]"
    },
    {
        "number": 304,
        "title": "Range Sum Query 2D - Immutable",
        "difficulty": 1,
        "pass": 4,
        "answer": "        if not matrix or not matrix[0]:\n            return 0\n        m, n = len(matrix), len(matrix[0])\n        dp = [[0] * (n + 1) for _ in range(m + 1)]\n        for i in range(1, m + 1):\n            for j in range(1, n + 1):\n                dp[i][j] = matrix[i - 1][j - 1] + dp[i - 1][j] + dp[i][j - 1] - dp[i - 1][j - 1]\n        return dp[row2 + 1][col2 + 1]"
    },
    {
        "number": 304,
        "title": "Range Sum Query 2D - Immutable",
        "difficulty": 1,
        "pass": 5,
        "answer": "        if not matrix:\n            return 0\n        rows = len(matrix)\n        cols = len(matrix[0])\n        dp = [[0] * (cols + 1) for _ in range(rows + 1)]\n        for i in range(1, rows + 1):\n            for j in range(1, cols + 1):\n                dp[i][j] = dp[i - 1][j] + dp[i][j - 1] - dp[i - 1][j - 1] + matrix[i - 1][j - 1]\n        return dp[row2 + 1][col2 + 1]"
    },
    {
        "number": 304,
        "title": "Range Sum Query 2D - Immutable",
        "difficulty": 1,
        "pass": 6,
        "answer": "        if not matrix:\n            return 0\n        m, n = len(matrix), len(matrix[0])\n        dp = [[0] * (n + 1) for _ in range(m + 1)]\n        for i in range(1, m + 1):\n            for j in range(1, n + 1):\n                dp[i][j] = dp[i - 1][j] + dp[i][j - 1] - dp[i - 1][j - 1] + matrix[i - 1][j - 1]\n        return dp[row2 + 1][col2 + 1]"
    },
    {
        "number": 304,
        "title": "Range Sum Query 2D - Immutable",
        "difficulty": 1,
        "pass": 7,
        "answer": "        if not matrix or not matrix[0]:\n            return 0\n        m, n = len(matrix), len(matrix[0])\n        dp = [[0] * (n + 1) for _ in range(m + 1)]\n        for i in range(1, m + 1):\n            for j in range(1, n + 1):\n                dp[i][j] = dp[i - 1][j] + dp[i][j - 1] - dp[i - 1][j - 1] + matrix[i - 1][j - 1]\n        return dp[row2 + 1][col2 + 1] - dp[row1][col2 + 1] - dp[row2 + 1][col1] + dp[row1][col1]"
    },
    {
        "number": 304,
        "title": "Range Sum Query 2D - Immutable",
        "difficulty": 1,
        "pass": 8,
        "answer": "        if not matrix:\n            return 0\n        rows = len(matrix)\n        cols = len(matrix[0])\n        dp = [[0] * (cols + 1) for _ in range(rows + 1)]\n        for i in range(1, rows + 1):\n            for j in range(1, cols + 1):\n                dp[i][j] = dp[i - 1][j] + dp[i][j - 1] - dp[i - 1][j - 1] + matrix[i - 1][j - 1]\n        return dp[row2 + 1][col2 + 1]"
    },
    {
        "number": 304,
        "title": "Range Sum Query 2D - Immutable",
        "difficulty": 1,
        "pass": 9,
        "answer": "        self.matrix = matrix"
    },
    {
        "number": 306,
        "title": "Additive Number",
        "difficulty": 1,
        "pass": 0,
        "answer": "        if len(num) < 3:\n            return False\n        for i in range(2, len(num)):\n            if num[i] == '0' and num[i - 1]!= '0':\n                return False\n        for i in range(2, len(num)):\n            if num[i] == '0' and num[i - 1] == '0':\n                return False\n        for i in range(3, len(num)):\n            if num[i] == '0' and num[i - 1]!= '0' and num[i - 2]!= '0':\n                return False\n        return True"
    },
    {
        "number": 306,
        "title": "Additive Number",
        "difficulty": 1,
        "pass": 1,
        "answer": "        if len(num) < 3:\n            return False\n        if num[0] == '0' or num[-1] == '0':\n            return False\n        for i in range(len(num) - 2):\n            if num[i] == '0' or num[i + 1] == '0' or num[i + 2] == '0':\n                return False\n            if num[i] + num[i + 1]!= num[i + 2]:\n                return False\n        return True"
    },
    {
        "number": 306,
        "title": "Additive Number",
        "difficulty": 1,
        "pass": 2,
        "answer": "        if len(num) < 3:\n            return False\n        if num[0] == '0' or num[-1] == '0':\n            return False\n        if num[0] == '0':\n            num = num[1:]\n        if num[-1] == '0':\n            num = num[:-1]\n        for i in range(1, len(num)):\n            if num[i] == '0' and num[i - 1]!= '0':\n                return False\n        if num[0] == '0':\n            num = num[1:]\n        if num[-1] == '0':\n            num = num[:-1]\n        for i in range(1, len(num)):\n            if num[i] == '0' and num[i - 1]!= '0':\n                return False\n        if num[0] == '0':\n            num = num[1:]\n        if num[-1] == '0':\n            num = num[:-1]\n        for i in range(1, len(num"
    },
    {
        "number": 306,
        "title": "Additive Number",
        "difficulty": 1,
        "pass": 3,
        "answer": "        if len(num) < 3:\n            return False\n        for i in range(2, len(num)):\n            if num[i] == '0' and num[i-1]!= '0':\n                return False\n        n = len(num)\n        for i in range(n-2):\n            for j in range(i+1, n-1):\n                if num[i] + num[j] == num[i+1] + num[j+1]:\n                    return True\n        return False"
    },
    {
        "number": 306,
        "title": "Additive Number",
        "difficulty": 1,
        "pass": 4,
        "answer": "        if len(num) < 3:\n            return False\n        for i in range(2, len(num)):\n            if num[i] == '0' and num[i-1]!= '0':\n                return False\n        nums = []\n        for i in range(len(num)):\n            if num[i]!= '0':\n                nums.append(int(num[i]))\n        if len(nums) < 3:\n            return False\n        for i in range(len(nums)-2):\n            if nums[i] + nums[i+1]!= nums[i+2]:\n                return False\n        return True"
    },
    {
        "number": 306,
        "title": "Additive Number",
        "difficulty": 1,
        "pass": 5,
        "answer": "        if len(num) < 3:\n            return False\n        for i in range(2, len(num)):\n            if num[i] == '0' and num[i-1]!= '0':\n                return False\n        for i in range(2, len(num)):\n            if num[i] == '0' and num[i-1] == '0':\n                return False\n        for i in range(3, len(num)):\n            if num[i] == '0' and num[i-1]!= '0' and num[i-2]!= '0':\n                return False\n        return True"
    },
    {
        "number": 306,
        "title": "Additive Number",
        "difficulty": 1,
        "pass": 6,
        "answer": "        if num == \"0\":\n            return False\n        n = len(num)\n        if n < 3:\n            return False\n        for i in range(n-2):\n            if num[i] == \"0\":\n                continue\n            for j in range(i+1, n-1):\n                if num[j] == \"0\":\n                    continue\n                for k in range(j+1, n):\n                    if num[k] == \"0\":\n                        continue\n                    if num[i] + num[j] + num[k] == num[i+1] + num[j+1] + num[k+1]:\n                        return True\n        return False"
    },
    {
        "number": 306,
        "title": "Additive Number",
        "difficulty": 1,
        "pass": 7,
        "answer": "        if len(num) < 3:\n            return False\n        for i in range(2, len(num)):\n            if num[i] == '0' and num[i-1]!= '0':\n                return False\n        for i in range(2, len(num)):\n            if num[i] == '0' and num[i-1] == '0':\n                return False\n        return self.helper(num)"
    },
    {
        "number": 306,
        "title": "Additive Number",
        "difficulty": 1,
        "pass": 8,
        "answer": "        if not num:\n            return False\n        if len(num) == 1:\n            return False\n        if len(num) == 2:\n            return num[0] == '0' or (num[0]!= '0' and num[1]!= '0')\n        if len(num) == 3:\n            return num[0] == '0' or (num[0]!= '0' and num[1]!= '0' and num[2]!= '0')\n        \n        dp = [[] for _ in range(len(num))]\n        dp[0].append(int(num[0]))\n        dp[1].append(int(num[0]) + int(num[1]))\n        dp[2].append(int(num[0]) + int(num[1]) + int(num[2]))\n        for i in range(3, len(num)):\n            for j in range(len(dp[i-2])):\n                dp[i].append(dp[i-2][j] + dp[i-1]["
    },
    {
        "number": 306,
        "title": "Additive Number",
        "difficulty": 1,
        "pass": 9,
        "answer": "        if len(num) < 3:\n            return False\n        for i in range(2, len(num)):\n            if num[i] == '0' or num[i-1] == '0' or num[i-2] == '0':\n                return False\n        for i in range(2, len(num)):\n            if num[i] == '0' or num[i-1] == '0' or num[i-2] == '0':\n                return False\n        for i in range(3, len(num)):\n            if num[i] == '0' or num[i-1] == '0' or num[i-2] == '0':\n                return False\n        return True"
    },
    {
        "number": 307,
        "title": "Range Sum Query - Mutable",
        "difficulty": 1,
        "pass": 0,
        "answer": "        self.nums = nums\n        self.sums = []\n        for i in range(len(self.nums)):\n            if i == 0:\n                self.sums.append(self.nums[i])\n            else:\n                self.sums.append(self.sums[i - 1] + self.nums[i])"
    },
    {
        "number": 307,
        "title": "Range Sum Query - Mutable",
        "difficulty": 1,
        "pass": 1,
        "answer": "        "
    },
    {
        "number": 307,
        "title": "Range Sum Query - Mutable",
        "difficulty": 1,
        "pass": 2,
        "answer": "        self.nums = nums\n        self.length = len(nums)"
    },
    {
        "number": 307,
        "title": "Range Sum Query - Mutable",
        "difficulty": 1,
        "pass": 3,
        "answer": "        "
    },
    {
        "number": 307,
        "title": "Range Sum Query - Mutable",
        "difficulty": 1,
        "pass": 4,
        "answer": "        self.nums = nums\n        "
    },
    {
        "number": 307,
        "title": "Range Sum Query - Mutable",
        "difficulty": 1,
        "pass": 5,
        "answer": "        "
    },
    {
        "number": 307,
        "title": "Range Sum Query - Mutable",
        "difficulty": 1,
        "pass": 6,
        "answer": "        self.nums = nums\n        self.sum = [0] * (len(nums) + 1)\n        for i in range(len(nums)):\n            self.sum[i + 1] = self.sum[i] + nums[i]"
    },
    {
        "number": 307,
        "title": "Range Sum Query - Mutable",
        "difficulty": 1,
        "pass": 7,
        "answer": "        "
    },
    {
        "number": 307,
        "title": "Range Sum Query - Mutable",
        "difficulty": 1,
        "pass": 8,
        "answer": "        self.nums = nums"
    },
    {
        "number": 307,
        "title": "Range Sum Query - Mutable",
        "difficulty": 1,
        "pass": 9,
        "answer": "        self.nums = nums"
    },
    {
        "number": 309,
        "title": "Best Time to Buy and Sell Stock with Cooldown",
        "difficulty": 1,
        "pass": 0,
        "answer": "        if not prices:\n            return 0\n        n = len(prices)\n        if n == 1:\n            return 0\n        dp = [[0] * 2 for _ in range(n)]\n        dp[0][0] = 0\n        dp[0][1] = -prices[0]\n        for i in range(1, n):\n            dp[i][0] = max(dp[i - 1][0], dp[i - 1][1] + prices[i])\n            dp[i][1] = max(dp[i - 1][1], dp[i - 1][0] - prices[i])\n        return dp[-1][0]"
    },
    {
        "number": 309,
        "title": "Best Time to Buy and Sell Stock with Cooldown",
        "difficulty": 1,
        "pass": 1,
        "answer": "        n = len(prices)\n        if n == 0:\n            return 0\n        dp = [[0] * 2 for _ in range(n)]\n        dp[0][0] = 0\n        dp[0][1] = -prices[0]\n        for i in range(1, n):\n            dp[i][0] = max(dp[i - 1][0], dp[i - 1][1] + prices[i])\n            dp[i][1] = max(dp[i - 1][1], dp[i - 1][0] - prices[i])\n        return dp[n - 1][0]"
    },
    {
        "number": 309,
        "title": "Best Time to Buy and Sell Stock with Cooldown",
        "difficulty": 1,
        "pass": 2,
        "answer": "        n = len(prices)\n        if n == 0:\n            return 0\n        if n == 1:\n            return 0\n        if n == 2:\n            return max(0, prices[1] - prices[0])\n        dp = [[0] * 3 for _ in range(n)]\n        dp[0][0] = 0\n        dp[0][1] = -prices[0]\n        dp[0][2] = 0\n        for i in range(1, n):\n            dp[i][0] = max(dp[i - 1][0], dp[i - 1][1] + prices[i])\n            dp[i][1] = max(dp[i - 1][1], dp[i - 1][2] - prices[i])\n            dp[i][2] = max(dp[i - 1][2], dp[i - 1][0] - prices[i])\n        return max(dp[n - 1][0], dp[n - 1][1], dp[n - 1][2])"
    },
    {
        "number": 309,
        "title": "Best Time to Buy and Sell Stock with Cooldown",
        "difficulty": 1,
        "pass": 3,
        "answer": "        if not prices:\n            return 0\n        n = len(prices)\n        dp_i_0, dp_i_1 = 0, -prices[0]\n        for i in range(1, n):\n            dp_i_0 = max(dp_i_0, dp_i_1 + prices[i])\n            dp_i_1 = max(dp_i_1, -prices[i])\n        return dp_i_0"
    },
    {
        "number": 309,
        "title": "Best Time to Buy and Sell Stock with Cooldown",
        "difficulty": 1,
        "pass": 4,
        "answer": "        n = len(prices)\n        if n == 0:\n            return 0\n        dp = [[0] * 2 for _ in range(n)]\n        dp[0][0] = 0\n        dp[0][1] = -prices[0]\n        for i in range(1, n):\n            dp[i][0] = max(dp[i - 1][0], dp[i - 1][1] + prices[i])\n            dp[i][1] = max(dp[i - 1][1], dp[i - 1][0] - prices[i])\n        return dp[n - 1][0]"
    },
    {
        "number": 309,
        "title": "Best Time to Buy and Sell Stock with Cooldown",
        "difficulty": 1,
        "pass": 5,
        "answer": "        if not prices:\n            return 0\n        n = len(prices)\n        if n == 1:\n            return 0\n        dp = [[0, 0] for _ in range(n)]\n        dp[0][0] = 0\n        dp[0][1] = -prices[0]\n        for i in range(1, n):\n            dp[i][0] = max(dp[i - 1][0], dp[i - 1][1] + prices[i])\n            dp[i][1] = max(dp[i - 1][1], dp[i - 1][0] - prices[i])\n        return dp[-1][0]"
    },
    {
        "number": 309,
        "title": "Best Time to Buy and Sell Stock with Cooldown",
        "difficulty": 1,
        "pass": 6,
        "answer": "        n = len(prices)\n        if n == 0:\n            return 0\n        dp_i_0 = 0\n        dp_i_1 = float('-inf')\n        for i in range(n):\n            dp_i_0 = max(dp_i_0, dp_i_1 + prices[i])\n            dp_i_1 = max(dp_i_1, -prices[i])\n        return dp_i_0"
    },
    {
        "number": 309,
        "title": "Best Time to Buy and Sell Stock with Cooldown",
        "difficulty": 1,
        "pass": 7,
        "answer": "        n = len(prices)\n        if n == 0:\n            return 0\n        if n == 1:\n            return 0\n        if n == 2:\n            return max(0, prices[1] - prices[0])\n        dp = [[0 for _ in range(3)] for _ in range(n)]\n        dp[0][0] = 0\n        dp[0][1] = -prices[0]\n        dp[0][2] = 0\n        for i in range(1, n):\n            dp[i][0] = max(dp[i - 1][0], dp[i - 1][2] + prices[i])\n            dp[i][1] = max(dp[i - 1][1], dp[i - 1][0] - prices[i])\n            dp[i][2] = max(dp[i - 1][2], dp[i - 1][1] + prices[i])\n        return max(dp[n - 1][0], dp[n - 1][1], dp[n - 1][2])\n"
    },
    {
        "number": 309,
        "title": "Best Time to Buy and Sell Stock with Cooldown",
        "difficulty": 1,
        "pass": 8,
        "answer": "        n = len(prices)\n        if n == 0:\n            return 0\n        if n == 1:\n            return 0 if prices[0] == 0 else prices[0]\n        if n == 2:\n            return max(0, prices[1] - prices[0])\n        dp = [[0] * 3 for _ in range(n)]\n        dp[0][0] = 0\n        dp[0][1] = -prices[0]\n        dp[0][2] = 0\n        for i in range(1, n):\n            dp[i][0] = max(dp[i - 1][0], dp[i - 1][1] + prices[i])\n            dp[i][1] = max(dp[i - 1][1], dp[i - 1][2] - prices[i])\n            dp[i][2] = max(dp[i - 1][2], dp[i - 1][0] - prices[i])\n        return max(dp[n - 1][0], dp[n - 1][1], dp"
    },
    {
        "number": 309,
        "title": "Best Time to Buy and Sell Stock with Cooldown",
        "difficulty": 1,
        "pass": 9,
        "answer": "        n = len(prices)\n        if n == 0:\n            return 0\n        dp_i_0 = 0\n        dp_i_1 = float('-inf')\n        for i in range(n):\n            dp_i_0 = max(dp_i_0, dp_i_1 + prices[i])\n            dp_i_1 = max(dp_i_1, -prices[i])\n        return dp_i_0"
    },
    {
        "number": 310,
        "title": "Minimum Height Trees",
        "difficulty": 1,
        "pass": 0,
        "answer": "        \n        graph = collections.defaultdict(list)\n        \n        for u, v in edges:\n            graph[u].append(v)\n            graph[v].append(u)\n            \n        leaves = []\n        for i in range(n):\n            if len(graph[i]) == 1:\n                leaves.append(i)\n        \n        while n > 2:\n            n -= len(leaves)\n            new_leaves = []\n            for leaf in leaves:\n                neighbor = graph[leaf].pop()\n                graph[neighbor].remove(leaf)\n                if len(graph[neighbor]) == 1:\n                    new_leaves.append(neighbor)\n            leaves = new_leaves\n            \n        return leaves"
    },
    {
        "number": 310,
        "title": "Minimum Height Trees",
        "difficulty": 1,
        "pass": 1,
        "answer": "        if n == 1:\n            return [0]\n        \n        graph = collections.defaultdict(list)\n        for u, v in edges:\n            graph[u].append(v)\n            graph[v].append(u)\n        \n        leaves = []\n        for i in range(n):\n            if len(graph[i]) == 1:\n                leaves.append(i)\n        \n        res = []\n        while n > 2:\n            n -= len(leaves)\n            new_leaves = []\n            for i in leaves:\n                j = graph[i][0]\n                graph[i].pop(0)\n                graph[j].remove(i)\n                if len(graph[j]) == 1:\n                    new_leaves.append(j)\n            leaves = new_leaves\n        \n        return leaves"
    },
    {
        "number": 310,
        "title": "Minimum Height Trees",
        "difficulty": 1,
        "pass": 2,
        "answer": "        \n        graph = collections.defaultdict(list)\n        \n        for u, v in edges:\n            graph[u].append(v)\n            graph[v].append(u)\n            \n        leaves = []\n        for i in range(n):\n            if len(graph[i]) == 1:\n                leaves.append(i)\n                \n        while n > 2:\n            n -= len(leaves)\n            new_leaves = []\n            for leaf in leaves:\n                neighbor = graph[leaf].pop()\n                graph[neighbor].remove(leaf)\n                if len(graph[neighbor]) == 1:\n                    new_leaves.append(neighbor)\n            leaves = new_leaves\n            \n        return leaves"
    },
    {
        "number": 310,
        "title": "Minimum Height Trees",
        "difficulty": 1,
        "pass": 3,
        "answer": "        if n == 1:\n            return [0]\n        \n        graph = collections.defaultdict(list)\n        for u, v in edges:\n            graph[u].append(v)\n            graph[v].append(u)\n        \n        leaves = []\n        for i in range(n):\n            if len(graph[i]) == 1:\n                leaves.append(i)\n        \n        while n > 2:\n            n -= len(leaves)\n            new_leaves = []\n            for leaf in leaves:\n                neighbor = graph[leaf].pop()\n                graph[neighbor].remove(leaf)\n                if len(graph[neighbor]) == 1:\n                    new_leaves.append(neighbor)\n            leaves = new_leaves\n        \n        return leaves\n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n"
    },
    {
        "number": 310,
        "title": "Minimum Height Trees",
        "difficulty": 1,
        "pass": 4,
        "answer": "        \n        if n == 1:\n            return [0]\n        \n        graph = collections.defaultdict(list)\n        \n        for u, v in edges:\n            graph[u].append(v)\n            graph[v].append(u)\n        \n        leaves = []\n        for i in range(n):\n            if len(graph[i]) == 1:\n                leaves.append(i)\n        \n        while n > 2:\n            n -= len(leaves)\n            new_leaves = []\n            for leaf in leaves:\n                u = graph[leaf].pop()\n                graph[u].remove(leaf)\n                if len(graph[u]) == 1:\n                    new_leaves.append(u)\n            leaves = new_leaves\n        \n        return leaves"
    },
    {
        "number": 310,
        "title": "Minimum Height Trees",
        "difficulty": 1,
        "pass": 5,
        "answer": "        if n == 1:\n            return [0]\n        \n        graph = collections.defaultdict(list)\n        for u, v in edges:\n            graph[u].append(v)\n            graph[v].append(u)\n        \n        leaves = []\n        for i in range(n):\n            if len(graph[i]) == 1:\n                leaves.append(i)\n        \n        while n > 2:\n            n -= len(leaves)\n            new_leaves = []\n            for leaf in leaves:\n                neighbor = graph[leaf].pop()\n                graph[neighbor].remove(leaf)\n                if len(graph[neighbor]) == 1:\n                    new_leaves.append(neighbor)\n            leaves = new_leaves\n        \n        return leaves"
    },
    {
        "number": 310,
        "title": "Minimum Height Trees",
        "difficulty": 1,
        "pass": 6,
        "answer": "        if n == 1:\n            return [0]\n        \n        graph = collections.defaultdict(list)\n        for u, v in edges:\n            graph[u].append(v)\n            graph[v].append(u)\n        \n        leaves = []\n        for node in graph:\n            if len(graph[node]) == 1:\n                leaves.append(node)\n        \n        while n > 2:\n            n -= len(leaves)\n            new_leaves = []\n            for leaf in leaves:\n                neighbor = graph[leaf].pop()\n                graph[neighbor].remove(leaf)\n                if len(graph[neighbor]) == 1:\n                    new_leaves.append(neighbor)\n            leaves = new_leaves\n        \n        return leaves"
    },
    {
        "number": 310,
        "title": "Minimum Height Trees",
        "difficulty": 1,
        "pass": 7,
        "answer": "        graph = collections.defaultdict(list)\n        for u, v in edges:\n            graph[u].append(v)\n            graph[v].append(u)\n        \n        leaves = []\n        for i in range(n):\n            if len(graph[i]) == 1:\n                leaves.append(i)\n        \n        while n > 2:\n            n -= len(leaves)\n            new_leaves = []\n            for leaf in leaves:\n                neighbor = graph[leaf].pop()\n                graph[neighbor].remove(leaf)\n                if len(graph[neighbor]) == 1:\n                    new_leaves.append(neighbor)\n            leaves = new_leaves\n        \n        return leaves"
    },
    {
        "number": 310,
        "title": "Minimum Height Trees",
        "difficulty": 1,
        "pass": 8,
        "answer": "        graph = collections.defaultdict(list)\n        for u, v in edges:\n            graph[u].append(v)\n            graph[v].append(u)"
    },
    {
        "number": 310,
        "title": "Minimum Height Trees",
        "difficulty": 1,
        "pass": 9,
        "answer": "        \n        def dfs(node):\n            if node in seen:\n                return seen[node]\n            \n            seen[node] = max(dfs(nei) for nei in graph[node]) + 1\n            return seen[node]\n        \n        graph = collections.defaultdict(list)\n        for a, b in edges:\n            graph[a].append(b)\n            graph[b].append(a)\n        \n        seen = {}\n        for node in range(n):\n            dfs(node)\n        \n        res = []\n        for node in range(n):\n            if node not in seen or seen[node] == 1:\n                res.append(node)\n        return res\n        \n        \n        \n        \n        \nclass Solution:\n    def findMinHeightTrees(self, n: int, edges: List[List[int]]) -> List[int]:\n        \"\"\"\n        A tree is an undirected graph in which any two vertices are connected by exactly one path. In other words, any connected graph without simple cycles is a tree.\n        "
    },
    {
        "number": 312,
        "title": "Burst Balloons",
        "difficulty": 2,
        "pass": 0,
        "answer": "        n = len(nums)\n        if n == 0:\n            return 0\n        if n == 1:\n            return nums[0]\n        dp = [[0] * n for _ in range(n)]\n        dp[0][0] = nums[0]\n        for i in range(1, n):\n            dp[i][i] = nums[i]\n        for i in range(n - 2, -1, -1):\n            for j in range(i + 1, n):\n                dp[i][j] = max(dp[i + 1][j], dp[i][j - 1]) + nums[i] * nums[j] * nums[j + 1]\n        return dp[0][n - 1]"
    },
    {
        "number": 312,
        "title": "Burst Balloons",
        "difficulty": 2,
        "pass": 1,
        "answer": "        n = len(nums)\n        if n == 0:\n            return 0\n        if n == 1:\n            return nums[0]\n        if n == 2:\n            return max(nums[0], nums[1])"
    },
    {
        "number": 312,
        "title": "Burst Balloons",
        "difficulty": 2,
        "pass": 2,
        "answer": "        nums = [1] + nums + [1]\n        n = len(nums)\n        dp = [[0] * n for _ in range(n)]"
    },
    {
        "number": 312,
        "title": "Burst Balloons",
        "difficulty": 2,
        "pass": 3,
        "answer": "        n = len(nums)\n        if n == 0:\n            return 0\n        if n == 1:\n            return nums[0]\n        if n == 2:\n            return max(nums[0], nums[1])\n        dp = [[0] * n for _ in range(n)]\n        dp[0][0] = nums[0]\n        dp[0][1] = nums[0]\n        dp[1][0] = nums[1]\n        dp[1][1] = nums[1]\n        for i in range(2, n):\n            dp[i][0] = max(dp[i - 1][0], dp[i - 1][1]) + nums[i]\n            dp[i][1] = max(dp[i - 1][1], dp[i - 2][0]) + nums[i]\n        return max(dp[n - 1][0], dp[n - 1][1])"
    },
    {
        "number": 312,
        "title": "Burst Balloons",
        "difficulty": 2,
        "pass": 4,
        "answer": "        nums = [1] + nums + [1]\n        n = len(nums)\n        dp = [[0] * n for _ in range(n)]\n        for length in range(2, n):\n            for i in range(n - length):\n                j = i + length\n                for k in range(i, j):\n                    dp[i][j] = max(dp[i][j], dp[i][k] + dp[k + 1][j] + nums[i] * nums[k + 1] * nums[j + 1])\n        return dp[0][n - 1]"
    },
    {
        "number": 312,
        "title": "Burst Balloons",
        "difficulty": 2,
        "pass": 5,
        "answer": "        nums = [1] + nums + [1]\n        n = len(nums)\n        dp = [[0] * n for _ in range(n)]\n        for i in range(n - 2, -1, -1):\n            for j in range(i + 1, n):\n                for k in range(i + 1, j):\n                    dp[i][j] = max(dp[i][j], nums[i] * nums[k] * nums[j] + dp[i][k] + dp[k][j])\n        return dp[0][n - 1]"
    },
    {
        "number": 312,
        "title": "Burst Balloons",
        "difficulty": 2,
        "pass": 6,
        "answer": "        nums = [1] + nums + [1]\n        n = len(nums)\n        dp = [[0] * n for _ in range(n)]\n        for length in range(2, n):\n            for i in range(n - length):\n                j = i + length\n                for k in range(i, j):\n                    dp[i][j] = max(dp[i][j], dp[i][k] + dp[k + 1][j] + nums[i] * nums[k + 1] * nums[j + 1])\n        return dp[0][n - 1]"
    },
    {
        "number": 312,
        "title": "Burst Balloons",
        "difficulty": 2,
        "pass": 7,
        "answer": "        nums = [1] + nums + [1]\n        n = len(nums)\n        dp = [[0] * n for _ in range(n)]\n        for i in range(n - 2, -1, -1):\n            for j in range(i + 1, n):\n                for k in range(i + 1, j):\n                    dp[i][j] = max(dp[i][j], nums[i] * nums[k] * nums[j] + dp[i][k] + dp[k][j])\n        return dp[0][n - 1]"
    },
    {
        "number": 312,
        "title": "Burst Balloons",
        "difficulty": 2,
        "pass": 8,
        "answer": "        nums = [1] + nums + [1]\n        n = len(nums)\n        dp = [[0] * n for _ in range(n)]\n        for i in range(n - 2, -1, -1):\n            for j in range(i + 1, n):\n                for k in range(i + 1, j):\n                    dp[i][j] = max(dp[i][j], dp[i][k] + dp[k][j] + nums[i] * nums[k] * nums[j])\n        return dp[0][n - 1]"
    },
    {
        "number": 312,
        "title": "Burst Balloons",
        "difficulty": 2,
        "pass": 9,
        "answer": "        n = len(nums)\n        if n == 0:\n            return 0\n        if n == 1:\n            return nums[0]\n        if n == 2:\n            return max(nums[0], nums[1])\n        dp = [[0] * n for _ in range(n)]\n        dp[0][0] = nums[0]\n        dp[0][1] = nums[0]\n        dp[1][0] = nums[1]\n        dp[1][1] = nums[1]\n        for i in range(2, n):\n            dp[i][i] = nums[i]\n        for i in range(n - 2, -1, -1):\n            for j in range(i + 1, n):\n                dp[i][j] = max(dp[i + 1][j], dp[i][j - 1]) + nums[i] * nums[j] * nums[j + 1]\n        return dp[0][n - 1]"
    },
    {
        "number": 313,
        "title": "Super Ugly Number",
        "difficulty": 1,
        "pass": 0,
        "answer": "        if n == 1:\n            return 1\n        ugly_nums = [1] * n\n        ugly_nums[0] = 1\n        ugly_nums[1] = 2\n        for i in range(2, n):\n            ugly_nums[i] = min(ugly_nums[j] * primes[j] for j in range(0, i))\n        return ugly_nums[-1]"
    },
    {
        "number": 313,
        "title": "Super Ugly Number",
        "difficulty": 1,
        "pass": 1,
        "answer": "        if n == 1:\n            return 1\n        if n == 2:\n            return 2\n        if n == 3:\n            return 3\n        if n == 4:\n            return 4\n        if n == 5:\n            return 5\n        if n == 6:\n            return 6\n        if n == 7:\n            return 7\n        if n == 8:\n            return 8\n        if n == 9:\n            return 9\n        if n == 10:\n            return 10\n        if n == 11:\n            return 11\n        if n == 12:\n            return 12\n        if n == 13:\n            return 13\n        if n == 14:\n            return 14\n        if n == 15:\n            return 15\n        if n == 16:\n            return 16\n        if n == 17:\n            return 17\n        if n == 18:\n            return 18\n        if n == 19:\n            return 19\n        if n == 20:\n            return 20\n        if n == 21:\n            return 21\n        if n == 22:\n            return 22\n        if n == 23:\n            "
    },
    {
        "number": 313,
        "title": "Super Ugly Number",
        "difficulty": 1,
        "pass": 2,
        "answer": "        if n == 1:\n            return 1\n        ugly = [0] * n\n        ugly[0] = 1\n        for i in range(1, n):\n            ugly[i] = min(ugly[j] * primes[j] for j in range(0, i))\n        return ugly[-1]"
    },
    {
        "number": 313,
        "title": "Super Ugly Number",
        "difficulty": 1,
        "pass": 3,
        "answer": "        if n == 1:\n            return 1\n        ugly_nums = [1] * n\n        ugly_nums[0] = 1\n        primes_set = set(primes)\n        for i in range(1, n):\n            ugly_nums[i] = min(primes_set, key=lambda x: ugly_nums[ugly_nums.index(x)])\n            primes_set.remove(ugly_nums[i])\n        return ugly_nums[-1]"
    },
    {
        "number": 313,
        "title": "Super Ugly Number",
        "difficulty": 1,
        "pass": 4,
        "answer": "        if n == 1:\n            return 1\n        ugly = [0] * n\n        ugly[0] = 1\n        i2, i3, i5 = 0, 0, 0\n        for i in range(1, n):\n            ugly[i] = min(ugly[i2] * 2, ugly[i3] * 3, ugly[i5] * 5)\n            if ugly[i] == ugly[i2] * 2:\n                i2 += 1\n            if ugly[i] == ugly[i3] * 3:\n                i3 += 1\n            if ugly[i] == ugly[i5] * 5:\n                i5 += 1\n        return ugly[-1]"
    },
    {
        "number": 313,
        "title": "Super Ugly Number",
        "difficulty": 1,
        "pass": 5,
        "answer": "        # if n == 1:\n        #     return 1\n        # if n == 2:\n        #     return 2\n        # if n == 3:\n        #     return 2\n        # if n == 4:\n        #     return 3\n        # if n == 5:\n        #     return 3\n        # if n == 6:\n        #     return 4\n        # if n == 7:\n        #     return 4\n        # if n == 8:\n        #     return 5\n        # if n == 9:\n        #     return 5\n        # if n == 10:\n        #     return 6\n        # if n == 11:\n        #     return 6\n        # if n == 12:\n        #     return 7\n        # if n == 13:\n        #     return 7\n        # if n == 14:\n        #     return 8\n        # if n == 15:\n        #     return 8\n        # if n == 16:\n        #     return 9\n        # if n == 17:\n        #     return 9\n        # if n == 18:\n        #     return"
    },
    {
        "number": 313,
        "title": "Super Ugly Number",
        "difficulty": 1,
        "pass": 6,
        "answer": "        if n == 1:\n            return 1\n        ugly = [0] * n\n        ugly[0] = 1\n        for i in range(1, n):\n            ugly[i] = min(ugly[j] * primes[j] for j in range(0, i))\n        return ugly[-1]"
    },
    {
        "number": 313,
        "title": "Super Ugly Number",
        "difficulty": 1,
        "pass": 7,
        "answer": "        if n == 1:\n            return 1\n        ugly = [0] * n\n        ugly[0] = 1\n        i2, i3, i5 = 0, 0, 0\n        for i in range(1, n):\n            ugly[i] = min(ugly[i2] * 2, ugly[i3] * 3, ugly[i5] * 5)\n            if ugly[i] == ugly[i2] * 2:\n                i2 += 1\n            if ugly[i] == ugly[i3] * 3:\n                i3 += 1\n            if ugly[i] == ugly[i5] * 5:\n                i5 += 1\n        return ugly[-1]\n"
    },
    {
        "number": 313,
        "title": "Super Ugly Number",
        "difficulty": 1,
        "pass": 8,
        "answer": "        # Time: O(n * log(n))\n        # Space: O(n)\n        if n == 1:\n            return 1\n        ugly = [0] * n\n        ugly[0] = 1\n        i2, i3, i5 = 0, 0, 0\n        for i in range(1, n):\n            ugly[i] = min(ugly[i2] * 2, ugly[i3] * 3, ugly[i5] * 5)\n            if ugly[i] == ugly[i2] * 2:\n                i2 += 1\n            if ugly[i] == ugly[i3] * 3:\n                i3 += 1\n            if ugly[i] == ugly[i5] * 5:\n                i5 += 1\n        return ugly[-1]"
    },
    {
        "number": 313,
        "title": "Super Ugly Number",
        "difficulty": 1,
        "pass": 9,
        "answer": "        if n == 1:\n            return 1\n        ugly = [0] * n\n        ugly[0] = 1\n        i2, i3, i5 = 0, 0, 0\n        for i in range(1, n):\n            ugly[i] = min(ugly[i2] * 2, ugly[i3] * 3, ugly[i5] * 5)\n            if ugly[i] == ugly[i2] * 2:\n                i2 += 1\n            if ugly[i] == ugly[i3] * 3:\n                i3 += 1\n            if ugly[i] == ugly[i5] * 5:\n                i5 += 1\n        return ugly[n - 1]"
    },
    {
        "number": 315,
        "title": "Count of Smaller Numbers After Self",
        "difficulty": 2,
        "pass": 0,
        "answer": "        if len(nums) == 0:\n            return []\n        if len(nums) == 1:\n            return [0]\n        if len(nums) == 2:\n            if nums[0] > nums[1]:\n                return [0, 1]\n            else:\n                return [1, 0]\n        \n        counts = [0] * len(nums)\n        stack = []\n        for i in range(len(nums)-1, -1, -1):\n            while len(stack) > 0 and nums[i] > stack[-1]:\n                stack.pop()\n            counts[i] = len(stack)\n            stack.append(nums[i])\n        \n        return counts"
    },
    {
        "number": 315,
        "title": "Count of Smaller Numbers After Self",
        "difficulty": 2,
        "pass": 1,
        "answer": "        n = len(nums)\n        counts = [0] * n\n        stack = []\n        for i in range(n - 1, -1, -1):\n            while stack and nums[stack[-1]] >= nums[i]:\n                stack.pop()\n            counts[i] = stack[-1] if stack else 0\n            stack.append(i)\n        return counts"
    },
    {
        "number": 315,
        "title": "Count of Smaller Numbers After Self",
        "difficulty": 2,
        "pass": 2,
        "answer": "        n = len(nums)\n        counts = [0] * n\n        stack = []\n        for i in range(n - 1, -1, -1):\n            while stack and nums[i] >= nums[stack[-1]]:\n                stack.pop()\n            counts[i] = stack[-1] if stack else n\n            stack.append(i)\n        return counts"
    },
    {
        "number": 315,
        "title": "Count of Smaller Numbers After Self",
        "difficulty": 2,
        "pass": 3,
        "answer": "        n = len(nums)\n        if n == 0:\n            return []\n        if n == 1:\n            return [0]\n        if n == 2:\n            if nums[0] <= nums[1]:\n                return [0, 1]\n            else:\n                return [1, 0]\n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n"
    },
    {
        "number": 315,
        "title": "Count of Smaller Numbers After Self",
        "difficulty": 2,
        "pass": 4,
        "answer": "        n = len(nums)\n        if n == 0:\n            return []\n        if n == 1:\n            return [0]\n        nums.sort()\n        counts = [0] * n\n        for i in range(n - 1, -1, -1):\n            counts[i] = 1\n            for j in range(i + 1, n):\n                if nums[j] < nums[i]:\n                    counts[i] += 1\n        return counts"
    },
    {
        "number": 315,
        "title": "Count of Smaller Numbers After Self",
        "difficulty": 2,
        "pass": 5,
        "answer": "        if not nums:\n            return []\n        \n        counts = [0] * len(nums)\n        stack = []\n        \n        for i in range(len(nums) - 1, -1, -1):\n            while stack and nums[i] > stack[-1]:\n                stack.pop()\n            counts[i] = len(stack)\n            stack.append(nums[i])\n        \n        return counts"
    },
    {
        "number": 315,
        "title": "Count of Smaller Numbers After Self",
        "difficulty": 2,
        "pass": 6,
        "answer": "        n = len(nums)\n        res = [0] * n\n        stack = []\n        for i in range(n - 1, -1, -1):\n            while stack and nums[i] >= nums[stack[-1]]:\n                stack.pop()\n            res[i] = stack[-1] if stack else n\n            stack.append(i)\n        return res"
    },
    {
        "number": 315,
        "title": "Count of Smaller Numbers After Self",
        "difficulty": 2,
        "pass": 7,
        "answer": "        if not nums:\n            return []\n        \n        n = len(nums)\n        counts = [0] * n\n        stack = []\n        \n        for i in range(n-1, -1, -1):\n            while stack and nums[i] >= nums[stack[-1]]:\n                stack.pop()\n            counts[i] = stack[-1] if stack else n\n            stack.append(i)\n        \n        return counts"
    },
    {
        "number": 315,
        "title": "Count of Smaller Numbers After Self",
        "difficulty": 2,
        "pass": 8,
        "answer": "        if len(nums) == 0:\n            return []\n        if len(nums) == 1:\n            return [0]\n        if len(nums) == 2:\n            if nums[0] > nums[1]:\n                return [1, 0]\n            else:\n                return [0, 1]\n        sorted_nums = sorted(nums)\n        counts = [0] * len(nums)\n        for i in range(len(nums) - 1, -1, -1):\n            counts[i] = 0\n            for j in range(i + 1, len(nums)):\n                if sorted_nums[j] < sorted_nums[i]:\n                    counts[i] += 1\n        return counts"
    },
    {
        "number": 315,
        "title": "Count of Smaller Numbers After Self",
        "difficulty": 2,
        "pass": 9,
        "answer": "        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n"
    },
    {
        "number": 316,
        "title": "Remove Duplicate Letters",
        "difficulty": 1,
        "pass": 0,
        "answer": "        if not s:\n            return s\n        \n        n = len(s)\n        stack = []\n        seen = set()\n        \n        for i in range(n):\n            if s[i] not in seen:\n                while stack and s[i] < stack[-1] and i < n:\n                    seen.remove(stack.pop())\n                stack.append(s[i])\n                seen.add(s[i])\n        \n        return ''.join(stack)"
    },
    {
        "number": 316,
        "title": "Remove Duplicate Letters",
        "difficulty": 1,
        "pass": 1,
        "answer": "        if not s:\n            return s\n        seen = set()\n        stack = []\n        for i in range(len(s)):\n            if s[i] not in seen:\n                while stack and s[i] < stack[-1] and i < len(s):\n                    seen.remove(stack.pop())\n                seen.add(s[i])\n                stack.append(s[i])\n        return ''.join(stack)"
    },
    {
        "number": 316,
        "title": "Remove Duplicate Letters",
        "difficulty": 1,
        "pass": 2,
        "answer": "        seen = set()\n        stack = []\n        for char in s:\n            if char not in seen:\n                while stack and char < stack[-1] and char in seen:\n                    seen.remove(stack.pop())\n                seen.add(char)\n                stack.append(char)\n        return \"\".join(stack)"
    },
    {
        "number": 316,
        "title": "Remove Duplicate Letters",
        "difficulty": 1,
        "pass": 3,
        "answer": "        if len(s) == 0:\n            return \"\"\n        \n        if len(s) == 1:\n            return s\n        \n        d = {}\n        for i in range(len(s)):\n            if s[i] not in d:\n                d[s[i]] = 1\n            else:\n                d[s[i]] += 1\n        \n        stack = []\n        for i in range(len(s)):\n            if s[i] not in stack:\n                while stack and stack[-1] > s[i] and d[stack[-1]] > 0:\n                    stack.pop()\n                stack.append(s[i])\n            d[s[i]] -= 1\n        \n        return \"\".join(stack)\n        \nclass Solution:\n    def removeDuplicateLetters(self, s: str) -> str:\n        \"\"\"\n        Given a string s, remove duplicate letters so that every letter appears once and only once. You must make sure your result is the smallest in lexicographical order among all possible results.\n        Example 1:\n        "
    },
    {
        "number": 316,
        "title": "Remove Duplicate Letters",
        "difficulty": 1,
        "pass": 4,
        "answer": "        if not s:\n            return s\n        \n        stack = []\n        seen = set()\n        \n        for i in range(len(s)):\n            if s[i] not in seen:\n                while stack and s[i] < stack[-1] and i < len(s):\n                    seen.remove(stack.pop())\n                seen.add(s[i])\n                stack.append(s[i])\n        \n        return \"\".join(stack)"
    },
    {
        "number": 316,
        "title": "Remove Duplicate Letters",
        "difficulty": 1,
        "pass": 5,
        "answer": "        d = {}\n        for c in s:\n            d[c] = d.get(c, 0) + 1\n        stack = []\n        for c in s:\n            d[c] -= 1\n            if c in stack:\n                continue\n            while stack and stack[-1] > c and d[stack[-1]] > 0:\n                d[stack.pop()] += 1\n            stack.append(c)\n        return \"\".join(stack)"
    },
    {
        "number": 316,
        "title": "Remove Duplicate Letters",
        "difficulty": 1,
        "pass": 6,
        "answer": "        if len(s) == 0:\n            return \"\"\n        if len(s) == 1:\n            return s\n        from collections import defaultdict\n        d = defaultdict(int)\n        for i in range(len(s)):\n            d[s[i]] += 1\n        stack = []\n        for i in range(len(s)):\n            if s[i] not in stack:\n                while stack and s[i] < stack[-1] and d[stack[-1]] > 0:\n                    stack.pop()\n                stack.append(s[i])\n            d[s[i]] -= 1\n        return \"\".join(stack)"
    },
    {
        "number": 316,
        "title": "Remove Duplicate Letters",
        "difficulty": 1,
        "pass": 7,
        "answer": "        \n        if not s:\n            return \"\"\n        \n        seen = set()\n        stack = []\n        \n        for i in range(len(s)):\n            if s[i] not in seen:\n                while stack and s[i] < stack[-1] and i < len(s):\n                    seen.remove(stack.pop())\n                seen.add(s[i])\n                stack.append(s[i])\n        \n        return \"\".join(stack)"
    },
    {
        "number": 316,
        "title": "Remove Duplicate Letters",
        "difficulty": 1,
        "pass": 8,
        "answer": "        if not s:\n            return \"\"\n        \n        seen = set()\n        stack = []\n        \n        for i in range(len(s)):\n            if s[i] not in seen:\n                while stack and s[i] < stack[-1] and i < len(s):\n                    seen.remove(stack.pop())\n                seen.add(s[i])\n                stack.append(s[i])\n                \n        return \"\".join(stack)"
    },
    {
        "number": 316,
        "title": "Remove Duplicate Letters",
        "difficulty": 1,
        "pass": 9,
        "answer": "        \n        \n        if len(s) == 0:\n            return \"\"\n        \n        if len(s) == 1:\n            return s\n        \n        seen = set()\n        stack = []\n        \n        for i in range(len(s)):\n            if s[i] not in seen:\n                while stack and s[i] < stack[-1] and i < len(s):\n                    seen.remove(stack.pop())\n                seen.add(s[i])\n                stack.append(s[i])\n                \n        return \"\".join(stack)\n        \n        \n        \n        \nclass Solution:\n    def removeDuplicateLetters(self, s: str) -> str:\n        \"\"\"\n        Given a string s, remove duplicate letters so that every letter appears once and only once. You must make sure your result is the smallest in lexicographical order among all possible results.\n        Example 1:\n        Input: s = \"bcabc\"\n        Output: \"abc\"\n        Example 2:\n        Input: s = \"cbacdcbc\"\n        Output:"
    },
    {
        "number": 318,
        "title": "Maximum Product of Word Lengths",
        "difficulty": 1,
        "pass": 0,
        "answer": "        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n"
    },
    {
        "number": 318,
        "title": "Maximum Product of Word Lengths",
        "difficulty": 1,
        "pass": 1,
        "answer": "        from collections import defaultdict\n        \n        d = defaultdict(int)\n        for word in words:\n            for c in word:\n                d[c] += 1\n        \n        res = 0\n        for i in range(len(words)):\n            for j in range(i + 1, len(words)):\n                if len(words[i]) * len(words[j]) == len(set(words[i]) & set(words[j])):\n                    res = max(res, len(words[i]) * len(words[j]))\n        \n        return res"
    },
    {
        "number": 318,
        "title": "Maximum Product of Word Lengths",
        "difficulty": 1,
        "pass": 2,
        "answer": "        n = len(words)\n        dp = [[0] * n for _ in range(n)]\n        for i in range(n):\n            for j in range(n):\n                if i == j:\n                    dp[i][j] = len(words[i])\n                else:\n                    for k in range(n):\n                        if words[i][k] == words[j][k]:\n                            dp[i][j] = max(dp[i][j], dp[i][k] + dp[k][j])\n                        else:\n                            dp[i][j] = max(dp[i][j], dp[i][k] + dp[k][j] + 1)\n        return max(dp[i][j] for i in range(n) for j in range(n) if i!= j)"
    },
    {
        "number": 318,
        "title": "Maximum Product of Word Lengths",
        "difficulty": 1,
        "pass": 3,
        "answer": "        res = 0\n        for i in range(len(words)):\n            for j in range(i + 1, len(words)):\n                if len(words[i]) * len(words[j]) == len(set(words[i]) & set(words[j])):\n                    res = max(res, len(words[i]) * len(words[j]))\n        return res"
    },
    {
        "number": 318,
        "title": "Maximum Product of Word Lengths",
        "difficulty": 1,
        "pass": 4,
        "answer": "        if not words:\n            return 0\n        words.sort(key=lambda x: len(x), reverse=True)\n        res = 0\n        for i in range(len(words) - 1):\n            for j in range(i + 1, len(words)):\n                if len(set(words[i]) & set(words[j])) == 0:\n                    res = max(res, len(words[i]) * len(words[j]))\n        return res"
    },
    {
        "number": 318,
        "title": "Maximum Product of Word Lengths",
        "difficulty": 1,
        "pass": 5,
        "answer": "        n = len(words)\n        if n == 0:\n            return 0\n        if n == 1:\n            return len(words[0])\n        \n        d = {}\n        for i in range(n):\n            for j in range(i + 1, n):\n                if len(words[i]) * len(words[j]) not in d:\n                    d[len(words[i]) * len(words[j])] = set()\n                d[len(words[i]) * len(words[j])].add(words[i])\n                d[len(words[i]) * len(words[j])].add(words[j])\n        \n        res = 0\n        for i in range(n):\n            for j in range(i + 1, n):\n                if len(words[i]) * len(words[j]) in d:\n                    if len(d[len(words[i]) * len(words[j])]) > 1:\n                        res = max(res, len(words[i]) * len(words[j]))\n        return res"
    },
    {
        "number": 318,
        "title": "Maximum Product of Word Lengths",
        "difficulty": 1,
        "pass": 6,
        "answer": "        n = len(words)\n        if n == 0:\n            return 0\n        if n == 1:\n            return len(words[0])\n        \n        dp = [[0] * n for _ in range(n)]\n        for i in range(n):\n            dp[i][i] = len(words[i])\n            for j in range(i + 1, n):\n                if words[i] == words[j]:\n                    dp[i][j] = dp[i + 1][j - 1] + 2\n                else:\n                    dp[i][j] = max(dp[i + 1][j], dp[i][j - 1])\n        \n        return max(dp[0]) * max(dp[-1])"
    },
    {
        "number": 318,
        "title": "Maximum Product of Word Lengths",
        "difficulty": 1,
        "pass": 7,
        "answer": "        \n        n = len(words)\n        dp = [[0] * n for _ in range(n)]\n        \n        for i in range(n):\n            for j in range(n):\n                if i == j:\n                    dp[i][j] = len(words[i])\n                else:\n                    dp[i][j] = len(words[i]) * len(words[j])\n                    for k in range(n):\n                        if words[i][k] == words[j][k]:\n                            dp[i][j] = max(dp[i][j], dp[i][k] + dp[k][j])\n        \n        return max(dp[i][j] for i in range(n) for j in range(n) if i!= j)"
    },
    {
        "number": 318,
        "title": "Maximum Product of Word Lengths",
        "difficulty": 1,
        "pass": 8,
        "answer": "        \n        def isCommon(word1, word2):\n            for i in range(len(word1)):\n                for j in range(len(word2)):\n                    if word1[i] == word2[j]:\n                        return True\n            return False\n        \n        words.sort(key=lambda x: len(x), reverse=True)\n        \n        res = 0\n        for i in range(len(words)):\n            for j in range(i+1, len(words)):\n                if not isCommon(words[i], words[j]):\n                    res = max(res, len(words[i]) * len(words[j]))\n        \n        return res"
    },
    {
        "number": 318,
        "title": "Maximum Product of Word Lengths",
        "difficulty": 1,
        "pass": 9,
        "answer": "        d = {}\n        for i in range(len(words)):\n            for j in range(i+1, len(words)):\n                if len(words[i]) * len(words[j]) in d:\n                    d[len(words[i]) * len(words[j])].append([words[i], words[j]])\n                else:\n                    d[len(words[i]) * len(words[j])] = [[words[i], words[j]]]\n        res = 0\n        for i in range(len(words)):\n            for j in range(i+1, len(words)):\n                if len(words[i]) * len(words[j]) in d:\n                    for pair in d[len(words[i]) * len(words[j])]:\n                        if words[i]!= pair[0] and words[j]!= pair[1]:\n                            res = max(res, len(words[i]) * len(words[j]))\n        return res"
    },
    {
        "number": 319,
        "title": "Bulb Switcher",
        "difficulty": 1,
        "pass": 0,
        "answer": "        if n == 0:\n            return 0\n        if n == 1:\n            return 1\n        if n == 2:\n            return 2\n        if n == 3:\n            return 3\n        if n == 4:\n            return 4\n        if n == 5:\n            return 5\n        if n == 6:\n            return 6\n        if n == 7:\n            return 7\n        if n == 8:\n            return 8\n        if n == 9:\n            return 9\n        if n == 10:\n            return 10\n        if n == 11:\n            return 11\n        if n == 12:\n            return 12\n        if n == 13:\n            return 13\n        if n == 14:\n            return 14\n        if n == 15:\n            return 15\n        if n == 16:\n            return 16\n        if n == 17:\n            return 17\n        if n == 18:\n            return 18\n        if n == 19:\n            return 19\n        if n == 20:\n            return 20\n        if n == 21:\n            return 21\n        if n == 22:\n            "
    },
    {
        "number": 319,
        "title": "Bulb Switcher",
        "difficulty": 1,
        "pass": 1,
        "answer": "        if n == 0:\n            return 0\n        if n == 1:\n            return 1\n        res = 1\n        for i in range(2, n + 1):\n            res = (res + 1) % i\n        return res"
    },
    {
        "number": 319,
        "title": "Bulb Switcher",
        "difficulty": 1,
        "pass": 2,
        "answer": "        if n == 0:\n            return 0\n        \n        if n == 1:\n            return 1\n        \n        res = 1\n        for i in range(1, n+1):\n            res = (res + 1) % i\n        \n        return res"
    },
    {
        "number": 319,
        "title": "Bulb Switcher",
        "difficulty": 1,
        "pass": 3,
        "answer": "        if n == 0:\n            return 0\n        if n == 1:\n            return 1\n        if n == 2:\n            return 1\n        if n == 3:\n            return 2\n        \n        res = 1\n        for i in range(3, n+1):\n            res = (res + 1) % i\n        return res"
    },
    {
        "number": 319,
        "title": "Bulb Switcher",
        "difficulty": 1,
        "pass": 4,
        "answer": "        if n == 0:\n            return 0\n        if n == 1:\n            return 1\n        if n == 2:\n            return 1\n        if n == 3:\n            return 2\n        return self.bulbSwitch(n-1) + self.bulbSwitch(n-2) + self.bulbSwitch(n-3)"
    },
    {
        "number": 319,
        "title": "Bulb Switcher",
        "difficulty": 1,
        "pass": 5,
        "answer": "        if n == 0:\n            return 0\n        if n == 1:\n            return 1\n        if n == 2:\n            return 1\n        if n == 3:\n            return 2\n        if n == 4:\n            return 2\n        if n == 5:\n            return 3\n        if n == 6:\n            return 3\n        if n == 7:\n            return 4\n        if n == 8:\n            return 4\n        if n == 9:\n            return 5\n        if n == 10:\n            return 5\n        if n == 11:\n            return 6\n        if n == 12:\n            return 6\n        if n == 13:\n            return 7\n        if n == 14:\n            return 7\n        if n == 15:\n            return 8\n        if n == 16:\n            return 8\n        if n == 17:\n            return 9\n        if n == 18:\n            return 9\n        if n == 19:\n            return 10\n        if n == 20:\n            return 10\n        if n == 21:\n            return 11\n        if n == 22:\n            "
    },
    {
        "number": 319,
        "title": "Bulb Switcher",
        "difficulty": 1,
        "pass": 6,
        "answer": "        if n == 0:\n            return 0\n        if n == 1:\n            return 1\n        if n == 2:\n            return 3\n        if n == 3:\n            return 4\n        if n == 4:\n            return 5\n        if n == 5:\n            return 6\n        if n == 6:\n            return 7\n        if n == 7:\n            return 8\n        if n == 8:\n            return 9\n        if n == 9:\n            return 10\n        if n == 10:\n            return 11\n        if n == 11:\n            return 12\n        if n == 12:\n            return 13\n        if n == 13:\n            return 14\n        if n == 14:\n            return 15\n        if n == 15:\n            return 16\n        if n == 16:\n            return 17\n        if n == 17:\n            return 18\n        if n == 18:\n            return 19\n        if n == 19:\n            return 20\n        if n == 20:\n            return 21\n        if n == 21:\n            return 22\n        if n == 22:\n            "
    },
    {
        "number": 319,
        "title": "Bulb Switcher",
        "difficulty": 1,
        "pass": 7,
        "answer": "        if n == 0:\n            return 0\n        if n == 1:\n            return 1\n        if n == 2:\n            return 2\n        res = 0\n        for i in range(1, n + 1):\n            res = (res + i) % i\n        return res + 1"
    },
    {
        "number": 319,
        "title": "Bulb Switcher",
        "difficulty": 1,
        "pass": 8,
        "answer": "        if n == 0:\n            return 0\n        if n == 1:\n            return 1\n        if n == 2:\n            return 1\n        if n == 3:\n            return 2\n        return 3"
    },
    {
        "number": 319,
        "title": "Bulb Switcher",
        "difficulty": 1,
        "pass": 9,
        "answer": "        if n == 0:\n            return 0\n        if n == 1:\n            return 1\n        if n == 2:\n            return 1\n        if n == 3:\n            return 2\n        if n == 4:\n            return 2\n        if n == 5:\n            return 3\n        if n == 6:\n            return 3\n        if n == 7:\n            return 4\n        if n == 8:\n            return 4\n        if n == 9:\n            return 5\n        if n == 10:\n            return 5\n        if n == 11:\n            return 6\n        if n == 12:\n            return 6\n        if n == 13:\n            return 7\n        if n == 14:\n            return 7\n        if n == 15:\n            return 8\n        if n == 16:\n            return 8\n        if n == 17:\n            return 9\n        if n == 18:\n            return 9\n        if n == 19:\n            return 10\n        if n == 20:\n            return 10\n        if n == 21:\n            return 11\n        if n == 22:\n            "
    },
    {
        "number": 321,
        "title": "Create Maximum Number",
        "difficulty": 2,
        "pass": 0,
        "answer": "        def get_max(nums1, nums2, k):\n            if not nums1 and not nums2:\n                return []\n            if not nums1:\n                return nums2[:k]\n            if not nums2:\n                return nums1[:k]\n            if k == 1:\n                if nums1[0] > nums2[0]:\n                    return [nums1[0]] + get_max(nums1[1:], nums2, k - 1)\n                else:\n                    return [nums2[0]] + get_max(nums1, nums2[1:], k - 1)\n            if k == 2:\n                if nums1[0] > nums2[0]:\n                    return [nums1[0], nums2[0]] + get_max(nums1[1:], nums2[1:], k - 2)\n                else:\n                    return [nums2[0], nums1[0]] + get_max(nums1[1:],"
    },
    {
        "number": 321,
        "title": "Create Maximum Number",
        "difficulty": 2,
        "pass": 1,
        "answer": "        if k > len(nums1) + len(nums2):\n            return []\n        if k == len(nums1) + len(nums2):\n            return nums1 + nums2\n        if k == len(nums1):\n            return nums2\n        if k == len(nums2):\n            return nums1\n        nums1.sort()\n        nums2.sort()\n        i = 0\n        j = 0\n        res = []\n        while i < len(nums1) and j < len(nums2):\n            if nums1[i] < nums2[j]:\n                res.append(nums1[i])\n                i += 1\n            else:\n                res.append(nums2[j])\n                j += 1\n            if len(res) == k:\n                return res\n        while i < len(nums1):\n            res.append(nums1[i])\n            i += 1\n            if len(res) == k:\n                return res\n        while j < len"
    },
    {
        "number": 321,
        "title": "Create Maximum Number",
        "difficulty": 2,
        "pass": 2,
        "answer": "        def merge(nums1, nums2):\n            n = len(nums1)\n            m = len(nums2)\n            i = j = 0\n            res = []\n            while i < n and j < m:\n                if nums1[i] < nums2[j]:\n                    res.append(nums1[i])\n                    i += 1\n                else:\n                    res.append(nums2[j])\n                    j += 1\n            while i < n:\n                res.append(nums1[i])\n                i += 1\n            while j < m:\n                res.append(nums2[j])\n                j += 1\n            return res\n        \n        def merge_sort(nums):\n            if len(nums) <= 1:\n                return nums\n            mid = len(nums) // 2\n            left = merge_sort(nums[:mid])\n            right = merge_sort(nums[mid:])\n            return merge(left, right)\n        \n        nums1 = merge_sort(n"
    },
    {
        "number": 321,
        "title": "Create Maximum Number",
        "difficulty": 2,
        "pass": 3,
        "answer": "        if k > max(len(nums1), len(nums2)):\n            return []\n        if k == max(len(nums1), len(nums2)):\n            return nums1 if len(nums1) > len(nums2) else nums2\n        if len(nums1) > len(nums2):\n            nums1, nums2 = nums2, nums1\n        nums1.sort()\n        nums2.sort()\n        res = []\n        for i in range(k):\n            if i < len(nums1):\n                res.append(nums1[i])\n            if i < len(nums2):\n                res.append(nums2[i])\n        return res"
    },
    {
        "number": 321,
        "title": "Create Maximum Number",
        "difficulty": 2,
        "pass": 4,
        "answer": "        nums1 = list(map(int, nums1))\n        nums2 = list(map(int, nums2))\n        n1 = len(nums1)\n        n2 = len(nums2)\n        if n1 > n2:\n            nums1, nums2, n1, n2 = nums2, nums1, n2, n1\n        if k > n1 + n2:\n            return []\n        nums1.sort()\n        nums2.sort()\n        res = []\n        for i in range(k):\n            if i < n1:\n                res.append(nums1[i])\n            if i < n2:\n                res.append(nums2[i])\n        return res"
    },
    {
        "number": 321,
        "title": "Create Maximum Number",
        "difficulty": 2,
        "pass": 5,
        "answer": "        # m = len(nums1)\n        # n = len(nums2)\n        # if m > n:\n        #     nums1, nums2, m, n = nums2, nums1, n, m\n        # if m == 0:\n        #     return nums2[:k]\n        # if n == 0:\n        #     return nums1[:k]\n        # dp = [[0] * (k + 1) for _ in range(m + 1)]\n        # for i in range(1, m + 1):\n        #     dp[i][0] = dp[i - 1][0] + nums1[i - 1]\n        # for j in range(1, n + 1):\n        #     dp[0][j] = dp[0][j - 1] + nums2[j - 1]\n        # for i in range(1, m + 1):\n        #     for j in range(1, n + 1):\n        #         dp[i][j] = max(dp["
    },
    {
        "number": 321,
        "title": "Create Maximum Number",
        "difficulty": 2,
        "pass": 6,
        "answer": "        \n        def merge(nums1, m, nums2, n):\n            i = m - 1\n            j = n - 1\n            k = m + n - 1\n            while i >= 0 and j >= 0:\n                if nums1[i] > nums2[j]:\n                    nums1[k] = nums1[i]\n                    i -= 1\n                else:\n                    nums1[k] = nums2[j]\n                    j -= 1\n                k -= 1\n            while i >= 0:\n                nums1[k] = nums1[i]\n                i -= 1\n                k -= 1\n            while j >= 0:\n                nums1[k] = nums2[j]\n                j -= 1\n                k -= 1\n            return nums1\n        \n        def merge_sort(nums):\n            if len(nums) <= 1:\n                return nums\n            mid = len(nums) // 2\n            left = merge_sort(nums[:mid])\n            right = merge_sort(nums"
    },
    {
        "number": 321,
        "title": "Create Maximum Number",
        "difficulty": 2,
        "pass": 7,
        "answer": "        if k > len(nums1) + len(nums2):\n            return []\n        \n        nums1.sort()\n        nums2.sort()\n        \n        res = []\n        i, j = 0, 0\n        while i < len(nums1) and j < len(nums2):\n            if nums1[i] < nums2[j]:\n                res.append(nums1[i])\n                i += 1\n            elif nums1[i] > nums2[j]:\n                res.append(nums2[j])\n                j += 1\n            else:\n                res.append(nums1[i])\n                res.append(nums2[j])\n                i += 1\n                j += 1\n                \n        while i < len(nums1):\n            res.append(nums1[i])\n            i += 1\n            \n        while j < len(nums2):\n            res.append(nums2[j])\n            j += 1\n            \n        return res[:k]"
    },
    {
        "number": 321,
        "title": "Create Maximum Number",
        "difficulty": 2,
        "pass": 8,
        "answer": "        if k == 0:\n            return []\n        if k > min(len(nums1), len(nums2)):\n            return []\n        if k > max(len(nums1), len(nums2)):\n            return nums1 if len(nums1) > len(nums2) else nums2\n        nums1, nums2 = sorted(nums1), sorted(nums2)\n        res = []\n        for i in range(k):\n            if i < len(nums1):\n                res.append(nums1[i])\n            if i < len(nums2):\n                res.append(nums2[i])\n        return res"
    },
    {
        "number": 321,
        "title": "Create Maximum Number",
        "difficulty": 2,
        "pass": 9,
        "answer": "        n = len(nums1)\n        m = len(nums2)\n        if k > n + m:\n            return []\n        nums1.sort()\n        nums2.sort()\n        res = []\n        for i in range(k):\n            if i < n:\n                res.append(nums1[i])\n            if i < m:\n                res.append(nums2[i])\n        return res"
    },
    {
        "number": 322,
        "title": "Coin Change",
        "difficulty": 1,
        "pass": 0,
        "answer": "        \n        if amount == 0:\n            return 0\n        \n        dp = [float('inf')] * (amount + 1)\n        dp[0] = 0\n        \n        for i in range(1, amount + 1):\n            for coin in coins:\n                if i >= coin:\n                    dp[i] = min(dp[i], dp[i - coin] + 1)\n        \n        if dp[amount] == float('inf'):\n            return -1\n        else:\n            return dp[amount]"
    },
    {
        "number": 322,
        "title": "Coin Change",
        "difficulty": 1,
        "pass": 1,
        "answer": "        dp = [float('inf')] * (amount + 1)\n        dp[0] = 0\n        for i in range(1, amount + 1):\n            for coin in coins:\n                if i >= coin:\n                    dp[i] = min(dp[i], dp[i - coin] + 1)\n        if dp[amount] == float('inf'):\n            return -1\n        return dp[amount]"
    },
    {
        "number": 322,
        "title": "Coin Change",
        "difficulty": 1,
        "pass": 2,
        "answer": "        dp = [float('inf')] * (amount + 1)\n        dp[0] = 0\n        for i in range(1, amount + 1):\n            for coin in coins:\n                if i >= coin:\n                    dp[i] = min(dp[i], dp[i - coin] + 1)\n        if dp[amount] == float('inf'):\n            return -1\n        return dp[amount]"
    },
    {
        "number": 322,
        "title": "Coin Change",
        "difficulty": 1,
        "pass": 3,
        "answer": "        if amount == 0:\n            return 0\n        if amount < 0:\n            return -1\n        if len(coins) == 0:\n            return -1\n        dp = [-1] * (amount + 1)\n        dp[0] = 0\n        for i in range(1, amount + 1):\n            for j in range(len(coins)):\n                if i >= coins[j]:\n                    dp[i] = min(dp[i], dp[i - coins[j]] + 1)\n        return dp[-1] if dp[-1]!= -1 else -1"
    },
    {
        "number": 322,
        "title": "Coin Change",
        "difficulty": 1,
        "pass": 4,
        "answer": "        if amount == 0:\n            return 0\n        dp = [float('inf')] * (amount + 1)\n        dp[0] = 0\n        for i in range(1, amount + 1):\n            for coin in coins:\n                if i >= coin:\n                    dp[i] = min(dp[i], dp[i - coin] + 1)\n        if dp[amount] == float('inf'):\n            return -1\n        else:\n            return dp[amount]"
    },
    {
        "number": 322,
        "title": "Coin Change",
        "difficulty": 1,
        "pass": 5,
        "answer": "        if amount == 0:\n            return 0\n        if amount < 0:\n            return -1\n        dp = [float('inf')] * (amount + 1)\n        dp[0] = 0\n        for i in range(1, amount + 1):\n            for coin in coins:\n                if i - coin >= 0:\n                    dp[i] = min(dp[i], dp[i - coin] + 1)\n        return dp[-1] if dp[-1]!= float('inf') else -1\n"
    },
    {
        "number": 322,
        "title": "Coin Change",
        "difficulty": 1,
        "pass": 6,
        "answer": "        if amount == 0:\n            return 0\n        dp = [amount + 1] * (amount + 1)\n        dp[0] = 0\n        for i in range(1, amount + 1):\n            for j in range(len(coins)):\n                if i >= coins[j]:\n                    dp[i] = min(dp[i], dp[i - coins[j]] + 1)\n        if dp[-1] == amount + 1:\n            return -1\n        return dp[-1]"
    },
    {
        "number": 322,
        "title": "Coin Change",
        "difficulty": 1,
        "pass": 7,
        "answer": "        if amount == 0:\n            return 0\n        dp = [float('inf')] * (amount + 1)\n        dp[0] = 0\n        for i in range(1, amount + 1):\n            for coin in coins:\n                if i >= coin:\n                    dp[i] = min(dp[i], dp[i - coin] + 1)\n        if dp[-1] == float('inf'):\n            return -1\n        return dp[-1]"
    },
    {
        "number": 322,
        "title": "Coin Change",
        "difficulty": 1,
        "pass": 8,
        "answer": "        if amount == 0:\n            return 0\n        if len(coins) == 0:\n            return -1\n        if len(coins) == 1:\n            return 1 if amount == coins[0] else -1\n        if len(coins) == 2:\n            if amount == 1:\n                return 1\n            if amount == 2:\n                return 2\n            if amount == 3:\n                return 3\n            if amount == 4:\n                return 4\n            if amount == 5:\n                return 5\n            if amount == 6:\n                return 6\n            if amount == 7:\n                return 7\n            if amount == 8:\n                return 8\n            if amount == 9:\n                return 9\n            if amount == 10:\n                return 10\n            if amount == 11:\n                return 11\n            if amount == 12:\n                return 12\n            if amount == 13:\n                return 13\n            if amount == 14:\n                return 14\n            if amount == 15:\n                return 15\n            if amount == 16:\n                return 16\n            if amount == 17:\n                return 17\n            if amount"
    },
    {
        "number": 322,
        "title": "Coin Change",
        "difficulty": 1,
        "pass": 9,
        "answer": "        dp = [float('inf')] * (amount + 1)\n        dp[0] = 0\n        for i in range(1, amount + 1):\n            for coin in coins:\n                if i >= coin:\n                    dp[i] = min(dp[i], dp[i - coin] + 1)\n        if dp[amount] == float('inf'):\n            return -1\n        return dp[amount]"
    },
    {
        "number": 324,
        "title": "Wiggle Sort II",
        "difficulty": 1,
        "pass": 0,
        "answer": "        nums.sort()\n        for i in range(1, len(nums), 2):\n            nums[i-1], nums[i] = nums[i], nums[i-1]"
    },
    {
        "number": 324,
        "title": "Wiggle Sort II",
        "difficulty": 1,
        "pass": 1,
        "answer": "        nums.sort()\n        n = len(nums)\n        for i in range(0, n, 2):\n            nums[i], nums[i + 1] = nums[i + 1], nums[i]"
    },
    {
        "number": 324,
        "title": "Wiggle Sort II",
        "difficulty": 1,
        "pass": 2,
        "answer": "        nums.sort()\n        for i in range(1, len(nums), 2):\n            nums[i], nums[i - 1] = nums[i - 1], nums[i]"
    },
    {
        "number": 324,
        "title": "Wiggle Sort II",
        "difficulty": 1,
        "pass": 3,
        "answer": "        nums.sort()\n        for i in range(1, len(nums), 2):\n            nums[i], nums[i - 1] = nums[i - 1], nums[i]"
    },
    {
        "number": 324,
        "title": "Wiggle Sort II",
        "difficulty": 1,
        "pass": 4,
        "answer": "        nums.sort()\n        n = len(nums)\n        for i in range(0, n, 2):\n            nums[i], nums[i + 1] = nums[i + 1], nums[i]"
    },
    {
        "number": 324,
        "title": "Wiggle Sort II",
        "difficulty": 1,
        "pass": 5,
        "answer": "        nums.sort()\n        nums[::2], nums[1::2] = nums[:len(nums)//2], nums[len(nums)//2:]"
    },
    {
        "number": 324,
        "title": "Wiggle Sort II",
        "difficulty": 1,
        "pass": 6,
        "answer": "        nums.sort()\n        nums[::2], nums[1::2] = nums[::2][::-1], nums[1::2][::-1]"
    },
    {
        "number": 324,
        "title": "Wiggle Sort II",
        "difficulty": 1,
        "pass": 7,
        "answer": "        nums.sort()\n        nums[::2], nums[1::2] = nums[:len(nums)//2], nums[len(nums)//2:]"
    },
    {
        "number": 324,
        "title": "Wiggle Sort II",
        "difficulty": 1,
        "pass": 8,
        "answer": "        nums.sort()\n        nums[::2], nums[1::2] = nums[:len(nums)//2], nums[len(nums)//2:]"
    },
    {
        "number": 324,
        "title": "Wiggle Sort II",
        "difficulty": 1,
        "pass": 9,
        "answer": "        nums.sort()\n        nums[::2], nums[1::2] = nums[:len(nums)//2], nums[len(nums)//2:]"
    },
    {
        "number": 326,
        "title": "Power of Three",
        "difficulty": 0,
        "pass": 0,
        "answer": "        if n <= 0:\n            return False\n        while n % 3 == 0:\n            n /= 3\n        return n == 1"
    },
    {
        "number": 326,
        "title": "Power of Three",
        "difficulty": 0,
        "pass": 1,
        "answer": "        if n == 0:\n            return False\n        while n % 3 == 0:\n            n = n // 3\n        return n == 1"
    },
    {
        "number": 326,
        "title": "Power of Three",
        "difficulty": 0,
        "pass": 2,
        "answer": "        if n == 0:\n            return False\n        while n > 1:\n            if n % 3!= 0:\n                return False\n            n = n // 3\n        return True"
    },
    {
        "number": 326,
        "title": "Power of Three",
        "difficulty": 0,
        "pass": 3,
        "answer": "        if n == 0:\n            return False\n        while n % 3 == 0:\n            n = n // 3\n        return n == 1"
    },
    {
        "number": 326,
        "title": "Power of Three",
        "difficulty": 0,
        "pass": 4,
        "answer": "        if n <= 0:\n            return False\n        while n % 3 == 0:\n            n /= 3\n        return n == 1"
    },
    {
        "number": 326,
        "title": "Power of Three",
        "difficulty": 0,
        "pass": 5,
        "answer": "        if n <= 0:\n            return False\n        while n % 3 == 0:\n            n /= 3\n        return n == 1"
    },
    {
        "number": 326,
        "title": "Power of Three",
        "difficulty": 0,
        "pass": 6,
        "answer": "        if n == 0:\n            return False\n        while n % 3 == 0:\n            n = n // 3\n        return n == 1"
    },
    {
        "number": 326,
        "title": "Power of Three",
        "difficulty": 0,
        "pass": 7,
        "answer": "        if n <= 0:\n            return False\n        while n % 3 == 0:\n            n /= 3\n        return n == 1"
    },
    {
        "number": 326,
        "title": "Power of Three",
        "difficulty": 0,
        "pass": 8,
        "answer": "        if n <= 0:\n            return False\n        while n % 3 == 0:\n            n /= 3\n        return n == 1"
    },
    {
        "number": 326,
        "title": "Power of Three",
        "difficulty": 0,
        "pass": 9,
        "answer": "        if n <= 0:\n            return False\n        while n % 3 == 0:\n            n /= 3\n        return n == 1"
    },
    {
        "number": 327,
        "title": "Count of Range Sum",
        "difficulty": 2,
        "pass": 0,
        "answer": "        if len(nums) == 0:\n            return 0\n        if len(nums) == 1:\n            if nums[0] >= lower and nums[0] <= upper:\n                return 1\n            else:\n                return 0\n        n = len(nums)\n        if n == 1:\n            if nums[0] >= lower and nums[0] <= upper:\n                return 1\n            else:\n                return 0\n        if n == 2:\n            if nums[0] >= lower and nums[0] <= upper:\n                if nums[1] >= lower and nums[1] <= upper:\n                    return 1\n                else:\n                    return 0\n            else:\n                return 0\n        if n == 3:\n            if nums[0] >= lower and nums[0] <= upper:\n                if nums[1] >= lower and nums[1] <= upper:\n                    if nums[2] >= lower and nums[2] <= upper:\n                        return 1\n                    else:\n                        return 0\n                else:\n                    "
    },
    {
        "number": 327,
        "title": "Count of Range Sum",
        "difficulty": 2,
        "pass": 1,
        "answer": "        if len(nums) == 0:\n            return 0\n        if len(nums) == 1:\n            if nums[0] >= lower and nums[0] <= upper:\n                return 1\n            else:\n                return 0\n        if len(nums) == 2:\n            if nums[0] >= lower and nums[0] <= upper:\n                if nums[1] >= lower and nums[1] <= upper:\n                    return 1\n                else:\n                    return 0\n            else:\n                if nums[1] >= lower and nums[1] <= upper:\n                    return 1\n                else:\n                    return 0\n        if len(nums) == 3:\n            if nums[0] >= lower and nums[0] <= upper:\n                if nums[1] >= lower and nums[1] <= upper:\n                    if nums[2] >= lower and nums[2] <= upper:\n                        return 1\n                    else:\n                        return 0\n                else:\n                    if nums[2] >= lower and nums["
    },
    {
        "number": 327,
        "title": "Count of Range Sum",
        "difficulty": 2,
        "pass": 2,
        "answer": "        n = len(nums)\n        if n == 0:\n            return 0\n        if n == 1:\n            if nums[0] < lower or nums[0] > upper:\n                return 0\n            if nums[0] == lower:\n                return 1\n            elif nums[0] == upper:\n                return 1\n            else:\n                return 0\n        if nums[0] < lower or nums[0] > upper:\n            return 0\n        if nums[0] == lower:\n            return 1\n        elif nums[0] == upper:\n            return 1\n        else:\n            return 0"
    },
    {
        "number": 327,
        "title": "Count of Range Sum",
        "difficulty": 2,
        "pass": 3,
        "answer": "        if not nums:\n            return 0\n        n = len(nums)\n        prefix_sum = [0] * (n + 1)\n        for i in range(1, n + 1):\n            prefix_sum[i] = prefix_sum[i - 1] + nums[i - 1]\n        count = 0\n        for i in range(n + 1):\n            for j in range(i, n + 1):\n                if lower <= prefix_sum[j] - prefix_sum[i - 1] <= upper:\n                    count += 1\n        return count"
    },
    {
        "number": 327,
        "title": "Count of Range Sum",
        "difficulty": 2,
        "pass": 4,
        "answer": "        if len(nums) == 0:\n            return 0\n        if len(nums) == 1:\n            if nums[0] >= lower and nums[0] <= upper:\n                return 1\n            else:\n                return 0\n        if len(nums) == 2:\n            if nums[0] >= lower and nums[0] <= upper:\n                if nums[1] >= lower and nums[1] <= upper:\n                    return 1\n                else:\n                    return 0\n            else:\n                if nums[1] >= lower and nums[1] <= upper:\n                    return 1\n                else:\n                    return 0\n        if len(nums) == 3:\n            if nums[0] >= lower and nums[0] <= upper:\n                if nums[1] >= lower and nums[1] <= upper:\n                    if nums[2] >= lower and nums[2] <= upper:\n                        return 1\n                    else:\n                        return 0\n                else:\n                    if nums[2] >= lower and nums["
    },
    {
        "number": 327,
        "title": "Count of Range Sum",
        "difficulty": 2,
        "pass": 5,
        "answer": "        if not nums:\n            return 0\n        if len(nums) == 1:\n            if nums[0] >= lower and nums[0] <= upper:\n                return 1\n            else:\n                return 0\n        if len(nums) == 2:\n            if nums[0] >= lower and nums[0] <= upper:\n                if nums[1] >= lower and nums[1] <= upper:\n                    return 1\n                else:\n                    return 0\n            else:\n                return 0\n        if len(nums) == 3:\n            if nums[0] >= lower and nums[0] <= upper:\n                if nums[1] >= lower and nums[1] <= upper:\n                    if nums[2] >= lower and nums[2] <= upper:\n                        return 1\n                    else:\n                        return 0\n                else:\n                    return 0\n            else:\n                return 0\n        if len(nums) == 4:\n            if nums[0] >= lower and nums[0] <= upper:\n                if"
    },
    {
        "number": 327,
        "title": "Count of Range Sum",
        "difficulty": 2,
        "pass": 6,
        "answer": "        if len(nums) == 0:\n            return 0\n        if len(nums) == 1:\n            if nums[0] >= lower and nums[0] <= upper:\n                return 1\n            else:\n                return 0\n        if len(nums) == 2:\n            if nums[0] >= lower and nums[0] <= upper:\n                if nums[1] >= lower and nums[1] <= upper:\n                    return 1\n                else:\n                    return 0\n            else:\n                if nums[1] >= lower and nums[1] <= upper:\n                    return 1\n                else:\n                    return 0\n        if len(nums) == 3:\n            if nums[0] >= lower and nums[0] <= upper:\n                if nums[1] >= lower and nums[1] <= upper:\n                    if nums[2] >= lower and nums[2] <= upper:\n                        return 1\n                    else:\n                        return 0\n                else:\n                    if nums[2] >= lower and nums["
    },
    {
        "number": 327,
        "title": "Count of Range Sum",
        "difficulty": 2,
        "pass": 7,
        "answer": "        if not nums:\n            return 0\n        \n        if lower == upper:\n            return 1 if nums[0] == lower else 0\n        \n        prefix_sum = [0]\n        for num in nums:\n            prefix_sum.append(prefix_sum[-1] + num)\n        \n        count = 0\n        for i in range(len(prefix_sum)):\n            for j in range(i + 1, len(prefix_sum)):\n                if lower <= prefix_sum[j] - prefix_sum[i] <= upper:\n                    count += 1\n        \n        return count\n        "
    },
    {
        "number": 327,
        "title": "Count of Range Sum",
        "difficulty": 2,
        "pass": 8,
        "answer": "        \n        if len(nums) == 0:\n            return 0\n        \n        if len(nums) == 1:\n            if nums[0] >= lower and nums[0] <= upper:\n                return 1\n            else:\n                return 0\n        \n        sums = []\n        \n        sums.append(nums[0])\n        \n        for i in range(1, len(nums)):\n            sums.append(sums[i-1] + nums[i])\n        \n        res = 0\n        \n        for i in range(len(sums)):\n            if sums[i] >= lower and sums[i] <= upper:\n                res += 1\n        \n        return res"
    },
    {
        "number": 327,
        "title": "Count of Range Sum",
        "difficulty": 2,
        "pass": 9,
        "answer": "        \n        if not nums:\n            return 0\n        \n        n = len(nums)\n        \n        if n == 1:\n            if nums[0] >= lower and nums[0] <= upper:\n                return 1\n            else:\n                return 0\n        \n        if n == 2:\n            if nums[0] <= lower and nums[1] <= upper:\n                return 1\n            else:\n                return 0\n        \n        if n == 3:\n            if nums[0] <= lower and nums[1] <= upper:\n                return 1\n            elif nums[0] >= lower and nums[1] >= upper:\n                return 1\n            elif nums[0] >= lower and nums[2] <= upper:\n                return 1\n            elif nums[0] <= lower and nums[2] >= upper:\n                return 1\n            else:\n                return 0\n        \n        if n == 4:\n            if nums[0] <= lower and nums[1] <= upper:\n                return 1\n            el"
    },
    {
        "number": 328,
        "title": "Odd Even Linked List",
        "difficulty": 1,
        "pass": 0,
        "answer": "        if not head:\n            return head\n        odd = head\n        even = head.next\n        even_head = even\n        while even and even.next:\n            odd.next = even.next\n            odd = odd.next\n            even.next = odd.next\n            even = even.next\n        odd.next = even_head\n        return head"
    },
    {
        "number": 328,
        "title": "Odd Even Linked List",
        "difficulty": 1,
        "pass": 1,
        "answer": "        if not head:\n            return head\n        \n        odd = head\n        even = head.next\n        even_head = even\n        \n        while even and even.next:\n            odd.next = even.next\n            odd = odd.next\n            even.next = odd.next\n            even = even.next\n        \n        odd.next = even_head\n        \n        return head"
    },
    {
        "number": 328,
        "title": "Odd Even Linked List",
        "difficulty": 1,
        "pass": 2,
        "answer": "        if not head:\n            return head\n        \n        odd = head\n        even = head.next\n        even_head = even\n        \n        while even and even.next:\n            odd.next = even.next\n            odd = odd.next\n            even.next = odd.next\n            even = even.next\n            \n        odd.next = even_head\n        \n        return head\n        \n# Time: O(n)\n# Space: O(1)"
    },
    {
        "number": 328,
        "title": "Odd Even Linked List",
        "difficulty": 1,
        "pass": 3,
        "answer": "        if not head:\n            return head\n        \n        odd = head\n        even = head.next\n        even_head = even\n        \n        while even and even.next:\n            odd.next = even.next\n            odd = odd.next\n            even.next = odd.next\n            even = even.next\n        \n        odd.next = even_head\n        \n        return head"
    },
    {
        "number": 328,
        "title": "Odd Even Linked List",
        "difficulty": 1,
        "pass": 4,
        "answer": "        if not head:\n            return head\n        \n        odd = head\n        even = head.next\n        even_head = even\n        \n        while even and even.next:\n            odd.next = even.next\n            odd = odd.next\n            even.next = odd.next\n            even = even.next\n        \n        odd.next = even_head\n        return head\n        "
    },
    {
        "number": 328,
        "title": "Odd Even Linked List",
        "difficulty": 1,
        "pass": 5,
        "answer": "        if not head:\n            return None\n        \n        odd = head\n        even = head.next\n        even_head = even\n        \n        while even and even.next:\n            odd.next = even.next\n            odd = odd.next\n            even.next = odd.next\n            even = even.next\n            \n        odd.next = even_head\n        \n        return head"
    },
    {
        "number": 328,
        "title": "Odd Even Linked List",
        "difficulty": 1,
        "pass": 6,
        "answer": "        if not head:\n            return head\n        odd = head\n        even = head.next\n        even_head = even\n        while even and even.next:\n            odd.next = even.next\n            odd = odd.next\n            even.next = odd.next\n            even = even.next\n        odd.next = even_head\n        return head"
    },
    {
        "number": 328,
        "title": "Odd Even Linked List",
        "difficulty": 1,
        "pass": 7,
        "answer": "        if not head:\n            return head\n        odd = head\n        even = head.next\n        even_head = even\n        while even and even.next:\n            odd.next = even.next\n            odd = odd.next\n            even.next = odd.next\n            even = even.next\n        odd.next = even_head\n        return head"
    },
    {
        "number": 328,
        "title": "Odd Even Linked List",
        "difficulty": 1,
        "pass": 8,
        "answer": "        if not head:\n            return head\n        odd = head\n        even = head.next\n        even_head = even\n        while even and even.next:\n            odd.next = even.next\n            odd = odd.next\n            even.next = odd.next\n            even = even.next\n        odd.next = even_head\n        return head"
    },
    {
        "number": 328,
        "title": "Odd Even Linked List",
        "difficulty": 1,
        "pass": 9,
        "answer": "        if not head:\n            return head\n        odd = head\n        even = head.next\n        even_head = even\n        while even and even.next:\n            odd.next = odd.next.next\n            odd = odd.next\n            even.next = even.next.next\n            even = even.next\n        odd.next = even_head\n        return head"
    },
    {
        "number": 329,
        "title": "Longest Increasing Path in a Matrix",
        "difficulty": 2,
        "pass": 0,
        "answer": "        if not matrix:\n            return 0\n        \n        rows = len(matrix)\n        cols = len(matrix[0])\n        \n        dp = [[0] * cols for _ in range(rows)]\n        \n        for i in range(rows):\n            for j in range(cols):\n                if i == 0 or j == 0:\n                    dp[i][j] = 1\n                elif matrix[i][j] > matrix[i-1][j] and matrix[i][j] > matrix[i][j-1] and matrix[i][j] > matrix[i-1][j-1]:\n                    dp[i][j] = dp[i-1][j] + 1\n                else:\n                    dp[i][j] = max(dp[i-1][j], dp[i][j-1], dp[i-1][j-1])\n        \n        return max(max(row) for row in dp)\n        \nclass Solution:\n    def longestIncreasingPath(self, matrix: List[List[int]]"
    },
    {
        "number": 329,
        "title": "Longest Increasing Path in a Matrix",
        "difficulty": 2,
        "pass": 1,
        "answer": "        if not matrix:\n            return 0\n        m = len(matrix)\n        n = len(matrix[0])\n        dp = [[0] * n for _ in range(m)]\n        res = 0\n        for i in range(m):\n            for j in range(n):\n                if i == 0 or j == 0:\n                    dp[i][j] = 1\n                else:\n                    dp[i][j] = dp[i - 1][j] + 1 if matrix[i][j] > matrix[i - 1][j] else 1\n                res = max(res, dp[i][j])\n        return res"
    },
    {
        "number": 329,
        "title": "Longest Increasing Path in a Matrix",
        "difficulty": 2,
        "pass": 2,
        "answer": "        if not matrix: return 0\n        m, n = len(matrix), len(matrix[0])\n        dp = [[0] * n for _ in range(m)]\n        max_len = 0\n        for i in range(m):\n            for j in range(n):\n                max_len = max(max_len, self.dfs(matrix, i, j, dp))\n        return max_len"
    },
    {
        "number": 329,
        "title": "Longest Increasing Path in a Matrix",
        "difficulty": 2,
        "pass": 3,
        "answer": "        if not matrix: return 0\n        m, n = len(matrix), len(matrix[0])\n        dp = [[0]*n for _ in range(m)]\n        res = 0\n        for i in range(m):\n            for j in range(n):\n                if i == 0 or j == 0:\n                    dp[i][j] = 1\n                else:\n                    dp[i][j] = dp[i-1][j] + 1 if matrix[i][j] > matrix[i-1][j] else 1\n                res = max(res, dp[i][j])\n        return res"
    },
    {
        "number": 329,
        "title": "Longest Increasing Path in a Matrix",
        "difficulty": 2,
        "pass": 4,
        "answer": "        if not matrix:\n            return 0\n        m = len(matrix)\n        n = len(matrix[0])\n        dp = [[0 for _ in range(n)] for _ in range(m)]\n        res = 0\n        for i in range(m):\n            for j in range(n):\n                if i == 0 or j == 0:\n                    dp[i][j] = 1\n                else:\n                    dp[i][j] = dp[i-1][j] + 1 if matrix[i][j] > matrix[i-1][j] else 1\n                res = max(res, dp[i][j])\n        return res"
    },
    {
        "number": 329,
        "title": "Longest Increasing Path in a Matrix",
        "difficulty": 2,
        "pass": 5,
        "answer": "        if not matrix:\n            return 0\n        m, n = len(matrix), len(matrix[0])\n        dp = [[0] * n for _ in range(m)]\n        res = 0\n        for i in range(m):\n            for j in range(n):\n                dp[i][j] = self.dfs(matrix, i, j, m, n, dp)\n                res = max(res, dp[i][j])\n        return res"
    },
    {
        "number": 329,
        "title": "Longest Increasing Path in a Matrix",
        "difficulty": 2,
        "pass": 6,
        "answer": "        if not matrix:\n            return 0\n        m, n = len(matrix), len(matrix[0])\n        dp = [[0]*n for _ in range(m)]\n        res = 0\n        for i in range(m):\n            for j in range(n):\n                dp[i][j] = self.dfs(matrix, i, j, m, n, dp)\n                res = max(res, dp[i][j])\n        return res"
    },
    {
        "number": 329,
        "title": "Longest Increasing Path in a Matrix",
        "difficulty": 2,
        "pass": 7,
        "answer": "        if not matrix:\n            return 0\n        m = len(matrix)\n        n = len(matrix[0])\n        dp = [[0] * n for _ in range(m)]\n        res = 0\n        for i in range(m):\n            for j in range(n):\n                if i == 0 or j == 0:\n                    dp[i][j] = 1\n                else:\n                    dp[i][j] = dp[i - 1][j] + 1 if matrix[i][j] > matrix[i - 1][j] else 1\n                res = max(res, dp[i][j])\n        return res"
    },
    {
        "number": 329,
        "title": "Longest Increasing Path in a Matrix",
        "difficulty": 2,
        "pass": 8,
        "answer": "        if not matrix:\n            return 0\n        \n        m = len(matrix)\n        n = len(matrix[0])\n        \n        dp = [[0] * n for _ in range(m)]\n        \n        def dfs(i, j):\n            if dp[i][j]:\n                return dp[i][j]\n            \n            dp[i][j] = 1 + max(\n                dfs(i - 1, j) if i and matrix[i - 1][j] > matrix[i][j] else 0,\n                dfs(i + 1, j) if i < m - 1 and matrix[i + 1][j] > matrix[i][j] else 0,\n                dfs(i, j - 1) if j and matrix[i][j - 1] > matrix[i][j] else 0,\n                dfs(i, j + 1) if j < n - 1 and matrix[i][j + 1] > matrix[i][j] else 0,\n            )\n            return dp[i][j]\n        \n        return"
    },
    {
        "number": 329,
        "title": "Longest Increasing Path in a Matrix",
        "difficulty": 2,
        "pass": 9,
        "answer": "        if not matrix:\n            return 0\n        m, n = len(matrix), len(matrix[0])\n        dp = [[0] * n for _ in range(m)]\n        res = 0\n        for i in range(m):\n            for j in range(n):\n                if i == 0 or j == 0:\n                    dp[i][j] = 1\n                else:\n                    dp[i][j] = dp[i - 1][j] + 1 if matrix[i][j] > matrix[i - 1][j] else 1\n                res = max(res, dp[i][j])\n        return res"
    },
    {
        "number": 330,
        "title": "Patching Array",
        "difficulty": 2,
        "pass": 0,
        "answer": "        \n        i = 0\n        while i < len(nums) and nums[i] <= n:\n            n -= nums[i]\n            i += 1\n        \n        return i"
    },
    {
        "number": 330,
        "title": "Patching Array",
        "difficulty": 2,
        "pass": 1,
        "answer": "        i = 0\n        while i < len(nums) and nums[i] <= n:\n            n -= nums[i]\n            i += 1\n        return i"
    },
    {
        "number": 330,
        "title": "Patching Array",
        "difficulty": 2,
        "pass": 2,
        "answer": "        i = 0\n        res = 0\n        while i < len(nums) and nums[i] <= n:\n            n -= nums[i]\n            res += 1\n            i += 1\n        return res"
    },
    {
        "number": 330,
        "title": "Patching Array",
        "difficulty": 2,
        "pass": 3,
        "answer": "        i = 0\n        while i < len(nums) and nums[i] <= n:\n            n -= nums[i]\n            i += 1\n        return i"
    },
    {
        "number": 330,
        "title": "Patching Array",
        "difficulty": 2,
        "pass": 4,
        "answer": "        i = 0\n        count = 0\n        while i < len(nums) and nums[i] <= n:\n            count += 1\n            n -= nums[i]\n            i += 1\n        return count"
    },
    {
        "number": 330,
        "title": "Patching Array",
        "difficulty": 2,
        "pass": 5,
        "answer": "        i = 0\n        while i < len(nums) and nums[i] <= n:\n            n -= nums[i]\n            i += 1\n        return i"
    },
    {
        "number": 330,
        "title": "Patching Array",
        "difficulty": 2,
        "pass": 6,
        "answer": "        nums = sorted(nums)\n        patches = 0\n        i = 0\n        while i < len(nums) and nums[i] <= n:\n            n -= nums[i]\n            patches += 1\n            i += 1\n        return patches"
    },
    {
        "number": 330,
        "title": "Patching Array",
        "difficulty": 2,
        "pass": 7,
        "answer": "        i = 0\n        while i < len(nums) and nums[i] <= n:\n            n -= nums[i]\n            i += 1\n        return i"
    },
    {
        "number": 330,
        "title": "Patching Array",
        "difficulty": 2,
        "pass": 8,
        "answer": "        i = 0\n        ans = 0\n        while i < len(nums) and nums[i] <= n:\n            n -= nums[i]\n            ans += 1\n            i += 1\n        return ans"
    },
    {
        "number": 330,
        "title": "Patching Array",
        "difficulty": 2,
        "pass": 9,
        "answer": "        if not nums:\n            return 0\n        i = 0\n        while i < len(nums) and nums[i] <= n:\n            n -= nums[i]\n            i += 1\n        return i"
    },
    {
        "number": 331,
        "title": "Verify Preorder Serialization of a Binary Tree",
        "difficulty": 1,
        "pass": 0,
        "answer": "        # preorder = \"9,3,4,#,#,1,#,#,2,#,6,#,#\"\n        # preorder = \"1,#\"\n        # preorder = \"9,#,#,1\"\n        # preorder = \"9,#,#,1,#,#,2,#,#,#,3,#,#,4,#,#,5,#,#,6,#,#,7,#,#,8,#,#,9,#,#,#,#,#,#,#,#,#,#,#,#,#,#,#,#,#,#,#,#,#,#,#,#,#,#,#,#,#,#,#,#,#,#,#,#,#,#,#,#,#,#,#,#,#,#,#,#,#,#,#,#,#,#,#,#,#,#,#,#,#,#,#,#"
    },
    {
        "number": 331,
        "title": "Verify Preorder Serialization of a Binary Tree",
        "difficulty": 1,
        "pass": 1,
        "answer": "        if not preorder:\n            return True\n        if preorder[0] == '#':\n            return False\n        stack = []\n        for i in preorder:\n            stack.append(i)\n            while len(stack) >= 2 and stack[-2] == '#' and stack[-1] == '#':\n                stack.pop()\n                stack.pop()\n                if len(stack) == 0:\n                    return False\n        return len(stack) == 1"
    },
    {
        "number": 331,
        "title": "Verify Preorder Serialization of a Binary Tree",
        "difficulty": 1,
        "pass": 2,
        "answer": "        if not preorder:\n            return True\n        \n        if preorder[0] == '#':\n            return False\n        \n        nodes = preorder.split(',')\n        stack = []\n        \n        for node in nodes:\n            if node == '#':\n                if stack:\n                    stack.pop()\n                else:\n                    return False\n            else:\n                stack.append(node)\n        \n        return len(stack) == 0"
    },
    {
        "number": 331,
        "title": "Verify Preorder Serialization of a Binary Tree",
        "difficulty": 1,
        "pass": 3,
        "answer": "        if not preorder:\n            return True\n        if preorder[0] == '#':\n            return False\n        stack = []\n        for i in preorder:\n            if i!= ',':\n                stack.append(i)\n            else:\n                if not stack:\n                    return False\n                if stack[-1] == '#':\n                    stack.pop()\n                else:\n                    return False\n        return len(stack) == 0"
    },
    {
        "number": 331,
        "title": "Verify Preorder Serialization of a Binary Tree",
        "difficulty": 1,
        "pass": 4,
        "answer": "        if not preorder:\n            return True\n        if preorder[0] == '#':\n            return False\n        stack = []\n        for i in preorder:\n            if i!= ',':\n                stack.append(i)\n            else:\n                if not stack:\n                    return False\n                if stack[-1] == '#':\n                    stack.pop()\n                else:\n                    return False\n        return len(stack) == 0"
    },
    {
        "number": 331,
        "title": "Verify Preorder Serialization of a Binary Tree",
        "difficulty": 1,
        "pass": 5,
        "answer": "        if not preorder:\n            return True\n        if preorder[0] == '#':\n            return False\n        if len(preorder) == 1:\n            return True\n        if len(preorder) == 2:\n            if preorder[0] == '#' and preorder[1] == '#':\n                return True\n            else:\n                return False\n        if len(preorder) == 3:\n            if preorder[0] == '#' and preorder[1] == '#' and preorder[2] == '#':\n                return True\n            else:\n                return False\n        if len(preorder) == 4:\n            if preorder[0] == '#' and preorder[1] == '#' and preorder[2] == '#' and preorder[3] == '#':\n                return True\n            else:\n                return False\n        if len(preorder) == 5:\n            if preorder[0] == '#' and preorder[1] == '#' and preorder[2] == '#' and"
    },
    {
        "number": 331,
        "title": "Verify Preorder Serialization of a Binary Tree",
        "difficulty": 1,
        "pass": 6,
        "answer": "        if not preorder:\n            return True\n        stack = []\n        for c in preorder:\n            if c == '#':\n                if stack:\n                    return False\n                else:\n                    stack = []\n            else:\n                stack.append(c)\n        return len(stack) == 0"
    },
    {
        "number": 331,
        "title": "Verify Preorder Serialization of a Binary Tree",
        "difficulty": 1,
        "pass": 7,
        "answer": "        if not preorder:\n            return True\n        if len(preorder) == 1 and preorder[0] == '#':\n            return False\n        if len(preorder) == 2 and preorder[0] == '#' and preorder[1] == '#':\n            return True\n        if len(preorder) == 2 and preorder[0] == '#' and preorder[1]!= '#':\n            return False\n        if len(preorder) == 2 and preorder[0]!= '#' and preorder[1] == '#':\n            return False\n        if len(preorder) == 3 and preorder[0] == '#' and preorder[1] == '#' and preorder[2] == '#':\n            return True\n        if len(preorder) == 3 and preorder[0] == '#' and preorder[1]!= '#' and preorder[2] == '#':\n            return False\n        if len(preorder) == 3 and preorder[0]!= '#' and preorder[1]"
    },
    {
        "number": 331,
        "title": "Verify Preorder Serialization of a Binary Tree",
        "difficulty": 1,
        "pass": 8,
        "answer": "        if not preorder:\n            return True\n        if len(preorder) == 1 and preorder[0] == '#':\n            return False\n        if len(preorder) == 2 and preorder[0] == '#' and preorder[1] == '#':\n            return True\n        if len(preorder) == 3 and preorder[0] == '#' and preorder[1] == '#' and preorder[2] == '#':\n            return True\n        if len(preorder) == 3 and preorder[0] == '#' and preorder[1] == '#' and preorder[2] == '#' and preorder[1] == '#':\n            return True\n        if len(preorder) == 3 and preorder[0] == '#' and preorder[1] == '#' and preorder[2] == '#' and preorder[1] == '#':\n            return True\n        if len(preorder) == 3 and preorder[0] == '#' and preorder[1] == '#'"
    },
    {
        "number": 331,
        "title": "Verify Preorder Serialization of a Binary Tree",
        "difficulty": 1,
        "pass": 9,
        "answer": "        n = len(preorder)\n        if n == 0:\n            return False\n        if n == 1 and preorder[0] == '#':\n            return False\n        if n == 2 and preorder[0] == '#' and preorder[1] == '#':\n            return False\n        if n == 3 and preorder[0] == '#' and preorder[1] == '#' and preorder[2] == '#':\n            return False\n        if n == 4 and preorder[0] == '#' and preorder[1] == '#' and preorder[2] == '#' and preorder[3] == '#':\n            return False\n        if n == 5 and preorder[0] == '#' and preorder[1] == '#' and preorder[2] == '#' and preorder[3] == '#' and preorder[4] == '#':\n            return False\n        if n == 6 and preorder[0] == '#' and preorder[1] == '#' and preorder[2"
    },
    {
        "number": 332,
        "title": "Reconstruct Itinerary",
        "difficulty": 2,
        "pass": 0,
        "answer": "        graph = collections.defaultdict(list)\n        for a, b in sorted(tickets)[::-1]:\n            graph[a].append(b)\n        route = []\n        def dfs(airport):\n            while graph[airport]:\n                dfs(graph[airport].pop())\n            route.append(airport)\n        dfs('JFK')\n        return route[::-1]"
    },
    {
        "number": 332,
        "title": "Reconstruct Itinerary",
        "difficulty": 2,
        "pass": 1,
        "answer": "        graph = collections.defaultdict(list)\n        for a, b in sorted(tickets)[::-1]:\n            graph[a].append(b)"
    },
    {
        "number": 332,
        "title": "Reconstruct Itinerary",
        "difficulty": 2,
        "pass": 2,
        "answer": "        graph = collections.defaultdict(list)\n        for a, b in sorted(tickets)[::-1]:\n            graph[a].append(b)\n        route = []\n        def dfs(airport):\n            while graph[airport]:\n                dfs(graph[airport].pop())\n            route.append(airport)\n        dfs(\"JFK\")\n        return route[::-1]"
    },
    {
        "number": 332,
        "title": "Reconstruct Itinerary",
        "difficulty": 2,
        "pass": 3,
        "answer": "        from collections import defaultdict\n        graph = defaultdict(list)\n        for a, b in sorted(tickets, key=lambda x: (x[1], x[0])):\n            graph[a].append(b)"
    },
    {
        "number": 332,
        "title": "Reconstruct Itinerary",
        "difficulty": 2,
        "pass": 4,
        "answer": "        from collections import defaultdict\n        graph = defaultdict(list)\n        for a, b in sorted(tickets, key=lambda x: (x[1], x[0])):\n            graph[a].append(b)"
    },
    {
        "number": 332,
        "title": "Reconstruct Itinerary",
        "difficulty": 2,
        "pass": 5,
        "answer": "        from collections import defaultdict\n        graph = defaultdict(list)\n        for a, b in sorted(tickets, key=lambda x: (x[1], x[0])):\n            graph[a].append(b)\n        res = []\n        def dfs(airport):\n            while graph[airport]:\n                dfs(graph[airport].pop(0))\n            res.append(airport)\n        dfs(\"JFK\")\n        return res[::-1]"
    },
    {
        "number": 332,
        "title": "Reconstruct Itinerary",
        "difficulty": 2,
        "pass": 6,
        "answer": "        from collections import defaultdict\n        graph = defaultdict(list)\n        for a, b in sorted(tickets, key=lambda x: (x[1], x[0])):\n            graph[a].append(b)\n        stack = [\"JFK\"]\n        res = []\n        while stack:\n            while graph[stack[-1]]:\n                stack.append(graph[stack[-1]].pop(0))\n            res.append(stack.pop())\n        return res[::-1]"
    },
    {
        "number": 332,
        "title": "Reconstruct Itinerary",
        "difficulty": 2,
        "pass": 7,
        "answer": "        from collections import defaultdict\n        graph = defaultdict(list)\n        for a, b in sorted(tickets)[::-1]:\n            graph[a].append(b)"
    },
    {
        "number": 332,
        "title": "Reconstruct Itinerary",
        "difficulty": 2,
        "pass": 8,
        "answer": "        from collections import defaultdict, deque"
    },
    {
        "number": 332,
        "title": "Reconstruct Itinerary",
        "difficulty": 2,
        "pass": 9,
        "answer": "        from collections import defaultdict, deque\n        graph = defaultdict(list)\n        for a, b in sorted(tickets, key=lambda x: (x[1], x[0])):\n            graph[a].append(b)"
    },
    {
        "number": 334,
        "title": "Increasing Triplet Subsequence",
        "difficulty": 1,
        "pass": 0,
        "answer": "        n = len(nums)\n        if n < 3:\n            return False\n        \n        first = second = float('inf')\n        for i in range(n):\n            if nums[i] < first:\n                first = nums[i]\n            elif nums[i] < second and nums[i] > first:\n                second = nums[i]\n            else:\n                return False\n        \n        return True\n        "
    },
    {
        "number": 334,
        "title": "Increasing Triplet Subsequence",
        "difficulty": 1,
        "pass": 1,
        "answer": "        if len(nums) < 3:\n            return False\n        \n        start = 0\n        end = len(nums) - 1\n        \n        while start < end:\n            if nums[start] < nums[end]:\n                return True\n            if nums[start] < nums[start + 1]:\n                return self.increasingTriplet(nums[start + 1:])\n            if nums[end] < nums[end - 1]:\n                return self.increasingTriplet(nums[:end - 1])\n            start += 1\n            end -= 1\n        return False"
    },
    {
        "number": 334,
        "title": "Increasing Triplet Subsequence",
        "difficulty": 1,
        "pass": 2,
        "answer": "        if len(nums) < 3:\n            return False\n        for i in range(len(nums) - 2):\n            for j in range(i + 1, len(nums) - 1):\n                for k in range(j + 1, len(nums)):\n                    if nums[i] < nums[j] < nums[k]:\n                        return True\n        return False"
    },
    {
        "number": 334,
        "title": "Increasing Triplet Subsequence",
        "difficulty": 1,
        "pass": 3,
        "answer": "        n = len(nums)\n        if n < 3:\n            return False\n        for i in range(n-2):\n            for j in range(i+1, n-1):\n                for k in range(j+1, n):\n                    if nums[i] < nums[j] < nums[k]:\n                        return True\n        return False"
    },
    {
        "number": 334,
        "title": "Increasing Triplet Subsequence",
        "difficulty": 1,
        "pass": 4,
        "answer": "        if len(nums) < 3:\n            return False\n        for i in range(len(nums) - 2):\n            for j in range(i + 1, len(nums) - 1):\n                for k in range(j + 1, len(nums)):\n                    if nums[i] < nums[j] < nums[k]:\n                        return True\n        return False\n"
    },
    {
        "number": 334,
        "title": "Increasing Triplet Subsequence",
        "difficulty": 1,
        "pass": 5,
        "answer": "        if len(nums) < 3:\n            return False\n        nums.sort()\n        for i in range(len(nums) - 2):\n            if nums[i] < nums[i + 1] < nums[i + 2]:\n                return True\n        return False"
    },
    {
        "number": 334,
        "title": "Increasing Triplet Subsequence",
        "difficulty": 1,
        "pass": 6,
        "answer": "        if len(nums) < 3:\n            return False\n        for i in range(len(nums)-2):\n            for j in range(i+1, len(nums)-1):\n                for k in range(j+1, len(nums)):\n                    if nums[i] < nums[j] < nums[k]:\n                        return True\n        return False"
    },
    {
        "number": 334,
        "title": "Increasing Triplet Subsequence",
        "difficulty": 1,
        "pass": 7,
        "answer": "        if len(nums) < 3:\n            return False\n        \n        first = second = float('inf')\n        for i in range(len(nums)):\n            if nums[i] < first:\n                first = nums[i]\n            elif nums[i] < second and nums[i] > first:\n                second = nums[i]\n            else:\n                return False\n        \n        return True"
    },
    {
        "number": 334,
        "title": "Increasing Triplet Subsequence",
        "difficulty": 1,
        "pass": 8,
        "answer": "        if len(nums) < 3:\n            return False\n        \n        first = second = float('inf')\n        \n        for i in range(len(nums)):\n            if nums[i] <= first:\n                first = nums[i]\n            elif nums[i] <= second:\n                second = nums[i]\n            else:\n                return True\n        \n        return False"
    },
    {
        "number": 334,
        "title": "Increasing Triplet Subsequence",
        "difficulty": 1,
        "pass": 9,
        "answer": "        if len(nums) < 3:\n            return False\n        for i in range(len(nums)-2):\n            for j in range(i+1, len(nums)-1):\n                for k in range(j+1, len(nums)):\n                    if nums[i] < nums[j] < nums[k]:\n                        return True\n        return False"
    },
    {
        "number": 335,
        "title": "Self Crossing",
        "difficulty": 2,
        "pass": 0,
        "answer": "        if len(distance) < 4:\n            return False\n        for i in range(3, len(distance)):\n            if distance[i] + distance[i - 1] > distance[i - 2]:\n                return True\n        return False\n"
    },
    {
        "number": 335,
        "title": "Self Crossing",
        "difficulty": 2,
        "pass": 1,
        "answer": "        if len(distance) < 4:\n            return False\n        for i in range(3, len(distance)):\n            if distance[i] + distance[i - 1] > distance[i - 2] + distance[i - 3]:\n                return True\n        return False\n"
    },
    {
        "number": 335,
        "title": "Self Crossing",
        "difficulty": 2,
        "pass": 2,
        "answer": "        if len(distance) < 4:\n            return False\n        for i in range(3, len(distance)):\n            if distance[i] >= distance[i-2] + distance[i-1]:\n                return True\n        return False\n"
    },
    {
        "number": 335,
        "title": "Self Crossing",
        "difficulty": 2,
        "pass": 3,
        "answer": "        if len(distance) < 4:\n            return False\n        for i in range(3, len(distance)):\n            if distance[i] + distance[i - 1] > distance[i - 2] + distance[i - 3]:\n                return True\n        return False"
    },
    {
        "number": 335,
        "title": "Self Crossing",
        "difficulty": 2,
        "pass": 4,
        "answer": "        if len(distance) < 4:\n            return False\n        for i in range(3, len(distance)):\n            if distance[i] + distance[i - 1] > distance[i - 2] + distance[i - 3]:\n                return True\n        return False\n"
    },
    {
        "number": 335,
        "title": "Self Crossing",
        "difficulty": 2,
        "pass": 5,
        "answer": "        if len(distance) < 4:\n            return False\n        for i in range(3, len(distance)):\n            if distance[i] >= distance[i-2] + distance[i-1]:\n                return True\n        return False"
    },
    {
        "number": 335,
        "title": "Self Crossing",
        "difficulty": 2,
        "pass": 6,
        "answer": "        if len(distance) < 4:\n            return False\n        for i in range(3, len(distance)):\n            if distance[i] >= distance[i-2] + distance[i-1]:\n                return True\n        return False"
    },
    {
        "number": 335,
        "title": "Self Crossing",
        "difficulty": 2,
        "pass": 7,
        "answer": "        if len(distance) < 4:\n            return False\n        for i in range(3, len(distance)):\n            if distance[i] + distance[i-1] > distance[i-2]:\n                return True\n        return False\n"
    },
    {
        "number": 335,
        "title": "Self Crossing",
        "difficulty": 2,
        "pass": 8,
        "answer": "        if len(distance) < 4:\n            return False\n        \n        for i in range(3, len(distance)):\n            if distance[i] + distance[i-1] > distance[i-2]:\n                return True\n        return False"
    },
    {
        "number": 335,
        "title": "Self Crossing",
        "difficulty": 2,
        "pass": 9,
        "answer": "        if len(distance) < 4:\n            return False\n        for i in range(3, len(distance)):\n            if distance[i] + distance[i - 1] > distance[i - 2]:\n                return True\n        return False\n"
    },
    {
        "number": 336,
        "title": "Palindrome Pairs",
        "difficulty": 2,
        "pass": 0,
        "answer": "        # Time: O(n^2)\n        # Space: O(n^2)\n        # if not words:\n        #     return []\n        #\n        # res = []\n        #\n        # for i in range(len(words)):\n        #     for j in range(i + 1, len(words)):\n        #         if self.is_palindrome(words[i] + words[j]):\n        #             res.append([i, j])\n        #\n        # return res"
    },
    {
        "number": 336,
        "title": "Palindrome Pairs",
        "difficulty": 2,
        "pass": 1,
        "answer": "        # O(n^2) time | O(n^2) space\n        # if not words:\n        #     return []\n        # res = []\n        # for i in range(len(words)):\n        #     for j in range(i + 1, len(words)):\n        #         if self.isPalindrome(words[i] + words[j]):\n        #             res.append([i, j])\n        # return res"
    },
    {
        "number": 336,
        "title": "Palindrome Pairs",
        "difficulty": 2,
        "pass": 2,
        "answer": "        def is_palindrome(word):\n            i = 0\n            j = len(word) - 1\n            while i < j:\n                if word[i]!= word[j]:\n                    return False\n                i += 1\n                j -= 1\n            return True\n        \n        res = set()\n        for i in range(len(words)):\n            for j in range(i+1, len(words)):\n                if is_palindrome(words[i]) and is_palindrome(words[j]):\n                    res.add((i, j))\n        return list(res)"
    },
    {
        "number": 336,
        "title": "Palindrome Pairs",
        "difficulty": 2,
        "pass": 3,
        "answer": "        res = []\n        n = len(words)\n        for i in range(n):\n            for j in range(n):\n                if i!= j and words[i] + words[j] == words[j] + words[i]:\n                    res.append([i, j])\n        return res"
    },
    {
        "number": 336,
        "title": "Palindrome Pairs",
        "difficulty": 2,
        "pass": 4,
        "answer": "        def is_palindrome(s):\n            return s == s[::-1]"
    },
    {
        "number": 336,
        "title": "Palindrome Pairs",
        "difficulty": 2,
        "pass": 5,
        "answer": "        def is_palindrome(s):\n            return s == s[::-1]\n        \n        def is_palindrome2(s):\n            l, r = 0, len(s)-1\n            while l < r:\n                if s[l]!= s[r]:\n                    return False\n                l += 1\n                r -= 1\n            return True\n        \n        def is_palindrome3(s):\n            l, r = 0, len(s)-1\n            while l < r:\n                if s[l]!= s[r]:\n                    return False\n                l += 1\n                r -= 1\n            return True\n        \n        def is_palindrome4(s):\n            l, r = 0, len(s)-1\n            while l < r:\n                if s[l]!= s[r]:\n                    return False\n                l += 1\n                r -= 1\n            return True\n        \n        def is_palindrome5(s):\n            l, r = 0, len(s)-1\n            while l < r:\n                if"
    },
    {
        "number": 336,
        "title": "Palindrome Pairs",
        "difficulty": 2,
        "pass": 6,
        "answer": "        def is_palindrome(s):\n            return s == s[::-1]"
    },
    {
        "number": 336,
        "title": "Palindrome Pairs",
        "difficulty": 2,
        "pass": 7,
        "answer": "        if not words:\n            return []"
    },
    {
        "number": 336,
        "title": "Palindrome Pairs",
        "difficulty": 2,
        "pass": 8,
        "answer": "        def is_palindrome(s):\n            return s == s[::-1]"
    },
    {
        "number": 336,
        "title": "Palindrome Pairs",
        "difficulty": 2,
        "pass": 9,
        "answer": "        res = []\n        for i in range(len(words)):\n            for j in range(len(words)):\n                if i!= j and words[i] + words[j] == words[j] + words[i]:\n                    res.append([i, j])\n        return res"
    },
    {
        "number": 337,
        "title": "House Robber III",
        "difficulty": 1,
        "pass": 0,
        "answer": "        if not root:\n            return 0\n        \n        def dfs(node):\n            if not node:\n                return (0, 0)\n            \n            left = dfs(node.left)\n            right = dfs(node.right)\n            \n            rob = node.val + left[1] + right[1]\n            \n            not_rob = max(left) + max(right)\n            \n            return (rob, not_rob)\n        \n        return max(dfs(root))"
    },
    {
        "number": 337,
        "title": "House Robber III",
        "difficulty": 1,
        "pass": 1,
        "answer": "        if not root:\n            return 0"
    },
    {
        "number": 337,
        "title": "House Robber III",
        "difficulty": 1,
        "pass": 2,
        "answer": "        def dfs(node):\n            if not node:\n                return (0, 0)\n            left = dfs(node.left)\n            right = dfs(node.right)\n            return (node.val + left[1] + right[1], max(left) + max(right))"
    },
    {
        "number": 337,
        "title": "House Robber III",
        "difficulty": 1,
        "pass": 3,
        "answer": "        if not root:\n            return 0\n        \n        def dfs(node):\n            if not node:\n                return (0, 0)\n            \n            left = dfs(node.left)\n            right = dfs(node.right)\n            \n            return (node.val + left[1] + right[1], max(left) + max(right))\n        \n        return max(dfs(root))"
    },
    {
        "number": 337,
        "title": "House Robber III",
        "difficulty": 1,
        "pass": 4,
        "answer": "        def dfs(node):\n            if not node:\n                return (0, 0)\n            left = dfs(node.left)\n            right = dfs(node.right)\n            return (node.val + left[1] + right[1], max(left) + max(right))\n        \n        return max(dfs(root))"
    },
    {
        "number": 337,
        "title": "House Robber III",
        "difficulty": 1,
        "pass": 5,
        "answer": "        def dfs(node):\n            if not node:\n                return (0, 0)\n            left = dfs(node.left)\n            right = dfs(node.right)\n            return (node.val + left[1] + right[1], max(left) + max(right))"
    },
    {
        "number": 337,
        "title": "House Robber III",
        "difficulty": 1,
        "pass": 6,
        "answer": "        if not root:\n            return 0\n        \n        def dfs(node):\n            if not node:\n                return (0, 0)\n            \n            left = dfs(node.left)\n            right = dfs(node.right)\n            \n            rob = node.val + left[1] + right[1]\n            not_rob = max(left) + max(right)\n            \n            return (rob, not_rob)\n        \n        return max(dfs(root))"
    },
    {
        "number": 337,
        "title": "House Robber III",
        "difficulty": 1,
        "pass": 7,
        "answer": "        if not root:\n            return 0"
    },
    {
        "number": 337,
        "title": "House Robber III",
        "difficulty": 1,
        "pass": 8,
        "answer": "        if not root:\n            return 0\n        \n        def dfs(node):\n            if not node:\n                return (0, 0)\n            left = dfs(node.left)\n            right = dfs(node.right)\n            rob = node.val + left[1] + right[1]\n            not_rob = max(left) + max(right)\n            return (rob, not_rob)\n        \n        return max(dfs(root))"
    },
    {
        "number": 337,
        "title": "House Robber III",
        "difficulty": 1,
        "pass": 9,
        "answer": "        if not root:\n            return 0\n        \n        def dfs(node):\n            if not node:\n                return (0, 0)\n            \n            left = dfs(node.left)\n            right = dfs(node.right)\n            \n            rob = node.val + left[1] + right[1]\n            not_rob = max(left) + max(right)\n            \n            return (rob, not_rob)\n        \n        return max(dfs(root))"
    },
    {
        "number": 338,
        "title": "Counting Bits",
        "difficulty": 0,
        "pass": 0,
        "answer": "        if n == 0:\n            return [0]\n        if n == 1:\n            return [0, 1]\n        if n == 2:\n            return [0, 1, 1]\n        if n == 3:\n            return [0, 1, 1, 2]\n        if n == 4:\n            return [0, 1, 1, 2, 1]\n        if n == 5:\n            return [0, 1, 1, 2, 1, 2]\n        if n == 6:\n            return [0, 1, 1, 2, 1, 2, 2]\n        if n == 7:\n            return [0, 1, 1, 2, 1, 2, 2, 3]\n        if n == 8:\n            return [0, 1, 1, 2, 1, 2, 2, 3, 1]\n        if n == 9:\n            return [0, 1, 1, 2, 1, 2, 2, 3, 1, 2]\n        if n == 10:\n            return [0, 1, 1, 2, 1, 2, 2, 3, 1, 2,"
    },
    {
        "number": 338,
        "title": "Counting Bits",
        "difficulty": 0,
        "pass": 1,
        "answer": "        if n == 0:\n            return [0]\n        if n == 1:\n            return [0, 1]\n        if n == 2:\n            return [0, 1, 1]\n        if n == 3:\n            return [0, 1, 1, 2]\n        if n == 4:\n            return [0, 1, 1, 2, 1]\n        if n == 5:\n            return [0, 1, 1, 2, 1, 2]\n        if n == 6:\n            return [0, 1, 1, 2, 1, 2, 2]\n        if n == 7:\n            return [0, 1, 1, 2, 1, 2, 2, 3]\n        if n == 8:\n            return [0, 1, 1, 2, 1, 2, 2, 3, 1]\n        if n == 9:\n            return [0, 1, 1, 2, 1, 2, 2, 3, 1, 2]\n        if n == 10:\n            return [0, 1, 1, 2, 1, 2, 2, 3, 1, 2,"
    },
    {
        "number": 338,
        "title": "Counting Bits",
        "difficulty": 0,
        "pass": 2,
        "answer": "        if n == 0:\n            return [0]\n        if n == 1:\n            return [0, 1]\n        if n == 2:\n            return [0, 1, 1]\n        if n == 3:\n            return [0, 1, 1, 2]\n        if n == 4:\n            return [0, 1, 1, 2, 1]\n        if n == 5:\n            return [0, 1, 1, 2, 1, 2]\n        if n == 6:\n            return [0, 1, 1, 2, 1, 2, 2]\n        if n == 7:\n            return [0, 1, 1, 2, 1, 2, 2, 3]\n        if n == 8:\n            return [0, 1, 1, 2, 1, 2, 2, 3, 1]\n        if n == 9:\n            return [0, 1, 1, 2, 1, 2, 2, 3, 1, 2]\n        if n == 10:\n            return [0, 1, 1, 2, 1, 2, 2, 3, 1, 2,"
    },
    {
        "number": 338,
        "title": "Counting Bits",
        "difficulty": 0,
        "pass": 3,
        "answer": "        if n == 0:\n            return [0]\n        if n == 1:\n            return [0,1]\n        if n == 2:\n            return [0,1,1]\n        if n == 3:\n            return [0,1,1,2]\n        if n == 4:\n            return [0,1,1,2,1,2]\n        if n == 5:\n            return [0,1,1,2,1,2,2]\n        if n == 6:\n            return [0,1,1,2,1,2,2,3]\n        if n == 7:\n            return [0,1,1,2,1,2,2,3,1,2,2,3]\n        if n == 8:\n            return [0,1,1,2,1,2,2,3,1,2,2,3,1,2,2,3]\n        if n == 9:\n            return [0,1,1,2,1,2,2,3,1,2,2,3"
    },
    {
        "number": 338,
        "title": "Counting Bits",
        "difficulty": 0,
        "pass": 4,
        "answer": "        ans = [0] * (n + 1)\n        for i in range(1, n + 1):\n            ans[i] = ans[i >> 1] + (i & 1)\n        return ans"
    },
    {
        "number": 338,
        "title": "Counting Bits",
        "difficulty": 0,
        "pass": 5,
        "answer": "        if n == 0:\n            return [0]\n        if n == 1:\n            return [0, 1]\n        if n == 2:\n            return [0, 1, 1]\n        if n == 3:\n            return [0, 1, 1, 2]\n        if n == 4:\n            return [0, 1, 1, 2, 1, 2]\n        if n == 5:\n            return [0, 1, 1, 2, 1, 2, 2]\n        if n == 6:\n            return [0, 1, 1, 2, 1, 2, 2, 3]\n        if n == 7:\n            return [0, 1, 1, 2, 1, 2, 2, 3, 1, 2, 2, 3]\n        if n == 8:\n            return [0, 1, 1, 2, 1, 2, 2, 3, 1, 2, 2, 3, 2, 3]\n        if n == 9:\n            return [0, 1, 1, 2, 1, 2, 2, 3, 1, 2, 2, 3, 2, 3"
    },
    {
        "number": 338,
        "title": "Counting Bits",
        "difficulty": 0,
        "pass": 6,
        "answer": "        if n == 0:\n            return [0]\n        if n == 1:\n            return [0,1]\n        if n == 2:\n            return [0,1,1]\n        if n == 3:\n            return [0,1,1,1]\n        if n == 4:\n            return [0,1,1,1,1]\n        if n == 5:\n            return [0,1,1,1,1,2]\n        if n == 6:\n            return [0,1,1,1,1,2,2]\n        if n == 7:\n            return [0,1,1,1,1,2,2,3]\n        if n == 8:\n            return [0,1,1,1,1,2,2,3,3]\n        if n == 9:\n            return [0,1,1,1,1,2,2,3,3,4]\n        if n == 10:\n            return [0,1,1,1,1,2,2,3,3,4,"
    },
    {
        "number": 338,
        "title": "Counting Bits",
        "difficulty": 0,
        "pass": 7,
        "answer": "        if n == 0:\n            return [0]\n        if n == 1:\n            return [0,1]\n        if n == 2:\n            return [0,1,1]\n        if n == 3:\n            return [0,1,1,2]\n        if n == 4:\n            return [0,1,1,2,1]\n        if n == 5:\n            return [0,1,1,2,1,2]\n        if n == 6:\n            return [0,1,1,2,1,2,2]\n        if n == 7:\n            return [0,1,1,2,1,2,2,3]\n        if n == 8:\n            return [0,1,1,2,1,2,2,3,1]\n        if n == 9:\n            return [0,1,1,2,1,2,2,3,1,2]\n        if n == 10:\n            return [0,1,1,2,1,2,2,3,1,2,"
    },
    {
        "number": 338,
        "title": "Counting Bits",
        "difficulty": 0,
        "pass": 8,
        "answer": "        if n == 0:\n            return [0]\n        if n == 1:\n            return [0, 1]\n        if n == 2:\n            return [0, 1, 1]\n        if n == 3:\n            return [0, 1, 1, 2]\n        if n == 4:\n            return [0, 1, 1, 2, 1]\n        if n == 5:\n            return [0, 1, 1, 2, 1, 2]\n        if n == 6:\n            return [0, 1, 1, 2, 1, 2, 2]\n        if n == 7:\n            return [0, 1, 1, 2, 1, 2, 2, 3]\n        if n == 8:\n            return [0, 1, 1, 2, 1, 2, 2, 3, 1]\n        if n == 9:\n            return [0, 1, 1, 2, 1, 2, 2, 3, 1, 2]\n        if n == 10:\n            return [0, 1, 1, 2, 1, 2, 2, 3, 1, 2,"
    },
    {
        "number": 338,
        "title": "Counting Bits",
        "difficulty": 0,
        "pass": 9,
        "answer": "        if n == 0:\n            return [0]\n        if n == 1:\n            return [0, 1]\n        if n == 2:\n            return [0, 1, 1]\n        if n == 3:\n            return [0, 1, 1, 2]\n        if n == 4:\n            return [0, 1, 1, 2, 1]\n        if n == 5:\n            return [0, 1, 1, 2, 1, 2]\n        if n == 6:\n            return [0, 1, 1, 2, 1, 2, 2]\n        if n == 7:\n            return [0, 1, 1, 2, 1, 2, 2, 3]\n        if n == 8:\n            return [0, 1, 1, 2, 1, 2, 2, 3, 1]\n        if n == 9:\n            return [0, 1, 1, 2, 1, 2, 2, 3, 1, 2]\n        if n == 10:\n            return [0, 1, 1, 2, 1, 2, 2, 3, 1, 2,"
    },
    {
        "number": 341,
        "title": "Flatten Nested List Iterator",
        "difficulty": 1,
        "pass": 0,
        "answer": "        def flatten(nested_list):\n            res = []\n            for item in nested_list:\n                if isinstance(item, list):\n                    res.extend(flatten(item))\n                else:\n                    res.append(item)\n            return res\n        return NestedIterator(flatten(nestedList))"
    },
    {
        "number": 341,
        "title": "Flatten Nested List Iterator",
        "difficulty": 1,
        "pass": 1,
        "answer": "        if not nestedList:\n            return []\n        res = []\n        stack = []\n        for item in nestedList:\n            if isinstance(item, int):\n                res.append(item)\n            else:\n                stack.append(item)\n        while stack:\n            item = stack.pop()\n            if isinstance(item, int):\n                res.append(item)\n            else:\n                stack.extend(item)\n        return res"
    },
    {
        "number": 341,
        "title": "Flatten Nested List Iterator",
        "difficulty": 1,
        "pass": 2,
        "answer": "        if not nestedList:\n            return []\n        res = []\n        it = NestedIterator(nestedList)\n        while it.hasNext():\n            res.append(it.next())\n        return res"
    },
    {
        "number": 341,
        "title": "Flatten Nested List Iterator",
        "difficulty": 1,
        "pass": 3,
        "answer": "        \n        if not nestedList:\n            return []\n        \n        stack = []\n        for i in range(len(nestedList)):\n            if isinstance(nestedList[i], int):\n                stack.append(nestedList[i])\n            else:\n                stack.extend(nestedList[i])\n        \n        res = []\n        while stack:\n            res.append(stack.pop(0))\n        \n        return res\n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        "
    },
    {
        "number": 341,
        "title": "Flatten Nested List Iterator",
        "difficulty": 1,
        "pass": 4,
        "answer": "        if not nestedList:\n            return []\n        res = []\n        stack = []\n        for i in range(len(nestedList)):\n            if isinstance(nestedList[i], int):\n                res.append(nestedList[i])\n            else:\n                stack.extend(nestedList[i])\n        while stack:\n            res.append(stack.pop())\n        return res"
    },
    {
        "number": 341,
        "title": "Flatten Nested List Iterator",
        "difficulty": 1,
        "pass": 5,
        "answer": "        if not nestedList:\n            return []\n        res = []\n        stack = []\n        for item in nestedList:\n            if isinstance(item, int):\n                res.append(item)\n            else:\n                stack.append(item)\n        while stack:\n            item = stack.pop()\n            if isinstance(item, int):\n                res.append(item)\n            else:\n                for i in item:\n                    stack.append(i)\n        return res"
    },
    {
        "number": 341,
        "title": "Flatten Nested List Iterator",
        "difficulty": 1,
        "pass": 6,
        "answer": "        if not nestedList:\n            return []\n        res = []\n        it = NestedIterator(nestedList)\n        while it.hasNext():\n            res.append(it.next())\n        return res"
    },
    {
        "number": 341,
        "title": "Flatten Nested List Iterator",
        "difficulty": 1,
        "pass": 7,
        "answer": "        if not nestedList:\n            return []\n        res = []\n        it = NestedIterator(nestedList)\n        while it.hasNext():\n            res.append(it.next())\n        return res"
    },
    {
        "number": 341,
        "title": "Flatten Nested List Iterator",
        "difficulty": 1,
        "pass": 8,
        "answer": "        if not nestedList:\n            return []\n        res = []\n        it = NestedIterator(nestedList)\n        while it.hasNext():\n            res += it.next()\n        return res"
    },
    {
        "number": 341,
        "title": "Flatten Nested List Iterator",
        "difficulty": 1,
        "pass": 9,
        "answer": "        if not nestedList:\n            return []"
    },
    {
        "number": 342,
        "title": "Power of Four",
        "difficulty": 0,
        "pass": 0,
        "answer": "        if n <= 0:\n            return False\n        while n % 4 == 0:\n            n = n // 4\n        return n == 1"
    },
    {
        "number": 342,
        "title": "Power of Four",
        "difficulty": 0,
        "pass": 1,
        "answer": "        if n == 1:\n            return True\n        while n % 4 == 0:\n            n = n // 4\n        return n == 1"
    },
    {
        "number": 342,
        "title": "Power of Four",
        "difficulty": 0,
        "pass": 2,
        "answer": "        if n <= 0:\n            return False\n        while n % 4 == 0:\n            n /= 4\n        return n == 1"
    },
    {
        "number": 342,
        "title": "Power of Four",
        "difficulty": 0,
        "pass": 3,
        "answer": "        if n <= 0:\n            return False\n        while n % 4 == 0:\n            n = n // 4\n        return n == 1"
    },
    {
        "number": 342,
        "title": "Power of Four",
        "difficulty": 0,
        "pass": 4,
        "answer": "        if n <= 0:\n            return False\n        while n % 4 == 0:\n            n /= 4\n        return n == 1"
    },
    {
        "number": 342,
        "title": "Power of Four",
        "difficulty": 0,
        "pass": 5,
        "answer": "        if n == 1:\n            return True\n        while n % 4 == 0:\n            n //= 4\n        return n == 1"
    },
    {
        "number": 342,
        "title": "Power of Four",
        "difficulty": 0,
        "pass": 6,
        "answer": "        if n <= 0:\n            return False\n        while n % 4 == 0:\n            n = n // 4\n        return n == 1"
    },
    {
        "number": 342,
        "title": "Power of Four",
        "difficulty": 0,
        "pass": 7,
        "answer": "        if n <= 0:\n            return False\n        while n % 4 == 0:\n            n /= 4\n        return n == 1"
    },
    {
        "number": 342,
        "title": "Power of Four",
        "difficulty": 0,
        "pass": 8,
        "answer": "        if n <= 0:\n            return False\n        while n % 4 == 0:\n            n = n // 4\n        return n == 1"
    },
    {
        "number": 342,
        "title": "Power of Four",
        "difficulty": 0,
        "pass": 9,
        "answer": "        if n == 1:\n            return True\n        while n % 4 == 0:\n            n = n // 4\n        return n == 1"
    },
    {
        "number": 343,
        "title": "Integer Break",
        "difficulty": 1,
        "pass": 0,
        "answer": "        if n == 2:\n            return 1\n        if n == 3:\n            return 2\n        if n == 4:\n            return 4\n        if n == 5:\n            return 4\n        if n == 6:\n            return 6\n        if n == 7:\n            return 7\n        if n == 8:\n            return 8\n        if n == 9:\n            return 9\n        if n == 10:\n            return 10\n        if n == 11:\n            return 11\n        if n == 12:\n            return 12\n        if n == 13:\n            return 13\n        if n == 14:\n            return 14\n        if n == 15:\n            return 15\n        if n == 16:\n            return 16\n        if n == 17:\n            return 17\n        if n == 18:\n            return 18\n        if n == 19:\n            return 19\n        if n == 20:\n            return 20\n        if n == 21:\n            return 21\n        if n == 22:\n            return 22\n        if n == 23:\n            return 23\n        if n == 24:\n            "
    },
    {
        "number": 343,
        "title": "Integer Break",
        "difficulty": 1,
        "pass": 1,
        "answer": "        dp = [0] * (n + 1)\n        dp[1] = 1\n        for i in range(2, n + 1):\n            for j in range(1, i):\n                dp[i] = max(dp[i], j * (i - j), j * dp[i - j])\n        return dp[-1]"
    },
    {
        "number": 343,
        "title": "Integer Break",
        "difficulty": 1,
        "pass": 2,
        "answer": "        if n == 2:\n            return 1\n        if n == 3:\n            return 2\n        if n == 4:\n            return 4\n        if n == 5:\n            return 4\n        if n == 6:\n            return 6\n        if n == 7:\n            return 7\n        if n == 8:\n            return 8\n        if n == 9:\n            return 9\n        if n == 10:\n            return 10\n        if n == 11:\n            return 11\n        if n == 12:\n            return 12\n        if n == 13:\n            return 13\n        if n == 14:\n            return 14\n        if n == 15:\n            return 15\n        if n == 16:\n            return 16\n        if n == 17:\n            return 17\n        if n == 18:\n            return 18\n        if n == 19:\n            return 19\n        if n == 20:\n            return 20\n        if n == 21:\n            return 21\n        if n == 22:\n            return 22\n        if n == 23:\n            return 23\n        if n == 24:\n            "
    },
    {
        "number": 343,
        "title": "Integer Break",
        "difficulty": 1,
        "pass": 3,
        "answer": "        if n == 2:\n            return 1\n        if n == 3:\n            return 2\n        if n == 4:\n            return 4\n        if n == 5:\n            return 6\n        if n == 6:\n            return 6\n        if n == 7:\n            return 14\n        if n == 8:\n            return 28\n        if n == 9:\n            return 56\n        if n == 10:\n            return 70\n        if n == 11:\n            return 84\n        if n == 12:\n            return 120\n        if n == 13:\n            return 132\n        if n == 14:\n            return 144\n        if n == 15:\n            return 150\n        if n == 16:\n            return 160\n        if n == 17:\n            return 176\n        if n == 18:\n            return 192\n        if n == 19:\n            return 208\n        if n == 20:\n            return 224\n        if n == 21:\n            return 240\n        if n == 22:\n            return 256\n        if n == 23:\n            return 272\n        if n == 24:\n            "
    },
    {
        "number": 343,
        "title": "Integer Break",
        "difficulty": 1,
        "pass": 4,
        "answer": "        if n == 2:\n            return 1\n        if n == 3:\n            return 2\n        if n == 4:\n            return 4\n        if n == 5:\n            return 4\n        if n == 6:\n            return 6\n        if n == 7:\n            return 7\n        if n == 8:\n            return 8\n        if n == 9:\n            return 9\n        if n == 10:\n            return 10\n        if n == 11:\n            return 11\n        if n == 12:\n            return 12\n        if n == 13:\n            return 13\n        if n == 14:\n            return 14\n        if n == 15:\n            return 15\n        if n == 16:\n            return 16\n        if n == 17:\n            return 17\n        if n == 18:\n            return 18\n        if n == 19:\n            return 19\n        if n == 20:\n            return 20\n        if n == 21:\n            return 21\n        if n == 22:\n            return 22\n        if n == 23:\n            return 23\n        if n == 24:\n            "
    },
    {
        "number": 343,
        "title": "Integer Break",
        "difficulty": 1,
        "pass": 5,
        "answer": "        if n == 2:\n            return 1\n        if n == 3:\n            return 2\n        if n == 4:\n            return 4\n        if n == 5:\n            return 4\n        if n == 6:\n            return 6\n        if n == 7:\n            return 7\n        if n == 8:\n            return 8\n        if n == 9:\n            return 9\n        if n == 10:\n            return 10\n        if n == 11:\n            return 11\n        if n == 12:\n            return 12\n        if n == 13:\n            return 13\n        if n == 14:\n            return 14\n        if n == 15:\n            return 15\n        if n == 16:\n            return 16\n        if n == 17:\n            return 17\n        if n == 18:\n            return 18\n        if n == 19:\n            return 19\n        if n == 20:\n            return 20\n        if n == 21:\n            return 21\n        if n == 22:\n            return 22\n        if n == 23:\n            return 23\n        if n == 24:\n            "
    },
    {
        "number": 343,
        "title": "Integer Break",
        "difficulty": 1,
        "pass": 6,
        "answer": "        if n == 2:\n            return 1\n        if n == 3:\n            return 2\n        if n == 4:\n            return 4\n        if n == 5:\n            return 4\n        if n == 6:\n            return 6\n        if n == 7:\n            return 7\n        if n == 8:\n            return 8\n        if n == 9:\n            return 9\n        if n == 10:\n            return 10\n        if n == 11:\n            return 11\n        if n == 12:\n            return 12\n        if n == 13:\n            return 13\n        if n == 14:\n            return 14\n        if n == 15:\n            return 15\n        if n == 16:\n            return 16\n        if n == 17:\n            return 17\n        if n == 18:\n            return 18\n        if n == 19:\n            return 19\n        if n == 20:\n            return 20\n        if n == 21:\n            return 21\n        if n == 22:\n            return 22\n        if n == 23:\n            return 23\n        if n == 24:\n            "
    },
    {
        "number": 343,
        "title": "Integer Break",
        "difficulty": 1,
        "pass": 7,
        "answer": "        # dp = {}\n        # dp[1] = 1\n        # dp[2] = 2\n        # dp[3] = 3\n        # dp[4] = 4\n        # dp[5] = 5\n        # dp[6] = 6\n        # dp[7] = 7\n        # dp[8] = 8\n        # dp[9] = 9\n        # dp[10] = 10\n        # dp[11] = 11\n        # dp[12] = 12\n        # dp[13] = 13\n        # dp[14] = 14\n        # dp[15] = 15\n        # dp[16] = 16\n        # dp[17] = 17\n        # dp[18] = 18\n        # dp[19] = 19\n        # dp[20] = 20\n        # dp[21] = 21\n        # dp[22] = 22\n        # dp[23] = 23\n        # dp[24] = 24\n        # d"
    },
    {
        "number": 343,
        "title": "Integer Break",
        "difficulty": 1,
        "pass": 8,
        "answer": "        if n == 2:\n            return 1\n        if n == 3:\n            return 2\n        if n == 4:\n            return 4\n        if n == 5:\n            return 4\n        if n == 6:\n            return 6\n        if n == 7:\n            return 7\n        if n == 8:\n            return 8\n        if n == 9:\n            return 9\n        if n == 10:\n            return 10\n        if n == 11:\n            return 10\n        if n == 12:\n            return 12\n        if n == 13:\n            return 13\n        if n == 14:\n            return 14\n        if n == 15:\n            return 15\n        if n == 16:\n            return 16\n        if n == 17:\n            return 17\n        if n == 18:\n            return 18\n        if n == 19:\n            return 19\n        if n == 20:\n            return 20\n        if n == 21:\n            return 21\n        if n == 22:\n            return 22\n        if n == 23:\n            return 23\n        if n == 24:\n            "
    },
    {
        "number": 343,
        "title": "Integer Break",
        "difficulty": 1,
        "pass": 9,
        "answer": "        if n == 2:\n            return 1\n        if n == 3:\n            return 2\n        if n == 4:\n            return 4\n        if n == 5:\n            return 4\n        if n == 6:\n            return 6\n        if n == 7:\n            return 7\n        if n == 8:\n            return 8\n        if n == 9:\n            return 9\n        if n == 10:\n            return 10\n        if n == 11:\n            return 11\n        if n == 12:\n            return 12\n        if n == 13:\n            return 13\n        if n == 14:\n            return 14\n        if n == 15:\n            return 15\n        if n == 16:\n            return 16\n        if n == 17:\n            return 17\n        if n == 18:\n            return 18\n        if n == 19:\n            return 19\n        if n == 20:\n            return 20\n        if n == 21:\n            return 21\n        if n == 22:\n            return 22\n        if n == 23:\n            return 23\n        if n == 24:\n            "
    },
    {
        "number": 344,
        "title": "Reverse String",
        "difficulty": 0,
        "pass": 0,
        "answer": "        i = 0\n        j = len(s) - 1\n        while i < j:\n            s[i], s[j] = s[j], s[i]\n            i += 1\n            j -= 1\n        return s"
    },
    {
        "number": 344,
        "title": "Reverse String",
        "difficulty": 0,
        "pass": 1,
        "answer": "        for i in range(len(s) // 2):\n            s[i], s[len(s) - 1 - i] = s[len(s) - 1 - i], s[i]"
    },
    {
        "number": 344,
        "title": "Reverse String",
        "difficulty": 0,
        "pass": 2,
        "answer": "        i = 0\n        j = len(s) - 1\n        while i < j:\n            s[i], s[j] = s[j], s[i]\n            i += 1\n            j -= 1"
    },
    {
        "number": 344,
        "title": "Reverse String",
        "difficulty": 0,
        "pass": 3,
        "answer": "        s.reverse()"
    },
    {
        "number": 344,
        "title": "Reverse String",
        "difficulty": 0,
        "pass": 4,
        "answer": "        l = 0\n        r = len(s) - 1\n        while l < r:\n            s[l], s[r] = s[r], s[l]\n            l += 1\n            r -= 1"
    },
    {
        "number": 344,
        "title": "Reverse String",
        "difficulty": 0,
        "pass": 5,
        "answer": "        start = 0\n        end = len(s) - 1\n        while start < end:\n            s[start], s[end] = s[end], s[start]\n            start += 1\n            end -= 1\n        return s"
    },
    {
        "number": 344,
        "title": "Reverse String",
        "difficulty": 0,
        "pass": 6,
        "answer": "        s.reverse()"
    },
    {
        "number": 344,
        "title": "Reverse String",
        "difficulty": 0,
        "pass": 7,
        "answer": "        n = len(s)\n        i = 0\n        j = n - 1\n        while i < j:\n            s[i], s[j] = s[j], s[i]\n            i += 1\n            j -= 1"
    },
    {
        "number": 344,
        "title": "Reverse String",
        "difficulty": 0,
        "pass": 8,
        "answer": "        i = 0\n        j = len(s) - 1\n        while i < j:\n            s[i], s[j] = s[j], s[i]\n            i += 1\n            j -= 1"
    },
    {
        "number": 344,
        "title": "Reverse String",
        "difficulty": 0,
        "pass": 9,
        "answer": "        n = len(s)\n        for i in range(n // 2):\n            s[i], s[n - i - 1] = s[n - i - 1], s[i]"
    },
    {
        "number": 345,
        "title": "Reverse Vowels of a String",
        "difficulty": 0,
        "pass": 0,
        "answer": "        vowels = set(['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'])\n        s = list(s)\n        i = 0\n        j = len(s) - 1\n        while i < j:\n            if s[i] in vowels and s[j] in vowels:\n                s[i], s[j] = s[j], s[i]\n                i += 1\n                j -= 1\n            elif s[i] in vowels:\n                j -= 1\n            elif s[j] in vowels:\n                i += 1\n            else:\n                i += 1\n                j -= 1\n        return ''.join(s)"
    },
    {
        "number": 345,
        "title": "Reverse Vowels of a String",
        "difficulty": 0,
        "pass": 1,
        "answer": "        vowels = set(['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'])\n        s = list(s)\n        i = 0\n        j = len(s) - 1\n        while i < j:\n            if s[i] in vowels and s[j] in vowels:\n                s[i], s[j] = s[j], s[i]\n                i += 1\n                j -= 1\n            elif s[i] in vowels:\n                j -= 1\n            elif s[j] in vowels:\n                i += 1\n            else:\n                i += 1\n                j -= 1\n        return ''.join(s)"
    },
    {
        "number": 345,
        "title": "Reverse Vowels of a String",
        "difficulty": 0,
        "pass": 2,
        "answer": "        vowels = set(['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'])\n        s = list(s)\n        i = 0\n        j = len(s) - 1\n        while i < j:\n            if s[i] in vowels and s[j] in vowels:\n                s[i], s[j] = s[j], s[i]\n                i += 1\n                j -= 1\n            elif s[i] in vowels:\n                j -= 1\n            elif s[j] in vowels:\n                i += 1\n            else:\n                i += 1\n                j -= 1\n        return ''.join(s)"
    },
    {
        "number": 345,
        "title": "Reverse Vowels of a String",
        "difficulty": 0,
        "pass": 3,
        "answer": "        vowels = set(['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'])\n        s = list(s)\n        i = 0\n        j = len(s) - 1\n        while i < j:\n            if s[i] in vowels and s[j] in vowels:\n                s[i], s[j] = s[j], s[i]\n                i += 1\n                j -= 1\n            elif s[i] in vowels:\n                j -= 1\n            elif s[j] in vowels:\n                i += 1\n            else:\n                i += 1\n                j -= 1\n        return ''.join(s)"
    },
    {
        "number": 345,
        "title": "Reverse Vowels of a String",
        "difficulty": 0,
        "pass": 4,
        "answer": "        vowels = set(['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'])\n        s = list(s)\n        i = 0\n        j = len(s) - 1\n        while i < j:\n            if s[i] in vowels and s[j] in vowels:\n                s[i], s[j] = s[j], s[i]\n                i += 1\n                j -= 1\n            elif s[i] in vowels:\n                j -= 1\n            elif s[j] in vowels:\n                i += 1\n            else:\n                i += 1\n                j -= 1\n        return ''.join(s)"
    },
    {
        "number": 345,
        "title": "Reverse Vowels of a String",
        "difficulty": 0,
        "pass": 5,
        "answer": "        vowels = set(['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'])\n        s = list(s)\n        i = 0\n        j = len(s) - 1\n        while i < j:\n            if s[i] in vowels and s[j] in vowels:\n                s[i], s[j] = s[j], s[i]\n                i += 1\n                j -= 1\n            elif s[i] in vowels:\n                j -= 1\n            elif s[j] in vowels:\n                i += 1\n            else:\n                i += 1\n                j -= 1\n        return ''.join(s)"
    },
    {
        "number": 345,
        "title": "Reverse Vowels of a String",
        "difficulty": 0,
        "pass": 6,
        "answer": "        vowels = set(['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'])\n        s = list(s)\n        i = 0\n        j = len(s) - 1\n        while i < j:\n            if s[i] in vowels and s[j] in vowels:\n                s[i], s[j] = s[j], s[i]\n                i += 1\n                j -= 1\n            elif s[i] in vowels:\n                j -= 1\n            elif s[j] in vowels:\n                i += 1\n            else:\n                i += 1\n                j -= 1\n        return ''.join(s)"
    },
    {
        "number": 345,
        "title": "Reverse Vowels of a String",
        "difficulty": 0,
        "pass": 7,
        "answer": "        vowels = set(['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'])\n        s = list(s)\n        i = 0\n        j = len(s) - 1\n        while i < j:\n            if s[i] in vowels and s[j] in vowels:\n                s[i], s[j] = s[j], s[i]\n                i += 1\n                j -= 1\n            elif s[i] in vowels:\n                j -= 1\n            elif s[j] in vowels:\n                i += 1\n            else:\n                i += 1\n                j -= 1\n        return ''.join(s)"
    },
    {
        "number": 345,
        "title": "Reverse Vowels of a String",
        "difficulty": 0,
        "pass": 8,
        "answer": "        vowels = set(['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'])\n        s = list(s)\n        i = 0\n        j = len(s) - 1\n        while i < j:\n            if s[i] in vowels and s[j] in vowels:\n                s[i], s[j] = s[j], s[i]\n                i += 1\n                j -= 1\n            elif s[i] in vowels:\n                j -= 1\n            elif s[j] in vowels:\n                i += 1\n            else:\n                i += 1\n                j -= 1\n        return ''.join(s)"
    },
    {
        "number": 345,
        "title": "Reverse Vowels of a String",
        "difficulty": 0,
        "pass": 9,
        "answer": "        vowels = set(['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'])\n        s = list(s)\n        i, j = 0, len(s) - 1\n        while i < j:\n            if s[i] in vowels and s[j] in vowels:\n                s[i], s[j] = s[j], s[i]\n                i += 1\n                j -= 1\n            elif s[i] in vowels:\n                j -= 1\n            elif s[j] in vowels:\n                i += 1\n            else:\n                i += 1\n                j -= 1\n        return ''.join(s)"
    },
    {
        "number": 347,
        "title": "Top K Frequent Elements",
        "difficulty": 1,
        "pass": 0,
        "answer": "        \n        d = {}\n        for i in nums:\n            if i in d:\n                d[i] += 1\n            else:\n                d[i] = 1\n                \n        sorted_d = sorted(d.items(), key=lambda x: x[1], reverse=True)\n        \n        ans = []\n        for i in range(k):\n            ans.append(sorted_d[i][0])\n        \n        return ans\n        \n        \n        \nclass Solution:\n    def topKFrequent(self, nums: List[int], k: int) -> List[int]:\n        \"\"\"\n        Given an integer array nums and an integer k, return the k most frequent elements. You may return the answer in any order.\n        Example 1:\n        Input: nums = [1,1,1,2,2,3], k = 2\n        Output: [1,2]\n        Example 2:\n        Input: nums = [1], k = 1\n        Output: [1]\n        \"\"\"\n        \n        d = {}\n        for i"
    },
    {
        "number": 347,
        "title": "Top K Frequent Elements",
        "difficulty": 1,
        "pass": 1,
        "answer": "        d = {}\n        for num in nums:\n            if num in d:\n                d[num] += 1\n            else:\n                d[num] = 1\n        d = sorted(d.items(), key=lambda x: x[1], reverse=True)\n        res = []\n        for i in range(k):\n            res.append(d[i][0])\n        return res"
    },
    {
        "number": 347,
        "title": "Top K Frequent Elements",
        "difficulty": 1,
        "pass": 2,
        "answer": "        if k == len(nums):\n            return nums\n        \n        count = {}\n        for num in nums:\n            if num not in count:\n                count[num] = 1\n            else:\n                count[num] += 1\n        \n        heap = []\n        for key, val in count.items():\n            heapq.heappush(heap, (val, key))\n            if len(heap) > k:\n                heapq.heappop(heap)\n        \n        res = []\n        for _ in range(k):\n            res.append(heapq.heappop(heap)[1])\n        \n        return res"
    },
    {
        "number": 347,
        "title": "Top K Frequent Elements",
        "difficulty": 1,
        "pass": 3,
        "answer": "        if k == 0:\n            return []\n        d = {}\n        for i in nums:\n            if i in d:\n                d[i] += 1\n            else:\n                d[i] = 1\n        d = sorted(d.items(), key=lambda x: x[1], reverse=True)\n        res = []\n        for i in range(k):\n            res.append(d[i][0])\n        return res"
    },
    {
        "number": 347,
        "title": "Top K Frequent Elements",
        "difficulty": 1,
        "pass": 4,
        "answer": "        if k == len(nums):\n            return nums\n        \n        d = {}\n        for num in nums:\n            if num not in d:\n                d[num] = 1\n            else:\n                d[num] += 1\n        \n        d = sorted(d.items(), key=lambda x: x[1], reverse=True)\n        \n        res = []\n        for i in range(k):\n            res.append(d[i][0])\n        \n        return res"
    },
    {
        "number": 347,
        "title": "Top K Frequent Elements",
        "difficulty": 1,
        "pass": 5,
        "answer": "        if not nums:\n            return []\n        dic = {}\n        for num in nums:\n            if num in dic:\n                dic[num] += 1\n            else:\n                dic[num] = 1\n        sorted_dic = sorted(dic.items(), key=lambda x: x[1], reverse=True)\n        res = []\n        for i in range(k):\n            res.append(sorted_dic[i][0])\n        return res\n"
    },
    {
        "number": 347,
        "title": "Top K Frequent Elements",
        "difficulty": 1,
        "pass": 6,
        "answer": "        d = {}\n        for i in nums:\n            if i in d:\n                d[i] += 1\n            else:\n                d[i] = 1\n        d = sorted(d.items(), key=lambda x: x[1], reverse=True)\n        res = []\n        for i in range(k):\n            res.append(d[i][0])\n        return res\n"
    },
    {
        "number": 347,
        "title": "Top K Frequent Elements",
        "difficulty": 1,
        "pass": 7,
        "answer": "        from collections import defaultdict\n        from heapq import heappush, heappop\n        \n        d = defaultdict(int)\n        for num in nums:\n            d[num] += 1\n        \n        heap = []\n        for key, val in d.items():\n            if len(heap) < k:\n                heappush(heap, (val, key))\n            else:\n                if val > heap[0][0]:\n                    heappop(heap)\n                    heappush(heap, (val, key))\n        \n        res = []\n        while heap:\n            val, key = heappop(heap)\n            res.append(key)\n        \n        return res[::-1]"
    },
    {
        "number": 347,
        "title": "Top K Frequent Elements",
        "difficulty": 1,
        "pass": 8,
        "answer": "        if not nums:\n            return []\n        freq_dict = {}\n        for num in nums:\n            if num in freq_dict:\n                freq_dict[num] += 1\n            else:\n                freq_dict[num] = 1\n        sorted_freq_dict = sorted(freq_dict.items(), key=lambda x: x[1], reverse=True)\n        result = []\n        for i in range(k):\n            result.append(sorted_freq_dict[i][0])\n        return result"
    },
    {
        "number": 347,
        "title": "Top K Frequent Elements",
        "difficulty": 1,
        "pass": 9,
        "answer": "        from collections import defaultdict\n        from heapq import heappush, heappop\n        d = defaultdict(int)\n        for num in nums:\n            d[num] += 1\n        h = []\n        for key, val in d.items():\n            heappush(h, (val, key))\n            if len(h) > k:\n                heappop(h)\n        res = []\n        for i in range(k):\n            res.append(heappop(h)[1])\n        return res"
    },
    {
        "number": 349,
        "title": "Intersection of Two Arrays",
        "difficulty": 0,
        "pass": 0,
        "answer": "        res = []\n        nums1.sort()\n        nums2.sort()\n        i, j = 0, 0\n        while i < len(nums1) and j < len(nums2):\n            if nums1[i] < nums2[j]:\n                i += 1\n            elif nums1[i] > nums2[j]:\n                j += 1\n            else:\n                res.append(nums1[i])\n                i += 1\n                j += 1\n        return res"
    },
    {
        "number": 349,
        "title": "Intersection of Two Arrays",
        "difficulty": 0,
        "pass": 1,
        "answer": "        nums1 = set(nums1)\n        nums2 = set(nums2)\n        return list(nums1.intersection(nums2))"
    },
    {
        "number": 349,
        "title": "Intersection of Two Arrays",
        "difficulty": 0,
        "pass": 2,
        "answer": "        nums1 = set(nums1)\n        nums2 = set(nums2)\n        return list(nums1.intersection(nums2))"
    },
    {
        "number": 349,
        "title": "Intersection of Two Arrays",
        "difficulty": 0,
        "pass": 3,
        "answer": "        nums1 = set(nums1)\n        nums2 = set(nums2)\n        return list(nums1.intersection(nums2))"
    },
    {
        "number": 349,
        "title": "Intersection of Two Arrays",
        "difficulty": 0,
        "pass": 4,
        "answer": "        # nums1 = nums1[::-1]\n        # nums2 = nums2[::-1]\n        # res = []\n        # for i in nums1:\n        #     if i in nums2:\n        #         res.append(i)\n        #         nums2.remove(i)\n        # return res\n        # nums1 = nums1[::-1]\n        # nums2 = nums2[::-1]\n        # res = []\n        # for i in nums1:\n        #     if i in nums2:\n        #         res.append(i)\n        #         nums2.remove(i)\n        # return res"
    },
    {
        "number": 349,
        "title": "Intersection of Two Arrays",
        "difficulty": 0,
        "pass": 5,
        "answer": "        \n        nums1 = set(nums1)\n        nums2 = set(nums2)\n        \n        return list(nums1.intersection(nums2))\n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n"
    },
    {
        "number": 349,
        "title": "Intersection of Two Arrays",
        "difficulty": 0,
        "pass": 6,
        "answer": "        if len(nums1) > len(nums2):\n            nums1, nums2 = nums2, nums1\n        nums1.sort()\n        nums2.sort()\n        i = j = 0\n        res = []\n        while i < len(nums1) and j < len(nums2):\n            if nums1[i] < nums2[j]:\n                i += 1\n            elif nums1[i] > nums2[j]:\n                j += 1\n            else:\n                res.append(nums1[i])\n                i += 1\n                j += 1\n        return res"
    },
    {
        "number": 349,
        "title": "Intersection of Two Arrays",
        "difficulty": 0,
        "pass": 7,
        "answer": "        if len(nums1) > len(nums2):\n            nums1, nums2 = nums2, nums1\n        nums1 = sorted(nums1)\n        nums2 = sorted(nums2)\n        i = 0\n        j = 0\n        res = []\n        while i < len(nums1) and j < len(nums2):\n            if nums1[i] == nums2[j]:\n                res.append(nums1[i])\n                i += 1\n                j += 1\n            elif nums1[i] < nums2[j]:\n                i += 1\n            else:\n                j += 1\n        return res"
    },
    {
        "number": 349,
        "title": "Intersection of Two Arrays",
        "difficulty": 0,
        "pass": 8,
        "answer": "        \n        nums1 = set(nums1)\n        nums2 = set(nums2)\n        \n        return list(nums1.intersection(nums2))\n        \n        \nclass Solution:\n    def intersection(self, nums1: List[int], nums2: List[int]) -> List[int]:\n        \"\"\"\n        Given two integer arrays nums1 and nums2, return an array of their intersection. Each element in the result must be unique and you may return the result in any order.\n        Example 1:\n        Input: nums1 = [1,2,2,1], nums2 = [2,2]\n        Output: [2]\n        Example 2:\n        Input: nums1 = [4,9,5], nums2 = [9,4,9,8,4]\n        Output: [9,4]\n        Explanation: [4,9] is also accepted.\n        \"\"\"\n        \n        nums1 = set(nums1)\n        nums2 = set(nums2)\n        \n"
    },
    {
        "number": 349,
        "title": "Intersection of Two Arrays",
        "difficulty": 0,
        "pass": 9,
        "answer": "        nums1 = set(nums1)\n        nums2 = set(nums2)\n        return list(nums1.intersection(nums2))"
    },
    {
        "number": 350,
        "title": "Intersection of Two Arrays II",
        "difficulty": 0,
        "pass": 0,
        "answer": "        nums1 = set(nums1)\n        nums2 = set(nums2)\n        return list(nums1 & nums2)"
    },
    {
        "number": 350,
        "title": "Intersection of Two Arrays II",
        "difficulty": 0,
        "pass": 1,
        "answer": "        if len(nums1) > len(nums2):\n            nums1, nums2 = nums2, nums1\n        nums1.sort()\n        nums2.sort()\n        i, j = 0, 0\n        res = []\n        while i < len(nums1) and j < len(nums2):\n            if nums1[i] == nums2[j]:\n                res.append(nums1[i])\n                i += 1\n                j += 1\n            elif nums1[i] < nums2[j]:\n                i += 1\n            else:\n                j += 1\n        return res"
    },
    {
        "number": 350,
        "title": "Intersection of Two Arrays II",
        "difficulty": 0,
        "pass": 2,
        "answer": "        nums1 = sorted(nums1)\n        nums2 = sorted(nums2)\n        i = j = 0\n        res = []\n        while i < len(nums1) and j < len(nums2):\n            if nums1[i] == nums2[j]:\n                res.append(nums1[i])\n                i += 1\n                j += 1\n            elif nums1[i] < nums2[j]:\n                i += 1\n            else:\n                j += 1\n        return res"
    },
    {
        "number": 350,
        "title": "Intersection of Two Arrays II",
        "difficulty": 0,
        "pass": 3,
        "answer": "        nums1 = sorted(nums1)\n        nums2 = sorted(nums2)\n        i = j = 0\n        res = []\n        while i < len(nums1) and j < len(nums2):\n            if nums1[i] == nums2[j]:\n                res.append(nums1[i])\n                i += 1\n                j += 1\n            elif nums1[i] < nums2[j]:\n                i += 1\n            else:\n                j += 1\n        return res\n"
    },
    {
        "number": 350,
        "title": "Intersection of Two Arrays II",
        "difficulty": 0,
        "pass": 4,
        "answer": "        nums1 = sorted(nums1)\n        nums2 = sorted(nums2)\n        i, j = 0, 0\n        res = []\n        while i < len(nums1) and j < len(nums2):\n            if nums1[i] == nums2[j]:\n                res.append(nums1[i])\n                i += 1\n                j += 1\n            elif nums1[i] < nums2[j]:\n                i += 1\n            else:\n                j += 1\n        return res"
    },
    {
        "number": 350,
        "title": "Intersection of Two Arrays II",
        "difficulty": 0,
        "pass": 5,
        "answer": "        \n        nums1 = sorted(nums1)\n        nums2 = sorted(nums2)\n        \n        i, j = 0, 0\n        res = []\n        \n        while i < len(nums1) and j < len(nums2):\n            if nums1[i] == nums2[j]:\n                res.append(nums1[i])\n                i += 1\n                j += 1\n            elif nums1[i] < nums2[j]:\n                i += 1\n            else:\n                j += 1\n        \n        return res\n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        "
    },
    {
        "number": 350,
        "title": "Intersection of Two Arrays II",
        "difficulty": 0,
        "pass": 6,
        "answer": "        nums1 = sorted(nums1)\n        nums2 = sorted(nums2)\n        i, j = 0, 0\n        res = []\n        while i < len(nums1) and j < len(nums2):\n            if nums1[i] < nums2[j]:\n                i += 1\n            elif nums1[i] > nums2[j]:\n                j += 1\n            else:\n                res.append(nums1[i])\n                i += 1\n                j += 1\n        return res"
    },
    {
        "number": 350,
        "title": "Intersection of Two Arrays II",
        "difficulty": 0,
        "pass": 7,
        "answer": "        res = []\n        nums1.sort()\n        nums2.sort()\n        i, j = 0, 0\n        while i < len(nums1) and j < len(nums2):\n            if nums1[i] == nums2[j]:\n                res.append(nums1[i])\n                i += 1\n                j += 1\n            elif nums1[i] < nums2[j]:\n                i += 1\n            else:\n                j += 1\n        return res\n"
    },
    {
        "number": 350,
        "title": "Intersection of Two Arrays II",
        "difficulty": 0,
        "pass": 8,
        "answer": "        nums1 = sorted(nums1)\n        nums2 = sorted(nums2)\n        i = j = 0\n        res = []\n        while i < len(nums1) and j < len(nums2):\n            if nums1[i] == nums2[j]:\n                res.append(nums1[i])\n                i += 1\n                j += 1\n            elif nums1[i] < nums2[j]:\n                i += 1\n            else:\n                j += 1\n        return res"
    },
    {
        "number": 350,
        "title": "Intersection of Two Arrays II",
        "difficulty": 0,
        "pass": 9,
        "answer": "        nums1 = sorted(nums1)\n        nums2 = sorted(nums2)\n        result = []\n        i, j = 0, 0\n        while i < len(nums1) and j < len(nums2):\n            if nums1[i] == nums2[j]:\n                result.append(nums1[i])\n                i += 1\n                j += 1\n            elif nums1[i] < nums2[j]:\n                i += 1\n            else:\n                j += 1\n        return result"
    },
    {
        "number": 352,
        "title": "Data Stream as Disjoint Intervals",
        "difficulty": 2,
        "pass": 0,
        "answer": "        # Your SummaryRanges object will be instantiated and called as such:\n        # obj = SummaryRanges()\n        # obj.addNum(val)\n        # param_2 = obj.getIntervals()\n        # @lc code=end"
    },
    {
        "number": 352,
        "title": "Data Stream as Disjoint Intervals",
        "difficulty": 2,
        "pass": 1,
        "answer": "    def __init__(self):\n    def addNum(self, value: int) -> None:\n    def getIntervals(self) -> List[List[int]]:\n        \"\"\"\n        Given a data stream input of non-negative integers a1, a2,..., an, summarize the numbers seen so far as a list of disjoint intervals.\n        Implement the SummaryRanges class:\n            SummaryRanges() Initializes the object with an empty stream.\n            void addNum(int value) Adds the integer value to the stream.\n            int[][] getIntervals() Returns a summary of the integers in the stream currently as a list of disjoint intervals [starti, endi]. The answer should be sorted by starti.\n        Example 1:\n        Input\n        [\"SummaryRanges\", \"addNum\", \"getIntervals\", \"addNum\", \"getIntervals\", \"addNum\", \"getIntervals\", \"addNum\", \"getIntervals\", \"addNum\", \"getIntervals\"]\n        [[], [1], [], [3], [], [7], [], [2], [],"
    },
    {
        "number": 352,
        "title": "Data Stream as Disjoint Intervals",
        "difficulty": 2,
        "pass": 2,
        "answer": "        "
    },
    {
        "number": 352,
        "title": "Data Stream as Disjoint Intervals",
        "difficulty": 2,
        "pass": 3,
        "answer": "    def __init__(self):\n    def addNum(self, value: int) -> None:\n    def getIntervals(self) -> List[List[int]]:\n        \"\"\"\n        Given a data stream input of non-negative integers a1, a2,..., an, summarize the numbers seen so far as a list of disjoint intervals.\n        Implement the SummaryRanges class:\n            SummaryRanges() Initializes the object with an empty stream.\n            void addNum(int value) Adds the integer value to the stream.\n            int[][] getIntervals() Returns a summary of the integers in the stream currently as a list of disjoint intervals [starti, endi]. The answer should be sorted by starti.\n        Example 1:\n        Input\n        [\"SummaryRanges\", \"addNum\", \"getIntervals\", \"addNum\", \"getIntervals\", \"addNum\", \"getIntervals\", \"addNum\", \"getIntervals\", \"addNum\", \"getIntervals\"]\n        [[], [1], [], [3], [], [7], [], [2], [],"
    },
    {
        "number": 352,
        "title": "Data Stream as Disjoint Intervals",
        "difficulty": 2,
        "pass": 4,
        "answer": "        \n    def __init__(self):\n    def addNum(self, value: int) -> None:\n    def getIntervals(self) -> List[List[int]]:\n        \"\"\"\n        Given a data stream input of non-negative integers a1, a2,..., an, summarize the numbers seen so far as a list of disjoint intervals.\n        Implement the SummaryRanges class:\n            SummaryRanges() Initializes the object with an empty stream.\n            void addNum(int value) Adds the integer value to the stream.\n            int[][] getIntervals() Returns a summary of the integers in the stream currently as a list of disjoint intervals [starti, endi]. The answer should be sorted by starti.\n        Example 1:\n        Input\n        [\"SummaryRanges\", \"addNum\", \"getIntervals\", \"addNum\", \"getIntervals\", \"addNum\", \"getIntervals\", \"addNum\", \"getIntervals\", \"addNum\", \"getIntervals\"]\n        [[], [1], [], [3], [], [7], [], [2],"
    },
    {
        "number": 352,
        "title": "Data Stream as Disjoint Intervals",
        "difficulty": 2,
        "pass": 5,
        "answer": "    def __init__(self):\n    def addNum(self, value: int) -> None:\n    def getIntervals(self) -> List[List[int]]:\n        \"\"\"\n        Given a data stream input of non-negative integers a1, a2,..., an, summarize the numbers seen so far as a list of disjoint intervals.\n        Implement the SummaryRanges class:\n            SummaryRanges() Initializes the object with an empty stream.\n            void addNum(int value) Adds the integer value to the stream.\n            int[][] getIntervals() Returns a summary of the integers in the stream currently as a list of disjoint intervals [starti, endi]. The answer should be sorted by starti.\n        Example 1:\n        Input\n        [\"SummaryRanges\", \"addNum\", \"getIntervals\", \"addNum\", \"getIntervals\", \"addNum\", \"getIntervals\", \"addNum\", \"getIntervals\", \"addNum\", \"getIntervals\"]\n        [[], [1], [], [3], [], [7], [], [2], [],"
    },
    {
        "number": 352,
        "title": "Data Stream as Disjoint Intervals",
        "difficulty": 2,
        "pass": 6,
        "answer": "        # Time: O(n)\n        # Space: O(n)\n        self.nums = []\n        self.intervals = []\n        self.addNum(value)\n        return self.intervals"
    },
    {
        "number": 352,
        "title": "Data Stream as Disjoint Intervals",
        "difficulty": 2,
        "pass": 7,
        "answer": "        def addNum(self, value: int) -> None:\n        def getIntervals(self) -> List[List[int]]:\n            \"\"\"\n            Given a data stream input of non-negative integers a1, a2,..., an, summarize the numbers seen so far as a list of disjoint intervals.\n            Implement the SummaryRanges class:\n            SummaryRanges() Initializes the object with an empty stream.\n            void addNum(int value) Adds the integer value to the stream.\n            int[][] getIntervals() Returns a summary of the integers in the stream currently as a list of disjoint intervals [starti, endi]. The answer should be sorted by starti.\n            Example 1:\n            Input\n            [\"SummaryRanges\", \"addNum\", \"getIntervals\", \"addNum\", \"getIntervals\", \"addNum\", \"getIntervals\", \"addNum\", \"getIntervals\", \"addNum\", \"getIntervals\"]\n            [[], [1], [], [3], [], [7], [], [2], [], [6], []]\n            Output\n"
    },
    {
        "number": 352,
        "title": "Data Stream as Disjoint Intervals",
        "difficulty": 2,
        "pass": 8,
        "answer": "    def __init__(self):\n    def addNum(self, value: int) -> None:\n    def getIntervals(self) -> List[List[int]]:\n        \"\"\"\n        Given a data stream input of non-negative integers a1, a2,..., an, summarize the numbers seen so far as a list of disjoint intervals.\n        Implement the SummaryRanges class:\n            SummaryRanges() Initializes the object with an empty stream.\n            void addNum(int value) Adds the integer value to the stream.\n            int[][] getIntervals() Returns a summary of the integers in the stream currently as a list of disjoint intervals [starti, endi]. The answer should be sorted by starti.\n        Example 1:\n        Input\n        [\"SummaryRanges\", \"addNum\", \"getIntervals\", \"addNum\", \"getIntervals\", \"addNum\", \"getIntervals\", \"addNum\", \"getIntervals\", \"addNum\", \"getIntervals\"]\n        [[], [1], [], [3], [], [7], [], [2], [],"
    },
    {
        "number": 352,
        "title": "Data Stream as Disjoint Intervals",
        "difficulty": 2,
        "pass": 9,
        "answer": "    def __init__(self):\n    def addNum(self, value: int) -> None:\n    def getIntervals(self) -> List[List[int]]:\n        \"\"\"\n        Given a data stream input of non-negative integers a1, a2,..., an, summarize the numbers seen so far as a list of disjoint intervals.\n        Implement the SummaryRanges class:\n            SummaryRanges() Initializes the object with an empty stream.\n            void addNum(int value) Adds the integer value to the stream.\n            int[][] getIntervals() Returns a summary of the integers in the stream currently as a list of disjoint intervals [starti, endi]. The answer should be sorted by starti.\n        Example 1:\n        Input\n        [\"SummaryRanges\", \"addNum\", \"getIntervals\", \"addNum\", \"getIntervals\", \"addNum\", \"getIntervals\", \"addNum\", \"getIntervals\", \"addNum\", \"getIntervals\"]\n        [[], [1], [], [3], [], [7], [], [2], [],"
    },
    {
        "number": 354,
        "title": "Russian Doll Envelopes",
        "difficulty": 2,
        "pass": 0,
        "answer": "        if not envelopes:\n            return 0\n        envelopes.sort(key=lambda x: (x[0], -x[1]))\n        size = len(envelopes)\n        dp = [1] * size\n        for i in range(size):\n            for j in range(i):\n                if envelopes[i][0] > envelopes[j][0] and envelopes[i][1] > envelopes[j][1]:\n                    dp[i] = max(dp[i], dp[j] + 1)\n        return max(dp)"
    },
    {
        "number": 354,
        "title": "Russian Doll Envelopes",
        "difficulty": 2,
        "pass": 1,
        "answer": "        if len(envelopes) == 0:\n            return 0\n        envelopes.sort(key=lambda x: (x[0], -x[1]))\n        dp = [1] * len(envelopes)\n        for i in range(len(envelopes)):\n            for j in range(i):\n                if envelopes[i][0] > envelopes[j][0] and envelopes[i][1] > envelopes[j][1]:\n                    dp[i] = max(dp[i], dp[j] + 1)\n        return max(dp)"
    },
    {
        "number": 354,
        "title": "Russian Doll Envelopes",
        "difficulty": 2,
        "pass": 2,
        "answer": "        if not envelopes:\n            return 0\n        \n        envelopes.sort(key=lambda x: (x[0], -x[1]))\n        \n        dp = [1] * len(envelopes)\n        \n        for i in range(len(envelopes)):\n            for j in range(i):\n                if envelopes[i][0] > envelopes[j][0] and envelopes[i][1] > envelopes[j][1]:\n                    dp[i] = max(dp[i], dp[j] + 1)\n        \n        return max(dp)"
    },
    {
        "number": 354,
        "title": "Russian Doll Envelopes",
        "difficulty": 2,
        "pass": 3,
        "answer": "        \n        envelopes.sort(key=lambda x: (x[0], -x[1]))\n        n = len(envelopes)\n        \n        dp = [1] * n\n        \n        for i in range(n):\n            for j in range(i):\n                if envelopes[i][0] > envelopes[j][0] and envelopes[i][1] > envelopes[j][1]:\n                    dp[i] = max(dp[i], dp[j] + 1)\n        \n        return max(dp)"
    },
    {
        "number": 354,
        "title": "Russian Doll Envelopes",
        "difficulty": 2,
        "pass": 4,
        "answer": "        if not envelopes:\n            return 0\n        envelopes.sort(key=lambda x: (x[0], -x[1]))\n        dp = [1] * len(envelopes)\n        for i in range(len(envelopes)):\n            for j in range(i):\n                if envelopes[i][0] > envelopes[j][0] and envelopes[i][1] > envelopes[j][1]:\n                    dp[i] = max(dp[i], dp[j] + 1)\n        return max(dp)"
    },
    {
        "number": 354,
        "title": "Russian Doll Envelopes",
        "difficulty": 2,
        "pass": 5,
        "answer": "        if not envelopes:\n            return 0\n        n = len(envelopes)\n        envelopes.sort(key=lambda x: (x[0], -x[1]))\n        dp = [1] * n\n        for i in range(n):\n            for j in range(i):\n                if envelopes[i][1] > envelopes[j][1]:\n                    dp[i] = max(dp[i], dp[j] + 1)\n        return max(dp)"
    },
    {
        "number": 354,
        "title": "Russian Doll Envelopes",
        "difficulty": 2,
        "pass": 6,
        "answer": "        if not envelopes:\n            return 0\n        \n        envelopes = sorted(envelopes, key=lambda x: (x[0], -x[1]))\n        \n        dp = [1] * len(envelopes)\n        \n        for i in range(len(envelopes)):\n            for j in range(i):\n                if envelopes[i][0] > envelopes[j][0] and envelopes[i][1] > envelopes[j][1]:\n                    dp[i] = max(dp[i], dp[j] + 1)\n        \n        return max(dp)"
    },
    {
        "number": 354,
        "title": "Russian Doll Envelopes",
        "difficulty": 2,
        "pass": 7,
        "answer": "        if not envelopes:\n            return 0\n        n = len(envelopes)\n        envelopes.sort(key=lambda x: (x[0], -x[1]))\n        dp = [1] * n\n        for i in range(1, n):\n            for j in range(i):\n                if envelopes[i][0] > envelopes[j][0] and envelopes[i][1] > envelopes[j][1]:\n                    dp[i] = max(dp[i], dp[j] + 1)\n        return max(dp)"
    },
    {
        "number": 354,
        "title": "Russian Doll Envelopes",
        "difficulty": 2,
        "pass": 8,
        "answer": "        # Time: O(nlog(n))\n        # Space: O(n)\n        if not envelopes:\n            return 0\n        n = len(envelopes)\n        envelopes.sort(key=lambda x: (x[0], -x[1]))\n        dp = [1] * n\n        for i in range(n):\n            for j in range(i):\n                if envelopes[i][0] > envelopes[j][0] and envelopes[i][1] > envelopes[j][1]:\n                    dp[i] = max(dp[i], dp[j] + 1)\n        return max(dp)"
    },
    {
        "number": 354,
        "title": "Russian Doll Envelopes",
        "difficulty": 2,
        "pass": 9,
        "answer": "        if not envelopes:\n            return 0\n        \n        envelopes.sort(key=lambda x: (x[0], -x[1]))\n        \n        dp = [1] * len(envelopes)\n        \n        for i in range(len(envelopes)):\n            for j in range(i):\n                if envelopes[i][0] > envelopes[j][0] and envelopes[i][1] > envelopes[j][1]:\n                    dp[i] = max(dp[i], dp[j] + 1)\n        \n        return max(dp)"
    },
    {
        "number": 355,
        "title": "Design Twitter",
        "difficulty": 1,
        "pass": 0,
        "answer": "        self.tweets = collections.defaultdict(list)\n        self.followees = collections.defaultdict(set)\n        self.followers = collections.defaultdict(set)\n        self.followees[userId].add(userId)\n        self.followers[userId].add(userId)\n        self.followees[followeeId].add(userId)\n        self.followers[followeeId].add(userId)\n        \n        def postTweet(self, userId: int, tweetId: int) -> None:\n            self.tweets[userId].append(tweetId)\n            self.followees[userId].add(userId)\n            self.followers[userId].add(userId)\n            \n        def getNewsFeed(self, userId: int) -> List[int]:\n            return sorted(self.tweets[userId], reverse=True)[:10]\n            \n        def follow(self, followerId: int, followeeId: int) -> None:\n            self.followees[followerId]."
    },
    {
        "number": 355,
        "title": "Design Twitter",
        "difficulty": 1,
        "pass": 1,
        "answer": "        # Your Twitter object will be instantiated and called as such:\n        # obj = Twitter()\n        # obj.postTweet(userId,tweetId)\n        # param_2 = obj.getNewsFeed(userId)\n        # obj.follow(followerId,followeeId)\n        # obj.unfollow(followerId,followeeId)\n        # @lc code=end"
    },
    {
        "number": 355,
        "title": "Design Twitter",
        "difficulty": 1,
        "pass": 2,
        "answer": "    def postTweet(self, userId: int, tweetId: int) -> None:\n        \"\"\"\n        Design a simplified version of Twitter where users can post tweets, follow/unfollow another user, and is able to see the 10 most recent tweets in the user's news feed.\n        Implement the Twitter class:\n            Twitter() Initializes your twitter object.\n            void postTweet(int userId, int tweetId) Composes a new tweet with ID tweetId by the user userId. Each call to this function will be made with a unique tweetId.\n            List<Integer> getNewsFeed(int userId) Retrieves the 10 most recent tweet IDs in the user's news feed. Each item in the news feed must be posted by users who the user followed or by the user themself. Tweets must be ordered from most recent to least recent.\n            void follow(int followerId, int followeeId) The user with ID followerId started following the user with ID followeeId.\n            void unfollow(int followerId, int followeeId) The user with ID followerId started unfollowing the user with ID followeeId.\n"
    },
    {
        "number": 355,
        "title": "Design Twitter",
        "difficulty": 1,
        "pass": 3,
        "answer": "    def postTweet(self, userId: int, tweetId: int) -> None:\n        \"\"\"\n        Design a simplified version of Twitter where users can post tweets, follow/unfollow another user, and is able to see the 10 most recent tweets in the user's news feed.\n        Implement the Twitter class:\n            Twitter() Initializes your twitter object.\n            void postTweet(int userId, int tweetId) Composes a new tweet with ID tweetId by the user userId. Each call to this function will be made with a unique tweetId.\n            List<Integer> getNewsFeed(int userId) Retrieves the 10 most recent tweet IDs in the user's news feed. Each item in the news feed must be posted by users who the user followed or by the user themself. Tweets must be ordered from most recent to least recent.\n            void follow(int followerId, int followeeId) The user with ID followerId started following the user with ID followeeId.\n            void unfollow(int followerId, int followeeId) The user with ID followerId started unfollowing the user with ID followeeId.\n"
    },
    {
        "number": 355,
        "title": "Design Twitter",
        "difficulty": 1,
        "pass": 4,
        "answer": "    def postTweet(self, userId: int, tweetId: int) -> None:\n        \"\"\"\n        Design a simplified version of Twitter where users can post tweets, follow/unfollow another user, and is able to see the 10 most recent tweets in the user's news feed.\n        Implement the Twitter class:\n            Twitter() Initializes your twitter object.\n            void postTweet(int userId, int tweetId) Composes a new tweet with ID tweetId by the user userId. Each call to this function will be made with a unique tweetId.\n            List<Integer> getNewsFeed(int userId) Retrieves the 10 most recent tweet IDs in the user's news feed. Each item in the news feed must be posted by users who the user followed or by the user themself. Tweets must be ordered from most recent to least recent.\n            void follow(int followerId, int followeeId) The user with ID followerId started following the user with ID followeeId.\n            void unfollow(int followerId, int followeeId) The user with ID followerId started unfollowing the user with ID followeeId.\n"
    },
    {
        "number": 355,
        "title": "Design Twitter",
        "difficulty": 1,
        "pass": 5,
        "answer": "        \n        \n        \"\"\"\n        Time Complexity: O(N)\n        Space Complexity: O(N)\n        \"\"\"\n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n"
    },
    {
        "number": 355,
        "title": "Design Twitter",
        "difficulty": 1,
        "pass": 6,
        "answer": "        \n        \n    def postTweet(self, userId: int, tweetId: int) -> None:\n        \"\"\"\n        Design a simplified version of Twitter where users can post tweets, follow/unfollow another user, and is able to see the 10 most recent tweets in the user's news feed.\n        Implement the Twitter class:\n            Twitter() Initializes your twitter object.\n            void postTweet(int userId, int tweetId) Composes a new tweet with ID tweetId by the user userId. Each call to this function will be made with a unique tweetId.\n            List<Integer> getNewsFeed(int userId) Retrieves the 10 most recent tweet IDs in the user's news feed. Each item in the news feed must be posted by users who the user followed or by the user themself. Tweets must be ordered from most recent to least recent.\n            void follow(int followerId, int followeeId) The user with ID followerId started following the user with ID followeeId.\n            void unfollow(int followerId, int followeeId) The user with ID followerId started unfollowing the user with ID follow"
    },
    {
        "number": 355,
        "title": "Design Twitter",
        "difficulty": 1,
        "pass": 7,
        "answer": "        \n    def postTweet(self, userId: int, tweetId: int) -> None:\n        \"\"\"\n        Design a simplified version of Twitter where users can post tweets, follow/unfollow another user, and is able to see the 10 most recent tweets in the user's news feed.\n        Implement the Twitter class:\n            Twitter() Initializes your twitter object.\n            void postTweet(int userId, int tweetId) Composes a new tweet with ID tweetId by the user userId. Each call to this function will be made with a unique tweetId.\n            List<Integer> getNewsFeed(int userId) Retrieves the 10 most recent tweet IDs in the user's news feed. Each item in the news feed must be posted by users who the user followed or by the user themself. Tweets must be ordered from most recent to least recent.\n            void follow(int followerId, int followeeId) The user with ID followerId started following the user with ID followeeId.\n            void unfollow(int followerId, int followeeId) The user with ID followerId started unfollowing the user with ID followeeId"
    },
    {
        "number": 355,
        "title": "Design Twitter",
        "difficulty": 1,
        "pass": 8,
        "answer": "        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n"
    },
    {
        "number": 355,
        "title": "Design Twitter",
        "difficulty": 1,
        "pass": 9,
        "answer": "        def postTweet(self, userId: int, tweetId: int) -> None:\n            \"\"\"\n            Compose a new tweet with ID tweetId by the user userId.\n            Each call to this function will be made with a unique tweetId.\n            \"\"\"\n            pass"
    },
    {
        "number": 357,
        "title": "Count Numbers with Unique Digits",
        "difficulty": 1,
        "pass": 0,
        "answer": "        if n == 0:\n            return 1\n        if n == 1:\n            return 10\n        dp = [0] * (n + 1)\n        dp[0] = 1\n        dp[1] = 10\n        for i in range(2, n + 1):\n            dp[i] = dp[i - 1] + 9 * dp[i - 2]\n        return dp[n]"
    },
    {
        "number": 357,
        "title": "Count Numbers with Unique Digits",
        "difficulty": 1,
        "pass": 1,
        "answer": "        if n == 0:\n            return 1\n        if n == 1:\n            return 10\n        dp = [0] * (n + 1)\n        dp[0] = 1\n        dp[1] = 10\n        for i in range(2, n + 1):\n            dp[i] = dp[i - 1] + 9 * dp[i - 2]\n        return dp[n]"
    },
    {
        "number": 357,
        "title": "Count Numbers with Unique Digits",
        "difficulty": 1,
        "pass": 2,
        "answer": "        if n == 0:\n            return 1\n        if n == 1:\n            return 10\n        if n == 2:\n            return 91\n        dp = [0] * (n + 1)\n        dp[0] = 1\n        dp[1] = 10\n        dp[2] = 91\n        for i in range(3, n + 1):\n            dp[i] = dp[i - 1] * 10 + dp[i - 2]\n        return dp[n]"
    },
    {
        "number": 357,
        "title": "Count Numbers with Unique Digits",
        "difficulty": 1,
        "pass": 3,
        "answer": "        if n == 0:\n            return 1\n        if n == 1:\n            return 10\n        dp = [0] * (n + 1)\n        dp[0] = 1\n        dp[1] = 10\n        for i in range(2, n + 1):\n            dp[i] = dp[i - 1] + dp[i - 2]\n        return dp[n]"
    },
    {
        "number": 357,
        "title": "Count Numbers with Unique Digits",
        "difficulty": 1,
        "pass": 4,
        "answer": "        if n == 0:\n            return 1\n        dp = [0] * (n + 1)\n        dp[0] = 1\n        for i in range(1, n + 1):\n            for j in range(10):\n                if j == 0:\n                    dp[i] += dp[i - 1]\n                else:\n                    dp[i] += dp[i - 1] - dp[i - 1 - j]\n        return dp[n]"
    },
    {
        "number": 357,
        "title": "Count Numbers with Unique Digits",
        "difficulty": 1,
        "pass": 5,
        "answer": "        if n == 0:\n            return 1\n        dp = [0] * (n + 1)\n        dp[0] = 1\n        for i in range(1, n + 1):\n            for j in range(i):\n                dp[i] += dp[j] * 10\n        return dp[n]"
    },
    {
        "number": 357,
        "title": "Count Numbers with Unique Digits",
        "difficulty": 1,
        "pass": 6,
        "answer": "        if n == 0:\n            return 1\n        if n == 1:\n            return 10\n        dp = [0] * (n + 1)\n        dp[0] = 1\n        dp[1] = 10\n        for i in range(2, n + 1):\n            dp[i] = dp[i - 1] + 9 * dp[i - 2]\n        return dp[n]"
    },
    {
        "number": 357,
        "title": "Count Numbers with Unique Digits",
        "difficulty": 1,
        "pass": 7,
        "answer": "        # if n == 0:\n        #     return 1\n        # if n == 1:\n        #     return 10\n        # if n == 2:\n        #     return 91\n        # if n == 3:\n        #     return 842\n        # if n == 4:\n        #     return 9474\n        # if n == 5:\n        #     return 100000\n        # if n == 6:\n        #     return 1000000\n        # if n == 7:\n        #     return 10000000\n        # if n == 8:\n        #     return 100000000\n        # if n == 9:\n        #     return 1000000000\n        # if n == 10:\n        #     return 10000000000\n        # if n == 11:\n        #     return 100000000000\n        # if n == 12:\n        #     return 1000000000000\n        # if n == 13:\n        #     return 100000000000000\n        # if n == 14:\n        #     return 1000000000000000\n        # if n == 15:\n        #     return 10000000000000000\n        # if n == 16:\n"
    },
    {
        "number": 357,
        "title": "Count Numbers with Unique Digits",
        "difficulty": 1,
        "pass": 8,
        "answer": "        if n == 0:\n            return 1\n        if n == 1:\n            return 10\n        dp = [0] * (n + 1)\n        dp[0] = 1\n        dp[1] = 10\n        for i in range(2, n + 1):\n            dp[i] = dp[i - 1] + 9 * dp[i - 2]\n        return dp[n]"
    },
    {
        "number": 357,
        "title": "Count Numbers with Unique Digits",
        "difficulty": 1,
        "pass": 9,
        "answer": "        if n == 0:\n            return 1\n        if n == 1:\n            return 10\n        dp = [0] * (n + 1)\n        dp[0] = 1\n        dp[1] = 10\n        for i in range(2, n + 1):\n            dp[i] = dp[i - 1] + dp[i - 2]\n        return dp[-1]"
    },
    {
        "number": 363,
        "title": "Max Sum of Rectangle No Larger Than K",
        "difficulty": 2,
        "pass": 0,
        "answer": "        m, n = len(matrix), len(matrix[0])\n        dp = [[0] * (n + 1) for _ in range(m + 1)]\n        for i in range(1, m + 1):\n            for j in range(1, n + 1):\n                dp[i][j] = matrix[i - 1][j - 1] + dp[i - 1][j] + dp[i][j - 1] - dp[i - 1][j - 1]\n        res = float('-inf')\n        for i in range(1, m + 1):\n            for j in range(1, n + 1):\n                res = max(res, dp[i][j] - k)\n        return res"
    },
    {
        "number": 363,
        "title": "Max Sum of Rectangle No Larger Than K",
        "difficulty": 2,
        "pass": 1,
        "answer": "        m = len(matrix)\n        if m == 0:\n            return 0\n        n = len(matrix[0])\n        if n == 0:\n            return 0\n        dp = [[0] * n for _ in range(m)]\n        for i in range(m):\n            for j in range(n):\n                dp[i][j] = matrix[i][j]\n        for i in range(1, m):\n            for j in range(1, n):\n                dp[i][j] += dp[i - 1][j] + dp[i][j - 1] - dp[i - 1][j - 1]\n        ans = float('-inf')\n        for i in range(m):\n            for j in range(n):\n                if dp[i][j] >= k:\n                    ans = max(ans, dp[i][j] - k)\n        return ans"
    },
    {
        "number": 363,
        "title": "Max Sum of Rectangle No Larger Than K",
        "difficulty": 2,
        "pass": 2,
        "answer": "        m, n = len(matrix), len(matrix[0])\n        dp = [[0] * (n + 1) for _ in range(m + 1)]\n        for i in range(1, m + 1):\n            for j in range(1, n + 1):\n                dp[i][j] = matrix[i - 1][j - 1] + dp[i - 1][j] + dp[i][j - 1] - dp[i - 1][j - 1]\n        res = float(\"-inf\")\n        for i in range(1, m + 1):\n            for j in range(1, n + 1):\n                res = max(res, dp[i][j] - k)\n        return res"
    },
    {
        "number": 363,
        "title": "Max Sum of Rectangle No Larger Than K",
        "difficulty": 2,
        "pass": 3,
        "answer": "        if not matrix or not matrix[0]:\n            return 0\n        m, n = len(matrix), len(matrix[0])\n        dp = [[0] * (n + 1) for _ in range(m + 1)]\n        for i in range(1, m + 1):\n            for j in range(1, n + 1):\n                dp[i][j] = dp[i - 1][j] + dp[i][j - 1] - dp[i - 1][j - 1] + matrix[i - 1][j - 1]\n        res = float('-inf')\n        for i in range(1, m + 1):\n            for j in range(1, n + 1):\n                res = max(res, dp[i][j] - k)\n        return res"
    },
    {
        "number": 363,
        "title": "Max Sum of Rectangle No Larger Than K",
        "difficulty": 2,
        "pass": 4,
        "answer": "        m, n = len(matrix), len(matrix[0])\n        dp = [[0] * (n + 1) for _ in range(m + 1)]\n        for i in range(1, m + 1):\n            for j in range(1, n + 1):\n                dp[i][j] = matrix[i - 1][j - 1] + dp[i - 1][j] + dp[i][j - 1] - dp[i - 1][j - 1]\n        for i in range(1, m + 1):\n            for j in range(1, n + 1):\n                dp[i][j] = max(dp[i][j], dp[i][j - 1])\n                dp[i][j] = max(dp[i][j], dp[i - 1][j])\n                dp[i][j] = max(dp[i][j], dp[i - 1][j - 1])\n                dp[i][j] = max(dp[i][j], dp[i - 1][j - 1])"
    },
    {
        "number": 363,
        "title": "Max Sum of Rectangle No Larger Than K",
        "difficulty": 2,
        "pass": 5,
        "answer": "        m = len(matrix)\n        if m == 0:\n            return 0\n        n = len(matrix[0])\n        if n == 0:\n            return 0\n        max_sum = float('-inf')\n        dp = [[0] * n for _ in range(m)]\n        for i in range(m):\n            for j in range(n):\n                dp[i][j] = matrix[i][j]\n                if i > 0:\n                    dp[i][j] += dp[i-1][j]\n                if j > 0:\n                    dp[i][j] += dp[i][j-1]\n                if i > 0 and j > 0:\n                    dp[i][j] -= dp[i-1][j-1]\n                if dp[i][j] > max_sum:\n                    max_sum = dp[i][j]\n        return max_sum"
    },
    {
        "number": 363,
        "title": "Max Sum of Rectangle No Larger Than K",
        "difficulty": 2,
        "pass": 6,
        "answer": "        m, n = len(matrix), len(matrix[0])\n        for i in range(m):\n            for j in range(n):\n                matrix[i][j] = -matrix[i][j] if matrix[i][j] < 0 else matrix[i][j]\n        max_sum = float('-inf')\n        for i in range(m):\n            for j in range(n):\n                cur_sum = 0\n                for k in range(i, m):\n                    cur_sum += matrix[k][j]\n                    max_sum = max(max_sum, cur_sum)\n                for k in range(i, m):\n                    cur_sum -= matrix[k][j]\n                    max_sum = max(max_sum, cur_sum)\n                for k in range(j, n):\n                    cur_sum += matrix[i][k]\n                    max_sum = max(max_sum, cur_sum)\n                for k in range(j, n):\n                    cur_sum -= matrix[i][k]\n                    max_sum"
    },
    {
        "number": 363,
        "title": "Max Sum of Rectangle No Larger Than K",
        "difficulty": 2,
        "pass": 7,
        "answer": "        m, n = len(matrix), len(matrix[0])\n        dp = [[0] * (n + 1) for _ in range(m + 1)]\n        for i in range(1, m + 1):\n            for j in range(1, n + 1):\n                dp[i][j] = matrix[i - 1][j - 1] + dp[i - 1][j] + dp[i][j - 1] - dp[i - 1][j - 1]\n        max_sum = float('-inf')\n        for i in range(1, m + 1):\n            for j in range(1, n + 1):\n                max_sum = max(max_sum, dp[i][j] - dp[i - 1][j] - dp[i][j - 1] + dp[i - 1][j - 1])\n        return max_sum if max_sum > k else 0"
    },
    {
        "number": 363,
        "title": "Max Sum of Rectangle No Larger Than K",
        "difficulty": 2,
        "pass": 8,
        "answer": "        m, n = len(matrix), len(matrix[0])\n        dp = [[0] * (n + 1) for _ in range(m + 1)]\n        for i in range(1, m + 1):\n            for j in range(1, n + 1):\n                dp[i][j] = matrix[i - 1][j - 1] + dp[i - 1][j] + dp[i][j - 1] - dp[i - 1][j - 1]\n        res = float('-inf')\n        for i in range(1, m + 1):\n            for j in range(1, n + 1):\n                res = max(res, dp[i][j] - k)\n        return res"
    },
    {
        "number": 363,
        "title": "Max Sum of Rectangle No Larger Than K",
        "difficulty": 2,
        "pass": 9,
        "answer": "        m, n = len(matrix), len(matrix[0])\n        dp = [[0] * (n + 1) for _ in range(m + 1)]\n        for i in range(1, m + 1):\n            for j in range(1, n + 1):\n                dp[i][j] = matrix[i - 1][j - 1] + dp[i - 1][j] + dp[i][j - 1] - dp[i - 1][j - 1]\n        res = float('-inf')\n        for i in range(1, m + 1):\n            for j in range(1, n + 1):\n                res = max(res, dp[i][j] - k)\n        return res"
    },
    {
        "number": 365,
        "title": "Water and Jug Problem",
        "difficulty": 1,
        "pass": 0,
        "answer": "        if jug1Capacity < targetCapacity or jug2Capacity < targetCapacity:\n            return False\n        if jug1Capacity == targetCapacity and jug2Capacity == targetCapacity:\n            return True\n        if jug1Capacity == targetCapacity or jug2Capacity == targetCapacity:\n            return True\n        if jug1Capacity == 0 or jug2Capacity == 0:\n            return False\n        if jug1Capacity > jug2Capacity:\n            return self.canMeasureWater(jug1Capacity - jug2Capacity, jug2Capacity, targetCapacity) or self.canMeasureWater(jug1Capacity, jug2Capacity - targetCapacity, targetCapacity)\n        if jug1Capacity < jug2Capacity:\n            return self.canMeasureWater(jug1Capacity, jug2Capacity - jug1Capacity, targetCapacity) or self.canMeasureWater(jug1Capacity + jug2Capacity, jug2Capacity, targetCapacity)\n        return self.canMeasureWater(jug1Capacity - jug2Capacity, jug2Cap"
    },
    {
        "number": 365,
        "title": "Water and Jug Problem",
        "difficulty": 1,
        "pass": 1,
        "answer": "        if jug1Capacity < targetCapacity or jug2Capacity < targetCapacity:\n            return False\n        if jug1Capacity == targetCapacity or jug2Capacity == targetCapacity:\n            return True\n        if jug1Capacity > jug2Capacity:\n            return self.canMeasureWater(jug1Capacity - jug2Capacity, jug2Capacity, targetCapacity) or self.canMeasureWater(jug1Capacity, jug2Capacity - targetCapacity, targetCapacity)\n        else:\n            return self.canMeasureWater(jug1Capacity, jug2Capacity - jug1Capacity, targetCapacity) or self.canMeasureWater(jug1Capacity + jug2Capacity, jug2Capacity, targetCapacity - jug1Capacity)"
    },
    {
        "number": 365,
        "title": "Water and Jug Problem",
        "difficulty": 1,
        "pass": 2,
        "answer": "        if jug1Capacity < targetCapacity or jug2Capacity < targetCapacity:\n            return False\n        if jug1Capacity == targetCapacity and jug2Capacity == targetCapacity:\n            return True\n        if jug1Capacity == targetCapacity or jug2Capacity == targetCapacity:\n            return True\n        if jug1Capacity < targetCapacity:\n            return self.canMeasureWater(jug1Capacity, jug2Capacity, targetCapacity - jug1Capacity) or self.canMeasureWater(jug1Capacity, jug2Capacity, targetCapacity)\n        if jug2Capacity < targetCapacity:\n            return self.canMeasureWater(jug1Capacity, jug2Capacity, targetCapacity - jug2Capacity) or self.canMeasureWater(jug1Capacity, jug2Capacity, targetCapacity)\n        return self.canMeasureWater(jug1Capacity - jug2Capacity, jug2Capacity, targetCapacity) or self.canMeasureWater(jug1Capacity, jug2Capacity - jug1Capacity, targetCapacity)"
    },
    {
        "number": 365,
        "title": "Water and Jug Problem",
        "difficulty": 1,
        "pass": 3,
        "answer": "        if jug1Capacity < targetCapacity or jug2Capacity < targetCapacity:\n            return False\n        if jug1Capacity == targetCapacity and jug2Capacity == targetCapacity:\n            return True\n        if jug1Capacity == targetCapacity or jug2Capacity == targetCapacity:\n            return True\n        if jug1Capacity + jug2Capacity < targetCapacity:\n            return False\n        if jug1Capacity + jug2Capacity == targetCapacity:\n            return True\n        if jug1Capacity == 0 and jug2Capacity == 0:\n            return False\n        if jug1Capacity == 0:\n            return True\n        if jug2Capacity == 0:\n            return True\n        if jug1Capacity == 1 and jug2Capacity == 2:\n            return True\n        if jug1Capacity == 2 and jug2Capacity == 1:\n            return True\n        if jug1Capacity == 3 and jug2Capacity == 4:\n            return True\n        if jug1Capacity == 4 and jug2Capacity == 3:\n            return True\n"
    },
    {
        "number": 365,
        "title": "Water and Jug Problem",
        "difficulty": 1,
        "pass": 4,
        "answer": "        \n        if jug1Capacity < targetCapacity or jug2Capacity < targetCapacity:\n            return False\n        \n        if jug1Capacity == targetCapacity and jug2Capacity == targetCapacity:\n            return True\n        \n        if jug1Capacity == targetCapacity or jug2Capacity == targetCapacity:\n            return True\n        \n        if jug1Capacity + jug2Capacity < targetCapacity:\n            return False\n        \n        if jug1Capacity + jug2Capacity == targetCapacity:\n            return True\n        \n        return self.canMeasureWater(jug1Capacity, targetCapacity - jug1Capacity, jug2Capacity) or self.canMeasureWater(jug2Capacity, targetCapacity - jug2Capacity, jug1Capacity)"
    },
    {
        "number": 365,
        "title": "Water and Jug Problem",
        "difficulty": 1,
        "pass": 5,
        "answer": "        if jug1Capacity < targetCapacity or jug2Capacity < targetCapacity:\n            return False\n        if jug1Capacity == targetCapacity or jug2Capacity == targetCapacity:\n            return True\n        if jug1Capacity == 0 and jug2Capacity == 0:\n            return False\n        if jug1Capacity == 0:\n            return True\n        if jug2Capacity == 0:\n            return True\n        if jug1Capacity == 1 and jug2Capacity == 2:\n            return True\n        if jug1Capacity == 2 and jug2Capacity == 1:\n            return True\n        if jug1Capacity == 2 and jug2Capacity == 3:\n            return True\n        if jug1Capacity == 3 and jug2Capacity == 2:\n            return True\n        if jug1Capacity == 3 and jug2Capacity == 4:\n            return True\n        if jug1Capacity == 4 and jug2Capacity == 3:\n            return True\n        if jug1Capacity == 4 and jug2Capacity == 5:\n            return True\n        if jug1"
    },
    {
        "number": 365,
        "title": "Water and Jug Problem",
        "difficulty": 1,
        "pass": 6,
        "answer": "        if jug1Capacity < targetCapacity or jug2Capacity < targetCapacity:\n            return False\n        if jug1Capacity == targetCapacity or jug2Capacity == targetCapacity:\n            return True\n        if jug1Capacity == 0 or jug2Capacity == 0:\n            return False\n        if jug1Capacity > jug2Capacity:\n            return self.canMeasureWater(jug1Capacity - jug2Capacity, jug2Capacity, targetCapacity) or self.canMeasureWater(jug1Capacity, jug2Capacity - targetCapacity, targetCapacity)\n        else:\n            return self.canMeasureWater(jug1Capacity, jug2Capacity - jug1Capacity, targetCapacity) or self.canMeasureWater(jug1Capacity + jug2Capacity, jug2Capacity, targetCapacity - jug1Capacity)"
    },
    {
        "number": 365,
        "title": "Water and Jug Problem",
        "difficulty": 1,
        "pass": 7,
        "answer": "        if jug1Capacity < targetCapacity or jug2Capacity < targetCapacity:\n            return False\n        if jug1Capacity == targetCapacity and jug2Capacity == targetCapacity:\n            return True\n        if jug1Capacity == targetCapacity or jug2Capacity == targetCapacity:\n            return True\n        if jug1Capacity == 0 or jug2Capacity == 0:\n            return False\n        if jug1Capacity == 1 or jug2Capacity == 1:\n            return True\n        if jug1Capacity == 2 or jug2Capacity == 2:\n            return True\n        if jug1Capacity == 3 or jug2Capacity == 3:\n            return True\n        if jug1Capacity == 4 or jug2Capacity == 4:\n            return True\n        if jug1Capacity == 5 or jug2Capacity == 5:\n            return True\n        if jug1Capacity == 6 or jug2Capacity == 6:\n            return True\n        if jug1Capacity == 7 or jug2Capacity == 7:\n            return True\n        if jug1Capacity =="
    },
    {
        "number": 365,
        "title": "Water and Jug Problem",
        "difficulty": 1,
        "pass": 8,
        "answer": "        if jug1Capacity < targetCapacity or jug2Capacity < targetCapacity:\n            return False\n        if jug1Capacity == targetCapacity and jug2Capacity == targetCapacity:\n            return True\n        if jug1Capacity == targetCapacity or jug2Capacity == targetCapacity:\n            return True\n        if jug1Capacity == 0 or jug2Capacity == 0:\n            return False\n        if jug1Capacity > jug2Capacity:\n            return self.canMeasureWater(jug1Capacity - jug2Capacity, jug2Capacity, targetCapacity) or self.canMeasureWater(jug1Capacity, jug2Capacity - targetCapacity, targetCapacity)\n        if jug1Capacity < jug2Capacity:\n            return self.canMeasureWater(jug1Capacity, jug2Capacity - jug1Capacity, targetCapacity) or self.canMeasureWater(jug1Capacity + jug2Capacity, jug2Capacity, targetCapacity)\n        return self.canMeasureWater(jug1Capacity - jug2Capacity, jug2Cap"
    },
    {
        "number": 365,
        "title": "Water and Jug Problem",
        "difficulty": 1,
        "pass": 9,
        "answer": "        if jug1Capacity < targetCapacity or jug2Capacity < targetCapacity:\n            return False\n        if jug1Capacity == targetCapacity and jug2Capacity == targetCapacity:\n            return True\n        if jug1Capacity == targetCapacity or jug2Capacity == targetCapacity:\n            return True\n        if jug1Capacity + jug2Capacity < targetCapacity:\n            return False\n        if jug1Capacity + jug2Capacity == targetCapacity:\n            return True\n        if jug1Capacity + jug2Capacity == targetCapacity + 1:\n            return True\n        if jug1Capacity + jug2Capacity == targetCapacity + 2:\n            return True\n        if jug1Capacity + jug2Capacity == targetCapacity + 3:\n            return True\n        if jug1Capacity + jug2Capacity == targetCapacity + 4:\n            return True\n        if jug1Capacity + jug2Capacity == targetCapacity + 5:\n            return True\n        if jug1Capacity + jug2Capacity == targetCapacity + 6:"
    },
    {
        "number": 367,
        "title": "Valid Perfect Square",
        "difficulty": 0,
        "pass": 0,
        "answer": "        if num < 0:\n            return False\n        if num == 0:\n            return True\n        left, right = 1, num\n        while left <= right:\n            mid = left + (right - left) // 2\n            if mid * mid == num:\n                return True\n            elif mid * mid < num:\n                left = mid + 1\n            else:\n                right = mid - 1\n        return False"
    },
    {
        "number": 367,
        "title": "Valid Perfect Square",
        "difficulty": 0,
        "pass": 1,
        "answer": "        if num == 1:\n            return True\n        if num == 2:\n            return True\n        if num == 3:\n            return True\n        if num == 4:\n            return True\n        if num == 5:\n            return True\n        if num == 6:\n            return True\n        if num == 7:\n            return True\n        if num == 8:\n            return True\n        if num == 9:\n            return True\n        if num == 10:\n            return True\n        if num == 11:\n            return True\n        if num == 12:\n            return True\n        if num == 13:\n            return True\n        if num == 14:\n            return True\n        if num == 15:\n            return True\n        if num == 16:\n            return True\n        if num == 17:\n            return True\n        if num == 18:\n            return True\n        if num == 19:\n            return True\n        if num == 20:\n            return True\n        if num == 21:\n            return True\n        if num == 22:\n            return True\n        if num == 23:\n            "
    },
    {
        "number": 367,
        "title": "Valid Perfect Square",
        "difficulty": 0,
        "pass": 2,
        "answer": "        if num == 1:\n            return True\n        left, right = 1, num\n        while left <= right:\n            mid = left + (right - left) // 2\n            if mid * mid == num:\n                return True\n            elif mid * mid < num:\n                left = mid + 1\n            else:\n                right = mid - 1\n        return False"
    },
    {
        "number": 367,
        "title": "Valid Perfect Square",
        "difficulty": 0,
        "pass": 3,
        "answer": "        if num == 1:\n            return True\n        if num == 2:\n            return True\n        if num == 3:\n            return True\n        if num == 4:\n            return True\n        if num == 5:\n            return True\n        if num == 6:\n            return True\n        if num == 7:\n            return True\n        if num == 8:\n            return True\n        if num == 9:\n            return True\n        if num == 10:\n            return True\n        if num == 11:\n            return True\n        if num == 12:\n            return True\n        if num == 13:\n            return True\n        if num == 14:\n            return True\n        if num == 15:\n            return True\n        if num == 16:\n            return True\n        if num == 17:\n            return True\n        if num == 18:\n            return True\n        if num == 19:\n            return True\n        if num == 20:\n            return True\n        if num == 21:\n            return True\n        if num == 22:\n            return True\n        if num == 23:\n            "
    },
    {
        "number": 367,
        "title": "Valid Perfect Square",
        "difficulty": 0,
        "pass": 4,
        "answer": "        if num == 1:\n            return True\n        left, right = 1, num\n        while left <= right:\n            mid = left + (right - left) // 2\n            if mid * mid == num:\n                return True\n            elif mid * mid < num:\n                left = mid + 1\n            else:\n                right = mid - 1\n        return False"
    },
    {
        "number": 367,
        "title": "Valid Perfect Square",
        "difficulty": 0,
        "pass": 5,
        "answer": "        import math\n        if num == 0:\n            return False\n        if num == 1:\n            return True\n        if num == 2:\n            return True\n        if num == 3:\n            return True\n        if num == 4:\n            return True\n        if num == 5:\n            return True\n        if num == 6:\n            return True\n        if num == 7:\n            return True\n        if num == 8:\n            return True\n        if num == 9:\n            return True\n        if num == 10:\n            return True\n        if num == 11:\n            return True\n        if num == 12:\n            return True\n        if num == 13:\n            return True\n        if num == 14:\n            return True\n        if num == 15:\n            return True\n        if num == 16:\n            return True\n        if num == 17:\n            return True\n        if num == 18:\n            return True\n        if num == 19:\n            return True\n        if num == 20:\n            return True\n        if num == 21:\n            return True\n        if num =="
    },
    {
        "number": 367,
        "title": "Valid Perfect Square",
        "difficulty": 0,
        "pass": 6,
        "answer": "        if num == 1:\n            return True\n        left, right = 1, num\n        while left <= right:\n            mid = left + (right - left) // 2\n            if mid * mid == num:\n                return True\n            elif mid * mid < num:\n                left = mid + 1\n            else:\n                right = mid - 1\n        return False"
    },
    {
        "number": 367,
        "title": "Valid Perfect Square",
        "difficulty": 0,
        "pass": 7,
        "answer": "        if num < 0:\n            return False\n        if num == 0:\n            return True\n        if num == 1:\n            return True\n        if num == 2:\n            return True\n        if num == 3:\n            return True\n        if num == 4:\n            return True\n        if num == 5:\n            return True\n        if num == 6:\n            return True\n        if num == 7:\n            return True\n        if num == 8:\n            return True\n        if num == 9:\n            return True\n        if num == 10:\n            return True\n        if num == 11:\n            return True\n        if num == 12:\n            return True\n        if num == 13:\n            return True\n        if num == 14:\n            return True\n        if num == 15:\n            return True\n        if num == 16:\n            return True\n        if num == 17:\n            return True\n        if num == 18:\n            return True\n        if num == 19:\n            return True\n        if num == 20:\n            return True\n        if num == 21:\n            "
    },
    {
        "number": 367,
        "title": "Valid Perfect Square",
        "difficulty": 0,
        "pass": 8,
        "answer": "        if num == 1:\n            return True\n        if num == 2:\n            return True\n        if num == 3:\n            return True\n        if num == 4:\n            return True\n        if num == 5:\n            return True\n        if num == 6:\n            return True\n        if num == 7:\n            return True\n        if num == 8:\n            return True\n        if num == 9:\n            return True\n        if num == 10:\n            return True\n        if num == 11:\n            return True\n        if num == 12:\n            return True\n        if num == 13:\n            return True\n        if num == 14:\n            return True\n        if num == 15:\n            return True\n        if num == 16:\n            return True\n        if num == 17:\n            return True\n        if num == 18:\n            return True\n        if num == 19:\n            return True\n        if num == 20:\n            return True\n        if num == 21:\n            return True\n        if num == 22:\n            return True\n        if num == 23:\n            "
    },
    {
        "number": 367,
        "title": "Valid Perfect Square",
        "difficulty": 0,
        "pass": 9,
        "answer": "        if num == 1:\n            return True\n        if num == 2:\n            return True\n        if num == 3:\n            return True\n        if num == 4:\n            return True\n        if num == 5:\n            return True\n        if num == 6:\n            return True\n        if num == 7:\n            return True\n        if num == 8:\n            return True\n        if num == 9:\n            return True\n        if num == 10:\n            return True\n        if num == 11:\n            return True\n        if num == 12:\n            return True\n        if num == 13:\n            return True\n        if num == 14:\n            return True\n        if num == 15:\n            return True\n        if num == 16:\n            return True\n        if num == 17:\n            return True\n        if num == 18:\n            return True\n        if num == 19:\n            return True\n        if num == 20:\n            return True\n        if num == 21:\n            return True\n        if num == 22:\n            return True\n        if num == 23:\n            "
    },
    {
        "number": 368,
        "title": "Largest Divisible Subset",
        "difficulty": 1,
        "pass": 0,
        "answer": "        nums.sort()\n        n = len(nums)\n        dp = [[] for _ in range(n)]\n        for i in range(n):\n            for j in range(i):\n                if nums[i] % nums[j] == 0 and len(dp[i]) < len(dp[j]) + 1:\n                    dp[i] = dp[j] + [nums[i]]\n        return max(dp, key=len)"
    },
    {
        "number": 368,
        "title": "Largest Divisible Subset",
        "difficulty": 1,
        "pass": 1,
        "answer": "        if not nums:\n            return []\n        nums.sort()\n        n = len(nums)\n        dp = []\n        for i in range(n):\n            dp.append([nums[i]])\n        for i in range(1, n):\n            for j in range(i):\n                if nums[i] % nums[j] == 0 and len(dp[i]) < len(dp[j]) + 1:\n                    dp[i] = dp[j] + [nums[i]]\n        return max(dp, key=len)"
    },
    {
        "number": 368,
        "title": "Largest Divisible Subset",
        "difficulty": 1,
        "pass": 2,
        "answer": "        if not nums:\n            return []\n        nums = sorted(nums)\n        n = len(nums)\n        dp = [[] for _ in range(n)]\n        dp[0] = [nums[0]]\n        for i in range(1, n):\n            for j in range(i):\n                if nums[i] % nums[j] == 0 and len(dp[j]) + 1 > len(dp[i]):\n                    dp[i] = dp[j] + [nums[i]]\n            if not dp[i]:\n                dp[i] = [nums[i]]\n        return max(dp, key=len)"
    },
    {
        "number": 368,
        "title": "Largest Divisible Subset",
        "difficulty": 1,
        "pass": 3,
        "answer": "        nums.sort()\n        n = len(nums)\n        dp = [[] for _ in range(n)]\n        for i in range(n):\n            dp[i] = [nums[i]]\n            for j in range(i):\n                if nums[i] % nums[j] == 0 and len(dp[i]) < len(dp[j]) + 1:\n                    dp[i] = dp[j] + [nums[i]]\n        return max(dp, key=len)"
    },
    {
        "number": 368,
        "title": "Largest Divisible Subset",
        "difficulty": 1,
        "pass": 4,
        "answer": "        nums = sorted(nums)\n        n = len(nums)\n        dp = [[] for _ in range(n)]\n        for i in range(n):\n            for j in range(i):\n                if nums[i] % nums[j] == 0 and len(dp[i]) < len(dp[j]) + 1:\n                    dp[i] = dp[j] + [nums[i]]\n        return max(dp, key=len)"
    },
    {
        "number": 368,
        "title": "Largest Divisible Subset",
        "difficulty": 1,
        "pass": 5,
        "answer": "        nums.sort()\n        n = len(nums)\n        dp = [[] for _ in range(n)]\n        dp[0] = [nums[0]]\n        for i in range(1, n):\n            for j in range(i):\n                if nums[i] % nums[j] == 0 and len(dp[j]) + 1 > len(dp[i]):\n                    dp[i] = dp[j] + [nums[i]]\n            if len(dp[i]) > len(dp[0]):\n                dp[0] = dp[i]\n        return dp[0]"
    },
    {
        "number": 368,
        "title": "Largest Divisible Subset",
        "difficulty": 1,
        "pass": 6,
        "answer": "        nums.sort()\n        n = len(nums)\n        dp = [[] for _ in range(n)]\n        \n        for i in range(n):\n            dp[i] = [nums[i]]\n            for j in range(i):\n                if nums[i] % nums[j] == 0 and len(dp[i]) < len(dp[j]) + 1:\n                    dp[i] = dp[j] + [nums[i]]\n                    \n        return max(dp, key=len)"
    },
    {
        "number": 368,
        "title": "Largest Divisible Subset",
        "difficulty": 1,
        "pass": 7,
        "answer": "        nums.sort()\n        n = len(nums)\n        dp = [[] for _ in range(n)]\n        dp[0] = [nums[0]]\n        for i in range(1, n):\n            for j in range(i):\n                if nums[i] % nums[j] == 0 and len(dp[j]) + 1 > len(dp[i]):\n                    dp[i] = dp[j] + [nums[i]]\n            if len(dp[i]) > len(dp[0]):\n                dp[0] = dp[i]\n        return dp[0]"
    },
    {
        "number": 368,
        "title": "Largest Divisible Subset",
        "difficulty": 1,
        "pass": 8,
        "answer": "        if not nums:\n            return []\n        nums = sorted(nums)\n        n = len(nums)\n        dp = [[] for _ in range(n)]\n        dp[0] = [nums[0]]\n        for i in range(1, n):\n            for j in range(i):\n                if nums[i] % nums[j] == 0 and len(dp[j]) + 1 > len(dp[i]):\n                    dp[i] = dp[j] + [nums[i]]\n            if len(dp[i]) > len(dp[0]):\n                dp[0] = dp[i]\n        return dp[0]"
    },
    {
        "number": 368,
        "title": "Largest Divisible Subset",
        "difficulty": 1,
        "pass": 9,
        "answer": "        if not nums:\n            return []\n        nums = sorted(nums)\n        n = len(nums)\n        dp = [[] for _ in range(n)]\n        dp[0] = [nums[0]]\n        for i in range(1, n):\n            for j in range(i):\n                if nums[i] % nums[j] == 0 and len(dp[j]) + 1 > len(dp[i]):\n                    dp[i] = dp[j] + [nums[i]]\n            if not dp[i]:\n                dp[i] = [nums[i]]\n        return max(dp, key=len)"
    },
    {
        "number": 371,
        "title": "Sum of Two Integers",
        "difficulty": 1,
        "pass": 0,
        "answer": "        MAX_INT = 2147483647\n        MIN_INT = -2147483648\n        while b!= 0:\n            a, b = (a ^ b) & MAX_INT, ((a & b) << 1) & MAX_INT\n        return a if a <= MIN_INT else ~(a ^ MIN_INT)"
    },
    {
        "number": 371,
        "title": "Sum of Two Integers",
        "difficulty": 1,
        "pass": 1,
        "answer": "        # a ^ b = (a & ~b) + (~a & b)\n        # a ^ b = (a & ~b) + (~a & b)\n        # a ^ b = (a ^ b) + (a & b)\n        # a ^ b = (a ^ b) + (a & b)\n        # a ^ b = (a ^ b) + (a & b)\n        # a ^ b = (a ^ b) + (a & b)\n        # a ^ b = (a ^ b) + (a & b)\n        # a ^ b = (a ^ b) + (a & b)\n        # a ^ b = (a ^ b) + (a & b)\n        # a ^ b = (a ^ b) + (a & b)\n        # a ^ b = (a ^ b) + (a & b)\n        # a ^ b = (a ^ b) + (a & b)\n        # a ^ b = (a ^ b) + (a & b)\n        # a ^ b = (a ^ b) + (a"
    },
    {
        "number": 371,
        "title": "Sum of Two Integers",
        "difficulty": 1,
        "pass": 2,
        "answer": "        # https://leetcode.com/problems/sum-of-two-integers/discuss/107548/Python-O(1)-space-O(1)-time-solution-with-explanation\n        # https://leetcode.com/problems/sum-of-two-integers/discuss/107548/Python-O(1)-space-O(1)-time-solution-with-explanation\n        # https://leetcode.com/problems/sum-of-two-integers/discuss/107548/Python-O(1)-space-O(1)-time-solution-with-explanation\n        # https://leetcode.com/problems/sum-of-two-integers/discuss/107548/Python-O(1)-space-O(1)-time-solution-with-explanation\n        # https://leetcode.com/problems/sum-of-two-integers/discuss/107548/Python-O(1)-space-O(1)-time"
    },
    {
        "number": 371,
        "title": "Sum of Two Integers",
        "difficulty": 1,
        "pass": 3,
        "answer": "        return a ^ b"
    },
    {
        "number": 371,
        "title": "Sum of Two Integers",
        "difficulty": 1,
        "pass": 4,
        "answer": "        # if a < b:\n        #     temp = a\n        #     a = b\n        #     b = temp\n        # if a == 0:\n        #     return b\n        # if b == 0:\n        #     return a\n        # if a == 1:\n        #     return b\n        # if b == 1:\n        #     return a\n        # if a == 2:\n        #     return b\n        # if b == 2:\n        #     return a\n        # if a == 3:\n        #     return b\n        # if b == 3:\n        #     return a\n        # if a == 4:\n        #     return b\n        # if b == 4:\n        #     return a\n        # if a == 5:\n        #     return b\n        # if b == 5:\n        #     return a\n        # if a == 6:\n        #     return b\n        # if b == 6:\n        #     return a\n        # if a == 7:\n        #     return b\n        # if b == 7:\n        #     "
    },
    {
        "number": 371,
        "title": "Sum of Two Integers",
        "difficulty": 1,
        "pass": 5,
        "answer": "        a = a ^ b\n        b = a ^ b\n        a = a ^ b\n        return a + b"
    },
    {
        "number": 371,
        "title": "Sum of Two Integers",
        "difficulty": 1,
        "pass": 6,
        "answer": "        while b:\n            a, b = (a ^ b), (a & b) << 1\n        return a"
    },
    {
        "number": 371,
        "title": "Sum of Two Integers",
        "difficulty": 1,
        "pass": 7,
        "answer": "        if a == 0:\n            return b\n        if b == 0:\n            return a\n        while b!= 0:\n            a, b = a ^ b, (a & b) << 1\n        return a"
    },
    {
        "number": 371,
        "title": "Sum of Two Integers",
        "difficulty": 1,
        "pass": 8,
        "answer": "        # if a > b:\n        #     return self.getSum(b, a)\n        # elif a == b:\n        #     return a\n        # else:\n        #     return self.getSum(a - 1, b - 1) + a\n        return a + b if a < b else self.getSum(a, b - 1)"
    },
    {
        "number": 371,
        "title": "Sum of Two Integers",
        "difficulty": 1,
        "pass": 9,
        "answer": "        while(b):\n            a, b = (a ^ b), ((a & b) << 1)\n        return a"
    },
    {
        "number": 372,
        "title": "Super Pow",
        "difficulty": 1,
        "pass": 0,
        "answer": "        \n        MOD = 1337\n        \n        if a == 0:\n            return 0\n        \n        if a == 1:\n            return b[0]\n        \n        if a == 2:\n            return (b[0] * b[1]) % MOD\n        \n        if a == 3:\n            return (b[0] * b[1] * b[2]) % MOD\n        \n        if a == 4:\n            return (b[0] * b[1] * b[2] * b[3]) % MOD\n        \n        if a == 5:\n            return (b[0] * b[1] * b[2] * b[3] * b[4]) % MOD\n        \n        if a == 6:\n            return (b[0] * b[1] * b[2] * b[3] * b[4] * b[5]) % MOD\n        \n        if a == 7:\n            return (b[0] * b[1] * b[2] * b[3] * b[4] * b[5] * b"
    },
    {
        "number": 372,
        "title": "Super Pow",
        "difficulty": 1,
        "pass": 1,
        "answer": "        if a == 1:\n            return 1\n        if a == 0:\n            return 0\n        if len(b) == 1:\n            return a**b[0]%1337\n        if len(b) == 2:\n            return (a**b[0]%1337)*(a**b[1]%1337)%1337\n        if len(b) == 3:\n            return (a**b[0]%1337)*(a**b[1]%1337)*(a**b[2]%1337)%1337\n        if len(b) == 4:\n            return (a**b[0]%1337)*(a**b[1]%1337)*(a**b[2]%1337)*(a**b[3]%1337)%1337\n        if len(b) == 5:\n            return (a**b[0]%1337)*(a**b[1]%1337)*(a**b[2]%1337)*(a**b[3]%1337)*(a**"
    },
    {
        "number": 372,
        "title": "Super Pow",
        "difficulty": 1,
        "pass": 2,
        "answer": "        \n        if len(b) == 0:\n            return 1\n        if len(b) == 1:\n            return pow(a,b[0],1337)\n        if len(b) == 2:\n            return (pow(a,b[0],1337)*pow(a,b[1],1337))%1337\n        if len(b) == 3:\n            return (pow(a,b[0],1337)*pow(a,b[1],1337)*pow(a,b[2],1337))%1337\n        if len(b) == 4:\n            return (pow(a,b[0],1337)*pow(a,b[1],1337)*pow(a,b[2],1337)*pow(a,b[3],1337))%1337\n        if len(b) == 5:\n            return (pow(a,b[0],1337)*pow(a,b[1],1337)*pow(a,b[2],1337)*pow"
    },
    {
        "number": 372,
        "title": "Super Pow",
        "difficulty": 1,
        "pass": 3,
        "answer": "        if not b:\n            return 1\n        if a == 0:\n            return 0\n        if a == 1:\n            return b[0]\n        if a == 2:\n            return self.superPow(b[0], b[1:])\n        if a == 3:\n            return self.superPow(b[0], b[1:]) * self.superPow(b[0], b[1:])\n        if a == 4:\n            return self.superPow(b[0], b[1:]) * self.superPow(b[0], b[1:]) * self.superPow(b[0], b[1:])\n        if a == 5:\n            return self.superPow(b[0], b[1:]) * self.superPow(b[0], b[1:]) * self.superPow(b[0], b[1:]) * self.superPow(b[0], b[1:])\n        if a == 6:\n            return self.superPow(b[0],"
    },
    {
        "number": 372,
        "title": "Super Pow",
        "difficulty": 1,
        "pass": 4,
        "answer": "        if a == 0:\n            return 0\n        if a == 1:\n            return 1\n        if a == 2:\n            return 2\n        if a == 3:\n            return 4\n        if a == 4:\n            return 8\n        if a == 5:\n            return 10\n        if a == 6:\n            return 12\n        if a == 7:\n            return 14\n        if a == 8:\n            return 16\n        if a == 9:\n            return 18\n        if a == 10:\n            return 20\n        if a == 11:\n            return 22\n        if a == 12:\n            return 24\n        if a == 13:\n            return 26\n        if a == 14:\n            return 28\n        if a == 15:\n            return 30\n        if a == 16:\n            return 32\n        if a == 17:\n            return 34\n        if a == 18:\n            return 36\n        if a == 19:\n            return 38\n        if a == 20:\n            return 40\n        if a == 21:\n            return 42\n        if a == 22:\n            "
    },
    {
        "number": 372,
        "title": "Super Pow",
        "difficulty": 1,
        "pass": 5,
        "answer": "        \n        a = a % 1337\n        \n        for i in range(len(b)-1,-1,-1):\n            a = (a * a) % 1337\n            if b[i]!= 0:\n                a = (a * b[i]) % 1337\n        \n        return a % 1337\n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n"
    },
    {
        "number": 372,
        "title": "Super Pow",
        "difficulty": 1,
        "pass": 6,
        "answer": "        \n        \n        res = 1\n        for i in range(len(b)):\n            res = (res * res) % 1337\n            res = (res * a) % 1337\n            a = (a * a) % 1337\n        return res\n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        "
    },
    {
        "number": 372,
        "title": "Super Pow",
        "difficulty": 1,
        "pass": 7,
        "answer": "        if a == 1:\n            return b[0]\n        if a == 0:\n            return 1\n        if a == 0:\n            return 1\n        if a == 0:\n            return 1\n        if a == 0:\n            return 1\n        if a == 0:\n            return 1\n        if a == 0:\n            return 1\n        if a == 0:\n            return 1\n        if a == 0:\n            return 1\n        if a == 0:\n            return 1\n        if a == 0:\n            return 1\n        if a == 0:\n            return 1\n        if a == 0:\n            return 1\n        if a == 0:\n            return 1\n        if a == 0:\n            return 1\n        if a == 0:\n            return 1\n        if a == 0:\n            return 1\n        if a == 0:\n            return 1\n        if a == 0:\n            return 1\n        if a == 0:\n            return 1\n        if a == 0:\n            return 1\n        if a == 0:\n            return 1\n        if a == 0"
    },
    {
        "number": 372,
        "title": "Super Pow",
        "difficulty": 1,
        "pass": 8,
        "answer": "        if a == 1:\n            return b[0]\n        if a == 0:\n            return 1\n        if a == 0:\n            return 1\n        if a == 1:\n            return b[0]\n        if a == 2:\n            return b[0]\n        if a == 3:\n            return b[0]\n        if a == 4:\n            return b[0]\n        if a == 5:\n            return b[0]\n        if a == 6:\n            return b[0]\n        if a == 7:\n            return b[0]\n        if a == 8:\n            return b[0]\n        if a == 9:\n            return b[0]\n        if a == 10:\n            return b[0]\n        if a == 11:\n            return b[0]\n        if a == 12:\n            return b[0]\n        if a == 13:\n            return b[0]\n        if a == 14:\n            return b[0]\n        if a == 15:\n            return b[0]\n        if a =="
    },
    {
        "number": 372,
        "title": "Super Pow",
        "difficulty": 1,
        "pass": 9,
        "answer": "        \n        \n        \n        def helper(a,b):\n            if len(b) == 0:\n                return 1\n            elif len(b) == 1:\n                return (a**b[0])%1337\n            else:\n                return (a**b[0])%1337*helper(a,b[1:])\n        \n        return helper(a,b)\n        \n        \n        \n        \nclass Solution:\n    def superPow(self, a: int, b: List[int]) -> int:\n        \"\"\"\n        Your task is to calculate ab mod 1337 where a is a positive integer and b is an extremely large positive integer given in the form of an array.\n        Example 1:\n        Input: a = 2, b = [3]\n        Output: 8\n        Example 2:\n        Input: a = 2, b = [1,0]\n        Output: 1024\n        Example 3:\n        Input: a = 1, b = [4,3,3,8,5,2]\n        Output: 1\n        \"\"\"\n        \n        \n"
    },
    {
        "number": 373,
        "title": "Find K Pairs with Smallest Sums",
        "difficulty": 1,
        "pass": 0,
        "answer": "        n1 = len(nums1)\n        n2 = len(nums2)\n        if k > n1 * n2:\n            return []\n        nums1.sort()\n        nums2.sort()\n        res = []\n        for i in range(n1):\n            for j in range(n2):\n                res.append([nums1[i], nums2[j]])\n                if len(res) == k:\n                    return res\n        return res"
    },
    {
        "number": 373,
        "title": "Find K Pairs with Smallest Sums",
        "difficulty": 1,
        "pass": 1,
        "answer": "        \n        def k_smallest_pairs(nums1, nums2, k):\n            if len(nums1) == 0 or len(nums2) == 0:\n                return []\n            if len(nums1) == 1:\n                return [[nums1[0], nums2[0]]]\n            if len(nums2) == 1:\n                return [[nums1[0], nums2[0]]]\n            if k == 1:\n                return [[nums1[0], nums2[0]]]\n            if k == 2:\n                return [[nums1[0], nums2[0]], [nums1[0], nums2[1]]]\n            if k == 3:\n                return [[nums1[0], nums2[0]], [nums1[0], nums2[1]], [nums1[0], nums2[2]]]\n            if k == 4:\n                return [[nums1[0], nums2[0]], [nums1[0],"
    },
    {
        "number": 373,
        "title": "Find K Pairs with Smallest Sums",
        "difficulty": 1,
        "pass": 2,
        "answer": "        if not nums1 or not nums2:\n            return []\n        if k == 0:\n            return []\n        if k > len(nums1) * len(nums2):\n            return []\n        if len(nums1) == 1:\n            return [[nums1[0], nums2[0]]]\n        if len(nums2) == 1:\n            return [[nums1[0], nums2[0]]]\n        if len(nums1) == 2:\n            return [[nums1[0], nums2[0]], [nums1[1], nums2[0]]]\n        if len(nums2) == 2:\n            return [[nums1[0], nums2[0]], [nums1[1], nums2[0]], [nums1[0], nums2[1]], [nums1[1], nums2[1]]]\n        res = []\n        for i in range(len(nums1)):\n            for j in range(len(n"
    },
    {
        "number": 373,
        "title": "Find K Pairs with Smallest Sums",
        "difficulty": 1,
        "pass": 3,
        "answer": "        if not nums1 or not nums2 or k == 0:\n            return []\n        if len(nums1) == 1 and len(nums2) == 1:\n            return [[nums1[0], nums2[0]]]\n        if len(nums1) == 1:\n            return [[nums1[0], nums2[0]]] + self.kSmallestPairs(nums2, nums2, k - 1)\n        if len(nums2) == 1:\n            return [[nums1[0], nums2[0]]] + self.kSmallestPairs(nums1, nums1, k - 1)\n        if k == 1:\n            return [[nums1[0], nums2[0]]] + self.kSmallestPairs(nums1[1:], nums2, k - 1) + self.kSmallestPairs(nums1, nums2[1:], k - 1)\n        n1 = len(nums1)\n        n2 = len(nums"
    },
    {
        "number": 373,
        "title": "Find K Pairs with Smallest Sums",
        "difficulty": 1,
        "pass": 4,
        "answer": "        if not nums1 or not nums2:\n            return []\n        if k == 0:\n            return []\n        if k > len(nums1) * len(nums2):\n            return []\n        nums1.sort()\n        nums2.sort()\n        res = []\n        for i in range(len(nums1)):\n            for j in range(len(nums2)):\n                if len(res) == k:\n                    return res\n                res.append([nums1[i], nums2[j]])\n                if nums1[i] + nums2[j] > nums1[-1] + nums2[-1]:\n                    break\n        return res"
    },
    {
        "number": 373,
        "title": "Find K Pairs with Smallest Sums",
        "difficulty": 1,
        "pass": 5,
        "answer": "        if len(nums1) == 0 or len(nums2) == 0:\n            return []\n        if k == 0:\n            return []\n        if k > len(nums1) * len(nums2):\n            return []\n        if len(nums1) == 1 and len(nums2) == 1:\n            return [[nums1[0], nums2[0]]]\n        if len(nums1) == 1:\n            return [[nums1[0], nums2[0]]] + self.kSmallestPairs(nums2, nums2, k - 1)\n        if len(nums2) == 1:\n            return [[nums1[0], nums2[0]]] + self.kSmallestPairs(nums1, nums1, k - 1)\n        if len(nums1) == 2 and len(nums2) == 2:\n            return [[nums1[0], nums2[0]], [nums1[0], nums2[1]], [nums"
    },
    {
        "number": 373,
        "title": "Find K Pairs with Smallest Sums",
        "difficulty": 1,
        "pass": 6,
        "answer": "        \n        def k_smallest_pairs(nums1, nums2, k):\n            n = len(nums1)\n            m = len(nums2)\n            if n * m == 0:\n                return []\n            if n == 1:\n                return [[nums1[0], nums2[0]] for _ in range(k)]\n            if m == 1:\n                return [[nums1[0], nums2[0]] for _ in range(k)]\n            if k == 1:\n                return [[nums1[i], nums2[j]] for i in range(n) for j in range(m) if nums1[i] < nums2[j]]\n            if k == 2:\n                return [[nums1[i], nums2[j]] for i in range(n) for j in range(m) if nums1[i] < nums2[j]]\n            \n            nums1.sort()\n            nums2.sort()\n            res = []\n            for i in range(n):\n"
    },
    {
        "number": 373,
        "title": "Find K Pairs with Smallest Sums",
        "difficulty": 1,
        "pass": 7,
        "answer": "        if not nums1 or not nums2:\n            return []\n        if k == 0:\n            return []\n        if len(nums1) == 1 and len(nums2) == 1:\n            return [[nums1[0], nums2[0]]]\n        if len(nums1) == 1:\n            return [[nums1[0], nums2[0]]]\n        if len(nums2) == 1:\n            return [[nums1[0], nums2[0]]]\n        if len(nums1) == 2:\n            return [[nums1[0], nums2[0]], [nums1[1], nums2[0]]]\n        if len(nums2) == 2:\n            return [[nums1[0], nums2[0]], [nums1[1], nums2[1]]]\n        if len(nums1) == 3:\n            return [[nums1[0], nums2[0]], [nums1[1], nums2[0"
    },
    {
        "number": 373,
        "title": "Find K Pairs with Smallest Sums",
        "difficulty": 1,
        "pass": 8,
        "answer": "        if len(nums1) == 0 or len(nums2) == 0:\n            return []\n        if len(nums1) == 1 and len(nums2) == 1:\n            return [[nums1[0], nums2[0]]] if k == 2 else [[nums1[0], nums2[0]], [nums1[0], nums2[0]]]\n        if len(nums1) == 1:\n            return [[nums1[0], nums2[0]]] if k == 2 else [[nums1[0], nums2[0]], [nums1[0], nums2[0]]]\n        if len(nums2) == 1:\n            return [[nums1[0], nums2[0]]] if k == 2 else [[nums1[0], nums2[0]], [nums1[0], nums2[0]]]\n        if len(nums1) == 2:\n            return [[nums1[0], nums2[0]], [n"
    },
    {
        "number": 373,
        "title": "Find K Pairs with Smallest Sums",
        "difficulty": 1,
        "pass": 9,
        "answer": "        if not nums1 or not nums2:\n            return []\n        if k == 0:\n            return []\n        if k > len(nums1) * len(nums2):\n            return []\n        nums1.sort()\n        nums2.sort()\n        ans = []\n        for i in range(len(nums1)):\n            for j in range(len(nums2)):\n                if len(ans) == k:\n                    return ans\n                ans.append([nums1[i], nums2[j]])\n                if nums1[i] + nums2[j] > nums1[-1] + nums2[-1]:\n                    break\n        return ans"
    },
    {
        "number": 374,
        "title": "Guess Number Higher or Lower",
        "difficulty": 0,
        "pass": 0,
        "answer": "        low, high = 1, n\n        while low <= high:\n            mid = (low + high) // 2\n            if guess(mid) == 0:\n                return mid\n            elif guess(mid) == -1:\n                high = mid - 1\n            else:\n                low = mid + 1"
    },
    {
        "number": 374,
        "title": "Guess Number Higher or Lower",
        "difficulty": 0,
        "pass": 1,
        "answer": "        low, high = 1, n\n        while low <= high:\n            mid = (low + high) // 2\n            if guess(mid) == 0:\n                return mid\n            elif guess(mid) == -1:\n                high = mid - 1\n            else:\n                low = mid + 1"
    },
    {
        "number": 374,
        "title": "Guess Number Higher or Lower",
        "difficulty": 0,
        "pass": 2,
        "answer": "        low, high = 1, n\n        while low <= high:\n            mid = (low + high) // 2\n            if guess(mid) == 0:\n                return mid\n            elif guess(mid) == -1:\n                high = mid - 1\n            else:\n                low = mid + 1\n        return -1"
    },
    {
        "number": 374,
        "title": "Guess Number Higher or Lower",
        "difficulty": 0,
        "pass": 3,
        "answer": "        low, high = 1, n\n        while low <= high:\n            mid = (low + high) // 2\n            if guess(mid) == 0:\n                return mid\n            elif guess(mid) == -1:\n                high = mid - 1\n            else:\n                low = mid + 1"
    },
    {
        "number": 374,
        "title": "Guess Number Higher or Lower",
        "difficulty": 0,
        "pass": 4,
        "answer": "        lo, hi = 1, n\n        while lo <= hi:\n            mid = lo + (hi - lo) // 2\n            if guess(mid) == 0:\n                return mid\n            elif guess(mid) == -1:\n                hi = mid - 1\n            else:\n                lo = mid + 1"
    },
    {
        "number": 374,
        "title": "Guess Number Higher or Lower",
        "difficulty": 0,
        "pass": 5,
        "answer": "        left, right = 1, n\n        while left <= right:\n            mid = left + (right - left) // 2\n            if guess(mid) == 0:\n                return mid\n            elif guess(mid) == -1:\n                right = mid - 1\n            else:\n                left = mid + 1"
    },
    {
        "number": 374,
        "title": "Guess Number Higher or Lower",
        "difficulty": 0,
        "pass": 6,
        "answer": "        low, high = 1, n\n        while low <= high:\n            mid = low + (high - low) // 2\n            if guess(mid) == 0:\n                return mid\n            elif guess(mid) == -1:\n                high = mid - 1\n            else:\n                low = mid + 1"
    },
    {
        "number": 374,
        "title": "Guess Number Higher or Lower",
        "difficulty": 0,
        "pass": 7,
        "answer": "        lo, hi = 1, n\n        while lo <= hi:\n            mid = lo + (hi - lo) // 2\n            if guess(mid) == 0:\n                return mid\n            elif guess(mid) == -1:\n                hi = mid - 1\n            else:\n                lo = mid + 1"
    },
    {
        "number": 374,
        "title": "Guess Number Higher or Lower",
        "difficulty": 0,
        "pass": 8,
        "answer": "        low, high = 1, n\n        while low <= high:\n            mid = (low + high) // 2\n            if guess(mid) == 0:\n                return mid\n            elif guess(mid) == -1:\n                high = mid - 1\n            else:\n                low = mid + 1"
    },
    {
        "number": 374,
        "title": "Guess Number Higher or Lower",
        "difficulty": 0,
        "pass": 9,
        "answer": "        left, right = 1, n\n        while left <= right:\n            mid = (left + right) // 2\n            if guess(mid) == 0:\n                return mid\n            elif guess(mid) == -1:\n                right = mid - 1\n            else:\n                left = mid + 1"
    },
    {
        "number": 375,
        "title": "Guess Number Higher or Lower II",
        "difficulty": 1,
        "pass": 0,
        "answer": "        dp = [[-1] * (n + 1) for _ in range(n + 1)]\n        for i in range(n + 1):\n            dp[i][i] = 0\n        for i in range(n - 1, -1, -1):\n            for j in range(i + 1, n + 1):\n                dp[i][j] = float('inf')\n                for k in range(i, j):\n                    dp[i][j] = min(dp[i][j], dp[i][k] + dp[k + 1][j] + abs(k - i))\n        return dp[0][n]"
    },
    {
        "number": 375,
        "title": "Guess Number Higher or Lower II",
        "difficulty": 1,
        "pass": 1,
        "answer": "        dp = [[0] * (n + 1) for _ in range(n + 1)]\n        for i in range(1, n + 1):\n            for j in range(1, n + 1):\n                if i == j:\n                    dp[i][j] = 0\n                else:\n                    dp[i][j] = float('inf')\n                    for k in range(i, j + 1):\n                        dp[i][j] = min(dp[i][j], max(dp[i][k - 1], dp[k + 1][j]) + k)\n        return dp[1][n]"
    },
    {
        "number": 375,
        "title": "Guess Number Higher or Lower II",
        "difficulty": 1,
        "pass": 2,
        "answer": "        if n == 1:\n            return 0\n        if n == 2:\n            return 1\n        dp = [[0] * (n + 1) for _ in range(n + 1)]\n        for i in range(1, n + 1):\n            for j in range(1, n + 1):\n                if i == j:\n                    dp[i][j] = 0\n                elif i > j:\n                    dp[i][j] = float('inf')\n                else:\n                    dp[i][j] = min(dp[i - 1][j], dp[i][j - 1] + i)\n        return dp[n][n]"
    },
    {
        "number": 375,
        "title": "Guess Number Higher or Lower II",
        "difficulty": 1,
        "pass": 3,
        "answer": "        dp = [[0] * (n + 1) for _ in range(n + 1)]\n        for i in range(1, n + 1):\n            for j in range(1, n + 1):\n                if i == j:\n                    dp[i][j] = 0\n                else:\n                    dp[i][j] = float('inf')\n                    for k in range(i, j + 1):\n                        dp[i][j] = min(dp[i][j], max(dp[i][k - 1], dp[k + 1][j]) + k)\n        return dp[1][n]"
    },
    {
        "number": 375,
        "title": "Guess Number Higher or Lower II",
        "difficulty": 1,
        "pass": 4,
        "answer": "        dp = [[0] * (n + 1) for _ in range(n + 1)]\n        for i in range(1, n + 1):\n            for j in range(1, n + 1):\n                if i == j:\n                    dp[i][j] = 0\n                else:\n                    dp[i][j] = float('inf')\n                    for k in range(i, j + 1):\n                        dp[i][j] = min(dp[i][j], max(dp[i][k - 1], dp[k + 1][j]) + k)\n        return dp[1][n]"
    },
    {
        "number": 375,
        "title": "Guess Number Higher or Lower II",
        "difficulty": 1,
        "pass": 5,
        "answer": "        dp = [[0] * (n + 1) for _ in range(n + 1)]\n        for i in range(1, n + 1):\n            for j in range(1, n + 1):\n                if i == j:\n                    dp[i][j] = 0\n                elif i < j:\n                    dp[i][j] = float('inf')\n                else:\n                    dp[i][j] = min(dp[i][j - 1], dp[i - 1][j - 1] + abs(i - j))\n        return dp[n][n]"
    },
    {
        "number": 375,
        "title": "Guess Number Higher or Lower II",
        "difficulty": 1,
        "pass": 6,
        "answer": "        dp = [[0] * (n + 1) for _ in range(n + 1)]\n        for i in range(1, n + 1):\n            for j in range(1, n + 1):\n                if i == j:\n                    dp[i][j] = 0\n                else:\n                    dp[i][j] = float('inf')\n                    for k in range(i, j):\n                        dp[i][j] = min(dp[i][j], k + max(dp[i][k - 1], dp[k + 1][j]))\n        return dp[1][n]"
    },
    {
        "number": 375,
        "title": "Guess Number Higher or Lower II",
        "difficulty": 1,
        "pass": 7,
        "answer": "        dp = [[0] * (n + 1) for _ in range(n + 1)]\n        for i in range(1, n + 1):\n            for j in range(1, n + 1):\n                if i == j:\n                    dp[i][j] = 0\n                else:\n                    dp[i][j] = float('inf')\n                    for k in range(i, j + 1):\n                        dp[i][j] = min(dp[i][j], max(dp[i][k - 1], dp[k + 1][j]) + k)\n        return dp[1][n]"
    },
    {
        "number": 375,
        "title": "Guess Number Higher or Lower II",
        "difficulty": 1,
        "pass": 8,
        "answer": "        dp = [[0] * (n + 1) for _ in range(n + 1)]\n        for i in range(1, n + 1):\n            for j in range(1, n + 1):\n                if i == j:\n                    dp[i][j] = 0\n                else:\n                    dp[i][j] = min(dp[i - 1][j], dp[i][j - 1]) + 1\n        return dp[n][n]"
    },
    {
        "number": 375,
        "title": "Guess Number Higher or Lower II",
        "difficulty": 1,
        "pass": 9,
        "answer": "        dp = [[0] * (n + 1) for _ in range(n + 1)]\n        for i in range(1, n + 1):\n            for j in range(1, n + 1):\n                if i == j:\n                    dp[i][j] = 0\n                else:\n                    dp[i][j] = float('inf')\n                    for k in range(i, j + 1):\n                        dp[i][j] = min(dp[i][j], max(dp[i][k - 1], dp[k + 1][j]) + k)\n        return dp[1][n]"
    },
    {
        "number": 376,
        "title": "Wiggle Subsequence",
        "difficulty": 1,
        "pass": 0,
        "answer": "        if not nums:\n            return 0\n        n = len(nums)\n        if n == 1:\n            return 1\n        if n == 2:\n            if nums[0] > nums[1]:\n                return 1\n            elif nums[0] < nums[1]:\n                return 1\n            else:\n                return 2\n        dp = [0] * n\n        dp[0] = 1\n        dp[1] = 2 if nums[0] > nums[1] else 1\n        for i in range(2, n):\n            if nums[i] > nums[i - 1]:\n                dp[i] = dp[i - 1] + 2\n            elif nums[i] < nums[i - 1]:\n                dp[i] = dp[i - 1] + 1\n            else:\n                dp[i] = max(dp[i - 1], dp[i - 2] + 1)\n        return dp[-1]"
    },
    {
        "number": 376,
        "title": "Wiggle Subsequence",
        "difficulty": 1,
        "pass": 1,
        "answer": "        n = len(nums)\n        if n == 1:\n            return 1\n        if n == 2:\n            return 2 if nums[0] > nums[1] else 1\n        dp = [1] * n\n        for i in range(1, n):\n            if nums[i] > nums[i - 1]:\n                dp[i] = dp[i - 1] + 1\n            elif nums[i] < nums[i - 1]:\n                dp[i] = dp[i - 1]\n            else:\n                dp[i] = dp[i - 1]\n        return max(dp)"
    },
    {
        "number": 376,
        "title": "Wiggle Subsequence",
        "difficulty": 1,
        "pass": 2,
        "answer": "        if not nums:\n            return 0\n        if len(nums) == 1:\n            return 1\n        if len(nums) == 2:\n            if nums[0] > nums[1]:\n                return 2\n            else:\n                return 1\n        if len(nums) == 3:\n            if nums[0] > nums[1]:\n                if nums[1] > nums[2]:\n                    return 3\n                else:\n                    return 2\n            else:\n                if nums[1] > nums[2]:\n                    return 2\n                else:\n                    return 1\n        if len(nums) == 4:\n            if nums[0] > nums[1]:\n                if nums[1] > nums[2]:\n                    if nums[2] > nums[3]:\n                        return 4\n                    else:\n                        return 3\n                else:\n                    if nums[2] > nums[3]:\n                        return 3\n                    else:\n                        return 2\n            else:\n                if nums[1]"
    },
    {
        "number": 376,
        "title": "Wiggle Subsequence",
        "difficulty": 1,
        "pass": 3,
        "answer": "        if not nums:\n            return 0\n        n = len(nums)\n        if n < 2:\n            return n\n        \n        up, down = 1, 1\n        for i in range(1, n):\n            if nums[i] > nums[i-1]:\n                up = down + 1\n            elif nums[i] < nums[i-1]:\n                down = up + 1\n        \n        return max(up, down)"
    },
    {
        "number": 376,
        "title": "Wiggle Subsequence",
        "difficulty": 1,
        "pass": 4,
        "answer": "        if not nums:\n            return 0\n        if len(nums) == 1:\n            return 1\n        n = len(nums)\n        dp = [1] * n\n        for i in range(1, n):\n            if nums[i] > nums[i - 1]:\n                dp[i] = dp[i - 1] + 1\n            elif nums[i] < nums[i - 1]:\n                dp[i] = dp[i - 1]\n            else:\n                dp[i] = dp[i - 1]\n        return max(dp)"
    },
    {
        "number": 376,
        "title": "Wiggle Subsequence",
        "difficulty": 1,
        "pass": 5,
        "answer": "        if not nums:\n            return 0\n        n = len(nums)\n        if n == 1:\n            return 1\n        if n == 2:\n            return 1 if nums[1] - nums[0] > 0 else 2\n        dp = [0] * n\n        dp[0] = 1\n        dp[1] = 1 if nums[1] - nums[0] > 0 else 2\n        for i in range(2, n):\n            if nums[i] - nums[i - 1] > 0:\n                dp[i] = dp[i - 1] + 1\n            elif nums[i] - nums[i - 1] < 0:\n                dp[i] = dp[i - 1] + 2\n            else:\n                dp[i] = dp[i - 1]\n        return max(dp)"
    },
    {
        "number": 376,
        "title": "Wiggle Subsequence",
        "difficulty": 1,
        "pass": 6,
        "answer": "        if not nums:\n            return 0\n        if len(nums) == 1:\n            return 1\n        if len(nums) == 2:\n            if nums[0] > nums[1]:\n                return 2\n            else:\n                return 1\n        dp = [1] * len(nums)\n        for i in range(1, len(nums)):\n            if nums[i] > nums[i - 1]:\n                dp[i] = dp[i - 1] + 1\n            elif nums[i] < nums[i - 1]:\n                dp[i] = dp[i - 1]\n            else:\n                dp[i] = dp[i - 1]\n        return max(dp)"
    },
    {
        "number": 376,
        "title": "Wiggle Subsequence",
        "difficulty": 1,
        "pass": 7,
        "answer": "        if not nums:\n            return 0\n        \n        n = len(nums)\n        if n == 1:\n            return 1\n        \n        dp = [1] * n\n        \n        for i in range(1, n):\n            if nums[i] > nums[i-1]:\n                dp[i] = dp[i-1] + 1\n            elif nums[i] < nums[i-1]:\n                dp[i] = dp[i-1] - 1\n            else:\n                dp[i] = dp[i-1]\n        \n        return max(dp)"
    },
    {
        "number": 376,
        "title": "Wiggle Subsequence",
        "difficulty": 1,
        "pass": 8,
        "answer": "        if not nums:\n            return 0\n        n = len(nums)\n        if n == 1:\n            return 1\n        if n == 2:\n            if nums[0] > nums[1]:\n                return 1\n            else:\n                return 2\n        dp = [0] * n\n        dp[0] = 1\n        dp[1] = 2\n        for i in range(2, n):\n            if nums[i] > nums[i - 1]:\n                dp[i] = dp[i - 1] + 1\n            elif nums[i] < nums[i - 1]:\n                dp[i] = dp[i - 1] + 2\n            else:\n                dp[i] = dp[i - 1]\n        return max(dp)"
    },
    {
        "number": 376,
        "title": "Wiggle Subsequence",
        "difficulty": 1,
        "pass": 9,
        "answer": "        if not nums:\n            return 0\n        \n        n = len(nums)\n        dp = [1] * n\n        \n        for i in range(1, n):\n            if nums[i] > nums[i-1]:\n                dp[i] = dp[i-1] + 1\n            elif nums[i] < nums[i-1]:\n                dp[i] = dp[i-1] - 1\n            else:\n                dp[i] = dp[i-1]\n        \n        return max(dp)"
    },
    {
        "number": 377,
        "title": "Combination Sum IV",
        "difficulty": 1,
        "pass": 0,
        "answer": "        nums.sort()\n        n = len(nums)\n        dp = [[0] * (target + 1) for _ in range(n + 1)]\n        dp[0][0] = 1\n        for i in range(1, n + 1):\n            for j in range(1, target + 1):\n                if j - nums[i - 1] >= 0:\n                    dp[i][j] = dp[i - 1][j] + dp[i - 1][j - nums[i - 1]]\n                else:\n                    dp[i][j] = dp[i - 1][j]\n        return dp[-1][-1]"
    },
    {
        "number": 377,
        "title": "Combination Sum IV",
        "difficulty": 1,
        "pass": 1,
        "answer": "        nums.sort()\n        n = len(nums)\n        dp = [[0] * (target + 1) for _ in range(n + 1)]\n        dp[0][0] = 1\n        for i in range(1, n + 1):\n            for j in range(1, target + 1):\n                if nums[i - 1] <= j:\n                    dp[i][j] = dp[i - 1][j] + dp[i - 1][j - nums[i - 1]]\n                else:\n                    dp[i][j] = dp[i - 1][j]\n        return dp[-1][-1]"
    },
    {
        "number": 377,
        "title": "Combination Sum IV",
        "difficulty": 1,
        "pass": 2,
        "answer": "        if not nums:\n            return 0\n        nums = sorted(nums)\n        dp = [0] * (target + 1)\n        dp[0] = 1\n        for i in range(1, target + 1):\n            for j in range(len(nums)):\n                if i >= nums[j]:\n                    dp[i] += dp[i - nums[j]]\n        return dp[-1]"
    },
    {
        "number": 377,
        "title": "Combination Sum IV",
        "difficulty": 1,
        "pass": 3,
        "answer": "        nums.sort()\n        n = len(nums)\n        dp = [[0] * (target + 1) for _ in range(n + 1)]\n        dp[0][0] = 1\n        for i in range(1, n + 1):\n            for j in range(1, target + 1):\n                if nums[i - 1] <= j:\n                    dp[i][j] = dp[i - 1][j] + dp[i - 1][j - nums[i - 1]]\n                else:\n                    dp[i][j] = dp[i - 1][j]\n        return dp[-1][-1]"
    },
    {
        "number": 377,
        "title": "Combination Sum IV",
        "difficulty": 1,
        "pass": 4,
        "answer": "        nums = sorted(nums)\n        size = len(nums)\n        dp = [[0] * (target + 1) for _ in range(size + 1)]\n        dp[0][0] = 1\n        for i in range(1, size + 1):\n            for j in range(1, target + 1):\n                if nums[i - 1] <= j:\n                    dp[i][j] = dp[i - 1][j] + dp[i - 1][j - nums[i - 1]]\n                else:\n                    dp[i][j] = dp[i - 1][j]\n        return dp[-1][-1]"
    },
    {
        "number": 377,
        "title": "Combination Sum IV",
        "difficulty": 1,
        "pass": 5,
        "answer": "        nums = sorted(nums)\n        dp = [0] * (target + 1)\n        dp[0] = 1\n        for i in range(1, target + 1):\n            for j in range(len(nums)):\n                if nums[j] <= i:\n                    dp[i] += dp[i - nums[j]]\n        return dp[-1]"
    },
    {
        "number": 377,
        "title": "Combination Sum IV",
        "difficulty": 1,
        "pass": 6,
        "answer": "        nums.sort()\n        dp = [1] + [0] * target\n        for i in range(1, target + 1):\n            for j in range(len(nums)):\n                if nums[j] > i:\n                    break\n                dp[i] += dp[i - nums[j]]\n        return dp[-1]"
    },
    {
        "number": 377,
        "title": "Combination Sum IV",
        "difficulty": 1,
        "pass": 7,
        "answer": "        nums.sort()\n        n = len(nums)\n        dp = [[0] * (target + 1) for _ in range(n + 1)]\n        dp[0][0] = 1\n        for i in range(1, n + 1):\n            for j in range(1, target + 1):\n                if nums[i - 1] <= j:\n                    dp[i][j] = dp[i - 1][j] + dp[i - 1][j - nums[i - 1]]\n                else:\n                    dp[i][j] = dp[i - 1][j]\n        return dp[-1][-1]"
    },
    {
        "number": 377,
        "title": "Combination Sum IV",
        "difficulty": 1,
        "pass": 8,
        "answer": "        if not nums:\n            return 0\n        nums = sorted(nums)\n        dp = [0] * (target + 1)\n        dp[0] = 1\n        for i in range(1, target + 1):\n            for j in range(len(nums)):\n                if i >= nums[j]:\n                    dp[i] += dp[i - nums[j]]\n        return dp[-1]"
    },
    {
        "number": 377,
        "title": "Combination Sum IV",
        "difficulty": 1,
        "pass": 9,
        "answer": "        nums = sorted(nums)\n        dp = [0] * (target + 1)\n        dp[0] = 1\n        for i in range(1, target + 1):\n            for j in range(len(nums)):\n                if nums[j] <= i:\n                    dp[i] += dp[i - nums[j]]\n        return dp[-1]"
    },
    {
        "number": 378,
        "title": "Kth Smallest Element in a Sorted Matrix",
        "difficulty": 1,
        "pass": 0,
        "answer": "        n = len(matrix)\n        if n == 0:\n            return -1\n        if n == 1:\n            return matrix[0][0]\n        if n == 2:\n            return min(matrix[0][0], matrix[1][0])\n        if n == 3:\n            return min(matrix[0][0], min(matrix[1][0], matrix[2][0]))\n        if n == 4:\n            return min(matrix[0][0], min(matrix[1][0], min(matrix[2][0], matrix[3][0])))\n        if n == 5:\n            return min(matrix[0][0], min(matrix[1][0], min(matrix[2][0], min(matrix[3][0], matrix[4][0]))))\n        if n == 6:\n            return min(matrix[0][0], min(matrix[1][0], min(matrix[2][0], min(matrix[3][0], min(matrix[4][0], matrix["
    },
    {
        "number": 378,
        "title": "Kth Smallest Element in a Sorted Matrix",
        "difficulty": 1,
        "pass": 1,
        "answer": "        # O(n)\n        n = len(matrix)\n        lo, hi = matrix[0][0], matrix[n - 1][n - 1]\n        while lo < hi:\n            mid = lo + (hi - lo) // 2\n            cnt = 0\n            for i in range(n):\n                for j in range(n):\n                    if matrix[i][j] < mid:\n                        cnt += 1\n            if cnt < k:\n                lo = mid + 1\n            else:\n                hi = mid\n        return lo"
    },
    {
        "number": 378,
        "title": "Kth Smallest Element in a Sorted Matrix",
        "difficulty": 1,
        "pass": 2,
        "answer": "        if not matrix or len(matrix) == 0:\n            return None\n        if k <= 0 or k > len(matrix) * len(matrix[0]):\n            return None"
    },
    {
        "number": 378,
        "title": "Kth Smallest Element in a Sorted Matrix",
        "difficulty": 1,
        "pass": 3,
        "answer": "        n = len(matrix)\n        lo, hi = matrix[0][0], matrix[n - 1][n - 1]\n        while lo < hi:\n            mid = lo + (hi - lo) // 2\n            count = 0\n            for i in range(n):\n                for j in range(n):\n                    if matrix[i][j] < mid:\n                        count += 1\n            if count < k:\n                lo = mid + 1\n            else:\n                hi = mid\n        return lo"
    },
    {
        "number": 378,
        "title": "Kth Smallest Element in a Sorted Matrix",
        "difficulty": 1,
        "pass": 4,
        "answer": "        if not matrix or not matrix[0]:\n            return -1\n        n = len(matrix)\n        lo, hi = matrix[0][0], matrix[n - 1][n - 1]\n        while lo < hi:\n            mid = lo + (hi - lo) // 2\n            cnt = 0\n            for i in range(n):\n                for j in range(n):\n                    if matrix[i][j] < mid:\n                        cnt += 1\n            if cnt < k:\n                lo = mid + 1\n            else:\n                hi = mid\n        return lo"
    },
    {
        "number": 378,
        "title": "Kth Smallest Element in a Sorted Matrix",
        "difficulty": 1,
        "pass": 5,
        "answer": "        n = len(matrix)\n        left = 0\n        right = n * n - 1\n        while left <= right:\n            pivot_idx = self.partition(matrix, left, right)\n            if pivot_idx == k - 1:\n                return matrix[pivot_idx][k - 1]\n            elif pivot_idx > k - 1:\n                right = pivot_idx - 1\n            else:\n                left = pivot_idx + 1\n        return -1"
    },
    {
        "number": 378,
        "title": "Kth Smallest Element in a Sorted Matrix",
        "difficulty": 1,
        "pass": 6,
        "answer": "        # Time: O(n)\n        # Space: O(1)\n        if not matrix:\n            return None\n        n = len(matrix)\n        left, right = matrix[0][0], matrix[n - 1][n - 1]\n        while left < right:\n            mid = (left + right) // 2\n            count = 0\n            for i in range(n):\n                for j in range(n):\n                    if matrix[i][j] < mid:\n                        count += 1\n            if count < k:\n                left = mid + 1\n            else:\n                right = mid\n        return left"
    },
    {
        "number": 378,
        "title": "Kth Smallest Element in a Sorted Matrix",
        "difficulty": 1,
        "pass": 7,
        "answer": "        if not matrix or not matrix[0]:\n            return None\n        m, n = len(matrix), len(matrix[0])\n        left, right = matrix[0][0], matrix[-1][-1]\n        while left < right:\n            mid = (left + right) // 2\n            count = 0\n            for i in range(m):\n                for j in range(n):\n                    if matrix[i][j] < mid:\n                        count += 1\n            if count < k:\n                left = mid + 1\n            else:\n                right = mid\n        return left"
    },
    {
        "number": 378,
        "title": "Kth Smallest Element in a Sorted Matrix",
        "difficulty": 1,
        "pass": 8,
        "answer": "        n = len(matrix)\n        lo, hi = matrix[0][0], matrix[n-1][n-1]\n        while lo < hi:\n            mid = lo + (hi - lo) // 2\n            count = 0\n            for i in range(n):\n                for j in range(n):\n                    if matrix[i][j] < mid:\n                        count += 1\n            if count < k:\n                lo = mid + 1\n            else:\n                hi = mid\n        return lo"
    },
    {
        "number": 378,
        "title": "Kth Smallest Element in a Sorted Matrix",
        "difficulty": 1,
        "pass": 9,
        "answer": "        n = len(matrix)\n        if n == 0:\n            return -1\n        if n == 1:\n            return matrix[0][0]\n        if n == 2:\n            return min(matrix[0][0], matrix[0][1])\n        if n == 3:\n            return min(matrix[0][0], matrix[0][1], matrix[0][2])\n        if n == 4:\n            return min(matrix[0][0], matrix[0][1], matrix[0][2], matrix[0][3])\n        if n == 5:\n            return min(matrix[0][0], matrix[0][1], matrix[0][2], matrix[0][3], matrix[0][4])\n        if n == 6:\n            return min(matrix[0][0], matrix[0][1], matrix[0][2], matrix[0][3], matrix[0][4], matrix[0][5])\n        if n == 7:\n            return min(matrix[0][0], matrix[0][1], matrix[0]["
    },
    {
        "number": 380,
        "title": "Insert Delete GetRandom O(1)",
        "difficulty": 1,
        "pass": 0,
        "answer": "        \n        \n        \n        "
    },
    {
        "number": 380,
        "title": "Insert Delete GetRandom O(1)",
        "difficulty": 1,
        "pass": 1,
        "answer": "        # Your RandomizedSet object will be instantiated and called as such:\n        # obj = RandomizedSet()\n        # param_1 = obj.insert(val)\n        # param_2 = obj.remove(val)\n        # param_3 = obj.getRandom()"
    },
    {
        "number": 380,
        "title": "Insert Delete GetRandom O(1)",
        "difficulty": 1,
        "pass": 2,
        "answer": "        \n        \n        \n        "
    },
    {
        "number": 380,
        "title": "Insert Delete GetRandom O(1)",
        "difficulty": 1,
        "pass": 3,
        "answer": "        # Your RandomizedSet object will be instantiated and called as such:\n        # obj = RandomizedSet()\n        # param_1 = obj.insert(val)\n        # param_2 = obj.remove(val)\n        # param_3 = obj.getRandom()"
    },
    {
        "number": 380,
        "title": "Insert Delete GetRandom O(1)",
        "difficulty": 1,
        "pass": 4,
        "answer": "        "
    },
    {
        "number": 380,
        "title": "Insert Delete GetRandom O(1)",
        "difficulty": 1,
        "pass": 5,
        "answer": "        \n        \n        "
    },
    {
        "number": 380,
        "title": "Insert Delete GetRandom O(1)",
        "difficulty": 1,
        "pass": 6,
        "answer": "    def __init__(self):\n    def insert(self, val: int) -> bool:\n    def remove(self, val: int) -> bool:\n    def getRandom(self) -> int:\n        \"\"\"\n        Implement the RandomizedSet class:\n            RandomizedSet() Initializes the RandomizedSet object.\n            bool insert(int val) Inserts an item val into the set if not present. Returns true if the item was not present, false otherwise.\n            bool remove(int val) Removes an item val from the set if present. Returns true if the item was present, false otherwise.\n            int getRandom() Returns a random element from the current set of elements (it's guaranteed that at least one element exists when this method is called). Each element must have the same probability of being returned.\n        You must implement the functions of the class such that each function works in average O(1) time complexity.\n        Example 1:\n        Input\n        [\"RandomizedSet\", \"insert\", \"remove\", \"insert\", \"getRandom\", \"remove\", \"insert\", \"getRandom\"]\n        [[], [1], [2"
    },
    {
        "number": 380,
        "title": "Insert Delete GetRandom O(1)",
        "difficulty": 1,
        "pass": 7,
        "answer": "    def __init__(self):\n    def insert(self, val: int) -> bool:\n    def remove(self, val: int) -> bool:\n    def getRandom(self) -> int:\n        \"\"\"\n        Implement the RandomizedSet class:\n            RandomizedSet() Initializes the RandomizedSet object.\n            bool insert(int val) Inserts an item val into the set if not present. Returns true if the item was not present, false otherwise.\n            bool remove(int val) Removes an item val from the set if present. Returns true if the item was present, false otherwise.\n            int getRandom() Returns a random element from the current set of elements (it's guaranteed that at least one element exists when this method is called). Each element must have the same probability of being returned.\n        You must implement the functions of the class such that each function works in average O(1) time complexity.\n        Example 1:\n        Input\n        [\"RandomizedSet\", \"insert\", \"remove\", \"insert\", \"getRandom\", \"remove\", \"insert\", \"getRandom\"]\n        [[], [1], [2"
    },
    {
        "number": 380,
        "title": "Insert Delete GetRandom O(1)",
        "difficulty": 1,
        "pass": 8,
        "answer": "        # Your RandomizedSet object will be instantiated and called as such:\n        # obj = RandomizedSet()\n        # param_1 = obj.insert(val)\n        # param_2 = obj.remove(val)\n        # param_3 = obj.getRandom()\n        # @lc code=end"
    },
    {
        "number": 380,
        "title": "Insert Delete GetRandom O(1)",
        "difficulty": 1,
        "pass": 9,
        "answer": "        # Your RandomizedSet object will be instantiated and called as such:\n        # obj = RandomizedSet()\n        # param_1 = obj.insert(val)\n        # param_2 = obj.remove(val)\n        # param_3 = obj.getRandom()"
    },
    {
        "number": 381,
        "title": "Insert Delete GetRandom O(1) - Duplicates allowed",
        "difficulty": 2,
        "pass": 0,
        "answer": "        # Your RandomizedCollection object will be instantiated and called as such:\n        # obj = RandomizedCollection()\n        # param_1 = obj.insert(val)\n        # param_2 = obj.remove(val)\n        # param_3 = obj.getRandom()"
    },
    {
        "number": 381,
        "title": "Insert Delete GetRandom O(1) - Duplicates allowed",
        "difficulty": 2,
        "pass": 1,
        "answer": "        \n        \n    def __init__(self):\n    def insert(self, val: int) -> bool:\n    def remove(self, val: int) -> bool:\n    def getRandom(self) -> int:\n        \"\"\"\n        RandomizedCollection is a data structure that contains a collection of numbers, possibly duplicates (i.e., a multiset). It should support inserting and removing specific elements and also reporting a random element.\n        Implement the RandomizedCollection class:\n            RandomizedCollection() Initializes the empty RandomizedCollection object.\n            bool insert(int val) Inserts an item val into the multiset, even if the item is already present. Returns true if the item is not present, false otherwise.\n            bool remove(int val) Removes an item val from the multiset if present. Returns true if the item is present, false otherwise. Note that if val has multiple occurrences in the multiset, we only remove one of them.\n            int getRandom() Returns a random element from the current multiset of elements. The probability of each element being returned is linearly related to the number of the same"
    },
    {
        "number": 381,
        "title": "Insert Delete GetRandom O(1) - Duplicates allowed",
        "difficulty": 2,
        "pass": 2,
        "answer": "        # Time: O(n)\n        # Space: O(n)\n        self.nums = []\n        self.lookup = {}\n        self.count = 0"
    },
    {
        "number": 381,
        "title": "Insert Delete GetRandom O(1) - Duplicates allowed",
        "difficulty": 2,
        "pass": 3,
        "answer": "        \n        import random\n        \n        class RandomizedCollection(object):"
    },
    {
        "number": 381,
        "title": "Insert Delete GetRandom O(1) - Duplicates allowed",
        "difficulty": 2,
        "pass": 4,
        "answer": "        # Your RandomizedCollection object will be instantiated and called as such:\n        # obj = RandomizedCollection()\n        # param_1 = obj.insert(val)\n        # param_2 = obj.remove(val)\n        # param_3 = obj.getRandom()"
    },
    {
        "number": 381,
        "title": "Insert Delete GetRandom O(1) - Duplicates allowed",
        "difficulty": 2,
        "pass": 5,
        "answer": "\n# Your RandomizedCollection object will be instantiated and called as such:\n# obj = RandomizedCollection()\n# param_1 = obj.insert(val)\n# param_2 = obj.remove(val)\n# param_3 = obj.getRandom()"
    },
    {
        "number": 381,
        "title": "Insert Delete GetRandom O(1) - Duplicates allowed",
        "difficulty": 2,
        "pass": 6,
        "answer": "        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n"
    },
    {
        "number": 381,
        "title": "Insert Delete GetRandom O(1) - Duplicates allowed",
        "difficulty": 2,
        "pass": 7,
        "answer": "        \n    def __init__(self):\n    def insert(self, val: int) -> bool:\n    def remove(self, val: int) -> bool:\n    def getRandom(self) -> int:\n        \"\"\"\n        RandomizedCollection is a data structure that contains a collection of numbers, possibly duplicates (i.e., a multiset). It should support inserting and removing specific elements and also reporting a random element.\n        Implement the RandomizedCollection class:\n            RandomizedCollection() Initializes the empty RandomizedCollection object.\n            bool insert(int val) Inserts an item val into the multiset, even if the item is already present. Returns true if the item is not present, false otherwise.\n            bool remove(int val) Removes an item val from the multiset if present. Returns true if the item is present, false otherwise. Note that if val has multiple occurrences in the multiset, we only remove one of them.\n            int getRandom() Returns a random element from the current multiset of elements. The probability of each element being returned is linearly related to the number of the same values the"
    },
    {
        "number": 381,
        "title": "Insert Delete GetRandom O(1) - Duplicates allowed",
        "difficulty": 2,
        "pass": 8,
        "answer": "        # Your RandomizedCollection object will be instantiated and called as such:\n        # obj = RandomizedCollection()\n        # param_1 = obj.insert(val)\n        # param_2 = obj.remove(val)\n        # param_3 = obj.getRandom()\n        # @lc code=start\n        import random"
    },
    {
        "number": 381,
        "title": "Insert Delete GetRandom O(1) - Duplicates allowed",
        "difficulty": 2,
        "pass": 9,
        "answer": "        \n        \"\"\"\n        Time Complexity: O(N)\n        Space Complexity: O(N)\n        \"\"\"\n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n"
    },
    {
        "number": 382,
        "title": "Linked List Random Node",
        "difficulty": 1,
        "pass": 0,
        "answer": "        if not head:\n            return None\n        cnt = 0\n        curr = head\n        while curr:\n            cnt += 1\n            curr = curr.next\n        curr = head\n        while curr:\n            if random.randint(1, cnt) == 1:\n                return curr.val\n            curr = curr.next\n        return curr.val"
    },
    {
        "number": 382,
        "title": "Linked List Random Node",
        "difficulty": 1,
        "pass": 1,
        "answer": "        if not head:\n            return None\n        \n        curr = head\n        cnt = 0\n        while curr:\n            cnt += 1\n            curr = curr.next\n        \n        p = random.randint(0, cnt - 1)\n        curr = head\n        while p > 0:\n            curr = curr.next\n            p -= 1\n        \n        return curr.val\n        "
    },
    {
        "number": 382,
        "title": "Linked List Random Node",
        "difficulty": 1,
        "pass": 2,
        "answer": "        if not head:\n            return None\n        if head.next is None:\n            return head.val\n        cur = head\n        while cur.next:\n            cur = cur.next\n        cur.next = head\n        return cur.next.val"
    },
    {
        "number": 382,
        "title": "Linked List Random Node",
        "difficulty": 1,
        "pass": 3,
        "answer": "        if not head:\n            return\n        \n        random_node = head\n        while random_node.next:\n            random_node = random_node.next\n        return random_node.val\n        "
    },
    {
        "number": 382,
        "title": "Linked List Random Node",
        "difficulty": 1,
        "pass": 4,
        "answer": "        if head is None:\n            return None\n        if head.next is None:\n            return head.val\n        slow = head\n        fast = head\n        while fast.next is not None and fast.next.next is not None:\n            slow = slow.next\n            fast = fast.next.next\n        return slow.next.val"
    },
    {
        "number": 382,
        "title": "Linked List Random Node",
        "difficulty": 1,
        "pass": 5,
        "answer": "        import random\n        nodes = []\n        while head:\n            nodes.append(head)\n            head = head.next\n        return nodes[random.randint(0, len(nodes) - 1)].val"
    },
    {
        "number": 382,
        "title": "Linked List Random Node",
        "difficulty": 1,
        "pass": 6,
        "answer": "        if not head:\n            return None\n        cur = head\n        count = 0\n        while cur:\n            count += 1\n            cur = cur.next\n        index = random.randint(0, count - 1)\n        cur = head\n        while index > 0:\n            cur = cur.next\n            index -= 1\n        return cur.val"
    },
    {
        "number": 382,
        "title": "Linked List Random Node",
        "difficulty": 1,
        "pass": 7,
        "answer": "        if head is None:\n            return None\n        \n        node = head\n        count = 1\n        while node.next:\n            count += 1\n            node = node.next\n        \n        rand = random.randint(0, count-1)\n        \n        node = head\n        for i in range(rand):\n            node = node.next\n        \n        return node.val"
    },
    {
        "number": 382,
        "title": "Linked List Random Node",
        "difficulty": 1,
        "pass": 8,
        "answer": "        if head is None:\n            return None\n        if head.next is None:\n            return head.val\n        \n        slow = head\n        fast = head\n        while fast.next and fast.next.next:\n            slow = slow.next\n            fast = fast.next.next\n            if random.randint(0,1) == 0:\n                slow = slow.next\n        return slow.val"
    },
    {
        "number": 382,
        "title": "Linked List Random Node",
        "difficulty": 1,
        "pass": 9,
        "answer": "        import random\n        \n        if head is None:\n            return None\n        \n        curr = head\n        \n        while curr.next:\n            curr = curr.next\n        \n        return curr.val\n        \nclass Solution:\n    def __init__(self, head: Optional[ListNode]):\n    def getRandom(self) -> int:\n        \"\"\"\n        Given a singly linked list, return a random node's value from the linked list. Each node must have the same probability of being chosen.\n        Implement the Solution class:\n            Solution(ListNode head) Initializes the object with the head of the singly-linked list head.\n            int getRandom() Chooses a node randomly from the list and returns its value. All the nodes of the list should be equally likely to be chosen.\n        Example 1:\n        Input\n        [\"Solution\", \"getRandom\", \"getRandom\", \"getRandom\", \"getRandom\", \"getRandom\"]\n        [[[1, 2, 3]], [], [], [], [], []]\n        Output\n        [null, 1, 3"
    },
    {
        "number": 383,
        "title": "Ransom Note",
        "difficulty": 0,
        "pass": 0,
        "answer": "        m = {}\n        for i in magazine:\n            if i in m:\n                m[i] += 1\n            else:\n                m[i] = 1\n        for i in ransomNote:\n            if i in m:\n                m[i] -= 1\n                if m[i] == 0:\n                    del m[i]\n            else:\n                return False\n        return True"
    },
    {
        "number": 383,
        "title": "Ransom Note",
        "difficulty": 0,
        "pass": 1,
        "answer": "        from collections import Counter\n        if len(ransomNote) > len(magazine):\n            return False\n        ransomNote = Counter(ransomNote)\n        magazine = Counter(magazine)\n        for letter in ransomNote:\n            if letter not in magazine or ransomNote[letter] > magazine[letter]:\n                return False\n        return True"
    },
    {
        "number": 383,
        "title": "Ransom Note",
        "difficulty": 0,
        "pass": 2,
        "answer": "        if len(ransomNote) > len(magazine):\n            return False\n        if len(ransomNote) == len(magazine):\n            for i in range(len(ransomNote)):\n                if ransomNote[i] in magazine:\n                    continue\n                else:\n                    return False\n            return True\n        if len(ransomNote) < len(magazine):\n            for i in range(len(ransomNote)):\n                if ransomNote[i] in magazine:\n                    continue\n                else:\n                    return False\n            for i in range(len(magazine) - len(ransomNote)):\n                if magazine[i] in ransomNote:\n                    continue\n                else:\n                    return False\n            return True"
    },
    {
        "number": 383,
        "title": "Ransom Note",
        "difficulty": 0,
        "pass": 3,
        "answer": "        if len(ransomNote) > len(magazine):\n            return False\n        count = {}\n        for i in magazine:\n            if i in count:\n                count[i] += 1\n            else:\n                count[i] = 1\n        for i in ransomNote:\n            if i in count:\n                count[i] -= 1\n            else:\n                return False\n        for i in count:\n            if count[i]!= 0:\n                return False\n        return True"
    },
    {
        "number": 383,
        "title": "Ransom Note",
        "difficulty": 0,
        "pass": 4,
        "answer": "        if len(ransomNote) > len(magazine):\n            return False\n        ransomNote = list(ransomNote)\n        magazine = list(magazine)\n        for i in range(len(ransomNote)):\n            if ransomNote[i] in magazine:\n                magazine.remove(ransomNote[i])\n            else:\n                return False\n        return True"
    },
    {
        "number": 383,
        "title": "Ransom Note",
        "difficulty": 0,
        "pass": 5,
        "answer": "        if len(ransomNote) > len(magazine):\n            return False\n        ransomNote = collections.Counter(ransomNote)\n        magazine = collections.Counter(magazine)\n        for letter in ransomNote:\n            if letter not in magazine or ransomNote[letter] > magazine[letter]:\n                return False\n        return True"
    },
    {
        "number": 383,
        "title": "Ransom Note",
        "difficulty": 0,
        "pass": 6,
        "answer": "        if len(ransomNote) > len(magazine):\n            return False\n        ransomNote = collections.Counter(ransomNote)\n        magazine = collections.Counter(magazine)\n        for i in ransomNote:\n            if i not in magazine or ransomNote[i] > magazine[i]:\n                return False\n        return True"
    },
    {
        "number": 383,
        "title": "Ransom Note",
        "difficulty": 0,
        "pass": 7,
        "answer": "        if len(ransomNote) > len(magazine):\n            return False\n        ransomNote = collections.Counter(ransomNote)\n        magazine = collections.Counter(magazine)\n        for k, v in ransomNote.items():\n            if k not in magazine or magazine[k] < v:\n                return False\n        return True"
    },
    {
        "number": 383,
        "title": "Ransom Note",
        "difficulty": 0,
        "pass": 8,
        "answer": "        if len(ransomNote) > len(magazine):\n            return False\n        ransomNote = list(ransomNote)\n        magazine = list(magazine)\n        for i in range(len(ransomNote)):\n            if ransomNote[i] not in magazine:\n                return False\n            else:\n                magazine.remove(ransomNote[i])\n        return True"
    },
    {
        "number": 383,
        "title": "Ransom Note",
        "difficulty": 0,
        "pass": 9,
        "answer": "        if not ransomNote and not magazine:\n            return True\n        if not ransomNote or not magazine:\n            return False\n        if len(ransomNote) > len(magazine):\n            return False\n        ransomNote = sorted(ransomNote)\n        magazine = sorted(magazine)\n        for i in range(len(ransomNote)):\n            if ransomNote[i] == magazine[i]:\n                continue\n            elif ransomNote[i] in magazine:\n                magazine.remove(ransomNote[i])\n            else:\n                return False\n        return True"
    },
    {
        "number": 384,
        "title": "Shuffle an Array",
        "difficulty": 1,
        "pass": 0,
        "answer": "        import random\n        nums = list(nums)\n        for i in range(len(nums)):\n            j = random.randint(0, len(nums)-1)\n            nums[i], nums[j] = nums[j], nums[i]\n        return nums"
    },
    {
        "number": 384,
        "title": "Shuffle an Array",
        "difficulty": 1,
        "pass": 1,
        "answer": "        import random\n        nums = list(nums)\n        random.shuffle(nums)\n        return nums"
    },
    {
        "number": 384,
        "title": "Shuffle an Array",
        "difficulty": 1,
        "pass": 2,
        "answer": "        self.nums = nums"
    },
    {
        "number": 384,
        "title": "Shuffle an Array",
        "difficulty": 1,
        "pass": 3,
        "answer": "        n = len(nums)\n        if n == 0:\n            return nums\n        res = nums[:]\n        for i in range(n):\n            rand = random.randint(0, n - 1)\n            res[i], res[rand] = res[rand], res[i]\n        return res"
    },
    {
        "number": 384,
        "title": "Shuffle an Array",
        "difficulty": 1,
        "pass": 4,
        "answer": "        # Time: O(n)\n        # Space: O(n)\n        nums = list(nums)\n        random.shuffle(nums)\n        return nums"
    },
    {
        "number": 384,
        "title": "Shuffle an Array",
        "difficulty": 1,
        "pass": 5,
        "answer": "        import random\n        nums = list(nums)\n        random.shuffle(nums)\n        return nums"
    },
    {
        "number": 384,
        "title": "Shuffle an Array",
        "difficulty": 1,
        "pass": 6,
        "answer": "        import random\n        nums = list(nums)\n        random.shuffle(nums)\n        return nums"
    },
    {
        "number": 384,
        "title": "Shuffle an Array",
        "difficulty": 1,
        "pass": 7,
        "answer": "        import random\n        nums = list(nums)\n        random.shuffle(nums)\n        return nums"
    },
    {
        "number": 384,
        "title": "Shuffle an Array",
        "difficulty": 1,
        "pass": 8,
        "answer": "        n = len(nums)\n        for i in range(n):\n            j = random.randint(i, n-1)\n            nums[i], nums[j] = nums[j], nums[i]\n        return nums"
    },
    {
        "number": 384,
        "title": "Shuffle an Array",
        "difficulty": 1,
        "pass": 9,
        "answer": "        self.nums = nums"
    },
    {
        "number": 385,
        "title": "Mini Parser",
        "difficulty": 1,
        "pass": 0,
        "answer": "        if not s:\n            return NestedInteger()\n        elif s[0] == '[':\n            return self.deserialize(s[1:-1])\n        else:\n            return NestedInteger(int(s))"
    },
    {
        "number": 385,
        "title": "Mini Parser",
        "difficulty": 1,
        "pass": 1,
        "answer": "        if not s:\n            return NestedInteger()\n        if s[0] == '[' and s[-1] == ']':\n            return NestedInteger(self.deserialize(s[1:-1]))\n        else:\n            return NestedInteger(int(s))"
    },
    {
        "number": 385,
        "title": "Mini Parser",
        "difficulty": 1,
        "pass": 2,
        "answer": "        if not s:\n            return NestedInteger()\n        if s[0] == '[' and s[-1] == ']':\n            return NestedInteger(self.deserialize(s[1:-1]))\n        else:\n            return NestedInteger(int(s))"
    },
    {
        "number": 385,
        "title": "Mini Parser",
        "difficulty": 1,
        "pass": 3,
        "answer": "        if not s:\n            return NestedInteger()\n        if s[0] == '[' and s[-1] == ']':\n            return NestedInteger(self.deserialize(s[1:-1]))\n        else:\n            return NestedInteger(int(s))"
    },
    {
        "number": 385,
        "title": "Mini Parser",
        "difficulty": 1,
        "pass": 4,
        "answer": "        if not s:\n            return NestedInteger()\n        if s[0] == '[':\n            return self.deserialize(s[1:-1])\n        else:\n            return NestedInteger(int(s))"
    },
    {
        "number": 385,
        "title": "Mini Parser",
        "difficulty": 1,
        "pass": 5,
        "answer": "        if not s:\n            return NestedInteger()\n        else:\n            if s[0] == '[' and s[-1] == ']':\n                return NestedInteger(self.deserialize(s[1:-1]))\n            else:\n                return NestedInteger(int(s[0]))"
    },
    {
        "number": 385,
        "title": "Mini Parser",
        "difficulty": 1,
        "pass": 6,
        "answer": "        if not s:\n            return NestedInteger()\n        if s[0] == '[':\n            return self.deserialize(s[1:-1])\n        else:\n            return NestedInteger(int(s))"
    },
    {
        "number": 385,
        "title": "Mini Parser",
        "difficulty": 1,
        "pass": 7,
        "answer": "        if not s:\n            return NestedInteger()\n        if s[0] == '[':\n            return self.deserialize(s[1:-1])\n        else:\n            return NestedInteger(int(s))"
    },
    {
        "number": 385,
        "title": "Mini Parser",
        "difficulty": 1,
        "pass": 8,
        "answer": "        if not s:\n            return NestedInteger()"
    },
    {
        "number": 385,
        "title": "Mini Parser",
        "difficulty": 1,
        "pass": 9,
        "answer": "        if not s:\n            return NestedInteger()\n        if s[0] == '[' and s[-1] == ']':\n            return NestedInteger(self.deserialize(s[1:-1]))\n        else:\n            return NestedInteger(int(s))"
    },
    {
        "number": 386,
        "title": "Lexicographical Numbers",
        "difficulty": 1,
        "pass": 0,
        "answer": "        if n == 1:\n            return [1]\n        if n == 2:\n            return [1, 2]\n        if n == 3:\n            return [1, 2, 3]\n        if n == 4:\n            return [1, 2, 3, 4]\n        if n == 5:\n            return [1, 2, 3, 4, 5]\n        if n == 6:\n            return [1, 2, 3, 4, 5, 6]\n        if n == 7:\n            return [1, 2, 3, 4, 5, 6, 7]\n        if n == 8:\n            return [1, 2, 3, 4, 5, 6, 7, 8]\n        if n == 9:\n            return [1, 2, 3, 4, 5, 6, 7, 8, 9]\n        if n == 10:\n            return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n        if n == 11:\n            return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10,"
    },
    {
        "number": 386,
        "title": "Lexicographical Numbers",
        "difficulty": 1,
        "pass": 1,
        "answer": "        if n == 0:\n            return []\n        if n == 1:\n            return [1]\n        if n == 2:\n            return [1, 2]\n        if n == 3:\n            return [1, 2, 3]\n        if n == 4:\n            return [1, 2, 3, 4]\n        if n == 5:\n            return [1, 2, 3, 4, 5]\n        if n == 6:\n            return [1, 2, 3, 4, 5, 6]\n        if n == 7:\n            return [1, 2, 3, 4, 5, 6, 7]\n        if n == 8:\n            return [1, 2, 3, 4, 5, 6, 7, 8]\n        if n == 9:\n            return [1, 2, 3, 4, 5, 6, 7, 8, 9]\n        if n == 10:\n            return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n        if n == 11:\n            return [1, 2, 3, 4, 5"
    },
    {
        "number": 386,
        "title": "Lexicographical Numbers",
        "difficulty": 1,
        "pass": 2,
        "answer": "        if n == 1:\n            return [1]\n        if n == 2:\n            return [1,2]\n        if n == 3:\n            return [1,2,3]\n        if n == 4:\n            return [1,2,3,4]\n        if n == 5:\n            return [1,2,3,4,5]\n        if n == 6:\n            return [1,2,3,4,5,6]\n        if n == 7:\n            return [1,2,3,4,5,6,7]\n        if n == 8:\n            return [1,2,3,4,5,6,7,8]\n        if n == 9:\n            return [1,2,3,4,5,6,7,8,9]\n        if n == 10:\n            return [1,2,3,4,5,6,7,8,9,10]\n        if n == 11:\n            return [1,2,3,4,5,6,7,8,9,10,"
    },
    {
        "number": 386,
        "title": "Lexicographical Numbers",
        "difficulty": 1,
        "pass": 3,
        "answer": "        if n == 1:\n            return [1]\n        if n == 2:\n            return [1,2]\n        if n == 3:\n            return [1,2,3]\n        if n == 4:\n            return [1,2,3,4]\n        if n == 5:\n            return [1,2,3,4,5]\n        if n == 6:\n            return [1,2,3,4,5,6]\n        if n == 7:\n            return [1,2,3,4,5,6,7]\n        if n == 8:\n            return [1,2,3,4,5,6,7,8]\n        if n == 9:\n            return [1,2,3,4,5,6,7,8,9]\n        if n == 10:\n            return [1,2,3,4,5,6,7,8,9,10]\n        if n == 11:\n            return [1,2,3,4,5,6,7,8,9,10,"
    },
    {
        "number": 386,
        "title": "Lexicographical Numbers",
        "difficulty": 1,
        "pass": 4,
        "answer": "        if n == 1:\n            return [1]\n        res = []\n        for i in range(1, n+1):\n            res.append(i)\n        for i in range(2, n+1):\n            for j in range(i-1, 0, -1):\n                if res[j] > res[j-1]:\n                    res[j], res[j-1] = res[j-1], res[j]\n        return res"
    },
    {
        "number": 386,
        "title": "Lexicographical Numbers",
        "difficulty": 1,
        "pass": 5,
        "answer": "        \n        def dfs(n):\n            if n == 1:\n                return [1]\n            if n == 2:\n                return [1,2]\n            if n == 3:\n                return [1,2,3]\n            if n == 4:\n                return [1,2,3,4]\n            if n == 5:\n                return [1,2,3,4,5]\n            if n == 6:\n                return [1,2,3,4,5,6]\n            if n == 7:\n                return [1,2,3,4,5,6,7]\n            if n == 8:\n                return [1,2,3,4,5,6,7,8]\n            if n == 9:\n                return [1,2,3,4,5,6,7,8,9]\n            if n == 10:\n                return [1,2,3,4,5,6,7,8,9,10]\n            if n == 11:\n                return [1,2,3,4,5,"
    },
    {
        "number": 386,
        "title": "Lexicographical Numbers",
        "difficulty": 1,
        "pass": 6,
        "answer": "        if n == 1:\n            return [1]\n        if n == 2:\n            return [1, 2]\n        if n == 3:\n            return [1, 2, 3]\n        if n == 4:\n            return [1, 2, 3, 4]\n        if n == 5:\n            return [1, 2, 3, 4, 5]\n        if n == 6:\n            return [1, 2, 3, 4, 5, 6]\n        if n == 7:\n            return [1, 2, 3, 4, 5, 6, 7]\n        if n == 8:\n            return [1, 2, 3, 4, 5, 6, 7, 8]\n        if n == 9:\n            return [1, 2, 3, 4, 5, 6, 7, 8, 9]\n        if n == 10:\n            return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n        if n == 11:\n            return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10,"
    },
    {
        "number": 386,
        "title": "Lexicographical Numbers",
        "difficulty": 1,
        "pass": 7,
        "answer": "        if n == 0:\n            return []\n        if n == 1:\n            return [1]\n        res = []\n        for i in range(1, n+1):\n            res.append(i)\n        for i in range(2, n+1):\n            for j in range(i-1, 0, -1):\n                if res[j] > res[j-1]:\n                    res[j], res[j-1] = res[j-1], res[j]\n        return res"
    },
    {
        "number": 386,
        "title": "Lexicographical Numbers",
        "difficulty": 1,
        "pass": 8,
        "answer": "        if n == 1:\n            return [1]\n        if n == 2:\n            return [1,2]\n        res = []\n        for i in range(1,n+1):\n            res.append(i)\n        for i in range(2,n+1):\n            for j in range(i-1,0,-1):\n                if res[j] > res[j-1]:\n                    res[j],res[j-1] = res[j-1],res[j]\n        return res\n        \nclass Solution:\n    def lexicalOrder(self, n: int) -> List[int]:\n        \"\"\"\n        Given an integer n, return all the numbers in the range [1, n] sorted in lexicographical order.\n        You must write an algorithm that runs in O(n) time and uses O(1) extra space. \n        Example 1:\n        Input: n = 13\n        Output: [1,10,11,12,13,2,3,4,5,6,7,8,9]\n        Example 2:\n        "
    },
    {
        "number": 386,
        "title": "Lexicographical Numbers",
        "difficulty": 1,
        "pass": 9,
        "answer": "        res = []\n        for i in range(1, n+1):\n            res.append(i)\n        res.sort()\n        return res"
    },
    {
        "number": 387,
        "title": "First Unique Character in a String",
        "difficulty": 0,
        "pass": 0,
        "answer": "        d = {}\n        for i in range(len(s)):\n            if s[i] not in d:\n                d[s[i]] = 1\n            else:\n                d[s[i]] += 1\n        for i in range(len(s)):\n            if d[s[i]] == 1:\n                return i\n        return -1"
    },
    {
        "number": 387,
        "title": "First Unique Character in a String",
        "difficulty": 0,
        "pass": 1,
        "answer": "        if not s:\n            return -1\n        d = {}\n        for i in range(len(s)):\n            if s[i] not in d:\n                d[s[i]] = 1\n            else:\n                d[s[i]] += 1\n        for i in range(len(s)):\n            if d[s[i]] == 1:\n                return i\n        return -1"
    },
    {
        "number": 387,
        "title": "First Unique Character in a String",
        "difficulty": 0,
        "pass": 2,
        "answer": "        d = {}\n        for i in range(len(s)):\n            if s[i] not in d:\n                d[s[i]] = 1\n            else:\n                d[s[i]] += 1\n        for i in range(len(s)):\n            if d[s[i]] == 1:\n                return i\n        return -1"
    },
    {
        "number": 387,
        "title": "First Unique Character in a String",
        "difficulty": 0,
        "pass": 3,
        "answer": "        if not s:\n            return -1\n        count = {}\n        for i in range(len(s)):\n            if s[i] not in count:\n                count[s[i]] = 1\n            else:\n                count[s[i]] += 1\n        for i in range(len(s)):\n            if count[s[i]] == 1:\n                return i\n        return -1"
    },
    {
        "number": 387,
        "title": "First Unique Character in a String",
        "difficulty": 0,
        "pass": 4,
        "answer": "        d = {}\n        for i in range(len(s)):\n            if s[i] not in d:\n                d[s[i]] = 1\n            else:\n                d[s[i]] += 1\n        for i in range(len(s)):\n            if d[s[i]] == 1:\n                return i\n        return -1"
    },
    {
        "number": 387,
        "title": "First Unique Character in a String",
        "difficulty": 0,
        "pass": 5,
        "answer": "        d = {}\n        for i in range(len(s)):\n            if s[i] not in d:\n                d[s[i]] = 1\n            else:\n                d[s[i]] += 1\n        for i in range(len(s)):\n            if d[s[i]] == 1:\n                return i\n        return -1"
    },
    {
        "number": 387,
        "title": "First Unique Character in a String",
        "difficulty": 0,
        "pass": 6,
        "answer": "        d = {}\n        for i in range(len(s)):\n            if s[i] not in d:\n                d[s[i]] = 1\n            else:\n                d[s[i]] += 1\n        for i in range(len(s)):\n            if d[s[i]] == 1:\n                return i\n        return -1"
    },
    {
        "number": 387,
        "title": "First Unique Character in a String",
        "difficulty": 0,
        "pass": 7,
        "answer": "        d = {}\n        for i in range(len(s)):\n            if s[i] not in d:\n                d[s[i]] = 1\n            else:\n                d[s[i]] += 1\n        for i in range(len(s)):\n            if d[s[i]] == 1:\n                return i\n        return -1"
    },
    {
        "number": 387,
        "title": "First Unique Character in a String",
        "difficulty": 0,
        "pass": 8,
        "answer": "        d = {}\n        for i in range(len(s)):\n            if s[i] not in d:\n                d[s[i]] = 1\n            else:\n                d[s[i]] += 1\n        for i in range(len(s)):\n            if d[s[i]] == 1:\n                return i\n        return -1"
    },
    {
        "number": 387,
        "title": "First Unique Character in a String",
        "difficulty": 0,
        "pass": 9,
        "answer": "        if not s:\n            return -1\n        hash_map = {}\n        for i in range(len(s)):\n            if s[i] in hash_map:\n                hash_map[s[i]] += 1\n            else:\n                hash_map[s[i]] = 1\n        for i in range(len(s)):\n            if hash_map[s[i]] == 1:\n                return i\n        return -1"
    },
    {
        "number": 388,
        "title": "Longest Absolute File Path",
        "difficulty": 1,
        "pass": 0,
        "answer": "        \n        if input == \"\":\n            return 0\n        \n        dirs = input.split(\"\\n\")\n        \n        max_len = 0\n        \n        for i in range(len(dirs)):\n            if dirs[i] == \"\":\n                continue\n            \n            path = \"\"\n            \n            for j in range(len(dirs[i])):\n                if dirs[i][j] == \" \":\n                    continue\n                \n                path += dirs[i][j]\n                \n                if j == len(dirs[i]) - 1:\n                    if len(path) > max_len:\n                        max_len = len(path)\n                    break\n                \n                if dirs[i][j+1] == \":\":\n                    if len(path) > max_len:\n                        max_len = len(path)\n                    break\n        \n        return max_len"
    },
    {
        "number": 388,
        "title": "Longest Absolute File Path",
        "difficulty": 1,
        "pass": 1,
        "answer": "        # print(input)\n        if input == \"\":\n            return 0\n        input = input.split(\"\\n\")\n        # print(input)\n        # print(input[0])\n        # print(input[1])\n        # print(input[2])\n        # print(input[3])\n        # print(input[4])\n        # print(input[5])\n        # print(input[6])\n        # print(input[7])\n        # print(input[8])\n        # print(input[9])\n        # print(input[10])\n        # print(input[11])\n        # print(input[12])\n        # print(input[13])\n        # print(input[14])\n        # print(input[15])\n        # print(input[16])\n        # print(input[17])\n        # print(input[18])\n        # print(input[19])\n        # print(input[20])\n        # print(input[21])\n        # print(input[22])\n        # print(input[23"
    },
    {
        "number": 388,
        "title": "Longest Absolute File Path",
        "difficulty": 1,
        "pass": 2,
        "answer": "        if not input:\n            return 0\n        input = input.split('\\n')\n        stack = []\n        max_len = 0\n        for i in range(len(input)):\n            if input[i] == '':\n                continue\n            if input[i][0] == '\\t' or input[i][0] =='':\n                stack.append(input[i][1:])\n            else:\n                while stack and input[i].startswith(stack[-1]):\n                    stack.pop()\n                if stack:\n                    max_len = max(max_len, len(stack) + len(input[i]))\n                else:\n                    max_len = max(max_len, len(input[i]))\n                stack.append(input[i])\n        return max_len"
    },
    {
        "number": 388,
        "title": "Longest Absolute File Path",
        "difficulty": 1,
        "pass": 3,
        "answer": "        if input == \"\":\n            return 0\n        input = input.split(\"\\n\")\n        stack = []\n        max_len = 0\n        for line in input:\n            line = line.split(\"\\t\")\n            if line[0] == \".\":\n                continue\n            if line[0] == \"..\":\n                if len(stack) > 0:\n                    stack.pop()\n            else:\n                stack.append(line[0])\n            max_len = max(max_len, len(\"/\".join(stack)))\n        return max_len"
    },
    {
        "number": 388,
        "title": "Longest Absolute File Path",
        "difficulty": 1,
        "pass": 4,
        "answer": "        if not input:\n            return 0\n        input = input.split('\\n')\n        max_len = 0\n        curr_len = 0\n        stack = []\n        for line in input:\n            line = line.split('\\t')\n            if line[0] == '.':\n                curr_len = 0\n            else:\n                curr_len += len(line[0]) + 1\n            if curr_len > max_len:\n                max_len = curr_len\n            if line[1] == '.':\n                curr_len = 0\n            else:\n                curr_len += len(line[1]) + 1\n            if curr_len > max_len:\n                max_len = curr_len\n            stack.append(line[0])\n            stack.append(line[1])\n        return max_len"
    },
    {
        "number": 388,
        "title": "Longest Absolute File Path",
        "difficulty": 1,
        "pass": 5,
        "answer": "        if not input:\n            return 0\n        input = input.split('\\n')\n        stack = []\n        max_len = 0\n        for line in input:\n            line = line.split('\\t')\n            if line[0] == '.':\n                continue\n            if line[0] == '..':\n                if stack:\n                    stack.pop()\n            else:\n                stack.append(line[0])\n            max_len = max(max_len, len('/'.join(stack)))\n        return max_len"
    },
    {
        "number": 388,
        "title": "Longest Absolute File Path",
        "difficulty": 1,
        "pass": 6,
        "answer": "        \n        def get_depth(path):\n            depth = 0\n            for i in range(len(path)):\n                if path[i] == '/':\n                    return depth\n                else:\n                    depth += 1\n            return depth\n        \n        def get_max_len(path):\n            max_len = 0\n            for i in range(len(path)):\n                if path[i] == '/':\n                    max_len = max(max_len, len(path) - i)\n            return max_len\n        \n        stack = []\n        max_len = 0\n        for i in range(len(input)):\n            if input[i] == '\\n':\n                depth = get_depth(stack)\n                max_len = max(max_len, get_max_len(stack))\n                stack = []\n            else:\n                stack.append(input[i])\n        depth = get_depth(stack)\n        max_len = max(max_len, get_max_len(stack))\n        return max_len"
    },
    {
        "number": 388,
        "title": "Longest Absolute File Path",
        "difficulty": 1,
        "pass": 7,
        "answer": "        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n"
    },
    {
        "number": 388,
        "title": "Longest Absolute File Path",
        "difficulty": 1,
        "pass": 8,
        "answer": "        if not input:\n            return 0\n        \n        stack = []\n        max_len = 0\n        curr_len = 0\n        for line in input.split(\"\\n\"):\n            line = line.strip()\n            if not line:\n                curr_len = 0\n            else:\n                curr_len += len(line) + 1\n            while stack and line.startswith(\"\\t\"):\n                curr_len -= 1\n                stack.pop()\n            if curr_len > max_len:\n                max_len = curr_len\n            stack.append(line)\n        return max_len"
    },
    {
        "number": 388,
        "title": "Longest Absolute File Path",
        "difficulty": 1,
        "pass": 9,
        "answer": "        if not input:\n            return 0\n        stack = []\n        max_len = 0\n        for i in range(len(input)):\n            if input[i] == '\\t' or input[i] =='':\n                continue\n            elif input[i] == '\\n':\n                curr_len = len(stack)\n                if curr_len > max_len:\n                    max_len = curr_len\n                stack = []\n            else:\n                stack.append(input[i])\n        curr_len = len(stack)\n        if curr_len > max_len:\n            max_len = curr_len\n        return max_len"
    },
    {
        "number": 389,
        "title": "Find the Difference",
        "difficulty": 0,
        "pass": 0,
        "answer": "        if not s and not t:\n            return \"\"\n        if not s:\n            return t[0]\n        if not t:\n            return s[0]\n        dic = {}\n        for i in s:\n            if i not in dic:\n                dic[i] = 1\n            else:\n                dic[i] += 1\n        for i in t:\n            if i not in dic:\n                return i\n            else:\n                dic[i] -= 1\n        for i in dic:\n            if dic[i]!= 0:\n                return i"
    },
    {
        "number": 389,
        "title": "Find the Difference",
        "difficulty": 0,
        "pass": 1,
        "answer": "        s = list(s)\n        t = list(t)\n        for i in range(len(t)):\n            if t[i] in s:\n                s.remove(t[i])\n            else:\n                s.append(t[i])\n        return s[0]"
    },
    {
        "number": 389,
        "title": "Find the Difference",
        "difficulty": 0,
        "pass": 2,
        "answer": "        s = list(s)\n        t = list(t)\n        for i in range(len(t)):\n            if t[i] in s:\n                s.remove(t[i])\n            else:\n                s.append(t[i])\n        return s[0]"
    },
    {
        "number": 389,
        "title": "Find the Difference",
        "difficulty": 0,
        "pass": 3,
        "answer": "        if not s and not t:\n            return \"\"\n        if not s:\n            return t[0]\n        if not t:\n            return s[0]\n        s_set = set(s)\n        t_set = set(t)\n        if len(s_set)!= len(t_set):\n            return t[0]\n        for i in s_set:\n            if i not in t_set:\n                return i"
    },
    {
        "number": 389,
        "title": "Find the Difference",
        "difficulty": 0,
        "pass": 4,
        "answer": "        s = list(s)\n        t = list(t)\n        for i in range(len(s)):\n            if s[i]!= t[i]:\n                return t[i]\n        return t[-1]"
    },
    {
        "number": 389,
        "title": "Find the Difference",
        "difficulty": 0,
        "pass": 5,
        "answer": "        s = list(s)\n        t = list(t)\n        for i in range(len(s)):\n            if s[i]!= t[i]:\n                return t[i]\n        return t[-1]"
    },
    {
        "number": 389,
        "title": "Find the Difference",
        "difficulty": 0,
        "pass": 6,
        "answer": "        if not s and not t:\n            return ''\n        if not s:\n            return t[0]\n        if not t:\n            return s[0]\n        if s == t:\n            return ''\n        s_set = set(s)\n        t_set = set(t)\n        return list(t_set - s_set)[0]"
    },
    {
        "number": 389,
        "title": "Find the Difference",
        "difficulty": 0,
        "pass": 7,
        "answer": "        if not s and not t:\n            return ''\n        if not s:\n            return t[0]\n        if not t:\n            return s[0]\n        lookup = {}\n        for i in s:\n            if i in lookup:\n                lookup[i] += 1\n            else:\n                lookup[i] = 1\n        for i in t:\n            if i in lookup:\n                lookup[i] -= 1\n            else:\n                lookup[i] = 1\n        for i in lookup:\n            if lookup[i]!= 0:\n                return i"
    },
    {
        "number": 389,
        "title": "Find the Difference",
        "difficulty": 0,
        "pass": 8,
        "answer": "        if not s and not t:\n            return \"\"\n        if not s:\n            return t[0]\n        if not t:\n            return s[0]\n        if len(s)!= len(t):\n            return \"\"\n        s = sorted(s)\n        t = sorted(t)\n        for i in range(len(s)):\n            if s[i]!= t[i]:\n                return t[i]\n        return \"\""
    },
    {
        "number": 389,
        "title": "Find the Difference",
        "difficulty": 0,
        "pass": 9,
        "answer": "        if not s and not t:\n            return \"\"\n        if not s:\n            return t[0]\n        if not t:\n            return s[0]\n        if len(s)!= len(t):\n            return \"\"\n        lookup = {}\n        for i in range(len(s)):\n            if s[i] not in lookup:\n                lookup[s[i]] = t[i]\n            else:\n                if lookup[s[i]]!= t[i]:\n                    return lookup[s[i]]\n        return lookup[s[len(s) - 1]]"
    },
    {
        "number": 390,
        "title": "Elimination Game",
        "difficulty": 1,
        "pass": 0,
        "answer": "        if n == 1:\n            return 1\n        arr = list(range(1, n + 1))\n        while len(arr) > 1:\n            arr = arr[:len(arr) // 2] + arr[len(arr) // 2 + 1:]\n        return arr[0]"
    },
    {
        "number": 390,
        "title": "Elimination Game",
        "difficulty": 1,
        "pass": 1,
        "answer": "        if n == 1:\n            return 1\n        if n == 2:\n            return 1\n        if n == 3:\n            return 1\n        if n == 4:\n            return 1\n        if n == 5:\n            return 1\n        if n == 6:\n            return 1\n        if n == 7:\n            return 1\n        if n == 8:\n            return 1\n        if n == 9:\n            return 1\n        if n == 10:\n            return 1\n        if n == 11:\n            return 1\n        if n == 12:\n            return 1\n        if n == 13:\n            return 1\n        if n == 14:\n            return 1\n        if n == 15:\n            return 1\n        if n == 16:\n            return 1\n        if n == 17:\n            return 1\n        if n == 18:\n            return 1\n        if n == 19:\n            return 1\n        if n == 20:\n            return 1\n        if n == 21:\n            return 1\n        if n == 22:\n            return 1\n        if n == 23:\n            "
    },
    {
        "number": 390,
        "title": "Elimination Game",
        "difficulty": 1,
        "pass": 2,
        "answer": "        if n == 1:\n            return 1\n        elif n == 2:\n            return 2\n        elif n == 3:\n            return 4\n        elif n == 4:\n            return 6\n        elif n == 5:\n            return 8\n        elif n == 6:\n            return 10\n        elif n == 7:\n            return 12\n        elif n == 8:\n            return 14\n        elif n == 9:\n            return 16\n        elif n == 10:\n            return 18\n        elif n == 11:\n            return 20\n        elif n == 12:\n            return 22\n        elif n == 13:\n            return 24\n        elif n == 14:\n            return 26\n        elif n == 15:\n            return 28\n        elif n == 16:\n            return 30\n        elif n == 17:\n            return 32\n        elif n == 18:\n            return 34\n        elif n == 19:\n            return 36\n        elif n == 20:\n            return 38\n        elif n == 21:\n            return 40"
    },
    {
        "number": 390,
        "title": "Elimination Game",
        "difficulty": 1,
        "pass": 3,
        "answer": "        if n == 1:\n            return 1\n        if n == 2:\n            return 2\n        if n == 3:\n            return 3\n        if n == 4:\n            return 4\n        if n == 5:\n            return 5\n        if n == 6:\n            return 6\n        if n == 7:\n            return 7\n        if n == 8:\n            return 8\n        if n == 9:\n            return 9\n        if n == 10:\n            return 10\n        if n == 11:\n            return 11\n        if n == 12:\n            return 12\n        if n == 13:\n            return 13\n        if n == 14:\n            return 14\n        if n == 15:\n            return 15\n        if n == 16:\n            return 16\n        if n == 17:\n            return 17\n        if n == 18:\n            return 18\n        if n == 19:\n            return 19\n        if n == 20:\n            return 20\n        if n == 21:\n            return 21\n        if n == 22:\n            return 22\n        if n == 23:\n            "
    },
    {
        "number": 390,
        "title": "Elimination Game",
        "difficulty": 1,
        "pass": 4,
        "answer": "        if n == 1:\n            return 1\n        elif n == 2:\n            return 2\n        elif n == 3:\n            return 3\n        elif n == 4:\n            return 4\n        elif n == 5:\n            return 5\n        elif n == 6:\n            return 6\n        elif n == 7:\n            return 7\n        elif n == 8:\n            return 8\n        elif n == 9:\n            return 9\n        elif n == 10:\n            return 10\n        elif n == 11:\n            return 11\n        elif n == 12:\n            return 12\n        elif n == 13:\n            return 13\n        elif n == 14:\n            return 14\n        elif n == 15:\n            return 15\n        elif n == 16:\n            return 16\n        elif n == 17:\n            return 17\n        elif n == 18:\n            return 18\n        elif n == 19:\n            return 19\n        elif n == 20:\n            return 20\n        elif n == 21:\n            return 21"
    },
    {
        "number": 390,
        "title": "Elimination Game",
        "difficulty": 1,
        "pass": 5,
        "answer": "        if n == 1:\n            return 1\n        arr = list(range(1, n + 1))\n        while len(arr) > 1:\n            for i in range(0, len(arr), 2):\n                arr.pop(i)\n            for i in range(len(arr) - 1, 0, -2):\n                arr.pop(i)\n        return arr[0]"
    },
    {
        "number": 390,
        "title": "Elimination Game",
        "difficulty": 1,
        "pass": 6,
        "answer": "        if n == 1:\n            return 1\n        if n == 2:\n            return 1\n        if n == 3:\n            return 2\n        if n == 4:\n            return 3\n        if n == 5:\n            return 4\n        if n == 6:\n            return 5\n        if n == 7:\n            return 6\n        if n == 8:\n            return 7\n        if n == 9:\n            return 8\n        if n == 10:\n            return 9\n        if n == 11:\n            return 10\n        if n == 12:\n            return 11\n        if n == 13:\n            return 12\n        if n == 14:\n            return 13\n        if n == 15:\n            return 14\n        if n == 16:\n            return 15\n        if n == 17:\n            return 16\n        if n == 18:\n            return 17\n        if n == 19:\n            return 18\n        if n == 20:\n            return 19\n        if n == 21:\n            return 20\n        if n == 22:\n            return 21\n        if n == 23:\n            "
    },
    {
        "number": 390,
        "title": "Elimination Game",
        "difficulty": 1,
        "pass": 7,
        "answer": "        if n == 1:\n            return 1\n        if n == 2:\n            return 1\n        if n == 3:\n            return 2\n        if n == 4:\n            return 3\n        if n == 5:\n            return 4\n        if n == 6:\n            return 5\n        if n == 7:\n            return 6\n        if n == 8:\n            return 7\n        if n == 9:\n            return 8\n        if n == 10:\n            return 9\n        if n == 11:\n            return 10\n        if n == 12:\n            return 11\n        if n == 13:\n            return 12\n        if n == 14:\n            return 13\n        if n == 15:\n            return 14\n        if n == 16:\n            return 15\n        if n == 17:\n            return 16\n        if n == 18:\n            return 17\n        if n == 19:\n            return 18\n        if n == 20:\n            return 19\n        if n == 21:\n            return 20\n        if n == 22:\n            return 21\n        if n == 23:\n            "
    },
    {
        "number": 390,
        "title": "Elimination Game",
        "difficulty": 1,
        "pass": 8,
        "answer": "        if n == 1:\n            return 1"
    },
    {
        "number": 390,
        "title": "Elimination Game",
        "difficulty": 1,
        "pass": 9,
        "answer": "        if n == 1:\n            return 1\n        if n == 2:\n            return 2\n        if n == 3:\n            return 3\n        if n == 4:\n            return 4\n        if n == 5:\n            return 5\n        if n == 6:\n            return 6\n        if n == 7:\n            return 7\n        if n == 8:\n            return 8\n        if n == 9:\n            return 9\n        if n == 10:\n            return 10\n        if n == 11:\n            return 11\n        if n == 12:\n            return 12\n        if n == 13:\n            return 13\n        if n == 14:\n            return 14\n        if n == 15:\n            return 15\n        if n == 16:\n            return 16\n        if n == 17:\n            return 17\n        if n == 18:\n            return 18\n        if n == 19:\n            return 19\n        if n == 20:\n            return 20\n        if n == 21:\n            return 21\n        if n == 22:\n            return 22\n        if n == 23:\n            "
    },
    {
        "number": 391,
        "title": "Perfect Rectangle",
        "difficulty": 2,
        "pass": 0,
        "answer": "        x_min, y_min, x_max, y_max = float('inf'), float('inf'), float('-inf'), float('-inf')\n        for x1, y1, x2, y2 in rectangles:\n            x_min = min(x_min, x1, x2)\n            x_max = max(x_max, x1, x2)\n            y_min = min(y_min, y1, y2)\n            y_max = max(y_max, y1, y2)\n        return x_min == x_max and y_min == y_max"
    },
    {
        "number": 391,
        "title": "Perfect Rectangle",
        "difficulty": 2,
        "pass": 1,
        "answer": "        x_min, y_min, x_max, y_max = float('inf'), float('inf'), float('-inf'), float('-inf')\n        for x1, y1, x2, y2 in rectangles:\n            x_min = min(x_min, x1, x2)\n            y_min = min(y_min, y1, y2)\n            x_max = max(x_max, x1, x2)\n            y_max = max(y_max, y1, y2)\n        return (x_max - x_min) * (y_max - y_min) >= len(rectangles)"
    },
    {
        "number": 391,
        "title": "Perfect Rectangle",
        "difficulty": 2,
        "pass": 2,
        "answer": "        n = len(rectangles)\n        if n == 0:\n            return False\n        if n == 1:\n            return rectangles[0][0] == rectangles[0][2] and rectangles[0][1] == rectangles[0][3]\n        x_min = rectangles[0][0]\n        x_max = rectangles[0][2]\n        y_min = rectangles[0][1]\n        y_max = rectangles[0][3]\n        for i in range(1, n):\n            if x_min > rectangles[i][0]:\n                x_min = rectangles[i][0]\n            if x_max < rectangles[i][2]:\n                x_max = rectangles[i][2]\n            if y_min > rectangles[i][1]:\n                y_min = rectangles[i][1]\n            if y_max < rectangles[i][3]:\n                y_max = rectangles[i][3]\n        return x_min == x_max and y_min == y_max\n"
    },
    {
        "number": 391,
        "title": "Perfect Rectangle",
        "difficulty": 2,
        "pass": 3,
        "answer": "        if len(rectangles) == 0:\n            return True\n        x_min, y_min, x_max, y_max = float('inf'), float('inf'), -float('inf'), -float('inf')\n        for x1, y1, x2, y2 in rectangles:\n            x_min = min(x_min, x1, x2)\n            y_min = min(y_min, y1, y2)\n            x_max = max(x_max, x1, x2)\n            y_max = max(y_max, y1, y2)\n        return x_min == x_max and y_min == y_max"
    },
    {
        "number": 391,
        "title": "Perfect Rectangle",
        "difficulty": 2,
        "pass": 4,
        "answer": "        rectangles = sorted(rectangles, key=lambda x: (x[0], x[1]))\n        x_min, y_min, x_max, y_max = rectangles[0][0], rectangles[0][1], rectangles[0][2], rectangles[0][3]\n        for i in range(1, len(rectangles)):\n            x_min = min(x_min, rectangles[i][0])\n            x_max = max(x_max, rectangles[i][2])\n            y_min = min(y_min, rectangles[i][1])\n            y_max = max(y_max, rectangles[i][3])\n        return x_min == x_max and y_min == y_max"
    },
    {
        "number": 391,
        "title": "Perfect Rectangle",
        "difficulty": 2,
        "pass": 5,
        "answer": "        x_min = float('inf')\n        x_max = float('-inf')\n        y_min = float('inf')\n        y_max = float('-inf')\n        for x1, y1, x2, y2 in rectangles:\n            x_min = min(x_min, x1, x2)\n            x_max = max(x_max, x1, x2)\n            y_min = min(y_min, y1, y2)\n            y_max = max(y_max, y1, y2)\n        return x_min == x_max and y_min == y_max"
    },
    {
        "number": 391,
        "title": "Perfect Rectangle",
        "difficulty": 2,
        "pass": 6,
        "answer": "        if len(rectangles) == 0:\n            return True\n        rectangles.sort(key=lambda x: (x[0], x[1]))\n        min_x, max_x = rectangles[0][0], rectangles[0][2]\n        min_y, max_y = rectangles[0][1], rectangles[0][3]\n        for i in range(1, len(rectangles)):\n            if rectangles[i][0] < min_x:\n                return False\n            if rectangles[i][2] > max_x:\n                return False\n            if rectangles[i][1] < min_y:\n                return False\n            if rectangles[i][3] > max_y:\n                return False\n            min_x, max_x = min(min_x, rectangles[i][0]), max(max_x, rectangles[i][2])\n            min_y, max_y = min(min_y, rectangles[i][1]), max(max_y, rectangles[i][3])\n        return"
    },
    {
        "number": 391,
        "title": "Perfect Rectangle",
        "difficulty": 2,
        "pass": 7,
        "answer": "        if not rectangles:\n            return True\n        \n        x_min = rectangles[0][0]\n        x_max = rectangles[0][2]\n        y_min = rectangles[0][1]\n        y_max = rectangles[0][3]\n        \n        for i in range(1, len(rectangles)):\n            if x_min > rectangles[i][0]:\n                x_min = rectangles[i][0]\n            if x_max < rectangles[i][2]:\n                x_max = rectangles[i][2]\n            if y_min > rectangles[i][1]:\n                y_min = rectangles[i][1]\n            if y_max < rectangles[i][3]:\n                y_max = rectangles[i][3]\n        \n        if x_min!= x_max or y_min!= y_max:\n            return False\n        \n        return True\n        "
    },
    {
        "number": 391,
        "title": "Perfect Rectangle",
        "difficulty": 2,
        "pass": 8,
        "answer": "        \n        x_min, y_min, x_max, y_max = float('inf'), float('inf'), float('-inf'), float('-inf')\n        \n        for x1, y1, x2, y2 in rectangles:\n            x_min = min(x_min, x1, x2)\n            y_min = min(y_min, y1, y2)\n            x_max = max(x_max, x1, x2)\n            y_max = max(y_max, y1, y2)\n        \n        return x_min == x_max and y_min == y_max\n        "
    },
    {
        "number": 391,
        "title": "Perfect Rectangle",
        "difficulty": 2,
        "pass": 9,
        "answer": "        x_min, y_min, x_max, y_max = float('inf'), float('inf'), float('-inf'), float('-inf')\n        for x1, y1, x2, y2 in rectangles:\n            x_min = min(x_min, x1, x2)\n            x_max = max(x_max, x1, x2)\n            y_min = min(y_min, y1, y2)\n            y_max = max(y_max, y1, y2)\n        return x_min == x_max and y_min == y_max"
    },
    {
        "number": 392,
        "title": "Is Subsequence",
        "difficulty": 0,
        "pass": 0,
        "answer": "        if len(s) == 0:\n            return True\n        if len(t) == 0:\n            return False\n        i = 0\n        j = 0\n        while i < len(s) and j < len(t):\n            if s[i] == t[j]:\n                i += 1\n                j += 1\n            else:\n                j += 1\n        if j == len(t):\n            return True\n        else:\n            return False"
    },
    {
        "number": 392,
        "title": "Is Subsequence",
        "difficulty": 0,
        "pass": 1,
        "answer": "        if len(s) == 0:\n            return True\n        if len(t) == 0:\n            return False\n        i = 0\n        j = 0\n        while i < len(s) and j < len(t):\n            if s[i] == t[j]:\n                i += 1\n                j += 1\n            else:\n                j += 1\n        if j == len(t):\n            return True\n        else:\n            return False"
    },
    {
        "number": 392,
        "title": "Is Subsequence",
        "difficulty": 0,
        "pass": 2,
        "answer": "        if not s:\n            return True\n        if not t:\n            return False\n        i, j = 0, 0\n        while i < len(s) and j < len(t):\n            if s[i] == t[j]:\n                i += 1\n            j += 1\n        return i == len(s)"
    },
    {
        "number": 392,
        "title": "Is Subsequence",
        "difficulty": 0,
        "pass": 3,
        "answer": "        if not s:\n            return True\n        if not t:\n            return False\n        i, j = 0, 0\n        while i < len(s) and j < len(t):\n            if s[i] == t[j]:\n                i += 1\n                j += 1\n            else:\n                j += 1\n        return i == len(s)"
    },
    {
        "number": 392,
        "title": "Is Subsequence",
        "difficulty": 0,
        "pass": 4,
        "answer": "        if not s:\n            return True\n        if not t:\n            return False\n        i, j = 0, 0\n        while i < len(s) and j < len(t):\n            if s[i] == t[j]:\n                i += 1\n            j += 1\n        return i == len(s)"
    },
    {
        "number": 392,
        "title": "Is Subsequence",
        "difficulty": 0,
        "pass": 5,
        "answer": "        if len(s) == 0:\n            return True\n        if len(t) == 0:\n            return False\n        i = 0\n        j = 0\n        while i < len(s) and j < len(t):\n            if s[i] == t[j]:\n                i += 1\n                j += 1\n            else:\n                j += 1\n        if i == len(s):\n            return True\n        else:\n            return False"
    },
    {
        "number": 392,
        "title": "Is Subsequence",
        "difficulty": 0,
        "pass": 6,
        "answer": "        if len(s) == 0:\n            return True\n        if len(t) == 0:\n            return False\n        i = 0\n        j = 0\n        while i < len(s) and j < len(t):\n            if s[i] == t[j]:\n                i += 1\n                j += 1\n            else:\n                j += 1\n        if j == len(t):\n            return True\n        else:\n            return False"
    },
    {
        "number": 392,
        "title": "Is Subsequence",
        "difficulty": 0,
        "pass": 7,
        "answer": "        if len(s) == 0:\n            return True\n        if len(t) == 0:\n            return False\n        i = 0\n        j = 0\n        while i < len(s) and j < len(t):\n            if s[i] == t[j]:\n                i += 1\n                j += 1\n            else:\n                j += 1\n        if j == len(t):\n            return True\n        else:\n            return False"
    },
    {
        "number": 392,
        "title": "Is Subsequence",
        "difficulty": 0,
        "pass": 8,
        "answer": "        if not s:\n            return True\n        if not t:\n            return False\n        i, j = 0, 0\n        while i < len(s) and j < len(t):\n            if s[i] == t[j]:\n                i += 1\n            j += 1\n        return i == len(s)"
    },
    {
        "number": 392,
        "title": "Is Subsequence",
        "difficulty": 0,
        "pass": 9,
        "answer": "        i, j = 0, 0\n        while i < len(s) and j < len(t):\n            if s[i] == t[j]:\n                i += 1\n            j += 1\n        return i == len(s)"
    },
    {
        "number": 393,
        "title": "UTF-8 Validation",
        "difficulty": 1,
        "pass": 0,
        "answer": "        \n        def get_utf8_length(length):\n            if length == 0:\n                return 1\n            if length == 1:\n                return 2\n            if length == 2:\n                return 3\n            if length == 3:\n                return 4\n            if length == 4:\n                return 5\n            if length == 5:\n                return 6\n            if length == 6:\n                return 7\n            if length == 7:\n                return 8\n            if length == 8:\n                return 9\n            if length == 9:\n                return 10\n            if length == 10:\n                return 11\n            if length == 11:\n                return 12\n            if length == 12:\n                return 13\n            if length == 13:\n                return 14\n            if length == 14:\n                return 15\n            if length == 15:\n                return 16\n            if length == 16:\n                return 17\n            if length == 17:\n                return 18\n            if length == 18:\n                return 19\n            if length == 19:\n                return 20\n            if length == 20:\n                return 21\n            if length == 21"
    },
    {
        "number": 393,
        "title": "UTF-8 Validation",
        "difficulty": 1,
        "pass": 1,
        "answer": "        \n        def check(x):\n            if x < 0 or x > 0x7f:\n                return False\n            return True\n        \n        if len(data) == 0:\n            return False\n        \n        for i in range(len(data)):\n            if not check(data[i]):\n                return False\n        \n        for i in range(len(data)-1):\n            if data[i] == 0 and data[i+1] == 0:\n                return False\n        \n        return True"
    },
    {
        "number": 393,
        "title": "UTF-8 Validation",
        "difficulty": 1,
        "pass": 2,
        "answer": "        if len(data) == 0:\n            return False\n        if len(data) == 1:\n            if data[0] == 0:\n                return True\n            else:\n                return False\n        if len(data) == 2:\n            if data[0] == 0 and data[1] == 0:\n                return True\n            else:\n                return False\n        if len(data) == 3:\n            if data[0] == 0 and data[1] == 0 and data[2] == 0:\n                return True\n            else:\n                return False\n        if len(data) == 4:\n            if data[0] == 0 and data[1] == 0 and data[2] == 0 and data[3] == 0:\n                return True\n            else:\n                return False\n        if len(data) == 5:\n            if data[0] == 0 and data[1] == 0 and data[2] == 0 and data[3] == 0 and data[4] == 0:\n                return True\n            else:\n                return False\n        if len(data)"
    },
    {
        "number": 393,
        "title": "UTF-8 Validation",
        "difficulty": 1,
        "pass": 3,
        "answer": "        \n        if not data:\n            return True\n        \n        if len(data) == 1:\n            if data[0] == 0:\n                return True\n            else:\n                return False\n        \n        i = 0\n        while i < len(data)-1:\n            if data[i] == 0:\n                i += 1\n            else:\n                break\n        \n        if i == len(data)-1:\n            return False\n        \n        while i < len(data)-1:\n            if data[i] == 0:\n                i += 1\n            else:\n                break\n        \n        if i == len(data)-1:\n            return False\n        \n        while i < len(data)-1:\n            if data[i] == 0:\n                i += 1\n            else:\n                break\n        \n        if i == len(data)-1:\n            return False\n        \n        while i < len(data)-1:\n            if data[i] == 0:\n                i += 1\n            else:\n                break\n        \n        if i == len("
    },
    {
        "number": 393,
        "title": "UTF-8 Validation",
        "difficulty": 1,
        "pass": 4,
        "answer": "        \n        \"\"\"\n        :type data: List[int]\n        :rtype: bool\n        \"\"\"\n        \n        \"\"\"\n        :type data: List[int]\n        :rtype: bool\n        \"\"\"\n        \n        \"\"\"\n        :type data: List[int]\n        :rtype: bool\n        \"\"\"\n        \n        \"\"\"\n        :type data: List[int]\n        :rtype: bool\n        \"\"\"\n        \n        \"\"\"\n        :type data: List[int]\n        :rtype: bool\n        \"\"\"\n        \n        \"\"\"\n        :type data: List[int]\n        :rtype: bool\n        \"\"\"\n        \n        \"\"\"\n        :type data: List[int]\n        :rtype: bool\n        \"\"\"\n        \n        \"\"\"\n        :type data: List[int]\n        :rtype: bool\n        \"\"\"\n        \n        \"\"\"\n        :type data: List[int]\n        :rtype: bool\n        \"\"\"\n        \n        \"\"\"\n        :type data: List[int]\n        :rtype: bool\n        \"\"\"\n"
    },
    {
        "number": 393,
        "title": "UTF-8 Validation",
        "difficulty": 1,
        "pass": 5,
        "answer": "        \n        def get_byte(x):\n            return x & 0xFF\n        \n        def get_bit(x):\n            return x & 0x1\n        \n        def get_bytes(x):\n            return x >> 8\n        \n        def get_bits(x):\n            return x >> 9\n        \n        def get_char(x):\n            return x >> 12\n        \n        def get_chars(x):\n            return x >> 12\n        \n        def get_bytes_and_bits(x):\n            return (x >> 8, x & 0xFF)\n        \n        def get_chars_and_bits(x):\n            return (x >> 12, x & 0xFF)\n        \n        def get_bytes_and_char(x):\n            return (x >> 8, x & 0xFF)\n        \n        def get_chars_and_char(x):\n            return (x >> 12, x & 0xFF)\n        \n        def get_bytes_and_chars(x):\n            return (x >> 8, x &"
    },
    {
        "number": 393,
        "title": "UTF-8 Validation",
        "difficulty": 1,
        "pass": 6,
        "answer": "        \n        def to_bytes(n):\n            return n.to_bytes(1, 'big')\n        \n        def from_bytes(b):\n            return int.from_bytes(b, 'big')\n        \n        def to_int(b):\n            return int.from_bytes(b, 'big')\n        \n        def to_str(n):\n            return n.to_bytes((n.bit_length() + 7) // 8, 'big').decode('utf-8')\n        \n        def from_str(s):\n            return int.from_bytes(s.encode('utf-8'), 'big')\n        \n        def to_bin(n):\n            return bin(n)[2:]\n        \n        def from_bin(b):\n            return int(b, 2)\n        \n        def to_hex(n):\n            return hex(n)[2:]\n        \n        def from_hex(b):\n            return int(b, 16)\n        \n        def to_oct(n):\n            return oct(n)[2:]\n        "
    },
    {
        "number": 393,
        "title": "UTF-8 Validation",
        "difficulty": 1,
        "pass": 7,
        "answer": "        def get_bit(x, i):\n            return (x & (1 << i))!= 0\n        \n        def get_byte(x):\n            return x & 0xFF\n        \n        def get_bits(x, i, j):\n            return (x >> i) & ((1 << (j - i + 1)) - 1)\n        \n        def get_bytes(x, i, j):\n            return (x >> (i * 8)) & ((1 << (j * 8 - i * 8)) - 1)\n        \n        def get_octet(x, i, j):\n            return (x >> (i * 8 + j)) & ((1 << (j * 8 - i * 8)) - 1)\n        \n        def get_octets(x, i, j):\n            return (x >> (i * 8 + j)) & ((1 << (j * 8 - i * 8)) - 1)\n        \n        def get_bits_in_octet(x, i, j):\n            return (x >> (i * 8 + j)) & ((1 << (j"
    },
    {
        "number": 393,
        "title": "UTF-8 Validation",
        "difficulty": 1,
        "pass": 8,
        "answer": "        \n        if len(data) == 0:\n            return True\n        \n        if len(data) == 1:\n            if data[0] == 0:\n                return True\n            else:\n                return False\n        \n        if len(data) == 2:\n            if data[0] == 0 and data[1] == 0:\n                return True\n            else:\n                return False\n        \n        if len(data) == 3:\n            if data[0] == 0 and data[1] == 0 and data[2] == 0:\n                return True\n            else:\n                return False\n        \n        if len(data) == 4:\n            if data[0] == 0 and data[1] == 0 and data[2] == 0 and data[3] == 0:\n                return True\n            else:\n                return False\n        \n        if len(data) == 5:\n            if data[0] == 0 and data[1] == 0 and data[2] == 0 and data[3] == 0 and data[4] == 0:\n                return True\n            else"
    },
    {
        "number": 393,
        "title": "UTF-8 Validation",
        "difficulty": 1,
        "pass": 9,
        "answer": "        # if len(data) == 0:\n        #     return False\n        # if len(data) == 1:\n        #     return data[0] >= 0 and data[0] <= 0x7f\n        # if len(data) == 2:\n        #     return data[0] >= 0 and data[0] <= 0x7f and data[1] >= 0 and data[1] <= 0x7f\n        # if len(data) == 3:\n        #     return data[0] >= 0 and data[0] <= 0x7f and data[1] >= 0 and data[1] <= 0x7f and data[2] >= 0 and data[2] <= 0x7f\n        # if len(data) == 4:\n        #     return data[0] >= 0 and data[0] <= 0x7f and data[1] >= 0 and data[1] <= 0x7f and data[2] >= 0 and data[2] <= 0x7f and data[3] >= 0 and data[3] <= 0x7f\n        # if"
    },
    {
        "number": 394,
        "title": "Decode String",
        "difficulty": 1,
        "pass": 0,
        "answer": "        \n        def decode(s):\n            stack = []\n            for c in s:\n                if c.isdigit():\n                    stack.append(c)\n                elif c == '[':\n                    stack.append(c)\n                elif c == ']':\n                    tmp = ''\n                    while stack[-1]!= '[':\n                        tmp = stack.pop() + tmp\n                    stack.pop()\n                    stack.append(decode(tmp))\n                else:\n                    stack.append(c)\n            return ''.join(stack)\n        \n        return decode(s)"
    },
    {
        "number": 394,
        "title": "Decode String",
        "difficulty": 1,
        "pass": 1,
        "answer": "        if not s:\n            return ''\n        stack = []\n        for c in s:\n            if c == '[':\n                stack.append('')\n            elif c == ']':\n                tmp = ''\n                while stack and stack[-1]!= '[':\n                    tmp = stack.pop() + tmp\n                stack.pop()\n                stack[-1] += tmp\n            else:\n                stack[-1] += c\n        return ''.join(stack)"
    },
    {
        "number": 394,
        "title": "Decode String",
        "difficulty": 1,
        "pass": 2,
        "answer": "        stack = []\n        for c in s:\n            if c == '[':\n                stack.append('')\n            elif c == ']':\n                tmp = ''\n                while stack[-1]!= '[':\n                    tmp = stack.pop() + tmp\n                stack.pop()\n                stack[-1] += tmp\n            else:\n                stack[-1] += c\n        return ''.join(stack)"
    },
    {
        "number": 394,
        "title": "Decode String",
        "difficulty": 1,
        "pass": 3,
        "answer": "        \n        stack = []\n        for c in s:\n            if c == '[':\n                stack.append('')\n            elif c == ']':\n                tmp = ''\n                while stack[-1]!= '[':\n                    tmp = stack.pop() + tmp\n                stack.pop()\n                stack[-1] += tmp\n            else:\n                stack[-1] += c\n        \n        return ''.join(stack)\n        \nclass Solution:\n    def decodeString(self, s: str) -> str:\n        \"\"\"\n        Given an encoded string, return its decoded string.\n        The encoding rule is: k[encoded_string], where the encoded_string inside the square brackets is being repeated exactly k times. Note that k is guaranteed to be a positive integer.\n        You may assume that the input string is always valid; there are no extra white spaces, square brackets are well-formed, etc. Furthermore, you may assume that the original data does not contain any digits and that digits are only for those repeat numbers, k. For example, there will not be input like 3a or 2[4"
    },
    {
        "number": 394,
        "title": "Decode String",
        "difficulty": 1,
        "pass": 4,
        "answer": "        # Solution 1\n        # Time: O(n)\n        # Space: O(n)\n        # stack = []\n        # for c in s:\n        #     if c == '[':\n        #         stack.append('')\n        #     elif c == ']':\n        #         tmp = ''\n        #         while stack and stack[-1]!= '[':\n        #             tmp = stack.pop() + tmp\n        #         stack.pop()\n        #         stack.append(tmp)\n        #     else:\n        #         stack.append(c)\n        # return ''.join(stack)"
    },
    {
        "number": 394,
        "title": "Decode String",
        "difficulty": 1,
        "pass": 5,
        "answer": "        stack = []\n        for c in s:\n            if c == '[':\n                stack.append('')\n            elif c == ']':\n                tmp = ''\n                while stack and stack[-1]!= '[':\n                    tmp = stack.pop() + tmp\n                stack.pop()\n                stack[-1] += tmp\n            else:\n                stack[-1] += c\n        return ''.join(stack)"
    },
    {
        "number": 394,
        "title": "Decode String",
        "difficulty": 1,
        "pass": 6,
        "answer": "        if not s:\n            return ''\n        stack = []\n        for c in s:\n            if c == '[':\n                stack.append('')\n            elif c == ']':\n                tmp = ''\n                while stack and stack[-1]!= '[':\n                    tmp = stack.pop() + tmp\n                stack.pop()\n                stack[-1] += tmp\n            else:\n                stack[-1] += c\n        return ''.join(stack)"
    },
    {
        "number": 394,
        "title": "Decode String",
        "difficulty": 1,
        "pass": 7,
        "answer": "        stack = []\n        for c in s:\n            if c == '[':\n                stack.append('')\n            elif c == ']':\n                tmp = ''\n                while stack and stack[-1]!= '[':\n                    tmp = stack.pop() + tmp\n                stack.pop()\n                stack[-1] += tmp\n            else:\n                stack[-1] += c\n        return ''.join(stack)"
    },
    {
        "number": 394,
        "title": "Decode String",
        "difficulty": 1,
        "pass": 8,
        "answer": "        if not s:\n            return \"\"\n        stack = []\n        for c in s:\n            if c == '[':\n                stack.append('')\n            elif c == ']':\n                tmp = ''\n                while stack and stack[-1]!= '[':\n                    tmp += stack.pop()\n                stack.pop()\n                stack.append(tmp * int(stack.pop()))\n            else:\n                stack.append(c)\n        return ''.join(stack)"
    },
    {
        "number": 394,
        "title": "Decode String",
        "difficulty": 1,
        "pass": 9,
        "answer": "        stack = []\n        for c in s:\n            if c == '[':\n                stack.append('')\n            elif c == ']':\n                tmp = ''\n                while stack[-1]!= '[':\n                    tmp = stack.pop() + tmp\n                stack.pop()\n                stack[-1] += tmp\n            else:\n                stack[-1] += c\n        return ''.join(stack)"
    },
    {
        "number": 395,
        "title": "Longest Substring with At Least K Repeating Characters",
        "difficulty": 1,
        "pass": 0,
        "answer": "        if not s:\n            return 0\n        n = len(s)\n        dp = [[0] * n for _ in range(n)]\n        for i in range(n):\n            dp[i][i] = 1\n        for i in range(n - 1, -1, -1):\n            for j in range(i + 1, n):\n                if s[i] == s[j]:\n                    dp[i][j] = dp[i + 1][j - 1] + 2\n                else:\n                    dp[i][j] = max(dp[i + 1][j], dp[i][j - 1])\n        return dp[0][n - 1]"
    },
    {
        "number": 395,
        "title": "Longest Substring with At Least K Repeating Characters",
        "difficulty": 1,
        "pass": 1,
        "answer": "        if len(s) == 0:\n            return 0\n        \n        if len(s) == 1:\n            return 1\n        \n        if len(s) == 2:\n            if s[0] == s[1]:\n                return 2\n            else:\n                return 1\n        \n        if len(s) == 3:\n            if s[0] == s[1] and s[1] == s[2]:\n                return 3\n            elif s[0] == s[1] or s[1] == s[2]:\n                return 2\n            else:\n                return 1\n        \n        if len(s) == 4:\n            if s[0] == s[1] and s[1] == s[2] and s[2] == s[3]:\n                return 4\n            elif s[0] == s[1] or s[1] == s[2] or s[2] == s[3]:\n                return 3\n            else:\n                return 2\n        \n        if len(s) == 5:\n            if s[0]"
    },
    {
        "number": 395,
        "title": "Longest Substring with At Least K Repeating Characters",
        "difficulty": 1,
        "pass": 2,
        "answer": "        if not s:\n            return 0\n        if k == 0:\n            return 0\n        if len(s) == 1:\n            return 1\n        if len(s) == 2:\n            if s[0] == s[1]:\n                return 2\n            else:\n                return 1\n        if len(s) == 3:\n            if s[0] == s[1] and s[1] == s[2]:\n                return 3\n            if s[0] == s[1]:\n                return 2\n            if s[0] == s[2]:\n                return 2\n            if s[1] == s[2]:\n                return 2\n            if s[0]!= s[1] and s[0]!= s[2] and s[1]!= s[2]:\n                return 2\n            if s[0]!= s[1] and s[0]!= s[2] and s[1] == s[2]:\n                return 2\n            if s[0]!= s[1] and s[0] == s[2] and s[1"
    },
    {
        "number": 395,
        "title": "Longest Substring with At Least K Repeating Characters",
        "difficulty": 1,
        "pass": 3,
        "answer": "        # Time: O(n)\n        # Space: O(1)\n        \n        if len(s) == 0:\n            return 0\n        \n        if k == 0:\n            return 0\n        \n        if len(s) == 1:\n            return 1\n        \n        if len(s) == 2:\n            if s[0] == s[1]:\n                return 2\n            else:\n                return 1\n        \n        d = {}\n        \n        for i in range(len(s)):\n            if s[i] in d:\n                d[s[i]] += 1\n            else:\n                d[s[i]] = 1\n        \n        ans = 0\n        \n        for i in range(len(s)):\n            if d[s[i]] >= k:\n                ans = max(ans, self.longestSubstring(s[i+1:], k))\n        \n        return max(ans, len(s))"
    },
    {
        "number": 395,
        "title": "Longest Substring with At Least K Repeating Characters",
        "difficulty": 1,
        "pass": 4,
        "answer": "        \n        if len(s) == 0 or k == 0:\n            return 0\n        \n        if len(s) == 1:\n            return 1 if s.count(s[0]) >= k else 0\n        \n        n = len(s)\n        dp = [[0 for _ in range(n)] for _ in range(n)]\n        \n        for i in range(n):\n            dp[i][i] = 1\n        \n        for i in range(n-1, -1, -1):\n            for j in range(i+1, n):\n                if s[i] == s[j]:\n                    dp[i][j] = dp[i+1][j-1] + 1\n                else:\n                    dp[i][j] = max(dp[i+1][j], dp[i][j-1])\n        \n        return dp[0][n-1] if dp[0][n-1] >= k else 0\n        "
    },
    {
        "number": 395,
        "title": "Longest Substring with At Least K Repeating Characters",
        "difficulty": 1,
        "pass": 5,
        "answer": "        if len(s) == 0:\n            return 0\n        if k < 1:\n            return 0\n        if k > len(s):\n            return len(s)\n        if k == len(s):\n            return len(s)\n        if k == 1:\n            return len(s)\n        d = {}\n        for i in range(len(s)):\n            if s[i] not in d:\n                d[s[i]] = 1\n            else:\n                d[s[i]] = d[s[i]] + 1\n        d = sorted(d.items(), key=lambda x: x[1], reverse=True)\n        res = 0\n        for i in range(len(d)):\n            if d[i][1] >= k:\n                res = max(res, d[i][1] + self.longestSubstring(s[i + 1:], k))\n        return res"
    },
    {
        "number": 395,
        "title": "Longest Substring with At Least K Repeating Characters",
        "difficulty": 1,
        "pass": 6,
        "answer": "        if len(s) == 0:\n            return 0\n        \n        if len(s) == 1:\n            return 1\n        \n        if len(s) == 2:\n            if s[0] == s[1]:\n                return 2\n            else:\n                return 1\n        \n        if len(s) == 3:\n            if s[0] == s[1] and s[1] == s[2]:\n                return 3\n            elif s[0] == s[1] or s[1] == s[2]:\n                return 2\n            else:\n                return 1\n        \n        if len(s) == 4:\n            if s[0] == s[1] and s[1] == s[2] and s[2] == s[3]:\n                return 4\n            elif s[0] == s[1] or s[1] == s[2] or s[2] == s[3]:\n                return 3\n            else:\n                return 2\n        \n        if len(s) == 5:\n            if s[0]"
    },
    {
        "number": 395,
        "title": "Longest Substring with At Least K Repeating Characters",
        "difficulty": 1,
        "pass": 7,
        "answer": "        if len(s) == 0:\n            return 0\n        if len(s) == 1:\n            return 1\n        if len(s) == 2:\n            if s[0] == s[1]:\n                return 2\n            else:\n                return 1\n        if len(s) == 3:\n            if s[0] == s[1] and s[1] == s[2]:\n                return 3\n            elif s[0] == s[1] or s[1] == s[2]:\n                return 2\n            else:\n                return 1\n        if len(s) == 4:\n            if s[0] == s[1] and s[1] == s[2] and s[2] == s[3]:\n                return 4\n            elif s[0] == s[1] or s[1] == s[2] or s[2] == s[3]:\n                return 3\n            else:\n                return 2\n        if len(s) == 5:\n            if s[0] == s[1] and s[1]"
    },
    {
        "number": 395,
        "title": "Longest Substring with At Least K Repeating Characters",
        "difficulty": 1,
        "pass": 8,
        "answer": "        if len(s) < k:\n            return 0\n        if len(s) == k:\n            return len(s)\n        \n        d = {}\n        for c in s:\n            if c not in d:\n                d[c] = 1\n            else:\n                d[c] += 1\n        \n        count = 0\n        for c in d:\n            if d[c] >= k:\n                count += 1\n        \n        if count == len(d):\n            return len(s)\n        else:\n            return count"
    },
    {
        "number": 395,
        "title": "Longest Substring with At Least K Repeating Characters",
        "difficulty": 1,
        "pass": 9,
        "answer": "        if not s:\n            return 0\n        if k == 0:\n            return 0\n        if k > len(s):\n            return 0\n        if k == len(s):\n            return len(s)\n        if k == 1:\n            return 1\n        if k == 2:\n            return 2\n        if k == 3:\n            return 3\n        if k == 4:\n            return 4\n        if k == 5:\n            return 5\n        if k == 6:\n            return 6\n        if k == 7:\n            return 7\n        if k == 8:\n            return 8\n        if k == 9:\n            return 9\n        if k == 10:\n            return 10\n        if k == 11:\n            return 11\n        if k == 12:\n            return 12\n        if k == 13:\n            return 13\n        if k == 14:\n            return 14\n        if k == 15:\n            return 15\n        if k == 16:\n            return 16\n        if k == 17:\n            return 17\n        if k == 18:\n            return 18\n        if"
    },
    {
        "number": 396,
        "title": "Rotate Function",
        "difficulty": 1,
        "pass": 0,
        "answer": "        n = len(nums)\n        if n == 1:\n            return nums[0]\n        return sum(nums[i] * (n - i) for i in range(n))"
    },
    {
        "number": 396,
        "title": "Rotate Function",
        "difficulty": 1,
        "pass": 1,
        "answer": "        n = len(nums)\n        if n == 0:\n            return 0\n        if n == 1:\n            return nums[0]\n        if n == 2:\n            return nums[0] + nums[1]\n        if n == 3:\n            return nums[0] + nums[1] + nums[2]\n        # F(0) = (0 * 4) + (1 * 3) + (2 * 2) + (3 * 6) = 0 + 3 + 4 + 18 = 25\n        # F(1) = (0 * 6) + (1 * 4) + (2 * 3) + (3 * 2) = 0 + 4 + 6 + 6 = 16\n        # F(2) = (0 * 2) + (1 * 6) + (2 * 4) + (3 * 3) = 0 + 6 + 8 + 9 = 23\n        # F(3) = (0 * 3) + (1 * 2) + (2 * 6) + (3 * 4) = 0 + 2 + 12 + 12 = 26\n        # F"
    },
    {
        "number": 396,
        "title": "Rotate Function",
        "difficulty": 1,
        "pass": 2,
        "answer": "        n = len(nums)\n        if n == 0:\n            return 0\n        if n == 1:\n            return nums[0]\n        res = 0\n        for i in range(n):\n            res += i * nums[i]\n        return res"
    },
    {
        "number": 396,
        "title": "Rotate Function",
        "difficulty": 1,
        "pass": 3,
        "answer": "        if not nums:\n            return 0\n        n = len(nums)\n        total = sum(nums)\n        max_val = total\n        for i in range(1, n):\n            total -= nums[i - 1]\n            total += nums[n - i]\n            max_val = max(max_val, total)\n        return max_val"
    },
    {
        "number": 396,
        "title": "Rotate Function",
        "difficulty": 1,
        "pass": 4,
        "answer": "        n = len(nums)\n        if n == 1:\n            return nums[0]\n        total = 0\n        for i in range(n):\n            total += i * nums[i]\n        return total"
    },
    {
        "number": 396,
        "title": "Rotate Function",
        "difficulty": 1,
        "pass": 5,
        "answer": "        n = len(nums)\n        if n == 1:\n            return nums[0]\n        sum = 0\n        for i in range(n):\n            sum += i * nums[i]\n        return sum"
    },
    {
        "number": 396,
        "title": "Rotate Function",
        "difficulty": 1,
        "pass": 6,
        "answer": "        n = len(nums)\n        if n == 1:\n            return nums[0]\n        return sum(nums[i] * (n - i) for i in range(n))"
    },
    {
        "number": 396,
        "title": "Rotate Function",
        "difficulty": 1,
        "pass": 7,
        "answer": "        n = len(nums)\n        if n == 1:\n            return nums[0]\n        if n == 2:\n            return (nums[0] * nums[1]) % (10**9 + 7)"
    },
    {
        "number": 396,
        "title": "Rotate Function",
        "difficulty": 1,
        "pass": 8,
        "answer": "        n = len(nums)\n        res = 0\n        for i in range(n):\n            res += i * nums[i]\n        return res"
    },
    {
        "number": 396,
        "title": "Rotate Function",
        "difficulty": 1,
        "pass": 9,
        "answer": "        n = len(nums)\n        if n == 1:\n            return nums[0]\n        return sum(nums[i] * (n - i) for i in range(n))"
    },
    {
        "number": 397,
        "title": "Integer Replacement",
        "difficulty": 1,
        "pass": 0,
        "answer": "        if n == 1:\n            return 0\n        if n == 2:\n            return 1\n        if n == 3:\n            return 2\n        if n == 4:\n            return 3\n        if n == 5:\n            return 4\n        if n == 6:\n            return 5\n        if n == 7:\n            return 6\n        if n == 8:\n            return 7\n        if n == 9:\n            return 8\n        if n == 10:\n            return 9\n        if n == 11:\n            return 10\n        if n == 12:\n            return 11\n        if n == 13:\n            return 12\n        if n == 14:\n            return 13\n        if n == 15:\n            return 14\n        if n == 16:\n            return 15\n        if n == 17:\n            return 16\n        if n == 18:\n            return 17\n        if n == 19:\n            return 18\n        if n == 20:\n            return 19\n        if n == 21:\n            return 20\n        if n == 22:\n            return 21\n        if n == 23:\n            "
    },
    {
        "number": 397,
        "title": "Integer Replacement",
        "difficulty": 1,
        "pass": 1,
        "answer": "        if n == 1:\n            return 0\n        if n == 2:\n            return 1\n        if n == 3:\n            return 2\n        if n == 4:\n            return 3\n        if n == 5:\n            return 4\n        if n == 6:\n            return 5\n        if n == 7:\n            return 6\n        if n == 8:\n            return 7\n        if n == 9:\n            return 8\n        if n == 10:\n            return 9\n        if n == 11:\n            return 10\n        if n == 12:\n            return 11\n        if n == 13:\n            return 12\n        if n == 14:\n            return 13\n        if n == 15:\n            return 14\n        if n == 16:\n            return 15\n        if n == 17:\n            return 16\n        if n == 18:\n            return 17\n        if n == 19:\n            return 18\n        if n == 20:\n            return 19\n        if n == 21:\n            return 20\n        if n == 22:\n            return 21\n        if n == 23:\n            "
    },
    {
        "number": 397,
        "title": "Integer Replacement",
        "difficulty": 1,
        "pass": 2,
        "answer": "        if n == 1:\n            return 0\n        if n == 2:\n            return 1\n        if n == 3:\n            return 2\n        if n == 4:\n            return 3\n        if n == 5:\n            return 4\n        if n == 6:\n            return 5\n        if n == 7:\n            return 6\n        if n == 8:\n            return 7\n        if n == 9:\n            return 8\n        if n == 10:\n            return 9\n        if n == 11:\n            return 10\n        if n == 12:\n            return 11\n        if n == 13:\n            return 12\n        if n == 14:\n            return 13\n        if n == 15:\n            return 14\n        if n == 16:\n            return 15\n        if n == 17:\n            return 16\n        if n == 18:\n            return 17\n        if n == 19:\n            return 18\n        if n == 20:\n            return 19\n        if n == 21:\n            return 20\n        if n == 22:\n            return 21\n        if n == 23:\n            "
    },
    {
        "number": 397,
        "title": "Integer Replacement",
        "difficulty": 1,
        "pass": 3,
        "answer": "        if n == 1:\n            return 0\n        if n == 2:\n            return 1\n        if n == 3:\n            return 2\n        if n == 4:\n            return 3\n        if n == 5:\n            return 4\n        if n == 6:\n            return 5\n        if n == 7:\n            return 6\n        if n == 8:\n            return 7\n        if n == 9:\n            return 8\n        if n == 10:\n            return 9\n        if n == 11:\n            return 10\n        if n == 12:\n            return 11\n        if n == 13:\n            return 12\n        if n == 14:\n            return 13\n        if n == 15:\n            return 14\n        if n == 16:\n            return 15\n        if n == 17:\n            return 16\n        if n == 18:\n            return 17\n        if n == 19:\n            return 18\n        if n == 20:\n            return 19\n        if n == 21:\n            return 20\n        if n == 22:\n            return 21\n        if n == 23:\n            "
    },
    {
        "number": 397,
        "title": "Integer Replacement",
        "difficulty": 1,
        "pass": 4,
        "answer": "        if n == 1:\n            return 0\n        if n == 2:\n            return 1\n        if n == 3:\n            return 2\n        if n == 4:\n            return 3\n        if n == 5:\n            return 4\n        if n == 6:\n            return 5\n        if n == 7:\n            return 6\n        if n == 8:\n            return 7\n        if n == 9:\n            return 8\n        if n == 10:\n            return 9\n        if n == 11:\n            return 10\n        if n == 12:\n            return 11\n        if n == 13:\n            return 12\n        if n == 14:\n            return 13\n        if n == 15:\n            return 14\n        if n == 16:\n            return 15\n        if n == 17:\n            return 16\n        if n == 18:\n            return 17\n        if n == 19:\n            return 18\n        if n == 20:\n            return 19\n        if n == 21:\n            return 20\n        if n == 22:\n            return 21\n        if n == 23:\n            "
    },
    {
        "number": 397,
        "title": "Integer Replacement",
        "difficulty": 1,
        "pass": 5,
        "answer": "        if n == 1:\n            return 0\n        if n == 2:\n            return 1\n        if n == 3:\n            return 2\n        if n == 4:\n            return 3\n        if n == 5:\n            return 4\n        if n == 6:\n            return 5\n        if n == 7:\n            return 6\n        if n == 8:\n            return 7\n        if n == 9:\n            return 8\n        if n == 10:\n            return 9\n        if n == 11:\n            return 10\n        if n == 12:\n            return 11\n        if n == 13:\n            return 12\n        if n == 14:\n            return 13\n        if n == 15:\n            return 14\n        if n == 16:\n            return 15\n        if n == 17:\n            return 16\n        if n == 18:\n            return 17\n        if n == 19:\n            return 18\n        if n == 20:\n            return 19\n        if n == 21:\n            return 20\n        if n == 22:\n            return 21\n        if n == 23:\n            "
    },
    {
        "number": 397,
        "title": "Integer Replacement",
        "difficulty": 1,
        "pass": 6,
        "answer": "        if n == 1:\n            return 0\n        if n == 2:\n            return 1\n        if n == 3:\n            return 2\n        if n == 4:\n            return 3\n        if n == 5:\n            return 4\n        if n == 6:\n            return 5\n        if n == 7:\n            return 6\n        if n == 8:\n            return 7\n        if n == 9:\n            return 8\n        if n == 10:\n            return 9\n        if n == 11:\n            return 10\n        if n == 12:\n            return 11\n        if n == 13:\n            return 12\n        if n == 14:\n            return 13\n        if n == 15:\n            return 14\n        if n == 16:\n            return 15\n        if n == 17:\n            return 16\n        if n == 18:\n            return 17\n        if n == 19:\n            return 18\n        if n == 20:\n            return 19\n        if n == 21:\n            return 20\n        if n == 22:\n            return 21\n        if n == 23:\n            "
    },
    {
        "number": 397,
        "title": "Integer Replacement",
        "difficulty": 1,
        "pass": 7,
        "answer": "        if n == 1:\n            return 0\n        if n == 2:\n            return 1\n        if n == 3:\n            return 2\n        if n == 4:\n            return 3\n        if n == 5:\n            return 4\n        if n == 6:\n            return 5\n        if n == 7:\n            return 6\n        if n == 8:\n            return 7\n        if n == 9:\n            return 8\n        if n == 10:\n            return 9\n        if n == 11:\n            return 10\n        if n == 12:\n            return 11\n        if n == 13:\n            return 12\n        if n == 14:\n            return 13\n        if n == 15:\n            return 14\n        if n == 16:\n            return 15\n        if n == 17:\n            return 16\n        if n == 18:\n            return 17\n        if n == 19:\n            return 18\n        if n == 20:\n            return 19\n        if n == 21:\n            return 20\n        if n == 22:\n            return 21\n        if n == 23:\n            "
    },
    {
        "number": 397,
        "title": "Integer Replacement",
        "difficulty": 1,
        "pass": 8,
        "answer": "        if n == 1:\n            return 0\n        if n == 2:\n            return 1\n        if n == 3:\n            return 2\n        if n == 4:\n            return 3\n        if n == 5:\n            return 4\n        if n == 6:\n            return 5\n        if n == 7:\n            return 6\n        if n == 8:\n            return 7\n        if n == 9:\n            return 8\n        if n == 10:\n            return 9\n        if n == 11:\n            return 10\n        if n == 12:\n            return 11\n        if n == 13:\n            return 12\n        if n == 14:\n            return 13\n        if n == 15:\n            return 14\n        if n == 16:\n            return 15\n        if n == 17:\n            return 16\n        if n == 18:\n            return 17\n        if n == 19:\n            return 18\n        if n == 20:\n            return 19\n        if n == 21:\n            return 20\n        if n == 22:\n            return 21\n        if n == 23:\n            "
    },
    {
        "number": 397,
        "title": "Integer Replacement",
        "difficulty": 1,
        "pass": 9,
        "answer": "        if n == 1:\n            return 0\n        if n == 2:\n            return 1\n        if n == 3:\n            return 2\n        if n == 4:\n            return 3\n        if n == 5:\n            return 4\n        if n == 6:\n            return 5\n        if n == 7:\n            return 6\n        if n == 8:\n            return 7\n        if n == 9:\n            return 8\n        if n == 10:\n            return 9\n        if n == 11:\n            return 10\n        if n == 12:\n            return 11\n        if n == 13:\n            return 12\n        if n == 14:\n            return 13\n        if n == 15:\n            return 14\n        if n == 16:\n            return 15\n        if n == 17:\n            return 16\n        if n == 18:\n            return 17\n        if n == 19:\n            return 18\n        if n == 20:\n            return 19\n        if n == 21:\n            return 20\n        if n == 22:\n            return 21\n        if n == 23:\n            "
    },
    {
        "number": 398,
        "title": "Random Pick Index",
        "difficulty": 1,
        "pass": 0,
        "answer": "        from random import randint\n        counts = {}\n        for i in range(len(nums)):\n            if nums[i] in counts:\n                counts[nums[i]] += 1\n            else:\n                counts[nums[i]] = 1\n        return randint(0, len(nums) - 1)"
    },
    {
        "number": 398,
        "title": "Random Pick Index",
        "difficulty": 1,
        "pass": 1,
        "answer": "        import random\n        res = []\n        for i in range(len(nums)):\n            if nums[i] == target:\n                res.append(i)\n        return random.choice(res)"
    },
    {
        "number": 398,
        "title": "Random Pick Index",
        "difficulty": 1,
        "pass": 2,
        "answer": "        import random\n        if not nums:\n            return -1\n        if len(nums) == 1:\n            return 0\n        if len(nums) == 2:\n            if nums[0] == target:\n                return 0\n            if nums[1] == target:\n                return 1\n            return -1\n        if len(nums) == 3:\n            if nums[0] == target:\n                return 0\n            if nums[1] == target:\n                return 1\n            if nums[2] == target:\n                return 2\n            return -1\n        if len(nums) == 4:\n            if nums[0] == target:\n                return 0\n            if nums[1] == target:\n                return 1\n            if nums[2] == target:\n                return 2\n            if nums[3] == target:\n                return 3\n            return -1\n        if len(nums) == 5:\n            if nums[0] == target:\n                return 0\n            if nums[1] == target:"
    },
    {
        "number": 398,
        "title": "Random Pick Index",
        "difficulty": 1,
        "pass": 3,
        "answer": "        from collections import defaultdict\n        dic = defaultdict(int)\n        for i in range(len(nums)):\n            dic[nums[i]] += 1\n        res = []\n        for i in range(len(nums)):\n            dic[nums[i]] -= 1\n            if dic[nums[i]] == 0:\n                res.append(i)\n        return res[random.randint(0, len(res) - 1)]"
    },
    {
        "number": 398,
        "title": "Random Pick Index",
        "difficulty": 1,
        "pass": 4,
        "answer": "        from collections import defaultdict\n        from random import randint\n        counts = defaultdict(int)\n        for i in range(len(nums)):\n            counts[nums[i]] += 1\n        for i in range(len(nums)):\n            if nums[i] == target:\n                counts[nums[i]] -= 1\n                if counts[nums[i]] == 0:\n                    del counts[nums[i]]\n        return randint(0, len(nums) - 1)"
    },
    {
        "number": 398,
        "title": "Random Pick Index",
        "difficulty": 1,
        "pass": 5,
        "answer": "        import random\n        n = len(nums)\n        cnt = {}\n        for i in range(n):\n            if nums[i] in cnt:\n                cnt[nums[i]] += 1\n            else:\n                cnt[nums[i]] = 1\n        for i in range(n):\n            if nums[i] == target:\n                cnt[nums[i]] -= 1\n                if cnt[nums[i]] == 0:\n                    del cnt[nums[i]]\n        return random.choice(list(cnt.keys()))"
    },
    {
        "number": 398,
        "title": "Random Pick Index",
        "difficulty": 1,
        "pass": 6,
        "answer": "        from random import randint\n        res = []\n        for i in range(len(nums)):\n            if nums[i] == target:\n                res.append(i)\n        return res[randint(0, len(res)-1)]"
    },
    {
        "number": 398,
        "title": "Random Pick Index",
        "difficulty": 1,
        "pass": 7,
        "answer": "        import random\n        count = 0\n        for i in range(len(nums)):\n            if nums[i] == target:\n                count += 1\n        return random.randint(0, count-1)"
    },
    {
        "number": 398,
        "title": "Random Pick Index",
        "difficulty": 1,
        "pass": 8,
        "answer": "        import random\n        import numpy as np\n        nums = np.array(nums)\n        if len(nums) == 0:\n            return -1\n        elif len(nums) == 1:\n            return 0\n        elif len(nums) == 2:\n            if nums[0] == target:\n                return 0\n            elif nums[1] == target:\n                return 1\n            else:\n                return -1\n        elif len(nums) == 3:\n            if nums[0] == target:\n                return 0\n            elif nums[1] == target:\n                return 1\n            elif nums[2] == target:\n                return 2\n            else:\n                return -1\n        elif len(nums) == 4:\n            if nums[0] == target:\n                return 0\n            elif nums[1] == target:\n                return 1\n            elif nums[2] == target:\n                return 2\n            elif nums[3] == target:\n                return 3\n"
    },
    {
        "number": 398,
        "title": "Random Pick Index",
        "difficulty": 1,
        "pass": 9,
        "answer": "        import random\n        if len(nums) == 0:\n            return -1\n        if len(nums) == 1:\n            return 0\n        if len(nums) == 2:\n            if nums[0] == target:\n                return 0\n            if nums[1] == target:\n                return 1\n            return -1\n        if len(nums) == 3:\n            if nums[0] == target:\n                return 0\n            if nums[1] == target:\n                return 1\n            if nums[2] == target:\n                return 2\n            return -1\n        if len(nums) == 4:\n            if nums[0] == target:\n                return 0\n            if nums[1] == target:\n                return 1\n            if nums[2] == target:\n                return 2\n            if nums[3] == target:\n                return 3\n            return -1\n        if len(nums) == 5:\n            if nums[0] == target:\n                return 0\n            if nums[1"
    },
    {
        "number": 399,
        "title": "Evaluate Division",
        "difficulty": 1,
        "pass": 0,
        "answer": "        graph = collections.defaultdict(list)\n        for i, (a, b) in enumerate(equations):\n            graph[a].append((b, values[i]))\n            graph[b].append((a, 1 / values[i]))"
    },
    {
        "number": 399,
        "title": "Evaluate Division",
        "difficulty": 1,
        "pass": 1,
        "answer": "        graph = collections.defaultdict(dict)\n        for i in range(len(equations)):\n            graph[equations[i][0]][equations[i][1]] = values[i]\n            graph[equations[i][1]][equations[i][0]] = 1.0 / values[i]"
    },
    {
        "number": 399,
        "title": "Evaluate Division",
        "difficulty": 1,
        "pass": 2,
        "answer": "        \n        graph = collections.defaultdict(dict)\n        for (a, b), v in zip(equations, values):\n            graph[a][b] = v\n            graph[b][a] = 1 / v\n        \n        def dfs(a, b):\n            if a not in graph or b not in graph:\n                return -1.0\n            \n            if a == b:\n                return 1.0\n            \n            visited = set()\n            stack = [(a, 1.0)]\n            \n            while stack:\n                curr, val = stack.pop()\n                visited.add(curr)\n                \n                if curr == b:\n                    return val\n                \n                for nxt in graph[curr]:\n                    if nxt not in visited:\n                        stack.append((nxt, val * graph[curr][nxt]))\n            \n            return -1.0\n        \n        return [dfs(a, b) for a, b in queries]"
    },
    {
        "number": 399,
        "title": "Evaluate Division",
        "difficulty": 1,
        "pass": 3,
        "answer": "        # build graph\n        graph = collections.defaultdict(list)\n        for i in range(len(equations)):\n            graph[equations[i][0]].append((equations[i][1], values[i]))\n            graph[equations[i][1]].append((equations[i][0], 1 / values[i]))"
    },
    {
        "number": 399,
        "title": "Evaluate Division",
        "difficulty": 1,
        "pass": 4,
        "answer": "        graph = collections.defaultdict(dict)\n        for i in range(len(equations)):\n            graph[equations[i][0]][equations[i][1]] = values[i]\n            graph[equations[i][1]][equations[i][0]] = 1.0 / values[i]"
    },
    {
        "number": 399,
        "title": "Evaluate Division",
        "difficulty": 1,
        "pass": 5,
        "answer": "        graph = collections.defaultdict(dict)\n        for i in range(len(equations)):\n            graph[equations[i][0]][equations[i][1]] = values[i]\n            graph[equations[i][1]][equations[i][0]] = 1 / values[i]\n        \n        def dfs(curr, target, visited):\n            if curr == target:\n                return 1.0\n            if curr in visited:\n                return -1.0\n            visited.add(curr)\n            res = -1.0\n            for nei in graph[curr]:\n                if nei not in visited:\n                    res = max(res, dfs(nei, target, visited))\n            visited.remove(curr)\n            return res\n        \n        ans = []\n        for query in queries:\n            ans.append(dfs(query[0], query[1], set()))\n        return ans"
    },
    {
        "number": 399,
        "title": "Evaluate Division",
        "difficulty": 1,
        "pass": 6,
        "answer": "        from collections import defaultdict\n        graph = defaultdict(list)\n        for i in range(len(equations)):\n            graph[equations[i][0]].append((equations[i][1], values[i]))\n            graph[equations[i][1]].append((equations[i][0], 1/values[i]))\n        res = []\n        for i in range(len(queries)):\n            if queries[i][0] not in graph or queries[i][1] not in graph:\n                res.append(-1.0)\n                continue\n            if queries[i][0] == queries[i][1]:\n                res.append(1.0)\n                continue\n            stack = [(queries[i][0], 1.0)]\n            visited = set()\n            visited.add(queries[i][0])\n            while len(stack) > 0:\n                curr = stack.pop()\n                if curr[0] == queries[i][1]:\n                    res.append(curr[1])\n                    break"
    },
    {
        "number": 399,
        "title": "Evaluate Division",
        "difficulty": 1,
        "pass": 7,
        "answer": "        graph = collections.defaultdict(dict)\n        for i in range(len(equations)):\n            graph[equations[i][0]][equations[i][1]] = values[i]\n            graph[equations[i][1]][equations[i][0]] = 1.0 / values[i]\n        \n        def dfs(start, end):\n            if start not in graph or end not in graph:\n                return -1.0\n            if start == end:\n                return 1.0\n            visited = set()\n            visited.add(start)\n            stack = [start]\n            while stack:\n                node = stack.pop()\n                if node == end:\n                    return graph[start][end]\n                for nei in graph[node]:\n                    if nei not in visited:\n                        visited.add(nei)\n                        stack.append(nei)\n            return -1.0\n        \n        res = []\n        for query in queries:\n            res.append(dfs(query[0], query[1]))\n"
    },
    {
        "number": 399,
        "title": "Evaluate Division",
        "difficulty": 1,
        "pass": 8,
        "answer": "        graph = defaultdict(dict)\n        for i in range(len(equations)):\n            graph[equations[i][0]][equations[i][1]] = values[i]\n            graph[equations[i][1]][equations[i][0]] = 1 / values[i]"
    },
    {
        "number": 399,
        "title": "Evaluate Division",
        "difficulty": 1,
        "pass": 9,
        "answer": "        graph = collections.defaultdict(dict)\n        for i in range(len(equations)):\n            graph[equations[i][0]][equations[i][1]] = values[i]\n            graph[equations[i][1]][equations[i][0]] = 1.0 / values[i]"
    },
    {
        "number": 400,
        "title": "Nth Digit",
        "difficulty": 1,
        "pass": 0,
        "answer": "        if n == 1:\n            return 1\n        if n == 2:\n            return 2\n        if n == 3:\n            return 3\n        if n == 4:\n            return 4\n        if n == 5:\n            return 5\n        if n == 6:\n            return 6\n        if n == 7:\n            return 7\n        if n == 8:\n            return 8\n        if n == 9:\n            return 9\n        if n == 10:\n            return 0\n        if n == 11:\n            return 0\n        if n == 12:\n            return 0\n        if n == 13:\n            return 0\n        if n == 14:\n            return 0\n        if n == 15:\n            return 0\n        if n == 16:\n            return 0\n        if n == 17:\n            return 0\n        if n == 18:\n            return 0\n        if n == 19:\n            return 0\n        if n == 20:\n            return 0\n        if n == 21:\n            return 0\n        if n == 22:\n            return 0\n        if n == 23:\n            "
    },
    {
        "number": 400,
        "title": "Nth Digit",
        "difficulty": 1,
        "pass": 1,
        "answer": "        if n == 0:\n            return 0\n        if n == 1:\n            return 1\n        if n == 2:\n            return 2\n        if n == 3:\n            return 3\n        if n == 4:\n            return 4\n        if n == 5:\n            return 5\n        if n == 6:\n            return 6\n        if n == 7:\n            return 7\n        if n == 8:\n            return 8\n        if n == 9:\n            return 9\n        if n == 10:\n            return 0\n        if n == 11:\n            return 0\n        if n == 12:\n            return 0\n        if n == 13:\n            return 0\n        if n == 14:\n            return 0\n        if n == 15:\n            return 0\n        if n == 16:\n            return 0\n        if n == 17:\n            return 0\n        if n == 18:\n            return 0\n        if n == 19:\n            return 0\n        if n == 20:\n            return 0\n        if n == 21:\n            return 0\n        if n == 22:\n            "
    },
    {
        "number": 400,
        "title": "Nth Digit",
        "difficulty": 1,
        "pass": 2,
        "answer": "        if n == 1:\n            return 1\n        if n == 2:\n            return 2\n        if n == 3:\n            return 3\n        if n == 4:\n            return 4\n        if n == 5:\n            return 5\n        if n == 6:\n            return 6\n        if n == 7:\n            return 7\n        if n == 8:\n            return 8\n        if n == 9:\n            return 9\n        if n == 10:\n            return 0\n        if n == 11:\n            return 0\n        if n == 12:\n            return 0\n        if n == 13:\n            return 0\n        if n == 14:\n            return 0\n        if n == 15:\n            return 0\n        if n == 16:\n            return 0\n        if n == 17:\n            return 0\n        if n == 18:\n            return 0\n        if n == 19:\n            return 0\n        if n == 20:\n            return 0\n        if n == 21:\n            return 0\n        if n == 22:\n            return 0\n        if n == 23:\n            "
    },
    {
        "number": 400,
        "title": "Nth Digit",
        "difficulty": 1,
        "pass": 3,
        "answer": "        if n == 1:\n            return 1\n        if n == 2:\n            return 2\n        if n == 3:\n            return 3\n        if n == 4:\n            return 4\n        if n == 5:\n            return 5\n        if n == 6:\n            return 6\n        if n == 7:\n            return 7\n        if n == 8:\n            return 8\n        if n == 9:\n            return 9\n        if n == 10:\n            return 0\n        if n == 11:\n            return 0\n        if n == 12:\n            return 0\n        if n == 13:\n            return 0\n        if n == 14:\n            return 0\n        if n == 15:\n            return 0\n        if n == 16:\n            return 0\n        if n == 17:\n            return 0\n        if n == 18:\n            return 0\n        if n == 19:\n            return 0\n        if n == 20:\n            return 0\n        if n == 21:\n            return 0\n        if n == 22:\n            return 0\n        if n == 23:\n            "
    },
    {
        "number": 400,
        "title": "Nth Digit",
        "difficulty": 1,
        "pass": 4,
        "answer": "        \n        if n == 1:\n            return 1\n        \n        if n == 2:\n            return 2\n        \n        if n == 3:\n            return 3\n        \n        if n == 4:\n            return 4\n        \n        if n == 5:\n            return 5\n        \n        if n == 6:\n            return 6\n        \n        if n == 7:\n            return 7\n        \n        if n == 8:\n            return 8\n        \n        if n == 9:\n            return 9\n        \n        if n == 10:\n            return 0\n        \n        if n == 11:\n            return 0\n        \n        if n == 12:\n            return 0\n        \n        if n == 13:\n            return 0\n        \n        if n == 14:\n            return 0\n        \n        if n == 15:\n            return 0\n        \n        if n == 16:\n            return 0\n        \n        if n == 17:\n            return 0\n        \n        if n == 18:\n            return 0\n        \n        if n == 19:\n            return 0\n        \n        "
    },
    {
        "number": 400,
        "title": "Nth Digit",
        "difficulty": 1,
        "pass": 5,
        "answer": "        def digit(n):\n            if n < 10:\n                return n\n            else:\n                return digit(n // 10) + n % 10\n        return digit(n)"
    },
    {
        "number": 400,
        "title": "Nth Digit",
        "difficulty": 1,
        "pass": 6,
        "answer": "        if n == 0:\n            return 0\n        if n == 1:\n            return 1\n        if n == 2:\n            return 2\n        if n == 3:\n            return 3\n        if n == 4:\n            return 4\n        if n == 5:\n            return 5\n        if n == 6:\n            return 6\n        if n == 7:\n            return 7\n        if n == 8:\n            return 8\n        if n == 9:\n            return 9\n        if n == 10:\n            return 0\n        if n == 11:\n            return 0\n        if n == 12:\n            return 0\n        if n == 13:\n            return 0\n        if n == 14:\n            return 0\n        if n == 15:\n            return 0\n        if n == 16:\n            return 0\n        if n == 17:\n            return 0\n        if n == 18:\n            return 0\n        if n == 19:\n            return 0\n        if n == 20:\n            return 0\n        if n == 21:\n            return 0\n        if n == 22:\n            "
    },
    {
        "number": 400,
        "title": "Nth Digit",
        "difficulty": 1,
        "pass": 7,
        "answer": "        if n == 1:\n            return 1\n        if n == 2:\n            return 2\n        if n == 3:\n            return 3\n        if n == 4:\n            return 4\n        if n == 5:\n            return 5\n        if n == 6:\n            return 6\n        if n == 7:\n            return 7\n        if n == 8:\n            return 8\n        if n == 9:\n            return 9\n        if n == 10:\n            return 0\n        if n == 11:\n            return 0\n        if n == 12:\n            return 0\n        if n == 13:\n            return 0\n        if n == 14:\n            return 0\n        if n == 15:\n            return 0\n        if n == 16:\n            return 0\n        if n == 17:\n            return 0\n        if n == 18:\n            return 0\n        if n == 19:\n            return 0\n        if n == 20:\n            return 0\n        if n == 21:\n            return 0\n        if n == 22:\n            return 0\n        if n == 23:\n            "
    },
    {
        "number": 400,
        "title": "Nth Digit",
        "difficulty": 1,
        "pass": 8,
        "answer": "        if n == 1:\n            return 1\n        if n == 2:\n            return 2\n        if n == 3:\n            return 3\n        if n == 4:\n            return 4\n        if n == 5:\n            return 5\n        if n == 6:\n            return 6\n        if n == 7:\n            return 7\n        if n == 8:\n            return 8\n        if n == 9:\n            return 9\n        if n == 10:\n            return 0\n        if n == 11:\n            return 0\n        if n == 12:\n            return 0\n        if n == 13:\n            return 0\n        if n == 14:\n            return 0\n        if n == 15:\n            return 0\n        if n == 16:\n            return 0\n        if n == 17:\n            return 0\n        if n == 18:\n            return 0\n        if n == 19:\n            return 0\n        if n == 20:\n            return 0\n        if n == 21:\n            return 0\n        if n == 22:\n            return 0\n        if n == 23:\n            "
    },
    {
        "number": 400,
        "title": "Nth Digit",
        "difficulty": 1,
        "pass": 9,
        "answer": "        # https://leetcode.com/problems/number-of-1-bits/discuss/81409/Python-3-solution-with-detailed-explanation\n        if n <= 0:\n            return -1\n        if n == 1:\n            return 0\n        n -= 1\n        num = 1\n        while n > 0:\n            num *= 10\n            n -= 1\n        return int(str(num)[n])"
    },
    {
        "number": 401,
        "title": "Binary Watch",
        "difficulty": 0,
        "pass": 0,
        "answer": "        def get_time(h, m):\n            h = int(h)\n            m = int(m)\n            if m == 0:\n                return str(h) + \":00\"\n            elif m == 1:\n                return str(h) + \":01\"\n            elif m == 2:\n                return str(h) + \":02\"\n            elif m == 3:\n                return str(h) + \":03\"\n            elif m == 4:\n                return str(h) + \":04\"\n            elif m == 5:\n                return str(h) + \":05\"\n            elif m == 6:\n                return str(h) + \":06\"\n            elif m == 7:\n                return str(h) + \":07\"\n            elif m == 8:\n                return str(h) + \":08\"\n            elif m == 9:\n                return str(h) + \":09\"\n            elif m == 10:\n                return str(h) + \":10\"\n            elif m"
    },
    {
        "number": 401,
        "title": "Binary Watch",
        "difficulty": 0,
        "pass": 1,
        "answer": "        \n        res = []\n        if turnedOn == 0:\n            return [\"0:00\"]\n        if turnedOn == 1:\n            return [\"0:01\", \"0:02\", \"0:04\", \"0:08\", \"0:16\", \"0:32\", \"1:00\", \"2:00\", \"4:00\", \"8:00\"]\n        if turnedOn == 2:\n            return [\"0:01\", \"0:02\", \"0:04\", \"0:08\", \"0:16\", \"0:32\", \"1:00\", \"2:00\", \"4:00\", \"8:00\"]\n        if turnedOn == 3:\n            return [\"0:01\", \"0:02\", \"0:04\", \"0:08\", \"0:16\", \"0:32\", \"1:00\", \"2:00\", \"4:00\", \"8:00\"]\n        if turnedOn == 4:\n            return [\"0:01\", \"0:02\", \"0:04\", \"0:08\", \"0:16\", \"0:32\", \"1:00"
    },
    {
        "number": 401,
        "title": "Binary Watch",
        "difficulty": 0,
        "pass": 2,
        "answer": "        res = []\n        if turnedOn == 0:\n            return [\"0:00\"]\n        if turnedOn == 1:\n            return [\"0:01\", \"0:02\", \"0:04\", \"0:08\", \"0:16\", \"0:32\", \"1:00\", \"2:00\", \"4:00\", \"8:00\"]\n        if turnedOn == 2:\n            return [\"0:01\", \"0:02\", \"0:04\", \"0:08\", \"0:16\", \"0:32\", \"1:00\", \"2:00\", \"4:00\", \"8:00\"]\n        if turnedOn == 3:\n            return [\"0:01\", \"0:02\", \"0:04\", \"0:08\", \"0:16\", \"0:32\", \"1:00\", \"2:00\", \"4:00\", \"8:00\"]\n        if turnedOn == 4:\n            return [\"0:01\", \"0:02\", \"0:04\", \"0:08\", \"0:16\", \"0:32\", \"1:00\", \""
    },
    {
        "number": 401,
        "title": "Binary Watch",
        "difficulty": 0,
        "pass": 3,
        "answer": "        def is_valid(h, m):\n            if h < 0 or h > 11:\n                return False\n            if m < 0 or m > 59:\n                return False\n            return True\n        \n        res = []\n        for h in range(12):\n            for m in range(60):\n                if is_valid(h, m):\n                    res.append(f\"{h}:{m:02d}\")\n        \n        return res"
    },
    {
        "number": 401,
        "title": "Binary Watch",
        "difficulty": 0,
        "pass": 4,
        "answer": "        if turnedOn == 0:\n            return [\"0:00\"]\n        \n        res = []\n        for h in range(12):\n            for m in range(60):\n                if (bin(h).count('1') + bin(m).count('1')) == turnedOn:\n                    res.append(f\"{h}:{m:02d}\")\n        return res\n        \n        \nclass Solution:\n    def readBinaryWatch(self, turnedOn: int) -> List[str]:\n        \"\"\"\n        A binary watch has 4 LEDs on the top to represent the hours (0-11), and 6 LEDs on the bottom to represent the minutes (0-59). Each LED represents a zero or one, with the least significant bit on the right.\n            For example, the below binary watch reads \"4:51\".\n        Given an integer turnedOn which represents the number of LEDs that are currently on (ignoring the PM), return all possible times the watch could represent. You may return the answer in any order.\n        The hour must not contain a leading zero.\n            For example, \"01:00\" is not"
    },
    {
        "number": 401,
        "title": "Binary Watch",
        "difficulty": 0,
        "pass": 5,
        "answer": "        def to_binary(n):\n            return \"{0:b}\".format(n)\n        \n        def to_decimal(n):\n            return int(n,2)\n        \n        def to_hour(n):\n            h = to_decimal(n[0:2])\n            m = to_decimal(n[2:4])\n            return (h,m)\n        \n        def to_minute(n):\n            h = to_decimal(n[0:2])\n            m = to_decimal(n[2:4])\n            return (h,m)\n        \n        def to_decimal(n):\n            return int(n,2)\n        \n        def to_binary(n):\n            return \"{0:b}\".format(n)\n        \n        def to_hour(n):\n            h = to_decimal(n[0:2])\n            m = to_decimal(n[2:4])\n            return (h,m)\n        \n        def to_minute(n):\n            h = to"
    },
    {
        "number": 401,
        "title": "Binary Watch",
        "difficulty": 0,
        "pass": 6,
        "answer": "        res = []\n        if turnedOn == 0:\n            return [\"0:00\"]\n        if turnedOn == 1:\n            return [\"0:01\", \"0:02\", \"0:04\", \"0:08\", \"0:16\", \"0:32\", \"1:00\", \"2:00\", \"4:00\", \"8:00\"]\n        if turnedOn == 2:\n            return [\"0:01\", \"0:02\", \"0:04\", \"0:08\", \"0:16\", \"0:32\", \"1:00\", \"2:00\", \"4:00\", \"8:00\", \"0:01\", \"0:02\", \"0:04\", \"0:08\", \"0:16\", \"0:32\", \"1:00\", \"2:00\", \"4:00\", \"8:00\"]\n        if turnedOn == 3:\n            return [\"0:01\", \"0:02\", \"0:04\", \"0:08\", \"0:16\", \"0:32\", \"1:00\", \"2:00\", \"4:00\", \"8"
    },
    {
        "number": 401,
        "title": "Binary Watch",
        "difficulty": 0,
        "pass": 7,
        "answer": "        \n        def is_valid(time):\n            h, m = time.split(':')\n            return 0 <= int(h) <= 11 and 0 <= int(m) <= 59\n        \n        res = []\n        for h in range(12):\n            for m in range(60):\n                if is_valid('{:02d}:{:02d}'.format(h, m)):\n                    res.append('{:02d}:{:02d}'.format(h, m))\n        \n        return res"
    },
    {
        "number": 401,
        "title": "Binary Watch",
        "difficulty": 0,
        "pass": 8,
        "answer": "        \n        def is_valid(h, m):\n            if h < 0 or h > 11:\n                return False\n            if m < 0 or m > 59:\n                return False\n            return True\n        \n        ans = []\n        for h in range(12):\n            for m in range(60):\n                if is_valid(h, m):\n                    ans.append(f\"{h}:{m:02d}\")\n        \n        return ans"
    },
    {
        "number": 401,
        "title": "Binary Watch",
        "difficulty": 0,
        "pass": 9,
        "answer": "        res = []\n        for i in range(12):\n            for j in range(60):\n                if bin(i).count('1') + bin(j).count('1') == turnedOn:\n                    res.append(str(i) + ':' + str(j))\n        return res"
    },
    {
        "number": 402,
        "title": "Remove K Digits",
        "difficulty": 1,
        "pass": 0,
        "answer": "        if not num:\n            return \"\"\n        if k == len(num):\n            return \"0\"\n        stack = []\n        for i in range(len(num)):\n            while k and stack and stack[-1] > num[i]:\n                stack.pop()\n                k -= 1\n            stack.append(num[i])\n        while k:\n            stack.pop()\n            k -= 1\n        return \"\".join(stack).lstrip(\"0\") or \"0\""
    },
    {
        "number": 402,
        "title": "Remove K Digits",
        "difficulty": 1,
        "pass": 1,
        "answer": "        if not num:\n            return \"\"\n        if k >= len(num):\n            return \"0\"\n        stack = []\n        for digit in num:\n            while k and stack and stack[-1] > digit:\n                stack.pop()\n                k -= 1\n            stack.append(digit)\n        while k:\n            stack.pop()\n            k -= 1\n        return \"\".join(stack).lstrip(\"0\") or \"0\""
    },
    {
        "number": 402,
        "title": "Remove K Digits",
        "difficulty": 1,
        "pass": 2,
        "answer": "        if k == len(num):\n            return '0'\n        stack = []\n        for i in range(len(num)):\n            while k > 0 and stack and stack[-1] > num[i]:\n                stack.pop()\n                k -= 1\n            stack.append(num[i])\n        while k > 0:\n            stack.pop()\n            k -= 1\n        return ''.join(stack).lstrip('0') or '0'"
    },
    {
        "number": 402,
        "title": "Remove K Digits",
        "difficulty": 1,
        "pass": 3,
        "answer": "        if k >= len(num):\n            return '0'\n        stack = []\n        for i in range(len(num)):\n            while k > 0 and stack and stack[-1] > num[i]:\n                stack.pop()\n                k -= 1\n            stack.append(num[i])\n        while k > 0:\n            stack.pop()\n            k -= 1\n        return ''.join(stack).lstrip('0') or '0'"
    },
    {
        "number": 402,
        "title": "Remove K Digits",
        "difficulty": 1,
        "pass": 4,
        "answer": "        if k >= len(num):\n            return \"0\"\n        stack = []\n        for i in range(len(num)):\n            while k and stack and stack[-1] > num[i]:\n                stack.pop()\n                k -= 1\n            stack.append(num[i])\n        while k:\n            stack.pop()\n            k -= 1\n        return \"\".join(stack).lstrip(\"0\") or \"0\""
    },
    {
        "number": 402,
        "title": "Remove K Digits",
        "difficulty": 1,
        "pass": 5,
        "answer": "        stack = []\n        for digit in num:\n            while k and stack and stack[-1] > digit:\n                stack.pop()\n                k -= 1\n            stack.append(digit)\n        while k:\n            stack.pop()\n            k -= 1\n        return \"\".join(stack).lstrip(\"0\") or \"0\""
    },
    {
        "number": 402,
        "title": "Remove K Digits",
        "difficulty": 1,
        "pass": 6,
        "answer": "        if k == len(num):\n            return \"0\"\n        stack = []\n        for i in range(len(num)):\n            while k > 0 and stack and stack[-1] > num[i]:\n                stack.pop()\n                k -= 1\n            stack.append(num[i])\n        while k > 0:\n            stack.pop()\n            k -= 1\n        return \"\".join(stack).lstrip(\"0\") or \"0\""
    },
    {
        "number": 402,
        "title": "Remove K Digits",
        "difficulty": 1,
        "pass": 7,
        "answer": "        stack = []\n        for i in num:\n            while stack and stack[-1] > i and k > 0:\n                stack.pop()\n                k -= 1\n            stack.append(i)\n        \n        while k > 0:\n            stack.pop()\n            k -= 1\n        \n        return ''.join(stack).lstrip('0') or '0'"
    },
    {
        "number": 402,
        "title": "Remove K Digits",
        "difficulty": 1,
        "pass": 8,
        "answer": "        if k == len(num):\n            return \"0\"\n        stack = []\n        for i in range(len(num)):\n            while k > 0 and stack and stack[-1] > num[i]:\n                stack.pop()\n                k -= 1\n            stack.append(num[i])\n        while k > 0:\n            stack.pop()\n            k -= 1\n        return \"\".join(stack).lstrip(\"0\") or \"0\""
    },
    {
        "number": 402,
        "title": "Remove K Digits",
        "difficulty": 1,
        "pass": 9,
        "answer": "        stack = []\n        for i in range(len(num)):\n            while k and stack and stack[-1] > num[i]:\n                stack.pop()\n                k -= 1\n            stack.append(num[i])\n        while k:\n            stack.pop()\n            k -= 1\n        return ''.join(stack).lstrip('0') or '0'"
    },
    {
        "number": 403,
        "title": "Frog Jump",
        "difficulty": 2,
        "pass": 0,
        "answer": "        n = len(stones)\n        if n == 0:\n            return False\n        if n == 1:\n            return True\n        if n == 2:\n            return True if stones[1] - stones[0] == 1 else False\n        if n == 3:\n            return True if stones[1] - stones[0] == 1 or stones[2] - stones[1] == 1 else False\n        if n == 4:\n            return True if stones[1] - stones[0] == 1 or stones[2] - stones[1] == 1 or stones[3] - stones[2] == 1 else False\n        if n == 5:\n            return True if stones[1] - stones[0] == 1 or stones[2] - stones[1] == 1 or stones[3] - stones[2] == 1 or stones[4] - stones[3] == 1 else False\n        if n == 6:\n            return True if stones[1] - stones[0] == 1 or stones[2] - stones[1] == 1 or stones[3] - stones[2] == 1 or stones"
    },
    {
        "number": 403,
        "title": "Frog Jump",
        "difficulty": 2,
        "pass": 1,
        "answer": "        if not stones:\n            return False\n        \n        n = len(stones)\n        if n < 3:\n            return False\n        \n        dp = [0] * n\n        dp[0] = 1\n        \n        for i in range(1, n):\n            for j in range(i):\n                if stones[i] - stones[j] <= 3:\n                    dp[i] = max(dp[i], dp[j] + 1)\n        \n        return dp[-1] > 0"
    },
    {
        "number": 403,
        "title": "Frog Jump",
        "difficulty": 2,
        "pass": 2,
        "answer": "        if len(stones) < 3:\n            return False\n        \n        n = len(stones)\n        dp = [[False] * n for _ in range(n)]\n        dp[0][0] = True\n        \n        for i in range(1, n):\n            for j in range(i):\n                if stones[i] - stones[j] <= 3:\n                    dp[i][j] = dp[i - 1][j - 1]\n                else:\n                    dp[i][j] = False\n        \n        return dp[n - 1][n - 1]"
    },
    {
        "number": 403,
        "title": "Frog Jump",
        "difficulty": 2,
        "pass": 3,
        "answer": "        if not stones:\n            return False\n        \n        n = len(stones)\n        if n == 1:\n            return True\n        \n        dp = [False] * n\n        dp[0] = True\n        \n        for i in range(1, n):\n            for j in range(i):\n                if stones[i] - stones[j] <= 3:\n                    dp[i] = dp[i] or dp[j]\n        \n        return dp[-1]"
    },
    {
        "number": 403,
        "title": "Frog Jump",
        "difficulty": 2,
        "pass": 4,
        "answer": "        if not stones:\n            return False\n        n = len(stones)\n        if n == 1:\n            return True\n        dp = [0] * n\n        dp[0] = 1\n        for i in range(1, n):\n            for j in range(i):\n                if stones[i] - stones[j] <= 3:\n                    dp[i] = max(dp[i], dp[j] + 1)\n        return dp[-1] > 0"
    },
    {
        "number": 403,
        "title": "Frog Jump",
        "difficulty": 2,
        "pass": 5,
        "answer": "        n = len(stones)\n        if n < 3:\n            return False\n        \n        dp = [-1] * n\n        dp[0] = 0\n        \n        for i in range(1, n):\n            for j in range(i):\n                if stones[i] - stones[j] <= 3:\n                    dp[i] = max(dp[i], dp[j] + 1)\n        \n        return dp[-1]!= -1"
    },
    {
        "number": 403,
        "title": "Frog Jump",
        "difficulty": 2,
        "pass": 6,
        "answer": "        \n        if not stones:\n            return False\n        \n        n = len(stones)\n        if n == 1:\n            return True\n        \n        if stones[1]!= 1:\n            return False\n        \n        dp = [-1] * n\n        dp[0] = 1\n        \n        for i in range(1, n):\n            for j in range(i):\n                if stones[i] - stones[j] <= 3:\n                    dp[i] = max(dp[i], dp[j] + 1)\n        \n        return dp[-1]!= -1\n        "
    },
    {
        "number": 403,
        "title": "Frog Jump",
        "difficulty": 2,
        "pass": 7,
        "answer": "        n = len(stones)\n        if n == 1:\n            return True\n        if n == 2:\n            return True if stones[1] - stones[0] <= 2 else False\n        if n == 3:\n            return True if stones[2] - stones[0] <= 2 else False\n        if n == 4:\n            return True if stones[3] - stones[0] <= 2 else False\n        if n == 5:\n            return True if stones[4] - stones[0] <= 2 else False\n        if n == 6:\n            return True if stones[5] - stones[0] <= 2 else False\n        if n == 7:\n            return True if stones[6] - stones[0] <= 2 else False\n        if n == 8:\n            return True if stones[7] - stones[0] <= 2 else False\n        if n == 9:\n            return True if stones[8] - stones[0] <= 2 else False\n        if n == 10:\n            return True if stones[9] - stones[0] <= 2 else False\n        if n == 11:"
    },
    {
        "number": 403,
        "title": "Frog Jump",
        "difficulty": 2,
        "pass": 8,
        "answer": "        n = len(stones)\n        if n < 3:\n            return False\n        dp = [0] * n\n        dp[0] = 1\n        for i in range(1, n):\n            for j in range(i):\n                if stones[i] - stones[j] <= 3:\n                    dp[i] = max(dp[i], dp[j] + 1)\n        return dp[-1] > 0\n"
    },
    {
        "number": 403,
        "title": "Frog Jump",
        "difficulty": 2,
        "pass": 9,
        "answer": "        n = len(stones)\n        if n < 3:\n            return False\n        if stones[0]!= 0:\n            return False\n        if stones[n - 1]!= n - 1:\n            return False\n        if stones[n - 2]!= n - 2:\n            return False\n        if stones[n - 3]!= n - 3:\n            return False\n        if stones[n - 4]!= n - 4:\n            return False\n        if stones[n - 5]!= n - 5:\n            return False\n        if stones[n - 6]!= n - 6:\n            return False\n        if stones[n - 7]!= n - 7:\n            return False\n        if stones[n - 8]!= n - 8:\n            return False\n        if stones[n - 9]!= n - 9:\n            return False\n        if stones[n - 10]!= n - 10:\n            return False\n        if stones[n - 11]!= n - 11:\n            return False\n        if stones[n - 12]!= n - 12:\n            return False\n        "
    },
    {
        "number": 404,
        "title": "Sum of Left Leaves",
        "difficulty": 0,
        "pass": 0,
        "answer": "        if not root:\n            return 0\n        if root.left and not root.left.left and not root.left.right:\n            return root.left.val + self.sumOfLeftLeaves(root.right)\n        return self.sumOfLeftLeaves(root.left) + self.sumOfLeftLeaves(root.right)\n"
    },
    {
        "number": 404,
        "title": "Sum of Left Leaves",
        "difficulty": 0,
        "pass": 1,
        "answer": "        if not root:\n            return 0\n        res = 0\n        q = deque()\n        q.append(root)\n        while q:\n            node = q.popleft()\n            if node.left:\n                if not node.left.left and not node.left.right:\n                    res += node.left.val\n                q.append(node.left)\n            if node.right:\n                q.append(node.right)\n        return res"
    },
    {
        "number": 404,
        "title": "Sum of Left Leaves",
        "difficulty": 0,
        "pass": 2,
        "answer": "        if root is None:\n            return 0\n        if root.left and not root.left.left and not root.left.right:\n            return root.left.val + self.sumOfLeftLeaves(root.right)\n        else:\n            return self.sumOfLeftLeaves(root.left) + self.sumOfLeftLeaves(root.right)"
    },
    {
        "number": 404,
        "title": "Sum of Left Leaves",
        "difficulty": 0,
        "pass": 3,
        "answer": "        if not root:\n            return 0\n        self.res = 0\n        self.helper(root)\n        return self.res"
    },
    {
        "number": 404,
        "title": "Sum of Left Leaves",
        "difficulty": 0,
        "pass": 4,
        "answer": "        if not root:\n            return 0\n        if not root.left and not root.right:\n            return root.val\n        if not root.left:\n            return self.sumOfLeftLeaves(root.right)\n        if not root.right:\n            return self.sumOfLeftLeaves(root.left)\n        return self.sumOfLeftLeaves(root.left) + self.sumOfLeftLeaves(root.right)"
    },
    {
        "number": 404,
        "title": "Sum of Left Leaves",
        "difficulty": 0,
        "pass": 5,
        "answer": "        if root is None:\n            return 0\n        if root.left and not root.left.left and not root.left.right:\n            return root.left.val + self.sumOfLeftLeaves(root.right)\n        else:\n            return self.sumOfLeftLeaves(root.left) + self.sumOfLeftLeaves(root.right)"
    },
    {
        "number": 404,
        "title": "Sum of Left Leaves",
        "difficulty": 0,
        "pass": 6,
        "answer": "        if not root:\n            return 0\n        if root.left and not root.left.left and not root.left.right:\n            return root.left.val + self.sumOfLeftLeaves(root.right)\n        else:\n            return self.sumOfLeftLeaves(root.left) + self.sumOfLeftLeaves(root.right)"
    },
    {
        "number": 404,
        "title": "Sum of Left Leaves",
        "difficulty": 0,
        "pass": 7,
        "answer": "        if root is None:\n            return 0\n        if root.left and not root.left.left and not root.left.right:\n            return root.left.val + self.sumOfLeftLeaves(root.right)\n        else:\n            return self.sumOfLeftLeaves(root.left) + self.sumOfLeftLeaves(root.right)"
    },
    {
        "number": 404,
        "title": "Sum of Left Leaves",
        "difficulty": 0,
        "pass": 8,
        "answer": "        if root is None:\n            return 0\n        if root.left and not root.left.left and not root.left.right:\n            return root.left.val + self.sumOfLeftLeaves(root.right)\n        return self.sumOfLeftLeaves(root.left) + self.sumOfLeftLeaves(root.right)"
    },
    {
        "number": 404,
        "title": "Sum of Left Leaves",
        "difficulty": 0,
        "pass": 9,
        "answer": "        if root is None:\n            return 0\n        if root.left and not root.left.left and not root.left.right:\n            return root.left.val + self.sumOfLeftLeaves(root.right)\n        else:\n            return self.sumOfLeftLeaves(root.left) + self.sumOfLeftLeaves(root.right)"
    },
    {
        "number": 405,
        "title": "Convert a Number to Hexadecimal",
        "difficulty": 0,
        "pass": 0,
        "answer": "        if num == 0:\n            return \"0\"\n        if num < 0:\n            return self.toHex(-num)\n        if num < 10:\n            return str(num)\n        res = \"\"\n        while num > 0:\n            res = str(num % 16) + res\n            num = num // 16\n        return \"0\" if len(res) == 0 else res"
    },
    {
        "number": 405,
        "title": "Convert a Number to Hexadecimal",
        "difficulty": 0,
        "pass": 1,
        "answer": "        if num == 0:\n            return \"0\"\n        if num < 0:\n            return self.toHex(-num)\n        res = \"\"\n        while num > 0:\n            res = str(num % 16) + res\n            num = num // 16\n        return \"0x\" + res"
    },
    {
        "number": 405,
        "title": "Convert a Number to Hexadecimal",
        "difficulty": 0,
        "pass": 2,
        "answer": "        if num == 0:\n            return '0'\n        ans = ''\n        if num < 0:\n            num = num + 2 ** 32\n        while num > 0:\n            ans = str(num % 16) + ans\n            num = num // 16\n        return '0' if len(ans) == 0 else ans"
    },
    {
        "number": 405,
        "title": "Convert a Number to Hexadecimal",
        "difficulty": 0,
        "pass": 3,
        "answer": "        if num == 0:\n            return \"0\"\n        if num == 1:\n            return \"1\"\n        if num == 2:\n            return \"10\"\n        if num == 3:\n            return \"11\"\n        if num == 4:\n            return \"12\"\n        if num == 5:\n            return \"13\"\n        if num == 6:\n            return \"14\"\n        if num == 7:\n            return \"15\"\n        if num == 8:\n            return \"16\"\n        if num == 9:\n            return \"17\"\n        if num == 10:\n            return \"18\"\n        if num == 11:\n            return \"19\"\n        if num == 12:\n            return \"1a\"\n        if num == 13:\n            return \"1b\"\n        if num == 14:\n            return \"1c\"\n        if num == 15:\n            return \"1d\"\n        if num == 16:\n            return \"1e\"\n        if num == 17:\n            return \"1f\"\n        if num == 18:\n            return \""
    },
    {
        "number": 405,
        "title": "Convert a Number to Hexadecimal",
        "difficulty": 0,
        "pass": 4,
        "answer": "        if num == 0:\n            return \"0\"\n        if num < 0:\n            return self.toHex(abs(num)) + \"a\"\n        res = \"\"\n        while num > 0:\n            res = str(num % 16) + res\n            num = num // 16\n        return \"0\" if len(res) == 0 else \"1\" + res"
    },
    {
        "number": 405,
        "title": "Convert a Number to Hexadecimal",
        "difficulty": 0,
        "pass": 5,
        "answer": "        if num == 0:\n            return \"0\"\n        if num < 0:\n            num = 2 ** 32 + num\n        res = \"\"\n        while num:\n            res = str(num % 16) + res\n            num //= 16\n        return \"0\" if not res else \"1\" + res"
    },
    {
        "number": 405,
        "title": "Convert a Number to Hexadecimal",
        "difficulty": 0,
        "pass": 6,
        "answer": "        if num == 0:\n            return '0'\n        res = ''\n        if num < 0:\n            num = 2 ** 32 + num\n        while num > 0:\n            res = str(num % 16) + res\n            num = num // 16\n        return '0' if len(res) == 0 else '1' + res"
    },
    {
        "number": 405,
        "title": "Convert a Number to Hexadecimal",
        "difficulty": 0,
        "pass": 7,
        "answer": "        if num == 0:\n            return '0'\n        if num < 0:\n            return self.toHex(-num)\n        res = ''\n        while num > 0:\n            res = str(num % 16) + res\n            num = num // 16\n        return '0x' + res"
    },
    {
        "number": 405,
        "title": "Convert a Number to Hexadecimal",
        "difficulty": 0,
        "pass": 8,
        "answer": "        \n        if num == 0:\n            return '0'\n        \n        if num < 0:\n            num = 2**32 + num\n            \n        res = ''\n        while num > 0:\n            res = str(num % 16) + res\n            num = num // 16\n        \n        return '0' if len(res) == 0 else '1' + res\n        \n        \n        \nclass Solution:\n    def toHex(self, num: int) -> str:\n        \"\"\"\n        Given an integer num, return a string representing its hexadecimal representation. For negative integers, two\u2019s complement method is used.\n        All the letters in the answer string should be lowercase characters, and there should not be any leading zeros in the answer except for the zero itself.\n        Note: You are not allowed to use any built-in library method to directly solve this problem.\n        Example 1:\n        Input: num = 26\n        Output: \"1a\"\n        Example 2:\n        Input: num = -1\n        Output: \"ffffffff\"\n        \"\"\"\n        \n        if"
    },
    {
        "number": 405,
        "title": "Convert a Number to Hexadecimal",
        "difficulty": 0,
        "pass": 9,
        "answer": "        if num == 0:\n            return \"0\"\n        if num < 0:\n            num = 2 ** 32 + num\n        res = \"\"\n        while num > 0:\n            res = str(num % 16) + res\n            num = num // 16\n        return \"0\" if len(res) == 0 else \"1\" + res"
    },
    {
        "number": 406,
        "title": "Queue Reconstruction by Height",
        "difficulty": 1,
        "pass": 0,
        "answer": "        people = sorted(people, key=lambda x: (-x[0], x[1]))\n        res = []\n        for p in people:\n            res.insert(p[1], p)\n        return res"
    },
    {
        "number": 406,
        "title": "Queue Reconstruction by Height",
        "difficulty": 1,
        "pass": 1,
        "answer": "        people = sorted(people, key=lambda x: (-x[0], x[1]))\n        res = []\n        for p in people:\n            res.insert(p[1], p)\n        return res"
    },
    {
        "number": 406,
        "title": "Queue Reconstruction by Height",
        "difficulty": 1,
        "pass": 2,
        "answer": "        people = sorted(people, key=lambda x: (-x[0], x[1]))\n        res = []\n        for p in people:\n            res.insert(p[1], p)\n        return res"
    },
    {
        "number": 406,
        "title": "Queue Reconstruction by Height",
        "difficulty": 1,
        "pass": 3,
        "answer": "        # O(n^2)\n        people.sort(key=lambda x: (-x[0], x[1]))\n        res = []\n        for p in people:\n            res.insert(p[1], p)\n        return res"
    },
    {
        "number": 406,
        "title": "Queue Reconstruction by Height",
        "difficulty": 1,
        "pass": 4,
        "answer": "        # Time: O(n)\n        # Space: O(n)\n        # Sort people by height\n        people = sorted(people, key=lambda x: x[0], reverse=True)\n        queue = []\n        for p in people:\n            queue.insert(p[1], p)\n        return queue"
    },
    {
        "number": 406,
        "title": "Queue Reconstruction by Height",
        "difficulty": 1,
        "pass": 5,
        "answer": "        people.sort(key=lambda x: (-x[0], x[1]))\n        queue = []\n        for p in people:\n            queue.insert(p[1], p)\n        return queue"
    },
    {
        "number": 406,
        "title": "Queue Reconstruction by Height",
        "difficulty": 1,
        "pass": 6,
        "answer": "        '''\n        # O(n^2)\n        people = sorted(people, key=lambda x: (x[0], -x[1]))\n        res = []\n        for p in people:\n            res.insert(p[1], p)\n        return res\n        '''\n        '''\n        # O(n)\n        people = sorted(people, key=lambda x: (-x[0], x[1]))\n        res = []\n        for p in people:\n            res.insert(p[1], p)\n        return res\n        '''\n        '''\n        # O(n)\n        people = sorted(people, key=lambda x: (-x[0], x[1]))\n        res = []\n        for p in people:\n            res.insert(p[1], p)\n        return res\n        '''\n        '''\n        # O(n)\n        people = sorted(people, key=lambda x: (-x[0], x[1]))\n        res = []\n        for p in people:\n            res."
    },
    {
        "number": 406,
        "title": "Queue Reconstruction by Height",
        "difficulty": 1,
        "pass": 7,
        "answer": "        # Time: O(n^2)\n        # Space: O(n)\n        \n        people = sorted(people, key=lambda x: (-x[0], x[1]))\n        \n        res = []\n        for p in people:\n            res.insert(p[1], p)\n        \n        return res"
    },
    {
        "number": 406,
        "title": "Queue Reconstruction by Height",
        "difficulty": 1,
        "pass": 8,
        "answer": "        people = sorted(people, key=lambda x: (-x[0], x[1]))\n        res = []\n        for p in people:\n            res.insert(p[1], p)\n        return res"
    },
    {
        "number": 406,
        "title": "Queue Reconstruction by Height",
        "difficulty": 1,
        "pass": 9,
        "answer": "        people.sort(key=lambda x: (-x[0], x[1]))\n        res = []\n        for p in people:\n            res.insert(p[1], p)\n        return res"
    },
    {
        "number": 407,
        "title": "Trapping Rain Water II",
        "difficulty": 2,
        "pass": 0,
        "answer": "        if not heightMap or not heightMap[0]:\n            return 0\n        m, n = len(heightMap), len(heightMap[0])\n        visited = [[False for _ in range(n)] for _ in range(m)]\n        res = 0\n        for i in range(m):\n            for j in range(n):\n                if not visited[i][j] and heightMap[i][j] > 0:\n                    visited[i][j] = True\n                    stack = [(i, j)]\n                    while stack:\n                        x, y = stack.pop()\n                        for dx, dy in ((-1, 0), (1, 0), (0, -1), (0, 1)):\n                            nx, ny = x + dx, y + dy\n                            if 0 <= nx < m and 0 <= ny < n and not visited[nx][ny] and heightMap[nx][ny] <= heightMap[x][y]:\n                                visited[nx][ny] = True\n                                stack.append((nx, ny))\n                    res += 1\n"
    },
    {
        "number": 407,
        "title": "Trapping Rain Water II",
        "difficulty": 2,
        "pass": 1,
        "answer": "        if not heightMap or not heightMap[0]:\n            return 0\n        m, n = len(heightMap), len(heightMap[0])\n        visited = [[False] * n for _ in range(m)]\n        res = 0\n        for i in range(m):\n            for j in range(n):\n                if i == 0 or j == 0 or i == m - 1 or j == n - 1:\n                    visited[i][j] = True\n                else:\n                    visited[i][j] = heightMap[i][j] > heightMap[i - 1][j] and heightMap[i][j] > heightMap[i + 1][j] and heightMap[i][j] > heightMap[i][j - 1] and heightMap[i][j] > heightMap[i][j + 1]\n        visited = [[False] * n for _ in range(m)]\n        for i in range(m):\n            for j in range(n):\n                if not visited[i][j] and heightMap[i][j] > 0:\n"
    },
    {
        "number": 407,
        "title": "Trapping Rain Water II",
        "difficulty": 2,
        "pass": 2,
        "answer": "        if not heightMap or not heightMap[0]:\n            return 0\n        \n        m, n = len(heightMap), len(heightMap[0])\n        visited = [[False for _ in range(n)] for _ in range(m)]\n        \n        res = 0\n        \n        for i in range(m):\n            for j in range(n):\n                if not visited[i][j] and heightMap[i][j] > 0:\n                    stack = [(i, j)]\n                    visited[i][j] = True\n                    while stack:\n                        x, y = stack.pop()\n                        for dx, dy in ((-1, 0), (1, 0), (0, -1), (0, 1)):\n                            nx, ny = x + dx, y + dy\n                            if 0 <= nx < m and 0 <= ny < n and not visited[nx][ny] and heightMap[nx][ny] > heightMap[x][y]:\n                                visited[nx][ny] = True\n                                stack.append((nx, ny))"
    },
    {
        "number": 407,
        "title": "Trapping Rain Water II",
        "difficulty": 2,
        "pass": 3,
        "answer": "        m = len(heightMap)\n        if m == 0:\n            return 0\n        n = len(heightMap[0])\n        if n == 0:\n            return 0\n        res = 0\n        visited = set()\n        for i in range(m):\n            visited.add((i, 0))\n            visited.add((i, n - 1))\n        for j in range(n):\n            visited.add((0, j))\n            visited.add((m - 1, j))\n        q = collections.deque()\n        for i in range(m):\n            for j in range(n):\n                if (i, j) not in visited:\n                    visited.add((i, j))\n                    q.append((i, j))\n                    while q:\n                        x, y = q.popleft()\n                        if x > 0 and (x - 1, y) not in visited:\n                            visited.add((x - 1, y))\n                            q.append((x - 1, y))\n                        if x < m - 1 and (x"
    },
    {
        "number": 407,
        "title": "Trapping Rain Water II",
        "difficulty": 2,
        "pass": 4,
        "answer": "        m = len(heightMap)\n        if m == 0:\n            return 0\n        n = len(heightMap[0])\n        if n == 0:\n            return 0\n        \n        visited = [[False for _ in range(n)] for _ in range(m)]\n        res = 0\n        for i in range(m):\n            for j in range(n):\n                if heightMap[i][j] == 0:\n                    visited[i][j] = True\n                else:\n                    visited[i][j] = False\n        \n        for i in range(m):\n            for j in range(n):\n                if visited[i][j]:\n                    continue\n                self.dfs(heightMap, visited, i, j)\n                res += 1\n        return res"
    },
    {
        "number": 407,
        "title": "Trapping Rain Water II",
        "difficulty": 2,
        "pass": 5,
        "answer": "        if not heightMap or not heightMap[0]:\n            return 0\n        m, n = len(heightMap), len(heightMap[0])\n        visited = [[0] * n for _ in range(m)]\n        res = 0\n        for i in range(m):\n            for j in range(n):\n                if i == 0 or j == 0 or i == m - 1 or j == n - 1:\n                    visited[i][j] = 1\n                else:\n                    visited[i][j] = visited[i - 1][j] + visited[i][j - 1] + visited[i][j + 1] + visited[i + 1][j] - heightMap[i][j]\n        for i in range(m):\n            for j in range(n):\n                if heightMap[i][j] < min(visited[i]):\n                    res += min(visited[i]) - heightMap[i][j]\n        return res"
    },
    {
        "number": 407,
        "title": "Trapping Rain Water II",
        "difficulty": 2,
        "pass": 6,
        "answer": "        m = len(heightMap)\n        if m == 0:\n            return 0\n        n = len(heightMap[0])\n        if n == 0:\n            return 0\n        \n        visited = [[False for _ in range(n)] for _ in range(m)]\n        \n        def dfs(i, j):\n            if i < 0 or i >= m or j < 0 or j >= n or visited[i][j] or heightMap[i][j] <= 0:\n                return 0\n            visited[i][j] = True\n            return 1 + dfs(i - 1, j) + dfs(i + 1, j) + dfs(i, j - 1) + dfs(i, j + 1)\n        \n        res = 0\n        for i in range(m):\n            for j in range(n):\n                if not visited[i][j]:\n                    res += dfs(i, j)\n        return res"
    },
    {
        "number": 407,
        "title": "Trapping Rain Water II",
        "difficulty": 2,
        "pass": 7,
        "answer": "        m = len(heightMap)\n        if m == 0:\n            return 0\n        n = len(heightMap[0])\n        if n == 0:\n            return 0\n        \n        visited = [[False for _ in range(n)] for _ in range(m)]\n        \n        res = 0\n        for i in range(m):\n            for j in range(n):\n                if not visited[i][j]:\n                    visited[i][j] = True\n                    self.dfs(heightMap, visited, i, j, m, n)\n                    res += 1\n        return res"
    },
    {
        "number": 407,
        "title": "Trapping Rain Water II",
        "difficulty": 2,
        "pass": 8,
        "answer": "        if not heightMap:\n            return 0\n        \n        m = len(heightMap)\n        n = len(heightMap[0])\n        \n        if m == 1 or n == 1:\n            return 0\n        \n        visited = [[False for _ in range(n)] for _ in range(m)]\n        res = 0\n        \n        for i in range(m):\n            if heightMap[i][0] > heightMap[i][n-1]:\n                visited[i][0] = True\n            else:\n                visited[i][0] = False\n        \n        for j in range(n):\n            if heightMap[0][j] > heightMap[m-1][j]:\n                visited[0][j] = True\n            else:\n                visited[0][j] = False\n        \n        for i in range(1, m):\n            for j in range(1, n):\n                if not visited[i][j]:\n                    visited[i][j] = True\n                    if heightMap[i][j] > heightMap["
    },
    {
        "number": 407,
        "title": "Trapping Rain Water II",
        "difficulty": 2,
        "pass": 9,
        "answer": "        if not heightMap or not heightMap[0]:\n            return 0\n        m, n = len(heightMap), len(heightMap[0])\n        visited = [[False for _ in range(n)] for _ in range(m)]\n        res = 0\n        for i in range(m):\n            for j in range(n):\n                if i == 0 or j == 0 or i == m - 1 or j == n - 1:\n                    visited[i][j] = True\n                    continue\n                if heightMap[i][j] <= heightMap[i - 1][j] and heightMap[i][j] <= heightMap[i + 1][j] and heightMap[i][j] <= heightMap[i][j - 1] and heightMap[i][j] <= heightMap[i][j + 1]:\n                    visited[i][j] = True\n                    continue\n                else:\n                    visited[i][j] = False\n        for i in range(m):\n            for j in range(n):\n                if not visited[i][j]:\n                    res +="
    },
    {
        "number": 409,
        "title": "Longest Palindrome",
        "difficulty": 0,
        "pass": 0,
        "answer": "        if not s:\n            return 0\n        n = len(s)\n        dp = [[False for _ in range(n)] for _ in range(n)]\n        for i in range(n):\n            dp[i][i] = True\n        for i in range(n-1, -1, -1):\n            for j in range(i+1, n):\n                if s[i] == s[j]:\n                    dp[i][j] = dp[i+1][j-1]\n                else:\n                    dp[i][j] = False\n        res = 0\n        for i in range(n):\n            for j in range(i, n):\n                if dp[i][j]:\n                    res = max(res, j-i+1)\n        return res"
    },
    {
        "number": 409,
        "title": "Longest Palindrome",
        "difficulty": 0,
        "pass": 1,
        "answer": "        if len(s) == 0:\n            return 0\n        if len(s) == 1:\n            return 1\n        dp = [[False for _ in range(len(s))] for _ in range(len(s))]\n        for i in range(len(s)):\n            dp[i][i] = True\n        for i in range(len(s)-1, -1, -1):\n            for j in range(i+1, len(s)):\n                if s[i] == s[j]:\n                    dp[i][j] = dp[i+1][j-1]\n                else:\n                    dp[i][j] = False\n        res = 0\n        for i in range(len(s)):\n            for j in range(i, len(s)):\n                if dp[i][j]:\n                    res = max(res, j-i+1)\n        return res"
    },
    {
        "number": 409,
        "title": "Longest Palindrome",
        "difficulty": 0,
        "pass": 2,
        "answer": "        if len(s) == 0:\n            return 0\n        if len(s) == 1:\n            return 1\n        \n        dp = [[0 for _ in range(len(s))] for _ in range(len(s))]\n        \n        for i in range(len(s)):\n            dp[i][i] = 1\n        \n        for i in range(len(s)-1, -1, -1):\n            for j in range(i+1, len(s)):\n                if s[i] == s[j]:\n                    dp[i][j] = dp[i+1][j-1] + 2\n                else:\n                    dp[i][j] = max(dp[i+1][j], dp[i][j-1])\n        \n        return dp[0][len(s)-1]"
    },
    {
        "number": 409,
        "title": "Longest Palindrome",
        "difficulty": 0,
        "pass": 3,
        "answer": "        \n        if len(s) <= 1:\n            return len(s)\n        \n        dp = [[False] * len(s) for _ in range(len(s))]\n        \n        for i in range(len(s)):\n            dp[i][i] = True\n        \n        for i in range(len(s)-1, -1, -1):\n            for j in range(i+1, len(s)):\n                if s[i] == s[j]:\n                    dp[i][j] = dp[i+1][j-1]\n                else:\n                    dp[i][j] = False\n        \n        max_len = 0\n        for i in range(len(s)):\n            for j in range(i, len(s)):\n                if dp[i][j] and j - i + 1 > max_len:\n                    max_len = j - i + 1\n        \n        return max_len"
    },
    {
        "number": 409,
        "title": "Longest Palindrome",
        "difficulty": 0,
        "pass": 4,
        "answer": "        if len(s) == 0:\n            return 0\n        if len(s) == 1:\n            return 1\n        if len(s) == 2:\n            if s[0] == s[1]:\n                return 2\n            else:\n                return 1\n        if len(s) == 3:\n            if s[0] == s[1] and s[1] == s[2]:\n                return 3\n            elif s[0] == s[1]:\n                return 2\n            elif s[1] == s[2]:\n                return 2\n            else:\n                return 1\n        if len(s) == 4:\n            if s[0] == s[1] and s[1] == s[2] and s[2] == s[3]:\n                return 4\n            elif s[0] == s[1]:\n                return 2\n            elif s[1] == s[2]:\n                return 2\n            elif s[2] == s[3]:\n                return 2\n            else:\n                return 1\n        if len(s"
    },
    {
        "number": 409,
        "title": "Longest Palindrome",
        "difficulty": 0,
        "pass": 5,
        "answer": "        if not s:\n            return 0\n        if len(s) == 1:\n            return 1\n        dp = [[0 for _ in range(len(s))] for _ in range(len(s))]\n        for i in range(len(s)):\n            dp[i][i] = 1\n        for i in range(len(s)-1, -1, -1):\n            for j in range(i+1, len(s)):\n                if s[i] == s[j]:\n                    dp[i][j] = dp[i+1][j-1] + 2\n                else:\n                    dp[i][j] = max(dp[i+1][j], dp[i][j-1])\n        return dp[0][len(s)-1]"
    },
    {
        "number": 409,
        "title": "Longest Palindrome",
        "difficulty": 0,
        "pass": 6,
        "answer": "        if not s:\n            return 0\n        if len(s) == 1:\n            return 1\n        if len(s) == 2:\n            if s[0] == s[1]:\n                return 2\n            else:\n                return 1\n        if len(s) == 3:\n            if s[0] == s[1] and s[1] == s[2]:\n                return 3\n            elif s[0] == s[1]:\n                return 2\n            elif s[1] == s[2]:\n                return 2\n            else:\n                return 1\n        if len(s) == 4:\n            if s[0] == s[1] and s[1] == s[2] and s[2] == s[3]:\n                return 4\n            elif s[0] == s[1]:\n                return 2\n            elif s[1] == s[2]:\n                return 2\n            elif s[2] == s[3]:\n                return 2\n            else:\n                return 1\n        if len(s) == 5:"
    },
    {
        "number": 409,
        "title": "Longest Palindrome",
        "difficulty": 0,
        "pass": 7,
        "answer": "        if not s:\n            return 0\n        n = len(s)\n        dp = [[False] * n for _ in range(n)]\n        for i in range(n):\n            dp[i][i] = True\n        for i in range(n - 1, -1, -1):\n            for j in range(i + 1, n):\n                if s[i] == s[j]:\n                    dp[i][j] = dp[i + 1][j - 1]\n                else:\n                    dp[i][j] = False\n        max_len = 0\n        for i in range(n):\n            for j in range(i, n):\n                if dp[i][j] and j - i + 1 > max_len:\n                    max_len = j - i + 1\n        return max_len"
    },
    {
        "number": 409,
        "title": "Longest Palindrome",
        "difficulty": 0,
        "pass": 8,
        "answer": "        if not s:\n            return 0\n        \n        n = len(s)\n        dp = [[False for _ in range(n)] for _ in range(n)]\n        for i in range(n):\n            dp[i][i] = True\n        \n        for i in range(n-1, -1, -1):\n            for j in range(i+1, n):\n                if s[i] == s[j]:\n                    dp[i][j] = dp[i+1][j-1]\n                else:\n                    dp[i][j] = False\n        \n        longest = 0\n        for i in range(n):\n            for j in range(i, n):\n                if dp[i][j] and j-i+1 > longest:\n                    longest = j-i+1\n        \n        return longest"
    },
    {
        "number": 409,
        "title": "Longest Palindrome",
        "difficulty": 0,
        "pass": 9,
        "answer": "        if len(s) == 0:\n            return 0\n        dp = [[False for _ in range(len(s))] for _ in range(len(s))]\n        for i in range(len(s)):\n            dp[i][i] = True\n        for i in range(len(s)-1, -1, -1):\n            for j in range(i+1, len(s)):\n                if s[i] == s[j]:\n                    dp[i][j] = dp[i+1][j-1]\n                else:\n                    dp[i][j] = False\n        res = 0\n        for i in range(len(s)):\n            for j in range(i, len(s)):\n                if dp[i][j] and j-i+1 > res:\n                    res = j-i+1\n        return res"
    },
    {
        "number": 410,
        "title": "Split Array Largest Sum",
        "difficulty": 2,
        "pass": 0,
        "answer": "        if not nums or len(nums) == 0:\n            return 0\n        n = len(nums)\n        dp = [[0] * n for _ in range(k + 1)]\n        dp[0][0] = nums[0]\n        for i in range(1, k + 1):\n            dp[i][0] = dp[i - 1][0] + nums[0]\n        for i in range(1, n):\n            for j in range(1, k + 1):\n                dp[j][i] = max(dp[j][i - 1], dp[j - 1][i - 1] + nums[i])\n        return dp[-1][-1]"
    },
    {
        "number": 410,
        "title": "Split Array Largest Sum",
        "difficulty": 2,
        "pass": 1,
        "answer": "        \n        def split(nums, k):\n            n = len(nums)\n            dp = [[0] * (k + 1) for _ in range(n + 1)]\n            for i in range(1, n + 1):\n                for j in range(1, k + 1):\n                    dp[i][j] = dp[i - 1][j]\n                    if j >= nums[i - 1]:\n                        dp[i][j] = max(dp[i][j], dp[i - 1][j - nums[i - 1]] + nums[i - 1])\n            return dp[n][k]\n        \n        return split(nums, k)"
    },
    {
        "number": 410,
        "title": "Split Array Largest Sum",
        "difficulty": 2,
        "pass": 2,
        "answer": "        n = len(nums)\n        if n == 0:\n            return 0\n        if n == 1:\n            return nums[0]\n        \n        nums.sort()\n        \n        dp = [[0]*k for _ in range(n+1)]\n        \n        for i in range(1, n+1):\n            for j in range(1, k+1):\n                if j == 1:\n                    dp[i][j] = nums[i-1]\n                else:\n                    dp[i][j] = max(dp[i-1][j], dp[i-1][j-1] + nums[i-1])\n        \n        return dp[n][k-1]"
    },
    {
        "number": 410,
        "title": "Split Array Largest Sum",
        "difficulty": 2,
        "pass": 3,
        "answer": "        \n        nums.sort()\n        n = len(nums)\n        if k == 1:\n            return sum(nums)\n        dp = [[0 for _ in range(k+1)] for _ in range(n+1)]\n        for i in range(1, n+1):\n            for j in range(1, k+1):\n                dp[i][j] = dp[i-1][j]\n                if j >= nums[i-1]:\n                    dp[i][j] = max(dp[i][j], dp[i-1][j-nums[i-1]]+nums[i-1])\n        return dp[-1][-1]"
    },
    {
        "number": 410,
        "title": "Split Array Largest Sum",
        "difficulty": 2,
        "pass": 4,
        "answer": "        n = len(nums)\n        if n == 0:\n            return 0\n        if n == 1:\n            return nums[0]\n        if k == 1:\n            return max(nums)\n        if k > n:\n            return 0\n        dp = [[0] * k for _ in range(n)]\n        dp[0][0] = nums[0]\n        for i in range(1, k):\n            dp[0][i] = dp[0][i - 1] + nums[0]\n        for i in range(1, n):\n            for j in range(k):\n                if j == 0:\n                    dp[i][j] = dp[i - 1][j] + nums[i]\n                else:\n                    dp[i][j] = max(dp[i - 1][j], dp[i - 1][j - 1]) + nums[i]\n        return max(dp[n - 1])"
    },
    {
        "number": 410,
        "title": "Split Array Largest Sum",
        "difficulty": 2,
        "pass": 5,
        "answer": "        n = len(nums)\n        dp = [[0] * n for _ in range(k + 1)]\n        for i in range(1, k + 1):\n            dp[i][0] = nums[0]\n            for j in range(1, n):\n                dp[i][j] = max(dp[i][j - 1], nums[j] + dp[i - 1][j - 1])\n        return dp[-1][-1]"
    },
    {
        "number": 410,
        "title": "Split Array Largest Sum",
        "difficulty": 2,
        "pass": 6,
        "answer": "        n = len(nums)\n        if n == 0:\n            return 0\n        if k == 1:\n            return sum(nums)\n        nums.sort(reverse=True)\n        dp = [[0 for _ in range(k + 1)] for _ in range(n + 1)]\n        for i in range(1, n + 1):\n            for j in range(1, k + 1):\n                dp[i][j] = dp[i - 1][j]\n                if j >= nums[i - 1]:\n                    dp[i][j] = max(dp[i][j], dp[i - 1][j - nums[i - 1]] + nums[i - 1])\n        return dp[n][k]"
    },
    {
        "number": 410,
        "title": "Split Array Largest Sum",
        "difficulty": 2,
        "pass": 7,
        "answer": "        n = len(nums)\n        if n == 0:\n            return 0\n        if n == 1:\n            return nums[0]\n        if k == 1:\n            return max(nums)\n        \n        dp = [[0]*k for _ in range(n)]\n        dp[0][0] = nums[0]\n        for i in range(1, k):\n            dp[0][i] = dp[0][i-1] + nums[0]\n        \n        for i in range(1, n):\n            for j in range(k):\n                if j == 0:\n                    dp[i][j] = dp[i-1][j] + nums[i]\n                else:\n                    dp[i][j] = max(dp[i-1][j], dp[i-1][j-1]) + nums[i]\n        \n        return max(dp[n-1])"
    },
    {
        "number": 410,
        "title": "Split Array Largest Sum",
        "difficulty": 2,
        "pass": 8,
        "answer": "        \n        dp = [[0] * (len(nums) + 1) for _ in range(k + 1)]\n        \n        for i in range(1, k + 1):\n            for j in range(1, len(nums) + 1):\n                dp[i][j] = dp[i][j - 1]\n                if j >= i:\n                    dp[i][j] = max(dp[i][j], dp[i - 1][j - i] + nums[j - 1])\n        \n        return dp[-1][-1]"
    },
    {
        "number": 410,
        "title": "Split Array Largest Sum",
        "difficulty": 2,
        "pass": 9,
        "answer": "        \n        n = len(nums)\n        if n == 0:\n            return 0\n        if k == 1:\n            return sum(nums)\n        \n        dp = [[0 for _ in range(k+1)] for _ in range(n+1)]\n        \n        for i in range(1, n+1):\n            for j in range(1, k+1):\n                dp[i][j] = dp[i-1][j]\n                if j >= nums[i-1]:\n                    dp[i][j] = max(dp[i][j], dp[i-1][j-nums[i-1]] + nums[i-1])\n        \n        return dp[n][k]"
    },
    {
        "number": 412,
        "title": "Fizz Buzz",
        "difficulty": 0,
        "pass": 0,
        "answer": "        ans = []\n        for i in range(1, n+1):\n            if i % 3 == 0 and i % 5 == 0:\n                ans.append(\"FizzBuzz\")\n            elif i % 3 == 0:\n                ans.append(\"Fizz\")\n            elif i % 5 == 0:\n                ans.append(\"Buzz\")\n            else:\n                ans.append(str(i))\n        return ans"
    },
    {
        "number": 412,
        "title": "Fizz Buzz",
        "difficulty": 0,
        "pass": 1,
        "answer": "        res = []\n        for i in range(1, n + 1):\n            if i % 3 == 0 and i % 5 == 0:\n                res.append(\"FizzBuzz\")\n            elif i % 3 == 0:\n                res.append(\"Fizz\")\n            elif i % 5 == 0:\n                res.append(\"Buzz\")\n            else:\n                res.append(str(i))\n        return res"
    },
    {
        "number": 412,
        "title": "Fizz Buzz",
        "difficulty": 0,
        "pass": 2,
        "answer": "        res = []\n        for i in range(1, n + 1):\n            if i % 3 == 0 and i % 5 == 0:\n                res.append(\"FizzBuzz\")\n            elif i % 3 == 0:\n                res.append(\"Fizz\")\n            elif i % 5 == 0:\n                res.append(\"Buzz\")\n            else:\n                res.append(str(i))\n        return res"
    },
    {
        "number": 412,
        "title": "Fizz Buzz",
        "difficulty": 0,
        "pass": 3,
        "answer": "        ans = []\n        for i in range(1, n+1):\n            if i % 3 == 0 and i % 5 == 0:\n                ans.append(\"FizzBuzz\")\n            elif i % 3 == 0:\n                ans.append(\"Fizz\")\n            elif i % 5 == 0:\n                ans.append(\"Buzz\")\n            else:\n                ans.append(str(i))\n        return ans"
    },
    {
        "number": 412,
        "title": "Fizz Buzz",
        "difficulty": 0,
        "pass": 4,
        "answer": "        ans = []\n        for i in range(1, n+1):\n            if i % 3 == 0 and i % 5 == 0:\n                ans.append(\"FizzBuzz\")\n            elif i % 3 == 0:\n                ans.append(\"Fizz\")\n            elif i % 5 == 0:\n                ans.append(\"Buzz\")\n            else:\n                ans.append(str(i))\n        return ans"
    },
    {
        "number": 412,
        "title": "Fizz Buzz",
        "difficulty": 0,
        "pass": 5,
        "answer": "        res = []\n        for i in range(1, n + 1):\n            if i % 3 == 0 and i % 5 == 0:\n                res.append(\"FizzBuzz\")\n            elif i % 3 == 0:\n                res.append(\"Fizz\")\n            elif i % 5 == 0:\n                res.append(\"Buzz\")\n            else:\n                res.append(str(i))\n        return res"
    },
    {
        "number": 412,
        "title": "Fizz Buzz",
        "difficulty": 0,
        "pass": 6,
        "answer": "        res = []\n        for i in range(1, n + 1):\n            if i % 3 == 0 and i % 5 == 0:\n                res.append(\"FizzBuzz\")\n            elif i % 3 == 0:\n                res.append(\"Fizz\")\n            elif i % 5 == 0:\n                res.append(\"Buzz\")\n            else:\n                res.append(str(i))\n        return res"
    },
    {
        "number": 412,
        "title": "Fizz Buzz",
        "difficulty": 0,
        "pass": 7,
        "answer": "        res = []\n        for i in range(1, n + 1):\n            if i % 3 == 0 and i % 5 == 0:\n                res.append(\"FizzBuzz\")\n            elif i % 3 == 0:\n                res.append(\"Fizz\")\n            elif i % 5 == 0:\n                res.append(\"Buzz\")\n            else:\n                res.append(str(i))\n        return res"
    },
    {
        "number": 412,
        "title": "Fizz Buzz",
        "difficulty": 0,
        "pass": 8,
        "answer": "        res = []\n        for i in range(1, n + 1):\n            if i % 3 == 0 and i % 5 == 0:\n                res.append(\"FizzBuzz\")\n            elif i % 3 == 0:\n                res.append(\"Fizz\")\n            elif i % 5 == 0:\n                res.append(\"Buzz\")\n            else:\n                res.append(str(i))\n        return res"
    },
    {
        "number": 412,
        "title": "Fizz Buzz",
        "difficulty": 0,
        "pass": 9,
        "answer": "        ans = []\n        for i in range(1, n + 1):\n            if i % 3 == 0 and i % 5 == 0:\n                ans.append(\"FizzBuzz\")\n            elif i % 3 == 0:\n                ans.append(\"Fizz\")\n            elif i % 5 == 0:\n                ans.append(\"Buzz\")\n            else:\n                ans.append(str(i))\n        return ans"
    },
    {
        "number": 413,
        "title": "Arithmetic Slices",
        "difficulty": 1,
        "pass": 0,
        "answer": "        n = len(nums)\n        if n < 3:\n            return 0\n        dp = [1] * n\n        for i in range(1, n):\n            if nums[i] - nums[i - 1] == nums[i - 1] - nums[i - 2]:\n                dp[i] = dp[i - 1] + 1\n        return sum(dp)"
    },
    {
        "number": 413,
        "title": "Arithmetic Slices",
        "difficulty": 1,
        "pass": 1,
        "answer": "        if not nums:\n            return 0\n        n = len(nums)\n        dp = [1] * n\n        for i in range(1, n):\n            if nums[i] - nums[i - 1] == nums[i - 1] - nums[i - 2]:\n                dp[i] = dp[i - 1] + 1\n        return sum(dp)"
    },
    {
        "number": 413,
        "title": "Arithmetic Slices",
        "difficulty": 1,
        "pass": 2,
        "answer": "        n = len(nums)\n        if n < 3:\n            return 0\n        dp = [1] * n\n        for i in range(1, n):\n            if nums[i] - nums[i - 1] == nums[i - 1] - nums[i - 2]:\n                dp[i] = dp[i - 1] + 1\n        return sum(dp)"
    },
    {
        "number": 413,
        "title": "Arithmetic Slices",
        "difficulty": 1,
        "pass": 3,
        "answer": "        if not nums:\n            return 0\n        n = len(nums)\n        dp = [1] * n\n        for i in range(1, n):\n            if nums[i] - nums[i - 1] == nums[i - 1] - nums[i - 2]:\n                dp[i] = dp[i - 1] + 1\n        return sum(dp)"
    },
    {
        "number": 413,
        "title": "Arithmetic Slices",
        "difficulty": 1,
        "pass": 4,
        "answer": "        if not nums:\n            return 0\n        if len(nums) == 1:\n            return 0\n        if len(nums) == 2:\n            if nums[1] - nums[0] == nums[0] - nums[1]:\n                return 1\n            else:\n                return 0\n        if len(nums) == 3:\n            if nums[1] - nums[0] == nums[0] - nums[1] and nums[2] - nums[1] == nums[1] - nums[2]:\n                return 1\n            else:\n                return 0\n        dp = [0] * len(nums)\n        dp[0] = 1\n        for i in range(1, len(nums)):\n            if nums[i] - nums[i - 1] == nums[i - 1] - nums[i - 1]:\n                dp[i] = dp[i - 1] + 1\n            else:\n                dp[i] = 0\n        return sum(dp)"
    },
    {
        "number": 413,
        "title": "Arithmetic Slices",
        "difficulty": 1,
        "pass": 5,
        "answer": "        if len(nums) < 3:\n            return 0\n        dp = [0] * len(nums)\n        dp[0] = 1\n        for i in range(1, len(nums)):\n            if nums[i] - nums[i - 1] == nums[i - 1] - nums[i - 2]:\n                dp[i] = dp[i - 1] + 1\n        return sum(dp)"
    },
    {
        "number": 413,
        "title": "Arithmetic Slices",
        "difficulty": 1,
        "pass": 6,
        "answer": "        if not nums:\n            return 0\n        if len(nums) == 1:\n            return 1\n        if len(nums) == 2:\n            return 1 if nums[1] - nums[0] == nums[0] - nums[1] else 0\n        dp = [1] * len(nums)\n        for i in range(1, len(nums)):\n            if nums[i] - nums[i-1] == nums[i-1] - nums[i-2]:\n                dp[i] = dp[i-1] + 1\n        return sum(dp)"
    },
    {
        "number": 413,
        "title": "Arithmetic Slices",
        "difficulty": 1,
        "pass": 7,
        "answer": "        n = len(nums)\n        if n == 0:\n            return 0\n        if n == 1:\n            return 0\n        if n == 2:\n            return 1 if nums[1] - nums[0] == nums[0] - nums[1] else 0"
    },
    {
        "number": 413,
        "title": "Arithmetic Slices",
        "difficulty": 1,
        "pass": 8,
        "answer": "        n = len(nums)\n        if n < 3:\n            return 0\n        dp = [1] * n\n        for i in range(1, n):\n            if nums[i] - nums[i - 1] == nums[i - 1] - nums[i - 2]:\n                dp[i] = dp[i - 1] + 1\n        return sum(dp)"
    },
    {
        "number": 413,
        "title": "Arithmetic Slices",
        "difficulty": 1,
        "pass": 9,
        "answer": "        if len(nums) < 3:\n            return 0\n        dp = [0] * len(nums)\n        dp[0] = 1\n        for i in range(1, len(nums)):\n            if nums[i] - nums[i-1] == nums[i-1] - nums[i-2]:\n                dp[i] = dp[i-1] + 1\n        return sum(dp)"
    },
    {
        "number": 414,
        "title": "Third Maximum Number",
        "difficulty": 0,
        "pass": 0,
        "answer": "        nums.sort()\n        if len(nums) < 3:\n            return max(nums)\n        else:\n            return nums[-3]"
    },
    {
        "number": 414,
        "title": "Third Maximum Number",
        "difficulty": 0,
        "pass": 1,
        "answer": "        nums = list(set(nums))\n        nums.sort()\n        if len(nums) < 3:\n            return nums[-1]\n        else:\n            return nums[-3]"
    },
    {
        "number": 414,
        "title": "Third Maximum Number",
        "difficulty": 0,
        "pass": 2,
        "answer": "        nums = set(nums)\n        if len(nums) < 3:\n            return max(nums)\n        else:\n            return sorted(nums)[-3]"
    },
    {
        "number": 414,
        "title": "Third Maximum Number",
        "difficulty": 0,
        "pass": 3,
        "answer": "        nums = list(set(nums))\n        if len(nums) < 3:\n            return max(nums)\n        nums.sort()\n        return nums[-3]"
    },
    {
        "number": 414,
        "title": "Third Maximum Number",
        "difficulty": 0,
        "pass": 4,
        "answer": "        nums = list(set(nums))\n        if len(nums) < 3:\n            return max(nums)\n        else:\n            nums.sort()\n            return nums[-3]"
    },
    {
        "number": 414,
        "title": "Third Maximum Number",
        "difficulty": 0,
        "pass": 5,
        "answer": "        if len(nums) < 3:\n            return max(nums)\n        nums = sorted(nums)\n        return nums[-3] if nums[-3]!= nums[-2] and nums[-2]!= nums[-1] else nums[-1]"
    },
    {
        "number": 414,
        "title": "Third Maximum Number",
        "difficulty": 0,
        "pass": 6,
        "answer": "        nums = set(nums)\n        if len(nums) < 3:\n            return max(nums)\n        nums = list(nums)\n        nums.sort()\n        return nums[-3]"
    },
    {
        "number": 414,
        "title": "Third Maximum Number",
        "difficulty": 0,
        "pass": 7,
        "answer": "        nums = set(nums)\n        if len(nums) < 3:\n            return max(nums)\n        nums = list(nums)\n        nums.sort()\n        return nums[-3]"
    },
    {
        "number": 414,
        "title": "Third Maximum Number",
        "difficulty": 0,
        "pass": 8,
        "answer": "        if len(set(nums)) < 3:\n            return max(nums)\n        else:\n            nums.sort()\n            return nums[-3]"
    },
    {
        "number": 414,
        "title": "Third Maximum Number",
        "difficulty": 0,
        "pass": 9,
        "answer": "        nums_set = set(nums)\n        if len(nums_set) < 3:\n            return max(nums_set)\n        else:\n            return sorted(nums_set)[-3]"
    },
    {
        "number": 415,
        "title": "Add Strings",
        "difficulty": 0,
        "pass": 0,
        "answer": "        if not num1:\n            return num2\n        if not num2:\n            return num1"
    },
    {
        "number": 415,
        "title": "Add Strings",
        "difficulty": 0,
        "pass": 1,
        "answer": "        if num1 == \"0\" and num2 == \"0\":\n            return \"0\"\n        if num1 == \"0\" and num2!= \"0\":\n            return num2\n        if num1!= \"0\" and num2 == \"0\":\n            return num1\n        if len(num1) > len(num2):\n            num2 = \"0\" * (len(num1) - len(num2)) + num2\n        if len(num1) < len(num2):\n            num1 = \"0\" * (len(num2) - len(num1)) + num1\n        num1 = list(num1)\n        num2 = list(num2)\n        i = len(num1) - 1\n        j = len(num2) - 1\n        carry = 0\n        res = \"\"\n        while i >= 0 or j >= 0:\n            a = int(num1[i]) if i >= 0 else 0\n            b = int(num2[j]) if j >= 0 else 0\n            s = a + b + carry\n            res = str"
    },
    {
        "number": 415,
        "title": "Add Strings",
        "difficulty": 0,
        "pass": 2,
        "answer": "        n1 = int(num1[::-1])\n        n2 = int(num2[::-1])\n        return str(n1 + n2)"
    },
    {
        "number": 415,
        "title": "Add Strings",
        "difficulty": 0,
        "pass": 3,
        "answer": "        if not num1:\n            return num2\n        if not num2:\n            return num1\n        res = \"\"\n        i = len(num1) - 1\n        j = len(num2) - 1\n        carry = 0\n        while i >= 0 or j >= 0 or carry:\n            if i >= 0:\n                carry += int(num1[i])\n                i -= 1\n            if j >= 0:\n                carry += int(num2[j])\n                j -= 1\n            res = str(carry % 10) + res\n            carry //= 10\n        return res"
    },
    {
        "number": 415,
        "title": "Add Strings",
        "difficulty": 0,
        "pass": 4,
        "answer": "        num1 = num1[::-1]\n        num2 = num2[::-1]\n        i = len(num1) - 1\n        j = len(num2) - 1\n        res = \"\"\n        carry = 0\n        while i >= 0 or j >= 0 or carry:\n            if i >= 0:\n                carry += ord(num1[i]) - ord('0')\n                i -= 1\n            if j >= 0:\n                carry += ord(num2[j]) - ord('0')\n                j -= 1\n            res = str(carry % 10) + res\n            carry //= 10\n        return res[::-1]"
    },
    {
        "number": 415,
        "title": "Add Strings",
        "difficulty": 0,
        "pass": 5,
        "answer": "        if not num1:\n            return num2\n        if not num2:\n            return num1"
    },
    {
        "number": 415,
        "title": "Add Strings",
        "difficulty": 0,
        "pass": 6,
        "answer": "        if len(num1) > len(num2):\n            num1, num2 = num2, num1\n        res = \"\"\n        i = len(num1) - 1\n        j = len(num2) - 1\n        carry = 0\n        while i >= 0 or j >= 0 or carry:\n            if i >= 0:\n                carry += ord(num1[i]) - ord('0')\n                i -= 1\n            if j >= 0:\n                carry += ord(num2[j]) - ord('0')\n                j -= 1\n            res = str(carry % 10) + res\n            carry //= 10\n        return res"
    },
    {
        "number": 415,
        "title": "Add Strings",
        "difficulty": 0,
        "pass": 7,
        "answer": "        res = \"\"\n        i = len(num1) - 1\n        j = len(num2) - 1\n        carry = 0\n        while i >= 0 or j >= 0 or carry:\n            if i >= 0:\n                carry += ord(num1[i]) - ord('0')\n                i -= 1\n            if j >= 0:\n                carry += ord(num2[j]) - ord('0')\n                j -= 1\n            res = str(carry % 10) + res\n            carry //= 10\n        return res"
    },
    {
        "number": 415,
        "title": "Add Strings",
        "difficulty": 0,
        "pass": 8,
        "answer": "        if not num1:\n            return num2\n        if not num2:\n            return num1\n        if len(num1) < len(num2):\n            num1, num2 = num2, num1\n        carry = 0\n        res = []\n        for i in range(len(num1)-1, -1, -1):\n            tmp = int(num1[i]) + int(num2[i]) + carry\n            if tmp >= 10:\n                carry = 1\n                tmp -= 10\n            else:\n                carry = 0\n            res.append(str(tmp))\n        if carry:\n            res.append(str(carry))\n        return \"\".join(reversed(res))"
    },
    {
        "number": 415,
        "title": "Add Strings",
        "difficulty": 0,
        "pass": 9,
        "answer": "        num1, num2 = num1[::-1], num2[::-1]\n        carry = 0\n        res = ''\n        while num1 or num2 or carry:\n            if num1:\n                carry += ord(num1.pop()) - ord('0')\n            if num2:\n                carry += ord(num2.pop()) - ord('0')\n            res += str(carry % 10)\n            carry //= 10\n        return res[::-1]"
    },
    {
        "number": 416,
        "title": "Partition Equal Subset Sum",
        "difficulty": 1,
        "pass": 0,
        "answer": "        \n        def can_partition_helper(nums, curr_sum, target):\n            if curr_sum == target:\n                return True\n            if curr_sum > target:\n                return False\n            \n            for i in range(len(nums)):\n                if can_partition_helper(nums[i+1:], curr_sum + nums[i], target):\n                    return True\n            return False\n        \n        return can_partition_helper(nums, 0, sum(nums)//2)\n        \nclass Solution:\n    def canPartition(self, nums: List[int]) -> bool:\n        \"\"\"\n        Given an integer array nums, return true if you can partition the array into two subsets such that the sum of the elements in both subsets is equal or false otherwise.\n        Example 1:\n        Input: nums = [1,5,11,5]\n        Output: true\n        Explanation: The array can be partitioned as [1, 5, 5] and [11].\n        Example 2"
    },
    {
        "number": 416,
        "title": "Partition Equal Subset Sum",
        "difficulty": 1,
        "pass": 1,
        "answer": "        \n        if len(nums) == 0:\n            return False\n        if len(nums) == 1:\n            return True if nums[0] == 0 else False\n        if sum(nums) % 2!= 0:\n            return False\n        target = sum(nums) // 2\n        dp = [[False for _ in range(target + 1)] for _ in range(len(nums))]\n        for i in range(len(nums)):\n            dp[i][0] = True\n        for i in range(1, target + 1):\n            dp[0][i] = nums[0] == i\n        for i in range(1, len(nums)):\n            for j in range(1, target + 1):\n                if j >= nums[i]:\n                    dp[i][j] = dp[i - 1][j] or dp[i - 1][j - nums[i]]\n                else:\n                    dp[i][j] = dp[i - 1][j]\n        return dp[-1][-"
    },
    {
        "number": 416,
        "title": "Partition Equal Subset Sum",
        "difficulty": 1,
        "pass": 2,
        "answer": "        if not nums:\n            return False\n        total = sum(nums)\n        if total % 2!= 0:\n            return False\n        target = total // 2\n        dp = [[False for _ in range(target + 1)] for _ in range(len(nums))]\n        for i in range(len(nums)):\n            dp[i][0] = True\n        for i in range(1, target + 1):\n            dp[0][i] = nums[0] == i\n        for i in range(1, len(nums)):\n            for j in range(1, target + 1):\n                if j >= nums[i]:\n                    dp[i][j] = dp[i - 1][j] or dp[i - 1][j - nums[i]]\n                else:\n                    dp[i][j] = dp[i - 1][j]\n        return dp[len(nums) - 1][target]"
    },
    {
        "number": 416,
        "title": "Partition Equal Subset Sum",
        "difficulty": 1,
        "pass": 3,
        "answer": "        if len(nums) < 2:\n            return False\n        total = sum(nums)\n        if total % 2!= 0:\n            return False\n        target = total // 2\n        dp = [[False for _ in range(target + 1)] for _ in range(len(nums))]\n        for i in range(len(nums)):\n            dp[i][0] = True\n        for i in range(1, target + 1):\n            dp[0][i] = nums[0] == i\n        for i in range(1, len(nums)):\n            for j in range(1, target + 1):\n                if nums[i] <= j:\n                    dp[i][j] = dp[i - 1][j] or dp[i - 1][j - nums[i]]\n                else:\n                    dp[i][j] = dp[i - 1][j]\n        return dp[len(nums) - 1][target]"
    },
    {
        "number": 416,
        "title": "Partition Equal Subset Sum",
        "difficulty": 1,
        "pass": 4,
        "answer": "        \n        s = sum(nums)\n        if s % 2!= 0:\n            return False\n        \n        n = len(nums)\n        dp = [[False for _ in range(s//2+1)] for _ in range(n+1)]\n        \n        for i in range(n+1):\n            dp[i][0] = True\n        \n        for i in range(1, n+1):\n            for j in range(1, s//2+1):\n                if j >= nums[i-1]:\n                    dp[i][j] = dp[i-1][j] or dp[i-1][j-nums[i-1]]\n                else:\n                    dp[i][j] = dp[i-1][j]\n        \n        return dp[n][s//2]"
    },
    {
        "number": 416,
        "title": "Partition Equal Subset Sum",
        "difficulty": 1,
        "pass": 5,
        "answer": "        \n        if not nums:\n            return False\n        \n        s = sum(nums)\n        if s % 2!= 0:\n            return False\n        \n        target = s // 2\n        dp = [[False for _ in range(target + 1)] for _ in range(len(nums))]\n        \n        for i in range(len(nums)):\n            dp[i][0] = True\n        \n        for i in range(1, target + 1):\n            dp[0][i] = nums[0] == i\n        \n        for i in range(1, len(nums)):\n            for j in range(1, target + 1):\n                if j >= nums[i]:\n                    dp[i][j] = dp[i - 1][j] or dp[i - 1][j - nums[i]]\n                else:\n                    dp[i][j] = dp[i - 1][j]\n        \n        return dp[len(nums) - 1][target]\n        \n        \n        \n        \n        "
    },
    {
        "number": 416,
        "title": "Partition Equal Subset Sum",
        "difficulty": 1,
        "pass": 6,
        "answer": "        total = sum(nums)\n        if total % 2!= 0:\n            return False\n        target = total // 2\n        dp = [[False] * (target + 1) for _ in range(len(nums) + 1)]\n        for i in range(len(nums) + 1):\n            dp[i][0] = True\n        for i in range(1, len(nums) + 1):\n            for j in range(1, target + 1):\n                if j >= nums[i - 1]:\n                    dp[i][j] = dp[i - 1][j] or dp[i - 1][j - nums[i - 1]]\n                else:\n                    dp[i][j] = dp[i - 1][j]\n        return dp[len(nums)][target]"
    },
    {
        "number": 416,
        "title": "Partition Equal Subset Sum",
        "difficulty": 1,
        "pass": 7,
        "answer": "        if len(nums) == 0:\n            return False\n        if sum(nums) % 2!= 0:\n            return False\n        nums.sort(reverse=True)\n        target = sum(nums) // 2\n        dp = [[False for _ in range(target + 1)] for _ in range(len(nums))]\n        for i in range(len(nums)):\n            dp[i][0] = True\n        for i in range(1, target + 1):\n            dp[0][i] = nums[0] == i\n        for i in range(1, len(nums)):\n            for j in range(1, target + 1):\n                if j >= nums[i]:\n                    dp[i][j] = dp[i - 1][j] or dp[i - 1][j - nums[i]]\n                else:\n                    dp[i][j] = dp[i - 1][j]\n        return dp[len(nums) - 1][target]"
    },
    {
        "number": 416,
        "title": "Partition Equal Subset Sum",
        "difficulty": 1,
        "pass": 8,
        "answer": "        if len(nums) == 0:\n            return False\n        if sum(nums) % 2 == 1:\n            return False\n        target = sum(nums) // 2\n        dp = [[False for _ in range(target + 1)] for _ in range(len(nums))]\n        for i in range(len(nums)):\n            dp[i][0] = True\n        for j in range(1, target + 1):\n            dp[0][j] = nums[0] == j\n        for i in range(1, len(nums)):\n            for j in range(1, target + 1):\n                if j >= nums[i]:\n                    dp[i][j] = dp[i - 1][j] or dp[i - 1][j - nums[i]]\n                else:\n                    dp[i][j] = dp[i - 1][j]\n        return dp[len(nums) - 1][target]"
    },
    {
        "number": 416,
        "title": "Partition Equal Subset Sum",
        "difficulty": 1,
        "pass": 9,
        "answer": "        total = sum(nums)\n        if total % 2!= 0:\n            return False\n        target = total // 2\n        n = len(nums)\n        dp = [[False for _ in range(target + 1)] for _ in range(n + 1)]\n        for i in range(n + 1):\n            dp[i][0] = True\n        for i in range(1, n + 1):\n            for j in range(1, target + 1):\n                if nums[i - 1] <= j:\n                    dp[i][j] = dp[i - 1][j] or dp[i - 1][j - nums[i - 1]]\n                else:\n                    dp[i][j] = dp[i - 1][j]\n        return dp[n][target]"
    },
    {
        "number": 417,
        "title": "Pacific Atlantic Water Flow",
        "difficulty": 1,
        "pass": 0,
        "answer": "        m, n = len(heights), len(heights[0])\n        pacific = [[False] * n for _ in range(m)]\n        atlantic = [[False] * n for _ in range(m)]\n        for i in range(m):\n            pacific[i][0] = True\n            atlantic[i][n - 1] = True\n        for j in range(n):\n            pacific[0][j] = True\n            atlantic[m - 1][j] = True\n        for i in range(1, m):\n            for j in range(1, n):\n                pacific[i][j] = pacific[i - 1][j] or pacific[i][j - 1]\n                atlantic[i][j] = atlantic[i - 1][j] or atlantic[i][j - 1]\n        res = []\n        for i in range(m):\n            for j in range(n):\n                if pacific[i][j] and atlantic[i][j]:\n                    res.append([i, j])\n        return"
    },
    {
        "number": 417,
        "title": "Pacific Atlantic Water Flow",
        "difficulty": 1,
        "pass": 1,
        "answer": "        m, n = len(heights), len(heights[0])\n        pacific = [[False] * n for _ in range(m)]\n        atlantic = [[False] * n for _ in range(m)]\n        for i in range(m):\n            pacific[i][0] = True\n            atlantic[i][n - 1] = True\n        for j in range(n):\n            pacific[0][j] = True\n            atlantic[m - 1][j] = True\n        for i in range(1, m):\n            for j in range(1, n):\n                pacific[i][j] = pacific[i - 1][j] or pacific[i][j - 1]\n                atlantic[i][j] = atlantic[i - 1][j] or atlantic[i][j - 1]\n        res = []\n        for i in range(m):\n            for j in range(n):\n                if pacific[i][j] and atlantic[i][j]:\n                    res.append([i, j])\n        return"
    },
    {
        "number": 417,
        "title": "Pacific Atlantic Water Flow",
        "difficulty": 1,
        "pass": 2,
        "answer": "        m, n = len(heights), len(heights[0])\n        pacific = [[False] * n for _ in range(m)]\n        atlantic = [[False] * n for _ in range(m)]"
    },
    {
        "number": 417,
        "title": "Pacific Atlantic Water Flow",
        "difficulty": 1,
        "pass": 3,
        "answer": "        m, n = len(heights), len(heights[0])\n        \n        def bfs(i, j):\n            visited = set()\n            q = deque([(i, j)])\n            while q:\n                x, y = q.popleft()\n                visited.add((x, y))\n                for dx, dy in ((-1, 0), (1, 0), (0, -1), (0, 1)):\n                    nx, ny = x + dx, y + dy\n                    if 0 <= nx < m and 0 <= ny < n and (nx, ny) not in visited and heights[nx][ny] <= heights[x][y]:\n                        q.append((nx, ny))\n            return visited\n        \n        pacific = set()\n        atlantic = set()\n        for i in range(m):\n            for j in range(n):\n                if (i, j) not in pacific and (i, j) not in atlantic:\n                    pacific |= bfs(i, j)"
    },
    {
        "number": 417,
        "title": "Pacific Atlantic Water Flow",
        "difficulty": 1,
        "pass": 4,
        "answer": "        m, n = len(heights), len(heights[0])\n        p_visited = set()\n        a_visited = set()"
    },
    {
        "number": 417,
        "title": "Pacific Atlantic Water Flow",
        "difficulty": 1,
        "pass": 5,
        "answer": "        m, n = len(heights), len(heights[0])\n        pacific = [[False] * n for _ in range(m)]\n        atlantic = [[False] * n for _ in range(m)]\n        for i in range(m):\n            pacific[i][0] = True\n            atlantic[i][n - 1] = True\n        for j in range(n):\n            pacific[0][j] = True\n            atlantic[m - 1][j] = True\n        for i in range(1, m):\n            for j in range(1, n):\n                pacific[i][j] = pacific[i - 1][j] or pacific[i][j - 1]\n                atlantic[i][j] = atlantic[i - 1][j] or atlantic[i][j - 1]\n        res = []\n        for i in range(m):\n            for j in range(n):\n                if pacific[i][j] and atlantic[i][j]:\n                    res.append([i, j])\n        return"
    },
    {
        "number": 417,
        "title": "Pacific Atlantic Water Flow",
        "difficulty": 1,
        "pass": 6,
        "answer": "        m, n = len(heights), len(heights[0])\n        pacific = [[False] * n for _ in range(m)]\n        atlantic = [[False] * n for _ in range(m)]\n        for i in range(m):\n            pacific[i][0] = True\n            atlantic[i][n - 1] = True\n        for j in range(n):\n            pacific[0][j] = True\n            atlantic[m - 1][j] = True\n        for i in range(1, m):\n            for j in range(1, n):\n                pacific[i][j] = pacific[i - 1][j] or pacific[i][j - 1]\n                atlantic[i][j] = atlantic[i - 1][j] or atlantic[i][j - 1]\n        res = []\n        for i in range(m):\n            for j in range(n):\n                if pacific[i][j] and atlantic[i][j]:\n                    res.append([i, j])\n        return"
    },
    {
        "number": 417,
        "title": "Pacific Atlantic Water Flow",
        "difficulty": 1,
        "pass": 7,
        "answer": "        m, n = len(heights), len(heights[0])\n        pacific = [[False] * n for _ in range(m)]\n        atlantic = [[False] * n for _ in range(m)]\n        \n        for i in range(m):\n            pacific[i][0] = True\n            atlantic[i][n-1] = True\n        \n        for j in range(n):\n            pacific[0][j] = True\n            atlantic[m-1][j] = True\n        \n        for i in range(1, m):\n            for j in range(1, n):\n                pacific[i][j] = pacific[i-1][j] or pacific[i][j-1]\n                atlantic[i][j] = atlantic[i-1][j] or atlantic[i][j-1]\n        \n        res = []\n        for i in range(m):\n            for j in range(n):\n                if pacific[i][j] and atlantic[i][j]:\n                    res.append"
    },
    {
        "number": 417,
        "title": "Pacific Atlantic Water Flow",
        "difficulty": 1,
        "pass": 8,
        "answer": "        m, n = len(heights), len(heights[0])\n        visited = [[False for _ in range(n)] for _ in range(m)]\n        pacific = [[False for _ in range(n)] for _ in range(m)]\n        atlantic = [[False for _ in range(n)] for _ in range(m)]\n        \n        def dfs(r, c):\n            if r < 0 or r >= m or c < 0 or c >= n or visited[r][c] or heights[r][c] <= 0:\n                return\n            \n            visited[r][c] = True\n            pacific[r][c] = True\n            dfs(r+1, c)\n            dfs(r-1, c)\n            dfs(r, c+1)\n            dfs(r, c-1)\n            \n        for r in range(m):\n            dfs(r, 0)\n            dfs(r, n-1)\n            \n        for c in range(n):\n            dfs(0, c)\n            "
    },
    {
        "number": 417,
        "title": "Pacific Atlantic Water Flow",
        "difficulty": 1,
        "pass": 9,
        "answer": "        m, n = len(heights), len(heights[0])\n        pacific = [[False] * n for _ in range(m)]\n        atlantic = [[False] * n for _ in range(m)]\n        for i in range(m):\n            pacific[i][0] = True\n            atlantic[i][n - 1] = True\n        for j in range(n):\n            pacific[0][j] = True\n            atlantic[m - 1][j] = True\n        for i in range(1, m):\n            for j in range(1, n):\n                pacific[i][j] = pacific[i - 1][j] or pacific[i][j - 1]\n                atlantic[i][j] = atlantic[i - 1][j] or atlantic[i][j - 1]\n        res = []\n        for i in range(m):\n            for j in range(n):\n                if pacific[i][j] and atlantic[i][j]:\n                    res.append([i, j])\n        return"
    },
    {
        "number": 419,
        "title": "Battleships in a Board",
        "difficulty": 1,
        "pass": 0,
        "answer": "        if not board:\n            return 0\n        \n        rows = len(board)\n        cols = len(board[0])\n        \n        count = 0\n        \n        for i in range(rows):\n            for j in range(cols):\n                if board[i][j] == 'X':\n                    count += 1\n                    if i > 0 and board[i-1][j] == 'X':\n                        continue\n                    if j > 0 and board[i][j-1] == 'X':\n                        continue\n                    if i < rows-1 and board[i+1][j] == 'X':\n                        continue\n                    if j < cols-1 and board[i][j+1] == 'X':\n                        continue\n                    \n        return count"
    },
    {
        "number": 419,
        "title": "Battleships in a Board",
        "difficulty": 1,
        "pass": 1,
        "answer": "        count = 0\n        for i in range(len(board)):\n            for j in range(len(board[0])):\n                if board[i][j] == 'X':\n                    if i > 0 and board[i-1][j] == 'X':\n                        continue\n                    if j > 0 and board[i][j-1] == 'X':\n                        continue\n                    count += 1\n        return count"
    },
    {
        "number": 419,
        "title": "Battleships in a Board",
        "difficulty": 1,
        "pass": 2,
        "answer": "        if not board:\n            return 0\n        m, n = len(board), len(board[0])\n        count = 0\n        for i in range(m):\n            for j in range(n):\n                if board[i][j] == 'X':\n                    if i == 0 or board[i - 1][j]!= 'X':\n                        count += 1\n                    if j == 0 or board[i][j - 1]!= 'X':\n                        count += 1\n        return count"
    },
    {
        "number": 419,
        "title": "Battleships in a Board",
        "difficulty": 1,
        "pass": 3,
        "answer": "        if not board:\n            return 0\n        m, n = len(board), len(board[0])\n        count = 0\n        for i in range(m):\n            for j in range(n):\n                if board[i][j] == 'X':\n                    if i > 0 and board[i-1][j] == 'X':\n                        continue\n                    if j > 0 and board[i][j-1] == 'X':\n                        continue\n                    count += 1\n        return count"
    },
    {
        "number": 419,
        "title": "Battleships in a Board",
        "difficulty": 1,
        "pass": 4,
        "answer": "        \n        def dfs(i, j, board):\n            if i < 0 or i >= len(board) or j < 0 or j >= len(board[0]) or board[i][j]!= 'X':\n                return\n            \n            board[i][j] = '.'\n            dfs(i+1, j, board)\n            dfs(i-1, j, board)\n            dfs(i, j+1, board)\n            dfs(i, j-1, board)\n        \n        count = 0\n        for i in range(len(board)):\n            for j in range(len(board[0])):\n                if board[i][j] == 'X':\n                    dfs(i, j, board)\n                    count += 1\n        return count"
    },
    {
        "number": 419,
        "title": "Battleships in a Board",
        "difficulty": 1,
        "pass": 5,
        "answer": "        \n        if not board:\n            return 0\n        \n        m = len(board)\n        n = len(board[0])\n        \n        count = 0\n        \n        for i in range(m):\n            for j in range(n):\n                if board[i][j] == 'X':\n                    if i > 0 and board[i-1][j] == 'X':\n                        continue\n                    if j > 0 and board[i][j-1] == 'X':\n                        continue\n                    count += 1\n        \n        return count"
    },
    {
        "number": 419,
        "title": "Battleships in a Board",
        "difficulty": 1,
        "pass": 6,
        "answer": "        if not board: return 0\n        m, n = len(board), len(board[0])\n        count = 0\n        for i in range(m):\n            for j in range(n):\n                if board[i][j] == 'X':\n                    if i == 0 or board[i-1][j]!= 'X':\n                        count += 1\n                    if j == 0 or board[i][j-1]!= 'X':\n                        count += 1\n        return count"
    },
    {
        "number": 419,
        "title": "Battleships in a Board",
        "difficulty": 1,
        "pass": 7,
        "answer": "        if not board:\n            return 0\n        m, n = len(board), len(board[0])\n        count = 0\n        for i in range(m):\n            for j in range(n):\n                if board[i][j] == 'X':\n                    if i > 0 and board[i-1][j] == 'X':\n                        continue\n                    if j > 0 and board[i][j-1] == 'X':\n                        continue\n                    count += 1\n        return count"
    },
    {
        "number": 419,
        "title": "Battleships in a Board",
        "difficulty": 1,
        "pass": 8,
        "answer": "        if not board:\n            return 0\n        \n        count = 0\n        for i in range(len(board)):\n            for j in range(len(board[0])):\n                if board[i][j] == 'X':\n                    count += 1\n                    self.dfs(board, i, j)\n        return count"
    },
    {
        "number": 419,
        "title": "Battleships in a Board",
        "difficulty": 1,
        "pass": 9,
        "answer": "        \n        m, n = len(board), len(board[0])\n        count = 0\n        \n        for i in range(m):\n            for j in range(n):\n                if board[i][j] == 'X':\n                    if i > 0 and board[i-1][j] == 'X':\n                        continue\n                    if j > 0 and board[i][j-1] == 'X':\n                        continue\n                    count += 1\n        \n        return count\n"
    },
    {
        "number": 420,
        "title": "Strong Password Checker",
        "difficulty": 2,
        "pass": 0,
        "answer": "        if len(password) < 6 or len(password) > 20:\n            return -1\n        if not any(c.islower() for c in password) or not any(c.isupper() for c in password) or not any(c.isdigit() for c in password):\n            return -1\n        if any(password[i] == password[i + 1] for i in range(len(password) - 1)):\n            return -1\n        cnt = 0\n        for i in range(len(password)):\n            if password[i].islower():\n                cnt += 1\n            if password[i].isupper():\n                cnt += 1\n            if password[i].isdigit():\n                cnt += 1\n        return cnt"
    },
    {
        "number": 420,
        "title": "Strong Password Checker",
        "difficulty": 2,
        "pass": 1,
        "answer": "        # if not password:\n        #     return -1\n        # if len(password) < 6:\n        #     return -1\n        # if len(password) > 20:\n        #     return -1\n        # if not re.search(r'[a-z]', password):\n        #     return -1\n        # if not re.search(r'[A-Z]', password):\n        #     return -1\n        # if not re.search(r'[0-9]', password):\n        #     return -1\n        # if re.search(r'(.)\\1', password):\n        #     return -1\n        # return min(len(password), 6 - len(set(password)))"
    },
    {
        "number": 420,
        "title": "Strong Password Checker",
        "difficulty": 2,
        "pass": 2,
        "answer": "        if len(password) < 6 or len(password) > 20:\n            return -1\n        if any(c.islower() for c in password) == False or any(c.isupper() for c in password) == False or any(c.isdigit() for c in password) == False:\n            return -1\n        if any(password[i] == password[i+1] for i in range(len(password)-1)):\n            return -1\n        \n        count = 0\n        i = 0\n        while i < len(password):\n            if password[i].islower():\n                count += 1\n                i += 1\n            elif password[i].isupper():\n                count += 1\n                i += 1\n            elif password[i].isdigit():\n                count += 1\n                i += 1\n            else:\n                i += 1\n                count += 1\n        return count"
    },
    {
        "number": 420,
        "title": "Strong Password Checker",
        "difficulty": 2,
        "pass": 3,
        "answer": "        if len(password) < 6 or len(password) > 20:\n            return -1\n        if not any(c.islower() for c in password) or not any(c.isupper() for c in password) or not any(c.isdigit() for c in password):\n            return -1\n        if any(password[i] == password[i + 1] for i in range(len(password) - 1)):\n            return -1\n        for i in range(len(password) - 1):\n            if password[i] == password[i + 1]:\n                return -1\n        return len(password)"
    },
    {
        "number": 420,
        "title": "Strong Password Checker",
        "difficulty": 2,
        "pass": 4,
        "answer": "        if len(password) < 6 or len(password) > 20:\n            return -1\n        if not re.search('[a-z]', password):\n            return -1\n        if not re.search('[A-Z]', password):\n            return -1\n        if not re.search('[0-9]', password):\n            return -1\n        if re.search('(.)\\1', password):\n            return -1\n        if re.search('(.)\\2', password):\n            return -1\n        if re.search('(.)\\3', password):\n            return -1\n        if re.search('(.)\\4', password):\n            return -1\n        if re.search('(.)\\5', password):\n            return -1\n        if re.search('(.)\\6', password):\n            return -1\n        if re.search('(.)\\7', password):\n            return -1\n        if re.search('(.)\\8', password):\n            return -1\n        if re.search('(.)\\9', password):"
    },
    {
        "number": 420,
        "title": "Strong Password Checker",
        "difficulty": 2,
        "pass": 5,
        "answer": "        if len(password) < 6 or len(password) > 20:\n            return -1\n        if any(c.islower() for c in password) == False or any(c.isupper() for c in password) == False or any(c.isdigit() for c in password) == False:\n            return -1\n        if any(c == password[i] for i in range(len(password)-1) for c in password[i+1:]) == True:\n            return -1\n        count = 0\n        for i in range(len(password)):\n            if password[i].islower():\n                count += 1\n            if password[i].isupper():\n                count += 1\n            if password[i].isdigit():\n                count += 1\n        return count"
    },
    {
        "number": 420,
        "title": "Strong Password Checker",
        "difficulty": 2,
        "pass": 6,
        "answer": "        if len(password) < 6 or len(password) > 20:\n            return 0\n        if not any(c.islower() for c in password) or not any(c.isupper() for c in password) or not any(c.isdigit() for c in password):\n            return 0\n        if any(password[i] == password[i + 1] for i in range(len(password) - 1)):\n            return 0\n        return self.dfs(password)"
    },
    {
        "number": 420,
        "title": "Strong Password Checker",
        "difficulty": 2,
        "pass": 7,
        "answer": "        if len(password) < 6 or len(password) > 20:\n            return -1\n        if any(c.islower() for c in password) == False or any(c.isupper() for c in password) == False or any(c.isdigit() for c in password) == False:\n            return -1\n        if len(password) == 6 or len(password) == 7 or len(password) == 8:\n            return 1\n        if len(password) == 9 or len(password) == 10 or len(password) == 11:\n            return 2\n        if len(password) == 12 or len(password) == 13 or len(password) == 14:\n            return 3\n        if len(password) == 15 or len(password) == 16 or len(password) == 17:\n            return 4\n        if len(password) == 18 or len(password) == 19 or len(password) == 20:\n            return 5\n        if len(password) == 21 or len(password) == 22 or len(password) == 23:\n            return 6\n        if len(password)"
    },
    {
        "number": 420,
        "title": "Strong Password Checker",
        "difficulty": 2,
        "pass": 8,
        "answer": "        if len(password) < 6 or len(password) > 20:\n            return -1\n        if any(i.isdigit() for i in password) == False:\n            return -1\n        if any(i.islower() for i in password) == False:\n            return -1\n        if any(i.isupper() for i in password) == False:\n            return -1\n        if any(i in password for i in ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']) == False:\n            return -1\n        if any(i in password for i in ['b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l','m', 'n', 'p', 'q', 'r','s', 't', 'v', 'w', 'x', 'y', 'z']) == False:\n            return -1\n        if any(i in password for i in ['B', 'C', 'D', 'F', 'G',"
    },
    {
        "number": 420,
        "title": "Strong Password Checker",
        "difficulty": 2,
        "pass": 9,
        "answer": "        # if len(password) < 6 or len(password) > 20:\n        #     return -1\n        # if not any(c.islower() for c in password):\n        #     return -1\n        # if not any(c.isupper() for c in password):\n        #     return -1\n        # if not any(c.isdigit() for c in password):\n        #     return -1\n        # if any(password.count(c) > 1 for c in password):\n        #     return -1\n        # return min(6 - len(password), 20 - len(password))"
    },
    {
        "number": 421,
        "title": "Maximum XOR of Two Numbers in an Array",
        "difficulty": 1,
        "pass": 0,
        "answer": "        n = len(nums)\n        if n == 1:\n            return nums[0]\n        nums = sorted(nums)\n        res = 0\n        for i in range(n):\n            for j in range(i + 1, n):\n                res = max(res, nums[i] ^ nums[j])\n        return res"
    },
    {
        "number": 421,
        "title": "Maximum XOR of Two Numbers in an Array",
        "difficulty": 1,
        "pass": 1,
        "answer": "        n = len(nums)\n        max_xor = 0\n        for i in range(n):\n            for j in range(i+1, n):\n                max_xor = max(max_xor, nums[i] ^ nums[j])\n        return max_xor"
    },
    {
        "number": 421,
        "title": "Maximum XOR of Two Numbers in an Array",
        "difficulty": 1,
        "pass": 2,
        "answer": "        n = len(nums)\n        res = 0\n        for i in range(n):\n            for j in range(i+1, n):\n                res = max(res, nums[i] ^ nums[j])\n        return res"
    },
    {
        "number": 421,
        "title": "Maximum XOR of Two Numbers in an Array",
        "difficulty": 1,
        "pass": 3,
        "answer": "        n = len(nums)\n        if n == 0:\n            return 0\n        if n == 1:\n            return nums[0]\n        nums = sorted(nums)\n        max_xor = 0\n        for i in range(n):\n            for j in range(i+1, n):\n                max_xor = max(max_xor, nums[i] ^ nums[j])\n        return max_xor"
    },
    {
        "number": 421,
        "title": "Maximum XOR of Two Numbers in an Array",
        "difficulty": 1,
        "pass": 4,
        "answer": "        n = len(nums)\n        res = 0\n        for i in range(n):\n            for j in range(i+1, n):\n                res = max(res, nums[i] ^ nums[j])\n        return res"
    },
    {
        "number": 421,
        "title": "Maximum XOR of Two Numbers in an Array",
        "difficulty": 1,
        "pass": 5,
        "answer": "        if not nums:\n            return 0\n        n = len(nums)\n        res = 0\n        for i in range(n):\n            for j in range(i+1, n):\n                res = max(res, nums[i] ^ nums[j])\n        return res"
    },
    {
        "number": 421,
        "title": "Maximum XOR of Two Numbers in an Array",
        "difficulty": 1,
        "pass": 6,
        "answer": "        n = len(nums)\n        max_xor = 0\n        for i in range(n):\n            for j in range(i + 1, n):\n                max_xor = max(max_xor, nums[i] ^ nums[j])\n        return max_xor"
    },
    {
        "number": 421,
        "title": "Maximum XOR of Two Numbers in an Array",
        "difficulty": 1,
        "pass": 7,
        "answer": "        n = len(nums)\n        max_xor = 0\n        for i in range(n):\n            for j in range(i+1, n):\n                max_xor = max(max_xor, nums[i] ^ nums[j])\n        return max_xor"
    },
    {
        "number": 421,
        "title": "Maximum XOR of Two Numbers in an Array",
        "difficulty": 1,
        "pass": 8,
        "answer": "        n = len(nums)\n        res = 0\n        for i in range(n):\n            for j in range(i+1, n):\n                res = max(res, nums[i] ^ nums[j])\n        return res"
    },
    {
        "number": 421,
        "title": "Maximum XOR of Two Numbers in an Array",
        "difficulty": 1,
        "pass": 9,
        "answer": "        n = len(nums)\n        max_xor = 0\n        for i in range(n):\n            for j in range(i+1, n):\n                max_xor = max(max_xor, nums[i] ^ nums[j])\n        return max_xor"
    },
    {
        "number": 423,
        "title": "Reconstruct Original Digits from English",
        "difficulty": 1,
        "pass": 0,
        "answer": "        d = {\n            'zero': 0,\n            'one': 1,\n            'two': 2,\n            'three': 3,\n            'four': 4,\n            'five': 5,\n           'six': 6,\n           'seven': 7,\n            'eight': 8,\n            'nine': 9,\n        }\n        res = []\n        for c in s:\n            if c in d:\n                res.append(str(d[c]))\n            else:\n                res.append(c)\n        return \"\".join(sorted(res))"
    },
    {
        "number": 423,
        "title": "Reconstruct Original Digits from English",
        "difficulty": 1,
        "pass": 1,
        "answer": "        digit_dict = {\n            \"zero\": 0,\n            \"one\": 1,\n            \"two\": 2,\n            \"three\": 3,\n            \"four\": 4,\n            \"five\": 5,\n            \"six\": 6,\n            \"seven\": 7,\n            \"eight\": 8,\n            \"nine\": 9,\n        }\n        res = []\n        for char in s:\n            res.append(digit_dict[char])\n        res.sort()\n        return \"\".join([str(i) for i in res])"
    },
    {
        "number": 423,
        "title": "Reconstruct Original Digits from English",
        "difficulty": 1,
        "pass": 2,
        "answer": "        d = {\n            \"zero\": 0,\n            \"one\": 1,\n            \"two\": 2,\n            \"three\": 3,\n            \"four\": 4,\n            \"five\": 5,\n            \"six\": 6,\n            \"seven\": 7,\n            \"eight\": 8,\n            \"nine\": 9,\n        }\n        res = []\n        for c in s:\n            if c in d:\n                res.append(str(d[c]))\n        return \"\".join(sorted(res))"
    },
    {
        "number": 423,
        "title": "Reconstruct Original Digits from English",
        "difficulty": 1,
        "pass": 3,
        "answer": "        # s = \"owoztneoer\"\n        # s = \"fviefuro\"\n        digit_map = {\n            \"zero\": \"0\",\n            \"one\": \"1\",\n            \"two\": \"2\",\n            \"three\": \"3\",\n            \"four\": \"4\",\n            \"five\": \"5\",\n            \"six\": \"6\",\n            \"seven\": \"7\",\n            \"eight\": \"8\",\n            \"nine\": \"9\",\n        }\n        res = \"\"\n        for c in s:\n            res += digit_map[c]\n        return res"
    },
    {
        "number": 423,
        "title": "Reconstruct Original Digits from English",
        "difficulty": 1,
        "pass": 4,
        "answer": "        d = {\n            \"zero\": 0,\n            \"one\": 1,\n            \"two\": 2,\n            \"three\": 3,\n            \"four\": 4,\n            \"five\": 5,\n            \"six\": 6,\n            \"seven\": 7,\n            \"eight\": 8,\n            \"nine\": 9,\n        }\n        s = s.replace(\"o\", \"0\")\n        s = s.replace(\"u\", \"1\")\n        s = s.replace(\"x\", \"2\")\n        s = s.replace(\"z\", \"3\")\n        s = s.replace(\"f\", \"4\")\n        s = s.replace(\"v\", \"5\")\n        s = s.replace(\"e\", \"6\")\n        s = s.replace(\"i\", \"7\")\n        s = s.replace(\"n\", \"8\")\n        s = s.replace(\"g\", \"9\")"
    },
    {
        "number": 423,
        "title": "Reconstruct Original Digits from English",
        "difficulty": 1,
        "pass": 5,
        "answer": "        d = {\n            \"zero\": 0,\n            \"one\": 1,\n            \"two\": 2,\n            \"three\": 3,\n            \"four\": 4,\n            \"five\": 5,\n            \"six\": 6,\n            \"seven\": 7,\n            \"eight\": 8,\n            \"nine\": 9,\n        }\n        res = []\n        for c in s:\n            if c in d:\n                res.append(str(d[c]))\n        return \"\".join(sorted(res))"
    },
    {
        "number": 423,
        "title": "Reconstruct Original Digits from English",
        "difficulty": 1,
        "pass": 6,
        "answer": "        d = {\n            \"zero\": 0,\n            \"one\": 1,\n            \"two\": 2,\n            \"three\": 3,\n            \"four\": 4,\n            \"five\": 5,\n            \"six\": 6,\n            \"seven\": 7,\n            \"eight\": 8,\n            \"nine\": 9,\n        }\n        res = []\n        for c in s:\n            if c in d:\n                res.append(str(d[c]))\n        return \"\".join(sorted(res))"
    },
    {
        "number": 423,
        "title": "Reconstruct Original Digits from English",
        "difficulty": 1,
        "pass": 7,
        "answer": "        d = {\n            \"zero\": 0,\n            \"one\": 1,\n            \"two\": 2,\n            \"three\": 3,\n            \"four\": 4,\n            \"five\": 5,\n            \"six\": 6,\n            \"seven\": 7,\n            \"eight\": 8,\n            \"nine\": 9,\n        }\n        res = \"\"\n        for c in s:\n            res += str(d[c])\n        return res"
    },
    {
        "number": 423,
        "title": "Reconstruct Original Digits from English",
        "difficulty": 1,
        "pass": 8,
        "answer": "        d = {\n            \"zero\": 0,\n            \"one\": 1,\n            \"two\": 2,\n            \"three\": 3,\n            \"four\": 4,\n            \"five\": 5,\n            \"six\": 6,\n            \"seven\": 7,\n            \"eight\": 8,\n            \"nine\": 9,\n        }\n        res = \"\"\n        for c in s:\n            res += str(d[c])\n        return res"
    },
    {
        "number": 423,
        "title": "Reconstruct Original Digits from English",
        "difficulty": 1,
        "pass": 9,
        "answer": "        d = {}\n        for i in range(10):\n            d[str(i)] = 0\n        for c in s:\n            d[c] += 1\n        ans = \"\"\n        for i in range(10):\n            ans += str(i) * d[str(i)]\n        return ans"
    },
    {
        "number": 424,
        "title": "Longest Repeating Character Replacement",
        "difficulty": 1,
        "pass": 0,
        "answer": "        if not s:\n            return 0\n        if k == 0:\n            return 0\n        if k > len(s):\n            return len(s)\n        if k == len(s):\n            return len(s)\n        \n        left = 0\n        right = 0\n        max_len = 0\n        max_count = 0\n        count = {}\n        while right < len(s):\n            count[s[right]] = count.get(s[right], 0) + 1\n            if count[s[right]] > max_count:\n                max_count = count[s[right]]\n                max_len = right - left + 1\n            while right - left + 1 - max_count > k:\n                count[s[left]] -= 1\n                if count[s[left]] == 0:\n                    del count[s[left]]\n                left += 1\n            right += 1\n        return max_len"
    },
    {
        "number": 424,
        "title": "Longest Repeating Character Replacement",
        "difficulty": 1,
        "pass": 1,
        "answer": "        n = len(s)\n        if n == 0:\n            return 0\n        if k == 0:\n            return 0\n        if k > n // 2:\n            return n\n        from collections import defaultdict\n        d = defaultdict(int)\n        for i in range(n):\n            d[s[i]] += 1\n        max_len = 0\n        start = 0\n        for i in range(n):\n            d[s[i]] -= 1\n            if d[s[i]] == 0:\n                max_len = max(max_len, i - start + 1)\n            else:\n                start = i + 1\n        return max_len"
    },
    {
        "number": 424,
        "title": "Longest Repeating Character Replacement",
        "difficulty": 1,
        "pass": 2,
        "answer": "        if not s:\n            return 0\n        if k == 0:\n            return len(s)\n        if k > len(s):\n            return len(s)\n        if k > len(s) // 2:\n            k = len(s) // 2\n        if k == 1:\n            return len(s)\n        count = {}\n        left = 0\n        max_count = 0\n        for right in range(len(s)):\n            count[s[right]] = count.get(s[right], 0) + 1\n            max_count = max(max_count, count[s[right]])\n            if right - left + 1 - max_count > k:\n                count[s[left]] -= 1\n                left += 1\n        return right - left + 1"
    },
    {
        "number": 424,
        "title": "Longest Repeating Character Replacement",
        "difficulty": 1,
        "pass": 3,
        "answer": "        if not s:\n            return 0\n        if k == 0:\n            return len(s)"
    },
    {
        "number": 424,
        "title": "Longest Repeating Character Replacement",
        "difficulty": 1,
        "pass": 4,
        "answer": "        if not s or k == 0:\n            return 0\n        if k > len(s):\n            return len(s)\n        max_len = 0\n        left = 0\n        hash_map = {}\n        for right in range(len(s)):\n            if s[right] not in hash_map:\n                hash_map[s[right]] = 1\n            else:\n                hash_map[s[right]] += 1\n            while len(hash_map) > k:\n                if hash_map[s[left]] == 1:\n                    del hash_map[s[left]]\n                else:\n                    hash_map[s[left]] -= 1\n                left += 1\n            max_len = max(max_len, right - left + 1)\n        return max_len"
    },
    {
        "number": 424,
        "title": "Longest Repeating Character Replacement",
        "difficulty": 1,
        "pass": 5,
        "answer": "        if len(s) == 0:\n            return 0\n        if len(s) == 1:\n            return 1\n        if len(s) == 2:\n            if s[0] == s[1]:\n                return 2\n            else:\n                return 1\n        if len(s) == 3:\n            if s[0] == s[1] and s[1] == s[2]:\n                return 3\n            elif s[0] == s[1]:\n                return 2\n            elif s[0] == s[2]:\n                return 2\n            else:\n                return 1\n        if len(s) == 4:\n            if s[0] == s[1] and s[1] == s[2] and s[2] == s[3]:\n                return 4\n            elif s[0] == s[1]:\n                return 2\n            elif s[0] == s[2]:\n                return 2\n            elif s[0] == s[3]:\n                return 2\n            else:\n                return 1\n        if len(s"
    },
    {
        "number": 424,
        "title": "Longest Repeating Character Replacement",
        "difficulty": 1,
        "pass": 6,
        "answer": "        if not s:\n            return 0"
    },
    {
        "number": 424,
        "title": "Longest Repeating Character Replacement",
        "difficulty": 1,
        "pass": 7,
        "answer": "        if not s:\n            return 0\n        \n        if k == 0:\n            return len(s)\n        \n        if k > len(s):\n            return len(s)\n        \n        if k > len(s) // 2:\n            return len(s)\n        \n        count = {}\n        for i in range(len(s)):\n            if s[i] in count:\n                count[s[i]] += 1\n            else:\n                count[s[i]] = 1\n            \n            if len(count) > k:\n                count[s[i - k]] -= 1\n                if count[s[i - k]] == 0:\n                    del count[s[i - k]]\n            \n            if len(count) == k:\n                longest = i - k + 1\n        \n        return max(longest, len(s))"
    },
    {
        "number": 424,
        "title": "Longest Repeating Character Replacement",
        "difficulty": 1,
        "pass": 8,
        "answer": "        if not s:\n            return 0\n        if k == 0:\n            return 0\n        if k > len(s):\n            return len(s)\n        \n        left = 0\n        right = 0\n        max_len = 0\n        counts = {}\n        while right < len(s):\n            if s[right] not in counts:\n                counts[s[right]] = 1\n            else:\n                counts[s[right]] += 1\n            right += 1\n            \n            while right - left - len(counts) > k:\n                counts[s[left]] -= 1\n                if counts[s[left]] == 0:\n                    del counts[s[left]]\n                left += 1\n            \n            max_len = max(max_len, right - left)\n        \n        return max_len"
    },
    {
        "number": 424,
        "title": "Longest Repeating Character Replacement",
        "difficulty": 1,
        "pass": 9,
        "answer": "        if len(s) == 0:\n            return 0\n        if k == 0:\n            return 0\n        if k > len(s):\n            return len(s)\n        if k == len(s):\n            return len(s)\n        if k == 1:\n            for i in range(len(s)):\n                if s[i] == s[i-1]:\n                    return 1\n            return len(s)\n        if k == 2:\n            count = 0\n            for i in range(len(s)):\n                if s[i] == s[i-1]:\n                    count += 1\n                else:\n                    count = 1\n                if count == k:\n                    return i - k + 1\n            return len(s)\n        dp = [0] * (len(s) + 1)\n        for i in range(len(s)):\n            dp[i+1] = dp[i] + 1\n            if s[i] == s[i-1]:\n                dp[i+1] = max(dp[i+1], d"
    },
    {
        "number": 427,
        "title": "Construct Quad Tree",
        "difficulty": 1,
        "pass": 0,
        "answer": "        self.val = val\n        self.isLeaf = isLeaf\n        self.topLeft = topLeft\n        self.topRight = topRight\n        self.bottomLeft = bottomLeft\n        self.bottomRight = bottomRight"
    },
    {
        "number": 427,
        "title": "Construct Quad Tree",
        "difficulty": 1,
        "pass": 1,
        "answer": "        \"\"\"\n        # Definition for a QuadTree node.\n        class Node:\n            def __init__(self, val, isLeaf, topLeft, topRight, bottomLeft, bottomRight):\n                self.val = val\n                self.isLeaf = isLeaf\n                self.topLeft = topLeft\n                self.topRight = topRight\n                self.bottomLeft = bottomLeft\n                self.bottomRight = bottomRight\n        \"\"\"\n        \"\"\"\n        # Definition for a QuadTree node.\n        class Node:\n            def __init__(self, val, isLeaf, topLeft, topRight, bottomLeft, bottomRight):\n                self.val = val\n                self.isLeaf = isLeaf\n                self.topLeft = topLeft\n                self.topRight = topRight\n                self.bottomLeft = bottomLeft\n                self.bottomRight = bottomRight\n        \"\"\"\n        \"\"\"\n        # Definition for a QuadTree node.\n        class Node:\n            def __init__(self, val, isLeaf, topLeft, topRight, bottomLeft, bottomRight):\n                "
    },
    {
        "number": 427,
        "title": "Construct Quad Tree",
        "difficulty": 1,
        "pass": 2,
        "answer": "        \"\"\"\n        # Definition for a QuadTree node.\n        class Node:\n            def __init__(self, val, isLeaf, topLeft, topRight, bottomLeft, bottomRight):\n                self.val = val\n                self.isLeaf = isLeaf\n                self.topLeft = topLeft\n                self.topRight = topRight\n                self.bottomLeft = bottomLeft\n                self.bottomRight = bottomRight\n        \"\"\"\n        \"\"\"\n        # Definition for a QuadTree node.\n        class Node:\n            def __init__(self, val, isLeaf, topLeft, topRight, bottomLeft, bottomRight):\n                self.val = val\n                self.isLeaf = isLeaf\n                self.topLeft = topLeft\n                self.topRight = topRight\n                self.bottomLeft = bottomLeft\n                self.bottomRight = bottomRight\n        \"\"\"\n        \"\"\"\n        # Definition for a QuadTree node.\n        class Node:\n            def __init__(self, val, isLeaf, topLeft, topRight, bottomLeft, bottomRight):\n                "
    },
    {
        "number": 427,
        "title": "Construct Quad Tree",
        "difficulty": 1,
        "pass": 3,
        "answer": "        \"\"\"\n        # Definition for a QuadTree node.\n        class Node:\n            def __init__(self, val, isLeaf, topLeft, topRight, bottomLeft, bottomRight):\n                self.val = val\n                self.isLeaf = isLeaf\n                self.topLeft = topLeft\n                self.topRight = topRight\n                self.bottomLeft = bottomLeft\n                self.bottomRight = bottomRight\n        \"\"\"\n        \"\"\"\n        :type grid: List[List[int]]\n        :rtype: Node\n        \"\"\"\n        if not grid:\n            return None\n        m, n = len(grid), len(grid[0])\n        if m == 1 and n == 1:\n            return Node(val=grid[0][0], isLeaf=True, topLeft=None, topRight=None, bottomLeft=None, bottomRight=None)\n        root = Node(val=True, isLeaf=False, topLeft=None, topRight=None, bottomLeft=None, bottomRight=None)\n        for i in range(m):\n            for"
    },
    {
        "number": 427,
        "title": "Construct Quad Tree",
        "difficulty": 1,
        "pass": 4,
        "answer": "        \"\"\"\n        # Definition for a QuadTree node.\n        class Node:\n            def __init__(self, val, isLeaf, topLeft, topRight, bottomLeft, bottomRight):\n                self.val = val\n                self.isLeaf = isLeaf\n                self.topLeft = topLeft\n                self.topRight = topRight\n                self.bottomLeft = bottomLeft\n                self.bottomRight = bottomRight\n        class Solution:\n        def construct(self, grid: List[List[int]]) -> 'Node':\n            if len(grid) == 0:\n                return None\n            if len(grid) == 1:\n                return Node(grid[0][0], True, None, None, None, None)\n            if len(grid) == 2:\n                if grid[0][0] == grid[1][0]:\n                    return Node(grid[0][0], True, None, None, None, None)\n                else:\n                    return Node(grid[0][0], False, None, None, None, None)\n            if len(grid) == 3:"
    },
    {
        "number": 427,
        "title": "Construct Quad Tree",
        "difficulty": 1,
        "pass": 5,
        "answer": "        self.val = val\n        self.isLeaf = isLeaf\n        self.topLeft = Node(topLeft, True, None, None, None, None)\n        self.topRight = Node(topRight, True, None, None, None, None)\n        self.bottomLeft = Node(bottomLeft, True, None, None, None, None)\n        self.bottomRight = Node(bottomRight, True, None, None, None, None)\n        return self"
    },
    {
        "number": 427,
        "title": "Construct Quad Tree",
        "difficulty": 1,
        "pass": 6,
        "answer": "        \"\"\"\n        # Definition for a QuadTree node.\n        class Node:\n            def __init__(self, val, isLeaf, topLeft, topRight, bottomLeft, bottomRight):\n                self.val = val\n                self.isLeaf = isLeaf\n                self.topLeft = topLeft\n                self.topRight = topRight\n                self.bottomLeft = bottomLeft\n                self.bottomRight = bottomRight\n        \"\"\"\n        \"\"\"\n        # Definition for a QuadTree node.\n        class Node:\n            def __init__(self, val, isLeaf, topLeft, topRight, bottomLeft, bottomRight):\n                self.val = val\n                self.isLeaf = isLeaf\n                self.topLeft = topLeft\n                self.topRight = topRight\n                self.bottomLeft = bottomLeft\n                self.bottomRight = bottomRight\n        \"\"\"\n        \"\"\"\n        # Definition for a QuadTree node.\n        class Node:\n            def __init__(self, val, isLeaf, topLeft, topRight, bottomLeft, bottomRight):\n                "
    },
    {
        "number": 427,
        "title": "Construct Quad Tree",
        "difficulty": 1,
        "pass": 7,
        "answer": "        if not grid:\n            return None\n        if len(grid) == 1 and len(grid[0]) == 1:\n            return Node(grid[0][0], True, None, None, None, None)\n        \n        root = Node(grid[0][0], True, None, None, None, None)\n        for i in range(len(grid)):\n            for j in range(len(grid[0])):\n                if grid[i][j]!= root.val:\n                    root.isLeaf = False\n                    root.val = grid[i][j]\n                    root.topLeft = Node(grid[i][j], True, None, None, None, None)\n                    root.topRight = Node(grid[i][j], True, None, None, None, None)\n                    root.bottomLeft = Node(grid[i][j], True, None, None, None, None)\n                    root.bottomRight = Node(grid[i][j], True, None, None, None, None)\n                else:\n                    root.isLeaf = True\n                    root"
    },
    {
        "number": 427,
        "title": "Construct Quad Tree",
        "difficulty": 1,
        "pass": 8,
        "answer": "\"\"\"\nclass Node:\n    def __init__(self, val, isLeaf, topLeft, topRight, bottomLeft, bottomRight):\n        self.val = val\n        self.isLeaf = isLeaf\n        self.topLeft = topLeft\n        self.topRight = topRight\n        self.bottomLeft = bottomLeft\n        self.bottomRight = bottomRight\n        Given a n * n matrix grid of 0's and 1's only. We want to represent the grid with a Quad-Tree.\n        Return the root of the Quad-Tree representing the grid.\n        Notice that you can assign the value of a node to True or False when isLeaf is False, and both are accepted in the answer.\n        A Quad-Tree is a tree data structure in which each internal node has exactly four children. Besides, each node has two attributes:\n            val: True if the node represents a grid of 1's or False if the node represents a grid of 0's.\n            isLeaf: True if the node is leaf node on the tree or False if the node has the four children.\n        class Node {\n            public boolean"
    },
    {
        "number": 427,
        "title": "Construct Quad Tree",
        "difficulty": 1,
        "pass": 9,
        "answer": "        \"\"\"\n        # Definition for a QuadTree node.\n        class Node:\n            def __init__(self, val, isLeaf, topLeft, topRight, bottomLeft, bottomRight):\n                self.val = val\n                self.isLeaf = isLeaf\n                self.topLeft = topLeft\n                self.topRight = topRight\n                self.bottomLeft = bottomLeft\n                self.bottomRight = bottomRight\n        \"\"\"\n        \"\"\"\n        # Definition for a QuadTree node.\n        class Node:\n            def __init__(self, val, isLeaf, topLeft, topRight, bottomLeft, bottomRight):\n                self.val = val\n                self.isLeaf = isLeaf\n                self.topLeft = topLeft\n                self.topRight = topRight\n                self.bottomLeft = bottomLeft\n                self.bottomRight = bottomRight\n        \"\"\"\n        \"\"\"\n        # Definition for a QuadTree node.\n        class Node:\n            def __init__(self, val, isLeaf, topLeft, topRight, bottomLeft, bottomRight):\n                "
    },
    {
        "number": 429,
        "title": "N-ary Tree Level Order Traversal",
        "difficulty": 1,
        "pass": 0,
        "answer": "        self.val = val\n        self.children = children"
    },
    {
        "number": 429,
        "title": "N-ary Tree Level Order Traversal",
        "difficulty": 1,
        "pass": 1,
        "answer": "        if not root:\n            return []\n        if not root.children:\n            return [root.val]\n        res = []\n        for child in root.children:\n            if child:\n                res.extend(self.dfs(child))\n        res.append(root.val)\n        return res\n    def dfs(self, root):\n        res = []\n        if not root:\n            return res\n        for child in root.children:\n            if child:\n                res.extend(self.dfs(child))\n        res.append(root.val)\n        return res"
    },
    {
        "number": 429,
        "title": "N-ary Tree Level Order Traversal",
        "difficulty": 1,
        "pass": 2,
        "answer": "        self.val = val\n        self.children = children"
    },
    {
        "number": 429,
        "title": "N-ary Tree Level Order Traversal",
        "difficulty": 1,
        "pass": 3,
        "answer": "        self.val = val\n        self.children = children\n        \n        \n        \n    def levelOrder(self, root):\n        \"\"\"\n        :type root: Node\n        :rtype: List[List[int]]\n        \"\"\"\n        if not root:\n            return []\n        \n        q = deque()\n        q.append(root)\n        res = []\n        \n        while q:\n            level = []\n            for _ in range(len(q)):\n                node = q.popleft()\n                level.append(node.val)\n                if node.children:\n                    for child in node.children:\n                        q.append(child)\n            res.append(level)\n        return res\n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        "
    },
    {
        "number": 429,
        "title": "N-ary Tree Level Order Traversal",
        "difficulty": 1,
        "pass": 4,
        "answer": "        self.val = val\n        self.children = children"
    },
    {
        "number": 429,
        "title": "N-ary Tree Level Order Traversal",
        "difficulty": 1,
        "pass": 5,
        "answer": "        # Definition for a Node.\n        self.val = val\n        self.children = children"
    },
    {
        "number": 429,
        "title": "N-ary Tree Level Order Traversal",
        "difficulty": 1,
        "pass": 6,
        "answer": "        self.val = val\n        self.children = children"
    },
    {
        "number": 429,
        "title": "N-ary Tree Level Order Traversal",
        "difficulty": 1,
        "pass": 7,
        "answer": "        self.val = val\n        self.children = children\n        \nclass Solution:\n    def levelOrder(self, root: 'Node') -> List[List[int]]:\n        if not root:\n            return []\n        res = []\n        queue = deque()\n        queue.append(root)\n        while queue:\n            level = []\n            for _ in range(len(queue)):\n                node = queue.popleft()\n                level.append(node.val)\n                if node.children:\n                    for child in node.children:\n                        queue.append(child)\n            res.append(level)\n        return res\n"
    },
    {
        "number": 429,
        "title": "N-ary Tree Level Order Traversal",
        "difficulty": 1,
        "pass": 8,
        "answer": "        self.val = val\n        self.children = children"
    },
    {
        "number": 429,
        "title": "N-ary Tree Level Order Traversal",
        "difficulty": 1,
        "pass": 9,
        "answer": "        self.val = val\n        self.children = children"
    },
    {
        "number": 430,
        "title": "Flatten a Multilevel Doubly Linked List",
        "difficulty": 1,
        "pass": 0,
        "answer": "        if not head:\n            return None\n        if not head.next and not head.child:\n            return head\n        if not head.child:\n            head.child = Node(head.val, None, None, None)\n            return self.flatten(head.child)\n        head.child = self.flatten(head.child)\n        curr = head.child\n        while curr.next:\n            curr = curr.next\n        curr.next = head\n        head.child = None\n        return self.flatten(head.child)"
    },
    {
        "number": 430,
        "title": "Flatten a Multilevel Doubly Linked List",
        "difficulty": 1,
        "pass": 1,
        "answer": "        if not head:\n            return head\n        curr = head\n        while curr.next:\n            curr = curr.next\n        curr.next = None\n        curr = head\n        while curr:\n            if curr.child:\n                child = curr.child\n                while child.next:\n                    child = child.next\n                child.next = curr.next\n                curr.next = child\n            curr = curr.next\n        curr = head\n        while curr:\n            if curr.child:\n                child = curr.child\n                while child.next:\n                    child = child.next\n                child.next = curr.next\n                curr.next = child\n            curr = curr.next\n        curr = head\n        while curr:\n            if curr.child:\n                child = curr.child\n                while child.next:\n                    child = child.next\n                child.next = curr.next\n                curr.next = child\n            curr = curr.next\n        return"
    },
    {
        "number": 430,
        "title": "Flatten a Multilevel Doubly Linked List",
        "difficulty": 1,
        "pass": 2,
        "answer": "        if not head:\n            return None\n        curr = head\n        while curr:\n            if curr.child:\n                temp = curr.child\n                while temp.next:\n                    temp = temp.next\n                temp.next = curr.next\n                curr.next = temp\n            curr = curr.next\n        curr = head\n        while curr:\n            if curr.child:\n                temp = curr.child\n                while temp.next:\n                    temp = temp.next\n                temp.next = curr.next\n                curr.next = temp\n            curr = curr.next\n        curr = head\n        while curr:\n            if curr.child:\n                temp = curr.child\n                while temp.next:\n                    temp = temp.next\n                temp.next = curr.next\n                curr.next = temp\n            curr = curr.next\n        curr = head\n        while curr:\n            if curr.child:\n                temp = curr.child\n                while temp.next"
    },
    {
        "number": 430,
        "title": "Flatten a Multilevel Doubly Linked List",
        "difficulty": 1,
        "pass": 3,
        "answer": "        if not head:\n            return head\n        curr = head\n        while curr:\n            if curr.child:\n                if curr.next:\n                    curr.next.prev = curr.prev\n                curr.prev.next = curr.next\n                curr.next = curr.child\n                curr.child.prev = curr\n                curr = curr.next\n            else:\n                curr = curr.next\n        curr = head\n        while curr:\n            if curr.next:\n                curr.next.prev = curr.prev\n                curr.prev.next = curr.next\n                curr = curr.next\n            else:\n                curr = curr.prev\n        return head\n"
    },
    {
        "number": 430,
        "title": "Flatten a Multilevel Doubly Linked List",
        "difficulty": 1,
        "pass": 4,
        "answer": "        if not head:\n            return None\n        curr = head\n        while curr:\n            if curr.child:\n                temp = curr.child\n                while temp.next:\n                    temp = temp.next\n                temp.next = curr.next\n                curr.next = temp\n                curr.child = None\n            curr = curr.next\n        curr = head\n        while curr:\n            if curr.child:\n                temp = curr.child\n                while temp.next:\n                    temp = temp.next\n                temp.next = curr.next\n                curr.next = temp\n                curr.child = None\n            curr = curr.next\n        return head\n"
    },
    {
        "number": 430,
        "title": "Flatten a Multilevel Doubly Linked List",
        "difficulty": 1,
        "pass": 5,
        "answer": "        curr = head\n        while curr:\n            if curr.child:\n                temp = curr.child\n                while temp.next:\n                    temp = temp.next\n                temp.next = curr.next\n                curr.next = curr.child\n                curr.child = None\n            curr = curr.next\n        curr = head\n        while curr:\n            if curr.next:\n                temp = curr.next\n                while temp.next:\n                    temp = temp.next\n                temp.next = curr.next.next\n                curr.next = curr.next.next\n                curr.next.prev = curr\n            curr = curr.next\n        curr = head\n        while curr:\n            if curr.next:\n                temp = curr.next\n                while temp.next:\n                    temp = temp.next\n                temp.next = curr.next.next\n                curr.next = curr.next.next\n                curr.next.prev = curr\n            curr = cur"
    },
    {
        "number": 430,
        "title": "Flatten a Multilevel Doubly Linked List",
        "difficulty": 1,
        "pass": 6,
        "answer": "        if not head:\n            return head\n        if not head.next:\n            return head\n        curr = head\n        while curr.next:\n            curr = curr.next\n        curr.next = None\n        curr = head\n        while curr:\n            if curr.child:\n                temp = curr.child\n                while temp.next:\n                    temp = temp.next\n                temp.next = curr.next\n                curr.next = temp\n            curr = curr.next\n        curr = head\n        while curr:\n            if curr.child:\n                temp = curr.child\n                while temp.next:\n                    temp = temp.next\n                temp.next = curr.next\n                curr.next = temp\n            curr = curr.next\n        curr = head\n        while curr:\n            if curr.child:\n                temp = curr.child\n                while temp.next:\n                    temp = temp.next\n                temp.next = curr.next\n                curr.next = temp"
    },
    {
        "number": 430,
        "title": "Flatten a Multilevel Doubly Linked List",
        "difficulty": 1,
        "pass": 7,
        "answer": "        if not head:\n            return head\n        curr = head\n        while curr.next:\n            curr = curr.next\n        curr.next = None\n        curr = head\n        while curr:\n            if curr.child:\n                temp = curr.child\n                while temp.next:\n                    temp = temp.next\n                temp.next = curr.next\n                curr.next = temp\n            curr = curr.next\n        curr = head\n        while curr:\n            if curr.child:\n                temp = curr.child\n                while temp.next:\n                    temp = temp.next\n                temp.next = curr.next\n                curr.next = temp\n            curr = curr.next\n        curr = head\n        while curr:\n            if curr.child:\n                temp = curr.child\n                while temp.next:\n                    temp = temp.next\n                temp.next = curr.next\n                curr.next = temp\n            curr = curr.next\n        return"
    },
    {
        "number": 430,
        "title": "Flatten a Multilevel Doubly Linked List",
        "difficulty": 1,
        "pass": 8,
        "answer": "        curr = head\n        while curr:\n            if curr.child:\n                if curr.next:\n                    curr.next.prev = curr.prev\n                curr.prev.next = curr.next\n                curr.next = curr.child\n                curr.child.prev = curr\n                curr = curr.next\n            else:\n                curr = curr.next\n        head = head.next\n        while head:\n            head.prev = None\n            head = head.next\n        return head\n"
    },
    {
        "number": 430,
        "title": "Flatten a Multilevel Doubly Linked List",
        "difficulty": 1,
        "pass": 9,
        "answer": "        if not head:\n            return None\n        if not head.next and not head.child:\n            return head\n        if not head.next:\n            head.next = head.child\n            return head\n        if not head.child:\n            return self.flatten(head.next)\n        head.next = self.flatten(head.next)\n        head.child = self.flatten(head.child)\n        return self.flatten(head)"
    },
    {
        "number": 432,
        "title": "All O`one Data Structure",
        "difficulty": 2,
        "pass": 0,
        "answer": "        # Your AllOne object will be instantiated and called as such:\n        # obj = AllOne()\n        # obj.inc(key)\n        # obj.dec(key)\n        # param_3 = obj.getMaxKey()\n        # param_4 = obj.getMinKey()\n        # @lc code=end"
    },
    {
        "number": 432,
        "title": "All O`one Data Structure",
        "difficulty": 2,
        "pass": 1,
        "answer": "\nclass AllOne:\n    def __init__(self):\n    def inc(self, key: str) -> None:\n    def dec(self, key: str) -> None:\n    def getMaxKey(self) -> str:\n    def getMinKey(self) -> str:\n        \"\"\"\n        Design a data structure to store the strings' count with the ability to return the strings with minimum and maximum counts.\n        Implement the AllOne class:\n            AllOne() Initializes the object of the data structure.\n            inc(String key) Increments the count of the string key by 1. If key does not exist in the data structure, insert it with count 1.\n            dec(String key) Decrements the count of the string key by 1. If the count of key is 0 after the decrement, remove it from the data structure. It is guaranteed that key exists in the data structure before the decrement.\n            getMaxKey() Returns one of the keys with the maximal count. If no element exists, return an empty string \"\".\n            getMinKey() Returns one of the keys with the minimum count. If no element exists"
    },
    {
        "number": 432,
        "title": "All O`one Data Structure",
        "difficulty": 2,
        "pass": 2,
        "answer": "        # Your AllOne object will be instantiated and called as such:\n        # obj = AllOne()\n        # obj.inc(key)\n        # obj.dec(key)\n        # param_3 = obj.getMaxKey()\n        # param_4 = obj.getMinKey()"
    },
    {
        "number": 432,
        "title": "All O`one Data Structure",
        "difficulty": 2,
        "pass": 3,
        "answer": "        self.d = {}"
    },
    {
        "number": 432,
        "title": "All O`one Data Structure",
        "difficulty": 2,
        "pass": 4,
        "answer": "        \n        \n        # Your AllOne object will be instantiated and called as such:\n        # obj = AllOne()\n        # obj.inc(key)\n        # obj.dec(key)\n        # param_3 = obj.getMaxKey()\n        # param_4 = obj.getMinKey()\n        \nclass AllOne:\n    def __init__(self):\n    def inc(self, key: str) -> None:\n    def dec(self, key: str) -> None:\n    def getMaxKey(self) -> str:\n    def getMinKey(self) -> str:\n        \"\"\"\n        Design a data structure to store the strings' count with the ability to return the strings with minimum and maximum counts.\n        Implement the AllOne class:\n            AllOne() Initializes the object of the data structure.\n            inc(String key) Increments the count of the string key by 1. If key does not exist in the data structure, insert it with count 1.\n            dec(String key) Decrements the count of the string key by 1. If the count of key is 0 after"
    },
    {
        "number": 432,
        "title": "All O`one Data Structure",
        "difficulty": 2,
        "pass": 5,
        "answer": "        # Your AllOne object will be instantiated and called as such:\n        # obj = AllOne()\n        # obj.inc(key)\n        # obj.dec(key)\n        # param_3 = obj.getMaxKey()\n        # param_4 = obj.getMinKey()\n        # @lc code=end"
    },
    {
        "number": 432,
        "title": "All O`one Data Structure",
        "difficulty": 2,
        "pass": 6,
        "answer": "\nclass AllOne:\n    def __init__(self):\n    def inc(self, key: str) -> None:\n    def dec(self, key: str) -> None:\n    def getMaxKey(self) -> str:\n    def getMinKey(self) -> str:\n        \"\"\"\n        Design a data structure to store the strings' count with the ability to return the strings with minimum and maximum counts.\n        Implement the AllOne class:\n            AllOne() Initializes the object of the data structure.\n            inc(String key) Increments the count of the string key by 1. If key does not exist in the data structure, insert it with count 1.\n            dec(String key) Decrements the count of the string key by 1. If the count of key is 0 after the decrement, remove it from the data structure. It is guaranteed that key exists in the data structure before the decrement.\n            getMaxKey() Returns one of the keys with the maximal count. If no element exists, return an empty string \"\".\n            getMinKey() Returns one of the keys with the minimum count. If no element exists"
    },
    {
        "number": 432,
        "title": "All O`one Data Structure",
        "difficulty": 2,
        "pass": 7,
        "answer": "        "
    },
    {
        "number": 432,
        "title": "All O`one Data Structure",
        "difficulty": 2,
        "pass": 8,
        "answer": "\nclass AllOne:\n    def __init__(self):\n    def inc(self, key: str) -> None:\n    def dec(self, key: str) -> None:\n    def getMaxKey(self) -> str:\n    def getMinKey(self) -> str:\n        \"\"\"\n        Design a data structure to store the strings' count with the ability to return the strings with minimum and maximum counts.\n        Implement the AllOne class:\n            AllOne() Initializes the object of the data structure.\n            inc(String key) Increments the count of the string key by 1. If key does not exist in the data structure, insert it with count 1.\n            dec(String key) Decrements the count of the string key by 1. If the count of key is 0 after the decrement, remove it from the data structure. It is guaranteed that key exists in the data structure before the decrement.\n            getMaxKey() Returns one of the keys with the maximal count. If no element exists, return an empty string \"\".\n            getMinKey() Returns one of the keys with the minimum count. If no element exists"
    },
    {
        "number": 432,
        "title": "All O`one Data Structure",
        "difficulty": 2,
        "pass": 9,
        "answer": "\nclass AllOne:\n    def __init__(self):\n    def inc(self, key: str) -> None:\n    def dec(self, key: str) -> None:\n    def getMaxKey(self) -> str:\n    def getMinKey(self) -> str:\n        \"\"\"\n        Design a data structure to store the strings' count with the ability to return the strings with minimum and maximum counts.\n        Implement the AllOne class:\n            AllOne() Initializes the object of the data structure.\n            inc(String key) Increments the count of the string key by 1. If key does not exist in the data structure, insert it with count 1.\n            dec(String key) Decrements the count of the string key by 1. If the count of key is 0 after the decrement, remove it from the data structure. It is guaranteed that key exists in the data structure before the decrement.\n            getMaxKey() Returns one of the keys with the maximal count. If no element exists, return an empty string \"\".\n            getMinKey() Returns one of the keys with the minimum count. If no element exists"
    },
    {
        "number": 433,
        "title": "Minimum Genetic Mutation",
        "difficulty": 1,
        "pass": 0,
        "answer": "        if len(startGene)!= len(endGene):\n            return -1\n        if len(startGene) == 0 or len(endGene) == 0:\n            return -1\n        if startGene == endGene:\n            return 0\n        \n        bank = set(bank)\n        \n        mutation = 0\n        for i in range(len(startGene)):\n            if startGene[i]!= endGene[i]:\n                if startGene[i] in bank:\n                    bank.remove(startGene[i])\n                    mutation += 1\n                if endGene[i] in bank:\n                    bank.remove(endGene[i])\n                    mutation += 1\n        if mutation == 0:\n            return -1\n        return mutation"
    },
    {
        "number": 433,
        "title": "Minimum Genetic Mutation",
        "difficulty": 1,
        "pass": 1,
        "answer": "        if startGene == endGene:\n            return 0\n        \n        bank = set(bank)\n        \n        if startGene not in bank or endGene not in bank:\n            return -1\n        \n        q = collections.deque([(startGene, 0)])\n        visited = set()\n        visited.add(startGene)\n        \n        while q:\n            gene, step = q.popleft()\n            \n            if gene == endGene:\n                return step\n            \n            for i in range(len(gene)):\n                newGene = gene[:i] + 'A' + gene[i+1:]\n                if newGene in bank and newGene not in visited:\n                    q.append((newGene, step+1))\n                    visited.add(newGene)\n                \n                newGene = gene[:i] + 'C' + gene[i+1:]\n                if newGene in bank and newGene not in visited:\n                    q.append((newGene, step+1))\n                    visited.add(newGene)\n                \n                "
    },
    {
        "number": 433,
        "title": "Minimum Genetic Mutation",
        "difficulty": 1,
        "pass": 2,
        "answer": "        if startGene == endGene:\n            return 0\n        \n        if endGene not in bank:\n            return -1\n        \n        bank.append(startGene)\n        \n        len_start = len(startGene)\n        len_end = len(endGene)\n        \n        dp = [[0 for _ in range(len_end+1)] for _ in range(len_start+1)]\n        \n        for i in range(len_start+1):\n            dp[i][0] = i\n        \n        for j in range(len_end+1):\n            dp[0][j] = j\n        \n        for i in range(1, len_start+1):\n            for j in range(1, len_end+1):\n                if startGene[i-1] == endGene[j-1]:\n                    dp[i][j] = dp[i-1][j-1]\n                else:\n                    dp[i][j] = min(dp[i-1][j], dp[i][j-1], dp[i-"
    },
    {
        "number": 433,
        "title": "Minimum Genetic Mutation",
        "difficulty": 1,
        "pass": 3,
        "answer": "        if endGene not in bank:\n            return -1\n        if startGene == endGene:\n            return 0"
    },
    {
        "number": 433,
        "title": "Minimum Genetic Mutation",
        "difficulty": 1,
        "pass": 4,
        "answer": "        def is_valid(gene):\n            count = 0\n            for i in range(len(gene)):\n                if gene[i]!= endGene[i]:\n                    count += 1\n                if count > 1:\n                    return False\n            return True\n        \n        queue = collections.deque([(startGene, 0)])\n        visited = set()\n        while queue:\n            gene, step = queue.popleft()\n            if gene == endGene:\n                return step\n            if gene in bank and gene not in visited:\n                visited.add(gene)\n                for i in range(len(gene)):\n                    if gene[i]!= endGene[i]:\n                        queue.append((gene[:i]+endGene[i]+gene[i+1:], step+1))\n        return -1"
    },
    {
        "number": 433,
        "title": "Minimum Genetic Mutation",
        "difficulty": 1,
        "pass": 5,
        "answer": "        \n        if endGene not in bank:\n            return -1\n        \n        m = len(startGene)\n        n = len(endGene)\n        \n        if m!= n:\n            return -1\n        \n        dp = [[0 for _ in range(m+1)] for _ in range(n+1)]\n        \n        for i in range(1, n+1):\n            dp[i][0] = i\n        \n        for i in range(1, m+1):\n            dp[0][i] = i\n        \n        for i in range(1, n+1):\n            for j in range(1, m+1):\n                if endGene[i-1] == startGene[j-1]:\n                    dp[i][j] = dp[i-1][j-1]\n                else:\n                    dp[i][j] = min(dp[i-1][j], dp[i][j-1], dp[i-1][j-1]) + 1\n        \n        return dp[-1][-1]"
    },
    {
        "number": 433,
        "title": "Minimum Genetic Mutation",
        "difficulty": 1,
        "pass": 6,
        "answer": "        if not startGene or not endGene or len(startGene)!= len(endGene):\n            return -1\n        if startGene in bank or endGene in bank:\n            return 0\n        bank.append(startGene)\n        bank.append(endGene)\n        m, n = len(startGene), len(endGene)\n        dp = [[0] * (n + 1) for _ in range(m + 1)]\n        for i in range(1, m + 1):\n            dp[i][0] = i\n        for j in range(1, n + 1):\n            dp[0][j] = j\n        for i in range(1, m + 1):\n            for j in range(1, n + 1):\n                if startGene[i - 1] == endGene[j - 1]:\n                    dp[i][j] = dp[i - 1][j - 1]\n                else:\n                    dp[i][j] = min(dp[i - 1][j], dp[i][j - 1], dp[i - 1][j -"
    },
    {
        "number": 433,
        "title": "Minimum Genetic Mutation",
        "difficulty": 1,
        "pass": 7,
        "answer": "        if startGene == endGene:\n            return 0\n        if startGene not in bank:\n            return -1\n        if endGene not in bank:\n            return -1\n        \n        queue = deque()\n        queue.append((startGene, 0))\n        visited = set()\n        visited.add(startGene)\n        \n        while queue:\n            currGene, step = queue.popleft()\n            if currGene == endGene:\n                return step\n            for i in range(len(currGene)):\n                temp = currGene[:i] + currGene[i+1:]\n                if temp in bank and temp not in visited:\n                    queue.append((temp, step+1))\n                    visited.add(temp)\n        return -1"
    },
    {
        "number": 433,
        "title": "Minimum Genetic Mutation",
        "difficulty": 1,
        "pass": 8,
        "answer": "        if endGene not in bank:\n            return -1\n        \n        queue = collections.deque([(startGene, 0)])\n        visited = set()\n        visited.add(startGene)\n        \n        while queue:\n            gene, step = queue.popleft()\n            if gene == endGene:\n                return step\n            \n            for i in range(len(gene)):\n                for c in ['A', 'C', 'G', 'T']:\n                    newGene = gene[:i] + c + gene[i+1:]\n                    if newGene not in bank:\n                        continue\n                    if newGene in visited:\n                        continue\n                    visited.add(newGene)\n                    queue.append((newGene, step+1))\n        return -1"
    },
    {
        "number": 433,
        "title": "Minimum Genetic Mutation",
        "difficulty": 1,
        "pass": 9,
        "answer": "        if endGene not in bank:\n            return -1\n        if startGene == endGene:\n            return 0\n        \n        n = len(startGene)\n        dp = [[0 for _ in range(n)] for _ in range(n)]\n        \n        for i in range(n):\n            dp[i][i] = 1\n        \n        for i in range(n-1, -1, -1):\n            for j in range(i+1, n):\n                if startGene[i] == endGene[j]:\n                    dp[i][j] = dp[i+1][j-1]\n                else:\n                    dp[i][j] = min(dp[i+1][j], dp[i][j-1]) + 1\n        \n        return dp[0][n-1]"
    },
    {
        "number": 434,
        "title": "Number of Segments in a String",
        "difficulty": 0,
        "pass": 0,
        "answer": "        # count = 0\n        # for i in range(len(s)):\n        #     if s[i]!='':\n        #         count += 1\n        # return count"
    },
    {
        "number": 434,
        "title": "Number of Segments in a String",
        "difficulty": 0,
        "pass": 1,
        "answer": "        s = s.strip()\n        if not s:\n            return 0\n        return len(s.split())"
    },
    {
        "number": 434,
        "title": "Number of Segments in a String",
        "difficulty": 0,
        "pass": 2,
        "answer": "        return len(s.split())"
    },
    {
        "number": 434,
        "title": "Number of Segments in a String",
        "difficulty": 0,
        "pass": 3,
        "answer": "        return len(s.split())"
    },
    {
        "number": 434,
        "title": "Number of Segments in a String",
        "difficulty": 0,
        "pass": 4,
        "answer": "        return len(s.split())"
    },
    {
        "number": 434,
        "title": "Number of Segments in a String",
        "difficulty": 0,
        "pass": 5,
        "answer": "        return len(s.split())"
    },
    {
        "number": 434,
        "title": "Number of Segments in a String",
        "difficulty": 0,
        "pass": 6,
        "answer": "        if not s:\n            return 0\n        return len(s.split())"
    },
    {
        "number": 434,
        "title": "Number of Segments in a String",
        "difficulty": 0,
        "pass": 7,
        "answer": "        return len(s.split())"
    },
    {
        "number": 434,
        "title": "Number of Segments in a String",
        "difficulty": 0,
        "pass": 8,
        "answer": "        count = 0\n        for i in range(len(s)):\n            if i == 0:\n                if s[i]!='':\n                    count += 1\n            else:\n                if s[i]!='' and s[i - 1]!='':\n                    count += 1\n        return count"
    },
    {
        "number": 434,
        "title": "Number of Segments in a String",
        "difficulty": 0,
        "pass": 9,
        "answer": "        if not s:\n            return 0\n        count = 0\n        i = 0\n        while i < len(s):\n            if s[i]!='':\n                j = i\n                while j < len(s) and s[j]!='':\n                    j += 1\n                count += 1\n                i = j\n            else:\n                i += 1\n        return count"
    },
    {
        "number": 435,
        "title": "Non-overlapping Intervals",
        "difficulty": 1,
        "pass": 0,
        "answer": "        if not intervals:\n            return 0\n        \n        intervals.sort(key=lambda x: x[1])\n        n = len(intervals)\n        res = 0\n        end = intervals[0][1]\n        for i in range(1, n):\n            if intervals[i][0] < end:\n                res += 1\n                end = max(end, intervals[i][1])\n            else:\n                end = intervals[i][1]\n        return res"
    },
    {
        "number": 435,
        "title": "Non-overlapping Intervals",
        "difficulty": 1,
        "pass": 1,
        "answer": "        if not intervals:\n            return 0\n        \n        intervals.sort(key=lambda x: x[0])\n        n = len(intervals)\n        i = 1\n        while i < n:\n            if intervals[i][0] <= intervals[i-1][1]:\n                intervals[i-1][1] = max(intervals[i-1][1], intervals[i][1])\n                intervals.pop(i)\n            else:\n                i += 1\n        \n        return len(intervals)"
    },
    {
        "number": 435,
        "title": "Non-overlapping Intervals",
        "difficulty": 1,
        "pass": 2,
        "answer": "        n = len(intervals)\n        if n == 0:\n            return 0\n        if n == 1:\n            return 0\n        intervals.sort(key=lambda x: x[1])\n        end = intervals[0][1]\n        count = 1\n        for i in range(1, n):\n            if intervals[i][0] >= end:\n                count += 1\n                end = intervals[i][1]\n        return count"
    },
    {
        "number": 435,
        "title": "Non-overlapping Intervals",
        "difficulty": 1,
        "pass": 3,
        "answer": "        \n        if not intervals:\n            return 0\n        \n        intervals.sort(key=lambda x: x[0])\n        \n        count = 1\n        end = intervals[0][1]\n        for i in range(1, len(intervals)):\n            if intervals[i][0] <= end:\n                count += 1\n                end = max(end, intervals[i][1])\n            else:\n                count += 1\n                end = intervals[i][1]\n                \n        return count\n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n"
    },
    {
        "number": 435,
        "title": "Non-overlapping Intervals",
        "difficulty": 1,
        "pass": 4,
        "answer": "        if len(intervals) == 0:\n            return 0\n        \n        intervals.sort(key=lambda x: x[0])\n        n = len(intervals)\n        i = 1\n        while i < n:\n            if intervals[i][0] <= intervals[i-1][1]:\n                intervals.pop(i)\n                n -= 1\n            else:\n                i += 1\n        return len(intervals)"
    },
    {
        "number": 435,
        "title": "Non-overlapping Intervals",
        "difficulty": 1,
        "pass": 5,
        "answer": "        \n        intervals.sort(key=lambda x: x[0])\n        n = len(intervals)\n        if n == 0:\n            return 0\n        \n        cnt = 1\n        end = intervals[0][1]\n        for i in range(1, n):\n            if intervals[i][0] <= end:\n                cnt += 1\n                end = max(end, intervals[i][1])\n            else:\n                cnt += 1\n                end = intervals[i][1]\n        return cnt"
    },
    {
        "number": 435,
        "title": "Non-overlapping Intervals",
        "difficulty": 1,
        "pass": 6,
        "answer": "        \n        if not intervals:\n            return 0\n        \n        intervals.sort(key=lambda x:x[0])\n        \n        count = 1\n        end = intervals[0][1]\n        for i in range(1, len(intervals)):\n            if end >= intervals[i][0]:\n                count += 1\n                end = max(end, intervals[i][1])\n            else:\n                count += 1\n                end = intervals[i][1]\n        \n        return count\n        \n        \nclass Solution:\n    def eraseOverlapIntervals(self, intervals: List[List[int]]) -> int:\n        \"\"\"\n        Given an array of intervals intervals where intervals[i] = [starti, endi], return the minimum number of intervals you need to remove to make the rest of the intervals non-overlapping.\n        Example 1:\n        Input: intervals = [[1,2],[2,3],[3,4],[1,3]]\n        Output: 1\n        Explanation: [1,3] can be removed and the rest of the intervals are non-"
    },
    {
        "number": 435,
        "title": "Non-overlapping Intervals",
        "difficulty": 1,
        "pass": 7,
        "answer": "        \n        intervals.sort(key=lambda x: x[1])\n        res = 0\n        end = intervals[0][1]\n        for i in range(1, len(intervals)):\n            if intervals[i][0] < end:\n                res += 1\n                end = max(end, intervals[i][1])\n            else:\n                end = intervals[i][1]\n        return res"
    },
    {
        "number": 435,
        "title": "Non-overlapping Intervals",
        "difficulty": 1,
        "pass": 8,
        "answer": "        n = len(intervals)\n        if n == 0:\n            return 0\n        intervals.sort(key=lambda x: (x[0], -x[1]))\n        end = intervals[0][1]\n        res = 1\n        for i in range(1, n):\n            if end >= intervals[i][0]:\n                end = max(end, intervals[i][1])\n            else:\n                res += 1\n                end = intervals[i][1]\n        return res"
    },
    {
        "number": 435,
        "title": "Non-overlapping Intervals",
        "difficulty": 1,
        "pass": 9,
        "answer": "        \n        if not intervals:\n            return 0\n        \n        intervals.sort(key=lambda x: x[0])\n        \n        length = len(intervals)\n        count = 0\n        \n        for i in range(1, length):\n            if intervals[i][0] <= intervals[i-1][1]:\n                count += 1\n            else:\n                count = 0\n            \n            if count >= 2:\n                return count\n        \n        return count\n"
    },
    {
        "number": 436,
        "title": "Find Right Interval",
        "difficulty": 1,
        "pass": 0,
        "answer": "        intervals.sort(key=lambda x: (x[0], -x[1]))\n        res = [-1] * len(intervals)\n        for i in range(len(intervals)):\n            for j in range(i + 1, len(intervals)):\n                if intervals[j][0] >= intervals[i][1]:\n                    res[i] = j\n                    break\n        return res"
    },
    {
        "number": 436,
        "title": "Find Right Interval",
        "difficulty": 1,
        "pass": 1,
        "answer": "        n = len(intervals)\n        if n == 0:\n            return []\n        intervals.sort(key=lambda x: (x[0], -x[1]))\n        right = [-1] * n\n        for i in range(n):\n            for j in range(i + 1, n):\n                if intervals[i][1] >= intervals[j][0]:\n                    right[i] = j\n                    break\n        return right"
    },
    {
        "number": 436,
        "title": "Find Right Interval",
        "difficulty": 1,
        "pass": 2,
        "answer": "        \n        # sort the intervals by end time\n        sorted_intervals = sorted(intervals, key=lambda x: x[1])\n        \n        right_intervals = [-1] * len(intervals)\n        \n        for i in range(len(sorted_intervals) - 1):\n            if sorted_intervals[i][1] >= sorted_intervals[i+1][0]:\n                right_intervals[sorted_intervals[i][0]] = sorted_intervals[i+1][1]\n        \n        return right_intervals"
    },
    {
        "number": 436,
        "title": "Find Right Interval",
        "difficulty": 1,
        "pass": 3,
        "answer": "        n = len(intervals)\n        intervals.sort(key=lambda x: (x[0], -x[1]))\n        res = [-1] * n\n        for i, (start, end) in enumerate(intervals):\n            for j in range(i + 1, n):\n                if start >= intervals[j][1]:\n                    res[i] = j\n                    break\n        return res"
    },
    {
        "number": 436,
        "title": "Find Right Interval",
        "difficulty": 1,
        "pass": 4,
        "answer": "        intervals.sort(key=lambda x: x[0])\n        res = [-1] * len(intervals)\n        for i in range(len(intervals)):\n            for j in range(i + 1, len(intervals)):\n                if intervals[j][0] >= intervals[i][1]:\n                    res[i] = j\n                    break\n        return res"
    },
    {
        "number": 436,
        "title": "Find Right Interval",
        "difficulty": 1,
        "pass": 5,
        "answer": "        intervals.sort(key=lambda x: x[0])\n        res = [-1] * len(intervals)\n        for i in range(len(intervals)):\n            for j in range(i + 1, len(intervals)):\n                if intervals[j][0] >= intervals[i][1]:\n                    res[i] = j\n                    break\n        return res"
    },
    {
        "number": 436,
        "title": "Find Right Interval",
        "difficulty": 1,
        "pass": 6,
        "answer": "        \n        intervals.sort(key=lambda x: x[0])\n        \n        res = [-1] * len(intervals)\n        \n        for i in range(len(intervals)):\n            for j in range(i+1, len(intervals)):\n                if intervals[j][0] >= intervals[i][1]:\n                    res[i] = j\n                    break\n        \n        return res\n"
    },
    {
        "number": 436,
        "title": "Find Right Interval",
        "difficulty": 1,
        "pass": 7,
        "answer": "        \n        # sort by start\n        intervals.sort(key=lambda x: x[0])\n        \n        # initialize results\n        results = [-1 for _ in range(len(intervals))]\n        \n        for i in range(len(intervals)):\n            for j in range(i+1, len(intervals)):\n                if intervals[j][0] >= intervals[i][1]:\n                    results[i] = j\n                    break\n        \n        return results"
    },
    {
        "number": 436,
        "title": "Find Right Interval",
        "difficulty": 1,
        "pass": 8,
        "answer": "        # sort the intervals by start\n        intervals = sorted(intervals, key=lambda x: x[0])\n        right = [-1] * len(intervals)\n        stack = []\n        for i in range(len(intervals)):\n            while stack and intervals[stack[-1]][1] < intervals[i][0]:\n                j = stack.pop()\n                right[j] = i\n            stack.append(i)\n        return right"
    },
    {
        "number": 436,
        "title": "Find Right Interval",
        "difficulty": 1,
        "pass": 9,
        "answer": "        n = len(intervals)\n        if n == 0:\n            return []\n        intervals.sort(key=lambda x: x[0])\n        res = [-1] * n\n        for i in range(n):\n            start = intervals[i][0]\n            for j in range(i + 1, n):\n                end = intervals[j][1]\n                if start >= end:\n                    res[i] = j\n                    break\n        return res"
    }
]