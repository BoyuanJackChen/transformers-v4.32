[
    {
        "number": 1,
        "title": "Two Sum",
        "difficulty": 0,
        "pass": 0,
        "answer": "        for i in range(len(nums)):\n            for j in range(i + 1, len(nums)):\n                if nums[i] + nums[j] == target:\n                    return [i, j]"
    },
    {
        "number": 1,
        "title": "Two Sum",
        "difficulty": 0,
        "pass": 1,
        "answer": "        for i in range(len(nums)):\n            for j in range(i + 1, len(nums)):\n                if nums[i] + nums[j] == target:\n                    return [i, j]"
    },
    {
        "number": 1,
        "title": "Two Sum",
        "difficulty": 0,
        "pass": 2,
        "answer": "        for i in range(len(nums)):\n            for j in range(i+1, len(nums)):\n                if nums[i] + nums[j] == target:\n                    return [i, j]"
    },
    {
        "number": 1,
        "title": "Two Sum",
        "difficulty": 0,
        "pass": 3,
        "answer": "        for i in range(len(nums)):\n            for j in range(i + 1, len(nums)):\n                if nums[i] + nums[j] == target:\n                    return [i, j]"
    },
    {
        "number": 1,
        "title": "Two Sum",
        "difficulty": 0,
        "pass": 4,
        "answer": "        for i in range(len(nums)):\n            for j in range(i+1, len(nums)):\n                if nums[i] + nums[j] == target:\n                    return [i, j]"
    },
    {
        "number": 1,
        "title": "Two Sum",
        "difficulty": 0,
        "pass": 5,
        "answer": "        # Brute Force\n        # for i in range(len(nums)):\n        #     for j in range(i+1, len(nums)):\n        #         if nums[i] + nums[j] == target:\n        #             return [i, j]\n        # Time: O(n^2)\n        # Space: O(1)\n        \n        # Hash Table\n        # Time: O(n)\n        # Space: O(n)\n        nums_dict = {}\n        for i in range(len(nums)):\n            if target - nums[i] in nums_dict:\n                return [nums_dict[target - nums[i]], i]\n            else:\n                nums_dict[nums[i]] = i\n                \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        "
    },
    {
        "number": 1,
        "title": "Two Sum",
        "difficulty": 0,
        "pass": 6,
        "answer": "        for i in range(len(nums)):\n            for j in range(i + 1, len(nums)):\n                if nums[i] + nums[j] == target:\n                    return [i, j]"
    },
    {
        "number": 1,
        "title": "Two Sum",
        "difficulty": 0,
        "pass": 7,
        "answer": "        \n        for i in range(len(nums)):\n            for j in range(i+1, len(nums)):\n                if nums[i] + nums[j] == target:\n                    return [i, j]\n"
    },
    {
        "number": 1,
        "title": "Two Sum",
        "difficulty": 0,
        "pass": 8,
        "answer": "        # for i in range(len(nums)):\n        #     for j in range(i + 1, len(nums)):\n        #         if nums[i] + nums[j] == target:\n        #             return [i, j]\n        # return []\n        \n        # for i in range(len(nums)):\n        #     for j in range(i + 1, len(nums)):\n        #         if nums[i] + nums[j] == target:\n        #             return [i, j]\n        # return []\n        \n        # for i in range(len(nums)):\n        #     for j in range(i + 1, len(nums)):\n        #         if nums[i] + nums[j] == target:\n        #             return [i, j]\n        # return []\n        \n        # for i in range(len(nums)):\n        #     for j in range(i + 1, len(nums)):\n        #         if nums[i] +"
    },
    {
        "number": 1,
        "title": "Two Sum",
        "difficulty": 0,
        "pass": 9,
        "answer": "        \n        for i in range(len(nums)):\n            for j in range(i+1, len(nums)):\n                if nums[i] + nums[j] == target:\n                    return [i, j]\n        \n    def twoSum(self, nums: List[int], target: int) -> List[int]:\n        \"\"\"\n        Given an array of integers nums and an integer target, return indices of the two numbers such that they add up to target.\n        You may assume that each input would have exactly one solution, and you may not use the same element twice.\n        You can return the answer in any order.\n        Example 1:\n        Input: nums = [2,7,11,15], target = 9\n        Output: [0,1]\n        Explanation: Because nums[0] + nums[1] == 9, we return [0, 1].\n        Example 2:\n        Input: nums = [3,2,4], target = 6\n        Output: [1,2]\n        Example 3:\n        Input: num"
    },
    {
        "number": 2,
        "title": "Add Two Numbers",
        "difficulty": 1,
        "pass": 0,
        "answer": "        \n        carry = 0\n        root = n = ListNode(0)\n        \n        while l1 or l2 or carry:\n            v1 = v2 = 0\n            if l1:\n                v1 = l1.val\n                l1 = l1.next\n            if l2:\n                v2 = l2.val\n                l2 = l2.next\n                \n            carry, val = divmod(v1+v2+carry, 10)\n            n.next = ListNode(val)\n            n = n.next\n            \n        return root.next"
    },
    {
        "number": 2,
        "title": "Add Two Numbers",
        "difficulty": 1,
        "pass": 1,
        "answer": "        carry = 0\n        root = n = ListNode(0)\n        while l1 or l2 or carry:\n            v1 = v2 = 0\n            if l1:\n                v1 = l1.val\n                l1 = l1.next\n            if l2:\n                v2 = l2.val\n                l2 = l2.next\n            carry, val = divmod(v1+v2+carry, 10)\n            n.next = ListNode(val)\n            n = n.next\n        return root.next"
    },
    {
        "number": 2,
        "title": "Add Two Numbers",
        "difficulty": 1,
        "pass": 2,
        "answer": "        carry = 0\n        dummy = cur = ListNode(0)\n        while l1 or l2 or carry:\n            v1 = v2 = 0\n            if l1:\n                v1 = l1.val\n                l1 = l1.next\n            if l2:\n                v2 = l2.val\n                l2 = l2.next\n            carry, val = divmod(v1+v2+carry, 10)\n            cur.next = ListNode(val)\n            cur = cur.next\n        return dummy.next"
    },
    {
        "number": 2,
        "title": "Add Two Numbers",
        "difficulty": 1,
        "pass": 3,
        "answer": "        carry = 0\n        head = ListNode(0)\n        curr = head\n        while l1 or l2 or carry:\n            if l1:\n                carry += l1.val\n                l1 = l1.next\n            if l2:\n                carry += l2.val\n                l2 = l2.next\n            curr.next = ListNode(carry % 10)\n            curr = curr.next\n            carry //= 10\n        return head.next"
    },
    {
        "number": 2,
        "title": "Add Two Numbers",
        "difficulty": 1,
        "pass": 4,
        "answer": "        if not l1 or not l2:\n            return l1 or l2\n        dummy = cur = ListNode(0)\n        carry = 0\n        while l1 or l2 or carry:\n            if l1:\n                carry += l1.val\n                l1 = l1.next\n            if l2:\n                carry += l2.val\n                l2 = l2.next\n            cur.next = ListNode(carry % 10)\n            cur = cur.next\n            carry //= 10\n        return dummy.next"
    },
    {
        "number": 2,
        "title": "Add Two Numbers",
        "difficulty": 1,
        "pass": 5,
        "answer": "        carry = 0\n        dummy = cur = ListNode(0)\n        while l1 or l2 or carry:\n            v1 = v2 = 0\n            if l1:\n                v1 = l1.val\n                l1 = l1.next\n            if l2:\n                v2 = l2.val\n                l2 = l2.next\n            carry, val = divmod(v1+v2+carry, 10)\n            cur.next = ListNode(val)\n            cur = cur.next\n        return dummy.next"
    },
    {
        "number": 2,
        "title": "Add Two Numbers",
        "difficulty": 1,
        "pass": 6,
        "answer": "        \n        carry = 0\n        root = n = ListNode(0)\n        \n        while l1 or l2 or carry:\n            v1 = v2 = 0\n            if l1:\n                v1 = l1.val\n                l1 = l1.next\n            if l2:\n                v2 = l2.val\n                l2 = l2.next\n                \n            carry, val = divmod(v1+v2+carry, 10)\n            n.next = ListNode(val)\n            n = n.next\n            \n        return root.next"
    },
    {
        "number": 2,
        "title": "Add Two Numbers",
        "difficulty": 1,
        "pass": 7,
        "answer": "        carry = 0\n        root = n = ListNode(0)\n        while l1 or l2 or carry:\n            v1 = v2 = 0\n            if l1:\n                v1 = l1.val\n                l1 = l1.next\n            if l2:\n                v2 = l2.val\n                l2 = l2.next\n            carry, val = divmod(v1+v2+carry, 10)\n            n.next = ListNode(val)\n            n = n.next\n        return root.next"
    },
    {
        "number": 2,
        "title": "Add Two Numbers",
        "difficulty": 1,
        "pass": 8,
        "answer": "        # Time complexity: O(max(m,n))\n        # Space complexity: O(max(m,n))\n        if not l1 and not l2:\n            return None\n        if not l1:\n            return l2\n        if not l2:\n            return l1\n        carry = 0\n        dummy = ListNode(0)\n        cur = dummy\n        while l1 or l2:\n            x = l1.val if l1 else 0\n            y = l2.val if l2 else 0\n            s = carry + x + y\n            carry = s // 10\n            cur.next = ListNode(s % 10)\n            cur = cur.next\n            if l1:\n                l1 = l1.next\n            if l2:\n                l2 = l2.next\n        if carry > 0:\n            cur.next = ListNode(carry)\n        return dummy.next"
    },
    {
        "number": 2,
        "title": "Add Two Numbers",
        "difficulty": 1,
        "pass": 9,
        "answer": "        carry = 0\n        root = n = ListNode(0)\n        while l1 or l2 or carry:\n            v1 = v2 = 0\n            if l1:\n                v1 = l1.val\n                l1 = l1.next\n            if l2:\n                v2 = l2.val\n                l2 = l2.next\n            carry, val = divmod(v1+v2+carry, 10)\n            n.next = ListNode(val)\n            n = n.next\n        return root.next\n"
    },
    {
        "number": 3,
        "title": "Longest Substring Without Repeating Characters",
        "difficulty": 1,
        "pass": 0,
        "answer": "        if len(s) == 0:\n            return 0\n        elif len(s) == 1:\n            return 1\n        elif len(s) == 2:\n            if s[0] == s[1]:\n                return 1\n            else:\n                return 2\n        elif len(s) == 3:\n            if s[0] == s[1] and s[1] == s[2]:\n                return 1\n            elif s[0] == s[1] and s[1]!= s[2]:\n                return 2\n            elif s[0]!= s[1] and s[1] == s[2]:\n                return 2\n            else:\n                return 3\n        else:\n            if s[0] == s[1] and s[1] == s[2]:\n                return 1\n            elif s[0] == s[1] and s[1]!= s[2]:\n                return 2\n            elif s[0]!= s[1] and s[1] == s[2]:\n                return 2\n            else:"
    },
    {
        "number": 3,
        "title": "Longest Substring Without Repeating Characters",
        "difficulty": 1,
        "pass": 1,
        "answer": "        # \u54c8\u5e0c\u96c6\u5408\uff0c\u8bb0\u5f55\u6bcf\u4e2a\u5b57\u7b26\u662f\u5426\u51fa\u73b0\u8fc7\n        occ = set()\n        n = len(s)\n        # \u53f3\u6307\u9488\uff0c\u521d\u59cb\u503c\u4e3a -1\uff0c\u76f8\u5f53\u4e8e\u6211\u4eec\u5728\u5b57\u7b26\u4e32\u7684\u5de6\u8fb9\u754c\u7684\u5de6\u4fa7\uff0c\u8fd8\u6ca1\u6709\u5f00\u59cb\u79fb\u52a8\n        rk, ans = -1, 0\n        for i in range(n):\n            if i!= 0:\n                # \u5de6\u6307\u9488\u5411\u53f3\u79fb\u52a8\u4e00\u683c\uff0c\u79fb\u9664\u4e00\u4e2a\u5b57\u7b26\n                occ.remove(s[i - 1])\n            while rk + 1 < n and s[rk + 1] not in occ:\n                # \u4e0d\u65ad\u5730\u79fb\u52a8\ufffd"
    },
    {
        "number": 3,
        "title": "Longest Substring Without Repeating Characters",
        "difficulty": 1,
        "pass": 2,
        "answer": "        max_len = 0\n        start = 0\n        end = 0\n        dic = {}\n        while end < len(s):\n            if s[end] in dic:\n                start = max(start, dic[s[end]] + 1)\n            dic[s[end]] = end\n            max_len = max(max_len, end - start + 1)\n            end += 1\n        return max_len"
    },
    {
        "number": 3,
        "title": "Longest Substring Without Repeating Characters",
        "difficulty": 1,
        "pass": 3,
        "answer": "        if len(s) == 0:\n            return 0\n        elif len(s) == 1:\n            return 1\n        elif len(s) == 2:\n            if s[0] == s[1]:\n                return 1\n            else:\n                return 2\n        else:\n            max_len = 0\n            for i in range(len(s)):\n                for j in range(i, len(s)):\n                    if len(set(s[i:j+1])) == len(s[i:j+1]):\n                        if len(s[i:j+1]) > max_len:\n                            max_len = len(s[i:j+1])\n            return max_len"
    },
    {
        "number": 3,
        "title": "Longest Substring Without Repeating Characters",
        "difficulty": 1,
        "pass": 4,
        "answer": "        if len(s) == 0:\n            return 0\n        if len(s) == 1:\n            return 1\n        max_len = 0\n        for i in range(len(s)):\n            for j in range(i, len(s)):\n                if len(set(s[i:j+1])) == len(s[i:j+1]):\n                    if len(s[i:j+1]) > max_len:\n                        max_len = len(s[i:j+1])\n        return max_len"
    },
    {
        "number": 3,
        "title": "Longest Substring Without Repeating Characters",
        "difficulty": 1,
        "pass": 5,
        "answer": "        if len(s) == 0:\n            return 0\n        if len(s) == 1:\n            return 1\n        if len(s) == 2:\n            if s[0]!= s[1]:\n                return 2\n            else:\n                return 1\n        if len(s) == 3:\n            if s[0]!= s[1] and s[0]!= s[2] and s[1]!= s[2]:\n                return 3\n            elif s[0]!= s[1] and s[0]!= s[2] and s[1] == s[2]:\n                return 2\n            elif s[0]!= s[1] and s[0] == s[2] and s[1]!= s[2]:\n                return 3\n            elif s[0]!= s[1] and s[0] == s[2] and s[1] == s[2]:\n                return 1\n            elif s[0] == s[1] and s[0]!= s[2] and s[1]!= s[2"
    },
    {
        "number": 3,
        "title": "Longest Substring Without Repeating Characters",
        "difficulty": 1,
        "pass": 6,
        "answer": "        if len(s) == 0:\n            return 0\n        elif len(s) == 1:\n            return 1\n        elif len(s) == 2:\n            if s[0] == s[1]:\n                return 1\n            else:\n                return 2\n        elif len(s) == 3:\n            if s[0] == s[1] and s[0] == s[2]:\n                return 1\n            elif s[0] == s[1] and s[0]!= s[2]:\n                return 2\n            elif s[0]!= s[1] and s[0] == s[2]:\n                return 2\n            elif s[0]!= s[1] and s[0]!= s[2]:\n                return 3\n        else:\n            if s[0] == s[1] and s[0] == s[2]:\n                return 1\n            elif s[0] == s[1] and s[0]!= s[2]:\n                return 2\n            elif s[0]!= s[1"
    },
    {
        "number": 3,
        "title": "Longest Substring Without Repeating Characters",
        "difficulty": 1,
        "pass": 7,
        "answer": "        if len(s) == 0:\n            return 0\n        elif len(s) == 1:\n            return 1\n        elif len(s) == 2:\n            if s[0] == s[1]:\n                return 2\n            else:\n                return 1\n        else:\n            max_len = 0\n            for i in range(len(s)):\n                for j in range(i, len(s)):\n                    if len(set(s[i:j+1])) == len(s[i:j+1]):\n                        if len(s[i:j+1]) > max_len:\n                            max_len = len(s[i:j+1])\n            return max_len"
    },
    {
        "number": 3,
        "title": "Longest Substring Without Repeating Characters",
        "difficulty": 1,
        "pass": 8,
        "answer": "        if not s:\n            return 0\n        left = 0\n        lookup = set()\n        n = len(s)\n        max_len = 0\n        cur_len = 0\n        for i in range(n):\n            cur_len += 1\n            while s[i] in lookup:\n                lookup.remove(s[left])\n                left += 1\n                cur_len -= 1\n            if cur_len > max_len:\n                max_len = cur_len\n            lookup.add(s[i])\n        return max_len"
    },
    {
        "number": 3,
        "title": "Longest Substring Without Repeating Characters",
        "difficulty": 1,
        "pass": 9,
        "answer": "        max_len = 0\n        curr_len = 0\n        last_seen = {}\n        start = 0\n        for i, c in enumerate(s):\n            if c in last_seen and last_seen[c] >= start:\n                start = last_seen[c] + 1\n                curr_len = i - start + 1\n            else:\n                curr_len += 1\n            last_seen[c] = i\n            max_len = max(max_len, curr_len)\n        return max_len"
    },
    {
        "number": 4,
        "title": "Median of Two Sorted Arrays",
        "difficulty": 2,
        "pass": 0,
        "answer": "        m, n = len(nums1), len(nums2)\n        if m > n:\n            nums1, nums2, m, n = nums2, nums1, n, m\n        if n == 0:\n            raise ValueError"
    },
    {
        "number": 4,
        "title": "Median of Two Sorted Arrays",
        "difficulty": 2,
        "pass": 1,
        "answer": "        nums1.extend(nums2)\n        nums1.sort()\n        if len(nums1) % 2 == 0:\n            return (nums1[int(len(nums1) / 2)] + nums1[int(len(nums1) / 2) - 1]) / 2\n        else:\n            return nums1[int(len(nums1) / 2)]"
    },
    {
        "number": 4,
        "title": "Median of Two Sorted Arrays",
        "difficulty": 2,
        "pass": 2,
        "answer": "        if len(nums1) > len(nums2):\n            return self.findMedianSortedArrays(nums2, nums1)"
    },
    {
        "number": 4,
        "title": "Median of Two Sorted Arrays",
        "difficulty": 2,
        "pass": 3,
        "answer": "        if len(nums1) > len(nums2):\n            return self.findMedianSortedArrays(nums2, nums1)\n        x, y = len(nums1), len(nums2)\n        low, high = 0, x\n        while low <= high:\n            partitionX = (low + high) // 2\n            partitionY = (x + y + 1) // 2 - partitionX\n            maxLeftX = float('-inf') if partitionX == 0 else nums1[partitionX - 1]\n            minRightX = float('inf') if partitionX == x else nums1[partitionX]\n            maxLeftY = float('-inf') if partitionY == 0 else nums2[partitionY - 1]\n            minRightY = float('inf') if partitionY == y else nums2[partitionY]\n            if maxLeftX <= minRightY and maxLeftY <= minRightX:\n                if (x + y) % 2 == 0:\n                    return (max(maxLeftX, maxLeftY) +"
    },
    {
        "number": 4,
        "title": "Median of Two Sorted Arrays",
        "difficulty": 2,
        "pass": 4,
        "answer": "        def find_kth(nums1, nums2, k):\n            if not nums1:\n                return nums2[k]\n            if not nums2:\n                return nums1[k]\n            if k == len(nums1) + len(nums2) - 1:\n                return max(nums1[-1], nums2[-1])\n            if k >= len(nums1):\n                return nums2[k]\n            if k >= len(nums2):\n                return nums1[k]\n            if nums1[k//2] > nums2[k//2]:\n                return find_kth(nums1, nums2[k//2+1:], k-k//2-1)\n            else:\n                return find_kth(nums1[k//2+1:], nums2, k-k//2-1)"
    },
    {
        "number": 4,
        "title": "Median of Two Sorted Arrays",
        "difficulty": 2,
        "pass": 5,
        "answer": "        if len(nums1) > len(nums2):\n            return self.findMedianSortedArrays(nums2, nums1)"
    },
    {
        "number": 4,
        "title": "Median of Two Sorted Arrays",
        "difficulty": 2,
        "pass": 6,
        "answer": "        m, n = len(nums1), len(nums2)\n        if m > n:\n            nums1, nums2, m, n = nums2, nums1, n, m\n        if n == 0:\n            raise ValueError"
    },
    {
        "number": 4,
        "title": "Median of Two Sorted Arrays",
        "difficulty": 2,
        "pass": 7,
        "answer": "        m, n = len(nums1), len(nums2)\n        if m > n:\n            nums1, nums2, m, n = nums2, nums1, n, m\n        if n == 0:\n            raise ValueError"
    },
    {
        "number": 4,
        "title": "Median of Two Sorted Arrays",
        "difficulty": 2,
        "pass": 8,
        "answer": "        m, n = len(nums1), len(nums2)\n        if m > n:\n            nums1, nums2, m, n = nums2, nums1, n, m\n        if n == 0:\n            raise ValueError"
    },
    {
        "number": 4,
        "title": "Median of Two Sorted Arrays",
        "difficulty": 2,
        "pass": 9,
        "answer": "        m, n = len(nums1), len(nums2)\n        if m > n:\n            nums1, nums2, m, n = nums2, nums1, n, m\n        if n == 0:\n            raise ValueError"
    },
    {
        "number": 5,
        "title": "Longest Palindromic Substring",
        "difficulty": 1,
        "pass": 0,
        "answer": "        n = len(s)\n        dp = [[False] * n for _ in range(n)]\n        ans = \"\"\n        # \u679a\u4e3e\u5b50\u4e32\u7684\u957f\u5ea6 l+1\n        for l in range(n):\n            # \u679a\u4e3e\u5b50\u4e32\u7684\u8d77\u59cb\u4f4d\u7f6e i\uff0c\u8fd9\u6837\u53ef\u4ee5\u901a\u8fc7 j=i+l \u5f97\u5230\u5b50\u4e32\u7684\u7ed3\u675f\u4f4d\u7f6e\n            for i in range(n):\n                j = i + l\n                if j >= len(s):\n                    break\n                if l == 0:\n                    dp[i][j] = True\n                elif l == 1:\n                    dp[i][j] = (s[i] == s[j])\n                else:\n                    dp[i][j] = (dp[i + 1][j - 1] and s[i] == s[j])\n                if dp[i][j] and l + 1 > len(ans):\n                    ans = s["
    },
    {
        "number": 5,
        "title": "Longest Palindromic Substring",
        "difficulty": 1,
        "pass": 1,
        "answer": "        if len(s) == 0:\n            return \"\"\n        elif len(s) == 1:\n            return s\n        else:\n            max_len = 1\n            res = s[0]\n            for i in range(len(s)):\n                for j in range(i, len(s)):\n                    if s[i:j+1] == s[i:j+1][::-1] and len(s[i:j+1]) > max_len:\n                        max_len = len(s[i:j+1])\n                        res = s[i:j+1]\n            return res"
    },
    {
        "number": 5,
        "title": "Longest Palindromic Substring",
        "difficulty": 1,
        "pass": 2,
        "answer": "        if len(s) < 2:\n            return s\n        if len(s) == 2:\n            if s[0] == s[1]:\n                return s\n            else:\n                return s[0]"
    },
    {
        "number": 5,
        "title": "Longest Palindromic Substring",
        "difficulty": 1,
        "pass": 3,
        "answer": "        if len(s) == 0:\n            return \"\"\n        if len(s) == 1:\n            return s\n        longest = s[0]\n        for i in range(len(s)):\n            for j in range(i + 1, len(s) + 1):\n                if s[i:j] == s[i:j][::-1]:\n                    if len(s[i:j]) > len(longest):\n                        longest = s[i:j]\n        return longest"
    },
    {
        "number": 5,
        "title": "Longest Palindromic Substring",
        "difficulty": 1,
        "pass": 4,
        "answer": "        if len(s) == 0:\n            return \"\"\n        elif len(s) == 1:\n            return s\n        else:\n            longest = s[0]\n            for i in range(len(s)):\n                for j in range(i, len(s)):\n                    if s[i:j+1] == s[i:j+1][::-1] and len(s[i:j+1]) > len(longest):\n                        longest = s[i:j+1]\n            return longest"
    },
    {
        "number": 5,
        "title": "Longest Palindromic Substring",
        "difficulty": 1,
        "pass": 5,
        "answer": "        if len(s) < 2:\n            return s\n        if len(s) == 2:\n            if s[0] == s[1]:\n                return s\n            else:\n                return s[0]\n        dp = [[False for _ in range(len(s))] for _ in range(len(s))]\n        for i in range(len(s)):\n            dp[i][i] = True\n        max_len = 1\n        start = 0\n        for i in range(len(s) - 1):\n            if s[i] == s[i + 1]:\n                dp[i][i + 1] = True\n                start = i\n                max_len = 2\n        for k in range(3, len(s) + 1):\n            for i in range(len(s) - k + 1):\n                j = i + k - 1\n                if dp[i + 1][j - 1] and s[i] == s[j]:\n                    dp[i][j] = True\n                    if k > max_len:\n                        max_"
    },
    {
        "number": 5,
        "title": "Longest Palindromic Substring",
        "difficulty": 1,
        "pass": 6,
        "answer": "        n = len(s)\n        if n < 2:\n            return s\n        dp = [[False for _ in range(n)] for _ in range(n)]\n        max_len = 1\n        start = 0\n        for i in range(n):\n            dp[i][i] = True\n        for j in range(1, n):\n            for i in range(0, j):\n                if s[i] == s[j]:\n                    if j - i < 3:\n                        dp[i][j] = True\n                    else:\n                        dp[i][j] = dp[i + 1][j - 1]\n                else:\n                    dp[i][j] = False\n                if dp[i][j]:\n                    cur_len = j - i + 1\n                    if cur_len > max_len:\n                        max_len = cur_len\n                        start = i\n        return s[start:start + max_len]"
    },
    {
        "number": 5,
        "title": "Longest Palindromic Substring",
        "difficulty": 1,
        "pass": 7,
        "answer": "        if not s:\n            return ''\n        n = len(s)\n        dp = [[False] * n for _ in range(n)]\n        max_len = 1\n        start = 0\n        for i in range(n):\n            dp[i][i] = True\n        for j in range(1, n):\n            for i in range(0, j):\n                if s[i] == s[j]:\n                    if j - i < 3:\n                        dp[i][j] = True\n                    else:\n                        dp[i][j] = dp[i + 1][j - 1]\n                else:\n                    dp[i][j] = False\n                if dp[i][j]:\n                    cur_len = j - i + 1\n                    if cur_len > max_len:\n                        max_len = cur_len\n                        start = i\n        return s[start:start + max_len]"
    },
    {
        "number": 5,
        "title": "Longest Palindromic Substring",
        "difficulty": 1,
        "pass": 8,
        "answer": "        if len(s) == 0:\n            return \"\"\n        elif len(s) == 1:\n            return s\n        elif len(s) == 2:\n            if s[0] == s[1]:\n                return s\n            else:\n                return s[0]\n        else:\n            if s[0] == s[-1]:\n                return self.longestPalindrome(s[1:-1]) + s[0]\n            else:\n                return max(self.longestPalindrome(s[1:]), self.longestPalindrome(s[:-1]), key=len)"
    },
    {
        "number": 5,
        "title": "Longest Palindromic Substring",
        "difficulty": 1,
        "pass": 9,
        "answer": "        if len(s) == 0:\n            return \"\"\n        if len(s) == 1:\n            return s\n        if len(s) == 2:\n            if s[0] == s[1]:\n                return s\n            else:\n                return s[0]\n        if len(s) == 3:\n            if s[0] == s[2]:\n                return s\n            elif s[0] == s[1]:\n                return s[0]\n            else:\n                return s[0:2]\n        if len(s) == 4:\n            if s[0] == s[3]:\n                return s\n            elif s[0] == s[1]:\n                return s[0:2]\n            elif s[1] == s[2]:\n                return s[1:3]\n            else:\n                return s[0:3]\n        if len(s) == 5:\n            if s[0] == s[4]:\n                return s\n            elif s[0] == s[1]:\n                return s["
    },
    {
        "number": 6,
        "title": "Zigzag Conversion",
        "difficulty": 1,
        "pass": 0,
        "answer": "        if numRows == 1:\n            return s\n        rows = [[] for _ in range(numRows)]\n        row = 0\n        going_down = False\n        for c in s:\n            rows[row].append(c)\n            if row == 0 or row == numRows - 1:\n                going_down = not going_down\n            row += 1 if going_down else -1\n        return ''.join(''.join(row) for row in rows)"
    },
    {
        "number": 6,
        "title": "Zigzag Conversion",
        "difficulty": 1,
        "pass": 1,
        "answer": "        if numRows == 1:\n            return s\n        res = [''] * numRows\n        i, step = 0, 1\n        for c in s:\n            res[i] += c\n            if i == 0:\n                step = 1\n            elif i == numRows - 1:\n                step = -1\n            i += step\n        return ''.join(res)"
    },
    {
        "number": 6,
        "title": "Zigzag Conversion",
        "difficulty": 1,
        "pass": 2,
        "answer": "        if numRows == 1:\n            return s\n        if numRows == 2:\n            return s[::2] + s[1::2]\n        if numRows == 3:\n            return s[::3] + s[1::3] + s[2::3]\n        if numRows == 4:\n            return s[::4] + s[1::4] + s[2::4] + s[3::4]\n        if numRows == 5:\n            return s[::5] + s[1::5] + s[2::5] + s[3::5] + s[4::5]\n        if numRows == 6:\n            return s[::6] + s[1::6] + s[2::6] + s[3::6] + s[4::6] + s[5::6]\n        if numRows == 7:\n            return s[::7] + s[1::7] + s[2::7] + s[3::7] + s[4::7] + s["
    },
    {
        "number": 6,
        "title": "Zigzag Conversion",
        "difficulty": 1,
        "pass": 3,
        "answer": "        if numRows == 1:\n            return s\n        elif numRows == 2:\n            return s[::2] + s[1::2]\n        else:\n            result = ''\n            for i in range(numRows):\n                if i == 0:\n                    result += s[i::numRows]\n                elif i == numRows - 1:\n                    result += s[i::numRows][::-1]\n                else:\n                    result += s[i::numRows][::-1] + s[i::numRows]\n            return result"
    },
    {
        "number": 6,
        "title": "Zigzag Conversion",
        "difficulty": 1,
        "pass": 4,
        "answer": "        if numRows == 1:\n            return s\n        rows = [\"\" for _ in range(numRows)]\n        row = 0\n        going_down = False\n        for c in s:\n            rows[row] += c\n            if row == 0 or row == numRows - 1:\n                going_down = not going_down\n            row += 1 if going_down else -1\n        return \"\".join(rows)"
    },
    {
        "number": 6,
        "title": "Zigzag Conversion",
        "difficulty": 1,
        "pass": 5,
        "answer": "        if numRows == 1:\n            return s\n        if numRows == 2:\n            return s[::2] + s[1::2]\n        n = len(s)\n        cycle = 2 * (numRows - 1)\n        res = \"\"\n        for i in range(numRows):\n            if i == 0 or i == numRows - 1:\n                res += s[i::cycle]\n            else:\n                res += s[i::cycle] + s[cycle - i::cycle]\n        return res"
    },
    {
        "number": 6,
        "title": "Zigzag Conversion",
        "difficulty": 1,
        "pass": 6,
        "answer": "        if numRows == 1:\n            return s\n        if numRows == 2:\n            return s[::2] + s[1::2]\n        if numRows == 3:\n            return s[0::3] + s[1::3] + s[2::3]\n        if numRows == 4:\n            return s[0::4] + s[1::4] + s[2::4] + s[3::4]\n        if numRows == 5:\n            return s[0::5] + s[1::5] + s[2::5] + s[3::5] + s[4::5]\n        if numRows == 6:\n            return s[0::6] + s[1::6] + s[2::6] + s[3::6] + s[4::6] + s[5::6]\n        if numRows == 7:\n            return s[0::7] + s[1::7] + s[2::7] + s[3::7] + s[4::"
    },
    {
        "number": 6,
        "title": "Zigzag Conversion",
        "difficulty": 1,
        "pass": 7,
        "answer": "        if numRows == 1 or numRows >= len(s):\n            return s"
    },
    {
        "number": 6,
        "title": "Zigzag Conversion",
        "difficulty": 1,
        "pass": 8,
        "answer": "        if numRows == 1 or numRows >= len(s):\n            return s\n        res = [\"\" for _ in range(numRows)]\n        i, flag = 0, -1\n        for c in s:\n            res[i] += c\n            if i == 0 or i == numRows - 1:\n                flag = -flag\n            i += flag\n        return \"\".join(res)"
    },
    {
        "number": 6,
        "title": "Zigzag Conversion",
        "difficulty": 1,
        "pass": 9,
        "answer": "        if numRows == 1 or numRows >= len(s):\n            return s\n        rows = [[] for _ in range(numRows)]\n        row = 0\n        going_down = False\n        for c in s:\n            rows[row].append(c)\n            if row == 0:\n                going_down = True\n            elif row == numRows - 1:\n                going_down = False\n            if going_down:\n                row += 1\n            else:\n                row -= 1\n        return ''.join([''.join(row) for row in rows])"
    },
    {
        "number": 7,
        "title": "Reverse Integer",
        "difficulty": 1,
        "pass": 0,
        "answer": "        if x == 0:\n            return 0\n        if x < 0:\n            sign = -1\n        else:\n            sign = 1\n        x = abs(x)\n        res = 0\n        while x!= 0:\n            res = res * 10 + x % 10\n            x = x // 10\n        if res > 2 ** 31 - 1:\n            return 0\n        return sign * res"
    },
    {
        "number": 7,
        "title": "Reverse Integer",
        "difficulty": 1,
        "pass": 1,
        "answer": "        if x == 0:\n            return 0\n        sign = 1\n        if x < 0:\n            sign = -1\n            x = abs(x)\n        rev = 0\n        while x > 0:\n            rev = rev * 10 + x % 10\n            x = x // 10\n        rev = sign * rev\n        if rev < -2 ** 31 or rev > 2 ** 31 - 1:\n            return 0\n        return rev"
    },
    {
        "number": 7,
        "title": "Reverse Integer",
        "difficulty": 1,
        "pass": 2,
        "answer": "        if x == 0:\n            return 0\n        sign = -1 if x < 0 else 1\n        x = abs(x)\n        res = 0\n        while x > 0:\n            res = res * 10 + x % 10\n            x = x // 10\n        res = res * sign\n        if res < -2 ** 31 or res > 2 ** 31 - 1:\n            return 0\n        return res"
    },
    {
        "number": 7,
        "title": "Reverse Integer",
        "difficulty": 1,
        "pass": 3,
        "answer": "        if x == 0:\n            return 0\n        x_str = str(x)\n        if x_str[0] == '-':\n            x_str = x_str[1:]\n            x_str = x_str[::-1]\n            x_str = '-' + x_str\n        else:\n            x_str = x_str[::-1]\n        x_int = int(x_str)\n        if x_int < -2 ** 31 or x_int > 2 ** 31 - 1:\n            return 0\n        return x_int"
    },
    {
        "number": 7,
        "title": "Reverse Integer",
        "difficulty": 1,
        "pass": 4,
        "answer": "        if x == 0:\n            return 0\n        if x > 0:\n            x = str(x)\n            x = x[::-1]\n            x = int(x)\n            if x > 2**31 - 1:\n                return 0\n            else:\n                return x\n        else:\n            x = str(-x)\n            x = x[::-1]\n            x = -int(x)\n            if x < -2**31:\n                return 0\n            else:\n                return x"
    },
    {
        "number": 7,
        "title": "Reverse Integer",
        "difficulty": 1,
        "pass": 5,
        "answer": "        if x == 0:\n            return 0\n        if x < 0:\n            x = -x\n            x = str(x)\n            x = x[::-1]\n            x = int(x)\n            x = -x\n        else:\n            x = str(x)\n            x = x[::-1]\n            x = int(x)\n        if x < -2 ** 31 or x > 2 ** 31 - 1:\n            return 0\n        else:\n            return x"
    },
    {
        "number": 7,
        "title": "Reverse Integer",
        "difficulty": 1,
        "pass": 6,
        "answer": "        if x == 0:\n            return 0\n        sign = 1 if x > 0 else -1\n        x = abs(x)\n        res = 0\n        while x:\n            res = res * 10 + x % 10\n            x //= 10\n        return 0 if res > 2 ** 31 - 1 else res * sign"
    },
    {
        "number": 7,
        "title": "Reverse Integer",
        "difficulty": 1,
        "pass": 7,
        "answer": "        if x == 0:\n            return 0\n        sign = 1\n        if x < 0:\n            sign = -1\n            x = -x\n        x = str(x)\n        x = x[::-1]\n        x = int(x)\n        x = x * sign\n        if x < -2 ** 31 or x > 2 ** 31 - 1:\n            return 0\n        return x"
    },
    {
        "number": 7,
        "title": "Reverse Integer",
        "difficulty": 1,
        "pass": 8,
        "answer": "        sign = 1\n        if x < 0:\n            sign = -1\n            x = x * sign\n        x = str(x)\n        x = x[::-1]\n        x = int(x)\n        x = x * sign\n        if x < -2 ** 31 or x > 2 ** 31 - 1:\n            return 0\n        return x"
    },
    {
        "number": 7,
        "title": "Reverse Integer",
        "difficulty": 1,
        "pass": 9,
        "answer": "        if x == 0:\n            return 0\n        if x > 0:\n            sign = 1\n        else:\n            sign = -1\n        x = abs(x)\n        result = 0\n        while x!= 0:\n            result = result * 10 + x % 10\n            x = x // 10\n        result = result * sign\n        if result < -2 ** 31 or result > 2 ** 31 - 1:\n            return 0\n        return result"
    },
    {
        "number": 8,
        "title": "String to Integer (atoi)",
        "difficulty": 1,
        "pass": 0,
        "answer": "        s = s.lstrip()\n        if len(s) == 0:\n            return 0\n        sign = 1\n        if s[0] == '-':\n            sign = -1\n            s = s[1:]\n            if len(s) == 0:\n                return 0\n        elif s[0] == '+':\n            s = s[1:]\n            if len(s) == 0:\n                return 0\n        if not s[0].isdigit():\n            return 0\n        result = 0\n        i = 0\n        while i < len(s) and s[i].isdigit():\n            result = result * 10 + int(s[i])\n            i += 1\n        result *= sign\n        if result < -2 ** 31:\n            return -2 ** 31\n        elif result > 2 ** 31 - 1:\n            return 2 ** 31 - 1\n        else:\n            return result"
    },
    {
        "number": 8,
        "title": "String to Integer (atoi)",
        "difficulty": 1,
        "pass": 1,
        "answer": "        if not s:\n            return 0\n        s = s.lstrip()\n        if not s:\n            return 0\n        sign = -1 if s[0] == '-' else 1\n        if s[0] in ('-', '+'):\n            s = s[1:]\n        if not s:\n            return 0\n        res = 0\n        i = 0\n        while i < len(s) and s[i].isdigit():\n            res = res * 10 + ord(s[i]) - ord('0')\n            i += 1\n        res *= sign\n        if res > 2 ** 31 - 1:\n            return 2 ** 31 - 1\n        if res < -2 ** 31:\n            return -2 ** 31\n        return res"
    },
    {
        "number": 8,
        "title": "String to Integer (atoi)",
        "difficulty": 1,
        "pass": 2,
        "answer": "        s = s.lstrip()\n        if len(s) == 0:\n            return 0\n        sign = 1\n        if s[0] == '-':\n            sign = -1\n            s = s[1:]\n        elif s[0] == '+':\n            s = s[1:]\n        if len(s) == 0:\n            return 0\n        i = 0\n        while i < len(s) and s[i].isdigit():\n            i += 1\n        s = s[:i]\n        if len(s) == 0:\n            return 0\n        i = 0\n        while i < len(s) and s[i] == '0':\n            i += 1\n        s = s[i:]\n        if len(s) == 0:\n            return 0\n        if s[0] == '-':\n            sign = -1\n            s = s[1:]\n        elif s[0] == '+':\n            sign = 1\n            s = s[1:]\n        if len(s) == 0:\n            return"
    },
    {
        "number": 8,
        "title": "String to Integer (atoi)",
        "difficulty": 1,
        "pass": 3,
        "answer": "        s = s.lstrip()\n        if not s:\n            return 0\n        sign = -1 if s[0] == '-' else 1\n        if s[0] in '+-':\n            s = s[1:]\n        res, i = 0, 0\n        while i < len(s) and s[i].isdigit():\n            res = res * 10 + ord(s[i]) - ord('0')\n            i += 1\n        return max(-2 ** 31, min(sign * res, 2 ** 31 - 1))"
    },
    {
        "number": 9,
        "title": "Palindrome Number",
        "difficulty": 0,
        "pass": 0,
        "answer": "        if x < 0:\n            return False\n        elif x < 10:\n            return True\n        else:\n            return str(x) == str(x)[::-1]"
    },
    {
        "number": 9,
        "title": "Palindrome Number",
        "difficulty": 0,
        "pass": 1,
        "answer": "        if x < 0:\n            return False\n        elif x < 10:\n            return True\n        else:\n            x_str = str(x)\n            if x_str == x_str[::-1]:\n                return True\n            else:\n                return False"
    },
    {
        "number": 9,
        "title": "Palindrome Number",
        "difficulty": 0,
        "pass": 2,
        "answer": "        if x < 0:\n            return False\n        elif x < 10:\n            return True\n        else:\n            return str(x) == str(x)[::-1]"
    },
    {
        "number": 9,
        "title": "Palindrome Number",
        "difficulty": 0,
        "pass": 3,
        "answer": "        if x < 0:\n            return False\n        elif x < 10:\n            return True\n        else:\n            return str(x) == str(x)[::-1]"
    },
    {
        "number": 9,
        "title": "Palindrome Number",
        "difficulty": 0,
        "pass": 4,
        "answer": "        if x < 0:\n            return False\n        elif x < 10:\n            return True\n        else:\n            return str(x) == str(x)[::-1]"
    },
    {
        "number": 9,
        "title": "Palindrome Number",
        "difficulty": 0,
        "pass": 5,
        "answer": "        if x < 0 or (x % 10 == 0 and x!= 0):\n            return False\n        reversed_num = 0\n        while x > reversed_num:\n            reversed_num = reversed_num * 10 + x % 10\n            x //= 10\n        return x == reversed_num or x == reversed_num // 10"
    },
    {
        "number": 9,
        "title": "Palindrome Number",
        "difficulty": 0,
        "pass": 6,
        "answer": "        if x < 0:\n            return False\n        elif x < 10:\n            return True\n        elif x % 10 == 0:\n            return False\n        else:\n            reverse = 0\n            while x > reverse:\n                reverse = reverse * 10 + x % 10\n                x = x // 10\n            if x == reverse or x == reverse // 10:\n                return True\n            else:\n                return False"
    },
    {
        "number": 9,
        "title": "Palindrome Number",
        "difficulty": 0,
        "pass": 7,
        "answer": "        if x < 0:\n            return False\n        elif x < 10:\n            return True\n        elif x % 10 == 0:\n            return False\n        else:\n            return self.isPalindrome(x // 10) and self.isPalindrome(x % 10)"
    },
    {
        "number": 9,
        "title": "Palindrome Number",
        "difficulty": 0,
        "pass": 8,
        "answer": "        if x < 0:\n            return False\n        elif x < 10:\n            return True\n        else:\n            return str(x) == str(x)[::-1]"
    },
    {
        "number": 9,
        "title": "Palindrome Number",
        "difficulty": 0,
        "pass": 9,
        "answer": "        if x < 0:\n            return False\n        elif x < 10:\n            return True\n        elif x % 10 == 0:\n            return False\n        else:\n            return self.isPalindrome(x // 10) and self.isPalindrome(x % 10)"
    },
    {
        "number": 10,
        "title": "Regular Expression Matching",
        "difficulty": 2,
        "pass": 0,
        "answer": "        s_len = len(s)\n        p_len = len(p)\n        dp = [[False] * (p_len + 1) for _ in range(s_len + 1)]\n        dp[0][0] = True\n        for j in range(1, p_len + 1):\n            if p[j - 1] == '*':\n                dp[0][j] = dp[0][j - 2]\n        for i in range(1, s_len + 1):\n            for j in range(1, p_len + 1):\n                if p[j - 1] in {s[i - 1], '.'}:\n                    dp[i][j] = dp[i - 1][j - 1]\n                elif p[j - 1] == '*':\n                    dp[i][j] = dp[i][j - 2]\n                    if p[j - 2] in {s[i - 1], '.'}:\n                        dp[i][j] = dp[i][j] or dp[i - 1][j]\n"
    },
    {
        "number": 10,
        "title": "Regular Expression Matching",
        "difficulty": 2,
        "pass": 1,
        "answer": "        if not p:\n            return not s"
    },
    {
        "number": 10,
        "title": "Regular Expression Matching",
        "difficulty": 2,
        "pass": 2,
        "answer": "        if not p:\n            return not s"
    },
    {
        "number": 10,
        "title": "Regular Expression Matching",
        "difficulty": 2,
        "pass": 3,
        "answer": "        if not p:\n            return not s"
    },
    {
        "number": 10,
        "title": "Regular Expression Matching",
        "difficulty": 2,
        "pass": 4,
        "answer": "        if not p:\n            return not s"
    },
    {
        "number": 10,
        "title": "Regular Expression Matching",
        "difficulty": 2,
        "pass": 5,
        "answer": "        if not p:\n            return not s"
    },
    {
        "number": 10,
        "title": "Regular Expression Matching",
        "difficulty": 2,
        "pass": 6,
        "answer": "        m = len(s)\n        n = len(p)\n        dp = [[False] * (n + 1) for _ in range(m + 1)]\n        dp[0][0] = True\n        for j in range(1, n + 1):\n            if p[j - 1] == '*':\n                dp[0][j] = dp[0][j - 2]\n        for i in range(1, m + 1):\n            for j in range(1, n + 1):\n                if s[i - 1] == p[j - 1] or p[j - 1] == '.':\n                    dp[i][j] = dp[i - 1][j - 1]\n                elif p[j - 1] == '*':\n                    dp[i][j] = dp[i][j - 2]\n                    if p[j - 2] == '.' or p[j - 2] == s[i - 1]:\n                        dp[i][j] = dp[i][j] or dp[i - 1][j]\n        "
    },
    {
        "number": 10,
        "title": "Regular Expression Matching",
        "difficulty": 2,
        "pass": 7,
        "answer": "        if not p:\n            return not s\n        first_match = bool(s) and p[0] in {s[0], '.'}\n        if len(p) >= 2 and p[1] == '*':\n            return (self.isMatch(s, p[2:]) or\n                    first_match and self.isMatch(s[1:], p))\n        else:\n            return first_match and self.isMatch(s[1:], p[1:])"
    },
    {
        "number": 10,
        "title": "Regular Expression Matching",
        "difficulty": 2,
        "pass": 8,
        "answer": "        if not p:\n            return not s"
    },
    {
        "number": 10,
        "title": "Regular Expression Matching",
        "difficulty": 2,
        "pass": 9,
        "answer": "        if not p:\n            return not s"
    },
    {
        "number": 11,
        "title": "Container With Most Water",
        "difficulty": 1,
        "pass": 0,
        "answer": "        left = 0\n        right = len(height) - 1\n        max_area = 0\n        while left < right:\n            max_area = max(max_area, min(height[left], height[right]) * (right - left))\n            if height[left] < height[right]:\n                left += 1\n            else:\n                right -= 1\n        return max_area"
    },
    {
        "number": 11,
        "title": "Container With Most Water",
        "difficulty": 1,
        "pass": 1,
        "answer": "        if len(height) < 2:\n            return 0\n        left = 0\n        right = len(height) - 1\n        max_area = 0\n        while left < right:\n            max_area = max(max_area, min(height[left], height[right]) * (right - left))\n            if height[left] < height[right]:\n                left += 1\n            else:\n                right -= 1\n        return max_area"
    },
    {
        "number": 11,
        "title": "Container With Most Water",
        "difficulty": 1,
        "pass": 2,
        "answer": "        left = 0\n        right = len(height) - 1\n        max_area = 0\n        while left < right:\n            max_area = max(max_area, min(height[left], height[right]) * (right - left))\n            if height[left] < height[right]:\n                left += 1\n            else:\n                right -= 1\n        return max_area"
    },
    {
        "number": 11,
        "title": "Container With Most Water",
        "difficulty": 1,
        "pass": 3,
        "answer": "        l, r = 0, len(height) - 1\n        max_area = 0\n        while l < r:\n            max_area = max(max_area, min(height[l], height[r]) * (r - l))\n            if height[l] < height[r]:\n                l += 1\n            else:\n                r -= 1\n        return max_area"
    },
    {
        "number": 11,
        "title": "Container With Most Water",
        "difficulty": 1,
        "pass": 4,
        "answer": "        l, r = 0, len(height) - 1\n        max_area = 0\n        while l < r:\n            max_area = max(max_area, min(height[l], height[r]) * (r - l))\n            if height[l] < height[r]:\n                l += 1\n            else:\n                r -= 1\n        return max_area\n"
    },
    {
        "number": 11,
        "title": "Container With Most Water",
        "difficulty": 1,
        "pass": 5,
        "answer": "        left, right = 0, len(height) - 1\n        max_area = 0\n        while left < right:\n            max_area = max(max_area, min(height[left], height[right]) * (right - left))\n            if height[left] < height[right]:\n                left += 1\n            else:\n                right -= 1\n        return max_area"
    },
    {
        "number": 11,
        "title": "Container With Most Water",
        "difficulty": 1,
        "pass": 6,
        "answer": "        left, right = 0, len(height) - 1\n        max_area = 0\n        while left < right:\n            max_area = max(max_area, min(height[left], height[right]) * (right - left))\n            if height[left] < height[right]:\n                left += 1\n            else:\n                right -= 1\n        return max_area"
    },
    {
        "number": 11,
        "title": "Container With Most Water",
        "difficulty": 1,
        "pass": 7,
        "answer": "        # O(n)\n        left, right = 0, len(height) - 1\n        max_area = 0\n        while left < right:\n            max_area = max(max_area, min(height[left], height[right]) * (right - left))\n            if height[left] < height[right]:\n                left += 1\n            else:\n                right -= 1\n        return max_area"
    },
    {
        "number": 11,
        "title": "Container With Most Water",
        "difficulty": 1,
        "pass": 8,
        "answer": "        left, right = 0, len(height) - 1\n        max_area = 0\n        while left < right:\n            max_area = max(max_area, min(height[left], height[right]) * (right - left))\n            if height[left] < height[right]:\n                left += 1\n            else:\n                right -= 1\n        return max_area"
    },
    {
        "number": 11,
        "title": "Container With Most Water",
        "difficulty": 1,
        "pass": 9,
        "answer": "        left, right = 0, len(height) - 1\n        max_area = 0\n        while left < right:\n            max_area = max(max_area, min(height[left], height[right]) * (right - left))\n            if height[left] < height[right]:\n                left += 1\n            else:\n                right -= 1\n        return max_area"
    }
]