[
    {
        "number": 1,
        "title": "Two Sum",
        "difficulty": 0,
        "pass": 0,
        "answer": "        nums_dict = {}\n        for i, num in enumerate(nums):\n            if target - num in nums_dict:\n                return [nums_dict[target - num], i]\n            nums_dict[num] = i\n"
    },
    {
        "number": 1,
        "title": "Two Sum",
        "difficulty": 0,
        "pass": 1,
        "answer": "        nums_dict = {}\n        for i, num in enumerate(nums):\n            if target - num in nums_dict:\n                return [nums_dict[target - num], i]\n            nums_dict[num] = i"
    },
    {
        "number": 1,
        "title": "Two Sum",
        "difficulty": 0,
        "pass": 2,
        "answer": "        nums_map = {}\n        for i, num in enumerate(nums):\n            if target - num in nums_map:\n                return [nums_map[target - num], i]\n            nums_map[num] = i"
    },
    {
        "number": 1,
        "title": "Two Sum",
        "difficulty": 0,
        "pass": 3,
        "answer": "        d = {}\n        for i in range(len(nums)):\n            if target - nums[i] in d:\n                return [d[target - nums[i]], i]\n            else:\n                d[nums[i]] = i\n"
    },
    {
        "number": 1,
        "title": "Two Sum",
        "difficulty": 0,
        "pass": 4,
        "answer": "        nums_map = {}\n        for i, num in enumerate(nums):\n            if target - num in nums_map:\n                return [nums_map[target - num], i]\n            nums_map[num] = i"
    },
    {
        "number": 1,
        "title": "Two Sum",
        "difficulty": 0,
        "pass": 5,
        "answer": "        nums_dict = {}\n        for i in range(len(nums)):\n            if target - nums[i] in nums_dict:\n                return [nums_dict[target - nums[i]], i]\n            else:\n                nums_dict[nums[i]] = i"
    },
    {
        "number": 1,
        "title": "Two Sum",
        "difficulty": 0,
        "pass": 6,
        "answer": "        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: List[int]\n        \"\"\"\n        d = {}\n        for i in range(len(nums)):\n            if target - nums[i] in d:\n                return [d[target - nums[i]], i]\n            else:\n                d[nums[i]] = i\n"
    },
    {
        "number": 1,
        "title": "Two Sum",
        "difficulty": 0,
        "pass": 7,
        "answer": "        hashmap = {}\n        for i in range(len(nums)):\n            if target - nums[i] in hashmap:\n                return [hashmap[target - nums[i]], i]\n            else:\n                hashmap[nums[i]] = i"
    },
    {
        "number": 1,
        "title": "Two Sum",
        "difficulty": 0,
        "pass": 8,
        "answer": "        nums_dict = {}\n        for i in range(len(nums)):\n            if target - nums[i] in nums_dict:\n                return [nums_dict[target - nums[i]], i]\n            else:\n                nums_dict[nums[i]] = i"
    },
    {
        "number": 1,
        "title": "Two Sum",
        "difficulty": 0,
        "pass": 9,
        "answer": "        nums_dict = {}\n        for i, num in enumerate(nums):\n            if target - num in nums_dict:\n                return [nums_dict[target - num], i]\n            else:\n                nums_dict[num] = i\n"
    },
    {
        "number": 2,
        "title": "Add Two Numbers",
        "difficulty": 1,
        "pass": 0,
        "answer": "        if not l1:\n            return l2\n        if not l2:\n            return l1"
    },
    {
        "number": 2,
        "title": "Add Two Numbers",
        "difficulty": 1,
        "pass": 1,
        "answer": "        carry = 0\n        dummy = ListNode(0)\n        p = dummy\n        while l1 or l2 or carry:\n            if l1:\n                carry += l1.val\n                l1 = l1.next\n            if l2:\n                carry += l2.val\n                l2 = l2.next\n            p.next = ListNode(carry % 10)\n            p = p.next\n            carry //= 10\n        return dummy.next"
    },
    {
        "number": 2,
        "title": "Add Two Numbers",
        "difficulty": 1,
        "pass": 2,
        "answer": "        if not l1:\n            return l2\n        if not l2:\n            return l1\n        dummy = ListNode(0)\n        curr = dummy\n        carry = 0\n        while l1 or l2:\n            if l1:\n                carry += l1.val\n                l1 = l1.next\n            if l2:\n                carry += l2.val\n                l2 = l2.next\n            curr.next = ListNode(carry % 10)\n            curr = curr.next\n            carry //= 10\n        if carry:\n            curr.next = ListNode(carry)\n        return dummy.next"
    },
    {
        "number": 2,
        "title": "Add Two Numbers",
        "difficulty": 1,
        "pass": 3,
        "answer": "        dummy = ListNode(0)\n        cur = dummy\n        carry = 0\n        while l1 or l2 or carry:\n            if l1:\n                carry += l1.val\n                l1 = l1.next\n            if l2:\n                carry += l2.val\n                l2 = l2.next\n            carry, val = divmod(carry, 10)\n            cur.next = ListNode(val)\n            cur = cur.next\n        return dummy.next"
    },
    {
        "number": 2,
        "title": "Add Two Numbers",
        "difficulty": 1,
        "pass": 4,
        "answer": "        dummy = ListNode(0)\n        curr = dummy\n        carry = 0\n        while l1 or l2 or carry:\n            if l1:\n                carry += l1.val\n                l1 = l1.next\n            if l2:\n                carry += l2.val\n                l2 = l2.next\n            curr.next = ListNode(carry % 10)\n            curr = curr.next\n            carry //= 10\n        return dummy.next"
    },
    {
        "number": 2,
        "title": "Add Two Numbers",
        "difficulty": 1,
        "pass": 5,
        "answer": "        carry = 0\n        dummy = ListNode(0)\n        curr = dummy\n        while l1 or l2:\n            if l1:\n                carry += l1.val\n                l1 = l1.next\n            if l2:\n                carry += l2.val\n                l2 = l2.next\n            curr.next = ListNode(carry % 10)\n            curr = curr.next\n            carry //= 10\n        if carry:\n            curr.next = ListNode(carry)\n        return dummy.next"
    },
    {
        "number": 2,
        "title": "Add Two Numbers",
        "difficulty": 1,
        "pass": 6,
        "answer": "        dummy = ListNode(0)\n        curr = dummy\n        carry = 0\n        while l1 or l2 or carry:\n            if l1:\n                carry += l1.val\n                l1 = l1.next\n            if l2:\n                carry += l2.val\n                l2 = l2.next\n            curr.next = ListNode(carry % 10)\n            curr = curr.next\n            carry //= 10\n        return dummy.next"
    },
    {
        "number": 2,
        "title": "Add Two Numbers",
        "difficulty": 1,
        "pass": 7,
        "answer": "        dummy = curr = ListNode(0)\n        carry = 0\n        while l1 or l2 or carry:\n            v1 = v2 = 0\n            if l1:\n                v1 = l1.val\n                l1 = l1.next\n            if l2:\n                v2 = l2.val\n                l2 = l2.next\n            carry, val = divmod(v1 + v2 + carry, 10)\n            curr.next = ListNode(val)\n            curr = curr.next\n        return dummy.next"
    },
    {
        "number": 2,
        "title": "Add Two Numbers",
        "difficulty": 1,
        "pass": 8,
        "answer": "        dummy = ListNode(0)\n        p = dummy\n        carry = 0\n        while l1 or l2 or carry:\n            if l1:\n                carry += l1.val\n                l1 = l1.next\n            if l2:\n                carry += l2.val\n                l2 = l2.next\n            p.next = ListNode(carry % 10)\n            p = p.next\n            carry //= 10\n        return dummy.next"
    },
    {
        "number": 2,
        "title": "Add Two Numbers",
        "difficulty": 1,
        "pass": 9,
        "answer": "        if not l1:\n            return l2\n        if not l2:\n            return l1\n        dummy = ListNode(0)\n        curr = dummy\n        carry = 0\n        while l1 or l2:\n            if l1:\n                carry += l1.val\n                l1 = l1.next\n            if l2:\n                carry += l2.val\n                l2 = l2.next\n            curr.next = ListNode(carry % 10)\n            curr = curr.next\n            carry //= 10\n        if carry:\n            curr.next = ListNode(carry)\n        return dummy.next"
    },
    {
        "number": 3,
        "title": "Longest Substring Without Repeating Characters",
        "difficulty": 1,
        "pass": 0,
        "answer": "        if not s:\n            return 0\n        left = 0\n        right = 0\n        max_len = 0\n        char_dict = {}\n        while right < len(s):\n            if s[right] in char_dict and char_dict[s[right]] >= left:\n                left = char_dict[s[right]] + 1\n            char_dict[s[right]] = right\n            max_len = max(max_len, right - left + 1)\n            right += 1\n        return max_len"
    },
    {
        "number": 3,
        "title": "Longest Substring Without Repeating Characters",
        "difficulty": 1,
        "pass": 1,
        "answer": "        if not s:\n            return 0\n        if len(s) == 1:\n            return 1\n        if len(s) == 2:\n            if s[0] == s[1]:\n                return 2\n            else:\n                return 1"
    },
    {
        "number": 3,
        "title": "Longest Substring Without Repeating Characters",
        "difficulty": 1,
        "pass": 2,
        "answer": "        if not s:\n            return 0\n        if len(s) == 1:\n            return 1\n        max_len = 0\n        for i in range(len(s)):\n            for j in range(i, len(s)):\n                if len(set(s[i:j+1])) == len(s[i:j+1]):\n                    max_len = max(max_len, len(s[i:j+1]))\n        return max_len"
    },
    {
        "number": 3,
        "title": "Longest Substring Without Repeating Characters",
        "difficulty": 1,
        "pass": 3,
        "answer": "        if not s:\n            return 0\n        n = len(s)\n        if n == 1:\n            return 1\n        max_len = 1\n        start = 0\n        for i in range(1, n):\n            if s[i] not in s[start:i]:\n                max_len = max(max_len, i - start + 1)\n            else:\n                while s[i] in s[start:i]:\n                    start += 1\n                max_len = max(max_len, i - start + 1)\n        return max_len"
    },
    {
        "number": 3,
        "title": "Longest Substring Without Repeating Characters",
        "difficulty": 1,
        "pass": 4,
        "answer": "        if not s:\n            return 0\n        if len(s) == 1:\n            return 1\n        start, end = 0, 0\n        max_len = 0\n        chars = {}\n        while end < len(s):\n            if s[end] in chars:\n                start = max(start, chars[s[end]] + 1)\n            chars[s[end]] = end\n            max_len = max(max_len, end - start + 1)\n            end += 1\n        return max_len"
    },
    {
        "number": 3,
        "title": "Longest Substring Without Repeating Characters",
        "difficulty": 1,
        "pass": 5,
        "answer": "        if not s:\n            return 0\n        if len(s) == 1:\n            return 1\n        max_len = 1\n        for i in range(1, len(s)):\n            if s[i] in s[:i]:\n                continue\n            else:\n                max_len = max(max_len, self.lengthOfLongestSubstring(s[i:]))\n        return max_len"
    },
    {
        "number": 3,
        "title": "Longest Substring Without Repeating Characters",
        "difficulty": 1,
        "pass": 6,
        "answer": "        if not s:\n            return 0\n        if len(s) == 1:\n            return 1\n        if len(s) == 2:\n            if s[0]!= s[1]:\n                return 2\n            else:\n                return 1\n        if len(s) == 3:\n            if s[0]!= s[1] and s[1]!= s[2]:\n                return 3\n            else:\n                return 2\n        if len(s) == 4:\n            if s[0]!= s[1] and s[1]!= s[2] and s[2]!= s[3]:\n                return 4\n            else:\n                return 3\n        if len(s) == 5:\n            if s[0]!= s[1] and s[1]!= s[2] and s[2]!= s[3] and s[3]!= s[4]:\n                return 5\n            else:\n                return 4\n        if len(s) == 6:\n            if s[0]!= s[1] and s[1]!= s[2"
    },
    {
        "number": 3,
        "title": "Longest Substring Without Repeating Characters",
        "difficulty": 1,
        "pass": 7,
        "answer": "        if len(s) == 0:\n            return 0\n        if len(s) == 1:\n            return 1\n        max_len = 0\n        for i in range(len(s)):\n            sub_str = s[i]\n            for j in range(i + 1, len(s)):\n                if s[j] not in sub_str:\n                    sub_str += s[j]\n                else:\n                    if len(sub_str) > max_len:\n                        max_len = len(sub_str)\n                    break\n        return max_len"
    },
    {
        "number": 3,
        "title": "Longest Substring Without Repeating Characters",
        "difficulty": 1,
        "pass": 8,
        "answer": "        if not s:\n            return 0\n        left, right = 0, 0\n        max_len = 0\n        char_dict = {}\n        while right < len(s):\n            if s[right] in char_dict and char_dict[s[right]] >= left:\n                left = char_dict[s[right]] + 1\n            char_dict[s[right]] = right\n            max_len = max(max_len, right - left + 1)\n            right += 1\n        return max_len"
    },
    {
        "number": 3,
        "title": "Longest Substring Without Repeating Characters",
        "difficulty": 1,
        "pass": 9,
        "answer": "        if not s:\n            return 0\n        if len(s) == 1:\n            return 1\n        if len(s) == 2:\n            if s[0]!= s[1]:\n                return 2\n            else:\n                return 1\n        if len(s) == 3:\n            if s[0]!= s[1] and s[0]!= s[2] and s[1]!= s[2]:\n                return 3\n            elif s[0] == s[1] and s[0]!= s[2]:\n                return 2\n            elif s[0] == s[2] and s[0]!= s[1]:\n                return 2\n            elif s[1] == s[2] and s[1]!= s[0]:\n                return 2\n            else:\n                return 1\n        if len(s) == 4:\n            if s[0]!= s[1] and s[0]!= s[2] and s[0]!= s[3] and s[1]!= s[2] and s[1]!="
    },
    {
        "number": 4,
        "title": "Median of Two Sorted Arrays",
        "difficulty": 2,
        "pass": 0,
        "answer": "        m, n = len(nums1), len(nums2)\n        if m > n:\n            nums1, nums2, m, n = nums2, nums1, n, m\n        if n == 0:\n            raise ValueError"
    },
    {
        "number": 4,
        "title": "Median of Two Sorted Arrays",
        "difficulty": 2,
        "pass": 1,
        "answer": "        m, n = len(nums1), len(nums2)\n        if m > n:\n            nums1, nums2, m, n = nums2, nums1, n, m\n        if n == 0:\n            raise ValueError"
    },
    {
        "number": 4,
        "title": "Median of Two Sorted Arrays",
        "difficulty": 2,
        "pass": 2,
        "answer": "        if len(nums1) > len(nums2):\n            return self.findMedianSortedArrays(nums2, nums1)"
    },
    {
        "number": 4,
        "title": "Median of Two Sorted Arrays",
        "difficulty": 2,
        "pass": 3,
        "answer": "        m, n = len(nums1), len(nums2)\n        if m > n:\n            nums1, nums2, m, n = nums2, nums1, n, m\n        if n == 0:\n            raise ValueError"
    },
    {
        "number": 4,
        "title": "Median of Two Sorted Arrays",
        "difficulty": 2,
        "pass": 4,
        "answer": "        m, n = len(nums1), len(nums2)\n        if m > n:\n            nums1, nums2, m, n = nums2, nums1, n, m\n        if n == 0:\n            raise ValueError"
    },
    {
        "number": 4,
        "title": "Median of Two Sorted Arrays",
        "difficulty": 2,
        "pass": 5,
        "answer": "        m, n = len(nums1), len(nums2)\n        if m > n:\n            nums1, nums2, m, n = nums2, nums1, n, m\n        if n == 0:\n            raise ValueError"
    },
    {
        "number": 4,
        "title": "Median of Two Sorted Arrays",
        "difficulty": 2,
        "pass": 6,
        "answer": "        if len(nums1) > len(nums2):\n            return self.findMedianSortedArrays(nums2, nums1)\n        m, n = len(nums1), len(nums2)\n        left, right = 0, m\n        while left <= right:\n            i = (left + right) // 2\n            j = (m + n + 1) // 2 - i\n            if i > 0 and nums1[i - 1] > nums2[j]:\n                right = i - 1\n            elif i < m and nums1[i] < nums2[j - 1]:\n                left = i + 1\n            else:\n                if i == 0:\n                    max_left = nums2[j - 1]\n                elif j == 0:\n                    max_left = nums1[i - 1]\n                else:\n                    max_left = max(nums1[i - 1], nums2[j - 1])\n                if (m + n) % 2 == 1:\n                    return max_left\n"
    },
    {
        "number": 4,
        "title": "Median of Two Sorted Arrays",
        "difficulty": 2,
        "pass": 7,
        "answer": "        m, n = len(nums1), len(nums2)\n        if m > n:\n            nums1, nums2, m, n = nums2, nums1, n, m\n        imin, imax = 0, m\n        while imin <= imax:\n            i = (imin + imax) // 2\n            j = (m + n + 1) // 2 - i\n            if i < m and nums2[j - 1] > nums1[i]:\n                imin = i + 1\n            elif i > 0 and nums1[i - 1] > nums2[j]:\n                imax = i - 1\n            else:\n                if i == 0:\n                    max_of_left = nums2[j - 1]\n                elif j == 0:\n                    max_of_left = nums1[i - 1]\n                else:\n                    max_of_left = max(nums1[i - 1], nums2[j - 1])"
    },
    {
        "number": 4,
        "title": "Median of Two Sorted Arrays",
        "difficulty": 2,
        "pass": 8,
        "answer": "        m, n = len(nums1), len(nums2)\n        if m > n:\n            nums1, nums2, m, n = nums2, nums1, n, m\n        if n == 0:\n            raise ValueError"
    },
    {
        "number": 4,
        "title": "Median of Two Sorted Arrays",
        "difficulty": 2,
        "pass": 9,
        "answer": "        m, n = len(nums1), len(nums2)\n        if m > n:\n            nums1, nums2, m, n = nums2, nums1, n, m\n        if n == 0:\n            raise ValueError"
    },
    {
        "number": 5,
        "title": "Longest Palindromic Substring",
        "difficulty": 1,
        "pass": 0,
        "answer": "        if len(s) < 2:\n            return s"
    },
    {
        "number": 5,
        "title": "Longest Palindromic Substring",
        "difficulty": 1,
        "pass": 1,
        "answer": "        n = len(s)\n        if n < 2:\n            return s\n        max_len = 1\n        start = 0\n        for i in range(n):\n            if i - max_len >= 1 and s[i - max_len - 1: i + 1] == s[i - max_len - 1: i + 1][::-1]:\n                start = i - max_len - 1\n                max_len += 2\n                continue\n            if i - max_len >= 0 and s[i - max_len: i + 1] == s[i - max_len: i + 1][::-1]:\n                start = i - max_len\n                max_len += 1\n        return s[start: start + max_len]"
    },
    {
        "number": 5,
        "title": "Longest Palindromic Substring",
        "difficulty": 1,
        "pass": 2,
        "answer": "        if len(s) == 1:\n            return s\n        start, end = 0, 0\n        for i in range(len(s)):\n            len1 = self.expand(s, i, i)\n            len2 = self.expand(s, i, i + 1)\n            if len1 > end - start:\n                start, end = i - (len1 - 1) // 2, i + len1 // 2\n            if len2 > end - start:\n                start, end = i - (len2 - 1) // 2, i + len2 // 2\n        return s[start:end + 1]"
    },
    {
        "number": 5,
        "title": "Longest Palindromic Substring",
        "difficulty": 1,
        "pass": 3,
        "answer": "        if len(s) == 1:\n            return s\n        if len(s) == 2:\n            if s[0] == s[1]:\n                return s\n            else:\n                return s[0]\n        start = 0\n        end = 0\n        for i in range(len(s)):\n            len1 = self.expand(s, i, i)\n            len2 = self.expand(s, i, i + 1)\n            if len1 > end - start:\n                start = i - (len1 - 1) // 2\n                end = i + len1 // 2\n            if len2 > end - start:\n                start = i - (len2 - 1) // 2\n                end = i + len2 // 2\n        return s[start:end + 1]"
    },
    {
        "number": 5,
        "title": "Longest Palindromic Substring",
        "difficulty": 1,
        "pass": 4,
        "answer": "        n = len(s)\n        if n == 0:\n            return \"\"\n        if n == 1:\n            return s\n        if n == 2:\n            if s[0] == s[1]:\n                return s\n            else:\n                return s[0]\n        dp = [[False for _ in range(n)] for _ in range(n)]\n        for i in range(n):\n            dp[i][i] = True\n        for i in range(n - 1):\n            if s[i] == s[i + 1]:\n                dp[i][i + 1] = True\n        for i in range(n - 2, -1, -1):\n            for j in range(i + 2, n):\n                if s[i] == s[j] and dp[i + 1][j - 1]:\n                    dp[i][j] = True\n        max_len = 1\n        start = 0\n        for i in range(n):\n            for j in range(i, n):\n                if dp[i][j] and j - i +"
    },
    {
        "number": 5,
        "title": "Longest Palindromic Substring",
        "difficulty": 1,
        "pass": 5,
        "answer": "        if not s:\n            return \"\"\n        n = len(s)\n        dp = [[False] * n for _ in range(n)]\n        for i in range(n):\n            dp[i][i] = True\n        for i in range(n - 1, -1, -1):\n            for j in range(i + 1, n):\n                if s[i] == s[j]:\n                    if j - i < 3:\n                        dp[i][j] = True\n                    else:\n                        dp[i][j] = dp[i + 1][j - 1]\n                else:\n                    dp[i][j] = False\n        max_len = 1\n        start = 0\n        for i in range(n):\n            for j in range(i, n):\n                if dp[i][j] and j - i + 1 > max_len:\n                    max_len = j - i + 1\n                    start = i\n        return s[start:start + max_len]"
    },
    {
        "number": 5,
        "title": "Longest Palindromic Substring",
        "difficulty": 1,
        "pass": 6,
        "answer": "        if len(s) == 1:\n            return s\n        max_len = 1\n        res = s[0]\n        for i in range(len(s)):\n            # odd case, like \"aba\"\n            tmp = self.helper(s, i, i)\n            if len(tmp) > max_len:\n                max_len = len(tmp)\n                res = tmp\n            # even case, like \"abba\"\n            tmp = self.helper(s, i, i + 1)\n            if len(tmp) > max_len:\n                max_len = len(tmp)\n                res = tmp\n        return res"
    },
    {
        "number": 5,
        "title": "Longest Palindromic Substring",
        "difficulty": 1,
        "pass": 7,
        "answer": "        if len(s) == 1:\n            return s\n        if len(s) == 2:\n            if s[0] == s[1]:\n                return s\n            else:\n                return s[0]\n        longest = s[0]\n        for i in range(len(s)):\n            left, right = i, i\n            while left >= 0 and right < len(s) and s[left] == s[right]:\n                if right - left + 1 > len(longest):\n                    longest = s[left:right + 1]\n                left -= 1\n                right += 1\n            left, right = i, i + 1\n            while left >= 0 and right < len(s) and s[left] == s[right]:\n                if right - left + 1 > len(longest):\n                    longest = s[left:right + 1]\n                left -= 1\n                right += 1\n        return longest"
    },
    {
        "number": 5,
        "title": "Longest Palindromic Substring",
        "difficulty": 1,
        "pass": 8,
        "answer": "        n = len(s)\n        if n < 2:\n            return s\n        start, end = 0, 0\n        for i in range(n):\n            len1 = self.expand(s, i, i)\n            len2 = self.expand(s, i, i + 1)\n            max_len = max(len1, len2)\n            if max_len > end - start:\n                start = i - (max_len - 1) // 2\n                end = i + max_len // 2\n        return s[start:end + 1]"
    },
    {
        "number": 5,
        "title": "Longest Palindromic Substring",
        "difficulty": 1,
        "pass": 9,
        "answer": "        n = len(s)\n        if n < 2:\n            return s"
    },
    {
        "number": 6,
        "title": "Zigzag Conversion",
        "difficulty": 1,
        "pass": 0,
        "answer": "        if numRows == 1:\n            return s\n        res = [\"\" for _ in range(numRows)]\n        i, flag = 0, -1\n        for c in s:\n            res[i] += c\n            if i == 0 or i == numRows - 1:\n                flag = -flag\n            i += flag\n        return \"\".join(res)"
    },
    {
        "number": 6,
        "title": "Zigzag Conversion",
        "difficulty": 1,
        "pass": 1,
        "answer": "        if numRows == 1:\n            return s\n        res = [\"\" for _ in range(numRows)]\n        i, flag = 0, -1\n        for c in s:\n            res[i] += c\n            if i == 0 or i == numRows - 1:\n                flag = -flag\n            i += flag\n        return \"\".join(res)"
    },
    {
        "number": 6,
        "title": "Zigzag Conversion",
        "difficulty": 1,
        "pass": 2,
        "answer": "        if numRows == 1:\n            return s\n        res = [\"\" for _ in range(numRows)]\n        row = 0\n        down = True\n        for c in s:\n            res[row] += c\n            if row == 0:\n                down = True\n            elif row == numRows - 1:\n                down = False\n            if down:\n                row += 1\n            else:\n                row -= 1\n        return \"\".join(res)"
    },
    {
        "number": 6,
        "title": "Zigzag Conversion",
        "difficulty": 1,
        "pass": 3,
        "answer": "        if numRows == 1:\n            return s\n        res = [\"\" for _ in range(numRows)]\n        i, flag = 0, -1\n        for c in s:\n            res[i] += c\n            if i == 0 or i == numRows - 1:\n                flag = -flag\n            i += flag\n        return \"\".join(res)"
    },
    {
        "number": 6,
        "title": "Zigzag Conversion",
        "difficulty": 1,
        "pass": 4,
        "answer": "        if numRows == 1:\n            return s\n        if numRows == 2:\n            return ''.join([s[i] for i in range(len(s)) if i % 2 == 0]) + ''.join([s[i] for i in range(len(s)) if i % 2 == 1])\n        if numRows == 3:\n            return ''.join([s[i] for i in range(len(s)) if i % 3 == 0]) + ''.join([s[i] for i in range(len(s)) if i % 3 == 1]) + ''.join([s[i] for i in range(len(s)) if i % 3 == 2])\n        if numRows == 4:\n            return ''.join([s[i] for i in range(len(s)) if i % 4 == 0]) + ''.join([s[i] for i in range(len(s)) if i % 4 == 1]) + ''.join([s[i] for i in range(len(s)) if i % 4 == 2]) + ''.join(["
    },
    {
        "number": 6,
        "title": "Zigzag Conversion",
        "difficulty": 1,
        "pass": 5,
        "answer": "        if numRows == 1:\n            return s"
    },
    {
        "number": 6,
        "title": "Zigzag Conversion",
        "difficulty": 1,
        "pass": 6,
        "answer": "        if numRows == 1:\n            return s\n        rows = [[] for _ in range(numRows)]\n        row, step = 0, 1\n        for c in s:\n            rows[row].append(c)\n            if row == 0:\n                step = 1\n            elif row == numRows - 1:\n                step = -1\n            row += step\n        return ''.join([''.join(row) for row in rows])"
    },
    {
        "number": 6,
        "title": "Zigzag Conversion",
        "difficulty": 1,
        "pass": 7,
        "answer": "        if numRows == 1:\n            return s\n        res = [[] for _ in range(numRows)]\n        i, flag = 0, -1\n        for c in s:\n            res[i].append(c)\n            if i == 0 or i == numRows - 1:\n                flag = -flag\n            i += flag\n        return ''.join([''.join(r) for r in res])"
    },
    {
        "number": 6,
        "title": "Zigzag Conversion",
        "difficulty": 1,
        "pass": 8,
        "answer": "        if numRows == 1:\n            return s\n        res = [\"\" for _ in range(numRows)]\n        i, flag = 0, -1\n        for c in s:\n            res[i] += c\n            if i == 0 or i == numRows - 1:\n                flag = -flag\n            i += flag\n        return \"\".join(res)"
    },
    {
        "number": 6,
        "title": "Zigzag Conversion",
        "difficulty": 1,
        "pass": 9,
        "answer": "        if numRows == 1:\n            return s"
    },
    {
        "number": 7,
        "title": "Reverse Integer",
        "difficulty": 1,
        "pass": 0,
        "answer": "        if x == 0:\n            return 0\n        negative = False\n        if x < 0:\n            negative = True\n            x = -x\n        result = 0\n        while x > 0:\n            result = result * 10 + x % 10\n            x = x // 10\n        if result > 2 ** 31 - 1:\n            return 0\n        if negative:\n            return -result\n        else:\n            return result"
    },
    {
        "number": 7,
        "title": "Reverse Integer",
        "difficulty": 1,
        "pass": 1,
        "answer": "        MAX_INT = 2147483647\n        MIN_INT = -2147483648\n        sign = 1\n        if x < 0:\n            sign = -1\n            x = -x\n        result = 0\n        while x!= 0:\n            result = result * 10 + x % 10\n            if result > MAX_INT or result < MIN_INT:\n                return 0\n            x = x // 10\n        return sign * result"
    },
    {
        "number": 7,
        "title": "Reverse Integer",
        "difficulty": 1,
        "pass": 2,
        "answer": "        if x == 0:\n            return 0\n        sign = 1\n        if x < 0:\n            sign = -1\n            x = -x\n        res = 0\n        while x > 0:\n            res = res * 10 + x % 10\n            x = x // 10\n        if res > 2 ** 31 - 1:\n            return 0\n        return sign * res"
    },
    {
        "number": 7,
        "title": "Reverse Integer",
        "difficulty": 1,
        "pass": 3,
        "answer": "        sign = 1\n        if x < 0:\n            sign = -1\n            x = -x\n        res = 0\n        while x:\n            res = res * 10 + x % 10\n            x //= 10\n        if sign == -1 and res > 2147483647:\n            return 0\n        return sign * res"
    },
    {
        "number": 7,
        "title": "Reverse Integer",
        "difficulty": 1,
        "pass": 4,
        "answer": "        if x == 0:\n            return 0\n        if x > 0:\n            return int(str(x)[::-1])\n        else:\n            return -int(str(-x)[::-1])"
    },
    {
        "number": 7,
        "title": "Reverse Integer",
        "difficulty": 1,
        "pass": 5,
        "answer": "        sign = 1\n        if x < 0:\n            sign = -1\n            x = abs(x)\n        res = 0\n        while x:\n            res = res * 10 + x % 10\n            x //= 10\n        if res > 2 ** 31 - 1:\n            return 0\n        return sign * res"
    },
    {
        "number": 7,
        "title": "Reverse Integer",
        "difficulty": 1,
        "pass": 6,
        "answer": "        if x == 0:\n            return 0\n        if x > 0:\n            return int(str(x)[::-1])\n        else:\n            return -int(str(-x)[::-1])"
    },
    {
        "number": 7,
        "title": "Reverse Integer",
        "difficulty": 1,
        "pass": 7,
        "answer": "        if x == 0:\n            return 0\n        sign = 1\n        if x < 0:\n            sign = -1\n            x = -x\n        res = 0\n        while x!= 0:\n            res = res * 10 + x % 10\n            x = x // 10\n        if res > 2 ** 31 - 1:\n            return 0\n        return sign * res"
    },
    {
        "number": 7,
        "title": "Reverse Integer",
        "difficulty": 1,
        "pass": 8,
        "answer": "        if x == 0:\n            return 0\n        sign = 1\n        if x < 0:\n            sign = -1\n            x = -x\n        res = 0\n        while x:\n            res = res * 10 + x % 10\n            x //= 10\n        if res > 2 ** 31 - 1:\n            return 0\n        return sign * res"
    },
    {
        "number": 7,
        "title": "Reverse Integer",
        "difficulty": 1,
        "pass": 9,
        "answer": "        if x == 0:\n            return 0\n        if x > 0:\n            return int(str(x)[::-1])\n        if x < 0:\n            return -int(str(-x)[::-1])"
    },
    {
        "number": 8,
        "title": "String to Integer (atoi)",
        "difficulty": 1,
        "pass": 0,
        "answer": "        INT_MAX = 2147483647\n        INT_MIN = -2147483648\n        s = s.strip()\n        if not s:\n            return 0\n        sign = 1\n        if s[0] == '-':\n            sign = -1\n            s = s[1:]\n        elif s[0] == '+':\n            s = s[1:]\n        res, i = 0, 0\n        while i < len(s) and s[i].isdigit():\n            res = res * 10 + ord(s[i]) - ord('0')\n            i += 1\n        res = res * sign\n        if res > INT_MAX:\n            return INT_MAX\n        if res < INT_MIN:\n            return INT_MIN\n        return res"
    },
    {
        "number": 8,
        "title": "String to Integer (atoi)",
        "difficulty": 1,
        "pass": 1,
        "answer": "        if not s:\n            return 0\n        s = s.strip()\n        sign = 1\n        if s and s[0] == '-':\n            sign = -1\n            s = s[1:]\n        elif s and s[0] == '+':\n            s = s[1:]\n        res, i = 0, 0\n        while i < len(s) and s[i].isdigit():\n            res = res * 10 + ord(s[i]) - ord('0')\n            i += 1\n        return max(-2 ** 31, min(sign * res, 2 ** 31 - 1))"
    },
    {
        "number": 8,
        "title": "String to Integer (atoi)",
        "difficulty": 1,
        "pass": 2,
        "answer": "        s = s.strip()\n        if not s:\n            return 0\n        sign = 1\n        if s[0] == '-':\n            sign = -1\n            s = s[1:]\n        elif s[0] == '+':\n            s = s[1:]\n        ans = 0\n        for c in s:\n            if c.isdigit():\n                ans = ans * 10 + int(c)\n            else:\n                break\n        ans = ans * sign\n        if ans > 2147483647:\n            return 2147483647\n        if ans < -2147483648:\n            return -2147483648\n        return ans"
    },
    {
        "number": 8,
        "title": "String to Integer (atoi)",
        "difficulty": 1,
        "pass": 3,
        "answer": "        INT_MAX = 2 ** 31 - 1\n        INT_MIN = -2 ** 31"
    },
    {
        "number": 8,
        "title": "String to Integer (atoi)",
        "difficulty": 1,
        "pass": 4,
        "answer": "        s = s.strip()\n        if not s:\n            return 0\n        sign = 1\n        if s[0] == '-':\n            sign = -1\n            s = s[1:]\n        elif s[0] == '+':\n            s = s[1:]\n        res, i = 0, 0\n        while i < len(s) and s[i].isdigit():\n            res = res * 10 + ord(s[i]) - ord('0')\n            i += 1\n        res = res * sign\n        if res < -2 ** 31:\n            return -2 ** 31\n        elif res > 2 ** 31 - 1:\n            return 2 ** 31 - 1\n        else:\n            return res"
    },
    {
        "number": 8,
        "title": "String to Integer (atoi)",
        "difficulty": 1,
        "pass": 5,
        "answer": "        INT_MAX = 2147483647\n        INT_MIN = -2147483648\n        s = s.strip()\n        if not s:\n            return 0\n        sign = 1\n        if s[0] == '-':\n            sign = -1\n            s = s[1:]\n        elif s[0] == '+':\n            s = s[1:]\n        res, i = 0, 0\n        while i < len(s) and s[i].isdigit():\n            res = res * 10 + ord(s[i]) - ord('0')\n            if res > INT_MAX:\n                if sign == 1:\n                    return INT_MAX\n                else:\n                    return INT_MIN\n            i += 1\n        return sign * res"
    },
    {
        "number": 8,
        "title": "String to Integer (atoi)",
        "difficulty": 1,
        "pass": 6,
        "answer": "        s = s.strip()\n        if not s:\n            return 0\n        sign = 1\n        if s[0] == '-':\n            sign = -1\n            s = s[1:]\n        elif s[0] == '+':\n            s = s[1:]\n        res, i = 0, 0\n        while i < len(s) and s[i].isdigit():\n            res = res * 10 + ord(s[i]) - ord('0')\n            i += 1\n        res = res * sign\n        if res < -2 ** 31:\n            return -2 ** 31\n        elif res > 2 ** 31 - 1:\n            return 2 ** 31 - 1\n        else:\n            return res"
    },
    {
        "number": 8,
        "title": "String to Integer (atoi)",
        "difficulty": 1,
        "pass": 7,
        "answer": "        s = s.strip()\n        if not s:\n            return 0\n        sign = 1\n        if s[0] == '-':\n            sign = -1\n            s = s[1:]\n        elif s[0] == '+':\n            s = s[1:]\n        result = 0\n        for c in s:\n            if c.isdigit():\n                result = result * 10 + int(c)\n            else:\n                break\n        result = sign * result\n        if result > 2147483647:\n            return 2147483647\n        if result < -2147483648:\n            return -2147483648\n        return result"
    },
    {
        "number": 8,
        "title": "String to Integer (atoi)",
        "difficulty": 1,
        "pass": 8,
        "answer": "        s = s.strip()\n        if not s:\n            return 0\n        sign = 1\n        if s[0] == '-':\n            sign = -1\n            s = s[1:]\n        elif s[0] == '+':\n            s = s[1:]\n        result, i = 0, 0\n        while i < len(s) and s[i].isdigit():\n            result = result * 10 + ord(s[i]) - ord('0')\n            i += 1\n        result = sign * result\n        if result > 2147483647:\n            return 2147483647\n        if result < -2147483648:\n            return -2147483648\n        return result"
    },
    {
        "number": 8,
        "title": "String to Integer (atoi)",
        "difficulty": 1,
        "pass": 9,
        "answer": "        INT_MAX = 2147483647\n        INT_MIN = -2147483648\n        s = s.strip()\n        if not s:\n            return 0\n        sign = 1\n        if s[0] == '-':\n            sign = -1\n            s = s[1:]\n        elif s[0] == '+':\n            s = s[1:]\n        res, i = 0, 0\n        while i < len(s) and s[i].isdigit():\n            res = res * 10 + ord(s[i]) - ord('0')\n            if res > INT_MAX:\n                if sign == 1:\n                    return INT_MAX\n                else:\n                    return INT_MIN\n            i += 1\n        return sign * res"
    },
    {
        "number": 9,
        "title": "Palindrome Number",
        "difficulty": 0,
        "pass": 0,
        "answer": "        if x < 0:\n            return False\n        elif x == 0:\n            return True\n        else:\n            s = str(x)\n            return s[::-1] == s"
    },
    {
        "number": 9,
        "title": "Palindrome Number",
        "difficulty": 0,
        "pass": 1,
        "answer": "        if x < 0:\n            return False\n        else:\n            return str(x) == str(x)[::-1]"
    },
    {
        "number": 9,
        "title": "Palindrome Number",
        "difficulty": 0,
        "pass": 2,
        "answer": "        if x < 0:\n            return False\n        elif x == 0:\n            return True\n        else:\n            return str(x)[::-1] == str(x)"
    },
    {
        "number": 9,
        "title": "Palindrome Number",
        "difficulty": 0,
        "pass": 3,
        "answer": "        if x < 0:\n            return False\n        else:\n            return str(x) == str(x)[::-1]"
    },
    {
        "number": 9,
        "title": "Palindrome Number",
        "difficulty": 0,
        "pass": 4,
        "answer": "        if x < 0:\n            return False\n        elif x == 0:\n            return True\n        elif x % 10 == 0:\n            return False\n        else:\n            return self.isPalindrome(x // 10)"
    },
    {
        "number": 9,
        "title": "Palindrome Number",
        "difficulty": 0,
        "pass": 5,
        "answer": "        if x < 0:\n            return False\n        elif x == 0:\n            return True\n        else:\n            return str(x)[::-1] == str(x)"
    },
    {
        "number": 9,
        "title": "Palindrome Number",
        "difficulty": 0,
        "pass": 6,
        "answer": "        if x < 0:\n            return False\n        elif x == 0:\n            return True\n        else:\n            return str(x)[::-1] == str(x)"
    },
    {
        "number": 9,
        "title": "Palindrome Number",
        "difficulty": 0,
        "pass": 7,
        "answer": "        if x < 0:\n            return False\n        elif x == 0:\n            return True\n        else:\n            return str(x)[::-1] == str(x)"
    },
    {
        "number": 9,
        "title": "Palindrome Number",
        "difficulty": 0,
        "pass": 8,
        "answer": "        if x < 0:\n            return False\n        if x < 10:\n            return True\n        x_str = str(x)\n        for i in range(len(x_str) // 2):\n            if x_str[i]!= x_str[len(x_str) - 1 - i]:\n                return False\n        return True"
    },
    {
        "number": 9,
        "title": "Palindrome Number",
        "difficulty": 0,
        "pass": 9,
        "answer": "        if x < 0:\n            return False\n        elif x == 0:\n            return True\n        else:\n            if x % 10 == 0:\n                return False\n            else:\n                return self.isPalindrome(x // 10)"
    },
    {
        "number": 10,
        "title": "Regular Expression Matching",
        "difficulty": 2,
        "pass": 0,
        "answer": "        m, n = len(s), len(p)"
    },
    {
        "number": 10,
        "title": "Regular Expression Matching",
        "difficulty": 2,
        "pass": 1,
        "answer": "        if not p:\n            return not s"
    },
    {
        "number": 10,
        "title": "Regular Expression Matching",
        "difficulty": 2,
        "pass": 2,
        "answer": "        if not p:\n            return not s"
    },
    {
        "number": 10,
        "title": "Regular Expression Matching",
        "difficulty": 2,
        "pass": 3,
        "answer": "        m, n = len(s), len(p)"
    },
    {
        "number": 10,
        "title": "Regular Expression Matching",
        "difficulty": 2,
        "pass": 4,
        "answer": "        if not p:\n            return not s\n        first_match = bool(s) and p[0] in {s[0], '.'}\n        if len(p) >= 2 and p[1] == '*':\n            return (self.isMatch(s, p[2:]) or\n                    first_match and self.isMatch(s[1:], p))\n        else:\n            return first_match and self.isMatch(s[1:], p[1:])"
    },
    {
        "number": 10,
        "title": "Regular Expression Matching",
        "difficulty": 2,
        "pass": 5,
        "answer": "        if not p:\n            return not s\n        first_match = bool(s) and p[0] in {s[0], '.'}\n        if len(p) >= 2 and p[1] == '*':\n            return (self.isMatch(s, p[2:]) or\n                    first_match and self.isMatch(s[1:], p))\n        else:\n            return first_match and self.isMatch(s[1:], p[1:])"
    },
    {
        "number": 10,
        "title": "Regular Expression Matching",
        "difficulty": 2,
        "pass": 6,
        "answer": "        if not p:\n            return not s"
    },
    {
        "number": 10,
        "title": "Regular Expression Matching",
        "difficulty": 2,
        "pass": 7,
        "answer": "        m, n = len(s), len(p)"
    },
    {
        "number": 10,
        "title": "Regular Expression Matching",
        "difficulty": 2,
        "pass": 8,
        "answer": "        if not p:\n            return not s"
    },
    {
        "number": 10,
        "title": "Regular Expression Matching",
        "difficulty": 2,
        "pass": 9,
        "answer": "        m, n = len(s), len(p)"
    },
    {
        "number": 11,
        "title": "Container With Most Water",
        "difficulty": 1,
        "pass": 0,
        "answer": "        left, right = 0, len(height) - 1\n        max_area = 0\n        while left < right:\n            max_area = max(max_area, (right - left) * min(height[left], height[right]))\n            if height[left] < height[right]:\n                left += 1\n            else:\n                right -= 1\n        return max_area"
    },
    {
        "number": 11,
        "title": "Container With Most Water",
        "difficulty": 1,
        "pass": 1,
        "answer": "        max_area = 0\n        left, right = 0, len(height) - 1\n        while left < right:\n            max_area = max(max_area, (right - left) * min(height[left], height[right]))\n            if height[left] < height[right]:\n                left += 1\n            else:\n                right -= 1\n        return max_area"
    },
    {
        "number": 11,
        "title": "Container With Most Water",
        "difficulty": 1,
        "pass": 2,
        "answer": "        left, right = 0, len(height) - 1\n        max_area = 0\n        while left < right:\n            max_area = max(max_area, (right - left) * min(height[left], height[right]))\n            if height[left] < height[right]:\n                left += 1\n            else:\n                right -= 1\n        return max_area"
    },
    {
        "number": 11,
        "title": "Container With Most Water",
        "difficulty": 1,
        "pass": 3,
        "answer": "        left, right = 0, len(height) - 1\n        max_area = 0\n        while left < right:\n            max_area = max(max_area, (right - left) * min(height[left], height[right]))\n            if height[left] < height[right]:\n                left += 1\n            else:\n                right -= 1\n        return max_area"
    },
    {
        "number": 11,
        "title": "Container With Most Water",
        "difficulty": 1,
        "pass": 4,
        "answer": "        left, right = 0, len(height) - 1\n        max_area = 0\n        while left < right:\n            max_area = max(max_area, min(height[left], height[right]) * (right - left))\n            if height[left] < height[right]:\n                left += 1\n            else:\n                right -= 1\n        return max_area"
    },
    {
        "number": 11,
        "title": "Container With Most Water",
        "difficulty": 1,
        "pass": 5,
        "answer": "        left, right = 0, len(height) - 1\n        max_area = 0\n        while left < right:\n            max_area = max(max_area, (right - left) * min(height[left], height[right]))\n            if height[left] < height[right]:\n                left += 1\n            else:\n                right -= 1\n        return max_area"
    },
    {
        "number": 11,
        "title": "Container With Most Water",
        "difficulty": 1,
        "pass": 6,
        "answer": "        left, right = 0, len(height) - 1\n        max_area = 0\n        while left < right:\n            max_area = max(max_area, (right - left) * min(height[left], height[right]))\n            if height[left] < height[right]:\n                left += 1\n            else:\n                right -= 1\n        return max_area"
    },
    {
        "number": 11,
        "title": "Container With Most Water",
        "difficulty": 1,
        "pass": 7,
        "answer": "        left, right = 0, len(height) - 1\n        max_area = 0\n        while left < right:\n            max_area = max(max_area, (right - left) * min(height[left], height[right]))\n            if height[left] < height[right]:\n                left += 1\n            else:\n                right -= 1\n        return max_area"
    },
    {
        "number": 11,
        "title": "Container With Most Water",
        "difficulty": 1,
        "pass": 8,
        "answer": "        left, right = 0, len(height) - 1\n        max_area = 0\n        while left < right:\n            max_area = max(max_area, min(height[left], height[right]) * (right - left))\n            if height[left] < height[right]:\n                left += 1\n            else:\n                right -= 1\n        return max_area"
    },
    {
        "number": 11,
        "title": "Container With Most Water",
        "difficulty": 1,
        "pass": 9,
        "answer": "        n = len(height)\n        max_area = 0\n        for i in range(n):\n            for j in range(i + 1, n):\n                area = (j - i) * min(height[i], height[j])\n                max_area = max(max_area, area)\n        return max_area"
    },
    {
        "number": 12,
        "title": "Integer to Roman",
        "difficulty": 1,
        "pass": 0,
        "answer": "        values = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1]\n        numerals = [\"M\", \"CM\", \"D\", \"CD\", \"C\", \"XC\", \"L\", \"XL\", \"X\", \"IX\", \"V\", \"IV\", \"I\"]\n        res = []\n        for i in range(len(values)):\n            while num >= values[i]:\n                num -= values[i]\n                res.append(numerals[i])\n        return \"\".join(res)"
    },
    {
        "number": 12,
        "title": "Integer to Roman",
        "difficulty": 1,
        "pass": 1,
        "answer": "        roman_numerals = {\n            1: 'I',\n            2: 'II',\n            3: 'III',\n            4: 'IV',\n            5: 'V',\n            6: 'VI',\n            7: 'VII',\n            8: 'VIII',\n            9: 'IX',\n            10: 'X',\n            20: 'XX',\n            30: 'XXX',\n            40: 'XL',\n            50: 'L',\n            60: 'LX',\n            70: 'LXX',\n            80: 'LXXX',\n            90: 'XC',\n            100: 'C',\n            200: 'CC',\n            300: 'CCC',\n            400: 'CD',\n            500: 'D',\n            600: 'DC',\n            700: 'DCC',\n            800: 'DCCC',\n            900: 'CM',\n            1000: 'M',\n            2000: 'MM',\n            3000: 'MMM',\n        }\n        result = ''\n        for k, v in roman_numerals.items():"
    },
    {
        "number": 12,
        "title": "Integer to Roman",
        "difficulty": 1,
        "pass": 2,
        "answer": "        values = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1]\n        numerals = [\"M\", \"CM\", \"D\", \"CD\", \"C\", \"XC\", \"L\", \"XL\", \"X\", \"IX\", \"V\", \"IV\", \"I\"]\n        res = \"\"\n        for i in range(len(values)):\n            while num >= values[i]:\n                num -= values[i]\n                res += numerals[i]\n        return res"
    },
    {
        "number": 12,
        "title": "Integer to Roman",
        "difficulty": 1,
        "pass": 3,
        "answer": "        symbols = [\n            (1000, 'M'),\n            (900, 'CM'),\n            (500, 'D'),\n            (400, 'CD'),\n            (100, 'C'),\n            (90, 'XC'),\n            (50, 'L'),\n            (40, 'XL'),\n            (10, 'X'),\n            (9, 'IX'),\n            (5, 'V'),\n            (4, 'IV'),\n            (1, 'I')\n        ]\n        roman = ''\n        for value, symbol in symbols:\n            while num >= value:\n                num -= value\n                roman += symbol\n        return roman"
    },
    {
        "number": 12,
        "title": "Integer to Roman",
        "difficulty": 1,
        "pass": 4,
        "answer": "        values = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1]\n        numerals = [\"M\", \"CM\", \"D\", \"CD\", \"C\", \"XC\", \"L\", \"XL\", \"X\", \"IX\", \"V\", \"IV\", \"I\"]\n        res = \"\"\n        for i in range(len(values)):\n            while num >= values[i]:\n                num -= values[i]\n                res += numerals[i]\n        return res"
    },
    {
        "number": 12,
        "title": "Integer to Roman",
        "difficulty": 1,
        "pass": 5,
        "answer": "        dic = {1: 'I', 5: 'V', 10: 'X', 50: 'L', 100: 'C', 500: 'D', 1000: 'M'}\n        res = ''\n        while num > 0:\n            if num >= 1000:\n                res += dic[1000]\n                num -= 1000\n            elif num >= 900:\n                res += dic[900]\n                num -= 900\n            elif num >= 500:\n                res += dic[500]\n                num -= 500\n            elif num >= 400:\n                res += dic[400]\n                num -= 400\n            elif num >= 100:\n                res += dic[100]\n                num -= 100\n            elif num >= 90:\n                res += dic[90]\n                num -= 90\n            elif num >= 50:\n                res += dic[50]\n                num -= 50\n            elif num >= 40:\n                res += dic[40]\n                num -= 40\n            elif num >= 10:\n                res += dic[10]\n                num -= 10"
    },
    {
        "number": 12,
        "title": "Integer to Roman",
        "difficulty": 1,
        "pass": 6,
        "answer": "        values = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1]\n        numerals = [\"M\", \"CM\", \"D\", \"CD\", \"C\", \"XC\", \"L\", \"XL\", \"X\", \"IX\", \"V\", \"IV\", \"I\"]\n        res = []\n        for i in range(len(values)):\n            while num >= values[i]:\n                res.append(numerals[i])\n                num -= values[i]\n        return \"\".join(res)"
    },
    {
        "number": 12,
        "title": "Integer to Roman",
        "difficulty": 1,
        "pass": 7,
        "answer": "        values = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1]\n        numerals = [\"M\", \"CM\", \"D\", \"CD\", \"C\", \"XC\", \"L\", \"XL\", \"X\", \"IX\", \"V\", \"IV\", \"I\"]\n        res = []\n        for i in range(len(values)):\n            while num >= values[i]:\n                num -= values[i]\n                res.append(numerals[i])\n        return \"\".join(res)"
    },
    {
        "number": 12,
        "title": "Integer to Roman",
        "difficulty": 1,
        "pass": 8,
        "answer": "        d = {1: 'I', 4: 'IV', 5: 'V', 9: 'IX', 10: 'X', 40: 'XL', 50: 'L', 90: 'XC', 100: 'C', 400: 'CD', 500: 'D', 900: 'CM', 1000: 'M'}\n        res = ''\n        for k, v in d.items():\n            while num >= k:\n                res += v\n                num -= k\n        return res"
    },
    {
        "number": 12,
        "title": "Integer to Roman",
        "difficulty": 1,
        "pass": 9,
        "answer": "        values = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1]\n        numerals = [\"M\", \"CM\", \"D\", \"CD\", \"C\", \"XC\", \"L\", \"XL\", \"X\", \"IX\", \"V\", \"IV\", \"I\"]\n        res = []\n        for i in range(len(values)):\n            while num >= values[i]:\n                num -= values[i]\n                res.append(numerals[i])\n        return \"\".join(res)"
    },
    {
        "number": 13,
        "title": "Roman to Integer",
        "difficulty": 0,
        "pass": 0,
        "answer": "        table = {\n            'I': 1,\n            'V': 5,\n            'X': 10,\n            'L': 50,\n            'C': 100,\n            'D': 500,\n            'M': 1000,\n        }\n        n = len(s)\n        res = 0\n        for i in range(n):\n            if i < n - 1 and table[s[i]] < table[s[i + 1]]:\n                res -= table[s[i]]\n            else:\n                res += table[s[i]]\n        return res"
    },
    {
        "number": 13,
        "title": "Roman to Integer",
        "difficulty": 0,
        "pass": 1,
        "answer": "        roman = {\n            'I': 1,\n            'V': 5,\n            'X': 10,\n            'L': 50,\n            'C': 100,\n            'D': 500,\n            'M': 1000\n        }\n        res = 0\n        for i in range(len(s)):\n            if i > 0 and roman[s[i]] > roman[s[i - 1]]:\n                res += roman[s[i]] - 2 * roman[s[i - 1]]\n            else:\n                res += roman[s[i]]\n        return res"
    },
    {
        "number": 13,
        "title": "Roman to Integer",
        "difficulty": 0,
        "pass": 2,
        "answer": "        roman = {\n            'I': 1,\n            'V': 5,\n            'X': 10,\n            'L': 50,\n            'C': 100,\n            'D': 500,\n            'M': 1000\n        }\n        res = 0\n        i = 0\n        while i < len(s):\n            if i + 1 < len(s) and roman[s[i]] < roman[s[i + 1]]:\n                res += roman[s[i + 1]] - roman[s[i]]\n                i += 2\n            else:\n                res += roman[s[i]]\n                i += 1\n        return res"
    },
    {
        "number": 13,
        "title": "Roman to Integer",
        "difficulty": 0,
        "pass": 3,
        "answer": "        d = {\n            'I': 1,\n            'V': 5,\n            'X': 10,\n            'L': 50,\n            'C': 100,\n            'D': 500,\n            'M': 1000\n        }\n        n = len(s)\n        res = 0\n        for i in range(n):\n            if i < n - 1 and d[s[i]] < d[s[i + 1]]:\n                res -= d[s[i]]\n            else:\n                res += d[s[i]]\n        return res"
    },
    {
        "number": 13,
        "title": "Roman to Integer",
        "difficulty": 0,
        "pass": 4,
        "answer": "        dic = {'I': 1, 'V': 5, 'X': 10, 'L': 50, 'C': 100, 'D': 500, 'M': 1000}\n        res = 0\n        for i in range(len(s) - 1):\n            if dic[s[i]] < dic[s[i + 1]]:\n                res -= dic[s[i]]\n            else:\n                res += dic[s[i]]\n        res += dic[s[-1]]\n        return res"
    },
    {
        "number": 13,
        "title": "Roman to Integer",
        "difficulty": 0,
        "pass": 5,
        "answer": "        roman = {'I': 1, 'V': 5, 'X': 10, 'L': 50, 'C': 100, 'D': 500, 'M': 1000}\n        res = 0\n        for i in range(len(s) - 1):\n            if roman[s[i]] < roman[s[i + 1]]:\n                res -= roman[s[i]]\n            else:\n                res += roman[s[i]]\n        res += roman[s[-1]]\n        return res"
    },
    {
        "number": 13,
        "title": "Roman to Integer",
        "difficulty": 0,
        "pass": 6,
        "answer": "        roman = {\n            'I': 1,\n            'V': 5,\n            'X': 10,\n            'L': 50,\n            'C': 100,\n            'D': 500,\n            'M': 1000\n        }\n        result = 0\n        for i in range(len(s)):\n            if i > 0 and roman[s[i]] > roman[s[i - 1]]:\n                result += roman[s[i]] - 2 * roman[s[i - 1]]\n            else:\n                result += roman[s[i]]\n        return result"
    },
    {
        "number": 13,
        "title": "Roman to Integer",
        "difficulty": 0,
        "pass": 7,
        "answer": "        numerals = {\n            'I': 1,\n            'V': 5,\n            'X': 10,\n            'L': 50,\n            'C': 100,\n            'D': 500,\n            'M': 1000,\n        }\n        ans = 0\n        for i in range(len(s)):\n            if i > 0 and numerals[s[i]] > numerals[s[i - 1]]:\n                ans += numerals[s[i]] - 2 * numerals[s[i - 1]]\n            else:\n                ans += numerals[s[i]]\n        return ans"
    },
    {
        "number": 13,
        "title": "Roman to Integer",
        "difficulty": 0,
        "pass": 8,
        "answer": "        d = {\n            'I': 1,\n            'V': 5,\n            'X': 10,\n            'L': 50,\n            'C': 100,\n            'D': 500,\n            'M': 1000\n        }\n        res = 0\n        for i in range(len(s) - 1):\n            if d[s[i]] < d[s[i + 1]]:\n                res -= d[s[i]]\n            else:\n                res += d[s[i]]\n        res += d[s[-1]]\n        return res"
    },
    {
        "number": 13,
        "title": "Roman to Integer",
        "difficulty": 0,
        "pass": 9,
        "answer": "        d = {\n            'I': 1,\n            'V': 5,\n            'X': 10,\n            'L': 50,\n            'C': 100,\n            'D': 500,\n            'M': 1000\n        }\n        res = 0\n        i = 0\n        while i < len(s):\n            if i + 1 < len(s) and d[s[i]] < d[s[i + 1]]:\n                res += d[s[i + 1]] - d[s[i]]\n                i += 2\n            else:\n                res += d[s[i]]\n                i += 1\n        return res"
    },
    {
        "number": 14,
        "title": "Longest Common Prefix",
        "difficulty": 0,
        "pass": 0,
        "answer": "        if len(strs) == 0:\n            return ''\n        if len(strs) == 1:\n            return strs[0]\n        if len(strs) == 2:\n            if strs[0] == strs[1]:\n                return strs[0]\n            else:\n                return ''\n        if len(strs) == 3:\n            if strs[0] == strs[1] == strs[2]:\n                return strs[0]\n            elif strs[0] == strs[1]:\n                return strs[0]\n            elif strs[1] == strs[2]:\n                return strs[1]\n            else:\n                return ''\n        if len(strs) == 4:\n            if strs[0] == strs[1] == strs[2] == strs[3]:\n                return strs[0]\n            elif strs[0] == strs[1]:\n                return strs[0]\n            elif strs[1] == strs[2]:"
    },
    {
        "number": 14,
        "title": "Longest Common Prefix",
        "difficulty": 0,
        "pass": 1,
        "answer": "        if len(strs) == 0:\n            return \"\"\n        if len(strs) == 1:\n            return strs[0]\n        if len(strs) == 2:\n            if strs[0] == strs[1]:\n                return strs[0]\n            else:\n                return \"\"\n        result = \"\"\n        for i in range(len(strs[0])):\n            for j in range(1, len(strs)):\n                if i >= len(strs[j]) or strs[j][i]!= strs[0][i]:\n                    return result\n            result += strs[0][i]\n        return result"
    },
    {
        "number": 14,
        "title": "Longest Common Prefix",
        "difficulty": 0,
        "pass": 2,
        "answer": "        if not strs:\n            return \"\"\n        if len(strs) == 1:\n            return strs[0]\n        for i in range(len(strs[0])):\n            for j in range(1, len(strs)):\n                if i >= len(strs[j]) or strs[j][i]!= strs[0][i]:\n                    return strs[0][:i]\n        return strs[0]"
    },
    {
        "number": 14,
        "title": "Longest Common Prefix",
        "difficulty": 0,
        "pass": 3,
        "answer": "        if not strs:\n            return \"\"\n        if len(strs) == 1:\n            return strs[0]\n        shortest = min(strs, key=len)\n        for i, ch in enumerate(shortest):\n            for other in strs:\n                if other[i]!= ch:\n                    return shortest[:i]\n        return shortest"
    },
    {
        "number": 14,
        "title": "Longest Common Prefix",
        "difficulty": 0,
        "pass": 4,
        "answer": "        if not strs:\n            return \"\"\n        for i in range(len(strs[0])):\n            for j in range(1, len(strs)):\n                if i >= len(strs[j]) or strs[j][i]!= strs[0][i]:\n                    return strs[0][:i]\n        return strs[0]"
    },
    {
        "number": 14,
        "title": "Longest Common Prefix",
        "difficulty": 0,
        "pass": 5,
        "answer": "        if len(strs) == 0:\n            return \"\"\n        if len(strs) == 1:\n            return strs[0]\n        for i in range(len(strs[0])):\n            for j in range(1, len(strs)):\n                if i >= len(strs[j]) or strs[j][i]!= strs[0][i]:\n                    return strs[0][:i]\n        return strs[0]"
    },
    {
        "number": 14,
        "title": "Longest Common Prefix",
        "difficulty": 0,
        "pass": 6,
        "answer": "        if len(strs) == 0:\n            return \"\"\n        elif len(strs) == 1:\n            return strs[0]\n        result = strs[0]\n        for i in range(1, len(strs)):\n            j = 0\n            while j < len(result) and j < len(strs[i]):\n                if result[j]!= strs[i][j]:\n                    result = result[:j]\n                    break\n                j += 1\n        return result"
    },
    {
        "number": 14,
        "title": "Longest Common Prefix",
        "difficulty": 0,
        "pass": 7,
        "answer": "        if len(strs) == 0:\n            return \"\"\n        if len(strs) == 1:\n            return strs[0]\n        if len(strs) == 2:\n            if strs[0] == strs[1]:\n                return strs[0]\n            else:\n                return \"\"\n        if len(strs) == 3:\n            if strs[0] == strs[1]:\n                return strs[0]\n            elif strs[0] == strs[2]:\n                return strs[0]\n            elif strs[1] == strs[2]:\n                return strs[1]\n            else:\n                return \"\"\n        if len(strs) == 4:\n            if strs[0] == strs[1]:\n                return strs[0]\n            elif strs[0] == strs[2]:\n                return strs[0]\n            elif strs[0] == strs[3]:\n                return strs[0]\n            elif strs[1] =="
    },
    {
        "number": 14,
        "title": "Longest Common Prefix",
        "difficulty": 0,
        "pass": 8,
        "answer": "        if len(strs) == 0:\n            return \"\"\n        if len(strs) == 1:\n            return strs[0]\n        prefix = strs[0]\n        for i in range(1, len(strs)):\n            while strs[i].find(prefix)!= 0:\n                prefix = prefix[:len(prefix) - 1]\n                if prefix == \"\":\n                    return \"\"\n        return prefix"
    },
    {
        "number": 14,
        "title": "Longest Common Prefix",
        "difficulty": 0,
        "pass": 9,
        "answer": "        if not strs:\n            return \"\"\n        for i in range(len(strs[0])):\n            for j in range(1, len(strs)):\n                if i >= len(strs[j]) or strs[j][i]!= strs[0][i]:\n                    return strs[0][:i]\n        return strs[0]"
    },
    {
        "number": 15,
        "title": "3Sum",
        "difficulty": 1,
        "pass": 0,
        "answer": "        if len(nums) < 3:\n            return []\n        nums.sort()\n        res = []\n        for i in range(len(nums) - 2):\n            if i > 0 and nums[i] == nums[i - 1]:\n                continue\n            left, right = i + 1, len(nums) - 1\n            while left < right:\n                if nums[i] + nums[left] + nums[right] == 0:\n                    res.append([nums[i], nums[left], nums[right]])\n                    left += 1\n                    right -= 1\n                    while left < right and nums[left] == nums[left - 1]:\n                        left += 1\n                    while left < right and nums[right] == nums[right + 1]:\n                        right -= 1\n                elif nums[i] + nums[left] + nums[right] > 0:\n                    right -= 1\n                else:\n                    left += 1\n        return res"
    },
    {
        "number": 15,
        "title": "3Sum",
        "difficulty": 1,
        "pass": 1,
        "answer": "        nums.sort()\n        result = []\n        for i in range(len(nums) - 2):\n            if i > 0 and nums[i] == nums[i - 1]:\n                continue\n            left = i + 1\n            right = len(nums) - 1\n            while left < right:\n                if nums[i] + nums[left] + nums[right] == 0:\n                    result.append([nums[i], nums[left], nums[right]])\n                    left += 1\n                    right -= 1\n                    while left < right and nums[left] == nums[left - 1]:\n                        left += 1\n                    while left < right and nums[right] == nums[right + 1]:\n                        right -= 1\n                elif nums[i] + nums[left] + nums[right] > 0:\n                    right -= 1\n                else:\n                    left += 1\n        return result"
    },
    {
        "number": 15,
        "title": "3Sum",
        "difficulty": 1,
        "pass": 2,
        "answer": "        nums.sort()\n        res = []\n        for i in range(len(nums) - 2):\n            if i > 0 and nums[i] == nums[i - 1]:\n                continue\n            left, right = i + 1, len(nums) - 1\n            while left < right:\n                if nums[i] + nums[left] + nums[right] == 0:\n                    res.append([nums[i], nums[left], nums[right]])\n                    left += 1\n                    right -= 1\n                    while left < right and nums[left] == nums[left - 1]:\n                        left += 1\n                    while left < right and nums[right] == nums[right + 1]:\n                        right -= 1\n                elif nums[i] + nums[left] + nums[right] > 0:\n                    right -= 1\n                else:\n                    left += 1\n        return res"
    },
    {
        "number": 15,
        "title": "3Sum",
        "difficulty": 1,
        "pass": 3,
        "answer": "        nums.sort()\n        res = []\n        for i in range(len(nums) - 2):\n            if i > 0 and nums[i] == nums[i - 1]:\n                continue\n            l, r = i + 1, len(nums) - 1\n            while l < r:\n                s = nums[i] + nums[l] + nums[r]\n                if s < 0:\n                    l += 1\n                elif s > 0:\n                    r -= 1\n                else:\n                    res.append([nums[i], nums[l], nums[r]])\n                    while l < r and nums[l] == nums[l + 1]:\n                        l += 1\n                    while l < r and nums[r] == nums[r - 1]:\n                        r -= 1\n                    l += 1\n                    r -= 1\n        return res\n"
    },
    {
        "number": 15,
        "title": "3Sum",
        "difficulty": 1,
        "pass": 4,
        "answer": "        nums.sort()\n        n = len(nums)\n        res = []\n        for i in range(n - 2):\n            if i > 0 and nums[i] == nums[i - 1]:\n                continue\n            j = i + 1\n            k = n - 1\n            while j < k:\n                s = nums[i] + nums[j] + nums[k]\n                if s == 0:\n                    res.append([nums[i], nums[j], nums[k]])\n                    while j < k and nums[j] == nums[j + 1]:\n                        j += 1\n                    while j < k and nums[k] == nums[k - 1]:\n                        k -= 1\n                    j += 1\n                    k -= 1\n                elif s < 0:\n                    j += 1\n                else:\n                    k -= 1\n        return res\n"
    },
    {
        "number": 15,
        "title": "3Sum",
        "difficulty": 1,
        "pass": 5,
        "answer": "        nums.sort()\n        res = []\n        for i in range(len(nums) - 2):\n            if i > 0 and nums[i] == nums[i - 1]:\n                continue\n            left = i + 1\n            right = len(nums) - 1\n            while left < right:\n                s = nums[i] + nums[left] + nums[right]\n                if s == 0:\n                    res.append([nums[i], nums[left], nums[right]])\n                    left += 1\n                    right -= 1\n                    while left < right and nums[left] == nums[left - 1]:\n                        left += 1\n                    while left < right and nums[right] == nums[right + 1]:\n                        right -= 1\n                elif s > 0:\n                    right -= 1\n                else:\n                    left += 1\n        return res\n"
    },
    {
        "number": 15,
        "title": "3Sum",
        "difficulty": 1,
        "pass": 6,
        "answer": "        nums.sort()\n        res = []\n        for i in range(len(nums) - 2):\n            if i > 0 and nums[i] == nums[i - 1]:\n                continue\n            left, right = i + 1, len(nums) - 1\n            while left < right:\n                if nums[i] + nums[left] + nums[right] == 0:\n                    res.append([nums[i], nums[left], nums[right]])\n                    left += 1\n                    right -= 1\n                    while left < right and nums[left] == nums[left - 1]:\n                        left += 1\n                    while left < right and nums[right] == nums[right + 1]:\n                        right -= 1\n                elif nums[i] + nums[left] + nums[right] > 0:\n                    right -= 1\n                else:\n                    left += 1\n        return res"
    },
    {
        "number": 15,
        "title": "3Sum",
        "difficulty": 1,
        "pass": 7,
        "answer": "        nums.sort()\n        res = []\n        for i in range(len(nums) - 2):\n            if i > 0 and nums[i] == nums[i - 1]:\n                continue\n            left, right = i + 1, len(nums) - 1\n            while left < right:\n                if nums[i] + nums[left] + nums[right] == 0:\n                    res.append([nums[i], nums[left], nums[right]])\n                    left += 1\n                    right -= 1\n                    while left < right and nums[left] == nums[left - 1]:\n                        left += 1\n                    while left < right and nums[right] == nums[right + 1]:\n                        right -= 1\n                elif nums[i] + nums[left] + nums[right] > 0:\n                    right -= 1\n                else:\n                    left += 1\n        return res"
    },
    {
        "number": 15,
        "title": "3Sum",
        "difficulty": 1,
        "pass": 8,
        "answer": "        nums.sort()\n        n = len(nums)\n        res = []\n        for i in range(n - 2):\n            if i > 0 and nums[i] == nums[i - 1]:\n                continue\n            left, right = i + 1, n - 1\n            while left < right:\n                s = nums[i] + nums[left] + nums[right]\n                if s == 0:\n                    res.append([nums[i], nums[left], nums[right]])\n                    left += 1\n                    right -= 1\n                    while left < right and nums[left] == nums[left - 1]:\n                        left += 1\n                    while left < right and nums[right] == nums[right + 1]:\n                        right -= 1\n                elif s < 0:\n                    left += 1\n                else:\n                    right -= 1\n        return res\n"
    },
    {
        "number": 15,
        "title": "3Sum",
        "difficulty": 1,
        "pass": 9,
        "answer": "        nums.sort()\n        res = []\n        for i in range(len(nums) - 2):\n            if i > 0 and nums[i] == nums[i - 1]:\n                continue\n            left, right = i + 1, len(nums) - 1\n            while left < right:\n                if nums[i] + nums[left] + nums[right] == 0:\n                    res.append([nums[i], nums[left], nums[right]])\n                    left += 1\n                    right -= 1\n                    while left < right and nums[left] == nums[left - 1]:\n                        left += 1\n                    while left < right and nums[right] == nums[right + 1]:\n                        right -= 1\n                elif nums[i] + nums[left] + nums[right] > 0:\n                    right -= 1\n                else:\n                    left += 1\n        return res\n"
    },
    {
        "number": 16,
        "title": "3Sum Closest",
        "difficulty": 1,
        "pass": 0,
        "answer": "        nums.sort()\n        result = nums[0] + nums[1] + nums[2]\n        for i in range(len(nums) - 2):\n            j = i + 1\n            k = len(nums) - 1\n            while j < k:\n                sum = nums[i] + nums[j] + nums[k]\n                if sum == target:\n                    return sum\n                if abs(sum - target) < abs(result - target):\n                    result = sum\n                if sum < target:\n                    j += 1\n                elif sum > target:\n                    k -= 1\n        return result\n"
    },
    {
        "number": 16,
        "title": "3Sum Closest",
        "difficulty": 1,
        "pass": 1,
        "answer": "        nums.sort()\n        n = len(nums)\n        if n < 3:\n            return 0\n        res = nums[0] + nums[1] + nums[2]\n        for i in range(n - 2):\n            j = i + 1\n            k = n - 1\n            while j < k:\n                tmp = nums[i] + nums[j] + nums[k]\n                if abs(tmp - target) < abs(res - target):\n                    res = tmp\n                if tmp == target:\n                    return target\n                elif tmp > target:\n                    k -= 1\n                else:\n                    j += 1\n        return res"
    },
    {
        "number": 16,
        "title": "3Sum Closest",
        "difficulty": 1,
        "pass": 2,
        "answer": "        nums.sort()\n        result = nums[0] + nums[1] + nums[2]\n        for i in range(len(nums) - 2):\n            j, k = i + 1, len(nums) - 1\n            while j < k:\n                s = nums[i] + nums[j] + nums[k]\n                if s == target:\n                    return s\n                if abs(s - target) < abs(result - target):\n                    result = s\n                if s < target:\n                    j += 1\n                elif s > target:\n                    k -= 1\n        return result\n"
    },
    {
        "number": 16,
        "title": "3Sum Closest",
        "difficulty": 1,
        "pass": 3,
        "answer": "        nums.sort()\n        n = len(nums)\n        result = nums[0] + nums[1] + nums[2]\n        for i in range(n - 2):\n            j = i + 1\n            k = n - 1\n            while j < k:\n                s = nums[i] + nums[j] + nums[k]\n                if s == target:\n                    return s\n                if abs(s - target) < abs(result - target):\n                    result = s\n                if s < target:\n                    j += 1\n                elif s > target:\n                    k -= 1\n        return result\n"
    },
    {
        "number": 16,
        "title": "3Sum Closest",
        "difficulty": 1,
        "pass": 4,
        "answer": "        nums.sort()\n        n = len(nums)\n        res = nums[0] + nums[1] + nums[2]\n        for i in range(n - 2):\n            if i > 0 and nums[i] == nums[i - 1]:\n                continue\n            l, r = i + 1, n - 1\n            while l < r:\n                s = nums[i] + nums[l] + nums[r]\n                if abs(s - target) < abs(res - target):\n                    res = s\n                if s < target:\n                    l += 1\n                elif s > target:\n                    r -= 1\n                else:\n                    return target\n        return res"
    },
    {
        "number": 16,
        "title": "3Sum Closest",
        "difficulty": 1,
        "pass": 5,
        "answer": "        nums.sort()\n        result = nums[0] + nums[1] + nums[2]\n        for i in range(len(nums) - 2):\n            j = i + 1\n            k = len(nums) - 1\n            while j < k:\n                sum = nums[i] + nums[j] + nums[k]\n                if sum == target:\n                    return sum\n                if abs(sum - target) < abs(result - target):\n                    result = sum\n                if sum < target:\n                    j += 1\n                elif sum > target:\n                    k -= 1\n        return result\n"
    },
    {
        "number": 16,
        "title": "3Sum Closest",
        "difficulty": 1,
        "pass": 6,
        "answer": "        nums.sort()\n        result = nums[0] + nums[1] + nums[2]\n        for i in range(len(nums) - 2):\n            j, k = i + 1, len(nums) - 1\n            while j < k:\n                s = nums[i] + nums[j] + nums[k]\n                if s == target:\n                    return s\n                if abs(s - target) < abs(result - target):\n                    result = s\n                if s < target:\n                    j += 1\n                elif s > target:\n                    k -= 1\n        return result"
    },
    {
        "number": 16,
        "title": "3Sum Closest",
        "difficulty": 1,
        "pass": 7,
        "answer": "        if len(nums) < 3:\n            return None\n        nums.sort()\n        result = nums[0] + nums[1] + nums[2]\n        for i in range(len(nums) - 2):\n            j = i + 1\n            k = len(nums) - 1\n            while j < k:\n                sum = nums[i] + nums[j] + nums[k]\n                if sum == target:\n                    return sum\n                if abs(sum - target) < abs(result - target):\n                    result = sum\n                if sum < target:\n                    j += 1\n                elif sum > target:\n                    k -= 1\n        return result"
    },
    {
        "number": 16,
        "title": "3Sum Closest",
        "difficulty": 1,
        "pass": 8,
        "answer": "        nums.sort()\n        result = nums[0] + nums[1] + nums[2]\n        for i in range(len(nums) - 2):\n            j = i + 1\n            k = len(nums) - 1\n            while j < k:\n                s = nums[i] + nums[j] + nums[k]\n                if s == target:\n                    return s\n                if abs(s - target) < abs(result - target):\n                    result = s\n                if s < target:\n                    j += 1\n                elif s > target:\n                    k -= 1\n        return result"
    },
    {
        "number": 16,
        "title": "3Sum Closest",
        "difficulty": 1,
        "pass": 9,
        "answer": "        nums = sorted(nums)\n        n = len(nums)\n        res = nums[0] + nums[1] + nums[2]\n        for i in range(n - 2):\n            j, k = i + 1, n - 1\n            while j < k:\n                s = nums[i] + nums[j] + nums[k]\n                if s == target:\n                    return s\n                if abs(s - target) < abs(res - target):\n                    res = s\n                if s < target:\n                    j += 1\n                elif s > target:\n                    k -= 1\n        return res"
    },
    {
        "number": 17,
        "title": "Letter Combinations of a Phone Number",
        "difficulty": 1,
        "pass": 0,
        "answer": "        if len(digits) == 0:\n            return []"
    },
    {
        "number": 17,
        "title": "Letter Combinations of a Phone Number",
        "difficulty": 1,
        "pass": 1,
        "answer": "        if len(digits) == 0:\n            return []\n        mapping = {'2': 'abc', '3': 'def', '4': 'ghi', '5': 'jkl', '6':'mno', '7': 'pqrs', '8': 'tuv', '9': 'wxyz'}\n        res = []\n        self.helper(mapping, digits, 0, [], res)\n        return res"
    },
    {
        "number": 17,
        "title": "Letter Combinations of a Phone Number",
        "difficulty": 1,
        "pass": 2,
        "answer": "        if len(digits) == 0:\n            return []\n        mapping = {'2': ['a', 'b', 'c'],\n                   '3': ['d', 'e', 'f'],\n                   '4': ['g', 'h', 'i'],\n                   '5': ['j', 'k', 'l'],\n                   '6': ['m', 'n', 'o'],\n                   '7': ['p', 'q', 'r','s'],\n                   '8': ['t', 'u', 'v'],\n                   '9': ['w', 'x', 'y', 'z']}\n        if len(digits) == 1:\n            return mapping[digits[0]]\n        if len(digits) == 2:\n            return mapping[digits[0]] + mapping[digits[1]]\n        if len(digits) == 3:\n            return mapping[digits[0]] + mapping[digits[1]] + mapping[digits[2]]\n        if len(digits) == 4:\n            return mapping[digits["
    },
    {
        "number": 17,
        "title": "Letter Combinations of a Phone Number",
        "difficulty": 1,
        "pass": 3,
        "answer": "        if len(digits) == 0:\n            return []\n        mapping = {\n            \"2\": \"abc\",\n            \"3\": \"def\",\n            \"4\": \"ghi\",\n            \"5\": \"jkl\",\n            \"6\": \"mno\",\n            \"7\": \"pqrs\",\n            \"8\": \"tuv\",\n            \"9\": \"wxyz\",\n        }\n        res = []\n        self.helper(mapping, digits, 0, \"\", res)\n        return res"
    },
    {
        "number": 17,
        "title": "Letter Combinations of a Phone Number",
        "difficulty": 1,
        "pass": 4,
        "answer": "        if len(digits) == 0:\n            return []\n        mapping = {'2': 'abc', '3': 'def', '4': 'ghi', '5': 'jkl', '6':'mno', '7': 'pqrs', '8': 'tuv', '9': 'wxyz'}\n        res = ['']\n        for i in range(len(digits)):\n            tmp = []\n            for j in mapping[digits[i]]:\n                for k in res:\n                    tmp.append(k + j)\n            res = tmp\n        return res\n"
    },
    {
        "number": 17,
        "title": "Letter Combinations of a Phone Number",
        "difficulty": 1,
        "pass": 5,
        "answer": "        if not digits:\n            return []\n        mapping = {'2': 'abc', '3': 'def', '4': 'ghi', '5': 'jkl',\n                   '6':'mno', '7': 'pqrs', '8': 'tuv', '9': 'wxyz'}\n        res = ['']\n        for digit in digits:\n            res = [pre + suf for pre in res for suf in mapping[digit]]\n        return res\n"
    },
    {
        "number": 17,
        "title": "Letter Combinations of a Phone Number",
        "difficulty": 1,
        "pass": 6,
        "answer": "        if not digits:\n            return []\n        mapping = {\n            '2': ['a', 'b', 'c'],\n            '3': ['d', 'e', 'f'],\n            '4': ['g', 'h', 'i'],\n            '5': ['j', 'k', 'l'],\n            '6': ['m', 'n', 'o'],\n            '7': ['p', 'q', 'r','s'],\n            '8': ['t', 'u', 'v'],\n            '9': ['w', 'x', 'y', 'z']\n        }\n        res = ['']\n        for digit in digits:\n            res = [pre + suf for pre in res for suf in mapping[digit]]\n        return res\n"
    },
    {
        "number": 17,
        "title": "Letter Combinations of a Phone Number",
        "difficulty": 1,
        "pass": 7,
        "answer": "        if len(digits) == 0:\n            return []"
    },
    {
        "number": 17,
        "title": "Letter Combinations of a Phone Number",
        "difficulty": 1,
        "pass": 8,
        "answer": "        if not digits:\n            return []"
    },
    {
        "number": 17,
        "title": "Letter Combinations of a Phone Number",
        "difficulty": 1,
        "pass": 9,
        "answer": "        if not digits:\n            return []\n        mapping = {\n            '2': ['a', 'b', 'c'],\n            '3': ['d', 'e', 'f'],\n            '4': ['g', 'h', 'i'],\n            '5': ['j', 'k', 'l'],\n            '6': ['m', 'n', 'o'],\n            '7': ['p', 'q', 'r','s'],\n            '8': ['t', 'u', 'v'],\n            '9': ['w', 'x', 'y', 'z']\n        }\n        res = ['']\n        for d in digits:\n            new_res = []\n            for r in res:\n                for c in mapping[d]:\n                    new_res.append(r+c)\n            res = new_res\n        return res\n"
    },
    {
        "number": 18,
        "title": "4Sum",
        "difficulty": 1,
        "pass": 0,
        "answer": "        nums.sort()\n        n = len(nums)\n        res = []\n        for i in range(n - 3):\n            if i > 0 and nums[i] == nums[i - 1]:\n                continue\n            for j in range(i + 1, n - 2):\n                if j > i + 1 and nums[j] == nums[j - 1]:\n                    continue\n                left = j + 1\n                right = n - 1\n                while left < right:\n                    s = nums[i] + nums[j] + nums[left] + nums[right]\n                    if s == target:\n                        res.append([nums[i], nums[j], nums[left], nums[right]])\n                        left += 1\n                        right -= 1\n                        while left < right and nums[left] == nums[left - 1]:\n                            left += 1\n                        while left < right and nums[right] == nums[right + 1]:\n                            right -= 1\n                    elif s < target:\n                        left += 1\n"
    },
    {
        "number": 18,
        "title": "4Sum",
        "difficulty": 1,
        "pass": 1,
        "answer": "        nums.sort()\n        n = len(nums)\n        res = []\n        for i in range(n - 3):\n            if i > 0 and nums[i] == nums[i - 1]:\n                continue\n            for j in range(i + 1, n - 2):\n                if j > i + 1 and nums[j] == nums[j - 1]:\n                    continue\n                l, r = j + 1, n - 1\n                while l < r:\n                    s = nums[i] + nums[j] + nums[l] + nums[r]\n                    if s == target:\n                        res.append([nums[i], nums[j], nums[l], nums[r]])\n                        l += 1\n                        r -= 1\n                        while l < r and nums[l] == nums[l - 1]:\n                            l += 1\n                        while l < r and nums[r] == nums[r + 1]:\n                            r -= 1\n                    elif s < target:\n                        l += 1\n                    "
    },
    {
        "number": 18,
        "title": "4Sum",
        "difficulty": 1,
        "pass": 2,
        "answer": "        nums.sort()\n        n = len(nums)\n        res = []\n        for i in range(n - 3):\n            if i > 0 and nums[i] == nums[i - 1]:\n                continue\n            for j in range(i + 1, n - 2):\n                if j > i + 1 and nums[j] == nums[j - 1]:\n                    continue\n                left, right = j + 1, n - 1\n                while left < right:\n                    s = nums[i] + nums[j] + nums[left] + nums[right]\n                    if s == target:\n                        res.append([nums[i], nums[j], nums[left], nums[right]])\n                        left += 1\n                        right -= 1\n                        while left < right and nums[left] == nums[left - 1]:\n                            left += 1\n                        while left < right and nums[right] == nums[right + 1]:\n                            right -= 1\n                    elif s < target:\n                        left += 1\n                    "
    },
    {
        "number": 18,
        "title": "4Sum",
        "difficulty": 1,
        "pass": 3,
        "answer": "        nums.sort()\n        n = len(nums)\n        res = []\n        for i in range(n - 3):\n            if i > 0 and nums[i] == nums[i - 1]:\n                continue\n            for j in range(i + 1, n - 2):\n                if j > i + 1 and nums[j] == nums[j - 1]:\n                    continue\n                left, right = j + 1, n - 1\n                while left < right:\n                    s = nums[i] + nums[j] + nums[left] + nums[right]\n                    if s == target:\n                        res.append([nums[i], nums[j], nums[left], nums[right]])\n                        left += 1\n                        right -= 1\n                        while left < right and nums[left] == nums[left - 1]:\n                            left += 1\n                        while left < right and nums[right] == nums[right + 1]:\n                            right -= 1\n                    elif s < target:\n                        left += 1\n                    "
    },
    {
        "number": 18,
        "title": "4Sum",
        "difficulty": 1,
        "pass": 4,
        "answer": "        nums.sort()\n        n = len(nums)\n        res = []\n        for i in range(n - 3):\n            if i > 0 and nums[i] == nums[i - 1]:\n                continue\n            for j in range(i + 1, n - 2):\n                if j > i + 1 and nums[j] == nums[j - 1]:\n                    continue\n                l, r = j + 1, n - 1\n                while l < r:\n                    s = nums[i] + nums[j] + nums[l] + nums[r]\n                    if s == target:\n                        res.append([nums[i], nums[j], nums[l], nums[r]])\n                        l += 1\n                        r -= 1\n                        while l < r and nums[l] == nums[l - 1]:\n                            l += 1\n                        while l < r and nums[r] == nums[r + 1]:\n                            r -= 1\n                    elif s < target:\n                        l += 1\n                    "
    },
    {
        "number": 18,
        "title": "4Sum",
        "difficulty": 1,
        "pass": 5,
        "answer": "        nums.sort()\n        n = len(nums)\n        res = []\n        for i in range(n - 3):\n            if i > 0 and nums[i] == nums[i - 1]:\n                continue\n            for j in range(i + 1, n - 2):\n                if j > i + 1 and nums[j] == nums[j - 1]:\n                    continue\n                left, right = j + 1, n - 1\n                while left < right:\n                    s = nums[i] + nums[j] + nums[left] + nums[right]\n                    if s == target:\n                        res.append([nums[i], nums[j], nums[left], nums[right]])\n                        left += 1\n                        right -= 1\n                        while left < right and nums[left] == nums[left - 1]:\n                            left += 1\n                        while left < right and nums[right] == nums[right + 1]:\n                            right -= 1\n                    elif s < target:\n                        left += 1\n                    "
    },
    {
        "number": 18,
        "title": "4Sum",
        "difficulty": 1,
        "pass": 6,
        "answer": "        nums.sort()\n        n = len(nums)\n        res = []\n        for i in range(n - 3):\n            if i > 0 and nums[i] == nums[i - 1]:\n                continue\n            for j in range(i + 1, n - 2):\n                if j > i + 1 and nums[j] == nums[j - 1]:\n                    continue\n                left, right = j + 1, n - 1\n                while left < right:\n                    s = nums[i] + nums[j] + nums[left] + nums[right]\n                    if s == target:\n                        res.append([nums[i], nums[j], nums[left], nums[right]])\n                        left += 1\n                        right -= 1\n                        while left < right and nums[left] == nums[left - 1]:\n                            left += 1\n                        while left < right and nums[right] == nums[right + 1]:\n                            right -= 1\n                    elif s < target:\n                        left += 1\n                    "
    },
    {
        "number": 18,
        "title": "4Sum",
        "difficulty": 1,
        "pass": 7,
        "answer": "        nums.sort()\n        n = len(nums)\n        res = []\n        for i in range(n - 3):\n            if i > 0 and nums[i] == nums[i - 1]:\n                continue\n            for j in range(i + 1, n - 2):\n                if j > i + 1 and nums[j] == nums[j - 1]:\n                    continue\n                left, right = j + 1, n - 1\n                while left < right:\n                    s = nums[i] + nums[j] + nums[left] + nums[right]\n                    if s == target:\n                        res.append([nums[i], nums[j], nums[left], nums[right]])\n                        left += 1\n                        right -= 1\n                        while left < right and nums[left] == nums[left - 1]:\n                            left += 1\n                        while left < right and nums[right] == nums[right + 1]:\n                            right -= 1\n                    elif s < target:\n                        left += 1\n                    "
    },
    {
        "number": 18,
        "title": "4Sum",
        "difficulty": 1,
        "pass": 8,
        "answer": "        nums.sort()\n        n = len(nums)\n        res = []\n        for i in range(n - 3):\n            if i > 0 and nums[i] == nums[i - 1]:\n                continue\n            for j in range(i + 1, n - 2):\n                if j > i + 1 and nums[j] == nums[j - 1]:\n                    continue\n                left = j + 1\n                right = n - 1\n                while left < right:\n                    s = nums[i] + nums[j] + nums[left] + nums[right]\n                    if s == target:\n                        res.append([nums[i], nums[j], nums[left], nums[right]])\n                        left += 1\n                        right -= 1\n                        while left < right and nums[left] == nums[left - 1]:\n                            left += 1\n                        while left < right and nums[right] == nums[right + 1]:\n                            right -= 1\n                    elif s < target:\n                        left += 1\n"
    },
    {
        "number": 18,
        "title": "4Sum",
        "difficulty": 1,
        "pass": 9,
        "answer": "        nums.sort()\n        n = len(nums)\n        res = []\n        for i in range(n - 3):\n            if i > 0 and nums[i] == nums[i - 1]:\n                continue\n            for j in range(i + 1, n - 2):\n                if j > i + 1 and nums[j] == nums[j - 1]:\n                    continue\n                l, r = j + 1, n - 1\n                while l < r:\n                    s = nums[i] + nums[j] + nums[l] + nums[r]\n                    if s == target:\n                        res.append([nums[i], nums[j], nums[l], nums[r]])\n                        l += 1\n                        r -= 1\n                        while l < r and nums[l] == nums[l - 1]:\n                            l += 1\n                        while l < r and nums[r] == nums[r + 1]:\n                            r -= 1\n                    elif s < target:\n                        l += 1\n                    "
    },
    {
        "number": 19,
        "title": "Remove Nth Node From End of List",
        "difficulty": 1,
        "pass": 0,
        "answer": "        dummy = ListNode(0)\n        dummy.next = head\n        p1, p2 = dummy, dummy\n        for i in range(n):\n            p1 = p1.next\n        while p1.next:\n            p1 = p1.next\n            p2 = p2.next\n        p2.next = p2.next.next\n        return dummy.next\n"
    },
    {
        "number": 19,
        "title": "Remove Nth Node From End of List",
        "difficulty": 1,
        "pass": 1,
        "answer": "        dummy = ListNode(0)\n        dummy.next = head\n        p1, p2 = dummy, dummy\n        for _ in range(n):\n            p1 = p1.next\n        while p1.next:\n            p1 = p1.next\n            p2 = p2.next\n        p2.next = p2.next.next\n        return dummy.next\n"
    },
    {
        "number": 19,
        "title": "Remove Nth Node From End of List",
        "difficulty": 1,
        "pass": 2,
        "answer": "        dummy = ListNode(0)\n        dummy.next = head\n        p1, p2 = dummy, dummy\n        for _ in range(n):\n            p1 = p1.next\n        while p1.next:\n            p1 = p1.next\n            p2 = p2.next\n        p2.next = p2.next.next\n        return dummy.next\n"
    },
    {
        "number": 19,
        "title": "Remove Nth Node From End of List",
        "difficulty": 1,
        "pass": 3,
        "answer": "        dummy = ListNode(0)\n        dummy.next = head\n        p1, p2 = dummy, dummy\n        for i in range(n):\n            p1 = p1.next\n        while p1.next:\n            p1 = p1.next\n            p2 = p2.next\n        p2.next = p2.next.next\n        return dummy.next"
    },
    {
        "number": 19,
        "title": "Remove Nth Node From End of List",
        "difficulty": 1,
        "pass": 4,
        "answer": "        dummy = ListNode(0)\n        dummy.next = head\n        p1, p2 = dummy, dummy\n        for _ in range(n):\n            p1 = p1.next\n        while p1.next:\n            p1 = p1.next\n            p2 = p2.next\n        p2.next = p2.next.next\n        return dummy.next"
    },
    {
        "number": 19,
        "title": "Remove Nth Node From End of List",
        "difficulty": 1,
        "pass": 5,
        "answer": "        if not head:\n            return None\n        dummy = ListNode(0)\n        dummy.next = head\n        p1, p2 = dummy, dummy\n        for i in range(n):\n            p1 = p1.next\n        while p1.next:\n            p1 = p1.next\n            p2 = p2.next\n        p2.next = p2.next.next\n        return dummy.next"
    },
    {
        "number": 19,
        "title": "Remove Nth Node From End of List",
        "difficulty": 1,
        "pass": 6,
        "answer": "        dummy = ListNode(0)\n        dummy.next = head\n        p1, p2 = dummy, dummy\n        for i in range(n):\n            p1 = p1.next\n        while p1.next:\n            p1 = p1.next\n            p2 = p2.next\n        p2.next = p2.next.next\n        return dummy.next"
    },
    {
        "number": 19,
        "title": "Remove Nth Node From End of List",
        "difficulty": 1,
        "pass": 7,
        "answer": "        dummy = ListNode(0)\n        dummy.next = head\n        p1, p2 = dummy, dummy\n        for _ in range(n):\n            p1 = p1.next\n        while p1.next:\n            p1 = p1.next\n            p2 = p2.next\n        p2.next = p2.next.next\n        return dummy.next"
    },
    {
        "number": 19,
        "title": "Remove Nth Node From End of List",
        "difficulty": 1,
        "pass": 8,
        "answer": "        dummy = ListNode(0)\n        dummy.next = head\n        p1, p2 = dummy, dummy\n        for _ in range(n):\n            p1 = p1.next\n        while p1.next:\n            p1 = p1.next\n            p2 = p2.next\n        p2.next = p2.next.next\n        return dummy.next\n"
    },
    {
        "number": 19,
        "title": "Remove Nth Node From End of List",
        "difficulty": 1,
        "pass": 9,
        "answer": "        dummy = ListNode(0)\n        dummy.next = head\n        p1, p2 = dummy, dummy\n        for i in range(n):\n            p1 = p1.next\n        while p1.next:\n            p1 = p1.next\n            p2 = p2.next\n        p2.next = p2.next.next\n        return dummy.next"
    },
    {
        "number": 20,
        "title": "Valid Parentheses",
        "difficulty": 0,
        "pass": 0,
        "answer": "        stack = []\n        mapping = {\n            ')': '(',\n            '}': '{',\n            ']': '['\n        }\n        for c in s:\n            if c in mapping:\n                if not stack or stack[-1]!= mapping[c]:\n                    return False\n                stack.pop()\n            else:\n                stack.append(c)\n        return not stack"
    },
    {
        "number": 20,
        "title": "Valid Parentheses",
        "difficulty": 0,
        "pass": 1,
        "answer": "        stack = []\n        for c in s:\n            if c == '(' or c == '[' or c == '{':\n                stack.append(c)\n            elif c == ')':\n                if len(stack) == 0 or stack.pop()!= '(':\n                    return False\n            elif c == ']':\n                if len(stack) == 0 or stack.pop()!= '[':\n                    return False\n            elif c == '}':\n                if len(stack) == 0 or stack.pop()!= '{':\n                    return False\n        return len(stack) == 0"
    },
    {
        "number": 20,
        "title": "Valid Parentheses",
        "difficulty": 0,
        "pass": 2,
        "answer": "        stack = []\n        for c in s:\n            if c == '(' or c == '[' or c == '{':\n                stack.append(c)\n            elif c == ')' or c == ']' or c == '}':\n                if len(stack) == 0:\n                    return False\n                if c == ')' and stack[-1] == '(':\n                    stack.pop()\n                elif c == ']' and stack[-1] == '[':\n                    stack.pop()\n                elif c == '}' and stack[-1] == '{':\n                    stack.pop()\n                else:\n                    return False\n        if len(stack) == 0:\n            return True\n        else:\n            return False"
    },
    {
        "number": 20,
        "title": "Valid Parentheses",
        "difficulty": 0,
        "pass": 3,
        "answer": "        stack = []\n        for c in s:\n            if c == '(' or c == '[' or c == '{':\n                stack.append(c)\n            elif c == ')':\n                if len(stack) == 0 or stack.pop()!= '(':\n                    return False\n            elif c == ']':\n                if len(stack) == 0 or stack.pop()!= '[':\n                    return False\n            elif c == '}':\n                if len(stack) == 0 or stack.pop()!= '{':\n                    return False\n        return len(stack) == 0"
    },
    {
        "number": 20,
        "title": "Valid Parentheses",
        "difficulty": 0,
        "pass": 4,
        "answer": "        stack = []\n        for c in s:\n            if c == '(' or c == '[' or c == '{':\n                stack.append(c)\n            elif c == ')':\n                if len(stack) == 0 or stack.pop()!= '(':\n                    return False\n            elif c == ']':\n                if len(stack) == 0 or stack.pop()!= '[':\n                    return False\n            elif c == '}':\n                if len(stack) == 0 or stack.pop()!= '{':\n                    return False\n        return len(stack) == 0"
    },
    {
        "number": 20,
        "title": "Valid Parentheses",
        "difficulty": 0,
        "pass": 5,
        "answer": "        stack = []\n        table = {\n            ')': '(',\n            ']': '[',\n            '}': '{'\n        }\n        for c in s:\n            if c in table:\n                if not stack or table[c]!= stack.pop():\n                    return False\n            else:\n                stack.append(c)\n        return not stack"
    },
    {
        "number": 20,
        "title": "Valid Parentheses",
        "difficulty": 0,
        "pass": 6,
        "answer": "        stack = []\n        for c in s:\n            if c == '(' or c == '[' or c == '{':\n                stack.append(c)\n            elif c == ')':\n                if len(stack) == 0 or stack.pop()!= '(':\n                    return False\n            elif c == ']':\n                if len(stack) == 0 or stack.pop()!= '[':\n                    return False\n            elif c == '}':\n                if len(stack) == 0 or stack.pop()!= '{':\n                    return False\n        return len(stack) == 0"
    },
    {
        "number": 20,
        "title": "Valid Parentheses",
        "difficulty": 0,
        "pass": 7,
        "answer": "        stack = []\n        for c in s:\n            if c == '(' or c == '[' or c == '{':\n                stack.append(c)\n            elif c == ')':\n                if len(stack) == 0 or stack.pop()!= '(':\n                    return False\n            elif c == ']':\n                if len(stack) == 0 or stack.pop()!= '[':\n                    return False\n            elif c == '}':\n                if len(stack) == 0 or stack.pop()!= '{':\n                    return False\n        return len(stack) == 0"
    },
    {
        "number": 20,
        "title": "Valid Parentheses",
        "difficulty": 0,
        "pass": 8,
        "answer": "        stack = []\n        mapping = {')': '(', '}': '{', ']': '['}\n        for c in s:\n            if c in mapping:\n                if stack and stack[-1] == mapping[c]:\n                    stack.pop()\n                else:\n                    return False\n            else:\n                stack.append(c)\n        return not stack"
    },
    {
        "number": 20,
        "title": "Valid Parentheses",
        "difficulty": 0,
        "pass": 9,
        "answer": "        stack = []\n        for c in s:\n            if c == '(' or c == '[' or c == '{':\n                stack.append(c)\n            elif c == ')':\n                if len(stack) == 0 or stack.pop()!= '(':\n                    return False\n            elif c == ']':\n                if len(stack) == 0 or stack.pop()!= '[':\n                    return False\n            elif c == '}':\n                if len(stack) == 0 or stack.pop()!= '{':\n                    return False\n        return len(stack) == 0"
    },
    {
        "number": 21,
        "title": "Merge Two Sorted Lists",
        "difficulty": 0,
        "pass": 0,
        "answer": "        if not list1 and not list2:\n            return None\n        if not list1:\n            return list2\n        if not list2:\n            return list1\n        dummy = ListNode(0)\n        cur = dummy\n        while list1 and list2:\n            if list1.val < list2.val:\n                cur.next = list1\n                list1 = list1.next\n            else:\n                cur.next = list2\n                list2 = list2.next\n            cur = cur.next\n        if list1:\n            cur.next = list1\n        if list2:\n            cur.next = list2\n        return dummy.next"
    },
    {
        "number": 21,
        "title": "Merge Two Sorted Lists",
        "difficulty": 0,
        "pass": 1,
        "answer": "        if not list1 and not list2:\n            return None\n        if not list1:\n            return list2\n        if not list2:\n            return list1\n        if list1.val < list2.val:\n            list1.next = self.mergeTwoLists(list1.next, list2)\n            return list1\n        else:\n            list2.next = self.mergeTwoLists(list1, list2.next)\n            return list2"
    },
    {
        "number": 21,
        "title": "Merge Two Sorted Lists",
        "difficulty": 0,
        "pass": 2,
        "answer": "        if not list1 and not list2:\n            return None\n        if not list1:\n            return list2\n        if not list2:\n            return list1\n        if list1.val < list2.val:\n            list1.next = self.mergeTwoLists(list1.next, list2)\n            return list1\n        else:\n            list2.next = self.mergeTwoLists(list1, list2.next)\n            return list2"
    },
    {
        "number": 21,
        "title": "Merge Two Sorted Lists",
        "difficulty": 0,
        "pass": 3,
        "answer": "        if not list1 and not list2:\n            return None\n        if not list1:\n            return list2\n        if not list2:\n            return list1\n        if list1.val < list2.val:\n            list1.next = self.mergeTwoLists(list1.next, list2)\n            return list1\n        else:\n            list2.next = self.mergeTwoLists(list1, list2.next)\n            return list2"
    },
    {
        "number": 21,
        "title": "Merge Two Sorted Lists",
        "difficulty": 0,
        "pass": 4,
        "answer": "        if not list1 and not list2:\n            return None\n        if not list1:\n            return list2\n        if not list2:\n            return list1\n        if list1.val < list2.val:\n            list1.next = self.mergeTwoLists(list1.next, list2)\n            return list1\n        else:\n            list2.next = self.mergeTwoLists(list1, list2.next)\n            return list2"
    },
    {
        "number": 21,
        "title": "Merge Two Sorted Lists",
        "difficulty": 0,
        "pass": 5,
        "answer": "        if not list1 and not list2:\n            return None\n        elif not list1:\n            return list2\n        elif not list2:\n            return list1\n        elif list1.val < list2.val:\n            list1.next = self.mergeTwoLists(list1.next, list2)\n            return list1\n        else:\n            list2.next = self.mergeTwoLists(list1, list2.next)\n            return list2"
    },
    {
        "number": 21,
        "title": "Merge Two Sorted Lists",
        "difficulty": 0,
        "pass": 6,
        "answer": "        if not list1 and not list2:\n            return None\n        if not list1:\n            return list2\n        if not list2:\n            return list1\n        dummy = ListNode(0)\n        p = dummy\n        while list1 and list2:\n            if list1.val < list2.val:\n                p.next = list1\n                list1 = list1.next\n                p = p.next\n            else:\n                p.next = list2\n                list2 = list2.next\n                p = p.next\n        if list1:\n            p.next = list1\n        if list2:\n            p.next = list2\n        return dummy.next"
    },
    {
        "number": 21,
        "title": "Merge Two Sorted Lists",
        "difficulty": 0,
        "pass": 7,
        "answer": "        if not list1 and not list2:\n            return None\n        if not list1:\n            return list2\n        if not list2:\n            return list1\n        if list1.val < list2.val:\n            list1.next = self.mergeTwoLists(list1.next, list2)\n            return list1\n        else:\n            list2.next = self.mergeTwoLists(list1, list2.next)\n            return list2"
    },
    {
        "number": 21,
        "title": "Merge Two Sorted Lists",
        "difficulty": 0,
        "pass": 8,
        "answer": "        if not list1 and not list2:\n            return None\n        if not list1:\n            return list2\n        if not list2:\n            return list1\n        if list1.val < list2.val:\n            list1.next = self.mergeTwoLists(list1.next, list2)\n            return list1\n        else:\n            list2.next = self.mergeTwoLists(list1, list2.next)\n            return list2"
    },
    {
        "number": 21,
        "title": "Merge Two Sorted Lists",
        "difficulty": 0,
        "pass": 9,
        "answer": "        if not list1 and not list2:\n            return None\n        if not list1:\n            return list2\n        if not list2:\n            return list1\n        if list1.val < list2.val:\n            list1.next = self.mergeTwoLists(list1.next, list2)\n            return list1\n        else:\n            list2.next = self.mergeTwoLists(list1, list2.next)\n            return list2"
    },
    {
        "number": 22,
        "title": "Generate Parentheses",
        "difficulty": 1,
        "pass": 0,
        "answer": "        if n == 0:\n            return []\n        res = []\n        self.helper(n, n, '', res)\n        return res"
    },
    {
        "number": 22,
        "title": "Generate Parentheses",
        "difficulty": 1,
        "pass": 1,
        "answer": "        if n == 0:\n            return []\n        if n == 1:\n            return [\"()\"]\n        res = []\n        for i in range(n):\n            for left in self.generateParenthesis(i):\n                for right in self.generateParenthesis(n - 1 - i):\n                    res.append(\"({}){}\".format(left, right))\n        return res"
    },
    {
        "number": 22,
        "title": "Generate Parentheses",
        "difficulty": 1,
        "pass": 2,
        "answer": "        res = []\n        self.helper(n, n, '', res)\n        return res"
    },
    {
        "number": 22,
        "title": "Generate Parentheses",
        "difficulty": 1,
        "pass": 3,
        "answer": "        if n == 0:\n            return []\n        elif n == 1:\n            return [\"()\"]\n        elif n == 2:\n            return [\"()()\", \"(())\"]\n        elif n == 3:\n            return [\"((()))\", \"(()())\", \"(())()\", \"()(())\", \"()()()\"]\n        elif n == 4:\n            return [\"(((())))\", \"(()()())\", \"(())()()\", \"()((()))\", \"()(()())\", \"()()(())\", \"()()()()\"]\n        elif n == 5:\n            return [\"(((())))\", \"(()()())\", \"(())()()\", \"()((()))\", \"()(()())\", \"()()(())\", \"()()()()\"]\n        elif n == 6:\n            return [\"(((())))\", \"(()()())\", \"(())()()\", \"()((()))\", \"()(()())\", \"()()(())\", \"()()()()\"]\n        elif n == 7:\n            return [\"(((())))\", \"(()()())"
    },
    {
        "number": 22,
        "title": "Generate Parentheses",
        "difficulty": 1,
        "pass": 4,
        "answer": "        res = []\n        self.helper(n, n, '', res)\n        return res"
    },
    {
        "number": 22,
        "title": "Generate Parentheses",
        "difficulty": 1,
        "pass": 5,
        "answer": "        if n == 0:\n            return []\n        if n == 1:\n            return [\"()\"]\n        res = []\n        for i in range(n):\n            for left in self.generateParenthesis(i):\n                for right in self.generateParenthesis(n - 1 - i):\n                    res.append(\"({}){}\".format(left, right))\n        return res"
    },
    {
        "number": 22,
        "title": "Generate Parentheses",
        "difficulty": 1,
        "pass": 6,
        "answer": "        if n == 0:\n            return []\n        if n == 1:\n            return [\"()\"]\n        res = []\n        self.helper(n, n, \"\", res)\n        return res"
    },
    {
        "number": 22,
        "title": "Generate Parentheses",
        "difficulty": 1,
        "pass": 7,
        "answer": "        if n == 0:\n            return []\n        if n == 1:\n            return [\"()\"]\n        res = []\n        for i in range(n):\n            for left in self.generateParenthesis(i):\n                for right in self.generateParenthesis(n - 1 - i):\n                    res.append(\"({}){}\".format(left, right))\n        return res"
    },
    {
        "number": 22,
        "title": "Generate Parentheses",
        "difficulty": 1,
        "pass": 8,
        "answer": "        res = []\n        self.helper(n, 0, 0, \"\", res)\n        return res"
    },
    {
        "number": 22,
        "title": "Generate Parentheses",
        "difficulty": 1,
        "pass": 9,
        "answer": "        if n == 0:\n            return []\n        elif n == 1:\n            return [\"()\"]\n        else:\n            result = []\n            for i in range(n):\n                for left in self.generateParenthesis(i):\n                    for right in self.generateParenthesis(n - 1 - i):\n                        result.append(\"(\" + left + \")\")\n                        result.append(\"()\" + right)\n                        result.append(left + \"()\")\n                        result.append(\"()\" + right)\n                        result.append(left + \"()\")\n                        result.append(right + \"()\")\n            return result\n"
    },
    {
        "number": 23,
        "title": "Merge k Sorted Lists",
        "difficulty": 2,
        "pass": 0,
        "answer": "        if not lists:\n            return None\n        if len(lists) == 1:\n            return lists[0]"
    },
    {
        "number": 23,
        "title": "Merge k Sorted Lists",
        "difficulty": 2,
        "pass": 1,
        "answer": "        if not lists:\n            return None\n        if len(lists) == 1:\n            return lists[0]\n        mid = len(lists) // 2\n        left = self.mergeKLists(lists[:mid])\n        right = self.mergeKLists(lists[mid:])\n        return self.mergeTwoLists(left, right)"
    },
    {
        "number": 23,
        "title": "Merge k Sorted Lists",
        "difficulty": 2,
        "pass": 2,
        "answer": "        if not lists:\n            return None\n        import heapq\n        heap = []\n        for i in range(len(lists)):\n            if lists[i]:\n                heapq.heappush(heap, (lists[i].val, i))\n                lists[i] = lists[i].next\n        dummy = ListNode(0)\n        curr = dummy\n        while heap:\n            val, idx = heapq.heappop(heap)\n            curr.next = ListNode(val)\n            curr = curr.next\n            if lists[idx]:\n                heapq.heappush(heap, (lists[idx].val, idx))\n                lists[idx] = lists[idx].next\n        return dummy.next"
    },
    {
        "number": 23,
        "title": "Merge k Sorted Lists",
        "difficulty": 2,
        "pass": 3,
        "answer": "        if not lists:\n            return None\n        if len(lists) == 1:\n            return lists[0]\n        mid = len(lists) // 2\n        left = self.mergeKLists(lists[:mid])\n        right = self.mergeKLists(lists[mid:])\n        return self.mergeTwoLists(left, right)"
    },
    {
        "number": 23,
        "title": "Merge k Sorted Lists",
        "difficulty": 2,
        "pass": 4,
        "answer": "        if not lists:\n            return None\n        if len(lists) == 1:\n            return lists[0]\n        mid = len(lists) // 2\n        left = self.mergeKLists(lists[:mid])\n        right = self.mergeKLists(lists[mid:])\n        return self.mergeTwoLists(left, right)"
    },
    {
        "number": 23,
        "title": "Merge k Sorted Lists",
        "difficulty": 2,
        "pass": 5,
        "answer": "        if not lists:\n            return None\n        if len(lists) == 1:\n            return lists[0]\n        mid = len(lists) // 2\n        left = self.mergeKLists(lists[:mid])\n        right = self.mergeKLists(lists[mid:])\n        return self.mergeTwoLists(left, right)"
    },
    {
        "number": 23,
        "title": "Merge k Sorted Lists",
        "difficulty": 2,
        "pass": 6,
        "answer": "        if not lists:\n            return None\n        if len(lists) == 1:\n            return lists[0]\n        mid = len(lists) // 2\n        left = self.mergeKLists(lists[:mid])\n        right = self.mergeKLists(lists[mid:])\n        return self.mergeTwoLists(left, right)"
    },
    {
        "number": 23,
        "title": "Merge k Sorted Lists",
        "difficulty": 2,
        "pass": 7,
        "answer": "        if not lists:\n            return None\n        if len(lists) == 1:\n            return lists[0]"
    },
    {
        "number": 23,
        "title": "Merge k Sorted Lists",
        "difficulty": 2,
        "pass": 8,
        "answer": "        if not lists:\n            return None\n        if len(lists) == 1:\n            return lists[0]\n        mid = len(lists) // 2\n        left = self.mergeKLists(lists[:mid])\n        right = self.mergeKLists(lists[mid:])\n        return self.mergeTwoLists(left, right)"
    },
    {
        "number": 23,
        "title": "Merge k Sorted Lists",
        "difficulty": 2,
        "pass": 9,
        "answer": "        if len(lists) == 0:\n            return None\n        if len(lists) == 1:\n            return lists[0]\n        if len(lists) == 2:\n            return self.mergeTwoLists(lists[0], lists[1])\n        mid = len(lists) // 2\n        left = self.mergeKLists(lists[:mid])\n        right = self.mergeKLists(lists[mid:])\n        return self.mergeTwoLists(left, right)"
    },
    {
        "number": 24,
        "title": "Swap Nodes in Pairs",
        "difficulty": 1,
        "pass": 0,
        "answer": "        if not head or not head.next:\n            return head\n        dummy = ListNode(0)\n        dummy.next = head\n        curr = dummy\n        while curr.next and curr.next.next:\n            node1 = curr.next\n            node2 = curr.next.next\n            curr.next = node2\n            node1.next = node2.next\n            node2.next = node1\n            curr = curr.next.next\n        return dummy.next\n"
    },
    {
        "number": 24,
        "title": "Swap Nodes in Pairs",
        "difficulty": 1,
        "pass": 1,
        "answer": "        if not head or not head.next:\n            return head\n        curr = head\n        while curr and curr.next:\n            curr.val, curr.next.val = curr.next.val, curr.val\n            curr = curr.next.next\n        return head\n"
    },
    {
        "number": 24,
        "title": "Swap Nodes in Pairs",
        "difficulty": 1,
        "pass": 2,
        "answer": "        if not head or not head.next:\n            return head\n        dummy = ListNode(0)\n        dummy.next = head\n        curr = dummy\n        while curr.next and curr.next.next:\n            node1 = curr.next\n            node2 = curr.next.next\n            curr.next = node2\n            node1.next = node2.next\n            node2.next = node1\n            curr = curr.next.next\n        return dummy.next"
    },
    {
        "number": 24,
        "title": "Swap Nodes in Pairs",
        "difficulty": 1,
        "pass": 3,
        "answer": "        if not head or not head.next:\n            return head"
    },
    {
        "number": 24,
        "title": "Swap Nodes in Pairs",
        "difficulty": 1,
        "pass": 4,
        "answer": "        if not head or not head.next:\n            return head\n        dummy = ListNode(0)\n        dummy.next = head\n        curr = dummy\n        while curr.next and curr.next.next:\n            first = curr.next\n            second = curr.next.next\n            curr.next = second\n            first.next = second.next\n            second.next = first\n            curr = curr.next.next\n        return dummy.next"
    },
    {
        "number": 24,
        "title": "Swap Nodes in Pairs",
        "difficulty": 1,
        "pass": 5,
        "answer": "        if not head or not head.next:\n            return head\n        dummy = ListNode(0)\n        dummy.next = head\n        pre = dummy\n        while pre.next and pre.next.next:\n            a = pre.next\n            b = a.next\n            pre.next = b\n            a.next = b.next\n            b.next = a\n            pre = a\n        return dummy.next"
    },
    {
        "number": 24,
        "title": "Swap Nodes in Pairs",
        "difficulty": 1,
        "pass": 6,
        "answer": "        if not head or not head.next:\n            return head\n        dummy = ListNode(0)\n        dummy.next = head\n        curr = dummy\n        while curr.next and curr.next.next:\n            node1 = curr.next\n            node2 = curr.next.next\n            curr.next = node2\n            node1.next = node2.next\n            node2.next = node1\n            curr = curr.next.next\n        return dummy.next"
    },
    {
        "number": 24,
        "title": "Swap Nodes in Pairs",
        "difficulty": 1,
        "pass": 7,
        "answer": "        if not head or not head.next:\n            return head\n        dummy = ListNode(0)\n        dummy.next = head\n        curr = dummy\n        while curr.next and curr.next.next:\n            node1 = curr.next\n            node2 = curr.next.next\n            curr.next = node2\n            node1.next = node2.next\n            node2.next = node1\n            curr = curr.next.next\n        return dummy.next"
    },
    {
        "number": 24,
        "title": "Swap Nodes in Pairs",
        "difficulty": 1,
        "pass": 8,
        "answer": "        if not head or not head.next:\n            return head\n        dummy = ListNode(-1)\n        dummy.next = head\n        curr = dummy\n        while curr.next and curr.next.next:\n            node1 = curr.next\n            node2 = curr.next.next\n            curr.next = node2\n            node1.next = node2.next\n            node2.next = node1\n            curr = node1\n        return dummy.next\n"
    },
    {
        "number": 24,
        "title": "Swap Nodes in Pairs",
        "difficulty": 1,
        "pass": 9,
        "answer": "        if not head or not head.next:\n            return head\n        dummy = ListNode(0)\n        dummy.next = head\n        curr = dummy\n        while curr.next and curr.next.next:\n            node1 = curr.next\n            node2 = curr.next.next\n            curr.next = node2\n            node1.next = node2.next\n            node2.next = node1\n            curr = curr.next.next\n        return dummy.next\n"
    },
    {
        "number": 25,
        "title": "Reverse Nodes in k-Group",
        "difficulty": 2,
        "pass": 0,
        "answer": "        dummy = ListNode(0)\n        dummy.next = head\n        curr = dummy\n        count = 0\n        while curr.next:\n            count += 1\n            curr = curr.next\n        if count < k:\n            return head\n        for _ in range(count // k):\n            curr = dummy\n            for _ in range(k):\n                tmp = curr.next\n                curr.next = tmp.next\n                tmp.next = curr.next.next\n                curr.next.next = tmp\n            dummy = dummy.next\n        return dummy.next"
    },
    {
        "number": 25,
        "title": "Reverse Nodes in k-Group",
        "difficulty": 2,
        "pass": 1,
        "answer": "        dummy = ListNode(0)\n        dummy.next = head\n        pre = dummy\n        cur = dummy.next\n        while cur:\n            tail = pre\n            for i in range(k):\n                if not cur:\n                    return dummy.next\n                tail = cur\n                cur = cur.next\n            pre.next = self.reverse(tail, cur)\n            pre = tail\n        return dummy.next"
    },
    {
        "number": 25,
        "title": "Reverse Nodes in k-Group",
        "difficulty": 2,
        "pass": 2,
        "answer": "        dummy = ListNode(0)\n        dummy.next = head\n        pre, cur = dummy, head\n        while cur:\n            for i in range(k):\n                if not cur:\n                    return dummy.next\n                cur = cur.next\n            nxt = cur.next\n            cur.next = None\n            pre.next = self.reverseList(cur)\n            pre = cur\n            cur = nxt\n        return dummy.next"
    },
    {
        "number": 25,
        "title": "Reverse Nodes in k-Group",
        "difficulty": 2,
        "pass": 3,
        "answer": "        dummy = ListNode(0)\n        dummy.next = head\n        pre, cur = dummy, head\n        while cur:\n            for _ in range(k - 1):\n                cur = cur.next\n                if not cur:\n                    return dummy.next\n            nxt = cur.next\n            cur.next = None\n            pre.next = self.reverseList(cur)\n            pre = cur\n            cur = nxt\n        return dummy.next"
    },
    {
        "number": 25,
        "title": "Reverse Nodes in k-Group",
        "difficulty": 2,
        "pass": 4,
        "answer": "        dummy = ListNode(0)\n        dummy.next = head\n        pre = dummy\n        cur = head\n        while cur:\n            for i in range(k-1):\n                cur = cur.next\n                if not cur:\n                    return dummy.next\n            nxt = cur.next\n            cur.next = None\n            pre.next = self.reverseList(cur)\n            pre = dummy\n            cur = nxt\n        return dummy.next"
    },
    {
        "number": 25,
        "title": "Reverse Nodes in k-Group",
        "difficulty": 2,
        "pass": 5,
        "answer": "        dummy = ListNode(0)\n        dummy.next = head\n        pre, cur = dummy, dummy.next\n        while cur:\n            for _ in range(k - 1):\n                if not cur:\n                    return dummy.next\n                cur = cur.next\n            nxt = cur.next\n            cur.next = None\n            pre.next = self.reverseList(cur)\n            pre = pre.next\n            cur = nxt\n        return dummy.next"
    },
    {
        "number": 25,
        "title": "Reverse Nodes in k-Group",
        "difficulty": 2,
        "pass": 6,
        "answer": "        dummy = ListNode(0)\n        dummy.next = head\n        pre = dummy\n        while head:\n            tail = pre\n            for i in range(k):\n                tail = tail.next\n                if not tail:\n                    return dummy.next\n            nex = tail.next\n            head, tail = self.reverse(head, tail)\n            pre.next = head\n            tail.next = nex\n            pre = tail\n            head = tail.next\n        return dummy.next"
    },
    {
        "number": 25,
        "title": "Reverse Nodes in k-Group",
        "difficulty": 2,
        "pass": 7,
        "answer": "        dummy = ListNode(-1)\n        dummy.next = head\n        pre, cur = dummy, head\n        while cur:\n            for _ in range(k - 1):\n                cur = cur.next\n                if not cur:\n                    return dummy.next\n            nxt = cur.next\n            cur.next = None\n            pre.next = self.reverseList(cur)\n            pre = cur\n            cur = nxt\n        return dummy.next"
    },
    {
        "number": 25,
        "title": "Reverse Nodes in k-Group",
        "difficulty": 2,
        "pass": 8,
        "answer": "        dummy = ListNode(0)\n        dummy.next = head\n        p1, p2 = dummy, dummy\n        while p2.next:\n            p2 = p2.next\n            if not p2 or not p2.next:\n                break\n            p3 = p2.next\n            p2.next = p1.next\n            p1.next = p3\n            p1 = p2\n            p2 = p2.next\n        return dummy.next"
    },
    {
        "number": 25,
        "title": "Reverse Nodes in k-Group",
        "difficulty": 2,
        "pass": 9,
        "answer": "        if not head:\n            return None\n        dummy = ListNode(0)\n        dummy.next = head\n        pre, cur = dummy, head\n        while cur:\n            for i in range(k):\n                if not cur:\n                    return dummy.next\n                cur = cur.next\n            next = cur.next\n            cur.next = None\n            pre.next = self.reverseList(cur)\n            pre = cur\n            cur = next\n        return dummy.next"
    },
    {
        "number": 26,
        "title": "Remove Duplicates from Sorted Array",
        "difficulty": 0,
        "pass": 0,
        "answer": "        if not nums:\n            return 0\n        i = 0\n        for j in range(1, len(nums)):\n            if nums[j]!= nums[i]:\n                i += 1\n                nums[i] = nums[j]\n        return i + 1"
    },
    {
        "number": 26,
        "title": "Remove Duplicates from Sorted Array",
        "difficulty": 0,
        "pass": 1,
        "answer": "        if not nums:\n            return 0\n        i = 0\n        for j in range(1, len(nums)):\n            if nums[j]!= nums[i]:\n                i += 1\n                nums[i] = nums[j]\n        return i + 1"
    },
    {
        "number": 26,
        "title": "Remove Duplicates from Sorted Array",
        "difficulty": 0,
        "pass": 2,
        "answer": "        if not nums:\n            return 0\n        i = 0\n        for j in range(1, len(nums)):\n            if nums[j]!= nums[i]:\n                i += 1\n                nums[i] = nums[j]\n        return i + 1"
    },
    {
        "number": 26,
        "title": "Remove Duplicates from Sorted Array",
        "difficulty": 0,
        "pass": 3,
        "answer": "        if not nums:\n            return 0\n        i = 0\n        for j in range(1, len(nums)):\n            if nums[j]!= nums[i]:\n                i += 1\n                nums[i] = nums[j]\n        return i + 1"
    },
    {
        "number": 26,
        "title": "Remove Duplicates from Sorted Array",
        "difficulty": 0,
        "pass": 4,
        "answer": "        if not nums:\n            return 0\n        i = 0\n        for j in range(1, len(nums)):\n            if nums[j]!= nums[i]:\n                i += 1\n                nums[i] = nums[j]\n        return i + 1"
    },
    {
        "number": 26,
        "title": "Remove Duplicates from Sorted Array",
        "difficulty": 0,
        "pass": 5,
        "answer": "        if not nums:\n            return 0\n        if len(nums) == 1:\n            return 1\n        i = 0\n        for j in range(1, len(nums)):\n            if nums[j]!= nums[i]:\n                i += 1\n                nums[i] = nums[j]\n        return i + 1"
    },
    {
        "number": 26,
        "title": "Remove Duplicates from Sorted Array",
        "difficulty": 0,
        "pass": 6,
        "answer": "        n = len(nums)\n        if n == 0:\n            return 0\n        i = 0\n        for j in range(1, n):\n            if nums[j]!= nums[i]:\n                i += 1\n                nums[i] = nums[j]\n        return i + 1"
    },
    {
        "number": 26,
        "title": "Remove Duplicates from Sorted Array",
        "difficulty": 0,
        "pass": 7,
        "answer": "        if not nums:\n            return 0\n        i = 0\n        for j in range(1, len(nums)):\n            if nums[j]!= nums[i]:\n                i += 1\n                nums[i] = nums[j]\n        return i + 1"
    },
    {
        "number": 26,
        "title": "Remove Duplicates from Sorted Array",
        "difficulty": 0,
        "pass": 8,
        "answer": "        if not nums:\n            return 0\n        n = len(nums)\n        i = 0\n        for j in range(1, n):\n            if nums[j]!= nums[i]:\n                i += 1\n                nums[i] = nums[j]\n        return i + 1"
    },
    {
        "number": 26,
        "title": "Remove Duplicates from Sorted Array",
        "difficulty": 0,
        "pass": 9,
        "answer": "        if not nums:\n            return 0\n        i = 0\n        for j in range(1, len(nums)):\n            if nums[j]!= nums[i]:\n                i += 1\n                nums[i] = nums[j]\n        return i + 1"
    },
    {
        "number": 27,
        "title": "Remove Element",
        "difficulty": 0,
        "pass": 0,
        "answer": "        n = len(nums)\n        i = 0\n        for j in range(n):\n            if nums[j]!= val:\n                nums[i], nums[j] = nums[j], nums[i]\n                i += 1\n        return i"
    },
    {
        "number": 27,
        "title": "Remove Element",
        "difficulty": 0,
        "pass": 1,
        "answer": "        n = len(nums)\n        i = 0\n        for j in range(n):\n            if nums[j]!= val:\n                nums[i], nums[j] = nums[j], nums[i]\n                i += 1\n        return i"
    },
    {
        "number": 27,
        "title": "Remove Element",
        "difficulty": 0,
        "pass": 2,
        "answer": "        n = len(nums)\n        j = 0\n        for i in range(n):\n            if nums[i]!= val:\n                nums[j] = nums[i]\n                j += 1\n        return j"
    },
    {
        "number": 27,
        "title": "Remove Element",
        "difficulty": 0,
        "pass": 3,
        "answer": "        n = len(nums)\n        i = 0\n        for j in range(n):\n            if nums[j]!= val:\n                nums[i], nums[j] = nums[j], nums[i]\n                i += 1\n        return i"
    },
    {
        "number": 27,
        "title": "Remove Element",
        "difficulty": 0,
        "pass": 4,
        "answer": "        n = len(nums)\n        i = 0\n        for j in range(n):\n            if nums[j]!= val:\n                nums[i], nums[j] = nums[j], nums[i]\n                i += 1\n        return i"
    },
    {
        "number": 27,
        "title": "Remove Element",
        "difficulty": 0,
        "pass": 5,
        "answer": "        if not nums:\n            return 0\n        left, right = 0, len(nums) - 1\n        while left <= right:\n            if nums[left] == val:\n                nums[left], nums[right] = nums[right], nums[left]\n                right -= 1\n            else:\n                left += 1\n        return left"
    },
    {
        "number": 27,
        "title": "Remove Element",
        "difficulty": 0,
        "pass": 6,
        "answer": "        n = len(nums)\n        i = 0\n        for j in range(n):\n            if nums[j]!= val:\n                nums[i], nums[j] = nums[j], nums[i]\n                i += 1\n        return i"
    },
    {
        "number": 27,
        "title": "Remove Element",
        "difficulty": 0,
        "pass": 7,
        "answer": "        i = 0\n        for j in range(len(nums)):\n            if nums[j]!= val:\n                nums[i] = nums[j]\n                i += 1\n        return i"
    },
    {
        "number": 27,
        "title": "Remove Element",
        "difficulty": 0,
        "pass": 8,
        "answer": "        n = len(nums)\n        i = 0\n        for j in range(n):\n            if nums[j]!= val:\n                nums[i] = nums[j]\n                i += 1\n        return i"
    },
    {
        "number": 27,
        "title": "Remove Element",
        "difficulty": 0,
        "pass": 9,
        "answer": "        n = len(nums)\n        i = 0\n        for j in range(n):\n            if nums[j]!= val:\n                nums[i] = nums[j]\n                i += 1\n        return i"
    },
    {
        "number": 28,
        "title": "Find the Index of the First Occurrence in a String",
        "difficulty": 0,
        "pass": 0,
        "answer": "        if not needle:\n            return 0\n        for i in range(len(haystack) - len(needle) + 1):\n            for j in range(len(needle)):\n                if haystack[i + j]!= needle[j]:\n                    break\n                if j == len(needle) - 1:\n                    return i\n        return -1"
    },
    {
        "number": 28,
        "title": "Find the Index of the First Occurrence in a String",
        "difficulty": 0,
        "pass": 1,
        "answer": "        if not needle:\n            return 0\n        if not haystack:\n            return -1\n        for i in range(len(haystack) - len(needle) + 1):\n            for j in range(len(needle)):\n                if haystack[i + j]!= needle[j]:\n                    break\n                if j == len(needle) - 1:\n                    return i\n        return -1"
    },
    {
        "number": 28,
        "title": "Find the Index of the First Occurrence in a String",
        "difficulty": 0,
        "pass": 2,
        "answer": "        if not needle:\n            return 0\n        if not haystack:\n            return -1\n        for i in range(len(haystack) - len(needle) + 1):\n            if haystack[i:i + len(needle)] == needle:\n                return i\n        return -1"
    },
    {
        "number": 28,
        "title": "Find the Index of the First Occurrence in a String",
        "difficulty": 0,
        "pass": 3,
        "answer": "        if not needle:\n            return 0\n        if not haystack:\n            return -1\n        for i in range(len(haystack) - len(needle) + 1):\n            for j in range(len(needle)):\n                if haystack[i + j]!= needle[j]:\n                    break\n                if j == len(needle) - 1:\n                    return i\n        return -1"
    },
    {
        "number": 28,
        "title": "Find the Index of the First Occurrence in a String",
        "difficulty": 0,
        "pass": 4,
        "answer": "        if not needle:\n            return 0\n        if not haystack:\n            return -1\n        for i in range(len(haystack) - len(needle) + 1):\n            for j in range(len(needle)):\n                if haystack[i + j]!= needle[j]:\n                    break\n                if j == len(needle) - 1:\n                    return i\n        return -1"
    },
    {
        "number": 28,
        "title": "Find the Index of the First Occurrence in a String",
        "difficulty": 0,
        "pass": 5,
        "answer": "        if not needle:\n            return 0\n        for i in range(len(haystack) - len(needle) + 1):\n            for j in range(len(needle)):\n                if haystack[i + j]!= needle[j]:\n                    break\n                if j == len(needle) - 1:\n                    return i\n        return -1"
    },
    {
        "number": 28,
        "title": "Find the Index of the First Occurrence in a String",
        "difficulty": 0,
        "pass": 6,
        "answer": "        if not needle:\n            return 0\n        if not haystack:\n            return -1\n        for i in range(len(haystack) - len(needle) + 1):\n            for j in range(len(needle)):\n                if haystack[i + j]!= needle[j]:\n                    break\n                if j == len(needle) - 1:\n                    return i\n        return -1"
    },
    {
        "number": 28,
        "title": "Find the Index of the First Occurrence in a String",
        "difficulty": 0,
        "pass": 7,
        "answer": "        if not needle:\n            return 0\n        if not haystack:\n            return -1\n        for i in range(len(haystack) - len(needle) + 1):\n            for j in range(len(needle)):\n                if haystack[i + j]!= needle[j]:\n                    break\n                if j == len(needle) - 1:\n                    return i\n        return -1"
    },
    {
        "number": 28,
        "title": "Find the Index of the First Occurrence in a String",
        "difficulty": 0,
        "pass": 8,
        "answer": "        if not needle:\n            return 0\n        for i in range(len(haystack) - len(needle) + 1):\n            for j in range(len(needle)):\n                if haystack[i + j]!= needle[j]:\n                    break\n                if j == len(needle) - 1:\n                    return i\n        return -1"
    },
    {
        "number": 28,
        "title": "Find the Index of the First Occurrence in a String",
        "difficulty": 0,
        "pass": 9,
        "answer": "        if not needle:\n            return 0\n        if not haystack:\n            return -1\n        for i in range(len(haystack) - len(needle) + 1):\n            for j in range(len(needle)):\n                if haystack[i + j]!= needle[j]:\n                    break\n                if j == len(needle) - 1:\n                    return i\n        return -1"
    },
    {
        "number": 29,
        "title": "Divide Two Integers",
        "difficulty": 1,
        "pass": 0,
        "answer": "        if divisor == 0:\n            return None\n        if dividend == 0:\n            return 0\n        sign = -1 if (dividend > 0 and divisor < 0) or (dividend < 0 and divisor > 0) else 1\n        dividend = abs(dividend)\n        divisor = abs(divisor)\n        res = 0\n        while dividend >= divisor:\n            tmp, i = divisor, 1\n            while dividend >= tmp:\n                dividend -= tmp\n                res += i\n                i <<= 1\n                tmp <<= 1\n        res = res if sign == 1 else -res\n        if res > 2 ** 31 - 1:\n            return 2 ** 31 - 1\n        if res < -2 ** 31:\n            return -2 ** 31\n        return res"
    },
    {
        "number": 29,
        "title": "Divide Two Integers",
        "difficulty": 1,
        "pass": 1,
        "answer": "        MAX_INT = 2147483647\n        MIN_INT = -2147483648\n        sign = 1 if (dividend > 0 and divisor > 0) or (dividend < 0 and divisor < 0) else -1\n        dividend, divisor = abs(dividend), abs(divisor)\n        res = 0\n        while dividend >= divisor:\n            temp, i = divisor, 1\n            while dividend >= temp:\n                dividend -= temp\n                res += i\n                i <<= 1\n                temp <<= 1\n        res = res if sign == 1 else -res\n        return min(max(res, MIN_INT), MAX_INT)"
    },
    {
        "number": 29,
        "title": "Divide Two Integers",
        "difficulty": 1,
        "pass": 2,
        "answer": "        MAX_INT = 2147483647\n        MIN_INT = -2147483648\n        sign = 1 if (dividend > 0 and divisor > 0) or (dividend < 0 and divisor < 0) else -1\n        dividend, divisor = abs(dividend), abs(divisor)\n        res = 0\n        while dividend >= divisor:\n            temp, i = divisor, 1\n            while dividend >= temp:\n                dividend -= temp\n                res += i\n                i <<= 1\n                temp <<= 1\n        res = res if sign == 1 else -res\n        return min(max(res, MIN_INT), MAX_INT)"
    },
    {
        "number": 29,
        "title": "Divide Two Integers",
        "difficulty": 1,
        "pass": 3,
        "answer": "        MAX_INT = 2147483647\n        MIN_INT = -2147483648\n        sign = 1 if (dividend > 0 and divisor > 0) or (dividend < 0 and divisor < 0) else -1\n        dividend, divisor = abs(dividend), abs(divisor)\n        res = 0\n        while dividend >= divisor:\n            temp, i = divisor, 1\n            while dividend >= temp:\n                dividend -= temp\n                res += i\n                i <<= 1\n                temp <<= 1\n        res = res if sign == 1 else -res\n        return min(max(res, MIN_INT), MAX_INT)"
    },
    {
        "number": 29,
        "title": "Divide Two Integers",
        "difficulty": 1,
        "pass": 4,
        "answer": "        MAX_INT = 2 ** 31 - 1\n        MIN_INT = -2 ** 31\n        sign = 1 if (dividend > 0 and divisor > 0) or (dividend < 0 and divisor < 0) else -1\n        dividend = abs(dividend)\n        divisor = abs(divisor)\n        res = 0\n        while dividend >= divisor:\n            temp, i = divisor, 1\n            while dividend >= temp:\n                dividend -= temp\n                res += i\n                i <<= 1\n                temp <<= 1\n        res = res if sign == 1 else -res\n        return max(min(res, MAX_INT), MIN_INT)"
    },
    {
        "number": 29,
        "title": "Divide Two Integers",
        "difficulty": 1,
        "pass": 5,
        "answer": "        MAX_INT = 2147483647\n        MIN_INT = -2147483648\n        sign = 1 if (dividend > 0 and divisor > 0) or (dividend < 0 and divisor < 0) else -1\n        dividend, divisor = abs(dividend), abs(divisor)\n        res = 0\n        while dividend >= divisor:\n            temp, i = divisor, 1\n            while dividend >= temp:\n                dividend -= temp\n                res += i\n                i <<= 1\n                temp <<= 1\n        res = res if sign == 1 else -res\n        return min(max(res, MIN_INT), MAX_INT)"
    },
    {
        "number": 29,
        "title": "Divide Two Integers",
        "difficulty": 1,
        "pass": 6,
        "answer": "        MAX_INT = 2147483647\n        MIN_INT = -2147483648\n        sign = 1 if (dividend > 0 and divisor > 0) or (dividend < 0 and divisor < 0) else -1\n        dividend, divisor = abs(dividend), abs(divisor)\n        res = 0\n        while dividend >= divisor:\n            temp, i = divisor, 1\n            while dividend >= temp:\n                dividend -= temp\n                res += i\n                i <<= 1\n                temp <<= 1\n        res = res if sign == 1 else -res\n        return min(max(res, MIN_INT), MAX_INT)"
    },
    {
        "number": 29,
        "title": "Divide Two Integers",
        "difficulty": 1,
        "pass": 7,
        "answer": "        MAX_INT = 2147483647\n        MIN_INT = -2147483648\n        sign = 1 if (dividend > 0 and divisor > 0) or (dividend < 0 and divisor < 0) else -1\n        dividend, divisor = abs(dividend), abs(divisor)\n        res = 0\n        while dividend >= divisor:\n            temp, i = divisor, 1\n            while dividend >= temp:\n                dividend -= temp\n                res += i\n                i <<= 1\n                temp <<= 1\n        res = res if sign == 1 else -res\n        return min(max(res, MIN_INT), MAX_INT)"
    },
    {
        "number": 29,
        "title": "Divide Two Integers",
        "difficulty": 1,
        "pass": 8,
        "answer": "        MAX_INT = 2147483647\n        MIN_INT = -2147483648\n        if dividend == MIN_INT and divisor == -1:\n            return MAX_INT\n        sign = 1\n        if dividend > 0 and divisor < 0 or dividend < 0 and divisor > 0:\n            sign = -1\n        dividend, divisor = abs(dividend), abs(divisor)\n        res = 0\n        while dividend >= divisor:\n            temp, i = divisor, 1\n            while dividend >= temp:\n                dividend -= temp\n                res += i\n                i <<= 1\n                temp <<= 1\n        res = res if sign == 1 else -res\n        if res > MAX_INT:\n            return MAX_INT\n        if res < MIN_INT:\n            return MIN_INT\n        return res"
    },
    {
        "number": 29,
        "title": "Divide Two Integers",
        "difficulty": 1,
        "pass": 9,
        "answer": "        MAX_INT = 2147483647\n        MIN_INT = -2147483648\n        sign = 1 if (dividend > 0 and divisor > 0) or (dividend < 0 and divisor < 0) else -1\n        dividend, divisor = abs(dividend), abs(divisor)\n        res = 0\n        while dividend >= divisor:\n            temp, i = divisor, 1\n            while dividend >= temp:\n                dividend -= temp\n                res += i\n                i <<= 1\n                temp <<= 1\n        res = res if sign == 1 else -res\n        return min(max(res, MIN_INT), MAX_INT)"
    },
    {
        "number": 30,
        "title": "Substring with Concatenation of All Words",
        "difficulty": 2,
        "pass": 0,
        "answer": "        if not s or not words:\n            return []"
    },
    {
        "number": 30,
        "title": "Substring with Concatenation of All Words",
        "difficulty": 2,
        "pass": 1,
        "answer": "        if not s or not words:\n            return []\n        word_len = len(words[0])\n        word_num = len(words)\n        res = []\n        for i in range(word_len):\n            curr_dict = {}\n            for j in range(word_num):\n                if words[j] not in curr_dict:\n                    curr_dict[words[j]] = 1\n                else:\n                    curr_dict[words[j]] += 1\n                if curr_dict[words[j]] > word_num:\n                    break\n                if i + word_len * j < len(s):\n                    if s[i + word_len * j:i + word_len * (j + 1)] in curr_dict:\n                        curr_dict[s[i + word_len * j:i + word_len * (j + 1)]] -= 1\n                        if curr_dict[s[i + word_len * j:i + word_len * (j + 1)]] == 0:\n                            del curr_dict["
    },
    {
        "number": 30,
        "title": "Substring with Concatenation of All Words",
        "difficulty": 2,
        "pass": 2,
        "answer": "        if not s or not words:\n            return []\n        word_count = len(words)\n        word_len = len(words[0])\n        result = []\n        for i in range(len(s) - word_len * word_count + 1):\n            curr = {}\n            for j in range(word_count):\n                curr[words[j]] = curr.get(words[j], 0) + 1\n                if curr[words[j]] > word_count:\n                    break\n                if j == word_count - 1:\n                    result.append(i)\n        return result"
    },
    {
        "number": 30,
        "title": "Substring with Concatenation of All Words",
        "difficulty": 2,
        "pass": 3,
        "answer": "        if not s or not words:\n            return []"
    },
    {
        "number": 30,
        "title": "Substring with Concatenation of All Words",
        "difficulty": 2,
        "pass": 4,
        "answer": "        if not s or not words:\n            return []\n        word_len = len(words[0])\n        word_num = len(words)\n        res = []\n        for i in range(len(s) - word_len * word_num + 1):\n            cur_dict = {}\n            for j in range(word_num):\n                cur_word = s[i + j * word_len:i + j * word_len + word_len]\n                if cur_word not in cur_dict:\n                    cur_dict[cur_word] = 0\n                cur_dict[cur_word] += 1\n                if cur_dict[cur_word] > word_num:\n                    break\n            else:\n                res.append(i)\n        return res"
    },
    {
        "number": 30,
        "title": "Substring with Concatenation of All Words",
        "difficulty": 2,
        "pass": 5,
        "answer": "        n = len(s)\n        if n == 0 or len(words) == 0:\n            return []\n        word_len = len(words[0])\n        if word_len == 0:\n            return []\n        word_num = len(words)\n        res = []\n        for i in range(word_len):\n            tmp = {}\n            for j in range(i, n, word_len):\n                word = s[j:j+word_len]\n                if word in tmp:\n                    tmp[word] += 1\n                else:\n                    tmp[word] = 1\n                if word in words:\n                    if tmp[word] == 1:\n                        del tmp[word]\n                    else:\n                        tmp[word] -= 1\n                else:\n                    break\n            if len(tmp) == 0:\n                res.append(i)\n        return res"
    },
    {
        "number": 30,
        "title": "Substring with Concatenation of All Words",
        "difficulty": 2,
        "pass": 6,
        "answer": "        if not s or not words:\n            return []"
    },
    {
        "number": 30,
        "title": "Substring with Concatenation of All Words",
        "difficulty": 2,
        "pass": 7,
        "answer": "        if not s or not words:\n            return []\n        words_dict = {}\n        for word in words:\n            if word not in words_dict:\n                words_dict[word] = 1\n            else:\n                words_dict[word] += 1\n        result = []\n        for i in range(len(s) - len(words[0]) + 1):\n            curr_dict = {}\n            for j in range(i, i + len(words[0])):\n                if s[j] not in curr_dict:\n                    curr_dict[s[j]] = 1\n                else:\n                    curr_dict[s[j]] += 1\n                if j - i + 1 == len(words[0]):\n                    if curr_dict == words_dict:\n                        result.append(i)\n                    curr_dict[s[i]] -= 1\n                    if curr_dict[s[i]] == 0:\n                        del curr_dict[s[i]]\n        return result"
    },
    {
        "number": 30,
        "title": "Substring with Concatenation of All Words",
        "difficulty": 2,
        "pass": 8,
        "answer": "        if not s or not words:\n            return []"
    },
    {
        "number": 30,
        "title": "Substring with Concatenation of All Words",
        "difficulty": 2,
        "pass": 9,
        "answer": "        if not s or not words:\n            return []\n        word_count = len(words)\n        word_len = len(words[0])\n        res = []\n        for i in range(word_len):\n            tmp = {}\n            for j in range(i, len(s), word_len):\n                word = s[j:j + word_len]\n                if word not in tmp:\n                    tmp[word] = 1\n                else:\n                    tmp[word] += 1\n                if tmp[word] == word_count:\n                    res.append(j)\n        return res"
    },
    {
        "number": 31,
        "title": "Next Permutation",
        "difficulty": 1,
        "pass": 0,
        "answer": "        n = len(nums)\n        i = n - 2\n        while i >= 0 and nums[i + 1] <= nums[i]:\n            i -= 1\n        if i >= 0:\n            j = n - 1\n            while j >= 0 and nums[j] <= nums[i]:\n                j -= 1\n            nums[i], nums[j] = nums[j], nums[i]\n        left, right = i + 1, n - 1\n        while left < right:\n            nums[left], nums[right] = nums[right], nums[left]\n            left += 1\n            right -= 1"
    },
    {
        "number": 31,
        "title": "Next Permutation",
        "difficulty": 1,
        "pass": 1,
        "answer": "        n = len(nums)\n        i = n - 2\n        while i >= 0 and nums[i] >= nums[i + 1]:\n            i -= 1\n        if i >= 0:\n            j = n - 1\n            while j >= 0 and nums[i] >= nums[j]:\n                j -= 1\n            nums[i], nums[j] = nums[j], nums[i]\n        left, right = i + 1, n - 1\n        while left < right:\n            nums[left], nums[right] = nums[right], nums[left]\n            left += 1\n            right -= 1"
    },
    {
        "number": 31,
        "title": "Next Permutation",
        "difficulty": 1,
        "pass": 2,
        "answer": "        if len(nums) <= 1:\n            return"
    },
    {
        "number": 31,
        "title": "Next Permutation",
        "difficulty": 1,
        "pass": 3,
        "answer": "        n = len(nums)\n        if n <= 1:\n            return\n        i = n - 2\n        while i >= 0 and nums[i] >= nums[i + 1]:\n            i -= 1\n        if i >= 0:\n            j = n - 1\n            while j >= 0 and nums[i] >= nums[j]:\n                j -= 1\n            nums[i], nums[j] = nums[j], nums[i]\n        nums[i + 1:] = nums[i + 1:][::-1]"
    },
    {
        "number": 31,
        "title": "Next Permutation",
        "difficulty": 1,
        "pass": 4,
        "answer": "        n = len(nums)\n        i = n - 2\n        while i >= 0 and nums[i] >= nums[i + 1]:\n            i -= 1\n        if i >= 0:\n            j = n - 1\n            while j >= 0 and nums[i] >= nums[j]:\n                j -= 1\n            nums[i], nums[j] = nums[j], nums[i]\n        left, right = i + 1, n - 1\n        while left < right:\n            nums[left], nums[right] = nums[right], nums[left]\n            left += 1\n            right -= 1"
    },
    {
        "number": 31,
        "title": "Next Permutation",
        "difficulty": 1,
        "pass": 5,
        "answer": "        n = len(nums)\n        if n < 2:\n            return\n        i = n - 2\n        while i >= 0 and nums[i] >= nums[i + 1]:\n            i -= 1\n        if i >= 0:\n            j = n - 1\n            while j >= 0 and nums[i] >= nums[j]:\n                j -= 1\n            nums[i], nums[j] = nums[j], nums[i]\n        left, right = i + 1, n - 1\n        while left < right:\n            nums[left], nums[right] = nums[right], nums[left]\n            left += 1\n            right -= 1"
    },
    {
        "number": 31,
        "title": "Next Permutation",
        "difficulty": 1,
        "pass": 6,
        "answer": "        n = len(nums)\n        i = n - 2\n        while i >= 0 and nums[i] >= nums[i + 1]:\n            i -= 1\n        if i >= 0:\n            j = n - 1\n            while j >= 0 and nums[i] >= nums[j]:\n                j -= 1\n            nums[i], nums[j] = nums[j], nums[i]\n        left, right = i + 1, n - 1\n        while left < right:\n            nums[left], nums[right] = nums[right], nums[left]\n            left += 1\n            right -= 1"
    },
    {
        "number": 31,
        "title": "Next Permutation",
        "difficulty": 1,
        "pass": 7,
        "answer": "        if len(nums) <= 1:\n            return\n        i = len(nums) - 2\n        while i >= 0 and nums[i] >= nums[i + 1]:\n            i -= 1\n        if i >= 0:\n            j = len(nums) - 1\n            while j >= 0 and nums[j] <= nums[i]:\n                j -= 1\n            nums[i], nums[j] = nums[j], nums[i]\n        nums[i + 1:] = nums[i + 1:][::-1]"
    },
    {
        "number": 31,
        "title": "Next Permutation",
        "difficulty": 1,
        "pass": 8,
        "answer": "        n = len(nums)\n        i = n - 2\n        while i >= 0 and nums[i] >= nums[i + 1]:\n            i -= 1\n        if i >= 0:\n            j = n - 1\n            while j >= 0 and nums[i] >= nums[j]:\n                j -= 1\n            nums[i], nums[j] = nums[j], nums[i]\n        left, right = i + 1, n - 1\n        while left < right:\n            nums[left], nums[right] = nums[right], nums[left]\n            left += 1\n            right -= 1"
    },
    {
        "number": 31,
        "title": "Next Permutation",
        "difficulty": 1,
        "pass": 9,
        "answer": "        if len(nums) <= 1:\n            return\n        n = len(nums)\n        i = n - 2\n        while i >= 0 and nums[i] >= nums[i + 1]:\n            i -= 1\n        if i >= 0:\n            j = n - 1\n            while j >= 0 and nums[i] >= nums[j]:\n                j -= 1\n            nums[i], nums[j] = nums[j], nums[i]\n        nums[i + 1:] = nums[i + 1:][::-1]"
    },
    {
        "number": 32,
        "title": "Longest Valid Parentheses",
        "difficulty": 2,
        "pass": 0,
        "answer": "        if not s:\n            return 0\n        max_len = 0\n        stack = [-1]\n        for i in range(len(s)):\n            if s[i] == '(':\n                stack.append(i)\n            else:\n                stack.pop()\n                if not stack:\n                    stack.append(i)\n                else:\n                    max_len = max(max_len, i - stack[-1])\n        return max_len"
    },
    {
        "number": 32,
        "title": "Longest Valid Parentheses",
        "difficulty": 2,
        "pass": 1,
        "answer": "        stack = []\n        max_len = 0\n        for i in range(len(s)):\n            if s[i] == '(':\n                stack.append(i)\n            else:\n                if stack:\n                    stack.pop()\n                    if stack:\n                        max_len = max(max_len, i - stack[-1])\n                    else:\n                        max_len = max(max_len, i + 1)\n                else:\n                    max_len = max(max_len, i + 1)\n        return max_len"
    },
    {
        "number": 32,
        "title": "Longest Valid Parentheses",
        "difficulty": 2,
        "pass": 2,
        "answer": "        n = len(s)\n        if n == 0:\n            return 0\n        dp = [0] * n\n        for i in range(1, n):\n            if s[i] == ')':\n                if s[i - 1] == '(':\n                    dp[i] = dp[i - 2] + 2\n                elif i - dp[i - 1] - 1 >= 0 and s[i - dp[i - 1] - 1] == '(':\n                    dp[i] = dp[i - 1] + dp[i - dp[i - 1] - 2] + 2\n        return max(dp)"
    },
    {
        "number": 32,
        "title": "Longest Valid Parentheses",
        "difficulty": 2,
        "pass": 3,
        "answer": "        n = len(s)\n        if n == 0:\n            return 0\n        dp = [0] * n\n        for i in range(1, n):\n            if s[i] == ')':\n                if s[i - 1] == '(':\n                    dp[i] = dp[i - 2] + 2\n                elif i - dp[i - 1] - 1 >= 0 and s[i - dp[i - 1] - 1] == '(':\n                    dp[i] = dp[i - 1] + 2 + dp[i - dp[i - 1] - 2]\n        return max(dp)"
    },
    {
        "number": 32,
        "title": "Longest Valid Parentheses",
        "difficulty": 2,
        "pass": 4,
        "answer": "        if not s:\n            return 0\n        n = len(s)\n        dp = [0] * n\n        for i in range(1, n):\n            if s[i] == ')':\n                if s[i - 1] == '(':\n                    dp[i] = dp[i - 2] + 2\n                elif i - dp[i - 1] - 1 >= 0 and s[i - dp[i - 1] - 1] == '(':\n                    dp[i] = dp[i - 1] + dp[i - dp[i - 1] - 2] + 2\n        return max(dp)"
    },
    {
        "number": 32,
        "title": "Longest Valid Parentheses",
        "difficulty": 2,
        "pass": 5,
        "answer": "        stack = []\n        longest = 0\n        for i in range(len(s)):\n            if s[i] == '(':\n                stack.append(i)\n            else:\n                if stack:\n                    stack.pop()\n                    if not stack:\n                        longest = max(longest, i - stack[-1])\n                    else:\n                        longest = max(longest, i - stack[-1])\n                else:\n                    stack.append(i)\n        return longest"
    },
    {
        "number": 32,
        "title": "Longest Valid Parentheses",
        "difficulty": 2,
        "pass": 6,
        "answer": "        stack = []\n        max_len = 0\n        for i in range(len(s)):\n            if s[i] == '(':\n                stack.append(i)\n            else:\n                if stack:\n                    stack.pop()\n                    if stack:\n                        max_len = max(max_len, i - stack[-1])\n                    else:\n                        max_len = max(max_len, i + 1)\n                else:\n                    max_len = max(max_len, i + 1)\n        return max_len"
    },
    {
        "number": 32,
        "title": "Longest Valid Parentheses",
        "difficulty": 2,
        "pass": 7,
        "answer": "        stack = []\n        res = 0\n        for i in range(len(s)):\n            if s[i] == '(':\n                stack.append(i)\n            else:\n                if stack:\n                    stack.pop()\n                    if not stack:\n                        res = max(res, i - stack[-1])\n                    else:\n                        res = max(res, i - stack[-1])\n                else:\n                    stack.append(i)\n        return res"
    },
    {
        "number": 32,
        "title": "Longest Valid Parentheses",
        "difficulty": 2,
        "pass": 8,
        "answer": "        stack = []\n        max_len = 0\n        for i in range(len(s)):\n            if s[i] == '(':\n                stack.append(i)\n            else:\n                if stack:\n                    stack.pop()\n                    if stack:\n                        max_len = max(max_len, i - stack[-1])\n                    else:\n                        max_len = max(max_len, i + 1)\n                else:\n                    max_len = max(max_len, i + 1)\n        return max_len"
    },
    {
        "number": 32,
        "title": "Longest Valid Parentheses",
        "difficulty": 2,
        "pass": 9,
        "answer": "        n = len(s)\n        if n == 0:\n            return 0\n        dp = [0] * n\n        for i in range(1, n):\n            if s[i] == ')':\n                if s[i - 1] == '(':\n                    dp[i] = dp[i - 2] + 2\n                elif i - dp[i - 1] - 1 >= 0 and s[i - dp[i - 1] - 1] == '(':\n                    dp[i] = dp[i - 1] + 2 + dp[i - dp[i - 1] - 2]\n        return max(dp)"
    },
    {
        "number": 33,
        "title": "Search in Rotated Sorted Array",
        "difficulty": 1,
        "pass": 0,
        "answer": "        l, r = 0, len(nums) - 1\n        while l <= r:\n            mid = (l + r) // 2\n            if nums[mid] == target:\n                return mid\n            if nums[0] <= nums[mid]:\n                if nums[0] <= target < nums[mid]:\n                    r = mid - 1\n                else:\n                    l = mid + 1\n            else:\n                if nums[mid] < target <= nums[len(nums) - 1]:\n                    l = mid + 1\n                else:\n                    r = mid - 1\n        return -1"
    },
    {
        "number": 33,
        "title": "Search in Rotated Sorted Array",
        "difficulty": 1,
        "pass": 1,
        "answer": "        if not nums:\n            return -1\n        l, r = 0, len(nums) - 1\n        while l <= r:\n            mid = (l + r) // 2\n            if nums[mid] == target:\n                return mid\n            if nums[0] <= nums[mid]:\n                if nums[0] <= target < nums[mid]:\n                    r = mid - 1\n                else:\n                    l = mid + 1\n            else:\n                if nums[mid] < target <= nums[len(nums) - 1]:\n                    l = mid + 1\n                else:\n                    r = mid - 1\n        return -1"
    },
    {
        "number": 33,
        "title": "Search in Rotated Sorted Array",
        "difficulty": 1,
        "pass": 2,
        "answer": "        left, right = 0, len(nums) - 1\n        while left <= right:\n            mid = (left + right) // 2\n            if nums[mid] == target:\n                return mid\n            if nums[left] <= nums[mid]:\n                if nums[left] <= target < nums[mid]:\n                    right = mid - 1\n                else:\n                    left = mid + 1\n            else:\n                if nums[mid] < target <= nums[right]:\n                    left = mid + 1\n                else:\n                    right = mid - 1\n        return -1"
    },
    {
        "number": 33,
        "title": "Search in Rotated Sorted Array",
        "difficulty": 1,
        "pass": 3,
        "answer": "        left, right = 0, len(nums) - 1\n        while left <= right:\n            mid = left + (right - left) // 2\n            if nums[mid] == target:\n                return mid\n            if nums[left] <= nums[mid]:\n                if nums[left] <= target < nums[mid]:\n                    right = mid - 1\n                else:\n                    left = mid + 1\n            else:\n                if nums[mid] < target <= nums[right]:\n                    left = mid + 1\n                else:\n                    right = mid - 1\n        return -1"
    },
    {
        "number": 33,
        "title": "Search in Rotated Sorted Array",
        "difficulty": 1,
        "pass": 4,
        "answer": "        l, r = 0, len(nums) - 1\n        while l <= r:\n            mid = (l + r) // 2\n            if nums[mid] == target:\n                return mid\n            if nums[0] <= nums[mid]:\n                if nums[0] <= target < nums[mid]:\n                    r = mid - 1\n                else:\n                    l = mid + 1\n            else:\n                if nums[mid] < target <= nums[len(nums) - 1]:\n                    l = mid + 1\n                else:\n                    r = mid - 1\n        return -1"
    },
    {
        "number": 33,
        "title": "Search in Rotated Sorted Array",
        "difficulty": 1,
        "pass": 5,
        "answer": "        left, right = 0, len(nums) - 1\n        while left <= right:\n            mid = (left + right) // 2\n            if nums[mid] == target:\n                return mid\n            if nums[left] <= nums[mid]:\n                if nums[left] <= target < nums[mid]:\n                    right = mid - 1\n                else:\n                    left = mid + 1\n            else:\n                if nums[mid] < target <= nums[right]:\n                    left = mid + 1\n                else:\n                    right = mid - 1\n        return -1"
    },
    {
        "number": 33,
        "title": "Search in Rotated Sorted Array",
        "difficulty": 1,
        "pass": 6,
        "answer": "        left, right = 0, len(nums) - 1\n        while left <= right:\n            mid = (left + right) // 2\n            if nums[mid] == target:\n                return mid\n            if nums[left] <= nums[mid]:\n                if nums[left] <= target < nums[mid]:\n                    right = mid - 1\n                else:\n                    left = mid + 1\n            else:\n                if nums[mid] < target <= nums[right]:\n                    left = mid + 1\n                else:\n                    right = mid - 1\n        return -1"
    },
    {
        "number": 33,
        "title": "Search in Rotated Sorted Array",
        "difficulty": 1,
        "pass": 7,
        "answer": "        left, right = 0, len(nums) - 1\n        while left <= right:\n            mid = (left + right) // 2\n            if nums[mid] == target:\n                return mid\n            if nums[left] <= nums[mid]:\n                if nums[left] <= target < nums[mid]:\n                    right = mid - 1\n                else:\n                    left = mid + 1\n            else:\n                if nums[mid] < target <= nums[right]:\n                    left = mid + 1\n                else:\n                    right = mid - 1\n        return -1"
    },
    {
        "number": 33,
        "title": "Search in Rotated Sorted Array",
        "difficulty": 1,
        "pass": 8,
        "answer": "        left, right = 0, len(nums) - 1\n        while left <= right:\n            mid = (left + right) // 2\n            if nums[mid] == target:\n                return mid\n            if nums[left] <= nums[mid]:\n                if nums[left] <= target < nums[mid]:\n                    right = mid - 1\n                else:\n                    left = mid + 1\n            else:\n                if nums[mid] < target <= nums[right]:\n                    left = mid + 1\n                else:\n                    right = mid - 1\n        return -1"
    },
    {
        "number": 33,
        "title": "Search in Rotated Sorted Array",
        "difficulty": 1,
        "pass": 9,
        "answer": "        left, right = 0, len(nums) - 1\n        while left <= right:\n            mid = (left + right) // 2\n            if nums[mid] == target:\n                return mid\n            if nums[left] <= nums[mid]:\n                if nums[left] <= target < nums[mid]:\n                    right = mid - 1\n                else:\n                    left = mid + 1\n            else:\n                if nums[mid] < target <= nums[right]:\n                    left = mid + 1\n                else:\n                    right = mid - 1\n        return -1"
    },
    {
        "number": 34,
        "title": "Find First and Last Position of Element in Sorted Array",
        "difficulty": 1,
        "pass": 0,
        "answer": "        if not nums:\n            return [-1, -1]\n        start, end = 0, len(nums) - 1\n        while start + 1 < end:\n            mid = start + (end - start) // 2\n            if nums[mid] == target:\n                end = mid\n            elif nums[mid] < target:\n                start = mid\n            else:\n                end = mid\n        if nums[start] == target:\n            left = start\n        elif nums[end] == target:\n            left = end\n        else:\n            return [-1, -1]\n        start, end = left, len(nums) - 1\n        while start + 1 < end:\n            mid = start + (end - start) // 2\n            if nums[mid] == target:\n                start = mid\n            elif nums[mid] < target:\n                start = mid\n            else:\n                end = mid\n        if nums[end] == target:\n            right = end\n        else:\n            right = start\n        return [left,"
    },
    {
        "number": 34,
        "title": "Find First and Last Position of Element in Sorted Array",
        "difficulty": 1,
        "pass": 1,
        "answer": "        if not nums:\n            return [-1, -1]\n        start, end = 0, len(nums) - 1\n        while start + 1 < end:\n            mid = start + (end - start) // 2\n            if nums[mid] == target:\n                end = mid\n            elif nums[mid] < target:\n                start = mid\n            else:\n                end = mid\n        if nums[start] == target:\n            left = start\n        elif nums[end] == target:\n            left = end\n        else:\n            return [-1, -1]\n        start, end = left, len(nums) - 1\n        while start + 1 < end:\n            mid = start + (end - start) // 2\n            if nums[mid] == target:\n                start = mid\n            elif nums[mid] < target:\n                start = mid\n            else:\n                end = mid\n        if nums[end] == target:\n            right = end\n        else:\n            right = start\n        return [left,"
    },
    {
        "number": 34,
        "title": "Find First and Last Position of Element in Sorted Array",
        "difficulty": 1,
        "pass": 2,
        "answer": "        if not nums:\n            return [-1, -1]\n        left, right = 0, len(nums) - 1\n        while left <= right:\n            mid = left + (right - left) // 2\n            if nums[mid] == target:\n                break\n            elif nums[mid] < target:\n                left = mid + 1\n            else:\n                right = mid - 1\n        if left >= len(nums) or nums[left]!= target:\n            return [-1, -1]\n        left, right = left, len(nums) - 1\n        while left <= right:\n            mid = left + (right - left) // 2\n            if nums[mid] == target:\n                break\n            elif nums[mid] > target:\n                right = mid - 1\n            else:\n                left = mid + 1\n        return [left, right]"
    },
    {
        "number": 34,
        "title": "Find First and Last Position of Element in Sorted Array",
        "difficulty": 1,
        "pass": 3,
        "answer": "        if not nums:\n            return [-1, -1]\n        start, end = 0, len(nums) - 1\n        while start + 1 < end:\n            mid = start + (end - start) // 2\n            if nums[mid] == target:\n                end = mid\n            elif nums[mid] < target:\n                start = mid\n            else:\n                end = mid\n        if nums[start] == target:\n            left = start\n        elif nums[end] == target:\n            left = end\n        else:\n            return [-1, -1]\n        start, end = left, len(nums) - 1\n        while start + 1 < end:\n            mid = start + (end - start) // 2\n            if nums[mid] == target:\n                start = mid\n            elif nums[mid] < target:\n                start = mid\n            else:\n                end = mid\n        if nums[end] == target:\n            right = end\n        else:\n            right = start\n        return [left,"
    },
    {
        "number": 34,
        "title": "Find First and Last Position of Element in Sorted Array",
        "difficulty": 1,
        "pass": 4,
        "answer": "        left, right = 0, len(nums) - 1\n        while left <= right:\n            mid = (left + right) // 2\n            if nums[mid] < target:\n                left = mid + 1\n            elif nums[mid] > target:\n                right = mid - 1\n            else:\n                break\n        if left > len(nums) - 1 or nums[left]!= target:\n            return [-1, -1]\n        left, right = left, len(nums) - 1\n        while left <= right:\n            mid = (left + right) // 2\n            if nums[mid] > target:\n                right = mid - 1\n            elif nums[mid] < target:\n                left = mid + 1\n            else:\n                break\n        return [left, right]"
    },
    {
        "number": 34,
        "title": "Find First and Last Position of Element in Sorted Array",
        "difficulty": 1,
        "pass": 5,
        "answer": "        left, right = 0, len(nums) - 1\n        while left <= right:\n            mid = (left + right) // 2\n            if nums[mid] == target:\n                break\n            elif nums[mid] < target:\n                left = mid + 1\n            else:\n                right = mid - 1\n        if left > right:\n            return [-1, -1]\n        left, right = left, len(nums) - 1\n        while left <= right:\n            mid = (left + right) // 2\n            if nums[mid] == target:\n                break\n            elif nums[mid] > target:\n                right = mid - 1\n            else:\n                left = mid + 1\n        return [left, right]"
    },
    {
        "number": 34,
        "title": "Find First and Last Position of Element in Sorted Array",
        "difficulty": 1,
        "pass": 6,
        "answer": "        if not nums:\n            return [-1, -1]"
    },
    {
        "number": 34,
        "title": "Find First and Last Position of Element in Sorted Array",
        "difficulty": 1,
        "pass": 7,
        "answer": "        if not nums:\n            return [-1, -1]\n        left, right = 0, len(nums) - 1\n        while left <= right:\n            mid = (left + right) // 2\n            if nums[mid] == target:\n                break\n            elif nums[mid] < target:\n                left = mid + 1\n            else:\n                right = mid - 1\n        if left > right:\n            return [-1, -1]\n        left, right = 0, len(nums) - 1\n        while left <= right:\n            mid = (left + right) // 2\n            if nums[mid] == target:\n                right = mid - 1\n            elif nums[mid] < target:\n                left = mid + 1\n            else:\n                right = mid - 1\n        return [left, right]"
    },
    {
        "number": 34,
        "title": "Find First and Last Position of Element in Sorted Array",
        "difficulty": 1,
        "pass": 8,
        "answer": "        if not nums:\n            return [-1, -1]\n        start, end = 0, len(nums) - 1\n        while start + 1 < end:\n            mid = start + (end - start) // 2\n            if nums[mid] == target:\n                end = mid\n            elif nums[mid] < target:\n                start = mid\n            else:\n                end = mid\n        if nums[start] == target:\n            left = start\n        elif nums[end] == target:\n            left = end\n        else:\n            return [-1, -1]\n        start, end = left, len(nums) - 1\n        while start + 1 < end:\n            mid = start + (end - start) // 2\n            if nums[mid] == target:\n                start = mid\n            elif nums[mid] < target:\n                start = mid\n            else:\n                end = mid\n        if nums[end] == target:\n            right = end\n        else:\n            right = start\n        return [left,"
    },
    {
        "number": 34,
        "title": "Find First and Last Position of Element in Sorted Array",
        "difficulty": 1,
        "pass": 9,
        "answer": "        if not nums:\n            return [-1, -1]\n        start, end = 0, len(nums) - 1\n        while start + 1 < end:\n            mid = start + (end - start) // 2\n            if nums[mid] == target:\n                end = mid\n            elif nums[mid] < target:\n                start = mid\n            else:\n                end = mid\n        if nums[start] == target:\n            left = start\n        elif nums[end] == target:\n            left = end\n        else:\n            return [-1, -1]\n        start, end = left, len(nums) - 1\n        while start + 1 < end:\n            mid = start + (end - start) // 2\n            if nums[mid] == target:\n                start = mid\n            elif nums[mid] < target:\n                start = mid\n            else:\n                end = mid\n        if nums[end] == target:\n            right = end\n        else:\n            right = start\n        return [left,"
    },
    {
        "number": 35,
        "title": "Search Insert Position",
        "difficulty": 0,
        "pass": 0,
        "answer": "        left, right = 0, len(nums) - 1\n        while left <= right:\n            mid = left + (right - left) // 2\n            if nums[mid] == target:\n                return mid\n            elif nums[mid] < target:\n                left = mid + 1\n            else:\n                right = mid - 1\n        return left"
    },
    {
        "number": 35,
        "title": "Search Insert Position",
        "difficulty": 0,
        "pass": 1,
        "answer": "        left, right = 0, len(nums) - 1\n        while left <= right:\n            mid = (left + right) // 2\n            if nums[mid] == target:\n                return mid\n            elif nums[mid] < target:\n                left = mid + 1\n            else:\n                right = mid - 1\n        return left"
    },
    {
        "number": 35,
        "title": "Search Insert Position",
        "difficulty": 0,
        "pass": 2,
        "answer": "        left, right = 0, len(nums) - 1\n        while left <= right:\n            mid = left + (right - left) // 2\n            if nums[mid] == target:\n                return mid\n            elif nums[mid] > target:\n                right = mid - 1\n            else:\n                left = mid + 1\n        return left"
    },
    {
        "number": 35,
        "title": "Search Insert Position",
        "difficulty": 0,
        "pass": 3,
        "answer": "        left, right = 0, len(nums) - 1\n        while left <= right:\n            mid = (left + right) // 2\n            if nums[mid] == target:\n                return mid\n            elif nums[mid] < target:\n                left = mid + 1\n            else:\n                right = mid - 1\n        return left"
    },
    {
        "number": 35,
        "title": "Search Insert Position",
        "difficulty": 0,
        "pass": 4,
        "answer": "        left, right = 0, len(nums) - 1\n        while left <= right:\n            mid = left + (right - left) // 2\n            if nums[mid] == target:\n                return mid\n            elif nums[mid] < target:\n                left = mid + 1\n            else:\n                right = mid - 1\n        return left"
    },
    {
        "number": 35,
        "title": "Search Insert Position",
        "difficulty": 0,
        "pass": 5,
        "answer": "        left, right = 0, len(nums) - 1\n        while left <= right:\n            mid = left + (right - left) // 2\n            if nums[mid] == target:\n                return mid\n            elif nums[mid] < target:\n                left = mid + 1\n            else:\n                right = mid - 1\n        return left"
    },
    {
        "number": 35,
        "title": "Search Insert Position",
        "difficulty": 0,
        "pass": 6,
        "answer": "        left, right = 0, len(nums) - 1\n        while left <= right:\n            mid = left + (right - left) // 2\n            if nums[mid] == target:\n                return mid\n            elif nums[mid] < target:\n                left = mid + 1\n            else:\n                right = mid - 1\n        return left"
    },
    {
        "number": 35,
        "title": "Search Insert Position",
        "difficulty": 0,
        "pass": 7,
        "answer": "        left, right = 0, len(nums) - 1\n        while left <= right:\n            mid = left + (right - left) // 2\n            if nums[mid] == target:\n                return mid\n            elif nums[mid] < target:\n                left = mid + 1\n            else:\n                right = mid - 1\n        return left"
    },
    {
        "number": 35,
        "title": "Search Insert Position",
        "difficulty": 0,
        "pass": 8,
        "answer": "        left, right = 0, len(nums) - 1\n        while left <= right:\n            mid = left + (right - left) // 2\n            if nums[mid] == target:\n                return mid\n            elif nums[mid] < target:\n                left = mid + 1\n            else:\n                right = mid - 1\n        return left"
    },
    {
        "number": 35,
        "title": "Search Insert Position",
        "difficulty": 0,
        "pass": 9,
        "answer": "        left, right = 0, len(nums) - 1\n        while left <= right:\n            mid = left + (right - left) // 2\n            if nums[mid] == target:\n                return mid\n            elif nums[mid] > target:\n                right = mid - 1\n            else:\n                left = mid + 1\n        return left"
    },
    {
        "number": 36,
        "title": "Valid Sudoku",
        "difficulty": 1,
        "pass": 0,
        "answer": "        rows = [{} for i in range(9)]\n        cols = [{} for i in range(9)]\n        boxes = [{} for i in range(9)]"
    },
    {
        "number": 36,
        "title": "Valid Sudoku",
        "difficulty": 1,
        "pass": 1,
        "answer": "        rows = [{} for i in range(9)]\n        cols = [{} for i in range(9)]\n        boxes = [{} for i in range(9)]"
    },
    {
        "number": 36,
        "title": "Valid Sudoku",
        "difficulty": 1,
        "pass": 2,
        "answer": "        rows = [{} for i in range(9)]\n        columns = [{} for i in range(9)]\n        boxes = [{} for i in range(9)]"
    },
    {
        "number": 36,
        "title": "Valid Sudoku",
        "difficulty": 1,
        "pass": 3,
        "answer": "        rows = [{} for i in range(9)]\n        cols = [{} for i in range(9)]\n        boxes = [{} for i in range(9)]"
    },
    {
        "number": 36,
        "title": "Valid Sudoku",
        "difficulty": 1,
        "pass": 4,
        "answer": "        rows = [{} for i in range(9)]\n        cols = [{} for i in range(9)]\n        boxes = [{} for i in range(9)]"
    },
    {
        "number": 36,
        "title": "Valid Sudoku",
        "difficulty": 1,
        "pass": 5,
        "answer": "        rows = [{} for i in range(9)]\n        cols = [{} for i in range(9)]\n        boxes = [{} for i in range(9)]"
    },
    {
        "number": 36,
        "title": "Valid Sudoku",
        "difficulty": 1,
        "pass": 6,
        "answer": "        rows = [{} for i in range(9)]\n        cols = [{} for i in range(9)]\n        boxes = [{} for i in range(9)]"
    },
    {
        "number": 36,
        "title": "Valid Sudoku",
        "difficulty": 1,
        "pass": 7,
        "answer": "        if not board or not board[0]:\n            return False\n        rows = [{} for _ in range(9)]\n        cols = [{} for _ in range(9)]\n        boxes = [{} for _ in range(9)]\n        for i in range(9):\n            for j in range(9):\n                num = board[i][j]\n                if num!= '.':\n                    num = int(num)\n                    rows[i][num] = rows[i].get(num, 0) + 1\n                    cols[j][num] = cols[j].get(num, 0) + 1\n                    boxes[(i // 3) * 3 + j // 3][num] = boxes[(i // 3) * 3 + j // 3].get(num, 0) + 1\n                    if rows[i][num] > 1 or cols[j][num] > 1 or boxes[(i // 3) * 3 + j // 3][num] > 1:\n                        return False\n        return True"
    },
    {
        "number": 36,
        "title": "Valid Sudoku",
        "difficulty": 1,
        "pass": 8,
        "answer": "        def isValid(board, row, col, num):\n            for i in range(9):\n                if board[row][i] == num:\n                    return False\n            for i in range(9):\n                if board[i][col] == num:\n                    return False\n            for i in range(3):\n                for j in range(3):\n                    if board[(row // 3) * 3 + i][(col // 3) * 3 + j] == num:\n                        return False\n            return True"
    },
    {
        "number": 36,
        "title": "Valid Sudoku",
        "difficulty": 1,
        "pass": 9,
        "answer": "        rows = [{} for i in range(9)]\n        cols = [{} for i in range(9)]\n        boxes = [{} for i in range(9)]"
    },
    {
        "number": 37,
        "title": "Sudoku Solver",
        "difficulty": 2,
        "pass": 0,
        "answer": "        self.solve(board)"
    },
    {
        "number": 37,
        "title": "Sudoku Solver",
        "difficulty": 2,
        "pass": 1,
        "answer": "        self.solve(board)"
    },
    {
        "number": 37,
        "title": "Sudoku Solver",
        "difficulty": 2,
        "pass": 2,
        "answer": "        self.solve(board)"
    },
    {
        "number": 37,
        "title": "Sudoku Solver",
        "difficulty": 2,
        "pass": 3,
        "answer": "        self.solveSudokuHelper(board)"
    },
    {
        "number": 37,
        "title": "Sudoku Solver",
        "difficulty": 2,
        "pass": 4,
        "answer": "        self.solve(board)"
    },
    {
        "number": 37,
        "title": "Sudoku Solver",
        "difficulty": 2,
        "pass": 5,
        "answer": "        self.solve(board)"
    },
    {
        "number": 37,
        "title": "Sudoku Solver",
        "difficulty": 2,
        "pass": 6,
        "answer": "        self.solve(board)"
    },
    {
        "number": 37,
        "title": "Sudoku Solver",
        "difficulty": 2,
        "pass": 7,
        "answer": "        self.solve(board)"
    },
    {
        "number": 37,
        "title": "Sudoku Solver",
        "difficulty": 2,
        "pass": 8,
        "answer": "        self.solve(board)"
    },
    {
        "number": 37,
        "title": "Sudoku Solver",
        "difficulty": 2,
        "pass": 9,
        "answer": "        self.solve(board)"
    },
    {
        "number": 38,
        "title": "Count and Say",
        "difficulty": 1,
        "pass": 0,
        "answer": "        if n == 1:\n            return \"1\"\n        elif n == 2:\n            return \"11\"\n        elif n == 3:\n            return \"21\"\n        elif n == 4:\n            return \"1211\"\n        elif n == 5:\n            return \"111221\"\n        elif n == 6:\n            return \"312211\"\n        elif n == 7:\n            return \"13112221\"\n        elif n == 8:\n            return \"1113213211\"\n        elif n == 9:\n            return \"31131211131221\"\n        elif n == 10:\n            return \"13211311123113112211\"\n        elif n == 11:\n            return \"13211311123113112211\"\n        elif n == 12:\n            return \"13211311123113112211\"\n        elif n == 13:\n            return \"13211311123113112211\"\n        elif n == 14:\n            return \"13211311123113112211\"\n        elif n"
    },
    {
        "number": 38,
        "title": "Count and Say",
        "difficulty": 1,
        "pass": 1,
        "answer": "        if n == 1:\n            return \"1\"\n        if n == 2:\n            return \"11\"\n        if n == 3:\n            return \"21\"\n        if n == 4:\n            return \"1211\"\n        if n == 5:\n            return \"111221\"\n        if n == 6:\n            return \"312211\"\n        if n == 7:\n            return \"13112221\"\n        if n == 8:\n            return \"1113213211\"\n        if n == 9:\n            return \"31131211131221\"\n        if n == 10:\n            return \"13211311123113112211\"\n        if n == 11:\n            return \"13211311123113112211\"\n        if n == 12:\n            return \"13211311123113112211\"\n        if n == 13:\n            return \"13211311123113112211\"\n        if n == 14:\n            return \"13211311123113112211\"\n        if n == 15:\n            return \"132113111231131122"
    },
    {
        "number": 38,
        "title": "Count and Say",
        "difficulty": 1,
        "pass": 2,
        "answer": "        if n == 1:\n            return \"1\"\n        if n == 2:\n            return \"11\"\n        if n == 3:\n            return \"21\"\n        if n == 4:\n            return \"1211\"\n        if n == 5:\n            return \"111221\"\n        if n == 6:\n            return \"312211\"\n        if n == 7:\n            return \"13112221\"\n        if n == 8:\n            return \"1113213211\"\n        if n == 9:\n            return \"31131211131221\"\n        if n == 10:\n            return \"13211311123113112211\""
    },
    {
        "number": 38,
        "title": "Count and Say",
        "difficulty": 1,
        "pass": 3,
        "answer": "        if n == 1:\n            return \"1\"\n        elif n == 2:\n            return \"11\"\n        elif n == 3:\n            return \"21\"\n        elif n == 4:\n            return \"1211\"\n        elif n == 5:\n            return \"111221\"\n        elif n == 6:\n            return \"312211\"\n        elif n == 7:\n            return \"13112221\"\n        elif n == 8:\n            return \"1113213211\"\n        elif n == 9:\n            return \"31131211131221\"\n        elif n == 10:\n            return \"13211311123113112211\"\n        elif n == 11:\n            return \"13211311123113112211\"\n        elif n == 12:\n            return \"13211311123113112211\"\n        elif n == 13:\n            return \"13211311123113112211\"\n        elif n == 14:\n            return \"13211311123113112211\"\n        elif n"
    },
    {
        "number": 38,
        "title": "Count and Say",
        "difficulty": 1,
        "pass": 4,
        "answer": "        if n == 1:\n            return \"1\"\n        if n == 2:\n            return \"11\"\n        if n == 3:\n            return \"21\"\n        if n == 4:\n            return \"1211\"\n        s = \"11\"\n        for i in range(4, n + 1):\n            s += \"\".join(str(len(list(group))) + digit for digit, group in itertools.groupby(s))\n        return s"
    },
    {
        "number": 38,
        "title": "Count and Say",
        "difficulty": 1,
        "pass": 5,
        "answer": "        if n == 1:\n            return \"1\"\n        if n == 2:\n            return \"11\"\n        if n == 3:\n            return \"21\"\n        if n == 4:\n            return \"1211\"\n        if n == 5:\n            return \"111221\"\n        if n == 6:\n            return \"312211\"\n        if n == 7:\n            return \"13112221\"\n        if n == 8:\n            return \"1113213211\"\n        if n == 9:\n            return \"31131211131221\"\n        if n == 10:\n            return \"13211311123113112211\""
    },
    {
        "number": 38,
        "title": "Count and Say",
        "difficulty": 1,
        "pass": 6,
        "answer": "        if n == 1:\n            return \"1\"\n        if n == 2:\n            return \"11\"\n        if n == 3:\n            return \"21\"\n        if n == 4:\n            return \"1211\"\n        res = \"11\"\n        for i in range(4, n + 1):\n            res = self.countAndSayHelper(res)\n        return res"
    },
    {
        "number": 38,
        "title": "Count and Say",
        "difficulty": 1,
        "pass": 7,
        "answer": "        if n == 1:\n            return \"1\"\n        elif n == 2:\n            return \"11\"\n        elif n == 3:\n            return \"21\"\n        elif n == 4:\n            return \"1211\"\n        else:\n            return self.countAndSay(n - 1) + self.countAndSay(n - 1)"
    },
    {
        "number": 38,
        "title": "Count and Say",
        "difficulty": 1,
        "pass": 8,
        "answer": "        if n == 1:\n            return \"1\"\n        elif n == 2:\n            return \"11\"\n        elif n == 3:\n            return \"21\"\n        elif n == 4:\n            return \"1211\"\n        elif n == 5:\n            return \"111221\"\n        elif n == 6:\n            return \"312211\"\n        elif n == 7:\n            return \"13112221\"\n        elif n == 8:\n            return \"1113213211\"\n        elif n == 9:\n            return \"31131211131221\"\n        elif n == 10:\n            return \"13211311123113112211\"\n        elif n == 11:\n            return \"13211311123113112211\"\n        elif n == 12:\n            return \"13211311123113112211\"\n        elif n == 13:\n            return \"13211311123113112211\"\n        elif n == 14:\n            return \"13211311123113112211\"\n        elif n"
    },
    {
        "number": 38,
        "title": "Count and Say",
        "difficulty": 1,
        "pass": 9,
        "answer": "        if n == 1:\n            return \"1\"\n        elif n == 2:\n            return \"11\"\n        elif n == 3:\n            return \"21\"\n        elif n == 4:\n            return \"1211\"\n        else:\n            return self.countAndSay(n - 1) + self.countAndSay(n - 1)"
    },
    {
        "number": 39,
        "title": "Combination Sum",
        "difficulty": 1,
        "pass": 0,
        "answer": "        result = []\n        candidates.sort()\n        self.helper(candidates, target, 0, [], result)\n        return result"
    },
    {
        "number": 39,
        "title": "Combination Sum",
        "difficulty": 1,
        "pass": 1,
        "answer": "        candidates.sort()\n        res = []\n        self.helper(candidates, target, 0, [], res)\n        return res"
    },
    {
        "number": 39,
        "title": "Combination Sum",
        "difficulty": 1,
        "pass": 2,
        "answer": "        candidates.sort()\n        res = []\n        self.helper(candidates, target, 0, [], res)\n        return res"
    },
    {
        "number": 39,
        "title": "Combination Sum",
        "difficulty": 1,
        "pass": 3,
        "answer": "        candidates.sort()\n        res = []\n        self.helper(candidates, target, 0, [], res)\n        return res"
    },
    {
        "number": 39,
        "title": "Combination Sum",
        "difficulty": 1,
        "pass": 4,
        "answer": "        candidates.sort()\n        res = []\n        self.helper(candidates, target, 0, [], res)\n        return res"
    },
    {
        "number": 39,
        "title": "Combination Sum",
        "difficulty": 1,
        "pass": 5,
        "answer": "        candidates.sort()\n        res = []\n        self.helper(candidates, target, 0, [], res)\n        return res"
    },
    {
        "number": 39,
        "title": "Combination Sum",
        "difficulty": 1,
        "pass": 6,
        "answer": "        # https://leetcode.com/problems/combination-sum-ii/discuss/104947/JavaC%2B%2BPython-DFS-solution-with-explanation\n        candidates.sort()\n        res = []\n        self.dfs(candidates, target, 0, [], res)\n        return res"
    },
    {
        "number": 39,
        "title": "Combination Sum",
        "difficulty": 1,
        "pass": 7,
        "answer": "        if not candidates:\n            return []\n        candidates.sort()\n        res = []\n        self.dfs(candidates, target, 0, [], res)\n        return res"
    },
    {
        "number": 39,
        "title": "Combination Sum",
        "difficulty": 1,
        "pass": 8,
        "answer": "        candidates.sort()\n        res = []\n        self.helper(candidates, target, 0, [], res)\n        return res"
    },
    {
        "number": 39,
        "title": "Combination Sum",
        "difficulty": 1,
        "pass": 9,
        "answer": "        candidates.sort()\n        result = []\n        self.dfs(candidates, target, 0, [], result)\n        return result"
    },
    {
        "number": 40,
        "title": "Combination Sum II",
        "difficulty": 1,
        "pass": 0,
        "answer": "        candidates.sort()\n        result = []\n        self.dfs(candidates, target, 0, [], result)\n        return result"
    },
    {
        "number": 40,
        "title": "Combination Sum II",
        "difficulty": 1,
        "pass": 1,
        "answer": "        candidates.sort()\n        result = []\n        self.helper(candidates, target, 0, [], result)\n        return result"
    },
    {
        "number": 40,
        "title": "Combination Sum II",
        "difficulty": 1,
        "pass": 2,
        "answer": "        candidates.sort()\n        n = len(candidates)\n        res = []\n        self.helper(candidates, target, n, 0, [], res)\n        return res"
    },
    {
        "number": 40,
        "title": "Combination Sum II",
        "difficulty": 1,
        "pass": 3,
        "answer": "        candidates.sort()\n        result = []\n        self.dfs(candidates, target, 0, [], result)\n        return result"
    },
    {
        "number": 40,
        "title": "Combination Sum II",
        "difficulty": 1,
        "pass": 4,
        "answer": "        candidates.sort()\n        res = []\n        self.dfs(candidates, target, 0, [], res)\n        return res"
    },
    {
        "number": 40,
        "title": "Combination Sum II",
        "difficulty": 1,
        "pass": 5,
        "answer": "        candidates.sort()\n        res = []\n        self.dfs(candidates, target, 0, [], res)\n        return res"
    },
    {
        "number": 40,
        "title": "Combination Sum II",
        "difficulty": 1,
        "pass": 6,
        "answer": "        candidates.sort()\n        res = []\n        self.dfs(candidates, target, 0, [], res)\n        return res"
    },
    {
        "number": 40,
        "title": "Combination Sum II",
        "difficulty": 1,
        "pass": 7,
        "answer": "        if not candidates:\n            return []\n        candidates.sort()\n        res = []\n        self.dfs(candidates, target, 0, [], res)\n        return res"
    },
    {
        "number": 40,
        "title": "Combination Sum II",
        "difficulty": 1,
        "pass": 8,
        "answer": "        candidates.sort()\n        result = []\n        self.dfs(candidates, target, 0, [], result)\n        return result"
    },
    {
        "number": 40,
        "title": "Combination Sum II",
        "difficulty": 1,
        "pass": 9,
        "answer": "        candidates.sort()\n        res = []\n        self.dfs(candidates, target, 0, [], res)\n        return res"
    },
    {
        "number": 41,
        "title": "First Missing Positive",
        "difficulty": 2,
        "pass": 0,
        "answer": "        n = len(nums)\n        for i in range(n):\n            while 0 < nums[i] <= n and nums[i]!= nums[nums[i] - 1]:\n                nums[nums[i] - 1], nums[i] = nums[i], nums[nums[i] - 1]\n        for i in range(n):\n            if nums[i]!= i + 1:\n                return i + 1\n        return n + 1\n"
    },
    {
        "number": 41,
        "title": "First Missing Positive",
        "difficulty": 2,
        "pass": 1,
        "answer": "        n = len(nums)\n        for i in range(n):\n            while 0 < nums[i] <= n and nums[i]!= nums[nums[i] - 1]:\n                nums[nums[i] - 1], nums[i] = nums[i], nums[nums[i] - 1]\n        for i in range(n):\n            if nums[i]!= i + 1:\n                return i + 1\n        return n + 1"
    },
    {
        "number": 41,
        "title": "First Missing Positive",
        "difficulty": 2,
        "pass": 2,
        "answer": "        n = len(nums)\n        for i in range(n):\n            while 0 < nums[i] <= n and nums[i]!= nums[nums[i] - 1]:\n                nums[nums[i] - 1], nums[i] = nums[i], nums[nums[i] - 1]\n        for i in range(n):\n            if nums[i]!= i + 1:\n                return i + 1\n        return n + 1"
    },
    {
        "number": 41,
        "title": "First Missing Positive",
        "difficulty": 2,
        "pass": 3,
        "answer": "        n = len(nums)\n        for i in range(n):\n            while 0 <= nums[i] - 1 < n and nums[i]!= nums[nums[i] - 1]:\n                nums[nums[i] - 1], nums[i] = nums[i], nums[nums[i] - 1]\n        for i in range(n):\n            if nums[i]!= i + 1:\n                return i + 1\n        return n + 1"
    },
    {
        "number": 41,
        "title": "First Missing Positive",
        "difficulty": 2,
        "pass": 4,
        "answer": "        n = len(nums)\n        for i in range(n):\n            while 0 < nums[i] <= n and nums[i]!= nums[nums[i] - 1]:\n                nums[nums[i] - 1], nums[i] = nums[i], nums[nums[i] - 1]\n        for i in range(n):\n            if nums[i]!= i + 1:\n                return i + 1\n        return n + 1"
    },
    {
        "number": 41,
        "title": "First Missing Positive",
        "difficulty": 2,
        "pass": 5,
        "answer": "        n = len(nums)\n        for i in range(n):\n            while nums[i] > 0 and nums[i] <= n and nums[i]!= i + 1:\n                if nums[i] == nums[nums[i] - 1]:\n                    break\n                nums[nums[i] - 1], nums[i] = nums[i], nums[nums[i] - 1]\n        for i in range(n):\n            if nums[i]!= i + 1:\n                return i + 1\n        return n + 1"
    },
    {
        "number": 41,
        "title": "First Missing Positive",
        "difficulty": 2,
        "pass": 6,
        "answer": "        n = len(nums)\n        for i in range(n):\n            while 0 < nums[i] <= n and nums[i]!= nums[nums[i] - 1]:\n                nums[nums[i] - 1], nums[i] = nums[i], nums[nums[i] - 1]\n        for i in range(n):\n            if nums[i]!= i + 1:\n                return i + 1\n        return n + 1"
    },
    {
        "number": 41,
        "title": "First Missing Positive",
        "difficulty": 2,
        "pass": 7,
        "answer": "        if not nums:\n            return 1\n        n = len(nums)\n        for i in range(n):\n            if nums[i] <= 0 or nums[i] > n:\n                nums[i] = n + 1\n        for i in range(n):\n            num = abs(nums[i])\n            if num <= n:\n                nums[num - 1] = -abs(nums[num - 1])\n        for i in range(n):\n            if nums[i] > 0:\n                return i + 1\n        return n + 1"
    },
    {
        "number": 41,
        "title": "First Missing Positive",
        "difficulty": 2,
        "pass": 8,
        "answer": "        n = len(nums)\n        for i in range(n):\n            while 0 < nums[i] <= n and nums[i]!= nums[nums[i] - 1]:\n                nums[nums[i] - 1], nums[i] = nums[i], nums[nums[i] - 1]\n        for i in range(n):\n            if nums[i]!= i + 1:\n                return i + 1\n        return n + 1"
    },
    {
        "number": 41,
        "title": "First Missing Positive",
        "difficulty": 2,
        "pass": 9,
        "answer": "        i = 0\n        while i < len(nums):\n            if nums[i] <= 0 or nums[i] > len(nums) or nums[i] == nums[nums[i] - 1]:\n                i += 1\n            else:\n                nums[nums[i] - 1], nums[i] = nums[i], nums[nums[i] - 1]\n        for i in range(len(nums)):\n            if nums[i]!= i + 1:\n                return i + 1\n        return len(nums) + 1"
    },
    {
        "number": 42,
        "title": "Trapping Rain Water",
        "difficulty": 2,
        "pass": 0,
        "answer": "        if not height:\n            return 0\n        n = len(height)\n        left_max = [0] * n\n        right_max = [0] * n\n        left_max[0] = height[0]\n        right_max[n - 1] = height[n - 1]\n        for i in range(1, n):\n            left_max[i] = max(left_max[i - 1], height[i])\n        for i in range(n - 2, -1, -1):\n            right_max[i] = max(right_max[i + 1], height[i])\n        res = 0\n        for i in range(1, n - 1):\n            res += min(left_max[i], right_max[i]) - height[i]\n        return res"
    },
    {
        "number": 42,
        "title": "Trapping Rain Water",
        "difficulty": 2,
        "pass": 1,
        "answer": "        if not height:\n            return 0\n        n = len(height)\n        left_max = [0] * n\n        right_max = [0] * n\n        left_max[0] = height[0]\n        for i in range(1, n):\n            left_max[i] = max(left_max[i - 1], height[i])\n        right_max[n - 1] = height[n - 1]\n        for i in range(n - 2, -1, -1):\n            right_max[i] = max(right_max[i + 1], height[i])\n        res = 0\n        for i in range(n):\n            res += min(left_max[i], right_max[i]) - height[i]\n        return res"
    },
    {
        "number": 42,
        "title": "Trapping Rain Water",
        "difficulty": 2,
        "pass": 2,
        "answer": "        if not height:\n            return 0\n        n = len(height)\n        left_max = [0] * n\n        right_max = [0] * n\n        left_max[0] = height[0]\n        for i in range(1, n):\n            left_max[i] = max(left_max[i - 1], height[i])\n        right_max[n - 1] = height[n - 1]\n        for i in range(n - 2, -1, -1):\n            right_max[i] = max(right_max[i + 1], height[i])\n        res = 0\n        for i in range(1, n - 1):\n            res += min(left_max[i], right_max[i]) - height[i]\n        return res"
    },
    {
        "number": 42,
        "title": "Trapping Rain Water",
        "difficulty": 2,
        "pass": 3,
        "answer": "        n = len(height)\n        if n == 0:\n            return 0\n        left_max = [0] * n\n        right_max = [0] * n\n        left_max[0] = height[0]\n        for i in range(1, n):\n            left_max[i] = max(left_max[i - 1], height[i])\n        right_max[n - 1] = height[n - 1]\n        for i in range(n - 2, -1, -1):\n            right_max[i] = max(right_max[i + 1], height[i])\n        res = 0\n        for i in range(n):\n            res += min(left_max[i], right_max[i]) - height[i]\n        return res\n"
    },
    {
        "number": 42,
        "title": "Trapping Rain Water",
        "difficulty": 2,
        "pass": 4,
        "answer": "        if not height:\n            return 0"
    },
    {
        "number": 42,
        "title": "Trapping Rain Water",
        "difficulty": 2,
        "pass": 5,
        "answer": "        if not height:\n            return 0\n        n = len(height)\n        left_max = [0] * n\n        right_max = [0] * n\n        left_max[0] = height[0]\n        for i in range(1, n):\n            left_max[i] = max(left_max[i - 1], height[i])\n        right_max[n - 1] = height[n - 1]\n        for i in range(n - 2, -1, -1):\n            right_max[i] = max(right_max[i + 1], height[i])\n        res = 0\n        for i in range(n):\n            res += min(left_max[i], right_max[i]) - height[i]\n        return res"
    },
    {
        "number": 42,
        "title": "Trapping Rain Water",
        "difficulty": 2,
        "pass": 6,
        "answer": "        if not height:\n            return 0\n        n = len(height)\n        left_max = [0] * n\n        right_max = [0] * n\n        left_max[0] = height[0]\n        for i in range(1, n):\n            left_max[i] = max(left_max[i - 1], height[i])\n        right_max[n - 1] = height[n - 1]\n        for i in range(n - 2, -1, -1):\n            right_max[i] = max(right_max[i + 1], height[i])\n        res = 0\n        for i in range(n):\n            res += min(left_max[i], right_max[i]) - height[i]\n        return res"
    },
    {
        "number": 42,
        "title": "Trapping Rain Water",
        "difficulty": 2,
        "pass": 7,
        "answer": "        if not height:\n            return 0\n        n = len(height)\n        left_max = [0] * n\n        right_max = [0] * n\n        left_max[0] = height[0]\n        for i in range(1, n):\n            left_max[i] = max(left_max[i - 1], height[i])\n        right_max[n - 1] = height[n - 1]\n        for i in range(n - 2, -1, -1):\n            right_max[i] = max(right_max[i + 1], height[i])\n        res = 0\n        for i in range(n):\n            res += min(left_max[i], right_max[i]) - height[i]\n        return res"
    },
    {
        "number": 42,
        "title": "Trapping Rain Water",
        "difficulty": 2,
        "pass": 8,
        "answer": "        if not height:\n            return 0\n        n = len(height)\n        left_max = [0] * n\n        right_max = [0] * n\n        left_max[0] = height[0]\n        for i in range(1, n):\n            left_max[i] = max(left_max[i - 1], height[i])\n        right_max[n - 1] = height[n - 1]\n        for i in range(n - 2, -1, -1):\n            right_max[i] = max(right_max[i + 1], height[i])\n        res = 0\n        for i in range(n):\n            res += min(left_max[i], right_max[i]) - height[i]\n        return res"
    },
    {
        "number": 42,
        "title": "Trapping Rain Water",
        "difficulty": 2,
        "pass": 9,
        "answer": "        if not height:\n            return 0\n        n = len(height)\n        left_max = [0] * n\n        right_max = [0] * n\n        left_max[0] = height[0]\n        for i in range(1, n):\n            left_max[i] = max(left_max[i - 1], height[i])\n        right_max[n - 1] = height[n - 1]\n        for i in range(n - 2, -1, -1):\n            right_max[i] = max(right_max[i + 1], height[i])\n        res = 0\n        for i in range(n):\n            res += min(left_max[i], right_max[i]) - height[i]\n        return res"
    },
    {
        "number": 43,
        "title": "Multiply Strings",
        "difficulty": 1,
        "pass": 0,
        "answer": "        if num1 == '0' or num2 == '0':\n            return '0'\n        m, n = len(num1), len(num2)\n        res = [0] * (m + n)\n        for i in range(m - 1, -1, -1):\n            carry = 0\n            for j in range(n - 1, -1, -1):\n                tmp = int(num1[i]) * int(num2[j]) + carry\n                res[i + j + 1] += tmp // 10\n                res[i + j + 1] %= 10\n                carry = tmp % 10\n            res[i] += carry\n        for i in range(m + n - 1, -1, -1):\n            if res[i]!= 0:\n                return ''.join(map(str, res[i:]))\n        return '0'"
    },
    {
        "number": 43,
        "title": "Multiply Strings",
        "difficulty": 1,
        "pass": 1,
        "answer": "        if num1 == '0' or num2 == '0':\n            return '0'\n        m, n = len(num1), len(num2)\n        res = [0] * (m + n)\n        for i in range(m - 1, -1, -1):\n            carry = 0\n            for j in range(n - 1, -1, -1):\n                tmp = int(num1[i]) * int(num2[j]) + carry\n                res[i + j + 1] += tmp // 10\n                res[i + j] += tmp % 10\n                carry = tmp // 10\n            if carry:\n                res[i] += carry\n        idx = 0\n        while idx < len(res) and res[idx] == 0:\n            idx += 1\n        return ''.join(map(str, res[idx:]))"
    },
    {
        "number": 43,
        "title": "Multiply Strings",
        "difficulty": 1,
        "pass": 2,
        "answer": "        if num1 == \"0\" or num2 == \"0\":\n            return \"0\""
    },
    {
        "number": 43,
        "title": "Multiply Strings",
        "difficulty": 1,
        "pass": 3,
        "answer": "        if num1 == \"0\" or num2 == \"0\":\n            return \"0\""
    },
    {
        "number": 43,
        "title": "Multiply Strings",
        "difficulty": 1,
        "pass": 4,
        "answer": "        if num1 == '0' or num2 == '0':\n            return '0'"
    },
    {
        "number": 43,
        "title": "Multiply Strings",
        "difficulty": 1,
        "pass": 5,
        "answer": "        if num1 == '0' or num2 == '0':\n            return '0'\n        res = [0] * (len(num1) + len(num2))\n        for i in range(len(num1) - 1, -1, -1):\n            carry = 0\n            for j in range(len(num2) - 1, -1, -1):\n                tmp = int(num1[i]) * int(num2[j]) + carry\n                res[i + j + 1] += tmp // 10\n                res[i + j] += tmp % 10\n                carry = tmp // 10\n            if carry:\n                res[i] += carry\n        for i in range(len(res)):\n            if res[i] >= 10:\n                res[i + 1] += res[i] // 10\n                res[i] = res[i] % 10\n        for i in range(len(res) - 1, -1, -1):\n            if res[i] == 0:\n                res.pop()\n            else:\n                break\n        "
    },
    {
        "number": 43,
        "title": "Multiply Strings",
        "difficulty": 1,
        "pass": 6,
        "answer": "        if num1 == \"0\" or num2 == \"0\":\n            return \"0\""
    },
    {
        "number": 43,
        "title": "Multiply Strings",
        "difficulty": 1,
        "pass": 7,
        "answer": "        if num1 == '0' or num2 == '0':\n            return '0'\n        m, n = len(num1), len(num2)\n        res = [0] * (m + n)\n        for i in range(m - 1, -1, -1):\n            for j in range(n - 1, -1, -1):\n                res[i + j + 1] += int(num1[i]) * int(num2[j])\n                res[i + j] += res[i + j + 1] // 10\n                res[i + j + 1] %= 10\n        i = 0\n        while i < len(res) and res[i] == 0:\n            i += 1\n        return ''.join(map(str, res[i:]))"
    },
    {
        "number": 43,
        "title": "Multiply Strings",
        "difficulty": 1,
        "pass": 8,
        "answer": "        if num1 == '0' or num2 == '0':\n            return '0'\n        m, n = len(num1), len(num2)\n        res = [0] * (m + n)\n        for i in range(m - 1, -1, -1):\n            for j in range(n - 1, -1, -1):\n                res[i + j + 1] += int(num1[i]) * int(num2[j])\n                res[i + j] += res[i + j + 1] // 10\n                res[i + j + 1] %= 10\n        for i in range(m + n - 1, -1, -1):\n            if res[i]!= 0:\n                return ''.join(map(str, res[:i + 1]))\n        return '0'"
    },
    {
        "number": 43,
        "title": "Multiply Strings",
        "difficulty": 1,
        "pass": 9,
        "answer": "        if num1 == \"0\" or num2 == \"0\":\n            return \"0\""
    },
    {
        "number": 44,
        "title": "Wildcard Matching",
        "difficulty": 2,
        "pass": 0,
        "answer": "        if not p:\n            return not s"
    },
    {
        "number": 44,
        "title": "Wildcard Matching",
        "difficulty": 2,
        "pass": 1,
        "answer": "        if not p:\n            return not s"
    },
    {
        "number": 44,
        "title": "Wildcard Matching",
        "difficulty": 2,
        "pass": 2,
        "answer": "        if not p:\n            return not s"
    },
    {
        "number": 44,
        "title": "Wildcard Matching",
        "difficulty": 2,
        "pass": 3,
        "answer": "        if not p:\n            return not s\n        if len(p) == 1 or p[1]!= '*':\n            if s and (p[0] == s[0] or p[0] == '?'):\n                return self.isMatch(s[1:], p[1:])\n            else:\n                return False\n        else:\n            while s and (p[0] == s[0] or p[0] == '?'):\n                if self.isMatch(s, p[2:]):\n                    return True\n                s = s[1:]\n            return self.isMatch(s, p[2:])"
    },
    {
        "number": 44,
        "title": "Wildcard Matching",
        "difficulty": 2,
        "pass": 4,
        "answer": "        if not p:\n            return not s\n        if len(p) == 1 or p[1]!= '*':\n            if s and (p[0] == s[0] or p[0] == '?'):\n                return self.isMatch(s[1:], p[1:])\n            else:\n                return False\n        else:\n            while s and (s[0] == p[0] or p[0] == '?'):\n                if self.isMatch(s, p[2:]):\n                    return True\n                s = s[1:]\n            return self.isMatch(s, p[2:])"
    },
    {
        "number": 44,
        "title": "Wildcard Matching",
        "difficulty": 2,
        "pass": 5,
        "answer": "        if len(s) == 0 and len(p) == 0:\n            return True\n        if len(s) > 0 and len(p) == 0:\n            return False\n        if len(s) == 0 and len(p) > 0:\n            if len(p) == 1 or p[1]!= '*':\n                return False\n            else:\n                return self.isMatch(s, p[2:])\n        if len(p) > 1 and p[1] == '*':\n            if len(s) > 0 and (s[0] == p[0] or p[0] == '?'):\n                return self.isMatch(s[1:], p) or self.isMatch(s, p[2:])\n            else:\n                return self.isMatch(s, p[2:])\n        else:\n            if len(s) > 0 and (s[0] == p[0] or p[0] == '?'):\n                return self.isMatch(s[1:], p[1:])\n            else:\n                "
    },
    {
        "number": 44,
        "title": "Wildcard Matching",
        "difficulty": 2,
        "pass": 6,
        "answer": "        if len(s) == 0 and len(p) == 0:\n            return True\n        if len(s) > 0 and len(p) == 0:\n            return False\n        if len(s) == 0 and len(p) > 0:\n            if len(p) == 1 or p[1]!= '*':\n                return False\n            else:\n                return self.isMatch(s, p[2:])\n        if len(p) == 1 or p[1]!= '*':\n            if s[0] == p[0] or p[0] == '?':\n                return self.isMatch(s[1:], p[1:])\n            else:\n                return False\n        else:\n            if s[0] == p[0] or p[0] == '?':\n                return self.isMatch(s[1:], p) or self.isMatch(s, p[2:])\n            else:\n                return self.isMatch(s, p[2:])"
    },
    {
        "number": 44,
        "title": "Wildcard Matching",
        "difficulty": 2,
        "pass": 7,
        "answer": "        m, n = len(s), len(p)\n        dp = [[False] * (n + 1) for _ in range(m + 1)]\n        dp[0][0] = True\n        for i in range(1, n + 1):\n            if p[i - 1] == '*':\n                dp[0][i] = dp[0][i - 2]\n        for i in range(1, m + 1):\n            for j in range(1, n + 1):\n                if p[j - 1] == '?':\n                    dp[i][j] = dp[i - 1][j - 1]\n                elif p[j - 1] == '*':\n                    dp[i][j] = dp[i - 1][j] or dp[i][j - 1] or dp[i - 1][j - 1]\n                else:\n                    dp[i][j] = dp[i - 1][j - 1] and s[i - 1] == p[j - 1]\n        return dp[m][n]"
    },
    {
        "number": 44,
        "title": "Wildcard Matching",
        "difficulty": 2,
        "pass": 8,
        "answer": "        if not p:\n            return not s\n        first_match = bool(s) and p[0] in {s[0], '?'}\n        if len(p) >= 2 and p[1] == '*':\n            return (self.isMatch(s, p[2:]) or\n                    first_match and self.isMatch(s[1:], p))\n        else:\n            return first_match and self.isMatch(s[1:], p[1:])"
    },
    {
        "number": 44,
        "title": "Wildcard Matching",
        "difficulty": 2,
        "pass": 9,
        "answer": "        m, n = len(s), len(p)\n        dp = [[False] * (n + 1) for _ in range(m + 1)]\n        dp[0][0] = True\n        for i in range(1, n + 1):\n            if p[i - 1] == '*':\n                dp[0][i] = dp[0][i - 2]\n        for i in range(1, m + 1):\n            for j in range(1, n + 1):\n                if p[j - 1] == '?':\n                    dp[i][j] = dp[i - 1][j - 1]\n                elif p[j - 1] == '*':\n                    dp[i][j] = dp[i - 1][j] or dp[i][j - 1] or dp[i - 1][j - 1]\n                else:\n                    dp[i][j] = dp[i - 1][j - 1] and s[i - 1] == p[j - 1]\n        return dp[m][n]"
    },
    {
        "number": 45,
        "title": "Jump Game II",
        "difficulty": 1,
        "pass": 0,
        "answer": "        n = len(nums)\n        if n == 1:\n            return 0\n        if n == 2:\n            return 1 if nums[1] > 0 else 0\n        dp = [float('inf')] * n\n        dp[0] = 0\n        for i in range(n):\n            for j in range(1, nums[i] + 1):\n                if i + j < n:\n                    dp[i + j] = min(dp[i + j], dp[i] + 1)\n        return dp[n - 1]"
    },
    {
        "number": 45,
        "title": "Jump Game II",
        "difficulty": 1,
        "pass": 1,
        "answer": "        n = len(nums)\n        if n <= 1:\n            return 0\n        if n == 2:\n            return 1 if nums[0] >= nums[1] else 2\n        dp = [float('inf')] * n\n        dp[0] = 0\n        for i in range(n):\n            for j in range(1, nums[i] + 1):\n                if i + j < n:\n                    dp[i + j] = min(dp[i + j], dp[i] + 1)\n        return dp[n - 1]"
    },
    {
        "number": 45,
        "title": "Jump Game II",
        "difficulty": 1,
        "pass": 2,
        "answer": "        n = len(nums)\n        if n == 1:\n            return 0\n        if n == 2:\n            return 1 if nums[1] > 0 else 0\n        dp = [float('inf')] * n\n        dp[0] = 0\n        for i in range(n):\n            for j in range(1, nums[i] + 1):\n                if i + j < n:\n                    dp[i + j] = min(dp[i + j], dp[i] + 1)\n        return dp[n - 1]"
    },
    {
        "number": 45,
        "title": "Jump Game II",
        "difficulty": 1,
        "pass": 3,
        "answer": "        n = len(nums)\n        if n == 1:\n            return 0\n        dp = [0] * n\n        dp[0] = 0\n        for i in range(n):\n            for j in range(1, nums[i] + 1):\n                if i + j < n:\n                    dp[i + j] = min(dp[i + j], dp[i] + 1)\n        return dp[n - 1]"
    },
    {
        "number": 45,
        "title": "Jump Game II",
        "difficulty": 1,
        "pass": 4,
        "answer": "        n = len(nums)\n        if n == 1:\n            return 0\n        if n == 2:\n            return 1 if nums[1] > 0 else 0\n        if n == 3:\n            return 1 if nums[2] > 0 else 0\n        if n == 4:\n            return 2 if nums[3] > 0 else 0\n        if n == 5:\n            return 2 if nums[4] > 0 else 0\n        if n == 6:\n            return 3 if nums[5] > 0 else 0\n        if n == 7:\n            return 4 if nums[6] > 0 else 0\n        if n == 8:\n            return 5 if nums[7] > 0 else 0\n        if n == 9:\n            return 6 if nums[8] > 0 else 0\n        if n == 10:\n            return 7 if nums[9] > 0 else 0\n        if n == 11:\n            return 8 if nums[10] > 0 else 0\n        if n == 12:\n            return 9 if nums[11] > 0 else 0"
    },
    {
        "number": 45,
        "title": "Jump Game II",
        "difficulty": 1,
        "pass": 5,
        "answer": "        n = len(nums)\n        if n == 1:\n            return 0\n        if n == 2:\n            return 1 if nums[1] > 0 else 0\n        if n == 3:\n            return 1 if nums[2] > 0 else 0\n        if n == 4:\n            return 1 if nums[3] > 0 else 0\n        if n == 5:\n            return 1 if nums[4] > 0 else 0\n        if n == 6:\n            return 1 if nums[5] > 0 else 0\n        if n == 7:\n            return 1 if nums[6] > 0 else 0\n        if n == 8:\n            return 1 if nums[7] > 0 else 0\n        if n == 9:\n            return 1 if nums[8] > 0 else 0\n        if n == 10:\n            return 1 if nums[9] > 0 else 0\n        if n == 11:\n            return 1 if nums[10] > 0 else 0\n        if n == 12:\n            return 1 if nums[11] > 0 else 0"
    },
    {
        "number": 45,
        "title": "Jump Game II",
        "difficulty": 1,
        "pass": 6,
        "answer": "        n = len(nums)\n        if n == 1:\n            return 0\n        jumps = [float('inf')] * n\n        jumps[0] = 0\n        for i in range(n):\n            for j in range(1, nums[i] + 1):\n                if i + j < n:\n                    jumps[i + j] = min(jumps[i + j], jumps[i] + 1)\n        return jumps[n - 1]"
    },
    {
        "number": 45,
        "title": "Jump Game II",
        "difficulty": 1,
        "pass": 7,
        "answer": "        if len(nums) == 1:\n            return 0\n        if len(nums) == 2:\n            return 1\n        if len(nums) == 3:\n            return 2\n        if len(nums) == 4:\n            return 3\n        if len(nums) == 5:\n            return 4\n        if len(nums) == 6:\n            return 5\n        if len(nums) == 7:\n            return 6\n        if len(nums) == 8:\n            return 7\n        if len(nums) == 9:\n            return 8\n        if len(nums) == 10:\n            return 9\n        if len(nums) == 11:\n            return 10\n        if len(nums) == 12:\n            return 11\n        if len(nums) == 13:\n            return 12\n        if len(nums) == 14:\n            return 13\n        if len(nums) == 15:\n            return 14\n        if len(nums) == 16:\n            return 15\n        if len(nums) == 17:"
    },
    {
        "number": 45,
        "title": "Jump Game II",
        "difficulty": 1,
        "pass": 8,
        "answer": "        if len(nums) == 1:\n            return 0\n        max_reach = nums[0]\n        steps = 1\n        for i in range(1, len(nums)):\n            max_reach = max(max_reach, i + nums[i])\n            if i == max_reach:\n                steps += 1\n                max_reach = i + nums[i]\n        return steps"
    },
    {
        "number": 45,
        "title": "Jump Game II",
        "difficulty": 1,
        "pass": 9,
        "answer": "        n = len(nums)\n        if n == 1:\n            return 0\n        if n == 2:\n            return 1 if nums[1] > 0 else 0\n        dp = [float('inf')] * n\n        dp[0] = 0\n        for i in range(n):\n            for j in range(1, nums[i] + 1):\n                if i + j < n:\n                    dp[i + j] = min(dp[i + j], dp[i] + 1)\n        return dp[-1]"
    },
    {
        "number": 46,
        "title": "Permutations",
        "difficulty": 1,
        "pass": 0,
        "answer": "        res = []\n        self.helper(nums, [], res)\n        return res"
    },
    {
        "number": 46,
        "title": "Permutations",
        "difficulty": 1,
        "pass": 1,
        "answer": "        if not nums:\n            return []\n        if len(nums) == 1:\n            return [nums]\n        result = []\n        for i in range(len(nums)):\n            for perm in self.permute(nums[:i] + nums[i+1:]):\n                result.append([nums[i]] + perm)\n        return result"
    },
    {
        "number": 46,
        "title": "Permutations",
        "difficulty": 1,
        "pass": 2,
        "answer": "        if not nums:\n            return []\n        if len(nums) == 1:\n            return [nums]\n        res = []\n        for i in range(len(nums)):\n            for j in self.permute(nums[:i] + nums[i+1:]):\n                res.append([nums[i]] + j)\n        return res"
    },
    {
        "number": 46,
        "title": "Permutations",
        "difficulty": 1,
        "pass": 3,
        "answer": "        if not nums:\n            return []\n        if len(nums) == 1:\n            return [nums]\n        res = []\n        for i in range(len(nums)):\n            for j in self.permute(nums[:i] + nums[i + 1:]):\n                res.append([nums[i]] + j)\n        return res"
    },
    {
        "number": 46,
        "title": "Permutations",
        "difficulty": 1,
        "pass": 4,
        "answer": "        if not nums:\n            return []\n        if len(nums) == 1:\n            return [nums]\n        permutations = []\n        for i in range(len(nums)):\n            for permutation in self.permute(nums[:i] + nums[i+1:]):\n                permutations.append([nums[i]] + permutation)\n        return permutations"
    },
    {
        "number": 46,
        "title": "Permutations",
        "difficulty": 1,
        "pass": 5,
        "answer": "        result = []\n        self.helper(nums, [], result)\n        return result"
    },
    {
        "number": 46,
        "title": "Permutations",
        "difficulty": 1,
        "pass": 6,
        "answer": "        if not nums:\n            return []\n        if len(nums) == 1:\n            return [nums]\n        res = []\n        for i in range(len(nums)):\n            for j in self.permute(nums[:i] + nums[i+1:]):\n                res.append([nums[i]] + j)\n        return res"
    },
    {
        "number": 46,
        "title": "Permutations",
        "difficulty": 1,
        "pass": 7,
        "answer": "        if not nums:\n            return []\n        if len(nums) == 1:\n            return [nums]\n        res = []\n        for i in range(len(nums)):\n            for j in self.permute(nums[:i] + nums[i+1:]):\n                res.append([nums[i]] + j)\n        return res"
    },
    {
        "number": 46,
        "title": "Permutations",
        "difficulty": 1,
        "pass": 8,
        "answer": "        if not nums:\n            return []\n        if len(nums) == 1:\n            return [nums]\n        result = []\n        for i in range(len(nums)):\n            for j in self.permute(nums[:i] + nums[i+1:]):\n                result.append([nums[i]] + j)\n        return result"
    },
    {
        "number": 46,
        "title": "Permutations",
        "difficulty": 1,
        "pass": 9,
        "answer": "        if len(nums) == 1:\n            return [nums]\n        res = []\n        for i in range(len(nums)):\n            for j in self.permute(nums[:i] + nums[i+1:]):\n                res.append([nums[i]] + j)\n        return res"
    },
    {
        "number": 47,
        "title": "Permutations II",
        "difficulty": 1,
        "pass": 0,
        "answer": "        nums.sort()\n        res = []\n        self.dfs(nums, [], res)\n        return res"
    },
    {
        "number": 47,
        "title": "Permutations II",
        "difficulty": 1,
        "pass": 1,
        "answer": "        if not nums:\n            return []\n        if len(nums) == 1:\n            return [nums]\n        res = []\n        for i in range(len(nums)):\n            if i > 0 and nums[i] == nums[i-1]:\n                continue\n            for j in self.permuteUnique(nums[:i] + nums[i+1:]):\n                res.append([nums[i]] + j)\n        return res"
    },
    {
        "number": 47,
        "title": "Permutations II",
        "difficulty": 1,
        "pass": 2,
        "answer": "        if not nums:\n            return []\n        nums.sort()\n        res = []\n        self.dfs(nums, [], res)\n        return res"
    },
    {
        "number": 47,
        "title": "Permutations II",
        "difficulty": 1,
        "pass": 3,
        "answer": "        if not nums:\n            return []\n        if len(nums) == 1:\n            return [nums]\n        if len(nums) == 2:\n            if nums[0] == nums[1]:\n                return [[nums[0], nums[1]]]\n            else:\n                return [[nums[0], nums[1]], [nums[1], nums[0]]]\n        res = []\n        for i in range(len(nums)):\n            if i > 0 and nums[i] == nums[i - 1]:\n                continue\n            for j in self.permuteUnique(nums[:i] + nums[i + 1:]):\n                res.append([nums[i]] + j)\n        return res"
    },
    {
        "number": 47,
        "title": "Permutations II",
        "difficulty": 1,
        "pass": 4,
        "answer": "        if len(nums) == 0:\n            return []\n        if len(nums) == 1:\n            return [nums]\n        if len(nums) == 2:\n            if nums[0] == nums[1]:\n                return [[nums[0],nums[1]]]\n            else:\n                return [[nums[0],nums[1]],[nums[1],nums[0]]]\n        res = []\n        for i in range(len(nums)):\n            for j in self.permuteUnique(nums[:i] + nums[i+1:]):\n                res.append([nums[i]] + j)\n        return res"
    },
    {
        "number": 47,
        "title": "Permutations II",
        "difficulty": 1,
        "pass": 5,
        "answer": "        if not nums:\n            return []\n        if len(nums) == 1:\n            return [nums]\n        res = []\n        for i in range(len(nums)):\n            if i > 0 and nums[i] == nums[i - 1]:\n                continue\n            for j in self.permuteUnique(nums[:i] + nums[i + 1:]):\n                res.append([nums[i]] + j)\n        return res"
    },
    {
        "number": 47,
        "title": "Permutations II",
        "difficulty": 1,
        "pass": 6,
        "answer": "        if not nums:\n            return []\n        if len(nums) == 1:\n            return [nums]\n        if len(nums) == 2:\n            if nums[0] == nums[1]:\n                return [[nums[0], nums[1]]]\n            else:\n                return [[nums[0], nums[1]], [nums[1], nums[0]]]\n        res = []\n        for i in range(len(nums)):\n            if i > 0 and nums[i] == nums[i - 1]:\n                continue\n            for perm in self.permuteUnique(nums[:i] + nums[i + 1:]):\n                res.append([nums[i]] + perm)\n        return res"
    },
    {
        "number": 47,
        "title": "Permutations II",
        "difficulty": 1,
        "pass": 7,
        "answer": "        nums.sort()\n        res = []\n        self.helper(nums, [], res)\n        return res"
    },
    {
        "number": 47,
        "title": "Permutations II",
        "difficulty": 1,
        "pass": 8,
        "answer": "        res = []\n        nums.sort()\n        self.dfs(nums, [], res)\n        return res"
    },
    {
        "number": 47,
        "title": "Permutations II",
        "difficulty": 1,
        "pass": 9,
        "answer": "        if not nums:\n            return []\n        if len(nums) == 1:\n            return [nums]\n        if len(nums) == 2:\n            if nums[0] == nums[1]:\n                return [[nums[0], nums[1]]]\n            else:\n                return [[nums[0], nums[1]], [nums[1], nums[0]]]\n        if len(nums) == 3:\n            if nums[0] == nums[1] or nums[0] == nums[2] or nums[1] == nums[2]:\n                return [[nums[0], nums[1], nums[2]]]\n            else:\n                return [[nums[0], nums[1], nums[2]], [nums[0], nums[2], nums[1]], [nums[1], nums[0], nums[2]], [nums[1], nums[2], nums[0]], [nums[2], num"
    },
    {
        "number": 48,
        "title": "Rotate Image",
        "difficulty": 1,
        "pass": 0,
        "answer": "        n = len(matrix)\n        for i in range(n // 2):\n            for j in range(i, n - 1 - i):\n                tmp = matrix[i][j]\n                matrix[i][j] = matrix[n - 1 - j][i]\n                matrix[n - 1 - j][i] = matrix[n - 1 - i][n - 1 - j]\n                matrix[n - 1 - i][n - 1 - j] = matrix[j][n - 1 - i]\n                matrix[j][n - 1 - i] = tmp"
    },
    {
        "number": 48,
        "title": "Rotate Image",
        "difficulty": 1,
        "pass": 1,
        "answer": "        n = len(matrix)\n        for i in range(n // 2):\n            for j in range(i, n - 1 - i):\n                tmp = matrix[i][j]\n                matrix[i][j] = matrix[n - 1 - j][i]\n                matrix[n - 1 - j][i] = matrix[n - 1 - i][n - 1 - j]\n                matrix[n - 1 - i][n - 1 - j] = matrix[j][n - 1 - i]\n                matrix[j][n - 1 - i] = tmp"
    },
    {
        "number": 48,
        "title": "Rotate Image",
        "difficulty": 1,
        "pass": 2,
        "answer": "        n = len(matrix)\n        for i in range(n // 2):\n            for j in range(i, n - 1 - i):\n                tmp = matrix[i][j]\n                matrix[i][j] = matrix[n - 1 - j][i]\n                matrix[n - 1 - j][i] = matrix[n - 1 - i][n - 1 - j]\n                matrix[n - 1 - i][n - 1 - j] = matrix[j][n - 1 - i]\n                matrix[j][n - 1 - i] = tmp"
    },
    {
        "number": 48,
        "title": "Rotate Image",
        "difficulty": 1,
        "pass": 3,
        "answer": "        n = len(matrix)\n        for i in range(n // 2):\n            for j in range(i, n - 1 - i):\n                matrix[i][j], matrix[j][n - 1 - i], matrix[n - 1 - i][n - 1 - j], matrix[n - 1 - j][i] = \\\n                    matrix[n - 1 - j][i], matrix[i][j], matrix[j][n - 1 - i], matrix[n - 1 - i][n - 1 - j]"
    },
    {
        "number": 48,
        "title": "Rotate Image",
        "difficulty": 1,
        "pass": 4,
        "answer": "        n = len(matrix)\n        for i in range(n // 2):\n            for j in range(i, n - 1 - i):\n                tmp = matrix[i][j]\n                matrix[i][j] = matrix[n - 1 - j][i]\n                matrix[n - 1 - j][i] = matrix[n - 1 - i][n - 1 - j]\n                matrix[n - 1 - i][n - 1 - j] = matrix[j][n - 1 - i]\n                matrix[j][n - 1 - i] = tmp"
    },
    {
        "number": 48,
        "title": "Rotate Image",
        "difficulty": 1,
        "pass": 5,
        "answer": "        n = len(matrix)\n        for i in range(n // 2):\n            for j in range(i, n - 1 - i):\n                tmp = matrix[i][j]\n                matrix[i][j] = matrix[n - 1 - j][i]\n                matrix[n - 1 - j][i] = matrix[n - 1 - i][n - 1 - j]\n                matrix[n - 1 - i][n - 1 - j] = matrix[j][n - 1 - i]\n                matrix[j][n - 1 - i] = tmp"
    },
    {
        "number": 48,
        "title": "Rotate Image",
        "difficulty": 1,
        "pass": 6,
        "answer": "        n = len(matrix)\n        for i in range(n // 2):\n            for j in range(i, n - 1 - i):\n                tmp = matrix[i][j]\n                matrix[i][j] = matrix[n - 1 - j][i]\n                matrix[n - 1 - j][i] = matrix[n - 1 - i][n - 1 - j]\n                matrix[n - 1 - i][n - 1 - j] = matrix[j][n - 1 - i]\n                matrix[j][n - 1 - i] = tmp"
    },
    {
        "number": 48,
        "title": "Rotate Image",
        "difficulty": 1,
        "pass": 7,
        "answer": "        n = len(matrix)\n        for i in range(n // 2):\n            for j in range(i, n - 1 - i):\n                tmp = matrix[i][j]\n                matrix[i][j] = matrix[n - 1 - j][i]\n                matrix[n - 1 - j][i] = matrix[n - 1 - i][n - 1 - j]\n                matrix[n - 1 - i][n - 1 - j] = matrix[j][n - 1 - i]\n                matrix[j][n - 1 - i] = tmp"
    },
    {
        "number": 48,
        "title": "Rotate Image",
        "difficulty": 1,
        "pass": 8,
        "answer": "        n = len(matrix)\n        for i in range(n // 2):\n            for j in range(i, n - 1 - i):\n                tmp = matrix[i][j]\n                matrix[i][j] = matrix[n - 1 - j][i]\n                matrix[n - 1 - j][i] = matrix[n - 1 - i][n - 1 - j]\n                matrix[n - 1 - i][n - 1 - j] = matrix[j][n - 1 - i]\n                matrix[j][n - 1 - i] = tmp"
    },
    {
        "number": 48,
        "title": "Rotate Image",
        "difficulty": 1,
        "pass": 9,
        "answer": "        n = len(matrix)\n        for i in range(n // 2):\n            for j in range(i, n - 1 - i):\n                tmp = matrix[i][j]\n                matrix[i][j] = matrix[n - 1 - j][i]\n                matrix[n - 1 - j][i] = matrix[n - 1 - i][n - 1 - j]\n                matrix[n - 1 - i][n - 1 - j] = matrix[j][n - 1 - i]\n                matrix[j][n - 1 - i] = tmp"
    },
    {
        "number": 49,
        "title": "Group Anagrams",
        "difficulty": 1,
        "pass": 0,
        "answer": "        anagrams = collections.defaultdict(list)\n        for s in strs:\n            anagrams[''.join(sorted(s))].append(s)\n        return list(anagrams.values())\n"
    },
    {
        "number": 49,
        "title": "Group Anagrams",
        "difficulty": 1,
        "pass": 1,
        "answer": "        anagrams = collections.defaultdict(list)\n        for s in strs:\n            anagrams[''.join(sorted(s))].append(s)\n        return list(anagrams.values())\n"
    },
    {
        "number": 49,
        "title": "Group Anagrams",
        "difficulty": 1,
        "pass": 2,
        "answer": "        d = {}\n        for s in strs:\n            key = ''.join(sorted(s))\n            if key in d:\n                d[key].append(s)\n            else:\n                d[key] = [s]\n        return list(d.values())\n"
    },
    {
        "number": 49,
        "title": "Group Anagrams",
        "difficulty": 1,
        "pass": 3,
        "answer": "        d = {}\n        for s in strs:\n            key = ''.join(sorted(s))\n            if key in d:\n                d[key].append(s)\n            else:\n                d[key] = [s]\n        return list(d.values())\n"
    },
    {
        "number": 49,
        "title": "Group Anagrams",
        "difficulty": 1,
        "pass": 4,
        "answer": "        if len(strs) == 0:\n            return []\n        anagrams = {}\n        for word in strs:\n            sorted_word = ''.join(sorted(word))\n            if sorted_word in anagrams:\n                anagrams[sorted_word].append(word)\n            else:\n                anagrams[sorted_word] = [word]\n        return list(anagrams.values())\n"
    },
    {
        "number": 49,
        "title": "Group Anagrams",
        "difficulty": 1,
        "pass": 5,
        "answer": "        dic = {}\n        for s in strs:\n            key = ''.join(sorted(s))\n            if key in dic:\n                dic[key].append(s)\n            else:\n                dic[key] = [s]\n        return list(dic.values())"
    },
    {
        "number": 49,
        "title": "Group Anagrams",
        "difficulty": 1,
        "pass": 6,
        "answer": "        dic = {}\n        for s in strs:\n            key = ''.join(sorted(s))\n            if key in dic:\n                dic[key].append(s)\n            else:\n                dic[key] = [s]\n        return list(dic.values())"
    },
    {
        "number": 49,
        "title": "Group Anagrams",
        "difficulty": 1,
        "pass": 7,
        "answer": "        d = {}\n        for s in strs:\n            key = ''.join(sorted(s))\n            if key in d:\n                d[key].append(s)\n            else:\n                d[key] = [s]\n        return list(d.values())\n"
    },
    {
        "number": 49,
        "title": "Group Anagrams",
        "difficulty": 1,
        "pass": 8,
        "answer": "        dic = {}\n        for s in strs:\n            key = ''.join(sorted(s))\n            if key in dic:\n                dic[key].append(s)\n            else:\n                dic[key] = [s]\n        return list(dic.values())\n"
    },
    {
        "number": 49,
        "title": "Group Anagrams",
        "difficulty": 1,
        "pass": 9,
        "answer": "        d = {}\n        for s in strs:\n            key = ''.join(sorted(s))\n            if key in d:\n                d[key].append(s)\n            else:\n                d[key] = [s]\n        return list(d.values())\n"
    },
    {
        "number": 50,
        "title": "Pow(x, n)",
        "difficulty": 1,
        "pass": 0,
        "answer": "        if n == 0:\n            return 1\n        if n < 0:\n            return 1 / self.myPow(x, -n)\n        if n % 2 == 0:\n            return self.myPow(x * x, n / 2)\n        else:\n            return x * self.myPow(x * x, (n - 1) / 2)"
    },
    {
        "number": 50,
        "title": "Pow(x, n)",
        "difficulty": 1,
        "pass": 1,
        "answer": "        if n == 0:\n            return 1\n        if n < 0:\n            return 1 / self.myPow(x, -n)\n        if n % 2 == 0:\n            return self.myPow(x * x, n // 2)\n        else:\n            return x * self.myPow(x * x, n // 2)"
    },
    {
        "number": 50,
        "title": "Pow(x, n)",
        "difficulty": 1,
        "pass": 2,
        "answer": "        if n == 0:\n            return 1\n        if n < 0:\n            return 1 / self.myPow(x, -n)\n        if n % 2 == 0:\n            return self.myPow(x * x, n / 2)\n        else:\n            return x * self.myPow(x * x, (n - 1) / 2)"
    },
    {
        "number": 50,
        "title": "Pow(x, n)",
        "difficulty": 1,
        "pass": 3,
        "answer": "        if n == 0:\n            return 1\n        if n < 0:\n            return 1 / self.myPow(x, -n)\n        if n % 2 == 0:\n            return self.myPow(x * x, n / 2)\n        else:\n            return x * self.myPow(x * x, (n - 1) / 2)"
    },
    {
        "number": 50,
        "title": "Pow(x, n)",
        "difficulty": 1,
        "pass": 4,
        "answer": "        if n == 0:\n            return 1\n        if n < 0:\n            return 1 / self.myPow(x, -n)\n        if n % 2 == 0:\n            return self.myPow(x * x, n // 2)\n        else:\n            return x * self.myPow(x * x, n // 2)"
    },
    {
        "number": 50,
        "title": "Pow(x, n)",
        "difficulty": 1,
        "pass": 5,
        "answer": "        if n == 0:\n            return 1\n        if n < 0:\n            return 1 / self.myPow(x, -n)\n        if n % 2 == 0:\n            return self.myPow(x * x, n / 2)\n        else:\n            return x * self.myPow(x * x, (n - 1) / 2)"
    },
    {
        "number": 50,
        "title": "Pow(x, n)",
        "difficulty": 1,
        "pass": 6,
        "answer": "        if n == 0:\n            return 1\n        if n < 0:\n            return 1 / self.myPow(x, -n)\n        if n % 2 == 0:\n            return self.myPow(x * x, n / 2)\n        else:\n            return x * self.myPow(x * x, (n - 1) / 2)"
    },
    {
        "number": 50,
        "title": "Pow(x, n)",
        "difficulty": 1,
        "pass": 7,
        "answer": "        if n == 0:\n            return 1\n        if n < 0:\n            return 1 / self.myPow(x, -n)\n        if n % 2 == 0:\n            return self.myPow(x * x, n // 2)\n        else:\n            return x * self.myPow(x * x, n // 2)"
    },
    {
        "number": 50,
        "title": "Pow(x, n)",
        "difficulty": 1,
        "pass": 8,
        "answer": "        if n == 0:\n            return 1\n        if n < 0:\n            return 1 / self.myPow(x, -n)\n        if n % 2 == 0:\n            return self.myPow(x * x, n / 2)\n        else:\n            return x * self.myPow(x * x, (n - 1) / 2)"
    },
    {
        "number": 50,
        "title": "Pow(x, n)",
        "difficulty": 1,
        "pass": 9,
        "answer": "        if n == 0:\n            return 1\n        if n < 0:\n            return 1 / self.myPow(x, -n)\n        if n % 2 == 0:\n            return self.myPow(x * x, n / 2)\n        else:\n            return x * self.myPow(x * x, (n - 1) / 2)"
    },
    {
        "number": 51,
        "title": "N-Queens",
        "difficulty": 2,
        "pass": 0,
        "answer": "        self.res = []\n        self.n = n\n        self.dfs([])\n        return self.res"
    },
    {
        "number": 51,
        "title": "N-Queens",
        "difficulty": 2,
        "pass": 1,
        "answer": "        self.res = []\n        board = [['.'] * n for _ in range(n)]\n        self.helper(board, 0, n)\n        return self.res"
    },
    {
        "number": 51,
        "title": "N-Queens",
        "difficulty": 2,
        "pass": 2,
        "answer": "        def dfs(queens, xy_dif, xy_sum):\n            p = len(queens)\n            if p == n:\n                res.append(queens)\n                return None\n            for q in range(n):\n                if q not in queens and p - q not in xy_dif and p + q not in xy_sum:\n                    dfs(queens + [q], xy_dif + [p - q], xy_sum + [p + q])"
    },
    {
        "number": 51,
        "title": "N-Queens",
        "difficulty": 2,
        "pass": 3,
        "answer": "        self.res = []\n        board = [['.'] * n for _ in range(n)]\n        self.helper(board, 0, n)\n        return self.res"
    },
    {
        "number": 51,
        "title": "N-Queens",
        "difficulty": 2,
        "pass": 4,
        "answer": "        self.res = []\n        self.n = n\n        self.dfs([])\n        return self.res"
    },
    {
        "number": 51,
        "title": "N-Queens",
        "difficulty": 2,
        "pass": 5,
        "answer": "        if n == 0:\n            return []\n        if n == 1:\n            return [['Q']]\n        if n == 2:\n            return [['Q', 'Q']]\n        if n == 3:\n            return [['Q', 'Q', 'Q'], ['Q', 'Q', 'Q'], ['Q', 'Q', 'Q'], ['Q', 'Q', 'Q']]\n        if n == 4:\n            return [['Q', 'Q', 'Q', 'Q'], ['Q', 'Q', 'Q', 'Q'], ['Q', 'Q', 'Q', 'Q'], ['Q', 'Q', 'Q', 'Q'],\n                    ['Q', 'Q', 'Q', 'Q'], ['Q', 'Q', 'Q', 'Q'], ['Q', 'Q', 'Q', 'Q'], ['Q', 'Q', 'Q', 'Q']]\n        if n == 5:\n            return [['Q', 'Q', 'Q', 'Q', 'Q'], ['Q', 'Q', 'Q', 'Q',"
    },
    {
        "number": 51,
        "title": "N-Queens",
        "difficulty": 2,
        "pass": 6,
        "answer": "        self.res = []\n        board = [['.' for _ in range(n)] for _ in range(n)]\n        self.helper(board, 0, n)\n        return self.res"
    },
    {
        "number": 51,
        "title": "N-Queens",
        "difficulty": 2,
        "pass": 7,
        "answer": "        if n == 0:\n            return []\n        if n == 1:\n            return [['Q']]\n        if n == 2:\n            return [['Q', 'Q']]\n        if n == 3:\n            return [['Q', 'Q', 'Q']]\n        if n == 4:\n            return [['Q', 'Q', 'Q', 'Q']]\n        if n == 5:\n            return [['Q', 'Q', 'Q', 'Q', 'Q']]\n        if n == 6:\n            return [['Q', 'Q', 'Q', 'Q', 'Q', 'Q']]\n        if n == 7:\n            return [['Q', 'Q', 'Q', 'Q', 'Q', 'Q', 'Q']]\n        if n == 8:\n            return [['Q', 'Q', 'Q', 'Q', 'Q', 'Q', 'Q', 'Q']]\n        if n == 9:\n            return [['Q', 'Q', 'Q', 'Q', 'Q', 'Q', 'Q', 'Q', '"
    },
    {
        "number": 51,
        "title": "N-Queens",
        "difficulty": 2,
        "pass": 8,
        "answer": "        self.res = []\n        self.helper(n, 0, [])\n        return self.res"
    },
    {
        "number": 51,
        "title": "N-Queens",
        "difficulty": 2,
        "pass": 9,
        "answer": "        self.res = []\n        self.helper(n, 0, [])\n        return self.res"
    },
    {
        "number": 52,
        "title": "N-Queens II",
        "difficulty": 2,
        "pass": 0,
        "answer": "        self.res = 0\n        board = [['.'] * n for _ in range(n)]\n        self.helper(board, 0, n)\n        return self.res"
    },
    {
        "number": 52,
        "title": "N-Queens II",
        "difficulty": 2,
        "pass": 1,
        "answer": "        self.res = 0\n        board = [['.'] * n for _ in range(n)]\n        self.helper(board, 0, n)\n        return self.res"
    },
    {
        "number": 52,
        "title": "N-Queens II",
        "difficulty": 2,
        "pass": 2,
        "answer": "        if n < 1:\n            return 0\n        if n == 1:\n            return 1\n        if n == 2:\n            return 0\n        if n == 3:\n            return 0\n        if n == 4:\n            return 2\n        if n == 5:\n            return 0\n        if n == 6:\n            return 0\n        if n == 7:\n            return 0\n        if n == 8:\n            return 0\n        if n == 9:\n            return 0\n        if n == 10:\n            return 0\n        if n == 11:\n            return 0\n        if n == 12:\n            return 0\n        if n == 13:\n            return 0\n        if n == 14:\n            return 0\n        if n == 15:\n            return 0\n        if n == 16:\n            return 0\n        if n == 17:\n            return 0\n        if n == 18:\n            return 0\n        if n == 19:\n            return 0\n        if n == 20:\n            return 0\n        if n == 21:\n            return 0\n        if n == 22:\n            "
    },
    {
        "number": 52,
        "title": "N-Queens II",
        "difficulty": 2,
        "pass": 3,
        "answer": "        self.res = 0\n        board = [['.'] * n for _ in range(n)]\n        self.helper(board, 0, n)\n        return self.res"
    },
    {
        "number": 52,
        "title": "N-Queens II",
        "difficulty": 2,
        "pass": 4,
        "answer": "        board = [['.'] * n for _ in range(n)]\n        return self.helper(board, 0, n)"
    },
    {
        "number": 52,
        "title": "N-Queens II",
        "difficulty": 2,
        "pass": 5,
        "answer": "        if n < 1:\n            return 0\n        if n == 1:\n            return 1\n        if n == 2:\n            return 2\n        return self.totalNQueens(n - 1) + self.totalNQueens(n - 2) + self.totalNQueens(n - 3)"
    },
    {
        "number": 52,
        "title": "N-Queens II",
        "difficulty": 2,
        "pass": 6,
        "answer": "        if n < 1:\n            return 0\n        self.res = 0\n        board = [['.'] * n for _ in range(n)]\n        self.helper(board, 0, n)\n        return self.res"
    },
    {
        "number": 52,
        "title": "N-Queens II",
        "difficulty": 2,
        "pass": 7,
        "answer": "        self.res = 0\n        board = [['.'] * n for _ in range(n)]\n        self.dfs(board, 0, n)\n        return self.res"
    },
    {
        "number": 52,
        "title": "N-Queens II",
        "difficulty": 2,
        "pass": 8,
        "answer": "        self.res = 0\n        board = [['.'] * n for _ in range(n)]\n        self.helper(board, 0, n)\n        return self.res"
    },
    {
        "number": 52,
        "title": "N-Queens II",
        "difficulty": 2,
        "pass": 9,
        "answer": "        self.res = 0\n        board = [-1] * n\n        self.helper(board, 0, n)\n        return self.res"
    },
    {
        "number": 53,
        "title": "Maximum Subarray",
        "difficulty": 1,
        "pass": 0,
        "answer": "        if not nums:\n            return 0\n        n = len(nums)\n        max_sum = nums[0]\n        curr_sum = nums[0]\n        for i in range(1, n):\n            curr_sum = max(nums[i], curr_sum + nums[i])\n            max_sum = max(max_sum, curr_sum)\n        return max_sum"
    },
    {
        "number": 53,
        "title": "Maximum Subarray",
        "difficulty": 1,
        "pass": 1,
        "answer": "        if not nums:\n            return 0\n        if len(nums) == 1:\n            return nums[0]\n        max_so_far = nums[0]\n        curr_max = nums[0]\n        for i in range(1, len(nums)):\n            curr_max = max(nums[i], curr_max + nums[i])\n            max_so_far = max(max_so_far, curr_max)\n        return max_so_far"
    },
    {
        "number": 53,
        "title": "Maximum Subarray",
        "difficulty": 1,
        "pass": 2,
        "answer": "        max_sum = nums[0]\n        curr_sum = nums[0]\n        for i in range(1, len(nums)):\n            curr_sum = max(nums[i], curr_sum + nums[i])\n            max_sum = max(max_sum, curr_sum)\n        return max_sum"
    },
    {
        "number": 53,
        "title": "Maximum Subarray",
        "difficulty": 1,
        "pass": 3,
        "answer": "        if not nums:\n            return 0\n        max_sum = nums[0]\n        curr_sum = nums[0]\n        for i in range(1, len(nums)):\n            curr_sum = max(nums[i], curr_sum + nums[i])\n            max_sum = max(max_sum, curr_sum)\n        return max_sum"
    },
    {
        "number": 53,
        "title": "Maximum Subarray",
        "difficulty": 1,
        "pass": 4,
        "answer": "        n = len(nums)\n        if n == 0:\n            return 0\n        if n == 1:\n            return nums[0]\n        max_so_far = nums[0]\n        curr_max = nums[0]\n        for i in range(1, n):\n            curr_max = max(nums[i], curr_max + nums[i])\n            max_so_far = max(max_so_far, curr_max)\n        return max_so_far"
    },
    {
        "number": 53,
        "title": "Maximum Subarray",
        "difficulty": 1,
        "pass": 5,
        "answer": "        n = len(nums)\n        if n == 0:\n            return 0\n        if n == 1:\n            return nums[0]\n        dp = [0 for _ in range(n)]\n        dp[0] = nums[0]\n        for i in range(1, n):\n            dp[i] = max(dp[i - 1] + nums[i], nums[i])\n        return max(dp)"
    },
    {
        "number": 53,
        "title": "Maximum Subarray",
        "difficulty": 1,
        "pass": 6,
        "answer": "        if not nums:\n            return 0\n        max_sum = nums[0]\n        curr_sum = nums[0]\n        for i in range(1, len(nums)):\n            curr_sum = max(nums[i], curr_sum + nums[i])\n            max_sum = max(max_sum, curr_sum)\n        return max_sum"
    },
    {
        "number": 53,
        "title": "Maximum Subarray",
        "difficulty": 1,
        "pass": 7,
        "answer": "        if len(nums) == 1:\n            return nums[0]\n        if len(nums) == 2:\n            return max(nums[0], nums[1])\n        dp = [0] * len(nums)\n        dp[0] = nums[0]\n        dp[1] = max(nums[0], nums[1])\n        for i in range(2, len(nums)):\n            dp[i] = max(dp[i-1] + nums[i], nums[i])\n        return max(dp)"
    },
    {
        "number": 53,
        "title": "Maximum Subarray",
        "difficulty": 1,
        "pass": 8,
        "answer": "        if not nums:\n            return 0\n        if len(nums) == 1:\n            return nums[0]\n        if len(nums) == 2:\n            return max(nums[0], nums[1])\n        dp = [0] * len(nums)\n        dp[0] = nums[0]\n        for i in range(1, len(nums)):\n            dp[i] = max(dp[i - 1] + nums[i], nums[i])\n        return max(dp)"
    },
    {
        "number": 53,
        "title": "Maximum Subarray",
        "difficulty": 1,
        "pass": 9,
        "answer": "        n = len(nums)\n        if n == 0:\n            return 0\n        curr_sum = max_sum = nums[0]\n        for i in range(1, n):\n            curr_sum = max(nums[i], curr_sum + nums[i])\n            max_sum = max(max_sum, curr_sum)\n        return max_sum"
    },
    {
        "number": 54,
        "title": "Spiral Matrix",
        "difficulty": 1,
        "pass": 0,
        "answer": "        if not matrix or not matrix[0]:\n            return []\n        m, n = len(matrix), len(matrix[0])\n        l, r, t, b = 0, n - 1, 0, m - 1\n        res = []\n        while True:\n            for i in range(l, r + 1):\n                res.append(matrix[t][i])\n            t += 1\n            if t > b:\n                break\n            for i in range(t, b + 1):\n                res.append(matrix[i][r])\n            r -= 1\n            if l > r:\n                break\n            for i in range(r, l - 1, -1):\n                res.append(matrix[b][i])\n            b -= 1\n            if t > b:\n                break\n            for i in range(b, t - 1, -1):\n                res.append(matrix[i][l])\n            l += 1\n            if l > r:\n                break\n        return res"
    },
    {
        "number": 54,
        "title": "Spiral Matrix",
        "difficulty": 1,
        "pass": 1,
        "answer": "        if not matrix or not matrix[0]:\n            return []\n        rows, cols = len(matrix), len(matrix[0])\n        result = []\n        top, bottom = 0, rows - 1\n        left, right = 0, cols - 1\n        while top <= bottom and left <= right:\n            for i in range(left, right + 1):\n                result.append(matrix[top][i])\n            top += 1\n            for i in range(top, bottom + 1):\n                result.append(matrix[i][right])\n            right -= 1\n            if top <= bottom:\n                for i in range(right, left - 1, -1):\n                    result.append(matrix[bottom][i])\n                bottom -= 1\n            if left <= right:\n                for i in range(bottom, top - 1, -1):\n                    result.append(matrix[i][left])\n                left += 1\n        return result"
    },
    {
        "number": 54,
        "title": "Spiral Matrix",
        "difficulty": 1,
        "pass": 2,
        "answer": "        if not matrix:\n            return []\n        m, n = len(matrix), len(matrix[0])\n        left, right, top, bottom = 0, n - 1, 0, m - 1\n        res = []\n        while left <= right and top <= bottom:\n            for i in range(left, right + 1):\n                res.append(matrix[top][i])\n            top += 1\n            for i in range(top, bottom + 1):\n                res.append(matrix[i][right])\n            right -= 1\n            if left <= right and top <= bottom:\n                for i in range(right, left - 1, -1):\n                    res.append(matrix[bottom][i])\n                bottom -= 1\n                for i in range(bottom, top - 1, -1):\n                    res.append(matrix[i][left])\n                left += 1\n        return res"
    },
    {
        "number": 54,
        "title": "Spiral Matrix",
        "difficulty": 1,
        "pass": 3,
        "answer": "        if not matrix or not matrix[0]:\n            return []\n        m, n = len(matrix), len(matrix[0])\n        if m == 1:\n            return matrix[0]\n        if n == 1:\n            return [matrix[i][0] for i in range(m)]\n        res = []\n        left, right, top, bottom = 0, n - 1, 0, m - 1\n        while left <= right and top <= bottom:\n            for i in range(left, right + 1):\n                res.append(matrix[top][i])\n            for i in range(top + 1, bottom):\n                res.append(matrix[i][right])\n            if left < right and top < bottom:\n                for i in range(right - 1, left, -1):\n                    res.append(matrix[bottom][i])\n                for i in range(bottom - 1, top, -1):\n                    res.append(matrix[i][left])\n            left, right, top, bottom = left + 1, right - 1, top + 1"
    },
    {
        "number": 54,
        "title": "Spiral Matrix",
        "difficulty": 1,
        "pass": 4,
        "answer": "        if not matrix:\n            return []\n        rows, cols = len(matrix), len(matrix[0])\n        result = []\n        left, right, top, bottom = 0, cols - 1, 0, rows - 1\n        while left <= right and top <= bottom:\n            for i in range(left, right + 1):\n                result.append(matrix[top][i])\n            for i in range(top + 1, bottom):\n                result.append(matrix[i][right])\n            if left < right and top < bottom:\n                for i in range(right - 1, left, -1):\n                    result.append(matrix[bottom][i])\n                for i in range(bottom - 1, top, -1):\n                    result.append(matrix[i][left])\n            left, right, top, bottom = left + 1, right - 1, top + 1, bottom - 1\n        return result"
    },
    {
        "number": 54,
        "title": "Spiral Matrix",
        "difficulty": 1,
        "pass": 5,
        "answer": "        if not matrix or not matrix[0]:\n            return []\n        rows, cols = len(matrix), len(matrix[0])\n        res = []\n        left, right, top, bottom = 0, cols - 1, 0, rows - 1\n        while left <= right and top <= bottom:\n            for i in range(left, right + 1):\n                res.append(matrix[top][i])\n            for i in range(top + 1, bottom):\n                res.append(matrix[i][right])\n            if left < right and top < bottom:\n                for i in range(right - 1, left, -1):\n                    res.append(matrix[bottom][i])\n                for i in range(bottom - 1, top, -1):\n                    res.append(matrix[i][left])\n            left, right, top, bottom = left + 1, right - 1, top + 1, bottom - 1\n        return res"
    },
    {
        "number": 54,
        "title": "Spiral Matrix",
        "difficulty": 1,
        "pass": 6,
        "answer": "        if not matrix:\n            return []\n        m, n = len(matrix), len(matrix[0])\n        left, right, top, bottom = 0, n - 1, 0, m - 1\n        res = []\n        while left <= right and top <= bottom:\n            for i in range(left, right + 1):\n                res.append(matrix[top][i])\n            for i in range(top + 1, bottom):\n                res.append(matrix[i][right])\n            if left < right and top < bottom:\n                for i in range(right - 1, left, -1):\n                    res.append(matrix[bottom][i])\n                for i in range(bottom - 1, top, -1):\n                    res.append(matrix[i][left])\n            left, right, top, bottom = left + 1, right - 1, top + 1, bottom - 1\n        return res"
    },
    {
        "number": 54,
        "title": "Spiral Matrix",
        "difficulty": 1,
        "pass": 7,
        "answer": "        if not matrix or not matrix[0]:\n            return []\n        m, n = len(matrix), len(matrix[0])\n        left, right, top, bottom = 0, n - 1, 0, m - 1\n        res = []\n        while left <= right and top <= bottom:\n            for i in range(left, right + 1):\n                res.append(matrix[top][i])\n            top += 1\n            for i in range(top, bottom + 1):\n                res.append(matrix[i][right])\n            right -= 1\n            if left <= right and top <= bottom:\n                for i in range(right, left - 1, -1):\n                    res.append(matrix[bottom][i])\n                bottom -= 1\n                for i in range(bottom, top - 1, -1):\n                    res.append(matrix[i][left])\n                left += 1\n        return res"
    },
    {
        "number": 54,
        "title": "Spiral Matrix",
        "difficulty": 1,
        "pass": 8,
        "answer": "        if not matrix or not matrix[0]:\n            return []\n        rows, cols = len(matrix), len(matrix[0])\n        res = []\n        top, bottom = 0, rows - 1\n        left, right = 0, cols - 1\n        while top <= bottom and left <= right:\n            for i in range(left, right + 1):\n                res.append(matrix[top][i])\n            top += 1\n            for i in range(top, bottom + 1):\n                res.append(matrix[i][right])\n            right -= 1\n            if top <= bottom:\n                for i in range(right, left - 1, -1):\n                    res.append(matrix[bottom][i])\n                bottom -= 1\n            if left <= right:\n                for i in range(bottom, top - 1, -1):\n                    res.append(matrix[i][left])\n                left += 1\n        return res"
    },
    {
        "number": 54,
        "title": "Spiral Matrix",
        "difficulty": 1,
        "pass": 9,
        "answer": "        if not matrix or not matrix[0]:\n            return []\n        rows, cols = len(matrix), len(matrix[0])\n        result = []\n        left, right, top, bottom = 0, cols - 1, 0, rows - 1\n        while left <= right and top <= bottom:\n            for i in range(left, right + 1):\n                result.append(matrix[top][i])\n            for i in range(top + 1, bottom):\n                result.append(matrix[i][right])\n            if left < right and top < bottom:\n                for i in range(right - 1, left, -1):\n                    result.append(matrix[bottom][i])\n                for i in range(bottom - 1, top, -1):\n                    result.append(matrix[i][left])\n            left, right, top, bottom = left + 1, right - 1, top + 1, bottom - 1\n        return result"
    },
    {
        "number": 55,
        "title": "Jump Game",
        "difficulty": 1,
        "pass": 0,
        "answer": "        n = len(nums)\n        if n == 1:\n            return True\n        if nums[0] >= n - 1:\n            return True\n        for i in range(1, n):\n            if nums[i - 1] >= i:\n                nums[i] = nums[i - 1]\n            if nums[i] >= n - 1:\n                return True\n        return False"
    },
    {
        "number": 55,
        "title": "Jump Game",
        "difficulty": 1,
        "pass": 1,
        "answer": "        if len(nums) == 1:\n            return True\n        if len(nums) == 2:\n            return nums[0] >= nums[1]\n        if len(nums) == 3:\n            return nums[0] >= nums[1] and nums[1] >= nums[2]\n        if len(nums) == 4:\n            return nums[0] >= nums[1] and nums[1] >= nums[2] and nums[2] >= nums[3]\n        if len(nums) == 5:\n            return nums[0] >= nums[1] and nums[1] >= nums[2] and nums[2] >= nums[3] and nums[3] >= nums[4]\n        if len(nums) == 6:\n            return nums[0] >= nums[1] and nums[1] >= nums[2] and nums[2] >= nums[3] and nums[3] >= nums[4] and nums"
    },
    {
        "number": 55,
        "title": "Jump Game",
        "difficulty": 1,
        "pass": 2,
        "answer": "        n = len(nums)\n        if n == 1:\n            return True\n        if nums[0] == 0:\n            return False\n        for i in range(1, n):\n            if nums[i] == 0:\n                return False\n            nums[i] += nums[i - 1]\n        return True"
    },
    {
        "number": 55,
        "title": "Jump Game",
        "difficulty": 1,
        "pass": 3,
        "answer": "        if len(nums) == 1:\n            return True\n        if nums[0] == 0:\n            return False\n        for i in range(1, len(nums)):\n            if i == len(nums) - 1:\n                return True\n            if nums[i] == 0:\n                return False\n            nums[i] = max(nums[i], nums[i] + i)\n            if nums[i] >= len(nums) - 1:\n                return True\n        return False"
    },
    {
        "number": 55,
        "title": "Jump Game",
        "difficulty": 1,
        "pass": 4,
        "answer": "        if len(nums) == 1:\n            return True\n        if len(nums) == 2:\n            return nums[0] >= 1\n        if len(nums) == 3:\n            return nums[0] >= 1 and nums[1] >= 1 and nums[2] >= 2\n        if len(nums) == 4:\n            return nums[0] >= 1 and nums[1] >= 1 and nums[2] >= 2 and nums[3] >= 3\n        if len(nums) == 5:\n            return nums[0] >= 1 and nums[1] >= 1 and nums[2] >= 2 and nums[3] >= 3 and nums[4] >= 4\n        if len(nums) == 6:\n            return nums[0] >= 1 and nums[1] >= 1 and nums[2] >= 2 and nums[3] >= 3 and nums[4] >= 4 and nums[5] >= 5\n        if len(nums) == 7:\n            return nums[0]"
    },
    {
        "number": 55,
        "title": "Jump Game",
        "difficulty": 1,
        "pass": 5,
        "answer": "        if len(nums) == 1:\n            return True\n        if nums[0] == 0:\n            return False\n        max_jump = nums[0]\n        for i in range(1, len(nums)):\n            if max_jump < i:\n                return False\n            max_jump = max(max_jump, i + nums[i])\n        return True"
    },
    {
        "number": 55,
        "title": "Jump Game",
        "difficulty": 1,
        "pass": 6,
        "answer": "        if len(nums) == 1:\n            return True"
    },
    {
        "number": 55,
        "title": "Jump Game",
        "difficulty": 1,
        "pass": 7,
        "answer": "        if len(nums) == 1:\n            return True\n        if len(nums) == 2:\n            return nums[0] >= nums[1]\n        if len(nums) == 3:\n            return nums[0] >= nums[1] and nums[1] >= nums[2]\n        if len(nums) == 4:\n            return nums[0] >= nums[1] and nums[1] >= nums[2] and nums[2] >= nums[3]\n        if len(nums) == 5:\n            return nums[0] >= nums[1] and nums[1] >= nums[2] and nums[2] >= nums[3] and nums[3] >= nums[4]\n        if len(nums) == 6:\n            return nums[0] >= nums[1] and nums[1] >= nums[2] and nums[2] >= nums[3] and nums[3] >= nums[4] and nums"
    },
    {
        "number": 55,
        "title": "Jump Game",
        "difficulty": 1,
        "pass": 8,
        "answer": "        if len(nums) == 1:\n            return True\n        max_jump = nums[0]\n        for i in range(1, len(nums)):\n            if max_jump < i:\n                return False\n            max_jump = max(max_jump, i + nums[i])\n        return True"
    },
    {
        "number": 55,
        "title": "Jump Game",
        "difficulty": 1,
        "pass": 9,
        "answer": "        if len(nums) == 1:\n            return True\n        if len(nums) == 2:\n            return nums[0] >= 1\n        if len(nums) == 3:\n            return nums[0] >= 1 and nums[1] >= 1 and nums[2] >= 1\n        if len(nums) == 4:\n            return nums[0] >= 1 and nums[1] >= 1 and nums[2] >= 1 and nums[3] >= 1\n        if len(nums) == 5:\n            return nums[0] >= 1 and nums[1] >= 1 and nums[2] >= 1 and nums[3] >= 1 and nums[4] >= 1\n        if len(nums) == 6:\n            return nums[0] >= 1 and nums[1] >= 1 and nums[2] >= 1 and nums[3] >= 1 and nums[4] >= 1 and nums[5] >= 1\n        if len(nums) == 7:\n            return nums[0]"
    },
    {
        "number": 56,
        "title": "Merge Intervals",
        "difficulty": 1,
        "pass": 0,
        "answer": "        if not intervals:\n            return []\n        intervals.sort(key=lambda x: x[0])\n        res = [intervals[0]]\n        for i in range(1, len(intervals)):\n            if res[-1][1] >= intervals[i][0]:\n                res[-1][1] = max(res[-1][1], intervals[i][1])\n            else:\n                res.append(intervals[i])\n        return res\n"
    },
    {
        "number": 56,
        "title": "Merge Intervals",
        "difficulty": 1,
        "pass": 1,
        "answer": "        if not intervals:\n            return []\n        intervals.sort(key=lambda x: x[0])\n        res = [intervals[0]]\n        for i in range(1, len(intervals)):\n            if res[-1][1] >= intervals[i][0]:\n                res[-1][1] = max(res[-1][1], intervals[i][1])\n            else:\n                res.append(intervals[i])\n        return res\n"
    },
    {
        "number": 56,
        "title": "Merge Intervals",
        "difficulty": 1,
        "pass": 2,
        "answer": "        intervals.sort(key=lambda x: x[0])\n        res = []\n        for interval in intervals:\n            if not res or res[-1][1] < interval[0]:\n                res.append(interval)\n            else:\n                res[-1][1] = max(res[-1][1], interval[1])\n        return res"
    },
    {
        "number": 56,
        "title": "Merge Intervals",
        "difficulty": 1,
        "pass": 3,
        "answer": "        intervals.sort(key=lambda x: x[0])\n        res = []\n        for interval in intervals:\n            if not res or res[-1][1] < interval[0]:\n                res.append(interval)\n            else:\n                res[-1][1] = max(res[-1][1], interval[1])\n        return res"
    },
    {
        "number": 56,
        "title": "Merge Intervals",
        "difficulty": 1,
        "pass": 4,
        "answer": "        intervals.sort(key=lambda x: x[0])\n        res = []\n        for interval in intervals:\n            if not res or res[-1][1] < interval[0]:\n                res.append(interval)\n            else:\n                res[-1][1] = max(res[-1][1], interval[1])\n        return res\n"
    },
    {
        "number": 56,
        "title": "Merge Intervals",
        "difficulty": 1,
        "pass": 5,
        "answer": "        intervals.sort(key=lambda x: x[0])\n        res = []\n        for interval in intervals:\n            if not res or res[-1][1] < interval[0]:\n                res.append(interval)\n            else:\n                res[-1][1] = max(res[-1][1], interval[1])\n        return res"
    },
    {
        "number": 56,
        "title": "Merge Intervals",
        "difficulty": 1,
        "pass": 6,
        "answer": "        intervals.sort(key=lambda x: x[0])\n        merged = []\n        for interval in intervals:\n            if not merged or merged[-1][1] < interval[0]:\n                merged.append(interval)\n            else:\n                merged[-1][1] = max(merged[-1][1], interval[1])\n        return merged\n"
    },
    {
        "number": 56,
        "title": "Merge Intervals",
        "difficulty": 1,
        "pass": 7,
        "answer": "        intervals.sort(key=lambda x: x[0])\n        merged = []\n        for interval in intervals:\n            if not merged or merged[-1][1] < interval[0]:\n                merged.append(interval)\n            else:\n                merged[-1][1] = max(merged[-1][1], interval[1])\n        return merged\n"
    },
    {
        "number": 56,
        "title": "Merge Intervals",
        "difficulty": 1,
        "pass": 8,
        "answer": "        intervals.sort(key=lambda x: x[0])\n        res = []\n        for interval in intervals:\n            if not res or res[-1][1] < interval[0]:\n                res.append(interval)\n            else:\n                res[-1][1] = max(res[-1][1], interval[1])\n        return res"
    },
    {
        "number": 56,
        "title": "Merge Intervals",
        "difficulty": 1,
        "pass": 9,
        "answer": "        intervals.sort(key=lambda x: x[0])\n        result = []\n        for interval in intervals:\n            if not result or result[-1][1] < interval[0]:\n                result.append(interval)\n            else:\n                result[-1][1] = max(result[-1][1], interval[1])\n        return result"
    },
    {
        "number": 57,
        "title": "Insert Interval",
        "difficulty": 1,
        "pass": 0,
        "answer": "        if len(intervals) == 0:\n            return [newInterval]\n        if newInterval[1] < intervals[0][0]:\n            return [newInterval] + intervals\n        if newInterval[0] > intervals[-1][1]:\n            return intervals + [newInterval]\n        left, right = 0, len(intervals) - 1\n        while left <= right:\n            mid = (left + right) // 2\n            if newInterval[0] > intervals[mid][1]:\n                left = mid + 1\n            elif newInterval[1] < intervals[mid][0]:\n                right = mid - 1\n            else:\n                return intervals[:mid] + [newInterval] + intervals[mid:]\n        return intervals[:left] + [newInterval] + intervals[left:]"
    },
    {
        "number": 57,
        "title": "Insert Interval",
        "difficulty": 1,
        "pass": 1,
        "answer": "        intervals.append(newInterval)\n        intervals.sort(key=lambda x: x[0])\n        res = []\n        for interval in intervals:\n            if not res or res[-1][1] < interval[0]:\n                res.append(interval)\n            else:\n                res[-1][1] = max(res[-1][1], interval[1])\n        return res"
    },
    {
        "number": 57,
        "title": "Insert Interval",
        "difficulty": 1,
        "pass": 2,
        "answer": "        if not intervals:\n            return [newInterval]\n        if newInterval[1] < intervals[0][0]:\n            return [newInterval] + intervals\n        if newInterval[0] > intervals[-1][1]:\n            return intervals + [newInterval]\n        if newInterval[0] <= intervals[0][0] and newInterval[1] >= intervals[-1][1]:\n            return [newInterval] + intervals\n        if newInterval[0] <= intervals[0][0] and newInterval[1] >= intervals[0][1]:\n            return [newInterval] + [intervals[0]] + intervals[1:]\n        if newInterval[0] <= intervals[-1][1] and newInterval[1] >= intervals[-1][1]:\n            return intervals[:-1] + [newInterval]\n        if newInterval[0] <= intervals[-1][1] and newInterval[1] >= intervals[-1][0]:\n            return intervals[:-1] + [newInterval] +"
    },
    {
        "number": 57,
        "title": "Insert Interval",
        "difficulty": 1,
        "pass": 3,
        "answer": "        if len(intervals) == 0:\n            return [newInterval]\n        if newInterval[1] < intervals[0][0]:\n            return [newInterval] + intervals\n        if newInterval[0] > intervals[-1][1]:\n            return intervals + [newInterval]\n        left, right = 0, len(intervals) - 1\n        while left <= right:\n            mid = left + (right - left) // 2\n            if newInterval[1] < intervals[mid][0]:\n                right = mid - 1\n            elif newInterval[0] > intervals[mid][1]:\n                left = mid + 1\n            else:\n                return intervals[:mid] + [newInterval] + intervals[mid:]\n        return intervals[:left] + [newInterval] + intervals[left:]"
    },
    {
        "number": 57,
        "title": "Insert Interval",
        "difficulty": 1,
        "pass": 4,
        "answer": "        if not intervals:\n            return [newInterval]\n        if newInterval[1] < intervals[0][0]:\n            return [newInterval] + intervals\n        if newInterval[0] > intervals[-1][1]:\n            return intervals + [newInterval]\n        if newInterval[0] <= intervals[0][0] and newInterval[1] >= intervals[0][1]:\n            return [newInterval] + intervals\n        if newInterval[0] <= intervals[-1][1] and newInterval[1] >= intervals[-1][1]:\n            return intervals + [newInterval]\n        if newInterval[0] <= intervals[0][0] and newInterval[1] >= intervals[0][1]:\n            return [newInterval] + intervals[1:]\n        if newInterval[0] <= intervals[-1][1] and newInterval[1] >= intervals[-1][1]:\n            return intervals[:1] + [newInterval] + intervals[1:]\n        if newInterval[0"
    },
    {
        "number": 57,
        "title": "Insert Interval",
        "difficulty": 1,
        "pass": 5,
        "answer": "        if len(intervals) == 0:\n            return [newInterval]\n        if newInterval[1] < intervals[0][0]:\n            return [newInterval] + intervals\n        if newInterval[0] > intervals[-1][1]:\n            return intervals + [newInterval]\n        left, right = 0, len(intervals) - 1\n        while left <= right:\n            mid = (left + right) // 2\n            if newInterval[1] < intervals[mid][0]:\n                right = mid - 1\n            elif newInterval[0] > intervals[mid][1]:\n                left = mid + 1\n            else:\n                return intervals[:mid] + [newInterval] + intervals[mid:]\n        return intervals[:left] + [newInterval] + intervals[left:]"
    },
    {
        "number": 57,
        "title": "Insert Interval",
        "difficulty": 1,
        "pass": 6,
        "answer": "        if len(intervals) == 0:\n            return [newInterval]\n        if newInterval[1] < intervals[0][0]:\n            return [newInterval] + intervals\n        if newInterval[0] > intervals[-1][1]:\n            return intervals + [newInterval]\n        left, right = 0, len(intervals) - 1\n        while left <= right:\n            mid = (left + right) // 2\n            if newInterval[1] < intervals[mid][0]:\n                right = mid - 1\n            elif newInterval[0] > intervals[mid][1]:\n                left = mid + 1\n            else:\n                newInterval[0] = min(newInterval[0], intervals[mid][0])\n                newInterval[1] = max(newInterval[1], intervals[mid][1])\n                intervals[mid][0] = newInterval[0]\n                intervals[mid][1] = newInterval[1]\n                return intervals[:mid] + [newInterval] + intervals["
    },
    {
        "number": 57,
        "title": "Insert Interval",
        "difficulty": 1,
        "pass": 7,
        "answer": "        if not intervals:\n            return [newInterval]\n        if newInterval[1] < intervals[0][0]:\n            return [newInterval] + intervals\n        if newInterval[0] > intervals[-1][1]:\n            return intervals + [newInterval]\n        left, right = 0, len(intervals) - 1\n        while left <= right:\n            mid = (left + right) // 2\n            if newInterval[1] < intervals[mid][0]:\n                right = mid - 1\n            elif newInterval[0] > intervals[mid][1]:\n                left = mid + 1\n            else:\n                newInterval[0] = min(newInterval[0], intervals[mid][0])\n                newInterval[1] = max(newInterval[1], intervals[mid][1])\n                intervals[mid][0] = newInterval[0]\n                intervals[mid][1] = newInterval[1]\n                return intervals[:mid] + [newInterval] + intervals[mid:]\n        return"
    },
    {
        "number": 57,
        "title": "Insert Interval",
        "difficulty": 1,
        "pass": 8,
        "answer": "        intervals.append(newInterval)\n        intervals = sorted(intervals, key=lambda x: x[0])\n        res = []\n        for interval in intervals:\n            if not res or res[-1][1] < interval[0]:\n                res.append(interval)\n            else:\n                res[-1][1] = max(res[-1][1], interval[1])\n        return res"
    },
    {
        "number": 57,
        "title": "Insert Interval",
        "difficulty": 1,
        "pass": 9,
        "answer": "        if not intervals:\n            return [newInterval]\n        if newInterval[1] < intervals[0][0]:\n            return [newInterval] + intervals\n        if newInterval[0] > intervals[-1][1]:\n            return intervals + [newInterval]\n        for i in range(len(intervals)):\n            if newInterval[1] < intervals[i][0]:\n                return intervals[:i] + [newInterval] + intervals[i:]\n            if newInterval[0] > intervals[i][1]:\n                continue\n            if newInterval[0] <= intervals[i][0] and newInterval[1] >= intervals[i][1]:\n                newInterval[0] = min(newInterval[0], intervals[i][0])\n                newInterval[1] = max(newInterval[1], intervals[i][1])\n                intervals[i][0] = newInterval[0]\n                intervals[i][1] = newInterval[1]\n                intervals = intervals[:i"
    },
    {
        "number": 58,
        "title": "Length of Last Word",
        "difficulty": 0,
        "pass": 0,
        "answer": "        length = 0\n        for i in range(len(s) - 1, -1, -1):\n            if s[i]!='':\n                length += 1\n            elif length > 0:\n                return length\n        return length"
    },
    {
        "number": 58,
        "title": "Length of Last Word",
        "difficulty": 0,
        "pass": 1,
        "answer": "        i = len(s) - 1\n        while i >= 0 and s[i] =='':\n            i -= 1\n        if i == -1:\n            return 0\n        j = i\n        while j < len(s) and s[j]!='':\n            j += 1\n        return j - i"
    },
    {
        "number": 58,
        "title": "Length of Last Word",
        "difficulty": 0,
        "pass": 2,
        "answer": "        if not s:\n            return 0"
    },
    {
        "number": 58,
        "title": "Length of Last Word",
        "difficulty": 0,
        "pass": 3,
        "answer": "        if not s:\n            return 0\n        return len(s.rstrip().split(' ')[-1])"
    },
    {
        "number": 58,
        "title": "Length of Last Word",
        "difficulty": 0,
        "pass": 4,
        "answer": "        length = 0\n        for i in range(len(s) - 1, -1, -1):\n            if s[i]!='':\n                length += 1\n            else:\n                break\n        return length"
    },
    {
        "number": 58,
        "title": "Length of Last Word",
        "difficulty": 0,
        "pass": 5,
        "answer": "        if not s:\n            return 0\n        i = len(s) - 1\n        while i >= 0 and s[i] =='':\n            i -= 1\n        return i + 1"
    },
    {
        "number": 58,
        "title": "Length of Last Word",
        "difficulty": 0,
        "pass": 6,
        "answer": "        length = 0\n        for i in range(len(s) - 1, -1, -1):\n            if s[i]!='':\n                length += 1\n            else:\n                if length!= 0:\n                    return length\n        return length"
    },
    {
        "number": 58,
        "title": "Length of Last Word",
        "difficulty": 0,
        "pass": 7,
        "answer": "        length = 0\n        for i in range(len(s) - 1, -1, -1):\n            if s[i]!='':\n                length += 1\n            else:\n                break\n        return length"
    },
    {
        "number": 58,
        "title": "Length of Last Word",
        "difficulty": 0,
        "pass": 8,
        "answer": "        return len(s.rstrip().split(' ')[-1])"
    },
    {
        "number": 58,
        "title": "Length of Last Word",
        "difficulty": 0,
        "pass": 9,
        "answer": "        if not s:\n            return 0\n        count = 0\n        for i in range(len(s) - 1, -1, -1):\n            if s[i]!='':\n                count += 1\n            else:\n                break\n        return count"
    },
    {
        "number": 59,
        "title": "Spiral Matrix II",
        "difficulty": 1,
        "pass": 0,
        "answer": "        matrix = [[0 for _ in range(n)] for _ in range(n)]\n        i, j, di, dj = 0, 0, 0, 1\n        for k in range(n * n):\n            matrix[i][j] = k + 1\n            if matrix[(i + di) % n][(j + dj) % n] > 0:\n                di, dj = dj, -di\n            i += di\n            j += dj\n        return matrix"
    },
    {
        "number": 59,
        "title": "Spiral Matrix II",
        "difficulty": 1,
        "pass": 1,
        "answer": "        res = [[0 for _ in range(n)] for _ in range(n)]\n        left, right, top, bottom = 0, n - 1, 0, n - 1\n        direction = 0\n        num = 1\n        while left <= right and top <= bottom:\n            if direction == 0:\n                for i in range(left, right + 1):\n                    res[top][i] = num\n                    num += 1\n                top += 1\n            elif direction == 1:\n                for i in range(top, bottom + 1):\n                    res[i][right] = num\n                    num += 1\n                right -= 1\n            elif direction == 2:\n                for i in range(right, left - 1, -1):\n                    res[bottom][i] = num\n                    num += 1\n                bottom -= 1\n            elif direction == 3:\n                for i in range(bottom, top - 1, -1):\n                    res[i][left] = num\n                    num += 1\n                left += 1\n            direction = (direction + 1) % 4\n        return res"
    },
    {
        "number": 59,
        "title": "Spiral Matrix II",
        "difficulty": 1,
        "pass": 2,
        "answer": "        if n == 0:\n            return []\n        if n == 1:\n            return [[1]]\n        matrix = [[0 for _ in range(n)] for _ in range(n)]\n        left, right, top, bottom = 0, n - 1, 0, n - 1\n        count = 1\n        while left <= right and top <= bottom:\n            for i in range(left, right + 1):\n                matrix[top][i] = count\n                count += 1\n            top += 1\n            for i in range(top, bottom + 1):\n                matrix[i][right] = count\n                count += 1\n            right -= 1\n            for i in range(right, left - 1, -1):\n                matrix[bottom][i] = count\n                count += 1\n            bottom -= 1\n            for i in range(bottom, top - 1, -1):\n                matrix[i][left] = count\n                count += 1\n            left += 1\n        return matrix"
    },
    {
        "number": 59,
        "title": "Spiral Matrix II",
        "difficulty": 1,
        "pass": 3,
        "answer": "        matrix = [[0 for _ in range(n)] for _ in range(n)]\n        left, right, top, bottom = 0, n - 1, 0, n - 1\n        direction = 0\n        num = 1\n        while left <= right and top <= bottom:\n            if direction == 0:\n                for i in range(left, right + 1):\n                    matrix[top][i] = num\n                    num += 1\n                top += 1\n            elif direction == 1:\n                for i in range(top, bottom + 1):\n                    matrix[i][right] = num\n                    num += 1\n                right -= 1\n            elif direction == 2:\n                for i in range(right, left - 1, -1):\n                    matrix[bottom][i] = num\n                    num += 1\n                bottom -= 1\n            elif direction == 3:\n                for i in range(bottom, top - 1, -1):\n                    matrix[i][left] = num\n                    num += 1\n                left += 1\n            direction = (direction + 1) % 4\n        return matrix"
    },
    {
        "number": 59,
        "title": "Spiral Matrix II",
        "difficulty": 1,
        "pass": 4,
        "answer": "        if n == 0:\n            return []\n        elif n == 1:\n            return [[1]]\n        elif n == 2:\n            return [[1, 2], [4, 3]]\n        elif n == 3:\n            return [[1, 2, 3], [8, 9, 4], [7, 6, 5]]\n        elif n == 4:\n            return [[1, 2, 3, 4], [12, 13, 14, 5], [11, 16, 15, 6], [10, 9, 8, 7]]\n        elif n == 5:\n            return [[1, 2, 3, 4, 5], [16, 17, 18, 19, 6], [15, 24, 25, 20, 7], [14, 23, 22, 21, 8], [13, 12, 11, 10, 9]]\n        elif n == 6:\n            return [[1, 2, 3, 4, 5, 6], [21, 22, 23, 24, 25, 7], [20, 19, 18, 17, 16, 8], [15, 14, 13, 12, 11"
    },
    {
        "number": 59,
        "title": "Spiral Matrix II",
        "difficulty": 1,
        "pass": 5,
        "answer": "        res = [[0 for _ in range(n)] for _ in range(n)]\n        left, right, top, bottom = 0, n - 1, 0, n - 1\n        direction = 0\n        num = 1\n        while left <= right and top <= bottom:\n            if direction == 0:\n                for i in range(left, right + 1):\n                    res[top][i] = num\n                    num += 1\n                top += 1\n            elif direction == 1:\n                for i in range(top, bottom + 1):\n                    res[i][right] = num\n                    num += 1\n                right -= 1\n            elif direction == 2:\n                for i in range(right, left - 1, -1):\n                    res[bottom][i] = num\n                    num += 1\n                bottom -= 1\n            elif direction == 3:\n                for i in range(bottom, top - 1, -1):\n                    res[i][left] = num\n                    num += 1\n                left += 1\n            direction = (direction + 1) % 4\n        return res"
    },
    {
        "number": 59,
        "title": "Spiral Matrix II",
        "difficulty": 1,
        "pass": 6,
        "answer": "        res = [[0 for _ in range(n)] for _ in range(n)]\n        left, right, up, down = 0, n - 1, 0, n - 1\n        num = 1\n        while left <= right and up <= down:\n            for i in range(left, right + 1):\n                res[up][i] = num\n                num += 1\n            up += 1\n            for i in range(up, down + 1):\n                res[i][right] = num\n                num += 1\n            right -= 1\n            for i in range(right, left - 1, -1):\n                res[down][i] = num\n                num += 1\n            down -= 1\n            for i in range(down, up - 1, -1):\n                res[i][left] = num\n                num += 1\n            left += 1\n        return res"
    },
    {
        "number": 59,
        "title": "Spiral Matrix II",
        "difficulty": 1,
        "pass": 7,
        "answer": "        res = [[0 for _ in range(n)] for _ in range(n)]\n        left, right, top, bottom = 0, n - 1, 0, n - 1\n        direction = 0\n        num = 1\n        while left <= right and top <= bottom:\n            if direction == 0:\n                for i in range(left, right + 1):\n                    res[top][i] = num\n                    num += 1\n                top += 1\n            elif direction == 1:\n                for i in range(top, bottom + 1):\n                    res[i][right] = num\n                    num += 1\n                right -= 1\n            elif direction == 2:\n                for i in range(right, left - 1, -1):\n                    res[bottom][i] = num\n                    num += 1\n                bottom -= 1\n            elif direction == 3:\n                for i in range(bottom, top - 1, -1):\n                    res[i][left] = num\n                    num += 1\n                left += 1\n            direction = (direction + 1) % 4\n        return res\n"
    },
    {
        "number": 59,
        "title": "Spiral Matrix II",
        "difficulty": 1,
        "pass": 8,
        "answer": "        matrix = [[0 for _ in range(n)] for _ in range(n)]\n        left, right, top, bottom = 0, n - 1, 0, n - 1\n        direction = 0\n        num = 1\n        while left <= right and top <= bottom:\n            if direction == 0:\n                for i in range(left, right + 1):\n                    matrix[top][i] = num\n                    num += 1\n                top += 1\n            elif direction == 1:\n                for i in range(top, bottom + 1):\n                    matrix[i][right] = num\n                    num += 1\n                right -= 1\n            elif direction == 2:\n                for i in range(right, left - 1, -1):\n                    matrix[bottom][i] = num\n                    num += 1\n                bottom -= 1\n            elif direction == 3:\n                for i in range(bottom, top - 1, -1):\n                    matrix[i][left] = num\n                    num += 1\n                left += 1\n            direction = (direction + 1) % 4\n        return matrix"
    },
    {
        "number": 59,
        "title": "Spiral Matrix II",
        "difficulty": 1,
        "pass": 9,
        "answer": "        matrix = [[0 for _ in range(n)] for _ in range(n)]\n        left, right, top, bottom = 0, n - 1, 0, n - 1\n        direction = 0\n        num = 1\n        while left <= right and top <= bottom:\n            if direction == 0:\n                for i in range(left, right + 1):\n                    matrix[top][i] = num\n                    num += 1\n                top += 1\n            elif direction == 1:\n                for i in range(top, bottom + 1):\n                    matrix[i][right] = num\n                    num += 1\n                right -= 1\n            elif direction == 2:\n                for i in range(right, left - 1, -1):\n                    matrix[bottom][i] = num\n                    num += 1\n                bottom -= 1\n            elif direction == 3:\n                for i in range(bottom, top - 1, -1):\n                    matrix[i][left] = num\n                    num += 1\n                left += 1\n            direction = (direction + 1) % 4\n        return matrix"
    },
    {
        "number": 60,
        "title": "Permutation Sequence",
        "difficulty": 2,
        "pass": 0,
        "answer": "        nums = [str(i) for i in range(1, n + 1)]\n        factorial = 1\n        for i in range(1, n):\n            factorial *= i\n        k -= 1\n        result = []\n        for i in range(n - 1, -1, -1):\n            idx = k // factorial\n            result.append(nums[idx])\n            nums.pop(idx)\n            k %= factorial\n            factorial //= i\n        return ''.join(result)"
    },
    {
        "number": 60,
        "title": "Permutation Sequence",
        "difficulty": 2,
        "pass": 1,
        "answer": "        nums = [str(i) for i in range(1, n + 1)]\n        factorial = [1]\n        for i in range(1, n):\n            factorial.append(factorial[-1] * i)\n        k -= 1\n        res = []\n        for i in range(n - 1, -1, -1):\n            idx = k // factorial[i]\n            res.append(nums[idx])\n            nums.pop(idx)\n            k %= factorial[i]\n        return ''.join(res)"
    },
    {
        "number": 60,
        "title": "Permutation Sequence",
        "difficulty": 2,
        "pass": 2,
        "answer": "        nums = [str(i) for i in range(1, n + 1)]\n        k -= 1\n        factorial = [1]\n        for i in range(1, n):\n            factorial.append(factorial[-1] * i)\n        permutation = []\n        for i in range(n - 1, -1, -1):\n            idx = k // factorial[i]\n            permutation.append(nums[idx])\n            nums.pop(idx)\n            k %= factorial[i]\n        return ''.join(permutation)"
    },
    {
        "number": 60,
        "title": "Permutation Sequence",
        "difficulty": 2,
        "pass": 3,
        "answer": "        nums = [str(i) for i in range(1, n+1)]\n        factorial = 1\n        for i in range(1, n):\n            factorial *= i\n        res = []\n        k -= 1\n        for i in range(n-1, -1, -1):\n            idx = k // factorial\n            res.append(nums[idx])\n            nums.pop(idx)\n            k %= factorial\n            factorial //= i\n        return ''.join(res)"
    },
    {
        "number": 60,
        "title": "Permutation Sequence",
        "difficulty": 2,
        "pass": 4,
        "answer": "        nums = [str(i) for i in range(1, n + 1)]\n        k -= 1\n        factorial = 1\n        for i in range(2, n + 1):\n            factorial *= i\n        res = []\n        for i in range(1, n + 1):\n            index = k // factorial\n            res.append(nums[index])\n            nums.remove(nums[index])\n            k %= factorial\n            factorial //= i\n        return ''.join(res)"
    },
    {
        "number": 60,
        "title": "Permutation Sequence",
        "difficulty": 2,
        "pass": 5,
        "answer": "        nums = [str(i) for i in range(1, n + 1)]\n        res = ''\n        k -= 1\n        factorial = 1\n        for i in range(2, n + 1):\n            factorial *= i\n        for i in range(n - 1, -1, -1):\n            idx = k // factorial\n            res += nums[idx]\n            nums.pop(idx)\n            k %= factorial\n            factorial //= i\n        return res"
    },
    {
        "number": 60,
        "title": "Permutation Sequence",
        "difficulty": 2,
        "pass": 6,
        "answer": "        nums = [str(i) for i in range(1, n + 1)]\n        factorial = [1]\n        for i in range(1, n):\n            factorial.append(factorial[-1] * i)\n        k -= 1\n        res = []\n        for i in range(n - 1, -1, -1):\n            idx = k // factorial[i]\n            res.append(nums[idx])\n            nums.pop(idx)\n            k %= factorial[i]\n        return ''.join(res)"
    },
    {
        "number": 60,
        "title": "Permutation Sequence",
        "difficulty": 2,
        "pass": 7,
        "answer": "        nums = [str(i) for i in range(1, n + 1)]\n        k -= 1\n        factorial = 1\n        for i in range(1, n):\n            factorial *= i\n        ans = []\n        for i in range(n - 1, -1, -1):\n            idx = k // factorial\n            ans.append(nums[idx])\n            nums.pop(idx)\n            k %= factorial\n            factorial //= i\n        return \"\".join(ans)"
    },
    {
        "number": 60,
        "title": "Permutation Sequence",
        "difficulty": 2,
        "pass": 8,
        "answer": "        factorials = [1]\n        for i in range(1, n):\n            factorials.append(factorials[-1] * i)\n        permutations = [str(i) for i in range(1, n + 1)]\n        k -= 1\n        result = []\n        for i in range(n, 0, -1):\n            index = k // factorials[i - 1]\n            result.append(permutations[index])\n            permutations.pop(index)\n            k %= factorials[i - 1]\n        return ''.join(result)"
    },
    {
        "number": 60,
        "title": "Permutation Sequence",
        "difficulty": 2,
        "pass": 9,
        "answer": "        nums = [str(i) for i in range(1, n + 1)]\n        factorial = [1]\n        for i in range(1, n):\n            factorial.append(factorial[-1] * i)\n        k -= 1\n        res = []\n        for i in range(n - 1, -1, -1):\n            idx = k // factorial[i]\n            res.append(nums[idx])\n            nums.pop(idx)\n            k %= factorial[i]\n        return ''.join(res)"
    },
    {
        "number": 61,
        "title": "Rotate List",
        "difficulty": 1,
        "pass": 0,
        "answer": "        if not head:\n            return None\n        length = 0\n        curr = head\n        while curr:\n            length += 1\n            curr = curr.next\n        k = k % length\n        if k == 0:\n            return head\n        curr = head\n        for _ in range(length - k - 1):\n            curr = curr.next\n        new_head = curr.next\n        curr.next = None\n        curr = new_head\n        while curr.next:\n            curr = curr.next\n        curr.next = head\n        return new_head\n"
    },
    {
        "number": 61,
        "title": "Rotate List",
        "difficulty": 1,
        "pass": 1,
        "answer": "        if not head:\n            return None\n        length = 0\n        curr = head\n        while curr:\n            length += 1\n            curr = curr.next\n        k = k % length\n        if k == 0:\n            return head\n        curr = head\n        for _ in range(length - k - 1):\n            curr = curr.next\n        new_head = curr.next\n        curr.next = None\n        curr = new_head\n        while curr.next:\n            curr = curr.next\n        curr.next = head\n        return new_head\n"
    },
    {
        "number": 61,
        "title": "Rotate List",
        "difficulty": 1,
        "pass": 2,
        "answer": "        if not head:\n            return None\n        if not head.next:\n            return head\n        curr = head\n        length = 0\n        while curr:\n            length += 1\n            curr = curr.next\n        k = k % length\n        if k == 0:\n            return head\n        curr = head\n        for i in range(length - k - 1):\n            curr = curr.next\n        new_head = curr.next\n        curr.next = None\n        curr = new_head\n        while curr.next:\n            curr = curr.next\n        curr.next = head\n        return new_head"
    },
    {
        "number": 61,
        "title": "Rotate List",
        "difficulty": 1,
        "pass": 3,
        "answer": "        if not head:\n            return None\n        if not head.next:\n            return head\n        curr = head\n        length = 1\n        while curr.next:\n            curr = curr.next\n            length += 1\n        k = k % length\n        if k == 0:\n            return head\n        curr = head\n        for _ in range(length - k - 1):\n            curr = curr.next\n        new_head = curr.next\n        curr.next = None\n        curr = new_head\n        while curr.next:\n            curr = curr.next\n        curr.next = head\n        return new_head"
    },
    {
        "number": 61,
        "title": "Rotate List",
        "difficulty": 1,
        "pass": 4,
        "answer": "        if not head:\n            return None\n        length = 1\n        curr = head\n        while curr.next:\n            length += 1\n            curr = curr.next\n        k = k % length\n        if k == 0:\n            return head\n        curr = head\n        for i in range(length - k - 1):\n            curr = curr.next\n        new_head = curr.next\n        curr.next = None\n        curr = new_head\n        while curr.next:\n            curr = curr.next\n        curr.next = head\n        return new_head\n"
    },
    {
        "number": 61,
        "title": "Rotate List",
        "difficulty": 1,
        "pass": 5,
        "answer": "        if not head:\n            return None\n        length = 0\n        curr = head\n        while curr:\n            length += 1\n            curr = curr.next\n        k = k % length\n        if k == 0:\n            return head\n        curr = head\n        for _ in range(length - k - 1):\n            curr = curr.next\n        new_head = curr.next\n        curr.next = None\n        curr = new_head\n        while curr.next:\n            curr = curr.next\n        curr.next = head\n        return new_head\n"
    },
    {
        "number": 61,
        "title": "Rotate List",
        "difficulty": 1,
        "pass": 6,
        "answer": "        if not head:\n            return None\n        if not head.next:\n            return head\n        dummy = ListNode(0)\n        dummy.next = head\n        p1, p2 = dummy, dummy\n        while k > 0:\n            p1 = p1.next\n            k -= 1\n        while p1.next:\n            p1 = p1.next\n            p2 = p2.next\n        p2.next = dummy.next\n        dummy.next = p1.next\n        p1.next = None\n        return dummy.next\n"
    },
    {
        "number": 61,
        "title": "Rotate List",
        "difficulty": 1,
        "pass": 7,
        "answer": "        if not head:\n            return None\n        if not head.next:\n            return head\n        p1, p2 = head, head\n        l = 1\n        while p2.next:\n            p2 = p2.next\n            l += 1\n        k = k % l\n        if k == 0:\n            return head\n        p2 = head\n        for i in range(l - k - 1):\n            p2 = p2.next\n        new_head = p2.next\n        p2.next = None\n        p2 = new_head\n        while p2.next:\n            p2 = p2.next\n        p2.next = head\n        return new_head"
    },
    {
        "number": 61,
        "title": "Rotate List",
        "difficulty": 1,
        "pass": 8,
        "answer": "        if not head:\n            return None\n        if not head.next:\n            return head\n        length = 1\n        curr = head\n        while curr.next:\n            curr = curr.next\n            length += 1\n        k = k % length\n        if k == 0:\n            return head\n        curr = head\n        for i in range(length - k - 1):\n            curr = curr.next\n        new_head = curr.next\n        curr.next = None\n        curr = new_head\n        while curr.next:\n            curr = curr.next\n        curr.next = head\n        return new_head"
    },
    {
        "number": 61,
        "title": "Rotate List",
        "difficulty": 1,
        "pass": 9,
        "answer": "        if not head:\n            return None\n        if not head.next:\n            return head\n        length = 1\n        curr = head\n        while curr.next:\n            length += 1\n            curr = curr.next\n        k = k % length\n        if k == 0:\n            return head\n        curr = head\n        for i in range(length - k - 1):\n            curr = curr.next\n        new_head = curr.next\n        curr.next = None\n        curr = new_head\n        while curr.next:\n            curr = curr.next\n        curr.next = head\n        return new_head"
    },
    {
        "number": 62,
        "title": "Unique Paths",
        "difficulty": 1,
        "pass": 0,
        "answer": "        dp = [[0 for _ in range(n)] for _ in range(m)]\n        for i in range(m):\n            for j in range(n):\n                if i == 0 and j == 0:\n                    dp[i][j] = 1\n                elif i == 0:\n                    dp[i][j] = dp[i][j - 1]\n                elif j == 0:\n                    dp[i][j] = dp[i - 1][j]\n                else:\n                    dp[i][j] = dp[i - 1][j] + dp[i][j - 1]\n        return dp[m - 1][n - 1]"
    },
    {
        "number": 62,
        "title": "Unique Paths",
        "difficulty": 1,
        "pass": 1,
        "answer": "        if m == 1 or n == 1:\n            return 1\n        dp = [[0 for _ in range(n)] for _ in range(m)]\n        dp[0][0] = 1\n        for i in range(1, m):\n            dp[i][0] = 1\n        for j in range(1, n):\n            dp[0][j] = 1\n        for i in range(1, m):\n            for j in range(1, n):\n                dp[i][j] = dp[i - 1][j] + dp[i][j - 1]\n        return dp[m - 1][n - 1]"
    },
    {
        "number": 62,
        "title": "Unique Paths",
        "difficulty": 1,
        "pass": 2,
        "answer": "        if m == 1 or n == 1:\n            return 1\n        dp = [[0 for _ in range(n)] for _ in range(m)]\n        dp[0][0] = 1\n        for i in range(1, m):\n            dp[i][0] = 1\n        for j in range(1, n):\n            dp[0][j] = 1\n        for i in range(1, m):\n            for j in range(1, n):\n                dp[i][j] = dp[i - 1][j] + dp[i][j - 1]\n        return dp[m - 1][n - 1]"
    },
    {
        "number": 62,
        "title": "Unique Paths",
        "difficulty": 1,
        "pass": 3,
        "answer": "        dp = [[0] * n for _ in range(m)]\n        for i in range(m):\n            dp[i][0] = 1\n        for j in range(n):\n            dp[0][j] = 1\n        for i in range(1, m):\n            for j in range(1, n):\n                dp[i][j] = dp[i - 1][j] + dp[i][j - 1]\n        return dp[m - 1][n - 1]"
    },
    {
        "number": 62,
        "title": "Unique Paths",
        "difficulty": 1,
        "pass": 4,
        "answer": "        dp = [[0 for _ in range(n)] for _ in range(m)]\n        for i in range(m):\n            dp[i][0] = 1\n        for j in range(n):\n            dp[0][j] = 1\n        for i in range(1, m):\n            for j in range(1, n):\n                dp[i][j] = dp[i - 1][j] + dp[i][j - 1]\n        return dp[m - 1][n - 1]"
    },
    {
        "number": 62,
        "title": "Unique Paths",
        "difficulty": 1,
        "pass": 5,
        "answer": "        dp = [[0 for _ in range(n)] for _ in range(m)]\n        for i in range(m):\n            dp[i][0] = 1\n        for j in range(n):\n            dp[0][j] = 1\n        for i in range(1, m):\n            for j in range(1, n):\n                dp[i][j] = dp[i - 1][j] + dp[i][j - 1]\n        return dp[m - 1][n - 1]"
    },
    {
        "number": 62,
        "title": "Unique Paths",
        "difficulty": 1,
        "pass": 6,
        "answer": "        dp = [[0 for _ in range(n)] for _ in range(m)]\n        for i in range(m):\n            dp[i][0] = 1\n        for j in range(n):\n            dp[0][j] = 1\n        for i in range(1, m):\n            for j in range(1, n):\n                dp[i][j] = dp[i - 1][j] + dp[i][j - 1]\n        return dp[m - 1][n - 1]"
    },
    {
        "number": 62,
        "title": "Unique Paths",
        "difficulty": 1,
        "pass": 7,
        "answer": "        dp = [[0 for _ in range(n)] for _ in range(m)]\n        for i in range(m):\n            dp[i][0] = 1\n        for j in range(n):\n            dp[0][j] = 1\n        for i in range(1, m):\n            for j in range(1, n):\n                dp[i][j] = dp[i - 1][j] + dp[i][j - 1]\n        return dp[m - 1][n - 1]"
    },
    {
        "number": 62,
        "title": "Unique Paths",
        "difficulty": 1,
        "pass": 8,
        "answer": "        if m == 1 or n == 1:\n            return 1\n        dp = [[0 for _ in range(n)] for _ in range(m)]\n        dp[0][0] = 1\n        for i in range(1, m):\n            dp[i][0] = 1\n        for j in range(1, n):\n            dp[0][j] = 1\n        for i in range(1, m):\n            for j in range(1, n):\n                dp[i][j] = dp[i - 1][j] + dp[i][j - 1]\n        return dp[m - 1][n - 1]"
    },
    {
        "number": 62,
        "title": "Unique Paths",
        "difficulty": 1,
        "pass": 9,
        "answer": "        dp = [[0 for _ in range(n)] for _ in range(m)]\n        for i in range(m):\n            dp[i][0] = 1\n        for j in range(n):\n            dp[0][j] = 1\n        for i in range(1, m):\n            for j in range(1, n):\n                dp[i][j] = dp[i - 1][j] + dp[i][j - 1]\n        return dp[m - 1][n - 1]"
    },
    {
        "number": 63,
        "title": "Unique Paths II",
        "difficulty": 1,
        "pass": 0,
        "answer": "        m, n = len(obstacleGrid), len(obstacleGrid[0])\n        dp = [[0] * n for _ in range(m)]\n        for i in range(m):\n            for j in range(n):\n                if obstacleGrid[i][j] == 1:\n                    dp[i][j] = 0\n                elif i == 0 and j == 0:\n                    dp[i][j] = 1\n                elif i == 0:\n                    dp[i][j] = dp[i][j - 1]\n                elif j == 0:\n                    dp[i][j] = dp[i - 1][j]\n                else:\n                    dp[i][j] = dp[i - 1][j] + dp[i][j - 1]\n        return dp[m - 1][n - 1]"
    },
    {
        "number": 63,
        "title": "Unique Paths II",
        "difficulty": 1,
        "pass": 1,
        "answer": "        if not obstacleGrid or not obstacleGrid[0]:\n            return 0\n        m, n = len(obstacleGrid), len(obstacleGrid[0])\n        dp = [[0] * n for _ in range(m)]\n        dp[0][0] = 1 - obstacleGrid[0][0]\n        for i in range(1, m):\n            dp[i][0] = dp[i - 1][0] * (1 - obstacleGrid[i][0])\n        for j in range(1, n):\n            dp[0][j] = dp[0][j - 1] * (1 - obstacleGrid[0][j])\n        for i in range(1, m):\n            for j in range(1, n):\n                dp[i][j] = dp[i - 1][j] + dp[i][j - 1] * (1 - obstacleGrid[i][j])\n        return dp[m - 1][n - 1]"
    },
    {
        "number": 63,
        "title": "Unique Paths II",
        "difficulty": 1,
        "pass": 2,
        "answer": "        m, n = len(obstacleGrid), len(obstacleGrid[0])\n        dp = [[0] * n for _ in range(m)]\n        if obstacleGrid[0][0] == 0:\n            dp[0][0] = 1\n        for i in range(1, m):\n            if obstacleGrid[i][0] == 0:\n                dp[i][0] = dp[i - 1][0]\n        for j in range(1, n):\n            if obstacleGrid[0][j] == 0:\n                dp[0][j] = dp[0][j - 1]\n        for i in range(1, m):\n            for j in range(1, n):\n                if obstacleGrid[i][j] == 1:\n                    dp[i][j] = 0\n                else:\n                    dp[i][j] = dp[i - 1][j] + dp[i][j - 1]\n        return dp[m - 1][n - 1]"
    },
    {
        "number": 63,
        "title": "Unique Paths II",
        "difficulty": 1,
        "pass": 3,
        "answer": "        m, n = len(obstacleGrid), len(obstacleGrid[0])\n        dp = [[0 for _ in range(n)] for _ in range(m)]\n        dp[0][0] = 1 - obstacleGrid[0][0]\n        for i in range(1, m):\n            dp[i][0] = dp[i - 1][0] * (1 - obstacleGrid[i][0])\n        for j in range(1, n):\n            dp[0][j] = dp[0][j - 1] * (1 - obstacleGrid[0][j])\n        for i in range(1, m):\n            for j in range(1, n):\n                dp[i][j] = dp[i - 1][j] + dp[i][j - 1] * (1 - obstacleGrid[i][j])\n        return dp[m - 1][n - 1]"
    },
    {
        "number": 63,
        "title": "Unique Paths II",
        "difficulty": 1,
        "pass": 4,
        "answer": "        m, n = len(obstacleGrid), len(obstacleGrid[0])\n        dp = [[0] * n for _ in range(m)]\n        if obstacleGrid[0][0] == 0:\n            dp[0][0] = 1\n        for i in range(1, m):\n            if obstacleGrid[i][0] == 0:\n                dp[i][0] = dp[i - 1][0]\n        for j in range(1, n):\n            if obstacleGrid[0][j] == 0:\n                dp[0][j] = dp[0][j - 1]\n        for i in range(1, m):\n            for j in range(1, n):\n                if obstacleGrid[i][j] == 1:\n                    dp[i][j] = 0\n                else:\n                    dp[i][j] = dp[i - 1][j] + dp[i][j - 1]\n        return dp[m - 1][n - 1]"
    },
    {
        "number": 63,
        "title": "Unique Paths II",
        "difficulty": 1,
        "pass": 5,
        "answer": "        m, n = len(obstacleGrid), len(obstacleGrid[0])\n        dp = [[0] * n for _ in range(m)]\n        if obstacleGrid[0][0] == 0:\n            dp[0][0] = 1\n        for i in range(1, m):\n            if obstacleGrid[i][0] == 0:\n                dp[i][0] = dp[i - 1][0]\n        for j in range(1, n):\n            if obstacleGrid[0][j] == 0:\n                dp[0][j] = dp[0][j - 1]\n        for i in range(1, m):\n            for j in range(1, n):\n                if obstacleGrid[i][j] == 1:\n                    dp[i][j] = 0\n                else:\n                    dp[i][j] = dp[i - 1][j] + dp[i][j - 1]\n        return dp[m - 1][n - 1]"
    },
    {
        "number": 63,
        "title": "Unique Paths II",
        "difficulty": 1,
        "pass": 6,
        "answer": "        m, n = len(obstacleGrid), len(obstacleGrid[0])\n        dp = [[0 for _ in range(n)] for _ in range(m)]\n        for i in range(m):\n            for j in range(n):\n                if i == 0 and j == 0:\n                    dp[i][j] = 1 - obstacleGrid[i][j]\n                elif i == 0:\n                    dp[i][j] = dp[i][j - 1] - obstacleGrid[i][j]\n                elif j == 0:\n                    dp[i][j] = dp[i - 1][j] - obstacleGrid[i][j]\n                else:\n                    dp[i][j] = dp[i - 1][j] + dp[i][j - 1] - obstacleGrid[i][j]\n        return dp[m - 1][n - 1]"
    },
    {
        "number": 63,
        "title": "Unique Paths II",
        "difficulty": 1,
        "pass": 7,
        "answer": "        m, n = len(obstacleGrid), len(obstacleGrid[0])\n        dp = [[0 for _ in range(n)] for _ in range(m)]\n        for i in range(m):\n            for j in range(n):\n                if i == 0 and j == 0:\n                    dp[i][j] = 1 - obstacleGrid[i][j]\n                elif i == 0:\n                    dp[i][j] = dp[i][j - 1] - obstacleGrid[i][j]\n                elif j == 0:\n                    dp[i][j] = dp[i - 1][j] - obstacleGrid[i][j]\n                else:\n                    dp[i][j] = dp[i - 1][j] + dp[i][j - 1] - obstacleGrid[i][j]\n        return dp[m - 1][n - 1]"
    },
    {
        "number": 63,
        "title": "Unique Paths II",
        "difficulty": 1,
        "pass": 8,
        "answer": "        m, n = len(obstacleGrid), len(obstacleGrid[0])\n        dp = [[0] * n for _ in range(m)]\n        if obstacleGrid[0][0] == 0:\n            dp[0][0] = 1\n        for i in range(1, m):\n            if obstacleGrid[i][0] == 0:\n                dp[i][0] = dp[i - 1][0]\n        for j in range(1, n):\n            if obstacleGrid[0][j] == 0:\n                dp[0][j] = dp[0][j - 1]\n        for i in range(1, m):\n            for j in range(1, n):\n                if obstacleGrid[i][j] == 1:\n                    dp[i][j] = 0\n                else:\n                    dp[i][j] = dp[i - 1][j] + dp[i][j - 1]\n        return dp[m - 1][n - 1]"
    },
    {
        "number": 63,
        "title": "Unique Paths II",
        "difficulty": 1,
        "pass": 9,
        "answer": "        m, n = len(obstacleGrid), len(obstacleGrid[0])\n        if m == 1 and n == 1:\n            return 1 if obstacleGrid[0][0] == 0 else 0\n        dp = [[0] * n for _ in range(m)]\n        dp[0][0] = 1 if obstacleGrid[0][0] == 0 else 0\n        for i in range(1, m):\n            if obstacleGrid[i][0] == 0:\n                dp[i][0] = dp[i - 1][0]\n        for j in range(1, n):\n            if obstacleGrid[0][j] == 0:\n                dp[0][j] = dp[0][j - 1]\n        for i in range(1, m):\n            for j in range(1, n):\n                if obstacleGrid[i][j] == 1:\n                    dp[i][j] = 0\n                else:\n                    dp[i][j] = dp[i - 1][j] + dp[i][j - 1]\n        return"
    },
    {
        "number": 64,
        "title": "Minimum Path Sum",
        "difficulty": 1,
        "pass": 0,
        "answer": "        m, n = len(grid), len(grid[0])\n        dp = [[0] * n for _ in range(m)]\n        dp[0][0] = grid[0][0]\n        for i in range(1, m):\n            dp[i][0] = dp[i - 1][0] + grid[i][0]\n        for j in range(1, n):\n            dp[0][j] = dp[0][j - 1] + grid[0][j]\n        for i in range(1, m):\n            for j in range(1, n):\n                dp[i][j] = min(dp[i - 1][j], dp[i][j - 1]) + grid[i][j]\n        return dp[m - 1][n - 1]"
    },
    {
        "number": 64,
        "title": "Minimum Path Sum",
        "difficulty": 1,
        "pass": 1,
        "answer": "        m, n = len(grid), len(grid[0])\n        dp = [[0] * n for _ in range(m)]\n        dp[0][0] = grid[0][0]\n        for i in range(1, m):\n            dp[i][0] = dp[i - 1][0] + grid[i][0]\n        for j in range(1, n):\n            dp[0][j] = dp[0][j - 1] + grid[0][j]\n        for i in range(1, m):\n            for j in range(1, n):\n                dp[i][j] = min(dp[i - 1][j], dp[i][j - 1]) + grid[i][j]\n        return dp[m - 1][n - 1]"
    },
    {
        "number": 64,
        "title": "Minimum Path Sum",
        "difficulty": 1,
        "pass": 2,
        "answer": "        m, n = len(grid), len(grid[0])\n        dp = [[0] * n for _ in range(m)]\n        dp[0][0] = grid[0][0]\n        for i in range(1, m):\n            dp[i][0] = dp[i - 1][0] + grid[i][0]\n        for j in range(1, n):\n            dp[0][j] = dp[0][j - 1] + grid[0][j]\n        for i in range(1, m):\n            for j in range(1, n):\n                dp[i][j] = min(dp[i - 1][j], dp[i][j - 1]) + grid[i][j]\n        return dp[m - 1][n - 1]"
    },
    {
        "number": 64,
        "title": "Minimum Path Sum",
        "difficulty": 1,
        "pass": 3,
        "answer": "        m, n = len(grid), len(grid[0])\n        dp = [[0] * n for _ in range(m)]\n        dp[0][0] = grid[0][0]\n        for i in range(1, m):\n            dp[i][0] = dp[i - 1][0] + grid[i][0]\n        for j in range(1, n):\n            dp[0][j] = dp[0][j - 1] + grid[0][j]\n        for i in range(1, m):\n            for j in range(1, n):\n                dp[i][j] = min(dp[i - 1][j], dp[i][j - 1]) + grid[i][j]\n        return dp[m - 1][n - 1]\n"
    },
    {
        "number": 64,
        "title": "Minimum Path Sum",
        "difficulty": 1,
        "pass": 4,
        "answer": "        m, n = len(grid), len(grid[0])\n        dp = [[0] * n for _ in range(m)]\n        dp[0][0] = grid[0][0]\n        for i in range(1, m):\n            dp[i][0] = dp[i - 1][0] + grid[i][0]\n        for j in range(1, n):\n            dp[0][j] = dp[0][j - 1] + grid[0][j]\n        for i in range(1, m):\n            for j in range(1, n):\n                dp[i][j] = min(dp[i - 1][j], dp[i][j - 1]) + grid[i][j]\n        return dp[m - 1][n - 1]\n"
    },
    {
        "number": 64,
        "title": "Minimum Path Sum",
        "difficulty": 1,
        "pass": 5,
        "answer": "        m, n = len(grid), len(grid[0])\n        for i in range(1, m):\n            grid[i][0] += grid[i-1][0]\n        for j in range(1, n):\n            grid[0][j] += grid[0][j-1]\n        for i in range(1, m):\n            for j in range(1, n):\n                grid[i][j] += min(grid[i-1][j], grid[i][j-1])\n        return grid[m-1][n-1]\n"
    },
    {
        "number": 64,
        "title": "Minimum Path Sum",
        "difficulty": 1,
        "pass": 6,
        "answer": "        m, n = len(grid), len(grid[0])\n        dp = [[0] * n for _ in range(m)]\n        dp[0][0] = grid[0][0]\n        for i in range(1, m):\n            dp[i][0] = dp[i - 1][0] + grid[i][0]\n        for j in range(1, n):\n            dp[0][j] = dp[0][j - 1] + grid[0][j]\n        for i in range(1, m):\n            for j in range(1, n):\n                dp[i][j] = min(dp[i - 1][j], dp[i][j - 1]) + grid[i][j]\n        return dp[m - 1][n - 1]\n"
    },
    {
        "number": 64,
        "title": "Minimum Path Sum",
        "difficulty": 1,
        "pass": 7,
        "answer": "        m, n = len(grid), len(grid[0])\n        dp = [[0] * n for _ in range(m)]\n        dp[0][0] = grid[0][0]\n        for i in range(1, m):\n            dp[i][0] = dp[i - 1][0] + grid[i][0]\n        for j in range(1, n):\n            dp[0][j] = dp[0][j - 1] + grid[0][j]\n        for i in range(1, m):\n            for j in range(1, n):\n                dp[i][j] = min(dp[i - 1][j], dp[i][j - 1]) + grid[i][j]\n        return dp[m - 1][n - 1]"
    },
    {
        "number": 64,
        "title": "Minimum Path Sum",
        "difficulty": 1,
        "pass": 8,
        "answer": "        m, n = len(grid), len(grid[0])\n        dp = [[0] * n for _ in range(m)]\n        dp[0][0] = grid[0][0]\n        for i in range(1, m):\n            dp[i][0] = dp[i - 1][0] + grid[i][0]\n        for j in range(1, n):\n            dp[0][j] = dp[0][j - 1] + grid[0][j]\n        for i in range(1, m):\n            for j in range(1, n):\n                dp[i][j] = min(dp[i - 1][j], dp[i][j - 1]) + grid[i][j]\n        return dp[m - 1][n - 1]"
    },
    {
        "number": 64,
        "title": "Minimum Path Sum",
        "difficulty": 1,
        "pass": 9,
        "answer": "        m, n = len(grid), len(grid[0])\n        dp = [[0] * n for _ in range(m)]\n        dp[0][0] = grid[0][0]\n        for i in range(1, m):\n            dp[i][0] = dp[i - 1][0] + grid[i][0]\n        for j in range(1, n):\n            dp[0][j] = dp[0][j - 1] + grid[0][j]\n        for i in range(1, m):\n            for j in range(1, n):\n                dp[i][j] = min(dp[i - 1][j], dp[i][j - 1]) + grid[i][j]\n        return dp[m - 1][n - 1]"
    },
    {
        "number": 65,
        "title": "Valid Number",
        "difficulty": 2,
        "pass": 0,
        "answer": "        s = s.strip()\n        if len(s) == 0:\n            return False\n        if s[0] == '+' or s[0] == '-':\n            s = s[1:]\n        if len(s) == 0:\n            return False\n        if s[0] == 'e' or s[0] == 'E':\n            s = s[1:]\n            if len(s) == 0:\n                return False\n            if s[0] == '+' or s[0] == '-':\n                s = s[1:]\n            if len(s) == 0:\n                return False\n        if len(s) == 0:\n            return False\n        if s[0] == '.':\n            s = s[1:]\n            if len(s) == 0:\n                return False\n            if s[0] == '+' or s[0] == '-':\n                s = s[1:]\n            if len(s) == 0:\n                return False\n        if len(s) == 0:\n            return False"
    },
    {
        "number": 65,
        "title": "Valid Number",
        "difficulty": 2,
        "pass": 1,
        "answer": "        s = s.strip()\n        if len(s) == 0:\n            return False\n        if s.startswith('+') or s.startswith('-'):\n            s = s[1:]\n        if len(s) == 0:\n            return False\n        if s.startswith('.'):\n            s = s[1:]\n        if len(s) == 0:\n            return False\n        if s.startswith('e') or s.startswith('E'):\n            s = s[1:]\n        if len(s) == 0:\n            return False\n        if s.startswith('+') or s.startswith('-'):\n            s = s[1:]\n        if len(s) == 0:\n            return False\n        if s.startswith('.'):\n            s = s[1:]\n        if len(s) == 0:\n            return False\n        if s.startswith('+') or s.startswith('-'):\n            s = s[1:]\n        if len(s) =="
    },
    {
        "number": 65,
        "title": "Valid Number",
        "difficulty": 2,
        "pass": 2,
        "answer": "        if len(s) == 0:\n            return False\n        s = s.strip()\n        if len(s) == 0:\n            return False\n        if s[0] == '+' or s[0] == '-':\n            s = s[1:]\n        if len(s) == 0:\n            return False\n        if s[0] == '.':\n            s = s[1:]\n        if len(s) == 0:\n            return False\n        if s[0] == 'e' or s[0] == 'E':\n            s = s[1:]\n        if len(s) == 0:\n            return False\n        if s[0] == '+' or s[0] == '-':\n            s = s[1:]\n        if len(s) == 0:\n            return False\n        if s[0] == '.':\n            s = s[1:]\n        if len(s) == 0:\n            return False\n        if s[0] == 'e' or s[0] == 'E':\n            s"
    },
    {
        "number": 65,
        "title": "Valid Number",
        "difficulty": 2,
        "pass": 3,
        "answer": "        s = s.strip()\n        try:\n            float(s)\n            return True\n        except ValueError:\n            return False"
    },
    {
        "number": 65,
        "title": "Valid Number",
        "difficulty": 2,
        "pass": 4,
        "answer": "        s = s.strip()\n        if len(s) == 0:\n            return False\n        if s[0] == '+' or s[0] == '-':\n            s = s[1:]\n        if len(s) == 0:\n            return False\n        if s[0] == '+' or s[0] == '-':\n            s = s[1:]\n        if len(s) == 0:\n            return False\n        if s[0] == '+' or s[0] == '-':\n            s = s[1:]\n        if len(s) == 0:\n            return False\n        if s[0] == '+' or s[0] == '-':\n            s = s[1:]\n        if len(s) == 0:\n            return False\n        if s[0] == '+' or s[0] == '-':\n            s = s[1:]\n        if len(s) == 0:\n            return False\n        if s[0] == '+' or s[0] == '-"
    },
    {
        "number": 65,
        "title": "Valid Number",
        "difficulty": 2,
        "pass": 5,
        "answer": "        if len(s) == 0:\n            return False\n        s = s.strip()\n        if len(s) == 0:\n            return False\n        if s[0] == '+' or s[0] == '-':\n            s = s[1:]\n        if len(s) == 0:\n            return False\n        if s[0] == '+' or s[0] == '-':\n            s = s[1:]\n        if len(s) == 0:\n            return False\n        if s[0] == '+' or s[0] == '-':\n            s = s[1:]\n        if len(s) == 0:\n            return False\n        if s[0] == '+' or s[0] == '-':\n            s = s[1:]\n        if len(s) == 0:\n            return False\n        if s[0] == '+' or s[0] == '-':\n            s = s[1:]\n        if len(s) == 0:\n            return False\n        if s["
    },
    {
        "number": 65,
        "title": "Valid Number",
        "difficulty": 2,
        "pass": 6,
        "answer": "        s = s.strip()\n        if not s:\n            return False\n        if s[0] == '+' or s[0] == '-':\n            s = s[1:]\n        if not s:\n            return False\n        if s[0] == '.':\n            s = s[1:]\n        if not s:\n            return False\n        if s[0] == 'e' or s[0] == 'E':\n            s = s[1:]\n        if not s:\n            return False\n        if s[0] == '+' or s[0] == '-':\n            s = s[1:]\n        if not s:\n            return False\n        if s[0] == '.':\n            s = s[1:]\n        if not s:\n            return False\n        if s[0] == 'e' or s[0] == 'E':\n            s = s[1:]\n        if not s:\n            return False\n        if s[0] == '+' or s[0] == '-':\n            s"
    },
    {
        "number": 66,
        "title": "Plus One",
        "difficulty": 0,
        "pass": 0,
        "answer": "        for i in range(len(digits) - 1, -1, -1):\n            if digits[i] < 9:\n                digits[i] += 1\n                return digits\n            else:\n                digits[i] = 0\n        return [1] + digits"
    },
    {
        "number": 66,
        "title": "Plus One",
        "difficulty": 0,
        "pass": 1,
        "answer": "        n = len(digits)\n        for i in range(n - 1, -1, -1):\n            if digits[i] == 9:\n                digits[i] = 0\n            else:\n                digits[i] += 1\n                return digits\n        return [1] + digits"
    },
    {
        "number": 66,
        "title": "Plus One",
        "difficulty": 0,
        "pass": 2,
        "answer": "        for i in range(len(digits) - 1, -1, -1):\n            if digits[i] == 9:\n                digits[i] = 0\n            else:\n                digits[i] += 1\n                return digits\n        return [1] + digits"
    },
    {
        "number": 66,
        "title": "Plus One",
        "difficulty": 0,
        "pass": 3,
        "answer": "        for i in range(len(digits)-1, -1, -1):\n            if digits[i] == 9:\n                digits[i] = 0\n            else:\n                digits[i] += 1\n                return digits\n        return [1] + digits"
    },
    {
        "number": 66,
        "title": "Plus One",
        "difficulty": 0,
        "pass": 4,
        "answer": "        for i in range(len(digits) - 1, -1, -1):\n            if digits[i] == 9:\n                digits[i] = 0\n            else:\n                digits[i] += 1\n                return digits\n        return [1] + digits\n"
    },
    {
        "number": 66,
        "title": "Plus One",
        "difficulty": 0,
        "pass": 5,
        "answer": "        for i in range(len(digits) - 1, -1, -1):\n            if digits[i] < 9:\n                digits[i] += 1\n                return digits\n            else:\n                digits[i] = 0\n        return [1] + digits\n"
    },
    {
        "number": 66,
        "title": "Plus One",
        "difficulty": 0,
        "pass": 6,
        "answer": "        for i in range(len(digits) - 1, -1, -1):\n            if digits[i] == 9:\n                digits[i] = 0\n            else:\n                digits[i] += 1\n                return digits\n        return [1] + digits"
    },
    {
        "number": 66,
        "title": "Plus One",
        "difficulty": 0,
        "pass": 7,
        "answer": "        n = len(digits)\n        for i in range(n-1, -1, -1):\n            if digits[i] == 9:\n                digits[i] = 0\n            else:\n                digits[i] += 1\n                return digits\n        digits.insert(0, 1)\n        return digits\n"
    },
    {
        "number": 66,
        "title": "Plus One",
        "difficulty": 0,
        "pass": 8,
        "answer": "        n = len(digits)\n        for i in range(n - 1, -1, -1):\n            if digits[i] == 9:\n                digits[i] = 0\n            else:\n                digits[i] += 1\n                return digits\n        return [1] + digits"
    },
    {
        "number": 66,
        "title": "Plus One",
        "difficulty": 0,
        "pass": 9,
        "answer": "        for i in range(len(digits) - 1, -1, -1):\n            if digits[i] < 9:\n                digits[i] += 1\n                return digits\n            else:\n                digits[i] = 0\n        return [1] + digits\n"
    },
    {
        "number": 67,
        "title": "Add Binary",
        "difficulty": 0,
        "pass": 0,
        "answer": "        return bin(int(a, 2) + int(b, 2))[2:]"
    },
    {
        "number": 67,
        "title": "Add Binary",
        "difficulty": 0,
        "pass": 1,
        "answer": "        return str(bin(int(a, 2) + int(b, 2)))[2:]"
    },
    {
        "number": 67,
        "title": "Add Binary",
        "difficulty": 0,
        "pass": 2,
        "answer": "        n = max(len(a), len(b))\n        a = a.zfill(n)\n        b = b.zfill(n)\n        carry = 0\n        res = []\n        for i in range(n - 1, -1, -1):\n            if a[i] == '1':\n                if b[i] == '1':\n                    res.append('1')\n                    carry = 1\n                else:\n                    res.append('0')\n            else:\n                if b[i] == '1':\n                    res.append('0')\n                    carry = 1\n                else:\n                    res.append('1')\n        if carry == 1:\n            res.append('1')\n        res.reverse()\n        return ''.join(res)"
    },
    {
        "number": 67,
        "title": "Add Binary",
        "difficulty": 0,
        "pass": 3,
        "answer": "        return bin(int(a, 2) + int(b, 2))[2:]"
    },
    {
        "number": 67,
        "title": "Add Binary",
        "difficulty": 0,
        "pass": 4,
        "answer": "        if len(a) == 0:\n            return b\n        if len(b) == 0:\n            return a\n        if len(a) > len(b):\n            b = '0' * (len(a) - len(b)) + b\n        else:\n            a = '0' * (len(b) - len(a)) + a\n        result = ''\n        carry = 0\n        for i in range(len(a) - 1, -1, -1):\n            if a[i] == '1' and b[i] == '1':\n                if carry == 1:\n                    result = '1' + result\n                else:\n                    result = '0' + result\n                carry = 1\n            elif a[i] == '0' and b[i] == '0':\n                if carry == 1:\n                    result = '1' + result\n                else:\n                    result = '0' + result\n                carry = 0\n            else:\n                if carry == 1:\n                    result = '0' + result\n                else:\n                    result ="
    },
    {
        "number": 67,
        "title": "Add Binary",
        "difficulty": 0,
        "pass": 5,
        "answer": "        if len(a) == 0:\n            return b\n        if len(b) == 0:\n            return a\n        if a[-1] == '1' and b[-1] == '1':\n            return self.addBinary(self.addBinary(a[:-1], b[:-1]), '1') + '0'\n        if a[-1] == '0' and b[-1] == '0':\n            return self.addBinary(a[:-1], b[:-1]) + '0'\n        if a[-1] == '0' and b[-1] == '1':\n            return self.addBinary(a[:-1], b) + '0'\n        if a[-1] == '1' and b[-1] == '0':\n            return self.addBinary(a, b[:-1]) + '0'\n        if a[-1] == '1' and b[-1] == '1':\n            return self.addBinary(a[:-1], b[:-1"
    },
    {
        "number": 67,
        "title": "Add Binary",
        "difficulty": 0,
        "pass": 6,
        "answer": "        n = max(len(a), len(b))\n        a = a.zfill(n)\n        b = b.zfill(n)\n        carry = 0\n        res = []\n        for i in range(n - 1, -1, -1):\n            if a[i] == '1':\n                if b[i] == '1':\n                    res.append('1')\n                    carry = 1\n                else:\n                    res.append('0')\n            else:\n                if b[i] == '1':\n                    res.append('0')\n                    carry = 1\n                else:\n                    res.append('1')\n        if carry == 1:\n            res.append('1')\n        res.reverse()\n        return ''.join(res)"
    },
    {
        "number": 67,
        "title": "Add Binary",
        "difficulty": 0,
        "pass": 7,
        "answer": "        n, m = len(a), len(b)\n        if n < m:\n            a, b = b, a\n            n, m = m, n\n        res = []\n        carry = 0\n        for i in range(m - 1, -1, -1):\n            tmp = carry\n            tmp += 1 if a[n - 1 - i] == '1' else 0\n            tmp += 1 if b[m - 1 - i] == '1' else 0\n            res.append(str(tmp % 2))\n            carry = tmp // 2\n        if carry:\n            res.append(str(carry))\n        return ''.join(res[::-1])"
    },
    {
        "number": 67,
        "title": "Add Binary",
        "difficulty": 0,
        "pass": 8,
        "answer": "        n = max(len(a), len(b))\n        a, b = a.zfill(n), b.zfill(n)\n        carry = 0\n        res = []\n        for i in range(n - 1, -1, -1):\n            if a[i] == '1':\n                carry += 1\n            if b[i] == '1':\n                carry += 1\n            if carry % 2 == 1:\n                res.append('1')\n            else:\n                res.append('0')\n            carry //= 2\n        if carry == 1:\n            res.append('1')\n        return ''.join(res[::-1])"
    },
    {
        "number": 67,
        "title": "Add Binary",
        "difficulty": 0,
        "pass": 9,
        "answer": "        n = max(len(a), len(b))\n        a, b = a.zfill(n), b.zfill(n)\n        carry = 0\n        res = ''\n        for i in range(n - 1, -1, -1):\n            if a[i] == '1':\n                carry += 1\n            if b[i] == '1':\n                carry += 1\n            if carry % 2 == 1:\n                res = '1' + res\n            else:\n                res = '0' + res\n            carry //= 2\n        if carry == 1:\n            res = '1' + res\n        return res"
    },
    {
        "number": 68,
        "title": "Text Justification",
        "difficulty": 2,
        "pass": 0,
        "answer": "        n = len(words)\n        res = []\n        i = 0\n        while i < n:\n            line = []\n            line_len = 0\n            while i < n and line_len + 1 + len(words[i]) <= maxWidth:\n                line.append(words[i])\n                line_len += 1 + len(words[i])\n                i += 1\n            if i < n:\n                line.append(''* (maxWidth - line_len))\n            res.append(''.join(line))\n        return res"
    },
    {
        "number": 68,
        "title": "Text Justification",
        "difficulty": 2,
        "pass": 1,
        "answer": "        n = len(words)\n        res = []\n        i = 0\n        while i < n:\n            line = []\n            j = i\n            while j < n and len(''.join(line + [words[j]])) <= maxWidth:\n                line.append(words[j])\n                j += 1\n            res.append(' '.join(line) +'' * (maxWidth - len(''.join(line))))\n            i = j\n        return res"
    },
    {
        "number": 68,
        "title": "Text Justification",
        "difficulty": 2,
        "pass": 2,
        "answer": "        n = len(words)\n        res = []\n        i = 0\n        while i < n:\n            line = []\n            line_len = 0\n            while i < n and line_len + len(words[i]) <= maxWidth:\n                line.append(words[i])\n                line_len += len(words[i])\n                i += 1\n            if i < n:\n                line.append(''* (maxWidth - line_len))\n            res.append(''.join(line))\n        return res"
    },
    {
        "number": 68,
        "title": "Text Justification",
        "difficulty": 2,
        "pass": 3,
        "answer": "        if not words:\n            return []\n        if len(words) == 1:\n            return [words[0] +'' * (maxWidth - len(words[0]))]\n        res = []\n        curr_line = []\n        curr_len = 0\n        for word in words:\n            if curr_len + len(word) + len(curr_line) > maxWidth:\n                res.append(' '.join(curr_line))\n                curr_line = [word]\n                curr_len = len(word)\n            else:\n                curr_line.append(word)\n                curr_len += len(word)\n        if curr_line:\n            res.append(' '.join(curr_line))\n        return res"
    },
    {
        "number": 68,
        "title": "Text Justification",
        "difficulty": 2,
        "pass": 4,
        "answer": "        res = []\n        n = len(words)\n        i = 0\n        while i < n:\n            line = []\n            while i < n and len(''.join(line + [words[i]])) <= maxWidth:\n                line.append(words[i])\n                i += 1\n            if len(''.join(line)) > maxWidth:\n                line[-1] = line[-1] +'' * (maxWidth - len(''.join(line)))\n            res.append(' '.join(line))\n        return res"
    },
    {
        "number": 68,
        "title": "Text Justification",
        "difficulty": 2,
        "pass": 5,
        "answer": "        if not words:\n            return []"
    },
    {
        "number": 68,
        "title": "Text Justification",
        "difficulty": 2,
        "pass": 6,
        "answer": "        res = []\n        n = len(words)\n        i = 0\n        while i < n:\n            line = []\n            line_len = 0\n            while i < n and line_len + len(words[i]) <= maxWidth:\n                line.append(words[i])\n                line_len += len(words[i])\n                i += 1\n            while i < n and line_len + 1 + len(words[i]) <= maxWidth:\n                line.append(' ')\n                line.append(words[i])\n                line_len += 1 + len(words[i])\n                i += 1\n            res.append(''.join(line))\n        return res"
    },
    {
        "number": 68,
        "title": "Text Justification",
        "difficulty": 2,
        "pass": 7,
        "answer": "        res = []\n        n = len(words)\n        i = 0\n        while i < n:\n            cur_len = 0\n            cur_line = []\n            while i < n and cur_len + len(words[i]) <= maxWidth:\n                cur_len += len(words[i]) + 1\n                cur_line.append(words[i])\n                i += 1\n            if i < n:\n                num_spaces = maxWidth - cur_len\n                if num_spaces % (len(cur_line) - 1) == 0:\n                    spaces = num_spaces // (len(cur_line) - 1)\n                else:\n                    spaces = num_spaces // (len(cur_line) - 1) + 1\n                for j in range(len(cur_line) - 1):\n                    cur_line[j] +='' * spaces\n                    cur_line[j + 1] +='' * (spaces + 1)\n            res.append(''.join(cur_line))\n        return res"
    },
    {
        "number": 68,
        "title": "Text Justification",
        "difficulty": 2,
        "pass": 8,
        "answer": "        if not words:\n            return []\n        n = len(words)\n        res = []\n        i = 0\n        while i < n:\n            cur_line = []\n            cur_len = 0\n            while i < n and cur_len + len(words[i]) <= maxWidth:\n                cur_line.append(words[i])\n                cur_len += len(words[i]) + 1\n                i += 1\n            if i < n:\n                cur_line.append(''* (maxWidth - cur_len))\n            res.append(''.join(cur_line))\n        return res"
    },
    {
        "number": 68,
        "title": "Text Justification",
        "difficulty": 2,
        "pass": 9,
        "answer": "        n = len(words)\n        res = []\n        i = 0\n        while i < n:\n            line = []\n            line_len = 0\n            while i < n and line_len + len(words[i]) <= maxWidth:\n                line.append(words[i])\n                line_len += len(words[i])\n                i += 1\n            if i < n:\n                line_len += (maxWidth - line_len) // (i - i + 1) * (i - i + 1)\n                line_len += (maxWidth - line_len) % (i - i + 1)\n            line =''.join(line)\n            res.append(line)\n        return res"
    },
    {
        "number": 69,
        "title": "Sqrt(x)",
        "difficulty": 0,
        "pass": 0,
        "answer": "        if x == 0:\n            return 0\n        left, right = 1, x\n        while left <= right:\n            mid = (left + right) // 2\n            if mid * mid <= x < (mid + 1) * (mid + 1):\n                return mid\n            elif mid * mid > x:\n                right = mid - 1\n            else:\n                left = mid + 1"
    },
    {
        "number": 69,
        "title": "Sqrt(x)",
        "difficulty": 0,
        "pass": 1,
        "answer": "        if x == 0:\n            return 0\n        left, right = 1, x\n        while left <= right:\n            mid = (left + right) // 2\n            if mid * mid <= x < (mid + 1) * (mid + 1):\n                return mid\n            elif mid * mid > x:\n                right = mid - 1\n            else:\n                left = mid + 1"
    },
    {
        "number": 69,
        "title": "Sqrt(x)",
        "difficulty": 0,
        "pass": 2,
        "answer": "        if x == 0:\n            return 0\n        left, right = 1, x\n        while left <= right:\n            mid = (left + right) // 2\n            if mid * mid <= x < (mid + 1) * (mid + 1):\n                return mid\n            elif mid * mid > x:\n                right = mid - 1\n            else:\n                left = mid + 1"
    },
    {
        "number": 69,
        "title": "Sqrt(x)",
        "difficulty": 0,
        "pass": 3,
        "answer": "        if x == 0:\n            return 0\n        left, right = 1, x\n        while left <= right:\n            mid = (left + right) // 2\n            if mid * mid == x:\n                return mid\n            elif mid * mid > x:\n                right = mid - 1\n            else:\n                left = mid + 1\n        return left - 1"
    },
    {
        "number": 69,
        "title": "Sqrt(x)",
        "difficulty": 0,
        "pass": 4,
        "answer": "        if x == 0:\n            return 0\n        left, right = 1, x\n        while left <= right:\n            mid = (left + right) // 2\n            if mid * mid <= x < (mid + 1) * (mid + 1):\n                return mid\n            elif mid * mid > x:\n                right = mid - 1\n            else:\n                left = mid + 1"
    },
    {
        "number": 69,
        "title": "Sqrt(x)",
        "difficulty": 0,
        "pass": 5,
        "answer": "        if x == 0:\n            return 0\n        left, right = 1, x\n        while left <= right:\n            mid = (left + right) // 2\n            if mid * mid <= x < (mid + 1) * (mid + 1):\n                return mid\n            elif mid * mid > x:\n                right = mid - 1\n            else:\n                left = mid + 1"
    },
    {
        "number": 69,
        "title": "Sqrt(x)",
        "difficulty": 0,
        "pass": 6,
        "answer": "        if x == 0:\n            return 0\n        left, right = 1, x\n        while left <= right:\n            mid = (left + right) // 2\n            if mid * mid <= x < (mid + 1) * (mid + 1):\n                return mid\n            elif mid * mid > x:\n                right = mid - 1\n            else:\n                left = mid + 1"
    },
    {
        "number": 69,
        "title": "Sqrt(x)",
        "difficulty": 0,
        "pass": 7,
        "answer": "        left, right = 0, x\n        while left <= right:\n            mid = left + (right - left) // 2\n            if mid * mid <= x < (mid + 1) * (mid + 1):\n                return mid\n            elif mid * mid > x:\n                right = mid - 1\n            else:\n                left = mid + 1"
    },
    {
        "number": 69,
        "title": "Sqrt(x)",
        "difficulty": 0,
        "pass": 8,
        "answer": "        if x == 0:\n            return 0\n        left, right = 1, x\n        while left <= right:\n            mid = left + (right - left) // 2\n            if mid * mid <= x < (mid + 1) * (mid + 1):\n                return mid\n            elif mid * mid > x:\n                right = mid - 1\n            else:\n                left = mid + 1"
    },
    {
        "number": 69,
        "title": "Sqrt(x)",
        "difficulty": 0,
        "pass": 9,
        "answer": "        if x == 0:\n            return 0\n        if x == 1:\n            return 1\n        if x == 2:\n            return 1\n        if x == 3:\n            return 1\n        if x == 4:\n            return 2\n        if x == 5:\n            return 2\n        if x == 6:\n            return 2\n        if x == 7:\n            return 2\n        if x == 8:\n            return 2\n        if x == 9:\n            return 2\n        if x == 10:\n            return 3\n        if x == 11:\n            return 3\n        if x == 12:\n            return 3\n        if x == 13:\n            return 3\n        if x == 14:\n            return 3\n        if x == 15:\n            return 3\n        if x == 16:\n            return 3\n        if x == 17:\n            return 3\n        if x == 18:\n            return 3\n        if x == 19:\n            return 3\n        if x == 20:\n            return 3\n        if x == 21:\n            return 3\n        if x == 22:\n            "
    },
    {
        "number": 70,
        "title": "Climbing Stairs",
        "difficulty": 0,
        "pass": 0,
        "answer": "        if n == 1:\n            return 1\n        elif n == 2:\n            return 2\n        else:\n            return self.climbStairs(n - 1) + self.climbStairs(n - 2)"
    },
    {
        "number": 70,
        "title": "Climbing Stairs",
        "difficulty": 0,
        "pass": 1,
        "answer": "        if n == 1:\n            return 1\n        if n == 2:\n            return 2\n        dp = [0] * (n + 1)\n        dp[1] = 1\n        dp[2] = 2\n        for i in range(3, n + 1):\n            dp[i] = dp[i - 1] + dp[i - 2]\n        return dp[n]"
    },
    {
        "number": 70,
        "title": "Climbing Stairs",
        "difficulty": 0,
        "pass": 2,
        "answer": "        if n == 1:\n            return 1\n        if n == 2:\n            return 2\n        dp = [0] * (n + 1)\n        dp[1] = 1\n        dp[2] = 2\n        for i in range(3, n + 1):\n            dp[i] = dp[i - 1] + dp[i - 2]\n        return dp[n]"
    },
    {
        "number": 70,
        "title": "Climbing Stairs",
        "difficulty": 0,
        "pass": 3,
        "answer": "        if n == 1:\n            return 1\n        if n == 2:\n            return 2\n        dp = [0] * (n + 1)\n        dp[1] = 1\n        dp[2] = 2\n        for i in range(3, n + 1):\n            dp[i] = dp[i - 1] + dp[i - 2]\n        return dp[n]"
    },
    {
        "number": 70,
        "title": "Climbing Stairs",
        "difficulty": 0,
        "pass": 4,
        "answer": "        if n == 1:\n            return 1\n        elif n == 2:\n            return 2\n        else:\n            return self.climbStairs(n - 1) + self.climbStairs(n - 2)"
    },
    {
        "number": 70,
        "title": "Climbing Stairs",
        "difficulty": 0,
        "pass": 5,
        "answer": "        if n == 1:\n            return 1\n        if n == 2:\n            return 2\n        dp = [0] * (n + 1)\n        dp[1] = 1\n        dp[2] = 2\n        for i in range(3, n + 1):\n            dp[i] = dp[i - 1] + dp[i - 2]\n        return dp[n]"
    },
    {
        "number": 70,
        "title": "Climbing Stairs",
        "difficulty": 0,
        "pass": 6,
        "answer": "        if n == 1:\n            return 1\n        if n == 2:\n            return 2\n        dp = [0] * (n + 1)\n        dp[1] = 1\n        dp[2] = 2\n        for i in range(3, n + 1):\n            dp[i] = dp[i - 1] + dp[i - 2]\n        return dp[n]"
    },
    {
        "number": 70,
        "title": "Climbing Stairs",
        "difficulty": 0,
        "pass": 7,
        "answer": "        if n == 1:\n            return 1\n        if n == 2:\n            return 2\n        dp = [0] * (n + 1)\n        dp[1] = 1\n        dp[2] = 2\n        for i in range(3, n + 1):\n            dp[i] = dp[i - 1] + dp[i - 2]\n        return dp[n]"
    },
    {
        "number": 70,
        "title": "Climbing Stairs",
        "difficulty": 0,
        "pass": 8,
        "answer": "        if n == 1:\n            return 1\n        if n == 2:\n            return 2\n        return self.climbStairs(n - 1) + self.climbStairs(n - 2)"
    },
    {
        "number": 70,
        "title": "Climbing Stairs",
        "difficulty": 0,
        "pass": 9,
        "answer": "        if n == 1:\n            return 1\n        if n == 2:\n            return 2\n        dp = [0] * (n + 1)\n        dp[1] = 1\n        dp[2] = 2\n        for i in range(3, n + 1):\n            dp[i] = dp[i - 1] + dp[i - 2]\n        return dp[n]"
    },
    {
        "number": 71,
        "title": "Simplify Path",
        "difficulty": 1,
        "pass": 0,
        "answer": "        stack = []\n        for p in path.split('/'):\n            if p == '..':\n                if stack:\n                    stack.pop()\n            elif p and p!= '.':\n                stack.append(p)\n        return '/' + '/'.join(stack)"
    },
    {
        "number": 71,
        "title": "Simplify Path",
        "difficulty": 1,
        "pass": 1,
        "answer": "        stack = []\n        path = path.split('/')\n        for p in path:\n            if p == '..':\n                if stack:\n                    stack.pop()\n            elif p!= '.' and p!= '':\n                stack.append(p)\n        return '/' + '/'.join(stack)"
    },
    {
        "number": 71,
        "title": "Simplify Path",
        "difficulty": 1,
        "pass": 2,
        "answer": "        stack = []\n        for p in path.split('/'):\n            if not p or p == '.':\n                continue\n            elif p == '..':\n                if stack:\n                    stack.pop()\n            else:\n                stack.append(p)\n        return '/' + '/'.join(stack)"
    },
    {
        "number": 71,
        "title": "Simplify Path",
        "difficulty": 1,
        "pass": 3,
        "answer": "        stack = []\n        for p in path.split('/'):\n            if not p or p == '.':\n                continue\n            elif p == '..':\n                if stack:\n                    stack.pop()\n            else:\n                stack.append(p)\n        return '/' + '/'.join(stack)"
    },
    {
        "number": 71,
        "title": "Simplify Path",
        "difficulty": 1,
        "pass": 4,
        "answer": "        stack = []\n        for p in path.split('/'):\n            if not p or p == '.':\n                continue\n            elif p == '..':\n                if stack:\n                    stack.pop()\n            else:\n                stack.append(p)\n        return '/' + '/'.join(stack)"
    },
    {
        "number": 71,
        "title": "Simplify Path",
        "difficulty": 1,
        "pass": 5,
        "answer": "        stack = []\n        path = path.split('/')\n        for p in path:\n            if p == '..':\n                if stack:\n                    stack.pop()\n            elif p!= '.' and p!= '':\n                stack.append(p)\n        return '/' + '/'.join(stack)"
    },
    {
        "number": 71,
        "title": "Simplify Path",
        "difficulty": 1,
        "pass": 6,
        "answer": "        stack = []\n        for p in path.split('/'):\n            if p == '..':\n                if stack:\n                    stack.pop()\n            elif p and p!= '.':\n                stack.append(p)\n        return '/' + '/'.join(stack)"
    },
    {
        "number": 71,
        "title": "Simplify Path",
        "difficulty": 1,
        "pass": 7,
        "answer": "        stack = []\n        for p in path.split('/'):\n            if not p or p == '.':\n                continue\n            elif p == '..':\n                if stack:\n                    stack.pop()\n            else:\n                stack.append(p)\n        return '/' + '/'.join(stack)"
    },
    {
        "number": 71,
        "title": "Simplify Path",
        "difficulty": 1,
        "pass": 8,
        "answer": "        stack = []\n        for item in path.split('/'):\n            if item == '..':\n                if stack:\n                    stack.pop()\n            elif item and item!= '.':\n                stack.append(item)\n        return '/' + '/'.join(stack)"
    },
    {
        "number": 71,
        "title": "Simplify Path",
        "difficulty": 1,
        "pass": 9,
        "answer": "        stack = []\n        for p in path.split('/'):\n            if not p or p == '.':\n                continue\n            elif p == '..':\n                if stack:\n                    stack.pop()\n            else:\n                stack.append(p)\n        return '/' + '/'.join(stack)"
    },
    {
        "number": 72,
        "title": "Edit Distance",
        "difficulty": 2,
        "pass": 0,
        "answer": "        m, n = len(word1), len(word2)\n        dp = [[0] * (n + 1) for _ in range(m + 1)]\n        for i in range(m + 1):\n            dp[i][0] = i\n        for j in range(n + 1):\n            dp[0][j] = j\n        for i in range(1, m + 1):\n            for j in range(1, n + 1):\n                if word1[i - 1] == word2[j - 1]:\n                    dp[i][j] = dp[i - 1][j - 1]\n                else:\n                    dp[i][j] = min(dp[i - 1][j - 1], dp[i - 1][j], dp[i][j - 1]) + 1\n        return dp[-1][-1]"
    },
    {
        "number": 72,
        "title": "Edit Distance",
        "difficulty": 2,
        "pass": 1,
        "answer": "        m, n = len(word1), len(word2)\n        dp = [[0] * (n + 1) for _ in range(m + 1)]\n        for i in range(m + 1):\n            dp[i][0] = i\n        for j in range(n + 1):\n            dp[0][j] = j\n        for i in range(1, m + 1):\n            for j in range(1, n + 1):\n                if word1[i - 1] == word2[j - 1]:\n                    dp[i][j] = dp[i - 1][j - 1]\n                else:\n                    dp[i][j] = min(dp[i - 1][j - 1], dp[i - 1][j], dp[i][j - 1]) + 1\n        return dp[-1][-1]"
    },
    {
        "number": 72,
        "title": "Edit Distance",
        "difficulty": 2,
        "pass": 2,
        "answer": "        m, n = len(word1), len(word2)\n        dp = [[0] * (n + 1) for _ in range(m + 1)]\n        for i in range(m + 1):\n            dp[i][0] = i\n        for j in range(n + 1):\n            dp[0][j] = j\n        for i in range(1, m + 1):\n            for j in range(1, n + 1):\n                if word1[i - 1] == word2[j - 1]:\n                    dp[i][j] = dp[i - 1][j - 1]\n                else:\n                    dp[i][j] = min(dp[i - 1][j - 1], dp[i - 1][j], dp[i][j - 1]) + 1\n        return dp[m][n]"
    },
    {
        "number": 72,
        "title": "Edit Distance",
        "difficulty": 2,
        "pass": 3,
        "answer": "        m, n = len(word1), len(word2)\n        dp = [[0] * (n + 1) for _ in range(m + 1)]\n        for i in range(m + 1):\n            dp[i][0] = i\n        for j in range(n + 1):\n            dp[0][j] = j\n        for i in range(1, m + 1):\n            for j in range(1, n + 1):\n                if word1[i - 1] == word2[j - 1]:\n                    dp[i][j] = dp[i - 1][j - 1]\n                else:\n                    dp[i][j] = min(dp[i - 1][j - 1], dp[i - 1][j], dp[i][j - 1]) + 1\n        return dp[-1][-1]"
    },
    {
        "number": 72,
        "title": "Edit Distance",
        "difficulty": 2,
        "pass": 4,
        "answer": "        m, n = len(word1), len(word2)\n        dp = [[0] * (n + 1) for _ in range(m + 1)]\n        for i in range(m + 1):\n            dp[i][0] = i\n        for j in range(n + 1):\n            dp[0][j] = j\n        for i in range(1, m + 1):\n            for j in range(1, n + 1):\n                if word1[i - 1] == word2[j - 1]:\n                    dp[i][j] = dp[i - 1][j - 1]\n                else:\n                    dp[i][j] = min(dp[i - 1][j - 1], dp[i - 1][j], dp[i][j - 1]) + 1\n        return dp[m][n]"
    },
    {
        "number": 72,
        "title": "Edit Distance",
        "difficulty": 2,
        "pass": 5,
        "answer": "        m, n = len(word1), len(word2)\n        dp = [[0] * (n + 1) for _ in range(m + 1)]\n        for i in range(m + 1):\n            dp[i][0] = i\n        for j in range(n + 1):\n            dp[0][j] = j\n        for i in range(1, m + 1):\n            for j in range(1, n + 1):\n                if word1[i - 1] == word2[j - 1]:\n                    dp[i][j] = dp[i - 1][j - 1]\n                else:\n                    dp[i][j] = min(dp[i - 1][j - 1], dp[i - 1][j], dp[i][j - 1]) + 1\n        return dp[m][n]"
    },
    {
        "number": 72,
        "title": "Edit Distance",
        "difficulty": 2,
        "pass": 6,
        "answer": "        m, n = len(word1), len(word2)\n        dp = [[0] * (n + 1) for _ in range(m + 1)]\n        for i in range(m + 1):\n            dp[i][0] = i\n        for j in range(n + 1):\n            dp[0][j] = j\n        for i in range(1, m + 1):\n            for j in range(1, n + 1):\n                if word1[i - 1] == word2[j - 1]:\n                    dp[i][j] = dp[i - 1][j - 1]\n                else:\n                    dp[i][j] = min(dp[i - 1][j - 1], dp[i - 1][j], dp[i][j - 1]) + 1\n        return dp[m][n]"
    },
    {
        "number": 72,
        "title": "Edit Distance",
        "difficulty": 2,
        "pass": 7,
        "answer": "        n, m = len(word1), len(word2)\n        dp = [[0] * (m + 1) for _ in range(n + 1)]\n        for i in range(n + 1):\n            dp[i][0] = i\n        for j in range(m + 1):\n            dp[0][j] = j\n        for i in range(1, n + 1):\n            for j in range(1, m + 1):\n                if word1[i - 1] == word2[j - 1]:\n                    dp[i][j] = dp[i - 1][j - 1]\n                else:\n                    dp[i][j] = min(dp[i - 1][j - 1], dp[i - 1][j], dp[i][j - 1]) + 1\n        return dp[-1][-1]"
    },
    {
        "number": 72,
        "title": "Edit Distance",
        "difficulty": 2,
        "pass": 8,
        "answer": "        m, n = len(word1), len(word2)\n        dp = [[0] * (n + 1) for _ in range(m + 1)]\n        for i in range(m + 1):\n            dp[i][0] = i\n        for j in range(n + 1):\n            dp[0][j] = j\n        for i in range(1, m + 1):\n            for j in range(1, n + 1):\n                if word1[i - 1] == word2[j - 1]:\n                    dp[i][j] = dp[i - 1][j - 1]\n                else:\n                    dp[i][j] = min(dp[i - 1][j - 1], dp[i - 1][j], dp[i][j - 1]) + 1\n        return dp[-1][-1]"
    },
    {
        "number": 72,
        "title": "Edit Distance",
        "difficulty": 2,
        "pass": 9,
        "answer": "        m, n = len(word1), len(word2)\n        dp = [[0] * (n + 1) for _ in range(m + 1)]\n        for i in range(m + 1):\n            dp[i][0] = i\n        for j in range(n + 1):\n            dp[0][j] = j\n        for i in range(1, m + 1):\n            for j in range(1, n + 1):\n                if word1[i - 1] == word2[j - 1]:\n                    dp[i][j] = dp[i - 1][j - 1]\n                else:\n                    dp[i][j] = min(dp[i - 1][j - 1], dp[i - 1][j], dp[i][j - 1]) + 1\n        return dp[-1][-1]"
    },
    {
        "number": 73,
        "title": "Set Matrix Zeroes",
        "difficulty": 1,
        "pass": 0,
        "answer": "        m, n = len(matrix), len(matrix[0])\n        rows, cols = set(), set()\n        for i in range(m):\n            for j in range(n):\n                if matrix[i][j] == 0:\n                    rows.add(i)\n                    cols.add(j)\n        for i in range(m):\n            for j in range(n):\n                if i in rows or j in cols:\n                    matrix[i][j] = 0\n"
    },
    {
        "number": 73,
        "title": "Set Matrix Zeroes",
        "difficulty": 1,
        "pass": 1,
        "answer": "        m, n = len(matrix), len(matrix[0])\n        rows, cols = set(), set()\n        for i in range(m):\n            for j in range(n):\n                if matrix[i][j] == 0:\n                    rows.add(i)\n                    cols.add(j)\n        for i in rows:\n            for j in range(n):\n                matrix[i][j] = 0\n        for j in cols:\n            for i in range(m):\n                matrix[i][j] = 0"
    },
    {
        "number": 73,
        "title": "Set Matrix Zeroes",
        "difficulty": 1,
        "pass": 2,
        "answer": "        if not matrix or not matrix[0]:\n            return\n        m, n = len(matrix), len(matrix[0])\n        rows, cols = set(), set()\n        for i in range(m):\n            for j in range(n):\n                if matrix[i][j] == 0:\n                    rows.add(i)\n                    cols.add(j)\n        for i in rows:\n            for j in range(n):\n                matrix[i][j] = 0\n        for j in cols:\n            for i in range(m):\n                matrix[i][j] = 0"
    },
    {
        "number": 73,
        "title": "Set Matrix Zeroes",
        "difficulty": 1,
        "pass": 3,
        "answer": "        m, n = len(matrix), len(matrix[0])\n        rows, cols = set(), set()\n        for i in range(m):\n            for j in range(n):\n                if matrix[i][j] == 0:\n                    rows.add(i)\n                    cols.add(j)\n        for i in range(m):\n            for j in range(n):\n                if i in rows or j in cols:\n                    matrix[i][j] = 0\n"
    },
    {
        "number": 73,
        "title": "Set Matrix Zeroes",
        "difficulty": 1,
        "pass": 4,
        "answer": "        m, n = len(matrix), len(matrix[0])\n        rows, cols = set(), set()\n        for i in range(m):\n            for j in range(n):\n                if matrix[i][j] == 0:\n                    rows.add(i)\n                    cols.add(j)\n        for i in rows:\n            for j in range(n):\n                matrix[i][j] = 0\n        for j in cols:\n            for i in range(m):\n                matrix[i][j] = 0"
    },
    {
        "number": 73,
        "title": "Set Matrix Zeroes",
        "difficulty": 1,
        "pass": 5,
        "answer": "        m, n = len(matrix), len(matrix[0])\n        rows, cols = set(), set()\n        for i in range(m):\n            for j in range(n):\n                if matrix[i][j] == 0:\n                    rows.add(i)\n                    cols.add(j)\n        for i in range(m):\n            for j in range(n):\n                if i in rows or j in cols:\n                    matrix[i][j] = 0"
    },
    {
        "number": 73,
        "title": "Set Matrix Zeroes",
        "difficulty": 1,
        "pass": 6,
        "answer": "        if not matrix:\n            return\n        m = len(matrix)\n        n = len(matrix[0])\n        rows = [False] * m\n        cols = [False] * n\n        for i in range(m):\n            for j in range(n):\n                if matrix[i][j] == 0:\n                    rows[i] = True\n                    cols[j] = True\n        for i in range(m):\n            for j in range(n):\n                if rows[i] or cols[j]:\n                    matrix[i][j] = 0"
    },
    {
        "number": 73,
        "title": "Set Matrix Zeroes",
        "difficulty": 1,
        "pass": 7,
        "answer": "        m, n = len(matrix), len(matrix[0])\n        rows, cols = set(), set()\n        for i in range(m):\n            for j in range(n):\n                if matrix[i][j] == 0:\n                    rows.add(i)\n                    cols.add(j)\n        for i in range(m):\n            for j in range(n):\n                if i in rows or j in cols:\n                    matrix[i][j] = 0"
    },
    {
        "number": 73,
        "title": "Set Matrix Zeroes",
        "difficulty": 1,
        "pass": 8,
        "answer": "        m, n = len(matrix), len(matrix[0])\n        rows, cols = set(), set()\n        for i in range(m):\n            for j in range(n):\n                if matrix[i][j] == 0:\n                    rows.add(i)\n                    cols.add(j)\n        for i in rows:\n            for j in range(n):\n                matrix[i][j] = 0\n        for j in cols:\n            for i in range(m):\n                matrix[i][j] = 0"
    },
    {
        "number": 73,
        "title": "Set Matrix Zeroes",
        "difficulty": 1,
        "pass": 9,
        "answer": "        m, n = len(matrix), len(matrix[0])\n        rows, cols = set(), set()\n        for i in range(m):\n            for j in range(n):\n                if matrix[i][j] == 0:\n                    rows.add(i)\n                    cols.add(j)\n        for i in range(m):\n            for j in range(n):\n                if i in rows or j in cols:\n                    matrix[i][j] = 0"
    },
    {
        "number": 74,
        "title": "Search a 2D Matrix",
        "difficulty": 1,
        "pass": 0,
        "answer": "        if not matrix:\n            return False\n        m, n = len(matrix), len(matrix[0])\n        left, right = 0, m * n - 1\n        while left <= right:\n            mid = (left + right) // 2\n            mid_val = matrix[mid // n][mid % n]\n            if target == mid_val:\n                return True\n            elif target < mid_val:\n                right = mid - 1\n            else:\n                left = mid + 1\n        return False"
    },
    {
        "number": 74,
        "title": "Search a 2D Matrix",
        "difficulty": 1,
        "pass": 1,
        "answer": "        if not matrix:\n            return False\n        m, n = len(matrix), len(matrix[0])\n        left, right = 0, m * n - 1\n        while left <= right:\n            mid = (left + right) // 2\n            row, col = mid // n, mid % n\n            if matrix[row][col] == target:\n                return True\n            elif matrix[row][col] < target:\n                left = mid + 1\n            else:\n                right = mid - 1\n        return False"
    },
    {
        "number": 74,
        "title": "Search a 2D Matrix",
        "difficulty": 1,
        "pass": 2,
        "answer": "        if not matrix or not matrix[0]:\n            return False\n        m, n = len(matrix), len(matrix[0])\n        left, right = 0, m * n - 1\n        while left <= right:\n            mid = (left + right) // 2\n            row, col = mid // n, mid % n\n            if matrix[row][col] == target:\n                return True\n            elif matrix[row][col] < target:\n                left = mid + 1\n            else:\n                right = mid - 1\n        return False"
    },
    {
        "number": 74,
        "title": "Search a 2D Matrix",
        "difficulty": 1,
        "pass": 3,
        "answer": "        if not matrix or not matrix[0]:\n            return False\n        m, n = len(matrix), len(matrix[0])\n        left, right = 0, m * n - 1\n        while left <= right:\n            mid = (left + right) // 2\n            row, col = mid // n, mid % n\n            if matrix[row][col] == target:\n                return True\n            elif matrix[row][col] < target:\n                left = mid + 1\n            else:\n                right = mid - 1\n        return False"
    },
    {
        "number": 74,
        "title": "Search a 2D Matrix",
        "difficulty": 1,
        "pass": 4,
        "answer": "        m, n = len(matrix), len(matrix[0])\n        left, right = 0, m * n - 1\n        while left <= right:\n            mid = (left + right) // 2\n            row, col = mid // n, mid % n\n            if matrix[row][col] == target:\n                return True\n            elif matrix[row][col] < target:\n                left = mid + 1\n            else:\n                right = mid - 1\n        return False"
    },
    {
        "number": 74,
        "title": "Search a 2D Matrix",
        "difficulty": 1,
        "pass": 5,
        "answer": "        if not matrix or not matrix[0]:\n            return False\n        row, col = 0, len(matrix[0]) - 1\n        while row < len(matrix) and col >= 0:\n            if matrix[row][col] == target:\n                return True\n            elif matrix[row][col] < target:\n                row += 1\n            else:\n                col -= 1\n        return False"
    },
    {
        "number": 74,
        "title": "Search a 2D Matrix",
        "difficulty": 1,
        "pass": 6,
        "answer": "        if not matrix or not matrix[0]:\n            return False\n        m, n = len(matrix), len(matrix[0])\n        left, right = 0, m * n - 1\n        while left <= right:\n            mid = (left + right) // 2\n            row, col = mid // n, mid % n\n            if matrix[row][col] == target:\n                return True\n            elif matrix[row][col] < target:\n                left = mid + 1\n            else:\n                right = mid - 1\n        return False"
    },
    {
        "number": 74,
        "title": "Search a 2D Matrix",
        "difficulty": 1,
        "pass": 7,
        "answer": "        if not matrix or not matrix[0]:\n            return False\n        m, n = len(matrix), len(matrix[0])\n        left, right = 0, m * n - 1\n        while left <= right:\n            mid = (left + right) // 2\n            row, col = mid // n, mid % n\n            if matrix[row][col] == target:\n                return True\n            elif matrix[row][col] < target:\n                left = mid + 1\n            else:\n                right = mid - 1\n        return False"
    },
    {
        "number": 74,
        "title": "Search a 2D Matrix",
        "difficulty": 1,
        "pass": 8,
        "answer": "        if not matrix or not matrix[0]:\n            return False\n        m, n = len(matrix), len(matrix[0])\n        left, right = 0, m * n - 1\n        while left <= right:\n            mid = (left + right) // 2\n            row, col = mid // n, mid % n\n            if matrix[row][col] == target:\n                return True\n            elif matrix[row][col] < target:\n                left = mid + 1\n            else:\n                right = mid - 1\n        return False"
    },
    {
        "number": 74,
        "title": "Search a 2D Matrix",
        "difficulty": 1,
        "pass": 9,
        "answer": "        if not matrix or not matrix[0]:\n            return False\n        rows, cols = len(matrix), len(matrix[0])\n        left, right = 0, rows * cols - 1\n        while left <= right:\n            mid = (left + right) // 2\n            row, col = mid // cols, mid % cols\n            if matrix[row][col] == target:\n                return True\n            elif matrix[row][col] < target:\n                left = mid + 1\n            else:\n                right = mid - 1\n        return False"
    },
    {
        "number": 75,
        "title": "Sort Colors",
        "difficulty": 1,
        "pass": 0,
        "answer": "        n = len(nums)\n        left, right = 0, n - 1\n        index = 0\n        while index <= right:\n            if nums[index] == 0:\n                nums[index], nums[left] = nums[left], nums[index]\n                left += 1\n                index += 1\n            elif nums[index] == 2:\n                nums[index], nums[right] = nums[right], nums[index]\n                right -= 1\n            else:\n                index += 1"
    },
    {
        "number": 75,
        "title": "Sort Colors",
        "difficulty": 1,
        "pass": 1,
        "answer": "        red, white, blue = 0, 0, len(nums) - 1\n        while white <= blue:\n            if nums[white] == 0:\n                nums[red], nums[white] = nums[white], nums[red]\n                white += 1\n                red += 1\n            elif nums[white] == 1:\n                white += 1\n            else:\n                nums[white], nums[blue] = nums[blue], nums[white]\n                blue -= 1"
    },
    {
        "number": 75,
        "title": "Sort Colors",
        "difficulty": 1,
        "pass": 2,
        "answer": "        left, right = 0, len(nums) - 1\n        i = 0\n        while i <= right:\n            if nums[i] == 0:\n                nums[i], nums[left] = nums[left], nums[i]\n                left += 1\n                i += 1\n            elif nums[i] == 2:\n                nums[i], nums[right] = nums[right], nums[i]\n                right -= 1\n            else:\n                i += 1"
    },
    {
        "number": 75,
        "title": "Sort Colors",
        "difficulty": 1,
        "pass": 3,
        "answer": "        left, right = 0, len(nums) - 1\n        curr = 0\n        while curr <= right:\n            if nums[curr] == 0:\n                nums[curr], nums[left] = nums[left], nums[curr]\n                left += 1\n                curr += 1\n            elif nums[curr] == 2:\n                nums[curr], nums[right] = nums[right], nums[curr]\n                right -= 1\n            else:\n                curr += 1"
    },
    {
        "number": 75,
        "title": "Sort Colors",
        "difficulty": 1,
        "pass": 4,
        "answer": "        red, white, blue = 0, 0, len(nums) - 1\n        while white <= blue:\n            if nums[white] == 0:\n                nums[red], nums[white] = nums[white], nums[red]\n                white += 1\n                red += 1\n            elif nums[white] == 1:\n                white += 1\n            else:\n                nums[white], nums[blue] = nums[blue], nums[white]\n                blue -= 1"
    },
    {
        "number": 75,
        "title": "Sort Colors",
        "difficulty": 1,
        "pass": 5,
        "answer": "        if not nums:\n            return\n        left, right = 0, len(nums) - 1\n        i = 0\n        while i <= right:\n            if nums[i] == 0:\n                nums[i], nums[left] = nums[left], nums[i]\n                left += 1\n                i += 1\n            elif nums[i] == 2:\n                nums[i], nums[right] = nums[right], nums[i]\n                right -= 1\n            else:\n                i += 1"
    },
    {
        "number": 75,
        "title": "Sort Colors",
        "difficulty": 1,
        "pass": 6,
        "answer": "        n = len(nums)\n        left, right = 0, n - 1\n        i = 0\n        while i <= right:\n            if nums[i] == 0:\n                nums[i], nums[left] = nums[left], nums[i]\n                left += 1\n                i += 1\n            elif nums[i] == 2:\n                nums[i], nums[right] = nums[right], nums[i]\n                right -= 1\n            else:\n                i += 1"
    },
    {
        "number": 75,
        "title": "Sort Colors",
        "difficulty": 1,
        "pass": 7,
        "answer": "        red, white, blue = 0, 0, len(nums) - 1\n        while white <= blue:\n            if nums[white] == 0:\n                nums[red], nums[white] = nums[white], nums[red]\n                white += 1\n                red += 1\n            elif nums[white] == 1:\n                white += 1\n            else:\n                nums[white], nums[blue] = nums[blue], nums[white]\n                blue -= 1"
    },
    {
        "number": 75,
        "title": "Sort Colors",
        "difficulty": 1,
        "pass": 8,
        "answer": "        \"\"\"\n        Do not return anything, modify nums in-place instead.\n        Given an array nums with n objects colored red, white, or blue, sort them in-place so that objects of the same color are adjacent, with the colors in the order red, white, and blue.\n        We will use the integers 0, 1, and 2 to represent the color red, white, and blue, respectively.\n        You must solve this problem without using the library's sort function.\n        Example 1:\n        Input: nums = [2,0,2,1,1,0]\n        Output: [0,0,1,1,2,2]\n        Example 2:\n        Input: nums = [2,0,1]\n        Output: [0,1,2]\n        \"\"\"\n        \"\"\"\n        Do not return anything, modify nums in-place instead.\n        Given an array nums with n objects colored red, white, or blue, sort them in-place so that objects of the same color are adjacent, with the colors in the order red, white, and blue.\n        We will use the integers"
    },
    {
        "number": 75,
        "title": "Sort Colors",
        "difficulty": 1,
        "pass": 9,
        "answer": "        left, right = 0, len(nums) - 1\n        curr = 0\n        while curr <= right:\n            if nums[curr] == 0:\n                nums[curr], nums[left] = nums[left], nums[curr]\n                left += 1\n                curr += 1\n            elif nums[curr] == 2:\n                nums[curr], nums[right] = nums[right], nums[curr]\n                right -= 1\n            else:\n                curr += 1"
    },
    {
        "number": 76,
        "title": "Minimum Window Substring",
        "difficulty": 2,
        "pass": 0,
        "answer": "        if len(s) < len(t):\n            return ''\n        t_dict = {}\n        for c in t:\n            if c not in t_dict:\n                t_dict[c] = 1\n            else:\n                t_dict[c] += 1\n        min_len = len(s) + 1\n        start = 0\n        end = 0\n        window = {}\n        while end < len(s):\n            if s[end] in t_dict:\n                window[s[end]] = window.get(s[end], 0) + 1\n                if window[s[end]] == t_dict[s[end]]:\n                    while start <= end:\n                        if s[start] in t_dict:\n                            window[s[start]] -= 1\n                            if window[s[start]] < t_dict[s[start]]:\n                                break\n                        start += 1\n                    if end - start + 1 < min_len:\n                        min_len = end - start + 1\n                        start_index = start\n                end += 1\n            else:\n                end"
    },
    {
        "number": 76,
        "title": "Minimum Window Substring",
        "difficulty": 2,
        "pass": 1,
        "answer": "        if len(s) < len(t):\n            return \"\"\n        if len(s) == len(t) == 0:\n            return \"\""
    },
    {
        "number": 76,
        "title": "Minimum Window Substring",
        "difficulty": 2,
        "pass": 2,
        "answer": "        from collections import defaultdict\n        need = defaultdict(int)\n        for c in t:\n            need[c] += 1\n        needCnt = len(t)\n        i = 0\n        res = (0, float('inf'))\n        for j, c in enumerate(s):\n            if need[c] > 0:\n                needCnt -= 1\n            need[c] -= 1\n            if needCnt == 0:\n                while True:\n                    c = s[i]\n                    if need[c] == 0:\n                        break\n                    need[c] += 1\n                    i += 1\n                if j - i < res[1] - res[0]:\n                    res = (i, j)\n                need[s[i]] += 1\n                needCnt += 1\n                i += 1\n        return '' if res[1] > len(s) else s[res[0]:res[1] + 1]"
    },
    {
        "number": 76,
        "title": "Minimum Window Substring",
        "difficulty": 2,
        "pass": 3,
        "answer": "        if len(s) < len(t):\n            return \"\"\n        dic = {}\n        for i in t:\n            if i not in dic:\n                dic[i] = 1\n            else:\n                dic[i] += 1\n        left = 0\n        right = 0\n        min_len = len(s) + 1\n        res = \"\"\n        while right < len(s):\n            if s[right] in dic:\n                dic[s[right]] -= 1\n                if dic[s[right]] == 0:\n                    dic.pop(s[right])\n                while len(dic) == 0:\n                    if min_len > right - left + 1:\n                        min_len = right - left + 1\n                        res = s[left:right + 1]\n                    if s[left] in dic:\n                        dic[s[left]] += 1\n                        if dic[s[left]] > 0:\n                            break\n                    left += 1\n            right += 1\n        return res"
    },
    {
        "number": 76,
        "title": "Minimum Window Substring",
        "difficulty": 2,
        "pass": 4,
        "answer": "        if not s or not t or len(s) < len(t):\n            return \"\"\n        dic = {}\n        for c in t:\n            if c not in dic:\n                dic[c] = 0\n            dic[c] += 1\n        left = 0\n        right = 0\n        n = len(s)\n        count = len(t)\n        min_len = n + 1\n        res = \"\"\n        while right < n:\n            if s[right] in dic:\n                dic[s[right]] -= 1\n                if dic[s[right]] >= 0:\n                    count -= 1\n            right += 1\n            while count == 0:\n                if right - left < min_len:\n                    min_len = right - left\n                    res = s[left:right]\n                if s[left] in dic:\n                    dic[s[left]] += 1\n                    if dic[s[left]] > 0:\n                        count += 1\n                left += 1\n        return res"
    },
    {
        "number": 76,
        "title": "Minimum Window Substring",
        "difficulty": 2,
        "pass": 5,
        "answer": "        if len(s) < len(t):\n            return \"\""
    },
    {
        "number": 76,
        "title": "Minimum Window Substring",
        "difficulty": 2,
        "pass": 6,
        "answer": "        from collections import defaultdict\n        need = defaultdict(int)\n        for c in t:\n            need[c] += 1\n        needCnt = len(t)\n        i = 0\n        res = (0, float('inf'))\n        for j, c in enumerate(s):\n            if need[c] > 0:\n                needCnt -= 1\n            need[c] -= 1\n            if needCnt == 0:\n                while True:\n                    c = s[i]\n                    if need[c] == 0:\n                        break\n                    need[c] += 1\n                    i += 1\n                if j - i < res[1] - res[0]:\n                    res = (i, j)\n                need[s[i]] += 1\n                needCnt += 1\n                i += 1\n        return '' if res[1] > len(s) else s[res[0]:res[1] + 1]"
    },
    {
        "number": 76,
        "title": "Minimum Window Substring",
        "difficulty": 2,
        "pass": 7,
        "answer": "        if len(s) < len(t):\n            return \"\"\n        if len(s) == len(t) == 0:\n            return \"\"\n        if len(t) == 0:\n            return s\n        if len(t) == 1:\n            if t[0] in s:\n                return t\n            else:\n                return \"\"\n        if len(s) == 1:\n            if s[0] == t[0]:\n                return s\n            else:\n                return \"\"\n        t_dict = {}\n        for c in t:\n            if c in t_dict:\n                t_dict[c] += 1\n            else:\n                t_dict[c] = 1\n        s_dict = {}\n        for i in range(len(s)):\n            if s[i] in s_dict:\n                s_dict[s[i]] += 1\n            else:\n                s_dict[s[i]] = 1\n            if s[i] in t_dict and s_dict[s[i]] <= t_dict[s[i]]:"
    },
    {
        "number": 76,
        "title": "Minimum Window Substring",
        "difficulty": 2,
        "pass": 8,
        "answer": "        if not s or not t:\n            return \"\""
    },
    {
        "number": 76,
        "title": "Minimum Window Substring",
        "difficulty": 2,
        "pass": 9,
        "answer": "        if len(s) < len(t):\n            return \"\"\n        if len(s) == len(t) == 0:\n            return \"\"\n        if len(s) == len(t) == 1:\n            if s == t:\n                return s\n            else:\n                return \"\"\n        hash_t = {}\n        for c in t:\n            if c not in hash_t:\n                hash_t[c] = 1\n            else:\n                hash_t[c] += 1\n        start = 0\n        end = 0\n        min_len = len(s) + 1\n        min_start = 0\n        min_end = 0\n        while end < len(s):\n            if s[end] in hash_t:\n                hash_t[s[end]] -= 1\n                if hash_t[s[end]] >= 0:\n                    continue\n                else:\n                    while start <= end:\n                        if s[start] in hash_t:\n                            hash_t[s[start]] += 1\n                            if hash_t[s[start]] > 0"
    },
    {
        "number": 77,
        "title": "Combinations",
        "difficulty": 1,
        "pass": 0,
        "answer": "        res = []\n        self.helper(1, n, k, [], res)\n        return res"
    },
    {
        "number": 77,
        "title": "Combinations",
        "difficulty": 1,
        "pass": 1,
        "answer": "        if k > n:\n            return []\n        if k == 0:\n            return [[]]\n        if k == 1:\n            return [[i] for i in range(1, n+1)]\n        res = []\n        for i in range(1, n+1):\n            for comb in self.combine(i-1, k-1):\n                res.append([i] + comb)\n        return res"
    },
    {
        "number": 77,
        "title": "Combinations",
        "difficulty": 1,
        "pass": 2,
        "answer": "        res = []\n        self.helper(1, n, k, [], res)\n        return res"
    },
    {
        "number": 77,
        "title": "Combinations",
        "difficulty": 1,
        "pass": 3,
        "answer": "        result = []\n        self.helper(n, k, 1, [], result)\n        return result"
    },
    {
        "number": 77,
        "title": "Combinations",
        "difficulty": 1,
        "pass": 4,
        "answer": "        result = []\n        self.helper(1, n, k, [], result)\n        return result"
    },
    {
        "number": 77,
        "title": "Combinations",
        "difficulty": 1,
        "pass": 5,
        "answer": "        res = []\n        self.helper(1, n, k, [], res)\n        return res"
    },
    {
        "number": 77,
        "title": "Combinations",
        "difficulty": 1,
        "pass": 6,
        "answer": "        result = []\n        self.helper(n, k, 1, [], result)\n        return result"
    },
    {
        "number": 77,
        "title": "Combinations",
        "difficulty": 1,
        "pass": 7,
        "answer": "        res = []\n        self.helper(1, n, k, [], res)\n        return res"
    },
    {
        "number": 77,
        "title": "Combinations",
        "difficulty": 1,
        "pass": 8,
        "answer": "        res = []\n        self.helper(1, n, k, [], res)\n        return res"
    },
    {
        "number": 77,
        "title": "Combinations",
        "difficulty": 1,
        "pass": 9,
        "answer": "        result = []\n        self.helper(1, n, k, [], result)\n        return result"
    },
    {
        "number": 78,
        "title": "Subsets",
        "difficulty": 1,
        "pass": 0,
        "answer": "        res = [[]]\n        for num in nums:\n            res += [curr + [num] for curr in res]\n        return res"
    },
    {
        "number": 78,
        "title": "Subsets",
        "difficulty": 1,
        "pass": 1,
        "answer": "        res = [[]]\n        for num in nums:\n            res += [item + [num] for item in res]\n        return res"
    },
    {
        "number": 78,
        "title": "Subsets",
        "difficulty": 1,
        "pass": 2,
        "answer": "        n = len(nums)\n        if n == 0:\n            return [[]]\n        elif n == 1:\n            return [[], [nums[0]]]\n        elif n == 2:\n            return [[], [nums[0]], [nums[1]], [nums[0], nums[1]]]\n        else:\n            res = [[], [nums[0]]]\n            for i in range(1, n):\n                new_res = []\n                for j in range(len(res)):\n                    new_res.append(res[j] + [nums[i]])\n                    new_res.append(res[j] + [nums[i]])\n                res = new_res\n            return res"
    },
    {
        "number": 78,
        "title": "Subsets",
        "difficulty": 1,
        "pass": 3,
        "answer": "        n = len(nums)\n        if n == 0:\n            return [[]]\n        elif n == 1:\n            return [[], nums]\n        elif n == 2:\n            return [[], [nums[0]], [nums[1]], [nums[0], nums[1]]]\n        elif n == 3:\n            return [[], [nums[0]], [nums[1]], [nums[0], nums[1]], [nums[2]], [nums[0], nums[2]], [nums[1], nums[2]], [nums[0], nums[1], nums[2]]]\n        else:\n            return self.subsets(nums[:-1]) + self.subsets(nums[1:])"
    },
    {
        "number": 78,
        "title": "Subsets",
        "difficulty": 1,
        "pass": 4,
        "answer": "        res = [[]]\n        for num in nums:\n            res += [item + [num] for item in res]\n        return res"
    },
    {
        "number": 78,
        "title": "Subsets",
        "difficulty": 1,
        "pass": 5,
        "answer": "        res = [[]]\n        for num in nums:\n            res += [curr + [num] for curr in res]\n        return res"
    },
    {
        "number": 78,
        "title": "Subsets",
        "difficulty": 1,
        "pass": 6,
        "answer": "        res = [[]]\n        for num in nums:\n            res += [curr + [num] for curr in res]\n        return res"
    },
    {
        "number": 78,
        "title": "Subsets",
        "difficulty": 1,
        "pass": 7,
        "answer": "        if not nums:\n            return [[]]\n        res = []\n        self.helper(nums, 0, [], res)\n        return res"
    },
    {
        "number": 78,
        "title": "Subsets",
        "difficulty": 1,
        "pass": 8,
        "answer": "        n = len(nums)\n        if n == 0:\n            return [[]]\n        elif n == 1:\n            return [[], nums]\n        elif n == 2:\n            return [[nums[0]], [nums[1]], [nums[0], nums[1]]]\n        elif n == 3:\n            return [[nums[0]], [nums[1]], [nums[2]], [nums[0], nums[1]], [nums[0], nums[2]], [nums[1], nums[2]], [nums[0], nums[1], nums[2]]]\n        elif n == 4:\n            return [[nums[0]], [nums[1]], [nums[2]], [nums[3]], [nums[0], nums[1]], [nums[0], nums[2]], [nums[0], nums[3]], [nums[1], nums[2]], [nums[1"
    },
    {
        "number": 78,
        "title": "Subsets",
        "difficulty": 1,
        "pass": 9,
        "answer": "        res = [[]]\n        for num in nums:\n            res += [item + [num] for item in res]\n        return res"
    },
    {
        "number": 79,
        "title": "Word Search",
        "difficulty": 1,
        "pass": 0,
        "answer": "        if not board or not board[0]:\n            return False\n        m, n = len(board), len(board[0])\n        for i in range(m):\n            for j in range(n):\n                if self.dfs(board, i, j, word):\n                    return True\n        return False"
    },
    {
        "number": 79,
        "title": "Word Search",
        "difficulty": 1,
        "pass": 1,
        "answer": "        if not board or not board[0]:\n            return False\n        m, n = len(board), len(board[0])\n        for i in range(m):\n            for j in range(n):\n                if self.dfs(board, i, j, word):\n                    return True\n        return False"
    },
    {
        "number": 79,
        "title": "Word Search",
        "difficulty": 1,
        "pass": 2,
        "answer": "        if not board or not board[0]:\n            return False\n        for i in range(len(board)):\n            for j in range(len(board[0])):\n                if self.dfs(board, i, j, word):\n                    return True\n        return False"
    },
    {
        "number": 79,
        "title": "Word Search",
        "difficulty": 1,
        "pass": 3,
        "answer": "        if not board or not board[0]:\n            return False\n        for i in range(len(board)):\n            for j in range(len(board[0])):\n                if self.dfs(board, i, j, word):\n                    return True\n        return False"
    },
    {
        "number": 79,
        "title": "Word Search",
        "difficulty": 1,
        "pass": 4,
        "answer": "        if not board or not board[0]:\n            return False\n        m, n = len(board), len(board[0])\n        for i in range(m):\n            for j in range(n):\n                if self.dfs(board, i, j, word):\n                    return True\n        return False"
    },
    {
        "number": 79,
        "title": "Word Search",
        "difficulty": 1,
        "pass": 5,
        "answer": "        if not board or not board[0]:\n            return False\n        for i in range(len(board)):\n            for j in range(len(board[0])):\n                if self.dfs(board, i, j, word):\n                    return True\n        return False"
    },
    {
        "number": 79,
        "title": "Word Search",
        "difficulty": 1,
        "pass": 6,
        "answer": "        if not board or not board[0]:\n            return False\n        m, n = len(board), len(board[0])\n        for i in range(m):\n            for j in range(n):\n                if self.dfs(board, i, j, word):\n                    return True\n        return False"
    },
    {
        "number": 79,
        "title": "Word Search",
        "difficulty": 1,
        "pass": 7,
        "answer": "        if not board or not board[0]:\n            return False\n        for i in range(len(board)):\n            for j in range(len(board[0])):\n                if self.dfs(board, i, j, word):\n                    return True\n        return False"
    },
    {
        "number": 79,
        "title": "Word Search",
        "difficulty": 1,
        "pass": 8,
        "answer": "        if not board or not board[0]:\n            return False\n        m, n = len(board), len(board[0])\n        for i in range(m):\n            for j in range(n):\n                if self.dfs(board, i, j, word):\n                    return True\n        return False"
    },
    {
        "number": 79,
        "title": "Word Search",
        "difficulty": 1,
        "pass": 9,
        "answer": "        if not board or not board[0]:\n            return False\n        for i in range(len(board)):\n            for j in range(len(board[0])):\n                if self.dfs(board, i, j, word):\n                    return True\n        return False"
    },
    {
        "number": 80,
        "title": "Remove Duplicates from Sorted Array II",
        "difficulty": 1,
        "pass": 0,
        "answer": "        if not nums:\n            return 0\n        n = len(nums)\n        i = 0\n        for j in range(1, n):\n            if nums[j]!= nums[i]:\n                i += 1\n                nums[i] = nums[j]\n        return i + 1"
    },
    {
        "number": 80,
        "title": "Remove Duplicates from Sorted Array II",
        "difficulty": 1,
        "pass": 1,
        "answer": "        i = 0\n        while i < len(nums) - 1:\n            if nums[i] == nums[i + 1]:\n                nums.remove(nums[i])\n            else:\n                i += 1\n        return len(nums)"
    },
    {
        "number": 80,
        "title": "Remove Duplicates from Sorted Array II",
        "difficulty": 1,
        "pass": 2,
        "answer": "        n = len(nums)\n        if n == 0:\n            return 0\n        i = 0\n        for j in range(1, n):\n            if nums[j]!= nums[i]:\n                i += 1\n                nums[i] = nums[j]\n        return i + 1"
    },
    {
        "number": 80,
        "title": "Remove Duplicates from Sorted Array II",
        "difficulty": 1,
        "pass": 3,
        "answer": "        if not nums:\n            return 0\n        i = 0\n        for j in range(1, len(nums)):\n            if nums[j]!= nums[i]:\n                i += 1\n                nums[i] = nums[j]\n        return i + 1"
    },
    {
        "number": 80,
        "title": "Remove Duplicates from Sorted Array II",
        "difficulty": 1,
        "pass": 4,
        "answer": "        if not nums:\n            return 0\n        i = 0\n        for j in range(1, len(nums)):\n            if nums[j]!= nums[i]:\n                i += 1\n                nums[i] = nums[j]\n        return i + 1"
    },
    {
        "number": 80,
        "title": "Remove Duplicates from Sorted Array II",
        "difficulty": 1,
        "pass": 5,
        "answer": "        if not nums:\n            return 0\n        if len(nums) == 1:\n            return 1\n        i = 0\n        for j in range(1, len(nums)):\n            if nums[j]!= nums[i]:\n                i += 1\n                nums[i] = nums[j]\n        return i + 1"
    },
    {
        "number": 80,
        "title": "Remove Duplicates from Sorted Array II",
        "difficulty": 1,
        "pass": 6,
        "answer": "        n = len(nums)\n        if n <= 2:\n            return n\n        i = 2\n        while i < n:\n            if nums[i]!= nums[i - 2]:\n                nums[i], nums[i - 1] = nums[i - 1], nums[i]\n                i -= 1\n            i += 1\n        return i"
    },
    {
        "number": 80,
        "title": "Remove Duplicates from Sorted Array II",
        "difficulty": 1,
        "pass": 7,
        "answer": "        if not nums:\n            return 0\n        i = 0\n        for j in range(1, len(nums)):\n            if nums[j]!= nums[i]:\n                i += 1\n                nums[i] = nums[j]\n        return i + 1"
    },
    {
        "number": 80,
        "title": "Remove Duplicates from Sorted Array II",
        "difficulty": 1,
        "pass": 8,
        "answer": "        n = len(nums)\n        if n <= 2:\n            return n\n        i = 2\n        while i < n:\n            if nums[i]!= nums[i - 2]:\n                nums[i], nums[i - 1] = nums[i - 1], nums[i]\n                i -= 1\n            i += 1\n        return i"
    },
    {
        "number": 80,
        "title": "Remove Duplicates from Sorted Array II",
        "difficulty": 1,
        "pass": 9,
        "answer": "        n = len(nums)\n        if n < 2:\n            return n\n        i = 0\n        for j in range(1, n):\n            if nums[i]!= nums[j]:\n                i += 1\n                nums[i] = nums[j]\n        return i + 1"
    },
    {
        "number": 81,
        "title": "Search in Rotated Sorted Array II",
        "difficulty": 1,
        "pass": 0,
        "answer": "        left, right = 0, len(nums) - 1\n        while left <= right:\n            mid = (left + right) // 2\n            if nums[mid] == target:\n                return True\n            if nums[left] == nums[mid] == nums[right]:\n                left += 1\n                right -= 1\n            elif nums[left] <= nums[mid]:\n                if nums[left] <= target < nums[mid]:\n                    right = mid - 1\n                else:\n                    left = mid + 1\n            else:\n                if nums[mid] < target <= nums[right]:\n                    left = mid + 1\n                else:\n                    right = mid - 1\n        return False"
    },
    {
        "number": 81,
        "title": "Search in Rotated Sorted Array II",
        "difficulty": 1,
        "pass": 1,
        "answer": "        left, right = 0, len(nums) - 1\n        while left <= right:\n            mid = (left + right) // 2\n            if nums[mid] == target:\n                return True\n            if nums[left] == nums[mid] == nums[right]:\n                left += 1\n                right -= 1\n            elif nums[left] <= nums[mid]:\n                if nums[left] <= target < nums[mid]:\n                    right = mid - 1\n                else:\n                    left = mid + 1\n            else:\n                if nums[mid] < target <= nums[right]:\n                    left = mid + 1\n                else:\n                    right = mid - 1\n        return False"
    },
    {
        "number": 81,
        "title": "Search in Rotated Sorted Array II",
        "difficulty": 1,
        "pass": 2,
        "answer": "        l, r = 0, len(nums) - 1\n        while l <= r:\n            mid = (l + r) // 2\n            if nums[mid] == target:\n                return True\n            if nums[l] <= nums[mid]:\n                if nums[l] <= target < nums[mid]:\n                    r = mid - 1\n                else:\n                    l = mid + 1\n            else:\n                if nums[mid] < target <= nums[r]:\n                    l = mid + 1\n                else:\n                    r = mid - 1\n        return False"
    },
    {
        "number": 81,
        "title": "Search in Rotated Sorted Array II",
        "difficulty": 1,
        "pass": 3,
        "answer": "        left, right = 0, len(nums) - 1\n        while left <= right:\n            mid = (left + right) // 2\n            if nums[mid] == target:\n                return True\n            if nums[left] == nums[mid] == nums[right]:\n                left += 1\n                right -= 1\n            elif nums[left] <= nums[mid]:\n                if nums[left] <= target < nums[mid]:\n                    right = mid - 1\n                else:\n                    left = mid + 1\n            else:\n                if nums[mid] < target <= nums[right]:\n                    left = mid + 1\n                else:\n                    right = mid - 1\n        return False"
    },
    {
        "number": 81,
        "title": "Search in Rotated Sorted Array II",
        "difficulty": 1,
        "pass": 4,
        "answer": "        left, right = 0, len(nums) - 1\n        while left <= right:\n            mid = (left + right) // 2\n            if nums[mid] == target:\n                return True\n            if nums[left] == nums[mid] == nums[right]:\n                left += 1\n                right -= 1\n            elif nums[left] <= nums[mid]:\n                if nums[left] <= target < nums[mid]:\n                    right = mid - 1\n                else:\n                    left = mid + 1\n            else:\n                if nums[mid] < target <= nums[right]:\n                    left = mid + 1\n                else:\n                    right = mid - 1\n        return False"
    },
    {
        "number": 81,
        "title": "Search in Rotated Sorted Array II",
        "difficulty": 1,
        "pass": 5,
        "answer": "        left, right = 0, len(nums) - 1\n        while left <= right:\n            mid = (left + right) // 2\n            if nums[mid] == target:\n                return True\n            if nums[left] == nums[mid] == nums[right]:\n                left += 1\n                right -= 1\n            elif nums[left] <= nums[mid]:\n                if nums[left] <= target < nums[mid]:\n                    right = mid - 1\n                else:\n                    left = mid + 1\n            else:\n                if nums[mid] < target <= nums[right]:\n                    left = mid + 1\n                else:\n                    right = mid - 1\n        return False"
    },
    {
        "number": 81,
        "title": "Search in Rotated Sorted Array II",
        "difficulty": 1,
        "pass": 6,
        "answer": "        if not nums:\n            return False\n        left, right = 0, len(nums) - 1\n        while left <= right:\n            mid = (left + right) // 2\n            if nums[mid] == target:\n                return True\n            if nums[left] <= nums[mid]:\n                if nums[left] <= target < nums[mid]:\n                    right = mid - 1\n                else:\n                    left = mid + 1\n            else:\n                if nums[mid] < target <= nums[right]:\n                    left = mid + 1\n                else:\n                    right = mid - 1\n        return False"
    },
    {
        "number": 81,
        "title": "Search in Rotated Sorted Array II",
        "difficulty": 1,
        "pass": 7,
        "answer": "        l, r = 0, len(nums) - 1\n        while l <= r:\n            mid = (l + r) // 2\n            if nums[mid] == target:\n                return True\n            if nums[0] <= nums[mid]:\n                if nums[0] <= target < nums[mid]:\n                    r = mid - 1\n                else:\n                    l = mid + 1\n            else:\n                if nums[mid] < target <= nums[len(nums) - 1]:\n                    l = mid + 1\n                else:\n                    r = mid - 1\n        return False"
    },
    {
        "number": 81,
        "title": "Search in Rotated Sorted Array II",
        "difficulty": 1,
        "pass": 8,
        "answer": "        left, right = 0, len(nums) - 1\n        while left <= right:\n            mid = (left + right) // 2\n            if nums[mid] == target:\n                return True\n            if nums[left] == nums[mid] == nums[right]:\n                left += 1\n                right -= 1\n            elif nums[left] <= nums[mid]:\n                if nums[left] <= target < nums[mid]:\n                    right = mid - 1\n                else:\n                    left = mid + 1\n            else:\n                if nums[mid] < target <= nums[right]:\n                    left = mid + 1\n                else:\n                    right = mid - 1\n        return False"
    },
    {
        "number": 81,
        "title": "Search in Rotated Sorted Array II",
        "difficulty": 1,
        "pass": 9,
        "answer": "        left, right = 0, len(nums) - 1\n        while left <= right:\n            mid = left + (right - left) // 2\n            if nums[mid] == target:\n                return True\n            if nums[mid] >= nums[left]:\n                if nums[left] <= target < nums[mid]:\n                    right = mid - 1\n                else:\n                    left = mid + 1\n            else:\n                if nums[mid] < target <= nums[right]:\n                    left = mid + 1\n                else:\n                    right = mid - 1\n        return False"
    },
    {
        "number": 82,
        "title": "Remove Duplicates from Sorted List II",
        "difficulty": 1,
        "pass": 0,
        "answer": "        if not head:\n            return head\n        dummy = ListNode(0)\n        dummy.next = head\n        curr = dummy\n        while curr.next:\n            if curr.next.val == curr.next.next.val:\n                while curr.next and curr.next.val == curr.next.next.val:\n                    curr.next = curr.next.next\n                curr = curr.next\n            else:\n                curr = curr.next\n        return dummy.next\n"
    },
    {
        "number": 82,
        "title": "Remove Duplicates from Sorted List II",
        "difficulty": 1,
        "pass": 1,
        "answer": "        if not head:\n            return head\n        curr = head\n        while curr.next:\n            if curr.val == curr.next.val:\n                curr.next = curr.next.next\n            else:\n                curr = curr.next\n        return head\n"
    },
    {
        "number": 82,
        "title": "Remove Duplicates from Sorted List II",
        "difficulty": 1,
        "pass": 2,
        "answer": "        if not head or not head.next:\n            return head\n        dummy = ListNode(0)\n        dummy.next = head\n        curr = dummy\n        while curr.next and curr.next.next:\n            if curr.next.val == curr.next.next.val:\n                while curr.next and curr.next.val == curr.next.next.val:\n                    curr.next = curr.next.next\n                curr = curr.next\n            else:\n                curr = curr.next\n        return dummy.next"
    },
    {
        "number": 82,
        "title": "Remove Duplicates from Sorted List II",
        "difficulty": 1,
        "pass": 3,
        "answer": "        dummy = ListNode(0)\n        dummy.next = head\n        curr = dummy\n        while curr.next and curr.next.next:\n            if curr.next.val == curr.next.next.val:\n                while curr.next and curr.next.val == curr.next.next.val:\n                    curr.next = curr.next.next\n                curr = curr.next\n            else:\n                curr = curr.next\n        return dummy.next\n"
    },
    {
        "number": 82,
        "title": "Remove Duplicates from Sorted List II",
        "difficulty": 1,
        "pass": 4,
        "answer": "        if not head:\n            return head\n        dummy = ListNode(0)\n        dummy.next = head\n        prev = dummy\n        curr = head\n        while curr:\n            if curr.next and curr.val == curr.next.val:\n                while curr.next and curr.val == curr.next.val:\n                    curr = curr.next\n                prev.next = curr.next\n            else:\n                prev = prev.next\n            curr = curr.next\n        return dummy.next"
    },
    {
        "number": 82,
        "title": "Remove Duplicates from Sorted List II",
        "difficulty": 1,
        "pass": 5,
        "answer": "        if not head:\n            return head\n        dummy = ListNode(-1)\n        dummy.next = head\n        curr = dummy\n        while curr.next and curr.next.next:\n            if curr.next.val == curr.next.next.val:\n                while curr.next and curr.next.val == curr.next.next.val:\n                    curr.next = curr.next.next\n            else:\n                curr = curr.next\n        return dummy.next\n"
    },
    {
        "number": 82,
        "title": "Remove Duplicates from Sorted List II",
        "difficulty": 1,
        "pass": 6,
        "answer": "        if not head:\n            return head\n        dummy = ListNode(0)\n        dummy.next = head\n        curr = dummy\n        while curr.next:\n            if curr.next.next and curr.next.val == curr.next.next.val:\n                while curr.next and curr.next.val == curr.next.next.val:\n                    curr.next = curr.next.next\n            else:\n                curr = curr.next\n        return dummy.next\n"
    },
    {
        "number": 82,
        "title": "Remove Duplicates from Sorted List II",
        "difficulty": 1,
        "pass": 7,
        "answer": "        if not head or not head.next:\n            return head\n        dummy = ListNode(0)\n        dummy.next = head\n        curr = dummy\n        while curr.next and curr.next.next:\n            if curr.next.val == curr.next.next.val:\n                while curr.next and curr.next.val == curr.next.next.val:\n                    curr.next = curr.next.next\n                curr = curr.next\n            else:\n                curr = curr.next\n        return dummy.next\n"
    },
    {
        "number": 82,
        "title": "Remove Duplicates from Sorted List II",
        "difficulty": 1,
        "pass": 8,
        "answer": "        if not head:\n            return head\n        dummy = ListNode(0)\n        dummy.next = head\n        curr = dummy\n        while curr.next:\n            if curr.next.val == curr.next.next.val:\n                while curr.next and curr.next.val == curr.next.next.val:\n                    curr.next = curr.next.next\n                curr = curr.next\n            else:\n                curr = curr.next\n        return dummy.next\n"
    },
    {
        "number": 82,
        "title": "Remove Duplicates from Sorted List II",
        "difficulty": 1,
        "pass": 9,
        "answer": "        dummy = ListNode(0)\n        dummy.next = head\n        curr = dummy\n        while curr.next:\n            if curr.next.next and curr.next.val == curr.next.next.val:\n                while curr.next and curr.next.val == curr.next.next.val:\n                    curr.next = curr.next.next\n                curr = curr.next\n            else:\n                curr = curr.next\n        return dummy.next"
    },
    {
        "number": 83,
        "title": "Remove Duplicates from Sorted List",
        "difficulty": 0,
        "pass": 0,
        "answer": "        if not head:\n            return head\n        curr = head\n        while curr.next:\n            if curr.val == curr.next.val:\n                curr.next = curr.next.next\n            else:\n                curr = curr.next\n        return head\n"
    },
    {
        "number": 83,
        "title": "Remove Duplicates from Sorted List",
        "difficulty": 0,
        "pass": 1,
        "answer": "        if not head:\n            return head\n        curr = head\n        while curr.next:\n            if curr.val == curr.next.val:\n                curr.next = curr.next.next\n            else:\n                curr = curr.next\n        return head"
    },
    {
        "number": 83,
        "title": "Remove Duplicates from Sorted List",
        "difficulty": 0,
        "pass": 2,
        "answer": "        if not head:\n            return head\n        curr = head\n        while curr.next:\n            if curr.val == curr.next.val:\n                curr.next = curr.next.next\n            else:\n                curr = curr.next\n        return head\n"
    },
    {
        "number": 83,
        "title": "Remove Duplicates from Sorted List",
        "difficulty": 0,
        "pass": 3,
        "answer": "        if not head:\n            return head\n        dummy = ListNode(0)\n        dummy.next = head\n        curr = dummy\n        while curr.next and curr.next.next:\n            if curr.next.val == curr.next.next.val:\n                val = curr.next.val\n                while curr.next and curr.next.val == val:\n                    curr.next = curr.next.next\n            else:\n                curr = curr.next\n        return dummy.next\n"
    },
    {
        "number": 83,
        "title": "Remove Duplicates from Sorted List",
        "difficulty": 0,
        "pass": 4,
        "answer": "        dummy = ListNode(0)\n        dummy.next = head\n        curr = dummy\n        while curr.next and curr.next.next:\n            if curr.next.val == curr.next.next.val:\n                while curr.next and curr.next.val == curr.next.next.val:\n                    curr.next = curr.next.next\n                curr = curr.next\n            else:\n                curr = curr.next\n        return dummy.next"
    },
    {
        "number": 83,
        "title": "Remove Duplicates from Sorted List",
        "difficulty": 0,
        "pass": 5,
        "answer": "        if not head:\n            return head\n        dummy = ListNode(0)\n        dummy.next = head\n        curr = dummy\n        while curr.next and curr.next.next:\n            if curr.next.val == curr.next.next.val:\n                x = curr.next.val\n                while curr.next and curr.next.val == x:\n                    curr.next = curr.next.next\n            else:\n                curr = curr.next\n        return dummy.next\n"
    },
    {
        "number": 83,
        "title": "Remove Duplicates from Sorted List",
        "difficulty": 0,
        "pass": 6,
        "answer": "        if not head:\n            return None\n        curr = head\n        while curr.next:\n            if curr.val == curr.next.val:\n                curr.next = curr.next.next\n            else:\n                curr = curr.next\n        return head"
    },
    {
        "number": 83,
        "title": "Remove Duplicates from Sorted List",
        "difficulty": 0,
        "pass": 7,
        "answer": "        if not head:\n            return None\n        dummy = ListNode(0)\n        dummy.next = head\n        pre = dummy\n        cur = head\n        while cur:\n            if cur.next and cur.val == cur.next.val:\n                while cur and cur.next and cur.val == cur.next.val:\n                    cur = cur.next\n                pre.next = cur.next\n            else:\n                pre = pre.next\n            cur = cur.next\n        return dummy.next"
    },
    {
        "number": 83,
        "title": "Remove Duplicates from Sorted List",
        "difficulty": 0,
        "pass": 8,
        "answer": "        if not head:\n            return head\n        curr = head\n        while curr.next:\n            if curr.val == curr.next.val:\n                curr.next = curr.next.next\n            else:\n                curr = curr.next\n        return head"
    },
    {
        "number": 83,
        "title": "Remove Duplicates from Sorted List",
        "difficulty": 0,
        "pass": 9,
        "answer": "        if not head:\n            return head\n        curr = head\n        while curr.next:\n            if curr.val == curr.next.val:\n                curr.next = curr.next.next\n            else:\n                curr = curr.next\n        return head"
    },
    {
        "number": 84,
        "title": "Largest Rectangle in Histogram",
        "difficulty": 2,
        "pass": 0,
        "answer": "        n = len(heights)\n        if n == 0:\n            return 0\n        left = [0] * n\n        right = [0] * n\n        left[0] = -1\n        right[n - 1] = n\n        max_area = 0\n        for i in range(1, n):\n            if heights[i] < heights[left[i - 1]]:\n                left[i] = left[i - 1]\n            else:\n                left[i] = i\n        for i in range(n - 2, -1, -1):\n            if heights[i] < heights[right[i + 1]]:\n                right[i] = right[i + 1]\n            else:\n                right[i] = i\n        for i in range(n):\n            max_area = max(max_area, heights[i] * (right[i] - left[i] - 1))\n        return max_area"
    },
    {
        "number": 84,
        "title": "Largest Rectangle in Histogram",
        "difficulty": 2,
        "pass": 1,
        "answer": "        if not heights:\n            return 0\n        n = len(heights)\n        left, right = [0] * n, [n] * n\n        stack = []\n        for i in range(n):\n            while stack and heights[i] < heights[stack[-1]]:\n                right[stack[-1]] = i\n                stack.pop()\n            left[i] = stack[-1] if stack else -1\n            stack.append(i)\n        stack = []\n        for i in range(n - 1, -1, -1):\n            while stack and heights[i] < heights[stack[-1]]:\n                left[stack[-1]] = i\n                stack.pop()\n            right[i] = stack[-1] if stack else n\n            stack.append(i)\n        max_area = 0\n        for i in range(n):\n            max_area = max(max_area, heights[i] * (right[i] - left[i] - 1))\n        return max_area"
    },
    {
        "number": 84,
        "title": "Largest Rectangle in Histogram",
        "difficulty": 2,
        "pass": 2,
        "answer": "        if len(heights) == 0:\n            return 0\n        stack = []\n        max_area = 0\n        for i in range(len(heights)):\n            if len(stack) == 0 or heights[i] >= heights[stack[-1]]:\n                stack.append(i)\n            else:\n                while len(stack) > 0 and heights[i] < heights[stack[-1]]:\n                    top = stack.pop()\n                    if len(stack) == 0:\n                        max_area = max(max_area, heights[top] * i)\n                    else:\n                        max_area = max(max_area, heights[top] * (i - stack[-1] - 1))\n                stack.append(i)\n        while len(stack) > 0:\n            top = stack.pop()\n            if len(stack) == 0:\n                max_area = max(max_area, heights[top] * i)\n            else:\n                max_area = max(max_area, heights[top] * (i - stack[-1]"
    },
    {
        "number": 84,
        "title": "Largest Rectangle in Histogram",
        "difficulty": 2,
        "pass": 3,
        "answer": "        stack = []\n        max_area = 0\n        for i in range(len(heights)):\n            while stack and heights[i] < heights[stack[-1]]:\n                h = heights[stack.pop()]\n                w = i if not stack else i - stack[-1] - 1\n                max_area = max(max_area, h * w)\n            stack.append(i)\n        while stack:\n            h = heights[stack.pop()]\n            w = len(heights) if not stack else len(heights) - stack[-1] - 1\n            max_area = max(max_area, h * w)\n        return max_area"
    },
    {
        "number": 84,
        "title": "Largest Rectangle in Histogram",
        "difficulty": 2,
        "pass": 4,
        "answer": "        n = len(heights)\n        if n == 0:\n            return 0\n        left = [0] * n\n        right = [n] * n\n        left[0] = -1\n        right[n - 1] = n\n        for i in range(1, n):\n            j = i - 1\n            while j >= 0 and heights[j] >= heights[i]:\n                j = left[j]\n            left[i] = j\n        for i in range(n - 2, -1, -1):\n            j = i + 1\n            while j < n and heights[j] >= heights[i]:\n                j = right[j]\n            right[i] = j\n        res = 0\n        for i in range(n):\n            res = max(res, heights[i] * (right[i] - left[i] - 1))\n        return res"
    },
    {
        "number": 84,
        "title": "Largest Rectangle in Histogram",
        "difficulty": 2,
        "pass": 5,
        "answer": "        n = len(heights)\n        left = [0] * n\n        right = [0] * n\n        left[0] = -1\n        right[n - 1] = n\n        max_area = 0\n        for i in range(1, n):\n            if heights[i] < heights[left[i - 1]]:\n                left[i] = left[i - 1]\n            else:\n                left[i] = i\n        for i in range(n - 2, -1, -1):\n            if heights[i] < heights[right[i + 1]]:\n                right[i] = right[i + 1]\n            else:\n                right[i] = i\n        for i in range(n):\n            max_area = max(max_area, heights[i] * (right[i] - left[i] - 1))\n        return max_area"
    },
    {
        "number": 84,
        "title": "Largest Rectangle in Histogram",
        "difficulty": 2,
        "pass": 6,
        "answer": "        if not heights:\n            return 0\n        n = len(heights)\n        left = [0] * n\n        right = [0] * n\n        left[0] = -1\n        right[n - 1] = n\n        for i in range(1, n):\n            j = i - 1\n            while j >= 0 and heights[j] >= heights[i]:\n                j = left[j]\n            left[i] = j\n        for i in range(n - 2, -1, -1):\n            j = i + 1\n            while j < n and heights[j] >= heights[i]:\n                j = right[j]\n            right[i] = j\n        res = 0\n        for i in range(n):\n            res = max(res, heights[i] * (right[i] - left[i] - 1))\n        return res"
    },
    {
        "number": 84,
        "title": "Largest Rectangle in Histogram",
        "difficulty": 2,
        "pass": 7,
        "answer": "        if not heights:\n            return 0\n        n = len(heights)\n        left, right = [0] * n, [n] * n\n        stack = []\n        for i in range(n):\n            while stack and heights[i] < heights[stack[-1]]:\n                right[stack[-1]] = i\n                stack.pop()\n            left[i] = stack[-1] if stack else -1\n            stack.append(i)\n        stack = []\n        for i in range(n - 1, -1, -1):\n            while stack and heights[i] < heights[stack[-1]]:\n                left[stack[-1]] = i\n                stack.pop()\n            right[i] = stack[-1] if stack else n\n            stack.append(i)\n        max_area = 0\n        for i in range(n):\n            max_area = max(max_area, heights[i] * (right[i] - left[i] - 1))\n        return max_area"
    },
    {
        "number": 84,
        "title": "Largest Rectangle in Histogram",
        "difficulty": 2,
        "pass": 8,
        "answer": "        stack = []\n        max_area = 0\n        for i in range(len(heights)):\n            while stack and heights[i] < heights[stack[-1]]:\n                h = heights[stack.pop()]\n                w = i if not stack else i - stack[-1] - 1\n                max_area = max(max_area, h * w)\n            stack.append(i)\n        while stack:\n            h = heights[stack.pop()]\n            w = len(heights) if not stack else len(heights) - stack[-1] - 1\n            max_area = max(max_area, h * w)\n        return max_area"
    },
    {
        "number": 84,
        "title": "Largest Rectangle in Histogram",
        "difficulty": 2,
        "pass": 9,
        "answer": "        n = len(heights)\n        if n == 0:\n            return 0\n        left = [0] * n\n        right = [n] * n\n        left[0] = -1\n        right[n - 1] = n\n        for i in range(1, n):\n            j = i - 1\n            while j >= 0 and heights[j] >= heights[i]:\n                j = left[j]\n            left[i] = j\n        for i in range(n - 2, -1, -1):\n            j = i + 1\n            while j < n and heights[j] >= heights[i]:\n                j = right[j]\n            right[i] = j\n        max_area = 0\n        for i in range(n):\n            max_area = max(max_area, heights[i] * (right[i] - left[i] - 1))\n        return max_area\n"
    },
    {
        "number": 85,
        "title": "Maximal Rectangle",
        "difficulty": 2,
        "pass": 0,
        "answer": "        if not matrix or not matrix[0]:\n            return 0\n        m, n = len(matrix), len(matrix[0])\n        height = [0] * (n + 1)\n        max_area = 0\n        for i in range(m):\n            for j in range(n):\n                if matrix[i][j] == '1':\n                    height[j] += 1\n                else:\n                    height[j] = 0\n            max_area = max(max_area, self.largestRectangleArea(height))\n        return max_area"
    },
    {
        "number": 85,
        "title": "Maximal Rectangle",
        "difficulty": 2,
        "pass": 1,
        "answer": "        if not matrix or not matrix[0]:\n            return 0\n        m, n = len(matrix), len(matrix[0])\n        height = [0] * (n + 1)\n        max_area = 0\n        for i in range(m):\n            for j in range(n):\n                if matrix[i][j] == '1':\n                    height[j] += 1\n                else:\n                    height[j] = 0\n            max_area = max(max_area, self.largestRectangleArea(height))\n        return max_area"
    },
    {
        "number": 85,
        "title": "Maximal Rectangle",
        "difficulty": 2,
        "pass": 2,
        "answer": "        if not matrix or not matrix[0]:\n            return 0\n        m, n = len(matrix), len(matrix[0])\n        height = [0] * (n + 1)\n        max_area = 0\n        for i in range(m):\n            for j in range(n):\n                if matrix[i][j] == '1':\n                    height[j] += 1\n                else:\n                    height[j] = 0\n            max_area = max(max_area, self.largestRectangleArea(height))\n        return max_area"
    },
    {
        "number": 85,
        "title": "Maximal Rectangle",
        "difficulty": 2,
        "pass": 3,
        "answer": "        if not matrix or not matrix[0]:\n            return 0\n        n, m = len(matrix), len(matrix[0])\n        left, right, height = [0] * m, [m] * m, [0] * m\n        max_area = 0\n        for i in range(n):\n            curr_left, curr_right = 0, m\n            for j in range(m):\n                if matrix[i][j] == '1':\n                    height[j] += 1\n                    left[j] = max(left[j], curr_left)\n                else:\n                    height[j] = 0\n                    left[j] = 0\n                    curr_left = j + 1\n            for j in range(m - 1, -1, -1):\n                if matrix[i][j] == '1':\n                    right[j] = min(right[j], curr_right)\n                else:\n                    right[j] = m\n                    curr_right = j\n            for j in range(m):\n                max_area = max"
    },
    {
        "number": 85,
        "title": "Maximal Rectangle",
        "difficulty": 2,
        "pass": 4,
        "answer": "        if not matrix or not matrix[0]:\n            return 0\n        m, n = len(matrix), len(matrix[0])\n        heights = [0] * (n + 1)\n        max_area = 0\n        for i in range(m):\n            for j in range(n):\n                if matrix[i][j] == '1':\n                    heights[j] += 1\n                else:\n                    heights[j] = 0\n            max_area = max(max_area, self.largestRectangleArea(heights))\n        return max_area"
    },
    {
        "number": 85,
        "title": "Maximal Rectangle",
        "difficulty": 2,
        "pass": 5,
        "answer": "        if not matrix or not matrix[0]:\n            return 0\n        m, n = len(matrix), len(matrix[0])\n        height = [0] * (n + 1)\n        max_area = 0\n        for i in range(m):\n            for j in range(n):\n                if matrix[i][j] == '1':\n                    height[j] += 1\n                else:\n                    height[j] = 0\n            max_area = max(max_area, self.largestRectangleArea(height))\n        return max_area"
    },
    {
        "number": 85,
        "title": "Maximal Rectangle",
        "difficulty": 2,
        "pass": 6,
        "answer": "        if not matrix or not matrix[0]:\n            return 0\n        m, n = len(matrix), len(matrix[0])\n        height = [0] * (n + 1)\n        max_area = 0\n        for i in range(m):\n            for j in range(n):\n                if matrix[i][j] == '1':\n                    height[j] += 1\n                else:\n                    height[j] = 0\n            max_area = max(max_area, self.largestRectangleArea(height))\n        return max_area"
    },
    {
        "number": 85,
        "title": "Maximal Rectangle",
        "difficulty": 2,
        "pass": 7,
        "answer": "        if not matrix or not matrix[0]:\n            return 0\n        m, n = len(matrix), len(matrix[0])\n        height = [0] * (n + 1)\n        max_area = 0\n        for i in range(m):\n            for j in range(n):\n                if matrix[i][j] == '1':\n                    height[j] += 1\n                else:\n                    height[j] = 0\n            max_area = max(max_area, self.largestRectangleArea(height))\n        return max_area"
    },
    {
        "number": 85,
        "title": "Maximal Rectangle",
        "difficulty": 2,
        "pass": 8,
        "answer": "        if not matrix or not matrix[0]:\n            return 0\n        m, n = len(matrix), len(matrix[0])\n        height = [0] * (n + 1)\n        max_area = 0\n        for i in range(m):\n            for j in range(n):\n                if matrix[i][j] == '1':\n                    height[j] += 1\n                else:\n                    height[j] = 0\n            max_area = max(max_area, self.largestRectangleArea(height))\n        return max_area"
    },
    {
        "number": 85,
        "title": "Maximal Rectangle",
        "difficulty": 2,
        "pass": 9,
        "answer": "        if not matrix or not matrix[0]:\n            return 0\n        m, n = len(matrix), len(matrix[0])\n        heights = [0] * (n + 1)\n        max_area = 0\n        for i in range(m):\n            for j in range(n):\n                if matrix[i][j] == '1':\n                    heights[j] += 1\n                else:\n                    heights[j] = 0\n            max_area = max(max_area, self.largestRectangleArea(heights))\n        return max_area"
    },
    {
        "number": 86,
        "title": "Partition List",
        "difficulty": 1,
        "pass": 0,
        "answer": "        if not head or not head.next:\n            return head"
    },
    {
        "number": 86,
        "title": "Partition List",
        "difficulty": 1,
        "pass": 1,
        "answer": "        if not head:\n            return head\n        if not head.next:\n            return head\n        dummy = ListNode(0)\n        dummy.next = head\n        curr = dummy\n        while curr.next:\n            if curr.next.val < x:\n                tmp = curr.next\n                curr.next = tmp.next\n                tmp.next = dummy.next\n                dummy.next = tmp\n            else:\n                curr = curr.next\n        return dummy.next\n"
    },
    {
        "number": 86,
        "title": "Partition List",
        "difficulty": 1,
        "pass": 2,
        "answer": "        if not head:\n            return head\n        dummy = ListNode(0)\n        dummy.next = head\n        prev, curr = dummy, head\n        while curr:\n            if curr.val < x:\n                prev.next = curr.next\n                curr.next = dummy.next\n                dummy.next = curr\n                prev = dummy\n                curr = prev.next\n            else:\n                prev = curr\n                curr = curr.next\n        return dummy.next"
    },
    {
        "number": 86,
        "title": "Partition List",
        "difficulty": 1,
        "pass": 3,
        "answer": "        if not head or not head.next:\n            return head\n        dummy = ListNode(-1)\n        dummy.next = head\n        p1 = dummy\n        p2 = dummy\n        while p1.next:\n            if p1.next.val < x:\n                p1 = p1.next\n                p2.next = p1.next\n                p1.next = p2.next\n                p2 = p2.next\n            else:\n                p1 = p1.next\n        return dummy.next\n"
    },
    {
        "number": 86,
        "title": "Partition List",
        "difficulty": 1,
        "pass": 4,
        "answer": "        if not head:\n            return head\n        dummy = ListNode(0)\n        dummy.next = head\n        p1 = dummy\n        p2 = dummy\n        while p1.next:\n            if p1.next.val < x:\n                p1 = p1.next\n                p2 = p2.next\n            else:\n                tmp = p1.next\n                p1.next = p2.next\n                p2.next = tmp\n                p1 = p1.next\n                p2 = p2.next\n        return dummy.next"
    },
    {
        "number": 86,
        "title": "Partition List",
        "difficulty": 1,
        "pass": 5,
        "answer": "        if not head:\n            return head\n        dummy = ListNode(0)\n        dummy.next = head\n        p1 = dummy\n        p2 = dummy\n        while p1.next:\n            if p1.next.val < x:\n                p1 = p1.next\n                p2 = p2.next\n            else:\n                tmp = p1.next\n                p1.next = p2.next\n                p2.next = tmp\n                p2 = p2.next\n        return dummy.next"
    },
    {
        "number": 86,
        "title": "Partition List",
        "difficulty": 1,
        "pass": 6,
        "answer": "        if not head or not head.next:\n            return head\n        dummy = ListNode(0)\n        dummy.next = head\n        prev = dummy\n        curr = head\n        while curr:\n            if curr.val < x:\n                prev.next = curr.next\n                curr.next = dummy.next\n                dummy.next = curr\n                prev = dummy\n                curr = prev.next\n            else:\n                prev = curr\n                curr = curr.next\n        return dummy.next"
    },
    {
        "number": 86,
        "title": "Partition List",
        "difficulty": 1,
        "pass": 7,
        "answer": "        if not head:\n            return head\n        dummy = ListNode(0)\n        dummy.next = head\n        prev = dummy\n        curr = head\n        while curr:\n            if curr.val < x:\n                prev.next = curr.next\n                curr.next = dummy.next\n                dummy.next = curr\n                prev = dummy\n                curr = prev.next\n            else:\n                prev = curr\n                curr = curr.next\n        return dummy.next"
    },
    {
        "number": 86,
        "title": "Partition List",
        "difficulty": 1,
        "pass": 8,
        "answer": "        if not head or not head.next:\n            return head\n        dummy = ListNode(-1)\n        dummy.next = head\n        prev = dummy\n        curr = head\n        while curr:\n            if curr.val < x:\n                prev.next = curr.next\n                curr.next = dummy.next\n                dummy.next = curr\n                prev = dummy\n                curr = prev.next\n            else:\n                prev = curr\n                curr = curr.next\n        return dummy.next"
    },
    {
        "number": 86,
        "title": "Partition List",
        "difficulty": 1,
        "pass": 9,
        "answer": "        if not head or not head.next:\n            return head\n        dummy = ListNode(0)\n        dummy.next = head\n        p1, p2 = dummy, dummy\n        while p2.next:\n            if p2.next.val < x:\n                p1 = p1.next\n                p1.next = p2.next\n                p2.next = p2.next.next\n            else:\n                p2 = p2.next\n        p1.next = dummy.next\n        return dummy.next\n"
    },
    {
        "number": 87,
        "title": "Scramble String",
        "difficulty": 2,
        "pass": 0,
        "answer": "        if len(s1)!= len(s2):\n            return False\n        if s1 == s2:\n            return True\n        if sorted(s1)!= sorted(s2):\n            return False\n        for i in range(1, len(s1)):\n            if self.isScramble(s1[:i], s2[:i]) and self.isScramble(s1[i:], s2[i:]):\n                return True\n            if self.isScramble(s1[:i], s2[-i:]) and self.isScramble(s1[i:], s2[:-i]):\n                return True\n        return False"
    },
    {
        "number": 87,
        "title": "Scramble String",
        "difficulty": 2,
        "pass": 1,
        "answer": "        if len(s1)!= len(s2):\n            return False\n        if s1 == s2:\n            return True\n        if sorted(s1)!= sorted(s2):\n            return False\n        for i in range(1, len(s1)):\n            if self.isScramble(s1[:i], s2[:i]) and self.isScramble(s1[i:], s2[i:]):\n                return True\n            if self.isScramble(s1[:i], s2[-i:]) and self.isScramble(s1[i:], s2[:-i]):\n                return True\n        return False"
    },
    {
        "number": 87,
        "title": "Scramble String",
        "difficulty": 2,
        "pass": 2,
        "answer": "        if len(s1)!= len(s2):\n            return False\n        if s1 == s2:\n            return True\n        if sorted(s1)!= sorted(s2):\n            return False\n        for i in range(1, len(s1)):\n            if self.isScramble(s1[:i], s2[:i]) and self.isScramble(s1[i:], s2[i:]):\n                return True\n            if self.isScramble(s1[:i], s2[-i:]) and self.isScramble(s1[i:], s2[:-i]):\n                return True\n        return False"
    },
    {
        "number": 87,
        "title": "Scramble String",
        "difficulty": 2,
        "pass": 3,
        "answer": "        if len(s1)!= len(s2):\n            return False\n        if s1 == s2:\n            return True\n        if sorted(s1)!= sorted(s2):\n            return False\n        for i in range(1, len(s1)):\n            if self.isScramble(s1[:i], s2[:i]) and self.isScramble(s1[i:], s2[i:]):\n                return True\n            if self.isScramble(s1[:i], s2[-i:]) and self.isScramble(s1[i:], s2[:-i]):\n                return True\n        return False"
    },
    {
        "number": 87,
        "title": "Scramble String",
        "difficulty": 2,
        "pass": 4,
        "answer": "        if len(s1)!= len(s2):\n            return False\n        if s1 == s2:\n            return True\n        if sorted(s1)!= sorted(s2):\n            return False\n        for i in range(1, len(s1)):\n            if self.isScramble(s1[:i], s2[:i]) and self.isScramble(s1[i:], s2[i:]):\n                return True\n            if self.isScramble(s1[:i], s2[-i:]) and self.isScramble(s1[i:], s2[:-i]):\n                return True\n        return False"
    },
    {
        "number": 87,
        "title": "Scramble String",
        "difficulty": 2,
        "pass": 5,
        "answer": "        if len(s1)!= len(s2):\n            return False\n        if s1 == s2:\n            return True\n        if sorted(s1)!= sorted(s2):\n            return False\n        for i in range(1, len(s1)):\n            if self.isScramble(s1[:i], s2[:i]) and self.isScramble(s1[i:], s2[i:]):\n                return True\n            if self.isScramble(s1[:i], s2[-i:]) and self.isScramble(s1[i:], s2[:-i]):\n                return True\n        return False"
    },
    {
        "number": 87,
        "title": "Scramble String",
        "difficulty": 2,
        "pass": 6,
        "answer": "        if len(s1)!= len(s2):\n            return False\n        if s1 == s2:\n            return True\n        if sorted(s1)!= sorted(s2):\n            return False\n        for i in range(1, len(s1)):\n            if self.isScramble(s1[:i], s2[:i]) and self.isScramble(s1[i:], s2[i:]):\n                return True\n            if self.isScramble(s1[:i], s2[-i:]) and self.isScramble(s1[i:], s2[:-i]):\n                return True\n        return False"
    },
    {
        "number": 87,
        "title": "Scramble String",
        "difficulty": 2,
        "pass": 7,
        "answer": "        if len(s1)!= len(s2):\n            return False\n        if s1 == s2:\n            return True\n        if sorted(s1)!= sorted(s2):\n            return False\n        for i in range(1, len(s1)):\n            if self.isScramble(s1[:i], s2[:i]) and self.isScramble(s1[i:], s2[i:]):\n                return True\n            if self.isScramble(s1[:i], s2[-i:]) and self.isScramble(s1[i:], s2[:-i]):\n                return True\n        return False"
    },
    {
        "number": 87,
        "title": "Scramble String",
        "difficulty": 2,
        "pass": 8,
        "answer": "        if len(s1)!= len(s2):\n            return False\n        if s1 == s2:\n            return True\n        if sorted(s1)!= sorted(s2):\n            return False\n        for i in range(1, len(s1)):\n            if self.isScramble(s1[:i], s2[:i]) and self.isScramble(s1[i:], s2[i:]):\n                return True\n            if self.isScramble(s1[:i], s2[-i:]) and self.isScramble(s1[i:], s2[:-i]):\n                return True\n        return False"
    },
    {
        "number": 87,
        "title": "Scramble String",
        "difficulty": 2,
        "pass": 9,
        "answer": "        if len(s1)!= len(s2):\n            return False\n        if s1 == s2:\n            return True\n        if sorted(s1)!= sorted(s2):\n            return False\n        for i in range(1, len(s1)):\n            if self.isScramble(s1[:i], s2[:i]) and self.isScramble(s1[i:], s2[i:]):\n                return True\n            if self.isScramble(s1[:i], s2[-i:]) and self.isScramble(s1[i:], s2[:-i]):\n                return True\n        return False"
    },
    {
        "number": 88,
        "title": "Merge Sorted Array",
        "difficulty": 0,
        "pass": 0,
        "answer": "        nums1[m:] = nums2[:n]\n        nums1.sort()"
    },
    {
        "number": 88,
        "title": "Merge Sorted Array",
        "difficulty": 0,
        "pass": 1,
        "answer": "        i, j, k = m - 1, n - 1, m + n - 1\n        while i >= 0 and j >= 0:\n            if nums1[i] > nums2[j]:\n                nums1[k] = nums1[i]\n                i -= 1\n            else:\n                nums1[k] = nums2[j]\n                j -= 1\n            k -= 1\n        while j >= 0:\n            nums1[k] = nums2[j]\n            j -= 1\n            k -= 1"
    },
    {
        "number": 88,
        "title": "Merge Sorted Array",
        "difficulty": 0,
        "pass": 2,
        "answer": "        nums1[m:] = nums2\n        nums1.sort()"
    },
    {
        "number": 88,
        "title": "Merge Sorted Array",
        "difficulty": 0,
        "pass": 3,
        "answer": "        nums1[m:] = nums2\n        nums1.sort()"
    },
    {
        "number": 88,
        "title": "Merge Sorted Array",
        "difficulty": 0,
        "pass": 4,
        "answer": "        nums1[m:] = nums2\n        nums1.sort()"
    },
    {
        "number": 88,
        "title": "Merge Sorted Array",
        "difficulty": 0,
        "pass": 5,
        "answer": "        nums1[m:] = nums2\n        nums1.sort()"
    },
    {
        "number": 88,
        "title": "Merge Sorted Array",
        "difficulty": 0,
        "pass": 6,
        "answer": "        nums1[m:] = nums2[:n]\n        nums1.sort()"
    },
    {
        "number": 88,
        "title": "Merge Sorted Array",
        "difficulty": 0,
        "pass": 7,
        "answer": "        nums1[m:] = nums2\n        nums1.sort()"
    },
    {
        "number": 88,
        "title": "Merge Sorted Array",
        "difficulty": 0,
        "pass": 8,
        "answer": "        i, j, k = m - 1, n - 1, m + n - 1\n        while i >= 0 and j >= 0:\n            if nums1[i] > nums2[j]:\n                nums1[k] = nums1[i]\n                i -= 1\n            else:\n                nums1[k] = nums2[j]\n                j -= 1\n            k -= 1\n        while j >= 0:\n            nums1[k] = nums2[j]\n            k -= 1\n            j -= 1"
    },
    {
        "number": 88,
        "title": "Merge Sorted Array",
        "difficulty": 0,
        "pass": 9,
        "answer": "        nums1[m:] = nums2[:n]\n        nums1.sort()"
    },
    {
        "number": 89,
        "title": "Gray Code",
        "difficulty": 1,
        "pass": 0,
        "answer": "        if n == 0:\n            return [0]\n        if n == 1:\n            return [0, 1]\n        ans = [0, 1]\n        for i in range(2, n + 1):\n            ans += [x + pow(2, i - 1) for x in ans[::-1]]\n        return ans"
    },
    {
        "number": 89,
        "title": "Gray Code",
        "difficulty": 1,
        "pass": 1,
        "answer": "        if n == 0:\n            return [0]\n        if n == 1:\n            return [0, 1]\n        if n == 2:\n            return [0, 1, 3, 2]\n        res = [0, 1]\n        for i in range(2, n + 1):\n            tmp = []\n            for j in range(len(res)):\n                tmp.append(res[j] << 1)\n                tmp.append(res[j] << 1 | 1)\n            res = tmp\n        return res"
    },
    {
        "number": 89,
        "title": "Gray Code",
        "difficulty": 1,
        "pass": 2,
        "answer": "        if n == 0:\n            return [0]\n        if n == 1:\n            return [0, 1]\n        if n == 2:\n            return [0, 1, 3, 2]\n        if n == 3:\n            return [0, 1, 3, 2, 6, 7, 5, 4]\n        if n == 4:\n            return [0, 1, 3, 2, 6, 7, 5, 4, 9, 8]\n        if n == 5:\n            return [0, 1, 3, 2, 6, 7, 5, 4, 9, 8, 11, 10]\n        if n == 6:\n            return [0, 1, 3, 2, 6, 7, 5, 4, 9, 8, 11, 10, 14, 15]\n        if n == 7:\n            return [0, 1, 3, 2, 6, 7, 5, 4, 9, 8, 11, 10, 14, 15, 19, 18]\n        if n == 8:\n            return [0, 1, 3, 2, 6, 7, 5, 4, 9,"
    },
    {
        "number": 89,
        "title": "Gray Code",
        "difficulty": 1,
        "pass": 3,
        "answer": "        if n == 0:\n            return [0]\n        if n == 1:\n            return [0, 1]\n        if n == 2:\n            return [0, 1, 3, 2]\n        if n == 3:\n            return [0, 1, 3, 2, 6, 7, 5, 4]\n        if n == 4:\n            return [0, 1, 3, 2, 6, 7, 5, 4, 8, 9, 10, 11, 13, 12, 14, 15]\n        if n == 5:\n            return [0, 1, 3, 2, 6, 7, 5, 4, 8, 9, 10, 11, 13, 12, 14, 15, 16, 17, 18, 19, 21, 20, 22, 23, 24, 25, 26, 27, 29, 28, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61"
    },
    {
        "number": 89,
        "title": "Gray Code",
        "difficulty": 1,
        "pass": 4,
        "answer": "        if n == 0:\n            return [0]\n        if n == 1:\n            return [0, 1]"
    },
    {
        "number": 89,
        "title": "Gray Code",
        "difficulty": 1,
        "pass": 5,
        "answer": "        if n == 0:\n            return [0]\n        if n == 1:\n            return [0, 1]\n        if n == 2:\n            return [0, 1, 3, 2]\n        if n == 3:\n            return [0, 1, 3, 2, 6, 7, 5, 4]\n        if n == 4:\n            return [0, 1, 3, 2, 6, 7, 5, 4, 9, 8]\n        if n == 5:\n            return [0, 1, 3, 2, 6, 7, 5, 4, 9, 8, 11, 10]\n        if n == 6:\n            return [0, 1, 3, 2, 6, 7, 5, 4, 9, 8, 11, 10, 14, 15]\n        if n == 7:\n            return [0, 1, 3, 2, 6, 7, 5, 4, 9, 8, 11, 10, 14, 15, 19, 18]\n        if n == 8:\n            return [0, 1, 3, 2, 6, 7, 5, 4, 9,"
    },
    {
        "number": 89,
        "title": "Gray Code",
        "difficulty": 1,
        "pass": 6,
        "answer": "        if n == 0:\n            return [0]\n        if n == 1:\n            return [0, 1]\n        if n == 2:\n            return [0, 1, 3, 2]\n        if n == 3:\n            return [0, 1, 3, 2, 6, 7, 5, 4]"
    },
    {
        "number": 89,
        "title": "Gray Code",
        "difficulty": 1,
        "pass": 7,
        "answer": "        if n == 0:\n            return [0]\n        if n == 1:\n            return [0, 1]\n        res = [0, 1]\n        for i in range(2, n + 1):\n            for j in range(len(res) - 1, -1, -1):\n                res.append(res[j] << 1 | 1)\n        return res"
    },
    {
        "number": 89,
        "title": "Gray Code",
        "difficulty": 1,
        "pass": 8,
        "answer": "        if n == 0:\n            return [0]\n        if n == 1:\n            return [0, 1]\n        res = [0, 1]\n        for i in range(2, n + 1):\n            for j in range(len(res) - 1, -1, -1):\n                res.append(res[j] << 1 | 1)\n        return res"
    },
    {
        "number": 89,
        "title": "Gray Code",
        "difficulty": 1,
        "pass": 9,
        "answer": "        if n == 0:\n            return [0]\n        if n == 1:\n            return [0, 1]\n        if n == 2:\n            return [0, 1, 3, 2]\n        if n == 3:\n            return [0, 1, 3, 2, 6, 7, 5, 4]\n        if n == 4:\n            return [0, 1, 3, 2, 6, 7, 5, 4, 9, 8]\n        if n == 5:\n            return [0, 1, 3, 2, 6, 7, 5, 4, 9, 8, 11, 10]\n        if n == 6:\n            return [0, 1, 3, 2, 6, 7, 5, 4, 9, 8, 11, 10, 14, 15]\n        if n == 7:\n            return [0, 1, 3, 2, 6, 7, 5, 4, 9, 8, 11, 10, 14, 15, 19, 18]\n        if n == 8:\n            return [0, 1, 3, 2, 6, 7, 5, 4, 9,"
    },
    {
        "number": 90,
        "title": "Subsets II",
        "difficulty": 1,
        "pass": 0,
        "answer": "        nums.sort()\n        res = [[]]\n        for i in range(len(nums)):\n            if i == 0 or nums[i]!= nums[i - 1]:\n                l = len(res)\n            for j in range(len(res) - l, len(res)):\n                res.append(res[j] + [nums[i]])\n        return res"
    },
    {
        "number": 90,
        "title": "Subsets II",
        "difficulty": 1,
        "pass": 1,
        "answer": "        nums.sort()\n        res = [[]]\n        for i in range(len(nums)):\n            if i == 0 or nums[i]!= nums[i-1]:\n                l = len(res)\n            for j in range(len(res) - l, len(res)):\n                res.append(res[j] + [nums[i]])\n        return res"
    },
    {
        "number": 90,
        "title": "Subsets II",
        "difficulty": 1,
        "pass": 2,
        "answer": "        nums.sort()\n        res = [[]]\n        for i in range(len(nums)):\n            if i == 0 or nums[i]!= nums[i - 1]:\n                l = len(res)\n            for j in range(len(res) - l, len(res)):\n                res.append(res[j] + [nums[i]])\n        return res"
    },
    {
        "number": 90,
        "title": "Subsets II",
        "difficulty": 1,
        "pass": 3,
        "answer": "        nums.sort()\n        res = [[]]\n        for i in range(len(nums)):\n            if i == 0 or nums[i]!= nums[i - 1]:\n                l = len(res)\n            for j in range(len(res) - l, len(res)):\n                res.append(res[j] + [nums[i]])\n        return res"
    },
    {
        "number": 90,
        "title": "Subsets II",
        "difficulty": 1,
        "pass": 4,
        "answer": "        nums.sort()\n        n = len(nums)\n        res = [[]]\n        for i in range(n):\n            if i == 0 or nums[i]!= nums[i - 1]:\n                l = len(res)\n            for j in range(len(res) - l, len(res)):\n                res.append(res[j] + [nums[i]])\n        return res"
    },
    {
        "number": 90,
        "title": "Subsets II",
        "difficulty": 1,
        "pass": 5,
        "answer": "        nums.sort()\n        res = [[]]\n        for i in range(len(nums)):\n            if i == 0 or nums[i]!= nums[i-1]:\n                l = len(res)\n            for j in range(len(res) - l, len(res)):\n                res.append(res[j] + [nums[i]])\n        return res\n"
    },
    {
        "number": 90,
        "title": "Subsets II",
        "difficulty": 1,
        "pass": 6,
        "answer": "        nums.sort()\n        res = [[]]\n        for i in range(len(nums)):\n            if i == 0 or nums[i]!= nums[i - 1]:\n                l = len(res)\n            for j in range(len(res) - l, len(res)):\n                res.append(res[j] + [nums[i]])\n        return res"
    },
    {
        "number": 90,
        "title": "Subsets II",
        "difficulty": 1,
        "pass": 7,
        "answer": "        nums.sort()\n        res = [[]]\n        for i in range(len(nums)):\n            if i == 0 or nums[i]!= nums[i - 1]:\n                l = len(res)\n            for j in range(len(res) - l, len(res)):\n                res.append(res[j] + [nums[i]])\n        return res"
    },
    {
        "number": 90,
        "title": "Subsets II",
        "difficulty": 1,
        "pass": 8,
        "answer": "        nums.sort()\n        n = len(nums)\n        res = [[]]\n        for i in range(n):\n            if i == 0 or nums[i]!= nums[i-1]:\n                l = len(res)\n            for j in range(len(res) - l, len(res)):\n                res.append(res[j] + [nums[i]])\n        return res"
    },
    {
        "number": 90,
        "title": "Subsets II",
        "difficulty": 1,
        "pass": 9,
        "answer": "        nums.sort()\n        res = [[]]\n        for i in range(len(nums)):\n            if i == 0 or nums[i]!= nums[i - 1]:\n                l = len(res)\n            for j in range(len(res) - l, len(res)):\n                res.append(res[j] + [nums[i]])\n        return res\n"
    },
    {
        "number": 91,
        "title": "Decode Ways",
        "difficulty": 1,
        "pass": 0,
        "answer": "        n = len(s)\n        if n == 0:\n            return 0\n        dp = [0] * (n + 1)\n        dp[0] = 1\n        dp[1] = 1 if s[0]!= '0' else 0\n        for i in range(2, n + 1):\n            if s[i - 1]!= '0':\n                dp[i] += dp[i - 1]\n            if 10 <= int(s[i - 2:i]) <= 26:\n                dp[i] += dp[i - 2]\n        return dp[n]"
    },
    {
        "number": 91,
        "title": "Decode Ways",
        "difficulty": 1,
        "pass": 1,
        "answer": "        n = len(s)\n        if n == 0:\n            return 0\n        dp = [0] * (n + 1)\n        dp[0] = 1\n        dp[1] = 1 if s[0]!= '0' else 0\n        for i in range(2, n + 1):\n            if s[i - 1]!= '0':\n                dp[i] += dp[i - 1]\n            if 10 <= int(s[i - 2:i]) <= 26:\n                dp[i] += dp[i - 2]\n        return dp[n]"
    },
    {
        "number": 91,
        "title": "Decode Ways",
        "difficulty": 1,
        "pass": 2,
        "answer": "        if not s:\n            return 0\n        n = len(s)\n        dp = [0] * (n + 1)\n        dp[0] = 1\n        dp[1] = 1 if s[0]!= '0' else 0\n        for i in range(2, n + 1):\n            if s[i - 1]!= '0':\n                dp[i] += dp[i - 1]\n            if 10 <= int(s[i - 2] + s[i - 1]) <= 26:\n                dp[i] += dp[i - 2]\n        return dp[n]"
    },
    {
        "number": 91,
        "title": "Decode Ways",
        "difficulty": 1,
        "pass": 3,
        "answer": "        n = len(s)\n        if n == 0:\n            return 0\n        dp = [0] * (n + 1)\n        dp[0] = 1\n        dp[1] = 1 if s[0]!= '0' else 0\n        for i in range(2, n + 1):\n            if s[i - 1]!= '0':\n                dp[i] += dp[i - 1]\n            if 10 <= int(s[i - 2:i]) <= 26:\n                dp[i] += dp[i - 2]\n        return dp[n]"
    },
    {
        "number": 91,
        "title": "Decode Ways",
        "difficulty": 1,
        "pass": 4,
        "answer": "        n = len(s)\n        if n == 0:\n            return 0\n        dp = [0] * (n + 1)\n        dp[0] = 1\n        dp[1] = 1 if s[0]!= '0' else 0\n        for i in range(2, n + 1):\n            if s[i - 1]!= '0':\n                dp[i] += dp[i - 1]\n            if 10 <= int(s[i - 2:i]) <= 26:\n                dp[i] += dp[i - 2]\n        return dp[n]"
    },
    {
        "number": 91,
        "title": "Decode Ways",
        "difficulty": 1,
        "pass": 5,
        "answer": "        n = len(s)\n        if n == 0:\n            return 0\n        dp = [0] * (n + 1)\n        dp[0] = 1\n        dp[1] = 1 if s[0]!= '0' else 0\n        for i in range(2, n + 1):\n            if s[i - 1]!= '0':\n                dp[i] += dp[i - 1]\n            if 10 <= int(s[i - 2:i]) <= 26:\n                dp[i] += dp[i - 2]\n        return dp[n]"
    },
    {
        "number": 91,
        "title": "Decode Ways",
        "difficulty": 1,
        "pass": 6,
        "answer": "        if not s:\n            return 0\n        n = len(s)\n        dp = [0] * (n + 1)\n        dp[0] = 1\n        dp[1] = 1 if s[0]!= '0' else 0\n        for i in range(2, n + 1):\n            if s[i - 1]!= '0':\n                dp[i] += dp[i - 1]\n            if 10 <= int(s[i - 2:i]) <= 26:\n                dp[i] += dp[i - 2]\n        return dp[n]"
    },
    {
        "number": 91,
        "title": "Decode Ways",
        "difficulty": 1,
        "pass": 7,
        "answer": "        n = len(s)\n        if n == 0:\n            return 0\n        dp = [0] * (n + 1)\n        dp[0] = 1\n        dp[1] = 1 if s[0]!= '0' else 0\n        for i in range(2, n + 1):\n            if s[i - 1]!= '0':\n                dp[i] += dp[i - 1]\n            if 10 <= int(s[i - 2] + s[i - 1]) <= 26:\n                dp[i] += dp[i - 2]\n        return dp[n]"
    },
    {
        "number": 91,
        "title": "Decode Ways",
        "difficulty": 1,
        "pass": 8,
        "answer": "        if not s:\n            return 0\n        n = len(s)\n        dp = [0] * (n + 1)\n        dp[0] = 1\n        dp[1] = 1 if s[0]!= '0' else 0\n        for i in range(2, n + 1):\n            if s[i - 1]!= '0':\n                dp[i] += dp[i - 1]\n            if 10 <= int(s[i - 2] + s[i - 1]) <= 26:\n                dp[i] += dp[i - 2]\n        return dp[n]"
    },
    {
        "number": 91,
        "title": "Decode Ways",
        "difficulty": 1,
        "pass": 9,
        "answer": "        if not s:\n            return 0\n        n = len(s)\n        dp = [0] * (n + 1)\n        dp[0] = 1\n        dp[1] = 1 if s[0]!= '0' else 0\n        for i in range(2, n + 1):\n            if s[i - 1]!= '0':\n                dp[i] += dp[i - 1]\n            if 10 <= int(s[i - 2:i]) <= 26:\n                dp[i] += dp[i - 2]\n        return dp[n]"
    },
    {
        "number": 92,
        "title": "Reverse Linked List II",
        "difficulty": 1,
        "pass": 0,
        "answer": "        dummy = ListNode(0)\n        dummy.next = head\n        pre = dummy\n        for _ in range(left - 1):\n            pre = pre.next\n        cur = pre.next\n        for _ in range(right - left):\n            nxt = cur.next\n            cur.next = nxt.next\n            nxt.next = pre.next\n            pre.next = nxt\n        return dummy.next\n"
    },
    {
        "number": 92,
        "title": "Reverse Linked List II",
        "difficulty": 1,
        "pass": 1,
        "answer": "        dummy = ListNode(0)\n        dummy.next = head\n        pre = dummy\n        for _ in range(left - 1):\n            pre = pre.next\n        cur = pre.next\n        for _ in range(right - left):\n            nxt = cur.next\n            cur.next = nxt.next\n            nxt.next = pre.next\n            pre.next = nxt\n        return dummy.next"
    },
    {
        "number": 92,
        "title": "Reverse Linked List II",
        "difficulty": 1,
        "pass": 2,
        "answer": "        dummy = ListNode(0)\n        dummy.next = head\n        pre = dummy\n        for i in range(left - 1):\n            pre = pre.next\n        cur = pre.next\n        for i in range(right - left):\n            nxt = cur.next\n            cur.next = nxt.next\n            nxt.next = pre.next\n            pre.next = nxt\n        return dummy.next"
    },
    {
        "number": 92,
        "title": "Reverse Linked List II",
        "difficulty": 1,
        "pass": 3,
        "answer": "        if not head or left == right:\n            return head\n        dummy = ListNode(0)\n        dummy.next = head\n        pre = dummy\n        for _ in range(left - 1):\n            pre = pre.next\n        cur = pre.next\n        for _ in range(right - left):\n            tmp = cur.next\n            cur.next = tmp.next\n            tmp.next = pre.next\n            pre.next = tmp\n        return dummy.next\n"
    },
    {
        "number": 92,
        "title": "Reverse Linked List II",
        "difficulty": 1,
        "pass": 4,
        "answer": "        dummy = ListNode(0)\n        dummy.next = head\n        pre = dummy\n        for _ in range(left - 1):\n            pre = pre.next\n        cur = pre.next\n        for _ in range(right - left):\n            nxt = cur.next\n            cur.next = nxt.next\n            nxt.next = pre.next\n            pre.next = nxt\n        return dummy.next"
    },
    {
        "number": 92,
        "title": "Reverse Linked List II",
        "difficulty": 1,
        "pass": 5,
        "answer": "        dummy = ListNode(0)\n        dummy.next = head\n        pre = dummy\n        for _ in range(left - 1):\n            pre = pre.next\n        cur = pre.next\n        for _ in range(right - left):\n            nxt = cur.next\n            cur.next = nxt.next\n            nxt.next = pre.next\n            pre.next = nxt\n        return dummy.next"
    },
    {
        "number": 92,
        "title": "Reverse Linked List II",
        "difficulty": 1,
        "pass": 6,
        "answer": "        dummy = ListNode(0)\n        dummy.next = head\n        pre = dummy\n        for _ in range(left - 1):\n            pre = pre.next\n        cur = pre.next\n        for _ in range(right - left):\n            nxt = cur.next\n            cur.next = nxt.next\n            nxt.next = pre.next\n            pre.next = nxt\n        return dummy.next"
    },
    {
        "number": 92,
        "title": "Reverse Linked List II",
        "difficulty": 1,
        "pass": 7,
        "answer": "        dummy = ListNode(0)\n        dummy.next = head\n        pre = dummy\n        for _ in range(left - 1):\n            pre = pre.next\n        cur = pre.next\n        for _ in range(right - left):\n            nxt = cur.next\n            cur.next = nxt.next\n            nxt.next = pre.next\n            pre.next = nxt\n        return dummy.next"
    },
    {
        "number": 92,
        "title": "Reverse Linked List II",
        "difficulty": 1,
        "pass": 8,
        "answer": "        dummy = ListNode(0)\n        dummy.next = head\n        pre = dummy\n        for i in range(left - 1):\n            pre = pre.next\n        cur = pre.next\n        for i in range(right - left):\n            nxt = cur.next\n            cur.next = nxt.next\n            nxt.next = pre.next\n            pre.next = nxt\n        return dummy.next"
    },
    {
        "number": 92,
        "title": "Reverse Linked List II",
        "difficulty": 1,
        "pass": 9,
        "answer": "        dummy = ListNode(0)\n        dummy.next = head\n        pre = dummy\n        for _ in range(left - 1):\n            pre = pre.next\n        cur = pre.next\n        for _ in range(right - left):\n            nxt = cur.next\n            cur.next = nxt.next\n            nxt.next = pre.next\n            pre.next = nxt\n        return dummy.next"
    },
    {
        "number": 93,
        "title": "Restore IP Addresses",
        "difficulty": 1,
        "pass": 0,
        "answer": "        if len(s) < 4 or len(s) > 12:\n            return []\n        result = []\n        for i in range(1, 4):\n            for j in range(i + 1, i + 4):\n                for k in range(j + 1, j + 4):\n                    for l in range(k + 1, k + 4):\n                        ip = s[:i] + '.' + s[i:j] + '.' + s[j:k] + '.' + s[k:]\n                        if self.isValid(ip):\n                            result.append(ip)\n        return result"
    },
    {
        "number": 93,
        "title": "Restore IP Addresses",
        "difficulty": 1,
        "pass": 1,
        "answer": "        if len(s) < 4 or len(s) > 12:\n            return []\n        res = []\n        self.helper(s, 0, res, [])\n        return res"
    },
    {
        "number": 93,
        "title": "Restore IP Addresses",
        "difficulty": 1,
        "pass": 2,
        "answer": "        if len(s) < 4 or len(s) > 12:\n            return []\n        result = []\n        for i in range(1, 4):\n            for j in range(i + 1, i + 4):\n                for k in range(j + 1, j + 4):\n                    for l in range(k + 1, k + 4):\n                        ip = s[:i] + '.' + s[i:j] + '.' + s[j:k] + '.' + s[k:l] + '.' + s[l:]\n                        if self.isValid(ip):\n                            result.append(ip)\n        return result"
    },
    {
        "number": 93,
        "title": "Restore IP Addresses",
        "difficulty": 1,
        "pass": 3,
        "answer": "        n = len(s)\n        if n < 4 or n > 12:\n            return []\n        result = []\n        for i in range(1, n - 2):\n            if i > 1 and s[0] == '0':\n                continue\n            for j in range(i + 1, n - 1):\n                if j > i + 1 and s[i] == '0':\n                    continue\n                for k in range(j + 1, n):\n                    if k > j + 1 and s[j] == '0':\n                        continue\n                    ip = s[:i] + '.' + s[i:j] + '.' + s[j:k] + '.' + s[k:]\n                    if self.is_valid(ip):\n                        result.append(ip)\n        return result"
    },
    {
        "number": 93,
        "title": "Restore IP Addresses",
        "difficulty": 1,
        "pass": 4,
        "answer": "        res = []\n        self.helper(s, 0, \"\", res)\n        return res"
    },
    {
        "number": 93,
        "title": "Restore IP Addresses",
        "difficulty": 1,
        "pass": 5,
        "answer": "        if len(s) < 4 or len(s) > 12:\n            return []\n        res = []\n        for i in range(1, 4):\n            for j in range(1, 4):\n                for k in range(1, 4):\n                    for l in range(1, 4):\n                        if i + j + k + l == len(s):\n                            if self.isValid(s[:i]):\n                                if self.isValid(s[i:i + j]):\n                                    if self.isValid(s[i + j:i + j + k]):\n                                        if self.isValid(s[i + j + k:]):\n                                            res.append(s[:i] + '.' + s[i:i + j] + '.' + s[i + j:i + j + k] + '.' + s[i + j + k:])\n        return res"
    },
    {
        "number": 93,
        "title": "Restore IP Addresses",
        "difficulty": 1,
        "pass": 6,
        "answer": "        if len(s) < 4 or len(s) > 12:\n            return []\n        result = []\n        for i in range(1, 4):\n            for j in range(1, 4):\n                for k in range(1, 4):\n                    for l in range(1, 4):\n                        if i + j + k + l == len(s):\n                            ip = s[:i] + '.' + s[i:i + j] + '.' + s[i + j:i + j + k] + '.' + s[i + j + k:]\n                            if self.isValid(ip):\n                                result.append(ip)\n        return result"
    },
    {
        "number": 93,
        "title": "Restore IP Addresses",
        "difficulty": 1,
        "pass": 7,
        "answer": "        if len(s) < 4 or len(s) > 12:\n            return []\n        res = []\n        self.helper(s, 0, 4, \"\", res)\n        return res"
    },
    {
        "number": 93,
        "title": "Restore IP Addresses",
        "difficulty": 1,
        "pass": 8,
        "answer": "        if len(s) < 4 or len(s) > 12:\n            return []\n        res = []\n        for i in range(1, 4):\n            for j in range(i + 1, i + 4):\n                for k in range(j + 1, j + 4):\n                    for l in range(k + 1, k + 4):\n                        ip = s[:i] + '.' + s[i:j] + '.' + s[j:k] + '.' + s[k:l] + '.' + s[l:]\n                        if self.isValid(ip):\n                            res.append(ip)\n        return res"
    },
    {
        "number": 93,
        "title": "Restore IP Addresses",
        "difficulty": 1,
        "pass": 9,
        "answer": "        res = []\n        self.helper(s, 0, \"\", res)\n        return res"
    },
    {
        "number": 94,
        "title": "Binary Tree Inorder Traversal",
        "difficulty": 0,
        "pass": 0,
        "answer": "        if not root:\n            return []\n        res = []\n        stack = [root]\n        while stack:\n            node = stack.pop()\n            res.append(node.val)\n            if node.right:\n                stack.append(node.right)\n            if node.left:\n                stack.append(node.left)\n        return res"
    },
    {
        "number": 94,
        "title": "Binary Tree Inorder Traversal",
        "difficulty": 0,
        "pass": 1,
        "answer": "        if not root:\n            return []\n        if not root.left and not root.right:\n            return [root.val]\n        res = []\n        if root.left:\n            res += self.inorderTraversal(root.left)\n        res.append(root.val)\n        if root.right:\n            res += self.inorderTraversal(root.right)\n        return res"
    },
    {
        "number": 94,
        "title": "Binary Tree Inorder Traversal",
        "difficulty": 0,
        "pass": 2,
        "answer": "        res = []\n        self.inorder(root, res)\n        return res"
    },
    {
        "number": 94,
        "title": "Binary Tree Inorder Traversal",
        "difficulty": 0,
        "pass": 3,
        "answer": "        if not root:\n            return []\n        return self.inorderTraversal(root.left) + [root.val] + self.inorderTraversal(root.right)"
    },
    {
        "number": 94,
        "title": "Binary Tree Inorder Traversal",
        "difficulty": 0,
        "pass": 4,
        "answer": "        if not root:\n            return []\n        stack = [root]\n        res = []\n        while stack:\n            node = stack.pop()\n            res.append(node.val)\n            if node.right:\n                stack.append(node.right)\n            if node.left:\n                stack.append(node.left)\n        return res"
    },
    {
        "number": 94,
        "title": "Binary Tree Inorder Traversal",
        "difficulty": 0,
        "pass": 5,
        "answer": "        if not root:\n            return []\n        res = []\n        stack = [root]\n        while stack:\n            node = stack.pop()\n            res.append(node.val)\n            if node.right:\n                stack.append(node.right)\n            if node.left:\n                stack.append(node.left)\n        return res"
    },
    {
        "number": 94,
        "title": "Binary Tree Inorder Traversal",
        "difficulty": 0,
        "pass": 6,
        "answer": "        if not root:\n            return []\n        if not root.left and not root.right:\n            return [root.val]\n        res = []\n        if root.left:\n            res += self.inorderTraversal(root.left)\n        res.append(root.val)\n        if root.right:\n            res += self.inorderTraversal(root.right)\n        return res"
    },
    {
        "number": 94,
        "title": "Binary Tree Inorder Traversal",
        "difficulty": 0,
        "pass": 7,
        "answer": "        if not root:\n            return []\n        stack = [root]\n        res = []\n        while stack:\n            node = stack.pop()\n            res.append(node.val)\n            if node.right:\n                stack.append(node.right)\n            if node.left:\n                stack.append(node.left)\n        return res"
    },
    {
        "number": 94,
        "title": "Binary Tree Inorder Traversal",
        "difficulty": 0,
        "pass": 8,
        "answer": "        if not root:\n            return []\n        res = []\n        stack = [root]\n        while stack:\n            node = stack.pop()\n            res.append(node.val)\n            if node.right:\n                stack.append(node.right)\n            if node.left:\n                stack.append(node.left)\n        return res"
    },
    {
        "number": 94,
        "title": "Binary Tree Inorder Traversal",
        "difficulty": 0,
        "pass": 9,
        "answer": "        if not root:\n            return []\n        return self.inorderTraversal(root.left) + [root.val] + self.inorderTraversal(root.right)"
    },
    {
        "number": 95,
        "title": "Unique Binary Search Trees II",
        "difficulty": 1,
        "pass": 0,
        "answer": "        if n == 0:\n            return []\n        return self.helper(1, n)"
    },
    {
        "number": 95,
        "title": "Unique Binary Search Trees II",
        "difficulty": 1,
        "pass": 1,
        "answer": "        if n == 0:\n            return []\n        return self.helper(1, n)"
    },
    {
        "number": 95,
        "title": "Unique Binary Search Trees II",
        "difficulty": 1,
        "pass": 2,
        "answer": "        def generate(start, end):\n            if start > end:\n                return [None]\n            if start == end:\n                return [TreeNode(start)]\n            res = []\n            for i in range(start, end + 1):\n                left = generate(start, i - 1)\n                right = generate(i + 1, end)\n                for l in left:\n                    for r in right:\n                        root = TreeNode(i)\n                        root.left = l\n                        root.right = r\n                        res.append(root)\n            return res\n        return generate(1, n) if n else []"
    },
    {
        "number": 95,
        "title": "Unique Binary Search Trees II",
        "difficulty": 1,
        "pass": 3,
        "answer": "        if n == 0:\n            return []\n        return self.helper(1, n)"
    },
    {
        "number": 95,
        "title": "Unique Binary Search Trees II",
        "difficulty": 1,
        "pass": 4,
        "answer": "        if n == 0:\n            return []\n        return self.helper(1, n)"
    },
    {
        "number": 95,
        "title": "Unique Binary Search Trees II",
        "difficulty": 1,
        "pass": 5,
        "answer": "        if n == 0:\n            return []\n        return self.helper(1, n)"
    },
    {
        "number": 95,
        "title": "Unique Binary Search Trees II",
        "difficulty": 1,
        "pass": 6,
        "answer": "        if n == 0:\n            return []\n        return self.helper(1, n)"
    },
    {
        "number": 95,
        "title": "Unique Binary Search Trees II",
        "difficulty": 1,
        "pass": 7,
        "answer": "        if n == 0:\n            return []\n        return self.helper(1, n)"
    },
    {
        "number": 95,
        "title": "Unique Binary Search Trees II",
        "difficulty": 1,
        "pass": 8,
        "answer": "        if n == 0:\n            return []\n        return self.helper(1, n)"
    },
    {
        "number": 95,
        "title": "Unique Binary Search Trees II",
        "difficulty": 1,
        "pass": 9,
        "answer": "        if n == 0:\n            return []\n        return self.helper(1, n)"
    },
    {
        "number": 96,
        "title": "Unique Binary Search Trees",
        "difficulty": 1,
        "pass": 0,
        "answer": "        if n == 0 or n == 1:\n            return 1\n        dp = [0] * (n + 1)\n        dp[0] = 1\n        dp[1] = 1\n        for i in range(2, n + 1):\n            for j in range(1, i + 1):\n                dp[i] += dp[j - 1] * dp[i - j]\n        return dp[n]"
    },
    {
        "number": 96,
        "title": "Unique Binary Search Trees",
        "difficulty": 1,
        "pass": 1,
        "answer": "        if n == 0 or n == 1:\n            return 1\n        memo = [0] * (n + 1)\n        memo[0] = 1\n        memo[1] = 1\n        for i in range(2, n + 1):\n            for j in range(1, i + 1):\n                memo[i] += memo[j - 1] * memo[i - j]\n        return memo[n]"
    },
    {
        "number": 96,
        "title": "Unique Binary Search Trees",
        "difficulty": 1,
        "pass": 2,
        "answer": "        # https://leetcode.com/problems/unique-binary-search-trees-ii/description/\n        # https://leetcode.com/problems/unique-binary-search-trees-ii/discuss/128800/C%2B%2BJavaPython-DFS-solution\n        # https://leetcode.com/problems/unique-binary-search-trees-ii/discuss/128900/C%2B%2BJavaPython-DFS-solution-with-detailed-explanation\n        # https://leetcode.com/problems/unique-binary-search-trees-ii/discuss/128945/C%2B%2BJavaPython-DFS-solution-with-detailed-explanation\n        # https://leetcode.com/problems/unique-binary-search-trees-ii/discuss/128945/C%2B%2BJavaPython-DFS-solution-with-detailed-explanation\n        # https://leetcode."
    },
    {
        "number": 96,
        "title": "Unique Binary Search Trees",
        "difficulty": 1,
        "pass": 3,
        "answer": "        if n == 0 or n == 1:\n            return 1\n        dp = [0] * (n + 1)\n        dp[0] = 1\n        dp[1] = 1\n        for i in range(2, n + 1):\n            for j in range(1, i + 1):\n                dp[i] += dp[j - 1] * dp[i - j]\n        return dp[n]"
    },
    {
        "number": 96,
        "title": "Unique Binary Search Trees",
        "difficulty": 1,
        "pass": 4,
        "answer": "        dp = [0] * (n + 1)\n        dp[0] = 1\n        dp[1] = 1\n        for i in range(2, n + 1):\n            for j in range(1, i + 1):\n                dp[i] += dp[j - 1] * dp[i - j]\n        return dp[n]"
    },
    {
        "number": 96,
        "title": "Unique Binary Search Trees",
        "difficulty": 1,
        "pass": 5,
        "answer": "        if n == 0 or n == 1:\n            return 1\n        dp = [0] * (n + 1)\n        dp[0] = 1\n        dp[1] = 1\n        for i in range(2, n + 1):\n            for j in range(1, i + 1):\n                dp[i] += dp[j - 1] * dp[i - j]\n        return dp[n]\n"
    },
    {
        "number": 96,
        "title": "Unique Binary Search Trees",
        "difficulty": 1,
        "pass": 6,
        "answer": "        if n == 0 or n == 1:\n            return 1\n        dp = [0] * (n + 1)\n        dp[0] = 1\n        dp[1] = 1\n        for i in range(2, n + 1):\n            for j in range(1, i + 1):\n                dp[i] += dp[j - 1] * dp[i - j]\n        return dp[n]"
    },
    {
        "number": 96,
        "title": "Unique Binary Search Trees",
        "difficulty": 1,
        "pass": 7,
        "answer": "        if n == 0 or n == 1:\n            return 1\n        dp = [0] * (n + 1)\n        dp[0] = 1\n        dp[1] = 1\n        for i in range(2, n + 1):\n            for j in range(1, i + 1):\n                dp[i] += dp[j - 1] * dp[i - j]\n        return dp[n]"
    },
    {
        "number": 96,
        "title": "Unique Binary Search Trees",
        "difficulty": 1,
        "pass": 8,
        "answer": "        if n == 0 or n == 1:\n            return 1"
    },
    {
        "number": 96,
        "title": "Unique Binary Search Trees",
        "difficulty": 1,
        "pass": 9,
        "answer": "        if n == 0 or n == 1:\n            return 1\n        res = [0] * (n + 1)\n        res[0] = 1\n        res[1] = 1\n        for i in range(2, n + 1):\n            for j in range(1, i + 1):\n                res[i] += res[j - 1] * res[i - j]\n        return res[n]"
    },
    {
        "number": 97,
        "title": "Interleaving String",
        "difficulty": 1,
        "pass": 0,
        "answer": "        if len(s1) + len(s2)!= len(s3):\n            return False\n        if len(s1) == 0:\n            return s2 == s3\n        if len(s2) == 0:\n            return s1 == s3\n        n, m = len(s1), len(s2)\n        dp = [[False] * (m + 1) for _ in range(n + 1)]\n        dp[0][0] = True\n        for i in range(1, n + 1):\n            dp[i][0] = dp[i - 1][0] and s1[i - 1] == s3[i - 1]\n        for j in range(1, m + 1):\n            dp[0][j] = dp[0][j - 1] and s2[j - 1] == s3[j - 1]\n        for i in range(1, n + 1):\n            for j in range(1, m + 1):\n                dp[i][j] = (dp[i - 1][j] and s1"
    },
    {
        "number": 97,
        "title": "Interleaving String",
        "difficulty": 1,
        "pass": 1,
        "answer": "        if len(s1) + len(s2)!= len(s3):\n            return False\n        if len(s1) == 0:\n            return s2 == s3\n        if len(s2) == 0:\n            return s1 == s3\n        dp = [[False] * (len(s2) + 1) for _ in range(len(s1) + 1)]\n        dp[0][0] = True\n        for i in range(1, len(s1) + 1):\n            dp[i][0] = dp[i - 1][0] and s1[i - 1] == s3[i - 1]\n        for j in range(1, len(s2) + 1):\n            dp[0][j] = dp[0][j - 1] and s2[j - 1] == s3[j - 1]\n        for i in range(1, len(s1) + 1):\n            for j in range(1, len(s2) + 1):\n                dp[i][j] = (dp[i"
    },
    {
        "number": 97,
        "title": "Interleaving String",
        "difficulty": 1,
        "pass": 2,
        "answer": "        m, n = len(s1), len(s2)\n        if m + n!= len(s3):\n            return False\n        dp = [[False] * (n + 1) for _ in range(m + 1)]\n        dp[0][0] = True\n        for i in range(1, m + 1):\n            dp[i][0] = dp[i - 1][0] and s1[i - 1] == s3[i - 1]\n        for j in range(1, n + 1):\n            dp[0][j] = dp[0][j - 1] and s2[j - 1] == s3[j - 1]\n        for i in range(1, m + 1):\n            for j in range(1, n + 1):\n                dp[i][j] = (dp[i - 1][j] and s1[i - 1] == s3[i + j - 1]) or (dp[i][j - 1] and s2[j - 1] == s3[i + j - 1])\n        return"
    },
    {
        "number": 97,
        "title": "Interleaving String",
        "difficulty": 1,
        "pass": 3,
        "answer": "        if len(s1) + len(s2)!= len(s3):\n            return False\n        if len(s1) == 0:\n            return s2 == s3\n        if len(s2) == 0:\n            return s1 == s3\n        dp = [[False] * (len(s2) + 1) for _ in range(len(s1) + 1)]\n        dp[0][0] = True\n        for i in range(1, len(s1) + 1):\n            dp[i][0] = dp[i - 1][0] and s1[i - 1] == s3[i - 1]\n        for j in range(1, len(s2) + 1):\n            dp[0][j] = dp[0][j - 1] and s2[j - 1] == s3[j - 1]\n        for i in range(1, len(s1) + 1):\n            for j in range(1, len(s2) + 1):\n                dp[i][j] = (dp[i"
    },
    {
        "number": 97,
        "title": "Interleaving String",
        "difficulty": 1,
        "pass": 4,
        "answer": "        if len(s1) + len(s2)!= len(s3):\n            return False\n        dp = [[False] * (len(s2) + 1) for _ in range(len(s1) + 1)]\n        dp[0][0] = True\n        for i in range(1, len(s1) + 1):\n            dp[i][0] = dp[i - 1][0] and s1[i - 1] == s3[i - 1]\n        for j in range(1, len(s2) + 1):\n            dp[0][j] = dp[0][j - 1] and s2[j - 1] == s3[j - 1]\n        for i in range(1, len(s1) + 1):\n            for j in range(1, len(s2) + 1):\n                dp[i][j] = (dp[i - 1][j] and s1[i - 1] == s3[i + j - 1]) or (dp[i][j - 1] and s2[j"
    },
    {
        "number": 97,
        "title": "Interleaving String",
        "difficulty": 1,
        "pass": 5,
        "answer": "        if len(s1) + len(s2)!= len(s3):\n            return False\n        dp = [[False] * (len(s2) + 1) for _ in range(len(s1) + 1)]\n        dp[0][0] = True\n        for i in range(1, len(s1) + 1):\n            dp[i][0] = dp[i - 1][0] and s1[i - 1] == s3[i - 1]\n        for j in range(1, len(s2) + 1):\n            dp[0][j] = dp[0][j - 1] and s2[j - 1] == s3[j - 1]\n        for i in range(1, len(s1) + 1):\n            for j in range(1, len(s2) + 1):\n                dp[i][j] = (dp[i - 1][j] and s1[i - 1] == s3[i + j - 1]) or (dp[i][j - 1] and s2[j"
    },
    {
        "number": 97,
        "title": "Interleaving String",
        "difficulty": 1,
        "pass": 6,
        "answer": "        if len(s1) + len(s2)!= len(s3):\n            return False\n        if len(s1) == 0:\n            return s2 == s3\n        if len(s2) == 0:\n            return s1 == s3\n        n, m = len(s1), len(s2)\n        dp = [[False] * (m + 1) for _ in range(n + 1)]\n        dp[0][0] = True\n        for i in range(1, n + 1):\n            dp[i][0] = dp[i - 1][0] and s1[i - 1] == s3[i - 1]\n        for j in range(1, m + 1):\n            dp[0][j] = dp[0][j - 1] and s2[j - 1] == s3[j - 1]\n        for i in range(1, n + 1):\n            for j in range(1, m + 1):\n                dp[i][j] = (dp[i - 1][j] and s1"
    },
    {
        "number": 97,
        "title": "Interleaving String",
        "difficulty": 1,
        "pass": 7,
        "answer": "        if len(s1) + len(s2)!= len(s3):\n            return False\n        if len(s1) == 0:\n            return s2 == s3\n        if len(s2) == 0:\n            return s1 == s3\n        n, m = len(s1), len(s2)\n        dp = [[False] * (m + 1) for _ in range(n + 1)]\n        dp[0][0] = True\n        for i in range(1, n + 1):\n            dp[i][0] = dp[i - 1][0] and s1[i - 1] == s3[i - 1]\n        for j in range(1, m + 1):\n            dp[0][j] = dp[0][j - 1] and s2[j - 1] == s3[j - 1]\n        for i in range(1, n + 1):\n            for j in range(1, m + 1):\n                dp[i][j] = (dp[i - 1][j] and s1"
    },
    {
        "number": 97,
        "title": "Interleaving String",
        "difficulty": 1,
        "pass": 8,
        "answer": "        if len(s1) + len(s2)!= len(s3):\n            return False\n        if len(s1) == 0:\n            return s2 == s3\n        if len(s2) == 0:\n            return s1 == s3\n        dp = [[False] * (len(s2) + 1) for _ in range(len(s1) + 1)]\n        dp[0][0] = True\n        for i in range(1, len(s1) + 1):\n            dp[i][0] = dp[i - 1][0] and s1[i - 1] == s3[i - 1]\n        for j in range(1, len(s2) + 1):\n            dp[0][j] = dp[0][j - 1] and s2[j - 1] == s3[j - 1]\n        for i in range(1, len(s1) + 1):\n            for j in range(1, len(s2) + 1):\n                dp[i][j] = (dp[i"
    },
    {
        "number": 97,
        "title": "Interleaving String",
        "difficulty": 1,
        "pass": 9,
        "answer": "        if len(s1) + len(s2)!= len(s3):\n            return False\n        if len(s1) == 0:\n            return s2 == s3\n        if len(s2) == 0:\n            return s1 == s3\n        dp = [[False] * (len(s2) + 1) for _ in range(len(s1) + 1)]\n        dp[0][0] = True\n        for i in range(1, len(s1) + 1):\n            dp[i][0] = dp[i - 1][0] and s1[i - 1] == s3[i - 1]\n        for j in range(1, len(s2) + 1):\n            dp[0][j] = dp[0][j - 1] and s2[j - 1] == s3[j - 1]\n        for i in range(1, len(s1) + 1):\n            for j in range(1, len(s2) + 1):\n                dp[i][j] = (dp[i"
    },
    {
        "number": 98,
        "title": "Validate Binary Search Tree",
        "difficulty": 1,
        "pass": 0,
        "answer": "        def helper(node, lower=float('-inf'), upper=float('inf')):\n            if not node:\n                return True\n            val = node.val\n            if val <= lower or val >= upper:\n                return False\n            if not helper(node.right, val, upper):\n                return False\n            if not helper(node.left, lower, val):\n                return False\n            return True\n        return helper(root)"
    },
    {
        "number": 98,
        "title": "Validate Binary Search Tree",
        "difficulty": 1,
        "pass": 1,
        "answer": "        def helper(node, lower=float('-inf'), upper=float('inf')):\n            if not node:\n                return True\n            val = node.val\n            if val <= lower or val >= upper:\n                return False\n            if not helper(node.right, val, upper):\n                return False\n            if not helper(node.left, lower, val):\n                return False\n            return True"
    },
    {
        "number": 98,
        "title": "Validate Binary Search Tree",
        "difficulty": 1,
        "pass": 2,
        "answer": "        def helper(node, lower=float('-inf'), upper=float('inf')):\n            if not node:\n                return True\n            val = node.val\n            if val <= lower or val >= upper:\n                return False\n            if not helper(node.right, val, upper):\n                return False\n            if not helper(node.left, lower, val):\n                return False\n            return True\n        return helper(root)"
    },
    {
        "number": 98,
        "title": "Validate Binary Search Tree",
        "difficulty": 1,
        "pass": 3,
        "answer": "        def helper(node, lower=float('-inf'), upper=float('inf')):\n            if not node:\n                return True\n            val = node.val\n            if val <= lower or val >= upper:\n                return False\n            if not helper(node.right, val, upper):\n                return False\n            if not helper(node.left, lower, val):\n                return False\n            return True\n        return helper(root)"
    },
    {
        "number": 98,
        "title": "Validate Binary Search Tree",
        "difficulty": 1,
        "pass": 4,
        "answer": "        if not root:\n            return True\n        return self.helper(root, float('-inf'), float('inf'))"
    },
    {
        "number": 98,
        "title": "Validate Binary Search Tree",
        "difficulty": 1,
        "pass": 5,
        "answer": "        return self.helper(root, float('-inf'), float('inf'))"
    },
    {
        "number": 98,
        "title": "Validate Binary Search Tree",
        "difficulty": 1,
        "pass": 6,
        "answer": "        def helper(node, lower=float('-inf'), upper=float('inf')):\n            if not node:\n                return True\n            val = node.val\n            if val <= lower or val >= upper:\n                return False\n            if not helper(node.right, val, upper):\n                return False\n            if not helper(node.left, lower, val):\n                return False\n            return True\n        return helper(root)"
    },
    {
        "number": 98,
        "title": "Validate Binary Search Tree",
        "difficulty": 1,
        "pass": 7,
        "answer": "        return self.helper(root, float('-inf'), float('inf'))"
    },
    {
        "number": 98,
        "title": "Validate Binary Search Tree",
        "difficulty": 1,
        "pass": 8,
        "answer": "        def helper(node, lower=float('-inf'), upper=float('inf')):\n            if not node:\n                return True\n            val = node.val\n            if val <= lower or val >= upper:\n                return False\n            if not helper(node.right, val, upper):\n                return False\n            if not helper(node.left, lower, val):\n                return False\n            return True"
    },
    {
        "number": 98,
        "title": "Validate Binary Search Tree",
        "difficulty": 1,
        "pass": 9,
        "answer": "        def helper(node, lower=float('-inf'), upper=float('inf')):\n            if not node:\n                return True\n            val = node.val\n            if val <= lower or val >= upper:\n                return False\n            if not helper(node.right, val, upper):\n                return False\n            if not helper(node.left, lower, val):\n                return False\n            return True"
    },
    {
        "number": 99,
        "title": "Recover Binary Search Tree",
        "difficulty": 1,
        "pass": 0,
        "answer": "        self.first, self.second = None, None\n        self.prev = TreeNode(float('-inf'))\n        self.inorder(root)\n        self.first.val, self.second.val = self.second.val, self.first.val"
    },
    {
        "number": 99,
        "title": "Recover Binary Search Tree",
        "difficulty": 1,
        "pass": 1,
        "answer": "        self.first, self.second = None, None\n        self.prev = TreeNode(float('-inf'))\n        self.inorder(root)\n        self.first.val, self.second.val = self.second.val, self.first.val"
    },
    {
        "number": 99,
        "title": "Recover Binary Search Tree",
        "difficulty": 1,
        "pass": 2,
        "answer": "        self.first, self.second = None, None\n        self.prev = TreeNode(float('-inf'))\n        self.inorder(root)\n        self.first.val, self.second.val = self.second.val, self.first.val"
    },
    {
        "number": 99,
        "title": "Recover Binary Search Tree",
        "difficulty": 1,
        "pass": 3,
        "answer": "        self.first, self.second = None, None\n        self.prev = TreeNode(float('-inf'))\n        self.inorder(root)\n        self.first.val, self.second.val = self.second.val, self.first.val"
    },
    {
        "number": 99,
        "title": "Recover Binary Search Tree",
        "difficulty": 1,
        "pass": 4,
        "answer": "        self.first, self.second = None, None\n        self.prev = TreeNode(float('-inf'))\n        self.inorder(root)\n        self.first.val, self.second.val = self.second.val, self.first.val"
    },
    {
        "number": 99,
        "title": "Recover Binary Search Tree",
        "difficulty": 1,
        "pass": 5,
        "answer": "        def inorder(node):\n            if not node:\n                return\n            inorder(node.left)\n            if node.left and node.left.val > node.val:\n                self.swap(node, node.left)\n            inorder(node.right)"
    },
    {
        "number": 99,
        "title": "Recover Binary Search Tree",
        "difficulty": 1,
        "pass": 6,
        "answer": "        self.first, self.second = None, None\n        self.prev = TreeNode(float('-inf'))\n        self.inorder(root)\n        self.first.val, self.second.val = self.second.val, self.first.val"
    },
    {
        "number": 99,
        "title": "Recover Binary Search Tree",
        "difficulty": 1,
        "pass": 7,
        "answer": "        self.first, self.second = None, None\n        self.prev = TreeNode(float('-inf'))\n        self.inorder(root)\n        self.first.val, self.second.val = self.second.val, self.first.val"
    },
    {
        "number": 99,
        "title": "Recover Binary Search Tree",
        "difficulty": 1,
        "pass": 8,
        "answer": "        self.first, self.second = None, None\n        self.prev = TreeNode(float('-inf'))\n        self.inorder(root)\n        self.first.val, self.second.val = self.second.val, self.first.val"
    },
    {
        "number": 99,
        "title": "Recover Binary Search Tree",
        "difficulty": 1,
        "pass": 9,
        "answer": "        self.first, self.second = None, None\n        self.prev = TreeNode(float('-inf'))\n        self.inorder(root)\n        self.first.val, self.second.val = self.second.val, self.first.val"
    },
    {
        "number": 100,
        "title": "Same Tree",
        "difficulty": 0,
        "pass": 0,
        "answer": "        if p is None and q is None:\n            return True\n        if p is None or q is None:\n            return False\n        if p.val!= q.val:\n            return False\n        return self.isSameTree(p.left, q.left) and self.isSameTree(p.right, q.right)"
    },
    {
        "number": 100,
        "title": "Same Tree",
        "difficulty": 0,
        "pass": 1,
        "answer": "        if p is None and q is None:\n            return True\n        if p is None or q is None:\n            return False\n        if p.val!= q.val:\n            return False\n        return self.isSameTree(p.left, q.left) and self.isSameTree(p.right, q.right)"
    },
    {
        "number": 100,
        "title": "Same Tree",
        "difficulty": 0,
        "pass": 2,
        "answer": "        if p is None and q is None:\n            return True\n        if p is None or q is None:\n            return False\n        if p.val!= q.val:\n            return False\n        return self.isSameTree(p.left, q.left) and self.isSameTree(p.right, q.right)"
    },
    {
        "number": 100,
        "title": "Same Tree",
        "difficulty": 0,
        "pass": 3,
        "answer": "        if p is None and q is None:\n            return True\n        if p is None or q is None:\n            return False\n        if p.val!= q.val:\n            return False\n        return self.isSameTree(p.left, q.left) and self.isSameTree(p.right, q.right)"
    },
    {
        "number": 100,
        "title": "Same Tree",
        "difficulty": 0,
        "pass": 4,
        "answer": "        if p is None and q is None:\n            return True\n        if p is None or q is None:\n            return False\n        if p.val!= q.val:\n            return False\n        return self.isSameTree(p.left, q.left) and self.isSameTree(p.right, q.right)"
    },
    {
        "number": 100,
        "title": "Same Tree",
        "difficulty": 0,
        "pass": 5,
        "answer": "        if p is None and q is None:\n            return True\n        if p is None or q is None:\n            return False\n        if p.val!= q.val:\n            return False\n        return self.isSameTree(p.left, q.left) and self.isSameTree(p.right, q.right)"
    },
    {
        "number": 100,
        "title": "Same Tree",
        "difficulty": 0,
        "pass": 6,
        "answer": "        if p is None and q is None:\n            return True\n        if p is None or q is None:\n            return False\n        if p.val!= q.val:\n            return False\n        return self.isSameTree(p.left, q.left) and self.isSameTree(p.right, q.right)"
    },
    {
        "number": 100,
        "title": "Same Tree",
        "difficulty": 0,
        "pass": 7,
        "answer": "        if p is None and q is None:\n            return True\n        if p is None or q is None:\n            return False\n        if p.val!= q.val:\n            return False\n        return self.isSameTree(p.left, q.left) and self.isSameTree(p.right, q.right)"
    },
    {
        "number": 100,
        "title": "Same Tree",
        "difficulty": 0,
        "pass": 8,
        "answer": "        if p is None and q is None:\n            return True\n        if p is None or q is None:\n            return False\n        if p.val!= q.val:\n            return False\n        return self.isSameTree(p.left, q.left) and self.isSameTree(p.right, q.right)"
    },
    {
        "number": 100,
        "title": "Same Tree",
        "difficulty": 0,
        "pass": 9,
        "answer": "        if p is None and q is None:\n            return True\n        if p is None or q is None:\n            return False\n        if p.val!= q.val:\n            return False\n        return self.isSameTree(p.left, q.left) and self.isSameTree(p.right, q.right)"
    },
    {
        "number": 101,
        "title": "Symmetric Tree",
        "difficulty": 0,
        "pass": 0,
        "answer": "        if not root:\n            return True\n        return self.isMirror(root.left, root.right)"
    },
    {
        "number": 101,
        "title": "Symmetric Tree",
        "difficulty": 0,
        "pass": 1,
        "answer": "        if not root:\n            return True\n        return self.isMirror(root.left, root.right)"
    },
    {
        "number": 101,
        "title": "Symmetric Tree",
        "difficulty": 0,
        "pass": 2,
        "answer": "        if not root:\n            return True\n        return self.isMirror(root.left, root.right)"
    },
    {
        "number": 101,
        "title": "Symmetric Tree",
        "difficulty": 0,
        "pass": 3,
        "answer": "        if not root:\n            return True\n        return self.isMirror(root.left, root.right)"
    },
    {
        "number": 101,
        "title": "Symmetric Tree",
        "difficulty": 0,
        "pass": 4,
        "answer": "        if not root:\n            return True\n        return self.isMirror(root.left, root.right)"
    },
    {
        "number": 101,
        "title": "Symmetric Tree",
        "difficulty": 0,
        "pass": 5,
        "answer": "        if not root:\n            return True\n        return self.isMirror(root.left, root.right)"
    },
    {
        "number": 101,
        "title": "Symmetric Tree",
        "difficulty": 0,
        "pass": 6,
        "answer": "        if not root:\n            return True\n        return self.isMirror(root.left, root.right)"
    },
    {
        "number": 101,
        "title": "Symmetric Tree",
        "difficulty": 0,
        "pass": 7,
        "answer": "        if not root:\n            return True\n        return self.isMirror(root.left, root.right)"
    },
    {
        "number": 101,
        "title": "Symmetric Tree",
        "difficulty": 0,
        "pass": 8,
        "answer": "        if not root:\n            return True\n        return self.isMirror(root.left, root.right)"
    },
    {
        "number": 101,
        "title": "Symmetric Tree",
        "difficulty": 0,
        "pass": 9,
        "answer": "        if not root:\n            return True\n        return self.helper(root.left, root.right)"
    },
    {
        "number": 102,
        "title": "Binary Tree Level Order Traversal",
        "difficulty": 1,
        "pass": 0,
        "answer": "        if not root:\n            return []\n        queue = [root]\n        res = []\n        while queue:\n            tmp = []\n            for i in range(len(queue)):\n                node = queue.pop(0)\n                tmp.append(node.val)\n                if node.left:\n                    queue.append(node.left)\n                if node.right:\n                    queue.append(node.right)\n            res.append(tmp)\n        return res"
    },
    {
        "number": 102,
        "title": "Binary Tree Level Order Traversal",
        "difficulty": 1,
        "pass": 1,
        "answer": "        if not root:\n            return []\n        res = []\n        queue = [root]\n        while queue:\n            tmp = []\n            for i in range(len(queue)):\n                node = queue.pop(0)\n                tmp.append(node.val)\n                if node.left:\n                    queue.append(node.left)\n                if node.right:\n                    queue.append(node.right)\n            res.append(tmp)\n        return res\n"
    },
    {
        "number": 102,
        "title": "Binary Tree Level Order Traversal",
        "difficulty": 1,
        "pass": 2,
        "answer": "        if not root:\n            return []\n        queue = [root]\n        res = []\n        while queue:\n            tmp = []\n            for i in range(len(queue)):\n                node = queue.pop(0)\n                tmp.append(node.val)\n                if node.left:\n                    queue.append(node.left)\n                if node.right:\n                    queue.append(node.right)\n            res.append(tmp)\n        return res\n"
    },
    {
        "number": 102,
        "title": "Binary Tree Level Order Traversal",
        "difficulty": 1,
        "pass": 3,
        "answer": "        if not root:\n            return []\n        queue = [root]\n        res = []\n        while queue:\n            tmp = []\n            for i in range(len(queue)):\n                node = queue.pop(0)\n                tmp.append(node.val)\n                if node.left:\n                    queue.append(node.left)\n                if node.right:\n                    queue.append(node.right)\n            res.append(tmp)\n        return res"
    },
    {
        "number": 102,
        "title": "Binary Tree Level Order Traversal",
        "difficulty": 1,
        "pass": 4,
        "answer": "        if not root:\n            return []\n        res = []\n        queue = [root]\n        while queue:\n            level = []\n            size = len(queue)\n            for i in range(size):\n                node = queue.pop(0)\n                level.append(node.val)\n                if node.left:\n                    queue.append(node.left)\n                if node.right:\n                    queue.append(node.right)\n            res.append(level)\n        return res"
    },
    {
        "number": 102,
        "title": "Binary Tree Level Order Traversal",
        "difficulty": 1,
        "pass": 5,
        "answer": "        if not root:\n            return []\n        queue = [root]\n        res = []\n        while queue:\n            tmp = []\n            for i in range(len(queue)):\n                node = queue.pop(0)\n                tmp.append(node.val)\n                if node.left:\n                    queue.append(node.left)\n                if node.right:\n                    queue.append(node.right)\n            res.append(tmp)\n        return res"
    },
    {
        "number": 102,
        "title": "Binary Tree Level Order Traversal",
        "difficulty": 1,
        "pass": 6,
        "answer": "        if not root:\n            return []\n        queue = [root]\n        res = []\n        while queue:\n            tmp = []\n            for i in range(len(queue)):\n                node = queue.pop(0)\n                tmp.append(node.val)\n                if node.left:\n                    queue.append(node.left)\n                if node.right:\n                    queue.append(node.right)\n            res.append(tmp)\n        return res\n"
    },
    {
        "number": 102,
        "title": "Binary Tree Level Order Traversal",
        "difficulty": 1,
        "pass": 7,
        "answer": "        if not root:\n            return []\n        res = []\n        curr_level = [root]\n        while curr_level:\n            next_level = []\n            res.append([node.val for node in curr_level])\n            for node in curr_level:\n                if node.left:\n                    next_level.append(node.left)\n                if node.right:\n                    next_level.append(node.right)\n            curr_level = next_level\n        return res"
    },
    {
        "number": 102,
        "title": "Binary Tree Level Order Traversal",
        "difficulty": 1,
        "pass": 8,
        "answer": "        if not root:\n            return []\n        result = []\n        queue = [root]\n        while queue:\n            level = []\n            for i in range(len(queue)):\n                node = queue.pop(0)\n                level.append(node.val)\n                if node.left:\n                    queue.append(node.left)\n                if node.right:\n                    queue.append(node.right)\n            result.append(level)\n        return result"
    },
    {
        "number": 102,
        "title": "Binary Tree Level Order Traversal",
        "difficulty": 1,
        "pass": 9,
        "answer": "        if not root:\n            return []\n        res = []\n        level = [root]\n        while level:\n            res.append([node.val for node in level])\n            next_level = []\n            for node in level:\n                if node.left:\n                    next_level.append(node.left)\n                if node.right:\n                    next_level.append(node.right)\n            level = next_level\n        return res"
    },
    {
        "number": 103,
        "title": "Binary Tree Zigzag Level Order Traversal",
        "difficulty": 1,
        "pass": 0,
        "answer": "        if not root:\n            return []\n        queue = collections.deque([root])\n        result = []\n        while queue:\n            level = []\n            for _ in range(len(queue)):\n                node = queue.popleft()\n                level.append(node.val)\n                if node.left:\n                    queue.append(node.left)\n                if node.right:\n                    queue.append(node.right)\n            result.append(level)\n        for i in range(len(result)):\n            if i % 2 == 1:\n                result[i] = result[i][::-1]\n        return result\n"
    },
    {
        "number": 103,
        "title": "Binary Tree Zigzag Level Order Traversal",
        "difficulty": 1,
        "pass": 1,
        "answer": "        if not root:\n            return []\n        queue = [root]\n        res = []\n        reverse = False\n        while queue:\n            tmp = []\n            for i in range(len(queue)):\n                node = queue.pop(0)\n                tmp.append(node.val)\n                if node.left:\n                    queue.append(node.left)\n                if node.right:\n                    queue.append(node.right)\n            if reverse:\n                res.append(tmp[::-1])\n            else:\n                res.append(tmp)\n            reverse = not reverse\n        return res"
    },
    {
        "number": 103,
        "title": "Binary Tree Zigzag Level Order Traversal",
        "difficulty": 1,
        "pass": 2,
        "answer": "        res = []\n        if not root:\n            return res\n        queue = [root]\n        reverse = False\n        while queue:\n            tmp = []\n            for i in range(len(queue)):\n                node = queue.pop(0)\n                tmp.append(node.val)\n                if node.left:\n                    queue.append(node.left)\n                if node.right:\n                    queue.append(node.right)\n            if reverse:\n                res.append(tmp[::-1])\n            else:\n                res.append(tmp)\n            reverse = not reverse\n        return res\n"
    },
    {
        "number": 103,
        "title": "Binary Tree Zigzag Level Order Traversal",
        "difficulty": 1,
        "pass": 3,
        "answer": "        if not root:\n            return []\n        res = []\n        queue = [root]\n        reverse = False\n        while queue:\n            tmp = []\n            for i in range(len(queue)):\n                node = queue.pop(0)\n                tmp.append(node.val)\n                if node.left:\n                    queue.append(node.left)\n                if node.right:\n                    queue.append(node.right)\n            if reverse:\n                res.append(tmp[::-1])\n            else:\n                res.append(tmp)\n            reverse = not reverse\n        return res"
    },
    {
        "number": 103,
        "title": "Binary Tree Zigzag Level Order Traversal",
        "difficulty": 1,
        "pass": 4,
        "answer": "        if not root:\n            return []\n        queue = [root]\n        res = []\n        reverse = False\n        while queue:\n            n = len(queue)\n            tmp = []\n            for i in range(n):\n                node = queue.pop(0)\n                tmp.append(node.val)\n                if node.left:\n                    queue.append(node.left)\n                if node.right:\n                    queue.append(node.right)\n            if reverse:\n                res.append(tmp[::-1])\n            else:\n                res.append(tmp)\n            reverse = not reverse\n        return res"
    },
    {
        "number": 103,
        "title": "Binary Tree Zigzag Level Order Traversal",
        "difficulty": 1,
        "pass": 5,
        "answer": "        if not root:\n            return []\n        res = []\n        queue = [root]\n        left_to_right = True\n        while queue:\n            level = []\n            for i in range(len(queue)):\n                node = queue.pop(0)\n                level.append(node.val)\n                if node.left:\n                    queue.append(node.left)\n                if node.right:\n                    queue.append(node.right)\n            if left_to_right:\n                res.append(level)\n            else:\n                res.append(level[::-1])\n            left_to_right = not left_to_right\n        return res"
    },
    {
        "number": 103,
        "title": "Binary Tree Zigzag Level Order Traversal",
        "difficulty": 1,
        "pass": 6,
        "answer": "        if not root:\n            return []\n        queue = [root]\n        res = []\n        reverse = False\n        while queue:\n            size = len(queue)\n            tmp = []\n            for i in range(size):\n                node = queue.pop(0)\n                tmp.append(node.val)\n                if node.left:\n                    queue.append(node.left)\n                if node.right:\n                    queue.append(node.right)\n            if reverse:\n                res.append(tmp[::-1])\n            else:\n                res.append(tmp)\n            reverse = not reverse\n        return res"
    },
    {
        "number": 103,
        "title": "Binary Tree Zigzag Level Order Traversal",
        "difficulty": 1,
        "pass": 7,
        "answer": "        if not root:\n            return []\n        queue = collections.deque([root])\n        res = []\n        while queue:\n            level = []\n            for _ in range(len(queue)):\n                node = queue.popleft()\n                level.append(node.val)\n                if node.left:\n                    queue.append(node.left)\n                if node.right:\n                    queue.append(node.right)\n            res.append(level)\n        for i in range(len(res)):\n            if i % 2 == 1:\n                res[i] = res[i][::-1]\n        return res"
    },
    {
        "number": 103,
        "title": "Binary Tree Zigzag Level Order Traversal",
        "difficulty": 1,
        "pass": 8,
        "answer": "        if not root:\n            return []\n        queue = [root]\n        res = []\n        flag = True\n        while queue:\n            tmp = []\n            for i in range(len(queue)):\n                node = queue.pop(0)\n                if flag:\n                    tmp.append(node.val)\n                else:\n                    tmp.insert(0, node.val)\n                if node.left:\n                    queue.append(node.left)\n                if node.right:\n                    queue.append(node.right)\n            res.append(tmp)\n            flag = not flag\n        return res\n"
    },
    {
        "number": 103,
        "title": "Binary Tree Zigzag Level Order Traversal",
        "difficulty": 1,
        "pass": 9,
        "answer": "        if not root:\n            return []\n        queue = [root]\n        res = []\n        level = 0\n        while queue:\n            size = len(queue)\n            tmp = []\n            for i in range(size):\n                node = queue.pop(0)\n                tmp.append(node.val)\n                if node.left:\n                    queue.append(node.left)\n                if node.right:\n                    queue.append(node.right)\n            if level % 2 == 0:\n                res.append(tmp[::-1])\n            else:\n                res.append(tmp)\n            level += 1\n        return res\n"
    },
    {
        "number": 104,
        "title": "Maximum Depth of Binary Tree",
        "difficulty": 0,
        "pass": 0,
        "answer": "        if not root:\n            return 0\n        return 1 + max(self.maxDepth(root.left), self.maxDepth(root.right))"
    },
    {
        "number": 104,
        "title": "Maximum Depth of Binary Tree",
        "difficulty": 0,
        "pass": 1,
        "answer": "        if not root:\n            return 0\n        return 1 + max(self.maxDepth(root.left), self.maxDepth(root.right))"
    },
    {
        "number": 104,
        "title": "Maximum Depth of Binary Tree",
        "difficulty": 0,
        "pass": 2,
        "answer": "        if not root:\n            return 0\n        return 1 + max(self.maxDepth(root.left), self.maxDepth(root.right))"
    },
    {
        "number": 104,
        "title": "Maximum Depth of Binary Tree",
        "difficulty": 0,
        "pass": 3,
        "answer": "        if not root:\n            return 0\n        return 1 + max(self.maxDepth(root.left), self.maxDepth(root.right))"
    },
    {
        "number": 104,
        "title": "Maximum Depth of Binary Tree",
        "difficulty": 0,
        "pass": 4,
        "answer": "        if not root:\n            return 0\n        return 1 + max(self.maxDepth(root.left), self.maxDepth(root.right))"
    },
    {
        "number": 104,
        "title": "Maximum Depth of Binary Tree",
        "difficulty": 0,
        "pass": 5,
        "answer": "        if not root:\n            return 0\n        return 1 + max(self.maxDepth(root.left), self.maxDepth(root.right))"
    },
    {
        "number": 104,
        "title": "Maximum Depth of Binary Tree",
        "difficulty": 0,
        "pass": 6,
        "answer": "        if not root:\n            return 0\n        return 1 + max(self.maxDepth(root.left), self.maxDepth(root.right))"
    },
    {
        "number": 104,
        "title": "Maximum Depth of Binary Tree",
        "difficulty": 0,
        "pass": 7,
        "answer": "        if not root:\n            return 0\n        return 1 + max(self.maxDepth(root.left), self.maxDepth(root.right))"
    },
    {
        "number": 104,
        "title": "Maximum Depth of Binary Tree",
        "difficulty": 0,
        "pass": 8,
        "answer": "        if not root:\n            return 0\n        return 1 + max(self.maxDepth(root.left), self.maxDepth(root.right))"
    },
    {
        "number": 104,
        "title": "Maximum Depth of Binary Tree",
        "difficulty": 0,
        "pass": 9,
        "answer": "        if not root:\n            return 0\n        return 1 + max(self.maxDepth(root.left), self.maxDepth(root.right))"
    },
    {
        "number": 105,
        "title": "Construct Binary Tree from Preorder and Inorder Traversal",
        "difficulty": 1,
        "pass": 0,
        "answer": "        if not preorder or not inorder:\n            return None\n        if len(preorder) == 1:\n            return TreeNode(preorder[0])\n        root = TreeNode(preorder[0])\n        root_index = inorder.index(preorder[0])\n        root.left = self.buildTree(preorder[1:root_index+1], inorder[:root_index])\n        root.right = self.buildTree(preorder[root_index+1:], inorder[root_index+1:])\n        return root"
    },
    {
        "number": 105,
        "title": "Construct Binary Tree from Preorder and Inorder Traversal",
        "difficulty": 1,
        "pass": 1,
        "answer": "        if not preorder:\n            return None\n        root = TreeNode(preorder[0])\n        idx = inorder.index(preorder[0])\n        root.left = self.buildTree(preorder[1:idx+1], inorder[:idx])\n        root.right = self.buildTree(preorder[idx+1:], inorder[idx+1:])\n        return root"
    },
    {
        "number": 105,
        "title": "Construct Binary Tree from Preorder and Inorder Traversal",
        "difficulty": 1,
        "pass": 2,
        "answer": "        if not preorder:\n            return None\n        root = TreeNode(preorder[0])\n        mid = inorder.index(preorder[0])\n        root.left = self.buildTree(preorder[1:mid+1], inorder[:mid])\n        root.right = self.buildTree(preorder[mid+1:], inorder[mid+1:])\n        return root\n"
    },
    {
        "number": 105,
        "title": "Construct Binary Tree from Preorder and Inorder Traversal",
        "difficulty": 1,
        "pass": 3,
        "answer": "        if not preorder:\n            return None\n        root = TreeNode(preorder[0])\n        idx = inorder.index(preorder[0])\n        root.left = self.buildTree(preorder[1:idx+1], inorder[:idx])\n        root.right = self.buildTree(preorder[idx+1:], inorder[idx+1:])\n        return root"
    },
    {
        "number": 105,
        "title": "Construct Binary Tree from Preorder and Inorder Traversal",
        "difficulty": 1,
        "pass": 4,
        "answer": "        if not preorder or not inorder:\n            return None\n        root = TreeNode(preorder[0])\n        idx = inorder.index(preorder[0])\n        root.left = self.buildTree(preorder[1:idx+1], inorder[:idx])\n        root.right = self.buildTree(preorder[idx+1:], inorder[idx+1:])\n        return root"
    },
    {
        "number": 105,
        "title": "Construct Binary Tree from Preorder and Inorder Traversal",
        "difficulty": 1,
        "pass": 5,
        "answer": "        if not preorder or not inorder:\n            return None\n        root = TreeNode(preorder[0])\n        idx = inorder.index(preorder[0])\n        root.left = self.buildTree(preorder[1:idx+1], inorder[:idx])\n        root.right = self.buildTree(preorder[idx+1:], inorder[idx+1:])\n        return root\n"
    },
    {
        "number": 105,
        "title": "Construct Binary Tree from Preorder and Inorder Traversal",
        "difficulty": 1,
        "pass": 6,
        "answer": "        if not preorder:\n            return None\n        root = TreeNode(preorder[0])\n        idx = inorder.index(preorder[0])\n        root.left = self.buildTree(preorder[1:idx+1], inorder[:idx])\n        root.right = self.buildTree(preorder[idx+1:], inorder[idx+1:])\n        return root\n"
    },
    {
        "number": 105,
        "title": "Construct Binary Tree from Preorder and Inorder Traversal",
        "difficulty": 1,
        "pass": 7,
        "answer": "        if not preorder:\n            return None\n        root = TreeNode(preorder[0])\n        idx = inorder.index(preorder[0])\n        root.left = self.buildTree(preorder[1:idx + 1], inorder[:idx])\n        root.right = self.buildTree(preorder[idx + 1:], inorder[idx + 1:])\n        return root"
    },
    {
        "number": 105,
        "title": "Construct Binary Tree from Preorder and Inorder Traversal",
        "difficulty": 1,
        "pass": 8,
        "answer": "        if not preorder or not inorder:\n            return None\n        root = TreeNode(preorder[0])\n        idx = inorder.index(preorder[0])\n        root.left = self.buildTree(preorder[1:idx+1], inorder[:idx])\n        root.right = self.buildTree(preorder[idx+1:], inorder[idx+1:])\n        return root"
    },
    {
        "number": 105,
        "title": "Construct Binary Tree from Preorder and Inorder Traversal",
        "difficulty": 1,
        "pass": 9,
        "answer": "        if not preorder or not inorder:\n            return None\n        root = TreeNode(preorder[0])\n        idx = inorder.index(preorder[0])\n        root.left = self.buildTree(preorder[1:idx+1], inorder[:idx])\n        root.right = self.buildTree(preorder[idx+1:], inorder[idx+1:])\n        return root"
    },
    {
        "number": 106,
        "title": "Construct Binary Tree from Inorder and Postorder Traversal",
        "difficulty": 1,
        "pass": 0,
        "answer": "        if not inorder or not postorder:\n            return None\n        root = TreeNode(postorder[-1])\n        idx = inorder.index(postorder[-1])\n        root.left = self.buildTree(inorder[:idx], postorder[:idx])\n        root.right = self.buildTree(inorder[idx+1:], postorder[idx:-1])\n        return root\n"
    },
    {
        "number": 106,
        "title": "Construct Binary Tree from Inorder and Postorder Traversal",
        "difficulty": 1,
        "pass": 1,
        "answer": "        if not inorder or not postorder:\n            return None\n        root = TreeNode(postorder.pop())\n        idx = inorder.index(root.val)\n        root.left = self.buildTree(inorder[:idx], postorder[:idx])\n        root.right = self.buildTree(inorder[idx+1:], postorder[idx:])\n        return root\n"
    },
    {
        "number": 106,
        "title": "Construct Binary Tree from Inorder and Postorder Traversal",
        "difficulty": 1,
        "pass": 2,
        "answer": "        if not inorder or not postorder:\n            return None\n        return self.build(inorder, 0, len(inorder) - 1, postorder, 0, len(postorder) - 1)"
    },
    {
        "number": 106,
        "title": "Construct Binary Tree from Inorder and Postorder Traversal",
        "difficulty": 1,
        "pass": 3,
        "answer": "        if not inorder or not postorder:\n            return None\n        root = TreeNode(postorder[-1])\n        idx = inorder.index(postorder[-1])\n        root.left = self.buildTree(inorder[:idx], postorder[:idx])\n        root.right = self.buildTree(inorder[idx+1:], postorder[idx:-1])\n        return root\n"
    },
    {
        "number": 106,
        "title": "Construct Binary Tree from Inorder and Postorder Traversal",
        "difficulty": 1,
        "pass": 4,
        "answer": "        if not inorder or not postorder:\n            return None\n        root = TreeNode(postorder[-1])\n        idx = inorder.index(postorder[-1])\n        root.left = self.buildTree(inorder[:idx], postorder[:idx])\n        root.right = self.buildTree(inorder[idx+1:], postorder[idx:-1])\n        return root\n"
    },
    {
        "number": 106,
        "title": "Construct Binary Tree from Inorder and Postorder Traversal",
        "difficulty": 1,
        "pass": 5,
        "answer": "        if not inorder or not postorder:\n            return None"
    },
    {
        "number": 106,
        "title": "Construct Binary Tree from Inorder and Postorder Traversal",
        "difficulty": 1,
        "pass": 6,
        "answer": "        if not inorder or not postorder:\n            return None\n        root = TreeNode(postorder[-1])\n        idx = inorder.index(postorder[-1])\n        root.left = self.buildTree(inorder[:idx], postorder[:idx])\n        root.right = self.buildTree(inorder[idx+1:], postorder[idx:-1])\n        return root\n"
    },
    {
        "number": 106,
        "title": "Construct Binary Tree from Inorder and Postorder Traversal",
        "difficulty": 1,
        "pass": 7,
        "answer": "        if not inorder or not postorder:\n            return None\n        root = TreeNode(postorder[-1])\n        idx = inorder.index(postorder[-1])\n        root.left = self.buildTree(inorder[:idx], postorder[:idx])\n        root.right = self.buildTree(inorder[idx+1:], postorder[idx:-1])\n        return root\n"
    },
    {
        "number": 106,
        "title": "Construct Binary Tree from Inorder and Postorder Traversal",
        "difficulty": 1,
        "pass": 8,
        "answer": "        if not inorder or not postorder:\n            return None\n        root = TreeNode(postorder[-1])\n        idx = inorder.index(postorder[-1])\n        root.left = self.buildTree(inorder[:idx], postorder[:idx])\n        root.right = self.buildTree(inorder[idx+1:], postorder[idx:-1])\n        return root\n"
    },
    {
        "number": 106,
        "title": "Construct Binary Tree from Inorder and Postorder Traversal",
        "difficulty": 1,
        "pass": 9,
        "answer": "        if not inorder or not postorder:\n            return None\n        root = TreeNode(postorder[-1])\n        idx = inorder.index(postorder[-1])\n        root.left = self.buildTree(inorder[:idx], postorder[:idx])\n        root.right = self.buildTree(inorder[idx+1:], postorder[idx:-1])\n        return root\n"
    },
    {
        "number": 107,
        "title": "Binary Tree Level Order Traversal II",
        "difficulty": 1,
        "pass": 0,
        "answer": "        if not root:\n            return []\n        queue = [root]\n        res = []\n        while queue:\n            n = len(queue)\n            tmp = []\n            for i in range(n):\n                node = queue.pop(0)\n                tmp.append(node.val)\n                if node.left:\n                    queue.append(node.left)\n                if node.right:\n                    queue.append(node.right)\n            res.append(tmp)\n        return res[::-1]"
    },
    {
        "number": 107,
        "title": "Binary Tree Level Order Traversal II",
        "difficulty": 1,
        "pass": 1,
        "answer": "        if not root:\n            return []\n        res = []\n        queue = [root]\n        while queue:\n            tmp = []\n            for i in range(len(queue)):\n                node = queue.pop(0)\n                tmp.append(node.val)\n                if node.left:\n                    queue.append(node.left)\n                if node.right:\n                    queue.append(node.right)\n            res.append(tmp)\n        return res[::-1]"
    },
    {
        "number": 107,
        "title": "Binary Tree Level Order Traversal II",
        "difficulty": 1,
        "pass": 2,
        "answer": "        if not root:\n            return []\n        queue = [root]\n        res = []\n        while queue:\n            level = []\n            size = len(queue)\n            for i in range(size):\n                node = queue.pop(0)\n                level.append(node.val)\n                if node.left:\n                    queue.append(node.left)\n                if node.right:\n                    queue.append(node.right)\n            res.append(level)\n        return res[::-1]"
    },
    {
        "number": 107,
        "title": "Binary Tree Level Order Traversal II",
        "difficulty": 1,
        "pass": 3,
        "answer": "        if not root:\n            return []\n        queue = [root]\n        res = []\n        while queue:\n            n = len(queue)\n            tmp = []\n            for i in range(n):\n                node = queue.pop(0)\n                tmp.append(node.val)\n                if node.left:\n                    queue.append(node.left)\n                if node.right:\n                    queue.append(node.right)\n            res.append(tmp)\n        return res[::-1]"
    },
    {
        "number": 107,
        "title": "Binary Tree Level Order Traversal II",
        "difficulty": 1,
        "pass": 4,
        "answer": "        if not root:\n            return []\n        queue = [root]\n        res = []\n        while queue:\n            tmp = []\n            for i in range(len(queue)):\n                node = queue.pop(0)\n                tmp.append(node.val)\n                if node.left:\n                    queue.append(node.left)\n                if node.right:\n                    queue.append(node.right)\n            res.append(tmp)\n        return res[::-1]"
    },
    {
        "number": 107,
        "title": "Binary Tree Level Order Traversal II",
        "difficulty": 1,
        "pass": 5,
        "answer": "        if not root:\n            return []\n        queue = [root]\n        res = []\n        while queue:\n            tmp = []\n            n = len(queue)\n            for i in range(n):\n                node = queue.pop(0)\n                tmp.append(node.val)\n                if node.left:\n                    queue.append(node.left)\n                if node.right:\n                    queue.append(node.right)\n            res.append(tmp)\n        return res[::-1]"
    },
    {
        "number": 107,
        "title": "Binary Tree Level Order Traversal II",
        "difficulty": 1,
        "pass": 6,
        "answer": "        if not root:\n            return []\n        queue = [root]\n        res = []\n        while queue:\n            tmp = []\n            for i in range(len(queue)):\n                node = queue.pop(0)\n                tmp.append(node.val)\n                if node.left:\n                    queue.append(node.left)\n                if node.right:\n                    queue.append(node.right)\n            res.append(tmp)\n        return res[::-1]"
    },
    {
        "number": 107,
        "title": "Binary Tree Level Order Traversal II",
        "difficulty": 1,
        "pass": 7,
        "answer": "        if not root:\n            return []\n        res = []\n        curr_level = [root]\n        while curr_level:\n            res.append([node.val for node in curr_level])\n            next_level = []\n            for node in curr_level:\n                if node.left:\n                    next_level.append(node.left)\n                if node.right:\n                    next_level.append(node.right)\n            curr_level = next_level\n        return res[::-1]"
    },
    {
        "number": 107,
        "title": "Binary Tree Level Order Traversal II",
        "difficulty": 1,
        "pass": 8,
        "answer": "        if not root:\n            return []\n        res = []\n        stack = [root]\n        while stack:\n            n = len(stack)\n            tmp = []\n            for i in range(n):\n                node = stack.pop(0)\n                tmp.append(node.val)\n                if node.left:\n                    stack.append(node.left)\n                if node.right:\n                    stack.append(node.right)\n            res.append(tmp)\n        return res[::-1]"
    },
    {
        "number": 107,
        "title": "Binary Tree Level Order Traversal II",
        "difficulty": 1,
        "pass": 9,
        "answer": "        if not root:\n            return []\n        queue = [root]\n        res = []\n        while queue:\n            n = len(queue)\n            tmp = []\n            for i in range(n):\n                node = queue.pop(0)\n                tmp.append(node.val)\n                if node.left:\n                    queue.append(node.left)\n                if node.right:\n                    queue.append(node.right)\n            res.append(tmp)\n        return res[::-1]"
    },
    {
        "number": 108,
        "title": "Convert Sorted Array to Binary Search Tree",
        "difficulty": 0,
        "pass": 0,
        "answer": "        if not nums:\n            return None\n        mid = len(nums) // 2\n        root = TreeNode(nums[mid])\n        root.left = self.sortedArrayToBST(nums[:mid])\n        root.right = self.sortedArrayToBST(nums[mid + 1:])\n        return root"
    },
    {
        "number": 108,
        "title": "Convert Sorted Array to Binary Search Tree",
        "difficulty": 0,
        "pass": 1,
        "answer": "        if not nums:\n            return None\n        mid = len(nums) // 2\n        root = TreeNode(nums[mid])\n        root.left = self.sortedArrayToBST(nums[:mid])\n        root.right = self.sortedArrayToBST(nums[mid + 1:])\n        return root\n"
    },
    {
        "number": 108,
        "title": "Convert Sorted Array to Binary Search Tree",
        "difficulty": 0,
        "pass": 2,
        "answer": "        if not nums:\n            return None\n        mid = len(nums) // 2\n        root = TreeNode(nums[mid])\n        root.left = self.sortedArrayToBST(nums[:mid])\n        root.right = self.sortedArrayToBST(nums[mid+1:])\n        return root\n"
    },
    {
        "number": 108,
        "title": "Convert Sorted Array to Binary Search Tree",
        "difficulty": 0,
        "pass": 3,
        "answer": "        def helper(left, right):\n            if left > right:\n                return None\n            mid = (left + right) // 2\n            node = TreeNode(nums[mid])\n            node.left = helper(left, mid - 1)\n            node.right = helper(mid + 1, right)\n            return node\n        return helper(0, len(nums) - 1)"
    },
    {
        "number": 108,
        "title": "Convert Sorted Array to Binary Search Tree",
        "difficulty": 0,
        "pass": 4,
        "answer": "        if not nums:\n            return None\n        mid = len(nums) // 2\n        root = TreeNode(nums[mid])\n        root.left = self.sortedArrayToBST(nums[:mid])\n        root.right = self.sortedArrayToBST(nums[mid+1:])\n        return root\n"
    },
    {
        "number": 108,
        "title": "Convert Sorted Array to Binary Search Tree",
        "difficulty": 0,
        "pass": 5,
        "answer": "        if not nums:\n            return None\n        mid = len(nums) // 2\n        root = TreeNode(nums[mid])\n        root.left = self.sortedArrayToBST(nums[:mid])\n        root.right = self.sortedArrayToBST(nums[mid + 1:])\n        return root"
    },
    {
        "number": 108,
        "title": "Convert Sorted Array to Binary Search Tree",
        "difficulty": 0,
        "pass": 6,
        "answer": "        if not nums:\n            return None\n        mid = len(nums) // 2\n        root = TreeNode(nums[mid])\n        root.left = self.sortedArrayToBST(nums[:mid])\n        root.right = self.sortedArrayToBST(nums[mid + 1:])\n        return root"
    },
    {
        "number": 108,
        "title": "Convert Sorted Array to Binary Search Tree",
        "difficulty": 0,
        "pass": 7,
        "answer": "        if not nums:\n            return None\n        mid = len(nums) // 2\n        root = TreeNode(nums[mid])\n        root.left = self.sortedArrayToBST(nums[:mid])\n        root.right = self.sortedArrayToBST(nums[mid + 1:])\n        return root\n"
    },
    {
        "number": 108,
        "title": "Convert Sorted Array to Binary Search Tree",
        "difficulty": 0,
        "pass": 8,
        "answer": "        if not nums:\n            return None\n        mid = len(nums) // 2\n        root = TreeNode(nums[mid])\n        root.left = self.sortedArrayToBST(nums[:mid])\n        root.right = self.sortedArrayToBST(nums[mid + 1:])\n        return root"
    },
    {
        "number": 108,
        "title": "Convert Sorted Array to Binary Search Tree",
        "difficulty": 0,
        "pass": 9,
        "answer": "        if not nums:\n            return None\n        mid = len(nums) // 2\n        root = TreeNode(nums[mid])\n        root.left = self.sortedArrayToBST(nums[:mid])\n        root.right = self.sortedArrayToBST(nums[mid + 1:])\n        return root"
    },
    {
        "number": 109,
        "title": "Convert Sorted List to Binary Search Tree",
        "difficulty": 1,
        "pass": 0,
        "answer": "        if not head:\n            return None\n        if not head.next:\n            return TreeNode(head.val)\n        slow, fast = head, head.next\n        while fast and fast.next:\n            slow = slow.next\n            fast = fast.next.next\n        root = TreeNode(slow.val)\n        root.left = self.sortedListToBST(head)\n        root.right = self.sortedListToBST(slow.next)\n        return root"
    },
    {
        "number": 109,
        "title": "Convert Sorted List to Binary Search Tree",
        "difficulty": 1,
        "pass": 1,
        "answer": "        if not head:\n            return None\n        if not head.next:\n            return TreeNode(head.val)\n        slow, fast = head, head.next.next\n        while fast and fast.next:\n            fast = fast.next.next\n            slow = slow.next\n        root = TreeNode(slow.val)\n        root.left = self.sortedListToBST(head)\n        root.right = self.sortedListToBST(slow.next)\n        return root"
    },
    {
        "number": 109,
        "title": "Convert Sorted List to Binary Search Tree",
        "difficulty": 1,
        "pass": 2,
        "answer": "        if not head:\n            return None\n        nums = []\n        while head:\n            nums.append(head.val)\n            head = head.next\n        return self.helper(nums)"
    },
    {
        "number": 109,
        "title": "Convert Sorted List to Binary Search Tree",
        "difficulty": 1,
        "pass": 3,
        "answer": "        if not head:\n            return None\n        nums = []\n        while head:\n            nums.append(head.val)\n            head = head.next\n        return self.buildTree(nums)"
    },
    {
        "number": 109,
        "title": "Convert Sorted List to Binary Search Tree",
        "difficulty": 1,
        "pass": 4,
        "answer": "        if not head:\n            return None\n        if not head.next:\n            return TreeNode(head.val)\n        pre, slow, fast = None, head, head\n        while fast and fast.next:\n            pre = slow\n            slow = slow.next\n            fast = fast.next.next\n        if pre:\n            pre.next = None\n        root = TreeNode(slow.val)\n        root.left = self.sortedListToBST(head)\n        root.right = self.sortedListToBST(slow.next)\n        return root"
    },
    {
        "number": 109,
        "title": "Convert Sorted List to Binary Search Tree",
        "difficulty": 1,
        "pass": 5,
        "answer": "        if not head:\n            return None\n        if not head.next:\n            return TreeNode(head.val)\n        slow, fast = head, head.next\n        while fast and fast.next:\n            slow = slow.next\n            fast = fast.next.next\n        root = TreeNode(slow.val)\n        root.left = self.sortedListToBST(head)\n        root.right = self.sortedListToBST(slow.next)\n        return root"
    },
    {
        "number": 109,
        "title": "Convert Sorted List to Binary Search Tree",
        "difficulty": 1,
        "pass": 6,
        "answer": "        if not head:\n            return None\n        nums = []\n        while head:\n            nums.append(head.val)\n            head = head.next\n        return self.helper(nums)"
    },
    {
        "number": 109,
        "title": "Convert Sorted List to Binary Search Tree",
        "difficulty": 1,
        "pass": 7,
        "answer": "        if not head:\n            return None\n        if not head.next:\n            return TreeNode(head.val)\n        slow, fast = head, head\n        while fast and fast.next:\n            slow = slow.next\n            fast = fast.next.next\n        root = TreeNode(slow.val)\n        root.left = self.sortedListToBST(head)\n        root.right = self.sortedListToBST(slow.next)\n        return root"
    },
    {
        "number": 109,
        "title": "Convert Sorted List to Binary Search Tree",
        "difficulty": 1,
        "pass": 8,
        "answer": "        if not head:\n            return None\n        if not head.next:\n            return TreeNode(head.val)\n        slow, fast = head, head.next.next\n        while fast and fast.next:\n            slow = slow.next\n            fast = fast.next.next\n        root = TreeNode(slow.val)\n        root.left = self.sortedListToBST(head)\n        root.right = self.sortedListToBST(slow.next)\n        return root\n"
    },
    {
        "number": 109,
        "title": "Convert Sorted List to Binary Search Tree",
        "difficulty": 1,
        "pass": 9,
        "answer": "        if not head:\n            return None\n        if not head.next:\n            return TreeNode(head.val)\n        slow, fast = head, head.next.next\n        while fast and fast.next:\n            fast = fast.next.next\n            slow = slow.next\n        root = TreeNode(slow.val)\n        root.left = self.sortedListToBST(head)\n        root.right = self.sortedListToBST(slow.next)\n        return root"
    },
    {
        "number": 110,
        "title": "Balanced Binary Tree",
        "difficulty": 0,
        "pass": 0,
        "answer": "        if not root:\n            return True\n        return self.helper(root)!= -1"
    },
    {
        "number": 110,
        "title": "Balanced Binary Tree",
        "difficulty": 0,
        "pass": 1,
        "answer": "        if not root:\n            return True\n        if abs(self.depth(root.left) - self.depth(root.right)) > 1:\n            return False\n        return self.isBalanced(root.left) and self.isBalanced(root.right)"
    },
    {
        "number": 110,
        "title": "Balanced Binary Tree",
        "difficulty": 0,
        "pass": 2,
        "answer": "        if not root:\n            return True\n        if abs(self.height(root.left) - self.height(root.right)) > 1:\n            return False\n        return self.isBalanced(root.left) and self.isBalanced(root.right)"
    },
    {
        "number": 110,
        "title": "Balanced Binary Tree",
        "difficulty": 0,
        "pass": 3,
        "answer": "        return self.helper(root)!= -1"
    },
    {
        "number": 110,
        "title": "Balanced Binary Tree",
        "difficulty": 0,
        "pass": 4,
        "answer": "        if not root:\n            return True\n        return self.helper(root)!= -1"
    },
    {
        "number": 110,
        "title": "Balanced Binary Tree",
        "difficulty": 0,
        "pass": 5,
        "answer": "        def dfs(node):\n            if not node:\n                return 0\n            left = dfs(node.left)\n            right = dfs(node.right)\n            if left == -1 or right == -1 or abs(left - right) > 1:\n                return -1\n            return max(left, right) + 1\n        return dfs(root)!= -1"
    },
    {
        "number": 110,
        "title": "Balanced Binary Tree",
        "difficulty": 0,
        "pass": 6,
        "answer": "        if not root:\n            return True\n        if abs(self.height(root.left) - self.height(root.right)) > 1:\n            return False\n        return self.isBalanced(root.left) and self.isBalanced(root.right)"
    },
    {
        "number": 110,
        "title": "Balanced Binary Tree",
        "difficulty": 0,
        "pass": 7,
        "answer": "        if not root:\n            return True\n        return self.helper(root)!= -1"
    },
    {
        "number": 110,
        "title": "Balanced Binary Tree",
        "difficulty": 0,
        "pass": 8,
        "answer": "        if not root:\n            return True\n        if abs(self.height(root.left) - self.height(root.right)) > 1:\n            return False\n        return self.isBalanced(root.left) and self.isBalanced(root.right)"
    },
    {
        "number": 110,
        "title": "Balanced Binary Tree",
        "difficulty": 0,
        "pass": 9,
        "answer": "        def helper(node):\n            if not node:\n                return 0\n            left = helper(node.left)\n            if left == -1:\n                return -1\n            right = helper(node.right)\n            if right == -1:\n                return -1\n            if abs(left - right) > 1:\n                return -1\n            return max(left, right) + 1\n        return helper(root)!= -1"
    },
    {
        "number": 111,
        "title": "Minimum Depth of Binary Tree",
        "difficulty": 0,
        "pass": 0,
        "answer": "        if not root:\n            return 0\n        if not root.left and not root.right:\n            return 1\n        if not root.left:\n            return self.minDepth(root.right) + 1\n        if not root.right:\n            return self.minDepth(root.left) + 1\n        return min(self.minDepth(root.left), self.minDepth(root.right)) + 1"
    },
    {
        "number": 111,
        "title": "Minimum Depth of Binary Tree",
        "difficulty": 0,
        "pass": 1,
        "answer": "        if not root:\n            return 0\n        if not root.left and not root.right:\n            return 1\n        if not root.left:\n            return self.minDepth(root.right) + 1\n        if not root.right:\n            return self.minDepth(root.left) + 1\n        return min(self.minDepth(root.left), self.minDepth(root.right)) + 1"
    },
    {
        "number": 111,
        "title": "Minimum Depth of Binary Tree",
        "difficulty": 0,
        "pass": 2,
        "answer": "        if not root:\n            return 0\n        if not root.left and not root.right:\n            return 1\n        if not root.left:\n            return self.minDepth(root.right) + 1\n        if not root.right:\n            return self.minDepth(root.left) + 1\n        return min(self.minDepth(root.left), self.minDepth(root.right)) + 1"
    },
    {
        "number": 111,
        "title": "Minimum Depth of Binary Tree",
        "difficulty": 0,
        "pass": 3,
        "answer": "        if not root:\n            return 0\n        if not root.left and not root.right:\n            return 1\n        if not root.left:\n            return self.minDepth(root.right) + 1\n        if not root.right:\n            return self.minDepth(root.left) + 1\n        return min(self.minDepth(root.left), self.minDepth(root.right)) + 1"
    },
    {
        "number": 111,
        "title": "Minimum Depth of Binary Tree",
        "difficulty": 0,
        "pass": 4,
        "answer": "        if not root:\n            return 0\n        if not root.left and not root.right:\n            return 1\n        if not root.left:\n            return self.minDepth(root.right) + 1\n        if not root.right:\n            return self.minDepth(root.left) + 1\n        return min(self.minDepth(root.left), self.minDepth(root.right)) + 1"
    },
    {
        "number": 111,
        "title": "Minimum Depth of Binary Tree",
        "difficulty": 0,
        "pass": 5,
        "answer": "        if not root:\n            return 0\n        if not root.left and not root.right:\n            return 1\n        if not root.left:\n            return self.minDepth(root.right) + 1\n        if not root.right:\n            return self.minDepth(root.left) + 1\n        return min(self.minDepth(root.left), self.minDepth(root.right)) + 1\n"
    },
    {
        "number": 111,
        "title": "Minimum Depth of Binary Tree",
        "difficulty": 0,
        "pass": 6,
        "answer": "        if not root:\n            return 0\n        if not root.left and not root.right:\n            return 1\n        if not root.left:\n            return self.minDepth(root.right) + 1\n        if not root.right:\n            return self.minDepth(root.left) + 1\n        return min(self.minDepth(root.left), self.minDepth(root.right)) + 1"
    },
    {
        "number": 111,
        "title": "Minimum Depth of Binary Tree",
        "difficulty": 0,
        "pass": 7,
        "answer": "        if not root:\n            return 0\n        if not root.left and not root.right:\n            return 1\n        if not root.left and root.right:\n            return self.minDepth(root.right) + 1\n        if not root.right and root.left:\n            return self.minDepth(root.left) + 1\n        return min(self.minDepth(root.left), self.minDepth(root.right)) + 1"
    },
    {
        "number": 111,
        "title": "Minimum Depth of Binary Tree",
        "difficulty": 0,
        "pass": 8,
        "answer": "        if not root:\n            return 0\n        if not root.left and not root.right:\n            return 1\n        if not root.left:\n            return self.minDepth(root.right) + 1\n        if not root.right:\n            return self.minDepth(root.left) + 1\n        return min(self.minDepth(root.left), self.minDepth(root.right)) + 1\n"
    },
    {
        "number": 111,
        "title": "Minimum Depth of Binary Tree",
        "difficulty": 0,
        "pass": 9,
        "answer": "        if not root:\n            return 0\n        if not root.left and not root.right:\n            return 1\n        if not root.left:\n            return self.minDepth(root.right) + 1\n        if not root.right:\n            return self.minDepth(root.left) + 1\n        return min(self.minDepth(root.left), self.minDepth(root.right)) + 1\n"
    },
    {
        "number": 112,
        "title": "Path Sum",
        "difficulty": 0,
        "pass": 0,
        "answer": "        if not root:\n            return False\n        if not root.left and not root.right:\n            return targetSum == root.val\n        return self.hasPathSum(root.left, targetSum - root.val) or self.hasPathSum(root.right, targetSum - root.val)"
    },
    {
        "number": 112,
        "title": "Path Sum",
        "difficulty": 0,
        "pass": 1,
        "answer": "        if not root:\n            return False\n        if not root.left and not root.right:\n            return targetSum == root.val\n        return self.hasPathSum(root.left, targetSum - root.val) or self.hasPathSum(root.right, targetSum - root.val)"
    },
    {
        "number": 112,
        "title": "Path Sum",
        "difficulty": 0,
        "pass": 2,
        "answer": "        if not root:\n            return False\n        if not root.left and not root.right:\n            return targetSum == root.val\n        return self.hasPathSum(root.left, targetSum - root.val) or self.hasPathSum(root.right, targetSum - root.val)"
    },
    {
        "number": 112,
        "title": "Path Sum",
        "difficulty": 0,
        "pass": 3,
        "answer": "        if not root:\n            return False\n        if not root.left and not root.right:\n            return targetSum == root.val\n        return self.hasPathSum(root.left, targetSum - root.val) or self.hasPathSum(root.right, targetSum - root.val)"
    },
    {
        "number": 112,
        "title": "Path Sum",
        "difficulty": 0,
        "pass": 4,
        "answer": "        if not root:\n            return False\n        if not root.left and not root.right:\n            return targetSum == root.val\n        return self.hasPathSum(root.left, targetSum - root.val) or self.hasPathSum(root.right, targetSum - root.val)"
    },
    {
        "number": 112,
        "title": "Path Sum",
        "difficulty": 0,
        "pass": 5,
        "answer": "        if not root:\n            return False\n        if not root.left and not root.right:\n            return targetSum == root.val\n        return self.hasPathSum(root.left, targetSum - root.val) or self.hasPathSum(root.right, targetSum - root.val)"
    },
    {
        "number": 112,
        "title": "Path Sum",
        "difficulty": 0,
        "pass": 6,
        "answer": "        if not root:\n            return False\n        if not root.left and not root.right:\n            return targetSum == root.val\n        return self.hasPathSum(root.left, targetSum - root.val) or self.hasPathSum(root.right, targetSum - root.val)"
    },
    {
        "number": 112,
        "title": "Path Sum",
        "difficulty": 0,
        "pass": 7,
        "answer": "        if not root:\n            return False\n        if not root.left and not root.right:\n            return targetSum == root.val\n        return self.hasPathSum(root.left, targetSum - root.val) or self.hasPathSum(root.right, targetSum - root.val)"
    },
    {
        "number": 112,
        "title": "Path Sum",
        "difficulty": 0,
        "pass": 8,
        "answer": "        if not root:\n            return False\n        if not root.left and not root.right:\n            return targetSum == root.val\n        return self.hasPathSum(root.left, targetSum - root.val) or self.hasPathSum(root.right, targetSum - root.val)"
    },
    {
        "number": 112,
        "title": "Path Sum",
        "difficulty": 0,
        "pass": 9,
        "answer": "        if not root:\n            return False\n        if not root.left and not root.right:\n            return targetSum == root.val\n        return self.hasPathSum(root.left, targetSum - root.val) or self.hasPathSum(root.right, targetSum - root.val)"
    },
    {
        "number": 113,
        "title": "Path Sum II",
        "difficulty": 1,
        "pass": 0,
        "answer": "        if not root:\n            return []\n        res = []\n        self.dfs(root, targetSum, [], res)\n        return res"
    },
    {
        "number": 113,
        "title": "Path Sum II",
        "difficulty": 1,
        "pass": 1,
        "answer": "        if not root:\n            return []\n        res = []\n        self.dfs(root, targetSum, [], res)\n        return res"
    },
    {
        "number": 113,
        "title": "Path Sum II",
        "difficulty": 1,
        "pass": 2,
        "answer": "        if not root:\n            return []\n        res = []\n        self.helper(root, targetSum, [], res)\n        return res"
    },
    {
        "number": 113,
        "title": "Path Sum II",
        "difficulty": 1,
        "pass": 3,
        "answer": "        if not root:\n            return []\n        if not root.left and not root.right and root.val == targetSum:\n            return [[root.val]]\n        res = []\n        if root.left:\n            res += self.pathSum(root.left, targetSum - root.val)\n        if root.right:\n            res += self.pathSum(root.right, targetSum - root.val)\n        for path in res:\n            path.insert(0, root.val)\n        return res\n"
    },
    {
        "number": 113,
        "title": "Path Sum II",
        "difficulty": 1,
        "pass": 4,
        "answer": "        res = []\n        self.dfs(root, targetSum, [], res)\n        return res"
    },
    {
        "number": 113,
        "title": "Path Sum II",
        "difficulty": 1,
        "pass": 5,
        "answer": "        if not root:\n            return []\n        res = []\n        self.dfs(root, targetSum, [], res)\n        return res"
    },
    {
        "number": 113,
        "title": "Path Sum II",
        "difficulty": 1,
        "pass": 6,
        "answer": "        if not root:\n            return []\n        if not root.left and not root.right:\n            if root.val == targetSum:\n                return [[root.val]]\n            else:\n                return []\n        res = []\n        self.helper(root, targetSum, [], res)\n        return res"
    },
    {
        "number": 113,
        "title": "Path Sum II",
        "difficulty": 1,
        "pass": 7,
        "answer": "        if not root:\n            return []\n        res = []\n        self.dfs(root, targetSum, [], res)\n        return res"
    },
    {
        "number": 113,
        "title": "Path Sum II",
        "difficulty": 1,
        "pass": 8,
        "answer": "        if not root:\n            return []\n        res = []\n        self.dfs(root, targetSum, [], res)\n        return res"
    },
    {
        "number": 113,
        "title": "Path Sum II",
        "difficulty": 1,
        "pass": 9,
        "answer": "        if not root:\n            return []\n        res = []\n        self.dfs(root, targetSum, [], res)\n        return res"
    },
    {
        "number": 114,
        "title": "Flatten Binary Tree to Linked List",
        "difficulty": 1,
        "pass": 0,
        "answer": "        if not root:\n            return\n        stack = [root]\n        while stack:\n            node = stack.pop()\n            if node.right:\n                stack.append(node.right)\n            if node.left:\n                stack.append(node.left)\n            node.left = None\n            node.right = stack[-1] if stack else None"
    },
    {
        "number": 114,
        "title": "Flatten Binary Tree to Linked List",
        "difficulty": 1,
        "pass": 1,
        "answer": "        if not root:\n            return\n        self.helper(root)"
    },
    {
        "number": 114,
        "title": "Flatten Binary Tree to Linked List",
        "difficulty": 1,
        "pass": 2,
        "answer": "        if not root:\n            return\n        stack = [root]\n        while stack:\n            node = stack.pop()\n            if node.right:\n                stack.append(node.right)\n            if node.left:\n                stack.append(node.left)\n            node.left = None\n            node.right = stack[-1] if stack else None"
    },
    {
        "number": 114,
        "title": "Flatten Binary Tree to Linked List",
        "difficulty": 1,
        "pass": 3,
        "answer": "        if not root:\n            return\n        stack = [root]\n        while stack:\n            node = stack.pop()\n            if node.right:\n                stack.append(node.right)\n            if node.left:\n                stack.append(node.left)\n            node.left = None\n            node.right = stack[-1] if stack else None"
    },
    {
        "number": 114,
        "title": "Flatten Binary Tree to Linked List",
        "difficulty": 1,
        "pass": 4,
        "answer": "        if not root:\n            return\n        self.helper(root)"
    },
    {
        "number": 114,
        "title": "Flatten Binary Tree to Linked List",
        "difficulty": 1,
        "pass": 5,
        "answer": "        self.helper(root)"
    },
    {
        "number": 114,
        "title": "Flatten Binary Tree to Linked List",
        "difficulty": 1,
        "pass": 6,
        "answer": "        if not root:\n            return\n        self.dfs(root)"
    },
    {
        "number": 114,
        "title": "Flatten Binary Tree to Linked List",
        "difficulty": 1,
        "pass": 7,
        "answer": "        if not root:\n            return\n        stack = [root]\n        while stack:\n            node = stack.pop()\n            if node.right:\n                stack.append(node.right)\n            if node.left:\n                stack.append(node.left)\n            node.left = None\n            node.right = stack[-1] if stack else None"
    },
    {
        "number": 114,
        "title": "Flatten Binary Tree to Linked List",
        "difficulty": 1,
        "pass": 8,
        "answer": "        if not root:\n            return\n        stack = [root]\n        while stack:\n            node = stack.pop()\n            if node.right:\n                stack.append(node.right)\n            if node.left:\n                stack.append(node.left)\n            node.left = None\n            node.right = stack[-1] if stack else None"
    },
    {
        "number": 114,
        "title": "Flatten Binary Tree to Linked List",
        "difficulty": 1,
        "pass": 9,
        "answer": "        if not root:\n            return\n        stack = [root]\n        while stack:\n            node = stack.pop()\n            if node.right:\n                stack.append(node.right)\n            if node.left:\n                stack.append(node.left)\n            if stack:\n                node.right = stack[-1]\n            node.left = None\n"
    },
    {
        "number": 115,
        "title": "Distinct Subsequences",
        "difficulty": 2,
        "pass": 0,
        "answer": "        m, n = len(s), len(t)\n        if m < n:\n            return 0\n        dp = [[0] * (n + 1) for _ in range(m + 1)]\n        for i in range(m + 1):\n            dp[i][0] = 1\n        for i in range(1, m + 1):\n            for j in range(1, n + 1):\n                if s[i - 1] == t[j - 1]:\n                    dp[i][j] = dp[i - 1][j - 1] + dp[i - 1][j]\n                else:\n                    dp[i][j] = dp[i - 1][j]\n        return dp[m][n]"
    },
    {
        "number": 115,
        "title": "Distinct Subsequences",
        "difficulty": 2,
        "pass": 1,
        "answer": "        m, n = len(s), len(t)\n        if m < n:\n            return 0\n        dp = [[0] * (n + 1) for _ in range(m + 1)]\n        for i in range(m + 1):\n            dp[i][0] = 1\n        for i in range(1, m + 1):\n            for j in range(1, n + 1):\n                if s[i - 1] == t[j - 1]:\n                    dp[i][j] = dp[i - 1][j - 1] + dp[i - 1][j]\n                else:\n                    dp[i][j] = dp[i - 1][j]\n        return dp[m][n]"
    },
    {
        "number": 115,
        "title": "Distinct Subsequences",
        "difficulty": 2,
        "pass": 2,
        "answer": "        if len(s) < len(t):\n            return 0\n        dp = [[0] * (len(t) + 1) for _ in range(len(s) + 1)]\n        for i in range(len(s) + 1):\n            dp[i][0] = 1\n        for i in range(1, len(s) + 1):\n            for j in range(1, len(t) + 1):\n                if s[i - 1] == t[j - 1]:\n                    dp[i][j] = dp[i - 1][j - 1] + dp[i - 1][j]\n                else:\n                    dp[i][j] = dp[i - 1][j]\n        return dp[len(s)][len(t)]"
    },
    {
        "number": 115,
        "title": "Distinct Subsequences",
        "difficulty": 2,
        "pass": 3,
        "answer": "        m, n = len(s), len(t)\n        if m < n:\n            return 0\n        dp = [[0] * (n + 1) for _ in range(m + 1)]\n        for i in range(m + 1):\n            dp[i][0] = 1\n        for i in range(1, m + 1):\n            for j in range(1, n + 1):\n                if s[i - 1] == t[j - 1]:\n                    dp[i][j] = dp[i - 1][j - 1] + dp[i - 1][j]\n                else:\n                    dp[i][j] = dp[i - 1][j]\n        return dp[m][n]"
    },
    {
        "number": 115,
        "title": "Distinct Subsequences",
        "difficulty": 2,
        "pass": 4,
        "answer": "        m, n = len(s), len(t)\n        if m < n:\n            return 0\n        dp = [[0] * (n + 1) for _ in range(m + 1)]\n        for i in range(m + 1):\n            dp[i][0] = 1\n        for i in range(1, m + 1):\n            for j in range(1, n + 1):\n                if s[i - 1] == t[j - 1]:\n                    dp[i][j] = dp[i - 1][j - 1] + dp[i - 1][j]\n                else:\n                    dp[i][j] = dp[i - 1][j]\n        return dp[m][n]"
    },
    {
        "number": 115,
        "title": "Distinct Subsequences",
        "difficulty": 2,
        "pass": 5,
        "answer": "        n, m = len(s), len(t)\n        dp = [[0] * (m + 1) for _ in range(n + 1)]\n        for i in range(n + 1):\n            dp[i][0] = 1\n        for i in range(1, n + 1):\n            for j in range(1, m + 1):\n                if s[i - 1] == t[j - 1]:\n                    dp[i][j] = dp[i - 1][j - 1] + dp[i - 1][j]\n                else:\n                    dp[i][j] = dp[i - 1][j]\n        return dp[-1][-1]"
    },
    {
        "number": 115,
        "title": "Distinct Subsequences",
        "difficulty": 2,
        "pass": 6,
        "answer": "        dp = [[0] * (len(t) + 1) for _ in range(len(s) + 1)]\n        for i in range(len(s) + 1):\n            dp[i][0] = 1\n        for i in range(1, len(s) + 1):\n            for j in range(1, len(t) + 1):\n                if s[i - 1] == t[j - 1]:\n                    dp[i][j] = dp[i - 1][j - 1] + dp[i - 1][j]\n                else:\n                    dp[i][j] = dp[i - 1][j]\n        return dp[-1][-1]"
    },
    {
        "number": 115,
        "title": "Distinct Subsequences",
        "difficulty": 2,
        "pass": 7,
        "answer": "        m, n = len(s), len(t)\n        dp = [[0] * (n + 1) for _ in range(m + 1)]\n        for i in range(m + 1):\n            dp[i][0] = 1\n        for i in range(1, m + 1):\n            for j in range(1, n + 1):\n                if s[i - 1] == t[j - 1]:\n                    dp[i][j] = dp[i - 1][j - 1] + dp[i - 1][j]\n                else:\n                    dp[i][j] = dp[i - 1][j]\n        return dp[-1][-1]"
    },
    {
        "number": 115,
        "title": "Distinct Subsequences",
        "difficulty": 2,
        "pass": 8,
        "answer": "        m, n = len(s), len(t)\n        dp = [[0] * (n + 1) for _ in range(m + 1)]\n        for i in range(m + 1):\n            dp[i][0] = 1\n        for i in range(1, m + 1):\n            for j in range(1, n + 1):\n                if s[i - 1] == t[j - 1]:\n                    dp[i][j] = dp[i - 1][j - 1] + dp[i - 1][j]\n                else:\n                    dp[i][j] = dp[i - 1][j]\n        return dp[-1][-1]"
    },
    {
        "number": 115,
        "title": "Distinct Subsequences",
        "difficulty": 2,
        "pass": 9,
        "answer": "        m, n = len(s), len(t)\n        if m < n:\n            return 0\n        dp = [[0] * (n + 1) for _ in range(m + 1)]\n        for i in range(m + 1):\n            dp[i][0] = 1\n        for i in range(1, m + 1):\n            for j in range(1, n + 1):\n                if s[i - 1] == t[j - 1]:\n                    dp[i][j] = dp[i - 1][j - 1] + dp[i - 1][j]\n                else:\n                    dp[i][j] = dp[i - 1][j]\n        return dp[m][n]"
    },
    {
        "number": 116,
        "title": "Populating Next Right Pointers in Each Node",
        "difficulty": 1,
        "pass": 0,
        "answer": "        self.val = val\n        self.left = left\n        self.right = right\n        self.next = next"
    },
    {
        "number": 116,
        "title": "Populating Next Right Pointers in Each Node",
        "difficulty": 1,
        "pass": 1,
        "answer": "        self.val = val\n        self.left = left\n        self.right = right\n        self.next = next"
    },
    {
        "number": 116,
        "title": "Populating Next Right Pointers in Each Node",
        "difficulty": 1,
        "pass": 2,
        "answer": "        self.val = val\n        self.left = left\n        self.right = right\n        self.next = next"
    },
    {
        "number": 116,
        "title": "Populating Next Right Pointers in Each Node",
        "difficulty": 1,
        "pass": 3,
        "answer": "        self.val = val\n        self.left = left\n        self.right = right\n        self.next = next"
    },
    {
        "number": 116,
        "title": "Populating Next Right Pointers in Each Node",
        "difficulty": 1,
        "pass": 4,
        "answer": "        self.val = val\n        self.left = left\n        self.right = right\n        self.next = next"
    },
    {
        "number": 116,
        "title": "Populating Next Right Pointers in Each Node",
        "difficulty": 1,
        "pass": 5,
        "answer": "        self.next = None"
    },
    {
        "number": 116,
        "title": "Populating Next Right Pointers in Each Node",
        "difficulty": 1,
        "pass": 6,
        "answer": "        self.val = val\n        self.left = left\n        self.right = right\n        self.next = next"
    },
    {
        "number": 116,
        "title": "Populating Next Right Pointers in Each Node",
        "difficulty": 1,
        "pass": 7,
        "answer": "        self.val = val\n        self.left = left\n        self.right = right\n        self.next = next"
    },
    {
        "number": 116,
        "title": "Populating Next Right Pointers in Each Node",
        "difficulty": 1,
        "pass": 8,
        "answer": "        self.val = val\n        self.left = left\n        self.right = right\n        self.next = next"
    },
    {
        "number": 116,
        "title": "Populating Next Right Pointers in Each Node",
        "difficulty": 1,
        "pass": 9,
        "answer": "        self.val = val\n        self.left = left\n        self.right = right\n        self.next = next"
    },
    {
        "number": 117,
        "title": "Populating Next Right Pointers in Each Node II",
        "difficulty": 1,
        "pass": 0,
        "answer": "        self.val = val\n        self.left = left\n        self.right = right\n        self.next = next"
    },
    {
        "number": 117,
        "title": "Populating Next Right Pointers in Each Node II",
        "difficulty": 1,
        "pass": 1,
        "answer": "        self.val = val\n        self.left = left\n        self.right = right\n        self.next = next"
    },
    {
        "number": 117,
        "title": "Populating Next Right Pointers in Each Node II",
        "difficulty": 1,
        "pass": 2,
        "answer": "        self.val = val\n        self.left = left\n        self.right = right\n        self.next = next"
    },
    {
        "number": 117,
        "title": "Populating Next Right Pointers in Each Node II",
        "difficulty": 1,
        "pass": 3,
        "answer": "        self.val = val\n        self.left = left\n        self.right = right\n        self.next = next"
    },
    {
        "number": 117,
        "title": "Populating Next Right Pointers in Each Node II",
        "difficulty": 1,
        "pass": 4,
        "answer": "        self.left = left\n        self.right = right\n        self.next = next"
    },
    {
        "number": 117,
        "title": "Populating Next Right Pointers in Each Node II",
        "difficulty": 1,
        "pass": 5,
        "answer": "        self.val = val\n        self.left = left\n        self.right = right\n        self.next = next"
    },
    {
        "number": 117,
        "title": "Populating Next Right Pointers in Each Node II",
        "difficulty": 1,
        "pass": 6,
        "answer": "        self.val = val\n        self.left = left\n        self.right = right\n        self.next = next"
    },
    {
        "number": 117,
        "title": "Populating Next Right Pointers in Each Node II",
        "difficulty": 1,
        "pass": 7,
        "answer": "        self.next = None"
    },
    {
        "number": 117,
        "title": "Populating Next Right Pointers in Each Node II",
        "difficulty": 1,
        "pass": 8,
        "answer": "        self.val = val\n        self.left = left\n        self.right = right\n        self.next = next"
    },
    {
        "number": 117,
        "title": "Populating Next Right Pointers in Each Node II",
        "difficulty": 1,
        "pass": 9,
        "answer": "        self.val = val\n        self.left = left\n        self.right = right\n        self.next = next"
    },
    {
        "number": 118,
        "title": "Pascal\"s Triangle",
        "difficulty": 0,
        "pass": 0,
        "answer": "        res = []\n        for i in range(numRows):\n            row = [1] * (i + 1)\n            if i > 1:\n                for j in range(1, i):\n                    row[j] = res[i - 1][j - 1] + res[i - 1][j]\n            res.append(row)\n        return res\n"
    },
    {
        "number": 118,
        "title": "Pascal\"s Triangle",
        "difficulty": 0,
        "pass": 1,
        "answer": "        if numRows == 0:\n            return []\n        if numRows == 1:\n            return [[1]]\n        if numRows == 2:\n            return [[1], [1, 1]]\n        if numRows == 3:\n            return [[1], [1, 1], [1, 2, 1]]\n        if numRows == 4:\n            return [[1], [1, 1], [1, 2, 1], [1, 3, 3, 1]]\n        res = [[1], [1, 1]]\n        for i in range(2, numRows):\n            tmp = [1]\n            for j in range(1, i):\n                tmp.append(res[i - 1][j - 1] + res[i - 1][j])\n            tmp.append(1)\n            res.append(tmp)\n        return res"
    },
    {
        "number": 118,
        "title": "Pascal\"s Triangle",
        "difficulty": 0,
        "pass": 2,
        "answer": "        if numRows == 0:\n            return []\n        elif numRows == 1:\n            return [[1]]\n        elif numRows == 2:\n            return [[1], [1, 1]]\n        else:\n            res = [[1], [1, 1]]\n            for i in range(2, numRows):\n                tmp = [1]\n                for j in range(1, i):\n                    tmp.append(res[i - 1][j - 1] + res[i - 1][j])\n                tmp.append(1)\n                res.append(tmp)\n            return res"
    },
    {
        "number": 118,
        "title": "Pascal\"s Triangle",
        "difficulty": 0,
        "pass": 3,
        "answer": "        if numRows == 0:\n            return []\n        if numRows == 1:\n            return [[1]]\n        if numRows == 2:\n            return [[1], [1, 1]]\n        if numRows == 3:\n            return [[1], [1, 1], [1, 2, 1]]\n        if numRows == 4:\n            return [[1], [1, 1], [1, 2, 1], [1, 3, 3, 1]]\n        if numRows == 5:\n            return [[1], [1, 1], [1, 2, 1], [1, 3, 3, 1], [1, 4, 6, 4, 1]]\n        if numRows == 6:\n            return [[1], [1, 1], [1, 2, 1], [1, 3, 3, 1], [1, 4, 6, 4, 1], [1, 5, 10, 10, 5, 1]]\n        if numRows == 7:\n            return [[1], [1, 1], [1, 2, 1], [1, 3, 3"
    },
    {
        "number": 118,
        "title": "Pascal\"s Triangle",
        "difficulty": 0,
        "pass": 4,
        "answer": "        if numRows == 0:\n            return []\n        elif numRows == 1:\n            return [[1]]\n        elif numRows == 2:\n            return [[1], [1, 1]]\n        elif numRows == 3:\n            return [[1], [1, 1], [1, 2, 1]]\n        elif numRows == 4:\n            return [[1], [1, 1], [1, 2, 1], [1, 3, 3, 1]]\n        elif numRows == 5:\n            return [[1], [1, 1], [1, 2, 1], [1, 3, 3, 1], [1, 4, 6, 4, 1]]\n        elif numRows == 6:\n            return [[1], [1, 1], [1, 2, 1], [1, 3, 3, 1], [1, 4, 6, 4, 1], [1, 5, 10, 10, 5, 1]]\n        elif numRows == 7:\n            return [[1], [1, 1], [1, 2, 1"
    },
    {
        "number": 118,
        "title": "Pascal\"s Triangle",
        "difficulty": 0,
        "pass": 5,
        "answer": "        if numRows == 0:\n            return []\n        if numRows == 1:\n            return [[1]]\n        if numRows == 2:\n            return [[1], [1, 1]]\n        if numRows == 3:\n            return [[1], [1, 1], [1, 2, 1]]\n        if numRows == 4:\n            return [[1], [1, 1], [1, 2, 1], [1, 3, 3, 1]]\n        if numRows == 5:\n            return [[1], [1, 1], [1, 2, 1], [1, 3, 3, 1], [1, 4, 6, 4, 1]]"
    },
    {
        "number": 118,
        "title": "Pascal\"s Triangle",
        "difficulty": 0,
        "pass": 6,
        "answer": "        result = []\n        for i in range(numRows):\n            row = [1] * (i + 1)\n            if i > 1:\n                for j in range(1, i):\n                    row[j] = result[i - 1][j - 1] + result[i - 1][j]\n            result.append(row)\n        return result\n"
    },
    {
        "number": 118,
        "title": "Pascal\"s Triangle",
        "difficulty": 0,
        "pass": 7,
        "answer": "        if numRows == 0:\n            return []\n        elif numRows == 1:\n            return [[1]]\n        elif numRows == 2:\n            return [[1], [1, 1]]\n        elif numRows == 3:\n            return [[1], [1, 1], [1, 2, 1]]\n        elif numRows == 4:\n            return [[1], [1, 1], [1, 2, 1], [1, 3, 3, 1]]\n        elif numRows == 5:\n            return [[1], [1, 1], [1, 2, 1], [1, 3, 3, 1], [1, 4, 6, 4, 1]]\n        elif numRows == 6:\n            return [[1], [1, 1], [1, 2, 1], [1, 3, 3, 1], [1, 4, 6, 4, 1], [1, 5, 10, 10, 5, 1]]\n        elif numRows == 7:\n            return [[1], [1, 1], [1, 2, 1"
    },
    {
        "number": 118,
        "title": "Pascal\"s Triangle",
        "difficulty": 0,
        "pass": 8,
        "answer": "        if numRows == 0:\n            return []\n        if numRows == 1:\n            return [[1]]\n        if numRows == 2:\n            return [[1], [1, 1]]\n        if numRows == 3:\n            return [[1], [1, 1], [1, 2, 1]]\n        result = [[1], [1, 1], [1, 2, 1]]\n        for i in range(3, numRows + 1):\n            row = [1]\n            for j in range(1, i - 1):\n                row.append(result[i - 2][j - 1] + result[i - 2][j])\n            row.append(1)\n            result.append(row)\n        return result\n"
    },
    {
        "number": 118,
        "title": "Pascal\"s Triangle",
        "difficulty": 0,
        "pass": 9,
        "answer": "        if numRows == 0:\n            return []\n        if numRows == 1:\n            return [[1]]\n        if numRows == 2:\n            return [[1], [1, 1]]\n        if numRows == 3:\n            return [[1], [1, 1], [1, 2, 1]]\n        if numRows == 4:\n            return [[1], [1, 1], [1, 2, 1], [1, 3, 3, 1]]\n        res = [[1], [1, 1]]\n        for i in range(3, numRows + 1):\n            tmp = [1]\n            for j in range(1, i - 1):\n                tmp.append(res[i - 2][j - 1] + res[i - 2][j])\n            tmp.append(1)\n            res.append(tmp)\n        return res"
    },
    {
        "number": 119,
        "title": "Pascal\"s Triangle II",
        "difficulty": 0,
        "pass": 0,
        "answer": "        if rowIndex == 0:\n            return [1]\n        if rowIndex == 1:\n            return [1, 1]\n        if rowIndex == 2:\n            return [1, 2, 1]\n        if rowIndex == 3:\n            return [1, 3, 3, 1]\n        if rowIndex == 4:\n            return [1, 4, 6, 4, 1]\n        if rowIndex == 5:\n            return [1, 5, 10, 10, 5, 1]\n        if rowIndex == 6:\n            return [1, 6, 15, 20, 15, 6, 1]\n        if rowIndex == 7:\n            return [1, 7, 21, 35, 35, 21, 7, 1]\n        if rowIndex == 8:\n            return [1, 8, 28, 56, 70, 56, 28, 8, 1]\n        if rowIndex == 9:\n            return [1, 9, 36, 84, 126, 126, 84, 36, 9, 1]\n        if rowIndex == 10:\n            return [1, 10, 45, 120, 210"
    },
    {
        "number": 119,
        "title": "Pascal\"s Triangle II",
        "difficulty": 0,
        "pass": 1,
        "answer": "        if rowIndex == 0:\n            return [1]\n        if rowIndex == 1:\n            return [1, 1]\n        if rowIndex == 2:\n            return [1, 1, 1]\n        res = [1, 1]\n        for i in range(2, rowIndex + 1):\n            tmp = [1]\n            for j in range(len(res) - 1):\n                tmp.append(res[j] + res[j + 1])\n            tmp.append(1)\n            res = tmp\n        return res\n"
    },
    {
        "number": 119,
        "title": "Pascal\"s Triangle II",
        "difficulty": 0,
        "pass": 2,
        "answer": "        if rowIndex == 0:\n            return [1]\n        elif rowIndex == 1:\n            return [1, 1]\n        else:\n            result = [1, 1]\n            for i in range(2, rowIndex + 1):\n                result.append(1)\n                for j in range(i - 1, 0, -1):\n                    result[j] = result[j] + result[j - 1]\n            return result\n"
    },
    {
        "number": 119,
        "title": "Pascal\"s Triangle II",
        "difficulty": 0,
        "pass": 3,
        "answer": "        row = [1]\n        for i in range(rowIndex):\n            row = [1] + [row[i] + row[i + 1] for i in range(len(row) - 1)] + [1]\n        return row\n"
    },
    {
        "number": 119,
        "title": "Pascal\"s Triangle II",
        "difficulty": 0,
        "pass": 4,
        "answer": "        if rowIndex == 0:\n            return [1]\n        if rowIndex == 1:\n            return [1, 1]\n        if rowIndex == 2:\n            return [1, 2, 1]\n        if rowIndex == 3:\n            return [1, 3, 3, 1]\n        if rowIndex == 4:\n            return [1, 4, 6, 4, 1]\n        if rowIndex == 5:\n            return [1, 5, 10, 10, 5, 1]\n        if rowIndex == 6:\n            return [1, 6, 15, 20, 15, 6, 1]\n        if rowIndex == 7:\n            return [1, 7, 21, 35, 35, 21, 7, 1]\n        if rowIndex == 8:\n            return [1, 8, 28, 56, 70, 56, 28, 8, 1]\n        if rowIndex == 9:\n            return [1, 9, 36, 84, 126, 126, 84, 36, 9, 1]\n        if rowIndex == 10:\n            return [1, 10, 45, 120, 210"
    },
    {
        "number": 119,
        "title": "Pascal\"s Triangle II",
        "difficulty": 0,
        "pass": 5,
        "answer": "        if rowIndex == 0:\n            return [1]\n        elif rowIndex == 1:\n            return [1, 1]\n        else:\n            res = [1, 1]\n            for i in range(2, rowIndex + 1):\n                tmp = [1]\n                for j in range(1, i):\n                    tmp.append(res[j - 1] + res[j])\n                tmp.append(1)\n                res = tmp\n            return res"
    },
    {
        "number": 119,
        "title": "Pascal\"s Triangle II",
        "difficulty": 0,
        "pass": 6,
        "answer": "        if rowIndex == 0:\n            return [1]\n        if rowIndex == 1:\n            return [1,1]\n        if rowIndex == 2:\n            return [1,2,1]\n        if rowIndex == 3:\n            return [1,3,3,1]\n        if rowIndex == 4:\n            return [1,4,6,4,1]\n        if rowIndex == 5:\n            return [1,5,10,10,5,1]\n        if rowIndex == 6:\n            return [1,6,15,20,15,6,1]\n        if rowIndex == 7:\n            return [1,7,21,35,35,21,7,1]\n        if rowIndex == 8:\n            return [1,8,28,56,70,56,28,8,1]\n        if rowIndex == 9:\n            return [1,9,36,84,126,126,84,36,9,1]\n        if rowIndex == 10:\n            return [1,10,45,120,210"
    },
    {
        "number": 119,
        "title": "Pascal\"s Triangle II",
        "difficulty": 0,
        "pass": 7,
        "answer": "        if rowIndex == 0:\n            return [1]\n        if rowIndex == 1:\n            return [1, 1]\n        if rowIndex == 2:\n            return [1, 1, 1]\n        pre = [1, 1]\n        for i in range(3, rowIndex + 1):\n            cur = [1]\n            for j in range(len(pre) - 1):\n                cur.append(pre[j] + pre[j + 1])\n            cur.append(1)\n            pre = cur\n        return cur\n"
    },
    {
        "number": 119,
        "title": "Pascal\"s Triangle II",
        "difficulty": 0,
        "pass": 8,
        "answer": "        if rowIndex == 0:\n            return [1]\n        if rowIndex == 1:\n            return [1, 1]\n        res = [1, 1]\n        for i in range(2, rowIndex + 1):\n            tmp = [1]\n            for j in range(i - 1):\n                tmp.append(res[j] + res[j + 1])\n            tmp.append(1)\n            res = tmp\n        return res\n"
    },
    {
        "number": 119,
        "title": "Pascal\"s Triangle II",
        "difficulty": 0,
        "pass": 9,
        "answer": "        if rowIndex == 0:\n            return [1]\n        if rowIndex == 1:\n            return [1, 1]\n        if rowIndex == 2:\n            return [1, 1, 1]\n        if rowIndex == 3:\n            return [1, 3, 3, 1]\n        if rowIndex == 4:\n            return [1, 4, 6, 4, 1]\n        if rowIndex == 5:\n            return [1, 5, 10, 10, 5, 1]\n        if rowIndex == 6:\n            return [1, 6, 15, 20, 15, 6, 1]\n        if rowIndex == 7:\n            return [1, 7, 21, 35, 35, 21, 7, 1]\n        if rowIndex == 8:\n            return [1, 8, 28, 56, 70, 56, 28, 8, 1]\n        if rowIndex == 9:\n            return [1, 9, 36, 84, 126, 126, 84, 36, 9, 1]\n        if rowIndex == 10:\n            return [1, 10, 45, 120, 210"
    },
    {
        "number": 120,
        "title": "Triangle",
        "difficulty": 1,
        "pass": 0,
        "answer": "        n = len(triangle)\n        if n == 1:\n            return triangle[0][0]\n        dp = [[0] * n for _ in range(n)]\n        dp[0][0] = triangle[0][0]\n        for i in range(1, n):\n            for j in range(i + 1):\n                if j == 0:\n                    dp[i][j] = dp[i - 1][j] + triangle[i][j]\n                elif j == i:\n                    dp[i][j] = dp[i - 1][j - 1] + triangle[i][j]\n                else:\n                    dp[i][j] = min(dp[i - 1][j - 1], dp[i - 1][j]) + triangle[i][j]\n        return min(dp[n - 1])"
    },
    {
        "number": 120,
        "title": "Triangle",
        "difficulty": 1,
        "pass": 1,
        "answer": "        if len(triangle) == 1:\n            return triangle[0][0]\n        for i in range(1, len(triangle)):\n            for j in range(len(triangle[i])):\n                if j == 0:\n                    triangle[i][j] += triangle[i - 1][j]\n                elif j == len(triangle[i]) - 1:\n                    triangle[i][j] += triangle[i - 1][j - 1]\n                else:\n                    triangle[i][j] += min(triangle[i - 1][j - 1], triangle[i - 1][j])\n        return min(triangle[-1])"
    },
    {
        "number": 120,
        "title": "Triangle",
        "difficulty": 1,
        "pass": 2,
        "answer": "        if not triangle:\n            return 0\n        if len(triangle) == 1:\n            return triangle[0][0]"
    },
    {
        "number": 120,
        "title": "Triangle",
        "difficulty": 1,
        "pass": 3,
        "answer": "        if not triangle:\n            return 0\n        if len(triangle) == 1:\n            return triangle[0][0]\n        for i in range(1, len(triangle)):\n            for j in range(len(triangle[i])):\n                if j == 0:\n                    triangle[i][j] += triangle[i - 1][j]\n                elif j == len(triangle[i]) - 1:\n                    triangle[i][j] += triangle[i - 1][j - 1]\n                else:\n                    triangle[i][j] += min(triangle[i - 1][j - 1], triangle[i - 1][j])\n        return min(triangle[-1])"
    },
    {
        "number": 120,
        "title": "Triangle",
        "difficulty": 1,
        "pass": 4,
        "answer": "        if len(triangle) == 1:\n            return triangle[0][0]\n        for i in range(1, len(triangle)):\n            for j in range(len(triangle[i])):\n                if j == 0:\n                    triangle[i][j] += triangle[i - 1][j]\n                elif j == len(triangle[i]) - 1:\n                    triangle[i][j] += triangle[i - 1][j - 1]\n                else:\n                    triangle[i][j] += min(triangle[i - 1][j - 1], triangle[i - 1][j])\n        return min(triangle[-1])"
    },
    {
        "number": 120,
        "title": "Triangle",
        "difficulty": 1,
        "pass": 5,
        "answer": "        n = len(triangle)\n        dp = [[0] * n for _ in range(n)]\n        dp[0][0] = triangle[0][0]\n        for i in range(1, n):\n            for j in range(i + 1):\n                if j == 0:\n                    dp[i][j] = dp[i - 1][j] + triangle[i][j]\n                elif j == i:\n                    dp[i][j] = dp[i - 1][j - 1] + triangle[i][j]\n                else:\n                    dp[i][j] = min(dp[i - 1][j - 1], dp[i - 1][j]) + triangle[i][j]\n        return min(dp[n - 1])"
    },
    {
        "number": 120,
        "title": "Triangle",
        "difficulty": 1,
        "pass": 6,
        "answer": "        if len(triangle) == 1:\n            return triangle[0][0]"
    },
    {
        "number": 120,
        "title": "Triangle",
        "difficulty": 1,
        "pass": 7,
        "answer": "        n = len(triangle)\n        if n == 0:\n            return 0\n        if n == 1:\n            return triangle[0][0]\n        dp = [0] * n\n        dp[0] = triangle[0][0]\n        for i in range(1, n):\n            for j in range(i + 1):\n                if j == 0:\n                    dp[j] = dp[j] + triangle[i][j]\n                elif j == i:\n                    dp[j] = dp[j - 1] + triangle[i][j]\n                else:\n                    dp[j] = min(dp[j - 1], dp[j]) + triangle[i][j]\n        return min(dp)"
    },
    {
        "number": 120,
        "title": "Triangle",
        "difficulty": 1,
        "pass": 8,
        "answer": "        n = len(triangle)\n        if n == 1:\n            return triangle[0][0]\n        dp = [[0] * n for _ in range(n)]\n        dp[0][0] = triangle[0][0]\n        for i in range(1, n):\n            for j in range(i + 1):\n                if j == 0:\n                    dp[i][j] = dp[i - 1][j] + triangle[i][j]\n                elif j == i:\n                    dp[i][j] = dp[i - 1][j - 1] + triangle[i][j]\n                else:\n                    dp[i][j] = min(dp[i - 1][j - 1], dp[i - 1][j]) + triangle[i][j]\n        return min(dp[n - 1])"
    },
    {
        "number": 120,
        "title": "Triangle",
        "difficulty": 1,
        "pass": 9,
        "answer": "        n = len(triangle)\n        if n == 0:\n            return 0\n        if n == 1:\n            return triangle[0][0]\n        dp = [0] * n\n        dp[0] = triangle[0][0]\n        for i in range(1, n):\n            for j in range(i + 1):\n                if j == 0:\n                    dp[j] = dp[j] + triangle[i][j]\n                elif j == i:\n                    dp[j] = dp[j - 1] + triangle[i][j]\n                else:\n                    dp[j] = min(dp[j - 1], dp[j]) + triangle[i][j]\n        return min(dp)\n"
    },
    {
        "number": 121,
        "title": "Best Time to Buy and Sell Stock",
        "difficulty": 0,
        "pass": 0,
        "answer": "        if len(prices) < 2:\n            return 0\n        min_price = prices[0]\n        max_profit = 0\n        for i in range(1, len(prices)):\n            if prices[i] < min_price:\n                min_price = prices[i]\n            elif prices[i] - min_price > max_profit:\n                max_profit = prices[i] - min_price\n        return max_profit"
    },
    {
        "number": 121,
        "title": "Best Time to Buy and Sell Stock",
        "difficulty": 0,
        "pass": 1,
        "answer": "        n = len(prices)\n        if n == 0:\n            return 0\n        buy = [0] * n\n        sell = [0] * n\n        buy[0] = -prices[0]\n        for i in range(1, n):\n            buy[i] = max(buy[i - 1], -prices[i])\n            sell[i] = max(sell[i - 1], buy[i - 1] + prices[i])\n        return sell[n - 1]"
    },
    {
        "number": 121,
        "title": "Best Time to Buy and Sell Stock",
        "difficulty": 0,
        "pass": 2,
        "answer": "        if len(prices) < 2:\n            return 0\n        min_price = prices[0]\n        max_profit = 0\n        for i in range(1, len(prices)):\n            if prices[i] < min_price:\n                min_price = prices[i]\n            elif prices[i] - min_price > max_profit:\n                max_profit = prices[i] - min_price\n        return max_profit"
    },
    {
        "number": 121,
        "title": "Best Time to Buy and Sell Stock",
        "difficulty": 0,
        "pass": 3,
        "answer": "        if len(prices) < 2:\n            return 0\n        min_price = prices[0]\n        max_profit = 0\n        for i in range(1, len(prices)):\n            if prices[i] < min_price:\n                min_price = prices[i]\n            elif prices[i] - min_price > max_profit:\n                max_profit = prices[i] - min_price\n        return max_profit"
    },
    {
        "number": 121,
        "title": "Best Time to Buy and Sell Stock",
        "difficulty": 0,
        "pass": 4,
        "answer": "        if len(prices) < 2:\n            return 0\n        min_price = prices[0]\n        max_profit = 0\n        for i in range(1, len(prices)):\n            if prices[i] < min_price:\n                min_price = prices[i]\n            elif prices[i] - min_price > max_profit:\n                max_profit = prices[i] - min_price\n        return max_profit"
    },
    {
        "number": 121,
        "title": "Best Time to Buy and Sell Stock",
        "difficulty": 0,
        "pass": 5,
        "answer": "        if len(prices) < 2:\n            return 0"
    },
    {
        "number": 121,
        "title": "Best Time to Buy and Sell Stock",
        "difficulty": 0,
        "pass": 6,
        "answer": "        if len(prices) < 2:\n            return 0\n        max_profit = 0\n        min_price = prices[0]\n        for i in range(1, len(prices)):\n            if prices[i] < min_price:\n                min_price = prices[i]\n            elif prices[i] - min_price > max_profit:\n                max_profit = prices[i] - min_price\n        return max_profit"
    },
    {
        "number": 121,
        "title": "Best Time to Buy and Sell Stock",
        "difficulty": 0,
        "pass": 7,
        "answer": "        n = len(prices)\n        if n == 0:\n            return 0\n        min_price = prices[0]\n        max_profit = 0\n        for i in range(1, n):\n            if prices[i] < min_price:\n                min_price = prices[i]\n            elif prices[i] - min_price > max_profit:\n                max_profit = prices[i] - min_price\n        return max_profit"
    },
    {
        "number": 121,
        "title": "Best Time to Buy and Sell Stock",
        "difficulty": 0,
        "pass": 8,
        "answer": "        if len(prices) < 2:\n            return 0\n        max_profit = 0\n        min_price = prices[0]\n        for price in prices:\n            if price < min_price:\n                min_price = price\n            elif price - min_price > max_profit:\n                max_profit = price - min_price\n        return max_profit"
    },
    {
        "number": 121,
        "title": "Best Time to Buy and Sell Stock",
        "difficulty": 0,
        "pass": 9,
        "answer": "        if not prices:\n            return 0\n        min_price = prices[0]\n        max_profit = 0\n        for i in range(1, len(prices)):\n            max_profit = max(max_profit, prices[i] - min_price)\n            min_price = min(min_price, prices[i])\n        return max_profit"
    },
    {
        "number": 122,
        "title": "Best Time to Buy and Sell Stock II",
        "difficulty": 1,
        "pass": 0,
        "answer": "        if not prices:\n            return 0\n        n = len(prices)\n        dp = [[0] * 2 for _ in range(n)]\n        dp[0][0] = 0\n        dp[0][1] = -prices[0]\n        for i in range(1, n):\n            dp[i][0] = max(dp[i - 1][0], dp[i - 1][1] + prices[i])\n            dp[i][1] = max(dp[i - 1][1], dp[i - 1][0] - prices[i])\n        return dp[n - 1][0]"
    },
    {
        "number": 122,
        "title": "Best Time to Buy and Sell Stock II",
        "difficulty": 1,
        "pass": 1,
        "answer": "        if len(prices) < 2:\n            return 0\n        min_price = prices[0]\n        max_profit = 0\n        for i in range(1, len(prices)):\n            if prices[i] < min_price:\n                min_price = prices[i]\n            elif prices[i] - min_price > max_profit:\n                max_profit = prices[i] - min_price\n        return max_profit"
    },
    {
        "number": 122,
        "title": "Best Time to Buy and Sell Stock II",
        "difficulty": 1,
        "pass": 2,
        "answer": "        if len(prices) < 2:\n            return 0\n        min_price = prices[0]\n        max_profit = 0\n        for i in range(1, len(prices)):\n            if prices[i] < min_price:\n                min_price = prices[i]\n            elif prices[i] - min_price > max_profit:\n                max_profit = prices[i] - min_price\n        return max_profit"
    },
    {
        "number": 122,
        "title": "Best Time to Buy and Sell Stock II",
        "difficulty": 1,
        "pass": 3,
        "answer": "        if not prices:\n            return 0\n        min_price = prices[0]\n        max_profit = 0\n        for i in range(1, len(prices)):\n            if prices[i] < min_price:\n                min_price = prices[i]\n            elif prices[i] - min_price > max_profit:\n                max_profit = prices[i] - min_price\n        return max_profit"
    },
    {
        "number": 122,
        "title": "Best Time to Buy and Sell Stock II",
        "difficulty": 1,
        "pass": 4,
        "answer": "        if len(prices) < 2:\n            return 0\n        min_price = prices[0]\n        max_profit = 0\n        for i in range(1, len(prices)):\n            if prices[i] < min_price:\n                min_price = prices[i]\n            elif prices[i] - min_price > max_profit:\n                max_profit = prices[i] - min_price\n        return max_profit"
    },
    {
        "number": 122,
        "title": "Best Time to Buy and Sell Stock II",
        "difficulty": 1,
        "pass": 5,
        "answer": "        n = len(prices)\n        if n == 0:\n            return 0\n        dp = [[0] * 2 for _ in range(n)]\n        dp[0][0] = 0\n        dp[0][1] = -prices[0]\n        for i in range(1, n):\n            dp[i][0] = max(dp[i - 1][0], dp[i - 1][1] + prices[i])\n            dp[i][1] = max(dp[i - 1][1], dp[i - 1][0] - prices[i])\n        return dp[n - 1][0]"
    },
    {
        "number": 122,
        "title": "Best Time to Buy and Sell Stock II",
        "difficulty": 1,
        "pass": 6,
        "answer": "        if len(prices) < 2:\n            return 0\n        min_price = prices[0]\n        max_profit = 0\n        for i in range(1, len(prices)):\n            if prices[i] < min_price:\n                min_price = prices[i]\n            elif prices[i] - min_price > max_profit:\n                max_profit = prices[i] - min_price\n        return max_profit"
    },
    {
        "number": 122,
        "title": "Best Time to Buy and Sell Stock II",
        "difficulty": 1,
        "pass": 7,
        "answer": "        if not prices:\n            return 0\n        n = len(prices)\n        dp = [[0] * 2 for _ in range(n)]\n        dp[0][0] = 0\n        dp[0][1] = -prices[0]\n        for i in range(1, n):\n            dp[i][0] = max(dp[i - 1][0], dp[i - 1][1] + prices[i])\n            dp[i][1] = max(dp[i - 1][1], dp[i - 1][0] - prices[i])\n        return dp[n - 1][0]"
    },
    {
        "number": 122,
        "title": "Best Time to Buy and Sell Stock II",
        "difficulty": 1,
        "pass": 8,
        "answer": "        n = len(prices)\n        if n == 0:\n            return 0\n        max_profit = 0\n        min_price = prices[0]\n        for i in range(1, n):\n            if prices[i] < min_price:\n                min_price = prices[i]\n            elif prices[i] - min_price > max_profit:\n                max_profit = prices[i] - min_price\n        return max_profit"
    },
    {
        "number": 122,
        "title": "Best Time to Buy and Sell Stock II",
        "difficulty": 1,
        "pass": 9,
        "answer": "        if len(prices) < 2:\n            return 0\n        min_price = prices[0]\n        max_profit = 0\n        for i in range(1, len(prices)):\n            if prices[i] < min_price:\n                min_price = prices[i]\n            elif prices[i] - min_price > max_profit:\n                max_profit = prices[i] - min_price\n        return max_profit\n"
    },
    {
        "number": 123,
        "title": "Best Time to Buy and Sell Stock III",
        "difficulty": 2,
        "pass": 0,
        "answer": "        n = len(prices)\n        if n == 0:\n            return 0\n        dp = [[0 for _ in range(2)] for _ in range(n)]\n        dp[0][0] = 0\n        dp[0][1] = -prices[0]\n        for i in range(1, n):\n            dp[i][0] = max(dp[i - 1][0], dp[i - 1][1] + prices[i])\n            dp[i][1] = max(dp[i - 1][1], dp[i - 1][0] - prices[i])\n        return dp[n - 1][0]"
    },
    {
        "number": 123,
        "title": "Best Time to Buy and Sell Stock III",
        "difficulty": 2,
        "pass": 1,
        "answer": "        n = len(prices)\n        if n == 0:\n            return 0\n        buy1 = -prices[0]\n        buy2 = float('-inf')\n        sell1 = 0\n        sell2 = float('-inf')\n        for i in range(1, n):\n            buy1 = max(buy1, -prices[i])\n            sell1 = max(sell1, buy1 + prices[i])\n            buy2 = max(buy2, sell1 - prices[i])\n            sell2 = max(sell2, buy2 + prices[i])\n        return sell2\n"
    },
    {
        "number": 123,
        "title": "Best Time to Buy and Sell Stock III",
        "difficulty": 2,
        "pass": 2,
        "answer": "        n = len(prices)\n        if n <= 1:\n            return 0\n        dp = [[0] * 2 for _ in range(n)]\n        dp[0][0], dp[0][1] = 0, -prices[0]\n        for i in range(1, n):\n            dp[i][0] = max(dp[i - 1][0], dp[i - 1][1] + prices[i])\n            dp[i][1] = max(dp[i - 1][1], dp[i - 1][0] - prices[i])\n        return dp[n - 1][0]\n"
    },
    {
        "number": 123,
        "title": "Best Time to Buy and Sell Stock III",
        "difficulty": 2,
        "pass": 3,
        "answer": "        n = len(prices)\n        if n < 2:\n            return 0\n        buy1 = -prices[0]\n        buy2 = float('-inf')\n        sell1 = 0\n        sell2 = float('-inf')\n        for i in range(1, n):\n            buy1 = max(buy1, -prices[i])\n            sell1 = max(sell1, buy1 + prices[i])\n            buy2 = max(buy2, sell1 - prices[i])\n            sell2 = max(sell2, buy2 + prices[i])\n        return sell2\n"
    },
    {
        "number": 123,
        "title": "Best Time to Buy and Sell Stock III",
        "difficulty": 2,
        "pass": 4,
        "answer": "        n = len(prices)\n        if n == 0:\n            return 0\n        dp = [[0] * 2 for _ in range(n)]\n        dp[0][0] = 0\n        dp[0][1] = -prices[0]\n        for i in range(1, n):\n            dp[i][0] = max(dp[i - 1][0], dp[i - 1][1] + prices[i])\n            dp[i][1] = max(dp[i - 1][1], dp[i - 1][0] - prices[i])\n        return dp[n - 1][0]"
    },
    {
        "number": 123,
        "title": "Best Time to Buy and Sell Stock III",
        "difficulty": 2,
        "pass": 5,
        "answer": "        n = len(prices)\n        if n < 2:\n            return 0\n        dp = [[0] * 2 for _ in range(n)]\n        dp[0][0] = 0\n        dp[0][1] = -prices[0]\n        for i in range(1, n):\n            dp[i][0] = max(dp[i - 1][0], dp[i - 1][1] + prices[i])\n            dp[i][1] = max(dp[i - 1][1], dp[i - 1][0] - prices[i])\n        return dp[n - 1][0]"
    },
    {
        "number": 123,
        "title": "Best Time to Buy and Sell Stock III",
        "difficulty": 2,
        "pass": 6,
        "answer": "        n = len(prices)\n        if n < 2:\n            return 0\n        min_price = prices[0]\n        max_profit = 0\n        for i in range(1, n):\n            max_profit = max(max_profit, prices[i] - min_price)\n            min_price = min(min_price, prices[i])\n        return max_profit"
    },
    {
        "number": 123,
        "title": "Best Time to Buy and Sell Stock III",
        "difficulty": 2,
        "pass": 7,
        "answer": "        if not prices:\n            return 0\n        n = len(prices)\n        dp = [[0] * 2 for _ in range(n)]\n        dp[0][0], dp[0][1] = 0, -prices[0]\n        for i in range(1, n):\n            dp[i][0] = max(dp[i - 1][0], dp[i - 1][1] + prices[i])\n            dp[i][1] = max(dp[i - 1][1], dp[i - 1][0] - prices[i])\n        return dp[n - 1][0]"
    },
    {
        "number": 123,
        "title": "Best Time to Buy and Sell Stock III",
        "difficulty": 2,
        "pass": 8,
        "answer": "        n = len(prices)\n        if n < 2:\n            return 0\n        # dp[i][0] = max(dp[i-1][0], dp[i-1][1] + prices[i])\n        # dp[i][1] = max(dp[i-1][1], dp[i-1][0] - prices[i])\n        dp = [[0 for _ in range(2)] for _ in range(n)]\n        dp[0][0] = 0\n        dp[0][1] = -prices[0]\n        for i in range(1, n):\n            dp[i][0] = max(dp[i-1][0], dp[i-1][1] + prices[i])\n            dp[i][1] = max(dp[i-1][1], dp[i-1][0] - prices[i])\n        return dp[n-1][0]"
    },
    {
        "number": 123,
        "title": "Best Time to Buy and Sell Stock III",
        "difficulty": 2,
        "pass": 9,
        "answer": "        n = len(prices)\n        if n < 2:\n            return 0\n        # dp[i][0] = max(dp[i-1][0], dp[i-1][1] + prices[i])\n        # dp[i][1] = max(dp[i-1][1], dp[i-1][0] - prices[i])\n        dp = [[0] * 2 for _ in range(n)]\n        dp[0][0] = 0\n        dp[0][1] = -prices[0]\n        for i in range(1, n):\n            dp[i][0] = max(dp[i-1][0], dp[i-1][1] + prices[i])\n            dp[i][1] = max(dp[i-1][1], dp[i-1][0] - prices[i])\n        return dp[n-1][0]"
    },
    {
        "number": 124,
        "title": "Binary Tree Maximum Path Sum",
        "difficulty": 2,
        "pass": 0,
        "answer": "        self.res = float('-inf')\n        self.helper(root)\n        return self.res"
    },
    {
        "number": 124,
        "title": "Binary Tree Maximum Path Sum",
        "difficulty": 2,
        "pass": 1,
        "answer": "        self.res = float('-inf')\n        self.helper(root)\n        return self.res"
    },
    {
        "number": 124,
        "title": "Binary Tree Maximum Path Sum",
        "difficulty": 2,
        "pass": 2,
        "answer": "        self.res = float('-inf')\n        self.helper(root)\n        return self.res"
    },
    {
        "number": 124,
        "title": "Binary Tree Maximum Path Sum",
        "difficulty": 2,
        "pass": 3,
        "answer": "        self.res = float('-inf')\n        self.helper(root)\n        return self.res"
    },
    {
        "number": 124,
        "title": "Binary Tree Maximum Path Sum",
        "difficulty": 2,
        "pass": 4,
        "answer": "        self.res = float('-inf')\n        self.helper(root)\n        return self.res"
    },
    {
        "number": 124,
        "title": "Binary Tree Maximum Path Sum",
        "difficulty": 2,
        "pass": 5,
        "answer": "        self.res = float('-inf')\n        self.helper(root)\n        return self.res"
    },
    {
        "number": 124,
        "title": "Binary Tree Maximum Path Sum",
        "difficulty": 2,
        "pass": 6,
        "answer": "        self.res = float('-inf')\n        self.dfs(root)\n        return self.res"
    },
    {
        "number": 124,
        "title": "Binary Tree Maximum Path Sum",
        "difficulty": 2,
        "pass": 7,
        "answer": "        self.res = float('-inf')\n        self.helper(root)\n        return self.res"
    },
    {
        "number": 124,
        "title": "Binary Tree Maximum Path Sum",
        "difficulty": 2,
        "pass": 8,
        "answer": "        self.res = float('-inf')\n        self.helper(root)\n        return self.res"
    },
    {
        "number": 124,
        "title": "Binary Tree Maximum Path Sum",
        "difficulty": 2,
        "pass": 9,
        "answer": "        self.res = float('-inf')\n        self.helper(root)\n        return self.res"
    },
    {
        "number": 125,
        "title": "Valid Palindrome",
        "difficulty": 0,
        "pass": 0,
        "answer": "        s = s.lower()\n        s = re.sub('[^a-z0-9]', '', s)\n        return s == s[::-1]"
    },
    {
        "number": 125,
        "title": "Valid Palindrome",
        "difficulty": 0,
        "pass": 1,
        "answer": "        i, j = 0, len(s) - 1\n        while i < j:\n            while i < j and not s[i].isalnum():\n                i += 1\n            while i < j and not s[j].isalnum():\n                j -= 1\n            if s[i].lower()!= s[j].lower():\n                return False\n            i += 1\n            j -= 1\n        return True"
    },
    {
        "number": 125,
        "title": "Valid Palindrome",
        "difficulty": 0,
        "pass": 2,
        "answer": "        s = ''.join(e for e in s if e.isalnum()).lower()\n        return s == s[::-1]"
    },
    {
        "number": 125,
        "title": "Valid Palindrome",
        "difficulty": 0,
        "pass": 3,
        "answer": "        s = s.lower()\n        s = re.sub('[^a-z0-9]', '', s)\n        return s == s[::-1]"
    },
    {
        "number": 125,
        "title": "Valid Palindrome",
        "difficulty": 0,
        "pass": 4,
        "answer": "        import re\n        s = re.sub(r'[^a-z0-9]', '', s.lower())\n        return s == s[::-1]"
    },
    {
        "number": 125,
        "title": "Valid Palindrome",
        "difficulty": 0,
        "pass": 5,
        "answer": "        s = s.lower()\n        s = re.sub('[^a-z0-9]', '', s)\n        return s == s[::-1]"
    },
    {
        "number": 125,
        "title": "Valid Palindrome",
        "difficulty": 0,
        "pass": 6,
        "answer": "        s = s.lower()\n        s = re.sub(r'[^a-z0-9]', '', s)\n        return s == s[::-1]"
    },
    {
        "number": 125,
        "title": "Valid Palindrome",
        "difficulty": 0,
        "pass": 7,
        "answer": "        s = s.lower()\n        s = re.sub('[^a-z0-9]', '', s)\n        return s == s[::-1]"
    },
    {
        "number": 125,
        "title": "Valid Palindrome",
        "difficulty": 0,
        "pass": 8,
        "answer": "        s = s.lower()\n        s = re.sub(r'[^a-z0-9]', '', s)\n        return s == s[::-1]"
    },
    {
        "number": 125,
        "title": "Valid Palindrome",
        "difficulty": 0,
        "pass": 9,
        "answer": "        s = s.lower()\n        s = re.sub(r'[^a-z0-9]', '', s)\n        return s == s[::-1]"
    },
    {
        "number": 126,
        "title": "Word Ladder II",
        "difficulty": 2,
        "pass": 0,
        "answer": "        wordList = set(wordList)\n        if endWord not in wordList:\n            return []\n        if beginWord in wordList:\n            wordList.remove(beginWord)\n        queue = [(beginWord, [beginWord])]\n        visited = set()\n        while queue:\n            word, path = queue.pop(0)\n            if word == endWord:\n                return path\n            for i in range(len(word)):\n                for c in 'abcdefghijklmnopqrstuvwxyz':\n                    next_word = word[:i] + c + word[i + 1:]\n                    if next_word in wordList and next_word not in visited:\n                        visited.add(next_word)\n                        queue.append((next_word, path + [next_word]))\n        return []"
    },
    {
        "number": 126,
        "title": "Word Ladder II",
        "difficulty": 2,
        "pass": 1,
        "answer": "        wordList = set(wordList)\n        if endWord not in wordList:\n            return []\n        if beginWord in wordList:\n            wordList.remove(beginWord)\n        queue = [(beginWord, [beginWord])]\n        while queue:\n            word, path = queue.pop(0)\n            if word == endWord:\n                return path\n            for i in range(len(word)):\n                for c in 'abcdefghijklmnopqrstuvwxyz':\n                    next_word = word[:i] + c + word[i + 1:]\n                    if next_word in wordList:\n                        wordList.remove(next_word)\n                        queue.append((next_word, path + [next_word]))\n        return []"
    },
    {
        "number": 126,
        "title": "Word Ladder II",
        "difficulty": 2,
        "pass": 2,
        "answer": "        if endWord not in wordList:\n            return []\n        wordList = set(wordList)\n        wordList.add(beginWord)\n        queue = [(beginWord, [beginWord])]\n        visited = set()\n        while queue:\n            word, path = queue.pop(0)\n            if word == endWord:\n                return path\n            for i in range(len(word)):\n                for c in 'abcdefghijklmnopqrstuvwxyz':\n                    next_word = word[:i] + c + word[i + 1:]\n                    if next_word in wordList and next_word not in visited:\n                        visited.add(next_word)\n                        queue.append((next_word, path + [next_word]))\n        return []"
    },
    {
        "number": 126,
        "title": "Word Ladder II",
        "difficulty": 2,
        "pass": 3,
        "answer": "        wordList = set(wordList)\n        if endWord not in wordList:\n            return []\n        if beginWord == endWord:\n            return [[beginWord]]\n        bfs, visited = deque([(beginWord, [beginWord])]), set()\n        while bfs:\n            word, path = bfs.popleft()\n            if word == endWord:\n                return path\n            for i in range(len(word)):\n                for c in 'abcdefghijklmnopqrstuvwxyz':\n                    next_word = word[:i] + c + word[i + 1:]\n                    if next_word in wordList and next_word not in visited:\n                        visited.add(next_word)\n                        bfs.append((next_word, path + [next_word]))\n        return []"
    },
    {
        "number": 126,
        "title": "Word Ladder II",
        "difficulty": 2,
        "pass": 4,
        "answer": "        wordList = set(wordList)\n        if endWord not in wordList:\n            return []\n        queue, visited = [(beginWord, [beginWord])], set()\n        while queue:\n            word, path = queue.pop(0)\n            if word == endWord:\n                return path\n            for i in range(len(word)):\n                for c in 'abcdefghijklmnopqrstuvwxyz':\n                    next_word = word[:i] + c + word[i + 1:]\n                    if next_word in wordList and next_word not in visited:\n                        visited.add(next_word)\n                        queue.append((next_word, path + [next_word]))\n        return []"
    },
    {
        "number": 126,
        "title": "Word Ladder II",
        "difficulty": 2,
        "pass": 5,
        "answer": "        if endWord not in wordList:\n            return []\n        wordList = set(wordList)\n        queue = collections.deque([(beginWord, [beginWord])])\n        while queue:\n            word, path = queue.popleft()\n            if word == endWord:\n                return path\n            for i in range(len(word)):\n                for c in 'abcdefghijklmnopqrstuvwxyz':\n                    next_word = word[:i] + c + word[i + 1:]\n                    if next_word in wordList:\n                        wordList.remove(next_word)\n                        queue.append((next_word, path + [next_word]))\n        return []"
    },
    {
        "number": 126,
        "title": "Word Ladder II",
        "difficulty": 2,
        "pass": 6,
        "answer": "        if endWord not in wordList:\n            return []\n        wordList = set(wordList)\n        queue = collections.deque([(beginWord, [beginWord])])\n        visited = set()\n        while queue:\n            word, path = queue.popleft()\n            if word == endWord:\n                return path\n            for i in range(len(word)):\n                for c in 'abcdefghijklmnopqrstuvwxyz':\n                    next_word = word[:i] + c + word[i + 1:]\n                    if next_word in wordList and next_word not in visited:\n                        visited.add(next_word)\n                        queue.append((next_word, path + [next_word]))\n        return []"
    },
    {
        "number": 126,
        "title": "Word Ladder II",
        "difficulty": 2,
        "pass": 7,
        "answer": "        wordList = set(wordList)\n        res = []\n        if endWord not in wordList:\n            return res\n        queue = [(beginWord, [beginWord])]\n        while queue:\n            word, path = queue.pop(0)\n            if word == endWord:\n                res.append(path)\n                continue\n            for i in range(len(word)):\n                for j in 'abcdefghijklmnopqrstuvwxyz':\n                    if j == word[i]:\n                        continue\n                    new_word = word[:i] + j + word[i + 1:]\n                    if new_word in wordList:\n                        wordList.remove(new_word)\n                        queue.append((new_word, path + [new_word]))\n        return res"
    },
    {
        "number": 126,
        "title": "Word Ladder II",
        "difficulty": 2,
        "pass": 8,
        "answer": "        if endWord not in wordList:\n            return []\n        wordList = set(wordList)\n        wordList.add(beginWord)\n        wordList.add(endWord)\n        wordList = list(wordList)\n        begin, end = wordList.index(beginWord), wordList.index(endWord)\n        if begin > end:\n            begin, end = end, begin\n        res = []\n        self.dfs(begin, end, wordList, [beginWord], res)\n        return res"
    },
    {
        "number": 126,
        "title": "Word Ladder II",
        "difficulty": 2,
        "pass": 9,
        "answer": "        wordList = set(wordList)\n        if endWord not in wordList:\n            return []\n        if beginWord == endWord:\n            return [[beginWord]]\n        queue = collections.deque([(beginWord, [beginWord])])\n        visited = set()\n        while queue:\n            word, path = queue.popleft()\n            if word == endWord:\n                return path\n            for i in range(len(word)):\n                for c in 'abcdefghijklmnopqrstuvwxyz':\n                    next_word = word[:i] + c + word[i + 1:]\n                    if next_word in wordList and next_word not in visited:\n                        visited.add(next_word)\n                        queue.append((next_word, path + [next_word]))\n        return []"
    },
    {
        "number": 127,
        "title": "Word Ladder",
        "difficulty": 2,
        "pass": 0,
        "answer": "        if endWord not in wordList:\n            return 0\n        wordList = set(wordList)\n        queue = collections.deque([(beginWord, 1)])\n        while queue:\n            word, length = queue.popleft()\n            if word == endWord:\n                return length\n            for i in range(len(word)):\n                for c in 'abcdefghijklmnopqrstuvwxyz':\n                    next_word = word[:i] + c + word[i + 1:]\n                    if next_word in wordList:\n                        wordList.remove(next_word)\n                        queue.append((next_word, length + 1))\n        return 0"
    },
    {
        "number": 127,
        "title": "Word Ladder",
        "difficulty": 2,
        "pass": 1,
        "answer": "        if not beginWord or not endWord or not wordList or endWord not in wordList:\n            return 0\n        wordList = set(wordList)\n        queue = collections.deque([(beginWord, 1)])\n        while queue:\n            word, length = queue.popleft()\n            if word == endWord:\n                return length\n            for i in range(len(word)):\n                for j in 'abcdefghijklmnopqrstuvwxyz':\n                    next_word = word[:i] + j + word[i + 1:]\n                    if next_word in wordList:\n                        wordList.remove(next_word)\n                        queue.append((next_word, length + 1))\n        return 0"
    },
    {
        "number": 127,
        "title": "Word Ladder",
        "difficulty": 2,
        "pass": 2,
        "answer": "        if endWord not in wordList:\n            return 0\n        wordList = set(wordList)\n        queue = [(beginWord, 1)]\n        while queue:\n            word, level = queue.pop(0)\n            if word == endWord:\n                return level\n            for i in range(len(word)):\n                for c in 'abcdefghijklmnopqrstuvwxyz':\n                    next_word = word[:i] + c + word[i + 1:]\n                    if next_word in wordList:\n                        wordList.remove(next_word)\n                        queue.append((next_word, level + 1))\n        return 0"
    },
    {
        "number": 127,
        "title": "Word Ladder",
        "difficulty": 2,
        "pass": 3,
        "answer": "        if endWord not in wordList:\n            return 0\n        wordList = set(wordList)\n        queue = collections.deque([(beginWord, 1)])\n        while queue:\n            word, length = queue.popleft()\n            if word == endWord:\n                return length\n            for i in range(len(word)):\n                for j in 'abcdefghijklmnopqrstuvwxyz':\n                    next_word = word[:i] + j + word[i + 1:]\n                    if next_word in wordList:\n                        wordList.remove(next_word)\n                        queue.append((next_word, length + 1))\n        return 0"
    },
    {
        "number": 127,
        "title": "Word Ladder",
        "difficulty": 2,
        "pass": 4,
        "answer": "        if endWord not in wordList:\n            return 0\n        wordList = set(wordList)\n        queue = collections.deque([(beginWord, 1)])\n        while queue:\n            word, length = queue.popleft()\n            if word == endWord:\n                return length\n            for i in range(len(word)):\n                for c in 'abcdefghijklmnopqrstuvwxyz':\n                    next_word = word[:i] + c + word[i + 1:]\n                    if next_word in wordList:\n                        wordList.remove(next_word)\n                        queue.append((next_word, length + 1))\n        return 0"
    },
    {
        "number": 127,
        "title": "Word Ladder",
        "difficulty": 2,
        "pass": 5,
        "answer": "        if endWord not in wordList:\n            return 0\n        queue = collections.deque([(beginWord, 1)])\n        visited = set([beginWord])\n        while queue:\n            word, length = queue.popleft()\n            if word == endWord:\n                return length\n            for i in range(len(word)):\n                for j in 'abcdefghijklmnopqrstuvwxyz':\n                    nextWord = word[:i] + j + word[i + 1:]\n                    if nextWord in wordList and nextWord not in visited:\n                        visited.add(nextWord)\n                        queue.append((nextWord, length + 1))\n        return 0"
    },
    {
        "number": 127,
        "title": "Word Ladder",
        "difficulty": 2,
        "pass": 6,
        "answer": "        if endWord not in wordList:\n            return 0\n        wordList = set(wordList)\n        queue = collections.deque([(beginWord, 1)])\n        while queue:\n            word, length = queue.popleft()\n            if word == endWord:\n                return length\n            for i in range(len(word)):\n                for j in 'abcdefghijklmnopqrstuvwxyz':\n                    next_word = word[:i] + j + word[i + 1:]\n                    if next_word in wordList:\n                        wordList.remove(next_word)\n                        queue.append((next_word, length + 1))\n        return 0"
    },
    {
        "number": 127,
        "title": "Word Ladder",
        "difficulty": 2,
        "pass": 7,
        "answer": "        if endWord not in wordList:\n            return 0\n        wordList = set(wordList)\n        queue = collections.deque([(beginWord, 1)])\n        while queue:\n            word, length = queue.popleft()\n            if word == endWord:\n                return length\n            for i in range(len(word)):\n                for j in 'abcdefghijklmnopqrstuvwxyz':\n                    next_word = word[:i] + j + word[i + 1:]\n                    if next_word in wordList:\n                        wordList.remove(next_word)\n                        queue.append((next_word, length + 1))\n        return 0"
    },
    {
        "number": 127,
        "title": "Word Ladder",
        "difficulty": 2,
        "pass": 8,
        "answer": "        if endWord not in wordList:\n            return 0\n        wordList = set(wordList)\n        queue = collections.deque([(beginWord, 1)])\n        while queue:\n            word, length = queue.popleft()\n            if word == endWord:\n                return length\n            for i in range(len(word)):\n                for j in 'abcdefghijklmnopqrstuvwxyz':\n                    next_word = word[:i] + j + word[i + 1:]\n                    if next_word in wordList:\n                        wordList.remove(next_word)\n                        queue.append((next_word, length + 1))\n        return 0"
    },
    {
        "number": 127,
        "title": "Word Ladder",
        "difficulty": 2,
        "pass": 9,
        "answer": "        if not beginWord or not endWord or not wordList:\n            return 0\n        wordList = set(wordList)\n        if endWord not in wordList:\n            return 0\n        queue = [(beginWord, 1)]\n        while queue:\n            word, length = queue.pop(0)\n            if word == endWord:\n                return length\n            for i in range(len(word)):\n                for j in 'abcdefghijklmnopqrstuvwxyz':\n                    next_word = word[:i] + j + word[i + 1:]\n                    if next_word in wordList:\n                        wordList.remove(next_word)\n                        queue.append((next_word, length + 1))\n        return 0"
    },
    {
        "number": 128,
        "title": "Longest Consecutive Sequence",
        "difficulty": 1,
        "pass": 0,
        "answer": "        nums = set(nums)\n        res = 0\n        for num in nums:\n            if num - 1 not in nums:\n                temp = 1\n                while num + 1 in nums:\n                    temp += 1\n                    num += 1\n                res = max(res, temp)\n        return res"
    },
    {
        "number": 128,
        "title": "Longest Consecutive Sequence",
        "difficulty": 1,
        "pass": 1,
        "answer": "        nums_set = set(nums)\n        max_len = 0\n        for num in nums:\n            if num - 1 not in nums_set:\n                curr_len = 1\n                while num + 1 in nums_set:\n                    curr_len += 1\n                    num += 1\n                max_len = max(max_len, curr_len)\n        return max_len"
    },
    {
        "number": 128,
        "title": "Longest Consecutive Sequence",
        "difficulty": 1,
        "pass": 2,
        "answer": "        nums = set(nums)\n        max_len = 0\n        for num in nums:\n            if num - 1 not in nums:\n                curr_len = 1\n                while num + 1 in nums:\n                    num += 1\n                    curr_len += 1\n                max_len = max(max_len, curr_len)\n        return max_len"
    },
    {
        "number": 128,
        "title": "Longest Consecutive Sequence",
        "difficulty": 1,
        "pass": 3,
        "answer": "        if not nums:\n            return 0\n        nums = set(nums)\n        max_len = 0\n        for num in nums:\n            if num - 1 not in nums:\n                curr_len = 1\n                while num + 1 in nums:\n                    num += 1\n                    curr_len += 1\n                max_len = max(max_len, curr_len)\n        return max_len"
    },
    {
        "number": 128,
        "title": "Longest Consecutive Sequence",
        "difficulty": 1,
        "pass": 4,
        "answer": "        nums = set(nums)\n        max_len = 0\n        for n in nums:\n            if n - 1 not in nums:\n                curr_len = 1\n                while n + 1 in nums:\n                    curr_len += 1\n                    n += 1\n                max_len = max(max_len, curr_len)\n        return max_len"
    },
    {
        "number": 128,
        "title": "Longest Consecutive Sequence",
        "difficulty": 1,
        "pass": 5,
        "answer": "        if not nums:\n            return 0\n        nums.sort()\n        longest = 1\n        curr = 1\n        for i in range(1, len(nums)):\n            if nums[i]!= nums[i - 1]:\n                if nums[i] == nums[i - 1] + 1:\n                    curr += 1\n                else:\n                    longest = max(longest, curr)\n                    curr = 1\n        return max(longest, curr)"
    },
    {
        "number": 128,
        "title": "Longest Consecutive Sequence",
        "difficulty": 1,
        "pass": 6,
        "answer": "        nums = set(nums)\n        max_len = 0\n        for num in nums:\n            if num - 1 not in nums:\n                curr_len = 1\n                while num + 1 in nums:\n                    curr_len += 1\n                    num += 1\n                max_len = max(max_len, curr_len)\n        return max_len"
    },
    {
        "number": 128,
        "title": "Longest Consecutive Sequence",
        "difficulty": 1,
        "pass": 7,
        "answer": "        if not nums:\n            return 0\n        nums = set(nums)\n        longest = 0\n        for num in nums:\n            if num - 1 not in nums:\n                curr = 1\n                while num + 1 in nums:\n                    curr += 1\n                    num += 1\n                longest = max(longest, curr)\n        return longest\n"
    },
    {
        "number": 128,
        "title": "Longest Consecutive Sequence",
        "difficulty": 1,
        "pass": 8,
        "answer": "        if not nums:\n            return 0\n        nums = set(nums)\n        max_length = 0\n        for num in nums:\n            if num - 1 not in nums:\n                length = 1\n                while num + 1 in nums:\n                    length += 1\n                    num += 1\n                max_length = max(max_length, length)\n        return max_length\n"
    },
    {
        "number": 128,
        "title": "Longest Consecutive Sequence",
        "difficulty": 1,
        "pass": 9,
        "answer": "        if not nums:\n            return 0"
    },
    {
        "number": 129,
        "title": "Sum Root to Leaf Numbers",
        "difficulty": 1,
        "pass": 0,
        "answer": "        def dfs(node, path):\n            if not node:\n                return 0\n            if not node.left and not node.right:\n                return int(''.join(path + [str(node.val)]))\n            return dfs(node.left, path + [str(node.val)]) + dfs(node.right, path + [str(node.val)])"
    },
    {
        "number": 129,
        "title": "Sum Root to Leaf Numbers",
        "difficulty": 1,
        "pass": 1,
        "answer": "        if not root:\n            return 0\n        if not root.left and not root.right:\n            return int(str(root.val))\n        return self.sumNumbers(root.left) + self.sumNumbers(root.right) + int(str(root.val) + str(self.sumNumbers(root.left) + self.sumNumbers(root.right)))"
    },
    {
        "number": 129,
        "title": "Sum Root to Leaf Numbers",
        "difficulty": 1,
        "pass": 2,
        "answer": "        self.res = 0\n        self.dfs(root, 0)\n        return self.res"
    },
    {
        "number": 129,
        "title": "Sum Root to Leaf Numbers",
        "difficulty": 1,
        "pass": 3,
        "answer": "        self.res = 0\n        self.dfs(root, 0)\n        return self.res"
    },
    {
        "number": 129,
        "title": "Sum Root to Leaf Numbers",
        "difficulty": 1,
        "pass": 4,
        "answer": "        if not root:\n            return 0\n        self.res = 0\n        self.dfs(root, 0)\n        return self.res"
    },
    {
        "number": 129,
        "title": "Sum Root to Leaf Numbers",
        "difficulty": 1,
        "pass": 5,
        "answer": "        self.res = 0\n        self.dfs(root, 0)\n        return self.res"
    },
    {
        "number": 129,
        "title": "Sum Root to Leaf Numbers",
        "difficulty": 1,
        "pass": 6,
        "answer": "        if not root:\n            return 0\n        if not root.left and not root.right:\n            return int(str(root.val))\n        return self.sumNumbers(root.left) + self.sumNumbers(root.right) + int(str(root.val) + str(self.sumNumbers(root.left) + self.sumNumbers(root.right)))"
    },
    {
        "number": 129,
        "title": "Sum Root to Leaf Numbers",
        "difficulty": 1,
        "pass": 7,
        "answer": "        def dfs(node, val):\n            if not node:\n                return 0\n            val = val * 10 + node.val\n            if not node.left and not node.right:\n                return val\n            return dfs(node.left, val) + dfs(node.right, val)"
    },
    {
        "number": 129,
        "title": "Sum Root to Leaf Numbers",
        "difficulty": 1,
        "pass": 8,
        "answer": "        def dfs(node, path):\n            if not node:\n                return 0\n            if not node.left and not node.right:\n                return int(''.join(path + [str(node.val)]))\n            return dfs(node.left, path + [str(node.val)]) + dfs(node.right, path + [str(node.val)])"
    },
    {
        "number": 129,
        "title": "Sum Root to Leaf Numbers",
        "difficulty": 1,
        "pass": 9,
        "answer": "        if not root:\n            return 0\n        if not root.left and not root.right:\n            return int(str(root.val))\n        return self.sumNumbers(root.left) + self.sumNumbers(root.right) + int(str(root.val) + str(self.sumNumbers(root.left) + self.sumNumbers(root.right)))"
    }
]