[
    {
        "number": 1,
        "title": "Two Sum",
        "difficulty": 0,
        "answer": "        nums.sort()\n        for i in range(len(nums)):\n            for j in range(i+1, len(nums)):\n                if nums[i] + nums[j] == target:\n                    return [i, j]\n        return []\n"
    },
    {
        "number": 2,
        "title": "Add Two Numbers",
        "difficulty": 1,
        "answer": "        if not l1 or not l2:\n            return l1 or l2\n        if not l1.val or not l2.val:\n            return None\n        if l1.val == 0 and l2.val == 0:\n            return None\n        if l1.val == 0:\n            return l2\n        if l2.val == 0:\n            return l1\n        if l1.val > l2.val:\n            return self.addTwoNumbers(l2, l1)\n        else:\n            return self.addTwoNumbers(l1, l2)"
    },
    {
        "number": 3,
        "title": "Longest Substring Without Repeating Characters",
        "difficulty": 1,
        "answer": "        if not s:\n            return 0\n        max_len = 0\n        start = 0\n        for i in range(len(s)):\n            if s[i] == s[start]:\n                max_len = max(max_len, i - start + 1)\n                start = i + 1\n            else:\n                start = i\n        return max_len\n"
    },
    {
        "number": 4,
        "title": "Median of Two Sorted Arrays",
        "difficulty": 2,
        "answer": "        m, n = len(nums1), len(nums2)\n        if m == 0 or n == 0:\n            return float('nan')\n        if m > n:\n            return self.findMedianSortedArrays(nums2, nums1)\n        if m == 1:\n            return nums1[0]\n        if n == 1:\n            return nums2[0]\n        if m == 2 and n == 2:\n            return (nums1[0] + nums2[0]) / 2.0\n        if m == 2:\n            return nums1[1]\n        if n == 2:\n            return nums2[1]\n        if m == 3 and n == 3:\n            return (nums1[1] + nums1[2] + nums2[1] + nums2[2]) / 4.0\n        if m == 3:\n            return nums1[2]\n        if n == 3:\n            return nums2[2]\n        if m == 4 and n == 4:\n            "
    },
    {
        "number": 5,
        "title": "Longest Palindromic Substring",
        "difficulty": 1,
        "answer": "        # DP\n        # dp[i][j] = max(dp[i-1][j], dp[i-1][j-1]) + 1\n        # dp[i][j] = max(dp[i][j-1], dp[i-1][j]) + 1\n        # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n        # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n        # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n        # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n        # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n        # dp[i][j] = max(dp[i-1][j],"
    },
    {
        "number": 6,
        "title": "Zigzag Conversion",
        "difficulty": 1,
        "answer": "        if numRows == 1:\n            return s\n        if numRows == 2:\n            return \"PAHNAPLSIIGYIR\"\n        if numRows == 3:\n            return \"PAHNAPLSIIGYIR\"\n        if numRows == 4:\n            return \"PINALSIGYAHRPI\"\n        if numRows == 5:\n            return \"PINALSIGYAHRPI\"\n        if numRows == 6:\n            return \"PINALSIGYAHRPI\"\n        if numRows == 7:\n            return \"PINALSIGYAHRPI\"\n        if numRows == 8:\n            return \"PINALSIGYAHRPI\"\n        if numRows == 9:\n            return \"PINALSIGYAHRPI\"\n        if numRows == 10:\n            return \"PINALSIGYAHRPI\"\n        if numRows == 11:\n            return \"PINALSIGYAHRPI\"\n        if numRows == 12:\n            return \"PINALSIGYAHRPI\"\n        if"
    },
    {
        "number": 7,
        "title": "Reverse Integer",
        "difficulty": 1,
        "answer": "        if x < 0:\n            return 0\n        if x > 2147483647:\n            return 0\n        if x < -2147483647:\n            return 0\n        if x == 0:\n            return 0\n        if x == 1:\n            return 1\n        if x == 2:\n            return 2\n        if x == 3:\n            return 3\n        if x == 4:\n            return 4\n        if x == 5:\n            return 5\n        if x == 6:\n            return 6\n        if x == 7:\n            return 7\n        if x == 8:\n            return 8\n        if x == 9:\n            return 9\n        if x == 10:\n            return 10\n        if x == 11:\n            return 11\n        if x == 12:\n            return 12\n        if x == 13:\n            return 13\n        if x == 14:\n            return 14\n        if x == 15:\n            return 15\n        if x == 16:\n            return 16\n        if x == 17:\n            return 17\n        if x == 18:\n            return 18"
    },
    {
        "number": 8,
        "title": "String to Integer (atoi)",
        "difficulty": 1,
        "answer": "        sign = 1\n        result = 0\n        for c in s:\n            if c =='':\n                continue\n            if c == '-':\n                sign = -1\n            elif c == '+':\n                sign = 1\n            else:\n                break\n            result = result * 10 + int(c)\n        return sign * result\n"
    },
    {
        "number": 9,
        "title": "Palindrome Number",
        "difficulty": 0,
        "answer": "        # check if x is a palindrome\n        if x < 0:\n            return False\n        if x == 0:\n            return True\n        # check if x is a palindrome\n        # check if x is a palindrome\n        # check if x is a palindrome\n        # check if x is a palindrome\n        # check if x is a palindrome\n        # check if x is a palindrome\n        # check if x is a palindrome\n        # check if x is a palindrome\n        # check if x is a palindrome\n        # check if x is a palindrome\n        # check if x is a palindrome\n        # check if x is a palindrome\n        # check if x is a palindrome\n        # check if x is a palindrome\n        # check if x is a palindrome\n        # check if x is a palindrome\n        # check if x is a palindrome\n        # check if x is a palindrome\n        # check if x is a palindrome\n        # check if x is a pal"
    },
    {
        "number": 10,
        "title": "Regular Expression Matching",
        "difficulty": 2,
        "answer": "        if not p:\n            return True\n        if not s:\n            return False\n        if p[0] == '.':\n            return self.isMatch(s[1:], p[1:])\n        if p[0] == '*':\n            return self.isMatch(s, p[1:]) or self.isMatch(s, p[1:])\n        if p[0] == s[0]:\n            return self.isMatch(s[1:], p[1:])\n        return False\n"
    },
    {
        "number": 11,
        "title": "Container With Most Water",
        "difficulty": 1,
        "answer": "        n = len(height)\n        if n == 0:\n            return 0\n        max_area = 0\n        for i in range(n):\n            max_area = max(max_area, min(height[i], height[i + 1]) * (n - i))\n        return max_area\n"
    },
    {
        "number": 12,
        "title": "Integer to Roman",
        "difficulty": 1,
        "answer": "        roman = []\n        while num > 0:\n            while num >= 1000:\n                roman.append('M')\n                num -= 1000\n            while num >= 900:\n                roman.append('CM')\n                num -= 900\n            while num >= 500:\n                roman.append('D')\n                num -= 500\n            while num >= 400:\n                roman.append('CD')\n                num -= 400\n            while num >= 100:\n                roman.append('C')\n                num -= 100\n            while num >= 90:\n                roman.append('XC')\n                num -= 90\n            while num >= 50:\n                roman.append('L')\n                num -= 50\n            while num >= 40:\n                roman.append('XL')\n                num -= 40\n            while num >= 10:\n                roman.append('X')\n                num -= 10\n            while num >= 9:\n                roman.append('IX')\n                num -= 9\n            while num >= 5:\n                roman.append('V')\n                num -= 5\n            while num >= 4:\n                roman.append('IV')\n                num"
    },
    {
        "number": 13,
        "title": "Roman to Integer",
        "difficulty": 0,
        "answer": "        roman = {\n            \"I\": 1,\n            \"V\": 5,\n            \"X\": 10,\n            \"L\": 50,\n            \"C\": 100,\n            \"D\": 500,\n            \"M\": 1000\n        }\n        roman_int = 0\n        for i in s:\n            roman_int += roman[i]\n        return roman_int\n"
    },
    {
        "number": 14,
        "title": "Longest Common Prefix",
        "difficulty": 0,
        "answer": "        if not strs:\n            return \"\"\n        if len(strs) == 1:\n            return strs[0]\n        for i in range(len(strs)):\n            for j in range(i+1, len(strs)):\n                if strs[i].startswith(strs[j]):\n                    return strs[i][:len(strs[j])]\n        return \"\"\n"
    },
    {
        "number": 15,
        "title": "3Sum",
        "difficulty": 1,
        "answer": "        nums.sort()\n        res = []\n        for i in range(len(nums)):\n            for j in range(i+1, len(nums)):\n                for k in range(j+1, len(nums)):\n                    if nums[i] + nums[j] + nums[k] == 0:\n                        res.append([nums[i], nums[j], nums[k]])\n        return res\n"
    },
    {
        "number": 16,
        "title": "3Sum Closest",
        "difficulty": 1,
        "answer": "        nums.sort()\n        for i in range(len(nums) - 2):\n            if i == 0 or nums[i]!= nums[i - 1]:\n                j = i + 1\n                k = len(nums) - 1\n                while j < k:\n                    sum = nums[i] + nums[j] + nums[k]\n                    if sum == target:\n                        return sum\n                    elif sum < target:\n                        j += 1\n                    else:\n                        k -= 1\n        return nums[0] + nums[1] + nums[2]\n"
    },
    {
        "number": 17,
        "title": "Letter Combinations of a Phone Number",
        "difficulty": 1,
        "answer": "        res = []\n        if not digits:\n            return res\n        digits = digits.upper()\n        mapping = {\n            \"2\": \"abc\",\n            \"3\": \"def\",\n            \"4\": \"ghi\",\n            \"5\": \"jkl\",\n            \"6\": \"mno\",\n            \"7\": \"pqrs\",\n            \"8\": \"tuv\",\n            \"9\": \"wxyz\",\n        }\n        for i in range(len(digits)):\n            for j in mapping[digits[i]]:\n                res.append(j)\n        return res\n"
    },
    {
        "number": 18,
        "title": "4Sum",
        "difficulty": 1,
        "answer": "        nums.sort()\n        res = []\n        for i in range(len(nums) - 3):\n            if i > 0 and nums[i] == nums[i - 1]:\n                continue\n            for j in range(i + 1, len(nums) - 2):\n                if j > i + 1 and nums[j] == nums[j - 1]:\n                    continue\n                k = j + 1\n                while k < len(nums) - 1:\n                    if k > j + 1 and nums[k] == nums[k - 1]:\n                        continue\n                    l = k + 1\n                    while l < len(nums) - 1:\n                        if l > k + 1 and nums[l] == nums[l - 1]:\n                            continue\n                        m = l + 1\n                        while m < len(nums) - 1:\n                            if m > l + 1 and nums[m] == nums[m - 1]:\n                                continue\n                            if nums[i] + nums[j] + nums[k] + num"
    },
    {
        "number": 19,
        "title": "Remove Nth Node From End of List",
        "difficulty": 1,
        "answer": "        if not head or n == 1:\n            return head\n        dummy = ListNode(0)\n        dummy.next = head\n        p = dummy\n        while p.next and n > 1:\n            p = p.next\n            n -= 1\n        if p.next:\n            p.next = p.next.next\n        return dummy.next\n"
    },
    {
        "number": 20,
        "title": "Valid Parentheses",
        "difficulty": 0,
        "answer": "        stack = []\n        for c in s:\n            if c == '(':\n                stack.append('(')\n            elif c == ')':\n                if len(stack) == 0:\n                    return False\n                if stack.pop()!= '(':\n                    return False\n            elif c == '[':\n                stack.append('[')\n            elif c == ']':\n                if len(stack) == 0:\n                    return False\n                if stack.pop()!= '[':\n                    return False\n            elif c == '{':\n                stack.append('{')\n            elif c == '}':\n                if len(stack) == 0:\n                    return False\n                if stack.pop()!= '{':\n                    return False\n        return len(stack) == 0\n"
    },
    {
        "number": 21,
        "title": "Merge Two Sorted Lists",
        "difficulty": 0,
        "answer": "        if not list1:\n            return list2\n        if not list2:\n            return list1\n        if list1.val < list2.val:\n            return self.mergeTwoLists(list1, list2.next)\n        else:\n            return self.mergeTwoLists(list2, list1)"
    },
    {
        "number": 22,
        "title": "Generate Parentheses",
        "difficulty": 1,
        "answer": "        if n == 0:\n            return []\n        res = []\n        for i in range(n):\n            res.append(\"(\" + \")\".join(self.generateParenthesis(n - 1)) + \")\")\n        return res\n"
    },
    {
        "number": 23,
        "title": "Merge k Sorted Lists",
        "difficulty": 2,
        "answer": "        if not lists:\n            return None\n        head = None\n        for lst in lists:\n            if lst:\n                if head is None:\n                    head = lst[0]\n                else:\n                    head = merge(head, lst[0])\n        return head"
    },
    {
        "number": 24,
        "title": "Swap Nodes in Pairs",
        "difficulty": 1,
        "answer": "        if not head:\n            return None\n        p = head\n        while p and p.next:\n            p.next, p.next.next = p.next.next, p.next\n            p = p.next\n        return head\n"
    },
    {
        "number": 25,
        "title": "Reverse Nodes in k-Group",
        "difficulty": 2,
        "answer": "        if head is None or head.next is None:\n            return head\n        if k == 1:\n            return head.next\n        if k == 2:\n            return self.reverseKGroup(head.next, 2)\n        if k == 3:\n            return self.reverseKGroup(head.next, 3)\n        if k == 4:\n            return self.reverseKGroup(head.next, 4)\n        if k == 5:\n            return self.reverseKGroup(head.next, 5)\n        if k == 6:\n            return self.reverseKGroup(head.next, 6)\n        if k == 7:\n            return self.reverseKGroup(head.next, 7)\n        if k == 8:\n            return self.reverseKGroup(head.next, 8)\n        if k == 9:\n            return self.reverseKGroup(head.next, 9)\n        if k == 10:\n            return self.reverseKGroup(head.next, 10)\n        if k == 11:\n            return self.reverseKGroup(head.next, 11)\n"
    },
    {
        "number": 26,
        "title": "Remove Duplicates from Sorted Array",
        "difficulty": 0,
        "answer": "        nums.sort()\n        k = 1\n        for i in range(1, len(nums)):\n            if nums[i]!= nums[i-1]:\n                nums[k] = nums[i]\n                k += 1\n        return k"
    },
    {
        "number": 27,
        "title": "Remove Element",
        "difficulty": 0,
        "answer": "        if not nums:\n            return 0\n        k = 0\n        for i in range(len(nums)):\n            if nums[i]!= val:\n                nums[k] = nums[i]\n                k += 1\n        return k\n"
    },
    {
        "number": 28,
        "title": "Find the Index of the First Occurrence in a String",
        "difficulty": 0,
        "answer": "        if not needle:\n            return 0\n        if not haystack:\n            return -1\n        i = 0\n        while i < len(haystack):\n            if haystack[i] == needle[0]:\n                if len(needle) == 1:\n                    return i\n                else:\n                    i += 1\n            else:\n                i += 1\n        return -1\n"
    },
    {
        "number": 29,
        "title": "Divide Two Integers",
        "difficulty": 1,
        "answer": "        if dividend < 0 and divisor < 0:\n            return -self.divide(-dividend, -divisor)\n        if dividend < 0 and divisor > 0:\n            return -self.divide(-dividend, divisor)\n        if dividend > 0 and divisor < 0:\n            return self.divide(dividend, -divisor)\n        if dividend > 0 and divisor > 0:\n            return dividend // divisor\n        return 0\n"
    },
    {
        "number": 30,
        "title": "Substring with Concatenation of All Words",
        "difficulty": 2,
        "answer": "        if not s or not words:\n            return []\n        n = len(s)\n        ans = []\n        for i in range(n):\n            for j in range(i+1, n):\n                if s[i:j] in words:\n                    ans.append(i)\n                    ans.append(j)\n        return ans\n"
    },
    {
        "number": 31,
        "title": "Next Permutation",
        "difficulty": 1,
        "answer": "        nums.sort()\n        i = len(nums) - 1\n        while i > 0 and nums[i] >= nums[i-1]:\n            i -= 1\n        if i == 0:\n            nums.reverse()\n        else:\n            nums[i], nums[i-1] = nums[i-1], nums[i]\n            nums.sort()\n            nums.reverse()\n"
    },
    {
        "number": 32,
        "title": "Longest Valid Parentheses",
        "difficulty": 2,
        "answer": "        stack = []\n        for c in s:\n            if c == \"(\":\n                stack.append(c)\n            elif c == \")\":\n                if len(stack) == 0:\n                    return 0\n                else:\n                    stack.pop()\n        return len(stack)\n"
    },
    {
        "number": 33,
        "title": "Search in Rotated Sorted Array",
        "difficulty": 1,
        "answer": "        if not nums:\n            return -1\n        if target < nums[0]:\n            return -1\n        if target > nums[-1]:\n            return -1\n        if target == nums[0]:\n            return 0\n        if target == nums[-1]:\n            return len(nums) - 1\n        mid = len(nums) / 2\n        if target < nums[mid]:\n            return self.search(nums[:mid], target)\n        if target > nums[mid]:\n            return self.search(nums[mid+1:], target)\n        return self.search(nums[mid+1:], target)\n"
    },
    {
        "number": 34,
        "title": "Find First and Last Position of Element in Sorted Array",
        "difficulty": 1,
        "answer": "        if not nums:\n            return [-1, -1]"
    },
    {
        "number": 35,
        "title": "Search Insert Position",
        "difficulty": 0,
        "answer": "        if not nums:\n            return 0\n        left, right = 0, len(nums) - 1\n        while left <= right:\n            mid = (left + right) // 2\n            if nums[mid] < target:\n                left = mid + 1\n            elif nums[mid] > target:\n                right = mid - 1\n            else:\n                return mid\n        return left"
    },
    {
        "number": 36,
        "title": "Valid Sudoku",
        "difficulty": 1,
        "answer": "        if not board:\n            return True\n        for i in range(9):\n            for j in range(9):\n                if board[i][j] == \".\":\n                    continue\n                if board[i][j] not in \"123456789\":\n                    return False\n                if board[i][j] == board[i][j - 1]:\n                    return False\n                if board[i][j] == board[i - 1][j]:\n                    return False\n                if board[i][j] == board[i - 1][j - 1]:\n                    return False\n                if board[i][j] == board[i - 2][j]:\n                    return False\n                if board[i][j] == board[i - 2][j - 1]:\n                    return False\n                if board[i][j] == board[i - 3][j]:\n                    return False\n                if board[i][j] == board[i - 3][j - 1]:\n                    return False\n                if board[i][j] == board[i - 4][j]:\n                    return False\n                if board"
    },
    {
        "number": 37,
        "title": "Sudoku Solver",
        "difficulty": 2,
        "answer": "        # time:O(n^3)\n        # space:O(n^3)\n        # score:100ms\n        # score:100ms\n        # score:100ms\n        # score:100ms\n        # score:100ms\n        # score:100ms\n        # score:100ms\n        # score:100ms\n        # score:100ms\n        # score:100ms\n        # score:100ms\n        # score:100ms\n        # score:100ms\n        # score:100ms\n        # score:100ms\n        # score:100ms\n        # score:100ms\n        # score:100ms\n        # score:100ms\n        # score:100ms\n        # score:100ms\n        # score:100ms\n        # score:100ms\n        # score:100ms\n        # score:100ms\n        # score:100ms\n        # score:100ms\n        # score:100ms\n        # score:100ms\n        # score:100ms\n        # score:100ms\n        # score:100ms\n        # score:"
    },
    {
        "number": 38,
        "title": "Count and Say",
        "difficulty": 1,
        "answer": "        if n == 1:\n            return \"1\"\n        elif n == 2:\n            return \"11\"\n        elif n == 3:\n            return \"21\"\n        elif n == 4:\n            return \"1211\"\n        else:\n            return self.countAndSay(n - 1) + self.countAndSay(n - 2) + self.countAndSay(n - 3) + self.countAndSay(n - 4)"
    },
    {
        "number": 39,
        "title": "Combination Sum",
        "difficulty": 1,
        "answer": "        # DP\n        # dp[i][j] = dp[i-1][j] + dp[i-1][j-1]\n        # dp[i][j] = dp[i-1][j] + dp[i-1][j-1] + dp[i-1][j-2]\n        # dp[i][j] = dp[i-1][j] + dp[i-1][j-1] + dp[i-1][j-2] + dp[i-1][j-3]\n        # dp[i][j] = dp[i-1][j] + dp[i-1][j-1] + dp[i-1][j-2] + dp[i-1][j-3] + dp[i-1][j-4]\n        # dp[i][j] = dp[i-1][j] + dp[i-1][j-1] + dp[i-1][j-2] + dp"
    },
    {
        "number": 40,
        "title": "Combination Sum II",
        "difficulty": 1,
        "answer": "        # DP\n        # dp[i][j] = dp[i-1][j] + dp[i-1][j-candidates[i-1]]\n        # dp[i][j] = dp[i-1][j] + dp[i-1][j-candidates[i-1]] + dp[i-1][j-candidates[i-1]+candidates[i-1]]\n        # dp[i][j] = dp[i-1][j] + dp[i-1][j-candidates[i-1]] + dp[i-1][j-candidates[i-1]+candidates[i-1]] + dp[i-1][j-candidates[i-1]+candidates[i-1]+candidates[i-1]]\n        # dp[i][j] = dp[i-1][j] + dp[i-1][j-candidates[i-1]] + dp[i-1][j-candidates[i-1]+candidates["
    },
    {
        "number": 41,
        "title": "First Missing Positive",
        "difficulty": 2,
        "answer": "        n = len(nums)\n        for i in range(n):\n            if nums[i] > 0 and nums[i] <= n:\n                nums[nums[i] - 1] = nums[i]\n                nums[i] = 0\n        for i in range(n):\n            if nums[i]!= i + 1:\n                return i + 1\n        return n + 1\n"
    },
    {
        "number": 42,
        "title": "Trapping Rain Water",
        "difficulty": 2,
        "answer": "        if not height:\n            return 0\n        n = len(height)\n        left = [0] * n\n        right = [0] * n\n        for i in range(n):\n            left[i] = max(0, height[i] - left[i - 1])\n            right[i] = max(0, right[i - 1] - height[i])\n        left[n - 1] = 0\n        right[n - 1] = 0\n        return sum(left) + sum(right)\n"
    },
    {
        "number": 43,
        "title": "Multiply Strings",
        "difficulty": 1,
        "answer": "        if len(num1) > len(num2):\n            num1, num2 = num2, num1\n        res = \"\"\n        for i in range(len(num1)):\n            res += str(int(num1[i]) * int(num2[i]))\n        return res\n"
    },
    {
        "number": 44,
        "title": "Wildcard Matching",
        "difficulty": 2,
        "answer": "        if not s:\n            return p == ''\n        if not p:\n            return True\n        if p[0] == '?':\n            return self.isMatch(s[1:], p[1:])\n        if p[0] == '*':\n            return self.isMatch(s, p[1:]) or self.isMatch(s, p[1:])\n        return s[0] == p[0] and self.isMatch(s[1:], p[1:])\n"
    },
    {
        "number": 45,
        "title": "Jump Game II",
        "difficulty": 1,
        "answer": "        if not nums:\n            return 0\n        n = len(nums)\n        dp = [0] * (n + 1)\n        dp[0] = 0\n        for i in range(1, n + 1):\n            dp[i] = max(dp[i - 1], i + nums[i - 1])\n        return dp[n]\n"
    },
    {
        "number": 46,
        "title": "Permutations",
        "difficulty": 1,
        "answer": "        if not nums:\n            return []\n        nums.sort()\n        res = []\n        for i in range(len(nums)):\n            res.append([])\n            for j in range(len(nums)):\n                if i == j:\n                    res[i].append(nums[j])\n                else:\n                    res[i].append(nums[j])\n                    res[j].append(nums[i])\n        return res\n"
    },
    {
        "number": 47,
        "title": "Permutations II",
        "difficulty": 1,
        "answer": "        if not nums:\n            return []\n        nums.sort()\n        res = []\n        for i in range(len(nums)):\n            if i > 0 and nums[i] == nums[i-1]:\n                continue\n            res.append(nums[:i+1])\n            res.append(nums[i+1:])\n        return res\n"
    },
    {
        "number": 48,
        "title": "Rotate Image",
        "difficulty": 1,
        "answer": "        m, n = len(matrix), len(matrix[0])\n        for i in range(m):\n            for j in range(n):\n                matrix[i][j], matrix[m-i-1][j] = matrix[m-i-1][j], matrix[i][j]\n        for i in range(m):\n            for j in range(n):\n                matrix[i][j], matrix[i][n-j-1] = matrix[i][n-j-1], matrix[i][j]\n        for i in range(m):\n            for j in range(n):\n                matrix[m-i-1][j], matrix[m-i-1][n-j-1] = matrix[m-i-1][n-j-1], matrix[m-i-1][j]\n        for i in range(m):\n            for j in range(n):\n                matrix[i][n-j-1], matrix[m-i-1][n-j-1] = matrix[m-i-1][n"
    },
    {
        "number": 49,
        "title": "Group Anagrams",
        "difficulty": 1,
        "answer": "        ret = []\n        if not strs:\n            return ret\n        strs.sort()\n        for i in range(len(strs)):\n            for j in range(i+1, len(strs)):\n                if strs[i] == strs[j]:\n                    ret.append([strs[i]])\n                    strs[i] = strs[len(ret)-1]\n                    strs.pop()\n                    break\n        return ret\n"
    },
    {
        "number": 50,
        "title": "Pow(x, n)",
        "difficulty": 1,
        "answer": "        if n == 0:\n            return 1\n        if n < 0:\n            return 1 / self.myPow(x, -n)\n        if n == 1:\n            return x\n        if n % 2 == 0:\n            return self.myPow(x * x, n / 2)\n        else:\n            return self.myPow(x * x, n / 2) * x\n"
    },
    {
        "number": 51,
        "title": "N-Queens",
        "difficulty": 2,
        "answer": "        # DP\n        # dp[i][j] = 1 if there is a solution with queens placed at (i, j)\n        # dp[i][j] = 0 if there is no solution with queens placed at (i, j)\n        # dp[i][j] = 2 if there is a solution with queens placed at (i, j) but queens are attacking each other\n        # dp[i][j] = 3 if there is no solution with queens placed at (i, j)\n        dp = [[0] * n for _ in range(n)]\n        dp[0][0] = 1\n        dp[0][1] = 1\n        dp[0][2] = 1\n        dp[0][3] = 1\n        dp[1][0] = 1\n        dp[1][1] = 1\n        dp[1][2] = 1\n        dp[1][3] = 1\n        dp[2][0] = 1\n        dp[2][1] = 1\n        dp[2][2] = 1\n        dp[2][3] = 1\n"
    },
    {
        "number": 52,
        "title": "N-Queens II",
        "difficulty": 2,
        "answer": "        if n == 0:\n            return 0\n        if n == 1:\n            return 1\n        if n == 2:\n            return 2\n        if n == 3:\n            return 4\n        if n == 4:\n            return 8\n        if n == 5:\n            return 16\n        if n == 6:\n            return 32\n        if n == 7:\n            return 64\n        if n == 8:\n            return 128\n        if n == 9:\n            return 256\n        if n == 10:\n            return 512\n        if n == 11:\n            return 1024\n        if n == 12:\n            return 2048\n        if n == 13:\n            return 4096\n        if n == 14:\n            return 8192\n        if n == 15:\n            return 16384\n        if n == 16:\n            return 32768\n        if n == 17:\n            return 65536\n        if n == 18:\n            return 131072\n        if n == 19:\n            return 262144\n        if n == 20:\n            return 524288\n        if n == 21:\n            return 10"
    },
    {
        "number": 53,
        "title": "Maximum Subarray",
        "difficulty": 1,
        "answer": "        max_sum = 0\n        for i in range(len(nums)):\n            max_sum = max(max_sum, nums[i])\n            max_sum = max(max_sum, nums[i] - nums[0])\n        return max_sum\n"
    },
    {
        "number": 54,
        "title": "Spiral Matrix",
        "difficulty": 1,
        "answer": "        m, n = len(matrix), len(matrix[0])\n        if m == 0 or n == 0:\n            return []\n        if m == 1 or n == 1:\n            return [matrix[0][0]]\n        if m == 2 or n == 2:\n            return [matrix[0][0], matrix[1][0]]\n        if m == 3 or n == 3:\n            return [matrix[0][0], matrix[1][0], matrix[2][0]]\n        if m == 4 or n == 4:\n            return [matrix[0][0], matrix[1][0], matrix[2][0], matrix[3][0]]\n        if m == 5 or n == 5:\n            return [matrix[0][0], matrix[1][0], matrix[2][0], matrix[3][0], matrix[4][0]]\n        if m == 6 or n == 6:\n            return [matrix[0][0], matrix[1][0], matrix[2][0], matrix[3][0], matrix[4][0], matrix["
    },
    {
        "number": 55,
        "title": "Jump Game",
        "difficulty": 1,
        "answer": "        if not nums:\n            return False\n        n = len(nums)\n        if n == 1:\n            return True\n        if n == 2:\n            return nums[0] == nums[1]\n        dp = [False] * (n + 1)\n        dp[0] = True\n        for i in range(1, n + 1):\n            for j in range(i):\n                if i - j >= 0 and dp[i - j]:\n                    dp[i] = True\n                    break\n        return dp[-1]\n"
    },
    {
        "number": 56,
        "title": "Merge Intervals",
        "difficulty": 1,
        "answer": "        result = []\n        for i in range(len(intervals)):\n            if i == 0:\n                result.append(intervals[i])\n                continue\n            if intervals[i][0] > intervals[i-1][1]:\n                result.append(intervals[i])\n                continue\n            if intervals[i][1] < intervals[i-1][1]:\n                continue\n            result[-1][1] = max(result[-1][1], intervals[i][1])\n        return result\n"
    },
    {
        "number": 57,
        "title": "Insert Interval",
        "difficulty": 1,
        "answer": "        # Sort the intervals\n        intervals = sorted(intervals, key=lambda x: x[0])\n        # Find the index of the insertion point\n        insert_index = bisect.bisect_left(intervals, newInterval[0])\n        # Insert the new interval\n        intervals.insert(insert_index, newInterval)\n        # Sort the intervals\n        intervals = sorted(intervals, key=lambda x: x[0])\n        return intervals\n"
    },
    {
        "number": 58,
        "title": "Length of Last Word",
        "difficulty": 0,
        "answer": "        words = s.split()\n        return len(words[-1])\n"
    },
    {
        "number": 59,
        "title": "Spiral Matrix II",
        "difficulty": 1,
        "answer": "        matrix = [[1 for _ in range(n)] for _ in range(n)]\n        row = 0\n        col = 0\n        while row < n:\n            col = 0\n            while col < n:\n                matrix[row][col] = col + row\n                col += 1\n            row += 1\n        return matrix"
    },
    {
        "number": 60,
        "title": "Permutation Sequence",
        "difficulty": 2,
        "answer": "        if n == 1:\n            return str(k)\n        if n == 2:\n            return str(k) + str(k)\n        if n == 3:\n            return str(k) + str(k) + str(k)\n        if n == 4:\n            return str(k) + str(k) + str(k) + str(k) + str(k) + str(k)\n        if n == 5:\n            return str(k) + str(k) + str(k) + str(k) + str(k) + str(k) + str(k) + str(k)\n        if n == 6:\n            return str(k) + str(k) + str(k) + str(k) + str(k) + str(k) + str(k) + str(k) + str(k)\n        if n == 7:\n            return str(k) + str(k) + str(k) + str(k) + str(k) + str(k) + str(k) + str(k) + str("
    },
    {
        "number": 61,
        "title": "Rotate List",
        "difficulty": 1,
        "answer": "        if not head or not head.next:\n            return head\n        dummy = ListNode(0)\n        dummy.next = head\n        p = dummy\n        while p.next:\n            p = p.next\n            if k % 2 == 0:\n                p.next = p.next.next\n                k /= 2\n            else:\n                p.next = p.next.next.next\n                k = k / 2\n        return dummy.next\n"
    },
    {
        "number": 62,
        "title": "Unique Paths",
        "difficulty": 1,
        "answer": "        if m == 0 or n == 0:\n            return 0\n        if m == 1 or n == 1:\n            return 1\n        if m == 2 or n == 2:\n            return 2\n        if m == 3 or n == 3:\n            return 3\n        if m == 4 or n == 4:\n            return 4\n        if m == 5 or n == 5:\n            return 5\n        if m == 6 or n == 6:\n            return 6\n        if m == 7 or n == 7:\n            return 7\n        if m == 8 or n == 8:\n            return 8\n        if m == 9 or n == 9:\n            return 9\n        if m == 10 or n == 10:\n            return 10\n        if m == 11 or n == 11:\n            return 11\n        if m == 12 or n == 12:\n            return 12\n        if m == 13 or n == 13:\n            return 13\n        if m == 14 or n == 14:\n            return 14\n        if m == 15 or n == 15:\n            return 15\n        if m == 16 or n == 16:"
    },
    {
        "number": 63,
        "title": "Unique Paths II",
        "difficulty": 1,
        "answer": "        m, n = len(obstacleGrid), len(obstacleGrid[0])\n        if m == 0 or n == 0:\n            return 0\n        if m == 1 or n == 1:\n            return obstacleGrid[0][0]\n        if m == 2 or n == 2:\n            return obstacleGrid[0][0] + obstacleGrid[1][1]\n        if m == 3 or n == 3:\n            return obstacleGrid[0][0] + obstacleGrid[1][1] + obstacleGrid[2][2]\n        if m == 4 or n == 4:\n            return obstacleGrid[0][0] + obstacleGrid[1][1] + obstacleGrid[2][2] + obstacleGrid[3][3]\n        if m == 5 or n == 5:\n            return obstacleGrid[0][0] + obstacleGrid[1][1] + obstacleGrid[2][2] + obstacleGrid[3][3] + obstacleGrid[4][4]\n        if m == 6 or n == 6:\n            return obstacleGrid[0][0] + obstacleGrid[1][1]"
    },
    {
        "number": 64,
        "title": "Minimum Path Sum",
        "difficulty": 1,
        "answer": "        m, n = len(grid), len(grid[0])\n        if m == 0 or n == 0:\n            return 0\n        dp = [[0] * n for _ in range(m)]\n        for i in range(m):\n            for j in range(n):\n                if i == 0 and j == 0:\n                    dp[i][j] = grid[i][j]\n                elif i == 0:\n                    dp[i][j] = grid[i][j] + dp[i][j - 1]\n                elif j == 0:\n                    dp[i][j] = grid[i][j] + dp[i - 1][j]\n                else:\n                    dp[i][j] = grid[i][j] + min(dp[i - 1][j], dp[i][j - 1])\n        return dp[m - 1][n - 1]\n"
    },
    {
        "number": 65,
        "title": "Valid Number",
        "difficulty": 2,
        "answer": "        # return True if s is a valid number\n        # return False if s is not a valid number\n        # return True if s is a valid number\n        # return False if s is not a valid number\n        # return True if s is a valid number\n        # return False if s is not a valid number\n        # return True if s is a valid number\n        # return False if s is not a valid number\n        # return True if s is a valid number\n        # return False if s is not a valid number\n        # return True if s is a valid number\n        # return False if s is not a valid number\n        # return True if s is a valid number\n        # return False if s is not a valid number\n        # return True if s is a valid number\n        # return False if s is not a valid number\n        # return True if s is a valid number\n        # return False if s is not a valid number\n        # return True if s is a valid number\n        # return False if s is not a valid number\n        # return True if s is a valid number\n        # return False if s is not a"
    },
    {
        "number": 66,
        "title": "Plus One",
        "difficulty": 0,
        "answer": "        carry = 0\n        res = []\n        for i in range(len(digits)):\n            res.append(digits[i] + carry)\n            carry = res[i] // 10\n            res[i] %= 10\n        if carry:\n            res.append(carry)\n        return res\n"
    },
    {
        "number": 67,
        "title": "Add Binary",
        "difficulty": 0,
        "answer": "        carry = 0\n        result = \"\"\n        for i in range(max(len(a), len(b))):\n            if i < len(a):\n                carry += int(a[i])\n            if i < len(b):\n                carry += int(b[i])\n            result += str(carry % 2)\n            carry /= 2\n        return result\n"
    },
    {
        "number": 68,
        "title": "Text Justification",
        "difficulty": 2,
        "answer": "        res = []\n        for i in range(len(words)):\n            if i == len(words)-1:\n                res.append(words[i])\n            else:\n                res.append(words[i] + \" \".ljust(maxWidth - len(words[i])))\n        return res"
    },
    {
        "number": 69,
        "title": "Sqrt(x)",
        "difficulty": 0,
        "answer": "        if x < 0:\n            return -1\n        if x == 0:\n            return 0\n        if x == 1:\n            return 1\n        if x % 2 == 0:\n            return self.mySqrt(x / 2)\n        else:\n            return self.mySqrt(x - 1) + 1"
    },
    {
        "number": 70,
        "title": "Climbing Stairs",
        "difficulty": 0,
        "answer": "        if n == 1:\n            return 1\n        elif n == 2:\n            return 2\n        elif n == 3:\n            return 3\n        else:\n            return self.climbStairs(n - 1) + self.climbStairs(n - 2) + self.climbStairs(n - 3)\n"
    },
    {
        "number": 71,
        "title": "Simplify Path",
        "difficulty": 1,
        "answer": "        if not path:\n            return \"\"\n        if path[0] == '/':\n            return path\n        if path[-1] == '/':\n            return path[:-1]\n        if path[-2:] == '//':\n            return path[:-2]\n        return path\n"
    },
    {
        "number": 72,
        "title": "Edit Distance",
        "difficulty": 2,
        "answer": "        m = len(word1)\n        n = len(word2)\n        dp = [[0] * (n+1) for _ in range(m+1)]\n        for i in range(m+1):\n            dp[i][0] = i\n        for j in range(n+1):\n            dp[0][j] = j\n        for i in range(1, m+1):\n            for j in range(1, n+1):\n                if word1[i-1] == word2[j-1]:\n                    dp[i][j] = dp[i-1][j-1]\n                else:\n                    dp[i][j] = min(dp[i-1][j], dp[i][j-1], dp[i-1][j-1]) + 1\n        return dp[m][n]\n"
    },
    {
        "number": 73,
        "title": "Set Matrix Zeroes",
        "difficulty": 1,
        "answer": "        m, n = len(matrix), len(matrix[0])\n        for i in range(m):\n            for j in range(n):\n                if matrix[i][j] == 0:\n                    matrix[i][0] = 0\n                    matrix[0][j] = 0\n                    matrix[i][n-1] = 0\n                    matrix[n-1][j] = 0\n        for i in range(m):\n            for j in range(n):\n                if matrix[i][j] == 0:\n                    for k in range(i):\n                        matrix[k][j] = 0\n                    for k in range(j+1, n):\n                        matrix[i][k] = 0\n        for i in range(m):\n            for j in range(n):\n                if matrix[i][j] == 0:\n                    for k in range(i):\n                        matrix[k][j] = 0\n                    for k in range(j+1, n):\n                        matrix[i][k] = 0\n"
    },
    {
        "number": 74,
        "title": "Search a 2D Matrix",
        "difficulty": 1,
        "answer": "        m, n = len(matrix), len(matrix[0])\n        if m == 0 or n == 0:\n            return False\n        if target < matrix[0][0] or target > matrix[-1][-1]:\n            return False\n        if target == matrix[0][0]:\n            return True\n        if target == matrix[-1][-1]:\n            return True\n        for i in range(m):\n            if target < matrix[i][0]:\n                return False\n            if target > matrix[i][-1]:\n                return False\n        return True\n"
    },
    {
        "number": 75,
        "title": "Sort Colors",
        "difficulty": 1,
        "answer": "        nums.sort()\n        for i in range(len(nums) - 1):\n            if nums[i] == nums[i + 1]:\n                nums[i + 1] = nums[i]\n        return nums\n"
    },
    {
        "number": 76,
        "title": "Minimum Window Substring",
        "difficulty": 2,
        "answer": "        # DP\n        # dp[i][j] = min(dp[i-1][j], dp[i-1][j-1], dp[i][j-1])\n        # dp[i][j] = min(dp[i-1][j], dp[i][j-1])\n        # dp[i][j] = min(dp[i-1][j], dp[i][j-1])\n        # dp[i][j] = min(dp[i-1][j], dp[i][j-1])\n        # dp[i][j] = min(dp[i-1][j], dp[i][j-1])\n        # dp[i][j] = min(dp[i-1][j], dp[i][j-1])\n        # dp[i][j] = min(dp[i-1][j], dp[i][j-1])\n        # dp[i][j] = min(dp[i-1][j], dp[i]["
    },
    {
        "number": 77,
        "title": "Combinations",
        "difficulty": 1,
        "answer": "        if k == 0:\n            return []\n        if k == 1:\n            return [[1]]\n        if k == 2:\n            return [[1, 2]]\n        if k == 3:\n            return [[1, 2, 3]]\n        if k == 4:\n            return [[1, 2, 3, 4]]\n        if k == 5:\n            return [[1, 2, 3, 4, 5]]\n        if k == 6:\n            return [[1, 2, 3, 4, 5, 6]]\n        if k == 7:\n            return [[1, 2, 3, 4, 5, 6, 7]]\n        if k == 8:\n            return [[1, 2, 3, 4, 5, 6, 7, 8]]\n        if k == 9:\n            return [[1, 2, 3, 4, 5, 6, 7, 8, 9]]\n        if k > n:\n            return []\n        if k == n:\n            return [[1] * k]\n        if k == n + 1:\n            return [[1, 2] * (n - 1)]\n"
    },
    {
        "number": 78,
        "title": "Subsets",
        "difficulty": 1,
        "answer": "        nums.sort()\n        if len(nums) == 0:\n            return [[]]\n        res = []\n        for i in range(len(nums)):\n            res.append([])\n            for j in range(len(res)):\n                res[j].append(nums[i])\n        return res\n"
    },
    {
        "number": 79,
        "title": "Word Search",
        "difficulty": 1,
        "answer": "        if not board or not word:\n            return False\n        m, n = len(board), len(board[0])\n        if m!= n:\n            return False\n        for i in range(m):\n            for j in range(n):\n                if board[i][j] == word[0]:\n                    if self.exist(board[i][j+1:n], word[1:]) or self.exist(board[i+1:m][j], word[1:]) or self.exist(board[i+1:m][j+1:n], word[1:]) or self.exist(board[i][j+1:n], word[1:]):\n                        return True\n        return False\n"
    },
    {
        "number": 80,
        "title": "Remove Duplicates from Sorted Array II",
        "difficulty": 1,
        "answer": "        n = len(nums)\n        if n == 0:\n            return 0\n        if n == 1:\n            return 1\n        if n == 2:\n            return 2\n        if n == 3:\n            return 3\n        if n == 4:\n            return 4\n        if n == 5:\n            return 5\n        if n == 6:\n            return 6\n        if n == 7:\n            return 7\n        if n == 8:\n            return 8\n        if n == 9:\n            return 9\n        if n == 10:\n            return 10\n        if n == 11:\n            return 11\n        if n == 12:\n            return 12\n        if n == 13:\n            return 13\n        if n == 14:\n            return 14\n        if n == 15:\n            return 15\n        if n == 16:\n            return 16\n        if n == 17:\n            return 17\n        if n == 18:\n            return 18\n        if n == 19:\n            return 19\n        if n == 20:\n            return 20\n        if n == 21:\n            return 21"
    },
    {
        "number": 81,
        "title": "Search in Rotated Sorted Array II",
        "difficulty": 1,
        "answer": "        if len(nums) == 0:\n            return False\n        if target < nums[0]:\n            return False\n        if target > nums[-1]:\n            return False\n        if target == nums[0]:\n            return True\n        if target == nums[-1]:\n            return True\n        if target < nums[0]:\n            return False\n        if target > nums[-1]:\n            return False\n        return self.search(nums[1:], target)"
    },
    {
        "number": 82,
        "title": "Remove Duplicates from Sorted List II",
        "difficulty": 1,
        "answer": "        if not head:\n            return None\n        dic = {}\n        curr = head\n        while curr:\n            if curr.val in dic:\n                curr = curr.next\n                continue\n            dic[curr.val] = curr\n            curr = curr.next\n        curr = head\n        while curr:\n            if curr.val in dic:\n                curr = curr.next\n                continue\n            curr = curr.next\n        return head\n"
    },
    {
        "number": 83,
        "title": "Remove Duplicates from Sorted List",
        "difficulty": 0,
        "answer": "        if not head:\n            return None\n        dummy = ListNode(0)\n        dummy.next = head\n        curr = dummy\n        while curr.next:\n            if curr.next.val == curr.next.next.val:\n                curr.next = curr.next.next\n            else:\n                curr = curr.next\n        return dummy.next\n"
    },
    {
        "number": 84,
        "title": "Largest Rectangle in Histogram",
        "difficulty": 2,
        "answer": "        if not heights:\n            return 0\n        max_area = 0\n        for i in range(len(heights)):\n            max_area = max(max_area, heights[i] * (i + 1))\n        return max_area\n"
    },
    {
        "number": 85,
        "title": "Maximal Rectangle",
        "difficulty": 2,
        "answer": "        m, n = len(matrix), len(matrix[0])\n        if m == 0 or n == 0:\n            return 0\n        dp = [[0] * n for _ in range(m)]\n        for i in range(m):\n            for j in range(n):\n                if matrix[i][j] == \"1\":\n                    dp[i][j] = 1\n                    for k in range(i):\n                        dp[k][j] = max(dp[k][j], dp[k][j-1]+1)\n        return max(dp[-1])\n"
    },
    {
        "number": 86,
        "title": "Partition List",
        "difficulty": 1,
        "answer": "        if not head or not head.next:\n            return head\n        pivot = head.next\n        head.next = None\n        pivot.next = head\n        pivot = head\n        while pivot.next and pivot.next.next:\n            if pivot.next.next.val < x:\n                pivot = pivot.next\n            else:\n                pivot.next = pivot.next.next\n        pivot.next = pivot.next.next\n        return pivot\n"
    },
    {
        "number": 87,
        "title": "Scramble String",
        "difficulty": 2,
        "answer": "        if len(s1)!= len(s2):\n            return False\n        if len(s1) == 1:\n            return True\n        for i in range(len(s1)):\n            if s1[i]!= s2[i]:\n                return False\n            if s1[i] == s2[i]:\n                return self.isScramble(s1[:i], s2[:i]) and self.isScramble(s1[i+1:], s2[i+1:])\n        return True"
    },
    {
        "number": 88,
        "title": "Merge Sorted Array",
        "difficulty": 0,
        "answer": "        i = 0\n        j = 0\n        k = 0\n        while i < m + n:\n            if j < m and nums1[i] <= nums2[j]:\n                nums1[k] = nums1[i]\n                i += 1\n                k += 1\n            else:\n                nums1[k] = nums2[j]\n                j += 1\n                k += 1\n        while j < n:\n            nums1[k] = nums2[j]\n            j += 1\n            k += 1\n"
    },
    {
        "number": 89,
        "title": "Gray Code",
        "difficulty": 1,
        "answer": "        result = [0]\n        for i in range(2, n + 1):\n            result.append(result[i - 1] ^ (i - 1))\n        return result\n"
    },
    {
        "number": 90,
        "title": "Subsets II",
        "difficulty": 1,
        "answer": "        nums.sort()\n        result = []\n        for i in range(len(nums)):\n            if i == 0:\n                result.append([])\n            else:\n                result[i] = result[i-1]\n            for j in range(i+1, len(nums)):\n                result[i].append(nums[j])\n        return result\n"
    },
    {
        "number": 91,
        "title": "Decode Ways",
        "difficulty": 1,
        "answer": "        n = len(s)\n        if n == 0:\n            return 0\n        if n == 1:\n            return 1\n        if s[0] == '0':\n            return 0\n        if s[0] == '1':\n            return 1\n        if s[0] == '2':\n            return 2\n        if s[0] == '3':\n            return 3\n        if s[0] == '4':\n            return 4\n        if s[0] == '5':\n            return 5\n        if s[0] == '6':\n            return 6\n        if s[0] == '7':\n            return 7\n        if s[0] == '8':\n            return 8\n        if s[0] == '9':\n            return 9\n        if s[0] == 'A':\n            return self.numDecodings(s[1:]) + 1\n        if s[0] == 'B':\n            return self.numDecodings(s[1:]) + 2\n        if s[0] == 'C':\n            return self"
    },
    {
        "number": 92,
        "title": "Reverse Linked List II",
        "difficulty": 1,
        "answer": "        if not head or left > right:\n            return None\n        dummy = ListNode(0)\n        dummy.next = head\n        pre = dummy\n        cur = head\n        for i in range(left, right):\n            cur = cur.next\n        cur = dummy\n        for i in range(right, left):\n            cur.next = cur.next.next\n            cur = cur.next\n        cur.next = pre.next\n        pre.next = dummy.next\n        return dummy.next\n"
    },
    {
        "number": 93,
        "title": "Restore IP Addresses",
        "difficulty": 1,
        "answer": "        res = []\n        for i in range(len(s)):\n            res.append(s[:i] + \".\" + s[i:])\n        return res\n"
    },
    {
        "number": 94,
        "title": "Binary Tree Inorder Traversal",
        "difficulty": 0,
        "answer": "        if not root:\n            return []\n        res = []\n        stack = []\n        while root or stack:\n            if root:\n                stack.append(root)\n                root = root.left\n            else:\n                root = stack.pop()\n                res.append(root.val)\n                root = root.right\n        return res\n"
    },
    {
        "number": 95,
        "title": "Unique Binary Search Trees II",
        "difficulty": 1,
        "answer": "        if n == 1:\n            return [Optional[TreeNode]]\n        if n == 2:\n            return [[Optional[TreeNode]]]\n        if n == 3:\n            return [[Optional[TreeNode]], [Optional[TreeNode]], [Optional[TreeNode]]]\n        if n == 4:\n            return [[Optional[TreeNode]], [Optional[TreeNode]], [Optional[TreeNode]], [Optional[TreeNode]]]\n        if n == 5:\n            return [[Optional[TreeNode]], [Optional[TreeNode]], [Optional[TreeNode]], [Optional[TreeNode]], [Optional[TreeNode]]]\n        if n == 6:\n            return [[Optional[TreeNode]], [Optional[TreeNode]], [Optional[TreeNode]], [Optional[TreeNode]], [Optional[TreeNode]], [Optional[TreeNode]]]\n        if n == 7:\n            return [[Optional[TreeNode]], [Optional[TreeNode]], [Optional[TreeNode]], [Optional[TreeNode]], [Optional[TreeNode]], [Optional[TreeNode]],"
    },
    {
        "number": 96,
        "title": "Unique Binary Search Trees",
        "difficulty": 1,
        "answer": "        return self.dfs(1, n)"
    },
    {
        "number": 97,
        "title": "Interleaving String",
        "difficulty": 1,
        "answer": "        return len(s1) + len(s2) == len(s3) and s1.endswith(s2) and s2.endswith(s1)"
    },
    {
        "number": 98,
        "title": "Validate Binary Search Tree",
        "difficulty": 1,
        "answer": "        if not root:\n            return True\n        return self.isValidBST(root.left) and self.isValidBST(root.right) and self.isValidBST(root.right, root.left)\n"
    },
    {
        "number": 99,
        "title": "Recover Binary Search Tree",
        "difficulty": 1,
        "answer": "        if not root:\n            return"
    },
    {
        "number": 100,
        "title": "Same Tree",
        "difficulty": 0,
        "answer": "        if not p and not q:\n            return True\n        elif not p or not q:\n            return False\n        elif p.val!= q.val:\n            return False\n        else:\n            return self.isSameTree(p.left, q.left) and self.isSameTree(p.right, q.right)\n"
    },
    {
        "number": 101,
        "title": "Symmetric Tree",
        "difficulty": 0,
        "answer": "        if not root:\n            return True\n        return self.isSymmetric(root.left, root.right)\n"
    },
    {
        "number": 102,
        "title": "Binary Tree Level Order Traversal",
        "difficulty": 1,
        "answer": "        if not root:\n            return []\n        res = []\n        queue = [root]\n        while queue:\n            curr = queue.pop(0)\n            if curr:\n                res.append([curr.val])\n                queue.append(curr.left)\n                queue.append(curr.right)\n        return res"
    },
    {
        "number": 103,
        "title": "Binary Tree Zigzag Level Order Traversal",
        "difficulty": 1,
        "answer": "        if not root:\n            return []\n        res = []\n        queue = [root]\n        while queue:\n            curr = queue.pop(0)\n            if curr:\n                res.append(curr.val)\n                queue.append(curr.left)\n                queue.append(curr.right)\n        return res\n"
    },
    {
        "number": 104,
        "title": "Maximum Depth of Binary Tree",
        "difficulty": 0,
        "answer": "        if not root:\n            return 0\n        return 1 + max(self.maxDepth(root.left), self.maxDepth(root.right))\n"
    },
    {
        "number": 105,
        "title": "Construct Binary Tree from Preorder and Inorder Traversal",
        "difficulty": 1,
        "answer": "        if not preorder or not inorder:\n            return None\n        root = TreeNode(preorder[0])\n        pre_idx = 0\n        in_idx = 0\n        while pre_idx < len(preorder) and in_idx < len(inorder):\n            if preorder[pre_idx] == inorder[in_idx]:\n                root.left = TreeNode(preorder[pre_idx])\n                pre_idx += 1\n                in_idx += 1\n            elif preorder[pre_idx] < inorder[in_idx]:\n                root.left = TreeNode(preorder[pre_idx])\n                pre_idx += 1\n            else:\n                root.right = TreeNode(inorder[in_idx])\n                in_idx += 1\n        return root\n"
    },
    {
        "number": 106,
        "title": "Construct Binary Tree from Inorder and Postorder Traversal",
        "difficulty": 1,
        "answer": "        if not inorder or not postorder:\n            return None\n        root = TreeNode(postorder[0])\n        inorder_idx = 0\n        postorder_idx = 0\n        while inorder_idx < len(inorder) and postorder_idx < len(postorder):\n            if inorder[inorder_idx] == postorder[postorder_idx]:\n                root.left = TreeNode(postorder[postorder_idx])\n                root.right = TreeNode(postorder[postorder_idx + 1])\n                inorder_idx += 2\n                postorder_idx += 2\n            elif inorder[inorder_idx] < postorder[postorder_idx]:\n                root.left = TreeNode(postorder[postorder_idx])\n                inorder_idx += 1\n            else:\n                root.right = TreeNode(postorder[postorder_idx])\n                postorder_idx += 1\n        return root\n"
    },
    {
        "number": 107,
        "title": "Binary Tree Level Order Traversal II",
        "difficulty": 1,
        "answer": "        if not root:\n            return []\n        res = []\n        queue = [root]\n        while queue:\n            curr = queue.pop(0)\n            if curr:\n                res.append([curr.val])\n                queue.append(curr.left)\n                queue.append(curr.right)\n        return res[::-1]\n"
    },
    {
        "number": 108,
        "title": "Convert Sorted Array to Binary Search Tree",
        "difficulty": 0,
        "answer": "        if not nums:\n            return None\n        if len(nums) == 1:\n            return TreeNode(nums[0])\n        root = TreeNode(nums[0])\n        root.left = self.sortedArrayToBST(nums[1:])\n        root.right = self.sortedArrayToBST(nums[:len(nums)-1])\n        return root"
    },
    {
        "number": 109,
        "title": "Convert Sorted List to Binary Search Tree",
        "difficulty": 1,
        "answer": "        if head is None:\n            return None\n        if head.next is None:\n            return TreeNode(head.val)\n        else:\n            left = self.sortedListToBST(head.next)\n            right = self.sortedListToBST(head.next.next)\n            return TreeNode(head.val, left, right)"
    },
    {
        "number": 110,
        "title": "Balanced Binary Tree",
        "difficulty": 0,
        "answer": "        if not root:\n            return True\n        return self.isBalanced(root.left) and self.isBalanced(root.right) and self.isBalanced(root.left) == self.isBalanced(root.right)\n"
    },
    {
        "number": 111,
        "title": "Minimum Depth of Binary Tree",
        "difficulty": 0,
        "answer": "        if not root:\n            return 0\n        return 1 + min(self.minDepth(root.left), self.minDepth(root.right))\n"
    },
    {
        "number": 112,
        "title": "Path Sum",
        "difficulty": 0,
        "answer": "        if not root:\n            return False\n        if root.left is None and root.right is None:\n            return targetSum == root.val\n        if root.left is None:\n            return self.hasPathSum(root.right, targetSum - root.val)\n        if root.right is None:\n            return self.hasPathSum(root.left, targetSum - root.val)\n        return self.hasPathSum(root.left, targetSum - root.val) and self.hasPathSum(root.right, targetSum - root.val)\n"
    },
    {
        "number": 113,
        "title": "Path Sum II",
        "difficulty": 1,
        "answer": "        if not root:\n            return []\n        if root.left is None and root.right is None:\n            if root.val == targetSum:\n                return [[root.val]]\n            else:\n                return []\n        if root.left is None:\n            return self.pathSum(root.right, targetSum - root.val)\n        if root.right is None:\n            return self.pathSum(root.left, targetSum - root.val)\n        return self.pathSum(root.left, targetSum - root.val) + self.pathSum(root.right, targetSum - root.val)"
    },
    {
        "number": 114,
        "title": "Flatten Binary Tree to Linked List",
        "difficulty": 1,
        "answer": "        if not root:\n            return"
    },
    {
        "number": 115,
        "title": "Distinct Subsequences",
        "difficulty": 2,
        "answer": "        if len(s) == 0 or len(t) == 0:\n            return 0\n        if len(s) == 1 and len(t) == 1:\n            return 1\n        if len(s) == 1:\n            return self.numDistinct(t, s[0])\n        if len(t) == 1:\n            return self.numDistinct(s, t[0])\n        if s[0] == t[0]:\n            return self.numDistinct(s[1:], t[1:])\n        return self.numDistinct(s[1:], t) + self.numDistinct(s, t[1:])\n"
    },
    {
        "number": 116,
        "title": "Populating Next Right Pointers in Each Node",
        "difficulty": 1,
        "answer": "        self.val = val\n        self.left = left\n        self.right = right\n        self.next = next"
    },
    {
        "number": 117,
        "title": "Populating Next Right Pointers in Each Node II",
        "difficulty": 1,
        "answer": "        pass"
    },
    {
        "number": 118,
        "title": "Pascal\"s Triangle",
        "difficulty": 0,
        "answer": "        ret = []\n        for i in range(numRows):\n            ret.append([1])\n            for j in range(i+1):\n                ret[i][j] = ret[i][j-1] + ret[i-1][j]\n        return ret\n"
    },
    {
        "number": 119,
        "title": "Pascal\"s Triangle II",
        "difficulty": 0,
        "answer": "        if rowIndex < 0:\n            return []\n        if rowIndex == 0:\n            return [1]\n        if rowIndex == 1:\n            return [1, 1]\n        row = [1]\n        for i in range(2, rowIndex + 1):\n            row.append(row[i - 1] + row[i - 2])\n        return row\n"
    },
    {
        "number": 120,
        "title": "Triangle",
        "difficulty": 1,
        "answer": "        if not triangle:\n            return 0\n        m = len(triangle)\n        n = len(triangle[0])\n        dp = [[0] * n for _ in range(m)]\n        for i in range(m):\n            for j in range(n):\n                dp[i][j] = triangle[i][j]\n        for i in range(m - 1, -1, -1):\n            for j in range(n):\n                dp[i][j] = min(dp[i + 1][j], dp[i][j + 1]) + triangle[i][j]\n        return dp[0][0]\n"
    },
    {
        "number": 121,
        "title": "Best Time to Buy and Sell Stock",
        "difficulty": 0,
        "answer": "        if not prices:\n            return 0\n        n = len(prices)\n        dp = [0] * (n+1)\n        dp[0] = 0\n        for i in range(1, n+1):\n            dp[i] = max(dp[i-1], prices[i-1] + dp[i-2])\n        return dp[n]\n"
    },
    {
        "number": 122,
        "title": "Best Time to Buy and Sell Stock II",
        "difficulty": 1,
        "answer": "        if len(prices) == 0:\n            return 0\n        if len(prices) == 1:\n            return prices[0]\n        if len(prices) == 2:\n            return max(prices[0], prices[1])\n        if len(prices) == 3:\n            return max(prices[0], max(prices[1], prices[2]))\n        if len(prices) == 4:\n            return max(prices[0], max(prices[1], max(prices[2], prices[3])))\n        if len(prices) == 5:\n            return max(prices[0], max(prices[1], max(prices[2], max(prices[3], prices[4]))))\n        if len(prices) == 6:\n            return max(prices[0], max(prices[1], max(prices[2], max(prices[3], max(prices[4], prices[5]))))\n        if len(prices) == 7:\n            return max(prices["
    },
    {
        "number": 123,
        "title": "Best Time to Buy and Sell Stock III",
        "difficulty": 2,
        "answer": "        if not prices:\n            return 0"
    },
    {
        "number": 124,
        "title": "Binary Tree Maximum Path Sum",
        "difficulty": 2,
        "answer": "        if not root:\n            return 0\n        if not root.left and not root.right:\n            return root.val\n        if not root.left:\n            return self.maxPathSum(root.right) + root.val\n        if not root.right:\n            return self.maxPathSum(root.left) + root.val\n        return max(self.maxPathSum(root.left), self.maxPathSum(root.right)) + root.val"
    },
    {
        "number": 125,
        "title": "Valid Palindrome",
        "difficulty": 0,
        "answer": "        if not s:\n            return True\n        s = s.lower()\n        s = ''.join(c for c in s if c.isalpha())\n        s = ''.join(c for c in s if c.isupper() or c.isdigit())\n        s = s.strip()\n        return s == s[::-1]\n"
    },
    {
        "number": 126,
        "title": "Word Ladder II",
        "difficulty": 2,
        "answer": "        # write your code here\n        if not beginWord or not endWord or not wordList:\n            return []\n        if beginWord == endWord:\n            return [[beginWord]]\n        if beginWord not in wordList:\n            return []\n        if endWord not in wordList:\n            return []\n        wordList.remove(beginWord)\n        wordList.remove(endWord)\n        wordList.append(endWord)\n        wordList.remove(endWord)\n        wordList.append(beginWord)\n        wordList.remove(beginWord)\n        wordList.append(beginWord)\n        wordList.remove(beginWord)\n        wordList.append(endWord)\n        wordList.remove(endWord)\n        wordList.append(endWord)\n        wordList.remove(endWord)\n        wordList.append(beginWord)\n        wordList.remove(beginWord)\n        wordList.append(beginWord)\n        wordList.remove(beginWord)\n        wordList.append(endWord)\n        wordList.remove(endWord)\n"
    },
    {
        "number": 127,
        "title": "Word Ladder",
        "difficulty": 2,
        "answer": "        # write your code here\n        if not beginWord or not endWord or not wordList:\n            return 0\n        if beginWord == endWord:\n            return 1\n        if beginWord not in wordList:\n            return 0\n        if endWord not in wordList:\n            return 0\n        if len(wordList) == 1:\n            return 1\n        if len(wordList) == 2:\n            return 1\n        if len(wordList) == 3:\n            return 1\n        if len(wordList) == 4:\n            return 1\n        if len(wordList) == 5:\n            return 1\n        if len(wordList) == 6:\n            return 1\n        if len(wordList) == 7:\n            return 1\n        if len(wordList) == 8:\n            return 1\n        if len(wordList) == 9:\n            return 1\n        if len(wordList) == 10:\n            return 1\n        if len(wordList) == 11:\n            return 1\n        if len(wordList) == 12:\n            return 1\n        if len"
    },
    {
        "number": 128,
        "title": "Longest Consecutive Sequence",
        "difficulty": 1,
        "answer": "        n = len(nums)\n        if n == 0:\n            return 0\n        dp = [0] * n\n        for i in range(n):\n            dp[i] = 1\n            for j in range(i + 1, n):\n                if nums[i] + dp[j] > nums[j]:\n                    dp[j] = nums[i] + dp[j]\n        return max(dp)\n"
    },
    {
        "number": 129,
        "title": "Sum Root to Leaf Numbers",
        "difficulty": 1,
        "answer": "        if not root:\n            return 0\n        return self.sumNumbersHelper(root, 0)"
    },
    {
        "number": 130,
        "title": "Surrounded Regions",
        "difficulty": 1,
        "answer": "        m, n = len(board), len(board[0])\n        for i in range(m):\n            for j in range(n):\n                if board[i][j] == \"O\":\n                    self.flip(board, i, j)"
    },
    {
        "number": 131,
        "title": "Palindrome Partitioning",
        "difficulty": 1,
        "answer": "        res = []\n        for i in range(len(s)):\n            res.append([])\n            for j in range(i, len(s)):\n                if s[i:j] == s[j:i]:\n                    res[i].append(s[i:j])\n        return res\n"
    },
    {
        "number": 132,
        "title": "Palindrome Partitioning II",
        "difficulty": 2,
        "answer": "        n = len(s)\n        dp = [[0] * (n + 1) for _ in range(n + 1)]\n        for i in range(1, n + 1):\n            for j in range(i):\n                if s[j] == s[i - j - 1]:\n                    dp[i][j] = dp[i - 1][j - 1] + 1\n                else:\n                    dp[i][j] = max(dp[i - 1][j], dp[i - 1][j - 1])\n        return dp[n][n - 1]\n"
    },
    {
        "number": 133,
        "title": "Clone Graph",
        "difficulty": 1,
        "answer": "        pass"
    },
    {
        "number": 134,
        "title": "Gas Station",
        "difficulty": 1,
        "answer": "        n = len(gas)\n        if n == 0:\n            return 0\n        if n == 1:\n            return 0\n        if n == 2:\n            return 0\n        if n == 3:\n            return 0\n        if n == 4:\n            return 0\n        if n == 5:\n            return 0\n        if n == 6:\n            return 0\n        if n == 7:\n            return 0\n        if n == 8:\n            return 0\n        if n == 9:\n            return 0\n        if n == 10:\n            return 0\n        if n == 11:\n            return 0\n        if n == 12:\n            return 0\n        if n == 13:\n            return 0\n        if n == 14:\n            return 0\n        if n == 15:\n            return 0\n        if n == 16:\n            return 0\n        if n == 17:\n            return 0\n        if n == 18:\n            return 0\n        if n == 19:\n            return 0\n        if n == 20:\n            return 0\n        if n == 21:\n            return 0\n"
    },
    {
        "number": 135,
        "title": "Candy",
        "difficulty": 2,
        "answer": "        n = len(ratings)\n        if n == 0:\n            return 0\n        dp = [0] * n\n        dp[0] = 1\n        for i in range(1, n):\n            dp[i] = max(dp[i - 1], ratings[i] + dp[i - 1])\n        return dp[-1]\n"
    },
    {
        "number": 136,
        "title": "Single Number",
        "difficulty": 0,
        "answer": "        return sum(nums) % 2"
    },
    {
        "number": 137,
        "title": "Single Number II",
        "difficulty": 1,
        "answer": "        return nums[0] ^ nums[1] ^ nums[2] ^ nums[3] ^ nums[4] ^ nums[5] ^ nums[6] ^ nums[7] ^ nums[8] ^ nums[9] ^ nums[10] ^ nums[11] ^ nums[12] ^ nums[13] ^ nums[14] ^ nums[15] ^ nums[16] ^ nums[17] ^ nums[18] ^ nums[19] ^ nums[20] ^ nums[21] ^ nums[22] ^ nums[23] ^ nums[24] ^ nums[25] ^ nums[26] ^ nums[27] ^ nums[28] ^ nums[29] ^ nums[30] ^ nums[31] ^ nums[32] ^ nums[33] ^ nums[34] ^ nums[35] ^ nums[36] ^ nums[37] ^ nums[38] ^ nums[39] ^ nums[40] ^ nums"
    },
    {
        "number": 138,
        "title": "Copy List with Random Pointer",
        "difficulty": 1,
        "answer": "        if not head:\n            return head\n        if not head.next:\n            return head\n        if not head.next.next:\n            return head\n        if not head.next.next.next:\n            return head\n        if not head.next.next.next.next:\n            return head\n        if not head.next.next.next.next.next:\n            return head\n        if not head.next.next.next.next.next.next:\n            return head\n        if not head.next.next.next.next.next.next.next:\n            return head\n        if not head.next.next.next.next.next.next.next.next:\n            return head\n        if not head.next.next.next.next.next.next.next.next.next:\n            return head\n        if not head.next.next.next.next.next.next.next.next.next.next:\n            return head\n        if not head.next.next.next.next.next.next.next.next.next.next.next:\n            return"
    },
    {
        "number": 139,
        "title": "Word Break",
        "difficulty": 1,
        "answer": "        # write your code here\n        if not s or not wordDict:\n            return False\n        wordDictLen = len(wordDict)\n        dp = [[False for j in range(wordDictLen + 1)] for i in range(len(s) + 1)]\n        dp[0][0] = True\n        for i in range(1, len(s) + 1):\n            for j in range(1, wordDictLen + 1):\n                if s[i - 1] == wordDict[j - 1]:\n                    dp[i][j] = dp[i - 1][j - 1]\n                else:\n                    dp[i][j] = dp[i][j - 1] or dp[i - 1][j]\n        return dp[len(s)][wordDictLen]\n"
    },
    {
        "number": 140,
        "title": "Word Break II",
        "difficulty": 2,
        "answer": "        if not s or not wordDict:\n            return []\n        dp = [[False] * len(wordDict) for _ in range(len(s))]\n        for i in range(len(s)):\n            for j in range(len(wordDict)):\n                if dp[i][j] and s[i] == wordDict[j]:\n                    dp[i][j] = True\n        ans = []\n        for i in range(len(s)):\n            if dp[i][0]:\n                ans.append(s[:i] + \" \" + s[i:])\n        return ans"
    },
    {
        "number": 141,
        "title": "Linked List Cycle",
        "difficulty": 0,
        "answer": "        if head is None:\n            return False\n        if head.next is None:\n            return False\n        if head.next.next is None:\n            return False\n        if head.next.next.next is None:\n            return False\n        if head.next.next.next.next is None:\n            return False\n        if head.next.next.next.next.next is None:\n            return False\n        if head.next.next.next.next.next.next is None:\n            return False\n        if head.next.next.next.next.next.next.next is None:\n            return False\n        if head.next.next.next.next.next.next.next.next is None:\n            return False\n        if head.next.next.next.next.next.next.next.next.next is None:\n            return False\n        if head.next.next.next.next.next.next.next.next.next.next is None:\n            return False\n        if head.next.next.next.next.next.next.next.next"
    },
    {
        "number": 142,
        "title": "Linked List Cycle II",
        "difficulty": 1,
        "answer": "        if head is None:\n            return None\n        if head.next is None:\n            return None\n        if head.next.next is None:\n            return None\n        if head.next.next.next is None:\n            return None\n        if head.next.next.next.next is None:\n            return None\n        if head.next.next.next.next.next is None:\n            return None\n        if head.next.next.next.next.next.next is None:\n            return None\n        if head.next.next.next.next.next.next.next is None:\n            return None\n        if head.next.next.next.next.next.next.next.next is None:\n            return None\n        if head.next.next.next.next.next.next.next.next.next is None:\n            return None\n        if head.next.next.next.next.next.next.next.next.next.next is None:\n            return None\n        if head.next.next.next.next.next.next.next.next"
    },
    {
        "number": 143,
        "title": "Reorder List",
        "difficulty": 1,
        "answer": "        if not head:\n            return"
    },
    {
        "number": 144,
        "title": "Binary Tree Preorder Traversal",
        "difficulty": 0,
        "answer": "        if not root:\n            return []\n        res = []\n        stack = [root]\n        while stack:\n            curr = stack.pop()\n            res.append(curr.val)\n            if curr.left:\n                stack.append(curr.left)\n            if curr.right:\n                stack.append(curr.right)\n        return res\n"
    },
    {
        "number": 145,
        "title": "Binary Tree Postorder Traversal",
        "difficulty": 0,
        "answer": "        if not root:\n            return []\n        res = []\n        stack = []\n        while root or stack:\n            if root:\n                stack.append(root)\n                root = root.left\n            else:\n                root = stack.pop()\n                res.append(root.val)\n                root = root.right\n        return res\n"
    },
    {
        "number": 146,
        "title": "LRU Cache",
        "difficulty": 1,
        "answer": "    def get(self, key: int) -> int:\n        \"\"\"\n        Design a data structure that follows the constraints of a Least Recently Used (LRU) cache.\n        Implement the LRUCache class:\n            LRUCache(int capacity) Initialize the LRU cache with positive size capacity.\n            int get(int key) Return the value of the key if the key exists, otherwise return -1.\n            void put(int key, int value) Update the value of the key if the key exists. Otherwise, add the key-value pair to the cache. If the number of keys exceeds the capacity from this operation, evict the least recently used key.\n        The functions get and put must each run in O(1) average time complexity.\n        Example 1:\n        Input\n        [\"LRUCache\", \"put\", \"put\", \"get\", \"put\", \"get\", \"put\", \"get\", \"get\", \"get\"]\n        [[2], [1, 1], [2, 2], [1], [3, 3], [2], [4, 4], [1], [3], [4]]\n        Output\n"
    },
    {
        "number": 147,
        "title": "Insertion Sort List",
        "difficulty": 1,
        "answer": "        if head is None:\n            return None\n        if head.next is None:\n            return head\n        curr = head\n        while curr.next is not None:\n            curr = self.insertionSort(curr.next)\n        return curr"
    },
    {
        "number": 148,
        "title": "Sort List",
        "difficulty": 1,
        "answer": "        if not head:\n            return None\n        if not head.next:\n            return head\n        p = head\n        while p.next:\n            p = p.next\n            while p.next and p.next.val < p.val:\n                p = p.next\n            if p.next and p.next.val > p.val:\n                p.next, p = p.next, p.next.next\n        return p\n"
    },
    {
        "number": 149,
        "title": "Max Points on a Line",
        "difficulty": 2,
        "answer": "        if not points:\n            return 0\n        n = len(points)\n        dp = [[0] * n for _ in range(n)]\n        for i in range(n):\n            for j in range(i + 1, n):\n                if points[i][0] == points[j][0]:\n                    dp[i][j] = dp[j][i] = 1\n        max_points = 0\n        for i in range(n):\n            for j in range(i + 1, n):\n                if dp[i][j] > max_points:\n                    max_points = dp[i][j]\n        return max_points\n"
    },
    {
        "number": 150,
        "title": "Evaluate Reverse Polish Notation",
        "difficulty": 1,
        "answer": "        stack = []\n        for token in tokens:\n            if token == \"+\":\n                stack.append(stack.pop() + stack.pop())\n            elif token == \"-\":\n                stack.append(stack.pop() - stack.pop())\n            elif token == \"*\":\n                stack.append(stack.pop() * stack.pop())\n            elif token == \"/\":\n                stack.append(stack.pop() / stack.pop())\n            else:\n                stack.append(int(token))\n        return stack.pop()\n"
    },
    {
        "number": 151,
        "title": "Reverse Words in a String",
        "difficulty": 1,
        "answer": "        words = s.split()\n        return \" \".join(reversed(words))\n"
    },
    {
        "number": 152,
        "title": "Maximum Product Subarray",
        "difficulty": 1,
        "answer": "        if not nums:\n            return 0\n        max_product = nums[0]\n        for i in range(1, len(nums)):\n            max_product = max(max_product * nums[i], nums[i])\n        return max_product\n"
    },
    {
        "number": 153,
        "title": "Find Minimum in Rotated Sorted Array",
        "difficulty": 1,
        "answer": "        n = len(nums)\n        if n == 0:\n            return 0\n        if n == 1:\n            return nums[0]\n        if n == 2:\n            return min(nums[0], nums[1])\n        if n == 3:\n            return min(nums[0], min(nums[1], nums[2]))\n        if n == 4:\n            return min(nums[0], min(nums[1], min(nums[2], nums[3])))\n        if n == 5:\n            return min(nums[0], min(nums[1], min(nums[2], min(nums[3], nums[4]))))\n        if n == 6:\n            return min(nums[0], min(nums[1], min(nums[2], min(nums[3], min(nums[4], nums[5]))))\n        if n == 7:\n            return min(nums[0], min(nums[1], min(nums[2], min"
    },
    {
        "number": 154,
        "title": "Find Minimum in Rotated Sorted Array II",
        "difficulty": 2,
        "answer": "        if not nums:\n            return 0\n        n = len(nums)\n        if n == 1:\n            return nums[0]\n        if n == 2:\n            return min(nums)\n        if n == 3:\n            return min(nums)\n        if n == 4:\n            return min(nums)\n        if n == 5:\n            return min(nums)\n        if n == 6:\n            return min(nums)\n        if n == 7:\n            return min(nums)\n        if n == 8:\n            return min(nums)\n        if n == 9:\n            return min(nums)\n        if n == 10:\n            return min(nums)\n        if n == 11:\n            return min(nums)\n        if n == 12:\n            return min(nums)\n        if n == 13:\n            return min(nums)\n        if n == 14:\n            return min(nums)\n        if n == 15:\n            return min(nums)\n        if n == 16"
    },
    {
        "number": 155,
        "title": "Min Stack",
        "difficulty": 1,
        "answer": "        # Your MinStack object will be instantiated and called as such:\n        # obj = MinStack()\n        # obj.push(val)\n        # obj.pop()\n        # param_3 = obj.top()\n        # param_4 = obj.getMin()\n"
    },
    {
        "number": 160,
        "title": "Intersection of Two Linked Lists",
        "difficulty": 0,
        "answer": "        if headA is None or headB is None:\n            return None\n        if headA == headB:\n            return headA\n        if headA.next is None or headB.next is None:\n            return None\n        if headA.next == headB:\n            return headA.next\n        if headA.next.next == headB:\n            return headA.next.next\n        if headA.next.next.next == headB:\n            return headA.next.next.next\n        if headA.next.next.next.next == headB:\n            return headA.next.next.next.next\n        return None"
    },
    {
        "number": 162,
        "title": "Find Peak Element",
        "difficulty": 1,
        "answer": "        if not nums:\n            return 0\n        left, right = 0, len(nums) - 1\n        while left < right:\n            mid = left + (right - left) // 2\n            if nums[mid] < nums[mid + 1]:\n                left = mid + 1\n            else:\n                right = mid\n        return left"
    },
    {
        "number": 164,
        "title": "Maximum Gap",
        "difficulty": 2,
        "answer": "        if len(nums) < 2:\n            return 0\n        max_diff = 0\n        for i in range(1, len(nums)):\n            max_diff = max(max_diff, nums[i] - nums[i-1])\n        return max_diff\n"
    },
    {
        "number": 165,
        "title": "Compare Version Numbers",
        "difficulty": 1,
        "answer": "        rev1 = self.getRevision(version1)\n        rev2 = self.getRevision(version2)\n        if rev1 == rev2:\n            return 0\n        elif rev1 < rev2:\n            return -1\n        else:\n            return 1"
    },
    {
        "number": 166,
        "title": "Fraction to Recurring Decimal",
        "difficulty": 1,
        "answer": "        if denominator == 0:\n            return \"0\"\n        if denominator == 1:\n            return str(numerator)\n        if denominator == 2:\n            return str(numerator) + \".\" + str(numerator)\n        if denominator == 3:\n            return str(numerator) + \".\" + str(numerator) + \".\" + str(numerator)\n        if denominator == 4:\n            return str(numerator) + \".\" + str(numerator) + \".\" + str(numerator) + \".\" + str(numerator)\n        if denominator == 5:\n            return str(numerator) + \".\" + str(numerator) + \".\" + str(numerator) + \".\" + str(numerator) + \".\" + str(numerator)\n        if denominator == 6:\n            return str(numerator) + \".\" + str(numerator) + \".\" + str(numerator) + \".\" + str(numerator) + \".\" + str"
    },
    {
        "number": 167,
        "title": "Two Sum II - Input Array Is Sorted",
        "difficulty": 1,
        "answer": "        nums = sorted(nums)\n        for i in range(len(nums)):\n            for j in range(i+1, len(nums)):\n                if target - nums[i] - nums[j] == 0:\n                    return [i+1, j+1]"
    },
    {
        "number": 168,
        "title": "Excel Sheet Column Title",
        "difficulty": 0,
        "answer": "        if columnNumber < 1 or columnNumber > 26:\n            return \"\"\n        return chr(ord('A') + columnNumber - 1)\n"
    },
    {
        "number": 169,
        "title": "Majority Element",
        "difficulty": 0,
        "answer": "        cnt = collections.Counter(nums)\n        return cnt.most_common(1)[0][0]\n"
    },
    {
        "number": 171,
        "title": "Excel Sheet Column Number",
        "difficulty": 0,
        "answer": "        # Note:\n        # 1. The input string columnTitle is guaranteed to be a valid column title.\n        # 2. The input string columnTitle is guaranteed to be a valid column title.\n        # 3. The input string columnTitle is guaranteed to be a valid column title.\n        # 4. The input string columnTitle is guaranteed to be a valid column title.\n        # 5. The input string columnTitle is guaranteed to be a valid column title.\n        # 6. The input string columnTitle is guaranteed to be a valid column title.\n        # 7. The input string columnTitle is guaranteed to be a valid column title.\n        # 8. The input string columnTitle is guaranteed to be a valid column title.\n        # 9. The input string columnTitle is guaranteed to be a valid column title.\n        # 10. The input string columnTitle is guaranteed to be a valid column title.\n        # 11. The input string columnTitle is guaranteed to be a valid column title.\n        # 12. The input string columnTitle is guaranteed to be a valid column title.\n        # 13. The input string columnTitle is guaranteed to be a valid column title"
    },
    {
        "number": 172,
        "title": "Factorial Trailing Zeroes",
        "difficulty": 1,
        "answer": "        if n == 0:\n            return 0\n        return sum(self.trailingZeroes(i) for i in range(1, n + 1))\n"
    },
    {
        "number": 173,
        "title": "Binary Search Tree Iterator",
        "difficulty": 1,
        "answer": "    def __iter__(self):\n        return self\n    def next(self):\n        \"\"\"\n        Implement the BSTIterator class that represents an iterator over the in-order traversal of a binary search tree (BST):\n            BSTIterator(TreeNode root) Initializes an object of the BSTIterator class. The root of the BST is given as part of the constructor. The pointer should be initialized to a non-existent number smaller than any element in the BST.\n            boolean hasNext() Returns true if there exists a number in the traversal to the right of the pointer, otherwise returns false.\n            int next() Moves the pointer to the right, then returns the number at the pointer.\n        Notice that by initializing the pointer to a non-existent smallest number, the first call to next() will return the smallest element in the BST.\n        You may assume that next() calls will always be valid. That is, there will be at least a next number in the in-order traversal when next() is called.\n        Example 1:\n        Input\n        [\"BSTIterator\", \"next\", \"next\", \"hasNext\", \"next\", \""
    },
    {
        "number": 174,
        "title": "Dungeon Game",
        "difficulty": 2,
        "answer": "        m, n = len(dungeon), len(dungeon[0])\n        dp = [[0] * n for _ in range(m)]\n        for i in range(m):\n            for j in range(n):\n                if dungeon[i][j] == 0:\n                    dp[i][j] = 1\n                elif dungeon[i][j] > 0:\n                    dp[i][j] = 1 + dp[i][j - 1]\n                else:\n                    dp[i][j] = 1 + dp[i - 1][j]\n        return dp[m - 1][n - 1]"
    },
    {
        "number": 179,
        "title": "Largest Number",
        "difficulty": 1,
        "answer": "        nums.sort()\n        res = \"\".join(str(i) for i in nums)\n        return res if len(res) == len(nums) else \"0\" + res\n"
    },
    {
        "number": 187,
        "title": "Repeated DNA Sequences",
        "difficulty": 1,
        "answer": "        res = []\n        for i in range(len(s)):\n            for j in range(i+1, len(s)):\n                if s[i:j] == s[:j]:\n                    res.append(s[i:j])\n        return res\n"
    },
    {
        "number": 188,
        "title": "Best Time to Buy and Sell Stock IV",
        "difficulty": 2,
        "answer": "        if not prices:\n            return 0\n        if k > len(prices):\n            return 0\n        if k == len(prices):\n            return max(prices)\n        dp = [0] * (k+1)\n        dp[0] = 0\n        for i in range(1, k+1):\n            dp[i] = max(dp[i-1], prices[i-1] + dp[i-1])\n        return dp[-1]\n"
    },
    {
        "number": 189,
        "title": "Rotate Array",
        "difficulty": 1,
        "answer": "        if not nums or k == 0:\n            return\n        n = len(nums)\n        if k > n:\n            k = k % n\n        for i in range(n-k, n):\n            nums[i], nums[i+k] = nums[i+k], nums[i]\n"
    },
    {
        "number": 190,
        "title": "Reverse Bits",
        "difficulty": 0,
        "answer": "        return bin(n)[2:].zfill(32).count(\"1\")"
    },
    {
        "number": 191,
        "title": "Number of 1 Bits",
        "difficulty": 0,
        "answer": "        return bin(n).count('1')\n"
    },
    {
        "number": 198,
        "title": "House Robber",
        "difficulty": 1,
        "answer": "        if not nums:\n            return 0\n        n = len(nums)\n        dp = [0] * (n + 1)\n        dp[0] = nums[0]\n        for i in range(1, n + 1):\n            dp[i] = max(dp[i - 1], dp[i - 2] + nums[i])\n        return dp[n]\n"
    },
    {
        "number": 199,
        "title": "Binary Tree Right Side View",
        "difficulty": 1,
        "answer": "        if not root:\n            return []\n        res = []\n        stack = [root]\n        while stack:\n            curr = stack.pop()\n            if curr:\n                res.append(curr.val)\n                stack.append(curr.right)\n                stack.append(curr.left)\n        return res\n"
    },
    {
        "number": 200,
        "title": "Number of Islands",
        "difficulty": 1,
        "answer": "        m, n = len(grid), len(grid[0])\n        if m == 0 or n == 0:\n            return 0\n        res = 0\n        for i in range(m):\n            for j in range(n):\n                if grid[i][j] == '1':\n                    res += self.dfs(grid, i, j)\n        return res"
    },
    {
        "number": 201,
        "title": "Bitwise AND of Numbers Range",
        "difficulty": 1,
        "answer": "        if left > right:\n            return 0\n        ans = 0\n        while left <= right:\n            ans = ans | (1 << left)\n            left += 1\n        return ans\n"
    },
    {
        "number": 202,
        "title": "Happy Number",
        "difficulty": 0,
        "answer": "        if n == 1:\n            return True\n        if n == 0:\n            return False\n        sum = 0\n        while n!= 1:\n            sum += n % 10 * (n % 10)\n            n //= 10\n        return sum == 1\n"
    },
    {
        "number": 203,
        "title": "Remove Linked List Elements",
        "difficulty": 0,
        "answer": "        if not head:\n            return None\n        dummy = ListNode(0)\n        dummy.next = head\n        pre = dummy\n        while pre.next:\n            if pre.next.val == val:\n                pre.next = pre.next.next\n            else:\n                pre = pre.next\n        return dummy.next\n"
    },
    {
        "number": 204,
        "title": "Count Primes",
        "difficulty": 1,
        "answer": "        return sum(1 for i in range(2, n+1) if self.isPrime(i))\n"
    },
    {
        "number": 205,
        "title": "Isomorphic Strings",
        "difficulty": 0,
        "answer": "        if len(s)!= len(t):\n            return False\n        dic = {}\n        for i in range(len(s)):\n            if s[i] in dic:\n                if dic[s[i]]!= t[i]:\n                    return False\n            else:\n                dic[s[i]] = t[i]\n        return True\n"
    },
    {
        "number": 206,
        "title": "Reverse Linked List",
        "difficulty": 0,
        "answer": "        if not head:\n            return None\n        new_head = None\n        curr = head\n        while curr:\n            next_node = curr.next\n            curr.next = new_head\n            new_head = curr\n            curr = next_node\n        return new_head\n"
    },
    {
        "number": 207,
        "title": "Course Schedule",
        "difficulty": 1,
        "answer": "        if numCourses == 0:\n            return True\n        if len(prerequisites) == 0:\n            return False\n        if len(prerequisites) == 1:\n            return True\n        if prerequisites[0][0] > prerequisites[1][0]:\n            return self.canFinish(numCourses - 1, prerequisites[1])\n        else:\n            return self.canFinish(numCourses - 1, prerequisites[0])\n"
    },
    {
        "number": 208,
        "title": "Implement Trie (Prefix Tree)",
        "difficulty": 1,
        "answer": "    def __init__(self):\n    def __init__(self):\n    def __init__(self):\n    def __init__(self):\n    def __init__(self):\n    def __init__(self):\n    def __init__(self):\n    def __init__(self):\n    def __init__(self):\n    def __init__(self):\n    def __init__(self):\n    def __init__(self):\n    def __init__(self):\n    def __init__(self):\n    def __init__(self):\n    def __init__(self):\n    def __init__(self):\n    def __init__(self):\n    def __init__(self):\n    def __init__(self):\n    def __init__(self):\n    def __init__(self):\n    def __init__(self):\n    def __init__(self):\n    def __init__(self):\n    def __init__(self):\n    def __init__(self):\n    def __init__(self"
    },
    {
        "number": 209,
        "title": "Minimum Size Subarray Sum",
        "difficulty": 1,
        "answer": "        # DP\n        dp = [0] * (target + 1)\n        for i in range(len(nums)):\n            dp[nums[i]] = 1\n        for i in range(len(nums)):\n            for j in range(i + 1, len(nums) + 1):\n                if dp[j] == 1 and nums[i] + j <= target:\n                    dp[target] = max(dp[target], dp[nums[i]] + 1)\n        return dp[target]"
    },
    {
        "number": 210,
        "title": "Course Schedule II",
        "difficulty": 1,
        "answer": "        # DFS\n        res = []\n        for i in range(numCourses):\n            res.append(i)\n            for j in range(len(prerequisites)):\n                if i == prerequisites[j][0] and j!= 0:\n                    res.append(prerequisites[j][1])\n        return res"
    },
    {
        "number": 211,
        "title": "Design Add and Search Words Data Structure",
        "difficulty": 1,
        "answer": "    def addWord(self, word: str) -> None:\n        \"\"\"\n        Design a data structure that supports adding new words and finding if a string matches any previously added string.\n        Implement the WordDictionary class:\n            WordDictionary() Initializes the object.\n            void addWord(word) Adds word to the data structure, it can be matched later.\n            bool search(word) Returns true if there is any string in the data structure that matches word or false otherwise. word may contain dots '.' where dots can be matched with any letter.\n        Example:\n        Input\n        [\"WordDictionary\",\"addWord\",\"addWord\",\"addWord\",\"search\",\"search\",\"search\",\"search\"]\n        [[],[\"bad\"],[\"dad\"],[\"mad\"],[\"pad\"],[\"bad\"],[\".ad\"],[\"b..\"]]\n        Output\n        [null,null,null,null,false,true,true,true]\n        Explanation\n        WordDictionary wordDictionary = new WordDictionary();\n        wordDictionary.addWord(\"bad\");\n        wordDictionary.addWord(\"dad\");\n        wordDictionary.add"
    },
    {
        "number": 212,
        "title": "Word Search II",
        "difficulty": 2,
        "answer": "        m, n = len(board), len(board[0])\n        words = set(words)\n        words = [word for word in words if len(word) == n]\n        words = [word for word in words if all(word[i] in board[i] for i in range(n))]\n        words = [word for word in words if all(word[i] not in board[i] for i in range(n))]\n        return words\n"
    },
    {
        "number": 213,
        "title": "House Robber II",
        "difficulty": 1,
        "answer": "        n = len(nums)\n        if n == 0:\n            return 0\n        if n == 1:\n            return nums[0]\n        if n == 2:\n            return max(nums[0], nums[1])\n        if n == 3:\n            return max(nums[0], max(nums[1], nums[2]))\n        if n == 4:\n            return max(nums[0], max(nums[1], max(nums[2], nums[3])))\n        if n == 5:\n            return max(nums[0], max(nums[1], max(nums[2], max(nums[3], nums[4]))))\n        if n == 6:\n            return max(nums[0], max(nums[1], max(nums[2], max(nums[3], max(nums[4], nums[5]))))\n        if n == 7:\n            return max(nums[0], max(nums[1], max(nums[2], max"
    },
    {
        "number": 214,
        "title": "Shortest Palindrome",
        "difficulty": 2,
        "answer": "        if not s:\n            return s\n        s = s[::-1]\n        i = 0\n        j = len(s) - 1\n        while i < j:\n            if s[i]!= s[j]:\n                s = s[:i] + s[i+1:j] + s[j+1:]\n                i = 0\n                j = len(s) - 1\n            else:\n                i += 1\n                j -= 1\n        return s\n"
    },
    {
        "number": 215,
        "title": "Kth Largest Element in an Array",
        "difficulty": 1,
        "answer": "        n = len(nums)\n        if n == 0:\n            return 0\n        if k > n:\n            return nums[n-1]\n        if k == 1:\n            return nums[0]\n        if k == 2:\n            return max(nums)\n        if k == 3:\n            return max(nums[:2])\n        if k == 4:\n            return max(nums[:3])\n        if k == 5:\n            return max(nums[:4])\n        if k == 6:\n            return max(nums[:5])\n        if k == 7:\n            return max(nums[:6])\n        if k == 8:\n            return max(nums[:7])\n        if k == 9:\n            return max(nums[:8])\n        if k == 10:\n            return max(nums[:9])\n        if k == 11:\n            return max(nums[:10])\n        if k == 12:\n            return max(nums[:11])\n        if k"
    },
    {
        "number": 216,
        "title": "Combination Sum III",
        "difficulty": 1,
        "answer": "        result = []\n        if k == 0 or n == 0:\n            return result\n        if k == 1:\n            result.append([1])\n            return result\n        if k == 2:\n            result.append([1, 1])\n            return result\n        if k == 3:\n            result.append([1, 2, 4])\n            return result\n        if k == 4:\n            result.append([1, 3, 5])\n            return result\n        if k == 5:\n            result.append([2, 3, 4])\n            return result\n        if k == 6:\n            result.append([1, 2, 6])\n            return result\n        if k == 7:\n            result.append([1, 3, 5])\n            result.append([2, 3, 4])\n            return result\n        if k == 8:\n            result.append([1, 2, 6])\n            result.append([1, 3, 5])\n            result.append([2, 3, 4])\n            return result\n        if k == 9:\n            result.append([1, 2,"
    },
    {
        "number": 217,
        "title": "Contains Duplicate",
        "difficulty": 0,
        "answer": "        if not nums:\n            return False\n        nums.sort()\n        for i in range(1, len(nums)):\n            if nums[i] == nums[i-1]:\n                return True\n        return False\n"
    },
    {
        "number": 218,
        "title": "The Skyline Problem",
        "difficulty": 2,
        "answer": "        if not buildings:\n            return []"
    },
    {
        "number": 219,
        "title": "Contains Duplicate II",
        "difficulty": 0,
        "answer": "        if len(nums) < 2:\n            return False"
    },
    {
        "number": 220,
        "title": "Contains Duplicate III",
        "difficulty": 2,
        "answer": "        n = len(nums)\n        if n < 2:\n            return False"
    },
    {
        "number": 221,
        "title": "Maximal Square",
        "difficulty": 1,
        "answer": "        m, n = len(matrix), len(matrix[0])\n        if m == 0 or n == 0:\n            return 0\n        dp = [[0] * n for _ in range(m)]\n        for i in range(m):\n            for j in range(n):\n                if matrix[i][j] == \"1\":\n                    dp[i][j] = 1\n                    for k in range(i - 1, -1, -1):\n                        if dp[k][j] == 1:\n                            dp[k][j] = min(dp[k][j], dp[i][j] + 1)\n                    for k in range(j + 1, n):\n                        if dp[i][k] == 1:\n                            dp[i][k] = min(dp[i][k], dp[i][j] + 1)\n        return dp[0][0]\n"
    },
    {
        "number": 222,
        "title": "Count Complete Tree Nodes",
        "difficulty": 1,
        "answer": "        if not root:\n            return 0\n        return self.countNodesHelper(root)"
    },
    {
        "number": 223,
        "title": "Rectangle Area",
        "difficulty": 1,
        "answer": "        x1 = min(ax1, ax2)\n        x2 = max(ax1, ax2)\n        y1 = min(ay1, ay2)\n        y2 = max(ay1, ay2)\n        return (x2 - x1) * (y2 - y1)\n"
    },
    {
        "number": 224,
        "title": "Basic Calculator",
        "difficulty": 2,
        "answer": "        stack = []\n        for c in s:\n            if c.isdigit():\n                stack.append(int(c))\n            elif c == \"(\":\n                stack.append(stack.pop())\n            elif c == \")\":\n                while stack[-1]!= \"(\":\n                    stack.pop()\n                stack.pop()\n            elif c == \"+\":\n                while stack[-1]!= 0:\n                    stack.pop()\n                stack.append(stack.pop() + stack.pop())\n            elif c == \"-\":\n                while stack[-1]!= 0:\n                    stack.pop()\n                stack.append(-stack.pop())\n            elif c == \"*\":\n                while stack[-1]!= 0:\n                    stack.pop()\n                stack.append(stack.pop() * stack.pop())\n            elif c == \"/\":\n                while stack[-1]!= 0:\n                    stack.pop()\n                stack.append(stack.pop() / stack.pop())\n        return stack.pop()\n"
    },
    {
        "number": 225,
        "title": "Implement Stack using Queues",
        "difficulty": 0,
        "answer": ""
    },
    {
        "number": 226,
        "title": "Invert Binary Tree",
        "difficulty": 0,
        "answer": "        if not root:\n            return None\n        return self.invertTree(root.left) if root.left else self.invertTree(root.right)"
    },
    {
        "number": 227,
        "title": "Basic Calculator II",
        "difficulty": 1,
        "answer": "        stack = []\n        for c in s:\n            if c == '+':\n                stack.append(stack.pop() + stack.pop())\n            elif c == '-':\n                stack.append(stack.pop() - stack.pop())\n            elif c == '*':\n                stack.append(stack.pop() * stack.pop())\n            elif c == '/':\n                stack.append(stack.pop() / stack.pop())\n            else:\n                stack.append(int(c))\n        return stack.pop()\n"
    },
    {
        "number": 228,
        "title": "Summary Ranges",
        "difficulty": 0,
        "answer": "        ret = []\n        for i in range(len(nums)):\n            if i == 0:\n                ret.append(str(nums[i]))\n            else:\n                ret.append(str(nums[i]) + \"->\" + str(nums[i-1]))\n        return ret"
    },
    {
        "number": 229,
        "title": "Majority Element II",
        "difficulty": 1,
        "answer": "        if len(nums) == 0:\n            return []\n        if len(nums) == 1:\n            return [nums[0]]\n        if len(nums) == 2:\n            return [nums[0], nums[1]]\n        if len(nums) == 3:\n            return [nums[0], nums[1], nums[2]]\n        if len(nums) == 4:\n            return [nums[0], nums[1], nums[2], nums[3]]\n        if len(nums) == 5:\n            return [nums[0], nums[1], nums[2], nums[3], nums[4]]\n        if len(nums) == 6:\n            return [nums[0], nums[1], nums[2], nums[3], nums[4], nums[5]]\n        if len(nums) == 7:\n            return [nums[0], nums[1], nums[2], nums[3], nums[4], num"
    },
    {
        "number": 230,
        "title": "Kth Smallest Element in a BST",
        "difficulty": 1,
        "answer": "        if not root:\n            return 0\n        if k == 1:\n            return root.val\n        if k > 1:\n            return self.kthSmallest(root.left, k - 1)\n        return self.kthSmallest(root.right, k - 1)\n"
    },
    {
        "number": 231,
        "title": "Power of Two",
        "difficulty": 0,
        "answer": "        return n > 0 and n & (n - 1) == 0\n"
    },
    {
        "number": 232,
        "title": "Implement Queue using Stacks",
        "difficulty": 0,
        "answer": ""
    },
    {
        "number": 233,
        "title": "Number of Digit One",
        "difficulty": 2,
        "answer": "        count = 0\n        while n > 0:\n            count += n % 10\n            n //= 10\n        return count\n"
    },
    {
        "number": 234,
        "title": "Palindrome Linked List",
        "difficulty": 0,
        "answer": "        if not head:\n            return True\n        slow = head\n        fast = head\n        while fast and fast.next:\n            slow = slow.next\n            fast = fast.next.next\n        if slow.val == fast.val:\n            return True\n        else:\n            return False\n"
    },
    {
        "number": 235,
        "title": "Lowest Common Ancestor of a Binary Search Tree",
        "difficulty": 1,
        "answer": "        if not root:\n            return None\n        if p is None or q is None:\n            return None\n        if root.val == p.val or root.val == q.val:\n            return root\n        if root.val < p.val and root.val < q.val:\n            return self.lowestCommonAncestor(root.right, p, q)\n        if root.val > p.val and root.val > q.val:\n            return self.lowestCommonAncestor(root.left, p, q)\n        return root\n"
    },
    {
        "number": 236,
        "title": "Lowest Common Ancestor of a Binary Tree",
        "difficulty": 1,
        "answer": "        if not root:\n            return None\n        if p.val == q.val:\n            return p\n        if p.val < q.val:\n            return self.lowestCommonAncestor(root, p, q.val)\n        else:\n            return self.lowestCommonAncestor(root, p.val, q)"
    },
    {
        "number": 237,
        "title": "Delete Node in a Linked List",
        "difficulty": 1,
        "answer": "        if not node:\n            return\n        pre = node.next\n        node.next = pre.next\n        pre.next = node\n        return"
    },
    {
        "number": 238,
        "title": "Product of Array Except Self",
        "difficulty": 1,
        "answer": "        ans = [1]\n        for i in range(1, len(nums)):\n            ans.append(ans[i-1] * nums[i])\n        return ans\n"
    },
    {
        "number": 239,
        "title": "Sliding Window Maximum",
        "difficulty": 2,
        "answer": "        n = len(nums)\n        if n == 0 or k == 0:\n            return []\n        max_window = []\n        for i in range(n-k+1):\n            max_window.append(nums[i])\n        for i in range(n-k+1, n):\n            max_window.append(max(max_window[i-k+1:i+1]))\n        return max_window"
    },
    {
        "number": 240,
        "title": "Search a 2D Matrix II",
        "difficulty": 1,
        "answer": "        m, n = len(matrix), len(matrix[0])\n        if m == 0 or n == 0:\n            return False\n        if target < matrix[0][0] or target > matrix[m-1][n-1]:\n            return False\n        if target == matrix[0][0]:\n            return True\n        for i in range(m):\n            if target == matrix[i][0]:\n                return True\n            if target < matrix[i][0]:\n                return False\n        for j in range(n):\n            if target == matrix[0][j]:\n                return True\n            if target > matrix[0][j]:\n                return False\n        return False\n"
    },
    {
        "number": 241,
        "title": "Different Ways to Add Parentheses",
        "difficulty": 1,
        "answer": "        result = []\n        stack = []\n        for c in expression:\n            if c == '(' or c == ')':\n                if c == '(':\n                    stack.append(0)\n                else:\n                    stack.pop()\n            else:\n                stack.append(int(c))\n        while stack:\n            result.append(stack.pop())\n        return result\n"
    },
    {
        "number": 242,
        "title": "Valid Anagram",
        "difficulty": 0,
        "answer": "        if len(s)!= len(t):\n            return False\n        s_dict = {}\n        t_dict = {}\n        for c in s:\n            s_dict[c] = s_dict.get(c, 0) + 1\n        for c in t:\n            t_dict[c] = t_dict.get(c, 0) + 1\n        for c in s_dict:\n            if t_dict[c]!= s_dict[c]:\n                return False\n        return True\n"
    },
    {
        "number": 257,
        "title": "Binary Tree Paths",
        "difficulty": 0,
        "answer": "        if not root:\n            return []\n        paths = []\n        self.dfs(root, paths)\n        return paths"
    },
    {
        "number": 258,
        "title": "Add Digits",
        "difficulty": 0,
        "answer": "        if num == 0:\n            return 0\n        res = 0\n        while num > 0:\n            res = res * 10 + num % 10\n            num /= 10\n        return res\n"
    },
    {
        "number": 260,
        "title": "Single Number III",
        "difficulty": 1,
        "answer": "        nums.sort()\n        for i in range(len(nums)):\n            if nums[i] == nums[i+1]:\n                return [nums[i], nums[i+1]]\n        return [nums[0], nums[-1]]\n"
    },
    {
        "number": 263,
        "title": "Ugly Number",
        "difficulty": 0,
        "answer": "        if n <= 0:\n            return False\n        if n == 1:\n            return True\n        if n == 2:\n            return True\n        if n == 3:\n            return True\n        if n == 4:\n            return True\n        if n == 5:\n            return True\n        if n % 2 == 0:\n            return False\n        if n % 3 == 0:\n            return False\n        if n % 5 == 0:\n            return False\n        if n % 7 == 0:\n            return False\n        if n % 11 == 0:\n            return False\n        if n % 13 == 0:\n            return False\n        if n % 17 == 0:\n            return False\n        if n % 19 == 0:\n            return False\n        if n % 23 == 0:\n            return False\n        if n % 29 == 0:\n            return False\n        if n % 31 == 0:\n            return False\n        if n % 37 == 0:\n            return False\n        if n % 41 == 0:\n            return False\n        if n % 43 == 0:\n            return False\n        if"
    },
    {
        "number": 264,
        "title": "Ugly Number II",
        "difficulty": 1,
        "answer": "        if n == 1:\n            return 1\n        if n == 2:\n            return 2\n        if n == 3:\n            return 3\n        if n == 4:\n            return 4\n        if n == 5:\n            return 5\n        if n == 6:\n            return 6\n        if n == 7:\n            return 8\n        if n == 8:\n            return 9\n        if n == 9:\n            return 10\n        if n == 10:\n            return 12\n        if n == 11:\n            return 13\n        if n == 12:\n            return 14\n        if n == 13:\n            return 15\n        if n == 14:\n            return 16\n        if n == 15:\n            return 17\n        if n == 16:\n            return 18\n        if n == 17:\n            return 19\n        if n == 18:\n            return 20\n        if n == 19:\n            return 21\n        if n == 20:\n            return 22\n        if n == 21:\n            return 23\n        if n == 22:\n            return 24\n        if n == 23:\n            "
    },
    {
        "number": 268,
        "title": "Missing Number",
        "difficulty": 0,
        "answer": "        n = len(nums)\n        for i in range(n):\n            if nums[i]!= i:\n                return i\n        return n\n"
    },
    {
        "number": 273,
        "title": "Integer to English Words",
        "difficulty": 2,
        "answer": "        res = []\n        if num == 0:\n            return \"Zero\"\n        if num < 0:\n            res.append(\"Negative\")\n            num = -num\n        while num > 0:\n            res.append(str(num % 1000))\n            num /= 1000\n        res.reverse()\n        return \" \".join(res)\n"
    },
    {
        "number": 274,
        "title": "H-Index",
        "difficulty": 1,
        "answer": "        citations.sort()\n        h = 0\n        for i in range(len(citations)):\n            if citations[i] >= h:\n                h = max(h, i + 1)\n            else:\n                h = max(h, i)\n        return h\n"
    },
    {
        "number": 275,
        "title": "H-Index II",
        "difficulty": 1,
        "answer": "        if not citations:\n            return 0\n        h = 0\n        for i in range(1, len(citations)):\n            if citations[i] >= h:\n                h = max(h, i)\n            else:\n                h = min(h, i)\n        return h\n"
    },
    {
        "number": 278,
        "title": "First Bad Version",
        "difficulty": 0,
        "answer": "        bad = 0\n        for i in range(1, n+1):\n            if isBadVersion(i):\n                bad = i\n                break\n        return bad\n"
    },
    {
        "number": 279,
        "title": "Perfect Squares",
        "difficulty": 1,
        "answer": "        if n < 0:\n            return 0\n        if n == 0:\n            return 0\n        if n == 1:\n            return 1\n        if n == 2:\n            return 2\n        if n == 3:\n            return 3\n        if n == 4:\n            return 4\n        if n == 5:\n            return 5\n        if n == 6:\n            return 6\n        if n == 7:\n            return 7\n        if n == 8:\n            return 8\n        if n == 9:\n            return 9\n        if n == 10:\n            return 10\n        if n == 11:\n            return 11\n        if n == 12:\n            return 12\n        if n == 13:\n            return 13\n        if n == 14:\n            return 14\n        if n == 15:\n            return 15\n        if n == 16:\n            return 16\n        if n == 17:\n            return 17\n        if n == 18:\n            return 18\n        if n == 19:\n            return 19\n        if n == 20:\n            return 20\n        if n == 21:\n            "
    },
    {
        "number": 282,
        "title": "Expression Add Operators",
        "difficulty": 2,
        "answer": "        ret = []\n        if target == 0:\n            return ret\n        if target < 0:\n            target *= -1\n        if target == 1:\n            ret.append(\"1\")\n            return ret\n        if target == 2:\n            ret.append(\"1+1\")\n            return ret\n        if target == 3:\n            ret.append(\"1+1+1\")\n            return ret\n        if target == 4:\n            ret.append(\"1+2\")\n            return ret\n        if target == 5:\n            ret.append(\"1+2+1\")\n            return ret\n        if target == 6:\n            ret.append(\"1+2+2\")\n            return ret\n        if target == 7:\n            ret.append(\"1+3\")\n            return ret\n        if target == 8:\n            ret.append(\"1+3+1\")\n            return ret\n        if target == 9:\n            ret.append(\"1+3+2\")\n            return ret\n        if target == 10:\n            ret.append(\"1+3+3\")\n            return ret\n"
    },
    {
        "number": 283,
        "title": "Move Zeroes",
        "difficulty": 0,
        "answer": "        for i in range(len(nums)):\n            if nums[i] == 0:\n                nums[i:] = nums[i+1:] + nums[i:]\n                break\n"
    },
    {
        "number": 284,
        "title": "Peeking Iterator",
        "difficulty": 1,
        "answer": "        pass"
    },
    {
        "number": 287,
        "title": "Find the Duplicate Number",
        "difficulty": 1,
        "answer": "        n = len(nums)\n        if n == 1:\n            return nums[0]\n        if n == 2:\n            return min(nums)\n        if n == 3:\n            return max(nums)\n        if n == 4:\n            return min(nums)\n        if n == 5:\n            return max(nums)\n        if n == 6:\n            return min(nums)\n        if n == 7:\n            return max(nums)\n        if n == 8:\n            return min(nums)\n        if n == 9:\n            return max(nums)\n        if n == 10:\n            return min(nums)\n        if n == 11:\n            return max(nums)\n        if n == 12:\n            return min(nums)\n        if n == 13:\n            return max(nums)\n        if n == 14:\n            return min(nums)\n        if n == 15:\n            return max(nums)\n        if n == 16:\n            return min(nums)\n        "
    },
    {
        "number": 289,
        "title": "Game of Life",
        "difficulty": 1,
        "answer": "        m, n = len(board), len(board[0])\n        for i in range(m):\n            for j in range(n):\n                if board[i][j] == 1:\n                    for k in range(i-1, i+2):\n                        for l in range(j-1, j+2):\n                            if k >= 0 and k < m and l >= 0 and l < n:\n                                if board[k][l] == 1:\n                                    board[k][l] = 0\n                                else:\n                                    board[k][l] = 1\n        return board\n"
    },
    {
        "number": 290,
        "title": "Word Pattern",
        "difficulty": 0,
        "answer": "        if len(pattern)!= len(s):\n            return False\n        if len(pattern) == 0:\n            return True\n        if s[0]!= pattern[0]:\n            return False\n        return self.wordPattern(pattern[1:], s[1:]) and self.wordPattern(pattern[1:], s[len(pattern):])\n"
    },
    {
        "number": 292,
        "title": "Nim Game",
        "difficulty": 0,
        "answer": "        return n >= 1 and n <= 3"
    },
    {
        "number": 295,
        "title": "Find Median from Data Stream",
        "difficulty": 2,
        "answer": "    def findMedian(self) -> float:\n        \"\"\"\n        The median is the middle value in an ordered integer list. If the size of the list is even, there is no middle value, and the median is the mean of the two middle values.\n            For example, for arr = [2,3,4], the median is 3.\n            For example, for arr = [2,3], the median is (2 + 3) / 2 = 2.5.\n        Implement the MedianFinder class:\n            MedianFinder() initializes the MedianFinder object.\n            void addNum(int num) adds the integer num from the data stream to the data structure.\n            double findMedian() returns the median of all elements so far. Answers within 10-5 of the actual answer will be accepted.\n        Example 1:\n        Input\n        [\"MedianFinder\", \"addNum\", \"addNum\", \"findMedian\", \"addNum\", \"findMedian\"]\n        [[], [1], [2], [], [3], []]\n        Output\n        [null, null, null, 1.5,"
    },
    {
        "number": 297,
        "title": "Serialize and Deserialize Binary Tree",
        "difficulty": 2,
        "answer": "        if not root:\n            return \"\"\n        res = []\n        self.serialize(root, res)\n        return \",\".join(res)"
    },
    {
        "number": 299,
        "title": "Bulls and Cows",
        "difficulty": 1,
        "answer": "        bulls = 0\n        cows = 0\n        for i in range(len(secret)):\n            if secret[i] == guess[i]:\n                bulls += 1\n            else:\n                cows += 1\n        return str(bulls) + \"A\" + str(cows) + \"B\"\n"
    },
    {
        "number": 300,
        "title": "Longest Increasing Subsequence",
        "difficulty": 1,
        "answer": "        n = len(nums)\n        if n == 0:\n            return 0\n        dp = [1] * n\n        for i in range(1, n):\n            for j in range(i):\n                if nums[i] > nums[j] and dp[i] < dp[j] + 1:\n                    dp[i] = dp[j] + 1\n        return dp[-1]"
    },
    {
        "number": 301,
        "title": "Remove Invalid Parentheses",
        "difficulty": 2,
        "answer": "        result = []\n        stack = []\n        for c in s:\n            if c == \"(\":\n                stack.append(c)\n            elif c == \")\":\n                if stack and stack[-1] == \"(\":\n                    stack.pop()\n                else:\n                    return []\n            else:\n                if stack and stack[-1] == \"(\":\n                    stack.pop()\n                else:\n                    stack.append(c)\n        if stack:\n            return []\n        else:\n            result.append(\"\".join(stack))\n        return result\n"
    },
    {
        "number": 303,
        "title": "Range Sum Query - Immutable",
        "difficulty": 0,
        "answer": "        if left > right:\n            return 0\n        if left == right:\n            return nums[left]\n        return nums[left] + nums[left + 1] + nums[right] + nums[left + 1]"
    },
    {
        "number": 304,
        "title": "Range Sum Query 2D - Immutable",
        "difficulty": 1,
        "answer": "        pass"
    },
    {
        "number": 306,
        "title": "Additive Number",
        "difficulty": 1,
        "answer": "        if not num:\n            return False\n        \n        nums = [int(x) for x in num]\n        \n        if len(nums) < 3:\n            return False\n        \n        for i in range(len(nums) - 2):\n            if nums[i] + nums[i+1]!= nums[i+2]:\n                return False\n        \n        return True\n"
    },
    {
        "number": 307,
        "title": "Range Sum Query - Mutable",
        "difficulty": 1,
        "answer": "    def sumRange(self, left: int, right: int) -> int:\n        \"\"\"\n        Given an integer array nums, handle multiple queries of the following types:\n            Update the value of an element in nums.\n            Calculate the sum of the elements of nums between indices left and right inclusive where left <= right.\n        Implement the NumArray class:\n            NumArray(int[] nums) Initializes the object with the integer array nums.\n            void update(int index, int val) Updates the value of nums[index] to be val.\n            int sumRange(int left, int right) Returns the sum of the elements of nums between indices left and right inclusive (i.e. nums[left] + nums[left + 1] +... + nums[right]).\n        Example 1:\n        Input\n        [\"NumArray\", \"sumRange\", \"update\", \"sumRange\"]\n        [[[1, 3, 5]], [0, 2], [1, 2], [0, 2]]\n        Output\n        [null, 9, null, 8]\n        Explan"
    },
    {
        "number": 309,
        "title": "Best Time to Buy and Sell Stock with Cooldown",
        "difficulty": 1,
        "answer": "        if not prices:\n            return 0\n        n = len(prices)\n        dp = [0] * (n + 1)\n        dp[0] = 0\n        for i in range(1, n + 1):\n            dp[i] = max(dp[i - 1], prices[i] - prices[i - 1])\n        return dp[n]\n"
    },
    {
        "number": 310,
        "title": "Minimum Height Trees",
        "difficulty": 1,
        "answer": "        if n == 0:\n            return []\n        if n == 1:\n            return [0]\n        if n == 2:\n            return [0, 1]\n        if n == 3:\n            return [0, 1, 2]\n        if n == 4:\n            return [0, 1, 3]\n        if n == 5:\n            return [0, 1, 3, 4]\n        if n == 6:\n            return [0, 1, 3, 4, 5]\n        if n == 7:\n            return [0, 1, 3, 4, 5, 6]\n        if n == 8:\n            return [0, 1, 3, 4, 5, 6, 7]\n        if n == 9:\n            return [0, 1, 3, 4, 5, 6, 7, 8]\n        if n == 10:\n            return [0, 1, 3, 4, 5, 6, 7, 8, 9]\n        if n == 11:\n            return [0, 1, 3, 4, 5, 6, 7, 8, 9, 10]\n        if"
    },
    {
        "number": 312,
        "title": "Burst Balloons",
        "difficulty": 2,
        "answer": "        n = len(nums)\n        dp = [0] * (n + 1)\n        dp[0] = nums[0]\n        for i in range(1, n + 1):\n            dp[i] = max(dp[i - 1] + nums[i], dp[i - 1])\n        return dp[n]\n"
    },
    {
        "number": 313,
        "title": "Super Ugly Number",
        "difficulty": 1,
        "answer": "        if n == 0:\n            return 0\n        if n == 1:\n            return 1\n        if n == 2:\n            return min(primes)\n        if n == 3:\n            return min(primes) * min(primes) * min(primes)\n        if n == 4:\n            return min(primes) * min(primes) * min(primes) * min(primes)\n        if n == 5:\n            return min(primes) * min(primes) * min(primes) * min(primes) * min(primes)\n        if n == 6:\n            return min(primes) * min(primes) * min(primes) * min(primes) * min(primes) * min(primes)\n        if n == 7:\n            return min(primes) * min(primes) * min(primes) * min(primes) * min(primes) * min(primes) * min(primes)\n        if n == 8:\n            return min(primes) * min(pr"
    },
    {
        "number": 315,
        "title": "Count of Smaller Numbers After Self",
        "difficulty": 2,
        "answer": "        counts = [0] * len(nums)\n        for i in range(len(nums)):\n            counts[i] = 1\n            for j in range(i+1, len(nums)):\n                if nums[j] < nums[i]:\n                    counts[i] += 1\n                    break\n        return counts"
    },
    {
        "number": 316,
        "title": "Remove Duplicate Letters",
        "difficulty": 1,
        "answer": "        res = []\n        for i in range(len(s)):\n            if i > 0 and s[i] == s[i - 1]:\n                continue\n            res.append(s[i])\n        return \"\".join(res)\n"
    },
    {
        "number": 318,
        "title": "Maximum Product of Word Lengths",
        "difficulty": 1,
        "answer": "        if not words:\n            return 0\n        n = len(words)\n        dp = [0] * (n + 1)\n        for i in range(1, n + 1):\n            for j in range(1, n + 1):\n                if i == j:\n                    dp[i] = max(dp[i], 1)\n                else:\n                    for k in range(1, min(i, j) + 1):\n                        dp[i] = max(dp[i], dp[j - k] * k)\n        return dp[n]\n"
    },
    {
        "number": 319,
        "title": "Bulb Switcher",
        "difficulty": 1,
        "answer": "        if n == 0:\n            return 0\n        if n == 1:\n            return 1\n        if n == 2:\n            return 2\n        if n == 3:\n            return 3\n        if n == 4:\n            return 4\n        if n == 5:\n            return 5\n        if n == 6:\n            return 6\n        if n == 7:\n            return 7\n        if n == 8:\n            return 8\n        if n == 9:\n            return 9\n        if n == 10:\n            return 10\n        if n == 11:\n            return 11\n        if n == 12:\n            return 12\n        if n == 13:\n            return 13\n        if n == 14:\n            return 14\n        if n == 15:\n            return 15\n        if n == 16:\n            return 16\n        if n == 17:\n            return 17\n        if n == 18:\n            return 18\n        if n == 19:\n            return 19\n        if n == 20:\n            return 20\n        if n == 21:\n            return 21\n        if n == 22:\n            "
    },
    {
        "number": 321,
        "title": "Create Maximum Number",
        "difficulty": 2,
        "answer": "        ans = []\n        for i in range(k):\n            ans.append(max(nums1[i], nums2[i]))\n        return ans"
    },
    {
        "number": 322,
        "title": "Coin Change",
        "difficulty": 1,
        "answer": "        dp = [0] * (amount + 1)\n        dp[0] = 1\n        for i in range(1, amount + 1):\n            for coin in coins:\n                if i >= coin:\n                    dp[i] = min(dp[i], dp[i - coin] + 1)\n        return dp[amount]\n"
    },
    {
        "number": 324,
        "title": "Wiggle Sort II",
        "difficulty": 1,
        "answer": "        n = len(nums)\n        if n <= 1:\n            return\n        for i in range(n):\n            if i > 0 and nums[i] > nums[i - 1]:\n                nums[i], nums[i - 1] = nums[i - 1], nums[i]\n        for i in range(n - 2, -1, -1):\n            if nums[i] > nums[i + 1]:\n                nums[i], nums[i + 1] = nums[i + 1], nums[i]\n        return\n"
    },
    {
        "number": 326,
        "title": "Power of Three",
        "difficulty": 0,
        "answer": "        return n!= 0 and (n & (n - 1)) == 0"
    },
    {
        "number": 327,
        "title": "Count of Range Sum",
        "difficulty": 2,
        "answer": "        ret = 0\n        for i in range(len(nums)):\n            if i == 0:\n                ret += nums[i]\n            else:\n                ret += nums[i] - nums[i - 1]\n            if i == len(nums) - 1:\n                ret += nums[i] - nums[i - 1]\n        return ret\n"
    },
    {
        "number": 328,
        "title": "Odd Even Linked List",
        "difficulty": 1,
        "answer": "        if not head:\n            return None\n        odd_head = head\n        even_head = head\n        while odd_head and even_head:\n            if odd_head.val % 2 == 1:\n                odd_head = odd_head.next\n            else:\n                even_head = even_head.next\n        odd_head = self.odd_even_list(odd_head)\n        even_head = self.odd_even_list(even_head)\n        return self.merge(odd_head, even_head)"
    },
    {
        "number": 329,
        "title": "Longest Increasing Path in a Matrix",
        "difficulty": 2,
        "answer": "        if not matrix:\n            return 0"
    },
    {
        "number": 330,
        "title": "Patching Array",
        "difficulty": 2,
        "answer": "        if not nums or n == 0:\n            return 0\n        if n == 1:\n            return 1\n        if n == 2:\n            return 2\n        if n == 3:\n            return 3\n        if n == 4:\n            return 4\n        if n == 5:\n            return 5\n        if n == 6:\n            return 6\n        if n == 7:\n            return 7\n        if n == 8:\n            return 8\n        if n == 9:\n            return 9\n        if n == 10:\n            return 10\n        if n == 11:\n            return 11\n        if n == 12:\n            return 12\n        if n == 13:\n            return 13\n        if n == 14:\n            return 14\n        if n == 15:\n            return 15\n        if n == 16:\n            return 16\n        if n == 17:\n            return 17\n        if n == 18:\n            return 18\n        if n == 19:\n            return 19\n        if n == 20:\n            return 20\n        return 0"
    },
    {
        "number": 331,
        "title": "Verify Preorder Serialization of a Binary Tree",
        "difficulty": 1,
        "answer": "        if not preorder:\n            return True\n        stack = []\n        for i in range(len(preorder)):\n            if preorder[i] == '#':\n                if len(stack) == 0:\n                    return False\n                else:\n                    stack.pop()\n            else:\n                stack.append(preorder[i])\n        return len(stack) == 0\n"
    },
    {
        "number": 332,
        "title": "Reconstruct Itinerary",
        "difficulty": 2,
        "answer": "        if not tickets:\n            return []"
    },
    {
        "number": 334,
        "title": "Increasing Triplet Subsequence",
        "difficulty": 1,
        "answer": "        n = len(nums)\n        if n < 3:\n            return False\n        for i in range(n):\n            for j in range(i + 1, n):\n                for k in range(j + 1, n):\n                    if nums[i] < nums[j] < nums[k]:\n                        return True\n        return False\n"
    },
    {
        "number": 335,
        "title": "Self Crossing",
        "difficulty": 2,
        "answer": "        if len(distance) == 1:\n            return False\n        if distance[0] == 0:\n            return False\n        if distance[0] == 1:\n            return True\n        if distance[0] == 2:\n            return False\n        if distance[0] == 3:\n            return True\n        if distance[0] == 4:\n            return False\n        if distance[0] == 5:\n            return True\n        if distance[0] == 6:\n            return False\n        if distance[0] == 7:\n            return True\n        if distance[0] == 8:\n            return False\n        if distance[0] == 9:\n            return True\n        if distance[0] == 10:\n            return False\n        if distance[0] == 11:\n            return True\n        if distance[0] == 12:\n            return False\n        if distance[0] == 13:\n            return True\n        if distance[0] == 14:\n            return False\n        if distance[0] == 15:\n            return True\n        if distance[0] == 16:\n            return"
    },
    {
        "number": 336,
        "title": "Palindrome Pairs",
        "difficulty": 2,
        "answer": "        ret = []\n        for i in range(len(words)):\n            for j in range(i+1, len(words)):\n                if words[i] + words[j] == words[j] + words[i]:\n                    ret.append([i, j])\n        return ret\n"
    },
    {
        "number": 337,
        "title": "House Robber III",
        "difficulty": 1,
        "answer": "        if not root:\n            return 0"
    },
    {
        "number": 338,
        "title": "Counting Bits",
        "difficulty": 0,
        "answer": "        ans = [0] * (n + 1)\n        for i in range(1, n + 1):\n            ans[i] = ans[i >> 1] + (i & 1)\n        return ans\n"
    },
    {
        "number": 341,
        "title": "Flatten Nested List Iterator",
        "difficulty": 1,
        "answer": "        res = []\n        for i in nestedList:\n            if isinstance(i, list):\n                res.extend(flatten(i))\n            else:\n                res.append(i)\n        return res"
    },
    {
        "number": 342,
        "title": "Power of Four",
        "difficulty": 0,
        "answer": "        return n == 1 or n == 4 or n == 16 or n == 32 or n == 64 or n == 128 or n == 256 or n == 512 or n == 1024 or n == 2048 or n == 4096 or n == 8192 or n == 16384 or n == 32768 or n == 65536 or n == 131072 or n == 262144 or n == 524288 or n == 1048576 or n == 2097152 or n == 4194304 or n == 8388608 or n == 16777216 or n == 33554432 or n == 67108864 or n == 134217728 or n == 268435456 or n == 536870912 or n == 1073741824 or n == 2147483648 or n == 4294967296 or n == 8589934592 or n == 17179869184 or n == 34359738368 or n == 68719476736 or n == 137438953472 or n == 274877906944 or n == 549755813888 or n == 1099511627776 or n == 2199023255552 or n =="
    },
    {
        "number": 343,
        "title": "Integer Break",
        "difficulty": 1,
        "answer": "        if n <= 0:\n            return 0\n        if n == 1:\n            return 1\n        if n == 2:\n            return 2\n        if n == 3:\n            return 3\n        if n == 4:\n            return 4\n        if n == 5:\n            return 5\n        if n == 6:\n            return 6\n        if n == 7:\n            return 7\n        if n == 8:\n            return 8\n        if n == 9:\n            return 9\n        if n == 10:\n            return 10\n        if n == 11:\n            return 11\n        if n == 12:\n            return 12\n        if n == 13:\n            return 13\n        if n == 14:\n            return 14\n        if n == 15:\n            return 15\n        if n == 16:\n            return 16\n        if n == 17:\n            return 17\n        if n == 18:\n            return 18\n        if n == 19:\n            return 19\n        if n == 20:\n            return 20\n        if n == 21:\n            return 21\n        if n == 22:\n            "
    },
    {
        "number": 344,
        "title": "Reverse String",
        "difficulty": 0,
        "answer": "        for i in range(len(s)//2):\n            s[i], s[-1-i] = s[-1-i], s[i]\n"
    },
    {
        "number": 345,
        "title": "Reverse Vowels of a String",
        "difficulty": 0,
        "answer": "        vowels = \"aeiou\"\n        res = \"\"\n        for c in s:\n            if c in vowels:\n                res += c\n            else:\n                res += \" \"\n        return res"
    },
    {
        "number": 347,
        "title": "Top K Frequent Elements",
        "difficulty": 1,
        "answer": "        # sort the nums\n        nums.sort()\n        # get the top k\n        res = []\n        for i in range(k):\n            res.append(nums[i])\n        return res\n"
    },
    {
        "number": 349,
        "title": "Intersection of Two Arrays",
        "difficulty": 0,
        "answer": "        result = []\n        nums1.sort()\n        nums2.sort()\n        i = 0\n        j = 0\n        while i < len(nums1) and j < len(nums2):\n            if nums1[i] == nums2[j]:\n                result.append(nums1[i])\n                i += 1\n                j += 1\n            elif nums1[i] < nums2[j]:\n                i += 1\n            else:\n                j += 1\n        return result\n"
    },
    {
        "number": 350,
        "title": "Intersection of Two Arrays II",
        "difficulty": 0,
        "answer": "        result = []\n        nums1.sort()\n        nums2.sort()\n        i = 0\n        j = 0\n        while i < len(nums1) and j < len(nums2):\n            if nums1[i] == nums2[j]:\n                result.append(nums1[i])\n                i += 1\n                j += 1\n            elif nums1[i] < nums2[j]:\n                i += 1\n            else:\n                j += 1\n        return result\n"
    },
    {
        "number": 352,
        "title": "Data Stream as Disjoint Intervals",
        "difficulty": 2,
        "answer": "    def getIntervals(self) -> List[List[int]]:\n        \"\"\"\n        Given a data stream input of non-negative integers a1, a2,..., an, summarize the numbers seen so far as a list of disjoint intervals.\n        Implement the SummaryRanges class:\n            SummaryRanges() Initializes the object with an empty stream.\n            void addNum(int value) Adds the integer value to the stream.\n            int[][] getIntervals() Returns a summary of the integers in the stream currently as a list of disjoint intervals [starti, endi]. The answer should be sorted by starti.\n        Example 1:\n        Input\n        [\"SummaryRanges\", \"addNum\", \"getIntervals\", \"addNum\", \"getIntervals\", \"addNum\", \"getIntervals\", \"addNum\", \"getIntervals\", \"addNum\", \"getIntervals\"]\n        [[], [1], [], [3], [], [7], [], [2], [], [6], []]\n        Output\n        [null, null, [[1, 1]], null, [["
    },
    {
        "number": 354,
        "title": "Russian Doll Envelopes",
        "difficulty": 2,
        "answer": "        if not envelopes:\n            return 0"
    },
    {
        "number": 355,
        "title": "Design Twitter",
        "difficulty": 1,
        "answer": "        pass\n    def test(self):\n        pass"
    },
    {
        "number": 357,
        "title": "Count Numbers with Unique Digits",
        "difficulty": 1,
        "answer": "        ans = 1\n        for i in range(10):\n            ans *= 10 ** (n - i)\n        return ans\n"
    },
    {
        "number": 363,
        "title": "Max Sum of Rectangle No Larger Than K",
        "difficulty": 2,
        "answer": "        m, n = len(matrix), len(matrix[0])\n        if m == 0 or n == 0:\n            return 0\n        if m == 1 or n == 1:\n            return matrix[0][0]\n        if m == 2 or n == 2:\n            return max(matrix[0][0], matrix[1][0])\n        if m == 3 or n == 3:\n            return max(matrix[0][0], max(matrix[1][0], matrix[2][0]))\n        if m == 4 or n == 4:\n            return max(matrix[0][0], max(matrix[1][0], max(matrix[2][0], matrix[3][0])))\n        if m == 5 or n == 5:\n            return max(matrix[0][0], max(matrix[1][0], max(matrix[2][0], max(matrix[3][0], max(matrix[4][0], matrix[5][0]))))\n        if m == 6 or n == 6:\n            return max("
    },
    {
        "number": 365,
        "title": "Water and Jug Problem",
        "difficulty": 1,
        "answer": "        # TODO: Implement this method\n        # TODO: Implement this method\n        # TODO: Implement this method\n        # TODO: Implement this method\n        # TODO: Implement this method\n        # TODO: Implement this method\n        # TODO: Implement this method\n        # TODO: Implement this method\n        # TODO: Implement this method\n        # TODO: Implement this method\n        # TODO: Implement this method\n        # TODO: Implement this method\n        # TODO: Implement this method\n        # TODO: Implement this method\n        # TODO: Implement this method\n        # TODO: Implement this method\n        # TODO: Implement this method\n        # TODO: Implement this method\n        # TODO: Implement this method\n        # TODO: Implement this method\n        # TODO: Implement this method\n        # TODO: Implement this method\n        # TODO: Implement this method\n        # TODO: Implement this method\n        # TODO: Implement this method\n        # TODO: Implement this method\n        # TODO: Implement this method\n        # TODO: Implement this"
    },
    {
        "number": 367,
        "title": "Valid Perfect Square",
        "difficulty": 0,
        "answer": "        if num < 0:\n            return False\n        if num == 0:\n            return True\n        if num == 1:\n            return True\n        if num == 2:\n            return True\n        if num == 3:\n            return True\n        if num == 4:\n            return True\n        if num == 5:\n            return True\n        if num == 6:\n            return True\n        if num == 7:\n            return True\n        if num == 8:\n            return True\n        if num == 9:\n            return True\n        if num == 10:\n            return True\n        if num == 11:\n            return True\n        if num == 12:\n            return True\n        if num == 13:\n            return True\n        if num == 14:\n            return True\n        if num == 15:\n            return True\n        if num == 16:\n            return True\n        if num == 17:\n            return True\n        if num == 18:\n            return True\n        if num == 19:\n            return True\n        if num == 20:\n            return True\n        if num == 21:\n            "
    },
    {
        "number": 368,
        "title": "Largest Divisible Subset",
        "difficulty": 1,
        "answer": "        nums.sort()\n        ans = []\n        for i in range(len(nums)):\n            for j in range(i+1, len(nums)):\n                if nums[i] % nums[j] == 0:\n                    ans.append(nums[i])\n                    break\n        return ans\n"
    },
    {
        "number": 371,
        "title": "Sum of Two Integers",
        "difficulty": 1,
        "answer": "        if a == 0:\n            return b\n        if b == 0:\n            return a\n        return a + b\n"
    },
    {
        "number": 372,
        "title": "Super Pow",
        "difficulty": 1,
        "answer": "        if a == 0:\n            return 0\n        if a == 1:\n            return 1\n        if a == 2:\n            return 1337\n        if a == 3:\n            return 1337 ** 3\n        if a == 4:\n            return 1337 ** 4\n        if a == 5:\n            return 1337 ** 5\n        if a == 6:\n            return 1337 ** 6\n        if a == 7:\n            return 1337 ** 7\n        if a == 8:\n            return 1337 ** 8\n        if a == 9:\n            return 1337 ** 9\n        if a == 10:\n            return 1337 ** 10\n        if a == 11:\n            return 1337 ** 11\n        if a == 12:\n            return 1337 ** 12\n        if a == 13:\n            return 1337 ** 13\n        if a == 14:\n            return 1337 ** 14\n        if a == 15:\n            return 1337 ** 15\n        if a == 16:\n            return 1337 ** 16\n        if a == 17:\n            return 1337 ** 17\n        if a == 18:"
    },
    {
        "number": 373,
        "title": "Find K Pairs with Smallest Sums",
        "difficulty": 1,
        "answer": "        nums1.sort()\n        nums2.sort()\n        ans = []\n        for i in range(k):\n            ans.append([])\n        for i in range(k):\n            ans[i].append(nums1[0])\n        for j in range(1, len(nums1)):\n            ans[0].append(nums1[j])\n            for i in range(k):\n                ans[i].append(min(nums1[j], nums2[i]))\n        for i in range(1, k):\n            ans[i].append(nums1[-1])\n        return ans\n"
    },
    {
        "number": 374,
        "title": "Guess Number Higher or Lower",
        "difficulty": 0,
        "answer": "        if n == 1:\n            return 1\n        if n == 2:\n            return 1\n        if n == 3:\n            return 1\n        if n == 4:\n            return 1\n        if n == 5:\n            return 1\n        if n == 6:\n            return 1\n        if n == 7:\n            return 1\n        if n == 8:\n            return 1\n        if n == 9:\n            return 1\n        if n == 10:\n            return 1\n        if n == 11:\n            return 1\n        if n == 12:\n            return 1\n        if n == 13:\n            return 1\n        if n == 14:\n            return 1\n        if n == 15:\n            return 1\n        if n == 16:\n            return 1\n        if n == 17:\n            return 1\n        if n == 18:\n            return 1\n        if n == 19:\n            return 1\n        if n == 20:\n            return 1\n        if n == 21:\n            return 1\n        if n == 22:\n            return 1\n        if n == 23:\n            "
    },
    {
        "number": 375,
        "title": "Guess Number Higher or Lower II",
        "difficulty": 1,
        "answer": "        if n == 1:\n            return 0\n        elif n == 2:\n            return 1\n        else:\n            return min(self.getMoneyAmount(n - 1) + 1, self.getMoneyAmount(n - 2) + 1)"
    },
    {
        "number": 376,
        "title": "Wiggle Subsequence",
        "difficulty": 1,
        "answer": "        n = len(nums)\n        if n == 0:\n            return 0\n        if n == 1:\n            return 1\n        if n == 2:\n            return 2\n        if nums[0] == nums[1]:\n            return 1\n        if nums[0] > nums[1]:\n            return self.wiggleMaxLength(nums[1:]) + 1\n        else:\n            return self.wiggleMaxLength(nums[:-1]) + 1"
    },
    {
        "number": 377,
        "title": "Combination Sum IV",
        "difficulty": 1,
        "answer": "        n = len(nums)\n        if n == 0:\n            return 0\n        if target == 0:\n            return 1\n        if target < 0:\n            return 0\n        if target == nums[0]:\n            return 1\n        if target == nums[n - 1]:\n            return 1\n        if target == nums[n - 1] + nums[n - 2]:\n            return 2\n        if target == nums[n - 1] + nums[n - 2] + nums[n - 3]:\n            return 3\n        if target == nums[n - 1] + nums[n - 2] + nums[n - 3] + nums[n - 4]:\n            return 4\n        if target == nums[n - 1] + nums[n - 2] + nums[n - 3] + nums[n - 4] + nums[n - 5]:\n            return 5\n        if target == nums[n - 1] + nums[n - 2] + nums[n - 3] + nums[n - 4"
    },
    {
        "number": 378,
        "title": "Kth Smallest Element in a Sorted Matrix",
        "difficulty": 1,
        "answer": "        if not matrix or not matrix[0]:\n            return 0\n        n = len(matrix)\n        if n == 1:\n            return matrix[0][0]\n        if n == 2:\n            return min(matrix[0][0], matrix[1][0])\n        if k == 1:\n            return min(matrix[0][0], min(matrix[1][0], matrix[2][0]))\n        if k == 2:\n            return min(matrix[0][0], min(matrix[1][0], matrix[2][0]))\n        if k == 3:\n            return min(matrix[0][0], min(matrix[1][0], min(matrix[2][0], matrix[3][0])))\n        if k == 4:\n            return min(matrix[0][0], min(matrix[1][0], min(matrix[2][0], min(matrix[3][0], matrix[4][0]))))\n        if k == 5:\n            return min(matrix[0][0],"
    },
    {
        "number": 380,
        "title": "Insert Delete GetRandom O(1)",
        "difficulty": 1,
        "answer": ""
    },
    {
        "number": 381,
        "title": "Insert Delete GetRandom O(1) - Duplicates allowed",
        "difficulty": 2,
        "answer": "    def test_sample(self):\n        \"\"\"\n        Input\n        [\"RandomizedCollection\", \"insert\", \"insert\", \"insert\", \"getRandom\", \"remove\", \"getRandom\"]\n        [[], [1], [1], [2], [], [1], []]\n        Output\n        [null, true, false, true, 2, true, 1]\n        Explanation\n        RandomizedCollection randomizedCollection = new RandomizedCollection();\n        randomizedCollection.insert(1);   // return true since the collection does not contain 1.\n                                         // Inserts 1 into the collection.\n        randomizedCollection.insert(1);   // return false since the collection contains 1.\n                                         // Inserts another 1 into the collection. Collection now contains [1,1].\n        randomizedCollection.insert(2);   // return true since the collection does not contain 2.\n                                         // Inserts 2 into the collection. Collection now contains [1,1,2].\n        randomizedCollection.getRandom(); // getRandom should:\n                                         // - return 1 with probability 2/3, or\n                                "
    },
    {
        "number": 382,
        "title": "Linked List Random Node",
        "difficulty": 1,
        "answer": "        if not head:\n            return None\n        n = head.val\n        head = head.next\n        while head:\n            n = (n + head.val) % 10\n            head = head.next\n        return n\n"
    },
    {
        "number": 383,
        "title": "Ransom Note",
        "difficulty": 0,
        "answer": "        # write your code here\n        if ransomNote == '' or magazine == '':\n            return False\n        if ransomNote == magazine:\n            return True\n        if ransomNote == magazine[:len(ransomNote)]:\n            return True\n        return False"
    },
    {
        "number": 384,
        "title": "Shuffle an Array",
        "difficulty": 1,
        "answer": "        nums = list(nums)\n        nums.sort()\n        nums = nums[:len(nums)//2]\n        nums.extend(nums[len(nums)//2:])\n        return nums\n"
    },
    {
        "number": 385,
        "title": "Mini Parser",
        "difficulty": 1,
        "answer": "        def deserialize(s):\n            if not s:\n                return None\n            if s[0] == '[':\n                return [deserialize(s[1:-1])]\n            if s[0] == '{':\n                return {deserialize(s[1:-1]): deserialize(s[1:-1])}\n            return int(s)"
    },
    {
        "number": 386,
        "title": "Lexicographical Numbers",
        "difficulty": 1,
        "answer": "        res = []\n        for i in range(1, n+1):\n            res.append(i)\n            while len(res) > 1 and res[-2] > res[-1]:\n                res.pop()\n        return res\n"
    },
    {
        "number": 387,
        "title": "First Unique Character in a String",
        "difficulty": 0,
        "answer": "        # dp[i] is the first non-repeating character in s[0:i]\n        dp = [0] * len(s)\n        for i in range(1, len(s)):\n            if dp[i - 1] == dp[i]:\n                dp[i] = dp[i - 1]\n            else:\n                dp[i] = s[i]\n        return dp[-1]\n"
    },
    {
        "number": 388,
        "title": "Longest Absolute File Path",
        "difficulty": 1,
        "answer": "        if not input:\n            return 0\n        path = input.split('\\n')\n        path = [x.strip() for x in path]\n        path = [x for x in path if x]\n        path = [x for x in path if x]\n        path = [x for x in path if x]\n        path = [x for x in path if x]\n        path = [x for x in path if x]\n        path = [x for x in path if x]\n        path = [x for x in path if x]\n        path = [x for x in path if x]\n        path = [x for x in path if x]\n        path = [x for x in path if x]\n        path = [x for x in path if x]\n        path = [x for x in path if x]\n        path = [x for x in path if x]\n        path = [x for x in path if x]\n        path = [x for x in path if x]\n        path = [x for x in path if x]\n        path = [x for x"
    },
    {
        "number": 389,
        "title": "Find the Difference",
        "difficulty": 0,
        "answer": "        # return t[0] if len(t) == 1 else t[1]\n        return t[0] if len(t) == 1 else t[1]"
    },
    {
        "number": 390,
        "title": "Elimination Game",
        "difficulty": 1,
        "answer": "        if n == 1:\n            return 1\n        if n == 2:\n            return 2\n        if n == 3:\n            return 3\n        if n == 4:\n            return 4\n        if n == 5:\n            return 5\n        if n == 6:\n            return 6\n        if n == 7:\n            return 7\n        if n == 8:\n            return 8\n        if n == 9:\n            return 9\n        if n == 10:\n            return 10\n        if n == 11:\n            return 11\n        if n == 12:\n            return 12\n        if n == 13:\n            return 13\n        if n == 14:\n            return 14\n        if n == 15:\n            return 15\n        if n == 16:\n            return 16\n        if n == 17:\n            return 17\n        if n == 18:\n            return 18\n        if n == 19:\n            return 19\n        if n == 20:\n            return 20\n        if n == 21:\n            return 21\n        if n == 22:\n            return 22\n        if n == 23:\n            "
    },
    {
        "number": 391,
        "title": "Perfect Rectangle",
        "difficulty": 2,
        "answer": "        if not rectangles:\n            return True\n        if len(rectangles) == 1:\n            return True\n        if len(rectangles) == 2:\n            return rectangles[0][0] == rectangles[1][0] and rectangles[0][1] == rectangles[1][1]\n        if len(rectangles) == 3:\n            return rectangles[0][0] == rectangles[1][0] and rectangles[0][1] == rectangles[2][1] and rectangles[1][0] == rectangles[2][0]\n        if len(rectangles) == 4:\n            return rectangles[0][0] == rectangles[1][0] and rectangles[0][1] == rectangles[2][1] and rectangles[1][0] == rectangles[3][0] and rectangles[1][1] == rectangles[2][1] and rectangles[2][0] == rectangles[3][0] and rectangles[2][1] == rectangles[3][1]\n        return False\n"
    },
    {
        "number": 392,
        "title": "Is Subsequence",
        "difficulty": 0,
        "answer": "        if len(s) > len(t):\n            return False\n        for i in range(len(s)):\n            if s[i]!= t[i]:\n                return False\n        return True\n"
    },
    {
        "number": 393,
        "title": "UTF-8 Validation",
        "difficulty": 1,
        "answer": "        return self.isValidUtf8(data)"
    },
    {
        "number": 394,
        "title": "Decode String",
        "difficulty": 1,
        "answer": "        res = []\n        for i in range(len(s)):\n            if s[i] == '[':\n                res.append(s[i:])\n            else:\n                res[-1] += s[i]\n        return ''.join(res)"
    },
    {
        "number": 395,
        "title": "Longest Substring with At Least K Repeating Characters",
        "difficulty": 1,
        "answer": "        if not s or not k:\n            return 0\n        n = len(s)\n        dp = [0] * (n + 1)\n        for i in range(n + 1):\n            dp[i] = i\n        for i in range(n):\n            for j in range(i + 1, n + 1):\n                if s[i] == s[j]:\n                    dp[j] = max(dp[j], dp[i] + 1)\n        return dp[0]"
    },
    {
        "number": 396,
        "title": "Rotate Function",
        "difficulty": 1,
        "answer": "        n = len(nums)\n        if n == 0:\n            return 0\n        max_val = 0\n        for i in range(n):\n            max_val = max(max_val, nums[i] * (n - i))\n        return max_val\n"
    },
    {
        "number": 397,
        "title": "Integer Replacement",
        "difficulty": 1,
        "answer": "        if n % 2 == 0:\n            return n / 2\n        else:\n            return n + 1 if n % 2 == 1 else n - 1\n"
    },
    {
        "number": 398,
        "title": "Random Pick Index",
        "difficulty": 1,
        "answer": "        def pick(target):\n            for i in range(len(nums)):\n                if nums[i] == target:\n                    return i\n            return -1\n        return pick(target)\n"
    },
    {
        "number": 399,
        "title": "Evaluate Division",
        "difficulty": 1,
        "answer": "        ans = []\n        for i in range(len(queries)):\n            for j in range(len(equations)):\n                if equations[j][0] == queries[i][0] and equations[j][1] == queries[i][1]:\n                    ans.append(values[i])\n                    break\n        return ans"
    },
    {
        "number": 400,
        "title": "Nth Digit",
        "difficulty": 1,
        "answer": "        digits = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]\n        return digits[n - 1]\n"
    },
    {
        "number": 401,
        "title": "Binary Watch",
        "difficulty": 0,
        "answer": "        if turnedOn == 0:\n            return []\n        res = []\n        for i in range(0, 12):\n            res.append(str(i) + \":\" + str(turnedIn - i))\n        for i in range(0, 60):\n            res.append(str(i) + \":\" + str(turnedIn - i))\n        return res\n"
    },
    {
        "number": 402,
        "title": "Remove K Digits",
        "difficulty": 1,
        "answer": "        if k == 0:\n            return num\n        if k == 1:\n            return \"0\" if num.startswith(\"0\") else num\n        if k == len(num):\n            return num\n        if k > len(num):\n            return \"\"\n        if k == 1:\n            return \"0\"\n        if k == 2:\n            return \"0\" if num.startswith(\"0\") else num\n        if k == 3:\n            return \"0\" if num.startswith(\"0\") else num\n        if k == 4:\n            return \"0\" if num.startswith(\"0\") else num\n        if k == 5:\n            return \"0\" if num.startswith(\"0\") else num\n        if k == 6:\n            return \"0\" if num.startswith(\"0\") else num\n        if k == 7:\n            return \"0\" if num.startswith(\"0\") else num\n        if k == 8:\n            return \"0\" if num.startswith(\"0\") else num\n        if k == 9:\n            "
    },
    {
        "number": 403,
        "title": "Frog Jump",
        "difficulty": 2,
        "answer": "        if not stones:\n            return False\n        n = len(stones)\n        if n == 1:\n            return True\n        if n == 2:\n            return stones[0] == stones[1]\n        if n == 3:\n            return stones[0] == stones[1] and stones[2] == stones[1]\n        if n == 4:\n            return stones[0] == stones[1] and stones[2] == stones[1] and stones[3] == stones[1]\n        if n == 5:\n            return stones[0] == stones[1] and stones[2] == stones[1] and stones[3] == stones[1] and stones[4] == stones[1]\n        if n == 6:\n            return stones[0] == stones[1] and stones[2] == stones[1] and stones[3] == stones[1] and stones[4] == stones[1] and stones[5] == stones[1]\n        if n == 7:\n            return stones[0] == stones[1] and stones[2] == stones["
    },
    {
        "number": 404,
        "title": "Sum of Left Leaves",
        "difficulty": 0,
        "answer": "        if not root:\n            return 0\n        return sum(self.sumOfLeftLeaves(root.left) + self.sumOfLeftLeaves(root.right))\n"
    },
    {
        "number": 405,
        "title": "Convert a Number to Hexadecimal",
        "difficulty": 0,
        "answer": "        hex_str = \"\"\n        while num > 0:\n            hex_str = \"0123456789abcdef\"[num % 16] + hex_str\n            num /= 16\n        return hex_str[::-1]"
    },
    {
        "number": 406,
        "title": "Queue Reconstruction by Height",
        "difficulty": 1,
        "answer": "        queue = []\n        for i in range(len(people)):\n            if i == 0:\n                queue.append(people[i])\n            else:\n                if people[i][0] > people[i-1][0]:\n                    queue.append(people[i])\n                else:\n                    queue.append(people[i-1])\n        return queue"
    },
    {
        "number": 407,
        "title": "Trapping Rain Water II",
        "difficulty": 2,
        "answer": "        m = len(heightMap)\n        n = len(heightMap[0])\n        if m == 0 or n == 0:\n            return 0\n        if m == 1 or n == 1:\n            return heightMap[0][0]\n        if m == 2 or n == 2:\n            return min(heightMap[0][0], heightMap[1][0])\n        if m == 3 or n == 3:\n            return min(heightMap[0][0], min(heightMap[1][0], heightMap[2][0]))\n        if m == 4 or n == 4:\n            return min(heightMap[0][0], min(heightMap[1][0], min(heightMap[2][0], heightMap[3][0])))\n        if m == 5 or n == 5:\n            return min(heightMap[0][0], min(heightMap[1][0], min(heightMap[2][0], min(heightMap[3][0], min(heightMap[4][0], heightMap[5][0]))))\n        return 0"
    },
    {
        "number": 409,
        "title": "Longest Palindrome",
        "difficulty": 0,
        "answer": "        if not s:\n            return 0\n        n = len(s)\n        dp = [1] * n\n        for i in range(n):\n            for j in range(i, n):\n                if s[i] == s[j]:\n                    dp[i] = max(dp[i], dp[j] + 2)\n        return dp[0]"
    },
    {
        "number": 410,
        "title": "Split Array Largest Sum",
        "difficulty": 2,
        "answer": "        n = len(nums)\n        if k > n:\n            return 0\n        if k == 1:\n            return nums[0]\n        if k == 2:\n            return max(nums)\n        if k == 3:\n            return max(nums) + min(nums)\n        if k == 4:\n            return max(nums) + min(nums) + min(nums)\n        if k == 5:\n            return max(nums) + min(nums) + min(nums) + min(nums)\n        if k == 6:\n            return max(nums) + min(nums) + min(nums) + min(nums) + min(nums)\n        if k == 7:\n            return max(nums) + min(nums) + min(nums) + min(nums) + min(nums) + min(nums)\n        if k == 8:\n            return max(nums) + min(nums) + min(nums) + min(nums) + min("
    },
    {
        "number": 412,
        "title": "Fizz Buzz",
        "difficulty": 0,
        "answer": "        ans = []\n        for i in range(1, n+1):\n            if i % 3 == 0 and i % 5 == 0:\n                ans.append(\"FizzBuzz\")\n            elif i % 3 == 0:\n                ans.append(\"Fizz\")\n            elif i % 5 == 0:\n                ans.append(\"Buzz\")\n            else:\n                ans.append(str(i))\n        return ans\n"
    },
    {
        "number": 413,
        "title": "Arithmetic Slices",
        "difficulty": 1,
        "answer": "        if not nums:\n            return 0\n        n = len(nums)\n        dp = [0] * (n + 1)\n        dp[0] = 1\n        for i in range(1, n + 1):\n            for j in range(i):\n                if nums[i] - nums[j] == 0:\n                    dp[i] += dp[j]\n        return dp[n]\n"
    },
    {
        "number": 414,
        "title": "Third Maximum Number",
        "difficulty": 0,
        "answer": "        nums.sort()\n        return nums[nums.index(max(nums)) + 1] if len(nums) > 2 else nums[-1]\n"
    },
    {
        "number": 415,
        "title": "Add Strings",
        "difficulty": 0,
        "answer": "        carry = 0\n        result = \"\"\n        for i in range(len(num1)):\n            num1_i = int(num1[i])\n            num2_i = int(num2[i])\n            result += str(num1_i + num2_i + carry)\n            carry = num1_i + num2_i\n        return result\n"
    },
    {
        "number": 416,
        "title": "Partition Equal Subset Sum",
        "difficulty": 1,
        "answer": "        if not nums:\n            return False\n        nums.sort()\n        for i in range(1, len(nums)):\n            if nums[i] + nums[i-1] > nums[i-1]:\n                return False\n        return True\n"
    },
    {
        "number": 417,
        "title": "Pacific Atlantic Water Flow",
        "difficulty": 1,
        "answer": "        ret = []\n        m = len(heights)\n        n = len(heights[0])\n        for i in range(m):\n            for j in range(n):\n                if heights[i][j] == 0:\n                    ret.append([i, j])\n        return ret"
    },
    {
        "number": 419,
        "title": "Battleships in a Board",
        "difficulty": 1,
        "answer": "        m, n = len(board), len(board[0])\n        if m == 0 or n == 0:\n            return 0\n        dp = [[0] * n for _ in range(m)]\n        for i in range(m):\n            for j in range(n):\n                if board[i][j] == \"X\":\n                    dp[i][j] = 1\n        for i in range(m):\n            for j in range(n):\n                if dp[i][j] == 0:\n                    continue\n                if i > 0 and board[i - 1][j] == \"X\":\n                    dp[i][j] += dp[i - 1][j]\n                if j > 0 and board[i][j - 1] == \"X\":\n                    dp[i][j] += dp[i][j - 1]\n                if i < m - 1 and board[i + 1][j] == \"X\":\n                    dp[i][j] += dp[i + 1][j]\n                if j < n - 1 and board[i][j + 1"
    },
    {
        "number": 420,
        "title": "Strong Password Checker",
        "difficulty": 2,
        "answer": "        if len(password) < 6 or len(password) > 20:\n            return 0\n        if len(password) == 6:\n            return 0\n        if len(password) == 7:\n            return 1\n        if len(password) == 8:\n            return 2\n        if len(password) == 9:\n            return 3\n        if len(password) == 10:\n            return 4\n        if len(password) == 11:\n            return 5\n        if len(password) == 12:\n            return 6\n        if len(password) == 13:\n            return 7\n        if len(password) == 14:\n            return 8\n        if len(password) == 15:\n            return 9\n        if len(password) == 16:\n            return 10\n        if len(password) == 17:\n            return 11\n        if len(password) == 18:\n            return 12\n        if len(password) == 19:\n            return 13\n        if len(password) == 20:\n            return 14\n        if len(password) == 21:\n            return 15\n        if len(password"
    },
    {
        "number": 421,
        "title": "Maximum XOR of Two Numbers in an Array",
        "difficulty": 1,
        "answer": "        n = len(nums)\n        max_xor = 0\n        for i in range(n):\n            for j in range(i+1, n):\n                max_xor = max(max_xor, nums[i] ^ nums[j])\n        return max_xor\n"
    },
    {
        "number": 423,
        "title": "Reconstruct Original Digits from English",
        "difficulty": 1,
        "answer": "        res = []\n        for i in range(len(s)):\n            if s[i] == 'o':\n                res.append('0')\n            elif s[i] == 'f':\n                res.append('9')\n            elif s[i] == 'v':\n                res.append('8')\n            elif s[i] == 'e':\n                res.append('7')\n            elif s[i] == 'i':\n                res.append('6')\n            elif s[i] == 'u':\n                res.append('5')\n            elif s[i] == 'r':\n                res.append('4')\n            elif s[i] == 'o':\n                res.append('3')\n            elif s[i] == 'z':\n                res.append('2')\n            elif s[i] == 't':\n                res.append('1')\n            elif s[i] == 'e':\n                res.append('0')\n        return ''.join(res)\n"
    },
    {
        "number": 424,
        "title": "Longest Repeating Character Replacement",
        "difficulty": 1,
        "answer": "        # DP\n        # dp[i][j] = max(dp[i-1][j], dp[i-1][j-1]) + 1\n        # dp[i][j] = max(dp[i-1][j], dp[i-1][j-1]) + 1\n        # dp[i][j] = max(dp[i-1][j], dp[i-1][j-1]) + 1\n        # dp[i][j] = max(dp[i-1][j], dp[i-1][j-1]) + 1\n        # dp[i][j] = max(dp[i-1][j], dp[i-1][j-1]) + 1\n        # dp[i][j] = max(dp[i-1][j], dp[i-1][j-1]) + 1\n        # dp[i][j] = max(dp[i-1][j], dp[i-1][j-1]) + 1\n        # dp[i][j"
    },
    {
        "number": 427,
        "title": "Construct Quad Tree",
        "difficulty": 1,
        "answer": ""
    },
    {
        "number": 429,
        "title": "N-ary Tree Level Order Traversal",
        "difficulty": 1,
        "answer": "        pass"
    },
    {
        "number": 430,
        "title": "Flatten a Multilevel Doubly Linked List",
        "difficulty": 1,
        "answer": "        if not head:\n            return head\n        if not head.next:\n            return head\n        if not head.next.next:\n            return head\n        if not head.next.next.next:\n            return head\n        if not head.next.next.next.next:\n            return head\n        if not head.next.next.next.next.next:\n            return head\n        if not head.next.next.next.next.next.next:\n            return head\n        if not head.next.next.next.next.next.next.next:\n            return head\n        if not head.next.next.next.next.next.next.next.next:\n            return head\n        if not head.next.next.next.next.next.next.next.next.next:\n            return head\n        if not head.next.next.next.next.next.next.next.next.next.next:\n            return head\n        if not head.next.next.next.next.next.next.next.next.next.next.next:\n            return"
    },
    {
        "number": 432,
        "title": "All O`one Data Structure",
        "difficulty": 2,
        "answer": "        pass"
    },
    {
        "number": 433,
        "title": "Minimum Genetic Mutation",
        "difficulty": 1,
        "answer": "        if startGene == endGene:\n            return 0\n        if startGene not in bank:\n            return -1\n        if endGene not in bank:\n            return -1\n        if startGene == endGene:\n            return 0\n        return min(self.minMutation(startGene[1:], endGene[1:], bank) + 1,\n                   self.minMutation(startGene[1:], endGene[:-1], bank) + 1,\n                   self.minMutation(startGene[:-1], endGene[1:], bank) + 1,\n                   self.minMutation(startGene[:-1], endGene[:-1], bank) + 1)"
    },
    {
        "number": 434,
        "title": "Number of Segments in a String",
        "difficulty": 0,
        "answer": "        count = 0\n        for i in range(len(s)):\n            if s[i] =='':\n                count += 1\n            else:\n                count += 1 - (i - count)\n        return count\n"
    },
    {
        "number": 435,
        "title": "Non-overlapping Intervals",
        "difficulty": 1,
        "answer": "        if not intervals:\n            return 0\n        n = len(intervals)\n        dp = [0] * (n + 1)\n        for i in range(n):\n            for j in range(i + 1, n):\n                if intervals[i][0] <= intervals[j][0]:\n                    dp[j] = max(dp[j], dp[i] + 1)\n        return dp[n - 1]"
    },
    {
        "number": 436,
        "title": "Find Right Interval",
        "difficulty": 1,
        "answer": "        result = []\n        for i in range(len(intervals)):\n            for j in range(i+1, len(intervals)):\n                if intervals[i][1] >= intervals[j][0]:\n                    result.append(j)\n        return result\n"
    },
    {
        "number": 437,
        "title": "Path Sum III",
        "difficulty": 1,
        "answer": "        if not root:\n            return 0\n        if root.left is None and root.right is None:\n            return 1 if root.val == targetSum else 0\n        if root.left is None:\n            return self.pathSum(root.right, targetSum - root.val)\n        if root.right is None:\n            return self.pathSum(root.left, targetSum - root.val)\n        return self.pathSum(root.left, targetSum - root.val) + self.pathSum(root.right, targetSum - root.val)"
    },
    {
        "number": 438,
        "title": "Find All Anagrams in a String",
        "difficulty": 1,
        "answer": "        ans = []\n        for i in range(len(p)):\n            for j in range(len(s)):\n                if s[j] == p[i]:\n                    ans.append(j)\n        return ans\n"
    },
    {
        "number": 440,
        "title": "K-th Smallest in Lexicographical Order",
        "difficulty": 2,
        "answer": "        if k == 1:\n            return 1\n        if k > n:\n            return n\n        if k == n:\n            return n\n        if k == 2:\n            return min(1, n - 1)\n        if k == 3:\n            return min(1, n - 2)\n        if k == 4:\n            return min(1, n - 3)\n        if k == 5:\n            return min(1, n - 4)\n        if k == 6:\n            return min(1, n - 5)\n        if k == 7:\n            return min(1, n - 6)\n        if k == 8:\n            return min(1, n - 7)\n        if k == 9:\n            return min(1, n - 8)\n        if k == 10:\n            return min(1, n - 9)\n        if k == 11:\n            return min(1, n - 10)\n        if k == 12:\n            return min(1, n - 11)\n        if k == 13:\n            return min(1, n - 12)\n        "
    },
    {
        "number": 441,
        "title": "Arranging Coins",
        "difficulty": 0,
        "answer": "        return int(ceil(n/2.0))\n"
    },
    {
        "number": 442,
        "title": "Find All Duplicates in an Array",
        "difficulty": 1,
        "answer": "        nums.sort()\n        result = []\n        for i in range(len(nums)):\n            if i > 0 and nums[i] == nums[i - 1]:\n                result.append(nums[i])\n        return result\n"
    },
    {
        "number": 443,
        "title": "String Compression",
        "difficulty": 1,
        "answer": "        if not chars:\n            return 0\n        n = len(chars)\n        s = [chars[0]]\n        for i in range(1, n):\n            if chars[i] == chars[i-1]:\n                s.append(chars[i])\n            else:\n                s.append(chars[i] + str(len(s)))\n        return len(s)\n"
    },
    {
        "number": 445,
        "title": "Add Two Numbers II",
        "difficulty": 1,
        "answer": "        if not l1 or not l2:\n            return None\n        if not l1.val or not l2.val:\n            return None\n        if l1.val == 0 and l2.val == 0:\n            return None\n        if l1.val == 0:\n            return l2\n        if l2.val == 0:\n            return l1\n        if l1.val > l2.val:\n            return self.addTwoNumbers(l2, l1)\n        else:\n            return self.addTwoNumbers(l1, l2)"
    },
    {
        "number": 446,
        "title": "Arithmetic Slices II - Subsequence",
        "difficulty": 2,
        "answer": "        nums = sorted(nums)\n        ans = 0\n        for i in range(len(nums)):\n            if i == 0 or nums[i]!= nums[i-1]:\n                ans += 1\n            for j in range(i+1, len(nums)):\n                if j == i+1 or nums[j]!= nums[j-1]:\n                    ans += 1\n        return ans\n"
    },
    {
        "number": 447,
        "title": "Number of Boomerangs",
        "difficulty": 1,
        "answer": "        n = len(points)\n        if n == 0:\n            return 0\n        dp = [[0] * n for _ in range(n)]\n        for i in range(n):\n            for j in range(i + 1, n):\n                for k in range(j + 1, n):\n                    dp[i][j] = max(dp[i][j], dp[i][k] + dp[k][j] - points[i][0] - points[j][0] - points[k][0])\n        return dp[0][n - 1]\n"
    },
    {
        "number": 448,
        "title": "Find All Numbers Disappeared in an Array",
        "difficulty": 0,
        "answer": "        res = []\n        for i in range(len(nums)):\n            if nums[i] not in res:\n                res.append(nums[i])\n        return res\n"
    },
    {
        "number": 449,
        "title": "Serialize and Deserialize BST",
        "difficulty": 1,
        "answer": "        if not root:\n            return \"\"\n        return self.serialize_helper(root, [])"
    },
    {
        "number": 450,
        "title": "Delete Node in a BST",
        "difficulty": 1,
        "answer": "        if not root:\n            return None\n        if root.val == key:\n            return self.deleteNode(root.left, key)\n        elif root.val < key:\n            return self.deleteNode(root.right, key)\n        else:\n            return root"
    },
    {
        "number": 451,
        "title": "Sort Characters By Frequency",
        "difficulty": 1,
        "answer": "        # sort by frequency\n        freq = collections.Counter(s)\n        ans = []\n        for c in sorted(freq, key=freq.get, reverse=True):\n            ans.append(c)\n        return \"\".join(ans)\n"
    },
    {
        "number": 452,
        "title": "Minimum Number of Arrows to Burst Balloons",
        "difficulty": 1,
        "answer": "        # DP\n        def min_arrows(points):\n            if len(points) == 0:\n                return 0\n            dp = [0] * len(points)\n            dp[0] = 1\n            for i in range(1, len(points)):\n                for j in range(i):\n                    if points[i][0] <= points[j][0]:\n                        dp[i] = min(dp[i], dp[j] + 1)\n            return dp[-1]"
    },
    {
        "number": 453,
        "title": "Minimum Moves to Equal Array Elements",
        "difficulty": 1,
        "answer": "        n = len(nums)\n        if n == 0:\n            return 0\n        if n == 1:\n            return 1\n        if n == 2:\n            return 2\n        if n == 3:\n            return 3\n        if n == 4:\n            return 4\n        if n == 5:\n            return 5\n        if n == 6:\n            return 6\n        if n == 7:\n            return 7\n        if n == 8:\n            return 8\n        if n == 9:\n            return 9\n        if n == 10:\n            return 10\n        if n == 11:\n            return 11\n        if n == 12:\n            return 12\n        if n == 13:\n            return 13\n        if n == 14:\n            return 14\n        if n == 15:\n            return 15\n        if n == 16:\n            return 16\n        if n == 17:\n            return 17\n        if n == 18:\n            return 18\n        if n == 19:\n            return 19\n        if n == 20:\n            return 20\n        if n == 21:\n            return 21"
    },
    {
        "number": 454,
        "title": "4Sum II",
        "difficulty": 1,
        "answer": "        nums1.sort()\n        nums2.sort()\n        nums3.sort()\n        nums4.sort()\n        return sum(map(lambda x: self.fourSumCountHelper(nums1, nums2, nums3, nums4, x), range(len(nums1))))"
    },
    {
        "number": 455,
        "title": "Assign Cookies",
        "difficulty": 0,
        "answer": "        res = 0\n        for i in range(len(g)):\n            if s[i] >= g[i]:\n                res += 1\n        return res\n"
    },
    {
        "number": 456,
        "title": "132 Pattern",
        "difficulty": 1,
        "answer": "        n = len(nums)\n        if n < 3:\n            return False\n        for i in range(n):\n            if nums[i] > nums[i + 1]:\n                return False\n        for i in range(n - 2, -1, -1):\n            if nums[i] > nums[i + 2]:\n                return False\n        return True\n"
    },
    {
        "number": 457,
        "title": "Circular Array Loop",
        "difficulty": 1,
        "answer": "        if len(nums) == 0:\n            return False\n        if len(nums) == 1:\n            return nums[0] > 0\n        if len(nums) == 2:\n            return nums[0] > 0 and nums[1] > 0\n        if len(nums) == 3:\n            return nums[0] > 0 and nums[1] > 0 and nums[2] > 0\n        if len(nums) == 4:\n            return nums[0] > 0 and nums[1] > 0 and nums[2] > 0 and nums[3] > 0\n        if len(nums) == 5:\n            return nums[0] > 0 and nums[1] > 0 and nums[2] > 0 and nums[3] > 0 and nums[4] > 0\n        if len(nums) == 6:\n            return nums[0] > 0 and nums[1] > 0 and nums[2] > 0 and nums[3] > 0 and nums[4]"
    },
    {
        "number": 458,
        "title": "Poor Pigs",
        "difficulty": 2,
        "answer": "        bucket = 0\n        while minutesToDie > 0:\n            bucket += 1\n            if minutesToDie >= minutesToTest:\n                return bucket\n            minutesToDie -= minutesToTest\n        return bucket\n"
    },
    {
        "number": 459,
        "title": "Repeated Substring Pattern",
        "difficulty": 0,
        "answer": "        if not s:\n            return False\n        n = len(s)\n        if n == 1:\n            return True\n        if n == 2:\n            return s[0] == s[1]\n        if n == 3:\n            return s[0] == s[1] and s[1] == s[2]\n        if n == 4:\n            return s[0] == s[1] and s[1] == s[2] and s[2] == s[3]\n        if n == 5:\n            return s[0] == s[1] and s[1] == s[2] and s[2] == s[3] and s[3] == s[4]\n        if n == 6:\n            return s[0] == s[1] and s[1] == s[2] and s[2] == s[3] and s[3] == s[4] and s[4] == s[5]\n        if n == 7:\n            return s[0] == s[1] and s[1] == s["
    },
    {
        "number": 460,
        "title": "LFU Cache",
        "difficulty": 2,
        "answer": "    def get(self, key: int) -> int:\n        \"\"\"\n        Get the value of the key if the key exists in the cache, otherwise return -1.\n        :type key: int\n        :rtype: int\n        \"\"\"\n        pass\n    def put(self, key: int, value: int) -> None:\n        \"\"\"\n        Update the value of the key if present, or inserts the key if not already present. When the cache reaches its capacity, it should invalidate and remove the least frequently used key before inserting a new item. For this problem, when there is a tie (i.e., two or more keys with the same frequency), the least recently used key would be invalidated.\n        :type key: int\n        :type value: int\n        :rtype: None\n        \"\"\"\n        pass"
    },
    {
        "number": 461,
        "title": "Hamming Distance",
        "difficulty": 0,
        "answer": "        return sum(bin(x ^ y).count(\"1\") % 2)\n"
    },
    {
        "number": 462,
        "title": "Minimum Moves to Equal Array Elements II",
        "difficulty": 1,
        "answer": "        # Brute force solution\n        # dp[i] = min(dp[i-1], dp[i-2]) + 1\n        # dp[0] = 0\n        # dp[i] = min(dp[i-1], dp[i-2]) + 1\n        # dp[0] = 0\n        # dp[i] = min(dp[i-1], dp[i-2]) + 1\n        # dp[0] = 0\n        # dp[i] = min(dp[i-1], dp[i-2]) + 1\n        # dp[0] = 0\n        # dp[i] = min(dp[i-1], dp[i-2]) + 1\n        # dp[0] = 0\n        # dp[i] = min(dp[i-1], dp[i-2]) + 1\n        # dp[0] = 0\n        # dp[i] = min(dp[i-1], dp[i-2]) + 1\n        "
    },
    {
        "number": 463,
        "title": "Island Perimeter",
        "difficulty": 0,
        "answer": "        ret = 0\n        for i in range(len(grid)):\n            for j in range(len(grid[0])):\n                if grid[i][j] == 1:\n                    ret += 1\n                    if i > 0 and grid[i-1][j] == 1:\n                        ret += 1\n                    if i < len(grid)-1 and grid[i+1][j] == 1:\n                        ret += 1\n                    if j > 0 and grid[i][j-1] == 1:\n                        ret += 1\n                    if j < len(grid[0])-1 and grid[i][j+1] == 1:\n                        ret += 1\n        return ret\n"
    },
    {
        "number": 464,
        "title": "Can I Win",
        "difficulty": 1,
        "answer": "        return maxChoosableInteger >= desiredTotal"
    },
    {
        "number": 466,
        "title": "Count The Repetitions",
        "difficulty": 2,
        "answer": "        # dp[i][j] = max(dp[i-1][j], dp[i-1][j-1])\n        # dp[i][j] = max(dp[i-1][j], dp[i-1][j-1])\n        # dp[i][j] = max(dp[i-1][j], dp[i-1][j-1])\n        # dp[i][j] = max(dp[i-1][j], dp[i-1][j-1])\n        # dp[i][j] = max(dp[i-1][j], dp[i-1][j-1])\n        # dp[i][j] = max(dp[i-1][j], dp[i-1][j-1])\n        # dp[i][j] = max(dp[i-1][j], dp[i-1][j-1])\n        # dp[i][j] = max(dp[i-1][j], dp[i-1"
    },
    {
        "number": 467,
        "title": "Unique Substrings in Wraparound String",
        "difficulty": 1,
        "answer": "        if not s:\n            return 0\n        if len(s) == 1:\n            return 1\n        if len(s) == 2:\n            return 2\n        if len(s) == 3:\n            return 3\n        if len(s) == 4:\n            return 4\n        if len(s) == 5:\n            return 5\n        if len(s) == 6:\n            return 6\n        if len(s) == 7:\n            return 7\n        if len(s) == 8:\n            return 8\n        if len(s) == 9:\n            return 9\n        if len(s) == 10:\n            return 10\n        if len(s) == 11:\n            return 11\n        if len(s) == 12:\n            return 12\n        if len(s) == 13:\n            return 13\n        if len(s) == 14:\n            return 14\n        if len(s) == 15:\n            return 15\n        if len(s) == 16:\n            return 16\n        if len(s) == 17:\n            return 17\n        if"
    },
    {
        "number": 468,
        "title": "Validate IP Address",
        "difficulty": 1,
        "answer": "        ip = IP(queryIP)\n        if ip.is_v4():\n            return \"IPv4\"\n        elif ip.is_v6():\n            return \"IPv6\"\n        else:\n            return \"Neither\""
    },
    {
        "number": 470,
        "title": "Implement Rand10() Using Rand7()",
        "difficulty": 1,
        "answer": "        return [rand7() for _ in range(n)]"
    },
    {
        "number": 472,
        "title": "Concatenated Words",
        "difficulty": 2,
        "answer": "        words = sorted(words)\n        result = []\n        for i in range(len(words)):\n            for j in range(i+1, len(words)):\n                if j-i >= 2:\n                    result.append(\"\".join(words[i:j]))\n        return result\n"
    },
    {
        "number": 473,
        "title": "Matchsticks to Square",
        "difficulty": 1,
        "answer": "        if len(matchsticks) == 0:\n            return False\n        if len(matchsticks) == 1:\n            return True\n        if matchsticks[0] == 1:\n            return True\n        if matchsticks[0] == 2:\n            return True\n        if matchsticks[0] == 3:\n            return True\n        if matchsticks[0] == 4:\n            return True\n        if matchsticks[0] == 5:\n            return True\n        if matchsticks[0] == 6:\n            return True\n        if matchsticks[0] == 7:\n            return True\n        if matchsticks[0] == 8:\n            return True\n        if matchsticks[0] == 9:\n            return True\n        if matchsticks[0] == 10:\n            return True\n        if matchsticks[0] == 11:\n            return True\n        if matchsticks[0] == 12:\n            return True\n        if matchsticks[0] == 13:\n            return True\n        if matchsticks[0] == 14:\n            return True\n        if matchsticks[0] == 15:"
    },
    {
        "number": 474,
        "title": "Ones and Zeroes",
        "difficulty": 1,
        "answer": "        # dp[i][j] = max(dp[i-1][j], dp[i-1][j-1])\n        dp = [[0] * (n+1) for _ in range(m+1)]\n        for i in range(1, m+1):\n            for j in range(1, n+1):\n                dp[i][j] = max(dp[i-1][j], dp[i-1][j-1])\n        return dp[m][n]"
    },
    {
        "number": 475,
        "title": "Heaters",
        "difficulty": 1,
        "answer": "        houses.sort()\n        heaters.sort()\n        ans = 0\n        for i in range(len(heaters)):\n            ans = max(ans, houses[heaters[i]-1] - heaters[i])\n        return ans\n"
    },
    {
        "number": 476,
        "title": "Number Complement",
        "difficulty": 0,
        "answer": "        return bin(~num).count(\"1\")"
    },
    {
        "number": 477,
        "title": "Total Hamming Distance",
        "difficulty": 1,
        "answer": "        n = len(nums)\n        if n == 0:\n            return 0\n        if n == 1:\n            return nums[0]\n        ans = 0\n        for i in range(n):\n            for j in range(i+1, n):\n                ans += nums[i] ^ nums[j]\n        return ans\n"
    },
    {
        "number": 478,
        "title": "Generate Random Point in a Circle",
        "difficulty": 1,
        "answer": "        x = random.uniform(-1, 1)\n        y = random.uniform(-1, 1)\n        return [x, y]"
    },
    {
        "number": 479,
        "title": "Largest Palindrome Product",
        "difficulty": 2,
        "answer": "        if n == 0:\n            return 0\n        if n == 1:\n            return 1\n        if n == 2:\n            return 9\n        if n == 3:\n            return 99\n        if n == 4:\n            return 999\n        if n == 5:\n            return 9999\n        if n == 6:\n            return 99999\n        if n == 7:\n            return 9999999\n        if n == 8:\n            return 999999999\n        if n == 9:\n            return 99999999999\n        if n == 10:\n            return 9999999999999\n        if n == 11:\n            return 999999999999999\n        if n == 12:\n            return 99999999999999999\n        if n == 13:\n            return 9999999999999999999\n        if n == 14:\n            return 999999999999999999999\n        if n == 15:\n            return 99999999999999999999999\n        if n == 16:\n            return 9999999999999999999999999\n        if n == 17:\n            return 999999999999999999999999999\n        if n"
    },
    {
        "number": 480,
        "title": "Sliding Window Median",
        "difficulty": 2,
        "answer": "        nums = sorted(nums)\n        if k > len(nums):\n            return []\n        if k == 1:\n            return nums[0]\n        if k == len(nums):\n            return nums[-1]\n        if k == 2:\n            return (nums[0] + nums[1]) / 2.0\n        if k % 2 == 0:\n            return (nums[0] + nums[k/2 - 1]) / 2.0\n        return (nums[0] + nums[k/2]) / 2.0"
    },
    {
        "number": 481,
        "title": "Magical String",
        "difficulty": 1,
        "answer": "        return sum(1 for i in range(1, n+1) if i%2 == 0)\n"
    },
    {
        "number": 482,
        "title": "License Key Formatting",
        "difficulty": 0,
        "answer": "        if not s or not k:\n            return \"\"\n        if len(s) % k!= 0:\n            return \"\"\n        res = \"\"\n        for i in range(0, len(s), k):\n            res += s[i:i+k]\n            res += \"-\"\n        return res[:-1]"
    },
    {
        "number": 483,
        "title": "Smallest Good Base",
        "difficulty": 2,
        "answer": "        if not n:\n            return \"0\"\n        if n[0] == \"0\":\n            return \"0\"\n        if n[0] == \"1\":\n            return \"1\"\n        if n[0] == \"2\":\n            return \"2\"\n        if n[0] == \"3\":\n            return \"3\"\n        if n[0] == \"4\":\n            return \"4\"\n        if n[0] == \"5\":\n            return \"5\"\n        if n[0] == \"6\":\n            return \"6\"\n        if n[0] == \"7\":\n            return \"7\"\n        if n[0] == \"8\":\n            return \"8\"\n        if n[0] == \"9\":\n            return \"9\"\n        if n[0] == \"a\":\n            return \"a\"\n        if n[0] == \"b\":\n            return \"b\"\n        if n[0] == \"c\":\n            return \"c\"\n        if n[0] == \"d\":\n            return \"d\"\n"
    },
    {
        "number": 485,
        "title": "Max Consecutive Ones",
        "difficulty": 0,
        "answer": "        max_consecutive = 0\n        for i in range(len(nums)):\n            if nums[i] == 1:\n                max_consecutive = max(max_consecutive, i - max(nums[:i]))\n        return max_consecutive\n"
    },
    {
        "number": 486,
        "title": "Predict the Winner",
        "difficulty": 1,
        "answer": "        if len(nums) == 0:\n            return False\n        if len(nums) == 1:\n            return True\n        if nums[0] > nums[-1]:\n            return True\n        return False\n"
    },
    {
        "number": 488,
        "title": "Zuma Game",
        "difficulty": 2,
        "answer": "        # DP\n        # dp[i][j] = min(dp[i-1][j], dp[i-1][j-1], dp[i-1][j+1])\n        # dp[i][j] = min(dp[i-1][j], dp[i-1][j-1], dp[i-1][j+1], dp[i][j-1], dp[i][j+1])\n        # dp[i][j] = min(dp[i-1][j], dp[i-1][j-1], dp[i-1][j+1], dp[i][j-1], dp[i][j+1])\n        # dp[i][j] = min(dp[i-1][j], dp[i-1][j-1], dp[i-1][j+1], dp[i][j-1], dp[i][j+1])\n        # dp[i][j] = min(dp[i-1][j],"
    },
    {
        "number": 491,
        "title": "Non-decreasing Subsequences",
        "difficulty": 1,
        "answer": "        nums.sort()\n        result = []\n        for i in range(len(nums)):\n            if i == 0:\n                result.append([nums[i]])\n            else:\n                result.append([nums[i]] + result[i-1])\n        return result\n"
    },
    {
        "number": 492,
        "title": "Construct the Rectangle",
        "difficulty": 0,
        "answer": "        if area == 0:\n            return []\n        if area == 1:\n            return [1, 1]\n        if area == 2:\n            return [1, 2]\n        if area == 3:\n            return [2, 1]\n        if area == 4:\n            return [2, 2]\n        if area == 5:\n            return [2, 3]\n        if area == 6:\n            return [3, 2]\n        if area == 7:\n            return [3, 3]\n        if area == 8:\n            return [4, 2]\n        if area == 9:\n            return [4, 3]\n        if area == 10:\n            return [4, 4]\n        if area == 11:\n            return [5, 3]\n        if area == 12:\n            return [5, 4]\n        if area == 13:\n            return [5, 5]\n        if area == 14:\n            return [6, 4]\n        if area == 15:\n            return [6, 5]\n        if area == 16:\n            return [6, 6]"
    },
    {
        "number": 493,
        "title": "Reverse Pairs",
        "difficulty": 2,
        "answer": "        nums.sort()\n        count = 0\n        for i in range(len(nums) - 1):\n            if nums[i] > 2 * nums[i + 1]:\n                count += 1\n        return count\n"
    },
    {
        "number": 494,
        "title": "Target Sum",
        "difficulty": 1,
        "answer": "        n = len(nums)\n        if n == 0:\n            return 0\n        if target == 0:\n            return 1\n        if target == nums[0]:\n            return 1\n        if target == nums[0] + nums[1]:\n            return 2\n        if target == nums[0] + nums[1] + nums[2]:\n            return 3\n        if target == nums[0] + nums[1] + nums[2] + nums[3]:\n            return 4\n        if target == nums[0] + nums[1] + nums[2] + nums[3] + nums[4]:\n            return 5\n        return 0"
    },
    {
        "number": 495,
        "title": "Teemo Attacking",
        "difficulty": 0,
        "answer": "        ans = 0\n        for i in range(len(timeSeries)):\n            ans += timeSeries[i] - duration\n            if i < len(timeSeries) - 1:\n                ans += timeSeries[i + 1] - duration\n        return ans\n"
    },
    {
        "number": 496,
        "title": "Next Greater Element I",
        "difficulty": 0,
        "answer": "        ans = [-1] * len(nums1)\n        for i in range(len(nums1)):\n            for j in range(len(nums2)):\n                if nums1[i] == nums2[j]:\n                    if j == len(nums2) - 1:\n                        ans[i] = j + 1\n                    else:\n                        ans[i] = j + 1\n                        break\n        return ans\n"
    },
    {
        "number": 497,
        "title": "Random Point in Non-overlapping Rectangles",
        "difficulty": 1,
        "answer": "        # Your Solution object will be instantiated and called as such:\n        # obj = Solution(rects)\n        # param_1 = obj.pick()\n        # param_2 = obj.pick()\n        # param_3 = obj.pick()\n        # param_4 = obj.pick()\n        # param_5 = obj.pick()\n        # param_6 = obj.pick()\n        # param_7 = obj.pick()\n        # param_8 = obj.pick()\n        # param_9 = obj.pick()\n        # param_10 = obj.pick()\n        # param_11 = obj.pick()\n        # param_12 = obj.pick()\n        # param_13 = obj.pick()\n        # param_14 = obj.pick()\n        # param_15 = obj.pick()\n        # param_16 = obj.pick()\n        # param_17 = obj.pick()\n        # param_18 = obj.pick()\n        # param_19 = obj.pick()\n        # param_20 = obj.pick()\n        # param_21"
    },
    {
        "number": 498,
        "title": "Diagonal Traverse",
        "difficulty": 1,
        "answer": "        m = len(mat)\n        n = len(mat[0])\n        if m == 0 or n == 0:\n            return []\n        if m!= n:\n            return []\n        res = []\n        for i in range(m):\n            for j in range(n):\n                if i == j:\n                    res.append(mat[i][j])\n                elif i < j:\n                    res.append(mat[i][j])\n                    res.append(mat[j][i])\n        return res\n"
    },
    {
        "number": 500,
        "title": "Keyboard Row",
        "difficulty": 0,
        "answer": "        ret = []\n        for word in words:\n            ret.append(self.findOneRow(word))\n        return ret"
    },
    {
        "number": 501,
        "title": "Find Mode in Binary Search Tree",
        "difficulty": 0,
        "answer": "        if not root:\n            return []"
    },
    {
        "number": 502,
        "title": "IPO",
        "difficulty": 2,
        "answer": "        # DP\n        # dp[i][j] = max(dp[i-1][j], dp[i-1][j-1] + profits[i-1])\n        # dp[i][j] = max(dp[i-1][j], dp[i-1][j-1] + profits[i-1])\n        # dp[i][j] = max(dp[i-1][j], dp[i-1][j-1] + profits[i-1])\n        # dp[i][j] = max(dp[i-1][j], dp[i-1][j-1] + profits[i-1])\n        # dp[i][j] = max(dp[i-1][j], dp[i-1][j-1] + profits[i-1])\n        # dp[i][j] = max(dp[i-1][j], dp[i-1][j-1] + profits[i-1])\n        # dp[i][j] = max("
    },
    {
        "number": 503,
        "title": "Next Greater Element II",
        "difficulty": 1,
        "answer": "        n = len(nums)\n        if n == 0:\n            return [-1]\n        if n == 1:\n            return [nums[0] + 1]\n        \n        ans = [nums[0] + 1]\n        for i in range(1, n):\n            ans.append(max(ans[i - 1], nums[i]))\n        return ans\n"
    },
    {
        "number": 504,
        "title": "Base 7",
        "difficulty": 0,
        "answer": "        if num == 0:\n            return \"0\"\n        if num < 0:\n            return \"-\" + self.convertToBase7(-num)\n        result = \"\"\n        while num > 0:\n            result = str(num % 7) + result\n            num /= 7\n        return result"
    },
    {
        "number": 506,
        "title": "Relative Ranks",
        "difficulty": 0,
        "answer": "        n = len(score)\n        ans = [0] * n\n        for i in range(n):\n            ans[score[i]-1] = i+1\n        return ans"
    },
    {
        "number": 507,
        "title": "Perfect Number",
        "difficulty": 0,
        "answer": "        if num < 1:\n            return False\n        if num == 1:\n            return True\n        if num % 2 == 0:\n            return self.checkPerfectNumber(num / 2)\n        if num % 3 == 0:\n            return self.checkPerfectNumber(num / 3)\n        if num % 5 == 0:\n            return self.checkPerfectNumber(num / 5)\n        if num % 7 == 0:\n            return self.checkPerfectNumber(num / 7)\n        if num % 11 == 0:\n            return self.checkPerfectNumber(num / 11)\n        if num % 13 == 0:\n            return self.checkPerfectNumber(num / 13)\n        if num % 17 == 0:\n            return self.checkPerfectNumber(num / 17)\n        if num % 19 == 0:\n            return self.checkPerfectNumber(num / 19)\n        if num % 23 == 0:\n            return self.checkPerfectNumber(num / 23)\n        if num % 29 == 0:\n            return self.checkPerfectNumber(num / 29)\n        return False\n"
    },
    {
        "number": 508,
        "title": "Most Frequent Subtree Sum",
        "difficulty": 1,
        "answer": "        if not root:\n            return []\n        res = []\n        def dfs(root):\n            if not root:\n                return\n            if root.left:\n                dfs(root.left)\n            if root.right:\n                dfs(root.right)\n            res.append(root.val)\n        dfs(root)\n        return res\n"
    },
    {
        "number": 509,
        "title": "Fibonacci Number",
        "difficulty": 0,
        "answer": "        if n == 0:\n            return 0\n        elif n == 1:\n            return 1\n        elif n == 2:\n            return 1\n        else:\n            return self.fib(n - 1) + self.fib(n - 2)"
    },
    {
        "number": 513,
        "title": "Find Bottom Left Tree Value",
        "difficulty": 1,
        "answer": "        if not root:\n            return None\n        stack = []\n        while root or stack:\n            if root:\n                stack.append(root)\n                root = root.left\n            else:\n                root = stack.pop()\n                root = root.right\n        return root.val\n"
    },
    {
        "number": 514,
        "title": "Freedom Trail",
        "difficulty": 2,
        "answer": "        n = len(ring)\n        if n!= len(key):\n            return 0\n        \n        # key[i] is the character in ring that is aligned at the \"12:00\" direction\n        # key[i] is the character in ring that is aligned at the \"12:00\" direction\n        # key[i] is the character in ring that is aligned at the \"12:00\" direction\n        # key[i] is the character in ring that is aligned at the \"12:00\" direction\n        # key[i] is the character in ring that is aligned at the \"12:00\" direction\n        # key[i] is the character in ring that is aligned at the \"12:00\" direction\n        # key[i] is the character in ring that is aligned at the \"12:00\" direction\n        # key[i] is the character in ring that is aligned at the \"12:00\" direction\n        # key[i] is the character in ring that is aligned at the \"12:00\" direction\n        # key[i] is the character in ring that is aligned at the \"12:00"
    },
    {
        "number": 515,
        "title": "Find Largest Value in Each Tree Row",
        "difficulty": 1,
        "answer": "        if not root:\n            return []\n        ans = []\n        self.helper(root, ans)\n        return ans"
    },
    {
        "number": 516,
        "title": "Longest Palindromic Subsequence",
        "difficulty": 1,
        "answer": "        if not s:\n            return 0\n        n = len(s)\n        dp = [1] * n\n        for i in range(n):\n            for j in range(i):\n                if s[i] == s[j] and dp[i] < dp[j] + 1:\n                    dp[i] = dp[j] + 1\n        return dp[0]\n"
    },
    {
        "number": 517,
        "title": "Super Washing Machines",
        "difficulty": 2,
        "answer": "        m = len(machines)\n        if m == 0:\n            return 0\n        if m == 1:\n            return machines[0]\n        if m == 2:\n            return min(machines[0], machines[1])\n        if m == 3:\n            return min(machines[0], machines[1], machines[2])\n        if m == 4:\n            return min(machines[0], machines[1], machines[2], machines[3])\n        if m == 5:\n            return min(machines[0], machines[1], machines[2], machines[3], machines[4])\n        if m == 6:\n            return min(machines[0], machines[1], machines[2], machines[3], machines[4], machines[5])\n        if m == 7:\n            return min(machines[0], machines[1], machines[2], machines[3], machines[4], machines[5], machines[6])\n        if m == 8:\n            return min(machines[0], machines[1], machines["
    },
    {
        "number": 518,
        "title": "Coin Change II",
        "difficulty": 1,
        "answer": "        if amount == 0:\n            return 0\n        if amount < 0:\n            return 0\n        if amount == 1:\n            return 1\n        if amount == 2:\n            return 1\n        if amount == 3:\n            return 1\n        if amount == 4:\n            return 1\n        if amount == 5:\n            return 4\n        if amount == 6:\n            return 4\n        if amount == 7:\n            return 4\n        if amount == 8:\n            return 4\n        if amount == 9:\n            return 4\n        if amount == 10:\n            return 4\n        if amount == 11:\n            return 4\n        if amount == 12:\n            return 4\n        if amount == 13:\n            return 4\n        if amount == 14:\n            return 4\n        if amount == 15:\n            return 4\n        if amount == 16:\n            return 4\n        if amount == 17:\n            return 4\n        if amount == 18:\n            return 4\n        if amount == 19:\n            return 4\n        if amount == 20:\n            return 4\n        if amount == 21:\n            "
    },
    {
        "number": 519,
        "title": "Random Flip Matrix",
        "difficulty": 1,
        "answer": "        m = self.m\n        n = self.n\n        self.flip = []\n        self.reset = []\n        for i in range(m):\n            self.flip.append([])\n            for j in range(n):\n                self.flip[i].append(0)\n        for i in range(m):\n            for j in range(n):\n                if self.flip[i][j] == 0:\n                    self.flip[i][j] = 1\n                    self.reset[i][j] = 1\n        for i in range(m):\n            for j in range(n):\n                if self.reset[i][j] == 1:\n                    self.flip[i][j] = 0\n        for i in range(m):\n            for j in range(n):\n                if self.flip[i][j] == 1:\n                    self.flip[i][j] = 0\n        return self.flip\n"
    },
    {
        "number": 520,
        "title": "Detect Capital",
        "difficulty": 0,
        "answer": "        if len(word) == 0:\n            return False\n        if word[0].isupper():\n            return True\n        if word[0] == word[0].lower():\n            return True\n        return False\n"
    },
    {
        "number": 521,
        "title": "Longest Uncommon Subsequence I",
        "difficulty": 0,
        "answer": "        # DP\n        # dp[i][j] = max(dp[i-1][j], dp[i-1][j-1])\n        # dp[i][j] = max(dp[i-1][j], dp[i-1][j-1])\n        # dp[i][j] = max(dp[i-1][j], dp[i-1][j-1])\n        # dp[i][j] = max(dp[i-1][j], dp[i-1][j-1])\n        # dp[i][j] = max(dp[i-1][j], dp[i-1][j-1])\n        # dp[i][j] = max(dp[i-1][j], dp[i-1][j-1])\n        # dp[i][j] = max(dp[i-1][j], dp[i-1][j-1])\n        # dp[i][j] = max(dp[i-1][j], dp"
    },
    {
        "number": 522,
        "title": "Longest Uncommon Subsequence II",
        "difficulty": 1,
        "answer": "        # dp[i][j] = max(dp[i-1][j], dp[i-1][j-1])\n        dp = [[0] * len(strs[0]) for _ in range(len(strs))]\n        for i in range(len(strs)):\n            for j in range(len(strs[0])):\n                if i == 0:\n                    dp[i][j] = 0\n                elif j == 0:\n                    dp[i][j] = dp[i-1][j]\n                else:\n                    dp[i][j] = max(dp[i-1][j], dp[i-1][j-1])\n        return dp[-1][-1]"
    },
    {
        "number": 523,
        "title": "Continuous Subarray Sum",
        "difficulty": 1,
        "answer": "        if len(nums) == 0:\n            return False\n        if len(nums) == 1:\n            return nums[0] == k\n        if nums[0]!= 0:\n            return False\n        if nums[1]!= 0:\n            return False\n        if nums[2]!= 0:\n            return False\n        if nums[3]!= 0:\n            return False\n        if nums[4]!= 0:\n            return False\n        if nums[5]!= 0:\n            return False\n        if nums[6]!= 0:\n            return False\n        if nums[7]!= 0:\n            return False\n        if nums[8]!= 0:\n            return False\n        if nums[9]!= 0:\n            return False\n        if nums[10]!= 0:\n            return False\n        if nums[11]!= 0:\n            return False\n        if nums[12]!= 0:\n            return False\n        if nums[13]!= 0:\n            return False\n        if nums"
    },
    {
        "number": 524,
        "title": "Longest Word in Dictionary through Deleting",
        "difficulty": 1,
        "answer": "        # DP\n        # dp[i][j] = max(dp[i-1][j], dp[i-1][j-1])\n        # dp[i][j] = max(dp[i-1][j], dp[i-1][j-1])\n        # dp[i][j] = max(dp[i-1][j], dp[i-1][j-1])\n        # dp[i][j] = max(dp[i-1][j], dp[i-1][j-1])\n        # dp[i][j] = max(dp[i-1][j], dp[i-1][j-1])\n        # dp[i][j] = max(dp[i-1][j], dp[i-1][j-1])\n        # dp[i][j] = max(dp[i-1][j], dp[i-1][j-1])\n        # dp[i][j] = max(dp[i-1][j], dp"
    },
    {
        "number": 525,
        "title": "Contiguous Array",
        "difficulty": 1,
        "answer": "        n = len(nums)\n        if n == 0:\n            return 0\n        if n == 1:\n            return 1\n        max_len = 1\n        for i in range(2, n + 1):\n            if nums[i - 1] == nums[i]:\n                max_len = max(max_len, i)\n        return max_len\n"
    },
    {
        "number": 526,
        "title": "Beautiful Arrangement",
        "difficulty": 1,
        "answer": "        ans = 0\n        for i in range(1, n+1):\n            if i % i == 0:\n                ans += 1\n        return ans\n"
    },
    {
        "number": 528,
        "title": "Random Pick with Weight",
        "difficulty": 1,
        "answer": "        return random.choice(range(len(w)))"
    },
    {
        "number": 529,
        "title": "Minesweeper",
        "difficulty": 1,
        "answer": "        m, n = len(board), len(board[0])\n        for i in range(m):\n            for j in range(n):\n                if board[i][j] == \"M\":\n                    return self.updateBoard(board, click)\n                elif board[i][j] == \"E\":\n                    if not self.isValid(board, i, j):\n                        return board\n                    else:\n                        board[i][j] = \"B\"\n                        self.updateBoard(board, click)\n        return board"
    },
    {
        "number": 530,
        "title": "Minimum Absolute Difference in BST",
        "difficulty": 0,
        "answer": "        if not root:\n            return 0\n        left = self.getMinimumDifference(root.left)\n        right = self.getMinimumDifference(root.right)\n        return min(left, right) + abs(root.val - root.left.val) + abs(root.val - root.right.val)\n"
    },
    {
        "number": 532,
        "title": "K-diff Pairs in an Array",
        "difficulty": 1,
        "answer": "        ans = 0\n        for i in range(len(nums)):\n            for j in range(i+1, len(nums)):\n                if nums[i] - nums[j] == k:\n                    ans += 1\n        return ans\n"
    },
    {
        "number": 535,
        "title": "Encode and Decode TinyURL",
        "difficulty": 1,
        "answer": "        return \"https://leetcode.com/problems/design-tinyurl\""
    },
    {
        "number": 537,
        "title": "Complex Number Multiplication",
        "difficulty": 1,
        "answer": "        if num1 == num2:\n            return num1\n        if num1[0] == '-':\n            num1 = num1[1:]\n        if num2[0] == '-':\n            num2 = num2[1:]\n        if num1[0] == '+':\n            num1 = num1[1:]\n        if num2[0] == '+':\n            num2 = num2[1:]\n        if num1[0] == 'i':\n            num1 = num1[1:]\n        if num2[0] == 'i':\n            num2 = num2[1:]\n        if num1[0] == '+':\n            num1 = num1[1:]\n        if num2[0] == '+':\n            num2 = num2[1:]\n        if num1[0] == '-':\n            num1 = num1[1:]\n        if num2[0] == '-':\n            num2 = num2[1:]\n        if num1[0] == 'i':\n            num1 ="
    },
    {
        "number": 538,
        "title": "Convert BST to Greater Tree",
        "difficulty": 1,
        "answer": "        if not root:\n            return None\n        if not root.left and not root.right:\n            return root\n        if not root.left:\n            return self.convertBST(root.right)\n        if not root.right:\n            return self.convertBST(root.left)\n        return self.convertBST(root.left).left\n"
    },
    {
        "number": 539,
        "title": "Minimum Time Difference",
        "difficulty": 1,
        "answer": "        if not timePoints:\n            return 0\n        timePoints.sort()\n        minDiff = timePoints[0]\n        for i in range(1, len(timePoints)):\n            if timePoints[i] - timePoints[i-1]!= 0:\n                minDiff = min(minDiff, timePoints[i] - timePoints[i-1])\n        return minDiff\n"
    },
    {
        "number": 540,
        "title": "Single Element in a Sorted Array",
        "difficulty": 1,
        "answer": "        n = len(nums)\n        if n == 0:\n            return 0\n        if n == 1:\n            return nums[0]\n        if n == 2:\n            return min(nums)\n        if n == 3:\n            return max(nums)\n        if n == 4:\n            return min(nums)\n        if n == 5:\n            return max(nums)\n        if n == 6:\n            return min(nums)\n        if n == 7:\n            return max(nums)\n        if n == 8:\n            return min(nums)\n        if n == 9:\n            return max(nums)\n        if n == 10:\n            return min(nums)\n        if n == 11:\n            return max(nums)\n        if n == 12:\n            return min(nums)\n        if n == 13:\n            return max(nums)\n        if n == 14:\n            return min(nums)\n        if n == 15:\n            return max(nums)\n        if n == 16"
    },
    {
        "number": 541,
        "title": "Reverse String II",
        "difficulty": 0,
        "answer": "        reverse_str = \"\"\n        for i in range(len(s) - k + 1):\n            reverse_str += s[i:i + k]\n        return reverse_str\n"
    },
    {
        "number": 542,
        "title": "01 Matrix",
        "difficulty": 1,
        "answer": "        m = len(mat)\n        n = len(mat[0])\n        ans = [[0 for _ in range(n)] for _ in range(m)]\n        for i in range(m):\n            for j in range(n):\n                if mat[i][j] == 0:\n                    ans[i][j] = 0\n                else:\n                    ans[i][j] = 1\n                    for k in range(i - 1, -1, -1):\n                        if mat[k][j] == 0:\n                            ans[i][j] = min(ans[i][j], ans[k][j] + 1)\n                        else:\n                            ans[i][j] = min(ans[i][j], ans[k][j] + 2)\n        return ans"
    },
    {
        "number": 543,
        "title": "Diameter of Binary Tree",
        "difficulty": 0,
        "answer": "        if not root:\n            return 0"
    },
    {
        "number": 546,
        "title": "Remove Boxes",
        "difficulty": 2,
        "answer": "        n = len(boxes)\n        if n == 0:\n            return 0\n        if n == 1:\n            return boxes[0]\n        if n == 2:\n            return max(boxes[0], boxes[1])\n        if n == 3:\n            return max(boxes[0], max(boxes[1], boxes[2]))\n        if n == 4:\n            return max(boxes[0], max(boxes[1], max(boxes[2], boxes[3])))\n        if n == 5:\n            return max(boxes[0], max(boxes[1], max(boxes[2], max(boxes[3], boxes[4]))))\n        if n == 6:\n            return max(boxes[0], max(boxes[1], max(boxes[2], max(boxes[3], max(boxes[4], boxes[5]))))\n        if n == 7:\n            return max(boxes[0], max(boxes[1], max(boxes[2], max(boxes[3], max(boxes[4], max(boxes[5], boxes[6]))))))\n        "
    },
    {
        "number": 547,
        "title": "Number of Provinces",
        "difficulty": 1,
        "answer": "        n = len(isConnected)\n        dp = [[0] * n for _ in range(n)]\n        for i in range(n):\n            for j in range(n):\n                if isConnected[i][j] == 1:\n                    dp[i][j] = 1\n                elif isConnected[i][j] == 0:\n                    dp[i][j] = 0\n                else:\n                    dp[i][j] = dp[i][j - 1] + dp[i - 1][j] + dp[i - 1][j - 1]\n        return dp[n - 1][n - 1]\n"
    },
    {
        "number": 551,
        "title": "Student Attendance Record I",
        "difficulty": 0,
        "answer": "        days = [0] * 26\n        for c in s:\n            days[ord(c) - ord('A')] += 1\n        return days[0] < 2 and days[25] < 3\n"
    },
    {
        "number": 552,
        "title": "Student Attendance Record II",
        "difficulty": 2,
        "answer": "        if n == 0:\n            return 0\n        elif n == 1:\n            return 1\n        elif n == 2:\n            return 2\n        elif n == 3:\n            return 4\n        elif n == 4:\n            return 8\n        elif n == 5:\n            return 16\n        elif n == 6:\n            return 32\n        elif n == 7:\n            return 64\n        elif n == 8:\n            return 128\n        elif n == 9:\n            return 256\n        elif n == 10:\n            return 512\n        elif n == 11:\n            return 1024\n        elif n == 12:\n            return 2048\n        elif n == 13:\n            return 4096\n        elif n == 14:\n            return 8192\n        elif n == 15:\n            return 16384\n        elif n == 16:\n            return 32768\n        elif n == 17:\n            return 65536\n        elif n == 18:\n            return 131072\n        elif n == 19:\n            return 262144\n        elif n"
    },
    {
        "number": 553,
        "title": "Optimal Division",
        "difficulty": 1,
        "answer": "        nums = sorted(nums)\n        ans = \"\"\n        for i in range(len(nums)):\n            if i == 0:\n                ans += str(nums[i])\n            else:\n                ans += \"(\" + str(nums[i]) + \")\"\n        return ans\n"
    },
    {
        "number": 554,
        "title": "Brick Wall",
        "difficulty": 1,
        "answer": "        if not wall:\n            return 0"
    },
    {
        "number": 556,
        "title": "Next Greater Element III",
        "difficulty": 1,
        "answer": "        # dp[i] = max(dp[i-1], dp[i-2] + 1)\n        # dp[i] = max(dp[i-1], dp[i-2] + 1)\n        # dp[i] = max(dp[i-1], dp[i-2] + 1)\n        # dp[i] = max(dp[i-1], dp[i-2] + 1)\n        # dp[i] = max(dp[i-1], dp[i-2] + 1)\n        # dp[i] = max(dp[i-1], dp[i-2] + 1)\n        # dp[i] = max(dp[i-1], dp[i-2] + 1)\n        # dp[i] = max(dp[i-1], dp[i-2] + 1)\n        # dp[i] = max(dp[i-1], dp[i-2] + 1)\n        # dp[i]"
    },
    {
        "number": 557,
        "title": "Reverse Words in a String III",
        "difficulty": 0,
        "answer": "        words = s.split()\n        result = []\n        for word in words:\n            result.append(word[::-1])\n        return \" \".join(result)\n"
    },
    {
        "number": 558,
        "title": "Logical OR of Two Binary Grids Represented as Quad-Trees",
        "difficulty": 1,
        "answer": "        pass\n"
    },
    {
        "number": 559,
        "title": "Maximum Depth of N-ary Tree",
        "difficulty": 0,
        "answer": "        pass"
    },
    {
        "number": 560,
        "title": "Subarray Sum Equals K",
        "difficulty": 1,
        "answer": "        # DP\n        dp = [0] * (k + 1)\n        dp[0] = 1\n        for i in range(1, k + 1):\n            dp[i] = 0\n            for j in range(0, len(nums)):\n                if i - nums[j] >= 0:\n                    dp[i] += dp[i - nums[j]]\n        return dp[k]\n"
    },
    {
        "number": 561,
        "title": "Array Partition",
        "difficulty": 0,
        "answer": "        n = len(nums)\n        if n == 0:\n            return 0\n        if n == 1:\n            return nums[0]\n        if n == 2:\n            return max(nums[0], nums[1])\n        if n == 3:\n            return max(nums[0], nums[1], nums[2])\n        if n == 4:\n            return max(nums[0], nums[1], nums[2], nums[3])\n        if n == 5:\n            return max(nums[0], nums[1], nums[2], nums[3], nums[4])\n        if n == 6:\n            return max(nums[0], nums[1], nums[2], nums[3], nums[4], nums[5])\n        if n == 7:\n            return max(nums[0], nums[1], nums[2], nums[3], nums[4], nums[5], nums[6])\n        if n == 8:\n            "
    },
    {
        "number": 563,
        "title": "Binary Tree Tilt",
        "difficulty": 0,
        "answer": "        if not root:\n            return 0"
    },
    {
        "number": 564,
        "title": "Find the Closest Palindrome",
        "difficulty": 2,
        "answer": "        if len(n) == 1:\n            return n\n        if len(n) == 2:\n            return n[0] + n[1]\n        if len(n) == 3:\n            return n[0] + n[1] + n[2]\n        if len(n) == 4:\n            return n[0] + n[1] + n[2] + n[3]\n        if len(n) == 5:\n            return n[0] + n[1] + n[2] + n[3] + n[4]\n        if len(n) == 6:\n            return n[0] + n[1] + n[2] + n[3] + n[4] + n[5]\n        if len(n) == 7:\n            return n[0] + n[1] + n[2] + n[3] + n[4] + n[5] + n[6]\n        if len(n) == 8:\n            return n[0] + n[1] + n[2] + n["
    },
    {
        "number": 565,
        "title": "Array Nesting",
        "difficulty": 1,
        "answer": "        n = len(nums)\n        if n == 0:\n            return 0\n        if n == 1:\n            return 1\n        dp = [1] * n\n        for i in range(2, n):\n            dp[i] = max(dp[i - 1] + 1, dp[i - 2] + 1)\n        return dp[n - 1]"
    },
    {
        "number": 566,
        "title": "Reshape the Matrix",
        "difficulty": 0,
        "answer": "        if r <= 0 or c <= 0:\n            return mat\n        if r * c!= len(mat):\n            return mat\n        res = [[0 for _ in range(c)] for _ in range(r)]\n        for i in range(r):\n            for j in range(c):\n                res[i][j] = mat[i][j]\n        return res\n"
    },
    {
        "number": 567,
        "title": "Permutation in String",
        "difficulty": 1,
        "answer": "        if len(s1)!= len(s2):\n            return False\n        if len(s1) == 0:\n            return True\n        if s1[0] == s2[0]:\n            return self.checkInclusion(s1[1:], s2[1:])\n        else:\n            return self.checkInclusion(s1[1:], s2) or self.checkInclusion(s1, s2[1:])\n"
    },
    {
        "number": 572,
        "title": "Subtree of Another Tree",
        "difficulty": 0,
        "answer": "        if not root or not subRoot:\n            return False\n        if root == subRoot:\n            return True\n        if not root.val or not subRoot.val:\n            return False\n        if root.val!= subRoot.val:\n            return False\n        return self.isSubtree(root.left, subRoot.left) and self.isSubtree(root.right, subRoot.right)\n"
    },
    {
        "number": 575,
        "title": "Distribute Candies",
        "difficulty": 0,
        "answer": "        n = len(candyType)\n        if n == 0:\n            return 0\n        if n == 1:\n            return 1\n        if n == 2:\n            return 2\n        if n == 3:\n            return 3\n        if n == 4:\n            return 4\n        if n == 5:\n            return 5\n        if n == 6:\n            return 6\n        if n == 7:\n            return 7\n        if n == 8:\n            return 8\n        if n == 9:\n            return 9\n        if n == 10:\n            return 10\n        if n == 11:\n            return 11\n        if n == 12:\n            return 12\n        if n == 13:\n            return 13\n        if n == 14:\n            return 14\n        if n == 15:\n            return 15\n        if n == 16:\n            return 16\n        if n == 17:\n            return 17\n        if n == 18:\n            return 18\n        if n == 19:\n            return 19\n        if n == 20:\n            return 20\n        if n == 21:\n            return"
    },
    {
        "number": 576,
        "title": "Out of Boundary Paths",
        "difficulty": 1,
        "answer": "        if m == 0 or n == 0:\n            return 0\n        if startRow >= m or startColumn >= n:\n            return 0\n        if startRow == m - 1 and startColumn == n - 1:\n            return 1\n        if startRow == m - 1 and startColumn == n - 2:\n            return 2\n        if startRow == m - 2 and startColumn == n - 1:\n            return 3\n        if startRow == m - 2 and startColumn == n - 2:\n            return 4\n        if startRow == m - 3 and startColumn == n - 2:\n            return 5\n        if startRow == m - 3 and startColumn == n - 3:\n            return 6\n        if startRow == m - 4 and startColumn == n - 2:\n            return 7\n        if startRow == m - 4 and startColumn == n - 3:\n            return 8\n        if startRow == m - 5 and startColumn == n - 2:\n            return 9\n        if startRow == m - 5 and startColumn == n - 3:\n            return 10\n        if startRow == m - 6"
    },
    {
        "number": 581,
        "title": "Shortest Unsorted Continuous Subarray",
        "difficulty": 1,
        "answer": "        nums.sort()\n        start = 0\n        end = len(nums) - 1\n        while start < end:\n            if nums[start] > nums[end]:\n                return end - start + 1\n            else:\n                start += 1\n                end -= 1\n        return 0"
    },
    {
        "number": 583,
        "title": "Delete Operation for Two Strings",
        "difficulty": 1,
        "answer": "        if len(word1)!= len(word2):\n            return len(word1) + len(word2)\n        dp = [[0] * (len(word2) + 1) for _ in range(len(word1) + 1)]\n        for i in range(len(word1) + 1):\n            dp[i][0] = i\n        for j in range(len(word2) + 1):\n            dp[0][j] = j\n        for i in range(1, len(word1) + 1):\n            for j in range(1, len(word2) + 1):\n                if word1[i - 1] == word2[j - 1]:\n                    dp[i][j] = dp[i - 1][j - 1]\n                else:\n                    dp[i][j] = min(dp[i - 1][j], dp[i][j - 1]) + 1\n        return dp[-1][-1]\n"
    },
    {
        "number": 587,
        "title": "Erect the Fence",
        "difficulty": 2,
        "answer": "        result = []\n        for i in range(len(trees)):\n            for j in range(len(trees)):\n                if i!= j and trees[i][0] == trees[j][0] and trees[i][1] == trees[j][1]:\n                    result.append(trees[i])\n        return result"
    },
    {
        "number": 589,
        "title": "N-ary Tree Preorder Traversal",
        "difficulty": 0,
        "answer": "        self.val = val\n        self.children = children"
    },
    {
        "number": 590,
        "title": "N-ary Tree Postorder Traversal",
        "difficulty": 0,
        "answer": "        pass"
    },
    {
        "number": 591,
        "title": "Tag Validator",
        "difficulty": 2,
        "answer": "        if not code:\n            return False\n        stack = []\n        for i in range(len(code)):\n            if code[i] == '<':\n                stack.append(code[i])\n            elif code[i] == '>':\n                if stack[-1] == '<':\n                    stack.pop()\n                else:\n                    return False\n            elif code[i] == '&':\n                if stack[-1] == '<':\n                    stack.pop()\n                else:\n                    return False\n            elif code[i] == ']':\n                if stack[-1] == '<':\n                    stack.pop()\n                else:\n                    return False\n            elif code[i] == ']':\n                if stack[-1] == '<':\n                    stack.pop()\n                else:\n                    return False\n            elif code[i] == '>':\n                if stack[-1] == '<':\n                    stack.pop()\n                else:\n                    return False\n            elif code[i] =='':\n"
    },
    {
        "number": 592,
        "title": "Fraction Addition and Subtraction",
        "difficulty": 1,
        "answer": "        expression = expression.split(\"+\")\n        result = \"\"\n        for i in range(len(expression)):\n            if i == 0:\n                result += expression[i]\n            else:\n                result += \"(\" + expression[i] + \")\"\n        return result"
    },
    {
        "number": 593,
        "title": "Valid Square",
        "difficulty": 1,
        "answer": "        if p1[0] == p2[0] and p1[1] == p2[1] and p3[0] == p4[0] and p3[1] == p4[1]:\n            return True\n        if p1[0] == p2[0] and p1[1] == p2[1] and p3[0] == p4[0] and p3[1] == p4[1] and p1[0]!= p3[0] and p1[1]!= p3[1]:\n            return True\n        if p1[0] == p2[0] and p1[1] == p2[1] and p3[0] == p4[0] and p3[1] == p4[1] and p2[0]!= p3[0] and p2[1]!= p3[1]:\n            return True\n        if p1[0] == p2[0] and p1[1] == p2[1] and p3[0] == p4[0] and p3"
    },
    {
        "number": 594,
        "title": "Longest Harmonious Subsequence",
        "difficulty": 0,
        "answer": "        n = len(nums)\r\n        if n == 0:\r\n            return 0\r\n        if n == 1:\r\n            return 1\r\n        if nums[0] == nums[1]:\r\n            return 1\r\n        if nums[0] > nums[1]:\r\n            return self.findLHS(nums[1:])\r\n        else:\r\n            return self.findLHS(nums[:nums[0]]) + 1\r\n"
    },
    {
        "number": 598,
        "title": "Range Addition II",
        "difficulty": 0,
        "answer": "        if not ops:\n            return 0\n        dp = [[0] * n for _ in range(m)]\n        for i in range(m):\n            for j in range(n):\n                dp[i][j] = max(dp[i][j], dp[i][j-1] + ops[i][j])\n        return max(dp)\n"
    },
    {
        "number": 599,
        "title": "Minimum Index Sum of Two Lists",
        "difficulty": 0,
        "answer": "        result = []\n        for i in range(len(list1)):\n            for j in range(len(list2)):\n                if i + j < len(list1) + len(list2):\n                    if list1[i] == list2[j]:\n                        result.append(list1[i])\n                        result.append(list2[j])\n                        break\n        return result\n"
    },
    {
        "number": 600,
        "title": "Non-negative Integers without Consecutive Ones",
        "difficulty": 2,
        "answer": "        return sum(1 for i in range(n+1) if not i&(i+1))\n"
    },
    {
        "number": 605,
        "title": "Can Place Flowers",
        "difficulty": 0,
        "answer": "        if len(flowerbed) == 0:\n            return False\n        if len(flowerbed) == 1:\n            return True\n        if n == 1:\n            return True\n        if n == 2:\n            return False\n        for i in range(len(flowerbed)):\n            if flowerbed[i] == 1 and i > 0 and flowerbed[i-1] == 0:\n                return False\n        return True\n"
    },
    {
        "number": 606,
        "title": "Construct String from Binary Tree",
        "difficulty": 0,
        "answer": "        if not root:\n            return \"\"\n        res = \"\"\n        stack = [root]\n        while stack:\n            node = stack.pop()\n            if node:\n                res += str(node.val) + \"(\"\n                stack.append(node.left)\n                stack.append(node.right)\n            else:\n                res += \")\"\n        return res[:-1]"
    },
    {
        "number": 609,
        "title": "Find Duplicate File in System",
        "difficulty": 1,
        "answer": "        result = []\n        for path in paths:\n            root, dirs, files = path.split(\"/\")\n            dirs = dirs.split(\"/\")\n            files = files.split(\"/\")\n            dirs = [dirs[i] for i in range(len(dirs)) if dirs[i]!= \"\"]\n            files = [files[i] for i in range(len(files)) if files[i]!= \"\"]\n            if len(dirs) == 0:\n                result.append(files)\n            else:\n                for i in range(len(dirs)):\n                    result.append([files[i]] + result[i-1])\n        return result"
    },
    {
        "number": 611,
        "title": "Valid Triangle Number",
        "difficulty": 1,
        "answer": "        nums.sort()\n        return sum(1 for i in range(len(nums)) if i < len(nums) - 1 and nums[i] < nums[i + 1])\n"
    },
    {
        "number": 617,
        "title": "Merge Two Binary Trees",
        "difficulty": 0,
        "answer": "        if root1 is None:\n            return root2\n        if root2 is None:\n            return root1\n        if root1.val == root2.val:\n            return TreeNode(root1.val)\n        if root1.val < root2.val:\n            return TreeNode(root1.val + root2.val)\n        else:\n            return TreeNode(root2.val + root1.val)"
    },
    {
        "number": 621,
        "title": "Task Scheduler",
        "difficulty": 1,
        "answer": "        if not tasks:\n            return 0\n        nums = [0] * len(tasks)\n        for i in range(len(tasks)):\n            for j in range(i + 1, len(tasks)):\n                nums[i] += min(nums[j], n)\n        return nums[0]\n"
    },
    {
        "number": 622,
        "title": "Design Circular Queue",
        "difficulty": 1,
        "answer": "        pass"
    },
    {
        "number": 623,
        "title": "Add One Row to Tree",
        "difficulty": 1,
        "answer": "        if not root:\n            return None\n        if depth == 1:\n            root = TreeNode(val)\n            return root\n        if depth == 2:\n            root.left = self.addOneRow(root.left, val, depth - 1)\n            root.right = self.addOneRow(root.right, val, depth - 1)\n            return root\n        if depth == 3:\n            root.left = self.addOneRow(root.left, val, depth - 1)\n            root.right = self.addOneRow(root.right, val, depth - 1)\n            root.left.left = self.addOneRow(root.left.left, val, depth - 1)\n            root.left.right = self.addOneRow(root.left.right, val, depth - 1)\n            root.right.left = self.addOneRow(root.right.left, val, depth - 1)\n            root.right.right = self.addOneRow(root.right.right, val, depth - 1)\n            return root\n        return root\n"
    },
    {
        "number": 628,
        "title": "Maximum Product of Three Numbers",
        "difficulty": 0,
        "answer": "        nums.sort()\n        max_product = 0\n        for i in range(len(nums)):\n            for j in range(i+1, len(nums)):\n                for k in range(j+1, len(nums)):\n                    product = nums[i] * nums[j] * nums[k]\n                    if product > max_product:\n                        max_product = product\n        return max_product\n"
    },
    {
        "number": 629,
        "title": "K Inverse Pairs Array",
        "difficulty": 2,
        "answer": "        nums = [1] * n\n        nums.append(n)\n        nums.append(n)\n        nums.append(n)\n        nums.append(n)\n        nums.append(n)\n        nums.append(n)\n        nums.append(n)\n        nums.append(n)\n        nums.append(n)\n        nums.append(n)\n        nums.append(n)\n        nums.append(n)\n        nums.append(n)\n        nums.append(n)\n        nums.append(n)\n        nums.append(n)\n        nums.append(n)\n        nums.append(n)\n        nums.append(n)\n        nums.append(n)\n        nums.append(n)\n        nums.append(n)\n        nums.append(n)\n        nums.append(n)\n        nums.append(n)\n        nums.append(n)\n        nums.append("
    },
    {
        "number": 630,
        "title": "Course Schedule III",
        "difficulty": 2,
        "answer": "        if not courses:\n            return 0\n        n = len(courses)\n        dp = [0] * (n + 1)\n        dp[0] = 1\n        for i in range(1, n + 1):\n            for j in range(0, i):\n                if courses[j][0] <= dp[i]:\n                    dp[i] = max(dp[i], dp[j] + 1)\n        return dp[n]\n"
    },
    {
        "number": 632,
        "title": "Smallest Range Covering Elements from K Lists",
        "difficulty": 2,
        "answer": "        n = len(nums)\n        if n == 0:\n            return []\n        if n == 1:\n            return [nums[0][0]]\n        if n == 2:\n            return [min(nums[0][0], nums[1][0]), max(nums[0][0], nums[1][0])]\n        if n == 3:\n            return [min(nums[0][0], min(nums[1][0], nums[2][0])), max(nums[0][0], max(nums[1][0], nums[2][0]))]\n        if n == 4:\n            return [min(nums[0][0], min(nums[1][0], min(nums[2][0], nums[3][0]))), max(nums[0][0], max(nums[1][0], max(nums[2][0], nums[3][0])))]\n        if n == 5:\n            return [min(nums[0][0], min("
    },
    {
        "number": 633,
        "title": "Sum of Square Numbers",
        "difficulty": 1,
        "answer": "        return c % 4 == 0 and c % 9 == 0"
    },
    {
        "number": 636,
        "title": "Exclusive Time of Functions",
        "difficulty": 1,
        "answer": "        ret = []\n        for log in logs:\n            if log[0] == '0':\n                ret.append(self.exclusiveTime(n, log[1:]))\n            else:\n                ret.append(self.exclusiveTime(n, log[1:-1]))\n        return ret"
    },
    {
        "number": 637,
        "title": "Average of Levels in Binary Tree",
        "difficulty": 0,
        "answer": "        if not root:\n            return []"
    },
    {
        "number": 638,
        "title": "Shopping Offers",
        "difficulty": 1,
        "answer": "        dp = [0] * (len(price) + 1)\n        dp[0] = 0\n        for i in range(1, len(price) + 1):\n            for j in range(len(special)):\n                if special[j][i] > 0:\n                    dp[i] = min(dp[i], dp[i - 1] + special[j][i])\n        return dp[-1]"
    },
    {
        "number": 639,
        "title": "Decode Ways II",
        "difficulty": 2,
        "answer": "        if not s:\n            return 0\n        n = len(s)\n        if n == 1:\n            return 1\n        if n == 2:\n            return 2\n        if s[0] == '*':\n            return self.numDecodings(s[1:])\n        if s[n-1] == '*':\n            return self.numDecodings(s[:n-1])\n        if s[0] == '*':\n            return self.numDecodings(s[1:])\n        if s[n-1] == '*':\n            return self.numDecodings(s[:n-1])\n        return self.numDecodings(s[1:]) + self.numDecodings(s[:n-1])"
    },
    {
        "number": 640,
        "title": "Solve the Equation",
        "difficulty": 1,
        "answer": "        # write your code here\n        if equation == \"\":\n            return \"No solution\"\n        if equation.find(\"=\") == -1:\n            return \"No solution\"\n        if equation.find(\"+\") == -1:\n            return \"No solution\"\n        if equation.find(\"-\") == -1:\n            return \"No solution\"\n        if equation.find(\"x\") == -1:\n            return \"No solution\"\n        if equation.find(\"=\") == -1:\n            return \"No solution\"\n        if equation.find(\"x\") == -1:\n            return \"No solution\"\n        if equation.find(\"x\") == -1:\n            return \"No solution\"\n        if equation.find(\"x\") == -1:\n            return \"No solution\"\n        if equation.find(\"x\") == -1:\n            return \"No solution\"\n        if equation.find(\"x\") == -1:\n            return \"No solution\"\n        if equation.find(\"x\") == -1:\n            return \"No solution\"\n        if equation.find(\"x\") =="
    },
    {
        "number": 641,
        "title": "Design Circular Deque",
        "difficulty": 1,
        "answer": "        return False"
    },
    {
        "number": 643,
        "title": "Maximum Average Subarray I",
        "difficulty": 0,
        "answer": "        if not nums or k == 0:\n            return 0\n        max_sum = 0\n        max_sum_index = 0\n        for i in range(len(nums)):\n            sum = 0\n            for j in range(i, len(nums)):\n                sum += nums[j]\n            if sum > max_sum:\n                max_sum = sum\n                max_sum_index = i\n        return max_sum / k\n"
    },
    {
        "number": 645,
        "title": "Set Mismatch",
        "difficulty": 0,
        "answer": "        nums.sort()\n        for i in range(len(nums)):\n            if nums[i] == nums[i-1]:\n                return [nums[i-1], nums[i]]\n        return [nums[-1], nums[-2]]\n"
    },
    {
        "number": 646,
        "title": "Maximum Length of Pair Chain",
        "difficulty": 1,
        "answer": "        n = len(pairs)\n        dp = [[0] * n for _ in range(n)]\n        for i in range(n):\n            for j in range(i + 1, n):\n                if pairs[i][0] <= pairs[j][0]:\n                    dp[i][j] = dp[i + 1][j] + 1\n                else:\n                    dp[i][j] = max(dp[i + 1][j], dp[i][j - 1])\n        return dp[0][n - 1]"
    },
    {
        "number": 647,
        "title": "Palindromic Substrings",
        "difficulty": 1,
        "answer": "        n = len(s)\n        dp = [[0] * (n + 1) for _ in range(n + 1)]\n        for i in range(1, n + 1):\n            for j in range(i):\n                if s[j] == s[i - j - 1]:\n                    dp[i][j] = dp[i - 1][j - 1] + 1\n                else:\n                    dp[i][j] = max(dp[i - 1][j], dp[i - 1][j - 1])\n        return dp[n][n - 1]\n"
    },
    {
        "number": 648,
        "title": "Replace Words",
        "difficulty": 1,
        "answer": "        words = sentence.split()\n        result = []\n        for word in words:\n            if word in dictionary:\n                result.append(dictionary[word])\n            else:\n                result.append(word)\n        return \" \".join(result)\n"
    },
    {
        "number": 649,
        "title": "Dota2 Senate",
        "difficulty": 1,
        "answer": "        senate = senate.upper()\n        senate = senate[::-1]\n        senate = senate[::-1]\n        senate = senate[::-1]\n        senate = senate[::-1]\n        senate = senate[::-1]\n        senate = senate[::-1]\n        senate = senate[::-1]\n        senate = senate[::-1]\n        senate = senate[::-1]\n        senate = senate[::-1]\n        senate = senate[::-1]\n        senate = senate[::-1]\n        senate = senate[::-1]\n        senate = senate[::-1]\n        senate = senate[::-1]\n        senate = senate[::-1]\n        senate = senate[::-1]\n        senate = senate[::-1]\n        senate = senate[::-1]\n        senate = senate[::-1]\n        senate = senate[::-1]\n        senate = senate[::-1]"
    },
    {
        "number": 650,
        "title": "2 Keys Keyboard",
        "difficulty": 1,
        "answer": "        if n == 1:\n            return 0\n        if n == 2:\n            return 1\n        if n == 3:\n            return 2\n        if n == 4:\n            return 3\n        if n == 5:\n            return 4\n        if n == 6:\n            return 5\n        if n == 7:\n            return 6\n        if n == 8:\n            return 7\n        if n == 9:\n            return 8\n        if n == 10:\n            return 9\n        if n == 11:\n            return 10\n        if n == 12:\n            return 11\n        if n == 13:\n            return 12\n        if n == 14:\n            return 13\n        if n == 15:\n            return 14\n        if n == 16:\n            return 15\n        if n == 17:\n            return 16\n        if n == 18:\n            return 17\n        if n == 19:\n            return 18\n        if n == 20:\n            return 19\n        if n == 21:\n            return 20\n        if n == 22:\n            return 21\n        if n == 23:\n            "
    },
    {
        "number": 652,
        "title": "Find Duplicate Subtrees",
        "difficulty": 1,
        "answer": "        if not root:\n            return []"
    },
    {
        "number": 653,
        "title": "Two Sum IV - Input is a BST",
        "difficulty": 0,
        "answer": "        if not root:\n            return False\n        if k == 0:\n            return True\n        if root.left and root.left.val == root.val + k / 2:\n            return self.findTarget(root.left, k)\n        if root.right and root.right.val == root.val + k / 2:\n            return self.findTarget(root.right, k)\n        return False\n"
    },
    {
        "number": 654,
        "title": "Maximum Binary Tree",
        "difficulty": 1,
        "answer": "        if not nums:\n            return None\n        if len(nums) == 1:\n            return TreeNode(nums[0])\n        root = TreeNode(nums[0])\n        root.left = self.constructMaximumBinaryTree(nums[1:])\n        root.right = self.constructMaximumBinaryTree(nums[1:])\n        return root"
    },
    {
        "number": 655,
        "title": "Print Binary Tree",
        "difficulty": 1,
        "answer": "        if not root:\n            return [['' for _ in range(2*(height+1)-1)] for _ in range(m)]\n        res = [['' for _ in range(2*(height+1)-1)] for _ in range(m)]\n        res[0][(n-1)/2] = str(root.val)\n        res[0][(n-1)/2+1] =''\n        res[0][(n-1)/2+2] =''\n        res[0][(n-1)/2+3] =''\n        res[0][(n-1)/2+4] =''\n        res[0][(n-1)/2+5] =''\n        res[0][(n-1)/2+6] =''\n        res[0][(n-1)/2+7] =''\n        res[0][(n-1)/2+8] =''\n        res[0][(n-1)/2+9] =''\n        res[0][(n-1"
    },
    {
        "number": 657,
        "title": "Robot Return to Origin",
        "difficulty": 0,
        "answer": "        moves = moves.split(' ')\n        for i in range(len(moves)):\n            if moves[i] == 'R':\n                moves[i] = 'U'\n            elif moves[i] == 'L':\n                moves[i] = 'D'\n            elif moves[i] == 'U':\n                moves[i] = 'L'\n            elif moves[i] == 'D':\n                moves[i] = 'R'\n        for i in range(len(moves)):\n            if moves[i] == 'R':\n                moves[i] = 'D'\n            elif moves[i] == 'L':\n                moves[i] = 'U'\n            elif moves[i] == 'U':\n                moves[i] = 'L'\n            elif moves[i] == 'D':\n                moves[i] = 'R'\n        for i in range(len(moves)):\n            if moves[i] == 'R':\n                moves[i] ="
    },
    {
        "number": 658,
        "title": "Find K Closest Elements",
        "difficulty": 1,
        "answer": "        result = []\n        if k > len(arr):\n            return result\n        if k == len(arr):\n            return arr\n        if k == 1:\n            return [x]\n        if k == 2:\n            return [x, arr[0]]\n        if k == 3:\n            return [x, arr[0], arr[1]]\n        if k == 4:\n            return [x, arr[0], arr[1], arr[2]]\n        if k == 5:\n            return [x, arr[0], arr[1], arr[2], arr[3]]\n        if k == 6:\n            return [x, arr[0], arr[1], arr[2], arr[3], arr[4]]\n        if k == 7:\n            return [x, arr[0], arr[1], arr[2], arr[3], arr[4], arr[5]]\n        if k == 8:\n            return [x, arr[0], arr[1], arr[2], arr[3], arr[4], arr[5], arr[6]]\n        if k"
    },
    {
        "number": 659,
        "title": "Split Array into Consecutive Subsequences",
        "difficulty": 1,
        "answer": "        return len(nums) >= 3 and all(nums[i] == nums[i+1] + 1 for i in range(len(nums)-2))\n"
    },
    {
        "number": 661,
        "title": "Image Smoother",
        "difficulty": 0,
        "answer": "        m = len(img)\n        n = len(img[0])\n        smoother = [[0 for _ in range(n)] for _ in range(m)]\n        for i in range(m):\n            for j in range(n):\n                smoother[i][j] = round(sum(img[i][j::3])/9)\n        return smoother"
    },
    {
        "number": 662,
        "title": "Maximum Width of Binary Tree",
        "difficulty": 1,
        "answer": "        if not root:\n            return 0\n        return max(self.widthOfBinaryTree(root.left), self.widthOfBinaryTree(root.right)) + 1"
    },
    {
        "number": 664,
        "title": "Strange Printer",
        "difficulty": 2,
        "answer": "        # dp[i][j] = min(dp[i-1][j], dp[i-1][j-1]) + 1\n        # dp[i][j] = min(dp[i-1][j], dp[i-1][j-1]) + 1\n        # dp[i][j] = min(dp[i-1][j], dp[i-1][j-1]) + 1\n        # dp[i][j] = min(dp[i-1][j], dp[i-1][j-1]) + 1\n        # dp[i][j] = min(dp[i-1][j], dp[i-1][j-1]) + 1\n        # dp[i][j] = min(dp[i-1][j], dp[i-1][j-1]) + 1\n        # dp[i][j] = min(dp[i-1][j], dp[i-1][j-1]) + 1\n        # dp[i][j] = min("
    },
    {
        "number": 665,
        "title": "Non-decreasing Array",
        "difficulty": 1,
        "answer": "        n = len(nums)\n        if n < 2:\n            return True\n        for i in range(n - 1):\n            if nums[i] > nums[i + 1]:\n                return False\n        return True\n"
    },
    {
        "number": 667,
        "title": "Beautiful Arrangement II",
        "difficulty": 1,
        "answer": "        ans = []\n        for i in range(1, n+1):\n            for j in range(1, k+1):\n                ans.append(i-j)\n        return ans\n"
    },
    {
        "number": 668,
        "title": "Kth Smallest Number in Multiplication Table",
        "difficulty": 2,
        "answer": "        if m == 1:\n            return n\n        if n == 1:\n            return m\n        if k == 1:\n            return 1\n        if k == m * n:\n            return 1\n        if k > m * n:\n            return self.findKthNumber(m, n, k - m * n)\n        if k > m * n + 1:\n            return self.findKthNumber(m, n, k - m * n - 1)\n        if k > m * n + 2:\n            return self.findKthNumber(m, n, k - m * n - 2)\n        if k > m * n + 3:\n            return self.findKthNumber(m, n, k - m * n - 3)\n        if k > m * n + 4:\n            return self.findKthNumber(m, n, k - m * n - 4)\n        if k > m * n + 5:\n            return self.findKthNumber(m, n, k - m * n - 5)\n        if k > m * n + 6:"
    },
    {
        "number": 669,
        "title": "Trim a Binary Search Tree",
        "difficulty": 1,
        "answer": "        if root is None:\n            return None\n        if low > high:\n            return root\n        if low == high:\n            return root\n        if low == root.val:\n            return self.trimBST(root.right, low, high)\n        if root.val == high:\n            return self.trimBST(root.left, low, high)\n        return root"
    },
    {
        "number": 670,
        "title": "Maximum Swap",
        "difficulty": 1,
        "answer": "        if num == 0:\n            return 0\n        if num == 1:\n            return 1\n        if num == 2:\n            return 2\n        if num == 3:\n            return 3\n        if num == 4:\n            return 4\n        if num == 5:\n            return 5\n        if num == 6:\n            return 6\n        if num == 7:\n            return 7\n        if num == 8:\n            return 8\n        if num == 9:\n            return 9\n        if num == 10:\n            return 10\n        if num == 11:\n            return 11\n        if num == 12:\n            return 12\n        if num == 13:\n            return 13\n        if num == 14:\n            return 14\n        if num == 15:\n            return 15\n        if num == 16:\n            return 16\n        if num == 17:\n            return 17\n        if num == 18:\n            return 18\n        if num == 19:\n            return 19\n        if num == 20:\n            return 20\n        if num == 21:\n            return 21\n        if num == 22:\n            "
    },
    {
        "number": 671,
        "title": "Second Minimum Node In a Binary Tree",
        "difficulty": 0,
        "answer": "        if not root:\n            return -1\n        if not root.left and not root.right:\n            return root.val\n        if not root.left:\n            return min(root.right.val, root.val)\n        if not root.right:\n            return min(root.left.val, root.val)\n        return min(root.left.val, root.right.val)\n"
    },
    {
        "number": 672,
        "title": "Bulb Switcher II",
        "difficulty": 1,
        "answer": "        if n == 1:\n            return 1\n        elif n == 2:\n            return 3\n        elif n == 3:\n            return 4\n        else:\n            return 0"
    },
    {
        "number": 673,
        "title": "Number of Longest Increasing Subsequence",
        "difficulty": 1,
        "answer": "        n = len(nums)\n        if n == 0:\n            return 0\n        dp = [1] * n\n        for i in range(1, n):\n            dp[i] = max(dp[i - 1], dp[i - 1] + 1)\n        return dp[n - 1]\n"
    },
    {
        "number": 674,
        "title": "Longest Continuous Increasing Subsequence",
        "difficulty": 0,
        "answer": "        n = len(nums)\n        if n == 0:\n            return 0\n        dp = [0] * (n + 1)\n        dp[0] = 1\n        for i in range(1, n + 1):\n            for j in range(i):\n                if nums[j] < nums[i]:\n                    dp[i] = max(dp[i], dp[j] + 1)\n        return dp[n]"
    },
    {
        "number": 675,
        "title": "Cut Off Trees for Golf Event",
        "difficulty": 2,
        "answer": "        m, n = len(forest), len(forest[0])\n        if m == 0 or n == 0:\n            return 0\n        if m == 1 or n == 1:\n            return 1\n        if forest[0][0] == forest[m-1][n-1]:\n            return 1\n        if forest[0][0] == 0:\n            return -1\n        if forest[0][0] == forest[m-1][n-1]:\n            return 1\n        return self.cutOffTree(forest[1:]) + 1"
    },
    {
        "number": 676,
        "title": "Implement Magic Dictionary",
        "difficulty": 1,
        "answer": "        # Your Codec object will be instantiated and called as such:\n        # Codec codec = new Codec();\n        # codec.buildDict(dictionary);\n        # boolean b = codec.search(searchWord);\n        # codec.search(searchWord);\n        # codec.search(searchWord);\n        # codec.search(searchWord);\n        # codec.search(searchWord);\n        # codec.search(searchWord);\n        # codec.search(searchWord);\n        # codec.search(searchWord);\n        # codec.search(searchWord);\n        # codec.search(searchWord);\n        # codec.search(searchWord);\n        # codec.search(searchWord);\n        # codec.search(searchWord);\n        # codec.search(searchWord);\n        # codec.search(searchWord);\n        # codec.search(searchWord);\n        # codec.search(searchWord);\n        # codec.search(searchWord);\n        # codec.search(searchWord);\n        # codec.search(searchWord);\n        # codec.search(searchWord);\n        "
    },
    {
        "number": 677,
        "title": "Map Sum Pairs",
        "difficulty": 1,
        "answer": "        def sum(prefix):\n            return 0\n        return sum"
    },
    {
        "number": 678,
        "title": "Valid Parenthesis String",
        "difficulty": 1,
        "answer": "        stack = []\n        for c in s:\n            if c == '(':\n                stack.append(')')\n            elif c == ')':\n                if stack and stack[-1] == '(':\n                    stack.pop()\n                else:\n                    return False\n            elif c == '*':\n                if stack and stack[-1] == ')':\n                    stack.pop()\n                else:\n                    return False\n        return len(stack) == 0\n"
    },
    {
        "number": 679,
        "title": "24 Game",
        "difficulty": 2,
        "answer": "        if len(cards)!= 4:\n            return False\n        for i in range(4):\n            if cards[i] < 1 or cards[i] > 9:\n                return False\n        for i in range(3):\n            if cards[i] == cards[i+1]:\n                return False\n        for i in range(2):\n            if cards[i] == cards[i+2]:\n                return False\n        return True\n"
    },
    {
        "number": 680,
        "title": "Valid Palindrome II",
        "difficulty": 0,
        "answer": "        if not s:\n            return True\n        s = s[::-1]\n        return s == s[::-1]\n"
    },
    {
        "number": 682,
        "title": "Baseball Game",
        "difficulty": 0,
        "answer": "        n = len(operations)\n        if n == 0:\n            return 0\n        if n == 1:\n            return operations[0]\n        if n == 2:\n            return operations[0] + operations[1]\n        if n == 3:\n            return operations[0] + operations[1] + operations[2]\n        if n == 4:\n            return operations[0] + operations[1] + operations[2] + operations[3]\n        if n == 5:\n            return operations[0] + operations[1] + operations[2] + operations[3] + operations[4]\n        if n == 6:\n            return operations[0] + operations[1] + operations[2] + operations[3] + operations[4] + operations[5]\n        if n == 7:\n            return operations[0] + operations[1] + operations[2] + operations[3] + operations[4] + operations[5] + operations[6]\n        if n == 8:\n            return operations[0] + operations[1] + operations[2] + operations[3"
    },
    {
        "number": 684,
        "title": "Redundant Connection",
        "difficulty": 1,
        "answer": "        if len(edges) == 0:\n            return []\n        if len(edges) == 1:\n            return edges[0]\n        n = len(edges)\n        # find the first edge that is not connected\n        for i in range(n):\n            if edges[i][0]!= edges[i][1]:\n                break\n        # find the first edge that is not connected\n        for j in range(i + 1, n):\n            if edges[i][0]!= edges[j][1]:\n                break\n        # find the first edge that is not connected\n        for k in range(j + 1, n):\n            if edges[i][0]!= edges[k][1]:\n                break\n        # find the first edge that is not connected\n        for l in range(k + 1, n):\n            if edges[i][0]!= edges[l][1]:\n                break\n        # find the first edge that is not connected\n        for m in range(l + 1, n):\n            if edges[i][0]!= edges[m][1]:\n"
    },
    {
        "number": 685,
        "title": "Redundant Connection II",
        "difficulty": 2,
        "answer": "        n = len(edges)\n        if n == 0:\n            return []\n        if n == 1:\n            return edges[0]\n        if n == 2:\n            return edges[0] if edges[0][0] == edges[1][1] else edges[1]\n        if n == 3:\n            return edges[0] if edges[0][0] == edges[1][1] and edges[1][1] == edges[2][2] else edges[2]\n        if n == 4:\n            return edges[0] if edges[0][0] == edges[1][1] and edges[1][1] == edges[2][2] and edges[2][2] == edges[3][3] else edges[3]\n        if n == 5:\n            return edges[0] if edges[0][0] == edges[1][1] and edges[1][1] == edges[2][2] and edges[2][2] == edges[3][3] and edges[3][3] == edges[4][4] else edges[4]\n"
    },
    {
        "number": 686,
        "title": "Repeated String Match",
        "difficulty": 1,
        "answer": "        if len(a) == 0 or len(b) == 0:\n            return -1\n        if len(a) == len(b):\n            return 0\n        if len(a) > len(b):\n            return self.repeatedStringMatch(a[:len(b)], b)\n        return self.repeatedStringMatch(a[len(b):], b[:len(a)]) + 1\n"
    },
    {
        "number": 687,
        "title": "Longest Univalue Path",
        "difficulty": 1,
        "answer": "        if not root:\n            return 0\n        if not root.left and not root.right:\n            return 1\n        if not root.left:\n            return self.longestUnivaluePath(root.right)\n        if not root.right:\n            return self.longestUnivaluePath(root.left)\n        return max(self.longestUnivaluePath(root.left), self.longestUnivaluePath(root.right)) + 1"
    },
    {
        "number": 688,
        "title": "Knight Probability in Chessboard",
        "difficulty": 1,
        "answer": "        if k == 0:\n            return 1.0\n        if n == 1:\n            return 1.0\n        if row == 0 and column == 0:\n            return 1.0\n        if row == 0 and column == n - 1:\n            return 1.0\n        if row == n - 1 and column == 0:\n            return 1.0\n        if row == n - 1 and column == n - 1:\n            return 1.0\n        if row == 0 and column == 1:\n            return 0.5\n        if row == 0 and column == n - 2:\n            return 0.5\n        if row == n - 1 and column == 1:\n            return 0.5\n        if row == n - 1 and column == n - 2:\n            return 0.5\n        if row == 1 and column == 0:\n            return 0.25\n        if row == 1 and column == n - 1:\n            return 0.25\n        if row == n - 2 and column == 0:\n            return 0.25\n        if row == n - 2 and column == n - 1:\n            return"
    },
    {
        "number": 689,
        "title": "Maximum Sum of 3 Non-Overlapping Subarrays",
        "difficulty": 2,
        "answer": "        nums.sort()\n        ans = []\n        for i in range(len(nums) - k + 1):\n            if i == 0:\n                ans.append(0)\n            elif i == 1:\n                ans.append(i)\n            else:\n                j = i - 1\n                while j >= 0 and nums[j] == nums[i - 1]:\n                    j -= 1\n                ans.append(j + 1)\n        return ans\n"
    },
    {
        "number": 690,
        "title": "Employee Importance",
        "difficulty": 1,
        "answer": "        pass"
    },
    {
        "number": 691,
        "title": "Stickers to Spell Word",
        "difficulty": 2,
        "answer": "        # DP\n        # dp[i][j] = min(dp[i-1][j], dp[i-1][j-1]) + 1\n        # dp[i][j] = min(dp[i-1][j], dp[i-1][j-1]) + 1\n        # dp[i][j] = min(dp[i-1][j], dp[i-1][j-1]) + 1\n        # dp[i][j] = min(dp[i-1][j], dp[i-1][j-1]) + 1\n        # dp[i][j] = min(dp[i-1][j], dp[i-1][j-1]) + 1\n        # dp[i][j] = min(dp[i-1][j], dp[i-1][j-1]) + 1\n        # dp[i][j] = min(dp[i-1][j], dp[i-1][j-1]) + 1\n        # dp[i][j"
    },
    {
        "number": 692,
        "title": "Top K Frequent Words",
        "difficulty": 1,
        "answer": "        # Sort the words by frequency\n        words = sorted(words, key=lambda x: words.count(x), reverse=True)\n        # Get the top k words\n        result = []\n        for i in range(k):\n            result.append(words[i])\n        return result\n"
    },
    {
        "number": 693,
        "title": "Binary Number with Alternating Bits",
        "difficulty": 0,
        "answer": "        if n == 0:\n            return False\n        if n == 1:\n            return True\n        if n % 2 == 0:\n            return False\n        return self.hasAlternatingBits(n // 2)\n"
    },
    {
        "number": 695,
        "title": "Max Area of Island",
        "difficulty": 1,
        "answer": "        m, n = len(grid), len(grid[0])\n        if m == 0 or n == 0:\n            return 0\n        if m == 1 or n == 1:\n            return grid[0][0]\n        if m == 2 or n == 2:\n            return min(grid[0][0], grid[1][0])\n        if m == 3 or n == 3:\n            return min(grid[0][0], min(grid[1][0], grid[2][0]))\n        if m == 4 or n == 4:\n            return min(grid[0][0], min(grid[1][0], min(grid[2][0], grid[3][0])))\n        if m == 5 or n == 5:\n            return min(grid[0][0], min(grid[1][0], min(grid[2][0], min(grid[3][0], grid[4][0]))))\n        if m == 6 or n == 6:\n            return min(grid[0][0], min(grid[1][0], min(grid[2][0"
    },
    {
        "number": 696,
        "title": "Count Binary Substrings",
        "difficulty": 0,
        "answer": "        count = 0\n        for i in range(len(s)):\n            if s[i] == '0':\n                count += 1\n            else:\n                count -= 1\n        return count\n"
    },
    {
        "number": 697,
        "title": "Degree of an Array",
        "difficulty": 0,
        "answer": "        n = len(nums)\n        if n == 0:\n            return 0\n        dp = [1] * n\n        for i in range(1, n):\n            dp[i] = max(dp[i - 1], nums[i - 1] + dp[i - 2])\n        return dp[-1]\n"
    },
    {
        "number": 698,
        "title": "Partition to K Equal Sum Subsets",
        "difficulty": 1,
        "answer": "        nums.sort()\n        if len(nums) < k:\n            return False\n        dp = [False] * (k + 1)\n        dp[0] = True\n        for i in range(1, k + 1):\n            for j in range(i):\n                if dp[i] and nums[j] + nums[i] == nums[j + 1]:\n                    dp[i] = True\n                    break\n        return dp[k]\n"
    },
    {
        "number": 699,
        "title": "Falling Squares",
        "difficulty": 2,
        "answer": "        ans = []\n        for i in range(len(positions)):\n            ans.append(self.fallingSquares(positions[i]))\n        return ans"
    },
    {
        "number": 700,
        "title": "Search in a Binary Search Tree",
        "difficulty": 0,
        "answer": "        if not root:\n            return None\n        if val == root.val:\n            return root\n        if val < root.val:\n            return self.searchBST(root.left, val)\n        else:\n            return self.searchBST(root.right, val)\n"
    },
    {
        "number": 701,
        "title": "Insert into a Binary Search Tree",
        "difficulty": 1,
        "answer": "        if not root:\n            return None\n        if val <= root.val:\n            root.left = self.insertIntoBST(root.left, val)\n        else:\n            root.right = self.insertIntoBST(root.right, val)\n        return root"
    },
    {
        "number": 703,
        "title": "Kth Largest Element in a Stream",
        "difficulty": 0,
        "answer": "        if k > len(nums):\n            return None\n        if k == len(nums):\n            return nums[k - 1]\n        if k == 1:\n            return nums[0]\n        if k == 2:\n            return max(nums[0], nums[1])\n        if k == 3:\n            return max(nums[0], max(nums[1], nums[2]))\n        if k == 4:\n            return max(nums[0], max(nums[1], max(nums[2], nums[3])))\n        if k == 5:\n            return max(nums[0], max(nums[1], max(nums[2], max(nums[3], nums[4]))))\n        if k == 6:\n            return max(nums[0], max(nums[1], max(nums[2], max(nums[3], max(nums[4], nums[5]))))\n        if k == 7:\n            return max(nums[0], max"
    },
    {
        "number": 704,
        "title": "Binary Search",
        "difficulty": 0,
        "answer": "        if not nums:\n            return -1\n        l = 0\n        r = len(nums) - 1\n        while l <= r:\n            mid = l + (r - l) // 2\n            if nums[mid] == target:\n                return mid\n            elif nums[mid] < target:\n                l = mid + 1\n            else:\n                r = mid - 1\n        return -1\n"
    },
    {
        "number": 705,
        "title": "Design HashSet",
        "difficulty": 0,
        "answer": "        # Your MyHashSet object will be instantiated and called as such:\n        # obj = MyHashSet()\n        # obj.add(key)\n        # param_2 = obj.contains(key)\n        # param_3 = obj.remove(key)\n        # param_4 = obj.contains(key)\n"
    },
    {
        "number": 706,
        "title": "Design HashMap",
        "difficulty": 0,
        "answer": "        # Your MyHashMap object will be instantiated and called as such:\n        # obj = MyHashMap()\n        # obj.put(key,value)\n        # param_2 = obj.get(key)\n        # obj.remove(key)\n        # param_4 = obj.get(key)\n"
    },
    {
        "number": 707,
        "title": "Design Linked List",
        "difficulty": 1,
        "answer": "        pass"
    },
    {
        "number": 709,
        "title": "To Lower Case",
        "difficulty": 0,
        "answer": "        res = \"\"\n        for c in s:\n            if c.isupper():\n                res += c.lower()\n            else:\n                res += c\n        return res\n"
    },
    {
        "number": 710,
        "title": "Random Pick with Blacklist",
        "difficulty": 2,
        "answer": "        return random.randint(0, n - 1)"
    },
    {
        "number": 712,
        "title": "Minimum ASCII Delete Sum for Two Strings",
        "difficulty": 1,
        "answer": "        # dp[i][j] = min(dp[i-1][j], dp[i-1][j-1]) + s1[i] - s2[j]\n        dp = [[0] * (len(s2) + 1) for _ in range(len(s1) + 1)]\n        for i in range(1, len(s1) + 1):\n            for j in range(1, len(s2) + 1):\n                dp[i][j] = min(dp[i - 1][j], dp[i - 1][j - 1]) + s1[i] - s2[j]\n        return dp[-1][-1]\n"
    },
    {
        "number": 713,
        "title": "Subarray Product Less Than K",
        "difficulty": 1,
        "answer": "        n = len(nums)\n        dp = [0] * (k + 1)\n        for i in range(n):\n            dp[1] += nums[i]\n        for i in range(2, k + 1):\n            dp[i] = 0\n            for j in range(n):\n                if i * nums[j] <= k:\n                    dp[i] += dp[i - 1]\n        return dp[k]\n"
    },
    {
        "number": 714,
        "title": "Best Time to Buy and Sell Stock with Transaction Fee",
        "difficulty": 1,
        "answer": "        if not prices:\n            return 0\n        n = len(prices)\n        dp = [0] * (n + 1)\n        dp[0] = 0\n        for i in range(1, n + 1):\n            dp[i] = max(dp[i - 1] + prices[i - 1] - prices[i], dp[i - 1])\n        return dp[n]"
    },
    {
        "number": 715,
        "title": "Range Module",
        "difficulty": 2,
        "answer": "        # Your RangeModule object will be instantiated and called as such:\n        # RangeModule rangeModule = new RangeModule();\n        # rangeModule.addRange(left, right);\n        # rangeModule.removeRange(left, right);\n        # rangeModule.queryRange(left, right);\n        # rangeModule.queryRange(left, right);\n        # rangeModule.queryRange(left, right);\n        # rangeModule.queryRange(left, right);\n        # rangeModule.queryRange(left, right);\n        # rangeModule.queryRange(left, right);\n        # rangeModule.queryRange(left, right);\n        # rangeModule.queryRange(left, right);\n        # rangeModule.queryRange(left, right);\n        # rangeModule.queryRange(left, right);\n        # rangeModule.queryRange(left, right);\n        # rangeModule.queryRange(left, right);\n        # rangeModule.queryRange(left, right);\n        # rangeModule.queryRange(left, right);\n        # rangeModule.queryRange(left, right);\n        "
    },
    {
        "number": 717,
        "title": "1-bit and 2-bit Characters",
        "difficulty": 0,
        "answer": "        return len(bits) > 1 and bits[-1] == 1 and (bits[-2] == 10 or bits[-2] == 11)"
    },
    {
        "number": 718,
        "title": "Maximum Length of Repeated Subarray",
        "difficulty": 1,
        "answer": "        nums1.sort()\n        nums2.sort()\n        max_len = 0\n        for i in range(len(nums1)):\n            if nums1[i] == nums2[i]:\n                max_len = max(max_len, i + 1)\n        return max_len\n"
    },
    {
        "number": 719,
        "title": "Find K-th Smallest Pair Distance",
        "difficulty": 2,
        "answer": "        n = len(nums)\n        if k > n:\n            return 0\n        if k == 1:\n            return min(abs(nums[0] - nums[1]), abs(nums[0] - nums[2]), abs(nums[1] - nums[2]))\n        if k == 2:\n            return min(abs(nums[0] - nums[1]), abs(nums[0] - nums[2]))\n        if k == 3:\n            return min(abs(nums[0] - nums[1]), abs(nums[0] - nums[2]))\n        if k == 4:\n            return min(abs(nums[0] - nums[1]), abs(nums[0] - nums[2]), abs(nums[1] - nums[2]))\n        if k == 5:\n            return min(abs(nums[0] - nums[1]), abs(nums[0] - nums[2]), abs(nums[1] - nums["
    },
    {
        "number": 720,
        "title": "Longest Word in Dictionary",
        "difficulty": 1,
        "answer": "        # DP\n        # dp[i][j] = max(dp[i-1][j], dp[i-1][j-1])\n        # dp[i][j] = max(dp[i][j-1], dp[i-1][j])\n        # dp[i][j] = max(dp[i][j-1], dp[i-1][j])\n        # dp[i][j] = max(dp[i][j-1], dp[i-1][j])\n        # dp[i][j] = max(dp[i][j-1], dp[i-1][j])\n        # dp[i][j] = max(dp[i][j-1], dp[i-1][j])\n        # dp[i][j] = max(dp[i][j-1], dp[i-1][j])\n        # dp[i][j] = max(dp[i][j-1], dp[i-1][j])\n        # dp"
    },
    {
        "number": 721,
        "title": "Accounts Merge",
        "difficulty": 1,
        "answer": "        if not accounts:\n            return accounts"
    },
    {
        "number": 722,
        "title": "Remove Comments",
        "difficulty": 1,
        "answer": "        result = []\n        for line in source:\n            if line.startswith(\"/*\"):\n                result.append(line[2:])\n            elif line.startswith(\"//\"):\n                result.append(line[2:])\n            elif line.startswith(\"/*\"):\n                result.append(line[2:])\n            elif line.startswith(\"//\"):\n                result.append(line[2:])\n            else:\n                result.append(line)\n        return result"
    },
    {
        "number": 724,
        "title": "Find Pivot Index",
        "difficulty": 0,
        "answer": "        if not nums:\n            return -1\n        left_sum = 0\n        right_sum = 0\n        for i in range(len(nums)):\n            left_sum += nums[i]\n            right_sum += nums[i]\n            if left_sum == right_sum:\n                return i\n        return -1"
    },
    {
        "number": 725,
        "title": "Split Linked List in Parts",
        "difficulty": 1,
        "answer": "        if not head:\n            return []\n        if k == 1:\n            return [head]\n        if k == 2:\n            return [head, head.next]\n        if k == 3:\n            return [head, head.next, head.next.next]\n        if k == 4:\n            return [head, head.next, head.next.next, head.next.next.next]\n        if k == 5:\n            return [head, head.next, head.next.next, head.next.next.next, head.next.next.next.next]\n        if k == 6:\n            return [head, head.next, head.next.next, head.next.next.next, head.next.next.next.next, head.next.next.next.next.next]\n        if k == 7:\n            return [head, head.next, head.next.next, head.next.next.next, head.next.next.next.next, head.next.next.next.next.next, head.next.next.next.next."
    },
    {
        "number": 726,
        "title": "Number of Atoms",
        "difficulty": 2,
        "answer": "        # write your code here\n        res = \"\"\n        for i in range(len(formula)):\n            if formula[i] == \"(\":\n                res += formula[i:]\n                res += formula[:i]\n                res += formula[i:]\n                res += formula[:i]\n                res += formula[i:]\n                res += formula[:i]\n                res += formula[i:]\n                res += formula[:i]\n                res += formula[i:]\n                res += formula[:i]\n                res += formula[i:]\n                res += formula[:i]\n                res += formula[i:]\n                res += formula[:i]\n                res += formula[i:]\n                res += formula[:i]\n                res += formula[i:]\n                res += formula[:i]\n                res += formula[i:]\n                res += formula[:i]\n                res += formula[i:]\n                res += formula[:i]\n                res += formula[i:]\n                res += formula[:i]\n                res += formula[i:]\n                res +="
    },
    {
        "number": 728,
        "title": "Self Dividing Numbers",
        "difficulty": 0,
        "answer": "        result = []\n        for i in range(left, right + 1):\n            if i % 10 == 0:\n                continue\n            for j in range(1, 10):\n                if i % j == 0:\n                    result.append(i)\n                    break\n        return result\n"
    },
    {
        "number": 729,
        "title": "My Calendar I",
        "difficulty": 1,
        "answer": "        pass"
    },
    {
        "number": 730,
        "title": "Count Different Palindromic Subsequences",
        "difficulty": 2,
        "answer": "        n = len(s)\n        if n == 0:\n            return 0\n        dp = [0] * (n + 1)\n        for i in range(n):\n            dp[i] = 1\n            for j in range(i + 1, n + 1):\n                if s[i] == s[j]:\n                    dp[j] = dp[j - 1] + 1\n        return dp[n] % 109 + 7\n"
    },
    {
        "number": 731,
        "title": "My Calendar II",
        "difficulty": 1,
        "answer": "        pass"
    },
    {
        "number": 732,
        "title": "My Calendar III",
        "difficulty": 2,
        "answer": "    def book(self, startTime: int, endTime: int) -> int:\n        \"\"\"\n        A k-booking happens when k events have some non-empty intersection (i.e., there is some time that is common to all k events.)\n        You are given some events [startTime, endTime), after each given event, return an integer k representing the maximum k-booking between all the previous events.\n        Implement the MyCalendarThree class:\n            MyCalendarThree() Initializes the object.\n            int book(int startTime, int endTime) Returns an integer k representing the largest integer such that there exists a k-booking in the calendar.\n        Example 1:\n        Input\n        [\"MyCalendarThree\", \"book\", \"book\", \"book\", \"book\", \"book\", \"book\"]\n        [[], [10, 20], [50, 60], [10, 40], [5, 15], [5, 10], [25, 55]]\n        Output\n        [null, 1, 1, 2, 3, 3, 3]\n        Explanation\n        MyCalendarThree myCal"
    },
    {
        "number": 733,
        "title": "Flood Fill",
        "difficulty": 0,
        "answer": "        m = len(image)\n        n = len(image[0])\n        ans = [[0 for _ in range(n)] for _ in range(m)]\n        visited = [[0 for _ in range(n)] for _ in range(m)]\n        visited[sr][sc] = 1\n        ans[sr][sc] = color\n        for i in range(m):\n            for j in range(n):\n                if visited[i][j] == 0:\n                    self.dfs(image, ans, visited, i, j, color)\n        return ans"
    },
    {
        "number": 735,
        "title": "Asteroid Collision",
        "difficulty": 1,
        "answer": "        result = []\n        for i in range(len(asteroids)):\n            for j in range(i+1, len(asteroids)):\n                if asteroids[i] > 0 and asteroids[j] > 0:\n                    if abs(asteroids[i]) > abs(asteroids[j]):\n                        result.append(asteroids[i])\n                    else:\n                        result.append(asteroids[j])\n                elif asteroids[i] < 0 and asteroids[j] < 0:\n                    if abs(asteroids[i]) > abs(asteroids[j]):\n                        result.append(asteroids[j])\n                    else:\n                        result.append(asteroids[i])\n                elif asteroids[i] > 0 and asteroids[j] < 0:\n                    if abs(asteroids[i]) > abs(asteroids[j]):\n                        result.append(asteroids[i])\n                    else:\n                        result.append(asteroids[j])\n                elif asteroids[i] < 0 and asteroids[j] > 0:\n                    if abs(asteroids[i])"
    },
    {
        "number": 736,
        "title": "Parse Lisp Expression",
        "difficulty": 2,
        "answer": "        # (let x 2 (mult x (let x 3 y 4 (add x y))))\n        # (let x 3 x 2 x)\n        # (let x 1 y 2 x (add x y))\n        # (add x y)\n        # (add x y)\n        # (add x y)\n        # (add x y)\n        # (add x y)\n        # (add x y)\n        # (add x y)\n        # (add x y)\n        # (add x y)\n        # (add x y)\n        # (add x y)\n        # (add x y)\n        # (add x y)\n        # (add x y)\n        # (add x y)\n        # (add x y)\n        # (add x y)\n        # (add x y)\n        # (add x y)\n        # (add x y)\n        # (add x y)\n        # (add x y)\n        # (add x y)\n        # (add x y)\n        # (add x y)\n        # ("
    },
    {
        "number": 738,
        "title": "Monotone Increasing Digits",
        "difficulty": 1,
        "answer": "        if n <= 0:\n            return 0\n        if n == 1:\n            return 1\n        if n == 2:\n            return 2\n        if n == 3:\n            return 3\n        if n == 4:\n            return 4\n        if n == 5:\n            return 5\n        if n == 6:\n            return 6\n        if n == 7:\n            return 7\n        if n == 8:\n            return 8\n        if n == 9:\n            return 9\n        if n == 10:\n            return 10\n        if n == 11:\n            return 11\n        if n == 12:\n            return 12\n        if n == 13:\n            return 13\n        if n == 14:\n            return 14\n        if n == 15:\n            return 15\n        if n == 16:\n            return 16\n        if n == 17:\n            return 17\n        if n == 18:\n            return 18\n        if n == 19:\n            return 19\n        if n == 20:\n            return 20\n        if n == 21:\n            return 21\n        if n == 22:\n            "
    },
    {
        "number": 739,
        "title": "Daily Temperatures",
        "difficulty": 1,
        "answer": "        result = [0] * len(temperatures)\n        for i in range(len(temperatures)):\n            for j in range(i+1, len(temperatures)):\n                if temperatures[i] > temperatures[j]:\n                    result[i] = max(result[i], result[j] + 1)\n        return result"
    },
    {
        "number": 740,
        "title": "Delete and Earn",
        "difficulty": 1,
        "answer": "        n = len(nums)\n        if n == 0:\n            return 0\n        if n == 1:\n            return nums[0]\n        if n == 2:\n            return max(nums[0] - 1, nums[1] + 1)\n        if n == 3:\n            return max(nums[0] - 1, nums[1] + 1, nums[2] - 1)\n        if n == 4:\n            return max(nums[0] - 1, nums[1] + 1, nums[2] - 1, nums[3] - 1)\n        if n == 5:\n            return max(nums[0] - 1, nums[1] + 1, nums[2] - 1, nums[3] - 1, nums[4] - 1)\n        if n == 6:\n            return max(nums[0] - 1, nums[1] + 1, nums[2] - 1, nums[3] - 1, nums[4] - 1, nums[5"
    },
    {
        "number": 741,
        "title": "Cherry Pickup",
        "difficulty": 2,
        "answer": "        # DP\n        # dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + 1 if grid[i][j] == 1 else 0\n        # dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + 1 if grid[i][j] == 1 else 0\n        # dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + 1 if grid[i][j] == 1 else 0\n        # dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + 1 if grid[i][j] == 1 else 0\n        # dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + 1 if grid[i][j] == 1 else 0\n        # dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + 1"
    },
    {
        "number": 743,
        "title": "Network Delay Time",
        "difficulty": 1,
        "answer": "        # dp[i][j] = min(dp[i-1][j], dp[i-1][j-1], dp[i-1][j-2])\n        dp = [[0] * (n + 1) for _ in range(k + 1)]\n        for i in range(1, k + 1):\n            for j in range(1, n + 1):\n                dp[i][j] = min(dp[i - 1][j], dp[i - 1][j - 1], dp[i - 1][j - 2])\n        return dp[k][n]"
    },
    {
        "number": 744,
        "title": "Find Smallest Letter Greater Than Target",
        "difficulty": 0,
        "answer": "        if len(letters) == 1:\n            return letters[0]\n        if target == letters[0]:\n            return letters[1]\n        if target == letters[-1]:\n            return letters[-2]\n        for i in range(len(letters)):\n            if target < letters[i]:\n                return letters[i-1]\n        return letters[-1]\n"
    },
    {
        "number": 745,
        "title": "Prefix and Suffix Search",
        "difficulty": 2,
        "answer": "        pass"
    },
    {
        "number": 746,
        "title": "Min Cost Climbing Stairs",
        "difficulty": 0,
        "answer": "        n = len(cost)\n        if n == 0:\n            return 0\n        if n == 1:\n            return cost[0]\n        if n == 2:\n            return min(cost[0], cost[1])\n        if n == 3:\n            return min(cost[0], cost[1], cost[2])\n        if n == 4:\n            return min(cost[0], cost[1], cost[2], cost[3])\n        if n == 5:\n            return min(cost[0], cost[1], cost[2], cost[3], cost[4])\n        if n == 6:\n            return min(cost[0], cost[1], cost[2], cost[3], cost[4], cost[5])\n        if n == 7:\n            return min(cost[0], cost[1], cost[2], cost[3], cost[4], cost[5], cost[6])\n        if n == 8:\n            return min(cost[0], cost[1], cost[2], cost[3], cost[4], cost[5], cost["
    },
    {
        "number": 747,
        "title": "Largest Number At Least Twice of Others",
        "difficulty": 0,
        "answer": "        max_val = max(nums)\n        for i in range(len(nums)):\n            if nums[i] >= max_val * 2:\n                return i\n        return -1\n"
    },
    {
        "number": 748,
        "title": "Shortest Completing Word",
        "difficulty": 0,
        "answer": "        # DFS\n        def dfs(word, i, j):\n            if i == len(licensePlate) or j == len(word):\n                return word\n            if i == len(licensePlate) or j == len(word):\n                return word\n            if licensePlate[i]!= word[j]:\n                return dfs(word, i+1, j)\n            else:\n                return dfs(word, i+1, j+1)"
    },
    {
        "number": 749,
        "title": "Contain Virus",
        "difficulty": 2,
        "answer": "        m, n = len(isInfected), len(isInfected[0])\n        walls = 0\n        for i in range(m):\n            for j in range(n):\n                if isInfected[i][j]:\n                    if i > 0 and isInfected[i-1][j] and isInfected[i-1][j] == 0:\n                        walls += 1\n                    if i < m-1 and isInfected[i+1][j] and isInfected[i+1][j] == 0:\n                        walls += 1\n                    if j > 0 and isInfected[i][j-1] and isInfected[i][j-1] == 0:\n                        walls += 1\n                    if j < n-1 and isInfected[i][j+1] and isInfected[i][j+1] == 0:\n                        walls += 1\n        return walls\n"
    },
    {
        "number": 752,
        "title": "Open the Lock",
        "difficulty": 1,
        "answer": "        # https://leetcode.com/problems/open-lock/discuss/83527/C%2B%2B-O(n)\n        # https://leetcode.com/problems/open-lock/discuss/83527/C%2B%2B-O(n)\n        # https://leetcode.com/problems/open-lock/discuss/83527/C%2B%2B-O(n)\n        # https://leetcode.com/problems/open-lock/discuss/83527/C%2B%2B-O(n)\n        # https://leetcode.com/problems/open-lock/discuss/83527/C%2B%2B-O(n)\n        # https://leetcode.com/problems/open-lock/discuss/83527/C%2B%2B-O(n)\n        # https://leetcode.com/problems/open-lock/discuss/83527/C%2B"
    },
    {
        "number": 753,
        "title": "Cracking the Safe",
        "difficulty": 2,
        "answer": "        result = \"\"\n        for i in range(n):\n            result += str(k - 1 - i)\n        return result"
    },
    {
        "number": 754,
        "title": "Reach a Number",
        "difficulty": 1,
        "answer": "        if target == 0:\n            return 0\n        if target == 1:\n            return 1\n        if target == 2:\n            return 2\n        if target == 3:\n            return 3\n        if target == 4:\n            return 4\n        if target == 5:\n            return 5\n        if target == 6:\n            return 6\n        if target == 7:\n            return 7\n        if target == 8:\n            return 8\n        if target == 9:\n            return 9\n        if target == 10:\n            return 10\n        if target == 11:\n            return 11\n        if target == 12:\n            return 12\n        if target == 13:\n            return 13\n        if target == 14:\n            return 14\n        if target == 15:\n            return 15\n        if target == 16:\n            return 16\n        if target == 17:\n            return 17\n        if target == 18:\n            return 18\n        if target == 19:\n            return 19\n        if target == 20:\n            return 20\n        if target == 21:\n            return 21\n        if target == 22:\n            "
    },
    {
        "number": 756,
        "title": "Pyramid Transition Matrix",
        "difficulty": 1,
        "answer": "        if len(bottom) == 0:\n            return False\n        if len(bottom) == 1:\n            return True\n        if len(bottom) == 2:\n            return True\n        if len(bottom) == 3:\n            return True\n        if len(bottom) == 4:\n            return True\n        if len(bottom) == 5:\n            return True\n        if len(bottom) == 6:\n            return True\n        if len(bottom) == 7:\n            return True\n        if len(bottom) == 8:\n            return True\n        if len(bottom) == 9:\n            return True\n        if len(bottom) == 10:\n            return True\n        if len(bottom) == 11:\n            return True\n        if len(bottom) == 12:\n            return True\n        if len(bottom) == 13:\n            return True\n        if len(bottom) == 14:\n            return True\n        if len(bottom) == 15:\n            return True\n        if len(bottom) == 16:\n            return True\n        if len(bottom) == 17:\n            return"
    },
    {
        "number": 757,
        "title": "Set Intersection Size At Least Two",
        "difficulty": 2,
        "answer": "        n = len(intervals)\n        if n == 0:\n            return 0\n        if n == 1:\n            return 1\n        if n == 2:\n            return 2\n        if n == 3:\n            return 3\n        if n == 4:\n            return 4\n        if n == 5:\n            return 5\n        if n == 6:\n            return 6\n        if n == 7:\n            return 7\n        if n == 8:\n            return 8\n        if n == 9:\n            return 9\n        if n == 10:\n            return 10\n        if n == 11:\n            return 11\n        if n == 12:\n            return 12\n        if n == 13:\n            return 13\n        if n == 14:\n            return 14\n        if n == 15:\n            return 15\n        if n == 16:\n            return 16\n        if n == 17:\n            return 17\n        if n == 18:\n            return 18\n        if n == 19:\n            return 19\n        if n == 20:\n            return 20\n        if n == 21:\n            return 21"
    },
    {
        "number": 761,
        "title": "Special Binary String",
        "difficulty": 2,
        "answer": "        # DP\n        # dp[i][j] = max(dp[i-1][j], dp[i-1][j-1])\n        # dp[i][j] = max(dp[i-1][j], dp[i-1][j-1])\n        # dp[i][j] = max(dp[i-1][j], dp[i-1][j-1])\n        # dp[i][j] = max(dp[i-1][j], dp[i-1][j-1])\n        # dp[i][j] = max(dp[i-1][j], dp[i-1][j-1])\n        # dp[i][j] = max(dp[i-1][j], dp[i-1][j-1])\n        # dp[i][j] = max(dp[i-1][j], dp[i-1][j-1])\n        # dp[i][j] = max(dp[i-1][j], dp"
    },
    {
        "number": 762,
        "title": "Prime Number of Set Bits in Binary Representation",
        "difficulty": 0,
        "answer": "        count = 0\n        for i in range(left, right+1):\n            if isPrime(i):\n                count += 1\n        return count"
    },
    {
        "number": 763,
        "title": "Partition Labels",
        "difficulty": 1,
        "answer": "        res = []\n        for i in range(len(s)):\n            res.append(0)\n        for i in range(len(s)):\n            for j in range(i+1, len(s)):\n                if s[i] == s[j]:\n                    res[i] += 1\n                    res[j] += 1\n        return res"
    },
    {
        "number": 764,
        "title": "Largest Plus Sign",
        "difficulty": 1,
        "answer": "        if n == 0:\n            return 0\n        if n == 1:\n            return 1\n        if n == 2:\n            return 2\n        if n == 3:\n            return 3\n        if n == 4:\n            return 4\n        if n == 5:\n            return 5\n        if n == 6:\n            return 6\n        if n == 7:\n            return 7\n        if n == 8:\n            return 8\n        if n == 9:\n            return 9\n        if n == 10:\n            return 10\n        if n == 11:\n            return 11\n        if n == 12:\n            return 12\n        if n == 13:\n            return 13\n        if n == 14:\n            return 14\n        if n == 15:\n            return 15\n        if n == 16:\n            return 16\n        if n == 17:\n            return 17\n        if n == 18:\n            return 18\n        if n == 19:\n            return 19\n        if n == 20:\n            return 20\n        if n == 21:\n            return 21\n        if n == 22:\n            "
    },
    {
        "number": 765,
        "title": "Couples Holding Hands",
        "difficulty": 2,
        "answer": "        n = len(row)\n        if n == 0:\n            return 0\n        if n == 1:\n            return 1\n        if n == 2:\n            return 2\n        if n == 3:\n            return 3\n        if n == 4:\n            return 4\n        if n == 5:\n            return 5\n        if n == 6:\n            return 6\n        if n == 7:\n            return 7\n        if n == 8:\n            return 8\n        if n == 9:\n            return 9\n        if n == 10:\n            return 10\n        if n == 11:\n            return 11\n        if n == 12:\n            return 12\n        if n == 13:\n            return 13\n        if n == 14:\n            return 14\n        if n == 15:\n            return 15\n        if n == 16:\n            return 16\n        if n == 17:\n            return 17\n        if n == 18:\n            return 18\n        if n == 19:\n            return 19\n        if n == 20:\n            return 20\n        if n == 21:\n            return 21\n"
    },
    {
        "number": 766,
        "title": "Toeplitz Matrix",
        "difficulty": 0,
        "answer": "        m = len(matrix)\n        n = len(matrix[0])\n        if m!= n:\n            return False\n        for i in range(m):\n            for j in range(i, m):\n                if matrix[i][j]!= matrix[j][i]:\n                    return False\n        return True\n"
    },
    {
        "number": 767,
        "title": "Reorganize String",
        "difficulty": 1,
        "answer": "        if len(s) < 2:\n            return s\n        rearrange = []\n        for i in range(len(s)):\n            for j in range(i+1, len(s)):\n                if s[i]!= s[j]:\n                    rearrange.append(s[i])\n                    rearrange.append(s[j])\n                    break\n        return \"\".join(rearrange)\n"
    },
    {
        "number": 768,
        "title": "Max Chunks To Make Sorted II",
        "difficulty": 2,
        "answer": "        return len(arr) // 2 + 1\n"
    },
    {
        "number": 769,
        "title": "Max Chunks To Make Sorted",
        "difficulty": 1,
        "answer": "        n = len(arr)\n        if n == 0:\n            return 0\n        if n == 1:\n            return 1\n        if n == 2:\n            return 2\n        if n == 3:\n            return 3\n        if n == 4:\n            return 4\n        if n == 5:\n            return 5\n        if n == 6:\n            return 6\n        if n == 7:\n            return 7\n        if n == 8:\n            return 8\n        if n == 9:\n            return 9\n        if n == 10:\n            return 10\n        if n == 11:\n            return 11\n        if n == 12:\n            return 12\n        if n == 13:\n            return 13\n        if n == 14:\n            return 14\n        if n == 15:\n            return 15\n        if n == 16:\n            return 16\n        if n == 17:\n            return 17\n        if n == 18:\n            return 18\n        if n == 19:\n            return 19\n        if n == 20:\n            return 20\n        if n == 21:\n            return 21\n"
    },
    {
        "number": 770,
        "title": "Basic Calculator IV",
        "difficulty": 2,
        "answer": "        # write your code here\n        if not expression:\n            return []\n        if not evalvars:\n            return []\n        if not evalints:\n            return []\n        if not evalvars or not evalints:\n            return []\n        if not evalvars or not evalints:\n            return []\n        if not evalvars or not evalints:\n            return []\n        if not evalvars or not evalints:\n            return []\n        if not evalvars or not evalints:\n            return []\n        if not evalvars or not evalints:\n            return []\n        if not evalvars or not evalints:\n            return []\n        if not evalvars or not evalints:\n            return []\n        if not evalvars or not evalints:\n            return []\n        if not evalvars or not evalints:\n            return []\n        if not evalvars or not evalints:\n            return []\n        if not evalvars or not evalints:\n            return []\n        if not evalvars or not evalints:\n            return []\n        if"
    },
    {
        "number": 771,
        "title": "Jewels and Stones",
        "difficulty": 0,
        "answer": "        count = 0\n        for stone in stones:\n            if stone in jewels:\n                count += 1\n        return count\n"
    },
    {
        "number": 773,
        "title": "Sliding Puzzle",
        "difficulty": 2,
        "answer": "        moves = 0\n        for i in range(len(board)):\n            for j in range(len(board[0])):\n                if board[i][j] == 0:\n                    for k in range(i - 1, i + 2):\n                        for l in range(j - 1, j + 2):\n                            if k >= 0 and k < len(board) and l >= 0 and l < len(board[0]):\n                                if board[k][l] == 0:\n                                    board[k][l] = board[i][j]\n                                    board[i][j] = 0\n                                    moves += 1\n        return moves"
    },
    {
        "number": 775,
        "title": "Global and Local Inversions",
        "difficulty": 1,
        "answer": "        n = len(nums)\n        if n == 0:\n            return False\n        if n == 1:\n            return nums[0] > nums[1]\n        if n == 2:\n            return nums[0] > nums[1] and nums[1] > nums[0]\n        if nums[0] > nums[1]:\n            return self.isIdealPermutation(nums[1:])\n        if nums[n - 1] > nums[n - 2]:\n            return self.isIdealPermutation(nums[:n - 1])\n        return False\n"
    },
    {
        "number": 777,
        "title": "Swap Adjacent in LR String",
        "difficulty": 1,
        "answer": "        if start == end:\n            return True\n        if start[0] == end[0]:\n            return False\n        if start[0] == 'X' and end[0] == 'L':\n            return True\n        if start[0] == 'X' and end[0] == 'R':\n            return False\n        if start[0] == 'L' and end[0] == 'X':\n            return True\n        if start[0] == 'L' and end[0] == 'R':\n            return False\n        if start[0] == 'R' and end[0] == 'X':\n            return True\n        if start[0] == 'R' and end[0] == 'L':\n            return False\n        return False"
    },
    {
        "number": 778,
        "title": "Swim in Rising Water",
        "difficulty": 2,
        "answer": "        m, n = len(grid), len(grid[0])\n        if m == 0 or n == 0:\n            return 0\n        dp = [[0 for _ in range(n)] for _ in range(m)]\n        for i in range(m):\n            for j in range(n):\n                if grid[i][j] == 0:\n                    dp[i][j] = 0\n                elif grid[i][j] == 1:\n                    dp[i][j] = 1\n                elif grid[i][j] == 2:\n                    dp[i][j] = 2\n                elif grid[i][j] == 3:\n                    dp[i][j] = 3\n                elif grid[i][j] == 4:\n                    dp[i][j] = 4\n                elif grid[i][j] == 5:\n                    dp[i][j] = 5\n                elif grid[i][j] == 6:\n                    dp[i][j] = 6\n                elif grid[i][j] == 7:\n                    dp[i][j] ="
    },
    {
        "number": 779,
        "title": "K-th Symbol in Grammar",
        "difficulty": 1,
        "answer": "        table = [[0] * n for _ in range(n)]\n        for i in range(1, n + 1):\n            for j in range(1, n + 1):\n                table[i][j] = table[i - 1][j - 1] + table[i - 1][j]\n        return table[k - 1][n - 1]\n"
    },
    {
        "number": 780,
        "title": "Reaching Points",
        "difficulty": 2,
        "answer": "        if sx == tx and sy == ty:\n            return True\n        if sx == tx or sy == ty:\n            return False\n        if sx == ty:\n            return self.reachingPoints(sx + 1, sy, tx, ty) or self.reachingPoints(sx, sy + 1, tx, ty)\n        if sy == ty:\n            return self.reachingPoints(sx, sy + 1, tx, ty) or self.reachingPoints(sx, sy, tx + 1, ty)\n        return self.reachingPoints(sx + 1, sy + 1, tx, ty) or self.reachingPoints(sx, sy + 1, tx + 1, ty) or self.reachingPoints(sx + 1, sy, tx, ty + 1) or self.reachingPoints(sx, sy, tx + 1, ty + 1)"
    },
    {
        "number": 781,
        "title": "Rabbits in Forest",
        "difficulty": 1,
        "answer": "        answers.sort()\n        answers.reverse()\n        answers.append(0)\n        answers.append(0)\n        answers.append(0)\n        answers.append(0)\n        answers.append(0)\n        answers.append(0)\n        answers.append(0)\n        answers.append(0)\n        answers.append(0)\n        answers.append(0)\n        answers.append(0)\n        answers.append(0)\n        answers.append(0)\n        answers.append(0)\n        answers.append(0)\n        answers.append(0)\n        answers.append(0)\n        answers.append(0)\n        answers.append(0)\n        answers.append(0)\n        answers.append(0)\n        answers.append(0)\n        answers.append(0)\n        answers"
    },
    {
        "number": 782,
        "title": "Transform to Chessboard",
        "difficulty": 2,
        "answer": "        moves = 0\n        for i in range(len(board)):\n            for j in range(len(board[0])):\n                if board[i][j] == 0:\n                    if i > 0 and board[i-1][j] == 1:\n                        moves += 1\n                    if j > 0 and board[i][j-1] == 1:\n                        moves += 1\n                    if i < len(board)-1 and board[i+1][j] == 1:\n                        moves += 1\n                    if j < len(board[0])-1 and board[i][j+1] == 1:\n                        moves += 1\n        return moves\n"
    },
    {
        "number": 783,
        "title": "Minimum Distance Between BST Nodes",
        "difficulty": 0,
        "answer": "        if not root:\n            return 0\n        if not root.left and not root.right:\n            return root.val\n        if not root.left:\n            return min(self.minDiffInBST(root.right), self.minDiffInBST(root.left))\n        if not root.right:\n            return min(self.minDiffInBST(root.left), self.minDiffInBST(root.right))\n        return min(self.minDiffInBST(root.left), self.minDiffInBST(root.right))\n"
    },
    {
        "number": 784,
        "title": "Letter Case Permutation",
        "difficulty": 1,
        "answer": "        res = []\n        for i in range(len(s)):\n            for j in range(len(s)):\n                if i!= j:\n                    res.append(s[i].lower() + s[j].upper())\n        return res\n"
    },
    {
        "number": 785,
        "title": "Is Graph Bipartite?",
        "difficulty": 1,
        "answer": "        n = len(graph)\n        if n == 0:\n            return True\n        if n == 1:\n            return graph[0][0] == 0\n        if n == 2:\n            return graph[0][0] == 0 and graph[1][1] == 0\n        if n == 3:\n            return graph[0][0] == 0 and graph[1][1] == 0 and graph[2][2] == 0\n        if n == 4:\n            return graph[0][0] == 0 and graph[1][1] == 0 and graph[2][2] == 0 and graph[3][3] == 0\n        if n == 5:\n            return graph[0][0] == 0 and graph[1][1] == 0 and graph[2][2] == 0 and graph[3][3] == 0 and graph[4][4] == 0\n        if n == 6:\n            return graph[0][0] == 0 and graph[1][1] == 0 and graph[2][2] == 0 and graph[3][3] == 0 and graph[4][4]"
    },
    {
        "number": 786,
        "title": "K-th Smallest Prime Fraction",
        "difficulty": 1,
        "answer": "        n = len(arr)\n        if k > n:\n            return []\n        if k == 1:\n            return [arr[0], arr[n-1]]\n        if k == 2:\n            return [arr[0], arr[n-1], arr[n-2]]\n        ans = [arr[0], arr[n-1]]\n        for i in range(1, n-k+1):\n            ans.append(arr[i])\n        return ans\n"
    },
    {
        "number": 787,
        "title": "Cheapest Flights Within K Stops",
        "difficulty": 1,
        "answer": "        if n == 1:\n            return flights[0][2]\n        if n == 2:\n            return min(flights[0][2], flights[1][2])\n        if k == 0:\n            return min(flights[0][2], min(flights[1][2], flights[2][2]))\n        if k == 1:\n            return min(flights[0][2], min(flights[1][2], min(flights[2][2], flights[3][2])))\n        if k == 2:\n            return min(flights[0][2], min(flights[1][2], min(flights[2][2], min(flights[3][2], flights[4][2]))))\n        if k == 3:\n            return min(flights[0][2], min(flights[1][2], min(flights[2][2], min(flights[3][2], min(flights[4][2], flights[5][2]))))\n        if k == 4:\n            return min(flights[0"
    },
    {
        "number": 788,
        "title": "Rotated Digits",
        "difficulty": 1,
        "answer": "        return sum(1 for _ in range(n))\n"
    },
    {
        "number": 789,
        "title": "Escape The Ghosts",
        "difficulty": 1,
        "answer": "        m, n = len(ghosts), len(ghosts[0])\n        if m == 0 or n == 0:\n            return True\n        if target[0] < 0 or target[0] >= m or target[1] < 0 or target[1] >= n:\n            return False\n        visited = [[False for _ in range(n)] for _ in range(m)]\n        visited[target[0]][target[1]] = True\n        for i in range(m):\n            for j in range(n):\n                if not visited[i][j]:\n                    if self.canMove(ghosts, i, j, target):\n                        visited[i][j] = True\n                        if self.escapeGhosts(ghosts, target):\n                            return True\n        return False"
    },
    {
        "number": 790,
        "title": "Domino and Tromino Tiling",
        "difficulty": 1,
        "answer": "        return self.helper(n, [])"
    },
    {
        "number": 791,
        "title": "Custom Sort String",
        "difficulty": 1,
        "answer": "        if len(order)!= len(s):\n            return \"\"\n        order = order.lower()\n        s = s.lower()\n        ans = \"\"\n        for i in range(len(s)):\n            if order[i] == s[i]:\n                ans += order[i]\n            else:\n                ans += s[i]\n        return ans\n"
    },
    {
        "number": 792,
        "title": "Number of Matching Subsequences",
        "difficulty": 1,
        "answer": "        if not words:\n            return 0\n        if len(words) == 1:\n            return len(words[0])\n        if len(words) == 2:\n            return len(words[0]) + len(words[1])\n        if len(words) == 3:\n            return len(words[0]) + len(words[1]) + len(words[2])\n        if len(words) == 4:\n            return len(words[0]) + len(words[1]) + len(words[2]) + len(words[3])\n        if len(words) == 5:\n            return len(words[0]) + len(words[1]) + len(words[2]) + len(words[3]) + len(words[4])\n        if len(words) == 6:\n            return len(words[0]) + len(words[1]) + len(words[2]) + len(words[3]) + len(words[4]) + len(words[5])\n        if len(words) == 7:\n            return len(words[0]) + len("
    },
    {
        "number": 793,
        "title": "Preimage Size of Factorial Zeroes Function",
        "difficulty": 2,
        "answer": "        return sum(1 for x in range(1, k+1) if x % 2 == 0)"
    },
    {
        "number": 794,
        "title": "Valid Tic-Tac-Toe State",
        "difficulty": 1,
        "answer": "        # DP\n        # dp[i][j] = dp[i-1][j] + dp[i][j-1] + dp[i-1][j-1]\n        # dp[i][j] = dp[i-1][j] + dp[i][j-1] + dp[i-1][j-1] + dp[i-1][j] + dp[i][j-1] + dp[i-1][j-1]\n        # dp[i][j] = dp[i-1][j] + dp[i][j-1] + dp[i-1][j-1] + dp[i-1][j] + dp[i][j-1] + dp[i-1][j-1] + dp[i-1][j] + dp[i][j-1] + dp[i-1][j-1]\n        # dp[i][j] = dp[i-1][j] + dp[i"
    },
    {
        "number": 795,
        "title": "Number of Subarrays with Bounded Maximum",
        "difficulty": 1,
        "answer": "        ans = 0\n        for i in range(left, right):\n            ans += 1\n            while nums[i] > nums[i-1]:\n                ans += 1\n                i -= 1\n        return ans\n"
    },
    {
        "number": 796,
        "title": "Rotate String",
        "difficulty": 0,
        "answer": "        if len(s)!= len(goal):\n            return False\n        if len(s) == 0:\n            return True\n        if s == goal:\n            return True\n        if s[0]!= goal[0]:\n            return False\n        return self.rotateString(s[1:], goal[1:]) and self.rotateString(s[1:], goal[:-1])\n"
    },
    {
        "number": 797,
        "title": "All Paths From Source to Target",
        "difficulty": 1,
        "answer": "        if not graph:\n            return []\n        n = len(graph)\n        paths = [[0 for _ in range(n)] for _ in range(n)]\n        for i in range(n):\n            for j in range(n):\n                if i == j:\n                    continue\n                for k in range(n):\n                    if k == i or k == j:\n                        continue\n                    paths[i][j] = paths[i][j] + paths[i][k] + paths[k][j]\n        return paths[0]"
    },
    {
        "number": 798,
        "title": "Smallest Rotation with Highest Score",
        "difficulty": 2,
        "answer": "        n = len(nums)\n        if n == 0:\n            return 0\n        if n == 1:\n            return 0\n        if n == 2:\n            return 0\n        if n == 3:\n            return 0\n        if n == 4:\n            return 0\n        if n == 5:\n            return 0\n        if n == 6:\n            return 0\n        if n == 7:\n            return 0\n        if n == 8:\n            return 0\n        if n == 9:\n            return 0\n        if n == 10:\n            return 0\n        if n == 11:\n            return 0\n        if n == 12:\n            return 0\n        if n == 13:\n            return 0\n        if n == 14:\n            return 0\n        if n == 15:\n            return 0\n        if n == 16:\n            return 0\n        if n == 17:\n            return 0\n        if n == 18:\n            return 0\n        if n == 19:\n            return 0\n        if n == 20:\n            return 0\n        if n == 21:\n            return 0"
    },
    {
        "number": 799,
        "title": "Champagne Tower",
        "difficulty": 1,
        "answer": "        if poured <= 0:\n            return 0\n        if query_row == 0 and query_glass == 0:\n            return poured\n        if query_row == 0:\n            return 0.5 * (poured / 2)\n        if query_row == 1:\n            return poured / 2\n        if query_row == 2:\n            return poured / 4\n        if query_row == 3:\n            return poured / 8\n        if query_row == 4:\n            return poured / 16\n        if query_row == 5:\n            return poured / 32\n        if query_row == 6:\n            return poured / 64\n        if query_row == 7:\n            return poured / 128\n        if query_row == 8:\n            return poured / 256\n        if query_row == 9:\n            return poured / 512\n        if query_row == 10:\n            return poured / 1024\n        if query_row == 11:\n            return poured / 2048\n        if query_row == 12:\n            return poured / 4096\n        if query_row == 13:\n            return poured / 8192\n        if"
    },
    {
        "number": 801,
        "title": "Minimum Swaps To Make Sequences Increasing",
        "difficulty": 2,
        "answer": "        nums1.sort()\n        nums2.sort()\n        for i in range(len(nums1)):\n            if nums1[i] > nums2[i]:\n                return i\n        return len(nums1)\n"
    },
    {
        "number": 802,
        "title": "Find Eventual Safe States",
        "difficulty": 1,
        "answer": "        if not graph:\n            return []"
    },
    {
        "number": 803,
        "title": "Bricks Falling When Hit",
        "difficulty": 2,
        "answer": "        m, n = len(grid), len(grid[0])\n        result = [0] * (m * n)\n        for i in range(m * n):\n            if grid[i / n][i % n] == 1:\n                result[i] = hits[i / n][i % n]\n        return result"
    },
    {
        "number": 804,
        "title": "Unique Morse Code Words",
        "difficulty": 0,
        "answer": "        ans = 0\n        for word in words:\n            ans += len(word)\n        return ans"
    },
    {
        "number": 805,
        "title": "Split Array With Same Average",
        "difficulty": 2,
        "answer": "        nums.sort()\n        for i in range(len(nums)):\n            if nums[i] == nums[i+1]:\n                continue\n            if nums[i] + nums[i+1] > nums[i+1]:\n                return True\n            else:\n                return False\n        return True\n"
    },
    {
        "number": 806,
        "title": "Number of Lines To Write String",
        "difficulty": 0,
        "answer": "        result = [0, 0]\n        for i in range(len(s)):\n            if i == 0:\n                result[0] += widths[s[i]]\n            else:\n                result[1] += widths[s[i]]\n                if result[1] > 100:\n                    result[0] += 1\n                    result[1] = widths[s[i]]\n        return result\n"
    },
    {
        "number": 807,
        "title": "Max Increase to Keep City Skyline",
        "difficulty": 1,
        "answer": "        if not grid:\n            return 0"
    },
    {
        "number": 808,
        "title": "Soup Servings",
        "difficulty": 1,
        "answer": "        # type A\n        # type B\n        # type A\n        # type B\n        # type A\n        # type B\n        # type A\n        # type B\n        # type A\n        # type B\n        # type A\n        # type B\n        # type A\n        # type B\n        # type A\n        # type B\n        # type A\n        # type B\n        # type A\n        # type B\n        # type A\n        # type B\n        # type A\n        # type B\n        # type A\n        # type B\n        # type A\n        # type B\n        # type A\n        # type B\n        # type A\n        # type B\n        # type A\n        # type B\n        # type A\n        # type B\n        # type A\n        # type B\n        # type A\n        # type B\n        # type A\n        # type B\n        # type A\n        # type B\n        # type A\n        # type B\n        # type A\n        # type B\n        # type A\n        # type B\n"
    },
    {
        "number": 809,
        "title": "Expressive Words",
        "difficulty": 1,
        "answer": "        # DP\n        # dp[i][j] = dp[i-1][j] + dp[i-1][j-1]\n        # dp[i][j] = dp[i-1][j] + dp[i-1][j-1] + dp[i-1][j-2]\n        # dp[i][j] = dp[i-1][j] + dp[i-1][j-1] + dp[i-1][j-2] + dp[i-1][j-3]\n        # dp[i][j] = dp[i-1][j] + dp[i-1][j-1] + dp[i-1][j-2] + dp[i-1][j-3] + dp[i-1][j-4]\n        # dp[i][j] = dp[i-1][j] + dp[i-1][j-1] + dp[i-1][j-2] + dp"
    },
    {
        "number": 810,
        "title": "Chalkboard XOR Game",
        "difficulty": 2,
        "answer": "        return nums[0] ^ nums[1] ^ nums[2] ^ nums[0] ^ nums[1] ^ nums[2] ^ nums[0] ^ nums[1] ^ nums[2] ^ nums[0] ^ nums[1] ^ nums[2] ^ nums[0] ^ nums[1] ^ nums[2] ^ nums[0] ^ nums[1] ^ nums[2] ^ nums[0] ^ nums[1] ^ nums[2] ^ nums[0] ^ nums[1] ^ nums[2] ^ nums[0] ^ nums[1] ^ nums[2] ^ nums[0] ^ nums[1] ^ nums[2] ^ nums[0] ^ nums[1] ^ nums[2] ^ nums[0] ^ nums[1] ^ nums[2] ^ nums[0] ^ nums[1] ^ nums[2] ^ nums[0] ^ nums[1] ^ nums"
    },
    {
        "number": 811,
        "title": "Subdomain Visit Count",
        "difficulty": 1,
        "answer": "        ret = []\n        for cpdomain in cpdomains:\n            ret.append(cpdomain[:-1])\n            ret.append(cpdomain)\n        return ret"
    },
    {
        "number": 812,
        "title": "Largest Triangle Area",
        "difficulty": 0,
        "answer": "        n = len(points)\n        if n < 3:\n            return 0\n        max_area = 0\n        for i in range(n):\n            for j in range(i + 1, n):\n                for k in range(j + 1, n):\n                    area = points[i][0] * points[j][1] + points[j][0] * points[k][1] + points[k][0] * points[i][1]\n                    max_area = max(max_area, area)\n        return max_area\n"
    },
    {
        "number": 813,
        "title": "Largest Sum of Averages",
        "difficulty": 1,
        "answer": "        n = len(nums)\n        if k > n:\n            return 0\n        if k == 1:\n            return sum(nums)\n        if k == 2:\n            return sum(nums) + sum(nums[1:])\n        if k == 3:\n            return sum(nums) + sum(nums[1:]) + sum(nums[2:])\n        if k == 4:\n            return sum(nums) + sum(nums[1:]) + sum(nums[2:]) + sum(nums[3:])\n        if k == 5:\n            return sum(nums) + sum(nums[1:]) + sum(nums[2:]) + sum(nums[3:]) + sum(nums[4:])\n        if k == 6:\n            return sum(nums) + sum(nums[1:]) + sum(nums[2:]) + sum(nums[3:]) + sum(nums[4:]) + sum(nums[5:])\n        if k == 7"
    },
    {
        "number": 814,
        "title": "Binary Tree Pruning",
        "difficulty": 1,
        "answer": "        if not root:\n            return None\n        if not root.left and not root.right:\n            return root\n        if not root.left:\n            return self.pruneTree(root.right)\n        if not root.right:\n            return self.pruneTree(root.left)\n        return root\n"
    },
    {
        "number": 815,
        "title": "Bus Routes",
        "difficulty": 2,
        "answer": "        if source == target:\n            return 0\n        if source > target:\n            return -1\n        if not routes:\n            return 0\n        if len(routes) == 1:\n            return 1\n        if len(routes) == 2:\n            return 1 + routes[0][0] + routes[1][0]\n        if len(routes) == 3:\n            return 1 + routes[0][0] + routes[1][0] + routes[2][0]\n        if len(routes) == 4:\n            return 1 + routes[0][0] + routes[1][0] + routes[2][0] + routes[3][0]\n        if len(routes) == 5:\n            return 1 + routes[0][0] + routes[1][0] + routes[2][0] + routes[3][0] + routes[4][0]\n        if len(routes) == 6:\n            return 1 + routes[0][0] + routes[1][0] + routes[2][0] + routes["
    },
    {
        "number": 816,
        "title": "Ambiguous Coordinates",
        "difficulty": 1,
        "answer": "        if not s:\n            return []\n        s = s.replace(\" \", \"\")\n        s = s.replace(\",\", \"\")\n        s = s.replace(\".\", \"\")\n        s = s.replace(\"(\", \"\")\n        s = s.replace(\")\", \"\")\n        s = s.replace(\"[\", \"\")\n        s = s.replace(\"]\", \"\")\n        s = s.replace(\"{\", \"\")\n        s = s.replace(\"}\", \"\")\n        s = s.replace(\";\", \"\")\n        s = s.replace(\":\", \"\")\n        s = s.replace(\"+\", \"\")\n        s = s.replace(\"-\", \"\")\n        s = s.replace(\"*\", \"\")\n        s = s.replace(\"/\", \"\")\n        s = s.replace(\"%\", \"\")\n        s = s.replace(\"&\", \"\")\n        s = s.replace(\"|\", \"\")\n        s = s.replace(\"<\", \"\")\n        s = s.replace(\">\", \"\")\n        s"
    },
    {
        "number": 817,
        "title": "Linked List Components",
        "difficulty": 1,
        "answer": "        if not head:\n            return 0\n        if not nums:\n            return 1\n        if head.next is None:\n            return 1\n        if head.next.next is None:\n            return 1\n        if head.next.next.next is None:\n            return 1\n        if head.next.next.next.next is None:\n            return 1\n        if head.next.next.next.next.next is None:\n            return 1\n        if head.next.next.next.next.next.next is None:\n            return 1\n        if head.next.next.next.next.next.next.next is None:\n            return 1\n        if head.next.next.next.next.next.next.next.next is None:\n            return 1\n        if head.next.next.next.next.next.next.next.next.next is None:\n            return 1\n        if head.next.next.next.next.next.next.next.next.next.next is None:\n            return 1\n        if head.next.next.next"
    },
    {
        "number": 818,
        "title": "Race Car",
        "difficulty": 2,
        "answer": "        if target < 0:\n            return 0\n        if target == 0:\n            return 1\n        if target == 1:\n            return 2\n        if target == 2:\n            return 3\n        if target == 3:\n            return 4\n        if target == 4:\n            return 5\n        if target == 5:\n            return 6\n        if target == 6:\n            return 7\n        if target == 7:\n            return 8\n        if target == 8:\n            return 9\n        if target == 9:\n            return 10\n        if target == 10:\n            return 11\n        if target == 11:\n            return 12\n        if target == 12:\n            return 13\n        if target == 13:\n            return 14\n        if target == 14:\n            return 15\n        if target == 15:\n            return 16\n        if target == 16:\n            return 17\n        if target == 17:\n            return 18\n        if target == 18:\n            return 19\n        if target == 19:\n            return 20\n        if target == 20:\n            return 21\n        if target == 21:\n            "
    },
    {
        "number": 819,
        "title": "Most Common Word",
        "difficulty": 0,
        "answer": "        word_dict = {}\n        for word in paragraph.split():\n            word = word.lower()\n            if word not in banned:\n                word_dict[word] = word_dict.get(word, 0) + 1\n        return max(word_dict, key=word_dict.get)\n"
    },
    {
        "number": 820,
        "title": "Short Encoding of Words",
        "difficulty": 1,
        "answer": "        if not words:\n            return 0"
    },
    {
        "number": 821,
        "title": "Shortest Distance to a Character",
        "difficulty": 0,
        "answer": "        ans = []\n        for i in range(len(s)):\n            for j in range(i + 1, len(s) + 1):\n                if s[i] == c and ans and ans[-1] < abs(i - j):\n                    ans[-1] = abs(i - j)\n        return ans\n"
    },
    {
        "number": 822,
        "title": "Card Flipping Game",
        "difficulty": 1,
        "answer": "        n = len(fronts)\n        if n == 0:\n            return 0"
    },
    {
        "number": 823,
        "title": "Binary Trees With Factors",
        "difficulty": 1,
        "answer": "        n = len(arr)\n        if n == 0:\n            return 0\n        if n == 1:\n            return 1\n        if arr[0] == 1:\n            return 1\n        if arr[0] == 2:\n            return 2\n        if arr[0] == 3:\n            return 3\n        if arr[0] == 4:\n            return 4\n        if arr[0] == 5:\n            return 5\n        if arr[0] == 6:\n            return 6\n        if arr[0] == 7:\n            return 7\n        if arr[0] == 8:\n            return 8\n        if arr[0] == 9:\n            return 9\n        if arr[0] == 10:\n            return 10\n        if arr[0] == 11:\n            return 11\n        if arr[0] == 12:\n            return 12\n        if arr[0] == 13:\n            return 13\n        if arr[0] == 14:\n            return 14\n        if arr[0] == 15:\n            return 15\n        if arr[0] == 16:\n"
    },
    {
        "number": 824,
        "title": "Goat Latin",
        "difficulty": 0,
        "answer": "        ret = []\n        for i in range(len(sentence)):\n            if sentence[i].isalpha():\n                ret.append(sentence[i])\n            else:\n                ret.append(sentence[i] + \"ma\")\n        return \"\".join(ret)"
    },
    {
        "number": 825,
        "title": "Friends Of Appropriate Ages",
        "difficulty": 1,
        "answer": "        n = len(ages)\n        if n == 0:\n            return 0\n        if n == 1:\n            return 1\n        if n == 2:\n            return 2\n        if n == 3:\n            return 3\n        if n == 4:\n            return 4\n        if n == 5:\n            return 5\n        if n == 6:\n            return 6\n        if n == 7:\n            return 7\n        if n == 8:\n            return 8\n        if n == 9:\n            return 9\n        if n == 10:\n            return 10\n        if n == 11:\n            return 11\n        if n == 12:\n            return 12\n        if n == 13:\n            return 13\n        if n == 14:\n            return 14\n        if n == 15:\n            return 15\n        if n == 16:\n            return 16\n        if n == 17:\n            return 17\n        if n == 18:\n            return 18\n        if n == 19:\n            return 19\n        if n == 20:\n            return 20\n        if n == 21:\n            return 21\n"
    },
    {
        "number": 826,
        "title": "Most Profit Assigning Work",
        "difficulty": 1,
        "answer": "        # DP\n        # dp[i][j] = max(dp[i-1][j], dp[i-1][j-worker[j]] + profit[i])\n        # dp[i][j] = max(dp[i-1][j], dp[i-1][j-worker[j]] + profit[i])\n        # dp[i][j] = max(dp[i-1][j], dp[i-1][j-worker[j]] + profit[i])\n        # dp[i][j] = max(dp[i-1][j], dp[i-1][j-worker[j]] + profit[i])\n        # dp[i][j] = max(dp[i-1][j], dp[i-1][j-worker[j]] + profit[i])\n        # dp[i][j] = max(dp[i-1][j], dp[i-1][j-worker[j]] + profit[i])\n        # dp[i][j] = max("
    },
    {
        "number": 827,
        "title": "Making A Large Island",
        "difficulty": 2,
        "answer": "        m, n = len(grid), len(grid[0])\n        if m == 0 or n == 0:\n            return 0\n        grid = [[0] * n for _ in range(m)]\n        for i in range(m):\n            for j in range(n):\n                if grid[i][j] == 0:\n                    grid[i][j] = 1\n                    if i > 0 and grid[i - 1][j] == 0:\n                        grid[i - 1][j] = 1\n                    if i < m - 1 and grid[i + 1][j] == 0:\n                        grid[i + 1][j] = 1\n                    if j > 0 and grid[i][j - 1] == 0:\n                        grid[i][j - 1] = 1\n                    if j < n - 1 and grid[i][j + 1] == 0:\n                        grid[i][j + 1] = 1\n        return max(sum(row) for row in grid)\n"
    },
    {
        "number": 828,
        "title": "Count Unique Characters of All Substrings of a Given String",
        "difficulty": 2,
        "answer": "        n = len(s)\n        ans = 0\n        for i in range(n):\n            for j in range(i+1, n):\n                if s[i] == s[j]:\n                    ans += 1\n        return ans"
    },
    {
        "number": 829,
        "title": "Consecutive Numbers Sum",
        "difficulty": 2,
        "answer": "        if n < 0:\n            return 0\n        if n == 0:\n            return 1\n        if n == 1:\n            return 2\n        if n == 2:\n            return 3\n        if n == 3:\n            return 4\n        if n == 4:\n            return 5\n        if n == 5:\n            return 6\n        if n == 6:\n            return 7\n        if n == 7:\n            return 8\n        if n == 8:\n            return 9\n        if n == 9:\n            return 10\n        if n == 10:\n            return 11\n        if n == 11:\n            return 12\n        if n == 12:\n            return 13\n        if n == 13:\n            return 14\n        if n == 14:\n            return 15\n        if n == 15:\n            return 16\n        if n == 16:\n            return 17\n        if n == 17:\n            return 18\n        if n == 18:\n            return 19\n        if n == 19:\n            return 20\n        if n == 20:\n            return 21\n        if n == 21:\n            "
    },
    {
        "number": 830,
        "title": "Positions of Large Groups",
        "difficulty": 0,
        "answer": "        result = []\n        for i in range(len(s)):\n            if s[i] == s[i - 1]:\n                result.append([i, i + 1])\n        return sorted(result, key=lambda x: x[0])"
    },
    {
        "number": 831,
        "title": "Masking Personal Information",
        "difficulty": 1,
        "answer": "        name = s.split('@')[0].lower()\n        domain = s.split('@')[1].lower()\n        if len(domain) == 0:\n            return s\n        if len(domain) == 1:\n            return ''.join(['*' * len(name), name, '*' * len(domain)])\n        if len(domain) == 2:\n            return ''.join(['*' * len(name), name, '*' * len(domain[0]), domain[0], '*' * len(domain[1]), domain[1]])\n        if len(domain) == 3:\n            return ''.join(['*' * len(name), name, '*' * len(domain[0]), domain[0], '*' * len(domain[1]), domain[1], '*' * len(domain[2]), domain[2]])\n        if len(domain) == 4:\n            return ''.join(['*' * len(name), name, '*' * len(domain[0]), domain[0], '*' *"
    },
    {
        "number": 832,
        "title": "Flipping an Image",
        "difficulty": 0,
        "answer": "        n = len(image)\n        for i in range(n):\n            for j in range(n):\n                if image[i][j] == 0:\n                    image[i][j] = 1\n                else:\n                    image[i][j] = 0\n        for i in range(n):\n            for j in range(n):\n                if image[i][j] == 1:\n                    image[i][j] = 0\n                else:\n                    image[i][j] = 1\n        return image\n"
    },
    {
        "number": 833,
        "title": "Find And Replace in String",
        "difficulty": 1,
        "answer": "        result = \"\"\n        for i in range(len(indices)):\n            if indices[i] < len(s):\n                result += s[indices[i]:indices[i]+len(sources[i])]\n                result += targets[i]\n            else:\n                result += s[indices[i]:]\n        return result"
    },
    {
        "number": 834,
        "title": "Sum of Distances in Tree",
        "difficulty": 2,
        "answer": "        ans = [0] * n\n        for e in edges:\n            ans[e[0]] += e[1]\n            ans[e[1]] += e[1]\n        return ans"
    },
    {
        "number": 835,
        "title": "Image Overlap",
        "difficulty": 1,
        "answer": "        n = len(img1)\n        m = len(img2)\n        if n!= m:\n            return 0\n        res = 0\n        for i in range(n):\n            for j in range(m):\n                if img1[i][j] == 1 and img2[i][j] == 1:\n                    res += 1\n        return res"
    },
    {
        "number": 836,
        "title": "Rectangle Overlap",
        "difficulty": 0,
        "answer": "        if rec1[0] > rec2[0] or rec1[1] > rec2[1]:\n            return False\n        if rec1[0] + rec1[2] < rec2[0] or rec1[1] + rec1[3] < rec2[1]:\n            return False\n        return True\n"
    },
    {
        "number": 837,
        "title": "New 21 Game",
        "difficulty": 1,
        "answer": "        ans = 0\n        for i in range(1, k+1):\n            ans += 1.0 / (i+1) * (maxPts - i)\n        return ans\n"
    },
    {
        "number": 838,
        "title": "Push Dominoes",
        "difficulty": 1,
        "answer": "        res = []\n        for i in range(len(dominoes)):\n            if dominoes[i] == 'L':\n                res.append('L')\n            elif dominoes[i] == 'R':\n                res.append('R')\n            else:\n                res.append('.')\n        return ''.join(res)"
    },
    {
        "number": 839,
        "title": "Similar String Groups",
        "difficulty": 2,
        "answer": "        ans = 0\n        for i in range(len(strs)):\n            for j in range(i+1, len(strs)):\n                if strs[i] == strs[j]:\n                    ans += 1\n        return ans\n"
    },
    {
        "number": 840,
        "title": "Magic Squares In Grid",
        "difficulty": 1,
        "answer": "        n = len(grid)\n        if n == 0:\n            return 0\n        if n == 1:\n            return 1\n        if n == 2:\n            return 1\n        if n == 3:\n            return 1\n        if n == 4:\n            return 1\n        if n == 5:\n            return 1\n        if n == 6:\n            return 1\n        if n == 7:\n            return 1\n        if n == 8:\n            return 1\n        if n == 9:\n            return 1\n        if n == 10:\n            return 1\n        if n == 11:\n            return 1\n        if n == 12:\n            return 1\n        if n == 13:\n            return 1\n        if n == 14:\n            return 1\n        if n == 15:\n            return 1\n        if n == 16:\n            return 1\n        if n == 17:\n            return 1\n        if n == 18:\n            return 1\n        if n == 19:\n            return 1\n        if n == 20:\n            return 1\n        if n == 21:\n            return 1\n"
    },
    {
        "number": 841,
        "title": "Keys and Rooms",
        "difficulty": 1,
        "answer": "        if not rooms:\n            return True\n        visited = [False] * len(rooms)\n        for i in range(len(rooms)):\n            if visited[i]:\n                continue\n            for key in rooms[i]:\n                visited[key] = True\n                if all(visited[j] for j in range(i + 1, len(rooms))):\n                    return True\n        return False\n"
    },
    {
        "number": 842,
        "title": "Split Array into Fibonacci Sequence",
        "difficulty": 1,
        "answer": "        if len(num) == 0:\n            return []\n        if len(num) == 1:\n            return [int(num)]\n        if len(num) == 2:\n            return [int(num[0]), int(num[1])]\n        if len(num) == 3:\n            return [int(num[0]), int(num[1]), int(num[2])]\n        if len(num) == 4:\n            return [int(num[0]), int(num[1]), int(num[2]), int(num[3])]\n        if len(num) == 5:\n            return [int(num[0]), int(num[1]), int(num[2]), int(num[3]), int(num[4])]\n        if len(num) == 6:\n            return [int(num[0]), int(num[1]), int(num[2]), int(num[3]), int(num[4]), int(num[5])]\n        if len(num) == 7:\n            return [int(num[0]), int(num["
    },
    {
        "number": 843,
        "title": "Guess the Word",
        "difficulty": 2,
        "answer": "        secret = secret.lower()\n        words = words.lower()\n        allowedGuesses = allowedGuesses\n        secret_matches = 0\n        for word in words:\n            if word == secret:\n                secret_matches += 1\n        if secret_matches == 0:\n            return \"Either you took too many guesses, or you did not find the secret word.\"\n        elif secret_matches == 1:\n            return \"You guessed the secret word correctly.\"\n        else:\n            return \"You guessed the secret word correctly.\"\n"
    },
    {
        "number": 844,
        "title": "Backspace String Compare",
        "difficulty": 0,
        "answer": "        if len(s)!= len(t):\n            return False\n        for i in range(len(s)):\n            if s[i]!= t[i]:\n                return False\n        return True\n"
    },
    {
        "number": 845,
        "title": "Longest Mountain in Array",
        "difficulty": 1,
        "answer": "        if len(arr) < 3:\n            return 0\n        max_length = 0\n        for i in range(len(arr)):\n            if arr[i] > arr[i + 1]:\n                max_length = max(max_length, i + 1)\n        return max_length\n"
    },
    {
        "number": 846,
        "title": "Hand of Straights",
        "difficulty": 1,
        "answer": "        if len(hand) == 0:\n            return False\n        if len(hand) == 1:\n            return True\n        if len(hand) % groupSize!= 0:\n            return False\n        if len(hand) == 2:\n            return True\n        if len(hand) == 3:\n            return True\n        if len(hand) == 4:\n            return True\n        if len(hand) == 5:\n            return True\n        if len(hand) == 6:\n            return True\n        if len(hand) == 7:\n            return True\n        if len(hand) == 8:\n            return True\n        if len(hand) == 9:\n            return True\n        if len(hand) == 10:\n            return True\n        if len(hand) == 11:\n            return True\n        if len(hand) == 12:\n            return True\n        if len(hand) == 13:\n            return True\n        if len(hand) == 14:\n            return True\n        if len(hand) == 15:\n            return True\n        if len(hand) == 16:"
    },
    {
        "number": 847,
        "title": "Shortest Path Visiting All Nodes",
        "difficulty": 2,
        "answer": "        if not graph: return 0\n        n = len(graph)\n        visited = [False] * n\n        queue = []\n        for i in range(n):\n            if not visited[i]:\n                queue.append(i)\n                visited[i] = True\n        shortest = 0\n        while queue:\n            u = queue.pop(0)\n            shortest += 1\n            for v in graph[u]:\n                if not visited[v]:\n                    queue.append(v)\n                    visited[v] = True\n        return shortest"
    },
    {
        "number": 848,
        "title": "Shifting Letters",
        "difficulty": 1,
        "answer": "        result = \"\"\n        for i in range(len(s)):\n            for j in range(shifts[i]):\n                result += s[i]\n        return result"
    },
    {
        "number": 849,
        "title": "Maximize Distance to Closest Person",
        "difficulty": 1,
        "answer": "        n = len(seats)\n        if n == 0:\n            return 0\n        if n == 1:\n            return 0 if seats[0] == 1 else 1\n        if n == 2:\n            return 1 if seats[0] == 1 and seats[1] == 0 else 2\n        dp = [0] * (n + 1)\n        dp[0] = 0\n        for i in range(1, n + 1):\n            dp[i] = max(dp[i - 1] + 1, dp[i - 1] + 1 if seats[i - 1] == 1 else dp[i - 1] + 2)\n        return dp[n]\n"
    },
    {
        "number": 850,
        "title": "Rectangle Area II",
        "difficulty": 2,
        "answer": "        n = len(rectangles)\n        if n == 0:\n            return 0\n        if n == 1:\n            return rectangles[0][2] * rectangles[0][3]\n        if n == 2:\n            return rectangles[0][2] * rectangles[1][3] + rectangles[1][2] * rectangles[0][3]\n        if n == 3:\n            return rectangles[0][2] * rectangles[1][3] + rectangles[1][2] * rectangles[2][3] + rectangles[2][2] * rectangles[0][3]\n        if n == 4:\n            return rectangles[0][2] * rectangles[1][3] + rectangles[1][2] * rectangles[2][3] + rectangles[2][2] * rectangles[3][3] + rectangles[3][2] * rectangles[0][3]\n        if n == 5:\n            return rectangles[0][2] * rectangles[1][3] + rectangles[1][2] * rect"
    },
    {
        "number": 851,
        "title": "Loud and Rich",
        "difficulty": 1,
        "answer": "        ans = []\n        for i in range(len(quiet)):\n            if quiet[i] == 0:\n                ans.append(i)\n        return ans\n"
    },
    {
        "number": 852,
        "title": "Peak Index in a Mountain Array",
        "difficulty": 1,
        "answer": "        # O(log(arr.length))\n        # O(log(arr.length))\n        # O(log(arr.length))\n        # O(log(arr.length))\n        # O(log(arr.length))\n        # O(log(arr.length))\n        # O(log(arr.length))\n        # O(log(arr.length))\n        # O(log(arr.length))\n        # O(log(arr.length))\n        # O(log(arr.length))\n        # O(log(arr.length))\n        # O(log(arr.length))\n        # O(log(arr.length))\n        # O(log(arr.length))\n        # O(log(arr.length))\n        # O(log(arr.length))\n        # O(log(arr.length))\n        # O(log(arr.length))\n        # O(log(arr.length))\n        # O(log(arr.length))\n        # O(log(arr.length))\n        # O(log(arr."
    },
    {
        "number": 853,
        "title": "Car Fleet",
        "difficulty": 1,
        "answer": "        n = len(position)\n        if n == 0:\n            return 0\n        if target == position[0]:\n            return 1\n        if target > position[0]:\n            return 0\n        if target < position[0]:\n            return 0\n        if target == position[0]:\n            return 1\n        if target == position[0]:\n            return 1\n        if target == position[0]:\n            return 1\n        if target == position[0]:\n            return 1\n        if target == position[0]:\n            return 1\n        if target == position[0]:\n            return 1\n        if target == position[0]:\n            return 1\n        if target == position[0]:\n            return 1\n        if target == position[0]:\n            return 1\n        if target == position[0]:\n            return 1\n        if target == position[0]:\n            return 1\n        if target == position[0]:\n            return 1\n        if target == position[0]:\n            return 1\n        if target == position[0]:\n            return 1\n        if target == position[0]:\n            "
    },
    {
        "number": 854,
        "title": "K-Similar Strings",
        "difficulty": 2,
        "answer": "        # DP\n        # dp[i][j] = min(dp[i-1][j], dp[i-1][j-1], dp[i-1][j-2])\n        # dp[i][j] = min(dp[i-1][j], dp[i-1][j-1], dp[i-1][j-2])\n        # dp[i][j] = min(dp[i-1][j], dp[i-1][j-1], dp[i-1][j-2])\n        # dp[i][j] = min(dp[i-1][j], dp[i-1][j-1], dp[i-1][j-2])\n        # dp[i][j] = min(dp[i-1][j], dp[i-1][j-1], dp[i-1][j-2])\n        # dp[i][j] = min(dp[i-1][j], dp[i-1][j-1],"
    },
    {
        "number": 855,
        "title": "Exam Room",
        "difficulty": 1,
        "answer": "        pass"
    },
    {
        "number": 856,
        "title": "Score of Parentheses",
        "difficulty": 1,
        "answer": "        stack = []\n        for c in s:\n            if c == '(':\n                stack.append('(')\n            elif c == ')':\n                if len(stack) == 0:\n                    return 0\n                else:\n                    stack.pop()\n            else:\n                continue\n        return len(stack)\n"
    },
    {
        "number": 857,
        "title": "Minimum Cost to Hire K Workers",
        "difficulty": 2,
        "answer": "        if k == 0:\n            return 0\n        if k == 1:\n            return min(quality[0] * wage[0], quality[1] * wage[1])\n        if k == 2:\n            return min(quality[0] * wage[0], min(quality[1] * wage[1], quality[2] * wage[2]))\n        if k == 3:\n            return min(quality[0] * wage[0], min(quality[1] * wage[1], min(quality[2] * wage[2], quality[3] * wage[3])))\n        if k == 4:\n            return min(quality[0] * wage[0], min(quality[1] * wage[1], min(quality[2] * wage[2], min(quality[3] * wage[3], quality[4] * wage[4]))))\n        if k == 5:\n            return min(quality[0] * wage[0], min(quality[1] * wage[1], min(quality[2] * wage[2], min(quality[3] * wage"
    },
    {
        "number": 858,
        "title": "Mirror Reflection",
        "difficulty": 1,
        "answer": "        # corner case\n        if p == 1 and q == 1:\n            return 0\n        # corner case\n        if p == 1 and q == 2:\n            return 1\n        # corner case\n        if p == 2 and q == 1:\n            return 2\n        # corner case\n        if p == 2 and q == 2:\n            return 3\n        # corner case\n        if p == 3 and q == 1:\n            return 4\n        # corner case\n        if p == 3 and q == 2:\n            return 5\n        # corner case\n        if p == 4 and q == 1:\n            return 6\n        # corner case\n        if p == 4 and q == 2:\n            return 7\n        # corner case\n        if p == 5 and q == 1:\n            return 8\n        # corner case\n        if p == 5 and q == 2:\n            return 9\n        # corner case\n        if p == 6 and q == 1:\n            return 10\n        # corner case\n        if p == 6 and q == 2:\n            return 11\n        # corner case\n        if p == 7"
    },
    {
        "number": 859,
        "title": "Buddy Strings",
        "difficulty": 0,
        "answer": "        if len(s)!= len(goal):\n            return False\n        for i in range(len(s)):\n            if s[i]!= goal[i]:\n                return False\n        return True\n"
    },
    {
        "number": 860,
        "title": "Lemonade Change",
        "difficulty": 0,
        "answer": "        if len(bills) == 0:\n            return True\n        if len(bills) == 1:\n            return True\n        if len(bills) == 2:\n            return True\n        if len(bills) == 3:\n            return True\n        if len(bills) == 4:\n            return True\n        if len(bills) == 5:\n            return True\n        if len(bills) == 6:\n            return True\n        if len(bills) == 7:\n            return True\n        if len(bills) == 8:\n            return True\n        if len(bills) == 9:\n            return True\n        if len(bills) == 10:\n            return True\n        if len(bills) == 11:\n            return True\n        if len(bills) == 12:\n            return True\n        if len(bills) == 13:\n            return True\n        if len(bills) == 14:\n            return True\n        if len(bills) == 15:\n            return True\n        if len(bills) == 16:"
    },
    {
        "number": 861,
        "title": "Score After Flipping Matrix",
        "difficulty": 1,
        "answer": "        m = len(grid)\n        n = len(grid[0])\n        if m == 0 or n == 0:\n            return 0\n        if m == 1 or n == 1:\n            return grid[0][0]\n        if m == 2 or n == 2:\n            return grid[0][0] + grid[1][0]\n        if m == 3 or n == 3:\n            return grid[0][0] + grid[1][0] + grid[2][0]\n        if m == 4 or n == 4:\n            return grid[0][0] + grid[1][0] + grid[2][0] + grid[3][0]\n        if m == 5 or n == 5:\n            return grid[0][0] + grid[1][0] + grid[2][0] + grid[3][0] + grid[4][0]\n        if m == 6 or n == 6:\n            return grid[0][0] + grid[1][0] + grid[2][0] + grid[3][0] + grid[4][0]"
    },
    {
        "number": 862,
        "title": "Shortest Subarray with Sum at Least K",
        "difficulty": 2,
        "answer": "        # DP\n        # dp[i] = min(dp[i-1], dp[i-2]) + nums[i]\n        # dp[0] = nums[0]\n        # dp[i] = min(dp[i-1], dp[i-2]) + nums[i]\n        # dp[0] = nums[0]\n        # dp[i] = min(dp[i-1], dp[i-2]) + nums[i]\n        # dp[0] = nums[0]\n        # dp[i] = min(dp[i-1], dp[i-2]) + nums[i]\n        # dp[0] = nums[0]\n        # dp[i] = min(dp[i-1], dp[i-2]) + nums[i]\n        # dp[0] = nums[0]\n        # dp[i] = min(dp[i-1], dp[i-2]) + nums"
    },
    {
        "number": 863,
        "title": "All Nodes Distance K in Binary Tree",
        "difficulty": 1,
        "answer": "        ret = []\n        if root is None:\n            return ret\n        if root.val == target.val:\n            ret.append(root.val)\n        else:\n            ret.append(self.distanceK(root.left, target, k))\n            ret.append(self.distanceK(root.right, target, k))\n        return ret"
    },
    {
        "number": 864,
        "title": "Shortest Path to Get All Keys",
        "difficulty": 2,
        "answer": "        m = len(grid)\n        n = len(grid[0])\n        if m == 0 or n == 0:\n            return 0\n        if m == 1 or n == 1:\n            return 1\n        if m == 2 or n == 2:\n            return 2\n        if m == 3 or n == 3:\n            return 3\n        if m == 4 or n == 4:\n            return 4\n        if m == 5 or n == 5:\n            return 5\n        if m == 6 or n == 6:\n            return 6\n        if m == 7 or n == 7:\n            return 7\n        if m == 8 or n == 8:\n            return 8\n        if m == 9 or n == 9:\n            return 9\n        if m == 10 or n == 10:\n            return 10\n        if m == 11 or n == 11:\n            return 11\n        if m == 12 or n == 12:\n            return 12\n        if m == 13 or n == 13:\n            return 13\n        if m == 14 or n == 14:\n            return 14\n        if m == 15 or n"
    },
    {
        "number": 865,
        "title": "Smallest Subtree with all the Deepest Nodes",
        "difficulty": 1,
        "answer": "        if not root:\n            return None\n        if not root.left and not root.right:\n            return root\n        if not root.left:\n            return self.subtreeWithAllDeepest(root.right)\n        if not root.right:\n            return self.subtreeWithAllDeepest(root.left)\n        return self.subtreeWithAllDeepest(root.left)"
    },
    {
        "number": 866,
        "title": "Prime Palindrome",
        "difficulty": 1,
        "answer": "        if n < 2:\n            return n\n        if n % 2 == 0:\n            return n\n        if n % 3 == 0:\n            return n\n        if n % 5 == 0:\n            return n\n        if n % 7 == 0:\n            return n\n        if n % 11 == 0:\n            return n\n        if n % 13 == 0:\n            return n\n        if n % 17 == 0:\n            return n\n        if n % 19 == 0:\n            return n\n        if n % 23 == 0:\n            return n\n        if n % 29 == 0:\n            return n\n        if n % 31 == 0:\n            return n\n        if n % 37 == 0:\n            return n\n        if n % 41 == 0:\n            return n\n        if n % 43 == 0:\n            return n\n        if n % 47 == 0:\n            return n\n        if n % 53 == 0:\n            return n\n        if n % 59 == 0:\n            return n\n        if n % 61 == 0:\n            return n\n        if n % 67"
    },
    {
        "number": 867,
        "title": "Transpose Matrix",
        "difficulty": 0,
        "answer": "        if not matrix:\n            return []\n        m = len(matrix)\n        n = len(matrix[0])\n        ans = [[0 for _ in range(n)] for _ in range(m)]\n        for i in range(m):\n            for j in range(n):\n                ans[i][j] = matrix[i][j]\n        for i in range(m):\n            for j in range(n):\n                if i == j:\n                    ans[i][j] = 0\n                elif i > j:\n                    ans[i][j] = ans[i-1][j]\n                else:\n                    ans[i][j] = ans[i][j-1]\n        return ans\n"
    },
    {
        "number": 868,
        "title": "Binary Gap",
        "difficulty": 0,
        "answer": "        if n == 0:\n            return 0\n        if n == 1:\n            return 1\n        if n == 2:\n            return 2\n        if n == 3:\n            return 3\n        if n == 4:\n            return 4\n        if n == 5:\n            return 5\n        if n == 6:\n            return 6\n        if n == 7:\n            return 7\n        if n == 8:\n            return 8\n        if n == 9:\n            return 9\n        if n == 10:\n            return 10\n        if n == 11:\n            return 11\n        if n == 12:\n            return 12\n        if n == 13:\n            return 13\n        if n == 14:\n            return 14\n        if n == 15:\n            return 15\n        if n == 16:\n            return 16\n        if n == 17:\n            return 17\n        if n == 18:\n            return 18\n        if n == 19:\n            return 19\n        if n == 20:\n            return 20\n        if n == 21:\n            return 21\n        if n == 22:\n            "
    },
    {
        "number": 869,
        "title": "Reordered Power of 2",
        "difficulty": 1,
        "answer": "        # check if n is a power of 2\n        if n == 0:\n            return False\n        # check if n is a power of 2\n        if n == 1:\n            return True\n        # check if n is a power of 2\n        if n == 2:\n            return True\n        # check if n is a power of 2\n        if n == 3:\n            return True\n        # check if n is a power of 2\n        if n == 4:\n            return True\n        # check if n is a power of 2\n        if n == 5:\n            return True\n        # check if n is a power of 2\n        if n == 6:\n            return True\n        # check if n is a power of 2\n        if n == 7:\n            return True\n        # check if n is a power of 2\n        if n == 8:\n            return True\n        # check if n is a power of 2\n        if n == 9:\n            return True\n        # check if n is a power of 2\n        if n == 10:\n            return True\n        # check if n is a power"
    },
    {
        "number": 870,
        "title": "Advantage Shuffle",
        "difficulty": 1,
        "answer": "        nums1.sort()\n        nums2.sort()\n        ans = []\n        for i in range(len(nums1)):\n            if nums1[i] > nums2[i]:\n                ans.append(nums1[i])\n        return ans\n"
    },
    {
        "number": 871,
        "title": "Minimum Number of Refueling Stops",
        "difficulty": 2,
        "answer": "        # O(n^2)\n        # dp[i][j] = min(dp[i-1][j], dp[i-1][j-1]) + 1 if i > 0 and j > 0 and stations[i-1][j-1] > 0\n        dp = [[0 for _ in range(len(stations))] for _ in range(len(stations))]\n        dp[0][0] = startFuel\n        for i in range(1, len(stations)):\n            for j in range(1, len(stations[i])):\n                dp[i][j] = min(dp[i-1][j], dp[i-1][j-1]) + 1\n        return dp[-1][-1]"
    },
    {
        "number": 872,
        "title": "Leaf-Similar Trees",
        "difficulty": 0,
        "answer": "        if root1 is None and root2 is None:\n            return True\n        elif root1 is None or root2 is None:\n            return False\n        elif root1.val!= root2.val:\n            return False\n        else:\n            return self.leafSimilar(root1.left, root2.left) and self.leafSimilar(root1.right, root2.right)\n"
    },
    {
        "number": 873,
        "title": "Length of Longest Fibonacci Subsequence",
        "difficulty": 1,
        "answer": "        if len(arr) == 0:\n            return 0\n        if len(arr) == 1:\n            return 1\n        if len(arr) == 2:\n            return 2\n        if arr[0] == 1:\n            return 1\n        if arr[0] == 2:\n            return 2\n        if arr[0] == 3:\n            return 3\n        if arr[0] == 4:\n            return 4\n        if arr[0] == 5:\n            return 5\n        if arr[0] == 6:\n            return 6\n        if arr[0] == 7:\n            return 7\n        if arr[0] == 8:\n            return 8\n        if arr[0] == 9:\n            return 9\n        if arr[0] == 10:\n            return 10\n        if arr[0] == 11:\n            return 11\n        if arr[0] == 12:\n            return 12\n        if arr[0] == 13:\n            return 13\n        if arr[0] == 14:\n            return 14\n        if arr[0] == 15:\n            return"
    },
    {
        "number": 874,
        "title": "Walking Robot Simulation",
        "difficulty": 1,
        "answer": "        m, n = len(commands), len(obstacles)\n        if m == 0 or n == 0:\n            return 0\n        if m == 1:\n            return min(commands[0] ** 2, obstacles[0][0] ** 2, obstacles[0][1] ** 2)\n        if n == 1:\n            return min(commands[0] ** 2, obstacles[0][0] ** 2, obstacles[0][1] ** 2)\n        if m == 2:\n            return min(commands[0] ** 2, obstacles[0][0] ** 2, obstacles[0][1] ** 2) + min(commands[1] ** 2, obstacles[1][0] ** 2, obstacles[1][1] ** 2)\n        if n == 2:\n            return min(commands[0] ** 2, obstacles[0][0] ** 2, obstacles[0][1] ** 2) + min(commands[1] ** 2, obstacles[1][0] ** 2, obstacles[1][1] ** 2)\n        if m == 3:\n            "
    },
    {
        "number": 875,
        "title": "Koko Eating Bananas",
        "difficulty": 1,
        "answer": "        n = len(piles)\n        if n == 0:\n            return 0\n        if n == 1:\n            return piles[0]\n        if n == 2:\n            return min(piles[0], piles[1])\n        if n == 3:\n            return min(piles[0], min(piles[1], piles[2]))\n        if n == 4:\n            return min(piles[0], min(piles[1], min(piles[2], piles[3])))\n        if n == 5:\n            return min(piles[0], min(piles[1], min(piles[2], min(piles[3], piles[4]))))\n        if n == 6:\n            return min(piles[0], min(piles[1], min(piles[2], min(piles[3], min(piles[4], piles[5]))))\n        if n == 7:\n            return min(piles[0], min(piles[1], min(piles[2], min(piles[3],"
    },
    {
        "number": 876,
        "title": "Middle of the Linked List",
        "difficulty": 0,
        "answer": "        if head is None:\n            return None\n        slow = head\n        fast = head\n        while fast and fast.next:\n            slow = slow.next\n            fast = fast.next.next\n        return slow"
    },
    {
        "number": 877,
        "title": "Stone Game",
        "difficulty": 1,
        "answer": "        # DP\n        # dp[i][j] = dp[i-1][j] + dp[i-1][j-1]\n        # dp[i][j] = dp[i-1][j] + dp[i-1][j-1] + dp[i-1][j-2]\n        # dp[i][j] = dp[i-1][j] + dp[i-1][j-1] + dp[i-1][j-2] + dp[i-1][j-3]\n        # dp[i][j] = dp[i-1][j] + dp[i-1][j-1] + dp[i-1][j-2] + dp[i-1][j-3] + dp[i-1][j-4]\n        # dp[i][j] = dp[i-1][j] + dp[i-1][j-1] + dp[i-1][j-2] + dp"
    },
    {
        "number": 878,
        "title": "Nth Magical Number",
        "difficulty": 2,
        "answer": "        if n == 1:\n            return a\n        if n == 2:\n            return b\n        if n == 3:\n            return a * b\n        if n == 4:\n            return a * b * a\n        if n == 5:\n            return a * b * a * b\n        if n == 6:\n            return a * b * a * b * a\n        if n == 7:\n            return a * b * a * b * a * b\n        if n == 8:\n            return a * b * a * b * a * b * a\n        if n == 9:\n            return a * b * a * b * a * b * a * b\n        if n == 10:\n            return a * b * a * b * a * b * a * b * a\n        if n == 11:\n            return a * b * a * b * a * b * a * b * a * b\n        if n == 12:\n            return a * b * a * b * a * b * a * b * a * b * a\n        if n == 13:\n            "
    },
    {
        "number": 879,
        "title": "Profitable Schemes",
        "difficulty": 2,
        "answer": "        # https://discuss.leetcode.com/topic/83565/java-solution-with-explanation\n        # https://discuss.leetcode.com/topic/83565/java-solution-with-explanation\n        # https://discuss.leetcode.com/topic/83565/java-solution-with-explanation\n        # https://discuss.leetcode.com/topic/83565/java-solution-with-explanation\n        # https://discuss.leetcode.com/topic/83565/java-solution-with-explanation\n        # https://discuss.leetcode.com/topic/83565/java-solution-with-explanation\n        # https://discuss.leetcode.com/topic/83565/java-solution-with-explanation\n        # https://discuss.leetcode.com/topic/83565/java-solution-with-explanation\n        # https://discuss.leetcode"
    },
    {
        "number": 880,
        "title": "Decoded String at Index",
        "difficulty": 1,
        "answer": "        if not s or k < 1:\n            return \"\"\n        tape = \"\"\n        for i in range(k):\n            if i == 0:\n                tape += s[0]\n            else:\n                tape += s[i]\n        return tape[::-1]\n"
    },
    {
        "number": 881,
        "title": "Boats to Save People",
        "difficulty": 1,
        "answer": "        people.sort()\n        res = 0\n        for i in range(len(people)):\n            res += min(people[i], limit - res)\n        return res\n"
    },
    {
        "number": 882,
        "title": "Reachable Nodes In Subdivided Graph",
        "difficulty": 2,
        "answer": "        if not edges:\n            return 0\n        m = len(edges)\n        if m == 1:\n            return 1\n        if m == 2:\n            return edges[0][2]\n        if m == 3:\n            return edges[0][2] + edges[1][2]\n        if m == 4:\n            return edges[0][2] + edges[1][2] + edges[2][2]\n        if m == 5:\n            return edges[0][2] + edges[1][2] + edges[2][2] + edges[3][2]\n        if m == 6:\n            return edges[0][2] + edges[1][2] + edges[2][2] + edges[3][2] + edges[4][2]\n        if m == 7:\n            return edges[0][2] + edges[1][2] + edges[2][2] + edges[3][2] + edges[4][2] + edges[5][2]\n        if m == 8:\n            return edges[0][2] + edges[1"
    },
    {
        "number": 883,
        "title": "Projection Area of 3D Shapes",
        "difficulty": 0,
        "answer": "        n = len(grid)\n        if n == 0:\n            return 0\n        m = len(grid[0])\n        if m == 0:\n            return 0\n        if n == 1:\n            return grid[0][0]\n        if m == 1:\n            return grid[0][0]\n        if n == 2:\n            return grid[0][0] + grid[1][0]\n        if m == 2:\n            return grid[0][0] + grid[0][1] + grid[1][0] + grid[1][1]\n        if n == 3:\n            return grid[0][0] + grid[1][0] + grid[2][0]\n        if m == 3:\n            return grid[0][0] + grid[0][1] + grid[0][2] + grid[1][0] + grid[1][1] + grid[1][2] + grid[2][0] + grid[2][1] + grid[2][2]\n        return 0\n"
    },
    {
        "number": 884,
        "title": "Uncommon Words from Two Sentences",
        "difficulty": 0,
        "answer": "        uncommon = []\n        for i in range(len(s1)):\n            if s1[i]!= s2[i]:\n                for j in range(i+1, len(s1)):\n                    if s1[j] == s2[i]:\n                        uncommon.append(s1[i])\n                        break\n        return uncommon\n"
    },
    {
        "number": 885,
        "title": "Spiral Matrix III",
        "difficulty": 1,
        "answer": "        result = []\n        if rows == 0 or cols == 0:\n            return result\n        if rStart >= rows or cStart >= cols:\n            return result\n        if rStart == 0 and cStart == 0:\n            result.append([0, 0])\n        if rStart == 0:\n            result.append([0, cStart])\n        if cStart == 0:\n            result.append([rStart, 0])\n        if rStart == 0 and cStart == cols - 1:\n            result.append([0, cols - 1])\n        if cStart == 0:\n            result.append([rStart, cols - 1])\n        if rStart == rows - 1:\n            result.append([rows - 1, 0])\n        if cStart == cols - 1:\n            result.append([rows - 1, cols - 1])\n        if rStart == rows - 1 and cStart == 0:\n            result.append([rows - 1, 0])\n        if cStart == cols - 1:\n            result.append([rows - 1, cols - 1"
    },
    {
        "number": 886,
        "title": "Possible Bipartition",
        "difficulty": 1,
        "answer": "        if n == 1:\n            return True\n        if n == 2:\n            return len(dislikes) == 1\n        if n == 3:\n            return len(dislikes) == 2\n        if n == 4:\n            return len(dislikes) == 3\n        if n == 5:\n            return len(dislikes) == 4\n        if n == 6:\n            return len(dislikes) == 5\n        if n == 7:\n            return len(dislikes) == 6\n        if n == 8:\n            return len(dislikes) == 7\n        if n == 9:\n            return len(dislikes) == 8\n        if n == 10:\n            return len(dislikes) == 9\n        if n == 11:\n            return len(dislikes) == 10\n        if n == 12:\n            return len(dislikes) == 11\n        if n == 13:\n            return len(dislikes) == 12\n        if n == 14:\n            return len(dislikes) == 13\n        if n == 15"
    },
    {
        "number": 887,
        "title": "Super Egg Drop",
        "difficulty": 2,
        "answer": "        # DP\n        # dp[i][j] = min(dp[i-1][j], dp[i-1][j-1], dp[i-1][j-2])\n        # dp[i][j] = min(dp[i-1][j], dp[i-1][j-1], dp[i-1][j-2], dp[i-1][j-3])\n        # dp[i][j] = min(dp[i-1][j], dp[i-1][j-1], dp[i-1][j-2], dp[i-1][j-3], dp[i-1][j-4])\n        # dp[i][j] = min(dp[i-1][j], dp[i-1][j-1], dp[i-1][j-2], dp[i-1][j-3], dp[i-1][j-4], dp[i-1][j-5])\n        # dp[i][j"
    },
    {
        "number": 888,
        "title": "Fair Candy Swap",
        "difficulty": 0,
        "answer": "        if len(aliceSizes)!= len(bobSizes):\n            return []"
    },
    {
        "number": 889,
        "title": "Construct Binary Tree from Preorder and Postorder Traversal",
        "difficulty": 1,
        "answer": "        if not preorder or not postorder:\n            return None\n        if len(preorder)!= len(postorder):\n            return None\n        if len(preorder) == 1:\n            return None\n        root = TreeNode(preorder[0])\n        pre_idx = 0\n        post_idx = 0\n        while pre_idx < len(preorder) and post_idx < len(postorder):\n            if preorder[pre_idx] == postorder[post_idx]:\n                root.left = TreeNode(preorder[pre_idx])\n                pre_idx += 1\n                post_idx += 1\n            elif preorder[pre_idx] < postorder[post_idx]:\n                root.left = TreeNode(preorder[pre_idx])\n                pre_idx += 1\n            else:\n                root.right = TreeNode(postorder[post_idx])\n                post_idx += 1\n        return root"
    },
    {
        "number": 890,
        "title": "Find and Replace Pattern",
        "difficulty": 1,
        "answer": "        words = sorted(words)\n        pattern = pattern.lower()\n        ans = []\n        for i in range(len(words)):\n            if words[i] == pattern:\n                ans.append(words[i])\n                continue\n            for j in range(len(words[i])):\n                if words[i][j] == pattern[j]:\n                    words[i] = words[i][:j] + pattern[j:] + words[i][j+1:]\n                    ans.append(words[i])\n                    break\n        return ans\n"
    },
    {
        "number": 891,
        "title": "Sum of Subsequence Widths",
        "difficulty": 2,
        "answer": "        n = len(nums)\n        if n == 0:\n            return 0\n        if n == 1:\n            return nums[0]\n        if n == 2:\n            return max(nums) - min(nums)\n        ans = 0\n        for i in range(n):\n            ans += max(nums[:i]) - min(nums[:i])\n        return ans % 109 + 7\n"
    },
    {
        "number": 892,
        "title": "Surface Area of 3D Shapes",
        "difficulty": 0,
        "answer": "        n = len(grid)\n        if n == 0:\n            return 0\n        m = len(grid[0])\n        if m == 0:\n            return 0\n        ans = 0\n        for i in range(n):\n            for j in range(m):\n                if grid[i][j] == 1:\n                    ans += self.surfaceArea(grid[i][:j+1]) + self.surfaceArea(grid[i][j+1:])\n        return ans\n"
    },
    {
        "number": 893,
        "title": "Groups of Special-Equivalent Strings",
        "difficulty": 1,
        "answer": "        # DP\n        # dp[i][j] = 1 if words[i] == words[j] and dp[i-1][j-1] + 1\n        # dp[i][j] = 0 if words[i]!= words[j] and dp[i-1][j-1] + 1\n        # dp[i][j] = 0 if words[i]!= words[j] and dp[i-1][j-1] + 1\n        # dp[i][j] = 0 if words[i]!= words[j] and dp[i-1][j-1] + 1\n        # dp[i][j] = 0 if words[i]!= words[j] and dp[i-1][j-1] + 1\n        # dp[i][j] = 0 if words[i]!= words[j] and dp[i-1][j-1] + 1\n        # dp[i][j] = 0 if words[i]!= words[j] and dp[i-1][j"
    },
    {
        "number": 894,
        "title": "All Possible Full Binary Trees",
        "difficulty": 1,
        "answer": "        ret = []\n        if n == 0:\n            return ret\n        if n == 1:\n            ret.append(None)\n            return ret\n        if n == 2:\n            ret.append(None)\n            ret.append(None)\n            return ret\n        ret.append(None)\n        ret.append(None)\n        ret.append(None)\n        ret.append(None)\n        ret.append(None)\n        ret.append(None)\n        ret.append(None)\n        ret.append(None)\n        ret.append(None)\n        ret.append(None)\n        ret.append(None)\n        ret.append(None)\n        ret.append(None)\n        ret.append(None)\n        ret.append(None)\n        ret.append(None)\n        ret.append(None)\n        ret.append(None)\n        ret.append(None)\n        ret.append(None)\n        ret.append(None)\n        ret.append(None)\n        ret.append(None)\n        ret.append"
    },
    {
        "number": 895,
        "title": "Maximum Frequency Stack",
        "difficulty": 2,
        "answer": "        pass\n    def __str__(self):\n        pass"
    },
    {
        "number": 896,
        "title": "Monotonic Array",
        "difficulty": 0,
        "answer": "        if len(nums) == 0:\n            return True\n        if len(nums) == 1:\n            return True\n        if nums[0] > nums[1]:\n            return True\n        if nums[0] < nums[1]:\n            return False\n        return self.isMonotonic(nums[1:])\n"
    },
    {
        "number": 897,
        "title": "Increasing Order Search Tree",
        "difficulty": 0,
        "answer": "        if not root:\n            return root\n        if not root.left and not root.right:\n            return root\n        if not root.left:\n            root.left = self.increasingBST(root.right)\n            root.left.parent = root\n        if not root.right:\n            root.right = self.increasingBST(root.left)\n            root.right.parent = root\n        return root\n"
    },
    {
        "number": 898,
        "title": "Bitwise ORs of Subarrays",
        "difficulty": 1,
        "answer": "        if not arr:\n            return 0\n        n = len(arr)\n        ans = 0\n        for i in range(n):\n            for j in range(i+1, n):\n                ans += (arr[i] | arr[j])\n        return ans\n"
    },
    {
        "number": 899,
        "title": "Orderly Queue",
        "difficulty": 2,
        "answer": "        if not s or not k:\n            return \"\"\n        if k == 1:\n            return s\n        if k == 2:\n            return s[0] + s[1] + s[2]\n        if k == 3:\n            return s[0] + s[1] + s[2] + s[3]\n        if k == 4:\n            return s[0] + s[1] + s[2] + s[3] + s[4]\n        if k == 5:\n            return s[0] + s[1] + s[2] + s[3] + s[4] + s[5]\n        if k == 6:\n            return s[0] + s[1] + s[2] + s[3] + s[4] + s[5] + s[6]\n        if k == 7:\n            return s[0] + s[1] + s[2] + s[3] + s[4] + s[5] + s[6] + s[7]\n        if k == 8:\n"
    },
    {
        "number": 900,
        "title": "RLE Iterator",
        "difficulty": 1,
        "answer": "        # Your RLEIterator object will be instantiated and called as such:\n        # obj = RLEIterator(encoded)\n        # param_1 = obj.next(n)\n        # param_2 = obj.next(n)\n        # param_3 = obj.next(n)\n        # param_4 = obj.next(n)\n        # param_5 = obj.next(n)\n        # param_6 = obj.next(n)\n        # param_7 = obj.next(n)\n        # param_8 = obj.next(n)\n        # param_9 = obj.next(n)\n        # param_10 = obj.next(n)\n        # param_11 = obj.next(n)\n        # param_12 = obj.next(n)\n        # param_13 = obj.next(n)\n        # param_14 = obj.next(n)\n        # param_15 = obj.next(n)\n        # param_16 = obj.next(n)\n        # param_17 = obj.next(n)\n"
    },
    {
        "number": 901,
        "title": "Online Stock Span",
        "difficulty": 1,
        "answer": "        pass"
    },
    {
        "number": 902,
        "title": "Numbers At Most N Given Digit Set",
        "difficulty": 2,
        "answer": "        if n < 0:\n            return 0\n        if n == 0:\n            return 1\n        if n == 1:\n            return len(digits)\n        if n == 2:\n            return len(digits) * len(digits)\n        if n == 3:\n            return len(digits) * len(digits) * len(digits)\n        if n == 4:\n            return len(digits) * len(digits) * len(digits) * len(digits)\n        if n == 5:\n            return len(digits) * len(digits) * len(digits) * len(digits) * len(digits)\n        if n == 6:\n            return len(digits) * len(digits) * len(digits) * len(digits) * len(digits) * len(digits)\n        if n == 7:\n            return len(digits) * len(digits) * len(digits) * len(digits) * len(digits) * len(digits) * len(dig"
    },
    {
        "number": 903,
        "title": "Valid Permutations for DI Sequence",
        "difficulty": 2,
        "answer": "        n = len(s)\n        if n == 0:\n            return 0\n        if n == 1:\n            return 1\n        if s[0] == 'D':\n            return self.numPermsDISequence(s[1:]) + 1\n        if s[0] == 'I':\n            return self.numPermsDISequence(s[1:])\n        return self.numPermsDISequence(s[1:]) + self.numPermsDISequence(s[0:1])\n"
    },
    {
        "number": 904,
        "title": "Fruit Into Baskets",
        "difficulty": 1,
        "answer": "        n = len(fruits)\n        if n == 0:\n            return 0\n        if n == 1:\n            return 1\n        if n == 2:\n            return 2\n        if n == 3:\n            return 3\n        if n == 4:\n            return 4\n        if n == 5:\n            return 5\n        if n == 6:\n            return 6\n        if n == 7:\n            return 7\n        if n == 8:\n            return 8\n        if n == 9:\n            return 9\n        if n == 10:\n            return 10\n        if n == 11:\n            return 11\n        if n == 12:\n            return 12\n        if n == 13:\n            return 13\n        if n == 14:\n            return 14\n        if n == 15:\n            return 15\n        if n == 16:\n            return 16\n        if n == 17:\n            return 17\n        if n == 18:\n            return 18\n        if n == 19:\n            return 19\n        if n == 20:\n            return 20\n        if n == 21:\n            return 21"
    },
    {
        "number": 905,
        "title": "Sort Array By Parity",
        "difficulty": 0,
        "answer": "        nums.sort()\n        for i in range(1, len(nums)):\n            if nums[i] % 2 == 0:\n                nums[i-1], nums[i] = nums[i], nums[i-1]\n        return nums\n"
    },
    {
        "number": 906,
        "title": "Super Palindromes",
        "difficulty": 2,
        "answer": "        # DP\n        # dp[i][j] = dp[i - 1][j - 1] + dp[i - 1][j]\n        # dp[i][j] = dp[i - 1][j - 1] + dp[i - 1][j] + dp[i][j - 1]\n        # dp[i][j] = dp[i - 1][j - 1] + dp[i - 1][j] + dp[i][j - 1] + dp[i - 1][j - 1]\n        # dp[i][j] = dp[i - 1][j - 1] + dp[i - 1][j] + dp[i][j - 1] + dp[i - 1][j - 1] + dp[i - 1][j] + dp[i][j - 1] + dp[i - 1][j] + dp[i][j - 1] + dp[i - 1][j] + dp[i][j - 1] + dp[i"
    },
    {
        "number": 907,
        "title": "Sum of Subarray Minimums",
        "difficulty": 1,
        "answer": "        n = len(arr)\n        if n == 0:\n            return 0\n        if n == 1:\n            return arr[0]\n        if n == 2:\n            return min(arr)\n        if n == 3:\n            return min(arr) + sum(arr)\n        if n == 4:\n            return min(arr) + sum(arr) + sum(arr[:2])\n        if n == 5:\n            return min(arr) + sum(arr) + sum(arr[:2]) + sum(arr[2:4])\n        if n == 6:\n            return min(arr) + sum(arr) + sum(arr[:2]) + sum(arr[2:4]) + sum(arr[4:])\n        if n == 7:\n            return min(arr) + sum(arr) + sum(arr[:2]) + sum(arr[2:4]) + sum(arr[4:]) + sum(arr[6:])\n        if n == 8:\n            return min(arr) + sum(arr) + sum(arr[:2"
    },
    {
        "number": 908,
        "title": "Smallest Range I",
        "difficulty": 0,
        "answer": "        nums.sort()\n        return min(nums[:k]) - max(nums[:k])"
    },
    {
        "number": 909,
        "title": "Snakes and Ladders",
        "difficulty": 1,
        "answer": "        n = len(board)\n        if n == 0:\n            return 0\n        m = len(board[0])\n        if m == 0:\n            return 0\n        dp = [[0] * m for _ in range(n)]\n        for i in range(n):\n            for j in range(m):\n                if board[i][j] == -1:\n                    continue\n                if board[i][j] == 0:\n                    dp[i][j] = 1\n                else:\n                    dp[i][j] = 1 + dp[i][j - 1]\n        return dp[n - 1][m - 1]"
    },
    {
        "number": 910,
        "title": "Smallest Range II",
        "difficulty": 1,
        "answer": "        nums.sort()\n        return min(nums[i] + k for i in range(len(nums)) if i < len(nums) - k) - max(nums[i] - k for i in range(k, len(nums)))\n"
    },
    {
        "number": 911,
        "title": "Online Election",
        "difficulty": 1,
        "answer": "        return max(self.__top_voted_candidate(persons, times))"
    },
    {
        "number": 912,
        "title": "Sort an Array",
        "difficulty": 1,
        "answer": "        nums.sort()\n        return nums\n"
    },
    {
        "number": 913,
        "title": "Cat and Mouse",
        "difficulty": 2,
        "answer": "        # BFS\n        # dfs\n        # dfs\n        # dfs\n        # dfs\n        # dfs\n        # dfs\n        # dfs\n        # dfs\n        # dfs\n        # dfs\n        # dfs\n        # dfs\n        # dfs\n        # dfs\n        # dfs\n        # dfs\n        # dfs\n        # dfs\n        # dfs\n        # dfs\n        # dfs\n        # dfs\n        # dfs\n        # dfs\n        # dfs\n        # dfs\n        # dfs\n        # dfs\n        # dfs\n        # dfs\n        # dfs\n        # dfs\n        # dfs\n        # dfs\n        # dfs\n        # dfs\n        # dfs\n        # dfs\n        # dfs\n        # dfs\n        # dfs\n        # dfs\n        # dfs\n        # dfs\n        # dfs\n        # dfs\n        # dfs\n        # dfs\n        # dfs\n"
    },
    {
        "number": 914,
        "title": "X of a Kind in a Deck of Cards",
        "difficulty": 0,
        "answer": "        if not deck:\n            return False\n        if len(deck) == 1:\n            return True\n        if len(deck) == 2:\n            return True\n        if len(deck) == 3:\n            return True\n        if len(deck) == 4:\n            return True\n        if len(deck) == 5:\n            return True\n        if len(deck) == 6:\n            return True\n        if len(deck) == 7:\n            return True\n        if len(deck) == 8:\n            return True\n        if len(deck) == 9:\n            return True\n        if len(deck) == 10:\n            return True\n        if len(deck) == 11:\n            return True\n        if len(deck) == 12:\n            return True\n        if len(deck) == 13:\n            return True\n        if len(deck) == 14:\n            return True\n        if len(deck) == 15:\n            return True\n        if len(deck) == 16:\n            return True\n        if len(deck) == 17:\n            return True\n        if"
    },
    {
        "number": 915,
        "title": "Partition Array into Disjoint Intervals",
        "difficulty": 1,
        "answer": "        n = len(nums)\n        if n == 0:\n            return 0\n        if n == 1:\n            return 1\n        left = [nums[0]]\n        right = []\n        for i in range(1, n):\n            if nums[i] <= nums[i - 1]:\n                left.append(nums[i])\n            else:\n                right.append(nums[i])\n        if len(left) > len(right):\n            return len(left)\n        else:\n            return len(right)\n"
    },
    {
        "number": 916,
        "title": "Word Subsets",
        "difficulty": 1,
        "answer": "        words1 = set(words1)\n        words2 = set(words2)\n        universal = []\n        for word in words1:\n            if word in words2:\n                universal.append(word)\n        return universal\n"
    },
    {
        "number": 917,
        "title": "Reverse Only Letters",
        "difficulty": 0,
        "answer": "        if not s:\n            return s\n        s = s.lower()\n        s = \"\".join(sorted(s))\n        return s\n"
    },
    {
        "number": 918,
        "title": "Maximum Sum Circular Subarray",
        "difficulty": 1,
        "answer": "        n = len(nums)\n        if n == 0:\n            return 0\n        max_sum = nums[0]\n        for i in range(1, n):\n            max_sum = max(max_sum, nums[i] + nums[(i + n - 1) % n])\n        return max_sum\n"
    },
    {
        "number": 919,
        "title": "Complete Binary Tree Inserter",
        "difficulty": 1,
        "answer": "    def get_root(self) -> Optional[TreeNode]:\n        \"\"\"\n        A complete binary tree is a binary tree in which every level, except possibly the last, is completely filled, and all nodes are as far left as possible.\n        Design an algorithm to insert a new node to a complete binary tree keeping it complete after the insertion.\n        Implement the CBTInserter class:\n            CBTInserter(TreeNode root) Initializes the data structure with the root of the complete binary tree.\n            int insert(int v) Inserts a TreeNode into the tree with value Node.val == val so that the tree remains complete, and returns the value of the parent of the inserted TreeNode.\n            TreeNode get_root() Returns the root node of the tree.\n        Example 1:\n        Input\n        [\"CBTInserter\", \"insert\", \"insert\", \"get_root\"]\n        [[[1, 2]], [3], [4], []]\n        Output\n        [null, 1, 2, [1, 2, 3, 4]]\n        Explanation\n        CBTInserter cBT"
    },
    {
        "number": 920,
        "title": "Number of Music Playlists",
        "difficulty": 2,
        "answer": "        return (goal - 1) % (n - 1) + (n - 1) * (goal - 1) % (n - 1) + (n - 1) * (goal - 1) % (n - 1) + (n - 1) * (goal - 1) % (n - 1) + (n - 1) * (goal - 1) % (n - 1) + (n - 1) * (goal - 1) % (n - 1) + (n - 1) * (goal - 1) % (n - 1) + (n - 1) * (goal - 1) % (n - 1) + (n - 1) * (goal - 1) % (n - 1) + (n - 1) * (goal - 1) % (n - 1) + (n - 1) * (goal - 1) % (n - 1) + (n - 1) * (goal - 1) % (n - 1) + (n - 1) * (goal - 1) % (n - 1) + (n - 1) * (goal - 1) % (n - 1) + (n"
    },
    {
        "number": 921,
        "title": "Minimum Add to Make Parentheses Valid",
        "difficulty": 1,
        "answer": "        stack = []\n        for i in range(len(s)):\n            if s[i] == \"(\":\n                stack.append(i)\n            elif s[i] == \")\":\n                if stack:\n                    stack.pop()\n                else:\n                    return 0\n        return len(stack)\n"
    },
    {
        "number": 922,
        "title": "Sort Array By Parity II",
        "difficulty": 0,
        "answer": "        nums.sort()\n        ans = []\n        for i in range(len(nums)):\n            if nums[i] % 2 == 1:\n                ans.append(nums[i])\n            else:\n                ans.append(nums[i] - 1)\n        return ans\n"
    },
    {
        "number": 923,
        "title": "3Sum With Multiplicity",
        "difficulty": 1,
        "answer": "        n = len(arr)\n        if n < 3:\n            return 0\n        res = 0\n        for i in range(n):\n            for j in range(i+1, n):\n                for k in range(j+1, n):\n                    if arr[i] + arr[j] + arr[k] == target:\n                        res += 1\n                        arr[i], arr[j], arr[k] = arr[k], arr[j], arr[i]\n        return res % 109 + 7\n"
    },
    {
        "number": 924,
        "title": "Minimize Malware Spread",
        "difficulty": 2,
        "answer": "        n = len(graph)\n        if n == 0:\n            return 0\n        if n == 1:\n            return initial[0]\n        m = initial[0]\n        for i in range(1, n):\n            m = min(m, self.minMalwareSpread(graph, initial[:i]))\n        return m"
    },
    {
        "number": 925,
        "title": "Long Pressed Name",
        "difficulty": 0,
        "answer": "        if len(name)!= len(typed):\n            return False\n        for i in range(len(name)):\n            if name[i]!= typed[i]:\n                return False\n        return True\n"
    },
    {
        "number": 926,
        "title": "Flip String to Monotone Increasing",
        "difficulty": 1,
        "answer": "        # DP\n        # dp[i] = min(dp[i-1], dp[i-2]) + 1\n        # dp[0] = 0\n        # dp[i] = min(dp[i-1], dp[i-2]) + 1\n        # dp[0] = 0\n        # dp[i] = min(dp[i-1], dp[i-2]) + 1\n        # dp[0] = 0\n        # dp[i] = min(dp[i-1], dp[i-2]) + 1\n        # dp[0] = 0\n        # dp[i] = min(dp[i-1], dp[i-2]) + 1\n        # dp[0] = 0\n        # dp[i] = min(dp[i-1], dp[i-2]) + 1\n        # dp[0] = 0\n        # dp[i] = min(dp[i-1], dp[i-2]) + 1\n        # dp"
    },
    {
        "number": 927,
        "title": "Three Equal Parts",
        "difficulty": 2,
        "answer": "        if len(arr) == 0:\n            return [-1, -1]\n        if len(arr) == 1:\n            return [0, 0]\n        if len(arr) == 2:\n            return [0, 1]\n        if len(arr) == 3:\n            return [0, 2]\n        if len(arr) == 4:\n            return [0, 3]\n        if len(arr) == 5:\n            return [0, 4]\n        if len(arr) == 6:\n            return [0, 5]\n        if len(arr) == 7:\n            return [0, 6]\n        if len(arr) == 8:\n            return [0, 7]\n        if len(arr) == 9:\n            return [0, 8]\n        if len(arr) == 10:\n            return [0, 9]\n        if len(arr) == 11:\n            return [0, 10]\n        if len(arr) == 12:\n            return [0, 11]\n        if len(arr) == 13:\n            return [0,"
    },
    {
        "number": 928,
        "title": "Minimize Malware Spread II",
        "difficulty": 2,
        "answer": "        n = len(graph)\n        if n == 0:\n            return 0\n        if n == 1:\n            return initial[0]\n        m = initial[0]\n        for i in range(1, n):\n            m = min(m, self.minMalwareSpread(graph, [initial[i]]))\n        return m"
    },
    {
        "number": 929,
        "title": "Unique Email Addresses",
        "difficulty": 0,
        "answer": "        ret = 0\n        for email in emails:\n            ret += len(email.split('@'))\n        return ret"
    },
    {
        "number": 930,
        "title": "Binary Subarrays With Sum",
        "difficulty": 1,
        "answer": "        # DP\r\n        # dp[i][j] = dp[i-1][j] + dp[i-1][j-nums[i-1]]\r\n        # dp[i][j] = dp[i-1][j] + dp[i-1][j-nums[i-1]] + dp[i-1][j-nums[i-1]]\r\n        # dp[i][j] = dp[i-1][j] + dp[i-1][j-nums[i-1]] + dp[i-1][j-nums[i-1]] + dp[i-1][j-nums[i-1]]\r\n        # dp[i][j] = dp[i-1][j] + dp[i-1][j-nums[i-1]] + dp[i-1][j-nums[i-1]] + dp[i-1][j-nums[i-1]] + dp[i-1][j-"
    },
    {
        "number": 931,
        "title": "Minimum Falling Path Sum",
        "difficulty": 1,
        "answer": "        n = len(matrix)\n        if n == 0:\n            return 0\n        m = len(matrix[0])\n        if m == 0:\n            return 0\n        dp = [[0] * m for _ in range(n)]\n        for i in range(n):\n            for j in range(m):\n                if i == 0 and j == 0:\n                    dp[i][j] = matrix[i][j]\n                elif i == 0:\n                    dp[i][j] = min(dp[i][j - 1], matrix[i][j])\n                elif j == 0:\n                    dp[i][j] = min(dp[i - 1][j], matrix[i][j])\n                else:\n                    dp[i][j] = min(dp[i - 1][j - 1], dp[i - 1][j], dp[i][j - 1], matrix[i][j])\n        return dp[n - 1][m - 1]\n"
    },
    {
        "number": 932,
        "title": "Beautiful Array",
        "difficulty": 1,
        "answer": "        if n == 1:\n            return [1]\n        if n == 2:\n            return [1, 2]\n        if n == 3:\n            return [1, 2, 3]\n        if n == 4:\n            return [1, 2, 3, 4]\n        if n == 5:\n            return [1, 2, 3, 4, 5]\n        if n == 6:\n            return [1, 2, 3, 4, 5, 6]\n        if n == 7:\n            return [1, 2, 3, 4, 5, 6, 7]\n        if n == 8:\n            return [1, 2, 3, 4, 5, 6, 7, 8]\n        if n == 9:\n            return [1, 2, 3, 4, 5, 6, 7, 8, 9]\n        if n == 10:\n            return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n        if n == 11:\n            return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10,"
    },
    {
        "number": 933,
        "title": "Number of Recent Calls",
        "difficulty": 0,
        "answer": "        pass"
    },
    {
        "number": 934,
        "title": "Shortest Bridge",
        "difficulty": 1,
        "answer": "        m, n = len(grid), len(grid[0])\n        if m == 0 or n == 0:\n            return 0\n        if m == 1 or n == 1:\n            return 1\n        if m == 2 or n == 2:\n            return 2\n        if m == 3 or n == 3:\n            return 3\n        if m == 4 or n == 4:\n            return 4\n        if m == 5 or n == 5:\n            return 5\n        if m == 6 or n == 6:\n            return 6\n        if m == 7 or n == 7:\n            return 7\n        if m == 8 or n == 8:\n            return 8\n        if m == 9 or n == 9:\n            return 9\n        if m == 10 or n == 10:\n            return 10\n        if m == 11 or n == 11:\n            return 11\n        if m == 12 or n == 12:\n            return 12\n        if m == 13 or n == 13:\n            return 13\n        if m == 14 or n == 14:\n            return 14\n        if m == 15 or n == 15"
    },
    {
        "number": 935,
        "title": "Knight Dialer",
        "difficulty": 1,
        "answer": "        ans = 0\n        for i in range(1, n + 1):\n            ans = ans * (n - i + 1) % 109 + 7\n        return ans"
    },
    {
        "number": 936,
        "title": "Stamping The Sequence",
        "difficulty": 2,
        "answer": "        ans = []\n        for i in range(len(target)):\n            if target[i] == '?':\n                ans.append(i)\n            else:\n                ans.append(i + 1)\n        return ans"
    },
    {
        "number": 937,
        "title": "Reorder Data in Log Files",
        "difficulty": 1,
        "answer": "        logs = sorted(logs)\n        logs = [log for log in logs if log[0] in \"abcdefghijklmnopqrstuvwxyz\"]\n        logs = sorted(logs, key=lambda log: log[1:])\n        return logs\n"
    },
    {
        "number": 938,
        "title": "Range Sum of BST",
        "difficulty": 0,
        "answer": "        if not root:\n            return 0\n        if low <= root.val <= high:\n            return root.val + self.rangeSumBST(root.left, low, high) + self.rangeSumBST(root.right, low, high)\n        else:\n            return self.rangeSumBST(root.left, low, high) + self.rangeSumBST(root.right, low, high)"
    },
    {
        "number": 939,
        "title": "Minimum Area Rectangle",
        "difficulty": 1,
        "answer": "        if not points:\n            return 0\n        x = [p[0] for p in points]\n        y = [p[1] for p in points]\n        min_area = float(\"inf\")\n        for i in range(len(x)):\n            for j in range(len(x)):\n                if i == j:\n                    continue\n                if x[i] > x[j] and y[i] > y[j]:\n                    min_area = min(min_area, min(x[i] - x[j], y[i] - y[j]))\n                elif x[i] > x[j] and y[i] < y[j]:\n                    min_area = min(min_area, min(x[i] - x[j], y[i] - y[j]))\n                elif x[i] < x[j] and y[i] > y[j]:\n                    min_area = min(min_area, min(x[i] - x[j], y[i] - y[j]))\n                "
    },
    {
        "number": 940,
        "title": "Distinct Subsequences II",
        "difficulty": 2,
        "answer": "        if not s:\n            return 0\n        n = len(s)\n        dp = [1] * (n + 1)\n        dp[0] = 1\n        for i in range(1, n + 1):\n            for j in range(i):\n                if s[j] == s[i]:\n                    dp[i] += dp[j]\n        return dp[n] % 109 + 7\n"
    },
    {
        "number": 941,
        "title": "Valid Mountain Array",
        "difficulty": 0,
        "answer": "        if len(arr) < 3:\n            return False\n        for i in range(1, len(arr) - 1):\n            if arr[i - 1] > arr[i] > arr[i + 1]:\n                return False\n        return True\n"
    },
    {
        "number": 942,
        "title": "DI String Match",
        "difficulty": 0,
        "answer": "        n = len(s)\n        if n == 0:\n            return []\n        if n == 1:\n            return [0]\n        if n == 2:\n            return [0, 1]\n        if n == 3:\n            return [0, 1, 2]\n        if n == 4:\n            return [0, 1, 3, 2]\n        if n == 5:\n            return [0, 1, 4, 3, 2]\n        if n == 6:\n            return [0, 1, 5, 4, 3, 2]\n        if n == 7:\n            return [0, 1, 6, 5, 4, 3, 2]\n        if n == 8:\n            return [0, 1, 7, 6, 5, 4, 3, 2]\n        if n == 9:\n            return [0, 1, 8, 7, 6, 5, 4, 3, 2]\n        if n == 10:\n            return [0, 1, 9, 8, 7, 6, 5, 4, 3, 2]\n        if n == 11:\n            return [0"
    },
    {
        "number": 943,
        "title": "Find the Shortest Superstring",
        "difficulty": 2,
        "answer": "        if not words:\n            return \"\"\n        if len(words) == 1:\n            return words[0]\n        if len(words) == 2:\n            return words[0] + words[1]\n        if len(words) == 3:\n            return words[0] + words[1] + words[2]\n        if len(words) == 4:\n            return words[0] + words[1] + words[2] + words[3]\n        if len(words) == 5:\n            return words[0] + words[1] + words[2] + words[3] + words[4]\n        if len(words) == 6:\n            return words[0] + words[1] + words[2] + words[3] + words[4] + words[5]\n        if len(words) == 7:\n            return words[0] + words[1] + words[2] + words[3] + words[4] + words[5] + words[6]\n        if len(words) == 8:\n            return words[0]"
    },
    {
        "number": 944,
        "title": "Delete Columns to Make Sorted",
        "difficulty": 0,
        "answer": "        # DP\n        # dp[i][j] = min(dp[i-1][j], dp[i-1][j-1], dp[i-1][j+1])\n        # dp[i][j] = min(dp[i-1][j], dp[i-1][j-1], dp[i-1][j+1])\n        # dp[i][j] = min(dp[i-1][j], dp[i-1][j-1], dp[i-1][j+1])\n        dp = [[0 for _ in range(len(strs[0]))] for _ in range(len(strs))]\n        for i in range(len(strs)):\n            for j in range(len(strs[0])):\n                if j == 0:\n                    dp[i][j] = 1\n                elif j == len(strs[0]) - 1:\n                    dp[i][j] = 1\n                else:\n                    dp[i][j] = min(dp"
    },
    {
        "number": 945,
        "title": "Minimum Increment to Make Array Unique",
        "difficulty": 1,
        "answer": "        n = len(nums)\n        if n == 0:\n            return 0\n        if n == 1:\n            return 1\n        if n == 2:\n            return 2\n        if n == 3:\n            return 3\n        if n == 4:\n            return 4\n        if n == 5:\n            return 5\n        if n == 6:\n            return 6\n        if n == 7:\n            return 7\n        if n == 8:\n            return 8\n        if n == 9:\n            return 9\n        if n == 10:\n            return 10\n        if n == 11:\n            return 11\n        if n == 12:\n            return 12\n        if n == 13:\n            return 13\n        if n == 14:\n            return 14\n        if n == 15:\n            return 15\n        if n == 16:\n            return 16\n        if n == 17:\n            return 17\n        if n == 18:\n            return 18\n        if n == 19:\n            return 19\n        if n == 20:\n            return 20\n        if n == 21:\n            return 21"
    },
    {
        "number": 946,
        "title": "Validate Stack Sequences",
        "difficulty": 1,
        "answer": "        if len(pushed)!= len(popped):\n            return False\n        for i in range(len(pushed)):\n            if pushed[i]!= popped[i]:\n                return False\n        return True\n"
    },
    {
        "number": 947,
        "title": "Most Stones Removed with Same Row or Column",
        "difficulty": 1,
        "answer": "        n = len(stones)\n        if n == 0:\n            return 0\n        m = stones[0][0]\n        for i in range(1, n):\n            m = max(m, stones[i][0])\n        for i in range(n):\n            for j in range(m):\n                if stones[i][1] == j:\n                    return 0\n        return m\n"
    },
    {
        "number": 948,
        "title": "Bag of Tokens",
        "difficulty": 1,
        "answer": "        # score = 0\n        # for i in range(len(tokens)):\n        #     if power >= tokens[i]:\n        #         score += 1\n        #         power -= tokens[i]\n        # return score"
    },
    {
        "number": 949,
        "title": "Largest Time for Given Digits",
        "difficulty": 1,
        "answer": "        if not arr:\n            return \"\"\n        res = \"\"\n        for i in range(len(arr)):\n            res += str(arr[i])\n            if i < len(arr) - 1:\n                res += \":\"\n        return res\n"
    },
    {
        "number": 950,
        "title": "Reveal Cards In Increasing Order",
        "difficulty": 1,
        "answer": "        if not deck:\n            return []\n        ans = []\n        for i in range(len(deck)):\n            ans.append(deck[i])\n            deck[i] = deck[0]\n            deck.pop(0)\n        return ans\n"
    },
    {
        "number": 951,
        "title": "Flip Equivalent Binary Trees",
        "difficulty": 1,
        "answer": "        if root1 is None and root2 is None:\n            return True\n        elif root1 is None or root2 is None:\n            return False\n        elif root1.val!= root2.val:\n            return False\n        else:\n            return self.flipEquiv(root1.left, root2.left) and self.flipEquiv(root1.right, root2.right)\n"
    },
    {
        "number": 952,
        "title": "Largest Component Size by Common Factor",
        "difficulty": 2,
        "answer": "        n = len(nums)\n        dp = [1] * n\n        for i in range(n):\n            for j in range(i + 1, n):\n                if nums[i] % nums[j] == 0:\n                    dp[i] = max(dp[i], dp[j] + 1)\n        return max(dp)\n"
    },
    {
        "number": 953,
        "title": "Verifying an Alien Dictionary",
        "difficulty": 0,
        "answer": "        if len(words) == 0:\n            return True\n        if len(words) == 1:\n            return words[0] == order\n        if len(words) == 2:\n            return words[0] == order and words[1] == order[::-1]\n        if len(words) == 3:\n            return words[0] == order and words[1] == order[::-1] and words[2] == order[::-1][::-1]\n        if len(words) == 4:\n            return words[0] == order and words[1] == order[::-1] and words[2] == order[::-1][::-1] and words[3] == order[::-1][::-1][::-1]\n        if len(words) == 5:\n            return words[0] == order and words[1] == order[::-1] and words[2] == order[::-1][::-1] and words[3] == order[::-1][::-1][::-1] and words[4] =="
    },
    {
        "number": 954,
        "title": "Array of Doubled Pairs",
        "difficulty": 1,
        "answer": "        if len(arr) % 2!= 0:\n            return False\n        for i in range(len(arr) / 2):\n            if arr[i] % 2 == 0 and arr[i + 1] % 2 == 0:\n                return False\n        return True\n"
    },
    {
        "number": 955,
        "title": "Delete Columns to Make Sorted II",
        "difficulty": 1,
        "answer": "        n = len(strs)\n        ans = 0\n        for i in range(n):\n            for j in range(i + 1, n):\n                if strs[i][j] == strs[j][i]:\n                    continue\n                ans += 1\n                strs[i], strs[j] = strs[j], strs[i]\n        return ans\n"
    },
    {
        "number": 956,
        "title": "Tallest Billboard",
        "difficulty": 2,
        "answer": "        max_height = 0\n        for rod in rods:\n            max_height = max(max_height, rod)\n        return max_height\n"
    },
    {
        "number": 957,
        "title": "Prison Cells After N Days",
        "difficulty": 1,
        "answer": "        result = [0] * n\n        for i in range(n):\n            result[i] = 0\n        for i in range(n):\n            for j in range(i + 1, n):\n                if cells[i] == 1 and cells[j] == 1:\n                    result[i] = 1\n                    result[j] = 1\n                    break\n        return result\n"
    },
    {
        "number": 958,
        "title": "Check Completeness of a Binary Tree",
        "difficulty": 1,
        "answer": "        if not root:\n            return True\n        if not root.left and not root.right:\n            return True\n        if not root.left and root.right:\n            return False\n        if not root.right and root.left:\n            return False\n        return self.isCompleteTree(root.left) and self.isCompleteTree(root.right)\n"
    },
    {
        "number": 959,
        "title": "Regions Cut By Slashes",
        "difficulty": 1,
        "answer": "        n = len(grid)\n        if n == 0:\n            return 0\n        m = len(grid[0])\n        if m == 0:\n            return 0\n        regions = 0\n        for i in range(n):\n            for j in range(m):\n                if grid[i][j] == '/':\n                    regions += 1\n        return regions\n"
    },
    {
        "number": 960,
        "title": "Delete Columns to Make Sorted III",
        "difficulty": 2,
        "answer": "        ans = 0\n        for i in range(len(strs)):\n            ans = max(ans, len(strs[i]))\n        return ans\n"
    },
    {
        "number": 961,
        "title": "N-Repeated Element in Size 2N Array",
        "difficulty": 0,
        "answer": "        n = len(nums)\n        if n == 1:\n            return nums[0]\n        if n == 2:\n            return nums[0] + nums[1]\n        if n % 2 == 0:\n            return nums[0] + nums[n // 2]\n        else:\n            return nums[n // 2] + nums[n - 1]"
    },
    {
        "number": 962,
        "title": "Maximum Width Ramp",
        "difficulty": 1,
        "answer": "        n = len(nums)\n        if n == 0:\n            return 0\n        max_width = 0\n        for i in range(n):\n            for j in range(i + 1, n):\n                if nums[i] <= nums[j]:\n                    max_width = max(max_width, j - i)\n        return max_width\n"
    },
    {
        "number": 963,
        "title": "Minimum Area Rectangle II",
        "difficulty": 1,
        "answer": "        if not points:\n            return 0\n        xmin = points[0][0]\n        ymin = points[0][1]\n        xmax = points[0][0]\n        ymax = points[0][1]\n        for i in range(1, len(points)):\n            xmin = min(xmin, points[i][0])\n            ymin = min(ymin, points[i][1])\n            xmax = max(xmax, points[i][0])\n            ymax = max(ymax, points[i][1])\n        return abs(xmax - xmin) * abs(ymax - ymin)\n"
    },
    {
        "number": 964,
        "title": "Least Operators to Express Number",
        "difficulty": 2,
        "answer": "        # write your code here\n        ops = []\n        ops.append(x)\n        ops.append(target)\n        ops.append(x)\n        ops.append(target)\n        ops.append(x)\n        ops.append(target)\n        ops.append(x)\n        ops.append(target)\n        ops.append(x)\n        ops.append(target)\n        ops.append(x)\n        ops.append(target)\n        ops.append(x)\n        ops.append(target)\n        ops.append(x)\n        ops.append(target)\n        ops.append(x)\n        ops.append(target)\n        ops.append(x)\n        ops.append(target)\n        ops.append(x)\n        ops.append(target)\n        ops.append(x)\n        ops.append(target)\n        ops.append(x)\n        ops.append(target)\n        ops.append(x)\n        ops.append(target)\n        ops.append(x)\n        ops.append(target"
    },
    {
        "number": 965,
        "title": "Univalued Binary Tree",
        "difficulty": 0,
        "answer": "        if not root:\n            return True\n        if root.left is None and root.right is None:\n            return True\n        if root.left is None or root.right is None:\n            return False\n        return self.isUnivalTree(root.left) and self.isUnivalTree(root.right)\n"
    },
    {
        "number": 966,
        "title": "Vowel Spellchecker",
        "difficulty": 1,
        "answer": "        ans = []\n        for q in queries:\n            for w in wordlist:\n                if q.lower() == w.lower():\n                    ans.append(w)\n        return ans\n"
    },
    {
        "number": 967,
        "title": "Numbers With Same Consecutive Differences",
        "difficulty": 1,
        "answer": "        ans = []\n        for i in range(n):\n            ans.append(0)\n            for j in range(i+1, n+1):\n                ans[j] = ans[j-1] + k\n        return ans\n"
    },
    {
        "number": 968,
        "title": "Binary Tree Cameras",
        "difficulty": 2,
        "answer": "        if not root:\n            return 0\n        if not root.left and not root.right:\n            return 1\n        if not root.left:\n            return self.minCameraCover(root.right)\n        if not root.right:\n            return self.minCameraCover(root.left)\n        return min(self.minCameraCover(root.left), self.minCameraCover(root.right)) + 1"
    },
    {
        "number": 969,
        "title": "Pancake Sorting",
        "difficulty": 1,
        "answer": "        ret = []\n        for i in range(len(arr)):\n            for j in range(i+1, len(arr)):\n                if arr[i] > arr[j]:\n                    ret.append(i)\n                    arr[i], arr[j] = arr[j], arr[i]\n        return ret\n"
    },
    {
        "number": 970,
        "title": "Powerful Integers",
        "difficulty": 1,
        "answer": "        ans = []\n        for i in range(x, bound):\n            for j in range(y, bound):\n                ans.append(i + j)\n        return ans\n"
    },
    {
        "number": 971,
        "title": "Flip Binary Tree To Match Preorder Traversal",
        "difficulty": 1,
        "answer": "        if not root:\n            return []"
    },
    {
        "number": 972,
        "title": "Equal Rational Numbers",
        "difficulty": 2,
        "answer": "        s = s.strip()\n        t = t.strip()\n        if len(s)!= len(t):\n            return False\n        if s[0] == '(' and t[0] == '(':\n            s = s[1:]\n            t = t[1:]\n        if s[-1] == ')' and t[-1] == ')':\n            s = s[:-1]\n            t = t[:-1]\n        if len(s) == 0:\n            return True\n        if len(t) == 0:\n            return False\n        if s[0] == '(' and t[0] == '(':\n            s = s[1:]\n            t = t[1:]\n        if s[-1] == ')' and t[-1] == ')':\n            s = s[:-1]\n            t = t[:-1]\n        if len(s) == 0:\n            return True\n        if len(t) == 0:\n            return False\n        if s[0] == '(' and t[0]"
    },
    {
        "number": 973,
        "title": "K Closest Points to Origin",
        "difficulty": 1,
        "answer": "        n = len(points)\n        if k > n:\n            return []\n        if k == 1:\n            return [[0, 0]]\n        if k == 2:\n            return [[0, 0], [0, 0]]\n        dists = [float(\"inf\")] * n\n        for i in range(n):\n            dists[i] = [float(\"inf\")] * n\n            for j in range(n):\n                dists[i][j] = math.sqrt((points[i][0] - points[j][0]) ** 2 + (points[i][1] - points[j][1]) ** 2)\n        ans = []\n        for i in range(n):\n            min_dist = float(\"inf\")\n            for j in range(n):\n                if i == j:\n                    continue\n                dist = dists[i][j]\n                if dist < min_dist:\n                    min_dist = dist\n                    ans.append([points[i][0], points[i][1]])\n        return ans\n"
    },
    {
        "number": 974,
        "title": "Subarray Sums Divisible by K",
        "difficulty": 1,
        "answer": "        if not nums:\n            return 0\n        n = len(nums)\n        if k > n:\n            return 0\n        dp = [0] * (k + 1)\n        for i in range(n):\n            dp[k] += nums[i]\n        for i in range(k, 0, -1):\n            dp[i] += dp[i - 1]\n        return dp[k]\n"
    },
    {
        "number": 975,
        "title": "Odd Even Jump",
        "difficulty": 2,
        "answer": "        n = len(arr)\n        dp = [0] * (n + 1)\n        dp[0] = 1\n        for i in range(1, n + 1):\n            for j in range(i):\n                if arr[j] <= arr[i]:\n                    dp[i] += dp[j]\n        return dp[n]"
    },
    {
        "number": 976,
        "title": "Largest Perimeter Triangle",
        "difficulty": 0,
        "answer": "        n = len(nums)\n        if n == 0:\n            return 0\n        if n == 1:\n            return nums[0]\n        if n == 2:\n            return max(nums[0], nums[1])\n        if n == 3:\n            return max(nums[0], max(nums[1], nums[2]))\n        if n == 4:\n            return max(nums[0], max(nums[1], max(nums[2], nums[3])))\n        if n == 5:\n            return max(nums[0], max(nums[1], max(nums[2], max(nums[3], nums[4]))))\n        if n == 6:\n            return max(nums[0], max(nums[1], max(nums[2], max(nums[3], max(nums[4], nums[5]))))\n        if n == 7:\n            return max(nums[0], max(nums[1], max(nums[2], max"
    },
    {
        "number": 977,
        "title": "Squares of a Sorted Array",
        "difficulty": 0,
        "answer": "        nums.sort()\n        result = []\n        for i in range(len(nums)):\n            result.append(nums[i] * nums[i])\n        return result\n"
    },
    {
        "number": 978,
        "title": "Longest Turbulent Subarray",
        "difficulty": 1,
        "answer": "        n = len(arr)\n        if n == 0:\n            return 0\n        if n == 1:\n            return 1\n        if n == 2:\n            return 2\n        if n == 3:\n            return 3\n        if n == 4:\n            return 4\n        if n == 5:\n            return 5\n        if n == 6:\n            return 6\n        if n == 7:\n            return 7\n        if n == 8:\n            return 8\n        if n == 9:\n            return 9\n        if n == 10:\n            return 10\n        if n == 11:\n            return 11\n        if n == 12:\n            return 12\n        if n == 13:\n            return 13\n        if n == 14:\n            return 14\n        if n == 15:\n            return 15\n        if n == 16:\n            return 16\n        if n == 17:\n            return 17\n        if n == 18:\n            return 18\n        if n == 19:\n            return 19\n        if n == 20:\n            return 20\n        if n == 21:\n            return 21\n"
    },
    {
        "number": 979,
        "title": "Distribute Coins in Binary Tree",
        "difficulty": 1,
        "answer": "        if not root:\n            return 0"
    },
    {
        "number": 980,
        "title": "Unique Paths III",
        "difficulty": 2,
        "answer": "        n = len(grid)\n        m = len(grid[0])\n        if n == 0 or m == 0:\n            return 0\n        if grid[0][0] == 1:\n            return 1\n        if grid[n-1][m-1] == 1:\n            return 1\n        if grid[0][0] == 2:\n            return 0\n        if grid[n-1][m-1] == 2:\n            return 0\n        if grid[0][0] == -1:\n            return 0\n        if grid[n-1][m-1] == -1:\n            return 0\n        return self.uniquePathsII(grid, 0, n-1, m-1)"
    },
    {
        "number": 981,
        "title": "Time Based Key-Value Store",
        "difficulty": 1,
        "answer": "        pass"
    },
    {
        "number": 982,
        "title": "Triples with Bitwise AND Equal To Zero",
        "difficulty": 2,
        "answer": "        ans = 0\n        for i in range(len(nums)):\n            for j in range(i+1, len(nums)):\n                for k in range(j+1, len(nums)):\n                    ans += nums[i] & nums[j] & nums[k]\n        return ans\n"
    },
    {
        "number": 983,
        "title": "Minimum Cost For Tickets",
        "difficulty": 1,
        "answer": "        n = len(days)\n        dp = [0] * (n + 1)\n        dp[0] = costs[0]\n        dp[1] = costs[1]\n        dp[2] = costs[2]\n        for i in range(3, n + 1):\n            dp[i] = min(dp[i - 1], dp[i - 2] + costs[i])\n        return dp[n]\n"
    },
    {
        "number": 984,
        "title": "String Without AAA or BBB",
        "difficulty": 1,
        "answer": "        # DP\n        # dp[i][j] = s[0:i] + s[i:j] + s[j:len(s)]\n        # dp[i][j] = s[0:i] + s[i:j] + s[j:len(s)]\n        # dp[i][j] = s[0:i] + s[i:j] + s[j:len(s)]\n        # dp[i][j] = s[0:i] + s[i:j] + s[j:len(s)]\n        # dp[i][j] = s[0:i] + s[i:j] + s[j:len(s)]\n        # dp[i][j] = s[0:i] + s[i:j] + s[j:len(s)]\n        # dp[i][j] = s[0:i] + s[i:j] + s[j:len(s)]\n        # dp[i][j] = s[0:i"
    },
    {
        "number": 985,
        "title": "Sum of Even Numbers After Queries",
        "difficulty": 1,
        "answer": "        ans = []\n        for q in queries:\n            ans.append(sum(nums[q[1]:q[1]+2]))\n        return ans"
    },
    {
        "number": 986,
        "title": "Interval List Intersections",
        "difficulty": 1,
        "answer": "        intersection = []\n        for i in range(len(firstList)):\n            for j in range(len(secondList)):\n                if firstList[i][0] <= secondList[j][0] and firstList[i][1] >= secondList[j][1]:\n                    intersection.append(secondList[j])\n        return intersection"
    },
    {
        "number": 987,
        "title": "Vertical Order Traversal of a Binary Tree",
        "difficulty": 2,
        "answer": "        if not root:\n            return []\n        res = []\n        def dfs(root, row, col):\n            if not root:\n                return\n            if row == len(res):\n                res.append([])\n            res[row].append(root.val)\n            dfs(root.left, row + 1, col - 1)\n            dfs(root.right, row + 1, col + 1)\n        dfs(root, 0, 0)\n        return res"
    },
    {
        "number": 988,
        "title": "Smallest String Starting From Leaf",
        "difficulty": 1,
        "answer": "        if not root:\n            return \"\""
    },
    {
        "number": 989,
        "title": "Add to Array-Form of Integer",
        "difficulty": 0,
        "answer": "        ret = []\n        for i in range(len(num)):\n            ret.append(num[i] + k)\n        return ret"
    },
    {
        "number": 990,
        "title": "Satisfiability of Equality Equations",
        "difficulty": 1,
        "answer": "        if not equations:\n            return True\n        for i in range(len(equations)):\n            for j in range(i+1, len(equations)):\n                if equations[i][0] == equations[j][0]:\n                    return False\n        return True\n"
    },
    {
        "number": 991,
        "title": "Broken Calculator",
        "difficulty": 1,
        "answer": "        # Brute force\n        # dp[i][j] = min(dp[i - 1][j], dp[i - 1][j - 1]) + 1\n        # dp[i][j] = min(dp[i - 1][j], dp[i - 1][j - 1]) + 1\n        # dp[i][j] = min(dp[i - 1][j], dp[i - 1][j - 1]) + 1\n        # dp[i][j] = min(dp[i - 1][j], dp[i - 1][j - 1]) + 1\n        # dp[i][j] = min(dp[i - 1][j], dp[i - 1][j - 1]) + 1\n        # dp[i][j] = min(dp[i - 1][j], dp[i - 1][j - 1]) + 1\n        # dp[i][j] = min(dp[i - 1][j], dp[i - 1][j - 1]) + 1\n        # dp[i"
    },
    {
        "number": 992,
        "title": "Subarrays with K Different Integers",
        "difficulty": 2,
        "answer": "        n = len(nums)\n        if k > n:\n            return 0\n        dp = [0] * (n + 1)\n        dp[0] = 1\n        for i in range(1, n + 1):\n            for j in range(i):\n                if nums[j] == nums[i]:\n                    dp[i] += dp[j]\n        return dp[k]\n"
    },
    {
        "number": 993,
        "title": "Cousins in Binary Tree",
        "difficulty": 0,
        "answer": "        if not root:\n            return False\n        if root.val == x or root.val == y:\n            return True\n        if root.val == root.left.val or root.val == root.right.val:\n            return self.isCousins(root.left, x, y) or self.isCousins(root.right, x, y)\n        return False\n"
    },
    {
        "number": 994,
        "title": "Rotting Oranges",
        "difficulty": 1,
        "answer": "        m, n = len(grid), len(grid[0])\n        if m == 0 or n == 0:\n            return 0\n        # store the number of rotten oranges in each row\n        rotten_in_row = [0] * n\n        # store the number of rotten oranges in each column\n        rotten_in_col = [0] * m\n        # store the number of rotten oranges in each diagonal\n        rotten_in_diag = [0] * (m * n)\n        # store the number of rotten oranges in each anti-diagonal\n        rotten_in_anti_diag = [0] * (m * n)\n        # store the number of rotten oranges in each anti-diagonal\n        rotten_in_anti_diag_up = [0] * (m * n)\n        # store the number of rotten oranges in each anti-diagonal\n        rotten_in_anti_diag_down = [0] * (m * n)\n        # store the number of rotten oranges in each anti-diagonal\n        rotten_in_anti_di"
    },
    {
        "number": 995,
        "title": "Minimum Number of K Consecutive Bit Flips",
        "difficulty": 2,
        "answer": "        n = len(nums)\n        if k > n:\n            return -1\n        if k == 0:\n            return 0\n        if k == 1:\n            return min(nums)\n        if k == 2:\n            return min(nums) + min(nums[:nums.index(0)])\n        if k == 3:\n            return min(nums) + min(nums[:nums.index(0)]) + min(nums[nums.index(0):])\n        if k == 4:\n            return min(nums) + min(nums[:nums.index(0)]) + min(nums[nums.index(0):]) + min(nums[nums.index(0):nums.index(0) + 1])\n        if k == 5:\n            return min(nums) + min(nums[:nums.index(0)]) + min(nums[nums.index(0):]) + min(nums[nums.index(0):nums.index(0"
    },
    {
        "number": 996,
        "title": "Number of Squareful Arrays",
        "difficulty": 2,
        "answer": "        n = len(nums)\n        if n == 0:\n            return 0\n        if n == 1:\n            return 1\n        if n == 2:\n            return 2\n        if n == 3:\n            return 4\n        if n == 4:\n            return 8\n        if n == 5:\n            return 16\n        if n == 6:\n            return 32\n        if n == 7:\n            return 64\n        if n == 8:\n            return 128\n        if n == 9:\n            return 256\n        if n == 10:\n            return 512\n        if n == 11:\n            return 1024\n        if n == 12:\n            return 2048\n        if n == 13:\n            return 4096\n        if n == 14:\n            return 8192\n        if n == 15:\n            return 16384\n        if n == 16:\n            return 32768\n        if n == 17:\n            return 65536\n        if n == 18:\n            return 131072\n        if n == 19:\n            return 262144\n        if n == 20:\n            return 524288\n        "
    },
    {
        "number": 997,
        "title": "Find the Town Judge",
        "difficulty": 0,
        "answer": "        trust_set = set(trust)\n        trust_set.discard(None)\n        trust_set.discard(0)\n        trust_set.discard(n)\n        trust_set.discard(n+1)\n        trust_set.discard(n+2)\n        trust_set.discard(n+3)\n        trust_set.discard(n+4)\n        trust_set.discard(n+5)\n        trust_set.discard(n+6)\n        trust_set.discard(n+7)\n        trust_set.discard(n+8)\n        trust_set.discard(n+9)\n        trust_set.discard(n+10)\n        trust_set.discard(n+11)\n        trust_set.discard(n+12)\n        trust_set.discard(n+13)\n        trust_set.discard(n+14)\n        trust_set.discard(n+15)\n        trust_set.discard(n+16)"
    },
    {
        "number": 998,
        "title": "Maximum Binary Tree II",
        "difficulty": 1,
        "answer": "        if not root:\n            return None\n        if val < root.val:\n            return self.insertIntoMaxTree(root.left, val)\n        elif val > root.val:\n            return self.insertIntoMaxTree(root.right, val)\n        else:\n            return root"
    },
    {
        "number": 999,
        "title": "Available Captures for Rook",
        "difficulty": 0,
        "answer": "        if not board:\n            return 0"
    },
    {
        "number": 1000,
        "title": "Minimum Cost to Merge Stones",
        "difficulty": 2,
        "answer": "        n = len(stones)\n        if n == 0:\n            return 0\n        if k == 0:\n            return 0\n        if k == 1:\n            return stones[0]\n        if k == 2:\n            return min(stones[0], stones[1])\n        if k == 3:\n            return min(stones[0], min(stones[1], stones[2]))\n        if k == 4:\n            return min(stones[0], min(stones[1], min(stones[2], stones[3])))\n        if k == 5:\n            return min(stones[0], min(stones[1], min(stones[2], min(stones[3], stones[4]))))\n        if k == 6:\n            return min(stones[0], min(stones[1], min(stones[2], min(stones[3], min(stones[4], stones[5]))))\n        if k == 7:\n            return min(stones[0], min(stones[1], min(stones[2], min(stones[3], min(stones[4], min(stones"
    },
    {
        "number": 1001,
        "title": "Grid Illumination",
        "difficulty": 2,
        "answer": "        ans = [0] * len(queries)\n        for i in range(len(ans)):\n            ans[i] = 0\n        for j in range(len(ans)):\n            for k in range(len(ans)):\n                if queries[j][k] == 1:\n                    ans[j] = 1\n                    break\n        for i in range(len(ans)):\n            if ans[i] == 0:\n                for j in range(len(ans)):\n                    if ans[j] == 1:\n                        ans[j] = 0\n                        break\n        return ans"
    },
    {
        "number": 1002,
        "title": "Find Common Characters",
        "difficulty": 0,
        "answer": "        ret = []\n        for word in words:\n            ret.append(set(word))\n        return ret\n"
    },
    {
        "number": 1003,
        "title": "Check If Word Is Valid After Substitutions",
        "difficulty": 1,
        "answer": "        if not s:\n            return True\n        t = \"\"\n        for c in s:\n            if t:\n                t += c\n            else:\n                t = c\n        return t == s"
    },
    {
        "number": 1004,
        "title": "Max Consecutive Ones III",
        "difficulty": 1,
        "answer": "        if not nums or k == 0:\n            return 0\n        n = len(nums)\n        max_ones = 0\n        for i in range(n):\n            if nums[i] == 1:\n                max_ones = max(max_ones, i - k + 1)\n            else:\n                max_ones = max(max_ones, i)\n        return max_ones\n"
    },
    {
        "number": 1005,
        "title": "Maximize Sum Of Array After K Negations",
        "difficulty": 0,
        "answer": "        nums.sort()\n        ans = 0\n        for i in range(len(nums)):\n            if i < k:\n                ans += nums[i]\n            else:\n                ans += nums[i] * -1\n        return ans\n"
    },
    {
        "number": 1006,
        "title": "Clumsy Factorial",
        "difficulty": 1,
        "answer": "        if n == 0:\n            return 1\n        if n == 1:\n            return 1\n        if n == 2:\n            return 2\n        if n == 3:\n            return 3\n        if n == 4:\n            return 4\n        if n == 5:\n            return 5\n        if n == 6:\n            return 6\n        if n == 7:\n            return 7\n        if n == 8:\n            return 8\n        if n == 9:\n            return 9\n        if n == 10:\n            return 10\n        if n == 11:\n            return 11\n        if n == 12:\n            return 12\n        if n == 13:\n            return 13\n        if n == 14:\n            return 14\n        if n == 15:\n            return 15\n        if n == 16:\n            return 16\n        if n == 17:\n            return 17\n        if n == 18:\n            return 18\n        if n == 19:\n            return 19\n        if n == 20:\n            return 20\n        if n == 21:\n            return 21\n        if n == 22:\n            "
    },
    {
        "number": 1007,
        "title": "Minimum Domino Rotations For Equal Row",
        "difficulty": 1,
        "answer": "        n = len(tops)\n        if n == 0:\n            return 0\n        if n == 1:\n            return 1\n        if n == 2:\n            return 2\n        if n == 3:\n            return 3\n        if n == 4:\n            return 4\n        if n == 5:\n            return 5\n        if n == 6:\n            return 6\n        if n == 7:\n            return 7\n        if n == 8:\n            return 8\n        if n == 9:\n            return 9\n        if n == 10:\n            return 10\n        if n == 11:\n            return 11\n        if n == 12:\n            return 12\n        if n == 13:\n            return 13\n        if n == 14:\n            return 14\n        if n == 15:\n            return 15\n        if n == 16:\n            return 16\n        if n == 17:\n            return 17\n        if n == 18:\n            return 18\n        if n == 19:\n            return 19\n        if n == 20:\n            return 20\n        if n == 21:\n            return 21\n"
    },
    {
        "number": 1008,
        "title": "Construct Binary Search Tree from Preorder Traversal",
        "difficulty": 1,
        "answer": "        if not preorder or len(preorder) == 0:\n            return None\n        root = TreeNode(preorder[0])\n        root.left = self.bstFromPreorder(preorder[1:])\n        root.right = self.bstFromPreorder(preorder[1:])\n        return root"
    },
    {
        "number": 1009,
        "title": "Complement of Base 10 Integer",
        "difficulty": 0,
        "answer": "        return bin(~n).count(\"1\")"
    },
    {
        "number": 1010,
        "title": "Pairs of Songs With Total Durations Divisible by 60",
        "difficulty": 1,
        "answer": "        n = len(time)\n        ans = 0\n        for i in range(n):\n            for j in range(i+1, n):\n                if (time[i] + time[j]) % 60 == 0:\n                    ans += 1\n        return ans\n"
    },
    {
        "number": 1011,
        "title": "Capacity To Ship Packages Within D Days",
        "difficulty": 1,
        "answer": "        if not weights or not days:\n            return 0\n        if len(weights)!= len(days):\n            return -1\n        if len(weights) == 1:\n            return weights[0]\n        if len(weights) == 2:\n            return min(weights[0], weights[1])\n        if len(weights) == 3:\n            return min(weights[0], min(weights[1], weights[2]))\n        if len(weights) == 4:\n            return min(weights[0], min(weights[1], min(weights[2], weights[3])))\n        if len(weights) == 5:\n            return min(weights[0], min(weights[1], min(weights[2], weights[3], weights[4])))\n        return -1"
    },
    {
        "number": 1012,
        "title": "Numbers With Repeated Digits",
        "difficulty": 2,
        "answer": "        count = 0\n        for i in range(1, n+1):\n            if i % 10 == 0:\n                count += 1\n        return count\n"
    },
    {
        "number": 1013,
        "title": "Partition Array Into Three Parts With Equal Sum",
        "difficulty": 0,
        "answer": "        if not arr or len(arr) == 0:\n            return False\n        n = len(arr)\n        for i in range(n):\n            for j in range(i + 1, n):\n                if arr[i] + arr[j] == arr[j] + arr[i + 1]:\n                    return True\n        return False\n"
    },
    {
        "number": 1014,
        "title": "Best Sightseeing Pair",
        "difficulty": 1,
        "answer": "        n = len(values)\n        if n == 0:\n            return 0\n        max_score = 0\n        for i in range(n):\n            for j in range(i + 1, n):\n                max_score = max(max_score, values[i] + values[j] + i - j)\n        return max_score\n"
    },
    {
        "number": 1015,
        "title": "Smallest Integer Divisible by K",
        "difficulty": 1,
        "answer": "        n = 1\n        while n < 1000000:\n            if n % k == 0:\n                n = n // k\n            else:\n                n += 1\n        return n\n"
    },
    {
        "number": 1016,
        "title": "Binary String With Substrings Representing 1 To N",
        "difficulty": 1,
        "answer": "        if n == 1:\n            return True\n        if n == 2:\n            return s[0] == '0' and s[1] == '1'\n        if n == 3:\n            return s[0] == '0' and s[1] == '1' and s[2] == '0'\n        if n == 4:\n            return s[0] == '0' and s[1] == '1' and s[2] == '0' and s[3] == '1'\n        if n == 5:\n            return s[0] == '0' and s[1] == '1' and s[2] == '0' and s[3] == '1' and s[4] == '0'\n        if n == 6:\n            return s[0] == '0' and s[1] == '1' and s[2] == '0' and s[3] == '1' and s[4] == '0' and s[5] == '1'\n        if n == 7:\n            return s[0] =="
    },
    {
        "number": 1017,
        "title": "Convert to Base -2",
        "difficulty": 1,
        "answer": "        if n == 0:\n            return \"0\"\n        if n == 1:\n            return \"1\"\n        if n == 2:\n            return \"10\"\n        if n == 3:\n            return \"11\"\n        if n == 4:\n            return \"100\"\n        if n == 5:\n            return \"101\"\n        if n == 6:\n            return \"110\"\n        if n == 7:\n            return \"111\"\n        if n == 8:\n            return \"1000\"\n        if n == 9:\n            return \"1001\"\n        if n == 10:\n            return \"1010\"\n        if n == 11:\n            return \"1011\"\n        if n == 12:\n            return \"1100\"\n        if n == 13:\n            return \"1101\"\n        if n == 14:\n            return \"1110\"\n        if n == 15:\n            return \"1111\"\n        if n == 16:\n            return \"10000\"\n        if n == 17:\n            return \"10001\"\n        if n == 18:\n            return \"100"
    },
    {
        "number": 1018,
        "title": "Binary Prefix Divisible By 5",
        "difficulty": 0,
        "answer": "        ans = [False] * len(nums)\n        for i in range(len(nums)):\n            ans[i] = nums[i] % 5 == 0\n        return ans\n"
    },
    {
        "number": 1019,
        "title": "Next Greater Node In Linked List",
        "difficulty": 1,
        "answer": "        if not head:\n            return []"
    },
    {
        "number": 1020,
        "title": "Number of Enclaves",
        "difficulty": 1,
        "answer": "        m = len(grid)\n        n = len(grid[0])\n        if m == 0 or n == 0:\n            return 0\n        if m == 1 or n == 1:\n            return 1\n        if m == 2 or n == 2:\n            return 2\n        if m == 3 or n == 3:\n            return 3\n        if m == 4 or n == 4:\n            return 4\n        if m == 5 or n == 5:\n            return 5\n        if m == 6 or n == 6:\n            return 6\n        if m == 7 or n == 7:\n            return 7\n        if m == 8 or n == 8:\n            return 8\n        if m == 9 or n == 9:\n            return 9\n        if m == 10 or n == 10:\n            return 10\n        if m == 11 or n == 11:\n            return 11\n        if m == 12 or n == 12:\n            return 12\n        if m == 13 or n == 13:\n            return 13\n        if m == 14 or n == 14:\n            return 14\n        if m == 15 or n"
    },
    {
        "number": 1021,
        "title": "Remove Outermost Parentheses",
        "difficulty": 0,
        "answer": "        if not s:\n            return s\n        stack = []\n        for i in range(len(s)):\n            if s[i] == '(':\n                stack.append(s[i:])\n            elif s[i] == ')':\n                if stack:\n                    stack.pop()\n                else:\n                    return s[i:]\n        return ''.join(stack) if stack else s\n"
    },
    {
        "number": 1022,
        "title": "Sum of Root To Leaf Binary Numbers",
        "difficulty": 0,
        "answer": "        if not root:\n            return 0\n        return sum(self.sumRootToLeaf(root.left) + self.sumRootToLeaf(root.right))\n"
    },
    {
        "number": 1023,
        "title": "Camelcase Matching",
        "difficulty": 1,
        "answer": "        ans = []\n        for q in queries:\n            for i in range(len(pattern)):\n                if q[i] == pattern[i]:\n                    ans.append(True)\n                else:\n                    ans.append(False)\n        return ans\n"
    },
    {
        "number": 1024,
        "title": "Video Stitching",
        "difficulty": 1,
        "answer": "        # time = 10\n        # clips = [[0,2],[4,6],[8,10],[1,9],[1,5],[5,9]], time = 10\n        # clips = [[0,2],[4,6],[8,10],[1,9],[1,5],[5,9]], time = 10\n        # clips = [[0,2],[4,6],[8,10],[1,9],[1,5],[5,9]], time = 10\n        # clips = [[0,2],[4,6],[8,10],[1,9],[1,5],[5,9]], time = 10\n        # clips = [[0,2],[4,6],[8,10],[1,9],[1,5],[5,9]], time = 10\n        # clips = [[0,2],[4,6],[8,10],[1,9],[1,5],[5,9]], time = 10\n        # clips = [[0,2],[4,6],[8,10],[1,9],[1,5],[5,9]], time = 10\n        # clips = [[0"
    },
    {
        "number": 1025,
        "title": "Divisor Game",
        "difficulty": 0,
        "answer": "        return n % 2 == 0 and n % 3 == 0"
    },
    {
        "number": 1026,
        "title": "Maximum Difference Between Node and Ancestor",
        "difficulty": 1,
        "answer": "        if not root:\n            return 0"
    },
    {
        "number": 1027,
        "title": "Longest Arithmetic Subsequence",
        "difficulty": 1,
        "answer": "        if not nums:\n            return 0\n        n = len(nums)\n        dp = [1] * n\n        for i in range(1, n):\n            dp[i] = max(dp[i - 1], dp[i - 2] + nums[i - 1] - nums[i - 2])\n        return dp[-1]\n"
    },
    {
        "number": 1028,
        "title": "Recover a Tree From Preorder Traversal",
        "difficulty": 2,
        "answer": "        if not traversal:\n            return None\n        root = TreeNode(traversal[0])\n        stack = [root]\n        for i in range(1, len(traversal)):\n            if traversal[i] == '-':\n                stack.append(stack[-1])\n                stack.append(stack[-1].left)\n                stack.append(stack[-1].right)\n            else:\n                stack.append(stack[-1].right)\n        return root\n"
    },
    {
        "number": 1029,
        "title": "Two City Scheduling",
        "difficulty": 1,
        "answer": "        n = len(costs)\n        if n == 0:\n            return 0\n        if n == 1:\n            return costs[0][0]\n        if n == 2:\n            return min(costs[0][0], costs[1][0])\n        if n == 3:\n            return min(costs[0][0], min(costs[1][0], costs[2][0]))\n        if n == 4:\n            return min(costs[0][0], min(costs[1][0], min(costs[2][0], costs[3][0])))\n        if n == 5:\n            return min(costs[0][0], min(costs[1][0], min(costs[2][0], min(costs[3][0], costs[4][0]))))\n        if n == 6:\n            return min(costs[0][0], min(costs[1][0], min(costs[2][0], min(costs[3][0], min(costs[4][0], costs[5"
    },
    {
        "number": 1030,
        "title": "Matrix Cells in Distance Order",
        "difficulty": 0,
        "answer": "        ans = []\n        for r in range(rows):\n            for c in range(cols):\n                ans.append([r, c])\n        ans.sort(key=lambda x: (x[0] - rCenter, x[1] - cCenter))\n        return ans\n"
    },
    {
        "number": 1031,
        "title": "Maximum Sum of Two Non-Overlapping Subarrays",
        "difficulty": 1,
        "answer": "        # DP\n        # dp[i][j] = max(dp[i-1][j], dp[i-1][j-1]) + nums[i]\n        # dp[i][j] = max(dp[i-1][j], dp[i-1][j-1]) + nums[i]\n        # dp[i][j] = max(dp[i-1][j], dp[i-1][j-1]) + nums[i]\n        # dp[i][j] = max(dp[i-1][j], dp[i-1][j-1]) + nums[i]\n        # dp[i][j] = max(dp[i-1][j], dp[i-1][j-1]) + nums[i]\n        # dp[i][j] = max(dp[i-1][j], dp[i-1][j-1]) + nums[i]\n        # dp[i][j] = max(dp[i-1]["
    },
    {
        "number": 1032,
        "title": "Stream of Characters",
        "difficulty": 2,
        "answer": "        return any(self.query(letter) for letter in self.stream)"
    },
    {
        "number": 1033,
        "title": "Moving Stones Until Consecutive",
        "difficulty": 1,
        "answer": "        ans = [0, 0]\n        for i in range(a, b):\n            ans[0] = min(ans[0], 1 + c - i)\n            ans[1] = max(ans[1], 1 + c - i)\n        return ans\n"
    },
    {
        "number": 1034,
        "title": "Coloring A Border",
        "difficulty": 1,
        "answer": "        m, n = len(grid), len(grid[0])\n        if row < 0 or row >= m or col < 0 or col >= n:\n            return grid\n        if grid[row][col] == color:\n            return grid\n        grid[row][col] = color\n        grid[row][col] = grid[row][col] if row > 0 and grid[row-1][col] == color else grid[row][col]\n        grid[row][col] = grid[row][col] if col > 0 and grid[row][col-1] == color else grid[row][col]\n        grid[row][col] = grid[row][col] if row < m-1 and grid[row+1][col] == color else grid[row][col]\n        grid[row][col] = grid[row][col] if col < n-1 and grid[row][col+1] == color else grid[row][col]\n        return grid"
    },
    {
        "number": 1035,
        "title": "Uncrossed Lines",
        "difficulty": 1,
        "answer": "        nums1.sort()\n        nums2.sort()\n        nums1.append(nums2[-1])\n        nums2.append(nums1[-1])\n        nums1.sort()\n        nums2.sort()\n        nums1.append(nums2[-1])\n        nums2.append(nums1[-1])\n        nums1.sort()\n        nums2.sort()\n        nums1.append(nums2[-1])\n        nums2.append(nums1[-1])\n        nums1.sort()\n        nums2.sort()\n        nums1.append(nums2[-1])\n        nums2.append(nums1[-1])\n        nums1.sort()\n        nums2.sort()\n        nums1.append(nums2[-1])\n        nums2.append(nums1[-1])\n        nums1.sort()\n        nums2.sort()\n        nums1"
    },
    {
        "number": 1036,
        "title": "Escape a Large Maze",
        "difficulty": 2,
        "answer": "        n = len(blocked)\n        m = len(blocked[0])\n        for i in range(n):\n            for j in range(m):\n                if blocked[i][j] == 1:\n                    return False\n        return True\n"
    },
    {
        "number": 1037,
        "title": "Valid Boomerang",
        "difficulty": 0,
        "answer": "        if not points:\n            return False\n        if len(points) == 1:\n            return False\n        if len(points) == 2:\n            return True\n        p1 = points[0]\n        p2 = points[1]\n        for i in range(2, len(points)):\n            p3 = points[i]\n            if p1[0] == p3[0] and p1[1] == p3[1]:\n                return False\n            elif p2[0] == p3[0] and p2[1] == p3[1]:\n                return False\n            else:\n                p1 = p2\n                p2 = p3\n        return True\n"
    },
    {
        "number": 1038,
        "title": "Binary Search Tree to Greater Sum Tree",
        "difficulty": 1,
        "answer": "        if not root:\n            return None\n        if not root.left and not root.right:\n            return root\n        if not root.left:\n            return self.bstToGst(root.right)\n        if not root.right:\n            return self.bstToGst(root.left)\n        return self.bstToGst(root.left) + self.bstToGst(root.right)"
    },
    {
        "number": 1039,
        "title": "Minimum Score Triangulation of Polygon",
        "difficulty": 1,
        "answer": "        n = len(values)\n        if n == 0:\n            return 0\n        if n == 1:\n            return values[0]\n        if n == 2:\n            return values[0] * values[1]\n        if n == 3:\n            return values[0] * values[1] * values[2]\n        if n == 4:\n            return values[0] * values[1] * values[2] * values[3]\n        if n == 5:\n            return values[0] * values[1] * values[2] * values[3] * values[4]\n        if n == 6:\n            return values[0] * values[1] * values[2] * values[3] * values[4] * values[5]\n        if n == 7:\n            return values[0] * values[1] * values[2] * values[3] * values[4] * values[5] * values[6]\n        if n == 8:\n            return values[0] * values[1] * values[2] * values[3]"
    },
    {
        "number": 1040,
        "title": "Moving Stones Until Consecutive II",
        "difficulty": 1,
        "answer": "        # DP\n        # dp[i][j] = min(dp[i-1][j], dp[i-1][j-1], dp[i-1][j+1])\n        # dp[i][j] = min(dp[i-1][j], dp[i-1][j-1], dp[i-1][j+1])\n        # dp[i][j] = min(dp[i-1][j], dp[i-1][j-1], dp[i-1][j+1])\n        # dp[i][j] = min(dp[i-1][j], dp[i-1][j-1], dp[i-1][j+1])\n        # dp[i][j] = min(dp[i-1][j], dp[i-1][j-1], dp[i-1][j+1])\n        # dp[i][j] = min(dp[i-1][j], dp[i-1][j-1],"
    },
    {
        "number": 1041,
        "title": "Robot Bounded In Circle",
        "difficulty": 1,
        "answer": "        direction = 0\n        for i in range(len(instructions)):\n            if instructions[i] == \"G\":\n                direction += 1\n            elif instructions[i] == \"L\":\n                direction -= 1\n            else:\n                return False\n        return direction == 0"
    },
    {
        "number": 1042,
        "title": "Flower Planting With No Adjacent",
        "difficulty": 1,
        "answer": "        # write your code here\n        if n == 1:\n            return [1]\n        elif n == 2:\n            return [1, 2]\n        elif n == 3:\n            return [1, 2, 3]\n        else:\n            return [1, 2, 3, 4]"
    },
    {
        "number": 1043,
        "title": "Partition Array for Maximum Sum",
        "difficulty": 1,
        "answer": "        # DP\n        # dp[i][j] = max(dp[i-1][j], dp[i-1][j-1]) + arr[i]\n        # dp[i][j] = max(dp[i-1][j], dp[i-1][j-1]) + arr[i]\n        # dp[i][j] = max(dp[i-1][j], dp[i-1][j-1]) + arr[i]\n        # dp[i][j] = max(dp[i-1][j], dp[i-1][j-1]) + arr[i]\n        # dp[i][j] = max(dp[i-1][j], dp[i-1][j-1]) + arr[i]\n        # dp[i][j] = max(dp[i-1][j], dp[i-1][j-1]) + arr[i]\n        # dp[i][j] = max(dp[i-1][j], dp[i"
    },
    {
        "number": 1044,
        "title": "Longest Duplicate Substring",
        "difficulty": 2,
        "answer": "        # dp[i][j] = max(dp[i-1][j], dp[i-1][j-1])\n        # dp[i][j] = max(dp[i-1][j], dp[i-1][j-1])\n        # dp[i][j] = max(dp[i-1][j], dp[i-1][j-1])\n        # dp[i][j] = max(dp[i-1][j], dp[i-1][j-1])\n        # dp[i][j] = max(dp[i-1][j], dp[i-1][j-1])\n        # dp[i][j] = max(dp[i-1][j], dp[i-1][j-1])\n        # dp[i][j] = max(dp[i-1][j], dp[i-1][j-1])\n        # dp[i][j] = max(dp[i-1][j], dp[i-1"
    },
    {
        "number": 1046,
        "title": "Last Stone Weight",
        "difficulty": 0,
        "answer": "        if not stones:\n            return 0\n        stones.sort()\n        return stones[-1]\n"
    },
    {
        "number": 1047,
        "title": "Remove All Adjacent Duplicates In String",
        "difficulty": 0,
        "answer": "        if not s:\n            return s\n        s = list(s)\n        for i in range(len(s)):\n            for j in range(i+1, len(s)):\n                if s[i] == s[j]:\n                    s[i] = 'a'\n                    s[j] = 'z'\n                    break\n        return ''.join(s)\n"
    },
    {
        "number": 1048,
        "title": "Longest String Chain",
        "difficulty": 1,
        "answer": "        if not words:\n            return 0\n        n = len(words)\n        dp = [0] * (n + 1)\n        for i in range(1, n + 1):\n            dp[i] = max(dp[i - 1], dp[i - 2] + 1)\n        for i in range(n):\n            for j in range(i + 1, n + 1):\n                if words[i] == words[j]:\n                    dp[j] = max(dp[j], dp[i] + 1)\n        return dp[n]"
    },
    {
        "number": 1049,
        "title": "Last Stone Weight II",
        "difficulty": 1,
        "answer": "        n = len(stones)\n        if n == 0:\n            return 0\n        if n == 1:\n            return stones[0]\n        if n == 2:\n            return min(stones[0], stones[1])\n        if n == 3:\n            return min(stones[0], stones[1], stones[2])\n        if n == 4:\n            return min(stones[0], stones[1], stones[2], stones[3])\n        if n == 5:\n            return min(stones[0], stones[1], stones[2], stones[3], stones[4])\n        if n == 6:\n            return min(stones[0], stones[1], stones[2], stones[3], stones[4], stones[5])\n        if n == 7:\n            return min(stones[0], stones[1], stones[2], stones[3], stones[4], stones[5], stones[6])\n        if n == 8:\n            return min(stones[0], stones[1], stones[2], stones[3], stones[4], stones[5], stones["
    },
    {
        "number": 1051,
        "title": "Height Checker",
        "difficulty": 0,
        "answer": "        return sum(1 for i in range(len(heights)) if heights[i]!= expected[i])"
    },
    {
        "number": 1052,
        "title": "Grumpy Bookstore Owner",
        "difficulty": 1,
        "answer": "        if len(customers) == 0:\n            return 0\n        if len(customers) == 1:\n            return customers[0]\n        if minutes == 0:\n            return 0\n        if minutes == 1:\n            return max(customers)\n        if minutes == 2:\n            return max(customers) + 1\n        if minutes == 3:\n            return max(customers) + 1 + max(customers)\n        if minutes == 4:\n            return max(customers) + 1 + max(customers) + 1\n        if minutes == 5:\n            return max(customers) + 1 + max(customers) + 1 + max(customers)\n        if minutes == 6:\n            return max(customers) + 1 + max(customers) + 1 + max(customers) + 1\n        if minutes == 7:\n            return max(customers) + 1 + max(customers) + 1 + max(customers) + 1 + max(customers)\n        if minutes == 8:\n            return max(customers) + 1 + max(customers) +"
    },
    {
        "number": 1053,
        "title": "Previous Permutation With One Swap",
        "difficulty": 1,
        "answer": "        n = len(arr)\n        if n == 0:\n            return arr\n        if n == 1:\n            return arr\n        if n == 2:\n            return [min(arr), max(arr)]\n        if n == 3:\n            return [min(arr), max(arr), min(arr[1:])]\n        if n == 4:\n            return [min(arr), max(arr), min(arr[1:]), min(arr[2:])]\n        if n == 5:\n            return [min(arr), max(arr), min(arr[1:]), min(arr[2:]), min(arr[3:])]\n        if n == 6:\n            return [min(arr), max(arr), min(arr[1:]), min(arr[2:]), min(arr[3:]), min(arr[4:])]\n        if n == 7:\n            return [min(arr), max(arr), min(arr[1:]), min(arr[2:]), min(arr[3:]), min(arr[4:]), min(arr[5"
    },
    {
        "number": 1054,
        "title": "Distant Barcodes",
        "difficulty": 1,
        "answer": "        n = len(barcodes)\n        if n == 0:\n            return []\n        if n == 1:\n            return [barcodes[0]]\n        if n == 2:\n            return [barcodes[0], barcodes[1]]\n        if n == 3:\n            return [barcodes[0], barcodes[1], barcodes[2]]\n        if n == 4:\n            return [barcodes[0], barcodes[1], barcodes[2], barcodes[3]]\n        if n == 5:\n            return [barcodes[0], barcodes[1], barcodes[2], barcodes[3], barcodes[4]]\n        if n == 6:\n            return [barcodes[0], barcodes[1], barcodes[2], barcodes[3], barcodes[4], barcodes[5]]\n        if n == 7:\n            return [barcodes[0], barcodes[1], barcodes[2], barcodes[3], barcodes[4], barcodes[5], barcodes[6]]\n        if n == 8"
    },
    {
        "number": 1061,
        "title": "Lexicographically Smallest Equivalent String",
        "difficulty": 1,
        "answer": "        # time:O(n)\n        # space:O(n)\n        # score:100(0ms)\n        # score:100(0ms)\n        # score:100(0ms)\n        # score:100(0ms)\n        # score:100(0ms)\n        # score:100(0ms)\n        # score:100(0ms)\n        # score:100(0ms)\n        # score:100(0ms)\n        # score:100(0ms)\n        # score:100(0ms)\n        # score:100(0ms)\n        # score:100(0ms)\n        # score:100(0ms)\n        # score:100(0ms)\n        # score:100(0ms)\n        # score:100(0ms)\n        # score:100(0ms)\n        # score:100(0ms)\n        # score:100(0ms)\n        # score:100(0ms)\n        # score:100(0ms)\n        # score:100(0ms)\n        #"
    },
    {
        "number": 1071,
        "title": "Greatest Common Divisor of Strings",
        "difficulty": 0,
        "answer": "        if len(str1) > len(str2):\n            str1, str2 = str2, str1\n        if len(str1) == 0:\n            return str2\n        if len(str2) == 0:\n            return str1\n        if str1[0] == str2[0]:\n            return self.gcdOfStrings(str1[1:], str2[1:])\n        if str1[0] < str2[0]:\n            return self.gcdOfStrings(str1, str2[1:])\n        return self.gcdOfStrings(str2, str1[1:])"
    },
    {
        "number": 1072,
        "title": "Flip Columns For Maximum Number of Equal Rows",
        "difficulty": 1,
        "answer": "        m = len(matrix)\n        n = len(matrix[0])\n        dp = [[0] * n for _ in range(m)]\n        for i in range(m):\n            for j in range(n):\n                if matrix[i][j] == 0:\n                    dp[i][j] = 0\n                elif matrix[i][j] == 1:\n                    dp[i][j] = 1\n                else:\n                    dp[i][j] = 1\n        for i in range(m):\n            for j in range(n):\n                if dp[i][j] == 0:\n                    dp[i][j] = 1\n                elif dp[i][j] == 1:\n                    dp[i][j] = 0\n                else:\n                    dp[i][j] = 1\n        ans = 0\n        for i in range(m):\n            for j in range(n):\n                if dp[i][j] == 1:\n                    ans = max(ans, 1 + self.maxEqualRowsAfterFlips(matrix"
    },
    {
        "number": 1073,
        "title": "Adding Two Negabinary Numbers",
        "difficulty": 1,
        "answer": "        result = []\n        for i in range(len(arr1)):\n            if arr1[i] == 0:\n                result.append(0)\n            else:\n                result.append(1)\n        for i in range(len(arr2)):\n            if arr2[i] == 0:\n                result.append(0)\n            else:\n                result.append(1)\n        return result"
    },
    {
        "number": 1074,
        "title": "Number of Submatrices That Sum to Target",
        "difficulty": 2,
        "answer": "        if not matrix or not matrix[0]:\n            return 0\n        m, n = len(matrix), len(matrix[0])\n        ans = 0\n        for i in range(m):\n            for j in range(n):\n                if matrix[i][j] == target:\n                    ans += 1\n                    for k in range(i, m):\n                        for l in range(j, n):\n                            if matrix[k][l] == target:\n                                ans += 1\n                                break\n                    for k in range(i, m):\n                        for l in range(j, n):\n                            if matrix[k][l] == -target:\n                                ans += 1\n                                break\n                    for k in range(i, m):\n                        for l in range(j, n):\n                            if matrix[k][l] == -target:\n                                ans += 1\n                                break\n                    for k in range(i, m):\n                        for l in range(j, n):\n                            if matrix[k][l] == target:\n                                ans += 1\n                                break\n        return ans\n"
    },
    {
        "number": 1078,
        "title": "Occurrences After Bigram",
        "difficulty": 0,
        "answer": "        words = []\n        text = text.split()\n        for i in range(len(text)):\n            if text[i] == first:\n                words.append(second)\n            elif text[i] == second:\n                words.append(first)\n        return words\n"
    },
    {
        "number": 1079,
        "title": "Letter Tile Possibilities",
        "difficulty": 1,
        "answer": "        if not tiles:\n            return 0\n        n = len(tiles)\n        dp = [0] * (n + 1)\n        dp[0] = 1\n        for i in range(1, n + 1):\n            for j in range(i):\n                dp[i] += dp[j]\n            dp[i] += 1\n        return dp[n]\n"
    },
    {
        "number": 1080,
        "title": "Insufficient Nodes in Root to Leaf Paths",
        "difficulty": 1,
        "answer": "        if not root:\n            return None\n        if not root.left and not root.right:\n            return root\n        if not root.left:\n            return self.deleteNode(root.right, limit)\n        if not root.right:\n            return self.deleteNode(root.left, limit)\n        if root.left.val < root.right.val:\n            return self.deleteNode(root.left, limit)\n        else:\n            return self.deleteNode(root.right, limit)"
    },
    {
        "number": 1081,
        "title": "Smallest Subsequence of Distinct Characters",
        "difficulty": 1,
        "answer": "        # DP\n        # dp[i][j] = s[i:j]\n        # dp[i][j] = s[i:j]\n        # dp[i][j] = s[i:j]\n        # dp[i][j] = s[i:j]\n        # dp[i][j] = s[i:j]\n        # dp[i][j] = s[i:j]\n        # dp[i][j] = s[i:j]\n        # dp[i][j] = s[i:j]\n        # dp[i][j] = s[i:j]\n        # dp[i][j] = s[i:j]\n        # dp[i][j] = s[i:j]\n        # dp[i][j] = s[i:j]\n        # dp[i][j] = s[i:j]\n        # dp[i][j] = s[i:j]\n        # dp[i][j"
    },
    {
        "number": 1089,
        "title": "Duplicate Zeros",
        "difficulty": 0,
        "answer": "        for i in range(len(arr)):\n            if arr[i] == 0:\n                arr[i] = 0\n                for j in range(i+1, len(arr)):\n                    if arr[j] == 0:\n                        arr[j] = arr[i]\n                        break\n"
    },
    {
        "number": 1090,
        "title": "Largest Values From Labels",
        "difficulty": 1,
        "answer": "        # dp[i][j] = max(dp[i-1][j], dp[i-1][j-1])\n        # dp[i][j] = max(dp[i-1][j], dp[i-1][j-1])\n        # dp[i][j] = max(dp[i-1][j], dp[i-1][j-1])\n        # dp[i][j] = max(dp[i-1][j], dp[i-1][j-1])\n        # dp[i][j] = max(dp[i-1][j], dp[i-1][j-1])\n        # dp[i][j] = max(dp[i-1][j], dp[i-1][j-1])\n        # dp[i][j] = max(dp[i-1][j], dp[i-1][j-1])\n        # dp[i][j] = max(dp[i-1][j], dp[i-1"
    },
    {
        "number": 1091,
        "title": "Shortest Path in Binary Matrix",
        "difficulty": 1,
        "answer": "        n = len(grid)\n        if n == 0:\n            return 0\n        if n == 1:\n            return 1\n        if n == 2:\n            return 2\n        if n == 3:\n            return 3\n        if n == 4:\n            return 4\n        if n == 5:\n            return 5\n        if n == 6:\n            return 6\n        if n == 7:\n            return 7\n        if n == 8:\n            return 8\n        if n == 9:\n            return 9\n        if n == 10:\n            return 10\n        if n == 11:\n            return 11\n        if n == 12:\n            return 12\n        if n == 13:\n            return 13\n        if n == 14:\n            return 14\n        if n == 15:\n            return 15\n        if n == 16:\n            return 16\n        if n == 17:\n            return 17\n        if n == 18:\n            return 18\n        if n == 19:\n            return 19\n        if n == 20:\n            return 20\n        if n == 21:\n            return 21\n"
    },
    {
        "number": 1092,
        "title": "Shortest Common Supersequence ",
        "difficulty": 2,
        "answer": "        # DP\n        # dp[i][j] = min(dp[i-1][j], dp[i-1][j-1], dp[i-1][j-2])\n        # dp[i][j] = min(dp[i-1][j], dp[i-1][j-1], dp[i-1][j-2], dp[i-2][j-1])\n        # dp[i][j] = min(dp[i-1][j], dp[i-1][j-1], dp[i-1][j-2], dp[i-2][j-1], dp[i-2][j-2])\n        # dp[i][j] = min(dp[i-1][j], dp[i-1][j-1], dp[i-1][j-2], dp[i-2][j-1], dp[i-2][j-2], dp[i-2][j-3])\n        # dp[i][j"
    },
    {
        "number": 1093,
        "title": "Statistics from a Large Sample",
        "difficulty": 1,
        "answer": "        return [float(x) for x in self.sampleStats(count)]\n"
    },
    {
        "number": 1094,
        "title": "Car Pooling",
        "difficulty": 1,
        "answer": "        if not trips:\n            return True\n        if not capacity:\n            return False\n        n = len(trips)\n        for i in range(n):\n            for j in range(i+1, n):\n                if trips[i][0] + trips[j][0] > capacity:\n                    return False\n        return True\n"
    },
    {
        "number": 1095,
        "title": "Find in Mountain Array",
        "difficulty": 2,
        "answer": "        if len(arr) == 0:\n            return -1"
    },
    {
        "number": 1096,
        "title": "Brace Expansion II",
        "difficulty": 2,
        "answer": "        R = set()\n        for e in expression.split(\",\"):\n            R.update(set(e.split(\"{\")))\n        return sorted(R)\n"
    },
    {
        "number": 1103,
        "title": "Distribute Candies to People",
        "difficulty": 0,
        "answer": "        ans = [0] * num_people\n        for i in range(num_people):\n            ans[i] += 1\n            while i < num_people - 1:\n                ans[i] += 1\n                i += 1\n            ans[i] += 1\n        return ans\n"
    },
    {
        "number": 1104,
        "title": "Path In Zigzag Labelled Binary Tree",
        "difficulty": 1,
        "answer": "        if label == 0:\n            return []\n        res = []\n        cur = label\n        while cur!= 0:\n            res.append(cur)\n            cur = (cur - 1) // 2\n        res.append(cur)\n        return res[::-1]\n"
    },
    {
        "number": 1105,
        "title": "Filling Bookcase Shelves",
        "difficulty": 1,
        "answer": "        # DP\n        # dp[i][j] = min(dp[i-1][j], dp[i-1][j-books[i][0]] + books[i][1])\n        dp = [[0 for _ in range(shelfWidth + 1)] for _ in range(len(books) + 1)]\n        dp[0][0] = 0\n        for i in range(1, len(books) + 1):\n            for j in range(1, shelfWidth + 1):\n                dp[i][j] = min(dp[i - 1][j], dp[i - 1][j - books[i][0]] + books[i][1])\n        return dp[-1][-1]"
    },
    {
        "number": 1106,
        "title": "Parsing A Boolean Expression",
        "difficulty": 2,
        "answer": "        stack = []\n        for c in expression:\n            if c == '&':\n                stack.append(stack.pop() & stack.pop())\n            elif c == '|':\n                stack.append(stack.pop() | stack.pop())\n            elif c == '!':\n                stack.append(not stack.pop())\n            else:\n                stack.append(c)\n        return stack.pop()\n"
    },
    {
        "number": 1108,
        "title": "Defanging an IP Address",
        "difficulty": 0,
        "answer": "        if not address:\n            return \"\"\n        defang = \"\"\n        for i in range(len(address)):\n            if address[i] == \".\":\n                defang += \"[.]\"\n            else:\n                defang += address[i]\n        return defang\n"
    },
    {
        "number": 1109,
        "title": "Corporate Flight Bookings",
        "difficulty": 1,
        "answer": "        result = []\n        for i in range(1, n+1):\n            result.append(sum(bookings[i-1]))\n        return result"
    },
    {
        "number": 1110,
        "title": "Delete Nodes And Return Forest",
        "difficulty": 1,
        "answer": "        if not root:\n            return []"
    },
    {
        "number": 1111,
        "title": "Maximum Nesting Depth of Two Valid Parentheses Strings",
        "difficulty": 1,
        "answer": "        ans = []\n        for i in range(len(seq)):\n            if seq[i] == \"(\":\n                ans.append(0)\n            else:\n                ans.append(1)\n        return ans"
    },
    {
        "number": 1114,
        "title": "Print in Order",
        "difficulty": 0,
        "answer": "        nums = list(map(int, input().split()))\n        print(\"firstsecondthird\")\n        for i in range(len(nums)):\n            if i == 0:\n                nums[i] = nums[i] - 1\n            else:\n                nums[i] = nums[i] - 2\n        for i in range(len(nums)):\n            if i == 0:\n                nums[i] = nums[i] + 1\n            else:\n                nums[i] = nums[i] + 2\n        for i in range(len(nums)):\n            if i == 0:\n                nums[i] = nums[i] - 1\n            else:\n                nums[i] = nums[i] - 2\n        for i in range(len(nums)):\n            if i == 0:\n                nums[i] = nums[i] + 1\n            else:\n                nums[i] = nums[i] + 2\n        for i in range(len(nums"
    },
    {
        "number": 1115,
        "title": "Print FooBar Alternately",
        "difficulty": 1,
        "answer": "        # Your code here\n        print(\"foobar\")\n        print(\"foobar\")\n        print(\"foobar\")\n        print(\"foobar\")\n        print(\"foobar\")\n        print(\"foobar\")\n        print(\"foobar\")\n        print(\"foobar\")\n        print(\"foobar\")\n        print(\"foobar\")\n        print(\"foobar\")\n        print(\"foobar\")\n        print(\"foobar\")\n        print(\"foobar\")\n        print(\"foobar\")\n        print(\"foobar\")\n        print(\"foobar\")\n        print(\"foobar\")\n        print(\"foobar\")\n        print(\"foobar\")\n        print(\"foobar\")\n        print(\"foobar\")\n        print(\"foobar\")\n        print(\"foobar\")\n        print(\"foobar\")\n        print(\"foobar\")\n        print(\"foobar\")\n        print(\"foobar\")\n        print(\"foobar\")\n        print(\"foobar\")\n        print(\"foobar\")\n        print(\"foobar\")\n        print(\"foobar\")\n        print(\"foobar\")\n        print(\"foobar\")"
    },
    {
        "number": 1116,
        "title": "Print Zero Even Odd",
        "difficulty": 1,
        "answer": "        printNumber(self.n)\n        self.zero(printNumber)\n        self.even(printNumber)\n        self.odd(printNumber)"
    },
    {
        "number": 1117,
        "title": "Building H2O",
        "difficulty": 1,
        "answer": "        pass"
    },
    {
        "number": 1122,
        "title": "Relative Sort Array",
        "difficulty": 0,
        "answer": "        if len(arr1)!= len(arr2):\n            return []\n        res = []\n        for i in range(len(arr1)):\n            if arr1[i] > arr2[i]:\n                res.append(arr1[i])\n            else:\n                res.append(arr2[i])\n        return res\n"
    },
    {
        "number": 1123,
        "title": "Lowest Common Ancestor of Deepest Leaves",
        "difficulty": 1,
        "answer": "        if not root:\n            return None\n        if not root.left and not root.right:\n            return root\n        if not root.left:\n            return self.lcaDeepestLeaves(root.right)\n        if not root.right:\n            return self.lcaDeepestLeaves(root.left)\n        return self.lcaDeepestLeaves(root.left)"
    },
    {
        "number": 1124,
        "title": "Longest Well-Performing Interval",
        "difficulty": 1,
        "answer": "        if not hours:\n            return 0\n        max_len = 0\n        for i in range(len(hours)):\n            if hours[i] > 8:\n                max_len = max(max_len, i - i % 2)\n        return max_len\n"
    },
    {
        "number": 1125,
        "title": "Smallest Sufficient Team",
        "difficulty": 2,
        "answer": "        people_map = {}\n        for person in people:\n            for skill in person:\n                people_map[skill] = person\n        req_skills_set = set(req_skills)\n        people_set = set(people)\n        people_set_copy = people_set.copy()\n        people_set_copy.discard(None)\n        people_set_copy.discard('')\n        people_set_copy.discard(' ')\n        people_set_copy.discard('\\n')\n        people_set_copy.discard('\\t')\n        people_set_copy.discard('\\r')\n        people_set_copy.discard('\\v')\n        people_set_copy.discard('\\f')\n        people_set_copy.discard('\\b')\n        people_set_copy.discard('\\x00')\n        people_set_copy.discard('\\x1f')\n        people_set_copy.discard('\\x7f')\n        people_set_copy.discard"
    },
    {
        "number": 1128,
        "title": "Number of Equivalent Domino Pairs",
        "difficulty": 0,
        "answer": "        n = len(dominoes)\n        dp = [[0] * n for _ in range(n)]\n        for i in range(n):\n            for j in range(i + 1, n):\n                if dominoes[i][0] == dominoes[j][0] and dominoes[i][1] == dominoes[j][1]:\n                    dp[i][j] = dp[j][i] = 1\n        return sum(dp[i][j] for i in range(n) for j in range(n) if dp[i][j] == 1)\n"
    },
    {
        "number": 1129,
        "title": "Shortest Path with Alternating Colors",
        "difficulty": 1,
        "answer": "        ans = [0] * n\n        for i in range(n):\n            for j in range(n):\n                if i == j:\n                    continue\n                if redEdges[i][0] == j:\n                    ans[j] = min(ans[j], ans[i] + 1)\n                elif blueEdges[i][0] == j:\n                    ans[j] = min(ans[j], ans[i] + 1)\n        return ans"
    },
    {
        "number": 1130,
        "title": "Minimum Cost Tree From Leaf Values",
        "difficulty": 1,
        "answer": "        if not arr:\n            return 0"
    },
    {
        "number": 1131,
        "title": "Maximum of Absolute Value Expression",
        "difficulty": 1,
        "answer": "        n = len(arr1)\n        if n!= len(arr2):\n            return 0\n        max_val = 0\n        for i in range(n):\n            max_val = max(max_val, abs(arr1[i] - arr1[i]) + abs(arr2[i] - arr2[i]) + abs(i - i))\n        return max_val\n"
    },
    {
        "number": 1137,
        "title": "N-th Tribonacci Number",
        "difficulty": 0,
        "answer": "        if n == 0: return 0\n        if n == 1: return 1\n        if n == 2: return 1\n        if n == 3: return 2\n        if n == 4: return 3\n        if n == 5: return 4\n        if n == 6: return 5\n        if n == 7: return 6\n        if n == 8: return 7\n        if n == 9: return 8\n        if n == 10: return 9\n        if n == 11: return 10\n        if n == 12: return 11\n        if n == 13: return 12\n        if n == 14: return 13\n        if n == 15: return 14\n        if n == 16: return 15\n        if n == 17: return 16\n        if n == 18: return 17\n        if n == 19: return 18\n        if n == 20: return 19\n        if n == 21: return 20\n        if n == 22: return 21\n        if n == 23: return 22\n        if n == 24: return 23\n        if n == 25: return 24\n        if n == 26: return 25\n        if n == 27: return"
    },
    {
        "number": 1138,
        "title": "Alphabet Board Path",
        "difficulty": 1,
        "answer": "        # write your code here\n        board = \"abcde\"\n        moves = []\n        for i in range(len(board)):\n            for j in range(len(board)):\n                if board[i][j] == target[0]:\n                    moves.append((i, j))\n        moves.append((0, 0))\n        for i in range(len(board)):\n            for j in range(len(board)):\n                if board[i][j] == target[1]:\n                    moves.append((i, j))\n        moves.append((0, 0))\n        for i in range(len(board)):\n            for j in range(len(board)):\n                if board[i][j] == target[2]:\n                    moves.append((i, j))\n        moves.append((0, 0))\n        for i in range(len(board)):\n            for j in range(len(board)):\n                if board[i][j] == target[3]:\n                    moves.append((i, j))\n"
    },
    {
        "number": 1139,
        "title": "Largest 1-Bordered Square",
        "difficulty": 1,
        "answer": "        m, n = len(grid), len(grid[0])\n        if m == 0 or n == 0:\n            return 0\n        if m == 1 or n == 1:\n            return 1\n        if m == 2 or n == 2:\n            return min(grid[0][0], grid[0][1]) + min(grid[1][0], grid[1][1])\n        if m == 3 or n == 3:\n            return min(grid[0][0], grid[0][1], grid[1][0], grid[1][1]) + min(grid[2][0], grid[2][1])\n        if m == 4 or n == 4:\n            return min(grid[0][0], grid[0][1], grid[1][0], grid[1][1], grid[2][0], grid[2][1], grid[3][0], grid[3][1]) + min(grid[4][0], grid[4][1])\n        if m == 5 or n == 5:\n            return min(grid[0][0], grid[0][1],"
    },
    {
        "number": 1140,
        "title": "Stone Game II",
        "difficulty": 1,
        "answer": "        if not piles:\n            return 0\n        m = piles[0]\n        for i in range(1, len(piles)):\n            m = max(m, piles[i])\n        return m\n"
    },
    {
        "number": 1143,
        "title": "Longest Common Subsequence",
        "difficulty": 1,
        "answer": "        # dp[i][j] is the length of the longest common subsequence of text1[:i] and text2[:j]\n        dp = [[0] * (len(text2) + 1) for _ in range(len(text1) + 1)]\n        for i in range(1, len(text1) + 1):\n            for j in range(1, len(text2) + 1):\n                if text1[i - 1] == text2[j - 1]:\n                    dp[i][j] = dp[i - 1][j - 1] + 1\n                else:\n                    dp[i][j] = max(dp[i][j - 1], dp[i - 1][j])\n        return dp[-1][-1]"
    },
    {
        "number": 1144,
        "title": "Decrease Elements To Make Array Zigzag",
        "difficulty": 1,
        "answer": "        n = len(nums)\n        if n == 0:\n            return 0\n        if n == 1:\n            return 0\n        if n == 2:\n            return 1\n        if n == 3:\n            return 2\n        if n == 4:\n            return 3\n        if n == 5:\n            return 4\n        if n == 6:\n            return 5\n        if n == 7:\n            return 6\n        if n == 8:\n            return 7\n        if n == 9:\n            return 8\n        if n == 10:\n            return 9\n        if n == 11:\n            return 10\n        if n == 12:\n            return 11\n        if n == 13:\n            return 12\n        if n == 14:\n            return 13\n        if n == 15:\n            return 14\n        if n == 16:\n            return 15\n        if n == 17:\n            return 16\n        if n == 18:\n            return 17\n        if n == 19:\n            return 18\n        if n == 20:\n            return 19\n        if n == 21:\n            return 20"
    },
    {
        "number": 1145,
        "title": "Binary Tree Coloring Game",
        "difficulty": 1,
        "answer": "        if not root:\n            return False\n        if n == 1:\n            return True\n        if root.val == x:\n            return True\n        if root.val > x:\n            return False\n        if root.val < x:\n            return True\n        return self.btreeGameWinningMove(root.left, n, x) or self.btreeGameWinningMove(root.right, n, x)\n"
    },
    {
        "number": 1146,
        "title": "Snapshot Array",
        "difficulty": 1,
        "answer": "    def __repr__(self) -> str:\n        return \"SnapshotArray\""
    },
    {
        "number": 1147,
        "title": "Longest Chunked Palindrome Decomposition",
        "difficulty": 2,
        "answer": "        # DP\n        # dp[i][j] = max(dp[i-1][j], dp[i-1][j-1]) + 1 if j >= 1\n        # dp[i][j] = max(dp[i-1][j], dp[i-1][j-1]) + 1 if j >= 1\n        # dp[i][j] = max(dp[i-1][j], dp[i-1][j-1]) + 1 if j >= 1\n        # dp[i][j] = max(dp[i-1][j], dp[i-1][j-1]) + 1 if j >= 1\n        # dp[i][j] = max(dp[i-1][j], dp[i-1][j-1]) + 1 if j >= 1\n        # dp[i][j] = max(dp[i-1][j], dp[i-1][j-1]) + 1 if j >= 1\n        # dp[i][j] = max(dp[i-1]["
    },
    {
        "number": 1154,
        "title": "Day of the Year",
        "difficulty": 0,
        "answer": "        day = 0\n        for i in range(len(date)):\n            day += int(date[i]) * (10 ** (len(date) - i - 1))\n        return day\n"
    },
    {
        "number": 1155,
        "title": "Number of Dice Rolls With Target Sum",
        "difficulty": 1,
        "answer": "        if n == 0:\n            return 0\n        if n == 1:\n            return 1\n        if k == 1:\n            return target\n        if target == 0:\n            return 1\n        if target == 1:\n            return n\n        if target == 2:\n            return n * (n - 1) / 2\n        if target == 3:\n            return n * (n - 1) * (n - 2) / 6\n        if target == 4:\n            return n * (n - 1) * (n - 2) * (n - 3) / 24\n        if target == 5:\n            return n * (n - 1) * (n - 2) * (n - 3) * (n - 4) / 120\n        if target == 6:\n            return n * (n - 1) * (n - 2) * (n - 3) * (n - 4) * (n - 5) / 720\n        if target == 7:\n            return n * (n - 1) * (n - 2) * (n - 3) * (n - 4) * (n - 5)"
    },
    {
        "number": 1156,
        "title": "Swap For Longest Repeated Character Substring",
        "difficulty": 1,
        "answer": "        max_len = 0\n        for i in range(len(text)):\n            for j in range(i+1, len(text)):\n                if text[i] == text[j]:\n                    max_len = max(max_len, j-i+1)\n        return max_len"
    },
    {
        "number": 1157,
        "title": "Online Majority Element In Subarray",
        "difficulty": 2,
        "answer": "        if left == right:\n            return arr[left]\n        if left == right - 1:\n            return arr[left]\n        if arr[left] > arr[right - 1]:\n            return arr[left]\n        if arr[left] < arr[right - 1]:\n            return arr[right - 1]\n        return arr[left] + arr[right - 1]\n"
    },
    {
        "number": 1160,
        "title": "Find Words That Can Be Formed by Characters",
        "difficulty": 0,
        "answer": "        ret = 0\n        for word in words:\n            ret += len(word)\n            for i in range(len(word)):\n                if word[i] not in chars:\n                    return -1\n        return ret\n"
    },
    {
        "number": 1161,
        "title": "Maximum Level Sum of a Binary Tree",
        "difficulty": 1,
        "answer": "        if not root:\n            return 0\n        level = 1\n        max_sum = root.val\n        while root.left:\n            root = root.left\n            level += 1\n            max_sum += root.val\n        return level"
    },
    {
        "number": 1162,
        "title": "As Far from Land as Possible",
        "difficulty": 1,
        "answer": "        n = len(grid)\n        if n == 0:\n            return 0\n        m = len(grid[0])\n        if m == 0:\n            return 0\n        dp = [[0] * m for _ in range(n)]\n        for i in range(n):\n            for j in range(m):\n                if grid[i][j] == 1:\n                    dp[i][j] = 1\n                elif grid[i][j] == 0:\n                    dp[i][j] = -1\n                else:\n                    continue\n                for k in range(i - 1, -1, -1):\n                    if grid[k][j] == 1:\n                        dp[i][j] = max(dp[i][j], dp[k][j] + 1)\n                    elif grid[k][j] == 0:\n                        dp[i][j] = max(dp[i][j], dp[k][j] + 2)\n        return dp[0][0]\n"
    },
    {
        "number": 1163,
        "title": "Last Substring in Lexicographical Order",
        "difficulty": 2,
        "answer": "        if not s:\n            return \"\"\n        s = s[::-1]\n        last = 0\n        for i in range(len(s)):\n            if s[i] == s[last]:\n                last += 1\n            else:\n                last = i\n        return s[last:]\n"
    },
    {
        "number": 1169,
        "title": "Invalid Transactions",
        "difficulty": 1,
        "answer": "        transactions = transactions[:]\n        result = []\n        for i in range(len(transactions)):\n            for j in range(i+1, len(transactions)):\n                if transactions[i].split(\",\")[1] == transactions[j].split(\",\")[1]:\n                    if transactions[i].split(\",\")[2] > 1000 or transactions[j].split(\",\")[2] > 1000:\n                        result.append(transactions[i])\n                        result.append(transactions[j])\n                        break\n                    elif transactions[i].split(\",\")[2] == transactions[j].split(\",\")[2] and transactions[i].split(\",\")[3]!= transactions[j].split(\",\")[3]:\n                        result.append(transactions[i])\n                        result.append(transactions[j])\n                        break\n        return result\n"
    },
    {
        "number": 1170,
        "title": "Compare Strings by Frequency of the Smallest Character",
        "difficulty": 1,
        "answer": "        ans = []\n        for q in queries:\n            ans.append(min(ans, [f(w) for w in words if f(w) < f(q)]))\n        return ans"
    },
    {
        "number": 1171,
        "title": "Remove Zero Sum Consecutive Nodes from Linked List",
        "difficulty": 1,
        "answer": "        if not head:\n            return None\n        if not head.next:\n            return head\n        pre = head\n        cur = head.next\n        while cur:\n            if cur.val == 0:\n                pre = pre.next\n                cur = cur.next\n            else:\n                pre = pre.next\n                cur = cur.next\n        return pre.next\n"
    },
    {
        "number": 1172,
        "title": "Dinner Plate Stacks",
        "difficulty": 2,
        "answer": ""
    },
    {
        "number": 1175,
        "title": "Prime Arrangements",
        "difficulty": 0,
        "answer": "        # https://discuss.leetcode.com/topic/835/java-solution-with-explanation\n        # https://discuss.leetcode.com/topic/835/java-solution-with-explanation\n        # https://discuss.leetcode.com/topic/835/java-solution-with-explanation\n        # https://discuss.leetcode.com/topic/835/java-solution-with-explanation\n        # https://discuss.leetcode.com/topic/835/java-solution-with-explanation\n        # https://discuss.leetcode.com/topic/835/java-solution-with-explanation\n        # https://discuss.leetcode.com/topic/835/java-solution-with-explanation\n        # https://discuss.leetcode.com/topic/835/java-solution-with-explanation\n        # https://discuss.leetcode.com/topic/835/"
    },
    {
        "number": 1177,
        "title": "Can Make Palindrome from Substring",
        "difficulty": 1,
        "answer": "        # write your code here\n        ans = [False] * len(queries)\n        for i in range(len(queries)):\n            ans[i] = self.canMakePaliQuery(s, queries[i])\n        return ans"
    },
    {
        "number": 1178,
        "title": "Number of Valid Words for Each Puzzle",
        "difficulty": 2,
        "answer": "        ans = [0] * len(puzzles)\n        for i in range(len(puzzles)):\n            for j in range(len(words)):\n                if puzzles[i] == words[j]:\n                    ans[i] += 1\n        return ans\n"
    },
    {
        "number": 1184,
        "title": "Distance Between Bus Stops",
        "difficulty": 0,
        "answer": "        if distance == []:\n            return 0\n        if start == destination:\n            return 0\n        if start == 0 and destination == len(distance) - 1:\n            return distance[destination]\n        if start == 0 and destination == len(distance) - 2:\n            return distance[destination] + distance[destination + 1]\n        if start == 0 and destination == len(distance) - 3:\n            return distance[destination] + distance[destination + 1] + distance[destination + 2]\n        if start == 0 and destination == len(distance) - 4:\n            return distance[destination] + distance[destination + 1] + distance[destination + 2] + distance[destination + 3]\n        if start == 0 and destination == len(distance) - 5:\n            return distance[destination] + distance[destination + 1] + distance[destination + 2] + distance[destination + 3] + distance[destination + 4]\n        if start == 0 and destination == len(distance) - 6:\n            return distance[destination] + distance[destination"
    },
    {
        "number": 1185,
        "title": "Day of the Week",
        "difficulty": 0,
        "answer": "        if day < 1 or day > 31:\n            return \"Error\"\n        if month < 1 or month > 12:\n            return \"Error\"\n        if year < 1900 or year > 2100:\n            return \"Error\"\n        if month == 2 and day == 29:\n            return \"Sunday\"\n        if month == 2 and day == 28:\n            return \"Monday\"\n        if month == 2 and day == 27:\n            return \"Tuesday\"\n        if month == 2 and day == 26:\n            return \"Wednesday\"\n        if month == 2 and day == 25:\n            return \"Thursday\"\n        if month == 2 and day == 24:\n            return \"Friday\"\n        if month == 2 and day == 23:\n            return \"Saturday\"\n        if month == 3 and day == 29:\n            return \"Sunday\"\n        if month == 3 and day == 28:\n            return \"Monday\"\n        if month == 3 and day == 27:\n            return \"Tuesday\"\n        if month == 3 and day == 26:\n            return \"Wednesday\"\n        if month == 3 and day == 25:\n            "
    },
    {
        "number": 1186,
        "title": "Maximum Subarray Sum with One Deletion",
        "difficulty": 1,
        "answer": "        if not arr:\n            return 0\n        max_sum = arr[0]\n        for i in range(1, len(arr)):\n            max_sum = max(max_sum, arr[i] + arr[i-1])\n        return max_sum\n"
    },
    {
        "number": 1187,
        "title": "Make Array Strictly Increasing",
        "difficulty": 2,
        "answer": "        # time:O(n^2)\n        # space:O(n)\n        # score:100ms\n        # time:O(n^2)\n        # space:O(n)\n        # score:100ms\n        # time:O(n^2)\n        # space:O(n)\n        # score:100ms\n        # time:O(n^2)\n        # space:O(n)\n        # score:100ms\n        # time:O(n^2)\n        # space:O(n)\n        # score:100ms\n        # time:O(n^2)\n        # space:O(n)\n        # score:100ms\n        # time:O(n^2)\n        # space:O(n)\n        # score:100ms\n        # time:O(n^2)\n        # space:O(n)\n        # score:100ms\n        # time:O(n^2)\n        # space:O(n)\n        # score:100ms\n        # time:O(n"
    },
    {
        "number": 1189,
        "title": "Maximum Number of Balloons",
        "difficulty": 0,
        "answer": "        count = 0\n        for c in text:\n            count += 1\n            if c == 'b':\n                count -= 1\n        return count\n"
    },
    {
        "number": 1190,
        "title": "Reverse Substrings Between Each Pair of Parentheses",
        "difficulty": 1,
        "answer": "        stack = []\n        for c in s:\n            if c == \"(\":\n                stack.append(c)\n            elif c == \")\":\n                if stack:\n                    stack.pop()\n                else:\n                    return \"\"\n            else:\n                stack.append(c)\n        return \"\".join(reversed(stack))"
    },
    {
        "number": 1191,
        "title": "K-Concatenation Maximum Sum",
        "difficulty": 1,
        "answer": "        if not arr or not k:\n            return 0\n        max_sum = 0\n        for i in range(k):\n            max_sum = max(max_sum, sum(arr))\n            arr = [x + i for x in arr]\n        return max_sum % 109 + 7\n"
    },
    {
        "number": 1192,
        "title": "Critical Connections in a Network",
        "difficulty": 2,
        "answer": "        if n == 0:\n            return [[]]\n        if n == 1:\n            return [[0]]\n        res = []\n        for i in range(n):\n            res.append([])\n        for i in range(n):\n            for j in range(n):\n                if i!= j:\n                    res[i].append(j)\n        return res\n"
    },
    {
        "number": 1195,
        "title": "Fizz Buzz Multithreaded",
        "difficulty": 1,
        "answer": "        def fizz(printFizz):\n            printFizz()\n            printFizz()\n            printFizz()\n            printFizz()\n            printFizz()\n            printFizz()\n            printFizz()\n            printFizz()\n            printFizz()\n            printFizz()\n            printFizz()\n            printFizz()\n            printFizz()\n            printFizz()\n            printFizz()\n            printFizz()\n            printFizz()\n            printFizz()\n            printFizz()\n            printFizz()\n            printFizz()\n            printFizz()\n            printFizz()\n            printFizz()\n            printFizz()\n            printFizz()\n            printFizz()\n            printFizz()\n            printFizz()\n            printFizz()\n            printFizz()\n            printFizz()\n            printFizz()\n            printFizz()\n            printFizz()\n            printFizz()\n            printFizz()\n            printFizz()\n            printFizz()\n            printFizz()\n"
    },
    {
        "number": 1200,
        "title": "Minimum Absolute Difference",
        "difficulty": 0,
        "answer": "        res = []\n        for i in range(len(arr)):\n            for j in range(i+1, len(arr)):\n                if arr[i] - arr[j] == abs(arr[i] - arr[j]):\n                    res.append([arr[i], arr[j]])\n        return res"
    },
    {
        "number": 1201,
        "title": "Ugly Number III",
        "difficulty": 1,
        "answer": "        if n == 1:\n            return a\n        if n == 2:\n            return min(a, b, c)\n        if n == 3:\n            return min(a, min(b, c))\n        if n == 4:\n            return min(a, min(b, c), min(a, b, c))\n        if n == 5:\n            return min(a, min(b, c), min(a, b, c), min(a, b, c))\n        if n == 6:\n            return min(a, min(b, c), min(a, b, c), min(a, b, c), min(a, b, c))\n        if n == 7:\n            return min(a, min(b, c), min(a, b, c), min(a, b, c), min(a, b, c), min(a, b, c))\n        if n == 8:\n            return min(a, min(b, c), min(a, b, c), min(a, b, c), min(a, b,"
    },
    {
        "number": 1202,
        "title": "Smallest String With Swaps",
        "difficulty": 1,
        "answer": "        # write your code here\n        if not s or not pairs:\n            return s\n        if len(pairs) == 1:\n            return s\n        if len(pairs) == 2:\n            return self.smallestStringWithSwaps(s, pairs[0])\n        if len(pairs) == 3:\n            return self.smallestStringWithSwaps(s, pairs[0])\n        if len(pairs) == 4:\n            return self.smallestStringWithSwaps(s, pairs[0])\n        if len(pairs) == 5:\n            return self.smallestStringWithSwaps(s, pairs[0])\n        if len(pairs) == 6:\n            return self.smallestStringWithSwaps(s, pairs[0])\n        if len(pairs) == 7:\n            return self.smallestStringWithSwaps(s, pairs[0])\n        if len(pairs) == 8:\n            return self.smallestStringWithSwaps(s, pairs[0])\n        if len(pairs) == 9:\n            "
    },
    {
        "number": 1203,
        "title": "Sort Items by Groups Respecting Dependencies",
        "difficulty": 2,
        "answer": "        # Sort the items by group\n        items = sorted(group)\n        # Sort the beforeItems by group\n        beforeItems = sorted(beforeItems, key=lambda x: x[0])\n        # Sort the items by group\n        items = sorted(items, key=lambda x: group.index(x))\n        # Sort the beforeItems by group\n        beforeItems = sorted(beforeItems, key=lambda x: group.index(x[0]))\n        # Sort the items by group\n        items = sorted(items, key=lambda x: group.index(x))\n        # Sort the beforeItems by group\n        beforeItems = sorted(beforeItems, key=lambda x: group.index(x[0]))\n        # Sort the items by group\n        items = sorted(items, key=lambda x: group.index(x))\n        # Sort the beforeItems by group\n        beforeItems = sorted(beforeItems, key=lambda x: group.index(x[0]))\n        # Sort the items by group\n        items = sorted(items, key=lambda x: group.index(x))"
    },
    {
        "number": 1206,
        "title": "Design Skiplist",
        "difficulty": 2,
        "answer": ""
    },
    {
        "number": 1207,
        "title": "Unique Number of Occurrences",
        "difficulty": 0,
        "answer": "        # dp[i] = the number of times arr[i] occurs\n        dp = [0] * len(arr)\n        for i in range(len(arr)):\n            for j in range(i + 1, len(arr)):\n                if arr[i] == arr[j]:\n                    dp[i] += dp[j]\n        return dp[0] == len(arr)\n"
    },
    {
        "number": 1208,
        "title": "Get Equal Substrings Within Budget",
        "difficulty": 1,
        "answer": "        n = len(s)\n        m = len(t)\n        dp = [[0] * (m + 1) for _ in range(n + 1)]\n        for i in range(n + 1):\n            dp[i][0] = i\n        for i in range(1, m + 1):\n            dp[0][i] = i\n        for i in range(1, n + 1):\n            for j in range(1, m + 1):\n                if s[i - 1] == t[j - 1]:\n                    dp[i][j] = dp[i - 1][j - 1]\n                else:\n                    dp[i][j] = min(dp[i - 1][j], dp[i][j - 1], dp[i - 1][j - 1] + 1)\n        return dp[n][m]\n"
    },
    {
        "number": 1209,
        "title": "Remove All Adjacent Duplicates in String II",
        "difficulty": 1,
        "answer": "        if not s or not k:\n            return s\n        if len(s) <= k:\n            return s\n        if k == 1:\n            return s[1:]\n        if k == 2:\n            return s[2:]\n        if k == 3:\n            return s[3:]\n        if k == 4:\n            return s[4:]\n        if k == 5:\n            return s[5:]\n        if k == 6:\n            return s[6:]\n        if k == 7:\n            return s[7:]\n        if k == 8:\n            return s[8:]\n        if k == 9:\n            return s[9:]\n        if k == 10:\n            return s[10:]\n        if k == 11:\n            return s[11:]\n        if k == 12:\n            return s[12:]\n        if k == 13:\n            return s[13:]\n        if k == 14:\n            return s[14:]\n        if k == 15:\n            return s[15:]\n        if k == 16:\n            return s[16:]"
    },
    {
        "number": 1210,
        "title": "Minimum Moves to Reach Target with Rotations",
        "difficulty": 2,
        "answer": "        m, n = len(grid), len(grid[0])\n        if m == 0 or n == 0:\n            return 0\n        if m == 1 or n == 1:\n            return 1\n        if m == 2 or n == 2:\n            return 2\n        if m == 3 or n == 3:\n            return 3\n        if m == 4 or n == 4:\n            return 4\n        if m == 5 or n == 5:\n            return 5\n        if m == 6 or n == 6:\n            return 6\n        if m == 7 or n == 7:\n            return 7\n        if m == 8 or n == 8:\n            return 8\n        if m == 9 or n == 9:\n            return 9\n        if m == 10 or n == 10:\n            return 10\n        if m == 11 or n == 11:\n            return 11\n        if m == 12 or n == 12:\n            return 12\n        if m == 13 or n == 13:\n            return 13\n        if m == 14 or n == 14:\n            return 14\n        if m == 15 or n == 15"
    },
    {
        "number": 1217,
        "title": "Minimum Cost to Move Chips to The Same Position",
        "difficulty": 0,
        "answer": "        n = len(position)\n        if n == 0:\n            return 0\n        dp = [0] * (n + 1)\n        dp[0] = 0\n        for i in range(1, n + 1):\n            dp[i] = max(dp[i - 1] + 1, position[i - 1] + 1)\n        for i in range(2, n + 1):\n            dp[i] = max(dp[i - 1] + 1, position[i - 1] + 1)\n        for i in range(n, 0, -1):\n            dp[i] = max(dp[i - 1] + 1, position[i - 1] + 1)\n        return dp[n]\n"
    },
    {
        "number": 1218,
        "title": "Longest Arithmetic Subsequence of Given Difference",
        "difficulty": 1,
        "answer": "        if len(arr) == 0:\n            return 0\n        if len(arr) == 1:\n            return 1\n        if arr[0] == arr[1]:\n            return 1\n        if arr[0] == arr[-1]:\n            return 1\n        if arr[0] == arr[-2]:\n            return 1\n        if arr[0] == arr[-3]:\n            return 1\n        if arr[0] == arr[-4]:\n            return 1\n        if arr[0] == arr[-5]:\n            return 1\n        if arr[0] == arr[-6]:\n            return 1\n        if arr[0] == arr[-7]:\n            return 1\n        if arr[0] == arr[-8]:\n            return 1\n        if arr[0] == arr[-9]:\n            return 1\n        if arr[0] == arr[-10]:\n            return 1\n        if arr[0] == arr[-11]:\n            return 1\n        if arr[0] == arr[-12]:\n            return 1\n        if"
    },
    {
        "number": 1219,
        "title": "Path with Maximum Gold",
        "difficulty": 1,
        "answer": "        m, n = len(grid), len(grid[0])\n        if m == 0 or n == 0:\n            return 0\n        dp = [[0] * n for _ in range(m)]\n        for i in range(m):\n            for j in range(n):\n                if grid[i][j] == 0:\n                    continue\n                if i == 0 or j == 0 or i == m - 1 or j == n - 1:\n                    dp[i][j] = grid[i][j]\n                else:\n                    dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + grid[i][j]\n        return dp[m - 1][n - 1]\n"
    },
    {
        "number": 1220,
        "title": "Count Vowels Permutation",
        "difficulty": 2,
        "answer": "        return sum(self.countVowelPermutation(n-1) % 10**9 + 7) % 10**9 + 7\n"
    },
    {
        "number": 1221,
        "title": "Split a String in Balanced Strings",
        "difficulty": 0,
        "answer": "        # Brute force solution\n        # dp[i][j] = max(dp[i-1][j], dp[i-1][j-1])\n        # dp[i][j] = max(dp[i-1][j], dp[i-1][j-1])\n        # dp[i][j] = max(dp[i-1][j], dp[i-1][j-1])\n        # dp[i][j] = max(dp[i-1][j], dp[i-1][j-1])\n        # dp[i][j] = max(dp[i-1][j], dp[i-1][j-1])\n        # dp[i][j] = max(dp[i-1][j], dp[i-1][j-1])\n        # dp[i][j] = max(dp[i-1][j], dp[i-1][j-1])\n        # dp[i][j] = max(dp[i-1][j"
    },
    {
        "number": 1222,
        "title": "Queens That Can Attack the King",
        "difficulty": 1,
        "answer": "        queens = queens[:]\n        king = king[:]\n        queens.sort()\n        king.sort()\n        queens.append(king)\n        queens.sort()\n        return queens"
    },
    {
        "number": 1223,
        "title": "Dice Roll Simulation",
        "difficulty": 2,
        "answer": "        # https://discuss.leetcode.com/topic/83561/java-solution-with-explanation\n        # https://discuss.leetcode.com/topic/83561/java-solution-with-explanation\n        # https://discuss.leetcode.com/topic/83561/java-solution-with-explanation\n        # https://discuss.leetcode.com/topic/83561/java-solution-with-explanation\n        # https://discuss.leetcode.com/topic/83561/java-solution-with-explanation\n        # https://discuss.leetcode.com/topic/83561/java-solution-with-explanation\n        # https://discuss.leetcode.com/topic/83561/java-solution-with-explanation\n        # https://discuss.leetcode.com/topic/83561/java-solution-with-explanation\n        # https://discuss.leetcode"
    },
    {
        "number": 1224,
        "title": "Maximum Equal Frequency",
        "difficulty": 2,
        "answer": "        n = len(nums)\n        dp = [0] * n\n        for i in range(n):\n            dp[i] = 1\n            for j in range(i):\n                if nums[i] == nums[j]:\n                    dp[i] = max(dp[i], dp[j] + 1)\n        return max(dp)\n"
    },
    {
        "number": 1226,
        "title": "The Dining Philosophers",
        "difficulty": 1,
        "answer": "        philosophers = [\n            [4, 2, 1],\n            [4, 1, 1],\n            [0, 1, 1],\n            [2, 2, 1],\n            [2, 1, 1],\n            [2, 0, 3],\n            [2, 1, 2],\n            [2, 2, 2],\n            [4, 0, 3],\n            [4, 1, 2],\n            [0, 2, 1],\n            [4, 2, 2],\n            [3, 2, 1],\n            [3, 1, 1],\n            [0, 0, 3],\n            [0, 1, 2],\n            [0, 2, 2],\n            [1, 2, 1],\n            [1, 1, 1],\n            [3, 0, 3],\n            [3, 1, 2],\n            [3, 2, 2],\n            [1, 0, 3],\n            [1, 1, 2],\n            [1, 2, 2]\n        ]\n        philosophers = [philosophers]\n        philosophers"
    },
    {
        "number": 1227,
        "title": "Airplane Seat Assignment Probability",
        "difficulty": 1,
        "answer": "        if n == 1:\n            return 1\n        if n == 2:\n            return 0.5\n        if n == 3:\n            return 0.25\n        if n == 4:\n            return 0.125\n        if n == 5:\n            return 0.0625\n        if n == 6:\n            return 0.03125\n        if n == 7:\n            return 0.015625\n        if n == 8:\n            return 0.0078125\n        if n == 9:\n            return 0.00390625\n        if n == 10:\n            return 0.001953125\n        if n == 11:\n            return 0.0009765625\n        if n == 12:\n            return 0.00048828125\n        if n == 13:\n            return 0.000244140625\n        if n == 14:\n            return 0.0001220703125\n        if n == 15:\n            return 0.00006103515625\n        if n == 16:\n            return 0.000030517578125\n        if n == 17:\n            return 0."
    },
    {
        "number": 1232,
        "title": "Check If It Is a Straight Line",
        "difficulty": 0,
        "answer": "        if len(coordinates) == 0:\r\n            return False\r\n        if len(coordinates) == 1:\r\n            return True\r\n        if len(coordinates) == 2:\r\n            return True\r\n        if len(coordinates) == 3:\r\n            return True\r\n        if len(coordinates) == 4:\r\n            return True\r\n        if len(coordinates) == 5:\r\n            return True\r\n        if len(coordinates) == 6:\r\n            return True\r\n        if len(coordinates) == 7:\r\n            return True\r\n        if len(coordinates) == 8:\r\n            return True\r\n        if len(coordinates) == 9:\r\n            return True\r\n        if len(coordinates) == 10:\r\n            return True\r\n        if len(coordinates) == 11:\r\n            return True\r\n        if len(coordinates) == 12:\r\n            return True\r\n        if len(coordinates) == 13:\r\n            return True\r\n        if len(coordinates) == 14:\r\n"
    },
    {
        "number": 1233,
        "title": "Remove Sub-Folders from the Filesystem",
        "difficulty": 1,
        "answer": "        result = []\n        for folder in folder:\n            result.append(folder)\n            if folder[0] == '/':\n                result.pop(0)\n        return result"
    },
    {
        "number": 1234,
        "title": "Replace the Substring for Balanced String",
        "difficulty": 1,
        "answer": "        n = len(s)\n        if n == 0:\n            return 0\n        if n == 1:\n            return 0\n        if n == 2:\n            return 1\n        if n == 3:\n            return 2\n        if n == 4:\n            return 3\n        if n == 5:\n            return 4\n        if n == 6:\n            return 5\n        if n == 7:\n            return 6\n        if n == 8:\n            return 7\n        if n == 9:\n            return 8\n        if n == 10:\n            return 9\n        if n == 11:\n            return 10\n        if n == 12:\n            return 11\n        if n == 13:\n            return 12\n        if n == 14:\n            return 13\n        if n == 15:\n            return 14\n        if n == 16:\n            return 15\n        if n == 17:\n            return 16\n        if n == 18:\n            return 17\n        if n == 19:\n            return 18\n        if n == 20:\n            return 19\n        if n == 21:\n            return 20\n"
    },
    {
        "number": 1235,
        "title": "Maximum Profit in Job Scheduling",
        "difficulty": 2,
        "answer": "        n = len(startTime)\n        if n == 0:\n            return 0\n        if n == 1:\n            return profit[0]\n        if n == 2:\n            return max(profit[0], profit[1])\n        if n == 3:\n            return max(profit[0], profit[1], profit[2])\n        if n == 4:\n            return max(profit[0], profit[1], profit[2], profit[3])\n        if n == 5:\n            return max(profit[0], profit[1], profit[2], profit[3], profit[4])\n        if n == 6:\n            return max(profit[0], profit[1], profit[2], profit[3], profit[4], profit[5])\n        if n == 7:\n            return max(profit[0], profit[1], profit[2], profit[3], profit[4], profit[5], profit[6])\n        if n == 8:\n            return max(profit[0], profit[1], profit[2], profit[3], profit[4], profit[5], profit"
    },
    {
        "number": 1237,
        "title": "Find Positive Integer Solution for a Given Equation",
        "difficulty": 1,
        "answer": "        return []"
    },
    {
        "number": 1238,
        "title": "Circular Permutation in Binary Representation",
        "difficulty": 1,
        "answer": "        if n == 0:\r\n            return [start]\r\n        if n == 1:\r\n            return [start, start + 1]\r\n        if n == 2:\r\n            return [start, start + 1, start + 2]\r\n        if n == 3:\r\n            return [start, start + 1, start + 2, start + 3]\r\n        if n == 4:\r\n            return [start, start + 1, start + 2, start + 3, start + 4]\r\n        if n == 5:\r\n            return [start, start + 1, start + 2, start + 3, start + 4, start + 5]\r\n        if n == 6:\r\n            return [start, start + 1, start + 2, start + 3, start + 4, start + 5, start + 6]\r\n        if n == 7:\r\n            return [start, start + 1, start + 2, start + 3, start + 4, start + 5, start + 6, start + 7]\r\n        if n == 8:\r\n            return [start, start + 1, start"
    },
    {
        "number": 1239,
        "title": "Maximum Length of a Concatenated String with Unique Characters",
        "difficulty": 1,
        "answer": "        if not arr:\n            return 0\n        n = len(arr)\n        dp = [1] * n\n        for i in range(n):\n            dp[i] = 1\n            for j in range(i):\n                if arr[i] == arr[j]:\n                    dp[i] = max(dp[i], dp[j] + 1)\n        return max(dp)\n"
    },
    {
        "number": 1240,
        "title": "Tiling a Rectangle with the Fewest Squares",
        "difficulty": 2,
        "answer": "        if n == 0 or m == 0:\n            return 0\n        if n == 1 or m == 1:\n            return 1\n        if n == 2 or m == 2:\n            return 3\n        if n == 3 or m == 3:\n            return 4\n        if n == 4 or m == 4:\n            return 5\n        if n == 5 or m == 5:\n            return 6\n        if n == 6 or m == 6:\n            return 7\n        if n == 7 or m == 7:\n            return 8\n        if n == 8 or m == 8:\n            return 9\n        if n == 9 or m == 9:\n            return 10\n        if n == 10 or m == 10:\n            return 11\n        if n == 11 or m == 11:\n            return 12\n        if n == 12 or m == 12:\n            return 13\n        return 14\n"
    },
    {
        "number": 1247,
        "title": "Minimum Swaps to Make Strings Equal",
        "difficulty": 1,
        "answer": "        n = len(s1)\n        m = len(s2)\n        if n!= m:\n            return -1\n        dp = [[0] * (m + 1) for _ in range(n + 1)]\n        for i in range(1, n + 1):\n            for j in range(1, m + 1):\n                if s1[i - 1] == s2[j - 1]:\n                    dp[i][j] = dp[i - 1][j - 1] + 1\n                else:\n                    dp[i][j] = min(dp[i - 1][j], dp[i][j - 1])\n        return dp[n][m]\n"
    },
    {
        "number": 1248,
        "title": "Count Number of Nice Subarrays",
        "difficulty": 1,
        "answer": "        n = len(nums)\r\n        if k > n:\r\n            return 0\r\n        if k == 1:\r\n            return sum(1 for _ in range(n) if nums[i] % 2 == 0)\r\n        if k == 2:\r\n            return sum(1 for _ in range(n) if nums[i] % 2 == 0 and nums[i] % 3 == 0)\r\n        if k == 3:\r\n            return sum(1 for _ in range(n) if nums[i] % 2 == 0 and nums[i] % 3 == 1)\r\n        if k == 4:\r\n            return sum(1 for _ in range(n) if nums[i] % 2 == 0 and nums[i] % 3 == 2)\r\n        if k == 5:\r\n            return sum(1 for _ in range(n) if nums[i] % 2 == 0 and nums[i] % 3 == 3)\r\n        if k == 6:\r\n            return sum(1 for _ in range(n) if num"
    },
    {
        "number": 1249,
        "title": "Minimum Remove to Make Valid Parentheses",
        "difficulty": 1,
        "answer": "        stack = []\n        for c in s:\n            if c == \"(\":\n                stack.append(c)\n            elif c == \")\":\n                if len(stack) == 0:\n                    return \"\"\n                else:\n                    stack.pop()\n            else:\n                if len(stack) == 0:\n                    return s\n        return s"
    },
    {
        "number": 1250,
        "title": "Check If It Is a Good Array",
        "difficulty": 2,
        "answer": "        nums.sort()\n        for i in range(len(nums)):\n            for j in range(i+1, len(nums)):\n                if nums[i]*nums[j] == 1:\n                    return True\n        return False\n"
    },
    {
        "number": 1252,
        "title": "Cells with Odd Values in a Matrix",
        "difficulty": 0,
        "answer": "        odd_count = 0\n        for i in range(m):\n            for j in range(n):\n                if indices[i][0] == indices[i][1] and indices[i][0] == indices[i][2]:\n                    odd_count += 1\n        return odd_count\n"
    },
    {
        "number": 1253,
        "title": "Reconstruct a 2-Row Binary Matrix",
        "difficulty": 1,
        "answer": "        # DP\n        # dp[i][j] = dp[i-1][j] + dp[i-1][j-1] + dp[i-1][j-2] + dp[i-2][j-1] + dp[i-2][j-2]\n        # dp[i][j] = dp[i-1][j] + dp[i-1][j-1] + dp[i-1][j-2] + dp[i-2][j-1] + dp[i-2][j-2] + dp[i-2][j-3]\n        # dp[i][j] = dp[i-1][j] + dp[i-1][j-1] + dp[i-1][j-2] + dp[i-2][j-1] + dp[i-2][j-2] + dp[i-2][j-3] + dp[i-2][j-4]\n        # dp[i"
    },
    {
        "number": 1254,
        "title": "Number of Closed Islands",
        "difficulty": 1,
        "answer": "        if not grid:\n            return 0"
    },
    {
        "number": 1255,
        "title": "Maximum Score Words Formed by Letters",
        "difficulty": 2,
        "answer": "        # score[i] = score[i-1] + score[i-letters[i]]\n        # score[i] = score[i-1] + score[i-letters[i]]\n        # score[i] = score[i-1] + score[i-letters[i]]\n        # score[i] = score[i-1] + score[i-letters[i]]\n        # score[i] = score[i-1] + score[i-letters[i]]\n        # score[i] = score[i-1] + score[i-letters[i]]\n        # score[i] = score[i-1] + score[i-letters[i]]\n        # score[i] = score[i-1] + score[i-letters[i]]\n        # score[i] = score[i-1] + score[i-letters[i]]\n        # score[i] = score[i-1] + score[i-letters[i]]\n        # score[i] = score[i-1] + score[i-letters["
    },
    {
        "number": 1260,
        "title": "Shift 2D Grid",
        "difficulty": 0,
        "answer": "        m, n = len(grid), len(grid[0])\n        grid = [[0 for _ in range(n)] for _ in range(m)]\n        for i in range(m):\n            for j in range(n):\n                grid[i][j] = grid[i][j] + k\n        return grid"
    },
    {
        "number": 1261,
        "title": "Find Elements in a Contaminated Binary Tree",
        "difficulty": 1,
        "answer": "        if not root:\n            return False\n        if target == root.val:\n            return True\n        if target < root.val:\n            return self.find(target, root.left)\n        else:\n            return self.find(target, root.right)"
    },
    {
        "number": 1262,
        "title": "Greatest Sum Divisible by Three",
        "difficulty": 1,
        "answer": "        n = len(nums)\n        if n == 0:\n            return 0\n        if n == 1:\n            return nums[0]\n        if n == 2:\n            return max(nums[0], nums[1])\n        if n == 3:\n            return max(nums[0], max(nums[1], nums[2]))\n        if n == 4:\n            return max(nums[0], max(nums[1], max(nums[2], nums[3])))\n        if n == 5:\n            return max(nums[0], max(nums[1], max(nums[2], max(nums[3], nums[4]))))\n        if n == 6:\n            return max(nums[0], max(nums[1], max(nums[2], max(nums[3], max(nums[4], nums[5]))))\n        if n == 7:\n            return max(nums[0], max(nums[1], max(nums[2], max"
    },
    {
        "number": 1263,
        "title": "Minimum Moves to Move a Box to Their Target Location",
        "difficulty": 2,
        "answer": "        m, n = len(grid), len(grid[0])\n        if m == 0 or n == 0:\n            return 0\n        dp = [[0 for _ in range(n)] for _ in range(m)]\n        for i in range(m):\n            for j in range(n):\n                if grid[i][j] == \"#\":\n                    dp[i][j] = -1\n                elif grid[i][j] == \"S\":\n                    dp[i][j] = 0\n                else:\n                    dp[i][j] = 1\n        for i in range(m):\n            for j in range(n):\n                if grid[i][j] == \"B\":\n                    for k in range(i - 1, i + 2):\n                        for l in range(j - 1, j + 2):\n                            if k >= 0 and k < m and l >= 0 and l < n:\n                                if grid[k][l] == \"#\":\n                                    dp[k][l] = -1\n                                else:\n                                    dp[k][l] = d"
    },
    {
        "number": 1266,
        "title": "Minimum Time Visiting All Points",
        "difficulty": 0,
        "answer": "        if not points:\n            return 0\n        n = len(points)\n        dp = [[0] * n for _ in range(n)]\n        for i in range(n):\n            for j in range(n):\n                if i == j:\n                    dp[i][j] = 0\n                elif points[i][0] == points[j][0] and points[i][1] == points[j][1]:\n                    dp[i][j] = 1\n                else:\n                    dp[i][j] = max(dp[i][j - 1], dp[i - 1][j]) + 1\n        return dp[0][n - 1]\n"
    },
    {
        "number": 1267,
        "title": "Count Servers that Communicate",
        "difficulty": 1,
        "answer": "        m, n = len(grid), len(grid[0])\n        if m == 0 or n == 0:\n            return 0\n        count = 0\n        for i in range(m):\n            for j in range(n):\n                if grid[i][j] == 1:\n                    for k in range(i - 1, i + 2):\n                        for l in range(j - 1, j + 2):\n                            if k >= 0 and k < m and l >= 0 and l < n:\n                                if grid[k][l] == 1:\n                                    count += 1\n        return count\n"
    },
    {
        "number": 1268,
        "title": "Search Suggestions System",
        "difficulty": 1,
        "answer": "        # write your code here\n        res = []\n        for i in range(len(products)):\n            for j in range(len(searchWord)):\n                if products[i][j] == searchWord[j]:\n                    res.append(products[i])\n                    break\n        return res"
    },
    {
        "number": 1269,
        "title": "Number of Ways to Stay in the Same Place After Some Steps",
        "difficulty": 2,
        "answer": "        if steps == 0:\n            return 1\n        if steps == 1:\n            return arrLen\n        if steps == 2:\n            return arrLen * (arrLen - 1) / 2\n        if steps == 3:\n            return arrLen * (arrLen - 1) / 2 + arrLen * arrLen / 2\n        if steps == 4:\n            return arrLen * (arrLen - 1) / 2 + arrLen * arrLen / 2 + arrLen * arrLen / 2\n        return (arrLen - 1) * (arrLen - 2) / 2 + arrLen * arrLen / 2 + arrLen * arrLen / 2 + arrLen * arrLen / 2 + arrLen * arrLen / 2 + arrLen * arrLen / 2 + arrLen * arrLen / 2 + arrLen * arrLen / 2 + arrLen * arrLen / 2 + arrLen * arrLen / 2 + arrLen * arrLen / 2 + arrLen * arrLen / 2 + arrLen * arrLen / 2 + arrLen * arrLen / 2 + arrLen * arrLen / 2 + arrLen * arrLen / 2 + arrLen"
    },
    {
        "number": 1275,
        "title": "Find Winner on a Tic Tac Toe Game",
        "difficulty": 0,
        "answer": "        # DP\n        # dp[i][j] = dp[i-1][j] + dp[i-1][j-1] + dp[i-1][j+1] + dp[i-1][j-2] + dp[i-1][j+2] + dp[i][j-1] + dp[i][j+1] + dp[i+1][j-1] + dp[i+1][j+1]\n        dp = [[0 for _ in range(3)] for _ in range(3)]\n        for i in range(3):\n            for j in range(3):\n                dp[i][j] = dp[i][j] + dp[i-1][j] + dp[i-1][j-1] + dp[i-1][j+1] + dp[i-1][j-2] + dp[i-1][j+2] + dp[i][j-1] + dp[i][j+1] + dp"
    },
    {
        "number": 1276,
        "title": "Number of Burgers with No Waste of Ingredients",
        "difficulty": 1,
        "answer": "        total_jumbo = 0\n        total_small = 0\n        for i in range(1, tomatoSlices+1):\n            if i <= cheeseSlices:\n                total_jumbo += i\n            else:\n                total_small += i\n        if total_jumbo == 0 and total_small == 0:\n            return []\n        return [total_jumbo, total_small]\n"
    },
    {
        "number": 1277,
        "title": "Count Square Submatrices with All Ones",
        "difficulty": 1,
        "answer": "        m, n = len(matrix), len(matrix[0])\n        if m == 0 or n == 0:\n            return 0\n        if m == 1 or n == 1:\n            return sum(matrix)\n        if m == 2 or n == 2:\n            return sum(matrix[0]) + sum(matrix[1])\n        if m == 3 or n == 3:\n            return sum(matrix[0]) + sum(matrix[1]) + sum(matrix[2])\n        if m == 4 or n == 4:\n            return sum(matrix[0]) + sum(matrix[1]) + sum(matrix[2]) + sum(matrix[3])\n        if m == 5 or n == 5:\n            return sum(matrix[0]) + sum(matrix[1]) + sum(matrix[2]) + sum(matrix[3]) + sum(matrix[4])\n        if m == 6 or n == 6:\n            return sum(matrix[0]) + sum(matrix[1]) + sum(matrix["
    },
    {
        "number": 1278,
        "title": "Palindrome Partitioning III",
        "difficulty": 2,
        "answer": "        # DP\n        # dp[i][j] = min(dp[i-1][j], dp[i-1][j-1]) + 1\n        # dp[i][j] = min(dp[i-1][j], dp[i-1][j-1]) + 1\n        # dp[i][j] = min(dp[i-1][j], dp[i-1][j-1]) + 1\n        # dp[i][j] = min(dp[i-1][j], dp[i-1][j-1]) + 1\n        # dp[i][j] = min(dp[i-1][j], dp[i-1][j-1]) + 1\n        # dp[i][j] = min(dp[i-1][j], dp[i-1][j-1]) + 1\n        # dp[i][j] = min(dp[i-1][j], dp[i-1][j-1]) + 1\n        # dp[i][j"
    },
    {
        "number": 1281,
        "title": "Subtract the Product and Sum of Digits of an Integer",
        "difficulty": 0,
        "answer": "        # dp[i] = max(dp[i-1] + dp[i-2] * n, dp[i-1] + dp[i-2] * n - dp[i-3] * n)\n        dp = [0] * (n+1)\n        dp[0] = 0\n        for i in range(1, n+1):\n            dp[i] = max(dp[i-1] + dp[i-2] * n, dp[i-1] + dp[i-2] * n - dp[i-3] * n)\n        return dp[n]\n"
    },
    {
        "number": 1282,
        "title": "Group the People Given the Group Size They Belong To",
        "difficulty": 1,
        "answer": "        if not groupSizes:\n            return []\n        n = len(groupSizes)\n        groups = [[] for _ in range(n)]\n        for i in range(n):\n            groups[groupSizes[i]].append(i)\n        return groups"
    },
    {
        "number": 1283,
        "title": "Find the Smallest Divisor Given a Threshold",
        "difficulty": 1,
        "answer": "        nums = sorted(nums)\n        ans = 0\n        for i in range(len(nums)):\n            ans += nums[i] / nums[i]\n            ans = min(ans, threshold)\n        return ans\n"
    },
    {
        "number": 1284,
        "title": "Minimum Number of Flips to Convert Binary Matrix to Zero Matrix",
        "difficulty": 2,
        "answer": "        m, n = len(mat), len(mat[0])\n        if m == 0 or n == 0:\n            return 0\n        if m == 1 or n == 1:\n            return 1\n        if m == 2 or n == 2:\n            return 2\n        if m == 3 or n == 3:\n            return 3\n        if m == 4 or n == 4:\n            return 4\n        if m == 5 or n == 5:\n            return 5\n        if m == 6 or n == 6:\n            return 6\n        if m == 7 or n == 7:\n            return 7\n        if m == 8 or n == 8:\n            return 8\n        if m == 9 or n == 9:\n            return 9\n        if m == 10 or n == 10:\n            return 10\n        if m == 11 or n == 11:\n            return 11\n        if m == 12 or n == 12:\n            return 12\n        if m == 13 or n == 13:\n            return 13\n        if m == 14 or n == 14:\n            return 14\n        if m == 15 or n == 15"
    },
    {
        "number": 1286,
        "title": "Iterator for Combination",
        "difficulty": 1,
        "answer": "        def combination(characters: str, combinationLength: int) -> str:\n            if not characters:\n                return \"\"\n            if combinationLength == 1:\n                return characters\n            return combination(characters[1:], combinationLength - 1) + characters[0]\n        return combination(characters, combinationLength)"
    },
    {
        "number": 1287,
        "title": "Element Appearing More Than 25% In Sorted Array",
        "difficulty": 0,
        "answer": "        if len(arr) == 0:\n            return 0\n        if len(arr) == 1:\n            return arr[0]\n        if len(arr) == 2:\n            return arr[0] if arr[0] > arr[1] else arr[1]\n        if len(arr) == 3:\n            return arr[0] if arr[0] > arr[1] and arr[1] > arr[2] else arr[2]\n        if len(arr) == 4:\n            return arr[0] if arr[0] > arr[1] and arr[1] > arr[2] and arr[2] > arr[3] else arr[3]\n        if len(arr) == 5:\n            return arr[0] if arr[0] > arr[1] and arr[1] > arr[2] and arr[2] > arr[3] and arr[3] > arr[4] else arr[4]\n        if len(arr) == 6:\n            return arr[0] if arr[0] > arr[1] and arr[1]"
    },
    {
        "number": 1288,
        "title": "Remove Covered Intervals",
        "difficulty": 1,
        "answer": "        if not intervals:\n            return 0\n        n = len(intervals)\n        for i in range(n):\n            for j in range(i+1, n):\n                if intervals[i][0] <= intervals[j][0] and intervals[i][1] >= intervals[j][1]:\n                    intervals.pop(j)\n                    break\n        return len(intervals)\n"
    },
    {
        "number": 1289,
        "title": "Minimum Falling Path Sum II",
        "difficulty": 2,
        "answer": "        n = len(grid)\n        if n == 0:\n            return 0\n        m = len(grid[0])\n        if m == 0:\n            return 0\n        dp = [[0] * m for _ in range(n)]\n        for i in range(n):\n            for j in range(m):\n                if grid[i][j] == 0:\n                    continue\n                dp[i][j] = grid[i][j] + min(dp[i][j - 1], dp[i - 1][j], dp[i - 1][j - 1])\n        return dp[n - 1][m - 1]\n"
    },
    {
        "number": 1290,
        "title": "Convert Binary Number in a Linked List to Integer",
        "difficulty": 0,
        "answer": "        if not head:\n            return 0\n        d = 1\n        while head:\n            d *= 2\n            head = head.next\n        return d"
    },
    {
        "number": 1291,
        "title": "Sequential Digits",
        "difficulty": 1,
        "answer": "        result = []\n        for i in range(low, high + 1):\n            if i % 10 == 0:\n                result.append(i)\n            else:\n                result.append(i + 1)\n        return sorted(result)\n"
    },
    {
        "number": 1292,
        "title": "Maximum Side Length of a Square with Sum Less than or Equal to Threshold",
        "difficulty": 1,
        "answer": "        m, n = len(mat), len(mat[0])\n        if m == 0 or n == 0:\n            return 0\n        if m == 1 or n == 1:\n            return min(mat[0])\n        if m == 2 or n == 2:\n            return min(mat[0]) + min(mat[1])\n        if m == 3 or n == 3:\n            return min(mat[0]) + min(mat[1]) + min(mat[2])\n        if m == 4 or n == 4:\n            return min(mat[0]) + min(mat[1]) + min(mat[2]) + min(mat[3])\n        if m == 5 or n == 5:\n            return min(mat[0]) + min(mat[1]) + min(mat[2]) + min(mat[3]) + min(mat[4])\n        if m == 6 or n == 6:\n            return min(mat[0]) + min(mat[1]) + min(mat[2]) + min(mat[3]) + min(mat[4]) + min"
    },
    {
        "number": 1293,
        "title": "Shortest Path in a Grid with Obstacles Elimination",
        "difficulty": 2,
        "answer": "        m = len(grid)\n        n = len(grid[0])\n        if m == 0 or n == 0:\n            return 0\n        if k == 0:\n            return 0\n        if m == 1 or n == 1:\n            return 1\n        if m == 2 or n == 2:\n            return 2\n        if m == 3 or n == 3:\n            return 3\n        if m == 4 or n == 4:\n            return 4\n        if m == 5 or n == 5:\n            return 5\n        if m == 6 or n == 6:\n            return 6\n        if m == 7 or n == 7:\n            return 7\n        if m == 8 or n == 8:\n            return 8\n        if m == 9 or n == 9:\n            return 9\n        if m == 10 or n == 10:\n            return 10\n        if m == 11 or n == 11:\n            return 11\n        if m == 12 or n == 12:\n            return 12\n        if m == 13 or n == 13:\n            return 13\n        if m == 14 or n == 14:\n"
    },
    {
        "number": 1295,
        "title": "Find Numbers with Even Number of Digits",
        "difficulty": 0,
        "answer": "        nums.sort()\n        for i in range(len(nums)):\n            if nums[i] % 10 == 0:\n                return i + 1\n        return 0\n"
    },
    {
        "number": 1296,
        "title": "Divide Array in Sets of K Consecutive Numbers",
        "difficulty": 1,
        "answer": "        if len(nums) < k:\n            return False\n        if k == 1:\n            return True\n        if k == 2:\n            return all(nums[i] < nums[i + 1] for i in range(len(nums) - 1))\n        if k == 3:\n            return all(nums[i] < nums[i + 1] < nums[i + 2] for i in range(len(nums) - 2))\n        if k == 4:\n            return all(nums[i] < nums[i + 1] < nums[i + 2] < nums[i + 3] for i in range(len(nums) - 3))\n        if k == 5:\n            return all(nums[i] < nums[i + 1] < nums[i + 2] < nums[i + 3] < nums[i + 4] for i in range(len(nums) - 4))\n        if k == 6:\n            return all(nums[i] < nums[i + 1]"
    },
    {
        "number": 1297,
        "title": "Maximum Number of Occurrences of a Substring",
        "difficulty": 1,
        "answer": "        # dp[i][j] = max(dp[i-1][j], dp[i-1][j-1])\n        # dp[i][j] = max(dp[i-1][j], dp[i-1][j-1])\n        # dp[i][j] = max(dp[i-1][j], dp[i-1][j-1])\n        # dp[i][j] = max(dp[i-1][j], dp[i-1][j-1])\n        # dp[i][j] = max(dp[i-1][j], dp[i-1][j-1])\n        # dp[i][j] = max(dp[i-1][j], dp[i-1][j-1])\n        # dp[i][j] = max(dp[i-1][j], dp[i-1][j-1])\n        # dp[i][j] = max(dp[i-1][j], dp[i-1"
    },
    {
        "number": 1298,
        "title": "Maximum Candies You Can Get from Boxes",
        "difficulty": 2,
        "answer": "        n = len(status)\n        # print(status)\n        # print(candies)\n        # print(keys)\n        # print(containedBoxes)\n        # print(initialBoxes)\n        # print(n)\n        # print(len(keys))\n        # print(len(containedBoxes))\n        # print(len(initialBoxes))\n        # print(n)\n        # print(len(keys))\n        # print(len(containedBoxes))\n        # print(len(initialBoxes))\n        # print(n)\n        # print(len(keys))\n        # print(len(containedBoxes))\n        # print(len(initialBoxes))\n        # print(n)\n        # print(len(keys))\n        # print(len(containedBoxes))\n        # print(len(initialBoxes))\n        # print(n)\n        # print(len(keys))\n        # print(len(containedBoxes))\n        # print(len(initialBoxes))\n        # print(n)\n        # print(len"
    },
    {
        "number": 1299,
        "title": "Replace Elements with Greatest Element on Right Side",
        "difficulty": 0,
        "answer": "        ret = []\n        for i in range(len(arr)):\n            if i == 0:\n                ret.append(arr[i])\n            else:\n                ret.append(max(arr[i-1], arr[i]))\n        return ret\n"
    },
    {
        "number": 1300,
        "title": "Sum of Mutated Array Closest to Target",
        "difficulty": 1,
        "answer": "        # https://discuss.leetcode.com/topic/83561/java-solution-with-explanation\n        # https://discuss.leetcode.com/topic/83561/java-solution-with-explanation\n        # https://discuss.leetcode.com/topic/83561/java-solution-with-explanation\n        # https://discuss.leetcode.com/topic/83561/java-solution-with-explanation\n        # https://discuss.leetcode.com/topic/83561/java-solution-with-explanation\n        # https://discuss.leetcode.com/topic/83561/java-solution-with-explanation\n        # https://discuss.leetcode.com/topic/83561/java-solution-with-explanation\n        # https://discuss.leetcode.com/topic/83561/java-solution-with-explanation\n        # https://discuss.leetcode"
    },
    {
        "number": 1301,
        "title": "Number of Paths with Max Score",
        "difficulty": 2,
        "answer": "        board = board[::-1]\n        board = [board[i][::-1] for i in range(len(board))]\n        board = [board[i][::-1] for i in range(len(board))]\n        board = [board[i][::-1] for i in range(len(board))]\n        board = [board[i][::-1] for i in range(len(board))]\n        board = [board[i][::-1] for i in range(len(board))]\n        board = [board[i][::-1] for i in range(len(board))]\n        board = [board[i][::-1] for i in range(len(board))]\n        board = [board[i][::-1] for i in range(len(board))]\n        board = [board[i][::-1] for i in range(len(board))]\n        board = [board[i][::-1] for i in range(len(board))]\n        board = [board[i][::-"
    },
    {
        "number": 1302,
        "title": "Deepest Leaves Sum",
        "difficulty": 1,
        "answer": "        if not root:\n            return 0\n        return self.deepestLeavesSum(root.left) + self.deepestLeavesSum(root.right)\n"
    },
    {
        "number": 1304,
        "title": "Find N Unique Integers Sum up to Zero",
        "difficulty": 0,
        "answer": "        ret = []\n        for i in range(n):\n            ret.append(i)\n        return ret\n"
    },
    {
        "number": 1305,
        "title": "All Elements in Two Binary Search Trees",
        "difficulty": 1,
        "answer": "        result = []\n        self.helper(root1, root2, result)\n        return result"
    },
    {
        "number": 1306,
        "title": "Jump Game III",
        "difficulty": 1,
        "answer": "        if start < 0 or start >= len(arr):\n            return False\n        if start == len(arr) - 1:\n            return True\n        if arr[start] == 0:\n            return self.canReach(arr, start + 1)\n        return self.canReach(arr, start + 1) or self.canReach(arr, start - 1)\n"
    },
    {
        "number": 1307,
        "title": "Verbal Arithmetic Puzzle",
        "difficulty": 2,
        "answer": "        # write your code here\n        if not words or not result:\n            return False\n        if len(words)!= len(result):\n            return False\n        if len(words) == 1:\n            return True\n        if len(words) == 2:\n            return self.isSolvable(words[1:], result[1:])\n        if len(words) == 3:\n            return self.isSolvable(words[1:], result[1:]) and self.isSolvable(words[1:], result[1:])\n        if len(words) == 4:\n            return self.isSolvable(words[1:], result[1:]) and self.isSolvable(words[1:], result[1:]) and self.isSolvable(words[1:], result[1:])\n        if len(words) == 5:\n            return self.isSolvable(words[1:], result[1:]) and self.isSolvable(words[1:], result[1:]) and self.isSolvable(words[1:], result[1:])"
    },
    {
        "number": 1309,
        "title": "Decrypt String from Alphabet to Integer Mapping",
        "difficulty": 0,
        "answer": "        res = \"\"\n        for c in s:\n            if c == \"#\":\n                res += \"1\"\n            else:\n                res += chr(ord(c) - ord(\"a\") + 10)\n        return res"
    },
    {
        "number": 1310,
        "title": "XOR Queries of a Subarray",
        "difficulty": 1,
        "answer": "        ans = []\n        for i in range(len(queries)):\n            left, right = queries[i]\n            ans.append(arr[left] ^ arr[left + 1] ^ arr[right] ^ arr[right + 1])\n        return ans"
    },
    {
        "number": 1311,
        "title": "Get Watched Videos by Your Friends",
        "difficulty": 1,
        "answer": "        ret = []\n        if level == 1:\n            for i in range(len(watchedVideos)):\n                for j in range(len(friends[i])):\n                    if friends[i][j] == id:\n                        ret.append(watchedVideos[i][j])\n        elif level == 2:\n            for i in range(len(watchedVideos)):\n                for j in range(len(friends[i])):\n                    if friends[i][j] == id:\n                        for k in range(len(friends[i])):\n                            if friends[i][k] == friends[i][j]:\n                                ret.append(watchedVideos[i][k])\n        return ret\n"
    },
    {
        "number": 1312,
        "title": "Minimum Insertion Steps to Make a String Palindrome",
        "difficulty": 2,
        "answer": "        # DP\n        # dp[i][j] = min(dp[i][j-1], dp[i-1][j]) + 1\n        # dp[i][j] = min(dp[i][j-1], dp[i-1][j]) + 1\n        # dp[i][j] = min(dp[i][j-1], dp[i-1][j]) + 1\n        # dp[i][j] = min(dp[i][j-1], dp[i-1][j]) + 1\n        # dp[i][j] = min(dp[i][j-1], dp[i-1][j]) + 1\n        # dp[i][j] = min(dp[i][j-1], dp[i-1][j]) + 1\n        # dp[i][j] = min(dp[i][j-1], dp[i-1][j]) + 1\n        # dp[i][j] = min(dp[i][j-1], dp"
    },
    {
        "number": 1313,
        "title": "Decompress Run-Length Encoded List",
        "difficulty": 0,
        "answer": "        nums.sort()\n        res = []\n        for i in range(len(nums)):\n            if i == 0 or nums[i]!= nums[i-1]:\n                res.append(nums[i])\n        return res\n"
    },
    {
        "number": 1314,
        "title": "Matrix Block Sum",
        "difficulty": 1,
        "answer": "        m, n = len(mat), len(mat[0])\n        ans = [[0] * n for _ in range(m)]\n        for i in range(m):\n            for j in range(n):\n                for r in range(i - k, i + k + 1):\n                    for c in range(j - k, j + k + 1):\n                        if r >= 0 and r < m and c >= 0 and c < n:\n                            ans[r][c] += mat[r][c]\n        return ans\n"
    },
    {
        "number": 1315,
        "title": "Sum of Nodes with Even-Valued Grandparent",
        "difficulty": 1,
        "answer": "        def helper(root):\n            if root is None:\n                return 0\n            if root.left is None and root.right is None:\n                return root.val\n            if root.left is None:\n                return helper(root.right) + root.val\n            if root.right is None:\n                return helper(root.left) + root.val\n            return helper(root.left) + helper(root.right) + root.val"
    },
    {
        "number": 1316,
        "title": "Distinct Echo Substrings",
        "difficulty": 2,
        "answer": "        return len(set(text)) - len(text.split())"
    },
    {
        "number": 1317,
        "title": "Convert Integer to the Sum of Two No-Zero Integers",
        "difficulty": 0,
        "answer": "        result = []\n        for i in range(1, n + 1):\n            for j in range(1, n + 1):\n                if i + j == n:\n                    result.append(i)\n                    result.append(j)\n                    break\n        return result\n"
    },
    {
        "number": 1318,
        "title": "Minimum Flips to Make a OR b Equal to c",
        "difficulty": 1,
        "answer": "        if a == 0 or b == 0 or c == 0:\n            return 0\n        if a == 1 and b == 1 and c == 1:\n            return 1\n        if a == 1 and b == 1 and c == 0:\n            return 2\n        if a == 1 and b == 0 and c == 1:\n            return 3\n        if a == 1 and b == 0 and c == 0:\n            return 4\n        if a == 0 and b == 1 and c == 1:\n            return 5\n        if a == 0 and b == 1 and c == 0:\n            return 6\n        if a == 0 and b == 0 and c == 1:\n            return 7\n        if a == 0 and b == 0 and c == 0:\n            return 8\n        if a == 1 and b == 1 and c == 1:\n            return 9\n        if a == 1 and b == 1 and c == 0:\n            return 10\n        if a == 1 and b == 0 and c == 1:\n            return 11\n        if a == 1 and b == 0 and c == 0:\n            return 12\n        if a"
    },
    {
        "number": 1319,
        "title": "Number of Operations to Make Network Connected",
        "difficulty": 1,
        "answer": "        # dp[i][j] = min(dp[i-1][j], dp[i-1][j-1]) + 1\n        dp = [[0] * (n + 1) for _ in range(n + 1)]\n        for i in range(1, n + 1):\n            for j in range(1, n + 1):\n                dp[i][j] = min(dp[i - 1][j], dp[i - 1][j - 1]) + 1\n        return dp[n][n]"
    },
    {
        "number": 1320,
        "title": "Minimum Distance to Type a Word Using Two Fingers",
        "difficulty": 2,
        "answer": "        n = len(word)\n        if n == 0:\n            return 0\n        dp = [[0] * n for _ in range(n)]\n        for i in range(n):\n            dp[i][i] = 0\n        for i in range(n):\n            for j in range(i + 1, n):\n                dp[i][j] = min(dp[i][j], dp[i][j - 1] + 1)\n                if word[i] == word[j]:\n                    dp[i][j] = min(dp[i][j], dp[i - 1][j - 1] + 1)\n        return dp[0][n - 1]\n"
    },
    {
        "number": 1323,
        "title": "Maximum 69 Number",
        "difficulty": 0,
        "answer": "        if num < 10:\n            return num\n        if num % 10 == 0:\n            return num\n        if num % 100 == 0:\n            return num\n        if num % 1000 == 0:\n            return num\n        if num % 10000 == 0:\n            return num\n        if num % 100000 == 0:\n            return num\n        if num % 1000000 == 0:\n            return num\n        if num % 10000000 == 0:\n            return num\n        if num % 100000000 == 0:\n            return num\n        if num % 1000000000 == 0:\n            return num\n        return num\n"
    },
    {
        "number": 1324,
        "title": "Print Words Vertically",
        "difficulty": 1,
        "answer": "        words = []\n        for i in range(len(s)):\n            if s[i] =='':\n                words.append(s[:i])\n                s = s[i+1:]\n            else:\n                words.append(s[:i])\n                s = s[i+1:]\n        return words\n"
    },
    {
        "number": 1325,
        "title": "Delete Leaves With a Given Value",
        "difficulty": 1,
        "answer": "        if not root:\n            return None\n        if root.left is None and root.right is None:\n            if root.val == target:\n                return None\n            else:\n                return root\n        elif root.left is None:\n            return self.removeLeafNodes(root.right, target)\n        elif root.right is None:\n            return self.removeLeafNodes(root.left, target)\n        else:\n            if root.left.val == target:\n                return self.removeLeafNodes(root.left, target)\n            elif root.right.val == target:\n                return self.removeLeafNodes(root.right, target)\n            else:\n                return root\n"
    },
    {
        "number": 1326,
        "title": "Minimum Number of Taps to Open to Water a Garden",
        "difficulty": 2,
        "answer": "        if n == 0:\n            return 0\n        if n == 1:\n            return 1\n        if n == 2:\n            return 2\n        if n == 3:\n            return 3\n        if n == 4:\n            return 4\n        if n == 5:\n            return 5\n        if n == 6:\n            return 6\n        if n == 7:\n            return 7\n        if n == 8:\n            return 8\n        if n == 9:\n            return 9\n        if n == 10:\n            return 10\n        if n == 11:\n            return 11\n        if n == 12:\n            return 12\n        if n == 13:\n            return 13\n        if n == 14:\n            return 14\n        if n == 15:\n            return 15\n        if n == 16:\n            return 16\n        if n == 17:\n            return 17\n        if n == 18:\n            return 18\n        if n == 19:\n            return 19\n        if n == 20:\n            return 20\n        if n == 21:\n            return 21\n        if n == 22:\n            "
    },
    {
        "number": 1328,
        "title": "Break a Palindrome",
        "difficulty": 1,
        "answer": "        # DP\n        # dp[i][j] = dp[i-1][j] + dp[i-1][j-1]\n        # dp[i][j] = dp[i-1][j] + dp[i-1][j-1] + dp[i-1][j-2]\n        # dp[i][j] = dp[i-1][j] + dp[i-1][j-1] + dp[i-1][j-2] + dp[i-1][j-3]\n        # dp[i][j] = dp[i-1][j] + dp[i-1][j-1] + dp[i-1][j-2] + dp[i-1][j-3] + dp[i-1][j-4]\n        # dp[i][j] = dp[i-1][j] + dp[i-1][j-1] + dp[i-1][j-2] + dp"
    },
    {
        "number": 1329,
        "title": "Sort the Matrix Diagonally",
        "difficulty": 1,
        "answer": "        m, n = len(mat), len(mat[0])\n        res = [[0 for _ in range(n)] for _ in range(m)]\n        for i in range(m):\n            for j in range(n):\n                if i == 0 or j == 0:\n                    res[i][j] = mat[i][j]\n                else:\n                    res[i][j] = min(res[i-1][j-1], res[i-1][j], res[i][j-1]) + mat[i][j]\n        return res"
    },
    {
        "number": 1330,
        "title": "Reverse Subarray To Maximize Array Value",
        "difficulty": 2,
        "answer": "        n = len(nums)\n        if n == 0:\n            return 0\n        if n == 1:\n            return nums[0]\n        if n == 2:\n            return max(nums[0] + nums[1], nums[1] + nums[0])\n        if n == 3:\n            return max(nums[0] + nums[1] + nums[2], nums[1] + nums[2] + nums[0], nums[2] + nums[0] + nums[1])\n        if n == 4:\n            return max(nums[0] + nums[1] + nums[2] + nums[3], nums[1] + nums[2] + nums[3] + nums[0], nums[2] + nums[3] + nums[0] + nums[1], nums[3] + nums[0] + nums[1] + nums[2])\n        if n == 5:\n            return max(nums["
    },
    {
        "number": 1331,
        "title": "Rank Transform of an Array",
        "difficulty": 0,
        "answer": "        n = len(arr)\n        if n == 0:\n            return []\n        if n == 1:\n            return [1]\n        res = [1]\n        for i in range(2, n + 1):\n            res.append(res[i - 1] + arr[i - 1])\n        return res\n"
    },
    {
        "number": 1332,
        "title": "Remove Palindromic Subsequences",
        "difficulty": 0,
        "answer": "        # DP\n        # dp[i][j] = min(dp[i-1][j], dp[i-1][j-1]) + 1\n        # dp[i][j] = min(dp[i-1][j], dp[i-1][j-1]) + 1\n        # dp[i][j] = min(dp[i-1][j], dp[i-1][j-1]) + 1\n        # dp[i][j] = min(dp[i-1][j], dp[i-1][j-1]) + 1\n        # dp[i][j] = min(dp[i-1][j], dp[i-1][j-1]) + 1\n        # dp[i][j] = min(dp[i-1][j], dp[i-1][j-1]) + 1\n        # dp[i][j] = min(dp[i-1][j], dp[i-1][j-1]) + 1\n        # dp[i][j"
    },
    {
        "number": 1333,
        "title": "Filter Restaurants by Vegan-Friendly, Price and Distance",
        "difficulty": 1,
        "answer": "        res = []\n        for i in range(len(restaurants)):\n            if veganFriendly == 1:\n                if restaurants[i][3] <= maxPrice and restaurants[i][4] <= maxDistance:\n                    res.append(restaurants[i][0])\n            else:\n                if restaurants[i][3] <= maxPrice:\n                    res.append(restaurants[i][0])\n        return res\n"
    },
    {
        "number": 1334,
        "title": "Find the City With the Smallest Number of Neighbors at a Threshold Distance",
        "difficulty": 1,
        "answer": "        if n == 0:\n            return 0\n        if n == 1:\n            return 0\n        if n == 2:\n            return 0\n        if n == 3:\n            return 0\n        if n == 4:\n            return 0\n        if n == 5:\n            return 0\n        if n == 6:\n            return 0\n        if n == 7:\n            return 0\n        if n == 8:\n            return 0\n        if n == 9:\n            return 0\n        if n == 10:\n            return 0\n        if n == 11:\n            return 0\n        if n == 12:\n            return 0\n        if n == 13:\n            return 0\n        if n == 14:\n            return 0\n        if n == 15:\n            return 0\n        if n == 16:\n            return 0\n        if n == 17:\n            return 0\n        if n == 18:\n            return 0\n        if n == 19:\n            return 0\n        if n == 20:\n            return 0\n        if n == 21:\n            return 0\n        if n == 22:\n            "
    },
    {
        "number": 1335,
        "title": "Minimum Difficulty of a Job Schedule",
        "difficulty": 2,
        "answer": "        if d == 0:\n            return 0\n        if d == 1:\n            return jobDifficulty[0]\n        if d == 2:\n            return min(jobDifficulty[0], jobDifficulty[1])\n        if d == 3:\n            return min(jobDifficulty[0], min(jobDifficulty[1], jobDifficulty[2]))\n        if d == 4:\n            return min(jobDifficulty[0], min(jobDifficulty[1], min(jobDifficulty[2], jobDifficulty[3])))\n        if d == 5:\n            return min(jobDifficulty[0], min(jobDifficulty[1], min(jobDifficulty[2], min(jobDifficulty[3], jobDifficulty[4]))))\n        if d == 6:\n            return min(jobDifficulty[0], min(jobDifficulty[1], min(jobDifficulty[2], min(jobDifficulty[3], min(jobDifficulty[4], jobDifficulty[5]))))\n        if d == 7:\n            return min(jobDifficulty[0], min("
    },
    {
        "number": 1337,
        "title": "The K Weakest Rows in a Matrix",
        "difficulty": 0,
        "answer": "        ret = []\n        for i in range(len(mat)):\n            for j in range(i+1, len(mat)):\n                if mat[i][j] == 1 and mat[i][i] < mat[j][i]:\n                    ret.append(i)\n                    break\n                elif mat[i][j] == 1 and mat[i][i] == mat[j][i]:\n                    ret.append(i)\n                    break\n        return ret\n"
    },
    {
        "number": 1338,
        "title": "Reduce Array Size to The Half",
        "difficulty": 1,
        "answer": "        if not arr:\n            return 0\n        n = len(arr)\n        # find the first element that is not in the set\n        for i in range(n):\n            if arr[i] not in arr[:i]:\n                break\n        # find the last element that is not in the set\n        for i in range(n-1, -1, -1):\n            if arr[i] not in arr[i+1:]:\n                break\n        return i+1\n"
    },
    {
        "number": 1339,
        "title": "Maximum Product of Splitted Binary Tree",
        "difficulty": 1,
        "answer": "        if not root:\n            return 0\n        if not root.left and not root.right:\n            return root.val\n        if not root.left:\n            return self.maxProduct(root.right)\n        if not root.right:\n            return self.maxProduct(root.left)\n        return max(self.maxProduct(root.left), self.maxProduct(root.right)) % (10 + 7)"
    },
    {
        "number": 1340,
        "title": "Jump Game V",
        "difficulty": 2,
        "answer": "        # d is the maximum number of jumps\n        # d is the maximum number of jumps\n        # d is the maximum number of jumps\n        # d is the maximum number of jumps\n        # d is the maximum number of jumps\n        # d is the maximum number of jumps\n        # d is the maximum number of jumps\n        # d is the maximum number of jumps\n        # d is the maximum number of jumps\n        # d is the maximum number of jumps\n        # d is the maximum number of jumps\n        # d is the maximum number of jumps\n        # d is the maximum number of jumps\n        # d is the maximum number of jumps\n        # d is the maximum number of jumps\n        # d is the maximum number of jumps\n        # d is the maximum number of jumps\n        # d is the maximum number of jumps\n        # d is the maximum number of jumps\n        # d is the maximum number of jumps\n        # d is the maximum number of jumps\n        # d is the maximum number of jumps\n        # d is the maximum number of jumps\n        # d is the maximum number of jumps\n        # d is the maximum number of jumps\n"
    },
    {
        "number": 1342,
        "title": "Number of Steps to Reduce a Number to Zero",
        "difficulty": 0,
        "answer": "        if num == 0:\n            return 0\n        if num % 2 == 0:\n            return num / 2\n        else:\n            return num - 1\n"
    },
    {
        "number": 1343,
        "title": "Number of Sub-arrays of Size K and Average Greater than or Equal to Threshold",
        "difficulty": 1,
        "answer": "        ans = 0\n        for i in range(len(arr)):\n            if arr[i] == k:\n                ans += 1\n            elif arr[i] > k:\n                if arr[i] - k >= threshold:\n                    ans += 1\n        return ans\n"
    },
    {
        "number": 1344,
        "title": "Angle Between Hands of a Clock",
        "difficulty": 1,
        "answer": "        if hour < 0 or hour > 23:\n            return 0\n        if minutes < 0 or minutes > 59:\n            return 0\n        if hour == 0 and minutes == 0:\n            return 0\n        if hour == 12 and minutes == 0:\n            return 0\n        if hour == 12 and minutes == 30:\n            return 0\n        if hour == 12 and minutes == 0:\n            return 0\n        if hour == 12 and minutes == 30:\n            return 0\n        if hour == 12 and minutes == 0:\n            return 0\n        if hour == 12 and minutes == 30:\n            return 0\n        if hour == 12 and minutes == 0:\n            return 0\n        if hour == 12 and minutes == 30:\n            return 0\n        if hour == 12 and minutes == 0:\n            return 0\n        if hour == 12 and minutes == 30:\n            return 0\n        if hour == 12 and minutes == 0:\n            return 0\n        if hour == 12 and minutes == 30:\n            return 0\n        if hour == 12 and minutes == 0:\n            return 0\n        if hour == 12 and minutes == 30:"
    },
    {
        "number": 1345,
        "title": "Jump Game IV",
        "difficulty": 2,
        "answer": "        n = len(arr)\n        if n == 0:\n            return 0\n        if n == 1:\n            return 0\n        if n == 2:\n            return 1\n        if n == 3:\n            return 2\n        if n == 4:\n            return 3\n        if n == 5:\n            return 4\n        if n == 6:\n            return 5\n        if n == 7:\n            return 6\n        if n == 8:\n            return 7\n        if n == 9:\n            return 8\n        if n == 10:\n            return 9\n        if n == 11:\n            return 10\n        if n == 12:\n            return 11\n        if n == 13:\n            return 12\n        if n == 14:\n            return 13\n        if n == 15:\n            return 14\n        if n == 16:\n            return 15\n        if n == 17:\n            return 16\n        if n == 18:\n            return 17\n        if n == 19:\n            return 18\n        if n == 20:\n            return 19\n        if n == 21:\n            return 20\n"
    },
    {
        "number": 1346,
        "title": "Check If N and Its Double Exist",
        "difficulty": 0,
        "answer": "        for i in range(len(arr)):\n            for j in range(i + 1, len(arr)):\n                if arr[i] == 2 * arr[j]:\n                    return True\n        return False\n"
    },
    {
        "number": 1347,
        "title": "Minimum Number of Steps to Make Two Strings Anagram",
        "difficulty": 1,
        "answer": "        # DP\n        # dp[i][j] = min(dp[i-1][j], dp[i-1][j-1]) + 1\n        # dp[i][j] = min(dp[i-1][j], dp[i-1][j-1]) + 1\n        # dp[i][j] = min(dp[i-1][j], dp[i-1][j-1]) + 1\n        # dp[i][j] = min(dp[i-1][j], dp[i-1][j-1]) + 1\n        # dp[i][j] = min(dp[i-1][j], dp[i-1][j-1]) + 1\n        # dp[i][j] = min(dp[i-1][j], dp[i-1][j-1]) + 1\n        # dp[i][j] = min(dp[i-1][j], dp[i-1][j-1]) + 1\n        # dp[i][j"
    },
    {
        "number": 1348,
        "title": "Tweet Counts Per Frequency",
        "difficulty": 1,
        "answer": "        pass"
    },
    {
        "number": 1349,
        "title": "Maximum Students Taking Exam",
        "difficulty": 2,
        "answer": "        m, n = len(seats), len(seats[0])\n        dp = [[0] * n for _ in range(m)]\n        for i in range(m):\n            for j in range(n):\n                if seats[i][j] == \"#\":\n                    dp[i][j] = 0\n                elif seats[i][j] == \".\":\n                    dp[i][j] = 1\n                else:\n                    dp[i][j] = 1 + max(dp[i - 1][j], dp[i][j - 1])\n        return max(dp[m - 1][n - 1])\n"
    },
    {
        "number": 1351,
        "title": "Count Negative Numbers in a Sorted Matrix",
        "difficulty": 0,
        "answer": "        m = len(grid)\n        n = len(grid[0])\n        if m == 0 or n == 0:\n            return 0\n        if m == 1 or n == 1:\n            return 0 if grid[0][0] >= 0 else 1\n        if m == 2 or n == 2:\n            return 0 if grid[0][0] >= 0 and grid[1][0] >= 0 else 1\n        if m == 3 or n == 3:\n            return 0 if grid[0][0] >= 0 and grid[1][0] >= 0 and grid[2][0] >= 0 else 1\n        if m == 4 or n == 4:\n            return 0 if grid[0][0] >= 0 and grid[1][0] >= 0 and grid[2][0] >= 0 and grid[3][0] >= 0 else 1\n        if m == 5 or n == 5:\n            return 0 if grid[0][0] >= 0 and grid[1][0] >= 0 and grid[2][0] >= 0 and grid[3][0] >= 0 and grid[4][0] >= 0"
    },
    {
        "number": 1352,
        "title": "Product of the Last K Numbers",
        "difficulty": 1,
        "answer": "    def getProduct(self, k: int) -> int:\n        \"\"\"\n        Design an algorithm that accepts a stream of integers and retrieves the product of the last k integers of the stream.\n        Implement the ProductOfNumbers class:\n            ProductOfNumbers() Initializes the object with an empty stream.\n            void add(int num) Appends the integer num to the stream.\n            int getProduct(int k) Returns the product of the last k numbers in the current list. You can assume that always the current list has at least k numbers.\n        The test cases are generated so that, at any time, the product of any contiguous sequence of numbers will fit into a single 32-bit integer without overflowing.\n        Example:\n        Input\n        [\"ProductOfNumbers\",\"add\",\"add\",\"add\",\"add\",\"add\",\"getProduct\",\"getProduct\",\"getProduct\",\"add\",\"getProduct\"]\n        [[],[3],[0],[2],[5],[4],[2],[3],[4],[8],[2]]\n        Output\n        [null,null,null,null,null,null,20,40,0,null,32]\n        Explanation\n"
    },
    {
        "number": 1353,
        "title": "Maximum Number of Events That Can Be Attended",
        "difficulty": 1,
        "answer": "        # DP\n        # dp[i][j] = max(dp[i-1][j], dp[i-1][j-1]) + 1\n        # dp[i][j] = max(dp[i-1][j], dp[i-1][j-1]) + 1\n        # dp[i][j] = max(dp[i-1][j], dp[i-1][j-1]) + 1\n        # dp[i][j] = max(dp[i-1][j], dp[i-1][j-1]) + 1\n        # dp[i][j] = max(dp[i-1][j], dp[i-1][j-1]) + 1\n        # dp[i][j] = max(dp[i-1][j], dp[i-1][j-1]) + 1\n        # dp[i][j] = max(dp[i-1][j], dp[i-1][j-1]) + 1\n        # dp[i][j"
    },
    {
        "number": 1354,
        "title": "Construct Target Array With Multiple Sums",
        "difficulty": 2,
        "answer": "        n = len(target)\n        if n == 0:\n            return True\n        if n == 1:\n            return target[0] == 1\n        if n == 2:\n            return target[0] == 1 and target[1] == 1\n        if n == 3:\n            return target[0] == 1 and target[1] == 1 and target[2] == 1\n        if n == 4:\n            return target[0] == 1 and target[1] == 1 and target[2] == 1 and target[3] == 1\n        if n == 5:\n            return target[0] == 1 and target[1] == 1 and target[2] == 1 and target[3] == 1 and target[4] == 1\n        if n == 6:\n            return target[0] == 1 and target[1] == 1 and target[2] == 1 and target[3] == 1 and target[4] == 1 and target[5] == 1\n        if n == 7:\n            return target[0] == 1 and target[1] == 1 and target[2] == 1 and"
    },
    {
        "number": 1356,
        "title": "Sort Integers by The Number of 1 Bits",
        "difficulty": 0,
        "answer": "        res = []\n        for i in range(len(arr)):\n            res.append(arr[i])\n            while arr[i] > 0:\n                arr[i] = arr[i] & (arr[i] - 1)\n                res.append(arr[i])\n        return res\n"
    },
    {
        "number": 1357,
        "title": "Apply Discount Every n Orders",
        "difficulty": 1,
        "answer": "        return self.getBill(product, amount)"
    },
    {
        "number": 1358,
        "title": "Number of Substrings Containing All Three Characters",
        "difficulty": 1,
        "answer": "        count = 0\n        for i in range(len(s)):\n            for j in range(i+1, len(s)):\n                if s[i] == s[j]:\n                    count += 1\n        return count\n"
    },
    {
        "number": 1359,
        "title": "Count All Valid Pickup and Delivery Options",
        "difficulty": 2,
        "answer": "        # https://discuss.leetcode.com/topic/835/java-solution-with-explanation\n        # https://discuss.leetcode.com/topic/835/java-solution-with-explanation\n        # https://discuss.leetcode.com/topic/835/java-solution-with-explanation\n        # https://discuss.leetcode.com/topic/835/java-solution-with-explanation\n        # https://discuss.leetcode.com/topic/835/java-solution-with-explanation\n        # https://discuss.leetcode.com/topic/835/java-solution-with-explanation\n        # https://discuss.leetcode.com/topic/835/java-solution-with-explanation\n        # https://discuss.leetcode.com/topic/835/java-solution-with-explanation\n        # https://discuss.leetcode.com/topic/835/"
    },
    {
        "number": 1360,
        "title": "Number of Days Between Two Dates",
        "difficulty": 0,
        "answer": "        date1 = datetime.datetime.strptime(date1, \"%Y-%m-%d\")\n        date2 = datetime.datetime.strptime(date2, \"%Y-%m-%d\")\n        return (date2 - date1).days\n"
    },
    {
        "number": 1361,
        "title": "Validate Binary Tree Nodes",
        "difficulty": 1,
        "answer": "        if n == 0:\n            return True\n        if leftChild[n] == -1 and rightChild[n] == -1:\n            return True\n        if leftChild[n] == -1 or rightChild[n] == -1:\n            return False\n        return self.validateBinaryTreeNodes(n - 1, leftChild, rightChild) and self.validateBinaryTreeNodes(n - 1, leftChild, rightChild)\n"
    },
    {
        "number": 1362,
        "title": "Closest Divisors",
        "difficulty": 1,
        "answer": "        ans = []\n        for i in range(1, num + 1):\n            for j in range(1, num + 1):\n                if i * j == num + 1:\n                    ans.append(i)\n                    ans.append(j)\n                    break\n        return ans\n"
    },
    {
        "number": 1363,
        "title": "Largest Multiple of Three",
        "difficulty": 2,
        "answer": "        if len(digits) == 0:\n            return \"\"\n        if len(digits) == 1:\n            return str(digits[0])\n        if len(digits) == 2:\n            return str(digits[0]) + str(digits[1])\n        if len(digits) == 3:\n            return str(digits[0]) + str(digits[1]) + str(digits[2])\n        if len(digits) == 4:\n            return str(digits[0]) + str(digits[1]) + str(digits[2]) + str(digits[3])\n        if len(digits) == 5:\n            return str(digits[0]) + str(digits[1]) + str(digits[2]) + str(digits[3]) + str(digits[4])\n        if len(digits) == 6:\n            return str(digits[0]) + str(digits[1]) + str(digits[2]) + str(digits[3]) + str(digits["
    },
    {
        "number": 1365,
        "title": "How Many Numbers Are Smaller Than the Current Number",
        "difficulty": 0,
        "answer": "        ans = [0] * len(nums)\n        for i in range(len(nums)):\n            for j in range(i+1, len(nums)):\n                if nums[i] < nums[j]:\n                    ans[i] += 1\n        return ans\n"
    },
    {
        "number": 1366,
        "title": "Rank Teams by Votes",
        "difficulty": 1,
        "answer": "        result = \"\"\n        for vote in votes:\n            result += vote\n        result = sorted(result)\n        return result\n"
    },
    {
        "number": 1367,
        "title": "Linked List in Binary Tree",
        "difficulty": 1,
        "answer": "        if not head or not root:\n            return False\n        \n        if head.val == root.val:\n            return True\n        \n        if head.val < root.val:\n            return self.isSubPath(head.next, root)\n        \n        return self.isSubPath(head.next, root.left) or self.isSubPath(head.next, root.right)\n"
    },
    {
        "number": 1368,
        "title": "Minimum Cost to Make at Least One Valid Path in a Grid",
        "difficulty": 2,
        "answer": "        m, n = len(grid), len(grid[0])\n        if m == 0 or n == 0:\n            return 0\n        dp = [[0 for _ in range(n)] for _ in range(m)]\n        for i in range(m):\n            for j in range(n):\n                if grid[i][j] == 1:\n                    dp[i][j] = 1\n                elif grid[i][j] == 2:\n                    dp[i][j] = 1\n                elif grid[i][j] == 3:\n                    dp[i][j] = 1\n                elif grid[i][j] == 4:\n                    dp[i][j] = 1\n                elif grid[i][j] == 5:\n                    dp[i][j] = 1\n                elif grid[i][j] == 6:\n                    dp[i][j] = 1\n                elif grid[i][j] == 7:\n                    dp[i][j] = 1\n                elif grid[i][j] == 8:\n                    dp[i][j] ="
    },
    {
        "number": 1370,
        "title": "Increasing Decreasing String",
        "difficulty": 0,
        "answer": "        result = \"\"\n        for c in s:\n            if c not in result:\n                result += c\n            else:\n                result = result[:result.rfind(c)] + c + result[result.rfind(c)+1:]\n        return result"
    },
    {
        "number": 1371,
        "title": "Find the Longest Substring Containing Vowels in Even Counts",
        "difficulty": 1,
        "answer": "        vowel_count = {}\n        for c in s:\n            if c in vowel_count:\n                vowel_count[c] += 1\n            else:\n                vowel_count[c] = 1\n        max_len = 0\n        for c in vowel_count:\n            if vowel_count[c] % 2 == 0:\n                max_len = max(max_len, len(s))\n        return max_len"
    },
    {
        "number": 1372,
        "title": "Longest ZigZag Path in a Binary Tree",
        "difficulty": 1,
        "answer": "        if not root:\n            return 0\n        if not root.left and not root.right:\n            return 1\n        if not root.left:\n            return self.longestZigZag(root.right) + 1\n        if not root.right:\n            return self.longestZigZag(root.left) + 1\n        return max(self.longestZigZag(root.left), self.longestZigZag(root.right)) + 1"
    },
    {
        "number": 1373,
        "title": "Maximum Sum BST in Binary Tree",
        "difficulty": 2,
        "answer": "        if not root:\n            return 0"
    },
    {
        "number": 1374,
        "title": "Generate a String With Characters That Have Odd Counts",
        "difficulty": 0,
        "answer": "        if n == 0:\n            return \"\"\n        if n == 1:\n            return \"a\"\n        if n == 2:\n            return \"ab\"\n        if n == 3:\n            return \"abc\"\n        if n == 4:\n            return \"abcd\"\n        if n == 5:\n            return \"abcde\"\n        if n == 6:\n            return \"abcdef\"\n        if n == 7:\n            return \"abcdefg\"\n        if n == 8:\n            return \"abcdefgh\"\n        if n == 9:\n            return \"abcdefghi\"\n        if n == 10:\n            return \"abcdefghij\"\n        if n == 11:\n            return \"abcdefghijk\"\n        if n == 12:\n            return \"abcdefghijkl\"\n        if n == 13:\n            return \"abcdefghijklm\"\n        if n == 14:\n            return \"abcdefghijklmn\"\n        if n == 15:\n            return \"abcdefghijklmno\"\n        if n == 16:\n            "
    },
    {
        "number": 1375,
        "title": "Number of Times Binary String Is Prefix-Aligned",
        "difficulty": 1,
        "answer": "        n = len(flips)\n        if n == 0:\n            return 0\n        if n == 1:\n            return 1\n        if flips[0] == 0:\n            return 1\n        if flips[0] == 1:\n            return 1\n        if flips[0] == 2:\n            return 1\n        if flips[0] == 3:\n            return 1\n        if flips[0] == 4:\n            return 1\n        if flips[0] == 5:\n            return 1\n        if flips[0] == 6:\n            return 1\n        if flips[0] == 7:\n            return 1\n        if flips[0] == 8:\n            return 1\n        if flips[0] == 9:\n            return 1\n        if flips[0] == 10:\n            return 1\n        if flips[0] == 11:\n            return 1\n        if flips[0] == 12:\n            return 1\n        if flips[0] == 13:\n            return 1\n        if flips[0] == 14:\n            return 1\n        if flips[0] == 15:"
    },
    {
        "number": 1376,
        "title": "Time Needed to Inform All Employees",
        "difficulty": 1,
        "answer": "        if n == 0:\n            return 0\n        elif n == 1:\n            return informTime[headID]\n        elif n == 2:\n            return min(informTime[headID], informTime[manager[headID]])\n        else:\n            return self.numOfMinutes(n - 1, headID, manager, informTime) + informTime[headID]"
    },
    {
        "number": 1377,
        "title": "Frog Position After T Seconds",
        "difficulty": 2,
        "answer": "        # dp[i][j] = max(dp[i-1][j], dp[i-1][j-1])\n        dp = [[0 for j in range(n+1)] for i in range(t+1)]\n        dp[0][0] = 0\n        for i in range(1, t+1):\n            for j in range(1, n+1):\n                dp[i][j] = max(dp[i-1][j], dp[i-1][j-1])\n        return dp[t][target]\n"
    },
    {
        "number": 1379,
        "title": "Find a Corresponding Node of a Binary Tree in a Clone of That Tree",
        "difficulty": 0,
        "answer": "        # Copy the original tree\n        cloned.left = self.getTargetCopy(original.left, cloned.left, target)\n        cloned.right = self.getTargetCopy(original.right, cloned.right, target)\n        return cloned\n"
    },
    {
        "number": 1380,
        "title": "Lucky Numbers in a Matrix",
        "difficulty": 0,
        "answer": "        n = len(matrix)\n        m = len(matrix[0])\n        ans = []\n        for i in range(m):\n            for j in range(n):\n                if matrix[i][j] == 1:\n                    ans.append(matrix[i][j])\n        return ans\n"
    },
    {
        "number": 1381,
        "title": "Design a Stack With Increment Operation",
        "difficulty": 1,
        "answer": "        # Your Codec object will be instantiated and called as such:\n        # codec = Codec()\n        # codec.decode(codec.encode(x))\n        # codec.decode(codec.encode(x))\n        # codec.decode(codec.encode(x))\n        # codec.decode(codec.encode(x))\n        # codec.decode(codec.encode(x))\n        # codec.decode(codec.encode(x))\n        # codec.decode(codec.encode(x))\n        # codec.decode(codec.encode(x))\n        # codec.decode(codec.encode(x))\n        # codec.decode(codec.encode(x))\n        # codec.decode(codec.encode(x))\n        # codec.decode(codec.encode(x))\n        # codec.decode(codec.encode(x))\n        # codec.decode(codec.encode(x))\n        # codec."
    },
    {
        "number": 1382,
        "title": "Balance a Binary Search Tree",
        "difficulty": 1,
        "answer": "        if not root:\n            return root\n        if not root.left and not root.right:\n            return root\n        if not root.left:\n            return self.balanceBST(root.right)\n        if not root.right:\n            return self.balanceBST(root.left)\n        if abs(self.balanceBST(root.left) - self.balanceBST(root.right)) > 1:\n            return root\n        return self.balanceBST(root.left)\n"
    },
    {
        "number": 1383,
        "title": "Maximum Performance of a Team",
        "difficulty": 2,
        "answer": "        if k == 1:\n            return sum(speed) * min(efficiency)\n        elif k == 2:\n            return sum(speed) * min(efficiency) + sum(speed) * min(efficiency)\n        elif k == 3:\n            return sum(speed) * min(efficiency) + sum(speed) * min(efficiency) + sum(speed) * min(efficiency)\n        else:\n            return sum(speed) * min(efficiency) + sum(speed) * min(efficiency) + sum(speed) * min(efficiency) + sum(speed) * min(efficiency)\n"
    },
    {
        "number": 1385,
        "title": "Find the Distance Value Between Two Arrays",
        "difficulty": 0,
        "answer": "        # d is the distance value\n        # arr1 is the first array\n        # arr2 is the second array\n        # d is the distance value\n        # arr1 is the first array\n        # arr2 is the second array\n        # d is the distance value\n        # arr1 is the first array\n        # arr2 is the second array\n        # d is the distance value\n        # arr1 is the first array\n        # arr2 is the second array\n        # d is the distance value\n        # arr1 is the first array\n        # arr2 is the second array\n        # d is the distance value\n        # arr1 is the first array\n        # arr2 is the second array\n        # d is the distance value\n        # arr1 is the first array\n        # arr2 is the second array\n        # d is the distance value\n        # arr1 is the first array\n        # arr2 is the second array\n        # d is the distance value\n        # arr1 is the first array\n        # arr2 is the second array\n        # d is the distance value\n        # arr1 is the first array"
    },
    {
        "number": 1386,
        "title": "Cinema Seat Allocation",
        "difficulty": 1,
        "answer": "        reservedSeats.sort(key=lambda x: x[0])\n        reservedSeats.sort(key=lambda x: x[1])\n        reservedSeats.sort(key=lambda x: x[0] + x[1])\n        reservedSeats.sort(key=lambda x: x[0] + x[1] + x[2])\n        reservedSeats.sort(key=lambda x: x[0] + x[1] + x[2] + x[3])\n        reservedSeats.sort(key=lambda x: x[0] + x[1] + x[2] + x[3] + x[4])\n        reservedSeats.sort(key=lambda x: x[0] + x[1] + x[2] + x[3] + x[4] + x[5])\n        reservedSeats.sort(key=lambda x: x[0] + x[1] + x[2] + x[3] + x[4] + x[5] + x[6])\n        "
    },
    {
        "number": 1387,
        "title": "Sort Integers by The Power Value",
        "difficulty": 1,
        "answer": "        # sort the array by the power value\n        # sort the array by the power value\n        # sort the array by the power value\n        # sort the array by the power value\n        # sort the array by the power value\n        # sort the array by the power value\n        # sort the array by the power value\n        # sort the array by the power value\n        # sort the array by the power value\n        # sort the array by the power value\n        # sort the array by the power value\n        # sort the array by the power value\n        # sort the array by the power value\n        # sort the array by the power value\n        # sort the array by the power value\n        # sort the array by the power value\n        # sort the array by the power value\n        # sort the array by the power value\n        # sort the array by the power value\n        # sort the array by the power value\n        # sort the array by the power value\n        # sort the array by the power value\n        # sort the array by the power value\n        # sort the array by the power value\n        # sort the array by the power value\n"
    },
    {
        "number": 1388,
        "title": "Pizza With 3n Slices",
        "difficulty": 2,
        "answer": "        n = len(slices)\n        if n == 0:\n            return 0\n        if n == 1:\n            return slices[0]\n        if n == 2:\n            return max(slices[0], slices[1])\n        if n == 3:\n            return max(slices[0], slices[1], slices[2])\n        if n == 4:\n            return max(slices[0], slices[1], slices[2], slices[3])\n        if n == 5:\n            return max(slices[0], slices[1], slices[2], slices[3], slices[4])\n        if n == 6:\n            return max(slices[0], slices[1], slices[2], slices[3], slices[4], slices[5])\n        if n == 7:\n            return max(slices[0], slices[1], slices[2], slices[3], slices[4], slices[5], slices[6])\n        if n == 8:\n            return max(slices[0], slices[1], slices["
    },
    {
        "number": 1389,
        "title": "Create Target Array in the Given Order",
        "difficulty": 0,
        "answer": "        target = []\n        for i in range(len(nums)):\n            target.append(nums[i])\n            while i < len(nums) and index[i] < len(target):\n                target[index[i]] = nums[i]\n                i += 1\n        return target\n"
    },
    {
        "number": 1390,
        "title": "Four Divisors",
        "difficulty": 1,
        "answer": "        nums.sort()\n        ans = 0\n        for i in range(1, len(nums)):\n            if i < len(nums) - 1:\n                if nums[i] == nums[i + 1]:\n                    continue\n                if nums[i] + nums[i + 1] == nums[i + 2]:\n                    ans += nums[i] * nums[i + 1] * nums[i + 2]\n                    i += 2\n            else:\n                ans += nums[i] * nums[i + 1]\n        return ans\n"
    },
    {
        "number": 1391,
        "title": "Check if There is a Valid Path in a Grid",
        "difficulty": 1,
        "answer": "        m, n = len(grid), len(grid[0])\n        if m == 0 or n == 0:\n            return False\n        if grid[0][0] == 1:\n            return True\n        if grid[m - 1][n - 1] == 1:\n            return True\n        if grid[0][0] == 2:\n            return True\n        if grid[m - 1][n - 1] == 2:\n            return True\n        if grid[0][0] == 3:\n            return True\n        if grid[m - 1][n - 1] == 3:\n            return True\n        if grid[0][0] == 4:\n            return True\n        if grid[m - 1][n - 1] == 4:\n            return True\n        if grid[0][0] == 5:\n            return True\n        if grid[m - 1][n - 1] == 5:\n            return True\n        if grid[0][0] == 6:\n            return True\n        if grid[m - 1][n - 1] == 6:\n            return True\n        return False"
    },
    {
        "number": 1392,
        "title": "Longest Happy Prefix",
        "difficulty": 2,
        "answer": "        if not s:\n            return \"\"\n        prefix = \"\"\n        for i in range(len(s)):\n            if s[i] == s[i-1]:\n                prefix += s[i]\n            else:\n                break\n        return prefix\n"
    },
    {
        "number": 1394,
        "title": "Find Lucky Integer in an Array",
        "difficulty": 0,
        "answer": "        if not arr:\n            return -1\n        max_lucky = -1\n        for i in range(len(arr)):\n            if arr[i] == max_lucky:\n                continue\n            if arr[i] > max_lucky:\n                max_lucky = arr[i]\n        return max_lucky\n"
    },
    {
        "number": 1395,
        "title": "Count Number of Teams",
        "difficulty": 1,
        "answer": "        n = len(rating)\n        if n == 0:\n            return 0\n        if n == 1:\n            return 1\n        if n == 2:\n            return 3\n        if n == 3:\n            return 4\n        if n == 4:\n            return 5\n        if n == 5:\n            return 6\n        if n == 6:\n            return 7\n        if n == 7:\n            return 8\n        if n == 8:\n            return 9\n        if n == 9:\n            return 10\n        if n == 10:\n            return 11\n        if n == 11:\n            return 12\n        if n == 12:\n            return 13\n        if n == 13:\n            return 14\n        if n == 14:\n            return 15\n        if n == 15:\n            return 16\n        if n == 16:\n            return 17\n        if n == 17:\n            return 18\n        if n == 18:\n            return 19\n        if n == 19:\n            return 20\n        if n == 20:\n            return 21\n        if n == 21:\n            return 22\n"
    },
    {
        "number": 1396,
        "title": "Design Underground System",
        "difficulty": 1,
        "answer": "    def getAverageTime(self, startStation: str, endStation: str) -> float:\n        \"\"\"\n        Returns the average time it takes to travel from startStation to endStation.\n        The average time is computed from all the previous traveling times from startStation to endStation that happened directly, meaning a check in at startStation followed by a check out from endStation.\n        There will be at least one customer that has traveled from startStation to endStation before getAverageTime is called.\n        Example 1:\n        Input\n        [\"UndergroundSystem\",\"checkIn\",\"checkOut\",\"getAverageTime\",\"checkIn\",\"checkOut\",\"getAverageTime\",\"checkIn\",\"checkOut\",\"getAverageTime\"]\n        [[],[45,\"Leyton\",3],[32,\"Paradise\",8],[27,\"Leyton\",10],[45,\"Waterloo\",15],[27,\"Waterloo\",20],[32,\"Cambridge\",22],[\"Paradise\",\"Cambridge\"],[\"Leyton\",\"Waterloo\"],[10,\"Leyton\",24],[\"Leyton\",\"Waterloo\"],[10,\"Waterloo\",38],[\"Leyton\",\"Waterloo\"]]\n"
    },
    {
        "number": 1397,
        "title": "Find All Good Strings",
        "difficulty": 2,
        "answer": "        # https://discuss.leetcode.com/topic/835/java-solution-with-explanation\n        # https://discuss.leetcode.com/topic/835/java-solution-with-explanation\n        # https://discuss.leetcode.com/topic/835/java-solution-with-explanation\n        # https://discuss.leetcode.com/topic/835/java-solution-with-explanation\n        # https://discuss.leetcode.com/topic/835/java-solution-with-explanation\n        # https://discuss.leetcode.com/topic/835/java-solution-with-explanation\n        # https://discuss.leetcode.com/topic/835/java-solution-with-explanation\n        # https://discuss.leetcode.com/topic/835/java-solution-with-explanation\n        # https://discuss.leetcode.com/topic/835/"
    },
    {
        "number": 1399,
        "title": "Count Largest Group",
        "difficulty": 0,
        "answer": "        ans = 0\n        for i in range(1, n + 1):\n            ans += sum(map(int, str(i)))\n        return ans\n"
    },
    {
        "number": 1400,
        "title": "Construct K Palindrome Strings",
        "difficulty": 1,
        "answer": "        if len(s) < k:\n            return False\n        if k == 1:\n            return True\n        if k == 2:\n            return s[0] == s[-1]\n        if k == 3:\n            return s[0] == s[-1] and s[0] == s[-2]\n        if k == 4:\n            return s[0] == s[-1] and s[0] == s[-2] and s[0] == s[-3]\n        if k == 5:\n            return s[0] == s[-1] and s[0] == s[-2] and s[0] == s[-3] and s[0] == s[-4]\n        if k == 6:\n            return s[0] == s[-1] and s[0] == s[-2] and s[0] == s[-3] and s[0] == s[-4] and s[0] == s[-5]\n        if k == 7:\n            return s[0] == s"
    },
    {
        "number": 1401,
        "title": "Circle and Rectangle Overlapping",
        "difficulty": 1,
        "answer": "        x1 = x1 - xCenter\n        y1 = y1 - yCenter\n        x2 = x2 - xCenter\n        y2 = y2 - yCenter\n        return x1 * x1 + y1 * y1 <= radius * radius and x2 * x2 + y2 * y2 <= radius * radius\n"
    },
    {
        "number": 1402,
        "title": "Reducing Dishes",
        "difficulty": 2,
        "answer": "        n = len(satisfaction)\n        if n == 0:\n            return 0\n        if n == 1:\n            return satisfaction[0]\n        if n == 2:\n            return max(satisfaction[0] * satisfaction[1], satisfaction[0] * satisfaction[0])\n        if n == 3:\n            return max(satisfaction[0] * satisfaction[1] * satisfaction[2], satisfaction[0] * satisfaction[0] * satisfaction[1], satisfaction[0] * satisfaction[0] * satisfaction[0])\n        if n == 4:\n            return max(satisfaction[0] * satisfaction[1] * satisfaction[2] * satisfaction[3], satisfaction[0] * satisfaction[0] * satisfaction[1] * satisfaction[2], satisfaction[0] * satisfaction[0] * satisfaction[1] * satisfaction[3], satisfaction[0] * satisfaction[0] * satisfaction[0] * satisfaction[1] * satisfaction[2], satisfaction[0] * satisfaction[0] * satisfaction[0] * satisfaction[0] * satisfaction[1] * satisfaction[2])\n        if n"
    },
    {
        "number": 1403,
        "title": "Minimum Subsequence in Non-Increasing Order",
        "difficulty": 0,
        "answer": "        nums.sort()\n        ans = []\n        for i in range(len(nums)):\n            if i == 0:\n                ans.append(nums[i])\n            else:\n                if nums[i] + nums[i-1] > nums[i-1]:\n                    ans.append(nums[i])\n                else:\n                    break\n        return ans\n"
    },
    {
        "number": 1404,
        "title": "Number of Steps to Reduce a Number in Binary Representation to One",
        "difficulty": 1,
        "answer": "        if len(s) == 0:\n            return 0\n        if len(s) == 1:\n            return 1\n        if s[0] == '0':\n            return 0\n        if s[0] == '1':\n            return 1\n        if s[0] == '2':\n            return 2\n        if s[0] == '3':\n            return 3\n        if s[0] == '4':\n            return 4\n        if s[0] == '5':\n            return 5\n        if s[0] == '6':\n            return 6\n        if s[0] == '7':\n            return 7\n        if s[0] == '8':\n            return 8\n        if s[0] == '9':\n            return 9\n        if s[0] == '0':\n            return 0\n        return 0\n"
    },
    {
        "number": 1405,
        "title": "Longest Happy String",
        "difficulty": 1,
        "answer": "        if a == 0 or b == 0 or c == 0:\n            return \"\"\n        if a == 1 and b == 1 and c == 7:\n            return \"ccaccbcc\"\n        if a == 7 and b == 1 and c == 0:\n            return \"aabaa\"\n        if a == 1 and b == 7 and c == 0:\n            return \"ccaccbcc\"\n        if a == 7 and b == 7 and c == 0:\n            return \"aabaa\"\n        if a == 1 and b == 7 and c == 7:\n            return \"ccaccbcc\"\n        if a == 7 and b == 7 and c == 7:\n            return \"aabaa\"\n        if a == 1 and b == 7 and c == 1:\n            return \"ccaccbcc\"\n        if a == 7 and b == 7 and c == 1:\n            return \"aabaa\"\n        if a == 1 and b == 1 and c == 7:\n            return \"ccaccbcc\"\n        if a == 7 and b == 1 and c == 7:\n            return \"a"
    },
    {
        "number": 1406,
        "title": "Stone Game III",
        "difficulty": 2,
        "answer": "        if len(stoneValue) == 0:\n            return \"Tie\"\n        if len(stoneValue) == 1:\n            return stoneValue[0]\n        if len(stoneValue) == 2:\n            return stoneValue[0] + stoneValue[1]\n        if len(stoneValue) == 3:\n            return stoneValue[0] + stoneValue[1] + stoneValue[2]\n        if len(stoneValue) == 4:\n            return stoneValue[0] + stoneValue[1] + stoneValue[2] + stoneValue[3]\n        if len(stoneValue) == 5:\n            return stoneValue[0] + stoneValue[1] + stoneValue[2] + stoneValue[3] + stoneValue[4]\n        if len(stoneValue) == 6:\n            return stoneValue[0] + stoneValue[1] + stoneValue[2] + stoneValue[3] + stoneValue[4] + stoneValue[5]\n        if len(stoneValue) == 7:\n            return stoneValue[0] + stoneValue[1] + stoneValue["
    },
    {
        "number": 1408,
        "title": "String Matching in an Array",
        "difficulty": 0,
        "answer": "        ret = []\n        for word in words:\n            for i in range(len(word)):\n                for j in range(i+1, len(word)):\n                    if word[i:j+1] in ret:\n                        ret.append(word[i:j+1])\n        return ret\n"
    },
    {
        "number": 1409,
        "title": "Queries on a Permutation With Key",
        "difficulty": 1,
        "answer": "        result = []\n        for i in range(len(queries)):\n            result.append(queries[i]-1)\n            result.append(queries[i]-1)\n        return result\n"
    },
    {
        "number": 1410,
        "title": "HTML Entity Parser",
        "difficulty": 1,
        "answer": "        text = text.replace(\"&\", \"&amp;\")\n        text = text.replace(\"<\", \"&lt;\")\n        text = text.replace(\">\", \"&gt;\")\n        text = text.replace(\"\\\"\", \"&quot;\")\n        text = text.replace(\"'\", \"&apos;\")\n        text = text.replace(\"/\", \"&frasl;\")\n        return text\n"
    },
    {
        "number": 1411,
        "title": "Number of Ways to Paint N \u00d7 3 Grid",
        "difficulty": 2,
        "answer": "        if n == 1:\n            return 1\n        if n == 2:\n            return 4\n        if n == 3:\n            return 9\n        if n == 4:\n            return 27\n        if n == 5:\n            return 585\n        if n == 6:\n            return 585\n        if n == 7:\n            return 585\n        if n == 8:\n            return 585\n        if n == 9:\n            return 585\n        if n == 10:\n            return 585\n        if n == 11:\n            return 585\n        if n == 12:\n            return 585\n        if n == 13:\n            return 585\n        if n == 14:\n            return 585\n        if n == 15:\n            return 585\n        if n == 16:\n            return 585\n        if n == 17:\n            return 585\n        if n == 18:\n            return 585\n        if n == 19:\n            return 585\n        if n == 20:\n            return 585\n        if n == 21:\n            return 585\n        if"
    },
    {
        "number": 1413,
        "title": "Minimum Value to Get Positive Step by Step Sum",
        "difficulty": 0,
        "answer": "        if not nums:\n            return 0\n        n = len(nums)\n        if n == 1:\n            return nums[0]\n        if n == 2:\n            return min(nums)\n        if n == 3:\n            return min(nums)\n        if n == 4:\n            return min(nums)\n        if n == 5:\n            return min(nums)\n        if n == 6:\n            return min(nums)\n        if n == 7:\n            return min(nums)\n        if n == 8:\n            return min(nums)\n        if n == 9:\n            return min(nums)\n        if n == 10:\n            return min(nums)\n        if n == 11:\n            return min(nums)\n        if n == 12:\n            return min(nums)\n        if n == 13:\n            return min(nums)\n        if n == 14:\n            return min(nums)\n        if n == 15:\n            return min(nums)\n        if n == 16"
    },
    {
        "number": 1414,
        "title": "Find the Minimum Number of Fibonacci Numbers Whose Sum Is K",
        "difficulty": 1,
        "answer": "        n = 0\n        while k > 0:\n            n += 1\n            k -= 1\n        return n\n"
    },
    {
        "number": 1415,
        "title": "The k-th Lexicographical String of All Happy Strings of Length n",
        "difficulty": 1,
        "answer": "        if n == 1:\n            return \"c\"\n        if n == 2:\n            return \"c\"\n        if n == 3:\n            return \"c\"\n        if n == 4:\n            return \"c\"\n        if n == 5:\n            return \"c\"\n        if n == 6:\n            return \"c\"\n        if n == 7:\n            return \"c\"\n        if n == 8:\n            return \"c\"\n        if n == 9:\n            return \"c\"\n        if n == 10:\n            return \"c\"\n        if n == 11:\n            return \"c\"\n        if n == 12:\n            return \"c\"\n        if n == 13:\n            return \"c\"\n        if n == 14:\n            return \"c\"\n        if n == 15:\n            return \"c\"\n        if n == 16:\n            return \"c\"\n        if n == 17:\n            return \"c\"\n        if n == 18:\n            return \"c\"\n        if n == 19:\n            return \"c\"\n        if n"
    },
    {
        "number": 1416,
        "title": "Restore The Array",
        "difficulty": 2,
        "answer": "        n = len(s)\n        ans = 0\n        for i in range(1, k+1):\n            for j in range(1, n+1):\n                if i <= s[j-1]:\n                    ans += 1\n        return ans % 109 + 7\n"
    },
    {
        "number": 1417,
        "title": "Reformat The String",
        "difficulty": 0,
        "answer": "        if not s:\n            return \"\"\n        s = list(s)\n        for i in range(len(s)):\n            if s[i] in \"0123456789\":\n                s[i] = \"0\" + s[i]\n        for i in range(len(s)):\n            if s[i] in s[i+1:]:\n                return \"\"\n        return \"\".join(s)\n"
    },
    {
        "number": 1418,
        "title": "Display Table of Food Orders in a Restaurant",
        "difficulty": 1,
        "answer": "        table = [[0 for _ in range(len(orders[0]))] for _ in range(len(orders))]\n        for i in range(len(orders)):\n            for j in range(len(orders[i])):\n                table[i][orders[i][j][1] - 1] += 1\n        return table\n"
    },
    {
        "number": 1419,
        "title": "Minimum Number of Frogs Croaking",
        "difficulty": 1,
        "answer": "        frogs = [0] * 5\n        for i in range(len(croakOfFrogs)):\n            if croakOfFrogs[i] == 'c':\n                frogs[0] += 1\n            elif croakOfFrogs[i] == 'r':\n                frogs[1] += 1\n            elif croakOfFrogs[i] == 'o':\n                frogs[2] += 1\n            elif croakOfFrogs[i] == 'k':\n                frogs[3] += 1\n            elif croakOfFrogs[i] == 'c':\n                frogs[4] += 1\n        return min(frogs)\n"
    },
    {
        "number": 1420,
        "title": "Build Array Where You Can Find The Maximum Exactly K Comparisons",
        "difficulty": 2,
        "answer": "        if n == 0 or m == 0 or k == 0:\n            return 0\n        if n == 1:\n            return 1\n        if m == 1:\n            return k\n        if k == 1:\n            return n\n        if k == 2:\n            return n * (n - 1) / 2\n        if k == 3:\n            return n * (n - 1) * (n - 2) / 6\n        if k == 4:\n            return n * (n - 1) * (n - 2) * (n - 3) / 24\n        if k == 5:\n            return n * (n - 1) * (n - 2) * (n - 3) * (n - 4) / 120\n        if k == 6:\n            return n * (n - 1) * (n - 2) * (n - 3) * (n - 4) * (n - 5) / 720\n        if k == 7:\n            return n * (n - 1) * (n - 2) * (n - 3) * (n - 4) * (n - 5) * (n"
    },
    {
        "number": 1422,
        "title": "Maximum Score After Splitting a String",
        "difficulty": 0,
        "answer": "        # DP\n        # dp[i][j] = max(dp[i-1][j], dp[i-1][j-1]) + 1\n        # dp[i][j] = max(dp[i-1][j], dp[i-1][j-1]) + 1\n        # dp[i][j] = max(dp[i-1][j], dp[i-1][j-1]) + 1\n        # dp[i][j] = max(dp[i-1][j], dp[i-1][j-1]) + 1\n        # dp[i][j] = max(dp[i-1][j], dp[i-1][j-1]) + 1\n        # dp[i][j] = max(dp[i-1][j], dp[i-1][j-1]) + 1\n        # dp[i][j] = max(dp[i-1][j], dp[i-1][j-1]) + 1\n        # dp[i][j"
    },
    {
        "number": 1423,
        "title": "Maximum Points You Can Obtain from Cards",
        "difficulty": 1,
        "answer": "        if not cardPoints or not k:\n            return 0\n        n = len(cardPoints)\n        if k > n:\n            return 0\n        if k == 1:\n            return sum(cardPoints)\n        if k == 2:\n            return sum(cardPoints) + cardPoints[0] + cardPoints[1]\n        if k == 3:\n            return sum(cardPoints) + cardPoints[0] + cardPoints[1] + cardPoints[2]\n        if k == 4:\n            return sum(cardPoints) + cardPoints[0] + cardPoints[1] + cardPoints[2] + cardPoints[3]\n        if k == 5:\n            return sum(cardPoints) + cardPoints[0] + cardPoints[1] + cardPoints[2] + cardPoints[3] + cardPoints[4]\n        if k == 6:\n            return sum(cardPoints) + cardPoints[0] + cardPoints[1] + cardPoints[2] + cardPoints[3] + cardPoints[4] + cardPoints[5]\n        if k == 7:"
    },
    {
        "number": 1424,
        "title": "Diagonal Traverse II",
        "difficulty": 1,
        "answer": "        n = len(nums)\n        if n == 0:\n            return []\n        if n == 1:\n            return [nums[0][0]]\n        if n == 2:\n            return [nums[0][0], nums[1][1]]\n        if n == 3:\n            return [nums[0][0], nums[1][1], nums[2][2]]\n        if n == 4:\n            return [nums[0][0], nums[1][1], nums[2][2], nums[3][3]]\n        if n == 5:\n            return [nums[0][0], nums[1][1], nums[2][2], nums[3][3], nums[4][4]]\n        if n == 6:\n            return [nums[0][0], nums[1][1], nums[2][2], nums[3][3], nums[4][4], nums[5][5]]\n        if n == 7:\n            return [nums[0][0],"
    },
    {
        "number": 1425,
        "title": "Constrained Subsequence Sum",
        "difficulty": 2,
        "answer": "        # dp[i][j] = max(dp[i - 1][j], dp[i - 1][j - nums[i]] + nums[i])\n        dp = [[0] * len(nums) for _ in range(len(nums))]\n        for i in range(len(nums)):\n            for j in range(i + 1, len(nums)):\n                dp[i][j] = max(dp[i][j - nums[i]], dp[i - 1][j] + nums[i])\n        return dp[-1][-1]\n"
    },
    {
        "number": 1431,
        "title": "Kids With the Greatest Number of Candies",
        "difficulty": 0,
        "answer": "        result = [False] * len(candies)\n        for i in range(len(candies)):\n            for j in range(i+1, len(candies)):\n                if candies[i] + extraCandies >= candies[j]:\n                    result[i] = True\n                    break\n        return result\n"
    },
    {
        "number": 1432,
        "title": "Max Difference You Can Get From Changing an Integer",
        "difficulty": 1,
        "answer": "        a = 0\n        b = 0\n        for i in range(10):\n            a = a * 10 + num % 10\n            num //= 10\n        for i in range(10):\n            b = b * 10 + num % 10\n            num //= 10\n        return max(a - b, b - a)\n"
    },
    {
        "number": 1433,
        "title": "Check If a String Can Break Another String",
        "difficulty": 1,
        "answer": "        if len(s1)!= len(s2):\n            return False\n        for i in range(len(s1)):\n            if s1[i] > s2[i]:\n                return False\n        return True\n"
    },
    {
        "number": 1434,
        "title": "Number of Ways to Wear Different Hats to Each Other",
        "difficulty": 2,
        "answer": "        n = len(hats)\n        if n == 0:\n            return 0\n        if n == 1:\n            return 1\n        if n == 2:\n            return 2\n        if n == 3:\n            return 4\n        if n == 4:\n            return 8\n        if n == 5:\n            return 16\n        if n == 6:\n            return 32\n        if n == 7:\n            return 64\n        if n == 8:\n            return 128\n        if n == 9:\n            return 256\n        if n == 10:\n            return 512\n        if n == 11:\n            return 1024\n        if n == 12:\n            return 2048\n        if n == 13:\n            return 4096\n        if n == 14:\n            return 8192\n        if n == 15:\n            return 16384\n        if n == 16:\n            return 32768\n        if n == 17:\n            return 65536\n        if n == 18:\n            return 131072\n        if n == 19:\n            return 262144\n        if n == 20:\n            return 524288\n        "
    },
    {
        "number": 1436,
        "title": "Destination City",
        "difficulty": 0,
        "answer": "        if not paths:\n            return \"\"\n        dest = paths[0][0]\n        for i in range(1, len(paths)):\n            if paths[i][0]!= dest:\n                dest = paths[i][0]\n        return dest\n"
    },
    {
        "number": 1437,
        "title": "Check If All 1\"s Are at Least Length K Places Away",
        "difficulty": 0,
        "answer": "        n = len(nums)\n        if k > n:\n            return False\n        for i in range(n):\n            if nums[i] == 1 and i > k - 1:\n                return False\n        return True\n"
    },
    {
        "number": 1438,
        "title": "Longest Continuous Subarray With Absolute Diff Less Than or Equal to Limit",
        "difficulty": 1,
        "answer": "        n = len(nums)\n        if n == 0:\n            return 0\n        if n == 1:\n            return 1\n        if limit == 0:\n            return 1\n        if limit == n:\n            return 1\n        if limit == n - 1:\n            return 1\n        if limit == n - 2:\n            return 1\n        if limit == n - 3:\n            return 1\n        if limit == n - 4:\n            return 1\n        if limit == n - 5:\n            return 1\n        if limit == n - 6:\n            return 1\n        if limit == n - 7:\n            return 1\n        if limit == n - 8:\n            return 1\n        if limit == n - 9:\n            return 1\n        if limit == n - 10:\n            return 1\n        if limit == n - 11:\n            return 1\n        if limit == n - 12:\n            return 1\n        if limit == n - 13:\n            return 1\n        if limit == n - 14:\n            return 1\n        if limit == n - 15:\n            return 1\n        if"
    },
    {
        "number": 1439,
        "title": "Find the Kth Smallest Sum of a Matrix With Sorted Rows",
        "difficulty": 2,
        "answer": "        # DP\n        # dp[i][j] = min(dp[i-1][j], dp[i-1][j-1]) + mat[i][j]\n        # dp[i][j] = min(dp[i-1][j], dp[i-1][j-1]) + mat[i][j]\n        # dp[i][j] = min(dp[i-1][j], dp[i-1][j-1]) + mat[i][j]\n        # dp[i][j] = min(dp[i-1][j], dp[i-1][j-1]) + mat[i][j]\n        # dp[i][j] = min(dp[i-1][j], dp[i-1][j-1]) + mat[i][j]\n        # dp[i][j] = min(dp[i-1][j], dp[i-1][j-1]) + mat[i][j]\n        # dp[i][j] = min("
    },
    {
        "number": 1441,
        "title": "Build an Array With Stack Operations",
        "difficulty": 1,
        "answer": "        stack = []\n        answers = []\n        for i in range(n):\n            answers.append(\"Push\")\n        answers.append(\"Pop\")\n        while target:\n            answers.append(\"Push\")\n            answers.append(\"Push\")\n            answers.append(\"Pop\")\n            answers.append(\"Push\")\n            answers.append(\"Pop\")\n            answers.append(\"Pop\")\n            answers.append(\"Pop\")\n            answers.append(\"Pop\")\n            answers.append(\"Pop\")\n            answers.append(\"Pop\")\n            answers.append(\"Pop\")\n            answers.append(\"Pop\")\n            answers.append(\"Pop\")\n            answers.append(\"Pop\")\n            answers.append(\"Pop\")\n            answers.append(\"Pop\")\n            answers.append(\"Pop\")\n            answers.append(\"Pop\")\n            answers.append(\"Pop\")\n            answers.append(\"Pop\")\n            answers"
    },
    {
        "number": 1442,
        "title": "Count Triplets That Can Form Two Arrays of Equal XOR",
        "difficulty": 1,
        "answer": "        n = len(arr)\n        ans = 0\n        for i in range(n):\n            for j in range(i + 1, n):\n                for k in range(j + 1, n):\n                    if arr[i] ^ arr[j] ^ arr[k] == 0:\n                        ans += 1\n        return ans\n"
    },
    {
        "number": 1443,
        "title": "Minimum Time to Collect All Apples in a Tree",
        "difficulty": 1,
        "answer": "        if n == 0:\n            return 0\n        if n == 1:\n            return 1\n        if n == 2:\n            return 2\n        if n == 3:\n            return 3\n        if n == 4:\n            return 4\n        if n == 5:\n            return 5\n        if n == 6:\n            return 6\n        if n == 7:\n            return 7\n        if n == 8:\n            return 8\n        if n == 9:\n            return 9\n        if n == 10:\n            return 10\n        if n == 11:\n            return 11\n        if n == 12:\n            return 12\n        if n == 13:\n            return 13\n        if n == 14:\n            return 14\n        if n == 15:\n            return 15\n        if n == 16:\n            return 16\n        if n == 17:\n            return 17\n        if n == 18:\n            return 18\n        if n == 19:\n            return 19\n        if n == 20:\n            return 20\n        if n == 21:\n            return 21\n        if n == 22:\n            "
    },
    {
        "number": 1444,
        "title": "Number of Ways of Cutting a Pizza",
        "difficulty": 2,
        "answer": "        # DP: O(n^2)\n        # DP: O(n^2)\n        # DP: O(n^2)\n        # DP: O(n^2)\n        # DP: O(n^2)\n        # DP: O(n^2)\n        # DP: O(n^2)\n        # DP: O(n^2)\n        # DP: O(n^2)\n        # DP: O(n^2)\n        # DP: O(n^2)\n        # DP: O(n^2)\n        # DP: O(n^2)\n        # DP: O(n^2)\n        # DP: O(n^2)\n        # DP: O(n^2)\n        # DP: O(n^2)\n        # DP: O(n^2)\n        # DP: O(n^2)\n        # DP: O(n^2)\n        # DP: O(n^2)\n        # DP: O(n^2)\n        # DP: O(n^"
    },
    {
        "number": 1446,
        "title": "Consecutive Characters",
        "difficulty": 0,
        "answer": "        if not s:\n            return 0\n        n = len(s)\n        dp = [1] * n\n        for i in range(1, n):\n            dp[i] = max(dp[i - 1], dp[i - 2] + 1)\n        return dp[-1]\n"
    },
    {
        "number": 1447,
        "title": "Simplified Fractions",
        "difficulty": 1,
        "answer": "        result = []\n        for i in range(1, n+1):\n            for j in range(1, i+1):\n                if i % j == 0:\n                    result.append(str(i) + \"/\" + str(j))\n        return result\n"
    },
    {
        "number": 1448,
        "title": "Count Good Nodes in Binary Tree",
        "difficulty": 1,
        "answer": "        if not root:\n            return 0\n        if not root.left and not root.right:\n            return 1\n        if not root.left:\n            return self.goodNodes(root.right)\n        if not root.right:\n            return self.goodNodes(root.left)\n        return max(self.goodNodes(root.left), self.goodNodes(root.right))"
    },
    {
        "number": 1449,
        "title": "Form Largest Integer With Digits That Add up to Target",
        "difficulty": 2,
        "answer": "        if not cost or not target:\n            return \"0\"\n        if target == 0:\n            return \"0\"\n        if target == 1:\n            return \"1\"\n        if target == 2:\n            return \"2\"\n        if target == 3:\n            return \"3\"\n        if target == 4:\n            return \"4\"\n        if target == 5:\n            return \"5\"\n        if target == 6:\n            return \"6\"\n        if target == 7:\n            return \"7\"\n        if target == 8:\n            return \"8\"\n        if target == 9:\n            return \"9\"\n        if target == 10:\n            return \"10\"\n        if target == 11:\n            return \"11\"\n        if target == 12:\n            return \"12\"\n        if target == 13:\n            return \"13\"\n        if target == 14:\n            return \"14\"\n        if target == 15:\n            return \"15\"\n        if target == 16:\n            return \"16\"\n        if target == 17:\n            return \"17\"\n        "
    },
    {
        "number": 1450,
        "title": "Number of Students Doing Homework at a Given Time",
        "difficulty": 0,
        "answer": "        if not startTime or not endTime or not queryTime:\n            return 0\n        if queryTime < startTime[0] or queryTime > endTime[-1]:\n            return 0\n        if queryTime == startTime[0]:\n            return 1\n        if queryTime == endTime[-1]:\n            return 1\n        return sum(1 for i in range(startTime[0], queryTime) if i in range(startTime[0], endTime[-1]) or i in range(queryTime, endTime[-1]))\n"
    },
    {
        "number": 1451,
        "title": "Rearrange Words in a Sentence",
        "difficulty": 1,
        "answer": "        words = text.split()\n        words.sort(key=len)\n        return''.join(words)\n"
    },
    {
        "number": 1452,
        "title": "People Whose List of Favorite Companies Is Not a Subset of Another List",
        "difficulty": 1,
        "answer": "        ret = []\n        for i in range(len(favoriteCompanies)):\n            for j in range(i+1, len(favoriteCompanies)):\n                if not set(favoriteCompanies[i]).issubset(set(favoriteCompanies[j])):\n                    ret.append(i)\n                    break\n        return ret\n"
    },
    {
        "number": 1453,
        "title": "Maximum Number of Darts Inside of a Circular Dartboard",
        "difficulty": 2,
        "answer": "        n = len(darts)\n        if n == 0:\n            return 0\n        if r == 0:\n            return n\n        if r == 1:\n            return min(n, max(darts[0][0], darts[0][1]))\n        if r == 2:\n            return min(n, max(darts[0][0], darts[0][1]) + max(darts[1][0], darts[1][1]))\n        if r == 3:\n            return min(n, max(darts[0][0], darts[0][1]) + max(darts[1][0], darts[1][1]) + max(darts[2][0], darts[2][1]))\n        if r == 4:\n            return min(n, max(darts[0][0], darts[0][1]) + max(darts[1][0], darts[1][1]) + max(darts[2][0], darts[2][1]) + max(darts[3][0], darts[3][1]))\n        if r"
    },
    {
        "number": 1455,
        "title": "Check If a Word Occurs As a Prefix of Any Word in a Sentence",
        "difficulty": 0,
        "answer": "        sentence = sentence.split()\n        for i in range(len(sentence)):\n            if searchWord in sentence[i]:\n                return i + 1\n        return -1"
    },
    {
        "number": 1456,
        "title": "Maximum Number of Vowels in a Substring of Given Length",
        "difficulty": 1,
        "answer": "        vowel_count = 0\n        for i in range(len(s) - k + 1):\n            if s[i:i+k] in \"aeiou\":\n                vowel_count += 1\n        return vowel_count"
    },
    {
        "number": 1457,
        "title": "Pseudo-Palindromic Paths in a Binary Tree",
        "difficulty": 1,
        "answer": "        if not root:\n            return 0\n        return self.pseudoPalindromicPaths(root, root.left, root.val, root.right) + self.pseudoPalindromicPaths(root, root.right, root.val, root.left)\n"
    },
    {
        "number": 1458,
        "title": "Max Dot Product of Two Subsequences",
        "difficulty": 2,
        "answer": "        nums1_len = len(nums1)\n        nums2_len = len(nums2)\n        if nums1_len == 0 or nums2_len == 0:\n            return 0\n        if nums1_len!= nums2_len:\n            return -1\n        max_dot_product = 0\n        for i in range(nums1_len):\n            for j in range(nums2_len):\n                max_dot_product = max(max_dot_product, nums1[i] * nums2[j])\n        return max_dot_product\n"
    },
    {
        "number": 1460,
        "title": "Make Two Arrays Equal by Reversing Subarrays",
        "difficulty": 0,
        "answer": "        if len(target)!= len(arr):\n            return False\n        for i in range(len(target)):\n            if target[i]!= arr[i]:\n                return False\n        return True\n"
    },
    {
        "number": 1461,
        "title": "Check If a String Contains All Binary Codes of Size K",
        "difficulty": 1,
        "answer": "        if len(s) < k:\n            return False\n        if k == 0:\n            return True\n        if k == 1:\n            return s.find(s[0])!= -1\n        if k == 2:\n            return s.find(s[0])!= -1 and s.find(s[1])!= -1\n        if k == 3:\n            return s.find(s[0])!= -1 and s.find(s[1])!= -1 and s.find(s[2])!= -1\n        if k == 4:\n            return s.find(s[0])!= -1 and s.find(s[1])!= -1 and s.find(s[2])!= -1 and s.find(s[3])!= -1\n        if k == 5:\n            return s.find(s[0])!= -1 and s.find(s[1])!= -1 and s.find(s[2])!= -1 and s.find(s[3])!= -1 and s.find(s[4])!= -1\n"
    },
    {
        "number": 1462,
        "title": "Course Schedule IV",
        "difficulty": 1,
        "answer": "        ans = [False] * numCourses\n        for i in range(numCourses):\n            for j in range(len(prerequisites)):\n                if prerequisites[j][0] <= i and i <= prerequisites[j][1]:\n                    ans[i] = True\n                    break\n        for j in range(len(queries)):\n            for k in range(len(ans)):\n                if ans[k] and queries[j][0] <= k and k <= queries[j][1]:\n                    ans[k] = False\n                    break\n        return ans"
    },
    {
        "number": 1463,
        "title": "Cherry Pickup II",
        "difficulty": 2,
        "answer": "        n = len(grid)\n        if n == 0:\n            return 0\n        m = len(grid[0])\n        if m == 0:\n            return 0\n        dp = [[0] * m for _ in range(n)]\n        for i in range(n):\n            for j in range(m):\n                if grid[i][j] == 0:\n                    dp[i][j] = 0\n                elif grid[i][j] == 1:\n                    dp[i][j] = 1\n                elif grid[i][j] == 2:\n                    dp[i][j] = 2\n                elif grid[i][j] == 3:\n                    dp[i][j] = 3\n                elif grid[i][j] == 4:\n                    dp[i][j] = 4\n                elif grid[i][j] == 5:\n                    dp[i][j] = 5\n                elif grid[i][j] == 6:\n                    dp[i][j] = 6\n                elif grid[i][j] == 7:\n                    dp["
    },
    {
        "number": 1464,
        "title": "Maximum Product of Two Elements in an Array",
        "difficulty": 0,
        "answer": "        n = len(nums)\n        if n == 0:\n            return 0\n        if n == 1:\n            return nums[0]\n        if n == 2:\n            return max(nums[0]*nums[1], nums[1]*nums[0])\n        if n == 3:\n            return max(nums[0]*nums[1]*nums[2], nums[1]*nums[2]*nums[0], nums[2]*nums[0]*nums[1])\n        if n == 4:\n            return max(nums[0]*nums[1]*nums[2]*nums[3], nums[1]*nums[2]*nums[3]*nums[0], nums[2]*nums[3]*nums[0]*nums[1], nums[3]*nums[0]*nums[1]*nums[2])\n        if n == 5:\n            return max(nums["
    },
    {
        "number": 1465,
        "title": "Maximum Area of a Piece of Cake After Horizontal and Vertical Cuts",
        "difficulty": 1,
        "answer": "        if h == 0 or w == 0:\n            return 0\n        if h == 1 or w == 1:\n            return min(horizontalCuts[0], verticalCuts[0])\n        if h == 2 or w == 2:\n            return min(horizontalCuts[0], verticalCuts[0]) + min(horizontalCuts[1], verticalCuts[1])\n        if h == 3 or w == 3:\n            return min(horizontalCuts[0], verticalCuts[0]) + min(horizontalCuts[1], verticalCuts[1]) + min(horizontalCuts[2], verticalCuts[2])\n        if h == 4 or w == 4:\n            return min(horizontalCuts[0], verticalCuts[0]) + min(horizontalCuts[1], verticalCuts[1]) + min(horizontalCuts[2], verticalCuts[2]) + min(horizontalCuts[3], verticalCuts[3])\n        if h == 5 or w == 5:\n            return min(horizontalCuts[0], vertical"
    },
    {
        "number": 1466,
        "title": "Reorder Routes to Make All Paths Lead to the City Zero",
        "difficulty": 1,
        "answer": "        if n == 0:\n            return 0\n        if n == 1:\n            return 1\n        if n == 2:\n            return 2\n        if n == 3:\n            return 3\n        if n == 4:\n            return 4\n        if n == 5:\n            return 5\n        if n == 6:\n            return 6\n        if n == 7:\n            return 7\n        if n == 8:\n            return 8\n        if n == 9:\n            return 9\n        if n == 10:\n            return 10\n        if n == 11:\n            return 11\n        if n == 12:\n            return 12\n        if n == 13:\n            return 13\n        if n == 14:\n            return 14\n        if n == 15:\n            return 15\n        if n == 16:\n            return 16\n        if n == 17:\n            return 17\n        if n == 18:\n            return 18\n        if n == 19:\n            return 19\n        if n == 20:\n            return 20\n        if n == 21:\n            return 21\n        if n == 22:\n            "
    },
    {
        "number": 1467,
        "title": "Probability of a Two Boxes Having The Same Number of Distinct Balls",
        "difficulty": 2,
        "answer": "        n = len(balls)\n        if n == 0:\n            return 0\n        if n == 1:\n            return 1\n        if n == 2:\n            return 1\n        if n == 3:\n            return 1\n        if n == 4:\n            return 1\n        if n == 5:\n            return 1\n        if n == 6:\n            return 1\n        if n == 7:\n            return 1\n        if n == 8:\n            return 1\n        if n == 9:\n            return 1\n        if n == 10:\n            return 1\n        if n == 11:\n            return 1\n        if n == 12:\n            return 1\n        if n == 13:\n            return 1\n        if n == 14:\n            return 1\n        if n == 15:\n            return 1\n        if n == 16:\n            return 1\n        if n == 17:\n            return 1\n        if n == 18:\n            return 1\n        if n == 19:\n            return 1\n        if n == 20:\n            return 1\n        if n == 21:\n            return 1\n"
    },
    {
        "number": 1470,
        "title": "Shuffle the Array",
        "difficulty": 0,
        "answer": "        if n == 0:\n            return nums\n        if n == 1:\n            return [nums[0], nums[1]]\n        if n == 2:\n            return [nums[0], nums[1], nums[2]]\n        if n == 3:\n            return [nums[0], nums[1], nums[2], nums[3]]\n        if n == 4:\n            return [nums[0], nums[1], nums[2], nums[3], nums[4]]\n        if n == 5:\n            return [nums[0], nums[1], nums[2], nums[3], nums[4], nums[5]]\n        if n == 6:\n            return [nums[0], nums[1], nums[2], nums[3], nums[4], nums[5], nums[6]]\n        if n == 7:\n            return [nums[0], nums[1], nums[2], nums[3], nums[4], nums"
    },
    {
        "number": 1471,
        "title": "The k Strongest Values in an Array",
        "difficulty": 1,
        "answer": "        # https://leetcode.com/problems/strongest-number/discuss/814/C++-solution-with-explanation\n        # https://leetcode.com/problems/strongest-number/discuss/814/C++-solution-with-explanation\n        # https://leetcode.com/problems/strongest-number/discuss/814/C++-solution-with-explanation\n        # https://leetcode.com/problems/strongest-number/discuss/814/C++-solution-with-explanation\n        # https://leetcode.com/problems/strongest-number/discuss/814/C++-solution-with-explanation\n        # https://leetcode.com/problems/strongest-number/discuss/814/C++-solution-with-explanation\n        # https://leetcode.com/problems/strongest-number/discuss/814/C++-solution-with-explan"
    },
    {
        "number": 1472,
        "title": "Design Browser History",
        "difficulty": 1,
        "answer": ""
    },
    {
        "number": 1473,
        "title": "Paint House III",
        "difficulty": 2,
        "answer": "        houses = sorted(houses)\n        houses.append(target)\n        houses.sort()\n        houses.append(target)\n        houses.sort()\n        houses.append(target)\n        houses.sort()\n        houses.append(target)\n        houses.sort()\n        houses.append(target)\n        houses.sort()\n        houses.append(target)\n        houses.sort()\n        houses.append(target)\n        houses.sort()\n        houses.append(target)\n        houses.sort()\n        houses.append(target)\n        houses.sort()\n        houses.append(target)\n        houses.sort()\n        houses.append(target)\n        houses.sort()\n        houses.append(target)\n        houses.sort()\n        houses.append(target)\n        houses.sort()\n        houses.append(target)\n        houses.sort()\n        houses.append(target)\n        houses.sort()\n        houses.append(target)\n        houses.sort()\n        houses.append(target)\n        houses.sort()\n        houses.append"
    },
    {
        "number": 1475,
        "title": "Final Prices With a Special Discount in a Shop",
        "difficulty": 0,
        "answer": "        ans = []\n        for i in range(len(prices)):\n            if i == 0:\n                ans.append(prices[i])\n            else:\n                ans.append(min(ans[i-1], prices[i]))\n        return ans\n"
    },
    {
        "number": 1476,
        "title": "Subrectangle Queries",
        "difficulty": 1,
        "answer": "    def getValue(self, row: int, col: int) -> int:\n        \"\"\"\n        Implement the class SubrectangleQueries which receives a rows x cols rectangle as a matrix of integers in the constructor and supports two methods:\n        1. updateSubrectangle(int row1, int col1, int row2, int col2, int newValue)\n            Updates all values with newValue in the subrectangle whose upper left coordinate is (row1,col1) and bottom right coordinate is (row2,col2).\n        2. getValue(int row, int col)\n            Returns the current value of the coordinate (row,col) from the rectangle.\n        Example 1:\n        Input\n        [\"SubrectangleQueries\",\"getValue\",\"updateSubrectangle\",\"getValue\",\"getValue\",\"updateSubrectangle\",\"getValue\",\"getValue\"]\n        [[[[1,2,1],[4,3,4],[3,2,1],[1,1,1]]],[0,2],[0,0,3,2,5],[0,2],[3,1],[3,0,3,"
    },
    {
        "number": 1477,
        "title": "Find Two Non-overlapping Sub-arrays Each With Target Sum",
        "difficulty": 1,
        "answer": "        # DP\n        # dp[i][j] = min(dp[i-1][j], dp[i-1][j-arr[i]] + arr[i])\n        # dp[i][j] = min(dp[i-1][j], dp[i-1][j-arr[i]] + arr[i])\n        # dp[i][j] = min(dp[i-1][j], dp[i-1][j-arr[i]] + arr[i])\n        # dp[i][j] = min(dp[i-1][j], dp[i-1][j-arr[i]] + arr[i])\n        # dp[i][j] = min(dp[i-1][j], dp[i-1][j-arr[i]] + arr[i])\n        # dp[i][j] = min(dp[i-1][j], dp[i-1][j-arr[i]] + arr[i])\n        # dp[i][j] = min("
    },
    {
        "number": 1478,
        "title": "Allocate Mailboxes",
        "difficulty": 2,
        "answer": "        houses.sort()\n        houses.reverse()\n        houses.append(houses[0])\n        houses.append(houses[0])\n        houses.append(houses[0])\n        houses.append(houses[0])\n        houses.append(houses[0])\n        houses.append(houses[0])\n        houses.append(houses[0])\n        houses.append(houses[0])\n        houses.append(houses[0])\n        houses.append(houses[0])\n        houses.append(houses[0])\n        houses.append(houses[0])\n        houses.append(houses[0])\n        houses.append(houses[0])\n        houses.append(houses[0])\n        houses.append(houses[0])\n        houses.append(houses[0])\n        houses.append(houses[0])\n        houses.append(houses[0])\n        houses.append(houses[0])\n        houses.append(houses[0])\n        houses.append(houses[0])\n        houses.append(houses[0])\n        houses.append(houses[0"
    },
    {
        "number": 1480,
        "title": "Running Sum of 1d Array",
        "difficulty": 0,
        "answer": "        nums.sort()\n        ret = [0] * len(nums)\n        for i in range(len(nums)):\n            ret[i] = ret[i - 1] + nums[i]\n        return ret\n"
    },
    {
        "number": 1481,
        "title": "Least Number of Unique Integers after K Removals",
        "difficulty": 1,
        "answer": "        # DP\r\n        # dp[i][j] = min(dp[i-1][j], dp[i-1][j-1])\r\n        # dp[i][j] = min(dp[i-1][j], dp[i-1][j-1])\r\n        # dp[i][j] = min(dp[i-1][j], dp[i-1][j-1])\r\n        # dp[i][j] = min(dp[i-1][j], dp[i-1][j-1])\r\n        # dp[i][j] = min(dp[i-1][j], dp[i-1][j-1])\r\n        # dp[i][j] = min(dp[i-1][j], dp[i-1][j-1])\r\n        # dp[i][j] = min(dp[i-1][j], dp[i-1][j-1])\r\n        # dp[i][j] = min(dp["
    },
    {
        "number": 1482,
        "title": "Minimum Number of Days to Make m Bouquets",
        "difficulty": 1,
        "answer": "        # write your code here\n        if m == 0:\n            return 0\n        if m == 1:\n            return 1\n        if m == 2:\n            return 1\n        if m == 3:\n            return 1\n        if m == 4:\n            return 1\n        if m == 5:\n            return 1\n        if m == 6:\n            return 1\n        if m == 7:\n            return 1\n        if m == 8:\n            return 1\n        if m == 9:\n            return 1\n        if m == 10:\n            return 1\n        if m == 11:\n            return 1\n        if m == 12:\n            return 1\n        if m == 13:\n            return 1\n        if m == 14:\n            return 1\n        if m == 15:\n            return 1\n        if m == 16:\n            return 1\n        if m == 17:\n            return 1\n        if m == 18:\n            return 1\n        if m == 19:\n            return 1\n        if m == 20:\n            return 1\n        if m == 21:\n            return 1\n        "
    },
    {
        "number": 1483,
        "title": "Kth Ancestor of a Tree Node",
        "difficulty": 2,
        "answer": "        # Your code here\n        if node == 0:\n            return 0\n        if node == 1:\n            return 1\n        if node == 2:\n            return 2\n        if node == 3:\n            return 3\n        if node == 4:\n            return 4\n        if node == 5:\n            return 5\n        if node == 6:\n            return 6\n        if node == 7:\n            return 7\n        if node == 8:\n            return 8\n        if node == 9:\n            return 9\n        if node == 10:\n            return 10\n        if node == 11:\n            return 11\n        if node == 12:\n            return 12\n        if node == 13:\n            return 13\n        if node == 14:\n            return 14\n        if node == 15:\n            return 15\n        if node == 16:\n            return 16\n        if node == 17:\n            return 17\n        if node == 18:\n            return 18\n        if node == 19:\n            return 19\n        if node == 20:\n            return 20\n        if node == 21:\n            return 21\n        if"
    },
    {
        "number": 1486,
        "title": "XOR Operation in an Array",
        "difficulty": 0,
        "answer": "        ret = 0\n        for i in range(n):\n            ret ^= start + 2 * i\n        return ret"
    },
    {
        "number": 1487,
        "title": "Making File Names Unique",
        "difficulty": 1,
        "answer": "        ans = []\n        for i in range(len(names)):\n            if i == 0:\n                ans.append(names[i])\n            else:\n                ans.append(names[i] + \"(\" + str(i) + \")\")\n        return ans\n"
    },
    {
        "number": 1488,
        "title": "Avoid Flood in The City",
        "difficulty": 1,
        "answer": "        ans = []\n        for i in range(len(rains)):\n            if rains[i] == 0:\n                ans.append(-1)\n            else:\n                ans.append(i)\n        return ans\n"
    },
    {
        "number": 1489,
        "title": "Find Critical and Pseudo-Critical Edges in Minimum Spanning Tree",
        "difficulty": 2,
        "answer": "        critical_edges = []\n        pseudo_critical_edges = []\n        for i in range(n):\n            for j in range(i + 1, n):\n                if edges[i][1] == edges[j][0]:\n                    critical_edges.append([i, j])\n                elif edges[i][1] < edges[j][0]:\n                    pseudo_critical_edges.append([i, j])\n        return critical_edges + pseudo_critical_edges\n"
    },
    {
        "number": 1491,
        "title": "Average Salary Excluding the Minimum and Maximum Salary",
        "difficulty": 0,
        "answer": "        if not salary:\n            return 0\n        min_salary = min(salary)\n        max_salary = max(salary)\n        return (sum(salary) - min_salary + max_salary) / (len(salary) - 2)"
    },
    {
        "number": 1492,
        "title": "The kth Factor of n",
        "difficulty": 1,
        "answer": "        factors = [1]\n        for i in range(2, n + 1):\n            if n % i == 0:\n                factors.append(i)\n        if k > len(factors):\n            return -1\n        return factors[k - 1]\n"
    },
    {
        "number": 1493,
        "title": "Longest Subarray of 1\"s After Deleting One Element",
        "difficulty": 1,
        "answer": "        n = len(nums)\n        if n == 0:\n            return 0\n        if n == 1:\n            return 1\n        max_len = 0\n        for i in range(n):\n            if nums[i] == 1:\n                max_len = max(max_len, i + 1)\n        return max_len\n"
    },
    {
        "number": 1494,
        "title": "Parallel Courses II",
        "difficulty": 2,
        "answer": "        if n == 1:\n            return 1\n        if n == 2:\n            return 2\n        if n == 3:\n            return 3\n        if n == 4:\n            return 4\n        if n == 5:\n            return 5\n        if n == 6:\n            return 6\n        if n == 7:\n            return 7\n        if n == 8:\n            return 8\n        if n == 9:\n            return 9\n        if n == 10:\n            return 10\n        if n == 11:\n            return 11\n        if n == 12:\n            return 12\n        if n == 13:\n            return 13\n        if n == 14:\n            return 14\n        if n == 15:\n            return 15\n        if n == 16:\n            return 16\n        if n == 17:\n            return 17\n        if n == 18:\n            return 18\n        if n == 19:\n            return 19\n        if n == 20:\n            return 20\n        if n == 21:\n            return 21\n        if n == 22:\n            return 22\n        if n == 23:\n            "
    },
    {
        "number": 1496,
        "title": "Path Crossing",
        "difficulty": 0,
        "answer": "        # dp[i][j] = dp[i-1][j] + dp[i][j-1]\n        dp = [[0 for j in range(len(path)+1)] for i in range(len(path)+1)]\n        for i in range(len(path)+1):\n            for j in range(len(path)+1):\n                if i == 0 or j == 0:\n                    dp[i][j] = 0\n                elif path[i-1] == 'N' and path[j-1] == 'E':\n                    dp[i][j] = dp[i-1][j-1] + 1\n                elif path[i-1] == 'E' and path[j-1] == 'W':\n                    dp[i][j] = dp[i-1][j] + 1\n                elif path[i-1] == 'W' and path[j-1] == 'S':\n                    dp[i][j] = dp[i][j-1] + 1\n                elif path[i-1"
    },
    {
        "number": 1497,
        "title": "Check If Array Pairs Are Divisible by k",
        "difficulty": 1,
        "answer": "        if len(arr) % 2!= 0 or len(arr) < 2:\n            return False\n        n = len(arr)\n        for i in range(n // 2):\n            if arr[i] + arr[n - i - 1] % k!= 0:\n                return False\n        return True\n"
    },
    {
        "number": 1498,
        "title": "Number of Subsequences That Satisfy the Given Sum Condition",
        "difficulty": 1,
        "answer": "        nums.sort()\n        ans = 0\n        for i in range(len(nums)):\n            if target - nums[i] <= 0:\n                ans += 1\n            if target - nums[i] > 0:\n                ans += (target - nums[i]) * (len(nums) - i)\n        return ans % 109 + 7\n"
    },
    {
        "number": 1499,
        "title": "Max Value of Equation",
        "difficulty": 2,
        "answer": "        if not points or not points[0]:\n            return 0\n        n = len(points)\n        if n == 1:\n            return points[0][1]\n        if n == 2:\n            return points[0][1] + points[1][1]\n        if n == 3:\n            return points[0][1] + points[1][1] + abs(points[0][0] - points[1][0])\n        if n == 4:\n            return points[0][1] + points[1][1] + abs(points[0][0] - points[1][0]) + abs(points[2][0] - points[3][0])\n        if n == 5:\n            return points[0][1] + points[1][1] + abs(points[0][0] - points[1][0]) + abs(points[2][0] - points[3][0]) + abs(points[4][0] - points[5][0])\n        if n == 6:\n            return points[0][1] + points[1][1] +"
    },
    {
        "number": 1502,
        "title": "Can Make Arithmetic Progression From Sequence",
        "difficulty": 0,
        "answer": "        if len(arr) < 2:\n            return False\n        for i in range(len(arr) - 1):\n            if arr[i] + arr[i + 1]!= arr[i + 1] + arr[i]:\n                return False\n        return True\n"
    },
    {
        "number": 1503,
        "title": "Last Moment Before All Ants Fall Out of a Plank",
        "difficulty": 1,
        "answer": "        ans = 0\n        for i in range(len(left)):\n            ans += left[i] * (n - i)\n        for i in range(len(right)):\n            ans += right[i] * (n - i)\n        return ans\n"
    },
    {
        "number": 1504,
        "title": "Count Submatrices With All Ones",
        "difficulty": 1,
        "answer": "        if not mat:\n            return 0\n        m, n = len(mat), len(mat[0])\n        if m == 1 or n == 1:\n            return 1\n        if m == 2 or n == 2:\n            return mat[0][0] + mat[1][1]\n        if m == 3 or n == 3:\n            return mat[0][0] + mat[1][1] + mat[2][2]\n        if m == 4 or n == 4:\n            return mat[0][0] + mat[1][1] + mat[2][2] + mat[3][3]\n        if m == 5 or n == 5:\n            return mat[0][0] + mat[1][1] + mat[2][2] + mat[3][3] + mat[4][4]\n        if m == 6 or n == 6:\n            return mat[0][0] + mat[1][1] + mat[2][2] + mat[3][3] + mat[4][4] + mat[5][5]\n        if m =="
    },
    {
        "number": 1505,
        "title": "Minimum Possible Integer After at Most K Adjacent Swaps On Digits",
        "difficulty": 2,
        "answer": "        # dp[i][j] = min(dp[i-1][j], dp[i-1][j-1], dp[i-1][j+1])\n        # dp[i][j] = min(dp[i-1][j], dp[i-1][j-1], dp[i-1][j+1])\n        # dp[i][j] = min(dp[i-1][j], dp[i-1][j-1], dp[i-1][j+1])\n        # dp[i][j] = min(dp[i-1][j], dp[i-1][j-1], dp[i-1][j+1])\n        # dp[i][j] = min(dp[i-1][j], dp[i-1][j-1], dp[i-1][j+1])\n        # dp[i][j] = min(dp[i-1][j], dp[i-1][j-1], dp[i"
    },
    {
        "number": 1507,
        "title": "Reformat Date",
        "difficulty": 0,
        "answer": "        day = date[:2]\n        month = date[2:4]\n        year = date[4:]\n        if len(day) == 1:\n            day = \"0\" + day\n        if len(month) == 1:\n            month = \"0\" + month\n        if len(year) == 2:\n            year = \"20\" + year\n        return year + month + day\n"
    },
    {
        "number": 1508,
        "title": "Range Sum of Sorted Subarray Sums",
        "difficulty": 1,
        "answer": "        if left == right:\n            return nums[left]\n        if left > right:\n            return 0\n        mid = (left + right) / 2\n        return self.rangeSum(nums, n, left, mid) + self.rangeSum(nums, n, mid + 1, right) % 109 + 7\n"
    },
    {
        "number": 1509,
        "title": "Minimum Difference Between Largest and Smallest Value in Three Moves",
        "difficulty": 1,
        "answer": "        n = len(nums)\n        if n == 0:\n            return 0\n        if n == 1:\n            return nums[0]\n        if n == 2:\n            return min(nums[0], nums[1]) - max(nums[0], nums[1])\n        if n == 3:\n            return min(nums[0], min(nums[1], nums[2])) - max(nums[0], max(nums[1], nums[2]))\n        if n == 4:\n            return min(nums[0], min(nums[1], min(nums[2], nums[3]))) - max(nums[0], max(nums[1], max(nums[2], nums[3])))\n        if n == 5:\n            return min(nums[0], min(nums[1], min(nums[2], min(nums[3], nums[4])))) - max(nums[0], max(nums[1], max(nums[2"
    },
    {
        "number": 1510,
        "title": "Stone Game IV",
        "difficulty": 2,
        "answer": "        return n == int(math.sqrt(n))"
    },
    {
        "number": 1512,
        "title": "Number of Good Pairs",
        "difficulty": 0,
        "answer": "        n = len(nums)\n        if n == 0:\n            return 0\n        if n == 1:\n            return 1\n        dp = [0] * (n + 1)\n        dp[0] = 1\n        for i in range(1, n + 1):\n            for j in range(i):\n                if nums[i] == nums[j]:\n                    dp[i] += dp[j]\n        return dp[n]\n"
    },
    {
        "number": 1513,
        "title": "Number of Substrings With Only 1s",
        "difficulty": 1,
        "answer": "        if not s:\n            return 0\n        n = len(s)\n        ans = 0\n        for i in range(n):\n            if s[i] == '1':\n                ans += (n - i) * (n - i - 1) // 2\n        return ans % 109 + 7\n"
    },
    {
        "number": 1514,
        "title": "Path with Maximum Probability",
        "difficulty": 1,
        "answer": "        if n == 1:\n            return succProb[start]\n        if n == 2:\n            return max(succProb[start], succProb[end])\n        if start == end:\n            return succProb[start]\n        if edges[start][end] == 0:\n            return 0\n        if edges[start][end] == 1:\n            return max(succProb[start], succProb[end])\n        if edges[start][end] == 2:\n            return max(succProb[start], succProb[end])\n        if edges[start][end] == 3:\n            return max(succProb[start], succProb[end])\n        if edges[start][end] == 4:\n            return max(succProb[start], succProb[end])\n        if edges[start][end] == 5:\n            return max(succProb[start], succProb[end])\n        if edges[start][end] == 6:\n            return max(succProb[start], succProb["
    },
    {
        "number": 1515,
        "title": "Best Position for a Service Centre",
        "difficulty": 2,
        "answer": "        x, y = 0, 0\n        for i in range(len(positions)):\n            x += positions[i][0]\n            y += positions[i][1]\n        return math.sqrt(x*x + y*y)"
    },
    {
        "number": 1518,
        "title": "Water Bottles",
        "difficulty": 0,
        "answer": "        return max(numBottles - numExchange + 1, 0)\n"
    },
    {
        "number": 1519,
        "title": "Number of Nodes in the Sub-Tree With the Same Label",
        "difficulty": 1,
        "answer": "        ans = [0] * n\n        for i in range(n):\n            for j in range(n):\n                if i!= j and edges[i][0] == edges[j][0] and edges[i][1] == edges[j][1]:\n                    ans[i] += ans[j]\n        return ans"
    },
    {
        "number": 1520,
        "title": "Maximum Number of Non-Overlapping Substrings",
        "difficulty": 2,
        "answer": "        result = []\n        for i in range(len(s)):\n            for j in range(i+1, len(s)):\n                if j > i:\n                    if s[i] == s[j]:\n                        if s[i] not in result:\n                            result.append(s[i])\n        return result\n"
    },
    {
        "number": 1521,
        "title": "Find a Value of a Mysterious Function Closest to Target",
        "difficulty": 2,
        "answer": "        l, r = 0, len(arr) - 1\n        while l < r:\n            mid = l + (r - l) // 2\n            if arr[mid] == target:\n                return mid\n            elif arr[mid] < target:\n                l = mid + 1\n            else:\n                r = mid\n        return l"
    },
    {
        "number": 1523,
        "title": "Count Odd Numbers in an Interval Range",
        "difficulty": 0,
        "answer": "        odds = 0\n        for i in range(low, high+1):\n            odds += i % 2 == 1\n        return odds\n"
    },
    {
        "number": 1524,
        "title": "Number of Sub-arrays With Odd Sum",
        "difficulty": 1,
        "answer": "        if not arr:\n            return 0\n        n = len(arr)\n        ans = 0\n        for i in range(n):\n            sum = arr[i]\n            for j in range(i+1, n):\n                sum += arr[j]\n                if sum % 2 == 1:\n                    ans += 1\n                    sum = sum // 2\n        return ans % 109 + 7\n"
    },
    {
        "number": 1525,
        "title": "Number of Good Ways to Split a String",
        "difficulty": 1,
        "answer": "        if not s:\n            return 0\n        n = len(s)\n        if n == 1:\n            return 1\n        if n == 2:\n            return 2\n        if n == 3:\n            return 3\n        if n == 4:\n            return 4\n        if n == 5:\n            return 5\n        if n == 6:\n            return 6\n        if n == 7:\n            return 7\n        if n == 8:\n            return 8\n        if n == 9:\n            return 9\n        if n == 10:\n            return 10\n        if n == 11:\n            return 11\n        if n == 12:\n            return 12\n        if n == 13:\n            return 13\n        if n == 14:\n            return 14\n        if n == 15:\n            return 15\n        if n == 16:\n            return 16\n        if n == 17:\n            return 17\n        if n == 18:\n            return 18\n        if n == 19:\n            return 19\n        if n == 20:\n            return 20\n        if n == 21:\n            return 21\n        "
    },
    {
        "number": 1526,
        "title": "Minimum Number of Increments on Subarrays to Form a Target Array",
        "difficulty": 2,
        "answer": "        n = len(target)\n        if n == 0:\n            return 0\n        elif n == 1:\n            return 1\n        elif n == 2:\n            return 2\n        elif n == 3:\n            return 3\n        elif n == 4:\n            return 4\n        elif n == 5:\n            return 5\n        elif n == 6:\n            return 6\n        elif n == 7:\n            return 7\n        elif n == 8:\n            return 8\n        elif n == 9:\n            return 9\n        elif n == 10:\n            return 10\n        elif n == 11:\n            return 11\n        elif n == 12:\n            return 12\n        elif n == 13:\n            return 13\n        elif n == 14:\n            return 14\n        elif n == 15:\n            return 15\n        elif n == 16:\n            return 16\n        elif n == 17:\n            return 17\n        elif n == 18:\n            return 18\n        elif n == 19:\n            return 19\n        elif"
    },
    {
        "number": 1528,
        "title": "Shuffle String",
        "difficulty": 0,
        "answer": "        ret = \"\"\n        for i in indices:\n            ret += s[i]\n        return ret"
    },
    {
        "number": 1529,
        "title": "Minimum Suffix Flips",
        "difficulty": 1,
        "answer": "        n = len(target)\n        if n == 0:\n            return 0\n        if n == 1:\n            return 1\n        if target[0] == '0':\n            return 1\n        if target[0] == '1':\n            return 1\n        if target[0] == '0':\n            return 1\n        if target[0] == '1':\n            return 1\n        if target[0] == '0':\n            return 1\n        if target[0] == '1':\n            return 1\n        if target[0] == '0':\n            return 1\n        if target[0] == '1':\n            return 1\n        if target[0] == '0':\n            return 1\n        if target[0] == '1':\n            return 1\n        if target[0] == '0':\n            return 1\n        if target[0] == '1':\n            return 1\n        if target[0] == '0':\n            return 1\n        if target[0] == '1':\n            return 1\n        if target[0] == '0':"
    },
    {
        "number": 1530,
        "title": "Number of Good Leaf Nodes Pairs",
        "difficulty": 1,
        "answer": "        if not root:\n            return 0\n        if root.left and root.left.val == root.val:\n            return self.countPairs(root.left, distance)\n        if root.right and root.right.val == root.val:\n            return self.countPairs(root.right, distance)\n        return 1 if root.val == root.left.val or root.val == root.right.val else 0\n"
    },
    {
        "number": 1531,
        "title": "String Compression II",
        "difficulty": 2,
        "answer": "        if not s or k == 0:\n            return 0\n        if len(s) <= k:\n            return len(s)\n        s_rle = [0] * len(s)\n        for i in range(len(s)):\n            s_rle[i] = 1\n            while i + 1 < len(s) and s[i] == s[i + 1]:\n                s_rle[i] += 1\n                i += 1\n        s_rle.append(0)\n        s_rle = [x for x in s_rle if x > 0]\n        return min(len(s_rle), k)"
    },
    {
        "number": 1534,
        "title": "Count Good Triplets",
        "difficulty": 0,
        "answer": "        ans = 0\n        for i in range(len(arr)):\n            for j in range(i + 1, len(arr)):\n                for k in range(j + 1, len(arr)):\n                    if arr[i] - arr[j] <= a and arr[j] - arr[k] <= b and arr[i] - arr[k] <= c:\n                        ans += 1\n        return ans\n"
    },
    {
        "number": 1535,
        "title": "Find the Winner of an Array Game",
        "difficulty": 1,
        "answer": "        # https://leetcode.com/problems/game-of-thrones/discuss/83518/C%2B%2B-Java-DP-solution-with-explanation\n        # https://leetcode.com/problems/game-of-thrones/discuss/83518/C%2B%2B-Java-DP-solution-with-explanation\n        # https://leetcode.com/problems/game-of-thrones/discuss/83518/C%2B%2B-Java-DP-solution-with-explanation\n        # https://leetcode.com/problems/game-of-thrones/discuss/83518/C%2B%2B-Java-DP-solution-with-explanation\n        # https://leetcode.com/problems/game-of-thrones/discuss/83518/C%2B%2B-Java-DP-solution-with-explanation\n        # https://leetcode.com/"
    },
    {
        "number": 1536,
        "title": "Minimum Swaps to Arrange a Binary Grid",
        "difficulty": 1,
        "answer": "        n = len(grid)\n        if n == 0:\n            return 0\n        if n == 1:\n            return 1\n        if n == 2:\n            return 2\n        if grid[0][0] == grid[1][0]:\n            return 1\n        if grid[0][0] == grid[n-1][n-1]:\n            return 1\n        if grid[0][0] == grid[n-2][n-2]:\n            return 1\n        if grid[0][0] == grid[n-3][n-3]:\n            return 1\n        if grid[0][0] == grid[n-4][n-4]:\n            return 1\n        if grid[0][0] == grid[n-5][n-5]:\n            return 1\n        if grid[0][0] == grid[n-6][n-6]:\n            return 1\n        if grid[0][0] == grid[n-7][n-7]:\n            return 1\n        if grid[0][0] == grid[n-8][n-8]:\n            "
    },
    {
        "number": 1537,
        "title": "Get the Maximum Score",
        "difficulty": 2,
        "answer": "        nums1_len = len(nums1)\n        nums2_len = len(nums2)\n        if nums1_len == 0 or nums2_len == 0:\n            return 0\n        if nums1_len == 1 or nums2_len == 1:\n            return nums1[0] + nums2[0]\n        if nums1_len == 2 and nums2_len == 2:\n            return max(nums1[0] + nums2[0], nums1[1] + nums2[1])\n        if nums1_len == 2 and nums2_len == 1:\n            return max(nums1[0] + nums2[0], nums1[1] + nums2[0])\n        if nums1_len == 1 and nums2_len == 2:\n            return max(nums1[0] + nums2[0], nums1[0] + nums2[1])\n        if nums1_len == 2 and nums2_"
    },
    {
        "number": 1539,
        "title": "Kth Missing Positive Number",
        "difficulty": 0,
        "answer": "        # sort the array\n        arr = sorted(arr)\n        # find the kth positive integer\n        return arr[k-1]\n"
    },
    {
        "number": 1540,
        "title": "Can Convert String in K Moves",
        "difficulty": 1,
        "answer": "        if len(s)!= len(t):\n            return False\n        if k == 0:\n            return True\n        if k == 1:\n            return s == t\n        if k == 2:\n            return s[0] == t[0] and s[1] == t[1]\n        if k == 3:\n            return s[0] == t[0] and s[1] == t[1] and s[2] == t[2]\n        if k == 4:\n            return s[0] == t[0] and s[1] == t[1] and s[2] == t[2] and s[3] == t[3]\n        if k == 5:\n            return s[0] == t[0] and s[1] == t[1] and s[2] == t[2] and s[3] == t[3] and s[4] == t[4]\n        if k == 6:\n            return s[0] == t[0] and s[1] == t[1] and s[2] =="
    },
    {
        "number": 1541,
        "title": "Minimum Insertions to Balance a Parentheses String",
        "difficulty": 1,
        "answer": "        stack = []\n        for c in s:\n            if c == '(':\n                stack.append(c)\n            elif c == ')':\n                if len(stack) == 0:\n                    return 0\n                if stack[-1] == '(':\n                    stack.pop()\n                else:\n                    return len(stack)\n        return len(stack)\n"
    },
    {
        "number": 1542,
        "title": "Find Longest Awesome Substring",
        "difficulty": 2,
        "answer": "        if not s:\n            return 0\n        n = len(s)\n        dp = [1] * n\n        for i in range(1, n):\n            dp[i] = max(dp[i - 1], 1)\n            for j in range(i - 1, -1, -1):\n                if s[j] == s[i]:\n                    dp[i] = max(dp[i], dp[j] + 1)\n        return dp[-1]"
    },
    {
        "number": 1544,
        "title": "Make The String Great",
        "difficulty": 0,
        "answer": "        if not s:\n            return s\n        for i in range(1, len(s)):\n            if s[i - 1] == s[i] and s[i + 1] == s[i]:\n                s = s[:i] + s[i + 2:]\n                break\n        return s\n"
    },
    {
        "number": 1545,
        "title": "Find Kth Bit in Nth Binary String",
        "difficulty": 1,
        "answer": "        if n == 0:\n            return \"0\"\n        if n == 1:\n            return \"1\"\n        if k == 0:\n            return \"0\"\n        if k == 1:\n            return \"1\"\n        if k == 2:\n            return \"0\"\n        if k == 3:\n            return \"1\"\n        if k == 4:\n            return \"0\"\n        if k == 5:\n            return \"1\"\n        if k == 6:\n            return \"0\"\n        if k == 7:\n            return \"1\"\n        if k == 8:\n            return \"0\"\n        if k == 9:\n            return \"1\"\n        if k == 10:\n            return \"0\"\n        if k == 11:\n            return \"1\"\n        if k == 12:\n            return \"0\"\n        if k == 13:\n            return \"1\"\n        if k == 14:\n            return \"0\"\n        if k == 15:\n            return \"1\"\n        if k == 16:\n            return \"0\"\n        if k"
    },
    {
        "number": 1546,
        "title": "Maximum Number of Non-Overlapping Subarrays With Sum Equals Target",
        "difficulty": 1,
        "answer": "        n = len(nums)\n        if n == 0:\n            return 0\n        if n == 1:\n            return 1 if nums[0] == target else 0\n        if nums[0] == target:\n            return 1\n        if nums[0] > target:\n            return 0\n        if nums[0] < target:\n            return 1\n        if nums[0] == target:\n            return 1\n        if nums[0] > target:\n            return 1\n        if nums[0] < target:\n            return 1\n        if nums[0] == target:\n            return 1\n        if nums[0] > target:\n            return 1\n        if nums[0] < target:\n            return 1\n        if nums[0] == target:\n            return 1\n        if nums[0] > target:\n            return 1\n        if nums[0] < target:\n            return 1\n        if nums[0] == target:\n            return 1\n        if nums[0] > target:\n            return 1"
    },
    {
        "number": 1547,
        "title": "Minimum Cost to Cut a Stick",
        "difficulty": 2,
        "answer": "        if n == 0:\n            return 0\n        if n == 1:\n            return cuts[0]\n        if n == 2:\n            return min(cuts[0], cuts[1])\n        if n == 3:\n            return min(cuts[0], cuts[1], cuts[2])\n        if n == 4:\n            return min(cuts[0], cuts[1], cuts[2], cuts[3])\n        if n == 5:\n            return min(cuts[0], cuts[1], cuts[2], cuts[3], cuts[4])\n        if n == 6:\n            return min(cuts[0], cuts[1], cuts[2], cuts[3], cuts[4], cuts[5])\n        if n == 7:\n            return min(cuts[0], cuts[1], cuts[2], cuts[3], cuts[4], cuts[5], cuts[6])\n        if n == 8:\n            return min(cuts[0], cuts[1], cuts[2], cuts[3], cuts[4], cuts[5], cuts[6], cuts[7])\n        "
    },
    {
        "number": 1550,
        "title": "Three Consecutive Odds",
        "difficulty": 0,
        "answer": "        if len(arr) < 3:\n            return False\n        for i in range(len(arr) - 2):\n            if arr[i] % 2 == 0 and arr[i + 1] % 2 == 0 and arr[i + 2] % 2 == 0:\n                return True\n        return False\n"
    },
    {
        "number": 1551,
        "title": "Minimum Operations to Make Array Equal",
        "difficulty": 1,
        "answer": "        if n == 0:\n            return 0\n        if n == 1:\n            return 1\n        if n == 2:\n            return 2\n        if n == 3:\n            return 3\n        if n == 4:\n            return 4\n        if n == 5:\n            return 5\n        if n == 6:\n            return 6\n        if n == 7:\n            return 7\n        if n == 8:\n            return 8\n        if n == 9:\n            return 9\n        if n == 10:\n            return 10\n        if n == 11:\n            return 11\n        if n == 12:\n            return 12\n        if n == 13:\n            return 13\n        if n == 14:\n            return 14\n        if n == 15:\n            return 15\n        if n == 16:\n            return 16\n        if n == 17:\n            return 17\n        if n == 18:\n            return 18\n        if n == 19:\n            return 19\n        if n == 20:\n            return 20\n        if n == 21:\n            return 21\n        if n == 22:\n            "
    },
    {
        "number": 1552,
        "title": "Magnetic Force Between Two Balls",
        "difficulty": 1,
        "answer": "        n = len(position)\n        m = min(m, n)\n        ans = 0\n        for i in range(n):\n            for j in range(i + 1, n):\n                ans = max(ans, abs(position[i] - position[j]))\n        return ans\n"
    },
    {
        "number": 1553,
        "title": "Minimum Number of Days to Eat N Oranges",
        "difficulty": 2,
        "answer": "        if n == 0:\n            return 0\n        elif n == 1:\n            return 1\n        elif n % 2 == 0:\n            return n / 2\n        else:\n            return n / 3\n"
    },
    {
        "number": 1556,
        "title": "Thousand Separator",
        "difficulty": 0,
        "answer": "        if n == 0:\n            return \"0\"\n        if n < 0:\n            return \"-\" + self.thousandSeparator(-n)\n        if n < 1000:\n            return str(n)\n        if n < 1000000:\n            return str(n / 1000) + \".\" + str(n % 1000)\n        if n < 1000000000:\n            return str(n / 1000000) + \".\" + str(n % 1000000)\n        if n < 1000000000000:\n            return str(n / 1000000000) + \".\" + str(n % 1000000000)\n        if n < 1000000000000000:\n            return str(n / 1000000000000) + \".\" + str(n % 1000000000000)\n        if n < 10000000000000000:\n            return str(n / 1000000000000000) + \".\" + str(n % 1000000000000000)\n        if n < 10000000000000000000:\n            return str(n / 10000000000000000) + \".\" + str(n % 10000000000000000000)\n        if n < 1000000000000000000:\n            return str(n / 10000000000"
    },
    {
        "number": 1557,
        "title": "Minimum Number of Vertices to Reach All Nodes",
        "difficulty": 1,
        "answer": "        if n == 0:\n            return []\n        if n == 1:\n            return [0]\n        if n == 2:\n            return [0, 1]\n        if n == 3:\n            return [0, 1, 2]\n        if n == 4:\n            return [0, 1, 3]\n        if n == 5:\n            return [0, 1, 2, 3]\n        if n == 6:\n            return [0, 1, 2, 3, 4]\n        if n == 7:\n            return [0, 1, 2, 3, 4, 5]\n        if n == 8:\n            return [0, 1, 2, 3, 4, 5, 6]\n        if n == 9:\n            return [0, 1, 2, 3, 4, 5, 6, 7]\n        if n == 10:\n            return [0, 1, 2, 3, 4, 5, 6, 7, 8]\n        if n == 11:\n            return [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n        if"
    },
    {
        "number": 1558,
        "title": "Minimum Numbers of Function Calls to Make Target Array",
        "difficulty": 1,
        "answer": "        n = len(nums)\n        if n == 0:\n            return 0\n        elif n == 1:\n            return 1\n        elif n == 2:\n            return 2\n        elif n == 3:\n            return 3\n        elif n == 4:\n            return 4\n        elif n == 5:\n            return 5\n        elif n == 6:\n            return 6\n        elif n == 7:\n            return 7\n        elif n == 8:\n            return 8\n        elif n == 9:\n            return 9\n        elif n == 10:\n            return 10\n        elif n == 11:\n            return 11\n        elif n == 12:\n            return 12\n        elif n == 13:\n            return 13\n        elif n == 14:\n            return 14\n        elif n == 15:\n            return 15\n        elif n == 16:\n            return 16\n        elif n == 17:\n            return 17\n        elif n == 18:\n            return 18\n        elif n == 19:\n            return 19\n        el"
    },
    {
        "number": 1559,
        "title": "Detect Cycles in 2D Grid",
        "difficulty": 1,
        "answer": "        m, n = len(grid), len(grid[0])\n        visited = [[False for _ in range(n)] for _ in range(m)]\n        for i in range(m):\n            for j in range(n):\n                if visited[i][j] and grid[i][j] == grid[i][j - 1]:\n                    return True\n                if not visited[i][j] and grid[i][j] == grid[i - 1][j]:\n                    visited[i][j] = True\n                    if visited[i - 1][j]:\n                        return True\n                    visited[i][j] = False\n        return False\n"
    },
    {
        "number": 1560,
        "title": "Most Visited Sector in  a Circular Track",
        "difficulty": 0,
        "answer": "        if n == 1:\n            return [1]\n        if n == 2:\n            return [1, 2]\n        if n == 3:\n            return [1, 2, 3]\n        if n == 4:\n            return [1, 2, 3, 4]\n        if n == 5:\n            return [1, 2, 3, 4, 5]\n        if n == 6:\n            return [1, 2, 3, 4, 5, 6]\n        if n == 7:\n            return [1, 2, 3, 4, 5, 6, 7]\n        if n == 8:\n            return [1, 2, 3, 4, 5, 6, 7, 8]\n        if n == 9:\n            return [1, 2, 3, 4, 5, 6, 7, 8, 9]\n        if n == 10:\n            return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n        if n == 11:\n            return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10,"
    },
    {
        "number": 1561,
        "title": "Maximum Number of Coins You Can Get",
        "difficulty": 1,
        "answer": "        n = len(piles)\n        dp = [0] * (n + 1)\n        dp[0] = 0\n        for i in range(1, n + 1):\n            dp[i] = max(dp[i - 1] + piles[i - 1], dp[i - 2] + piles[i - 2])\n        return dp[n]\n"
    },
    {
        "number": 1562,
        "title": "Find Latest Group of Size M",
        "difficulty": 1,
        "answer": "        if not arr or not m:\n            return -1\n        if m == 1:\n            return arr.index(1)\n        if m == 2:\n            return arr.index(1) + 1\n        if m == 3:\n            return arr.index(1) + 2\n        if m == 4:\n            return arr.index(1) + 3\n        if m == 5:\n            return arr.index(1) + 4\n        if m == 6:\n            return arr.index(1) + 5\n        if m == 7:\n            return arr.index(1) + 6\n        if m == 8:\n            return arr.index(1) + 7\n        if m == 9:\n            return arr.index(1) + 8\n        if m == 10:\n            return arr.index(1) + 9\n        if m == 11:\n            return arr.index(1) + 10\n        if m == 12:\n            return arr.index(1) + 11\n        if m == 13:\n            return arr.index(1) + 12\n        if m =="
    },
    {
        "number": 1563,
        "title": "Stone Game V",
        "difficulty": 2,
        "answer": "        n = len(stoneValue)\n        if n == 0:\n            return 0\n        if n == 1:\n            return stoneValue[0]\n        if n == 2:\n            return stoneValue[0] + stoneValue[1]\n        if n == 3:\n            return stoneValue[0] + stoneValue[1] + stoneValue[2]\n        if n == 4:\n            return stoneValue[0] + stoneValue[1] + stoneValue[2] + stoneValue[3]\n        if n == 5:\n            return stoneValue[0] + stoneValue[1] + stoneValue[2] + stoneValue[3] + stoneValue[4]\n        if n == 6:\n            return stoneValue[0] + stoneValue[1] + stoneValue[2] + stoneValue[3] + stoneValue[4] + stoneValue[5]\n        if n == 7:\n            return stoneValue[0] + stoneValue[1] + stoneValue[2] + stoneValue[3] + stoneValue[4] + stoneValue[5] + stoneValue[6]"
    },
    {
        "number": 1566,
        "title": "Detect Pattern of Length M Repeated K or More Times",
        "difficulty": 0,
        "answer": "        if len(arr) < m:\n            return False\n        if len(arr) == m:\n            return arr[0] == k\n        if len(arr) == m + 1:\n            return arr[0] == k and arr[1] == k\n        if len(arr) == m + 2:\n            return arr[0] == k and arr[1] == k and arr[2] == k\n        if len(arr) == m + 3:\n            return arr[0] == k and arr[1] == k and arr[2] == k and arr[3] == k\n        if len(arr) == m + 4:\n            return arr[0] == k and arr[1] == k and arr[2] == k and arr[3] == k and arr[4] == k\n        if len(arr) == m + 5:\n            return arr[0] == k and arr[1] == k and arr[2] == k and arr[3] == k and arr[4] == k and arr[5] == k\n        if len(arr) =="
    },
    {
        "number": 1567,
        "title": "Maximum Length of Subarray With Positive Product",
        "difficulty": 1,
        "answer": "        n = len(nums)\n        if n == 0:\n            return 0\n        max_len = 0\n        for i in range(n):\n            max_len = max(max_len, 1 + self.getMaxLen(nums[i:]))\n        return max_len"
    },
    {
        "number": 1568,
        "title": "Minimum Number of Days to Disconnect Island",
        "difficulty": 2,
        "answer": "        m, n = len(grid), len(grid[0])\n        if m == 0 or n == 0:\n            return 0\n        if m == 1 or n == 1:\n            return 1\n        if grid[0][0] == 1:\n            return 1\n        if grid[m - 1][n - 1] == 1:\n            return 1\n        if grid[0][n - 1] == 1:\n            return 1\n        if grid[m - 1][0] == 1:\n            return 1\n        if grid[m - 1][n - 1] == 1:\n            return 1\n        if grid[m - 2][n - 2] == 1:\n            return 1\n        if grid[m - 2][n - 1] == 1:\n            return 1\n        if grid[m - 1][n - 2] == 1:\n            return 1\n        if grid[m - 2][n - 2] == 1:\n            return 1\n        return 2"
    },
    {
        "number": 1569,
        "title": "Number of Ways to Reorder Array to Get Same BST",
        "difficulty": 2,
        "answer": "        if not nums:\n            return 0\n        n = len(nums)\n        if n == 1:\n            return 1\n        if n == 2:\n            return 2\n        if n == 3:\n            return 4\n        if n == 4:\n            return 8\n        if n == 5:\n            return 16\n        if n == 6:\n            return 32\n        if n == 7:\n            return 64\n        if n == 8:\n            return 128\n        if n == 9:\n            return 256\n        if n == 10:\n            return 512\n        if n == 11:\n            return 1024\n        if n == 12:\n            return 2048\n        if n == 13:\n            return 4096\n        if n == 14:\n            return 8192\n        if n == 15:\n            return 16384\n        if n == 16:\n            return 32768\n        if n == 17:\n            return 65536\n        if n == 18:\n            return 131072\n        if n == 19:\n            return 262144\n        if n == 20:\n            return 524288\n        "
    },
    {
        "number": 1572,
        "title": "Matrix Diagonal Sum",
        "difficulty": 0,
        "answer": "        n = len(mat)\n        if n == 0:\n            return 0\n        if n == 1:\n            return mat[0][0]\n        if n == 2:\n            return mat[0][0] + mat[1][1]\n        if n == 3:\n            return mat[0][0] + mat[1][1] + mat[2][2]\n        if n == 4:\n            return mat[0][0] + mat[1][1] + mat[2][2] + mat[3][3]\n        if n == 5:\n            return mat[0][0] + mat[1][1] + mat[2][2] + mat[3][3] + mat[4][4]\n        if n == 6:\n            return mat[0][0] + mat[1][1] + mat[2][2] + mat[3][3] + mat[4][4] + mat[5][5]\n        if n == 7:\n            return mat[0][0] + mat[1][1] + mat[2][2] +"
    },
    {
        "number": 1573,
        "title": "Number of Ways to Split a String",
        "difficulty": 1,
        "answer": "        if not s:\n            return 0\n        n = len(s)\n        if n == 1:\n            return 1\n        if n == 2:\n            return 3\n        if n == 3:\n            return 4\n        return (n - 1) * (n - 2) * (n - 3) % 109 + 7\n"
    },
    {
        "number": 1574,
        "title": "Shortest Subarray to be Removed to Make Array Sorted",
        "difficulty": 1,
        "answer": "        if not arr:\n            return 0"
    },
    {
        "number": 1575,
        "title": "Count All Possible Routes",
        "difficulty": 2,
        "answer": "        dp = [0] * (finish + 1)\n        dp[0] = 1\n        for i in range(1, finish + 1):\n            for j in range(i):\n                dp[i] += dp[j]\n            dp[i] += fuel\n        return dp[finish] % 109 + 7\n"
    },
    {
        "number": 1576,
        "title": "Replace All ?\"s to Avoid Consecutive Repeating Characters",
        "difficulty": 0,
        "answer": "        if not s:\n            return s\n        s = s.lower()\n        ans = \"\"\n        for i in range(len(s)):\n            if s[i] == '?':\n                ans += s[:i] + s[i+1].upper()\n                s = s[i+1:]\n        return ans + s\n"
    },
    {
        "number": 1577,
        "title": "Number of Ways Where Square of Number Is Equal to Product of Two Numbers",
        "difficulty": 1,
        "answer": "        nums1.sort()\n        nums2.sort()\n        ans = 0\n        for i in range(len(nums1)):\n            for j in range(len(nums2)):\n                if nums1[i] == nums2[j]:\n                    ans += 1\n                    for k in range(j+1, len(nums2)):\n                        if nums2[k] == nums1[i]:\n                            ans += 1\n        return ans\n"
    },
    {
        "number": 1578,
        "title": "Minimum Time to Make Rope Colorful",
        "difficulty": 1,
        "answer": "        n = len(colors)\n        dp = [0] * (n + 1)\n        dp[0] = 0\n        for i in range(1, n + 1):\n            dp[i] = dp[i - 1] + neededTime[i - 1]\n        for i in range(2, n + 1):\n            dp[i] = min(dp[i - 1], dp[i - 2] + neededTime[i - 2])\n        return dp[n]\n"
    },
    {
        "number": 1579,
        "title": "Remove Max Number of Edges to Keep Graph Fully Traversable",
        "difficulty": 2,
        "answer": "        if n == 0:\n            return 0\n        if n == 1:\n            return 1\n        if edges[0][0] == edges[1][0]:\n            return 1\n        if edges[0][1] == edges[1][1]:\n            return 1\n        if edges[0][0] == edges[1][1]:\n            return 1\n        if edges[0][1] == edges[1][0]:\n            return 1\n        return -1"
    },
    {
        "number": 1582,
        "title": "Special Positions in a Binary Matrix",
        "difficulty": 0,
        "answer": "        n = len(mat)\n        m = len(mat[0])\n        if n == 0 or m == 0:\n            return 0\n        dp = [[0] * m for _ in range(n)]\n        for i in range(n):\n            for j in range(m):\n                if mat[i][j] == 1:\n                    dp[i][j] = 1\n        return sum(dp)\n"
    },
    {
        "number": 1583,
        "title": "Count Unhappy Friends",
        "difficulty": 1,
        "answer": "        unhappy = 0\n        for i in range(n):\n            for j in range(i+1, n):\n                if preferences[i][j] == 1:\n                    for k in range(n):\n                        if k!= i and k!= j:\n                            if preferences[i][k] == 1 and preferences[k][j] == 1:\n                                if pairs[i][0] == pairs[k][0] and pairs[i][1] == pairs[k][1]:\n                                    unhappy += 1\n        return unhappy\n"
    },
    {
        "number": 1584,
        "title": "Min Cost to Connect All Points",
        "difficulty": 1,
        "answer": "        n = len(points)\n        if n == 0:\n            return 0\n        dp = [[0] * n for _ in range(n)]\n        for i in range(n):\n            for j in range(i + 1, n):\n                dp[i][j] = dp[j][i] = abs(points[i][0] - points[j][0]) + abs(points[i][1] - points[j][1])\n        return min(dp[0])\n"
    },
    {
        "number": 1585,
        "title": "Check If String Is Transformable With Substring Sort Operations",
        "difficulty": 2,
        "answer": "        if len(s)!= len(t):\n            return False\n        if len(s) == 0:\n            return True\n        if s[0] < t[0]:\n            return self.isTransformable(s[1:], t[1:])\n        if s[0] > t[0]:\n            return self.isTransformable(s[1:], t[1:])\n        return self.isTransformable(s[1:], t[1:])"
    },
    {
        "number": 1588,
        "title": "Sum of All Odd Length Subarrays",
        "difficulty": 0,
        "answer": "        n = len(arr)\n        if n == 0:\n            return 0\n        if n == 1:\n            return arr[0]\n        if n == 2:\n            return arr[0] + arr[1]\n        if n == 3:\n            return arr[0] + arr[1] + arr[2]\n        if n == 4:\n            return arr[0] + arr[1] + arr[2] + arr[3]\n        if n == 5:\n            return arr[0] + arr[1] + arr[2] + arr[3] + arr[4]\n        if n == 6:\n            return arr[0] + arr[1] + arr[2] + arr[3] + arr[4] + arr[5]\n        if n == 7:\n            return arr[0] + arr[1] + arr[2] + arr[3] + arr[4] + arr[5] + arr[6]\n        if n == 8:\n            return arr[0] + arr[1] + arr[2] + arr[3]"
    },
    {
        "number": 1589,
        "title": "Maximum Sum Obtained of Any Permutation",
        "difficulty": 1,
        "answer": "        n = len(nums)\n        if n == 0:\n            return 0\n        if n == 1:\n            return nums[0]\n        if n == 2:\n            return max(nums[0] + nums[1], nums[0] + nums[1])\n        if n == 3:\n            return max(nums[0] + nums[1] + nums[2], nums[0] + nums[1] + nums[2])\n        if n == 4:\n            return max(nums[0] + nums[1] + nums[2] + nums[3], nums[0] + nums[1] + nums[2] + nums[3])\n        if n == 5:\n            return max(nums[0] + nums[1] + nums[2] + nums[3] + nums[4], nums[0] + nums[1] + nums[2] + nums[3] + nums[4])\n        if n == 6:\n"
    },
    {
        "number": 1590,
        "title": "Make Sum Divisible by P",
        "difficulty": 1,
        "answer": "        n = len(nums)\n        if n == 0:\n            return -1\n        if p == 0:\n            return 0\n        if p > nums[0]:\n            return 0\n        if p == nums[0]:\n            return 1\n        if p == nums[0] + nums[1]:\n            return 2\n        if p == nums[0] + nums[1] + nums[2]:\n            return 3\n        if p == nums[0] + nums[1] + nums[2] + nums[3]:\n            return 4\n        if p == nums[0] + nums[1] + nums[2] + nums[3] + nums[4]:\n            return 5\n        if p == nums[0] + nums[1] + nums[2] + nums[3] + nums[4] + nums[5]:\n            return 6\n        if p == nums[0] + nums[1] + nums[2] + nums[3] + nums"
    },
    {
        "number": 1591,
        "title": "Strange Printer II",
        "difficulty": 2,
        "answer": "        m = len(targetGrid)\n        n = len(targetGrid[0])\n        if m == 0 or n == 0:\n            return False\n        if m == 1 or n == 1:\n            return True\n        if m == 2 or n == 2:\n            return True\n        if m == 3 or n == 3:\n            return True\n        if m == 4 or n == 4:\n            return True\n        if m == 5 or n == 5:\n            return True\n        if m == 6 or n == 6:\n            return True\n        if m == 7 or n == 7:\n            return True\n        if m == 8 or n == 8:\n            return True\n        if m == 9 or n == 9:\n            return True\n        if m == 10 or n == 10:\n            return True\n        if m == 11 or n == 11:\n            return True\n        if m == 12 or n == 12:\n            return True\n        if m == 13 or n == 13:\n            return True\n        if m == 14 or n == 14:\n            return True\n        if m == 15"
    },
    {
        "number": 1592,
        "title": "Rearrange Spaces Between Words",
        "difficulty": 0,
        "answer": "        # DP\n        # dp[i][j] = dp[i-1][j] + dp[i-1][j-1]\n        # dp[i][j] = dp[i-1][j] + dp[i-1][j-1] + dp[i-1][j-2]\n        # dp[i][j] = dp[i-1][j] + dp[i-1][j-1] + dp[i-1][j-2] + dp[i-1][j-3]\n        # dp[i][j] = dp[i-1][j] + dp[i-1][j-1] + dp[i-1][j-2] + dp[i-1][j-3] + dp[i-1][j-4]\n        # dp[i][j] = dp[i-1][j] + dp[i-1][j-1] + dp[i-1][j-2] + dp"
    },
    {
        "number": 1593,
        "title": "Split a String Into the Max Number of Unique Substrings",
        "difficulty": 1,
        "answer": "        if not s:\n            return 0\n        n = len(s)\n        dp = [1] * n\n        for i in range(1, n):\n            dp[i] = max(dp[i - 1] + 1, 1)\n        for i in range(2, n):\n            for j in range(i):\n                if s[i - 1] == s[j]:\n                    dp[i] = max(dp[i], dp[j] + 1)\n        return dp[n - 1]\n"
    },
    {
        "number": 1594,
        "title": "Maximum Non Negative Product in a Matrix",
        "difficulty": 1,
        "answer": "        m, n = len(grid), len(grid[0])\n        if m == 0 or n == 0:\n            return 0\n        if m == 1 or n == 1:\n            return grid[0][0]\n        if m == 2 or n == 2:\n            return grid[0][0] * grid[1][1]\n        if m == 3 or n == 3:\n            return grid[0][0] * grid[1][1] * grid[2][2]\n        if m == 4 or n == 4:\n            return grid[0][0] * grid[1][1] * grid[2][2] * grid[3][3]\n        if m == 5 or n == 5:\n            return grid[0][0] * grid[1][1] * grid[2][2] * grid[3][3] * grid[4][4]\n        if m == 6 or n == 6:\n            return grid[0][0] * grid[1][1] * grid[2][2] * grid[3][3] * grid[4][4] * grid"
    },
    {
        "number": 1595,
        "title": "Minimum Cost to Connect Two Groups of Points",
        "difficulty": 2,
        "answer": "        n = len(cost)\n        m = len(cost[0])\n        dp = [[0] * m for _ in range(n)]\n        for i in range(n):\n            for j in range(m):\n                dp[i][j] = cost[i][j]\n        for i in range(n):\n            for j in range(m):\n                if i == 0 or j == 0:\n                    continue\n                dp[i][j] = min(dp[i][j], dp[i - 1][j] + dp[i][j - 1])\n        return dp[n - 1][m - 1]\n"
    },
    {
        "number": 1598,
        "title": "Crawler Log Folder",
        "difficulty": 0,
        "answer": "        logs = logs[:]\n        logs.append(\"..\")\n        logs.append(\"..\")\n        logs.append(\"..\")\n        logs.append(\"..\")\n        logs.append(\"..\")\n        logs.append(\"..\")\n        logs.append(\"..\")\n        logs.append(\"..\")\n        logs.append(\"..\")\n        logs.append(\"..\")\n        logs.append(\"..\")\n        logs.append(\"..\")\n        logs.append(\"..\")\n        logs.append(\"..\")\n        logs.append(\"..\")\n        logs.append(\"..\")\n        logs.append(\"..\")\n        logs.append(\"..\")\n        logs.append(\"..\")\n        logs.append(\"..\")\n        logs.append(\"..\")\n        logs.append(\"..\")\n        logs.append(\"..\")\n        logs.append(\"..\")\n        logs.append(\"..\")\n        logs.append(\"..\")\n        logs.append(\"..\")"
    },
    {
        "number": 1599,
        "title": "Maximum Profit of Operating a Centennial Wheel",
        "difficulty": 1,
        "answer": "        n = len(customers)\n        if n == 0:\n            return 0\n        if n == 1:\n            return 0\n        if n == 2:\n            return 0\n        if n == 3:\n            return 0\n        if n == 4:\n            return 0\n        if n == 5:\n            return 0\n        if n == 6:\n            return 0\n        if n == 7:\n            return 0\n        if n == 8:\n            return 0\n        if n == 9:\n            return 0\n        if n == 10:\n            return 0\n        if n == 11:\n            return 0\n        if n == 12:\n            return 0\n        if n == 13:\n            return 0\n        if n == 14:\n            return 0\n        if n == 15:\n            return 0\n        if n == 16:\n            return 0\n        if n == 17:\n            return 0\n        if n == 18:\n            return 0\n        if n == 19:\n            return 0\n        if n == 20:\n            return 0\n        if n == 21:\n            return 0"
    },
    {
        "number": 1600,
        "title": "Throne Inheritance",
        "difficulty": 1,
        "answer": "    def getInheritanceOrder(self) -> List[str]:\n        \"\"\"\n        A kingdom consists of a king, his children, his grandchildren, and so on. Every once in a while, someone in the family dies or a child is born.\n        The kingdom has a well-defined order of inheritance that consists of the king as the first member. Let's define the recursive function Successor(x, curOrder), which given a person x and the inheritance order so far, returns who should be the next person after x in the order of inheritance.\n        Successor(x, curOrder):\n            if x has no children or all of x's children are in curOrder:\n                if x is the king return null\n                else return Successor(x's parent, curOrder)\n            else return x's oldest child who's not in curOrder\n        For example, assume we have a kingdom that consists of the king, his children Alice and Bob (Alice is older than Bob), and finally Alice's son Jack.\n            In the beginning, curOrder will be [\"king\"].\n            Calling Successor(king, curOrder) will return Alice, so we append to"
    },
    {
        "number": 1601,
        "title": "Maximum Number of Achievable Transfer Requests",
        "difficulty": 2,
        "answer": "        # write your code here\n        if n == 0:\n            return 0\n        elif n == 1:\n            return 1\n        elif n == 2:\n            return 2\n        elif n == 3:\n            return 3\n        elif n == 4:\n            return 4\n        else:\n            return 5"
    },
    {
        "number": 1603,
        "title": "Design Parking System",
        "difficulty": 0,
        "answer": "        big_space = self.get_space(1)\n        medium_space = self.get_space(2)\n        small_space = self.get_space(3)\n        if carType == 1:\n            return big_space\n        elif carType == 2:\n            return medium_space\n        elif carType == 3:\n            return small_space\n        else:\n            return False"
    },
    {
        "number": 1604,
        "title": "Alert Using Same Key-Card Three or More Times in a One Hour Period",
        "difficulty": 1,
        "answer": "        # keyName: List[str], keyTime: List[str]\n        # keyName: List[str], keyTime: List[str]\n        # keyName: List[str], keyTime: List[str]\n        # keyName: List[str], keyTime: List[str]\n        # keyName: List[str], keyTime: List[str]\n        # keyName: List[str], keyTime: List[str]\n        # keyName: List[str], keyTime: List[str]\n        # keyName: List[str], keyTime: List[str]\n        # keyName: List[str], keyTime: List[str]\n        # keyName: List[str], keyTime: List[str]\n        # keyName: List[str], keyTime: List[str]\n        # keyName: List[str], keyTime: List[str]\n        # keyName: List[str], keyTime: List[str]\n        # keyName: List[str], keyTime: List[str]\n        # keyName: List[str], keyTime:"
    },
    {
        "number": 1605,
        "title": "Find Valid Matrix Given Row and Column Sums",
        "difficulty": 1,
        "answer": "        ans = []\n        for i in range(len(rowSum)):\n            for j in range(len(colSum)):\n                if rowSum[i] == colSum[j]:\n                    ans.append([rowSum[i], colSum[j]])\n        return ans\n"
    },
    {
        "number": 1606,
        "title": "Find Servers That Handled Most Number of Requests",
        "difficulty": 2,
        "answer": "        result = []\n        for i in range(len(arrival)):\n            if arrival[i] < load[i]:\n                result.append(i)\n            else:\n                result.append(i % k)\n        return result\n"
    },
    {
        "number": 1608,
        "title": "Special Array With X Elements Greater Than or Equal X",
        "difficulty": 0,
        "answer": "        nums.sort()\n        for i in range(len(nums)):\n            if nums[i] >= nums[i+1]:\n                return nums[i]\n        return -1\n"
    },
    {
        "number": 1609,
        "title": "Even Odd Tree",
        "difficulty": 1,
        "answer": "        if not root:\n            return True\n        if root.left is None and root.right is None:\n            return True\n        if root.left is None:\n            return self.isEvenOddTree(root.right)\n        if root.right is None:\n            return self.isEvenOddTree(root.left)\n        if root.left.val == root.right.val:\n            return self.isEvenOddTree(root.left) and self.isEvenOddTree(root.right)\n        return False"
    },
    {
        "number": 1610,
        "title": "Maximum Number of Visible Points",
        "difficulty": 2,
        "answer": "        # https://discuss.leetcode.com/topic/83561/java-solution-with-explanation\n        # https://discuss.leetcode.com/topic/83561/java-solution-with-explanation\n        # https://discuss.leetcode.com/topic/83561/java-solution-with-explanation\n        # https://discuss.leetcode.com/topic/83561/java-solution-with-explanation\n        # https://discuss.leetcode.com/topic/83561/java-solution-with-explanation\n        # https://discuss.leetcode.com/topic/83561/java-solution-with-explanation\n        # https://discuss.leetcode.com/topic/83561/java-solution-with-explanation\n        # https://discuss.leetcode.com/topic/83561/java-solution-with-explanation\n        # https://discuss.leetcode"
    },
    {
        "number": 1611,
        "title": "Minimum One Bit Operations to Make Integers Zero",
        "difficulty": 2,
        "answer": "        return self.helper(n)"
    },
    {
        "number": 1614,
        "title": "Maximum Nesting Depth of the Parentheses",
        "difficulty": 0,
        "answer": "        stack = []\n        for c in s:\n            if c == \"(\":\n                stack.append(c)\n            elif c == \")\":\n                if len(stack) == 0:\n                    return 0\n                else:\n                    stack.pop()\n            else:\n                if len(stack) == 0:\n                    return 0\n                else:\n                    stack.pop()\n        return len(stack)\n"
    },
    {
        "number": 1615,
        "title": "Maximal Network Rank",
        "difficulty": 1,
        "answer": "        # DP\n        dp = [[0] * n for _ in range(n)]\n        for i in range(n):\n            for j in range(n):\n                if i == j:\n                    dp[i][j] = 1\n                else:\n                    for k in range(n):\n                        if i!= k and j!= k:\n                            dp[i][j] = max(dp[i][j], dp[i][k] + dp[k][j])\n        return dp[0][n-1]"
    },
    {
        "number": 1616,
        "title": "Split Two Strings to Make Palindrome",
        "difficulty": 1,
        "answer": "        if len(a)!= len(b):\n            return False\n        for i in range(len(a)):\n            if a[i]!= b[i]:\n                return False\n        return True\n"
    },
    {
        "number": 1617,
        "title": "Count Subtrees With Max Distance Between Cities",
        "difficulty": 2,
        "answer": "        diameter = [0] * (n - 1)\n        for i in range(n - 1):\n            diameter[i] = max(diameter[i - 1], edges[i][1] - edges[i][0])\n        return [diameter[i] for i in range(n - 1)]\n"
    },
    {
        "number": 1619,
        "title": "Mean of Array After Removing Some Elements",
        "difficulty": 0,
        "answer": "        if len(arr) == 0:\n            return 0\n        min_val = min(arr)\n        max_val = max(arr)\n        if min_val == max_val:\n            return min_val\n        return sum(arr) / len(arr)"
    },
    {
        "number": 1620,
        "title": "Coordinate With Maximum Network Quality",
        "difficulty": 1,
        "answer": "        # Sort the towers by the quality\n        towers.sort(key=lambda x: x[2])"
    },
    {
        "number": 1621,
        "title": "Number of Sets of K Non-Overlapping Line Segments",
        "difficulty": 1,
        "answer": "        if k == 0:\n            return 0\n        if k == 1:\n            return 1\n        if k == 2:\n            return 2\n        if k == 3:\n            return 4\n        if k == 4:\n            return 8\n        if k == 5:\n            return 16\n        if k == 6:\n            return 32\n        if k == 7:\n            return 64\n        if k == 8:\n            return 128\n        if k == 9:\n            return 256\n        if k == 10:\n            return 512\n        if k == 11:\n            return 1024\n        if k == 12:\n            return 2048\n        if k == 13:\n            return 4096\n        if k == 14:\n            return 8192\n        if k == 15:\n            return 16384\n        if k == 16:\n            return 32768\n        if k == 17:\n            return 65536\n        if k == 18:\n            return 131072\n        if k == 19:\n            return 262144\n        if k == 20:\n            return 524288\n        if k == 21:\n            return 10"
    },
    {
        "number": 1622,
        "title": "Fancy Sequence",
        "difficulty": 2,
        "answer": "    def __str__(self):\n        return str(self.sequence)"
    },
    {
        "number": 1624,
        "title": "Largest Substring Between Two Equal Characters",
        "difficulty": 0,
        "answer": "        if not s:\n            return 0\n        if len(s) == 1:\n            return 0\n        if len(s) == 2:\n            return 1\n        ans = 0\n        for i in range(1, len(s)):\n            if s[i] == s[i - 1]:\n                ans = max(ans, i - 1)\n        return ans\n"
    },
    {
        "number": 1625,
        "title": "Lexicographically Smallest String After Applying Operations",
        "difficulty": 1,
        "answer": "        # DP\n        # dp[i][j] = min(dp[i-1][j], dp[i-1][j-a], dp[i-1][j-b])\n        # dp[i][j] = min(dp[i-1][j], dp[i-1][j-a], dp[i-1][j-b])\n        # dp[i][j] = min(dp[i-1][j], dp[i-1][j-a], dp[i-1][j-b])\n        # dp[i][j] = min(dp[i-1][j], dp[i-1][j-a], dp[i-1][j-b])\n        # dp[i][j] = min(dp[i-1][j], dp[i-1][j-a], dp[i-1][j-b])\n        # dp[i][j] = min(dp[i-1][j], dp[i-1][j-a],"
    },
    {
        "number": 1626,
        "title": "Best Team With No Conflicts",
        "difficulty": 1,
        "answer": "        # dp[i][j] = max(dp[i-1][j], dp[i-1][j-1])\n        dp = [[0] * len(ages) for _ in range(len(scores))]\n        for i in range(len(scores)):\n            for j in range(len(ages)):\n                dp[i][j] = max(dp[i][j], dp[i-1][j] + scores[i])\n        return dp[-1][-1]\n"
    },
    {
        "number": 1627,
        "title": "Graph Connectivity With Threshold",
        "difficulty": 2,
        "answer": "        ans = [False] * len(queries)\n        for i in range(len(queries)):\n            for j in range(i+1, len(queries)):\n                if queries[i][0] % queries[j][0] == 0 and queries[i][1] % queries[j][1] == 0:\n                    ans[i] = ans[j] = True\n        return ans\n"
    },
    {
        "number": 1629,
        "title": "Slowest Key",
        "difficulty": 0,
        "answer": "        if len(releaseTimes) == 0 or len(keysPressed) == 0:\n            return \"\"\n        if len(releaseTimes) == 1:\n            return keysPressed[0]\n        if len(releaseTimes) == 2:\n            if releaseTimes[0] == releaseTimes[1]:\n                return keysPressed[0]\n            else:\n                return keysPressed[releaseTimes[0]]\n        if len(releaseTimes) == 3:\n            if releaseTimes[0] == releaseTimes[1] and releaseTimes[1] == releaseTimes[2]:\n                return keysPressed[releaseTimes[0]]\n            else:\n                return keysPressed[releaseTimes[releaseTimes[0]]]\n        if len(releaseTimes) == 4:\n            if releaseTimes[0] == releaseTimes[1] and releaseTimes[1] == releaseTimes[2] and releaseTimes[2] == releaseTimes[3]:\n                return keysPressed[releaseTimes[0]]\n            else:\n                return keysPressed[releaseTimes[releaseTimes[releaseTimes[0]]]]\n        if len"
    },
    {
        "number": 1630,
        "title": "Arithmetic Subarrays",
        "difficulty": 1,
        "answer": "        ans = []\n        for i in range(len(nums)):\n            if i == 0:\n                ans.append(True)\n            else:\n                if nums[i] - nums[i-1] == l[i-1] - l[i]:\n                    ans.append(True)\n                else:\n                    ans.append(False)\n        return ans"
    },
    {
        "number": 1631,
        "title": "Path With Minimum Effort",
        "difficulty": 1,
        "answer": "        # DP\r\n        # dp[i][j] = min(dp[i-1][j], dp[i][j-1], dp[i-1][j-1])\r\n        # dp[i][j] = min(dp[i-1][j], dp[i][j-1], dp[i-1][j-1])\r\n        # dp[i][j] = min(dp[i-1][j], dp[i][j-1], dp[i-1][j-1])\r\n        # dp[i][j] = min(dp[i-1][j], dp[i][j-1], dp[i-1][j-1])\r\n        dp = [[0 for _ in range(len(heights))] for _ in range(len(heights))]\r\n        for i in range(len(heights)):\r\n            for j in range(len(heights[0])):\r\n                dp[i][j] = min(dp[i][j], dp"
    },
    {
        "number": 1632,
        "title": "Rank Transform of a Matrix",
        "difficulty": 2,
        "answer": "        m = len(matrix)\n        n = len(matrix[0])\n        ans = [[0] * n for _ in range(m)]\n        for i in range(m):\n            for j in range(n):\n                if i == 0 or j == 0:\n                    ans[i][j] = 1\n                else:\n                    ans[i][j] = max(ans[i-1][j], ans[i][j-1]) + 1\n        return ans"
    },
    {
        "number": 1636,
        "title": "Sort Array by Increasing Frequency",
        "difficulty": 0,
        "answer": "        nums.sort(reverse=True)\n        return nums"
    },
    {
        "number": 1637,
        "title": "Widest Vertical Area Between Two Points Containing No Points",
        "difficulty": 1,
        "answer": "        n = len(points)\n        if n == 0:\n            return 0\n        if n == 1:\n            return 0\n        if n == 2:\n            return max(points[0][0] - points[1][0], points[1][0] - points[0][0])\n        dp = [[0] * (n + 1) for _ in range(n + 1)]\n        dp[0][0] = 0\n        for i in range(1, n + 1):\n            dp[i][0] = dp[i - 1][0]\n        for i in range(1, n + 1):\n            for j in range(1, n + 1):\n                if i == 1 or j == 1:\n                    dp[i][j] = dp[i - 1][j]\n                elif points[i - 1][j - 1] == points[i - 1][j]:\n                    dp[i][j] = dp[i - 1][j - 1] + 1\n                else:\n                    dp[i][j] = max(dp[i - 1"
    },
    {
        "number": 1638,
        "title": "Count Substrings That Differ by One Character",
        "difficulty": 1,
        "answer": "        if not s or not t:\n            return 0\n        n = len(s)\n        m = len(t)\n        dp = [[0] * (m + 1) for _ in range(n + 1)]\n        for i in range(1, n + 1):\n            for j in range(1, m + 1):\n                if s[i - 1] == t[j - 1]:\n                    dp[i][j] = dp[i - 1][j - 1] + 1\n                else:\n                    dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])\n        return dp[n][m]\n"
    },
    {
        "number": 1639,
        "title": "Number of Ways to Form a Target String Given a Dictionary",
        "difficulty": 2,
        "answer": "        n = len(words)\n        dp = [0] * (n + 1)\n        for i in range(n):\n            dp[i] = 1\n            for j in range(i + 1, n + 1):\n                if words[i][j] == target[i]:\n                    dp[j] = dp[j] + dp[j - 1]\n                else:\n                    dp[j] = dp[j] + dp[j - 1] % 109 + 7\n        return dp[n] % 109 + 7\n"
    },
    {
        "number": 1640,
        "title": "Check Array Formation Through Concatenation",
        "difficulty": 0,
        "answer": "        if not arr or not pieces:\n            return False\n        n = len(arr)\n        for i in range(n):\n            for j in range(i+1, n):\n                if arr[i] == arr[j]:\n                    return False\n        for i in range(n):\n            for j in range(i+1, n):\n                if pieces[i][0] == pieces[j][0]:\n                    return False\n        return True\n"
    },
    {
        "number": 1641,
        "title": "Count Sorted Vowel Strings",
        "difficulty": 1,
        "answer": "        count = 0\n        for i in range(1, n+1):\n            count += sum(1 for c in str(i) if c in \"aeiou\")\n        return count\n"
    },
    {
        "number": 1642,
        "title": "Furthest Building You Can Reach",
        "difficulty": 1,
        "answer": "        if len(heights) == 0:\n            return 0\n        if bricks == 0 and ladders == 0:\n            return 0\n        if bricks == 0:\n            return heights[0]\n        if ladders == 0:\n            return max(heights[0], heights[1])\n        if bricks > ladders:\n            return heights[0]\n        return max(heights[0], max(heights[1], heights[2]))"
    },
    {
        "number": 1643,
        "title": "Kth Smallest Instructions",
        "difficulty": 2,
        "answer": "        # DP\n        # dp[i][j] = min(dp[i-1][j], dp[i-1][j-1], dp[i-1][j+1])\n        # dp[i][j] = min(dp[i-1][j], dp[i-1][j-1], dp[i-1][j+1])\n        # dp[i][j] = min(dp[i-1][j], dp[i-1][j-1], dp[i-1][j+1])\n        # dp[i][j] = min(dp[i-1][j], dp[i-1][j-1], dp[i-1][j+1])\n        # dp[i][j] = min(dp[i-1][j], dp[i-1][j-1], dp[i-1][j+1])\n        # dp[i][j] = min(dp[i-1][j], dp[i-1][j-1],"
    },
    {
        "number": 1646,
        "title": "Get Maximum in Generated Array",
        "difficulty": 0,
        "answer": "        if n == 0:\n            return 0\n        if n == 1:\n            return 1\n        if n == 2:\n            return 2\n        if n == 3:\n            return 3\n        if n == 4:\n            return 4\n        if n == 5:\n            return 5\n        if n == 6:\n            return 6\n        if n == 7:\n            return 7\n        if n == 8:\n            return 8\n        if n == 9:\n            return 9\n        if n == 10:\n            return 10\n        if n == 11:\n            return 11\n        if n == 12:\n            return 12\n        if n == 13:\n            return 13\n        if n == 14:\n            return 14\n        if n == 15:\n            return 15\n        if n == 16:\n            return 16\n        if n == 17:\n            return 17\n        if n == 18:\n            return 18\n        if n == 19:\n            return 19\n        if n == 20:\n            return 20\n        if n == 21:\n            return 21\n        if n == 22:\n            "
    },
    {
        "number": 1647,
        "title": "Minimum Deletions to Make Character Frequencies Unique",
        "difficulty": 1,
        "answer": "        # DP\n        # dp[i][j] = min(dp[i-1][j], dp[i-1][j-1]) + 1\n        # dp[i][j] = min(dp[i-1][j], dp[i-1][j-1]) + 1\n        # dp[i][j] = min(dp[i-1][j], dp[i-1][j-1]) + 1\n        # dp[i][j] = min(dp[i-1][j], dp[i-1][j-1]) + 1\n        # dp[i][j] = min(dp[i-1][j], dp[i-1][j-1]) + 1\n        # dp[i][j] = min(dp[i-1][j], dp[i-1][j-1]) + 1\n        # dp[i][j] = min(dp[i-1][j], dp[i-1][j-1]) + 1\n        # dp[i][j"
    },
    {
        "number": 1648,
        "title": "Sell Diminishing-Valued Colored Balls",
        "difficulty": 1,
        "answer": "        if orders == 0:\n            return 0\n        if orders == 1:\n            return inventory[0]\n        if orders == 2:\n            return max(inventory[0] + inventory[1], inventory[0] + inventory[1])\n        if orders == 3:\n            return max(inventory[0] + inventory[1] + inventory[2], inventory[0] + inventory[1] + inventory[2])\n        if orders == 4:\n            return max(inventory[0] + inventory[1] + inventory[2] + inventory[3], inventory[0] + inventory[1] + inventory[2] + inventory[3])\n        if orders == 5:\n            return max(inventory[0] + inventory[1] + inventory[2] + inventory[3] + inventory[4], inventory[0] + inventory[1] + inventory[2] + inventory[3] + inventory[4])\n        if orders == 6:\n            return max(inventory[0] + inventory[1] + inventory[2] + inventory[3] + inventory[4] + inventory[5], inventory[0] +"
    },
    {
        "number": 1649,
        "title": "Create Sorted Array through Instructions",
        "difficulty": 2,
        "answer": "        nums = []\n        cost = 0\n        for i in instructions:\n            cost += min(nums[-1] - i, i - nums[-1])\n            nums.append(i)\n        return cost % 109 + 7"
    },
    {
        "number": 1652,
        "title": "Defuse the Bomb",
        "difficulty": 0,
        "answer": "        n = len(code)\n        if n == 0:\n            return []\n        if k == 0:\n            return [0] * n\n        if k < 0:\n            return [code[0] + k] * -k\n        if k > 0:\n            return [code[-1] - k] * k\n        return code\n"
    },
    {
        "number": 1653,
        "title": "Minimum Deletions to Make String Balanced",
        "difficulty": 1,
        "answer": "        # DP\n        # dp[i][j] = min(dp[i-1][j], dp[i][j-1]) + 1\n        # dp[i][j] = min(dp[i-1][j], dp[i][j-1]) + 1\n        # dp[i][j] = min(dp[i-1][j], dp[i][j-1]) + 1\n        # dp[i][j] = min(dp[i-1][j], dp[i][j-1]) + 1\n        # dp[i][j] = min(dp[i-1][j], dp[i][j-1]) + 1\n        # dp[i][j] = min(dp[i-1][j], dp[i][j-1]) + 1\n        # dp[i][j] = min(dp[i-1][j], dp[i][j-1]) + 1\n        # dp[i][j] = min(dp[i-1][j], dp"
    },
    {
        "number": 1654,
        "title": "Minimum Jumps to Reach Home",
        "difficulty": 1,
        "answer": "        if x < 0:\n            return -1\n        if x == 0:\n            return 0\n        if x == a or x == b:\n            return 1\n        if x == a + 1 or x == b - 1:\n            return 2\n        if x == a + 2 or x == b - 2:\n            return 3\n        if x == a + 3 or x == b - 3:\n            return 4\n        if x == a + 4 or x == b - 4:\n            return 5\n        if x == a + 5 or x == b - 5:\n            return 6\n        if x == a + 6 or x == b - 6:\n            return 7\n        if x == a + 7 or x == b - 7:\n            return 8\n        if x == a + 8 or x == b - 8:\n            return 9\n        if x == a + 9 or x == b - 9:\n            return 10\n        if x == a + 10 or x == b - 10:\n            return 11\n        if x == a + 11 or x == b - 11:\n            return 12\n        if x"
    },
    {
        "number": 1655,
        "title": "Distribute Repeating Integers",
        "difficulty": 2,
        "answer": "        n = len(nums)\n        m = len(quantity)\n        if n == 0 or m == 0:\n            return False\n        if n == 1:\n            return True\n        if m == 1:\n            return nums[0] == 1\n        if m == 2:\n            return nums[0] == 1 and nums[1] == 1\n        if m == 3:\n            return nums[0] == 1 and nums[1] == 1 and nums[2] == 1\n        if m == 4:\n            return nums[0] == 1 and nums[1] == 1 and nums[2] == 1 and nums[3] == 1\n        if m == 5:\n            return nums[0] == 1 and nums[1] == 1 and nums[2] == 1 and nums[3] == 1 and nums[4] == 1\n        if m == 6:\n            return nums[0] == 1 and nums[1] == 1 and nums[2] == 1 and nums[3] == 1 and"
    },
    {
        "number": 1656,
        "title": "Design an Ordered Stream",
        "difficulty": 0,
        "answer": "        pass"
    },
    {
        "number": 1657,
        "title": "Determine if Two Strings Are Close",
        "difficulty": 1,
        "answer": "        if len(word1)!= len(word2):\n            return False\n        for i in range(len(word1)):\n            if word1[i]!= word2[i]:\n                return False\n        return True\n"
    },
    {
        "number": 1658,
        "title": "Minimum Operations to Reduce X to Zero",
        "difficulty": 1,
        "answer": "        n = len(nums)\n        if n == 0:\n            return 0\n        if x == 0:\n            return 0\n        if x < 0:\n            return -1\n        if x > nums[-1]:\n            return -1\n        if x == nums[-1]:\n            return n\n        if x == nums[0]:\n            return n - 1\n        if x == nums[0] + nums[1]:\n            return n - 2\n        if x == nums[0] + nums[1] + nums[2]:\n            return n - 3\n        if x == nums[0] + nums[1] + nums[2] + nums[3]:\n            return n - 4\n        if x == nums[0] + nums[1] + nums[2] + nums[3] + nums[4]:\n            return n - 5\n        if x == nums[0] + nums[1] + nums[2] + nums[3] + nums[4] + nums"
    },
    {
        "number": 1659,
        "title": "Maximize Grid Happiness",
        "difficulty": 2,
        "answer": "        if introvertsCount == 0 and extrovertsCount == 0:\n            return 0"
    },
    {
        "number": 1662,
        "title": "Check If Two String Arrays are Equivalent",
        "difficulty": 0,
        "answer": "        if len(word1)!= len(word2):\n            return False\n        for i in range(len(word1)):\n            if word1[i]!= word2[i]:\n                return False\n        return True\n"
    },
    {
        "number": 1663,
        "title": "Smallest String With A Given Numeric Value",
        "difficulty": 1,
        "answer": "        dic = {'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5, 'f': 6, 'g': 7, 'h': 8, 'i': 9, 'j': 10, 'k': 11, 'l': 12,'m': 13, 'n': 14, 'o': 15, 'p': 16, 'q': 17, 'r': 18,'s': 19, 't': 20, 'u': 21, 'v': 22, 'w': 23, 'x': 24, 'y': 25, 'z': 26}\n        res = ''\n        while k:\n            res += dic[chr(k % 26)]\n            k /= 26\n        res += dic[chr(k % 26)]\n        return res\n"
    },
    {
        "number": 1664,
        "title": "Ways to Make a Fair Array",
        "difficulty": 1,
        "answer": "        nums.sort()\n        return sum(nums[i+1:]) - sum(nums[:i])\n"
    },
    {
        "number": 1665,
        "title": "Minimum Initial Energy to Finish Tasks",
        "difficulty": 2,
        "answer": "        n = len(tasks)\n        if n == 0:\n            return 0\n        if n == 1:\n            return tasks[0][1]\n        if n == 2:\n            return min(tasks[0][1], tasks[1][1])\n        if n == 3:\n            return min(tasks[0][1], min(tasks[1][1], tasks[2][1]))\n        if n == 4:\n            return min(tasks[0][1], min(tasks[1][1], min(tasks[2][1], tasks[3][1])))\n        if n == 5:\n            return min(tasks[0][1], min(tasks[1][1], min(tasks[2][1], min(tasks[3][1], tasks[4][1]))))\n        if n == 6:\n            return min(tasks[0][1], min(tasks[1][1], min(tasks[2][1], min(tasks[3][1], min(tasks[4][1], tasks[5"
    },
    {
        "number": 1668,
        "title": "Maximum Repeating Substring",
        "difficulty": 0,
        "answer": "        # DP\n        dp = [0] * (len(sequence) + 1)\n        dp[0] = 0\n        for i in range(1, len(sequence) + 1):\n            for j in range(i):\n                if sequence[j] == word:\n                    dp[i] = max(dp[i], dp[j] + 1)\n        return dp[-1]\n"
    },
    {
        "number": 1669,
        "title": "Merge In Between Linked Lists",
        "difficulty": 1,
        "answer": "        head = ListNode(0)\n        curr = head\n        for i in range(a, b):\n            curr.next = ListNode(0)\n            curr = curr.next\n        curr.next = list2\n        return head.next\n"
    },
    {
        "number": 1670,
        "title": "Design Front Middle Back Queue",
        "difficulty": 1,
        "answer": "        pass"
    },
    {
        "number": 1671,
        "title": "Minimum Number of Removals to Make Mountain Array",
        "difficulty": 2,
        "answer": "        n = len(nums)\n        if n < 3:\n            return n\n        for i in range(n - 1):\n            if nums[i] > nums[i + 1]:\n                return i + 1\n        return n\n"
    },
    {
        "number": 1672,
        "title": "Richest Customer Wealth",
        "difficulty": 0,
        "answer": "        m = len(accounts)\n        n = len(accounts[0])\n        max_wealth = 0\n        for i in range(m):\n            for j in range(n):\n                max_wealth = max(max_wealth, accounts[i][j])\n        return max_wealth\n"
    },
    {
        "number": 1673,
        "title": "Find the Most Competitive Subsequence",
        "difficulty": 1,
        "answer": "        nums.sort()\n        res = []\n        for i in range(len(nums) - k + 1):\n            if i == 0:\n                res.append(nums[i])\n            else:\n                if nums[i] < nums[i - 1]:\n                    res.append(nums[i])\n                else:\n                    break\n        return res\n"
    },
    {
        "number": 1674,
        "title": "Minimum Moves to Make Array Complementary",
        "difficulty": 1,
        "answer": "        n = len(nums)\n        if n == 0:\n            return 0\n        if n == 1:\n            return 1\n        if n == 2:\n            return 2\n        if n == 3:\n            return 3\n        if n == 4:\n            return 4\n        if n == 5:\n            return 5\n        if n == 6:\n            return 6\n        if n == 7:\n            return 7\n        if n == 8:\n            return 8\n        if n == 9:\n            return 9\n        if n == 10:\n            return 10\n        if n == 11:\n            return 11\n        if n == 12:\n            return 12\n        if n == 13:\n            return 13\n        if n == 14:\n            return 14\n        if n == 15:\n            return 15\n        if n == 16:\n            return 16\n        if n == 17:\n            return 17\n        if n == 18:\n            return 18\n        if n == 19:\n            return 19\n        if n == 20:\n            return 20\n        if n == 21:\n            return 21"
    },
    {
        "number": 1675,
        "title": "Minimize Deviation in Array",
        "difficulty": 2,
        "answer": "        if not nums:\n            return 0"
    },
    {
        "number": 1678,
        "title": "Goal Parser Interpretation",
        "difficulty": 0,
        "answer": "        if not command:\n            return \"\"\n        if command[0] == \"G\":\n            return \"Goal\"\n        if command[0] == \"(\":\n            return \"Goal\"\n        if command[0] == \"al\":\n            return \"al\"\n        if command[0] == \")\":\n            return \"Goal\"\n        if command[0] == \")al\":\n            return \"al\"\n        if command[0] == \"al)\":\n            return \"al\"\n        if command[0] == \"al)al\":\n            return \"al\"\n        if command[0] == \"al)al)\":\n            return \"al\"\n        if command[0] == \"al)al)al\":\n            return \"al\"\n        if command[0] == \"al)al)al)\":\n            return \"al\"\n        if command[0] == \"al)al)al)al\":\n            return \"al\"\n        if command[0] == \"al)al)al)al)\":\n            return \"al\"\n        if command[0] == \""
    },
    {
        "number": 1679,
        "title": "Max Number of K-Sum Pairs",
        "difficulty": 1,
        "answer": "        n = len(nums)\n        if k > n:\n            return 0\n        if k == 0:\n            return 1\n        if k == 1:\n            return n\n        if k == 2:\n            return min(nums)\n        if k == 3:\n            return min(nums) + min(nums)\n        if k == 4:\n            return min(nums) + min(nums) + min(nums)\n        if k == 5:\n            return min(nums) + min(nums) + min(nums) + min(nums)\n        if k == 6:\n            return min(nums) + min(nums) + min(nums) + min(nums) + min(nums)\n        if k == 7:\n            return min(nums) + min(nums) + min(nums) + min(nums) + min(nums) + min(nums)\n        if k == 8:\n            return min(nums) + min(nums) + min(nums) + min"
    },
    {
        "number": 1680,
        "title": "Concatenation of Consecutive Binary Numbers",
        "difficulty": 1,
        "answer": "        result = 0\n        while n > 0:\n            result = result * 2 + 1\n            n -= 1\n        return result % 109 + 7\n"
    },
    {
        "number": 1681,
        "title": "Minimum Incompatibility",
        "difficulty": 2,
        "answer": "        n = len(nums)\n        if k > n:\n            return -1\n        if k == 1:\n            return 0\n        if k == 2:\n            return min(nums) - max(nums)\n        if k == 3:\n            return min(nums) - max(nums) + min(nums) - max(nums)\n        if k == 4:\n            return min(nums) - max(nums) + min(nums) - max(nums) + min(nums) - max(nums)\n        if k == 5:\n            return min(nums) - max(nums) + min(nums) - max(nums) + min(nums) - max(nums) + min(nums) - max(nums)\n        if k == 6:\n            return min(nums) - max(nums) + min(nums) - max(nums) + min(nums) - max(nums) + min(nums) - max(nums) + min(nums)"
    },
    {
        "number": 1684,
        "title": "Count the Number of Consistent Strings",
        "difficulty": 0,
        "answer": "        words = sorted(words)\n        ans = 0\n        for word in words:\n            if word not in allowed:\n                break\n            ans += 1\n        return ans\n"
    },
    {
        "number": 1685,
        "title": "Sum of Absolute Differences in a Sorted Array",
        "difficulty": 1,
        "answer": "        result = [0] * len(nums)\n        for i in range(len(nums)):\n            for j in range(i+1, len(nums)):\n                result[i] += abs(nums[i]-nums[j])\n        return result"
    },
    {
        "number": 1686,
        "title": "Stone Game VI",
        "difficulty": 1,
        "answer": "        n = len(aliceValues)\n        if n!= len(bobValues):\n            return 0\n        max_points = 0\n        for i in range(n):\n            if aliceValues[i] > bobValues[i]:\n                max_points += aliceValues[i]\n            elif aliceValues[i] < bobValues[i]:\n                max_points += bobValues[i]\n            else:\n                max_points += aliceValues[i] + bobValues[i]\n        return max_points\n"
    },
    {
        "number": 1687,
        "title": "Delivering Boxes from Storage to Ports",
        "difficulty": 2,
        "answer": "        n = len(boxes)\n        if n == 0:\n            return 0\n        if n == 1:\n            return 1\n        if n == 2:\n            return 2\n        if n == 3:\n            return 3\n        if n == 4:\n            return 4\n        if n == 5:\n            return 5\n        if n == 6:\n            return 6\n        if n == 7:\n            return 7\n        if n == 8:\n            return 8\n        if n == 9:\n            return 9\n        if n == 10:\n            return 10\n        if n == 11:\n            return 11\n        if n == 12:\n            return 12\n        if n == 13:\n            return 13\n        if n == 14:\n            return 14\n        if n == 15:\n            return 15\n        if n == 16:\n            return 16\n        if n == 17:\n            return 17\n        if n == 18:\n            return 18\n        if n == 19:\n            return 19\n        if n == 20:\n            return 20\n        if n == 21:\n            return 21\n"
    },
    {
        "number": 1688,
        "title": "Count of Matches in Tournament",
        "difficulty": 0,
        "answer": "        return sum(1 for _ in range(n))\n"
    },
    {
        "number": 1689,
        "title": "Partitioning Into Minimum Number Of Deci-Binary Numbers",
        "difficulty": 1,
        "answer": "        if n == \"0\":\n            return 0\n        if n == \"1\":\n            return 1\n        if n[0] == \"0\":\n            return 0\n        if n[0] == \"1\":\n            return 1\n        if n[0] == \"2\":\n            return 1\n        if n[0] == \"3\":\n            return 1\n        if n[0] == \"4\":\n            return 1\n        if n[0] == \"5\":\n            return 1\n        if n[0] == \"6\":\n            return 1\n        if n[0] == \"7\":\n            return 1\n        if n[0] == \"8\":\n            return 1\n        if n[0] == \"9\":\n            return 1\n        if n[0] == \"0\":\n            return 1\n        if n[0] == \"1\":\n            return 1\n        if n[0] == \"2\":\n            return 1\n        if n[0] == \"3\":\n            return 1\n        if n[0] == \"4\":\n            return 1\n        "
    },
    {
        "number": 1690,
        "title": "Stone Game VII",
        "difficulty": 1,
        "answer": "        n = len(stones)\n        if n == 0:\n            return 0\n        if n == 1:\n            return stones[0]\n        if n == 2:\n            return stones[0] - stones[1]\n        if n == 3:\n            return stones[0] - stones[1] - stones[2]\n        if n == 4:\n            return stones[0] - stones[1] - stones[2] - stones[3]\n        if n == 5:\n            return stones[0] - stones[1] - stones[2] - stones[3] - stones[4]\n        if n == 6:\n            return stones[0] - stones[1] - stones[2] - stones[3] - stones[4] - stones[5]\n        if n == 7:\n            return stones[0] - stones[1] - stones[2] - stones[3] - stones[4] - stones[5] - stones[6]\n        if n == 8:\n            return stones[0] - stones[1] - stones[2] - stones[3]"
    },
    {
        "number": 1691,
        "title": "Maximum Height by Stacking Cuboids ",
        "difficulty": 2,
        "answer": "        n = len(cuboids)\n        if n == 0:\n            return 0\n        max_height = 0\n        for i in range(n):\n            for j in range(i+1, n):\n                if cuboids[i][0] <= cuboids[j][0] and cuboids[i][1] <= cuboids[j][1] and cuboids[i][2] <= cuboids[j][2]:\n                    max_height = max(max_height, cuboids[i][2] + cuboids[j][2])\n        return max_height\n"
    },
    {
        "number": 1694,
        "title": "Reformat Phone Number",
        "difficulty": 0,
        "answer": "        number = number.replace(\" \", \"\")\n        number = number.replace(\"-\", \"\")\n        number = number.replace(\"-\", \"\")\n        number = number.replace(\"-\", \"\")\n        number = number.replace(\"-\", \"\")\n        number = number.replace(\"-\", \"\")\n        number = number.replace(\"-\", \"\")\n        number = number.replace(\"-\", \"\")\n        number = number.replace(\"-\", \"\")\n        number = number.replace(\"-\", \"\")\n        number = number.replace(\"-\", \"\")\n        number = number.replace(\"-\", \"\")\n        number = number.replace(\"-\", \"\")\n        number = number.replace(\"-\", \"\")\n        number = number.replace(\"-\", \"\")\n        number = number.replace(\"-\", \"\")\n        number = number.replace(\"-\", \"\")\n        number = number.replace(\"-\", \"\")\n        number = number.replace(\"-\", \"\")\n        number = number.replace(\"-\", \"\")\n        number = number.replace(\"-\", \"\")"
    },
    {
        "number": 1695,
        "title": "Maximum Erasure Value",
        "difficulty": 1,
        "answer": "        n = len(nums)\n        if n == 0:\n            return 0\n        if n == 1:\n            return nums[0]\n        if n == 2:\n            return max(nums[0], nums[1])\n        if n == 3:\n            return max(nums[0], nums[1], nums[2])\n        if n == 4:\n            return max(nums[0], nums[1], nums[2], nums[3])\n        if n == 5:\n            return max(nums[0], nums[1], nums[2], nums[3], nums[4])\n        if n == 6:\n            return max(nums[0], nums[1], nums[2], nums[3], nums[4], nums[5])\n        if n == 7:\n            return max(nums[0], nums[1], nums[2], nums[3], nums[4], nums[5], nums[6])\n        if n == 8:\n            "
    },
    {
        "number": 1696,
        "title": "Jump Game VI",
        "difficulty": 1,
        "answer": "        n = len(nums)\n        if k > n:\n            return 0\n        if k == 0:\n            return nums[n - 1]\n        if k == 1:\n            return max(nums)\n        if k == 2:\n            return max(nums) + nums[n - 1]\n        if k == 3:\n            return max(nums) + nums[n - 1] + nums[n - 2]\n        if k == 4:\n            return max(nums) + nums[n - 1] + nums[n - 2] + nums[n - 3]\n        if k == 5:\n            return max(nums) + nums[n - 1] + nums[n - 2] + nums[n - 3] + nums[n - 4]\n        if k == 6:\n            return max(nums) + nums[n - 1] + nums[n - 2] + nums[n - 3] + nums[n - 4] + nums[n - 5]\n        if k"
    },
    {
        "number": 1697,
        "title": "Checking Existence of Edge Length Limited Paths",
        "difficulty": 2,
        "answer": "        # BFS\n        ans = [False] * len(queries)\n        visited = [False] * n\n        for i in range(n):\n            if visited[i]:\n                continue\n            queue = [i]\n            while queue:\n                curr = queue.pop(0)\n                visited[curr] = True\n                for j in range(len(edgeList[curr])):\n                    next = edgeList[curr][j]\n                    if visited[next] or ans[j]:\n                        continue\n                    queue.append(next)\n                    ans[j] = True\n        return ans"
    },
    {
        "number": 1700,
        "title": "Number of Students Unable to Eat Lunch",
        "difficulty": 0,
        "answer": "        students_queue = []\n        students_queue.append(students[0])\n        students_queue.append(students[1])\n        students_queue.append(students[2])\n        students_queue.append(students[3])\n        students_queue.append(students[4])\n        students_queue.append(students[5])\n        students_queue.append(students[6])\n        students_queue.append(students[7])\n        students_queue.append(students[8])\n        students_queue.append(students[9])\n        students_queue.append(students[10])\n        students_queue.append(students[11])\n        students_queue.append(students[12])\n        students_queue.append(students[13])\n        students_queue.append(students[14])\n        students_queue.append(students[15])\n        students_queue.append(students[16])\n        students_"
    },
    {
        "number": 1701,
        "title": "Average Waiting Time",
        "difficulty": 1,
        "answer": "        n = len(customers)\n        if n == 0:\n            return 0\n        if n == 1:\n            return customers[0][1]\n        if n == 2:\n            return (customers[0][1] + customers[1][1]) / 2.0\n        if n == 3:\n            return (customers[0][1] + customers[1][1] + customers[2][1]) / 3.0\n        if n == 4:\n            return (customers[0][1] + customers[1][1] + customers[2][1] + customers[3][1]) / 4.0\n        if n == 5:\n            return (customers[0][1] + customers[1][1] + customers[2][1] + customers[3][1] + customers[4][1]) / 5.0\n        if n == 6:\n            return (customers[0][1] + customers[1][1] + customers[2][1] + customers[3][1] + customers[4][1] + customers[5][1]) / 6.0"
    },
    {
        "number": 1702,
        "title": "Maximum Binary String After Change",
        "difficulty": 1,
        "answer": "        binary = binary.replace(\"0\", \"1\")\n        binary = binary.replace(\"1\", \"0\")\n        binary = binary.replace(\"00\", \"10\")\n        binary = binary.replace(\"10\", \"01\")\n        return binary\n"
    },
    {
        "number": 1703,
        "title": "Minimum Adjacent Swaps for K Consecutive Ones",
        "difficulty": 2,
        "answer": "        if not nums or k == 0:\n            return 0\n        n = len(nums)\n        if k == n:\n            return 1\n        if k == 1:\n            return n\n        if k == 2:\n            return n - 1\n        if k == 3:\n            return n - 2\n        if k == 4:\n            return n - 3\n        if k == 5:\n            return n - 4\n        if k == 6:\n            return n - 5\n        if k == 7:\n            return n - 6\n        if k == 8:\n            return n - 7\n        if k == 9:\n            return n - 8\n        if k == 10:\n            return n - 9\n        if k == 11:\n            return n - 10\n        if k == 12:\n            return n - 11\n        if k == 13:\n            return n - 12\n        if k == 14:\n            return n - 13\n        if k == 15:\n            return n - 14\n        if k == 16:\n            return n - 15\n        if k == 17:\n            return"
    },
    {
        "number": 1704,
        "title": "Determine if String Halves Are Alike",
        "difficulty": 0,
        "answer": "        if len(s) % 2!= 0: return False\n        v = 0\n        for i in range(len(s)):\n            if s[i] in \"AEIOU\":\n                v += 1\n            elif s[i] in \"aeiou\":\n                v -= 1\n        return v == 0"
    },
    {
        "number": 1705,
        "title": "Maximum Number of Eaten Apples",
        "difficulty": 1,
        "answer": "        n = len(days)\n        ans = 0\n        for i in range(n):\n            if days[i] == 0:\n                ans += apples[i]\n            else:\n                ans += apples[i] - 1\n        return ans"
    },
    {
        "number": 1706,
        "title": "Where Will the Ball Fall",
        "difficulty": 1,
        "answer": "        m, n = len(grid), len(grid[0])\n        ans = [0] * n\n        for i in range(m):\n            for j in range(n):\n                if grid[i][j] == 1:\n                    ans[j] = i\n        return ans"
    },
    {
        "number": 1707,
        "title": "Maximum XOR With an Element From Array",
        "difficulty": 2,
        "answer": "        ans = [0] * len(queries)\n        for i in range(len(queries)):\n            ans[i] = max(ans[i], max(nums[j] ^ queries[i][0] for j in range(i + 1, len(nums)) if nums[j] <= queries[i][1]))\n        return ans"
    },
    {
        "number": 1710,
        "title": "Maximum Units on a Truck",
        "difficulty": 0,
        "answer": "        n = len(boxTypes)\n        dp = [[0] * n for _ in range(truckSize)]\n        for i in range(n):\n            for j in range(truckSize):\n                if i == 0:\n                    dp[j][i] = boxTypes[i][0]\n                elif j == 0:\n                    dp[j][i] = boxTypes[i][0] + dp[0][i - 1]\n                elif j == 1:\n                    dp[j][i] = max(boxTypes[i][0] + dp[0][i - 1], boxTypes[i][0] + dp[1][i - 1])\n                elif j == 2:\n                    dp[j][i] = max(boxTypes[i][0] + dp[0][i - 1], boxTypes[i][0] + dp[1][i - 1], boxTypes[i][0] + dp[2][i - 1])\n                elif j == 3:\n                    dp[j][i] = max(boxTypes[i]["
    },
    {
        "number": 1711,
        "title": "Count Good Meals",
        "difficulty": 1,
        "answer": "        return sum(1 for i in range(len(deliciousness)) if i > 0 and deliciousness[i] == deliciousness[i-1]) % 109 + 7\n"
    },
    {
        "number": 1712,
        "title": "Ways to Split Array Into Three Subarrays",
        "difficulty": 1,
        "answer": "        return sum(nums) % 109 + 7"
    },
    {
        "number": 1713,
        "title": "Minimum Operations to Make a Subsequence",
        "difficulty": 2,
        "answer": "        n = len(target)\n        if n == 0:\n            return 0\n        elif n == 1:\n            return 1\n        elif n == 2:\n            return 2\n        elif n == 3:\n            return 3\n        elif n == 4:\n            return 4\n        elif n == 5:\n            return 5\n        elif n == 6:\n            return 6\n        elif n == 7:\n            return 7\n        elif n == 8:\n            return 8\n        elif n == 9:\n            return 9\n        else:\n            return 10"
    },
    {
        "number": 1716,
        "title": "Calculate Money in Leetcode Bank",
        "difficulty": 0,
        "answer": "        if n == 1:\n            return 1\n        if n == 2:\n            return 2\n        if n == 3:\n            return 3\n        if n == 4:\n            return 4\n        if n == 5:\n            return 5\n        if n == 6:\n            return 6\n        if n == 7:\n            return 7\n        if n == 8:\n            return 8\n        if n == 9:\n            return 9\n        if n == 10:\n            return 10\n        if n == 11:\n            return 11\n        if n == 12:\n            return 12\n        if n == 13:\n            return 13\n        if n == 14:\n            return 14\n        if n == 15:\n            return 15\n        if n == 16:\n            return 16\n        if n == 17:\n            return 17\n        if n == 18:\n            return 18\n        if n == 19:\n            return 19\n        if n == 20:\n            return 20\n        return n"
    },
    {
        "number": 1717,
        "title": "Maximum Score From Removing Substrings",
        "difficulty": 1,
        "answer": "        n = len(s)\n        dp = [0] * (n + 1)\n        dp[0] = 0\n        for i in range(1, n + 1):\n            dp[i] = max(dp[i - 1] + x, dp[i - 1] + y)\n        return dp[n]\n"
    },
    {
        "number": 1718,
        "title": "Construct the Lexicographically Largest Valid Sequence",
        "difficulty": 1,
        "answer": "        result = []\n        for i in range(n):\n            result.append(i)\n            for j in range(i+1, n):\n                result.append(j)\n                result.append(abs(j-i))\n        return result\n"
    },
    {
        "number": 1719,
        "title": "Number Of Ways To Reconstruct A Tree",
        "difficulty": 2,
        "answer": "        ways = 0\n        for i in range(len(pairs)):\n            for j in range(i+1, len(pairs)):\n                if pairs[i][0] < pairs[j][0] and pairs[i][1] > pairs[j][1]:\n                    ways += 1\n                elif pairs[i][0] > pairs[j][0] and pairs[i][1] < pairs[j][1]:\n                    ways += 1\n                elif pairs[i][0] == pairs[j][0] and pairs[i][1]!= pairs[j][1]:\n                    ways += 1\n        return ways\n"
    },
    {
        "number": 1720,
        "title": "Decode XORed Array",
        "difficulty": 0,
        "answer": "        ret = []\n        for i in range(first, len(encoded)):\n            ret.append(encoded[i] ^ encoded[i + 1])\n        return ret\n"
    },
    {
        "number": 1721,
        "title": "Swapping Nodes in a Linked List",
        "difficulty": 1,
        "answer": "        if not head:\n            return None\n        if k == 1:\n            return head\n        if k == 2:\n            return head\n        if k == 3:\n            return head\n        if k == 4:\n            return head\n        if k == 5:\n            return head\n        if k == 6:\n            return head\n        if k == 7:\n            return head\n        if k == 8:\n            return head\n        if k == 9:\n            return head\n        if k == 10:\n            return head\n        if k == 11:\n            return head\n        if k == 12:\n            return head\n        if k == 13:\n            return head\n        if k == 14:\n            return head\n        if k == 15:\n            return head\n        if k == 16:\n            return head\n        if k == 17:\n            return head\n        if k == 18:\n            return head\n        if k == 19:\n            return head\n        if k == 20:\n            return head\n        if k == 21:\n            return head\n        if k == 22:\n            return"
    },
    {
        "number": 1722,
        "title": "Minimize Hamming Distance After Swap Operations",
        "difficulty": 1,
        "answer": "        # https://leetcode.com/problems/minimum-hamming-distance/discuss/81494/C%2B%2B-Python-DP-solution\n        # https://leetcode.com/problems/minimum-hamming-distance/discuss/81494/C%2B%2B-Python-DP-solution\n        # https://leetcode.com/problems/minimum-hamming-distance/discuss/81494/C%2B%2B-Python-DP-solution\n        # https://leetcode.com/problems/minimum-hamming-distance/discuss/81494/C%2B%2B-Python-DP-solution\n        # https://leetcode.com/problems/minimum-hamming-distance/discuss/81494/C%2B%2B-Python-DP-solution\n        # https://leetcode.com/problems/minimum-hamming-distance/discuss/81494/C%2B%2B-Python-DP-s"
    },
    {
        "number": 1723,
        "title": "Find Minimum Time to Finish All Jobs",
        "difficulty": 2,
        "answer": "        # DP\n        # dp[i][j] = min(dp[i-1][j], dp[i-1][j-jobs[i]] + jobs[i])\n        # dp[i][j] = min(dp[i-1][j], dp[i-1][j-jobs[i]] + jobs[i])\n        # dp[i][j] = min(dp[i-1][j], dp[i-1][j-jobs[i]] + jobs[i])\n        # dp[i][j] = min(dp[i-1][j], dp[i-1][j-jobs[i]] + jobs[i])\n        # dp[i][j] = min(dp[i-1][j], dp[i-1][j-jobs[i]] + jobs[i])\n        # dp[i][j] = min(dp[i-1][j], dp[i-1][j-jobs[i]] + jobs[i])\n        # dp[i][j] = min("
    },
    {
        "number": 1725,
        "title": "Number Of Rectangles That Can Form The Largest Square",
        "difficulty": 0,
        "answer": "        n = len(rectangles)\n        ans = 0\n        for i in range(n):\n            for j in range(i+1, n):\n                if rectangles[i][0] <= rectangles[j][0] and rectangles[i][1] <= rectangles[j][1]:\n                    ans += 1\n        return ans\n"
    },
    {
        "number": 1726,
        "title": "Tuple with Same Product",
        "difficulty": 1,
        "answer": "        nums.sort()\n        ans = 0\n        for i in range(len(nums)):\n            for j in range(i+1, len(nums)):\n                if nums[i] * nums[j] == nums[i+1] * nums[j+1]:\n                    ans += 1\n        return ans\n"
    },
    {
        "number": 1727,
        "title": "Largest Submatrix With Rearrangements",
        "difficulty": 1,
        "answer": "        m, n = len(matrix), len(matrix[0])\n        if m == 0 or n == 0:\n            return 0\n        if m == 1 or n == 1:\n            return 1\n        if m == 2 or n == 2:\n            return min(matrix[0][0], matrix[1][0]) + min(matrix[0][1], matrix[1][1])\n        if m == 3 or n == 3:\n            return min(matrix[0][0], matrix[1][0], matrix[2][0]) + min(matrix[0][1], matrix[1][1], matrix[2][1]) + min(matrix[0][2], matrix[1][2], matrix[2][2])\n        if m == 4 or n == 4:\n            return min(matrix[0][0], matrix[1][0], matrix[2][0], matrix[3][0]) + min(matrix[0][1], matrix[1][1], matrix[2][1], matrix[3][1]) + min(matrix[0][2],"
    },
    {
        "number": 1728,
        "title": "Cat and Mouse II",
        "difficulty": 2,
        "answer": "        rows, cols = len(grid), len(grid[0])\n        if rows == 0 or cols == 0:\n            return False\n        # catJump and mouseJump are the maximum lengths Cat and Mouse can jump at a time, respectively. Cat and Mouse can jump less than the maximum length.\n        catJump = catJump if catJump > 0 else 1\n        mouseJump = mouseJump if mouseJump > 0 else 1\n        # catJump and mouseJump are the maximum lengths Cat and Mouse can jump at a time, respectively. Cat and Mouse can jump less than the maximum length.\n        # catJump and mouseJump are the maximum lengths Cat and Mouse can jump at a time, respectively. Cat and Mouse can jump less than the maximum length.\n        # catJump and mouseJump are the maximum lengths Cat and Mouse can jump at a time, respectively. Cat and Mouse can jump less than the maximum length.\n        # catJump and mouseJump are the maximum lengths Cat and Mouse can jump at a time, respectively. Cat and Mouse can jump less than the maximum length.\n        # catJump and mouseJump are the maximum lengths Cat and Mouse can jump at a time"
    },
    {
        "number": 1732,
        "title": "Find the Highest Altitude",
        "difficulty": 0,
        "answer": "        max_alt = 0\n        for i in range(len(gain)):\n            max_alt = max(max_alt, gain[i] + max_alt)\n        return max_alt\n"
    },
    {
        "number": 1733,
        "title": "Minimum Number of People to Teach",
        "difficulty": 1,
        "answer": "        # dp[i][j] = min(dp[i-1][j], dp[i-1][j-1]) + 1\n        # dp[i][j] = min(dp[i-1][j], dp[i-1][j-1]) + 1\n        # dp[i][j] = min(dp[i-1][j], dp[i-1][j-1]) + 1\n        # dp[i][j] = min(dp[i-1][j], dp[i-1][j-1]) + 1\n        # dp[i][j] = min(dp[i-1][j], dp[i-1][j-1]) + 1\n        # dp[i][j] = min(dp[i-1][j], dp[i-1][j-1]) + 1\n        # dp[i][j] = min(dp[i-1][j], dp[i-1][j-1]) + 1\n        # dp[i][j] = min("
    },
    {
        "number": 1734,
        "title": "Decode XORed Permutation",
        "difficulty": 1,
        "answer": "        n = len(encoded)\n        if n == 0:\n            return []\n        if n == 1:\n            return [encoded[0]]\n        if n == 2:\n            return [encoded[0] ^ encoded[1]]\n        if n == 3:\n            return [encoded[0] ^ encoded[1] ^ encoded[2]]\n        if n == 4:\n            return [encoded[0] ^ encoded[1] ^ encoded[2] ^ encoded[3]]\n        if n == 5:\n            return [encoded[0] ^ encoded[1] ^ encoded[2] ^ encoded[3] ^ encoded[4]]\n        if n == 6:\n            return [encoded[0] ^ encoded[1] ^ encoded[2] ^ encoded[3] ^ encoded[4] ^ encoded[5]]\n        if n == 7:\n            return [encoded[0] ^ encoded[1] ^ encoded[2] ^ encoded[3] ^ encoded[4] ^ encoded[5] ^ encoded[6]]\n        if n == 8:\n            return [encoded["
    },
    {
        "number": 1735,
        "title": "Count Ways to Make Array With Product",
        "difficulty": 2,
        "answer": "        ans = [1] * len(queries)\n        for i in range(len(queries)):\n            ans[i] = 1\n            for j in range(1, len(queries[i]) + 1):\n                ans[i] = (ans[i] * j) % 109 + 7\n        return ans"
    },
    {
        "number": 1736,
        "title": "Latest Time by Replacing Hidden Digits",
        "difficulty": 0,
        "answer": "        time = time.replace('?', '')\n        time = time.replace(' ', '')\n        time = time.replace(':', '')\n        time = time.replace('?', '')\n        time = time.replace(' ', '')\n        time = time.replace(':', '')\n        time = time.replace('?', '')\n        time = time.replace(' ', '')\n        time = time.replace(':', '')\n        time = time.replace('?', '')\n        time = time.replace(' ', '')\n        time = time.replace(':', '')\n        time = time.replace('?', '')\n        time = time.replace(' ', '')\n        time = time.replace(':', '')\n        time = time.replace('?', '')\n        time = time.replace(' ', '')\n        time = time.replace(':', '')\n        time = time.replace('?', '')\n        time = time.replace(' ', '')\n        time = time.replace(':', '')\n        time = time."
    },
    {
        "number": 1737,
        "title": "Change Minimum Characters to Satisfy One of Three Conditions",
        "difficulty": 1,
        "answer": "        # DP\n        # dp[i][j] = min(dp[i-1][j], dp[i-1][j-1], dp[i-1][j-2])\n        # dp[i][j] = min(dp[i-1][j], dp[i-1][j-1], dp[i-1][j-2])\n        # dp[i][j] = min(dp[i-1][j], dp[i-1][j-1], dp[i-1][j-2])\n        # dp[i][j] = min(dp[i-1][j], dp[i-1][j-1], dp[i-1][j-2])\n        # dp[i][j] = min(dp[i-1][j], dp[i-1][j-1], dp[i-1][j-2])\n        # dp[i][j] = min(dp[i-1][j], dp[i-1][j-1],"
    },
    {
        "number": 1738,
        "title": "Find Kth Largest XOR Coordinate Value",
        "difficulty": 1,
        "answer": "        # DP\n        # dp[i][j] = max(dp[i-1][j], dp[i-1][j-1])\n        # dp[i][j] = max(dp[i-1][j], dp[i-1][j-1])\n        # dp[i][j] = max(dp[i-1][j], dp[i-1][j-1])\n        # dp[i][j] = max(dp[i-1][j], dp[i-1][j-1])\n        # dp[i][j] = max(dp[i-1][j], dp[i-1][j-1])\n        # dp[i][j] = max(dp[i-1][j], dp[i-1][j-1])\n        # dp[i][j] = max(dp[i-1][j], dp[i-1][j-1])\n        # dp[i][j] = max(dp[i-1][j], dp"
    },
    {
        "number": 1739,
        "title": "Building Boxes",
        "difficulty": 2,
        "answer": "        return int(math.ceil(math.sqrt(n)))"
    },
    {
        "number": 1742,
        "title": "Maximum Number of Balls in a Box",
        "difficulty": 0,
        "answer": "        n = highLimit - lowLimit + 1\n        dp = [0] * (highLimit + 1)\n        for i in range(lowLimit, highLimit + 1):\n            dp[i] = sum(map(int, str(i)))\n        return max(dp)\n"
    },
    {
        "number": 1743,
        "title": "Restore the Array From Adjacent Pairs",
        "difficulty": 1,
        "answer": "        n = len(adjacentPairs)\n        if n == 0:\n            return []\n        if n == 1:\n            return adjacentPairs[0]\n        res = []\n        for i in range(n):\n            for j in range(i+1, n):\n                res.append(adjacentPairs[i][0] + adjacentPairs[j][1])\n        return res\n"
    },
    {
        "number": 1744,
        "title": "Can You Eat Your Favorite Candy on Your Favorite Day?",
        "difficulty": 1,
        "answer": "        ans = [False] * len(queries)\n        for i in range(len(queries)):\n            for j in range(len(queries[i])):\n                if queries[i][j] == 0:\n                    ans[i] = True\n                    break\n        for i in range(len(queries)):\n            for j in range(len(queries[i])):\n                if queries[i][j] == 1:\n                    ans[i] = ans[i] or (queries[i][j] == candiesCount[i])\n        return ans\n"
    },
    {
        "number": 1745,
        "title": "Palindrome Partitioning IV",
        "difficulty": 2,
        "answer": "        if len(s) < 3:\n            return False\n        for i in range(len(s) - 2):\n            if s[i] == s[i + 1] and s[i] == s[i + 2]:\n                return True\n        return False\n"
    },
    {
        "number": 1748,
        "title": "Sum of Unique Elements",
        "difficulty": 0,
        "answer": "        if not nums:\n            return 0\n        nums.sort()\n        return sum(nums)\n"
    },
    {
        "number": 1749,
        "title": "Maximum Absolute Sum of Any Subarray",
        "difficulty": 1,
        "answer": "        nums.sort()\n        max_sum = 0\n        for i in range(len(nums)):\n            max_sum = max(max_sum, nums[i] + abs(nums[i]))\n        return max_sum\n"
    },
    {
        "number": 1750,
        "title": "Minimum Length of String After Deleting Similar Ends",
        "difficulty": 1,
        "answer": "        # DP\n        # dp[i][j] = min(dp[i-1][j], dp[i-1][j-1], dp[i-1][j-2])\n        # dp[i][j] = min(dp[i-1][j], dp[i-1][j-1], dp[i-1][j-2])\n        # dp[i][j] = min(dp[i-1][j], dp[i-1][j-1], dp[i-1][j-2])\n        # dp[i][j] = min(dp[i-1][j], dp[i-1][j-1], dp[i-1][j-2])\n        # dp[i][j] = min(dp[i-1][j], dp[i-1][j-1], dp[i-1][j-2])\n        # dp[i][j] = min(dp[i-1][j], dp[i-1][j-1],"
    },
    {
        "number": 1751,
        "title": "Maximum Number of Events That Can Be Attended II",
        "difficulty": 2,
        "answer": "        events = sorted(events, key=lambda x: x[2])\n        ans = 0\n        for i in range(k):\n            ans += events[i][2]\n        return ans"
    },
    {
        "number": 1752,
        "title": "Check if Array Is Sorted and Rotated",
        "difficulty": 0,
        "answer": "        if not nums:\n            return False\n        n = len(nums)\n        if n == 1:\n            return True\n        if n == 2:\n            return nums[0] <= nums[1]\n        if n == 3:\n            return nums[0] <= nums[1] and nums[1] <= nums[2]\n        if n == 4:\n            return nums[0] <= nums[1] and nums[1] <= nums[2] and nums[2] <= nums[3]\n        if n == 5:\n            return nums[0] <= nums[1] and nums[1] <= nums[2] and nums[2] <= nums[3] and nums[3] <= nums[4]\n        if n == 6:\n            return nums[0] <= nums[1] and nums[1] <= nums[2] and nums[2] <= nums[3] and nums[3] <= nums[4] and nums[4] <="
    },
    {
        "number": 1753,
        "title": "Maximum Score From Removing Stones",
        "difficulty": 1,
        "answer": "        if a == 0 or b == 0 or c == 0:\n            return 0\n        if a == 1:\n            return b + c\n        if b == 1:\n            return a + c\n        if c == 1:\n            return a + b\n        return max(a, b, c)"
    },
    {
        "number": 1754,
        "title": "Largest Merge Of Two Strings",
        "difficulty": 1,
        "answer": "        # DP\n        # dp[i][j] = max(dp[i-1][j], dp[i-1][j-1]) + 1 if word1[i-1] == word2[j-1] else dp[i-1][j-1]\n        # dp[i][j] = max(dp[i-1][j], dp[i-1][j-1]) + 1 if word1[i-1] == word2[j-1] else dp[i-1][j-1]\n        # dp[i][j] = max(dp[i-1][j], dp[i-1][j-1]) + 1 if word1[i-1] == word2[j-1] else dp[i-1][j-1]\n        # dp[i][j] = max(dp[i-1][j], dp[i-1][j-1]) + 1 if word1[i-1] == word2[j-1] else dp[i-1][j-1"
    },
    {
        "number": 1755,
        "title": "Closest Subsequence Sum",
        "difficulty": 2,
        "answer": "        n = len(nums)\n        if n == 0:\n            return 0\n        if n == 1:\n            return abs(nums[0] - goal)\n        if goal < 0:\n            return min(abs(nums[i] - goal) for i in range(n))\n        else:\n            return min(abs(nums[i] - goal) for i in range(n))"
    },
    {
        "number": 1758,
        "title": "Minimum Changes To Make Alternating Binary String",
        "difficulty": 0,
        "answer": "        # DP\n        # dp[i][j] = min(dp[i-1][j], dp[i-1][j-1]) + 1\n        # dp[i][j] = min(dp[i-1][j], dp[i-1][j-1]) + 1\n        # dp[i][j] = min(dp[i-1][j], dp[i-1][j-1]) + 1\n        # dp[i][j] = min(dp[i-1][j], dp[i-1][j-1]) + 1\n        # dp[i][j] = min(dp[i-1][j], dp[i-1][j-1]) + 1\n        # dp[i][j] = min(dp[i-1][j], dp[i-1][j-1]) + 1\n        # dp[i][j] = min(dp[i-1][j], dp[i-1][j-1]) + 1\n        # dp[i][j"
    },
    {
        "number": 1759,
        "title": "Count Number of Homogenous Substrings",
        "difficulty": 1,
        "answer": "        # DP\r\n        # dp[i][j] = dp[i - 1][j] + dp[i - 1][j - 1]\r\n        # dp[i][j] = dp[i - 1][j] + dp[i - 1][j - 1] + dp[i - 1][j - 2]\r\n        # dp[i][j] = dp[i - 1][j] + dp[i - 1][j - 1] + dp[i - 1][j - 2] + dp[i - 1][j - 3]\r\n        # dp[i][j] = dp[i - 1][j] + dp[i - 1][j - 1] + dp[i - 1][j - 2] + dp[i - 1][j - 3] + dp[i - 1][j - 4]\r\n        # dp[i][j] = dp[i - 1][j] + dp[i - 1][j - 1] + dp[i - 1][j -"
    },
    {
        "number": 1760,
        "title": "Minimum Limit of Balls in a Bag",
        "difficulty": 1,
        "answer": "        n = len(nums)\n        if n == 0:\n            return 0\n        if n == 1:\n            return 0\n        if maxOperations == 1:\n            return nums[0]\n        if maxOperations == 2:\n            return min(nums[0], nums[1])\n        if maxOperations == 3:\n            return min(nums[0], min(nums[1], nums[2]))\n        if maxOperations == 4:\n            return min(nums[0], min(nums[1], min(nums[2], nums[3])))\n        if maxOperations == 5:\n            return min(nums[0], min(nums[1], min(nums[2], min(nums[3], nums[4]))))\n        if maxOperations == 6:\n            return min(nums[0], min(nums[1], min(nums[2], min(nums[3], min(nums[4], nums[5]))))\n        if maxOperations == 7:"
    },
    {
        "number": 1761,
        "title": "Minimum Degree of a Connected Trio in a Graph",
        "difficulty": 2,
        "answer": "        if n == 0:\n            return 0\n        if n == 1:\n            return 1\n        if n == 2:\n            return 2\n        if n == 3:\n            return 3\n        if n == 4:\n            return 4\n        if n == 5:\n            return 5\n        if n == 6:\n            return 6\n        if n == 7:\n            return 7\n        if n == 8:\n            return 8\n        if n == 9:\n            return 9\n        if n == 10:\n            return 10\n        if n == 11:\n            return 11\n        if n == 12:\n            return 12\n        if n == 13:\n            return 13\n        if n == 14:\n            return 14\n        if n == 15:\n            return 15\n        if n == 16:\n            return 16\n        if n == 17:\n            return 17\n        if n == 18:\n            return 18\n        if n == 19:\n            return 19\n        if n == 20:\n            return 20\n        if n == 21:\n            return 21\n        if n == 22:\n            "
    },
    {
        "number": 1763,
        "title": "Longest Nice Substring",
        "difficulty": 0,
        "answer": "        if not s:\n            return \"\"\n        if len(s) == 1:\n            return s\n        nice_substring = \"\"\n        for i in range(len(s)):\n            if s[i] in \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\":\n                if s[i] == s[0]:\n                    nice_substring = s[i:]\n                else:\n                    nice_substring = s[i:]\n                break\n        return nice_substring\n"
    },
    {
        "number": 1764,
        "title": "Form Array by Concatenating Subarrays of Another Array",
        "difficulty": 1,
        "answer": "        if len(groups) == 0:\n            return False\n        if len(nums) == 0:\n            return True\n        if len(groups) == 1:\n            return nums[groups[0][0]] == groups[0][1]\n        if len(groups) == 2:\n            return nums[groups[0][0]] == groups[1][1] and nums[groups[1][0]] == groups[1][1]\n        if len(groups) == 3:\n            return nums[groups[0][0]] == groups[1][1] and nums[groups[1][0]] == groups[2][1] and nums[groups[2][0]] == groups[2][1]\n        if len(groups) == 4:\n            return nums[groups[0][0]] == groups[1][1] and nums[groups[1][0]] == groups[2][1] and nums[groups[2][0]] == groups[3][1] and nums[groups[3][0]] == groups[3][1]\n        if len"
    },
    {
        "number": 1765,
        "title": "Map of Highest Peak",
        "difficulty": 1,
        "answer": "        m = len(isWater)\n        n = len(isWater[0])\n        height = [[0 for _ in range(n)] for _ in range(m)]\n        for i in range(m):\n            for j in range(n):\n                if isWater[i][j] == 0:\n                    height[i][j] = 1\n                elif isWater[i][j] == 1:\n                    height[i][j] = 0\n                else:\n                    height[i][j] = -1\n        for i in range(m):\n            for j in range(n):\n                if height[i][j] == -1:\n                    height[i][j] = max(height[i][j-1], height[i-1][j], height[i+1][j], height[i][j-1])\n        return height"
    },
    {
        "number": 1766,
        "title": "Tree of Coprimes",
        "difficulty": 2,
        "answer": "        ans = [-1] * len(nums)\n        for i in range(len(nums)):\n            for j in range(len(edges)):\n                if i == j:\n                    continue\n                if nums[i] % nums[j] == 0:\n                    ans[i] = j\n                    break\n        return ans\n"
    },
    {
        "number": 1768,
        "title": "Merge Strings Alternately",
        "difficulty": 0,
        "answer": "        if len(word1) > len(word2):\n            return word1 + word2\n        elif len(word1) < len(word2):\n            return word2 + word1\n        else:\n            return word1[:len(word1) - 1] + word2[len(word1) - 1:]"
    },
    {
        "number": 1769,
        "title": "Minimum Number of Operations to Move All Balls to Each Box",
        "difficulty": 1,
        "answer": "        n = len(boxes)\n        ans = [1] * n\n        for i in range(n):\n            for j in range(i + 1, n):\n                if boxes[i] == boxes[j]:\n                    ans[i] = min(ans[i], ans[j] + 1)\n                    ans[j] = min(ans[i], ans[j] + 1)\n        return ans\n"
    },
    {
        "number": 1770,
        "title": "Maximum Score from Performing Multiplication Operations",
        "difficulty": 2,
        "answer": "        n = len(nums)\n        m = len(multipliers)\n        if n == 0 or m == 0:\n            return 0\n        if n == 1:\n            return nums[0] * multipliers[0]\n        if m == 1:\n            return nums[0] * multipliers[0] + nums[1] * multipliers[1]\n        if m == 2:\n            return nums[0] * multipliers[0] + nums[1] * multipliers[1] + nums[2] * multipliers[2]\n        if m == 3:\n            return nums[0] * multipliers[0] + nums[1] * multipliers[1] + nums[2] * multipliers[2] + nums[3] * multipliers[3]\n        if m == 4:\n            return nums[0] * multipliers[0] + nums[1] * multipliers[1] + nums[2] * multipliers[2] + nums[3] * multipliers[3] + nums[4"
    },
    {
        "number": 1771,
        "title": "Maximize Palindrome Length From Subsequences",
        "difficulty": 2,
        "answer": "        # DP\n        # dp[i][j] = max(dp[i-1][j], dp[i-1][j-1]) + 1\n        # dp[i][j] = max(dp[i-1][j], dp[i-1][j-1]) + 1\n        # dp[i][j] = max(dp[i-1][j], dp[i-1][j-1]) + 1\n        # dp[i][j] = max(dp[i-1][j], dp[i-1][j-1]) + 1\n        # dp[i][j] = max(dp[i-1][j], dp[i-1][j-1]) + 1\n        # dp[i][j] = max(dp[i-1][j], dp[i-1][j-1]) + 1\n        # dp[i][j] = max(dp[i-1][j], dp[i-1][j-1]) + 1\n        # dp[i][j"
    },
    {
        "number": 1773,
        "title": "Count Items Matching a Rule",
        "difficulty": 0,
        "answer": "        count = 0\n        for i in range(len(items)):\n            if ruleKey == \"type\" and ruleValue == items[i][0]:\n                count += 1\n            elif ruleKey == \"color\" and ruleValue == items[i][1]:\n                count += 1\n            elif ruleKey == \"name\" and ruleValue == items[i][2]:\n                count += 1\n        return count\n"
    },
    {
        "number": 1774,
        "title": "Closest Dessert Cost",
        "difficulty": 1,
        "answer": "        # baseCosts: [1,7], toppingCosts: [3,4], target: 10\n        # baseCosts: [2,3], toppingCosts: [4,5,100], target: 18\n        # baseCosts: [3,10], toppingCosts: [2,5], target: 9\n        # baseCosts: [3,10], toppingCosts: [2,5], target: 8\n        # baseCosts: [3,10], toppingCosts: [2,5], target: 7\n        # baseCosts: [3,10], toppingCosts: [2,5], target: 6\n        # baseCosts: [3,10], toppingCosts: [2,5], target: 5\n        # baseCosts: [3,10], toppingCosts: [2,5], target: 4\n        # baseCosts: [3,10], toppingCosts: [2,5], target: 3\n        # baseCosts: [3,10], toppingCosts: [2,5], target: 2\n        # baseCosts: [3"
    },
    {
        "number": 1775,
        "title": "Equal Sum Arrays With Minimum Number of Operations",
        "difficulty": 1,
        "answer": "        nums1_len = len(nums1)\n        nums2_len = len(nums2)\n        if nums1_len == 0 or nums2_len == 0:\n            return -1\n        if nums1_len!= nums2_len:\n            return -1\n        if nums1_len == 1:\n            return 1\n        if nums1_len == 2:\n            return 2\n        if nums1_len == 3:\n            return 3\n        if nums1_len == 4:\n            return 4\n        if nums1_len == 5:\n            return 5\n        if nums1_len == 6:\n            return 6\n        if nums1_len == 7:\n            return 7\n        if nums1_len == 8:\n            return 8\n        if nums1_len == 9:\n            return 9\n        if nums1_len == 10:\n            return 10\n        if nums1_len == 11:\n            return 11\n        if nums1_len == 12:\n            return"
    },
    {
        "number": 1776,
        "title": "Car Fleet II",
        "difficulty": 2,
        "answer": "        ans = []\n        for i in range(len(cars)):\n            for j in range(i+1, len(cars)):\n                if cars[i][0] + cars[j][0] < cars[i][1]:\n                    ans.append(cars[i][1] - cars[j][1])\n        return ans"
    },
    {
        "number": 1779,
        "title": "Find Nearest Point That Has the Same X or Y Coordinate",
        "difficulty": 0,
        "answer": "        if not points:\n            return -1"
    },
    {
        "number": 1780,
        "title": "Check if Number is a Sum of Powers of Three",
        "difficulty": 1,
        "answer": "        if n < 3:\n            return False\n        if n % 3 == 0:\n            return True\n        if n % 9 == 0:\n            return True\n        if n % 27 == 0:\n            return True\n        return False\n"
    },
    {
        "number": 1781,
        "title": "Sum of Beauty of All Substrings",
        "difficulty": 1,
        "answer": "        ret = 0\n        for i in range(len(s)):\n            ret += s[i] in \"abcdefghijklmnopqrstuvwxyz\" and s[i]!= s[0] and s[i]!= s[-1] and s[i]!= s[i+1] and s[i]!= s[i-1] and s[i]!= s[i+2] and s[i]!= s[i-2] and s[i]!= s[i+3] and s[i]!= s[i-3] and s[i]!= s[i+4] and s[i]!= s[i-4] and s[i]!= s[i+5] and s[i]!= s[i-5] and s[i]!= s[i+6] and s[i]!= s[i-6] and s[i]!= s[i+7] and s[i]!= s[i-7] and s[i]!= s[i+8] and s[i]!= s["
    },
    {
        "number": 1782,
        "title": "Count Pairs Of Nodes",
        "difficulty": 2,
        "answer": "        answers = []\n        for i in range(len(queries)):\n            answers.append(0)\n            for j in range(len(queries)):\n                if i!= j:\n                    answers[i] += min(answers[j], edges[i][0] - edges[j][0] + edges[i][1] - edges[j][1])\n        return answers"
    },
    {
        "number": 1784,
        "title": "Check if Binary String Has at Most One Segment of Ones",
        "difficulty": 0,
        "answer": "        ones = 0\n        for i in range(len(s)):\n            if s[i] == '1':\n                ones += 1\n            else:\n                if ones > 0:\n                    ones = 0\n                else:\n                    return False\n        return True\n"
    },
    {
        "number": 1785,
        "title": "Minimum Elements to Add to Form a Given Sum",
        "difficulty": 1,
        "answer": "        # dp[i] = min(dp[i-1]+1, dp[i-1]+nums[i])\n        dp = [0] * (limit+1)\n        dp[0] = 0\n        for i in range(1, len(nums)+1):\n            dp[i] = min(dp[i-1]+1, dp[i-1]+abs(nums[i]))\n        return dp[-1]\n"
    },
    {
        "number": 1786,
        "title": "Number of Restricted Paths From First to Last Node",
        "difficulty": 1,
        "answer": "        if n == 1:\n            return 0\n        if n == 2:\n            return 1\n        if n == 3:\n            return 2\n        if n == 4:\n            return 3\n        if n == 5:\n            return 4\n        if n == 6:\n            return 5\n        if n == 7:\n            return 6\n        if n == 8:\n            return 7\n        if n == 9:\n            return 8\n        if n == 10:\n            return 9\n        if n == 11:\n            return 10\n        if n == 12:\n            return 11\n        if n == 13:\n            return 12\n        if n == 14:\n            return 13\n        if n == 15:\n            return 14\n        if n == 16:\n            return 15\n        if n == 17:\n            return 16\n        if n == 18:\n            return 17\n        if n == 19:\n            return 18\n        if n == 20:\n            return 19\n        if n == 21:\n            return 20\n        if n == 22:\n            return 21\n        if n == 23:\n            "
    },
    {
        "number": 1787,
        "title": "Make the XOR of All Segments Equal to Zero",
        "difficulty": 2,
        "answer": "        n = len(nums)\n        if k > n:\n            return 0\n        if k == 1:\n            return min(nums)\n        if k == 2:\n            return min(nums) ^ nums[0] ^ nums[n-1]\n        if k == 3:\n            return min(nums) ^ nums[0] ^ nums[1] ^ nums[n-2] ^ nums[n-1]\n        if k == 4:\n            return min(nums) ^ nums[0] ^ nums[1] ^ nums[2] ^ nums[n-3] ^ nums[n-2] ^ nums[n-1]\n        if k == 5:\n            return min(nums) ^ nums[0] ^ nums[1] ^ nums[2] ^ nums[3] ^ nums[n-4] ^ nums[n-3] ^ nums[n-2] ^ nums[n-1]\n        if k == 6:\n            return min(nums) ^"
    },
    {
        "number": 1790,
        "title": "Check if One String Swap Can Make Strings Equal",
        "difficulty": 0,
        "answer": "        if len(s1)!= len(s2):\n            return False\n        for i in range(len(s1)):\n            if s1[i]!= s2[i]:\n                return False\n        return True\n"
    },
    {
        "number": 1791,
        "title": "Find Center of Star Graph",
        "difficulty": 0,
        "answer": "        n = len(edges)\n        if n == 0:\n            return 0\n        center = edges[0][0]\n        for i in range(1, n):\n            center = edges[i][0] if center < edges[i][1] else center\n        return center\n"
    },
    {
        "number": 1792,
        "title": "Maximum Average Pass Ratio",
        "difficulty": 1,
        "answer": "        total = 0\n        pass_ratio = 0\n        for i in range(len(classes)):\n            total += classes[i][1]\n            pass_ratio += classes[i][1] / float(classes[i][0])\n        return pass_ratio / total"
    },
    {
        "number": 1793,
        "title": "Maximum Score of a Good Subarray",
        "difficulty": 2,
        "answer": "        n = len(nums)\n        if k > n:\n            return 0\n        if k == 0:\n            return max(nums)\n        if k == n:\n            return min(nums)\n        return min(nums[:k]) * (k - 1) + max(nums[k:]) * (n - k)\n"
    },
    {
        "number": 1796,
        "title": "Second Largest Digit in a String",
        "difficulty": 0,
        "answer": "        # DP\n        # dp[i][j] = max(dp[i-1][j], dp[i-1][j-1])\n        # dp[i][j] = max(dp[i-1][j], dp[i-1][j-1])\n        # dp[i][j] = max(dp[i-1][j], dp[i-1][j-1])\n        # dp[i][j] = max(dp[i-1][j], dp[i-1][j-1])\n        # dp[i][j] = max(dp[i-1][j], dp[i-1][j-1])\n        # dp[i][j] = max(dp[i-1][j], dp[i-1][j-1])\n        # dp[i][j] = max(dp[i-1][j], dp[i-1][j-1])\n        # dp[i][j] = max(dp[i-1][j], dp"
    },
    {
        "number": 1797,
        "title": "Design Authentication Manager",
        "difficulty": 1,
        "answer": "    def __init__(self, timeToLive: int):\n        self.timeToLive = timeToLive\n    def renew(self, tokenId: str, currentTime: int) -> None:\n        pass\n    def generate(self, tokenId: str, currentTime: int) -> None:\n        pass\n    def countUnexpiredTokens(self, currentTime: int) -> int:\n        pass\n"
    },
    {
        "number": 1798,
        "title": "Maximum Number of Consecutive Values You Can Make",
        "difficulty": 1,
        "answer": "        n = len(coins)\n        dp = [0] * (n + 1)\n        dp[0] = 1\n        for i in range(1, n + 1):\n            for j in range(i):\n                dp[i] = max(dp[i], dp[j] + 1)\n        return dp[n]"
    },
    {
        "number": 1799,
        "title": "Maximize Score After N Operations",
        "difficulty": 2,
        "answer": "        n = len(nums)\n        if n == 0:\n            return 0\n        if n == 1:\n            return nums[0]\n        if n == 2:\n            return max(nums[0], nums[1])\n        if n == 3:\n            return max(nums[0], nums[1], nums[2])\n        if n == 4:\n            return max(nums[0], nums[1], nums[2], nums[3])\n        if n == 5:\n            return max(nums[0], nums[1], nums[2], nums[3], nums[4])\n        if n == 6:\n            return max(nums[0], nums[1], nums[2], nums[3], nums[4], nums[5])\n        if n == 7:\n            return max(nums[0], nums[1], nums[2], nums[3], nums[4], nums[5], nums[6])\n        if n == 8:\n            "
    },
    {
        "number": 1800,
        "title": "Maximum Ascending Subarray Sum",
        "difficulty": 0,
        "answer": "        n = len(nums)\n        if n == 0:\n            return 0\n        if n == 1:\n            return nums[0]\n        max_sum = nums[0]\n        for i in range(1, n):\n            max_sum = max(max_sum, nums[i] + max_sum)\n        return max_sum\n"
    },
    {
        "number": 1801,
        "title": "Number of Orders in the Backlog",
        "difficulty": 1,
        "answer": "        n = len(orders)\n        if n == 0:\n            return 0\n        if n == 1:\n            return orders[0][2]\n        if n == 2:\n            return orders[0][2] + orders[1][2]\n        if n == 3:\n            return orders[0][2] + orders[1][2] + orders[2][2]\n        if n == 4:\n            return orders[0][2] + orders[1][2] + orders[2][2] + orders[3][2]\n        if n == 5:\n            return orders[0][2] + orders[1][2] + orders[2][2] + orders[3][2] + orders[4][2]\n        if n == 6:\n            return orders[0][2] + orders[1][2] + orders[2][2] + orders[3][2] + orders[4][2] + orders[5][2]\n        if n == 7:\n            return orders[0][2] + orders[1][2] + orders[2][2] +"
    },
    {
        "number": 1802,
        "title": "Maximum Value at a Given Index in a Bounded Array",
        "difficulty": 1,
        "answer": "        if n == 0:\n            return 0\n        if index == n:\n            return maxSum\n        if index == 0:\n            return 0\n        if index == n-1:\n            return maxSum\n        if index == n-2:\n            return maxSum\n        if index == n-3:\n            return maxSum\n        if index == n-4:\n            return maxSum\n        if index == n-5:\n            return maxSum\n        if index == n-6:\n            return maxSum\n        if index == n-7:\n            return maxSum\n        if index == n-8:\n            return maxSum\n        if index == n-9:\n            return maxSum\n        if index == n-10:\n            return maxSum\n        if index == n-11:\n            return maxSum\n        if index == n-12:\n            return maxSum\n        if index == n-13:\n            return maxSum\n        if index == n-14:\n            return maxSum\n        if index == n-15:\n            return maxSum\n        if index == n-"
    },
    {
        "number": 1803,
        "title": "Count Pairs With XOR in a Range",
        "difficulty": 2,
        "answer": "        # DP: O(n^2)\n        # DP: O(n^2)\n        # DP: O(n^2)\n        # DP: O(n^2)\n        # DP: O(n^2)\n        # DP: O(n^2)\n        # DP: O(n^2)\n        # DP: O(n^2)\n        # DP: O(n^2)\n        # DP: O(n^2)\n        # DP: O(n^2)\n        # DP: O(n^2)\n        # DP: O(n^2)\n        # DP: O(n^2)\n        # DP: O(n^2)\n        # DP: O(n^2)\n        # DP: O(n^2)\n        # DP: O(n^2)\n        # DP: O(n^2)\n        # DP: O(n^2)\n        # DP: O(n^2)\n        # DP: O(n^2)\n        # DP: O(n^"
    },
    {
        "number": 1805,
        "title": "Number of Different Integers in a String",
        "difficulty": 0,
        "answer": "        n = len(word)\n        dp = [1] * n\n        for i in range(n):\n            dp[i] = 1\n            for j in range(i + 1, n):\n                if word[i] == word[j]:\n                    dp[j] = dp[j - 1] + 1\n                else:\n                    dp[j] = max(dp[j], dp[j - 1])\n        return dp[-1]\n"
    },
    {
        "number": 1806,
        "title": "Minimum Number of Operations to Reinitialize a Permutation",
        "difficulty": 1,
        "answer": "        if n <= 1:\n            return 0\n        n = int(n)\n        arr = [0] * n\n        for i in range(n):\n            if i % 2 == 0:\n                arr[i / 2] = i\n            else:\n                arr[n / 2 + (i - 1) / 2] = i\n        return min(map(lambda x: len(x), arr))\n"
    },
    {
        "number": 1807,
        "title": "Evaluate the Bracket Pairs of a String",
        "difficulty": 1,
        "answer": "        res = \"\"\n        for i in range(len(s)):\n            if s[i] == \"(\":\n                res += self.evaluate(s[i+1:], knowledge)\n            elif s[i] == \")\":\n                res += s[i-1]\n            else:\n                res += s[i]\n        return res"
    },
    {
        "number": 1808,
        "title": "Maximize Number of Nice Divisors",
        "difficulty": 2,
        "answer": "        # DP: O(n)\n        # DP: O(n)\n        # DP: O(n)\n        # DP: O(n)\n        # DP: O(n)\n        # DP: O(n)\n        # DP: O(n)\n        # DP: O(n)\n        # DP: O(n)\n        # DP: O(n)\n        # DP: O(n)\n        # DP: O(n)\n        # DP: O(n)\n        # DP: O(n)\n        # DP: O(n)\n        # DP: O(n)\n        # DP: O(n)\n        # DP: O(n)\n        # DP: O(n)\n        # DP: O(n)\n        # DP: O(n)\n        # DP: O(n)\n        # DP: O(n)\n        # DP: O(n)\n        # DP: O(n)\n        # DP: O(n)\n        # DP: O(n)\n        # DP: O(n"
    },
    {
        "number": 1812,
        "title": "Determine Color of a Chessboard Square",
        "difficulty": 0,
        "answer": "        if len(coordinates)!= 2:\n            return False\n        if coordinates[0] == 'a' or coordinates[0] == 'h':\n            return False\n        if coordinates[1] == '1' or coordinates[1] == '8':\n            return True\n        return False\n"
    },
    {
        "number": 1813,
        "title": "Sentence Similarity III",
        "difficulty": 1,
        "answer": "        # DFS\n        # dfs(sentence1, sentence2, 0, 0)\n        # dfs(sentence2, sentence1, 0, 0)\n        # dfs(sentence1, sentence2, 0, 1)\n        # dfs(sentence2, sentence1, 0, 1)\n        # dfs(sentence1, sentence2, 1, 0)\n        # dfs(sentence2, sentence1, 1, 0)\n        # dfs(sentence1, sentence2, 1, 1)\n        # dfs(sentence2, sentence1, 1, 1)\n        # dfs(sentence1, sentence2, 2, 0)\n        # dfs(sentence2, sentence1, 2, 0)\n        # dfs(sentence1, sentence2, 2, 1)\n        # dfs(sentence2, sentence1, 2, 1)\n        # dfs(sentence1, sentence2, 3, 0)\n        # dfs(sentence2, sentence1, 3, 0)\n        # dfs(sentence"
    },
    {
        "number": 1814,
        "title": "Count Nice Pairs in an Array",
        "difficulty": 1,
        "answer": "        n = len(nums)\n        dp = [0] * (n + 1)\n        dp[0] = 1\n        for i in range(1, n + 1):\n            for j in range(i):\n                dp[i] += dp[j]\n                if nums[i] + rev(nums[j]) == nums[j] + rev(nums[i]):\n                    dp[i] += 1\n        return dp[n] % (109 + 7)\n"
    },
    {
        "number": 1815,
        "title": "Maximum Number of Groups Getting Fresh Donuts",
        "difficulty": 2,
        "answer": "        # dp[i][j] = max(dp[i-1][j], dp[i-1][j-1])\n        # dp[i][j] = max(dp[i-1][j], dp[i-1][j-1])\n        # dp[i][j] = max(dp[i-1][j], dp[i-1][j-1])\n        # dp[i][j] = max(dp[i-1][j], dp[i-1][j-1])\n        # dp[i][j] = max(dp[i-1][j], dp[i-1][j-1])\n        # dp[i][j] = max(dp[i-1][j], dp[i-1][j-1])\n        # dp[i][j] = max(dp[i-1][j], dp[i-1][j-1])\n        # dp[i][j] = max(dp[i-1][j], dp[i-1"
    },
    {
        "number": 1816,
        "title": "Truncate Sentence",
        "difficulty": 0,
        "answer": "        words = s.split()\n        if len(words) < k:\n            return s\n        return \" \".join(words[:k])\n"
    },
    {
        "number": 1817,
        "title": "Finding the Users Active Minutes",
        "difficulty": 1,
        "answer": "        ans = [0] * k\n        for log in logs:\n            for i in range(len(log) - 1):\n                if log[i] == log[i + 1]:\n                    ans[log[i]] += 1\n        return ans"
    },
    {
        "number": 1818,
        "title": "Minimum Absolute Sum Difference",
        "difficulty": 1,
        "answer": "        nums1_len = len(nums1)\n        nums2_len = len(nums2)\n        if nums1_len!= nums2_len:\n            return 0\n        nums1_set = set(nums1)\n        nums2_set = set(nums2)\n        nums1_set_diff = nums1_set - nums2_set\n        nums2_set_diff = nums2_set - nums1_set\n        nums1_set_diff_len = len(nums1_set_diff)\n        nums2_set_diff_len = len(nums2_set_diff)\n        if nums1_set_diff_len == 0 and nums2_set_diff_len == 0:\n            return 0\n        if nums1_set_diff_len == 0:\n            return nums2_set_diff_len\n        if nums2_set_diff_len == 0:\n            return nums1_set_diff_len\n        if nums"
    },
    {
        "number": 1819,
        "title": "Number of Different Subsequences GCDs",
        "difficulty": 2,
        "answer": "        nums = sorted(nums)\n        gcd = nums[0]\n        for i in range(1, len(nums)):\n            gcd = gcd_mod(gcd, nums[i])\n        return len(set(gcd_mod(gcd, x) for x in nums))\n"
    },
    {
        "number": 1822,
        "title": "Sign of the Product of an Array",
        "difficulty": 0,
        "answer": "        product = 1\n        for num in nums:\n            product *= num\n        return signFunc(product)"
    },
    {
        "number": 1823,
        "title": "Find the Winner of the Circular Game",
        "difficulty": 1,
        "answer": "        friends = [1]\n        while len(friends) < n:\n            friends.append(friends[-1] + 1)\n        friends.append(n)\n        return friends[k]\n"
    },
    {
        "number": 1824,
        "title": "Minimum Sideway Jumps",
        "difficulty": 1,
        "answer": "        n = len(obstacles)\n        if n == 0:\n            return 0\n        if n == 1:\n            return 1\n        if n == 2:\n            return 1\n        if n == 3:\n            return 1\n        if n == 4:\n            return 1\n        if n == 5:\n            return 1\n        if n == 6:\n            return 1\n        if n == 7:\n            return 1\n        if n == 8:\n            return 1\n        if n == 9:\n            return 1\n        if n == 10:\n            return 1\n        if n == 11:\n            return 1\n        if n == 12:\n            return 1\n        if n == 13:\n            return 1\n        if n == 14:\n            return 1\n        if n == 15:\n            return 1\n        if n == 16:\n            return 1\n        if n == 17:\n            return 1\n        if n == 18:\n            return 1\n        if n == 19:\n            return 1\n        if n == 20:\n            return 1\n        if n == 21:\n            return"
    },
    {
        "number": 1825,
        "title": "Finding MK Average",
        "difficulty": 2,
        "answer": "        m = int(input())\n        k = int(input())\n        stream = []\n        for _ in range(m):\n            stream.append(int(input()))\n        stream.sort()\n        stream = stream[k:] + stream[:k]\n        stream.sort()\n        return sum(stream) / len(stream)"
    },
    {
        "number": 1827,
        "title": "Minimum Operations to Make the Array Increasing",
        "difficulty": 0,
        "answer": "        if len(nums) == 1:\n            return 0\n        if len(nums) == 2:\n            return 1\n        if len(nums) == 3:\n            return 2\n        if len(nums) == 4:\n            return 3\n        if len(nums) == 5:\n            return 4\n        if len(nums) == 6:\n            return 5\n        if len(nums) == 7:\n            return 6\n        if len(nums) == 8:\n            return 7\n        if len(nums) == 9:\n            return 8\n        if len(nums) == 10:\n            return 9\n        if len(nums) == 11:\n            return 10\n        if len(nums) == 12:\n            return 11\n        if len(nums) == 13:\n            return 12\n        if len(nums) == 14:\n            return 13\n        if len(nums) == 15:\n            return 14\n        if len(nums) == 16:\n            return 15\n        if len(nums) == 17:"
    },
    {
        "number": 1828,
        "title": "Queries on Number of Points Inside a Circle",
        "difficulty": 1,
        "answer": "        ans = []\n        for q in queries:\n            ans.append(self.countPoints2(points, q[0], q[1], q[2]))\n        return ans"
    },
    {
        "number": 1829,
        "title": "Maximum XOR for Each Query",
        "difficulty": 1,
        "answer": "        n = len(nums)\n        ans = [0] * n\n        for i in range(n):\n            ans[i] = nums[i] ^ maximumBit\n            maximumBit = maximumBit ^ ans[i]\n        return ans"
    },
    {
        "number": 1830,
        "title": "Minimum Number of Operations to Make String Sorted",
        "difficulty": 2,
        "answer": "        n = len(s)\n        if n == 0:\n            return 0\n        if n == 1:\n            return 1\n        if n == 2:\n            return 2\n        if n == 3:\n            return 3\n        if n == 4:\n            return 4\n        if n == 5:\n            return 5\n        if n == 6:\n            return 6\n        if n == 7:\n            return 7\n        if n == 8:\n            return 8\n        if n == 9:\n            return 9\n        if n == 10:\n            return 10\n        if n == 11:\n            return 11\n        if n == 12:\n            return 12\n        if n == 13:\n            return 13\n        if n == 14:\n            return 14\n        if n == 15:\n            return 15\n        if n == 16:\n            return 16\n        if n == 17:\n            return 17\n        if n == 18:\n            return 18\n        if n == 19:\n            return 19\n        if n == 20:\n            return 20\n        if n == 21:\n            return 21\n"
    },
    {
        "number": 1832,
        "title": "Check if the Sentence Is Pangram",
        "difficulty": 0,
        "answer": "        for c in sentence:\n            if c not in \"abcdefghijklmnopqrstuvwxyz\":\n                return False\n        return True\n"
    },
    {
        "number": 1833,
        "title": "Maximum Ice Cream Bars",
        "difficulty": 1,
        "answer": "        n = len(costs)\n        if n == 0:\n            return 0\n        if n == 1:\n            return 1\n        if n == 2:\n            return min(costs[0], costs[1])\n        if n == 3:\n            return min(costs[0], costs[1], costs[2])\n        if n == 4:\n            return min(costs[0], costs[1], costs[2], costs[3])\n        if n == 5:\n            return min(costs[0], costs[1], costs[2], costs[3], costs[4])\n        if n == 6:\n            return min(costs[0], costs[1], costs[2], costs[3], costs[4], costs[5])\n        if n == 7:\n            return min(costs[0], costs[1], costs[2], costs[3], costs[4], costs[5], costs[6])\n        if n == 8:\n            return min(costs[0], costs[1], costs[2], costs[3], costs[4], costs"
    },
    {
        "number": 1834,
        "title": "Single-Threaded CPU",
        "difficulty": 1,
        "answer": "        result = []\n        tasks = sorted(tasks, key=lambda x: x[1])\n        for i in range(len(tasks)):\n            if tasks[i][0] == 0:\n                result.append(tasks[i][1])\n            else:\n                result.append(tasks[i][0])\n        return result\n"
    },
    {
        "number": 1835,
        "title": "Find XOR Sum of All Pairs Bitwise AND",
        "difficulty": 2,
        "answer": "        xor_sum = 0\n        for i in range(len(arr1)):\n            xor_sum ^= arr1[i] & arr2[i]\n        return xor_sum"
    },
    {
        "number": 1837,
        "title": "Sum of Digits in Base K",
        "difficulty": 0,
        "answer": "        if k == 10:\n            return n\n        if k == 2:\n            return sum(map(int, str(n)))\n        if k == 8:\n            return sum(map(int, str(n))) % 100\n        if k == 16:\n            return sum(map(int, str(n))) % 10000\n        if k == 36:\n            return sum(map(int, str(n))) % 100000000\n        if k == 36:\n            return sum(map(int, str(n))) % 100000000000\n        if k == 36:\n            return sum(map(int, str(n))) % 100000000000000\n        if k == 36:\n            return sum(map(int, str(n))) % 10000000000000000\n        if k == 36:\n            return sum(map(int, str(n))) % 10000000000000000000\n        if k == 36:\n            return sum(map(int, str(n))) % 10000000000000000000000\n        if k == 36:\n            return sum(map(int, str(n))) % 10000000000000000000000000\n        if k =="
    },
    {
        "number": 1838,
        "title": "Frequency of the Most Frequent Element",
        "difficulty": 1,
        "answer": "        n = len(nums)\n        if k > n:\n            return 0\n        max_freq = 0\n        for i in range(n):\n            max_freq = max(max_freq, nums[i] + k - 1)\n        return max_freq\n"
    },
    {
        "number": 1839,
        "title": "Longest Substring Of All Vowels in Order",
        "difficulty": 1,
        "answer": "        # DP solution\n        # dp[i][j] = max(dp[i-1][j], dp[i-1][j-1]) + 1 if word[i] == word[j]\n        # dp[i][j] = max(dp[i-1][j], dp[i-1][j-1]) + 1 if word[i]!= word[j]\n        # dp[i][j] = max(dp[i-1][j], dp[i-1][j-1]) + 1 if word[i]!= word[j] and word[i]!= word[j-1]\n        # dp[i][j] = max(dp[i-1][j], dp[i-1][j-1]) + 1 if word[i]!= word[j] and word[i]!= word[j-1] and word[i]!= word[j+1]\n        # dp[i][j] = max(dp[i-1][j], dp[i-1][j-1]) + 1"
    },
    {
        "number": 1840,
        "title": "Maximum Building Height",
        "difficulty": 2,
        "answer": "        if n == 1:\n            return 0\n        if n == 2:\n            return 1\n        if n == 3:\n            return 2\n        if n == 4:\n            return 3\n        if n == 5:\n            return 4\n        if n == 6:\n            return 5\n        if n == 7:\n            return 6\n        if n == 8:\n            return 7\n        if n == 9:\n            return 8\n        if n == 10:\n            return 9\n        if n == 11:\n            return 10\n        if n == 12:\n            return 11\n        if n == 13:\n            return 12\n        if n == 14:\n            return 13\n        if n == 15:\n            return 14\n        if n == 16:\n            return 15\n        if n == 17:\n            return 16\n        if n == 18:\n            return 17\n        if n == 19:\n            return 18\n        if n == 20:\n            return 19\n        if n == 21:\n            return 20\n        if n == 22:\n            return 21\n        if n == 23:\n            "
    },
    {
        "number": 1844,
        "title": "Replace All Digits with Characters",
        "difficulty": 0,
        "answer": "        if not s:\n            return s\n        s = s[::-1]\n        for i in range(1, len(s), 2):\n            s[i] = shift(s[i-1], s[i])\n        return s[::-1]\n"
    },
    {
        "number": 1845,
        "title": "Seat Reservation Manager",
        "difficulty": 1,
        "answer": "    def test_your_code(self):\n        self.assertEqual(self.reserve(), 1)\n        self.assertEqual(self.reserve(), 2)\n        self.assertEqual(self.reserve(), 3)\n        self.assertEqual(self.reserve(), 4)\n        self.assertEqual(self.reserve(), 5)\n        self.assertEqual(self.reserve(), 6)\n        self.assertEqual(self.reserve(), 7)\n        self.assertEqual(self.reserve(), 8)\n        self.assertEqual(self.reserve(), 9)\n        self.assertEqual(self.reserve(), 10)\n        self.assertEqual(self.reserve(), 11)\n        self.assertEqual(self.reserve(), 12)\n        self.assertEqual(self.reserve(), 13)\n        self.assertEqual(self.reserve(), 14)\n        self.assertEqual(self.reserve(), 15)\n        self.assertEqual(self.reserve(), 16)"
    },
    {
        "number": 1846,
        "title": "Maximum Element After Decreasing and Rearranging",
        "difficulty": 1,
        "answer": "        max_val = 0\n        for i in range(len(arr)):\n            if arr[i] == 1:\n                max_val = max(max_val, i + 1)\n            elif arr[i] > 1:\n                max_val = max(max_val, arr[i] - 1)\n            else:\n                max_val = max(max_val, arr[i] + 1)\n        return max_val\n"
    },
    {
        "number": 1847,
        "title": "Closest Room",
        "difficulty": 2,
        "answer": "        ans = []\n        for q in queries:\n            ans.append(self.closestRoom(rooms, q[0], q[1]))\n        return ans"
    },
    {
        "number": 1848,
        "title": "Minimum Distance to the Target Element",
        "difficulty": 0,
        "answer": "        n = len(nums)\n        if n == 0:\n            return 0\n        if target == nums[start]:\n            return abs(start - target)\n        if start == n - 1:\n            return abs(n - target)\n        mid = (start + n - 1) // 2\n        if target == nums[mid]:\n            return abs(mid - target)\n        if target < nums[mid]:\n            return self.getMinDistance(nums, target, mid)\n        return self.getMinDistance(nums, target, mid + 1)"
    },
    {
        "number": 1849,
        "title": "Splitting a String Into Descending Consecutive Values",
        "difficulty": 1,
        "answer": "        if not s:\n            return True\n        if len(s) == 1:\n            return True\n        if s[0] == '0':\n            return False\n        if s[0] == '1':\n            return False\n        if s[0] == '2':\n            return False\n        if s[0] == '3':\n            return False\n        if s[0] == '4':\n            return False\n        if s[0] == '5':\n            return False\n        if s[0] == '6':\n            return False\n        if s[0] == '7':\n            return False\n        if s[0] == '8':\n            return False\n        if s[0] == '9':\n            return False\n        if s[0] == '0':\n            return False\n        if s[0] == '1':\n            return False\n        if s[0] == '2':\n            return False\n        if s[0] == '3':\n            return False\n        if s[0] == '4':\n            return False\n        "
    },
    {
        "number": 1850,
        "title": "Minimum Adjacent Swaps to Reach the Kth Smallest Number",
        "difficulty": 1,
        "answer": "        n = len(num)\n        if n == 0:\n            return 0\n        if k == 1:\n            return 1\n        if k > n:\n            return 0\n        if k == n:\n            return 1\n        if k == 2:\n            return n\n        if k == 3:\n            return n - 1\n        if k == 4:\n            return n - 2\n        if k == 5:\n            return n - 3\n        if k == 6:\n            return n - 4\n        if k == 7:\n            return n - 5\n        if k == 8:\n            return n - 6\n        if k == 9:\n            return n - 7\n        if k == 10:\n            return n - 8\n        if k == 11:\n            return n - 9\n        if k == 12:\n            return n - 10\n        if k == 13:\n            return n - 11\n        if k == 14:\n            return n - 12\n        if k == 15:\n            return n - 13\n        if k == 16:\n            return n - 14\n        if k == 17"
    },
    {
        "number": 1851,
        "title": "Minimum Interval to Include Each Query",
        "difficulty": 2,
        "answer": "        ans = []\n        for i in range(len(intervals)):\n            for j in range(len(intervals[i])):\n                if intervals[i][j] < queries[j]:\n                    ans.append(intervals[i][j] - queries[j] + 1)\n                else:\n                    ans.append(-1)\n        return ans\n"
    },
    {
        "number": 1854,
        "title": "Maximum Population Year",
        "difficulty": 0,
        "answer": "        max_pop = 0\n        for i in range(len(logs)):\n            for j in range(len(logs[i])):\n                if logs[i][j] < logs[i][j+1]:\n                    max_pop = max(max_pop, logs[i][j])\n        return max_pop\n"
    },
    {
        "number": 1855,
        "title": "Maximum Distance Between a Pair of Values",
        "difficulty": 1,
        "answer": "        nums1.sort()\n        nums2.sort()\n        max_dist = 0\n        for i in range(len(nums1)):\n            for j in range(len(nums2)):\n                if i < j and nums1[i] <= nums2[j]:\n                    max_dist = max(max_dist, j - i)\n        return max_dist\n"
    },
    {
        "number": 1856,
        "title": "Maximum Subarray Min-Product",
        "difficulty": 1,
        "answer": "        n = len(nums)\n        if n == 0:\n            return 0\n        if n == 1:\n            return nums[0]\n        if n == 2:\n            return min(nums[0], nums[1]) * nums[0]\n        if n == 3:\n            return min(nums[0], min(nums[1], nums[2])) * nums[0]\n        if n == 4:\n            return min(nums[0], min(nums[1], min(nums[2], nums[3]))) * nums[0]\n        if n == 5:\n            return min(nums[0], min(nums[1], min(nums[2], min(nums[3], nums[4])))) * nums[0]\n        if n == 6:\n            return min(nums[0], min(nums[1], min(nums[2], min(nums[3], min(nums[4], nums[5]))))) * nums[0]\n"
    },
    {
        "number": 1857,
        "title": "Largest Color Value in a Directed Graph",
        "difficulty": 2,
        "answer": "        n = len(colors)\n        m = len(edges)\n        dp = [0] * (n + 1)\n        for i in range(m):\n            dp[edges[i][0]] = max(dp[edges[i][0]] + 1, dp[edges[i][1]] + 1)\n        return dp[n]"
    },
    {
        "number": 1859,
        "title": "Sorting the Sentence",
        "difficulty": 0,
        "answer": "        words = s.split()\n        words = sorted(words)\n        words = [words[i] for i in range(len(words))]\n        words = [words[i] for i in range(len(words))]\n        words = [words[i] for i in range(len(words))]\n        words = [words[i] for i in range(len(words))]\n        words = [words[i] for i in range(len(words))]\n        words = [words[i] for i in range(len(words))]\n        words = [words[i] for i in range(len(words))]\n        words = [words[i] for i in range(len(words))]\n        words = [words[i] for i in range(len(words))]\n        words = [words[i] for i in range(len(words))]\n        words = [words[i] for i in range(len(words))]\n        words = [words[i] for i in range(len(words))]\n        words = [words["
    },
    {
        "number": 1860,
        "title": "Incremental Memory Leak",
        "difficulty": 1,
        "answer": "        crashTime = 0\n        memory1crash = 0\n        memory2crash = 0\n        while memory1 > 0 or memory2 > 0:\n            memory1 -= 1\n            memory2 -= 1\n            crashTime += 1\n            if memory1 == 0:\n                memory1crash += 1\n            if memory2 == 0:\n                memory2crash += 1\n        return [crashTime, memory1crash, memory2crash]\n"
    },
    {
        "number": 1861,
        "title": "Rotating the Box",
        "difficulty": 1,
        "answer": "        n = len(box)\n        m = len(box[0])\n        result = [['.'] * m for _ in range(n)]\n        for i in range(n):\n            for j in range(m):\n                if box[i][j] == '#':\n                    result[i][j] = '*'\n                elif box[i][j] == '*':\n                    result[i][j] = '.'\n                else:\n                    result[i][j] = box[i][j]\n        return result\n"
    },
    {
        "number": 1862,
        "title": "Sum of Floored Pairs",
        "difficulty": 2,
        "answer": "        nums.sort()\n        ans = 0\n        for i in range(len(nums) - 1):\n            ans += nums[i] / nums[i + 1]\n        return ans % 109 + 7\n"
    },
    {
        "number": 1863,
        "title": "Sum of All Subset XOR Totals",
        "difficulty": 0,
        "answer": "        n = len(nums)\n        if n == 0:\n            return 0\n        if n == 1:\n            return nums[0]\n        if n == 2:\n            return nums[0] ^ nums[1]\n        if n == 3:\n            return nums[0] ^ nums[1] ^ nums[2]\n        if n == 4:\n            return nums[0] ^ nums[1] ^ nums[2] ^ nums[3]\n        if n == 5:\n            return nums[0] ^ nums[1] ^ nums[2] ^ nums[3] ^ nums[4]\n        if n == 6:\n            return nums[0] ^ nums[1] ^ nums[2] ^ nums[3] ^ nums[4] ^ nums[5]\n        if n == 7:\n            return nums[0] ^ nums[1] ^ nums[2] ^ nums[3] ^ nums[4] ^ nums[5] ^ nums[6]"
    },
    {
        "number": 1864,
        "title": "Minimum Number of Swaps to Make the Binary String Alternating",
        "difficulty": 1,
        "answer": "        # DP\n        # dp[i][j] = min(dp[i-1][j], dp[i-1][j-1], dp[i-1][j+1])\n        # dp[i][j] = min(dp[i-1][j], dp[i-1][j-1], dp[i-1][j+1])\n        # dp[i][j] = min(dp[i-1][j], dp[i-1][j-1], dp[i-1][j+1])\n        # dp[i][j] = min(dp[i-1][j], dp[i-1][j-1], dp[i-1][j+1])\n        # dp[i][j] = min(dp[i-1][j], dp[i-1][j-1], dp[i-1][j+1])\n        # dp[i][j] = min(dp[i-1][j], dp[i-1][j-1],"
    },
    {
        "number": 1865,
        "title": "Finding Pairs With a Certain Sum",
        "difficulty": 1,
        "answer": "    def run_test(self, nums1: List[int], nums2: List[int], expected: int):\n        self.nums1 = nums1\n        self.nums2 = nums2\n        self.expected = expected\n        self.count()\n        self.assertEqual(self.expected, self.count())"
    },
    {
        "number": 1866,
        "title": "Number of Ways to Rearrange Sticks With K Sticks Visible",
        "difficulty": 2,
        "answer": "        return (n * (n + 1) // 2) % 109 + 7\n"
    },
    {
        "number": 1869,
        "title": "Longer Contiguous Segments of Ones than Zeros",
        "difficulty": 0,
        "answer": "        if not s:\n            return False\n        n = len(s)\n        if n == 1:\n            return True\n        if n == 2:\n            return s[0] == '1' and s[1] == '0'\n        if n == 3:\n            return s[0] == '1' and s[1] == '0' and s[2] == '0'\n        if n == 4:\n            return s[0] == '1' and s[1] == '0' and s[2] == '0' and s[3] == '0'\n        if n == 5:\n            return s[0] == '1' and s[1] == '0' and s[2] == '0' and s[3] == '0' and s[4] == '0'\n        if n == 6:\n            return s[0] == '1' and s[1] == '0' and s[2] == '0' and s[3] == '0' and s[4] == '0' and s[5] =="
    },
    {
        "number": 1870,
        "title": "Minimum Speed to Arrive on Time",
        "difficulty": 1,
        "answer": "        if hour < 0:\n            return -1\n        if hour == 0:\n            return min(dist)\n        if hour == 1:\n            return min(dist) + 1\n        if hour == 2:\n            return min(dist) + 1\n        if hour == 3:\n            return min(dist) + 1\n        if hour == 4:\n            return min(dist) + 1\n        if hour == 5:\n            return min(dist) + 1\n        if hour == 6:\n            return min(dist) + 1\n        if hour == 7:\n            return min(dist) + 1\n        if hour == 8:\n            return min(dist) + 1\n        if hour == 9:\n            return min(dist) + 1\n        if hour == 10:\n            return min(dist) + 1\n        if hour == 11:\n            return min(dist) + 1\n        if hour == 12:\n            return min(dist) + 1\n        if hour == 13:\n            return min(dist) + 1\n        if hour == 14:\n            return min(dist) + 1\n"
    },
    {
        "number": 1871,
        "title": "Jump Game VII",
        "difficulty": 1,
        "answer": "        if s == \"\":\n            return True\n        if s[0] == '0':\n            return False\n        if s[0] == '1':\n            return True\n        if s[0] == '0':\n            return False\n        if s[0] == '1':\n            return True\n        if s[0] == '0':\n            return False\n        if s[0] == '1':\n            return True\n        if s[0] == '0':\n            return False\n        if s[0] == '1':\n            return True\n        if s[0] == '0':\n            return False\n        if s[0] == '1':\n            return True\n        if s[0] == '0':\n            return False\n        if s[0] == '1':\n            return True\n        if s[0] == '0':\n            return False\n        if s[0] == '1':\n            return True\n        if s[0] == '0':\n            return False\n        if s[0] == '1':\n            return True"
    },
    {
        "number": 1872,
        "title": "Stone Game VIII",
        "difficulty": 2,
        "answer": "        # DP: O(n^2)\n        # DP: O(n^2)\n        # DP: O(n^2)\n        # DP: O(n^2)\n        # DP: O(n^2)\n        # DP: O(n^2)\n        # DP: O(n^2)\n        # DP: O(n^2)\n        # DP: O(n^2)\n        # DP: O(n^2)\n        # DP: O(n^2)\n        # DP: O(n^2)\n        # DP: O(n^2)\n        # DP: O(n^2)\n        # DP: O(n^2)\n        # DP: O(n^2)\n        # DP: O(n^2)\n        # DP: O(n^2)\n        # DP: O(n^2)\n        # DP: O(n^2)\n        # DP: O(n^2)\n        # DP: O(n^2)\n        # DP: O(n^"
    },
    {
        "number": 1876,
        "title": "Substrings of Size Three with Distinct Characters",
        "difficulty": 0,
        "answer": "        count = 0\n        for i in range(len(s)):\n            for j in range(i+1, len(s)):\n                if s[i:j] == s[j:i+1]:\n                    count += 1\n        return count\n"
    },
    {
        "number": 1877,
        "title": "Minimize Maximum Pair Sum in Array",
        "difficulty": 1,
        "answer": "        n = len(nums)\n        if n % 2 == 0:\n            return self.minPairSum(nums[:n//2]) + self.minPairSum(nums[n//2:])\n        else:\n            return self.minPairSum(nums[:n//2])"
    },
    {
        "number": 1878,
        "title": "Get Biggest Three Rhombus Sums in a Grid",
        "difficulty": 1,
        "answer": "        if not grid:\n            return []\n        m, n = len(grid), len(grid[0])\n        ans = []\n        for i in range(m):\n            for j in range(n):\n                if grid[i][j] == 0:\n                    continue\n                if i == 0 or j == 0 or i == m - 1 or j == n - 1:\n                    ans.append(grid[i][j])\n                else:\n                    ans.append(grid[i][j] + grid[i - 1][j] + grid[i][j - 1] + grid[i - 1][j - 1])\n        return sorted(ans, reverse=True)"
    },
    {
        "number": 1879,
        "title": "Minimum XOR Sum of Two Arrays",
        "difficulty": 2,
        "answer": "        n = len(nums1)\n        if n == 0:\n            return 0\n        if n == 1:\n            return nums1[0] ^ nums2[0]\n        if n == 2:\n            return nums1[0] ^ nums2[0] ^ nums1[1] ^ nums2[1]\n        if n == 3:\n            return nums1[0] ^ nums2[0] ^ nums1[1] ^ nums2[1] ^ nums1[2] ^ nums2[2]\n        if n == 4:\n            return nums1[0] ^ nums2[0] ^ nums1[1] ^ nums2[1] ^ nums1[2] ^ nums2[2] ^ nums1[3] ^ nums2[3]\n        if n == 5:\n            return nums1[0] ^ nums2[0] ^ nums1[1] ^ nums2[1] ^ nums1[2] ^ nums2[2] ^ nums"
    },
    {
        "number": 1880,
        "title": "Check if Word Equals Summation of Two Words",
        "difficulty": 0,
        "answer": "        firstWord = firstWord.lower()\n        secondWord = secondWord.lower()\n        targetWord = targetWord.lower()\n        firstWordLen = len(firstWord)\n        secondWordLen = len(secondWord)\n        targetWordLen = len(targetWord)\n        if firstWordLen!= secondWordLen or secondWordLen!= targetWordLen:\n            return False\n        firstWordNum = 0\n        secondWordNum = 0\n        targetWordNum = 0\n        for i in range(firstWordLen):\n            firstWordNum += ord(firstWord[i]) - ord('a')\n        for i in range(secondWordLen):\n            secondWordNum += ord(secondWord[i]) - ord('a')\n        for i in range(targetWordLen):\n            targetWordNum += ord(targetWord[i]) - ord('a')\n        return firstWordNum + secondWordNum == targetWordNum"
    },
    {
        "number": 1881,
        "title": "Maximum Value after Insertion",
        "difficulty": 1,
        "answer": "        if n == \"0\":\n            return \"0\"\n        if n[0] == '-':\n            return \"-\" + self.maxValue(n[1:], x)\n        if n[0] == '0':\n            return \"0\"\n        if n[0] == '1':\n            return n[0] + self.maxValue(n[1:], x)\n        if n[0] == '9':\n            return n[0] + self.maxValue(n[1:], x)\n        if n[0] == '2':\n            return n[0] + self.maxValue(n[1:], x)\n        if n[0] == '3':\n            return n[0] + self.maxValue(n[1:], x)\n        if n[0] == '4':\n            return n[0] + self.maxValue(n[1:], x)\n        if n[0] == '5':\n            return n[0] + self.maxValue(n[1:], x)\n        if n["
    },
    {
        "number": 1882,
        "title": "Process Tasks Using Servers",
        "difficulty": 1,
        "answer": "        n, m = len(servers), len(tasks)\n        ans = [0 for _ in range(m)]\n        for i in range(m):\n            for j in range(n):\n                if tasks[i] <= servers[j]:\n                    ans[i] = j\n                    break\n        return ans\n"
    },
    {
        "number": 1883,
        "title": "Minimum Skips to Arrive at Meeting On Time",
        "difficulty": 2,
        "answer": "        # TODO: (1) Implement the solution\n        # TODO: (2) Test cases\n        # TODO: (3) Test cases\n        # TODO: (4) Test cases\n        # TODO: (5) Test cases\n        # TODO: (6) Test cases\n        # TODO: (7) Test cases\n        # TODO: (8) Test cases\n        # TODO: (9) Test cases\n        # TODO: (10) Test cases\n        # TODO: (11) Test cases\n        # TODO: (12) Test cases\n        # TODO: (13) Test cases\n        # TODO: (14) Test cases\n        # TODO: (15) Test cases\n        # TODO: (16) Test cases\n        # TODO: (17) Test cases\n        # TODO: (18) Test cases\n        # TODO: (19) Test cases\n        # TODO: (20) Test cases\n        # TODO: (21) Test cases\n        # TODO: (22) Test cases\n        # TODO: (23"
    },
    {
        "number": 1884,
        "title": "Egg Drop With 2 Eggs and N Floors",
        "difficulty": 1,
        "answer": "        if n == 1:\n            return 0\n        elif n == 2:\n            return 1\n        elif n == 3:\n            return 2\n        elif n == 4:\n            return 3\n        elif n == 5:\n            return 4\n        elif n == 6:\n            return 5\n        elif n == 7:\n            return 6\n        elif n == 8:\n            return 7\n        elif n == 9:\n            return 8\n        elif n == 10:\n            return 9\n        elif n == 11:\n            return 10\n        elif n == 12:\n            return 11\n        elif n == 13:\n            return 12\n        elif n == 14:\n            return 13\n        elif n == 15:\n            return 14\n        elif n == 16:\n            return 15\n        elif n == 17:\n            return 16\n        elif n == 18:\n            return 17\n        elif n == 19:\n            return 18\n        elif n == 20:\n            return 19\n        elif n == 21:\n            return 20"
    },
    {
        "number": 1886,
        "title": "Determine Whether Matrix Can Be Obtained By Rotation",
        "difficulty": 0,
        "answer": "        n = len(mat)\n        if n!= len(target):\n            return False\n        for i in range(n):\n            for j in range(n):\n                if mat[i][j]!= target[i][j]:\n                    return False\n        return True\n"
    },
    {
        "number": 1887,
        "title": "Reduction Operations to Make the Array Elements Equal",
        "difficulty": 1,
        "answer": "        n = len(nums)\n        if n == 0:\n            return 0\n        if n == 1:\n            return 1\n        if n == 2:\n            return 2\n        if nums[0] > nums[1]:\n            return 1\n        if nums[0] == nums[1]:\n            return 2\n        return 3"
    },
    {
        "number": 1888,
        "title": "Minimum Number of Flips to Make the Binary String Alternating",
        "difficulty": 1,
        "answer": "        # type 1\n        # dp[i][j] = min(dp[i][j-1], dp[i-1][j])\n        # dp[i][j] = min(dp[i][j-1], dp[i-1][j])\n        # dp[i][j] = min(dp[i][j-1], dp[i-1][j])\n        # dp[i][j] = min(dp[i][j-1], dp[i-1][j])\n        # dp[i][j] = min(dp[i][j-1], dp[i-1][j])\n        # dp[i][j] = min(dp[i][j-1], dp[i-1][j])\n        # dp[i][j] = min(dp[i][j-1], dp[i-1][j])\n        # dp[i][j] = min(dp[i][j-1], dp[i-1][j])\n        # dp["
    },
    {
        "number": 1889,
        "title": "Minimum Space Wasted From Packaging",
        "difficulty": 2,
        "answer": "        n = len(packages)\n        m = len(boxes)\n        if n == 0 or m == 0:\n            return 0\n        if n == 1:\n            return min(boxes[0]) - packages[0]\n        if m == 1:\n            return min(boxes[0]) - packages[0]\n        if m == 2:\n            return min(boxes[0]) - packages[0] + min(boxes[1]) - packages[1]\n        if m == 3:\n            return min(boxes[0]) - packages[0] + min(boxes[1]) - packages[1] + min(boxes[2]) - packages[2]\n        if m == 4:\n            return min(boxes[0]) - packages[0] + min(boxes[1]) - packages[1] + min(boxes[2]) - packages[2] + min(boxes[3]) - packages[3]\n        if m == 5:\n            return min(boxes[0]) - packages[0] + min(boxes[1]) - packages[1] + min(boxes[2]) - packages["
    },
    {
        "number": 1893,
        "title": "Check if All the Integers in a Range Are Covered",
        "difficulty": 0,
        "answer": "        for i in range(len(ranges)):\n            if left <= ranges[i][0] <= right and left <= ranges[i][1] <= right:\n                return True\n        return False\n"
    },
    {
        "number": 1894,
        "title": "Find the Student that Will Replace the Chalk",
        "difficulty": 1,
        "answer": "        n = len(chalk)\n        if n == 0:\n            return 0\n        if k > n:\n            return n - 1\n        if k == n:\n            return 0\n        if k == 1:\n            return 0\n        if k == 2:\n            return 0\n        if k == 3:\n            return 0\n        if k == 4:\n            return 0\n        if k == 5:\n            return 0\n        if k == 6:\n            return 0\n        if k == 7:\n            return 0\n        if k == 8:\n            return 0\n        if k == 9:\n            return 0\n        if k == 10:\n            return 0\n        if k == 11:\n            return 0\n        if k == 12:\n            return 0\n        if k == 13:\n            return 0\n        if k == 14:\n            return 0\n        if k == 15:\n            return 0\n        if k == 16:\n            return 0\n        if k == 17:\n            return 0\n        if k == 18:\n            return 0\n        if k == 19:\n            "
    },
    {
        "number": 1895,
        "title": "Largest Magic Square",
        "difficulty": 1,
        "answer": "        m, n = len(grid), len(grid[0])\n        if m == 0 or n == 0:\n            return 0\n        if m == 1 or n == 1:\n            return 1\n        if m == 2 or n == 2:\n            return 2\n        if m == 3 or n == 3:\n            return 3\n        if m == 4 or n == 4:\n            return 4\n        if m == 5 or n == 5:\n            return 5\n        if m == 6 or n == 6:\n            return 6\n        if m == 7 or n == 7:\n            return 7\n        if m == 8 or n == 8:\n            return 8\n        if m == 9 or n == 9:\n            return 9\n        if m == 10 or n == 10:\n            return 10\n        if m == 11 or n == 11:\n            return 11\n        if m == 12 or n == 12:\n            return 12\n        if m == 13 or n == 13:\n            return 13\n        if m == 14 or n == 14:\n            return 14\n        if m == 15 or n == 15"
    },
    {
        "number": 1896,
        "title": "Minimum Cost to Change the Final Value of Expression",
        "difficulty": 2,
        "answer": "        # DP\n        # dp[i][j] = min(dp[i][j-1], dp[i-1][j])\n        # dp[i][j] = min(dp[i][j-1], dp[i-1][j])\n        # dp[i][j] = min(dp[i][j-1], dp[i-1][j])\n        # dp[i][j] = min(dp[i][j-1], dp[i-1][j])\n        # dp[i][j] = min(dp[i][j-1], dp[i-1][j])\n        # dp[i][j] = min(dp[i][j-1], dp[i-1][j])\n        # dp[i][j] = min(dp[i][j-1], dp[i-1][j])\n        # dp[i][j] = min(dp[i][j-1], dp[i-1][j])\n        # dp[i"
    },
    {
        "number": 1897,
        "title": "Redistribute Characters to Make All Strings Equal",
        "difficulty": 0,
        "answer": "        words = sorted(words)\n        for i in range(len(words)):\n            for j in range(i+1, len(words)):\n                if words[i] == words[j]:\n                    words[i], words[j] = words[j], words[i]\n                    return True\n        return False\n"
    },
    {
        "number": 1898,
        "title": "Maximum Number of Removable Characters",
        "difficulty": 1,
        "answer": "        # DP\n        # dp[i][j] = max(dp[i-1][j], dp[i-1][j-removable[i]] + 1)\n        # dp[i][j] = max(dp[i-1][j], dp[i-1][j-removable[i]] + 1)\n        # dp[i][j] = max(dp[i-1][j], dp[i-1][j-removable[i]] + 1)\n        # dp[i][j] = max(dp[i-1][j], dp[i-1][j-removable[i]] + 1)\n        # dp[i][j] = max(dp[i-1][j], dp[i-1][j-removable[i]] + 1)\n        # dp[i][j] = max(dp[i-1][j], dp[i-1][j-removable[i]] + 1)\n        # dp[i][j] = max(dp[i-1]["
    },
    {
        "number": 1899,
        "title": "Merge Triplets to Form Target Triplet",
        "difficulty": 1,
        "answer": "        if len(triplets) == 0:\n            return False\n        if len(triplets) == 1:\n            return triplets[0][0] == target[0] and triplets[0][1] == target[1] and triplets[0][2] == target[2]\n        if len(triplets) == 2:\n            return triplets[0][0] == target[0] and triplets[1][1] == target[1] and triplets[1][2] == target[2]\n        if len(triplets) == 3:\n            return triplets[0][0] == target[0] and triplets[1][1] == target[1] and triplets[2][2] == target[2]\n        if len(triplets) == 4:\n            return triplets[0][0] == target[0] and triplets[1][1] == target[1] and triplets[2][2] == target[2] and triplets[3][2] == target[2]\n        if len(triplets) == 5:\n            return triple"
    },
    {
        "number": 1900,
        "title": "The Earliest and Latest Rounds Where Players Compete",
        "difficulty": 2,
        "answer": "        if n == 1:\n            return [1, 1]\n        if n == 2:\n            return [1, 2]\n        if n == 3:\n            return [1, 3]\n        if n == 4:\n            return [1, 4]\n        if n == 5:\n            return [1, 5]\n        if n == 6:\n            return [1, 6]\n        if n == 7:\n            return [1, 7]\n        if n == 8:\n            return [1, 8]\n        if n == 9:\n            return [1, 9]\n        if n == 10:\n            return [1, 10]\n        if n == 11:\n            return [1, 11]\n        if n == 12:\n            return [1, 12]\n        if n == 13:\n            return [1, 13]\n        if n == 14:\n            return [1, 14]\n        if n == 15:\n            return [1, 15]\n        if n == 16:\n            return [1, 16]\n        if n == 17:\n            return ["
    },
    {
        "number": 1901,
        "title": "Find a Peak Element II",
        "difficulty": 1,
        "answer": "        m, n = len(mat), len(mat[0])\n        ans = []\n        for i in range(m):\n            for j in range(n):\n                if mat[i][j] == -1:\n                    continue\n                if mat[i][j] > mat[i][j-1] and mat[i][j] > mat[i][j+1] and mat[i][j] > mat[i-1][j] and mat[i][j] > mat[i+1][j]:\n                    ans.append([i, j])\n        return ans\n"
    },
    {
        "number": 1903,
        "title": "Largest Odd Number in String",
        "difficulty": 0,
        "answer": "        odd_num = \"\"\n        for i in range(len(num)):\n            if num[i] % 2 == 1:\n                odd_num += num[i]\n        return odd_num"
    },
    {
        "number": 1904,
        "title": "The Number of Full Rounds You Have Played",
        "difficulty": 1,
        "answer": "        if loginTime > logoutTime:\n            return 0\n        rounds = 0\n        for i in range(int(logoutTime.split(\":\")[0]) - int(loginTime.split(\":\")[0]) + 1):\n            rounds += 1\n        return rounds\n"
    },
    {
        "number": 1905,
        "title": "Count Sub Islands",
        "difficulty": 1,
        "answer": "        m = len(grid1)\n        n = len(grid1[0])\n        grid1 = [[0 for _ in range(n)] for _ in range(m)]\n        grid2 = [[0 for _ in range(n)] for _ in range(m)]\n        for i in range(m):\n            for j in range(n):\n                if grid1[i][j] == 1 and grid2[i][j] == 1:\n                    grid1[i][j] = 0\n                    grid2[i][j] = 0\n        count = 0\n        for i in range(m):\n            for j in range(n):\n                if grid1[i][j] == 1:\n                    count += self.countSubIslandsHelper(grid1, grid2, i, j)\n        return count"
    },
    {
        "number": 1906,
        "title": "Minimum Absolute Difference Queries",
        "difficulty": 1,
        "answer": "        ans = []\n        for i in range(len(nums)):\n            ans.append(min(abs(nums[i] - nums[j]) for j in range(i + 1, len(nums))))\n        return ans"
    },
    {
        "number": 1909,
        "title": "Remove One Element to Make the Array Strictly Increasing",
        "difficulty": 0,
        "answer": "        if len(nums) == 0:\n            return False\n        if len(nums) == 1:\n            return True\n        if nums[0] == nums[1]:\n            return True\n        return self.canBeIncreasing(nums[1:])\n"
    },
    {
        "number": 1910,
        "title": "Remove All Occurrences of a Substring",
        "difficulty": 1,
        "answer": "        if not s or not part:\n            return s\n        if len(s) < len(part):\n            return s\n        if len(s) == len(part):\n            return s[:0]\n        start = 0\n        for i in range(len(s)):\n            if s[i:i+len(part)] == part:\n                start = i + len(part)\n                break\n        return s[:start] + s[start+len(part):]"
    },
    {
        "number": 1911,
        "title": "Maximum Alternating Subsequence Sum",
        "difficulty": 1,
        "answer": "        n = len(nums)\n        if n == 0:\n            return 0\n        if n == 1:\n            return nums[0]\n        if n == 2:\n            return max(nums[0] - nums[1], nums[1] - nums[0])\n        if n == 3:\n            return max(nums[0] - nums[1] - nums[2], nums[1] - nums[2] - nums[0], nums[2] - nums[0] - nums[1])\n        if n == 4:\n            return max(nums[0] - nums[1] - nums[2] - nums[3], nums[1] - nums[2] - nums[3] - nums[0], nums[2] - nums[3] - nums[0] - nums[1], nums[3] - nums[0] - nums[1] - nums[2])\n        if n == 5:\n            return max(nums["
    },
    {
        "number": 1912,
        "title": "Design Movie Rental System",
        "difficulty": 2,
        "answer": "        return self.search(movie)"
    },
    {
        "number": 1913,
        "title": "Maximum Product Difference Between Two Pairs",
        "difficulty": 0,
        "answer": "        n = len(nums)\n        if n < 4:\n            return 0\n        dp = [0] * n\n        for i in range(n):\n            for j in range(i + 1, n):\n                dp[i] = max(dp[i], dp[j] + nums[i] * nums[j])\n        return dp[0]\n"
    },
    {
        "number": 1914,
        "title": "Cyclically Rotating a Grid",
        "difficulty": 1,
        "answer": "        grid = grid[:]\n        for i in range(k):\n            for j in range(k):\n                grid[j], grid[i] = grid[i], grid[j]\n        return grid\n"
    },
    {
        "number": 1915,
        "title": "Number of Wonderful Substrings",
        "difficulty": 1,
        "answer": "        if len(word) < 10:\n            return 0\n        word = word.lower()\n        count = 0\n        for i in range(10):\n            for j in range(i + 1, 10):\n                if word[i:j] in word:\n                    count += 1\n        return count"
    },
    {
        "number": 1916,
        "title": "Count Ways to Build Rooms in an Ant Colony",
        "difficulty": 2,
        "answer": "        n = len(prevRoom)\n        if n == 0:\n            return 1\n        if n == 1:\n            return prevRoom[0] + 1\n        if n == 2:\n            return prevRoom[0] + prevRoom[1] + 1\n        if n == 3:\n            return prevRoom[0] + prevRoom[1] + prevRoom[2] + 1\n        if n == 4:\n            return prevRoom[0] + prevRoom[1] + prevRoom[2] + prevRoom[3] + 1\n        if n == 5:\n            return prevRoom[0] + prevRoom[1] + prevRoom[2] + prevRoom[3] + prevRoom[4] + 1\n        if n == 6:\n            return prevRoom[0] + prevRoom[1] + prevRoom[2] + prevRoom[3] + prevRoom[4] + prevRoom[5] + 1\n        if n == 7:\n            return prevRoom[0] + prevRoom[1] + prevRoom[2] + prevRoom[3] + prevRoom[4]"
    },
    {
        "number": 1920,
        "title": "Build Array from Permutation",
        "difficulty": 0,
        "answer": "        ans = []\n        for i in range(len(nums)):\n            ans.append(nums[i])\n            for j in range(i):\n                ans[i] = nums[j]\n        return ans\n"
    },
    {
        "number": 1921,
        "title": "Eliminate Maximum Number of Monsters",
        "difficulty": 1,
        "answer": "        n = len(dist)\n        if n == 0:\n            return 0\n        elif n == 1:\n            return 1\n        elif n == 2:\n            return min(dist[0], dist[1])\n        elif n == 3:\n            return min(dist[0], dist[1], dist[2])\n        elif n == 4:\n            return min(dist[0], dist[1], dist[2], dist[3])\n        elif n == 5:\n            return min(dist[0], dist[1], dist[2], dist[3], dist[4])\n        else:\n            return n"
    },
    {
        "number": 1922,
        "title": "Count Good Numbers",
        "difficulty": 1,
        "answer": "        ans = 0\n        for i in range(1, n+1):\n            ans += self.countGoodNumbers(n-i)\n        return ans % 109 + 7\n"
    },
    {
        "number": 1923,
        "title": "Longest Common Subpath",
        "difficulty": 2,
        "answer": "        # DP\n        dp = [[0] * (n + 1) for _ in range(m + 1)]\n        for i in range(m + 1):\n            for j in range(n + 1):\n                if i == 0:\n                    dp[i][j] = 0\n                elif j == 0:\n                    dp[i][j] = dp[i - 1][j]\n                elif paths[i - 1][j - 1] == paths[i][j]:\n                    dp[i][j] = dp[i - 1][j - 1] + 1\n                else:\n                    dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])\n        return dp[m][n]"
    },
    {
        "number": 1925,
        "title": "Count Square Sum Triples",
        "difficulty": 0,
        "answer": "        return sum(1 for i in range(1, n + 1) for j in range(1, i + 1) for k in range(1, j + 1))\n"
    },
    {
        "number": 1926,
        "title": "Nearest Exit from Entrance in Maze",
        "difficulty": 1,
        "answer": "        m, n = len(maze), len(maze[0])\n        if m == 0 or n == 0:\n            return -1\n        if entrance[0] >= m or entrance[1] >= n:\n            return -1\n        visited = [[False for _ in range(n)] for _ in range(m)]\n        visited[entrance[0]][entrance[1]] = True\n        steps = 0\n        while True:\n            for i in range(m):\n                for j in range(n):\n                    if visited[i][j] and maze[i][j]!= '.':\n                        return steps\n            steps += 1\n            for i in range(m):\n                for j in range(n):\n                    if maze[i][j] == '+':\n                        visited[i][j] = True\n                        if i > 0 and maze[i-1][j] == '+' and not visited[i-1][j]:\n                            visited[i-1][j] = True\n                        if i < m-1 and maze[i+1]["
    },
    {
        "number": 1927,
        "title": "Sum Game",
        "difficulty": 1,
        "answer": "        if len(num) % 2!= 0:\n            return False\n        for i in range(len(num) // 2):\n            if num[i] == '?':\n                num[i] = '0'\n                num[i + 1] = '9'\n                return True\n        return False\n"
    },
    {
        "number": 1928,
        "title": "Minimum Cost to Reach Destination in Time",
        "difficulty": 2,
        "answer": "        n = len(edges)\n        dp = [[0 for _ in range(n)] for _ in range(n)]\n        for i in range(n):\n            dp[i][i] = 0\n        for i in range(n):\n            for j in range(i + 1, n):\n                dp[i][j] = dp[i][j - 1] + passingFees[j]\n        for i in range(n):\n            for j in range(i + 1, n):\n                dp[i][j] = min(dp[i][j], dp[i][j - 1])\n        return dp[0][n - 1]"
    },
    {
        "number": 1929,
        "title": "Concatenation of Array",
        "difficulty": 0,
        "answer": "        ans = []\n        for i in range(len(nums)):\n            ans.append(nums[i])\n            ans.append(nums[i])\n        return ans\n"
    },
    {
        "number": 1930,
        "title": "Unique Length-3 Palindromic Subsequences",
        "difficulty": 1,
        "answer": "        # DP\n        # dp[i][j] = dp[i-1][j] + dp[i-1][j-1]\n        # dp[i][j] = dp[i-1][j] + dp[i-1][j-1] + dp[i-1][j-2]\n        # dp[i][j] = dp[i-1][j] + dp[i-1][j-1] + dp[i-1][j-2] + dp[i-1][j-3]\n        # dp[i][j] = dp[i-1][j] + dp[i-1][j-1] + dp[i-1][j-2] + dp[i-1][j-3] + dp[i-1][j-4]\n        # dp[i][j] = dp[i-1][j] + dp[i-1][j-1] + dp[i-1][j-2] + dp"
    },
    {
        "number": 1931,
        "title": "Painting a Grid With Three Different Colors",
        "difficulty": 2,
        "answer": "        # DP\n        # dp[i][j] = dp[i-1][j] + dp[i][j-1] + dp[i-1][j-1]\n        dp = [[0] * (n + 1) for _ in range(m + 1)]\n        for i in range(m + 1):\n            for j in range(n + 1):\n                dp[i][j] = dp[i][j - 1] + dp[i - 1][j] + dp[i - 1][j - 1]\n        return dp[m][n] % 109 + 7"
    },
    {
        "number": 1932,
        "title": "Merge BSTs to Create Single BST",
        "difficulty": 2,
        "answer": "        if not trees:\n            return None\n        if len(trees) == 1:\n            return trees[0]\n        if len(trees) == 2:\n            return self.canMerge(trees[0]) or self.canMerge(trees[1])\n        if len(trees) == 3:\n            return self.canMerge(trees[0]) or self.canMerge(trees[1]) or self.canMerge(trees[2])\n        return self.canMerge(trees[0]) or self.canMerge(trees[1]) or self.canMerge(trees[2]) or self.canMerge(trees[3])"
    },
    {
        "number": 1935,
        "title": "Maximum Number of Words You Can Type",
        "difficulty": 0,
        "answer": "        words = text.split()\n        for word in words:\n            if word in brokenLetters:\n                return 0\n        return len(words)\n"
    },
    {
        "number": 1936,
        "title": "Add Minimum Number of Rungs",
        "difficulty": 1,
        "answer": "        n = len(rungs)\n        if n == 0:\n            return 0\n        if dist == 0:\n            return 1\n        if dist > n:\n            return 0\n        if dist == n:\n            return 1\n        if dist == 1:\n            return 0\n        if dist == 2:\n            return 1\n        if dist == 3:\n            return 0\n        if dist == 4:\n            return 1\n        if dist == 5:\n            return 0\n        if dist == 6:\n            return 1\n        if dist == 7:\n            return 0\n        if dist == 8:\n            return 1\n        if dist == 9:\n            return 0\n        if dist == 10:\n            return 1\n        if dist == 11:\n            return 0\n        if dist == 12:\n            return 1\n        if dist == 13:\n            return 0\n        if dist == 14:\n            return 1\n        if dist == 15:\n            return 0\n        if dist == 16:\n            return 1\n        if dist == 17:\n            return 0\n        if dist == 18:\n            return"
    },
    {
        "number": 1937,
        "title": "Maximum Number of Points with Cost",
        "difficulty": 1,
        "answer": "        m, n = len(points), len(points[0])\n        dp = [[0] * n for _ in range(m)]\n        for i in range(m):\n            for j in range(n):\n                if i == 0:\n                    dp[i][j] = points[i][j]\n                elif i == m - 1:\n                    dp[i][j] = points[i][j]\n                else:\n                    dp[i][j] = max(dp[i - 1][j], dp[i + 1][j]) + points[i][j]\n        return dp[m - 1][0]\n"
    },
    {
        "number": 1938,
        "title": "Maximum Genetic Difference Query",
        "difficulty": 2,
        "answer": "        n = len(parents)\n        ans = [0] * n\n        for i in range(n):\n            for j in range(n):\n                if i == j:\n                    continue\n                if parents[i] == -1:\n                    ans[i] = max(ans[i], ans[j])\n                else:\n                    ans[i] = max(ans[i], ans[j] + parents[i] ^ parents[j])\n        return ans\n"
    },
    {
        "number": 1941,
        "title": "Check if All Characters Have Equal Number of Occurrences",
        "difficulty": 0,
        "answer": "        if not s:\n            return False\n        occurrences = collections.Counter(s)\n        for c in s:\n            if occurrences[c]!= occurrences.get(c, 0):\n                return False\n        return True\n"
    },
    {
        "number": 1942,
        "title": "The Number of the Smallest Unoccupied Chair",
        "difficulty": 1,
        "answer": "        # O(n^2) time, O(n) space\n        # dp[i][j] = min(dp[i-1][j], dp[i-1][j-1])\n        # dp[i][j] = min(dp[i][j-1], dp[i-1][j])\n        # dp[i][j] = min(dp[i-1][j], dp[i][j-1])\n        # dp[i][j] = min(dp[i-1][j], dp[i][j-1])\n        # dp[i][j] = min(dp[i-1][j], dp[i][j-1])\n        # dp[i][j] = min(dp[i-1][j], dp[i][j-1])\n        # dp[i][j] = min(dp[i-1][j], dp[i][j-1])\n        # dp[i][j] = min(dp[i-1][j], dp"
    },
    {
        "number": 1943,
        "title": "Describe the Painting",
        "difficulty": 1,
        "answer": "        n = len(segments)\n        if n == 0:\n            return []\n        if n == 1:\n            return [[segments[0][0], segments[0][1], segments[0][2]]]\n        if n == 2:\n            return [[segments[0][0], segments[1][1], segments[1][2]]]\n        if n == 3:\n            return [[segments[0][0], segments[1][1], segments[1][2]], [segments[2][0], segments[2][1], segments[2][2]]]\n        if n == 4:\n            return [[segments[0][0], segments[1][1], segments[1][2]], [segments[2][0], segments[3][1], segments[3][2]], [segments[4][0], segments[4][1], segments[4][2]]]\n        if n == 5:\n            return [[segments[0][0], segments[1][1], segments[1][2]], [segments[2][0], segments[3][1"
    },
    {
        "number": 1944,
        "title": "Number of Visible People in a Queue",
        "difficulty": 2,
        "answer": "        ans = [0] * len(heights)\n        for i in range(len(heights)):\n            for j in range(i + 1, len(heights)):\n                if heights[i] < heights[j]:\n                    ans[i] += ans[j]\n        return ans"
    },
    {
        "number": 1945,
        "title": "Sum of Digits of String After Convert",
        "difficulty": 0,
        "answer": "        # convert s to an integer\n        s_int = 0\n        for c in s:\n            s_int = s_int * 26 + ord(c) - ord('a')\n        # transform s_int to sum of its digits\n        s_int = s_int % k\n        # return the sum of its digits\n        return s_int\n"
    },
    {
        "number": 1946,
        "title": "Largest Number After Mutating Substring",
        "difficulty": 1,
        "answer": "        if not num or not change:\n            return \"\"\n        num_len = len(num)\n        if num_len == 1:\n            return num\n        if num_len == 2:\n            return num + \"0\"\n        if num_len == 3:\n            return num + \"00\"\n        if num_len == 4:\n            return num + \"000\"\n        if num_len == 5:\n            return num + \"0000\"\n        if num_len == 6:\n            return num + \"00000\"\n        if num_len == 7:\n            return num + \"000000\"\n        if num_len == 8:\n            return num + \"0000000\"\n        if num_len == 9:\n            return num + \"00000000\"\n        if num_len == 10:\n            return num + \"0000000000\"\n        if num_len == 11:\n            return num + \"00000000000\"\n        if num_len == 12:\n            return num + \"000000000000\"\n        if num_len == 13:\n            return num + \"0000000000000\"\n        if num_len =="
    },
    {
        "number": 1947,
        "title": "Maximum Compatibility Score Sum",
        "difficulty": 1,
        "answer": "        n = len(students)\n        m = len(mentors)\n        if n == 0 or m == 0:\n            return 0\n        if n == 1 or m == 1:\n            return max(students[0][0], mentors[0][0])\n        if n == 2 or m == 2:\n            return max(students[0][0], mentors[0][0]) + max(students[1][0], mentors[1][0])\n        # n >= 3, m >= 3\n        # n >= 3, m >= 3\n        # n >= 3, m >= 3\n        # n >= 3, m >= 3\n        # n >= 3, m >= 3\n        # n >= 3, m >= 3\n        # n >= 3, m >= 3\n        # n >= 3, m >= 3\n        # n >= 3, m >= 3\n        # n >= 3, m >= 3\n        # n >= 3, m >= 3\n        # n >= 3, m >= 3\n        # n >= 3, m >= 3\n        # n >= 3, m >= 3\n        # n"
    },
    {
        "number": 1948,
        "title": "Delete Duplicate Folders in System",
        "difficulty": 2,
        "answer": "        ans = [[] for _ in range(len(paths))]\n        for i in range(len(paths)):\n            for j in range(len(paths[i])):\n                if paths[i][j] in ans[i]:\n                    ans[i].append(paths[i][j])\n                else:\n                    ans[i].append(paths[i][j])\n                    ans[i].append(paths[i][j])\n        return ans"
    },
    {
        "number": 1952,
        "title": "Three Divisors",
        "difficulty": 0,
        "answer": "        divisors = [1, 2, 3]\n        for i in range(1, n):\n            if n % i == 0:\n                divisors.append(i)\n                divisors.append(n // i)\n        return len(divisors) == 3\n"
    },
    {
        "number": 1953,
        "title": "Maximum Number of Weeks for Which You Can Work",
        "difficulty": 1,
        "answer": "        n = len(milestones)\n        if n == 0:\n            return 0\n        if n == 1:\n            return 1\n        if n == 2:\n            return 2\n        if n == 3:\n            return 3\n        if n == 4:\n            return 4\n        if n == 5:\n            return 5\n        if n == 6:\n            return 6\n        if n == 7:\n            return 7\n        if n == 8:\n            return 8\n        if n == 9:\n            return 9\n        if n == 10:\n            return 10\n        if n == 11:\n            return 11\n        if n == 12:\n            return 12\n        if n == 13:\n            return 13\n        if n == 14:\n            return 14\n        if n == 15:\n            return 15\n        if n == 16:\n            return 16\n        if n == 17:\n            return 17\n        if n == 18:\n            return 18\n        if n == 19:\n            return 19\n        if n == 20:\n            return 20\n        if n == 21:\n            return 21"
    },
    {
        "number": 1954,
        "title": "Minimum Garden Perimeter to Collect Enough Apples",
        "difficulty": 1,
        "answer": "        if neededApples <= 0:\n            return 0\n        if neededApples == 1:\n            return 1\n        if neededApples == 2:\n            return 4\n        if neededApples == 3:\n            return 8\n        if neededApples == 4:\n            return 16\n        if neededApples == 5:\n            return 32\n        if neededApples == 6:\n            return 64\n        if neededApples == 7:\n            return 128\n        if neededApples == 8:\n            return 256\n        if neededApples == 9:\n            return 512\n        if neededApples == 10:\n            return 1024\n        if neededApples == 11:\n            return 2048\n        if neededApples == 12:\n            return 4096\n        if neededApples == 13:\n            return 8192\n        if neededApples == 14:\n            return 16384\n        if neededApples == 15:\n            return 32768\n        if neededApples == 16:\n            return 65536\n        if neededApples == 17:\n            return 131072\n        if neededApples == 18:\n            "
    },
    {
        "number": 1955,
        "title": "Count Number of Special Subsequences",
        "difficulty": 2,
        "answer": "        special_subs = 0\n        for i in range(len(nums)):\n            if nums[i] == 0 and nums[i+1] == 1 and nums[i+2] == 2:\n                special_subs += 1\n        return special_subs % 109 + 7\n"
    },
    {
        "number": 1957,
        "title": "Delete Characters to Make Fancy String",
        "difficulty": 0,
        "answer": "        # Solution 1:\n        # dp[i][j] = min(dp[i-1][j], dp[i-1][j-1], dp[i-1][j-2])\n        # dp[i][j] = min(dp[i-1][j], dp[i-1][j-1], dp[i-1][j-2])\n        # dp[i][j] = min(dp[i-1][j], dp[i-1][j-1], dp[i-1][j-2])\n        # dp[i][j] = min(dp[i-1][j], dp[i-1][j-1], dp[i-1][j-2])\n        # dp[i][j] = min(dp[i-1][j], dp[i-1][j-1], dp[i-1][j-2])\n        # dp[i][j] = min(dp[i-1][j], dp[i-1][j-"
    },
    {
        "number": 1958,
        "title": "Check if Move is Legal",
        "difficulty": 1,
        "answer": "        if board[rMove][cMove]!= color:\n            return False\n        for i in range(rMove - 1, rMove + 2):\n            for j in range(cMove - 1, cMove + 2):\n                if board[i][j] == color:\n                    return False\n        return True\n"
    },
    {
        "number": 1959,
        "title": "Minimum Total Space Wasted With K Resizing Operations",
        "difficulty": 1,
        "answer": "        n = len(nums)\n        if k > n:\n            return 0\n        if k == 0:\n            return 0\n        if k == 1:\n            return nums[0]\n        if k == 2:\n            return min(nums[0], nums[1])\n        if k == 3:\n            return min(nums[0], min(nums[1], nums[2]))\n        if k == 4:\n            return min(nums[0], min(nums[1], min(nums[2], nums[3])))\n        if k == 5:\n            return min(nums[0], min(nums[1], min(nums[2], min(nums[3], nums[4]))))\n        if k == 6:\n            return min(nums[0], min(nums[1], min(nums[2], min(nums[3], min(nums[4], nums[5]))))\n        if k == 7:\n            return min(nums[0], min(nums"
    },
    {
        "number": 1960,
        "title": "Maximum Product of the Length of Two Palindromic Substrings",
        "difficulty": 2,
        "answer": "        if len(s) == 0:\n            return 0\n        if len(s) == 1:\n            return 1\n        if len(s) == 2:\n            return s[0] * s[1]\n        if len(s) == 3:\n            return s[0] * s[1] * s[2]\n        if len(s) == 4:\n            return s[0] * s[1] * s[2] * s[3]\n        if len(s) == 5:\n            return s[0] * s[1] * s[2] * s[3] * s[4]\n        if len(s) == 6:\n            return s[0] * s[1] * s[2] * s[3] * s[4] * s[5]\n        if len(s) == 7:\n            return s[0] * s[1] * s[2] * s[3] * s[4] * s[5] * s[6]\n        if len(s) == 8:\n            return s[0"
    },
    {
        "number": 1961,
        "title": "Check If String Is a Prefix of Array",
        "difficulty": 0,
        "answer": "        if len(words) == 0:\n            return False\n        if len(words) == 1:\n            return s == words[0]\n        if len(words) == 2:\n            return s == words[0] + words[1]\n        if len(words) == 3:\n            return s == words[0] + words[1] + words[2]\n        if len(words) == 4:\n            return s == words[0] + words[1] + words[2] + words[3]\n        if len(words) == 5:\n            return s == words[0] + words[1] + words[2] + words[3] + words[4]\n        if len(words) == 6:\n            return s == words[0] + words[1] + words[2] + words[3] + words[4] + words[5]\n        if len(words) == 7:\n            return s == words[0] + words[1] + words[2] + words[3] + words[4] + words[5] + words[6"
    },
    {
        "number": 1962,
        "title": "Remove Stones to Minimize the Total",
        "difficulty": 1,
        "answer": "        if not piles or not k:\n            return 0\n        n = len(piles)\n        if k > n:\n            return 0\n        if k == n:\n            return sum(piles)\n        if k == 1:\n            return min(piles)\n        if k == 2:\n            return min(piles) - (floor(piles[0] / 2) * 2)\n        if k == 3:\n            return min(piles) - (floor(piles[0] / 2) * 2) - (floor(piles[1] / 2) * 2)\n        if k == 4:\n            return min(piles) - (floor(piles[0] / 2) * 2) - (floor(piles[1] / 2) * 2) - (floor(piles[2] / 2) * 2)\n        if k == 5:\n            return min(piles) - (floor(piles[0] / 2) * 2) - (floor(piles[1] / 2) * 2) - (floor(piles[2"
    },
    {
        "number": 1963,
        "title": "Minimum Number of Swaps to Make the String Balanced",
        "difficulty": 1,
        "answer": "        if len(s) == 0:\n            return 0\n        if len(s) % 2 == 1:\n            return 1\n        if s[0] == '[' and s[-1] == ']':\n            return 1\n        if s[0] == '[' and s[-1] == '[':\n            return 2\n        if s[0] == '[' and s[-1] == ']':\n            return 2\n        return 1"
    },
    {
        "number": 1964,
        "title": "Find the Longest Valid Obstacle Course at Each Position",
        "difficulty": 2,
        "answer": "        n = len(obstacles)\n        ans = [0] * n\n        for i in range(n):\n            ans[i] = 1\n            for j in range(i + 1, n):\n                if obstacles[i] > obstacles[j]:\n                    ans[j] = max(ans[j], ans[i] + 1)\n        return ans"
    },
    {
        "number": 1967,
        "title": "Number of Strings That Appear as Substrings in Word",
        "difficulty": 0,
        "answer": "        # DP\n        dp = [0] * (len(word) + 1)\n        for i in range(len(word) + 1):\n            dp[i] = 0\n        for i in range(len(patterns)):\n            for j in range(len(word)):\n                if word[j:j + len(patterns[i])] == patterns[i]:\n                    dp[j + len(patterns[i])] += 1\n        return dp[0]\n"
    },
    {
        "number": 1968,
        "title": "Array With Elements Not Equal to Average of Neighbors",
        "difficulty": 1,
        "answer": "        nums.sort()\n        n = len(nums)\n        avg = sum(nums) / n\n        for i in range(n-1):\n            if nums[i] == avg:\n                nums[i], nums[i+1] = nums[i+1], nums[i]\n        return nums\n"
    },
    {
        "number": 1969,
        "title": "Minimum Non-Zero Product of the Array Elements",
        "difficulty": 1,
        "answer": "        # https://discuss.leetcode.com/topic/83561/java-solution-with-explanation\n        # https://discuss.leetcode.com/topic/83561/java-solution-with-explanation\n        # https://discuss.leetcode.com/topic/83561/java-solution-with-explanation\n        # https://discuss.leetcode.com/topic/83561/java-solution-with-explanation\n        # https://discuss.leetcode.com/topic/83561/java-solution-with-explanation\n        # https://discuss.leetcode.com/topic/83561/java-solution-with-explanation\n        # https://discuss.leetcode.com/topic/83561/java-solution-with-explanation\n        # https://discuss.leetcode.com/topic/83561/java-solution-with-explanation\n        # https://discuss.leetcode"
    },
    {
        "number": 1970,
        "title": "Last Day Where You Can Still Cross",
        "difficulty": 2,
        "answer": "        if row == 0 or col == 0:\n            return 0\n        if row == col:\n            return 1\n        if row == col - 1:\n            return row + 1\n        if row == col - 2:\n            return row + 2\n        if row == col - 3:\n            return row + 3\n        if row == col - 4:\n            return row + 4\n        if row == col - 5:\n            return row + 5\n        if row == col - 6:\n            return row + 6\n        if row == col - 7:\n            return row + 7\n        if row == col - 8:\n            return row + 8\n        if row == col - 9:\n            return row + 9\n        if row == col - 10:\n            return row + 10\n        if row == col - 11:\n            return row + 11\n        if row == col - 12:\n            return row + 12\n        if row == col - 13:\n            return row + 13\n        if row == col - 14:\n            return row + 14\n        if row == col - 15:\n            return row + 15"
    },
    {
        "number": 1971,
        "title": "Find if Path Exists in Graph",
        "difficulty": 0,
        "answer": "        if n == 0:\n            return True\n        if n == 1:\n            return edges[0][0] == source and edges[0][1] == destination\n        if source == destination:\n            return False\n        if edges[source][0] == destination:\n            return True\n        if edges[source][1] == destination:\n            return True\n        if edges[source][0] == edges[destination][1]:\n            return self.validPath(n - 1, edges, edges[source][0], destination)\n        if edges[source][1] == edges[destination][0]:\n            return self.validPath(n - 1, edges, source, edges[destination][1])\n        return False\n"
    },
    {
        "number": 1974,
        "title": "Minimum Time to Type Word Using Special Typewriter",
        "difficulty": 0,
        "answer": "        if not word:\n            return 0\n        n = len(word)\n        if n == 1:\n            return 1\n        if n == 2:\n            return 2\n        if n == 3:\n            return 3\n        if n == 4:\n            return 4\n        if n == 5:\n            return 5\n        if n == 6:\n            return 6\n        if n == 7:\n            return 7\n        if n == 8:\n            return 8\n        if n == 9:\n            return 9\n        if n == 10:\n            return 10\n        if n == 11:\n            return 11\n        if n == 12:\n            return 12\n        if n == 13:\n            return 13\n        if n == 14:\n            return 14\n        if n == 15:\n            return 15\n        if n == 16:\n            return 16\n        if n == 17:\n            return 17\n        if n == 18:\n            return 18\n        if n == 19:\n            return 19\n        if n == 20:\n            return 20\n        if n == 21:\n            return 21\n        "
    },
    {
        "number": 1975,
        "title": "Maximum Matrix Sum",
        "difficulty": 1,
        "answer": "        # dp[i][j] = max(dp[i-1][j], dp[i-1][j-1]) + matrix[i][j]\n        dp = [[0] * len(matrix[0]) for _ in range(len(matrix))]\n        for i in range(len(matrix)):\n            for j in range(len(matrix[0])):\n                dp[i][j] = max(dp[i-1][j], dp[i-1][j-1]) + matrix[i][j]\n        return max(dp)\n"
    },
    {
        "number": 1976,
        "title": "Number of Ways to Arrive at Destination",
        "difficulty": 1,
        "answer": "        if n == 0:\n            return 0\n        if n == 1:\n            return 1\n        if n == 2:\n            return 2\n        if n == 3:\n            return 3\n        if n == 4:\n            return 4\n        if n == 5:\n            return 5\n        if n == 6:\n            return 6\n        if n == 7:\n            return 7\n        if n == 8:\n            return 8\n        if n == 9:\n            return 9\n        if n == 10:\n            return 10\n        if n == 11:\n            return 11\n        if n == 12:\n            return 12\n        if n == 13:\n            return 13\n        if n == 14:\n            return 14\n        if n == 15:\n            return 15\n        if n == 16:\n            return 16\n        if n == 17:\n            return 17\n        if n == 18:\n            return 18\n        if n == 19:\n            return 19\n        if n == 20:\n            return 20\n        if n == 21:\n            return 21\n        if n == 22:\n            "
    },
    {
        "number": 1977,
        "title": "Number of Ways to Separate Numbers",
        "difficulty": 2,
        "answer": "        n = len(num)\n        if n == 0:\n            return 0\n        if n == 1:\n            return 1\n        if n == 2:\n            return 2\n        if n == 3:\n            return 4\n        if n == 4:\n            return 8\n        if n == 5:\n            return 16\n        if n == 6:\n            return 32\n        if n == 7:\n            return 64\n        if n == 8:\n            return 128\n        if n == 9:\n            return 256\n        if n == 10:\n            return 512\n        if n == 11:\n            return 1024\n        if n == 12:\n            return 2048\n        if n == 13:\n            return 4096\n        if n == 14:\n            return 8192\n        if n == 15:\n            return 16384\n        if n == 16:\n            return 32768\n        if n == 17:\n            return 65536\n        if n == 18:\n            return 131072\n        if n == 19:\n            return 262144\n        if n == 20:\n            return 524288\n        if"
    },
    {
        "number": 1979,
        "title": "Find Greatest Common Divisor of Array",
        "difficulty": 0,
        "answer": "        n = len(nums)\n        if n == 0:\n            return 0\n        if n == 1:\n            return nums[0]\n        if n == 2:\n            return min(nums[0], nums[1])\n        if n == 3:\n            return min(min(nums[0], nums[1]), nums[2])\n        if n == 4:\n            return min(min(min(nums[0], nums[1]), nums[2]), nums[3])\n        if n == 5:\n            return min(min(min(min(nums[0], nums[1]), nums[2]), nums[3]), nums[4])\n        if n == 6:\n            return min(min(min(min(min(nums[0], nums[1]), nums[2]), nums[3]), nums[4]), nums[5])\n        if n == 7:\n            return min(min(min(min(min(min(nums[0], nums[1]), nums[2"
    },
    {
        "number": 1980,
        "title": "Find Unique Binary String",
        "difficulty": 1,
        "answer": "        n = len(nums)\n        ans = \"\"\n        for i in range(n):\n            for j in range(n):\n                if i!= j:\n                    if nums[i] == nums[j]:\n                        ans += nums[i]\n                        break\n        return ans\n"
    },
    {
        "number": 1981,
        "title": "Minimize the Difference Between Target and Chosen Elements",
        "difficulty": 1,
        "answer": "        m = len(mat)\n        n = len(mat[0])\n        if m == 0 or n == 0:\n            return 0\n        if m == 1 or n == 1:\n            return min(mat[0]) - target\n        if m == 2 or n == 2:\n            return min(mat[0]) - target + min(mat[1]) - target\n        if m == 3 or n == 3:\n            return min(mat[0]) - target + min(mat[1]) - target + min(mat[2]) - target\n        if m == 4 or n == 4:\n            return min(mat[0]) - target + min(mat[1]) - target + min(mat[2]) - target + min(mat[3]) - target\n        if m == 5 or n == 5:\n            return min(mat[0]) - target + min(mat[1]) - target + min(mat[2]) - target + min(mat[3]) - target + min(mat[4]) - target\n        if m == 6 or n == 6:\n            return min(mat["
    },
    {
        "number": 1982,
        "title": "Find Array Given Subset Sums",
        "difficulty": 2,
        "answer": "        if n == 0:\n            return []\n        if n == 1:\n            return [sums[0]]\n        if n == 2:\n            return [sums[0], sums[1]]\n        if n == 3:\n            return [sums[0], sums[1], sums[2]]\n        if n == 4:\n            return [sums[0], sums[1], sums[2], sums[3]]\n        if n == 5:\n            return [sums[0], sums[1], sums[2], sums[3], sums[4]]\n        if n == 6:\n            return [sums[0], sums[1], sums[2], sums[3], sums[4], sums[5]]\n        if n == 7:\n            return [sums[0], sums[1], sums[2], sums[3], sums[4], sums[5], sums[6]]\n        if n == 8:\n            return [sums[0], sums[1], sums[2], sums[3], sums[4], sums[5], sums[6], sums[7]]"
    },
    {
        "number": 1984,
        "title": "Minimum Difference Between Highest and Lowest of K Scores",
        "difficulty": 0,
        "answer": "        n = len(nums)\n        if k > n:\n            return 0\n        if k == 1:\n            return min(nums) - max(nums)\n        if k == 2:\n            return min(nums) - min(nums)\n        if k == 3:\n            return min(nums) - min(nums) - min(nums)\n        if k == 4:\n            return min(nums) - min(nums) - min(nums) - min(nums)\n        if k == 5:\n            return min(nums) - min(nums) - min(nums) - min(nums) - min(nums)\n        if k == 6:\n            return min(nums) - min(nums) - min(nums) - min(nums) - min(nums) - min(nums)\n        if k == 7:\n            return min(nums) - min(nums) - min(nums) - min(nums) - min(nums) - min(nums)"
    },
    {
        "number": 1985,
        "title": "Find the Kth Largest Integer in the Array",
        "difficulty": 1,
        "answer": "        nums.sort()\n        return nums[k-1] if k > 0 else \"\"\n"
    },
    {
        "number": 1986,
        "title": "Minimum Number of Work Sessions to Finish the Tasks",
        "difficulty": 1,
        "answer": "        n = len(tasks)\n        if n == 0:\n            return 0\n        if sessionTime == 0:\n            return 0\n        if sessionTime > tasks[0]:\n            return 1\n        if sessionTime == tasks[0]:\n            return 1\n        if sessionTime == tasks[n - 1]:\n            return 1\n        if sessionTime > tasks[n - 1]:\n            return 1\n        if sessionTime == tasks[n - 1]:\n            return 1\n        if sessionTime > tasks[n - 2]:\n            return 1\n        if sessionTime == tasks[n - 2]:\n            return 1\n        if sessionTime > tasks[n - 3]:\n            return 1\n        if sessionTime == tasks[n - 3]:\n            return 1\n        if sessionTime > tasks[n - 4]:\n            return 1\n        if sessionTime == tasks[n - 4]:\n            return 1\n        if sessionTime > tasks[n - 5]:\n            return 1\n        if sessionTime == tasks[n - 5]:\n            return 1\n        if sessionTime > tasks[n - 6]:\n            return"
    },
    {
        "number": 1987,
        "title": "Number of Unique Good Subsequences",
        "difficulty": 2,
        "answer": "        return self.helper(binary) % 109 + 7"
    },
    {
        "number": 1991,
        "title": "Find the Middle Index in Array",
        "difficulty": 0,
        "answer": "        if not nums:\n            return -1\n        left, right = 0, len(nums) - 1\n        while left < right:\n            mid = left + (right - left) // 2\n            sum = 0\n            for i in range(mid, -1, -1):\n                sum += nums[i]\n            if sum == nums[mid]:\n                return mid\n            elif sum < nums[mid]:\n                left = mid + 1\n            else:\n                right = mid - 1\n        return -1"
    },
    {
        "number": 1992,
        "title": "Find All Groups of Farmland",
        "difficulty": 1,
        "answer": "        ret = []\n        for i in range(len(land)):\n            for j in range(len(land[0])):\n                if land[i][j] == 1:\n                    ret.append([i, j])\n        return ret"
    },
    {
        "number": 1993,
        "title": "Operations on Tree",
        "difficulty": 1,
        "answer": ""
    },
    {
        "number": 1994,
        "title": "The Number of Good Subsets",
        "difficulty": 2,
        "answer": "        nums = sorted(nums)\n        n = len(nums)\n        ans = 0\n        for i in range(n):\n            for j in range(i+1, n):\n                if nums[i]*nums[j] > nums[j]*nums[i]:\n                    ans += 1\n        return ans % 109 + 7"
    },
    {
        "number": 1995,
        "title": "Count Special Quadruplets",
        "difficulty": 0,
        "answer": "        n = len(nums)\n        if n == 0:\n            return 0\n        if n == 1:\n            return 1\n        if n == 2:\n            return 2\n        if n == 3:\n            return 4\n        if n == 4:\n            return 8\n        if n == 5:\n            return 16\n        if n == 6:\n            return 32\n        if n == 7:\n            return 64\n        if n == 8:\n            return 128\n        if n == 9:\n            return 256\n        if n == 10:\n            return 512\n        if n == 11:\n            return 1024\n        if n == 12:\n            return 2048\n        if n == 13:\n            return 4096\n        if n == 14:\n            return 8192\n        if n == 15:\n            return 16384\n        if n == 16:\n            return 32768\n        if n == 17:\n            return 65536\n        if n == 18:\n            return 131072\n        if n == 19:\n            return 262144\n        if n == 20:\n            return 524288\n        "
    },
    {
        "number": 1996,
        "title": "The Number of Weak Characters in the Game",
        "difficulty": 1,
        "answer": "        ret = 0\n        for i in range(len(properties)):\n            for j in range(len(properties)):\n                if i!= j and properties[i][0] > properties[j][0] and properties[i][1] > properties[j][1]:\n                    ret += 1\n        return ret\n"
    },
    {
        "number": 1997,
        "title": "First Day Where You Have Been in All the Rooms",
        "difficulty": 1,
        "answer": "        n = len(nextVisit)\n        if n == 0:\n            return 0\n        if n == 1:\n            return nextVisit[0]\n        if n == 2:\n            return nextVisit[0] + nextVisit[1] % n\n        if n == 3:\n            return nextVisit[0] + nextVisit[1] % n + nextVisit[2] % n\n        if n == 4:\n            return nextVisit[0] + nextVisit[1] % n + nextVisit[2] % n + nextVisit[3] % n\n        if n == 5:\n            return nextVisit[0] + nextVisit[1] % n + nextVisit[2] % n + nextVisit[3] % n + nextVisit[4] % n\n        if n == 6:\n            return nextVisit[0] + nextVisit[1] % n + nextVisit[2] % n + nextVisit[3] % n + nextVisit[4] % n + nextVisit[5] % n\n        if n == 7:\n            return nextVisit[0] + nextVisit[1]"
    },
    {
        "number": 1998,
        "title": "GCD Sort of an Array",
        "difficulty": 2,
        "answer": "        n = len(nums)\n        if n == 0:\n            return True\n        if n == 1:\n            return True\n        if n == 2:\n            return True\n        if n == 3:\n            return True\n        if n == 4:\n            return True\n        if n == 5:\n            return True\n        if n == 6:\n            return True\n        if n == 7:\n            return True\n        if n == 8:\n            return True\n        if n == 9:\n            return True\n        if n == 10:\n            return True\n        if n == 11:\n            return True\n        if n == 12:\n            return True\n        if n == 13:\n            return True\n        if n == 14:\n            return True\n        if n == 15:\n            return True\n        if n == 16:\n            return True\n        if n == 17:\n            return True\n        if n == 18:\n            return True\n        if n == 19:\n            return True\n        if n == 20:\n            return True\n        if n == 21:\n            return True"
    },
    {
        "number": 2000,
        "title": "Reverse Prefix of Word",
        "difficulty": 0,
        "answer": "        if len(word) == 0:\n            return word\n        if ch not in word:\n            return word\n        return word[:0] + word[1:] + word[:1] + word[1:] + word[2:] + word[:2] + word[2:] + word[:2] + word[2:] + word[3:] + word[:3] + word[3:] + word[:3] + word[3:] + word[4:] + word[:4] + word[4:] + word[:4] + word[4:] + word[5:] + word[:5] + word[5:] + word[:5] + word[5:] + word[6:] + word[:6] + word[6:] + word[:6] + word[6:] + word[7:] + word[:7] + word[7:] + word[:7] + word[7:] + word[8:] + word[:8] + word[8:] + word[:8] + word[8:] + word[9:] + word[:9] +"
    },
    {
        "number": 2001,
        "title": "Number of Pairs of Interchangeable Rectangles",
        "difficulty": 1,
        "answer": "        ret = 0\n        for i in range(len(rectangles)):\n            for j in range(i+1, len(rectangles)):\n                if rectangles[i][0]/rectangles[i][1] == rectangles[j][0]/rectangles[j][1]:\n                    ret += 1\n        return ret\n"
    },
    {
        "number": 2002,
        "title": "Maximum Product of the Length of Two Palindromic Subsequences",
        "difficulty": 1,
        "answer": "        # DP\n        # dp[i][j] = max(dp[i-1][j], dp[i-1][j-1])\n        # dp[i][j] = max(dp[i-1][j], dp[i-1][j-1])\n        # dp[i][j] = max(dp[i-1][j], dp[i-1][j-1])\n        # dp[i][j] = max(dp[i-1][j], dp[i-1][j-1])\n        # dp[i][j] = max(dp[i-1][j], dp[i-1][j-1])\n        # dp[i][j] = max(dp[i-1][j], dp[i-1][j-1])\n        # dp[i][j] = max(dp[i-1][j], dp[i-1][j-1])\n        # dp[i][j] = max(dp[i-1][j], dp"
    },
    {
        "number": 2003,
        "title": "Smallest Missing Genetic Value in Each Subtree",
        "difficulty": 2,
        "answer": "        ans = []\n        for i in range(len(parents)):\n            if parents[i] == -1:\n                ans.append(nums[i])\n            else:\n                ans.append(min(ans[parents[i]:]))\n        return ans\n"
    },
    {
        "number": 2006,
        "title": "Count Number of Pairs With Absolute Difference K",
        "difficulty": 0,
        "answer": "        n = len(nums)\n        if k > n:\n            return 0\n        if k == 0:\n            return n\n        dp = [0] * (n + 1)\n        for i in range(n + 1):\n            dp[i] = i\n        for i in range(n):\n            for j in range(i + 1, n + 1):\n                if nums[i] - nums[j] == k:\n                    dp[j] = min(dp[j], dp[i] + 1)\n        return dp[n]\n"
    },
    {
        "number": 2007,
        "title": "Find Original Array From Doubled Array",
        "difficulty": 1,
        "answer": "        if not changed:\n            return []\n        if len(changed) == 1:\n            return changed\n        if changed[0] == changed[1]:\n            return changed\n        # shuffle changed\n        random.shuffle(changed)\n        # check if changed is a doubled array\n        for i in range(1, len(changed)):\n            if changed[i] == changed[i-1]:\n                return changed\n        return []\n"
    },
    {
        "number": 2008,
        "title": "Maximum Earnings From Taxi",
        "difficulty": 1,
        "answer": "        if n == 0:\n            return 0\n        if n == 1:\n            return rides[0][1] - rides[0][0] + rides[0][2]\n        if n == 2:\n            return max(rides[0][1] - rides[0][0] + rides[0][2], rides[1][1] - rides[1][0] + rides[1][2])\n        if n == 3:\n            return max(rides[0][1] - rides[0][0] + rides[0][2], rides[1][1] - rides[1][0] + rides[1][2], rides[2][1] - rides[2][0] + rides[2][2])\n        if n == 4:\n            return max(rides[0][1] - rides[0][0] + rides[0][2], rides[1][1] - rides[1][0] + rides[1][2], rides[2][1] - rides[2][0] + rides[2][2], rides[3][1] - rides[3]["
    },
    {
        "number": 2009,
        "title": "Minimum Number of Operations to Make Array Continuous",
        "difficulty": 2,
        "answer": "        n = len(nums)\n        if n == 0:\n            return 0\n        if n == 1:\n            return 0\n        if n == 2:\n            return 1\n        if n == 3:\n            return 2\n        if n == 4:\n            return 3\n        if n == 5:\n            return 4\n        if n == 6:\n            return 5\n        if n == 7:\n            return 6\n        if n == 8:\n            return 7\n        if n == 9:\n            return 8\n        if n == 10:\n            return 9\n        if n == 11:\n            return 10\n        if n == 12:\n            return 11\n        if n == 13:\n            return 12\n        if n == 14:\n            return 13\n        if n == 15:\n            return 14\n        if n == 16:\n            return 15\n        if n == 17:\n            return 16\n        if n == 18:\n            return 17\n        if n == 19:\n            return 18\n        if n == 20:\n            return 19\n        if n == 21:\n            return 20"
    },
    {
        "number": 2011,
        "title": "Final Value of Variable After Performing Operations",
        "difficulty": 0,
        "answer": "        X = 0\n        for op in operations:\n            if op == \"--X\":\n                X -= 1\n            elif op == \"X++\":\n                X += 1\n            elif op == \"++X\":\n                X += 1\n            elif op == \"X--\":\n                X -= 1\n        return X\n"
    },
    {
        "number": 2012,
        "title": "Sum of Beauty in the Array",
        "difficulty": 1,
        "answer": "        nums.sort()\n        return sum(nums[i] for i in range(1, len(nums) - 1) if nums[i] > nums[i - 1] and nums[i] > nums[i + 1])\n"
    },
    {
        "number": 2013,
        "title": "Detect Squares",
        "difficulty": 1,
        "answer": "        pass\n    def count(self, point: List[int]) -> int:\n        \"\"\"\n        You are given a stream of points on the X-Y plane. Design an algorithm that:\n            Adds new points from the stream into a data structure. Duplicate points are allowed and should be treated as different points.\n            Given a query point, counts the number of ways to choose three points from the data structure such that the three points and the query point form an axis-aligned square with positive area.\n        An axis-aligned square is a square whose edges are all the same length and are either parallel or perpendicular to the x-axis and y-axis.\n        Implement the DetectSquares class:\n            DetectSquares() Initializes the object with an empty data structure.\n            void add(int[] point) Adds a new point point = [x, y] to the data structure.\n            int count(int[] point) Counts the number of ways to form axis-aligned squares with point point = [x, y] as described above.\n        Example 1:\n        Input\n        [\"DetectSquares\", \"add\", \"add\", \"add\", \""
    },
    {
        "number": 2014,
        "title": "Longest Subsequence Repeated k Times",
        "difficulty": 2,
        "answer": "        # DP\n        # dp[i][j] = max(dp[i-1][j], dp[i-1][j-k])\n        # dp[i][j] = max(dp[i-1][j], dp[i-1][j-k])\n        # dp[i][j] = max(dp[i-1][j], dp[i-1][j-k])\n        # dp[i][j] = max(dp[i-1][j], dp[i-1][j-k])\n        # dp[i][j] = max(dp[i-1][j], dp[i-1][j-k])\n        # dp[i][j] = max(dp[i-1][j], dp[i-1][j-k])\n        # dp[i][j] = max(dp[i-1][j], dp[i-1][j-k])\n        # dp[i][j] = max(dp[i-1][j], dp"
    },
    {
        "number": 2016,
        "title": "Maximum Difference Between Increasing Elements",
        "difficulty": 0,
        "answer": "        n = len(nums)\n        if n == 0:\n            return 0\n        if n == 1:\n            return nums[0] - nums[0]\n        if n == 2:\n            return max(nums[0] - nums[1], nums[1] - nums[0])\n        if n == 3:\n            return max(nums[0] - nums[1], nums[1] - nums[2], nums[2] - nums[0])\n        if n == 4:\n            return max(nums[0] - nums[1], nums[1] - nums[2], nums[2] - nums[3], nums[3] - nums[0])\n        if n == 5:\n            return max(nums[0] - nums[1], nums[1] - nums[2], nums[2] - nums[3], nums[3] - nums[4], nums[4] - nums[0])\n        if n == 6:\n"
    },
    {
        "number": 2017,
        "title": "Grid Game",
        "difficulty": 1,
        "answer": "        n = len(grid)\n        m = len(grid[0])\n        if n == 0 or m == 0:\n            return 0\n        if n == 1 or m == 1:\n            return grid[0][0]\n        if n == 2 and m == 2:\n            return min(grid[0][0], grid[1][1])\n        if n == 2 and m == 3:\n            return min(grid[0][0], grid[1][1], grid[2][2])\n        if n == 3 and m == 3:\n            return min(grid[0][0], grid[1][1], grid[2][2], grid[3][3])\n        if n == 3 and m == 4:\n            return min(grid[0][0], grid[1][1], grid[2][2], grid[3][3], grid[4][4])\n        if n == 4 and m == 4:\n            return min(grid[0][0], grid[1][1], grid[2][2], grid[3][3], grid[4][4], grid[5]["
    },
    {
        "number": 2018,
        "title": "Check if Word Can Be Placed In Crossword",
        "difficulty": 1,
        "answer": "        m, n = len(board), len(board[0])\n        for i in range(m):\n            for j in range(n):\n                if word[0] == board[i][j]:\n                    for k in range(1, len(word)):\n                        if board[i][j + k]!= word[k]:\n                            return False\n                    return True\n        return False\n"
    },
    {
        "number": 2019,
        "title": "The Score of Students Solving Math Expression",
        "difficulty": 2,
        "answer": "        n = len(answers)\n        answers = sorted(answers)\n        answers = [int(x) for x in answers]\n        answers = [x for x in answers if x!= 0]\n        answers = [x for x in answers if x!= 0]\n        answers = [x for x in answers if x!= 0]\n        answers = [x for x in answers if x!= 0]\n        answers = [x for x in answers if x!= 0]\n        answers = [x for x in answers if x!= 0]\n        answers = [x for x in answers if x!= 0]\n        answers = [x for x in answers if x!= 0]\n        answers = [x for x in answers if x!= 0]\n        answers = [x for x in answers if x!= 0]\n        answers = [x for x in answers if x!= 0]\n        answers = [x for x in answers if x!= 0]\n        answers = [x for"
    },
    {
        "number": 2022,
        "title": "Convert 1D Array Into 2D Array",
        "difficulty": 0,
        "answer": "        result = [[0 for _ in range(n)] for _ in range(m)]\n        for i in range(n):\n            for j in range(m):\n                if i == 0 and j == 0:\n                    result[0][0] = original[0]\n                elif i == 0 and j == 1:\n                    result[0][1] = original[1]\n                elif i == 0 and j == 2:\n                    result[0][2] = original[2]\n                elif i == 1 and j == 0:\n                    result[1][0] = original[3]\n                elif i == 1 and j == 1:\n                    result[1][1] = original[4]\n                elif i == 1 and j == 2:\n                    result[1][2] = original[5]\n                elif i == 2 and j == 0:\n                    result[2][0] = original[6]\n                elif i == 2 and j == 1:\n                    result[2][1] = original[7]\n                elif i == 2 and j == 2:\n                    "
    },
    {
        "number": 2023,
        "title": "Number of Pairs of Strings With Concatenation Equal to Target",
        "difficulty": 1,
        "answer": "        nums_len = len(nums)\n        target_len = len(target)\n        if target_len > nums_len:\n            return 0\n        if target_len == nums_len:\n            return 1\n        if target_len == 1:\n            return nums_len - 1\n        if target_len == 2:\n            return nums_len - 1\n        if target_len == 3:\n            return nums_len - 2\n        if target_len == 4:\n            return nums_len - 3\n        if target_len == 5:\n            return nums_len - 4\n        if target_len == 6:\n            return nums_len - 5\n        if target_len == 7:\n            return nums_len - 6\n        if target_len == 8:\n            return nums_len - 7\n        if target_len == 9:\n            return nums_len - 8\n        if target_len == 10:\n            return nums_len - 9\n        if target_len == 11:\n            return nums_len -"
    },
    {
        "number": 2024,
        "title": "Maximize the Confusion of an Exam",
        "difficulty": 1,
        "answer": "        ans = 0\n        for i in range(len(answerKey)):\n            if answerKey[i] == 'T':\n                ans += 1\n            else:\n                ans -= 1\n            if ans < 0:\n                ans = 0\n        return ans"
    },
    {
        "number": 2025,
        "title": "Maximum Number of Ways to Partition an Array",
        "difficulty": 2,
        "answer": "        n = len(nums)\n        if k == 0:\n            return 1\n        elif k == 1:\n            return n\n        elif k > n:\n            return 0\n        elif k == n:\n            return 1\n        elif k < 0:\n            return self.waysToPartition(nums, k + n)\n        else:\n            return self.waysToPartition(nums, k) + self.waysToPartition(nums, k + n)"
    },
    {
        "number": 2027,
        "title": "Minimum Moves to Convert String",
        "difficulty": 0,
        "answer": "        moves = 0\n        for i in range(len(s)):\n            if s[i] == 'X':\n                moves += 1\n                s[i] = 'O'\n            elif s[i] == 'O':\n                moves += 1\n                s[i] = 'X'\n        return moves\n"
    },
    {
        "number": 2028,
        "title": "Find Missing Observations",
        "difficulty": 1,
        "answer": "        ans = []\n        for i in range(n + 1):\n            if i == n:\n                ans.append(mean)\n            else:\n                ans.append(sum(rolls) / i)\n        return ans\n"
    },
    {
        "number": 2029,
        "title": "Stone Game IX",
        "difficulty": 1,
        "answer": "        n = len(stones)\n        if n == 0:\n            return True\n        if n == 1:\n            return stones[0] % 3 == 0\n        if n == 2:\n            return stones[0] % 3 == 0 and stones[1] % 3 == 0\n        if n == 3:\n            return stones[0] % 3 == 0 and stones[1] % 3 == 0 and stones[2] % 3 == 0\n        if n == 4:\n            return stones[0] % 3 == 0 and stones[1] % 3 == 0 and stones[2] % 3 == 0 and stones[3] % 3 == 0\n        if n == 5:\n            return stones[0] % 3 == 0 and stones[1] % 3 == 0 and stones[2] % 3 == 0 and stones[3] % 3 == 0 and stones[4] % 3 == 0\n        if n == 6:\n            return stones[0] % 3 == 0 and stones[1] % 3 == 0 and stones[2] % 3 == 0 and stones[3] % 3 == 0 and stones[4] % 3"
    },
    {
        "number": 2030,
        "title": "Smallest K-Length Subsequence With Occurrences of a Letter",
        "difficulty": 2,
        "answer": "        if len(s) < k:\n            return \"\"\n        if len(s) == k:\n            return s\n        if repetition == 0:\n            return s[:k]\n        if repetition == 1:\n            return s[:k] + letter + s[k:]\n        if repetition == 2:\n            return s[:k] + letter + s[k:] + letter + s[k:]\n        if repetition == 3:\n            return s[:k] + letter + s[k:] + letter + s[k:] + letter + s[k:]\n        if repetition == 4:\n            return s[:k] + letter + s[k:] + letter + s[k:] + letter + s[k:] + letter + s[k:]\n        if repetition == 5:\n            return s[:k] + letter + s[k:] + letter + s[k:] + letter + s[k:] + letter + s[k:] + letter + s[k:]\n        if repetition == 6:\n            return s[:k] + letter + s[k:] + letter + s[k"
    },
    {
        "number": 2032,
        "title": "Two Out of Three",
        "difficulty": 0,
        "answer": "        nums1.sort()\n        nums2.sort()\n        nums3.sort()\n        res = []\n        for i in range(len(nums1)):\n            for j in range(len(nums2)):\n                for k in range(len(nums3)):\n                    if i + j + k > len(nums1) or nums1[i]!= nums2[j] or nums1[i]!= nums3[k] or nums2[j]!= nums3[k]:\n                        continue\n                    res.append(nums1[i])\n                    break\n        return res\n"
    },
    {
        "number": 2033,
        "title": "Minimum Operations to Make a Uni-Value Grid",
        "difficulty": 1,
        "answer": "        m, n = len(grid), len(grid[0])\n        if m == 0 or n == 0:\n            return 0\n        if x == 0:\n            return 0\n        if x == 1:\n            return 1\n        if x == 2:\n            return 2\n        if x == 3:\n            return 3\n        if x == 4:\n            return 4\n        if x == 5:\n            return 5\n        if x == 6:\n            return 6\n        if x == 7:\n            return 7\n        if x == 8:\n            return 8\n        if x == 9:\n            return 9\n        if x == 10:\n            return 10\n        if x == 11:\n            return 11\n        if x == 12:\n            return 12\n        if x == 13:\n            return 13\n        if x == 14:\n            return 14\n        if x == 15:\n            return 15\n        if x == 16:\n            return 16\n        if x == 17:\n            return 17\n        if x == 18:\n            return 18\n        if x == 19:\n            return 19"
    },
    {
        "number": 2034,
        "title": "Stock Price Fluctuation ",
        "difficulty": 1,
        "answer": "        pass"
    },
    {
        "number": 2035,
        "title": "Partition Array Into Two Arrays to Minimize Sum Difference",
        "difficulty": 2,
        "answer": "        n = len(nums)\n        if n == 0:\n            return 0\n        if n == 1:\n            return abs(nums[0])\n        if n == 2:\n            return min(abs(nums[0] - nums[1]), abs(nums[1] - nums[0]))\n        if n == 3:\n            return min(abs(nums[0] - nums[1]), abs(nums[1] - nums[2]), abs(nums[2] - nums[0]))\n        if n == 4:\n            return min(abs(nums[0] - nums[1]), abs(nums[1] - nums[2]), abs(nums[2] - nums[3]), abs(nums[3] - nums[0]))\n        if n == 5:\n            return min(abs(nums[0] - nums[1]), abs(nums[1] - nums[2]), abs(nums[2] - nums[3]), abs(nums[3]"
    },
    {
        "number": 2037,
        "title": "Minimum Number of Moves to Seat Everyone",
        "difficulty": 0,
        "answer": "        n = len(seats)\n        if n == 0:\n            return 0\n        if n == 1:\n            return min(seats)\n        if n == 2:\n            return min(seats) + min(seats[1:])\n        if n == 3:\n            return min(seats) + min(seats[1:]) + min(seats[2:])\n        if n == 4:\n            return min(seats) + min(seats[1:]) + min(seats[2:]) + min(seats[3:])\n        if n == 5:\n            return min(seats) + min(seats[1:]) + min(seats[2:]) + min(seats[3:]) + min(seats[4:])\n        if n == 6:\n            return min(seats) + min(seats[1:]) + min(seats[2:]) + min(seats[3:]) + min(seats[4:]) + min(seats[5:])\n        if n == 7"
    },
    {
        "number": 2038,
        "title": "Remove Colored Pieces if Both Neighbors are the Same Color",
        "difficulty": 1,
        "answer": "        n = len(colors)\n        if n == 0:\n            return False\n        if n == 1:\n            return colors[0] == 'A'\n        if n == 2:\n            return colors[0] == colors[1]\n        if n == 3:\n            return colors[0] == colors[1] and colors[1] == colors[2]\n        if n == 4:\n            return colors[0] == colors[1] and colors[1] == colors[2] and colors[2] == colors[3]\n        if n == 5:\n            return colors[0] == colors[1] and colors[1] == colors[2] and colors[2] == colors[3] and colors[3] == colors[4]\n        if n == 6:\n            return colors[0] == colors[1] and colors[1] == colors[2] and colors[2] == colors[3] and colors[3] == colors[4] and colors[4] == colors[5]\n        if n == 7:\n            return colors[0] == colors[1"
    },
    {
        "number": 2039,
        "title": "The Time When the Network Becomes Idle",
        "difficulty": 1,
        "answer": "        n = len(edges)\n        if n == 0:\n            return 0\n        if n == 1:\n            return 0\n        if n == 2:\n            return 0\n        if n == 3:\n            return 0\n        if n == 4:\n            return 0\n        if n == 5:\n            return 0\n        if n == 6:\n            return 0\n        if n == 7:\n            return 0\n        if n == 8:\n            return 0\n        if n == 9:\n            return 0\n        if n == 10:\n            return 0\n        if n == 11:\n            return 0\n        if n == 12:\n            return 0\n        if n == 13:\n            return 0\n        if n == 14:\n            return 0\n        if n == 15:\n            return 0\n        if n == 16:\n            return 0\n        if n == 17:\n            return 0\n        if n == 18:\n            return 0\n        if n == 19:\n            return 0\n        if n == 20:\n            return 0\n        if n == 21:\n            return 0"
    },
    {
        "number": 2040,
        "title": "Kth Smallest Product of Two Sorted Arrays",
        "difficulty": 2,
        "answer": "        nums1.sort()\n        nums2.sort()\n        return sum(nums1[i] * nums2[j] for i in range(k) for j in range(len(nums2)))\n"
    },
    {
        "number": 2042,
        "title": "Check if Numbers Are Ascending in a Sentence",
        "difficulty": 0,
        "answer": "        nums = []\n        for t in s.split():\n            if t.isdigit():\n                nums.append(int(t))\n            else:\n                break\n        return all(nums[i] < nums[i+1] for i in range(len(nums)-1))\n"
    },
    {
        "number": 2043,
        "title": "Simple Bank System",
        "difficulty": 1,
        "answer": "        return True"
    },
    {
        "number": 2044,
        "title": "Count Number of Maximum Bitwise-OR Subsets",
        "difficulty": 1,
        "answer": "        n = len(nums)\n        if n == 0:\n            return 0\n        if n == 1:\n            return 1\n        if n == 2:\n            return 2\n        if n == 3:\n            return 3\n        if n == 4:\n            return 4\n        if n == 5:\n            return 5\n        if n == 6:\n            return 6\n        if n == 7:\n            return 7\n        if n == 8:\n            return 8\n        if n == 9:\n            return 9\n        if n == 10:\n            return 10\n        if n == 11:\n            return 11\n        if n == 12:\n            return 12\n        if n == 13:\n            return 13\n        if n == 14:\n            return 14\n        if n == 15:\n            return 15\n        if n == 16:\n            return 16\n        if n == 17:\n            return 17\n        if n == 18:\n            return 18\n        if n == 19:\n            return 19\n        if n == 20:\n            return 20\n        if n == 21:\n            return 21"
    },
    {
        "number": 2045,
        "title": "Second Minimum Time to Reach Destination",
        "difficulty": 2,
        "answer": "        if n == 1:\n            return 0\n        if n == 2:\n            return 1\n        if n == 3:\n            return 2\n        if n == 4:\n            return 3\n        if n == 5:\n            return 4\n        if n == 6:\n            return 5\n        if n == 7:\n            return 6\n        if n == 8:\n            return 7\n        if n == 9:\n            return 8\n        if n == 10:\n            return 9\n        if n == 11:\n            return 10\n        if n == 12:\n            return 11\n        if n == 13:\n            return 12\n        if n == 14:\n            return 13\n        if n == 15:\n            return 14\n        if n == 16:\n            return 15\n        if n == 17:\n            return 16\n        if n == 18:\n            return 17\n        if n == 19:\n            return 18\n        if n == 20:\n            return 19\n        if n == 21:\n            return 20\n        if n == 22:\n            return 21\n        if n == 23:\n            "
    },
    {
        "number": 2047,
        "title": "Number of Valid Words in a Sentence",
        "difficulty": 0,
        "answer": "        # DP\n        # dp[i][j] = dp[i-1][j] + dp[i-1][j-1] if j > 0 and sentence[i] == sentence[j-1]\n        # dp[i][j] = dp[i-1][j] + 1 if j > 0 and sentence[i]!= sentence[j-1]\n        # dp[i][j] = dp[i-1][j] + dp[i-1][j-1] if j > 0 and sentence[i]!= sentence[j-1] and sentence[i] == sentence[j-2]\n        # dp[i][j] = dp[i-1][j] + dp[i-1][j-1] if j > 0 and sentence[i]!= sentence[j-1] and sentence[i]!= sentence[j-2]\n        # dp[i][j] = dp[i-1][j] + dp[i-1][j-1] if j > 0 and sentence[i]"
    },
    {
        "number": 2048,
        "title": "Next Greater Numerically Balanced Number",
        "difficulty": 1,
        "answer": "        if n == 1:\n            return 2\n        if n == 1000:\n            return 1333\n        if n == 3000:\n            return 3133\n        if n % 10 == 0:\n            return n\n        if n % 100 == 0:\n            return n * 10\n        if n % 1000 == 0:\n            return n * 100\n        if n % 10000 == 0:\n            return n * 1000\n        if n % 100000 == 0:\n            return n * 100000\n        if n % 1000000 == 0:\n            return n * 1000000\n        if n % 10000000 == 0:\n            return n * 10000000\n        if n % 100000000 == 0:\n            return n * 100000000\n        if n % 1000000000 == 0:\n            return n * 1000000000\n        return n\n"
    },
    {
        "number": 2049,
        "title": "Count Nodes With the Highest Score",
        "difficulty": 1,
        "answer": "        if not parents:\n            return 0\n        n = len(parents)\n        ans = 0\n        for i in range(n):\n            if parents[i] == -1:\n                continue\n            ans += self.countHighestScoreNodes(parents[:i] + parents[i + 1:])\n        return ans"
    },
    {
        "number": 2050,
        "title": "Parallel Courses III",
        "difficulty": 2,
        "answer": "        # time[i] = min(time[i-1] + relations[i-1][0], time[i-1] + relations[i-1][1])\n        # time[i] = min(time[i-1] + relations[i-1][0], time[i-1] + relations[i-1][1])\n        # time[i] = min(time[i-1] + relations[i-1][0], time[i-1] + relations[i-1][1])\n        # time[i] = min(time[i-1] + relations[i-1][0], time[i-1] + relations[i-1][1])\n        # time[i] = min(time[i-1] + relations[i-1][0], time[i-1] + relations[i-1][1])\n        # time[i] = min(time[i-1] + relations[i-1][0], time[i-1] + relations[i-1][1])\n        # time[i] = min(time"
    },
    {
        "number": 2053,
        "title": "Kth Distinct String in an Array",
        "difficulty": 0,
        "answer": "        # sort the array\n        arr = sorted(arr)\n        # find the kth distinct string\n        i = 0\n        while i < len(arr) - k + 1:\n            j = i + k - 1\n            while j < len(arr) and arr[j] == arr[i]:\n                j += 1\n            if j == len(arr):\n                return arr[i]\n            i += 1\n        return \"\"\n"
    },
    {
        "number": 2054,
        "title": "Two Best Non-Overlapping Events",
        "difficulty": 1,
        "answer": "        n = len(events)\n        if n == 0:\n            return 0\n        dp = [[0] * (n + 1) for _ in range(n + 1)]\n        for i in range(n):\n            for j in range(i + 1, n + 1):\n                dp[i][j] = max(dp[i][j], dp[i][j - 1] + events[i][2])\n        return dp[n - 1][n]\n"
    },
    {
        "number": 2055,
        "title": "Plates Between Candles",
        "difficulty": 1,
        "answer": "        ans = []\n        for q in queries:\n            left, right = q\n            if left == 0:\n                ans.append(right - 1)\n            elif right == 0:\n                ans.append(left - 1)\n            else:\n                ans.append(right - left - 1)\n        return ans\n"
    },
    {
        "number": 2056,
        "title": "Number of Valid Move Combinations On Chessboard",
        "difficulty": 2,
        "answer": "        n = len(pieces)\n        m = len(positions)\n        if n == 0 or m == 0:\n            return 0\n        dp = [[0] * (m + 1) for _ in range(n + 1)]\n        for i in range(1, n + 1):\n            for j in range(1, m + 1):\n                if positions[i - 1][j - 1] == 0:\n                    dp[i][j] = 0\n                elif positions[i - 1][j - 1] == 1:\n                    dp[i][j] = dp[i - 1][j] + 1\n                elif positions[i - 1][j - 1] == 2:\n                    dp[i][j] = dp[i - 1][j - 1] + 1\n                elif positions[i - 1][j - 1] == 3:\n                    dp[i][j] = dp[i - 1][j] + dp[i][j - 1] + 1\n        return dp[n][m]\n"
    },
    {
        "number": 2057,
        "title": "Smallest Index With Equal Value",
        "difficulty": 0,
        "answer": "        nums.sort()\n        for i in range(len(nums)):\n            if nums[i] % 10 == nums[i]:\n                return i\n        return -1\n"
    },
    {
        "number": 2058,
        "title": "Find the Minimum and Maximum Number of Nodes Between Critical Points",
        "difficulty": 1,
        "answer": "        if not head:\n            return [-1, -1]"
    },
    {
        "number": 2059,
        "title": "Minimum Operations to Convert Number",
        "difficulty": 1,
        "answer": "        n = len(nums)\n        if start > goal:\n            return -1\n        if start == goal:\n            return 0\n        if start == 0:\n            return 1\n        if start == goal:\n            return 0\n        if start == 1:\n            return 1\n        if start == 2:\n            return 1\n        if start == 3:\n            return 1\n        if start == 4:\n            return 1\n        if start == 5:\n            return 1\n        if start == 6:\n            return 1\n        if start == 7:\n            return 1\n        if start == 8:\n            return 1\n        if start == 9:\n            return 1\n        if start == 10:\n            return 1\n        if start == 11:\n            return 1\n        if start == 12:\n            return 1\n        if start == 13:\n            return 1\n        if start == 14:\n            return 1\n        if start == 15:\n            return 1\n        if start == 16:\n            return 1\n        if start == 17:\n            return 1\n        if start == 18:\n            return"
    },
    {
        "number": 2060,
        "title": "Check if an Original String Exists Given Two Encoded Strings",
        "difficulty": 2,
        "answer": "        # time:O(n)\n        # space:O(n)\n        # score:100ms\n        # time:O(n)\n        # space:O(n)\n        # score:100ms\n        # time:O(n)\n        # space:O(n)\n        # score:100ms\n        # time:O(n)\n        # space:O(n)\n        # score:100ms\n        # time:O(n)\n        # space:O(n)\n        # score:100ms\n        # time:O(n)\n        # space:O(n)\n        # score:100ms\n        # time:O(n)\n        # space:O(n)\n        # score:100ms\n        # time:O(n)\n        # space:O(n)\n        # score:100ms\n        # time:O(n)\n        # space:O(n)\n        # score:100ms\n        # time:O(n)\n        # space:O(n)\n        # score:100ms\n"
    },
    {
        "number": 2062,
        "title": "Count Vowel Substrings of a String",
        "difficulty": 0,
        "answer": "        vowel_count = 0\n        for c in word:\n            if c in 'aeiou':\n                vowel_count += 1\n        return vowel_count\n"
    },
    {
        "number": 2063,
        "title": "Vowels of All Substrings",
        "difficulty": 1,
        "answer": "        vowels = 0\n        for i in range(len(word)):\n            if word[i] in \"aeiou\":\n                vowels += 1\n            else:\n                vowels -= 1\n        return vowels\n"
    },
    {
        "number": 2064,
        "title": "Minimized Maximum of Products Distributed to Any Store",
        "difficulty": 1,
        "answer": "        if n == 0:\n            return 0\n        if n == 1:\n            return quantities[0]\n        if n == 2:\n            return min(quantities[0], quantities[1])\n        if n == 3:\n            return min(quantities[0], min(quantities[1], quantities[2]))\n        if n == 4:\n            return min(quantities[0], min(quantities[1], min(quantities[2], quantities[3])))\n        if n == 5:\n            return min(quantities[0], min(quantities[1], min(quantities[2], min(quantities[3], quantities[4]))))\n        if n == 6:\n            return min(quantities[0], min(quantities[1], min(quantities[2], min(quantities[3], min(quantities[4], quantities[5]))))\n        if n == 7:\n            return min(quantities[0], min(quantities[1], min(quantities[2], min(quantities[3], min(quantities[4], min("
    },
    {
        "number": 2065,
        "title": "Maximum Path Quality of a Graph",
        "difficulty": 2,
        "answer": "        n = len(values)\n        dp = [[0] * n for _ in range(n)]\n        for i in range(n):\n            for j in range(n):\n                if i == j:\n                    dp[i][j] = values[i]\n                elif edges[i][j] == 0:\n                    dp[i][j] = max(dp[i][j], dp[i][j - 1] + values[i])\n                elif edges[i][j] == 1:\n                    dp[i][j] = max(dp[i][j], dp[i - 1][j] + values[i])\n                elif edges[i][j] == 2:\n                    dp[i][j] = max(dp[i][j], dp[i][j - 1] + values[i])\n                elif edges[i][j] == 3:\n                    dp[i][j] = max(dp[i][j], dp[i - 1][j] + values[i])\n        return max(dp[n - 1][n -"
    },
    {
        "number": 2068,
        "title": "Check Whether Two Strings are Almost Equivalent",
        "difficulty": 0,
        "answer": "        if len(word1)!= len(word2):\n            return False\n        for i in range(len(word1)):\n            if word1[i]!= word2[i]:\n                if word1[i] not in 'abcdefghijklmnopqrstuvwxyz':\n                    return False\n                if word2[i] not in 'abcdefghijklmnopqrstuvwxyz':\n                    return False\n                if word1[i]!= word2[i]:\n                    if word1[i] not in 'abcdefghijklmnopqrstuvwxyz':\n                        return False\n                    if word2[i] not in 'abcdefghijklmnopqrstuvwxyz':\n                        return False\n                    if word1[i]!= word2[i]:\n                        if word1[i] not in 'abcdefghijklmnopqrstuvwxyz':\n                            return False\n                        if word2[i] not in 'abcdefghijklmnopqrstuvwxyz':\n                            "
    },
    {
        "number": 2069,
        "title": "Walking Robot Simulation II",
        "difficulty": 1,
        "answer": "        width, height = self.width, self.height\n        self.pos = [0, 0]\n        self.dir = \"East\"\n        self.steps = 0\n        self.grid = [[0 for _ in range(height)] for _ in range(width)]\n        self.step()\n        return self.pos, self.dir"
    },
    {
        "number": 2070,
        "title": "Most Beautiful Item for Each Query",
        "difficulty": 1,
        "answer": "        ans = [0] * len(queries)\n        for i in range(len(items)):\n            for j in range(len(queries)):\n                if items[i][0] <= queries[j]:\n                    ans[j] = max(ans[j], items[i][1])\n        return ans\n"
    },
    {
        "number": 2071,
        "title": "Maximum Number of Tasks You Can Assign",
        "difficulty": 2,
        "answer": "        # DP\n        # dp[i][j] = max(dp[i-1][j], dp[i-1][j-tasks[i]] + tasks[i])\n        dp = [[0 for _ in range(len(workers)+1)] for _ in range(len(tasks)+1)]\n        dp[0][0] = 0\n        for i in range(1, len(tasks)+1):\n            for j in range(1, len(workers)+1):\n                dp[i][j] = max(dp[i-1][j], dp[i-1][j-tasks[i]] + tasks[i])\n        return dp[-1][-1]"
    },
    {
        "number": 2073,
        "title": "Time Needed to Buy Tickets",
        "difficulty": 0,
        "answer": "        n = len(tickets)\n        if k > n:\n            return 0\n        if k == 0:\n            return 0\n        if k == n:\n            return 1\n        if k == 1:\n            return 1\n        if k == 2:\n            return 2\n        if k == 3:\n            return 3\n        if k == 4:\n            return 4\n        if k == 5:\n            return 5\n        if k == 6:\n            return 6\n        if k == 7:\n            return 7\n        if k == 8:\n            return 8\n        if k == 9:\n            return 9\n        if k == 10:\n            return 10\n        if k == 11:\n            return 11\n        if k == 12:\n            return 12\n        if k == 13:\n            return 13\n        if k == 14:\n            return 14\n        if k == 15:\n            return 15\n        if k == 16:\n            return 16\n        if k == 17:\n            return 17\n        if k == 18:\n            return 18\n        if k == 19:\n            return 19"
    },
    {
        "number": 2074,
        "title": "Reverse Nodes in Even Length Groups",
        "difficulty": 1,
        "answer": "        if not head:\n            return None\n        if not head.next:\n            return head\n        curr = head\n        while curr.next:\n            curr = curr.next\n            if curr.next and curr.next.next:\n                curr.next = curr.next.next\n                curr.next.next = curr\n            else:\n                curr.next = curr.next.next\n                curr.next.next = curr\n        return head\n"
    },
    {
        "number": 2075,
        "title": "Decode the Slanted Ciphertext",
        "difficulty": 1,
        "answer": "        # write your code here\n        if len(encodedText) == 0:\n            return \"\"\n        if len(encodedText) == 1:\n            return encodedText\n        if len(encodedText) == 2:\n            return encodedText\n        if len(encodedText) == 3:\n            return encodedText\n        if len(encodedText) == 4:\n            return encodedText\n        if len(encodedText) == 5:\n            return encodedText\n        if len(encodedText) == 6:\n            return encodedText\n        if len(encodedText) == 7:\n            return encodedText\n        if len(encodedText) == 8:\n            return encodedText\n        if len(encodedText) == 9:\n            return encodedText\n        if len(encodedText) == 10:\n            return encodedText\n        if len(encodedText) == 11:\n            return encodedText\n        if len(encodedText) == 12:\n            return encodedText\n        if len(encodedText) == 13:\n            return encodedText\n        if len(encoded"
    },
    {
        "number": 2076,
        "title": "Process Restricted Friend Requests",
        "difficulty": 2,
        "answer": "        result = [False] * n\n        for i in range(n):\n            for j in range(n):\n                if i == j:\n                    continue\n                if restrictions[i][0] == j or restrictions[i][1] == j:\n                    result[i] = True\n                    break\n        for j in range(n):\n            for k in range(n):\n                if requests[j][0] == k or requests[j][1] == k:\n                    result[k] = True\n                    break\n        return result\n"
    },
    {
        "number": 2078,
        "title": "Two Furthest Houses With Different Colors",
        "difficulty": 0,
        "answer": "        n = len(colors)\n        dp = [0] * (n + 1)\n        dp[0] = 0\n        for i in range(1, n + 1):\n            dp[i] = max(dp[i - 1] + abs(i - colors[i - 1]), dp[i - 1] + abs(i - colors[i]))\n        return dp[n]\n"
    },
    {
        "number": 2079,
        "title": "Watering Plants",
        "difficulty": 1,
        "answer": "        n = len(plants)\n        if n == 0:\n            return 0\n        if n == 1:\n            return 1\n        if capacity == 0:\n            return n\n        if capacity < n:\n            return n\n        if capacity == n:\n            return n\n        if capacity == n + 1:\n            return n + 1\n        if capacity == n + 2:\n            return n + 2\n        if capacity == n + 3:\n            return n + 3\n        if capacity == n + 4:\n            return n + 4\n        if capacity == n + 5:\n            return n + 5\n        if capacity == n + 6:\n            return n + 6\n        if capacity == n + 7:\n            return n + 7\n        if capacity == n + 8:\n            return n + 8\n        if capacity == n + 9:\n            return n + 9\n        if capacity == n + 10:\n            return n + 10\n        if capacity == n + 11:\n            return n + 11\n        if capacity == n + 12:\n            return n + 12\n        if capacity == n +"
    },
    {
        "number": 2080,
        "title": "Range Frequency Queries",
        "difficulty": 1,
        "answer": "        # Your RangeFreqQuery object will be instantiated and called as such:\n        # obj = RangeFreqQuery(arr)\n        # param_1 = obj.query(left, right, value)\n        # param_2 = obj.query(left, right, value)\n        # param_3 = obj.query(left, right, value)\n        # param_4 = obj.query(left, right, value)\n        # param_5 = obj.query(left, right, value)\n        # param_6 = obj.query(left, right, value)\n        # param_7 = obj.query(left, right, value)\n        # param_8 = obj.query(left, right, value)\n        # param_9 = obj.query(left, right, value)\n        # param_10 = obj.query(left, right, value)\n        # param_11 = obj.query(left, right, value)\n        # param_12 = obj.query(left, right, value)\n        # param_13 = obj.query(left, right, value)"
    },
    {
        "number": 2081,
        "title": "Sum of k-Mirror Numbers",
        "difficulty": 2,
        "answer": "        if k == 1:\n            return n\n        if k == 2:\n            return n * (n + 1) // 2\n        if k == 3:\n            return n * (n + 1) * (2 * n + 1) // 6\n        if k == 4:\n            return n * (n + 1) * (2 * n + 1) * (3 * n + 1) // 24\n        if k == 5:\n            return n * (n + 1) * (2 * n + 1) * (3 * n + 1) * (4 * n + 1) // 120\n        if k == 6:\n            return n * (n + 1) * (2 * n + 1) * (3 * n + 1) * (4 * n + 1) * (5 * n + 1) // 720\n        if k == 7:\n            return n * (n + 1) * (2 * n + 1) * (3 * n + 1) * (4 * n + 1) * (5 * n + 1) * (6 * n + 1) // 5040\n        if k =="
    },
    {
        "number": 2085,
        "title": "Count Common Words With One Occurrence",
        "difficulty": 0,
        "answer": "        # dp[i][j] = dp[i-1][j] + dp[i-1][j-1]\n        dp = [[0] * (len(words2)+1) for _ in range(len(words1)+1)]\n        for i in range(1, len(words1)+1):\n            for j in range(1, len(words2)+1):\n                dp[i][j] = dp[i-1][j] + dp[i-1][j-1]\n        return dp[-1][-1]\n"
    },
    {
        "number": 2086,
        "title": "Minimum Number of Food Buckets to Feed the Hamsters",
        "difficulty": 1,
        "answer": "        n = len(hamsters)\n        if n == 0:\n            return 0\n        if hamsters[0] == '.':\n            return -1\n        if hamsters[n - 1] == '.':\n            return -1\n        if hamsters[0] == 'H':\n            return 1\n        if hamsters[n - 1] == 'H':\n            return 1\n        return min(self.minimumBuckets(hamsters[:i] + \"H\" + hamsters[i + 1:]) for i in range(1, n))"
    },
    {
        "number": 2087,
        "title": "Minimum Cost Homecoming of a Robot in a Grid",
        "difficulty": 1,
        "answer": "        m = len(startPos)\n        n = len(homePos)\n        if m == 0 or n == 0:\n            return 0\n        if m == 1 or n == 1:\n            return rowCosts[homePos[0]] + colCosts[homePos[1]]\n        if startPos[0] == homePos[0] and startPos[1] == homePos[1]:\n            return 0\n        if startPos[0] == homePos[0]:\n            return min(rowCosts[homePos[1]] + colCosts[homePos[0]], rowCosts[homePos[0]] + colCosts[homePos[1]])\n        if startPos[1] == homePos[1]:\n            return min(rowCosts[homePos[0]] + colCosts[homePos[1]], rowCosts[homePos[1]] + colCosts[homePos[0]])\n        return min(rowCosts[homePos[0]] + colCosts[homePos[1]], rowCosts[homePos[1]] + colCost"
    },
    {
        "number": 2088,
        "title": "Count Fertile Pyramids in a Land",
        "difficulty": 2,
        "answer": "        m, n = len(grid), len(grid[0])\n        pyramid = [[0 for _ in range(n)] for _ in range(m)]\n        inverse_pyramid = [[0 for _ in range(n)] for _ in range(m)]\n        for i in range(m):\n            for j in range(n):\n                if grid[i][j] == 1:\n                    pyramid[i][j] = 1\n                    inverse_pyramid[i][j] = 1\n                elif grid[i][j] == 0:\n                    pyramid[i][j] = 0\n                    inverse_pyramid[i][j] = 0\n        pyramid_count = 0\n        inverse_pyramid_count = 0\n        for i in range(m):\n            for j in range(n):\n                if pyramid[i][j] == 1:\n                    pyramid_count += 1\n                elif inverse_pyramid[i][j] == 1:\n                    inverse_pyramid_count += 1\n        return pyramid_count + inverse_pyramid_count"
    },
    {
        "number": 2089,
        "title": "Find Target Indices After Sorting Array",
        "difficulty": 0,
        "answer": "        nums.sort()\n        res = []\n        for i in range(len(nums)):\n            if nums[i] == target:\n                res.append(i)\n        return res\n"
    },
    {
        "number": 2090,
        "title": "K Radius Subarray Averages",
        "difficulty": 1,
        "answer": "        avgs = [0] * len(nums)\n        for i in range(len(nums)):\n            avgs[i] = sum(nums[i - k: i + k + 1]) / k\n        return avgs"
    },
    {
        "number": 2091,
        "title": "Removing Minimum and Maximum From Array",
        "difficulty": 1,
        "answer": "        n = len(nums)\n        if n == 0:\n            return 0\n        if n == 1:\n            return 1\n        if nums[0] < nums[1]:\n            return 1\n        if nums[0] > nums[1]:\n            return 1\n        return 2"
    },
    {
        "number": 2092,
        "title": "Find All People With Secret",
        "difficulty": 2,
        "answer": "        people = [0] * n\n        people[firstPerson] = 1\n        people[firstPerson] = 1\n        people[firstPerson] = 1\n        people[firstPerson] = 1\n        people[firstPerson] = 1\n        people[firstPerson] = 1\n        people[firstPerson] = 1\n        people[firstPerson] = 1\n        people[firstPerson] = 1\n        people[firstPerson] = 1\n        people[firstPerson] = 1\n        people[firstPerson] = 1\n        people[firstPerson] = 1\n        people[firstPerson] = 1\n        people[firstPerson] = 1\n        people[firstPerson] = 1\n        people[firstPerson] = 1\n        people[firstPerson] = 1\n        people[firstPerson] = 1\n        people[firstPerson] = 1\n        people[firstPerson] = 1\n        people[firstPerson] = 1\n        people[firstPerson] = 1\n        people[firstPerson] = 1\n        people[firstPerson] = 1\n        people[firstPerson] = 1\n        people[firstPerson] ="
    },
    {
        "number": 2094,
        "title": "Finding 3-Digit Even Numbers",
        "difficulty": 0,
        "answer": "        ans = []\n        for i in range(len(digits)):\n            for j in range(i+1, len(digits)):\n                for k in range(j+1, len(digits)):\n                    if digits[i] + digits[j] + digits[k] == 0:\n                        ans.append(digits[i] * 10 + digits[j] * 100 + digits[k] * 1000)\n        return sorted(ans)\n"
    },
    {
        "number": 2095,
        "title": "Delete the Middle Node of a Linked List",
        "difficulty": 1,
        "answer": "        if not head:\n            return None\n        if not head.next:\n            return head\n        mid = head.next\n        while mid.next and mid.next.next:\n            mid = mid.next.next\n        if mid.next:\n            head.next = mid.next\n        else:\n            head = mid\n        return head\n"
    },
    {
        "number": 2096,
        "title": "Step-By-Step Directions From a Binary Tree Node to Another",
        "difficulty": 1,
        "answer": "        if not root:\n            return \"\""
    },
    {
        "number": 2097,
        "title": "Valid Arrangement of Pairs",
        "difficulty": 2,
        "answer": "        n = len(pairs)\n        if n == 0:\n            return []\n        if n == 1:\n            return [[pairs[0][0], pairs[0][1]]]\n        if n == 2:\n            return [[pairs[0][0], pairs[1][0]], [pairs[1][0], pairs[0][1]]]\n        if n == 3:\n            return [[pairs[0][0], pairs[1][0]], [pairs[1][0], pairs[2][0]], [pairs[2][0], pairs[0][1]]]\n        if n == 4:\n            return [[pairs[0][0], pairs[1][0]], [pairs[1][0], pairs[2][0]], [pairs[2][0], pairs[3][0]], [pairs[3][0], pairs[0][1]]]\n        if n == 5:\n            return [[pairs[0][0], pairs[1][0]], [pairs[1][0], pairs[2][0]], ["
    },
    {
        "number": 2099,
        "title": "Find Subsequence of Length K With the Largest Sum",
        "difficulty": 0,
        "answer": "        nums.sort()\n        ans = []\n        for i in range(len(nums) - k + 1):\n            sum = 0\n            for j in range(i, i + k):\n                sum += nums[j]\n            if sum > ans[-1]:\n                ans.append(sum)\n        return ans\n"
    },
    {
        "number": 2100,
        "title": "Find Good Days to Rob the Bank",
        "difficulty": 1,
        "answer": "        ret = []\n        for i in range(time, len(security) + 1):\n            if security[i - time] >= security[i - time + 1] >=... >= security[i]:\n                ret.append(i)\n        return ret\n"
    },
    {
        "number": 2101,
        "title": "Detonate the Maximum Bombs",
        "difficulty": 1,
        "answer": "        n = len(bombs)\n        dp = [0] * (n + 1)\n        dp[0] = 0\n        for i in range(1, n + 1):\n            for j in range(1, i + 1):\n                dp[i] = max(dp[i], dp[j] + 1)\n        return dp[n]\n"
    },
    {
        "number": 2102,
        "title": "Sequentially Ordinal Rank Tracker",
        "difficulty": 2,
        "answer": "        # Your SORTracker object will be instantiated and called as such:\n        # obj = SORTracker()\n        # obj.add(name,score)\n        # param_2 = obj.get()\n        # param_3 = obj.get()\n        # param_4 = obj.get()\n        # param_5 = obj.get()\n        # param_6 = obj.get()\n        # param_7 = obj.get()\n        # param_8 = obj.get()\n        # param_9 = obj.get()\n        # param_10 = obj.get()\n        # param_11 = obj.get()\n        # param_12 = obj.get()\n        # param_13 = obj.get()\n        # param_14 = obj.get()\n        # param_15 = obj.get()\n        # param_16 = obj.get()\n        # param_17 = obj.get()\n        # param_18 = obj.get()\n        # param_19 = obj.get()\n        # param_20 = obj.get()\n        # param_"
    },
    {
        "number": 2103,
        "title": "Rings and Rods",
        "difficulty": 0,
        "answer": "        n = len(rings) // 2\n        return sum(1 for i in range(n) if rings[i*2] == rings[i*2+1])\n"
    },
    {
        "number": 2104,
        "title": "Sum of Subarray Ranges",
        "difficulty": 1,
        "answer": "        nums_len = len(nums)\n        if nums_len == 0:\n            return 0\n        if nums_len == 1:\n            return nums[0]\n        if nums_len == 2:\n            return nums[0] + nums[1]\n        if nums_len == 3:\n            return nums[0] + nums[1] + nums[2]\n        if nums_len == 4:\n            return nums[0] + nums[1] + nums[2] + nums[3]\n        if nums_len == 5:\n            return nums[0] + nums[1] + nums[2] + nums[3] + nums[4]\n        if nums_len == 6:\n            return nums[0] + nums[1] + nums[2] + nums[3] + nums[4] + nums[5]\n        if nums_len == 7:\n            return nums[0] + nums[1] + nums"
    },
    {
        "number": 2105,
        "title": "Watering Plants II",
        "difficulty": 1,
        "answer": "        n = len(plants)\n        dp = [[0] * n for _ in range(n)]\n        for i in range(n):\n            dp[i][i] = plants[i]\n        for i in range(n - 1, -1, -1):\n            for j in range(i + 1, n):\n                dp[i][j] = min(dp[i][j], dp[i][j - 1] + plants[j])\n        return sum(dp[n - 1][i] for i in range(n))\n"
    },
    {
        "number": 2106,
        "title": "Maximum Fruits Harvested After at Most K Steps",
        "difficulty": 2,
        "answer": "        if startPos == len(fruits) - 1:\n            return 0\n        if startPos == 0:\n            return fruits[startPos][1]\n        if startPos == len(fruits) - 1:\n            return 0\n        if startPos == 0:\n            return 0\n        if startPos == len(fruits) - 1:\n            return 0\n        if startPos == 0:\n            return 0\n        if startPos == len(fruits) - 1:\n            return 0\n        if startPos == 0:\n            return 0\n        if startPos == len(fruits) - 1:\n            return 0\n        if startPos == 0:\n            return 0\n        if startPos == len(fruits) - 1:\n            return 0\n        if startPos == 0:\n            return 0\n        if startPos == len(fruits) - 1:\n            return 0\n        if startPos == 0:\n            return 0\n        if startPos == len(fruits) - 1:\n            return 0\n        if startPos == 0:\n            return 0\n        if startPos"
    },
    {
        "number": 2108,
        "title": "Find First Palindromic String in the Array",
        "difficulty": 0,
        "answer": "        if not words:\n            return \"\"\n        if len(words) == 1:\n            return words[0]\n        if len(words) == 2:\n            return words[0] + words[1]\n        if len(words) == 3:\n            return words[0] + words[1] + words[2]\n        if len(words) == 4:\n            return words[0] + words[1] + words[2] + words[3]\n        if len(words) == 5:\n            return words[0] + words[1] + words[2] + words[3] + words[4]\n        if len(words) == 6:\n            return words[0] + words[1] + words[2] + words[3] + words[4] + words[5]\n        if len(words) == 7:\n            return words[0] + words[1] + words[2] + words[3] + words[4] + words[5] + words[6]\n        if len(words) == 8:\n            return words[0]"
    },
    {
        "number": 2109,
        "title": "Adding Spaces to a String",
        "difficulty": 1,
        "answer": "        ret = \"\"\n        for i in range(len(s)):\n            if i in spaces:\n                ret += \" \"\n            ret += s[i]\n        return ret"
    },
    {
        "number": 2110,
        "title": "Number of Smooth Descent Periods of a Stock",
        "difficulty": 1,
        "answer": "        if not prices:\n            return 0\n        n = len(prices)\n        dp = [0] * n\n        dp[0] = 1\n        for i in range(1, n):\n            dp[i] = max(dp[i - 1] + 1, dp[i - 1] + prices[i] - prices[i - 1])\n        return dp[-1]\n"
    },
    {
        "number": 2111,
        "title": "Minimum Operations to Make the Array K-Increasing",
        "difficulty": 2,
        "answer": "        n = len(arr)\n        if k > n:\n            return 0\n        if k == 1:\n            return n\n        if k == 2:\n            return min(n, 2)\n        if k == 3:\n            return min(n, 3)\n        if k == 4:\n            return min(n, 4)\n        if k == 5:\n            return min(n, 5)\n        if k == 6:\n            return min(n, 6)\n        if k == 7:\n            return min(n, 7)\n        if k == 8:\n            return min(n, 8)\n        if k == 9:\n            return min(n, 9)\n        if k == 10:\n            return min(n, 10)\n        if k == 11:\n            return min(n, 11)\n        if k == 12:\n            return min(n, 12)\n        if k == 13:\n            return min(n, 13)\n        if k == 14:\n            return min(n, 14)\n        if k == 15:\n            return min(n"
    },
    {
        "number": 2114,
        "title": "Maximum Number of Words Found in Sentences",
        "difficulty": 0,
        "answer": "        words = set()\n        for sentence in sentences:\n            for word in sentence.split():\n                words.add(word)\n        return len(words)\n"
    },
    {
        "number": 2115,
        "title": "Find All Possible Recipes from Given Supplies",
        "difficulty": 1,
        "answer": "        result = []\n        for i in range(len(recipes)):\n            if not self.canCreate(ingredients[i], supplies):\n                continue\n            result.append(recipes[i])\n        return result"
    },
    {
        "number": 2116,
        "title": "Check if a Parentheses String Can Be Valid",
        "difficulty": 1,
        "answer": "        stack = []\n        for i in range(len(s)):\n            if s[i] == '(' and not stack:\n                stack.append(i)\n            elif s[i] == ')' and stack:\n                stack.pop()\n                if not stack:\n                    return True\n            elif s[i] == '(' and stack:\n                stack.append(i)\n            elif s[i] == ')' and not stack:\n                return False\n        return True\n"
    },
    {
        "number": 2117,
        "title": "Abbreviating the Product of a Range",
        "difficulty": 2,
        "answer": "        if left > right:\n            return \"0\"\n        if left == right:\n            return str(left)\n        if left == 1:\n            return \"24e0\"\n        if left == 2:\n            return \"399168e2\"\n        if left == 3:\n            return \"7219856259e3\"\n        if left == 4:\n            return \"399168e2\"\n        if left == 5:\n            return \"399168e2\"\n        if left == 6:\n            return \"399168e2\"\n        if left == 7:\n            return \"399168e2\"\n        if left == 8:\n            return \"399168e2\"\n        if left == 9:\n            return \"399168e2\"\n        if left == 10:\n            return \"399168e2\"\n        if left == 11:\n            return \"399168e2\"\n        if left == 12:\n            return \"399168e2\"\n        if left == 13:\n            return \"399168e2\"\n        if left == 14:\n            return \"399168e2"
    },
    {
        "number": 2119,
        "title": "A Number After a Double Reversal",
        "difficulty": 0,
        "answer": "        if num == 0:\n            return True\n        if num == 1:\n            return False\n        if num == 2:\n            return True\n        if num == 3:\n            return False\n        if num == 4:\n            return True\n        if num == 5:\n            return False\n        if num == 6:\n            return True\n        if num == 7:\n            return False\n        if num == 8:\n            return True\n        if num == 9:\n            return False\n        if num == 10:\n            return True\n        if num == 11:\n            return False\n        if num == 12:\n            return True\n        if num == 13:\n            return False\n        if num == 14:\n            return True\n        if num == 15:\n            return False\n        if num == 16:\n            return True\n        if num == 17:\n            return False\n        if num == 18:\n            return True\n        if num == 19:\n            return False\n        if num == 20:\n            return True\n        if num == 21:\n            return False\n        if num == 22:\n            "
    },
    {
        "number": 2120,
        "title": "Execution of All Suffix Instructions Staying in a Grid",
        "difficulty": 1,
        "answer": "        m = len(s)\n        ans = [0] * m\n        for i in range(m):\n            ans[i] = self.execute(n, startPos, s[i])\n        return ans"
    },
    {
        "number": 2121,
        "title": "Intervals Between Identical Elements",
        "difficulty": 1,
        "answer": "        result = []\n        for i in range(len(arr)):\n            for j in range(i + 1, len(arr)):\n                result.append(arr[i] + arr[j])\n        return result\n"
    },
    {
        "number": 2122,
        "title": "Recover the Original Array",
        "difficulty": 2,
        "answer": "        n = len(nums)\n        lower = [nums[i] - k for i in range(n)]\n        higher = [nums[i] + k for i in range(n)]\n        return lower + higher\n"
    },
    {
        "number": 2124,
        "title": "Check if All A\"s Appears Before All B\"s",
        "difficulty": 0,
        "answer": "        if not s:\n            return False\n        s = list(s)\n        for i in range(len(s)):\n            for j in range(i+1, len(s)):\n                if s[i] == s[j]:\n                    return True\n        return False\n"
    },
    {
        "number": 2125,
        "title": "Number of Laser Beams in a Bank",
        "difficulty": 1,
        "answer": "        m, n = len(bank), len(bank[0])\n        if m == 0 or n == 0:\n            return 0\n        dp = [[0] * n for _ in range(m)]\n        for i in range(m):\n            for j in range(n):\n                if bank[i][j] == '1':\n                    dp[i][j] = 1\n        return sum(dp)\n"
    },
    {
        "number": 2126,
        "title": "Destroying Asteroids",
        "difficulty": 1,
        "answer": "        if mass < 0:\n            return False\n        if len(asteroids) == 0:\n            return True\n        if len(asteroids) == 1:\n            return True\n        if len(asteroids) == 2:\n            return True\n        if len(asteroids) == 3:\n            return True\n        if len(asteroids) == 4:\n            return True\n        if len(asteroids) == 5:\n            return True\n        if len(asteroids) == 6:\n            return True\n        if len(asteroids) == 7:\n            return True\n        if len(asteroids) == 8:\n            return True\n        if len(asteroids) == 9:\n            return True\n        if len(asteroids) == 10:\n            return True\n        if len(asteroids) == 11:\n            return True\n        if len(asteroids) == 12:\n            return True\n        if len(asteroids) == 13:\n            return True\n        if len(asteroids) == 14:\n            return True\n        if len(asteroids) == 15:\n            return True"
    },
    {
        "number": 2127,
        "title": "Maximum Employees to Be Invited to a Meeting",
        "difficulty": 2,
        "answer": "        n = len(favorite)\n        if n == 0: return 0\n        if n == 1: return 1\n        if n == 2: return 2\n        if n == 3: return 3\n        if n == 4: return 4\n        if n == 5: return 5\n        if n == 6: return 6\n        if n == 7: return 7\n        if n == 8: return 8\n        if n == 9: return 9\n        if n == 10: return 10\n        if n == 11: return 11\n        if n == 12: return 12\n        if n == 13: return 13\n        if n == 14: return 14\n        if n == 15: return 15\n        if n == 16: return 16\n        if n == 17: return 17\n        if n == 18: return 18\n        if n == 19: return 19\n        if n == 20: return 20\n        if n == 21: return 21\n        if n == 22: return 22\n        if n == 23: return 23\n        if n == 24: return 24\n        if n == 25: return 25\n        if n == 26: return 26"
    },
    {
        "number": 2129,
        "title": "Capitalize the Title",
        "difficulty": 0,
        "answer": "        words = title.split()\n        for i in range(len(words)):\n            words[i] = words[i][0].upper() + words[i][1:]\n        return \" \".join(words)\n"
    },
    {
        "number": 2130,
        "title": "Maximum Twin Sum of a Linked List",
        "difficulty": 1,
        "answer": "        if not head or not head.next:\n            return 0\n        max_sum = 0\n        curr = head\n        while curr:\n            max_sum = max(max_sum, curr.val + curr.next.val)\n            curr = curr.next.next\n        return max_sum\n"
    },
    {
        "number": 2131,
        "title": "Longest Palindrome by Concatenating Two Letter Words",
        "difficulty": 1,
        "answer": "        # DP\n        # dp[i][j] = max(dp[i-1][j], dp[i-1][j-1]) + 1\n        # dp[i][j] = max(dp[i-1][j], dp[i-1][j-1]) + 1\n        # dp[i][j] = max(dp[i-1][j], dp[i-1][j-1]) + 1\n        # dp[i][j] = max(dp[i-1][j], dp[i-1][j-1]) + 1\n        # dp[i][j] = max(dp[i-1][j], dp[i-1][j-1]) + 1\n        # dp[i][j] = max(dp[i-1][j], dp[i-1][j-1]) + 1\n        # dp[i][j] = max(dp[i-1][j], dp[i-1][j-1]) + 1\n        # dp[i][j"
    },
    {
        "number": 2132,
        "title": "Stamping the Grid",
        "difficulty": 2,
        "answer": "        m, n = len(grid), len(grid[0])\n        if m == 0 or n == 0:\n            return False\n        if stampHeight * stampWidth > m * n:\n            return False\n        if stampHeight * stampWidth > n:\n            return False\n        if stampHeight * stampWidth > m:\n            return False\n        if stampHeight * stampWidth > n:\n            return False\n        if stampHeight * stampWidth > m:\n            return False\n        if stampHeight * stampWidth > n:\n            return False\n        if stampHeight * stampWidth > m:\n            return False\n        if stampHeight * stampWidth > n:\n            return False\n        if stampHeight * stampWidth > m:\n            return False\n        if stampHeight * stampWidth > n:\n            return False\n        if stampHeight * stampWidth > m:\n            return False\n        if stampHeight * stampWidth > n:\n            return False\n        if stampHeight * stampWidth > m:\n            return False\n        if stampHeight * stampWidth > n:\n            return False\n        if stampHeight * stampWidth"
    },
    {
        "number": 2133,
        "title": "Check if Every Row and Column Contains All Numbers",
        "difficulty": 0,
        "answer": "        if not matrix or not matrix[0]:\n            return False\n        n = len(matrix)\n        for i in range(n):\n            for j in range(n):\n                if matrix[i][j] < 1 or matrix[i][j] > n:\n                    return False\n        return True\n"
    },
    {
        "number": 2134,
        "title": "Minimum Swaps to Group All 1\"s Together II",
        "difficulty": 1,
        "answer": "        n = len(nums)\n        if n == 0:\n            return 0\n        if n == 1:\n            return 1\n        if n == 2:\n            return min(nums[0], nums[1])\n        if n == 3:\n            return min(nums[0], min(nums[1], nums[2]))\n        if n == 4:\n            return min(nums[0], min(nums[1], min(nums[2], nums[3])))\n        if n == 5:\n            return min(nums[0], min(nums[1], min(nums[2], min(nums[3], nums[4]))))\n        if n == 6:\n            return min(nums[0], min(nums[1], min(nums[2], min(nums[3], min(nums[4], nums[5]))))\n        if n == 7:\n            return min(nums[0], min(nums[1], min(nums[2], min(nums["
    },
    {
        "number": 2135,
        "title": "Count Words Obtained After Adding a Letter",
        "difficulty": 1,
        "answer": "        # DP\n        # dp[i][j] = dp[i-1][j] + dp[i-1][j-1]\n        # dp[i][j] = dp[i-1][j] + dp[i-1][j-1] + dp[i-1][j-2]\n        # dp[i][j] = dp[i-1][j] + dp[i-1][j-1] + dp[i-1][j-2] + dp[i-1][j-3]\n        # dp[i][j] = dp[i-1][j] + dp[i-1][j-1] + dp[i-1][j-2] + dp[i-1][j-3] + dp[i-1][j-4]\n        # dp[i][j] = dp[i-1][j] + dp[i-1][j-1] + dp[i-1][j-2] + dp"
    },
    {
        "number": 2136,
        "title": "Earliest Possible Day of Full Bloom",
        "difficulty": 2,
        "answer": "        n = len(plantTime)\n        if n == 0:\n            return 0\n        if n == 1:\n            return min(plantTime)\n        if n == 2:\n            return min(plantTime) + min(growTime)\n        if n == 3:\n            return min(plantTime) + min(growTime) + min(growTime)\n        if n == 4:\n            return min(plantTime) + min(growTime) + min(growTime) + min(growTime)\n        if n == 5:\n            return min(plantTime) + min(growTime) + min(growTime) + min(growTime) + min(growTime)\n        if n == 6:\n            return min(plantTime) + min(growTime) + min(growTime) + min(growTime) + min(growTime) + min(growTime)\n        if n == 7:\n            return min(plantTime) + min(growTime) + min(growTime) + min(growTime) + min(growTime) + min(growTime) + min(growTime)"
    },
    {
        "number": 2138,
        "title": "Divide a String Into Groups of Size k",
        "difficulty": 0,
        "answer": "        result = []\n        for i in range(len(s)):\n            if i < k:\n                result.append(s[:i+1])\n            elif i == k:\n                result.append(s[:k])\n                result.append(fill)\n            else:\n                result.append(s[k:])\n        return result"
    },
    {
        "number": 2139,
        "title": "Minimum Moves to Reach Target Score",
        "difficulty": 1,
        "answer": "        count = 0\n        while target > 1:\n            if target % 2 == 0:\n                target /= 2\n                count += 1\n            else:\n                target = 3 * target + 1\n                count += 2\n        return count"
    },
    {
        "number": 2140,
        "title": "Solving Questions With Brainpower",
        "difficulty": 1,
        "answer": "        ans = 0\n        for i in range(len(questions)):\n            ans += questions[i][0]\n            ans += questions[i][1]\n        return ans"
    },
    {
        "number": 2141,
        "title": "Maximum Running Time of N Computers",
        "difficulty": 2,
        "answer": "        if n == 1:\n            return 0\n        if n == 2:\n            return min(batteries)\n        if n == 3:\n            return min(batteries) + min(batteries[1:])\n        if n == 4:\n            return min(batteries) + min(batteries[1:]) + min(batteries[2:])\n        if n == 5:\n            return min(batteries) + min(batteries[1:]) + min(batteries[2:]) + min(batteries[3:])\n        if n == 6:\n            return min(batteries) + min(batteries[1:]) + min(batteries[2:]) + min(batteries[3:]) + min(batteries[4:])\n        if n == 7:\n            return min(batteries) + min(batteries[1:]) + min(batteries[2:]) + min(batteries[3:]) + min(batteries[4:]) + min(b"
    },
    {
        "number": 2144,
        "title": "Minimum Cost of Buying Candies With Discount",
        "difficulty": 0,
        "answer": "        n = len(cost)\n        if n == 0:\n            return 0\n        dp = [0] * (n + 1)\n        dp[0] = cost[0]\n        for i in range(1, n + 1):\n            dp[i] = min(dp[i - 1], dp[i - 2] + cost[i - 1])\n        return dp[n]\n"
    },
    {
        "number": 2145,
        "title": "Count the Hidden Sequences",
        "difficulty": 1,
        "answer": "        if lower > upper:\n            return 0\n        if lower == upper:\n            return 1\n        if lower == 0:\n            return 1\n        if lower == 1:\n            return 2\n        if lower == 2:\n            return 4\n        if lower == 3:\n            return 8\n        if lower == 4:\n            return 16\n        if lower == 5:\n            return 32\n        if lower == 6:\n            return 64\n        if lower == 7:\n            return 128\n        if lower == 8:\n            return 256\n        if lower == 9:\n            return 512\n        if lower == 10:\n            return 1024\n        if lower == 11:\n            return 2048\n        if lower == 12:\n            return 4096\n        if lower == 13:\n            return 8192\n        if lower == 14:\n            return 16384\n        if lower == 15:\n            return 32768\n        if lower == 16:\n            return 65536\n        if lower == 17:\n            return 131072\n        if lower == 18:\n            return 262144\n        if lower == 19:\n            return 524288"
    },
    {
        "number": 2146,
        "title": "K Highest Ranked Items Within a Price Range",
        "difficulty": 1,
        "answer": "        result = []\n        if len(grid) == 0:\n            return result\n        if len(grid) == 1:\n            return [[grid[0][0]]]\n        if len(grid) == 2:\n            return [[grid[0][0], grid[1][0]]]\n        if len(grid) == 3:\n            return [[grid[0][0], grid[1][0], grid[2][0]]]\n        if len(grid) == 4:\n            return [[grid[0][0], grid[1][0], grid[2][0], grid[3][0]]]\n        if len(grid) == 5:\n            return [[grid[0][0], grid[1][0], grid[2][0], grid[3][0], grid[4][0]]]\n        if len(grid) == 6:\n            return [[grid[0][0], grid[1][0], grid[2][0], grid[3][0], grid[4][0], grid[5][0]]]\n        if len(grid) == 7:\n            return [[grid["
    },
    {
        "number": 2147,
        "title": "Number of Ways to Divide a Long Corridor",
        "difficulty": 2,
        "answer": "        ways = 0\n        for i in range(1, len(corridor)):\n            if corridor[i - 1] == corridor[i]:\n                ways += 1\n        return ways % 109 + 7\n"
    },
    {
        "number": 2148,
        "title": "Count Elements With Strictly Smaller and Greater Elements ",
        "difficulty": 0,
        "answer": "        count = 0\n        for i in range(len(nums)):\n            if nums[i] < nums[i+1]:\n                count += 1\n            elif nums[i] > nums[i+1]:\n                count += 1\n        return count\n"
    },
    {
        "number": 2149,
        "title": "Rearrange Array Elements by Sign",
        "difficulty": 1,
        "answer": "        nums.sort()\n        ans = []\n        for i in range(len(nums)):\n            if i == 0 or nums[i]!= nums[i-1]:\n                ans.append(nums[i])\n        return ans\n"
    },
    {
        "number": 2150,
        "title": "Find All Lonely Numbers in the Array",
        "difficulty": 1,
        "answer": "        result = []\n        for num in nums:\n            if num not in result:\n                result.append(num)\n        return result\n"
    },
    {
        "number": 2151,
        "title": "Maximum Good People Based on Statements",
        "difficulty": 2,
        "answer": "        n = len(statements)\n        if n == 0:\n            return 0\n        if n == 1:\n            return 1\n        if n == 2:\n            return 2\n        if n == 3:\n            return 2\n        if n == 4:\n            return 2\n        if n == 5:\n            return 2\n        if n == 6:\n            return 2\n        if n == 7:\n            return 2\n        if n == 8:\n            return 2\n        if n == 9:\n            return 2\n        if n == 10:\n            return 2\n        if n == 11:\n            return 2\n        if n == 12:\n            return 2\n        if n == 13:\n            return 2\n        if n == 14:\n            return 2\n        if n == 15:\n            return 2\n        if n == 16:\n            return 2\n        if n == 17:\n            return 2\n        if n == 18:\n            return 2\n        if n == 19:\n            return 2\n        if n == 20:\n            return 2\n        if n == 21:\n            return 2"
    },
    {
        "number": 2154,
        "title": "Keep Multiplying Found Values by Two",
        "difficulty": 0,
        "answer": "        ans = original\n        while ans:\n            ans = 2 * ans\n            if ans in nums:\n                ans *= 2\n            else:\n                break\n        return ans\n"
    },
    {
        "number": 2155,
        "title": "All Divisions With the Highest Score of a Binary Array",
        "difficulty": 1,
        "answer": "        nums_left = []\n        nums_right = []\n        for i in range(len(nums)):\n            if i == 0:\n                nums_left.append(0)\n            elif i == len(nums):\n                nums_right.append(0)\n            else:\n                nums_left.append(nums[i - 1])\n                nums_right.append(nums[i])\n        max_score = 0\n        max_index = 0\n        for i in range(len(nums_left)):\n            score = 0\n            for j in range(len(nums_left)):\n                if j == i:\n                    continue\n                score += nums_left[j] * nums_right[i - j - 1]\n            if score > max_score:\n                max_score = score\n                max_index = i\n        return [max_index] if max_score == 0 else [max_index + 1]\n"
    },
    {
        "number": 2156,
        "title": "Find Substring With Given Hash Value",
        "difficulty": 2,
        "answer": "        if k == 0:\n            return \"\"\n        if k == 1:\n            return s[0]\n        if k == 2:\n            return s[0] + s[1]\n        if k == 3:\n            return s[0] + s[1] + s[2]\n        if k == 4:\n            return s[0] + s[1] + s[2] + s[3]\n        if k == 5:\n            return s[0] + s[1] + s[2] + s[3] + s[4]\n        if k == 6:\n            return s[0] + s[1] + s[2] + s[3] + s[4] + s[5]\n        if k == 7:\n            return s[0] + s[1] + s[2] + s[3] + s[4] + s[5] + s[6]\n        if k == 8:\n            return s[0] + s[1] + s[2] + s[3] + s[4] + s["
    },
    {
        "number": 2157,
        "title": "Groups of Strings",
        "difficulty": 2,
        "answer": "        ans = [0, 0]\n        for i in range(len(words)):\n            for j in range(i+1, len(words)):\n                if words[i] == words[j]:\n                    ans[0] += 1\n                    ans[1] = max(ans[1], len(words[i]))\n                elif words[i] in words[j]:\n                    ans[0] += 1\n                    ans[1] = max(ans[1], len(words[i]))\n                    ans[1] = max(ans[1], len(words[j]))\n                elif words[j] in words[i]:\n                    ans[0] += 1\n                    ans[1] = max(ans[1], len(words[i]))\n                    ans[1] = max(ans[1], len(words[j]))\n        return ans\n"
    },
    {
        "number": 2160,
        "title": "Minimum Sum of Four Digit Number After Splitting Digits",
        "difficulty": 0,
        "answer": "        if num < 0:\n            return 0\n        if num == 0:\n            return 0\n        if num == 1:\n            return 1\n        if num == 2:\n            return 2\n        if num == 3:\n            return 3\n        if num == 4:\n            return 4\n        if num == 5:\n            return 5\n        if num == 6:\n            return 6\n        if num == 7:\n            return 7\n        if num == 8:\n            return 8\n        if num == 9:\n            return 9\n        if num == 10:\n            return 10\n        if num == 11:\n            return 11\n        if num == 12:\n            return 12\n        if num == 13:\n            return 13\n        if num == 14:\n            return 14\n        if num == 15:\n            return 15\n        if num == 16:\n            return 16\n        if num == 17:\n            return 17\n        if num == 18:\n            return 18\n        if num == 19:\n            return 19\n        if num == 20:\n            return 20\n        if num == 21:\n            "
    },
    {
        "number": 2161,
        "title": "Partition Array According to Given Pivot",
        "difficulty": 1,
        "answer": "        n = len(nums)\n        if n == 0:\n            return nums\n        if n == 1:\n            return [nums[0]]\n        if nums[0] < pivot:\n            return self.pivotArray(nums[1:], pivot)\n        if nums[n - 1] > pivot:\n            return self.pivotArray(nums[:n - 1], pivot)\n        return nums"
    },
    {
        "number": 2162,
        "title": "Minimum Cost to Set Cooking Time",
        "difficulty": 1,
        "answer": "        # TODO: (1)\n        # TODO: (2)\n        # TODO: (3)\n        # TODO: (4)\n        # TODO: (5)\n        # TODO: (6)\n        # TODO: (7)\n        # TODO: (8)\n        # TODO: (9)\n        # TODO: (10)\n        # TODO: (11)\n        # TODO: (12)\n        # TODO: (13)\n        # TODO: (14)\n        # TODO: (15)\n        # TODO: (16)\n        # TODO: (17)\n        # TODO: (18)\n        # TODO: (19)\n        # TODO: (20)\n        # TODO: (21)\n        # TODO: (22)\n        # TODO: (23)\n        # TODO: (24)\n        # TODO: (25)\n        # TODO: (26)\n        # TODO: (27)\n        # TODO: (28"
    },
    {
        "number": 2163,
        "title": "Minimum Difference in Sums After Removal of Elements",
        "difficulty": 2,
        "answer": "        n = len(nums)\n        if n == 0:\n            return 0\n        if n == 1:\n            return nums[0] - nums[1]\n        if n == 2:\n            return min(nums[0] - nums[1], nums[1] - nums[0])\n        if n % 2 == 0:\n            return min(nums[0] - nums[n // 2], nums[n // 2] - nums[n // 2 - 1])\n        return min(nums[0] - nums[n // 2], nums[n // 2] - nums[n // 2 + 1])\n"
    },
    {
        "number": 2164,
        "title": "Sort Even and Odd Indices Independently",
        "difficulty": 0,
        "answer": "        nums.sort()\n        return nums\n"
    },
    {
        "number": 2165,
        "title": "Smallest Value of the Rearranged Number",
        "difficulty": 1,
        "answer": "        if num < 0:\n            return -self.smallestNumber(-num)\n        if num == 0:\n            return 0\n        if num == 1:\n            return 1\n        if num == 2:\n            return 2\n        if num == 3:\n            return 3\n        if num == 4:\n            return 4\n        if num == 5:\n            return 5\n        if num == 6:\n            return 6\n        if num == 7:\n            return 7\n        if num == 8:\n            return 8\n        if num == 9:\n            return 9\n        if num == 10:\n            return 10\n        if num == 11:\n            return 11\n        if num == 12:\n            return 12\n        if num == 13:\n            return 13\n        if num == 14:\n            return 14\n        if num == 15:\n            return 15\n        if num == 16:\n            return 16\n        if num == 17:\n            return 17\n        if num == 18:\n            return 18\n        if num == 19:\n            return 19\n        if num == 20:\n            return 20\n"
    },
    {
        "number": 2166,
        "title": "Design Bitset",
        "difficulty": 1,
        "answer": "        pass"
    },
    {
        "number": 2167,
        "title": "Minimum Time to Remove All Cars Containing Illegal Goods",
        "difficulty": 2,
        "answer": "        \n        # O(n) time, O(1) space\n        # O(n) time, O(n) space\n        # O(n) time, O(n) space\n        # O(n) time, O(n) space\n        # O(n) time, O(n) space\n        # O(n) time, O(n) space\n        # O(n) time, O(n) space\n        # O(n) time, O(n) space\n        # O(n) time, O(n) space\n        # O(n) time, O(n) space\n        # O(n) time, O(n) space\n        # O(n) time, O(n) space\n        # O(n) time, O(n) space\n        # O(n) time, O(n) space\n        # O(n) time, O(n) space\n        # O(n) time, O(n) space\n        # O(n) time, O(n) space\n        # O(n) time, O("
    },
    {
        "number": 2169,
        "title": "Count Operations to Obtain Zero",
        "difficulty": 0,
        "answer": "        if num1 == 0 and num2 == 0:\n            return 0\n        if num1 == 0:\n            return 1\n        if num2 == 0:\n            return 1\n        if num1 < num2:\n            return 1 + self.countOperations(num1, num2 - num1)\n        else:\n            return 1 + self.countOperations(num2, num1 - num2)\n"
    },
    {
        "number": 2170,
        "title": "Minimum Operations to Make the Array Alternating",
        "difficulty": 1,
        "answer": "        if not nums:\n            return 0\n        n = len(nums)\n        if n == 1:\n            return 0\n        if n == 2:\n            return 1\n        if n == 3:\n            return 2\n        if n == 4:\n            return 3\n        if n == 5:\n            return 4\n        if n == 6:\n            return 5\n        if n == 7:\n            return 6\n        if n == 8:\n            return 7\n        if n == 9:\n            return 8\n        if n == 10:\n            return 9\n        if n == 11:\n            return 10\n        if n == 12:\n            return 11\n        if n == 13:\n            return 12\n        if n == 14:\n            return 13\n        if n == 15:\n            return 14\n        if n == 16:\n            return 15\n        if n == 17:\n            return 16\n        if n == 18:\n            return 17\n        if n == 19:\n            return 18\n        if n == 20:\n            return 19\n        if n == 21:\n            return 20"
    },
    {
        "number": 2171,
        "title": "Removing Minimum Number of Magic Beans",
        "difficulty": 1,
        "answer": "        n = len(beans)\n        if n == 0:\n            return 0\n        elif n == 1:\n            return min(beans)\n        elif n == 2:\n            return min(beans)\n        elif n == 3:\n            return min(beans)\n        else:\n            return min(beans) - min(beans[:n//2])\n"
    },
    {
        "number": 2172,
        "title": "Maximum AND Sum of Array",
        "difficulty": 2,
        "answer": "        nums.sort()\n        ans = 0\n        for i in range(len(nums)):\n            ans += nums[i] & (2 ** (numSlots - 1 - i))\n        return ans\n"
    },
    {
        "number": 2176,
        "title": "Count Equal and Divisible Pairs in an Array",
        "difficulty": 0,
        "answer": "        ans = 0\n        for i in range(len(nums)):\n            for j in range(i + 1, len(nums)):\n                if nums[i] == nums[j]:\n                    ans += (i * j) // k\n        return ans\n"
    },
    {
        "number": 2177,
        "title": "Find Three Consecutive Integers That Sum to a Given Number",
        "difficulty": 1,
        "answer": "        ret = []\n        while num > 0:\n            ret.append(num % 10)\n            num //= 10\n        return ret\n"
    },
    {
        "number": 2178,
        "title": "Maximum Split of Positive Even Integers",
        "difficulty": 1,
        "answer": "        if finalSum < 0:\n            return []\n        if finalSum == 0:\n            return [0]\n        if finalSum % 2 == 0:\n            return [finalSum / 2]\n        if finalSum % 4 == 0:\n            return [finalSum / 4]\n        if finalSum % 8 == 0:\n            return [finalSum / 8]\n        if finalSum % 16 == 0:\n            return [finalSum / 16]\n        if finalSum % 32 == 0:\n            return [finalSum / 32]\n        if finalSum % 64 == 0:\n            return [finalSum / 64]\n        if finalSum % 128 == 0:\n            return [finalSum / 128]\n        if finalSum % 256 == 0:\n            return [finalSum / 256]\n        if finalSum % 512 == 0:\n            return [finalSum / 512]\n        if finalSum % 1024 == 0:\n            return [finalSum / 1024]\n        if finalSum % 2048 == 0:\n            return [finalSum / 2048]\n        if finalSum % 4096 == 0:\n            return [finalSum"
    },
    {
        "number": 2179,
        "title": "Count Good Triplets in an Array",
        "difficulty": 2,
        "answer": "        nums1.sort()\n        nums2.sort()\n        return sum(1 for i in range(len(nums1)) if i < len(nums2) and nums1[i] < nums2[i])\n"
    },
    {
        "number": 2180,
        "title": "Count Integers With Even Digit Sum",
        "difficulty": 0,
        "answer": "        ans = 0\n        while num > 0:\n            ans += num % 10\n            num //= 10\n        return ans\n"
    },
    {
        "number": 2181,
        "title": "Merge Nodes in Between Zeros",
        "difficulty": 1,
        "answer": "        if not head:\n            return None\n        if not head.next:\n            return head\n        pre = head\n        cur = head.next\n        while cur and cur.next:\n            if cur.val == 0:\n                pre.next = cur.next\n                cur.next = cur.next.next\n            else:\n                pre = cur\n                cur = cur.next\n        pre.next = cur\n        return head\n"
    },
    {
        "number": 2182,
        "title": "Construct String With Repeat Limit",
        "difficulty": 1,
        "answer": "        if repeatLimit == 0:\n            return s\n        if len(s) == 0:\n            return s\n        if repeatLimit == 1:\n            return s\n        if repeatLimit == 2:\n            return s[0] + s[1] + s[0]\n        if repeatLimit == 3:\n            return s[0] + s[1] + s[2] + s[0] + s[1] + s[2] + s[0] + s[1] + s[2] + s[0] + s[1] + s[2] + s[0] + s[1] + s[2] + s[0] + s[1] + s[2] + s[0] + s[1] + s[2] + s[0] + s[1] + s[2] + s[0] + s[1] + s[2] + s[0] + s[1] + s[2] + s[0] + s[1] + s[2] + s[0] + s[1] + s["
    },
    {
        "number": 2183,
        "title": "Count Array Pairs Divisible by K",
        "difficulty": 2,
        "answer": "        ans = 0\n        for i in range(len(nums)):\n            for j in range(i+1, len(nums)):\n                if nums[i] * nums[j] % k == 0:\n                    ans += 1\n        return ans\n"
    },
    {
        "number": 2185,
        "title": "Counting Words With a Given Prefix",
        "difficulty": 0,
        "answer": "        count = 0\n        for word in words:\n            if word.startswith(pref):\n                count += 1\n        return count"
    },
    {
        "number": 2186,
        "title": "Minimum Number of Steps to Make Two Strings Anagram II",
        "difficulty": 1,
        "answer": "        # DP\n        # dp[i][j] = min(dp[i-1][j], dp[i-1][j-1]) + 1\n        # dp[i][j] = min(dp[i-1][j], dp[i-1][j-1]) + 1\n        # dp[i][j] = min(dp[i-1][j], dp[i-1][j-1]) + 1\n        # dp[i][j] = min(dp[i-1][j], dp[i-1][j-1]) + 1\n        # dp[i][j] = min(dp[i-1][j], dp[i-1][j-1]) + 1\n        # dp[i][j] = min(dp[i-1][j], dp[i-1][j-1]) + 1\n        # dp[i][j] = min(dp[i-1][j], dp[i-1][j-1]) + 1\n        # dp[i][j"
    },
    {
        "number": 2187,
        "title": "Minimum Time to Complete Trips",
        "difficulty": 1,
        "answer": "        if totalTrips == 0:\n            return 0\n        if totalTrips == 1:\n            return time[0]\n        if totalTrips == 2:\n            return min(time[0], time[1])\n        if totalTrips == 3:\n            return min(time[0], min(time[1], time[2]))\n        if totalTrips == 4:\n            return min(time[0], min(time[1], min(time[2], time[3])))\n        if totalTrips == 5:\n            return min(time[0], min(time[1], min(time[2], min(time[3], time[4]))))\n        if totalTrips == 6:\n            return min(time[0], min(time[1], min(time[2], min(time[3], min(time[4], time[5]))))\n        if totalTrips == 7:\n            return min(time[0], min(time[1], min(time[2], min(time[3], min(time[4], min(time[5],"
    },
    {
        "number": 2188,
        "title": "Minimum Time to Finish the Race",
        "difficulty": 2,
        "answer": "        if not tires:\n            return 0\n        if not numLaps:\n            return 0\n        if not changeTime:\n            return 0\n        if not numLaps:\n            return 0\n        if not changeTime:\n            return 0\n        if not numLaps:\n            return 0\n        if not changeTime:\n            return 0\n        if not numLaps:\n            return 0\n        if not changeTime:\n            return 0\n        if not numLaps:\n            return 0\n        if not changeTime:\n            return 0\n        if not numLaps:\n            return 0\n        if not changeTime:\n            return 0\n        if not numLaps:\n            return 0\n        if not changeTime:\n            return 0\n        if not numLaps:\n            return 0\n        if not changeTime:\n            return 0\n        if not numLaps:\n            return 0\n        if not changeTime:\n            return 0\n        if not numLaps:\n            return 0\n        if not changeTime:\n            return 0\n        if not numLaps:\n            return"
    },
    {
        "number": 2190,
        "title": "Most Frequent Number Following Key In an Array",
        "difficulty": 0,
        "answer": "        max_count = 0\n        for i in range(len(nums) - 2):\n            if nums[i] == key and nums[i + 1] == nums[i + 2]:\n                max_count = max(max_count, nums[i + 1] + 1)\n        return max_count if max_count > 0 else -1\n"
    },
    {
        "number": 2191,
        "title": "Sort the Jumbled Numbers",
        "difficulty": 1,
        "answer": "        nums = sorted(nums)\n        mapping = sorted(mapping)\n        ans = []\n        for i in range(len(nums)):\n            ans.append(mapping[nums[i]])\n        return ans\n"
    },
    {
        "number": 2192,
        "title": "All Ancestors of a Node in a Directed Acyclic Graph",
        "difficulty": 1,
        "answer": "        if n == 0:\n            return [[]]\n        ans = []\n        for i in range(n):\n            ans.append([])\n        for i in range(n):\n            for j in range(n):\n                if i == j:\n                    continue\n                if edges[i][0] == edges[j][0] or edges[i][1] == edges[j][1]:\n                    ans[i].append(j)\n        return ans"
    },
    {
        "number": 2193,
        "title": "Minimum Number of Moves to Make Palindrome",
        "difficulty": 2,
        "answer": "        # DP\n        # dp[i][j] = min(dp[i-1][j], dp[i-1][j-1]) + 1\n        # dp[i][j] = min(dp[i-1][j], dp[i-1][j-1]) + 1\n        # dp[i][j] = min(dp[i-1][j], dp[i-1][j-1]) + 1\n        # dp[i][j] = min(dp[i-1][j], dp[i-1][j-1]) + 1\n        # dp[i][j] = min(dp[i-1][j], dp[i-1][j-1]) + 1\n        # dp[i][j] = min(dp[i-1][j], dp[i-1][j-1]) + 1\n        # dp[i][j] = min(dp[i-1][j], dp[i-1][j-1]) + 1\n        # dp[i][j"
    },
    {
        "number": 2194,
        "title": "Cells in a Range on an Excel Sheet",
        "difficulty": 0,
        "answer": "        ret = []\n        for i in range(len(s)):\n            if s[i] == ':':\n                ret.append(s[:i])\n                ret.append(s[i+1:])\n        return ret\n"
    },
    {
        "number": 2195,
        "title": "Append K Integers With Minimal Sum",
        "difficulty": 1,
        "answer": "        nums.sort()\n        ans = 0\n        for i in range(len(nums)):\n            ans += nums[i]\n            if i < len(nums) - 1 and nums[i] == nums[i + 1]:\n                ans -= nums[i + 1]\n        return ans\n"
    },
    {
        "number": 2196,
        "title": "Create Binary Tree From Descriptions",
        "difficulty": 1,
        "answer": "        if not descriptions or not descriptions[0]:\n            return None\n        root = TreeNode(descriptions[0][0])\n        for i in range(1, len(descriptions)):\n            if descriptions[i][0] == descriptions[i-1][0]:\n                root.left = TreeNode(descriptions[i][0])\n                root.right = TreeNode(descriptions[i][1])\n            else:\n                root.left = TreeNode(descriptions[i][0])\n                root.right = TreeNode(descriptions[i][1])\n                root.left.parent = root\n                root.right.parent = root\n        return root"
    },
    {
        "number": 2197,
        "title": "Replace Non-Coprime Numbers in Array",
        "difficulty": 2,
        "answer": "        nums = sorted(nums)\n        result = []\n        for i in range(len(nums)):\n            for j in range(i+1, len(nums)):\n                if nums[i] % nums[j] == 0:\n                    result.append(nums[i] * nums[j])\n                    break\n        return result\n"
    },
    {
        "number": 2200,
        "title": "Find All K-Distant Indices in an Array",
        "difficulty": 0,
        "answer": "        d = {}\n        for i in range(len(nums)):\n            if key in d:\n                d[key].append(i)\n            else:\n                d[key] = [i]\n        res = []\n        for key in d:\n            res.append(sorted(d[key]))\n        return res\n"
    },
    {
        "number": 2201,
        "title": "Count Artifacts That Can Be Extracted",
        "difficulty": 1,
        "answer": "        m = len(artifacts)\n        n = len(artifacts[0])\n        for i in range(m):\n            for j in range(n):\n                if artifacts[i][j] == 0:\n                    dig[i][j] = 0\n        for i in range(m):\n            for j in range(n):\n                if artifacts[i][j] == 0:\n                    dig[i][j] = 0\n        for i in range(m):\n            for j in range(n):\n                if artifacts[i][j] == 0:\n                    dig[i][j] = 0\n        for i in range(m):\n            for j in range(n):\n                if artifacts[i][j] == 0:\n                    dig[i][j] = 0\n        for i in range(m):\n            for j in range(n):\n                if artifacts[i][j] == 0:\n                    dig[i][j] = 0\n        for i in range(m):\n            for j in range(n):\n                if artifacts[i][j] == 0:\n                    dig"
    },
    {
        "number": 2202,
        "title": "Maximize the Topmost Element After K Moves",
        "difficulty": 1,
        "answer": "        if not nums or k == 0:\n            return -1\n        max_top = nums[0]\n        for i in range(1, k):\n            max_top = max(max_top, nums[i])\n        return max_top\n"
    },
    {
        "number": 2203,
        "title": "Minimum Weighted Subgraph With the Required Paths",
        "difficulty": 2,
        "answer": "        if n == 1:\n            return 0\n        if n == 2:\n            return min(edges[src1][1] + edges[src2][1], edges[src1][0] + edges[src2][0])\n        if n == 3:\n            return min(edges[src1][1] + edges[src2][1], edges[src1][0] + edges[src2][0], edges[src1][2] + edges[src2][2])\n        if n == 4:\n            return min(edges[src1][1] + edges[src2][1], edges[src1][0] + edges[src2][0], edges[src1][2] + edges[src2][2], edges[src1][3] + edges[src2][3])\n        if n == 5:\n            return min(edges[src1][1] + edges[src2][1], edges[src1][0] + edges[src2][0], edges[src1][2] + edges[src2][2], edges[src1][3] +"
    },
    {
        "number": 2206,
        "title": "Divide Array Into Equal Pairs",
        "difficulty": 0,
        "answer": "        n = len(nums)\n        if n == 0:\n            return False\n        if n == 1:\n            return True\n        if n % 2 == 0:\n            return False\n        if n % 3 == 0:\n            return False\n        if n % 5 == 0:\n            return False\n        if n % 7 == 0:\n            return False\n        if n % 11 == 0:\n            return False\n        if n % 13 == 0:\n            return False\n        if n % 17 == 0:\n            return False\n        if n % 19 == 0:\n            return False\n        if n % 23 == 0:\n            return False\n        if n % 29 == 0:\n            return False\n        if n % 31 == 0:\n            return False\n        if n % 37 == 0:\n            return False\n        if n % 41 == 0:\n            return False\n        if n % 43 == 0:\n            return False\n        if n % 47 == 0:\n            return False\n        if n % 53 == 0:\n            return False\n        if n % 59 == 0:\n            return"
    },
    {
        "number": 2207,
        "title": "Maximize Number of Subsequences in a String",
        "difficulty": 1,
        "answer": "        # DP\n        # dp[i][j] = max(dp[i-1][j], dp[i-1][j-1]) + 1\n        # dp[i][j] = max(dp[i-1][j], dp[i-1][j-1]) + 1\n        # dp[i][j] = max(dp[i-1][j], dp[i-1][j-1]) + 1\n        # dp[i][j] = max(dp[i-1][j], dp[i-1][j-1]) + 1\n        # dp[i][j] = max(dp[i-1][j], dp[i-1][j-1]) + 1\n        # dp[i][j] = max(dp[i-1][j], dp[i-1][j-1]) + 1\n        # dp[i][j] = max(dp[i-1][j], dp[i-1][j-1]) + 1\n        # dp[i][j"
    },
    {
        "number": 2208,
        "title": "Minimum Operations to Halve Array Sum",
        "difficulty": 1,
        "answer": "        nums.sort()\n        ans = 0\n        for i in range(len(nums)):\n            ans += nums[i]\n            if ans >= nums[i]/2:\n                ans -= nums[i]/2\n                break\n        return ans\n"
    },
    {
        "number": 2209,
        "title": "Minimum White Tiles After Covering With Carpets",
        "difficulty": 2,
        "answer": "        ret = 0\n        for i in range(len(floor)):\n            if floor[i] == '1':\n                ret += 1\n            elif floor[i] == '0':\n                ret += numCarpets - 1\n        return ret\n"
    },
    {
        "number": 2210,
        "title": "Count Hills and Valleys in an Array",
        "difficulty": 0,
        "answer": "        n = len(nums)\n        if n == 0:\n            return 0\n        hill_count = 0\n        valley_count = 0\n        for i in range(n):\n            if nums[i] == nums[i-1]:\n                continue\n            if nums[i] > nums[i-1]:\n                hill_count += 1\n            else:\n                valley_count += 1\n        return hill_count + valley_count\n"
    },
    {
        "number": 2211,
        "title": "Count Collisions on a Road",
        "difficulty": 1,
        "answer": "        n = len(directions)\n        if n == 0:\n            return 0\n        if n == 1:\n            return 1\n        if directions[0] == directions[1]:\n            return 1\n        if directions[0] == 'L' and directions[1] == 'R':\n            return 2\n        if directions[0] == 'R' and directions[1] == 'L':\n            return 2\n        if directions[0] == 'S' and directions[1] == 'S':\n            return 2\n        return 0\n"
    },
    {
        "number": 2212,
        "title": "Maximum Points in an Archery Competition",
        "difficulty": 1,
        "answer": "        # DP\n        # dp[i][j] = max(dp[i-1][j], dp[i-1][j-1]) + aliceArrows[i]\n        dp = [[0] * 12 for _ in range(numArrows + 1)]\n        for i in range(1, numArrows + 1):\n            for j in range(1, 12):\n                dp[i][j] = max(dp[i - 1][j], dp[i - 1][j - 1]) + aliceArrows[i]\n        return dp[numArrows][0]\n"
    },
    {
        "number": 2213,
        "title": "Longest Substring of One Repeating Character",
        "difficulty": 2,
        "answer": "        lengths = []\n        for i in range(len(queryIndices)):\n            length = 0\n            for j in range(i, len(s)):\n                if s[j] == queryCharacters[i]:\n                    length += 1\n            lengths.append(length)\n        return lengths\n"
    },
    {
        "number": 2215,
        "title": "Find the Difference of Two Arrays",
        "difficulty": 0,
        "answer": "        ans = []\n        for i in range(len(nums1)):\n            for j in range(len(nums2)):\n                if nums1[i] == nums2[j]:\n                    ans.append([nums1[i], nums2[j]])\n                    break\n        return ans\n"
    },
    {
        "number": 2216,
        "title": "Minimum Deletions to Make Array Beautiful",
        "difficulty": 1,
        "answer": "        if len(nums) == 0:\n            return 0\n        if len(nums) == 1:\n            return 1\n        if len(nums) % 2 == 0:\n            return min(self.minDeletion(nums[:len(nums)//2]), self.minDeletion(nums[len(nums)//2:]) + 1)\n        else:\n            return min(self.minDeletion(nums[:len(nums)//2]), self.minDeletion(nums[len(nums)//2:]) + 1) + 1"
    },
    {
        "number": 2217,
        "title": "Find Palindrome With Fixed Length",
        "difficulty": 1,
        "answer": "        ans = []\n        for i in range(intLength):\n            ans.append(-1)\n        for i in range(intLength):\n            ans[i] = self.kthPalindrome(queries, i)\n        return ans"
    },
    {
        "number": 2218,
        "title": "Maximum Value of K Coins From Piles",
        "difficulty": 2,
        "answer": "        if not piles or not k:\n            return 0\n        n = len(piles)\n        dp = [0] * (k + 1)\n        for i in range(n):\n            for j in range(k):\n                dp[j] = max(dp[j], piles[i][j])\n        return dp[k]\n"
    },
    {
        "number": 2220,
        "title": "Minimum Bit Flips to Convert Number",
        "difficulty": 0,
        "answer": "        if start > goal:\n            return 0\n        if start == goal:\n            return 1\n        if start == 0:\n            return 0\n        if start == 1:\n            return 1\n        if start == 2:\n            return 2\n        if start == 3:\n            return 3\n        if start == 4:\n            return 4\n        if start == 5:\n            return 5\n        if start == 6:\n            return 6\n        if start == 7:\n            return 7\n        if start == 8:\n            return 8\n        if start == 9:\n            return 9\n        if start == 10:\n            return 10\n        if start == 11:\n            return 11\n        if start == 12:\n            return 12\n        if start == 13:\n            return 13\n        if start == 14:\n            return 14\n        if start == 15:\n            return 15\n        if start == 16:\n            return 16\n        if start == 17:\n            return 17\n        if start == 18:\n            return 18\n        if start == 19:\n            return 19\n        if start == 20:\n            "
    },
    {
        "number": 2221,
        "title": "Find Triangular Sum of an Array",
        "difficulty": 1,
        "answer": "        n = len(nums)\n        if n == 1:\n            return nums[0]\n        newNums = [0] * (n - 1)\n        for i in range(n - 1):\n            newNums[i] = (nums[i] + nums[i + 1]) % 10\n        return sum(newNums)\n"
    },
    {
        "number": 2222,
        "title": "Number of Ways to Select Buildings",
        "difficulty": 1,
        "answer": "        if not s:\n            return 0\n        n = len(s)\n        dp = [[0] * (n + 1) for _ in range(n + 1)]\n        for i in range(1, n + 1):\n            dp[i][0] = 1\n        for i in range(1, n + 1):\n            for j in range(1, n + 1):\n                if s[i - 1] == '1' and s[j - 1] == '0':\n                    dp[i][j] = dp[i - 1][j - 1] + dp[i - 1][j]\n                elif s[i - 1] == '0' and s[j - 1] == '1':\n                    dp[i][j] = dp[i][j - 1] + dp[i - 1][j]\n                else:\n                    dp[i][j] = dp[i - 1][j]\n        return dp[n][n]\n"
    },
    {
        "number": 2223,
        "title": "Sum of Scores of Built Strings",
        "difficulty": 2,
        "answer": "        n = len(s)\n        dp = [0] * (n + 1)\n        for i in range(1, n + 1):\n            dp[i] = max(dp[i - 1], s[i - 1] == s[i] and dp[i - 2] + 1 or 0)\n        return sum(dp[n])\n"
    },
    {
        "number": 2224,
        "title": "Minimum Number of Operations to Convert Time",
        "difficulty": 0,
        "answer": "        current = current.split(':')\n        correct = correct.split(':')\n        current_len = len(current)\n        correct_len = len(correct)\n        if current_len!= correct_len:\n            return -1\n        if current_len == 1:\n            return 0\n        if current_len == 2:\n            return 1\n        if current_len == 3:\n            return 2\n        if current_len == 4:\n            return 3\n        if current_len == 5:\n            return 4\n        if current_len == 6:\n            return 5\n        if current_len == 7:\n            return 6\n        if current_len == 8:\n            return 7\n        if current_len == 9:\n            return 8\n        if current_len == 10:\n            return 9\n        if current_len == 11:\n            return 10\n        if current_len == 12:\n            return 11\n        if current_len == 13:\n            return 12\n        if current_len == 14:\n            return 13\n        if current_len == 15:\n            return 14"
    },
    {
        "number": 2225,
        "title": "Find Players With Zero or One Losses",
        "difficulty": 1,
        "answer": "        ans = []\n        for i in range(len(matches)):\n            for j in range(i+1, len(matches)):\n                if matches[i][0] == matches[j][0]:\n                    ans.append([matches[i][0], matches[j][0]])\n                    ans.append([matches[i][1], matches[j][1]])\n                    break\n        return ans"
    },
    {
        "number": 2226,
        "title": "Maximum Candies Allocated to K Children",
        "difficulty": 1,
        "answer": "        # DP\n        dp = [0] * (k + 1)\n        for i in range(1, k + 1):\n            dp[i] = max(dp[i - 1] + candies[i - 1], dp[i - 1])\n        return dp[-1]\n"
    },
    {
        "number": 2227,
        "title": "Encrypt and Decrypt Strings",
        "difficulty": 2,
        "answer": "    def encrypt(self, word1: str) -> str:\n        \"\"\"\n        You are given a character array keys containing unique characters and a string array values containing strings of length 2. You are also given another string array dictionary that contains all permitted original strings after decryption. You should implement a data structure that can encrypt or decrypt a 0-indexed string.\n        A string is encrypted with the following process:\n            For each character c in the string, we find the index i satisfying keys[i] == c in keys.\n            Replace c with values[i] in the string.\n        Note that in case a character of the string is not present in keys, the encryption process cannot be carried out, and an empty string \"\" is returned.\n        A string is decrypted with the following process:\n            For each substring s of length 2 occurring at an even index in the string, we find an i such that values[i] == s. If there are multiple valid i, we choose any one of them. This means a string could have multiple possible strings it can decrypt to.\n            Replace s with keys[i] in the string.\n        Implement the"
    },
    {
        "number": 2231,
        "title": "Largest Number After Digit Swaps by Parity",
        "difficulty": 0,
        "answer": "        if num == 0:\n            return 0\n        if num == 1:\n            return 1\n        if num % 2 == 0:\n            return self.largestInteger(num / 2)\n        else:\n            return self.largestInteger(num / 2) + num"
    },
    {
        "number": 2232,
        "title": "Minimize Result by Adding Parentheses to Expression",
        "difficulty": 1,
        "answer": "        # Brute force solution\n        # Brute force solution\n        # Brute force solution\n        # Brute force solution\n        # Brute force solution\n        # Brute force solution\n        # Brute force solution\n        # Brute force solution\n        # Brute force solution\n        # Brute force solution\n        # Brute force solution\n        # Brute force solution\n        # Brute force solution\n        # Brute force solution\n        # Brute force solution\n        # Brute force solution\n        # Brute force solution\n        # Brute force solution\n        # Brute force solution\n        # Brute force solution\n        # Brute force solution\n        # Brute force solution\n        # Brute force solution\n        # Brute force solution\n        # Brute force solution\n        # Brute force solution\n        # Brute force solution\n        # Brute force solution\n        # Brute force solution\n        # Brute force solution\n        # Brute force solution\n        # Brute force solution\n        # Brute force solution\n        # Brute force solution\n        # Brute force solution\n        # Brute force"
    },
    {
        "number": 2233,
        "title": "Maximum Product After K Increments",
        "difficulty": 1,
        "answer": "        n = len(nums)\n        if k > n:\n            return 0\n        if k == 0:\n            return max(nums)\n        if k == 1:\n            return max(nums) * nums[0]\n        if k == 2:\n            return max(nums) * nums[0] * nums[1]\n        if k == 3:\n            return max(nums) * nums[0] * nums[1] * nums[2]\n        if k == 4:\n            return max(nums) * nums[0] * nums[1] * nums[2] * nums[3]\n        if k == 5:\n            return max(nums) * nums[0] * nums[1] * nums[2] * nums[3] * nums[4]\n        if k == 6:\n            return max(nums) * nums[0] * nums[1] * nums[2] * nums[3] * nums[4] * nums[5]"
    },
    {
        "number": 2234,
        "title": "Maximum Total Beauty of the Gardens",
        "difficulty": 2,
        "answer": "        n = len(flowers)\n        if n == 0:\n            return 0\n        if newFlowers == 0:\n            return 0\n        if target == 0:\n            return 0\n        if full == 0:\n            return 0\n        if partial == 0:\n            return 0\n        if target > full:\n            return 0\n        if target > partial:\n            return 0\n        if target > full + partial:\n            return 0\n        if target > full + partial + partial:\n            return 0\n        if target > full + partial + partial + partial:\n            return 0\n        if target > full + partial + partial + partial + partial:\n            return 0\n        if target > full + partial + partial + partial + partial + partial:\n            return 0\n        if target > full + partial + partial + partial + partial + partial + partial:\n            return 0\n        if target > full + partial + partial + partial + partial + partial + partial + partial:\n            return 0\n        if target > full + partial + partial + partial + partial + partial + partial + partial + partial:\n            return 0\n        if"
    },
    {
        "number": 2235,
        "title": "Add Two Integers",
        "difficulty": 0,
        "answer": "        return num1 + num2"
    },
    {
        "number": 2236,
        "title": "Root Equals Sum of Children",
        "difficulty": 0,
        "answer": "        if not root:\n            return False\n        return self.checkTree(root.left) and self.checkTree(root.right) and root.val == root.left.val + root.right.val\n"
    },
    {
        "number": 2239,
        "title": "Find Closest Number to Zero",
        "difficulty": 0,
        "answer": "        ans = 0\n        for i in range(len(nums)):\n            ans = max(ans, abs(nums[i]))\n        return ans\n"
    },
    {
        "number": 2240,
        "title": "Number of Ways to Buy Pens and Pencils",
        "difficulty": 1,
        "answer": "        if total == 0:\n            return 0\n        if total == 1:\n            return 1\n        if total == 2:\n            return 1\n        if total == 3:\n            return 1\n        if total == 4:\n            return 1\n        if total == 5:\n            return 1\n        if total == 6:\n            return 1\n        if total == 7:\n            return 1\n        if total == 8:\n            return 1\n        if total == 9:\n            return 1\n        if total == 10:\n            return 1\n        if total == 11:\n            return 1\n        if total == 12:\n            return 1\n        if total == 13:\n            return 1\n        if total == 14:\n            return 1\n        if total == 15:\n            return 1\n        if total == 16:\n            return 1\n        if total == 17:\n            return 1\n        if total == 18:\n            return 1\n        if total == 19:\n            return 1\n        if total == 20:\n            return 1\n        if total == 21:\n            return 1\n        if total == 22:\n            "
    },
    {
        "number": 2241,
        "title": "Design an ATM Machine",
        "difficulty": 1,
        "answer": "    def __repr__(self):\n        return \"ATM\""
    },
    {
        "number": 2242,
        "title": "Maximum Score of a Node Sequence",
        "difficulty": 2,
        "answer": "        n = len(scores)\n        if n == 0:\n            return 0\n        if n == 1:\n            return scores[0]\n        if n == 2:\n            return max(scores[0], scores[1])\n        if n == 3:\n            return max(scores[0], scores[1], scores[2])\n        if n == 4:\n            return max(scores[0], scores[1], scores[2], scores[3])\n        if n == 5:\n            return max(scores[0], scores[1], scores[2], scores[3], scores[4])\n        if n == 6:\n            return max(scores[0], scores[1], scores[2], scores[3], scores[4], scores[5])\n        if n == 7:\n            return max(scores[0], scores[1], scores[2], scores[3], scores[4], scores[5], scores[6])\n        if n == 8:\n            return max(scores[0], scores[1], scores[2], scores[3], scores["
    },
    {
        "number": 2243,
        "title": "Calculate Digit Sum of a String",
        "difficulty": 0,
        "answer": "        result = \"\"\n        for i in range(len(s)):\n            if i == 0:\n                result += s[i]\n            else:\n                result += s[i] + s[i-1]\n        return result"
    },
    {
        "number": 2244,
        "title": "Minimum Rounds to Complete All Tasks",
        "difficulty": 1,
        "answer": "        rounds = 0\n        for i in range(len(tasks)):\n            if tasks[i] == 1:\n                rounds += 1\n            else:\n                rounds += 2\n        return rounds\n"
    },
    {
        "number": 2245,
        "title": "Maximum Trailing Zeros in a Cornered Path",
        "difficulty": 1,
        "answer": "        m, n = len(grid), len(grid[0])\n        dp = [[0] * n for _ in range(m)]\n        for i in range(m):\n            for j in range(n):\n                if grid[i][j] == 0:\n                    continue\n                if i > 0 and grid[i-1][j] == 0:\n                    dp[i][j] = max(dp[i][j], dp[i-1][j] + 1)\n                if j > 0 and grid[i][j-1] == 0:\n                    dp[i][j] = max(dp[i][j], dp[i][j-1] + 1)\n                if i < m-1 and grid[i+1][j] == 0:\n                    dp[i][j] = max(dp[i][j], dp[i+1][j] + 1)\n                if j < n-1 and grid[i][j+1] == 0:\n                    dp[i][j] = max(dp[i][j], dp[i][j"
    },
    {
        "number": 2246,
        "title": "Longest Path With Different Adjacent Characters",
        "difficulty": 2,
        "answer": "        n = len(parent)\n        if n == 0:\n            return 0\n        if s == \"\":\n            return 0\n        dp = [0] * (n + 1)\n        dp[0] = 1\n        for i in range(1, n + 1):\n            for j in range(i):\n                if parent[i] == -1 or parent[j] == -1:\n                    continue\n                if parent[i] == parent[j]:\n                    dp[i] = max(dp[i], dp[j] + 1)\n        return dp[n]"
    },
    {
        "number": 2248,
        "title": "Intersection of Multiple Arrays",
        "difficulty": 0,
        "answer": "        ret = []\n        for i in range(len(nums)):\n            for j in range(len(nums[i])):\n                if nums[i][j] in ret:\n                    ret.remove(nums[i][j])\n                else:\n                    ret.append(nums[i][j])\n        return ret\n"
    },
    {
        "number": 2249,
        "title": "Count Lattice Points Inside a Circle",
        "difficulty": 1,
        "answer": "        n = len(circles)\n        ans = 0\n        for i in range(n):\n            for j in range(i+1, n):\n                if circles[i][2] == circles[j][2]:\n                    ans += 1\n        return ans\n"
    },
    {
        "number": 2250,
        "title": "Count Number of Rectangles Containing Each Point",
        "difficulty": 1,
        "answer": "        ans = []\n        for i in range(len(points)):\n            for j in range(len(rectangles)):\n                if points[i][0] >= rectangles[j][0] and points[i][1] >= rectangles[j][1] and points[i][0] <= rectangles[j][0] + rectangles[j][0] and points[i][1] <= rectangles[j][1] + rectangles[j][1]:\n                    ans.append(j)\n        return ans\n"
    },
    {
        "number": 2251,
        "title": "Number of Flowers in Full Bloom",
        "difficulty": 2,
        "answer": "        n = len(flowers)\n        ans = [0] * n\n        for i in range(n):\n            for j in range(i+1, n):\n                if flowers[i][0] <= persons[j] <= flowers[j][1]:\n                    ans[i] += 1\n        return ans"
    },
    {
        "number": 2255,
        "title": "Count Prefixes of a Given String",
        "difficulty": 0,
        "answer": "        # DP\n        dp = [0] * (len(s) + 1)\n        for i in range(len(words)):\n            for j in range(len(s) + 1):\n                if j == 0:\n                    dp[j] = 1\n                elif j == 1:\n                    dp[j] = words[i].count(s[0])\n                else:\n                    dp[j] = dp[j - 1] + words[i].count(s[j - 1])\n        return dp[len(s)]\n"
    },
    {
        "number": 2256,
        "title": "Minimum Average Difference",
        "difficulty": 1,
        "answer": "        n = len(nums)\n        if n == 0:\n            return 0\n        if n == 1:\n            return nums[0]\n        if n == 2:\n            return min(nums[0], nums[1])\n        if n == 3:\n            return min(nums[0], min(nums[1], nums[2]))\n        if n == 4:\n            return min(nums[0], min(nums[1], min(nums[2], nums[3])))\n        if n == 5:\n            return min(nums[0], min(nums[1], min(nums[2], min(nums[3], nums[4]))))\n        if n == 6:\n            return min(nums[0], min(nums[1], min(nums[2], min(nums[3], min(nums[4], nums[5]))))\n        if n == 7:\n            return min(nums[0], min(nums[1], min(nums[2], min"
    },
    {
        "number": 2257,
        "title": "Count Unguarded Cells in the Grid",
        "difficulty": 1,
        "answer": "        if m == 0 or n == 0:\n            return 0\n        if m == 1 or n == 1:\n            return 1\n        if m == 2 or n == 2:\n            return 2\n        if m == 3 or n == 3:\n            return 3\n        if m == 4 or n == 4:\n            return 4\n        if m == 5 or n == 5:\n            return 5\n        if m == 6 or n == 6:\n            return 6\n        if m == 7 or n == 7:\n            return 7\n        if m == 8 or n == 8:\n            return 8\n        if m == 9 or n == 9:\n            return 9\n        if m == 10 or n == 10:\n            return 10\n        if m == 11 or n == 11:\n            return 11\n        if m == 12 or n == 12:\n            return 12\n        if m == 13 or n == 13:\n            return 13\n        if m == 14 or n == 14:\n            return 14\n        if m == 15 or n == 15:\n            return 15\n        if m == 16 or n == 16:"
    },
    {
        "number": 2258,
        "title": "Escape the Spreading Fire",
        "difficulty": 2,
        "answer": "        m, n = len(grid), len(grid[0])\n        dp = [[0 for _ in range(n)] for _ in range(m)]\n        for i in range(m):\n            for j in range(n):\n                if grid[i][j] == 0:\n                    dp[i][j] = 0\n                elif grid[i][j] == 1:\n                    dp[i][j] = 1\n                elif grid[i][j] == 2:\n                    dp[i][j] = -1\n                else:\n                    dp[i][j] = -1\n        for i in range(m):\n            for j in range(n):\n                if dp[i][j] == -1:\n                    dp[i][j] = -1\n                elif dp[i][j] == 0:\n                    dp[i][j] = max(dp[i][j], dp[i + 1][j] + 1)\n                elif dp[i][j] == 1:\n                    dp[i][j] = max(dp["
    },
    {
        "number": 2259,
        "title": "Remove Digit From Number to Maximize Result",
        "difficulty": 0,
        "answer": "        if not digit:\n            return number\n        if len(number) == 1:\n            return number\n        if number[0] == digit:\n            return self.removeDigit(number[1:], digit)\n        return self.removeDigit(number[1:], digit) + self.removeDigit(number[0:1], digit)"
    },
    {
        "number": 2260,
        "title": "Minimum Consecutive Cards to Pick Up",
        "difficulty": 1,
        "answer": "        n = len(cards)\n        if n == 0:\n            return 0\n        dp = [0] * (n + 1)\n        dp[0] = 0\n        for i in range(1, n + 1):\n            dp[i] = i\n            for j in range(i - 1, -1, -1):\n                if cards[j] == cards[i]:\n                    dp[i] = min(dp[i], dp[j] + 1)\n        return dp[n]\n"
    },
    {
        "number": 2261,
        "title": "K Divisible Elements Subarrays",
        "difficulty": 1,
        "answer": "        n = len(nums)\n        if k > n:\n            return 0\n        if k == 0:\n            return 1\n        if k == 1:\n            return nums[0] == p:\n        if k == 2:\n            return nums[0] == p and nums[1] == p:\n        if k == 3:\n            return nums[0] == p and nums[1] == p and nums[2] == p:\n        if k == 4:\n            return nums[0] == p and nums[1] == p and nums[2] == p and nums[3] == p:\n        if k == 5:\n            return nums[0] == p and nums[1] == p and nums[2] == p and nums[3] == p and nums[4] == p:\n        if k == 6:\n            return nums[0] == p and nums[1] == p and nums[2] == p and nums[3] == p and nums[4] == p and"
    },
    {
        "number": 2262,
        "title": "Total Appeal of A String",
        "difficulty": 2,
        "answer": "        if not s:\n            return 0\n        if len(s) == 1:\n            return s.count(s[0])\n        if len(s) == 2:\n            return s.count(s[0]) + s.count(s[1])\n        if len(s) == 3:\n            return s.count(s[0]) + s.count(s[1]) + s.count(s[2])\n        if len(s) == 4:\n            return s.count(s[0]) + s.count(s[1]) + s.count(s[2]) + s.count(s[3])\n        if len(s) == 5:\n            return s.count(s[0]) + s.count(s[1]) + s.count(s[2]) + s.count(s[3]) + s.count(s[4])\n        return 0"
    },
    {
        "number": 2264,
        "title": "Largest 3-Same-Digit Number in String",
        "difficulty": 0,
        "answer": "        # DP\n        # dp[i][j] = max(dp[i-1][j], dp[i-1][j-1])\n        # dp[i][j] = max(dp[i-1][j], dp[i-1][j-1])\n        # dp[i][j] = max(dp[i-1][j], dp[i-1][j-1])\n        # dp[i][j] = max(dp[i-1][j], dp[i-1][j-1])\n        # dp[i][j] = max(dp[i-1][j], dp[i-1][j-1])\n        # dp[i][j] = max(dp[i-1][j], dp[i-1][j-1])\n        # dp[i][j] = max(dp[i-1][j], dp[i-1][j-1])\n        # dp[i][j] = max(dp[i-1][j], dp"
    },
    {
        "number": 2265,
        "title": "Count Nodes Equal to Average of Subtree",
        "difficulty": 1,
        "answer": "        if not root:\n            return 0\n        return sum(self.averageOfSubtree(root.left) + self.averageOfSubtree(root.right)) / 2\n"
    },
    {
        "number": 2266,
        "title": "Count Number of Texts",
        "difficulty": 1,
        "answer": "        # DP\n        # dp[i][j] = dp[i-1][j] + dp[i-1][j-1]\n        # dp[i][j] = dp[i-1][j] + dp[i-1][j-1] + dp[i-1][j-2]\n        # dp[i][j] = dp[i-1][j] + dp[i-1][j-1] + dp[i-1][j-2] + dp[i-1][j-3]\n        # dp[i][j] = dp[i-1][j] + dp[i-1][j-1] + dp[i-1][j-2] + dp[i-1][j-3] + dp[i-1][j-4]\n        # dp[i][j] = dp[i-1][j] + dp[i-1][j-1] + dp[i-1][j-2] + dp"
    },
    {
        "number": 2267,
        "title": " Check if There Is a Valid Parentheses String Path",
        "difficulty": 2,
        "answer": "        m, n = len(grid), len(grid[0])\n        for i in range(m):\n            for j in range(n):\n                if grid[i][j] == \"(\" or grid[i][j] == \")\":\n                    if i == 0 and j == 0:\n                        return True\n                    elif i == 0:\n                        grid[i][j] = \")\"\n                    elif j == n - 1:\n                        grid[i][j] = \"(\"\n                    else:\n                        grid[i][j] = \")\"\n                        grid[i][j + 1] = \"(\"\n        return False\n"
    },
    {
        "number": 2269,
        "title": "Find the K-Beauty of a Number",
        "difficulty": 0,
        "answer": "        if num == 0:\n            return 0\n        if k == 1:\n            return 1\n        if num < 0:\n            return 0\n        if num == 1:\n            return 1\n        if num == 2:\n            return 2\n        if num == 3:\n            return 3\n        if num == 4:\n            return 4\n        if num == 5:\n            return 5\n        if num == 6:\n            return 6\n        if num == 7:\n            return 7\n        if num == 8:\n            return 8\n        if num == 9:\n            return 9\n        if num == 10:\n            return 10\n        if num == 11:\n            return 11\n        if num == 12:\n            return 12\n        if num == 13:\n            return 13\n        if num == 14:\n            return 14\n        if num == 15:\n            return 15\n        if num == 16:\n            return 16\n        if num == 17:\n            return 17\n        if num == 18:\n            return 18\n        if num == 19:\n            return 19\n        if num == 20:\n            "
    },
    {
        "number": 2270,
        "title": "Number of Ways to Split Array",
        "difficulty": 1,
        "answer": "        return len(nums) * (len(nums) - 1) // 2"
    },
    {
        "number": 2271,
        "title": "Maximum White Tiles Covered by a Carpet",
        "difficulty": 1,
        "answer": "        n = len(tiles)\n        if n == 0:\n            return 0\n        if n == 1:\n            return tiles[0][0]\n        if n == 2:\n            return min(tiles[0][0], tiles[1][0])\n        if n == 3:\n            return min(tiles[0][0], min(tiles[1][0], tiles[2][0]))\n        if n == 4:\n            return min(tiles[0][0], min(tiles[1][0], min(tiles[2][0], tiles[3][0])))\n        if n == 5:\n            return min(tiles[0][0], min(tiles[1][0], min(tiles[2][0], min(tiles[3][0], tiles[4][0]))))\n        if n == 6:\n            return min(tiles[0][0], min(tiles[1][0], min(tiles[2][0], min(tiles[3][0], min(tiles[4][0], tiles[5"
    },
    {
        "number": 2272,
        "title": "Substring With Largest Variance",
        "difficulty": 2,
        "answer": "        if not s:\n            return 0\n        n = len(s)\n        max_var = 0\n        for i in range(n):\n            for j in range(i+1, n):\n                if s[i] == s[j]:\n                    max_var = max(max_var, abs(i-j))\n        return max_var\n"
    },
    {
        "number": 2273,
        "title": "Find Resultant Array After Removing Anagrams",
        "difficulty": 0,
        "answer": "        result = []\n        for i in range(len(words)):\n            for j in range(i):\n                if words[i] == words[j]:\n                    result.append(words[i])\n                    break\n        return result\n"
    },
    {
        "number": 2274,
        "title": "Maximum Consecutive Floors Without Special Floors",
        "difficulty": 1,
        "answer": "        if bottom > top:\n            return 0\n        if bottom == top:\n            return 1\n        if bottom == top - 1:\n            return 2\n        if bottom == top - 2:\n            return 3\n        if bottom == top - 3:\n            return 4\n        if bottom == top - 4:\n            return 5\n        if bottom == top - 5:\n            return 6\n        if bottom == top - 6:\n            return 7\n        if bottom == top - 7:\n            return 8\n        if bottom == top - 8:\n            return 9\n        return 0\n"
    },
    {
        "number": 2275,
        "title": "Largest Combination With Bitwise AND Greater Than Zero",
        "difficulty": 1,
        "answer": "        n = len(candidates)\n        ans = 0\n        for i in range(n):\n            for j in range(i+1, n):\n                ans = max(ans, 1 + self.largestCombination(candidates[:i] + candidates[j:]))\n        return ans\n"
    },
    {
        "number": 2276,
        "title": "Count Integers in Intervals",
        "difficulty": 2,
        "answer": "        pass\n    def count(self) -> int:\n        \"\"\"\n        Given an empty set of intervals, implement a data structure that can:\n            Add an interval to the set of intervals.\n            Count the number of integers that are present in at least one interval.\n        Implement the CountIntervals class:\n            CountIntervals() Initializes the object with an empty set of intervals.\n            void add(int left, int right) Adds the interval [left, right] to the set of intervals.\n            int count() Returns the number of integers that are present in at least one interval.\n        Note that an interval [left, right] denotes all the integers x where left <= x <= right.\n        Example 1:\n        Input\n        [\"CountIntervals\", \"add\", \"add\", \"count\", \"add\", \"count\"]\n        [[], [2, 3], [7, 10], [], [5, 8], []]\n        Output\n        [null, null, null, 6, null, 8]\n        Explanation\n        CountIntervals countIntervals = new CountIntervals(); // initialize the object with an empty set"
    },
    {
        "number": 2278,
        "title": "Percentage of Letter in String",
        "difficulty": 0,
        "answer": "        count = 0\n        for c in s:\n            if c == letter:\n                count += 1\n        return int(round(count / len(s) * 100))\n"
    },
    {
        "number": 2279,
        "title": "Maximum Bags With Full Capacity of Rocks",
        "difficulty": 1,
        "answer": "        n = len(capacity)\n        ans = 0\n        for i in range(n):\n            if capacity[i] > rocks[i]:\n                ans += 1\n        return ans"
    },
    {
        "number": 2280,
        "title": "Minimum Lines to Represent a Line Chart",
        "difficulty": 1,
        "answer": "        n = len(stockPrices)\n        if n == 0:\n            return 0\n        if n == 1:\n            return 1\n        if n == 2:\n            return 2\n        if n == 3:\n            return 3\n        if n == 4:\n            return 4\n        if n == 5:\n            return 5\n        if n == 6:\n            return 6\n        if n == 7:\n            return 7\n        if n == 8:\n            return 8\n        if n == 9:\n            return 9\n        if n == 10:\n            return 10\n        if n == 11:\n            return 11\n        if n == 12:\n            return 12\n        if n == 13:\n            return 13\n        if n == 14:\n            return 14\n        if n == 15:\n            return 15\n        if n == 16:\n            return 16\n        if n == 17:\n            return 17\n        if n == 18:\n            return 18\n        if n == 19:\n            return 19\n        if n == 20:\n            return 20\n        if n == 21:\n            return"
    },
    {
        "number": 2281,
        "title": "Sum of Total Strength of Wizards",
        "difficulty": 2,
        "answer": "        n = len(strength)\n        if n == 0:\n            return 0\n        if n == 1:\n            return strength[0]\n        if n == 2:\n            return min(strength[0], strength[1]) * sum(strength)\n        if n == 3:\n            return min(strength[0], min(strength[1], strength[2])) * sum(strength)\n        if n == 4:\n            return min(strength[0], min(strength[1], min(strength[2], strength[3]))) * sum(strength)\n        if n == 5:\n            return min(strength[0], min(strength[1], min(strength[2], min(strength[3], strength[4])))) * sum(strength)\n        if n == 6:\n            return min(strength[0], min(strength[1], min(strength[2], min(strength[3], min(strength[4], strength[5]))))) * sum(strength)\n        if n == 7:\n            return min(strength[0], min(strength[1], min(strength[2],"
    },
    {
        "number": 2283,
        "title": "Check if Number Has Equal Digit Count and Digit Value",
        "difficulty": 0,
        "answer": "        count = 0\n        for i in range(len(num)):\n            if num[i] == '0':\n                count += 1\n            else:\n                count -= 1\n            if count < 0:\n                return False\n        return True\n"
    },
    {
        "number": 2284,
        "title": "Sender With Largest Word Count",
        "difficulty": 1,
        "answer": "        # DP\n        # dp[i][j] = max(dp[i-1][j], dp[i-1][j-1])\n        # dp[i][j] = max(dp[i-1][j], dp[i-1][j-1])\n        # dp[i][j] = max(dp[i-1][j], dp[i-1][j-1])\n        # dp[i][j] = max(dp[i-1][j], dp[i-1][j-1])\n        # dp[i][j] = max(dp[i-1][j], dp[i-1][j-1])\n        # dp[i][j] = max(dp[i-1][j], dp[i-1][j-1])\n        # dp[i][j] = max(dp[i-1][j], dp[i-1][j-1])\n        # dp[i][j] = max(dp[i-1][j], dp"
    },
    {
        "number": 2285,
        "title": "Maximum Total Importance of Roads",
        "difficulty": 1,
        "answer": "        importance = 0\n        for i in range(n):\n            for j in range(n):\n                if i!= j:\n                    importance += roads[i][0] + roads[j][1]\n        return importance\n"
    },
    {
        "number": 2286,
        "title": "Booking Concert Tickets in Groups",
        "difficulty": 2,
        "answer": "        return []"
    },
    {
        "number": 2287,
        "title": "Rearrange Characters to Make Target String",
        "difficulty": 0,
        "answer": "        # Brute force\n        # dp[i][j] = max(dp[i-1][j], dp[i-1][j-1])\n        # dp[i][j] = max(dp[i-1][j], dp[i-1][j-1])\n        # dp[i][j] = max(dp[i-1][j], dp[i-1][j-1])\n        # dp[i][j] = max(dp[i-1][j], dp[i-1][j-1])\n        # dp[i][j] = max(dp[i-1][j], dp[i-1][j-1])\n        # dp[i][j] = max(dp[i-1][j], dp[i-1][j-1])\n        # dp[i][j] = max(dp[i-1][j], dp[i-1][j-1])\n        # dp[i][j] = max(dp[i-1][j],"
    },
    {
        "number": 2288,
        "title": "Apply Discount to Prices",
        "difficulty": 1,
        "answer": "        # O(n) time, O(n) space\n        sentence = sentence.replace('$', '')\n        sentence = sentence.replace(' ', '')\n        sentence = sentence.replace('$', '')\n        sentence = sentence.replace(' ', '')\n        sentence = sentence.replace('$', '')\n        sentence = sentence.replace(' ', '')\n        sentence = sentence.replace('$', '')\n        sentence = sentence.replace(' ', '')\n        sentence = sentence.replace('$', '')\n        sentence = sentence.replace(' ', '')\n        sentence = sentence.replace('$', '')\n        sentence = sentence.replace(' ', '')\n        sentence = sentence.replace('$', '')\n        sentence = sentence.replace(' ', '')\n        sentence = sentence.replace('$', '')\n        sentence = sentence.replace(' ', '')\n        sentence = sentence.replace('$', '')\n        sentence = sentence.replace(' ', '')\n        sentence = sentence.replace('$', ''"
    },
    {
        "number": 2289,
        "title": "Steps to Make Array Non-decreasing",
        "difficulty": 1,
        "answer": "        if not nums:\n            return 0\n        n = len(nums)\n        if n == 1:\n            return 0\n        if n == 2:\n            return 1\n        if n == 3:\n            return 2\n        if n == 4:\n            return 3\n        if n == 5:\n            return 4\n        if n == 6:\n            return 5\n        if n == 7:\n            return 6\n        if n == 8:\n            return 7\n        if n == 9:\n            return 8\n        if n == 10:\n            return 9\n        if n == 11:\n            return 10\n        if n == 12:\n            return 11\n        if n == 13:\n            return 12\n        if n == 14:\n            return 13\n        if n == 15:\n            return 14\n        if n == 16:\n            return 15\n        if n == 17:\n            return 16\n        if n == 18:\n            return 17\n        if n == 19:\n            return 18\n        if n == 20:\n            return 19\n        if n == 21:\n            return 20"
    },
    {
        "number": 2290,
        "title": "Minimum Obstacle Removal to Reach Corner",
        "difficulty": 2,
        "answer": "        m, n = len(grid), len(grid[0])\n        dp = [[0] * n for _ in range(m)]\n        for i in range(m):\n            for j in range(n):\n                if grid[i][j] == 0:\n                    dp[i][j] = 1\n                elif grid[i][j] == 1:\n                    dp[i][j] = 1\n                else:\n                    dp[i][j] = 0\n        for i in range(m):\n            for j in range(n):\n                if dp[i][j] == 1:\n                    dp[i][j] = min(dp[i][j], self.minimumObstacles(grid[i + 1:m][j + 1:n]))\n        return dp[0][0]\n"
    },
    {
        "number": 2293,
        "title": "Min Max Game",
        "difficulty": 0,
        "answer": "        n = len(nums)\n        if n == 1:\n            return nums[0]\n        newNums = [0] * (n // 2)\n        for i in range(n // 2):\n            newNums[i] = min(nums[2 * i], nums[2 * i + 1])\n        for i in range(n // 2, n):\n            newNums[i] = max(nums[2 * i], nums[2 * i + 1])\n        for i in range(n // 2, 0, -2):\n            newNums[i] = max(nums[2 * i], nums[2 * i + 1])\n        for i in range(n // 2, 0, -2):\n            newNums[i] = min(nums[2 * i], nums[2 * i + 1])\n        return newNums[0]\n"
    },
    {
        "number": 2294,
        "title": "Partition Array Such That Maximum Difference Is K",
        "difficulty": 1,
        "answer": "        if not nums or k == 0:\n            return 0\n        n = len(nums)\n        if k > n:\n            return 1\n        if k == 1:\n            return 1\n        if k == n:\n            return 1\n        if k == n - 1:\n            return 1\n        if k == n / 2:\n            return 1\n        if k == n / 3:\n            return 1\n        if k == n / 4:\n            return 1\n        if k == n / 5:\n            return 1\n        if k == n / 6:\n            return 1\n        if k == n / 7:\n            return 1\n        if k == n / 8:\n            return 1\n        if k == n / 9:\n            return 1\n        if k == n / 10:\n            return 1\n        if k == n / 11:\n            return 1\n        if k == n / 12:\n            return 1\n        if k == n / 13:\n            return 1\n        if k == n / 14:\n            return 1\n        if k == n / 15:\n            return"
    },
    {
        "number": 2295,
        "title": "Replace Elements in an Array",
        "difficulty": 1,
        "answer": "        n = len(nums)\n        m = len(operations)\n        res = [0] * n\n        for i in range(m):\n            for j in range(n):\n                if operations[i][0] == nums[j]:\n                    res[j] = operations[i][1]\n        return res\n"
    },
    {
        "number": 2296,
        "title": "Design a Text Editor",
        "difficulty": 2,
        "answer": "        pass\n"
    },
    {
        "number": 2299,
        "title": "Strong Password Checker II",
        "difficulty": 0,
        "answer": "        if len(password) < 8:\n            return False\n        if not password.islower() and not password.isupper():\n            return False\n        if not password.isdigit():\n            return False\n        if not password.count('!') == 1 and not password.count('@') == 1 and not password.count('#') == 1 and not password.count('$') == 1 and not password.count('%') == 1 and not password.count('^') == 1 and not password.count('&') == 1 and not password.count('*') == 1 and not password.count('(') == 1 and not password.count(')') == 1 and not password.count('-') == 1 and not password.count('+') == 1 and not password.count('=') == 1 and not password.count('?') == 1 and not password.count(';') == 1 and not password.count(':') == 1 and not password.count('\\'') == 1 and not password.count('\\\"') == 1 and not password.count('{') == 1 and not password.count('}') == 1"
    },
    {
        "number": 2300,
        "title": "Successful Pairs of Spells and Potions",
        "difficulty": 1,
        "answer": "        res = []\n        for i in range(len(spells)):\n            for j in range(len(potions)):\n                if spells[i] * potions[j] >= success:\n                    res.append(potions[j])\n        return res\n"
    },
    {
        "number": 2301,
        "title": "Match Substring After Replacement",
        "difficulty": 2,
        "answer": "        # write your code here\n        if len(sub) > len(s):\n            return False\n        if len(sub) == 0:\n            return True\n        if len(sub) == 1:\n            return s.find(sub)!= -1\n        if len(sub) == 2:\n            return s.find(sub)!= -1 and s.find(sub) + 1 == s.find(sub[1])\n        if len(sub) == 3:\n            return s.find(sub)!= -1 and s.find(sub) + 1 == s.find(sub[1]) and s.find(sub) + 2 == s.find(sub[2])\n        if len(sub) == 4:\n            return s.find(sub)!= -1 and s.find(sub) + 1 == s.find(sub[1]) and s.find(sub) + 2 == s.find(sub[2]) and s.find(sub) + 3 == s.find(sub[3])\n        if len(sub) == 5:\n            return s.find(sub"
    },
    {
        "number": 2302,
        "title": "Count Subarrays With Score Less Than K",
        "difficulty": 2,
        "answer": "        n = len(nums)\n        if k > n:\n            return 0\n        if k == 0:\n            return 1\n        if k == 1:\n            return n\n        if k == 2:\n            return sum(nums)\n        if k == 3:\n            return sum(nums) * nums[0]\n        if k == 4:\n            return sum(nums) * nums[0] * nums[1]\n        if k == 5:\n            return sum(nums) * nums[0] * nums[1] * nums[2]\n        if k == 6:\n            return sum(nums) * nums[0] * nums[1] * nums[2] * nums[3]\n        if k == 7:\n            return sum(nums) * nums[0] * nums[1] * nums[2] * nums[3] * nums[4]\n        if k == 8:\n            return sum(nums) * nums[0] * nums[1] * num"
    },
    {
        "number": 2303,
        "title": "Calculate Amount Paid in Taxes",
        "difficulty": 0,
        "answer": "        total = 0\n        for i in range(len(brackets)):\n            total += brackets[i][1] * income\n            total += brackets[i][0] * (income - brackets[i][1])\n        return total\n"
    },
    {
        "number": 2304,
        "title": "Minimum Path Cost in a Grid",
        "difficulty": 1,
        "answer": "        m, n = len(grid), len(grid[0])\n        if m == 0 or n == 0:\n            return 0\n        if m == 1 or n == 1:\n            return grid[0][0]\n        if m == 2 or n == 2:\n            return min(grid[0][0], grid[1][0])\n        if m == 3 or n == 3:\n            return min(grid[0][0], min(grid[1][0], grid[2][0]))\n        if m == 4 or n == 4:\n            return min(grid[0][0], min(grid[1][0], min(grid[2][0], grid[3][0])))\n        if m == 5 or n == 5:\n            return min(grid[0][0], min(grid[1][0], min(grid[2][0], min(grid[3][0], min(grid[4][0], grid[5][0]))))\n        if m == 6 or n == 6:\n            return min(grid[0][0], min(grid[1][0"
    },
    {
        "number": 2305,
        "title": "Fair Distribution of Cookies",
        "difficulty": 1,
        "answer": "        if k == 1:\n            return 0\n        if k == 2:\n            return max(cookies)\n        if k == 3:\n            return max(cookies) + max(cookies)\n        if k == 4:\n            return max(cookies) + max(cookies) + max(cookies)\n        if k == 5:\n            return max(cookies) + max(cookies) + max(cookies) + max(cookies)\n        if k == 6:\n            return max(cookies) + max(cookies) + max(cookies) + max(cookies) + max(cookies)\n        if k == 7:\n            return max(cookies) + max(cookies) + max(cookies) + max(cookies) + max(cookies) + max(cookies)\n        if k == 8:\n            return max(cookies) + max(cookies) + max(cookies) + max(cookies) + max(cookies) + max(cookies) + max(cookies)\n        if k == 9:\n            "
    },
    {
        "number": 2306,
        "title": "Naming a Company",
        "difficulty": 2,
        "answer": "        # Sort the input ideas\n        ideas = sorted(ideas)\n        # Count the number of distinct names\n        count = 0\n        for i in range(len(ideas)):\n            for j in range(i+1, len(ideas)):\n                if ideas[i] == ideas[j]:\n                    ideas[i], ideas[j] = ideas[j], ideas[i]\n                    count += 1\n        return count\n"
    },
    {
        "number": 2309,
        "title": "Greatest English Letter in Upper and Lower Case",
        "difficulty": 0,
        "answer": "        # DP\n        # dp[i][j] = max(dp[i-1][j], dp[i-1][j-1])\n        # dp[i][j] = max(dp[i-1][j], dp[i-1][j-1])\n        # dp[i][j] = max(dp[i-1][j], dp[i-1][j-1])\n        # dp[i][j] = max(dp[i-1][j], dp[i-1][j-1])\n        # dp[i][j] = max(dp[i-1][j], dp[i-1][j-1])\n        # dp[i][j] = max(dp[i-1][j], dp[i-1][j-1])\n        # dp[i][j] = max(dp[i-1][j], dp[i-1][j-1])\n        # dp[i][j] = max(dp[i-1][j], dp"
    },
    {
        "number": 2310,
        "title": "Sum of Numbers With Units Digit K",
        "difficulty": 1,
        "answer": "        if num == 0:\n            return 0\n        if num == 1:\n            return 1\n        if num == 2:\n            return 2\n        if num == 3:\n            return 3\n        if num == 4:\n            return 4\n        if num == 5:\n            return 5\n        if num == 6:\n            return 6\n        if num == 7:\n            return 7\n        if num == 8:\n            return 8\n        if num == 9:\n            return 9\n        if num == 10:\n            return 10\n        if num == 11:\n            return 11\n        if num == 12:\n            return 12\n        if num == 13:\n            return 13\n        if num == 14:\n            return 14\n        if num == 15:\n            return 15\n        if num == 16:\n            return 16\n        if num == 17:\n            return 17\n        if num == 18:\n            return 18\n        if num == 19:\n            return 19\n        if num == 20:\n            return 20\n        if num == 21:\n            return 21\n        if num == 22:\n            "
    },
    {
        "number": 2311,
        "title": "Longest Binary Subsequence Less Than or Equal to K",
        "difficulty": 1,
        "answer": "        if not s or not k:\n            return 0\n        if len(s) == 1:\n            return 1\n        if k == 1:\n            return len(s)\n        if k == 2:\n            return max(len(s), len(s[::-1]))\n        if k == 3:\n            return max(len(s), len(s[::-1]), len(s[::-2]))\n        if k == 4:\n            return max(len(s), len(s[::-1]), len(s[::-2]), len(s[::-3]))\n        if k == 5:\n            return max(len(s), len(s[::-1]), len(s[::-2]), len(s[::-3]), len(s[::-4]))\n        if k == 6:\n            return max(len(s), len(s[::-1]), len(s[::-2]), len(s[::-3]), len(s[::-4]), len(s[::-5]))\n        if k =="
    },
    {
        "number": 2312,
        "title": "Selling Pieces of Wood",
        "difficulty": 2,
        "answer": "        if m == 1 or n == 1:\n            return 0\n        if m == 2 and n == 2:\n            return min(prices[0][2], prices[1][2])\n        if m == 2 and n == 3:\n            return min(prices[0][2], prices[1][2], prices[2][2])\n        if m == 3 and n == 2:\n            return min(prices[0][2], prices[1][2], prices[2][2])\n        if m == 3 and n == 3:\n            return min(prices[0][2], prices[1][2], prices[2][2], prices[3][2])\n        if m == 4 and n == 3:\n            return min(prices[0][2], prices[1][2], prices[2][2], prices[3][2])\n        if m == 4 and n == 4:\n            return min(prices[0][2], prices[1][2], prices[2][2], prices[3][2], prices[4][2])\n        if m == 5 and n"
    },
    {
        "number": 2315,
        "title": "Count Asterisks",
        "difficulty": 0,
        "answer": "        count = 0\n        for i in range(len(s)):\n            if s[i] == '|':\n                if i > 0 and s[i - 1] == '|':\n                    count += 1\n                else:\n                    count += 2\n        return count\n"
    },
    {
        "number": 2316,
        "title": "Count Unreachable Pairs of Nodes in an Undirected Graph",
        "difficulty": 1,
        "answer": "        if n == 0:\n            return 0\n        if n == 1:\n            return edges[0][0]\n        if n == 2:\n            return edges[0][0] + edges[1][0]\n        if n == 3:\n            return edges[0][0] + edges[1][0] + edges[2][0]\n        if n == 4:\n            return edges[0][0] + edges[1][0] + edges[2][0] + edges[3][0]\n        if n == 5:\n            return edges[0][0] + edges[1][0] + edges[2][0] + edges[3][0] + edges[4][0]\n        if n == 6:\n            return edges[0][0] + edges[1][0] + edges[2][0] + edges[3][0] + edges[4][0] + edges[5][0]\n        if n == 7:\n            return edges[0][0] + edges[1][0] + edges[2][0] + edges[3][0] + edges"
    },
    {
        "number": 2317,
        "title": "Maximum XOR After Operations ",
        "difficulty": 1,
        "answer": "        n = len(nums)\n        max_xor = 0\n        for i in range(n):\n            max_xor = max(max_xor, nums[i] ^ nums[i+1])\n        return max_xor\n"
    },
    {
        "number": 2318,
        "title": "Number of Distinct Roll Sequences",
        "difficulty": 2,
        "answer": "        if n == 1:\n            return 1\n        if n == 2:\n            return 2\n        if n == 3:\n            return 4\n        if n == 4:\n            return 8\n        if n == 5:\n            return 16\n        if n == 6:\n            return 32\n        if n == 7:\n            return 64\n        if n == 8:\n            return 128\n        if n == 9:\n            return 256\n        if n == 10:\n            return 512\n        if n == 11:\n            return 1024\n        if n == 12:\n            return 2048\n        if n == 13:\n            return 4096\n        if n == 14:\n            return 8192\n        if n == 15:\n            return 16384\n        if n == 16:\n            return 32768\n        if n == 17:\n            return 65536\n        if n == 18:\n            return 131072\n        if n == 19:\n            return 262144\n        if n == 20:\n            return 524288\n        if n == 21:\n            return 1048576\n        if n == 22:\n            "
    },
    {
        "number": 2319,
        "title": "Check if Matrix Is X-Matrix",
        "difficulty": 0,
        "answer": "        if not grid or not grid[0]:\n            return False\n        for i in range(len(grid)):\n            if not grid[i][0]:\n                return False\n            if not grid[i][len(grid[0])-1]:\n                return False\n        return True\n"
    },
    {
        "number": 2320,
        "title": "Count Number of Ways to Place Houses",
        "difficulty": 1,
        "answer": "        # https://discuss.leetcode.com/topic/835/java-solution-with-explanation\n        # https://discuss.leetcode.com/topic/835/java-solution-with-explanation\n        # https://discuss.leetcode.com/topic/835/java-solution-with-explanation\n        # https://discuss.leetcode.com/topic/835/java-solution-with-explanation\n        # https://discuss.leetcode.com/topic/835/java-solution-with-explanation\n        # https://discuss.leetcode.com/topic/835/java-solution-with-explanation\n        # https://discuss.leetcode.com/topic/835/java-solution-with-explanation\n        # https://discuss.leetcode.com/topic/835/java-solution-with-explanation\n        # https://discuss.leetcode.com/topic/835/"
    },
    {
        "number": 2321,
        "title": "Maximum Score Of Spliced Array",
        "difficulty": 2,
        "answer": "        nums1_len = len(nums1)\n        nums2_len = len(nums2)\n        if nums1_len == 0 or nums2_len == 0:\n            return 0\n        if nums1_len == 1 and nums2_len == 1:\n            return max(nums1[0] + nums2[0], nums1[0] + nums2[0])\n        if nums1_len == 1:\n            return max(nums1[0] + nums2[0], nums1[0] + nums2[0])\n        if nums2_len == 1:\n            return max(nums1[0] + nums2[0], nums1[0] + nums2[0])\n        if nums1_len == 2 and nums2_len == 2:\n            return max(nums1[0] + nums1[1] + nums2[0] + nums2[1], nums1[0] + nums1[1] + num"
    },
    {
        "number": 2322,
        "title": "Minimum Score After Removals on a Tree",
        "difficulty": 2,
        "answer": "        n = len(nums)\n        if n == 0:\n            return 0\n        if n == 1:\n            return nums[0]\n        if n == 2:\n            return min(nums[0], nums[1]) ^ min(nums[0], nums[1])\n        if edges[0][0] == 0:\n            return min(nums[0], nums[1]) ^ min(nums[0], nums[1])\n        if edges[0][1] == 0:\n            return min(nums[0], nums[1]) ^ min(nums[0], nums[1])\n        if edges[1][0] == 0:\n            return min(nums[0], nums[1]) ^ min(nums[0], nums[1])\n        if edges[1][1] == 0:\n            return min(nums[0], nums[1]) ^ min(nums[0], nums[1])\n        if edges[0][0] == edges[1][0]:\n            return min("
    },
    {
        "number": 2325,
        "title": "Decode the Message",
        "difficulty": 0,
        "answer": "        table = {'a': 'b', 'b': 'c', 'c': 'd', 'd': 'e', 'e': 'f', 'f': 'g', 'g': 'h', 'h': 'i', 'i': 'j', 'j': 'k', 'k': 'l', 'l':'m','m': 'n', 'n': 'o', 'o': 'p', 'p': 'q', 'q': 'r', 'r':'s','s': 't', 't': 'u', 'u': 'v', 'v': 'w', 'w': 'x', 'x': 'y', 'y': 'z', 'z': 'a'}\n        message = message.replace(' ', '')\n        result = ''\n        for i in range(len(message)):\n            if message[i] in table:\n                result += table[message[i]]\n            else:\n                result += message[i]\n        return result\n"
    },
    {
        "number": 2326,
        "title": "Spiral Matrix IV",
        "difficulty": 1,
        "answer": "        if not head:\n            return [[-1 for _ in range(n)] for _ in range(m)]\n        if m == 1 and n == 1:\n            return [[head.val] for _ in range(n)]\n        if m == 1:\n            return [[head.val] for _ in range(n)]\n        if n == 1:\n            return [[head.val] for _ in range(m)]\n        if m == 1:\n            return [[head.val] for _ in range(n)]\n        if n == 1:\n            return [[head.val] for _ in range(m)]\n        if m == 1:\n            return [[head.val] for _ in range(n)]\n        if n == 1:\n            return [[head.val] for _ in range(m)]\n        if m == 1:\n            return [[head.val] for _ in range(n)]\n        if n == 1:\n            return [[head.val] for _ in range(m)]\n        if m == 1:\n            return [[head.val] for _ in range(n)]\n"
    },
    {
        "number": 2327,
        "title": "Number of People Aware of a Secret",
        "difficulty": 1,
        "answer": "        if n == 1:\n            return 1\n        if n == 2:\n            return 2\n        if n == 3:\n            return 3\n        if n == 4:\n            return 4\n        if n == 5:\n            return 5\n        if n == 6:\n            return 6\n        if n == 7:\n            return 7\n        if n == 8:\n            return 8\n        if n == 9:\n            return 9\n        if n == 10:\n            return 10\n        if n == 11:\n            return 11\n        if n == 12:\n            return 12\n        if n == 13:\n            return 13\n        if n == 14:\n            return 14\n        if n == 15:\n            return 15\n        if n == 16:\n            return 16\n        if n == 17:\n            return 17\n        if n == 18:\n            return 18\n        if n == 19:\n            return 19\n        if n == 20:\n            return 20\n        if n == 21:\n            return 21\n        if n == 22:\n            return 22\n        if n == 23:\n            "
    },
    {
        "number": 2328,
        "title": "Number of Increasing Paths in a Grid",
        "difficulty": 2,
        "answer": "        m, n = len(grid), len(grid[0])\n        dp = [[0] * n for _ in range(m)]\n        for i in range(m):\n            for j in range(n):\n                if grid[i][j] == 1:\n                    dp[i][j] = 1\n                elif grid[i][j] == 2:\n                    dp[i][j] = 1\n                    dp[i][j + 1] = 1\n                    dp[i][j - 1] = 1\n                    dp[i + 1][j] = 1\n                    dp[i - 1][j] = 1\n        return sum(dp[i][j] for i in range(m) for j in range(n)) % 109 + 7\n"
    },
    {
        "number": 2331,
        "title": "Evaluate Boolean Binary Tree",
        "difficulty": 0,
        "answer": "        if not root:\n            return False\n        return self.evaluateTreeHelper(root)"
    },
    {
        "number": 2332,
        "title": "The Latest Time to Catch a Bus",
        "difficulty": 1,
        "answer": "        if capacity == 0:\n            return 0\n        elif capacity == 1:\n            return min(buses)\n        elif capacity == 2:\n            return min(buses) + min(passengers)\n        else:\n            return min(buses) + min(passengers) + min(passengers)"
    },
    {
        "number": 2333,
        "title": "Minimum Sum of Squared Difference",
        "difficulty": 1,
        "answer": "        n1 = len(nums1)\n        n2 = len(nums2)\n        if n1 == 0 or n2 == 0:\n            return 0\n        if k1 > n1 or k2 > n2:\n            return 0\n        if k1 == 0 and k2 == 0:\n            return sum(map(lambda x: x * x, nums1)) + sum(map(lambda x: x * x, nums2))\n        if k1 == 0:\n            return sum(map(lambda x: x * x - nums1[0], nums2)) + sum(map(lambda x: x * x - nums1[0], nums1))\n        if k2 == 0:\n            return sum(map(lambda x: x * x - nums2[0], nums1)) + sum(map(lambda x: x * x - nums2[0], nums2))\n        return min(\n            sum(map(lambda x: x * x - nums1[i] - nums2[i], range(k1))),\n"
    },
    {
        "number": 2334,
        "title": "Subarray With Elements Greater Than Varying Threshold",
        "difficulty": 2,
        "answer": "        if not nums:\n            return 0\n        if len(nums) == 1:\n            return 1\n        if len(nums) == 2:\n            return max(nums) > threshold / 2\n        if len(nums) == 3:\n            return max(nums) > threshold / 3\n        if len(nums) == 4:\n            return max(nums) > threshold / 4\n        if len(nums) == 5:\n            return max(nums) > threshold / 5\n        if len(nums) == 6:\n            return max(nums) > threshold / 6\n        if len(nums) == 7:\n            return max(nums) > threshold / 7\n        if len(nums) == 8:\n            return max(nums) > threshold / 8\n        if len(nums) == 9:\n            return max(nums) > threshold / 9\n        if len(nums) == 10:\n            return max(nums) > threshold / 10\n        if len(nums) == 11:\n            return max(nums"
    },
    {
        "number": 2335,
        "title": "Minimum Amount of Time to Fill Cups",
        "difficulty": 0,
        "answer": "        n = len(amount)\n        if n == 0:\n            return 0\n        if n == 1:\n            return 1\n        if n == 2:\n            return 2\n        if n == 3:\n            return 3\n        if n == 4:\n            return 4\n        if n == 5:\n            return 5\n        if n == 6:\n            return 6\n        if n == 7:\n            return 7\n        if n == 8:\n            return 8\n        if n == 9:\n            return 9\n        if n == 10:\n            return 10\n        if n == 11:\n            return 11\n        if n == 12:\n            return 12\n        if n == 13:\n            return 13\n        if n == 14:\n            return 14\n        if n == 15:\n            return 15\n        if n == 16:\n            return 16\n        if n == 17:\n            return 17\n        if n == 18:\n            return 18\n        if n == 19:\n            return 19\n        if n == 20:\n            return 20\n        if n == 21:\n            return 21\n"
    },
    {
        "number": 2336,
        "title": "Smallest Number in Infinite Set",
        "difficulty": 1,
        "answer": "    def __init__(self):\n        self.data = []\n    def addBack(self, num: int) -> None:\n        \"\"\"\n        You have a set which contains all positive integers [1, 2, 3, 4, 5,...].\n        Implement the SmallestInfiniteSet class:\n            SmallestInfiniteSet() Initializes the SmallestInfiniteSet object to contain all positive integers.\n            int popSmallest() Removes and returns the smallest integer contained in the infinite set.\n            void addBack(int num) Adds a positive integer num back into the infinite set, if it is not already in the infinite set.\n        Example 1:\n        Input\n        [\"SmallestInfiniteSet\", \"addBack\", \"popSmallest\", \"popSmallest\", \"popSmallest\", \"addBack\", \"popSmallest\", \"popSmallest\", \"popSmallest\"]\n        [[], [2], [], [], [], [1], [], [], []]\n        Output\n        [null, null, 1, 2, 3, null, 1, 4, 5]\n        Explanation\n        "
    },
    {
        "number": 2337,
        "title": "Move Pieces to Obtain a String",
        "difficulty": 1,
        "answer": "        if len(start)!= len(target):\n            return False\n        for i in range(len(start)):\n            if start[i] == '_' and start[i-1] == 'L':\n                if target[i] == 'L':\n                    return True\n                if target[i] == 'R':\n                    return False\n            if start[i] == '_' and start[i-1] == 'R':\n                if target[i] == 'L':\n                    return False\n                if target[i] == 'R':\n                    return True\n            if start[i] == '_' and start[i-1] == 'L' and start[i-2] == 'L':\n                if target[i] == 'L':\n                    return True\n                if target[i] == 'R':\n                    return False\n            if start[i] == '_' and start[i-1] == 'R' and start[i-2] == 'R':\n                if target[i] == 'L':\n                    return False\n                if target[i] =="
    },
    {
        "number": 2338,
        "title": "Count the Number of Ideal Arrays",
        "difficulty": 2,
        "answer": "        return (n * (n + 1)) // 2 + (n * (n + 1) % 2) // 2 + (n * (n + 1) % 2) // 2 + (n * (n + 1) % 2) // 2 + (n * (n + 1) % 2) // 2 + (n * (n + 1) % 2) // 2 + (n * (n + 1) % 2) // 2 + (n * (n + 1) % 2) // 2 + (n * (n + 1) % 2) // 2 + (n * (n + 1) % 2) // 2 + (n * (n + 1) % 2) // 2 + (n * (n + 1) % 2) // 2 + (n * (n + 1) % 2) // 2 + (n * (n + 1) % 2) // 2 + (n * (n + 1) % 2) // 2 + (n * (n + 1) % 2) // 2 + (n * (n + 1) % 2) // 2 + (n * (n + 1) % 2) // 2"
    },
    {
        "number": 2341,
        "title": "Maximum Number of Pairs in Array",
        "difficulty": 0,
        "answer": "        ans = [0, 0]\n        for i in range(len(nums)):\n            for j in range(i + 1, len(nums)):\n                if nums[i] == nums[j]:\n                    ans[0] += 1\n                    nums.pop(i)\n                    nums.pop(j)\n                    break\n        for i in range(len(nums)):\n            for j in range(i + 1, len(nums)):\n                if nums[i] == nums[j]:\n                    ans[1] += 1\n                    nums.pop(i)\n                    nums.pop(j)\n                    break\n        return ans\n"
    },
    {
        "number": 2342,
        "title": "Max Sum of a Pair With Equal Sum of Digits",
        "difficulty": 1,
        "answer": "        nums.sort()\n        ans = -1\n        for i in range(len(nums)):\n            for j in range(i+1, len(nums)):\n                if nums[i] + nums[j] == sum(map(int, str(nums[i] + nums[j]))):\n                    ans = max(ans, nums[i] + nums[j])\n        return ans\n"
    },
    {
        "number": 2343,
        "title": "Query Kth Smallest Trimmed Number",
        "difficulty": 1,
        "answer": "        n = len(nums)\n        ans = [0] * n\n        for i in range(n):\n            for j in range(n):\n                if j >= i:\n                    ans[j] = max(ans[j], nums[i][:queries[i][1]])\n        return ans"
    },
    {
        "number": 2344,
        "title": "Minimum Deletions to Make Array Divisible",
        "difficulty": 2,
        "answer": "        nums.sort()\n        numsDivide.sort()\n        for i in range(len(nums)):\n            if nums[i] % numsDivide[i] == 0:\n                return i\n        return -1\n"
    },
    {
        "number": 2347,
        "title": "Best Poker Hand",
        "difficulty": 0,
        "answer": "        if len(ranks) == 0 or len(suits) == 0:\n            return \"\"\n        if len(ranks) == 1:\n            return suits[0]\n        if len(ranks) == 2:\n            return \"Pair\" if ranks[0] == ranks[1] else \"Flush\"\n        if len(ranks) == 3:\n            return \"Three of a Kind\" if ranks[0] == ranks[1] and ranks[1] == ranks[2] else \"Flush\"\n        if len(ranks) == 4:\n            return \"Four of a Kind\" if ranks[0] == ranks[1] and ranks[1] == ranks[2] and ranks[2] == ranks[3] else \"Flush\"\n        if len(ranks) == 5:\n            return \"Straight\" if ranks[0] == ranks[1] and ranks[1] == ranks[2] and ranks[2] == ranks[3] and ranks[3] == ranks[4] else \"Flush\"\n        return \"\"\n"
    },
    {
        "number": 2348,
        "title": "Number of Zero-Filled Subarrays",
        "difficulty": 1,
        "answer": "        count = 0\n        for i in range(len(nums)):\n            if nums[i] == 0:\n                count += 1\n        return count\n"
    },
    {
        "number": 2349,
        "title": "Design a Number Container System",
        "difficulty": 1,
        "answer": "        pass\n    def test(self, nums: List[int]) -> None:\n        \"\"\"\n        Design a number container system that can do the following:\n            Insert or Replace a number at the given index in the system.\n            Return the smallest index for the given number in the system.\n        Implement the NumberContainers class:\n            NumberContainers() Initializes the number container system.\n            void change(int index, int number) Fills the container at index with the number. If there is already a number at that index, replace it.\n            int find(int number) Returns the smallest index for the given number, or -1 if there is no index that is filled by number in the system.\n        Example 1:\n        Input\n        [\"NumberContainers\", \"find\", \"change\", \"change\", \"change\", \"change\", \"find\", \"change\", \"find\"]\n        [[], [10], [2, 10], [1, 10], [3, 10], [5, 10], [10], [1, 20], [10]]\n        Output\n        [null, -1, null, null, null, null"
    },
    {
        "number": 2350,
        "title": "Shortest Impossible Sequence of Rolls",
        "difficulty": 2,
        "answer": "        if not rolls:\n            return 0\n        if len(rolls) == 1:\n            return 1\n        if len(rolls) == 2:\n            return 2\n        if len(rolls) == 3:\n            return 3\n        if len(rolls) == 4:\n            return 4\n        if len(rolls) == 5:\n            return 5\n        if len(rolls) == 6:\n            return 6\n        if len(rolls) == 7:\n            return 7\n        if len(rolls) == 8:\n            return 8\n        if len(rolls) == 9:\n            return 9\n        if len(rolls) == 10:\n            return 10\n        if len(rolls) == 11:\n            return 11\n        if len(rolls) == 12:\n            return 12\n        if len(rolls) == 13:\n            return 13\n        if len(rolls) == 14:\n            return 14\n        if len(rolls) == 15:\n            return 15\n        if len(rolls) == 16:\n            return 16\n"
    },
    {
        "number": 2351,
        "title": "First Letter to Appear Twice",
        "difficulty": 0,
        "answer": "        if not s:\n            return \"\"\n        first_occurrence = -1\n        for i in range(len(s)):\n            if s[i] == s[i - 1]:\n                first_occurrence = i\n                break\n        return s[first_occurrence]\n"
    },
    {
        "number": 2352,
        "title": "Equal Row and Column Pairs",
        "difficulty": 1,
        "answer": "        n = len(grid)\n        if n == 0:\n            return 0\n        if n == 1:\n            return 1\n        m = len(grid[0])\n        if m == 0:\n            return 0\n        if m == 1:\n            return 1\n        dp = [[0] * m for _ in range(n)]\n        for i in range(n):\n            for j in range(m):\n                if grid[i][j] == grid[i][j - 1]:\n                    dp[i][j] = dp[i][j - 1] + 1\n        return sum(dp)\n"
    },
    {
        "number": 2353,
        "title": "Design a Food Rating System",
        "difficulty": 1,
        "answer": "        foods = foods[:]\n        cuisines = cuisines[:]\n        ratings = ratings[:]\n        foods.sort()\n        cuisines.sort()\n        ratings.sort()\n        for i in range(len(foods)):\n            if ratings[i] > ratings[i + 1]:\n                foods[i], foods[i + 1] = foods[i + 1], foods[i]\n                cuisines[i], cuisines[i + 1] = cuisines[i + 1], cuisines[i]\n                ratings[i], ratings[i + 1] = ratings[i + 1], ratings[i]\n        return foods[0]"
    },
    {
        "number": 2354,
        "title": "Number of Excellent Pairs",
        "difficulty": 2,
        "answer": "        n = len(nums)\n        dp = [0] * (n + 1)\n        for i in range(n + 1):\n            dp[i] = i\n        for i in range(n):\n            for j in range(i + 1, n + 1):\n                dp[j] = min(dp[j], dp[i] + nums[i] & nums[j])\n        return dp[n]\n"
    },
    {
        "number": 2357,
        "title": "Make Array Zero by Subtracting Equal Amounts",
        "difficulty": 0,
        "answer": "        n = len(nums)\n        if n == 0:\n            return 0\n        if n == 1:\n            return 1\n        if nums[0] == 0:\n            return 0\n        if nums[0] == 1:\n            return 1\n        if nums[0] == 2:\n            return 1\n        if nums[0] == 3:\n            return 1\n        if nums[0] == 4:\n            return 1\n        if nums[0] == 5:\n            return 1\n        if nums[0] == 6:\n            return 1\n        if nums[0] == 7:\n            return 1\n        if nums[0] == 8:\n            return 1\n        if nums[0] == 9:\n            return 1\n        if nums[0] == 10:\n            return 1\n        if nums[0] == 11:\n            return 1\n        if nums[0] == 12:\n            return 1\n        if nums[0] == 13:\n            return 1\n        if nums[0] == 14"
    },
    {
        "number": 2358,
        "title": "Maximum Number of Groups Entering a Competition",
        "difficulty": 1,
        "answer": "        n = len(grades)\n        if n == 0:\n            return 0\n        if n == 1:\n            return 1\n        if n == 2:\n            return 2\n        if n == 3:\n            return 3\n        if n == 4:\n            return 4\n        if n == 5:\n            return 5\n        if n == 6:\n            return 6\n        if n == 7:\n            return 7\n        if n == 8:\n            return 8\n        if n == 9:\n            return 9\n        if n == 10:\n            return 10\n        if n == 11:\n            return 11\n        if n == 12:\n            return 12\n        if n == 13:\n            return 13\n        if n == 14:\n            return 14\n        if n == 15:\n            return 15\n        if n == 16:\n            return 16\n        if n == 17:\n            return 17\n        if n == 18:\n            return 18\n        if n == 19:\n            return 19\n        if n == 20:\n            return 20\n        if n == 21:\n            return 21\n"
    },
    {
        "number": 2359,
        "title": "Find Closest Node to Given Two Nodes",
        "difficulty": 1,
        "answer": "        n = len(edges)\n        if n == 0:\n            return -1\n        if node1 == node2:\n            return node1\n        if edges[node1] == -1:\n            return node1\n        if edges[node2] == -1:\n            return node2\n        if edges[node1] < edges[node2]:\n            return node1\n        else:\n            return node2\n"
    },
    {
        "number": 2360,
        "title": "Longest Cycle in a Graph",
        "difficulty": 2,
        "answer": "        if not edges:\n            return 0"
    },
    {
        "number": 2363,
        "title": "Merge Similar Items",
        "difficulty": 0,
        "answer": "        ret = [[0]*len(items1[0]) for _ in range(len(items1))]\n        for i in range(len(items1)):\n            for j in range(len(items1[i])):\n                if items1[i][j][0] == items2[i][j][0]:\n                    ret[i][items1[i][j][1]] += items2[i][j][1]\n        return ret\n"
    },
    {
        "number": 2364,
        "title": "Count Number of Bad Pairs",
        "difficulty": 1,
        "answer": "        n = len(nums)\n        if n == 0:\n            return 0\n        dp = [0] * (n + 1)\n        for i in range(1, n + 1):\n            dp[i] = dp[i - 1] + 1 if i < n and nums[i - 1] < nums[i] else 0\n        return dp[n]\n"
    },
    {
        "number": 2365,
        "title": "Task Scheduler II",
        "difficulty": 1,
        "answer": "        n = len(tasks)\n        if n == 0:\n            return 0\n        elif n == 1:\n            return 1\n        elif n == 2:\n            return 1\n        elif n == 3:\n            return 1\n        elif n == 4:\n            return 1\n        elif n == 5:\n            return 1\n        elif n == 6:\n            return 1\n        elif n == 7:\n            return 1\n        elif n == 8:\n            return 1\n        elif n == 9:\n            return 1\n        else:\n            return 1"
    },
    {
        "number": 2366,
        "title": "Minimum Replacements to Sort the Array",
        "difficulty": 2,
        "answer": "        nums.sort()\n        return len(nums)\n"
    },
    {
        "number": 2367,
        "title": "Number of Arithmetic Triplets",
        "difficulty": 0,
        "answer": "        ans = 0\n        for i in range(len(nums)):\n            for j in range(i+1, len(nums)):\n                for k in range(j+1, len(nums)):\n                    if nums[j] - nums[i] == diff and nums[k] - nums[j] == diff:\n                        ans += 1\n        return ans\n"
    },
    {
        "number": 2368,
        "title": "Reachable Nodes With Restrictions",
        "difficulty": 1,
        "answer": "        if n == 0:\n            return 0\n        if n == 1:\n            return 1\n        if n == 2:\n            return 2\n        if n == 3:\n            return 3\n        if n == 4:\n            return 4\n        if n == 5:\n            return 5\n        if n == 6:\n            return 6\n        if n == 7:\n            return 7\n        if n == 8:\n            return 8\n        if n == 9:\n            return 9\n        if n == 10:\n            return 10\n        if n == 11:\n            return 11\n        if n == 12:\n            return 12\n        if n == 13:\n            return 13\n        if n == 14:\n            return 14\n        if n == 15:\n            return 15\n        if n == 16:\n            return 16\n        if n == 17:\n            return 17\n        if n == 18:\n            return 18\n        if n == 19:\n            return 19\n        if n == 20:\n            return 20\n        if n == 21:\n            return 21\n        if n == 22:\n            "
    },
    {
        "number": 2369,
        "title": "Check if There is a Valid Partition For The Array",
        "difficulty": 1,
        "answer": "        n = len(nums)\n        if n == 0:\n            return True\n        if n == 1:\n            return True\n        if n == 2:\n            return nums[0] == nums[1]\n        if n == 3:\n            return nums[0] == nums[1] and nums[1] == nums[2]\n        if n == 4:\n            return nums[0] == nums[1] and nums[1] == nums[2] and nums[2] == nums[3]\n        if n == 5:\n            return nums[0] == nums[1] and nums[1] == nums[2] and nums[2] == nums[3] and nums[3] == nums[4]\n        if n == 6:\n            return nums[0] == nums[1] and nums[1] == nums[2] and nums[2] == nums[3] and nums[3] == nums[4] and nums[4] =="
    },
    {
        "number": 2370,
        "title": "Longest Ideal Subsequence",
        "difficulty": 1,
        "answer": "        if not s:\n            return 0\n        if len(s) == 1:\n            return 1\n        if len(s) == 2:\n            return 2\n        if len(s) == 3:\n            return 3\n        if len(s) == 4:\n            return 4\n        if len(s) == 5:\n            return 5\n        if len(s) == 6:\n            return 6\n        if len(s) == 7:\n            return 7\n        if len(s) == 8:\n            return 8\n        if len(s) == 9:\n            return 9\n        if len(s) == 10:\n            return 10\n        if len(s) == 11:\n            return 11\n        if len(s) == 12:\n            return 12\n        if len(s) == 13:\n            return 13\n        if len(s) == 14:\n            return 14\n        if len(s) == 15:\n            return 15\n        if len(s) == 16:\n            return 16\n        if len(s) == 17:\n            return 17\n        if"
    },
    {
        "number": 2373,
        "title": "Largest Local Values in a Matrix",
        "difficulty": 0,
        "answer": "        n = len(grid)\n        maxLocal = [[0] * (n - 2) for _ in range(n - 2)]\n        for i in range(n - 2):\n            for j in range(n - 2):\n                maxLocal[i][j] = max(grid[i + 1][j], grid[i + 1][j + 1], grid[i][j + 1])\n        return maxLocal"
    },
    {
        "number": 2374,
        "title": "Node With Highest Edge Score",
        "difficulty": 1,
        "answer": "        n = len(edges)\n        if n == 0:\n            return 0\n        max_score = edges[0]\n        for i in range(1, n):\n            max_score = max(max_score + edges[i], edges[i])\n        return max_score\n"
    },
    {
        "number": 2375,
        "title": "Construct Smallest Number From DI String",
        "difficulty": 1,
        "answer": "        n = len(pattern)\n        num = [0] * (n + 1)\n        for i in range(n):\n            if pattern[i] == 'I':\n                num[i] = 9\n            elif pattern[i] == 'D':\n                num[i] = 0\n            else:\n                num[i] = int(pattern[i]) - 1\n        num[n] = 9\n        return ''.join(map(str, num))\n"
    },
    {
        "number": 2376,
        "title": "Count Special Integers",
        "difficulty": 2,
        "answer": "        special = 0\n        for i in range(1, n+1):\n            if i == 1 or i == 11 or i == 22 or i == 114 or i == 131:\n                continue\n            for j in range(1, i):\n                if i % j == 0:\n                    break\n            else:\n                special += 1\n        return special\n"
    },
    {
        "number": 2379,
        "title": "Minimum Recolors to Get K Consecutive Black Blocks",
        "difficulty": 0,
        "answer": "        n = len(blocks)\n        if n == 0:\n            return 0\n        if k == 0:\n            return 0\n        if k > n:\n            return 0\n        if k == 1:\n            return 1\n        if k == 2:\n            return 2\n        if k == 3:\n            return 3\n        if k == 4:\n            return 4\n        if k == 5:\n            return 5\n        if k == 6:\n            return 6\n        if k == 7:\n            return 7\n        if k == 8:\n            return 8\n        if k == 9:\n            return 9\n        if k == 10:\n            return 10\n        if k == 11:\n            return 11\n        if k == 12:\n            return 12\n        if k == 13:\n            return 13\n        if k == 14:\n            return 14\n        if k == 15:\n            return 15\n        if k == 16:\n            return 16\n        if k == 17:\n            return 17\n        if k == 18:\n            return 18\n        if k == 19:\n            return 19\n"
    },
    {
        "number": 2380,
        "title": "Time Needed to Rearrange a Binary String",
        "difficulty": 1,
        "answer": "        count = 0\n        for i in range(len(s)):\n            if s[i] == '1':\n                count += 1\n            else:\n                count -= 1\n        return count\n"
    },
    {
        "number": 2381,
        "title": "Shifting Letters II",
        "difficulty": 1,
        "answer": "        ret = \"\"\n        for i in range(len(s)):\n            if shifts[i][0] < shifts[i][1]:\n                ret += s[shifts[i][0]:shifts[i][1]]\n            else:\n                ret += s[shifts[i][1]:shifts[i][0]]\n        return ret"
    },
    {
        "number": 2382,
        "title": "Maximum Segment Sum After Removals",
        "difficulty": 2,
        "answer": "        n = len(nums)\n        ans = [0] * n\n        for i in range(n):\n            ans[i] = max(ans[i], nums[i])\n        for i in range(n):\n            if i in removeQueries:\n                ans[i] = max(ans[i], ans[removeQueries[i]] - nums[i])\n        return ans\n"
    },
    {
        "number": 2383,
        "title": "Minimum Hours of Training to Win a Competition",
        "difficulty": 0,
        "answer": "        # O(n^2)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O"
    },
    {
        "number": 2384,
        "title": "Largest Palindromic Number",
        "difficulty": 1,
        "answer": "        # https://discuss.leetcode.com/topic/83561/java-solution-with-explanation\n        # https://discuss.leetcode.com/topic/83561/java-solution-with-explanation\n        # https://discuss.leetcode.com/topic/83561/java-solution-with-explanation\n        # https://discuss.leetcode.com/topic/83561/java-solution-with-explanation\n        # https://discuss.leetcode.com/topic/83561/java-solution-with-explanation\n        # https://discuss.leetcode.com/topic/83561/java-solution-with-explanation\n        # https://discuss.leetcode.com/topic/83561/java-solution-with-explanation\n        # https://discuss.leetcode.com/topic/83561/java-solution-with-explanation\n        # https://discuss.leetcode"
    },
    {
        "number": 2385,
        "title": "Amount of Time for Binary Tree to Be Infected",
        "difficulty": 1,
        "answer": "        if not root:\n            return 0\n        if start == 0:\n            return 1\n        if root.val == start:\n            return 1\n        if root.val == start - 1:\n            return 1\n        if root.val == start + 1:\n            return 1\n        if root.val == start - 2:\n            return 1\n        if root.val == start + 2:\n            return 1\n        if root.val == start - 3:\n            return 1\n        if root.val == start + 3:\n            return 1\n        if root.val == start - 4:\n            return 1\n        if root.val == start + 4:\n            return 1\n        if root.val == start - 5:\n            return 1\n        if root.val == start + 5:\n            return 1\n        if root.val == start - 6:\n            return 1\n        if root.val == start + 6:\n            return 1\n        if root.val == start - 7:\n            return 1\n        if root.val == start + 7:\n            return 1\n        if root.val =="
    },
    {
        "number": 2386,
        "title": "Find the K-Sum of an Array",
        "difficulty": 2,
        "answer": "        nums.sort()\n        ans = 0\n        for i in range(len(nums)):\n            ans += nums[i]\n            if i < len(nums) - 1 and nums[i] == nums[i + 1]:\n                ans += nums[i + 1]\n            if ans > k:\n                return ans\n        return ans\n"
    },
    {
        "number": 2389,
        "title": "Longest Subsequence With Limited Sum",
        "difficulty": 0,
        "answer": "        ans = []\n        for i in range(len(queries)):\n            ans.append(max(nums[:i]))\n        return ans\n"
    },
    {
        "number": 2390,
        "title": "Removing Stars From a String",
        "difficulty": 1,
        "answer": "        if not s:\n            return \"\"\n        l = len(s)\n        for i in range(l):\n            if s[i] == '*':\n                if i == 0 or s[i-1]!= '*':\n                    return s[:i] + s[i+1:]\n                else:\n                    return s[:i] + s[i+1:]\n        return s"
    },
    {
        "number": 2391,
        "title": "Minimum Amount of Time to Collect Garbage",
        "difficulty": 1,
        "answer": "        n = len(garbage)\n        dp = [0] * (n + 1)\n        dp[0] = 0\n        for i in range(1, n + 1):\n            dp[i] = dp[i - 1] + travel[i - 1]\n        for i in range(1, n + 1):\n            dp[i] = min(dp[i], dp[i - 1] + travel[i - 1])\n        return dp[n]"
    },
    {
        "number": 2392,
        "title": "Build a Matrix With Conditions",
        "difficulty": 2,
        "answer": "        n = len(rowConditions)\n        m = len(colConditions)\n        matrix = [[0 for _ in range(m)] for _ in range(n)]\n        for i in range(n):\n            for j in range(m):\n                if rowConditions[i][0] <= j <= rowConditions[i][1] and colConditions[j][0] <= i <= colConditions[j][1]:\n                    matrix[i][j] = 1\n        return matrix"
    },
    {
        "number": 2395,
        "title": "Find Subarrays With Equal Sum",
        "difficulty": 0,
        "answer": "        if not nums:\n            return False\n        nums.sort()\n        for i in range(1, len(nums)):\n            if nums[i] == nums[i-1]:\n                continue\n            if nums[i] + nums[i-1] == nums[i-1] + nums[i]:\n                return True\n        return False\n"
    },
    {
        "number": 2396,
        "title": "Strictly Palindromic Number",
        "difficulty": 1,
        "answer": "        if n < 2:\n            return False\n        if n == 2:\n            return True\n        if n % 2 == 0:\n            return self.isStrictlyPalindromic(n / 2)\n        else:\n            return not self.isStrictlyPalindromic(n / 2)"
    },
    {
        "number": 2397,
        "title": "Maximum Rows Covered by Columns",
        "difficulty": 1,
        "answer": "        n = len(matrix)\n        m = len(matrix[0])\n        if numSelect == 0:\n            return 0\n        if numSelect == 1:\n            return n\n        if numSelect == 2:\n            return n + m - 1\n        if numSelect == 3:\n            return n + m - 1 + n - 1\n        if numSelect == 4:\n            return n + m - 1 + n - 1 + n - 1\n        if numSelect == 5:\n            return n + m - 1 + n - 1 + n - 1 + n - 1\n        if numSelect == 6:\n            return n + m - 1 + n - 1 + n - 1 + n - 1 + n - 1\n        if numSelect == 7:\n            return n + m - 1 + n - 1 + n - 1 + n - 1 + n - 1 + n - 1\n        if numSelect == 8:\n            return n + m - 1 + n - 1 + n - 1 + n - 1 + n - 1 + n - 1 + n - 1\n        if numSelect == 9:\n            return"
    },
    {
        "number": 2398,
        "title": "Maximum Number of Robots Within Budget",
        "difficulty": 2,
        "answer": "        n = len(chargeTimes)\n        if n == 0:\n            return 0\n        if n == 1:\n            return 1\n        if n == 2:\n            return 2\n        if n == 3:\n            return 3\n        if n == 4:\n            return 4\n        if n == 5:\n            return 5\n        if n == 6:\n            return 6\n        if n == 7:\n            return 7\n        if n == 8:\n            return 8\n        if n == 9:\n            return 9\n        if n == 10:\n            return 10\n        if n == 11:\n            return 11\n        if n == 12:\n            return 12\n        if n == 13:\n            return 13\n        if n == 14:\n            return 14\n        if n == 15:\n            return 15\n        if n == 16:\n            return 16\n        if n == 17:\n            return 17\n        if n == 18:\n            return 18\n        if n == 19:\n            return 19\n        if n == 20:\n            return 20\n        if n == 21:\n            return 21"
    },
    {
        "number": 2399,
        "title": "Check Distances Between Same Letters",
        "difficulty": 0,
        "answer": "        if len(distance)!= 26:\n            return False\n        for i in range(len(distance)):\n            if distance[i] > 0 and distance[i] < len(s):\n                return False\n        return True\n"
    },
    {
        "number": 2400,
        "title": "Number of Ways to Reach a Position After Exactly k Steps",
        "difficulty": 1,
        "answer": "        if startPos > endPos:\n            return 0\n        if startPos == endPos:\n            return 1\n        if startPos == endPos - 1:\n            return k\n        if startPos == endPos - 2:\n            return k * 2\n        if startPos == endPos - 3:\n            return k * 3\n        if startPos == endPos - 4:\n            return k * 4\n        if startPos == endPos - 5:\n            return k * 5\n        if startPos == endPos - 6:\n            return k * 6\n        if startPos == endPos - 7:\n            return k * 7\n        if startPos == endPos - 8:\n            return k * 8\n        if startPos == endPos - 9:\n            return k * 9\n        if startPos == endPos - 10:\n            return k * 10\n        if startPos == endPos - 11:\n            return k * 11\n        if startPos == endPos - 12:\n            return k * 12\n        if startPos == endPos - 13:\n            return k * 13\n        if startPos =="
    },
    {
        "number": 2401,
        "title": "Longest Nice Subarray",
        "difficulty": 1,
        "answer": "        n = len(nums)\n        if n == 0:\n            return 0\n        dp = [0] * (n + 1)\n        dp[0] = 1\n        for i in range(1, n + 1):\n            for j in range(i):\n                dp[i] = max(dp[i], dp[j] + 1)\n        return dp[n]"
    },
    {
        "number": 2402,
        "title": "Meeting Rooms III",
        "difficulty": 2,
        "answer": "        # dp[i][j] = max(dp[i-1][j], dp[i-1][j-1])\n        dp = [[0 for j in range(n+1)] for i in range(n+1)]\n        for i in range(1, n+1):\n            for j in range(1, n+1):\n                if meetings[i-1][0] <= j <= meetings[i-1][1]:\n                    dp[i][j] = max(dp[i-1][j], dp[i-1][j-1])\n                else:\n                    dp[i][j] = 0\n        return dp[n][n]"
    },
    {
        "number": 2404,
        "title": "Most Frequent Even Element",
        "difficulty": 0,
        "answer": "        n = len(nums)\n        if n == 0:\n            return -1\n        if n == 1:\n            return nums[0]\n        if n == 2:\n            return nums[0] if nums[0] % 2 == 0 else nums[1]\n        if n == 3:\n            return nums[0] if nums[0] % 2 == 0 else nums[1] if nums[1] % 2 == 0 else nums[2]\n        if n == 4:\n            return nums[0] if nums[0] % 2 == 0 else nums[1] if nums[1] % 2 == 0 else nums[2] if nums[2] % 2 == 0 else nums[3]\n        if n == 5:\n            return nums[0] if nums[0] % 2 == 0 else nums[1] if nums[1] % 2 == 0 else nums[2] if nums[2] % 2 == 0 else nums[3] if nums[3] % 2 == 0 else"
    },
    {
        "number": 2405,
        "title": "Optimal Partition of String",
        "difficulty": 1,
        "answer": "        # DP\n        dp = [1] * len(s)\n        for i in range(1, len(s)):\n            for j in range(i):\n                if s[i] == s[j]:\n                    dp[i] = min(dp[i], dp[j] + 1)\n        return dp[-1]"
    },
    {
        "number": 2406,
        "title": "Divide Intervals Into Minimum Number of Groups",
        "difficulty": 1,
        "answer": "        if not intervals:\n            return 0"
    },
    {
        "number": 2407,
        "title": "Longest Increasing Subsequence II",
        "difficulty": 2,
        "answer": "        n = len(nums)\n        if n == 0:\n            return 0\n        dp = [1] * n\n        for i in range(1, n):\n            dp[i] = max(dp[i - 1], dp[i - k] + 1)\n        return dp[-1]\n"
    },
    {
        "number": 2409,
        "title": "Count Days Spent Together",
        "difficulty": 0,
        "answer": "        days = 0\n        for i in range(len(arriveAlice)):\n            if arriveAlice[i] == leaveAlice[i]:\n                days += 1\n        for i in range(len(arriveBob)):\n            if arriveBob[i] == leaveBob[i]:\n                days += 1\n        return days\n"
    },
    {
        "number": 2410,
        "title": "Maximum Matching of Players With Trainers",
        "difficulty": 1,
        "answer": "        n = len(players)\n        ans = 0\n        for i in range(n):\n            for j in range(n):\n                if players[i] <= trainers[j]:\n                    ans += 1\n        return ans\n"
    },
    {
        "number": 2411,
        "title": "Smallest Subarrays With Maximum Bitwise OR",
        "difficulty": 1,
        "answer": "        nums = sorted(nums)\n        ans = []\n        for i in range(len(nums)):\n            max_or = nums[i]\n            for j in range(i + 1, len(nums)):\n                max_or = max(max_or, nums[j] | nums[i])\n            ans.append(max_or)\n        return ans\n"
    },
    {
        "number": 2412,
        "title": "Minimum Money Required Before Transactions",
        "difficulty": 2,
        "answer": "        n = len(transactions)\n        dp = [[0] * n for _ in range(n)]\n        for i in range(n):\n            dp[i][i] = transactions[i][0]\n        for i in range(n - 1, -1, -1):\n            for j in range(i + 1, n):\n                dp[i][j] = min(dp[i][j], dp[i][j - 1] + transactions[i][1])\n        return dp[0][n - 1]\n"
    },
    {
        "number": 2413,
        "title": "Smallest Even Multiple",
        "difficulty": 0,
        "answer": "        while n % 2 == 0:\n            n /= 2\n        while n % 5 == 0:\n            n /= 5\n        return n\n"
    },
    {
        "number": 2414,
        "title": "Length of the Longest Alphabetical Continuous Substring",
        "difficulty": 1,
        "answer": "        if not s:\n            return 0\n        n = len(s)\n        dp = [0] * (n + 1)\n        for i in range(1, n + 1):\n            dp[i] = i\n        for i in range(1, n + 1):\n            for j in range(i, n + 1):\n                if s[i - 1] == s[j - 1]:\n                    dp[i] = max(dp[i], dp[j] + 1)\n        return dp[n]"
    },
    {
        "number": 2415,
        "title": "Reverse Odd Levels of Binary Tree",
        "difficulty": 1,
        "answer": "        if not root:\n            return None\n        if not root.left and not root.right:\n            return root\n        return self.reverseOddLevels(root.left) if root.left else self.reverseOddLevels(root.right)"
    },
    {
        "number": 2416,
        "title": "Sum of Prefix Scores of Strings",
        "difficulty": 2,
        "answer": "        ans = [0] * len(words)\n        for i in range(len(words)):\n            for j in range(i+1, len(words)):\n                if words[i] == words[j]:\n                    ans[i] += ans[j]\n        return ans"
    },
    {
        "number": 2418,
        "title": "Sort the People",
        "difficulty": 0,
        "answer": "        names.sort(key=lambda x: (x, -heights.index(x)))\n        return names\n"
    },
    {
        "number": 2419,
        "title": "Longest Subarray With Maximum Bitwise AND",
        "difficulty": 1,
        "answer": "        n = len(nums)\n        if n == 0:\n            return 0\n        dp = [0] * (n + 1)\n        dp[0] = 0\n        for i in range(1, n + 1):\n            dp[i] = max(dp[i - 1], nums[i - 1] & dp[i - 2])\n        return dp[n]"
    },
    {
        "number": 2420,
        "title": "Find All Good Indices",
        "difficulty": 1,
        "answer": "        ret = []\n        for i in range(len(nums) - k + 1):\n            if i == 0 or nums[i - 1] < nums[i]:\n                ret.append(i)\n        return ret\n"
    },
    {
        "number": 2421,
        "title": "Number of Good Paths",
        "difficulty": 2,
        "answer": "        if not vals or not edges:\n            return 0\n        n = len(vals)\n        ans = 0\n        for i in range(n):\n            for j in range(i + 1, n):\n                if vals[i] == vals[j] and edges[i][0]!= edges[j][0] and edges[i][1]!= edges[j][1]:\n                    ans += 1\n        return ans\n"
    },
    {
        "number": 2423,
        "title": "Remove Letter To Equalize Frequency",
        "difficulty": 0,
        "answer": "        # dp[i][j] = dp[i-1][j] + dp[i][j-1]\n        # dp[i][j] = dp[i-1][j] + dp[i][j-1]\n        # dp[i][j] = dp[i-1][j] + dp[i][j-1]\n        # dp[i][j] = dp[i-1][j] + dp[i][j-1]\n        # dp[i][j] = dp[i-1][j] + dp[i][j-1]\n        # dp[i][j] = dp[i-1][j] + dp[i][j-1]\n        # dp[i][j] = dp[i-1][j] + dp[i][j-1]\n        # dp[i][j] = dp[i-1][j] + dp[i][j-1]\n        # dp[i][j] ="
    },
    {
        "number": 2424,
        "title": "Longest Uploaded Prefix",
        "difficulty": 1,
        "answer": "    def longest_prefix(self, video: int) -> int:\n        \"\"\"\n        You are given a stream of n videos, each represented by a distinct number from 1 to n that you need to \"upload\" to a server. You need to implement a data structure that calculates the length of the longest uploaded prefix at various points in the upload process.\n        We consider i to be an uploaded prefix if all videos in the range 1 to i (inclusive) have been uploaded to the server. The longest uploaded prefix is the maximum value of i that satisfies this definition.\n        Implement the LUPrefix class:\n            LUPrefix(int n) Initializes the object for a stream of n videos.\n            void upload(int video) Uploads video to the server.\n            int longest() Returns the length of the longest uploaded prefix defined above.\n        Example 1:\n        Input\n        [\"LUPrefix\", \"upload\", \"longest\", \"upload\", \"longest\"]\n        [[4], [3], [], [1], []]\n        Output\n        [null, null, 0, null, 3]\n        Explanation\n        "
    },
    {
        "number": 2425,
        "title": "Bitwise XOR of All Pairings",
        "difficulty": 1,
        "answer": "        nums3 = [0] * len(nums1)\n        for i in range(len(nums1)):\n            nums3[i] = nums1[i] ^ nums2[i]\n        return sum(nums3)\n"
    },
    {
        "number": 2426,
        "title": "Number of Pairs Satisfying Inequality",
        "difficulty": 2,
        "answer": "        n = len(nums1)\n        ans = 0\n        for i in range(n):\n            for j in range(i + 1, n):\n                if nums1[i] - nums1[j] <= nums2[i] - nums2[j] + diff:\n                    ans += 1\n        return ans\n"
    },
    {
        "number": 2427,
        "title": "Number of Common Factors",
        "difficulty": 0,
        "answer": "        if a == 0 or b == 0:\n            return 0\n        if a == b:\n            return 1\n        if a < b:\n            a, b = b, a\n        if a % b == 0:\n            return 1\n        return self.commonFactors(a % b, b)"
    },
    {
        "number": 2428,
        "title": "Maximum Sum of an Hourglass",
        "difficulty": 1,
        "answer": "        m, n = len(grid), len(grid[0])\n        if m == 0 or n == 0:\n            return 0\n        if m == 1 or n == 1:\n            return grid[0][0]\n        if m == 2 or n == 2:\n            return max(grid[0][0], grid[1][0])\n        if m == 3 or n == 3:\n            return max(grid[0][0], max(grid[1][0], grid[2][0]))\n        if m == 4 or n == 4:\n            return max(grid[0][0], max(grid[1][0], max(grid[2][0], grid[3][0])))\n        if m == 5 or n == 5:\n            return max(grid[0][0], max(grid[1][0], max(grid[2][0], max(grid[3][0], max(grid[4][0], grid[5][0]))))\n        if m == 6 or n == 6:\n            return max(grid[0][0], max(grid[1][0"
    },
    {
        "number": 2429,
        "title": "Minimize XOR",
        "difficulty": 1,
        "answer": "        # Brute force\n        # dp[i][j] = min(dp[i - 1][j], dp[i - 1][j - 1])\n        # dp[i][j] = min(dp[i][j - 1], dp[i - 1][j])\n        # dp[i][j] = min(dp[i][j - 1], dp[i - 1][j])\n        # dp[i][j] = min(dp[i][j - 1], dp[i - 1][j])\n        # dp[i][j] = min(dp[i][j - 1], dp[i - 1][j])\n        # dp[i][j] = min(dp[i][j - 1], dp[i - 1][j])\n        # dp[i][j] = min(dp[i][j - 1], dp[i - 1][j])\n        # dp[i][j] = min(dp[i][j - 1], dp[i - 1][j])\n        #"
    },
    {
        "number": 2430,
        "title": "Maximum Deletions on a String",
        "difficulty": 2,
        "answer": "        if not s:\n            return 0\n        n = len(s)\n        if n == 1:\n            return 0\n        if n == 2:\n            return 1\n        if n == 3:\n            return 2\n        if n == 4:\n            return 3\n        if n == 5:\n            return 4\n        if n == 6:\n            return 5\n        if n == 7:\n            return 6\n        if n == 8:\n            return 7\n        if n == 9:\n            return 8\n        if n == 10:\n            return 9\n        if n == 11:\n            return 10\n        if n == 12:\n            return 11\n        if n == 13:\n            return 12\n        if n == 14:\n            return 13\n        if n == 15:\n            return 14\n        if n == 16:\n            return 15\n        if n == 17:\n            return 16\n        if n == 18:\n            return 17\n        if n == 19:\n            return 18\n        if n == 20:\n            return 19\n        if n == 21:\n            return 20\n        "
    },
    {
        "number": 2432,
        "title": "The Employee That Worked on the Longest Task",
        "difficulty": 0,
        "answer": "        if n == 0:\n            return 0\n        if n == 1:\n            return logs[0][0]\n        if n == 2:\n            return min(logs[0][0], logs[1][0])\n        if n == 3:\n            return min(logs[0][0], min(logs[1][0], logs[2][0]))\n        if n == 4:\n            return min(logs[0][0], min(logs[1][0], min(logs[2][0], logs[3][0])))\n        if n == 5:\n            return min(logs[0][0], min(logs[1][0], min(logs[2][0], min(logs[3][0], logs[4][0]))))\n        if n == 6:\n            return min(logs[0][0], min(logs[1][0], min(logs[2][0], min(logs[3][0], min(logs[4][0], logs[5][0]))))\n        if n =="
    },
    {
        "number": 2433,
        "title": "Find The Original Array of Prefix Xor",
        "difficulty": 1,
        "answer": "        n = len(pref)\n        arr = [0] * n\n        for i in range(n):\n            arr[i] = pref[i] ^ (arr[i - 1] ^ arr[i - 2] ^... ^ arr[i - n])\n        return arr\n"
    },
    {
        "number": 2434,
        "title": "Using a Robot to Print the Lexicographically Smallest String",
        "difficulty": 1,
        "answer": "        # DP\n        # dp[i][j] = min(dp[i-1][j], dp[i-1][j-1], dp[i-1][j-2])\n        # dp[i][j] = min(dp[i-1][j], dp[i-1][j-1], dp[i-1][j-2], dp[i-2][j-1])\n        # dp[i][j] = min(dp[i-1][j], dp[i-1][j-1], dp[i-1][j-2], dp[i-2][j-1], dp[i-2][j-2])\n        # dp[i][j] = min(dp[i-1][j], dp[i-1][j-1], dp[i-1][j-2], dp[i-2][j-1], dp[i-2][j-2], dp[i-2][j-3])\n        # dp[i][j"
    },
    {
        "number": 2435,
        "title": "Paths in Matrix Whose Sum Is Divisible by K",
        "difficulty": 2,
        "answer": "        if not grid or not k:\n            return 0\n        m, n = len(grid), len(grid[0])\n        dp = [[0] * n for _ in range(m)]\n        for i in range(m):\n            for j in range(n):\n                if grid[i][j] == 0:\n                    continue\n                dp[i][j] = 1\n                if i > 0 and grid[i - 1][j] == 0:\n                    dp[i][j] += dp[i - 1][j]\n                if j > 0 and grid[i][j - 1] == 0:\n                    dp[i][j] += dp[i][j - 1]\n                if i < m - 1 and grid[i + 1][j] == 0:\n                    dp[i][j] += dp[i + 1][j]\n                if j < n - 1 and grid[i][j + 1] == 0:\n                    dp[i][j] += dp[i][j + 1]\n        return dp[m - 1][n - 1] %"
    },
    {
        "number": 2437,
        "title": "Number of Valid Clock Times",
        "difficulty": 0,
        "answer": "        ans = 0\n        for i in range(len(time)):\n            if time[i] == '?':\n                ans += 1\n        return ans\n"
    },
    {
        "number": 2438,
        "title": "Range Product Queries of Powers",
        "difficulty": 1,
        "answer": "        answers = [1]\n        for i in range(1, n+1):\n            answers.append(answers[i-1] * 2)\n            answers.append(answers[i-1] * 4)\n            answers.append(answers[i-1] * 8)\n            answers.append(answers[i-1] * 16)\n            answers.append(answers[i-1] * 32)\n            answers.append(answers[i-1] * 64)\n            answers.append(answers[i-1] * 128)\n            answers.append(answers[i-1] * 256)\n            answers.append(answers[i-1] * 512)\n            answers.append(answers[i-1] * 1024)\n            answers.append(answers[i-1] * 2048)\n            answers.append(answers[i-1] * 4096)\n"
    },
    {
        "number": 2439,
        "title": "Minimize Maximum of Array",
        "difficulty": 1,
        "answer": "        n = len(nums)\n        if n == 0:\n            return 0\n        if n == 1:\n            return nums[0]\n        if n == 2:\n            return min(nums[0], nums[1])\n        if n == 3:\n            return min(nums[0], min(nums[1], nums[2]))\n        if n == 4:\n            return min(nums[0], min(nums[1], min(nums[2], nums[3])))\n        if n == 5:\n            return min(nums[0], min(nums[1], min(nums[2], min(nums[3], nums[4]))))\n        if n == 6:\n            return min(nums[0], min(nums[1], min(nums[2], min(nums[3], min(nums[4], nums[5]))))\n        if n == 7:\n            return min(nums[0], min(nums[1], min(nums[2], min"
    },
    {
        "number": 2440,
        "title": "Create Components With Same Value",
        "difficulty": 2,
        "answer": "        n = len(nums)\n        if n == 0:\n            return 0\n        if n == 1:\n            return nums[0]\n        dp = [0] * (n + 1)\n        for i in range(n):\n            dp[i] = nums[i]\n        for i in range(n):\n            for j in range(i + 1, n):\n                if edges[i][0] == edges[j][0] and edges[i][1] == edges[j][1]:\n                    dp[j] = max(dp[j], dp[i] + nums[j])\n        return max(dp)\n"
    },
    {
        "number": 2441,
        "title": "Largest Positive Integer That Exists With Its Negative",
        "difficulty": 0,
        "answer": "        n = len(nums)\n        if n == 0:\n            return -1\n        max_k = -1\n        for i in range(n):\n            if nums[i] > 0:\n                max_k = max(max_k, nums[i])\n            else:\n                max_k = max(max_k, -nums[i])\n        return max_k\n"
    },
    {
        "number": 2442,
        "title": "Count Number of Distinct Integers After Reverse Operations",
        "difficulty": 1,
        "answer": "        nums.sort()\n        return len(set(nums))\n"
    },
    {
        "number": 2443,
        "title": "Sum of Number and Its Reverse",
        "difficulty": 1,
        "answer": "        if num < 0:\n            return False\n        if num == 0:\n            return True\n        if num == 1:\n            return True\n        if num == 2:\n            return True\n        if num == 3:\n            return True\n        if num == 4:\n            return True\n        if num == 5:\n            return True\n        if num == 6:\n            return True\n        if num == 7:\n            return True\n        if num == 8:\n            return True\n        if num == 9:\n            return True\n        if num == 10:\n            return True\n        if num == 11:\n            return True\n        if num == 12:\n            return True\n        if num == 13:\n            return True\n        if num == 14:\n            return True\n        if num == 15:\n            return True\n        if num == 16:\n            return True\n        if num == 17:\n            return True\n        if num == 18:\n            return True\n        if num == 19:\n            return True\n        if num == 20:\n            return True\n        if num == 21:\n            "
    },
    {
        "number": 2444,
        "title": "Count Subarrays With Fixed Bounds",
        "difficulty": 2,
        "answer": "        if not nums:\n            return 0\n        n = len(nums)\n        res = 0\n        for i in range(n):\n            if nums[i] >= minK and nums[i] <= maxK:\n                res += 1\n        return res\n"
    },
    {
        "number": 2446,
        "title": "Determine if Two Events Have Conflict",
        "difficulty": 0,
        "answer": "        if len(event1)!= len(event2):\n            return False"
    },
    {
        "number": 2447,
        "title": "Number of Subarrays With GCD Equal to K",
        "difficulty": 1,
        "answer": "        n = len(nums)\n        if n == 0:\n            return 0\n        if k == 1:\n            return 1\n        if k == 2:\n            return n\n        if k == 3:\n            return n * (n - 1) // 2\n        if k == 4:\n            return n * (n - 1) // 2 + n * (n - 1) // 3\n        if k == 5:\n            return n * (n - 1) // 2 + n * (n - 1) // 3 + n * (n - 1) // 4\n        if k == 6:\n            return n * (n - 1) // 2 + n * (n - 1) // 3 + n * (n - 1) // 4 + n * (n - 1) // 5\n        if k == 7:\n            return n * (n - 1) // 2 + n * (n - 1) // 3 + n * (n - 1) // 4 + n * (n - 1) // 5 + n * (n - 1) // 6\n        if k == 8:\n            return n * (n"
    },
    {
        "number": 2448,
        "title": "Minimum Cost to Make Array Equal",
        "difficulty": 2,
        "answer": "        n = len(nums)\n        if n == 0:\n            return 0\n        if n == 1:\n            return cost[0]\n        if n == 2:\n            return min(cost[0], cost[1])\n        if n == 3:\n            return min(cost[0], min(cost[1], cost[2]))\n        if n == 4:\n            return min(cost[0], min(cost[1], min(cost[2], cost[3])))\n        if n == 5:\n            return min(cost[0], min(cost[1], min(cost[2], min(cost[3], cost[4]))))\n        if n == 6:\n            return min(cost[0], min(cost[1], min(cost[2], min(cost[3], min(cost[4], cost[5]))))\n        if n == 7:\n            return min(cost[0], min(cost[1], min(cost[2], min(cost[3], min(cost[4], min(cost[5], cost[6]))))))\n"
    },
    {
        "number": 2449,
        "title": "Minimum Number of Operations to Make Arrays Similar",
        "difficulty": 2,
        "answer": "        n = len(nums)\n        m = len(target)\n        if n!= m:\n            return 0\n        dp = [[0] * (m + 1) for _ in range(n + 1)]\n        for i in range(n):\n            for j in range(m):\n                if nums[i] == target[j]:\n                    dp[i + 1][j + 1] = dp[i][j] + 1\n                else:\n                    dp[i + 1][j + 1] = max(dp[i][j + 1], dp[i + 1][j])\n        return dp[n][m]"
    },
    {
        "number": 2451,
        "title": "Odd String Difference",
        "difficulty": 0,
        "answer": "        if not words:\n            return \"\"\n        n = len(words[0])\n        for i in range(1, len(words)):\n            if words[i][0]!= words[i-1][n-1]:\n                return words[i-1]\n        return words[-1]\n"
    },
    {
        "number": 2452,
        "title": "Words Within Two Edits of Dictionary",
        "difficulty": 1,
        "answer": "        ret = []\n        for q in queries:\n            for d in dictionary:\n                if q == d:\n                    ret.append(q)\n        return ret\n"
    },
    {
        "number": 2453,
        "title": "Destroy Sequential Targets",
        "difficulty": 1,
        "answer": "        n = len(nums)\n        if n == 0:\n            return 0\n        if n == 1:\n            return nums[0]\n        if n == 2:\n            return min(nums[0], nums[1])\n        if n == 3:\n            return min(nums[0], nums[1], nums[2])\n        if n == 4:\n            return min(nums[0], nums[1], nums[2], nums[3])\n        if n == 5:\n            return min(nums[0], nums[1], nums[2], nums[3], nums[4])\n        if n == 6:\n            return min(nums[0], nums[1], nums[2], nums[3], nums[4], nums[5])\n        if n == 7:\n            return min(nums[0], nums[1], nums[2], nums[3], nums[4], nums[5], nums[6])\n        if n == 8:\n            "
    },
    {
        "number": 2454,
        "title": "Next Greater Element IV",
        "difficulty": 2,
        "answer": "        ans = []\n        for i in range(len(nums)):\n            if i == 0:\n                ans.append(nums[i])\n            else:\n                if nums[i] > nums[i - 1]:\n                    ans.append(nums[i])\n                else:\n                    ans.append(-1)\n        return ans\n"
    },
    {
        "number": 2455,
        "title": "Average Value of Even Numbers That Are Divisible by Three",
        "difficulty": 0,
        "answer": "        return sum(nums) / len(nums) if len(nums) > 0 else 0"
    },
    {
        "number": 2456,
        "title": "Most Popular Video Creator",
        "difficulty": 1,
        "answer": "        ans = []\n        for i in range(len(creators)):\n            for j in range(len(creators)):\n                if i!= j:\n                    if creators[i] == creators[j]:\n                        if views[i] > views[j]:\n                            ans.append([creators[i], ids[j]])\n                        elif views[i] < views[j]:\n                            ans.append([creators[j], ids[i]])\n                        else:\n                            ans.append([creators[i], ids[i]])\n        return ans\n"
    },
    {
        "number": 2457,
        "title": "Minimum Addition to Make Integer Beautiful",
        "difficulty": 1,
        "answer": "        # base case\n        if n == 0:\n            return 0\n        # base case\n        if n == 1:\n            return 1\n        # base case\n        if n == target:\n            return 1\n        # base case\n        if n == 2:\n            return 2\n        # base case\n        if n == 3:\n            return 3\n        # base case\n        if n == 4:\n            return 4\n        # base case\n        if n == 5:\n            return 5\n        # base case\n        if n == 6:\n            return 6\n        # base case\n        if n == 7:\n            return 7\n        # base case\n        if n == 8:\n            return 8\n        # base case\n        if n == 9:\n            return 9\n        # base case\n        if n == 10:\n            return 10\n        # base case\n        if n == 11:\n            return 11\n        # base case\n        if n == 12:\n            return 12\n        # base case\n        if n == 13:\n            return 13\n        # base case\n        if n == 14"
    },
    {
        "number": 2458,
        "title": "Height of Binary Tree After Subtree Removal Queries",
        "difficulty": 2,
        "answer": "        if not root:\n            return []\n        ans = []\n        q = queries\n        while q:\n            ans.append(self.height(root))\n            root = self.remove(root, q.pop())\n        return ans"
    },
    {
        "number": 2460,
        "title": "Apply Operations to an Array",
        "difficulty": 0,
        "answer": "        n = len(nums)\n        if n == 0:\n            return nums\n        if n == 1:\n            return [nums[0] * 2, 0]\n        if n == 2:\n            return [nums[0] * 2, 0, nums[1] * 2, 0]\n        if n == 3:\n            return [nums[0] * 2, 0, nums[1] * 2, 0, nums[2] * 2, 0]\n        if n == 4:\n            return [nums[0] * 2, 0, nums[1] * 2, 0, nums[2] * 2, 0, nums[3] * 2, 0]\n        if n == 5:\n            return [nums[0] * 2, 0, nums[1] * 2, 0, nums[2] * 2, 0, nums[3] * 2, 0, nums[4] * 2, 0]\n        if n == 6:\n            return [nums[0] * 2, 0, nums[1"
    },
    {
        "number": 2461,
        "title": "Maximum Sum of Distinct Subarrays With Length K",
        "difficulty": 1,
        "answer": "        nums_len = len(nums)\n        if nums_len == 0:\n            return 0\n        if k > nums_len:\n            return 0\n        if k == 1:\n            return nums[0]\n        if k == 2:\n            return max(nums[0], nums[1])\n        if k == 3:\n            return max(nums[0], max(nums[1], nums[2]))\n        if k == 4:\n            return max(nums[0], max(nums[1], max(nums[2], nums[3])))\n        if k == 5:\n            return max(nums[0], max(nums[1], max(nums[2], max(nums[3], nums[4]))))\n        if k == 6:\n            return max(nums[0], max(nums[1], max(nums[2], max(nums[3], max(nums[4], nums[5]))))\n        if k == 7:\n            return max("
    },
    {
        "number": 2462,
        "title": "Total Cost to Hire K Workers",
        "difficulty": 1,
        "answer": "        total = 0\n        for i in range(k):\n            total += costs[i]\n            if i == 0:\n                total += min(costs[i], costs[i+1])\n            elif i == k-1:\n                total += min(costs[i], costs[i-1])\n            else:\n                total += min(costs[i], costs[i-1], costs[i+1])\n        return total"
    },
    {
        "number": 2463,
        "title": "Minimum Total Distance Traveled",
        "difficulty": 2,
        "answer": "        n = len(robot)\n        if n == 0:\n            return 0\n        m = len(factory)\n        if m == 0:\n            return n"
    },
    {
        "number": 2465,
        "title": "Number of Distinct Averages",
        "difficulty": 0,
        "answer": "        nums.sort()\n        return len(set(nums))\n"
    },
    {
        "number": 2466,
        "title": "Count Ways To Build Good Strings",
        "difficulty": 1,
        "answer": "        return (high - low + 1) * (high - low + 1) // 2 + (high - low + 1) * (high - low + 1) // 2 - (high - low + 1) * (high - low + 1) // 2 - (high - low + 1) * (high - low + 1) // 2 + (high - low + 1) * (high - low + 1) // 2 + (high - low + 1) * (high - low + 1) // 2 + (high - low + 1) * (high - low + 1) // 2 + (high - low + 1) * (high - low + 1) // 2 + (high - low + 1) * (high - low + 1) // 2 + (high - low + 1) * (high - low + 1) // 2 + (high - low + 1) * (high - low + 1) // 2 + (high - low + 1) * (high - low + 1) // 2 + (high - low + 1) * (high - low + 1) // 2 + (high - low + 1) * (high - low + 1"
    },
    {
        "number": 2467,
        "title": "Most Profitable Path in a Tree",
        "difficulty": 1,
        "answer": "        n = len(edges)\n        dp = [[0 for _ in range(n)] for _ in range(n)]\n        dp[0][0] = amount[0]\n        for i in range(1, n):\n            for j in range(0, i):\n                dp[i][j] = max(dp[i - 1][j] + amount[i], dp[i][j - 1] + amount[i])\n        return dp[n - 1][n - 1]\n"
    },
    {
        "number": 2468,
        "title": "Split Message Based on Limit",
        "difficulty": 2,
        "answer": "        result = []\n        for i in range(0, len(message), limit):\n            result.append(message[i:i+limit])\n        return result\n"
    },
    {
        "number": 2469,
        "title": "Convert the Temperature",
        "difficulty": 0,
        "answer": "        ans = []\n        ans.append(round(celsius + 273.15, 2))\n        ans.append(round(celsius * 1.80 + 32.00, 2))\n        return ans\n"
    },
    {
        "number": 2470,
        "title": "Number of Subarrays With LCM Equal to K",
        "difficulty": 1,
        "answer": "        nums_len = len(nums)\n        if nums_len == 0:\n            return 0\n        if nums_len == 1:\n            return 1\n        if nums_len == 2:\n            return nums[0] == nums[1] and 1 or 0\n        if nums_len == 3:\n            return nums[0] == nums[1] and nums[2] == nums[3] and 2 or 0\n        if nums_len == 4:\n            return nums[0] == nums[1] and nums[2] == nums[3] and nums[4] == nums[4] and 3 or 0\n        if nums_len == 5:\n            return nums[0] == nums[1] and nums[2] == nums[3] and nums[4] == nums[4] and nums[5] == nums[5] and 5 or 0\n        if nums_len == 6:\n            return nums[0] == nums[1] and nums"
    },
    {
        "number": 2471,
        "title": "Minimum Number of Operations to Sort a Binary Tree by Level",
        "difficulty": 1,
        "answer": "        if not root:\n            return 0"
    },
    {
        "number": 2472,
        "title": "Maximum Number of Non-overlapping Palindrome Substrings",
        "difficulty": 2,
        "answer": "        # DP\n        # dp[i][j] = max(dp[i-1][j], dp[i-1][j-1]) + 1\n        # dp[i][j] = max(dp[i-1][j], dp[i-1][j-1]) + 1\n        # dp[i][j] = max(dp[i-1][j], dp[i-1][j-1]) + 1\n        # dp[i][j] = max(dp[i-1][j], dp[i-1][j-1]) + 1\n        # dp[i][j] = max(dp[i-1][j], dp[i-1][j-1]) + 1\n        # dp[i][j] = max(dp[i-1][j], dp[i-1][j-1]) + 1\n        # dp[i][j] = max(dp[i-1][j], dp[i-1][j-1]) + 1\n        # dp[i][j"
    },
    {
        "number": 2475,
        "title": "Number of Unequal Triplets in Array",
        "difficulty": 0,
        "answer": "        nums.sort()\n        return sum(1 for i in range(len(nums)) if i > 0 and nums[i] == nums[i-1])\n"
    },
    {
        "number": 2476,
        "title": "Closest Nodes Queries in a Binary Search Tree",
        "difficulty": 1,
        "answer": "        ans = []\n        if not root:\n            return ans\n        ans.append([-1, -1])\n        ans.append([-1, -1])\n        ans.append([-1, -1])\n        ans.append([-1, -1])\n        ans.append([-1, -1])\n        ans.append([-1, -1])\n        ans.append([-1, -1])\n        ans.append([-1, -1])\n        ans.append([-1, -1])\n        ans.append([-1, -1])\n        ans.append([-1, -1])\n        ans.append([-1, -1])\n        ans.append([-1, -1])\n        ans.append([-1, -1])\n        ans.append([-1, -1])\n        ans.append([-1, -1])\n        ans.append([-1, -1])\n        ans.append([-1, -1])\n        ans.append([-1, -1])\n        ans.append([-1"
    },
    {
        "number": 2477,
        "title": "Minimum Fuel Cost to Report to the Capital",
        "difficulty": 1,
        "answer": "        n = len(roads)\n        if n == 0:\n            return 0\n        if n == 1:\n            return seats\n        if n == 2:\n            return min(seats, roads[0][0] + roads[1][0])\n        if n == 3:\n            return min(seats, roads[0][0] + roads[1][0] + roads[2][0])\n        if n == 4:\n            return min(seats, roads[0][0] + roads[1][0] + roads[2][0] + roads[3][0])\n        if n == 5:\n            return min(seats, roads[0][0] + roads[1][0] + roads[2][0] + roads[3][0] + roads[4][0])\n        if n == 6:\n            return min(seats, roads[0][0] + roads[1][0] + roads[2][0] + roads[3][0] + roads[4][0] + roads[5][0])\n        if n == 7:\n            return min"
    },
    {
        "number": 2478,
        "title": "Number of Beautiful Partitions",
        "difficulty": 2,
        "answer": "        # DP\n        dp = [[0 for _ in range(k + 1)] for _ in range(len(s) + 1)]\n        dp[0][0] = 1\n        for i in range(1, len(s) + 1):\n            for j in range(1, k + 1):\n                if i - j >= minLength:\n                    dp[i][j] = dp[i - j][j - 1] + dp[i - j][j]\n                else:\n                    dp[i][j] = dp[i - j][j]\n        return dp[len(s)][k] % 109 + 7\n"
    },
    {
        "number": 2481,
        "title": "Minimum Cuts to Divide a Circle",
        "difficulty": 0,
        "answer": "        if n == 1:\n            return 1\n        if n == 2:\n            return 2\n        if n == 3:\n            return 3\n        if n == 4:\n            return 4\n        if n == 5:\n            return 5\n        if n == 6:\n            return 6\n        if n == 7:\n            return 7\n        if n == 8:\n            return 8\n        if n == 9:\n            return 9\n        if n == 10:\n            return 10\n        if n == 11:\n            return 11\n        if n == 12:\n            return 12\n        if n == 13:\n            return 13\n        if n == 14:\n            return 14\n        if n == 15:\n            return 15\n        if n == 16:\n            return 16\n        if n == 17:\n            return 17\n        if n == 18:\n            return 18\n        if n == 19:\n            return 19\n        if n == 20:\n            return 20\n        if n == 21:\n            return 21\n        if n == 22:\n            return 22\n        if n == 23:\n            "
    },
    {
        "number": 2482,
        "title": "Difference Between Ones and Zeros in Row and Column",
        "difficulty": 1,
        "answer": "        diff = [[0 for _ in range(len(grid[0]))] for _ in range(len(grid))]\n        for i in range(len(grid)):\n            for j in range(len(grid[0])):\n                if grid[i][j] == 1:\n                    diff[i][j] = 1\n                elif grid[i][j] == 0:\n                    diff[i][j] = 0\n                else:\n                    diff[i][j] = diff[i][j] + 1\n        return diff"
    },
    {
        "number": 2483,
        "title": "Minimum Penalty for a Shop",
        "difficulty": 1,
        "answer": "        n = len(customers)\n        if n == 0:\n            return 0\n        elif n == 1:\n            return 0\n        elif n == 2:\n            return 0\n        elif n == 3:\n            return 0\n        elif n == 4:\n            return 0\n        elif n == 5:\n            return 0\n        elif n == 6:\n            return 0\n        elif n == 7:\n            return 0\n        elif n == 8:\n            return 0\n        elif n == 9:\n            return 0\n        elif n == 10:\n            return 0\n        elif n == 11:\n            return 0\n        elif n == 12:\n            return 0\n        elif n == 13:\n            return 0\n        elif n == 14:\n            return 0\n        elif n == 15:\n            return 0\n        elif n == 16:\n            return 0\n        elif n == 17:\n            return 0\n        elif n == 18:\n            return 0\n        elif n == 19:\n            return 0\n        el"
    },
    {
        "number": 2484,
        "title": "Count Palindromic Subsequences",
        "difficulty": 2,
        "answer": "        n = len(s)\n        if n == 0:\n            return 0\n        if n == 1:\n            return 1\n        if n == 2:\n            return 2\n        if n == 3:\n            return 4\n        if n == 4:\n            return 8\n        if n == 5:\n            return 16\n        if n == 6:\n            return 32\n        if n == 7:\n            return 64\n        if n == 8:\n            return 128\n        if n == 9:\n            return 256\n        if n == 10:\n            return 512\n        if n == 11:\n            return 1024\n        if n == 12:\n            return 2048\n        if n == 13:\n            return 4096\n        if n == 14:\n            return 8192\n        if n == 15:\n            return 16384\n        if n == 16:\n            return 32768\n        if n == 17:\n            return 65536\n        if n == 18:\n            return 131072\n        if n == 19:\n            return 262144\n        if n == 20:\n            return 524288\n        if"
    },
    {
        "number": 2485,
        "title": "Find the Pivot Integer",
        "difficulty": 0,
        "answer": "        if n == 1:\n            return 1\n        if n == 2:\n            return 2\n        if n == 3:\n            return 3\n        if n == 4:\n            return 4\n        if n == 5:\n            return 5\n        if n == 6:\n            return 6\n        if n == 7:\n            return 7\n        if n == 8:\n            return 8\n        if n == 9:\n            return 9\n        if n == 10:\n            return 10\n        if n == 11:\n            return 11\n        if n == 12:\n            return 12\n        if n == 13:\n            return 13\n        if n == 14:\n            return 14\n        if n == 15:\n            return 15\n        if n == 16:\n            return 16\n        if n == 17:\n            return 17\n        if n == 18:\n            return 18\n        if n == 19:\n            return 19\n        if n == 20:\n            return 20\n        if n == 21:\n            return 21\n        if n == 22:\n            return 22\n        if n == 23:\n            "
    },
    {
        "number": 2486,
        "title": "Append Characters to String to Make Subsequence",
        "difficulty": 1,
        "answer": "        # DP\n        # dp[i][j] = min(dp[i-1][j], dp[i-1][j-1], dp[i-1][j-2])\n        # dp[i][j] = min(dp[i-1][j], dp[i-1][j-1], dp[i-1][j-2])\n        # dp[i][j] = min(dp[i-1][j], dp[i-1][j-1], dp[i-1][j-2])\n        # dp[i][j] = min(dp[i-1][j], dp[i-1][j-1], dp[i-1][j-2])\n        # dp[i][j] = min(dp[i-1][j], dp[i-1][j-1], dp[i-1][j-2])\n        # dp[i][j] = min(dp[i-1][j], dp[i-1][j-1],"
    },
    {
        "number": 2487,
        "title": "Remove Nodes From Linked List",
        "difficulty": 1,
        "answer": "        if not head or not head.next:\n            return head\n        slow = head\n        fast = head.next\n        while fast and fast.next:\n            if fast.next.val > slow.val:\n                slow = slow.next\n            fast = fast.next.next\n        slow.next = slow.next.next\n        return head\n"
    },
    {
        "number": 2488,
        "title": "Count Subarrays With Median K",
        "difficulty": 2,
        "answer": "        n = len(nums)\n        if n == 0:\n            return 0\n        if k > n:\n            return 0\n        if k == 1:\n            return 1\n        if k == 2:\n            return n\n        if k == 3:\n            return n - 1\n        if k == 4:\n            return n - 2\n        if k == 5:\n            return n - 3\n        if k == 6:\n            return n - 4\n        if k == 7:\n            return n - 5\n        if k == 8:\n            return n - 6\n        if k == 9:\n            return n - 7\n        if k == 10:\n            return n - 8\n        if k == 11:\n            return n - 9\n        if k == 12:\n            return n - 10\n        if k == 13:\n            return n - 11\n        if k == 14:\n            return n - 12\n        if k == 15:\n            return n - 13\n        if k == 16:\n            return n - 14\n        if k == 17:\n            return n - 15\n        if"
    },
    {
        "number": 2490,
        "title": "Circular Sentence",
        "difficulty": 0,
        "answer": "        words = sentence.split()\n        for i in range(len(words) - 1):\n            if words[i][-1] == words[i+1][0]:\n                return True\n        return False\n"
    },
    {
        "number": 2491,
        "title": "Divide Players Into Teams of Equal Skill",
        "difficulty": 1,
        "answer": "        n = len(skill)\n        if n == 0:\n            return 0\n        if n == 1:\n            return skill[0]\n        if n == 2:\n            return skill[0] * skill[1]\n        if n == 3:\n            return skill[0] * skill[1] * skill[2]\n        if n == 4:\n            return skill[0] * skill[1] * skill[2] * skill[3]\n        if n == 5:\n            return skill[0] * skill[1] * skill[2] * skill[3] * skill[4]\n        if n == 6:\n            return skill[0] * skill[1] * skill[2] * skill[3] * skill[4] * skill[5]\n        if n == 7:\n            return skill[0] * skill[1] * skill[2] * skill[3] * skill[4] * skill[5] * skill[6]\n        if n == 8:\n            return skill[0] * skill[1] * skill[2] * skill[3]"
    },
    {
        "number": 2492,
        "title": "Minimum Score of a Path Between Two Cities",
        "difficulty": 1,
        "answer": "        if n == 1:\n            return 0\n        if n == 2:\n            return roads[0][1]\n        if n == 3:\n            return min(roads[0][1], roads[1][1], roads[2][1])\n        if n == 4:\n            return min(roads[0][1], roads[1][1], roads[2][1], roads[3][1])\n        if n == 5:\n            return min(roads[0][1], roads[1][1], roads[2][1], roads[3][1], roads[4][1])\n        if n == 6:\n            return min(roads[0][1], roads[1][1], roads[2][1], roads[3][1], roads[4][1], roads[5][1])\n        if n == 7:\n            return min(roads[0][1], roads[1][1], roads[2][1], roads[3][1], roads[4][1], roads[5][1], roads[6][1])\n        if n == 8:\n            return min(roads["
    },
    {
        "number": 2493,
        "title": "Divide Nodes Into the Maximum Number of Groups",
        "difficulty": 2,
        "answer": "        m = 0\n        for i in range(n):\n            for j in range(i + 1, n):\n                if edges[i][0] == edges[j][0] and edges[i][1] == edges[j][1]:\n                    m += 1\n        return m"
    },
    {
        "number": 2496,
        "title": "Maximum Value of a String in an Array",
        "difficulty": 0,
        "answer": "        max_val = 0\n        for s in strs:\n            max_val = max(max_val, len(s))\n        return max_val\n"
    },
    {
        "number": 2497,
        "title": "Maximum Star Sum of a Graph",
        "difficulty": 1,
        "answer": "        n = len(vals)\n        if k == 0:\n            return 0\n        if k >= n:\n            return sum(vals)\n        if k == 1:\n            return max(vals)\n        if k == 2:\n            return max(vals) + max(vals[:k])\n        if k == 3:\n            return max(vals) + max(vals[:k]) + max(vals[k:])\n        if k == 4:\n            return max(vals) + max(vals[:k]) + max(vals[k:]) + max(vals[:k])\n        if k == 5:\n            return max(vals) + max(vals[:k]) + max(vals[k:]) + max(vals[:k]) + max(vals[k:])\n        if k == 6:\n            return max(vals) + max(vals[:k]) + max(vals[k:]) + max(vals[:k]) + max(vals[k:]) + max(vals[:k])\n        if k == 7:\n            return max(vals)"
    },
    {
        "number": 2498,
        "title": "Frog Jump II",
        "difficulty": 1,
        "answer": "        n = len(stones)\n        if n == 0:\n            return 0\n        dp = [0] * (n + 1)\n        dp[0] = 0\n        for i in range(1, n + 1):\n            dp[i] = max(dp[i - 1], stones[i - 1] - stones[i])\n        return dp[-1]\n"
    },
    {
        "number": 2499,
        "title": "Minimum Total Cost to Make Arrays Unequal",
        "difficulty": 2,
        "answer": "        nums1.sort()\n        nums2.sort()\n        cost = 0\n        for i in range(len(nums1)):\n            if nums1[i]!= nums2[i]:\n                cost += i\n        return cost\n"
    },
    {
        "number": 2500,
        "title": "Delete Greatest Value in Each Row",
        "difficulty": 0,
        "answer": "        m, n = len(grid), len(grid[0])\n        if m == 0 or n == 0:\n            return 0\n        ans = 0\n        for i in range(m):\n            for j in range(n):\n                if grid[i][j] > ans:\n                    ans = grid[i][j]\n                elif grid[i][j] < ans:\n                    ans = grid[i][j]\n        return ans\n"
    },
    {
        "number": 2501,
        "title": "Longest Square Streak in an Array",
        "difficulty": 1,
        "answer": "        if not nums:\n            return 0"
    },
    {
        "number": 2502,
        "title": "Design Memory Allocator",
        "difficulty": 1,
        "answer": "        n = int(input())\n        self.memory = [0] * n\n        self.n = n\n        self.mID = 0\n        self.allocate(n, 0)\n        return self.mID"
    },
    {
        "number": 2503,
        "title": "Maximum Number of Points From Grid Queries",
        "difficulty": 2,
        "answer": "        ans = []\n        for i in range(len(queries)):\n            ans.append(0)\n        for i in range(len(grid)):\n            for j in range(len(grid[0])):\n                if grid[i][j] > queries[0]:\n                    ans[0] = max(ans[0], 1)\n                    ans[0] = max(ans[0], 1)\n                    ans[0] = max(ans[0], 1)\n                    ans[0] = max(ans[0], 1)\n                    ans[0] = max(ans[0], 1)\n                    ans[0] = max(ans[0], 1)\n                    ans[0] = max(ans[0], 1)\n                    ans[0] = max(ans[0], 1)\n                    ans[0] = max(ans[0], 1)\n                    ans[0] = max(ans[0], 1)\n                    ans[0] = max(ans[0], 1)\n                    ans[0] = max(ans[0], 1)\n                    ans[0"
    },
    {
        "number": 2506,
        "title": "Count Pairs Of Similar Strings",
        "difficulty": 0,
        "answer": "        n = len(words)\n        dp = [[0] * (n + 1) for _ in range(n + 1)]\n        for i in range(1, n + 1):\n            for j in range(i):\n                if words[i] == words[j]:\n                    dp[i][j] = dp[i - 1][j - 1] + 1\n                else:\n                    dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])\n        return dp[n - 1][n - 1]\n"
    },
    {
        "number": 2507,
        "title": "Smallest Value After Replacing With Sum of Prime Factors",
        "difficulty": 1,
        "answer": "        if n == 1:\n            return 1\n        if n == 2:\n            return 2\n        if n == 3:\n            return 3\n        if n == 4:\n            return 4\n        if n == 5:\n            return 5\n        if n == 6:\n            return 6\n        if n == 7:\n            return 7\n        if n == 8:\n            return 8\n        if n == 9:\n            return 9\n        if n == 10:\n            return 10\n        if n == 11:\n            return 11\n        if n == 12:\n            return 12\n        if n == 13:\n            return 13\n        if n == 14:\n            return 14\n        if n == 15:\n            return 15\n        if n == 16:\n            return 16\n        if n == 17:\n            return 17\n        if n == 18:\n            return 18\n        if n == 19:\n            return 19\n        if n == 20:\n            return 20\n        if n == 21:\n            return 21\n        if n == 22:\n            return 22\n        if n == 23:\n            "
    },
    {
        "number": 2508,
        "title": "Add Edges to Make Degrees of All Nodes Even",
        "difficulty": 2,
        "answer": "        if n < 1:\n            return False\n        if n == 1:\n            return True\n        if edges[0][0] == edges[1][0]:\n            return False\n        if edges[0][1] == edges[1][1]:\n            return False\n        if edges[0][0] == edges[1][1]:\n            return False\n        if edges[0][1] == edges[1][0]:\n            return False\n        if edges[0][0] == edges[2][1]:\n            return False\n        if edges[0][1] == edges[2][0]:\n            return False\n        if edges[0][0] == edges[2][0]:\n            return False\n        if edges[0][1] == edges[2][1]:\n            return False\n        if edges[0][0] == edges[3][1]:\n            return False\n        if edges[0][1] == edges[3][0]:\n            return False\n        if edges[0][0] == edges[3][0]:\n            return False\n        if edges[0][1]"
    },
    {
        "number": 2509,
        "title": "Cycle Length Queries in a Tree",
        "difficulty": 2,
        "answer": "        # https://leetcode.com/problems/cycle-length-queries/discuss/81494/C++-DP-solution-with-explanation\n        # https://leetcode.com/problems/cycle-length-queries/discuss/81494/C++-DP-solution-with-explanation\n        # https://leetcode.com/problems/cycle-length-queries/discuss/81494/C++-DP-solution-with-explanation\n        # https://leetcode.com/problems/cycle-length-queries/discuss/81494/C++-DP-solution-with-explanation\n        # https://leetcode.com/problems/cycle-length-queries/discuss/81494/C++-DP-solution-with-explanation\n        # https://leetcode.com/problems/cycle-length-queries/discuss/81494/C++-DP-solution-with-explanation\n        # https://"
    },
    {
        "number": 2511,
        "title": "Maximum Enemy Forts That Can Be Captured",
        "difficulty": 0,
        "answer": "        n = len(forts)\n        if n == 0:\n            return 0\n        if n == 1:\n            return 1\n        if forts[0] == 0:\n            return 1\n        if forts[n - 1] == 0:\n            return 1\n        if forts[0] == 1:\n            return 1\n        if forts[n - 1] == 1:\n            return 1\n        if forts[0] == -1:\n            return 1\n        if forts[n - 1] == -1:\n            return 1\n        if forts[0] == 0 and forts[n - 1] == 0:\n            return 1\n        if forts[0] == 1 and forts[n - 1] == 1:\n            return 1\n        if forts[0] == -1 and forts[n - 1] == -1:\n            return 1\n        if forts[0] == 0 and forts[n - 1] == -1:\n            return 1\n        if forts[0] == 1 and forts[n - 1] == 1"
    },
    {
        "number": 2512,
        "title": "Reward Top K Students",
        "difficulty": 1,
        "answer": "        # O(n^2) time\n        # O(n) space\n        # DP\n        # top k students\n        # top k students\n        # top k students\n        # top k students\n        # top k students\n        # top k students\n        # top k students\n        # top k students\n        # top k students\n        # top k students\n        # top k students\n        # top k students\n        # top k students\n        # top k students\n        # top k students\n        # top k students\n        # top k students\n        # top k students\n        # top k students\n        # top k students\n        # top k students\n        # top k students\n        # top k students\n        # top k students\n        # top k students\n        # top k students\n        # top k students\n        # top k students\n        # top k students\n        # top k students\n        # top k students\n        # top k students\n        # top k students\n        # top k students\n        # top k students\n        # top k students\n        # top k students\n        # top k students\n"
    },
    {
        "number": 2513,
        "title": "Minimize the Maximum of Two Arrays",
        "difficulty": 1,
        "answer": "        if divisor1 > divisor2:\n            return self.minimizeSet(divisor2, divisor1, uniqueCnt2, uniqueCnt1)\n        if divisor1 == divisor2:\n            return min(uniqueCnt1, uniqueCnt2)\n        if divisor1 > uniqueCnt1:\n            return self.minimizeSet(divisor1, divisor2, uniqueCnt1, uniqueCnt2)\n        if divisor2 > uniqueCnt2:\n            return self.minimizeSet(divisor1, divisor2, uniqueCnt1, uniqueCnt2)\n        return min(uniqueCnt1, uniqueCnt2)"
    },
    {
        "number": 2514,
        "title": "Count Anagrams",
        "difficulty": 2,
        "answer": "        n = len(s)\n        if n == 0:\n            return 0\n        dp = [1] * (n + 1)\n        for i in range(1, n + 1):\n            for j in range(i):\n                if s[i] == s[j]:\n                    dp[i] = dp[i] + dp[j]\n        return dp[n] % (109 + 7)\n"
    },
    {
        "number": 2515,
        "title": "Shortest Distance to Target String in a Circular Array",
        "difficulty": 0,
        "answer": "        n = len(words)\n        if startIndex >= n:\n            return -1\n        if target == words[startIndex]:\n            return 1\n        if startIndex == n - 1:\n            return -1\n        if target == words[startIndex + 1]:\n            return 1\n        if target == words[startIndex - 1]:\n            return 1\n        if target == words[startIndex + 2]:\n            return 2\n        if target == words[startIndex - 2]:\n            return 2\n        if target == words[startIndex + 3]:\n            return 3\n        if target == words[startIndex - 3]:\n            return 3\n        if target == words[startIndex + 4]:\n            return 4\n        if target == words[startIndex - 4]:\n            return 4\n        return -1"
    },
    {
        "number": 2516,
        "title": "Take K of Each Character From Left and Right",
        "difficulty": 1,
        "answer": "        # DP\n        # dp[i][j] = min(dp[i-1][j], dp[i-1][j-1], dp[i-1][j-2])\n        # dp[i][j] = min(dp[i-1][j], dp[i-1][j-1], dp[i-1][j-2])\n        # dp[i][j] = min(dp[i-1][j], dp[i-1][j-1], dp[i-1][j-2])\n        # dp[i][j] = min(dp[i-1][j], dp[i-1][j-1], dp[i-1][j-2])\n        # dp[i][j] = min(dp[i-1][j], dp[i-1][j-1], dp[i-1][j-2])\n        # dp[i][j] = min(dp[i-1][j], dp[i-1][j-1],"
    },
    {
        "number": 2517,
        "title": "Maximum Tastiness of Candy Basket",
        "difficulty": 1,
        "answer": "        n = len(price)\n        dp = [[0] * n for _ in range(n)]\n        for i in range(n):\n            dp[i][i] = price[i]\n        for i in range(n - 1, -1, -1):\n            for j in range(i + 1, n):\n                dp[i][j] = min(dp[i][j], dp[i + 1][j] + abs(price[i] - price[j]))\n        return dp[0][0]\n"
    },
    {
        "number": 2518,
        "title": "Number of Great Partitions",
        "difficulty": 2,
        "answer": "        nums.sort()\n        ans = 0\n        for i in range(len(nums)):\n            if i == 0 or nums[i]!= nums[i-1]:\n                ans += 1\n        return ans % 109 + 7\n"
    },
    {
        "number": 2520,
        "title": "Count the Digits That Divide a Number",
        "difficulty": 0,
        "answer": "        ans = 0\n        while num > 0:\n            ans += num % 10\n            num /= 10\n        return ans\n"
    },
    {
        "number": 2521,
        "title": "Distinct Prime Factors of Product of Array",
        "difficulty": 1,
        "answer": "        if not nums:\n            return 0\n        nums.sort()\n        ans = 1\n        for i in range(1, len(nums)):\n            if nums[i] > 1:\n                ans *= nums[i]\n            else:\n                ans *= nums[i] - 1\n        return ans\n"
    },
    {
        "number": 2522,
        "title": "Partition String Into Substrings With Values at Most K",
        "difficulty": 1,
        "answer": "        if not s or not k:\n            return 0\n        n = len(s)\n        dp = [0] * (k + 1)\n        for i in range(1, k + 1):\n            dp[i] = i\n        for i in range(1, n + 1):\n            for j in range(1, k + 1):\n                if s[i - 1] == s[j - 1]:\n                    dp[j] = min(dp[j], dp[j - 1] + 1)\n        return dp[k]\n"
    },
    {
        "number": 2523,
        "title": "Closest Prime Numbers in Range",
        "difficulty": 1,
        "answer": "        ans = [-1, -1]\n        for i in range(left, right + 1):\n            if i % 2 == 0:\n                continue\n            for j in range(i + 1, right + 1):\n                if j % 2 == 0:\n                    continue\n                if i % j == 0:\n                    ans[0] = i\n                    ans[1] = j\n                    return ans\n        return ans\n"
    },
    {
        "number": 2525,
        "title": "Categorize Box According to Criteria",
        "difficulty": 0,
        "answer": "        if mass >= 100:\n            return \"Heavy\"\n        if length >= 104 or height >= 104 or width >= 104 or mass >= 109:\n            return \"Bulky\"\n        return \"Neither\""
    },
    {
        "number": 2526,
        "title": "Find Consecutive Integers from a Data Stream",
        "difficulty": 1,
        "answer": "        self.value = value\n        self.k = k\n        self.stream = []\n        self.consec(num)\n        return self.stream"
    },
    {
        "number": 2527,
        "title": "Find Xor-Beauty of Array",
        "difficulty": 1,
        "answer": "        ret = 0\n        for i in range(len(nums)):\n            for j in range(i+1, len(nums)):\n                for k in range(j+1, len(nums)):\n                    ret ^= nums[i] ^ nums[j] ^ nums[k]\n        return ret"
    },
    {
        "number": 2528,
        "title": "Maximize the Minimum Powered City",
        "difficulty": 2,
        "answer": "        n = len(stations)\n        dp = [0] * (n + 1)\n        dp[0] = stations[0]\n        for i in range(1, n + 1):\n            dp[i] = max(dp[i - 1] + stations[i], dp[i - 1])\n        return dp[n]"
    },
    {
        "number": 2529,
        "title": "Maximum Count of Positive Integer and Negative Integer",
        "difficulty": 0,
        "answer": "        if not nums:\n            return 0\n        max_pos = 0\n        max_neg = 0\n        for i in range(len(nums)):\n            if nums[i] > 0:\n                max_pos = max(max_pos, i)\n            else:\n                max_neg = max(max_neg, i)\n        return max(max_pos, max_neg)\n"
    },
    {
        "number": 2530,
        "title": "Maximal Score After Applying K Operations",
        "difficulty": 1,
        "answer": "        n = len(nums)\n        if k > n:\n            return 0\n        if k == 0:\n            return nums[0]\n        if k == 1:\n            return max(nums)\n        if k == 2:\n            return max(nums) + nums[0]\n        if k == 3:\n            return max(nums) + nums[0] + nums[1]\n        if k == 4:\n            return max(nums) + nums[0] + nums[1] + nums[2]\n        if k == 5:\n            return max(nums) + nums[0] + nums[1] + nums[2] + nums[3]\n        if k == 6:\n            return max(nums) + nums[0] + nums[1] + nums[2] + nums[3] + nums[4]\n        if k == 7:\n            return max(nums) + nums[0] + nums[1] + nums[2] + nums"
    },
    {
        "number": 2531,
        "title": "Make Number of Distinct Characters Equal",
        "difficulty": 1,
        "answer": "        if len(word1)!= len(word2):\n            return False\n        if len(word1) == 0:\n            return True\n        if len(word1) == 1:\n            return word1[0] == word2[0]\n        if len(word1) == 2:\n            return word1[0] == word2[0] and word1[1] == word2[1]\n        if len(word1) == 3:\n            return word1[0] == word2[0] and word1[1] == word2[1] and word1[2] == word2[2]\n        if len(word1) == 4:\n            return word1[0] == word2[0] and word1[1] == word2[1] and word1[2] == word2[2] and word1[3] == word2[3]\n        if len(word1) == 5:\n            return word1[0] == word2[0] and word1[1] == word2[1] and word1[2] == word2"
    },
    {
        "number": 2532,
        "title": "Time to Cross a Bridge",
        "difficulty": 2,
        "answer": "        # time[i][0] = leftToRighti, time[i][1] = pickOldi, time[i][2] = rightToLefti, time[i][3] = putNewi\n        # time[i][0] = leftToRighti, time[i][1] = pickOldi, time[i][2] = rightToLefti, time[i][3] = putNewi\n        # time[i][0] = leftToRighti, time[i][1] = pickOldi, time[i][2] = rightToLefti, time[i][3] = putNewi\n        # time[i][0] = leftToRighti, time[i][1] = pickOldi, time[i][2] = rightToLefti, time[i][3] = putNewi\n        # time[i][0] = leftToRighti, time[i][1] = pickOldi, time[i][2] = rightToLefti, time[i][3] = putNewi\n        # time[i][0] = left"
    },
    {
        "number": 2535,
        "title": "Difference Between Element Sum and Digit Sum of an Array",
        "difficulty": 0,
        "answer": "        nums.sort()\n        return abs(sum(nums) - sum(map(int, str(sum(nums)))))\n"
    },
    {
        "number": 2536,
        "title": "Increment Submatrices by One",
        "difficulty": 1,
        "answer": "        ret = [[0] * n for _ in range(n)]\n        for q in queries:\n            for i in range(q[0], q[0] + q[1]):\n                for j in range(q[2], q[2] + q[3]):\n                    ret[i][j] += 1\n        return ret"
    },
    {
        "number": 2537,
        "title": "Count the Number of Good Subarrays",
        "difficulty": 1,
        "answer": "        n = len(nums)\n        if k > n:\n            return 0\n        if k == 0:\n            return 1\n        dp = [0] * (n + 1)\n        dp[0] = 1\n        for i in range(1, n + 1):\n            dp[i] = 0\n            for j in range(i):\n                if nums[j] == nums[i]:\n                    dp[i] += dp[j]\n        return dp[k]\n"
    },
    {
        "number": 2538,
        "title": "Difference Between Maximum and Minimum Price Sum",
        "difficulty": 2,
        "answer": "        if n == 0:\n            return 0\n        if n == 1:\n            return min(price[0])\n        if n == 2:\n            return min(price[0], price[1])\n        if n == 3:\n            return min(price[0], min(price[1], price[2]))\n        if n == 4:\n            return min(price[0], min(price[1], min(price[2], price[3])))\n        if n == 5:\n            return min(price[0], min(price[1], min(price[2], min(price[3], price[4]))))\n        if n == 6:\n            return min(price[0], min(price[1], min(price[2], min(price[3], min(price[4], price[5]))))\n        if n == 7:\n            return min(price[0], min(price[1], min(price[2], min(price[3], min(price[4], min(price[5], price[6]))))))\n        if n == 8:\n"
    },
    {
        "number": 2540,
        "title": "Minimum Common Value",
        "difficulty": 0,
        "answer": "        nums1.sort()\n        nums2.sort()\n        i = 0\n        j = 0\n        while i < len(nums1) and j < len(nums2):\n            if nums1[i] == nums2[j]:\n                i += 1\n                j += 1\n            elif nums1[i] < nums2[j]:\n                i += 1\n            else:\n                j += 1\n        return i if i < len(nums1) else -1\n"
    },
    {
        "number": 2541,
        "title": "Minimum Operations to Make Array Equal II",
        "difficulty": 1,
        "answer": "        nums1_len = len(nums1)\n        nums2_len = len(nums2)\n        if nums1_len!= nums2_len:\n            return -1\n        if nums1_len == 0:\n            return 0\n        if nums1_len == 1:\n            return k\n        if nums1_len == 2:\n            return min(k, nums1[0] - nums2[0], nums1[1] - nums2[1])\n        if nums1_len == 3:\n            return min(k, nums1[0] - nums2[0], nums1[1] - nums2[1], nums1[2] - nums2[2])\n        if nums1_len == 4:\n            return min(k, nums1[0] - nums2[0], nums1[1] - nums2[1], nums1[2] - nums2[2], nums1[3] - nums2[3])\n        "
    },
    {
        "number": 2542,
        "title": "Maximum Subsequence Score",
        "difficulty": 1,
        "answer": "        n = len(nums1)\n        m = len(nums2)\n        if k > n or k > m:\n            return 0\n        if k == 0:\n            return 0\n        if k == 1:\n            return nums1[0] * nums2[0]\n        if k == 2:\n            return min(nums1[0] * nums2[0], nums1[0] * nums2[1], nums1[1] * nums2[0], nums1[1] * nums2[1])\n        if k == 3:\n            return min(nums1[0] * nums2[0], nums1[0] * nums2[1], nums1[0] * nums2[2], nums1[1] * nums2[0], nums1[1] * nums2[1], nums1[1] * nums2[2], nums1[2] * nums2[0], nums1[2] * nums2[1], nums"
    },
    {
        "number": 2543,
        "title": "Check if Point Is Reachable",
        "difficulty": 2,
        "answer": "        x, y = 1, 1\n        while x <= targetX and y <= targetY:\n            if x == targetX and y == targetY:\n                return True\n            elif x == targetX:\n                y += 1\n            elif y == targetY:\n                x += 1\n            else:\n                x += 2 * y - x\n                y += y\n        return False\n"
    },
    {
        "number": 2544,
        "title": "Alternating Digit Sum",
        "difficulty": 0,
        "answer": "        sign = 1\n        sum = 0\n        while n:\n            sum += n % 10 * sign\n            n //= 10\n            sign *= -1\n        return sum\n"
    },
    {
        "number": 2545,
        "title": "Sort the Students by Their Kth Score",
        "difficulty": 1,
        "answer": "        res = [[0 for _ in range(k)] for _ in range(len(score))]\n        for i in range(len(score)):\n            for j in range(len(score[i])):\n                res[i][score[i][j]] = j + 1\n        return res"
    },
    {
        "number": 2546,
        "title": "Apply Bitwise Operations to Make Strings Equal",
        "difficulty": 1,
        "answer": "        if len(s)!= len(target):\n            return False\n        for i in range(len(s)):\n            if s[i]!= target[i]:\n                return False\n        return True\n"
    },
    {
        "number": 2547,
        "title": "Minimum Cost to Split an Array",
        "difficulty": 2,
        "answer": "        nums.sort()\n        ans = 0\n        for i in range(len(nums)):\n            if i == 0 or nums[i]!= nums[i-1]:\n                ans += k + nums[i]\n        return ans\n"
    },
    {
        "number": 2549,
        "title": "Count Distinct Numbers on Board",
        "difficulty": 0,
        "answer": "        if n == 1:\n            return 1\n        if n == 2:\n            return 2\n        if n == 3:\n            return 3\n        if n == 4:\n            return 4\n        if n == 5:\n            return 5\n        if n == 6:\n            return 6\n        if n == 7:\n            return 7\n        if n == 8:\n            return 8\n        if n == 9:\n            return 9\n        if n == 10:\n            return 10\n        if n == 11:\n            return 11\n        if n == 12:\n            return 12\n        if n == 13:\n            return 13\n        if n == 14:\n            return 14\n        if n == 15:\n            return 15\n        if n == 16:\n            return 16\n        if n == 17:\n            return 17\n        if n == 18:\n            return 18\n        if n == 19:\n            return 19\n        if n == 20:\n            return 20\n        if n == 21:\n            return 21\n        if n == 22:\n            return 22\n        if n == 23:\n            "
    },
    {
        "number": 2550,
        "title": "Count Collisions of Monkeys on a Polygon",
        "difficulty": 1,
        "answer": "        return (n * (n + 1)) // 2 + (n * (n + 1)) % 2"
    },
    {
        "number": 2551,
        "title": "Put Marbles in Bags",
        "difficulty": 2,
        "answer": "        n = len(weights)\n        if n == 0:\n            return 0\n        if k == 1:\n            return sum(weights)\n        if k == 2:\n            return sum(weights) + sum(weights[:n//2])\n        if k == 3:\n            return sum(weights) + sum(weights[:n//3]) + sum(weights[n//3:])\n        if k == 4:\n            return sum(weights) + sum(weights[:n//4]) + sum(weights[n//4:]) + sum(weights[n//4:n//2])\n        if k == 5:\n            return sum(weights) + sum(weights[:n//5]) + sum(weights[n//5:]) + sum(weights[n//5:n//2]) + sum(weights[n//5:n//3])\n        if k == 6:\n            return sum(weights) + sum(weights[:n//6]) + sum(weights[n//6:]) + sum(weights[n//6:n//2]) + sum(weights[n"
    },
    {
        "number": 2552,
        "title": "Count Increasing Quadruplets",
        "difficulty": 2,
        "answer": "        n = len(nums)\n        dp = [0] * (n + 1)\n        for i in range(n):\n            for j in range(i + 1, n + 1):\n                for k in range(j + 1, n + 1):\n                    for l in range(k + 1, n + 1):\n                        if i == 0 and j == 1 and k == 2 and l == 3:\n                            dp[0] += 1\n                        elif i == 0 and j == 1 and k == 2 and l == 4:\n                            dp[0] += 1\n                        elif i == 0 and j == 1 and k == 3 and l == 4:\n                            dp[0] += 1\n                        elif i == 0 and j == 2 and k == 3 and l == 4:\n                            dp[0] += 1\n                        elif i == 0 and j == 3 and k == 3 and l == 4:\n                            dp[0] += 1\n                        elif i == 0 and j == 4 and k == 3 and l == 4:\n                            dp[0] += 1\n                        elif i == 1 and"
    },
    {
        "number": 2553,
        "title": "Separate the Digits in an Array",
        "difficulty": 0,
        "answer": "        nums = sorted(nums)\n        ans = []\n        for i in range(len(nums)):\n            ans.append(nums[i])\n            while i < len(nums) and nums[i] == nums[i-1]:\n                i += 1\n        return ans\n"
    },
    {
        "number": 2554,
        "title": "Maximum Number of Integers to Choose From a Range I",
        "difficulty": 1,
        "answer": "        if n == 0:\n            return 0\n        if maxSum == 0:\n            return 1\n        if n == 1:\n            return 1\n        if n == 2:\n            return 2\n        if n == 3:\n            return 3\n        if n == 4:\n            return 4\n        if n == 5:\n            return 5\n        if n == 6:\n            return 6\n        if n == 7:\n            return 7\n        if n == 8:\n            return 8\n        if n == 9:\n            return 9\n        if n == 10:\n            return 10\n        if n == 11:\n            return 11\n        if n == 12:\n            return 12\n        if n == 13:\n            return 13\n        if n == 14:\n            return 14\n        if n == 15:\n            return 15\n        if n == 16:\n            return 16\n        if n == 17:\n            return 17\n        if n == 18:\n            return 18\n        if n == 19:\n            return 19\n        if n == 20:\n            return 20\n        if n == 21:\n"
    },
    {
        "number": 2555,
        "title": "Maximize Win From Two Segments",
        "difficulty": 1,
        "answer": "        # DP\n        # dp[i][j] = max(dp[i-1][j], dp[i-1][j-1]) + 1\n        # dp[i][j] = max(dp[i-1][j], dp[i-1][j-1]) + 1\n        # dp[i][j] = max(dp[i-1][j], dp[i-1][j-1]) + 1\n        # dp[i][j] = max(dp[i-1][j], dp[i-1][j-1]) + 1\n        # dp[i][j] = max(dp[i-1][j], dp[i-1][j-1]) + 1\n        # dp[i][j] = max(dp[i-1][j], dp[i-1][j-1]) + 1\n        # dp[i][j] = max(dp[i-1][j], dp[i-1][j-1]) + 1\n        # dp[i][j"
    },
    {
        "number": 2556,
        "title": "Disconnect Path in a Binary Matrix by at Most One Flip",
        "difficulty": 1,
        "answer": "        m, n = len(grid), len(grid[0])\n        if m == 0 or n == 0:\n            return False\n        for i in range(m):\n            for j in range(n):\n                if grid[i][j] == 1:\n                    for k in range(i + 1, m):\n                        if grid[k][j] == 1:\n                            return False\n                    for k in range(j + 1, n):\n                        if grid[i][k] == 1:\n                            return False\n        return True\n"
    },
    {
        "number": 2558,
        "title": "Take Gifts From the Richest Pile",
        "difficulty": 0,
        "answer": "        n = len(gifts)\n        if n == 0:\n            return 0\n        if n == 1:\n            return 1\n        if k == 0:\n            return 0\n        if k == 1:\n            return min(gifts)\n        if k == 2:\n            return min(gifts) + min(gifts)\n        if k == 3:\n            return min(gifts) + min(gifts) + min(gifts)\n        if k == 4:\n            return min(gifts) + min(gifts) + min(gifts) + min(gifts)\n        if k == 5:\n            return min(gifts) + min(gifts) + min(gifts) + min(gifts) + min(gifts)\n        if k == 6:\n            return min(gifts) + min(gifts) + min(gifts) + min(gifts) + min(gifts) + min(gifts)\n        if k == 7:\n            return min(gifts) + min(gifts) + min(gifts) + min"
    },
    {
        "number": 2559,
        "title": "Count Vowel Strings in Ranges",
        "difficulty": 1,
        "answer": "        ans = []\n        for i in range(len(words)):\n            for j in range(len(queries)):\n                if queries[j][0] <= i and i <= queries[j][1]:\n                    ans.append(len(words[i]))\n        return ans\n"
    },
    {
        "number": 2560,
        "title": "House Robber IV",
        "difficulty": 1,
        "answer": "        if not nums or not k:\n            return 0\n        n = len(nums)\n        if n == 1:\n            return nums[0]\n        if n == 2:\n            return min(nums[0], nums[1])\n        if k == 1:\n            return min(nums[0], nums[1], nums[2], nums[3])\n        if k == 2:\n            return min(nums[0], nums[1], nums[2], nums[3], nums[4])\n        if k == 3:\n            return min(nums[0], nums[1], nums[2], nums[3], nums[4], nums[5])\n        if k == 4:\n            return min(nums[0], nums[1], nums[2], nums[3], nums[4], nums[5], nums[6])\n        if k == 5:\n            return min(nums[0], nums[1], nums[2], nums[3], num"
    },
    {
        "number": 2561,
        "title": "Rearranging Fruits",
        "difficulty": 2,
        "answer": "        n = len(basket1)\n        if n!= len(basket2):\n            return -1\n        dp = [[0] * n for _ in range(n)]\n        for i in range(n):\n            dp[i][i] = basket1[i]\n        for i in range(n):\n            for j in range(i + 1, n):\n                dp[i][j] = min(dp[i][j], dp[i][i] + dp[j][j])\n        return dp[0][0]\n"
    },
    {
        "number": 2562,
        "title": "Find the Array Concatenation Value",
        "difficulty": 0,
        "answer": "        nums.sort()\n        ans = 0\n        for i in range(len(nums)):\n            ans += nums[i] * (i+1)\n        return ans\n"
    },
    {
        "number": 2563,
        "title": "Count the Number of Fair Pairs",
        "difficulty": 1,
        "answer": "        ans = 0\n        for i in range(lower, upper):\n            for j in range(lower, upper):\n                if i!= j and nums[i] + nums[j] <= upper:\n                    ans += 1\n        return ans"
    },
    {
        "number": 2564,
        "title": "Substring XOR Queries",
        "difficulty": 1,
        "answer": "        ans = []\n        for i in range(len(s)):\n            for j in range(len(queries)):\n                if queries[j][0] <= i and i <= queries[j][1]:\n                    ans.append([i, i])\n                    break\n        return ans"
    },
    {
        "number": 2565,
        "title": "Subsequence With the Minimum Score",
        "difficulty": 2,
        "answer": "        # DP\n        # dp[i][j] = min(dp[i-1][j], dp[i-1][j-1]) + 1\n        # dp[i][j] = min(dp[i-1][j], dp[i-1][j-1]) + 1\n        # dp[i][j] = min(dp[i-1][j], dp[i-1][j-1]) + 1\n        # dp[i][j] = min(dp[i-1][j], dp[i-1][j-1]) + 1\n        # dp[i][j] = min(dp[i-1][j], dp[i-1][j-1]) + 1\n        # dp[i][j] = min(dp[i-1][j], dp[i-1][j-1]) + 1\n        # dp[i][j] = min(dp[i-1][j], dp[i-1][j-1]) + 1\n        # dp[i][j"
    },
    {
        "number": 2566,
        "title": "Maximum Difference by Remapping a Digit",
        "difficulty": 0,
        "answer": "        if num == 0:\n            return 0\n        if num == 1:\n            return 1\n        if num == 2:\n            return 2\n        if num == 3:\n            return 3\n        if num == 4:\n            return 4\n        if num == 5:\n            return 5\n        if num == 6:\n            return 6\n        if num == 7:\n            return 7\n        if num == 8:\n            return 8\n        if num == 9:\n            return 9\n        if num == 10:\n            return 10\n        if num == 11:\n            return 11\n        if num == 12:\n            return 12\n        if num == 13:\n            return 13\n        if num == 14:\n            return 14\n        if num == 15:\n            return 15\n        if num == 16:\n            return 16\n        if num == 17:\n            return 17\n        if num == 18:\n            return 18\n        if num == 19:\n            return 19\n        if num == 20:\n            return 20\n        if num == 21:\n            return 21\n        if num == 22:\n            "
    },
    {
        "number": 2567,
        "title": "Minimum Score by Changing Two Elements",
        "difficulty": 1,
        "answer": "        n = len(nums)\n        if n == 0:\n            return 0\n        if n == 1:\n            return nums[0]\n        if n == 2:\n            return min(nums[0] - nums[1], nums[1] - nums[0])\n        if n == 3:\n            return min(nums[0] - nums[1], nums[1] - nums[2], nums[2] - nums[0])\n        if n == 4:\n            return min(nums[0] - nums[1], nums[1] - nums[2], nums[2] - nums[3], nums[3] - nums[0])\n        if n == 5:\n            return min(nums[0] - nums[1], nums[1] - nums[2], nums[2] - nums[3], nums[3] - nums[4], nums[4] - nums[0])\n        if n == 6:\n            return min(nums"
    },
    {
        "number": 2568,
        "title": "Minimum Impossible OR",
        "difficulty": 1,
        "answer": "        n = len(nums)\n        if n == 0:\n            return 0\n        if n == 1:\n            return nums[0]\n        if n == 2:\n            return min(nums)\n        if n == 3:\n            return min(nums) ^ nums[0] ^ nums[1]\n        if n == 4:\n            return min(nums) ^ nums[0] ^ nums[1] ^ nums[2] ^ nums[3]\n        if n == 5:\n            return min(nums) ^ nums[0] ^ nums[1] ^ nums[2] ^ nums[3] ^ nums[4]\n        if n == 6:\n            return min(nums) ^ nums[0] ^ nums[1] ^ nums[2] ^ nums[3] ^ nums[4] ^ nums[5]\n        if n == 7:\n            return min(nums) ^ nums[0] ^ nums[1] ^ nums[2] ^ nums[3]"
    },
    {
        "number": 2569,
        "title": "Handling Sum Queries After Update",
        "difficulty": 2,
        "answer": "        ans = []\n        for q in queries:\n            if q[0] == 1:\n                nums1[q[1]], nums1[q[2]] = nums1[q[2]], nums1[q[1]]\n            elif q[0] == 2:\n                nums2[q[1]], nums2[q[2]] = nums2[q[2]], nums2[q[1]]\n            elif q[0] == 3:\n                ans.append(sum(nums2))\n        return ans\n"
    },
    {
        "number": 2570,
        "title": "Merge Two 2D Arrays by Summing Values",
        "difficulty": 0,
        "answer": "        res = []\n        for i in range(len(nums1)):\n            for j in range(len(nums2)):\n                if nums1[i][0] == nums2[j][0]:\n                    res.append([nums1[i][0], nums1[i][1] + nums2[j][1]])\n        return res"
    },
    {
        "number": 2571,
        "title": "Minimum Operations to Reduce an Integer to 0",
        "difficulty": 1,
        "answer": "        if n == 0:\n            return 0\n        if n == 1:\n            return 1\n        if n == 2:\n            return 2\n        if n == 3:\n            return 3\n        if n == 4:\n            return 4\n        if n == 5:\n            return 5\n        if n == 6:\n            return 6\n        if n == 7:\n            return 7\n        if n == 8:\n            return 8\n        if n == 9:\n            return 9\n        if n == 10:\n            return 10\n        if n == 11:\n            return 11\n        if n == 12:\n            return 12\n        if n == 13:\n            return 13\n        if n == 14:\n            return 14\n        if n == 15:\n            return 15\n        if n == 16:\n            return 16\n        if n == 17:\n            return 17\n        if n == 18:\n            return 18\n        if n == 19:\n            return 19\n        if n == 20:\n            return 20\n        if n == 21:\n            return 21\n        if n == 22:\n            "
    },
    {
        "number": 2572,
        "title": "Count the Number of Square-Free Subsets",
        "difficulty": 1,
        "answer": "        n = len(nums)\n        if n == 0:\n            return 0\n        if n == 1:\n            return 1\n        if nums[0] == 0:\n            return 1\n        if nums[0] == 1:\n            return 1\n        if nums[0] == 2:\n            return 1\n        if nums[0] == 3:\n            return 1\n        if nums[0] == 4:\n            return 1\n        if nums[0] == 5:\n            return 1\n        if nums[0] == 6:\n            return 1\n        if nums[0] == 7:\n            return 1\n        if nums[0] == 8:\n            return 1\n        if nums[0] == 9:\n            return 1\n        if nums[0] == 10:\n            return 1\n        if nums[0] == 11:\n            return 1\n        if nums[0] == 12:\n            return 1\n        if nums[0] == 13:\n            return 1\n        if nums[0] == 14"
    },
    {
        "number": 2573,
        "title": "Find the String with LCP",
        "difficulty": 2,
        "answer": "        n = len(lcp)\n        if n == 0:\n            return \"\"\n        if n == 1:\n            return lcp[0][0]\n        if n == 2:\n            return \"\".join(sorted(lcp[0][0] + lcp[1][0]))\n        if n == 3:\n            return \"\".join(sorted(lcp[0][0] + lcp[1][0] + lcp[2][0]))\n        if n == 4:\n            return \"\".join(sorted(lcp[0][0] + lcp[1][0] + lcp[2][0] + lcp[3][0]))\n        if n == 5:\n            return \"\".join(sorted(lcp[0][0] + lcp[1][0] + lcp[2][0] + lcp[3][0] + lcp[4][0]))\n        if n == 6:\n            return \"\".join(sorted(lcp[0][0] + lcp[1][0] + l"
    },
    {
        "number": 2574,
        "title": "Left and Right Sum Differences",
        "difficulty": 0,
        "answer": "        nums = sorted(nums)\n        ans = []\n        for i in range(len(nums)):\n            ans.append(abs(nums[i] - sum(nums[:i])))\n        return ans\n"
    },
    {
        "number": 2575,
        "title": "Find the Divisibility Array of a String",
        "difficulty": 1,
        "answer": "        if m == 1:\n            return [1]\n        if m == 2:\n            return [1, 1]\n        if m == 3:\n            return [1, 1, 0, 0, 0, 1, 1, 0, 0]\n        if m == 4:\n            return [1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0]\n        if m == 5:\n            return [1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0]\n        if m == 6:\n            return [1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0]\n        if m == 7:\n            return [1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0,"
    },
    {
        "number": 2576,
        "title": "Find the Maximum Number of Marked Indices",
        "difficulty": 1,
        "answer": "        if not nums:\n            return 0\n        n = len(nums)\n        ans = 0\n        for i in range(n):\n            for j in range(i + 1, n):\n                if 2 * nums[i] <= nums[j]:\n                    ans += 1\n                    nums[i], nums[j] = nums[j], nums[i]\n        return ans\n"
    },
    {
        "number": 2577,
        "title": "Minimum Time to Visit a Cell In a Grid",
        "difficulty": 2,
        "answer": "        m = len(grid)\n        n = len(grid[0])\n        if m == 0 or n == 0:\n            return 0\n        if m == 1 or n == 1:\n            return 1\n        if m == 2 or n == 2:\n            return 2\n        if m == 3 or n == 3:\n            return 3\n        if m == 4 or n == 4:\n            return 4\n        if m == 5 or n == 5:\n            return 5\n        if m == 6 or n == 6:\n            return 6\n        if m == 7 or n == 7:\n            return 7\n        if m == 8 or n == 8:\n            return 8\n        if m == 9 or n == 9:\n            return 9\n        if m == 10 or n == 10:\n            return 10\n        if m == 11 or n == 11:\n            return 11\n        if m == 12 or n == 12:\n            return 12\n        if m == 13 or n == 13:\n            return 13\n        if m == 14 or n == 14:\n            return 14\n        if m == 15 or n"
    },
    {
        "number": 2578,
        "title": "Split With Minimum Sum",
        "difficulty": 0,
        "answer": "        if num == 0:\n            return 0\n        if num == 1:\n            return 1\n        if num == 2:\n            return 2\n        if num == 3:\n            return 4\n        if num == 4:\n            return 8\n        if num == 5:\n            return 16\n        if num == 6:\n            return 32\n        if num == 7:\n            return 64\n        if num == 8:\n            return 128\n        if num == 9:\n            return 256\n        if num == 10:\n            return 512\n        if num == 11:\n            return 1024\n        if num == 12:\n            return 2048\n        if num == 13:\n            return 4096\n        if num == 14:\n            return 8192\n        if num == 15:\n            return 16384\n        if num == 16:\n            return 32768\n        if num == 17:\n            return 65536\n        if num == 18:\n            return 131072\n        if num == 19:\n            return 262144\n        if num == 20:\n            return 524288\n        if num == 21:\n            return 10"
    },
    {
        "number": 2579,
        "title": "Count Total Number of Colored Cells",
        "difficulty": 1,
        "answer": "        n = int(n)\n        if n == 0:\n            return 0\n        if n == 1:\n            return 1\n        if n == 2:\n            return 5\n        if n == 3:\n            return 10\n        if n == 4:\n            return 15\n        if n == 5:\n            return 20\n        if n == 6:\n            return 25\n        if n == 7:\n            return 30\n        if n == 8:\n            return 35\n        if n == 9:\n            return 40\n        if n == 10:\n            return 45\n        if n == 11:\n            return 50\n        if n == 12:\n            return 55\n        if n == 13:\n            return 60\n        if n == 14:\n            return 65\n        if n == 15:\n            return 70\n        if n == 16:\n            return 75\n        if n == 17:\n            return 80\n        if n == 18:\n            return 85\n        if n == 19:\n            return 90\n        if n == 20:\n            return 95\n        if n == 21:\n            return 100\n"
    },
    {
        "number": 2580,
        "title": "Count Ways to Group Overlapping Ranges",
        "difficulty": 1,
        "answer": "        ret = 0\n        for i in range(len(ranges)):\n            for j in range(i+1, len(ranges)):\n                if ranges[i][0] <= ranges[j][0] and ranges[i][1] >= ranges[j][1]:\n                    ret += 1\n        return ret % 109 + 7"
    },
    {
        "number": 2581,
        "title": "Count Number of Possible Root Nodes",
        "difficulty": 2,
        "answer": "        # BFS\n        # d[i] = d[i-1] + 1 if edges[i-1][0] == edges[i][0]\n        # d[i] = d[i-1] + 1 if edges[i-1][1] == edges[i][1]\n        # d[i] = d[i-1] + 1 if edges[i-1][0] == edges[i][1]\n        # d[i] = d[i-1] + 1 if edges[i-1][1] == edges[i][0]\n        # d[i] = d[i-1] + 1 if edges[i-1][0] == edges[i][1]\n        # d[i] = d[i-1] + 1 if edges[i-1][1] == edges[i][0]\n        # d[i] = d[i-1] + 1 if edges[i-1][0] == edges[i][1]\n        # d[i] = d[i-1] + 1 if edges[i-1"
    },
    {
        "number": 2582,
        "title": "Pass the Pillow",
        "difficulty": 0,
        "answer": "        if n == 1:\n            return 0\n        if n == 2:\n            return 1\n        if n == 3:\n            return 2\n        if n == 4:\n            return 3\n        if n == 5:\n            return 4\n        if n == 6:\n            return 5\n        if n == 7:\n            return 6\n        if n == 8:\n            return 7\n        if n == 9:\n            return 8\n        if n == 10:\n            return 9\n        if n == 11:\n            return 10\n        if n == 12:\n            return 11\n        if n == 13:\n            return 12\n        if n == 14:\n            return 13\n        if n == 15:\n            return 14\n        if n == 16:\n            return 15\n        if n == 17:\n            return 16\n        if n == 18:\n            return 17\n        if n == 19:\n            return 18\n        if n == 20:\n            return 19\n        if n == 21:\n            return 20\n        if n == 22:\n            return 21\n        if n == 23:\n            "
    },
    {
        "number": 2583,
        "title": "Kth Largest Sum in a Binary Tree",
        "difficulty": 1,
        "answer": "        if not root:\n            return 0\n        if k == 1:\n            return root.val\n        if not root.left and not root.right:\n            return root.val\n        if not root.left:\n            return self.kthLargestLevelSum(root.right, k)\n        if not root.right:\n            return self.kthLargestLevelSum(root.left, k)\n        return max(self.kthLargestLevelSum(root.left, k), self.kthLargestLevelSum(root.right, k))"
    },
    {
        "number": 2584,
        "title": "Split the Array to Make Coprime Products",
        "difficulty": 2,
        "answer": "        n = len(nums)\n        if n == 0:\n            return -1\n        if n == 1:\n            return 0\n        if n == 2:\n            return 1\n        if nums[0] == nums[1]:\n            return 0\n        if nums[0] == nums[n - 1]:\n            return n - 1\n        if nums[0] == nums[n - 2]:\n            return n - 2\n        if nums[0] == nums[n - 3]:\n            return n - 3\n        if nums[0] == nums[n - 4]:\n            return n - 4\n        if nums[0] == nums[n - 5]:\n            return n - 5\n        if nums[0] == nums[n - 6]:\n            return n - 6\n        if nums[0] == nums[n - 7]:\n            return n - 7\n        if nums[0] == nums[n - 8]:\n            return n - 8\n        if nums[0] == nums[n -"
    },
    {
        "number": 2585,
        "title": "Number of Ways to Earn Points",
        "difficulty": 2,
        "answer": "        n = len(types)\n        if n == 0:\n            return 0\n        if target == 0:\n            return 1\n        if target < 0:\n            return 0\n        if target > n * (n - 1) * (n - 2) * (n - 3) * (n - 4):\n            return 0\n        if target == n * (n - 1) * (n - 2) * (n - 3) * (n - 4):\n            return 1\n        if target == n * (n - 1) * (n - 2) * (n - 3) * (n - 4) + 1:\n            return 2\n        if target == n * (n - 1) * (n - 2) * (n - 3) * (n - 4) + 2:\n            return 3\n        if target == n * (n - 1) * (n - 2) * (n - 3) * (n - 4) + 3:\n            return 4\n        if target == n * (n - 1) * (n - 2) * (n - 3) * (n - 4) +"
    },
    {
        "number": 2586,
        "title": "Count the Number of Vowel Strings in Range",
        "difficulty": 0,
        "answer": "        count = 0\n        for i in range(left, right):\n            if words[i] in \"aeiou\":\n                count += 1\n        return count\n"
    },
    {
        "number": 2587,
        "title": "Rearrange Array to Maximize Prefix Score",
        "difficulty": 1,
        "answer": "        if not nums:\n            return 0\n        n = len(nums)\n        prefix = [0] * n\n        for i in range(n):\n            prefix[i] = nums[i]\n        max_score = 0\n        for i in range(n):\n            for j in range(i+1, n):\n                if nums[i] > 0:\n                    prefix[j] += nums[i]\n                    max_score = max(max_score, prefix[j])\n        return max_score\n"
    },
    {
        "number": 2588,
        "title": "Count the Number of Beautiful Subarrays",
        "difficulty": 1,
        "answer": "        n = len(nums)\n        dp = [0] * (n + 1)\n        for i in range(1, n + 1):\n            dp[i] = max(dp[i - 1] + nums[i - 1], dp[i - 1] + nums[i])\n        return dp[n]\n"
    },
    {
        "number": 2589,
        "title": "Minimum Time to Complete All Tasks",
        "difficulty": 2,
        "answer": "        n = len(tasks)\n        if n == 0:\n            return 0\n        elif n == 1:\n            return tasks[0][1] - tasks[0][0]\n        elif n == 2:\n            return min(tasks[0][1] - tasks[0][0], tasks[1][1] - tasks[1][0])\n        else:\n            t = [0] * n\n            t[0] = tasks[0][1] - tasks[0][0]\n            for i in range(1, n):\n                t[i] = min(t[i - 1], tasks[i][1] - tasks[i][0])\n            return t[n - 1]\n"
    },
    {
        "number": 2591,
        "title": "Distribute Money to Maximum Children",
        "difficulty": 0,
        "answer": "        if children == 0:\n            return -1\n        elif children == 1:\n            return 1\n        elif children == 2:\n            return 2\n        elif children == 3:\n            return 3\n        elif children == 4:\n            return 4\n        elif children == 5:\n            return 5\n        elif children == 6:\n            return 6\n        elif children == 7:\n            return 7\n        elif children == 8:\n            return 8\n        elif children == 9:\n            return 9\n        elif children == 10:\n            return 10\n        elif children == 11:\n            return 11\n        elif children == 12:\n            return 12\n        elif children == 13:\n            return 13\n        elif children == 14:\n            return 14\n        elif children == 15:\n            return 15\n        elif children == 16:\n            return 16\n        elif children == 17:\n            return 17\n        elif children == 18:\n            return 18\n        elif children == 19:\n            return 19\n        elif children == 20:\n            return"
    },
    {
        "number": 2592,
        "title": "Maximize Greatness of an Array",
        "difficulty": 1,
        "answer": "        n = len(nums)\n        if n == 0:\n            return 0\n        max_greatness = 0\n        for i in range(n):\n            max_greatness = max(max_greatness, nums[i])\n        return max_greatness\n"
    },
    {
        "number": 2593,
        "title": "Find Score of an Array After Marking All Elements",
        "difficulty": 1,
        "answer": "        n = len(nums)\n        if n == 0:\n            return 0\n        if n == 1:\n            return nums[0]\n        if n == 2:\n            return nums[0] + nums[1]\n        if n == 3:\n            return nums[0] + nums[1] + nums[2]\n        if n == 4:\n            return nums[0] + nums[1] + nums[2] + nums[3]\n        if n == 5:\n            return nums[0] + nums[1] + nums[2] + nums[3] + nums[4]\n        if n == 6:\n            return nums[0] + nums[1] + nums[2] + nums[3] + nums[4] + nums[5]\n        if n == 7:\n            return nums[0] + nums[1] + nums[2] + nums[3] + nums[4] + nums[5] + nums[6]"
    },
    {
        "number": 2594,
        "title": "Minimum Time to Repair Cars",
        "difficulty": 1,
        "answer": "        n = len(ranks)\n        if n == 0:\n            return 0\n        if n == 1:\n            return min(ranks[0] * cars, cars)\n        if n == 2:\n            return min(ranks[0] * cars, ranks[1] * cars)\n        if n == 3:\n            return min(ranks[0] * cars, ranks[1] * ranks[2] * ranks[1] * ranks[2])\n        if n == 4:\n            return min(ranks[0] * cars, ranks[1] * ranks[2] * ranks[3] * ranks[1] * ranks[2] * ranks[3])\n        if n == 5:\n            return min(ranks[0] * cars, ranks[1] * ranks[2] * ranks[3] * ranks[4] * ranks[1] * ranks[2] * ranks[3] * ranks[4])\n        if n == 6:\n            return min(ranks[0] * cars, ranks[1] * ranks[2] * ranks[3] *"
    },
    {
        "number": 2595,
        "title": "Number of Even and Odd Bits",
        "difficulty": 0,
        "answer": "        even = 0\n        odd = 0\n        while n > 0:\n            if n % 2 == 0:\n                even += 1\n            else:\n                odd += 1\n            n /= 2\n        return [even, odd]\n"
    },
    {
        "number": 2596,
        "title": "Check Knight Tour Configuration",
        "difficulty": 1,
        "answer": "        n = len(grid)\n        if n == 0:\n            return False\n        if n == 1:\n            return grid[0][0] == 0\n        if n == 2:\n            return grid[0][0] == 0 and grid[1][1] == 0\n        if n == 3:\n            return grid[0][0] == 0 and grid[1][1] == 0 and grid[2][2] == 0\n        if n == 4:\n            return grid[0][0] == 0 and grid[1][1] == 0 and grid[2][2] == 0 and grid[3][3] == 0\n        if n == 5:\n            return grid[0][0] == 0 and grid[1][1] == 0 and grid[2][2] == 0 and grid[3][3] == 0 and grid[4][4] == 0\n        if n == 6:\n            return grid[0][0] == 0 and grid[1][1] == 0 and grid[2][2] == 0 and grid[3][3] == 0 and grid[4][4]"
    },
    {
        "number": 2597,
        "title": "The Number of Beautiful Subsets",
        "difficulty": 1,
        "answer": "        if not nums or k == 0:\n            return 0\n        n = len(nums)\n        dp = [0] * (k + 1)\n        dp[0] = 1\n        for i in range(1, k + 1):\n            dp[i] = 0\n            for j in range(i):\n                if i - j < k:\n                    dp[i] += dp[j]\n        return dp[k]\n"
    },
    {
        "number": 2598,
        "title": "Smallest Missing Non-negative Integer After Operations",
        "difficulty": 1,
        "answer": "        nums.sort()\n        for i in range(len(nums)):\n            if nums[i] < 0:\n                nums[i] += nums[i]\n            else:\n                nums[i] -= nums[i]\n        return max(nums)\n"
    }
]