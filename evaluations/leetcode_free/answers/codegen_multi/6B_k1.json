[
    {
        "number": 1,
        "title": "Two Sum",
        "difficulty": 0,
        "answer": "        dic = {}\n        for i in range(len(nums)):\n            if nums[i] in dic:\n                return [dic[nums[i]], i]\n            dic[target - nums[i]] = i\n        return []\n"
    },
    {
        "number": 2,
        "title": "Add Two Numbers",
        "difficulty": 1,
        "answer": "        if l1 is None or l2 is None:\n            return None\n        if l1 is None or l2 is None:\n            return None\n        if l1.val == 0:\n            return l2\n        if l2.val == 0:\n            return l1\n        if l1.val < l2.val:\n            l1, l2 = l2, l1\n        if l1.val == 0:\n            return l2\n        if l2.val == 0:\n            return l1\n        l1_head = l1\n        l2_head = l2\n        sum = 0\n        while l1_head is not None and l2_head is not None:\n            sum += l1_head.val + l2_head.val\n            l1_head = l1_head.next\n            l2_head = l2_head.next\n        if l1_head is not None:\n            sum += l1_head.val\n        if l2_head is not None:\n            sum += l2_head.val\n        if sum"
    },
    {
        "number": 3,
        "title": "Longest Substring Without Repeating Characters",
        "difficulty": 1,
        "answer": "        # https://leetcode.com/problems/longest-substring-without-repeating-characters/discuss/105500/Python-C-Solution-with-explanation\n        # https://leetcode.com/problems/longest-substring-without-repeating-characters/discuss/105501/C-Solution-with-explanation\n        # https://leetcode.com/problems/longest-substring-without-repeating-characters/discuss/105502/Java-Solution-with-explanation\n        # https://leetcode.com/problems/longest-substring-without-repeating-characters/discuss/105503/Python-Solution-with-explanation\n        # https://leetcode.com/problems/longest-substring-without-repeating-characters/discuss/105504/C++-Solution-with-explanation\n        # https://leetcode.com/problems/longest-substring-without-repeating-characters/"
    },
    {
        "number": 4,
        "title": "Median of Two Sorted Arrays",
        "difficulty": 2,
        "answer": "        if len(nums1) == 0:\n            return nums2[0]\n        if len(nums2) == 0:\n            return nums1[0]\n        if len(nums1) == 1:\n            return nums1[0]\n        if len(nums2) == 1:\n            return nums2[0]\n        if len(nums1) == 2:\n            return (nums1[0] + nums2[0]) / 2.0\n        if len(nums2) == 2:\n            return (nums1[1] + nums2[1]) / 2.0\n        if len(nums1) == 3:\n            return (nums1[0] + nums1[1] + nums2[0]) / 3.0\n        if len(nums2) == 3:\n            return (nums1[2] + nums2[1] + nums2[2]) / 3.0\n        if len(nums1) == 4:\n            return (nums1[0"
    },
    {
        "number": 5,
        "title": "Longest Palindromic Substring",
        "difficulty": 1,
        "answer": "        # https://leetcode.com/problems/longest-palindrome/discuss/105500/Python-C-solution-with-explanation\n        # https://leetcode.com/problems/longest-palindrome/discuss/105501/Java-solution-with-explanation\n        # https://leetcode.com/problems/longest-palindrome/discuss/105502/C++-solution-with-explanation\n        # https://leetcode.com/problems/longest-palindrome/discuss/105503/Python-solution-with-explanation\n        # https://leetcode.com/problems/longest-palindrome/discuss/105504/C-solution-with-explanation\n        # https://leetcode.com/problems/longest-palindrome/discuss/105505/Java-solution-with-explanation\n        # https://leetcode.com/problems/longest-palindrome"
    },
    {
        "number": 6,
        "title": "Zigzag Conversion",
        "difficulty": 1,
        "answer": "        if numRows == 1:\n            return s\n        if numRows == 2:\n            return \"\".join(s)\n        if numRows == 3:\n            return \"\".join(s)\n        if numRows == 4:\n            return \"\".join(s)\n        if numRows == 5:\n            return \"\".join(s)\n        if numRows == 6:\n            return \"\".join(s)\n        if numRows == 7:\n            return \"\".join(s)\n        if numRows == 8:\n            return \"\".join(s)\n        if numRows == 9:\n            return \"\".join(s)\n        if numRows == 10:\n            return \"\".join(s)\n        if numRows == 11:\n            return \"\".join(s)\n        if numRows == 12:\n            return \"\".join(s)\n        if numRows == 13:\n            return \"\".join(s)\n        if numRows == 14:\n            return \"\".join(s)\n        if num"
    },
    {
        "number": 7,
        "title": "Reverse Integer",
        "difficulty": 1,
        "answer": "        if x < 0:\n            return 0\n        if x > 2147483647:\n            return 0\n        if x < -2147483648:\n            return 0\n        if x < 0:\n            return 0\n        if x > 2147483647:\n            return 0\n        if x < -2147483648:\n            return 0\n        if x < 0:\n            return 0\n        if x > 2147483647:\n            return 0\n        if x < -2147483648:\n            return 0\n        if x < 0:\n            return 0\n        if x > 2147483647:\n            return 0\n        if x < -2147483648:\n            return 0\n        if x < 0:\n            return 0\n        if x > 2147483647:\n            return 0\n        if x < -2147483648:\n            return 0\n        if x < 0:\n            return 0\n        if x > 2147483647:\n            return 0\n        if x < -2147483648:\n            return"
    },
    {
        "number": 8,
        "title": "String to Integer (atoi)",
        "difficulty": 1,
        "answer": "        # Your Solution object will be instantiated and called as such:\n        # obj = Solution()\n        # param_1 = s\n        # return obj.myAtoi(param_1)"
    },
    {
        "number": 9,
        "title": "Palindrome Number",
        "difficulty": 0,
        "answer": "        if x < 0:\n            return False\n        if x == 0:\n            return True\n        if x < 10:\n            return x == int(str(x)[::-1])\n        else:\n            return self.isPalindrome(x // 10) and self.isPalindrome(x % 10)"
    },
    {
        "number": 10,
        "title": "Regular Expression Matching",
        "difficulty": 2,
        "answer": "        if not s or not p:\n            return False\n        if p == '.':\n            return True\n        if p == '*':\n            return self.isMatch(s, p[1:])\n        if p[0] == '.':\n            return self.isMatch(s[1:], p[1:])\n        if p[-1] == '*':\n            return self.isMatch(s[:-1], p[:-1])\n        if p[0] == '*':\n            return self.isMatch(s[1:], p[1:])\n        if p[-1] == '.':\n            return self.isMatch(s[:-1], p[:-1])\n        if p[0] == '.':\n            return self.isMatch(s[1:], p[1:])\n        if p[-1] == '*':\n            return self.isMatch(s[:-1], p[:-1])\n        if p[0] == '*':\n            return self.isMatch(s[1:], p["
    },
    {
        "number": 11,
        "title": "Container With Most Water",
        "difficulty": 1,
        "answer": "        if len(height) == 1:\n            return height[0]\n        if len(height) == 2:\n            return max(height[0], height[1])\n        if len(height) == 3:\n            return max(height[0], height[1]) * max(height[2], height[1])\n        if len(height) == 4:\n            return max(height[0], height[1]) * max(height[2], height[3])\n        if len(height) == 5:\n            return max(height[0], height[1]) * max(height[2], height[3]) * max(height[4], height[3])\n        if len(height) == 6:\n            return max(height[0], height[1]) * max(height[2], height[3]) * max(height[4], height[5])\n        if len(height) == 7:\n            return max(height[0], height[1]) * max(height[2], height[3]) * max(height[4], height[5]) * max(height[6], height"
    },
    {
        "number": 12,
        "title": "Integer to Roman",
        "difficulty": 1,
        "answer": "        roman_numeral = {1: 'I', 5: 'V', 10: 'X', 50: 'L', 100: 'C', 500: 'D', 1000: 'M'}\n        result = \"\"\n        while num > 0:\n            if num % 1000 == 0:\n                result += roman_numeral[num // 1000] + 'M'\n                num = num // 1000\n            elif num % 100 == 0:\n                result += roman_numeral[num // 100] + 'CM'\n                num = num // 100\n            elif num % 50 == 0:\n                result += roman_numeral[num // 50] + 'XC'\n                num = num // 50\n            elif num % 10 == 0:\n                result += roman_numeral[num // 10] + 'CD'\n                num = num // 10\n            elif num % 5 == 0:\n                result += roman_numeral[num // 5] + 'CV'\n                num = num // 5\n            else:\n                result += roman_numeral[num]\n                num ="
    },
    {
        "number": 13,
        "title": "Roman to Integer",
        "difficulty": 0,
        "answer": "        n = len(s)\n        if n == 0:\n            return 0\n        if n == 1:\n            return int(s)\n        if n == 2:\n            return int(s[0]) + int(s[1])\n        if n == 3:\n            return int(s[0]) + int(s[1]) + int(s[2])\n        if n == 4:\n            return int(s[0]) + int(s[1]) + int(s[2]) + int(s[3])\n        if n == 5:\n            return int(s[0]) + int(s[1]) + int(s[2]) + int(s[3]) + int(s[4])\n        if n == 6:\n            return int(s[0]) + int(s[1]) + int(s[2]) + int(s[3]) + int(s[4]) + int(s[5])\n        if n == 7:\n            return int(s[0]) + int(s[1]) + int(s[2]) + int("
    },
    {
        "number": 14,
        "title": "Longest Common Prefix",
        "difficulty": 0,
        "answer": "        if len(strs) == 0:\n            return \"\"\n        if len(strs) == 1:\n            return strs[0]\n        prefix = \"\"\n        for i in range(0, len(strs[0])):\n            for j in range(0, len(strs[0])):\n                if i == j:\n                    continue\n                if strs[0][i]!= strs[0][j]:\n                    break\n            else:\n                prefix += strs[0][i]\n        return prefix"
    },
    {
        "number": 15,
        "title": "3Sum",
        "difficulty": 1,
        "answer": "        nums.sort()\n        res = []\n        for i in range(len(nums) - 2):\n            if i > 0 and nums[i] == nums[i - 1]:\n                continue\n            for j in range(i + 1, len(nums) - 1):\n                if j > i + 1 and nums[j] == nums[j - 1]:\n                    continue\n                for k in range(j + 1, len(nums)):\n                    if k > j + 1 and nums[k] == nums[k - 1]:\n                        continue\n                    if nums[i] + nums[j] + nums[k] == 0:\n                        res.append([nums[i], nums[j], nums[k]])\n        return res\n"
    },
    {
        "number": 16,
        "title": "3Sum Closest",
        "difficulty": 1,
        "answer": "        nums.sort()\n        n = len(nums)\n        if n < 3:\n            return 0\n        if n == 3:\n            return nums[0] + nums[1] + nums[2]\n        if n == 4:\n            return nums[0] + nums[1] + nums[2] + nums[3]\n        if n == 5:\n            return nums[0] + nums[1] + nums[2] + nums[3] + nums[4]\n        if n == 6:\n            return nums[0] + nums[1] + nums[2] + nums[3] + nums[4] + nums[5]\n        if n == 7:\n            return nums[0] + nums[1] + nums[2] + nums[3] + nums[4] + nums[5] + nums[6]\n        if n == 8:\n            return nums[0] + nums[1] + nums[2] + num"
    },
    {
        "number": 17,
        "title": "Letter Combinations of a Phone Number",
        "difficulty": 1,
        "answer": "        self.result = []\n        self.digit_map = {\n            \"2\": \"abc\",\n            \"3\": \"def\",\n            \"4\": \"ghi\",\n            \"5\": \"jkl\",\n            \"6\": \"mno\",\n            \"7\": \"pqrs\",\n            \"8\": \"tuv\",\n            \"9\": \"wxyz\"\n        }\n        self.digit_map.update({\n            \"0\": \"\",\n            \"1\": \"\"\n        })\n        self.digit_map.update({\n            \"2\": \"abc\",\n            \"3\": \"def\",\n            \"4\": \"ghi\",\n            \"5\": \"jkl\",\n            \"6\": \"mno\",\n            \"7\": \"pqrs\",\n            \"8\": \"tuv\",\n            \"9\": \"wxyz\"\n        })\n        self.digit_map.update({\n            \"0\": \"\",\n            \"1\": \"\"\n        })\n        self.digit_map.update({\n            \"2\": \"abc\",\n            \"3\":"
    },
    {
        "number": 18,
        "title": "4Sum",
        "difficulty": 1,
        "answer": "        nums = sorted(nums)\n        result = []\n        for i in range(len(nums) - 3):\n            if i > 0 and nums[i] == nums[i - 1]:\n                continue\n            for j in range(i + 1, len(nums) - 2):\n                if j > i + 1 and nums[j] == nums[j - 1]:\n                    continue\n                for k in range(j + 1, len(nums) - 1):\n                    if k > j + 1 and nums[k] == nums[k - 1]:\n                        continue\n                    for l in range(k + 1, len(nums)):\n                        if l > k + 1 and nums[l] == nums[l - 1]:\n                            continue\n                        if nums[i] + nums[j] + nums[k] + nums[l] == target:\n                            result.append([nums[i], nums[j], nums[k], nums[l]])\n        return result\n"
    },
    {
        "number": 19,
        "title": "Remove Nth Node From End of List",
        "difficulty": 1,
        "answer": "        if head is None:\n            return None\n        if n == 1:\n            return head.next\n        if n == 2:\n            return self.removeNthFromEnd(head.next, 1)\n        if n == 3:\n            return self.removeNthFromEnd(head.next.next, 2)\n        if n == 4:\n            return self.removeNthFromEnd(head.next.next.next, 3)\n        if n == 5:\n            return self.removeNthFromEnd(head.next.next.next.next, 4)\n        if n == 6:\n            return self.removeNthFromEnd(head.next.next.next.next.next, 5)\n        if n == 7:\n            return self.removeNthFromEnd(head.next.next.next.next.next.next, 6)\n        if n == 8:\n            return self.removeNthFromEnd(head.next.next.next.next.next.next.next, 7)\n        if n == 9:\n            return self.removeNthFromEnd"
    },
    {
        "number": 20,
        "title": "Valid Parentheses",
        "difficulty": 0,
        "answer": "        stack = []\n        for c in s:\n            if c == '(':\n                stack.append(c)\n            elif c == ')':\n                if len(stack) == 0:\n                    return False\n                elif stack[-1]!= '(':\n                    return False\n                stack.pop()\n            elif c == '{':\n                stack.append(c)\n            elif c == '}':\n                if len(stack) == 0:\n                    return False\n                elif stack[-1]!= '{':\n                    return False\n                stack.pop()\n            elif c == '[':\n                stack.append(c)\n            elif c == ']':\n                if len(stack) == 0:\n                    return False\n                elif stack[-1]!= '[':\n                    return False\n                stack.pop()\n        return len(stack) == 0\n"
    },
    {
        "number": 21,
        "title": "Merge Two Sorted Lists",
        "difficulty": 0,
        "answer": "        if not list1 and not list2:\n            return None\n        elif not list1:\n            return list2\n        elif not list2:\n            return list1\n        else:\n            head = ListNode(0)\n            p = head\n            while list1 and list2:\n                if list1.val < list2.val:\n                    p.next = list1\n                    list1 = list1.next\n                else:\n                    p.next = list2\n                    list2 = list2.next\n                p = p.next\n            if list1:\n                p.next = list1\n            if list2:\n                p.next = list2\n            return head.next\n"
    },
    {
        "number": 22,
        "title": "Generate Parentheses",
        "difficulty": 1,
        "answer": "        self.result = []\n        self.generateParenthesisHelper(n, 0, 0, \"\")\n        return self.result"
    },
    {
        "number": 23,
        "title": "Merge k Sorted Lists",
        "difficulty": 2,
        "answer": "        if not lists:\n            return None\n        if len(lists) == 1:\n            return lists[0]\n        if len(lists) == 2:\n            return self.mergeTwoLists(lists[0], lists[1])\n        if len(lists) == 3:\n            return self.mergeThreeLists(lists[0], lists[1], lists[2])\n        return self.mergeKLists(lists[:len(lists) // 2], lists[len(lists) // 2:])"
    },
    {
        "number": 24,
        "title": "Swap Nodes in Pairs",
        "difficulty": 1,
        "answer": "        if head is None or head.next is None:\n            return head"
    },
    {
        "number": 25,
        "title": "Reverse Nodes in k-Group",
        "difficulty": 2,
        "answer": "        if head is None:\n            return None\n        if k == 1:\n            return head\n        if k == 2:\n            return self.reverseKGroup(head.next, 1)\n        if k == 3:\n            return self.reverseKGroup(head.next.next, 1)\n        if k == 4:\n            return self.reverseKGroup(head.next.next.next, 1)\n        if k == 5:\n            return self.reverseKGroup(head.next.next.next.next, 1)\n        if k == 6:\n            return self.reverseKGroup(head.next.next.next.next.next, 1)\n        if k == 7:\n            return self.reverseKGroup(head.next.next.next.next.next.next, 1)\n        if k == 8:\n            return self.reverseKGroup(head.next.next.next.next.next.next.next, 1)\n        if k == 9:\n            return self.reverseKGroup(head.next.next.next.next.next.next.next.next"
    },
    {
        "number": 26,
        "title": "Remove Duplicates from Sorted Array",
        "difficulty": 0,
        "answer": "        n = len(nums)\n        if n == 0:\n            return 0\n        elif n == 1:\n            return 1\n        elif n == 2:\n            return 1 if nums[0] == nums[1] else 2\n        elif n == 3:\n            return 1 if nums[0] == nums[1] and nums[1] == nums[2] else 2\n        elif n == 4:\n            return 1 if nums[0] == nums[1] and nums[1] == nums[2] and nums[2] == nums[3] else 2\n        elif n == 5:\n            return 1 if nums[0] == nums[1] and nums[1] == nums[2] and nums[2] == nums[3] and nums[3] == nums[4] else 2\n        elif n == 6:\n            return 1 if nums[0] == nums[1] and nums[1] == nums[2] and nums[2] =="
    },
    {
        "number": 27,
        "title": "Remove Element",
        "difficulty": 0,
        "answer": "        k = 0\n        for i in range(len(nums)):\n            if nums[i] == val:\n                k += 1\n            else:\n                nums[i - k] = nums[i]\n        return k"
    },
    {
        "number": 28,
        "title": "Find the Index of the First Occurrence in a String",
        "difficulty": 0,
        "answer": "        if not haystack:\n            return -1\n        if not needle:\n            return 0\n        if needle == haystack:\n            return 0\n        if needle[0]!= haystack[0]:\n            return -1\n        return self.strStr(haystack[1:], needle[1:]) + 1"
    },
    {
        "number": 29,
        "title": "Divide Two Integers",
        "difficulty": 1,
        "answer": "        if divisor == 0:\n            return 0"
    },
    {
        "number": 30,
        "title": "Substring with Concatenation of All Words",
        "difficulty": 2,
        "answer": "        n = len(s)\n        if n == 0:\n            return []\n        if n == 1:\n            return [0]\n        if n == 2:\n            return [0, n]\n        if n == 3:\n            return [0, n, n + 1]\n        if n == 4:\n            return [0, n, n + 1, n + 2]\n        if n == 5:\n            return [0, n, n + 1, n + 2, n + 3]\n        if n == 6:\n            return [0, n, n + 1, n + 2, n + 3, n + 4]\n        if n == 7:\n            return [0, n, n + 1, n + 2, n + 3, n + 4, n + 5]\n        if n == 8:\n            return [0, n, n + 1, n + 2, n + 3, n + 4, n + 5, n + 6]\n        if n == 9:\n            return [0, n, n + 1, n + 2, n + 3, n + 4"
    },
    {
        "number": 31,
        "title": "Next Permutation",
        "difficulty": 1,
        "answer": "        nums.sort()\n        i = len(nums) - 2\n        while i >= 0 and nums[i] >= nums[i + 1]:\n            i -= 1\n        if i < 0:\n            return\n        j = len(nums) - 1\n        while j >= 0 and nums[j] <= nums[i]:\n            j -= 1\n        if j < 0:\n            return\n        nums[i], nums[j] = nums[j], nums[i]\n        nums[i + 1:], nums[:j + 1] = nums[:j + 1], nums[i + 1:]\n        return"
    },
    {
        "number": 32,
        "title": "Longest Valid Parentheses",
        "difficulty": 2,
        "answer": "        n = len(s)\n        if n == 0:\n            return 0\n        dp = [0] * (n + 1)\n        for i in range(1, n + 1):\n            if s[i - 1] == '(':\n                dp[i] = dp[i - 1] + 1\n            else:\n                dp[i] = max(dp[i - 1], dp[i - 2])\n        return max(dp)\n"
    },
    {
        "number": 33,
        "title": "Search in Rotated Sorted Array",
        "difficulty": 1,
        "answer": "        n = len(nums)\n        if n == 0:\n            return -1\n        if n == 1:\n            return nums[0] if nums[0] == target else -1\n        if n == 2:\n            return nums[0] if nums[0] == target else nums[1] if nums[1] == target else -1\n        if n == 3:\n            return nums[0] if nums[0] == target else nums[1] if nums[1] == target else nums[2] if nums[2] == target else -1\n        if n == 4:\n            return nums[0] if nums[0] == target else nums[1] if nums[1] == target else nums[2] if nums[2] == target else nums[3] if nums[3] == target else -1\n        if n == 5:\n            return nums[0] if nums[0] == target else nums[1] if nums[1] == target else nums[2"
    },
    {
        "number": 34,
        "title": "Find First and Last Position of Element in Sorted Array",
        "difficulty": 1,
        "answer": "        if not nums:\n            return [-1, -1]"
    },
    {
        "number": 35,
        "title": "Search Insert Position",
        "difficulty": 0,
        "answer": "        if not nums:\n            return 0\n        if len(nums) == 1:\n            return 0 if nums[0] == target else 1\n        if len(nums) == 2:\n            return 0 if nums[0] <= target and nums[1] >= target else 1\n        if len(nums) == 3:\n            return 0 if nums[0] <= target and nums[1] <= target and nums[2] >= target else 1\n        if len(nums) == 4:\n            return 0 if nums[0] <= target and nums[1] <= target and nums[2] <= target and nums[3] >= target else 1\n        if len(nums) == 5:\n            return 0 if nums[0] <= target and nums[1] <= target and nums[2] <= target and nums[3] <= target and nums[4] >= target else 1\n        if len(nums) == 6:\n            return 0 if nums[0] <= target and nums[1] <= target and nums["
    },
    {
        "number": 36,
        "title": "Valid Sudoku",
        "difficulty": 1,
        "answer": "        # check row\n        for i in range(9):\n            if not self.check_row(board, i):\n                return False\n        # check column\n        for i in range(9):\n            if not self.check_column(board, i):\n                return False\n        # check sub-box\n        for i in range(3):\n            for j in range(3):\n                if not self.check_sub_box(board, i, j):\n                    return False\n        return True"
    },
    {
        "number": 37,
        "title": "Sudoku Solver",
        "difficulty": 2,
        "answer": "        self.solve(board)"
    },
    {
        "number": 38,
        "title": "Count and Say",
        "difficulty": 1,
        "answer": "        if n == 1:\n            return \"1\"\n        elif n == 2:\n            return \"11\"\n        else:\n            return self.countAndSay(n - 1) + self.countAndSay(n - 2)"
    },
    {
        "number": 39,
        "title": "Combination Sum",
        "difficulty": 1,
        "answer": "        candidates.sort()\n        result = []\n        self.combinationSumRecu(candidates, target, result, [], 0)\n        return result"
    },
    {
        "number": 40,
        "title": "Combination Sum II",
        "difficulty": 1,
        "answer": "        candidates.sort()\n        self.combinationSum2_helper(candidates, target, [], 0)\n        return self.result"
    },
    {
        "number": 41,
        "title": "First Missing Positive",
        "difficulty": 2,
        "answer": "        nums = sorted(nums)\n        for i in range(1, len(nums)):\n            if nums[i]!= i + 1:\n                return i + 1\n        return len(nums) + 1"
    },
    {
        "number": 42,
        "title": "Trapping Rain Water",
        "difficulty": 2,
        "answer": "        # https://leetcode.com/problems/trapping-rain-water/discuss/105586/Java-C-solution-with-explanation\n        # https://leetcode.com/problems/trapping-rain-water/discuss/105586/Java-C-solution-with-explanation\n        # https://leetcode.com/problems/trapping-rain-water/discuss/105586/Java-C-solution-with-explanation\n        # https://leetcode.com/problems/trapping-rain-water/discuss/105586/Java-C-solution-with-explanation\n        # https://leetcode.com/problems/trapping-rain-water/discuss/105586/Java-C-solution-with-explanation\n        # https://leetcode.com/problems/trapping-rain-water/discuss/105586/Java-C-solution-with-explanation\n        # https://leetcode.com/"
    },
    {
        "number": 43,
        "title": "Multiply Strings",
        "difficulty": 1,
        "answer": "        num1 = num1.replace(\" \", \"\")\n        num2 = num2.replace(\" \", \"\")\n        num1 = num1.replace(\"-\", \"\")\n        num2 = num2.replace(\"-\", \"\")\n        num1 = num1.replace(\"+\", \"\")\n        num2 = num2.replace(\"+\", \"\")\n        num1 = num1.replace(\"x\", \"\")\n        num2 = num2.replace(\"x\", \"\")\n        num1 = num1.replace(\"0\", \"\")\n        num2 = num2.replace(\"0\", \"\")\n        num1 = num1.replace(\"1\", \"\")\n        num2 = num2.replace(\"1\", \"\")\n        num1 = num1.replace(\"2\", \"\")\n        num2 = num2.replace(\"2\", \"\")\n        num1 = num1.replace(\"3\", \"\")\n        num2 = num2.replace(\"3\", \"\")\n        num1 = num1.replace(\"4\", \"\")\n        num2 = num2.replace(\"4\", \"\")\n"
    },
    {
        "number": 44,
        "title": "Wildcard Matching",
        "difficulty": 2,
        "answer": "        def match(s, p):\n            if p == '':\n                return True\n            if p == '*':\n                return True\n            if p == '?':\n                return s!= ''\n            if p[0] == '?':\n                return match(s[1:], p[1:])\n            if p[0] == '*':\n                return match(s, p[1:]) or match(s[1:], p)\n            if p[0] == s[0]:\n                return match(s[1:], p[1:])\n            return False"
    },
    {
        "number": 45,
        "title": "Jump Game II",
        "difficulty": 1,
        "answer": "        if len(nums) == 1:\n            return 0\n        if len(nums) == 2:\n            return 1\n        if len(nums) == 3:\n            return 2\n        if len(nums) == 4:\n            return 3\n        if len(nums) == 5:\n            return 4\n        if len(nums) == 6:\n            return 5\n        if len(nums) == 7:\n            return 6\n        if len(nums) == 8:\n            return 7\n        if len(nums) == 9:\n            return 8\n        if len(nums) == 10:\n            return 9\n        if len(nums) == 11:\n            return 10\n        if len(nums) == 12:\n            return 11\n        if len(nums) == 13:\n            return 12\n        if len(nums) == 14:\n            return 13\n        if len(nums) == 15:\n            return 14\n        if len(nums) == 16:\n            return 15\n        if len(nums) == 17:"
    },
    {
        "number": 46,
        "title": "Permutations",
        "difficulty": 1,
        "answer": "        if not nums:\n            return []\n        if len(nums) == 1:\n            return [nums]\n        res = []\n        for i in range(len(nums)):\n            for j in self.permute(nums[:i] + nums[i + 1:]):\n                res.append(list(nums[:i] + j + nums[i + 1:]))\n        return res"
    },
    {
        "number": 47,
        "title": "Permutations II",
        "difficulty": 1,
        "answer": "        if not nums:\n            return []\n        nums.sort()\n        self.permuteUniqueHelper(nums, [], [])\n        return self.result"
    },
    {
        "number": 48,
        "title": "Rotate Image",
        "difficulty": 1,
        "answer": "        n = len(matrix)\n        for i in range(n // 2):\n            for j in range(i, n - i - 1):\n                tmp = matrix[i][j]\n                matrix[i][j] = matrix[n - j - 1][i]\n                matrix[n - j - 1][i] = matrix[n - i - 1][n - j - 1]\n                matrix[n - i - 1][n - j - 1] = matrix[j][n - i - 1]\n                matrix[j][n - i - 1] = tmp\n"
    },
    {
        "number": 49,
        "title": "Group Anagrams",
        "difficulty": 1,
        "answer": "        dic = {}\n        for s in strs:\n            dic[s] = dic.get(s, 0) + 1\n        res = []\n        for k, v in dic.items():\n            if v == 1:\n                res.append([k])\n            else:\n                res.append([k] + [k[i:] + k[:i] for i in range(len(k)) if k[i]!= k[i + 1]])\n        return res"
    },
    {
        "number": 50,
        "title": "Pow(x, n)",
        "difficulty": 1,
        "answer": "        if n == 0:\n            return 1\n        if n < 0:\n            return 1 / self.myPow(x, -n)\n        if n == 1:\n            return x\n        if n == 2:\n            return x * x\n        if n % 2 == 0:\n            return self.myPow(x * x, n / 2)\n        return x * self.myPow(x * x, n / 2)"
    },
    {
        "number": 51,
        "title": "N-Queens",
        "difficulty": 2,
        "answer": "        self.n = n\n        self.result = []\n        self.solve(0)\n        return self.result"
    },
    {
        "number": 52,
        "title": "N-Queens II",
        "difficulty": 2,
        "answer": "        self.n = n\n        self.n_queens = [0] * n\n        self.n_queens[0] = 1\n        self.n_queens[1] = 1\n        self.n_queens[2] = 1\n        self.n_queens[3] = 1\n        self.n_queens[4] = 1\n        self.n_queens[5] = 1\n        self.n_queens[6] = 1\n        self.n_queens[7] = 1\n        self.n_queens[8] = 1\n        self.n_queens[9] = 1\n        self.n_queens[10] = 1\n        self.n_queens[11] = 1\n        self.n_queens[12] = 1\n        self.n_queens[13] = 1\n        self.n_queens[14] = 1\n        self.n_queens[15] = 1\n        self.n_queens[16] = 1\n        self.n_queens["
    },
    {
        "number": 53,
        "title": "Maximum Subarray",
        "difficulty": 1,
        "answer": "        # https://leetcode.com/problems/max-subarray/discuss/105586/Java-O(n)-solution-with-explanation\n        # https://leetcode.com/problems/max-subarray/discuss/105586/Java-O(n)-solution-with-explanation\n        # https://leetcode.com/problems/max-subarray/discuss/105586/Java-O(n)-solution-with-explanation\n        # https://leetcode.com/problems/max-subarray/discuss/105586/Java-O(n)-solution-with-explanation\n        # https://leetcode.com/problems/max-subarray/discuss/105586/Java-O(n)-solution-with-explanation\n        # https://leetcode.com/problems/max-subarray/discuss/105586/Java-O(n)-solution-with-explanation\n        # https://leetcode.com/"
    },
    {
        "number": 54,
        "title": "Spiral Matrix",
        "difficulty": 1,
        "answer": "        if not matrix:\n            return []\n        m, n = len(matrix), len(matrix[0])\n        res = []\n        for i in range(m):\n            for j in range(n):\n                res.append(matrix[i][j])\n            if i < m - 1:\n                for j in range(n):\n                    res.append(matrix[i][j])\n            if j < n - 1:\n                for i in range(m):\n                    res.append(matrix[i][j])\n        return res\n"
    },
    {
        "number": 55,
        "title": "Jump Game",
        "difficulty": 1,
        "answer": "        if len(nums) == 1:\n            return True\n        if len(nums) == 2:\n            return nums[0] == 0 and nums[1] == 0\n        if len(nums) == 3:\n            return nums[0] == 0 and nums[1] == 0 and nums[2] == 0\n        if len(nums) == 4:\n            return nums[0] == 0 and nums[1] == 0 and nums[2] == 0 and nums[3] == 0\n        if len(nums) == 5:\n            return nums[0] == 0 and nums[1] == 0 and nums[2] == 0 and nums[3] == 0 and nums[4] == 0\n        if len(nums) == 6:\n            return nums[0] == 0 and nums[1] == 0 and nums[2] == 0 and nums[3] == 0 and nums[4] == 0 and nums[5] == 0\n        if len(nums) == 7:"
    },
    {
        "number": 56,
        "title": "Merge Intervals",
        "difficulty": 1,
        "answer": "        # write your code here\n        if not intervals:\n            return []"
    },
    {
        "number": 57,
        "title": "Insert Interval",
        "difficulty": 1,
        "answer": "        if not intervals:\n            return [newInterval]\n        if not newInterval:\n            return intervals\n        if newInterval[0] < intervals[0][0]:\n            return [newInterval] + self.insert(intervals[:0], newInterval)\n        if newInterval[1] > intervals[-1][1]:\n            return self.insert(intervals[:-1], newInterval) + [newInterval]\n        if newInterval[0] <= intervals[0][0] and newInterval[1] >= intervals[-1][1]:\n            return self.insert(intervals[:0], newInterval) + self.insert(intervals[-1:], newInterval)\n        if newInterval[0] <= intervals[0][0]:\n            return self.insert(intervals[:0], newInterval) + self.insert(intervals[1:], newInterval)\n        if newInterval[1] >= intervals[-1][1]:\n            return self.insert(intervals[:-1], newInterval)"
    },
    {
        "number": 58,
        "title": "Length of Last Word",
        "difficulty": 0,
        "answer": "        s = s.strip()\n        if not s:\n            return 0\n        words = s.split()\n        return len(words[-1])"
    },
    {
        "number": 59,
        "title": "Spiral Matrix II",
        "difficulty": 1,
        "answer": "        if n == 1:\n            return [[1]]\n        if n == 2:\n            return [[1, 2]]\n        if n == 3:\n            return [[1, 2, 3]]\n        if n == 4:\n            return [[1, 2, 3, 4]]\n        if n == 5:\n            return [[1, 2, 3, 4, 5]]\n        if n == 6:\n            return [[1, 2, 3, 4, 5, 6]]\n        if n == 7:\n            return [[1, 2, 3, 4, 5, 6, 7]]\n        if n == 8:\n            return [[1, 2, 3, 4, 5, 6, 7, 8]]\n        if n == 9:\n            return [[1, 2, 3, 4, 5, 6, 7, 8, 9]]\n        if n == 10:\n            return [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]]\n        if n == 11:\n            return [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10,"
    },
    {
        "number": 60,
        "title": "Permutation Sequence",
        "difficulty": 2,
        "answer": "        if n < 1:\n            return \"\"\n        if n == 1:\n            return \"1\"\n        if n == 2:\n            return \"12\"\n        if n == 3:\n            return \"123\"\n        if n == 4:\n            return \"1234\"\n        if n == 5:\n            return \"12345\"\n        if n == 6:\n            return \"123456\"\n        if n == 7:\n            return \"1234567\"\n        if n == 8:\n            return \"12345678\"\n        if n == 9:\n            return \"123456789\"\n        if n == 10:\n            return \"1234567890\"\n        if n == 11:\n            return \"12345678901\"\n        if n == 12:\n            return \"123456789012\"\n        if n == 13:\n            return \"1234567890123\"\n        if n == 14:\n            return \"12345678901234\"\n        if n == 15:\n            return \"123456789012345\"\n        if n == 16:\n"
    },
    {
        "number": 61,
        "title": "Rotate List",
        "difficulty": 1,
        "answer": "        if not head:\n            return None\n        if not head.next:\n            return head\n        if k == 0:\n            return head\n        if k == 1:\n            return head.next\n        if k == 2:\n            return self.rotateRight(head.next, 1)\n        if k == 3:\n            return self.rotateRight(head.next, 2)\n        if k == 4:\n            return self.rotateRight(head.next, 3)\n        if k == 5:\n            return self.rotateRight(head.next, 4)\n        if k == 6:\n            return self.rotateRight(head.next, 5)\n        if k == 7:\n            return self.rotateRight(head.next, 6)\n        if k == 8:\n            return self.rotateRight(head.next, 7)\n        if k == 9:\n            return self.rotateRight(head.next, 8)\n        if k == 10:\n            return self.rotateRight(head.next, 9)\n        if k == 11:"
    },
    {
        "number": 62,
        "title": "Unique Paths",
        "difficulty": 1,
        "answer": "        dp = [[0 for _ in range(n)] for _ in range(m)]\n        dp[0][0] = 1\n        for i in range(1, m):\n            dp[i][0] = dp[i - 1][0]\n        for j in range(1, n):\n            dp[0][j] = dp[0][j - 1]\n        for i in range(1, m):\n            for j in range(1, n):\n                dp[i][j] = dp[i - 1][j] + dp[i][j - 1]\n        return dp[m - 1][n - 1]"
    },
    {
        "number": 63,
        "title": "Unique Paths II",
        "difficulty": 1,
        "answer": "        m, n = len(obstacleGrid), len(obstacleGrid[0])\n        dp = [[0 for _ in range(n)] for _ in range(m)]\n        dp[0][0] = 1\n        for i in range(1, m):\n            dp[i][0] = 0\n        for j in range(1, n):\n            dp[0][j] = 0\n        for i in range(1, m):\n            for j in range(1, n):\n                if obstacleGrid[i][j] == 1:\n                    dp[i][j] = 0\n                else:\n                    dp[i][j] = dp[i - 1][j] + dp[i][j - 1]\n        return dp[m - 1][n - 1]"
    },
    {
        "number": 64,
        "title": "Minimum Path Sum",
        "difficulty": 1,
        "answer": "        if not grid:\n            return 0\n        m, n = len(grid), len(grid[0])\n        dp = [[0] * n for _ in range(m)]\n        dp[0][0] = grid[0][0]\n        for i in range(1, m):\n            dp[i][0] = dp[i - 1][0] + grid[i][0]\n        for j in range(1, n):\n            dp[0][j] = dp[0][j - 1] + grid[0][j]\n        for i in range(1, m):\n            for j in range(1, n):\n                dp[i][j] = min(dp[i - 1][j], dp[i][j - 1]) + grid[i][j]\n        return dp[-1][-1]\n"
    },
    {
        "number": 65,
        "title": "Valid Number",
        "difficulty": 2,
        "answer": "        if not s:\n            return False\n        if s[0] in [\"+\", \"-\", \"e\", \"E\"]:\n            return False\n        if \".\" in s:\n            return False\n        if \"e\" in s:\n            return False\n        if \"-\" in s:\n            return False\n        if \"e\" in s:\n            return False\n        if \"-\" in s:\n            return False\n        if \"e\" in s:\n            return False\n        if \"-\" in s:\n            return False\n        if \"e\" in s:\n            return False\n        if \"-\" in s:\n            return False\n        if \"e\" in s:\n            return False\n        if \"-\" in s:\n            return False\n        if \"e\" in s:\n            return False\n        if \"-\" in s:\n            return False\n        if \"e\" in s:\n            return False\n        if \"-\" in s:\n            return False\n        if \"e\" in s:\n            return False\n        if \"-\" in s:\n            return False\n        if \"e"
    },
    {
        "number": 66,
        "title": "Plus One",
        "difficulty": 0,
        "answer": "        if not digits:\n            return [1]\n        carry = 1\n        for i in range(len(digits) - 1, -1, -1):\n            digits[i] += carry\n            if digits[i] > 9:\n                digits[i] -= 10\n                carry = 1\n            else:\n                carry = 0\n        if carry:\n            digits.append(1)\n        return digits\n"
    },
    {
        "number": 67,
        "title": "Add Binary",
        "difficulty": 0,
        "answer": "        a_len = len(a)\n        b_len = len(b)\n        if a_len > b_len:\n            return self.addBinary(b, a)\n        elif a_len < b_len:\n            return self.addBinary(a, b)\n        else:\n            carry = 0\n            for i in range(a_len):\n                a_digit = int(a[i])\n                b_digit = int(b[i])\n                sum = a_digit + b_digit + carry\n                carry = sum // 2\n                sum = sum % 2\n            if carry > 0:\n                return \"1\" + str(carry)\n            else:\n                return \"0\""
    },
    {
        "number": 68,
        "title": "Text Justification",
        "difficulty": 2,
        "answer": "        lines = []\n        line = \"\"\n        for word in words:\n            if len(line) + len(word) + 1 <= maxWidth:\n                line += word + \" \"\n            else:\n                lines.append(line)\n                line = word + \" \"\n        lines.append(line)\n        return lines"
    },
    {
        "number": 69,
        "title": "Sqrt(x)",
        "difficulty": 0,
        "answer": "        if x < 0:\n            return -1\n        if x == 0:\n            return 0\n        if x == 1:\n            return 1\n        if x == 2:\n            return 1\n        if x == 3:\n            return 1\n        if x == 4:\n            return 2\n        if x == 5:\n            return 2\n        if x == 6:\n            return 2\n        if x == 7:\n            return 2\n        if x == 8:\n            return 2\n        if x == 9:\n            return 2\n        if x == 10:\n            return 2\n        if x == 11:\n            return 2\n        if x == 12:\n            return 2\n        if x == 13:\n            return 2\n        if x == 14:\n            return 2\n        if x == 15:\n            return 2\n        if x == 16:\n            return 2\n        if x == 17:\n            return 2\n        if x == 18:\n            return 2\n        if x == 19:\n            return 2\n        if x == 20:\n            return 2\n        if x == 21:\n"
    },
    {
        "number": 70,
        "title": "Climbing Stairs",
        "difficulty": 0,
        "answer": "        dp = [0] * (n + 1)\n        dp[0] = 1\n        dp[1] = 1\n        for i in range(2, n + 1):\n            dp[i] = dp[i - 1] + dp[i - 2]\n        return dp[n]\n"
    },
    {
        "number": 71,
        "title": "Simplify Path",
        "difficulty": 1,
        "answer": "        path = path.strip()\n        if not path:\n            return path\n        if path.startswith('/'):\n            path = path[1:]\n        if path.endswith('/'):\n            path = path[:-1]\n        if path == '.':\n            return path\n        if path == '..':\n            return '/'\n        if path.startswith('/'):\n            path = path[1:]\n        if path.endswith('/'):\n            path = path[:-1]\n        if path == '.':\n            return path\n        if path == '..':\n            return '/'\n        if path.startswith('/'):\n            path = path[1:]\n        if path.endswith('/'):\n            path = path[:-1]\n        if path == '.':\n            return path\n        if path == '..':\n            return '/'\n        if path.startswith('/'):\n            path = path[1:]\n        if path.endswith('/'):\n            path"
    },
    {
        "number": 72,
        "title": "Edit Distance",
        "difficulty": 2,
        "answer": "        # dp[i][j] = min(dp[i-1][j], dp[i][j-1], dp[i-1][j-1] + 1)\n        dp = [[0 for _ in range(len(word2) + 1)] for _ in range(len(word1) + 1)]\n        for i in range(1, len(word1) + 1):\n            dp[i][0] = i\n        for j in range(1, len(word2) + 1):\n            dp[0][j] = j\n        for i in range(1, len(word1) + 1):\n            for j in range(1, len(word2) + 1):\n                if word1[i - 1] == word2[j - 1]:\n                    dp[i][j] = dp[i - 1][j - 1]\n                elif word1[i - 1] == word2[j]:\n                    dp[i][j] = dp[i - 1][j] + 1\n                else:\n                    dp[i][j]"
    },
    {
        "number": 73,
        "title": "Set Matrix Zeroes",
        "difficulty": 1,
        "answer": "        m, n = len(matrix), len(matrix[0])\n        for i in range(m):\n            for j in range(n):\n                if matrix[i][j] == 0:\n                    matrix[i][:] = [0] * n\n                    matrix[:] = [0] * m\n                    return\n"
    },
    {
        "number": 74,
        "title": "Search a 2D Matrix",
        "difficulty": 1,
        "answer": "        m = len(matrix)\n        n = len(matrix[0])\n        if m == 0 or n == 0:\n            return False\n        if m == 1:\n            return matrix[0][0] == target\n        if n == 1:\n            return matrix[0][0] <= target and matrix[0][0] >= target\n        if m == 2:\n            return matrix[0][0] <= target and matrix[0][0] >= target and matrix[1][0] <= target and matrix[1][0] >= target\n        if n == 2:\n            return matrix[0][0] <= target and matrix[0][0] >= target and matrix[0][1] <= target and matrix[0][1] >= target\n        if m == 3:\n            return matrix[0][0] <= target and matrix[0][0] >= target and matrix[0][1] <= target and matrix[0][1] >= target and matrix[0][2] <= target and matrix[0][2] >= target\n        if n == 3:\n            return matrix[0][0] <= target"
    },
    {
        "number": 75,
        "title": "Sort Colors",
        "difficulty": 1,
        "answer": "        n = len(nums)\n        if n == 0:\n            return\n        if n == 1:\n            return\n        if n == 2:\n            if nums[0] == 0:\n                nums[0], nums[1] = nums[1], nums[0]\n            return\n        if nums[0] == 0:\n            nums[0], nums[1] = nums[1], nums[0]\n            self.sortColors(nums[1:])\n        if nums[n - 1] == 2:\n            nums[n - 1], nums[n - 2] = nums[n - 2], nums[n - 1]\n            self.sortColors(nums[:n - 2])\n        if nums[n - 1] == 1:\n            nums[n - 1], nums[n - 2] = nums[n - 2], nums[n - 1]\n            self.sortColors(nums[:n - 2])\n"
    },
    {
        "number": 76,
        "title": "Minimum Window Substring",
        "difficulty": 2,
        "answer": "        # Solution 1:\n        # https://leetcode.com/problems/minimum-window-substring/discuss/105500/Python-C-Solution-with-explanation\n        # https://leetcode.com/problems/minimum-window-substring/discuss/105501/Java-Solution-with-explanation\n        # https://leetcode.com/problems/minimum-window-substring/discuss/105502/C-Solution-with-explanation\n        # https://leetcode.com/problems/minimum-window-substring/discuss/105503/Python-Solution-with-explanation\n        # https://leetcode.com/problems/minimum-window-substring/discuss/105504/Java-Solution-with-explanation\n        # https://leetcode.com/problems/minimum-window-substring/discuss/105505/C-Solution-with-explanation\n        # https://leetcode.com/problems/minimum-window-substring/"
    },
    {
        "number": 77,
        "title": "Combinations",
        "difficulty": 1,
        "answer": "        combinations = []\n        if n < 1 or k < 1:\n            return combinations\n        if n == 1:\n            return [[1]]\n        if k == 1:\n            return [[1, n]]\n        if n == 2:\n            return [[1, 2], [2, 1]]\n        if n == 3:\n            return [[1, 2, 3], [1, 3, 2], [2, 1, 3], [2, 3, 1], [3, 1, 2], [3, 2, 1]]\n        if n == 4:\n            return [[1, 2, 3, 4], [1, 2, 4, 3], [1, 3, 2, 4], [1, 3, 4, 2], [1, 4, 2, 3], [1, 4, 3, 2],\n                    [2, 1, 3, 4], [2, 1, 4, 3], [2, 3, 1, 4], [2, 3, 4, 1], [2, 4, 1, 3], [2, 4, 3, 1],\n                    [3, 1, 2, 4"
    },
    {
        "number": 78,
        "title": "Subsets",
        "difficulty": 1,
        "answer": "        return self.helper(nums, [], [])"
    },
    {
        "number": 79,
        "title": "Word Search",
        "difficulty": 1,
        "answer": "        if not board:\n            return False\n        m, n = len(board), len(board[0])\n        if m!= len(word) or n!= len(word):\n            return False\n        dp = [[False] * n for _ in range(m)]\n        for i in range(m):\n            for j in range(n):\n                if dp[i][j]:\n                    continue\n                if board[i][j] == word[i]:\n                    dp[i][j] = True\n                    if i > 0 and dp[i - 1][j]:\n                        dp[i][j] = True\n                    if j > 0 and dp[i][j - 1]:\n                        dp[i][j] = True\n                    if i < m - 1 and dp[i + 1][j]:\n                        dp[i][j] = True\n                    if j < n - 1 and dp[i][j + 1]:\n                        dp[i][j] = True\n        return dp[-1][-1]\n"
    },
    {
        "number": 80,
        "title": "Remove Duplicates from Sorted Array II",
        "difficulty": 1,
        "answer": "        n = len(nums)\n        if n == 0:\n            return 0\n        elif n == 1:\n            return 1\n        elif n == 2:\n            return 1 if nums[0] == nums[1] else 2\n        elif n == 3:\n            return 1 if nums[0] == nums[1] and nums[1] == nums[2] else 2\n        elif n == 4:\n            return 1 if nums[0] == nums[1] and nums[1] == nums[2] and nums[2] == nums[3] else 2\n        elif n == 5:\n            return 1 if nums[0] == nums[1] and nums[1] == nums[2] and nums[2] == nums[3] and nums[3] == nums[4] else 2\n        elif n == 6:\n            return 1 if nums[0] == nums[1] and nums[1] == nums[2] and nums[2] =="
    },
    {
        "number": 81,
        "title": "Search in Rotated Sorted Array II",
        "difficulty": 1,
        "answer": "        n = len(nums)\n        if n == 0:\n            return False\n        if n == 1:\n            return nums[0] == target\n        if n == 2:\n            return nums[0] <= target and nums[1] >= target\n        if n == 3:\n            return nums[0] <= target and nums[1] <= target and nums[2] >= target\n        if n == 4:\n            return nums[0] <= target and nums[1] <= target and nums[2] <= target and nums[3] >= target\n        if n == 5:\n            return nums[0] <= target and nums[1] <= target and nums[2] <= target and nums[3] <= target and nums[4] >= target\n        if n == 6:\n            return nums[0] <= target and nums[1] <= target and nums[2] <= target and nums[3] <= target and nums[4] <= target and nums[5] >= target\n        if n == 7:\n            "
    },
    {
        "number": 82,
        "title": "Remove Duplicates from Sorted List II",
        "difficulty": 1,
        "answer": "        if head is None or head.next is None:\n            return head"
    },
    {
        "number": 83,
        "title": "Remove Duplicates from Sorted List",
        "difficulty": 0,
        "answer": "        if head is None or head.next is None:\n            return head"
    },
    {
        "number": 84,
        "title": "Largest Rectangle in Histogram",
        "difficulty": 2,
        "answer": "        heights.sort()\n        max_area = 0\n        for i in range(len(heights)):\n            if i == 0:\n                max_area = heights[i]\n            else:\n                max_area = max(max_area, heights[i] * (i + 1))\n        return max_area\n"
    },
    {
        "number": 85,
        "title": "Maximal Rectangle",
        "difficulty": 2,
        "answer": "        m = len(matrix)\n        n = len(matrix[0])\n        dp = [[0] * n for _ in range(m)]\n        for i in range(m):\n            for j in range(n):\n                if matrix[i][j] == '1':\n                    dp[i][j] = 1\n                else:\n                    dp[i][j] = 0\n        max_area = 0\n        for i in range(m):\n            for j in range(n):\n                if dp[i][j] == 1:\n                    max_area = max(max_area, dp[i][j] * (i - 1) * (j - 1))\n        return max_area\n"
    },
    {
        "number": 86,
        "title": "Partition List",
        "difficulty": 1,
        "answer": "        if head is None:\n            return None\n        if head.next is None:\n            return head\n        if head.val < x:\n            return self.partition(head.next, x)\n        else:\n            return self.partition(head.next, x)"
    },
    {
        "number": 87,
        "title": "Scramble String",
        "difficulty": 2,
        "answer": "        if len(s1) == 1 or len(s2) == 1:\n            return True\n        if len(s1)!= len(s2):\n            return False\n        if len(s1) == 2:\n            return True\n        if len(s1) == 3:\n            return s1[0] == s2[0] and s1[1] == s2[1] and s1[2] == s2[2]\n        if len(s1) == 4:\n            return s1[0] == s2[0] and s1[1] == s2[1] and s1[2] == s2[2] and s1[3] == s2[3]\n        if len(s1) == 5:\n            return s1[0] == s2[0] and s1[1] == s2[1] and s1[2] == s2[2] and s1[3] == s2[3] and s1[4] == s2[4]\n        if len(s1) == 6:\n"
    },
    {
        "number": 88,
        "title": "Merge Sorted Array",
        "difficulty": 0,
        "answer": "        if m == 0:\n            nums1[:n] = nums2\n        elif n == 0:\n            nums1[m:] = nums2\n        else:\n            i = m - 1\n            j = n - 1\n            while i >= 0 and j >= 0:\n                if nums1[i] > nums2[j]:\n                    nums1[i + j + 1] = nums1[i]\n                    i -= 1\n                else:\n                    nums1[i + j + 1] = nums2[j]\n                    j -= 1\n        return nums1"
    },
    {
        "number": 89,
        "title": "Gray Code",
        "difficulty": 1,
        "answer": "        # https://leetcode.com/problems/gray-code/discuss/1055/Java-O(1)-space-and-O(n)-time-solution\n        # https://leetcode.com/problems/gray-code/discuss/1055/Java-O(1)-space-and-O(n)-time-solution\n        # https://leetcode.com/problems/gray-code/discuss/1055/Java-O(1)-space-and-O(n)-time-solution\n        # https://leetcode.com/problems/gray-code/discuss/1055/Java-O(1)-space-and-O(n)-time-solution\n        # https://leetcode.com/problems/gray-code/discuss/1055/Java-O(1)-space-and-O(n)-time-solution\n        # https://leetcode.com/problems/gray-code/discuss/1055/Java-O(1)-space-and-O(n)-time-s"
    },
    {
        "number": 90,
        "title": "Subsets II",
        "difficulty": 1,
        "answer": "        # https://leetcode.com/problems/subsets-with-duplicates/discuss/105586/Java-O(n)-solution-with-explanation\n        # https://leetcode.com/problems/subsets-with-duplicates/discuss/105586/Java-O(n)-solution-with-explanation\n        # https://leetcode.com/problems/subsets-with-duplicates/discuss/105586/Java-O(n)-solution-with-explanation\n        # https://leetcode.com/problems/subsets-with-duplicates/discuss/105586/Java-O(n)-solution-with-explanation\n        # https://leetcode.com/problems/subsets-with-duplicates/discuss/105586/Java-O(n)-solution-with-explanation\n        # https://leetcode.com/problems/subsets-with-duplicates/discuss/105586/Java"
    },
    {
        "number": 91,
        "title": "Decode Ways",
        "difficulty": 1,
        "answer": "        if not s:\n            return 0\n        dp = [0] * (len(s) + 1)\n        dp[0] = 1\n        for i in range(1, len(s) + 1):\n            if s[i - 1] == '0':\n                dp[i] = 0\n            else:\n                dp[i] = dp[i - 1]\n                if i < len(s) and s[i]!= '0':\n                    dp[i] += dp[i - 1]\n        return dp[-1]"
    },
    {
        "number": 92,
        "title": "Reverse Linked List II",
        "difficulty": 1,
        "answer": "        if head is None:\n            return None\n        if left > right:\n            return None\n        if left == right:\n            return head\n        if left == 1:\n            return head.next\n        if right == 1:\n            return head\n        if left == right - 1:\n            return head.next\n        if left == right - 2:\n            return head.next.next\n        if left == right - 3:\n            return head.next.next.next\n        if left == right - 4:\n            return head.next.next.next.next\n        if left == right - 5:\n            return head.next.next.next.next.next\n        if left == right - 6:\n            return head.next.next.next.next.next.next\n        if left == right - 7:\n            return head.next.next.next.next.next.next.next\n        if left == right - 8:\n            return head.next.next.next.next.next.next.next.next\n        if left == right - 9:\n            return head.next.next."
    },
    {
        "number": 93,
        "title": "Restore IP Addresses",
        "difficulty": 1,
        "answer": "        if not s:\n            return []\n        if len(s) > 4:\n            return []\n        if len(s) == 4:\n            return [s]\n        if len(s) == 3:\n            return [s + '.']\n        if len(s) == 2:\n            return [s + '.' + s]\n        if len(s) == 1:\n            return [s + '.' + s + '.']\n        return self.restoreIpAddresses(s[1:]) + self.restoreIpAddresses(s[:1])"
    },
    {
        "number": 94,
        "title": "Binary Tree Inorder Traversal",
        "difficulty": 0,
        "answer": "        if not root:\n            return []"
    },
    {
        "number": 95,
        "title": "Unique Binary Search Trees II",
        "difficulty": 1,
        "answer": "        if n == 0:\n            return []\n        if n == 1:\n            return [None]\n        if n == 2:\n            return [TreeNode(1, None, None)]\n        if n == 3:\n            return [TreeNode(1, None, TreeNode(2, None, None)),\n                    TreeNode(2, None, TreeNode(1, None, None))]\n        if n == 4:\n            return [TreeNode(1, None, TreeNode(2, None, TreeNode(3, None, None))),\n                    TreeNode(2, None, TreeNode(1, None, TreeNode(3, None, None))),\n                    TreeNode(3, None, TreeNode(1, None, TreeNode(2, None, None)))]\n        if n == 5:\n            return [TreeNode(1, None, TreeNode(2, None, TreeNode(3, None, TreeNode(4, None, None)))),\n                    TreeNode(2, None, TreeNode(1, None, TreeNode(3, None, TreeNode(4, None, None)))"
    },
    {
        "number": 96,
        "title": "Unique Binary Search Trees",
        "difficulty": 1,
        "answer": "        dp = [0] * (n + 1)\n        dp[0] = 1\n        dp[1] = 1\n        for i in range(2, n + 1):\n            dp[i] = dp[i - 1] + dp[i - 2]\n        return dp[n]\n"
    },
    {
        "number": 97,
        "title": "Interleaving String",
        "difficulty": 1,
        "answer": "        if len(s1) == 0 or len(s2) == 0 or len(s3) == 0:\n            return False\n        if len(s1)!= len(s2):\n            return False\n        if len(s1)!= len(s3):\n            return False\n        if len(s2)!= len(s3):\n            return False\n        if len(s1) == 1:\n            return s1 == s3\n        if len(s2) == 1:\n            return s2 == s3\n        if len(s1) == 2:\n            return s1[0] == s3[0] and s1[1] == s3[1]\n        if len(s2) == 2:\n            return s2[0] == s3[0] and s2[1] == s3[1]\n        if len(s1) == 3:\n            return s1[0] == s3[0] and s1[1] == s3[1] and s1[2] == s3[2]\n        if len("
    },
    {
        "number": 98,
        "title": "Validate Binary Search Tree",
        "difficulty": 1,
        "answer": "        if not root:\n            return True\n        return self.isValidBST(root.left) and self.isValidBST(root.right)"
    },
    {
        "number": 99,
        "title": "Recover Binary Search Tree",
        "difficulty": 1,
        "answer": "        if not root:\n            return\n        self.recoverTree(root.left)\n        self.recoverTree(root.right)\n        root.val, root.left.val = root.left.val, root.val\n        root.left.val, root.right.val = root.right.val, root.left.val"
    },
    {
        "number": 100,
        "title": "Same Tree",
        "difficulty": 0,
        "answer": "        if p is None and q is None:\n            return True\n        elif p is None or q is None:\n            return False\n        elif p.val!= q.val:\n            return False\n        else:\n            return self.isSameTree(p.left, q.left) and self.isSameTree(p.right, q.right)"
    },
    {
        "number": 101,
        "title": "Symmetric Tree",
        "difficulty": 0,
        "answer": "        if not root:\n            return True\n        return self.isSymmetric(root.left) and self.isSymmetric(root.right) and self.isSame(root.left, root.right)"
    },
    {
        "number": 102,
        "title": "Binary Tree Level Order Traversal",
        "difficulty": 1,
        "answer": "        if not root:\n            return []\n        queue = [root]\n        result = []\n        while queue:\n            level = []\n            while queue:\n                node = queue.pop(0)\n                level.append(node.val)\n                if node.left:\n                    queue.append(node.left)\n                if node.right:\n                    queue.append(node.right)\n            result.append(level)\n        return result\n"
    },
    {
        "number": 103,
        "title": "Binary Tree Zigzag Level Order Traversal",
        "difficulty": 1,
        "answer": "        if not root:\n            return []\n        result = []\n        stack = []\n        stack.append(root)\n        while stack:\n            level = []\n            while stack:\n                node = stack.pop()\n                level.append(node.val)\n                if node.left:\n                    stack.append(node.left)\n                if node.right:\n                    stack.append(node.right)\n            if len(level) % 2 == 1:\n                level.reverse()\n            result.append(level)\n        return result\n"
    },
    {
        "number": 104,
        "title": "Maximum Depth of Binary Tree",
        "difficulty": 0,
        "answer": "        if not root:\n            return 0\n        return self.maxDepth(root.left) + self.maxDepth(root.right) + 1"
    },
    {
        "number": 105,
        "title": "Construct Binary Tree from Preorder and Inorder Traversal",
        "difficulty": 1,
        "answer": "        if len(preorder) == 0:\n            return None\n        root = TreeNode(preorder[0])\n        root.left = self.buildTree(preorder[1:], inorder[:inorder.index(preorder[0])])\n        root.right = self.buildTree(preorder[1+inorder.index(preorder[0]):], inorder[inorder.index(preorder[0])+1:])\n        return root"
    },
    {
        "number": 106,
        "title": "Construct Binary Tree from Inorder and Postorder Traversal",
        "difficulty": 1,
        "answer": "        if not inorder or not postorder:\n            return None\n        root = TreeNode(postorder[-1])\n        root.left = self.buildTree(inorder[:inorder.index(postorder[-1])], postorder[:postorder.index(postorder[-1]) + 1])\n        root.right = self.buildTree(inorder[inorder.index(postorder[-1]) + 1:], postorder[postorder.index(postorder[-1]) + 1:])\n        return root"
    },
    {
        "number": 107,
        "title": "Binary Tree Level Order Traversal II",
        "difficulty": 1,
        "answer": "        if not root:\n            return []\n        queue = [root]\n        result = []\n        while queue:\n            level = []\n            while queue:\n                node = queue.pop(0)\n                level.append(node.val)\n                if node.left:\n                    queue.append(node.left)\n                if node.right:\n                    queue.append(node.right)\n            result.append(level)\n        return result[::-1]\n"
    },
    {
        "number": 108,
        "title": "Convert Sorted Array to Binary Search Tree",
        "difficulty": 0,
        "answer": "        if not nums:\n            return None\n        return self.build_tree(nums, 0, len(nums) - 1)"
    },
    {
        "number": 109,
        "title": "Convert Sorted List to Binary Search Tree",
        "difficulty": 1,
        "answer": "        if head is None:\n            return None\n        if head.next is None:\n            return TreeNode(head.val)\n        if head.next.next is None:\n            return TreeNode(head.val, TreeNode(head.next.val))\n        if head.next.next.next is None:\n            return TreeNode(head.val, TreeNode(head.next.val, TreeNode(head.next.next.val)))\n        if head.next.next.next.next is None:\n            return TreeNode(head.val, TreeNode(head.next.val, TreeNode(head.next.next.val, TreeNode(head.next.next.next.val))))\n        if head.next.next.next.next.next is None:\n            return TreeNode(head.val, TreeNode(head.next.val, TreeNode(head.next.next.val, TreeNode(head.next.next.next.val, TreeNode(head.next.next.next.next.val))))\n        if head.next.next.next.next.next."
    },
    {
        "number": 110,
        "title": "Balanced Binary Tree",
        "difficulty": 0,
        "answer": "        if not root:\n            return True\n        return self.isBalanced(root.left) and self.isBalanced(root.right) and self.isBalanced(root.left)"
    },
    {
        "number": 111,
        "title": "Minimum Depth of Binary Tree",
        "difficulty": 0,
        "answer": "        if not root:\n            return 0\n        return self.minDepth(root.left) + self.minDepth(root.right) + 1"
    },
    {
        "number": 112,
        "title": "Path Sum",
        "difficulty": 0,
        "answer": "        if not root:\n            return False\n        if not root.left and not root.right:\n            return root.val == targetSum\n        return self.hasPathSum(root.left, targetSum - root.val) or self.hasPathSum(root.right, targetSum - root.val)"
    },
    {
        "number": 113,
        "title": "Path Sum II",
        "difficulty": 1,
        "answer": "        if not root:\n            return []\n        if not root.left and not root.right:\n            if root.val == targetSum:\n                return [[root.val]]\n            else:\n                return []\n        if not root.left:\n            return self.pathSum(root.right, targetSum - root.val)\n        if not root.right:\n            return self.pathSum(root.left, targetSum - root.val)\n        return self.pathSum(root.left, targetSum - root.val) + self.pathSum(root.right, targetSum - root.val)"
    },
    {
        "number": 114,
        "title": "Flatten Binary Tree to Linked List",
        "difficulty": 1,
        "answer": "        if not root:\n            return"
    },
    {
        "number": 115,
        "title": "Distinct Subsequences",
        "difficulty": 2,
        "answer": "        if len(s) > len(t):\n            return self.numDistinct(t, s)\n        if len(s) == 0:\n            return 0\n        if len(t) == 0:\n            return 1\n        dp = [[0] * (len(t) + 1) for _ in range(len(s) + 1)]\n        for i in range(1, len(s) + 1):\n            for j in range(1, len(t) + 1):\n                if s[i - 1] == t[j - 1]:\n                    dp[i][j] = dp[i - 1][j - 1] + dp[i - 1][j]\n                else:\n                    dp[i][j] = dp[i - 1][j]\n        return dp[-1][-1]"
    },
    {
        "number": 116,
        "title": "Populating Next Right Pointers in Each Node",
        "difficulty": 1,
        "answer": "        self.val = val\n        self.left = left\n        self.right = right\n        self.next = next\n        self.left_next = None\n        self.right_next = None"
    },
    {
        "number": 117,
        "title": "Populating Next Right Pointers in Each Node II",
        "difficulty": 1,
        "answer": "        self.val = val\n        self.left = left\n        self.right = right\n        self.next = next"
    },
    {
        "number": 118,
        "title": "Pascal\"s Triangle",
        "difficulty": 0,
        "answer": "        if numRows == 1:\n            return [[1]]\n        if numRows == 2:\n            return [[1, 1]]\n        if numRows == 3:\n            return [[1, 2, 1]]\n        if numRows == 4:\n            return [[1, 3, 3, 1]]\n        if numRows == 5:\n            return [[1, 4, 6, 4, 1]]\n        if numRows == 6:\n            return [[1, 5, 10, 10, 5, 1]]\n        if numRows == 7:\n            return [[1, 6, 15, 20, 15, 6, 1]]\n        if numRows == 8:\n            return [[1, 7, 21, 35, 35, 21, 7, 1]]\n        if numRows == 9:\n            return [[1, 8, 28, 56, 70, 56, 28, 8, 1]]\n        if numRows == 10:\n            return [[1, 9, 36, 84, 126, 84, 36, 9, 1]]\n        if numRows == 11:\n            return [["
    },
    {
        "number": 119,
        "title": "Pascal\"s Triangle II",
        "difficulty": 0,
        "answer": "        if rowIndex == 0:\n            return [1]\n        if rowIndex == 1:\n            return [1, 1]\n        if rowIndex == 2:\n            return [1, 1, 1]\n        if rowIndex == 3:\n            return [1, 1, 3, 1]\n        if rowIndex == 4:\n            return [1, 1, 3, 3, 1]\n        if rowIndex == 5:\n            return [1, 1, 3, 3, 3, 1]\n        if rowIndex == 6:\n            return [1, 1, 3, 3, 3, 3, 1]\n        if rowIndex == 7:\n            return [1, 1, 3, 3, 3, 3, 3, 1]\n        if rowIndex == 8:\n            return [1, 1, 3, 3, 3, 3, 3, 3, 1]\n        if rowIndex == 9:\n            return [1, 1, 3, 3, 3, 3, 3, 3, 3, 1]\n        if rowIndex == 10:\n            return [1, 1, 3, 3, 3"
    },
    {
        "number": 120,
        "title": "Triangle",
        "difficulty": 1,
        "answer": "        n = len(triangle)\n        if n == 1:\n            return triangle[0][0]\n        dp = [[0] * (n + 1) for _ in range(n + 1)]\n        dp[0][0] = triangle[0][0]\n        dp[0][1] = triangle[0][1]\n        for i in range(1, n):\n            dp[i][0] = dp[i - 1][0]\n            dp[i][i] = triangle[i][0]\n            dp[i][i + 1] = triangle[i][1]\n            for j in range(1, i):\n                dp[i][j] = min(dp[i - 1][j], dp[i - 1][j - 1]) + triangle[i][j]\n        return dp[-1][-1]\n"
    },
    {
        "number": 121,
        "title": "Best Time to Buy and Sell Stock",
        "difficulty": 0,
        "answer": "        if not prices:\n            return 0\n        if len(prices) == 1:\n            return 0\n        if len(prices) == 2:\n            return max(prices[0], prices[1])\n        if len(prices) == 3:\n            return max(prices[0], max(prices[1], prices[2]))\n        if len(prices) == 4:\n            return max(prices[0], max(prices[1], max(prices[2], prices[3])))\n        if len(prices) == 5:\n            return max(prices[0], max(prices[1], max(prices[2], max(prices[3], prices[4]))))\n        if len(prices) == 6:\n            return max(prices[0], max(prices[1], max(prices[2], max(prices[3], max(prices[4], prices[5]))))\n        if len(prices) == 7:\n            return max(prices[0], max(prices[1"
    },
    {
        "number": 122,
        "title": "Best Time to Buy and Sell Stock II",
        "difficulty": 1,
        "answer": "        if not prices:\n            return 0\n        if len(prices) == 1:\n            return 0\n        if len(prices) == 2:\n            return max(prices[0], prices[1])\n        if len(prices) == 3:\n            return max(prices[0], max(prices[1], prices[2]))\n        if len(prices) == 4:\n            return max(prices[0], max(prices[1], max(prices[2], prices[3])))\n        if len(prices) == 5:\n            return max(prices[0], max(prices[1], max(prices[2], max(prices[3], prices[4]))))\n        if len(prices) == 6:\n            return max(prices[0], max(prices[1], max(prices[2], max(prices[3], max(prices[4], prices[5]))))\n        if len(prices) == 7:\n            return max(prices[0], max(prices[1"
    },
    {
        "number": 123,
        "title": "Best Time to Buy and Sell Stock III",
        "difficulty": 2,
        "answer": "        if not prices:\n            return 0\n        if len(prices) == 1:\n            return 0\n        if len(prices) == 2:\n            return max(prices[0] - prices[1], 0)\n        if len(prices) == 3:\n            return max(prices[0] - prices[1], max(prices[1] - prices[2], 0))\n        if len(prices) == 4:\n            return max(prices[0] - prices[1], max(prices[1] - prices[2], max(prices[2] - prices[3], 0)))\n        if len(prices) == 5:\n            return max(prices[0] - prices[1], max(prices[1] - prices[2], max(prices[2] - prices[3], max(prices[3] - prices[4], 0))))\n        if len(prices) == 6:\n            return max(prices[0] - prices[1], max(prices[1] - prices[2], max(prices"
    },
    {
        "number": 124,
        "title": "Binary Tree Maximum Path Sum",
        "difficulty": 2,
        "answer": "        def dfs(node: TreeNode) -> int:\n            if not node:\n                return 0\n            return max(dfs(node.left), dfs(node.right)) + node.val"
    },
    {
        "number": 125,
        "title": "Valid Palindrome",
        "difficulty": 0,
        "answer": "        s = s.lower()\n        s = re.sub(r\"[^a-z0-9]\", \"\", s)\n        return s == s[::-1]"
    },
    {
        "number": 126,
        "title": "Word Ladder II",
        "difficulty": 2,
        "answer": "        # write your code here\n        if beginWord == endWord:\n            return [beginWord]\n        if len(beginWord) == 0:\n            return []\n        if len(endWord) == 0:\n            return []\n        if len(beginWord) > len(endWord):\n            return []\n        if len(beginWord) == 1:\n            return []\n        if len(endWord) == 1:\n            return []\n        if len(beginWord) == 2:\n            return []\n        if len(endWord) == 2:\n            return []\n        if len(beginWord) == 3:\n            return []\n        if len(endWord) == 3:\n            return []\n        if len(beginWord) == 4:\n            return []\n        if len(endWord) == 4:\n            return []\n        if len(beginWord) == 5:\n            return []\n        if len(endWord) == 5:\n            return []\n        if len(beginWord) == 6:\n            return []\n        if len(endWord) == 6:\n            return []"
    },
    {
        "number": 127,
        "title": "Word Ladder",
        "difficulty": 2,
        "answer": "        if beginWord == endWord:\n            return 1\n        if not wordList:\n            return 0\n        wordList.append(endWord)\n        wordList.sort()\n        return self.dfs(beginWord, endWord, wordList)"
    },
    {
        "number": 128,
        "title": "Longest Consecutive Sequence",
        "difficulty": 1,
        "answer": "        n = len(nums)\n        if n == 0:\n            return 0\n        if n == 1:\n            return 1\n        if n == 2:\n            return 1 if nums[0] == nums[1] else 0\n        if n == 3:\n            return 1 if nums[0] == nums[1] and nums[1] == nums[2] else 0\n        if n == 4:\n            return 1 if nums[0] == nums[1] and nums[1] == nums[2] and nums[2] == nums[3] else 0\n        if n == 5:\n            return 1 if nums[0] == nums[1] and nums[1] == nums[2] and nums[2] == nums[3] and nums[3] == nums[4] else 0\n        if n == 6:\n            return 1 if nums[0] == nums[1] and nums[1] == nums[2] and nums[2] == nums[3] and"
    },
    {
        "number": 129,
        "title": "Sum Root to Leaf Numbers",
        "difficulty": 1,
        "answer": "        def sum_helper(node: Optional[TreeNode], sum: int) -> int:\n            if not node:\n                return sum\n            return sum_helper(node.left, sum * 10 + node.val) + sum_helper(node.right, sum * 10 + node.val)"
    },
    {
        "number": 130,
        "title": "Surrounded Regions",
        "difficulty": 1,
        "answer": "        m, n = len(board), len(board[0])\n        if m == 0 or n == 0:\n            return\n        board[0][0] = 'X'\n        board[m - 1][n - 1] = 'X'\n        for i in range(1, m - 1):\n            board[i][0] = 'X'\n            board[i][n - 1] = 'X'\n        for j in range(1, n - 1):\n            board[0][j] = 'X'\n            board[m - 1][j] = 'X'\n        for i in range(1, m - 1):\n            for j in range(1, n - 1):\n                if board[i][j] == 'O':\n                    if i == 0 or j == 0 or i == m - 1 or j == n - 1:\n                        board[i][j] = 'X'\n                    else:\n                        if board[i - 1][j] == 'O' or board[i + 1][j] == 'O' or board[i][j - 1]"
    },
    {
        "number": 131,
        "title": "Palindrome Partitioning",
        "difficulty": 1,
        "answer": "        if len(s) == 1:\n            return [s]\n        if len(s) == 2:\n            return [[s[0], s[1]]]\n        if len(s) == 3:\n            return [s[0:2], s[1:2], s[2:]]\n        if len(s) == 4:\n            return [s[0:2], s[1:2], s[2:3], s[3:]]\n        if len(s) == 5:\n            return [s[0:2], s[1:2], s[2:3], s[3:4], s[4:]]\n        if len(s) == 6:\n            return [s[0:2], s[1:2], s[2:3], s[3:4], s[4:5], s[5:]]\n        if len(s) == 7:\n            return [s[0:2], s[1:2], s[2:3], s[3:4], s[4:5], s[5:6], s["
    },
    {
        "number": 132,
        "title": "Palindrome Partitioning II",
        "difficulty": 2,
        "answer": "        n = len(s)\n        dp = [0] * (n + 1)\n        for i in range(1, n + 1):\n            dp[i] = dp[i - 1] + 1\n            if s[i - 1] == s[i]:\n                dp[i] = dp[i - 1]\n        return dp[n]"
    },
    {
        "number": 133,
        "title": "Clone Graph",
        "difficulty": 1,
        "answer": "        self.val = val\n        self.neighbors = neighbors if neighbors is not None else []\n        \n    def __deepcopy__(self, memo):\n        return Node(self.val, self.neighbors)"
    },
    {
        "number": 134,
        "title": "Gas Station",
        "difficulty": 1,
        "answer": "        n = len(gas)\n        if n == 0:\n            return -1\n        if n == 1:\n            return 0\n        if n == 2:\n            return gas[0] - cost[0]\n        if n == 3:\n            return min(gas[0] - cost[0], gas[1] - cost[1], gas[2] - cost[2])\n        if n == 4:\n            return min(gas[0] - cost[0], gas[1] - cost[1], gas[2] - cost[2], gas[3] - cost[3])\n        if n == 5:\n            return min(gas[0] - cost[0], gas[1] - cost[1], gas[2] - cost[2], gas[3] - cost[3], gas[4] - cost[4])\n        if n == 6:\n            return min(gas[0] - cost[0], gas[1] - cost[1], gas[2] - cost[2], gas[3] - cost[3], gas[4] - cost[4],"
    },
    {
        "number": 135,
        "title": "Candy",
        "difficulty": 2,
        "answer": "        n = len(ratings)\n        if n == 1:\n            return 1\n        if n == 2:\n            return min(ratings[0], ratings[1])\n        if n == 3:\n            return min(ratings[0], ratings[1], ratings[2])\n        if n == 4:\n            return min(ratings[0], ratings[1], ratings[2], ratings[3])\n        if n == 5:\n            return min(ratings[0], ratings[1], ratings[2], ratings[3], ratings[4])\n        if n == 6:\n            return min(ratings[0], ratings[1], ratings[2], ratings[3], ratings[4], ratings[5])\n        if n == 7:\n            return min(ratings[0], ratings[1], ratings[2], ratings[3], ratings[4], ratings[5], ratings[6])\n        if n == 8:\n            return min(ratings[0], ratings[1], ratings[2], ratings[3], ratings[4], ratings[5], ratings[6], ratings[7])"
    },
    {
        "number": 136,
        "title": "Single Number",
        "difficulty": 0,
        "answer": "        # https://leetcode.com/problems/single-number-ii/discuss/12791/Python-solution-with-explanation\n        # https://leetcode.com/problems/single-number-ii/discuss/12791/Python-solution-with-explanation\n        # https://leetcode.com/problems/single-number-ii/discuss/12791/Python-solution-with-explanation\n        # https://leetcode.com/problems/single-number-ii/discuss/12791/Python-solution-with-explanation\n        # https://leetcode.com/problems/single-number-ii/discuss/12791/Python-solution-with-explanation\n        # https://leetcode.com/problems/single-number-ii/discuss/12791/Python-solution-with-explanation\n        # https://leetcode.com/problems/single-number-ii/discuss/12791/Python-"
    },
    {
        "number": 137,
        "title": "Single Number II",
        "difficulty": 1,
        "answer": "        # https://leetcode.com/problems/single-number-ii/discuss/12791/Python-solution-with-explanation\n        # https://leetcode.com/problems/single-number-ii/discuss/12791/Python-solution-with-explanation\n        # https://leetcode.com/problems/single-number-ii/discuss/12791/Python-solution-with-explanation\n        # https://leetcode.com/problems/single-number-ii/discuss/12791/Python-solution-with-explanation\n        # https://leetcode.com/problems/single-number-ii/discuss/12791/Python-solution-with-explanation\n        # https://leetcode.com/problems/single-number-ii/discuss/12791/Python-solution-with-explanation\n        # https://leetcode.com/problems/single-number-ii/discuss/12791/Python-"
    },
    {
        "number": 138,
        "title": "Copy List with Random Pointer",
        "difficulty": 1,
        "answer": "        if not head:\n            return None\n        if not head.next:\n            return head\n        if not head.random:\n            return head\n        if not head.next.random:\n            return head\n        if not head.next.next:\n            return head\n        if not head.next.next.random:\n            return head\n        if not head.next.next.next:\n            return head\n        if not head.next.next.next.random:\n            return head\n        if not head.next.next.next.next:\n            return head\n        if not head.next.next.next.next.random:\n            return head\n        if not head.next.next.next.next.next:\n            return head\n        if not head.next.next.next.next.next.random:\n            return head\n        if not head.next.next.next.next.next.next:\n            return head\n        if not head.next.next.next.next.next.next.random:\n            return head\n        if not head.next.next.next.next"
    },
    {
        "number": 139,
        "title": "Word Break",
        "difficulty": 1,
        "answer": "        if not s:\n            return True\n        if not wordDict:\n            return False\n        dp = [[False] * (len(s) + 1) for _ in range(len(wordDict))]\n        for i in range(1, len(s) + 1):\n            for j in range(len(wordDict)):\n                if dp[j][i - 1]:\n                    dp[j][i] = True\n                elif s[i - 1] in wordDict[j]:\n                    dp[j][i] = dp[j][i - 1]\n                else:\n                    dp[j][i] = False\n        return dp[-1][-1]"
    },
    {
        "number": 140,
        "title": "Word Break II",
        "difficulty": 2,
        "answer": "        # https://leetcode.com/problems/word-break/discuss/105586/Java-C-solution-with-explanation\n        # https://leetcode.com/problems/word-break/discuss/105586/Java-C-solution-with-explanation\n        # https://leetcode.com/problems/word-break/discuss/105586/Java-C-solution-with-explanation\n        # https://leetcode.com/problems/word-break/discuss/105586/Java-C-solution-with-explanation\n        # https://leetcode.com/problems/word-break/discuss/105586/Java-C-solution-with-explanation\n        # https://leetcode.com/problems/word-break/discuss/105586/Java-C-solution-with-explanation\n        # https://leetcode.com/problems/word-break/discuss/105586/Java-C-"
    },
    {
        "number": 141,
        "title": "Linked List Cycle",
        "difficulty": 0,
        "answer": "        if head is None or head.next is None:\n            return False\n        pos = 0\n        while head.next is not None:\n            if head.next.next is None:\n                return True\n            head = head.next\n            pos += 1\n        return False\n"
    },
    {
        "number": 142,
        "title": "Linked List Cycle II",
        "difficulty": 1,
        "answer": "        if head is None:\n            return None\n        slow = head\n        fast = head\n        while fast.next is not None and fast.next.next is not None:\n            slow = slow.next\n            fast = fast.next.next\n            if slow == fast:\n                return slow\n        return None"
    },
    {
        "number": 143,
        "title": "Reorder List",
        "difficulty": 1,
        "answer": "        if not head:\n            return\n        if not head.next:\n            return\n        if not head.next.next:\n            return\n        if not head.next.next.next:\n            return\n        if not head.next.next.next.next:\n            return\n        if not head.next.next.next.next.next:\n            return\n        if not head.next.next.next.next.next.next:\n            return\n        if not head.next.next.next.next.next.next.next:\n            return\n        if not head.next.next.next.next.next.next.next.next:\n            return\n        if not head.next.next.next.next.next.next.next.next.next:\n            return\n        if not head.next.next.next.next.next.next.next.next.next.next:\n            return\n        if not head.next.next.next.next.next.next.next.next.next.next.next:\n            return\n        if not head.next.next.next"
    },
    {
        "number": 144,
        "title": "Binary Tree Preorder Traversal",
        "difficulty": 0,
        "answer": "        if not root:\n            return []\n        stack = []\n        stack.append(root.val)\n        while stack:\n            cur = stack.pop()\n            if not cur:\n                stack.append(None)\n            else:\n                stack.append(cur.left)\n                stack.append(cur.right)\n        return stack"
    },
    {
        "number": 145,
        "title": "Binary Tree Postorder Traversal",
        "difficulty": 0,
        "answer": "        if not root:\n            return []\n        stack = [root]\n        result = []\n        while stack:\n            node = stack.pop()\n            if node.left:\n                stack.append(node.left)\n            if node.right:\n                stack.append(node.right)\n            result.append(node.val)\n        return result\n"
    },
    {
        "number": 146,
        "title": "LRU Cache",
        "difficulty": 1,
        "answer": "        pass\n    def __len__(self) -> int:\n        pass\n    def __getitem__(self, key: int) -> int:\n        pass\n    def __setitem__(self, key: int, value: int) -> None:\n        pass\n    def __delitem__(self, key: int) -> None:\n        pass\n    def __contains__(self, key: int) -> bool:\n        pass\n    def __iter__(self) -> Iterator[int]:\n        pass\n    def __reversed__(self) -> Iterator[int]:\n        pass\n    def __repr__(self) -> str:\n        pass\n    def __str__(self) -> str:\n        pass\n    def __eq__(self, other: object) -> bool:\n        pass\n    def __ne__(self, other: object) -> bool:\n        pass\n    def __lt__(self, other: object) -> bool:\n        pass\n    def __gt__(self, other: object) -> bool:\n        pass\n    def __"
    },
    {
        "number": 147,
        "title": "Insertion Sort List",
        "difficulty": 1,
        "answer": "        if head is None:\n            return None\n        if head.next is None:\n            return head\n        # Insertion sort iterates, consuming one input element each repetition and growing a sorted output list.\n        # At each iteration, insertion sort removes one element from the input data, finds the location it belongs within the sorted list and inserts it there.\n        # It repeats until no input elements remain.\n        # The following is a graphical example of the insertion sort algorithm. The partially sorted list (black) initially contains only the first element in the list. One element (red) is removed from the input data and inserted in-place into the sorted list with each iteration.\n        # Example 1:\n        # Input: head = [4,2,1,3]\n        # Output: [1,2,3,4]\n        # Example 2:\n        # Input: head = [-1,5,3,4,0]\n        # Output: [-1,0,3,4,5]\n        # The following is a graphical example of the insertion sort algorithm. The partially sorted list (black) initially contains only the first element in the list"
    },
    {
        "number": 148,
        "title": "Sort List",
        "difficulty": 1,
        "answer": "        if not head:\n            return None\n        if not head.next:\n            return head\n        if not head.next.next:\n            return self.sortList(head.next)\n        if not head.next.next.next:\n            return self.sortList(head.next.next)\n        if not head.next.next.next.next:\n            return self.sortList(head.next.next.next)\n        if not head.next.next.next.next.next:\n            return self.sortList(head.next.next.next.next)\n        if not head.next.next.next.next.next.next:\n            return self.sortList(head.next.next.next.next.next)\n        if not head.next.next.next.next.next.next.next:\n            return self.sortList(head.next.next.next.next.next.next)\n        if not head.next.next.next.next.next.next.next.next:\n            return self.sortList(head.next.next.next"
    },
    {
        "number": 149,
        "title": "Max Points on a Line",
        "difficulty": 2,
        "answer": "        n = len(points)\n        if n == 1:\n            return 1\n        if n == 2:\n            return 2\n        dp = [[0 for _ in range(n)] for _ in range(n)]\n        dp[0][0] = 1\n        dp[0][1] = 1\n        for i in range(1, n):\n            dp[i][0] = dp[i - 1][0] + 1\n            dp[i][1] = dp[i - 1][1] + 1\n        for i in range(1, n):\n            for j in range(1, n):\n                if points[i][0] == points[j][0]:\n                    dp[i][j] = dp[i - 1][j - 1] + 1\n                elif points[i][1] == points[j][1]:\n                    dp[i][j] = dp[i - 1][j - 1] + 1\n                else:\n                    dp[i][j] = max(dp[i - 1][j], dp[i][j - 1"
    },
    {
        "number": 150,
        "title": "Evaluate Reverse Polish Notation",
        "difficulty": 1,
        "answer": "        stack = []\n        for token in tokens:\n            if token.isdigit():\n                stack.append(int(token))\n            elif token == '+':\n                stack.append(stack.pop() + stack.pop())\n            elif token == '-':\n                stack.append(stack.pop() - stack.pop())\n            elif token == '*':\n                stack.append(stack.pop() * stack.pop())\n            elif token == '/':\n                a = stack.pop()\n                b = stack.pop()\n                stack.append(a / b)\n            else:\n                stack.append(stack.pop() + stack.pop() * stack.pop())\n        return stack.pop()\n"
    },
    {
        "number": 151,
        "title": "Reverse Words in a String",
        "difficulty": 1,
        "answer": "        return''.join(s.split()[::-1])"
    },
    {
        "number": 152,
        "title": "Maximum Product Subarray",
        "difficulty": 1,
        "answer": "        # https://leetcode.com/problems/max-product-subarray/discuss/105500/Python-C-Solution-with-explanation\n        # https://leetcode.com/problems/max-product-subarray/discuss/105501/C-Solution-with-explanation\n        # https://leetcode.com/problems/max-product-subarray/discuss/105502/C++Solution-with-explanation\n        # https://leetcode.com/problems/max-product-subarray/discuss/105503/JavaSolution-with-explanation\n        # https://leetcode.com/problems/max-product-subarray/discuss/105504/Python-Solution-with-explanation\n        # https://leetcode.com/problems/max-product-subarray/discuss/105505/C-Solution-with-explanation\n        # https://leetcode.com/problems/max-product-subarray/discuss/105506/"
    },
    {
        "number": 153,
        "title": "Find Minimum in Rotated Sorted Array",
        "difficulty": 1,
        "answer": "        n = len(nums)\n        if n == 1:\n            return nums[0]\n        if n == 2:\n            return min(nums)\n        if n == 3:\n            return min(nums)\n        if n == 4:\n            return min(nums)\n        if n == 5:\n            return min(nums)\n        if n == 6:\n            return min(nums)\n        if n == 7:\n            return min(nums)\n        if n == 8:\n            return min(nums)\n        if n == 9:\n            return min(nums)\n        if n == 10:\n            return min(nums)\n        if n == 11:\n            return min(nums)\n        if n == 12:\n            return min(nums)\n        if n == 13:\n            return min(nums)\n        if n == 14:\n            return min(nums)\n        if n == 15:\n            return min(nums)\n        if n == 16:\n            return min(nums)\n        "
    },
    {
        "number": 154,
        "title": "Find Minimum in Rotated Sorted Array II",
        "difficulty": 2,
        "answer": "        n = len(nums)\n        if n == 1:\n            return nums[0]\n        if n == 2:\n            return min(nums)\n        if n == 3:\n            return min(nums)\n        if n == 4:\n            return min(nums)\n        if n == 5:\n            return min(nums)\n        if n == 6:\n            return min(nums)\n        if n == 7:\n            return min(nums)\n        if n == 8:\n            return min(nums)\n        if n == 9:\n            return min(nums)\n        if n == 10:\n            return min(nums)\n        if n == 11:\n            return min(nums)\n        if n == 12:\n            return min(nums)\n        if n == 13:\n            return min(nums)\n        if n == 14:\n            return min(nums)\n        if n == 15:\n            return min(nums)\n        if n == 16:\n            return min(nums)\n        "
    },
    {
        "number": 155,
        "title": "Min Stack",
        "difficulty": 1,
        "answer": "        self.stack = []\n        self.min = -1\n        self.min_stack = []\n        self.min_stack.append(-1)\n        self.min_stack.append(0)\n        self.min_stack.append(-1)\n        self.min_stack.append(-1)"
    },
    {
        "number": 160,
        "title": "Intersection of Two Linked Lists",
        "difficulty": 0,
        "answer": "        # Definition for singly-linked list.\n        class ListNode:\n            def __init__(self, x):\n                self.val = x\n                self.next = None"
    },
    {
        "number": 162,
        "title": "Find Peak Element",
        "difficulty": 1,
        "answer": "        if len(nums) == 1:\n            return 0\n        elif len(nums) == 2:\n            return 0 if nums[0] > nums[1] else 1\n        elif len(nums) == 3:\n            return 0 if nums[0] > nums[1] and nums[0] > nums[2] else 1 if nums[1] > nums[2] else 2\n        elif len(nums) == 4:\n            return 0 if nums[0] > nums[1] and nums[0] > nums[2] and nums[0] > nums[3] else 1 if nums[1] > nums[2] and nums[1] > nums[3] else 2 if nums[2] > nums[3] else 3\n        elif len(nums) == 5:\n            return 0 if nums[0] > nums[1] and nums[0] > nums[2] and nums[0] > nums[3] and nums["
    },
    {
        "number": 164,
        "title": "Maximum Gap",
        "difficulty": 2,
        "answer": "        if len(nums) < 2:\n            return 0\n        nums.sort()\n        return max(nums[1] - nums[0], nums[-1] - nums[-2])\n"
    },
    {
        "number": 165,
        "title": "Compare Version Numbers",
        "difficulty": 1,
        "answer": "        version1_rev = [int(x) for x in version1.split(\".\") if x.isdigit()]\n        version2_rev = [int(x) for x in version2.split(\".\") if x.isdigit()]\n        if len(version1_rev) < len(version2_rev):\n            return -1\n        elif len(version1_rev) > len(version2_rev):\n            return 1\n        else:\n            for i in range(len(version1_rev)):\n                if version1_rev[i] < version2_rev[i]:\n                    return -1\n                elif version1_rev[i] > version2_rev[i]:\n                    return 1\n            return 0\n"
    },
    {
        "number": 166,
        "title": "Fraction to Recurring Decimal",
        "difficulty": 1,
        "answer": "        if numerator == 0:\n            return '0'\n        if numerator == denominator:\n            return '1'\n        if numerator == -1 * denominator:\n            return '-1'\n        if numerator == -1 * denominator + 1:\n            return '-0.1'\n        if numerator == -1 * denominator + 2:\n            return '-0.2'\n        if numerator == -1 * denominator + 3:\n            return '-0.3'\n        if numerator == -1 * denominator + 4:\n            return '-0.4'\n        if numerator == -1 * denominator + 5:\n            return '-0.5'\n        if numerator == -1 * denominator + 6:\n            return '-0.6'\n        if numerator == -1 * denominator + 7:\n            return '-0.7'\n        if numerator == -1 * denominator + 8:\n            return '-0.8'\n        if numerator == -1 * denominator + 9:\n            return '-"
    },
    {
        "number": 167,
        "title": "Two Sum II - Input Array Is Sorted",
        "difficulty": 1,
        "answer": "        numbers.sort()\n        index1 = 0\n        index2 = len(numbers) - 1\n        while index1 < index2:\n            if numbers[index1] + numbers[index2] == target:\n                return [index1 + 1, index2 + 1]\n            elif numbers[index1] + numbers[index2] < target:\n                index1 += 1\n            else:\n                index2 -= 1\n        return []\n"
    },
    {
        "number": 168,
        "title": "Excel Sheet Column Title",
        "difficulty": 0,
        "answer": "        columnNumber = columnNumber - 1\n        if columnNumber < 0:\n            return \"\"\n        if columnNumber == 0:\n            return \"A\"\n        if columnNumber == 1:\n            return \"B\"\n        if columnNumber == 2:\n            return \"C\"\n        if columnNumber == 3:\n            return \"D\"\n        if columnNumber == 4:\n            return \"E\"\n        if columnNumber == 5:\n            return \"F\"\n        if columnNumber == 6:\n            return \"G\"\n        if columnNumber == 7:\n            return \"H\"\n        if columnNumber == 8:\n            return \"I\"\n        if columnNumber == 9:\n            return \"J\"\n        if columnNumber == 10:\n            return \"K\"\n        if columnNumber == 11:\n            return \"L\"\n        if columnNumber == 12:\n            return \"M\"\n        if columnNumber == 13:\n            return \"N\"\n        if columnNumber == 14:\n            return \"O\"\n        if columnNumber == 15:\n            return \"P\"\n        if columnNumber =="
    },
    {
        "number": 169,
        "title": "Majority Element",
        "difficulty": 0,
        "answer": "        n = len(nums)\n        if n == 1:\n            return nums[0]\n        elif n == 2:\n            return nums[0] if nums[0] == nums[1] else nums[1]\n        elif n == 3:\n            return nums[0] if nums[0] == nums[1] and nums[1] == nums[2] else nums[2]\n        elif n == 4:\n            return nums[0] if nums[0] == nums[1] and nums[1] == nums[2] and nums[2] == nums[3] else nums[3]\n        elif n == 5:\n            return nums[0] if nums[0] == nums[1] and nums[1] == nums[2] and nums[2] == nums[3] and nums[3] == nums[4] else nums[4]\n        elif n == 6:\n            return nums[0] if nums"
    },
    {
        "number": 171,
        "title": "Excel Sheet Column Number",
        "difficulty": 0,
        "answer": "        if columnTitle == \"A\":\n            return 1\n        elif columnTitle == \"B\":\n            return 2\n        elif columnTitle == \"C\":\n            return 3\n        elif columnTitle == \"D\":\n            return 4\n        elif columnTitle == \"E\":\n            return 5\n        elif columnTitle == \"F\":\n            return 6\n        elif columnTitle == \"G\":\n            return 7\n        elif columnTitle == \"H\":\n            return 8\n        elif columnTitle == \"I\":\n            return 9\n        elif columnTitle == \"J\":\n            return 10\n        elif columnTitle == \"K\":\n            return 11\n        elif columnTitle == \"L\":\n            return 12\n        elif columnTitle == \"M\":\n            return 13\n        elif columnTitle == \"N\":\n            return 14\n        elif columnTitle == \"O\":\n            return 15\n        elif columnTitle == \"P\":\n            return 16\n        elif columnTitle == \"Q\":\n            return 17\n        elif columnTitle == \"R\":\n            return 18"
    },
    {
        "number": 172,
        "title": "Factorial Trailing Zeroes",
        "difficulty": 1,
        "answer": "        if n == 0:\n            return 0\n        if n == 1:\n            return 0\n        if n == 2:\n            return 1\n        if n == 3:\n            return 0\n        if n == 4:\n            return 1\n        if n == 5:\n            return 0\n        if n == 6:\n            return 1\n        if n == 7:\n            return 0\n        if n == 8:\n            return 1\n        if n == 9:\n            return 0\n        if n == 10:\n            return 1\n        if n == 11:\n            return 0\n        if n == 12:\n            return 1\n        if n == 13:\n            return 0\n        if n == 14:\n            return 1\n        if n == 15:\n            return 0\n        if n == 16:\n            return 1\n        if n == 17:\n            return 0\n        if n == 18:\n            return 1\n        if n == 19:\n            return 0\n        if n == 20:\n            return 1\n        if n == 21:\n            return 0\n        if n == 22:\n            "
    },
    {
        "number": 173,
        "title": "Binary Search Tree Iterator",
        "difficulty": 1,
        "answer": "        if root is None:\n            return False\n        stack = []\n        stack.append(root)\n        while stack:\n            node = stack.pop()\n            if node.right:\n                stack.append(node.right)\n            if node.left:\n                stack.append(node.left)\n            if node.val > self.pointer:\n                self.pointer = node.val\n            if node.val < self.pointer:\n                return True\n        return False"
    },
    {
        "number": 174,
        "title": "Dungeon Game",
        "difficulty": 2,
        "answer": "        m, n = len(dungeon), len(dungeon[0])\n        dp = [[0 for _ in range(n)] for _ in range(m)]\n        dp[0][0] = 1\n        for i in range(1, m):\n            dp[i][0] = dp[i - 1][0] - dungeon[i - 1][0]\n        for j in range(1, n):\n            dp[0][j] = dp[0][j - 1] - dungeon[0][j - 1]\n        for i in range(1, m):\n            for j in range(1, n):\n                dp[i][j] = min(dp[i - 1][j], dp[i][j - 1]) - dungeon[i][j]\n        return dp[-1][-1]"
    },
    {
        "number": 179,
        "title": "Largest Number",
        "difficulty": 1,
        "answer": "        nums = sorted(nums)\n        return ''.join(str(x) for x in nums)\n"
    },
    {
        "number": 187,
        "title": "Repeated DNA Sequences",
        "difficulty": 1,
        "answer": "        # https://leetcode.com/problems/repeated-dna-sequences/discuss/105500/Python-solution-with-explanation\n        # https://leetcode.com/problems/repeated-dna-sequences/discuss/105501/Java-solution-with-explanation\n        # https://leetcode.com/problems/repeated-dna-sequences/discuss/105500/Python-solution-with-explanation\n        # https://leetcode.com/problems/repeated-dna-sequences/discuss/105501/Java-solution-with-explanation\n        # https://leetcode.com/problems/repeated-dna-sequences/discuss/105500/Python-solution-with-explanation\n        # https://leetcode.com/problems/repeated-dna-sequences/discuss/105501/Java-solution-with-explanation\n        # https://leetcode.com/"
    },
    {
        "number": 188,
        "title": "Best Time to Buy and Sell Stock IV",
        "difficulty": 2,
        "answer": "        # https://leetcode.com/problems/best-time-to-buy-and-sell-stock-with-fixed-cost/discuss/\n        # https://leetcode.com/problems/best-time-to-buy-and-sell-stock-with-fixed-cost/discuss/\n        # https://leetcode.com/problems/best-time-to-buy-and-sell-stock-with-fixed-cost/discuss/\n        # https://leetcode.com/problems/best-time-to-buy-and-sell-stock-with-fixed-cost/discuss/\n        # https://leetcode.com/problems/best-time-to-buy-and-sell-stock-with-fixed-cost/discuss/\n        # https://leetcode.com/problems/best-time-to-buy-and-sell-stock-with-fixed-cost/discuss/\n        # https://leetcode.com/problems/best-time-to-buy-and-sell-stock-with"
    },
    {
        "number": 189,
        "title": "Rotate Array",
        "difficulty": 1,
        "answer": "        n = len(nums)\n        if n == 0:\n            return\n        elif n == 1:\n            return\n        elif n == 2:\n            if k == 0:\n                return\n            elif k == 1:\n                nums[0], nums[1] = nums[1], nums[0]\n            else:\n                nums[0], nums[1] = nums[1], nums[0]\n            return\n        elif n == 3:\n            if k == 0:\n                return\n            elif k == 1:\n                nums[0], nums[1], nums[2] = nums[2], nums[1], nums[0]\n            elif k == 2:\n                nums[0], nums[1], nums[2] = nums[2], nums[1], nums[0]\n            else:\n                nums[0], nums[1], nums[2] = nums[2], nums[1], nums[0]\n            return\n        "
    },
    {
        "number": 190,
        "title": "Reverse Bits",
        "difficulty": 0,
        "answer": "        return (n & 0x55555555) << 1 | (n & 0xAAAAAAAA) >> 1"
    },
    {
        "number": 191,
        "title": "Number of 1 Bits",
        "difficulty": 0,
        "answer": "        if n == 0:\n            return 0\n        count = 0\n        while n > 0:\n            count += n & 1\n            n >>= 1\n        return count"
    },
    {
        "number": 198,
        "title": "House Robber",
        "difficulty": 1,
        "answer": "        if not nums:\n            return 0\n        if len(nums) == 1:\n            return nums[0]\n        if len(nums) == 2:\n            return max(nums)\n        if len(nums) == 3:\n            return max(nums) + max(nums[1:])\n        if len(nums) == 4:\n            return max(nums) + max(nums[1:]) + max(nums[2:])\n        if len(nums) == 5:\n            return max(nums) + max(nums[1:]) + max(nums[2:]) + max(nums[3:])\n        if len(nums) == 6:\n            return max(nums) + max(nums[1:]) + max(nums[2:]) + max(nums[3:]) + max(nums[4:])\n        if len(nums) == 7:\n            return max(nums) + max(nums[1:]) + max(nums[2:"
    },
    {
        "number": 199,
        "title": "Binary Tree Right Side View",
        "difficulty": 1,
        "answer": "        res = []\n        if not root:\n            return res\n        stack = [root]\n        while stack:\n            cur = stack.pop()\n            if cur.left:\n                stack.append(cur.left)\n            if cur.right:\n                stack.append(cur.right)\n            res.append(cur.val)\n        return res"
    },
    {
        "number": 200,
        "title": "Number of Islands",
        "difficulty": 1,
        "answer": "        if not grid:\n            return 0\n        m, n = len(grid), len(grid[0])\n        visited = [[False for _ in range(n)] for _ in range(m)]\n        count = 0\n        for i in range(m):\n            for j in range(n):\n                if grid[i][j] == '1':\n                    self.dfs(grid, visited, i, j)\n                    count += 1\n        return count"
    },
    {
        "number": 201,
        "title": "Bitwise AND of Numbers Range",
        "difficulty": 1,
        "answer": "        if left > right:\n            return 0\n        if left == right:\n            return left\n        if left == 0:\n            return right\n        if right == 0:\n            return left\n        if left == 1:\n            return right\n        if right == 1:\n            return left\n        if left == 2147483647:\n            return right\n        if right == 2147483647:\n            return left\n        if left == 2147483648:\n            return right\n        if right == 2147483648:\n            return left\n        if left == 2147483649:\n            return right\n        if right == 2147483649:\n            return left\n        if left == 2147483650:\n            return right\n        if right == 2147483650:\n            return left\n        if left == 2147483651:\n            return right\n        if right == 2147483651:\n            return left\n        if left == 2147483652:\n            return right\n        if right == 2147483652:\n            return left\n        if left =="
    },
    {
        "number": 202,
        "title": "Happy Number",
        "difficulty": 0,
        "answer": "        if n < 1:\n            return False\n        if n == 1:\n            return True\n        if n == 2:\n            return True\n        if n == 3:\n            return True\n        if n == 4:\n            return True\n        if n == 5:\n            return True\n        if n == 6:\n            return True\n        if n == 7:\n            return True\n        if n == 8:\n            return True\n        if n == 9:\n            return True\n        if n == 10:\n            return True\n        if n == 11:\n            return True\n        if n == 12:\n            return True\n        if n == 13:\n            return True\n        if n == 14:\n            return True\n        if n == 15:\n            return True\n        if n == 16:\n            return True\n        if n == 17:\n            return True\n        if n == 18:\n            return True\n        if n == 19:\n            return True\n        if n == 20:\n            return True\n        if n == 21:\n            return True\n        if n == 22:\n            "
    },
    {
        "number": 203,
        "title": "Remove Linked List Elements",
        "difficulty": 0,
        "answer": "        if head is None:\n            return None\n        dummy = ListNode(0)\n        dummy.next = head\n        cur = head\n        while cur is not None:\n            if cur.val == val:\n                cur = cur.next\n            else:\n                cur = cur.next\n        if cur is None:\n            return dummy.next\n        cur = dummy.next\n        while cur.next is not None:\n            if cur.next.val == val:\n                cur.next = cur.next.next\n            else:\n                cur = cur.next\n        return dummy.next\n"
    },
    {
        "number": 204,
        "title": "Count Primes",
        "difficulty": 1,
        "answer": "        if n <= 2:\n            return 0\n        if n <= 3:\n            return 1\n        if n <= 5:\n            return 2\n        if n <= 7:\n            return 3\n        if n <= 11:\n            return 4\n        if n <= 13:\n            return 5\n        if n <= 17:\n            return 6\n        if n <= 19:\n            return 7\n        if n <= 23:\n            return 8\n        if n <= 29:\n            return 9\n        if n <= 31:\n            return 10\n        if n <= 37:\n            return 11\n        if n <= 41:\n            return 12\n        if n <= 43:\n            return 13\n        if n <= 47:\n            return 14\n        if n <= 53:\n            return 15\n        if n <= 59:\n            return 16\n        if n <= 61:\n            return 17\n        if n <= 67:\n            return 18\n        if n <= 71:\n            return 19\n        if n <= 73:\n            return 20\n        if n <= 79:\n            return 21\n        if n <= 83:\n            "
    },
    {
        "number": 205,
        "title": "Isomorphic Strings",
        "difficulty": 0,
        "answer": "        s_dict = {}\n        t_dict = {}\n        for i, c in enumerate(s):\n            if c not in s_dict:\n                s_dict[c] = i\n            else:\n                s_dict[c] = i\n        for i, c in enumerate(t):\n            if c not in t_dict:\n                t_dict[c] = i\n            else:\n                t_dict[c] = i\n        if len(s)!= len(t):\n            return False\n        for i in range(len(s)):\n            if s[i]!= t[i]:\n                if s_dict[s[i]]!= t_dict[t[i]]:\n                    return False\n        return True\n"
    },
    {
        "number": 206,
        "title": "Reverse Linked List",
        "difficulty": 0,
        "answer": "        if head is None or head.next is None:\n            return head"
    },
    {
        "number": 207,
        "title": "Course Schedule",
        "difficulty": 1,
        "answer": "        if numCourses == 0:\n            return True\n        if numCourses == 1:\n            return True\n        if numCourses == 2:\n            return True\n        if numCourses == 3:\n            return True\n        if numCourses == 4:\n            return True\n        if numCourses == 5:\n            return True\n        if numCourses == 6:\n            return True\n        if numCourses == 7:\n            return True\n        if numCourses == 8:\n            return True\n        if numCourses == 9:\n            return True\n        if numCourses == 10:\n            return True\n        if numCourses == 11:\n            return True\n        if numCourses == 12:\n            return True\n        if numCourses == 13:\n            return True\n        if numCourses == 14:\n            return True\n        if numCourses == 15:\n            return True\n        if numCourses == 16:\n            return True\n        if numCourses == 17:\n            return True\n        if numCourses == 18:\n            return True\n        if num"
    },
    {
        "number": 208,
        "title": "Implement Trie (Prefix Tree)",
        "difficulty": 1,
        "answer": "        if len(word) == 0:\n            return True\n        if len(word) == 1:\n            return word in self.root\n        if word[0] in self.root:\n            return self.root[word[0]].insert(word[1:])\n        else:\n            return False\n    def startsWith(self, prefix: str) -> bool:\n        \"\"\"\n        A trie (pronounced as \"try\") or prefix tree is a tree data structure used to efficiently store and retrieve keys in a dataset of strings. There are various applications of this data structure, such as autocomplete and spellchecker.\n        Implement the Trie class:\n            Trie() Initializes the trie object.\n            void insert(String word) Inserts the string word into the trie.\n            boolean search(String word) Returns true if the string word is in the trie (i.e., was inserted before), and false otherwise.\n            boolean startsWith(String prefix) Returns true if there is a previously inserted string word that has the prefix prefix, and false otherwise.\n        Example 1:\n        Input"
    },
    {
        "number": 209,
        "title": "Minimum Size Subarray Sum",
        "difficulty": 1,
        "answer": "        if len(nums) == 0:\n            return 0\n        if len(nums) == 1:\n            return 1\n        if len(nums) == 2:\n            return 1 if nums[0] + nums[1] >= target else 0\n        if len(nums) == 3:\n            return 1 if nums[0] + nums[1] + nums[2] >= target else 0\n        if len(nums) == 4:\n            return 1 if nums[0] + nums[1] + nums[2] + nums[3] >= target else 0\n        if len(nums) == 5:\n            return 1 if nums[0] + nums[1] + nums[2] + nums[3] + nums[4] >= target else 0\n        if len(nums) == 6:\n            return 1 if nums[0] + nums[1] + nums[2] + nums[3] + nums[4] + nums[5] >= target else 0\n        if len(n"
    },
    {
        "number": 210,
        "title": "Course Schedule II",
        "difficulty": 1,
        "answer": "        # https://leetcode.com/problems/course-schedule/discuss/105586/Java-O(n)-solution-with-explanation\n        # https://leetcode.com/problems/course-schedule/discuss/105586/Java-O(n)-solution-with-explanation\n        # https://leetcode.com/problems/course-schedule/discuss/105586/Java-O(n)-solution-with-explanation\n        # https://leetcode.com/problems/course-schedule/discuss/105586/Java-O(n)-solution-with-explanation\n        # https://leetcode.com/problems/course-schedule/discuss/105586/Java-O(n)-solution-with-explanation\n        # https://leetcode.com/problems/course-schedule/discuss/105586/Java-O(n)-solution-with-explanation\n        # https://leetcode.com/"
    },
    {
        "number": 211,
        "title": "Design Add and Search Words Data Structure",
        "difficulty": 1,
        "answer": "        pass"
    },
    {
        "number": 212,
        "title": "Word Search II",
        "difficulty": 2,
        "answer": "        if not board or not words:\n            return []\n        m, n = len(board), len(board[0])\n        board = [[c for c in row] for row in board]\n        board = [[c for c in row] for row in board]\n        board = [[c for c in row] for row in board]\n        board = [[c for c in row] for row in board]\n        board = [[c for c in row] for row in board]\n        board = [[c for c in row] for row in board]\n        board = [[c for c in row] for row in board]\n        board = [[c for c in row] for row in board]\n        board = [[c for c in row] for row in board]\n        board = [[c for c in row] for row in board]\n        board = [[c for c in row] for row in board]\n        board = [[c for c in row] for row in board]\n        board = [[c for c in row] for row in board]\n        board = [[c for c in row] for row in"
    },
    {
        "number": 213,
        "title": "House Robber II",
        "difficulty": 1,
        "answer": "        if not nums:\n            return 0\n        if len(nums) == 1:\n            return nums[0]\n        if len(nums) == 2:\n            return max(nums)\n        if len(nums) == 3:\n            return max(nums) + max(nums[1:])\n        if len(nums) == 4:\n            return max(nums) + max(nums[1:]) + max(nums[2:])\n        if len(nums) == 5:\n            return max(nums) + max(nums[1:]) + max(nums[2:]) + max(nums[3:])\n        if len(nums) == 6:\n            return max(nums) + max(nums[1:]) + max(nums[2:]) + max(nums[3:]) + max(nums[4:])\n        if len(nums) == 7:\n            return max(nums) + max(nums[1:]) + max(nums[2:"
    },
    {
        "number": 214,
        "title": "Shortest Palindrome",
        "difficulty": 2,
        "answer": "        if len(s) == 1:\n            return s\n        elif len(s) == 2:\n            return s\n        elif len(s) == 3:\n            return s\n        elif len(s) == 4:\n            return s\n        elif len(s) == 5:\n            return s\n        elif len(s) == 6:\n            return s\n        elif len(s) == 7:\n            return s\n        elif len(s) == 8:\n            return s\n        elif len(s) == 9:\n            return s\n        elif len(s) == 10:\n            return s\n        elif len(s) == 11:\n            return s\n        elif len(s) == 12:\n            return s\n        elif len(s) == 13:\n            return s\n        elif len(s) == 14:\n            return s\n        elif len(s) == 15:\n            return s\n        elif len(s) == 16:\n            return s\n        elif len(s) == 17:\n"
    },
    {
        "number": 215,
        "title": "Kth Largest Element in an Array",
        "difficulty": 1,
        "answer": "        n = len(nums)\n        if n == 0:\n            return 0\n        elif n == 1:\n            return nums[0]\n        elif n == 2:\n            return max(nums)\n        elif n == 3:\n            return max(nums[0], nums[1])\n        elif n == 4:\n            return max(nums[0], nums[1], nums[2])\n        elif n == 5:\n            return max(nums[0], nums[1], nums[2], nums[3])\n        elif n == 6:\n            return max(nums[0], nums[1], nums[2], nums[3], nums[4])\n        elif n == 7:\n            return max(nums[0], nums[1], nums[2], nums[3], nums[4], nums[5])\n        elif n == 8:\n            return max(nums[0], nums[1], nums[2], nums[3], num"
    },
    {
        "number": 216,
        "title": "Combination Sum III",
        "difficulty": 1,
        "answer": "        if k > n:\n            return []\n        if k == 1:\n            return [[n]]\n        if k == 2:\n            return [[n, n-1]]\n        if k == 3:\n            return [[n, n-1, n-2]]\n        if k == 4:\n            return [[n, n-1, n-2, n-3]]\n        if k == 5:\n            return [[n, n-1, n-2, n-3, n-4]]\n        if k == 6:\n            return [[n, n-1, n-2, n-3, n-4, n-5]]\n        if k == 7:\n            return [[n, n-1, n-2, n-3, n-4, n-5, n-6]]\n        if k == 8:\n            return [[n, n-1, n-2, n-3, n-4, n-5, n-6, n-7]]\n        if k == 9:\n            return [[n, n-1, n-2, n-3"
    },
    {
        "number": 217,
        "title": "Contains Duplicate",
        "difficulty": 0,
        "answer": "        if not nums:\n            return False\n        if len(nums) == 1:\n            return False\n        if len(nums) == 2:\n            return nums[0] == nums[1]\n        if len(nums) == 3:\n            return nums[0] == nums[1] or nums[0] == nums[2] or nums[1] == nums[2]\n        if len(nums) == 4:\n            return nums[0] == nums[1] or nums[0] == nums[2] or nums[0] == nums[3] or nums[1] == nums[2] or nums[1] == nums[3] or nums[2] == nums[3]\n        if len(nums) == 5:\n            return nums[0] == nums[1] or nums[0] == nums[2] or nums[0] == nums[3] or nums[0] == nums[4] or nums[1"
    },
    {
        "number": 218,
        "title": "The Skyline Problem",
        "difficulty": 2,
        "answer": "        buildings.sort(key=lambda x: x[0])\n        skyline = []\n        for i in range(len(buildings)):\n            if i == 0:\n                skyline.append([buildings[i][0], buildings[i][2]])\n            elif buildings[i][0] == buildings[i-1][1]:\n                skyline[-1][1] = buildings[i][1]\n            else:\n                skyline.append([buildings[i][0], buildings[i][2]])\n        return skyline"
    },
    {
        "number": 219,
        "title": "Contains Duplicate II",
        "difficulty": 0,
        "answer": "        n = len(nums)\n        if n < 2:\n            return False\n        if n == 2:\n            return nums[0] == nums[1]\n        if n == 3:\n            return nums[0] == nums[1] and nums[1] == nums[2]\n        if n == 4:\n            return nums[0] == nums[1] and nums[1] == nums[2] and nums[2] == nums[3]\n        if n == 5:\n            return nums[0] == nums[1] and nums[1] == nums[2] and nums[2] == nums[3] and nums[3] == nums[4]\n        if n == 6:\n            return nums[0] == nums[1] and nums[1] == nums[2] and nums[2] == nums[3] and nums[3] == nums[4] and nums[4] == nums[5]\n        if n == 7"
    },
    {
        "number": 220,
        "title": "Contains Duplicate III",
        "difficulty": 2,
        "answer": "        n = len(nums)\n        if n < 2:\n            return False\n        if n == 2:\n            return nums[0] == nums[1]\n        if n == 3:\n            return nums[0] == nums[1] and nums[1] == nums[2]\n        if n == 4:\n            return nums[0] == nums[1] and nums[1] == nums[2] and nums[2] == nums[3]\n        if n == 5:\n            return nums[0] == nums[1] and nums[1] == nums[2] and nums[2] == nums[3] and nums[3] == nums[4]\n        if n == 6:\n            return nums[0] == nums[1] and nums[1] == nums[2] and nums[2] == nums[3] and nums[3] == nums[4] and nums[4] == nums[5]\n        if n == 7"
    },
    {
        "number": 221,
        "title": "Maximal Square",
        "difficulty": 1,
        "answer": "        if not matrix:\n            return 0\n        m, n = len(matrix), len(matrix[0])\n        dp = [[0] * n for _ in range(m)]\n        for i in range(m):\n            for j in range(n):\n                if matrix[i][j] == '1':\n                    dp[i][j] = 1\n                    for i_ in range(i - 1, -1, -1):\n                        if matrix[i_][j] == '1':\n                            dp[i][j] = max(dp[i][j], dp[i_][j] + 1)\n                    for j_ in range(j - 1, -1, -1):\n                        if matrix[i][j_] == '1':\n                            dp[i][j] = max(dp[i][j], dp[i][j_] + 1)\n        return dp[-1][-1]\n"
    },
    {
        "number": 222,
        "title": "Count Complete Tree Nodes",
        "difficulty": 1,
        "answer": "        if not root:\n            return 0\n        return self.countNodes(root.left) + self.countNodes(root.right) + 1"
    },
    {
        "number": 223,
        "title": "Rectangle Area",
        "difficulty": 1,
        "answer": "        area = 0\n        if ax1 > bx1:\n            area += (ax2 - ax1) * (by1 - ay1)\n        else:\n            area += (bx2 - bx1) * (by1 - ay1)\n        if ay1 > by1:\n            area += (ax2 - ax1) * (by2 - ay1)\n        else:\n            area += (bx2 - bx1) * (by2 - ay1)\n        if ax1 > bx1:\n            area += (ax2 - ax1) * (by2 - by1)\n        else:\n            area += (bx2 - bx1) * (by2 - by1)\n        return area"
    },
    {
        "number": 224,
        "title": "Basic Calculator",
        "difficulty": 2,
        "answer": "        stack = []\n        for c in s:\n            if c.isdigit():\n                stack.append(int(c))\n            elif c == '+':\n                stack.append(stack.pop() + stack.pop())\n            elif c == '-':\n                stack.append(stack.pop() - stack.pop())\n            elif c == '*':\n                stack.append(stack.pop() * stack.pop())\n            elif c == '/':\n                stack.append(stack.pop() / stack.pop())\n            elif c == '(':\n                stack.append(stack.pop())\n            elif c == ')':\n                while stack[-1]!= '(':\n                    stack.pop()\n                stack.pop()\n            else:\n                print(stack)\n                return stack[-1]\n        return stack[-1]\n"
    },
    {
        "number": 225,
        "title": "Implement Stack using Queues",
        "difficulty": 0,
        "answer": "        self.q1 = deque()\n        self.q2 = deque()\n        self.q1.append(x)\n        self.q2.append(x)\n        self.q1.append(x)\n        self.q2.append(x)\n        self.q1.append(x)\n        self.q2.append(x)\n        self.q1.append(x)\n        self.q2.append(x)\n        self.q1.append(x)\n        self.q2.append(x)\n        self.q1.append(x)\n        self.q2.append(x)\n        self.q1.append(x)\n        self.q2.append(x)\n        self.q1.append(x)\n        self.q2.append(x)\n        self.q1.append(x)\n        self.q2.append(x)\n        self.q1.append(x)\n        self.q2.append(x)\n        self.q1.append(x)"
    },
    {
        "number": 226,
        "title": "Invert Binary Tree",
        "difficulty": 0,
        "answer": "        if root is None:\n            return None\n        root.left, root.right = self.invertTree(root.left), self.invertTree(root.right)\n        return root"
    },
    {
        "number": 227,
        "title": "Basic Calculator II",
        "difficulty": 1,
        "answer": "        stack = []\n        for c in s:\n            if c.isdigit():\n                stack.append(int(c))\n            elif c == '+':\n                stack.append(stack.pop() + stack.pop())\n            elif c == '-':\n                stack.append(stack.pop() - stack.pop())\n            elif c == '*':\n                stack.append(stack.pop() * stack.pop())\n            elif c == '/':\n                stack.append(stack.pop() // stack.pop())\n            else:\n                stack.append(stack.pop() + stack.pop() * stack.pop())\n        return stack.pop()\n"
    },
    {
        "number": 228,
        "title": "Summary Ranges",
        "difficulty": 0,
        "answer": "        ranges = []\n        if len(nums) == 0:\n            return ranges\n        if len(nums) == 1:\n            return [str(nums[0])]\n        if len(nums) == 2:\n            return [str(nums[0]), str(nums[1])]\n        if len(nums) == 3:\n            return [str(nums[0]), str(nums[1]), str(nums[2])]\n        if len(nums) == 4:\n            return [str(nums[0]), str(nums[1]), str(nums[2]), str(nums[3])]\n        if len(nums) == 5:\n            return [str(nums[0]), str(nums[1]), str(nums[2]), str(nums[3]), str(nums[4])]\n        if len(nums) == 6:\n            return [str(nums[0]), str(nums[1]), str(nums[2]), str(nums[3]), str("
    },
    {
        "number": 229,
        "title": "Majority Element II",
        "difficulty": 1,
        "answer": "        n = len(nums)\n        if n == 1:\n            return [nums[0]]\n        elif n == 2:\n            return [nums[0]] if nums[0] == nums[1] else [nums[1]]\n        elif n == 3:\n            return [nums[0]] if nums[0] == nums[1] and nums[1] == nums[2] else [nums[1]] if nums[0] == nums[2] else [nums[2]]\n        elif n == 4:\n            return [nums[0]] if nums[0] == nums[1] and nums[1] == nums[2] and nums[2] == nums[3] else [nums[0]] if nums[0] == nums[2] and nums[2] == nums[3] else [nums[1]] if nums[0] == nums[3] else [nums[2]] if nums[1] == nums[3] else"
    },
    {
        "number": 230,
        "title": "Kth Smallest Element in a BST",
        "difficulty": 1,
        "answer": "        if not root:\n            return 0\n        if not root.left and not root.right:\n            return root.val\n        if not root.left:\n            return self.kthSmallest(root.right, k - 1)\n        if not root.right:\n            return self.kthSmallest(root.left, k - 1)\n        return self.kthSmallest(root.left, k - 1) + self.kthSmallest(root.right, k - 1)"
    },
    {
        "number": 231,
        "title": "Power of Two",
        "difficulty": 0,
        "answer": "        return n > 0 and n & (n - 1) == 0\n"
    },
    {
        "number": 232,
        "title": "Implement Queue using Stacks",
        "difficulty": 0,
        "answer": "        self.stack1 = []\n        self.stack2 = []\n        self.stack1.append(x)\n        self.stack2.append(x)\n        self.stack1.append(x)\n        self.stack2.append(x)\n        self.stack1.append(x)\n        self.stack2.append(x)\n        self.stack1.append(x)\n        self.stack2.append(x)\n        self.stack1.append(x)\n        self.stack2.append(x)\n        self.stack1.append(x)\n        self.stack2.append(x)\n        self.stack1.append(x)\n        self.stack2.append(x)\n        self.stack1.append(x)\n        self.stack2.append(x)\n        self.stack1.append(x)\n        self.stack2.append(x)\n        self.stack1.append(x)\n        self.stack2.append(x)\n        self.stack1.append(x)\n        self."
    },
    {
        "number": 233,
        "title": "Number of Digit One",
        "difficulty": 2,
        "answer": "        if n < 0:\n            return 0\n        if n == 0:\n            return 0\n        if n == 1:\n            return 1\n        if n == 2:\n            return 1\n        if n == 3:\n            return 2\n        if n == 4:\n            return 2\n        if n == 5:\n            return 3\n        if n == 6:\n            return 3\n        if n == 7:\n            return 4\n        if n == 8:\n            return 4\n        if n == 9:\n            return 5\n        if n == 10:\n            return 5\n        if n == 11:\n            return 6\n        if n == 12:\n            return 6\n        if n == 13:\n            return 6\n        return self.countDigitOne(n // 10) + self.countDigitOne(n % 10)\n"
    },
    {
        "number": 234,
        "title": "Palindrome Linked List",
        "difficulty": 0,
        "answer": "        if head is None:\n            return True\n        if head.next is None:\n            return head.val == head.val\n        else:\n            return self.isPalindrome(head.next) and self.isPalindrome(head) and self.isPalindrome(head.next.next) and self.isPalindrome(head.next.next.next) and self.isPalindrome(head.next.next.next.next) and self.isPalindrome(head.next.next.next.next.next)"
    },
    {
        "number": 235,
        "title": "Lowest Common Ancestor of a Binary Search Tree",
        "difficulty": 1,
        "answer": "        if root is None:\n            return None\n        if root.val < p.val and root.val < q.val:\n            return root\n        if root.val > p.val and root.val > q.val:\n            return root\n        if p.val < root.val and q.val < root.val:\n            return self.lowestCommonAncestor(root.left, p, q)\n        if p.val > root.val and q.val > root.val:\n            return self.lowestCommonAncestor(root.right, p, q)\n        return root"
    },
    {
        "number": 236,
        "title": "Lowest Common Ancestor of a Binary Tree",
        "difficulty": 1,
        "answer": "        if root is None or root.left is None or root.right is None:\n            return root\n        if p.val < root.val and q.val < root.val:\n            return self.lowestCommonAncestor(root.left, p, q)\n        elif p.val > root.val and q.val > root.val:\n            return self.lowestCommonAncestor(root.right, p, q)\n        else:\n            return root"
    },
    {
        "number": 237,
        "title": "Delete Node in a Linked List",
        "difficulty": 1,
        "answer": "        # Definition for singly-linked list.\n        class ListNode:\n            def __init__(self, x):\n                self.val = x\n                self.next = None"
    },
    {
        "number": 238,
        "title": "Product of Array Except Self",
        "difficulty": 1,
        "answer": "        n = len(nums)\n        if n == 1:\n            return [1]\n        if n == 2:\n            return [nums[0] * nums[1]]\n        if n == 3:\n            return [nums[0] * nums[1] * nums[2]]\n        if n == 4:\n            return [nums[0] * nums[1] * nums[2] * nums[3]]\n        if n == 5:\n            return [nums[0] * nums[1] * nums[2] * nums[3] * nums[4]]\n        if n == 6:\n            return [nums[0] * nums[1] * nums[2] * nums[3] * nums[4] * nums[5]]\n        if n == 7:\n            return [nums[0] * nums[1] * nums[2] * nums[3] * nums[4] * nums[5] * nums[6]]\n        if n == 8:"
    },
    {
        "number": 239,
        "title": "Sliding Window Maximum",
        "difficulty": 2,
        "answer": "        # sliding window\n        # [1] [2] [3]\n        # [1] [2] [3]\n        # [1] [2] [3]\n        # [1] [2] [3]\n        # [1] [2] [3]\n        # [1] [2] [3]\n        # [1] [2] [3]\n        # [1] [2] [3]\n        # [1] [2] [3]\n        # [1] [2] [3]\n        # [1] [2] [3]\n        # [1] [2] [3]\n        # [1] [2] [3]\n        # [1] [2] [3]\n        # [1] [2] [3]\n        # [1] [2] [3]\n        # [1] [2] [3]\n        # [1] [2] [3]\n        # [1] [2] [3]\n        # [1] [2] [3]\n        # [1]"
    },
    {
        "number": 240,
        "title": "Search a 2D Matrix II",
        "difficulty": 1,
        "answer": "        m, n = len(matrix), len(matrix[0])\n        if m == 0 or n == 0:\n            return False\n        if m == 1 or n == 1:\n            return matrix[0][0] == target\n        if m == 2 or n == 2:\n            return matrix[0][0] <= target and matrix[0][1] >= target\n        if m == 3 or n == 3:\n            return matrix[0][0] <= target and matrix[0][1] <= target and matrix[0][2] >= target\n        if m == 4 or n == 4:\n            return matrix[0][0] <= target and matrix[0][1] <= target and matrix[0][2] <= target and matrix[0][3] >= target\n        if m == 5 or n == 5:\n            return matrix[0][0] <= target and matrix[0][1] <= target and matrix[0][2] <= target and matrix[0][3] <= target and matrix[0][4] >= target\n        if m == 6 or n == 6:\n            return matrix[0]["
    },
    {
        "number": 241,
        "title": "Different Ways to Add Parentheses",
        "difficulty": 1,
        "answer": "        # https://leetcode.com/problems/different-ways-to-compute-an-expression/discuss/\n        # https://leetcode.com/problems/different-ways-to-compute-an-expression/discuss/\n        # https://leetcode.com/problems/different-ways-to-compute-an-expression/discuss/\n        # https://leetcode.com/problems/different-ways-to-compute-an-expression/discuss/\n        # https://leetcode.com/problems/different-ways-to-compute-an-expression/discuss/\n        # https://leetcode.com/problems/different-ways-to-compute-an-expression/discuss/\n        # https://leetcode.com/problems/different-ways-to-compute-an-expression/discuss/\n        # https://leetcode.com/problems/different-ways-to-compute-an-expression/discuss/\n        # https://leetcode.com/"
    },
    {
        "number": 242,
        "title": "Valid Anagram",
        "difficulty": 0,
        "answer": "        return sorted(s) == sorted(t)"
    },
    {
        "number": 257,
        "title": "Binary Tree Paths",
        "difficulty": 0,
        "answer": "        if not root:\n            return []\n        if not root.left and not root.right:\n            return [str(root.val)]\n        return self.binaryTreePaths(root.left) + self.binaryTreePaths(root.right)"
    },
    {
        "number": 258,
        "title": "Add Digits",
        "difficulty": 0,
        "answer": "        res = 0\n        while num > 0:\n            res += num % 10\n            num //= 10\n        return res"
    },
    {
        "number": 260,
        "title": "Single Number III",
        "difficulty": 1,
        "answer": "        # https://leetcode.com/problems/single-number-ii/discuss/105586/Java-C-solution-with-explanation\n        # https://leetcode.com/problems/single-number-ii/discuss/105586/C-solution-with-explanation\n        # https://leetcode.com/problems/single-number-ii/discuss/105586/Java-C-solution-with-explanation\n        # https://leetcode.com/problems/single-number-ii/discuss/105586/C-solution-with-explanation\n        # https://leetcode.com/problems/single-number-ii/discuss/105586/Java-C-solution-with-explanation\n        # https://leetcode.com/problems/single-number-ii/discuss/105586/C-solution-with-explanation\n        # https://leetcode.com/problems/single-number-ii/discuss/"
    },
    {
        "number": 263,
        "title": "Ugly Number",
        "difficulty": 0,
        "answer": "        if n < 2:\n            return False\n        if n == 2:\n            return True\n        if n == 3:\n            return True\n        if n == 5:\n            return True\n        if n % 2 == 0:\n            return False\n        if n % 3 == 0:\n            return False\n        if n % 5 == 0:\n            return False\n        return self.isUgly(n // 2) and self.isUgly(n // 3) and self.isUgly(n // 5)"
    },
    {
        "number": 264,
        "title": "Ugly Number II",
        "difficulty": 1,
        "answer": "        ugly_numbers = [1]\n        for i in range(2, n):\n            ugly_numbers.append(self.next_ugly_number(ugly_numbers))\n        return ugly_numbers[n - 1]"
    },
    {
        "number": 268,
        "title": "Missing Number",
        "difficulty": 0,
        "answer": "        n = len(nums)\n        if n == 0:\n            return 0\n        if n == 1:\n            return nums[0]\n        if n == 2:\n            return nums[0] + nums[1]\n        if n == 3:\n            return nums[0] + nums[1] + nums[2]\n        if n == 4:\n            return nums[0] + nums[1] + nums[2] + nums[3]\n        if n == 5:\n            return nums[0] + nums[1] + nums[2] + nums[3] + nums[4]\n        if n == 6:\n            return nums[0] + nums[1] + nums[2] + nums[3] + nums[4] + nums[5]\n        if n == 7:\n            return nums[0] + nums[1] + nums[2] + nums[3] + nums[4] + nums[5] + nums[6]"
    },
    {
        "number": 273,
        "title": "Integer to English Words",
        "difficulty": 2,
        "answer": "        if num == 0:\n            return \"Zero\"\n        if num < 0:\n            return \"Negative \" + self.numberToWords(-num)\n        if num == 1:\n            return \"One\"\n        if num < 20:\n            return str(num) + \" \" + \"thousand\"\n        if num < 100:\n            return str(num) + \" \" + \"thousand\"\n        if num < 1000:\n            return str(num) + \" \" + \"thousand\"\n        if num < 10000:\n            return str(num) + \" \" + \"thousand\"\n        if num < 100000:\n            return str(num) + \" \" + \"thousand\"\n        if num < 1000000:\n            return str(num) + \" \" + \"thousand\"\n        if num < 10000000:\n            return str(num) + \" \" + \"thousand\"\n        if num < 100000000:\n            return str(num) + \" \" + \"thousand\"\n        if num < 1000000000:\n            return str(num) + \" \" + \"thousand"
    },
    {
        "number": 274,
        "title": "H-Index",
        "difficulty": 1,
        "answer": "        citations.sort()\n        n = len(citations)\n        h = 0\n        for i in range(1, n):\n            if citations[i] > citations[h]:\n                h = i\n        return h + 1"
    },
    {
        "number": 275,
        "title": "H-Index II",
        "difficulty": 1,
        "answer": "        citations.sort()\n        n = len(citations)\n        h = 0\n        for i in range(1, n):\n            if citations[i] > citations[h]:\n                h = i\n        return h + 1"
    },
    {
        "number": 278,
        "title": "First Bad Version",
        "difficulty": 0,
        "answer": "        for i in range(1, n):\n            if isBadVersion(i):\n                return i\n        return n"
    },
    {
        "number": 279,
        "title": "Perfect Squares",
        "difficulty": 1,
        "answer": "        if n < 1:\n            return 0\n        if n == 1:\n            return 1\n        if n == 2:\n            return 1\n        if n == 3:\n            return 1\n        if n == 4:\n            return 1\n        if n == 5:\n            return 2\n        if n == 6:\n            return 2\n        if n == 7:\n            return 2\n        if n == 8:\n            return 2\n        if n == 9:\n            return 2\n        if n == 10:\n            return 2\n        if n == 11:\n            return 3\n        if n == 12:\n            return 3\n        if n == 13:\n            return 3\n        if n == 14:\n            return 3\n        if n == 15:\n            return 3\n        if n == 16:\n            return 4\n        if n == 17:\n            return 4\n        if n == 18:\n            return 4\n        if n == 19:\n            return 4\n        if n == 20:\n            return 4\n        if n == 21:\n            return 4\n        if n == 22:\n            "
    },
    {
        "number": 282,
        "title": "Expression Add Operators",
        "difficulty": 2,
        "answer": "        if num == '':\n            return []\n        if num == '0':\n            return [num]\n        if num[0] == '0':\n            return self.addOperators(num[1:], target)\n        if num[-1] == '0':\n            return self.addOperators(num[:-1], target)\n        if num[0] == '1':\n            return self.addOperators(num[1:], target)\n        if num[-1] == '1':\n            return self.addOperators(num[:-1], target)\n        if num[0] == '2':\n            return self.addOperators(num[1:], target)\n        if num[-1] == '2':\n            return self.addOperators(num[:-1], target)\n        if num[0] == '3':\n            return self.addOperators(num[1:], target)\n        if num[-1] == '3':\n            return self.addOperators(num[:-1], target)\n        if num[0"
    },
    {
        "number": 283,
        "title": "Move Zeroes",
        "difficulty": 0,
        "answer": "        # https://leetcode.com/problems/move-zeroes/discuss/105586/Java-O(1)-space-and-O(n)-time-solution-with-explanation\n        # https://leetcode.com/problems/move-zeroes/discuss/105586/Java-O(1)-space-and-O(n)-time-solution-with-explanation\n        # https://leetcode.com/problems/move-zeroes/discuss/105586/Java-O(1)-space-and-O(n)-time-solution-with-explanation\n        # https://leetcode.com/problems/move-zeroes/discuss/105586/Java-O(1)-space-and-O(n)-time-solution-with-explanation\n        # https://leetcode.com/problems/move-zeroes/discuss/105586/Java-O(1)-space-and-O(n)-time-solution-with-explanation\n"
    },
    {
        "number": 284,
        "title": "Peeking Iterator",
        "difficulty": 1,
        "answer": "        class PeekingIterator(object):\n            def __init__(self, iterator):\n                \"\"\"\n                :type iterator: List[int]\n                \"\"\"\n                self.iterator = iterator\n                self.pointer = 0\n                self.hasNext = True"
    },
    {
        "number": 287,
        "title": "Find the Duplicate Number",
        "difficulty": 1,
        "answer": "        n = len(nums)\n        if n == 1:\n            return nums[0]\n        elif n == 2:\n            return nums[0] if nums[0] == nums[1] else -1\n        elif n == 3:\n            return nums[0] if nums[0] == nums[1] and nums[1] == nums[2] else -1\n        elif n == 4:\n            return nums[0] if nums[0] == nums[1] and nums[1] == nums[2] and nums[2] == nums[3] else -1\n        elif n == 5:\n            return nums[0] if nums[0] == nums[1] and nums[1] == nums[2] and nums[2] == nums[3] and nums[3] == nums[4] else -1\n        elif n == 6:\n            return nums[0] if nums[0] == nums[1] and nums"
    },
    {
        "number": 289,
        "title": "Game of Life",
        "difficulty": 1,
        "answer": "        m, n = len(board), len(board[0])\n        if m == 0 or n == 0:\n            return\n        # print(board)\n        # print(m, n)\n        # print(board[0])\n        # print(board[0][0])\n        # print(board[0][0] == 1)\n        # print(board[0][0] == 0)\n        # print(board[0][0] == 2)\n        # print(board[0][0] == 3)\n        # print(board[0][0] == 4)\n        # print(board[0][0] == 5)\n        # print(board[0][0] == 6)\n        # print(board[0][0] == 7)\n        # print(board[0][0] == 8)\n        # print(board[0][0] == 9)\n        # print(board[0][0] == 10)\n        # print(board[0][0] == 11)\n        # print(board[0][0] == 12)\n        #"
    },
    {
        "number": 290,
        "title": "Word Pattern",
        "difficulty": 0,
        "answer": "        pattern_set = set(pattern)\n        s_set = set(s)\n        if len(pattern_set)!= len(s_set):\n            return False\n        if len(pattern_set) == 0:\n            return True\n        if len(pattern_set) == 1:\n            return pattern_set.issubset(s_set)\n        if len(pattern_set) == 2:\n            return pattern_set.issubset(s_set) and pattern_set.issubset(s_set)\n        if len(pattern_set) == 3:\n            return pattern_set.issubset(s_set) and pattern_set.issubset(s_set) and pattern_set.issubset(s_set)\n        if len(pattern_set) == 4:\n            return pattern_set.issubset(s_set) and pattern_set.issubset(s_set) and pattern_set.issubset(s_set) and pattern_set.issubset(s_set)\n        return False\n"
    },
    {
        "number": 292,
        "title": "Nim Game",
        "difficulty": 0,
        "answer": "        return self.canWinNim_recur(n)"
    },
    {
        "number": 295,
        "title": "Find Median from Data Stream",
        "difficulty": 2,
        "answer": "        # Your MedianFinder object will be instantiated and called as such:\n        # obj = MedianFinder()\n        # obj.addNum(num)\n        # param_2 = obj.findMedian()\n        # obj.addNum(num)\n        # param_3 = obj.findMedian()\n        # obj.addNum(num)\n        # param_4 = obj.findMedian()\n        # obj.addNum(num)\n        # param_5 = obj.findMedian()\n        # obj.addNum(num)\n        # param_6 = obj.findMedian()\n        # obj.addNum(num)\n        # param_7 = obj.findMedian()\n        # obj.addNum(num)\n        # param_8 = obj.findMedian()\n        # obj.addNum(num)\n        # param_9 = obj.findMedian()\n        # obj.addNum(num)\n        # param_10 = obj.findMedian()\n        # obj.addNum(num)\n        # param_11 = obj"
    },
    {
        "number": 297,
        "title": "Serialize and Deserialize Binary Tree",
        "difficulty": 2,
        "answer": "        def serialize(node):\n            if node is None:\n                return 'null'\n            else:\n                return str(node.val) + ',' + serialize(node.left) + ',' + serialize(node.right)"
    },
    {
        "number": 299,
        "title": "Bulls and Cows",
        "difficulty": 1,
        "answer": "        secret_list = list(secret)\n        guess_list = list(guess)\n        bull_count = 0\n        cow_count = 0\n        for i in range(len(secret_list)):\n            if secret_list[i] == guess_list[i]:\n                bull_count += 1\n            elif secret_list[i]!= guess_list[i]:\n                cow_count += 1\n        return f\"{bull_count}A{cow_count}B\""
    },
    {
        "number": 300,
        "title": "Longest Increasing Subsequence",
        "difficulty": 1,
        "answer": "        if not nums:\n            return 0\n        n = len(nums)\n        dp = [1] * n\n        for i in range(1, n):\n            for j in range(i):\n                if nums[i] > nums[j]:\n                    dp[i] = max(dp[i], dp[j] + 1)\n        return dp[-1]"
    },
    {
        "number": 301,
        "title": "Remove Invalid Parentheses",
        "difficulty": 2,
        "answer": "        stack = []\n        valid = []\n        for c in s:\n            if c == '(':\n                stack.append(c)\n            elif c == ')':\n                if len(stack) == 0:\n                    valid.append(c)\n                else:\n                    stack.pop()\n        return valid"
    },
    {
        "number": 303,
        "title": "Range Sum Query - Immutable",
        "difficulty": 0,
        "answer": "        if left > right:\n            return 0\n        if left == right:\n            return nums[left]\n        if left + 1 == right:\n            return nums[left] + nums[right]\n        if left + 2 == right:\n            return nums[left] + nums[left + 1] + nums[right]\n        if left + 3 == right:\n            return nums[left] + nums[left + 1] + nums[left + 2] + nums[right]\n        if left + 4 == right:\n            return nums[left] + nums[left + 1] + nums[left + 2] + nums[left + 3] + nums[right]\n        if left + 5 == right:\n            return nums[left] + nums[left + 1] + nums[left + 2] + nums[left + 3] + nums[left + 4] + nums[right]\n        if left + 6 == right:\n            return nums[left] + nums[left + 1] + nums[left"
    },
    {
        "number": 304,
        "title": "Range Sum Query 2D - Immutable",
        "difficulty": 1,
        "answer": "        if row1 > row2 or col1 > col2:\n            return 0\n        if row1 == row2 and col1 == col2:\n            return matrix[row1][col1]\n        if row1 == row2:\n            return matrix[row1][col1] + matrix[row1][col2]\n        if col1 == col2:\n            return matrix[row1][col1] + matrix[row2][col1]\n        return matrix[row1][col1] + matrix[row1][col2] + matrix[row2][col1] + matrix[row2][col2]"
    },
    {
        "number": 306,
        "title": "Additive Number",
        "difficulty": 1,
        "answer": "        if not num:\n            return False\n        if len(num) == 1:\n            return True\n        if len(num) == 2:\n            return num[0] + num[1] == num[1] + num[0]\n        if len(num) == 3:\n            return num[0] + num[1] + num[2] == num[1] + num[2] + num[0]\n        if len(num) == 4:\n            return num[0] + num[1] + num[2] + num[3] == num[1] + num[2] + num[3] + num[0]\n        if len(num) == 5:\n            return num[0] + num[1] + num[2] + num[3] + num[4] == num[1] + num[2] + num[3] + num[4] + num[0]\n        if len(num) == 6:\n            return num[0] + num[1] + num[2] + num[3] + num[4] + num"
    },
    {
        "number": 307,
        "title": "Range Sum Query - Mutable",
        "difficulty": 1,
        "answer": "        if left > right:\n            return 0\n        if left == right:\n            return nums[left]\n        if left + 1 == right:\n            return nums[left] + nums[right]\n        if left + 2 == right:\n            return nums[left] + nums[left + 1] + nums[right]\n        if left + 3 == right:\n            return nums[left] + nums[left + 1] + nums[left + 2] + nums[right]\n        if left + 4 == right:\n            return nums[left] + nums[left + 1] + nums[left + 2] + nums[left + 3] + nums[right]\n        if left + 5 == right:\n            return nums[left] + nums[left + 1] + nums[left + 2] + nums[left + 3] + nums[left + 4] + nums[right]\n        if left + 6 == right:\n            return nums[left] + nums[left + 1] + nums[left"
    },
    {
        "number": 309,
        "title": "Best Time to Buy and Sell Stock with Cooldown",
        "difficulty": 1,
        "answer": "        if not prices:\n            return 0\n        if len(prices) == 1:\n            return 0\n        if len(prices) == 2:\n            return max(prices[0], prices[1])\n        if len(prices) == 3:\n            return max(prices[0], max(prices[1], prices[2]))\n        if len(prices) == 4:\n            return max(prices[0], max(prices[1], max(prices[2], prices[3])))\n        if len(prices) == 5:\n            return max(prices[0], max(prices[1], max(prices[2], max(prices[3], prices[4]))))\n        if len(prices) == 6:\n            return max(prices[0], max(prices[1], max(prices[2], max(prices[3], max(prices[4], prices[5]))))\n        if len(prices) == 7:\n            return max(prices[0], max(prices[1"
    },
    {
        "number": 310,
        "title": "Minimum Height Trees",
        "difficulty": 1,
        "answer": "        if n == 1:\n            return [0]\n        if n == 2:\n            return [0, 1]\n        if n == 3:\n            return [0, 1, 2]\n        if n == 4:\n            return [0, 1, 2, 3]\n        if n == 5:\n            return [0, 1, 2, 3, 4]\n        if n == 6:\n            return [0, 1, 2, 3, 4, 5]\n        if n == 7:\n            return [0, 1, 2, 3, 4, 5, 6]\n        if n == 8:\n            return [0, 1, 2, 3, 4, 5, 6, 7]\n        if n == 9:\n            return [0, 1, 2, 3, 4, 5, 6, 7, 8]\n        if n == 10:\n            return [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n        if n == 11:\n            return [0, 1, 2, 3, 4, 5, 6, 7, 8, 9,"
    },
    {
        "number": 312,
        "title": "Burst Balloons",
        "difficulty": 2,
        "answer": "        n = len(nums)\n        dp = [0] * (n + 1)\n        for i in range(1, n + 1):\n            dp[i] = dp[i - 1] + nums[i - 1] * nums[i] * nums[i + 1]\n        return dp[-1]"
    },
    {
        "number": 313,
        "title": "Super Ugly Number",
        "difficulty": 1,
        "answer": "        ugly = [1]\n        for i in range(1, n):\n            ugly.append(min(primes, key=lambda x: self.nthUglyNumber(x, ugly)))\n        return ugly[n - 1]"
    },
    {
        "number": 315,
        "title": "Count of Smaller Numbers After Self",
        "difficulty": 2,
        "answer": "        n = len(nums)\n        if n == 0:\n            return [0]\n        if n == 1:\n            return [0] if nums[0] < 0 else [1]\n        if n == 2:\n            return [0] if nums[0] < 0 else [1] if nums[1] < 0 else [1, 0]\n        if n == 3:\n            return [0] if nums[0] < 0 else [1] if nums[1] < 0 else [1, 0] if nums[2] < 0 else [1, 0, 1]\n        if n == 4:\n            return [0] if nums[0] < 0 else [1] if nums[1] < 0 else [1, 0] if nums[2] < 0 else [1, 0, 1] if nums[3] < 0 else [1, 0, 1, 0]\n        if n == 5:\n            return [0] if nums[0] < 0 else [1] if nums[1] < 0 else [1,"
    },
    {
        "number": 316,
        "title": "Remove Duplicate Letters",
        "difficulty": 1,
        "answer": "        # https://leetcode.com/problems/remove-duplicate-letters/discuss/\n        # https://leetcode.com/problems/remove-duplicate-letters/discuss/\n        # https://leetcode.com/problems/remove-duplicate-letters/discuss/\n        # https://leetcode.com/problems/remove-duplicate-letters/discuss/\n        # https://leetcode.com/problems/remove-duplicate-letters/discuss/\n        # https://leetcode.com/problems/remove-duplicate-letters/discuss/\n        # https://leetcode.com/problems/remove-duplicate-letters/discuss/\n        # https://leetcode.com/problems/remove-duplicate-letters/discuss/\n        # https://leetcode.com/problems/remove-duplicate-letters/discuss/\n        # https://leetcode.com/problems/remove-duplicate-letters/discuss/\n"
    },
    {
        "number": 318,
        "title": "Maximum Product of Word Lengths",
        "difficulty": 1,
        "answer": "        # Solution 1: DP\n        # dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n        # dp[i][j] = max(dp[i][j-1], dp[i-1][j])\n        # dp[i][j] = max(dp[i][j-1], dp[i-1][j-1])\n        # dp[i][j] = max(dp[i][j-1], dp[i-1][j-1])\n        # dp[i][j] = max(dp[i][j-1], dp[i-1][j-1])\n        # dp[i][j] = max(dp[i][j-1], dp[i-1][j-1])\n        # dp[i][j] = max(dp[i][j-1], dp[i-1][j-1])\n        # dp[i][j] = max(dp[i][j-1], dp["
    },
    {
        "number": 319,
        "title": "Bulb Switcher",
        "difficulty": 1,
        "answer": "        return n * (n + 1) // 2"
    },
    {
        "number": 321,
        "title": "Create Maximum Number",
        "difficulty": 2,
        "answer": "        if k > len(nums1) + len(nums2):\n            return nums1 + nums2\n        if k == 0:\n            return []\n        if k == 1:\n            return [max(nums1, nums2)]\n        if k == 2:\n            return [max(nums1[0], nums2[0]), max(nums1[1], nums2[1])]\n        if k == 3:\n            return [max(nums1[0], nums2[0]), max(nums1[1], nums2[1]), max(nums1[2], nums2[2])]\n        if k == 4:\n            return [max(nums1[0], nums2[0]), max(nums1[1], nums2[1]), max(nums1[2], nums2[2]), max(nums1[3], nums2[3])]\n        if k == 5:\n            return [max(nums1[0], nums2[0]), max(nums"
    },
    {
        "number": 322,
        "title": "Coin Change",
        "difficulty": 1,
        "answer": "        if amount < 0:\n            return -1\n        dp = [0] * (amount + 1)\n        for i in range(1, amount + 1):\n            dp[i] = -1\n        for i in range(1, amount + 1):\n            for j in range(1, len(coins) + 1):\n                if i >= coins[j - 1]:\n                    dp[i] = max(dp[i], dp[i - coins[j - 1]] + 1)\n        return dp[amount]\n"
    },
    {
        "number": 324,
        "title": "Wiggle Sort II",
        "difficulty": 1,
        "answer": "        if not nums:\n            return\n        n = len(nums)\n        if n <= 1:\n            return\n        if n == 2:\n            if nums[0] > nums[1]:\n                nums[0], nums[1] = nums[1], nums[0]\n            return\n        if n == 3:\n            if nums[0] > nums[1]:\n                nums[0], nums[1] = nums[1], nums[0]\n            if nums[1] > nums[2]:\n                nums[1], nums[2] = nums[2], nums[1]\n            return\n        if n == 4:\n            if nums[0] > nums[1]:\n                nums[0], nums[1] = nums[1], nums[0]\n            if nums[1] > nums[2]:\n                nums[1], nums[2] = nums[2], nums[1]\n            if nums[2] > num"
    },
    {
        "number": 326,
        "title": "Power of Three",
        "difficulty": 0,
        "answer": "        return n > 0 and n % 3 == 0 and n // 3 == n // 3 // 3\n"
    },
    {
        "number": 327,
        "title": "Count of Range Sum",
        "difficulty": 2,
        "answer": "        n = len(nums)\n        if n == 0:\n            return 0\n        if n == 1:\n            return 1\n        if n == 2:\n            return 1 if nums[0] == nums[1] else 0\n        if n == 3:\n            return 1 if nums[0] == nums[1] and nums[1] == nums[2] else 0\n        if n == 4:\n            return 1 if nums[0] == nums[1] and nums[1] == nums[2] and nums[2] == nums[3] else 0\n        if n == 5:\n            return 1 if nums[0] == nums[1] and nums[1] == nums[2] and nums[2] == nums[3] and nums[3] == nums[4] else 0\n        if n == 6:\n            return 1 if nums[0] == nums[1] and nums[1] == nums[2] and nums[2] == nums[3] and"
    },
    {
        "number": 328,
        "title": "Odd Even Linked List",
        "difficulty": 1,
        "answer": "        odd_list = []\n        even_list = []\n        if head is None:\n            return None\n        odd_list.append(head)\n        while odd_list:\n            odd_node = odd_list.pop(0)\n            if odd_node.next is not None:\n                odd_list.append(odd_node.next)\n            else:\n                odd_list.append(None)\n            even_list.append(odd_node)\n            odd_node = odd_list.pop(0)\n            if odd_node.next is not None:\n                odd_list.append(odd_node.next)\n            else:\n                odd_list.append(None)\n            even_list.append(odd_node)\n        return even_list"
    },
    {
        "number": 329,
        "title": "Longest Increasing Path in a Matrix",
        "difficulty": 2,
        "answer": "        m, n = len(matrix), len(matrix[0])\n        dp = [[0] * n for _ in range(m)]\n        for i in range(m):\n            for j in range(n):\n                if matrix[i][j] > dp[i][j]:\n                    dp[i][j] = matrix[i][j]\n                if i > 0 and matrix[i][j] > dp[i - 1][j]:\n                    dp[i][j] = dp[i - 1][j]\n                if i < m - 1 and matrix[i][j] > dp[i + 1][j]:\n                    dp[i][j] = dp[i + 1][j]\n                if j > 0 and matrix[i][j] > dp[i][j - 1]:\n                    dp[i][j] = dp[i][j - 1]\n                if j < n - 1 and matrix[i][j] > dp[i][j + 1]:\n                    dp[i][j] = dp[i][j + 1"
    },
    {
        "number": 330,
        "title": "Patching Array",
        "difficulty": 2,
        "answer": "        if not nums:\n            return 0\n        if len(nums) == 1:\n            return 1\n        if len(nums) == 2:\n            return min(n, nums[0])\n        if len(nums) == 3:\n            return min(n, nums[0], nums[1])\n        if len(nums) == 4:\n            return min(n, nums[0], nums[1], nums[2])\n        if len(nums) == 5:\n            return min(n, nums[0], nums[1], nums[2], nums[3])\n        if len(nums) == 6:\n            return min(n, nums[0], nums[1], nums[2], nums[3], nums[4])\n        if len(nums) == 7:\n            return min(n, nums[0], nums[1], nums[2], nums[3], nums[4], nums[5])\n        if len(nums) == 8:\n"
    },
    {
        "number": 331,
        "title": "Verify Preorder Serialization of a Binary Tree",
        "difficulty": 1,
        "answer": "        stack = []\n        for c in preorder:\n            if c == '#':\n                stack.append(None)\n            else:\n                stack.append(int(c))\n        while stack:\n            node = stack.pop()\n            if node is None:\n                stack.append(None)\n            else:\n                stack.append(node)\n        return stack[0] == None and stack[1] == None and stack[2] == None"
    },
    {
        "number": 332,
        "title": "Reconstruct Itinerary",
        "difficulty": 2,
        "answer": "        from collections import defaultdict\n        from itertools import permutations\n        from collections import deque\n        from itertools import chain\n        from itertools import combinations\n        from itertools import combinations_with_replacement\n        from itertools import chain\n        from itertools import combinations\n        from itertools import combinations_with_replacement\n        from itertools import chain\n        from itertools import combinations\n        from itertools import combinations_with_replacement\n        from itertools import chain\n        from itertools import combinations\n        from itertools import combinations_with_replacement\n        from itertools import chain\n        from itertools import combinations\n        from itertools import combinations_with_replacement\n        from itertools import chain\n        from itertools import combinations\n        from itertools import combinations_with_replacement\n        from itertools import chain\n        from itertools import combinations\n        from itertools import combinations_with_replacement\n        from itertools import chain\n        from itertools import combinations\n        from itertools import combinations_"
    },
    {
        "number": 334,
        "title": "Increasing Triplet Subsequence",
        "difficulty": 1,
        "answer": "        n = len(nums)\n        if n < 3:\n            return False\n        if n == 3:\n            return True\n        if n == 4:\n            return nums[0] < nums[1] < nums[2]\n        if n == 5:\n            return nums[0] < nums[1] < nums[2] < nums[3]\n        if n == 6:\n            return nums[0] < nums[1] < nums[2] < nums[3] < nums[4]\n        if n == 7:\n            return nums[0] < nums[1] < nums[2] < nums[3] < nums[4] < nums[5]\n        if n == 8:\n            return nums[0] < nums[1] < nums[2] < nums[3] < nums[4] < nums[5] < nums[6]\n        if n == 9:\n            return nums[0] < nums[1] < nums["
    },
    {
        "number": 335,
        "title": "Self Crossing",
        "difficulty": 2,
        "answer": "        if len(distance) < 3:\n            return False\n        if distance[0] == 0 and distance[1] == 0:\n            return True\n        if distance[0] == 0 and distance[1] == 1:\n            return False\n        if distance[0] == 1 and distance[1] == 0:\n            return True\n        if distance[0] == 1 and distance[1] == 1:\n            return False\n        if distance[0] == 0 and distance[1] == 2:\n            return True\n        if distance[0] == 1 and distance[1] == 2:\n            return False\n        if distance[0] == 2 and distance[1] == 0:\n            return True\n        if distance[0] == 2 and distance[1] == 1:\n            return False\n        if distance[0] == 2 and distance[1] == 2:\n            return False\n        if distance[0] == 1 and distance[1] == 3:\n            return True\n        if distance[0] == 2 and distance[1] == 3:\n            return False\n        if distance[0"
    },
    {
        "number": 336,
        "title": "Palindrome Pairs",
        "difficulty": 2,
        "answer": "        # pylint: disable=invalid-name\n        # pylint: disable=too-many-locals\n        # pylint: disable=too-many-branches\n        # pylint: disable=too-many-statements\n        # pylint: disable=too-many-nested-blocks\n        # pylint: disable=too-many-boolean-expressions\n        # pylint: disable=too-many-arguments\n        # pylint: disable=too-many-locals\n        # pylint: disable=too-many-statements\n        # pylint: disable=too-many-nested-blocks\n        # pylint: disable=too-many-boolean-expressions\n        # pylint: disable=too-many-arguments\n        # pylint: disable=too-many-locals\n        # pylint: disable=too-many-statements\n        # pylint: disable=too-many-nested-blocks\n        # pylint: disable=too-many-boolean-"
    },
    {
        "number": 337,
        "title": "House Robber III",
        "difficulty": 1,
        "answer": "        if not root:\n            return 0\n        return self.rob_recur(root)"
    },
    {
        "number": 338,
        "title": "Counting Bits",
        "difficulty": 0,
        "answer": "        # https://leetcode.com/problems/count-bits/discuss/105586/Java-Solution-with-explanation-and-examples\n        # https://leetcode.com/problems/count-bits/discuss/105587/Java-Solution-with-explanation-and-examples\n        # https://leetcode.com/problems/count-bits/discuss/105588/Java-Solution-with-explanation-and-examples\n        # https://leetcode.com/problems/count-bits/discuss/105589/Java-Solution-with-explanation-and-examples\n        # https://leetcode.com/problems/count-bits/discuss/105590/Java-Solution-with-explanation-and-examples\n        # https://leetcode.com/problems/count-bits/discuss/105591/Java-Solution-with-explanation-and-examples\n        # https://leetcode.com/problems/count-bits"
    },
    {
        "number": 341,
        "title": "Flatten Nested List Iterator",
        "difficulty": 1,
        "answer": "        class NestedIterator(object):\n            def __init__(self, nestedList):\n                self.nestedList = nestedList\n                self.index = 0\n            def __iter__(self):\n                return self\n            def next(self):\n                if self.index >= len(self.nestedList):\n                    raise StopIteration\n                if isinstance(self.nestedList[self.index], list):\n                    self.index += 1\n                    return self.nestedList[self.index]\n                else:\n                    return self.nestedList[self.index]\n            def hasNext(self):\n                return self.index < len(self.nestedList)\n        \n        def flatten(nestedList):\n            res = []\n            for item in nestedList:\n                if isinstance(item, list):\n                    res += flatten(item)\n                else:\n                    res.append(item)\n            return res\n        \n        def test(nestedList, expected):\n            it = NestedIterator(nestedList)\n            actual = flatten(it)"
    },
    {
        "number": 342,
        "title": "Power of Four",
        "difficulty": 0,
        "answer": "        return n & (n - 1) == 0 and n!= 0"
    },
    {
        "number": 343,
        "title": "Integer Break",
        "difficulty": 1,
        "answer": "        # https://leetcode.com/problems/integer-break/discuss/105586/Java-C-solution-with-explanation\n        # https://leetcode.com/problems/integer-break/discuss/105586/Java-C-solution-with-explanation\n        # https://leetcode.com/problems/integer-break/discuss/105586/Java-C-solution-with-explanation\n        # https://leetcode.com/problems/integer-break/discuss/105586/Java-C-solution-with-explanation\n        # https://leetcode.com/problems/integer-break/discuss/105586/Java-C-solution-with-explanation\n        # https://leetcode.com/problems/integer-break/discuss/105586/Java-C-solution-with-explanation\n        # https://leetcode.com/problems/integer-break/discuss/105586/Java-C-"
    },
    {
        "number": 344,
        "title": "Reverse String",
        "difficulty": 0,
        "answer": "        s = list(s)\n        s.reverse()\n        s = ''.join(s)\n        s = list(s)\n        s.reverse()\n        s = ''.join(s)\n        s = list(s)\n        s.reverse()\n        s = ''.join(s)\n        s = list(s)\n        s.reverse()\n        s = ''.join(s)\n        s = list(s)\n        s.reverse()\n        s = ''.join(s)\n        s = list(s)\n        s.reverse()\n        s = ''.join(s)\n        s = list(s)\n        s.reverse()\n        s = ''.join(s)\n        s = list(s)\n        s.reverse()\n        s = ''.join(s)\n        s = list(s)\n        s.reverse()\n        s = ''.join(s)\n        s = list(s)\n        s.reverse()\n        s = ''.join(s)\n        s = list(s)\n        s"
    },
    {
        "number": 345,
        "title": "Reverse Vowels of a String",
        "difficulty": 0,
        "answer": "        vowels = {'a', 'e', 'i', 'o', 'u'}\n        return ''.join(s[i:i + 2] for i in range(len(s) - 1, -1, -1) if s[i] in vowels)\n"
    },
    {
        "number": 347,
        "title": "Top K Frequent Elements",
        "difficulty": 1,
        "answer": "        d = collections.defaultdict(int)\n        for n in nums:\n            d[n] += 1\n        return sorted(d.items(), key=lambda x: x[1], reverse=True)[:k]\n"
    },
    {
        "number": 349,
        "title": "Intersection of Two Arrays",
        "difficulty": 0,
        "answer": "        # https://leetcode.com/problems/intersection-of-two-arrays/discuss/105500/Java-C-solution-with-explanation\n        # https://leetcode.com/problems/intersection-of-two-arrays/discuss/105501/C%2B%2B-solution-with-explanation\n        # https://leetcode.com/problems/intersection-of-two-arrays/discuss/105502/C%2B%2B-solution-with-explanation\n        # https://leetcode.com/problems/intersection-of-two-arrays/discuss/105503/C%2B%2B-solution-with-explanation\n        # https://leetcode.com/problems/intersection-of-two-arrays/discuss/105504/C%2B%2B-solution-with-explanation\n        # https://leetcode.com/problems/intersection-of-two"
    },
    {
        "number": 350,
        "title": "Intersection of Two Arrays II",
        "difficulty": 0,
        "answer": "        # https://leetcode.com/problems/intersection-of-two-arrays/discuss/105500/Java-C-solution-with-explanation\n        # https://leetcode.com/problems/intersection-of-two-arrays/discuss/105501/C-solution-with-explanation\n        # https://leetcode.com/problems/intersection-of-two-arrays/discuss/105502/Python-solution-with-explanation\n        # https://leetcode.com/problems/intersection-of-two-arrays/discuss/105503/Java-solution-with-explanation\n        # https://leetcode.com/problems/intersection-of-two-arrays/discuss/105504/C++-solution-with-explanation\n        # https://leetcode.com/problems/intersection-of-two-arrays/discuss/105505/C-solution-with-explanation\n        "
    },
    {
        "number": 352,
        "title": "Data Stream as Disjoint Intervals",
        "difficulty": 2,
        "answer": "        # Your SummaryRanges object will be instantiated and called as such:\n        # obj = SummaryRanges()\n        # obj.addNum(value)\n        # param_2 = obj.getIntervals()\n        # obj.addNum(value)\n        # param_3 = obj.getIntervals()\n        # obj.addNum(value)\n        # param_4 = obj.getIntervals()\n        # obj.addNum(value)\n        # param_5 = obj.getIntervals()\n        # obj.addNum(value)\n        # param_6 = obj.getIntervals()\n        # obj.addNum(value)\n        # param_7 = obj.getIntervals()\n        # obj.addNum(value)\n        # param_8 = obj.getIntervals()\n        # obj.addNum(value)\n        # param_9 = obj.getIntervals()\n        # obj.addNum(value)\n        # param_10 = obj.getIntervals()\n        # obj.addNum(value)\n        # param_11 = obj"
    },
    {
        "number": 354,
        "title": "Russian Doll Envelopes",
        "difficulty": 2,
        "answer": "        # dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n        dp = [[0 for _ in range(len(envelopes[0]))] for _ in range(len(envelopes))]\n        for i in range(len(envelopes)):\n            for j in range(len(envelopes[i])):\n                dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])\n        return dp[-1][-1]"
    },
    {
        "number": 355,
        "title": "Design Twitter",
        "difficulty": 1,
        "answer": "        pass\n    def getMentions(self) -> List[int]:\n        \"\"\"\n        Design a simplified version of Twitter where users can post tweets and be mentioned.\n        Implement the Twitter class:\n            Twitter() Initializes your twitter object.\n            void postTweet(int userId, int tweetId) Composes a new tweet with ID tweetId by the user userId. Each call to this function will be made with a unique tweetId.\n            void follow(int followerId, int followeeId) The user with ID followerId started following the user with ID followeeId.\n            void unfollow(int followerId, int followeeId) The user with ID followerId started unfollowing the user with ID followeeId.\n            List<Integer> getMentions() Retrieves the 10 most recent tweet IDs posted by users who were mentioned in one of the user's tweets. Each item in the news feed must be posted by users who the user followed or by the user themself. Tweets must be ordered from most recent to least recent.\n        Example 1:\n        Input\n        [\"Twitter\", \"postTweet\", \"getMent"
    },
    {
        "number": 357,
        "title": "Count Numbers with Unique Digits",
        "difficulty": 1,
        "answer": "        if n == 0:\n            return 1\n        if n == 1:\n            return 10\n        if n == 2:\n            return 91\n        if n == 3:\n            return 91 * 9\n        if n == 4:\n            return 91 * 9 * 8\n        if n == 5:\n            return 91 * 9 * 8 * 7\n        if n == 6:\n            return 91 * 9 * 8 * 7 * 6\n        if n == 7:\n            return 91 * 9 * 8 * 7 * 6 * 5\n        if n == 8:\n            return 91 * 9 * 8 * 7 * 6 * 5 * 4\n        if n == 9:\n            return 91 * 9 * 8 * 7 * 6 * 5 * 4 * 3\n        if n == 10:\n            return 91 * 9 * 8 * 7 * 6 * 5 * 4 * 3 * 2\n        if n == 11:\n            return 91 * 9 * 8 * 7 * 6 * 5 * 4 * 3 * 2 * 1\n        if n == 12:\n            return 91 * 9 * 8 * 7 * 6 * 5 * 4 * 3 * 2 * 1"
    },
    {
        "number": 363,
        "title": "Max Sum of Rectangle No Larger Than K",
        "difficulty": 2,
        "answer": "        m, n = len(matrix), len(matrix[0])\n        if m == 0 or n == 0:\n            return 0\n        dp = [[0] * (n + 1) for _ in range(m + 1)]\n        for i in range(1, m + 1):\n            dp[i][0] = matrix[i - 1][0]\n        for j in range(1, n + 1):\n            dp[0][j] = matrix[0][j - 1]\n        for i in range(1, m + 1):\n            for j in range(1, n + 1):\n                dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + matrix[i - 1][j - 1]\n        return dp[-1][-1]\n"
    },
    {
        "number": 365,
        "title": "Water and Jug Problem",
        "difficulty": 1,
        "answer": "        if targetCapacity <= jug1Capacity:\n            return self.canMeasureWater(jug2Capacity, jug1Capacity, targetCapacity)\n        if targetCapacity <= jug2Capacity:\n            return self.canMeasureWater(jug1Capacity, jug2Capacity, targetCapacity)\n        if jug1Capacity == 0 and jug2Capacity == 0:\n            return True\n        if jug1Capacity == 0:\n            return self.canMeasureWater(jug2Capacity, jug1Capacity, targetCapacity)\n        if jug2Capacity == 0:\n            return self.canMeasureWater(jug1Capacity, jug2Capacity, targetCapacity)\n        if jug1Capacity == 1 and jug2Capacity == 1:\n            return True\n        if jug1Capacity == 1:\n            return self.canMeasureWater(jug2Capacity, jug1Capacity, targetCapacity)\n        if jug2Capacity == 1:\n            return self.canMeasureWater(jug1Capacity, jug2Capacity, targetCapacity)\n        if jug1Capacity"
    },
    {
        "number": 367,
        "title": "Valid Perfect Square",
        "difficulty": 0,
        "answer": "        if num < 1:\n            return False\n        if num == 1:\n            return True\n        if num == 2:\n            return True\n        if num % 2 == 0:\n            return False\n        if num % 3 == 0:\n            return False\n        if num % 5 == 0:\n            return False\n        if num % 7 == 0:\n            return False\n        if num % 11 == 0:\n            return False\n        if num % 13 == 0:\n            return False\n        if num % 17 == 0:\n            return False\n        if num % 19 == 0:\n            return False\n        if num % 23 == 0:\n            return False\n        if num % 29 == 0:\n            return False\n        if num % 31 == 0:\n            return False\n        if num % 37 == 0:\n            return False\n        if num % 41 == 0:\n            return False\n        if num % 43 == 0:\n            return False\n        if num % 47 == 0:\n            return False\n        if num % 53 == 0:\n            return False\n        if num % 59 == 0:\n"
    },
    {
        "number": 368,
        "title": "Largest Divisible Subset",
        "difficulty": 1,
        "answer": "        nums.sort()\n        nums = [x for x in nums if x > 0]\n        nums = [x for x in nums if x < MAX_INT]\n        nums = [x for x in nums if x < MAX_INT * MAX_INT]\n        nums = [x for x in nums if x < MAX_INT * MAX_INT * MAX_INT]\n        nums = [x for x in nums if x < MAX_INT * MAX_INT * MAX_INT * MAX_INT]\n        nums = [x for x in nums if x < MAX_INT * MAX_INT * MAX_INT * MAX_INT * MAX_INT]\n        nums = [x for x in nums if x < MAX_INT * MAX_INT * MAX_INT * MAX_INT * MAX_INT * MAX_INT]\n        nums = [x for x in nums if x < MAX_INT * MAX_INT * MAX_INT * MAX_INT * MAX_INT * MAX_INT * MAX_INT]\n        nums = [x for x in"
    },
    {
        "number": 371,
        "title": "Sum of Two Integers",
        "difficulty": 1,
        "answer": "        return a + b"
    },
    {
        "number": 372,
        "title": "Super Pow",
        "difficulty": 1,
        "answer": "        if a == 0:\n            return 0\n        if a == 1:\n            return 1\n        if a == 2:\n            return 2\n        if a == 3:\n            return 3\n        if a == 4:\n            return 4\n        if a == 5:\n            return 5\n        if a == 6:\n            return 6\n        if a == 7:\n            return 7\n        if a == 8:\n            return 8\n        if a == 9:\n            return 9\n        if a == 10:\n            return 10\n        if a == 11:\n            return 11\n        if a == 12:\n            return 12\n        if a == 13:\n            return 13\n        if a == 14:\n            return 14\n        if a == 15:\n            return 15\n        if a == 16:\n            return 16\n        if a == 17:\n            return 17\n        if a == 18:\n            return 18\n        if a == 19:\n            return 19\n        if a == 20:\n            return 20\n        if a == 21:\n            return 21\n        if a == 22:\n            "
    },
    {
        "number": 373,
        "title": "Find K Pairs with Smallest Sums",
        "difficulty": 1,
        "answer": "        # https://leetcode.com/problems/k-smallest-pairs/discuss/105500/Python-solution-with-explanation\n        # https://leetcode.com/problems/k-smallest-pairs/discuss/105501/Java-solution-with-explanation\n        # https://leetcode.com/problems/k-smallest-pairs/discuss/105502/C-solution-with-explanation\n        # https://leetcode.com/problems/k-smallest-pairs/discuss/105503/Python-solution-with-explanation\n        # https://leetcode.com/problems/k-smallest-pairs/discuss/105504/C++-solution-with-explanation\n        # https://leetcode.com/problems/k-smallest-pairs/discuss/105505/Java-solution-with-explanation\n        # https://leetcode.com/problems/k-"
    },
    {
        "number": 374,
        "title": "Guess Number Higher or Lower",
        "difficulty": 0,
        "answer": "        if n == 1:\n            return 1\n        if n == 2:\n            return 1\n        if n == 3:\n            return 1\n        if n == 4:\n            return 1\n        if n == 5:\n            return 1\n        if n == 6:\n            return 1\n        if n == 7:\n            return 1\n        if n == 8:\n            return 1\n        if n == 9:\n            return 1\n        if n == 10:\n            return 1\n        if n == 11:\n            return 1\n        if n == 12:\n            return 1\n        if n == 13:\n            return 1\n        if n == 14:\n            return 1\n        if n == 15:\n            return 1\n        if n == 16:\n            return 1\n        if n == 17:\n            return 1\n        if n == 18:\n            return 1\n        if n == 19:\n            return 1\n        if n == 20:\n            return 1\n        if n == 21:\n            return 1\n        if n == 22:\n            return 1\n        if n == 23:\n            "
    },
    {
        "number": 375,
        "title": "Guess Number Higher or Lower II",
        "difficulty": 1,
        "answer": "        return self.getMoneyAmount_v1(n)"
    },
    {
        "number": 376,
        "title": "Wiggle Subsequence",
        "difficulty": 1,
        "answer": "        if not nums:\n            return 0\n        n = len(nums)\n        if n == 1:\n            return 1\n        if n == 2:\n            return 2\n        if n == 3:\n            return 3\n        if n == 4:\n            return 4\n        if n == 5:\n            return 5\n        if n == 6:\n            return 6\n        if n == 7:\n            return 7\n        if n == 8:\n            return 8\n        if n == 9:\n            return 9\n        if n == 10:\n            return 10\n        if n == 11:\n            return 11\n        if n == 12:\n            return 12\n        if n == 13:\n            return 13\n        if n == 14:\n            return 14\n        if n == 15:\n            return 15\n        if n == 16:\n            return 16\n        if n == 17:\n            return 17\n        if n == 18:\n            return 18\n        if n == 19:\n            return 19\n        if n == 20:\n            return 20\n        if n == 21:\n            return 21"
    },
    {
        "number": 377,
        "title": "Combination Sum IV",
        "difficulty": 1,
        "answer": "        nums = sorted(nums)\n        self.dp = [0] * (target + 1)\n        self.dp[0] = 1\n        for i in range(1, len(nums) + 1):\n            for j in range(i, target + 1):\n                self.dp[j] += self.dp[j - nums[i - 1]]\n        return self.dp[target]"
    },
    {
        "number": 378,
        "title": "Kth Smallest Element in a Sorted Matrix",
        "difficulty": 1,
        "answer": "        n = len(matrix)\n        if n == 0:\n            return 0\n        if n == 1:\n            return matrix[0][0]\n        if n == 2:\n            return min(matrix[0][0], matrix[1][0])\n        if n == 3:\n            return min(matrix[0][0], matrix[1][0], matrix[2][0])\n        if n == 4:\n            return min(matrix[0][0], matrix[1][0], matrix[2][0], matrix[3][0])\n        if n == 5:\n            return min(matrix[0][0], matrix[1][0], matrix[2][0], matrix[3][0], matrix[4][0])\n        if n == 6:\n            return min(matrix[0][0], matrix[1][0], matrix[2][0], matrix[3][0], matrix[4][0], matrix[5][0])\n        if n == 7:\n            return min(matrix[0][0], matrix[1][0], matrix[2][0"
    },
    {
        "number": 380,
        "title": "Insert Delete GetRandom O(1)",
        "difficulty": 1,
        "answer": "        pass"
    },
    {
        "number": 381,
        "title": "Insert Delete GetRandom O(1) - Duplicates allowed",
        "difficulty": 2,
        "answer": "        pass"
    },
    {
        "number": 382,
        "title": "Linked List Random Node",
        "difficulty": 1,
        "answer": "        if head is None:\n            return None\n        if head.next is None:\n            return head.val\n        if head.next.next is None:\n            return self.getRandom(head.next)\n        if head.next.next.next is None:\n            return self.getRandom(head.next.next)\n        if head.next.next.next.next is None:\n            return self.getRandom(head.next.next.next)\n        if head.next.next.next.next.next is None:\n            return self.getRandom(head.next.next.next.next)\n        if head.next.next.next.next.next.next is None:\n            return self.getRandom(head.next.next.next.next.next)\n        if head.next.next.next.next.next.next.next is None:\n            return self.getRandom(head.next.next.next.next.next.next)\n        if head.next.next.next.next.next.next.next.next is None:\n            return self"
    },
    {
        "number": 383,
        "title": "Ransom Note",
        "difficulty": 0,
        "answer": "        ransom_set = set(ransomNote)\n        magazine_set = set(magazine)\n        return ransom_set.issubset(magazine_set)"
    },
    {
        "number": 384,
        "title": "Shuffle an Array",
        "difficulty": 1,
        "answer": "        return nums"
    },
    {
        "number": 385,
        "title": "Mini Parser",
        "difficulty": 1,
        "answer": "        def deserialize(s):\n            \"\"\"\n            :type s: str\n            :rtype: NestedInteger\n            \"\"\"\n            def parse_list(s):\n                \"\"\"\n                :type s: str\n                :rtype: List[NestedInteger]\n                \"\"\"\n                if not s:\n                    return []\n                res = []\n                while s:\n                    if s[0] == '[':\n                        s = s[1:]\n                        res.append(parse_list(s))\n                    else:\n                        res.append(int(s))\n                        s = ''\n                return res"
    },
    {
        "number": 386,
        "title": "Lexicographical Numbers",
        "difficulty": 1,
        "answer": "        if n == 1:\n            return [1]\n        if n == 2:\n            return [1, 2]\n        if n == 3:\n            return [1, 2, 3]\n        if n == 4:\n            return [1, 2, 3, 4]\n        if n == 5:\n            return [1, 2, 3, 4, 5]\n        if n == 6:\n            return [1, 2, 3, 4, 5, 6]\n        if n == 7:\n            return [1, 2, 3, 4, 5, 6, 7]\n        if n == 8:\n            return [1, 2, 3, 4, 5, 6, 7, 8]\n        if n == 9:\n            return [1, 2, 3, 4, 5, 6, 7, 8, 9]\n        if n == 10:\n            return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n        if n == 11:\n            return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10,"
    },
    {
        "number": 387,
        "title": "First Unique Character in a String",
        "difficulty": 0,
        "answer": "        if not s:\n            return -1\n        count = collections.Counter(s)\n        for i, c in enumerate(s):\n            if count[c] == 1:\n                return i\n        return -1\n"
    },
    {
        "number": 388,
        "title": "Longest Absolute File Path",
        "difficulty": 1,
        "answer": "        dir_list = input.split('\\n')\n        dir_list = [x for x in dir_list if x!= '']\n        dir_list = [x for x in dir_list if x[0]!='']\n        dir_list = [x for x in dir_list if x[-1]!='']\n        dir_list = [x for x in dir_list if x[-1]!= '/']\n        dir_list = [x for x in dir_list if x[-1]!= '\\\\']\n        dir_list = [x for x in dir_list if x[-1]!= '.']\n        dir_list = [x for x in dir_list if x[-1]!='']\n        dir_list = [x for x in dir_list if x[-1]!= '\\t']\n        dir_list = [x for x in dir_list if x[-1]!= '\\n']\n        dir_list = [x for x in dir_list if x[-1]!= '\\r']\n        "
    },
    {
        "number": 389,
        "title": "Find the Difference",
        "difficulty": 0,
        "answer": "        if len(s) == 0 or len(t) == 0:\n            return \"\"\n        s_len = len(s)\n        t_len = len(t)\n        s_index = 0\n        t_index = 0\n        while s_index < s_len and t_index < t_len:\n            if s[s_index] == t[t_index]:\n                s_index += 1\n                t_index += 1\n            elif s[s_index] < t[t_index]:\n                s_index += 1\n            else:\n                t_index += 1\n        if s_index == s_len:\n            return t[t_index]\n        elif t_index == t_len:\n            return s[s_index]\n        else:\n            return t[t_index]"
    },
    {
        "number": 390,
        "title": "Elimination Game",
        "difficulty": 1,
        "answer": "        return self.lastRemaining_helper(n)"
    },
    {
        "number": 391,
        "title": "Perfect Rectangle",
        "difficulty": 2,
        "answer": "        if not rectangles:\n            return True\n        if len(rectangles) == 1:\n            return True\n        if len(rectangles) == 2:\n            return True if sum(rectangles[0][2:4]) == sum(rectangles[1][2:4]) else False\n        if len(rectangles) == 3:\n            return True if sum(rectangles[0][2:4]) == sum(rectangles[1][2:4]) and sum(rectangles[0][2:4]) == sum(rectangles[2][2:4]) else False\n        if len(rectangles) == 4:\n            return True if sum(rectangles[0][2:4]) == sum(rectangles[1][2:4]) and sum(rectangles[0][2:4]) == sum(rectangles[2][2:4]) and sum(rectangles[0][2:4]) == sum(rectangles[3][2:4]) else False\n        if len(rectangles) == 5:\n            return True if sum(rectangles[0][2:4]) == sum("
    },
    {
        "number": 392,
        "title": "Is Subsequence",
        "difficulty": 0,
        "answer": "        if len(s) > len(t):\n            return False\n        for i in range(len(s)):\n            if t[i] not in s:\n                return False\n        return True"
    },
    {
        "number": 393,
        "title": "UTF-8 Validation",
        "difficulty": 1,
        "answer": "        # https://stackoverflow.com/questions/175585/how-to-check-if-a-string-is-valid-utf-8\n        # https://stackoverflow.com/questions/175585/how-to-check-if-a-string-is-valid-utf-8\n        # https://stackoverflow.com/questions/175585/how-to-check-if-a-string-is-valid-utf-8\n        # https://stackoverflow.com/questions/175585/how-to-check-if-a-string-is-valid-utf-8\n        # https://stackoverflow.com/questions/175585/how-to-check-if-a-string-is-valid-utf-8\n        # https://stackoverflow.com/questions/175585/how-to-check-if-a-string-is-valid-utf-8\n        # https://stackoverflow.com/questions/175585/how-to-check-if-a-string"
    },
    {
        "number": 394,
        "title": "Decode String",
        "difficulty": 1,
        "answer": "        if not s:\n            return \"\"\n        n = len(s)\n        if n == 1:\n            return s\n        if n == 2:\n            return s[0] * s[1]\n        if n == 3:\n            return s[0] * s[1] * s[2]\n        if n == 4:\n            return s[0] * s[1] * s[2] * s[3]\n        if n == 5:\n            return s[0] * s[1] * s[2] * s[3] * s[4]\n        if n == 6:\n            return s[0] * s[1] * s[2] * s[3] * s[4] * s[5]\n        if n == 7:\n            return s[0] * s[1] * s[2] * s[3] * s[4] * s[5] * s[6]\n        if n == 8:\n            return s[0] * s[1] * s[2] * s[3] * s[4"
    },
    {
        "number": 395,
        "title": "Longest Substring with At Least K Repeating Characters",
        "difficulty": 1,
        "answer": "        # https://leetcode.com/problems/longest-substring-with-at-most-k-distinct-characters/discuss/105500/Java-Solution-with-explanation\n        # https://leetcode.com/problems/longest-substring-with-at-most-k-distinct-characters/discuss/105501/C++-Solution-with-explanation\n        # https://leetcode.com/problems/longest-substring-with-at-most-k-distinct-characters/discuss/105502/Python-Solution-with-explanation\n        # https://leetcode.com/problems/longest-substring-with-at-most-k-distinct-characters/discuss/105503/JavaScript-Solution-with-explanation\n        # https://leetcode.com/problems/longest-substring-with-at-most-k-distinct-characters/discuss/105504/C++-Solution-with-ex"
    },
    {
        "number": 396,
        "title": "Rotate Function",
        "difficulty": 1,
        "answer": "        n = len(nums)\n        if n == 1:\n            return nums[0]\n        if n == 2:\n            return max(nums)\n        if n == 3:\n            return max(nums) + max(nums) + max(nums)\n        if n == 4:\n            return max(nums) + max(nums) + max(nums) + max(nums)\n        if n == 5:\n            return max(nums) + max(nums) + max(nums) + max(nums) + max(nums)\n        if n == 6:\n            return max(nums) + max(nums) + max(nums) + max(nums) + max(nums) + max(nums)\n        if n == 7:\n            return max(nums) + max(nums) + max(nums) + max(nums) + max(nums) + max(nums) + max(nums)\n        if n == 8:\n            return max(nums) + max"
    },
    {
        "number": 397,
        "title": "Integer Replacement",
        "difficulty": 1,
        "answer": "        if n == 1:\n            return 0\n        if n % 2 == 0:\n            return self.integerReplacement(n / 2) + 1\n        return self.integerReplacement(n + 1) + 1"
    },
    {
        "number": 398,
        "title": "Random Pick Index",
        "difficulty": 1,
        "answer": "        n = len(nums)\n        if n == 0:\n            return -1\n        if n == 1:\n            return nums[0]\n        if n == 2:\n            return nums[0] if nums[0] == nums[1] else nums[1]\n        if n == 3:\n            return nums[0] if nums[0] == nums[1] and nums[0] == nums[2] else nums[1] if nums[1] == nums[2] else nums[2]\n        if n == 4:\n            return nums[0] if nums[0] == nums[1] and nums[0] == nums[2] and nums[0] == nums[3] else nums[1] if nums[1] == nums[2] and nums[1] == nums[3] else nums[2] if nums[2] == nums[3] else nums[3]\n        if n == 5:\n            return nums[0"
    },
    {
        "number": 399,
        "title": "Evaluate Division",
        "difficulty": 1,
        "answer": "        # Your Solution object will be instantiated and called as such:\n        # obj = Solution(equations, values, queries)\n        # param_1 = obj.calcEquation(equations, values, queries)\n        # return param_1"
    },
    {
        "number": 400,
        "title": "Nth Digit",
        "difficulty": 1,
        "answer": "        if n < 1:\n            return 0\n        if n == 1:\n            return 1\n        if n == 2:\n            return 2\n        if n == 3:\n            return 3\n        if n == 4:\n            return 4\n        if n == 5:\n            return 5\n        if n == 6:\n            return 6\n        if n == 7:\n            return 7\n        if n == 8:\n            return 8\n        if n == 9:\n            return 9\n        if n == 10:\n            return 10\n        if n == 11:\n            return 11\n        if n == 12:\n            return 0\n        if n == 13:\n            return 1\n        if n == 14:\n            return 2\n        if n == 15:\n            return 3\n        if n == 16:\n            return 4\n        if n == 17:\n            return 5\n        if n == 18:\n            return 6\n        if n == 19:\n            return 7\n        if n == 20:\n            return 8\n        if n == 21:\n            return 9\n        if n == 22:\n            "
    },
    {
        "number": 401,
        "title": "Binary Watch",
        "difficulty": 0,
        "answer": "        if turnedOn == 0:\n            return []\n        if turnedOn == 1:\n            return [\"0:01\"]\n        if turnedOn == 2:\n            return [\"0:02\"]\n        if turnedOn == 3:\n            return [\"0:04\"]\n        if turnedOn == 4:\n            return [\"0:08\"]\n        if turnedOn == 5:\n            return [\"0:16\"]\n        if turnedOn == 6:\n            return [\"0:32\"]\n        if turnedOn == 7:\n            return [\"1:00\"]\n        if turnedOn == 8:\n            return [\"2:00\"]\n        if turnedOn == 9:\n            return [\"4:00\"]\n        if turnedOn == 10:\n            return [\"8:00\"]\n        if turnedOn == 11:\n            return [\"16:00\"]\n        if turnedOn == 12:\n            return [\"32:00\"]\n        if turnedOn == 13:\n            return [\"64:00\"]\n        if turnedOn == 14:\n            return [\"128:00\"]\n        if turnedOn == 15:\n            return [\"256:00"
    },
    {
        "number": 402,
        "title": "Remove K Digits",
        "difficulty": 1,
        "answer": "        if not num:\n            return \"\"\n        if k == 0:\n            return num[0]\n        if k == 1:\n            return num[1:]\n        if k == 2:\n            return num[2:]\n        if k == 3:\n            return num[3:]\n        if k == 4:\n            return num[4:]\n        if k == 5:\n            return num[5:]\n        if k == 6:\n            return num[6:]\n        if k == 7:\n            return num[7:]\n        if k == 8:\n            return num[8:]\n        if k == 9:\n            return num[9:]\n        if k == 10:\n            return num[10:]\n        if k == 11:\n            return num[11:]\n        if k == 12:\n            return num[12:]\n        if k == 13:\n            return num[13:]\n        if k == 14:\n            return num[14:]\n        if k == 15:\n            return num[15:]\n        if k == 16:\n            return num[16:]\n        if"
    },
    {
        "number": 403,
        "title": "Frog Jump",
        "difficulty": 2,
        "answer": "        if not stones:\n            return True\n        if len(stones) == 1:\n            return True\n        if len(stones) == 2:\n            return stones[0] == stones[1]\n        if len(stones) == 3:\n            return stones[0] + stones[1] == stones[2]\n        if len(stones) == 4:\n            return stones[0] + stones[1] + stones[2] == stones[3]\n        if len(stones) == 5:\n            return stones[0] + stones[1] + stones[2] + stones[3] == stones[4]\n        if len(stones) == 6:\n            return stones[0] + stones[1] + stones[2] + stones[3] + stones[4] == stones[5]\n        if len(stones) == 7:\n            return stones[0] + stones[1] + stones[2] + stones[3] + stones[4] + stones[5] == stones[6]\n        if len(stones) == 8:\n            return stones[0] + stones["
    },
    {
        "number": 404,
        "title": "Sum of Left Leaves",
        "difficulty": 0,
        "answer": "        def sum_left_leaves(node: Optional[TreeNode]) -> int:\n            if not node:\n                return 0\n            if not node.left:\n                return node.val\n            return sum_left_leaves(node.left) + node.val + sum_left_leaves(node.right)"
    },
    {
        "number": 405,
        "title": "Convert a Number to Hexadecimal",
        "difficulty": 0,
        "answer": "        if num < 0:\n            return self.toHex(-num)\n        if num == 0:\n            return \"0\"\n        if num == 1:\n            return \"1\"\n        if num == 2:\n            return \"2\"\n        if num == 3:\n            return \"3\"\n        if num == 4:\n            return \"4\"\n        if num == 5:\n            return \"5\"\n        if num == 6:\n            return \"6\"\n        if num == 7:\n            return \"7\"\n        if num == 8:\n            return \"8\"\n        if num == 9:\n            return \"9\"\n        if num == 10:\n            return \"a\"\n        if num == 11:\n            return \"b\"\n        if num == 12:\n            return \"c\"\n        if num == 13:\n            return \"d\"\n        if num == 14:\n            return \"e\"\n        if num == 15:\n            return \"f\"\n        if num == 16:\n            return \"10\"\n        if num == 17:\n            return \"11"
    },
    {
        "number": 406,
        "title": "Queue Reconstruction by Height",
        "difficulty": 1,
        "answer": "        people.sort(key=lambda x: x[0])\n        queue = []\n        for i in range(len(people)):\n            if people[i][0] == people[i - 1][0]:\n                queue.append(people[i])\n            else:\n                queue.append(people[i])\n                queue.append(people[i - 1])\n        return queue"
    },
    {
        "number": 407,
        "title": "Trapping Rain Water II",
        "difficulty": 2,
        "answer": "        if not heightMap:\n            return 0\n        m, n = len(heightMap), len(heightMap[0])\n        dp = [[0] * n for _ in range(m)]\n        for i in range(m):\n            for j in range(n):\n                if i == 0 or j == 0 or i == m - 1 or j == n - 1:\n                    dp[i][j] = heightMap[i][j]\n                else:\n                    dp[i][j] = min(dp[i - 1][j], dp[i][j - 1], dp[i - 1][j - 1]) + heightMap[i][j]\n        return sum(dp)\n"
    },
    {
        "number": 409,
        "title": "Longest Palindrome",
        "difficulty": 0,
        "answer": "        if not s:\n            return 0\n        if len(s) == 1:\n            return 1\n        if len(s) == 2:\n            return 1 if s[0] == s[1] else 0\n        if len(s) == 3:\n            return 1 if s[0] == s[1] and s[1] == s[2] else 0\n        if len(s) == 4:\n            return 1 if s[0] == s[1] and s[1] == s[2] and s[2] == s[3] else 0\n        if len(s) == 5:\n            return 1 if s[0] == s[1] and s[1] == s[2] and s[2] == s[3] and s[3] == s[4] else 0\n        if len(s) == 6:\n            return 1 if s[0] == s[1] and s[1] == s[2] and s[2] == s[3] and s[3] == s[4] and s[4] == s[5"
    },
    {
        "number": 410,
        "title": "Split Array Largest Sum",
        "difficulty": 2,
        "answer": "        n = len(nums)\n        if n < k:\n            return nums[0]\n        if n == 1:\n            return nums[0]\n        if n == 2:\n            return max(nums)\n        if n == 3:\n            return max(nums) + max(nums[1:])\n        if n == 4:\n            return max(nums) + max(nums[1:]) + max(nums[2:])\n        if n == 5:\n            return max(nums) + max(nums[1:]) + max(nums[2:]) + max(nums[3:])\n        if n == 6:\n            return max(nums) + max(nums[1:]) + max(nums[2:]) + max(nums[3:]) + max(nums[4:])\n        if n == 7:\n            return max(nums) + max(nums[1:]) + max(nums[2:]) + max(nums[3:]) + max(nums"
    },
    {
        "number": 412,
        "title": "Fizz Buzz",
        "difficulty": 0,
        "answer": "        answer = []\n        for i in range(1, n + 1):\n            if i % 3 == 0 and i % 5 == 0:\n                answer.append(\"FizzBuzz\")\n            elif i % 3 == 0:\n                answer.append(\"Fizz\")\n            elif i % 5 == 0:\n                answer.append(\"Buzz\")\n            else:\n                answer.append(str(i))\n        return answer\n"
    },
    {
        "number": 413,
        "title": "Arithmetic Slices",
        "difficulty": 1,
        "answer": "        if not nums:\n            return 0\n        if len(nums) == 1:\n            return 1\n        if len(nums) == 2:\n            return 1 if nums[0] == nums[1] else 0\n        if len(nums) == 3:\n            return 1 if nums[0] == nums[1] and nums[1] == nums[2] else 0\n        if len(nums) == 4:\n            return 1 if nums[0] == nums[1] and nums[1] == nums[2] and nums[2] == nums[3] else 0\n        if len(nums) == 5:\n            return 1 if nums[0] == nums[1] and nums[1] == nums[2] and nums[2] == nums[3] and nums[3] == nums[4] else 0\n        if len(nums) == 6:\n            return 1 if nums[0] == nums[1] and nums[1] == nums["
    },
    {
        "number": 414,
        "title": "Third Maximum Number",
        "difficulty": 0,
        "answer": "        nums = sorted(nums)\n        if len(nums) < 3:\n            return nums[-1]\n        if len(nums) == 3:\n            return max(nums)\n        if len(nums) == 4:\n            return max(nums)\n        if len(nums) == 5:\n            return max(nums)\n        if len(nums) == 6:\n            return max(nums)\n        if len(nums) == 7:\n            return max(nums)\n        if len(nums) == 8:\n            return max(nums)\n        if len(nums) == 9:\n            return max(nums)\n        if len(nums) == 10:\n            return max(nums)\n        if len(nums) == 11:\n            return max(nums)\n        if len(nums) == 12:\n            return max(nums)\n        if len(nums) == 13:\n            return max(nums)\n        if len(nums) == 14:\n"
    },
    {
        "number": 415,
        "title": "Add Strings",
        "difficulty": 0,
        "answer": "        num1 = num1.replace(\"-\", \"\")\n        num2 = num2.replace(\"-\", \"\")\n        num1 = num1.replace(\"+\", \"\")\n        num2 = num2.replace(\"+\", \"\")\n        num1 = num1.replace(\" \", \"\")\n        num2 = num2.replace(\" \", \"\")\n        num1 = num1.replace(\"0\", \"\")\n        num2 = num2.replace(\"0\", \"\")\n        num1 = num1.replace(\"1\", \"\")\n        num2 = num2.replace(\"1\", \"\")\n        num1 = num1.replace(\"2\", \"\")\n        num2 = num2.replace(\"2\", \"\")\n        num1 = num1.replace(\"3\", \"\")\n        num2 = num2.replace(\"3\", \"\")\n        num1 = num1.replace(\"4\", \"\")\n        num2 = num2.replace(\"4\", \"\")\n        num1 = num1.replace(\"5\", \"\")\n        num2 = num2.replace(\"5\", \"\")\n"
    },
    {
        "number": 416,
        "title": "Partition Equal Subset Sum",
        "difficulty": 1,
        "answer": "        if len(nums) < 2:\n            return True\n        if len(nums) == 2:\n            return nums[0] + nums[1] == sum(nums)\n        if len(nums) == 3:\n            return nums[0] + nums[1] + nums[2] == sum(nums)\n        if len(nums) == 4:\n            return nums[0] + nums[1] + nums[2] + nums[3] == sum(nums)\n        if len(nums) == 5:\n            return nums[0] + nums[1] + nums[2] + nums[3] + nums[4] == sum(nums)\n        if len(nums) == 6:\n            return nums[0] + nums[1] + nums[2] + nums[3] + nums[4] + nums[5] == sum(nums)\n        if len(nums) == 7:\n            return nums[0] + num"
    },
    {
        "number": 417,
        "title": "Pacific Atlantic Water Flow",
        "difficulty": 1,
        "answer": "        # https://leetcode.com/problems/pacific-atlantic/discuss/\n        # https://leetcode.com/problems/pacific-atlantic/discuss/\n        # https://leetcode.com/problems/pacific-atlantic/discuss/\n        # https://leetcode.com/problems/pacific-atlantic/discuss/\n        # https://leetcode.com/problems/pacific-atlantic/discuss/\n        # https://leetcode.com/problems/pacific-atlantic/discuss/\n        # https://leetcode.com/problems/pacific-atlantic/discuss/\n        # https://leetcode.com/problems/pacific-atlantic/discuss/\n        # https://leetcode.com/problems/pacific-atlantic/discuss/\n        # https://leetcode.com/problems/pacific-atlantic/discuss/\n        # https://leetcode.com/problems/pacific-atlantic/discuss/\n        # https://leetcode."
    },
    {
        "number": 419,
        "title": "Battleships in a Board",
        "difficulty": 1,
        "answer": "        # https://leetcode.com/problems/count-battleships/discuss/105500/Java-Solution-with-explanation-and-examples\n        # https://leetcode.com/problems/count-battleships/discuss/105501/Java-Solution-with-explanation-and-examples\n        # https://leetcode.com/problems/count-battleships/discuss/105502/Java-Solution-with-explanation-and-examples\n        # https://leetcode.com/problems/count-battleships/discuss/105503/Java-Solution-with-explanation-and-examples\n        # https://leetcode.com/problems/count-battleships/discuss/105504/Java-Solution-with-explanation-and-examples\n        # https://leetcode.com/problems/count-battleships/discuss/105505/Java-Solution-with-explanation-and-examples\n        #"
    },
    {
        "number": 420,
        "title": "Strong Password Checker",
        "difficulty": 2,
        "answer": "        if len(password) < 6 or len(password) > 20:\n            return -1\n        if password.count('a') < 1 or password.count('A') < 1 or password.count('1') < 1:\n            return -1\n        if password.count('b') < 1 or password.count('B') < 1 or password.count('0') < 1:\n            return -1\n        if password.count('c') < 1 or password.count('C') < 1 or password.count('d') < 1:\n            return -1\n        if password.count('d') > 1 or password.count('c') > 1 or password.count('b') > 1:\n            return -1\n        if password.count('0') > 1:\n            return -1\n        if password.count('1') > 1:\n            return -1\n        if password.count('2') > 1:\n            return -1\n        if password.count('3') > 1:\n            return -1\n        if password.count('4') > 1:\n            return -1\n        if password"
    },
    {
        "number": 421,
        "title": "Maximum XOR of Two Numbers in an Array",
        "difficulty": 1,
        "answer": "        n = len(nums)\n        if n == 1:\n            return nums[0]\n        if n == 2:\n            return max(nums[0], nums[1])\n        if n == 3:\n            return max(nums[0], max(nums[1], nums[2]))\n        if n == 4:\n            return max(nums[0], max(nums[1], max(nums[2], nums[3])))\n        if n == 5:\n            return max(nums[0], max(nums[1], max(nums[2], max(nums[3], nums[4]))))\n        if n == 6:\n            return max(nums[0], max(nums[1], max(nums[2], max(nums[3], max(nums[4], nums[5])))))\n        if n == 7:\n            return max(nums[0], max(nums[1], max(nums[2], max(nums[3], max(nums"
    },
    {
        "number": 423,
        "title": "Reconstruct Original Digits from English",
        "difficulty": 1,
        "answer": "        s = ''.join(s)\n        s = s.replace('o', '0')\n        s = s.replace('w', '1')\n        s = s.replace('z', '9')\n        s = s.replace('t', '3')\n        s = s.replace('e', '4')\n        s = s.replace('f', '5')\n        s = s.replace('v', '6')\n        s = s.replace('i', '7')\n        s = s.replace('n', '8')\n        s = s.replace('r', '9')\n        s = s.replace('o', '0')\n        s = s.replace('w', '1')\n        s = s.replace('z', '9')\n        s = s.replace('t', '3')\n        s = s.replace('e', '4')\n        s = s.replace('f', '5')\n        s = s.replace('v', '6')\n        s = s.replace('i', '7')\n        s = s.replace"
    },
    {
        "number": 424,
        "title": "Longest Repeating Character Replacement",
        "difficulty": 1,
        "answer": "        if not s:\n            return 0\n        if k == 0:\n            return 1\n        if k == 1:\n            return len(s)\n        if k == 2:\n            return len(s)\n        if k == 3:\n            return len(s)\n        if k == 4:\n            return len(s)\n        if k == 5:\n            return len(s)\n        if k == 6:\n            return len(s)\n        if k == 7:\n            return len(s)\n        if k == 8:\n            return len(s)\n        if k == 9:\n            return len(s)\n        if k == 10:\n            return len(s)\n        if k == 11:\n            return len(s)\n        if k == 12:\n            return len(s)\n        if k == 13:\n            return len(s)\n        if k == 14:\n            return len(s)\n        if k == 15:\n            return len(s)\n        if k == 16:\n            return len(s)\n        if k == 17"
    },
    {
        "number": 427,
        "title": "Construct Quad Tree",
        "difficulty": 1,
        "answer": "        if isLeaf:\n            return [val, isLeaf]\n        else:\n            return [val, isLeaf, topLeft, topRight, bottomLeft, bottomRight]"
    },
    {
        "number": 429,
        "title": "N-ary Tree Level Order Traversal",
        "difficulty": 1,
        "answer": "    def levelOrder(self):\n        if self.children is None:\n            return [self.val]\n        else:\n            return [self.val] + [x.val for x in self.children] + [x.val for x in self.children[0].children] + [x.val for x in self.children[0].children[0].children] + [x.val for x in self.children[0].children[0].children[0].children] + [x.val for x in self.children[0].children[0].children[0].children[0].children] + [x.val for x in self.children[0].children[0].children[0].children[0].children[0].children] + [x.val for x in self.children[0].children[0].children[0].children[0].children[0].children[0].children] + [x.val for x in self.children[0].children[0].children[0].children[0].children[0].children[0].children[0].children] + [x.val for"
    },
    {
        "number": 430,
        "title": "Flatten a Multilevel Doubly Linked List",
        "difficulty": 1,
        "answer": "        self.val = val\n        self.prev = prev\n        self.next = next\n        self.child = child\n        self.child_next = None\n        self.child_prev = None\n        self.child_child = None\n        self.child_child_next = None\n        self.child_child_prev = None\n        self.child_child_child = None\n        self.child_child_child_next = None\n        self.child_child_child_prev = None\n        self.child_child_child_child = None\n        self.child_child_child_child_next = None\n        self.child_child_child_child_prev = None\n        self.child_child_child_child_child = None\n        self.child_child_child_child_child_next = None\n        self.child_child_child_child_child_prev = None\n        self.child_child_child_child_child_child = None\n        self.child_child_child_child_child_child_next = None\n        self.child_child_child"
    },
    {
        "number": 432,
        "title": "All O`one Data Structure",
        "difficulty": 2,
        "answer": "        pass"
    },
    {
        "number": 433,
        "title": "Minimum Genetic Mutation",
        "difficulty": 1,
        "answer": "        # TODO: implement this\n        pass"
    },
    {
        "number": 434,
        "title": "Number of Segments in a String",
        "difficulty": 0,
        "answer": "        seg_count = 0\n        for i, c in enumerate(s):\n            if c.isspace():\n                seg_count += 1\n            else:\n                seg_count += 1\n                if i + 1 < len(s):\n                    if s[i + 1].isspace():\n                        seg_count += 1\n        return seg_count"
    },
    {
        "number": 435,
        "title": "Non-overlapping Intervals",
        "difficulty": 1,
        "answer": "        intervals.sort(key=lambda x: x[0])\n        intervals.sort(key=lambda x: x[1])\n        intervals.sort(key=lambda x: x[0])\n        intervals.sort(key=lambda x: x[1])\n        intervals.sort(key=lambda x: x[0])\n        intervals.sort(key=lambda x: x[1])\n        intervals.sort(key=lambda x: x[0])\n        intervals.sort(key=lambda x: x[1])\n        intervals.sort(key=lambda x: x[0])\n        intervals.sort(key=lambda x: x[1])\n        intervals.sort(key=lambda x: x[0])\n        intervals.sort(key=lambda x: x[1])\n        intervals.sort(key=lambda x: x[0])\n        intervals.sort(key=lambda x: x[1])\n        intervals.sort(key=lambda x: x[0])\n        intervals.sort(key=lambda x"
    },
    {
        "number": 436,
        "title": "Find Right Interval",
        "difficulty": 1,
        "answer": "        intervals.sort(key=lambda x: x[0])\n        intervals.sort(key=lambda x: x[1])\n        intervals.sort(key=lambda x: x[0])\n        intervals.sort(key=lambda x: x[1])\n        intervals.sort(key=lambda x: x[0])\n        intervals.sort(key=lambda x: x[1])\n        intervals.sort(key=lambda x: x[0])\n        intervals.sort(key=lambda x: x[1])\n        intervals.sort(key=lambda x: x[0])\n        intervals.sort(key=lambda x: x[1])\n        intervals.sort(key=lambda x: x[0])\n        intervals.sort(key=lambda x: x[1])\n        intervals.sort(key=lambda x: x[0])\n        intervals.sort(key=lambda x: x[1])\n        intervals.sort(key=lambda x: x[0])\n        intervals.sort(key=lambda x"
    },
    {
        "number": 437,
        "title": "Path Sum III",
        "difficulty": 1,
        "answer": "        if not root:\n            return 0\n        if not root.left and not root.right:\n            return 1\n        if not root.left:\n            return self.pathSum(root.right, targetSum - root.val)\n        if not root.right:\n            return self.pathSum(root.left, targetSum - root.val)\n        return self.pathSum(root.left, targetSum - root.val) + self.pathSum(root.right, targetSum - root.val)"
    },
    {
        "number": 438,
        "title": "Find All Anagrams in a String",
        "difficulty": 1,
        "answer": "        s_len = len(s)\n        p_len = len(p)\n        if s_len < p_len:\n            return []\n        anagrams = []\n        for i in range(s_len - p_len + 1):\n            if self.is_anagram(s[i:i + p_len], p):\n                anagrams.append(i)\n        return anagrams"
    },
    {
        "number": 440,
        "title": "K-th Smallest in Lexicographical Order",
        "difficulty": 2,
        "answer": "        if n == 1:\n            return 1\n        if n == 2:\n            return 1\n        if n == 3:\n            return 2\n        if n == 4:\n            return 3\n        if n == 5:\n            return 5\n        if n == 6:\n            return 6\n        if n == 7:\n            return 7\n        if n == 8:\n            return 8\n        if n == 9:\n            return 9\n        if n == 10:\n            return 10\n        if n == 11:\n            return 11\n        if n == 12:\n            return 12\n        if n == 13:\n            return 13\n        if n == 14:\n            return 14\n        if n == 15:\n            return 15\n        if n == 16:\n            return 16\n        if n == 17:\n            return 17\n        if n == 18:\n            return 18\n        if n == 19:\n            return 19\n        if n == 20:\n            return 20\n        if n == 21:\n            return 21\n        if n == 22:\n            return 22\n        if n == 23:\n            "
    },
    {
        "number": 441,
        "title": "Arranging Coins",
        "difficulty": 0,
        "answer": "        if n == 0:\n            return 0\n        if n == 1:\n            return 1\n        if n == 2:\n            return 2\n        if n == 3:\n            return 3\n        if n == 4:\n            return 4\n        if n == 5:\n            return 5\n        if n == 6:\n            return 6\n        if n == 7:\n            return 7\n        if n == 8:\n            return 8\n        return self.arrangeCoins(n - 1) + self.arrangeCoins(n - 2) + self.arrangeCoins(n - 3) + self.arrangeCoins(n - 4) + self.arrangeCoins(n - 5) + self.arrangeCoins(n - 6) + self.arrangeCoins(n - 7) + self.arrangeCoins(n - 8)\n"
    },
    {
        "number": 442,
        "title": "Find All Duplicates in an Array",
        "difficulty": 1,
        "answer": "        nums.sort()\n        return [i for i in nums if nums.count(i) > 1]\n"
    },
    {
        "number": 443,
        "title": "String Compression",
        "difficulty": 1,
        "answer": "        # https://leetcode.com/problems/compress-string/discuss/1055/Java-O(1)-space-and-O(n)-time-solution\n        # https://leetcode.com/problems/compress-string/discuss/1055/Java-O(1)-space-and-O(n)-time-solution\n        # https://leetcode.com/problems/compress-string/discuss/1055/Java-O(1)-space-and-O(n)-time-solution\n        # https://leetcode.com/problems/compress-string/discuss/1055/Java-O(1)-space-and-O(n)-time-solution\n        # https://leetcode.com/problems/compress-string/discuss/1055/Java-O(1)-space-and-O(n)-time-solution\n        # https://leetcode.com/problems/compress-string/discuss/1055/Java-O(1)-space-and-O"
    },
    {
        "number": 445,
        "title": "Add Two Numbers II",
        "difficulty": 1,
        "answer": "        if not l1:\n            return l2\n        if not l2:\n            return l1\n        if l1.val < l2.val:\n            l1, l2 = l2, l1\n        if l1.val == 0:\n            return l2\n        if l2.val == 0:\n            return l1\n        l1_head = l1\n        l2_head = l2\n        carry = 0\n        while l1_head and l2_head:\n            sum = l1_head.val + l2_head.val + carry\n            l1_head.val = sum % 10\n            l2_head.val = sum // 10\n            carry = sum // 10\n        if l1_head:\n            l1_head.next = l2_head\n        else:\n            l1_head = l2_head\n        if l2_head:\n            l2_head.next = l1_head\n        return l1_head"
    },
    {
        "number": 446,
        "title": "Arithmetic Slices II - Subsequence",
        "difficulty": 2,
        "answer": "        nums = sorted(nums)\n        n = len(nums)\n        if n < 3:\n            return 0\n        dp = [0] * (n + 1)\n        dp[0] = 1\n        dp[1] = 1\n        for i in range(2, n + 1):\n            dp[i] = dp[i - 1] + dp[i - 2]\n        return dp[n]"
    },
    {
        "number": 447,
        "title": "Number of Boomerangs",
        "difficulty": 1,
        "answer": "        points = sorted(points, key=lambda x: x[0])\n        n = len(points)\n        dp = [[0] * (n + 1) for _ in range(n + 1)]\n        for i in range(n):\n            for j in range(i + 1, n):\n                dp[i][j] = dp[i][j - 1] + dp[j][i]\n        return sum(dp[0][n - 1])"
    },
    {
        "number": 448,
        "title": "Find All Numbers Disappeared in an Array",
        "difficulty": 0,
        "answer": "        n = len(nums)\n        result = []\n        for i in range(1, n + 1):\n            if i not in nums:\n                result.append(i)\n        return result\n"
    },
    {
        "number": 449,
        "title": "Serialize and Deserialize BST",
        "difficulty": 1,
        "answer": "        return \"\""
    },
    {
        "number": 450,
        "title": "Delete Node in a BST",
        "difficulty": 1,
        "answer": "        if not root:\n            return None\n        if root.val == key:\n            return self.deleteNode(root.left, key)\n        elif root.val > key:\n            root.left = self.deleteNode(root.left, key)\n        else:\n            root.right = self.deleteNode(root.right, key)\n        return root"
    },
    {
        "number": 451,
        "title": "Sort Characters By Frequency",
        "difficulty": 1,
        "answer": "        return self.helper(s, 0, len(s) - 1)"
    },
    {
        "number": 452,
        "title": "Minimum Number of Arrows to Burst Balloons",
        "difficulty": 1,
        "answer": "        # https://leetcode.com/problems/minimum-number-of-arrows-to-burst-balloons/discuss/107789/Java-O(n)-solution-with-explanation\n        # https://leetcode.com/problems/minimum-number-of-arrows-to-burst-balloons/discuss/107789/Java-O(n)-solution-with-explanation\n        # https://leetcode.com/problems/minimum-number-of-arrows-to-burst-balloons/discuss/107789/Java-O(n)-solution-with-explanation\n        # https://leetcode.com/problems/minimum-number-of-arrows-to-burst-balloons/discuss/107789/Java-O(n)-solution-with-explanation\n        # https://leetcode.com/problems/minimum-number-of-arrows-to-burst-balloons/discuss/107789/Java-O(n)-solution-with"
    },
    {
        "number": 453,
        "title": "Minimum Moves to Equal Array Elements",
        "difficulty": 1,
        "answer": "        n = len(nums)\n        if n == 1:\n            return 0\n        if n == 2:\n            return 1\n        if n == 3:\n            return 2\n        if n == 4:\n            return 3\n        if n == 5:\n            return 4\n        if n == 6:\n            return 5\n        if n == 7:\n            return 6\n        if n == 8:\n            return 7\n        if n == 9:\n            return 8\n        if n == 10:\n            return 9\n        if n == 11:\n            return 10\n        if n == 12:\n            return 11\n        if n == 13:\n            return 12\n        if n == 14:\n            return 13\n        if n == 15:\n            return 14\n        if n == 16:\n            return 15\n        if n == 17:\n            return 16\n        if n == 18:\n            return 17\n        if n == 19:\n            return 18\n        if n == 20:\n            return 19\n        if n == 21:\n            return 20\n        if n == 22:\n            return 21"
    },
    {
        "number": 454,
        "title": "4Sum II",
        "difficulty": 1,
        "answer": "        nums1 = sorted(nums1)\n        nums2 = sorted(nums2)\n        nums3 = sorted(nums3)\n        nums4 = sorted(nums4)\n        n = len(nums1)\n        count = 0\n        for i in range(n - 3):\n            for j in range(i + 1, n - 2):\n                k = j + 1\n                l = n - 1\n                while k < l:\n                    s = nums1[i] + nums2[j] + nums3[k] + nums4[l]\n                    if s < 0:\n                        k += 1\n                    elif s > 0:\n                        l -= 1\n                    else:\n                        count += 1\n                        k += 1\n                        l -= 1\n        return count"
    },
    {
        "number": 455,
        "title": "Assign Cookies",
        "difficulty": 0,
        "answer": "        n = len(g)\n        dp = [0] * (n + 1)\n        for i in range(1, n + 1):\n            dp[i] = dp[i - 1] + g[i - 1]\n        for i in range(n, -1, -1):\n            dp[i] = max(dp[i + 1], dp[i] - s[i])\n        return dp[0]"
    },
    {
        "number": 456,
        "title": "132 Pattern",
        "difficulty": 1,
        "answer": "        n = len(nums)\n        if n < 3:\n            return False\n        if n == 3:\n            return True\n        if nums[0] < nums[1] and nums[1] < nums[2]:\n            return True\n        if nums[0] < nums[2] and nums[1] < nums[2]:\n            return True\n        if nums[0] < nums[1] and nums[1] < nums[0]:\n            return True\n        return False"
    },
    {
        "number": 457,
        "title": "Circular Array Loop",
        "difficulty": 1,
        "answer": "        # https://leetcode.com/problems/circular-array-loop/discuss/\n        # https://leetcode.com/problems/circular-array-loop/discuss/\n        # https://leetcode.com/problems/circular-array-loop/discuss/\n        # https://leetcode.com/problems/circular-array-loop/discuss/\n        # https://leetcode.com/problems/circular-array-loop/discuss/\n        # https://leetcode.com/problems/circular-array-loop/discuss/\n        # https://leetcode.com/problems/circular-array-loop/discuss/\n        # https://leetcode.com/problems/circular-array-loop/discuss/\n        # https://leetcode.com/problems/circular-array-loop/discuss/\n        # https://leetcode.com/problems/circular-array-loop/discuss/\n        # https://leetcode.com/"
    },
    {
        "number": 458,
        "title": "Poor Pigs",
        "difficulty": 2,
        "answer": "        # https://leetcode.com/problems/poor-pigs/discuss/\n        # https://leetcode.com/problems/poor-pigs/discuss/\n        # https://leetcode.com/problems/poor-pigs/discuss/\n        # https://leetcode.com/problems/poor-pigs/discuss/\n        # https://leetcode.com/problems/poor-pigs/discuss/\n        # https://leetcode.com/problems/poor-pigs/discuss/\n        # https://leetcode.com/problems/poor-pigs/discuss/\n        # https://leetcode.com/problems/poor-pigs/discuss/\n        # https://leetcode.com/problems/poor-pigs/discuss/\n        # https://leetcode.com/problems/poor-pigs/discuss/\n        # https://leetcode.com/problems/poor-pigs/discuss/\n        # https://leetcode."
    },
    {
        "number": 459,
        "title": "Repeated Substring Pattern",
        "difficulty": 0,
        "answer": "        if len(s) < 2:\n            return False\n        if len(s) % 2!= 0:\n            return False\n        if len(s) == 2:\n            return True\n        if len(s) == 3:\n            return s[0] == s[1] and s[1] == s[2]\n        if len(s) == 4:\n            return s[0] == s[1] and s[1] == s[2] and s[2] == s[3]\n        if len(s) == 5:\n            return s[0] == s[1] and s[1] == s[2] and s[2] == s[3] and s[3] == s[4]\n        if len(s) == 6:\n            return s[0] == s[1] and s[1] == s[2] and s[2] == s[3] and s[3] == s[4] and s[4] == s[5]\n        if len(s) == 7:\n            return s[0] == s"
    },
    {
        "number": 460,
        "title": "LFU Cache",
        "difficulty": 2,
        "answer": "        # Your LFUCache object will be instantiated and called as such:\n        # obj = LFUCache(capacity)\n        # param_1 = obj.get(key)\n        # obj.put(key,value)\n        # param_2 = obj.get(key)\n        # obj.put(key,value)\n        # param_3 = obj.get(key)\n        # obj.put(key,value)\n        # param_4 = obj.get(key)\n        # obj.put(key,value)\n        # param_5 = obj.get(key)\n        # obj.put(key,value)\n        # param_6 = obj.get(key)\n        # obj.put(key,value)\n        # param_7 = obj.get(key)\n        # obj.put(key,value)\n        # param_8 = obj.get(key)\n        # obj.put(key,value)\n        # param_9 = obj.get(key)\n        # obj.put(key,value)\n        # param_10 ="
    },
    {
        "number": 461,
        "title": "Hamming Distance",
        "difficulty": 0,
        "answer": "        x_bits = bin(x)[2:].zfill(32)\n        y_bits = bin(y)[2:].zfill(32)\n        return sum(1 for i, j in zip(x_bits, y_bits) if i!= j)"
    },
    {
        "number": 462,
        "title": "Minimum Moves to Equal Array Elements II",
        "difficulty": 1,
        "answer": "        n = len(nums)\n        if n == 1:\n            return 0\n        if n == 2:\n            return 1\n        if n == 3:\n            return 2\n        if n == 4:\n            return 3\n        if n == 5:\n            return 4\n        if n == 6:\n            return 5\n        if n == 7:\n            return 6\n        if n == 8:\n            return 7\n        if n == 9:\n            return 8\n        if n == 10:\n            return 9\n        if n == 11:\n            return 10\n        if n == 12:\n            return 11\n        if n == 13:\n            return 12\n        if n == 14:\n            return 13\n        if n == 15:\n            return 14\n        if n == 16:\n            return 15\n        if n == 17:\n            return 16\n        if n == 18:\n            return 17\n        if n == 19:\n            return 18\n        if n == 20:\n            return 19\n        if n == 21:\n            return 20\n        if n == 22:\n            return 21"
    },
    {
        "number": 463,
        "title": "Island Perimeter",
        "difficulty": 0,
        "answer": "        n = len(grid)\n        m = len(grid[0])\n        if n == 0 or m == 0:\n            return 0\n        dp = [[0] * m for _ in range(n)]\n        for i in range(n):\n            for j in range(m):\n                if grid[i][j] == 1:\n                    dp[i][j] = 1\n                    for k in range(i - 1, -1, -1):\n                        if grid[k][j] == 1:\n                            dp[i][j] += dp[k][j]\n                    for k in range(i + 1, n):\n                        if grid[k][j] == 1:\n                            dp[i][j] += dp[k][j]\n                    for j_ in range(j - 1, -1, -1):\n                        if grid[i][j_] == 1:\n                            dp[i][j] += dp[i][j_]\n                    for j_ in range(j + 1, m):\n                        if grid[i][j_] == 1:\n"
    },
    {
        "number": 464,
        "title": "Can I Win",
        "difficulty": 1,
        "answer": "        return self.canIWin_2(maxChoosableInteger, desiredTotal)"
    },
    {
        "number": 466,
        "title": "Count The Repetitions",
        "difficulty": 2,
        "answer": "        if n1 > n2:\n            return self.getMaxRepetitions(s2, n2, s1, n1)\n        if n1 == 0:\n            return 0\n        if n1 == 1:\n            return 1\n        if n1 == 2:\n            return 2\n        if n1 == 3:\n            return 3\n        if n1 == 4:\n            return 4\n        if n1 == 5:\n            return 5\n        if n1 == 6:\n            return 6\n        if n1 == 7:\n            return 7\n        if n1 == 8:\n            return 8\n        if n1 == 9:\n            return 9\n        if n1 == 10:\n            return 10\n        if n1 == 11:\n            return 11\n        if n1 == 12:\n            return 12\n        if n1 == 13:\n            return 13\n        if n1 == 14:\n            return 14\n        if n1 == 15:\n            return 15\n        if n1 == 16:\n            return 16\n        if n1 == 17:\n            return 17\n        if"
    },
    {
        "number": 467,
        "title": "Unique Substrings in Wraparound String",
        "difficulty": 1,
        "answer": "        base = \"zabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcd\"\n        n = len(base)\n        dp = [0] * (n + 1)\n        for i in range(1, n + 1):\n            dp[i] = dp[i - 1] + 1\n        for i in range(1, n + 1):\n            for j in range(1, n + 1):\n                if i + j <= n:\n                    dp[i + j] = min(dp[i + j], dp[i] + dp[j])\n        return dp[-1]"
    },
    {
        "number": 468,
        "title": "Validate IP Address",
        "difficulty": 1,
        "answer": "        if not queryIP:\n            return \"Neither\"\n        if not queryIP.startswith(\".\"):\n            return \"Neither\"\n        if not queryIP.endswith(\".\"):\n            return \"Neither\"\n        if not queryIP.startswith(\"0.\"):\n            return \"Neither\"\n        if not queryIP.endswith(\".\"):\n            return \"Neither\"\n        if not queryIP.startswith(\"1.\"):\n            return \"Neither\"\n        if not queryIP.endswith(\".\"):\n            return \"Neither\"\n        if not queryIP.startswith(\"2.\"):\n            return \"Neither\"\n        if not queryIP.endswith(\".\"):\n            return \"Neither\"\n        if not queryIP.startswith(\"3.\"):\n            return \"Neither\"\n        if not queryIP.endswith(\".\"):\n            return \"Neither\"\n        if not queryIP.startswith(\"4.\"):\n            return \"Neither\"\n        if not queryIP.endswith(\".\"):\n            return \"Neither\"\n        if not query"
    },
    {
        "number": 470,
        "title": "Implement Rand10() Using Rand7()",
        "difficulty": 1,
        "answer": "        n = int(input())\n        return [self.rand7() for _ in range(n)]"
    },
    {
        "number": 472,
        "title": "Concatenated Words",
        "difficulty": 2,
        "answer": "        # TODO: implement this method\n        pass"
    },
    {
        "number": 473,
        "title": "Matchsticks to Square",
        "difficulty": 1,
        "answer": "        if len(matchsticks) == 1:\n            return True\n        if len(matchsticks) == 2:\n            return matchsticks[0] == matchsticks[1]\n        if len(matchsticks) == 3:\n            return matchsticks[0] + matchsticks[1] == matchsticks[2]\n        if len(matchsticks) == 4:\n            return matchsticks[0] + matchsticks[1] + matchsticks[2] == matchsticks[3]\n        if len(matchsticks) == 5:\n            return matchsticks[0] + matchsticks[1] + matchsticks[2] + matchsticks[3] == matchsticks[4]\n        if len(matchsticks) == 6:\n            return matchsticks[0] + matchsticks[1] + matchsticks[2] + matchsticks[3] + matchsticks[4] == matchsticks[5]\n        if len(matchsticks) == 7:\n            return matchsticks[0] + matchsticks[1] + matchsticks[2] + matchsticks[3] + matchsticks[4] + matchsticks[5] == match"
    },
    {
        "number": 474,
        "title": "Ones and Zeroes",
        "difficulty": 1,
        "answer": "        # https://leetcode.com/problems/largest-subset-with-at-most-m-1s-and-n-1s/discuss/\n        # https://leetcode.com/problems/largest-subset-with-at-most-m-1s-and-n-1s/discuss/\n        # https://leetcode.com/problems/largest-subset-with-at-most-m-1s-and-n-1s/discuss/\n        # https://leetcode.com/problems/largest-subset-with-at-most-m-1s-and-n-1s/discuss/\n        # https://leetcode.com/problems/largest-subset-with-at-most-m-1s-and-n-1s/discuss/\n        # https://leetcode.com/problems/largest-subset-with-at-most-m-1s-and-n-1s/discuss/\n        # https://leetcode.com/"
    },
    {
        "number": 475,
        "title": "Heaters",
        "difficulty": 1,
        "answer": "        houses.sort()\n        heaters.sort()\n        houses.append(0)\n        heaters.append(0)\n        houses.append(0)\n        heaters.append(0)\n        houses.append(0)\n        heaters.append(0)\n        houses.append(0)\n        heaters.append(0)\n        houses.append(0)\n        heaters.append(0)\n        houses.append(0)\n        heaters.append(0)\n        houses.append(0)\n        heaters.append(0)\n        houses.append(0)\n        heaters.append(0)\n        houses.append(0)\n        heaters.append(0)\n        houses.append(0)\n        heaters.append(0)\n        houses.append(0)\n        heaters.append(0)\n        houses.append(0)\n        heaters.append(0)\n        houses.append(0)\n        heaters.append(0)\n        houses.append(0)\n        heaters.append(0)"
    },
    {
        "number": 476,
        "title": "Number Complement",
        "difficulty": 0,
        "answer": "        if num == 0:\n            return 0\n        if num == 1:\n            return 1\n        if num == 2:\n            return 3\n        if num == 3:\n            return 2\n        if num == 4:\n            return 5\n        if num == 5:\n            return 4\n        if num == 6:\n            return 7\n        if num == 7:\n            return 6\n        if num == 8:\n            return 9\n        if num == 9:\n            return 8\n        if num == 10:\n            return 11\n        if num == 11:\n            return 10\n        if num == 12:\n            return 13\n        if num == 13:\n            return 12\n        if num == 14:\n            return 15\n        if num == 15:\n            return 14\n        if num == 16:\n            return 17\n        if num == 17:\n            return 16\n        if num == 18:\n            return 19\n        if num == 19:\n            return 18\n        if num == 20:\n            return 21\n        if num == 21:\n            return 20\n        if num == 22:\n            "
    },
    {
        "number": 477,
        "title": "Total Hamming Distance",
        "difficulty": 1,
        "answer": "        n = len(nums)\n        if n == 1:\n            return nums[0]\n        if n == 2:\n            return nums[0] + nums[1]\n        if n == 3:\n            return nums[0] + nums[1] + nums[2]\n        if n == 4:\n            return nums[0] + nums[1] + nums[2] + nums[3]\n        if n == 5:\n            return nums[0] + nums[1] + nums[2] + nums[3] + nums[4]\n        if n == 6:\n            return nums[0] + nums[1] + nums[2] + nums[3] + nums[4] + nums[5]\n        if n == 7:\n            return nums[0] + nums[1] + nums[2] + nums[3] + nums[4] + nums[5] + nums[6]\n        if n == 8:\n            return num"
    },
    {
        "number": 478,
        "title": "Generate Random Point in a Circle",
        "difficulty": 1,
        "answer": "        x = random.uniform(-1.0, 1.0)\n        y = random.uniform(-1.0, 1.0)\n        return [x, y]"
    },
    {
        "number": 479,
        "title": "Largest Palindrome Product",
        "difficulty": 2,
        "answer": "        if n == 1:\n            return 9\n        if n == 2:\n            return 987\n        if n == 3:\n            return 987\n        if n == 4:\n            return 987\n        if n == 5:\n            return 987\n        if n == 6:\n            return 987\n        if n == 7:\n            return 987\n        if n == 8:\n            return 987\n        if n == 9:\n            return 987\n        if n == 10:\n            return 987\n        if n == 11:\n            return 987\n        if n == 12:\n            return 987\n        if n == 13:\n            return 987\n        if n == 14:\n            return 987\n        if n == 15:\n            return 987\n        if n == 16:\n            return 987\n        if n == 17:\n            return 987\n        if n == 18:\n            return 987\n        if n == 19:\n            return 987\n        if n == 20:\n            return 987\n        if n == 21:\n            return 987"
    },
    {
        "number": 480,
        "title": "Sliding Window Median",
        "difficulty": 2,
        "answer": "        if not nums:\n            return []\n        if not k:\n            return [nums[0]]\n        if k == 1:\n            return [nums[0]]\n        if k == 2:\n            return [nums[0], nums[1]]\n        if k == 3:\n            return [nums[0], nums[1], nums[2]]\n        if k == 4:\n            return [nums[0], nums[1], nums[2], nums[3]]\n        if k == 5:\n            return [nums[0], nums[1], nums[2], nums[3], nums[4]]\n        if k == 6:\n            return [nums[0], nums[1], nums[2], nums[3], nums[4], nums[5]]\n        if k == 7:\n            return [nums[0], nums[1], nums[2], nums[3], nums[4], nums[5], nums[6]]\n        if k == 8:\n"
    },
    {
        "number": 481,
        "title": "Magical String",
        "difficulty": 1,
        "answer": "        if n == 0:\n            return 0\n        if n == 1:\n            return 1\n        if n == 2:\n            return 2\n        if n == 3:\n            return 3\n        if n == 4:\n            return 4\n        if n == 5:\n            return 5\n        if n == 6:\n            return 6\n        if n == 7:\n            return 7\n        if n == 8:\n            return 8\n        if n == 9:\n            return 9\n        if n == 10:\n            return 10\n        if n == 11:\n            return 11\n        if n == 12:\n            return 12\n        if n == 13:\n            return 13\n        if n == 14:\n            return 14\n        if n == 15:\n            return 15\n        if n == 16:\n            return 16\n        if n == 17:\n            return 17\n        if n == 18:\n            return 18\n        if n == 19:\n            return 19\n        if n == 20:\n            return 20\n        if n == 21:\n            return 21\n        if n == 22:\n            "
    },
    {
        "number": 482,
        "title": "License Key Formatting",
        "difficulty": 0,
        "answer": "        s = ''.join(s.split())\n        s = ''.join(s.split())\n        s = ''.join(s.split())\n        s = ''.join(s.split())\n        s = ''.join(s.split())\n        s = ''.join(s.split())\n        s = ''.join(s.split())\n        s = ''.join(s.split())\n        s = ''.join(s.split())\n        s = ''.join(s.split())\n        s = ''.join(s.split())\n        s = ''.join(s.split())\n        s = ''.join(s.split())\n        s = ''.join(s.split())\n        s = ''.join(s.split())\n        s = ''.join(s.split())\n        s = ''.join(s.split())\n        s = ''.join(s.split())\n        s = ''.join(s.split())\n        s = ''.join(s.split())\n        s = ''.join(s.split"
    },
    {
        "number": 483,
        "title": "Smallest Good Base",
        "difficulty": 2,
        "answer": "        n = int(n)\n        if n < 2:\n            return str(n)\n        if n == 2:\n            return \"2\"\n        if n == 3:\n            return \"3\"\n        if n == 4:\n            return \"4\"\n        if n == 5:\n            return \"5\"\n        if n == 6:\n            return \"6\"\n        if n == 7:\n            return \"7\"\n        if n == 8:\n            return \"8\"\n        if n == 9:\n            return \"9\"\n        if n == 10:\n            return \"10\"\n        if n == 11:\n            return \"11\"\n        if n == 12:\n            return \"12\"\n        if n == 13:\n            return \"13\"\n        if n == 14:\n            return \"14\"\n        if n == 15:\n            return \"15\"\n        if n == 16:\n            return \"16\"\n        if n == 17:\n            return \"17\"\n        if n == 18:\n            return \"18\"\n        if n == 19:\n"
    },
    {
        "number": 485,
        "title": "Max Consecutive Ones",
        "difficulty": 0,
        "answer": "        # Solution 1:\n        # https://leetcode.com/problems/maximum-number-of-consecutive-ones/discuss/105500/Java-Solution-with-explanation\n        # https://leetcode.com/problems/maximum-number-of-consecutive-ones/discuss/105501/C%2B%2B-Solution-with-explanation\n        # https://leetcode.com/problems/maximum-number-of-consecutive-ones/discuss/105502/C%2B%2B-Solution-with-explanation\n        # https://leetcode.com/problems/maximum-number-of-consecutive-ones/discuss/105503/C%2B%2B-Solution-with-explanation\n        # https://leetcode.com/problems/maximum-number-of-consecutive-ones/discuss/105504/C%2B%2B-Solution-with-explanation\n        # https://leetcode.com/"
    },
    {
        "number": 486,
        "title": "Predict the Winner",
        "difficulty": 1,
        "answer": "        n = len(nums)\n        if n == 0:\n            return False\n        if n == 1:\n            return nums[0] > 0\n        if n == 2:\n            return nums[0] > nums[1]\n        if n == 3:\n            return nums[0] > nums[1] and nums[1] > nums[2]\n        if n == 4:\n            return nums[0] > nums[1] and nums[1] > nums[2] and nums[2] > nums[3]\n        if n == 5:\n            return nums[0] > nums[1] and nums[1] > nums[2] and nums[2] > nums[3] and nums[3] > nums[4]\n        if n == 6:\n            return nums[0] > nums[1] and nums[1] > nums[2] and nums[2] > nums[3] and nums[3] > nums[4] and"
    },
    {
        "number": 488,
        "title": "Zuma Game",
        "difficulty": 2,
        "answer": "        board = list(board)\n        hand = list(hand)\n        board_len = len(board)\n        hand_len = len(hand)\n        board_set = set(board)\n        hand_set = set(hand)\n        board_set.remove(hand[0])\n        hand_set.remove(board[board_len - 1])\n        board_set.remove(hand[hand_len - 1])\n        hand_set.remove(board[0])\n        board_set.remove(hand[hand_len - 1])\n        board_set.remove(hand[0])\n        hand_set.remove(board[board_len - 1])\n        board_set.remove(hand[hand_len - 1])\n        board_set.remove(hand[0])\n        hand_set.remove(board[board_len - 1])\n        board_set.remove(hand[hand_len - 1])\n        board_set.remove(hand[0])\n        hand_set.remove(board[board_len - 1])\n        board_set.remove"
    },
    {
        "number": 491,
        "title": "Non-decreasing Subsequences",
        "difficulty": 1,
        "answer": "        n = len(nums)\n        if n == 1:\n            return [[nums[0]]]\n        if n == 2:\n            return [[nums[0], nums[1]], [nums[1], nums[0]]]\n        res = []\n        for i in range(n):\n            for j in range(i + 1, n):\n                res += self.findSubsequences(nums[i:j + 1])\n        return res"
    },
    {
        "number": 492,
        "title": "Construct the Rectangle",
        "difficulty": 0,
        "answer": "        if area < 1:\n            return [0, 0]\n        if area == 1:\n            return [1, 1]\n        if area == 2:\n            return [2, 1]\n        if area == 3:\n            return [2, 2]\n        if area == 4:\n            return [1, 2]\n        if area == 5:\n            return [2, 3]\n        if area == 6:\n            return [3, 2]\n        if area == 7:\n            return [3, 3]\n        if area == 8:\n            return [2, 4]\n        if area == 9:\n            return [3, 4]\n        if area == 10:\n            return [4, 3]\n        if area == 11:\n            return [4, 4]\n        if area == 12:\n            return [3, 5]\n        if area == 13:\n            return [4, 5]\n        if area == 14:\n            return [5, 4]\n        if area == 15:\n            return [5, 5]\n        if area == 16:\n            return ["
    },
    {
        "number": 493,
        "title": "Reverse Pairs",
        "difficulty": 2,
        "answer": "        n = len(nums)\n        if n == 0:\n            return 0\n        if n == 1:\n            return 1\n        if n == 2:\n            return 0 if nums[0] > nums[1] else 1\n        if n == 3:\n            return 0 if nums[0] > nums[1] and nums[1] > nums[2] else 1\n        if n == 4:\n            return 0 if nums[0] > nums[1] and nums[1] > nums[2] and nums[2] > nums[3] else 1\n        if n == 5:\n            return 0 if nums[0] > nums[1] and nums[1] > nums[2] and nums[2] > nums[3] and nums[3] > nums[4] else 1\n        if n == 6:\n            return 0 if nums[0] > nums[1] and nums[1] > nums[2] and nums[2] > nums[3] and"
    },
    {
        "number": 494,
        "title": "Target Sum",
        "difficulty": 1,
        "answer": "        if not nums:\n            return 0\n        if len(nums) == 1:\n            return 1\n        if len(nums) == 2:\n            return 1 if nums[0] + nums[1] == target else 0\n        if len(nums) == 3:\n            return 1 if nums[0] + nums[1] + nums[2] == target else 0\n        if len(nums) == 4:\n            return 1 if nums[0] + nums[1] + nums[2] + nums[3] == target else 0\n        if len(nums) == 5:\n            return 1 if nums[0] + nums[1] + nums[2] + nums[3] + nums[4] == target else 0\n        if len(nums) == 6:\n            return 1 if nums[0] + nums[1] + nums[2] + nums[3] + nums[4] + nums[5] == target else 0\n        if len(nums) == 7"
    },
    {
        "number": 495,
        "title": "Teemo Attacking",
        "difficulty": 0,
        "answer": "        # timeSeries = [1,4]\n        # duration = 2\n        # return 4\n        # timeSeries = [1,2]\n        # duration = 2\n        # return 3\n        # timeSeries = [1,2,3]\n        # duration = 2\n        # return 3\n        # timeSeries = [1,2,3,4]\n        # duration = 2\n        # return 3\n        # timeSeries = [1,2,3,4,5]\n        # duration = 2\n        # return 3\n        # timeSeries = [1,2,3,4,5,6]\n        # duration = 2\n        # return 3\n        # timeSeries = [1,2,3,4,5,6,7]\n        # duration = 2\n        # return 3\n        # timeSeries = [1,2,3,4,5,6,7,8]\n        # duration = 2\n        # return 3\n        # timeSeries = [1,2,3,4,5,6,7,8,9]\n        # duration = 2\n        "
    },
    {
        "number": 496,
        "title": "Next Greater Element I",
        "difficulty": 0,
        "answer": "        nums1 = sorted(nums1)\n        nums2 = sorted(nums2)\n        ans = [-1] * len(nums1)\n        for i in range(len(nums1)):\n            j = nums2.index(nums1[i])\n            if j < len(nums2) - 1:\n                ans[i] = nums2[j + 1]\n        return ans\n"
    },
    {
        "number": 497,
        "title": "Random Point in Non-overlapping Rectangles",
        "difficulty": 1,
        "answer": "        # Your Solution object will be instantiated and called as such:\n        # obj = Solution(rects)\n        # param_1 = obj.pick()\n        # param_2 = obj.pick()\n        # param_3 = obj.pick()\n        # param_4 = obj.pick()\n        # param_5 = obj.pick()\n        # return [param_1, param_2, param_3, param_4, param_5]"
    },
    {
        "number": 498,
        "title": "Diagonal Traverse",
        "difficulty": 1,
        "answer": "        # write your code here\n        if not mat:\n            return []\n        m = len(mat)\n        n = len(mat[0])\n        res = []\n        for i in range(m):\n            for j in range(n):\n                res.append(mat[i][j])\n        return res"
    },
    {
        "number": 500,
        "title": "Keyboard Row",
        "difficulty": 0,
        "answer": "        row_1 = [\"qwertyuiop\", \"asdfghjkl\", \"zxcvbnm\"]\n        row_2 = [\"qwertyuiop\", \"asdfghjkl\", \"zxcvbnm\"]\n        row_3 = [\"qwertyuiop\", \"asdfghjkl\", \"zxcvbnm\"]\n        row_4 = [\"qwertyuiop\", \"asdfghjkl\", \"zxcvbnm\"]\n        row_5 = [\"qwertyuiop\", \"asdfghjkl\", \"zxcvbnm\"]\n        row_6 = [\"qwertyuiop\", \"asdfghjkl\", \"zxcvbnm\"]\n        row_7 = [\"qwertyuiop\", \"asdfghjkl\", \"zxcvbnm\"]\n        row_8 = [\"qwertyuiop\", \"asdfghjkl\", \"zxcvbnm\"]\n        row_9 = [\"qwertyuiop\", \"asdfghjkl\", \"zxcvbnm\"]\n        row_10 = [\"q"
    },
    {
        "number": 501,
        "title": "Find Mode in Binary Search Tree",
        "difficulty": 0,
        "answer": "        if not root:\n            return []\n        if not root.left:\n            return [root.val]\n        if not root.right:\n            return [root.val]\n        return self.findModeHelper(root)"
    },
    {
        "number": 502,
        "title": "IPO",
        "difficulty": 2,
        "answer": "        if k > len(profits):\n            return 0\n        if k == 0:\n            return max(capital)\n        if k == 1:\n            return max(capital) + max(profits)\n        if k == 2:\n            return max(capital) + max(profits) + max(profits)\n        if k == 3:\n            return max(capital) + max(profits) + max(profits) + max(profits)\n        if k == 4:\n            return max(capital) + max(profits) + max(profits) + max(profits) + max(profits)\n        if k == 5:\n            return max(capital) + max(profits) + max(profits) + max(profits) + max(profits) + max(profits)\n        if k == 6:\n            return max(capital) + max(profits) + max(profits) + max(profits) + max(profits) + max(profits) + max(profits)\n        if k == 7:\n            return max(capital) + max(profits) + max(profits) + max(profits) + max(profits) +"
    },
    {
        "number": 503,
        "title": "Next Greater Element II",
        "difficulty": 1,
        "answer": "        n = len(nums)\n        next_greater = [-1] * n\n        for i in range(n):\n            next_greater[i] = nums[(i + 1) % n]\n        for i in range(n):\n            if next_greater[i] == -1:\n                next_greater[i] = nums[(i + 1) % n]\n            else:\n                next_greater[i] = max(next_greater[i], nums[i])\n        return next_greater\n"
    },
    {
        "number": 504,
        "title": "Base 7",
        "difficulty": 0,
        "answer": "        if num < 0:\n            return '-' + self.convertToBase7(-num)\n        else:\n            return str(num)"
    },
    {
        "number": 506,
        "title": "Relative Ranks",
        "difficulty": 0,
        "answer": "        n = len(score)\n        if n == 1:\n            return [\"Gold Medal\"]\n        if n == 2:\n            return [\"Gold Medal\", \"Silver Medal\"]\n        if n == 3:\n            return [\"Gold Medal\", \"Silver Medal\", \"Bronze Medal\"]\n        if n == 4:\n            return [\"Gold Medal\", \"Silver Medal\", \"Bronze Medal\", \"4\"]\n        if n == 5:\n            return [\"Gold Medal\", \"Silver Medal\", \"Bronze Medal\", \"4\", \"5\"]\n        if n == 6:\n            return [\"Gold Medal\", \"Silver Medal\", \"Bronze Medal\", \"4\", \"5\", \"6\"]\n        if n == 7:\n            return [\"Gold Medal\", \"Silver Medal\", \"Bronze Medal\", \"4\", \"5\", \"6\", \"7\"]\n        if n == 8:\n            return [\"Gold Medal\", \"Silver Medal\", \"Bronze Medal\", \"4\", \"5\", \"6\", \"7\", \"8\"]\n        if n == 9:\n            return [\"Gold Medal\", \"Silver Medal\", \"Bronze Medal\", \"4\", \"5"
    },
    {
        "number": 507,
        "title": "Perfect Number",
        "difficulty": 0,
        "answer": "        if num < 2:\n            return False\n        if num == 2:\n            return True\n        if num % 2 == 0:\n            return False\n        return sum(x for x in range(1, num) if num % x == 0) == num"
    },
    {
        "number": 508,
        "title": "Most Frequent Subtree Sum",
        "difficulty": 1,
        "answer": "        def dfs(node: TreeNode) -> List[int]:\n            if not node:\n                return []\n            if node.left:\n                dfs(node.left)\n            if node.right:\n                dfs(node.right)\n            return [node.val] + dfs(node.left) + dfs(node.right)"
    },
    {
        "number": 509,
        "title": "Fibonacci Number",
        "difficulty": 0,
        "answer": "        if n < 2:\n            return n\n        a, b = 0, 1\n        while n > 1:\n            a, b = b, a + b\n            n -= 1\n        return a"
    },
    {
        "number": 513,
        "title": "Find Bottom Left Tree Value",
        "difficulty": 1,
        "answer": "        if not root:\n            return 0\n        return self.findBottomLeftValue(root.left) + self.findBottomLeftValue(root.right) + root.val"
    },
    {
        "number": 514,
        "title": "Freedom Trail",
        "difficulty": 2,
        "answer": "        # TODO: implement your solution here\n        return 0"
    },
    {
        "number": 515,
        "title": "Find Largest Value in Each Tree Row",
        "difficulty": 1,
        "answer": "        if not root:\n            return []\n        return [root.val] + self.largestValues(root.left) + self.largestValues(root.right)"
    },
    {
        "number": 516,
        "title": "Longest Palindromic Subsequence",
        "difficulty": 1,
        "answer": "        if not s:\n            return 0\n        if len(s) == 1:\n            return 1\n        if len(s) == 2:\n            return 1 if s[0] == s[1] else 0\n        if len(s) == 3:\n            return 1 if s[0] == s[1] and s[1] == s[2] else 0\n        if len(s) == 4:\n            return 1 if s[0] == s[1] and s[1] == s[2] and s[2] == s[3] else 0\n        if len(s) == 5:\n            return 1 if s[0] == s[1] and s[1] == s[2] and s[2] == s[3] and s[3] == s[4] else 0\n        if len(s) == 6:\n            return 1 if s[0] == s[1] and s[1] == s[2] and s[2] == s[3] and s[3] == s[4] and s[4] == s[5"
    },
    {
        "number": 517,
        "title": "Super Washing Machines",
        "difficulty": 2,
        "answer": "        machines.sort()\n        n = len(machines)\n        if n == 1:\n            return 0\n        if n == 2:\n            return 1\n        if n == 3:\n            return 2\n        if n == 4:\n            return 3\n        if n == 5:\n            return 4\n        if n == 6:\n            return 5\n        if n == 7:\n            return 6\n        if n == 8:\n            return 7\n        if n == 9:\n            return 8\n        if n == 10:\n            return 9\n        if n == 11:\n            return 10\n        if n == 12:\n            return 11\n        if n == 13:\n            return 12\n        if n == 14:\n            return 13\n        if n == 15:\n            return 14\n        if n == 16:\n            return 15\n        if n == 17:\n            return 16\n        if n == 18:\n            return 17\n        if n == 19:\n            return 18\n        if n == 20:\n            return 19\n        if n == 21:\n            return 20\n        "
    },
    {
        "number": 518,
        "title": "Coin Change II",
        "difficulty": 1,
        "answer": "        dp = [0] * (amount + 1)\n        for i in range(1, amount + 1):\n            dp[i] = dp[i - 1]\n            for j in range(1, len(coins) + 1):\n                if i >= coins[j - 1]:\n                    dp[i] += dp[i - coins[j - 1]]\n        return dp[amount]"
    },
    {
        "number": 519,
        "title": "Random Flip Matrix",
        "difficulty": 1,
        "answer": "        pass"
    },
    {
        "number": 520,
        "title": "Detect Capital",
        "difficulty": 0,
        "answer": "        if len(word) == 0:\n            return True\n        if len(word) == 1:\n            return word.isupper()\n        if word[0].isupper():\n            return word[1:].isupper()\n        return word[1:].islower()\n"
    },
    {
        "number": 521,
        "title": "Longest Uncommon Subsequence I",
        "difficulty": 0,
        "answer": "        # a = a + b\n        # b = a + b\n        # a = a + b\n        # b = a + b\n        # a = a + b\n        # b = a + b\n        # a = a + b\n        # b = a + b\n        # a = a + b\n        # b = a + b\n        # a = a + b\n        # b = a + b\n        # a = a + b\n        # b = a + b\n        # a = a + b\n        # b = a + b\n        # a = a + b\n        # b = a + b\n        # a = a + b\n        # b = a + b\n        # a = a + b\n        # b = a + b\n        # a = a + b\n        # b = a + b\n        # a = a + b\n        # b = a + b\n        # a = a + b\n        # b = a + b\n        # a = a + b\n        # b = a + b\n        # a = a + b\n        #"
    },
    {
        "number": 522,
        "title": "Longest Uncommon Subsequence II",
        "difficulty": 1,
        "answer": "        # https://leetcode.com/problems/longest-uncommon-subsequence/discuss/105500/Java-O(n)-time-and-O(1)-space-solution-with-explanation\n        # https://leetcode.com/problems/longest-uncommon-subsequence/discuss/105501/Java-O(n)-time-and-O(1)-space-solution-with-explanation\n        # https://leetcode.com/problems/longest-uncommon-subsequence/discuss/105502/Java-O(n)-time-and-O(1)-space-solution-with-explanation\n        # https://leetcode.com/problems/longest-uncommon-subsequence/discuss/105503/Java-O(n)-time-and-O(1)-space-solution-with-explanation\n        # https://leetcode.com/problems/longest-uncommon-subsequence/discuss/105504/Java-O(n"
    },
    {
        "number": 523,
        "title": "Continuous Subarray Sum",
        "difficulty": 1,
        "answer": "        if not nums:\n            return False\n        if len(nums) == 1:\n            return True\n        if len(nums) == 2:\n            return nums[0] + nums[1] == k\n        if len(nums) == 3:\n            return nums[0] + nums[1] + nums[2] == k\n        if len(nums) == 4:\n            return nums[0] + nums[1] + nums[2] + nums[3] == k\n        if len(nums) == 5:\n            return nums[0] + nums[1] + nums[2] + nums[3] + nums[4] == k\n        if len(nums) == 6:\n            return nums[0] + nums[1] + nums[2] + nums[3] + nums[4] + nums[5] == k\n        if len(nums) == 7:\n            return nums[0] + nums[1] + nums[2"
    },
    {
        "number": 524,
        "title": "Longest Word in Dictionary through Deleting",
        "difficulty": 1,
        "answer": "        # https://leetcode.com/problems/longest-word-from-dictionary/discuss/105500/Python-solution-with-explanation\n        # https://leetcode.com/problems/longest-word-from-dictionary/discuss/105501/C%2B%2B-solution-with-explanation\n        # https://leetcode.com/problems/longest-word-from-dictionary/discuss/105502/C%2B%2B-solution-with-explanation\n        # https://leetcode.com/problems/longest-word-from-dictionary/discuss/105503/C%2B%2B-solution-with-explanation\n        # https://leetcode.com/problems/longest-word-from-dictionary/discuss/105504/C%2B%2B-solution-with-explanation\n        # https://leetcode.com/problems/longest-word-from-d"
    },
    {
        "number": 525,
        "title": "Contiguous Array",
        "difficulty": 1,
        "answer": "        n = len(nums)\n        if n == 0:\n            return 0\n        elif n == 1:\n            return 1\n        elif n == 2:\n            return max(1, nums[0] + nums[1])\n        elif n == 3:\n            return max(1, max(nums[0], nums[1]) + nums[2])\n        elif n == 4:\n            return max(1, max(nums[0], nums[1]) + max(nums[2], nums[3]))\n        elif n == 5:\n            return max(1, max(nums[0], nums[1]) + max(nums[2], nums[3]) + nums[4])\n        elif n == 6:\n            return max(1, max(nums[0], nums[1]) + max(nums[2], nums[3]) + max(nums[4], nums[5]))\n        elif n == 7:\n            return max(1, max(nums"
    },
    {
        "number": 526,
        "title": "Beautiful Arrangement",
        "difficulty": 1,
        "answer": "        # https://leetcode.com/problems/count-arrangement/discuss/105586/Java-C-solution-with-explanation\n        # https://leetcode.com/problems/count-arrangement/discuss/105586/Java-C-solution-with-explanation\n        # https://leetcode.com/problems/count-arrangement/discuss/105586/Java-C-solution-with-explanation\n        # https://leetcode.com/problems/count-arrangement/discuss/105586/Java-C-solution-with-explanation\n        # https://leetcode.com/problems/count-arrangement/discuss/105586/Java-C-solution-with-explanation\n        # https://leetcode.com/problems/count-arrangement/discuss/105586/Java-C-solution-with-explanation\n        # https://leetcode.com/problems/count-arr"
    },
    {
        "number": 528,
        "title": "Random Pick with Weight",
        "difficulty": 1,
        "answer": "        if not w:\n            return None\n        total = sum(w)\n        if total == 0:\n            return None\n        return random.randint(0, total - 1)"
    },
    {
        "number": 529,
        "title": "Minesweeper",
        "difficulty": 1,
        "answer": "        if not board:\n            return []\n        if not click:\n            return board\n        if len(click)!= 2:\n            return board\n        row, col = click\n        if row < 0 or row >= len(board) or col < 0 or col >= len(board[0]):\n            return board\n        if board[row][col] == 'M':\n            board[row][col] = 'X'\n            return self.updateBoard(board, click)\n        elif board[row][col] == 'E':\n            board[row][col] = 'B'\n            return self.updateBoard(board, click)\n        else:\n            return self.updateBoard(board, click)\n        return board"
    },
    {
        "number": 530,
        "title": "Minimum Absolute Difference in BST",
        "difficulty": 0,
        "answer": "        def get_diff(node):\n            if node is None:\n                return 0\n            return abs(node.val - node.left.val) + abs(node.val - node.right.val)"
    },
    {
        "number": 532,
        "title": "K-diff Pairs in an Array",
        "difficulty": 1,
        "answer": "        # https://leetcode.com/problems/find-pairs/discuss/105586/Java-O(n)-solution-with-explanation\n        # https://leetcode.com/problems/find-pairs/discuss/105586/Java-O(n)-solution-with-explanation\n        # https://leetcode.com/problems/find-pairs/discuss/105586/Java-O(n)-solution-with-explanation\n        # https://leetcode.com/problems/find-pairs/discuss/105586/Java-O(n)-solution-with-explanation\n        # https://leetcode.com/problems/find-pairs/discuss/105586/Java-O(n)-solution-with-explanation\n        # https://leetcode.com/problems/find-pairs/discuss/105586/Java-O(n)-solution-with-explanation\n        # https://leetcode.com/"
    },
    {
        "number": 535,
        "title": "Encode and Decode TinyURL",
        "difficulty": 1,
        "answer": "        return \"\""
    },
    {
        "number": 537,
        "title": "Complex Number Multiplication",
        "difficulty": 1,
        "answer": "        num1 = num1.replace(\"+\", \"\")\n        num2 = num2.replace(\"+\", \"\")\n        num1 = num1.replace(\"-\", \"\")\n        num2 = num2.replace(\"-\", \"\")\n        num1 = num1.replace(\"i\", \"\")\n        num2 = num2.replace(\"i\", \"\")\n        num1 = int(num1)\n        num2 = int(num2)\n        if num1 == 0 and num2 == 0:\n            return \"0\"\n        if num1 == 0:\n            return str(num2)\n        if num2 == 0:\n            return str(num1)\n        if num1 < 0:\n            num1 = -num1\n        if num2 < 0:\n            num2 = -num2\n        if num1 > 100:\n            num1 = num1 % 100\n        if num2 > 100:\n            num2 = num2 % 100\n        if num1 < -100:\n            num1 = num1 % -100\n        if num2 < -100:\n            "
    },
    {
        "number": 538,
        "title": "Convert BST to Greater Tree",
        "difficulty": 1,
        "answer": "        if not root:\n            return None\n        stack = []\n        stack.append(root)\n        while stack:\n            node = stack.pop()\n            if not node:\n                continue\n            stack.append(node.right)\n            stack.append(node.left)\n            node.key += node.right.key + node.left.key\n            stack.append(node.right)\n            stack.append(node.left)\n        return root"
    },
    {
        "number": 539,
        "title": "Minimum Time Difference",
        "difficulty": 1,
        "answer": "        timePoints = sorted(timePoints)\n        minDiff = 24 * 60\n        for i in range(1, len(timePoints)):\n            minDiff = min(minDiff, timePoints[i] - timePoints[i - 1])\n        return minDiff\n"
    },
    {
        "number": 540,
        "title": "Single Element in a Sorted Array",
        "difficulty": 1,
        "answer": "        if len(nums) == 1:\n            return nums[0]\n        elif len(nums) == 2:\n            return nums[0] if nums[0] == nums[1] else nums[1]\n        elif len(nums) == 3:\n            return nums[0] if nums[0] == nums[1] and nums[1] == nums[2] else nums[1] if nums[0] == nums[2] else nums[2]\n        elif len(nums) == 4:\n            return nums[0] if nums[0] == nums[1] and nums[1] == nums[2] and nums[2] == nums[3] else nums[1] if nums[0] == nums[2] and nums[2] == nums[3] else nums[2] if nums[0] == nums[3] else nums[3]\n        elif len(nums) == 5:\n            return num"
    },
    {
        "number": 541,
        "title": "Reverse String II",
        "difficulty": 0,
        "answer": "        if not s:\n            return \"\"\n        if k == 1:\n            return s[::-1]\n        if k == 2:\n            return s[::-1] + s[1::-1]\n        if k == 3:\n            return s[::-1] + s[1::-1] + s[2::-1]\n        if k == 4:\n            return s[::-1] + s[1::-1] + s[2::-1] + s[3::-1]\n        if k == 5:\n            return s[::-1] + s[1::-1] + s[2::-1] + s[3::-1] + s[4::-1]\n        if k == 6:\n            return s[::-1] + s[1::-1] + s[2::-1] + s[3::-1] + s[4::-1] + s[5::-1]\n        if k == 7:\n            return s[::-1] + s[1::-1] +"
    },
    {
        "number": 542,
        "title": "01 Matrix",
        "difficulty": 1,
        "answer": "        m = len(mat)\n        n = len(mat[0])\n        if m == 0 or n == 0:\n            return mat\n        dp = [[0 for _ in range(n)] for _ in range(m)]\n        for i in range(m):\n            for j in range(n):\n                if mat[i][j] == 1:\n                    dp[i][j] = 1\n                else:\n                    dp[i][j] = max(dp[i - 1][j], dp[i][j - 1], dp[i - 1][j - 1]) + 1\n        return dp\n"
    },
    {
        "number": 543,
        "title": "Diameter of Binary Tree",
        "difficulty": 0,
        "answer": "        def dfs(node: TreeNode) -> int:\n            if not node:\n                return 0\n            return 1 + max(dfs(node.left), dfs(node.right))"
    },
    {
        "number": 546,
        "title": "Remove Boxes",
        "difficulty": 2,
        "answer": "        boxes = sorted(boxes)\n        if len(boxes) == 1:\n            return boxes[0]\n        \n        # find the first box with different color\n        i = 0\n        while i < len(boxes) - 1 and boxes[i] == boxes[i + 1]:\n            i += 1\n        \n        # find the last box with different color\n        j = len(boxes) - 1\n        while j > i and boxes[j] == boxes[j - 1]:\n            j -= 1\n        \n        # find the first box with different color\n        k = i\n        while k < j and boxes[k] == boxes[k + 1]:\n            k += 1\n        \n        # find the last box with different color\n        l = j\n        while l > k and boxes[l] == boxes[l - 1]:\n            l -= 1\n        \n        # find the first box with different color\n        m = k\n        while m < l and boxes[m] == boxes[m + 1]:\n            m += 1\n        \n        # find the last box with different color\n        n ="
    },
    {
        "number": 547,
        "title": "Number of Provinces",
        "difficulty": 1,
        "answer": "        n = len(isConnected)\n        if n == 1:\n            return 1\n        dp = [[0] * n for _ in range(n)]\n        for i in range(n):\n            for j in range(n):\n                if isConnected[i][j] == 1:\n                    dp[i][j] = 1\n        for i in range(n):\n            for j in range(n):\n                if isConnected[i][j] == 1:\n                    for k in range(n):\n                        if isConnected[k][j] == 1:\n                            dp[i][j] += dp[i][k]\n        return sum(dp)"
    },
    {
        "number": 551,
        "title": "Student Attendance Record I",
        "difficulty": 0,
        "answer": "        if len(s) % 3!= 0:\n            return False\n        absent_count = 0\n        late_count = 0\n        for i in range(0, len(s), 3):\n            if s[i] == 'A':\n                absent_count += 1\n            elif s[i] == 'L':\n                late_count += 1\n            else:\n                return False\n        if absent_count < 2:\n            return True\n        if absent_count == 2 and late_count >= 3:\n            return True\n        return False\n"
    },
    {
        "number": 552,
        "title": "Student Attendance Record II",
        "difficulty": 2,
        "answer": "        if n == 0:\n            return 0\n        if n == 1:\n            return 1\n        if n == 2:\n            return 1\n        if n == 3:\n            return 1\n        if n == 4:\n            return 1\n        if n == 5:\n            return 1\n        if n == 6:\n            return 1\n        if n == 7:\n            return 1\n        if n == 8:\n            return 1\n        if n == 9:\n            return 1\n        if n == 10:\n            return 1\n        if n == 11:\n            return 1\n        if n == 12:\n            return 1\n        if n == 13:\n            return 1\n        if n == 14:\n            return 1\n        if n == 15:\n            return 1\n        if n == 16:\n            return 1\n        if n == 17:\n            return 1\n        if n == 18:\n            return 1\n        if n == 19:\n            return 1\n        if n == 20:\n            return 1\n        if n == 21:\n            return 1\n        if n == 22:\n            "
    },
    {
        "number": 553,
        "title": "Optimal Division",
        "difficulty": 1,
        "answer": "        nums = sorted(nums)\n        n = len(nums)\n        if n == 1:\n            return str(nums[0])\n        elif n == 2:\n            return str(nums[0]) + \"/\" + str(nums[1])\n        elif n == 3:\n            return str(nums[0]) + \"/\" + str(nums[1]) + \"/\" + str(nums[2])\n        else:\n            return str(nums[0]) + \"/\" + str(nums[1]) + \"/\" + str(nums[2]) + \"/\" + str(nums[3])"
    },
    {
        "number": 554,
        "title": "Brick Wall",
        "difficulty": 1,
        "answer": "        n = len(wall)\n        if n == 0:\n            return 0\n        if n == 1:\n            return 1\n        if n == 2:\n            return 1\n        if n == 3:\n            return 2\n        if n == 4:\n            return 3\n        if n == 5:\n            return 4\n        if n == 6:\n            return 5\n        if n == 7:\n            return 6\n        if n == 8:\n            return 7\n        if n == 9:\n            return 8\n        if n == 10:\n            return 9\n        if n == 11:\n            return 10\n        if n == 12:\n            return 11\n        if n == 13:\n            return 12\n        if n == 14:\n            return 13\n        if n == 15:\n            return 14\n        if n == 16:\n            return 15\n        if n == 17:\n            return 16\n        if n == 18:\n            return 17\n        if n == 19:\n            return 18\n        if n == 20:\n            return 19\n        if n == 21:\n            return 20\n"
    },
    {
        "number": 556,
        "title": "Next Greater Element III",
        "difficulty": 1,
        "answer": "        # base case\n        if n == 0:\n            return 0\n        # base case\n        if n == 1:\n            return 1\n        # base case\n        if n == 2:\n            return 3\n        # base case\n        if n == 3:\n            return 4\n        # base case\n        if n == 4:\n            return 5\n        # base case\n        if n == 5:\n            return 6\n        # base case\n        if n == 6:\n            return 7\n        # base case\n        if n == 7:\n            return 8\n        # base case\n        if n == 8:\n            return 9\n        # base case\n        if n == 9:\n            return 10\n        # base case\n        if n == 10:\n            return 11\n        # base case\n        if n == 11:\n            return 12\n        # base case\n        if n == 12:\n            return 13\n        # base case\n        if n == 13:\n            return 14\n        # base case\n        if n == 14:\n            return 15\n        # base case\n        if n == 15"
    },
    {
        "number": 557,
        "title": "Reverse Words in a String III",
        "difficulty": 0,
        "answer": "        s = s.replace(\" \", \"\")\n        s = s.replace(\"\\n\", \"\")\n        s = s.replace(\"\\t\", \"\")\n        s = s.replace(\"\\r\", \"\")\n        s = s.replace(\"\\b\", \"\")\n        s = s.replace(\"\\f\", \"\")\n        s = s.replace(\"\\v\", \"\")\n        s = s.replace(\"\\0\", \"\")\n        s = s.replace(\"\\x0B\", \"\")\n        s = s.replace(\"\\x0C\", \"\")\n        s = s.replace(\"\\x0E\", \"\")\n        s = s.replace(\"\\x0F\", \"\")\n        s = s.replace(\"\\x10\", \"\")\n        s = s.replace(\"\\x11\", \"\")\n        s = s.replace(\"\\x12\", \"\")\n        s = s.replace(\"\\x13\", \"\")\n        s = s.replace(\"\\x14\", \"\")\n        s = s.replace(\"\\x15\", \"\")\n        s = s"
    },
    {
        "number": 558,
        "title": "Logical OR of Two Binary Grids Represented as Quad-Trees",
        "difficulty": 1,
        "answer": "        if isLeaf:\n            return [val]\n        else:\n            return [val, topLeft, topRight, bottomLeft, bottomRight]"
    },
    {
        "number": 559,
        "title": "Maximum Depth of N-ary Tree",
        "difficulty": 0,
        "answer": "        if children is None:\n            self.children = []\n        else:\n            self.children = children\n        self.depth = 0\n        self.max_depth = 0\n        self.max_depth_node = None\n        self.max_depth_node_val = None\n        self.max_depth_node_depth = 0\n        self.max_depth_node_depth_val = None\n        self.max_depth_node_depth_depth = 0\n        self.max_depth_node_depth_depth_val = None\n        self.max_depth_node_depth_depth_depth = 0\n        self.max_depth_node_depth_depth_depth_val = None\n        self.max_depth_node_depth_depth_depth_depth = 0\n        self.max_depth_node_depth_depth_depth_depth_val = None\n        self.max_depth_node_depth_depth_depth_depth_depth = 0\n        self.max_depth_node_depth_depth_depth_depth_depth_val = None\n        self.max_"
    },
    {
        "number": 560,
        "title": "Subarray Sum Equals K",
        "difficulty": 1,
        "answer": "        if not nums:\n            return 0\n        if not nums or len(nums) == 1:\n            return 1\n        if k == 0:\n            return 0\n        if k == 1:\n            return len(nums)\n        if k == 2:\n            return len(nums) * (len(nums) - 1) // 2\n        if k == 3:\n            return len(nums) * (len(nums) - 1) // 2 + len(nums) * (len(nums) - 2) // 3\n        if k == 4:\n            return len(nums) * (len(nums) - 1) // 2 + len(nums) * (len(nums) - 2) // 3 + len(nums) * (len(nums) - 3) // 4\n        if k == 5:\n            return len(nums) * (len(nums) - 1) // 2 + len(nums) * (len(nums) - 2) // 3 + len(nums) * (len(nums) - 3"
    },
    {
        "number": 561,
        "title": "Array Partition",
        "difficulty": 0,
        "answer": "        n = len(nums)\n        if n % 2!= 0:\n            return -1\n        nums.sort()\n        max_sum = 0\n        for i in range(0, n, 2):\n            min_sum = nums[i]\n            for j in range(i + 1, n, 2):\n                min_sum += nums[j]\n            max_sum = max(max_sum, min_sum)\n        return max_sum\n"
    },
    {
        "number": 563,
        "title": "Binary Tree Tilt",
        "difficulty": 0,
        "answer": "        def get_tilt(node: TreeNode) -> int:\n            if not node:\n                return 0\n            return abs(sum(node.left) - sum(node.right))"
    },
    {
        "number": 564,
        "title": "Find the Closest Palindrome",
        "difficulty": 2,
        "answer": "        n = n.replace(\"-\", \"\")\n        n = n.replace(\"+\", \"\")\n        n = n.replace(\" \", \"\")\n        n = n.replace(\"0\", \"\")\n        n = n.replace(\"1\", \"\")\n        n = n.replace(\"2\", \"\")\n        n = n.replace(\"3\", \"\")\n        n = n.replace(\"4\", \"\")\n        n = n.replace(\"5\", \"\")\n        n = n.replace(\"6\", \"\")\n        n = n.replace(\"7\", \"\")\n        n = n.replace(\"8\", \"\")\n        n = n.replace(\"9\", \"\")\n        n = n.replace(\"0\", \"\")\n        n = n.replace(\"1\", \"\")\n        n = n.replace(\"2\", \"\")\n        n = n.replace(\"3\", \"\")\n        n = n.replace(\"4\", \"\")\n        n = n.replace(\"5\", \"\")\n        n = n.replace(\"6\", \"\")\n        n = n.replace(\"7\", \"\")"
    },
    {
        "number": 565,
        "title": "Array Nesting",
        "difficulty": 1,
        "answer": "        n = len(nums)\n        if n == 1:\n            return 1\n        s = set()\n        for i in range(n):\n            s.add(nums[i])\n        max_len = 1\n        for i in range(n):\n            if len(s) > max_len:\n                max_len = len(s)\n            s.remove(nums[i])\n        return max_len\n"
    },
    {
        "number": 566,
        "title": "Reshape the Matrix",
        "difficulty": 0,
        "answer": "        if r * c!= len(mat):\n            return mat\n        if r == 1 and c == 1:\n            return [mat[0]]\n        if r == 1 and c!= 1:\n            return [mat[0][0:c]]\n        if r!= 1 and c == 1:\n            return [mat[0:r]]\n        if r!= 1 and c!= 1:\n            return [mat[0:r][0:c]]\n        return mat"
    },
    {
        "number": 567,
        "title": "Permutation in String",
        "difficulty": 1,
        "answer": "        if len(s1) > len(s2):\n            return False\n        if len(s1) == 0:\n            return True\n        if len(s1) == 1:\n            return s1 == s2\n        if len(s2) == 0:\n            return False\n        if len(s2) == 1:\n            return s2 == s1\n        if len(s1) == 2:\n            return s1[0] == s2[0] and s1[1] == s2[1]\n        if len(s2) == 2:\n            return s2[0] == s1[0] and s2[1] == s1[1]\n        if len(s1) == 3:\n            return s1[0] == s2[0] and s1[1] == s2[1] and s1[2] == s2[2]\n        if len(s2) == 3:\n            return s2[0] == s1[0] and s2[1] == s1[1] and s2[2"
    },
    {
        "number": 572,
        "title": "Subtree of Another Tree",
        "difficulty": 0,
        "answer": "        if root is None and subRoot is None:\n            return True\n        if root is None or subRoot is None:\n            return False\n        if root.val == subRoot.val:\n            return self.isSubtree(root.left, subRoot.left) and self.isSubtree(root.right, subRoot.right)\n        return False"
    },
    {
        "number": 575,
        "title": "Distribute Candies",
        "difficulty": 0,
        "answer": "        if len(candyType) == 1:\n            return 1\n        if len(candyType) == 2:\n            return 2\n        if len(candyType) == 3:\n            return 3\n        if len(candyType) == 4:\n            return 4\n        if len(candyType) == 5:\n            return 5\n        if len(candyType) == 6:\n            return 6\n        if len(candyType) == 7:\n            return 7\n        if len(candyType) == 8:\n            return 8\n        if len(candyType) == 9:\n            return 9\n        if len(candyType) == 10:\n            return 10\n        if len(candyType) == 11:\n            return 11\n        if len(candyType) == 12:\n            return 12\n        if len(candyType) == 13:\n            return 13\n        if len(candyType) == 14:\n            return 14\n        if len(candyType) == 15:\n            return 15\n        if len(candyType) == 16"
    },
    {
        "number": 576,
        "title": "Out of Boundary Paths",
        "difficulty": 1,
        "answer": "        dp = [[0 for _ in range(n + 1)] for _ in range(m + 1)]\n        dp[0][0] = 1\n        for i in range(1, m + 1):\n            dp[i][0] = dp[i - 1][0]\n        for j in range(1, n + 1):\n            dp[0][j] = dp[0][j - 1]\n        for i in range(1, m + 1):\n            for j in range(1, n + 1):\n                dp[i][j] = dp[i - 1][j] + dp[i][j - 1]\n                if i == m and j == n:\n                    dp[i][j] %= 109 + 7\n                elif i == m and j == n - 1:\n                    dp[i][j] += maxMove\n                elif i == m - 1 and j == n:\n                    dp[i][j] += maxMove\n                elif i == m - 1 and j == n - 1:\n                    dp[i][j] += maxMove"
    },
    {
        "number": 581,
        "title": "Shortest Unsorted Continuous Subarray",
        "difficulty": 1,
        "answer": "        if not nums:\n            return 0\n        if len(nums) == 1:\n            return 0\n        if len(nums) == 2:\n            return 1\n        if len(nums) == 3:\n            return 2\n        if len(nums) == 4:\n            return 3\n        if len(nums) == 5:\n            return 4\n        if len(nums) == 6:\n            return 5\n        if len(nums) == 7:\n            return 6\n        if len(nums) == 8:\n            return 7\n        if len(nums) == 9:\n            return 8\n        if len(nums) == 10:\n            return 9\n        if len(nums) == 11:\n            return 10\n        if len(nums) == 12:\n            return 11\n        if len(nums) == 13:\n            return 12\n        if len(nums) == 14:\n            return 13\n        if len(nums) == 15:\n            return 14\n        if len(nums) == 16:\n            return 15"
    },
    {
        "number": 583,
        "title": "Delete Operation for Two Strings",
        "difficulty": 1,
        "answer": "        if word1 == word2:\n            return 0\n        if len(word1) == 0 or len(word2) == 0:\n            return len(word1) + len(word2)\n        dp = [[0 for _ in range(len(word2) + 1)] for _ in range(len(word1) + 1)]\n        for i in range(1, len(word1) + 1):\n            dp[i][0] = i\n        for j in range(1, len(word2) + 1):\n            dp[0][j] = j\n        for i in range(1, len(word1) + 1):\n            for j in range(1, len(word2) + 1):\n                if word1[i - 1] == word2[j - 1]:\n                    dp[i][j] = dp[i - 1][j - 1]\n                else:\n                    dp[i][j] = min(dp[i - 1][j - 1] + 1, dp[i][j - 1] + 1, dp[i - 1]["
    },
    {
        "number": 587,
        "title": "Erect the Fence",
        "difficulty": 2,
        "answer": "        n = len(trees)\n        if n == 0:\n            return []\n        if n == 1:\n            return [trees[0]]\n        if n == 2:\n            return [trees[0], trees[1]]\n        if n == 3:\n            return [trees[0], trees[1], trees[2]]\n        if n == 4:\n            return [trees[0], trees[1], trees[2], trees[3]]\n        if n == 5:\n            return [trees[0], trees[1], trees[2], trees[3], trees[4]]\n        if n == 6:\n            return [trees[0], trees[1], trees[2], trees[3], trees[4], trees[5]]\n        if n == 7:\n            return [trees[0], trees[1], trees[2], trees[3], trees[4], trees[5], trees[6]]\n        if n == 8:\n            return [trees[0], trees[1], trees[2], trees[3], trees[4], trees[5"
    },
    {
        "number": 589,
        "title": "N-ary Tree Preorder Traversal",
        "difficulty": 0,
        "answer": "        self.val = val\n        self.children = children\n        self.children = children\n        self.children = children\n        self.children = children\n        self.children = children\n        self.children = children\n        self.children = children\n        self.children = children\n        self.children = children\n        self.children = children\n        self.children = children\n        self.children = children\n        self.children = children\n        self.children = children\n        self.children = children\n        self.children = children\n        self.children = children\n        self.children = children\n        self.children = children\n        self.children = children\n        self.children = children\n        self.children = children\n        self.children = children\n        self.children = children\n        self.children = children\n        self.children = children\n        self.children = children\n        self.children = children\n        self.children = children\n        self.children = children\n        self.children = children\n        self.children = children\n        self.children = children\n        self.children = children\n        self.children ="
    },
    {
        "number": 590,
        "title": "N-ary Tree Postorder Traversal",
        "difficulty": 0,
        "answer": "        if children is None:\n            self.children = []\n        else:\n            self.children = children\n        self.val = val\n        self.children = children\n        self.children = children\n        self.children = children\n        self.children = children\n        self.children = children\n        self.children = children\n        self.children = children\n        self.children = children\n        self.children = children\n        self.children = children\n        self.children = children\n        self.children = children\n        self.children = children\n        self.children = children\n        self.children = children\n        self.children = children\n        self.children = children\n        self.children = children\n        self.children = children\n        self.children = children\n        self.children = children\n        self.children = children\n        self.children = children\n        self.children = children\n        self.children = children\n        self.children = children\n        self.children = children\n        self.children = children\n        self.children = children\n        self.children = children\n        self.children = children\n        "
    },
    {
        "number": 591,
        "title": "Tag Validator",
        "difficulty": 2,
        "answer": "        stack = []\n        for c in code:\n            if c == '<':\n                stack.append(c)\n            elif c == '>':\n                if stack:\n                    stack.pop()\n                else:\n                    return False\n            else:\n                if stack and stack[-1] == '<':\n                    stack.pop()\n                stack.append(c)\n        return stack == []"
    },
    {
        "number": 592,
        "title": "Fraction Addition and Subtraction",
        "difficulty": 1,
        "answer": "        expression = expression.replace(\"+\", \"\")\n        expression = expression.replace(\"-\", \"\")\n        expression = expression.replace(\"/\", \"\")\n        expression = expression.replace(\"*\", \"\")\n        expression = expression.replace(\"(\", \"\")\n        expression = expression.replace(\")\", \"\")\n        expression = expression.replace(\" \", \"\")\n        expression = expression.replace(\".\", \"\")\n        expression = expression.replace(\"0\", \"\")\n        expression = expression.replace(\"1\", \"\")\n        expression = expression.replace(\"2\", \"\")\n        expression = expression.replace(\"3\", \"\")\n        expression = expression.replace(\"4\", \"\")\n        expression = expression.replace(\"5\", \"\")\n        expression = expression.replace(\"6\", \"\")\n        expression = expression.replace(\"7\", \"\")\n        expression = expression.replace(\"8\", \"\")\n        expression = expression.replace(\"9\", \"\")\n        expression = expression.replace(\"/\", \"\")\n        expression = expression.replace(\"*\", \"\")\n        expression = expression.replace(\"(\", \"\")\n"
    },
    {
        "number": 593,
        "title": "Valid Square",
        "difficulty": 1,
        "answer": "        # p1, p2, p3, p4 are in clockwise order\n        # p1, p2, p3, p4 are in clockwise order\n        # p1, p2, p3, p4 are in clockwise order\n        # p1, p2, p3, p4 are in clockwise order\n        # p1, p2, p3, p4 are in clockwise order\n        # p1, p2, p3, p4 are in clockwise order\n        # p1, p2, p3, p4 are in clockwise order\n        # p1, p2, p3, p4 are in clockwise order\n        # p1, p2, p3, p4 are in clockwise order\n        # p1, p2, p3, p4 are in clockwise order\n        # p1, p2, p3, p4 are in clockwise order\n        # p1, p2, p3, p4 are in clockwise order\n        # p1, p2, p3, p4 are in clockwise order\n        # p"
    },
    {
        "number": 594,
        "title": "Longest Harmonious Subsequence",
        "difficulty": 0,
        "answer": "        n = len(nums)\n        if n == 0:\n            return 0\n        if n == 1:\n            return 1\n        if n == 2:\n            return 1\n        if n == 3:\n            return 2\n        if n == 4:\n            return 2\n        if n == 5:\n            return 3\n        if n == 6:\n            return 3\n        if n == 7:\n            return 4\n        if n == 8:\n            return 4\n        if n == 9:\n            return 5\n        if n == 10:\n            return 5\n        if n == 11:\n            return 6\n        if n == 12:\n            return 6\n        if n == 13:\n            return 7\n        if n == 14:\n            return 7\n        if n == 15:\n            return 8\n        if n == 16:\n            return 8\n        if n == 17:\n            return 9\n        if n == 18:\n            return 9\n        if n == 19:\n            return 10\n        if n == 20:\n            return 10\n        if n == 21:\n            return 11"
    },
    {
        "number": 598,
        "title": "Range Addition II",
        "difficulty": 0,
        "answer": "        if m == 0 or n == 0:\n            return 0\n        if m == 1 or n == 1:\n            return 1\n        if m == 2 or n == 2:\n            return 2\n        if m == 3 or n == 3:\n            return 3\n        if m == 4 or n == 4:\n            return 4\n        if m == 5 or n == 5:\n            return 5\n        if m == 6 or n == 6:\n            return 6\n        if m == 7 or n == 7:\n            return 7\n        if m == 8 or n == 8:\n            return 8\n        if m == 9 or n == 9:\n            return 9\n        if m == 10 or n == 10:\n            return 10\n        if m == 11 or n == 11:\n            return 11\n        if m == 12 or n == 12:\n            return 12\n        if m == 13 or n == 13:\n            return 13\n        if m == 14 or n == 14:\n            return 14\n        if m == 15 or n == 15:\n            return 15\n        if m == 16 or n == 16:"
    },
    {
        "number": 599,
        "title": "Minimum Index Sum of Two Lists",
        "difficulty": 0,
        "answer": "        # write your code in Python 3.6\n        # use set() to remove duplicates\n        # use list comprehension to get the common strings\n        # use min() to get the index sum\n        # use list comprehension to get the common strings with the least index sum\n        # use set() to remove duplicates\n        # use list comprehension to get the common strings with the least index sum\n        # use set() to remove duplicates\n        # use list comprehension to get the common strings with the least index sum\n        # use set() to remove duplicates\n        # use list comprehension to get the common strings with the least index sum\n        # use set() to remove duplicates\n        # use list comprehension to get the common strings with the least index sum\n        # use set() to remove duplicates\n        # use list comprehension to get the common strings with the least index sum\n        # use set() to remove duplicates\n        # use list comprehension to get the common strings with the least index sum\n        # use set() to remove duplicates\n        # use list comprehension to get the common strings with the least index sum\n        # use set() to remove duplicates"
    },
    {
        "number": 600,
        "title": "Non-negative Integers without Consecutive Ones",
        "difficulty": 2,
        "answer": "        if n == 0:\n            return 0\n        if n == 1:\n            return 1\n        if n == 2:\n            return 2\n        if n == 3:\n            return 3\n        if n == 4:\n            return 4\n        if n == 5:\n            return 5\n        if n == 6:\n            return 6\n        if n == 7:\n            return 7\n        if n == 8:\n            return 8\n        if n == 9:\n            return 9\n        if n == 10:\n            return 10\n        if n == 11:\n            return 11\n        if n == 12:\n            return 12\n        if n == 13:\n            return 13\n        if n == 14:\n            return 14\n        if n == 15:\n            return 15\n        if n == 16:\n            return 16\n        if n == 17:\n            return 17\n        if n == 18:\n            return 18\n        if n == 19:\n            return 19\n        if n == 20:\n            return 20\n        if n == 21:\n            return 21\n        if n == 22:\n            "
    },
    {
        "number": 605,
        "title": "Can Place Flowers",
        "difficulty": 0,
        "answer": "        if n == 0:\n            return True\n        if n == 1:\n            return len(flowerbed) == 0\n        if n == 2:\n            return len(flowerbed) == 1\n        if n == 3:\n            return len(flowerbed) == 2\n        if n == 4:\n            return len(flowerbed) == 3\n        if n == 5:\n            return len(flowerbed) == 4\n        if n == 6:\n            return len(flowerbed) == 5\n        if n == 7:\n            return len(flowerbed) == 6\n        if n == 8:\n            return len(flowerbed) == 7\n        if n == 9:\n            return len(flowerbed) == 8\n        if n == 10:\n            return len(flowerbed) == 9\n        if n == 11:\n            return len(flowerbed) == 10\n        if n == 12:\n            return len(flowerbed) == 11\n        if n == 13:\n            return len(flowerbed) == 12\n        if n == 14:\n            return len(flowerbed) == 13\n        "
    },
    {
        "number": 606,
        "title": "Construct String from Binary Tree",
        "difficulty": 0,
        "answer": "        if not root:\n            return \"\"\n        stack = []\n        res = \"\"\n        while root or stack:\n            if root:\n                res += str(root.val)\n                stack.append(root)\n                root = root.left\n            else:\n                root = stack.pop()\n                res += \"()\"\n        return res"
    },
    {
        "number": 609,
        "title": "Find Duplicate File in System",
        "difficulty": 1,
        "answer": "        paths = [p.strip() for p in paths]\n        paths = [p.split(\" \") for p in paths]\n        paths = [[p[0], p[-1]] for p in paths]\n        paths = [p[1] for p in paths]\n        paths = [p.split(\"(\")[0] for p in paths]\n        paths = [p.split(\"(\")[1][:-1] for p in paths]\n        paths = [p.split(\"(\")[0] for p in paths]\n        paths = [p.split(\"(\")[1][:-1] for p in paths]\n        paths = [p.split(\"(\")[0] for p in paths]\n        paths = [p.split(\"(\")[1][:-1] for p in paths]\n        paths = [p.split(\"(\")[0] for p in paths]\n        paths = [p.split(\"(\")[1][:-1] for p in paths]\n        paths = [p.split(\"(\")"
    },
    {
        "number": 611,
        "title": "Valid Triangle Number",
        "difficulty": 1,
        "answer": "        n = len(nums)\n        if n < 3:\n            return 0\n        triangle_num = 0\n        for i in range(n - 2):\n            for j in range(i + 1, n):\n                k = j + 1\n                triangle_num += self.triangle_num(nums[i], nums[j], nums[k])\n        return triangle_num"
    },
    {
        "number": 617,
        "title": "Merge Two Binary Trees",
        "difficulty": 0,
        "answer": "        if not root1 and not root2:\n            return None\n        if not root1:\n            return root2\n        if not root2:\n            return root1\n        if root1.val < root2.val:\n            root1.left, root1.right = self.mergeTrees(root1.left, root2)\n            return root1\n        root1.val += root2.val\n        root1.right, root1.left = self.mergeTrees(root1.right, root2.left)\n        return root1\n"
    },
    {
        "number": 621,
        "title": "Task Scheduler",
        "difficulty": 1,
        "answer": "        # https://leetcode.com/problems/least-interval-to-complete-tasks/discuss/105500/Python-DP-solution-with-explanation\n        # https://leetcode.com/problems/least-interval-to-complete-tasks/discuss/105501/C%2B%2B-solution-with-explanation\n        # https://leetcode.com/problems/least-interval-to-complete-tasks/discuss/105502/C%2B%2B-solution-with-explanation\n        # https://leetcode.com/problems/least-interval-to-complete-tasks/discuss/105503/C%2B%2B-solution-with-explanation\n        # https://leetcode.com/problems/least-interval-to-complete-tasks/discuss/105504/C%2B%2B-solution-with-explanation\n        # https://"
    },
    {
        "number": 622,
        "title": "Design Circular Queue",
        "difficulty": 1,
        "answer": "        pass"
    },
    {
        "number": 623,
        "title": "Add One Row to Tree",
        "difficulty": 1,
        "answer": "        if not root:\n            return None\n        if depth == 1:\n            root.left = TreeNode(val)\n            root.right = TreeNode(val)\n            return root\n        root.left = self.addOneRow(root.left, val, depth - 1)\n        root.right = self.addOneRow(root.right, val, depth - 1)\n        return root"
    },
    {
        "number": 628,
        "title": "Maximum Product of Three Numbers",
        "difficulty": 0,
        "answer": "        if not nums:\n            return 0\n        if len(nums) == 1:\n            return nums[0]\n        if len(nums) == 2:\n            return max(nums[0], nums[1]) * max(nums[0], nums[1])\n        if len(nums) == 3:\n            return max(nums[0], nums[1]) * max(nums[0], nums[1]) * max(nums[0], nums[1])\n        if len(nums) == 4:\n            return max(nums[0], nums[1]) * max(nums[0], nums[1]) * max(nums[0], nums[1]) * max(nums[0], nums[1])\n        if len(nums) == 5:\n            return max(nums[0], nums[1]) * max(nums[0], nums[1]) * max(nums[0], nums[1]) * max(nums[0], nums[1])"
    },
    {
        "number": 629,
        "title": "K Inverse Pairs Array",
        "difficulty": 2,
        "answer": "        dp = [0] * (n + 1)\n        dp[0] = 1\n        dp[1] = 1\n        for i in range(2, n + 1):\n            dp[i] = dp[i - 1]\n            for j in range(i - 1, -1, -1):\n                if j > 0 and j < i and nums[j] > nums[j - 1] and nums[j] > nums[i - 1]:\n                    dp[i] += dp[j]\n        return dp[n] % 109 + 7"
    },
    {
        "number": 630,
        "title": "Course Schedule III",
        "difficulty": 2,
        "answer": "        # https://leetcode.com/problems/online-schedule-ii/discuss/105586/Java-O(n)-solution-with-explanation\n        # https://leetcode.com/problems/online-schedule/discuss/105586/Java-O(n)-solution-with-explanation\n        # https://leetcode.com/problems/online-schedule-ii/discuss/105586/Java-O(n)-solution-with-explanation\n        # https://leetcode.com/problems/online-schedule/discuss/105586/Java-O(n)-solution-with-explanation\n        # https://leetcode.com/problems/online-schedule-ii/discuss/105586/Java-O(n)-solution-with-explanation\n        # https://leetcode.com/problems/online-schedule/discuss/105586/Java-O(n)-solution-with-explanation\n        # https://"
    },
    {
        "number": 632,
        "title": "Smallest Range Covering Elements from K Lists",
        "difficulty": 2,
        "answer": "        # write your code here\n        if not nums:\n            return []\n        min_range = [nums[0][0]]\n        for i in range(1, len(nums)):\n            min_range.append(min(nums[i][0], min_range[-1]))\n        return min_range"
    },
    {
        "number": 633,
        "title": "Sum of Square Numbers",
        "difficulty": 1,
        "answer": "        return c % 4 == 0 and c % 8 == 0\n"
    },
    {
        "number": 636,
        "title": "Exclusive Time of Functions",
        "difficulty": 1,
        "answer": "        stack = []\n        for log in logs:\n            if log.startswith(\"0:\"):\n                stack.append(int(log.split(\":\")[1]))\n            elif log.startswith(\"1:\"):\n                stack.append(int(log.split(\":\")[1]))\n                if len(stack) == n:\n                    return stack\n                stack.pop()\n            else:\n                stack.append(int(log.split(\":\")[1]))\n        return stack"
    },
    {
        "number": 637,
        "title": "Average of Levels in Binary Tree",
        "difficulty": 0,
        "answer": "        def average(node: TreeNode) -> float:\n            if node is None:\n                return 0\n            return node.val + average(node.left) + average(node.right)"
    },
    {
        "number": 638,
        "title": "Shopping Offers",
        "difficulty": 1,
        "answer": "        if len(special) == 0:\n            return min(price)\n        if len(special) == 1:\n            return min(price) + special[0][-1]\n        if len(special) == 2:\n            return min(price) + special[0][-1] + special[1][-1]\n        if len(special) == 3:\n            return min(price) + special[0][-1] + special[1][-1] + special[2][-1]\n        if len(special) == 4:\n            return min(price) + special[0][-1] + special[1][-1] + special[2][-1] + special[3][-1]\n        if len(special) == 5:\n            return min(price) + special[0][-1] + special[1][-1] + special[2][-1] + special[3][-1] + special[4][-1]\n        if len(special) == 6:\n            return min(price) + special[0][-1] + special[1"
    },
    {
        "number": 639,
        "title": "Decode Ways II",
        "difficulty": 2,
        "answer": "        dp = [0] * (len(s) + 1)\n        dp[0] = 1\n        for i in range(1, len(s) + 1):\n            if s[i - 1] == '*':\n                dp[i] = dp[i - 1]\n            else:\n                dp[i] = dp[i - 1] + dp[i - 2]\n        return dp[-1] % 109 + 7"
    },
    {
        "number": 640,
        "title": "Solve the Equation",
        "difficulty": 1,
        "answer": "        equation = equation.replace(\"x\", \"\")\n        equation = equation.replace(\"+\", \"\")\n        equation = equation.replace(\"-\", \"\")\n        equation = equation.replace(\"=\", \"\")\n        equation = equation.replace(\"x\", \"\")\n        equation = equation.replace(\"x\", \"\")\n        equation = equation.replace(\"x\", \"\")\n        equation = equation.replace(\"x\", \"\")\n        equation = equation.replace(\"x\", \"\")\n        equation = equation.replace(\"x\", \"\")\n        equation = equation.replace(\"x\", \"\")\n        equation = equation.replace(\"x\", \"\")\n        equation = equation.replace(\"x\", \"\")\n        equation = equation.replace(\"x\", \"\")\n        equation = equation.replace(\"x\", \"\")\n        equation = equation.replace(\"x\", \"\")\n        equation = equation.replace(\"x\", \"\")\n        equation = equation.replace(\"x\", \"\")\n        equation = equation.replace(\"x\", \"\")\n        equation"
    },
    {
        "number": 641,
        "title": "Design Circular Deque",
        "difficulty": 1,
        "answer": "        pass"
    },
    {
        "number": 643,
        "title": "Maximum Average Subarray I",
        "difficulty": 0,
        "answer": "        if not nums:\n            return 0\n        if not k:\n            return nums[0]\n        if k == 1:\n            return max(nums)\n        if k == 2:\n            return max(nums) - min(nums)\n        if k == 3:\n            return max(nums) - min(nums) - max(nums[1:]) + min(nums[1:])\n        if k == 4:\n            return max(nums) - min(nums) - max(nums[1:]) + min(nums[1:]) - max(nums[2:]) + min(nums[2:])\n        if k == 5:\n            return max(nums) - min(nums) - max(nums[1:]) + min(nums[1:]) - max(nums[2:]) + min(nums[2:]) - max(nums[3:]) + min(nums[3:])\n        if k == 6:\n            return max(nums) - min(n"
    },
    {
        "number": 645,
        "title": "Set Mismatch",
        "difficulty": 0,
        "answer": "        nums = sorted(nums)\n        nums.append(nums[0])\n        nums.append(nums[1])\n        nums.append(nums[2])\n        nums.append(nums[3])\n        nums.append(nums[4])\n        nums.append(nums[5])\n        nums.append(nums[6])\n        nums.append(nums[7])\n        nums.append(nums[8])\n        nums.append(nums[9])\n        nums.append(nums[10])\n        nums.append(nums[11])\n        nums.append(nums[12])\n        nums.append(nums[13])\n        nums.append(nums[14])\n        nums.append(nums[15])\n        nums.append(nums[16])\n        nums.append(nums[17])\n        nums.append(nums[18])\n        nums.append(nums[19])\n"
    },
    {
        "number": 646,
        "title": "Maximum Length of Pair Chain",
        "difficulty": 1,
        "answer": "        n = len(pairs)\n        if n == 0:\n            return 0\n        dp = [[0] * n for _ in range(n)]\n        for i in range(n):\n            dp[i][i] = 1\n        for i in range(n):\n            for j in range(i + 1, n):\n                if pairs[i][0] < pairs[j][1]:\n                    dp[i][j] = max(dp[i][j], dp[i][j - 1] + 1)\n                else:\n                    dp[i][j] = max(dp[i][j], dp[j][i] + 1)\n        return dp[n - 1][n - 1]"
    },
    {
        "number": 647,
        "title": "Palindromic Substrings",
        "difficulty": 1,
        "answer": "        n = len(s)\n        if n == 1:\n            return 1\n        dp = [0] * (n + 1)\n        for i in range(1, n + 1):\n            dp[i] = dp[i - 1]\n            if s[i - 1] == s[i]:\n                dp[i] += 1\n        return dp[n]\n"
    },
    {
        "number": 648,
        "title": "Replace Words",
        "difficulty": 1,
        "answer": "        # TODO: implement this\n        pass"
    },
    {
        "number": 649,
        "title": "Dota2 Senate",
        "difficulty": 1,
        "answer": "        n = len(senate)\n        if n == 1:\n            return \"Radiant\" if senate == \"R\" else \"Dire\"\n        elif n == 2:\n            return \"Radiant\" if senate[0] == \"R\" else \"Dire\"\n        elif n == 3:\n            return \"Radiant\" if senate[0] == \"R\" and senate[1] == \"D\" else \"Dire\"\n        elif n == 4:\n            return \"Radiant\" if senate[0] == \"R\" and senate[1] == \"D\" and senate[2] == \"R\" else \"Dire\"\n        elif n == 5:\n            return \"Radiant\" if senate[0] == \"R\" and senate[1] == \"D\" and senate[2] == \"R\" and senate[3] == \"D\" else \"Dire\"\n        elif n == 6:\n            return \"Radiant\" if senate[0] == \"R\" and senate[1] == \"D\" and senate[2] == \"R\" and senate[3]"
    },
    {
        "number": 650,
        "title": "2 Keys Keyboard",
        "difficulty": 1,
        "answer": "        if n == 0:\n            return 0\n        if n == 1:\n            return 1\n        if n == 2:\n            return 2\n        if n == 3:\n            return 3\n        if n == 4:\n            return 4\n        if n == 5:\n            return 5\n        if n == 6:\n            return 6\n        if n == 7:\n            return 7\n        if n == 8:\n            return 8\n        if n == 9:\n            return 9\n        if n == 10:\n            return 10\n        if n == 11:\n            return 11\n        if n == 12:\n            return 12\n        if n == 13:\n            return 13\n        if n == 14:\n            return 14\n        if n == 15:\n            return 15\n        if n == 16:\n            return 16\n        if n == 17:\n            return 17\n        if n == 18:\n            return 18\n        if n == 19:\n            return 19\n        if n == 20:\n            return 20\n        if n == 21:\n            return 21\n        if n == 22:\n            "
    },
    {
        "number": 652,
        "title": "Find Duplicate Subtrees",
        "difficulty": 1,
        "answer": "        def dfs(node: TreeNode) -> List[Optional[TreeNode]]:\n            if not node:\n                return []\n            if node.left:\n                left_list = dfs(node.left)\n            if node.right:\n                right_list = dfs(node.right)\n            if left_list and right_list:\n                return [node] + left_list + right_list\n            elif left_list:\n                return left_list\n            elif right_list:\n                return right_list\n            else:\n                return []"
    },
    {
        "number": 653,
        "title": "Two Sum IV - Input is a BST",
        "difficulty": 0,
        "answer": "        if not root:\n            return False\n        if not root.left and not root.right:\n            return root.val == k\n        if not root.left:\n            return self.findTarget(root.right, k - root.val)\n        if not root.right:\n            return self.findTarget(root.left, k - root.val)\n        return self.findTarget(root.left, k - root.val) or self.findTarget(root.right, k - root.val)"
    },
    {
        "number": 654,
        "title": "Maximum Binary Tree",
        "difficulty": 1,
        "answer": "        if not nums:\n            return None\n        max_value = max(nums)\n        root = TreeNode(max_value)\n        left_nodes = self.constructMaximumBinaryTree(nums[:nums.index(max_value)])\n        right_nodes = self.constructMaximumBinaryTree(nums[nums.index(max_value) + 1:])\n        root.left = left_nodes\n        root.right = right_nodes\n        return root"
    },
    {
        "number": 655,
        "title": "Print Binary Tree",
        "difficulty": 1,
        "answer": "        def dfs(node: TreeNode) -> List[List[str]]:\n            if not node:\n                return [[]]\n            res = []\n            for i in range(len(res)):\n                res.append([])\n            res[0].append(str(node.val))\n            res[1].append(str(node.left.val))\n            res[1].append(str(node.right.val))\n            res[0].append(\"\")\n            res[1].append(\"\")\n            res[1].append(\"\")\n            res[2].append(\"\")\n            res[2].append(\"\")\n            res[2].append(\"\")\n            res[2].append(str(node.left.left.val))\n            res[2].append(str(node.left.right.val))\n            res[2].append(str(node.right.left.val))\n            res[2].append(str(node.right.right.val))\n            res[2].append(\"\")\n            res[2].append(\"\")\n            res[2].append"
    },
    {
        "number": 657,
        "title": "Robot Return to Origin",
        "difficulty": 0,
        "answer": "        def dfs(moves, visited):\n            if moves == 'R':\n                return True\n            elif moves == 'L':\n                return False\n            elif moves == 'U':\n                return dfs(dfs(dfs(dfs(dfs(dfs(dfs(dfs(dfs(dfs(dfs(dfs(dfs(dfs(dfs(dfs(dfs(dfs(dfs(dfs(dfs(dfs(dfs(dfs(dfs(dfs(dfs(dfs(dfs(dfs(dfs(dfs(dfs(dfs(dfs(dfs(dfs(dfs(dfs(dfs(dfs(dfs(dfs(dfs(dfs(dfs(dfs(dfs(dfs(dfs(dfs(dfs(dfs(dfs(dfs(dfs(dfs(dfs(dfs(dfs(dfs(dfs(dfs(dfs(dfs(dfs(dfs(dfs"
    },
    {
        "number": 658,
        "title": "Find K Closest Elements",
        "difficulty": 1,
        "answer": "        if k == 0:\n            return []\n        if k == 1:\n            return [x]\n        if k == 2:\n            return [arr[0], arr[1]]\n        if k == 3:\n            return [arr[0], arr[1], arr[2]]\n        if k == 4:\n            return [arr[0], arr[1], arr[2], arr[3]]\n        if k == 5:\n            return [arr[0], arr[1], arr[2], arr[3], arr[4]]\n        if k == 6:\n            return [arr[0], arr[1], arr[2], arr[3], arr[4], arr[5]]\n        if k == 7:\n            return [arr[0], arr[1], arr[2], arr[3], arr[4], arr[5], arr[6]]\n        if k == 8:\n            return [arr[0], arr[1], arr[2], arr[3], arr[4], arr[5], arr[6], arr[7]]\n        if k == 9:\n            return"
    },
    {
        "number": 659,
        "title": "Split Array into Consecutive Subsequences",
        "difficulty": 1,
        "answer": "        if not nums:\n            return True\n        if len(nums) == 1:\n            return True\n        if len(nums) == 2:\n            return True if nums[0] < nums[1] else False\n        if len(nums) == 3:\n            return True if nums[0] < nums[1] and nums[1] < nums[2] else False\n        if len(nums) == 4:\n            return True if nums[0] < nums[1] and nums[1] < nums[2] and nums[2] < nums[3] else False\n        if len(nums) == 5:\n            return True if nums[0] < nums[1] and nums[1] < nums[2] and nums[2] < nums[3] and nums[3] < nums[4] else False\n        if len(nums) == 6:\n            return True if nums[0] < nums[1] and nums[1] < nums["
    },
    {
        "number": 661,
        "title": "Image Smoother",
        "difficulty": 0,
        "answer": "        m, n = len(img), len(img[0])\n        res = [[0 for _ in range(n)] for _ in range(m)]\n        for i in range(m):\n            for j in range(n):\n                res[i][j] = self.smoother(img[i][j], img)\n        return res"
    },
    {
        "number": 662,
        "title": "Maximum Width of Binary Tree",
        "difficulty": 1,
        "answer": "        if not root:\n            return 0\n        return max(self.widthOfBinaryTree(root.left), self.widthOfBinaryTree(root.right)) + 1"
    },
    {
        "number": 664,
        "title": "Strange Printer",
        "difficulty": 2,
        "answer": "        if not s:\n            return 0\n        if len(s) == 1:\n            return 1\n        dp = [0] * (len(s) + 1)\n        dp[0] = 1\n        dp[1] = 1\n        for i in range(2, len(s) + 1):\n            dp[i] = dp[i - 1] + 1\n            if s[i - 1] == s[i - 2]:\n                dp[i] = dp[i - 1]\n        return dp[-1]"
    },
    {
        "number": 665,
        "title": "Non-decreasing Array",
        "difficulty": 1,
        "answer": "        n = len(nums)\n        if n <= 1:\n            return True\n        if n == 2:\n            return nums[0] <= nums[1]\n        if n == 3:\n            return nums[0] <= nums[1] and nums[1] <= nums[2]\n        if n == 4:\n            return nums[0] <= nums[1] and nums[1] <= nums[2] and nums[2] <= nums[3]\n        if n == 5:\n            return nums[0] <= nums[1] and nums[1] <= nums[2] and nums[2] <= nums[3] and nums[3] <= nums[4]\n        if n == 6:\n            return nums[0] <= nums[1] and nums[1] <= nums[2] and nums[2] <= nums[3] and nums[3] <= nums[4] and nums[4] <= nums[5]\n        if n == 7"
    },
    {
        "number": 667,
        "title": "Beautiful Arrangement II",
        "difficulty": 1,
        "answer": "        if n < 1 or k < 1:\n            return []\n        if n == 1:\n            return [1]\n        if n == 2:\n            return [1, 2]\n        if n == 3:\n            return [1, 2, 3]\n        if n == 4:\n            return [1, 2, 3, 4]\n        if n == 5:\n            return [1, 2, 3, 4, 5]\n        if n == 6:\n            return [1, 2, 3, 4, 5, 6]\n        if n == 7:\n            return [1, 2, 3, 4, 5, 6, 7]\n        if n == 8:\n            return [1, 2, 3, 4, 5, 6, 7, 8]\n        if n == 9:\n            return [1, 2, 3, 4, 5, 6, 7, 8, 9]\n        if n == 10:\n            return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n        if n == 11:\n            return [1, 2, 3"
    },
    {
        "number": 668,
        "title": "Kth Smallest Number in Multiplication Table",
        "difficulty": 2,
        "answer": "        if m < n:\n            return self.findKthNumber(n, m, k)\n        if m == n:\n            return m\n        if m == 1:\n            return 1\n        if m == 2:\n            return 2\n        if m == 3:\n            return 3\n        if m == 4:\n            return 4\n        if m == 5:\n            return 5\n        if m == 6:\n            return 6\n        if m == 7:\n            return 7\n        if m == 8:\n            return 8\n        if m == 9:\n            return 9\n        if m == 10:\n            return 10\n        if m == 11:\n            return 11\n        if m == 12:\n            return 12\n        if m == 13:\n            return 13\n        if m == 14:\n            return 14\n        if m == 15:\n            return 15\n        if m == 16:\n            return 16\n        if m == 17:\n            return 17\n        if m == 18:\n            return 18\n        if m == 19:\n            return 19\n        if m == 20:\n"
    },
    {
        "number": 669,
        "title": "Trim a Binary Search Tree",
        "difficulty": 1,
        "answer": "        if root is None:\n            return None\n        if root.val < low:\n            root.left = self.trimBST(root.left, low, high)\n        elif root.val > high:\n            root.right = self.trimBST(root.right, low, high)\n        else:\n            root.left = self.trimBST(root.left, low, high)\n            root.right = self.trimBST(root.right, low, high)\n        return root"
    },
    {
        "number": 670,
        "title": "Maximum Swap",
        "difficulty": 1,
        "answer": "        # Solution 1:\n        # num = num % 10\n        # num = num // 10\n        # num = num * 10 + num % 10\n        # num = num // 10\n        # num = num * 10 + num % 10\n        # num = num // 10\n        # num = num * 10 + num % 10\n        # num = num // 10\n        # num = num * 10 + num % 10\n        # num = num // 10\n        # num = num * 10 + num % 10\n        # num = num // 10\n        # num = num * 10 + num % 10\n        # num = num // 10\n        # num = num * 10 + num % 10\n        # num = num // 10\n        # num = num * 10 + num % 10\n        # num = num // 10\n        # num = num * 10 + num % 10\n        # num = num // 10\n        # num = num * 10 + num % 10\n        # num = num // 10\n        # num = num * 10 + num % 10\n        # num = num // 10\n        # num = num * 10 +"
    },
    {
        "number": 671,
        "title": "Second Minimum Node In a Binary Tree",
        "difficulty": 0,
        "answer": "        def find_second_min(node):\n            if node is None:\n                return -1\n            if node.left is None and node.right is None:\n                return node.val\n            if node.left is None:\n                return find_second_min(node.right)\n            if node.right is None:\n                return find_second_min(node.left)\n            return min(find_second_min(node.left), find_second_min(node.right))"
    },
    {
        "number": 672,
        "title": "Bulb Switcher II",
        "difficulty": 1,
        "answer": "        if n == 1:\n            return 1\n        elif n == 2:\n            return 2\n        elif n == 3:\n            return 3\n        elif n == 4:\n            return 4\n        elif n == 5:\n            return 5\n        elif n == 6:\n            return 6\n        elif n == 7:\n            return 7\n        elif n == 8:\n            return 8\n        elif n == 9:\n            return 9\n        elif n == 10:\n            return 10\n        elif n == 11:\n            return 11\n        elif n == 12:\n            return 12\n        elif n == 13:\n            return 13\n        elif n == 14:\n            return 14\n        elif n == 15:\n            return 15\n        elif n == 16:\n            return 16\n        elif n == 17:\n            return 17\n        elif n == 18:\n            return 18\n        elif n == 19:\n            return 19\n        elif n == 20:\n            return 20\n        elif n == 21:\n            return 21"
    },
    {
        "number": 673,
        "title": "Number of Longest Increasing Subsequence",
        "difficulty": 1,
        "answer": "        n = len(nums)\n        if n == 0:\n            return 0\n        dp = [0] * (n + 1)\n        for i in range(1, n + 1):\n            dp[i] = 1\n        for i in range(1, n + 1):\n            for j in range(i - 1, -1, -1):\n                if nums[j] < nums[i]:\n                    dp[i] = max(dp[i], dp[j] + 1)\n        return dp[n]\n"
    },
    {
        "number": 674,
        "title": "Longest Continuous Increasing Subsequence",
        "difficulty": 0,
        "answer": "        n = len(nums)\n        if n == 0:\n            return 0\n        elif n == 1:\n            return 1\n        elif n == 2:\n            return 1\n        elif n == 3:\n            return 2\n        elif n == 4:\n            return 3\n        elif n == 5:\n            return 4\n        elif n == 6:\n            return 5\n        elif n == 7:\n            return 6\n        elif n == 8:\n            return 7\n        elif n == 9:\n            return 8\n        elif n == 10:\n            return 9\n        elif n == 11:\n            return 10\n        elif n == 12:\n            return 11\n        elif n == 13:\n            return 12\n        elif n == 14:\n            return 13\n        elif n == 15:\n            return 14\n        elif n == 16:\n            return 15\n        elif n == 17:\n            return 16\n        elif n == 18:\n            return 17\n        elif n == 19:\n            return 18\n        el"
    },
    {
        "number": 675,
        "title": "Cut Off Trees for Golf Event",
        "difficulty": 2,
        "answer": "        m, n = len(forest), len(forest[0])\n        dp = [[0] * n for _ in range(m)]\n        for i in range(m):\n            for j in range(n):\n                if forest[i][j] == 1:\n                    dp[i][j] = 1\n                elif forest[i][j] > 1:\n                    dp[i][j] = dp[i][j - 1] + 1\n        return min(dp)"
    },
    {
        "number": 676,
        "title": "Implement Magic Dictionary",
        "difficulty": 1,
        "answer": "        # Your MagicDictionary object will be instantiated and called as such:\n        # obj = MagicDictionary()\n        # obj.buildDict(dictionary)\n        # param_1 = obj.search(searchWord)\n        # print(param_1)\n        # def __init__(self):\n        # def buildDict(self, dictionary: List[str]) -> None:\n        # def search(self, searchWord: str) -> bool:\n        # def search(self, searchWord: str) -> bool:\n        # def search(self, searchWord: str) -> bool:\n        # def search(self, searchWord: str) -> bool:\n        # def search(self, searchWord: str) -> bool:\n        # def search(self, searchWord: str) -> bool:\n        # def search(self, searchWord: str) -> bool:\n        # def search(self, searchWord: str) -> bool:\n        # def search(self, searchWord: str) -> bool:\n        # def search(self, searchWord: str) -> bool:\n"
    },
    {
        "number": 677,
        "title": "Map Sum Pairs",
        "difficulty": 1,
        "answer": "        pass"
    },
    {
        "number": 678,
        "title": "Valid Parenthesis String",
        "difficulty": 1,
        "answer": "        stack = []\n        for c in s:\n            if c == '(':\n                stack.append(c)\n            elif c == ')':\n                if len(stack) == 0:\n                    return False\n                elif stack[-1] == '(':\n                    stack.pop()\n                else:\n                    return False\n            elif c == '*':\n                if len(stack) == 0:\n                    return False\n                elif stack[-1] == '(':\n                    stack.pop()\n                elif stack[-1] == ')':\n                    stack.pop()\n                else:\n                    return False\n            else:\n                return False\n        return len(stack) == 0"
    },
    {
        "number": 679,
        "title": "24 Game",
        "difficulty": 2,
        "answer": "        # https://leetcode.com/problems/evaluate-expression/discuss/105586/Java-C-solution-with-explanation\n        # https://leetcode.com/problems/evaluate-expression/discuss/105586/Java-C-solution-with-explanation\n        # https://leetcode.com/problems/evaluate-expression/discuss/105586/Java-C-solution-with-explanation\n        # https://leetcode.com/problems/evaluate-expression/discuss/105586/Java-C-solution-with-explanation\n        # https://leetcode.com/problems/evaluate-expression/discuss/105586/Java-C-solution-with-explanation\n        # https://leetcode.com/problems/evaluate-expression/discuss/105586/Java-C-solution-with-explanation\n        # https://leetcode.com/problems/evaluate-expression/discuss/105586/Java-C-"
    },
    {
        "number": 680,
        "title": "Valid Palindrome II",
        "difficulty": 0,
        "answer": "        if not s:\n            return True\n        if len(s) == 1:\n            return True\n        if len(s) == 2:\n            return s[0] == s[1]\n        if len(s) == 3:\n            return s[0] == s[1] and s[1] == s[2]\n        if len(s) == 4:\n            return s[0] == s[1] and s[1] == s[2] and s[2] == s[3]\n        if len(s) == 5:\n            return s[0] == s[1] and s[1] == s[2] and s[2] == s[3] and s[3] == s[4]\n        if len(s) == 6:\n            return s[0] == s[1] and s[1] == s[2] and s[2] == s[3] and s[3] == s[4] and s[4] == s[5]\n        if len(s) == 7:\n            return s[0]"
    },
    {
        "number": 682,
        "title": "Baseball Game",
        "difficulty": 0,
        "answer": "        scores = [0]\n        for op in operations:\n            if op == '+':\n                scores.append(scores[-2] + scores[-1])\n            elif op == 'D':\n                scores.append(2 * scores[-1])\n            elif op == 'C':\n                scores.pop()\n            else:\n                scores.append(int(op))\n        return sum(scores)\n"
    },
    {
        "number": 684,
        "title": "Redundant Connection",
        "difficulty": 1,
        "answer": "        n = len(edges)\n        edges.sort()\n        edges.append([n, n + 1])\n        edges.sort()\n        edges.reverse()\n        edges.append([n + 1, n])\n        edges.sort()\n        edges.reverse()\n        edges.append([n + 1, n + 2])\n        edges.sort()\n        edges.reverse()\n        edges.append([n + 2, n + 1])\n        edges.sort()\n        edges.reverse()\n        edges.append([n + 2, n + 3])\n        edges.sort()\n        edges.reverse()\n        edges.append([n + 3, n + 1])\n        edges.sort()\n        edges.reverse()\n        edges.append([n + 3, n + 2])\n        edges.sort()\n        edges.reverse()\n        edges.append([n + 3, n + 4])\n        edges.sort()\n        edges.reverse()\n        edges.append(["
    },
    {
        "number": 685,
        "title": "Redundant Connection II",
        "difficulty": 2,
        "answer": "        n = len(edges)\n        edges = sorted(edges, key=lambda x: x[0])\n        edges = sorted(edges, key=lambda x: x[1])\n        edges = sorted(edges, key=lambda x: x[0])\n        edges = sorted(edges, key=lambda x: x[1])\n        edges = sorted(edges, key=lambda x: x[0])\n        edges = sorted(edges, key=lambda x: x[1])\n        edges = sorted(edges, key=lambda x: x[0])\n        edges = sorted(edges, key=lambda x: x[1])\n        edges = sorted(edges, key=lambda x: x[0])\n        edges = sorted(edges, key=lambda x: x[1])\n        edges = sorted(edges, key=lambda x: x[0])\n        edges = sorted(edges, key=lambda x: x[1])\n        edges = sorted(edges, key=lambda x"
    },
    {
        "number": 686,
        "title": "Repeated String Match",
        "difficulty": 1,
        "answer": "        if len(a) == 0 or len(b) == 0:\n            return -1\n        if len(a) > len(b):\n            return -1\n        if a == b:\n            return 1\n        if a[0]!= b[0]:\n            return -1\n        dp = [[0] * (len(b) + 1) for _ in range(len(a) + 1)]\n        for i in range(1, len(a) + 1):\n            for j in range(1, len(b) + 1):\n                if a[i - 1] == b[j - 1]:\n                    dp[i][j] = dp[i - 1][j - 1] + 1\n                else:\n                    dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])\n        return dp[-1][-1]"
    },
    {
        "number": 687,
        "title": "Longest Univalue Path",
        "difficulty": 1,
        "answer": "        if not root:\n            return 0\n        return self.longestUnivaluePath(root.left) + self.longestUnivaluePath(root.right) + 1"
    },
    {
        "number": 688,
        "title": "Knight Probability in Chessboard",
        "difficulty": 1,
        "answer": "        # pylint: disable=invalid-name\n        # pylint: disable=too-many-locals\n        # pylint: disable=too-many-branches\n        # pylint: disable=too-many-statements\n        # pylint: disable=too-many-nested-blocks\n        # pylint: disable=too-many-boolean-expressions\n        # pylint: disable=too-many-arguments\n        # pylint: disable=too-many-locals\n        # pylint: disable=too-many-statements\n        # pylint: disable=too-many-nested-blocks\n        # pylint: disable=too-many-boolean-expressions\n        # pylint: disable=too-many-arguments\n        # pylint: disable=too-many-locals\n        # pylint: disable=too-many-statements\n        # pylint: disable=too-many-nested-blocks\n        # pylint: disable=too-many-boolean-"
    },
    {
        "number": 689,
        "title": "Maximum Sum of 3 Non-Overlapping Subarrays",
        "difficulty": 2,
        "answer": "        # https://leetcode.com/problems/max-sum-of-three-subarrays/discuss/105500/Python-O(n)-time-and-O(1)-space-solution\n        # https://leetcode.com/problems/max-sum-of-three-subarrays/discuss/105500/Python-O(n)-time-and-O(1)-space-solution\n        # https://leetcode.com/problems/max-sum-of-three-subarrays/discuss/105500/Python-O(n)-time-and-O(1)-space-solution\n        # https://leetcode.com/problems/max-sum-of-three-subarrays/discuss/105500/Python-O(n)-time-and-O(1)-space-solution\n        # https://leetcode.com/problems/max-sum-of-three-subarrays/discuss/105500/Python-O(n)-time-and-O(1)-"
    },
    {
        "number": 690,
        "title": "Employee Importance",
        "difficulty": 1,
        "answer": "        self.id = id\n        self.importance = importance\n        self.subordinates = subordinates"
    },
    {
        "number": 691,
        "title": "Stickers to Spell Word",
        "difficulty": 2,
        "answer": "        if len(stickers) == 0:\n            return 0\n        if len(stickers) == 1:\n            return 1\n        if len(stickers) == 2:\n            return 2\n        if len(stickers) == 3:\n            return 3\n        if len(stickers) == 4:\n            return 4\n        if len(stickers) == 5:\n            return 5\n        if len(stickers) == 6:\n            return 6\n        if len(stickers) == 7:\n            return 7\n        if len(stickers) == 8:\n            return 8\n        if len(stickers) == 9:\n            return 9\n        if len(stickers) == 10:\n            return 10\n        if len(stickers) == 11:\n            return 11\n        if len(stickers) == 12:\n            return 12\n        if len(stickers) == 13:\n            return 13\n        if len(stickers) == 14:\n            return 14\n        if len(stickers) == 15:\n            return 15\n        if len(stickers) == 16:"
    },
    {
        "number": 692,
        "title": "Top K Frequent Words",
        "difficulty": 1,
        "answer": "        # write your code here"
    },
    {
        "number": 693,
        "title": "Binary Number with Alternating Bits",
        "difficulty": 0,
        "answer": "        return self.hasAlternatingBitsHelper(n)"
    },
    {
        "number": 695,
        "title": "Max Area of Island",
        "difficulty": 1,
        "answer": "        m = len(grid)\n        n = len(grid[0])\n        # dp[i][j] is the max area of island in grid[i][j]\n        dp = [[0 for _ in range(n)] for _ in range(m)]\n        for i in range(m):\n            for j in range(n):\n                if grid[i][j] == 1:\n                    self.dfs(grid, i, j, m, n, dp)\n        return max(dp)"
    },
    {
        "number": 696,
        "title": "Count Binary Substrings",
        "difficulty": 0,
        "answer": "        n = len(s)\n        if n == 0:\n            return 0\n        if n == 1:\n            return 1\n        dp = [0] * (n + 1)\n        dp[0] = 1\n        dp[1] = 1\n        for i in range(2, n + 1):\n            dp[i] = dp[i - 1]\n            if s[i - 1] == '1':\n                dp[i] += dp[i - 2]\n        return dp[n]"
    },
    {
        "number": 697,
        "title": "Degree of an Array",
        "difficulty": 0,
        "answer": "        # https://leetcode.com/problems/shortest-subarray-with-the-same-sum/discuss/105500/Python-O(n)-O(1)-O(n)-O(n)-O(n)-O(n)-O(n)-O(n)-O(n)-O(n)-O(n)-O(n)-O(n)-O(n)-O(n)-O(n)-O(n)-O(n)-O(n)-O(n)-O(n)-O(n)-O(n)-O(n)-O(n)-O(n)-O(n)-O(n)-O(n)-O(n)-O(n)-O(n)-O(n)-O(n)-O(n)-O(n)-O(n)-O(n)-O(n)-O(n)-O(n)-O(n)-O(n)-O(n)-O(n)-O(n)-O(n)-O(n)-O(n)-O(n)-O(n)-O(n)-O(n)-O("
    },
    {
        "number": 698,
        "title": "Partition to K Equal Sum Subsets",
        "difficulty": 1,
        "answer": "        if k > len(nums):\n            return False\n        if k == 1:\n            return True\n        if k == 2:\n            return sum(nums) % 2 == 0\n        if k == 3:\n            return sum(nums) % 3 == 0\n        if k == 4:\n            return sum(nums) % 4 == 0\n        if k == 5:\n            return sum(nums) % 5 == 0\n        if k == 6:\n            return sum(nums) % 6 == 0\n        if k == 7:\n            return sum(nums) % 7 == 0\n        if k == 8:\n            return sum(nums) % 8 == 0\n        if k == 9:\n            return sum(nums) % 9 == 0\n        if k == 10:\n            return sum(nums) % 10 == 0\n        if k == 11:\n            return sum(nums) % 11 == 0\n        if k == 12:\n            return sum(nums) % 12 == 0\n        if k == 13:\n            return sum(nums) % 13"
    },
    {
        "number": 699,
        "title": "Falling Squares",
        "difficulty": 2,
        "answer": "        # https://leetcode.com/problems/falling-squares/discuss/105500/Java-O(n)-solution-with-explanation\n        # https://leetcode.com/problems/falling-squares/discuss/105501/Java-O(n)-solution-with-explanation\n        # https://leetcode.com/problems/falling-squares/discuss/105502/Java-O(n)-solution-with-explanation\n        # https://leetcode.com/problems/falling-squares/discuss/105503/Java-O(n)-solution-with-explanation\n        # https://leetcode.com/problems/falling-squares/discuss/105504/Java-O(n)-solution-with-explanation\n        # https://leetcode.com/problems/falling-squares/discuss/105505/Java-O(n)-solution-with-explanation\n        # https://"
    },
    {
        "number": 700,
        "title": "Search in a Binary Search Tree",
        "difficulty": 0,
        "answer": "        if not root:\n            return None\n        if root.val == val:\n            return root\n        if root.val > val:\n            return self.searchBST(root.left, val)\n        return self.searchBST(root.right, val)"
    },
    {
        "number": 701,
        "title": "Insert into a Binary Search Tree",
        "difficulty": 1,
        "answer": "        if not root:\n            return TreeNode(val)\n        if val < root.val:\n            root.left = self.insertIntoBST(root.left, val)\n        elif val > root.val:\n            root.right = self.insertIntoBST(root.right, val)\n        else:\n            root.val = val\n        return root"
    },
    {
        "number": 703,
        "title": "Kth Largest Element in a Stream",
        "difficulty": 0,
        "answer": "        pass"
    },
    {
        "number": 704,
        "title": "Binary Search",
        "difficulty": 0,
        "answer": "        start = 0\n        end = len(nums) - 1\n        while start + 1 < end:\n            mid = start + (end - start) // 2\n            if nums[mid] == target:\n                return mid\n            elif nums[mid] < target:\n                start = mid\n            else:\n                end = mid\n        if nums[start] == target:\n            return start\n        elif nums[end] == target:\n            return end\n        return -1\n"
    },
    {
        "number": 705,
        "title": "Design HashSet",
        "difficulty": 0,
        "answer": "        if key in self.__set:\n            self.__set.remove(key)\n        else:\n            self.__set.add(key)\n        return key in self.__set"
    },
    {
        "number": 706,
        "title": "Design HashMap",
        "difficulty": 0,
        "answer": "        self.dictionary = {}\n        self.size = 0"
    },
    {
        "number": 707,
        "title": "Design Linked List",
        "difficulty": 1,
        "answer": "        pass\n    def printList(self) -> None:\n        \"\"\"\n        Design your implementation of the linked list. You can choose to use a singly or doubly linked list.\n        A node in a singly linked list should have two attributes: val and next. val is the value of the current node, and next is a pointer/reference to the next node.\n        If you want to use the doubly linked list, you will need one more attribute prev to indicate the previous node in the linked list. Assume all nodes in the linked list are 0-indexed.\n        Implement the MyLinkedList class:\n            MyLinkedList() Initializes the MyLinkedList object.\n            void printList() Print the linked list in a way that is easy to read.\n        Example 1:\n        Input\n        [\"MyLinkedList\", \"printList\"]\n        [[], [1], [3], [1, 2], [1], [1], [1]]\n        Output\n        1->2->3\n        Explanation\n        MyLinkedList myLinkedList = new MyLinkedList();\n        myLink"
    },
    {
        "number": 709,
        "title": "To Lower Case",
        "difficulty": 0,
        "answer": "        return ''.join(c.lower() if c.isupper() else c for c in s)\n"
    },
    {
        "number": 710,
        "title": "Random Pick with Blacklist",
        "difficulty": 2,
        "answer": "        blacklist = sorted(blacklist)\n        blacklist.append(n)\n        blacklist.append(n - 1)\n        blacklist.append(n - 2)\n        blacklist.append(n - 3)\n        blacklist.append(n - 4)\n        blacklist.append(n - 5)\n        blacklist.append(n - 6)\n        blacklist.append(n - 7)\n        blacklist.append(n - 8)\n        blacklist.append(n - 9)\n        blacklist.append(n - 10)\n        blacklist.append(n - 11)\n        blacklist.append(n - 12)\n        blacklist.append(n - 13)\n        blacklist.append(n - 14)\n        blacklist.append(n - 15)\n        blacklist.append(n - 16)\n        blacklist.append(n - 17)\n        blacklist.append(n - 18)\n        blacklist.append(n - 19)\n        blacklist.append(n - 20)\n        blacklist.append(n - 21)\n"
    },
    {
        "number": 712,
        "title": "Minimum ASCII Delete Sum for Two Strings",
        "difficulty": 1,
        "answer": "        if len(s1) > len(s2):\n            return self.minimumDeleteSum(s2, s1)"
    },
    {
        "number": 713,
        "title": "Subarray Product Less Than K",
        "difficulty": 1,
        "answer": "        # https://leetcode.com/problems/number-of-contiguous-subarrays-with-product-less-than-k/discuss/\n        # https://leetcode.com/problems/number-of-contiguous-subarrays-with-product-less-than-k/discuss/\n        # https://leetcode.com/problems/number-of-contiguous-subarrays-with-product-less-than-k/discuss/\n        # https://leetcode.com/problems/number-of-contiguous-subarrays-with-product-less-than-k/discuss/\n        # https://leetcode.com/problems/number-of-contiguous-subarrays-with-product-less-than-k/discuss/\n        # https://leetcode.com/problems/number-of-contiguous-subarrays-with-product-less-than-k/discuss/\n        # https://leetcode.com/problems/number-of-contiguous-subarr"
    },
    {
        "number": 714,
        "title": "Best Time to Buy and Sell Stock with Transaction Fee",
        "difficulty": 1,
        "answer": "        if not prices:\n            return 0\n        if not prices or len(prices) == 1:\n            return 0\n        if not fee:\n            return 0\n        if len(prices) == 2:\n            return max(prices[1] - prices[0], 0)\n        if len(prices) == 3:\n            return max(prices[1] - prices[0], max(prices[2] - prices[1], 0))\n        if len(prices) == 4:\n            return max(prices[1] - prices[0], max(prices[2] - prices[1], max(prices[3] - prices[2], 0)))\n        if len(prices) == 5:\n            return max(prices[1] - prices[0], max(prices[2] - prices[1], max(prices[3] - prices[2], max(prices[4] - prices[3], 0))))\n        if len(prices) == 6:\n            return max(prices[1] - prices[0], max(pr"
    },
    {
        "number": 715,
        "title": "Range Module",
        "difficulty": 2,
        "answer": "        pass"
    },
    {
        "number": 717,
        "title": "1-bit and 2-bit Characters",
        "difficulty": 0,
        "answer": "        # the last bit is always 0\n        if bits[-1] == 0:\n            return True\n        # the last bit is always 1\n        if bits[-1] == 1:\n            return False\n        # the last bit is always 10 or 11\n        if bits[-1] == 10 or bits[-1] == 11:\n            return True\n        # the last bit is always 0 or 1\n        if bits[-1] == 0 or bits[-1] == 1:\n            return False\n        # the last bit is always 10 or 11\n        if bits[-1] == 10 or bits[-1] == 11:\n            return True\n        # the last bit is always 0 or 1\n        if bits[-1] == 0 or bits[-1] == 1:\n            return False\n        # the last bit is always 10 or 11\n        if bits[-1] == 10 or bits[-1] == 11:\n            return True\n        # the last bit is always 0 or 1\n        if bits[-1] == 0 or bits[-1] == 1:\n            return"
    },
    {
        "number": 718,
        "title": "Maximum Length of Repeated Subarray",
        "difficulty": 1,
        "answer": "        if len(nums1) == 0 or len(nums2) == 0:\n            return 0\n        if nums1[0] == nums2[0]:\n            return 1\n        max_len = 0\n        for i in range(1, len(nums1)):\n            if nums1[i] == nums2[i]:\n                max_len = max(max_len, i + 1)\n        return max_len"
    },
    {
        "number": 719,
        "title": "Find K-th Smallest Pair Distance",
        "difficulty": 2,
        "answer": "        n = len(nums)\n        if n < 2:\n            return 0\n        if n == 2:\n            return abs(nums[0] - nums[1])\n        if n == 3:\n            return min(abs(nums[0] - nums[1]), abs(nums[1] - nums[2]), abs(nums[0] - nums[2]))\n        if n == 4:\n            return min(abs(nums[0] - nums[1]), abs(nums[1] - nums[2]), abs(nums[2] - nums[3]), abs(nums[0] - nums[3]))\n        if n == 5:\n            return min(abs(nums[0] - nums[1]), abs(nums[1] - nums[2]), abs(nums[2] - nums[3]), abs(nums[3] - nums[4]), abs(nums[0] - nums[4]))\n        if n == 6:\n            return min(abs"
    },
    {
        "number": 720,
        "title": "Longest Word in Dictionary",
        "difficulty": 1,
        "answer": "        # Solution 1:\n        # def longestWord(self, words: List[str]) -> str:\n        #     if not words:\n        #         return \"\"\n        #     max_len = 0\n        #     max_word = \"\"\n        #     for word in words:\n        #         if len(word) > max_len:\n        #             max_len = len(word)\n        #             max_word = word\n        #     return max_word\n        #\n        # Solution 2:\n        # def longestWord(self, words: List[str]) -> str:\n        #     if not words:\n        #         return \"\"\n        #     max_len = 0\n        #     max_word = \"\"\n        #     for word in words:\n        #         if len(word) > max_len:\n        #             max_len = len(word)\n        #             max_word = word\n        #     return max_word\n        #\n        # Solution 3:\n        # def longestWord(self, words: List[str]) -> str:\n        #     if"
    },
    {
        "number": 721,
        "title": "Accounts Merge",
        "difficulty": 1,
        "answer": "        # write your code here\n        accounts_dict = {}\n        for account in accounts:\n            account_name = account[0]\n            account_emails = account[1:]\n            accounts_dict[account_name] = account_emails\n        merged_accounts = []\n        for account_name in accounts_dict:\n            account_emails = accounts_dict[account_name]\n            account_emails.sort()\n            merged_accounts.append([account_name] + account_emails)\n        return merged_accounts\n"
    },
    {
        "number": 722,
        "title": "Remove Comments",
        "difficulty": 1,
        "answer": "        # https://leetcode.com/problems/remove-comments/discuss/1055/python-solution-with-explanation\n        # https://leetcode.com/problems/remove-comments/discuss/1055/python-solution-with-explanation\n        # https://leetcode.com/problems/remove-comments/discuss/1055/python-solution-with-explanation\n        # https://leetcode.com/problems/remove-comments/discuss/1055/python-solution-with-explanation\n        # https://leetcode.com/problems/remove-comments/discuss/1055/python-solution-with-explanation\n        # https://leetcode.com/problems/remove-comments/discuss/1055/python-solution-with-explanation\n        # https://leetcode.com/problems/remove-comments/discuss/1055/python-solution-with-explanation\n        # https://leetcode.com/problems"
    },
    {
        "number": 724,
        "title": "Find Pivot Index",
        "difficulty": 0,
        "answer": "        left_sum = 0\n        right_sum = 0\n        for i in range(1, len(nums)):\n            left_sum += nums[i - 1]\n            right_sum += nums[i]\n            if left_sum == right_sum:\n                return i\n        return -1"
    },
    {
        "number": 725,
        "title": "Split Linked List in Parts",
        "difficulty": 1,
        "answer": "        if head is None:\n            return []\n        if k == 1:\n            return [head]\n        if k == 2:\n            return [head, head.next]\n        if k == 3:\n            return [head, head.next, head.next.next]\n        if k == 4:\n            return [head, head.next, head.next.next, head.next.next.next]\n        if k == 5:\n            return [head, head.next, head.next.next, head.next.next.next, head.next.next.next.next]\n        if k == 6:\n            return [head, head.next, head.next.next, head.next.next.next, head.next.next.next.next, head.next.next.next.next.next]\n        if k == 7:\n            return [head, head.next, head.next.next, head.next.next.next, head.next.next.next.next, head.next.next.next.next.next,\n                    head.next.next.next"
    },
    {
        "number": 726,
        "title": "Number of Atoms",
        "difficulty": 2,
        "answer": "        # TODO: Implement this function\n        pass"
    },
    {
        "number": 728,
        "title": "Self Dividing Numbers",
        "difficulty": 0,
        "answer": "        result = []\n        for i in range(left, right + 1):\n            if self.isSelfDividing(i):\n                result.append(i)\n        return result"
    },
    {
        "number": 729,
        "title": "My Calendar I",
        "difficulty": 1,
        "answer": "        pass"
    },
    {
        "number": 730,
        "title": "Count Different Palindromic Subsequences",
        "difficulty": 2,
        "answer": "        if not s:\n            return 0\n        n = len(s)\n        dp = [0] * (n + 1)\n        for i in range(1, n + 1):\n            dp[i] = dp[i - 1]\n            if s[i - 1] == s[i]:\n                dp[i] += dp[i - 2]\n        return dp[n] % (109 + 7)\n"
    },
    {
        "number": 731,
        "title": "My Calendar II",
        "difficulty": 1,
        "answer": "        pass"
    },
    {
        "number": 732,
        "title": "My Calendar III",
        "difficulty": 2,
        "answer": "        self.booking = {}\n        self.booking[0] = 0\n        self.booking[1] = 0\n        self.booking[2] = 0\n        self.booking[3] = 0\n        self.booking[4] = 0\n        self.booking[5] = 0\n        self.booking[6] = 0\n        self.booking[7] = 0\n        self.booking[8] = 0\n        self.booking[9] = 0\n        self.booking[10] = 0\n        self.booking[11] = 0\n        self.booking[12] = 0\n        self.booking[13] = 0\n        self.booking[14] = 0\n        self.booking[15] = 0\n        self.booking[16] = 0\n        self.booking[17] = 0\n        self.booking[18] = 0\n        self.booking[19] = 0\n        self.booking[20] = 0\n        self.booking[21] = 0\n"
    },
    {
        "number": 733,
        "title": "Flood Fill",
        "difficulty": 0,
        "answer": "        if sr < 0 or sc < 0 or sr >= len(image) or sc >= len(image[0]) or image[sr][sc]!= color:\n            return image\n        image[sr][sc] = color\n        for i in range(sr, len(image)):\n            for j in range(sc, len(image[0])):\n                if image[i][j] == color:\n                    self.floodFill(image, i, j, color)\n        return image"
    },
    {
        "number": 735,
        "title": "Asteroid Collision",
        "difficulty": 1,
        "answer": "        # TODO: implement your solution here\n        return []"
    },
    {
        "number": 736,
        "title": "Parse Lisp Expression",
        "difficulty": 2,
        "answer": "        stack = []\n        for char in expression:\n            if char == '(':\n                stack.append(char)\n            elif char == ')':\n                while stack[-1]!= '(':\n                    stack.pop()\n                stack.pop()\n            elif char.isalpha():\n                stack.append(char)\n            elif char.isdigit():\n                stack.append(char)\n            elif char =='':\n                while stack[-1]!= '(':\n                    stack.pop()\n                stack.pop()\n            elif char == 'x':\n                stack.append(char)\n            elif char == 'y':\n                stack.append(char)\n            elif char == '+':\n                stack.append(char)\n            elif char == '-':\n                stack.append(char)\n            elif char == '*':\n                stack.append(char)\n            elif char == '/':\n                stack.append(char)\n            elif char == '=':\n                stack.append(char)\n            elif char == '"
    },
    {
        "number": 738,
        "title": "Monotone Increasing Digits",
        "difficulty": 1,
        "answer": "        if n < 10:\n            return n\n        if n < 100:\n            return n\n        if n < 1000:\n            return n\n        if n < 10000:\n            return n\n        if n < 100000:\n            return n\n        if n < 1000000:\n            return n\n        if n < 10000000:\n            return n\n        if n < 100000000:\n            return n\n        if n < 1000000000:\n            return n\n        if n < 10000000000:\n            return n\n        if n < 100000000000:\n            return n\n        if n < 1000000000000:\n            return n\n        if n < 10000000000000:\n            return n\n        if n < 100000000000000:\n            return n\n        if n < 1000000000000000:\n            return n\n        if n < 10000000000000000:\n            return n\n        if n < 100000000000000000:\n            return n\n        if n < 1000000000000000000:\n            return n\n        return n"
    },
    {
        "number": 739,
        "title": "Daily Temperatures",
        "difficulty": 1,
        "answer": "        n = len(temperatures)\n        dp = [0] * n\n        dp[0] = 1\n        for i in range(1, n):\n            dp[i] = dp[i - 1]\n            if temperatures[i] > temperatures[i - 1]:\n                dp[i] += 1\n        return dp"
    },
    {
        "number": 740,
        "title": "Delete and Earn",
        "difficulty": 1,
        "answer": "        n = len(nums)\n        if n == 0:\n            return 0\n        dp = [0] * (n + 1)\n        dp[0] = 1\n        for i in range(1, n + 1):\n            dp[i] = dp[i - 1]\n            if nums[i - 1] == i:\n                dp[i] += dp[i - 1]\n            if nums[i - 1] - 1 == i:\n                dp[i] += dp[i - 1]\n            if nums[i - 1] + 1 == i:\n                dp[i] += dp[i - 1]\n        return dp[n]\n"
    },
    {
        "number": 741,
        "title": "Cherry Pickup",
        "difficulty": 2,
        "answer": "        n = len(grid)\n        m = len(grid[0])\n        dp = [[0] * m for _ in range(n)]\n        dp[0][0] = 1\n        dp[0][m - 1] = 1\n        for i in range(1, n):\n            for j in range(1, m - 1):\n                if grid[i][j] == 1:\n                    dp[i][j] = 1\n                elif grid[i][j] == -1:\n                    dp[i][j] = 0\n                elif grid[i][j] == 0:\n                    dp[i][j] = max(dp[i - 1][j], dp[i][j - 1], dp[i - 1][j - 1])\n        return dp[-1][-1]\n"
    },
    {
        "number": 743,
        "title": "Network Delay Time",
        "difficulty": 1,
        "answer": "        # Edge-based solution\n        # Edge-based solution\n        # Edge-based solution\n        # Edge-based solution\n        # Edge-based solution\n        # Edge-based solution\n        # Edge-based solution\n        # Edge-based solution\n        # Edge-based solution\n        # Edge-based solution\n        # Edge-based solution\n        # Edge-based solution\n        # Edge-based solution\n        # Edge-based solution\n        # Edge-based solution\n        # Edge-based solution\n        # Edge-based solution\n        # Edge-based solution\n        # Edge-based solution\n        # Edge-based solution\n        # Edge-based solution\n        # Edge-based solution\n        # Edge-based solution\n        # Edge-based solution\n        # Edge-based solution\n        # Edge-based solution\n        # Edge-based solution\n        # Edge-based solution\n        # Edge-based solution\n        # Edge-based solution\n        # Edge-based solution\n        # Edge-based solution\n        # Edge-based solution\n        # Edge-based solution\n        # Edge-based solution\n        # Edge-based"
    },
    {
        "number": 744,
        "title": "Find Smallest Letter Greater Than Target",
        "difficulty": 0,
        "answer": "        if len(letters) == 1:\n            return letters[0]\n        if len(letters) == 2:\n            if letters[0] > letters[1]:\n                return letters[0]\n            else:\n                return letters[1]\n        if len(letters) == 3:\n            if letters[0] > letters[1]:\n                if letters[0] > letters[2]:\n                    return letters[0]\n                else:\n                    return letters[2]\n            else:\n                if letters[1] > letters[2]:\n                    return letters[1]\n                else:\n                    return letters[2]\n        if len(letters) == 4:\n            if letters[0] > letters[1]:\n                if letters[0] > letters[2]:\n                    if letters[0] > letters[3]:\n                        return letters[0]\n                    else:\n                        return letters[3]\n                else:\n                    if letters[1] > letters[2]:\n                        if letters[1] > letters[3]:\n                            return letters[1]\n                        else:\n                            return letters["
    },
    {
        "number": 745,
        "title": "Prefix and Suffix Search",
        "difficulty": 2,
        "answer": "        # Your WordFilter object will be instantiated and called as such:\n        # obj = WordFilter(words)\n        # param_1 = obj.f(pref,suff)\n        # return param_1\n        \n        # Your WordFilter object will be instantiated and called as such:\n        # obj = WordFilter(words)\n        # param_1 = obj.f(pref,suff)\n        # return param_1\n        \n        # Your WordFilter object will be instantiated and called as such:\n        # obj = WordFilter(words)\n        # param_1 = obj.f(pref,suff)\n        # return param_1\n        \n        # Your WordFilter object will be instantiated and called as such:\n        # obj = WordFilter(words)\n        # param_1 = obj.f(pref,suff)\n        # return param_1\n        \n        # Your WordFilter object will be instantiated and called as such:\n        # obj = WordFilter(words)\n        # param_1 = obj.f(pref,suff)\n        # return param"
    },
    {
        "number": 746,
        "title": "Min Cost Climbing Stairs",
        "difficulty": 0,
        "answer": "        if not cost:\n            return 0\n        if len(cost) == 1:\n            return cost[0]\n        if len(cost) == 2:\n            return min(cost[0], cost[1])\n        if len(cost) == 3:\n            return min(cost[0], min(cost[1], cost[2]))\n        if len(cost) == 4:\n            return min(cost[0], min(cost[1], min(cost[2], cost[3])))\n        if len(cost) == 5:\n            return min(cost[0], min(cost[1], min(cost[2], min(cost[3], cost[4]))))\n        if len(cost) == 6:\n            return min(cost[0], min(cost[1], min(cost[2], min(cost[3], min(cost[4], cost[5]))))\n        if len(cost) == 7:\n            return min(cost[0], min(cost[1], min(cost[2], min(cost[3], min(cost[4], min("
    },
    {
        "number": 747,
        "title": "Largest Number At Least Twice of Others",
        "difficulty": 0,
        "answer": "        if len(nums) == 1:\n            return 0\n        if len(nums) == 2:\n            return 1 if nums[0] > nums[1] else -1\n        if len(nums) == 3:\n            return 1 if nums[0] > nums[1] and nums[0] > nums[2] else -1\n        if len(nums) == 4:\n            return 1 if nums[0] > nums[1] and nums[0] > nums[2] and nums[0] > nums[3] else -1\n        if len(nums) == 5:\n            return 1 if nums[0] > nums[1] and nums[0] > nums[2] and nums[0] > nums[3] and nums[0] > nums[4] else -1\n        if len(nums) == 6:\n            return 1 if nums[0] > nums[1] and nums[0] > nums[2] and nums[0"
    },
    {
        "number": 748,
        "title": "Shortest Completing Word",
        "difficulty": 0,
        "answer": "        # write your code here"
    },
    {
        "number": 749,
        "title": "Contain Virus",
        "difficulty": 2,
        "answer": "        m, n = len(isInfected), len(isInfected[0])\n        if m == 0 or n == 0:\n            return 0\n        dp = [[0] * (n + 1) for _ in range(m + 1)]\n        dp[0][0] = 1\n        for i in range(1, m + 1):\n            for j in range(1, n + 1):\n                if isInfected[i - 1][j - 1] == 1:\n                    dp[i][j] = 1\n                elif isInfected[i - 1][j] == 1:\n                    dp[i][j] = dp[i - 1][j]\n                elif isInfected[i][j - 1] == 1:\n                    dp[i][j] = dp[i][j - 1]\n                elif isInfected[i - 1][j - 1] == 0:\n                    dp[i][j] = max(dp[i - 1][j], dp[i][j - 1], dp[i - 1]["
    },
    {
        "number": 752,
        "title": "Open the Lock",
        "difficulty": 1,
        "answer": "        def dfs(state):\n            if state == target:\n                return 0\n            if state in deadends:\n                return -1\n            if state == \"0000\":\n                return 1\n            if state[0] == state[1]:\n                return 1\n            if state[0] == state[2]:\n                return 2\n            if state[0] == state[3]:\n                return 3\n            if state[0] == state[4]:\n                return 4\n            if state[0] == state[5]:\n                return 5\n            if state[0] == state[6]:\n                return 6\n            if state[0] == state[7]:\n                return 7\n            if state[0] == state[8]:\n                return 8\n            if state[0] == state[9]:\n                return 9\n            return -1\n        return dfs(target)\n"
    },
    {
        "number": 753,
        "title": "Cracking the Safe",
        "difficulty": 2,
        "answer": "        if n == 1:\n            return str(k)\n        if n == 2:\n            return str(k - 1) + str(k - 2)\n        if n == 3:\n            return str(k - 1) + str(k - 2) + str(k - 3)\n        if n == 4:\n            return str(k - 1) + str(k - 2) + str(k - 3) + str(k - 4)\n        if n == 5:\n            return str(k - 1) + str(k - 2) + str(k - 3) + str(k - 4) + str(k - 5)\n        if n == 6:\n            return str(k - 1) + str(k - 2) + str(k - 3) + str(k - 4) + str(k - 5) + str(k - 6)\n        if n == 7:\n            return str(k - 1) + str(k - 2) + str(k - 3) + str(k - 4) + str(k - 5) + str(k - 6) +"
    },
    {
        "number": 754,
        "title": "Reach a Number",
        "difficulty": 1,
        "answer": "        if target == 0:\n            return 0\n        if target == 1:\n            return 1\n        if target == 2:\n            return 2\n        if target == 3:\n            return 3\n        if target == 4:\n            return 4\n        if target == 5:\n            return 5\n        if target == 6:\n            return 6\n        if target == 7:\n            return 7\n        if target == 8:\n            return 8\n        if target == 9:\n            return 9\n        if target == 10:\n            return 10\n        if target == 11:\n            return 11\n        if target == 12:\n            return 12\n        if target == 13:\n            return 13\n        if target == 14:\n            return 14\n        if target == 15:\n            return 15\n        if target == 16:\n            return 16\n        if target == 17:\n            return 17\n        if target == 18:\n            return 18\n        if target == 19:\n            return 19\n        if target == 20:\n            return 20\n        if target == 21:\n            return 21\n        if target == 22:\n            "
    },
    {
        "number": 756,
        "title": "Pyramid Transition Matrix",
        "difficulty": 1,
        "answer": "        if len(bottom) == 1:\n            return True\n        if len(bottom) == 2:\n            return bottom[0] == bottom[1]\n        if len(bottom) == 3:\n            return bottom[0] == bottom[1] and bottom[1] == bottom[2]\n        if len(bottom) == 4:\n            return bottom[0] == bottom[1] and bottom[1] == bottom[2] and bottom[2] == bottom[3]\n        if len(bottom) == 5:\n            return bottom[0] == bottom[1] and bottom[1] == bottom[2] and bottom[2] == bottom[3] and bottom[3] == bottom[4]\n        if len(bottom) == 6:\n            return bottom[0] == bottom[1] and bottom[1] == bottom[2] and bottom[2] == bottom[3] and bottom[3] == bottom[4] and bottom[4] == bottom[5]\n        if len(bottom) == 7:\n            return bottom[0] == bottom[1] and bottom[1]"
    },
    {
        "number": 757,
        "title": "Set Intersection Size At Least Two",
        "difficulty": 2,
        "answer": "        n = len(intervals)\n        if n == 0:\n            return 0\n        if n == 1:\n            return len(intervals[0])\n        if n == 2:\n            return min(len(intervals[0]), len(intervals[1]))\n        if n == 3:\n            return min(len(intervals[0]), len(intervals[1]), len(intervals[2]))\n        if n == 4:\n            return min(len(intervals[0]), len(intervals[1]), len(intervals[2]), len(intervals[3]))\n        if n == 5:\n            return min(len(intervals[0]), len(intervals[1]), len(intervals[2]), len(intervals[3]), len(intervals[4]))\n        if n == 6:\n            return min(len(intervals[0]), len(intervals[1]), len(intervals[2]), len(intervals[3]), len(intervals[4]), len(intervals[5]))\n        if n == 7:\n            "
    },
    {
        "number": 761,
        "title": "Special Binary String",
        "difficulty": 2,
        "answer": "        if not s:\n            return s\n        if len(s) == 1:\n            return s\n        if len(s) == 2:\n            return s\n        if len(s) == 3:\n            return s\n        if len(s) == 4:\n            return s\n        if len(s) == 5:\n            return s\n        if len(s) == 6:\n            return s\n        if len(s) == 7:\n            return s\n        if len(s) == 8:\n            return s\n        if len(s) == 9:\n            return s\n        if len(s) == 10:\n            return s\n        if len(s) == 11:\n            return s\n        if len(s) == 12:\n            return s\n        if len(s) == 13:\n            return s\n        if len(s) == 14:\n            return s\n        if len(s) == 15:\n            return s\n        if len(s) == 16:\n            return s\n        if len(s) == 17:\n            return s\n        if"
    },
    {
        "number": 762,
        "title": "Prime Number of Set Bits in Binary Representation",
        "difficulty": 0,
        "answer": "        # https://leetcode.com/problems/count-prime-set-bits/discuss/\n        # https://leetcode.com/problems/count-prime-set-bits/discuss/\n        # https://leetcode.com/problems/count-prime-set-bits/discuss/\n        # https://leetcode.com/problems/count-prime-set-bits/discuss/\n        # https://leetcode.com/problems/count-prime-set-bits/discuss/\n        # https://leetcode.com/problems/count-prime-set-bits/discuss/\n        # https://leetcode.com/problems/count-prime-set-bits/discuss/\n        # https://leetcode.com/problems/count-prime-set-bits/discuss/\n        # https://leetcode.com/problems/count-prime-set-bits/discuss/\n        # https://leetcode.com/problems/count-prime-set-bits/discuss/\n"
    },
    {
        "number": 763,
        "title": "Partition Labels",
        "difficulty": 1,
        "answer": "        n = len(s)\n        if n == 0:\n            return []\n        if n == 1:\n            return [1]\n        if n == 2:\n            return [1, 1]\n        if n == 3:\n            return [1, 1, 1]\n        if n == 4:\n            return [1, 1, 1, 1]\n        if n == 5:\n            return [1, 1, 1, 1, 1]\n        if n == 6:\n            return [1, 1, 1, 1, 1, 1]\n        if n == 7:\n            return [1, 1, 1, 1, 1, 1, 1]\n        if n == 8:\n            return [1, 1, 1, 1, 1, 1, 1, 1]\n        if n == 9:\n            return [1, 1, 1, 1, 1, 1, 1, 1, 1]\n        if n == 10:\n            return [1, 1, 1, 1, 1, 1, 1, 1, 1, 1]\n        if n == 11:\n            return [1"
    },
    {
        "number": 764,
        "title": "Largest Plus Sign",
        "difficulty": 1,
        "answer": "        # https://leetcode.com/problems/order-of-largest-plus-sign/discuss/\n        # https://leetcode.com/problems/order-of-largest-plus-sign/discuss/\n        # https://leetcode.com/problems/order-of-largest-plus-sign/discuss/\n        # https://leetcode.com/problems/order-of-largest-plus-sign/discuss/\n        # https://leetcode.com/problems/order-of-largest-plus-sign/discuss/\n        # https://leetcode.com/problems/order-of-largest-plus-sign/discuss/\n        # https://leetcode.com/problems/order-of-largest-plus-sign/discuss/\n        # https://leetcode.com/problems/order-of-largest-plus-sign/discuss/\n        # https://leetcode.com/problems/order-of-largest-plus-sign/discuss/\n        # https://leetcode"
    },
    {
        "number": 765,
        "title": "Couples Holding Hands",
        "difficulty": 2,
        "answer": "        n = len(row)\n        couples = [0] * (2 * n)\n        for i in range(n):\n            couples[i] = i\n            couples[i + n] = i + n\n        return self.minSwaps(couples, row)"
    },
    {
        "number": 766,
        "title": "Toeplitz Matrix",
        "difficulty": 0,
        "answer": "        m = len(matrix)\n        n = len(matrix[0])\n        for i in range(m):\n            for j in range(n):\n                if matrix[i][j]!= matrix[i][j - 1]:\n                    return False\n        return True"
    },
    {
        "number": 767,
        "title": "Reorganize String",
        "difficulty": 1,
        "answer": "        # Solution 1\n        # https://leetcode.com/problems/reorganize-string/discuss/1279/Java-O(1)-space-and-O(n)-time-solution-with-explanation\n        # https://leetcode.com/problems/reorganize-string/discuss/1280/Java-O(1)-space-and-O(n)-time-solution-with-explanation\n        # https://leetcode.com/problems/reorganize-string/discuss/1281/Java-O(1)-space-and-O(n)-time-solution-with-explanation\n        # https://leetcode.com/problems/reorganize-string/discuss/1282/Java-O(1)-space-and-O(n)-time-solution-with-explanation\n        # https://leetcode.com/problems/reorganize-string/discuss/1283/Java-O(1)-space-and-O(n)-time-solution-with"
    },
    {
        "number": 768,
        "title": "Max Chunks To Make Sorted II",
        "difficulty": 2,
        "answer": "        if not arr:\n            return 0\n        if len(arr) == 1:\n            return 1\n        if len(arr) == 2:\n            return 1 if arr[0] < arr[1] else 2\n        if len(arr) == 3:\n            return 1 if arr[0] < arr[1] else 2 if arr[1] < arr[2] else 3\n        if len(arr) == 4:\n            return 1 if arr[0] < arr[1] else 2 if arr[1] < arr[2] else 3 if arr[2] < arr[3] else 4\n        if len(arr) == 5:\n            return 1 if arr[0] < arr[1] else 2 if arr[1] < arr[2] else 3 if arr[2] < arr[3] else 4 if arr[3] < arr[4] else 5\n        if len(arr) == 6:\n            return 1 if arr[0] < arr[1] else 2 if arr[1] < arr[2] else 3 if arr[2] < arr[3] else 4 if"
    },
    {
        "number": 769,
        "title": "Max Chunks To Make Sorted",
        "difficulty": 1,
        "answer": "        if len(arr) == 1:\n            return 1\n        if len(arr) == 2:\n            return 2\n        if len(arr) == 3:\n            return 3\n        if len(arr) == 4:\n            return 4\n        if len(arr) == 5:\n            return 5\n        if len(arr) == 6:\n            return 6\n        if len(arr) == 7:\n            return 7\n        if len(arr) == 8:\n            return 8\n        if len(arr) == 9:\n            return 9\n        if len(arr) == 10:\n            return 10\n        if len(arr) == 11:\n            return 11\n        if len(arr) == 12:\n            return 12\n        if len(arr) == 13:\n            return 13\n        if len(arr) == 14:\n            return 14\n        if len(arr) == 15:\n            return 15\n        if len(arr) == 16:\n            return 16\n        if len(arr) == 17:\n            return 17\n        if len(arr) == 18:\n            return"
    },
    {
        "number": 770,
        "title": "Basic Calculator IV",
        "difficulty": 2,
        "answer": "        # print(expression)\n        # print(evalvars)\n        # print(evalints)\n        # print(type(expression))\n        # print(type(evalvars))\n        # print(type(evalints))\n        # print(type(evalints[0]))\n        # print(type(evalints[1]))\n        # print(type(evalints[2]))\n        # print(type(evalints[3]))\n        # print(type(evalints[4]))\n        # print(type(evalints[5]))\n        # print(type(evalints[6]))\n        # print(type(evalints[7]))\n        # print(type(evalints[8]))\n        # print(type(evalints[9]))\n        # print(type(evalints[10]))\n        # print(type(evalints[11]))\n        # print(type(evalints[12]))\n        # print(type(evalints[13]))\n        # print(type(evalints[14]))\n        "
    },
    {
        "number": 771,
        "title": "Jewels and Stones",
        "difficulty": 0,
        "answer": "        return sum(1 for stone in stones if jewel in stone)\n"
    },
    {
        "number": 773,
        "title": "Sliding Puzzle",
        "difficulty": 2,
        "answer": "        # https://leetcode.com/problems/sliding-puzzle/discuss/105586/Java-C-solution-with-explanation\n        # https://leetcode.com/problems/sliding-puzzle/discuss/105586/Java-C-solution-with-explanation\n        # https://leetcode.com/problems/sliding-puzzle/discuss/105586/Java-C-solution-with-explanation\n        # https://leetcode.com/problems/sliding-puzzle/discuss/105586/Java-C-solution-with-explanation\n        # https://leetcode.com/problems/sliding-puzzle/discuss/105586/Java-C-solution-with-explanation\n        # https://leetcode.com/problems/sliding-puzzle/discuss/105586/Java-C-solution-with-explanation\n        # https://leetcode.com/problems/sliding-"
    },
    {
        "number": 775,
        "title": "Global and Local Inversions",
        "difficulty": 1,
        "answer": "        n = len(nums)\n        if n < 2:\n            return True\n        if n == 2:\n            return nums[0] > nums[1]\n        if n == 3:\n            return nums[0] > nums[1] and nums[1] > nums[2]\n        if n == 4:\n            return nums[0] > nums[1] and nums[1] > nums[2] and nums[2] > nums[3]\n        if n == 5:\n            return nums[0] > nums[1] and nums[1] > nums[2] and nums[2] > nums[3] and nums[3] > nums[4]\n        if n == 6:\n            return nums[0] > nums[1] and nums[1] > nums[2] and nums[2] > nums[3] and nums[3] > nums[4] and nums[4] > nums[5]\n        if n == 7"
    },
    {
        "number": 777,
        "title": "Swap Adjacent in LR String",
        "difficulty": 1,
        "answer": "        if start == end:\n            return True\n        if len(start)!= len(end):\n            return False\n        if start == end[::-1]:\n            return True\n        if start[::-1] == end:\n            return True\n        if start[::-1] == end[::-1]:\n            return True\n        if start[::-1] == end[::-1][::-1]:\n            return True\n        if start[::-1] == end[::-1][::-1][::-1]:\n            return True\n        if start[::-1] == end[::-1][::-1][::-1][::-1]:\n            return True\n        if start[::-1] == end[::-1][::-1][::-1][::-1][::-1]:\n            return True\n        if start[::-1] == end[::-1][::-1][::-1][::-1][::-1][::-1]:\n            return True\n        if start[::-1] == end[::"
    },
    {
        "number": 778,
        "title": "Swim in Rising Water",
        "difficulty": 2,
        "answer": "        n = len(grid)\n        if n == 0:\n            return 0\n        if n == 1:\n            return grid[0][0]\n        if n == 2:\n            return min(grid[0][0], grid[1][0])\n        if n == 3:\n            return min(grid[0][0], grid[1][0], grid[2][0])\n        if n == 4:\n            return min(grid[0][0], grid[1][0], grid[2][0], grid[3][0])\n        if n == 5:\n            return min(grid[0][0], grid[1][0], grid[2][0], grid[3][0], grid[4][0])\n        if n == 6:\n            return min(grid[0][0], grid[1][0], grid[2][0], grid[3][0], grid[4][0], grid[5][0])\n        if n == 7:\n            return min(grid[0][0], grid[1][0], grid[2][0], grid[3][0],"
    },
    {
        "number": 779,
        "title": "K-th Symbol in Grammar",
        "difficulty": 1,
        "answer": "        # Write your code here\n        if n == 1:\n            return 0\n        if n == 2:\n            return 1\n        if n == 3:\n            return 2\n        if n == 4:\n            return 3\n        if n == 5:\n            return 4\n        if n == 6:\n            return 5\n        if n == 7:\n            return 6\n        if n == 8:\n            return 7\n        if n == 9:\n            return 8\n        if n == 10:\n            return 9\n        if n == 11:\n            return 10\n        if n == 12:\n            return 11\n        if n == 13:\n            return 12\n        if n == 14:\n            return 13\n        if n == 15:\n            return 14\n        if n == 16:\n            return 15\n        if n == 17:\n            return 16\n        if n == 18:\n            return 17\n        if n == 19:\n            return 18\n        if n == 20:\n            return 19\n        if n == 21:\n            return 20\n        if n == 22:\n            return 21\n        "
    },
    {
        "number": 780,
        "title": "Reaching Points",
        "difficulty": 2,
        "answer": "        # dp[i][j] = dp[i - 1][j] or dp[i - 1][j - 1] or dp[i - 1][j + 1]\n        dp = [[0] * (tx - sx + 1) for _ in range(ty - sy + 1)]\n        for i in range(sx, tx + 1):\n            for j in range(sy, ty + 1):\n                dp[j - sy][i - sx] = 1 if i == j else 0\n        for i in range(sx, tx + 1):\n            for j in range(sy, ty + 1):\n                if i > 0 and j > 0:\n                    dp[j - sy][i - sx] = dp[j - sy][i - sx - 1] or dp[j - sy - 1][i - sx] or dp[j - sy + 1][i - sx]\n        return dp[ty - sy][tx - sx]"
    },
    {
        "number": 781,
        "title": "Rabbits in Forest",
        "difficulty": 1,
        "answer": "        n = len(answers)\n        if n == 1:\n            return 1\n        if n == 2:\n            return min(answers)\n        if n == 3:\n            return min(answers) + min(answers[1:])\n        if n == 4:\n            return min(answers) + min(answers[1:]) + min(answers[2:])\n        if n == 5:\n            return min(answers) + min(answers[1:]) + min(answers[2:]) + min(answers[3:])\n        if n == 6:\n            return min(answers) + min(answers[1:]) + min(answers[2:]) + min(answers[3:]) + min(answers[4:])\n        if n == 7:\n            return min(answers) + min(answers[1:]) + min(answers[2:]) + min(answers[3:]) + min(ans"
    },
    {
        "number": 782,
        "title": "Transform to Chessboard",
        "difficulty": 2,
        "answer": "        n = len(board)\n        if n == 0:\n            return 0\n        if n == 1:\n            return 1\n        if n == 2:\n            return 1\n        if n == 3:\n            return 2\n        if n == 4:\n            return 2\n        if n == 5:\n            return 3\n        if n == 6:\n            return 3\n        if n == 7:\n            return 4\n        if n == 8:\n            return 4\n        if n == 9:\n            return 5\n        if n == 10:\n            return 5\n        if n == 11:\n            return 6\n        if n == 12:\n            return 6\n        if n == 13:\n            return 7\n        if n == 14:\n            return 7\n        if n == 15:\n            return 8\n        if n == 16:\n            return 8\n        if n == 17:\n            return 9\n        if n == 18:\n            return 9\n        if n == 19:\n            return 10\n        if n == 20:\n            return 10\n        if n == 21:\n            return 11\n"
    },
    {
        "number": 783,
        "title": "Minimum Distance Between BST Nodes",
        "difficulty": 0,
        "answer": "        if not root:\n            return 0\n        return self.minDiffInBST(root.left) + self.minDiffInBST(root.right)"
    },
    {
        "number": 784,
        "title": "Letter Case Permutation",
        "difficulty": 1,
        "answer": "        res = []\n        if not s:\n            return res\n        if len(s) == 1:\n            return [s]\n        for i in range(len(s)):\n            if s[i].isalpha():\n                res += self.letterCasePermutation(s[:i] + s[i].upper() + s[i + 1:])\n            else:\n                res += self.letterCasePermutation(s[:i] + s[i].lower() + s[i + 1:])\n        return res"
    },
    {
        "number": 785,
        "title": "Is Graph Bipartite?",
        "difficulty": 1,
        "answer": "        n = len(graph)\n        if n == 0:\n            return True\n        if n == 1:\n            return True\n        if n == 2:\n            return True\n        if n == 3:\n            return True\n        if n == 4:\n            return True\n        if n == 5:\n            return True\n        if n == 6:\n            return True\n        if n == 7:\n            return True\n        if n == 8:\n            return True\n        if n == 9:\n            return True\n        if n == 10:\n            return True\n        if n == 11:\n            return True\n        if n == 12:\n            return True\n        if n == 13:\n            return True\n        if n == 14:\n            return True\n        if n == 15:\n            return True\n        if n == 16:\n            return True\n        if n == 17:\n            return True\n        if n == 18:\n            return True\n        if n == 19:\n            return True\n        if n == 20:\n            return True\n        if n == 21:\n            return True\n"
    },
    {
        "number": 786,
        "title": "K-th Smallest Prime Fraction",
        "difficulty": 1,
        "answer": "        # https://leetcode.com/problems/kth-smallest-prime-fraction/discuss/\n        # https://leetcode.com/problems/kth-smallest-prime-fraction/discuss/\n        # https://leetcode.com/problems/kth-smallest-prime-fraction/discuss/\n        # https://leetcode.com/problems/kth-smallest-prime-fraction/discuss/\n        # https://leetcode.com/problems/kth-smallest-prime-fraction/discuss/\n        # https://leetcode.com/problems/kth-smallest-prime-fraction/discuss/\n        # https://leetcode.com/problems/kth-smallest-prime-fraction/discuss/\n        # https://leetcode.com/problems/kth-smallest-prime-fraction/discuss/\n        # https://leetcode.com/problems/kth-smallest-prime-fraction/discuss"
    },
    {
        "number": 787,
        "title": "Cheapest Flights Within K Stops",
        "difficulty": 1,
        "answer": "        dp = [[0 for _ in range(n)] for _ in range(n)]\n        for i in range(n):\n            for j in range(n):\n                if i == j:\n                    dp[i][j] = 0\n                else:\n                    dp[i][j] = dp[i][j - 1] + flights[i][j - 1]\n        return dp[src][dst]"
    },
    {
        "number": 788,
        "title": "Rotated Digits",
        "difficulty": 1,
        "answer": "        if n < 1:\n            return 0\n        if n == 1:\n            return 1\n        if n == 2:\n            return 1\n        if n == 3:\n            return 2\n        if n == 4:\n            return 2\n        if n == 5:\n            return 2\n        if n == 6:\n            return 3\n        if n == 7:\n            return 3\n        if n == 8:\n            return 3\n        if n == 9:\n            return 3\n        if n == 10:\n            return 4\n        return self.rotatedDigits(n - 1) + self.rotatedDigits(n - 2) + self.rotatedDigits(n - 3) + self.rotatedDigits(n - 4)\n"
    },
    {
        "number": 789,
        "title": "Escape The Ghosts",
        "difficulty": 1,
        "answer": "        if len(ghosts) == 0:\n            return True\n        if len(ghosts) == 1:\n            return self.reach(ghosts[0], target)\n        if len(ghosts) == 2:\n            return self.reach(ghosts[0], target) and self.reach(ghosts[1], target)\n        if len(ghosts) == 3:\n            return self.reach(ghosts[0], target) and self.reach(ghosts[1], target) and self.reach(ghosts[2], target)\n        if len(ghosts) == 4:\n            return self.reach(ghosts[0], target) and self.reach(ghosts[1], target) and self.reach(ghosts[2], target) and self.reach(ghosts[3], target)\n        return False"
    },
    {
        "number": 790,
        "title": "Domino and Tromino Tiling",
        "difficulty": 1,
        "answer": "        dp = [0] * (n + 1)\n        dp[0] = 1\n        dp[1] = 1\n        for i in range(2, n + 1):\n            dp[i] = dp[i - 1] + dp[i - 2]\n        return dp[n] % 109 + 7\n"
    },
    {
        "number": 791,
        "title": "Custom Sort String",
        "difficulty": 1,
        "answer": "        if not order:\n            return \"\"\n        if not s:\n            return \"\"\n        if len(order)!= len(s):\n            return \"\"\n        if len(order) == 1:\n            return s\n        if len(order) == 2:\n            return order[0] + s + order[1]\n        if len(order) == 3:\n            return order[0] + s + order[1] + order[2]\n        if len(order) == 4:\n            return order[0] + s + order[1] + order[2] + order[3]\n        if len(order) == 5:\n            return order[0] + s + order[1] + order[2] + order[3] + order[4]\n        if len(order) == 6:\n            return order[0] + s + order[1] + order[2] + order[3] + order[4] + order[5]\n        if len(order) == 7:\n            return order[0] + s + order[1] + order[2] + order"
    },
    {
        "number": 792,
        "title": "Number of Matching Subsequences",
        "difficulty": 1,
        "answer": "        if not words:\n            return 0\n        if not s:\n            return 0\n        if len(words) == 1:\n            return 1\n        if len(words) == 2:\n            return 1 if s.startswith(words[0]) else 0\n        if len(words) == 3:\n            return 1 if s.startswith(words[0]) and s.endswith(words[1]) else 0\n        if len(words) == 4:\n            return 1 if s.startswith(words[0]) and s.endswith(words[1]) and s.endswith(words[2]) else 0\n        if len(words) == 5:\n            return 1 if s.startswith(words[0]) and s.endswith(words[1]) and s.endswith(words[2]) and s.endswith(words[3]) else 0\n        if len(words) == 6:\n            return 1 if s.startswith(words[0]) and s.endswith(words[1]) and s.endswith("
    },
    {
        "number": 793,
        "title": "Preimage Size of Factorial Zeroes Function",
        "difficulty": 2,
        "answer": "        n = 1\n        for i in range(1, k + 1):\n            n *= i\n        return n"
    },
    {
        "number": 794,
        "title": "Valid Tic-Tac-Toe State",
        "difficulty": 1,
        "answer": "        # Write your code here\n        if len(board)!= 9:\n            return False\n        if len(set(board))!= 3:\n            return False\n        if set(board)!= set([\"X\", \"O\", \" \"]):\n            return False\n        if set(board)!= set([\"X\", \"O\", \" \"]):\n            return False\n        if set(board)!= set([\"X\", \"O\", \" \"]):\n            return False\n        if set(board)!= set([\"X\", \"O\", \" \"]):\n            return False\n        if set(board)!= set([\"X\", \"O\", \" \"]):\n            return False\n        if set(board)!= set([\"X\", \"O\", \" \"]):\n            return False\n        if set(board)!= set([\"X\", \"O\", \" \"]):\n            return False\n        if set(board)!= set([\"X\", \"O\", \" \"]):\n            return False\n        if set(board)!= set([\"X\", \"O\", \" \"]):\n            "
    },
    {
        "number": 795,
        "title": "Number of Subarrays with Bounded Maximum",
        "difficulty": 1,
        "answer": "        n = len(nums)\n        if n == 0:\n            return 0\n        if n == 1:\n            return 1\n        if n == 2:\n            return 1 if nums[0] == nums[1] else 0\n        if n == 3:\n            return 1 if nums[0] == nums[1] and nums[1] == nums[2] else 0\n        if n == 4:\n            return 1 if nums[0] == nums[1] and nums[1] == nums[2] and nums[2] == nums[3] else 0\n        if n == 5:\n            return 1 if nums[0] == nums[1] and nums[1] == nums[2] and nums[2] == nums[3] and nums[3] == nums[4] else 0\n        if n == 6:\n            return 1 if nums[0] == nums[1] and nums[1] == nums[2] and nums[2] == nums[3] and"
    },
    {
        "number": 796,
        "title": "Rotate String",
        "difficulty": 0,
        "answer": "        if len(s)!= len(goal):\n            return False\n        if len(s) == 0:\n            return True\n        if len(s) == 1:\n            return s == goal\n        if len(goal) == 1:\n            return s == goal\n        if len(s) == 2:\n            return s == goal\n        if len(goal) == 2:\n            return s == goal\n        if len(s) == 3:\n            return s == goal\n        if len(goal) == 3:\n            return s == goal\n        if len(s) == 4:\n            return s == goal\n        if len(goal) == 4:\n            return s == goal\n        if len(s) == 5:\n            return s == goal\n        if len(goal) == 5:\n            return s == goal\n        if len(s) == 6:\n            return s == goal\n        if len(goal) == 6:\n            return s == goal\n        if len(s) == 7:\n            return s == goal\n        if len(goal) == 7:\n            return"
    },
    {
        "number": 797,
        "title": "All Paths From Source to Target",
        "difficulty": 1,
        "answer": "        # https://leetcode.com/problems/all-paths-from-source-to-target/discuss/105500/Python-solution-with-explanation\n        # https://leetcode.com/problems/all-paths-from-source-to-target/discuss/105501/C%2B%2B-solution-with-explanation\n        # https://leetcode.com/problems/all-paths-from-source-to-target/discuss/105502/C%2B%2B-solution-with-explanation\n        # https://leetcode.com/problems/all-paths-from-source-to-target/discuss/105503/C%2B%2B-solution-with-explanation\n        # https://leetcode.com/problems/all-paths-from-source-to-target/discuss/105504/C%2B%2B-solution-with-explanation\n        # https://leet"
    },
    {
        "number": 798,
        "title": "Smallest Rotation with Highest Score",
        "difficulty": 2,
        "answer": "        n = len(nums)\n        if n == 1:\n            return 0\n        if n == 2:\n            return 1\n        if n == 3:\n            return 2\n        if n == 4:\n            return 3\n        if n == 5:\n            return 4\n        if n == 6:\n            return 5\n        if n == 7:\n            return 6\n        if n == 8:\n            return 7\n        if n == 9:\n            return 8\n        if n == 10:\n            return 9\n        if n == 11:\n            return 10\n        if n == 12:\n            return 11\n        if n == 13:\n            return 12\n        if n == 14:\n            return 13\n        if n == 15:\n            return 14\n        if n == 16:\n            return 15\n        if n == 17:\n            return 16\n        if n == 18:\n            return 17\n        if n == 19:\n            return 18\n        if n == 20:\n            return 19\n        if n == 21:\n            return 20\n        if n == 22:\n            return 21"
    },
    {
        "number": 799,
        "title": "Champagne Tower",
        "difficulty": 1,
        "answer": "        # Write your code here\n        if poured == 0:\n            return 0.0\n        if poured == 1:\n            return 1.0\n        if poured == 2:\n            return 0.5\n        if poured == 3:\n            return 0.25\n        if poured == 4:\n            return 0.125\n        if poured == 5:\n            return 0.0625\n        if poured == 6:\n            return 0.03125\n        if poured == 7:\n            return 0.015625\n        if poured == 8:\n            return 0.0078125\n        if poured == 9:\n            return 0.00390625\n        if poured == 10:\n            return 0.001953125\n        if poured == 11:\n            return 0.0009765625\n        if poured == 12:\n            return 0.00048828125\n        if poured == 13:\n            return 0.000244140625\n        if poured == 14:\n            return 0.0001220703125\n        if poured == 15:\n            return 0.00006103515625\n        if poured == 16:"
    },
    {
        "number": 801,
        "title": "Minimum Swaps To Make Sequences Increasing",
        "difficulty": 2,
        "answer": "        nums1.sort()\n        nums2.sort()\n        return self.minSwapRec(nums1, nums2)"
    },
    {
        "number": 802,
        "title": "Find Eventual Safe States",
        "difficulty": 1,
        "answer": "        # https://leetcode.com/problems/eventual-safe-nodes/discuss/105586/Java-O(n)-solution-with-explanation\n        # https://leetcode.com/problems/eventual-safe-nodes/discuss/105586/Java-O(n)-solution-with-explanation\n        # https://leetcode.com/problems/eventual-safe-nodes/discuss/105586/Java-O(n)-solution-with-explanation\n        # https://leetcode.com/problems/eventual-safe-nodes/discuss/105586/Java-O(n)-solution-with-explanation\n        # https://leetcode.com/problems/eventual-safe-nodes/discuss/105586/Java-O(n)-solution-with-explanation\n        # https://leetcode.com/problems/eventual-safe-nodes/discuss/105586/Java-O(n)-s"
    },
    {
        "number": 803,
        "title": "Bricks Falling When Hit",
        "difficulty": 2,
        "answer": "        m, n = len(grid), len(grid[0])\n        # dp[i][j] is the number of bricks that fall after applying the i-th erasure\n        dp = [[0] * n for _ in range(m)]\n        for i in range(m):\n            for j in range(n):\n                if grid[i][j] == 1:\n                    dp[i][j] = 1\n                    for k in range(4):\n                        if grid[i + k - 1][j] == 1:\n                            dp[i][j] += 1\n                            break\n                    for k in range(4):\n                        if grid[i][j + k - 1] == 1:\n                            dp[i][j] += 1\n                            break\n                    for k in range(4):\n                        if grid[i + k - 1][j + k - 1] == 1:\n                            dp[i][j] += 1\n                            break\n        # dp[i][j] is the number of bricks that fall after applying the i-th erasure\n        # hits[i] is the location of"
    },
    {
        "number": 804,
        "title": "Unique Morse Code Words",
        "difficulty": 0,
        "answer": "        morse_code = {\n            \"a\": \".-\",\n            \"b\": \"-...\",\n            \"c\": \"-.-.\",\n            \"d\": \"-..\",\n            \"e\": \".\",\n            \"f\": \"..-.\",\n            \"g\": \"--.\",\n            \"h\": \"....\",\n            \"i\": \"..\",\n            \"j\": \".---\",\n            \"k\": \"-.-\",\n            \"l\": \".-..\",\n            \"m\": \"--\",\n            \"n\": \"-.\",\n            \"o\": \"---\",\n            \"p\": \".--.\",\n            \"q\": \"--.-\",\n            \"r\": \".-.\",\n            \"s\": \"...\",\n            \"t\": \"-\",\n            \"u\": \"..-\",\n            \"v\": \"...-\",\n            \"w\": \".--\",\n            \"x\": \"-..-\",\n            \"y\": \"-.--\",\n            \"z\": \"--..\",\n        }\n        morse_code_len = len(morse_code)\n        morse_code_set = set(morse"
    },
    {
        "number": 805,
        "title": "Split Array With Same Average",
        "difficulty": 2,
        "answer": "        if len(nums) == 1:\n            return True\n        if len(nums) == 2:\n            return True if nums[0] == nums[1] else False\n        if len(nums) == 3:\n            return True if nums[0] == nums[1] and nums[1] == nums[2] else False\n        if len(nums) == 4:\n            return True if nums[0] == nums[1] and nums[1] == nums[2] and nums[2] == nums[3] else False\n        if len(nums) == 5:\n            return True if nums[0] == nums[1] and nums[1] == nums[2] and nums[2] == nums[3] and nums[3] == nums[4] else False\n        if len(nums) == 6:\n            return True if nums[0] == nums[1] and nums[1] == nums[2] and nums[2] == nums"
    },
    {
        "number": 806,
        "title": "Number of Lines To Write String",
        "difficulty": 0,
        "answer": "        lines = []\n        for i in range(len(widths)):\n            lines.append([])\n        for i in range(len(widths)):\n            lines[i].append(0)\n        for i in range(len(widths)):\n            for j in range(len(widths[i])):\n                lines[i][j] = lines[i][j] + 1\n        for i in range(len(widths)):\n            for j in range(len(widths[i])):\n                if lines[i][j] > widths[i]:\n                    lines[i][j] = widths[i]\n        for i in range(len(widths)):\n            for j in range(len(widths[i])):\n                if lines[i][j] > 100:\n                    lines[i][j] = 100\n        for i in range(len(widths)):\n            for j in range(len(widths[i])):\n                if lines[i][j] > 0:\n                    lines[i][j] = lines["
    },
    {
        "number": 807,
        "title": "Max Increase to Keep City Skyline",
        "difficulty": 1,
        "answer": "        # https://leetcode.com/problems/max-increase-keeping-skyline/discuss/105586/Java-O(n)-solution-with-explanation\n        # https://leetcode.com/problems/max-increase-keeping-skyline/discuss/105586/Java-O(n)-solution-with-explanation\n        # https://leetcode.com/problems/max-increase-keeping-skyline/discuss/105586/Java-O(n)-solution-with-explanation\n        # https://leetcode.com/problems/max-increase-keeping-skyline/discuss/105586/Java-O(n)-solution-with-explanation\n        # https://leetcode.com/problems/max-increase-keeping-skyline/discuss/105586/Java-O(n)-solution-with-explanation\n        # https://leetcode.com/problems/max-increase-keeping-skyline/discuss"
    },
    {
        "number": 808,
        "title": "Soup Servings",
        "difficulty": 1,
        "answer": "        if n < 0:\n            return float(\"inf\")\n        if n == 0:\n            return 0\n        if n == 1:\n            return 0.25\n        if n == 2:\n            return 0.5\n        if n == 3:\n            return 0.75\n        if n == 4:\n            return 0.875\n        if n == 5:\n            return 0.9375\n        if n == 6:\n            return 0.96875\n        if n == 7:\n            return 0.984375\n        if n == 8:\n            return 0.990625\n        if n == 9:\n            return 0.9921875\n        if n == 10:\n            return 0.9953125\n        if n == 11:\n            return 0.9975625\n        if n == 12:\n            return 0.9993125\n        if n == 13:\n            return 0.99975625\n        if n == 14:\n            return 0.99984375\n        if n == 15:\n            return 0.99990625\n        if n == 16:\n            return"
    },
    {
        "number": 809,
        "title": "Expressive Words",
        "difficulty": 1,
        "answer": "        # https://leetcode.com/problems/expressive-words/discuss/105586/Java-C-solution-with-explanation\n        # https://leetcode.com/problems/expressive-words/discuss/105586/Java-C-solution-with-explanation\n        # https://leetcode.com/problems/expressive-words/discuss/105586/Java-C-solution-with-explanation\n        # https://leetcode.com/problems/expressive-words/discuss/105586/Java-C-solution-with-explanation\n        # https://leetcode.com/problems/expressive-words/discuss/105586/Java-C-solution-with-explanation\n        # https://leetcode.com/problems/expressive-words/discuss/105586/Java-C-solution-with-explanation\n        # https://leetcode.com/problems/expressive-words/discuss/10"
    },
    {
        "number": 810,
        "title": "Chalkboard XOR Game",
        "difficulty": 2,
        "answer": "        if len(nums) == 1:\n            return nums[0] == 0\n        elif len(nums) == 2:\n            return nums[0] == 1 and nums[1] == 1\n        elif len(nums) == 3:\n            return nums[0] == 1 and nums[1] == 2 and nums[2] == 3\n        elif len(nums) == 4:\n            return nums[0] == 1 and nums[1] == 2 and nums[2] == 3 and nums[3] == 4\n        elif len(nums) == 5:\n            return nums[0] == 1 and nums[1] == 2 and nums[2] == 3 and nums[3] == 4 and nums[4] == 5\n        elif len(nums) == 6:\n            return nums[0] == 1 and nums[1] == 2 and nums[2] == 3 and nums[3] == 4 and nums[4] == 5 and nums[5] == 6"
    },
    {
        "number": 811,
        "title": "Subdomain Visit Count",
        "difficulty": 1,
        "answer": "        # https://leetcode.com/problems/subdomain-visits/discuss/\n        # https://leetcode.com/problems/subdomain-visits/discuss/\n        # https://leetcode.com/problems/subdomain-visits/discuss/\n        # https://leetcode.com/problems/subdomain-visits/discuss/\n        # https://leetcode.com/problems/subdomain-visits/discuss/\n        # https://leetcode.com/problems/subdomain-visits/discuss/\n        # https://leetcode.com/problems/subdomain-visits/discuss/\n        # https://leetcode.com/problems/subdomain-visits/discuss/\n        # https://leetcode.com/problems/subdomain-visits/discuss/\n        # https://leetcode.com/problems/subdomain-visits/discuss/\n        # https://leetcode.com/problems/subdomain-visits/disc"
    },
    {
        "number": 812,
        "title": "Largest Triangle Area",
        "difficulty": 0,
        "answer": "        points = sorted(points, key=lambda x: x[0])\n        n = len(points)\n        if n < 3:\n            return 0.0\n        max_area = 0.0\n        for i in range(n - 2):\n            for j in range(i + 1, n - 1):\n                for k in range(j + 1, n):\n                    area = (points[i][0] * points[j][1] + points[j][0] * points[k][1] + points[k][0] * points[i][1]) / 2\n                    if area > max_area:\n                        max_area = area\n        return max_area\n"
    },
    {
        "number": 813,
        "title": "Largest Sum of Averages",
        "difficulty": 1,
        "answer": "        if not nums:\n            return 0\n        if k == 1:\n            return max(nums)\n        if k == 2:\n            return max(nums) - min(nums)\n        if k == 3:\n            return max(nums) - min(nums) + max(nums[1:]) - min(nums[1:])\n        if k == 4:\n            return max(nums) - min(nums) + max(nums[1:]) - min(nums[1:]) + max(nums[2:]) - min(nums[2:]) - max(nums[3:]) + min(nums[3:])\n        if k == 5:\n            return max(nums) - min(nums) + max(nums[1:]) - min(nums[1:]) + max(nums[2:]) - min(nums[2:]) - max(nums[3:]) + min(nums[3:]) + max(nums[4:]) - min(nums["
    },
    {
        "number": 814,
        "title": "Binary Tree Pruning",
        "difficulty": 1,
        "answer": "        if root is None:\n            return None\n        if root.left is None and root.right is None:\n            return root\n        root.left = self.pruneTree(root.left)\n        root.right = self.pruneTree(root.right)\n        return root"
    },
    {
        "number": 815,
        "title": "Bus Routes",
        "difficulty": 2,
        "answer": "        n = len(routes)\n        if n == 0:\n            return 0\n        if n == 1:\n            return 1\n        if n == 2:\n            return 1 if routes[0][0] == routes[1][0] else 2\n        if n == 3:\n            return 1 if routes[0][0] == routes[1][0] and routes[0][1] == routes[1][1] else 2\n        if n == 4:\n            return 1 if routes[0][0] == routes[1][0] and routes[0][1] == routes[1][1] and routes[0][2] == routes[1][2] else 2\n        if n == 5:\n            return 1 if routes[0][0] == routes[1][0] and routes[0][1] == routes[1][1] and routes[0][2] == routes[1][2] and routes[0][3] == routes[1][3] else 2\n        if n == 6:\n            return 1 if routes[0][0] == routes[1][0] and routes"
    },
    {
        "number": 816,
        "title": "Ambiguous Coordinates",
        "difficulty": 1,
        "answer": "        s = s.replace(\"(\", \"\")\n        s = s.replace(\")\", \"\")\n        s = s.replace(\",\", \"\")\n        s = s.replace(\".\", \"\")\n        s = s.replace(\" \", \"\")\n        s = s.replace(\"0\", \"\")\n        s = s.replace(\"1\", \"\")\n        s = s.replace(\"2\", \"\")\n        s = s.replace(\"3\", \"\")\n        s = s.replace(\"4\", \"\")\n        s = s.replace(\"5\", \"\")\n        s = s.replace(\"6\", \"\")\n        s = s.replace(\"7\", \"\")\n        s = s.replace(\"8\", \"\")\n        s = s.replace(\"9\", \"\")\n        s = s.replace(\".\", \"\")\n        s = s.replace(\"0\", \"\")\n        s = s.replace(\"1\", \"\")\n        s = s.replace(\"2\", \"\")\n        s = s.replace(\"3\", \"\")\n        s = s.replace(\"4\", \"\")\n        "
    },
    {
        "number": 817,
        "title": "Linked List Components",
        "difficulty": 1,
        "answer": "        if not head:\n            return 0\n        if not nums:\n            return 1\n        if not head.next:\n            return 1\n        if not nums:\n            return 1\n        if head.next.val == nums[0]:\n            return 1\n        if head.next.val == nums[1]:\n            return 1\n        if head.next.val == nums[2]:\n            return 1\n        if head.next.val == nums[3]:\n            return 1\n        if head.next.val == nums[4]:\n            return 1\n        if head.next.val == nums[5]:\n            return 1\n        if head.next.val == nums[6]:\n            return 1\n        if head.next.val == nums[7]:\n            return 1\n        if head.next.val == nums[8]:\n            return 1\n        if head.next.val == nums[9]:\n            return 1\n        if head.next.val == nums[10]:\n            return 1\n        if head.next.val =="
    },
    {
        "number": 818,
        "title": "Race Car",
        "difficulty": 2,
        "answer": "        if target < 0:\n            return -1\n        if target == 0:\n            return 0\n        if target == 1:\n            return 1\n        if target == 2:\n            return 2\n        if target == 3:\n            return 3\n        if target == 4:\n            return 4\n        if target == 5:\n            return 5\n        if target == 6:\n            return 6\n        if target == 7:\n            return 7\n        if target == 8:\n            return 8\n        if target == 9:\n            return 9\n        if target == 10:\n            return 10\n        if target == 11:\n            return 11\n        if target == 12:\n            return 12\n        if target == 13:\n            return 13\n        if target == 14:\n            return 14\n        if target == 15:\n            return 15\n        if target == 16:\n            return 16\n        if target == 17:\n            return 17\n        if target == 18:\n            return 18\n        if target == 19:\n            return 19\n        if target == 20:\n            return 20\n        if target == 21:\n"
    },
    {
        "number": 819,
        "title": "Most Common Word",
        "difficulty": 0,
        "answer": "        # TODO: implement this\n        pass"
    },
    {
        "number": 820,
        "title": "Short Encoding of Words",
        "difficulty": 1,
        "answer": "        # https://leetcode.com/problems/minimum-length-encoding-of-an-array-of-words/discuss/\n        # https://leetcode.com/problems/minimum-length-encoding-of-an-array-of-words/discuss/\n        # https://leetcode.com/problems/minimum-length-encoding-of-an-array-of-words/discuss/\n        # https://leetcode.com/problems/minimum-length-encoding-of-an-array-of-words/discuss/\n        # https://leetcode.com/problems/minimum-length-encoding-of-an-array-of-words/discuss/\n        # https://leetcode.com/problems/minimum-length-encoding-of-an-array-of-words/discuss/\n        # https://leetcode.com/problems/minimum-length-encoding-of-an-array-of-words/discuss/\n        # https://leetcode.com/problems"
    },
    {
        "number": 821,
        "title": "Shortest Distance to a Character",
        "difficulty": 0,
        "answer": "        # https://leetcode.com/problems/shortest-to-char/discuss/105500/Java-C-solution-with-explanation\n        # https://leetcode.com/problems/shortest-to-char/discuss/105501/C-solution-with-explanation\n        # https://leetcode.com/problems/shortest-to-char/discuss/105502/C++-solution-with-explanation\n        # https://leetcode.com/problems/shortest-to-char/discuss/105503/Python-solution-with-explanation\n        # https://leetcode.com/problems/shortest-to-char/discuss/105504/Java-solution-with-explanation\n        # https://leetcode.com/problems/shortest-to-char/discuss/105505/C-solution-with-explanation\n        # https://leetcode.com/problems/shortest-to-char"
    },
    {
        "number": 822,
        "title": "Card Flipping Game",
        "difficulty": 1,
        "answer": "        fronts.sort()\n        backs.sort()\n        fronts.reverse()\n        backs.reverse()\n        fronts.append(0)\n        backs.append(0)\n        fronts.append(0)\n        backs.append(0)\n        fronts.append(0)\n        backs.append(0)\n        fronts.append(0)\n        backs.append(0)\n        fronts.append(0)\n        backs.append(0)\n        fronts.append(0)\n        backs.append(0)\n        fronts.append(0)\n        backs.append(0)\n        fronts.append(0)\n        backs.append(0)\n        fronts.append(0)\n        backs.append(0)\n        fronts.append(0)\n        backs.append(0)\n        fronts.append(0)\n        backs.append(0)\n        fronts.append(0)\n        backs.append(0)\n        fronts.append(0)\n        backs.append(0)\n        fronts"
    },
    {
        "number": 823,
        "title": "Binary Trees With Factors",
        "difficulty": 1,
        "answer": "        if len(arr) == 1:\n            return 1\n        if len(arr) == 2:\n            return arr[0] * arr[1]\n        if len(arr) == 3:\n            return arr[0] * arr[1] * arr[2]\n        if len(arr) == 4:\n            return arr[0] * arr[1] * arr[2] * arr[3]\n        if len(arr) == 5:\n            return arr[0] * arr[1] * arr[2] * arr[3] * arr[4]\n        if len(arr) == 6:\n            return arr[0] * arr[1] * arr[2] * arr[3] * arr[4] * arr[5]\n        if len(arr) == 7:\n            return arr[0] * arr[1] * arr[2] * arr[3] * arr[4] * arr[5] * arr[6]\n        if len(arr) == 8:\n            return arr[0] * arr[1] * arr[2] * arr["
    },
    {
        "number": 824,
        "title": "Goat Latin",
        "difficulty": 0,
        "answer": "        sentence = sentence.lower()\n        words = sentence.split()\n        result = \"\"\n        for i, word in enumerate(words):\n            if word[0] in \"aeiou\":\n                result += word + \"ma\"\n            else:\n                result += word[1:] + \"ma\"\n            if i < len(words) - 1:\n                result += \" \"\n        return result\n"
    },
    {
        "number": 825,
        "title": "Friends Of Appropriate Ages",
        "difficulty": 1,
        "answer": "        n = len(ages)\n        if n == 1:\n            return 0\n        if n == 2:\n            return 1\n        if n == 3:\n            return 2\n        if n == 4:\n            return 3\n        if n == 5:\n            return 4\n        if n == 6:\n            return 5\n        if n == 7:\n            return 6\n        if n == 8:\n            return 7\n        if n == 9:\n            return 8\n        if n == 10:\n            return 9\n        if n == 11:\n            return 10\n        if n == 12:\n            return 11\n        if n == 13:\n            return 12\n        if n == 14:\n            return 13\n        if n == 15:\n            return 14\n        if n == 16:\n            return 15\n        if n == 17:\n            return 16\n        if n == 18:\n            return 17\n        if n == 19:\n            return 18\n        if n == 20:\n            return 19\n        if n == 21:\n            return 20\n        if n == 22:\n            return 21\n"
    },
    {
        "number": 826,
        "title": "Most Profit Assigning Work",
        "difficulty": 1,
        "answer": "        # dp[i][j] = max(dp[i-1][j], dp[i-1][j-1] + profit[i-1])\n        dp = [[0 for _ in range(len(worker))] for _ in range(len(difficulty))]\n        for i in range(len(difficulty)):\n            for j in range(len(worker)):\n                dp[i][j] = max(dp[i-1][j], dp[i-1][j-1] + profit[i-1])\n        return dp[-1][-1]\n"
    },
    {
        "number": 827,
        "title": "Making A Large Island",
        "difficulty": 2,
        "answer": "        def dfs(row, col, visited):\n            if visited[row][col]:\n                return\n            visited[row][col] = True\n            if grid[row][col] == 1:\n                return\n            for i in range(row - 1, row + 2):\n                for j in range(col - 1, col + 2):\n                    if i < 0 or j < 0 or i >= len(grid) or j >= len(grid[0]):\n                        continue\n                    if grid[i][j] == 1:\n                        dfs(i, j, visited)\n            return"
    },
    {
        "number": 828,
        "title": "Count Unique Characters of All Substrings of a Given String",
        "difficulty": 2,
        "answer": "        # https://leetcode.com/problems/unique-letter-string/discuss/105586/Java-Solution-with-explanation-and-examples\n        # https://leetcode.com/problems/unique-letter-string/discuss/105587/Java-Solution-with-explanation-and-examples\n        # https://leetcode.com/problems/unique-letter-string/discuss/105588/Java-Solution-with-explanation-and-examples\n        # https://leetcode.com/problems/unique-letter-string/discuss/105589/Java-Solution-with-explanation-and-examples\n        # https://leetcode.com/problems/unique-letter-string/discuss/105590/Java-Solution-with-explanation-and-examples\n        # https://leetcode.com/problems/unique-letter-string/discuss/105591/Java-Solution-with-explanation-and-examples\n        # https://"
    },
    {
        "number": 829,
        "title": "Consecutive Numbers Sum",
        "difficulty": 2,
        "answer": "        if n < 1:\n            return 0\n        if n == 1:\n            return 1\n        if n == 2:\n            return 1\n        if n == 3:\n            return 2\n        if n == 4:\n            return 2\n        if n == 5:\n            return 2\n        if n == 6:\n            return 3\n        if n == 7:\n            return 3\n        if n == 8:\n            return 3\n        if n == 9:\n            return 3\n        if n == 10:\n            return 3\n        if n == 11:\n            return 4\n        if n == 12:\n            return 4\n        if n == 13:\n            return 4\n        if n == 14:\n            return 4\n        if n == 15:\n            return 4\n        if n == 16:\n            return 5\n        if n == 17:\n            return 5\n        if n == 18:\n            return 5\n        if n == 19:\n            return 5\n        if n == 20:\n            return 5\n        if n == 21:\n            return 5\n        if n == 22:\n            "
    },
    {
        "number": 830,
        "title": "Positions of Large Groups",
        "difficulty": 0,
        "answer": "        # https://leetcode.com/problems/large-group-positions/discuss/105500/Java-Solution-with-explanation-in-python\n        # https://leetcode.com/problems/large-group-positions/discuss/105501/Java-Solution-with-explanation-in-python-with-explanation-in-python\n        # https://leetcode.com/problems/large-group-positions/discuss/105502/Java-Solution-with-explanation-in-python-with-explanation-in-python-with-explanation-in-python\n        # https://leetcode.com/problems/large-group-positions/discuss/105503/Java-Solution-with-explanation-in-python-with-explanation-in-python-with-explanation-in-python-with-explanation-in-python\n        # https://leetcode.com/problems/large-group-positions/discuss/105504"
    },
    {
        "number": 831,
        "title": "Masking Personal Information",
        "difficulty": 1,
        "answer": "        s = s.lower()\n        s = s.replace('@', '*')\n        s = s.replace('.', '*')\n        s = s.replace('-', '*')\n        s = s.replace('+', '*')\n        s = s.replace('(', '*')\n        s = s.replace(')', '*')\n        s = s.replace(' ', '*')\n        s = s.replace('*', '*')\n        s = s.replace('(', '*')\n        s = s.replace(')', '*')\n        s = s.replace(' ', '*')\n        s = s.replace('*', '*')\n        s = s.replace('-', '*')\n        s = s.replace('+', '*')\n        s = s.replace('1', '*')\n        s = s.replace('2', '*')\n        s = s.replace('3', '*')\n        s = s.replace('4', '*')\n        s = s.replace('5', '"
    },
    {
        "number": 832,
        "title": "Flipping an Image",
        "difficulty": 0,
        "answer": "        n = len(image)\n        if n == 0:\n            return []\n        if n == 1:\n            return [[image[0][0]]]\n        if n == 2:\n            return [[image[0][0], image[1][1]]]\n        if n == 3:\n            return [[image[0][0], image[1][1], image[2][2]]]\n        if n == 4:\n            return [[image[0][0], image[1][1], image[2][2], image[3][3]]]\n        if n == 5:\n            return [[image[0][0], image[1][1], image[2][2], image[3][3], image[4][4]]]\n        if n == 6:\n            return [[image[0][0], image[1][1], image[2][2], image[3][3], image[4][4], image[5][5]]]\n        if n == 7:\n            return [[image[0][0], image[1][1], image[2][2], image[3][3"
    },
    {
        "number": 833,
        "title": "Find And Replace in String",
        "difficulty": 1,
        "answer": "        # write your code in Python 3.6\n        # write your code in Python 3.5\n        # write your code in Python 3.4\n        # write your code in Python 3.3\n        # write your code in Python 3.2\n        # write your code in Python 3.1\n        # write your code in Python 2.7\n        # write your code in Python 2.6\n        # write your code in Python 2.5\n        # write your code in Python 2.4\n        # write your code in Python 2.3\n        # write your code in Python 2.2\n        # write your code in Python 2.1\n        # write your code in Python 1.7\n        # write your code in Python 1.6\n        # write your code in Python 1.5\n        # write your code in Python 1.4\n        # write your code in Python 1.3\n        # write your code in Python 1.2\n        # write your code in Python 1.1\n        # write your code in Python 1.0\n        # write your code in Python 0.0\n        # write your code in Python 0"
    },
    {
        "number": 834,
        "title": "Sum of Distances in Tree",
        "difficulty": 2,
        "answer": "        # Edge case\n        if n == 1:\n            return [0]"
    },
    {
        "number": 835,
        "title": "Image Overlap",
        "difficulty": 1,
        "answer": "        # https://leetcode.com/problems/largest-overlap/discuss/105586/Java-O(n)-solution-with-explanation\n        # https://leetcode.com/problems/largest-overlap/discuss/105586/Java-O(n)-solution-with-explanation\n        # https://leetcode.com/problems/largest-overlap/discuss/105586/Java-O(n)-solution-with-explanation\n        # https://leetcode.com/problems/largest-overlap/discuss/105586/Java-O(n)-solution-with-explanation\n        # https://leetcode.com/problems/largest-overlap/discuss/105586/Java-O(n)-solution-with-explanation\n        # https://leetcode.com/problems/largest-overlap/discuss/105586/Java-O(n)-solution-with-explanation\n        # https://leetcode.com/"
    },
    {
        "number": 836,
        "title": "Rectangle Overlap",
        "difficulty": 0,
        "answer": "        # https://leetcode.com/problems/rectangle-overlap/discuss/105586/Java-O(1)-space-and-O(n)-time-solution-with-explanation\n        # https://leetcode.com/problems/rectangle-overlap/discuss/105586/Java-O(1)-space-and-O(n)-time-solution-with-explanation\n        # https://leetcode.com/problems/rectangle-overlap/discuss/105586/Java-O(1)-space-and-O(n)-time-solution-with-explanation\n        # https://leetcode.com/problems/rectangle-overlap/discuss/105586/Java-O(1)-space-and-O(n)-time-solution-with-explanation\n        # https://leetcode.com/problems/rectangle-overlap/discuss/105586/Java-O(1)-space-and-O(n)-time-solution-with"
    },
    {
        "number": 837,
        "title": "New 21 Game",
        "difficulty": 1,
        "answer": "        # pylint: disable=invalid-name\n        # pylint: disable=too-many-locals\n        # pylint: disable=too-many-branches\n        # pylint: disable=too-many-statements\n        # pylint: disable=too-many-nested-blocks\n        # pylint: disable=too-many-boolean-expressions\n        # pylint: disable=too-many-arguments\n        # pylint: disable=too-many-locals\n        # pylint: disable=too-many-statements\n        # pylint: disable=too-many-nested-blocks\n        # pylint: disable=too-many-boolean-expressions\n        # pylint: disable=too-many-arguments\n        # pylint: disable=too-many-locals\n        # pylint: disable=too-many-statements\n        # pylint: disable=too-many-nested-blocks\n        # pylint: disable=too-many-boolean-"
    },
    {
        "number": 838,
        "title": "Push Dominoes",
        "difficulty": 1,
        "answer": "        dominoes = dominoes.replace('.', '')\n        dominoes = dominoes.replace('L', '')\n        dominoes = dominoes.replace('R', '')\n        dominoes = dominoes.replace('.', '')\n        dominoes = dominoes.replace('L', '')\n        dominoes = dominoes.replace('R', '')\n        dominoes = dominoes.replace('.', '')\n        dominoes = dominoes.replace('L', '')\n        dominoes = dominoes.replace('R', '')\n        dominoes = dominoes.replace('.', '')\n        dominoes = dominoes.replace('L', '')\n        dominoes = dominoes.replace('R', '')\n        dominoes = dominoes.replace('.', '')\n        dominoes = dominoes.replace('L', '')\n        dominoes = dominoes.replace('R', '')\n        dominoes = dominoes.replace"
    },
    {
        "number": 839,
        "title": "Similar String Groups",
        "difficulty": 2,
        "answer": "        # pylint: disable=line-too-long\n        # pylint: disable=too-many-locals\n        # pylint: disable=too-many-branches\n        # pylint: disable=too-many-statements\n        # pylint: disable=too-many-nested-blocks\n        # pylint: disable=too-many-boolean-expressions\n        # pylint: disable=too-many-arguments\n        # pylint: disable=too-many-branches\n        # pylint: disable=too-many-statements\n        # pylint: disable=too-many-nested-blocks\n        # pylint: disable=too-many-boolean-expressions\n        # pylint: disable=too-many-arguments\n        # pylint: disable=too-many-locals\n        # pylint: disable=too-many-statements\n        # pylint: disable=too-many-nested-blocks\n        # pylint: disable=too-many-boolean"
    },
    {
        "number": 840,
        "title": "Magic Squares In Grid",
        "difficulty": 1,
        "answer": "        if not grid:\n            return 0\n        if len(grid) == 1:\n            return 1\n        if len(grid) == 2:\n            return 1 if grid[0][0] == grid[1][0] else 0\n        if len(grid) == 3:\n            return 1 if grid[0][0] == grid[1][0] and grid[0][1] == grid[1][1] else 0\n        if len(grid) == 4:\n            return 1 if grid[0][0] == grid[1][0] and grid[0][1] == grid[1][1] and grid[0][2] == grid[1][2] else 0\n        if len(grid) == 5:\n            return 1 if grid[0][0] == grid[1][0] and grid[0][1] == grid[1][1] and grid[0][2] == grid[1][2] and grid[0][3] == grid[1][3] else 0\n        if len(grid) == 6:\n            return 1 if grid[0][0] == grid"
    },
    {
        "number": 841,
        "title": "Keys and Rooms",
        "difficulty": 1,
        "answer": "        n = len(rooms)\n        if n == 0:\n            return True\n        if n == 1:\n            return rooms[0] == [0]\n        if n == 2:\n            return rooms[0] == [0] and rooms[1] == [1]\n        if n == 3:\n            return rooms[0] == [0] and rooms[1] == [1] and rooms[2] == [2]\n        if n == 4:\n            return rooms[0] == [0] and rooms[1] == [1] and rooms[2] == [2] and rooms[3] == [3]\n        if n == 5:\n            return rooms[0] == [0] and rooms[1] == [1] and rooms[2] == [2] and rooms[3] == [3] and rooms[4] == [4]\n        if n == 6:\n            return rooms[0] == [0] and rooms[1] == [1] and rooms[2] == [2] and rooms[3] == [3] and rooms[4] == ["
    },
    {
        "number": 842,
        "title": "Split Array into Fibonacci Sequence",
        "difficulty": 1,
        "answer": "        n = len(num)\n        if n == 1:\n            return [int(num)]\n        elif n == 2:\n            return [int(num[0]), int(num[1])]\n        elif n == 3:\n            return [int(num[0]), int(num[1]), int(num[2])]\n        elif n == 4:\n            return [int(num[0]), int(num[1]), int(num[2]), int(num[3])]\n        elif n == 5:\n            return [int(num[0]), int(num[1]), int(num[2]), int(num[3]), int(num[4])]\n        elif n == 6:\n            return [int(num[0]), int(num[1]), int(num[2]), int(num[3]), int(num[4]), int(num[5])]\n        elif n == 7:\n            return [int(num[0]), int(num[1]), int(num[2]), int(num[3]), int(num[4]), int"
    },
    {
        "number": 843,
        "title": "Guess the Word",
        "difficulty": 2,
        "answer": "        pass"
    },
    {
        "number": 844,
        "title": "Backspace String Compare",
        "difficulty": 0,
        "answer": "        s_len = len(s)\n        t_len = len(t)\n        if s_len!= t_len:\n            return False\n        s_list = list(s)\n        t_list = list(t)\n        for i in range(s_len):\n            if s_list[i] == '#' and t_list[i] == '#':\n                s_list[i] =''\n                t_list[i] =''\n            elif s_list[i] == '#' and t_list[i]!= '#':\n                return False\n            elif s_list[i]!= '#' and t_list[i] == '#':\n                return False\n        return True"
    },
    {
        "number": 845,
        "title": "Longest Mountain in Array",
        "difficulty": 1,
        "answer": "        if len(arr) < 3:\n            return 0\n        max_len = 0\n        for i in range(1, len(arr) - 1):\n            if arr[i] > arr[i + 1]:\n                max_len = max(max_len, i + 1)\n        return max_len\n"
    },
    {
        "number": 846,
        "title": "Hand of Straights",
        "difficulty": 1,
        "answer": "        # https://leetcode.com/problems/rearrange-the-cards-into-groups/discuss/\n        # https://leetcode.com/problems/rearrange-the-cards-into-groups/discuss/\n        # https://leetcode.com/problems/rearrange-the-cards-into-groups/discuss/\n        # https://leetcode.com/problems/rearrange-the-cards-into-groups/discuss/\n        # https://leetcode.com/problems/rearrange-the-cards-into-groups/discuss/\n        # https://leetcode.com/problems/rearrange-the-cards-into-groups/discuss/\n        # https://leetcode.com/problems/rearrange-the-cards-into-groups/discuss/\n        # https://leetcode.com/problems/rearrange-the-cards-into-groups/discuss/\n        # https://leetcode.com/problems/rearrange-the"
    },
    {
        "number": 847,
        "title": "Shortest Path Visiting All Nodes",
        "difficulty": 2,
        "answer": "        n = len(graph)\n        if n == 0:\n            return 0\n        if n == 1:\n            return 1\n        dp = [0] * n\n        for i in range(n):\n            for j in range(i + 1, n):\n                if graph[i][j] == 1:\n                    dp[j] = 1 + dp[i]\n        return dp[n - 1]"
    },
    {
        "number": 848,
        "title": "Shifting Letters",
        "difficulty": 1,
        "answer": "        if len(shifts) == 0:\n            return s\n        if len(shifts) == 1:\n            return s[shifts[0]:]\n        if len(shifts) == 2:\n            return s[shifts[0]:shifts[1]] + s[:shifts[0]]\n        if len(shifts) == 3:\n            return s[shifts[0]:shifts[1]] + s[shifts[1]:shifts[2]] + s[:shifts[0]]\n        if len(shifts) == 4:\n            return s[shifts[0]:shifts[1]] + s[shifts[1]:shifts[2]] + s[shifts[2]:shifts[3]] + s[:shifts[0]]\n        if len(shifts) == 5:\n            return s[shifts[0]:shifts[1]] + s[shifts[1]:shifts[2]] + s[shifts[2]:shifts[3]] + s[shifts[3]:shifts[4]] + s[:sh"
    },
    {
        "number": 849,
        "title": "Maximize Distance to Closest Person",
        "difficulty": 1,
        "answer": "        seat_count = len(seats)\n        if seat_count == 0:\n            return 0\n        if seat_count == 1:\n            return 1\n        if seat_count == 2:\n            return max(seats[0], seats[1])\n        if seat_count == 3:\n            return max(seats[0], seats[1], seats[2])\n        if seat_count == 4:\n            return max(seats[0], seats[1], seats[2], seats[3])\n        if seat_count == 5:\n            return max(seats[0], seats[1], seats[2], seats[3], seats[4])\n        if seat_count == 6:\n            return max(seats[0], seats[1], seats[2], seats[3], seats[4], seats[5])\n        if seat_count == 7:\n            return max(seats[0], seats[1], seats[2], seats[3], seats[4], seats[5], seats[6])\n        if seat_count == 8:\n            return max(seats"
    },
    {
        "number": 850,
        "title": "Rectangle Area II",
        "difficulty": 2,
        "answer": "        # https://leetcode.com/problems/rectangle-area/discuss/105586/Java-O(n)-solution-with-explanation\n        # https://leetcode.com/problems/rectangle-area/discuss/105586/Java-O(n)-solution-with-explanation\n        # https://leetcode.com/problems/rectangle-area/discuss/105586/Java-O(n)-solution-with-explanation\n        # https://leetcode.com/problems/rectangle-area/discuss/105586/Java-O(n)-solution-with-explanation\n        # https://leetcode.com/problems/rectangle-area/discuss/105586/Java-O(n)-solution-with-explanation\n        # https://leetcode.com/problems/rectangle-area/discuss/105586/Java-O(n)-solution-with-explanation\n        # https://leetcode.com/"
    },
    {
        "number": 851,
        "title": "Loud and Rich",
        "difficulty": 1,
        "answer": "        if len(quiet) == 0:\n            return [0]\n        if len(quiet) == 1:\n            return [quiet[0]]\n        if len(quiet) == 2:\n            return [quiet[0], quiet[1]]\n        if len(quiet) == 3:\n            return [quiet[0], quiet[1], quiet[2]]\n        if len(quiet) == 4:\n            return [quiet[0], quiet[1], quiet[2], quiet[3]]\n        if len(quiet) == 5:\n            return [quiet[0], quiet[1], quiet[2], quiet[3], quiet[4]]\n        if len(quiet) == 6:\n            return [quiet[0], quiet[1], quiet[2], quiet[3], quiet[4], quiet[5]]\n        if len(quiet) == 7:\n            return [quiet[0], quiet[1], quiet[2], quiet[3], quiet[4], quiet[5], quiet[6]]\n        if len(quiet) == 8:\n            return [quiet[0], quiet[1], quiet[2"
    },
    {
        "number": 852,
        "title": "Peak Index in a Mountain Array",
        "difficulty": 1,
        "answer": "        if len(arr) < 3:\n            return -1\n        if arr[0] > arr[1]:\n            return 0\n        if arr[-1] > arr[-2]:\n            return len(arr) - 1\n        if arr[0] > arr[1]:\n            return 0\n        if arr[-1] > arr[-2]:\n            return len(arr) - 1\n        return self.findPeakIndex(arr)"
    },
    {
        "number": 853,
        "title": "Car Fleet",
        "difficulty": 1,
        "answer": "        n = len(position)\n        if n == 0:\n            return 0\n        if n == 1:\n            return 1\n        if n == 2:\n            return 1 if position[0] == target else 0\n        if n == 3:\n            return 1 if position[0] == target and position[1] == target - position[0] else 0\n        if n == 4:\n            return 1 if position[0] == target and position[1] == target - position[0] and position[2] == target - position[0] - position[1] else 0\n        if n == 5:\n            return 1 if position[0] == target and position[1] == target - position[0] and position[2] == target - position[0] - position[1] and position[3] == target - position[0] - position[1] - position[2] else 0\n        if n == 6:\n            return 1 if position[0] == target and position[1] == target - position[0] and position[2] == target - position[0] - position[1] and position"
    },
    {
        "number": 854,
        "title": "K-Similar Strings",
        "difficulty": 2,
        "answer": "        if len(s1)!= len(s2):\n            return -1\n        dp = [[0] * (len(s2) + 1) for _ in range(len(s1) + 1)]\n        for i in range(1, len(s1) + 1):\n            for j in range(1, len(s2) + 1):\n                if s1[i - 1] == s2[j - 1]:\n                    dp[i][j] = dp[i - 1][j - 1] + 1\n                else:\n                    dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])\n        return dp[-1][-1]"
    },
    {
        "number": 855,
        "title": "Exam Room",
        "difficulty": 1,
        "answer": "        pass"
    },
    {
        "number": 856,
        "title": "Score of Parentheses",
        "difficulty": 1,
        "answer": "        stack = []\n        score = 0\n        for c in s:\n            if c == \"(\":\n                stack.append(c)\n            elif c == \")\":\n                if len(stack) == 0:\n                    return 0\n                top = stack.pop()\n                if top == \"(\":\n                    score += 1\n                elif top == \")\":\n                    score += 2\n                else:\n                    score += 1\n        return score\n"
    },
    {
        "number": 857,
        "title": "Minimum Cost to Hire K Workers",
        "difficulty": 2,
        "answer": "        n = len(quality)\n        if n < k:\n            return float('inf')\n        if n == 1:\n            return wage[0]\n        if n == 2:\n            return min(wage[0], wage[1])\n        if n == 3:\n            return min(wage[0], wage[1], wage[2])\n        if n == 4:\n            return min(wage[0], wage[1], wage[2], wage[3])\n        if n == 5:\n            return min(wage[0], wage[1], wage[2], wage[3], wage[4])\n        if n == 6:\n            return min(wage[0], wage[1], wage[2], wage[3], wage[4], wage[5])\n        if n == 7:\n            return min(wage[0], wage[1], wage[2], wage[3], wage[4], wage[5], wage[6])\n        if n == 8:\n            return min(wage[0], wage[1], wage[2], wage[3], wage[4], wage[5"
    },
    {
        "number": 858,
        "title": "Mirror Reflection",
        "difficulty": 1,
        "answer": "        # p = 2, q = 1\n        # p = 3, q = 1\n        # p = 2, q = 2\n        # p = 3, q = 2\n        # p = 2, q = 3\n        # p = 3, q = 3\n        # p = 2, q = 4\n        # p = 3, q = 4\n        # p = 2, q = 5\n        # p = 3, q = 5\n        # p = 2, q = 6\n        # p = 3, q = 6\n        # p = 2, q = 7\n        # p = 3, q = 7\n        # p = 2, q = 8\n        # p = 3, q = 8\n        # p = 2, q = 9\n        # p = 3, q = 9\n        # p = 2, q = 10\n        # p = 3, q = 10\n        # p = 2, q = 11\n        # p = 3, q = 11\n        # p = 2, q = 12\n        # p = 3, q = 12\n        # p = 2, q = 13\n"
    },
    {
        "number": 859,
        "title": "Buddy Strings",
        "difficulty": 0,
        "answer": "        if len(s)!= len(goal):\n            return False\n        if len(s) == 1:\n            return s == goal\n        if len(goal) == 1:\n            return s == goal\n        if len(s) == 2:\n            return s[0] == goal[0] and s[1] == goal[1]\n        if len(goal) == 2:\n            return s[0] == goal[0] and s[1] == goal[1]\n        if len(s) == 3:\n            return s[0] == goal[0] and s[1] == goal[1] and s[2] == goal[2]\n        if len(goal) == 3:\n            return s[0] == goal[0] and s[1] == goal[1] and s[2] == goal[2]\n        if len(s) == 4:\n            return s[0] == goal[0] and s[1] == goal[1] and s[2] == goal[2] and s[3] == goal[3]\n        if"
    },
    {
        "number": 860,
        "title": "Lemonade Change",
        "difficulty": 0,
        "answer": "        if not bills:\n            return True\n        if len(bills) == 1:\n            return bills[0] == 0\n        if len(bills) == 2:\n            return bills[0] == bills[1]\n        if len(bills) == 3:\n            return bills[0] + bills[1] == bills[2]\n        if len(bills) == 4:\n            return bills[0] + bills[1] + bills[2] == bills[3]\n        if len(bills) == 5:\n            return bills[0] + bills[1] + bills[2] + bills[3] == bills[4]\n        if len(bills) == 6:\n            return bills[0] + bills[1] + bills[2] + bills[3] + bills[4] == bills[5]\n        if len(bills) == 7:\n            return bills[0] + bills[1] + bills[2] + bills[3] + bills[4] + bills[5] == bills[6]\n        if len(bills)"
    },
    {
        "number": 861,
        "title": "Score After Flipping Matrix",
        "difficulty": 1,
        "answer": "        m, n = len(grid), len(grid[0])\n        if m == 0 or n == 0:\n            return 0\n        grid = [list(row) for row in grid]\n        row_sum = [0] * m\n        col_sum = [0] * n\n        for i in range(m):\n            for j in range(n):\n                row_sum[i] += grid[i][j]\n                col_sum[j] += grid[i][j]\n        return max(row_sum) + max(col_sum)"
    },
    {
        "number": 862,
        "title": "Shortest Subarray with Sum at Least K",
        "difficulty": 2,
        "answer": "        if not nums:\n            return -1\n        if not k:\n            return 0\n        n = len(nums)\n        if n == 1:\n            return 1\n        if n == 2:\n            return min(nums) - max(nums) + 1\n        if n == 3:\n            return min(nums) - max(nums) + 1\n        if n == 4:\n            return min(nums) - max(nums) + 1\n        if n == 5:\n            return min(nums) - max(nums) + 1\n        if n == 6:\n            return min(nums) - max(nums) + 1\n        if n == 7:\n            return min(nums) - max(nums) + 1\n        if n == 8:\n            return min(nums) - max(nums) + 1\n        if n == 9:\n            return min(nums) - max(nums) + 1\n        if n == 10:\n            return min(nums) - max(nums) + 1\n        "
    },
    {
        "number": 863,
        "title": "All Nodes Distance K in Binary Tree",
        "difficulty": 1,
        "answer": "        def dfs(node: TreeNode, target: TreeNode, k: int) -> List[int]:\n            if not node:\n                return []\n            if node.val == target.val:\n                return [node.val]\n            if k == 1:\n                return [node.val]\n            if k == 2:\n                return [node.val, target.val]\n            return dfs(node.left, target, k - 1) + dfs(node.right, target, k - 1)"
    },
    {
        "number": 864,
        "title": "Shortest Path to Get All Keys",
        "difficulty": 2,
        "answer": "        m, n = len(grid), len(grid[0])\n        if m == 0 or n == 0:\n            return -1\n        grid = [row.strip() for row in grid]\n        grid = [[int(c) for c in row] for row in grid]\n        grid = [[grid[i][j] for j in range(n)] for i in range(m)]\n        grid = [[grid[i][j] for j in range(n)] for i in range(m)]\n        grid = [[grid[i][j] for j in range(n)] for i in range(m)]\n        grid = [[grid[i][j] for j in range(n)] for i in range(m)]\n        grid = [[grid[i][j] for j in range(n)] for i in range(m)]\n        grid = [[grid[i][j] for j in range(n)] for i in range(m)]\n        grid = [[grid[i][j] for j in range(n)] for i in range(m)]\n        grid = [[grid[i][j]"
    },
    {
        "number": 865,
        "title": "Smallest Subtree with all the Deepest Nodes",
        "difficulty": 1,
        "answer": "        def depth(node: TreeNode) -> int:\n            if node is None:\n                return 0\n            return 1 + max(depth(node.left), depth(node.right))"
    },
    {
        "number": 866,
        "title": "Prime Palindrome",
        "difficulty": 1,
        "answer": "        # pylint: disable=invalid-name\n        # pylint: disable=too-many-locals\n        # pylint: disable=too-many-branches\n        # pylint: disable=too-many-statements\n        # pylint: disable=too-many-nested-blocks\n        # pylint: disable=too-many-boolean-expressions\n        # pylint: disable=too-many-arguments\n        # pylint: disable=too-many-locals\n        # pylint: disable=too-many-statements\n        # pylint: disable=too-many-nested-blocks\n        # pylint: disable=too-many-boolean-expressions\n        # pylint: disable=too-many-arguments\n        # pylint: disable=too-many-locals\n        # pylint: disable=too-many-statements\n        # pylint: disable=too-many-nested-blocks\n        # pylint: disable=too-many-boolean-"
    },
    {
        "number": 867,
        "title": "Transpose Matrix",
        "difficulty": 0,
        "answer": "        n = len(matrix)\n        m = len(matrix[0])\n        result = [[0 for _ in range(m)] for _ in range(n)]\n        for i in range(n):\n            for j in range(m):\n                result[i][j] = matrix[j][i]\n        return result\n"
    },
    {
        "number": 868,
        "title": "Binary Gap",
        "difficulty": 0,
        "answer": "        return max(self.binaryGapHelper(n), self.binaryGapHelper(n-1))"
    },
    {
        "number": 869,
        "title": "Reordered Power of 2",
        "difficulty": 1,
        "answer": "        if n == 0:\n            return True\n        if n == 1:\n            return True\n        if n == 2:\n            return True\n        if n % 2 == 0:\n            return False\n        return self.reorderedPowerOf2(n // 2) and self.reorderedPowerOf2(n // 2)\n"
    },
    {
        "number": 870,
        "title": "Advantage Shuffle",
        "difficulty": 1,
        "answer": "        nums1.sort()\n        nums2.sort()\n        nums1_len = len(nums1)\n        nums2_len = len(nums2)\n        if nums1_len!= nums2_len:\n            return []\n        nums1_max_advantage = 0\n        nums2_max_advantage = 0\n        for i in range(nums1_len):\n            if nums1[i] > nums2[i]:\n                nums1_max_advantage += 1\n        for i in range(nums1_len):\n            if nums1[i] < nums2[i]:\n                nums2_max_advantage += 1\n        return nums1"
    },
    {
        "number": 871,
        "title": "Minimum Number of Refueling Stops",
        "difficulty": 2,
        "answer": "        if not stations:\n            return 0\n        if len(stations) == 1:\n            return 0\n        if len(stations) == 2:\n            return 1\n        if len(stations) == 3:\n            return 2\n        if len(stations) == 4:\n            return 3\n        if len(stations) == 5:\n            return 4\n        if len(stations) == 6:\n            return 5\n        if len(stations) == 7:\n            return 6\n        if len(stations) == 8:\n            return 7\n        if len(stations) == 9:\n            return 8\n        if len(stations) == 10:\n            return 9\n        if len(stations) == 11:\n            return 10\n        if len(stations) == 12:\n            return 11\n        if len(stations) == 13:\n            return 12\n        if len(stations) == 14:\n            return 13\n        if len(stations) == 15:\n            return 14\n        if len(stations) == 16:\n            return 15\n"
    },
    {
        "number": 872,
        "title": "Leaf-Similar Trees",
        "difficulty": 0,
        "answer": "        if not root1 and not root2:\n            return True\n        if not root1 or not root2:\n            return False\n        if root1.val!= root2.val:\n            return False\n        return self.leafSimilar(root1.left, root2.left) and self.leafSimilar(root1.right, root2.right)"
    },
    {
        "number": 873,
        "title": "Length of Longest Fibonacci Subsequence",
        "difficulty": 1,
        "answer": "        if not arr:\n            return 0\n        if len(arr) == 1:\n            return 1\n        if len(arr) == 2:\n            return 1 if arr[0] + arr[1] == arr[1] + arr[0] else 0\n        if len(arr) == 3:\n            return 1 if arr[0] + arr[1] == arr[1] + arr[2] and arr[0] + arr[1] == arr[2] + arr[0] else 0\n        if len(arr) == 4:\n            return 1 if arr[0] + arr[1] == arr[1] + arr[2] and arr[0] + arr[1] == arr[2] + arr[3] and arr[0] + arr[1] == arr[3] + arr[0] else 0\n        if len(arr) == 5:\n            return 1 if arr[0] + arr[1] == arr[1] + arr[2] and arr[0] + arr[1] == arr[2] + arr[3] and arr[0]"
    },
    {
        "number": 874,
        "title": "Walking Robot Simulation",
        "difficulty": 1,
        "answer": "        if not commands:\n            return 0\n        n = len(commands)\n        if n == 1:\n            return abs(commands[0])\n        if n == 2:\n            return abs(commands[0]) + abs(commands[1])\n        if n == 3:\n            return abs(commands[0]) + abs(commands[1]) + abs(commands[2])\n        if n == 4:\n            return abs(commands[0]) + abs(commands[1]) + abs(commands[2]) + abs(commands[3])\n        if n == 5:\n            return abs(commands[0]) + abs(commands[1]) + abs(commands[2]) + abs(commands[3]) + abs(commands[4])\n        if n == 6:\n            return abs(commands[0]) + abs(commands[1]) + abs(commands[2]) + abs(commands[3]) + abs(commands[4]) + abs(commands[5])\n        if n == 7:\n            return"
    },
    {
        "number": 875,
        "title": "Koko Eating Bananas",
        "difficulty": 1,
        "answer": "        if not piles:\n            return 0\n        if len(piles) == 1:\n            return piles[0]\n        if len(piles) == 2:\n            return max(piles)\n        if len(piles) == 3:\n            return max(piles)\n        if len(piles) == 4:\n            return max(piles)\n        if len(piles) == 5:\n            return max(piles)\n        if len(piles) == 6:\n            return max(piles)\n        if len(piles) == 7:\n            return max(piles)\n        if len(piles) == 8:\n            return max(piles)\n        if len(piles) == 9:\n            return max(piles)\n        if len(piles) == 10:\n            return max(piles)\n        if len(piles) == 11:\n            return max(piles)\n        if len(piles) == 12:\n            return max(piles)\n        if len(piles) == 13:\n            return"
    },
    {
        "number": 876,
        "title": "Middle of the Linked List",
        "difficulty": 0,
        "answer": "        if head is None or head.next is None:\n            return head"
    },
    {
        "number": 877,
        "title": "Stone Game",
        "difficulty": 1,
        "answer": "        if len(piles) % 2!= 0:\n            return False\n        if len(piles) == 0:\n            return True\n        if len(piles) == 1:\n            return piles[0] % 2 == 0\n        if len(piles) == 2:\n            return piles[0] % 2 == 0 and piles[1] % 2 == 0\n        if len(piles) == 3:\n            return piles[0] % 2 == 0 and piles[1] % 2 == 0 and piles[2] % 2 == 0\n        if len(piles) == 4:\n            return piles[0] % 2 == 0 and piles[1] % 2 == 0 and piles[2] % 2 == 0 and piles[3] % 2 == 0\n        if len(piles) == 5:\n            return piles[0] % 2 == 0 and piles[1] % 2 == 0 and piles[2] % 2 == 0 and piles[3] % 2 == 0 and piles[4] % 2 == 0\n        if len(piles) == 6:\n            return piles[0] %"
    },
    {
        "number": 878,
        "title": "Nth Magical Number",
        "difficulty": 2,
        "answer": "        if n < 1:\n            return 0\n        if n == 1:\n            return a\n        if n == 2:\n            return b\n        if n == 3:\n            return a * b\n        if n == 4:\n            return a * b * a\n        if n == 5:\n            return a * b * a * a\n        if n == 6:\n            return a * b * a * a * a\n        if n == 7:\n            return a * b * a * a * a * a\n        if n == 8:\n            return a * b * a * a * a * a * a\n        if n == 9:\n            return a * b * a * a * a * a * a * a\n        if n == 10:\n            return a * b * a * a * a * a * a * a * a\n        if n == 11:\n            return a * b * a * a * a * a * a * a * a * a\n        if n == 12:\n            return a * b * a * a * a * a * a * a * a * a"
    },
    {
        "number": 879,
        "title": "Profitable Schemes",
        "difficulty": 2,
        "answer": "        if len(group) == 0:\n            return 0\n        if len(group) == 1:\n            return 1\n        if len(group) == 2:\n            return 1 if group[0] == group[1] else 0\n        if len(group) == 3:\n            return 1 if group[0] == group[1] and group[1] == group[2] else 0\n        if len(group) == 4:\n            return 1 if group[0] == group[1] and group[1] == group[2] and group[2] == group[3] else 0\n        if len(group) == 5:\n            return 1 if group[0] == group[1] and group[1] == group[2] and group[2] == group[3] and group[3] == group[4] else 0\n        if len(group) == 6:\n            return 1 if group[0] == group[1] and group[1] == group[2] and group[2] == group[3] and group[3] == group[4] and group[4]"
    },
    {
        "number": 880,
        "title": "Decoded String at Index",
        "difficulty": 1,
        "answer": "        if not s:\n            return \"\"\n        if not k:\n            return \"\"\n        if k == 1:\n            return s[0]\n        if k == 2:\n            return s[1]\n        if k == 3:\n            return s[2]\n        if k == 4:\n            return s[3]\n        if k == 5:\n            return s[4]\n        if k == 6:\n            return s[5]\n        if k == 7:\n            return s[6]\n        if k == 8:\n            return s[7]\n        if k == 9:\n            return s[8]\n        if k == 10:\n            return s[9]\n        if k == 11:\n            return s[10]\n        if k == 12:\n            return s[11]\n        if k == 13:\n            return s[12]\n        if k == 14:\n            return s[13]\n        if k == 15:\n            return s[14]\n        if k == 16:\n            return s[15]\n        if k == 17:"
    },
    {
        "number": 881,
        "title": "Boats to Save People",
        "difficulty": 1,
        "answer": "        people = sorted(people)\n        people_len = len(people)\n        if people_len == 0:\n            return 0\n        if people_len == 1:\n            return 1\n        if people_len == 2:\n            return 1 if people[0] + people[1] <= limit else 2\n        if people_len == 3:\n            return 1 if people[0] + people[1] + people[2] <= limit else 2\n        if people_len == 4:\n            return 1 if people[0] + people[1] + people[2] + people[3] <= limit else 2\n        if people_len == 5:\n            return 1 if people[0] + people[1] + people[2] + people[3] + people[4] <= limit else 2\n        if people_len == 6:\n            return 1 if people[0] + people[1] + people[2] + people[3] + people[4] + people[5] <= limit else 2\n        if people_len == 7:\n            return 1 if people[0] + people[1"
    },
    {
        "number": 882,
        "title": "Reachable Nodes In Subdivided Graph",
        "difficulty": 2,
        "answer": "        # https://leetcode.com/problems/reachable-nodes/discuss/105586/Java-O(n)-solution-with-explanation\n        # https://leetcode.com/problems/reachable-nodes/discuss/105586/Java-O(n)-solution-with-explanation\n        # https://leetcode.com/problems/reachable-nodes/discuss/105586/Java-O(n)-solution-with-explanation\n        # https://leetcode.com/problems/reachable-nodes/discuss/105586/Java-O(n)-solution-with-explanation\n        # https://leetcode.com/problems/reachable-nodes/discuss/105586/Java-O(n)-solution-with-explanation\n        # https://leetcode.com/problems/reachable-nodes/discuss/105586/Java-O(n)-solution-with-explanation\n        # https://"
    },
    {
        "number": 883,
        "title": "Projection Area of 3D Shapes",
        "difficulty": 0,
        "answer": "        n = len(grid)\n        m = len(grid[0])\n        result = 0\n        for i in range(n):\n            for j in range(m):\n                if grid[i][j] == 1:\n                    result += self.projectionArea(grid[i][j:], i, j, n, m)\n                    result += self.projectionArea(grid[i][j+1:], i, j, n, m)\n                    result += self.projectionArea(grid[i][j+2:], i, j, n, m)\n                    result += self.projectionArea(grid[i][j+3:], i, j, n, m)\n        return result"
    },
    {
        "number": 884,
        "title": "Uncommon Words from Two Sentences",
        "difficulty": 0,
        "answer": "        # pylint: disable=line-too-long\n        # pylint: disable=too-many-locals\n        # pylint: disable=too-many-branches\n        # pylint: disable=too-many-statements\n        # pylint: disable=too-many-nested-blocks\n        # pylint: disable=too-many-boolean-expressions\n        # pylint: disable=too-many-arguments\n        # pylint: disable=too-many-locals\n        # pylint: disable=too-many-statements\n        # pylint: disable=too-many-nested-blocks\n        # pylint: disable=too-many-boolean-expressions\n        # pylint: disable=too-many-arguments\n        # pylint: disable=too-many-locals\n        # pylint: disable=too-many-statements\n        # pylint: disable=too-many-nested-blocks\n        # pylint: disable=too-many-boolean"
    },
    {
        "number": 885,
        "title": "Spiral Matrix III",
        "difficulty": 1,
        "answer": "        if rStart < 0 or cStart < 0 or rStart >= rows or cStart >= cols:\n            return []\n        if rStart == 0 and cStart == 0:\n            return [[0, 0]]\n        if rStart == 0:\n            return self.spiralMatrixIII(rows, cols, cStart, cStart + 1) + self.spiralMatrixIII(rows, cols, cStart + 1, cStart + 2)\n        if cStart == 0:\n            return self.spiralMatrixIII(rows, cols, rStart, rStart + 1) + self.spiralMatrixIII(rows, cols, rStart + 1, rStart + 2)\n        if rStart + 1 == rows and cStart + 1 == cols:\n            return [[rStart, cStart]]\n        if rStart + 1 == rows:\n            return self.spiralMatrixIII(rows, cols, rStart, rStart + 1) + self.spiralMatrixIII(rows, cols, cStart, cStart + 1)\n        if cStart + 1 == cols:\n"
    },
    {
        "number": 886,
        "title": "Possible Bipartition",
        "difficulty": 1,
        "answer": "        if n == 1:\n            return True\n        if n == 2:\n            return True if len(dislikes) == 1 else False\n        if n == 3:\n            return True if len(dislikes) == 2 else False\n        if n == 4:\n            return True if len(dislikes) == 3 else False\n        if n == 5:\n            return True if len(dislikes) == 4 else False\n        if n == 6:\n            return True if len(dislikes) == 5 else False\n        if n == 7:\n            return True if len(dislikes) == 6 else False\n        if n == 8:\n            return True if len(dislikes) == 7 else False\n        if n == 9:\n            return True if len(dislikes) == 8 else False\n        if n == 10:\n            return True if len(dislikes) == 9 else False\n        if n == 11:\n            return True if len(dislikes) == 10 else False\n        if n == 12:\n            return True if len(dislikes) == 11"
    },
    {
        "number": 887,
        "title": "Super Egg Drop",
        "difficulty": 2,
        "answer": "        dp = [0] * (n + 1)\n        dp[0] = 1\n        dp[1] = 1\n        dp[2] = 2\n        dp[3] = 3\n        dp[4] = 4\n        dp[5] = 5\n        dp[6] = 6\n        dp[7] = 7\n        dp[8] = 8\n        dp[9] = 9\n        dp[10] = 10\n        dp[11] = 11\n        dp[12] = 12\n        dp[13] = 13\n        dp[14] = 14\n        dp[15] = 15\n        dp[16] = 16\n        dp[17] = 17\n        dp[18] = 18\n        dp[19] = 19\n        dp[20] = 20\n        dp[21] = 21\n        dp[22] = 22\n        dp[23] = 23\n        dp[24] = 24\n        dp[25] = 25\n        dp[26] = 26\n        dp[27] = 27\n        dp[28] = 28\n        dp[29]"
    },
    {
        "number": 888,
        "title": "Fair Candy Swap",
        "difficulty": 0,
        "answer": "        if len(aliceSizes)!= len(bobSizes):\n            return [-1]"
    },
    {
        "number": 889,
        "title": "Construct Binary Tree from Preorder and Postorder Traversal",
        "difficulty": 1,
        "answer": "        def build_tree(pre, post):\n            if len(pre) == 0:\n                return None\n            root = TreeNode(pre[0])\n            root.left = build_tree(pre[1:], post[1:])\n            root.right = build_tree(pre[1+len(pre):], post[1+len(pre):])\n            return root"
    },
    {
        "number": 890,
        "title": "Find and Replace Pattern",
        "difficulty": 1,
        "answer": "        if not words:\n            return []\n        if not pattern:\n            return words\n        if len(pattern) > len(words):\n            return []\n        if len(pattern) == 1:\n            return [words[0]]\n        if len(pattern) == 2:\n            return [words[0] + words[1]]\n        if len(pattern) == 3:\n            return [words[0] + words[1] + words[2]]\n        if len(pattern) == 4:\n            return [words[0] + words[1] + words[2] + words[3]]\n        if len(pattern) == 5:\n            return [words[0] + words[1] + words[2] + words[3] + words[4]]\n        if len(pattern) == 6:\n            return [words[0] + words[1] + words[2] + words[3] + words[4] + words[5]]\n        if len(pattern) == 7:\n            return [words[0] + words[1] + words[2] + words[3"
    },
    {
        "number": 891,
        "title": "Sum of Subsequence Widths",
        "difficulty": 2,
        "answer": "        n = len(nums)\n        if n == 0:\n            return 0\n        if n == 1:\n            return nums[0]\n        if n == 2:\n            return nums[0] + nums[1]\n        if n == 3:\n            return nums[0] + nums[1] + nums[2]\n        if n == 4:\n            return nums[0] + nums[1] + nums[2] + nums[3]\n        if n == 5:\n            return nums[0] + nums[1] + nums[2] + nums[3] + nums[4]\n        if n == 6:\n            return nums[0] + nums[1] + nums[2] + nums[3] + nums[4] + nums[5]\n        if n == 7:\n            return nums[0] + nums[1] + nums[2] + nums[3] + nums[4] + nums[5] + nums[6]"
    },
    {
        "number": 892,
        "title": "Surface Area of 3D Shapes",
        "difficulty": 0,
        "answer": "        n = len(grid)\n        if n == 1:\n            return 0\n        if n == 2:\n            return grid[0][0] * grid[1][1]\n        if n == 3:\n            return grid[0][0] * grid[1][1] + grid[1][1] * grid[2][2] + grid[0][1] * grid[1][2]\n        if n == 4:\n            return grid[0][0] * grid[1][1] + grid[1][1] * grid[2][2] + grid[2][2] * grid[3][3] + grid[0][1] * grid[1][2] + grid[1][2] * grid[2][3] + grid[0][2] * grid[1][3]\n        if n == 5:\n            return grid[0][0] * grid[1][1] + grid[1][1] * grid[2][2] + grid[2][2] * grid[3][3] + grid[3][3] * grid[4][4]"
    },
    {
        "number": 893,
        "title": "Groups of Special-Equivalent Strings",
        "difficulty": 1,
        "answer": "        # https://leetcode.com/problems/special-equivalent-groups/discuss/105586/Java-Solution-with-explanation-and-examples\n        # https://leetcode.com/problems/special-equivalent-groups/discuss/105587/Java-Solution-with-explanation-and-examples\n        # https://leetcode.com/problems/special-equivalent-groups/discuss/105588/Java-Solution-with-explanation-and-examples\n        # https://leetcode.com/problems/special-equivalent-groups/discuss/105589/Java-Solution-with-explanation-and-examples\n        # https://leetcode.com/problems/special-equivalent-groups/discuss/105590/Java-Solution-with-explanation-and-examples\n        # https://leetcode.com/problems/special-equivalent-groups/discuss/105591/Java-Solution-with-explanation-and-ex"
    },
    {
        "number": 894,
        "title": "All Possible Full Binary Trees",
        "difficulty": 1,
        "answer": "        if n == 0:\n            return []\n        if n == 1:\n            return [None]\n        if n == 2:\n            return [TreeNode(0, None, None)]\n        if n == 3:\n            return [TreeNode(0, TreeNode(0, None, None), None), TreeNode(0, None, TreeNode(0, None, None))]\n        if n == 4:\n            return [TreeNode(0, TreeNode(0, None, None), TreeNode(0, None, None)),\n                    TreeNode(0, TreeNode(0, None, None), None),\n                    TreeNode(0, None, TreeNode(0, None, None))]\n        if n == 5:\n            return [TreeNode(0, TreeNode(0, None, None), TreeNode(0, None, None)),\n                    TreeNode(0, TreeNode(0, None, None), TreeNode(0, None, None)),\n                    TreeNode(0, None, TreeNode(0, None, None))]\n        if n == 6:\n            return [TreeNode("
    },
    {
        "number": 895,
        "title": "Maximum Frequency Stack",
        "difficulty": 2,
        "answer": "        pass"
    },
    {
        "number": 896,
        "title": "Monotonic Array",
        "difficulty": 0,
        "answer": "        if len(nums) <= 1:\n            return True\n        if nums[0] > nums[1]:\n            return False\n        if nums[-1] < nums[-2]:\n            return False\n        for i in range(1, len(nums) - 1):\n            if nums[i] > nums[i - 1] and nums[i] > nums[i + 1]:\n                return False\n        return True"
    },
    {
        "number": 897,
        "title": "Increasing Order Search Tree",
        "difficulty": 0,
        "answer": "        if not root:\n            return root\n        root.left = self.increasingBST(root.left)\n        root.right = self.increasingBST(root.right)\n        return root"
    },
    {
        "number": 898,
        "title": "Bitwise ORs of Subarrays",
        "difficulty": 1,
        "answer": "        if not arr:\n            return 0\n        if len(arr) == 1:\n            return 1\n        if len(arr) == 2:\n            return arr[0] | arr[1]\n        if len(arr) == 3:\n            return arr[0] | arr[1] | arr[2]\n        if len(arr) == 4:\n            return arr[0] | arr[1] | arr[2] | arr[3]\n        if len(arr) == 5:\n            return arr[0] | arr[1] | arr[2] | arr[3] | arr[4]\n        if len(arr) == 6:\n            return arr[0] | arr[1] | arr[2] | arr[3] | arr[4] | arr[5]\n        if len(arr) == 7:\n            return arr[0] | arr[1] | arr[2] | arr[3] | arr[4] | arr[5] | arr[6]\n        if len(arr) == 8:\n            return arr[0] | arr["
    },
    {
        "number": 899,
        "title": "Orderly Queue",
        "difficulty": 2,
        "answer": "        # Solution 1:\n        # https://leetcode.com/problems/lexicographically-smallest-string-after-applying-k-moves/discuss/107789/Java-Solution-with-explanation\n        # https://leetcode.com/problems/lexicographically-smallest-string-after-applying-k-moves/discuss/107790/C%2B%2B-Solution-with-explanation\n        # https://leetcode.com/problems/lexicographically-smallest-string-after-applying-k-moves/discuss/107791/C%2B%2B-Solution-with-explanation\n        # https://leetcode.com/problems/lexicographically-smallest-string-after-applying-k-moves/discuss/107792/C%2B%2B-Solution-with-explanation\n        # https://leetcode.com/problems/lexicographically-smallest-string-after-applying-k-m"
    },
    {
        "number": 900,
        "title": "RLE Iterator",
        "difficulty": 1,
        "answer": "        # Your RLEIterator object will be instantiated and called as such:\n        # obj = RLEIterator(encoded)\n        # param_1 = obj.next(n)\n        # param_2 = obj.next(n)\n        # param_3 = obj.next(n)\n        # param_4 = obj.next(n)\n        # etc..."
    },
    {
        "number": 901,
        "title": "Online Stock Span",
        "difficulty": 1,
        "answer": "        # Your StockSpanner object will be instantiated and called as such:\n        # obj = StockSpanner()\n        # param_1 = obj.next(price)\n        # param_2 = obj.next(price)\n        # param_3 = obj.next(price)\n        # param_4 = obj.next(price)\n        # param_5 = obj.next(price)\n        # param_6 = obj.next(price)\n        # param_7 = obj.next(price)\n        # return [param_1, param_2, param_3, param_4, param_5, param_6, param_7]"
    },
    {
        "number": 902,
        "title": "Numbers At Most N Given Digit Set",
        "difficulty": 2,
        "answer": "        if not digits:\n            return 0\n        if len(digits) == 1:\n            return 1\n        if len(digits) == 2:\n            return 1 if int(digits[0]) <= n else 0\n        if len(digits) == 3:\n            return 1 if int(digits[0]) <= n and int(digits[1]) <= n else 0\n        if len(digits) == 4:\n            return 1 if int(digits[0]) <= n and int(digits[1]) <= n and int(digits[2]) <= n else 0\n        if len(digits) == 5:\n            return 1 if int(digits[0]) <= n and int(digits[1]) <= n and int(digits[2]) <= n and int(digits[3]) <= n else 0\n        if len(digits) == 6:\n            return 1 if int(digits[0]) <= n and int(digits[1]) <= n and int(digits[2]) <= n and int(digits[3]) <= n and int("
    },
    {
        "number": 903,
        "title": "Valid Permutations for DI Sequence",
        "difficulty": 2,
        "answer": "        n = len(s)\n        dp = [0] * (n + 1)\n        for i in range(1, n + 1):\n            if s[i - 1] == 'D':\n                dp[i] = dp[i - 1] + 1\n            else:\n                dp[i] = dp[i - 1]\n        return sum(dp) % (109 + 7)\n"
    },
    {
        "number": 904,
        "title": "Fruit Into Baskets",
        "difficulty": 1,
        "answer": "        if not fruits:\n            return 0\n        if len(fruits) == 1:\n            return fruits[0]\n        if len(fruits) == 2:\n            return max(fruits)\n        if len(fruits) == 3:\n            return max(fruits) + max(fruits[1:])\n        if len(fruits) == 4:\n            return max(fruits) + max(fruits[1:]) + max(fruits[2:])\n        if len(fruits) == 5:\n            return max(fruits) + max(fruits[1:]) + max(fruits[2:]) + max(fruits[3:])\n        if len(fruits) == 6:\n            return max(fruits) + max(fruits[1:]) + max(fruits[2:]) + max(fruits[3:]) + max(fruits[4:])\n        if len(fruits) == 7:\n            return max(fruits) + max(fruits[1:]) + max(fruits[2:]) +"
    },
    {
        "number": 905,
        "title": "Sort Array By Parity",
        "difficulty": 0,
        "answer": "        if not nums:\n            return nums\n        if len(nums) == 1:\n            return nums\n        if len(nums) == 2:\n            if nums[0] % 2 == 0:\n                return [nums[0]] + nums[1:]\n            else:\n                return [nums[1]] + nums[0:]\n        if len(nums) == 3:\n            if nums[0] % 2 == 0:\n                return [nums[0]] + [nums[1]] + [nums[2]]\n            elif nums[1] % 2 == 0:\n                return [nums[1]] + [nums[0]] + [nums[2]]\n            else:\n                return [nums[2]] + [nums[0]] + [nums[1]]\n        if len(nums) == 4:\n            if nums[0] % 2 == 0:\n                return [nums[0]] + [nums[1]] + [nums[2]] + [nums[3]]"
    },
    {
        "number": 906,
        "title": "Super Palindromes",
        "difficulty": 2,
        "answer": "        if left == right:\n            return 1\n        if left > right:\n            return 0\n        if left == \"0\":\n            return 0\n        if left == \"1\":\n            return 1\n        if left == \"2\":\n            return 1\n        if left == \"3\":\n            return 2\n        if left == \"4\":\n            return 1\n        if left == \"5\":\n            return 2\n        if left == \"6\":\n            return 2\n        if left == \"7\":\n            return 3\n        if left == \"8\":\n            return 2\n        if left == \"9\":\n            return 3\n        if left == \"10\":\n            return 3\n        if left == \"11\":\n            return 4\n        if left == \"12\":\n            return 3\n        if left == \"13\":\n            return 4\n        if left == \"14\":\n            return 4\n        if left == \"15\":\n            return 5\n        if left == \"16\":\n            return 4\n        if left == \"17\":\n            return 5\n        if left == \"18\":\n            return 5\n"
    },
    {
        "number": 907,
        "title": "Sum of Subarray Minimums",
        "difficulty": 1,
        "answer": "        n = len(arr)\n        if n == 0:\n            return 0\n        if n == 1:\n            return arr[0]\n        if n == 2:\n            return arr[0] + arr[1]\n        if n == 3:\n            return arr[0] + arr[1] + arr[2]\n        if n == 4:\n            return arr[0] + arr[1] + arr[2] + arr[3]\n        if n == 5:\n            return arr[0] + arr[1] + arr[2] + arr[3] + arr[4]\n        if n == 6:\n            return arr[0] + arr[1] + arr[2] + arr[3] + arr[4] + arr[5]\n        if n == 7:\n            return arr[0] + arr[1] + arr[2] + arr[3] + arr[4] + arr[5] + arr[6]\n        if n == 8:\n            return arr[0] + arr[1] + arr[2] + arr[3]"
    },
    {
        "number": 908,
        "title": "Smallest Range I",
        "difficulty": 0,
        "answer": "        n = len(nums)\n        if n == 0:\n            return 0\n        if n == 1:\n            return nums[0]\n        if n == 2:\n            return min(nums) - max(nums)\n        if n == 3:\n            return min(nums) - max(nums) + min(nums[1:]) - max(nums[1:])\n        if n == 4:\n            return min(nums) - max(nums) + min(nums[1:]) - max(nums[1:]) + min(nums[2:]) - max(nums[2:])\n        if n == 5:\n            return min(nums) - max(nums) + min(nums[1:]) - max(nums[1:]) + min(nums[2:]) - max(nums[2:]) + min(nums[3:]) - max(nums[3:])\n        if n == 6:\n            return min(nums) - max(nums) + min("
    },
    {
        "number": 909,
        "title": "Snakes and Ladders",
        "difficulty": 1,
        "answer": "        n = len(board)\n        m = len(board[0])\n        if n == 1:\n            return 0\n        if n == 2:\n            return 1\n        if n == 3:\n            return 2\n        if n == 4:\n            return 3\n        if n == 5:\n            return 4\n        if n == 6:\n            return 5\n        if n == 7:\n            return 6\n        if n == 8:\n            return 7\n        if n == 9:\n            return 8\n        if n == 10:\n            return 9\n        if n == 11:\n            return 10\n        if n == 12:\n            return 11\n        if n == 13:\n            return 12\n        if n == 14:\n            return 13\n        if n == 15:\n            return 14\n        if n == 16:\n            return 15\n        if n == 17:\n            return 16\n        if n == 18:\n            return 17\n        if n == 19:\n            return 18\n        if n == 20:\n            return 19\n        if n == 21:\n            return 20\n        "
    },
    {
        "number": 910,
        "title": "Smallest Range II",
        "difficulty": 1,
        "answer": "        n = len(nums)\n        if n == 0:\n            return 0\n        if n == 1:\n            return nums[0]\n        if n == 2:\n            return min(nums) - max(nums)\n        if n == 3:\n            return min(nums) - max(nums) + min(nums[1:]) - max(nums[1:])\n        if n == 4:\n            return min(nums) - max(nums) + min(nums[1:]) - max(nums[1:]) + min(nums[2:]) - max(nums[2:])\n        if n == 5:\n            return min(nums) - max(nums) + min(nums[1:]) - max(nums[1:]) + min(nums[2:]) - max(nums[2:]) + min(nums[3:]) - max(nums[3:])\n        if n == 6:\n            return min(nums) - max(nums) + min("
    },
    {
        "number": 911,
        "title": "Online Election",
        "difficulty": 1,
        "answer": "        # Your TopVotedCandidate object will be instantiated and called as such:\n        # obj = TopVotedCandidate(persons, times)\n        # param_1 = obj.q(t)\n        # param_2 = obj.q(t)\n        # param_3 = obj.q(t)\n        #...\n        # return obj.q(t)\n        return 0"
    },
    {
        "number": 912,
        "title": "Sort an Array",
        "difficulty": 1,
        "answer": "        n = len(nums)\n        if n <= 1:\n            return nums\n        mid = n // 2\n        left = self.sortArray(nums[:mid])\n        right = self.sortArray(nums[mid:])\n        return left + right"
    },
    {
        "number": 913,
        "title": "Cat and Mouse",
        "difficulty": 2,
        "answer": "        n = len(graph)\n        if n == 0:\n            return 0\n        if n == 1:\n            return 1 if graph[0][0] == 1 else 2\n        if n == 2:\n            return 1 if graph[0][0] == 1 else 2 if graph[1][1] == 1 else 0\n        if n == 3:\n            return 1 if graph[0][0] == 1 else 2 if graph[1][1] == 1 else 0 if graph[2][2] == 1 else 0\n        if n == 4:\n            return 1 if graph[0][0] == 1 else 2 if graph[1][1] == 1 else 0 if graph[2][2] == 1 else 0 if graph[3][3] == 1 else 0\n        if n == 5:\n            return 1 if graph[0][0] == 1 else 2 if graph[1][1] == 1 else 0 if graph[2][2] == 1 else 0 if graph[3][3] == 1 else 0 if graph[4][4] == 1 else 0\n        if n == 6:\n            return 1 if"
    },
    {
        "number": 914,
        "title": "X of a Kind in a Deck of Cards",
        "difficulty": 0,
        "answer": "        if not deck:\n            return False\n        if len(deck) == 1:\n            return True\n        if len(deck) == 2:\n            return deck[0] == deck[1]\n        if len(deck) == 3:\n            return deck[0] == deck[1] and deck[1] == deck[2]\n        if len(deck) == 4:\n            return deck[0] == deck[1] and deck[1] == deck[2] and deck[2] == deck[3]\n        if len(deck) == 5:\n            return deck[0] == deck[1] and deck[1] == deck[2] and deck[2] == deck[3] and deck[3] == deck[4]\n        if len(deck) == 6:\n            return deck[0] == deck[1] and deck[1] == deck[2] and deck[2] == deck[3] and deck[3] == deck[4] and deck[4] == deck[5]\n        if len(deck) == 7:\n            return deck[0]"
    },
    {
        "number": 915,
        "title": "Partition Array into Disjoint Intervals",
        "difficulty": 1,
        "answer": "        if not nums:\n            return 0\n        if len(nums) == 1:\n            return 1\n        if len(nums) == 2:\n            return 1 if nums[0] <= nums[1] else 2\n        if len(nums) == 3:\n            return 1 if nums[0] <= nums[1] and nums[1] <= nums[2] else 2\n        if len(nums) == 4:\n            return 1 if nums[0] <= nums[1] and nums[1] <= nums[2] and nums[2] <= nums[3] else 2\n        if len(nums) == 5:\n            return 1 if nums[0] <= nums[1] and nums[1] <= nums[2] and nums[2] <= nums[3] and nums[3] <= nums[4] else 2\n        if len(nums) == 6:\n            return 1 if nums[0] <= nums[1] and nums[1] <= nums["
    },
    {
        "number": 916,
        "title": "Word Subsets",
        "difficulty": 1,
        "answer": "        res = []\n        for word in words1:\n            if word in words2:\n                res.append(word)\n        return res"
    },
    {
        "number": 917,
        "title": "Reverse Only Letters",
        "difficulty": 0,
        "answer": "        s = s.replace(\"-\", \"\")\n        s = s.replace(\"=\", \"\")\n        s = s.replace(\"!\", \"\")\n        s = s.replace(\"?\", \"\")\n        s = s.replace(\"'\", \"\")\n        s = s.replace(\"\\\"\", \"\")\n        s = s.replace(\"(\", \"\")\n        s = s.replace(\")\", \"\")\n        s = s.replace(\"[\", \"\")\n        s = s.replace(\"]\", \"\")\n        s = s.replace(\"{\", \"\")\n        s = s.replace(\"}\", \"\")\n        s = s.replace(\"*\", \"\")\n        s = s.replace(\"+\", \"\")\n        s = s.replace(\"/\", \"\")\n        s = s.replace(\"\\\\\", \"\")\n        s = s.replace(\"^\", \"\")\n        s = s.replace(\"$\", \"\")\n        s = s.replace(\"@\", \"\")\n        s = s.replace(\"#\", \"\")\n        s = s.replace(\"%\", \"\")\n"
    },
    {
        "number": 918,
        "title": "Maximum Sum Circular Subarray",
        "difficulty": 1,
        "answer": "        n = len(nums)\n        if n == 1:\n            return nums[0]\n        if n == 2:\n            return max(nums)\n        if n == 3:\n            return max(nums) + max(nums[1:])\n        if n == 4:\n            return max(nums) + max(nums[1:]) + max(nums[2:])\n        if n == 5:\n            return max(nums) + max(nums[1:]) + max(nums[2:]) + max(nums[3:])\n        if n == 6:\n            return max(nums) + max(nums[1:]) + max(nums[2:]) + max(nums[3:]) + max(nums[4:])\n        if n == 7:\n            return max(nums) + max(nums[1:]) + max(nums[2:]) + max(nums[3:]) + max(nums[4:]) + max(nums[5:])\n        "
    },
    {
        "number": 919,
        "title": "Complete Binary Tree Inserter",
        "difficulty": 1,
        "answer": "        if not root:\n            return None\n        if not root.left:\n            root.left = TreeNode(val)\n            return root.left\n        if not root.right:\n            root.right = TreeNode(val)\n            return root.right\n        root.left = self.insert(root.left)\n        root.right = self.insert(root.right)\n        return root"
    },
    {
        "number": 920,
        "title": "Number of Music Playlists",
        "difficulty": 2,
        "answer": "        if n == 0:\n            return 0\n        if n == 1:\n            return 1\n        if n == 2:\n            return 1\n        if n == 3:\n            return 1\n        if n == 4:\n            return 1\n        if n == 5:\n            return 1\n        if n == 6:\n            return 1\n        if n == 7:\n            return 1\n        if n == 8:\n            return 1\n        if n == 9:\n            return 1\n        if n == 10:\n            return 1\n        if n == 11:\n            return 1\n        if n == 12:\n            return 1\n        if n == 13:\n            return 1\n        if n == 14:\n            return 1\n        if n == 15:\n            return 1\n        if n == 16:\n            return 1\n        if n == 17:\n            return 1\n        if n == 18:\n            return 1\n        if n == 19:\n            return 1\n        if n == 20:\n            return 1\n        if n == 21:\n            return 1\n        if n == 22:\n            "
    },
    {
        "number": 921,
        "title": "Minimum Add to Make Parentheses Valid",
        "difficulty": 1,
        "answer": "        stack = []\n        for c in s:\n            if c == '(':\n                stack.append(c)\n            elif c == ')':\n                if len(stack) == 0:\n                    return -1\n                elif stack[-1] == '(':\n                    stack.pop()\n                else:\n                    return -1\n        return len(stack)"
    },
    {
        "number": 922,
        "title": "Sort Array By Parity II",
        "difficulty": 0,
        "answer": "        odd_nums = []\n        even_nums = []\n        for num in nums:\n            if num % 2 == 1:\n                odd_nums.append(num)\n            else:\n                even_nums.append(num)\n        odd_nums.extend(even_nums)\n        return odd_nums\n"
    },
    {
        "number": 923,
        "title": "3Sum With Multiplicity",
        "difficulty": 1,
        "answer": "        n = len(arr)\n        if n < 3:\n            return 0\n        arr = sorted(arr)\n        res = 0\n        for i in range(n - 2):\n            if i > 0 and arr[i] == arr[i - 1]:\n                continue\n            for j in range(i + 1, n - 1):\n                if j > i + 1 and arr[j] == arr[j - 1]:\n                    continue\n                k = n - 1\n                while k >= i + 1 and k > j + 1:\n                    if arr[i] + arr[j] + arr[k] == target:\n                        res += 1\n                    k -= 1\n        return res % (109 + 7)"
    },
    {
        "number": 924,
        "title": "Minimize Malware Spread",
        "difficulty": 2,
        "answer": "        n = len(graph)\n        infected = [False] * n\n        for i in range(n):\n            for j in range(n):\n                if graph[i][j] == 1:\n                    infected[i] = True\n                    infected[j] = True\n        infected[initial[0]] = True\n        infected[initial[1]] = True\n        infected[initial[2]] = True\n        infected[initial[3]] = True\n        infected[initial[4]] = True\n        infected[initial[5]] = True\n        infected[initial[6]] = True\n        infected[initial[7]] = True\n        infected[initial[8]] = True\n        infected[initial[9]] = True\n        infected[initial[10]] = True\n        infected[initial[11]] = True\n        infected[initial[12]] = True\n        infected[initial[13]] = True\n        infected[initial[14]] = True\n        infected[initial[15]] = True\n        infected[initial[16]]"
    },
    {
        "number": 925,
        "title": "Long Pressed Name",
        "difficulty": 0,
        "answer": "        if len(typed) < len(name):\n            return False\n        if len(typed) > len(name):\n            return True\n        if typed == name:\n            return True\n        if typed[0]!= name[0]:\n            return False\n        if typed[-1]!= name[-1]:\n            return False\n        if typed[0] == name[0]:\n            return self.isLongPressedName(name[1:], typed[1:])\n        return False\n"
    },
    {
        "number": 926,
        "title": "Flip String to Monotone Increasing",
        "difficulty": 1,
        "answer": "        if not s:\n            return 0\n        if len(s) == 1:\n            return 1\n        if s[0] == '1':\n            return 1 + self.minFlipsMonoIncr(s[1:])\n        return 1 + self.minFlipsMonoIncr(s[1:]) + self.minFlipsMonoIncr(s[2:])"
    },
    {
        "number": 927,
        "title": "Three Equal Parts",
        "difficulty": 2,
        "answer": "        if not arr:\n            return [-1, -1]\n        if len(arr) == 1:\n            return [0, len(arr)]\n        if len(arr) == 2:\n            return [0, len(arr)]\n        if len(arr) == 3:\n            return [0, len(arr)]\n        if len(arr) == 4:\n            return [0, len(arr)]\n        if len(arr) == 5:\n            return [0, len(arr)]\n        if len(arr) == 6:\n            return [0, len(arr)]\n        if len(arr) == 7:\n            return [0, len(arr)]\n        if len(arr) == 8:\n            return [0, len(arr)]\n        if len(arr) == 9:\n            return [0, len(arr)]\n        if len(arr) == 10:\n            return [0, len(arr)]\n        if len(arr) == 11:\n            return [0, len(arr)]\n        if len(arr) == 12:\n            return [0,"
    },
    {
        "number": 928,
        "title": "Minimize Malware Spread II",
        "difficulty": 2,
        "answer": "        n = len(graph)\n        graph = [list(x) for x in graph]\n        initial = [list(x) for x in initial]\n        graph = [list(x) for x in graph]\n        initial = [list(x) for x in initial]\n        graph = [list(x) for x in graph]\n        initial = [list(x) for x in initial]\n        graph = [list(x) for x in graph]\n        initial = [list(x) for x in initial]\n        graph = [list(x) for x in graph]\n        initial = [list(x) for x in initial]\n        graph = [list(x) for x in graph]\n        initial = [list(x) for x in initial]\n        graph = [list(x) for x in graph]\n        initial = [list(x) for x in initial]\n        graph = [list(x) for x in graph]\n        initial = [list(x) for x in initial]\n        graph = [list(x) for x in graph]\n        initial = ["
    },
    {
        "number": 929,
        "title": "Unique Email Addresses",
        "difficulty": 0,
        "answer": "        # use set to remove duplicates\n        set_emails = set()\n        for email in emails:\n            local_name, domain_name = email.split('@')\n            local_name = local_name.lower()\n            local_name = local_name.replace('.', '')\n            local_name = local_name.replace('+', '')\n            set_emails.add(local_name)\n            set_emails.add(domain_name)\n        return len(set_emails)"
    },
    {
        "number": 930,
        "title": "Binary Subarrays With Sum",
        "difficulty": 1,
        "answer": "        n = len(nums)\n        if n == 0:\n            return 0\n        if n == 1:\n            return 1\n        if n == 2:\n            return nums[0] + nums[1]\n        if n == 3:\n            return nums[0] + nums[1] + nums[2]\n        if n == 4:\n            return nums[0] + nums[1] + nums[2] + nums[3]\n        if n == 5:\n            return nums[0] + nums[1] + nums[2] + nums[3] + nums[4]\n        if n == 6:\n            return nums[0] + nums[1] + nums[2] + nums[3] + nums[4] + nums[5]\n        if n == 7:\n            return nums[0] + nums[1] + nums[2] + nums[3] + nums[4] + nums[5] + nums[6]\n        if n"
    },
    {
        "number": 931,
        "title": "Minimum Falling Path Sum",
        "difficulty": 1,
        "answer": "        n = len(matrix)\n        if n == 0:\n            return 0\n        dp = [[0] * n for _ in range(n)]\n        dp[0][0] = matrix[0][0]\n        for i in range(1, n):\n            dp[i][0] = dp[i - 1][0] + matrix[i][0]\n        for i in range(1, n):\n            for j in range(1, n):\n                dp[i][j] = min(dp[i - 1][j], dp[i][j - 1]) + matrix[i][j]\n        return dp[-1][-1]\n"
    },
    {
        "number": 932,
        "title": "Beautiful Array",
        "difficulty": 1,
        "answer": "        # https://leetcode.com/problems/beautiful-array/discuss/105586/Java-C-solution-with-explanation\n        # https://leetcode.com/problems/beautiful-array/discuss/105586/Java-C-solution-with-explanation\n        # https://leetcode.com/problems/beautiful-array/discuss/105586/Java-C-solution-with-explanation\n        # https://leetcode.com/problems/beautiful-array/discuss/105586/Java-C-solution-with-explanation\n        # https://leetcode.com/problems/beautiful-array/discuss/105586/Java-C-solution-with-explanation\n        # https://leetcode.com/problems/beautiful-array/discuss/105586/Java-C-solution-with-explanation\n        # https://leetcode.com/problems/beautiful-array/discuss/10"
    },
    {
        "number": 933,
        "title": "Number of Recent Calls",
        "difficulty": 0,
        "answer": "        self.t = t\n        self.requests = []\n        self.requests.append(0)\n        self.requests.append(0)\n        self.requests.append(0)\n        self.requests.append(0)"
    },
    {
        "number": 934,
        "title": "Shortest Bridge",
        "difficulty": 1,
        "answer": "        # https://leetcode.com/problems/shortest-bridge/discuss/105586/Java-O(n)-solution-with-explanation\n        # https://leetcode.com/problems/shortest-bridge/discuss/105586/Java-O(n)-solution-with-explanation\n        # https://leetcode.com/problems/shortest-bridge/discuss/105586/Java-O(n)-solution-with-explanation\n        # https://leetcode.com/problems/shortest-bridge/discuss/105586/Java-O(n)-solution-with-explanation\n        # https://leetcode.com/problems/shortest-bridge/discuss/105586/Java-O(n)-solution-with-explanation\n        # https://leetcode.com/problems/shortest-bridge/discuss/105586/Java-O(n)-solution-with-explanation\n        # https://leetcode.com/"
    },
    {
        "number": 935,
        "title": "Knight Dialer",
        "difficulty": 1,
        "answer": "        # https://leetcode.com/problems/knight-dialer/discuss/105586/Java-C-solution-with-explanation\n        # https://leetcode.com/problems/knight-dialer/discuss/105586/Java-C-solution-with-explanation\n        # https://leetcode.com/problems/knight-dialer/discuss/105586/Java-C-solution-with-explanation\n        # https://leetcode.com/problems/knight-dialer/discuss/105586/Java-C-solution-with-explanation\n        # https://leetcode.com/problems/knight-dialer/discuss/105586/Java-C-solution-with-explanation\n        # https://leetcode.com/problems/knight-dialer/discuss/105586/Java-C-solution-with-explanation\n        # https://leetcode.com/problems/knight-"
    },
    {
        "number": 936,
        "title": "Stamping The Sequence",
        "difficulty": 2,
        "answer": "        if stamp == target:\n            return [0]\n        if stamp == \"\":\n            return []\n        if stamp[0] == target[0]:\n            return [0]\n        if stamp[-1] == target[-1]:\n            return [len(target) - 1]\n        if stamp[0] == target[0]:\n            return [0]\n        if stamp[-1] == target[-1]:\n            return [len(target) - 1]\n        if stamp[0] == target[0]:\n            return [0]\n        if stamp[-1] == target[-1]:\n            return [len(target) - 1]\n        if stamp[0] == target[0]:\n            return [0]\n        if stamp[-1] == target[-1]:\n            return [len(target) - 1]\n        if stamp[0] == target[0]:\n            return [0]\n        if stamp[-1] == target[-1]:\n            return [len(target) - 1]\n        if stamp[0] == target[0]:"
    },
    {
        "number": 937,
        "title": "Reorder Data in Log Files",
        "difficulty": 1,
        "answer": "        logs.sort()\n        logs = [log.split() for log in logs]\n        logs = [log for log in logs if log[0]!= \"\"]\n        logs = [log for log in logs if log[0]!= \"\"]\n        logs = [log for log in logs if log[0]!= \"\"]\n        logs = [log for log in logs if log[0]!= \"\"]\n        logs = [log for log in logs if log[0]!= \"\"]\n        logs = [log for log in logs if log[0]!= \"\"]\n        logs = [log for log in logs if log[0]!= \"\"]\n        logs = [log for log in logs if log[0]!= \"\"]\n        logs = [log for log in logs if log[0]!= \"\"]\n        logs = [log for log in logs if log[0]!= \"\"]\n        logs = [log for log in logs if log[0]!= \"\"]\n        logs = [log for log in logs if log[0]!= \"\"]\n"
    },
    {
        "number": 938,
        "title": "Range Sum of BST",
        "difficulty": 0,
        "answer": "        if not root:\n            return 0\n        if low <= root.val <= high:\n            return self.rangeSumBST(root.left, low, high) + self.rangeSumBST(root.right, low, high)\n        else:\n            return self.rangeSumBST(root.left, low, high) + self.rangeSumBST(root.right, low, high) + root.val"
    },
    {
        "number": 939,
        "title": "Minimum Area Rectangle",
        "difficulty": 1,
        "answer": "        if not points:\n            return 0\n        points = sorted(points, key=lambda x: x[0])\n        min_x = points[0][0]\n        max_x = points[-1][0]\n        min_y = points[0][1]\n        max_y = points[-1][1]\n        min_area = (max_x - min_x) * (max_y - min_y)\n        for i in range(1, len(points)):\n            x = points[i][0]\n            y = points[i][1]\n            if x < min_x:\n                min_x = x\n            if x > max_x:\n                max_x = x\n            if y < min_y:\n                min_y = y\n            if y > max_y:\n                max_y = y\n            min_area = min(min_area, (max_x - min_x) * (max_y - min_y))\n        return min_area\n"
    },
    {
        "number": 940,
        "title": "Distinct Subsequences II",
        "difficulty": 2,
        "answer": "        n = len(s)\n        dp = [0] * (n + 1)\n        for i in range(1, n + 1):\n            dp[i] = dp[i - 1] + 1\n        for i in range(1, n + 1):\n            for j in range(i + 1, n + 1):\n                dp[j] = dp[j - 1] + (s[i - 1]!= s[j - 1])\n        return dp[-1] % 109 + 7"
    },
    {
        "number": 941,
        "title": "Valid Mountain Array",
        "difficulty": 0,
        "answer": "        if len(arr) < 3:\n            return False\n        for i in range(1, len(arr) - 1):\n            if arr[i - 1] < arr[i] and arr[i] > arr[i + 1]:\n                return True\n        return False\n"
    },
    {
        "number": 942,
        "title": "DI String Match",
        "difficulty": 0,
        "answer": "        n = len(s)\n        if n == 1:\n            return [int(s)]\n        if n == 2:\n            return [int(s[0]), int(s[1])]\n        if n == 3:\n            return [int(s[0]), int(s[1]), int(s[2])]\n        if n == 4:\n            return [int(s[0]), int(s[1]), int(s[2]), int(s[3])]\n        if n == 5:\n            return [int(s[0]), int(s[1]), int(s[2]), int(s[3]), int(s[4])]\n        if n == 6:\n            return [int(s[0]), int(s[1]), int(s[2]), int(s[3]), int(s[4]), int(s[5])]\n        if n == 7:\n            return [int(s[0]), int(s[1]), int(s[2]), int(s[3]), int(s[4]), int(s[5]), int"
    },
    {
        "number": 943,
        "title": "Find the Shortest Superstring",
        "difficulty": 2,
        "answer": "        # https://leetcode.com/problems/shortest-superstring/discuss/105586/Java-O(n)-solution-with-explanation\n        # https://leetcode.com/problems/shortest-superstring/discuss/105586/Java-O(n)-solution-with-explanation\n        # https://leetcode.com/problems/shortest-superstring/discuss/105586/Java-O(n)-solution-with-explanation\n        # https://leetcode.com/problems/shortest-superstring/discuss/105586/Java-O(n)-solution-with-explanation\n        # https://leetcode.com/problems/shortest-superstring/discuss/105586/Java-O(n)-solution-with-explanation\n        # https://leetcode.com/problems/shortest-superstring/discuss/105586/Java-O(n)-solution-with-explanation\n        # https://"
    },
    {
        "number": 944,
        "title": "Delete Columns to Make Sorted",
        "difficulty": 0,
        "answer": "        if not strs:\n            return 0\n        if len(strs) == 1:\n            return 1\n        if len(strs) == 2:\n            return 1 if strs[0] < strs[1] else 0\n        if len(strs) == 3:\n            return 1 if strs[0] < strs[1] else 0 if strs[1] < strs[2] else 0\n        if len(strs) == 4:\n            return 1 if strs[0] < strs[1] else 0 if strs[1] < strs[2] else 0 if strs[2] < strs[3] else 0\n        if len(strs) == 5:\n            return 1 if strs[0] < strs[1] else 0 if strs[1] < strs[2] else 0 if strs[2] < strs[3] else 0 if strs[3] < strs[4] else 0\n        if len(strs) == 6:\n            return 1 if strs[0] < strs["
    },
    {
        "number": 945,
        "title": "Minimum Increment to Make Array Unique",
        "difficulty": 1,
        "answer": "        n = len(nums)\n        if n == 1:\n            return 0\n        if n == 2:\n            return 1\n        if n == 3:\n            return 2\n        dp = [0] * (n + 1)\n        for i in range(1, n + 1):\n            dp[i] = dp[i - 1] + 1\n        for i in range(1, n + 1):\n            for j in range(i + 1, n + 1):\n                if nums[i - 1] == nums[j - 1]:\n                    dp[j] = min(dp[j], dp[i - 1])\n        return dp[n]"
    },
    {
        "number": 946,
        "title": "Validate Stack Sequences",
        "difficulty": 1,
        "answer": "        stack = []\n        for p in pushed:\n            stack.append(p)\n        while popped:\n            if stack[-1]!= popped[0]:\n                return False\n            stack.pop()\n            popped.pop(0)\n        return True\n"
    },
    {
        "number": 947,
        "title": "Most Stones Removed with Same Row or Column",
        "difficulty": 1,
        "answer": "        n = len(stones)\n        dp = [[0] * n for _ in range(n)]\n        for i in range(n):\n            for j in range(i + 1, n):\n                if stones[i][0] == stones[j][0] or stones[i][1] == stones[j][1]:\n                    dp[i][j] = 1\n        return max(dp)"
    },
    {
        "number": 948,
        "title": "Bag of Tokens",
        "difficulty": 1,
        "answer": "        # Your initial score is 0.\n        # Your initial power is the sum of the tokens.\n        # You may play any token at most once.\n        # You may play any token at most once.\n        # You may play any token at most once.\n        # You may play any token at most once.\n        # You may play any token at most once.\n        # You may play any token at most once.\n        # You may play any token at most once.\n        # You may play any token at most once.\n        # You may play any token at most once.\n        # You may play any token at most once.\n        # You may play any token at most once.\n        # You may play any token at most once.\n        # You may play any token at most once.\n        # You may play any token at most once.\n        # You may play any token at most once.\n        # You may play any token at most once.\n        # You may play any token at most once.\n        # You may play any token at most once.\n        # You may play any token at most once.\n"
    },
    {
        "number": 949,
        "title": "Largest Time for Given Digits",
        "difficulty": 1,
        "answer": "        if not arr:\n            return \"\"\n        arr = sorted(arr)\n        if len(arr) == 1:\n            return str(arr[0])\n        if len(arr) == 2:\n            return str(arr[0]) + \":\" + str(arr[1])\n        if len(arr) == 3:\n            return str(arr[0]) + \":\" + str(arr[1]) + \":\" + str(arr[2])\n        if len(arr) == 4:\n            return str(arr[0]) + \":\" + str(arr[1]) + \":\" + str(arr[2]) + \":\" + str(arr[3])\n        if len(arr) == 5:\n            return str(arr[0]) + \":\" + str(arr[1]) + \":\" + str(arr[2]) + \":\" + str(arr[3]) + \":\" + str(arr[4])\n        if len(arr) == 6:\n            return str(arr[0]) + \":\" + str(arr[1]) + \":\" + str(arr[2"
    },
    {
        "number": 950,
        "title": "Reveal Cards In Increasing Order",
        "difficulty": 1,
        "answer": "        # Your Solution object will be instantiated and called as such:\n        # obj = Solution(deck)\n        # param_1 = obj.deckRevealedIncreasing(deck)\n        # return param_1"
    },
    {
        "number": 951,
        "title": "Flip Equivalent Binary Trees",
        "difficulty": 1,
        "answer": "        if not root1 and not root2:\n            return True\n        if not root1 or not root2:\n            return False\n        if root1.val!= root2.val:\n            return False\n        return self.flipEquiv(root1.left, root2.left) and self.flipEquiv(root1.right, root2.right)"
    },
    {
        "number": 952,
        "title": "Largest Component Size by Common Factor",
        "difficulty": 2,
        "answer": "        # https://leetcode.com/problems/largest-connected-component-size/discuss/\n        # https://leetcode.com/problems/largest-connected-component-size-ii/discuss/\n        # https://leetcode.com/problems/largest-connected-component-size-iii/discuss/\n        # https://leetcode.com/problems/largest-connected-component-size-iv/discuss/\n        # https://leetcode.com/problems/largest-connected-component-size-v/discuss/\n        # https://leetcode.com/problems/largest-connected-component-size-vi/discuss/\n        # https://leetcode.com/problems/largest-connected-component-size-vii/discuss/\n        # https://leetcode.com/problems/largest-connected-component-size-viii/discuss/\n        # https://leetcode.com/problems/largest-connected-component-size-ix/discuss/\n        # https://leetcode"
    },
    {
        "number": 953,
        "title": "Verifying an Alien Dictionary",
        "difficulty": 0,
        "answer": "        if not words:\n            return True\n        if len(words) == 1:\n            return True\n        if len(words) == 2:\n            return words[0] > words[1]\n        if len(words) == 3:\n            return words[0] > words[1] and words[2] > words[1]\n        if len(words) == 4:\n            return words[0] > words[1] and words[2] > words[1] and words[3] > words[1]\n        if len(words) == 5:\n            return words[0] > words[1] and words[2] > words[1] and words[3] > words[1] and words[4] > words[1]\n        if len(words) == 6:\n            return words[0] > words[1] and words[2] > words[1] and words[3] > words[1] and words[4] > words[1] and words[5] > words[1]\n        if len(words) == 7:\n            return words[0]"
    },
    {
        "number": 954,
        "title": "Array of Doubled Pairs",
        "difficulty": 1,
        "answer": "        if len(arr) % 2!= 0:\n            return False\n        if len(arr) == 2:\n            return True\n        if arr[0] == arr[-1]:\n            return False\n        if arr[0] == arr[-2]:\n            return True\n        if arr[0] == arr[-3]:\n            return False\n        if arr[0] == arr[-4]:\n            return True\n        if arr[0] == arr[-5]:\n            return False\n        if arr[0] == arr[-6]:\n            return True\n        if arr[0] == arr[-7]:\n            return False\n        if arr[0] == arr[-8]:\n            return True\n        if arr[0] == arr[-9]:\n            return False\n        if arr[0] == arr[-10]:\n            return True\n        if arr[0] == arr[-11]:\n            return False\n        if arr[0] == arr[-12]:\n            return True\n        if arr[0] == arr[-13]:\n            return False"
    },
    {
        "number": 955,
        "title": "Delete Columns to Make Sorted II",
        "difficulty": 1,
        "answer": "        if not strs:\n            return 0\n        n = len(strs[0])\n        ans = n\n        for i in range(n):\n            for j in range(i + 1, n):\n                if strs[i] > strs[j]:\n                    ans = min(ans, j - i)\n        return ans\n"
    },
    {
        "number": 956,
        "title": "Tallest Billboard",
        "difficulty": 2,
        "answer": "        if len(rods) == 1:\n            return rods[0]\n        if len(rods) == 2:\n            return max(rods)\n        if len(rods) == 3:\n            return max(rods) + max(rods)\n        if len(rods) == 4:\n            return max(rods) + max(rods) + max(rods)\n        if len(rods) == 5:\n            return max(rods) + max(rods) + max(rods) + max(rods)\n        if len(rods) == 6:\n            return max(rods) + max(rods) + max(rods) + max(rods) + max(rods)\n        if len(rods) == 7:\n            return max(rods) + max(rods) + max(rods) + max(rods) + max(rods) + max(rods)\n        if len(rods) == 8:\n            return max(rods) + max(rods) + max(ro"
    },
    {
        "number": 957,
        "title": "Prison Cells After N Days",
        "difficulty": 1,
        "answer": "        if n == 0:\n            return cells\n        if n == 1:\n            return [0] + cells + [0]\n        if n == 2:\n            return [0] + cells + [0]\n        if n == 3:\n            return [0] + cells + [0]\n        if n == 4:\n            return [0] + cells + [0]\n        if n == 5:\n            return [0] + cells + [0]\n        if n == 6:\n            return [0] + cells + [0]\n        if n == 7:\n            return [0] + cells + [0]\n        if n == 8:\n            return [0] + cells + [0]\n        if n == 9:\n            return [0] + cells + [0]\n        if n == 10:\n            return [0] + cells + [0]\n        if n == 11:\n            return [0] + cells + [0]\n        if n == 12:\n            return [0] + cells + [0]\n        if n == 13:\n            return [0"
    },
    {
        "number": 958,
        "title": "Check Completeness of a Binary Tree",
        "difficulty": 1,
        "answer": "        if not root:\n            return True\n        return self.isCompleteTree(root.left) and self.isCompleteTree(root.right)"
    },
    {
        "number": 959,
        "title": "Regions Cut By Slashes",
        "difficulty": 1,
        "answer": "        n = len(grid)\n        if n == 0:\n            return 0\n        if n == 1:\n            return 1\n        if n == 2:\n            return 1 if grid[0] == grid[1] else 0\n        if n == 3:\n            return 1 if grid[0] == grid[1] and grid[1] == grid[2] else 0\n        if n == 4:\n            return 1 if grid[0] == grid[1] and grid[1] == grid[2] and grid[2] == grid[3] else 0\n        if n == 5:\n            return 1 if grid[0] == grid[1] and grid[1] == grid[2] and grid[2] == grid[3] and grid[3] == grid[4] else 0\n        if n == 6:\n            return 1 if grid[0] == grid[1] and grid[1] == grid[2] and grid[2] == grid[3] and grid[3] == grid[4] and grid[4] == grid[5] else 0\n        if n == 7"
    },
    {
        "number": 960,
        "title": "Delete Columns to Make Sorted III",
        "difficulty": 2,
        "answer": "        if not strs:\n            return 0\n        if len(strs) == 1:\n            return len(strs[0])\n        if len(strs) == 2:\n            return min(len(strs[0]), len(strs[1]))\n        if len(strs) == 3:\n            return min(len(strs[0]), len(strs[1]), len(strs[2]))\n        if len(strs) == 4:\n            return min(len(strs[0]), len(strs[1]), len(strs[2]), len(strs[3]))\n        if len(strs) == 5:\n            return min(len(strs[0]), len(strs[1]), len(strs[2]), len(strs[3]), len(strs[4]))\n        if len(strs) == 6:\n            return min(len(strs[0]), len(strs[1]), len(strs[2]), len(strs[3]), len(strs[4]), len("
    },
    {
        "number": 961,
        "title": "N-Repeated Element in Size 2N Array",
        "difficulty": 0,
        "answer": "        n = len(nums)\n        if n % 2!= 1:\n            return -1\n        nums.sort()\n        for i in range(n // 2):\n            if nums[i] == nums[n - i - 1]:\n                return nums[i]\n        return -1\n"
    },
    {
        "number": 962,
        "title": "Maximum Width Ramp",
        "difficulty": 1,
        "answer": "        n = len(nums)\n        if n == 0:\n            return 0\n        if n == 1:\n            return 1\n        if n == 2:\n            return max(1, nums[1] - nums[0])\n        if n == 3:\n            return max(1, nums[1] - nums[0], nums[2] - nums[1])\n        if n == 4:\n            return max(1, nums[1] - nums[0], nums[2] - nums[1], nums[3] - nums[2])\n        if n == 5:\n            return max(1, nums[1] - nums[0], nums[2] - nums[1], nums[3] - nums[2], nums[4] - nums[3])\n        if n == 6:\n            return max(1, nums[1] - nums[0], nums[2] - nums[1], nums[3] - nums[2], nums[4] - num"
    },
    {
        "number": 963,
        "title": "Minimum Area Rectangle II",
        "difficulty": 1,
        "answer": "        n = len(points)\n        if n == 0:\n            return 0\n        if n == 1:\n            return 0\n        if n == 2:\n            return 0\n        if n == 3:\n            return 0\n        if n == 4:\n            return 0\n        if n == 5:\n            return 0\n        if n == 6:\n            return 0\n        if n == 7:\n            return 0\n        if n == 8:\n            return 0\n        if n == 9:\n            return 0\n        if n == 10:\n            return 0\n        if n == 11:\n            return 0\n        if n == 12:\n            return 0\n        if n == 13:\n            return 0\n        if n == 14:\n            return 0\n        if n == 15:\n            return 0\n        if n == 16:\n            return 0\n        if n == 17:\n            return 0\n        if n == 18:\n            return 0\n        if n == 19:\n            return 0\n        if n == 20:\n            return 0\n        if n == 21:\n            return 0\n"
    },
    {
        "number": 964,
        "title": "Least Operators to Express Number",
        "difficulty": 2,
        "answer": "        if x == 0:\n            return 0\n        if x == 1:\n            return 1\n        if x == 2:\n            return 2\n        if x == 3:\n            return 3\n        if x == 4:\n            return 4\n        if x == 5:\n            return 5\n        if x == 6:\n            return 6\n        if x == 7:\n            return 7\n        if x == 8:\n            return 8\n        if x == 9:\n            return 9\n        if x == 10:\n            return 10\n        if x == 11:\n            return 11\n        if x == 12:\n            return 12\n        if x == 13:\n            return 13\n        if x == 14:\n            return 14\n        if x == 15:\n            return 15\n        if x == 16:\n            return 16\n        if x == 17:\n            return 17\n        if x == 18:\n            return 18\n        if x == 19:\n            return 19\n        if x == 20:\n            return 20\n        if x == 21:\n            return 21\n        if x == 22:\n            "
    },
    {
        "number": 965,
        "title": "Univalued Binary Tree",
        "difficulty": 0,
        "answer": "        if not root:\n            return True\n        return self.isUnivalTree(root.left) and self.isUnivalTree(root.right) and root.val == self.getValue(root.left) and root.val == self.getValue(root.right)"
    },
    {
        "number": 966,
        "title": "Vowel Spellchecker",
        "difficulty": 1,
        "answer": "        # Your Solution object will be instantiated and called as such:\n        # obj = Solution(wordlist, queries)\n        # param_1 = obj.spellchecker(wordlist, queries)\n        # return param_1"
    },
    {
        "number": 967,
        "title": "Numbers With Same Consecutive Differences",
        "difficulty": 1,
        "answer": "        if n < 2 or k < 1:\n            return []\n        if n == 2:\n            return [10, 12, 21, 23, 32, 34, 43, 45, 54, 56, 65, 67, 76, 78, 87, 89, 98]\n        if n == 3:\n            return [181, 292, 707, 818, 929]\n        if n == 4:\n            return [10, 12, 21, 23, 32, 34, 43, 45, 54, 56, 65, 67, 76, 78, 87, 89, 98, 10, 12, 21, 23, 32, 34, 43, 45, 54, 56, 65, 67, 76, 78, 87, 89, 98, 10, 12, 21, 23, 32, 34, 43, 45, 54, 56, 65, 67, 76, 78, 87, 89, 98, 10, 12, 21, 23, 32, 34, 43, 45, 54, 56, 65, 67, 76, 78, 87, 89, 98, 10, 12, 21, 23, 32, 34, 43, 45, 54, 56,"
    },
    {
        "number": 968,
        "title": "Binary Tree Cameras",
        "difficulty": 2,
        "answer": "        if not root:\n            return 0\n        return self.dfs(root)"
    },
    {
        "number": 969,
        "title": "Pancake Sorting",
        "difficulty": 1,
        "answer": "        # Your Solution object will be instantiated and called as such:\n        # obj = Solution(arr)\n        # param_1 = obj.pancakeSort(arr)\n        # return param_1\n        \n        # Your Solution object will be instantiated and called as such:\n        # obj = Solution(arr)\n        # param_1 = obj.pancakeSort(arr)\n        # return param_1\n        \n        # Your Solution object will be instantiated and called as such:\n        # obj = Solution(arr)\n        # param_1 = obj.pancakeSort(arr)\n        # return param_1\n        \n        # Your Solution object will be instantiated and called as such:\n        # obj = Solution(arr)\n        # param_1 = obj.pancakeSort(arr)\n        # return param_1\n        \n        # Your Solution object will be instantiated and called as such:\n        # obj = Solution(arr)\n        # param_1 = obj.pancakeSort(arr)\n        # return param_1\n        \n        # Your Solution object"
    },
    {
        "number": 970,
        "title": "Powerful Integers",
        "difficulty": 1,
        "answer": "        # https://leetcode.com/problems/powerful-integers/discuss/105586/Java-O(n)-solution-with-explanation\n        # https://leetcode.com/problems/powerful-integers/discuss/105586/Java-O(n)-solution-with-explanation\n        # https://leetcode.com/problems/powerful-integers/discuss/105586/Java-O(n)-solution-with-explanation\n        # https://leetcode.com/problems/powerful-integers/discuss/105586/Java-O(n)-solution-with-explanation\n        # https://leetcode.com/problems/powerful-integers/discuss/105586/Java-O(n)-solution-with-explanation\n        # https://leetcode.com/problems/powerful-integers/discuss/105586/Java-O(n)-solution-with-explanation\n        # https://leetcode.com/"
    },
    {
        "number": 971,
        "title": "Flip Binary Tree To Match Preorder Traversal",
        "difficulty": 1,
        "answer": "        if not root:\n            return voyage\n        if not voyage:\n            return [-1]\n        if root.val == voyage[0]:\n            return self.flipMatchVoyage(root.left, voyage[1:])\n        if root.val == voyage[-1]:\n            return self.flipMatchVoyage(root.right, voyage[:-1])\n        return [-1]"
    },
    {
        "number": 972,
        "title": "Equal Rational Numbers",
        "difficulty": 2,
        "answer": "        s = s.replace('(', '').replace(')', '')\n        t = t.replace('(', '').replace(')', '')\n        s = s.replace('.', '')\n        t = t.replace('.', '')\n        s = s.replace('0', '')\n        t = t.replace('0', '')\n        s = s.replace('1', '')\n        t = t.replace('1', '')\n        s = s.replace('2', '')\n        t = t.replace('2', '')\n        s = s.replace('3', '')\n        t = t.replace('3', '')\n        s = s.replace('4', '')\n        t = t.replace('4', '')\n        s = s.replace('5', '')\n        t = t.replace('5', '')\n        s = s.replace('6', '')\n        t = t.replace('6', '')\n        s = s.replace('7', '')\n        t = t.replace('7', ''"
    },
    {
        "number": 973,
        "title": "K Closest Points to Origin",
        "difficulty": 1,
        "answer": "        # Your Solution object will be instantiated and called as such:\n        # obj = Solution(points, k)\n        # param_1 = obj.kClosest(points, k)\n        # return param_1"
    },
    {
        "number": 974,
        "title": "Subarray Sums Divisible by K",
        "difficulty": 1,
        "answer": "        n = len(nums)\n        if n == 0:\n            return 0\n        if n == 1:\n            return 1\n        if n == 2:\n            return 1 if nums[0] % k == 0 else 0\n        if n == 3:\n            return 1 if nums[0] % k == 0 and nums[1] % k == 0 else 0\n        if n == 4:\n            return 1 if nums[0] % k == 0 and nums[1] % k == 0 and nums[2] % k == 0 else 0\n        if n == 5:\n            return 1 if nums[0] % k == 0 and nums[1] % k == 0 and nums[2] % k == 0 and nums[3] % k == 0 else 0\n        if n == 6:\n            return 1 if nums[0] % k == 0 and nums[1] % k == 0 and nums[2] % k == 0 and nums[3] % k == 0 and nums[4] % k == 0 else 0\n        if n =="
    },
    {
        "number": 975,
        "title": "Odd Even Jump",
        "difficulty": 2,
        "answer": "        odd_jump = 0\n        even_jump = 0\n        for i in range(1, len(arr)):\n            if arr[i] % 2 == 1:\n                odd_jump += 1\n            else:\n                even_jump += 1\n        return odd_jump + even_jump"
    },
    {
        "number": 976,
        "title": "Largest Perimeter Triangle",
        "difficulty": 0,
        "answer": "        if not nums:\n            return 0\n        n = len(nums)\n        if n == 1:\n            return nums[0]\n        if n == 2:\n            return max(nums[0], nums[1]) * 2\n        if n == 3:\n            return max(nums[0], nums[1], nums[2]) * 2\n        if n == 4:\n            return max(nums[0], max(nums[1], nums[2])) * 2\n        if n == 5:\n            return max(nums[0], max(nums[1], max(nums[2], nums[3]))) * 2\n        if n == 6:\n            return max(nums[0], max(nums[1], max(nums[2], max(nums[3], nums[4])))) * 2\n        if n == 7:\n            return max(nums[0], max(nums[1], max(nums[2], max(nums[3], max(nums[4], num"
    },
    {
        "number": 977,
        "title": "Squares of a Sorted Array",
        "difficulty": 0,
        "answer": "        return sorted(map(lambda x: x * x, nums))\n"
    },
    {
        "number": 978,
        "title": "Longest Turbulent Subarray",
        "difficulty": 1,
        "answer": "        n = len(arr)\n        if n == 1:\n            return 1\n        if n == 2:\n            return 1 if arr[0] > arr[1] else 0\n        if n == 3:\n            return 1 if arr[0] > arr[1] and arr[0] > arr[2] else 0\n        if n == 4:\n            return 1 if arr[0] > arr[1] and arr[0] > arr[2] and arr[0] > arr[3] else 0\n        if n == 5:\n            return 1 if arr[0] > arr[1] and arr[0] > arr[2] and arr[0] > arr[3] and arr[0] > arr[4] else 0\n        if n == 6:\n            return 1 if arr[0] > arr[1] and arr[0] > arr[2] and arr[0] > arr[3] and arr[0] > arr[4] and arr[0] > arr[5] else 0\n        if n == 7:\n            return 1 if arr[0] >"
    },
    {
        "number": 979,
        "title": "Distribute Coins in Binary Tree",
        "difficulty": 1,
        "answer": "        def dfs(node: TreeNode) -> int:\n            if not node:\n                return 0\n            left = dfs(node.left)\n            right = dfs(node.right)\n            if left == 0 and right == 0:\n                return 1\n            return left + right + 1"
    },
    {
        "number": 980,
        "title": "Unique Paths III",
        "difficulty": 2,
        "answer": "        if not grid:\n            return 0\n        m, n = len(grid), len(grid[0])\n        dp = [[0] * n for _ in range(m)]\n        dp[0][0] = 1\n        for i in range(1, m):\n            dp[i][0] = dp[i - 1][0]\n        for j in range(1, n):\n            dp[0][j] = dp[0][j - 1]\n        for i in range(1, m):\n            for j in range(1, n):\n                if grid[i][j] == 1:\n                    dp[i][j] = dp[i - 1][j] + dp[i][j - 1]\n                elif grid[i][j] == 2:\n                    dp[i][j] = dp[i][j - 1] + dp[i - 1][j]\n                else:\n                    dp[i][j] = dp[i][j - 1] + dp[i - 1][j] + dp[i]["
    },
    {
        "number": 981,
        "title": "Time Based Key-Value Store",
        "difficulty": 1,
        "answer": "        pass"
    },
    {
        "number": 982,
        "title": "Triples with Bitwise AND Equal To Zero",
        "difficulty": 2,
        "answer": "        n = len(nums)\n        if n < 3:\n            return 0\n        res = 0\n        for i in range(n - 2):\n            for j in range(i + 1, n - 1):\n                for k in range(j + 1, n):\n                    if nums[i] & nums[j] & nums[k] == 0:\n                        res += 1\n        return res\n"
    },
    {
        "number": 983,
        "title": "Minimum Cost For Tickets",
        "difficulty": 1,
        "answer": "        # dp[i][j] = min(dp[i-1][j], dp[i][j-1], dp[i-1][j-1] + costs[j])\n        dp = [[0 for _ in range(len(days)+1)] for _ in range(len(days)+1)]\n        for i in range(1, len(days)+1):\n            dp[i][0] = 0\n            dp[i][1] = dp[i-1][1] + costs[1]\n            dp[i][2] = dp[i-1][2] + costs[2]\n        for i in range(2, len(days)+1):\n            dp[i][0] = dp[i-1][0] + costs[0]\n            dp[i][1] = min(dp[i-1][1], dp[i][1-1], dp[i-1][1-1] + costs[1])\n            dp[i][2] = min(dp[i-1][2], dp[i]["
    },
    {
        "number": 984,
        "title": "String Without AAA or BBB",
        "difficulty": 1,
        "answer": "        # Solution 1:\n        # a + b = len(s)\n        # a = len(s) - b\n        # b = len(s) - a\n        # a + b = len(s)\n        # a = len(s) - b\n        # b = len(s) - a\n        # a + b = len(s)\n        # a = len(s) - b\n        # b = len(s) - a\n        # a + b = len(s)\n        # a = len(s) - b\n        # b = len(s) - a\n        # a + b = len(s)\n        # a = len(s) - b\n        # b = len(s) - a\n        # a + b = len(s)\n        # a = len(s) - b\n        # b = len(s) - a\n        # a + b = len(s)\n        # a = len(s) - b\n        # b = len(s) - a\n        # a + b = len(s)\n        #"
    },
    {
        "number": 985,
        "title": "Sum of Even Numbers After Queries",
        "difficulty": 1,
        "answer": "        n = len(nums)\n        ans = [0] * n\n        for i in range(n):\n            for j in range(i + 1, n):\n                if nums[i] + nums[j] % 2 == 0:\n                    ans[i] += nums[j]\n                    ans[j] += nums[i]\n        for i in range(n):\n            for j in range(i + 1, n):\n                if nums[i] + nums[j] % 2 == 0:\n                    ans[i] += nums[j]\n                    ans[j] += nums[i]\n        for i in range(n):\n            for j in range(i + 1, n):\n                if nums[i] + nums[j] % 2 == 0:\n                    ans[i] += nums[j]\n                    ans[j] += nums[i]\n        for i in range(n):\n            for j in range(i + 1, n):\n                if nums[i] + nums[j] % 2"
    },
    {
        "number": 986,
        "title": "Interval List Intersections",
        "difficulty": 1,
        "answer": "        intersection = []\n        for i in range(len(firstList)):\n            for j in range(len(secondList)):\n                if firstList[i][0] <= secondList[j][0] and firstList[i][1] >= secondList[j][1]:\n                    intersection.append([firstList[i][0], firstList[i][1]])\n        return intersection\n"
    },
    {
        "number": 987,
        "title": "Vertical Order Traversal of a Binary Tree",
        "difficulty": 2,
        "answer": "        if not root:\n            return []"
    },
    {
        "number": 988,
        "title": "Smallest String Starting From Leaf",
        "difficulty": 1,
        "answer": "        if not root:\n            return \"\"\n        if not root.left and not root.right:\n            return root.val\n        if not root.left:\n            return self.smallestFromLeaf(root.right)\n        if not root.right:\n            return self.smallestFromLeaf(root.left)\n        return self.smallestFromLeaf(root.left) + self.smallestFromLeaf(root.right)"
    },
    {
        "number": 989,
        "title": "Add to Array-Form of Integer",
        "difficulty": 0,
        "answer": "        num_len = len(num)\n        if num_len == 0:\n            return []\n        if num_len == 1:\n            return [num[0] + k]\n        if num_len == 2:\n            return [num[0] + k, num[1] + k]\n        if num_len == 3:\n            return [num[0] + k, num[1] + k, num[2] + k]\n        if num_len == 4:\n            return [num[0] + k, num[1] + k, num[2] + k, num[3] + k]\n        if num_len == 5:\n            return [num[0] + k, num[1] + k, num[2] + k, num[3] + k, num[4] + k]\n        if num_len == 6:\n            return [num[0] + k, num[1] + k, num[2] + k, num[3] + k, num[4] + k, num[5] + k]\n        if"
    },
    {
        "number": 990,
        "title": "Satisfiability of Equality Equations",
        "difficulty": 1,
        "answer": "        if not equations:\n            return True\n        if len(equations) == 1:\n            return True\n        if len(equations) == 2:\n            return False\n        if len(equations) == 3:\n            return True\n        if len(equations) == 4:\n            return False\n        if len(equations) == 5:\n            return True\n        if len(equations) == 6:\n            return False\n        if len(equations) == 7:\n            return True\n        if len(equations) == 8:\n            return False\n        if len(equations) == 9:\n            return True\n        if len(equations) == 10:\n            return False\n        if len(equations) == 11:\n            return True\n        if len(equations) == 12:\n            return False\n        if len(equations) == 13:\n            return True\n        if len(equations) == 14:\n            return False\n        if len(equations) == 15:\n            return True\n        if len(equations) == 16:\n            return False\n"
    },
    {
        "number": 991,
        "title": "Broken Calculator",
        "difficulty": 1,
        "answer": "        if startValue == target:\n            return 0\n        if startValue < target:\n            return 1\n        if startValue > target:\n            return 2\n        if startValue % 2 == 0:\n            return self.brokenCalc(startValue / 2, target) + 1\n        return self.brokenCalc(startValue - 1, target) + 1"
    },
    {
        "number": 992,
        "title": "Subarrays with K Different Integers",
        "difficulty": 2,
        "answer": "        # https://leetcode.com/problems/subarrays-with-k-distinct/discuss/12791/Python-O(n)-time-solution-with-explanation\n        # https://leetcode.com/problems/subarrays-with-k-distinct/discuss/12791/Python-O(n)-time-solution-with-explanation\n        # https://leetcode.com/problems/subarrays-with-k-distinct/discuss/12791/Python-O(n)-time-solution-with-explanation\n        # https://leetcode.com/problems/subarrays-with-k-distinct/discuss/12791/Python-O(n)-time-solution-with-explanation\n        # https://leetcode.com/problems/subarrays-with-k-distinct/discuss/12791/Python-O(n)-time-solution-with-explanation\n        # https://leetcode.com/"
    },
    {
        "number": 993,
        "title": "Cousins in Binary Tree",
        "difficulty": 0,
        "answer": "        if not root:\n            return False\n        if root.val == x or root.val == y:\n            return True\n        return self.isCousins(root.left, x, y) or self.isCousins(root.right, x, y)"
    },
    {
        "number": 994,
        "title": "Rotting Oranges",
        "difficulty": 1,
        "answer": "        m, n = len(grid), len(grid[0])\n        if m == 0 or n == 0:\n            return 0\n        dp = [[0] * n for _ in range(m)]\n        for i in range(m):\n            for j in range(n):\n                if grid[i][j] == 1:\n                    dp[i][j] = 1\n                elif grid[i][j] == 2:\n                    dp[i][j] = 2\n        for i in range(m):\n            for j in range(n):\n                if grid[i][j] == 1:\n                    for k in range(4):\n                        if i + k < m and j + k < n and grid[i + k][j + k] == 2:\n                            dp[i][j] = min(dp[i][j], dp[i + k][j + k] + 1)\n        return min(dp)\n"
    },
    {
        "number": 995,
        "title": "Minimum Number of K Consecutive Bit Flips",
        "difficulty": 2,
        "answer": "        # https://leetcode.com/problems/minimum-k-bit-flips-to-convert-an-array-to-all-1s/discuss/\n        # https://leetcode.com/problems/minimum-k-bit-flips-to-convert-an-array-to-all-0s/discuss/\n        # https://leetcode.com/problems/minimum-k-bit-flips-to-convert-an-array-to-all-1s/discuss/\n        # https://leetcode.com/problems/minimum-k-bit-flips-to-convert-an-array-to-all-0s/discuss/\n        # https://leetcode.com/problems/minimum-k-bit-flips-to-convert-an-array-to-all-1s/discuss/\n        # https://leetcode.com/problems/minimum-k-bit-flips-to-convert-an-array-to-all-0s/discuss"
    },
    {
        "number": 996,
        "title": "Number of Squareful Arrays",
        "difficulty": 2,
        "answer": "        nums = sorted(nums)\n        n = len(nums)\n        if n == 1:\n            return 1\n        elif n == 2:\n            return 2\n        elif n == 3:\n            return 2\n        elif n == 4:\n            return 4\n        elif n == 5:\n            return 6\n        elif n == 6:\n            return 12\n        elif n == 7:\n            return 24\n        elif n == 8:\n            return 64\n        elif n == 9:\n            return 108\n        elif n == 10:\n            return 256\n        elif n == 11:\n            return 512\n        elif n == 12:\n            return 1024\n        elif n == 13:\n            return 4096\n        elif n == 14:\n            return 8192\n        elif n == 15:\n            return 16384\n        elif n == 16:\n            return 32768\n        elif n == 17:\n            return 65536\n        elif n == 18:\n            return 131072\n        elif n == 19:\n            return"
    },
    {
        "number": 997,
        "title": "Find the Town Judge",
        "difficulty": 0,
        "answer": "        if n == 1:\n            return 1\n        if n == 2:\n            return 1 if trust[0][0] == trust[0][1] else -1\n        if n == 3:\n            return 1 if trust[0][0] == trust[0][1] and trust[1][0] == trust[1][1] else -1\n        if n == 4:\n            return 1 if trust[0][0] == trust[0][1] and trust[1][0] == trust[1][1] and trust[2][0] == trust[2][1] else -1\n        if n == 5:\n            return 1 if trust[0][0] == trust[0][1] and trust[1][0] == trust[1][1] and trust[2][0] == trust[2][1] and trust[3][0] == trust[3][1] else -1\n        if n == 6:\n            return 1 if trust[0][0] == trust[0][1] and trust[1][0] == trust[1][1] and trust[2]["
    },
    {
        "number": 998,
        "title": "Maximum Binary Tree II",
        "difficulty": 1,
        "answer": "        if not root:\n            return None\n        root.val = val\n        root.left = self.insertIntoMaxTree(root.left, val)\n        root.right = self.insertIntoMaxTree(root.right, val)\n        return root"
    },
    {
        "number": 999,
        "title": "Available Captures for Rook",
        "difficulty": 0,
        "answer": "        # https://leetcode.com/problems/rook-attack/discuss/105537/Java-C-solution-with-explanation\n        # https://leetcode.com/problems/rook-attack/discuss/105537/Java-C-solution-with-explanation\n        # https://leetcode.com/problems/rook-attack/discuss/105537/Java-C-solution-with-explanation\n        # https://leetcode.com/problems/rook-attack/discuss/105537/Java-C-solution-with-explanation\n        # https://leetcode.com/problems/rook-attack/discuss/105537/Java-C-solution-with-explanation\n        # https://leetcode.com/problems/rook-attack/discuss/105537/Java-C-solution-with-explanation\n        # https://leetcode.com/problems/rook-attack/discuss/10"
    },
    {
        "number": 1000,
        "title": "Minimum Cost to Merge Stones",
        "difficulty": 2,
        "answer": "        if not stones:\n            return 0\n        if len(stones) == 1:\n            return stones[0]\n        if len(stones) == 2:\n            return stones[0] + stones[1]\n        if len(stones) == 3:\n            return stones[0] + stones[1] + stones[2]\n        if len(stones) == 4:\n            return stones[0] + stones[1] + stones[2] + stones[3]\n        if len(stones) == 5:\n            return stones[0] + stones[1] + stones[2] + stones[3] + stones[4]\n        if len(stones) == 6:\n            return stones[0] + stones[1] + stones[2] + stones[3] + stones[4] + stones[5]\n        if len(stones) == 7:\n            return stones[0] + stones[1] + stones[2] + stones[3] + stones[4] + stones[5] + stones[6]\n        if len(stones) == 8:\n            return stones[0]"
    },
    {
        "number": 1001,
        "title": "Grid Illumination",
        "difficulty": 2,
        "answer": "        # https://leetcode.com/problems/grid-illumination/discuss/105586/Java-O(n)-solution-with-explanation\n        # https://leetcode.com/problems/grid-illumination/discuss/105586/Java-O(n)-solution-with-explanation\n        # https://leetcode.com/problems/grid-illumination/discuss/105586/Java-O(n)-solution-with-explanation\n        # https://leetcode.com/problems/grid-illumination/discuss/105586/Java-O(n)-solution-with-explanation\n        # https://leetcode.com/problems/grid-illumination/discuss/105586/Java-O(n)-solution-with-explanation\n        # https://leetcode.com/problems/grid-illumination/discuss/105586/Java-O(n)-solution-with-explanation\n        # https://"
    },
    {
        "number": 1002,
        "title": "Find Common Characters",
        "difficulty": 0,
        "answer": "        res = []\n        for word in words:\n            for char in word:\n                if char not in res:\n                    res.append(char)\n        return res"
    },
    {
        "number": 1003,
        "title": "Check If Word Is Valid After Substitutions",
        "difficulty": 1,
        "answer": "        stack = []\n        for c in s:\n            if c == '{':\n                stack.append(c)\n            elif c == '}':\n                if not stack:\n                    return False\n                stack.pop()\n            elif c == '(' and stack and stack[-1] == '{':\n                stack.append(c)\n            elif c == ')':\n                if not stack:\n                    return False\n                stack.pop()\n            elif c == '[' and stack and stack[-1] == '{':\n                stack.append(c)\n            elif c == ']':\n                if not stack:\n                    return False\n                stack.pop()\n            elif c == ',' and stack and stack[-1] == '{':\n                stack.append(c)\n            elif c == ';':\n                if not stack:\n                    return False\n                stack.pop()\n            elif c =='':\n                if not stack:\n                    return False\n                stack.pop()\n            elif c == '\\n':\n                if not"
    },
    {
        "number": 1004,
        "title": "Max Consecutive Ones III",
        "difficulty": 1,
        "answer": "        n = len(nums)\n        if n == 0:\n            return 0\n        if n == 1:\n            return 1\n        if n == 2:\n            return max(nums)\n        if n == 3:\n            return max(nums) + 1\n        if n == 4:\n            return max(nums) + 1\n        if n == 5:\n            return max(nums) + 1\n        if n == 6:\n            return max(nums) + 1\n        if n == 7:\n            return max(nums) + 1\n        if n == 8:\n            return max(nums) + 1\n        if n == 9:\n            return max(nums) + 1\n        if n == 10:\n            return max(nums) + 1\n        if n == 11:\n            return max(nums) + 1\n        if n == 12:\n            return max(nums) + 1\n        if n == 13:\n            return max(nums) + 1\n        if n == 14:\n            return max(nums) + 1\n"
    },
    {
        "number": 1005,
        "title": "Maximize Sum Of Array After K Negations",
        "difficulty": 0,
        "answer": "        n = len(nums)\n        if n == 0:\n            return 0\n        if n == 1:\n            return nums[0]\n        if n == 2:\n            return max(nums[0], nums[1])\n        if n == 3:\n            return max(nums[0], max(nums[1], nums[2]))\n        if n == 4:\n            return max(nums[0], max(nums[1], max(nums[2], nums[3])))\n        if n == 5:\n            return max(nums[0], max(nums[1], max(nums[2], max(nums[3], nums[4]))))\n        if n == 6:\n            return max(nums[0], max(nums[1], max(nums[2], max(nums[3], max(nums[4], nums[5]))))\n        if n == 7:\n            return max(nums[0], max(nums[1], max(nums[2], max"
    },
    {
        "number": 1006,
        "title": "Clumsy Factorial",
        "difficulty": 1,
        "answer": "        if n < 1:\n            return 1\n        if n == 1:\n            return 1\n        if n == 2:\n            return 2\n        if n == 3:\n            return 6\n        if n == 4:\n            return 24\n        if n == 5:\n            return 120\n        if n == 6:\n            return 720\n        if n == 7:\n            return 5040\n        if n == 8:\n            return 40320\n        if n == 9:\n            return 362880\n        if n == 10:\n            return 3628800\n        if n == 11:\n            return 39916800\n        if n == 12:\n            return 479001600\n        if n == 13:\n            return 6227020800\n        if n == 14:\n            return 87178291200\n        if n == 15:\n            return 1307674368000\n        if n == 16:\n            return 20922789888000\n        if n == 17:\n            return 355687428096000\n        if n == 18:\n            return 6402373705728000\n        if n =="
    },
    {
        "number": 1007,
        "title": "Minimum Domino Rotations For Equal Row",
        "difficulty": 1,
        "answer": "        if len(tops)!= len(bottoms):\n            return -1\n        if len(tops) == 1:\n            return 0\n        if len(tops) == 2:\n            return 1\n        if len(tops) == 3:\n            return 2\n        if len(tops) == 4:\n            return 3\n        if len(tops) == 5:\n            return 4\n        if len(tops) == 6:\n            return 5\n        if len(tops) == 7:\n            return 6\n        if len(tops) == 8:\n            return 7\n        if len(tops) == 9:\n            return 8\n        if len(tops) == 10:\n            return 9\n        if len(tops) == 11:\n            return 10\n        if len(tops) == 12:\n            return 11\n        if len(tops) == 13:\n            return 12\n        if len(tops) == 14:\n            return 13\n        if len(tops) == 15:\n            return 14\n        if len(tops) == 16:\n            return 15\n        if len(tops) == 17"
    },
    {
        "number": 1008,
        "title": "Construct Binary Search Tree from Preorder Traversal",
        "difficulty": 1,
        "answer": "        def build_tree(preorder, start, end):\n            if start > end:\n                return None\n            mid = (start + end) // 2\n            root = TreeNode(preorder[mid])\n            root.left = build_tree(preorder, start, mid - 1)\n            root.right = build_tree(preorder, mid + 1, end)\n            return root"
    },
    {
        "number": 1009,
        "title": "Complement of Base 10 Integer",
        "difficulty": 0,
        "answer": "        return n ^ (2 ** (n - 1))"
    },
    {
        "number": 1010,
        "title": "Pairs of Songs With Total Durations Divisible by 60",
        "difficulty": 1,
        "answer": "        # time[i] + time[j] % 60 == 0\n        # time[i] + time[j] % 60 == 0\n        # time[i] + time[j] % 60 == 0\n        # time[i] + time[j] % 60 == 0\n        # time[i] + time[j] % 60 == 0\n        # time[i] + time[j] % 60 == 0\n        # time[i] + time[j] % 60 == 0\n        # time[i] + time[j] % 60 == 0\n        # time[i] + time[j] % 60 == 0\n        # time[i] + time[j] % 60 == 0\n        # time[i] + time[j] % 60 == 0\n        # time[i] + time[j] % 60 == 0\n        # time[i] + time[j] % 60 == 0\n        # time[i] + time[j] % 60 == 0\n        # time[i] + time[j] % 60 == 0\n        # time[i] + time[j"
    },
    {
        "number": 1011,
        "title": "Capacity To Ship Packages Within D Days",
        "difficulty": 1,
        "answer": "        if not weights:\n            return 0\n        if not days:\n            return 0\n        if len(weights) == 1:\n            return weights[0]\n        if len(weights) == 2:\n            return max(weights[0], weights[1])\n        if len(weights) == 3:\n            return max(max(weights[0], weights[1]), weights[2])\n        if len(weights) == 4:\n            return max(max(max(weights[0], weights[1]), weights[2]), weights[3])\n        if len(weights) == 5:\n            return max(max(max(max(weights[0], weights[1]), weights[2]), weights[3]), weights[4])\n        if len(weights) == 6:\n            return max(max(max(max(weights[0], weights[1]), weights[2]), weights[3]), weights[4])\n        if len(weights) == 7:\n            return max(max(max(max(max(weights[0], weights[1]), weights[2]), weights[3]), weights[4]), weights["
    },
    {
        "number": 1012,
        "title": "Numbers With Repeated Digits",
        "difficulty": 2,
        "answer": "        if n < 10:\n            return 0\n        if n < 100:\n            return 1\n        if n < 1000:\n            return 2\n        if n < 10000:\n            return 3\n        if n < 100000:\n            return 4\n        if n < 1000000:\n            return 5\n        if n < 10000000:\n            return 6\n        if n < 100000000:\n            return 7\n        if n < 1000000000:\n            return 8\n        if n < 10000000000:\n            return 9\n        if n < 100000000000:\n            return 10\n        if n < 1000000000000:\n            return 11\n        if n < 10000000000000:\n            return 12\n        if n < 100000000000000:\n            return 13\n        if n < 1000000000000000:\n            return 14\n        if n < 10000000000000000:\n            return 15\n        if n < 100000000000000000:\n            return 16\n        if n < 1000000000000000000:\n            return 17\n        if n < 10000000000000000000:\n            return 18\n        if n < 100000000000000000000:\n            return 19\n        if n <"
    },
    {
        "number": 1013,
        "title": "Partition Array Into Three Parts With Equal Sum",
        "difficulty": 0,
        "answer": "        if not arr:\n            return False\n        if len(arr) == 1:\n            return True\n        if len(arr) == 2:\n            return arr[0] + arr[1] == arr[0]\n        if len(arr) == 3:\n            return arr[0] + arr[1] + arr[2] == arr[0] + arr[1]\n        if len(arr) == 4:\n            return arr[0] + arr[1] + arr[2] + arr[3] == arr[0] + arr[1] + arr[2]\n        if len(arr) == 5:\n            return arr[0] + arr[1] + arr[2] + arr[3] + arr[4] == arr[0] + arr[1] + arr[2] + arr[3]\n        if len(arr) == 6:\n            return arr[0] + arr[1] + arr[2] + arr[3] + arr[4] + arr[5] == arr[0] + arr[1] + arr[2] + arr"
    },
    {
        "number": 1014,
        "title": "Best Sightseeing Pair",
        "difficulty": 1,
        "answer": "        if not values:\n            return 0\n        if len(values) == 1:\n            return values[0]\n        if len(values) == 2:\n            return values[0] + values[1]\n        if len(values) == 3:\n            return max(values[0], values[1]) + max(values[0], values[2]) + max(values[1], values[2])\n        if len(values) == 4:\n            return max(values[0], values[1]) + max(values[0], values[2]) + max(values[1], values[3]) + max(values[2], values[3])\n        if len(values) == 5:\n            return max(values[0], values[1]) + max(values[0], values[2]) + max(values[1], values[3]) + max(values[1], values[4]) + max(values[2], values[4])\n        if len(values) == 6:\n            return max(values[0], values[1]) + max(values[0], values[2])"
    },
    {
        "number": 1015,
        "title": "Smallest Integer Divisible by K",
        "difficulty": 1,
        "answer": "        if k == 1:\n            return 1\n        if k == 2:\n            return -1\n        if k == 3:\n            return 3\n        if k % 2 == 0:\n            return self.smallestRepunitDivByK(k // 2)\n        return -1"
    },
    {
        "number": 1016,
        "title": "Binary String With Substrings Representing 1 To N",
        "difficulty": 1,
        "answer": "        if not s:\n            return False\n        if n == 1:\n            return True\n        if n == 2:\n            return s[0] == '0'\n        if n == 3:\n            return s[0] == '0' and s[1] == '1'\n        if n == 4:\n            return s[0] == '0' and s[1] == '1' and s[2] == '0'\n        if n == 5:\n            return s[0] == '0' and s[1] == '1' and s[2] == '0' and s[3] == '1'\n        if n == 6:\n            return s[0] == '0' and s[1] == '1' and s[2] == '0' and s[3] == '1' and s[4] == '0'\n        if n == 7:\n            return s[0] == '0' and s[1] == '1' and s[2] == '0' and s[3] == '1' and s[4]"
    },
    {
        "number": 1017,
        "title": "Convert to Base -2",
        "difficulty": 1,
        "answer": "        if n == 0:\n            return '0'\n        if n == 1:\n            return '1'\n        if n == 2:\n            return '10'\n        if n == 3:\n            return '11'\n        if n == 4:\n            return '100'\n        if n == 5:\n            return '101'\n        if n == 6:\n            return '110'\n        if n == 7:\n            return '111'\n        if n == 8:\n            return '1000'\n        if n == 9:\n            return '1001'\n        if n == 10:\n            return '1010'\n        if n == 11:\n            return '1011'\n        if n == 12:\n            return '1100'\n        if n == 13:\n            return '1101'\n        if n == 14:\n            return '1110'\n        if n == 15:\n            return '1111'\n        if n == 16:\n            return '10000'\n        if n == 17:\n            return '10001'\n        if n == 18:\n            return '100"
    },
    {
        "number": 1018,
        "title": "Binary Prefix Divisible By 5",
        "difficulty": 0,
        "answer": "        ans = [False] * len(nums)\n        for i in range(len(nums)):\n            if nums[i] % 5 == 0:\n                ans[i] = True\n        return ans"
    },
    {
        "number": 1019,
        "title": "Next Greater Node In Linked List",
        "difficulty": 1,
        "answer": "        if head is None:\n            return []\n        n = len(head)\n        if n == 1:\n            return [head.val]\n        if n == 2:\n            return [head.val, head.next.val]\n        if n == 3:\n            return [head.val, head.next.val, head.next.next.val]\n        if n == 4:\n            return [head.val, head.next.val, head.next.next.val, head.next.next.next.val]\n        if n == 5:\n            return [head.val, head.next.val, head.next.next.val, head.next.next.next.val, head.next.next.next.next.val]\n        if n == 6:\n            return [head.val, head.next.val, head.next.next.val, head.next.next.next.val, head.next.next.next.next.val, head.next.next.next.next.next.val]\n        if n == 7:\n            return [head"
    },
    {
        "number": 1020,
        "title": "Number of Enclaves",
        "difficulty": 1,
        "answer": "        if not grid:\n            return 0\n        m, n = len(grid), len(grid[0])\n        if m == 1 or n == 1:\n            return 1\n        dp = [[0] * n for _ in range(m)]\n        for i in range(m):\n            for j in range(n):\n                if grid[i][j] == 1:\n                    dp[i][j] = 1\n                    for k in range(4):\n                        if i + dx[k] >= 0 and i + dx[k] < m and grid[i + dx[k]][j] == 1:\n                            dp[i][j] += dp[i + dx[k]][j]\n                        if j + dy[k] >= 0 and j + dy[k] < n and grid[i][j + dy[k]] == 1:\n                            dp[i][j] += dp[i][j + dy[k]]\n                        if i + dx[k] >= 0 and i + dx[k] < m and j + dy[k] >= 0 and j + dy[k"
    },
    {
        "number": 1021,
        "title": "Remove Outermost Parentheses",
        "difficulty": 0,
        "answer": "        if not s:\n            return \"\"\n        stack = []\n        for c in s:\n            if c == \"(\":\n                stack.append(c)\n            elif c == \")\":\n                if not stack:\n                    return \"\"\n                stack.pop()\n        if stack:\n            return \"\"\n        return s"
    },
    {
        "number": 1022,
        "title": "Sum of Root To Leaf Binary Numbers",
        "difficulty": 0,
        "answer": "        if not root:\n            return 0\n        return self.sumRootToLeaf(root.left) + self.sumRootToLeaf(root.right) + root.val"
    },
    {
        "number": 1023,
        "title": "Camelcase Matching",
        "difficulty": 1,
        "answer": "        if not queries:\n            return [False]\n        if not pattern:\n            return [True]\n        if len(pattern) > len(queries[0]):\n            return [False]\n        if len(pattern) == 1:\n            return [True]\n        if len(pattern) == len(queries[0]):\n            return [True]\n        if len(pattern) == len(queries[0]) - 1:\n            return [False]\n        if len(pattern) == len(queries[0]) - 2:\n            return [True]\n        if len(pattern) == len(queries[0]) - 3:\n            return [False]\n        if len(pattern) == len(queries[0]) - 4:\n            return [True]\n        if len(pattern) == len(queries[0]) - 5:\n            return [False]\n        if len(pattern) == len(queries[0]) - 6:\n            return [True]\n        if len(pattern) == len(queries[0]) - 7:\n            return [False"
    },
    {
        "number": 1024,
        "title": "Video Stitching",
        "difficulty": 1,
        "answer": "        if not clips:\n            return 0\n        if not time:\n            return -1\n        if len(clips) == 1:\n            return 1\n        if len(clips) == 2:\n            return min(clips[0][1] - clips[0][0], clips[1][1] - clips[1][0]) + 1\n        if len(clips) == 3:\n            return min(clips[0][1] - clips[0][0], clips[1][1] - clips[1][0], clips[2][1] - clips[2][0]) + 1\n        if len(clips) == 4:\n            return min(clips[0][1] - clips[0][0], clips[1][1] - clips[1][0], clips[2][1] - clips[2][0], clips[3][1] - clips[3][0]) + 1\n        if len(clips) == 5:\n            return min(clips[0][1] - clips[0][0], clips[1][1] - clips[1][0], clips[2][1] -"
    },
    {
        "number": 1025,
        "title": "Divisor Game",
        "difficulty": 0,
        "answer": "        # pylint: disable=too-many-locals\n        if n < 2:\n            return False\n        if n % 2 == 0:\n            return True\n        if n % 3 == 0:\n            return False\n        if n % 5 == 0:\n            return True\n        if n % 7 == 0:\n            return False\n        if n % 11 == 0:\n            return True\n        if n % 13 == 0:\n            return False\n        if n % 17 == 0:\n            return True\n        if n % 19 == 0:\n            return False\n        if n % 23 == 0:\n            return True\n        if n % 29 == 0:\n            return False\n        if n % 31 == 0:\n            return True\n        if n % 37 == 0:\n            return False\n        if n % 41 == 0:\n            return True\n        if n % 43 == 0:\n            return False\n        if n % 47 == 0:\n            return True\n        if n % 53 == 0:\n            return False\n        if n % 59 == 0:\n            return True\n        if n"
    },
    {
        "number": 1026,
        "title": "Maximum Difference Between Node and Ancestor",
        "difficulty": 1,
        "answer": "        def dfs(node: TreeNode) -> int:\n            if not node:\n                return 0\n            left_diff = dfs(node.left)\n            right_diff = dfs(node.right)\n            return max(abs(node.val - left_diff), abs(node.val - right_diff))"
    },
    {
        "number": 1027,
        "title": "Longest Arithmetic Subsequence",
        "difficulty": 1,
        "answer": "        n = len(nums)\n        if n == 0:\n            return 0\n        if n == 1:\n            return 1\n        dp = [0] * (n + 1)\n        for i in range(1, n + 1):\n            dp[i] = 1\n        for i in range(1, n + 1):\n            for j in range(i - 1, -1, -1):\n                if nums[j] + 1 == nums[i]:\n                    dp[i] = max(dp[i], dp[j] + 1)\n        return dp[n]"
    },
    {
        "number": 1028,
        "title": "Recover a Tree From Preorder Traversal",
        "difficulty": 2,
        "answer": "        stack = []\n        for char in traversal:\n            if char == '-':\n                stack.append(None)\n            else:\n                stack.append(int(char))\n        stack.pop()\n        stack.pop()\n        stack.pop()\n        stack.pop()\n        stack.pop()\n        stack.pop()\n        stack.pop()\n        stack.pop()\n        stack.pop()\n        stack.pop()\n        stack.pop()\n        stack.pop()\n        stack.pop()\n        stack.pop()\n        stack.pop()\n        stack.pop()\n        stack.pop()\n        stack.pop()\n        stack.pop()\n        stack.pop()\n        stack.pop()\n        stack.pop()\n        stack.pop()\n        stack.pop()\n        stack.pop()\n        stack.pop()\n        stack.pop()\n        stack.pop()\n        stack.pop()\n        stack.pop()\n        stack.pop()\n        stack.pop()\n        stack.pop()\n        stack.pop()\n        stack."
    },
    {
        "number": 1029,
        "title": "Two City Scheduling",
        "difficulty": 1,
        "answer": "        n = len(costs)\n        costs = [list(x) for x in costs]\n        costs.sort(key=lambda x: x[0])\n        costs.sort(key=lambda x: x[1])\n        costs = [x[0] for x in costs]\n        costs = [x[1] for x in costs]\n        costs = [x for x in costs if x]\n        costs = [x for x in costs if x]\n        costs = [x for x in costs if x]\n        costs = [x for x in costs if x]\n        costs = [x for x in costs if x]\n        costs = [x for x in costs if x]\n        costs = [x for x in costs if x]\n        costs = [x for x in costs if x]\n        costs = [x for x in costs if x]\n        costs = [x for x in costs if x]\n        costs = [x for x in costs if x]\n        costs = [x for x in costs"
    },
    {
        "number": 1030,
        "title": "Matrix Cells in Distance Order",
        "difficulty": 0,
        "answer": "        # https://leetcode.com/problems/all-cells-dist-order/discuss/105500/Java-O(n)-solution-with-explanation\n        # https://leetcode.com/problems/all-cells-dist-order/discuss/105501/Java-O(n)-solution-with-explanation\n        # https://leetcode.com/problems/all-cells-dist-order/discuss/105502/Java-O(n)-solution-with-explanation\n        # https://leetcode.com/problems/all-cells-dist-order/discuss/105503/Java-O(n)-solution-with-explanation\n        # https://leetcode.com/problems/all-cells-dist-order/discuss/105504/Java-O(n)-solution-with-explanation\n        # https://leetcode.com/problems/all-cells-dist-order/discuss/105505/Java-O(n)-s"
    },
    {
        "number": 1031,
        "title": "Maximum Sum of Two Non-Overlapping Subarrays",
        "difficulty": 1,
        "answer": "        if not nums:\n            return 0\n        if firstLen == secondLen:\n            return sum(nums)\n        if firstLen > secondLen:\n            return self.maxSumTwoNoOverlap(nums[secondLen:], secondLen, firstLen)\n        if firstLen < secondLen:\n            return self.maxSumTwoNoOverlap(nums[:secondLen], secondLen, firstLen)\n        if firstLen == secondLen:\n            return max(self.maxSumTwoNoOverlap(nums[:firstLen], firstLen, secondLen),\n                       self.maxSumTwoNoOverlap(nums[firstLen:], secondLen, firstLen))\n        return max(self.maxSumTwoNoOverlap(nums[:firstLen], firstLen, secondLen),\n                   self.maxSumTwoNoOverlap(nums[firstLen:], secondLen, firstLen))"
    },
    {
        "number": 1032,
        "title": "Stream of Characters",
        "difficulty": 2,
        "answer": "        # Your StreamChecker object will be instantiated and called as such:\n        # obj = StreamChecker(words)\n        # param_1 = obj.query(letter)\n        # return param_1"
    },
    {
        "number": 1033,
        "title": "Moving Stones Until Consecutive",
        "difficulty": 1,
        "answer": "        # a, b, c are the stones' positions\n        # a < b < c\n        # a < b < c < d\n        # a < b < c < d < e\n        # a < b < c < d < e < f\n        # a < b < c < d < e < f < g\n        # a < b < c < d < e < f < g < h\n        # a < b < c < d < e < f < g < h < i\n        # a < b < c < d < e < f < g < h < i < j\n        # a < b < c < d < e < f < g < h < i < j < k\n        # a < b < c < d < e < f < g < h < i < j < k < l\n        # a < b < c < d < e < f < g < h < i < j < k < l < m\n        # a < b < c < d < e < f < g < h < i < j < k < l < m < n\n        # a < b < c < d"
    },
    {
        "number": 1034,
        "title": "Coloring A Border",
        "difficulty": 1,
        "answer": "        if row < 0 or row >= len(grid) or col < 0 or col >= len(grid[0]):\n            return grid\n        if grid[row][col] == color:\n            return grid\n        if row == 0 or row == len(grid) - 1 or col == 0 or col == len(grid[0]) - 1:\n            return grid\n        if grid[row][col] == grid[row - 1][col] and grid[row][col] == grid[row][col - 1] and grid[row][col] == grid[row + 1][col] and grid[row][col] == grid[row][col + 1]:\n            return grid\n        return self.colorBorder(grid, row - 1, col, color) + self.colorBorder(grid, row + 1, col, color) + self.colorBorder(grid, row, col - 1, color) + self.colorBorder(grid, row, col + 1, color)\n"
    },
    {
        "number": 1035,
        "title": "Uncrossed Lines",
        "difficulty": 1,
        "answer": "        nums1 = sorted(nums1)\n        nums2 = sorted(nums2)\n        n = len(nums1)\n        m = len(nums2)\n        dp = [[0] * (m + 1) for _ in range(n + 1)]\n        for i in range(1, n + 1):\n            for j in range(1, m + 1):\n                if nums1[i - 1] == nums2[j - 1]:\n                    dp[i][j] = dp[i - 1][j - 1] + 1\n                else:\n                    dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])\n        return dp[n][m]\n"
    },
    {
        "number": 1036,
        "title": "Escape a Large Maze",
        "difficulty": 2,
        "answer": "        if len(blocked) == 0:\n            return True\n        if len(blocked) == 1:\n            return False\n        if len(blocked) == 2:\n            return self.isEscapePossible(blocked[0], source, target) or self.isEscapePossible(blocked[1], source, target)\n        if len(blocked) == 3:\n            return self.isEscapePossible(blocked[0], source, target) or self.isEscapePossible(blocked[1], source, target) or self.isEscapePossible(blocked[2], source, target)\n        if len(blocked) == 4:\n            return self.isEscapePossible(blocked[0], source, target) or self.isEscapePossible(blocked[1], source, target) or self.isEscapePossible(blocked[2], source, target) or self.isEscapePossible(blocked[3], source, target)\n        if len(blocked) == 5:\n            return self.isEscapeP"
    },
    {
        "number": 1037,
        "title": "Valid Boomerang",
        "difficulty": 0,
        "answer": "        points = sorted(points, key=lambda x: x[0])\n        if len(points) < 3:\n            return False\n        if len(points) == 3:\n            return True\n        if len(points) == 4:\n            return False\n        if len(points) == 5:\n            return False\n        if len(points) == 6:\n            return False\n        if len(points) == 7:\n            return False\n        if len(points) == 8:\n            return False\n        if len(points) == 9:\n            return False\n        if len(points) == 10:\n            return False\n        if len(points) == 11:\n            return False\n        if len(points) == 12:\n            return False\n        if len(points) == 13:\n            return False\n        if len(points) == 14:\n            return False\n        if len(points) == 15:\n            return False\n        if len(points) == 16:\n            return False\n        if len(points) == 17:\n            return False\n        if len(points) == 18:"
    },
    {
        "number": 1038,
        "title": "Binary Search Tree to Greater Sum Tree",
        "difficulty": 1,
        "answer": "        if not root:\n            return None\n        if not root.left:\n            return root\n        root.left = self.bstToGst(root.left)\n        root.right = self.bstToGst(root.right)\n        return root"
    },
    {
        "number": 1039,
        "title": "Minimum Score Triangulation of Polygon",
        "difficulty": 1,
        "answer": "        n = len(values)\n        if n == 1:\n            return values[0]\n        if n == 2:\n            return values[0] * values[1]\n        if n == 3:\n            return values[0] * values[1] * values[2]\n        if n == 4:\n            return values[0] * values[1] * values[2] * values[3]\n        if n == 5:\n            return values[0] * values[1] * values[2] * values[3] * values[4]\n        if n == 6:\n            return values[0] * values[1] * values[2] * values[3] * values[4] * values[5]\n        if n == 7:\n            return values[0] * values[1] * values[2] * values[3] * values[4] * values[5] * values[6]\n        if n == 8:\n            return values[0] * values[1] * values[2] * values[3] * values[4] * values[5] *"
    },
    {
        "number": 1040,
        "title": "Moving Stones Until Consecutive II",
        "difficulty": 1,
        "answer": "        n = len(stones)\n        if n == 1:\n            return [1, 1]\n        if n == 2:\n            return [1, 1]\n        if n == 3:\n            return [1, 2]\n        if n == 4:\n            return [1, 2]\n        if n == 5:\n            return [1, 2]\n        if n == 6:\n            return [1, 2]\n        if n == 7:\n            return [1, 2]\n        if n == 8:\n            return [1, 2]\n        if n == 9:\n            return [1, 2]\n        if n == 10:\n            return [1, 2]\n        if n == 11:\n            return [1, 2]\n        if n == 12:\n            return [1, 2]\n        if n == 13:\n            return [1, 2]\n        if n == 14:\n            return [1, 2]\n        if n == 15:\n            return [1, 2]\n        if n == 16:\n            return [1, 2]\n        if"
    },
    {
        "number": 1041,
        "title": "Robot Bounded In Circle",
        "difficulty": 1,
        "answer": "        # The robot is initially at (0, 0) facing the north direction.\n        robot = Robot(0, 0, 0, 0)\n        # The north direction is the positive direction of the y-axis.\n        # The south direction is the negative direction of the y-axis.\n        # The east direction is the positive direction of the x-axis.\n        # The west direction is the negative direction of the x-axis.\n        directions = {\n            \"N\": (0, 1),\n            \"S\": (0, -1),\n            \"E\": (1, 0),\n            \"W\": (-1, 0)\n        }\n        # The robot can receive one of three instructions:\n        # \"G\": go straight 1 unit.\n        # \"L\": turn 90 degrees to the left (i.e., anti-clockwise direction).\n        # \"R\": turn 90 degrees to the right (i.e., clockwise direction).\n        instructions = [instruction for instruction in instructions]\n        for instruction in instructions:\n            if instruction == \"G\":\n                robot.move(1"
    },
    {
        "number": 1042,
        "title": "Flower Planting With No Adjacent",
        "difficulty": 1,
        "answer": "        if n == 1:\n            return [1]\n        if n == 2:\n            return [1, 2]\n        if n == 3:\n            return [1, 2, 3]\n        if n == 4:\n            return [1, 2, 3, 4]\n        if n == 5:\n            return [1, 2, 3, 4, 5]\n        if n == 6:\n            return [1, 2, 3, 4, 5, 6]\n        if n == 7:\n            return [1, 2, 3, 4, 5, 6, 7]\n        if n == 8:\n            return [1, 2, 3, 4, 5, 6, 7, 8]\n        if n == 9:\n            return [1, 2, 3, 4, 5, 6, 7, 8, 9]\n        if n == 10:\n            return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n        if n == 11:\n            return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10,"
    },
    {
        "number": 1043,
        "title": "Partition Array for Maximum Sum",
        "difficulty": 1,
        "answer": "        n = len(arr)\n        if n == 0:\n            return 0\n        if n == 1:\n            return arr[0]\n        if n == 2:\n            return max(arr[0], arr[1])\n        if n == 3:\n            return max(arr[0], arr[1], arr[2])\n        if n == 4:\n            return max(arr[0], arr[1], arr[2], arr[3])\n        if n == 5:\n            return max(arr[0], arr[1], arr[2], arr[3], arr[4])\n        if n == 6:\n            return max(arr[0], arr[1], arr[2], arr[3], arr[4], arr[5])\n        if n == 7:\n            return max(arr[0], arr[1], arr[2], arr[3], arr[4], arr[5], arr[6])\n        if n == 8:\n            return max(arr[0], arr[1], arr[2], arr[3], arr[4], arr[5], arr["
    },
    {
        "number": 1044,
        "title": "Longest Duplicate Substring",
        "difficulty": 2,
        "answer": "        # https://leetcode.com/problems/longest-duplicate-substring/discuss/12791/Python-O(n)-time-and-O(1)-space-solution\n        # https://leetcode.com/problems/longest-duplicate-substring/discuss/12791/Python-O(n)-time-and-O(1)-space-solution-with-explanation\n        # https://leetcode.com/problems/longest-duplicate-substring/discuss/12791/Python-O(n)-time-and-O(1)-space-solution-with-explanation-2\n        # https://leetcode.com/problems/longest-duplicate-substring/discuss/12791/Python-O(n)-time-and-O(1)-space-solution-with-explanation-3\n        # https://leetcode.com/problems/longest-duplicate-substring/discuss/12791/Python-"
    },
    {
        "number": 1046,
        "title": "Last Stone Weight",
        "difficulty": 0,
        "answer": "        if not stones:\n            return 0\n        if len(stones) == 1:\n            return stones[0]\n        if len(stones) == 2:\n            return stones[0] + stones[1]\n        if len(stones) == 3:\n            return stones[0] + stones[1] + stones[2]\n        if len(stones) == 4:\n            return stones[0] + stones[1] + stones[2] + stones[3]\n        if len(stones) == 5:\n            return stones[0] + stones[1] + stones[2] + stones[3] + stones[4]\n        if len(stones) == 6:\n            return stones[0] + stones[1] + stones[2] + stones[3] + stones[4] + stones[5]\n        if len(stones) == 7:\n            return stones[0] + stones[1] + stones[2] + stones[3] + stones[4] + stones[5] + stones[6]\n        if len(stones) == 8:\n            return stones[0]"
    },
    {
        "number": 1047,
        "title": "Remove All Adjacent Duplicates In String",
        "difficulty": 0,
        "answer": "        if not s:\n            return \"\"\n        if len(s) == 1:\n            return s\n        s = list(s)\n        s.sort()\n        i = 1\n        while i < len(s):\n            if s[i] == s[i - 1]:\n                s.pop(i)\n            else:\n                i += 1\n        return \"\".join(s)\n"
    },
    {
        "number": 1048,
        "title": "Longest String Chain",
        "difficulty": 1,
        "answer": "        # pylint: disable=line-too-long\n        # pylint: disable=too-many-locals\n        # pylint: disable=too-many-branches\n        # pylint: disable=too-many-statements\n        # pylint: disable=too-many-nested-blocks\n        # pylint: disable=too-many-boolean-expressions\n        # pylint: disable=too-many-arguments\n        # pylint: disable=too-many-locals\n        # pylint: disable=too-many-statements\n        # pylint: disable=too-many-nested-blocks\n        # pylint: disable=too-many-boolean-expressions\n        # pylint: disable=too-many-arguments\n        # pylint: disable=too-many-locals\n        # pylint: disable=too-many-statements\n        # pylint: disable=too-many-nested-blocks\n        # pylint: disable=too-many-boolean"
    },
    {
        "number": 1049,
        "title": "Last Stone Weight II",
        "difficulty": 1,
        "answer": "        stones.sort()\n        if len(stones) == 1:\n            return stones[0]\n        if len(stones) == 2:\n            return stones[0] + stones[1]\n        if len(stones) == 3:\n            return stones[0] + stones[1] + stones[2]\n        if len(stones) == 4:\n            return stones[0] + stones[1] + stones[2] + stones[3]\n        if len(stones) == 5:\n            return stones[0] + stones[1] + stones[2] + stones[3] + stones[4]\n        if len(stones) == 6:\n            return stones[0] + stones[1] + stones[2] + stones[3] + stones[4] + stones[5]\n        if len(stones) == 7:\n            return stones[0] + stones[1] + stones[2] + stones[3] + stones[4] + stones[5] + stones[6]\n        if len(stones) == 8:\n            return stones[0] + stones[1"
    },
    {
        "number": 1051,
        "title": "Height Checker",
        "difficulty": 0,
        "answer": "        n = len(heights)\n        if n == 0:\n            return 0\n        if n == 1:\n            return 1\n        if n == 2:\n            return heights[0]!= heights[1]\n        if n == 3:\n            return heights[0]!= heights[1] or heights[0]!= heights[2] or heights[1]!= heights[2]\n        if n == 4:\n            return heights[0]!= heights[1] or heights[0]!= heights[2] or heights[0]!= heights[3] or heights[1]!= heights[2] or heights[1]!= heights[3] or heights[2]!= heights[3]\n        if n == 5:\n            return heights[0]!= heights[1] or heights[0]!= heights[2] or heights[0]!= heights[3] or heights[0]!= heights[4] or heights[1]!= heights[2] or heights[1]!= heights[3] or heights[1]!= heights[4] or heights[2]!= heights[3] or heights[2"
    },
    {
        "number": 1052,
        "title": "Grumpy Bookstore Owner",
        "difficulty": 1,
        "answer": "        if len(customers) == 0:\n            return 0\n        if len(grumpy) == 0:\n            return 1\n        if minutes == 0:\n            return 0\n        if minutes == 1:\n            return max(customers)\n        if minutes == 2:\n            return max(customers) + max(grumpy)\n        if minutes == 3:\n            return max(customers) + max(grumpy) + max(customers)\n        if minutes == 4:\n            return max(customers) + max(grumpy) + max(customers) + max(grumpy)\n        if minutes == 5:\n            return max(customers) + max(grumpy) + max(customers) + max(grumpy) + max(customers)\n        if minutes == 6:\n            return max(customers) + max(grumpy) + max(customers) + max(grumpy) + max(customers) + max(grumpy)\n        if minutes == 7:\n            return max(customers) + max(grumpy) + max(customers) + max("
    },
    {
        "number": 1053,
        "title": "Previous Permutation With One Swap",
        "difficulty": 1,
        "answer": "        if len(arr) == 1:\n            return arr\n        if len(arr) == 2:\n            return [arr[0], arr[1]]\n        if len(arr) == 3:\n            return [arr[0], arr[1], arr[2]]\n        if len(arr) == 4:\n            return [arr[0], arr[1], arr[2], arr[3]]\n        if len(arr) == 5:\n            return [arr[0], arr[1], arr[2], arr[3], arr[4]]\n        if len(arr) == 6:\n            return [arr[0], arr[1], arr[2], arr[3], arr[4], arr[5]]\n        if len(arr) == 7:\n            return [arr[0], arr[1], arr[2], arr[3], arr[4], arr[5], arr[6]]\n        if len(arr) == 8:\n            return [arr[0], arr[1], arr[2], arr[3], arr[4], arr[5], arr[6], arr[7"
    },
    {
        "number": 1054,
        "title": "Distant Barcodes",
        "difficulty": 1,
        "answer": "        # https://leetcode.com/problems/rearrange-barcodes/discuss/105500/Java-Solution-with-explanation-in-python\n        # https://leetcode.com/problems/rearrange-barcodes/discuss/105501/My-Java-Solution-with-explanation-in-python\n        # https://leetcode.com/problems/rearrange-barcodes/discuss/105502/My-Python-Solution-with-explanation-in-python\n        # https://leetcode.com/problems/rearrange-barcodes/discuss/105503/My-Python-Solution-with-explanation-in-python\n        # https://leetcode.com/problems/rearrange-barcodes/discuss/105504/My-Python-Solution-with-explanation-in-python\n        # https://leetcode.com/problems/rearrange-barcodes/discuss/105505/My-Python-"
    },
    {
        "number": 1061,
        "title": "Lexicographically Smallest Equivalent String",
        "difficulty": 1,
        "answer": "        # print(f\"s1: {s1}, s2: {s2}, baseStr: {baseStr}\")\n        # print(f\"s1: {s1}, s2: {s2}, baseStr: {baseStr}\")\n        # print(f\"s1: {s1}, s2: {s2}, baseStr: {baseStr}\")\n        # print(f\"s1: {s1}, s2: {s2}, baseStr: {baseStr}\")\n        # print(f\"s1: {s1}, s2: {s2}, baseStr: {baseStr}\")\n        # print(f\"s1: {s1}, s2: {s2}, baseStr: {baseStr}\")\n        # print(f\"s1: {s1}, s2: {s2}, baseStr: {baseStr}\")\n        # print(f\"s1: {s1}, s2: {s2}, baseStr: {baseStr}\")\n        # print(f\"s1: {s1}, s2: {s"
    },
    {
        "number": 1071,
        "title": "Greatest Common Divisor of Strings",
        "difficulty": 0,
        "answer": "        if not str1 or not str2:\n            return \"\"\n        if len(str1) > len(str2):\n            return self.gcdOfStrings(str2, str1)\n        if len(str1) < len(str2):\n            return self.gcdOfStrings(str1, str2)\n        if str1 == str2:\n            return str1\n        if str1[0] == str2[0]:\n            return self.gcdOfStrings(str1[1:], str2[1:])\n        if str1[-1] == str2[-1]:\n            return self.gcdOfStrings(str1[:-1], str2[:-1])\n        return \"\""
    },
    {
        "number": 1072,
        "title": "Flip Columns For Maximum Number of Equal Rows",
        "difficulty": 1,
        "answer": "        m, n = len(matrix), len(matrix[0])\n        dp = [[0] * n for _ in range(m)]\n        for i in range(m):\n            for j in range(n):\n                if matrix[i][j] == 1:\n                    dp[i][j] = 1\n                else:\n                    dp[i][j] = 0\n        for i in range(m):\n            for j in range(n):\n                if matrix[i][j] == 1:\n                    for k in range(i, m):\n                        if matrix[k][j] == 1:\n                            dp[i][j] = max(dp[i][j], dp[i][j] + dp[k][j])\n        return dp[0][0]\n"
    },
    {
        "number": 1073,
        "title": "Adding Two Negabinary Numbers",
        "difficulty": 1,
        "answer": "        # base -2\n        # arr1 = [1,1,1,1,1]\n        # arr2 = [1,0,1]\n        # arr1 = [1,1,1,1,1]\n        # arr2 = [1,0,1]\n        # arr1 = [1,1,1,1,1]\n        # arr2 = [1,0,1]\n        # arr1 = [1,1,1,1,1]\n        # arr2 = [1,0,1]\n        # arr1 = [1,1,1,1,1]\n        # arr2 = [1,0,1]\n        # arr1 = [1,1,1,1,1]\n        # arr2 = [1,0,1]\n        # arr1 = [1,1,1,1,1]\n        # arr2 = [1,0,1]\n        # arr1 = [1,1,1,1,1]\n        # arr2 = [1,0,1]\n        # arr1"
    },
    {
        "number": 1074,
        "title": "Number of Submatrices That Sum to Target",
        "difficulty": 2,
        "answer": "        n = len(matrix)\n        if n == 0:\n            return 0\n        m = len(matrix[0])\n        if m == 0:\n            return 0\n        dp = [[0] * (m + 1) for _ in range(n + 1)]\n        for i in range(1, n + 1):\n            for j in range(1, m + 1):\n                dp[i][j] = dp[i - 1][j] + dp[i][j - 1]\n                if matrix[i - 1][j - 1] == 1:\n                    dp[i][j] += 1\n                if matrix[i - 1][j] == 1:\n                    dp[i][j] += 1\n                if matrix[i][j - 1] == 1:\n                    dp[i][j] += 1\n        return dp[n][m]"
    },
    {
        "number": 1078,
        "title": "Occurrences After Bigram",
        "difficulty": 0,
        "answer": "        occurrences = []\n        for i in range(len(text) - len(first) - len(second) + 1):\n            if text[i:i + len(first)] == first and text[i + len(first):i + len(first) + len(second)] == second:\n                occurrences.append(text[i + len(first) + len(second):])\n        return occurrences"
    },
    {
        "number": 1079,
        "title": "Letter Tile Possibilities",
        "difficulty": 1,
        "answer": "        n = len(tiles)\n        dp = [[0] * (n + 1) for _ in range(n + 1)]\n        for i in range(1, n + 1):\n            dp[i][i] = 1\n        for i in range(1, n + 1):\n            for j in range(i + 1, n + 1):\n                if tiles[i - 1] == tiles[j - 1]:\n                    dp[i][j] = dp[i - 1][j - 1] + dp[i][j - 1]\n                else:\n                    dp[i][j] = dp[i - 1][j]\n        return dp[n][n]"
    },
    {
        "number": 1080,
        "title": "Insufficient Nodes in Root to Leaf Paths",
        "difficulty": 1,
        "answer": "        if not root:\n            return None\n        if not root.left and not root.right:\n            return root\n        if root.left and root.right:\n            return self.sufficientSubset(root.left, limit) or self.sufficientSubset(root.right, limit)\n        if root.left:\n            return self.sufficientSubset(root.left, limit)\n        if root.right:\n            return self.sufficientSubset(root.right, limit)\n        return None"
    },
    {
        "number": 1081,
        "title": "Smallest Subsequence of Distinct Characters",
        "difficulty": 1,
        "answer": "        # https://leetcode.com/problems/smallest-subsequence/discuss/105500/Python-O(n)-time-and-O(1)-space-solution-with-explanation\n        # https://leetcode.com/problems/smallest-subsequence/discuss/105501/Java-O(n)-time-and-O(1)-space-solution-with-explanation\n        # https://leetcode.com/problems/smallest-subsequence/discuss/105502/C-O(n)-time-and-O(1)-space-solution-with-explanation\n        # https://leetcode.com/problems/smallest-subsequence/discuss/105503/C++-O(n)-time-and-O(1)-space-solution-with-explanation\n        # https://leetcode.com/problems/smallest-subsequence/discuss/105504/Python-O(n)-time-and-O(1)-space-solution-"
    },
    {
        "number": 1089,
        "title": "Duplicate Zeros",
        "difficulty": 0,
        "answer": "        for i in range(1, len(arr)):\n            if arr[i] == 0:\n                arr[i] = arr[i - 1]\n        for i in range(len(arr) - 1, -1, -1):\n            if arr[i] == 0:\n                arr[i] = arr[i + 1]\n"
    },
    {
        "number": 1090,
        "title": "Largest Values From Labels",
        "difficulty": 1,
        "answer": "        if not values:\n            return 0"
    },
    {
        "number": 1091,
        "title": "Shortest Path in Binary Matrix",
        "difficulty": 1,
        "answer": "        n = len(grid)\n        m = len(grid[0])\n        dp = [[0] * m for _ in range(n)]\n        for i in range(n):\n            for j in range(m):\n                if grid[i][j] == 1:\n                    dp[i][j] = 1\n                    if i > 0:\n                        dp[i - 1][j] = 1\n                    if i < n - 1:\n                        dp[i + 1][j] = 1\n                    if j > 0:\n                        dp[i][j - 1] = 1\n                    if j < m - 1:\n                        dp[i][j + 1] = 1\n        return dp[0][0]"
    },
    {
        "number": 1092,
        "title": "Shortest Common Supersequence ",
        "difficulty": 2,
        "answer": "        # https://leetcode.com/problems/shortest-common-supersequence/discuss/105500/Python-solution-with-explanation\n        # https://leetcode.com/problems/shortest-common-supersequence/discuss/105501/Java-solution-with-explanation\n        # https://leetcode.com/problems/shortest-common-supersequence/discuss/105502/C-solution-with-explanation\n        # https://leetcode.com/problems/shortest-common-supersequence/discuss/105503/Python-solution-with-explanation\n        # https://leetcode.com/problems/shortest-common-supersequence/discuss/105504/C++-solution-with-explanation\n        # https://leetcode.com/problems/shortest-common-supersequence/discuss/105505/Java-solution-with-explanation\n        # https://leetcode.com/problems/shortest"
    },
    {
        "number": 1093,
        "title": "Statistics from a Large Sample",
        "difficulty": 1,
        "answer": "        return [min(count), max(count), sum(count) / len(count), median(count), mode(count)]\n"
    },
    {
        "number": 1094,
        "title": "Car Pooling",
        "difficulty": 1,
        "answer": "        # https://leetcode.com/problems/car-pooling/discuss/105586/Java-O(n)-solution-with-explanation\n        # https://leetcode.com/problems/car-pooling/discuss/105586/Java-O(n)-solution-with-explanation\n        # https://leetcode.com/problems/car-pooling/discuss/105586/Java-O(n)-solution-with-explanation\n        # https://leetcode.com/problems/car-pooling/discuss/105586/Java-O(n)-solution-with-explanation\n        # https://leetcode.com/problems/car-pooling/discuss/105586/Java-O(n)-solution-with-explanation\n        # https://leetcode.com/problems/car-pooling/discuss/105586/Java-O(n)-solution-with-explanation\n        # https://leetcode.com/"
    },
    {
        "number": 1095,
        "title": "Find in Mountain Array",
        "difficulty": 2,
        "answer": "        if not mountainArr:\n            return -1\n        if mountainArr.length() < 3:\n            return -1\n        if mountainArr.length() == 3:\n            return 0\n        if mountainArr.length() == 4:\n            return 0\n        if mountainArr.length() == 5:\n            return 0\n        if mountainArr.length() == 6:\n            return 0\n        if mountainArr.length() == 7:\n            return 0\n        if mountainArr.length() == 8:\n            return 0\n        if mountainArr.length() == 9:\n            return 0\n        if mountainArr.length() == 10:\n            return 0\n        if mountainArr.length() == 11:\n            return 0\n        if mountainArr.length() == 12:\n            return 0\n        if mountainArr.length() == 13:\n            return 0\n        if mountainArr.length() == 14:\n            return 0\n        if mountainArr.length() == 15:\n            return 0\n        if mountainArr.length() == 16:\n"
    },
    {
        "number": 1096,
        "title": "Brace Expansion II",
        "difficulty": 2,
        "answer": "        # TODO: implement this method\n        pass"
    },
    {
        "number": 1103,
        "title": "Distribute Candies to People",
        "difficulty": 0,
        "answer": "        if num_people == 1:\n            return [candies]\n        if num_people == 2:\n            return [candies, candies]\n        if num_people == 3:\n            return [candies, candies, candies]\n        if num_people == 4:\n            return [candies, candies, candies, candies]\n        if num_people == 5:\n            return [candies, candies, candies, candies, candies]\n        if num_people == 6:\n            return [candies, candies, candies, candies, candies, candies]\n        if num_people == 7:\n            return [candies, candies, candies, candies, candies, candies, candies]\n        if num_people == 8:\n            return [candies, candies, candies, candies, candies, candies, candies, candies]\n        if num_people == 9:\n            return [candies, candies, candies, candies, candies, candies, candies, candies, candies"
    },
    {
        "number": 1104,
        "title": "Path In Zigzag Labelled Binary Tree",
        "difficulty": 1,
        "answer": "        if label == 0:\n            return []\n        if label % 2 == 0:\n            return [label] + self.pathInZigZagTree(label / 2)\n        else:\n            return [label] + self.pathInZigZagTree(label / 2) + [label]"
    },
    {
        "number": 1105,
        "title": "Filling Bookcase Shelves",
        "difficulty": 1,
        "answer": "        if not books:\n            return 0\n        heights = [book[1] for book in books]\n        heights.sort()\n        heights = [book[1] for book in books]\n        heights.sort()\n        heights = [book[1] for book in books]\n        heights.sort()\n        heights = [book[1] for book in books]\n        heights.sort()\n        heights = [book[1] for book in books]\n        heights.sort()\n        heights = [book[1] for book in books]\n        heights.sort()\n        heights = [book[1] for book in books]\n        heights.sort()\n        heights = [book[1] for book in books]\n        heights.sort()\n        heights = [book[1] for book in books]\n        heights.sort()\n        heights = [book[1] for book in books]\n        heights.sort()\n        heights = [book[1] for book in books]\n        heights.sort"
    },
    {
        "number": 1106,
        "title": "Parsing A Boolean Expression",
        "difficulty": 2,
        "answer": "        stack = []\n        for char in expression:\n            if char == '!':\n                if len(stack) == 0:\n                    return True\n                elif stack[-1] == '!':\n                    stack.pop()\n                else:\n                    stack.append('!')\n            elif char == '&':\n                if len(stack) == 0:\n                    return False\n                elif stack[-1] == '&':\n                    stack.pop()\n                else:\n                    stack.append('&')\n            elif char == '|':\n                if len(stack) == 0:\n                    return False\n                elif stack[-1] == '|':\n                    stack.pop()\n                else:\n                    stack.append('|')\n            else:\n                stack.append(char)\n        if len(stack) == 0:\n            return False\n        elif stack[-1] == '&':\n            stack.pop()\n        else:\n            stack.append('&')\n        return stack[-1] == '&'\n"
    },
    {
        "number": 1108,
        "title": "Defanging an IP Address",
        "difficulty": 0,
        "answer": "        defang = \"\"\n        for i in address:\n            if i == \".\":\n                defang += \"[.]\"\n            else:\n                defang += i\n        return defang"
    },
    {
        "number": 1109,
        "title": "Corporate Flight Bookings",
        "difficulty": 1,
        "answer": "        # bookings = [[1,2,10],[2,3,20],[2,5,25]]\n        # n = 5\n        # bookings = [[1,2,10],[2,3,20],[2,5,25]]\n        # n = 2\n        # bookings = [[1,2,10],[2,2,15]]\n        # n = 1\n        # bookings = [[1,2,10]]\n        # n = 0\n        # bookings = []\n        # n = -1\n        # bookings = [[1,2,10],[2,3,20],[2,5,25]]\n        # n = 5\n        # bookings = [[1,2,10],[2,3,20],[2,5,25]]\n        # n = 2\n        # bookings = [[1,2,10],[2,2,15]]\n        # n = 1\n        # bookings = [[1,2,10]]\n        # n = 0\n        # bookings = []\n        # n = -1\n        # bookings = [[1,2,"
    },
    {
        "number": 1110,
        "title": "Delete Nodes And Return Forest",
        "difficulty": 1,
        "answer": "        if not root:\n            return []\n        if not to_delete:\n            return [root]\n        if root.val in to_delete:\n            return self.delNodes(root.left, to_delete) + self.delNodes(root.right, to_delete)\n        return [root]"
    },
    {
        "number": 1111,
        "title": "Maximum Nesting Depth of Two Valid Parentheses Strings",
        "difficulty": 1,
        "answer": "        depth = [0] * len(seq)\n        for i in range(1, len(seq)):\n            depth[i] = max(depth[i - 1], depth[i - 2]) + 1\n        depth[0] = 0\n        depth[-1] = 0\n        depth[-2] = 0\n        depth[-3] = 0\n        depth[-4] = 0\n        depth[-5] = 0\n        depth[-6] = 0\n        depth[-7] = 0\n        depth[-8] = 0\n        depth[-9] = 0\n        depth[-10] = 0\n        depth[-11] = 0\n        depth[-12] = 0\n        depth[-13] = 0\n        depth[-14] = 0\n        depth[-15] = 0\n        depth[-16] = 0\n        depth[-17] = 0\n        depth[-18] = 0\n        depth[-19] = 0\n        depth[-20] = 0\n        depth[-21] = 0\n        depth[-"
    },
    {
        "number": 1114,
        "title": "Print in Order",
        "difficulty": 0,
        "answer": "        pass\n    def fourth(self, printFourth: 'Callable[[], None]') -> None:\n        printFourth()\n        \"\"\"\n        Suppose we have a class:\n        public class Foo {\n          public void first() { print(\"first\"); }\n          public void second() { print(\"second\"); }\n          public void third() { print(\"third\"); }\n          public void fourth() { print(\"fourth\"); }\n        }\n        The same instance of Foo will be passed to four different threads. Thread A will call first(), thread B will call second(), thread C will call third(), and thread D will call fourth(). Design a mechanism and modify the program to ensure that fourth() is executed after third(), and third() is executed after second().\n        Note:\n        We do not know how the threads will be scheduled in the operating system, even though the numbers in the input seem to imply the ordering. The input format you see is mainly to ensure our tests' comprehensiveness.\n        Example 1:\n        Input: nums = [1,2,3]\n        Output: \"firstsecondthirdfourth\"\n        Explanation: There are four threads"
    },
    {
        "number": 1115,
        "title": "Print FooBar Alternately",
        "difficulty": 1,
        "answer": "        print(\"foobar\")\n        print(\"foobar\")\n        print(\"foobar\")\n        print(\"foobar\")\n        print(\"foobar\")\n        print(\"foobar\")\n        print(\"foobar\")\n        print(\"foobar\")\n        print(\"foobar\")\n        print(\"foobar\")\n        print(\"foobar\")\n        print(\"foobar\")\n        print(\"foobar\")\n        print(\"foobar\")\n        print(\"foobar\")\n        print(\"foobar\")\n        print(\"foobar\")\n        print(\"foobar\")\n        print(\"foobar\")\n        print(\"foobar\")\n        print(\"foobar\")\n        print(\"foobar\")\n        print(\"foobar\")\n        print(\"foobar\")\n        print(\"foobar\")\n        print(\"foobar\")\n        print(\"foobar\")\n        print(\"foobar\")\n        print(\"foobar\")\n        print(\"foobar\")\n        print(\"foobar\")\n        print(\"foobar\")\n        print(\"foobar\")\n        print(\"foobar\")\n        print(\"foobar\")\n        print(\"foobar"
    },
    {
        "number": 1116,
        "title": "Print Zero Even Odd",
        "difficulty": 1,
        "answer": "        if self.n % 2 == 0:\n            printNumber(0)\n        else:\n            printNumber(1)\n        if self.n % 2 == 1:\n            printNumber(2)\n        else:\n            printNumber(3)\n        if self.n % 2 == 0:\n            printNumber(4)\n        else:\n            printNumber(5)\n        if self.n % 2 == 1:\n            printNumber(6)\n        else:\n            printNumber(7)\n        if self.n % 2 == 0:\n            printNumber(8)\n        else:\n            printNumber(9)\n        if self.n % 2 == 1:\n            printNumber(10)\n        else:\n            printNumber(11)\n        if self.n % 2 == 0:\n            printNumber(12)\n        else:\n            printNumber(13)\n        if self.n % 2 == 1:\n            printNumber(14)\n        else:\n            printNumber(15)\n        if self.n % 2 == 0:\n            printNumber(16)\n"
    },
    {
        "number": 1117,
        "title": "Building H2O",
        "difficulty": 1,
        "answer": "        pass\n    def hydrogen(self, releaseHydrogen: 'Callable[[], None]') -> None:\n        releaseHydrogen()\n    def oxygen(self, releaseOxygen: 'Callable[[], None]') -> None:\n        releaseOxygen()\n        \"\"\"\n        There are two kinds of threads: oxygen and hydrogen. Your goal is to group these threads to form water molecules.\n        There is a barrier where each thread has to wait until a complete molecule can be formed. Hydrogen and oxygen threads will be given releaseHydrogen and releaseOxygen methods respectively, which will allow them to pass the barrier. These threads should pass the barrier in groups of three, and they must immediately bond with each other to form a water molecule. You must guarantee that all the threads from one molecule bond before any other threads from the next molecule do.\n        In other words:\n            If an oxygen thread arrives at the barrier when no hydrogen threads are present, it must wait for two hydrogen threads.\n            If a hydrogen thread arrives at the barrier when no other threads are present, it must wait for an oxygen thread and another hydrogen thread.\n        We do not have to worry"
    },
    {
        "number": 1122,
        "title": "Relative Sort Array",
        "difficulty": 0,
        "answer": "        # write your code here\n        if len(arr1) == 0 or len(arr2) == 0:\n            return arr1\n        if len(arr1) == 1:\n            return arr2\n        if len(arr2) == 1:\n            return arr1\n        if len(arr1) == 2:\n            return arr2\n        if len(arr2) == 2:\n            return arr1\n        if len(arr1) == 3:\n            return arr2\n        if len(arr2) == 3:\n            return arr1\n        if len(arr1) == 4:\n            return arr2\n        if len(arr2) == 4:\n            return arr1\n        if len(arr1) == 5:\n            return arr2\n        if len(arr2) == 5:\n            return arr1\n        if len(arr1) == 6:\n            return arr2\n        if len(arr2) == 6:\n            return arr1\n        if len(arr1) == 7:\n            return arr2\n        if len(arr2) == 7:\n"
    },
    {
        "number": 1123,
        "title": "Lowest Common Ancestor of Deepest Leaves",
        "difficulty": 1,
        "answer": "        if not root:\n            return None\n        if not root.left and not root.right:\n            return root\n        if not root.left:\n            return self.lcaDeepestLeaves(root.right)\n        if not root.right:\n            return self.lcaDeepestLeaves(root.left)\n        return self.lcaDeepestLeaves(root.left) if self.lcaDeepestLeaves(root.right) < self.lcaDeepestLeaves(root.left) else self.lcaDeepestLeaves(root.right)"
    },
    {
        "number": 1124,
        "title": "Longest Well-Performing Interval",
        "difficulty": 1,
        "answer": "        if not hours:\n            return 0\n        if len(hours) == 1:\n            return 1\n        if len(hours) == 2:\n            return 1 if hours[0] > hours[1] else 0\n        if len(hours) == 3:\n            return 1 if hours[0] > hours[1] and hours[0] > hours[2] else 0\n        if len(hours) == 4:\n            return 1 if hours[0] > hours[1] and hours[0] > hours[2] and hours[0] > hours[3] else 0\n        if len(hours) == 5:\n            return 1 if hours[0] > hours[1] and hours[0] > hours[2] and hours[0] > hours[3] and hours[0] > hours[4] else 0\n        if len(hours) == 6:\n            return 1 if hours[0] > hours[1] and hours[0] > hours[2] and hours[0] > hours[3] and hours[0] > hours[4] and hours[0] > hours[5"
    },
    {
        "number": 1125,
        "title": "Smallest Sufficient Team",
        "difficulty": 2,
        "answer": "        req_skills = set(req_skills)\n        people = set(people)\n        # print(req_skills, people)\n        # print(req_skills.intersection(people))\n        # print(req_skills.difference(people))\n        # print(people.difference(req_skills))\n        # print(people.intersection(req_skills))\n        # print(people.difference(req_skills))\n        # print(people.intersection(req_skills))\n        # print(people.difference(req_skills))\n        # print(people.intersection(req_skills))\n        # print(people.difference(req_skills))\n        # print(people.intersection(req_skills))\n        # print(people.difference(req_skills))\n        # print(people.intersection(req_skills))\n        # print(people.difference(req_skills))\n        # print(people.intersection(req_skills))\n        # print(people."
    },
    {
        "number": 1128,
        "title": "Number of Equivalent Domino Pairs",
        "difficulty": 0,
        "answer": "        n = len(dominoes)\n        dp = [[0] * (n + 1) for _ in range(n + 1)]\n        for i in range(n):\n            for j in range(i + 1, n):\n                dp[i][j] = dp[i + 1][j] + dp[i][j - 1]\n                if dominoes[i][0] == dominoes[j][1] and dominoes[i][1] == dominoes[j][0]:\n                    dp[i][j] += dp[i + 1][j - 1]\n        return dp[0][n - 1]"
    },
    {
        "number": 1129,
        "title": "Shortest Path with Alternating Colors",
        "difficulty": 1,
        "answer": "        n = n + 1\n        redEdges = [list(map(lambda x: x + 1, x)) for x in redEdges]\n        blueEdges = [list(map(lambda x: x + 1, x)) for x in blueEdges]\n        # print(redEdges)\n        # print(blueEdges)\n        # print(redEdges[0])\n        # print(blueEdges[0])\n        # print(redEdges[1])\n        # print(blueEdges[1])\n        # print(redEdges[2])\n        # print(blueEdges[2])\n        # print(redEdges[0][0])\n        # print(blueEdges[0][0])\n        # print(redEdges[0][1])\n        # print(blueEdges[0][1])\n        # print(redEdges[1][0])\n        # print(blueEdges[1][0])\n        # print(redEdges[1][1])\n        # print(blueEdges[1][1])\n        "
    },
    {
        "number": 1130,
        "title": "Minimum Cost Tree From Leaf Values",
        "difficulty": 1,
        "answer": "        if len(arr) == 1:\n            return arr[0]\n        if len(arr) == 2:\n            return arr[0] * arr[1]\n        if len(arr) == 3:\n            return arr[0] * arr[1] * arr[2]\n        if len(arr) == 4:\n            return arr[0] * arr[1] * arr[2] * arr[3]\n        if len(arr) == 5:\n            return arr[0] * arr[1] * arr[2] * arr[3] * arr[4]\n        if len(arr) == 6:\n            return arr[0] * arr[1] * arr[2] * arr[3] * arr[4] * arr[5]\n        if len(arr) == 7:\n            return arr[0] * arr[1] * arr[2] * arr[3] * arr[4] * arr[5] * arr[6]\n        if len(arr) == 8:\n            return arr[0] * arr[1] * arr[2]"
    },
    {
        "number": 1131,
        "title": "Maximum of Absolute Value Expression",
        "difficulty": 1,
        "answer": "        max_val = 0\n        for i in range(len(arr1)):\n            for j in range(i + 1, len(arr1)):\n                max_val = max(max_val, abs(arr1[i] - arr1[j]) + abs(arr2[i] - arr2[j]) + abs(i - j))\n        return max_val\n"
    },
    {
        "number": 1137,
        "title": "N-th Tribonacci Number",
        "difficulty": 0,
        "answer": "        if n == 0:\n            return 0\n        elif n == 1:\n            return 1\n        elif n == 2:\n            return 1\n        else:\n            return self.tribonacci(n - 1) + self.tribonacci(n - 2) + self.tribonacci(n - 3)"
    },
    {
        "number": 1138,
        "title": "Alphabet Board Path",
        "difficulty": 1,
        "answer": "        board = list(map(str, range(26)))\n        return self.dfs(board, target)"
    },
    {
        "number": 1139,
        "title": "Largest 1-Bordered Square",
        "difficulty": 1,
        "answer": "        if not grid:\n            return 0\n        m, n = len(grid), len(grid[0])\n        dp = [[0] * n for _ in range(m)]\n        for i in range(m):\n            for j in range(n):\n                if grid[i][j] == 1:\n                    dp[i][j] = 1\n                    if i > 0 and grid[i - 1][j] == 1:\n                        dp[i][j] += dp[i - 1][j]\n                    if j > 0 and grid[i][j - 1] == 1:\n                        dp[i][j] += dp[i][j - 1]\n                    if i < m - 1 and grid[i + 1][j] == 1:\n                        dp[i][j] += dp[i + 1][j]\n                    if j < n - 1 and grid[i][j + 1] == 1:\n                        dp[i][j] += dp[i][j + 1]\n        return max(dp)\n"
    },
    {
        "number": 1140,
        "title": "Stone Game II",
        "difficulty": 1,
        "answer": "        if not piles:\n            return 0\n        if len(piles) == 1:\n            return piles[0]\n        if len(piles) == 2:\n            return max(piles[0], piles[1])\n        if len(piles) == 3:\n            return max(max(piles[0], piles[1]), piles[2])\n        if len(piles) == 4:\n            return max(max(piles[0], piles[1]), max(piles[2], piles[3]))\n        if len(piles) == 5:\n            return max(max(piles[0], piles[1]), max(piles[2], piles[3]), max(piles[4], piles[5]))\n        if len(piles) == 6:\n            return max(max(piles[0], piles[1]), max(piles[2], piles[3]), max(piles[4], piles[5]), max(piles[6], piles[7]))\n        if len(piles) == 7:\n            return max(max"
    },
    {
        "number": 1143,
        "title": "Longest Common Subsequence",
        "difficulty": 1,
        "answer": "        if len(text1) == 0 or len(text2) == 0:\n            return 0\n        dp = [[0] * (len(text2) + 1) for _ in range(len(text1) + 1)]\n        for i in range(1, len(text1) + 1):\n            for j in range(1, len(text2) + 1):\n                if text1[i - 1] == text2[j - 1]:\n                    dp[i][j] = dp[i - 1][j - 1] + 1\n                else:\n                    dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])\n        return dp[-1][-1]\n"
    },
    {
        "number": 1144,
        "title": "Decrease Elements To Make Array Zigzag",
        "difficulty": 1,
        "answer": "        n = len(nums)\n        if n == 1:\n            return 0\n        if n == 2:\n            return 1\n        if n == 3:\n            return 2\n        if n == 4:\n            return 3\n        if n == 5:\n            return 4\n        if n == 6:\n            return 5\n        if n == 7:\n            return 6\n        if n == 8:\n            return 7\n        if n == 9:\n            return 8\n        if n % 2 == 0:\n            return self.movesToMakeZigzag(nums[1:n//2]) + self.movesToMakeZigzag(nums[n//2:n])\n        else:\n            return self.movesToMakeZigzag(nums[1:n//2]) + self.movesToMakeZigzag(nums[n//2:n]) + 1\n"
    },
    {
        "number": 1145,
        "title": "Binary Tree Coloring Game",
        "difficulty": 1,
        "answer": "        def dfs(node: TreeNode, x: int, y: int) -> bool:\n            if not node:\n                return False\n            if node.val == x:\n                return True\n            if node.val == y:\n                return False\n            return dfs(node.left, x, y) or dfs(node.right, x, y)"
    },
    {
        "number": 1146,
        "title": "Snapshot Array",
        "difficulty": 1,
        "answer": "        self.length = length\n        self.snap_id = 0\n        self.snap_arr = [0] * length\n        self.snap_arr[index] = val\n        return self.snap_id"
    },
    {
        "number": 1147,
        "title": "Longest Chunked Palindrome Decomposition",
        "difficulty": 2,
        "answer": "        n = len(text)\n        if n == 0:\n            return 0\n        if n == 1:\n            return 1\n        if n == 2:\n            return 2\n        if n == 3:\n            return 3\n        if n == 4:\n            return 4\n        if n == 5:\n            return 5\n        if n == 6:\n            return 6\n        if n == 7:\n            return 7\n        if n == 8:\n            return 8\n        if n == 9:\n            return 9\n        if n == 10:\n            return 10\n        if n == 11:\n            return 11\n        if n == 12:\n            return 12\n        if n == 13:\n            return 13\n        if n == 14:\n            return 14\n        if n == 15:\n            return 15\n        if n == 16:\n            return 16\n        if n == 17:\n            return 17\n        if n == 18:\n            return 18\n        if n == 19:\n            return 19\n        if n == 20:\n            return 20\n        if n == 21:\n            return 21\n"
    },
    {
        "number": 1154,
        "title": "Day of the Year",
        "difficulty": 0,
        "answer": "        year, month, day = map(int, date.split('-'))\n        return (365 * year + year // 4 - year // 100 + year // 400 +\n                day + day // 30 + day // 31 + day // 32 + day // 33 + day // 34 + day // 35 + day // 36 + day // 37 + day // 38 + day // 39 + day // 40 + day // 41)\n"
    },
    {
        "number": 1155,
        "title": "Number of Dice Rolls With Target Sum",
        "difficulty": 1,
        "answer": "        if n < 1 or k < 1 or target < 1:\n            return 0\n        if n == 1 and k == 1:\n            return 1\n        if n == 1 and k == 2:\n            return 1\n        if n == 1 and k == 3:\n            return 1\n        if n == 1 and k == 4:\n            return 1\n        if n == 1 and k == 5:\n            return 1\n        if n == 1 and k == 6:\n            return 1\n        if n == 1 and k == 7:\n            return 1\n        if n == 1 and k == 8:\n            return 1\n        if n == 1 and k == 9:\n            return 1\n        if n == 1 and k == 10:\n            return 1\n        if n == 1 and k == 11:\n            return 1\n        if n == 1 and k == 12:\n            return 1\n        if n == 1 and k == 13:\n            return 1\n        if n == 1 and k == 14:\n            return 1\n        if n == 1 and k == 15:\n            return 1\n        if n == 1 and"
    },
    {
        "number": 1156,
        "title": "Swap For Longest Repeated Character Substring",
        "difficulty": 1,
        "answer": "        if not text:\n            return 0\n        max_len = 0\n        for i in range(1, len(text)):\n            if text[i] == text[i - 1]:\n                max_len = max(max_len, i + 1)\n        return max_len"
    },
    {
        "number": 1157,
        "title": "Online Majority Element In Subarray",
        "difficulty": 2,
        "answer": "        if left == right:\n            return arr[left]\n        if left + 1 == right:\n            return arr[left] if arr[left] > arr[right] else arr[right]\n        if left + 2 == right:\n            return arr[left] if arr[left] > arr[right] else arr[right] if arr[right] > arr[left] else arr[left]\n        if left + 3 == right:\n            return arr[left] if arr[left] > arr[right] else arr[right] if arr[right] > arr[left] else arr[left] if arr[left] > arr[right] else arr[right]\n        if left + 4 == right:\n            return arr[left] if arr[left] > arr[right] else arr[right] if arr[right] > arr[left] else arr[left] if arr[left] > arr[right] else arr[right] if arr[right] > arr[left] else arr[left]\n        if left + 5 == right:\n            return arr[left] if arr[left] > arr"
    },
    {
        "number": 1160,
        "title": "Find Words That Can Be Formed by Characters",
        "difficulty": 0,
        "answer": "        if not words:\n            return 0\n        if not chars:\n            return len(words[0])"
    },
    {
        "number": 1161,
        "title": "Maximum Level Sum of a Binary Tree",
        "difficulty": 1,
        "answer": "        if not root:\n            return 0\n        return self.maxLevelSum(root.left) + self.maxLevelSum(root.right) + 1"
    },
    {
        "number": 1162,
        "title": "As Far from Land as Possible",
        "difficulty": 1,
        "answer": "        n = len(grid)\n        m = len(grid[0])\n        dist = [[0 for _ in range(m)] for _ in range(n)]\n        for i in range(n):\n            for j in range(m):\n                if grid[i][j] == 1:\n                    dist[i][j] = 0\n                else:\n                    dist[i][j] = -1\n        for i in range(n):\n            for j in range(m):\n                if grid[i][j] == 1:\n                    for k in range(i - 1, n):\n                        if grid[k][j] == 1:\n                            dist[i][j] = min(dist[i][j], dist[i][j] + dist[k][j])\n                    for k in range(j - 1, m):\n                        if grid[i][k] == 1:\n                            dist[i][j] = min(dist[i][j], dist[i][j] + dist[i][k])\n                    for k in range(i + 1, n):\n                        if grid["
    },
    {
        "number": 1163,
        "title": "Last Substring in Lexicographical Order",
        "difficulty": 2,
        "answer": "        if not s:\n            return \"\"\n        start = 0\n        end = len(s) - 1\n        while start < end:\n            mid = (start + end) // 2\n            if s[mid] > s[end]:\n                end = mid\n            else:\n                start = mid + 1\n        return s[start:end + 1]\n"
    },
    {
        "number": 1169,
        "title": "Invalid Transactions",
        "difficulty": 1,
        "answer": "        # TODO: implement this\n        pass"
    },
    {
        "number": 1170,
        "title": "Compare Strings by Frequency of the Smallest Character",
        "difficulty": 1,
        "answer": "        # Your Solution object will be instantiated and called as such:\n        # obj = Solution(queries, words)\n        # param_1 = obj.numSmallerByFrequency(queries, words)\n        # return param_1"
    },
    {
        "number": 1171,
        "title": "Remove Zero Sum Consecutive Nodes from Linked List",
        "difficulty": 1,
        "answer": "        # Definition for singly-linked list.\n        class ListNode:\n            def __init__(self, x):\n                self.val = x\n                self.next = None"
    },
    {
        "number": 1172,
        "title": "Dinner Plate Stacks",
        "difficulty": 2,
        "answer": "        pass"
    },
    {
        "number": 1175,
        "title": "Prime Arrangements",
        "difficulty": 0,
        "answer": "        if n < 2:\n            return 1\n        if n == 2:\n            return 1\n        if n == 3:\n            return 2\n        if n == 4:\n            return 1\n        if n == 5:\n            return 2\n        if n == 6:\n            return 3\n        if n == 7:\n            return 4\n        if n == 8:\n            return 5\n        if n == 9:\n            return 6\n        if n == 10:\n            return 7\n        if n == 11:\n            return 8\n        if n == 12:\n            return 9\n        if n == 13:\n            return 10\n        if n == 14:\n            return 11\n        if n == 15:\n            return 12\n        if n == 16:\n            return 13\n        if n == 17:\n            return 14\n        if n == 18:\n            return 15\n        if n == 19:\n            return 16\n        if n == 20:\n            return 17\n        if n == 21:\n            return 18\n        if n == 22:\n            return 19\n        if n == 23:\n            "
    },
    {
        "number": 1177,
        "title": "Can Make Palindrome from Substring",
        "difficulty": 1,
        "answer": "        if not s:\n            return [False] * len(queries)\n        if len(s) == 1:\n            return [True] * len(queries)\n        if len(s) == 2:\n            return [s[0] == s[1]] + self.canMakePaliQueries(s[1], queries)\n        if len(s) == 3:\n            return [s[0] == s[1] and s[1] == s[2]] + self.canMakePaliQueries(s[2], queries)\n        if len(s) == 4:\n            return [s[0] == s[1] and s[1] == s[2] and s[2] == s[3]] + self.canMakePaliQueries(s[3], queries)\n        if len(s) == 5:\n            return [s[0] == s[1] and s[1] == s[2] and s[2] == s[3] and s[3] == s[4]] + self.canMakePaliQueries(s"
    },
    {
        "number": 1178,
        "title": "Number of Valid Words for Each Puzzle",
        "difficulty": 2,
        "answer": "        valid_words = []\n        for word in words:\n            for puzzle in puzzles:\n                if word.startswith(puzzle):\n                    valid_words.append(word)\n        return valid_words"
    },
    {
        "number": 1184,
        "title": "Distance Between Bus Stops",
        "difficulty": 0,
        "answer": "        n = len(distance)\n        if n == 1:\n            return distance[0]\n        if n == 2:\n            return distance[0] + distance[1]\n        if n == 3:\n            return distance[0] + distance[1] + distance[2]\n        if n == 4:\n            return distance[0] + distance[1] + distance[2] + distance[3]\n        if n == 5:\n            return distance[0] + distance[1] + distance[2] + distance[3] + distance[4]\n        if n == 6:\n            return distance[0] + distance[1] + distance[2] + distance[3] + distance[4] + distance[5]\n        if n == 7:\n            return distance[0] + distance[1] + distance[2] + distance[3] + distance[4] + distance[5] + distance[6]\n        if n == 8:\n            return distance[0] + distance[1] + distance[2] + distance[3] + distance[4] + distance[5] +"
    },
    {
        "number": 1185,
        "title": "Day of the Week",
        "difficulty": 0,
        "answer": "        if month == 2:\n            if day > 29:\n                return \"Saturday\"\n            elif day > 28:\n                return \"Sunday\"\n            elif day == 29:\n                return \"Monday\"\n            elif day == 28:\n                return \"Tuesday\"\n            elif day == 27:\n                return \"Wednesday\"\n            elif day == 26:\n                return \"Thursday\"\n            elif day == 25:\n                return \"Friday\"\n            elif day == 24:\n                return \"Saturday\"\n            elif day == 23:\n                return \"Sunday\"\n            elif day == 22:\n                return \"Monday\"\n            elif day == 21:\n                return \"Tuesday\"\n            elif day == 20:\n                return \"Wednesday\"\n            elif day == 19:\n                return \"Thursday\"\n            elif day == 18:\n                return \"Friday\"\n            elif day == 17:\n                return \"Saturday\"\n            elif day == 16:\n                return \"Sunday\"\n            elif day == 15:\n                return \"Monday\"\n            elif day == 14"
    },
    {
        "number": 1186,
        "title": "Maximum Subarray Sum with One Deletion",
        "difficulty": 1,
        "answer": "        # https://leetcode.com/problems/maximum-sum-of-subarray/discuss/105586/Java-O(n)-solution-with-explanation\n        # https://leetcode.com/problems/maximum-sum-of-subarray/discuss/105586/Java-O(n)-solution-with-explanation\n        # https://leetcode.com/problems/maximum-sum-of-subarray/discuss/105586/Java-O(n)-solution-with-explanation\n        # https://leetcode.com/problems/maximum-sum-of-subarray/discuss/105586/Java-O(n)-solution-with-explanation\n        # https://leetcode.com/problems/maximum-sum-of-subarray/discuss/105586/Java-O(n)-solution-with-explanation\n        # https://leetcode.com/problems/maximum-sum-of-subarray/discuss/105586/Java"
    },
    {
        "number": 1187,
        "title": "Make Array Strictly Increasing",
        "difficulty": 2,
        "answer": "        if len(arr1) == 0 or len(arr2) == 0:\n            return -1\n        if len(arr1)!= len(arr2):\n            return -1\n        arr1.sort()\n        arr2.sort()\n        i = 0\n        j = 0\n        while i < len(arr1) and j < len(arr2):\n            if arr1[i] < arr2[j]:\n                i += 1\n            else:\n                arr1[i] = arr2[j]\n                j += 1\n        if i == len(arr1):\n            return j\n        return -1"
    },
    {
        "number": 1189,
        "title": "Maximum Number of Balloons",
        "difficulty": 0,
        "answer": "        n = len(text)\n        dp = [0] * (n + 1)\n        for i in range(1, n + 1):\n            dp[i] = dp[i - 1]\n            for j in range(i - 1, -1, -1):\n                if text[j] == text[i]:\n                    dp[i] = max(dp[i], dp[j] + 1)\n        return dp[-1]\n"
    },
    {
        "number": 1190,
        "title": "Reverse Substrings Between Each Pair of Parentheses",
        "difficulty": 1,
        "answer": "        stack = []\n        for c in s:\n            if c == \"(\":\n                stack.append(c)\n            elif c == \")\":\n                if len(stack) == 0:\n                    return \"\"\n                else:\n                    stack.pop()\n        return \"\".join(stack)\n"
    },
    {
        "number": 1191,
        "title": "K-Concatenation Maximum Sum",
        "difficulty": 1,
        "answer": "        n = len(arr)\n        if n == 0:\n            return 0\n        if n == 1:\n            return arr[0]\n        if n == 2:\n            return arr[0] + arr[1]\n        if n == 3:\n            return arr[0] + arr[1] + arr[2]\n        if n == 4:\n            return arr[0] + arr[1] + arr[2] + arr[3]\n        if n == 5:\n            return arr[0] + arr[1] + arr[2] + arr[3] + arr[4]\n        if n == 6:\n            return arr[0] + arr[1] + arr[2] + arr[3] + arr[4] + arr[5]\n        if n == 7:\n            return arr[0] + arr[1] + arr[2] + arr[3] + arr[4] + arr[5] + arr[6]\n        if n == 8:\n            return arr[0] + arr[1] + arr[2] + arr[3]"
    },
    {
        "number": 1192,
        "title": "Critical Connections in a Network",
        "difficulty": 2,
        "answer": "        if n == 1:\n            return [connections]\n        if n == 2:\n            return [connections]\n        if n == 3:\n            return [connections]\n        if n == 4:\n            return [connections]\n        if n == 5:\n            return [connections]\n        if n == 6:\n            return [connections]\n        if n == 7:\n            return [connections]\n        if n == 8:\n            return [connections]\n        if n == 9:\n            return [connections]\n        if n == 10:\n            return [connections]\n        if n == 11:\n            return [connections]\n        if n == 12:\n            return [connections]\n        if n == 13:\n            return [connections]\n        if n == 14:\n            return [connections]\n        if n == 15:\n            return [connections]\n        if n == 16:\n            return [connections]\n        if n == 17:\n            return [connections]\n        if n == 18:\n            return [connections"
    },
    {
        "number": 1195,
        "title": "Fizz Buzz Multithreaded",
        "difficulty": 1,
        "answer": "        for i in range(1, self.n + 1):\n            if i % 3 == 0 and i % 5 == 0:\n                printFizz()\n                printBuzz()\n                printFizzBuzz()\n                printNumber(i)\n            elif i % 3 == 0:\n                printFizz()\n                printBuzz()\n                printNumber(i)\n            elif i % 5 == 0:\n                printBuzz()\n                printNumber(i)\n            else:\n                printNumber(i)"
    },
    {
        "number": 1200,
        "title": "Minimum Absolute Difference",
        "difficulty": 0,
        "answer": "        # https://leetcode.com/problems/minimum-absolute-difference-in-an-array/discuss/\n        # https://leetcode.com/problems/minimum-absolute-difference-in-an-array/discuss/\n        # https://leetcode.com/problems/minimum-absolute-difference-in-an-array/discuss/\n        # https://leetcode.com/problems/minimum-absolute-difference-in-an-array/discuss/\n        # https://leetcode.com/problems/minimum-absolute-difference-in-an-array/discuss/\n        # https://leetcode.com/problems/minimum-absolute-difference-in-an-array/discuss/\n        # https://leetcode.com/problems/minimum-absolute-difference-in-an-array/discuss/\n        # https://leetcode.com/problems/minimum-absolute-difference-in-an-array/discuss/\n        # https://leetcode.com/"
    },
    {
        "number": 1201,
        "title": "Ugly Number III",
        "difficulty": 1,
        "answer": "        ugly = [1]\n        for i in range(2, n):\n            ugly.append(min(ugly[i - 1], min(ugly[i - 2], ugly[i - 3])))\n        return ugly[n - 1]\n"
    },
    {
        "number": 1202,
        "title": "Smallest String With Swaps",
        "difficulty": 1,
        "answer": "        if not pairs:\n            return s\n        if len(pairs) == 1:\n            return self.smallestStringWithSwaps(s[pairs[0][0]:pairs[0][1]], [])\n        if len(pairs) == 2:\n            return self.smallestStringWithSwaps(s[pairs[0][0]:pairs[0][1]], [pairs[1]]) + self.smallestStringWithSwaps(s[pairs[1][0]:pairs[1][1]], [pairs[0]])\n        if len(pairs) == 3:\n            return self.smallestStringWithSwaps(s[pairs[0][0]:pairs[0][1]], [pairs[1], pairs[2]]) + self.smallestStringWithSwaps(s[pairs[1][0]:pairs[1][1]], [pairs[0], pairs[2]]) + self.smallestStringWithSwaps(s[pairs[2][0]:pairs[2][1]], [p"
    },
    {
        "number": 1203,
        "title": "Sort Items by Groups Respecting Dependencies",
        "difficulty": 2,
        "answer": "        if n == 0:\n            return []\n        if n == 1:\n            return [group[0]]\n        if n == 2:\n            return [group[0], group[1]]\n        if n == 3:\n            return [group[0], group[1], group[2]]\n        if n == 4:\n            return [group[0], group[1], group[2], group[3]]\n        if n == 5:\n            return [group[0], group[1], group[2], group[3], group[4]]\n        if n == 6:\n            return [group[0], group[1], group[2], group[3], group[4], group[5]]\n        if n == 7:\n            return [group[0], group[1], group[2], group[3], group[4], group[5], group[6]]\n        if n == 8:\n            return [group[0], group[1], group[2], group[3], group[4], group[5], group[6], group[7]]\n        if n == 9:\n"
    },
    {
        "number": 1206,
        "title": "Design Skiplist",
        "difficulty": 2,
        "answer": "        pass"
    },
    {
        "number": 1207,
        "title": "Unique Number of Occurrences",
        "difficulty": 0,
        "answer": "        if not arr:\n            return True\n        if len(arr) == 1:\n            return True\n        if len(arr) == 2:\n            return arr[0]!= arr[1]\n        if len(arr) == 3:\n            return arr[0]!= arr[1] and arr[0]!= arr[2] and arr[1]!= arr[2]\n        if len(arr) == 4:\n            return arr[0]!= arr[1] and arr[0]!= arr[2] and arr[0]!= arr[3] and arr[1]!= arr[2] and arr[1]!= arr[3] and arr[2]!= arr[3]\n        if len(arr) == 5:\n            return arr[0]!= arr[1] and arr[0]!= arr[2] and arr[0]!= arr[3] and arr[0]!= arr[4] and arr[1]!= arr[2] and arr[1]!= arr[3] and arr[1]!= arr[4] and arr[2]!= arr[3"
    },
    {
        "number": 1208,
        "title": "Get Equal Substrings Within Budget",
        "difficulty": 1,
        "answer": "        # https://leetcode.com/problems/equal-substring/discuss/105586/Java-O(n)-solution-with-explanation\n        # https://leetcode.com/problems/equal-substring/discuss/105586/Java-O(n)-solution-with-explanation\n        # https://leetcode.com/problems/equal-substring/discuss/105586/Java-O(n)-solution-with-explanation\n        # https://leetcode.com/problems/equal-substring/discuss/105586/Java-O(n)-solution-with-explanation\n        # https://leetcode.com/problems/equal-substring/discuss/105586/Java-O(n)-solution-with-explanation\n        # https://leetcode.com/problems/equal-substring/discuss/105586/Java-O(n)-solution-with-explanation\n        # https://leetcode.com/"
    },
    {
        "number": 1209,
        "title": "Remove All Adjacent Duplicates in String II",
        "difficulty": 1,
        "answer": "        if not s:\n            return \"\"\n        if k == 1:\n            return s[0]\n        if k == 2:\n            return s[0] + s[1]\n        if k == 3:\n            return s[0] + s[1] + s[2]\n        if k == 4:\n            return s[0] + s[1] + s[2] + s[3]\n        if k == 5:\n            return s[0] + s[1] + s[2] + s[3] + s[4]\n        if k == 6:\n            return s[0] + s[1] + s[2] + s[3] + s[4] + s[5]\n        if k == 7:\n            return s[0] + s[1] + s[2] + s[3] + s[4] + s[5] + s[6]\n        if k == 8:\n            return s[0] + s[1] + s[2] + s[3] + s[4] + s[5"
    },
    {
        "number": 1210,
        "title": "Minimum Moves to Reach Target with Rotations",
        "difficulty": 2,
        "answer": "        n = len(grid)\n        m = len(grid[0])\n        if n == 0 or m == 0:\n            return -1\n        dp = [[0] * m for _ in range(n)]\n        dp[0][0] = 1\n        for i in range(1, n):\n            dp[i][0] = dp[i - 1][0] + 1\n        for j in range(1, m):\n            dp[0][j] = dp[0][j - 1] + 1\n        for i in range(1, n):\n            for j in range(1, m):\n                if grid[i][j] == 0:\n                    dp[i][j] = dp[i - 1][j] + dp[i][j - 1] + 1\n                else:\n                    dp[i][j] = min(dp[i - 1][j], dp[i][j - 1])\n        return dp[-1][-1]\n"
    },
    {
        "number": 1217,
        "title": "Minimum Cost to Move Chips to The Same Position",
        "difficulty": 0,
        "answer": "        n = len(position)\n        dp = [[0] * (n + 1) for _ in range(n + 1)]\n        for i in range(1, n + 1):\n            dp[i][i] = 0\n            dp[i][i - 1] = 1\n        for i in range(1, n + 1):\n            for j in range(i + 1, n + 1):\n                dp[i][j] = min(dp[i][j - 1], dp[i - 1][j]) + 1\n        return dp[-1][-1]\n"
    },
    {
        "number": 1218,
        "title": "Longest Arithmetic Subsequence of Given Difference",
        "difficulty": 1,
        "answer": "        if difference == 0:\n            return 1\n        if difference < 0:\n            return 0\n        if difference > 0:\n            return self.longestSubsequence(arr, difference - 1) + 1\n        if len(arr) == 1:\n            return 1\n        if len(arr) == 2:\n            return 1 if arr[0] == arr[1] else 0\n        if len(arr) == 3:\n            return 1 if arr[0] == arr[1] and arr[1] == arr[2] else 0\n        if len(arr) == 4:\n            return 1 if arr[0] == arr[1] and arr[1] == arr[2] and arr[2] == arr[3] else 0\n        if len(arr) == 5:\n            return 1 if arr[0] == arr[1] and arr[1] == arr[2] and arr[2] == arr[3] and arr[3] == arr[4] else 0\n        if len(arr) == 6:\n            return 1 if arr[0] == arr[1] and arr"
    },
    {
        "number": 1219,
        "title": "Path with Maximum Gold",
        "difficulty": 1,
        "answer": "        if not grid:\n            return 0"
    },
    {
        "number": 1220,
        "title": "Count Vowels Permutation",
        "difficulty": 2,
        "answer": "        def dfs(n, s):\n            if n == 0:\n                return 1\n            if n == 1:\n                return 1\n            if n == 2:\n                return 2\n            if n == 3:\n                return 3\n            if n == 4:\n                return 4\n            if n == 5:\n                return 5\n            if n == 6:\n                return 6\n            if n == 7:\n                return 7\n            if n == 8:\n                return 8\n            if n == 9:\n                return 9\n            if n == 10:\n                return 10\n            if n == 11:\n                return 11\n            if n == 12:\n                return 12\n            if n == 13:\n                return 13\n            if n == 14:\n                return 14\n            if n == 15:\n                return 15\n            if n == 16:\n                return 16\n            if n == 17:\n                return 17\n            if n == 18:\n                return 18\n            if n == 19:\n                return 19\n            if n == 20:\n                return 20\n            if n == 21:\n                return"
    },
    {
        "number": 1221,
        "title": "Split a String in Balanced Strings",
        "difficulty": 0,
        "answer": "        n = len(s)\n        if n == 0:\n            return 0\n        if n == 1:\n            return 1\n        if n == 2:\n            return 1 if s[0] == 'L' else 0\n        if n == 3:\n            return 1 if s[0] == 'L' and s[1] == 'R' else 0\n        if n == 4:\n            return 1 if s[0] == 'L' and s[1] == 'R' and s[2] == 'L' else 0\n        if n == 5:\n            return 1 if s[0] == 'L' and s[1] == 'R' and s[2] == 'L' and s[3] == 'R' else 0\n        if n == 6:\n            return 1 if s[0] == 'L' and s[1] == 'R' and s[2] == 'L' and s[3] == 'R' and s[4] == 'L' else 0\n        if n == 7:\n            return 1 if s[0] == 'L' and"
    },
    {
        "number": 1222,
        "title": "Queens That Can Attack the King",
        "difficulty": 1,
        "answer": "        # https://leetcode.com/problems/queens-attack-the-king/discuss/\n        # https://leetcode.com/problems/queens-attack-the-king/discuss/\n        # https://leetcode.com/problems/queens-attack-the-king/discuss/\n        # https://leetcode.com/problems/queens-attack-the-king/discuss/\n        # https://leetcode.com/problems/queens-attack-the-king/discuss/\n        # https://leetcode.com/problems/queens-attack-the-king/discuss/\n        # https://leetcode.com/problems/queens-attack-the-king/discuss/\n        # https://leetcode.com/problems/queens-attack-the-king/discuss/\n        # https://leetcode.com/problems/queens-attack-the-king/discuss/\n        # https://leetcode.com/problems/queens-"
    },
    {
        "number": 1223,
        "title": "Dice Roll Simulation",
        "difficulty": 2,
        "answer": "        if n < 1:\n            return 0\n        if n == 1:\n            return 1\n        if n == 2:\n            return 2\n        if n == 3:\n            return 3\n        if n == 4:\n            return 4\n        if n == 5:\n            return 5\n        if n == 6:\n            return 6\n        if n == 7:\n            return 7\n        if n == 8:\n            return 8\n        if n == 9:\n            return 9\n        if n == 10:\n            return 10\n        if n == 11:\n            return 11\n        if n == 12:\n            return 12\n        if n == 13:\n            return 13\n        if n == 14:\n            return 14\n        if n == 15:\n            return 15\n        if n == 16:\n            return 16\n        if n == 17:\n            return 17\n        if n == 18:\n            return 18\n        if n == 19:\n            return 19\n        if n == 20:\n            return 20\n        if n == 21:\n            return 21\n        if n == 22:\n            "
    },
    {
        "number": 1224,
        "title": "Maximum Equal Frequency",
        "difficulty": 2,
        "answer": "        n = len(nums)\n        if n == 0:\n            return 0\n        if n == 1:\n            return 1\n        if n == 2:\n            return 2\n        if n == 3:\n            return 3\n        if n == 4:\n            return 4\n        if n == 5:\n            return 5\n        if n == 6:\n            return 6\n        if n == 7:\n            return 7\n        if n == 8:\n            return 8\n        if n == 9:\n            return 9\n        if n == 10:\n            return 10\n        if n == 11:\n            return 11\n        if n == 12:\n            return 12\n        if n == 13:\n            return 13\n        if n == 14:\n            return 14\n        if n == 15:\n            return 15\n        if n == 16:\n            return 16\n        if n == 17:\n            return 17\n        if n == 18:\n            return 18\n        if n == 19:\n            return 19\n        if n == 20:\n            return 20\n        if n == 21:\n            return 21"
    },
    {
        "number": 1226,
        "title": "The Dining Philosophers",
        "difficulty": 1,
        "answer": "        pass"
    },
    {
        "number": 1227,
        "title": "Airplane Seat Assignment Probability",
        "difficulty": 1,
        "answer": "        pass"
    },
    {
        "number": 1232,
        "title": "Check If It Is a Straight Line",
        "difficulty": 0,
        "answer": "        n = len(coordinates)\n        if n < 2:\n            return True\n        if n == 2:\n            return coordinates[0][0] == coordinates[1][0] and coordinates[0][1] == coordinates[1][1]\n        if n == 3:\n            return coordinates[0][0] == coordinates[1][0] and coordinates[0][1] == coordinates[2][1] and coordinates[1][0] == coordinates[2][0]\n        if n == 4:\n            return coordinates[0][0] == coordinates[1][0] and coordinates[0][1] == coordinates[2][1] and coordinates[1][0] == coordinates[3][0] and coordinates[2][0] == coordinates[3][0]\n        if n == 5:\n            return coordinates[0][0] == coordinates[1][0] and coordinates[0][1] == coordinates[2][1] and coordinates[1][0] == coordinates[3][0] and coordinates[2][0] == coordinates[4][0] and coordinates[3][0] == coordinates[4][0"
    },
    {
        "number": 1233,
        "title": "Remove Sub-Folders from the Filesystem",
        "difficulty": 1,
        "answer": "        folder = sorted(folder)\n        folder = [f for f in folder if not f.endswith(\"/\")]\n        folder = [f for f in folder if not f.startswith(\"/\")]\n        folder = [f for f in folder if not f.startswith(\"/\")]\n        folder = [f for f in folder if not f.startswith(\"/\")]\n        folder = [f for f in folder if not f.startswith(\"/\")]\n        folder = [f for f in folder if not f.startswith(\"/\")]\n        folder = [f for f in folder if not f.startswith(\"/\")]\n        folder = [f for f in folder if not f.startswith(\"/\")]\n        folder = [f for f in folder if not f.startswith(\"/\")]\n        folder = [f for f in folder if not f.startswith(\"/\")]\n        folder = [f for f in folder if not f.startswith(\"/\")]\n        folder = [f for f in folder if not"
    },
    {
        "number": 1234,
        "title": "Replace the Substring for Balanced String",
        "difficulty": 1,
        "answer": "        n = len(s)\n        if n == 0:\n            return 0\n        if n == 1:\n            return 0\n        if n == 2:\n            return 1\n        if n == 3:\n            return 1\n        if n == 4:\n            return 0\n        if n == 5:\n            return 1\n        if n == 6:\n            return 2\n        if n == 7:\n            return 3\n        if n == 8:\n            return 4\n        if n == 9:\n            return 5\n        if n == 10:\n            return 6\n        if n == 11:\n            return 7\n        if n == 12:\n            return 8\n        if n == 13:\n            return 9\n        if n == 14:\n            return 10\n        if n == 15:\n            return 11\n        if n == 16:\n            return 12\n        if n == 17:\n            return 13\n        if n == 18:\n            return 14\n        if n == 19:\n            return 15\n        if n == 20:\n            return 16\n        if n == 21:\n            return 17\n"
    },
    {
        "number": 1235,
        "title": "Maximum Profit in Job Scheduling",
        "difficulty": 2,
        "answer": "        if len(startTime)!= len(endTime) or len(startTime)!= len(profit):\n            return 0\n        if len(startTime) == 1:\n            return max(endTime[0] - startTime[0], profit[0])\n        if len(startTime) == 2:\n            return max(endTime[0] - startTime[0], endTime[1] - startTime[1], profit[0] + profit[1])\n        if len(startTime) == 3:\n            return max(endTime[0] - startTime[0], endTime[1] - startTime[1], endTime[2] - startTime[2], profit[0] + profit[1] + profit[2])\n        if len(startTime) == 4:\n            return max(endTime[0] - startTime[0], endTime[1] - startTime[1], endTime[2] - startTime[2], endTime[3] - startTime[3], profit[0] + profit[1] + profit[2] + profit[3])\n        "
    },
    {
        "number": 1237,
        "title": "Find Positive Integer Solution for a Given Equation",
        "difficulty": 1,
        "answer": "        pass"
    },
    {
        "number": 1238,
        "title": "Circular Permutation in Binary Representation",
        "difficulty": 1,
        "answer": "        if n == 1:\n            return [start]\n        if n == 2:\n            return [start, start ^ 1]\n        if n == 3:\n            return [start, start ^ 1, start ^ 2]\n        if n == 4:\n            return [start, start ^ 1, start ^ 2, start ^ 3]\n        if n == 5:\n            return [start, start ^ 1, start ^ 2, start ^ 3, start ^ 4]\n        if n == 6:\n            return [start, start ^ 1, start ^ 2, start ^ 3, start ^ 4, start ^ 5]\n        if n == 7:\n            return [start, start ^ 1, start ^ 2, start ^ 3, start ^ 4, start ^ 5, start ^ 6]\n        if n == 8:\n            return [start, start ^ 1, start ^ 2, start ^ 3, start ^ 4, start ^ 5, start ^ 6, start ^ 7]\n        if n == 9:\n            return [start, start ^ 1, start ^ 2, start ^ 3, start ^ 4, start ^ 5, start ^"
    },
    {
        "number": 1239,
        "title": "Maximum Length of a Concatenated String with Unique Characters",
        "difficulty": 1,
        "answer": "        if not arr:\n            return 0\n        if len(arr) == 1:\n            return 1\n        if len(arr) == 2:\n            return len(arr[0]) + len(arr[1])\n        if len(arr) == 3:\n            return max(len(arr[0]), len(arr[1]), len(arr[2]))\n        if len(arr) == 4:\n            return max(len(arr[0]), len(arr[1]), len(arr[2]), len(arr[3]))\n        if len(arr) == 5:\n            return max(len(arr[0]), len(arr[1]), len(arr[2]), len(arr[3]), len(arr[4]))\n        if len(arr) == 6:\n            return max(len(arr[0]), len(arr[1]), len(arr[2]), len(arr[3]), len(arr[4]), len(arr[5]))\n        if len(arr) == 7:\n            return max(len(arr[0]), len(arr[1]), len("
    },
    {
        "number": 1240,
        "title": "Tiling a Rectangle with the Fewest Squares",
        "difficulty": 2,
        "answer": "        if n == 0 or m == 0:\n            return 0\n        if n == 1 or m == 1:\n            return 1\n        if n == 2 or m == 2:\n            return 2\n        if n == 3 or m == 3:\n            return 3\n        if n == 4 or m == 4:\n            return 4\n        if n == 5 or m == 5:\n            return 5\n        if n == 6 or m == 6:\n            return 6\n        if n == 7 or m == 7:\n            return 7\n        if n == 8 or m == 8:\n            return 8\n        if n == 9 or m == 9:\n            return 9\n        if n == 10 or m == 10:\n            return 10\n        if n == 11 or m == 11:\n            return 11\n        if n == 12 or m == 12:\n            return 12\n        if n == 13 or m == 13:\n            return 13\n        if n == 14 or m == 14:\n            return 14\n        if n == 15 or m == 15:\n            return 15\n        if n == 16 or m == 16:"
    },
    {
        "number": 1247,
        "title": "Minimum Swaps to Make Strings Equal",
        "difficulty": 1,
        "answer": "        # https://leetcode.com/problems/minimum-swap/discuss/105537/Java-C-solution-with-explanation\n        # https://leetcode.com/problems/minimum-swap/discuss/105537/Java-C-solution-with-explanation\n        # https://leetcode.com/problems/minimum-swap/discuss/105537/Java-C-solution-with-explanation\n        # https://leetcode.com/problems/minimum-swap/discuss/105537/Java-C-solution-with-explanation\n        # https://leetcode.com/problems/minimum-swap/discuss/105537/Java-C-solution-with-explanation\n        # https://leetcode.com/problems/minimum-swap/discuss/105537/Java-C-solution-with-explanation\n        # https://leetcode.com/problems/minimum-swap/discuss/10"
    },
    {
        "number": 1248,
        "title": "Count Number of Nice Subarrays",
        "difficulty": 1,
        "answer": "        n = len(nums)\n        if n == 0:\n            return 0\n        if n == 1:\n            return 1\n        if n == 2:\n            return 1 if nums[0] % 2 == 1 else 0\n        if n == 3:\n            return 1 if nums[0] % 2 == 1 else 0 if nums[1] % 2 == 1 else 0\n        if n == 4:\n            return 1 if nums[0] % 2 == 1 else 0 if nums[1] % 2 == 1 else 0 if nums[2] % 2 == 1 else 0\n        if n == 5:\n            return 1 if nums[0] % 2 == 1 else 0 if nums[1] % 2 == 1 else 0 if nums[2] % 2 == 1 else 0 if nums[3] % 2 == 1 else 0\n        if n == 6:\n            return 1 if nums[0] % 2 == 1 else 0 if nums[1] % 2 == 1 else 0 if nums[2] % 2 == 1 else 0 if nums[3] % 2 =="
    },
    {
        "number": 1249,
        "title": "Minimum Remove to Make Valid Parentheses",
        "difficulty": 1,
        "answer": "        stack = []\n        for c in s:\n            if c == '(':\n                stack.append(c)\n            elif c == ')':\n                if not stack:\n                    return \"\"\n                elif stack[-1] == '(':\n                    stack.pop()\n                else:\n                    return \"\"\n        if not stack:\n            return \"\"\n        return stack[-1]"
    },
    {
        "number": 1250,
        "title": "Check If It Is a Good Array",
        "difficulty": 2,
        "answer": "        if not nums:\n            return True\n        if len(nums) == 1:\n            return True\n        if len(nums) == 2:\n            return nums[0] == nums[1]\n        if len(nums) == 3:\n            return nums[0] == nums[1] and nums[1] == nums[2]\n        if len(nums) == 4:\n            return nums[0] == nums[1] and nums[1] == nums[2] and nums[2] == nums[3]\n        if len(nums) == 5:\n            return nums[0] == nums[1] and nums[1] == nums[2] and nums[2] == nums[3] and nums[3] == nums[4]\n        if len(nums) == 6:\n            return nums[0] == nums[1] and nums[1] == nums[2] and nums[2] == nums[3] and nums["
    },
    {
        "number": 1252,
        "title": "Cells with Odd Values in a Matrix",
        "difficulty": 0,
        "answer": "        odd_count = 0\n        for i in indices:\n            for j in indices:\n                if i[0] == j[0] or i[1] == j[1]:\n                    odd_count += 1\n        return odd_count\n"
    },
    {
        "number": 1253,
        "title": "Reconstruct a 2-Row Binary Matrix",
        "difficulty": 1,
        "answer": "        n = len(colsum)\n        if upper < lower:\n            return []\n        if upper == lower:\n            return [[1] * n for _ in range(upper)]\n        if upper > lower:\n            return [[1] * n for _ in range(upper)] + [[0] * n for _ in range(lower)]"
    },
    {
        "number": 1254,
        "title": "Number of Closed Islands",
        "difficulty": 1,
        "answer": "        if not grid:\n            return 0\n        row = len(grid)\n        col = len(grid[0])\n        count = 0\n        for i in range(row):\n            for j in range(col):\n                if grid[i][j] == 1:\n                    self.dfs(grid, i, j, row, col)\n                    count += 1\n        return count"
    },
    {
        "number": 1255,
        "title": "Maximum Score Words Formed by Letters",
        "difficulty": 2,
        "answer": "        # dp[i][j] = max(dp[i-1][j], dp[i][j-1], dp[i-1][j-1])\n        dp = [[0 for _ in range(26)] for _ in range(26)]\n        for i in range(26):\n            for j in range(26):\n                if i == 0:\n                    dp[i][j] = 0\n                elif j == 0:\n                    dp[i][j] = 0\n                else:\n                    dp[i][j] = max(dp[i-1][j], dp[i][j-1], dp[i-1][j-1])\n        for i in range(len(words)):\n            for j in range(len(words[i])):\n                for k in range(len(letters[j])):\n                    if letters[j][k] == words[i][j]:\n                        dp[j][k] = dp[j][k] + score[i]\n        return dp[-1][-1]\n"
    },
    {
        "number": 1260,
        "title": "Shift 2D Grid",
        "difficulty": 0,
        "answer": "        m, n = len(grid), len(grid[0])\n        if m == 0 or n == 0:\n            return grid\n        if k == 0:\n            return grid\n        if k == 1:\n            return [[grid[i][j] for j in range(n)] for i in range(m)]\n        if k == 2:\n            return [[grid[i][j] for j in range(n)] for i in range(m)]\n        if k == 3:\n            return [[grid[i][j] for j in range(n)] for i in range(m)]\n        if k == 4:\n            return [[grid[i][j] for j in range(n)] for i in range(m)]\n        if k == 5:\n            return [[grid[i][j] for j in range(n)] for i in range(m)]\n        if k == 6:\n            return [[grid[i][j] for j in range(n)] for i in range(m)]\n        if k == 7:\n            return [[grid[i][j] for j in range(n"
    },
    {
        "number": 1261,
        "title": "Find Elements in a Contaminated Binary Tree",
        "difficulty": 1,
        "answer": "        if root is None:\n            return False\n        if root.val == target:\n            return True\n        if root.val == -1:\n            return False\n        if root.left is not None:\n            if root.left.val == target:\n                return True\n            if root.left.val == -1:\n                return False\n            if root.left.left is not None:\n                if root.left.left.val == target:\n                    return True\n                if root.left.left.val == -1:\n                    return False\n            if root.left.right is not None:\n                if root.left.right.val == target:\n                    return True\n                if root.left.right.val == -1:\n                    return False\n        if root.right is not None:\n            if root.right.val == target:\n                return True\n            if root.right.val == -1:\n                return False\n            if root.right.left is not None:\n                if root.right.left.val == target:\n                    return True\n                if root.right.left"
    },
    {
        "number": 1262,
        "title": "Greatest Sum Divisible by Three",
        "difficulty": 1,
        "answer": "        n = len(nums)\n        if n == 0:\n            return 0\n        if n == 1:\n            return nums[0]\n        if n == 2:\n            return max(nums[0], nums[1])\n        if n == 3:\n            return max(nums[0], nums[1], nums[2])\n        if n == 4:\n            return max(nums[0], nums[1], nums[2], nums[3])\n        if n == 5:\n            return max(nums[0], nums[1], nums[2], nums[3], nums[4])\n        if n == 6:\n            return max(nums[0], nums[1], nums[2], nums[3], nums[4], nums[5])\n        if n == 7:\n            return max(nums[0], nums[1], nums[2], nums[3], nums[4], nums[5], nums[6])\n        if n == 8:\n            "
    },
    {
        "number": 1263,
        "title": "Minimum Moves to Move a Box to Their Target Location",
        "difficulty": 2,
        "answer": "        m, n = len(grid), len(grid[0])\n        dp = [[0] * n for _ in range(m)]\n        for i in range(m):\n            for j in range(n):\n                if grid[i][j] == '#':\n                    dp[i][j] = -1\n                elif grid[i][j] == '.':\n                    dp[i][j] = 0\n                elif grid[i][j] == 'S':\n                    dp[i][j] = 1\n                else:\n                    dp[i][j] = 2\n        return self.minPushBox_dp(grid, dp)"
    },
    {
        "number": 1266,
        "title": "Minimum Time Visiting All Points",
        "difficulty": 0,
        "answer": "        n = len(points)\n        if n == 0:\n            return 0\n        if n == 1:\n            return 1\n        dp = [[0] * (n + 1) for _ in range(n + 1)]\n        dp[0][0] = 0\n        dp[0][1] = 1\n        for i in range(1, n + 1):\n            dp[i][0] = dp[i - 1][0] + 1\n            dp[i][1] = dp[i - 1][1] + 1\n            dp[i][2] = dp[i - 1][2] + 1\n            dp[i][3] = dp[i - 1][3] + 1\n            dp[i][4] = dp[i - 1][4] + 1\n            dp[i][5] = dp[i - 1][5] + 1\n            dp[i][6] = dp[i - 1][6] + 1\n        return dp[n][0]"
    },
    {
        "number": 1267,
        "title": "Count Servers that Communicate",
        "difficulty": 1,
        "answer": "        m, n = len(grid), len(grid[0])\n        dp = [[0] * (n + 1) for _ in range(m + 1)]\n        for i in range(1, m + 1):\n            for j in range(1, n + 1):\n                if grid[i - 1][j - 1] == 1:\n                    dp[i][j] = dp[i - 1][j] + dp[i][j - 1]\n                else:\n                    dp[i][j] = 0\n        return sum(dp[-1])"
    },
    {
        "number": 1268,
        "title": "Search Suggestions System",
        "difficulty": 1,
        "answer": "        # Your Solution object will be instantiated and called as such:\n        # obj = Solution(products, searchWord)\n        # param_1 = obj.suggestedProducts(searchWord)\n        # return param_1"
    },
    {
        "number": 1269,
        "title": "Number of Ways to Stay in the Same Place After Some Steps",
        "difficulty": 2,
        "answer": "        if steps == 0:\n            return 1\n        if steps == 1:\n            return arrLen\n        if steps == 2:\n            return arrLen * arrLen\n        if steps == 3:\n            return (arrLen * (arrLen - 1)) // 2\n        if steps == 4:\n            return (arrLen * (arrLen - 1) * (arrLen - 2)) // 6\n        if steps == 5:\n            return (arrLen * (arrLen - 1) * (arrLen - 2) * (arrLen - 3)) // 24\n        if steps == 6:\n            return (arrLen * (arrLen - 1) * (arrLen - 2) * (arrLen - 3) * (arrLen - 4)) // 120\n        if steps == 7:\n            return (arrLen * (arrLen - 1) * (arrLen - 2) * (arrLen - 3) * (arrLen - 4) * (arrLen - 5)) // 720\n        if steps == 8:\n            return (arrLen * (arrLen - 1) * (arrLen - 2) * (arrLen - 3"
    },
    {
        "number": 1275,
        "title": "Find Winner on a Tic Tac Toe Game",
        "difficulty": 0,
        "answer": "        # Your Tic-tac-toe object will be instantiated and called as such:\n        # obj = Object()\n        # param_1 = param_1\n        # param_2 = param_2\n        # param_3 = param_3\n        # return obj.tic_tac_toe(param_1, param_2, param_3)"
    },
    {
        "number": 1276,
        "title": "Number of Burgers with No Waste of Ingredients",
        "difficulty": 1,
        "answer": "        if tomatoSlices < cheeseSlices:\n            return self.numOfBurgers(cheeseSlices, tomatoSlices)\n        if tomatoSlices == 0 and cheeseSlices == 0:\n            return []\n        if tomatoSlices == 0:\n            return [cheeseSlices]\n        if cheeseSlices == 0:\n            return [tomatoSlices]\n        if tomatoSlices == 1 and cheeseSlices == 1:\n            return [1]\n        if tomatoSlices == 1:\n            return [cheeseSlices]\n        if cheeseSlices == 1:\n            return [tomatoSlices]\n        if tomatoSlices == 2 and cheeseSlices == 2:\n            return [2]\n        if tomatoSlices == 2:\n            return [cheeseSlices]\n        if cheeseSlices == 2:\n            return [tomatoSlices]\n        if tomatoSlices == 3 and cheeseSlices == 3:\n            return [3]\n        if tomatoSlic"
    },
    {
        "number": 1277,
        "title": "Count Square Submatrices with All Ones",
        "difficulty": 1,
        "answer": "        if not matrix:\n            return 0\n        m, n = len(matrix), len(matrix[0])\n        dp = [[0] * (n + 1) for _ in range(m + 1)]\n        for i in range(1, m + 1):\n            for j in range(1, n + 1):\n                dp[i][j] = dp[i - 1][j] + dp[i][j - 1]\n        return dp[m][n]\n"
    },
    {
        "number": 1278,
        "title": "Palindrome Partitioning III",
        "difficulty": 2,
        "answer": "        if not s:\n            return 0\n        if len(s) <= k:\n            return len(s)\n        # s = s.replace(\"a\", \"b\")\n        # s = s.replace(\"b\", \"a\")\n        # s = s.replace(\"c\", \"d\")\n        # s = s.replace(\"d\", \"c\")\n        # s = s.replace(\"e\", \"f\")\n        # s = s.replace(\"f\", \"e\")\n        # s = s.replace(\"g\", \"h\")\n        # s = s.replace(\"h\", \"g\")\n        # s = s.replace(\"i\", \"j\")\n        # s = s.replace(\"j\", \"i\")\n        # s = s.replace(\"k\", \"l\")\n        # s = s.replace(\"l\", \"k\")\n        # s = s.replace(\"m\", \"n\")\n        # s = s.replace(\"n\", \"m\")\n        # s = s.replace(\"o\", \"p\")\n        # s = s.replace(\"p\", \"o\")"
    },
    {
        "number": 1281,
        "title": "Subtract the Product and Sum of Digits of an Integer",
        "difficulty": 0,
        "answer": "        return n - self.productAndSum(n)"
    },
    {
        "number": 1282,
        "title": "Group the People Given the Group Size They Belong To",
        "difficulty": 1,
        "answer": "        # https://leetcode.com/problems/group-the-people/discuss/105586/Java-O(n)-solution-with-explanation\n        # https://leetcode.com/problems/group-the-people/discuss/105587/Java-O(n)-solution-with-explanation\n        # https://leetcode.com/problems/group-the-people/discuss/105588/Java-O(n)-solution-with-explanation\n        # https://leetcode.com/problems/group-the-people/discuss/105589/Java-O(n)-solution-with-explanation\n        # https://leetcode.com/problems/group-the-people/discuss/105590/Java-O(n)-solution-with-explanation\n        # https://leetcode.com/problems/group-the-people/discuss/105591/Java-O(n)-solution-with-explanation\n        # https://"
    },
    {
        "number": 1283,
        "title": "Find the Smallest Divisor Given a Threshold",
        "difficulty": 1,
        "answer": "        if not nums:\n            return 0\n        if len(nums) == 1:\n            return nums[0]\n        if len(nums) == 2:\n            return min(nums)\n        if len(nums) == 3:\n            return min(nums)\n        if len(nums) == 4:\n            return min(nums)\n        if len(nums) == 5:\n            return min(nums)\n        if len(nums) == 6:\n            return min(nums)\n        if len(nums) == 7:\n            return min(nums)\n        if len(nums) == 8:\n            return min(nums)\n        if len(nums) == 9:\n            return min(nums)\n        if len(nums) == 10:\n            return min(nums)\n        if len(nums) == 11:\n            return min(nums)\n        if len(nums) == 12:\n            return min(nums)\n        if len(nums) == 13:\n"
    },
    {
        "number": 1284,
        "title": "Minimum Number of Flips to Convert Binary Matrix to Zero Matrix",
        "difficulty": 2,
        "answer": "        # https://leetcode.com/problems/minimum-flips-to-convert-a-binary-matrix-to-zero/discuss/\n        # https://leetcode.com/problems/minimum-flips-to-convert-a-binary-matrix-to-zero/discuss/\n        # https://leetcode.com/problems/minimum-flips-to-convert-a-binary-matrix-to-zero/discuss/\n        # https://leetcode.com/problems/minimum-flips-to-convert-a-binary-matrix-to-zero/discuss/\n        # https://leetcode.com/problems/minimum-flips-to-convert-a-binary-matrix-to-zero/discuss/\n        # https://leetcode.com/problems/minimum-flips-to-convert-a-binary-matrix-to-zero/discuss/\n        # https://leetcode.com/problems/minimum-flips-to-convert"
    },
    {
        "number": 1286,
        "title": "Iterator for Combination",
        "difficulty": 1,
        "answer": "        if combinationLength == 0:\n            return \"\"\n        if combinationLength == 1:\n            return characters\n        if combinationLength == 2:\n            return \"\".join(sorted(set(characters)))\n        if combinationLength == 3:\n            return \"\".join(sorted(set(characters))) + \"\".join(sorted(set(characters)))\n        if combinationLength == 4:\n            return \"\".join(sorted(set(characters))) + \"\".join(sorted(set(characters))) + \"\".join(sorted(set(characters)))\n        if combinationLength == 5:\n            return \"\".join(sorted(set(characters))) + \"\".join(sorted(set(characters))) + \"\".join(sorted(set(characters))) + \"\".join(sorted(set(characters)))\n        if combinationLength == 6:\n            return \"\".join(sorted(set(characters))) + \"\".join(sorted(set(characters))) + \"\".join(sorted(set(characters))) + \"\".join(sorted("
    },
    {
        "number": 1287,
        "title": "Element Appearing More Than 25% In Sorted Array",
        "difficulty": 0,
        "answer": "        if len(arr) == 1:\n            return arr[0]\n        if len(arr) == 2:\n            return arr[0] if arr[0] > arr[1] else arr[1]\n        if len(arr) == 3:\n            return arr[0] if arr[0] > arr[1] else arr[1] if arr[1] > arr[2] else arr[2]\n        if len(arr) == 4:\n            return arr[0] if arr[0] > arr[1] else arr[1] if arr[1] > arr[2] else arr[2] if arr[2] > arr[3] else arr[3]\n        if len(arr) == 5:\n            return arr[0] if arr[0] > arr[1] else arr[1] if arr[1] > arr[2] else arr[2] if arr[2] > arr[3] else arr[3] if arr[3] > arr[4] else arr[4]\n        if len(arr) == 6:\n            return arr[0"
    },
    {
        "number": 1288,
        "title": "Remove Covered Intervals",
        "difficulty": 1,
        "answer": "        if not intervals:\n            return 0"
    },
    {
        "number": 1289,
        "title": "Minimum Falling Path Sum II",
        "difficulty": 2,
        "answer": "        n = len(grid)\n        if n == 0:\n            return 0\n        m = len(grid[0])\n        dp = [[0] * m for _ in range(n)]\n        for i in range(n):\n            for j in range(m):\n                dp[i][j] = grid[i][j]\n        for i in range(n - 1, -1, -1):\n            for j in range(m):\n                dp[i][j] = min(dp[i + 1][j], dp[i][j + 1]) + grid[i][j]\n        return dp[0][0]\n"
    },
    {
        "number": 1290,
        "title": "Convert Binary Number in a Linked List to Integer",
        "difficulty": 0,
        "answer": "        # Definition for singly-linked list.\n        class ListNode:\n            def __init__(self, x):\n                self.val = x\n                self.next = None"
    },
    {
        "number": 1291,
        "title": "Sequential Digits",
        "difficulty": 1,
        "answer": "        seq_digits = []\n        for i in range(low, high + 1):\n            if i % 10 == 0:\n                seq_digits.append(i)\n        return sorted(seq_digits)\n"
    },
    {
        "number": 1292,
        "title": "Maximum Side Length of a Square with Sum Less than or Equal to Threshold",
        "difficulty": 1,
        "answer": "        if not mat:\n            return 0\n        m, n = len(mat), len(mat[0])\n        dp = [[0] * (n + 1) for _ in range(m + 1)]\n        for i in range(1, m + 1):\n            for j in range(1, n + 1):\n                dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])\n                if i > 1 and j > 1:\n                    dp[i][j] = min(dp[i][j], dp[i - 1][j - 1] + mat[i - 1][j - 1])\n                if i > 1 and j < n:\n                    dp[i][j] = min(dp[i][j], dp[i - 1][j] + mat[i - 1][j])\n                if i < m and j > 1:\n                    dp[i][j] = min(dp[i][j], dp[i][j - 1] + mat[i][j - 1])\n                if i < m and"
    },
    {
        "number": 1293,
        "title": "Shortest Path in a Grid with Obstacles Elimination",
        "difficulty": 2,
        "answer": "        m, n = len(grid), len(grid[0])\n        dp = [[0] * n for _ in range(m)]\n        for i in range(m):\n            for j in range(n):\n                if grid[i][j] == 1:\n                    dp[i][j] = 1\n                else:\n                    dp[i][j] = dp[i - 1][j] + dp[i][j - 1] + dp[i - 1][j - 1]\n        return min(dp[m - 1][n - 1], dp[m - 1][n - 2], dp[m - 2][n - 1], dp[m - 2][n - 2])\n"
    },
    {
        "number": 1295,
        "title": "Find Numbers with Even Number of Digits",
        "difficulty": 0,
        "answer": "        count = 0\n        for num in nums:\n            if len(str(num)) % 2 == 0:\n                count += 1\n        return count\n"
    },
    {
        "number": 1296,
        "title": "Divide Array in Sets of K Consecutive Numbers",
        "difficulty": 1,
        "answer": "        n = len(nums)\n        if n < k:\n            return False\n        if n == 1:\n            return True\n        if n == 2:\n            return nums[0] == nums[1]\n        if n == 3:\n            return nums[0] == nums[1] and nums[1] == nums[2]\n        if n == 4:\n            return nums[0] == nums[1] and nums[1] == nums[2] and nums[2] == nums[3]\n        if n == 5:\n            return nums[0] == nums[1] and nums[1] == nums[2] and nums[2] == nums[3] and nums[3] == nums[4]\n        if n == 6:\n            return nums[0] == nums[1] and nums[1] == nums[2] and nums[2] == nums[3] and nums[3] == nums[4] and nums[4] =="
    },
    {
        "number": 1297,
        "title": "Maximum Number of Occurrences of a Substring",
        "difficulty": 1,
        "answer": "        # https://leetcode.com/problems/longest-substring-with-at-most-k-distinct-characters/discuss/\n        # https://leetcode.com/problems/longest-substring-with-at-most-k-distinct-characters/discuss/\n        # https://leetcode.com/problems/longest-substring-with-at-most-k-distinct-characters/discuss/\n        # https://leetcode.com/problems/longest-substring-with-at-most-k-distinct-characters/discuss/\n        # https://leetcode.com/problems/longest-substring-with-at-most-k-distinct-characters/discuss/\n        # https://leetcode.com/problems/longest-substring-with-at-most-k-distinct-characters/discuss/\n        # https://leetcode.com/problems/longest-substring-with-at-most-k-dist"
    },
    {
        "number": 1298,
        "title": "Maximum Candies You Can Get from Boxes",
        "difficulty": 2,
        "answer": "        # print(status, candies, keys, containedBoxes, initialBoxes)\n        # print(status, candies, keys, containedBoxes, initialBoxes)\n        # print(status, candies, keys, containedBoxes, initialBoxes)\n        # print(status, candies, keys, containedBoxes, initialBoxes)\n        # print(status, candies, keys, containedBoxes, initialBoxes)\n        # print(status, candies, keys, containedBoxes, initialBoxes)\n        # print(status, candies, keys, containedBoxes, initialBoxes)\n        # print(status, candies, keys, containedBoxes, initialBoxes)\n        # print(status, candies, keys, containedBoxes, initialBoxes)\n        # print(status, candies, keys, containedBoxes, initialBoxes)\n        # print(status, candies, keys, containedBoxes, initialBoxes)\n        # print(status, candies, keys, containedBoxes, initialBoxes)\n        # print(status, candies, keys"
    },
    {
        "number": 1299,
        "title": "Replace Elements with Greatest Element on Right Side",
        "difficulty": 0,
        "answer": "        if len(arr) == 1:\n            return [-1]\n        if len(arr) == 2:\n            return [max(arr[0], arr[1])]\n        if len(arr) == 3:\n            return [max(arr[0], arr[1]), max(arr[1], arr[2])]\n        if len(arr) == 4:\n            return [max(arr[0], arr[1]), max(arr[1], arr[2]), max(arr[2], arr[3])]\n        if len(arr) == 5:\n            return [max(arr[0], arr[1]), max(arr[1], arr[2]), max(arr[2], arr[3]), max(arr[3], arr[4])]\n        if len(arr) == 6:\n            return [max(arr[0], arr[1]), max(arr[1], arr[2]), max(arr[2], arr[3]), max(arr[3], arr[4]), max(arr[4], arr[5])]\n        if len(arr) == 7:"
    },
    {
        "number": 1300,
        "title": "Sum of Mutated Array Closest to Target",
        "difficulty": 1,
        "answer": "        if not arr:\n            return 0\n        if len(arr) == 1:\n            return arr[0]\n        if len(arr) == 2:\n            return min(arr)\n        if len(arr) == 3:\n            return min(arr)\n        if len(arr) == 4:\n            return min(arr)\n        if len(arr) == 5:\n            return min(arr)\n        if len(arr) == 6:\n            return min(arr)\n        if len(arr) == 7:\n            return min(arr)\n        if len(arr) == 8:\n            return min(arr)\n        if len(arr) == 9:\n            return min(arr)\n        if len(arr) == 10:\n            return min(arr)\n        if len(arr) == 11:\n            return min(arr)\n        if len(arr) == 12:\n            return min(arr)\n        if len(arr) == 13:\n            return min(arr)\n        if len(arr) == 14:\n            return min(arr)\n        if"
    },
    {
        "number": 1301,
        "title": "Number of Paths with Max Score",
        "difficulty": 2,
        "answer": ""
    },
    {
        "number": 1302,
        "title": "Deepest Leaves Sum",
        "difficulty": 1,
        "answer": "        if not root:\n            return 0\n        return self.deepestLeavesSum(root.left) + self.deepestLeavesSum(root.right) + root.val"
    },
    {
        "number": 1304,
        "title": "Find N Unique Integers Sum up to Zero",
        "difficulty": 0,
        "answer": "        if n == 0:\n            return []\n        if n == 1:\n            return [-1]\n        if n == 2:\n            return [-1, 0]\n        if n == 3:\n            return [-1, 0, 1]\n        if n == 4:\n            return [-1, 0, 1, 2]\n        if n == 5:\n            return [-1, 0, 1, 2, 3]\n        if n == 6:\n            return [-1, 0, 1, 2, 3, 4]\n        if n == 7:\n            return [-1, 0, 1, 2, 3, 4, 5]\n        if n == 8:\n            return [-1, 0, 1, 2, 3, 4, 5, 6]\n        if n == 9:\n            return [-1, 0, 1, 2, 3, 4, 5, 6, 7]\n        if n == 10:\n            return [-1, 0, 1, 2, 3, 4, 5, 6, 7, 8]\n        if n == 11:\n            return [-1, 0, 1, 2, 3"
    },
    {
        "number": 1305,
        "title": "All Elements in Two Binary Search Trees",
        "difficulty": 1,
        "answer": "        if not root1:\n            return []\n        if not root2:\n            return []\n        if root1.val < root2.val:\n            return self.getAllElements(root1.left, root2)\n        elif root1.val > root2.val:\n            return self.getAllElements(root1.right, root2)\n        else:\n            return [root1.val] + self.getAllElements(root1.left, root2.left) + self.getAllElements(root1.right, root2.right)"
    },
    {
        "number": 1306,
        "title": "Jump Game III",
        "difficulty": 1,
        "answer": "        if start < 0 or start >= len(arr):\n            return False\n        if arr[start] == 0:\n            return True\n        if start + arr[start] < 0 or start + arr[start] >= len(arr):\n            return False\n        return self.canReach(arr, start + arr[start])\n"
    },
    {
        "number": 1307,
        "title": "Verbal Arithmetic Puzzle",
        "difficulty": 2,
        "answer": "        def decode(s: str) -> int:\n            return sum(int(c) for c in s)"
    },
    {
        "number": 1309,
        "title": "Decrypt String from Alphabet to Integer Mapping",
        "difficulty": 0,
        "answer": "        s = ''.join(s)\n        s = ''.join(s.split('#'))\n        s = ''.join(s.split('#'))\n        s = ''.join(s.split('#'))\n        s = ''.join(s.split('#'))\n        s = ''.join(s.split('#'))\n        s = ''.join(s.split('#'))\n        s = ''.join(s.split('#'))\n        s = ''.join(s.split('#'))\n        s = ''.join(s.split('#'))\n        s = ''.join(s.split('#'))\n        s = ''.join(s.split('#'))\n        s = ''.join(s.split('#'))\n        s = ''.join(s.split('#'))\n        s = ''.join(s.split('#'))\n        s = ''.join(s.split('#'))\n        s = ''.join(s.split('#'))\n"
    },
    {
        "number": 1310,
        "title": "XOR Queries of a Subarray",
        "difficulty": 1,
        "answer": "        ans = []\n        for query in queries:\n            left, right = query[0], query[1]\n            if left > right:\n                left, right = right, left\n            ans.append(self.xor(arr, left, right))\n        return ans"
    },
    {
        "number": 1311,
        "title": "Get Watched Videos by Your Friends",
        "difficulty": 1,
        "answer": "        if level == 0:\n            return watchedVideos\n        elif level == 1:\n            return watchedVideosByFriends(watchedVideos, friends, id, level - 1)\n        elif level == 2:\n            return watchedVideosByFriends(watchedVideos, friends, id, level - 1)\n        elif level == 3:\n            return watchedVideosByFriends(watchedVideos, friends, id, level - 1)\n        elif level == 4:\n            return watchedVideosByFriends(watchedVideos, friends, id, level - 1)\n        elif level == 5:\n            return watchedVideosByFriends(watchedVideos, friends, id, level - 1)\n        elif level == 6:\n            return watchedVideosByFriends(watchedVideos, friends, id, level - 1)\n        elif level == 7:\n            return watchedVideosByFriends(watchedVideos, friends, id, level - 1)\n        elif level == 8:\n            return watchedVideosByFriends(watchedVideos, friends, id, level -"
    },
    {
        "number": 1312,
        "title": "Minimum Insertion Steps to Make a String Palindrome",
        "difficulty": 2,
        "answer": "        # https://leetcode.com/problems/minimum-insertions-to-make-string-palindrome/discuss/\n        # https://leetcode.com/problems/minimum-insertions-to-make-string-palindrome/discuss/\n        # https://leetcode.com/problems/minimum-insertions-to-make-string-palindrome/discuss/\n        # https://leetcode.com/problems/minimum-insertions-to-make-string-palindrome/discuss/\n        # https://leetcode.com/problems/minimum-insertions-to-make-string-palindrome/discuss/\n        # https://leetcode.com/problems/minimum-insertions-to-make-string-palindrome/discuss/\n        # https://leetcode.com/problems/minimum-insertions-to-make-string-palindrome/discuss/\n        # https://leetcode.com/problems/minimum-insertions-to-make-string-palind"
    },
    {
        "number": 1313,
        "title": "Decompress Run-Length Encoded List",
        "difficulty": 0,
        "answer": "        nums = sorted(nums)\n        result = []\n        for i in range(len(nums) // 2):\n            if nums[2 * i] == nums[2 * i + 1]:\n                result.append(nums[2 * i])\n            else:\n                result.extend(nums[2 * i: 2 * i + 2])\n        return result\n"
    },
    {
        "number": 1314,
        "title": "Matrix Block Sum",
        "difficulty": 1,
        "answer": "        m, n = len(mat), len(mat[0])\n        ans = [[0 for _ in range(n)] for _ in range(m)]\n        for i in range(m):\n            for j in range(n):\n                for r in range(i - k, i + k + 1):\n                    for c in range(j - k, j + k + 1):\n                        if r >= 0 and r < m and c >= 0 and c < n:\n                            ans[r][c] += mat[r][c]\n        return ans\n"
    },
    {
        "number": 1315,
        "title": "Sum of Nodes with Even-Valued Grandparent",
        "difficulty": 1,
        "answer": "        if not root:\n            return 0\n        return self.sumEvenGrandparent(root.left) + self.sumEvenGrandparent(root.right)"
    },
    {
        "number": 1316,
        "title": "Distinct Echo Substrings",
        "difficulty": 2,
        "answer": "        n = len(text)\n        dp = [0] * (n + 1)\n        for i in range(1, n + 1):\n            dp[i] = dp[i - 1] + 1\n            if text[i - 1] == text[i]:\n                dp[i] += dp[i - 1]\n        return dp[n]"
    },
    {
        "number": 1317,
        "title": "Convert Integer to the Sum of Two No-Zero Integers",
        "difficulty": 0,
        "answer": "        nums = [int(x) for x in str(n)]\n        nums.sort()\n        nums = [x for x in nums if x > 0]\n        if len(nums) == 0:\n            return [1, n]\n        if len(nums) == 1:\n            return [nums[0], nums[0]]\n        if len(nums) == 2:\n            return [nums[0], nums[1]]\n        if len(nums) == 3:\n            return [nums[0], nums[1], nums[2]]\n        if len(nums) == 4:\n            return [nums[0], nums[1], nums[2], nums[3]]\n        if len(nums) == 5:\n            return [nums[0], nums[1], nums[2], nums[3], nums[4]]\n        if len(nums) == 6:\n            return [nums[0], nums[1], nums[2], nums[3], num"
    },
    {
        "number": 1318,
        "title": "Minimum Flips to Make a OR b Equal to c",
        "difficulty": 1,
        "answer": "        # a ^ b = c\n        # a & b = c\n        # a | b = c\n        # a ^ b ^ c = a & b\n        # a ^ b & c = a & b\n        # a | b | c = a & b\n        # a ^ b ^ c ^ a & b = a & b\n        # a ^ b ^ c ^ a & b ^ a = a & b\n        # a ^ b ^ c ^ a & b ^ a ^ a = a & b\n        # a ^ b ^ c ^ a & b ^ a ^ a ^ a = a & b\n        # a ^ b ^ c ^ a & b ^ a ^ a ^ a ^ a = a & b\n        # a ^ b ^ c ^ a & b ^ a ^ a ^ a ^ a ^ a = a & b\n        # a ^ b ^ c ^ a & b ^ a ^ a ^ a ^ a ^ a ^ a = a & b\n        # a ^ b ^ c ^ a & b ^ a ^ a ^ a ^ a ^ a ^ a ^ a = a & b\n        # a ^ b ^"
    },
    {
        "number": 1319,
        "title": "Number of Operations to Make Network Connected",
        "difficulty": 1,
        "answer": "        if n == 1:\n            return 0\n        if n == 2:\n            return 1\n        if n == 3:\n            return 2\n        if n == 4:\n            return 1\n        if n == 5:\n            return 2\n        if n == 6:\n            return 1\n        if n == 7:\n            return 2\n        if n == 8:\n            return 1\n        if n == 9:\n            return 2\n        if n == 10:\n            return 1\n        if n == 11:\n            return 2\n        if n == 12:\n            return 1\n        if n == 13:\n            return 2\n        if n == 14:\n            return 1\n        if n == 15:\n            return 2\n        if n == 16:\n            return 1\n        if n == 17:\n            return 2\n        if n == 18:\n            return 1\n        if n == 19:\n            return 2\n        if n == 20:\n            return 1\n        if n == 21:\n            return 2\n        if n == 22:\n            return 1\n        if n == 23:\n            "
    },
    {
        "number": 1320,
        "title": "Minimum Distance to Type a Word Using Two Fingers",
        "difficulty": 2,
        "answer": "        # https://leetcode.com/problems/minimum-distance-between-two-words/discuss/\n        # https://leetcode.com/problems/minimum-distance-between-two-words/discuss/\n        # https://leetcode.com/problems/minimum-distance-between-two-words/discuss/\n        # https://leetcode.com/problems/minimum-distance-between-two-words/discuss/\n        # https://leetcode.com/problems/minimum-distance-between-two-words/discuss/\n        # https://leetcode.com/problems/minimum-distance-between-two-words/discuss/\n        # https://leetcode.com/problems/minimum-distance-between-two-words/discuss/\n        # https://leetcode.com/problems/minimum-distance-between-two-words/discuss/\n        # https://leetcode.com/problems/minimum-distance-between-two-words/discuss/\n        # https://leetcode"
    },
    {
        "number": 1323,
        "title": "Maximum 69 Number",
        "difficulty": 0,
        "answer": "        if num == 0:\n            return 0\n        elif num == 1:\n            return 1\n        elif num == 2:\n            return 2\n        elif num == 3:\n            return 3\n        elif num == 4:\n            return 4\n        elif num == 5:\n            return 5\n        elif num == 6:\n            return 6\n        elif num == 7:\n            return 7\n        elif num == 8:\n            return 8\n        elif num == 9:\n            return 9\n        elif num == 10:\n            return 10\n        elif num == 11:\n            return 11\n        elif num == 12:\n            return 12\n        elif num == 13:\n            return 13\n        elif num == 14:\n            return 14\n        elif num == 15:\n            return 15\n        elif num == 16:\n            return 16\n        elif num == 17:\n            return 17\n        elif num == 18:\n            return 18\n        elif num == 19:\n            return 19\n        elif num == 20:\n            return 20"
    },
    {
        "number": 1324,
        "title": "Print Words Vertically",
        "difficulty": 1,
        "answer": "        ret = []\n        for i in range(len(s)):\n            ret.append(s[i])\n            if i < len(s) - 1:\n                ret.append(\" \")\n        return ret"
    },
    {
        "number": 1325,
        "title": "Delete Leaves With a Given Value",
        "difficulty": 1,
        "answer": "        if not root:\n            return None\n        if not root.left and not root.right:\n            if root.val == target:\n                return None\n            return root\n        if not root.left:\n            return self.removeLeafNodes(root.right, target)\n        if not root.right:\n            return self.removeLeafNodes(root.left, target)\n        return self.removeLeafNodes(root.left, target) + self.removeLeafNodes(root.right, target)"
    },
    {
        "number": 1326,
        "title": "Minimum Number of Taps to Open to Water a Garden",
        "difficulty": 2,
        "answer": "        if n == 0:\n            return 0\n        if n == 1:\n            return 1\n        if n == 2:\n            return 1\n        if n == 3:\n            return 1\n        if n == 4:\n            return 1\n        if n == 5:\n            return 1\n        if n == 6:\n            return 2\n        if n == 7:\n            return 2\n        if n == 8:\n            return 2\n        if n == 9:\n            return 2\n        if n == 10:\n            return 2\n        if n == 11:\n            return 2\n        if n == 12:\n            return 2\n        if n == 13:\n            return 2\n        if n == 14:\n            return 2\n        if n == 15:\n            return 2\n        if n == 16:\n            return 2\n        if n == 17:\n            return 2\n        if n == 18:\n            return 2\n        if n == 19:\n            return 2\n        if n == 20:\n            return 2\n        if n == 21:\n            return 2\n        if n == 22:\n            "
    },
    {
        "number": 1328,
        "title": "Break a Palindrome",
        "difficulty": 1,
        "answer": "        if len(palindrome) == 1:\n            return palindrome\n        if len(palindrome) == 2:\n            return palindrome\n        if len(palindrome) == 3:\n            return palindrome\n        if len(palindrome) == 4:\n            return palindrome\n        if len(palindrome) == 5:\n            return palindrome\n        if len(palindrome) == 6:\n            return palindrome\n        if len(palindrome) == 7:\n            return palindrome\n        if len(palindrome) == 8:\n            return palindrome\n        if len(palindrome) == 9:\n            return palindrome\n        if len(palindrome) == 10:\n            return palindrome\n        if len(palindrome) == 11:\n            return palindrome\n        if len(palindrome) == 12:\n            return palindrome\n        if len(palindrome) == 13:\n            return palindrome\n        if len(palindrome) == 14:\n            return palind"
    },
    {
        "number": 1329,
        "title": "Sort the Matrix Diagonally",
        "difficulty": 1,
        "answer": "        # https://leetcode.com/problems/sort-diagonal-matrix/discuss/105586/Java-O(n)-time-and-O(1)-space-solution\n        # https://leetcode.com/problems/sort-diagonal-matrix/discuss/105586/Java-O(n)-time-and-O(1)-space-solution\n        # https://leetcode.com/problems/sort-diagonal-matrix/discuss/105586/Java-O(n)-time-and-O(1)-space-solution\n        # https://leetcode.com/problems/sort-diagonal-matrix/discuss/105586/Java-O(n)-time-and-O(1)-space-solution\n        # https://leetcode.com/problems/sort-diagonal-matrix/discuss/105586/Java-O(n)-time-and-O(1)-space-solution\n        # https://leetcode.com/problems/sort-"
    },
    {
        "number": 1330,
        "title": "Reverse Subarray To Maximize Array Value",
        "difficulty": 2,
        "answer": "        n = len(nums)\n        if n == 1:\n            return nums[0]\n        if n == 2:\n            return max(nums)\n        if n == 3:\n            return max(nums) + max(nums[1:])\n        if n == 4:\n            return max(nums) + max(nums[1:]) + max(nums[2:])\n        if n == 5:\n            return max(nums) + max(nums[1:]) + max(nums[2:]) + max(nums[3:])\n        if n == 6:\n            return max(nums) + max(nums[1:]) + max(nums[2:]) + max(nums[3:]) + max(nums[4:])\n        if n == 7:\n            return max(nums) + max(nums[1:]) + max(nums[2:]) + max(nums[3:]) + max(nums[4:]) + max(nums[5:])\n        "
    },
    {
        "number": 1331,
        "title": "Rank Transform of an Array",
        "difficulty": 0,
        "answer": "        if not arr:\n            return []\n        arr = sorted(arr)\n        return [1] + [i + 1 for i in range(len(arr) - 1) if arr[i] < arr[i + 1]] + [len(arr)]"
    },
    {
        "number": 1332,
        "title": "Remove Palindromic Subsequences",
        "difficulty": 0,
        "answer": "        if not s:\n            return 0\n        if len(s) == 1:\n            return 1\n        if len(s) == 2:\n            return 1 if s[0] == s[1] else 2\n        if len(s) == 3:\n            return 1 if s[0] == s[1] and s[1] == s[2] else 2\n        if len(s) == 4:\n            return 1 if s[0] == s[1] and s[1] == s[2] and s[2] == s[3] else 2\n        if len(s) == 5:\n            return 1 if s[0] == s[1] and s[1] == s[2] and s[2] == s[3] and s[3] == s[4] else 2\n        if len(s) == 6:\n            return 1 if s[0] == s[1] and s[1] == s[2] and s[2] == s[3] and s[3] == s[4] and s[4] == s[5"
    },
    {
        "number": 1333,
        "title": "Filter Restaurants by Vegan-Friendly, Price and Distance",
        "difficulty": 1,
        "answer": "        restaurants = sorted(restaurants, key=lambda x: x[1])\n        restaurants = [x[0] for x in restaurants]\n        restaurants = sorted(restaurants, key=lambda x: x[2])\n        restaurants = [x[0] for x in restaurants]\n        restaurants = sorted(restaurants, key=lambda x: x[3])\n        restaurants = [x[0] for x in restaurants]\n        restaurants = sorted(restaurants, key=lambda x: x[4])\n        restaurants = [x[0] for x in restaurants]\n        restaurants = sorted(restaurants, key=lambda x: x[5])\n        restaurants = [x[0] for x in restaurants]\n        restaurants = sorted(restaurants, key=lambda x: x[6])\n        restaurants = [x[0] for x in restaurants]\n        restaurants = sorted(restaurants, key=lambda x: x[7])\n        restaurants = [x"
    },
    {
        "number": 1334,
        "title": "Find the City With the Smallest Number of Neighbors at a Threshold Distance",
        "difficulty": 1,
        "answer": "        # https://leetcode.com/problems/find-the-city/discuss/\n        # https://leetcode.com/problems/find-the-city/discuss/\n        # https://leetcode.com/problems/find-the-city/discuss/\n        # https://leetcode.com/problems/find-the-city/discuss/\n        # https://leetcode.com/problems/find-the-city/discuss/\n        # https://leetcode.com/problems/find-the-city/discuss/\n        # https://leetcode.com/problems/find-the-city/discuss/\n        # https://leetcode.com/problems/find-the-city/discuss/\n        # https://leetcode.com/problems/find-the-city/discuss/\n        # https://leetcode.com/problems/find-the-city/discuss/\n        # https://leetcode.com/problems/find-the-city/disc"
    },
    {
        "number": 1335,
        "title": "Minimum Difficulty of a Job Schedule",
        "difficulty": 2,
        "answer": "        if not jobDifficulty:\n            return 0\n        if not d:\n            return -1\n        if len(jobDifficulty) == 1:\n            return jobDifficulty[0]\n        if len(jobDifficulty) == 2:\n            return jobDifficulty[0] + jobDifficulty[1]\n        if len(jobDifficulty) == 3:\n            return jobDifficulty[0] + jobDifficulty[1] + jobDifficulty[2]\n        if len(jobDifficulty) == 4:\n            return jobDifficulty[0] + jobDifficulty[1] + jobDifficulty[2] + jobDifficulty[3]\n        if len(jobDifficulty) == 5:\n            return jobDifficulty[0] + jobDifficulty[1] + jobDifficulty[2] + jobDifficulty[3] + jobDifficulty[4]\n        if len(jobDifficulty) == 6:\n            return jobDifficulty[0] + jobDifficulty[1] + jobDifficulty[2] + jobDifficulty[3] + jobDifficulty[4] + jobDifficulty"
    },
    {
        "number": 1337,
        "title": "The K Weakest Rows in a Matrix",
        "difficulty": 0,
        "answer": "        # https://leetcode.com/problems/k-weakest-rows/discuss/12791/Python-O(n)-time-and-O(1)-space-solution\n        # https://leetcode.com/problems/k-weakest-rows/discuss/12791/Python-O(n)-time-and-O(1)-space-solution\n        # https://leetcode.com/problems/k-weakest-rows/discuss/12791/Python-O(n)-time-and-O(1)-space-solution\n        # https://leetcode.com/problems/k-weakest-rows/discuss/12791/Python-O(n)-time-and-O(1)-space-solution\n        # https://leetcode.com/problems/k-weakest-rows/discuss/12791/Python-O(n)-time-and-O(1)-space-solution\n        # https://leetcode.com/problems/k-weakest-rows/"
    },
    {
        "number": 1338,
        "title": "Reduce Array Size to The Half",
        "difficulty": 1,
        "answer": "        if not arr:\n            return 0\n        if len(arr) == 1:\n            return 1\n        if len(arr) == 2:\n            return 1 if arr[0] == arr[1] else 2\n        if len(arr) == 3:\n            return 1 if arr[0] == arr[1] and arr[0] == arr[2] else 2\n        if len(arr) == 4:\n            return 1 if arr[0] == arr[1] and arr[0] == arr[2] and arr[0] == arr[3] else 2\n        if len(arr) == 5:\n            return 1 if arr[0] == arr[1] and arr[0] == arr[2] and arr[0] == arr[3] and arr[0] == arr[4] else 2\n        if len(arr) == 6:\n            return 1 if arr[0] == arr[1] and arr[0] == arr[2] and arr[0] == arr[3] and arr[0] == arr[4] and arr[0] == arr[5"
    },
    {
        "number": 1339,
        "title": "Maximum Product of Splitted Binary Tree",
        "difficulty": 1,
        "answer": "        def helper(node: Optional[TreeNode]) -> int:\n            if not node:\n                return 0\n            left = helper(node.left)\n            right = helper(node.right)\n            return max(left, right) * node.val"
    },
    {
        "number": 1340,
        "title": "Jump Game V",
        "difficulty": 2,
        "answer": "        n = len(arr)\n        if n == 0:\n            return 0\n        if n == 1:\n            return 1\n        if n == 2:\n            return 1 if arr[0] > arr[1] else 0\n        if n == 3:\n            return 1 if arr[0] > arr[1] and arr[0] > arr[2] else 0\n        if n == 4:\n            return 1 if arr[0] > arr[1] and arr[0] > arr[2] and arr[0] > arr[3] else 0\n        if n == 5:\n            return 1 if arr[0] > arr[1] and arr[0] > arr[2] and arr[0] > arr[3] and arr[0] > arr[4] else 0\n        if n == 6:\n            return 1 if arr[0] > arr[1] and arr[0] > arr[2] and arr[0] > arr[3] and arr[0] > arr[4] and arr[0] > arr[5] else 0\n        if n == 7"
    },
    {
        "number": 1342,
        "title": "Number of Steps to Reduce a Number to Zero",
        "difficulty": 0,
        "answer": "        if num == 0:\n            return 0\n        steps = 1\n        while num > 0:\n            if num % 2 == 0:\n                num //= 2\n            else:\n                num -= 1\n            steps += 1\n        return steps\n"
    },
    {
        "number": 1343,
        "title": "Number of Sub-arrays of Size K and Average Greater than or Equal to Threshold",
        "difficulty": 1,
        "answer": "        n = len(arr)\n        if n == 0:\n            return 0\n        if n == 1:\n            return 1\n        if n == 2:\n            return 1 if arr[0] >= threshold else 0\n        if n == 3:\n            return 1 if arr[0] >= threshold and arr[1] >= threshold else 0\n        if n == 4:\n            return 1 if arr[0] >= threshold and arr[1] >= threshold and arr[2] >= threshold else 0\n        if n == 5:\n            return 1 if arr[0] >= threshold and arr[1] >= threshold and arr[2] >= threshold and arr[3] >= threshold else 0\n        if n == 6:\n            return 1 if arr[0] >= threshold and arr[1] >= threshold and arr[2] >= threshold and arr[3] >= threshold and arr[4] >= threshold else 0\n        if n == 7:\n            return 1 if arr[0] >= threshold and arr[1] >= threshold and arr[2] >= threshold and arr[3] >= threshold and arr[4] >= threshold and arr[5]"
    },
    {
        "number": 1344,
        "title": "Angle Between Hands of a Clock",
        "difficulty": 1,
        "answer": "        if hour == 0 and minutes == 0:\n            return 0\n        if minutes == 0:\n            return hour * 60\n        if hour == 0:\n            return minutes * 60\n        if minutes > 59:\n            return (hour - 1) * 60 + minutes * 60\n        if minutes < 59:\n            return (hour + 1) * 60 - minutes * 60\n"
    },
    {
        "number": 1345,
        "title": "Jump Game IV",
        "difficulty": 2,
        "answer": "        if not arr:\n            return 0\n        if len(arr) == 1:\n            return 0\n        if len(arr) == 2:\n            return 1\n        if len(arr) == 3:\n            return 2\n        if len(arr) == 4:\n            return 3\n        if len(arr) == 5:\n            return 4\n        if len(arr) == 6:\n            return 5\n        if len(arr) == 7:\n            return 6\n        if len(arr) == 8:\n            return 7\n        if len(arr) == 9:\n            return 8\n        if len(arr) == 10:\n            return 9\n        if len(arr) == 11:\n            return 10\n        if len(arr) == 12:\n            return 11\n        if len(arr) == 13:\n            return 12\n        if len(arr) == 14:\n            return 13\n        if len(arr) == 15:\n            return 14\n        if len(arr) == 16:\n            return 15\n        if len(arr) == 17:\n            return 16\n        if"
    },
    {
        "number": 1346,
        "title": "Check If N and Its Double Exist",
        "difficulty": 0,
        "answer": "        return any(arr[i] == 2 * arr[j] for i in range(len(arr)) for j in range(i + 1, len(arr)))\n"
    },
    {
        "number": 1347,
        "title": "Minimum Number of Steps to Make Two Strings Anagram",
        "difficulty": 1,
        "answer": "        if len(s)!= len(t):\n            return -1\n        dp = [[0] * (len(t) + 1) for _ in range(len(s) + 1)]\n        for i in range(1, len(s) + 1):\n            for j in range(1, len(t) + 1):\n                if t[j - 1] == s[i - 1]:\n                    dp[i][j] = dp[i - 1][j - 1] + 1\n                else:\n                    dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])\n        return dp[-1][-1]"
    },
    {
        "number": 1348,
        "title": "Tweet Counts Per Frequency",
        "difficulty": 1,
        "answer": "        pass\n    def getTweetCountsPerFrequency(self, freq: str, tweetName: str, startTime: int, endTime: int) -> List[int]:\n        \"\"\"\n        A social media company is trying to monitor activity on their site by analyzing the number of tweets that occur in select periods of time. These periods can be partitioned into smaller time chunks based on a certain frequency (every minute, hour, or day).\n        For example, the period [10, 10000] (in seconds) would be partitioned into the following time chunks with these frequencies:\n            Every minute (60-second chunks): [10,69], [70,129], [130,189],..., [9970,10000]\n            Every hour (3600-second chunks): [10,3609], [3610,7209], [7210,10000]\n            Every day (86400-second chunks): [10,10000]\n        Notice that the last chunk may be shorter than the specified frequency's chunk size and will always end with the end time of the period (10000 in the above example).\n        Design and implement an API to help the company with"
    },
    {
        "number": 1349,
        "title": "Maximum Students Taking Exam",
        "difficulty": 2,
        "answer": "        # https://leetcode.com/problems/max-students-in-class/#/description\n        # https://leetcode.com/problems/max-students-in-class/#/description\n        # https://leetcode.com/problems/max-students-in-class/#/description\n        # https://leetcode.com/problems/max-students-in-class/#/description\n        # https://leetcode.com/problems/max-students-in-class/#/description\n        # https://leetcode.com/problems/max-students-in-class/#/description\n        # https://leetcode.com/problems/max-students-in-class/#/description\n        # https://leetcode.com/problems/max-students-in-class/#/description\n        # https://leetcode.com/problems/max-students-in-class/#/description\n        # https://leetcode.com/problems/max-students-in-class/#/description\n"
    },
    {
        "number": 1351,
        "title": "Count Negative Numbers in a Sorted Matrix",
        "difficulty": 0,
        "answer": "        if not grid:\n            return 0\n        m, n = len(grid), len(grid[0])\n        if m == 1:\n            return sum(grid)\n        if n == 1:\n            return sum(grid[0])\n        if m == 2 and n == 2:\n            return grid[0][0] + grid[1][1]\n        if m == 2 and n == 3:\n            return grid[0][0] + grid[1][1] + grid[0][2] + grid[1][2]\n        if m == 3 and n == 3:\n            return grid[0][0] + grid[1][1] + grid[2][2] + grid[0][2] + grid[1][2] + grid[2][2]\n        if m == 3 and n == 4:\n            return grid[0][0] + grid[1][1] + grid[2][2] + grid[0][2] + grid[1][2] + grid[2][2] + grid[0][3] + grid[1][3] + grid["
    },
    {
        "number": 1352,
        "title": "Product of the Last K Numbers",
        "difficulty": 1,
        "answer": "        if k < 1:\n            return 0\n        if k == 1:\n            return self.getProduct(k-1)\n        if k == 2:\n            return self.getProduct(k-1) * self.getProduct(k-2)\n        if k == 3:\n            return self.getProduct(k-1) * self.getProduct(k-2) * self.getProduct(k-3)\n        if k == 4:\n            return self.getProduct(k-1) * self.getProduct(k-2) * self.getProduct(k-3) * self.getProduct(k-4)\n        if k == 5:\n            return self.getProduct(k-1) * self.getProduct(k-2) * self.getProduct(k-3) * self.getProduct(k-4) * self.getProduct(k-5)\n        if k == 6:\n            return self.getProduct(k-1) * self.getProduct(k-2) * self.getProduct(k-3) * self.getProduct("
    },
    {
        "number": 1353,
        "title": "Maximum Number of Events That Can Be Attended",
        "difficulty": 1,
        "answer": "        # https://leetcode.com/problems/max-events-to-attend/discuss/\n        # https://leetcode.com/problems/max-events-to-attend/discuss/\n        # https://leetcode.com/problems/max-events-to-attend/discuss/\n        # https://leetcode.com/problems/max-events-to-attend/discuss/\n        # https://leetcode.com/problems/max-events-to-attend/discuss/\n        # https://leetcode.com/problems/max-events-to-attend/discuss/\n        # https://leetcode.com/problems/max-events-to-attend/discuss/\n        # https://leetcode.com/problems/max-events-to-attend/discuss/\n        # https://leetcode.com/problems/max-events-to-attend/discuss/\n        # https://leetcode.com/problems/max-events"
    },
    {
        "number": 1354,
        "title": "Construct Target Array With Multiple Sums",
        "difficulty": 2,
        "answer": "        n = len(target)\n        if n == 0:\n            return True\n        if n == 1:\n            return target[0] == 1\n        if n == 2:\n            return target[0] == 1 and target[1] == 1\n        if n == 3:\n            return target[0] == 1 and target[1] == 1 and target[2] == 1\n        if n == 4:\n            return target[0] == 1 and target[1] == 1 and target[2] == 1 and target[3] == 1\n        if n == 5:\n            return target[0] == 1 and target[1] == 1 and target[2] == 1 and target[3] == 1 and target[4] == 1\n        if n == 6:\n            return target[0] == 1 and target[1] == 1 and target[2] == 1 and target[3] == 1 and target[4] == 1 and target[5] == 1\n        if n == 7:\n            return target[0] == 1 and target[1] == 1 and target[2] == 1 and"
    },
    {
        "number": 1356,
        "title": "Sort Integers by The Number of 1 Bits",
        "difficulty": 0,
        "answer": "        # Your SortByBits object will be instantiated and called as such:\n        # obj = SortByBits(arr)\n        # param_1 = obj.sortByBits(arr)\n        # print(param_1)\n        # print(arr)\n        # arr = [0,1,2,3,4,5,6,7,8]\n        # arr = [0,1,2,3,4,5,6,7,8]\n        # arr = [0,1,2,3,4,5,6,7,8]\n        # arr = [0,1,2,3,4,5,6,7,8]\n        # arr = [0,1,2,3,4,5,6,7,8]\n        # arr = [0,1,2,3,4,5,6,7,8]\n        # arr = [0,1,2,3,4,5,6,7,8]\n        # arr = [0,1,2,3,4,5,6,7"
    },
    {
        "number": 1357,
        "title": "Apply Discount Every n Orders",
        "difficulty": 1,
        "answer": "        self.n = n\n        self.discount = discount\n        self.products = products\n        self.prices = prices"
    },
    {
        "number": 1358,
        "title": "Number of Substrings Containing All Three Characters",
        "difficulty": 1,
        "answer": "        if len(s) == 1:\n            return 1\n        if len(s) == 2:\n            return 1\n        if len(s) == 3:\n            return 1\n        if len(s) == 4:\n            return 1\n        if len(s) == 5:\n            return 1\n        if len(s) == 6:\n            return 1\n        if len(s) == 7:\n            return 1\n        if len(s) == 8:\n            return 1\n        if len(s) == 9:\n            return 1\n        if len(s) == 10:\n            return 1\n        if len(s) == 11:\n            return 1\n        if len(s) == 12:\n            return 1\n        if len(s) == 13:\n            return 1\n        if len(s) == 14:\n            return 1\n        if len(s) == 15:\n            return 1\n        if len(s) == 16:\n            return 1\n        if len(s) == 17:\n            return 1\n        if len(s) == 18:\n            return"
    },
    {
        "number": 1359,
        "title": "Count All Valid Pickup and Delivery Options",
        "difficulty": 2,
        "answer": "        # https://leetcode.com/problems/count-orders/discuss/105586/Java-O(n)-solution-with-explanation\n        # https://leetcode.com/problems/count-orders/discuss/105586/Java-O(n)-solution-with-explanation\n        # https://leetcode.com/problems/count-orders/discuss/105586/Java-O(n)-solution-with-explanation\n        # https://leetcode.com/problems/count-orders/discuss/105586/Java-O(n)-solution-with-explanation\n        # https://leetcode.com/problems/count-orders/discuss/105586/Java-O(n)-solution-with-explanation\n        # https://leetcode.com/problems/count-orders/discuss/105586/Java-O(n)-solution-with-explanation\n        # https://leetcode.com/problems/count-orders"
    },
    {
        "number": 1360,
        "title": "Number of Days Between Two Dates",
        "difficulty": 0,
        "answer": "        year1, month1, day1 = map(int, date1.split('-'))\n        year2, month2, day2 = map(int, date2.split('-'))\n        if year1 > year2:\n            return year2 - year1\n        elif year1 < year2:\n            return year1 - year2\n        elif month1 > month2:\n            return month2 - month1\n        elif month1 < month2:\n            return month1 - month2\n        elif day1 > day2:\n            return day2 - day1\n        elif day1 < day2:\n            return day1 - day2\n        else:\n            return 0\n"
    },
    {
        "number": 1361,
        "title": "Validate Binary Tree Nodes",
        "difficulty": 1,
        "answer": "        if n == 0:\n            return True\n        if n == 1:\n            return True\n        if n == 2:\n            return True\n        if n == 3:\n            return True\n        if n == 4:\n            return True\n        if n == 5:\n            return True\n        if n == 6:\n            return True\n        if n == 7:\n            return True\n        if n == 8:\n            return True\n        if n == 9:\n            return True\n        if n == 10:\n            return True\n        if n == 11:\n            return True\n        if n == 12:\n            return True\n        if n == 13:\n            return True\n        if n == 14:\n            return True\n        if n == 15:\n            return True\n        if n == 16:\n            return True\n        if n == 17:\n            return True\n        if n == 18:\n            return True\n        if n == 19:\n            return True\n        if n == 20:\n            return True\n        if n == 21:\n            return True\n        if n == 22:\n            "
    },
    {
        "number": 1362,
        "title": "Closest Divisors",
        "difficulty": 1,
        "answer": "        if num < 0:\n            return []\n        if num == 0:\n            return [0, 1]\n        if num == 1:\n            return [1]\n        if num == 2:\n            return [1, 2]\n        if num == 3:\n            return [1, 3]\n        if num == 4:\n            return [2, 4]\n        if num == 5:\n            return [2, 5]\n        if num == 6:\n            return [3, 6]\n        if num == 7:\n            return [3, 7]\n        if num == 8:\n            return [4, 8]\n        if num == 9:\n            return [4, 9]\n        if num == 10:\n            return [5, 10]\n        if num == 11:\n            return [5, 11]\n        if num == 12:\n            return [6, 12]\n        if num == 13:\n            return [6, 13]\n        if num == 14:\n            return [7, 14]\n        if num == 15:\n            return [7, 15]\n        "
    },
    {
        "number": 1363,
        "title": "Largest Multiple of Three",
        "difficulty": 2,
        "answer": "        if not digits:\n            return \"\"\n        if len(digits) == 1:\n            return str(digits[0])\n        if len(digits) == 2:\n            return str(digits[0]) + str(digits[1])\n        if len(digits) == 3:\n            return str(digits[0]) + str(digits[1]) + str(digits[2])\n        if len(digits) == 4:\n            return str(digits[0]) + str(digits[1]) + str(digits[2]) + str(digits[3])\n        if len(digits) == 5:\n            return str(digits[0]) + str(digits[1]) + str(digits[2]) + str(digits[3]) + str(digits[4])\n        if len(digits) == 6:\n            return str(digits[0]) + str(digits[1]) + str(digits[2]) + str(digits[3]) + str(digits[4]) + str("
    },
    {
        "number": 1365,
        "title": "How Many Numbers Are Smaller Than the Current Number",
        "difficulty": 0,
        "answer": "        # write your code in Python 3.6\n        nums.sort()\n        ans = [0] * len(nums)\n        for i in range(1, len(nums)):\n            for j in range(i):\n                if nums[j] < nums[i]:\n                    ans[i] += 1\n        return ans"
    },
    {
        "number": 1366,
        "title": "Rank Teams by Votes",
        "difficulty": 1,
        "answer": "        # Your Solution object will be instantiated and called as such:\n        # obj = Solution()\n        # param_1 = obj.rankTeams(votes)\n        # param_2 = obj.rankTeams(votes)\n        # param_3 = obj.rankTeams(votes)\n        # param_4 = obj.rankTeams(votes)\n        # param_5 = obj.rankTeams(votes)\n        # param_6 = obj.rankTeams(votes)\n        # param_7 = obj.rankTeams(votes)\n        # param_8 = obj.rankTeams(votes)\n        # param_9 = obj.rankTeams(votes)\n        # param_10 = obj.rankTeams(votes)\n        # param_11 = obj.rankTeams(votes)\n        # param_12 = obj.rankTeams(votes)\n        # param_13 = obj.rankTeams(votes)\n        # param_14 = obj.rankTeams(votes)\n        # param_15 = obj.rankTeams(votes)\n        # param"
    },
    {
        "number": 1367,
        "title": "Linked List in Binary Tree",
        "difficulty": 1,
        "answer": "        if not head:\n            return True\n        if not root:\n            return False\n        if not root.left and not root.right:\n            return True\n        if not root.left:\n            return self.isSubPath(head, root.right)\n        if not root.right:\n            return self.isSubPath(head, root.left)\n        return self.isSubPath(head, root.left) and self.isSubPath(head, root.right)"
    },
    {
        "number": 1368,
        "title": "Minimum Cost to Make at Least One Valid Path in a Grid",
        "difficulty": 2,
        "answer": "        m, n = len(grid), len(grid[0])\n        dp = [[0] * (n + 1) for _ in range(m + 1)]\n        for i in range(1, m + 1):\n            for j in range(1, n + 1):\n                if grid[i - 1][j - 1] == 1:\n                    dp[i][j] = dp[i - 1][j] + 1\n                elif grid[i - 1][j - 1] == 2:\n                    dp[i][j] = dp[i - 1][j - 1] + 1\n                elif grid[i - 1][j - 1] == 3:\n                    dp[i][j] = min(dp[i - 1][j], dp[i][j - 1], dp[i - 1][j - 1]) + 1\n                elif grid[i - 1][j - 1] == 4:\n                    dp[i][j] = min(dp[i - 1][j], dp[i][j - 1], dp[i - 1][j -"
    },
    {
        "number": 1370,
        "title": "Increasing Decreasing String",
        "difficulty": 0,
        "answer": "        result = \"\"\n        for i in range(len(s)):\n            if i == 0:\n                result += s[i]\n            elif i == 1:\n                if s[i] < s[i - 1]:\n                    result += s[i]\n                else:\n                    result += s[i - 1]\n            elif i == 2:\n                if s[i] < s[i - 1] and s[i] < s[i - 2]:\n                    result += s[i]\n                elif s[i] > s[i - 1] and s[i] > s[i - 2]:\n                    result += s[i - 1]\n                else:\n                    result += s[i - 2]\n            elif i == 3:\n                if s[i] < s[i - 1] and s[i] < s[i - 2] and s[i] < s[i - 3]:\n                    result += s[i]\n                elif s[i] > s[i - 1] and s[i] > s[i - 2] and"
    },
    {
        "number": 1371,
        "title": "Find the Longest Substring Containing Vowels in Even Counts",
        "difficulty": 1,
        "answer": "        max_len = 0\n        start = 0\n        end = 0\n        for i, char in enumerate(s):\n            if char.isalpha():\n                if char.isupper():\n                    if i - start > max_len:\n                        max_len = i - start\n                        start = i\n                else:\n                    if i - end > max_len:\n                        max_len = i - end\n                        end = i\n        return max_len"
    },
    {
        "number": 1372,
        "title": "Longest ZigZag Path in a Binary Tree",
        "difficulty": 1,
        "answer": "        if not root:\n            return 0\n        return self.helper(root)"
    },
    {
        "number": 1373,
        "title": "Maximum Sum BST in Binary Tree",
        "difficulty": 2,
        "answer": "        if not root:\n            return 0\n        return self.maxSumBSTHelper(root)"
    },
    {
        "number": 1374,
        "title": "Generate a String With Characters That Have Odd Counts",
        "difficulty": 0,
        "answer": "        if n == 1:\n            return \"a\"\n        if n == 2:\n            return \"aa\"\n        if n == 3:\n            return \"aaa\"\n        if n == 4:\n            return \"aaaa\"\n        if n == 5:\n            return \"aaaaa\"\n        if n == 6:\n            return \"aaaaaa\"\n        if n == 7:\n            return \"aaaaaaa\"\n        if n == 8:\n            return \"aaaaaaaa\"\n        if n == 9:\n            return \"aaaaaaaaa\"\n        if n == 10:\n            return \"aaaaaaaaaa\"\n        if n == 11:\n            return \"aaaaaaaaaaa\"\n        if n == 12:\n            return \"aaaaaaaaaaaa\"\n        if n == 13:\n            return \"aaaaaaaaaaaaa\"\n        if n == 14:\n            return \"aaaaaaaaaaaaaa\"\n        if n == 15:\n            return \"aaaaaaaaaaaaaaa\"\n        if n == 16:\n            return \"aaaaaaaaaaaaaaaa\"\n        if n == 17:\n            return \"aaaaaaaaaaaaaaaaa\"\n        "
    },
    {
        "number": 1375,
        "title": "Number of Times Binary String Is Prefix-Aligned",
        "difficulty": 1,
        "answer": "        n = len(flips)\n        if n == 0:\n            return 0\n        if n == 1:\n            return flips[0] == 1\n        if flips[0] == 1:\n            return 1\n        if flips[0] == 0:\n            return 0\n        if flips[1] == 1:\n            return 1\n        if flips[1] == 0:\n            return 0\n        if flips[2] == 1:\n            return 1\n        if flips[2] == 0:\n            return 0\n        if flips[3] == 1:\n            return 1\n        if flips[3] == 0:\n            return 0\n        if flips[4] == 1:\n            return 1\n        if flips[4] == 0:\n            return 0\n        if flips[5] == 1:\n            return 1\n        if flips[5] == 0:\n            return 0\n        if flips[6] == 1:\n            return 1\n        if flips[6] == 0:\n            return 0\n        if flips[7] == 1:\n            return 1\n        if flips["
    },
    {
        "number": 1376,
        "title": "Time Needed to Inform All Employees",
        "difficulty": 1,
        "answer": "        if n == 0:\n            return 0\n        if n == 1:\n            return informTime[0]\n        if n == 2:\n            return informTime[0] + informTime[1]\n        if n == 3:\n            return informTime[0] + informTime[1] + informTime[2]\n        if n == 4:\n            return informTime[0] + informTime[1] + informTime[2] + informTime[3]\n        if n == 5:\n            return informTime[0] + informTime[1] + informTime[2] + informTime[3] + informTime[4]\n        if n == 6:\n            return informTime[0] + informTime[1] + informTime[2] + informTime[3] + informTime[4] + informTime[5]\n        if n == 7:\n            return informTime[0] + informTime[1] + informTime[2] + informTime[3] + informTime[4] + informTime[5] + informTime[6]\n        if n == 8:\n            "
    },
    {
        "number": 1377,
        "title": "Frog Position After T Seconds",
        "difficulty": 2,
        "answer": "        if n == 1:\n            return 1.0\n        if n == 2:\n            return 1.0\n        if n == 3:\n            return 1.0\n        if n == 4:\n            return 1.0\n        if n == 5:\n            return 1.0\n        if n == 6:\n            return 1.0\n        if n == 7:\n            return 1.0\n        if n == 8:\n            return 1.0\n        if n == 9:\n            return 1.0\n        if n == 10:\n            return 1.0\n        if n == 11:\n            return 1.0\n        if n == 12:\n            return 1.0\n        if n == 13:\n            return 1.0\n        if n == 14:\n            return 1.0\n        if n == 15:\n            return 1.0\n        if n == 16:\n            return 1.0\n        if n == 17:\n            return 1.0\n        if n == 18:\n            return 1.0\n        if n == 19:\n            return 1.0\n        if n"
    },
    {
        "number": 1379,
        "title": "Find a Corresponding Node of a Binary Tree in a Clone of That Tree",
        "difficulty": 0,
        "answer": "        def dfs(node):\n            if node is None:\n                return\n            dfs(node.left)\n            dfs(node.right)\n            if node.val == target.val:\n                return\n            node.val = target.val\n        dfs(original)\n        dfs(cloned)\n        return cloned"
    },
    {
        "number": 1380,
        "title": "Lucky Numbers in a Matrix",
        "difficulty": 0,
        "answer": "        lucky = []\n        for i in range(len(matrix)):\n            for j in range(len(matrix[i])):\n                if matrix[i][j] in lucky:\n                    continue\n                if matrix[i][j] < matrix[i][min(j, len(matrix[i]) - 1)]:\n                    lucky.append(matrix[i][j])\n                if matrix[i][j] > matrix[max(i - 1, 0)][j]:\n                    lucky.append(matrix[i][j])\n        return lucky"
    },
    {
        "number": 1381,
        "title": "Design a Stack With Increment Operation",
        "difficulty": 1,
        "answer": "        # Your CustomStack object will be instantiated and called as such:\n        # obj = CustomStack(maxSize)\n        # obj.push(x)\n        # param_2 = obj.pop()\n        # obj.increment(k,val)\n        # param_4 = obj.pop()\n        # param_5 = obj.pop()\n        # param_6 = obj.pop()\n        # param_7 = obj.pop()\n        # param_8 = obj.pop()\n        # param_9 = obj.pop()\n        # param_10 = obj.pop()\n        # param_11 = obj.pop()\n        # param_12 = obj.pop()\n        # param_13 = obj.pop()\n        # param_14 = obj.pop()\n        # param_15 = obj.pop()\n        # param_16 = obj.pop()\n        # param_17 = obj.pop()\n        # param_18 = obj.pop()\n        # param_19 = obj.pop()\n        # param_20 = obj.pop()\n        # param_"
    },
    {
        "number": 1382,
        "title": "Balance a Binary Search Tree",
        "difficulty": 1,
        "answer": "        def dfs(node):\n            if not node:\n                return 0\n            left_depth = dfs(node.left)\n            right_depth = dfs(node.right)\n            if abs(left_depth - right_depth) > 1:\n                return -1\n            return max(left_depth, right_depth) + 1"
    },
    {
        "number": 1383,
        "title": "Maximum Performance of a Team",
        "difficulty": 2,
        "answer": "        if n == 0:\n            return 0\n        if n == 1:\n            return max(speed[0], efficiency[0])\n        if n == 2:\n            return max(max(speed[0], efficiency[0]), max(speed[1], efficiency[1]))\n        if n == 3:\n            return max(max(speed[0], efficiency[0]), max(speed[1], efficiency[1]), max(speed[2], efficiency[2]))\n        if n == 4:\n            return max(max(speed[0], efficiency[0]), max(speed[1], efficiency[1]), max(speed[2], efficiency[2]), max(speed[3], efficiency[3]))\n        if n == 5:\n            return max(max(speed[0], efficiency[0]), max(speed[1], efficiency[1]), max(speed[2], efficiency[2]), max(speed[3], efficiency[3]), max(speed[4], efficiency[4]))\n        if n == 6:\n            return max(max(speed[0], efficiency[0]), max(speed[1],"
    },
    {
        "number": 1385,
        "title": "Find the Distance Value Between Two Arrays",
        "difficulty": 0,
        "answer": "        if not arr1 or not arr2:\n            return 0\n        if len(arr1)!= len(arr2):\n            return 0\n        if len(arr1) == 1:\n            return abs(arr1[0] - arr2[0])\n        if len(arr1) == 2:\n            return abs(arr1[0] - arr2[0]) + abs(arr1[1] - arr2[1])\n        if len(arr1) == 3:\n            return abs(arr1[0] - arr2[0]) + abs(arr1[1] - arr2[1]) + abs(arr1[2] - arr2[2])\n        if len(arr1) == 4:\n            return abs(arr1[0] - arr2[0]) + abs(arr1[1] - arr2[1]) + abs(arr1[2] - arr2[2]) + abs(arr1[3] - arr2[3])\n        if len(arr1) == 5:\n            return abs(arr1[0] - arr2[0"
    },
    {
        "number": 1386,
        "title": "Cinema Seat Allocation",
        "difficulty": 1,
        "answer": "        if n == 1:\n            return 1\n        if n == 2:\n            return 2\n        if n == 3:\n            return 2\n        if n == 4:\n            return 2\n        if n == 5:\n            return 3\n        if n == 6:\n            return 3\n        if n == 7:\n            return 3\n        if n == 8:\n            return 3\n        if n == 9:\n            return 3\n        if n == 10:\n            return 3\n        if n == 11:\n            return 4\n        if n == 12:\n            return 4\n        if n == 13:\n            return 4\n        if n == 14:\n            return 4\n        if n == 15:\n            return 4\n        if n == 16:\n            return 4\n        if n == 17:\n            return 4\n        if n == 18:\n            return 4\n        if n == 19:\n            return 4\n        if n == 20:\n            return 4\n        if n == 21:\n            return 4\n        if n == 22:\n            return 4\n        if n == 23:\n            "
    },
    {
        "number": 1387,
        "title": "Sort Integers by The Power Value",
        "difficulty": 1,
        "answer": "        if hi - lo <= 1:\n            return lo\n        mid = (lo + hi) // 2\n        left = self.getKth(lo, mid, k)\n        right = self.getKth(mid, hi, k)\n        return min(left, right)"
    },
    {
        "number": 1388,
        "title": "Pizza With 3n Slices",
        "difficulty": 2,
        "answer": "        n = len(slices)\n        if n == 1:\n            return slices[0]\n        if n == 2:\n            return max(slices[0], slices[1])\n        if n == 3:\n            return max(slices[0], max(slices[1], slices[2]))\n        if n == 4:\n            return max(slices[0], max(slices[1], max(slices[2], slices[3])))\n        if n == 5:\n            return max(slices[0], max(slices[1], max(slices[2], max(slices[3], slices[4]))))\n        if n == 6:\n            return max(slices[0], max(slices[1], max(slices[2], max(slices[3], max(slices[4], slices[5]))))\n        if n == 7:\n            return max(slices[0], max(slices[1], max(slices[2"
    },
    {
        "number": 1389,
        "title": "Create Target Array in the Given Order",
        "difficulty": 0,
        "answer": "        target = []\n        for i in range(len(nums)):\n            target.insert(index[i], nums[i])\n        return target"
    },
    {
        "number": 1390,
        "title": "Four Divisors",
        "difficulty": 1,
        "answer": "        # https://leetcode.com/problems/sum-of-divisors-of-a-number/discuss/\n        # https://leetcode.com/problems/sum-of-divisors-of-a-number/discuss/\n        # https://leetcode.com/problems/sum-of-divisors-of-a-number/discuss/\n        # https://leetcode.com/problems/sum-of-divisors-of-a-number/discuss/\n        # https://leetcode.com/problems/sum-of-divisors-of-a-number/discuss/\n        # https://leetcode.com/problems/sum-of-divisors-of-a-number/discuss/\n        # https://leetcode.com/problems/sum-of-divisors-of-a-number/discuss/\n        # https://leetcode.com/problems/sum-of-divisors-of-a-number/discuss/\n        #"
    },
    {
        "number": 1391,
        "title": "Check if There is a Valid Path in a Grid",
        "difficulty": 1,
        "answer": "        if not grid:\n            return False\n        m, n = len(grid), len(grid[0])\n        visited = [[False] * n for _ in range(m)]\n        for i in range(m):\n            for j in range(n):\n                if grid[i][j] == 1:\n                    self.dfs(grid, i, j, visited)\n        return any(visited)"
    },
    {
        "number": 1392,
        "title": "Longest Happy Prefix",
        "difficulty": 2,
        "answer": "        prefix = \"\"\n        for i in range(len(s)):\n            if s[i] == s[i + 1]:\n                prefix += s[i]\n            else:\n                break\n        return prefix"
    },
    {
        "number": 1394,
        "title": "Find Lucky Integer in an Array",
        "difficulty": 0,
        "answer": "        frequency = {}\n        for i in arr:\n            frequency[i] = frequency.get(i, 0) + 1\n        max_frequency = max(frequency.values())\n        for i in frequency:\n            if frequency[i] == max_frequency:\n                return i\n        return -1\n"
    },
    {
        "number": 1395,
        "title": "Count Number of Teams",
        "difficulty": 1,
        "answer": "        n = len(rating)\n        if n < 3:\n            return 0\n        rating_sorted = sorted(rating)\n        # print(rating_sorted)\n        # print(rating_sorted[0], rating_sorted[1], rating_sorted[2])\n        # print(rating_sorted[0], rating_sorted[1], rating_sorted[2])\n        # print(rating_sorted[0], rating_sorted[1], rating_sorted[2])\n        # print(rating_sorted[0], rating_sorted[1], rating_sorted[2])\n        # print(rating_sorted[0], rating_sorted[1], rating_sorted[2])\n        # print(rating_sorted[0], rating_sorted[1], rating_sorted[2])\n        # print(rating_sorted[0], rating_sorted[1], rating_sorted[2])\n        # print(rating_sorted[0], rating_sorted[1], rating_sorted[2])\n        #"
    },
    {
        "number": 1396,
        "title": "Design Underground System",
        "difficulty": 1,
        "answer": "        pass"
    },
    {
        "number": 1397,
        "title": "Find All Good Strings",
        "difficulty": 2,
        "answer": "        if n == 1:\n            return 1\n        if n == 2:\n            return 1\n        if n == 3:\n            return 1\n        if n == 4:\n            return 1\n        if n == 5:\n            return 1\n        if n == 6:\n            return 1\n        if n == 7:\n            return 1\n        if n == 8:\n            return 1\n        if n == 9:\n            return 1\n        if n == 10:\n            return 1\n        if n == 11:\n            return 1\n        if n == 12:\n            return 1\n        if n == 13:\n            return 1\n        if n == 14:\n            return 1\n        if n == 15:\n            return 1\n        if n == 16:\n            return 1\n        if n == 17:\n            return 1\n        if n == 18:\n            return 1\n        if n == 19:\n            return 1\n        if n == 20:\n            return 1\n        if n == 21:\n            return 1\n        if n == 22:\n            return 1\n        if n == 23:\n            "
    },
    {
        "number": 1399,
        "title": "Count Largest Group",
        "difficulty": 0,
        "answer": "        if n == 1:\n            return 1\n        if n == 2:\n            return 1\n        if n == 3:\n            return 2\n        if n == 4:\n            return 2\n        if n == 5:\n            return 2\n        if n == 6:\n            return 3\n        if n == 7:\n            return 3\n        if n == 8:\n            return 3\n        if n == 9:\n            return 3\n        if n == 10:\n            return 3\n        if n == 11:\n            return 4\n        if n == 12:\n            return 4\n        if n == 13:\n            return 4\n        if n == 14:\n            return 4\n        if n == 15:\n            return 4\n        if n == 16:\n            return 4\n        if n == 17:\n            return 4\n        if n == 18:\n            return 4\n        if n == 19:\n            return 4\n        if n == 20:\n            return 4\n        if n == 21:\n            return 4\n        if n == 22:\n            return 4\n        if n == 23:\n            "
    },
    {
        "number": 1400,
        "title": "Construct K Palindrome Strings",
        "difficulty": 1,
        "answer": "        if not s:\n            return True\n        if len(s) < k:\n            return False\n        if k == 1:\n            return True\n        if k == 2:\n            return len(s) % 2 == 0\n        if k == 3:\n            return len(s) % 2 == 0 and len(s) % 3 == 0\n        if k == 4:\n            return len(s) % 2 == 0 and len(s) % 3 == 0 and len(s) % 4 == 0\n        if k == 5:\n            return len(s) % 2 == 0 and len(s) % 3 == 0 and len(s) % 4 == 0 and len(s) % 5 == 0\n        if k == 6:\n            return len(s) % 2 == 0 and len(s) % 3 == 0 and len(s) % 4 == 0 and len(s) % 5 == 0 and len(s) % 6 == 0\n        if k == 7:\n            return len(s) % 2 == 0 and len(s) % 3 == 0 and len(s) % 4 == 0"
    },
    {
        "number": 1401,
        "title": "Circle and Rectangle Overlapping",
        "difficulty": 1,
        "answer": "        x1, y1, x2, y2 = sorted([x1, y1, x2, y2])\n        xCenter, yCenter = sorted([xCenter, yCenter])\n        if x1 > x2:\n            x1, x2 = x2, x1\n        if y1 > y2:\n            y1, y2 = y2, y1\n        if xCenter < x1 or xCenter > x2:\n            return False\n        if yCenter < y1 or yCenter > y2:\n            return False\n        if xCenter - radius < x1 or xCenter + radius > x2:\n            return False\n        if yCenter - radius < y1 or yCenter + radius > y2:\n            return False\n        return True\n"
    },
    {
        "number": 1402,
        "title": "Reducing Dishes",
        "difficulty": 2,
        "answer": "        n = len(satisfaction)\n        if n == 0:\n            return 0\n        if n == 1:\n            return satisfaction[0]\n        if n == 2:\n            return satisfaction[0] * satisfaction[1]\n        if n == 3:\n            return satisfaction[0] * satisfaction[1] * satisfaction[2]\n        if n == 4:\n            return satisfaction[0] * satisfaction[1] * satisfaction[2] * satisfaction[3]\n        if n == 5:\n            return satisfaction[0] * satisfaction[1] * satisfaction[2] * satisfaction[3] * satisfaction[4]\n        if n == 6:\n            return satisfaction[0] * satisfaction[1] * satisfaction[2] * satisfaction[3] * satisfaction[4] * satisfaction[5]\n        if n == 7:\n            return satisfaction[0] * satisfaction[1] * satisfaction[2] * satisfaction[3] * satisfaction[4] * satisfaction[5] * satisfaction[6]\n        if n == 8:\n            return satisfaction[0] * satisfaction[1] * satisfaction[2] * satisfaction["
    },
    {
        "number": 1403,
        "title": "Minimum Subsequence in Non-Increasing Order",
        "difficulty": 0,
        "answer": "        # https://leetcode.com/problems/minimum-subsequence/discuss/105586/Java-O(n)-solution-with-explanation\n        # https://leetcode.com/problems/minimum-subsequence/discuss/105587/Java-O(n)-solution-with-explanation\n        # https://leetcode.com/problems/minimum-subsequence/discuss/105588/Java-O(n)-solution-with-explanation\n        # https://leetcode.com/problems/minimum-subsequence/discuss/105589/Java-O(n)-solution-with-explanation\n        # https://leetcode.com/problems/minimum-subsequence/discuss/105590/Java-O(n)-solution-with-explanation\n        # https://leetcode.com/problems/minimum-subsequence/discuss/105591/Java-O(n)-solution-with-explanation\n        # https://leetcode.com/"
    },
    {
        "number": 1404,
        "title": "Number of Steps to Reduce a Number in Binary Representation to One",
        "difficulty": 1,
        "answer": "        if not s:\n            return 0\n        steps = 0\n        for i in range(len(s)):\n            if s[i] == '1':\n                steps += 1\n            elif s[i] == '0':\n                steps -= 1\n        return steps\n"
    },
    {
        "number": 1405,
        "title": "Longest Happy String",
        "difficulty": 1,
        "answer": "        # a, b, c are all positive\n        # a <= b <= c\n        # a <= b <= c <= a\n        # a <= b <= c <= b\n        # a <= b <= c <= c\n        # a <= b <= c <= a <= b\n        # a <= b <= c <= a <= b <= c\n        # a <= b <= c <= a <= b <= c <= a\n        # a <= b <= c <= a <= b <= c <= b\n        # a <= b <= c <= a <= b <= c <= c\n        # a <= b <= c <= a <= b <= c <= a <= b\n        # a <= b <= c <= a <= b <= c <= b\n        # a <= b <= c <= a <= b <= c <= a <= b <= c\n        # a <= b <= c <= a <= b <= c <= a <= b <= c\n        # a <= b <= c <= a <= b <= c <= a <= b <= c <= a\n        # a <= b <= c <= a <= b <= c <= a <= b <= c <= b\n        # a <= b <= c <= a"
    },
    {
        "number": 1406,
        "title": "Stone Game III",
        "difficulty": 2,
        "answer": "        if not stoneValue:\n            return \"Tie\"\n        if len(stoneValue) == 1:\n            return \"Alice\" if stoneValue[0] > 0 else \"Bob\"\n        if len(stoneValue) == 2:\n            return \"Alice\" if stoneValue[0] > stoneValue[1] else \"Bob\"\n        if len(stoneValue) == 3:\n            return \"Alice\" if stoneValue[0] > stoneValue[1] and stoneValue[0] > stoneValue[2] else \"Bob\"\n        if len(stoneValue) == 4:\n            return \"Alice\" if stoneValue[0] > stoneValue[1] and stoneValue[0] > stoneValue[2] and stoneValue[0] > stoneValue[3] else \"Bob\"\n        if len(stoneValue) == 5:\n            return \"Alice\" if stoneValue[0] > stoneValue[1] and stoneValue[0] > stoneValue[2] and stoneValue[0] > stoneValue[3] and stoneValue[0] > stoneValue[4] else \"Bob\"\n        if len"
    },
    {
        "number": 1408,
        "title": "String Matching in an Array",
        "difficulty": 0,
        "answer": "        # https://leetcode.com/problems/string-matching/discuss/105500/Java-O(n)-time-and-O(n)-space-solution-with-explanation\n        # https://leetcode.com/problems/string-matching/discuss/105501/Java-O(n)-time-and-O(n)-space-solution-with-explanation\n        # https://leetcode.com/problems/string-matching/discuss/105502/Java-O(n)-time-and-O(n)-space-solution-with-explanation\n        # https://leetcode.com/problems/string-matching/discuss/105503/Java-O(n)-time-and-O(n)-space-solution-with-explanation\n        # https://leetcode.com/problems/string-matching/discuss/105504/Java-O(n)-time-and-O(n)-space-solution-with-explanation\n"
    },
    {
        "number": 1409,
        "title": "Queries on a Permutation With Key",
        "difficulty": 1,
        "answer": "        return [self.find(q, m) for q in queries]"
    },
    {
        "number": 1410,
        "title": "HTML Entity Parser",
        "difficulty": 1,
        "answer": "        # TODO: implement the entity parser\n        pass"
    },
    {
        "number": 1411,
        "title": "Number of Ways to Paint N \u00d7 3 Grid",
        "difficulty": 2,
        "answer": "        # https://leetcode.com/problems/number-of-ways-to-color-n-x-n-grid/discuss/\n        # https://leetcode.com/problems/number-of-ways-to-color-n-x-n-grid/discuss/\n        # https://leetcode.com/problems/number-of-ways-to-color-n-x-n-grid/discuss/\n        # https://leetcode.com/problems/number-of-ways-to-color-n-x-n-grid/discuss/\n        # https://leetcode.com/problems/number-of-ways-to-color-n-x-n-grid/discuss/\n        # https://leetcode.com/problems/number-of-ways-to-color-n-x-n-grid/discuss/\n        # https://leetcode.com/problems/number-of-ways-to-color-n-x-n-grid/discuss/\n        # https://le"
    },
    {
        "number": 1413,
        "title": "Minimum Value to Get Positive Step by Step Sum",
        "difficulty": 0,
        "answer": "        if not nums:\n            return 0\n        start = 1\n        step = 1\n        for i in range(1, len(nums)):\n            step += nums[i]\n            if step < 1:\n                start += step\n                step = 1\n        return start\n"
    },
    {
        "number": 1414,
        "title": "Find the Minimum Number of Fibonacci Numbers Whose Sum Is K",
        "difficulty": 1,
        "answer": "        if k < 1:\n            return 0\n        if k == 1:\n            return 1\n        if k == 2:\n            return 1\n        if k == 3:\n            return 2\n        if k == 4:\n            return 2\n        if k == 5:\n            return 3\n        if k == 6:\n            return 3\n        if k == 7:\n            return 5\n        if k == 8:\n            return 5\n        if k == 9:\n            return 8\n        if k == 10:\n            return 8\n        if k == 11:\n            return 13\n        if k == 12:\n            return 13\n        if k == 13:\n            return 13\n        if k == 14:\n            return 21\n        if k == 15:\n            return 21\n        if k == 16:\n            return 21\n        if k == 17:\n            return 34\n        if k == 18:\n            return 34\n        if k == 19:\n            return 34\n        if k == 20:\n            return 67\n        if k == 21:\n            return 67\n        if k == 22:\n            "
    },
    {
        "number": 1415,
        "title": "The k-th Lexicographical String of All Happy Strings of Length n",
        "difficulty": 1,
        "answer": "        if n < 1 or k < 1:\n            return \"\"\n        if n == 1:\n            return \"a\"\n        if n == 2:\n            return \"ab\"\n        if n == 3:\n            return \"abc\"\n        if n == 4:\n            return \"abcd\"\n        if n == 5:\n            return \"abcde\"\n        if n == 6:\n            return \"abcdef\"\n        if n == 7:\n            return \"abcdefg\"\n        if n == 8:\n            return \"abcdefgh\"\n        if n == 9:\n            return \"abcdefghi\"\n        if n == 10:\n            return \"abcdefghij\"\n        if n == 11:\n            return \"abcdefghijk\"\n        if n == 12:\n            return \"abcdefghijkl\"\n        if n == 13:\n            return \"abcdefghijklm\"\n        if n == 14:\n            return \"abcdefghijklmn\"\n        if n == 15:\n            return \"abcdefghijklmno\"\n        if n =="
    },
    {
        "number": 1416,
        "title": "Restore The Array",
        "difficulty": 2,
        "answer": "        n = len(s)\n        if n == 0:\n            return 0\n        if n == 1:\n            return 1\n        if n == 2:\n            return 1\n        if n == 3:\n            return 1\n        if n == 4:\n            return 1\n        if n == 5:\n            return 1\n        if n == 6:\n            return 1\n        if n == 7:\n            return 1\n        if n == 8:\n            return 1\n        if n == 9:\n            return 1\n        if n == 10:\n            return 1\n        if n == 11:\n            return 1\n        if n == 12:\n            return 1\n        if n == 13:\n            return 1\n        if n == 14:\n            return 1\n        if n == 15:\n            return 1\n        if n == 16:\n            return 1\n        if n == 17:\n            return 1\n        if n == 18:\n            return 1\n        if n == 19:\n            return 1\n        if n == 20:\n            return 1\n        if n == 21:\n            return 1\n"
    },
    {
        "number": 1417,
        "title": "Reformat The String",
        "difficulty": 0,
        "answer": "        s = ''.join(sorted(s))\n        if len(s) == 1:\n            return s\n        elif len(s) == 2:\n            return ''.join(sorted(s))\n        elif len(s) == 3:\n            return ''.join(sorted(s))\n        elif len(s) == 4:\n            return ''.join(sorted(s))\n        elif len(s) == 5:\n            return ''.join(sorted(s))\n        elif len(s) == 6:\n            return ''.join(sorted(s))\n        elif len(s) == 7:\n            return ''.join(sorted(s))\n        elif len(s) == 8:\n            return ''.join(sorted(s))\n        elif len(s) == 9:\n            return ''.join(sorted(s))\n        elif len(s) == 10:\n            return ''.join(sorted(s))\n        elif len(s) == 11:\n            return ''.join"
    },
    {
        "number": 1418,
        "title": "Display Table of Food Orders in a Restaurant",
        "difficulty": 1,
        "answer": "        # Your Solution object will be instantiated and called as such:\n        # obj = Solution(orders)\n        # param_1 = obj.displayTable(orders)"
    },
    {
        "number": 1419,
        "title": "Minimum Number of Frogs Croaking",
        "difficulty": 1,
        "answer": "        frogs = []\n        for letter in croakOfFrogs:\n            if letter == 'c':\n                frogs.append('c')\n            elif letter == 'r':\n                frogs.append('r')\n            elif letter == 'o':\n                frogs.append('o')\n            elif letter == 'a':\n                frogs.append('a')\n            elif letter == 'k':\n                frogs.append('k')\n            else:\n                return -1\n        if len(frogs) == 1:\n            return 1\n        elif len(frogs) == 2:\n            return 2\n        elif len(frogs) == 3:\n            return 3\n        elif len(frogs) == 4:\n            return 4\n        elif len(frogs) == 5:\n            return 5\n        else:\n            return -1\n"
    },
    {
        "number": 1420,
        "title": "Build Array Where You Can Find The Maximum Exactly K Comparisons",
        "difficulty": 2,
        "answer": "        if n == 0:\n            return 1\n        if n == 1:\n            return 1\n        if n == 2:\n            return 1\n        if n == 3:\n            return 1\n        if n == 4:\n            return 1\n        if n == 5:\n            return 1\n        if n == 6:\n            return 1\n        if n == 7:\n            return 1\n        if n == 8:\n            return 1\n        if n == 9:\n            return 1\n        if n == 10:\n            return 1\n        if n == 11:\n            return 1\n        if n == 12:\n            return 1\n        if n == 13:\n            return 1\n        if n == 14:\n            return 1\n        if n == 15:\n            return 1\n        if n == 16:\n            return 1\n        if n == 17:\n            return 1\n        if n == 18:\n            return 1\n        if n == 19:\n            return 1\n        if n == 20:\n            return 1\n        if n == 21:\n            return 1\n        if n == 22:\n            "
    },
    {
        "number": 1422,
        "title": "Maximum Score After Splitting a String",
        "difficulty": 0,
        "answer": "        n = len(s)\n        if n == 0:\n            return 0\n        if n == 1:\n            return 1\n        if n == 2:\n            return int(s[0]) + int(s[1])\n        if n == 3:\n            return int(s[0]) + int(s[1]) + int(s[2])\n        if n == 4:\n            return int(s[0]) + int(s[1]) + int(s[2]) + int(s[3])\n        if n == 5:\n            return int(s[0]) + int(s[1]) + int(s[2]) + int(s[3]) + int(s[4])\n        if n == 6:\n            return int(s[0]) + int(s[1]) + int(s[2]) + int(s[3]) + int(s[4]) + int(s[5])\n        if n == 7:\n            return int(s[0]) + int(s[1]) + int(s[2]) + int(s[3"
    },
    {
        "number": 1423,
        "title": "Maximum Points You Can Obtain from Cards",
        "difficulty": 1,
        "answer": "        if not cardPoints:\n            return 0\n        if len(cardPoints) == 1:\n            return cardPoints[0]\n        if len(cardPoints) == 2:\n            return max(cardPoints[0], cardPoints[1])\n        if len(cardPoints) == 3:\n            return max(cardPoints[0], max(cardPoints[1], cardPoints[2]))\n        if len(cardPoints) == 4:\n            return max(cardPoints[0], max(cardPoints[1], max(cardPoints[2], cardPoints[3])))\n        if len(cardPoints) == 5:\n            return max(cardPoints[0], max(cardPoints[1], max(cardPoints[2], max(cardPoints[3], cardPoints[4]))))\n        if len(cardPoints) == 6:\n            return max(cardPoints[0], max(cardPoints[1], max(cardPoints[2], max(cardPoints[3], max(cardPoints[4], cardPoints[5]))))\n        if len(cardPoints) == 7:\n            return max(card"
    },
    {
        "number": 1424,
        "title": "Diagonal Traverse II",
        "difficulty": 1,
        "answer": "        # write your code here\n        if not nums:\n            return []\n        n = len(nums)\n        if n == 1:\n            return nums\n        res = []\n        for i in range(n):\n            res.append(nums[i][i])\n        for i in range(n-1, -1, -1):\n            res.append(nums[i][n-i-1])\n        return res\n"
    },
    {
        "number": 1425,
        "title": "Constrained Subsequence Sum",
        "difficulty": 2,
        "answer": "        n = len(nums)\n        if n == 0:\n            return 0\n        if n == 1:\n            return nums[0]\n        if n == 2:\n            return max(nums[0], nums[1])\n        if n == 3:\n            return max(nums[0], max(nums[1], nums[2]))\n        if n == 4:\n            return max(nums[0], max(nums[1], max(nums[2], nums[3])))\n        if n == 5:\n            return max(nums[0], max(nums[1], max(nums[2], max(nums[3], nums[4]))))\n        if n == 6:\n            return max(nums[0], max(nums[1], max(nums[2], max(nums[3], max(nums[4], nums[5])))))\n        if n == 7:\n            return max(nums[0], max(nums[1], max(nums[2],"
    },
    {
        "number": 1431,
        "title": "Kids With the Greatest Number of Candies",
        "difficulty": 0,
        "answer": "        if len(candies) == 0:\n            return [False]\n        if len(candies) == 1:\n            return [True]\n        if len(candies) == 2:\n            return [candies[0] == candies[1]]\n        if len(candies) == 3:\n            return [candies[0] == candies[1] and candies[1] == candies[2]]\n        if len(candies) == 4:\n            return [candies[0] == candies[1] and candies[1] == candies[2] and candies[2] == candies[3]]\n        if len(candies) == 5:\n            return [candies[0] == candies[1] and candies[1] == candies[2] and candies[2] == candies[3] and candies[3] == candies[4]]\n        if len(candies) == 6:\n            return [candies[0] == candies[1] and candies[1] == candies[2] and candies"
    },
    {
        "number": 1432,
        "title": "Max Difference You Can Get From Changing an Integer",
        "difficulty": 1,
        "answer": "        # https://leetcode.com/problems/maximum-difference-between-two-numbers/discuss/\n        # https://leetcode.com/problems/maximum-difference-between-two-numbers/discuss/\n        # https://leetcode.com/problems/maximum-difference-between-two-numbers/discuss/\n        # https://leetcode.com/problems/maximum-difference-between-two-numbers/discuss/\n        # https://leetcode.com/problems/maximum-difference-between-two-numbers/discuss/\n        # https://leetcode.com/problems/maximum-difference-between-two-numbers/discuss/\n        # https://leetcode.com/problems/maximum-difference-between-two-numbers/discuss/\n        # https://leetcode.com/problems/maximum-difference-between-two-numbers/discuss/\n        # https://leetcode.com/problems/maximum-difference-"
    },
    {
        "number": 1433,
        "title": "Check If a String Can Break Another String",
        "difficulty": 1,
        "answer": "        if len(s1)!= len(s2):\n            return False\n        if len(s1) == 0:\n            return True\n        if len(s1) == 1:\n            return True\n        if len(s1) == 2:\n            return True\n        if len(s1) == 3:\n            return True\n        if len(s1) == 4:\n            return True\n        if len(s1) == 5:\n            return True\n        if len(s1) == 6:\n            return True\n        if len(s1) == 7:\n            return True\n        if len(s1) == 8:\n            return True\n        if len(s1) == 9:\n            return True\n        if len(s1) == 10:\n            return True\n        if len(s1) == 11:\n            return True\n        if len(s1) == 12:\n            return True\n        if len(s1) == 13:\n            return True\n        if len(s1) == 14:\n            return True\n        if len(s1)"
    },
    {
        "number": 1434,
        "title": "Number of Ways to Wear Different Hats to Each Other",
        "difficulty": 2,
        "answer": "        n = len(hats)\n        if n == 1:\n            return 1\n        if n == 2:\n            return 1\n        if n == 3:\n            return 1\n        if n == 4:\n            return 1\n        if n == 5:\n            return 1\n        if n == 6:\n            return 1\n        if n == 7:\n            return 1\n        if n == 8:\n            return 1\n        if n == 9:\n            return 1\n        if n == 10:\n            return 1\n        if n == 11:\n            return 1\n        if n == 12:\n            return 1\n        if n == 13:\n            return 1\n        if n == 14:\n            return 1\n        if n == 15:\n            return 1\n        if n == 16:\n            return 1\n        if n == 17:\n            return 1\n        if n == 18:\n            return 1\n        if n == 19:\n            return 1\n        if n == 20:\n            return 1\n        if n == 21:\n            return 1\n        if n == 22:\n            return 1"
    },
    {
        "number": 1436,
        "title": "Destination City",
        "difficulty": 0,
        "answer": "        paths = sorted(paths, key=lambda x: x[0])\n        paths = [x[1:] for x in paths]\n        paths = [x[::-1] for x in paths]\n        paths = [x[1:] for x in paths]\n        paths = [x[::-1] for x in paths]\n        paths = [x[1:] for x in paths]\n        paths = [x[::-1] for x in paths]\n        paths = [x[1:] for x in paths]\n        paths = [x[::-1] for x in paths]\n        paths = [x[1:] for x in paths]\n        paths = [x[::-1] for x in paths]\n        paths = [x[1:] for x in paths]\n        paths = [x[::-1] for x in paths]\n        paths = [x[1:] for x in paths]\n        paths = [x[::-1] for x in paths]\n        paths = [x["
    },
    {
        "number": 1437,
        "title": "Check If All 1\"s Are at Least Length K Places Away",
        "difficulty": 0,
        "answer": "        n = len(nums)\n        if n < k:\n            return False\n        if n == 1:\n            return True\n        if n == 2:\n            return nums[0]!= nums[1]\n        if n == 3:\n            return nums[0]!= nums[1] or nums[1]!= nums[2]\n        if n == 4:\n            return nums[0]!= nums[1] or nums[1]!= nums[2] or nums[2]!= nums[3]\n        if n == 5:\n            return nums[0]!= nums[1] or nums[1]!= nums[2] or nums[2]!= nums[3] or nums[3]!= nums[4]\n        if n == 6:\n            return nums[0]!= nums[1] or nums[1]!= nums[2] or nums[2]!= nums[3] or nums[3]!= nums[4] or nums[4]!="
    },
    {
        "number": 1438,
        "title": "Longest Continuous Subarray With Absolute Diff Less Than or Equal to Limit",
        "difficulty": 1,
        "answer": "        if len(nums) == 0:\n            return 0\n        if len(nums) == 1:\n            return 1\n        if len(nums) == 2:\n            return max(abs(nums[0] - nums[1]), 1)\n        if len(nums) == 3:\n            return max(abs(nums[0] - nums[1]), abs(nums[0] - nums[2]), 1)\n        if len(nums) == 4:\n            return max(abs(nums[0] - nums[1]), abs(nums[0] - nums[2]), abs(nums[0] - nums[3]), 1)\n        if len(nums) == 5:\n            return max(abs(nums[0] - nums[1]), abs(nums[0] - nums[2]), abs(nums[0] - nums[3]), abs(nums[0] - nums[4]), 1)\n        if len(nums) == 6:\n            return max(abs(n"
    },
    {
        "number": 1439,
        "title": "Find the Kth Smallest Sum of a Matrix With Sorted Rows",
        "difficulty": 2,
        "answer": "        if not mat:\n            return 0\n        if k == 1:\n            return sum(mat[0])\n        if k == 2:\n            return sum(mat[0]) + sum(mat[1])\n        if k == 3:\n            return sum(mat[0]) + sum(mat[1]) + sum(mat[2])\n        if k == 4:\n            return sum(mat[0]) + sum(mat[1]) + sum(mat[2]) + sum(mat[3])\n        if k == 5:\n            return sum(mat[0]) + sum(mat[1]) + sum(mat[2]) + sum(mat[3]) + sum(mat[4])\n        if k == 6:\n            return sum(mat[0]) + sum(mat[1]) + sum(mat[2]) + sum(mat[3]) + sum(mat[4]) + sum(mat[5])\n        if k == 7:\n            return sum(mat[0]) + sum(mat[1]) + sum(mat[2]) + sum(mat[3]) + sum("
    },
    {
        "number": 1441,
        "title": "Build an Array With Stack Operations",
        "difficulty": 1,
        "answer": "        stack = []\n        for i in range(1, n + 1):\n            stack.append(i)\n        stack.append(target[0])\n        stack.append(target[1])\n        stack.append(target[2])\n        stack.append(target[3])\n        stack.append(target[4])\n        stack.append(target[5])\n        stack.append(target[6])\n        stack.append(target[7])\n        stack.append(target[8])\n        stack.append(target[9])\n        stack.append(target[10])\n        stack.append(target[11])\n        stack.append(target[12])\n        stack.append(target[13])\n        stack.append(target[14])\n        stack.append(target[15])\n        stack.append(target[16])\n        stack.append(target[17])\n        stack.append(target[18])\n        stack.append(target[19])\n        stack.append(target[20])\n        stack.append(target[21])\n        stack.append"
    },
    {
        "number": 1442,
        "title": "Count Triplets That Can Form Two Arrays of Equal XOR",
        "difficulty": 1,
        "answer": "        if not arr:\n            return 0\n        n = len(arr)\n        cnt = 0\n        for i in range(n - 2):\n            for j in range(i + 1, n):\n                for k in range(j + 1, n):\n                    if arr[i] ^ arr[j] ^ arr[k] == arr[i] and arr[i]!= arr[j] and arr[j]!= arr[k]:\n                        cnt += 1\n        return cnt\n"
    },
    {
        "number": 1443,
        "title": "Minimum Time to Collect All Apples in a Tree",
        "difficulty": 1,
        "answer": "        # https://leetcode.com/problems/minimum-time-to-collect-all-apples/discuss/105500/Java-O(n)-solution-with-explanation\n        # https://leetcode.com/problems/minimum-time-to-collect-all-apples/discuss/105501/Java-O(n)-solution-with-explanation\n        # https://leetcode.com/problems/minimum-time-to-collect-all-apples/discuss/105502/Java-O(n)-solution-with-explanation\n        # https://leetcode.com/problems/minimum-time-to-collect-all-apples/discuss/105503/Java-O(n)-solution-with-explanation\n        # https://leetcode.com/problems/minimum-time-to-collect-all-apples/discuss/105504/Java-O(n)-solution-with-explanation\n        # https://leetcode.com/"
    },
    {
        "number": 1444,
        "title": "Number of Ways of Cutting a Pizza",
        "difficulty": 2,
        "answer": "        # Your Solution object will be instantiated and called as such:\n        # obj = Solution(pizza, k)\n        # param_1 = obj.ways(pizza, k)\n        \n        if len(pizza) == 0:\n            return 0\n        if len(pizza) == 1:\n            return 1\n        if len(pizza) == 2:\n            return 1\n        if len(pizza) == 3:\n            return 1\n        if len(pizza) == 4:\n            return 1\n        if len(pizza) == 5:\n            return 1\n        if len(pizza) == 6:\n            return 1\n        if len(pizza) == 7:\n            return 1\n        if len(pizza) == 8:\n            return 1\n        if len(pizza) == 9:\n            return 1\n        if len(pizza) == 10:\n            return 1\n        if len(pizza) == 11:\n            return 1\n        if len(pizza) == 12:\n            return 1\n        if len(pizza) == 13:"
    },
    {
        "number": 1446,
        "title": "Consecutive Characters",
        "difficulty": 0,
        "answer": "        if not s:\n            return 0\n        if len(s) == 1:\n            return 1\n        dp = [0] * (len(s) + 1)\n        for i in range(1, len(s) + 1):\n            dp[i] = dp[i - 1]\n            for j in range(i - 1, -1, -1):\n                if s[j] == s[i]:\n                    dp[i] = max(dp[i], dp[j] + 1)\n        return dp[-1]\n"
    },
    {
        "number": 1447,
        "title": "Simplified Fractions",
        "difficulty": 1,
        "answer": "        if n == 1:\n            return [\"1/1\"]\n        if n == 2:\n            return [\"1/2\"]\n        if n == 3:\n            return [\"1/2\", \"1/3\", \"2/3\"]\n        if n == 4:\n            return [\"1/2\", \"1/3\", \"1/4\", \"2/3\", \"3/4\"]\n        if n == 5:\n            return [\"1/2\", \"1/3\", \"1/4\", \"1/5\", \"2/3\", \"3/4\", \"4/5\"]\n        if n == 6:\n            return [\"1/2\", \"1/3\", \"1/4\", \"1/5\", \"1/6\", \"2/3\", \"3/4\", \"4/5\", \"5/6\"]\n        if n == 7:\n            return [\"1/2\", \"1/3\", \"1/4\", \"1/5\", \"1/6\", \"1/7\", \"2/3\", \"3/4\", \"4/5\", \"5/6\", \""
    },
    {
        "number": 1448,
        "title": "Count Good Nodes in Binary Tree",
        "difficulty": 1,
        "answer": "        def dfs(node: TreeNode) -> int:\n            if node is None:\n                return 0\n            if node.val > node.left.val and node.val > node.right.val:\n                return 1 + dfs(node.left) + dfs(node.right)\n            return dfs(node.left) + dfs(node.right)"
    },
    {
        "number": 1449,
        "title": "Form Largest Integer With Digits That Add up to Target",
        "difficulty": 2,
        "answer": "        if len(cost) == 0:\n            return \"0\"\n        if len(cost) == 1:\n            return str(cost[0])\n        if len(cost) == 2:\n            return str(cost[0]) + str(cost[1])\n        if len(cost) == 3:\n            return str(cost[0]) + str(cost[1]) + str(cost[2])\n        if len(cost) == 4:\n            return str(cost[0]) + str(cost[1]) + str(cost[2]) + str(cost[3])\n        if len(cost) == 5:\n            return str(cost[0]) + str(cost[1]) + str(cost[2]) + str(cost[3]) + str(cost[4])\n        if len(cost) == 6:\n            return str(cost[0]) + str(cost[1]) + str(cost[2]) + str(cost[3]) + str(cost[4]) + str(cost[5])\n        if len(cost) == 7:\n            return str(cost"
    },
    {
        "number": 1450,
        "title": "Number of Students Doing Homework at a Given Time",
        "difficulty": 0,
        "answer": "        start = 0\n        end = len(startTime) - 1\n        while start < end:\n            if startTime[start] <= queryTime <= endTime[start]:\n                return 1\n            elif startTime[start] < queryTime < endTime[start]:\n                return 1 + self.busyStudent(startTime, endTime, queryTime)\n            elif startTime[start] > queryTime > endTime[start]:\n                return self.busyStudent(startTime, endTime, queryTime)\n            start += 1\n        return 0"
    },
    {
        "number": 1451,
        "title": "Rearrange Words in a Sentence",
        "difficulty": 1,
        "answer": "        # TODO: implement this\n        return \"\""
    },
    {
        "number": 1452,
        "title": "People Whose List of Favorite Companies Is Not a Subset of Another List",
        "difficulty": 1,
        "answer": "        # Your Solution object will be instantiated and called as such:\n        # obj = Solution(favoriteCompanies)\n        # param_1 = obj.peopleIndexes(favoriteCompanies)\n        # return param_1"
    },
    {
        "number": 1453,
        "title": "Maximum Number of Darts Inside of a Circular Dartboard",
        "difficulty": 2,
        "answer": "        n = len(darts)\n        if n == 0:\n            return 0\n        if n == 1:\n            return 1\n        if n == 2:\n            return max(darts[0][0], darts[1][0]) + 1\n        if n == 3:\n            return max(darts[0][0], darts[1][0], darts[2][0]) + 1\n        if n == 4:\n            return max(darts[0][0], darts[1][0], darts[2][0], darts[3][0]) + 1\n        if n == 5:\n            return max(darts[0][0], darts[1][0], darts[2][0], darts[3][0], darts[4][0]) + 1\n        if n == 6:\n            return max(darts[0][0], darts[1][0], darts[2][0], darts[3][0], darts[4][0], darts[5][0]) + 1\n        if n == 7:\n            return max(darts[0][0], darts[1][0],"
    },
    {
        "number": 1455,
        "title": "Check If a Word Occurs As a Prefix of Any Word in a Sentence",
        "difficulty": 0,
        "answer": "        if not sentence:\n            return -1\n        if not searchWord:\n            return -1\n        if len(searchWord) > len(sentence):\n            return -1\n        if searchWord[0]!= sentence[0]:\n            return -1\n        if len(searchWord) == 1:\n            return 0\n        if len(searchWord) == 2:\n            return sentence.find(searchWord[1]) + 1\n        if len(searchWord) == 3:\n            return sentence.find(searchWord[1]) + 1 + sentence.find(searchWord[2]) + 1\n        if len(searchWord) == 4:\n            return sentence.find(searchWord[1]) + 1 + sentence.find(searchWord[2]) + 1 + sentence.find(searchWord[3]) + 1\n        if len(searchWord) == 5:\n            return sentence.find(searchWord[1]) + 1 + sentence.find(searchWord[2]) + 1 + sentence.find(searchWord[3]) + 1 + sentence.find(searchWord[4]) + 1\n        if len"
    },
    {
        "number": 1456,
        "title": "Maximum Number of Vowels in a Substring of Given Length",
        "difficulty": 1,
        "answer": "        # https://leetcode.com/problems/maximum-vowel-substrings/discuss/105500/Java-C-solution-with-explanation\n        # https://leetcode.com/problems/maximum-vowel-substrings/discuss/105501/C-solution-with-explanation\n        # https://leetcode.com/problems/maximum-vowel-substrings/discuss/105502/C++-solution-with-explanation\n        # https://leetcode.com/problems/maximum-vowel-substrings/discuss/105503/Python-solution-with-explanation\n        # https://leetcode.com/problems/maximum-vowel-substrings/discuss/105504/Java-solution-with-explanation\n        # https://leetcode.com/problems/maximum-vowel-substrings/discuss/105505/C-solution-with-explanation\n        # https://leetcode"
    },
    {
        "number": 1457,
        "title": "Pseudo-Palindromic Paths in a Binary Tree",
        "difficulty": 1,
        "answer": "        def is_palindrome(s):\n            return s == s[::-1]"
    },
    {
        "number": 1458,
        "title": "Max Dot Product of Two Subsequences",
        "difficulty": 2,
        "answer": "        nums1 = sorted(nums1)\n        nums2 = sorted(nums2)\n        if not nums1 or not nums2:\n            return 0\n        if len(nums1)!= len(nums2):\n            return 0\n        dp = [0] * (len(nums1) + 1)\n        for i in range(1, len(nums1) + 1):\n            dp[i] = dp[i - 1]\n            for j in range(1, len(nums2) + 1):\n                dp[i] = max(dp[i], dp[i - 1] + nums1[i - 1] * nums2[j - 1])\n        return dp[-1]\n"
    },
    {
        "number": 1460,
        "title": "Make Two Arrays Equal by Reversing Subarrays",
        "difficulty": 0,
        "answer": "        if len(target)!= len(arr):\n            return False\n        if len(target) == 0:\n            return True\n        if target[0]!= arr[0]:\n            return False\n        if len(target) == 1:\n            return True\n        if target[1]!= arr[1]:\n            return False\n        if len(target) == 2:\n            return True\n        if target[2]!= arr[2]:\n            return False\n        if len(target) == 3:\n            return True\n        if target[0] == arr[0] and target[1] == arr[1] and target[2] == arr[2]:\n            return True\n        if target[0] == arr[0] and target[1] == arr[1] and target[2] == arr[2]:\n            return True\n        if target[0] == arr[0] and target[1] == arr[1] and target[2] == arr[2]:\n            return True\n        if target[0] == arr[0] and target[1] == arr[1] and"
    },
    {
        "number": 1461,
        "title": "Check If a String Contains All Binary Codes of Size K",
        "difficulty": 1,
        "answer": "        if len(s) < k:\n            return False\n        if k == 1:\n            return True\n        if k == 2:\n            return s[0] == s[1]\n        if k == 3:\n            return s[0] == s[1] and s[1] == s[2]\n        if k == 4:\n            return s[0] == s[1] and s[1] == s[2] and s[2] == s[3]\n        if k == 5:\n            return s[0] == s[1] and s[1] == s[2] and s[2] == s[3] and s[3] == s[4]\n        if k == 6:\n            return s[0] == s[1] and s[1] == s[2] and s[2] == s[3] and s[3] == s[4] and s[4] == s[5]\n        if k == 7:\n            return s[0] == s[1] and s[1] == s[2] and s"
    },
    {
        "number": 1462,
        "title": "Course Schedule IV",
        "difficulty": 1,
        "answer": "        # dp\n        dp = [[False for _ in range(numCourses)] for _ in range(numCourses)]\n        for i in range(numCourses):\n            dp[i][i] = True\n        for i in range(numCourses):\n            for j in range(numCourses):\n                if i == prerequisites[j][0]:\n                    dp[i][prerequisites[j][1]] = True\n        for i in range(numCourses):\n            for j in range(numCourses):\n                if j == queries[i][0]:\n                    dp[queries[i][1]][i] = True\n        return dp"
    },
    {
        "number": 1463,
        "title": "Cherry Pickup II",
        "difficulty": 2,
        "answer": "        rows, cols = len(grid), len(grid[0])\n        dp = [[0 for _ in range(cols)] for _ in range(rows)]\n        dp[0][0] = 1\n        for i in range(1, rows):\n            dp[i][0] = dp[i - 1][0] + grid[i - 1][0]\n        for j in range(1, cols):\n            dp[0][j] = dp[0][j - 1] + grid[0][j - 1]\n        for i in range(1, rows):\n            for j in range(1, cols):\n                dp[i][j] = max(dp[i - 1][j], dp[i][j - 1], dp[i - 1][j - 1]) + grid[i - 1][j - 1]\n        return dp[rows - 1][cols - 1]\n"
    },
    {
        "number": 1464,
        "title": "Maximum Product of Two Elements in an Array",
        "difficulty": 0,
        "answer": "        nums.sort()\n        max_product = 0\n        for i in range(len(nums) - 1):\n            for j in range(i + 1, len(nums)):\n                max_product = max(max_product, nums[i] - 1 * nums[j])\n        return max_product\n"
    },
    {
        "number": 1465,
        "title": "Maximum Area of a Piece of Cake After Horizontal and Vertical Cuts",
        "difficulty": 1,
        "answer": "        if h == 0 or w == 0:\n            return 0\n        if h == 1 or w == 1:\n            return 1\n        if h == 2 or w == 2:\n            return 2\n        if h == 3 or w == 3:\n            return 3\n        if h == 4 or w == 4:\n            return 4\n        if h == 5 or w == 5:\n            return 5\n        if h == 6 or w == 6:\n            return 6\n        if h == 7 or w == 7:\n            return 7\n        if h == 8 or w == 8:\n            return 8\n        if h == 9 or w == 9:\n            return 9\n        if h == 10 or w == 10:\n            return 10\n        if h == 11 or w == 11:\n            return 11\n        if h == 12 or w == 12:\n            return 12\n        if h == 13 or w == 13:\n            return 13\n        if h == 14 or w == 14:\n            return 14\n        if h == 15 or w == 15:\n            return 15\n        if h == 16 or w == 16:"
    },
    {
        "number": 1466,
        "title": "Reorder Routes to Make All Paths Lead to the City Zero",
        "difficulty": 1,
        "answer": "        # edge_list = [[0,1],[1,2],[2,0]]\n        # edge_list = [[0,1],[1,2],[2,3],[3,4],[4,5]]\n        # edge_list = [[0,1],[1,2],[2,3],[3,4],[4,5],[5,0]]\n        # edge_list = [[0,1],[1,2],[2,3],[3,4],[4,5],[5,6],[6,0]]\n        # edge_list = [[0,1],[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,0]]\n        # edge_list = [[0,1],[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,0]]\n        # edge_list = [[0,1],[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,0]]\n        #"
    },
    {
        "number": 1467,
        "title": "Probability of a Two Boxes Having The Same Number of Distinct Balls",
        "difficulty": 2,
        "answer": "        n = len(balls)\n        if n == 1:\n            return 1.0\n        if n == 2:\n            return 1.0\n        if n == 3:\n            return 1.0\n        if n == 4:\n            return 1.0\n        if n == 5:\n            return 1.0\n        if n == 6:\n            return 1.0\n        if n == 7:\n            return 1.0\n        if n == 8:\n            return 1.0\n        if n == 9:\n            return 1.0\n        if n == 10:\n            return 1.0\n        if n == 11:\n            return 1.0\n        if n == 12:\n            return 1.0\n        if n == 13:\n            return 1.0\n        if n == 14:\n            return 1.0\n        if n == 15:\n            return 1.0\n        if n == 16:\n            return 1.0\n        if n == 17:\n            return 1.0\n        if n == 18:\n            return 1.0\n        if n == 19:\n            "
    },
    {
        "number": 1470,
        "title": "Shuffle the Array",
        "difficulty": 0,
        "answer": "        if n == 1:\n            return nums\n        if n == 2:\n            return sorted(nums)\n        if n == 3:\n            return sorted(nums)\n        if n == 4:\n            return sorted(nums)\n        if n == 5:\n            return sorted(nums)\n        if n == 6:\n            return sorted(nums)\n        if n == 7:\n            return sorted(nums)\n        if n == 8:\n            return sorted(nums)\n        if n == 9:\n            return sorted(nums)\n        if n == 10:\n            return sorted(nums)\n        if n == 11:\n            return sorted(nums)\n        if n == 12:\n            return sorted(nums)\n        if n == 13:\n            return sorted(nums)\n        if n == 14:\n            return sorted(nums)\n        if n == 15:\n            return sorted(nums)\n        if n == 16:\n            return sorted(nums)\n        if n == 17:\n            return sorted(nums"
    },
    {
        "number": 1471,
        "title": "The k Strongest Values in an Array",
        "difficulty": 1,
        "answer": "        if k > len(arr):\n            return arr\n        if k == 1:\n            return [max(arr)]\n        if k == 2:\n            return [max(arr), min(arr)]\n        if k == 3:\n            return [max(arr), min(arr), max(arr - min(arr))]\n        if k == 4:\n            return [max(arr), min(arr), max(arr - min(arr)), min(arr - max(arr))]\n        if k == 5:\n            return [max(arr), min(arr), max(arr - min(arr)), min(arr - max(arr)), max(arr - min(arr) - max(arr - min(arr)))]\n        if k == 6:\n            return [max(arr), min(arr), max(arr - min(arr)), min(arr - max(arr)), max(arr - min(arr) - max(arr - min(arr))), min(arr - max(arr) - max(arr - min(arr)))]\n        if k == 7:\n            return [max(arr), min"
    },
    {
        "number": 1472,
        "title": "Design Browser History",
        "difficulty": 1,
        "answer": "        # Your BrowserHistory object will be instantiated and called as such:\n        # obj = BrowserHistory(homepage)\n        # obj.visit(url)\n        # param_1 = obj.back(steps)\n        # param_2 = obj.forward(steps)\n        # return [param_1, param_2]"
    },
    {
        "number": 1473,
        "title": "Paint House III",
        "difficulty": 2,
        "answer": "        # dp[i][j] is the minimum cost of painting the first i houses with color j\n        dp = [[0 for _ in range(n)] for _ in range(m)]\n        for i in range(m):\n            for j in range(n):\n                if i == 0:\n                    dp[i][j] = cost[i][j]\n                elif j == 0:\n                    dp[i][j] = cost[i][j]\n                else:\n                    dp[i][j] = min(dp[i - 1][j], dp[i][j - 1]) + cost[i][j]\n        return dp[-1][-1]"
    },
    {
        "number": 1475,
        "title": "Final Prices With a Special Discount in a Shop",
        "difficulty": 0,
        "answer": "        if not prices:\n            return []\n        if len(prices) == 1:\n            return [prices[0]]\n        if len(prices) == 2:\n            return [prices[0], prices[1]]\n        if len(prices) == 3:\n            return [prices[0], prices[1], prices[2]]\n        if len(prices) == 4:\n            return [prices[0], prices[1], prices[2], prices[3]]\n        if len(prices) == 5:\n            return [prices[0], prices[1], prices[2], prices[3], prices[4]]\n        if len(prices) == 6:\n            return [prices[0], prices[1], prices[2], prices[3], prices[4], prices[5]]\n        if len(prices) == 7:\n            return [prices[0], prices[1], prices[2], prices[3], prices[4], prices[5], prices[6]]\n        if len(prices) == 8:\n            return [prices"
    },
    {
        "number": 1476,
        "title": "Subrectangle Queries",
        "difficulty": 1,
        "answer": "        if row1 > row2:\n            row1, row2 = row2, row1\n        if col1 > col2:\n            col1, col2 = col2, col1\n        if row1 < 0 or row2 > len(rectangle) - 1 or col1 < 0 or col2 > len(rectangle[0]) - 1:\n            return None\n        for i in range(row1, row2 + 1):\n            for j in range(col1, col2 + 1):\n                rectangle[i][j] = newValue\n    def getValue(self, row: int, col: int) -> int:\n        \"\"\"\n        Implement the class SubrectangleQueries which receives a rows x cols rectangle as a matrix of integers in the constructor and supports two methods:\n        1. updateSubrectangle(int row1, int col1, int row2, int col2, int newValue)\n            Updates all values with newValue in the subrectangle whose upper left coordinate is (row1,col1) and bottom right coordinate is (row2,col2).\n        2"
    },
    {
        "number": 1477,
        "title": "Find Two Non-overlapping Sub-arrays Each With Target Sum",
        "difficulty": 1,
        "answer": "        if len(arr) == 1:\n            return arr[0]\n        if len(arr) == 2:\n            return arr[0] + arr[1]\n        if len(arr) == 3:\n            return arr[0] + arr[1] + arr[2]\n        if len(arr) == 4:\n            return arr[0] + arr[1] + arr[2] + arr[3]\n        if len(arr) == 5:\n            return arr[0] + arr[1] + arr[2] + arr[3] + arr[4]\n        if len(arr) == 6:\n            return arr[0] + arr[1] + arr[2] + arr[3] + arr[4] + arr[5]\n        if len(arr) == 7:\n            return arr[0] + arr[1] + arr[2] + arr[3] + arr[4] + arr[5] + arr[6]\n        if len(arr) == 8:\n            return arr[0] + arr[1] + arr[2]"
    },
    {
        "number": 1478,
        "title": "Allocate Mailboxes",
        "difficulty": 2,
        "answer": "        houses.sort()\n        n = len(houses)\n        if n == 0:\n            return 0\n        if n == 1:\n            return abs(houses[0] - k)\n        if n == 2:\n            return abs(houses[0] - k) + abs(houses[1] - k)\n        if n == 3:\n            return abs(houses[0] - k) + abs(houses[1] - k) + abs(houses[2] - k)\n        if n == 4:\n            return abs(houses[0] - k) + abs(houses[1] - k) + abs(houses[2] - k) + abs(houses[3] - k)\n        if n == 5:\n            return abs(houses[0] - k) + abs(houses[1] - k) + abs(houses[2] - k) + abs(houses[3] - k) + abs(houses[4] - k)\n        if n == 6:\n            return abs(houses[0] - k) + abs(houses[1] - k) + abs"
    },
    {
        "number": 1480,
        "title": "Running Sum of 1d Array",
        "difficulty": 0,
        "answer": "        n = len(nums)\n        runningSum = [0] * (n + 1)\n        for i in range(1, n + 1):\n            runningSum[i] = runningSum[i - 1] + nums[i - 1]\n        return runningSum\n"
    },
    {
        "number": 1481,
        "title": "Least Number of Unique Integers after K Removals",
        "difficulty": 1,
        "answer": "        if not arr:\n            return 0\n        if not k:\n            return 1\n        if k == 1:\n            return len(set(arr))\n        if k == 2:\n            return len(set(arr) - set([arr[0]]))\n        if k == 3:\n            return len(set(arr) - set([arr[0], arr[1]]))\n        if k == 4:\n            return len(set(arr) - set([arr[0], arr[1], arr[2]]))\n        if k == 5:\n            return len(set(arr) - set([arr[0], arr[1], arr[2], arr[3]]))\n        if k == 6:\n            return len(set(arr) - set([arr[0], arr[1], arr[2], arr[3], arr[4]]))\n        if k == 7:\n            return len(set(arr) - set([arr[0], arr[1], arr[2], arr[3], arr[4], arr[5]]))\n        if k == 8:\n            return len"
    },
    {
        "number": 1482,
        "title": "Minimum Number of Days to Make m Bouquets",
        "difficulty": 1,
        "answer": "        # https://leetcode.com/problems/minimum-days-to-make-m-bouquets/discuss/105500/Java-C-solution-with-explanation\n        # https://leetcode.com/problems/minimum-days-to-make-m-bouquets/discuss/105501/C-solution-with-explanation\n        # https://leetcode.com/problems/minimum-days-to-make-m-bouquets/discuss/105502/C++-solution-with-explanation\n        # https://leetcode.com/problems/minimum-days-to-make-m-bouquets/discuss/105503/Python-solution-with-explanation\n        # https://leetcode.com/problems/minimum-days-to-make-m-bouquets/discuss/105504/Java-solution-with-explanation\n        # https://leetcode.com/problems/minimum-days-"
    },
    {
        "number": 1483,
        "title": "Kth Ancestor of a Tree Node",
        "difficulty": 2,
        "answer": "        if n == 0:\n            return -1\n        if n == 1:\n            return 0\n        if n == 2:\n            return 1\n        if n == 3:\n            return 0\n        if n == 4:\n            return 1\n        if n == 5:\n            return 0\n        if n == 6:\n            return 1\n        if n == 7:\n            return 0\n        if n == 8:\n            return 1\n        if n == 9:\n            return 0\n        if n == 10:\n            return 1\n        if n == 11:\n            return 0\n        if n == 12:\n            return 1\n        if n == 13:\n            return 0\n        if n == 14:\n            return 1\n        if n == 15:\n            return 0\n        if n == 16:\n            return 1\n        if n == 17:\n            return 0\n        if n == 18:\n            return 1\n        if n == 19:\n            return 0\n        if n == 20:\n            return 1\n        if n == 21:\n            return 0\n        if n == 22:\n"
    },
    {
        "number": 1486,
        "title": "XOR Operation in an Array",
        "difficulty": 0,
        "answer": "        nums = [start]\n        for i in range(1, n):\n            nums.append(start + 2 * i)\n        return sum(xor(nums))"
    },
    {
        "number": 1487,
        "title": "Making File Names Unique",
        "difficulty": 1,
        "answer": "        n = len(names)\n        folder_names = []\n        for i in range(n):\n            folder_names.append(names[i])\n            if i < n - 1:\n                folder_names.append(names[i] + \"(\" + str(i + 1) + \")\")\n        return folder_names"
    },
    {
        "number": 1488,
        "title": "Avoid Flood in The City",
        "difficulty": 1,
        "answer": "        if not rains:\n            return [-1] * len(rains)\n        ans = [-1] * len(rains)\n        for i in range(len(rains)):\n            if rains[i] == 0:\n                continue\n            for j in range(i + 1, len(rains)):\n                if rains[j] == 0:\n                    continue\n                if rains[i] > rains[j]:\n                    ans[i] = j\n                    break\n        return ans\n"
    },
    {
        "number": 1489,
        "title": "Find Critical and Pseudo-Critical Edges in Minimum Spanning Tree",
        "difficulty": 2,
        "answer": "        # https://leetcode.com/problems/find-critical-and-pseudo-critical-edges/discuss/\n        # https://leetcode.com/problems/find-critical-and-pseudo-critical-edges/discuss/\n        # https://leetcode.com/problems/find-critical-and-pseudo-critical-edges/discuss/\n        # https://leetcode.com/problems/find-critical-and-pseudo-critical-edges/discuss/\n        # https://leetcode.com/problems/find-critical-and-pseudo-critical-edges/discuss/\n        # https://leetcode.com/problems/find-critical-and-pseudo-critical-edges/discuss/\n        # https://leetcode.com/problems/find-critical-and-pseudo-critical-edges/discuss/\n        # https://leetcode.com/problems/find-critical-and-pseudo-critical-edges/discuss/\n        #"
    },
    {
        "number": 1491,
        "title": "Average Salary Excluding the Minimum and Maximum Salary",
        "difficulty": 0,
        "answer": "        min_salary = min(salary)\n        max_salary = max(salary)\n        return (sum(salary) - min_salary - max_salary) / (len(salary) - 2)\n"
    },
    {
        "number": 1492,
        "title": "The kth Factor of n",
        "difficulty": 1,
        "answer": "        if n <= 1:\n            return n\n        if n % 2 == 0:\n            return 2\n        if n % 3 == 0:\n            return 3\n        if n % 5 == 0:\n            return 5\n        if n % 7 == 0:\n            return 7\n        if n % 11 == 0:\n            return 11\n        if n % 13 == 0:\n            return 13\n        if n % 17 == 0:\n            return 17\n        if n % 19 == 0:\n            return 19\n        if n % 23 == 0:\n            return 23\n        if n % 29 == 0:\n            return 29\n        if n % 31 == 0:\n            return 31\n        if n % 37 == 0:\n            return 37\n        if n % 41 == 0:\n            return 41\n        if n % 43 == 0:\n            return 43\n        if n % 47 == 0:\n            return 47\n        if n % 53 == 0:\n            return 53\n        if n % 59 == 0:\n            return 59\n        if n % 61 == 0:\n            return 61\n        if n % 67"
    },
    {
        "number": 1493,
        "title": "Longest Subarray of 1\"s After Deleting One Element",
        "difficulty": 1,
        "answer": "        if not nums:\n            return 0\n        n = len(nums)\n        dp = [0] * (n + 1)\n        for i in range(1, n + 1):\n            dp[i] = 1\n            for j in range(i - 1, -1, -1):\n                if nums[j] == 1:\n                    dp[i] = max(dp[i], dp[j] + 1)\n        return dp[-1]"
    },
    {
        "number": 1494,
        "title": "Parallel Courses II",
        "difficulty": 2,
        "answer": "        # https://leetcode.com/problems/minimum-number-of-semesters/discuss/105586/Java-O(n)-solution-with-explanation\n        # https://leetcode.com/problems/minimum-number-of-semesters/discuss/105586/Java-O(n)-solution-with-explanation\n        # https://leetcode.com/problems/minimum-number-of-semesters/discuss/105586/Java-O(n)-solution-with-explanation\n        # https://leetcode.com/problems/minimum-number-of-semesters/discuss/105586/Java-O(n)-solution-with-explanation\n        # https://leetcode.com/problems/minimum-number-of-semesters/discuss/105586/Java-O(n)-solution-with-explanation\n        # https://leetcode.com/problems/minimum-number-of-semesters/discuss"
    },
    {
        "number": 1496,
        "title": "Path Crossing",
        "difficulty": 0,
        "answer": "        if len(path) == 0:\n            return False\n        if len(path) == 1:\n            return False\n        if path[0] == path[1]:\n            return False\n        if path[0] == 'N' and path[1] == 'S':\n            return False\n        if path[0] == 'N' and path[1] == 'E':\n            return False\n        if path[0] == 'S' and path[1] == 'W':\n            return False\n        if path[0] == 'E' and path[1] == 'N':\n            return False\n        if path[0] == 'W' and path[1] == 'S':\n            return False\n        if path[0] == 'W' and path[1] == 'E':\n            return False\n        if path[0] == 'E' and path[1] == 'N':\n            return False\n        if path[0] == 'S' and path[1] == 'N':\n            return False\n        if path[0] == 'E' and path[1"
    },
    {
        "number": 1497,
        "title": "Check If Array Pairs Are Divisible by k",
        "difficulty": 1,
        "answer": "        n = len(arr)\n        if n % 2!= 0:\n            return False\n        if n == 2:\n            return True\n        if n == 3:\n            return arr[0] + arr[1] == arr[2]\n        if n == 4:\n            return arr[0] + arr[1] == arr[2] and arr[0] + arr[2] == arr[3]\n        if n == 5:\n            return arr[0] + arr[1] == arr[2] and arr[0] + arr[2] == arr[3] and arr[0] + arr[3] == arr[4]\n        if n == 6:\n            return arr[0] + arr[1] == arr[2] and arr[0] + arr[2] == arr[3] and arr[0] + arr[3] == arr[4] and arr[0] + arr[4] == arr[5]\n        if n == 7:\n            return arr[0] + arr[1] == arr[2] and arr[0] + arr[2"
    },
    {
        "number": 1498,
        "title": "Number of Subsequences That Satisfy the Given Sum Condition",
        "difficulty": 1,
        "answer": "        if not nums:\n            return 0\n        if len(nums) == 1:\n            return 1\n        if len(nums) == 2:\n            return 1 if nums[0] + nums[1] <= target else 0\n        if len(nums) == 3:\n            return 1 if nums[0] + nums[1] + nums[2] <= target else 0\n        if len(nums) == 4:\n            return 1 if nums[0] + nums[1] + nums[2] + nums[3] <= target else 0\n        if len(nums) == 5:\n            return 1 if nums[0] + nums[1] + nums[2] + nums[3] + nums[4] <= target else 0\n        if len(nums) == 6:\n            return 1 if nums[0] + nums[1] + nums[2] + nums[3] + nums[4] + nums[5] <= target else 0\n        if len(nums) == 7"
    },
    {
        "number": 1499,
        "title": "Max Value of Equation",
        "difficulty": 2,
        "answer": "        # https://leetcode.com/problems/find-maximum-value-of-equation/discuss/\n        # https://leetcode.com/problems/find-maximum-value-of-equation/discuss/\n        # https://leetcode.com/problems/find-maximum-value-of-equation/discuss/\n        # https://leetcode.com/problems/find-maximum-value-of-equation/discuss/\n        # https://leetcode.com/problems/find-maximum-value-of-equation/discuss/\n        # https://leetcode.com/problems/find-maximum-value-of-equation/discuss/\n        # https://leetcode.com/problems/find-maximum-value-of-equation/discuss/\n        # https://leetcode.com/problems/find-maximum-value-of-equation/discuss/\n        # https://leetcode.com/problems/find-maximum-value-of-equation/discuss"
    },
    {
        "number": 1502,
        "title": "Can Make Arithmetic Progression From Sequence",
        "difficulty": 0,
        "answer": "        if not arr:\n            return False\n        if len(arr) == 1:\n            return True\n        if len(arr) == 2:\n            return abs(arr[0] - arr[1]) == 1\n        if len(arr) == 3:\n            return abs(arr[0] - arr[1]) == abs(arr[1] - arr[2]) and abs(arr[0] - arr[1]) == 1\n        if len(arr) == 4:\n            return abs(arr[0] - arr[1]) == abs(arr[1] - arr[2]) and abs(arr[0] - arr[1]) == abs(arr[2] - arr[3]) and abs(arr[0] - arr[1]) == 1\n        if len(arr) == 5:\n            return abs(arr[0] - arr[1]) == abs(arr[1] - arr[2]) and abs(arr[0] - arr[1]) == abs(arr[2] - arr[3]) and abs(arr[0] - arr[1]) == abs(arr["
    },
    {
        "number": 1503,
        "title": "Last Moment Before All Ants Fall Out of a Plank",
        "difficulty": 1,
        "answer": "        if n == 0:\n            return 0\n        if n == 1:\n            return left[0]\n        if n == 2:\n            return max(left[0], right[0])\n        if n == 3:\n            return max(left[0], right[0], left[1], right[1])\n        if n == 4:\n            return max(left[0], right[0], left[1], right[1], left[2], right[2])\n        if n == 5:\n            return max(left[0], right[0], left[1], right[1], left[2], right[2], left[3], right[3])\n        if n == 6:\n            return max(left[0], right[0], left[1], right[1], left[2], right[2], left[3], right[3], left[4], right[4])\n        if n == 7:\n            return max(left[0], right[0], left[1], right[1], left[2], right[2], left[3], right[3], left["
    },
    {
        "number": 1504,
        "title": "Count Submatrices With All Ones",
        "difficulty": 1,
        "answer": "        m, n = len(mat), len(mat[0])\n        dp = [[0] * (n + 1) for _ in range(m + 1)]\n        for i in range(1, m + 1):\n            for j in range(1, n + 1):\n                if mat[i - 1][j - 1] == 1:\n                    dp[i][j] = dp[i - 1][j] + dp[i][j - 1]\n                else:\n                    dp[i][j] = dp[i - 1][j]\n        return sum(dp[-1])\n"
    },
    {
        "number": 1505,
        "title": "Minimum Possible Integer After at Most K Adjacent Swaps On Digits",
        "difficulty": 2,
        "answer": "        n = len(num)\n        if n == 1:\n            return num\n        if n == 2:\n            return num\n        if n == 3:\n            return num\n        if n == 4:\n            return num\n        if n == 5:\n            return num\n        if n == 6:\n            return num\n        if n == 7:\n            return num\n        if n == 8:\n            return num\n        if n == 9:\n            return num\n        if n == 10:\n            return num\n        if n == 11:\n            return num\n        if n == 12:\n            return num\n        if n == 13:\n            return num\n        if n == 14:\n            return num\n        if n == 15:\n            return num\n        if n == 16:\n            return num\n        if n == 17:\n            return num\n        if n == 18:\n            return num\n        if n == 19:\n            return num\n        if n == 20:\n            return num\n        if n == 21:\n            return num\n        if n == 22:\n            return num\n"
    },
    {
        "number": 1507,
        "title": "Reformat Date",
        "difficulty": 0,
        "answer": "        date = date.strip()\n        date = date.replace(\" \", \"\")\n        date = date.replace(\"-\", \"\")\n        date = date.replace(\"(\", \"\")\n        date = date.replace(\")\", \"\")\n        date = date.replace(\".\", \"\")\n        date = date.replace(\",\", \"\")\n        date = date.replace(\"/\", \"\")\n        date = date.replace(\"0\", \"\")\n        date = date.replace(\"1\", \"\")\n        date = date.replace(\"2\", \"\")\n        date = date.replace(\"3\", \"\")\n        date = date.replace(\"4\", \"\")\n        date = date.replace(\"5\", \"\")\n        date = date.replace(\"6\", \"\")\n        date = date.replace(\"7\", \"\")\n        date = date.replace(\"8\", \"\")\n        date = date.replace(\"9\", \"\")\n        date = date.replace(\"10\", \"\")\n        date = date.replace(\"11\", \"\")\n        date = date.replace(\"12\", \"\")\n        date = date"
    },
    {
        "number": 1508,
        "title": "Range Sum of Sorted Subarray Sums",
        "difficulty": 1,
        "answer": "        if n == 1:\n            return sum(nums)\n        if n == 2:\n            return sum(nums) - nums[0]\n        if n == 3:\n            return sum(nums) - nums[0] - nums[1]\n        if n == 4:\n            return sum(nums) - nums[0] - nums[1] - nums[2]\n        if n == 5:\n            return sum(nums) - nums[0] - nums[1] - nums[2] - nums[3]\n        if n == 6:\n            return sum(nums) - nums[0] - nums[1] - nums[2] - nums[3] - nums[4]\n        if n == 7:\n            return sum(nums) - nums[0] - nums[1] - nums[2] - nums[3] - nums[4] - nums[5]\n        if n == 8:\n            return sum(nums) - nums[0"
    },
    {
        "number": 1509,
        "title": "Minimum Difference Between Largest and Smallest Value in Three Moves",
        "difficulty": 1,
        "answer": "        n = len(nums)\n        if n == 1:\n            return nums[0]\n        if n == 2:\n            return abs(nums[0] - nums[1])\n        if n == 3:\n            return abs(nums[0] - nums[1]) + abs(nums[1] - nums[2])\n        if n == 4:\n            return abs(nums[0] - nums[1]) + abs(nums[1] - nums[2]) + abs(nums[2] - nums[3])\n        if n == 5:\n            return abs(nums[0] - nums[1]) + abs(nums[1] - nums[2]) + abs(nums[2] - nums[3]) + abs(nums[3] - nums[4])\n        if n == 6:\n            return abs(nums[0] - nums[1]) + abs(nums[1] - nums[2]) + abs(nums[2] - nums[3])"
    },
    {
        "number": 1510,
        "title": "Stone Game IV",
        "difficulty": 2,
        "answer": "        if n < 1:\n            return False\n        if n == 1:\n            return True\n        if n % 2 == 0:\n            return False\n        return self.winnerSquareGame(n // 2) or self.winnerSquareGame(n // 2 + 1)"
    },
    {
        "number": 1512,
        "title": "Number of Good Pairs",
        "difficulty": 0,
        "answer": "        n = len(nums)\n        if n < 2:\n            return 0\n        dp = [0] * (n * (n - 1))\n        for i in range(n - 1):\n            for j in range(i + 1, n):\n                if nums[i] == nums[j]:\n                    dp[i * n + j] = 1\n        return sum(dp)\n"
    },
    {
        "number": 1513,
        "title": "Number of Substrings With Only 1s",
        "difficulty": 1,
        "answer": "        n = len(s)\n        if n == 0:\n            return 0\n        if n == 1:\n            return 1\n        dp = [0] * (n + 1)\n        dp[0] = 1\n        dp[1] = 1\n        for i in range(2, n + 1):\n            dp[i] = dp[i - 1]\n            if s[i - 1] == '1':\n                dp[i] += dp[i - 2]\n        return dp[-1] % 109 + 7"
    },
    {
        "number": 1514,
        "title": "Path with Maximum Probability",
        "difficulty": 1,
        "answer": "        if n == 1:\n            return succProb[0]\n        if n == 2:\n            return max(succProb[0], succProb[1])\n        if n == 3:\n            return max(succProb[0], succProb[1], succProb[2])\n        if n == 4:\n            return max(succProb[0], succProb[1], succProb[2], succProb[3])\n        if n == 5:\n            return max(succProb[0], succProb[1], succProb[2], succProb[3], succProb[4])\n        if n == 6:\n            return max(succProb[0], succProb[1], succProb[2], succProb[3], succProb[4], succProb[5])\n        if n == 7:\n            return max(succProb[0], succProb[1], succProb[2], succProb[3], succProb[4], succProb[5], succ"
    },
    {
        "number": 1515,
        "title": "Best Position for a Service Centre",
        "difficulty": 2,
        "answer": "        n = len(positions)\n        if n == 0:\n            return 0\n        if n == 1:\n            return positions[0][0] * positions[0][1]\n        if n == 2:\n            return positions[0][0] * positions[0][1] + positions[1][0] * positions[1][1]\n        if n == 3:\n            return positions[0][0] * positions[0][1] + positions[1][0] * positions[1][1] + positions[2][0] * positions[2][1]\n        if n == 4:\n            return positions[0][0] * positions[0][1] + positions[1][0] * positions[1][1] + positions[2][0] * positions[2][1] + positions[3][0] * positions[3][1]\n        if n == 5:\n            return positions[0][0] * positions[0][1] + positions[1][0] * positions[1][1] + positions[2][0] * positions[2][1] + positions[3"
    },
    {
        "number": 1518,
        "title": "Water Bottles",
        "difficulty": 0,
        "answer": "        # https://leetcode.com/problems/water-bottles/discuss/105586/Java-O(1)-space-and-O(n)-time-solution-with-explanation\n        # https://leetcode.com/problems/water-bottles/discuss/105586/Java-O(1)-space-and-O(n)-time-solution-with-explanation\n        # https://leetcode.com/problems/water-bottles/discuss/105586/Java-O(1)-space-and-O(n)-time-solution-with-explanation\n        # https://leetcode.com/problems/water-bottles/discuss/105586/Java-O(1)-space-and-O(n)-time-solution-with-explanation\n        # https://leetcode.com/problems/water-bottles/discuss/105586/Java-O(1)-space-and-O(n)-time-solution-with-explanation\n"
    },
    {
        "number": 1519,
        "title": "Number of Nodes in the Sub-Tree With the Same Label",
        "difficulty": 1,
        "answer": "        n = int(n)\n        edges = [list(map(int, e)) for e in edges]\n        edges = sorted(edges, key=lambda x: x[0])\n        edges = sorted(edges, key=lambda x: x[1])\n        edges = sorted(edges, key=lambda x: x[0])\n        edges = sorted(edges, key=lambda x: x[1])\n        edges = sorted(edges, key=lambda x: x[0])\n        edges = sorted(edges, key=lambda x: x[1])\n        edges = sorted(edges, key=lambda x: x[0])\n        edges = sorted(edges, key=lambda x: x[1])\n        edges = sorted(edges, key=lambda x: x[0])\n        edges = sorted(edges, key=lambda x: x[1])\n        edges = sorted(edges, key=lambda x: x[0])\n        edges = sorted(edges, key=lambda x:"
    },
    {
        "number": 1520,
        "title": "Maximum Number of Non-Overlapping Substrings",
        "difficulty": 2,
        "answer": "        n = len(s)\n        if n == 0:\n            return []\n        if n == 1:\n            return [s]\n        dp = [[0] * (n + 1) for _ in range(n + 1)]\n        for i in range(1, n + 1):\n            for j in range(i, n + 1):\n                if s[i - 1] == s[j - 1]:\n                    dp[i][j] = dp[i - 1][j - 1] + 1\n                else:\n                    dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])\n        return [s[i:j] for i, j in zip(range(1, n + 1), range(2, n + 1)) if dp[i][j] == dp[i - 1][j - 1] + 1]\n"
    },
    {
        "number": 1521,
        "title": "Find a Value of a Mysterious Function Closest to Target",
        "difficulty": 2,
        "answer": "        if len(arr) == 1:\n            return arr[0]\n        if len(arr) == 2:\n            return min(arr[0], arr[1])\n        if len(arr) == 3:\n            return min(arr[0], min(arr[1], arr[2]))\n        if len(arr) == 4:\n            return min(arr[0], min(arr[1], min(arr[2], arr[3])))\n        if len(arr) == 5:\n            return min(arr[0], min(arr[1], min(arr[2], min(arr[3], arr[4]))))\n        if len(arr) == 6:\n            return min(arr[0], min(arr[1], min(arr[2], min(arr[3], min(arr[4], arr[5]))))\n        if len(arr) == 7:\n            return min(arr[0], min(arr[1], min(arr[2], min(arr[3], min(arr[4], min(arr[5], arr[6]))))))"
    },
    {
        "number": 1523,
        "title": "Count Odd Numbers in an Interval Range",
        "difficulty": 0,
        "answer": "        return sum(1 for i in range(low, high + 1) if i % 2 == 1)"
    },
    {
        "number": 1524,
        "title": "Number of Sub-arrays With Odd Sum",
        "difficulty": 1,
        "answer": "        if not arr:\n            return 0\n        if len(arr) == 1:\n            return 1\n        if len(arr) == 2:\n            return 1 if arr[0] % 2 else 0\n        if len(arr) == 3:\n            return 1 if arr[0] % 2 else 0 if arr[1] % 2 else 0 if arr[2] % 2 else 0\n        if len(arr) == 4:\n            return 1 if arr[0] % 2 else 0 if arr[1] % 2 else 0 if arr[2] % 2 else 0 if arr[3] % 2 else 0\n        if len(arr) == 5:\n            return 1 if arr[0] % 2 else 0 if arr[1] % 2 else 0 if arr[2] % 2 else 0 if arr[3] % 2 else 0 if arr[4] % 2 else 0\n        if len(arr) == 6:\n            return 1 if arr[0] % 2 else 0 if arr[1] % 2 else 0 if arr[2] % 2 else 0 if arr[3] % 2 else 0 if arr[4"
    },
    {
        "number": 1525,
        "title": "Number of Good Ways to Split a String",
        "difficulty": 1,
        "answer": "        if not s:\n            return 0\n        if len(s) == 1:\n            return 1\n        if len(s) == 2:\n            return 1 if s[0] == s[1] else 0\n        if len(s) == 3:\n            return 1 if s[0] == s[1] and s[1] == s[2] else 0\n        if len(s) == 4:\n            return 1 if s[0] == s[1] and s[1] == s[2] and s[2] == s[3] else 0\n        if len(s) == 5:\n            return 1 if s[0] == s[1] and s[1] == s[2] and s[2] == s[3] and s[3] == s[4] else 0\n        if len(s) == 6:\n            return 1 if s[0] == s[1] and s[1] == s[2] and s[2] == s[3] and s[3] == s[4] and s[4] == s[5"
    },
    {
        "number": 1526,
        "title": "Minimum Number of Increments on Subarrays to Form a Target Array",
        "difficulty": 2,
        "answer": "        # https://leetcode.com/problems/minimum-number-operations-to-form-target/discuss/\n        # https://leetcode.com/problems/minimum-number-operations-to-form-target/discuss/\n        # https://leetcode.com/problems/minimum-number-operations-to-form-target/discuss/\n        # https://leetcode.com/problems/minimum-number-operations-to-form-target/discuss/\n        # https://leetcode.com/problems/minimum-number-operations-to-form-target/discuss/\n        # https://leetcode.com/problems/minimum-number-operations-to-form-target/discuss/\n        # https://leetcode.com/problems/minimum-number-operations-to-form-target/discuss/\n        # https://leetcode.com/problems/minimum-number-operations-to-form-target/discuss/\n        # https://leetcode.com/"
    },
    {
        "number": 1528,
        "title": "Shuffle String",
        "difficulty": 0,
        "answer": "        if not indices:\n            return s\n        if len(indices) == 1:\n            return s[indices[0]:]\n        if len(indices) == 2:\n            return s[indices[0]:indices[1]] + s[indices[1]:]\n        if len(indices) == 3:\n            return s[indices[0]:indices[1]] + s[indices[1]:indices[2]] + s[indices[2]:]\n        if len(indices) == 4:\n            return s[indices[0]:indices[1]] + s[indices[1]:indices[2]] + s[indices[2]:indices[3]] + s[indices[3]:]\n        if len(indices) == 5:\n            return s[indices[0]:indices[1]] + s[indices[1]:indices[2]] + s[indices[2]:indices[3]] + s[indices[3]:indices[4]] + s[indices[4]:]\n"
    },
    {
        "number": 1529,
        "title": "Minimum Suffix Flips",
        "difficulty": 1,
        "answer": "        n = len(target)\n        s = [0] * n\n        for i in range(n):\n            if target[i] == '1':\n                s[i] = 1\n            else:\n                s[i] = 0\n        return self.flips(s, n)"
    },
    {
        "number": 1530,
        "title": "Number of Good Leaf Nodes Pairs",
        "difficulty": 1,
        "answer": "        if not root:\n            return 0\n        if not root.left and not root.right:\n            return 1\n        return self.dfs(root, distance)"
    },
    {
        "number": 1531,
        "title": "String Compression II",
        "difficulty": 2,
        "answer": "        # https://leetcode.com/problems/minimum-length-of-an-optimal-run-length-encoding/discuss/107789/Java-C-solution-with-explanation\n        # https://leetcode.com/problems/minimum-length-of-an-optimal-run-length-encoding/discuss/107789/Java-C-solution-with-explanation\n        # https://leetcode.com/problems/minimum-length-of-an-optimal-run-length-encoding/discuss/107789/Java-C-solution-with-explanation\n        # https://leetcode.com/problems/minimum-length-of-an-optimal-run-length-encoding/discuss/107789/Java-C-solution-with-explanation\n        # https://leetcode.com/problems/minimum-length-of-an-optimal-run-length-encoding/discuss/107789/Java-C-solution-with"
    },
    {
        "number": 1534,
        "title": "Count Good Triplets",
        "difficulty": 0,
        "answer": ""
    },
    {
        "number": 1535,
        "title": "Find the Winner of an Array Game",
        "difficulty": 1,
        "answer": "        if len(arr) < 2:\n            return -1\n        if len(arr) == 2:\n            return max(arr)\n        if len(arr) == 3:\n            return max(arr) if arr[0] > arr[1] else min(arr)\n        if len(arr) == 4:\n            return max(arr) if arr[0] > arr[1] else min(arr) if arr[2] > arr[1] else max(arr)\n        if len(arr) == 5:\n            return max(arr) if arr[0] > arr[1] else min(arr) if arr[2] > arr[1] else max(arr) if arr[3] > arr[1] else min(arr)\n        if len(arr) == 6:\n            return max(arr) if arr[0] > arr[1] else min(arr) if arr[2] > arr[1] else max(arr) if arr[3] > arr[1] else min(arr) if arr[4] > arr[1] else max(arr)\n"
    },
    {
        "number": 1536,
        "title": "Minimum Swaps to Arrange a Binary Grid",
        "difficulty": 1,
        "answer": "        n = len(grid)\n        if n == 1:\n            return 0\n        if n == 2:\n            return 1\n        if n == 3:\n            return 2\n        if n == 4:\n            return 3\n        if n == 5:\n            return 4\n        if n == 6:\n            return 5\n        if n == 7:\n            return 6\n        if n == 8:\n            return 7\n        if n == 9:\n            return 8\n        if n == 10:\n            return 9\n        if n == 11:\n            return 10\n        if n == 12:\n            return 11\n        if n == 13:\n            return 12\n        if n == 14:\n            return 13\n        if n == 15:\n            return 14\n        if n == 16:\n            return 15\n        if n == 17:\n            return 16\n        if n == 18:\n            return 17\n        if n == 19:\n            return 18\n        if n == 20:\n            return 19\n        if n == 21:\n            return 20\n        if n == 22:\n            return 21\n"
    },
    {
        "number": 1537,
        "title": "Get the Maximum Score",
        "difficulty": 2,
        "answer": "        nums1_len = len(nums1)\n        nums2_len = len(nums2)\n        if nums1_len == 0 or nums2_len == 0:\n            return 0\n        if nums1_len == 1 or nums2_len == 1:\n            return max(nums1[0], nums2[0])\n        nums1_sum = sum(nums1)\n        nums2_sum = sum(nums2)\n        if nums1_sum == nums2_sum:\n            return nums1_sum\n        if nums1_sum > nums2_sum:\n            return self.maxSum(nums2, nums1)\n        if nums1_sum < nums2_sum:\n            return self.maxSum(nums1, nums2)\n        return max(self.maxSum(nums1, nums2[:nums1_len]), self.maxSum(nums1[nums1_len:], nums2))"
    },
    {
        "number": 1539,
        "title": "Kth Missing Positive Number",
        "difficulty": 0,
        "answer": "        if not arr:\n            return 0\n        if k == 1:\n            return arr[0]\n        if k == 2:\n            return arr[1] - arr[0]\n        if k == 3:\n            return arr[2] - arr[1]\n        if k == 4:\n            return arr[3] - arr[2]\n        if k == 5:\n            return arr[4] - arr[3]\n        if k == 6:\n            return arr[5] - arr[4]\n        if k == 7:\n            return arr[6] - arr[5]\n        if k == 8:\n            return arr[7] - arr[6]\n        if k == 9:\n            return arr[8] - arr[7]\n        if k == 10:\n            return arr[9] - arr[8]\n        if k == 11:\n            return arr[10] - arr[9]\n        if k == 12:\n            return arr[11] - arr[10]\n        if k == 13:\n            return arr[12] - arr[11"
    },
    {
        "number": 1540,
        "title": "Can Convert String in K Moves",
        "difficulty": 1,
        "answer": "        if len(s) > len(t):\n            return False\n        if len(s) == len(t):\n            return True\n        if len(s) < len(t):\n            return False\n        if len(s) == 1:\n            return True\n        if len(s) == 2:\n            return True\n        if len(s) == 3:\n            return True\n        if len(s) == 4:\n            return True\n        if len(s) == 5:\n            return True\n        if len(s) == 6:\n            return True\n        if len(s) == 7:\n            return True\n        if len(s) == 8:\n            return True\n        if len(s) == 9:\n            return True\n        if len(s) == 10:\n            return True\n        if len(s) == 11:\n            return True\n        if len(s) == 12:\n            return True\n        if len(s) == 13:\n            return True\n        if len(s) == 14:\n            return True\n        if len(s)"
    },
    {
        "number": 1541,
        "title": "Minimum Insertions to Balance a Parentheses String",
        "difficulty": 1,
        "answer": "        stack = []\n        for c in s:\n            if c == '(':\n                stack.append(c)\n            elif c == ')':\n                if len(stack) == 0:\n                    return 0\n                elif stack[-1] == '(':\n                    stack.pop()\n                else:\n                    return len(stack) + 1\n        return len(stack)"
    },
    {
        "number": 1542,
        "title": "Find Longest Awesome Substring",
        "difficulty": 2,
        "answer": "        if not s:\n            return 0\n        max_len = 0\n        for i in range(1, len(s)):\n            if self.isAwesome(s[:i]):\n                max_len = max(max_len, i)\n        return max_len"
    },
    {
        "number": 1544,
        "title": "Make The String Great",
        "difficulty": 0,
        "answer": "        if not s:\n            return s\n        if len(s) == 1:\n            return s\n        if len(s) == 2:\n            return s.upper()\n        if len(s) == 3:\n            return s.lower()\n        if len(s) == 4:\n            return s.upper()\n        if len(s) == 5:\n            return s.lower()\n        if len(s) == 6:\n            return s.upper()\n        if len(s) == 7:\n            return s.lower()\n        if len(s) == 8:\n            return s.upper()\n        if len(s) == 9:\n            return s.lower()\n        if len(s) == 10:\n            return s.upper()\n        if len(s) == 11:\n            return s.lower()\n        if len(s) == 12:\n            return s.upper()\n        if len(s) == 13:\n            return s.lower()\n        if len(s) == 14:\n            return s.upper()\n        if len(s"
    },
    {
        "number": 1545,
        "title": "Find Kth Bit in Nth Binary String",
        "difficulty": 1,
        "answer": "        if n == 0:\n            return \"0\"\n        if n == 1:\n            return \"1\"\n        if n == 2:\n            return \"0\"\n        if n == 3:\n            return \"1\"\n        if n == 4:\n            return \"0\"\n        if n == 5:\n            return \"1\"\n        if n == 6:\n            return \"0\"\n        if n == 7:\n            return \"1\"\n        if n == 8:\n            return \"0\"\n        if n == 9:\n            return \"1\"\n        if n == 10:\n            return \"0\"\n        if n == 11:\n            return \"1\"\n        if n == 12:\n            return \"0\"\n        if n == 13:\n            return \"1\"\n        if n == 14:\n            return \"0\"\n        if n == 15:\n            return \"1\"\n        if n == 16:\n            return \"0\"\n        if n == 17:\n            return \"1\"\n        if n == 18:\n            return \"0\"\n        if n"
    },
    {
        "number": 1546,
        "title": "Maximum Number of Non-Overlapping Subarrays With Sum Equals Target",
        "difficulty": 1,
        "answer": "        n = len(nums)\n        if n == 0:\n            return 0\n        if n == 1:\n            return 1\n        if n == 2:\n            return 1 if nums[0] == nums[1] else 0\n        if n == 3:\n            return 1 if nums[0] == nums[1] and nums[1] == nums[2] else 0\n        if n == 4:\n            return 1 if nums[0] == nums[1] and nums[1] == nums[2] and nums[2] == nums[3] else 0\n        if n == 5:\n            return 1 if nums[0] == nums[1] and nums[1] == nums[2] and nums[2] == nums[3] and nums[3] == nums[4] else 0\n        if n == 6:\n            return 1 if nums[0] == nums[1] and nums[1] == nums[2] and nums[2] == nums[3] and"
    },
    {
        "number": 1547,
        "title": "Minimum Cost to Cut a Stick",
        "difficulty": 2,
        "answer": "        if n <= 1:\n            return 0\n        if n == 2:\n            return cuts[0] + cuts[1]\n        if n == 3:\n            return cuts[0] + cuts[1] + cuts[2]\n        if n == 4:\n            return cuts[0] + cuts[1] + cuts[2] + cuts[3]\n        if n == 5:\n            return cuts[0] + cuts[1] + cuts[2] + cuts[3] + cuts[4]\n        if n == 6:\n            return cuts[0] + cuts[1] + cuts[2] + cuts[3] + cuts[4] + cuts[5]\n        if n == 7:\n            return cuts[0] + cuts[1] + cuts[2] + cuts[3] + cuts[4] + cuts[5] + cuts[6]\n        if n == 8:\n            return cuts[0] + cuts[1] + cuts[2] + cuts[3] + cuts[4] + cuts[5] + cuts[6] + cuts[7]\n        "
    },
    {
        "number": 1550,
        "title": "Three Consecutive Odds",
        "difficulty": 0,
        "answer": "        odd_count = 0\n        for i in arr:\n            if i % 2 == 1:\n                odd_count += 1\n            else:\n                odd_count = 0\n            if odd_count == 3:\n                return True\n        return False\n"
    },
    {
        "number": 1551,
        "title": "Minimum Operations to Make Array Equal",
        "difficulty": 1,
        "answer": "        if n == 1:\n            return 0\n        if n == 2:\n            return 1\n        if n == 3:\n            return 2\n        if n == 4:\n            return 3\n        if n == 5:\n            return 4\n        if n == 6:\n            return 5\n        if n == 7:\n            return 6\n        if n == 8:\n            return 7\n        if n == 9:\n            return 8\n        if n == 10:\n            return 9\n        if n == 11:\n            return 10\n        if n == 12:\n            return 11\n        if n == 13:\n            return 12\n        if n == 14:\n            return 13\n        if n == 15:\n            return 14\n        if n == 16:\n            return 15\n        if n == 17:\n            return 16\n        if n == 18:\n            return 17\n        if n == 19:\n            return 18\n        if n == 20:\n            return 19\n        if n == 21:\n            return 20\n        if n == 22:\n            return 21\n        if n == 23:\n            "
    },
    {
        "number": 1552,
        "title": "Magnetic Force Between Two Balls",
        "difficulty": 1,
        "answer": "        if m == 0:\n            return 0\n        if m == 1:\n            return max(abs(position[0] - position[1]), abs(position[1] - position[2]))\n        if m == 2:\n            return max(abs(position[0] - position[1]), abs(position[1] - position[2]), abs(position[2] - position[3]))\n        if m == 3:\n            return max(abs(position[0] - position[1]), abs(position[1] - position[2]), abs(position[2] - position[3]), abs(position[3] - position[4]))\n        if m == 4:\n            return max(abs(position[0] - position[1]), abs(position[1] - position[2]), abs(position[2] - position[3]), abs(position[3] - position[4]), abs(position[4] - position[5]))\n        if m == 5:\n            return max(abs(position[0] - position[1]), abs(position[1] - position[2]),"
    },
    {
        "number": 1553,
        "title": "Minimum Number of Days to Eat N Oranges",
        "difficulty": 2,
        "answer": "        # https://leetcode.com/problems/minimum-number-of-days-to-eat-n-oranges/discuss/\n        # https://leetcode.com/problems/minimum-days-to-eat-n-oranges/discuss/\n        # https://leetcode.com/problems/minimum-days-to-eat-n-oranges-ii/discuss/\n        # https://leetcode.com/problems/minimum-days-to-eat-n-oranges-iii/discuss/\n        # https://leetcode.com/problems/minimum-days-to-eat-n-oranges-iv/discuss/\n        # https://leetcode.com/problems/minimum-days-to-eat-n-oranges-v/discuss/\n        # https://leetcode.com/problems/minimum-days-to-eat-n-oranges-vi/discuss/\n        # https://leetcode.com/problems/minimum-days-to-eat-n-oranges-"
    },
    {
        "number": 1556,
        "title": "Thousand Separator",
        "difficulty": 0,
        "answer": "        if n == 0:\n            return \"0\"\n        if n < 0:\n            return \"-\" + self.thousandSeparator(-n)\n        if n < 1000:\n            return str(n)\n        if n < 10000:\n            return \".\".join(str(n / 1000).split(\".\")[0:2])\n        if n < 100000:\n            return \".\".join(str(n / 10000).split(\".\")[0:3])\n        if n < 1000000:\n            return \".\".join(str(n / 100000).split(\".\")[0:4])\n        if n < 10000000:\n            return \".\".join(str(n / 1000000).split(\".\")[0:5])\n        if n < 100000000:\n            return \".\".join(str(n / 10000000).split(\".\")[0:6])\n        if n < 1000000000:\n            return \".\".join(str(n / 100000000).split(\".\")[0:7])\n        if n < 10000000000:\n            return \".\".join(str("
    },
    {
        "number": 1557,
        "title": "Minimum Number of Vertices to Reach All Nodes",
        "difficulty": 1,
        "answer": "        # Definition for a undirected graph node\n        class UndirectedGraphNode:\n            def __init__(self, x):\n                self.label = x\n                self.neighbors = []"
    },
    {
        "number": 1558,
        "title": "Minimum Numbers of Function Calls to Make Target Array",
        "difficulty": 1,
        "answer": "        n = len(nums)\n        if n == 0:\n            return 0\n        if n == 1:\n            return 1\n        if n == 2:\n            return 2\n        if n == 3:\n            return 3\n        if n == 4:\n            return 4\n        if n == 5:\n            return 5\n        if n == 6:\n            return 6\n        if n == 7:\n            return 7\n        if n == 8:\n            return 8\n        if n == 9:\n            return 9\n        if n == 10:\n            return 10\n        if n == 11:\n            return 11\n        if n == 12:\n            return 12\n        if n == 13:\n            return 13\n        if n == 14:\n            return 14\n        if n == 15:\n            return 15\n        if n == 16:\n            return 16\n        if n == 17:\n            return 17\n        if n == 18:\n            return 18\n        if n == 19:\n            return 19\n        if n == 20:\n            return 20\n        if n == 21:\n            return 21"
    },
    {
        "number": 1559,
        "title": "Detect Cycles in 2D Grid",
        "difficulty": 1,
        "answer": "        if not grid:\n            return False\n        m, n = len(grid), len(grid[0])\n        visited = [[False] * n for _ in range(m)]\n        for i in range(m):\n            for j in range(n):\n                if grid[i][j] == grid[i][j + 1]:\n                    return True\n                if grid[i][j] == grid[i + 1][j]:\n                    return True\n                if grid[i][j] == grid[i][j + 1]:\n                    return True\n                if grid[i][j] == grid[i + 1][j]:\n                    return True\n                if grid[i][j] == grid[i + 1][j + 1]:\n                    return True\n                if grid[i][j] == grid[i + 1][j + 2]:\n                    return True\n                if grid[i][j] == grid[i + 2][j]:\n                    return True\n                if grid[i][j] == grid[i + 2][j + 1]:\n                    return True\n                if grid[i][j"
    },
    {
        "number": 1560,
        "title": "Most Visited Sector in  a Circular Track",
        "difficulty": 0,
        "answer": "        if n <= 0:\n            return []\n        if n == 1:\n            return [1]\n        if n == 2:\n            return [1, 2]\n        if n == 3:\n            return [1, 2, 3]\n        if n == 4:\n            return [1, 2, 3, 4]\n        if n == 5:\n            return [1, 2, 3, 4, 5]\n        if n == 6:\n            return [1, 2, 3, 4, 5, 6]\n        if n == 7:\n            return [1, 2, 3, 4, 5, 6, 7]\n        if n == 8:\n            return [1, 2, 3, 4, 5, 6, 7, 8]\n        if n == 9:\n            return [1, 2, 3, 4, 5, 6, 7, 8, 9]\n        if n == 10:\n            return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n        if n == 11:\n            return [1, 2, 3, 4, 5"
    },
    {
        "number": 1561,
        "title": "Maximum Number of Coins You Can Get",
        "difficulty": 1,
        "answer": "        # pylint: disable=invalid-name\n        # pylint: disable=too-many-locals\n        # pylint: disable=too-many-branches\n        # pylint: disable=too-many-statements\n        # pylint: disable=too-many-nested-blocks\n        # pylint: disable=too-many-arguments\n        # pylint: disable=too-many-locals\n        # pylint: disable=too-many-statements\n        # pylint: disable=too-many-nested-blocks\n        # pylint: disable=too-many-arguments\n        # pylint: disable=too-many-locals\n        # pylint: disable=too-many-statements\n        # pylint: disable=too-many-nested-blocks\n        # pylint: disable=too-many-arguments\n        # pylint: disable=too-many-locals\n        # pylint: disable=too-many-statements\n        # pylint:"
    },
    {
        "number": 1562,
        "title": "Find Latest Group of Size M",
        "difficulty": 1,
        "answer": "        # https://leetcode.com/problems/find-latest-step/discuss/\n        # https://leetcode.com/problems/find-latest-step/discuss/\n        # https://leetcode.com/problems/find-latest-step/discuss/\n        # https://leetcode.com/problems/find-latest-step/discuss/\n        # https://leetcode.com/problems/find-latest-step/discuss/\n        # https://leetcode.com/problems/find-latest-step/discuss/\n        # https://leetcode.com/problems/find-latest-step/discuss/\n        # https://leetcode.com/problems/find-latest-step/discuss/\n        # https://leetcode.com/problems/find-latest-step/discuss/\n        # https://leetcode.com/problems/find-latest-step/discuss/\n        # https://leetcode.com/problems/find-latest-step/disc"
    },
    {
        "number": 1563,
        "title": "Stone Game V",
        "difficulty": 2,
        "answer": "        n = len(stoneValue)\n        if n == 1:\n            return stoneValue[0]\n        if n == 2:\n            return stoneValue[0] + stoneValue[1]\n        if n == 3:\n            return stoneValue[0] + stoneValue[1] + stoneValue[2]\n        if n == 4:\n            return stoneValue[0] + stoneValue[1] + stoneValue[2] + stoneValue[3]\n        if n == 5:\n            return stoneValue[0] + stoneValue[1] + stoneValue[2] + stoneValue[3] + stoneValue[4]\n        if n == 6:\n            return stoneValue[0] + stoneValue[1] + stoneValue[2] + stoneValue[3] + stoneValue[4] + stoneValue[5]\n        if n == 7:\n            return stoneValue[0] + stoneValue[1] + stoneValue[2] + stoneValue[3] + stoneValue[4] + stoneValue[5] + stoneValue[6]\n        if n == 8:\n            return stone"
    },
    {
        "number": 1566,
        "title": "Detect Pattern of Length M Repeated K or More Times",
        "difficulty": 0,
        "answer": "        if len(arr) < m:\n            return False\n        if m == 1:\n            return True\n        if m == 2:\n            return arr[0] == arr[1] and arr[1] == arr[2]\n        if m == 3:\n            return arr[0] == arr[1] and arr[1] == arr[2] and arr[2] == arr[3]\n        if m == 4:\n            return arr[0] == arr[1] and arr[1] == arr[2] and arr[2] == arr[3] and arr[3] == arr[4]\n        if m == 5:\n            return arr[0] == arr[1] and arr[1] == arr[2] and arr[2] == arr[3] and arr[3] == arr[4] and arr[4] == arr[5]\n        if m == 6:\n            return arr[0] == arr[1] and arr[1] == arr[2] and arr[2] == arr[3] and arr[3] == arr[4] and"
    },
    {
        "number": 1567,
        "title": "Maximum Length of Subarray With Positive Product",
        "difficulty": 1,
        "answer": "        n = len(nums)\n        if n == 0:\n            return 0\n        if n == 1:\n            return 1\n        if n == 2:\n            return 1 if nums[0] > 0 else 0\n        if n == 3:\n            return 1 if nums[0] > 0 and nums[1] > 0 else 0\n        if n == 4:\n            return 1 if nums[0] > 0 and nums[1] > 0 and nums[2] > 0 else 0\n        if n == 5:\n            return 1 if nums[0] > 0 and nums[1] > 0 and nums[2] > 0 and nums[3] > 0 else 0\n        if n == 6:\n            return 1 if nums[0] > 0 and nums[1] > 0 and nums[2] > 0 and nums[3] > 0 and nums[4] > 0 else 0\n        if n == 7:\n            return 1 if nums[0] > 0 and nums[1] > 0 and nums[2] > 0"
    },
    {
        "number": 1568,
        "title": "Minimum Number of Days to Disconnect Island",
        "difficulty": 2,
        "answer": "        m, n = len(grid), len(grid[0])\n        if m == 0 or n == 0:\n            return 0\n        grid = [[0 if grid[i][j] else 1 for j in range(n)] for i in range(m)]\n        grid = [grid[i] for i in range(m)]\n        grid = [[grid[i][j] for j in range(n)] for i in range(m)]\n        grid = [[grid[i][j] for j in range(n)] for i in range(m)]\n        grid = [[grid[i][j] for j in range(n)] for i in range(m)]\n        grid = [[grid[i][j] for j in range(n)] for i in range(m)]\n        grid = [[grid[i][j] for j in range(n)] for i in range(m)]\n        grid = [[grid[i][j] for j in range(n)] for i in range(m)]\n        grid = [[grid[i][j] for j in range(n)] for i in range(m)]"
    },
    {
        "number": 1569,
        "title": "Number of Ways to Reorder Array to Get Same BST",
        "difficulty": 2,
        "answer": "        n = len(nums)\n        if n == 1:\n            return 1\n        elif n == 2:\n            return 1\n        elif n == 3:\n            return 1\n        elif n == 4:\n            return 1\n        elif n == 5:\n            return 1\n        elif n == 6:\n            return 1\n        elif n == 7:\n            return 1\n        elif n == 8:\n            return 1\n        elif n == 9:\n            return 1\n        elif n == 10:\n            return 1\n        elif n == 11:\n            return 1\n        elif n == 12:\n            return 1\n        elif n == 13:\n            return 1\n        elif n == 14:\n            return 1\n        elif n == 15:\n            return 1\n        elif n == 16:\n            return 1\n        elif n == 17:\n            return 1\n        elif n == 18:\n            return 1\n        elif n == 19:\n            return 1\n        elif n == 20:\n            return 1\n        el"
    },
    {
        "number": 1572,
        "title": "Matrix Diagonal Sum",
        "difficulty": 0,
        "answer": "        # https://leetcode.com/problems/diagonal-sum/discuss/105586/Java-O(1)-space-and-O(n)-time-solution-with-explanation\n        # https://leetcode.com/problems/diagonal-sum/discuss/105586/Java-O(1)-space-and-O(n)-time-solution-with-explanation\n        # https://leetcode.com/problems/diagonal-sum/discuss/105586/Java-O(1)-space-and-O(n)-time-solution-with-explanation\n        # https://leetcode.com/problems/diagonal-sum/discuss/105586/Java-O(1)-space-and-O(n)-time-solution-with-explanation\n        # https://leetcode.com/problems/diagonal-sum/discuss/105586/Java-O(1)-space-and-O(n)-time-solution-with-explanation\n"
    },
    {
        "number": 1573,
        "title": "Number of Ways to Split a String",
        "difficulty": 1,
        "answer": "        if len(s) == 1:\n            return 1\n        if len(s) == 2:\n            return 1 if s[0] == '1' else 0\n        if len(s) == 3:\n            return 1 if s[0] == '1' and s[1] == '1' and s[2] == '1' else 0\n        if len(s) == 4:\n            return 1 if s[0] == '1' and s[1] == '1' and s[2] == '1' and s[3] == '1' else 0\n        if len(s) == 5:\n            return 1 if s[0] == '1' and s[1] == '1' and s[2] == '1' and s[3] == '1' and s[4] == '1' else 0\n        if len(s) == 6:\n            return 1 if s[0] == '1' and s[1] == '1' and s[2] == '1' and s[3] == '1' and s[4] =="
    },
    {
        "number": 1574,
        "title": "Shortest Subarray to be Removed to Make Array Sorted",
        "difficulty": 1,
        "answer": "        if len(arr) == 0:\n            return 0\n        if len(arr) == 1:\n            return 1\n        if len(arr) == 2:\n            return 1 if arr[0] < arr[1] else 0\n        if len(arr) == 3:\n            return 1 if arr[0] < arr[1] and arr[0] < arr[2] else 0\n        if len(arr) == 4:\n            return 1 if arr[0] < arr[1] and arr[1] < arr[2] and arr[2] < arr[3] else 0\n        if len(arr) == 5:\n            return 1 if arr[0] < arr[1] and arr[1] < arr[2] and arr[2] < arr[3] and arr[3] < arr[4] else 0\n        if len(arr) == 6:\n            return 1 if arr[0] < arr[1] and arr[1] < arr[2] and arr[2] < arr[3] and arr[3] < arr[4] and arr[4]"
    },
    {
        "number": 1575,
        "title": "Count All Possible Routes",
        "difficulty": 2,
        "answer": "        # https://leetcode.com/problems/count-routes/discuss/105500/Java-Solution-with-explanation-and-examples\n        # https://leetcode.com/problems/count-routes/discuss/105501/Java-Solution-with-explanation-and-examples\n        # https://leetcode.com/problems/count-routes/discuss/105502/Java-Solution-with-explanation-and-examples\n        # https://leetcode.com/problems/count-routes/discuss/105503/Java-Solution-with-explanation-and-examples\n        # https://leetcode.com/problems/count-routes/discuss/105504/Java-Solution-with-explanation-and-examples\n        # https://leetcode.com/problems/count-routes/discuss/105505/Java-Solution-with-explanation-and-examples\n        # https://"
    },
    {
        "number": 1576,
        "title": "Replace All ?\"s to Avoid Consecutive Repeating Characters",
        "difficulty": 0,
        "answer": "        if not s:\n            return \"\"\n        s = s.replace(\"?\", \"a\")\n        s = s.replace(\"?\", \"b\")\n        s = s.replace(\"?\", \"c\")\n        s = s.replace(\"?\", \"d\")\n        s = s.replace(\"?\", \"e\")\n        s = s.replace(\"?\", \"f\")\n        s = s.replace(\"?\", \"g\")\n        s = s.replace(\"?\", \"h\")\n        s = s.replace(\"?\", \"i\")\n        s = s.replace(\"?\", \"j\")\n        s = s.replace(\"?\", \"k\")\n        s = s.replace(\"?\", \"l\")\n        s = s.replace(\"?\", \"m\")\n        s = s.replace(\"?\", \"n\")\n        s = s.replace(\"?\", \"o\")\n        s = s.replace(\"?\", \"p\")\n        s = s.replace(\"?\", \"q\")\n        s = s.replace(\"?\", \"r\")\n        s = s.replace(\"?\", \"s\")\n        s = s.replace(\"?\", \"t\")\n"
    },
    {
        "number": 1577,
        "title": "Number of Ways Where Square of Number Is Equal to Product of Two Numbers",
        "difficulty": 1,
        "answer": "        # type 1\n        nums1_dict = {i: nums1[i] for i in range(len(nums1))}\n        nums2_dict = {i: nums2[i] for i in range(len(nums2))}\n        triplets = 0\n        for i in range(len(nums1)):\n            for j in range(i+1, len(nums1)):\n                k = j + 1\n                if nums1_dict[i] * nums2_dict[j] == nums2_dict[k] * nums1_dict[j]:\n                    triplets += 1\n        return triplets"
    },
    {
        "number": 1578,
        "title": "Minimum Time to Make Rope Colorful",
        "difficulty": 1,
        "answer": "        if len(colors) == 0:\n            return 0\n        if len(colors) == 1:\n            return neededTime[0]\n        if len(colors) == 2:\n            return neededTime[0] + neededTime[1]"
    },
    {
        "number": 1579,
        "title": "Remove Max Number of Edges to Keep Graph Fully Traversable",
        "difficulty": 2,
        "answer": "        # Edge type 1: Can be traversed by Alice only.\n        # Edge type 2: Can be traversed by Bob only.\n        # Edge type 3: Can be traversed by both Alice and Bob.\n        # Edge type 4: Can be traversed by both Alice and Bob.\n        # Edge type 5: Can be traversed by both Alice and Bob.\n        # Edge type 6: Can be traversed by both Alice and Bob.\n        # Edge type 7: Can be traversed by both Alice and Bob.\n        # Edge type 8: Can be traversed by both Alice and Bob.\n        # Edge type 9: Can be traversed by both Alice and Bob.\n        # Edge type 10: Can be traversed by both Alice and Bob.\n        # Edge type 11: Can be traversed by both Alice and Bob.\n        # Edge type 12: Can be traversed by both Alice and Bob.\n        # Edge type 13: Can be traversed by both Alice and Bob.\n        # Edge type 14: Can be traversed by both Alice and Bob.\n        # Edge type 15: Can be traversed by both Alice and Bob."
    },
    {
        "number": 1582,
        "title": "Special Positions in a Binary Matrix",
        "difficulty": 0,
        "answer": "        m = len(mat)\n        n = len(mat[0])\n        count = 0\n        for i in range(m):\n            for j in range(n):\n                if mat[i][j] == 1:\n                    count += 1\n                    if i > 0 and mat[i - 1][j] == 0:\n                        count += 1\n                    if j > 0 and mat[i][j - 1] == 0:\n                        count += 1\n                    if i < m - 1 and mat[i + 1][j] == 0:\n                        count += 1\n                    if j < n - 1 and mat[i][j + 1] == 0:\n                        count += 1\n        return count\n"
    },
    {
        "number": 1583,
        "title": "Count Unhappy Friends",
        "difficulty": 1,
        "answer": "        unhappy = 0\n        for i in range(n):\n            for j in range(i+1, n):\n                if i in preferences[j]:\n                    if j in preferences[i]:\n                        if i < j:\n                            unhappy += 1\n                    else:\n                        unhappy += 1\n        return unhappy"
    },
    {
        "number": 1584,
        "title": "Min Cost to Connect All Points",
        "difficulty": 1,
        "answer": "        # https://leetcode.com/problems/minimum-cost-to-connect-all-points/discuss/\n        # https://leetcode.com/problems/minimum-cost-to-connect-all-points/discuss/\n        # https://leetcode.com/problems/minimum-cost-to-connect-all-points/discuss/\n        # https://leetcode.com/problems/minimum-cost-to-connect-all-points/discuss/\n        # https://leetcode.com/problems/minimum-cost-to-connect-all-points/discuss/\n        # https://leetcode.com/problems/minimum-cost-to-connect-all-points/discuss/\n        # https://leetcode.com/problems/minimum-cost-to-connect-all-points/discuss/\n        # https://leetcode.com/problems/minimum-cost-to-connect-all-points/discuss/\n        # https://leetcode.com/problems/minimum-cost-to"
    },
    {
        "number": 1585,
        "title": "Check If String Is Transformable With Substring Sort Operations",
        "difficulty": 2,
        "answer": "        s_len = len(s)\n        t_len = len(t)\n        if s_len!= t_len:\n            return False\n        if not s:\n            return True\n        if not t:\n            return False\n        if s[0]!= t[0]:\n            return False\n        if s[-1]!= t[-1]:\n            return False\n        if s[0] == t[-1]:\n            return True\n        if s[-1] == t[0]:\n            return True\n        s_sorted = sorted(s)\n        t_sorted = sorted(t)\n        if s_sorted == t_sorted:\n            return True\n        return False\n"
    },
    {
        "number": 1588,
        "title": "Sum of All Odd Length Subarrays",
        "difficulty": 0,
        "answer": "        if not arr:\n            return 0\n        odd_length_subarrays = []\n        for i in range(1, len(arr)):\n            if len(arr) - i >= 2:\n                odd_length_subarrays.append(sum(arr[i:len(arr) - i + 1]))\n        return sum(odd_length_subarrays)\n"
    },
    {
        "number": 1589,
        "title": "Maximum Sum Obtained of Any Permutation",
        "difficulty": 1,
        "answer": "        n = len(nums)\n        if n == 0:\n            return 0\n        if n == 1:\n            return nums[0]\n        if n == 2:\n            return max(nums[0] + nums[1], nums[1] + nums[0])\n        if n == 3:\n            return max(nums[0] + nums[1] + nums[2], nums[1] + nums[2] + nums[0], nums[2] + nums[1] + nums[0])\n        if n == 4:\n            return max(nums[0] + nums[1] + nums[2] + nums[3], nums[1] + nums[2] + nums[3] + nums[0], nums[2] + nums[3] + nums[1] + nums[0], nums[3] + nums[2] + nums[1] + nums[0])\n        if n == 5:\n            return max(nums["
    },
    {
        "number": 1590,
        "title": "Make Sum Divisible by P",
        "difficulty": 1,
        "answer": "        if not nums:\n            return 0\n        if len(nums) == 1:\n            return 1\n        if len(nums) == 2:\n            return 1 if nums[0] % p == 0 else -1\n        if len(nums) == 3:\n            return 1 if nums[0] % p == 0 and nums[1] % p == 0 and nums[2] % p == 0 else -1\n        if len(nums) == 4:\n            return 1 if nums[0] % p == 0 and nums[1] % p == 0 and nums[2] % p == 0 and nums[3] % p == 0 else -1\n        if len(nums) == 5:\n            return 1 if nums[0] % p == 0 and nums[1] % p == 0 and nums[2] % p == 0 and nums[3] % p == 0 and nums[4] % p == 0 else -1\n        if len(nums) == 6:\n            return 1 if nums[0] % p"
    },
    {
        "number": 1591,
        "title": "Strange Printer II",
        "difficulty": 2,
        "answer": "        if not targetGrid:\n            return True\n        if len(targetGrid)!= len(targetGrid[0]):\n            return False\n        if len(targetGrid[0])!= len(targetGrid):\n            return False\n        if len(targetGrid)!= len(targetGrid[0]):\n            return False\n        if len(targetGrid)!= len(targetGrid[0]):\n            return False\n        if len(targetGrid)!= len(targetGrid[0]):\n            return False\n        if len(targetGrid)!= len(targetGrid[0]):\n            return False\n        if len(targetGrid)!= len(targetGrid[0]):\n            return False\n        if len(targetGrid)!= len(targetGrid[0]):\n            return False\n        if len(targetGrid)!= len(targetGrid[0]):\n            return False\n        if len(targetGrid)!= len(targetGrid[0]):\n            return False\n        if len(targetGrid)!= len(targetGrid[0]):\n            return False\n        if len(targetGrid)!= len"
    },
    {
        "number": 1592,
        "title": "Rearrange Spaces Between Words",
        "difficulty": 0,
        "answer": "        text = text.replace(\" \", \"\")\n        words = text.split()\n        if len(words) == 1:\n            return text\n        space_count = 0\n        for i in range(len(words) - 1):\n            space_count += 1\n            if space_count == len(words) - i:\n                break\n        if space_count == len(words) - 1:\n            return text\n        space_count = 0\n        for i in range(len(words) - 1):\n            space_count += 1\n            if space_count == len(words) - i - 1:\n                break\n        if space_count == len(words) - 1:\n            return text\n        space_count = 0\n        for i in range(len(words) - 1):\n            space_count += 1\n            if space_count == len(words) - i - 2:\n                break\n        if space_count == len(words) - 1:\n            return text\n        space_count = 0\n        for i in range(len(words) - 1):\n            space_"
    },
    {
        "number": 1593,
        "title": "Split a String Into the Max Number of Unique Substrings",
        "difficulty": 1,
        "answer": "        n = len(s)\n        dp = [0] * (n + 1)\n        for i in range(1, n + 1):\n            dp[i] = dp[i - 1]\n            if i < n:\n                dp[i] = max(dp[i], dp[i - 1] + 1)\n                if s[i - 1] == s[i]:\n                    dp[i] = max(dp[i], dp[i - 1] + 1)\n        return dp[-1]"
    },
    {
        "number": 1594,
        "title": "Maximum Non Negative Product in a Matrix",
        "difficulty": 1,
        "answer": "        m, n = len(grid), len(grid[0])\n        dp = [[0] * n for _ in range(m)]\n        dp[0][0] = 1\n        for i in range(1, m):\n            dp[i][0] = dp[i - 1][0]\n        for j in range(1, n):\n            dp[0][j] = dp[0][j - 1]\n        for i in range(1, m):\n            for j in range(1, n):\n                dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])\n                dp[i][j] = max(dp[i][j], dp[i - 1][j - 1] * grid[i - 1][j - 1])\n                dp[i][j] = max(dp[i][j], dp[i - 1][j - 1] * grid[i - 1][j])\n                dp[i][j] = max(dp[i][j], dp[i - 1][j"
    },
    {
        "number": 1595,
        "title": "Minimum Cost to Connect Two Groups of Points",
        "difficulty": 2,
        "answer": "        # https://leetcode.com/problems/minimum-cost-to-connect-two-groups/discuss/\n        # https://leetcode.com/problems/minimum-cost-to-connect-two-groups-ii/discuss/\n        # https://leetcode.com/problems/minimum-cost-to-connect-two-groups-iii/discuss/\n        # https://leetcode.com/problems/minimum-cost-to-connect-two-groups-iv/discuss/\n        # https://leetcode.com/problems/minimum-cost-to-connect-two-groups-v/discuss/\n        # https://leetcode.com/problems/minimum-cost-to-connect-two-groups-vi/discuss/\n        # https://leetcode.com/problems/minimum-cost-to-connect-two-groups-vii/discuss/\n        # https://leetcode.com/problems/minimum-cost-to-connect-two-groups-viii/discuss/\n        #"
    },
    {
        "number": 1598,
        "title": "Crawler Log Folder",
        "difficulty": 0,
        "answer": "        logs = [log.strip() for log in logs]\n        logs.append(\"..\")\n        logs.append(\".\")\n        logs.append(\"..\")\n        logs.append(\".\")\n        logs.append(\".\")\n        logs.append(\".\")\n        logs.append(\".\")\n        logs.append(\".\")\n        logs.append(\".\")\n        logs.append(\".\")\n        logs.append(\".\")\n        logs.append(\".\")\n        logs.append(\".\")\n        logs.append(\".\")\n        logs.append(\".\")\n        logs.append(\".\")\n        logs.append(\".\")\n        logs.append(\".\")\n        logs.append(\".\")\n        logs.append(\".\")\n        logs.append(\".\")\n        logs.append(\".\")\n        logs.append(\".\")\n        logs.append(\".\")\n        logs.append(\".\")\n        logs.append(\".\")\n        logs.append(\".\")\n        logs.append(\".\")\n        logs.append(\".\")\n        "
    },
    {
        "number": 1599,
        "title": "Maximum Profit of Operating a Centennial Wheel",
        "difficulty": 1,
        "answer": "        # https://leetcode.com/problems/minimum-operations-to-maximize-profit/discuss/\n        # https://leetcode.com/problems/minimum-operations-to-maximize-profit/discuss/\n        # https://leetcode.com/problems/minimum-operations-to-maximize-profit/discuss/\n        # https://leetcode.com/problems/minimum-operations-to-maximize-profit/discuss/\n        # https://leetcode.com/problems/minimum-operations-to-maximize-profit/discuss/\n        # https://leetcode.com/problems/minimum-operations-to-maximize-profit/discuss/\n        # https://leetcode.com/problems/minimum-operations-to-maximize-profit/discuss/\n        # https://leetcode.com/problems/minimum-operations-to-maximize-profit/discuss/\n        # https://leetcode.com/problems/minimum-operations-"
    },
    {
        "number": 1600,
        "title": "Throne Inheritance",
        "difficulty": 1,
        "answer": "        if len(parentName) == 0:\n            return [childName]\n        if len(parentName) == 1:\n            return [childName]\n        if len(parentName) == 2:\n            return [childName]\n        if len(parentName) == 3:\n            return [childName]\n        if len(parentName) == 4:\n            return [childName]\n        if len(parentName) == 5:\n            return [childName]\n        if len(parentName) == 6:\n            return [childName]\n        if len(parentName) == 7:\n            return [childName]\n        if len(parentName) == 8:\n            return [childName]\n        if len(parentName) == 9:\n            return [childName]\n        if len(parentName) == 10:\n            return [childName]\n        if len(parentName) == 11:\n            return [childName]\n        if len(parentName) == 12:\n            return [childName]\n        if len(parentName) == 13:\n            return [childName"
    },
    {
        "number": 1601,
        "title": "Maximum Number of Achievable Transfer Requests",
        "difficulty": 2,
        "answer": "        from collections import defaultdict\n        from itertools import permutations\n        from math import log\n        from collections import Counter\n        from collections import defaultdict\n        from collections import Counter\n        from collections import defaultdict\n        from collections import Counter\n        from collections import defaultdict\n        from collections import Counter\n        from collections import defaultdict\n        from collections import Counter\n        from collections import defaultdict\n        from collections import Counter\n        from collections import defaultdict\n        from collections import Counter\n        from collections import defaultdict\n        from collections import Counter\n        from collections import defaultdict\n        from collections import Counter\n        from collections import defaultdict\n        from collections import Counter\n        from collections import defaultdict\n        from collections import Counter\n        from collections import defaultdict\n        from collections import Counter\n        from collections import defaultdict\n        from collections import Counter\n        from collections import defaultdict\n        from collections import Counter\n        from collections import defaultdict\n        from collections import Counter\n        from collections import defaultdict\n        from collections import Counter\n        from collections import defaultdict\n        from collections import Counter\n        from collections import defaultdict\n        from collections import Counter\n        "
    },
    {
        "number": 1603,
        "title": "Design Parking System",
        "difficulty": 0,
        "answer": "        pass"
    },
    {
        "number": 1604,
        "title": "Alert Using Same Key-Card Three or More Times in a One Hour Period",
        "difficulty": 1,
        "answer": "        # TODO: refactor\n        # TODO: refactor\n        # TODO: refactor\n        # TODO: refactor\n        # TODO: refactor\n        # TODO: refactor\n        # TODO: refactor\n        # TODO: refactor\n        # TODO: refactor\n        # TODO: refactor\n        # TODO: refactor\n        # TODO: refactor\n        # TODO: refactor\n        # TODO: refactor\n        # TODO: refactor\n        # TODO: refactor\n        # TODO: refactor\n        # TODO: refactor\n        # TODO: refactor\n        # TODO: refactor\n        # TODO: refactor\n        # TODO: refactor\n        # TODO: refactor\n        # TODO: refactor\n        # TODO: refactor\n        # TODO: refactor\n        # TODO: refactor\n        # TODO: refactor\n        # TODO: refactor\n        # TODO: refactor\n        # TODO: refactor\n        #"
    },
    {
        "number": 1605,
        "title": "Find Valid Matrix Given Row and Column Sums",
        "difficulty": 1,
        "answer": "        rowSum = sorted(rowSum)\n        colSum = sorted(colSum)\n        rowSum.append(0)\n        colSum.append(0)\n        rowSum.append(0)\n        colSum.append(0)\n        rowSum.append(0)\n        colSum.append(0)\n        rowSum.append(0)\n        colSum.append(0)\n        rowSum.append(0)\n        colSum.append(0)\n        rowSum.append(0)\n        colSum.append(0)\n        rowSum.append(0)\n        colSum.append(0)\n        rowSum.append(0)\n        colSum.append(0)\n        rowSum.append(0)\n        colSum.append(0)\n        rowSum.append(0)\n        colSum.append(0)\n        rowSum.append(0)\n        colSum.append(0)\n        rowSum.append(0)\n        colSum.append(0)\n        rowSum.append(0)\n        colSum.append"
    },
    {
        "number": 1606,
        "title": "Find Servers That Handled Most Number of Requests",
        "difficulty": 2,
        "answer": "        # https://leetcode.com/problems/busiest-servers/discuss/\n        # https://leetcode.com/problems/busiest-servers/discuss/\n        # https://leetcode.com/problems/busiest-servers/discuss/\n        # https://leetcode.com/problems/busiest-servers/discuss/\n        # https://leetcode.com/problems/busiest-servers/discuss/\n        # https://leetcode.com/problems/busiest-servers/discuss/\n        # https://leetcode.com/problems/busiest-servers/discuss/\n        # https://leetcode.com/problems/busiest-servers/discuss/\n        # https://leetcode.com/problems/busiest-servers/discuss/\n        # https://leetcode.com/problems/busiest-servers/discuss/\n        # https://leetcode.com/problems/busiest-servers/disc"
    },
    {
        "number": 1608,
        "title": "Special Array With X Elements Greater Than or Equal X",
        "difficulty": 0,
        "answer": "        n = len(nums)\n        if n == 0:\n            return -1\n        if n == 1:\n            return nums[0]\n        if n == 2:\n            return max(nums)\n        if n == 3:\n            return max(nums)\n        if n == 4:\n            return max(nums)\n        if n == 5:\n            return max(nums)\n        if n == 6:\n            return max(nums)\n        if n == 7:\n            return max(nums)\n        if n == 8:\n            return max(nums)\n        if n == 9:\n            return max(nums)\n        if n == 10:\n            return max(nums)\n        if n == 11:\n            return max(nums)\n        if n == 12:\n            return max(nums)\n        if n == 13:\n            return max(nums)\n        if n == 14:\n            return max(nums)\n        if n == 15:\n            return max(nums)\n        if n =="
    },
    {
        "number": 1609,
        "title": "Even Odd Tree",
        "difficulty": 1,
        "answer": "        if root is None:\n            return True\n        return self.isEvenOddTreeHelper(root)"
    },
    {
        "number": 1610,
        "title": "Maximum Number of Visible Points",
        "difficulty": 2,
        "answer": "        if not points:\n            return 0\n        if not location:\n            return 0\n        if not angle:\n            return 0\n        points = sorted(points, key=lambda x: x[0])\n        points = sorted(points, key=lambda x: x[1])\n        points = sorted(points, key=lambda x: x[0])\n        points = sorted(points, key=lambda x: x[1])\n        points = sorted(points, key=lambda x: x[0])\n        points = sorted(points, key=lambda x: x[1])\n        points = sorted(points, key=lambda x: x[0])\n        points = sorted(points, key=lambda x: x[1])\n        points = sorted(points, key=lambda x: x[0])\n        points = sorted(points, key=lambda x: x[1])\n        points = sorted(points, key=lambda x: x[0])\n        points = sorted(points, key=lambda x: x[1])\n        points = sorted(points, key=lambda x: x[0])"
    },
    {
        "number": 1611,
        "title": "Minimum One Bit Operations to Make Integers Zero",
        "difficulty": 2,
        "answer": "        if n == 0:\n            return 0\n        if n == 1:\n            return 1\n        if n == 2:\n            return 2\n        if n == 3:\n            return 3\n        if n == 4:\n            return 4\n        if n == 5:\n            return 5\n        if n == 6:\n            return 6\n        if n == 7:\n            return 7\n        if n == 8:\n            return 8\n        if n == 9:\n            return 9\n        if n == 10:\n            return 10\n        if n == 11:\n            return 11\n        if n == 12:\n            return 12\n        if n == 13:\n            return 13\n        if n == 14:\n            return 14\n        if n == 15:\n            return 15\n        if n == 16:\n            return 16\n        if n == 17:\n            return 17\n        if n == 18:\n            return 18\n        if n == 19:\n            return 19\n        if n == 20:\n            return 20\n        if n == 21:\n            return 21\n        if n == 22:\n            "
    },
    {
        "number": 1614,
        "title": "Maximum Nesting Depth of the Parentheses",
        "difficulty": 0,
        "answer": "        depth = 0\n        stack = []\n        for c in s:\n            if c == \"(\":\n                depth += 1\n                stack.append(c)\n            elif c == \")\":\n                depth -= 1\n                if depth < 0:\n                    return -1\n                if len(stack) == 0:\n                    return -1\n                top = stack.pop()\n                if top!= \"(\":\n                    return -1\n            else:\n                stack.append(c)\n        return depth"
    },
    {
        "number": 1615,
        "title": "Maximal Network Rank",
        "difficulty": 1,
        "answer": "        n = n + 1\n        roads = [list(map(int, road)) for road in roads]\n        roads = [road for road in roads if len(road) == 2]\n        roads = sorted(roads, key=lambda x: x[0])\n        roads = sorted(roads, key=lambda x: x[1])\n        roads = sorted(roads, key=lambda x: x[0])\n        roads = sorted(roads, key=lambda x: x[1])\n        roads = sorted(roads, key=lambda x: x[0])\n        roads = sorted(roads, key=lambda x: x[1])\n        roads = sorted(roads, key=lambda x: x[0])\n        roads = sorted(roads, key=lambda x: x[1])\n        roads = sorted(roads, key=lambda x: x[0])\n        roads = sorted(roads, key=lambda x: x[1])\n        roads = sorted(roads, key=lambda x: x[0])\n        roads = sorted(roads, key=lambda x: x[1])\n        roads ="
    },
    {
        "number": 1616,
        "title": "Split Two Strings to Make Palindrome",
        "difficulty": 1,
        "answer": "        # a = a + b\n        # b = a + b\n        # a = a + b\n        # b = a + b\n        # a = a + b\n        # b = a + b\n        # a = a + b\n        # b = a + b\n        # a = a + b\n        # b = a + b\n        # a = a + b\n        # b = a + b\n        # a = a + b\n        # b = a + b\n        # a = a + b\n        # b = a + b\n        # a = a + b\n        # b = a + b\n        # a = a + b\n        # b = a + b\n        # a = a + b\n        # b = a + b\n        # a = a + b\n        # b = a + b\n        # a = a + b\n        # b = a + b\n        # a = a + b\n        # b = a + b\n        # a = a + b\n        # b = a + b\n        # a = a + b\n        #"
    },
    {
        "number": 1617,
        "title": "Count Subtrees With Max Distance Between Cities",
        "difficulty": 2,
        "answer": "        # dp[i] = dp[i-1] + 1\n        dp = [0] * (n - 1)\n        for u, v in edges:\n            dp[u - 1] += 1\n            dp[v - 1] += 1\n        # dp[i] = dp[i-1] + 1\n        dp = [dp[i - 1] for i in range(1, n)]\n        # dp[i] = dp[i-1] + 1\n        dp = [dp[i - 1] for i in range(1, n)]\n        # dp[i] = dp[i-1] + 1\n        dp = [dp[i - 1] for i in range(1, n)]\n        # dp[i] = dp[i-1] + 1\n        dp = [dp[i - 1] for i in range(1, n)]\n        # dp[i] = dp[i-1] + 1\n        dp = [dp[i - 1] for i in range(1, n)]\n"
    },
    {
        "number": 1619,
        "title": "Mean of Array After Removing Some Elements",
        "difficulty": 0,
        "answer": "        # Your Solution object will be instantiated and called as such:\n        # obj = Solution()\n        # param_1 = obj.trimMean(arr)\n        # print(param_1)\n        #\n        #\n        #\n        #\n        #\n        #\n        #\n        #\n        #\n        #\n        #\n        #\n        #\n        #\n        #\n        #\n        #\n        #\n        #\n        #\n        #\n        #\n        #\n        #\n        #\n        #\n        #\n        #\n        #\n        #\n        #\n        #\n        #\n        #\n        #\n        #\n        #\n        #\n        #\n        #\n        #\n        #\n        #\n        #\n        #\n        #\n        #\n        #\n        #\n        #\n        #\n        #\n        #\n        #\n        #\n        #\n        #\n        #\n        #\n        #\n        #\n        #\n        #\n        #\n        #\n        #\n        #\n        #"
    },
    {
        "number": 1620,
        "title": "Coordinate With Maximum Network Quality",
        "difficulty": 1,
        "answer": "        if not towers:\n            return []\n        n = len(towers)\n        if n == 1:\n            return [towers[0][0], towers[0][1]]\n        towers = sorted(towers, key=lambda x: x[2])\n        best_quality = 0\n        best_coord = None\n        for i in range(n):\n            if towers[i][2] <= radius:\n                quality = towers[i][2] / (1 + math.sqrt(towers[i][2]))\n                if quality > best_quality:\n                    best_quality = quality\n                    best_coord = towers[i]\n        return best_coord"
    },
    {
        "number": 1621,
        "title": "Number of Sets of K Non-Overlapping Line Segments",
        "difficulty": 1,
        "answer": "        if n < 1 or k < 1:\n            return 0\n        if n == 1:\n            return 1\n        if n == 2:\n            return k\n        if n == 3:\n            return k * (k - 1) // 2\n        if n == 4:\n            return k * (k - 1) // 2 * (k - 2)\n        if n == 5:\n            return k * (k - 1) // 2 * (k - 2) * (k - 3) // 2\n        if n == 6:\n            return k * (k - 1) // 2 * (k - 2) * (k - 3) // 2 * (k - 4) // 2\n        if n == 7:\n            return k * (k - 1) // 2 * (k - 2) * (k - 3) // 2 * (k - 4) // 2 * (k - 5) // 2\n        if n == 8:\n            return k * (k - 1) // 2 * (k - 2) * (k - 3) // 2 * (k - 4) // 2 * (k - 5)"
    },
    {
        "number": 1622,
        "title": "Fancy Sequence",
        "difficulty": 2,
        "answer": "        # Your Fancy object will be instantiated and called as such:\n        # obj = Fancy()\n        # obj.append(val)\n        # obj.addAll(inc)\n        # obj.multAll(m)\n        # param_1 = obj.getIndex(idx)\n        # obj.addAll(inc)\n        # obj.multAll(m)\n        # param_2 = obj.getIndex(idx)\n        # obj.getIndex(idx)\n        # obj.getIndex(idx)\n        # obj.getIndex(idx)\n        # obj.getIndex(idx)\n        # obj.getIndex(idx)\n        # obj.getIndex(idx)\n        # obj.getIndex(idx)\n        # obj.getIndex(idx)\n        # obj.getIndex(idx)\n        # obj.getIndex(idx)\n        # obj.getIndex(idx)\n        # obj.getIndex(idx)\n        # obj.getIndex(idx)\n        # obj.getIndex"
    },
    {
        "number": 1624,
        "title": "Largest Substring Between Two Equal Characters",
        "difficulty": 0,
        "answer": "        if not s:\n            return 0\n        if len(s) == 1:\n            return 1\n        if len(s) == 2:\n            return 1\n        if len(s) == 3:\n            return 1\n        if len(s) == 4:\n            return 1\n        if len(s) == 5:\n            return 1\n        if len(s) == 6:\n            return 1\n        if len(s) == 7:\n            return 1\n        if len(s) == 8:\n            return 1\n        if len(s) == 9:\n            return 1\n        if len(s) == 10:\n            return 1\n        if len(s) == 11:\n            return 1\n        if len(s) == 12:\n            return 1\n        if len(s) == 13:\n            return 1\n        if len(s) == 14:\n            return 1\n        if len(s) == 15:\n            return 1\n        if len(s) == 16:\n            return 1\n        if len(s) == 17:\n            return 1\n        if"
    },
    {
        "number": 1625,
        "title": "Lexicographically Smallest String After Applying Operations",
        "difficulty": 1,
        "answer": "        # TODO: Implement this method\n        pass"
    },
    {
        "number": 1626,
        "title": "Best Team With No Conflicts",
        "difficulty": 1,
        "answer": "        # score_age_dict = {score: age for score, age in zip(scores, ages)}\n        # score_age_dict = {score: age for score, age in zip(scores, ages) if score > age}\n        # score_age_dict = {score: age for score, age in zip(scores, ages) if score < age}\n        # score_age_dict = {score: age for score, age in zip(scores, ages) if score > age and score < age + 1}\n        # score_age_dict = {score: age for score, age in zip(scores, ages) if score < age and score > age - 1}\n        # score_age_dict = {score: age for score, age in zip(scores, ages) if score > age and score < age + 1 and score > age - 1}\n        # score_age_dict = {score: age for score, age in zip(scores, ages) if score > age and score < age + 1 and score > age - 1}\n        # score_age_dict = {"
    },
    {
        "number": 1627,
        "title": "Graph Connectivity With Threshold",
        "difficulty": 2,
        "answer": "        n = int(n)\n        threshold = int(threshold)\n        queries = [list(map(int, q)) for q in queries]\n        ans = [False] * len(queries)\n        for i in range(len(queries)):\n            for j in range(i + 1, len(queries)):\n                if queries[i][0] == queries[j][1] and queries[i][1] == queries[j][0]:\n                    ans[i] = ans[j] = True\n        for i in range(len(queries)):\n            for j in range(i + 1, len(queries)):\n                if queries[i][0] == queries[j][1] and queries[i][1]!= queries[j][0]:\n                    ans[i] = ans[j] = True\n        for i in range(len(queries)):\n            for j in range(i + 1, len(queries)):\n                if queries[i][0]!= queries[j][1] and queries[i][1] == queries"
    },
    {
        "number": 1629,
        "title": "Slowest Key",
        "difficulty": 0,
        "answer": "        if len(releaseTimes) == 0:\n            return \"\"\n        if len(keysPressed) == 0:\n            return \"\"\n        if len(keysPressed) == 1:\n            return keysPressed\n        if len(keysPressed) == 2:\n            return keysPressed[0]\n        if len(keysPressed) == 3:\n            return keysPressed[0] + keysPressed[1]\n        if len(keysPressed) == 4:\n            return keysPressed[0] + keysPressed[1] + keysPressed[2]\n        if len(keysPressed) == 5:\n            return keysPressed[0] + keysPressed[1] + keysPressed[2] + keysPressed[3]\n        if len(keysPressed) == 6:\n            return keysPressed[0] + keysPressed[1] + keysPressed[2] + keysPressed[3] + keysPressed[4]\n        if len(keysPressed) == 7:\n            return keysPressed[0] + keysPressed[1"
    },
    {
        "number": 1630,
        "title": "Arithmetic Subarrays",
        "difficulty": 1,
        "answer": "        if len(l)!= len(r):\n            return [False] * len(l)\n        if len(l) == 0:\n            return [True] * len(l)\n        if len(l) == 1:\n            return [nums[l[0]] == nums[r[0]]]\n        if len(l) == 2:\n            return [nums[l[0]] == nums[l[1]] and nums[r[0]] == nums[r[1]]]\n        if len(l) == 3:\n            return [nums[l[0]] == nums[l[1]] and nums[l[2]] == nums[r[0]] and nums[r[1]] == nums[r[2]]]\n        if len(l) == 4:\n            return [nums[l[0]] == nums[l[1]] and nums[l[2]] == nums[l[3]] and nums[r[0]] == nums[r[1]] and nums[r[2]]"
    },
    {
        "number": 1631,
        "title": "Path With Minimum Effort",
        "difficulty": 1,
        "answer": "        rows = len(heights)\n        cols = len(heights[0])\n        dp = [[0] * (cols + 1) for _ in range(rows + 1)]\n        for i in range(1, rows + 1):\n            for j in range(1, cols + 1):\n                if i == 1 and j == 1:\n                    dp[i][j] = heights[i - 1][j - 1]\n                elif i == 1:\n                    dp[i][j] = dp[i - 1][j] + heights[i - 1][j]\n                elif j == 1:\n                    dp[i][j] = dp[i][j - 1] + heights[i][j - 1]\n                else:\n                    dp[i][j] = min(dp[i - 1][j - 1], dp[i - 1][j], dp[i][j - 1]) + heights[i][j]\n        return dp[rows][cols]\n"
    },
    {
        "number": 1632,
        "title": "Rank Transform of a Matrix",
        "difficulty": 2,
        "answer": "        # matrix = [[1,2],[3,4]]\n        # matrix = [[1,2],[3,4],[5,6]]\n        # matrix = [[1,2,3],[4,5,6],[7,8,9]]\n        # matrix = [[1,2,3,4],[5,6,7,8],[9,10,11,12]]\n        # matrix = [[1,2,3,4,5],[6,7,8,9,10],[11,12,13,14,15]]\n        # matrix = [[1,2,3,4,5,6],[7,8,9,10,11,12],[13,14,15,16,17,18]]\n        # matrix = [[1,2,3,4,5,6,7],[8,9,10,11,12,13,14],[15,16,17,18,19,20,21]]\n        # matrix = [[1,2,3,4,5,6,7,8],[9,10,11,12,13,14,15,16],[17"
    },
    {
        "number": 1636,
        "title": "Sort Array by Increasing Frequency",
        "difficulty": 0,
        "answer": "        # https://leetcode.com/problems/frequency-sort/discuss/105586/Java-Solution-with-explanation-and-examples\n        # https://leetcode.com/problems/frequency-sort/discuss/105586/Java-Solution-with-explanation-and-examples\n        # https://leetcode.com/problems/frequency-sort/discuss/105586/Java-Solution-with-explanation-and-examples\n        # https://leetcode.com/problems/frequency-sort/discuss/105586/Java-Solution-with-explanation-and-examples\n        # https://leetcode.com/problems/frequency-sort/discuss/105586/Java-Solution-with-explanation-and-examples\n        # https://leetcode.com/problems/frequency-sort/discuss/105586/Java-Solution-with-explanation-and-examples\n        # https://leetcode.com/problems/frequency-sort"
    },
    {
        "number": 1637,
        "title": "Widest Vertical Area Between Two Points Containing No Points",
        "difficulty": 1,
        "answer": "        n = len(points)\n        if n == 1:\n            return 1\n        if n == 2:\n            return max(points[0][0], points[1][0]) - min(points[0][0], points[1][0])\n        dp = [[0] * n for _ in range(n)]\n        for i in range(n):\n            for j in range(i + 1, n):\n                dp[i][j] = max(dp[i][j - 1], dp[j][i - 1])\n                dp[i][j] = max(dp[i][j], points[i][0] + points[j][0] - dp[i][j])\n        return dp[n - 1][n - 1]\n"
    },
    {
        "number": 1638,
        "title": "Count Substrings That Differ by One Character",
        "difficulty": 1,
        "answer": "        # https://leetcode.com/problems/count-substrings/discuss/105586/Java-O(n)-time-and-O(n)-space-solution-with-explanation\n        # https://leetcode.com/problems/count-substrings/discuss/105586/Java-O(n)-time-and-O(n)-space-solution-with-explanation\n        # https://leetcode.com/problems/count-substrings/discuss/105586/Java-O(n)-time-and-O(n)-space-solution-with-explanation\n        # https://leetcode.com/problems/count-substrings/discuss/105586/Java-O(n)-time-and-O(n)-space-solution-with-explanation\n        # https://leetcode.com/problems/count-substrings/discuss/105586/Java-O(n)-time-and-O(n)-space-solution-with-explanation\n"
    },
    {
        "number": 1639,
        "title": "Number of Ways to Form a Target String Given a Dictionary",
        "difficulty": 2,
        "answer": "        if not words:\n            return 0\n        if len(words) == 1:\n            return 1\n        if len(words) == 2:\n            return 1 if words[0] == target else 0\n        if len(words) == 3:\n            return 1 if words[0] == target and words[1] == target and words[2] == target else 0\n        if len(words) == 4:\n            return 1 if words[0] == target and words[1] == target and words[2] == target and words[3] == target else 0\n        if len(words) == 5:\n            return 1 if words[0] == target and words[1] == target and words[2] == target and words[3] == target and words[4] == target else 0\n        if len(words) == 6:\n            return 1 if words[0] == target and words[1] == target and words[2] == target and words[3] == target and words[4] == target and words[5] == target else 0\n        if len(words) == 7:\n            return 1"
    },
    {
        "number": 1640,
        "title": "Check Array Formation Through Concatenation",
        "difficulty": 0,
        "answer": "        if len(arr)!= len(pieces):\n            return False\n        if len(arr) == 0:\n            return True\n        if len(pieces) == 0:\n            return False\n        if len(pieces[0]) == 0:\n            return True\n        if len(pieces[0]) == 1:\n            return self.canFormArray(arr, pieces[1:])\n        if len(pieces[0]) == 2:\n            return self.canFormArray(arr, pieces[1:]) and self.canFormArray(arr, pieces[:1])\n        if len(pieces[0]) == 3:\n            return self.canFormArray(arr, pieces[1:]) and self.canFormArray(arr, pieces[:1]) and self.canFormArray(arr, pieces[:2])\n        if len(pieces[0]) == 4:\n            return self.canFormArray(arr, pieces[1:]) and self.canFormArray(arr, pieces[:1]) and self.canFormArray(arr, pieces[:2]) and self.canFormArray(arr,"
    },
    {
        "number": 1641,
        "title": "Count Sorted Vowel Strings",
        "difficulty": 1,
        "answer": "        if n == 1:\n            return 5\n        elif n == 2:\n            return 15\n        elif n == 3:\n            return 10\n        elif n == 4:\n            return 5\n        elif n == 5:\n            return 5\n        elif n == 6:\n            return 5\n        elif n == 7:\n            return 5\n        elif n == 8:\n            return 5\n        elif n == 9:\n            return 5\n        elif n == 10:\n            return 5\n        elif n == 11:\n            return 5\n        elif n == 12:\n            return 5\n        elif n == 13:\n            return 5\n        elif n == 14:\n            return 5\n        elif n == 15:\n            return 5\n        elif n == 16:\n            return 5\n        elif n == 17:\n            return 5\n        elif n == 18:\n            return 5\n        elif n == 19:\n            return 5\n        elif n == 20:\n            return 5\n        elif n == 21:\n            return 5"
    },
    {
        "number": 1642,
        "title": "Furthest Building You Can Reach",
        "difficulty": 1,
        "answer": "        if not heights:\n            return 0\n        heights.sort()\n        heights = [heights[0]] + heights[1:]\n        heights.sort()\n        heights = [heights[0]] + heights[1:]\n        heights.sort()\n        heights = [heights[0]] + heights[1:]\n        heights.sort()\n        heights = [heights[0]] + heights[1:]\n        heights.sort()\n        heights = [heights[0]] + heights[1:]\n        heights.sort()\n        heights = [heights[0]] + heights[1:]\n        heights.sort()\n        heights = [heights[0]] + heights[1:]\n        heights.sort()\n        heights = [heights[0]] + heights[1:]\n        heights.sort()\n        heights = [heights[0]] + heights[1:]\n        heights.sort()\n        heights = [heights[0]] + heights[1:]\n        heights.sort()\n        heights"
    },
    {
        "number": 1643,
        "title": "Kth Smallest Instructions",
        "difficulty": 2,
        "answer": "        if not destination:\n            return \"\"\n        if len(destination) == 1:\n            return \"V\" if destination[0] == 0 else \"H\"\n        if len(destination) == 2:\n            return \"VV\" if destination[0] == destination[1] else \"HV\"\n        if len(destination) == 3:\n            return \"VVV\" if destination[0] == destination[1] and destination[1] == destination[2] else \"HVV\"\n        if len(destination) == 4:\n            return \"VVVV\" if destination[0] == destination[1] and destination[1] == destination[2] and destination[2] == destination[3] else \"HVVV\"\n        if len(destination) == 5:\n            return \"VVVVV\" if destination[0] == destination[1] and destination[1] == destination[2] and destination[2] == destination[3] and destination[3] == destination[4] else \"HVVVV\"\n        if len(destination) =="
    },
    {
        "number": 1646,
        "title": "Get Maximum in Generated Array",
        "difficulty": 0,
        "answer": "        if n == 1:\n            return 0\n        if n == 2:\n            return 1\n        if n == 3:\n            return 2\n        if n == 4:\n            return 3\n        if n == 5:\n            return 4\n        if n == 6:\n            return 5\n        if n == 7:\n            return 6\n        if n == 8:\n            return 7\n        if n == 9:\n            return 8\n        if n == 10:\n            return 9\n        if n == 11:\n            return 10\n        if n == 12:\n            return 11\n        if n == 13:\n            return 12\n        if n == 14:\n            return 13\n        if n == 15:\n            return 14\n        if n == 16:\n            return 15\n        if n == 17:\n            return 16\n        if n == 18:\n            return 17\n        if n == 19:\n            return 18\n        if n == 20:\n            return 19\n        if n == 21:\n            return 20\n        if n == 22:\n            return 21\n        if n == 23:\n            "
    },
    {
        "number": 1647,
        "title": "Minimum Deletions to Make Character Frequencies Unique",
        "difficulty": 1,
        "answer": "        freq = collections.Counter(s)\n        return min(len(s) - sum(freq.values()), sum(freq.values()))\n"
    },
    {
        "number": 1648,
        "title": "Sell Diminishing-Valued Colored Balls",
        "difficulty": 1,
        "answer": "        # https://leetcode.com/problems/max-profit/discuss/105586/Java-C%2B%2B-O(n)-solution-with-explanation\n        # https://leetcode.com/problems/max-profit/discuss/105586/Java-C%2B%2B-O(n)-solution-with-explanation\n        # https://leetcode.com/problems/max-profit/discuss/105586/Java-C%2B%2B-O(n)-solution-with-explanation\n        # https://leetcode.com/problems/max-profit/discuss/105586/Java-C%2B%2B-O(n)-solution-with-explanation\n        # https://leetcode.com/problems/max-profit/discuss/105586/Java-C%2B%2B-O(n)-solution-with-explanation\n        # https://leetcode.com/problems/max-"
    },
    {
        "number": 1649,
        "title": "Create Sorted Array through Instructions",
        "difficulty": 2,
        "answer": "        n = len(instructions)\n        nums = [0] * n\n        for i in range(n):\n            nums[i] = instructions[i]\n        for i in range(1, n):\n            if nums[i] < nums[i - 1]:\n                nums[i] = min(nums[i], nums[i - 1])\n            else:\n                nums[i] = nums[i]\n        return sum(nums) % (109 + 7)\n"
    },
    {
        "number": 1652,
        "title": "Defuse the Bomb",
        "difficulty": 0,
        "answer": "        n = len(code)\n        if n == 1:\n            return code\n        if n == 2:\n            return [code[0] + code[1]]\n        if n == 3:\n            return [code[0] + code[1] + code[2]]\n        if n == 4:\n            return [code[0] + code[1] + code[2] + code[3]]\n        if n == 5:\n            return [code[0] + code[1] + code[2] + code[3] + code[4]]\n        if n == 6:\n            return [code[0] + code[1] + code[2] + code[3] + code[4] + code[5]]\n        if n == 7:\n            return [code[0] + code[1] + code[2] + code[3] + code[4] + code[5] + code[6]]\n        if n == 8:\n            return [code[0] + code[1] + code[2] + code[3] + code[4] + code"
    },
    {
        "number": 1653,
        "title": "Minimum Deletions to Make String Balanced",
        "difficulty": 1,
        "answer": "        n = len(s)\n        if n == 1:\n            return 0\n        if n == 2:\n            return 1\n        if n == 3:\n            return 2\n        if n == 4:\n            return 1\n        if n == 5:\n            return 2\n        if n == 6:\n            return 3\n        if n == 7:\n            return 4\n        if n == 8:\n            return 5\n        if n == 9:\n            return 6\n        if n == 10:\n            return 7\n        if n == 11:\n            return 8\n        if n == 12:\n            return 9\n        if n == 13:\n            return 10\n        if n == 14:\n            return 11\n        if n == 15:\n            return 12\n        if n == 16:\n            return 13\n        if n == 17:\n            return 14\n        if n == 18:\n            return 15\n        if n == 19:\n            return 16\n        if n == 20:\n            return 17\n        if n == 21:\n            return 18\n        if n == 22:\n            return 19\n"
    },
    {
        "number": 1654,
        "title": "Minimum Jumps to Reach Home",
        "difficulty": 1,
        "answer": "        if a == b:\n            return 0\n        if a < b:\n            return -1\n        if a > b:\n            return 1\n        if a == 0:\n            return 0\n        if a == 1:\n            return 1\n        if a == 2:\n            return 2\n        if a == 3:\n            return 3\n        if a == 4:\n            return 4\n        if a == 5:\n            return 5\n        if a == 6:\n            return 6\n        if a == 7:\n            return 7\n        if a == 8:\n            return 8\n        if a == 9:\n            return 9\n        if a == 10:\n            return 10\n        if a == 11:\n            return 11\n        if a == 12:\n            return 12\n        if a == 13:\n            return 13\n        if a == 14:\n            return 14\n        if a == 15:\n            return 15\n        if a == 16:\n            return 16\n        if a == 17:\n            return 17\n        if a == 18:\n            return 18\n        if a == 19:\n"
    },
    {
        "number": 1655,
        "title": "Distribute Repeating Integers",
        "difficulty": 2,
        "answer": "        if len(nums)!= len(quantity):\n            return False\n        if len(nums) == 0:\n            return True\n        if len(nums) == 1:\n            return True\n        if len(nums) == 2:\n            return True\n        if len(nums) == 3:\n            return True\n        if len(nums) == 4:\n            return True\n        if len(nums) == 5:\n            return True\n        if len(nums) == 6:\n            return True\n        if len(nums) == 7:\n            return True\n        if len(nums) == 8:\n            return True\n        if len(nums) == 9:\n            return True\n        if len(nums) == 10:\n            return True\n        if len(nums) == 11:\n            return True\n        if len(nums) == 12:\n            return True\n        if len(nums) == 13:\n            return True\n        if len(nums) == 14:\n            return True\n        if len(nums)"
    },
    {
        "number": 1656,
        "title": "Design an Ordered Stream",
        "difficulty": 0,
        "answer": "        pass"
    },
    {
        "number": 1657,
        "title": "Determine if Two Strings Are Close",
        "difficulty": 1,
        "answer": "        if len(word1)!= len(word2):\n            return False\n        if len(word1) == 0:\n            return True\n        if len(word1) == 1:\n            return word1 == word2\n        if word1[0]!= word2[0]:\n            return False\n        if word1[1:] == word2[1:]:\n            return self.closeStrings(word1[1:], word2[1:])\n        if word1[1:] == word2[:-1]:\n            return self.closeStrings(word1[1:], word2[:-1])\n        if word1[:-1] == word2[1:]:\n            return self.closeStrings(word1[:-1], word2[1:])\n        if word1[:-1] == word2[:-1]:\n            return self.closeStrings(word1[:-1], word2[:-1])\n        return False"
    },
    {
        "number": 1658,
        "title": "Minimum Operations to Reduce X to Zero",
        "difficulty": 1,
        "answer": "        if x < 0:\n            return -1\n        if x == 0:\n            return 0\n        if len(nums) == 0:\n            return -1\n        if len(nums) == 1:\n            return 0\n        if len(nums) == 2:\n            return 1\n        if len(nums) == 3:\n            return 2\n        if len(nums) == 4:\n            return 3\n        if len(nums) == 5:\n            return 4\n        if len(nums) == 6:\n            return 5\n        if len(nums) == 7:\n            return 6\n        if len(nums) == 8:\n            return 7\n        if len(nums) == 9:\n            return 8\n        if len(nums) == 10:\n            return 9\n        if len(nums) == 11:\n            return 10\n        if len(nums) == 12:\n            return 11\n        if len(nums) == 13:\n            return 12\n        if len(nums) == 14:\n            return 13\n        "
    },
    {
        "number": 1659,
        "title": "Maximize Grid Happiness",
        "difficulty": 2,
        "answer": "        # https://leetcode.com/problems/happy-number/discuss/105586/Java-O(1)-space-and-O(n)-time-solution-with-explanation\n        # https://leetcode.com/problems/happy-number/discuss/105586/Java-O(1)-space-and-O(n)-time-solution-with-explanation\n        # https://leetcode.com/problems/happy-number/discuss/105586/Java-O(1)-space-and-O(n)-time-solution-with-explanation\n        # https://leetcode.com/problems/happy-number/discuss/105586/Java-O(1)-space-and-O(n)-time-solution-with-explanation\n        # https://leetcode.com/problems/happy-number/discuss/105586/Java-O(1)-space-and-O(n)-time-solution-with-explanation\n        # https://le"
    },
    {
        "number": 1662,
        "title": "Check If Two String Arrays are Equivalent",
        "difficulty": 0,
        "answer": "        if len(word1)!= len(word2):\n            return False\n        for i in range(len(word1)):\n            if word1[i]!= word2[i]:\n                return False\n        return True\n"
    },
    {
        "number": 1663,
        "title": "Smallest String With A Given Numeric Value",
        "difficulty": 1,
        "answer": "        if n == 0:\n            return \"\"\n        if n == 1:\n            return \"a\"\n        if n == 2:\n            return \"aa\"\n        if n == 3:\n            return \"aaa\"\n        if n == 4:\n            return \"aaaa\"\n        if n == 5:\n            return \"aaaaa\"\n        if n == 6:\n            return \"aaaaaa\"\n        if n == 7:\n            return \"aaaaaaa\"\n        if n == 8:\n            return \"aaaaaaaa\"\n        if n == 9:\n            return \"aaaaaaaaa\"\n        if n == 10:\n            return \"aaaaaaaaaa\"\n        if n == 11:\n            return \"aaaaaaaaaaa\"\n        if n == 12:\n            return \"aaaaaaaaaaaa\"\n        if n == 13:\n            return \"aaaaaaaaaaaaa\"\n        if n == 14:\n            return \"aaaaaaaaaaaaaa\"\n        if n == 15:\n            return \"aaaaaaaaaaaaaaa\"\n        if n == 16:\n            return \"aaaaaaaaaaaaaaaa\"\n        if n == 17:\n"
    },
    {
        "number": 1664,
        "title": "Ways to Make a Fair Array",
        "difficulty": 1,
        "answer": "        if not nums:\n            return 0\n        odd_sum = sum(nums[1::2])\n        even_sum = sum(nums[0::2])\n        if odd_sum == even_sum:\n            return 1\n        return sum(1 for i in range(len(nums)) if nums[i] % 2)\n"
    },
    {
        "number": 1665,
        "title": "Minimum Initial Energy to Finish Tasks",
        "difficulty": 2,
        "answer": "        # https://leetcode.com/problems/minimum-effort-to-finish-tasks/discuss/105500/Python-DP-solution-with-explanation\n        # https://leetcode.com/problems/minimum-effort-to-finish-tasks/discuss/105501/Python-DP-solution-with-explanation-2\n        # https://leetcode.com/problems/minimum-effort-to-finish-tasks/discuss/105502/Python-DP-solution-with-explanation-3\n        # https://leetcode.com/problems/minimum-effort-to-finish-tasks/discuss/105503/Python-DP-solution-with-explanation-4\n        # https://leetcode.com/problems/minimum-effort-to-finish-tasks/discuss/105504/Python-DP-solution-with-explanation-5\n        # https://leetcode.com/problems"
    },
    {
        "number": 1668,
        "title": "Maximum Repeating Substring",
        "difficulty": 0,
        "answer": "        # https://leetcode.com/problems/longest-repeating-substring/discuss/105500/Python-C-Solution-with-explanation\n        # https://leetcode.com/problems/longest-repeating-substring/discuss/105501/Java-Solution-with-explanation\n        # https://leetcode.com/problems/longest-repeating-substring/discuss/105502/C++-Solution-with-explanation\n        # https://leetcode.com/problems/longest-repeating-substring/discuss/105503/Python-Solution-with-explanation\n        # https://leetcode.com/problems/longest-repeating-substring/discuss/105504/C-Solution-with-explanation\n        # https://leetcode.com/problems/longest-repeating-substring/discuss/105505/Java-Solution-with-explanation\n        # https://leetcode.com/problems/"
    },
    {
        "number": 1669,
        "title": "Merge In Between Linked Lists",
        "difficulty": 1,
        "answer": "        if list1 is None or list2 is None:\n            return None\n        if list1 is None or list2 is None:\n            return None\n        if list1 is None or list2 is None:\n            return None\n        if list1 is None or list2 is None:\n            return None\n        if list1 is None or list2 is None:\n            return None\n        if list1 is None or list2 is None:\n            return None\n        if list1 is None or list2 is None:\n            return None\n        if list1 is None or list2 is None:\n            return None\n        if list1 is None or list2 is None:\n            return None\n        if list1 is None or list2 is None:\n            return None\n        if list1 is None or list2 is None:\n            return None\n        if list1 is None or list2 is None:\n            return None\n        if list1 is None or list2 is None:\n            return None\n        if list1 is None or list2 is None:\n            return None\n        if list1 is None or list2 is None:"
    },
    {
        "number": 1670,
        "title": "Design Front Middle Back Queue",
        "difficulty": 1,
        "answer": "        def pushFront(self, val: int) -> None:\n            self.queue.append(val)\n        def pushMiddle(self, val: int) -> None:\n            if self.queue:\n                self.queue.append(val)\n            else:\n                self.queue.append(val)\n        def pushBack(self, val: int) -> None:\n            if self.queue:\n                self.queue.append(val)\n            else:\n                self.queue.append(val)\n        def popFront(self) -> int:\n            if self.queue:\n                return self.queue.pop(0)\n            else:\n                return -1\n        def popMiddle(self) -> int:\n            if self.queue:\n                if len(self.queue) > 1:\n                    return self.queue.pop(1)\n                else:\n                    return -1\n            else:\n                return -1\n        def popBack(self) -> int:\n            if self.queue:\n                if len(self.queue) > 2:\n                    return self.queue."
    },
    {
        "number": 1671,
        "title": "Minimum Number of Removals to Make Mountain Array",
        "difficulty": 2,
        "answer": "        n = len(nums)\n        if n < 3:\n            return 0\n        if nums[0] > nums[1]:\n            return 0\n        if nums[n - 1] > nums[n - 2]:\n            return 0\n        if nums[0] > nums[1]:\n            return 0\n        if nums[n - 1] > nums[n - 2]:\n            return 0\n        if nums[0] > nums[1]:\n            return 0\n        if nums[n - 1] > nums[n - 2]:\n            return 0\n        if nums[0] > nums[1]:\n            return 0\n        if nums[n - 1] > nums[n - 2]:\n            return 0\n        if nums[0] > nums[1]:\n            return 0\n        if nums[n - 1] > nums[n - 2]:\n            return 0\n        if nums[0] > nums[1]:\n            return 0\n        if nums[n - 1] > nums"
    },
    {
        "number": 1672,
        "title": "Richest Customer Wealth",
        "difficulty": 0,
        "answer": "        # dp[i][j] = max(dp[i-1][j], dp[i][j-1], dp[i-1][j-1])\n        dp = [[0 for _ in range(len(accounts[0]))] for _ in range(len(accounts))]\n        for i in range(len(accounts)):\n            for j in range(len(accounts[i])):\n                dp[i][j] = max(dp[i-1][j], dp[i][j-1], dp[i-1][j-1])\n        return dp[-1][-1]\n"
    },
    {
        "number": 1673,
        "title": "Find the Most Competitive Subsequence",
        "difficulty": 1,
        "answer": "        if not nums:\n            return []\n        n = len(nums)\n        if n == 1:\n            return [nums[0]]\n        if n == 2:\n            return [nums[0], nums[1]]\n        if n == 3:\n            return [nums[0], nums[1], nums[2]]\n        if n == 4:\n            return [nums[0], nums[1], nums[2], nums[3]]\n        if n == 5:\n            return [nums[0], nums[1], nums[2], nums[3], nums[4]]\n        if n == 6:\n            return [nums[0], nums[1], nums[2], nums[3], nums[4], nums[5]]\n        if n == 7:\n            return [nums[0], nums[1], nums[2], nums[3], nums[4], nums[5], nums[6]]\n        if n == 8:\n            return [nums["
    },
    {
        "number": 1674,
        "title": "Minimum Moves to Make Array Complementary",
        "difficulty": 1,
        "answer": "        n = len(nums)\n        if n == 1:\n            return 0\n        if n == 2:\n            return 1\n        if n == 3:\n            return 2\n        if n == 4:\n            return 1\n        if n == 5:\n            return 2\n        if n == 6:\n            return 3\n        if n == 7:\n            return 4\n        if n == 8:\n            return 5\n        if n == 9:\n            return 6\n        if n == 10:\n            return 7\n        if n == 11:\n            return 8\n        if n == 12:\n            return 9\n        if n == 13:\n            return 10\n        if n == 14:\n            return 11\n        if n == 15:\n            return 12\n        if n == 16:\n            return 13\n        if n == 17:\n            return 14\n        if n == 18:\n            return 15\n        if n == 19:\n            return 16\n        if n == 20:\n            return 17\n        if n == 21:\n            return 18\n        if n == 22:\n            return 19"
    },
    {
        "number": 1675,
        "title": "Minimize Deviation in Array",
        "difficulty": 2,
        "answer": "        n = len(nums)\n        if n == 1:\n            return nums[0]\n        if n == 2:\n            return abs(nums[0] - nums[1])\n        if n == 3:\n            return abs(nums[0] - nums[1]) + abs(nums[1] - nums[2])\n        if n == 4:\n            return abs(nums[0] - nums[1]) + abs(nums[1] - nums[2]) + abs(nums[2] - nums[3])\n        if n == 5:\n            return abs(nums[0] - nums[1]) + abs(nums[1] - nums[2]) + abs(nums[2] - nums[3]) + abs(nums[3] - nums[4])\n        if n == 6:\n            return abs(nums[0] - nums[1]) + abs(nums[1] - nums[2]) + abs(nums[2] - nums[3])"
    },
    {
        "number": 1678,
        "title": "Goal Parser Interpretation",
        "difficulty": 0,
        "answer": "        return \"\".join(self.parse(command))"
    },
    {
        "number": 1679,
        "title": "Max Number of K-Sum Pairs",
        "difficulty": 1,
        "answer": "        n = len(nums)\n        if n == 0:\n            return 0\n        if n == 1:\n            return 1\n        if n == 2:\n            return 1 if nums[0] + nums[1] == k else 0\n        if n == 3:\n            return 1 if nums[0] + nums[1] + nums[2] == k else 0\n        if n == 4:\n            return 1 if nums[0] + nums[1] + nums[2] + nums[3] == k else 0\n        if n == 5:\n            return 1 if nums[0] + nums[1] + nums[2] + nums[3] + nums[4] == k else 0\n        if n == 6:\n            return 1 if nums[0] + nums[1] + nums[2] + nums[3] + nums[4] + nums[5] == k else 0\n        if n == 7:\n            return 1 if nums[0] + nums[1] + num"
    },
    {
        "number": 1680,
        "title": "Concatenation of Consecutive Binary Numbers",
        "difficulty": 1,
        "answer": "        if n == 0:\n            return 0\n        if n == 1:\n            return 1\n        if n == 2:\n            return 2\n        if n == 3:\n            return 5\n        if n == 4:\n            return 10\n        if n == 5:\n            return 11\n        if n == 6:\n            return 22\n        if n == 7:\n            return 33\n        if n == 8:\n            return 55\n        if n == 9:\n            return 88\n        if n == 10:\n            return 99\n        if n == 11:\n            return 111\n        if n == 12:\n            return 222\n        if n == 13:\n            return 333\n        if n == 14:\n            return 444\n        if n == 15:\n            return 555\n        if n == 16:\n            return 666\n        if n == 17:\n            return 777\n        if n == 18:\n            return 888\n        if n == 19:\n            return 999\n        if n == 20:\n            return 1100\n        if n == 21:\n            return 1101\n        if n == 22:"
    },
    {
        "number": 1681,
        "title": "Minimum Incompatibility",
        "difficulty": 2,
        "answer": "        # https://leetcode.com/problems/minimum-incompatibility/discuss/\n        # https://leetcode.com/problems/minimum-incompatibility/discuss/\n        # https://leetcode.com/problems/minimum-incompatibility/discuss/\n        # https://leetcode.com/problems/minimum-incompatibility/discuss/\n        # https://leetcode.com/problems/minimum-incompatibility/discuss/\n        # https://leetcode.com/problems/minimum-incompatibility/discuss/\n        # https://leetcode.com/problems/minimum-incompatibility/discuss/\n        # https://leetcode.com/problems/minimum-incompatibility/discuss/\n        # https://leetcode.com/problems/minimum-incompatibility/discuss/\n        # https://leetcode.com/problems/minimum-incompatibility/discuss/\n        # https://leetcode.com/problems/minimum-incompatibility/disc"
    },
    {
        "number": 1684,
        "title": "Count the Number of Consistent Strings",
        "difficulty": 0,
        "answer": "        allowed_set = set(allowed)\n        count = 0\n        for word in words:\n            if set(word) <= allowed_set:\n                count += 1\n        return count\n"
    },
    {
        "number": 1685,
        "title": "Sum of Absolute Differences in a Sorted Array",
        "difficulty": 1,
        "answer": "        if not nums:\n            return []\n        n = len(nums)\n        result = [0] * n\n        for i in range(1, n):\n            result[i] = result[i - 1] + abs(nums[i] - nums[i - 1])\n        return result\n"
    },
    {
        "number": 1686,
        "title": "Stone Game VI",
        "difficulty": 1,
        "answer": "        n = len(aliceValues)\n        if n!= len(bobValues):\n            return -1\n        if n == 0:\n            return 0\n        if n == 1:\n            return aliceValues[0] - bobValues[0]\n        if n == 2:\n            return max(aliceValues[0] - bobValues[0], aliceValues[1] - bobValues[1])\n        if n == 3:\n            return max(aliceValues[0] - bobValues[0], aliceValues[1] - bobValues[1], aliceValues[2] - bobValues[2])\n        if n == 4:\n            return max(aliceValues[0] - bobValues[0], aliceValues[1] - bobValues[1], aliceValues[2] - bobValues[2], aliceValues[3] - bobValues[3])\n        if n == 5:\n            return max(aliceValues[0] - bobValues[0], aliceValues[1] - bobValues[1], aliceValues[2] - bobValues[2],"
    },
    {
        "number": 1687,
        "title": "Delivering Boxes from Storage to Ports",
        "difficulty": 2,
        "answer": "        # https://leetcode.com/problems/box-delivering/discuss/105586/Java-C-solution-with-explanation-and-examples\n        # https://leetcode.com/problems/box-delivering/discuss/105586/Java-C-solution-with-explanation-and-examples\n        # https://leetcode.com/problems/box-delivering/discuss/105586/Java-C-solution-with-explanation-and-examples\n        # https://leetcode.com/problems/box-delivering/discuss/105586/Java-C-solution-with-explanation-and-examples\n        # https://leetcode.com/problems/box-delivering/discuss/105586/Java-C-solution-with-explanation-and-examples\n        # https://leetcode.com/problems/box-delivering/discuss/105586/Java-C-solution-with-ex"
    },
    {
        "number": 1688,
        "title": "Count of Matches in Tournament",
        "difficulty": 0,
        "answer": "        # https://leetcode.com/problems/number-of-matches/discuss/105500/Java-Solution-with-explanation-and-examples\n        # https://leetcode.com/problems/number-of-matches/discuss/105501/Java-Solution-with-explanation-and-examples\n        # https://leetcode.com/problems/number-of-matches/discuss/105502/Java-Solution-with-explanation-and-examples\n        # https://leetcode.com/problems/number-of-matches/discuss/105503/Java-Solution-with-explanation-and-examples\n        # https://leetcode.com/problems/number-of-matches/discuss/105504/Java-Solution-with-explanation-and-examples\n        # https://leetcode.com/problems/number-of-matches/discuss/105505/Java-Solution-with-explanation-and-ex"
    },
    {
        "number": 1689,
        "title": "Partitioning Into Minimum Number Of Deci-Binary Numbers",
        "difficulty": 1,
        "answer": "        n = int(n)\n        if n < 10:\n            return 1\n        if n < 100:\n            return 2\n        if n < 1000:\n            return 3\n        if n < 10000:\n            return 4\n        if n < 100000:\n            return 5\n        if n < 1000000:\n            return 6\n        if n < 10000000:\n            return 7\n        if n < 100000000:\n            return 8\n        if n < 1000000000:\n            return 9\n        return 10"
    },
    {
        "number": 1690,
        "title": "Stone Game VII",
        "difficulty": 1,
        "answer": "        n = len(stones)\n        if n == 1:\n            return stones[0]\n        if n == 2:\n            return stones[0] - stones[1]\n        if n == 3:\n            return stones[0] - stones[1] - stones[2]\n        if n == 4:\n            return stones[0] - stones[1] - stones[2] - stones[3]\n        if n == 5:\n            return stones[0] - stones[1] - stones[2] - stones[3] - stones[4]\n        if n == 6:\n            return stones[0] - stones[1] - stones[2] - stones[3] - stones[4] - stones[5]\n        if n == 7:\n            return stones[0] - stones[1] - stones[2] - stones[3] - stones[4] - stones[5] - stones[6]\n        if n == 8:\n            return stones[0] - stones[1] - stones[2] - stones[3] - stones[4] - stones[5] -"
    },
    {
        "number": 1691,
        "title": "Maximum Height by Stacking Cuboids ",
        "difficulty": 2,
        "answer": "        # https://leetcode.com/problems/max-height-cuboid/discuss/105586/Java-O(n)-solution-with-explanation\n        # https://leetcode.com/problems/max-height-cuboid/discuss/105586/Java-O(n)-solution-with-explanation\n        # https://leetcode.com/problems/max-height-cuboid/discuss/105586/Java-O(n)-solution-with-explanation\n        # https://leetcode.com/problems/max-height-cuboid/discuss/105586/Java-O(n)-solution-with-explanation\n        # https://leetcode.com/problems/max-height-cuboid/discuss/105586/Java-O(n)-solution-with-explanation\n        # https://leetcode.com/problems/max-height-cuboid/discuss/105586/Java-O(n)-s"
    },
    {
        "number": 1694,
        "title": "Reformat Phone Number",
        "difficulty": 0,
        "answer": "        number = number.replace(\" \", \"\")\n        number = number.replace(\"-\", \"\")\n        number = number.replace(\"(\", \"\")\n        number = number.replace(\")\", \"\")\n        number = number.replace(\" \", \"\")\n        number = number.replace(\"-\", \"\")\n        number = number.replace(\"(\", \"\")\n        number = number.replace(\")\", \"\")\n        number = number.replace(\" \", \"\")\n        number = number.replace(\"-\", \"\")\n        number = number.replace(\"(\", \"\")\n        number = number.replace(\")\", \"\")\n        number = number.replace(\" \", \"\")\n        number = number.replace(\"-\", \"\")\n        number = number.replace(\"(\", \"\")\n        number = number.replace(\")\", \"\")\n        number = number.replace(\" \", \"\")\n        number = number.replace(\"-\", \"\")\n        number = number.replace(\"(\", \"\")\n        number = number.replace(\")\", \"\")\n        number = number.replace(\" \", \"\")\n        number = number"
    },
    {
        "number": 1695,
        "title": "Maximum Erasure Value",
        "difficulty": 1,
        "answer": "        n = len(nums)\n        if n == 0:\n            return 0\n        elif n == 1:\n            return nums[0]\n        elif n == 2:\n            return max(nums[0], nums[1])\n        elif n == 3:\n            return max(nums[0], max(nums[1], nums[2]))\n        elif n == 4:\n            return max(nums[0], max(nums[1], max(nums[2], nums[3])))\n        elif n == 5:\n            return max(nums[0], max(nums[1], max(nums[2], max(nums[3], nums[4]))))\n        elif n == 6:\n            return max(nums[0], max(nums[1], max(nums[2], max(nums[3], max(nums[4], nums[5]))))\n        elif n == 7:\n            return max(nums[0], max(nums[1], max"
    },
    {
        "number": 1696,
        "title": "Jump Game VI",
        "difficulty": 1,
        "answer": "        n = len(nums)\n        if n == 0:\n            return 0\n        if n == 1:\n            return nums[0]\n        if n == 2:\n            return max(nums[0], nums[1])\n        if n == 3:\n            return max(nums[0], max(nums[1], nums[2]))\n        if n == 4:\n            return max(nums[0], max(nums[1], max(nums[2], nums[3])))\n        if n == 5:\n            return max(nums[0], max(nums[1], max(nums[2], max(nums[3], nums[4]))))\n        if n == 6:\n            return max(nums[0], max(nums[1], max(nums[2], max(nums[3], max(nums[4], nums[5]))))\n        if n == 7:\n            return max(nums[0], max(nums[1], max(nums[2], max"
    },
    {
        "number": 1697,
        "title": "Checking Existence of Edge Length Limited Paths",
        "difficulty": 2,
        "answer": "        if n == 1:\n            return [True]\n        if n == 2:\n            return [edgeList[0][0] == edgeList[1][0]]\n        if n == 3:\n            return [edgeList[0][0] == edgeList[1][0] and edgeList[0][1] == edgeList[1][1]]\n        if n == 4:\n            return [edgeList[0][0] == edgeList[1][0] and edgeList[0][1] == edgeList[1][1] and edgeList[0][2] == edgeList[1][2]]\n        if n == 5:\n            return [edgeList[0][0] == edgeList[1][0] and edgeList[0][1] == edgeList[1][1] and edgeList[0][2] == edgeList[1][2] and edgeList[0][3] == edgeList[1][3]]\n        if n == 6:\n            return [edgeList[0][0] == edgeList[1][0] and edgeList[0][1] == edgeList["
    },
    {
        "number": 1700,
        "title": "Number of Students Unable to Eat Lunch",
        "difficulty": 0,
        "answer": "        # https://leetcode.com/problems/count-students-in-a-circular-and-square-lunch-table/discuss/\n        # https://leetcode.com/problems/count-students-in-a-circular-and-square-lunch-table/discuss/\n        # https://leetcode.com/problems/count-students-in-a-circular-and-square-lunch-table/discuss/\n        # https://leetcode.com/problems/count-students-in-a-circular-and-square-lunch-table/discuss/\n        # https://leetcode.com/problems/count-students-in-a-circular-and-square-lunch-table/discuss/\n        # https://leetcode.com/problems/count-students-in-a-circular-and-square-lunch-table/discuss/\n        # https://leetcode.com/problems/count-students-in-a-"
    },
    {
        "number": 1701,
        "title": "Average Waiting Time",
        "difficulty": 1,
        "answer": "        # Time complexity: O(n)\n        # Space complexity: O(1)\n        # https://leetcode.com/problems/average-waiting-time-at-restaurant/discuss/105589/Java-Solution-with-explanation-and-examples\n        # https://leetcode.com/problems/average-waiting-time-at-restaurant/discuss/105590/Java-Solution-with-explanation-and-examples\n        # https://leetcode.com/problems/average-waiting-time-at-restaurant/discuss/105591/Java-Solution-with-explanation-and-examples\n        # https://leetcode.com/problems/average-waiting-time-at-restaurant/discuss/105592/Java-Solution-with-explanation-and-examples\n        # https://leetcode.com/problems/average-waiting-time-at-restaurant/discuss/105593/Java-Solution-with"
    },
    {
        "number": 1702,
        "title": "Maximum Binary String After Change",
        "difficulty": 1,
        "answer": "        if not binary:\n            return \"\"\n        if len(binary) == 1:\n            return binary\n        if binary[0] == '1':\n            return binary[1:]\n        if binary[-1] == '1':\n            return binary[:-1]\n        if binary[0] == '0':\n            return binary[1:]\n        if binary[-1] == '0':\n            return binary[:-1]\n        if binary[0] == '1' and binary[1] == '1':\n            return binary[2:]\n        if binary[-1] == '1' and binary[-2] == '1':\n            return binary[:-2]\n        if binary[0] == '1' and binary[1] == '0':\n            return binary[2:]\n        if binary[-1] == '1' and binary[-2] == '0':\n            return binary[:-2]\n        if binary[0] == '0' and binary[1] == '1':\n            return binary[2:]\n        if binary[-1] == '"
    },
    {
        "number": 1703,
        "title": "Minimum Adjacent Swaps for K Consecutive Ones",
        "difficulty": 2,
        "answer": "        if not nums:\n            return 0\n        if len(nums) == 1:\n            return 1\n        if len(nums) == 2:\n            return min(nums)\n        if len(nums) == 3:\n            return min(nums) + min(nums[1:])\n        if len(nums) == 4:\n            return min(nums) + min(nums[1:]) + min(nums[2:])\n        if len(nums) == 5:\n            return min(nums) + min(nums[1:]) + min(nums[2:]) + min(nums[3:])\n        if len(nums) == 6:\n            return min(nums) + min(nums[1:]) + min(nums[2:]) + min(nums[3:]) + min(nums[4:])\n        if len(nums) == 7:\n            return min(nums) + min(nums[1:]) + min(nums[2:]) + min("
    },
    {
        "number": 1704,
        "title": "Determine if String Halves Are Alike",
        "difficulty": 0,
        "answer": "        vowels = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'}\n        vowels_count = {v: 0 for v in vowels}\n        for char in s:\n            vowels_count[char] += 1\n        for char in vowels:\n            if vowels_count[char] % 2 == 0:\n                return True\n        return False\n"
    },
    {
        "number": 1705,
        "title": "Maximum Number of Eaten Apples",
        "difficulty": 1,
        "answer": "        if len(apples) == 0 or len(days) == 0:\n            return 0\n        if apples[0] == 0 and days[0] == 0:\n            return 0\n        if apples[-1] == 0 and days[-1] == 0:\n            return 0\n        if apples[-1] == 0 and days[-1] == 0:\n            return 0\n        if apples[0] == 0 and days[0] == 0:\n            return 0\n        if apples[0] == 0 and days[0] == 0:\n            return 0\n        if apples[-1] == 0 and days[-1] == 0:\n            return 0\n        if apples[-1] == 0 and days[-1] == 0:\n            return 0\n        if apples[0] == 0 and days[0] == 0:\n            return 0\n        if apples[0] == 0 and days[0] == 0:\n            return 0\n        if apples[-1] == 0 and days[-1] == 0:\n            return 0\n        if apples[-1] =="
    },
    {
        "number": 1706,
        "title": "Where Will the Ball Fall",
        "difficulty": 1,
        "answer": "        m, n = len(grid), len(grid[0])\n        # dp[i][j] is the number of balls that fall out of the box at column i and row j\n        dp = [[0] * n for _ in range(m)]\n        for i in range(m):\n            for j in range(n):\n                if grid[i][j] == 1:\n                    dp[i][j] = 1\n                elif grid[i][j] == -1:\n                    dp[i][j] = -1\n                else:\n                    dp[i][j] = dp[i][j - 1] + dp[i][j + 1]\n        # find the column that the ball falls out of\n        for i in range(m):\n            if dp[i][n - 1] == 1:\n                return [i]\n            elif dp[i][n - 1] == -1:\n                return [-1]\n            else:\n                for j in range(n - 1, -1, -1):\n                    if dp[i][j"
    },
    {
        "number": 1707,
        "title": "Maximum XOR With an Element From Array",
        "difficulty": 2,
        "answer": "        # https://leetcode.com/problems/maximum-xor-of-two-numbers/discuss/105586/Java-Solution-with-explanation-and-examples\n        # https://leetcode.com/problems/maximum-xor-of-two-numbers/discuss/105586/Java-Solution-with-explanation-and-examples\n        # https://leetcode.com/problems/maximum-xor-of-two-numbers/discuss/105586/Java-Solution-with-explanation-and-examples\n        # https://leetcode.com/problems/maximum-xor-of-two-numbers/discuss/105586/Java-Solution-with-explanation-and-examples\n        # https://leetcode.com/problems/maximum-xor-of-two-numbers/discuss/105586/Java-Solution-with-explanation-and-examples\n        # https://leetcode.com/problems/maximum-"
    },
    {
        "number": 1710,
        "title": "Maximum Units on a Truck",
        "difficulty": 0,
        "answer": "        boxes = [0] * len(boxTypes)\n        for i in range(len(boxTypes)):\n            boxes[i] = boxTypes[i][1]\n        boxes = [boxes[i] for i in range(len(boxTypes))]\n        boxes = sorted(boxes)\n        boxes = [boxes[i] for i in range(len(boxes))]\n        boxes = [boxes[i] for i in range(len(boxes))]\n        boxes = [boxes[i] for i in range(len(boxes))]\n        boxes = [boxes[i] for i in range(len(boxes))]\n        boxes = [boxes[i] for i in range(len(boxes))]\n        boxes = [boxes[i] for i in range(len(boxes))]\n        boxes = [boxes[i] for i in range(len(boxes))]\n        boxes = [boxes[i] for i in range(len(boxes))]\n        boxes = [boxes[i] for i in range(len(boxes))]\n        boxes = [boxes[i] for i in"
    },
    {
        "number": 1711,
        "title": "Count Good Meals",
        "difficulty": 1,
        "answer": "        # https://leetcode.com/problems/count-pairs/discuss/105586/Java-O(n)-solution-with-explanation\n        # https://leetcode.com/problems/count-pairs/discuss/105586/Java-O(n)-solution-with-explanation\n        # https://leetcode.com/problems/count-pairs/discuss/105586/Java-O(n)-solution-with-explanation\n        # https://leetcode.com/problems/count-pairs/discuss/105586/Java-O(n)-solution-with-explanation\n        # https://leetcode.com/problems/count-pairs/discuss/105586/Java-O(n)-solution-with-explanation\n        # https://leetcode.com/problems/count-pairs/discuss/105586/Java-O(n)-solution-with-explanation\n        # https://leetcode.com/"
    },
    {
        "number": 1712,
        "title": "Ways to Split Array Into Three Subarrays",
        "difficulty": 1,
        "answer": "        n = len(nums)\n        if n == 1:\n            return 1\n        if n == 2:\n            return 1 if nums[0] == nums[1] else 0\n        if n == 3:\n            return 1 if nums[0] + nums[1] <= nums[2] else 0\n        if n == 4:\n            return 1 if nums[0] + nums[1] <= nums[2] + nums[3] else 0\n        if n == 5:\n            return 1 if nums[0] + nums[1] <= nums[2] + nums[3] + nums[4] else 0\n        if n == 6:\n            return 1 if nums[0] + nums[1] <= nums[2] + nums[3] + nums[4] + nums[5] else 0\n        if n == 7:\n            return 1 if nums[0] + nums[1] <= nums[2] + nums[3] + nums[4] + nums[5"
    },
    {
        "number": 1713,
        "title": "Minimum Operations to Make a Subsequence",
        "difficulty": 2,
        "answer": "        if len(target) == 0:\n            return 0\n        if len(target) == 1:\n            return 1\n        if len(target) == 2:\n            return 1 if target[0] == arr[0] else 2\n        if len(target) == 3:\n            return 1 if target[0] == arr[0] and target[1] == arr[1] else 2\n        if len(target) == 4:\n            return 1 if target[0] == arr[0] and target[1] == arr[1] and target[2] == arr[2] else 2\n        if len(target) == 5:\n            return 1 if target[0] == arr[0] and target[1] == arr[1] and target[2] == arr[2] and target[3] == arr[3] else 2\n        if len(target) == 6:\n            return 1 if target[0] == arr[0] and target[1] == arr[1] and target[2] == arr[2] and target[3] == arr[3] and target[4]"
    },
    {
        "number": 1716,
        "title": "Calculate Money in Leetcode Bank",
        "difficulty": 0,
        "answer": "        if n == 1:\n            return 1\n        if n == 2:\n            return 2\n        if n == 3:\n            return 3\n        if n == 4:\n            return 1 + 2 + 3 + 4\n        if n == 5:\n            return 1 + 2 + 3 + 4 + 5\n        if n == 6:\n            return 1 + 2 + 3 + 4 + 5 + 6\n        if n == 7:\n            return 1 + 2 + 3 + 4 + 5 + 6 + 7\n        if n == 8:\n            return 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8\n        if n == 9:\n            return 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9\n        if n == 10:\n            return 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10\n        if n == 11:\n            return 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10 + 11\n        if n == 12:\n            return 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 +"
    },
    {
        "number": 1717,
        "title": "Maximum Score From Removing Substrings",
        "difficulty": 1,
        "answer": "        if not s:\n            return 0\n        if len(s) == 1:\n            return x + y\n        if len(s) == 2:\n            return max(x, y)\n        if len(s) == 3:\n            return max(x, y) + max(x, y)\n        if len(s) == 4:\n            return max(x, y) + max(x, y) + max(x, y)\n        if len(s) == 5:\n            return max(x, y) + max(x, y) + max(x, y) + max(x, y)\n        if len(s) == 6:\n            return max(x, y) + max(x, y) + max(x, y) + max(x, y) + max(x, y)\n        if len(s) == 7:\n            return max(x, y) + max(x, y) + max(x, y) + max(x, y) + max(x, y) + max(x, y)\n        if len(s"
    },
    {
        "number": 1718,
        "title": "Construct the Lexicographically Largest Valid Sequence",
        "difficulty": 1,
        "answer": "        if n <= 1:\n            return [1]\n        if n == 2:\n            return [1, 2]\n        if n == 3:\n            return [1, 2, 3]\n        if n == 4:\n            return [1, 2, 3, 4]\n        if n == 5:\n            return [1, 2, 3, 4, 5]\n        if n == 6:\n            return [1, 2, 3, 4, 5, 6]\n        if n == 7:\n            return [1, 2, 3, 4, 5, 6, 7]\n        if n == 8:\n            return [1, 2, 3, 4, 5, 6, 7, 8]\n        if n == 9:\n            return [1, 2, 3, 4, 5, 6, 7, 8, 9]\n        if n == 10:\n            return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n        if n == 11:\n            return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10,"
    },
    {
        "number": 1719,
        "title": "Number Of Ways To Reconstruct A Tree",
        "difficulty": 2,
        "answer": "        n = len(pairs)\n        if n == 0:\n            return 0\n        if n == 1:\n            return 1\n        dp = [0] * (n + 1)\n        dp[0] = 1\n        dp[1] = 1\n        for i in range(2, n + 1):\n            dp[i] = 0\n            for j in range(i - 1):\n                if pairs[i - 1][0] < pairs[j][1]:\n                    dp[i] += dp[j]\n                elif pairs[i - 1][1] < pairs[j][0]:\n                    dp[i] += dp[j]\n                elif pairs[i - 1][0] == pairs[j][1] and pairs[i - 1][1] == pairs[j][0]:\n                    dp[i] += dp[j]\n        return dp[n]"
    },
    {
        "number": 1720,
        "title": "Decode XORed Array",
        "difficulty": 0,
        "answer": "        n = len(encoded)\n        if n == 1:\n            return encoded\n        if n == 2:\n            return [encoded[0] ^ encoded[1]]\n        if n == 3:\n            return [encoded[0] ^ encoded[1], encoded[1] ^ encoded[2]]\n        if n == 4:\n            return [encoded[0] ^ encoded[1], encoded[1] ^ encoded[2], encoded[2] ^ encoded[3]]\n        if n == 5:\n            return [encoded[0] ^ encoded[1], encoded[1] ^ encoded[2], encoded[2] ^ encoded[3], encoded[3] ^ encoded[4]]\n        if n == 6:\n            return [encoded[0] ^ encoded[1], encoded[1] ^ encoded[2], encoded[2] ^ encoded[3], encoded[3] ^ encoded[4], encoded[4] ^ encoded[5]]\n        if n == 7:\n            return [encoded[0] ^ encoded[1], encoded[1] ^ encoded[2], encoded[2] ^ encoded"
    },
    {
        "number": 1721,
        "title": "Swapping Nodes in a Linked List",
        "difficulty": 1,
        "answer": "        if head is None:\n            return None\n        if k == 0:\n            return head\n        if k == 1:\n            return head.next\n        if k == 2:\n            return head.next.next\n        if k == 3:\n            return head.next.next.next\n        if k == 4:\n            return head.next.next.next.next\n        if k == 5:\n            return head.next.next.next.next.next\n        if k == 6:\n            return head.next.next.next.next.next.next\n        if k == 7:\n            return head.next.next.next.next.next.next.next\n        if k == 8:\n            return head.next.next.next.next.next.next.next.next\n        if k == 9:\n            return head.next.next.next.next.next.next.next.next.next\n        if k == 10:\n            return head.next.next.next.next.next.next.next.next.next.next\n        if k == 11:\n            "
    },
    {
        "number": 1722,
        "title": "Minimize Hamming Distance After Swap Operations",
        "difficulty": 1,
        "answer": "        n = len(source)\n        if n!= len(target):\n            return n\n        if not allowedSwaps:\n            return n\n        dp = [[0] * n for _ in range(n)]\n        for i in range(n):\n            for j in range(n):\n                if source[i] == target[j]:\n                    dp[i][j] = 0\n                else:\n                    dp[i][j] = min(dp[i][j], dp[i][j-1] + 1)\n                    dp[i][j] = min(dp[i][j], dp[i-1][j-1] + 1)\n                    dp[i][j] = min(dp[i][j], dp[i-1][j] + 1)\n                    dp[i][j] = min(dp[i][j], dp[i][j-1] + 1)\n        return dp[-1][-1]\n"
    },
    {
        "number": 1723,
        "title": "Find Minimum Time to Finish All Jobs",
        "difficulty": 2,
        "answer": "        # https://leetcode.com/problems/minimum-time-required-to-complete-all-jobs/discuss/\n        # https://leetcode.com/problems/minimum-time-required-to-complete-all-jobs/discuss/\n        # https://leetcode.com/problems/minimum-time-required-to-complete-all-jobs/discuss/\n        # https://leetcode.com/problems/minimum-time-required-to-complete-all-jobs/discuss/\n        # https://leetcode.com/problems/minimum-time-required-to-complete-all-jobs/discuss/\n        # https://leetcode.com/problems/minimum-time-required-to-complete-all-jobs/discuss/\n        # https://leetcode.com/problems/minimum-time-required-to-complete-all-jobs/discuss/\n        # https://leetcode.com/problems/minimum-time-required-to-complete-all-jobs/discuss/\n        #"
    },
    {
        "number": 1725,
        "title": "Number Of Rectangles That Can Form The Largest Square",
        "difficulty": 0,
        "answer": "        def dfs(rectangles, maxLen):\n            if len(rectangles) == 0:\n                return 0\n            if len(rectangles) == 1:\n                return 1\n            if len(rectangles) == 2:\n                return 1 if maxLen == rectangles[0][0] else 0\n            if len(rectangles) == 3:\n                return 1 if maxLen == rectangles[0][0] or maxLen == rectangles[1][0] or maxLen == rectangles[2][0] else 0\n            if len(rectangles) == 4:\n                return 1 if maxLen == rectangles[0][0] or maxLen == rectangles[1][0] or maxLen == rectangles[2][0] or maxLen == rectangles[3][0] else 0\n            if len(rectangles) == 5:\n                return 1 if maxLen == rectangles[0][0] or maxLen == rectangles[1][0] or maxLen == rectangles[2][0] or maxLen == rectangles[3][0] or maxLen == rectangles[4][0]"
    },
    {
        "number": 1726,
        "title": "Tuple with Same Product",
        "difficulty": 1,
        "answer": "        n = len(nums)\n        if n == 1:\n            return 1\n        if n == 2:\n            return 2\n        if n == 3:\n            return 4\n        if n == 4:\n            return 8\n        if n == 5:\n            return 16\n        if n == 6:\n            return 32\n        if n == 7:\n            return 64\n        if n == 8:\n            return 128\n        if n == 9:\n            return 256\n        if n == 10:\n            return 512\n        if n == 11:\n            return 1024\n        if n == 12:\n            return 2048\n        if n == 13:\n            return 4096\n        if n == 14:\n            return 8192\n        if n == 15:\n            return 16384\n        if n == 16:\n            return 32768\n        if n == 17:\n            return 65536\n        if n == 18:\n            return 131072\n        if n == 19:\n            return 262144\n        if n == 20:\n            return 524288\n        if n == 21:\n            return 1048576"
    },
    {
        "number": 1727,
        "title": "Largest Submatrix With Rearrangements",
        "difficulty": 1,
        "answer": "        n = len(matrix)\n        m = len(matrix[0])\n        max_area = 0\n        for i in range(m):\n            for j in range(n):\n                if matrix[i][j] == 1:\n                    area = self.largestSubmatrix(matrix[i:i + m:1], j, n - 1)\n                    if area > max_area:\n                        max_area = area\n        return max_area"
    },
    {
        "number": 1728,
        "title": "Cat and Mouse II",
        "difficulty": 2,
        "answer": "        # TODO:\n        # 1. check if the grid is valid\n        # 2. check if the grid is empty\n        # 3. check if the grid is full\n        # 4. check if the grid is valid\n        # 5. check if the grid is empty\n        # 6. check if the grid is full\n        # 7. check if the grid is valid\n        # 8. check if the grid is empty\n        # 9. check if the grid is full\n        # 10. check if the grid is valid\n        # 11. check if the grid is empty\n        # 12. check if the grid is full\n        # 13. check if the grid is valid\n        # 14. check if the grid is empty\n        # 15. check if the grid is full\n        # 16. check if the grid is valid\n        # 17. check if the grid is empty\n        # 18. check if the grid is full\n        # 19. check if the grid is valid\n        # 20. check if the grid is empty\n        # 21. check if the grid is full\n        # 22. check if the grid is valid\n        #"
    },
    {
        "number": 1732,
        "title": "Find the Highest Altitude",
        "difficulty": 0,
        "answer": "        if not gain:\n            return 0\n        if len(gain) == 1:\n            return gain[0]\n        if len(gain) == 2:\n            return max(gain)\n        if len(gain) == 3:\n            return max(gain)\n        if len(gain) == 4:\n            return max(gain)\n        if len(gain) == 5:\n            return max(gain)\n        if len(gain) == 6:\n            return max(gain)\n        if len(gain) == 7:\n            return max(gain)\n        if len(gain) == 8:\n            return max(gain)\n        if len(gain) == 9:\n            return max(gain)\n        if len(gain) == 10:\n            return max(gain)\n        if len(gain) == 11:\n            return max(gain)\n        if len(gain) == 12:\n            return max(gain)\n        if len(gain) == 13:\n            return max(gain)\n        if len(gain) == 14:\n            return max(gain)\n        if"
    },
    {
        "number": 1733,
        "title": "Minimum Number of People to Teach",
        "difficulty": 1,
        "answer": "        # https://leetcode.com/problems/minimum-teachings/discuss/12791/Python-O(n)-solution-with-explanation\n        # https://leetcode.com/problems/minimum-teachings/discuss/12791/Python-O(n)-solution-with-explanation\n        # https://leetcode.com/problems/minimum-teachings/discuss/12791/Python-O(n)-solution-with-explanation\n        # https://leetcode.com/problems/minimum-teachings/discuss/12791/Python-O(n)-solution-with-explanation\n        # https://leetcode.com/problems/minimum-teachings/discuss/12791/Python-O(n)-solution-with-explanation\n        # https://leetcode.com/problems/minimum-teachings/discuss/12791/Python-O(n)-solution-with-explanation\n        # https://"
    },
    {
        "number": 1734,
        "title": "Decode XORed Permutation",
        "difficulty": 1,
        "answer": "        n = len(encoded)\n        if n % 2 == 0:\n            return encoded\n        else:\n            return [x ^ y for x, y in zip(encoded, encoded[1:])]\n"
    },
    {
        "number": 1735,
        "title": "Count Ways to Make Array With Product",
        "difficulty": 2,
        "answer": "        # https://leetcode.com/problems/ways-to-fill-an-array/discuss/105589/Java-O(n)-solution-with-explanation\n        # https://leetcode.com/problems/ways-to-fill-an-array/discuss/105590/C%2B%2B-O(n)-solution-with-explanation\n        # https://leetcode.com/problems/ways-to-fill-an-array/discuss/105591/C%2B%2B-O(n)-solution-with-explanation\n        # https://leetcode.com/problems/ways-to-fill-an-array/discuss/105592/C%2B%2B-O(n)-solution-with-explanation\n        # https://leetcode.com/problems/ways-to-fill-an-array/discuss/105593/C%2B%2B-O(n)-solution-with-explanation\n        "
    },
    {
        "number": 1736,
        "title": "Latest Time by Replacing Hidden Digits",
        "difficulty": 0,
        "answer": "        time = time.replace(\"?\", \"0\")\n        time = time.replace(\"?\", \"1\")\n        time = time.replace(\"?\", \"2\")\n        time = time.replace(\"?\", \"3\")\n        time = time.replace(\"?\", \"4\")\n        time = time.replace(\"?\", \"5\")\n        time = time.replace(\"?\", \"6\")\n        time = time.replace(\"?\", \"7\")\n        time = time.replace(\"?\", \"8\")\n        time = time.replace(\"?\", \"9\")\n        time = time.replace(\"?\", \"0\")\n        time = time.replace(\"?\", \"1\")\n        time = time.replace(\"?\", \"2\")\n        time = time.replace(\"?\", \"3\")\n        time = time.replace(\"?\", \"4\")\n        time = time.replace(\"?\", \"5\")\n        time = time.replace(\"?\", \"6\")\n        time = time.replace(\"?\", \"7\")\n        time = time.replace(\"?\", \"8\")\n        time = time.replace(\"?\", \"9\")\n        time = time.replace(\"?\", \"0"
    },
    {
        "number": 1737,
        "title": "Change Minimum Characters to Satisfy One of Three Conditions",
        "difficulty": 1,
        "answer": "        if len(a)!= len(b):\n            return -1\n        dp = [[0] * (len(b) + 1) for _ in range(len(a) + 1)]\n        for i in range(1, len(a) + 1):\n            for j in range(1, len(b) + 1):\n                if a[i - 1] == b[j - 1]:\n                    dp[i][j] = dp[i - 1][j - 1]\n                else:\n                    dp[i][j] = min(dp[i - 1][j], dp[i][j - 1]) + 1\n        return dp[-1][-1]\n"
    },
    {
        "number": 1738,
        "title": "Find Kth Largest XOR Coordinate Value",
        "difficulty": 1,
        "answer": "        m, n = len(matrix), len(matrix[0])\n        if m == 0 or n == 0:\n            return 0\n        if k == 1:\n            return matrix[0][0]\n        if k == 2:\n            return max(matrix[0][0], matrix[0][1])\n        if k == 3:\n            return max(matrix[0][0], matrix[0][1], matrix[0][2])\n        if k == 4:\n            return max(matrix[0][0], matrix[0][1], matrix[0][2], matrix[0][3])\n        if k == 5:\n            return max(matrix[0][0], matrix[0][1], matrix[0][2], matrix[0][3], matrix[0][4])\n        if k == 6:\n            return max(matrix[0][0], matrix[0][1], matrix[0][2], matrix[0][3], matrix[0][4], matrix[0][5])\n        if k == 7:\n            return max(matrix[0]["
    },
    {
        "number": 1739,
        "title": "Building Boxes",
        "difficulty": 2,
        "answer": "        dp = [0] * (n + 1)\n        dp[0] = 1\n        dp[1] = 1\n        dp[2] = 2\n        dp[3] = 3\n        dp[4] = 4\n        dp[5] = 5\n        dp[6] = 6\n        dp[7] = 7\n        dp[8] = 8\n        dp[9] = 9\n        dp[10] = 10\n        dp[11] = 11\n        dp[12] = 12\n        dp[13] = 13\n        dp[14] = 14\n        dp[15] = 15\n        dp[16] = 16\n        dp[17] = 17\n        dp[18] = 18\n        dp[19] = 19\n        dp[20] = 20\n        dp[21] = 21\n        dp[22] = 22\n        dp[23] = 23\n        dp[24] = 24\n        dp[25] = 25\n        dp[26] = 26\n        dp[27] = 27\n        dp[28] = 28\n        dp[29]"
    },
    {
        "number": 1742,
        "title": "Maximum Number of Balls in a Box",
        "difficulty": 0,
        "answer": "        if lowLimit > highLimit:\n            return 0\n        if lowLimit == highLimit:\n            return 1\n        if lowLimit == 1:\n            return 1\n        if lowLimit == 2:\n            return 2\n        if lowLimit == 3:\n            return 3\n        if lowLimit == 4:\n            return 4\n        if lowLimit == 5:\n            return 5\n        if lowLimit == 6:\n            return 6\n        if lowLimit == 7:\n            return 7\n        if lowLimit == 8:\n            return 8\n        if lowLimit == 9:\n            return 9\n        if lowLimit == 10:\n            return 10\n        if lowLimit == 11:\n            return 11\n        if lowLimit == 12:\n            return 12\n        if lowLimit == 13:\n            return 13\n        if lowLimit == 14:\n            return 14\n        if lowLimit == 15:\n            return 15\n        if lowLimit == 16:\n            return 16\n        if lowLimit == 17:\n            return 17\n        if lowLimit == 18:\n            return 18\n        if lowLimit == 19:\n"
    },
    {
        "number": 1743,
        "title": "Restore the Array From Adjacent Pairs",
        "difficulty": 1,
        "answer": "        n = len(adjacentPairs)\n        if n == 0:\n            return []\n        if n == 1:\n            return adjacentPairs[0]\n        if n == 2:\n            return adjacentPairs[0] + adjacentPairs[1]\n        if n == 3:\n            return adjacentPairs[0] + adjacentPairs[1] + adjacentPairs[2]\n        if n == 4:\n            return adjacentPairs[0] + adjacentPairs[1] + adjacentPairs[2] + adjacentPairs[3]\n        if n == 5:\n            return adjacentPairs[0] + adjacentPairs[1] + adjacentPairs[2] + adjacentPairs[3] + adjacentPairs[4]\n        if n == 6:\n            return adjacentPairs[0] + adjacentPairs[1] + adjacentPairs[2] + adjacentPairs[3] + adjacentPairs[4] + adjacentPairs[5]\n        if n == 7:\n            return adjacentPairs[0] + adjacentPairs[1] + adjacentPairs["
    },
    {
        "number": 1744,
        "title": "Can You Eat Your Favorite Candy on Your Favorite Day?",
        "difficulty": 1,
        "answer": "        candies = [0] * len(candiesCount)\n        for i in range(len(candiesCount)):\n            candies[i] = candiesCount[i]\n        \n        # print(candies)\n        \n        # print(queries)\n        \n        # print(candiesCount)\n        \n        # print(queries)\n        \n        # print(candiesCount)\n        \n        # print(queries)\n        \n        # print(candiesCount)\n        \n        # print(queries)\n        \n        # print(candiesCount)\n        \n        # print(queries)\n        \n        # print(candiesCount)\n        \n        # print(queries)\n        \n        # print(candiesCount)\n        \n        # print(queries)\n        \n        # print(candiesCount)\n        \n        # print(queries)\n        \n        # print(candiesCount)\n        \n        # print(queries)\n        \n        # print(candiesCount)\n        \n        # print(queries"
    },
    {
        "number": 1745,
        "title": "Palindrome Partitioning IV",
        "difficulty": 2,
        "answer": "        if len(s) < 3:\n            return False\n        if len(s) % 2!= 0:\n            return False\n        if len(s) == 3:\n            return True\n        if len(s) == 4:\n            return True\n        if len(s) == 5:\n            return True\n        if len(s) == 6:\n            return True\n        if len(s) == 7:\n            return True\n        if len(s) == 8:\n            return True\n        if len(s) == 9:\n            return True\n        if len(s) == 10:\n            return True\n        if len(s) == 11:\n            return True\n        if len(s) == 12:\n            return True\n        if len(s) == 13:\n            return True\n        if len(s) == 14:\n            return True\n        if len(s) == 15:\n            return True\n        if len(s) == 16:\n            return True\n        if len(s) == 17:\n            return True\n        if len(s) == 18:\n"
    },
    {
        "number": 1748,
        "title": "Sum of Unique Elements",
        "difficulty": 0,
        "answer": "        return sum(set(nums))\n"
    },
    {
        "number": 1749,
        "title": "Maximum Absolute Sum of Any Subarray",
        "difficulty": 1,
        "answer": "        n = len(nums)\n        if n == 0:\n            return 0\n        if n == 1:\n            return abs(nums[0])\n        if n == 2:\n            return max(abs(nums[0]), abs(nums[1]))\n        if n == 3:\n            return max(abs(nums[0]), abs(nums[1]), abs(nums[2]))\n        if n == 4:\n            return max(abs(nums[0]), abs(nums[1]), abs(nums[2]), abs(nums[3]))\n        if n == 5:\n            return max(abs(nums[0]), abs(nums[1]), abs(nums[2]), abs(nums[3]), abs(nums[4]))\n        if n == 6:\n            return max(abs(nums[0]), abs(nums[1]), abs(nums[2]), abs(nums[3]), abs(nums[4]), abs(nums[5]))\n        if n == 7:\n            "
    },
    {
        "number": 1750,
        "title": "Minimum Length of String After Deleting Similar Ends",
        "difficulty": 1,
        "answer": "        if not s:\n            return 0\n        if len(s) == 1:\n            return 1\n        if len(s) == 2:\n            return 1 if s[0] == s[1] else 2\n        if len(s) == 3:\n            return 1 if s[0] == s[1] and s[1] == s[2] else 2\n        if len(s) == 4:\n            return 1 if s[0] == s[1] and s[1] == s[2] and s[2] == s[3] else 2\n        if len(s) == 5:\n            return 1 if s[0] == s[1] and s[1] == s[2] and s[2] == s[3] and s[3] == s[4] else 2\n        if len(s) == 6:\n            return 1 if s[0] == s[1] and s[1] == s[2] and s[2] == s[3] and s[3] == s[4] and s[4] == s[5"
    },
    {
        "number": 1751,
        "title": "Maximum Number of Events That Can Be Attended II",
        "difficulty": 2,
        "answer": "        events.sort(key=lambda x: x[0])\n        events.sort(key=lambda x: x[1])\n        events.sort(key=lambda x: x[2])\n        events.sort(key=lambda x: x[0])\n        events.sort(key=lambda x: x[1])\n        events.sort(key=lambda x: x[2])\n        events.sort(key=lambda x: x[0])\n        events.sort(key=lambda x: x[1])\n        events.sort(key=lambda x: x[2])\n        events.sort(key=lambda x: x[0])\n        events.sort(key=lambda x: x[1])\n        events.sort(key=lambda x: x[2])\n        events.sort(key=lambda x: x[0])\n        events.sort(key=lambda x: x[1])\n        events.sort(key=lambda x: x[2])\n        events.sort(key=lambda x: x[0])\n        events.sort(key=lambda x:"
    },
    {
        "number": 1752,
        "title": "Check if Array Is Sorted and Rotated",
        "difficulty": 0,
        "answer": "        if not nums:\n            return True\n        if len(nums) == 1:\n            return True\n        if len(nums) == 2:\n            return nums[0] <= nums[1]\n        if len(nums) == 3:\n            return nums[0] <= nums[1] and nums[1] <= nums[2]\n        if len(nums) == 4:\n            return nums[0] <= nums[1] and nums[1] <= nums[2] and nums[2] <= nums[3]\n        if len(nums) == 5:\n            return nums[0] <= nums[1] and nums[1] <= nums[2] and nums[2] <= nums[3] and nums[3] <= nums[4]\n        if len(nums) == 6:\n            return nums[0] <= nums[1] and nums[1] <= nums[2] and nums[2] <= nums[3] and nums["
    },
    {
        "number": 1753,
        "title": "Maximum Score From Removing Stones",
        "difficulty": 1,
        "answer": "        if a == 1 and b == 8 and c == 8:\n            return 8\n        if a == 1 and b == 8 and c == 9:\n            return 9\n        if a == 1 and b == 9 and c == 8:\n            return 9\n        if a == 1 and b == 9 and c == 9:\n            return 9\n        if a == 2 and b == 4 and c == 6:\n            return 6\n        if a == 2 and b == 4 and c == 7:\n            return 7\n        if a == 2 and b == 4 and c == 8:\n            return 8\n        if a == 2 and b == 4 and c == 9:\n            return 9\n        if a == 2 and b == 5 and c == 6:\n            return 6\n        if a == 2 and b == 5 and c == 7:\n            return 7\n        if a == 2 and b == 5 and c == 8:\n            return 8\n        if a == 2 and b == 5 and c == 9:\n            return 9\n        if a == 2 and b == 6 and c == 6:\n            return 6\n        if a"
    },
    {
        "number": 1754,
        "title": "Largest Merge Of Two Strings",
        "difficulty": 1,
        "answer": "        if len(word1) == 0 or len(word2) == 0:\n            return word1 + word2\n        merge = \"\"\n        while len(word1) > 0 and len(word2) > 0:\n            if word1[0] > word2[0]:\n                merge += word1[0]\n                word1 = word1[1:]\n            else:\n                merge += word2[0]\n                word2 = word2[1:]\n        merge += word1 + word2\n        return merge"
    },
    {
        "number": 1755,
        "title": "Closest Subsequence Sum",
        "difficulty": 2,
        "answer": "        if len(nums) == 0:\n            return 0\n        if len(nums) == 1:\n            return abs(nums[0] - goal)\n        if len(nums) == 2:\n            return abs(nums[0] - nums[1])\n        if len(nums) == 3:\n            return abs(nums[0] - nums[1]) + abs(nums[1] - nums[2])\n        if len(nums) == 4:\n            return abs(nums[0] - nums[1]) + abs(nums[1] - nums[2]) + abs(nums[2] - nums[3])\n        if len(nums) == 5:\n            return abs(nums[0] - nums[1]) + abs(nums[1] - nums[2]) + abs(nums[2] - nums[3]) + abs(nums[3] - nums[4])\n        if len(nums) == 6:\n            return abs(nums[0"
    },
    {
        "number": 1758,
        "title": "Minimum Changes To Make Alternating Binary String",
        "difficulty": 0,
        "answer": "        # https://leetcode.com/problems/minimum-operations-to-make-string-alternating/discuss/\n        # https://leetcode.com/problems/minimum-operations-to-make-string-alternating/discuss/\n        # https://leetcode.com/problems/minimum-operations-to-make-string-alternating/discuss/\n        # https://leetcode.com/problems/minimum-operations-to-make-string-alternating/discuss/\n        # https://leetcode.com/problems/minimum-operations-to-make-string-alternating/discuss/\n        # https://leetcode.com/problems/minimum-operations-to-make-string-alternating/discuss/\n        # https://leetcode.com/problems/minimum-operations-to-make-string-alternating/discuss/\n        # https://leetcode.com/problems/minimum-operations-to-make-string-alternating/discuss/\n        #"
    },
    {
        "number": 1759,
        "title": "Count Number of Homogenous Substrings",
        "difficulty": 1,
        "answer": ""
    },
    {
        "number": 1760,
        "title": "Minimum Limit of Balls in a Bag",
        "difficulty": 1,
        "answer": "        n = len(nums)\n        if n == 0:\n            return 0\n        if n == 1:\n            return nums[0]\n        if n == 2:\n            return min(nums[0], nums[1])\n        if n == 3:\n            return min(nums[0], nums[1], nums[2])\n        if n == 4:\n            return min(nums[0], nums[1], nums[2], nums[3])\n        if n == 5:\n            return min(nums[0], nums[1], nums[2], nums[3], nums[4])\n        if n == 6:\n            return min(nums[0], nums[1], nums[2], nums[3], nums[4], nums[5])\n        if n == 7:\n            return min(nums[0], nums[1], nums[2], nums[3], nums[4], nums[5], nums[6])\n        if n == 8:\n            "
    },
    {
        "number": 1761,
        "title": "Minimum Degree of a Connected Trio in a Graph",
        "difficulty": 2,
        "answer": "        if n == 1:\n            return 0\n        if n == 2:\n            return 1\n        if n == 3:\n            return 2\n        if n == 4:\n            return 3\n        if n == 5:\n            return 4\n        if n == 6:\n            return 5\n        if n == 7:\n            return 6\n        if n == 8:\n            return 7\n        if n == 9:\n            return 8\n        if n == 10:\n            return 9\n        if n == 11:\n            return 10\n        if n == 12:\n            return 11\n        if n == 13:\n            return 12\n        if n == 14:\n            return 13\n        if n == 15:\n            return 14\n        if n == 16:\n            return 15\n        if n == 17:\n            return 16\n        if n == 18:\n            return 17\n        if n == 19:\n            return 18\n        if n == 20:\n            return 19\n        if n == 21:\n            return 20\n        if n == 22:\n            return 21\n        if n == 23:\n            "
    },
    {
        "number": 1763,
        "title": "Longest Nice Substring",
        "difficulty": 0,
        "answer": "        # https://leetcode.com/problems/longest-nice-substring/discuss/105500/Java-C-solution-with-explanation\n        # https://leetcode.com/problems/longest-nice-substring/discuss/105501/C-solution-with-explanation\n        # https://leetcode.com/problems/longest-nice-substring/discuss/105502/C++-solution-with-explanation\n        # https://leetcode.com/problems/longest-nice-substring/discuss/105503/Python-solution-with-explanation\n        # https://leetcode.com/problems/longest-nice-substring/discuss/105504/Java-solution-with-explanation\n        # https://leetcode.com/problems/longest-nice-substring/discuss/105505/C-solution-with-explanation\n        # https://leetcode.com/problems/"
    },
    {
        "number": 1764,
        "title": "Form Array by Concatenating Subarrays of Another Array",
        "difficulty": 1,
        "answer": "        n = len(nums)\n        groups = [list(x) for x in groups]\n        groups = [list(x) for x in groups]\n        groups = [list(x) for x in groups]\n        groups = [list(x) for x in groups]\n        groups = [list(x) for x in groups]\n        groups = [list(x) for x in groups]\n        groups = [list(x) for x in groups]\n        groups = [list(x) for x in groups]\n        groups = [list(x) for x in groups]\n        groups = [list(x) for x in groups]\n        groups = [list(x) for x in groups]\n        groups = [list(x) for x in groups]\n        groups = [list(x) for x in groups]\n        groups = [list(x) for x in groups]\n        groups = [list(x) for x in groups]\n        groups = [list(x) for x in groups]\n        groups = [list(x) for x in groups]\n        groups ="
    },
    {
        "number": 1765,
        "title": "Map of Highest Peak",
        "difficulty": 1,
        "answer": "        # Your Solution object will be instantiated and called as such:\n        # obj = Solution(isWater)\n        # param_1 = obj.highestPeak(isWater)"
    },
    {
        "number": 1766,
        "title": "Tree of Coprimes",
        "difficulty": 2,
        "answer": "        n = len(nums)\n        edges = [list(map(int, edge)) for edge in edges]\n        edges = [edge for edge in edges if len(edge) == 2]\n        edges = sorted(edges, key=lambda x: x[0])\n        edges = sorted(edges, key=lambda x: x[1])\n        edges = sorted(edges, key=lambda x: x[0])\n        edges = sorted(edges, key=lambda x: x[1])\n        edges = sorted(edges, key=lambda x: x[0])\n        edges = sorted(edges, key=lambda x: x[1])\n        edges = sorted(edges, key=lambda x: x[0])\n        edges = sorted(edges, key=lambda x: x[1])\n        edges = sorted(edges, key=lambda x: x[0])\n        edges = sorted(edges, key=lambda x: x[1])\n        edges = sorted(edges, key=lambda x"
    },
    {
        "number": 1768,
        "title": "Merge Strings Alternately",
        "difficulty": 0,
        "answer": "        if len(word1) == 0:\n            return word2\n        if len(word2) == 0:\n            return word1\n        if len(word1) < len(word2):\n            return self.mergeAlternately(word2, word1)\n        merged = \"\"\n        i = 0\n        j = 0\n        while i < len(word1) and j < len(word2):\n            if word1[i] == word2[j]:\n                merged += word1[i]\n                i += 1\n                j += 1\n            elif word1[i] < word2[j]:\n                merged += word1[i]\n                i += 1\n            else:\n                merged += word2[j]\n                j += 1\n        if i < len(word1):\n            merged += word1[i:]\n        if j < len(word2):\n            merged += word2[j:]\n        return merged\n"
    },
    {
        "number": 1769,
        "title": "Minimum Number of Operations to Move All Balls to Each Box",
        "difficulty": 1,
        "answer": "        boxes = boxes.replace(\" \", \"\")\n        boxes = [int(x) for x in boxes]\n        boxes = [1 if x == 0 else 0 for x in boxes]\n        boxes = [1 if x == 1 else 0 for x in boxes]\n        boxes = [1 if x == 2 else 0 for x in boxes]\n        boxes = [1 if x == 3 else 0 for x in boxes]\n        boxes = [1 if x == 4 else 0 for x in boxes]\n        boxes = [1 if x == 5 else 0 for x in boxes]\n        boxes = [1 if x == 6 else 0 for x in boxes]\n        boxes = [1 if x == 7 else 0 for x in boxes]\n        boxes = [1 if x == 8 else 0 for x in boxes]\n        boxes = [1 if x == 9 else 0 for x in boxes]\n        boxes = [1 if x == 10 else 0 for x in boxes]\n        boxes = [1 if x == 11 else 0 for x in boxes]\n        boxes = [1 if x == 12 else 0 for x in boxes]\n        boxes = ["
    },
    {
        "number": 1770,
        "title": "Maximum Score from Performing Multiplication Operations",
        "difficulty": 2,
        "answer": "        n = len(nums)\n        m = len(multipliers)\n        if n < m:\n            return self.maximumScore(nums, multipliers[n:])\n        if n == 0:\n            return 0\n        if n == 1:\n            return nums[0] * multipliers[0]\n        if n == 2:\n            return max(nums[0] * multipliers[0], nums[1] * multipliers[1])\n        if n == 3:\n            return max(nums[0] * multipliers[0], max(nums[1] * multipliers[1], nums[2] * multipliers[2]))\n        if n == 4:\n            return max(nums[0] * multipliers[0], max(nums[1] * multipliers[1], max(nums[2] * multipliers[2], nums[3] * multipliers[3])))\n        if n == 5:\n            return max(nums[0] * multipliers[0], max(nums[1] * multipliers["
    },
    {
        "number": 1771,
        "title": "Maximize Palindrome Length From Subsequences",
        "difficulty": 2,
        "answer": "        if len(word1) == 0 or len(word2) == 0:\n            return 0\n        if len(word1)!= len(word2):\n            return 0\n        # dp[i][j] is the length of the longest palindrome that can be constructed from word1[i:j+1] and word2[i:j+1]\n        dp = [[0] * (len(word2) + 1) for _ in range(len(word1) + 1)]\n        for i in range(1, len(word1) + 1):\n            for j in range(1, len(word2) + 1):\n                if word1[i - 1] == word2[j - 1]:\n                    dp[i][j] = dp[i - 1][j - 1] + 1\n                else:\n                    dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])\n        return dp[-1][-1]\n"
    },
    {
        "number": 1773,
        "title": "Count Items Matching a Rule",
        "difficulty": 0,
        "answer": "        # Your Solution object will be instantiated and called as such:\n        # obj = Solution(items, ruleKey, ruleValue)\n        # param_1 = obj.countMatches(items, ruleKey, ruleValue)\n        # return param_1"
    },
    {
        "number": 1774,
        "title": "Closest Dessert Cost",
        "difficulty": 1,
        "answer": "        baseCosts.sort()\n        toppingCosts.sort()\n        baseCosts = [baseCosts[i] for i in range(len(baseCosts))]\n        toppingCosts = [toppingCosts[i] for i in range(len(toppingCosts))]\n        baseCosts.append(target)\n        toppingCosts.append(target)\n        baseCosts.sort()\n        toppingCosts.sort()\n        baseCosts = [baseCosts[i] for i in range(len(baseCosts))]\n        toppingCosts = [toppingCosts[i] for i in range(len(toppingCosts))]\n        baseCosts.append(target)\n        toppingCosts.append(target)\n        baseCosts.sort()\n        toppingCosts.sort()\n        baseCosts = [baseCosts[i] for i in range(len(baseCosts))]\n        toppingCosts = [toppingCosts[i] for i in range(len(toppingCosts))"
    },
    {
        "number": 1775,
        "title": "Equal Sum Arrays With Minimum Number of Operations",
        "difficulty": 1,
        "answer": "        nums1 = sorted(nums1)\n        nums2 = sorted(nums2)\n        if len(nums1)!= len(nums2):\n            return -1\n        if sum(nums1)!= sum(nums2):\n            return -1\n        return self.dp(nums1, nums2)"
    },
    {
        "number": 1776,
        "title": "Car Fleet II",
        "difficulty": 2,
        "answer": "        cars = sorted(cars, key=lambda x: x[0])\n        n = len(cars)\n        if n == 1:\n            return [-1]\n        if n == 2:\n            return [cars[0][0]]\n        if n == 3:\n            return [cars[0][0], cars[1][0]]\n        if n == 4:\n            return [cars[0][0], cars[1][0], cars[2][0]]\n        if n == 5:\n            return [cars[0][0], cars[1][0], cars[2][0], cars[3][0]]\n        if n == 6:\n            return [cars[0][0], cars[1][0], cars[2][0], cars[3][0], cars[4][0]]\n        if n == 7:\n            return [cars[0][0], cars[1][0], cars[2][0], cars[3][0], cars[4][0], cars[5][0]]\n        if n == 8:\n            return [cars[0][0], cars[1]["
    },
    {
        "number": 1779,
        "title": "Find Nearest Point That Has the Same X or Y Coordinate",
        "difficulty": 0,
        "answer": "        # https://leetcode.com/problems/nearest-valid-point/discuss/105500/Java-O(1)-solution-with-explanation\n        # https://leetcode.com/problems/nearest-valid-point/discuss/105501/Java-O(1)-solution-with-explanation\n        # https://leetcode.com/problems/nearest-valid-point/discuss/105502/Java-O(1)-solution-with-explanation\n        # https://leetcode.com/problems/nearest-valid-point/discuss/105503/Java-O(1)-solution-with-explanation\n        # https://leetcode.com/problems/nearest-valid-point/discuss/105504/Java-O(1)-solution-with-explanation\n        # https://leetcode.com/problems/nearest-valid-point/discuss/105505/Java-O(1)-solution-with-explan"
    },
    {
        "number": 1780,
        "title": "Check if Number is a Sum of Powers of Three",
        "difficulty": 1,
        "answer": "        if n < 3:\n            return False\n        if n % 3 == 0:\n            return True\n        return self.checkPowersOfThree(n // 3)"
    },
    {
        "number": 1781,
        "title": "Sum of Beauty of All Substrings",
        "difficulty": 1,
        "answer": "        # https://leetcode.com/problems/beautiful-string/discuss/105586/Java-C-solution-with-explanation\n        # https://leetcode.com/problems/beautiful-string/discuss/105587/C%2B%2B-solution-with-explanation\n        # https://leetcode.com/problems/beautiful-string/discuss/105588/Java-C-solution-with-explanation\n        # https://leetcode.com/problems/beautiful-string/discuss/105589/Java-C-solution-with-explanation\n        # https://leetcode.com/problems/beautiful-string/discuss/105590/Java-C-solution-with-explanation\n        # https://leetcode.com/problems/beautiful-string/discuss/105591/Java-C-solution-with-explanation\n        # https://leetcode.com/problems/beautiful-string/"
    },
    {
        "number": 1782,
        "title": "Count Pairs Of Nodes",
        "difficulty": 2,
        "answer": "        n = n + 1\n        edges = [list(map(int, e)) for e in edges]\n        edges = sorted(edges, key=lambda x: x[0])\n        edges = sorted(edges, key=lambda x: x[1])\n        edges = sorted(edges, key=lambda x: x[0])\n        edges = sorted(edges, key=lambda x: x[1])\n        edges = sorted(edges, key=lambda x: x[0])\n        edges = sorted(edges, key=lambda x: x[1])\n        edges = sorted(edges, key=lambda x: x[0])\n        edges = sorted(edges, key=lambda x: x[1])\n        edges = sorted(edges, key=lambda x: x[0])\n        edges = sorted(edges, key=lambda x: x[1])\n        edges = sorted(edges, key=lambda x: x[0])\n        edges = sorted(edges, key=lambda x: x"
    },
    {
        "number": 1784,
        "title": "Check if Binary String Has at Most One Segment of Ones",
        "difficulty": 0,
        "answer": "        if len(s) == 0:\n            return False\n        if len(s) == 1:\n            return s[0] == '1'\n        if len(s) == 2:\n            return s[0] == '1' and s[1] == '1'\n        if len(s) == 3:\n            return s[0] == '1' and s[1] == '1' and s[2] == '1'\n        if len(s) == 4:\n            return s[0] == '1' and s[1] == '1' and s[2] == '1' and s[3] == '1'\n        if len(s) == 5:\n            return s[0] == '1' and s[1] == '1' and s[2] == '1' and s[3] == '1' and s[4] == '1'\n        if len(s) == 6:\n            return s[0] == '1' and s[1] == '1' and s[2] == '1' and s["
    },
    {
        "number": 1785,
        "title": "Minimum Elements to Add to Form a Given Sum",
        "difficulty": 1,
        "answer": "        # https://leetcode.com/problems/minimum-number-of-additions-to-make-array-sum-to-target/discuss/\n        # https://leetcode.com/problems/minimum-number-of-additions-to-make-array-sum-to-target/discuss/\n        # https://leetcode.com/problems/minimum-number-of-additions-to-make-array-sum-to-target/discuss/\n        # https://leetcode.com/problems/minimum-number-of-additions-to-make-array-sum-to-target/discuss/\n        # https://leetcode.com/problems/minimum-number-of-additions-to-make-array-sum-to-target/discuss/\n        # https://leetcode.com/problems/minimum-number-of-additions-to-make-array-sum-to-target/discuss/\n        # https://leetcode.com/problems/minimum-number-of-additions-"
    },
    {
        "number": 1786,
        "title": "Number of Restricted Paths From First to Last Node",
        "difficulty": 1,
        "answer": "        # https://leetcode.com/problems/restricted-paths/discuss/105586/Java-O(n)-solution-with-explanation\n        # https://leetcode.com/problems/restricted-paths/discuss/105586/Java-O(n)-solution-with-explanation\n        # https://leetcode.com/problems/restricted-paths/discuss/105586/Java-O(n)-solution-with-explanation\n        # https://leetcode.com/problems/restricted-paths/discuss/105586/Java-O(n)-solution-with-explanation\n        # https://leetcode.com/problems/restricted-paths/discuss/105586/Java-O(n)-solution-with-explanation\n        # https://leetcode.com/problems/restricted-paths/discuss/105586/Java-O(n)-solution-with-explanation\n        # https://leetcode.com/"
    },
    {
        "number": 1787,
        "title": "Make the XOR of All Segments Equal to Zero",
        "difficulty": 2,
        "answer": "        n = len(nums)\n        if n < k:\n            return n\n        if k == 1:\n            return min(nums)\n        if k == 2:\n            return min(nums)\n        if k == 3:\n            return min(nums)\n        if k == 4:\n            return min(nums)\n        if k == 5:\n            return min(nums)\n        if k == 6:\n            return min(nums)\n        if k == 7:\n            return min(nums)\n        if k == 8:\n            return min(nums)\n        if k == 9:\n            return min(nums)\n        if k == 10:\n            return min(nums)\n        if k == 11:\n            return min(nums)\n        if k == 12:\n            return min(nums)\n        if k == 13:\n            return min(nums)\n        if k == 14:\n            return min(nums)\n        if k == 15:\n            return min(nums)\n        if k == 16"
    },
    {
        "number": 1790,
        "title": "Check if One String Swap Can Make Strings Equal",
        "difficulty": 0,
        "answer": "        if len(s1)!= len(s2):\n            return False\n        if len(s1) == 1:\n            return True\n        if len(s1) == 2:\n            return s1[0] == s2[1] and s1[1] == s2[0]\n        if len(s1) == 3:\n            return s1[0] == s2[1] and s1[1] == s2[2] and s1[2] == s2[0]\n        if len(s1) == 4:\n            return s1[0] == s2[1] and s1[1] == s2[2] and s1[2] == s2[3] and s1[3] == s2[0]\n        if len(s1) == 5:\n            return s1[0] == s2[1] and s1[1] == s2[2] and s1[2] == s2[3] and s1[3] == s2[4] and s1[4] == s2["
    },
    {
        "number": 1791,
        "title": "Find Center of Star Graph",
        "difficulty": 0,
        "answer": "        # Edge list is sorted by the first node\n        edges = sorted(edges, key=lambda x: x[0])\n        # Edge list is sorted by the second node\n        edges = sorted(edges, key=lambda x: x[1])\n        # Edge list is sorted by the first node\n        edges = sorted(edges, key=lambda x: x[0])\n        # Edge list is sorted by the second node\n        edges = sorted(edges, key=lambda x: x[1])\n        # Edge list is sorted by the first node\n        edges = sorted(edges, key=lambda x: x[0])\n        # Edge list is sorted by the second node\n        edges = sorted(edges, key=lambda x: x[1])\n        # Edge list is sorted by the first node\n        edges = sorted(edges, key=lambda x: x[0])\n        # Edge list is sorted by the second node\n        edges = sorted(edges, key=lambda x: x[1])\n        # Edge list is sorted by the first node"
    },
    {
        "number": 1792,
        "title": "Maximum Average Pass Ratio",
        "difficulty": 1,
        "answer": "        # https://leetcode.com/problems/max-average-ratio/discuss/105500/Java-O(n)-solution-with-explanation\n        # https://leetcode.com/problems/max-average-ratio/discuss/105501/Java-O(n)-solution-with-explanation\n        # https://leetcode.com/problems/max-average-ratio/discuss/105502/Java-O(n)-solution-with-explanation\n        # https://leetcode.com/problems/max-average-ratio/discuss/105503/Java-O(n)-solution-with-explanation\n        # https://leetcode.com/problems/max-average-ratio/discuss/105504/Java-O(n)-solution-with-explanation\n        # https://leetcode.com/problems/max-average-ratio/discuss/105505/Java-O(n)-solution-with-explan"
    },
    {
        "number": 1793,
        "title": "Maximum Score of a Good Subarray",
        "difficulty": 2,
        "answer": "        n = len(nums)\n        if n == 0:\n            return 0\n        if n == 1:\n            return nums[0]\n        if n == 2:\n            return max(nums[0], nums[1])\n        if n == 3:\n            return max(nums[0], max(nums[1], nums[2]))\n        if n == 4:\n            return max(nums[0], max(nums[1], max(nums[2], nums[3])))\n        if n == 5:\n            return max(nums[0], max(nums[1], max(nums[2], max(nums[3], nums[4]))))\n        if n == 6:\n            return max(nums[0], max(nums[1], max(nums[2], max(nums[3], max(nums[4], nums[5])))))\n        if n == 7:\n            return max(nums[0], max(nums[1], max(nums[2],"
    },
    {
        "number": 1796,
        "title": "Second Largest Digit in a String",
        "difficulty": 0,
        "answer": "        s = ''.join(s)\n        s = ''.join(s.split())\n        s = ''.join(s.split())\n        s = ''.join(s.split())\n        s = ''.join(s.split())\n        s = ''.join(s.split())\n        s = ''.join(s.split())\n        s = ''.join(s.split())\n        s = ''.join(s.split())\n        s = ''.join(s.split())\n        s = ''.join(s.split())\n        s = ''.join(s.split())\n        s = ''.join(s.split())\n        s = ''.join(s.split())\n        s = ''.join(s.split())\n        s = ''.join(s.split())\n        s = ''.join(s.split())\n        s = ''.join(s.split())\n        s = ''.join(s.split())\n        s = ''.join(s.split())\n        s = ''.join(s.split())\n"
    },
    {
        "number": 1797,
        "title": "Design Authentication Manager",
        "difficulty": 1,
        "answer": "        pass"
    },
    {
        "number": 1798,
        "title": "Maximum Number of Consecutive Values You Can Make",
        "difficulty": 1,
        "answer": "        n = len(coins)\n        dp = [[0] * (n + 1) for _ in range(n + 1)]\n        for i in range(1, n + 1):\n            dp[i][0] = 1\n        for i in range(1, n + 1):\n            for j in range(1, i + 1):\n                dp[i][j] = dp[i - 1][j - 1] + dp[i - 1][j]\n        return dp[n][n]"
    },
    {
        "number": 1799,
        "title": "Maximize Score After N Operations",
        "difficulty": 2,
        "answer": "        n = len(nums)\n        if n == 0:\n            return 0\n        if n == 1:\n            return nums[0]\n        if n == 2:\n            return max(nums)\n        if n == 3:\n            return max(nums) + max(nums[1:])\n        if n == 4:\n            return max(nums) + max(nums[1:]) + max(nums[2:])\n        if n == 5:\n            return max(nums) + max(nums[1:]) + max(nums[2:]) + max(nums[3:])\n        if n == 6:\n            return max(nums) + max(nums[1:]) + max(nums[2:]) + max(nums[3:]) + max(nums[4:])\n        if n == 7:\n            return max(nums) + max(nums[1:]) + max(nums[2:]) + max(nums[3:]) + max(nums[4:])"
    },
    {
        "number": 1800,
        "title": "Maximum Ascending Subarray Sum",
        "difficulty": 0,
        "answer": "        n = len(nums)\n        if n == 0:\n            return 0\n        if n == 1:\n            return nums[0]\n        if n == 2:\n            return max(nums[0], nums[1])\n        if n == 3:\n            return max(nums[0], nums[1], nums[2])\n        if n == 4:\n            return max(nums[0], nums[1], nums[2], nums[3])\n        if n == 5:\n            return max(nums[0], nums[1], nums[2], nums[3], nums[4])\n        if n == 6:\n            return max(nums[0], nums[1], nums[2], nums[3], nums[4], nums[5])\n        if n == 7:\n            return max(nums[0], nums[1], nums[2], nums[3], nums[4], nums[5], nums[6])\n        if n == 8:\n            "
    },
    {
        "number": 1801,
        "title": "Number of Orders in the Backlog",
        "difficulty": 1,
        "answer": "\nfrom typing import List\nfrom collections import defaultdict"
    },
    {
        "number": 1802,
        "title": "Maximum Value at a Given Index in a Bounded Array",
        "difficulty": 1,
        "answer": "        # https://leetcode.com/problems/construct-binary-tree-from-preorder-and-inorder-traversal/discuss/\n        # https://leetcode.com/problems/construct-binary-tree-from-preorder-and-inorder-traversal/discuss/\n        # https://leetcode.com/problems/construct-binary-tree-from-preorder-and-inorder-traversal/discuss/\n        # https://leetcode.com/problems/construct-binary-tree-from-preorder-and-inorder-traversal/discuss/\n        # https://leetcode.com/problems/construct-binary-tree-from-preorder-and-inorder-traversal/discuss/\n        # https://leetcode.com/problems/construct-binary-tree-from-preorder-and-inorder-traversal/discuss/\n        # https://leetcode.com/problems/construct-binary-tree-from-preorder-and-inorder"
    },
    {
        "number": 1803,
        "title": "Count Pairs With XOR in a Range",
        "difficulty": 2,
        "answer": "        # https://leetcode.com/problems/nice-pairs/discuss/105586/Java-C-solution-with-explanation-and-examples\n        # https://leetcode.com/problems/nice-pairs/discuss/105587/Java-C-solution-with-explanation-and-examples\n        # https://leetcode.com/problems/nice-pairs/discuss/105588/Java-C-solution-with-explanation-and-examples\n        # https://leetcode.com/problems/nice-pairs/discuss/105589/Java-C-solution-with-explanation-and-examples\n        # https://leetcode.com/problems/nice-pairs/discuss/105590/Java-C-solution-with-explanation-and-examples\n        # https://leetcode.com/problems/nice-pairs/discuss/105591/Java-C-solution-with-ex"
    },
    {
        "number": 1805,
        "title": "Number of Different Integers in a String",
        "difficulty": 0,
        "answer": "        n = len(word)\n        if n == 0:\n            return 0\n        if n == 1:\n            return 1\n        if n == 2:\n            return 1 if word[0] == word[1] else 0\n        if n == 3:\n            return 1 if word[0] == word[1] and word[1] == word[2] else 0\n        if n == 4:\n            return 1 if word[0] == word[1] and word[1] == word[2] and word[2] == word[3] else 0\n        if n == 5:\n            return 1 if word[0] == word[1] and word[1] == word[2] and word[2] == word[3] and word[3] == word[4] else 0\n        if n == 6:\n            return 1 if word[0] == word[1] and word[1] == word[2] and word[2] == word[3] and word[3] == word[4] and word[4] == word[5] else 0\n        if n == 7"
    },
    {
        "number": 1806,
        "title": "Minimum Number of Operations to Reinitialize a Permutation",
        "difficulty": 1,
        "answer": "        perm = [0] * n\n        for i in range(1, n):\n            if i % 2 == 0:\n                perm[i] = perm[i / 2]\n            else:\n                perm[i] = perm[n / 2 + (i - 1) / 2]\n        return len(set(perm))"
    },
    {
        "number": 1807,
        "title": "Evaluate the Bracket Pairs of a String",
        "difficulty": 1,
        "answer": "        stack = []\n        for i, c in enumerate(s):\n            if c == '(':\n                stack.append(i)\n            elif c == ')':\n                if len(stack) == 0:\n                    return '?'\n                else:\n                    stack.pop()\n        return ''.join(s[stack[-1]:])\n"
    },
    {
        "number": 1808,
        "title": "Maximize Number of Nice Divisors",
        "difficulty": 2,
        "answer": "        primeFactors = sorted(primeFactors)\n        primeFactors.append(1)\n        primeFactors.append(1)\n        primeFactors.append(1)\n        primeFactors.append(1)\n        primeFactors.append(1)\n        primeFactors.append(1)\n        primeFactors.append(1)\n        primeFactors.append(1)\n        primeFactors.append(1)\n        primeFactors.append(1)\n        primeFactors.append(1)\n        primeFactors.append(1)\n        primeFactors.append(1)\n        primeFactors.append(1)\n        primeFactors.append(1)\n        primeFactors.append(1)\n        primeFactors.append(1)\n        primeFactors.append(1)\n        primeFactors.append(1)\n        primeFactors.append(1)\n        primeFactors.append(1)\n        primeFactors.append(1)\n        primeFactors.append(1)\n        primeFactors.append(1"
    },
    {
        "number": 1812,
        "title": "Determine Color of a Chessboard Square",
        "difficulty": 0,
        "answer": "        coordinates = coordinates.replace(\" \", \"\")\n        coordinates = coordinates.replace(\"\\n\", \"\")\n        coordinates = coordinates.replace(\"\\t\", \"\")\n        coordinates = coordinates.replace(\"\\r\", \"\")\n        coordinates = coordinates.replace(\"\\f\", \"\")\n        coordinates = coordinates.replace(\"\\v\", \"\")\n        coordinates = coordinates.replace(\"\\b\", \"\")\n        coordinates = coordinates.replace(\"\\a\", \"\")\n        coordinates = coordinates.replace(\"\\0\", \"\")\n        coordinates = coordinates.replace(\"\\1\", \"\")\n        coordinates = coordinates.replace(\"\\2\", \"\")\n        coordinates = coordinates.replace(\"\\3\", \"\")\n        coordinates = coordinates.replace(\"\\4\", \"\")\n        coordinates = coordinates.replace(\"\\5\", \"\")\n        coordinates = coordinates.replace(\"\\6\", \"\")\n        coordinates = coordinates.replace(\"\\7\", \"\")\n        coordinates = coordinates.replace(\"\\8\", \"\")\n        coordinates = coordinates.replace(\"\\9\", \"\")\n"
    },
    {
        "number": 1813,
        "title": "Sentence Similarity III",
        "difficulty": 1,
        "answer": "        sentence1 = sentence1.lower()\n        sentence2 = sentence2.lower()\n        if len(sentence1)!= len(sentence2):\n            return False\n        if sentence1 == sentence2:\n            return True\n        if sentence1[0]!= sentence2[0]:\n            return False\n        if sentence1[-1]!= sentence2[-1]:\n            return False\n        if sentence1[0] == sentence2[0]:\n            return self.areSentencesSimilar(sentence1[1:], sentence2[1:])\n        return False"
    },
    {
        "number": 1814,
        "title": "Count Nice Pairs in an Array",
        "difficulty": 1,
        "answer": "        n = len(nums)\n        if n < 2:\n            return 0\n        res = 0\n        for i in range(n - 1):\n            for j in range(i + 1, n):\n                if nums[i] + nums[j] == nums[j] + nums[i]:\n                    res += 1\n        return res % (109 + 7)\n"
    },
    {
        "number": 1815,
        "title": "Maximum Number of Groups Getting Fresh Donuts",
        "difficulty": 2,
        "answer": "        if batchSize == 1:\n            return 1\n        if batchSize == 2:\n            return 2\n        if batchSize == 3:\n            return 3\n        if batchSize == 4:\n            return 4\n        if batchSize == 5:\n            return 5\n        if batchSize == 6:\n            return 6\n        if batchSize == 7:\n            return 7\n        if batchSize == 8:\n            return 8\n        if batchSize == 9:\n            return 9\n        if batchSize == 10:\n            return 10\n        if batchSize == 11:\n            return 11\n        if batchSize == 12:\n            return 12\n        if batchSize == 13:\n            return 13\n        if batchSize == 14:\n            return 14\n        if batchSize == 15:\n            return 15\n        if batchSize == 16:\n            return 16\n        if batchSize == 17:\n            return 17\n        if batchSize == 18:\n            return 18\n        if batchSize == 19:\n            return 19\n        if batchSize == 20:\n            return 20\n        if batchSize == 21:\n            return"
    },
    {
        "number": 1816,
        "title": "Truncate Sentence",
        "difficulty": 0,
        "answer": "        words = s.split()\n        if len(words) <= k:\n            return s\n        return''.join(words[:k])\n"
    },
    {
        "number": 1817,
        "title": "Finding the Users Active Minutes",
        "difficulty": 1,
        "answer": "        # https://leetcode.com/problems/finding-users-active-minutes/discuss/\n        # https://leetcode.com/problems/finding-users-active-minutes/discuss/\n        # https://leetcode.com/problems/finding-users-active-minutes/discuss/\n        # https://leetcode.com/problems/finding-users-active-minutes/discuss/\n        # https://leetcode.com/problems/finding-users-active-minutes/discuss/\n        # https://leetcode.com/problems/finding-users-active-minutes/discuss/\n        # https://leetcode.com/problems/finding-users-active-minutes/discuss/\n        # https://leetcode.com/problems/finding-users-active-minutes/discuss/\n        # https://leetcode.com/problems/finding-users-active-minutes/discuss/\n        # https://leetcode.com/problems/finding-users"
    },
    {
        "number": 1818,
        "title": "Minimum Absolute Sum Difference",
        "difficulty": 1,
        "answer": "        n = len(nums1)\n        if n!= len(nums2):\n            return -1\n        dp = [0] * (n + 1)\n        for i in range(1, n + 1):\n            dp[i] = dp[i - 1] + abs(nums1[i - 1] - nums2[i - 1])\n        return min(dp) % (109 + 7)\n"
    },
    {
        "number": 1819,
        "title": "Number of Different Subsequences GCDs",
        "difficulty": 2,
        "answer": "        n = len(nums)\n        if n == 0:\n            return 0\n        if n == 1:\n            return 1\n        if n == 2:\n            return 1\n        if n == 3:\n            return 1\n        if n == 4:\n            return 1\n        if n == 5:\n            return 1\n        if n == 6:\n            return 1\n        if n == 7:\n            return 1\n        if n == 8:\n            return 1\n        if n == 9:\n            return 1\n        if n == 10:\n            return 1\n        if n == 11:\n            return 1\n        if n == 12:\n            return 1\n        if n == 13:\n            return 1\n        if n == 14:\n            return 1\n        if n == 15:\n            return 1\n        if n == 16:\n            return 1\n        if n == 17:\n            return 1\n        if n == 18:\n            return 1\n        if n == 19:\n            return 1\n        if n == 20:\n            return 1\n        if n == 21:\n            return 1"
    },
    {
        "number": 1822,
        "title": "Sign of the Product of an Array",
        "difficulty": 0,
        "answer": "        if not nums:\n            return 0\n        if len(nums) == 1:\n            return 1 if nums[0] > 0 else -1\n        if len(nums) == 2:\n            return 1 if nums[0] > 0 else -1 if nums[1] > 0 else 1 if nums[1] < 0 else -1\n        if len(nums) == 3:\n            return 1 if nums[0] > 0 else -1 if nums[1] > 0 else 1 if nums[1] < 0 else -1 if nums[2] > 0 else 1 if nums[2] < 0 else -1\n        if len(nums) == 4:\n            return 1 if nums[0] > 0 else -1 if nums[1] > 0 else 1 if nums[1] < 0 else -1 if nums[2] > 0 else 1 if nums[2] < 0 else -1 if nums[3] > 0 else 1 if nums[3] < 0 else -1\n        if len(nums) == 5"
    },
    {
        "number": 1823,
        "title": "Find the Winner of the Circular Game",
        "difficulty": 1,
        "answer": "        if n < 1 or k < 1:\n            return 0\n        if n == 1:\n            return 1\n        if n == 2:\n            return 1 if k == 1 else 0\n        if n == 3:\n            return 1 if k == 1 else 0 if k == 2 else 0\n        if n == 4:\n            return 1 if k == 1 else 0 if k == 2 else 0 if k == 3 else 0\n        if n == 5:\n            return 1 if k == 1 else 0 if k == 2 else 0 if k == 3 else 0 if k == 4 else 0\n        if n == 6:\n            return 1 if k == 1 else 0 if k == 2 else 0 if k == 3 else 0 if k == 4 else 0 if k == 5 else 0\n        if n == 7:\n            return 1 if k == 1 else 0 if k == 2 else 0 if k == 3 else 0 if k == 4 else 0 if k == 5 else 0 if k == 6 else 0\n        if n == 8:\n            return 1 if k == 1 else 0 if k == 2 else 0 if k == 3 else 0 if k == 4"
    },
    {
        "number": 1824,
        "title": "Minimum Sideway Jumps",
        "difficulty": 1,
        "answer": "        n = len(obstacles)\n        if n == 0:\n            return 0\n        if n == 1:\n            return 1\n        if n == 2:\n            return 1\n        if n == 3:\n            return 1\n        if n == 4:\n            return 1\n        if n == 5:\n            return 1\n        if n == 6:\n            return 1\n        if n == 7:\n            return 1\n        if n == 8:\n            return 1\n        if n == 9:\n            return 1\n        if n == 10:\n            return 1\n        if n == 11:\n            return 1\n        if n == 12:\n            return 1\n        if n == 13:\n            return 1\n        if n == 14:\n            return 1\n        if n == 15:\n            return 1\n        if n == 16:\n            return 1\n        if n == 17:\n            return 1\n        if n == 18:\n            return 1\n        if n == 19:\n            return 1\n        if n == 20:\n            return 1\n        if n == 21:\n            return"
    },
    {
        "number": 1825,
        "title": "Finding MK Average",
        "difficulty": 2,
        "answer": "        # Your MKAverage object will be instantiated and called as such:\n        # obj = MKAverage(m, k)\n        # obj.addElement(num)\n        # param_2 = obj.calculateMKAverage()\n        # obj.addElement(num)\n        # param_3 = obj.calculateMKAverage()\n        # obj.addElement(num)\n        # param_4 = obj.calculateMKAverage()\n        # obj.addElement(num)\n        # param_5 = obj.calculateMKAverage()\n        # obj.addElement(num)\n        # param_6 = obj.calculateMKAverage()\n        # obj.addElement(num)\n        # param_7 = obj.calculateMKAverage()\n        # obj.addElement(num)\n        # param_8 = obj.calculateMKAverage()\n        # obj.addElement(num)\n        # param_9 = obj.calculateMKAverage()\n        # obj.addElement(num)\n        # param_"
    },
    {
        "number": 1827,
        "title": "Minimum Operations to Make the Array Increasing",
        "difficulty": 0,
        "answer": "        n = len(nums)\n        if n == 1:\n            return 0\n        if n == 2:\n            return 1\n        if n == 3:\n            return 2\n        if n == 4:\n            return 3\n        if n == 5:\n            return 4\n        if n == 6:\n            return 5\n        if n == 7:\n            return 6\n        if n == 8:\n            return 7\n        if n == 9:\n            return 8\n        if n == 10:\n            return 9\n        if n == 11:\n            return 10\n        if n == 12:\n            return 11\n        if n == 13:\n            return 12\n        if n == 14:\n            return 13\n        if n == 15:\n            return 14\n        if n == 16:\n            return 15\n        if n == 17:\n            return 16\n        if n == 18:\n            return 17\n        if n == 19:\n            return 18\n        if n == 20:\n            return 19\n        if n == 21:\n            return 20\n        if n == 22:\n            return 21"
    },
    {
        "number": 1828,
        "title": "Queries on Number of Points Inside a Circle",
        "difficulty": 1,
        "answer": "        ans = []\n        for query in queries:\n            ans.append(self.count_points(points, query))\n        return ans"
    },
    {
        "number": 1829,
        "title": "Maximum XOR for Each Query",
        "difficulty": 1,
        "answer": "        if len(nums) == 0:\n            return []\n        if len(nums) == 1:\n            return [nums[0]]\n        if len(nums) == 2:\n            return [nums[0] ^ nums[1]]\n        if len(nums) == 3:\n            return [nums[0] ^ nums[1] ^ nums[2]]\n        if len(nums) == 4:\n            return [nums[0] ^ nums[1] ^ nums[2] ^ nums[3]]\n        if len(nums) == 5:\n            return [nums[0] ^ nums[1] ^ nums[2] ^ nums[3] ^ nums[4]]\n        if len(nums) == 6:\n            return [nums[0] ^ nums[1] ^ nums[2] ^ nums[3] ^ nums[4] ^ nums[5]]\n        if len(nums) == 7:\n            return [nums[0] ^ nums[1]"
    },
    {
        "number": 1830,
        "title": "Minimum Number of Operations to Make String Sorted",
        "difficulty": 2,
        "answer": "        n = len(s)\n        if n == 1:\n            return 0\n        if n == 2:\n            return 1\n        if n == 3:\n            return 1\n        if n == 4:\n            return 1\n        if n == 5:\n            return 1\n        if n == 6:\n            return 1\n        if n == 7:\n            return 1\n        if n == 8:\n            return 1\n        if n == 9:\n            return 1\n        if n == 10:\n            return 1\n        if n == 11:\n            return 1\n        if n == 12:\n            return 1\n        if n == 13:\n            return 1\n        if n == 14:\n            return 1\n        if n == 15:\n            return 1\n        if n == 16:\n            return 1\n        if n == 17:\n            return 1\n        if n == 18:\n            return 1\n        if n == 19:\n            return 1\n        if n == 20:\n            return 1\n        if n == 21:\n            return 1\n        if n == 22:\n            return 1\n"
    },
    {
        "number": 1832,
        "title": "Check if the Sentence Is Pangram",
        "difficulty": 0,
        "answer": "        alphabet = set(sentence)\n        return len(alphabet) == len(sentence) and all(x in alphabet for x in sentence)\n"
    },
    {
        "number": 1833,
        "title": "Maximum Ice Cream Bars",
        "difficulty": 1,
        "answer": "        n = len(costs)\n        if n == 0:\n            return 0\n        if n == 1:\n            return costs[0]\n        if n == 2:\n            return max(costs[0], costs[1])\n        if n == 3:\n            return max(max(costs[0], costs[1]), max(costs[0], costs[2]))\n        if n == 4:\n            return max(max(costs[0], costs[1]), max(costs[0], costs[2]), max(costs[1], costs[3]))\n        if n == 5:\n            return max(max(costs[0], costs[1]), max(costs[0], costs[2]), max(costs[1], costs[3]), max(costs[1], costs[4]))\n        if n == 6:\n            return max(max(costs[0], costs[1]), max(costs[0], costs[2]), max(costs[1], costs[3]), max(costs[1], costs[4]), max("
    },
    {
        "number": 1834,
        "title": "Single-Threaded CPU",
        "difficulty": 1,
        "answer": "        # Your Solution object will be instantiated and called as such:\n        # obj = Solution(tasks)\n        # param_1 = obj.getOrder(tasks)"
    },
    {
        "number": 1835,
        "title": "Find XOR Sum of All Pairs Bitwise AND",
        "difficulty": 2,
        "answer": "        # https://leetcode.com/problems/xor-sum-of-two-numbers/discuss/\n        # https://leetcode.com/problems/xor-sum-of-two-numbers/discuss/\n        # https://leetcode.com/problems/xor-sum-of-two-numbers/discuss/\n        # https://leetcode.com/problems/xor-sum-of-two-numbers/discuss/\n        # https://leetcode.com/problems/xor-sum-of-two-numbers/discuss/\n        # https://leetcode.com/problems/xor-sum-of-two-numbers/discuss/\n        # https://leetcode.com/problems/xor-sum-of-two-numbers/discuss/\n        # https://leetcode.com/problems/xor-sum-of-two-numbers/discuss/\n        # https://leetcode.com/problems/xor-sum-"
    },
    {
        "number": 1837,
        "title": "Sum of Digits in Base K",
        "difficulty": 0,
        "answer": "        if n == 0:\n            return 0\n        if n < 0:\n            return -self.sumBase(-n, k)\n        if n == 1:\n            return k\n        if n == 2:\n            return 2 * k\n        if n == 3:\n            return 3 * k\n        if n == 4:\n            return 4 * k\n        if n == 5:\n            return 5 * k\n        if n == 6:\n            return 6 * k\n        if n == 7:\n            return 7 * k\n        if n == 8:\n            return 8 * k\n        if n == 9:\n            return 9 * k\n        return self.sumBase(n // 10, k) + self.sumBase(n % 10, k)\n"
    },
    {
        "number": 1838,
        "title": "Frequency of the Most Frequent Element",
        "difficulty": 1,
        "answer": "        # https://leetcode.com/problems/maximum-frequency-of-an-element-in-an-array/discuss/\n        # https://leetcode.com/problems/maximum-frequency-of-an-element-in-an-array/discuss/\n        # https://leetcode.com/problems/maximum-frequency-of-an-element-in-an-array/discuss/\n        # https://leetcode.com/problems/maximum-frequency-of-an-element-in-an-array/discuss/\n        # https://leetcode.com/problems/maximum-frequency-of-an-element-in-an-array/discuss/\n        # https://leetcode.com/problems/maximum-frequency-of-an-element-in-an-array/discuss/\n        # https://leetcode.com/problems/maximum-frequency-of-an-element-in-an-array/discuss/\n        # https://leetcode.com/problems/maximum-frequency-of-"
    },
    {
        "number": 1839,
        "title": "Longest Substring Of All Vowels in Order",
        "difficulty": 1,
        "answer": "        # https://leetcode.com/problems/longest-beautiful-substring/discuss/105586/Java-C-solution-with-explanation\n        # https://leetcode.com/problems/longest-beautiful-substring/discuss/105587/C%2B%2B-solution-with-explanation\n        # https://leetcode.com/problems/longest-beautiful-substring/discuss/105588/Java-C-solution-with-explanation\n        # https://leetcode.com/problems/longest-beautiful-substring/discuss/105589/Java-C-solution-with-explanation\n        # https://leetcode.com/problems/longest-beautiful-substring/discuss/105590/Java-C-solution-with-explanation\n        # https://leetcode.com/problems/longest-beautiful-substring/discuss/105591/Java-C-solution-"
    },
    {
        "number": 1840,
        "title": "Maximum Building Height",
        "difficulty": 2,
        "answer": "        if n == 1:\n            return 0\n        if n == 2:\n            return 1\n        if n == 3:\n            return 2\n        if n == 4:\n            return 3\n        if n == 5:\n            return 4\n        if n == 6:\n            return 5\n        if n == 7:\n            return 6\n        if n == 8:\n            return 7\n        if n == 9:\n            return 8\n        if n == 10:\n            return 9\n        if n == 11:\n            return 10\n        if n == 12:\n            return 11\n        if n == 13:\n            return 12\n        if n == 14:\n            return 13\n        if n == 15:\n            return 14\n        if n == 16:\n            return 15\n        if n == 17:\n            return 16\n        if n == 18:\n            return 17\n        if n == 19:\n            return 18\n        if n == 20:\n            return 19\n        if n == 21:\n            return 20\n        if n == 22:\n            return 21\n        if n == 23:\n            "
    },
    {
        "number": 1844,
        "title": "Replace All Digits with Characters",
        "difficulty": 0,
        "answer": "        s = list(s)\n        for i in range(1, len(s), 2):\n            s[i] = shift(s[i-1], s[i])\n        return ''.join(s)"
    },
    {
        "number": 1845,
        "title": "Seat Reservation Manager",
        "difficulty": 1,
        "answer": "        seatNumber = 1\n        while True:\n            if seatNumber <= n:\n                if self.isAvailable(seatNumber):\n                    return seatNumber\n                else:\n                    seatNumber += 1\n            else:\n                return None"
    },
    {
        "number": 1846,
        "title": "Maximum Element After Decreasing and Rearranging",
        "difficulty": 1,
        "answer": "        # https://leetcode.com/problems/maximum-element-after-decrementing-and-rearranging/discuss/\n        # https://leetcode.com/problems/maximum-element-after-decrementing-and-rearranging/discuss/\n        # https://leetcode.com/problems/maximum-element-after-decrementing-and-rearranging/discuss/\n        # https://leetcode.com/problems/maximum-element-after-decrementing-and-rearranging/discuss/\n        # https://leetcode.com/problems/maximum-element-after-decrementing-and-rearranging/discuss/\n        # https://leetcode.com/problems/maximum-element-after-decrementing-and-rearranging/discuss/\n        # https://leetcode.com/problems/maximum-element-after-decrementing-and-rearranging/discuss/\n        # https://leetcode.com/problems"
    },
    {
        "number": 1847,
        "title": "Closest Room",
        "difficulty": 2,
        "answer": "        rooms = sorted(rooms, key=lambda x: x[0])\n        queries = sorted(queries, key=lambda x: x[0])\n        ans = []\n        for i in range(len(queries)):\n            ans.append(self.closestRoom(rooms, queries[i][1:]))\n        return ans"
    },
    {
        "number": 1848,
        "title": "Minimum Distance to the Target Element",
        "difficulty": 0,
        "answer": "        n = len(nums)\n        if n == 0:\n            return 0\n        if n == 1:\n            return abs(nums[0] - target)\n        if n == 2:\n            return abs(nums[0] - target) + abs(nums[1] - target)\n        if n == 3:\n            return abs(nums[0] - target) + abs(nums[1] - target) + abs(nums[2] - target)\n        if n == 4:\n            return abs(nums[0] - target) + abs(nums[1] - target) + abs(nums[2] - target) + abs(nums[3] - target)\n        if n == 5:\n            return abs(nums[0] - target) + abs(nums[1] - target) + abs(nums[2] - target) + abs(nums[3] - target) + abs(nums[4] - target)\n        if n == 6:\n            return abs(nums[0] - target) +"
    },
    {
        "number": 1849,
        "title": "Splitting a String Into Descending Consecutive Values",
        "difficulty": 1,
        "answer": "        if not s:\n            return False\n        n = len(s)\n        if n == 1:\n            return True\n        if n == 2:\n            return s[0] < s[1]\n        if n == 3:\n            return s[0] < s[1] and s[1] < s[2]\n        if n == 4:\n            return s[0] < s[1] and s[1] < s[2] and s[2] < s[3]\n        if n == 5:\n            return s[0] < s[1] and s[1] < s[2] and s[2] < s[3] and s[3] < s[4]\n        if n == 6:\n            return s[0] < s[1] and s[1] < s[2] and s[2] < s[3] and s[3] < s[4] and s[4] < s[5]\n        if n == 7:\n            return s[0] < s[1] and s[1] < s["
    },
    {
        "number": 1850,
        "title": "Minimum Adjacent Swaps to Reach the Kth Smallest Number",
        "difficulty": 1,
        "answer": "        num = list(num)\n        num.sort()\n        return self.get_min_swaps(num, k)"
    },
    {
        "number": 1851,
        "title": "Minimum Interval to Include Each Query",
        "difficulty": 2,
        "answer": "        intervals = sorted(intervals)\n        queries = sorted(queries)\n        ans = []\n        for i in range(len(queries)):\n            if intervals[i][0] <= queries[i] <= intervals[i][1]:\n                ans.append(queries[i] - intervals[i][0] + intervals[i][1] - 1)\n            else:\n                ans.append(-1)\n        return ans\n"
    },
    {
        "number": 1854,
        "title": "Maximum Population Year",
        "difficulty": 0,
        "answer": "        # https://leetcode.com/problems/maximum-population/discuss/105586/Java-O(n)-solution-with-explanation\n        # https://leetcode.com/problems/maximum-population/discuss/105586/Java-O(n)-solution-with-explanation\n        # https://leetcode.com/problems/maximum-population/discuss/105586/Java-O(n)-solution-with-explanation\n        # https://leetcode.com/problems/maximum-population/discuss/105586/Java-O(n)-solution-with-explanation\n        # https://leetcode.com/problems/maximum-population/discuss/105586/Java-O(n)-solution-with-explanation\n        # https://leetcode.com/problems/maximum-population/discuss/105586/Java-O(n)-solution-with-explanation\n        # https://leetcode.com/problems/maximum-population"
    },
    {
        "number": 1855,
        "title": "Maximum Distance Between a Pair of Values",
        "difficulty": 1,
        "answer": "        nums1 = sorted(nums1)\n        nums2 = sorted(nums2)\n        n = len(nums1)\n        m = len(nums2)\n        dp = [[0] * (m + 1) for _ in range(n + 1)]\n        for i in range(1, n + 1):\n            dp[i][0] = i\n        for j in range(1, m + 1):\n            dp[0][j] = j\n        for i in range(1, n + 1):\n            for j in range(1, m + 1):\n                if nums1[i - 1] <= nums2[j - 1]:\n                    dp[i][j] = min(dp[i - 1][j], dp[i][j - 1])\n                else:\n                    dp[i][j] = min(dp[i - 1][j], dp[i][j - 1], dp[i - 1][j - 1]) + 1\n        return dp[n][m]\n"
    },
    {
        "number": 1856,
        "title": "Maximum Subarray Min-Product",
        "difficulty": 1,
        "answer": "        n = len(nums)\n        if n == 0:\n            return 0\n        if n == 1:\n            return nums[0]\n        if n == 2:\n            return max(nums[0], nums[1]) * nums[0]\n        if n == 3:\n            return max(nums[0], nums[1], nums[2]) * nums[0]\n        if n == 4:\n            return max(nums[0], nums[1], nums[2], nums[3]) * nums[0]\n        if n == 5:\n            return max(nums[0], nums[1], nums[2], nums[3], nums[4]) * nums[0]\n        if n == 6:\n            return max(nums[0], nums[1], nums[2], nums[3], nums[4], nums[5]) * nums[0]\n        if n == 7:\n            return max(nums[0], nums[1], nums[2"
    },
    {
        "number": 1857,
        "title": "Largest Color Value in a Directed Graph",
        "difficulty": 2,
        "answer": "        colors = list(colors)\n        edges = list(edges)\n        n = len(colors)\n        m = len(edges)\n        # dp[i][j] is the maximum number of nodes that are colored i along the path from node j to node i\n        dp = [[0 for _ in range(n)] for _ in range(n)]\n        for i in range(n):\n            for j in range(m):\n                if colors[edges[j][0]] == colors[edges[j][1]]:\n                    dp[edges[j][0]][edges[j][1]] = 1\n        for i in range(n):\n            for j in range(n):\n                if colors[i] == colors[j]:\n                    dp[i][j] = 1\n        for i in range(n):\n            for j in range(n):\n                for k in range(n):\n                    if colors[i] == colors[k] and dp[i][j] + dp[k][j] > dp[i][k"
    },
    {
        "number": 1859,
        "title": "Sorting the Sentence",
        "difficulty": 0,
        "answer": ""
    },
    {
        "number": 1860,
        "title": "Incremental Memory Leak",
        "difficulty": 1,
        "answer": "        memory1 = int(memory1)\n        memory2 = int(memory2)\n        memory1_available = [0] * (memory1 + 1)\n        memory2_available = [0] * (memory2 + 1)\n        memory1_available[0] = 1\n        memory2_available[0] = 1\n        memory1_available[1] = 1\n        memory2_available[1] = 1\n        memory1_available[2] = 1\n        memory2_available[2] = 1\n        memory1_available[3] = 1\n        memory2_available[3] = 1\n        memory1_available[4] = 1\n        memory2_available[4] = 1\n        memory1_available[5] = 1\n        memory2_available[5] = 1\n        memory1_available[6] = 1\n        memory2_available[6] = 1\n        memory1_available[7] = 1\n        memory2_available[7] = 1\n        memory1_available[8] = 1\n        memory2_available[8] ="
    },
    {
        "number": 1861,
        "title": "Rotating the Box",
        "difficulty": 1,
        "answer": "        m, n = len(box), len(box[0])\n        rotated_box = [['.' for _ in range(n)] for _ in range(m)]\n        for i in range(m):\n            for j in range(n):\n                rotated_box[i][j] = box[i][j]\n        for i in range(m):\n            for j in range(n):\n                if rotated_box[i][j] == '#':\n                    rotated_box[i][j] = '.'\n                elif rotated_box[i][j] == '*':\n                    rotated_box[i][j] = '#'\n                elif rotated_box[i][j] == '.':\n                    rotated_box[i][j] = '*'\n        return rotated_box\n"
    },
    {
        "number": 1862,
        "title": "Sum of Floored Pairs",
        "difficulty": 2,
        "answer": "        n = len(nums)\n        if n == 1:\n            return nums[0]\n        if n == 2:\n            return nums[0] * nums[1]\n        if n == 3:\n            return nums[0] * nums[1] + nums[1] * nums[2] + nums[0] * nums[2]\n        if n == 4:\n            return nums[0] * nums[1] + nums[1] * nums[2] + nums[2] * nums[3] + nums[0] * nums[3]\n        if n == 5:\n            return nums[0] * nums[1] + nums[1] * nums[2] + nums[2] * nums[3] + nums[3] * nums[4] + nums[0] * nums[4]\n        if n == 6:\n            return nums[0] * nums[1] + nums[1] * nums[2] + num"
    },
    {
        "number": 1863,
        "title": "Sum of All Subset XOR Totals",
        "difficulty": 0,
        "answer": "        n = len(nums)\n        if n == 0:\n            return 0\n        if n == 1:\n            return nums[0]\n        if n == 2:\n            return nums[0] ^ nums[1]\n        if n == 3:\n            return nums[0] ^ nums[1] ^ nums[2]\n        if n == 4:\n            return nums[0] ^ nums[1] ^ nums[2] ^ nums[3]\n        if n == 5:\n            return nums[0] ^ nums[1] ^ nums[2] ^ nums[3] ^ nums[4]\n        if n == 6:\n            return nums[0] ^ nums[1] ^ nums[2] ^ nums[3] ^ nums[4] ^ nums[5]\n        if n == 7:\n            return nums[0] ^ nums[1] ^ nums[2] ^ nums[3] ^ nums[4] ^ nums[5] ^ nums[6]"
    },
    {
        "number": 1864,
        "title": "Minimum Number of Swaps to Make the Binary String Alternating",
        "difficulty": 1,
        "answer": "        n = len(s)\n        if n == 1:\n            return 0\n        if n == 2:\n            return 1\n        if n == 3:\n            return 1 if s[0] == s[1] else -1\n        if n == 4:\n            return 1 if s[0] == s[1] or s[0] == s[2] or s[1] == s[3] else -1\n        if n == 5:\n            return 1 if s[0] == s[1] or s[0] == s[2] or s[0] == s[3] or s[0] == s[4] or s[1] == s[2] or s[1] == s[3] or s[1] == s[4] or s[2] == s[3] or s[2] == s[4] else -1\n        if n == 6:\n            return 1 if s[0] == s[1] or s[0] == s[2] or s[0] == s[3] or s[0] == s["
    },
    {
        "number": 1865,
        "title": "Finding Pairs With a Certain Sum",
        "difficulty": 1,
        "answer": "        self.nums1 = nums1\n        self.nums2 = nums2\n        self.tot = tot"
    },
    {
        "number": 1866,
        "title": "Number of Ways to Rearrange Sticks With K Sticks Visible",
        "difficulty": 2,
        "answer": "        # https://leetcode.com/problems/rearrange-sticks/discuss/105586/Java-O(n)-solution-with-explanation\n        # https://leetcode.com/problems/rearrange-sticks/discuss/105586/Java-O(n)-solution-with-explanation\n        # https://leetcode.com/problems/rearrange-sticks/discuss/105586/Java-O(n)-solution-with-explanation\n        # https://leetcode.com/problems/rearrange-sticks/discuss/105586/Java-O(n)-solution-with-explanation\n        # https://leetcode.com/problems/rearrange-sticks/discuss/105586/Java-O(n)-solution-with-explanation\n        # https://leetcode.com/problems/rearrange-sticks/discuss/105586/Java-O(n)-solution-with-explanation\n        # https://"
    },
    {
        "number": 1869,
        "title": "Longer Contiguous Segments of Ones than Zeros",
        "difficulty": 0,
        "answer": "        # https://leetcode.com/problems/longest-contiguous-segment-with-at-least-one-number/discuss/\n        # https://leetcode.com/problems/longest-contiguous-segment-with-at-least-one-number/discuss/\n        # https://leetcode.com/problems/longest-contiguous-segment-with-at-least-one-number/discuss/\n        # https://leetcode.com/problems/longest-contiguous-segment-with-at-least-one-number/discuss/\n        # https://leetcode.com/problems/longest-contiguous-segment-with-at-least-one-number/discuss/\n        # https://leetcode.com/problems/longest-contiguous-segment-with-at-least-one-number/discuss/\n        # https://leetcode.com/problems/longest-contiguous-segment-with-at-least"
    },
    {
        "number": 1870,
        "title": "Minimum Speed to Arrive on Time",
        "difficulty": 1,
        "answer": "        if len(dist) == 1:\n            return dist[0]\n        if len(dist) == 2:\n            return dist[0] + dist[1]\n        if len(dist) == 3:\n            return dist[0] + dist[1] + dist[2]\n        if len(dist) == 4:\n            return dist[0] + dist[1] + dist[2] + dist[3]\n        if len(dist) == 5:\n            return dist[0] + dist[1] + dist[2] + dist[3] + dist[4]\n        if len(dist) == 6:\n            return dist[0] + dist[1] + dist[2] + dist[3] + dist[4] + dist[5]\n        if len(dist) == 7:\n            return dist[0] + dist[1] + dist[2] + dist[3] + dist[4] + dist[5] + dist[6]\n        if len(dist) == 8:\n            return dist[0] + dist[1] + dist[2]"
    },
    {
        "number": 1871,
        "title": "Jump Game VII",
        "difficulty": 1,
        "answer": "        # https://leetcode.com/problems/jump-game/discuss/105586/Java-C-solution-with-explanation\n        # https://leetcode.com/problems/jump-game/discuss/105586/Java-C-solution-with-explanation\n        # https://leetcode.com/problems/jump-game/discuss/105586/Java-C-solution-with-explanation\n        # https://leetcode.com/problems/jump-game/discuss/105586/Java-C-solution-with-explanation\n        # https://leetcode.com/problems/jump-game/discuss/105586/Java-C-solution-with-explanation\n        # https://leetcode.com/problems/jump-game/discuss/105586/Java-C-solution-with-explanation\n        # https://leetcode.com/problems/jump-game/discuss/105586/Java-C-"
    },
    {
        "number": 1872,
        "title": "Stone Game VIII",
        "difficulty": 2,
        "answer": "        n = len(stones)\n        if n == 1:\n            return stones[0]\n        if n == 2:\n            return stones[0] - stones[1]\n        if n == 3:\n            return stones[0] - stones[1] - stones[2]\n        if n == 4:\n            return stones[0] - stones[1] - stones[2] - stones[3]\n        if n == 5:\n            return stones[0] - stones[1] - stones[2] - stones[3] - stones[4]\n        if n == 6:\n            return stones[0] - stones[1] - stones[2] - stones[3] - stones[4] - stones[5]\n        if n == 7:\n            return stones[0] - stones[1] - stones[2] - stones[3] - stones[4] - stones[5] - stones[6]\n        if n == 8:\n            return stones[0] - stones[1] - stones[2] - stones[3] - stones[4] - stones[5] -"
    },
    {
        "number": 1876,
        "title": "Substrings of Size Three with Distinct Characters",
        "difficulty": 0,
        "answer": "        # https://leetcode.com/problems/good-substrings/discuss/105586/Java-C-solution-with-explanation\n        # https://leetcode.com/problems/good-substrings/discuss/105586/C%2B%2B-solution-with-explanation\n        # https://leetcode.com/problems/good-substrings/discuss/105586/Java-C%2B%2B-solution-with-explanation\n        # https://leetcode.com/problems/good-substrings/discuss/105586/C%2B%2B-solution-with-explanation\n        # https://leetcode.com/problems/good-substrings/discuss/105586/Java-C%2B%2B-solution-with-explanation\n        # https://leetcode.com/problems/good-substrings/discuss/105586/C%2B%2B-solution-with-explan"
    },
    {
        "number": 1877,
        "title": "Minimize Maximum Pair Sum in Array",
        "difficulty": 1,
        "answer": "        # https://leetcode.com/problems/minimum-pair-sum/discuss/105586/Java-O(n)-solution-with-explanation\n        # https://leetcode.com/problems/minimum-pair-sum/discuss/105586/Java-O(n)-solution-with-explanation\n        # https://leetcode.com/problems/minimum-pair-sum/discuss/105586/Java-O(n)-solution-with-explanation\n        # https://leetcode.com/problems/minimum-pair-sum/discuss/105586/Java-O(n)-solution-with-explanation\n        # https://leetcode.com/problems/minimum-pair-sum/discuss/105586/Java-O(n)-solution-with-explanation\n        # https://leetcode.com/problems/minimum-pair-sum/discuss/105586/Java-O(n)-solution-with-explanation\n        # https://"
    },
    {
        "number": 1878,
        "title": "Get Biggest Three Rhombus Sums in a Grid",
        "difficulty": 1,
        "answer": "        # https://leetcode.com/problems/find-the-biggest-three-distinct-rhombus-sums/discuss/\n        # https://leetcode.com/problems/find-the-biggest-three-distinct-rhombus-sums/discuss/\n        # https://leetcode.com/problems/find-the-biggest-three-distinct-rhombus-sums/discuss/\n        # https://leetcode.com/problems/find-the-biggest-three-distinct-rhombus-sums/discuss/\n        # https://leetcode.com/problems/find-the-biggest-three-distinct-rhombus-sums/discuss/\n        # https://leetcode.com/problems/find-the-biggest-three-distinct-rhombus-sums/discuss/\n        # https://leetcode.com/problems/find-the-biggest-three-distinct-rhombus-sums/discuss"
    },
    {
        "number": 1879,
        "title": "Minimum XOR Sum of Two Arrays",
        "difficulty": 2,
        "answer": "        # https://leetcode.com/problems/xor-sum-ii/discuss/105586/Java-Solution-with-explanation-and-examples\n        # https://leetcode.com/problems/xor-sum-ii/discuss/105586/Java-Solution-with-explanation-and-examples\n        # https://leetcode.com/problems/xor-sum-ii/discuss/105586/Java-Solution-with-explanation-and-examples\n        # https://leetcode.com/problems/xor-sum-ii/discuss/105586/Java-Solution-with-explanation-and-examples\n        # https://leetcode.com/problems/xor-sum-ii/discuss/105586/Java-Solution-with-explanation-and-examples\n        # https://leetcode.com/problems/xor-sum-ii/discuss/105586/Java-Solution-with-explanation-and-ex"
    },
    {
        "number": 1880,
        "title": "Check if Word Equals Summation of Two Words",
        "difficulty": 0,
        "answer": "        firstWord = firstWord.lower()\n        secondWord = secondWord.lower()\n        targetWord = targetWord.lower()\n        firstWord = [ord(c) for c in firstWord]\n        secondWord = [ord(c) for c in secondWord]\n        targetWord = [ord(c) for c in targetWord]\n        firstWord.sort()\n        secondWord.sort()\n        targetWord.sort()\n        firstWord = [x for x in firstWord if x!= 0]\n        secondWord = [x for x in secondWord if x!= 0]\n        targetWord = [x for x in targetWord if x!= 0]\n        firstWord = [x for x in firstWord if x!= 0]\n        secondWord = [x for x in secondWord if x!= 0]\n        targetWord = [x for x in targetWord if x!= 0]\n        firstWord = [x for x in firstWord if x!= 0]\n        secondWord = [x for x in secondWord if x!= 0]\n        targetWord = [x for x in targetWord if x!= 0"
    },
    {
        "number": 1881,
        "title": "Maximum Value after Insertion",
        "difficulty": 1,
        "answer": "        n = n.replace(\"-\", \"\")\n        n = n.replace(\" \", \"\")\n        n = n.replace(\"+\", \"\")\n        n = n.replace(\"0\", \"\")\n        n = n.replace(\"1\", \"\")\n        n = n.replace(\"2\", \"\")\n        n = n.replace(\"3\", \"\")\n        n = n.replace(\"4\", \"\")\n        n = n.replace(\"5\", \"\")\n        n = n.replace(\"6\", \"\")\n        n = n.replace(\"7\", \"\")\n        n = n.replace(\"8\", \"\")\n        n = n.replace(\"9\", \"\")\n        n = n.replace(\".\", \"\")\n        n = n.replace(\"-\", \"\")\n        n = n.replace(\"+\", \"\")\n        n = n.replace(\"0\", \"\")\n        n = n.replace(\"1\", \"\")\n        n = n.replace(\"2\", \"\")\n        n = n.replace(\"3\", \"\")\n        n = n.replace(\"4\", \"\")\n"
    },
    {
        "number": 1882,
        "title": "Process Tasks Using Servers",
        "difficulty": 1,
        "answer": "        # Your Solution object will be instantiated and called as such:\n        # obj = Solution(servers, tasks)\n        # param_1 = obj.assignTasks(servers, tasks)\n        # return param_1"
    },
    {
        "number": 1883,
        "title": "Minimum Skips to Arrive at Meeting On Time",
        "difficulty": 2,
        "answer": "        if not dist:\n            return 0\n        if not speed:\n            return -1\n        if not hoursBefore:\n            return 0\n        if not dist:\n            return -1\n        if not speed:\n            return -1\n        if not hoursBefore:\n            return 0\n        if not dist:\n            return -1\n        if not speed:\n            return -1\n        if not hoursBefore:\n            return 0\n        if not dist:\n            return -1\n        if not speed:\n            return -1\n        if not hoursBefore:\n            return 0\n        if not dist:\n            return -1\n        if not speed:\n            return -1\n        if not hoursBefore:\n            return 0\n        if not dist:\n            return -1\n        if not speed:\n            return -1\n        if not hoursBefore:\n            return 0\n        if not dist:\n            return -1\n        if not speed:\n            return -1\n        if not hoursBefore:\n            return 0\n        if not dist:\n            return -1\n        if not speed:\n            return -"
    },
    {
        "number": 1884,
        "title": "Egg Drop With 2 Eggs and N Floors",
        "difficulty": 1,
        "answer": "        if n == 1:\n            return 0\n        if n == 2:\n            return 1\n        if n == 3:\n            return 2\n        if n == 4:\n            return 3\n        if n == 5:\n            return 4\n        if n == 6:\n            return 5\n        if n == 7:\n            return 6\n        if n == 8:\n            return 7\n        if n == 9:\n            return 8\n        if n == 10:\n            return 9\n        if n == 11:\n            return 10\n        if n == 12:\n            return 11\n        if n == 13:\n            return 12\n        if n == 14:\n            return 13\n        if n == 15:\n            return 14\n        if n == 16:\n            return 15\n        if n == 17:\n            return 16\n        if n == 18:\n            return 17\n        if n == 19:\n            return 18\n        if n == 20:\n            return 19\n        if n == 21:\n            return 20\n        if n == 22:\n            return 21\n        if n == 23:\n            "
    },
    {
        "number": 1886,
        "title": "Determine Whether Matrix Can Be Obtained By Rotation",
        "difficulty": 0,
        "answer": "        if len(mat)!= len(target):\n            return False\n        if len(mat) == 1:\n            return True\n        if len(mat) == 2:\n            return mat[0][0] == target[0][0] and mat[1][0] == target[1][0]\n        if len(mat) == 3:\n            return mat[0][0] == target[0][0] and mat[1][0] == target[1][0] and mat[2][0] == target[2][0]\n        if len(mat) == 4:\n            return mat[0][0] == target[0][0] and mat[1][0] == target[1][0] and mat[2][0] == target[2][0] and mat[3][0] == target[3][0]\n        if len(mat) == 5:\n            return mat[0][0] == target[0][0] and mat[1][0] == target[1][0] and mat[2][0] == target[2][0] and mat[3]["
    },
    {
        "number": 1887,
        "title": "Reduction Operations to Make the Array Elements Equal",
        "difficulty": 1,
        "answer": "        n = len(nums)\n        if n == 0:\n            return 0\n        if n == 1:\n            return 1\n        if n == 2:\n            return 1 if nums[0] == nums[1] else 2\n        if n == 3:\n            return 1 if nums[0] == nums[1] and nums[1] == nums[2] else 2\n        if n == 4:\n            return 1 if nums[0] == nums[1] and nums[1] == nums[2] and nums[2] == nums[3] else 2\n        if n == 5:\n            return 1 if nums[0] == nums[1] and nums[1] == nums[2] and nums[2] == nums[3] and nums[3] == nums[4] else 2\n        if n == 6:\n            return 1 if nums[0] == nums[1] and nums[1] == nums[2] and nums[2] == nums[3] and"
    },
    {
        "number": 1888,
        "title": "Minimum Number of Flips to Make the Binary String Alternating",
        "difficulty": 1,
        "answer": "        n = len(s)\n        if n == 0:\n            return 0\n        if n == 1:\n            return 1\n        if n == 2:\n            return 1 if s[0] == s[1] else 0\n        if n == 3:\n            return 1 if s[0] == s[1] else 2 if s[1] == s[2] else 0\n        if n == 4:\n            return 1 if s[0] == s[1] else 2 if s[1] == s[2] else 3 if s[2] == s[3] else 0\n        if n == 5:\n            return 1 if s[0] == s[1] else 2 if s[1] == s[2] else 3 if s[2] == s[3] else 4 if s[3] == s[4] else 0\n        if n == 6:\n            return 1 if s[0] == s[1] else 2 if s[1] == s[2] else 3 if s[2] == s[3] else 4 if s[3] == s[4]"
    },
    {
        "number": 1889,
        "title": "Minimum Space Wasted From Packaging",
        "difficulty": 2,
        "answer": "        # https://leetcode.com/problems/minimum-waste-to-fit-n-packages-in-boxes/discuss/\n        # https://leetcode.com/problems/minimum-waste-to-fit-n-packages-in-boxes/discuss/\n        # https://leetcode.com/problems/minimum-waste-to-fit-n-packages-in-boxes/discuss/\n        # https://leetcode.com/problems/minimum-waste-to-fit-n-packages-in-boxes/discuss/\n        # https://leetcode.com/problems/minimum-waste-to-fit-n-packages-in-boxes/discuss/\n        # https://leetcode.com/problems/minimum-waste-to-fit-n-packages-in-boxes/discuss/\n        # https://leetcode.com/problems/minimum-waste-to-fit-n-packages-in-boxes/discuss/\n        # https://leetcode.com/problems"
    },
    {
        "number": 1893,
        "title": "Check if All the Integers in a Range Are Covered",
        "difficulty": 0,
        "answer": "        if left > right:\n            return False\n        if left < 0 or right < 0:\n            return False\n        if left == right:\n            return ranges[left][0] <= left <= ranges[left][1]\n        if left + 1 == right:\n            return ranges[left][0] <= left <= ranges[left][1] or ranges[right][0] <= right <= ranges[right][1]\n        if left + 1 < right:\n            return ranges[left][0] <= left <= ranges[left][1] or ranges[right][0] <= right <= ranges[right][1] or \\\n                   self.isCovered(ranges, left + 1, right - 1)\n        return False"
    },
    {
        "number": 1894,
        "title": "Find the Student that Will Replace the Chalk",
        "difficulty": 1,
        "answer": "        chalk_len = len(chalk)\n        if k > chalk_len:\n            return -1\n        if k == 0:\n            return 0\n        if k == 1:\n            return 1\n        if k == 2:\n            return 0\n        if k == 3:\n            return 1\n        if k == 4:\n            return 0\n        if k == 5:\n            return 1\n        if k == 6:\n            return 0\n        if k == 7:\n            return 1\n        if k == 8:\n            return 0\n        if k == 9:\n            return 1\n        if k == 10:\n            return 0\n        if k == 11:\n            return 1\n        if k == 12:\n            return 0\n        if k == 13:\n            return 1\n        if k == 14:\n            return 0\n        if k == 15:\n            return 1\n        if k == 16:\n            return 0\n        if k == 17:\n            return 1\n        if k == 18:\n            return 0\n        if k == 19:\n            return 1\n        if k =="
    },
    {
        "number": 1895,
        "title": "Largest Magic Square",
        "difficulty": 1,
        "answer": "        n = len(grid)\n        m = len(grid[0])\n        if n == 0 or m == 0:\n            return 0\n        if n == 1 or m == 1:\n            return 1\n        if n == 2 or m == 2:\n            return 2\n        if n == 3 or m == 3:\n            return 3\n        if n == 4 or m == 4:\n            return 4\n        if n == 5 or m == 5:\n            return 5\n        if n == 6 or m == 6:\n            return 6\n        if n == 7 or m == 7:\n            return 7\n        if n == 8 or m == 8:\n            return 8\n        if n == 9 or m == 9:\n            return 9\n        if n == 10 or m == 10:\n            return 10\n        if n == 11 or m == 11:\n            return 11\n        if n == 12 or m == 12:\n            return 12\n        if n == 13 or m == 13:\n            return 13\n        if n == 14 or m == 14:\n            return 14\n        if n == 15 or m"
    },
    {
        "number": 1896,
        "title": "Minimum Cost to Change the Final Value of Expression",
        "difficulty": 2,
        "answer": "        expression = expression.replace('(','').replace(')','')\n        expression = expression.replace('&', '|')\n        expression = expression.replace('|', '&')\n        expression = expression.replace('0', '1')\n        expression = expression.replace('1', '0')\n        expression = expression.replace('&', '|')\n        expression = expression.replace('|', '&')\n        expression = expression.replace('(','').replace(')','')\n        expression = expression.replace('0', '1')\n        expression = expression.replace('1', '0')\n        expression = expression.replace('&', '|')\n        expression = expression.replace('|', '&')\n        expression = expression.replace('0', '1')\n        expression = expression.replace('1', '0')\n        expression = expression.replace('&', '|')\n        expression = expression.replace('|', '&')\n        expression = expression.replace('0', '1')\n        expression = expression.replace('1', '0')\n        expression = expression.replace"
    },
    {
        "number": 1897,
        "title": "Redistribute Characters to Make All Strings Equal",
        "difficulty": 0,
        "answer": "        if len(words) < 2:\n            return True\n        if len(words) == 2:\n            return words[0] == words[1]\n        if len(words) == 3:\n            return words[0] == words[1] and words[1] == words[2]\n        if len(words) == 4:\n            return words[0] == words[1] and words[1] == words[2] and words[2] == words[3]\n        if len(words) == 5:\n            return words[0] == words[1] and words[1] == words[2] and words[2] == words[3] and words[3] == words[4]\n        if len(words) == 6:\n            return words[0] == words[1] and words[1] == words[2] and words[2] == words[3] and words[3] == words[4] and words[4] == words[5]\n        if len(words) == 7:\n            return words[0] == words[1] and words[1]"
    },
    {
        "number": 1898,
        "title": "Maximum Number of Removable Characters",
        "difficulty": 1,
        "answer": "        n = len(s)\n        m = len(p)\n        dp = [[0] * (n + 1) for _ in range(m + 1)]\n        for i in range(1, m + 1):\n            dp[i][0] = 0\n        for i in range(1, n + 1):\n            dp[0][i] = 0\n        for i in range(1, m + 1):\n            for j in range(1, n + 1):\n                if s[j - 1] == p[i - 1]:\n                    dp[i][j] = dp[i - 1][j - 1] + 1\n                else:\n                    dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])\n        return dp[-1][-1]"
    },
    {
        "number": 1899,
        "title": "Merge Triplets to Form Target Triplet",
        "difficulty": 1,
        "answer": "        if len(triplets) == 0:\n            return False\n        if len(target) == 0:\n            return True\n        if len(triplets) == 1:\n            return triplets[0][0] == target[0] and triplets[0][1] == target[1] and triplets[0][2] == target[2]\n        if len(triplets) == 2:\n            return (triplets[0][0] == target[0] and triplets[0][1] == target[1]) or (triplets[1][0] == target[0] and triplets[1][1] == target[1])\n        if len(triplets) == 3:\n            return (triplets[0][0] == target[0] and triplets[0][1] == target[1]) or (triplets[1][0] == target[0] and triplets[1][1] == target[1]) or (triplets[2][0] == target[0] and triplets[2][1] == target[1])\n        if len(triplets) =="
    },
    {
        "number": 1900,
        "title": "The Earliest and Latest Rounds Where Players Compete",
        "difficulty": 2,
        "answer": "        # https://leetcode.com/problems/earliest-and-latest/discuss/\n        # https://leetcode.com/problems/earliest-and-latest/discuss/\n        # https://leetcode.com/problems/earliest-and-latest/discuss/\n        # https://leetcode.com/problems/earliest-and-latest/discuss/\n        # https://leetcode.com/problems/earliest-and-latest/discuss/\n        # https://leetcode.com/problems/earliest-and-latest/discuss/\n        # https://leetcode.com/problems/earliest-and-latest/discuss/\n        # https://leetcode.com/problems/earliest-and-latest/discuss/\n        # https://leetcode.com/problems/earliest-and-latest/discuss/\n        # https://leetcode.com/problems/earliest-and-latest/discuss/\n        # https://leetcode.com/"
    },
    {
        "number": 1901,
        "title": "Find a Peak Element II",
        "difficulty": 1,
        "answer": "        # https://leetcode.com/problems/find-peak-element/discuss/105500/Java-O(n)-time-and-O(1)-space-solution-with-explanation\n        # https://leetcode.com/problems/find-peak-element/discuss/105500/Java-O(n)-time-and-O(1)-space-solution-with-explanation\n        # https://leetcode.com/problems/find-peak-element/discuss/105500/Java-O(n)-time-and-O(1)-space-solution-with-explanation\n        # https://leetcode.com/problems/find-peak-element/discuss/105500/Java-O(n)-time-and-O(1)-space-solution-with-explanation\n        # https://leetcode.com/problems/find-peak-element/discuss/105500/Java-O(n)-time-and-O(1)-space-solution-with"
    },
    {
        "number": 1903,
        "title": "Largest Odd Number in String",
        "difficulty": 0,
        "answer": "        if num == \"\":\n            return \"\"\n        odd_num = \"\"\n        for i in range(len(num)):\n            if num[i] % 2 == 1:\n                odd_num = num[i] + odd_num\n            else:\n                odd_num = num[i]\n        return odd_num\n"
    },
    {
        "number": 1904,
        "title": "The Number of Full Rounds You Have Played",
        "difficulty": 1,
        "answer": "        start = datetime.strptime(loginTime, \"%H:%M\")\n        end = datetime.strptime(logoutTime, \"%H:%M\")\n        if start > end:\n            return 0\n        return int(end.hour / 15) + 1\n"
    },
    {
        "number": 1905,
        "title": "Count Sub Islands",
        "difficulty": 1,
        "answer": "        m = len(grid1)\n        n = len(grid1[0])\n        grid = [[0 for _ in range(n)] for _ in range(m)]\n        for i in range(m):\n            for j in range(n):\n                if grid1[i][j] == 1:\n                    grid[i][j] = 1\n        count = 0\n        for i in range(m):\n            for j in range(n):\n                if grid[i][j] == 1:\n                    for k in range(m):\n                        for l in range(n):\n                            if grid2[k][l] == 1:\n                                if grid1[k][l] == 1:\n                                    count += 1\n        return count\n"
    },
    {
        "number": 1906,
        "title": "Minimum Absolute Difference Queries",
        "difficulty": 1,
        "answer": "        # https://leetcode.com/problems/minimum-absolute-difference-in-an-array/discuss/105500/Java-O(n)-solution-with-explanation\n        # https://leetcode.com/problems/minimum-absolute-difference-in-an-array/discuss/105501/C%2B%2B-solution-with-explanation\n        # https://leetcode.com/problems/minimum-absolute-difference-in-an-array/discuss/105502/C%2B%2B-solution-with-explanation\n        # https://leetcode.com/problems/minimum-absolute-difference-in-an-array/discuss/105503/C%2B%2B-solution-with-explanation\n        # https://leetcode.com/problems/minimum-absolute-difference-in-an-array/discuss/105504/C%2B%2B-solution-with-explanation\n        #"
    },
    {
        "number": 1909,
        "title": "Remove One Element to Make the Array Strictly Increasing",
        "difficulty": 0,
        "answer": "        n = len(nums)\n        if n == 1:\n            return True\n        if n == 2:\n            return nums[0] < nums[1]\n        if n == 3:\n            return nums[0] < nums[1] and nums[1] < nums[2]\n        if n == 4:\n            return nums[0] < nums[1] and nums[1] < nums[2] and nums[2] < nums[3]\n        if n == 5:\n            return nums[0] < nums[1] and nums[1] < nums[2] and nums[2] < nums[3] and nums[3] < nums[4]\n        if n == 6:\n            return nums[0] < nums[1] and nums[1] < nums[2] and nums[2] < nums[3] and nums[3] < nums[4] and nums[4] < nums[5]\n        if n == 7"
    },
    {
        "number": 1910,
        "title": "Remove All Occurrences of a Substring",
        "difficulty": 1,
        "answer": "        # TODO: implement this\n        pass"
    },
    {
        "number": 1911,
        "title": "Maximum Alternating Subsequence Sum",
        "difficulty": 1,
        "answer": "        n = len(nums)\n        if n == 0:\n            return 0\n        if n == 1:\n            return nums[0]\n        if n == 2:\n            return max(nums[0], nums[1])\n        if n == 3:\n            return max(nums[0], nums[1], nums[2])\n        if n == 4:\n            return max(nums[0], nums[1], nums[2], nums[3])\n        if n == 5:\n            return max(nums[0], nums[1], nums[2], nums[3], nums[4])\n        if n == 6:\n            return max(nums[0], nums[1], nums[2], nums[3], nums[4], nums[5])\n        if n == 7:\n            return max(nums[0], nums[1], nums[2], nums[3], nums[4], nums[5], nums[6])\n        if n == 8:\n            "
    },
    {
        "number": 1912,
        "title": "Design Movie Rental System",
        "difficulty": 2,
        "answer": "        pass"
    },
    {
        "number": 1913,
        "title": "Maximum Product Difference Between Two Pairs",
        "difficulty": 0,
        "answer": "        # https://leetcode.com/problems/maximum-product-difference/discuss/105500/Java-C-solution-with-explanation\n        # https://leetcode.com/problems/maximum-product-difference/discuss/105500/C%2B%2B-solution-with-explanation\n        # https://leetcode.com/problems/maximum-product-difference/discuss/105500/C%2B%2B-solution-with-explanation\n        # https://leetcode.com/problems/maximum-product-difference/discuss/105500/C%2B%2B-solution-with-explanation\n        # https://leetcode.com/problems/maximum-product-difference/discuss/105500/C%2B%2B-solution-with-explanation\n        # https://leetcode.com/problems/maximum-product-difference/discuss/105500/C%2B%2B"
    },
    {
        "number": 1914,
        "title": "Cyclically Rotating a Grid",
        "difficulty": 1,
        "answer": "        m = len(grid)\n        n = len(grid[0])\n        if m % 2!= 0 or n % 2!= 0:\n            return grid\n        rotated_grid = [[0 for _ in range(n)] for _ in range(m)]\n        for i in range(m):\n            for j in range(n):\n                rotated_grid[i][j] = grid[i][j]\n        for i in range(k):\n            for j in range(n):\n                rotated_grid[i][j] = rotated_grid[i][j + n - 1]\n                rotated_grid[i][j + n - 1] = rotated_grid[i + m - 1][j]\n                rotated_grid[i + m - 1][j] = rotated_grid[i + m - 1][j + n - 1]\n                rotated_grid[i + m - 1][j + n - 1] = rotated_grid[i][j]\n        return rotated_grid\n"
    },
    {
        "number": 1915,
        "title": "Number of Wonderful Substrings",
        "difficulty": 1,
        "answer": "        # Solution 1:\n        # https://leetcode.com/problems/wonderful-substrings/discuss/105500/Java-C-solution-with-explanation\n        # https://leetcode.com/problems/wonderful-substrings/discuss/105501/Java-C-solution-with-explanation\n        # https://leetcode.com/problems/wonderful-substrings/discuss/105502/Java-C-solution-with-explanation\n        # https://leetcode.com/problems/wonderful-substrings/discuss/105503/Java-C-solution-with-explanation\n        # https://leetcode.com/problems/wonderful-substrings/discuss/105504/Java-C-solution-with-explanation\n        # https://leetcode.com/problems/wonderful-substrings/discuss/105505/Java-C-solution-with-explanation\n        # https://"
    },
    {
        "number": 1916,
        "title": "Count Ways to Build Rooms in an Ant Colony",
        "difficulty": 2,
        "answer": "        if len(prevRoom) == 0:\n            return 1\n        if len(prevRoom) == 1:\n            return 1\n        if len(prevRoom) == 2:\n            return 2\n        if len(prevRoom) == 3:\n            return 3\n        if len(prevRoom) == 4:\n            return 4\n        if len(prevRoom) == 5:\n            return 5\n        if len(prevRoom) == 6:\n            return 6\n        if len(prevRoom) == 7:\n            return 7\n        if len(prevRoom) == 8:\n            return 8\n        if len(prevRoom) == 9:\n            return 9\n        if len(prevRoom) == 10:\n            return 10\n        if len(prevRoom) == 11:\n            return 11\n        if len(prevRoom) == 12:\n            return 12\n        if len(prevRoom) == 13:\n            return 13\n        if len(prevRoom) == 14:\n            return 14\n        if len(prevRoom) == 15:\n            return 15\n        if len(prevRoom) == 16:"
    },
    {
        "number": 1920,
        "title": "Build Array from Permutation",
        "difficulty": 0,
        "answer": "        ans = []\n        for i in range(len(nums)):\n            ans.append(nums[nums[i]])\n        return ans"
    },
    {
        "number": 1921,
        "title": "Eliminate Maximum Number of Monsters",
        "difficulty": 1,
        "answer": "        # https://leetcode.com/problems/eliminate-maximum-from-distances/discuss/\n        # https://leetcode.com/problems/eliminate-maximum-from-distances/discuss/\n        # https://leetcode.com/problems/eliminate-maximum-from-distances/discuss/\n        # https://leetcode.com/problems/eliminate-maximum-from-distances/discuss/\n        # https://leetcode.com/problems/eliminate-maximum-from-distances/discuss/\n        # https://leetcode.com/problems/eliminate-maximum-from-distances/discuss/\n        # https://leetcode.com/problems/eliminate-maximum-from-distances/discuss/\n        # https://leetcode.com/problems/eliminate-maximum-from-distances/discuss/\n        # https://leetcode.com/problems/eliminate-maximum-from-distances/discuss"
    },
    {
        "number": 1922,
        "title": "Count Good Numbers",
        "difficulty": 1,
        "answer": "        if n < 1:\n            return 0\n        if n == 1:\n            return 5\n        if n == 2:\n            return 10\n        if n == 3:\n            return 15\n        if n == 4:\n            return 20\n        if n == 5:\n            return 25\n        if n == 6:\n            return 30\n        if n == 7:\n            return 35\n        if n == 8:\n            return 40\n        if n == 9:\n            return 45\n        if n == 10:\n            return 50\n        if n == 11:\n            return 55\n        if n == 12:\n            return 60\n        if n == 13:\n            return 65\n        if n == 14:\n            return 70\n        if n == 15:\n            return 75\n        if n == 16:\n            return 80\n        if n == 17:\n            return 85\n        if n == 18:\n            return 90\n        if n == 19:\n            return 95\n        if n == 20:\n            return 100\n        if n == 21:\n            return 105\n        if n == 22:\n            "
    },
    {
        "number": 1923,
        "title": "Longest Common Subpath",
        "difficulty": 2,
        "answer": "        if n == 1:\n            return 0\n        if n == 2:\n            return 1\n        if n == 3:\n            return 2\n        if n == 4:\n            return 2\n        if n == 5:\n            return 2\n        if n == 6:\n            return 3\n        if n == 7:\n            return 3\n        if n == 8:\n            return 3\n        if n == 9:\n            return 3\n        if n == 10:\n            return 3\n        if n == 11:\n            return 3\n        if n == 12:\n            return 3\n        if n == 13:\n            return 3\n        if n == 14:\n            return 3\n        if n == 15:\n            return 3\n        if n == 16:\n            return 3\n        if n == 17:\n            return 3\n        if n == 18:\n            return 3\n        if n == 19:\n            return 3\n        if n == 20:\n            return 3\n        if n == 21:\n            return 3\n        if n == 22:\n            return 3\n        if n == 23:\n            "
    },
    {
        "number": 1925,
        "title": "Count Square Sum Triples",
        "difficulty": 0,
        "answer": "        triples = 0\n        for a in range(1, n + 1):\n            for b in range(a + 1, n + 1):\n                c = n - a - b\n                if a + b == c and a * a + b * b == c * c:\n                    triples += 1\n        return triples\n"
    },
    {
        "number": 1926,
        "title": "Nearest Exit from Entrance in Maze",
        "difficulty": 1,
        "answer": "        m, n = len(maze), len(maze[0])\n        row, col = entrance\n        row_dir = [0, 1, 0, -1]\n        col_dir = [-1, 0, 1, 0]\n        visited = [[False] * n for _ in range(m)]\n        visited[row][col] = True\n        queue = [(row, col)]\n        while queue:\n            row, col = queue.pop(0)\n            for i in range(4):\n                row_dir[i] = row + row_dir[i]\n                col_dir[i] = col + col_dir[i]\n                if row_dir[i] < 0 or row_dir[i] >= m or col_dir[i] < 0 or col_dir[i] >= n or maze[row_dir[i]][col_dir[i]] == '+':\n                    continue\n                if maze[row_dir[i]][col_dir[i]] == '.' and not visited[row_dir[i]][col_dir[i"
    },
    {
        "number": 1927,
        "title": "Sum Game",
        "difficulty": 1,
        "answer": "        num = num.replace(\"?\", \"0\")\n        num = num.replace(\"?\", \"9\")\n        num = num.replace(\"?\", \"?\")\n        num = num.replace(\"?\", \"0\")\n        num = num.replace(\"?\", \"9\")\n        num = num.replace(\"?\", \"?\")\n        num = num.replace(\"?\", \"0\")\n        num = num.replace(\"?\", \"9\")\n        num = num.replace(\"?\", \"?\")\n        num = num.replace(\"?\", \"0\")\n        num = num.replace(\"?\", \"9\")\n        num = num.replace(\"?\", \"?\")\n        num = num.replace(\"?\", \"0\")\n        num = num.replace(\"?\", \"9\")\n        num = num.replace(\"?\", \"?\")\n        num = num.replace(\"?\", \"0\")\n        num = num.replace(\"?\", \"9\")\n        num = num.replace(\"?\", \"?\")\n        num = num.replace(\"?\", \"0\")\n        num = num.replace(\"?\", \"9\")\n        num = num.replace(\"?\", \"?\""
    },
    {
        "number": 1928,
        "title": "Minimum Cost to Reach Destination in Time",
        "difficulty": 2,
        "answer": "        n = len(edges)\n        cost = [0] * n\n        for i in range(n):\n            for j in range(i + 1, n):\n                cost[i] += edges[i][j]\n                cost[j] += edges[i][j]\n        for i in range(n):\n            cost[i] += edges[i][i]\n        for i in range(n):\n            cost[i] += passingFees[i]\n        for i in range(n):\n            cost[i] += passingFees[n - 1 - i]\n        for i in range(n):\n            cost[i] += passingFees[i]\n        for i in range(n):\n            cost[i] += passingFees[n - 1 - i]\n        for i in range(n):\n            cost[i] += passingFees[i]\n        for i in range(n):\n            cost[i] += passingFees[n - 1 - i]\n        for i in range(n):\n            cost[i] += passingFees"
    },
    {
        "number": 1929,
        "title": "Concatenation of Array",
        "difficulty": 0,
        "answer": "        n = len(nums)\n        ans = [0] * (2 * n)\n        for i in range(n):\n            ans[i] = nums[i]\n            ans[i + n] = nums[i]\n        return ans\n"
    },
    {
        "number": 1930,
        "title": "Unique Length-3 Palindromic Subsequences",
        "difficulty": 1,
        "answer": "        n = len(s)\n        if n < 3:\n            return 0\n        dp = [0] * (n + 1)\n        for i in range(1, n + 1):\n            dp[i] = dp[i - 1]\n            if s[i - 1] == s[i - 2]:\n                dp[i] += dp[i - 2]\n        return dp[n]"
    },
    {
        "number": 1931,
        "title": "Painting a Grid With Three Different Colors",
        "difficulty": 2,
        "answer": "        dp = [[0 for _ in range(n)] for _ in range(m)]\n        dp[0][0] = 1\n        for i in range(1, m):\n            dp[i][0] = dp[i - 1][0]\n        for j in range(1, n):\n            dp[0][j] = dp[0][j - 1]\n        for i in range(1, m):\n            for j in range(1, n):\n                dp[i][j] = dp[i - 1][j] + dp[i][j - 1]\n        return dp[m - 1][n - 1] % (109 + 7)\n"
    },
    {
        "number": 1932,
        "title": "Merge BSTs to Create Single BST",
        "difficulty": 2,
        "answer": "        def merge(trees, i, j):\n            if trees[i] is None:\n                return trees[j]\n            if trees[j] is None:\n                return trees[i]\n            if trees[i].val == trees[j].val:\n                return merge(trees, i, j + 1)\n            return TreeNode(max(trees[i].val, trees[j].val))"
    },
    {
        "number": 1935,
        "title": "Maximum Number of Words You Can Type",
        "difficulty": 0,
        "answer": "        if len(brokenLetters) == 0:\n            return 0\n        if len(brokenLetters) == 1:\n            return 1\n        if len(brokenLetters) == 2:\n            return 2\n        if len(brokenLetters) == 3:\n            return 3\n        if len(brokenLetters) == 4:\n            return 4\n        if len(brokenLetters) == 5:\n            return 5\n        if len(brokenLetters) == 6:\n            return 6\n        if len(brokenLetters) == 7:\n            return 7\n        if len(brokenLetters) == 8:\n            return 8\n        if len(brokenLetters) == 9:\n            return 9\n        if len(brokenLetters) == 10:\n            return 10\n        if len(brokenLetters) == 11:\n            return 11\n        if len(brokenLetters) == 12:\n            return 12\n        if len(brokenLetters) == 13:\n            return 13\n        if len(brokenLetters) == 14:\n            return 14\n        if len(brokenLetters) == 15"
    },
    {
        "number": 1936,
        "title": "Add Minimum Number of Rungs",
        "difficulty": 1,
        "answer": "        if len(rungs) == 1:\n            return 0\n        if len(rungs) == 2:\n            return 1\n        if len(rungs) == 3:\n            return 1\n        if len(rungs) == 4:\n            return 1\n        if len(rungs) == 5:\n            return 1\n        if len(rungs) == 6:\n            return 1\n        if len(rungs) == 7:\n            return 1\n        if len(rungs) == 8:\n            return 1\n        if len(rungs) == 9:\n            return 1\n        if len(rungs) == 10:\n            return 1\n        if len(rungs) == 11:\n            return 1\n        if len(rungs) == 12:\n            return 1\n        if len(rungs) == 13:\n            return 1\n        if len(rungs) == 14:\n            return 1\n        if len(rungs) == 15:\n            return 1\n        if len(rungs) == 16"
    },
    {
        "number": 1937,
        "title": "Maximum Number of Points with Cost",
        "difficulty": 1,
        "answer": "        n = len(points)\n        m = len(points[0])\n        dp = [[0 for _ in range(m)] for _ in range(n)]\n        dp[0][0] = 1\n        for i in range(1, n):\n            for j in range(1, m):\n                dp[i][j] = dp[i - 1][j]\n                if j > 0:\n                    dp[i][j] += dp[i - 1][j - 1]\n                if i > 0 and j > 0:\n                    dp[i][j] -= abs(points[i - 1][j - 1] - points[i - 1][j])\n        return dp[-1][-1]\n"
    },
    {
        "number": 1938,
        "title": "Maximum Genetic Difference Query",
        "difficulty": 2,
        "answer": "        # https://leetcode.com/problems/maximum-genetic-difference/discuss/105586/Java-O(n)-solution-with-explanation\n        # https://leetcode.com/problems/maximum-genetic-difference/discuss/105586/Java-O(n)-solution-with-explanation\n        # https://leetcode.com/problems/maximum-genetic-difference/discuss/105586/Java-O(n)-solution-with-explanation\n        # https://leetcode.com/problems/maximum-genetic-difference/discuss/105586/Java-O(n)-solution-with-explanation\n        # https://leetcode.com/problems/maximum-genetic-difference/discuss/105586/Java-O(n)-solution-with-explanation\n        # https://leetcode.com/problems/maximum-genetic-difference/discuss/105586/Java-O(n)-s"
    },
    {
        "number": 1941,
        "title": "Check if All Characters Have Equal Number of Occurrences",
        "difficulty": 0,
        "answer": "        freq = collections.Counter(s)\n        return len(freq) == len(set(freq.values()))"
    },
    {
        "number": 1942,
        "title": "The Number of the Smallest Unoccupied Chair",
        "difficulty": 1,
        "answer": "        # https://leetcode.com/problems/smallest-chair/discuss/105586/Java-O(n)-solution-with-explanation\n        # https://leetcode.com/problems/smallest-chair/discuss/105586/Java-O(n)-solution-with-explanation\n        # https://leetcode.com/problems/smallest-chair/discuss/105586/Java-O(n)-solution-with-explanation\n        # https://leetcode.com/problems/smallest-chair/discuss/105586/Java-O(n)-solution-with-explanation\n        # https://leetcode.com/problems/smallest-chair/discuss/105586/Java-O(n)-solution-with-explanation\n        # https://leetcode.com/problems/smallest-chair/discuss/105586/Java-O(n)-solution-with-explanation\n        # https://leetcode.com/"
    },
    {
        "number": 1943,
        "title": "Describe the Painting",
        "difficulty": 1,
        "answer": "        segments = sorted(segments, key=lambda x: x[0])\n        segments = [seg for seg in segments if seg[1] > seg[0]]\n        segments = [seg for seg in segments if seg[2] > 0]\n        segments = [seg for seg in segments if seg[2] <= len(segments)]\n        segments = [seg for seg in segments if seg[0] > 0]\n        segments = [seg for seg in segments if seg[1] < len(segments)]\n        segments = [seg for seg in segments if seg[1] > seg[0]]\n        segments = [seg for seg in segments if seg[2] > 0]\n        segments = [seg for seg in segments if seg[2] <= len(segments)]\n        segments = [seg for seg in segments if seg[0] > 0]\n        segments = [seg for seg in segments if seg[1]"
    },
    {
        "number": 1944,
        "title": "Number of Visible People in a Queue",
        "difficulty": 2,
        "answer": "        heights = sorted(heights)\n        ans = [0] * len(heights)\n        for i in range(1, len(heights)):\n            for j in range(i + 1, len(heights)):\n                if heights[i] < heights[j]:\n                    ans[i] += 1\n                    ans[j] += 1\n        return ans\n"
    },
    {
        "number": 1945,
        "title": "Sum of Digits of String After Convert",
        "difficulty": 0,
        "answer": "        n = len(s)\n        if n == 1:\n            return ord(s) - ord('a') + 1\n        if n == 2:\n            return ord(s[0]) - ord('a') + 1 + ord(s[1]) - ord('a') + 1\n        if n == 3:\n            return ord(s[0]) - ord('a') + 1 + ord(s[1]) - ord('a') + 1 + ord(s[2]) - ord('a') + 1\n        if n == 4:\n            return ord(s[0]) - ord('a') + 1 + ord(s[1]) - ord('a') + 1 + ord(s[2]) - ord('a') + 1 + ord(s[3]) - ord('a') + 1\n        if n == 5:\n            return ord(s[0]) - ord('a') + 1 + ord(s[1]) - ord('a') + 1 + ord(s[2]) - ord('a') + 1 + ord(s[3]) - ord('a') + 1 + ord(s"
    },
    {
        "number": 1946,
        "title": "Largest Number After Mutating Substring",
        "difficulty": 1,
        "answer": "        if len(num) == 1:\n            return num\n        if len(num) == 2:\n            return num\n        if len(num) == 3:\n            return num\n        if len(num) == 4:\n            return num\n        if len(num) == 5:\n            return num\n        if len(num) == 6:\n            return num\n        if len(num) == 7:\n            return num\n        if len(num) == 8:\n            return num\n        if len(num) == 9:\n            return num\n        if len(num) == 10:\n            return num\n        if len(num) == 11:\n            return num\n        if len(num) == 12:\n            return num\n        if len(num) == 13:\n            return num\n        if len(num) == 14:\n            return num\n        if len(num) == 15:\n            return num\n        if len(num) == 16:\n            return num\n        if len(num) == 17:\n            return num\n        if len(num) == 18:\n            return"
    },
    {
        "number": 1947,
        "title": "Maximum Compatibility Score Sum",
        "difficulty": 1,
        "answer": "        students = [[int(x) for x in student] for student in students]\n        mentors = [[int(x) for x in mentor] for mentor in mentors]\n        students = [[student[i] for student in students] for i in range(len(students[0]))]\n        mentors = [[mentor[i] for mentor in mentors] for i in range(len(mentors[0]))]\n        students = [[student[i] for student in students] for i in range(len(students[0]))]\n        mentors = [[mentor[i] for mentor in mentors] for i in range(len(mentors[0]))]\n        students = [[student[i] for student in students] for i in range(len(students[0]))]\n        mentors = [[mentor[i] for mentor in mentors] for i in range(len(mentors[0]))]\n        students = [[student[i] for student in students] for i in range(len(students[0]))]\n        mentors ="
    },
    {
        "number": 1948,
        "title": "Delete Duplicate Folders in System",
        "difficulty": 2,
        "answer": "        paths = [[p] for p in paths]\n        paths = [p for p in paths if len(p) > 1]\n        paths = [p for p in paths if len(p) > 1]\n        paths = [p for p in paths if len(p) > 1]\n        paths = [p for p in paths if len(p) > 1]\n        paths = [p for p in paths if len(p) > 1]\n        paths = [p for p in paths if len(p) > 1]\n        paths = [p for p in paths if len(p) > 1]\n        paths = [p for p in paths if len(p) > 1]\n        paths = [p for p in paths if len(p) > 1]\n        paths = [p for p in paths if len(p) > 1]\n        paths = [p for p in paths if len(p) > 1]\n        paths = [p for p in paths if len(p) > 1]\n        paths = [p for p in"
    },
    {
        "number": 1952,
        "title": "Three Divisors",
        "difficulty": 0,
        "answer": "        if n < 3:\n            return False\n        return sum(1 for i in range(1, n) if n % i == 0) == 3\n"
    },
    {
        "number": 1953,
        "title": "Maximum Number of Weeks for Which You Can Work",
        "difficulty": 1,
        "answer": "        # https://leetcode.com/problems/number-of-weeks-to-complete-milestones/discuss/\n        # https://leetcode.com/problems/number-of-weeks-to-complete-milestones/discuss/\n        # https://leetcode.com/problems/number-of-weeks-to-complete-milestones/discuss/\n        # https://leetcode.com/problems/number-of-weeks-to-complete-milestones/discuss/\n        # https://leetcode.com/problems/number-of-weeks-to-complete-milestones/discuss/\n        # https://leetcode.com/problems/number-of-weeks-to-complete-milestones/discuss/\n        # https://leetcode.com/problems/number-of-weeks-to-complete-milestones/discuss/\n        # https://leetcode.com/problems/number-of-weeks-to-complete-milestones/discuss/\n        #"
    },
    {
        "number": 1954,
        "title": "Minimum Garden Perimeter to Collect Enough Apples",
        "difficulty": 1,
        "answer": "        if neededApples == 0:\n            return 0\n        if neededApples == 1:\n            return 1\n        if neededApples == 2:\n            return 2\n        if neededApples == 3:\n            return 4\n        if neededApples == 4:\n            return 8\n        if neededApples == 5:\n            return 16\n        if neededApples == 6:\n            return 32\n        if neededApples == 7:\n            return 64\n        if neededApples == 8:\n            return 128\n        if neededApples == 9:\n            return 256\n        if neededApples == 10:\n            return 512\n        if neededApples == 11:\n            return 1024\n        if neededApples == 12:\n            return 2048\n        if neededApples == 13:\n            return 4096\n        if neededApples == 14:\n            return 8192\n        if neededApples == 15:\n            return 16384\n        if neededApples == 16:\n            return 32768\n        if neededApples == 17:\n            return 65536\n        if neededApples == 18:\n            return 13"
    },
    {
        "number": 1955,
        "title": "Count Number of Special Subsequences",
        "difficulty": 2,
        "answer": "        if not nums:\n            return 0\n        n = len(nums)\n        dp = [0] * (n + 1)\n        dp[0] = 1\n        dp[1] = 1\n        for i in range(2, n + 1):\n            dp[i] = dp[i - 1]\n            if nums[i - 1] == 0:\n                dp[i] += dp[i - 2]\n            if nums[i - 1] == 1:\n                dp[i] += dp[i - 2]\n            if nums[i - 1] == 2:\n                dp[i] += dp[i - 2]\n        return dp[n] % 109 + 7"
    },
    {
        "number": 1957,
        "title": "Delete Characters to Make Fancy String",
        "difficulty": 0,
        "answer": "        if not s:\n            return \"\"\n        if len(s) == 1:\n            return s\n        s = s.replace(\" \", \"\")\n        s = s.replace(\"\\t\", \"\")\n        s = s.replace(\"\\n\", \"\")\n        s = s.replace(\"\\r\", \"\")\n        s = s.replace(\"\\f\", \"\")\n        s = s.replace(\"\\v\", \"\")\n        s = s.replace(\"\\0\", \"\")\n        s = s.replace(\"\\b\", \"\")\n        s = s.replace(\"\\u2028\", \"\")\n        s = s.replace(\"\\u2029\", \"\")\n        s = s.replace(\"\\u0085\", \"\")\n        s = s.replace(\"\\u2022\", \"\")\n        s = s.replace(\"\\u2023\", \"\")\n        s = s.replace(\"\\u2024\", \"\")\n        s = s.replace(\"\\u2025\", \"\")\n        s = s.replace(\"\\u2026\", \"\")\n        s = s"
    },
    {
        "number": 1958,
        "title": "Check if Move is Legal",
        "difficulty": 1,
        "answer": "        # TODO: implement your solution here\n        return False"
    },
    {
        "number": 1959,
        "title": "Minimum Total Space Wasted With K Resizing Operations",
        "difficulty": 1,
        "answer": "        n = len(nums)\n        if n == 0:\n            return 0\n        if n == 1:\n            return nums[0]\n        if n == 2:\n            return min(nums[0], nums[1])\n        if n == 3:\n            return min(nums[0], nums[1], nums[2])\n        if n == 4:\n            return min(nums[0], nums[1], nums[2], nums[3])\n        if n == 5:\n            return min(nums[0], nums[1], nums[2], nums[3], nums[4])\n        if n == 6:\n            return min(nums[0], nums[1], nums[2], nums[3], nums[4], nums[5])\n        if n == 7:\n            return min(nums[0], nums[1], nums[2], nums[3], nums[4], nums[5], nums[6])\n        if n == 8:\n            "
    },
    {
        "number": 1960,
        "title": "Maximum Product of the Length of Two Palindromic Substrings",
        "difficulty": 2,
        "answer": "        n = len(s)\n        if n == 1:\n            return 1\n        if n == 2:\n            return s[0] * s[1]\n        if n == 3:\n            return max(s[0] * s[1], s[0] * s[2], s[1] * s[2])\n        if n == 4:\n            return max(s[0] * s[1], s[0] * s[2], s[0] * s[3], s[1] * s[2], s[1] * s[3], s[2] * s[3])\n        if n == 5:\n            return max(s[0] * s[1], s[0] * s[2], s[0] * s[3], s[0] * s[4], s[1] * s[2], s[1] * s[3], s[1] * s[4], s[2] * s[3], s[2] * s[4], s[3] * s[4])\n        if n == 6"
    },
    {
        "number": 1961,
        "title": "Check If String Is a Prefix of Array",
        "difficulty": 0,
        "answer": "        if not words:\n            return True\n        if len(words) == 1:\n            return s == words[0]\n        if len(words) == 2:\n            return s.startswith(words[0]) and s.endswith(words[1])\n        if len(words) == 3:\n            return s.startswith(words[0]) and s.endswith(words[1]) and s.endswith(words[2])\n        if len(words) == 4:\n            return s.startswith(words[0]) and s.endswith(words[1]) and s.endswith(words[2]) and s.endswith(words[3])\n        if len(words) == 5:\n            return s.startswith(words[0]) and s.endswith(words[1]) and s.endswith(words[2]) and s.endswith(words[3]) and s.endswith(words[4])\n        if len(words) == 6:\n            return s.startswith(words"
    },
    {
        "number": 1962,
        "title": "Remove Stones to Minimize the Total",
        "difficulty": 1,
        "answer": "        n = len(piles)\n        if n == 1:\n            return piles[0]\n        if n == 2:\n            return min(piles[0], piles[1])\n        if n == 3:\n            return min(min(piles[0], piles[1]), piles[2])\n        if n == 4:\n            return min(min(piles[0], piles[1]), min(piles[2], piles[3]))\n        if n == 5:\n            return min(min(piles[0], piles[1]), min(piles[2], piles[3]), piles[4])\n        if n == 6:\n            return min(min(piles[0], piles[1]), min(piles[2], piles[3]), min(piles[4], piles[5]))\n        if n == 7:\n            return min(min(piles[0], piles[1]), min(piles[2], piles[3]), min(piles[4], piles[5]), piles[6])\n        if n == 8:\n            return min("
    },
    {
        "number": 1963,
        "title": "Minimum Number of Swaps to Make the String Balanced",
        "difficulty": 1,
        "answer": "        n = len(s)\n        if n % 2!= 0:\n            return -1\n        if n == 0:\n            return 0\n        if n == 1:\n            return 0\n        if n == 2:\n            return 1\n        if n == 3:\n            return 2\n        if n == 4:\n            return 1\n        if n == 5:\n            return 2\n        if n == 6:\n            return 3\n        if n == 7:\n            return 4\n        if n == 8:\n            return 5\n        if n == 9:\n            return 6\n        if n == 10:\n            return 7\n        if n == 11:\n            return 8\n        if n == 12:\n            return 9\n        if n == 13:\n            return 10\n        if n == 14:\n            return 11\n        if n == 15:\n            return 12\n        if n == 16:\n            return 13\n        if n == 17:\n            return 14\n        if n == 18:\n            return 15\n        if n == 19:\n            return 16\n        if n == 20:\n            "
    },
    {
        "number": 1964,
        "title": "Find the Longest Valid Obstacle Course at Each Position",
        "difficulty": 2,
        "answer": "        # https://leetcode.com/problems/longest-obstacle-course-at-each-position/discuss/\n        # https://leetcode.com/problems/longest-obstacle-course-at-each-position-ii/discuss/\n        # https://leetcode.com/problems/longest-obstacle-course-at-each-position-iii/discuss/\n        # https://leetcode.com/problems/longest-obstacle-course-at-each-position-iv/discuss/\n        # https://leetcode.com/problems/longest-obstacle-course-at-each-position-v/discuss/\n        # https://leetcode.com/problems/longest-obstacle-course-at-each-position-vi/discuss/\n        # https://leetcode.com/problems/longest-obstacle-course-at-each-position-vii/discuss/\n        # https://leetcode.com/problems/"
    },
    {
        "number": 1967,
        "title": "Number of Strings That Appear as Substrings in Word",
        "difficulty": 0,
        "answer": "        # https://leetcode.com/problems/number-of-strings/discuss/105500/Java-O(n)-time-and-O(n)-space-solution-with-explanation\n        # https://leetcode.com/problems/number-of-strings/discuss/105501/Java-O(n)-time-and-O(n)-space-solution-with-explanation\n        # https://leetcode.com/problems/number-of-strings/discuss/105502/Java-O(n)-time-and-O(n)-space-solution-with-explanation\n        # https://leetcode.com/problems/number-of-strings/discuss/105503/Java-O(n)-time-and-O(n)-space-solution-with-explanation\n        # https://leetcode.com/problems/number-of-strings/discuss/105504/Java-O(n)-time-and-O(n)-space-solution-with"
    },
    {
        "number": 1968,
        "title": "Array With Elements Not Equal to Average of Neighbors",
        "difficulty": 1,
        "answer": "        n = len(nums)\n        if n == 1:\n            return nums\n        if n == 2:\n            return [nums[0], nums[1]]\n        if n == 3:\n            return [nums[0], nums[1], nums[2]]\n        if n == 4:\n            return [nums[0], nums[1], nums[2], nums[3]]\n        if n == 5:\n            return [nums[0], nums[1], nums[2], nums[3], nums[4]]\n        if n == 6:\n            return [nums[0], nums[1], nums[2], nums[3], nums[4], nums[5]]\n        if n == 7:\n            return [nums[0], nums[1], nums[2], nums[3], nums[4], nums[5], nums[6]]\n        if n == 8:\n            return [nums[0], nums[1], nums[2], nums["
    },
    {
        "number": 1969,
        "title": "Minimum Non-Zero Product of the Array Elements",
        "difficulty": 1,
        "answer": "        # p = int(p)\n        # nums = [int(x) for x in p.split(\"b\")]\n        # nums = [int(x) for x in p.split(\"b\")]\n        # nums = [int(x) for x in p.split(\"b\")]\n        # nums = [int(x) for x in p.split(\"b\")]\n        # nums = [int(x) for x in p.split(\"b\")]\n        # nums = [int(x) for x in p.split(\"b\")]\n        # nums = [int(x) for x in p.split(\"b\")]\n        # nums = [int(x) for x in p.split(\"b\")]\n        # nums = [int(x) for x in p.split(\"b\")]\n        # nums = [int(x) for x in p.split(\"b\")]\n        # nums = [int(x) for x in p.split(\"b\")]\n        # nums = [int(x)"
    },
    {
        "number": 1970,
        "title": "Last Day Where You Can Still Cross",
        "difficulty": 2,
        "answer": "        if row == 0 or col == 0:\n            return 0\n        if row == 1 or col == 1:\n            return 1\n        if row == 2 or col == 2:\n            return 2\n        if row == 3 or col == 3:\n            return 3\n        if row == 4 or col == 4:\n            return 4\n        if row == 5 or col == 5:\n            return 5\n        if row == 6 or col == 6:\n            return 6\n        if row == 7 or col == 7:\n            return 7\n        if row == 8 or col == 8:\n            return 8\n        if row == 9 or col == 9:\n            return 9\n        if row == 10 or col == 10:\n            return 10\n        if row == 11 or col == 11:\n            return 11\n        if row == 12 or col == 12:\n            return 12\n        if row == 13 or col == 13:\n            return 13\n        if row == 14 or col == 14:\n            return 14\n        if row == 15 or col == 15:\n            return 15\n        if row == 16 or col == 16:"
    },
    {
        "number": 1971,
        "title": "Find if Path Exists in Graph",
        "difficulty": 0,
        "answer": "        if n == 1:\n            return True\n        if n == 2:\n            return True if source == 0 and destination == 1 else False\n        if n == 3:\n            return True if source == 0 and destination == 2 or source == 1 and destination == 2 or source == 2 and destination == 0 else False\n        if n == 4:\n            return True if source == 0 and destination == 3 or source == 1 and destination == 3 or source == 2 and destination == 3 or source == 3 and destination == 0 or source == 3 and destination == 1 or source == 3 and destination == 2 else False\n        if n == 5:\n            return True if source == 0 and destination == 4 or source == 1 and destination == 4 or source == 2 and destination == 4 or source == 3 and destination == 4 or source == 4 and destination == 0 or source == 4 and destination == 1 or source == 4 and destination == 2 or source == 4 and destination == 3 else False\n        if n == 6:\n            return True if source == 0 and destination == 5 or source == 1 and destination == 5 or source == 2 and destination == 5 or source == 3 and destination == 5 or"
    },
    {
        "number": 1974,
        "title": "Minimum Time to Type Word Using Special Typewriter",
        "difficulty": 0,
        "answer": "        # https://leetcode.com/problems/typing-row/discuss/105586/Java-C-solution-with-explanation\n        # https://leetcode.com/problems/typing-row/discuss/105586/Java-C-solution-with-explanation\n        # https://leetcode.com/problems/typing-row/discuss/105586/Java-C-solution-with-explanation\n        # https://leetcode.com/problems/typing-row/discuss/105586/Java-C-solution-with-explanation\n        # https://leetcode.com/problems/typing-row/discuss/105586/Java-C-solution-with-explanation\n        # https://leetcode.com/problems/typing-row/discuss/105586/Java-C-solution-with-explanation\n        # https://leetcode.com/problems/typing-row/discuss/10"
    },
    {
        "number": 1975,
        "title": "Maximum Matrix Sum",
        "difficulty": 1,
        "answer": "        n = len(matrix)\n        if n == 0:\n            return 0\n        if n == 1:\n            return matrix[0][0]\n        if n == 2:\n            return matrix[0][0] + matrix[1][1]\n        if n == 3:\n            return matrix[0][0] + matrix[1][1] + matrix[2][2]\n        if n == 4:\n            return matrix[0][0] + matrix[1][1] + matrix[2][2] + matrix[3][3]\n        if n == 5:\n            return matrix[0][0] + matrix[1][1] + matrix[2][2] + matrix[3][3] + matrix[4][4]\n        if n == 6:\n            return matrix[0][0] + matrix[1][1] + matrix[2][2] + matrix[3][3] + matrix[4][4] + matrix[5][5]\n        if n == 7:\n            return matrix[0][0] + matrix[1][1] + matrix[2][2]"
    },
    {
        "number": 1976,
        "title": "Number of Ways to Arrive at Destination",
        "difficulty": 1,
        "answer": "        # dp[i][j] = dp[i - 1][j] + dp[i - 1][j - 1]\n        dp = [[0 for _ in range(n)] for _ in range(n)]\n        for i in range(n):\n            dp[i][i] = 1\n        for i in range(n):\n            for j in range(i + 1, n):\n                dp[i][j] = dp[i][j - 1] + dp[i - 1][j]\n        return dp[n - 1][n - 1] % 109 + 7"
    },
    {
        "number": 1977,
        "title": "Number of Ways to Separate Numbers",
        "difficulty": 2,
        "answer": "        num_list = list(num)\n        num_list.sort()\n        return self.num_combinations(num_list)"
    },
    {
        "number": 1979,
        "title": "Find Greatest Common Divisor of Array",
        "difficulty": 0,
        "answer": "        nums = sorted(nums)\n        if len(nums) == 1:\n            return nums[0]\n        if len(nums) == 2:\n            return nums[0] if nums[0] > nums[1] else nums[1]\n        if len(nums) == 3:\n            return nums[0] if nums[0] > nums[1] else nums[1] if nums[1] > nums[2] else nums[2]\n        if len(nums) == 4:\n            return nums[0] if nums[0] > nums[1] else nums[1] if nums[1] > nums[2] else nums[2] if nums[2] > nums[3] else nums[3]\n        if len(nums) == 5:\n            return nums[0] if nums[0] > nums[1] else nums[1] if nums[1] > nums[2] else nums[2] if num"
    },
    {
        "number": 1980,
        "title": "Find Unique Binary String",
        "difficulty": 1,
        "answer": "        n = len(nums)\n        if n == 1:\n            return nums[0]\n        if n == 2:\n            return \"\".join(sorted(set(nums)))\n        if n == 3:\n            return \"\".join(sorted(set(nums) - set([\"00\", \"01\", \"10\", \"11\"])))\n        if n == 4:\n            return \"\".join(sorted(set(nums) - set([\"00\", \"01\", \"10\", \"11\", \"00\", \"01\", \"10\", \"11\"])))\n        if n == 5:\n            return \"\".join(sorted(set(nums) - set([\"00\", \"01\", \"10\", \"11\", \"00\", \"01\", \"10\", \"11\", \"00\", \"01\", \"10\", \"11\"])))\n        if n == 6:\n            return \"\".join(sorted(set(nums) - set([\"00\", \"01\", \"10\", \"11\", \"00\", \"01\", \"10\", \"11\", \"00\", \"01\","
    },
    {
        "number": 1981,
        "title": "Minimize the Difference Between Target and Chosen Elements",
        "difficulty": 1,
        "answer": "        m, n = len(mat), len(mat[0])\n        if m == 1:\n            return abs(mat[0][0] - target)\n        if n == 1:\n            return abs(mat[0][0] - target)\n        if m == 2:\n            return abs(mat[0][0] - mat[1][0])\n        if n == 2:\n            return abs(mat[0][0] - mat[0][1])\n        if m == 3:\n            return min(abs(mat[0][0] - mat[1][0]), abs(mat[0][0] - mat[1][1]), abs(mat[0][0] - mat[2][0]))\n        if n == 3:\n            return min(abs(mat[0][0] - mat[0][1]), abs(mat[0][0] - mat[0][2]), abs(mat[1][0] - mat[1][1]), abs(mat[1][0] - mat[1][2]), abs(mat[2][0] - mat[2]["
    },
    {
        "number": 1982,
        "title": "Find Array Given Subset Sums",
        "difficulty": 2,
        "answer": "        if n == 1:\n            return [sums[0]]\n        if n == 2:\n            return [sums[0], sums[1]]\n        if n == 3:\n            return [sums[0], sums[1], sums[2]]\n        if n == 4:\n            return [sums[0], sums[1], sums[2], sums[3]]\n        if n == 5:\n            return [sums[0], sums[1], sums[2], sums[3], sums[4]]\n        if n == 6:\n            return [sums[0], sums[1], sums[2], sums[3], sums[4], sums[5]]\n        if n == 7:\n            return [sums[0], sums[1], sums[2], sums[3], sums[4], sums[5], sums[6]]\n        if n == 8:\n            return [sums[0], sums[1], sums[2], sums[3], sums[4], sums[5], sums[6], sums[7]]\n        if n == 9:\n            return ["
    },
    {
        "number": 1984,
        "title": "Minimum Difference Between Highest and Lowest of K Scores",
        "difficulty": 0,
        "answer": "        n = len(nums)\n        if n < k:\n            return -1\n        if n == 1:\n            return nums[0]\n        if n == 2:\n            return abs(nums[0] - nums[1])\n        if n == 3:\n            return min(abs(nums[0] - nums[1]), abs(nums[0] - nums[2]))\n        if n == 4:\n            return min(abs(nums[0] - nums[1]), abs(nums[0] - nums[2]), abs(nums[0] - nums[3]))\n        if n == 5:\n            return min(abs(nums[0] - nums[1]), abs(nums[0] - nums[2]), abs(nums[0] - nums[3]), abs(nums[0] - nums[4]))\n        if n == 6:\n            return min(abs(nums[0] - nums[1]), abs(nums[0] - nums["
    },
    {
        "number": 1985,
        "title": "Find the Kth Largest Integer in the Array",
        "difficulty": 1,
        "answer": "        nums = sorted(nums)\n        return nums[-k]\n"
    },
    {
        "number": 1986,
        "title": "Minimum Number of Work Sessions to Finish the Tasks",
        "difficulty": 1,
        "answer": "        n = len(tasks)\n        if n == 1:\n            return 1\n        if n == 2:\n            return min(tasks) + 1\n        if n == 3:\n            return min(tasks) + min(tasks) + 1\n        if n == 4:\n            return min(tasks) + min(tasks) + min(tasks) + 1\n        if n == 5:\n            return min(tasks) + min(tasks) + min(tasks) + min(tasks) + 1\n        if n == 6:\n            return min(tasks) + min(tasks) + min(tasks) + min(tasks) + min(tasks) + 1\n        if n == 7:\n            return min(tasks) + min(tasks) + min(tasks) + min(tasks) + min(tasks) + min(tasks) + 1\n        if n == 8:\n            return min(tasks) + min(tasks) + min(tasks) + min(tasks) + min(tasks)"
    },
    {
        "number": 1987,
        "title": "Number of Unique Good Subsequences",
        "difficulty": 2,
        "answer": "        # https://leetcode.com/problems/number-of-unique-good-subsequences/discuss/105500/Java-Solution-with-explanation-and-examples\n        # https://leetcode.com/problems/number-of-unique-good-subsequences/discuss/105501/Java-Solution-with-explanation-and-examples\n        # https://leetcode.com/problems/number-of-unique-good-subsequences/discuss/105502/Java-Solution-with-explanation-and-examples\n        # https://leetcode.com/problems/number-of-unique-good-subsequences/discuss/105503/Java-Solution-with-explanation-and-examples\n        # https://leetcode.com/problems/number-of-unique-good-subsequences/discuss/105504/Java-Solution-with-explanation-and-examples\n        # https://leetcode.com/problems/number-"
    },
    {
        "number": 1991,
        "title": "Find the Middle Index in Array",
        "difficulty": 0,
        "answer": "        if len(nums) == 1:\n            return 0\n        if len(nums) == 2:\n            return nums[0] + nums[1]\n        if len(nums) == 3:\n            return nums[0] + nums[1] + nums[2]\n        if len(nums) == 4:\n            return nums[0] + nums[1] + nums[2] + nums[3]\n        if len(nums) == 5:\n            return nums[0] + nums[1] + nums[2] + nums[3] + nums[4]\n        if len(nums) == 6:\n            return nums[0] + nums[1] + nums[2] + nums[3] + nums[4] + nums[5]\n        if len(nums) == 7:\n            return nums[0] + nums[1] + nums[2] + nums[3] + nums[4] + nums[5] + num"
    },
    {
        "number": 1992,
        "title": "Find All Groups of Farmland",
        "difficulty": 1,
        "answer": "        # https://leetcode.com/problems/find-farmland/discuss/105586/Java-O(n)-solution-with-explanation\n        # https://leetcode.com/problems/find-farmland/discuss/105586/Java-O(n)-solution-with-explanation\n        # https://leetcode.com/problems/find-farmland/discuss/105586/Java-O(n)-solution-with-explanation\n        # https://leetcode.com/problems/find-farmland/discuss/105586/Java-O(n)-solution-with-explanation\n        # https://leetcode.com/problems/find-farmland/discuss/105586/Java-O(n)-solution-with-explanation\n        # https://leetcode.com/problems/find-farmland/discuss/105586/Java-O(n)-solution-with-explanation\n        # https://leetcode.com/"
    },
    {
        "number": 1993,
        "title": "Operations on Tree",
        "difficulty": 1,
        "answer": "        pass"
    },
    {
        "number": 1994,
        "title": "The Number of Good Subsets",
        "difficulty": 2,
        "answer": "        nums = sorted(nums)\n        n = len(nums)\n        dp = [0] * (n + 1)\n        for i in range(1, n + 1):\n            dp[i] = dp[i - 1] + 1\n        dp[0] = 1\n        dp[n + 1] = 1\n        for i in range(1, n + 1):\n            for j in range(i + 1, n + 1):\n                dp[j] = dp[j] + dp[i - 1]\n        return dp[n]"
    },
    {
        "number": 1995,
        "title": "Count Special Quadruplets",
        "difficulty": 0,
        "answer": "        n = len(nums)\n        if n < 4:\n            return 0\n        dp = [0] * (n * (n - 1) // 2)\n        for i in range(n - 3):\n            for j in range(i + 1, n - 2):\n                k = j + 1\n                dp[i * (n - 1) + j] = dp[i * (n - 1) + j] + dp[i * (n - 1) + k] + dp[j * (n - 1) + k]\n        return sum(dp)"
    },
    {
        "number": 1996,
        "title": "The Number of Weak Characters in the Game",
        "difficulty": 1,
        "answer": "        n = len(properties)\n        dp = [[0] * (n + 1) for _ in range(n + 1)]\n        for i in range(1, n + 1):\n            for j in range(i + 1, n + 1):\n                if properties[i][0] > properties[j][0] and properties[i][1] > properties[j][1]:\n                    dp[i][j] = 1\n        return sum(dp[i][j] for i in range(1, n + 1) for j in range(i + 1, n + 1))"
    },
    {
        "number": 1997,
        "title": "First Day Where You Have Been in All the Rooms",
        "difficulty": 1,
        "answer": "        # https://leetcode.com/problems/first-day-been-in-all-rooms/discuss/105500/Java-C-solution-with-explanation\n        # https://leetcode.com/problems/first-day-been-in-all-rooms/discuss/105501/Java-C-solution-with-explanation\n        # https://leetcode.com/problems/first-day-been-in-all-rooms/discuss/105502/Java-C-solution-with-explanation\n        # https://leetcode.com/problems/first-day-been-in-all-rooms/discuss/105503/Java-C-solution-with-explanation\n        # https://leetcode.com/problems/first-day-been-in-all-rooms/discuss/105504/Java-C-solution-with-explanation\n        # https://leetcode.com/problems/first-day-been-in-all-rooms/"
    },
    {
        "number": 1998,
        "title": "GCD Sort of an Array",
        "difficulty": 2,
        "answer": "        n = len(nums)\n        if n == 1:\n            return True\n        if n == 2:\n            return nums[0] < nums[1]\n        if n == 3:\n            return nums[0] < nums[1] and nums[1] < nums[2]\n        if n == 4:\n            return nums[0] < nums[1] and nums[1] < nums[2] and nums[2] < nums[3]\n        if n == 5:\n            return nums[0] < nums[1] and nums[1] < nums[2] and nums[2] < nums[3] and nums[3] < nums[4]\n        if n == 6:\n            return nums[0] < nums[1] and nums[1] < nums[2] and nums[2] < nums[3] and nums[3] < nums[4] and nums[4] < nums[5]\n        if n == 7"
    },
    {
        "number": 2000,
        "title": "Reverse Prefix of Word",
        "difficulty": 0,
        "answer": "        i = 0\n        while i < len(word) and word[i] == ch:\n            i += 1\n        if i == len(word):\n            return word\n        return word[i:] + word[:i]"
    },
    {
        "number": 2001,
        "title": "Number of Pairs of Interchangeable Rectangles",
        "difficulty": 1,
        "answer": "        n = len(rectangles)\n        if n == 0:\n            return 0\n        if n == 1:\n            return 1\n        dp = [[0] * (n + 1) for _ in range(n + 1)]\n        for i in range(1, n + 1):\n            for j in range(i + 1, n + 1):\n                if rectangles[i][0] == rectangles[j][0] and rectangles[i][1] == rectangles[j][1]:\n                    dp[i][j] = dp[i][j - 1] + 1\n        return sum(dp[n])\n"
    },
    {
        "number": 2002,
        "title": "Maximum Product of the Length of Two Palindromic Subsequences",
        "difficulty": 1,
        "answer": "        if not s:\n            return 0\n        n = len(s)\n        dp = [[0] * (n + 1) for _ in range(n + 1)]\n        for i in range(1, n + 1):\n            dp[i][i] = 1\n        for i in range(1, n + 1):\n            for j in range(i + 1, n + 1):\n                if s[i] == s[j]:\n                    dp[i][j] = dp[i - 1][j - 1] + dp[i][j - 1]\n                else:\n                    dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])\n        return dp[n][n]"
    },
    {
        "number": 2003,
        "title": "Smallest Missing Genetic Value in Each Subtree",
        "difficulty": 2,
        "answer": "        # https://leetcode.com/problems/smallest-missing-value-subtree/discuss/105500/Python-O(n)-time-solution-with-explanation\n        # https://leetcode.com/problems/smallest-missing-value-subtree/discuss/105500/C%2B%2B-Python-O(n)-time-solution-with-explanation\n        # https://leetcode.com/problems/smallest-missing-value-subtree/discuss/105500/C%2B%2B-Python-O(n)-time-solution-with-explanation\n        # https://leetcode.com/problems/smallest-missing-value-subtree/discuss/105500/C%2B%2B-Python-O(n)-time-solution-with-explanation\n        # https://leetcode.com/problems/smallest-missing-value-subtree/discuss/105500/C%2B%2B-"
    },
    {
        "number": 2006,
        "title": "Count Number of Pairs With Absolute Difference K",
        "difficulty": 0,
        "answer": "        n = len(nums)\n        if n < 2:\n            return 0\n        if n == 2:\n            return 0 if nums[0] == nums[1] else 1\n        if n == 3:\n            return 0 if nums[0] == nums[1] and nums[0] == nums[2] else 1 if nums[0] == nums[1] and nums[1] == nums[2] else 2\n        if n == 4:\n            return 0 if nums[0] == nums[1] and nums[1] == nums[2] and nums[2] == nums[3] else 1 if nums[0] == nums[1] and nums[1] == nums[2] and nums[2] == nums[3] else 2 if nums[0] == nums[1] and nums[1] == nums[2] and nums[2] == nums[3] else 3 if nums[0] == nums[1] and nums[1]"
    },
    {
        "number": 2007,
        "title": "Find Original Array From Doubled Array",
        "difficulty": 1,
        "answer": "        if len(changed) == 1:\n            return []\n        if len(changed) == 2:\n            return [changed[0]]\n        if len(changed) == 3:\n            return [changed[0], changed[1], changed[0]]\n        if len(changed) == 4:\n            return [changed[0], changed[1], changed[2], changed[0]]\n        if len(changed) == 5:\n            return [changed[0], changed[1], changed[2], changed[3], changed[0]]\n        if len(changed) == 6:\n            return [changed[0], changed[1], changed[2], changed[3], changed[4], changed[0]]\n        if len(changed) == 7:\n            return [changed[0], changed[1], changed[2], changed[3], changed[4], changed[5], changed[0]]\n        if len(changed) == 8:\n            return [changed[0], changed[1], changed[2], changed[3], changed[4], changed[5], changed[6], changed[0]]\n        if"
    },
    {
        "number": 2008,
        "title": "Maximum Earnings From Taxi",
        "difficulty": 1,
        "answer": "        if n == 0:\n            return 0\n        if n == 1:\n            return rides[0][1] - rides[0][0]\n        if n == 2:\n            return max(rides[0][1] - rides[0][0], rides[1][1] - rides[1][0])\n        if n == 3:\n            return max(rides[0][1] - rides[0][0], rides[1][1] - rides[1][0], rides[2][1] - rides[2][0])\n        if n == 4:\n            return max(rides[0][1] - rides[0][0], rides[1][1] - rides[1][0], rides[2][1] - rides[2][0], rides[3][1] - rides[3][0])\n        if n == 5:\n            return max(rides[0][1] - rides[0][0], rides[1][1] - rides[1][0], rides[2][1] - rides[2][0], rides[3][1] - rides["
    },
    {
        "number": 2009,
        "title": "Minimum Number of Operations to Make Array Continuous",
        "difficulty": 2,
        "answer": "        n = len(nums)\n        if n == 1:\n            return 0\n        if n == 2:\n            return 1\n        if n == 3:\n            return 2\n        if n == 4:\n            return 1\n        if n == 5:\n            return 2\n        if n == 6:\n            return 3\n        if n == 7:\n            return 4\n        if n == 8:\n            return 5\n        if n == 9:\n            return 6\n        if n == 10:\n            return 7\n        if n == 11:\n            return 8\n        if n == 12:\n            return 9\n        if n == 13:\n            return 10\n        if n == 14:\n            return 11\n        if n == 15:\n            return 12\n        if n == 16:\n            return 13\n        if n == 17:\n            return 14\n        if n == 18:\n            return 15\n        if n == 19:\n            return 16\n        if n == 20:\n            return 17\n        if n == 21:\n            return 18\n        if n == 22:\n            return 19"
    },
    {
        "number": 2011,
        "title": "Final Value of Variable After Performing Operations",
        "difficulty": 0,
        "answer": "        operations = [op.strip() for op in operations]\n        operations = [op for op in operations if op]\n        operations = [op for op in operations if op]\n        operations = [op for op in operations if op]\n        operations = [op for op in operations if op]\n        operations = [op for op in operations if op]\n        operations = [op for op in operations if op]\n        operations = [op for op in operations if op]\n        operations = [op for op in operations if op]\n        operations = [op for op in operations if op]\n        operations = [op for op in operations if op]\n        operations = [op for op in operations if op]\n        operations = [op for op in operations if op]\n        operations = [op for op in operations if op]\n        operations = [op for op in operations if op]\n        operations = [op for op in operations if op]\n        operations = [op for op in operations if op]\n        operations = [op for op in operations if"
    },
    {
        "number": 2012,
        "title": "Sum of Beauty in the Array",
        "difficulty": 1,
        "answer": "        beauties = [0] * (nums.length - 1)\n        for i in range(1, nums.length - 1):\n            beauties[i - 1] = 2 if nums[i - 1] < nums[i] < nums[i + 1] else 1\n            beauties[i] = 2 if nums[i - 1] < nums[i] < nums[i + 1] else 0\n        return sum(beauties)"
    },
    {
        "number": 2013,
        "title": "Detect Squares",
        "difficulty": 1,
        "answer": "        pass"
    },
    {
        "number": 2014,
        "title": "Longest Subsequence Repeated k Times",
        "difficulty": 2,
        "answer": "        if not s:\n            return \"\"\n        if k == 1:\n            return s\n        if k == 2:\n            return s[0]\n        if k == 3:\n            return s[0] + s[1]\n        if k == 4:\n            return s[0] + s[1] + s[2]\n        if k == 5:\n            return s[0] + s[1] + s[2] + s[3]\n        if k == 6:\n            return s[0] + s[1] + s[2] + s[3] + s[4]\n        if k == 7:\n            return s[0] + s[1] + s[2] + s[3] + s[4] + s[5]\n        if k == 8:\n            return s[0] + s[1] + s[2] + s[3] + s[4] + s[5] + s[6]\n        if k == 9:\n            return s[0] + s[1] + s[2] + s["
    },
    {
        "number": 2016,
        "title": "Maximum Difference Between Increasing Elements",
        "difficulty": 0,
        "answer": "        n = len(nums)\n        if n == 0:\n            return -1\n        if n == 1:\n            return nums[0]\n        if n == 2:\n            return max(nums[0] - nums[1], nums[1] - nums[0])\n        if n == 3:\n            return max(nums[0] - nums[1], nums[1] - nums[2], nums[2] - nums[0])\n        if n == 4:\n            return max(nums[0] - nums[1], nums[1] - nums[2], nums[2] - nums[3], nums[3] - nums[0])\n        if n == 5:\n            return max(nums[0] - nums[1], nums[1] - nums[2], nums[2] - nums[3], nums[3] - nums[4], nums[4] - nums[0])\n        if n == 6:\n            return max(n"
    },
    {
        "number": 2017,
        "title": "Grid Game",
        "difficulty": 1,
        "answer": "        n = len(grid)\n        m = len(grid[0])\n        dp = [[0] * m for _ in range(n)]\n        dp[0][0] = 1\n        dp[0][m - 1] = 1\n        for r in range(1, n):\n            for c in range(m - 1):\n                dp[r][c] = dp[r - 1][c] + dp[r][c - 1]\n                if grid[r][c] > 0:\n                    dp[r][c] += dp[r - 1][c]\n        return dp[n - 1][m - 1]"
    },
    {
        "number": 2018,
        "title": "Check if Word Can Be Placed In Crossword",
        "difficulty": 1,
        "answer": "        if len(board) == 0:\n            return True\n        if len(board[0]) == 0:\n            return True\n        if len(board[0][0]) == 0:\n            return True\n        if len(board[0][0]) == 1:\n            return True\n        if len(board[0][0]) == 2:\n            return True\n        if len(board[0][0]) == 3:\n            return True\n        if len(board[0][0]) == 4:\n            return True\n        if len(board[0][0]) == 5:\n            return True\n        if len(board[0][0]) == 6:\n            return True\n        if len(board[0][0]) == 7:\n            return True\n        if len(board[0][0]) == 8:\n            return True\n        if len(board[0][0]) == 9:\n            return True\n        if len(board[0][0]) == 10:\n            return True\n        if len(board[0][0]) == 11:\n            return True\n        if len("
    },
    {
        "number": 2019,
        "title": "The Score of Students Solving Math Expression",
        "difficulty": 2,
        "answer": "        stack = []\n        for c in s:\n            if c in '+*':\n                stack.append(stack.pop() + stack.pop())\n            elif c in '-':\n                stack.append(stack.pop() - stack.pop())\n            else:\n                stack.append(int(c))\n        return sum(stack)"
    },
    {
        "number": 2022,
        "title": "Convert 1D Array Into 2D Array",
        "difficulty": 0,
        "answer": "        # Your Solution object will be instantiated and called as such:\n        # obj = Solution(original, m, n)\n        # param_1 = obj.construct2DArray(original, m, n)\n        # return param_1"
    },
    {
        "number": 2023,
        "title": "Number of Pairs of Strings With Concatenation Equal to Target",
        "difficulty": 1,
        "answer": "        if not nums:\n            return 0\n        if len(nums) == 1:\n            return 1\n        if len(nums) == 2:\n            return 1 if nums[0] == nums[1] else 0\n        if len(nums) == 3:\n            return 1 if nums[0] == nums[1] and nums[1] == nums[2] else 0\n        if len(nums) == 4:\n            return 1 if nums[0] == nums[1] and nums[1] == nums[2] and nums[2] == nums[3] else 0\n        if len(nums) == 5:\n            return 1 if nums[0] == nums[1] and nums[1] == nums[2] and nums[2] == nums[3] and nums[3] == nums[4] else 0\n        if len(nums) == 6:\n            return 1 if nums[0] == nums[1] and nums[1] == nums["
    },
    {
        "number": 2024,
        "title": "Maximize the Confusion of an Exam",
        "difficulty": 1,
        "answer": "        answers = [ord(c) for c in answerKey]\n        answers.sort()\n        answers.reverse()\n        answers = [1 if a == ord('T') else 0 for a in answers]\n        answers = [1 if a == ord('F') else 0 for a in answers]\n        answers = [1 if a == ord('T') else 0 for a in answers]\n        answers = [1 if a == ord('F') else 0 for a in answers]\n        answers = [1 if a == ord('T') else 0 for a in answers]\n        answers = [1 if a == ord('F') else 0 for a in answers]\n        answers = [1 if a == ord('T') else 0 for a in answers]\n        answers = [1 if a == ord('F') else 0 for a in answers]\n        answers = [1 if a == ord('T') else 0 for a in answers]\n        answers = [1 if a == ord('F') else 0 for a in"
    },
    {
        "number": 2025,
        "title": "Maximum Number of Ways to Partition an Array",
        "difficulty": 2,
        "answer": "        n = len(nums)\n        dp = [0] * (n + 1)\n        dp[0] = 1\n        dp[1] = 1\n        for i in range(2, n + 1):\n            dp[i] = 0\n            for j in range(1, i):\n                dp[i] += dp[j - 1]\n            dp[i] += dp[i - 1]\n            dp[i] += dp[i - 2]\n            dp[i] += dp[i - 3]\n            dp[i] += dp[i - 4]\n        return dp[n]"
    },
    {
        "number": 2027,
        "title": "Minimum Moves to Convert String",
        "difficulty": 0,
        "answer": "        n = len(s)\n        if n == 0:\n            return 0\n        if n == 1:\n            return 1\n        if n == 2:\n            return 1 if s[0] == 'X' else 2\n        if n == 3:\n            return 1 if s[0] == 'X' else 2 if s[1] == 'X' else 3\n        if n == 4:\n            return 1 if s[0] == 'X' else 2 if s[1] == 'X' else 3 if s[2] == 'X' else 4\n        if n == 5:\n            return 1 if s[0] == 'X' else 2 if s[1] == 'X' else 3 if s[2] == 'X' else 4 if s[3] == 'X' else 5\n        if n == 6:\n            return 1 if s[0] == 'X' else 2 if s[1] == 'X' else 3 if s[2] == 'X' else 4 if s[3] == 'X' else 5 if s[4] == 'X' else 6\n"
    },
    {
        "number": 2028,
        "title": "Find Missing Observations",
        "difficulty": 1,
        "answer": "        if n == 0:\n            return []\n        if n == 1:\n            return [rolls[0]]\n        if n == 2:\n            return [rolls[0], rolls[1]]\n        if n == 3:\n            return [rolls[0], rolls[1], rolls[2]]\n        if n == 4:\n            return [rolls[0], rolls[1], rolls[2], rolls[3]]\n        if n == 5:\n            return [rolls[0], rolls[1], rolls[2], rolls[3], rolls[4]]\n        if n == 6:\n            return [rolls[0], rolls[1], rolls[2], rolls[3], rolls[4], rolls[5]]\n        if n == 7:\n            return [rolls[0], rolls[1], rolls[2], rolls[3], rolls[4], rolls[5], rolls[6]]\n        if n == 8:\n            return [rolls[0], rolls[1], rolls[2], rolls[3], rolls[4], rolls[5], rolls[6], rolls[7]]"
    },
    {
        "number": 2029,
        "title": "Stone Game IX",
        "difficulty": 1,
        "answer": "        n = len(stones)\n        if n == 1:\n            return True\n        if n == 2:\n            return stones[0] % 3 == 0 and stones[1] % 3 == 0\n        if n == 3:\n            return stones[0] % 3 == 0 and stones[1] % 3 == 0 and stones[2] % 3 == 0\n        if n == 4:\n            return stones[0] % 3 == 0 and stones[1] % 3 == 0 and stones[2] % 3 == 0 and stones[3] % 3 == 0\n        if n == 5:\n            return stones[0] % 3 == 0 and stones[1] % 3 == 0 and stones[2] % 3 == 0 and stones[3] % 3 == 0 and stones[4] % 3 == 0\n        if n == 6:\n            return stones[0] % 3 == 0 and stones[1] % 3 == 0 and stones[2] % 3 == 0 and stones[3] % 3 == 0 and stones[4] % 3 == 0 and stones[5] % 3 == 0\n        if n == 7:"
    },
    {
        "number": 2030,
        "title": "Smallest K-Length Subsequence With Occurrences of a Letter",
        "difficulty": 2,
        "answer": "        if repetition == 0:\n            return \"\"\n        if repetition == 1:\n            return s[:k]\n        if repetition == 2:\n            return s[:k] + s[k:]\n        if repetition == 3:\n            return s[:k] + s[k+1:]\n        if repetition == 4:\n            return s[:k] + s[k+2:]\n        if repetition == 5:\n            return s[:k] + s[k+3:]\n        if repetition == 6:\n            return s[:k] + s[k+4:]\n        if repetition == 7:\n            return s[:k] + s[k+5:]\n        if repetition == 8:\n            return s[:k] + s[k+6:]\n        if repetition == 9:\n            return s[:k] + s[k+7:]\n        if repetition == 10:\n            return s[:k] + s[k+8:]\n        if repetition == 11:\n            return s[:k] + s[k+9:]\n        if repetition == 12:"
    },
    {
        "number": 2032,
        "title": "Two Out of Three",
        "difficulty": 0,
        "answer": "        return [x for x in set(nums1 + nums2 + nums3) if x not in set(nums1 + nums2 + nums3 + nums2)]"
    },
    {
        "number": 2033,
        "title": "Minimum Operations to Make a Uni-Value Grid",
        "difficulty": 1,
        "answer": "        # https://leetcode.com/problems/minimum-operations-to-make-a-grid-uniform/discuss/\n        # https://leetcode.com/problems/minimum-operations-to-make-a-grid-uniform/discuss/\n        # https://leetcode.com/problems/minimum-operations-to-make-a-grid-uniform/discuss/\n        # https://leetcode.com/problems/minimum-operations-to-make-a-grid-uniform/discuss/\n        # https://leetcode.com/problems/minimum-operations-to-make-a-grid-uniform/discuss/\n        # https://leetcode.com/problems/minimum-operations-to-make-a-grid-uniform/discuss/\n        # https://leetcode.com/problems/minimum-operations-to-make-a-grid-uniform/discuss/\n        # https://leetcode.com/problems/minimum-operations-to"
    },
    {
        "number": 2034,
        "title": "Stock Price Fluctuation ",
        "difficulty": 1,
        "answer": "        pass"
    },
    {
        "number": 2035,
        "title": "Partition Array Into Two Arrays to Minimize Sum Difference",
        "difficulty": 2,
        "answer": "        n = len(nums)\n        if n == 1:\n            return abs(nums[0])\n        if n == 2:\n            return abs(nums[0] - nums[1])\n        if n == 3:\n            return min(abs(nums[0] - nums[1]), abs(nums[1] - nums[2]), abs(nums[0] - nums[2]))\n        if n == 4:\n            return min(abs(nums[0] - nums[1]), abs(nums[1] - nums[2]), abs(nums[2] - nums[3]), abs(nums[0] - nums[3]))\n        if n == 5:\n            return min(abs(nums[0] - nums[1]), abs(nums[1] - nums[2]), abs(nums[2] - nums[3]), abs(nums[3] - nums[4]), abs(nums[0] - nums[4]))\n        if n == 6:"
    },
    {
        "number": 2037,
        "title": "Minimum Number of Moves to Seat Everyone",
        "difficulty": 0,
        "answer": "        # https://leetcode.com/problems/minimum-moves-to-seat/discuss/105586/Java-O(n)-solution-with-explanation\n        # https://leetcode.com/problems/minimum-moves-to-seat/discuss/105586/Java-O(n)-solution-with-explanation\n        # https://leetcode.com/problems/minimum-moves-to-seat/discuss/105586/Java-O(n)-solution-with-explanation\n        # https://leetcode.com/problems/minimum-moves-to-seat/discuss/105586/Java-O(n)-solution-with-explanation\n        # https://leetcode.com/problems/minimum-moves-to-seat/discuss/105586/Java-O(n)-solution-with-explanation\n        # https://leetcode.com/problems/minimum-moves-to-seat/discuss/105586/Java"
    },
    {
        "number": 2038,
        "title": "Remove Colored Pieces if Both Neighbors are the Same Color",
        "difficulty": 1,
        "answer": "        colors = list(colors)\n        n = len(colors)\n        if n == 1:\n            return colors[0] == 'A'\n        elif n == 2:\n            return colors[0] == 'A' and colors[1] == 'A'\n        elif n == 3:\n            return colors[0] == 'A' and colors[1] == 'A' and colors[2] == 'A'\n        elif n == 4:\n            return colors[0] == 'A' and colors[1] == 'A' and colors[2] == 'A' and colors[3] == 'A'\n        elif n == 5:\n            return colors[0] == 'A' and colors[1] == 'A' and colors[2] == 'A' and colors[3] == 'A' and colors[4] == 'A'\n        elif n == 6:\n            return colors[0] == 'A' and colors[1] == 'A' and colors[2] == 'A' and colors[3] == 'A' and colors"
    },
    {
        "number": 2039,
        "title": "The Time When the Network Becomes Idle",
        "difficulty": 1,
        "answer": "        n = len(edges)\n        # dp[i][j] is the earliest time when the network becomes idle\n        dp = [[0 for _ in range(n)] for _ in range(n)]\n        for i in range(n):\n            dp[i][0] = 0\n            dp[i][i] = 0\n            for j in range(1, n):\n                dp[i][j] = max(dp[i][j - 1], dp[i - 1][j - 1] + patience[i])\n        return dp[n - 1][n - 1]"
    },
    {
        "number": 2040,
        "title": "Kth Smallest Product of Two Sorted Arrays",
        "difficulty": 2,
        "answer": "        if k < 1:\n            return 0\n        if len(nums1) < k:\n            return 0\n        if len(nums2) < k:\n            return 0\n        if len(nums1) == 0 or len(nums2) == 0:\n            return 0\n        if nums1[0] * nums2[0] < 0:\n            return 0\n        if nums1[0] * nums2[0] == 0:\n            return 0\n        if nums1[0] * nums2[0] == nums1[0] * nums2[1]:\n            return nums1[0] * nums2[0]\n        if nums1[0] * nums2[0] == nums1[0] * nums2[1] + nums1[1] * nums2[0]:\n            return nums1[0] * nums2[0] + nums1[1] * nums2[0]\n        if nums1[0] * nums2[0] =="
    },
    {
        "number": 2042,
        "title": "Check if Numbers Are Ascending in a Sentence",
        "difficulty": 0,
        "answer": "        tokens = s.split()\n        numbers = [int(token) for token in tokens if token.isdigit()]\n        if len(numbers) == 0:\n            return True\n        if len(numbers) == 1:\n            return numbers[0] < numbers[-1]\n        if len(numbers) == 2:\n            return numbers[0] < numbers[1]\n        if len(numbers) == 3:\n            return numbers[0] < numbers[1] and numbers[1] < numbers[2]\n        if len(numbers) == 4:\n            return numbers[0] < numbers[1] and numbers[1] < numbers[2] and numbers[2] < numbers[3]\n        if len(numbers) == 5:\n            return numbers[0] < numbers[1] and numbers[1] < numbers[2] and numbers[2] < numbers[3] and numbers[3] < numbers[4]\n        if len(numbers) == 6:\n            return numbers[0] < numbers[1] and numbers[1]"
    },
    {
        "number": 2043,
        "title": "Simple Bank System",
        "difficulty": 1,
        "answer": "        pass"
    },
    {
        "number": 2044,
        "title": "Count Number of Maximum Bitwise-OR Subsets",
        "difficulty": 1,
        "answer": "        n = len(nums)\n        if n == 0:\n            return 0\n        if n == 1:\n            return 1\n        if n == 2:\n            return 2\n        if n == 3:\n            return 3\n        if n == 4:\n            return 4\n        if n == 5:\n            return 5\n        if n == 6:\n            return 6\n        if n == 7:\n            return 7\n        if n == 8:\n            return 8\n        if n == 9:\n            return 9\n        if n == 10:\n            return 10\n        if n == 11:\n            return 11\n        if n == 12:\n            return 12\n        if n == 13:\n            return 13\n        if n == 14:\n            return 14\n        if n == 15:\n            return 15\n        if n == 16:\n            return 16\n        if n == 17:\n            return 17\n        if n == 18:\n            return 18\n        if n == 19:\n            return 19\n        if n == 20:\n            return 20\n        if n == 21:\n            return 21"
    },
    {
        "number": 2045,
        "title": "Second Minimum Time to Reach Destination",
        "difficulty": 2,
        "answer": "        # https://leetcode.com/problems/second-minimum-in-a-binary-search-tree/discuss/105500/Java-O(n)-solution-with-explanation\n        # https://leetcode.com/problems/second-minimum-in-a-binary-search-tree/discuss/105501/Java-O(n)-solution-with-explanation\n        # https://leetcode.com/problems/second-minimum-in-a-binary-search-tree/discuss/105502/Java-O(n)-solution-with-explanation\n        # https://leetcode.com/problems/second-minimum-in-a-binary-search-tree/discuss/105503/Java-O(n)-solution-with-explanation\n        # https://leetcode.com/problems/second-minimum-in-a-binary-search-tree/discuss/105504/Java-O(n)-solution-with-explanation\n        # https://le"
    },
    {
        "number": 2047,
        "title": "Number of Valid Words in a Sentence",
        "difficulty": 0,
        "answer": "        words = sentence.split()\n        return len(words)"
    },
    {
        "number": 2048,
        "title": "Next Greater Numerically Balanced Number",
        "difficulty": 1,
        "answer": "        # https://leetcode.com/problems/next-beautiful-number/discuss/\n        # https://leetcode.com/problems/next-beautiful-number/discuss/\n        # https://leetcode.com/problems/next-beautiful-number/discuss/\n        # https://leetcode.com/problems/next-beautiful-number/discuss/\n        # https://leetcode.com/problems/next-beautiful-number/discuss/\n        # https://leetcode.com/problems/next-beautiful-number/discuss/\n        # https://leetcode.com/problems/next-beautiful-number/discuss/\n        # https://leetcode.com/problems/next-beautiful-number/discuss/\n        # https://leetcode.com/problems/next-beautiful-number/discuss/\n        # https://leetcode.com/problems/next-beautiful-number/discuss/\n        # https://leetcode.com/"
    },
    {
        "number": 2049,
        "title": "Count Nodes With the Highest Score",
        "difficulty": 1,
        "answer": "        n = len(parents)\n        if n == 0:\n            return 0\n        if n == 1:\n            return 1\n        if n == 2:\n            return 1 if parents[0] == -1 else 0\n        if n == 3:\n            return 1 if parents[0] == -1 else 0 if parents[1] == -1 else 0\n        if n == 4:\n            return 1 if parents[0] == -1 else 0 if parents[1] == -1 else 0 if parents[2] == -1 else 0\n        if n == 5:\n            return 1 if parents[0] == -1 else 0 if parents[1] == -1 else 0 if parents[2] == -1 else 0 if parents[3] == -1 else 0\n        if n == 6:\n            return 1 if parents[0] == -1 else 0 if parents[1] == -1 else 0 if parents[2] == -1 else 0 if parents[3] == -1 else 0 if parents[4] == -1 else 0\n        if n == 7:\n            return 1 if parents[0]"
    },
    {
        "number": 2050,
        "title": "Parallel Courses III",
        "difficulty": 2,
        "answer": "        if n == 1:\n            return 0\n        if n == 2:\n            return 1\n        if n == 3:\n            return 1\n        if n == 4:\n            return 1\n        if n == 5:\n            return 1\n        if n == 6:\n            return 2\n        if n == 7:\n            return 2\n        if n == 8:\n            return 2\n        if n == 9:\n            return 2\n        if n == 10:\n            return 2\n        if n == 11:\n            return 3\n        if n == 12:\n            return 3\n        if n == 13:\n            return 3\n        if n == 14:\n            return 3\n        if n == 15:\n            return 4\n        if n == 16:\n            return 4\n        if n == 17:\n            return 4\n        if n == 18:\n            return 4\n        if n == 19:\n            return 5\n        if n == 20:\n            return 5\n        if n == 21:\n            return 5\n        if n == 22:\n            return 5\n        if n == 23:\n            "
    },
    {
        "number": 2053,
        "title": "Kth Distinct String in an Array",
        "difficulty": 0,
        "answer": "        if not arr:\n            return \"\"\n        if len(arr) == 1:\n            return arr[0]\n        if len(arr) == 2:\n            return arr[0] if arr[0]!= arr[1] else \"\"\n        if len(arr) == 3:\n            return arr[0] if arr[0]!= arr[1] else arr[0] if arr[0]!= arr[2] else \"\"\n        if len(arr) == 4:\n            return arr[0] if arr[0]!= arr[1] else arr[0] if arr[0]!= arr[2] else arr[0] if arr[0]!= arr[3] else \"\"\n        if len(arr) == 5:\n            return arr[0] if arr[0]!= arr[1] else arr[0] if arr[0]!= arr[2] else arr[0] if arr[0]!= arr[3] else arr[0] if arr[0]!= arr[4] else \"\"\n        if len(arr) == 6:\n            return arr[0] if"
    },
    {
        "number": 2054,
        "title": "Two Best Non-Overlapping Events",
        "difficulty": 1,
        "answer": "        # https://leetcode.com/problems/max-two-events/discuss/\n        # https://leetcode.com/problems/max-two-events/discuss/\n        # https://leetcode.com/problems/max-two-events/discuss/\n        # https://leetcode.com/problems/max-two-events/discuss/\n        # https://leetcode.com/problems/max-two-events/discuss/\n        # https://leetcode.com/problems/max-two-events/discuss/\n        # https://leetcode.com/problems/max-two-events/discuss/\n        # https://leetcode.com/problems/max-two-events/discuss/\n        # https://leetcode.com/problems/max-two-events/discuss/\n        # https://leetcode.com/problems/max-two-events/discuss/\n        # https://leetcode.com/problems/max-two-events/disc"
    },
    {
        "number": 2055,
        "title": "Plates Between Candles",
        "difficulty": 1,
        "answer": "        n = len(s)\n        dp = [[0] * (n + 1) for _ in range(n + 1)]\n        for i in range(1, n + 1):\n            for j in range(i, n + 1):\n                if s[i - 1] == '|' and s[j - 1] == '|':\n                    dp[i][j] = dp[i - 1][j - 1] + 1\n                elif s[i - 1] == '|' and s[j - 1] == '*':\n                    dp[i][j] = dp[i - 1][j - 1] + 1\n                elif s[i - 1] == '*' and s[j - 1] == '|':\n                    dp[i][j] = dp[i - 1][j - 1] + 1\n                else:\n                    dp[i][j] = 0\n        ans = []\n        for query in queries:\n            ans.append(dp[query[0]][query[1]])\n        return ans\n"
    },
    {
        "number": 2056,
        "title": "Number of Valid Move Combinations On Chessboard",
        "difficulty": 2,
        "answer": "        n = len(pieces)\n        m = len(positions)\n        if n!= m:\n            return 0\n        dp = [[0] * (n + 1) for _ in range(m + 1)]\n        for i in range(1, m + 1):\n            dp[i][0] = 1\n        for i in range(1, n + 1):\n            dp[0][i] = 1\n        for i in range(1, m + 1):\n            for j in range(1, n + 1):\n                if pieces[i - 1] == pieces[j - 1]:\n                    dp[i][j] = dp[i - 1][j - 1]\n                else:\n                    dp[i][j] = dp[i - 1][j] + dp[i][j - 1]\n        return dp[-1][-1]"
    },
    {
        "number": 2057,
        "title": "Smallest Index With Equal Value",
        "difficulty": 0,
        "answer": "        if not nums:\n            return -1\n        if len(nums) == 1:\n            return 0\n        if len(nums) == 2:\n            return nums[0] % 10 == nums[1] % 10\n        if len(nums) == 3:\n            return nums[0] % 10 == nums[1] % 10 and nums[1] % 10 == nums[2] % 10\n        if len(nums) == 4:\n            return nums[0] % 10 == nums[1] % 10 and nums[1] % 10 == nums[2] % 10 and nums[2] % 10 == nums[3] % 10\n        if len(nums) == 5:\n            return nums[0] % 10 == nums[1] % 10 and nums[1] % 10 == nums[2] % 10 and nums[2] % 10 == nums[3] % 10 and nums[3] % 10 == nums[4] % 10\n        if len(nums) == 6:\n"
    },
    {
        "number": 2058,
        "title": "Find the Minimum and Maximum Number of Nodes Between Critical Points",
        "difficulty": 1,
        "answer": "        if head is None or head.next is None:\n            return [-1, -1]"
    },
    {
        "number": 2059,
        "title": "Minimum Operations to Convert Number",
        "difficulty": 1,
        "answer": "        # https://leetcode.com/problems/minimum-operations-to-change-x-to-target/discuss/\n        # https://leetcode.com/problems/minimum-operations-to-change-x-to-target/discuss/\n        # https://leetcode.com/problems/minimum-operations-to-change-x-to-target/discuss/\n        # https://leetcode.com/problems/minimum-operations-to-change-x-to-target/discuss/\n        # https://leetcode.com/problems/minimum-operations-to-change-x-to-target/discuss/\n        # https://leetcode.com/problems/minimum-operations-to-change-x-to-target/discuss/\n        # https://leetcode.com/problems/minimum-operations-to-change-x-to-target/discuss/\n        # https://leetcode.com/problems/minimum-operations-to-change-x-to-"
    },
    {
        "number": 2060,
        "title": "Check if an Original String Exists Given Two Encoded Strings",
        "difficulty": 2,
        "answer": "        if len(s1) > len(s2):\n            return False\n        if len(s1) == len(s2):\n            return True\n        if len(s1) == 1:\n            return True\n        if len(s1) == 2:\n            return s1[0] == s2[0]\n        if len(s1) == 3:\n            return s1[0] == s2[0] and s1[1] == s2[1]\n        if len(s1) == 4:\n            return s1[0] == s2[0] and s1[1] == s2[1] and s1[2] == s2[2]\n        if len(s1) == 5:\n            return s1[0] == s2[0] and s1[1] == s2[1] and s1[2] == s2[2] and s1[3] == s2[3]\n        if len(s1) == 6:\n            return s1[0] == s2[0] and s1"
    },
    {
        "number": 2062,
        "title": "Count Vowel Substrings of a String",
        "difficulty": 0,
        "answer": "        n = len(word)\n        if n == 0:\n            return 0\n        if n == 1:\n            return 1\n        if n == 2:\n            return 1 if word[0] == word[1] else 0\n        if n == 3:\n            return 1 if word[0] == word[1] and word[1] == word[2] else 0\n        if n == 4:\n            return 1 if word[0] == word[1] and word[1] == word[2] and word[2] == word[3] else 0\n        if n == 5:\n            return 1 if word[0] == word[1] and word[1] == word[2] and word[2] == word[3] and word[3] == word[4] else 0\n        if n == 6:\n            return 1 if word[0] == word[1] and word[1] == word[2] and word[2] == word[3] and word[3] == word[4] and word[4] == word[5] else 0\n        if n == 7"
    },
    {
        "number": 2063,
        "title": "Vowels of All Substrings",
        "difficulty": 1,
        "answer": "        if not word:\n            return 0\n        vowels = {'a', 'e', 'i', 'o', 'u'}\n        return sum(1 for char in word if char in vowels)\n"
    },
    {
        "number": 2064,
        "title": "Minimized Maximum of Products Distributed to Any Store",
        "difficulty": 1,
        "answer": "        store_count = len(quantities)\n        store_max = [0] * store_count\n        store_min = [0] * store_count\n        store_max_sum = [0] * store_count\n        store_min_sum = [0] * store_count\n        store_max_sum_sum = [0] * store_count\n        store_min_sum_sum = [0] * store_count\n        store_max_sum_sum_sum = [0] * store_count\n        store_min_sum_sum_sum = [0] * store_count\n        store_max_sum_sum_sum_sum = [0] * store_count\n        store_min_sum_sum_sum_sum = [0] * store_count\n        store_max_sum_sum_sum_sum_sum = [0] * store_count\n        store_min_sum_sum_sum_sum_sum = [0] * store_count\n        store_max_sum_sum_sum_sum_sum_sum = [0] * store_"
    },
    {
        "number": 2065,
        "title": "Maximum Path Quality of a Graph",
        "difficulty": 2,
        "answer": "        # https://leetcode.com/problems/maximal-path-quality/discuss/105500/Java-O(n)-solution-with-explanation\n        # https://leetcode.com/problems/maximal-path-quality/discuss/105501/C%2B%2B-O(n)-solution-with-explanation\n        # https://leetcode.com/problems/maximal-path-quality/discuss/105502/C%2B%2B-O(n)-solution-with-explanation\n        # https://leetcode.com/problems/maximal-path-quality/discuss/105503/C%2B%2B-O(n)-solution-with-explanation\n        # https://leetcode.com/problems/maximal-path-quality/discuss/105504/C%2B%2B-O(n)-solution-with-explanation\n        # https://leetcode.com/problems/maximal-"
    },
    {
        "number": 2068,
        "title": "Check Whether Two Strings are Almost Equivalent",
        "difficulty": 0,
        "answer": "        if len(word1)!= len(word2):\n            return False\n        freq_dict = {c: 0 for c in 'abcdefghijklmnopqrstuvwxyz'}\n        for c in word1:\n            freq_dict[c] += 1\n        for c in word2:\n            freq_dict[c] += 1\n        for c in 'abcdefghijklmnopqrstuvwxyz':\n            if freq_dict[c] > 3:\n                return False\n        return True\n"
    },
    {
        "number": 2069,
        "title": "Walking Robot Simulation II",
        "difficulty": 1,
        "answer": "        # Your Robot object will be instantiated and called as such:\n        # obj = Robot(width, height)\n        # obj.step(num)\n        # param_1 = obj.getPos()\n        # param_2 = obj.getDir()\n        # obj.step(num)\n        # param_1 = obj.getPos()\n        # param_2 = obj.getDir()\n        # obj.step(num)\n        # param_1 = obj.getPos()\n        # param_2 = obj.getDir()\n        # obj.step(num)\n        # param_1 = obj.getPos()\n        # param_2 = obj.getDir()\n        # obj.step(num)\n        # param_1 = obj.getPos()\n        # param_2 = obj.getDir()\n        # obj.step(num)\n        # param_1 = obj.getPos()\n        # param_2 = obj.getDir()\n        # obj.step(num)\n        # param_1 = obj.getPos()\n        # param_2"
    },
    {
        "number": 2070,
        "title": "Most Beautiful Item for Each Query",
        "difficulty": 1,
        "answer": "        # write your code in Python 2.7\n        # use the sorted() function to sort the items by price\n        # use the max() function to find the maximum value in the list\n        # use the max() function to find the maximum value in the list\n        # use the max() function to find the maximum value in the list\n        # use the max() function to find the maximum value in the list\n        # use the max() function to find the maximum value in the list\n        # use the max() function to find the maximum value in the list\n        # use the max() function to find the maximum value in the list\n        # use the max() function to find the maximum value in the list\n        # use the max() function to find the maximum value in the list\n        # use the max() function to find the maximum value in the list\n        # use the max() function to find the maximum value in the list\n        # use the max() function to find the maximum value in the list\n        # use the max() function to find the maximum value in the list\n        # use the max() function to find the maximum value in the list\n        "
    },
    {
        "number": 2071,
        "title": "Maximum Number of Tasks You Can Assign",
        "difficulty": 2,
        "answer": "        # https://leetcode.com/problems/max-task-assign/discuss/12791/Python-O(n)-O(n)-O(1)-O(n)-O(n)-O(n)-O(n)-O(n)-O(n)-O(n)-O(n)-O(n)-O(n)-O(n)-O(n)-O(n)-O(n)-O(n)-O(n)-O(n)-O(n)-O(n)-O(n)-O(n)-O(n)-O(n)-O(n)-O(n)-O(n)-O(n)-O(n)-O(n)-O(n)-O(n)-O(n)-O(n)-O(n)-O(n)-O(n)-O(n)-O(n)-O(n)-O(n)-O(n)-O(n)-O(n)-O(n)-O(n)-O(n)-O(n)-O(n)-O(n)-O(n)-O(n)-O(n)-O"
    },
    {
        "number": 2073,
        "title": "Time Needed to Buy Tickets",
        "difficulty": 0,
        "answer": "        n = len(tickets)\n        if n == 1:\n            return 0\n        if n == 2:\n            return tickets[0] + tickets[1]\n        if n == 3:\n            return tickets[0] + tickets[1] + tickets[2]\n        if n == 4:\n            return tickets[0] + tickets[1] + tickets[2] + tickets[3]\n        if n == 5:\n            return tickets[0] + tickets[1] + tickets[2] + tickets[3] + tickets[4]\n        if n == 6:\n            return tickets[0] + tickets[1] + tickets[2] + tickets[3] + tickets[4] + tickets[5]\n        if n == 7:\n            return tickets[0] + tickets[1] + tickets[2] + tickets[3] + tickets[4] + tickets[5] + tickets[6]\n        if n == 8:\n            return tickets[0] + tickets[1] + tickets[2] + tickets[3] + tickets[4] + tickets[5] + tickets["
    },
    {
        "number": 2074,
        "title": "Reverse Nodes in Even Length Groups",
        "difficulty": 1,
        "answer": "        if head is None or head.next is None:\n            return head"
    },
    {
        "number": 2075,
        "title": "Decode the Slanted Ciphertext",
        "difficulty": 1,
        "answer": "        if len(encodedText) == 0:\n            return \"\"\n        if len(encodedText) == 1:\n            return encodedText\n        if len(encodedText) == 2:\n            return encodedText\n        if len(encodedText) == 3:\n            return encodedText\n        if len(encodedText) == 4:\n            return encodedText\n        if len(encodedText) == 5:\n            return encodedText\n        if len(encodedText) == 6:\n            return encodedText\n        if len(encodedText) == 7:\n            return encodedText\n        if len(encodedText) == 8:\n            return encodedText\n        if len(encodedText) == 9:\n            return encodedText\n        if len(encodedText) == 10:\n            return encodedText\n        if len(encodedText) == 11:\n            return encodedText\n        if len(encodedText) == 12:\n            return encodedText\n        if len(encodedText) == 13:\n            return encodedText\n        if len(encodedText) == 14:\n            "
    },
    {
        "number": 2076,
        "title": "Process Restricted Friend Requests",
        "difficulty": 2,
        "answer": "        # TODO: Implement this method\n        pass"
    },
    {
        "number": 2078,
        "title": "Two Furthest Houses With Different Colors",
        "difficulty": 0,
        "answer": "        # https://leetcode.com/problems/maximum-distance-between-two-colors/discuss/105500/Java-Solution-with-explanation\n        # https://leetcode.com/problems/maximum-distance-between-two-colors/discuss/105501/C%2B%2B-Solution-with-explanation\n        # https://leetcode.com/problems/maximum-distance-between-two-colors/discuss/105502/C%2B%2B-Solution-with-explanation\n        # https://leetcode.com/problems/maximum-distance-between-two-colors/discuss/105503/C%2B%2B-Solution-with-explanation\n        # https://leetcode.com/problems/maximum-distance-between-two-colors/discuss/105504/C%2B%2B-Solution-with-explanation\n        # https://leetcode.com/problems/maximum-distance-between-two-"
    },
    {
        "number": 2079,
        "title": "Watering Plants",
        "difficulty": 1,
        "answer": "        n = len(plants)\n        if n == 0:\n            return 0\n        if n == 1:\n            return 1\n        if n == 2:\n            return 2\n        if n == 3:\n            return 3\n        if n == 4:\n            return 4\n        if n == 5:\n            return 5\n        if n == 6:\n            return 6\n        if n == 7:\n            return 7\n        if n == 8:\n            return 8\n        if n == 9:\n            return 9\n        if n == 10:\n            return 10\n        if n == 11:\n            return 11\n        if n == 12:\n            return 12\n        if n == 13:\n            return 13\n        if n == 14:\n            return 14\n        if n == 15:\n            return 15\n        if n == 16:\n            return 16\n        if n == 17:\n            return 17\n        if n == 18:\n            return 18\n        if n == 19:\n            return 19\n        if n == 20:\n            return 20\n        if n == 21:\n            return 21"
    },
    {
        "number": 2080,
        "title": "Range Frequency Queries",
        "difficulty": 1,
        "answer": "        if left > right:\n            return 0\n        if left == right:\n            return 1 if arr[left] == value else 0\n        if left + 1 == right:\n            return 1 if arr[left] <= value and arr[right] >= value else 0\n        mid = (left + right) // 2\n        if arr[mid] == value:\n            return 1 + self.query(left, mid, value) + self.query(mid + 1, right, value)\n        elif arr[mid] < value:\n            return self.query(left, mid, value)\n        else:\n            return self.query(mid + 1, right, value)"
    },
    {
        "number": 2081,
        "title": "Sum of k-Mirror Numbers",
        "difficulty": 2,
        "answer": "        if k < 1 or n < 1:\n            return 0\n        if n == 1:\n            return 1\n        if n == 2:\n            return 1\n        if n == 3:\n            return 1\n        if n == 4:\n            return 1\n        if n == 5:\n            return 1\n        if n == 6:\n            return 1\n        if n == 7:\n            return 1\n        if n == 8:\n            return 1\n        if n == 9:\n            return 1\n        if n == 10:\n            return 1\n        if n == 11:\n            return 1\n        if n == 12:\n            return 1\n        if n == 13:\n            return 1\n        if n == 14:\n            return 1\n        if n == 15:\n            return 1\n        if n == 16:\n            return 1\n        if n == 17:\n            return 1\n        if n == 18:\n            return 1\n        if n == 19:\n            return 1\n        if n == 20:\n            return 1\n        if n == 21:\n            return 1\n        if n =="
    },
    {
        "number": 2085,
        "title": "Count Common Words With One Occurrence",
        "difficulty": 0,
        "answer": "        # Solution 1:\n        # count the number of words in each array\n        # count the number of words in each array\n        # count the number of words in each array\n        # count the number of words in each array\n        # count the number of words in each array\n        # count the number of words in each array\n        # count the number of words in each array\n        # count the number of words in each array\n        # count the number of words in each array\n        # count the number of words in each array\n        # count the number of words in each array\n        # count the number of words in each array\n        # count the number of words in each array\n        # count the number of words in each array\n        # count the number of words in each array\n        # count the number of words in each array\n        # count the number of words in each array\n        # count the number of words in each array\n        # count the number of words in each array\n        # count the number of words in each array\n        # count the number of words in each array\n        # count the number of words in each array\n        #"
    },
    {
        "number": 2086,
        "title": "Minimum Number of Food Buckets to Feed the Hamsters",
        "difficulty": 1,
        "answer": "        hamsters = hamsters.replace(\".\", \"\")\n        hamsters = hamsters.replace(\"H\", \"\")\n        hamsters = hamsters.replace(\".\", \"\")\n        hamsters = hamsters.replace(\"H\", \"\")\n        hamsters = hamsters.replace(\".\", \"\")\n        hamsters = hamsters.replace(\"H\", \"\")\n        hamsters = hamsters.replace(\".\", \"\")\n        hamsters = hamsters.replace(\"H\", \"\")\n        hamsters = hamsters.replace(\".\", \"\")\n        hamsters = hamsters.replace(\"H\", \"\")\n        hamsters = hamsters.replace(\".\", \"\")\n        hamsters = hamsters.replace(\"H\", \"\")\n        hamsters = hamsters.replace(\".\", \"\")\n        hamsters = hamsters.replace(\"H\", \"\")\n        hamsters = hamsters.replace(\".\", \"\")\n        hamsters = hamsters.replace(\"H\", \"\")\n        hamsters = hamsters.replace(\".\", \"\")\n        hamsters = hamsters.replace(\"H\", \"\")\n        hamsters = hamsters."
    },
    {
        "number": 2087,
        "title": "Minimum Cost Homecoming of a Robot in a Grid",
        "difficulty": 1,
        "answer": "        m, n = len(startPos), len(startPos[0])\n        rowCosts = [rowCosts[i] for i in range(m)]\n        colCosts = [colCosts[i] for i in range(n)]\n        rowCosts.append(0)\n        colCosts.append(0)\n        rowCosts.append(0)\n        colCosts.append(0)\n        rowCosts.append(0)\n        colCosts.append(0)\n        rowCosts.append(0)\n        colCosts.append(0)\n        rowCosts.append(0)\n        colCosts.append(0)\n        rowCosts.append(0)\n        colCosts.append(0)\n        rowCosts.append(0)\n        colCosts.append(0)\n        rowCosts.append(0)\n        colCosts.append(0)\n        rowCosts.append(0)\n        colCosts.append(0)\n        rowCosts.append(0)\n        col"
    },
    {
        "number": 2088,
        "title": "Count Fertile Pyramids in a Land",
        "difficulty": 2,
        "answer": "        m, n = len(grid), len(grid[0])\n        count = 0\n        for i in range(m):\n            for j in range(n):\n                if grid[i][j] == 1:\n                    count += self.count_pyramid(grid, i, j)\n        return count"
    },
    {
        "number": 2089,
        "title": "Find Target Indices After Sorting Array",
        "difficulty": 0,
        "answer": "        nums.sort()\n        return [i for i, n in enumerate(nums) if n == target]\n"
    },
    {
        "number": 2090,
        "title": "K Radius Subarray Averages",
        "difficulty": 1,
        "answer": "        avg = [-1] * len(nums)\n        n = len(nums)\n        for i in range(n - k + 1):\n            avg[i] = sum(nums[i:i + k]) / k\n        for i in range(n - k + 1, n + 1):\n            avg[i] = sum(nums[i - k:i + k]) / k\n        return avg\n"
    },
    {
        "number": 2091,
        "title": "Removing Minimum and Maximum From Array",
        "difficulty": 1,
        "answer": "        min_index = 0\n        max_index = len(nums) - 1\n        min_value = nums[min_index]\n        max_value = nums[max_index]\n        while min_index < max_index:\n            if nums[min_index] < min_value:\n                min_index += 1\n            elif nums[max_index] > max_value:\n                max_index -= 1\n            else:\n                min_index += 1\n                max_index -= 1\n        return min_index + max_index\n"
    },
    {
        "number": 2092,
        "title": "Find All People With Secret",
        "difficulty": 2,
        "answer": "        # https://leetcode.com/problems/find-all-people/discuss/\n        # https://leetcode.com/problems/find-all-people/discuss/\n        # https://leetcode.com/problems/find-all-people/discuss/\n        # https://leetcode.com/problems/find-all-people/discuss/\n        # https://leetcode.com/problems/find-all-people/discuss/\n        # https://leetcode.com/problems/find-all-people/discuss/\n        # https://leetcode.com/problems/find-all-people/discuss/\n        # https://leetcode.com/problems/find-all-people/discuss/\n        # https://leetcode.com/problems/find-all-people/discuss/\n        # https://leetcode.com/problems/find-all-people/discuss/\n        # https://leetcode.com/problems/find-all-people/disc"
    },
    {
        "number": 2094,
        "title": "Finding 3-Digit Even Numbers",
        "difficulty": 0,
        "answer": "        # https://leetcode.com/problems/find-even-numbers/discuss/\n        # https://leetcode.com/problems/find-even-numbers/discuss/\n        # https://leetcode.com/problems/find-even-numbers/discuss/\n        # https://leetcode.com/problems/find-even-numbers/discuss/\n        # https://leetcode.com/problems/find-even-numbers/discuss/\n        # https://leetcode.com/problems/find-even-numbers/discuss/\n        # https://leetcode.com/problems/find-even-numbers/discuss/\n        # https://leetcode.com/problems/find-even-numbers/discuss/\n        # https://leetcode.com/problems/find-even-numbers/discuss/\n        # https://leetcode.com/problems/find-even-numbers/discuss/\n        # https://leetcode.com/"
    },
    {
        "number": 2095,
        "title": "Delete the Middle Node of a Linked List",
        "difficulty": 1,
        "answer": "        if head is None:\n            return None\n        if head.next is None:\n            return head\n        if head.next.next is None:\n            return head.next\n        if head.next.next.next is None:\n            return head.next.next\n        if head.next.next.next.next is None:\n            return head.next.next.next\n        if head.next.next.next.next.next is None:\n            return head.next.next.next.next\n        if head.next.next.next.next.next.next is None:\n            return head.next.next.next.next.next\n        if head.next.next.next.next.next.next.next is None:\n            return head.next.next.next.next.next.next\n        if head.next.next.next.next.next.next.next.next is None:\n            return head.next.next.next.next.next.next.next\n        if head.next.next.next.next.next.next.next.next.next is None"
    },
    {
        "number": 2096,
        "title": "Step-By-Step Directions From a Binary Tree Node to Another",
        "difficulty": 1,
        "answer": "        if root is None:\n            return \"\"\n        if root.val == destValue:\n            return \"U\"\n        if root.val == startValue:\n            return \"L\"\n        if root.left is None and root.right is None:\n            return \"R\"\n        if root.left is None:\n            return \"L\" + self.getDirections(root.right, startValue, destValue)\n        if root.right is None:\n            return \"R\" + self.getDirections(root.left, startValue, destValue)\n        return \"L\" + self.getDirections(root.left, startValue, destValue) + \"R\" + self.getDirections(root.right, startValue, destValue)"
    },
    {
        "number": 2097,
        "title": "Valid Arrangement of Pairs",
        "difficulty": 2,
        "answer": "        # https://leetcode.com/problems/valid-arrangement-ii/discuss/105500/Java-O(n)-solution-with-explanation\n        # https://leetcode.com/problems/valid-arrangement-ii/discuss/105501/C%2B%2B-solution-with-explanation\n        # https://leetcode.com/problems/valid-arrangement-ii/discuss/105502/C%2B%2B-solution-with-explanation\n        # https://leetcode.com/problems/valid-arrangement-ii/discuss/105503/C%2B%2B-solution-with-explanation\n        # https://leetcode.com/problems/valid-arrangement-ii/discuss/105504/C%2B%2B-solution-with-explanation\n        # https://leetcode.com/problems/valid-arrangement-ii/discuss/105505"
    },
    {
        "number": 2099,
        "title": "Find Subsequence of Length K With the Largest Sum",
        "difficulty": 0,
        "answer": "        n = len(nums)\n        if n == 0:\n            return []\n        if n == 1:\n            return [nums[0]]\n        if n == 2:\n            return [nums[0], nums[1]]\n        if n == 3:\n            return [nums[0], nums[1], nums[2]]\n        if n == 4:\n            return [nums[0], nums[1], nums[2], nums[3]]\n        if n == 5:\n            return [nums[0], nums[1], nums[2], nums[3], nums[4]]\n        if n == 6:\n            return [nums[0], nums[1], nums[2], nums[3], nums[4], nums[5]]\n        if n == 7:\n            return [nums[0], nums[1], nums[2], nums[3], nums[4], nums[5], nums[6]]\n        if n == 8:\n            return [nums["
    },
    {
        "number": 2100,
        "title": "Find Good Days to Rob the Bank",
        "difficulty": 1,
        "answer": "        if not security:\n            return []\n        if len(security) == 1:\n            return [0]\n        if len(security) == 2:\n            return [0, 1]\n        if len(security) == 3:\n            return [0, 1, 2]\n        if len(security) == 4:\n            return [0, 1, 2, 3]\n        if len(security) == 5:\n            return [0, 1, 2, 3, 4]\n        if len(security) == 6:\n            return [0, 1, 2, 3, 4, 5]\n        if len(security) == 7:\n            return [0, 1, 2, 3, 4, 5, 6]\n        if len(security) == 8:\n            return [0, 1, 2, 3, 4, 5, 6, 7]\n        if len(security) == 9:\n            return [0, 1, 2, 3, 4, 5, 6, 7, 8]\n        if len(security) == 10:\n            return [0, 1, 2, 3, 4, 5"
    },
    {
        "number": 2101,
        "title": "Detonate the Maximum Bombs",
        "difficulty": 1,
        "answer": "        if not bombs:\n            return 0\n        if not bombs[0]:\n            return 1\n        if not bombs[0][0]:\n            return 1\n        if not bombs[0][1]:\n            return 1\n        if not bombs[0][2]:\n            return 1\n        if not bombs[1]:\n            return 1\n        if not bombs[1][0]:\n            return 1\n        if not bombs[1][1]:\n            return 1\n        if not bombs[1][2]:\n            return 1\n        if not bombs[2]:\n            return 1\n        if not bombs[2][0]:\n            return 1\n        if not bombs[2][1]:\n            return 1\n        if not bombs[2][2]:\n            return 1\n        if not bombs[3]:\n            return 1\n        if not bombs[3][0]:\n            return 1\n        if not bombs[3][1]:\n            return 1\n        if not bombs[3][2]:\n            return 1\n        if not bombs[4]:\n            return 1\n        if not bombs[4][0]:\n            return"
    },
    {
        "number": 2102,
        "title": "Sequentially Ordinal Rank Tracker",
        "difficulty": 2,
        "answer": "        self.locations = []\n        self.scores = []\n        self.index = 0"
    },
    {
        "number": 2103,
        "title": "Rings and Rods",
        "difficulty": 0,
        "answer": "        n = len(rings)\n        if n == 0:\n            return 0\n        if n == 1:\n            return 1\n        if n == 2:\n            return 1 if rings[0] == 'R' else 0\n        if n == 3:\n            return 1 if rings[0] == 'R' and rings[1] == 'G' else 0\n        if n == 4:\n            return 1 if rings[0] == 'R' and rings[1] == 'G' and rings[2] == 'B' else 0\n        if n == 5:\n            return 1 if rings[0] == 'R' and rings[1] == 'G' and rings[2] == 'B' and rings[3] == 'R' else 0\n        if n == 6:\n            return 1 if rings[0] == 'R' and rings[1] == 'G' and rings[2] == 'B' and rings[3] == 'R' and rings[4] == 'G' else 0\n        if n == 7:\n            return 1 if rings[0] == 'R' and"
    },
    {
        "number": 2104,
        "title": "Sum of Subarray Ranges",
        "difficulty": 1,
        "answer": "        n = len(nums)\n        if n == 0:\n            return 0\n        if n == 1:\n            return nums[0]\n        if n == 2:\n            return nums[0] - nums[1]\n        if n == 3:\n            return nums[0] - nums[1] + nums[2]\n        if n == 4:\n            return nums[0] - nums[1] + nums[2] - nums[3]\n        if n == 5:\n            return nums[0] - nums[1] + nums[2] - nums[3] + nums[4]\n        if n == 6:\n            return nums[0] - nums[1] + nums[2] - nums[3] + nums[4] - nums[5]\n        if n == 7:\n            return nums[0] - nums[1] + nums[2] - nums[3] + nums[4] - nums[5] + nums[6]"
    },
    {
        "number": 2105,
        "title": "Watering Plants II",
        "difficulty": 1,
        "answer": "        n = len(plants)\n        if n == 0:\n            return 0\n        if n == 1:\n            return 1\n        if n == 2:\n            return min(plants[0], plants[1])\n        if n == 3:\n            return min(plants[0], plants[1], plants[2])\n        if n == 4:\n            return min(plants[0], plants[1], plants[2], plants[3])\n        if n == 5:\n            return min(plants[0], plants[1], plants[2], plants[3], plants[4])\n        if n == 6:\n            return min(plants[0], plants[1], plants[2], plants[3], plants[4], plants[5])\n        if n == 7:\n            return min(plants[0], plants[1], plants[2], plants[3], plants[4], plants[5], plants[6])\n        if n == 8:\n            return min(plants[0], plants[1], plants[2], plants[3], plants[4], plants"
    },
    {
        "number": 2106,
        "title": "Maximum Fruits Harvested After at Most K Steps",
        "difficulty": 2,
        "answer": "        if not fruits:\n            return 0\n        if not fruits[0]:\n            return 0\n        if not fruits[-1]:\n            return 0\n        if not fruits[0][0]:\n            return 0\n        if not fruits[-1][-1]:\n            return 0\n        if not fruits[0][0]:\n            return 0\n        if not fruits[-1][-1]:\n            return 0\n        if not fruits[0][0]:\n            return 0\n        if not fruits[-1][-1]:\n            return 0\n        if not fruits[0][0]:\n            return 0\n        if not fruits[-1][-1]:\n            return 0\n        if not fruits[0][0]:\n            return 0\n        if not fruits[-1][-1]:\n            return 0\n        if not fruits[0][0]:\n            return 0\n        if not fruits[-1][-1]:\n            return 0\n        if not fruits[0][0]:\n            return 0\n        if not fruits[-1][-1]:\n            return 0\n        if not fruits["
    },
    {
        "number": 2108,
        "title": "Find First Palindromic String in the Array",
        "difficulty": 0,
        "answer": "        # Your Solution object will be instantiated and called as such:\n        # obj = Solution(words)\n        # param_1 = obj.firstPalindrome(words)\n        # return param_1"
    },
    {
        "number": 2109,
        "title": "Adding Spaces to a String",
        "difficulty": 1,
        "answer": "        if not s:\n            return \"\"\n        if not spaces:\n            return s\n        if len(spaces) == 1:\n            return s + \" \" + s[spaces[0]]\n        if len(spaces) == 2:\n            return s[:spaces[0]] + \" \" + s[spaces[0]:spaces[1]] + \" \" + s[spaces[1]:]\n        if len(spaces) == 3:\n            return s[:spaces[0]] + \" \" + s[spaces[0]:spaces[1]] + \" \" + s[spaces[1]:spaces[2]] + \" \" + s[spaces[2]:]\n        if len(spaces) == 4:\n            return s[:spaces[0]] + \" \" + s[spaces[0]:spaces[1]] + \" \" + s[spaces[1]:spaces[2]] + \" \" + s[spaces[2]:spaces[3]] + \" \" + s[spaces[3]:]\n        if len(spaces"
    },
    {
        "number": 2110,
        "title": "Number of Smooth Descent Periods of a Stock",
        "difficulty": 1,
        "answer": "        if len(prices) == 1:\n            return 1\n        if len(prices) == 2:\n            return 1 if prices[0] < prices[1] else 0\n        if len(prices) == 3:\n            return 1 if prices[0] < prices[1] and prices[1] < prices[2] else 0\n        if len(prices) == 4:\n            return 1 if prices[0] < prices[1] and prices[1] < prices[2] and prices[2] < prices[3] else 0\n        if len(prices) == 5:\n            return 1 if prices[0] < prices[1] and prices[1] < prices[2] and prices[2] < prices[3] and prices[3] < prices[4] else 0\n        if len(prices) == 6:\n            return 1 if prices[0] < prices[1] and prices[1] < prices[2] and prices[2] < prices[3] and prices[3] < prices[4] and prices[4] < prices[5] else 0\n"
    },
    {
        "number": 2111,
        "title": "Minimum Operations to Make the Array K-Increasing",
        "difficulty": 2,
        "answer": "        if not arr:\n            return 0\n        if len(arr) == 1:\n            return 1\n        if len(arr) == 2:\n            return 1 if arr[0] <= arr[1] else 2\n        if len(arr) == 3:\n            return 1 if arr[0] <= arr[1] and arr[0] <= arr[2] else 2\n        if len(arr) == 4:\n            return 1 if arr[0] <= arr[1] and arr[0] <= arr[2] and arr[0] <= arr[3] else 2\n        if len(arr) == 5:\n            return 1 if arr[0] <= arr[1] and arr[0] <= arr[2] and arr[0] <= arr[3] and arr[0] <= arr[4] else 2\n        if len(arr) == 6:\n            return 1 if arr[0] <= arr[1] and arr[0] <= arr[2] and arr[0] <= arr[3] and arr[0] <= arr[4] and arr[0] <= arr[5"
    },
    {
        "number": 2114,
        "title": "Maximum Number of Words Found in Sentences",
        "difficulty": 0,
        "answer": "        count = collections.Counter()\n        for sentence in sentences:\n            for word in sentence.split():\n                count[word] += 1\n        return max(count.values())"
    },
    {
        "number": 2115,
        "title": "Find All Possible Recipes from Given Supplies",
        "difficulty": 1,
        "answer": "        if len(recipes) == 0:\n            return []\n        if len(ingredients) == 0:\n            return []\n        if len(supplies) == 0:\n            return []\n        if len(recipes)!= len(ingredients):\n            return []\n        if len(recipes)!= len(supplies):\n            return []\n        if len(recipes) == 1:\n            return [recipes[0]]\n        if len(recipes) == 2:\n            return [recipes[0], recipes[1]]\n        if len(recipes) == 3:\n            return [recipes[0], recipes[1], recipes[2]]\n        if len(recipes) == 4:\n            return [recipes[0], recipes[1], recipes[2], recipes[3]]\n        if len(recipes) == 5:\n            return [recipes[0], recipes[1], recipes[2], recipes[3], recipes[4]]\n        if len(recipes) == 6:\n            return [recipes[0], recipes[1], recipes[2], recipes["
    },
    {
        "number": 2116,
        "title": "Check if a Parentheses String Can Be Valid",
        "difficulty": 1,
        "answer": "        def valid_parentheses(s, locked):\n            if len(s) == 0:\n                return True\n            if len(s) == 1:\n                return s[0] == '('\n            if len(s) == 2:\n                return s[0] == '(' and s[1] == ')'\n            if len(s) == 3:\n                return s[0] == '(' and s[1] == ')' and s[2] == ')'\n            if len(s) == 4:\n                return s[0] == '(' and s[1] == ')' and s[2] == ')' and s[3] == ')'\n            if len(s) == 5:\n                return s[0] == '(' and s[1] == ')' and s[2] == ')' and s[3] == ')' and s[4] == ')'\n            if len(s) == 6:\n                return s[0] == '(' and s[1] == ')' and s[2] == ')' and s[3] == ')' and"
    },
    {
        "number": 2117,
        "title": "Abbreviating the Product of a Range",
        "difficulty": 2,
        "answer": "        if left > right:\n            return \"\"\n        if left == right:\n            return str(left)\n        if left == 1:\n            return str(right)\n        if left == 2:\n            return str(right * right)\n        if left == 3:\n            return str(right * right * right)\n        if left == 4:\n            return str(right * right * right * right)\n        if left == 5:\n            return str(right * right * right * right * right)\n        if left == 6:\n            return str(right * right * right * right * right * right)\n        if left == 7:\n            return str(right * right * right * right * right * right * right)\n        if left == 8:\n            return str(right * right * right * right * right * right * right * right)\n        if left == 9:\n            return str(right * right * right * right * right * right * right * right * right)\n        if left == 10:\n            return str(right * right * right * right * right * right * right * right *"
    },
    {
        "number": 2119,
        "title": "A Number After a Double Reversal",
        "difficulty": 0,
        "answer": "        if num == 0:\n            return True\n        if num == 1:\n            return True\n        if num == 2:\n            return True\n        if num == 3:\n            return True\n        if num == 4:\n            return True\n        if num == 5:\n            return True\n        if num == 6:\n            return True\n        if num == 7:\n            return True\n        if num == 8:\n            return True\n        if num == 9:\n            return True\n        if num == 10:\n            return True\n        if num == 11:\n            return True\n        if num == 12:\n            return True\n        if num == 13:\n            return True\n        if num == 14:\n            return True\n        if num == 15:\n            return True\n        if num == 16:\n            return True\n        if num == 17:\n            return True\n        if num == 18:\n            return True\n        if num == 19:\n            return True\n        if num == 20:\n            return True\n        if num == 21:\n            return True\n        if num == 22:\n            "
    },
    {
        "number": 2120,
        "title": "Execution of All Suffix Instructions Staying in a Grid",
        "difficulty": 1,
        "answer": "        # Write your code here\n        if n == 1:\n            return [0]\n        if n == 2:\n            return [1, 1]\n        if n == 3:\n            return [1, 1, 1]\n        if n == 4:\n            return [1, 1, 1, 1]\n        if n == 5:\n            return [1, 1, 1, 1, 1]\n        if n == 6:\n            return [1, 1, 1, 1, 1, 1]\n        if n == 7:\n            return [1, 1, 1, 1, 1, 1, 1]\n        if n == 8:\n            return [1, 1, 1, 1, 1, 1, 1, 1]\n        if n == 9:\n            return [1, 1, 1, 1, 1, 1, 1, 1, 1]\n        if n == 10:\n            return [1, 1, 1, 1, 1, 1, 1, 1, 1, 1]\n        if n == 11:\n            return [1, 1, 1, 1, 1, 1, 1"
    },
    {
        "number": 2121,
        "title": "Intervals Between Identical Elements",
        "difficulty": 1,
        "answer": "        if not arr:\n            return []\n        intervals = [0] * len(arr)\n        for i in range(1, len(arr)):\n            if arr[i] == arr[i - 1]:\n                intervals[i] = intervals[i - 1]\n            else:\n                intervals[i] = intervals[i - 1] + abs(i - arr[i - 1])\n        return intervals"
    },
    {
        "number": 2122,
        "title": "Recover the Original Array",
        "difficulty": 2,
        "answer": "        n = len(nums)\n        lower = [0] * n\n        higher = [0] * n\n        for i in range(n):\n            lower[i] = nums[i] - k\n            higher[i] = nums[i] + k\n        lower = sorted(lower)\n        higher = sorted(higher)\n        if lower == higher:\n            return nums\n        else:\n            return lower + higher\n"
    },
    {
        "number": 2124,
        "title": "Check if All A\"s Appears Before All B\"s",
        "difficulty": 0,
        "answer": "        if len(s) < 2:\n            return True\n        a_count = 0\n        b_count = 0\n        for i in range(len(s)):\n            if s[i] == 'a':\n                a_count += 1\n            elif s[i] == 'b':\n                b_count += 1\n        if a_count!= b_count:\n            return False\n        return True"
    },
    {
        "number": 2125,
        "title": "Number of Laser Beams in a Bank",
        "difficulty": 1,
        "answer": "        m, n = len(bank), len(bank[0])\n        dp = [[0] * (n + 1) for _ in range(m + 1)]\n        for i in range(1, m + 1):\n            for j in range(1, n + 1):\n                if bank[i - 1][j - 1] == '1':\n                    dp[i][j] = dp[i - 1][j] + dp[i][j - 1]\n                else:\n                    dp[i][j] = dp[i][j - 1]\n        return sum(dp[-1])\n"
    },
    {
        "number": 2126,
        "title": "Destroying Asteroids",
        "difficulty": 1,
        "answer": "        # https://leetcode.com/problems/asteroids-destroyed/discuss/\n        # https://leetcode.com/problems/asteroids-destroyed/discuss/\n        # https://leetcode.com/problems/asteroids-destroyed/discuss/\n        # https://leetcode.com/problems/asteroids-destroyed/discuss/\n        # https://leetcode.com/problems/asteroids-destroyed/discuss/\n        # https://leetcode.com/problems/asteroids-destroyed/discuss/\n        # https://leetcode.com/problems/asteroids-destroyed/discuss/\n        # https://leetcode.com/problems/asteroids-destroyed/discuss/\n        # https://leetcode.com/problems/asteroids-destroyed/discuss/\n        # https://leetcode.com/problems/asteroids-destroyed/discuss/\n        # https://leetcode.com/problems/asteroids-destroyed/disc"
    },
    {
        "number": 2127,
        "title": "Maximum Employees to Be Invited to a Meeting",
        "difficulty": 2,
        "answer": "        n = len(favorite)\n        if n == 0:\n            return 0\n        if n == 1:\n            return 1\n        if n == 2:\n            return 2\n        if n == 3:\n            return 3\n        if n == 4:\n            return 4\n        if n == 5:\n            return 5\n        if n == 6:\n            return 6\n        if n == 7:\n            return 7\n        if n == 8:\n            return 8\n        if n == 9:\n            return 9\n        if n == 10:\n            return 10\n        if n == 11:\n            return 11\n        if n == 12:\n            return 12\n        if n == 13:\n            return 13\n        if n == 14:\n            return 14\n        if n == 15:\n            return 15\n        if n == 16:\n            return 16\n        if n == 17:\n            return 17\n        if n == 18:\n            return 18\n        if n == 19:\n            return 19\n        if n == 20:\n            return 20\n        if n == 21:\n            return 21\n"
    },
    {
        "number": 2129,
        "title": "Capitalize the Title",
        "difficulty": 0,
        "answer": "        title = title.replace(\" \", \"\")\n        title = title.replace(\"\\n\", \"\")\n        title = title.replace(\"\\t\", \"\")\n        title = title.replace(\"\\r\", \"\")\n        title = title.replace(\"\\f\", \"\")\n        title = title.replace(\"\\v\", \"\")\n        title = title.replace(\"\\b\", \"\")\n        title = title.replace(\"\\a\", \"\")\n        title = title.replace(\"\\e\", \"\")\n        title = title.replace(\"\\0\", \"\")\n        title = title.replace(\"\\1\", \"\")\n        title = title.replace(\"\\2\", \"\")\n        title = title.replace(\"\\3\", \"\")\n        title = title.replace(\"\\4\", \"\")\n        title = title.replace(\"\\5\", \"\")\n        title = title.replace(\"\\6\", \"\")\n        title = title.replace(\"\\7\", \"\")\n        title = title.replace(\"\\8\", \"\")\n        title = title.replace(\"\\9\", \"\")\n        title = title."
    },
    {
        "number": 2130,
        "title": "Maximum Twin Sum of a Linked List",
        "difficulty": 1,
        "answer": "        if head is None:\n            return 0\n        if head.next is None:\n            return self.pairSum(head.next)\n        if head.next.next is None:\n            return self.pairSum(head.next.next)\n        if head.next.next.next is None:\n            return self.pairSum(head.next.next.next)\n        if head.next.next.next.next is None:\n            return self.pairSum(head.next.next.next.next)\n        if head.next.next.next.next.next is None:\n            return self.pairSum(head.next.next.next.next.next)\n        if head.next.next.next.next.next.next is None:\n            return self.pairSum(head.next.next.next.next.next.next)\n        if head.next.next.next.next.next.next.next is None:\n            return self.pairSum(head.next.next.next.next.next.next.next)\n        if head.next.next."
    },
    {
        "number": 2131,
        "title": "Longest Palindrome by Concatenating Two Letter Words",
        "difficulty": 1,
        "answer": "        # pylint: disable=invalid-name\n        # pylint: disable=too-many-locals\n        # pylint: disable=too-many-branches\n        # pylint: disable=too-many-statements\n        # pylint: disable=too-many-nested-blocks\n        # pylint: disable=too-many-boolean-expressions\n        # pylint: disable=too-many-arguments\n        # pylint: disable=too-many-locals\n        # pylint: disable=too-many-statements\n        # pylint: disable=too-many-nested-blocks\n        # pylint: disable=too-many-boolean-expressions\n        # pylint: disable=too-many-arguments\n        # pylint: disable=too-many-locals\n        # pylint: disable=too-many-statements\n        # pylint: disable=too-many-nested-blocks\n        # pylint: disable=too-many-boolean-"
    },
    {
        "number": 2132,
        "title": "Stamping the Grid",
        "difficulty": 2,
        "answer": "        # https://leetcode.com/problems/stamp-it/discuss/105586/Java-O(n)-solution-with-explanation\n        # https://leetcode.com/problems/stamp-it/discuss/105586/Java-O(n)-solution-with-explanation\n        # https://leetcode.com/problems/stamp-it/discuss/105586/Java-O(n)-solution-with-explanation\n        # https://leetcode.com/problems/stamp-it/discuss/105586/Java-O(n)-solution-with-explanation\n        # https://leetcode.com/problems/stamp-it/discuss/105586/Java-O(n)-solution-with-explanation\n        # https://leetcode.com/problems/stamp-it/discuss/105586/Java-O(n)-solution-with-explanation\n        # https://leetcode.com/"
    },
    {
        "number": 2133,
        "title": "Check if Every Row and Column Contains All Numbers",
        "difficulty": 0,
        "answer": "        n = len(matrix)\n        if n == 0:\n            return True\n        if n == 1:\n            return True\n        if n == 2:\n            return True\n        if n == 3:\n            return True\n        if n == 4:\n            return True\n        if n == 5:\n            return True\n        if n == 6:\n            return True\n        if n == 7:\n            return True\n        if n == 8:\n            return True\n        if n == 9:\n            return True\n        if n == 10:\n            return True\n        if n == 11:\n            return True\n        if n == 12:\n            return True\n        if n == 13:\n            return True\n        if n == 14:\n            return True\n        if n == 15:\n            return True\n        if n == 16:\n            return True\n        if n == 17:\n            return True\n        if n == 18:\n            return True\n        if n == 19:\n            return True\n        if n == 20:\n            return True\n        if n == 21:\n            return True"
    },
    {
        "number": 2134,
        "title": "Minimum Swaps to Group All 1\"s Together II",
        "difficulty": 1,
        "answer": "        n = len(nums)\n        if n == 1:\n            return 0\n        if n == 2:\n            return 1\n        if n == 3:\n            return 2\n        if n == 4:\n            return 3\n        if n == 5:\n            return 4\n        if n == 6:\n            return 5\n        if n == 7:\n            return 6\n        if n == 8:\n            return 7\n        if n == 9:\n            return 8\n        if n == 10:\n            return 9\n        if n == 11:\n            return 10\n        if n == 12:\n            return 11\n        if n == 13:\n            return 12\n        if n == 14:\n            return 13\n        if n == 15:\n            return 14\n        if n == 16:\n            return 15\n        if n == 17:\n            return 16\n        if n == 18:\n            return 17\n        if n == 19:\n            return 18\n        if n == 20:\n            return 19\n        if n == 21:\n            return 20\n        if n == 22:\n            return 21"
    },
    {
        "number": 2135,
        "title": "Count Words Obtained After Adding a Letter",
        "difficulty": 1,
        "answer": "        # https://leetcode.com/problems/word-count/discuss/105586/Java-O(n)-solution-with-explanation-and-examples\n        # https://leetcode.com/problems/word-count/discuss/105586/Java-O(n)-solution-with-explanation-and-examples\n        # https://leetcode.com/problems/word-count/discuss/105586/Java-O(n)-solution-with-explanation-and-examples\n        # https://leetcode.com/problems/word-count/discuss/105586/Java-O(n)-solution-with-explanation-and-examples\n        # https://leetcode.com/problems/word-count/discuss/105586/Java-O(n)-solution-with-explanation-and-examples\n        # https://leetcode.com/problems/word-count/discuss/105586/Java-O(n)-"
    },
    {
        "number": 2136,
        "title": "Earliest Possible Day of Full Bloom",
        "difficulty": 2,
        "answer": "        plant_time = [0] * len(plantTime)\n        grow_time = [0] * len(growTime)\n        for i in range(len(plantTime)):\n            plant_time[i] = plantTime[i]\n        for i in range(len(growTime)):\n            grow_time[i] = growTime[i]\n        plant_time.append(0)\n        grow_time.append(0)\n        \n        # print(plant_time)\n        # print(grow_time)\n        \n        # print(plant_time)\n        # print(grow_time)\n        \n        # print(plant_time)\n        # print(grow_time)\n        \n        # print(plant_time)\n        # print(grow_time)\n        \n        # print(plant_time)\n        # print(grow_time)\n        \n        # print(plant_time)\n        # print(grow_time)\n        \n        # print(plant_time)\n        # print(grow_time)\n        \n        # print("
    },
    {
        "number": 2138,
        "title": "Divide a String Into Groups of Size k",
        "difficulty": 0,
        "answer": "        # https://leetcode.com/problems/partition-string-into-k-groups/discuss/105500/Java-Solution-with-explanation-and-examples\n        # https://leetcode.com/problems/partition-string-into-k-groups/discuss/105501/Java-Solution-with-explanation-and-examples\n        # https://leetcode.com/problems/partition-string-into-k-groups/discuss/105502/Java-Solution-with-explanation-and-examples\n        # https://leetcode.com/problems/partition-string-into-k-groups/discuss/105503/Java-Solution-with-explanation-and-examples\n        # https://leetcode.com/problems/partition-string-into-k-groups/discuss/105504/Java-Solution-with-explanation-and-examples\n        # https://leetcode.com/problems/partition-string-into-"
    },
    {
        "number": 2139,
        "title": "Minimum Moves to Reach Target Score",
        "difficulty": 1,
        "answer": "        if target < 1:\n            return 0\n        if target == 1:\n            return 1\n        if target == 2:\n            return 2\n        if target == 3:\n            return 3\n        if target == 4:\n            return 4\n        if target == 5:\n            return 5\n        if target == 6:\n            return 6\n        if target == 7:\n            return 7\n        if target == 8:\n            return 8\n        if target == 9:\n            return 9\n        if target == 10:\n            return 10\n        if target == 11:\n            return 11\n        if target == 12:\n            return 12\n        if target == 13:\n            return 13\n        if target == 14:\n            return 14\n        if target == 15:\n            return 15\n        if target == 16:\n            return 16\n        if target == 17:\n            return 17\n        if target == 18:\n            return 18\n        if target == 19:\n            return 19\n        if target == 20:\n            return 20\n        if target == 21:\n            return 21\n        if target == 22:\n            "
    },
    {
        "number": 2140,
        "title": "Solving Questions With Brainpower",
        "difficulty": 1,
        "answer": "        if not questions:\n            return 0\n        dp = [[0 for _ in range(len(questions[0]))] for _ in range(len(questions))]\n        for i in range(len(questions)):\n            dp[i][0] = questions[i][0]\n        for i in range(1, len(questions[0])):\n            dp[0][i] = dp[0][i - 1] + questions[0][i]\n        for i in range(1, len(questions)):\n            for j in range(1, len(questions[i])):\n                dp[i][j] = max(dp[i - 1][j - 1], dp[i - 1][j], dp[i][j - 1]) + questions[i][j]\n        return dp[-1][-1]"
    },
    {
        "number": 2141,
        "title": "Maximum Running Time of N Computers",
        "difficulty": 2,
        "answer": "        if n == 1:\n            return batteries[0]\n        if n == 2:\n            return max(batteries[0], batteries[1])\n        if n == 3:\n            return max(batteries[0], max(batteries[1], batteries[2]))\n        if n == 4:\n            return max(batteries[0], max(batteries[1], max(batteries[2], batteries[3])))\n        if n == 5:\n            return max(batteries[0], max(batteries[1], max(batteries[2], max(batteries[3], batteries[4]))))\n        if n == 6:\n            return max(batteries[0], max(batteries[1], max(batteries[2], max(batteries[3], max(batteries[4], batteries[5]))))\n        if n == 7:\n            return max(batteries[0], max(batteries[1], max(batteries[2], max(batteries[3], max"
    },
    {
        "number": 2144,
        "title": "Minimum Cost of Buying Candies With Discount",
        "difficulty": 0,
        "answer": "        # https://leetcode.com/problems/minimum-cost-to-buy-and-sell-stock/discuss/105500/Java-Solution-with-explanation-and-examples\n        # https://leetcode.com/problems/minimum-cost-to-buy-and-sell-stock/discuss/105501/Java-Solution-with-explanation-and-examples\n        # https://leetcode.com/problems/minimum-cost-to-buy-and-sell-stock/discuss/105502/Java-Solution-with-explanation-and-examples\n        # https://leetcode.com/problems/minimum-cost-to-buy-and-sell-stock/discuss/105503/Java-Solution-with-explanation-and-examples\n        # https://leetcode.com/problems/minimum-cost-to-buy-and-sell-stock/discuss/105504/Java-Solution-with-explanation-and-examples\n        # https://le"
    },
    {
        "number": 2145,
        "title": "Count the Hidden Sequences",
        "difficulty": 1,
        "answer": "        if len(differences) == 1:\n            return 1\n        if len(differences) == 2:\n            return 1 if lower <= differences[0] <= upper else 0\n        if len(differences) == 3:\n            return 1 if lower <= differences[0] <= upper or \\\n                lower <= differences[1] <= upper or \\\n                lower <= differences[2] <= upper else 0\n        if len(differences) == 4:\n            return 1 if lower <= differences[0] <= upper or \\\n                lower <= differences[1] <= upper or \\\n                lower <= differences[2] <= upper or \\\n                lower <= differences[3] <= upper else 0\n        if len(differences) == 5:\n            return 1 if lower <= differences[0] <= upper or \\\n                lower <= differences[1] <= upper or \\\n                lower <= differences[2] <= upper or \\\n                lower <= differences[3] <= upper or \\\n                lower <= differences[4] <= upper else 0\n        if len(differences) == 6:\n            return 1 if lower <= differences[0] <= upper"
    },
    {
        "number": 2146,
        "title": "K Highest Ranked Items Within a Price Range",
        "difficulty": 1,
        "answer": "        m, n = len(grid), len(grid[0])\n        dp = [[0 for _ in range(n)] for _ in range(m)]\n        for i in range(m):\n            for j in range(n):\n                if grid[i][j] == 0:\n                    dp[i][j] = float('inf')\n                else:\n                    dp[i][j] = min(dp[i][j-1], dp[i-1][j]) + 1\n        for i in range(m):\n            for j in range(n):\n                if grid[i][j] == 0:\n                    dp[i][j] = float('inf')\n                else:\n                    dp[i][j] = min(dp[i][j-1], dp[i-1][j]) + 1\n        for i in range(m):\n            for j in range(n):\n                if grid[i][j] == 0:\n                    dp[i][j] = float('inf')\n                else:\n                    dp[i][j] = min(dp[i"
    },
    {
        "number": 2147,
        "title": "Number of Ways to Divide a Long Corridor",
        "difficulty": 2,
        "answer": "        if len(corridor) == 1:\n            return 1\n        if len(corridor) == 2:\n            return 1 if corridor[0] == 'S' else 0\n        if len(corridor) == 3:\n            return 1 if corridor[0] == 'S' and corridor[1] == 'P' else 0\n        if len(corridor) == 4:\n            return 1 if (corridor[0] == 'S' and corridor[1] == 'P' and corridor[2] == 'P') or (corridor[0] == 'P' and corridor[1] == 'P' and corridor[2] == 'S') or (corridor[0] == 'P' and corridor[1] == 'S' and corridor[2] == 'P') or (corridor[0] == 'S' and corridor[1] == 'P' and corridor[2] == 'S') or (corridor[0] == 'S' and corridor[1] == 'S' and corridor[2] == 'P') or (corridor[0] == 'S' and corridor[1"
    },
    {
        "number": 2148,
        "title": "Count Elements With Strictly Smaller and Greater Elements ",
        "difficulty": 0,
        "answer": "        n = len(nums)\n        if n == 0:\n            return 0\n        if n == 1:\n            return 1\n        if n == 2:\n            return 1 if nums[0] < nums[1] else 0\n        if n == 3:\n            return 1 if nums[0] < nums[1] and nums[1] < nums[2] else 0\n        if n == 4:\n            return 1 if nums[0] < nums[1] and nums[1] < nums[2] and nums[2] < nums[3] else 0\n        if n == 5:\n            return 1 if nums[0] < nums[1] and nums[1] < nums[2] and nums[2] < nums[3] and nums[3] < nums[4] else 0\n        if n == 6:\n            return 1 if nums[0] < nums[1] and nums[1] < nums[2] and nums[2] < nums[3] and"
    },
    {
        "number": 2149,
        "title": "Rearrange Array Elements by Sign",
        "difficulty": 1,
        "answer": "        # https://leetcode.com/problems/rearrange-array/discuss/105586/Java-O(n)-solution-with-explanation\n        # https://leetcode.com/problems/rearrange-array/discuss/105586/Java-O(n)-solution-with-explanation\n        # https://leetcode.com/problems/rearrange-array/discuss/105586/Java-O(n)-solution-with-explanation\n        # https://leetcode.com/problems/rearrange-array/discuss/105586/Java-O(n)-solution-with-explanation\n        # https://leetcode.com/problems/rearrange-array/discuss/105586/Java-O(n)-solution-with-explanation\n        # https://leetcode.com/problems/rearrange-array/discuss/105586/Java-O(n)-solution-with-explanation\n        # https://"
    },
    {
        "number": 2150,
        "title": "Find All Lonely Numbers in the Array",
        "difficulty": 1,
        "answer": "        return [x for x in nums if self.is_lonely(x, nums)]"
    },
    {
        "number": 2151,
        "title": "Maximum Good People Based on Statements",
        "difficulty": 2,
        "answer": "        # dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n        dp = [[0 for _ in range(len(statements))] for _ in range(len(statements))]\n        for i in range(len(statements)):\n            for j in range(len(statements[i])):\n                if statements[i][j] == 0:\n                    dp[i][j] = 1\n                elif statements[i][j] == 1:\n                    dp[i][j] = 2\n                else:\n                    dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n        return dp[-1][-1]\n"
    },
    {
        "number": 2154,
        "title": "Keep Multiplying Found Values by Two",
        "difficulty": 0,
        "answer": "        if nums[0] == original:\n            return 2 * original\n        if nums[-1] == original:\n            return 2 * original\n        if nums[0] == original - 1:\n            return 2 * original - 1\n        if nums[-1] == original + 1:\n            return 2 * original + 1\n        if nums[0] == original - 2:\n            return 2 * original - 2\n        if nums[-1] == original + 2:\n            return 2 * original + 2\n        if nums[0] == original - 3:\n            return 2 * original - 3\n        if nums[-1] == original + 3:\n            return 2 * original + 3\n        if nums[0] == original - 4:\n            return 2 * original - 4\n        if nums[-1] == original + 4:\n            return 2 * original + 4\n        if nums[0] == original - 5:\n            return 2 * original - 5\n        if nums[-1] == original + 5:\n            return 2 * original + 5\n"
    },
    {
        "number": 2155,
        "title": "All Divisions With the Highest Score of a Binary Array",
        "difficulty": 1,
        "answer": "        n = len(nums)\n        if n == 0:\n            return []\n        if n == 1:\n            return [0]\n        if n == 2:\n            return [0, 1]\n        if n == 3:\n            return [0, 1, 2]\n        if n == 4:\n            return [0, 1, 2, 3]\n        if n == 5:\n            return [0, 1, 2, 3, 4]\n        if n == 6:\n            return [0, 1, 2, 3, 4, 5]\n        if n == 7:\n            return [0, 1, 2, 3, 4, 5, 6]\n        if n == 8:\n            return [0, 1, 2, 3, 4, 5, 6, 7]\n        if n == 9:\n            return [0, 1, 2, 3, 4, 5, 6, 7, 8]\n        if n == 10:\n            return [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n        if n == 11:\n            return ["
    },
    {
        "number": 2156,
        "title": "Find Substring With Given Hash Value",
        "difficulty": 2,
        "answer": "        # hashValue = hashValue % modulo\n        # hashValue = hashValue % modulo\n        # hashValue = hashValue % modulo\n        # hashValue = hashValue % modulo\n        # hashValue = hashValue % modulo\n        # hashValue = hashValue % modulo\n        # hashValue = hashValue % modulo\n        # hashValue = hashValue % modulo\n        # hashValue = hashValue % modulo\n        # hashValue = hashValue % modulo\n        # hashValue = hashValue % modulo\n        # hashValue = hashValue % modulo\n        # hashValue = hashValue % modulo\n        # hashValue = hashValue % modulo\n        # hashValue = hashValue % modulo\n        # hashValue = hashValue % modulo\n        # hashValue = hashValue % modulo\n        # hashValue = hashValue % modulo\n        # hashValue = hashValue % modulo\n        # hashValue = hashValue % modulo\n        # hashValue = hashValue % modulo\n        # hashValue = hashValue % modulo\n        # hashValue = hashValue %"
    },
    {
        "number": 2157,
        "title": "Groups of Strings",
        "difficulty": 2,
        "answer": "        # https://leetcode.com/problems/group-strings/discuss/105586/Java-O(n)-solution-with-explanation\n        # https://leetcode.com/problems/group-strings/discuss/105586/Java-O(n)-solution-with-explanation\n        # https://leetcode.com/problems/group-strings/discuss/105586/Java-O(n)-solution-with-explanation\n        # https://leetcode.com/problems/group-strings/discuss/105586/Java-O(n)-solution-with-explanation\n        # https://leetcode.com/problems/group-strings/discuss/105586/Java-O(n)-solution-with-explanation\n        # https://leetcode.com/problems/group-strings/discuss/105586/Java-O(n)-solution-with-explanation\n        # https://leetcode.com/problems/group-strings"
    },
    {
        "number": 2160,
        "title": "Minimum Sum of Four Digit Number After Splitting Digits",
        "difficulty": 0,
        "answer": "        # https://leetcode.com/problems/minimum-sum-of-two-integers/discuss/\n        # https://leetcode.com/problems/minimum-sum-of-two-integers-ii/discuss/\n        # https://leetcode.com/problems/minimum-sum-of-two-integers-iii/discuss/\n        # https://leetcode.com/problems/minimum-sum-of-two-integers-iv/discuss/\n        # https://leetcode.com/problems/minimum-sum-of-two-integers-v/discuss/\n        # https://leetcode.com/problems/minimum-sum-of-two-integers-vi/discuss/\n        # https://leetcode.com/problems/minimum-sum-of-two-integers-vii/discuss/\n        # https://leetcode.com/problems/minimum-sum-of-two-integers-viii/discuss/\n        # https://leetcode.com/"
    },
    {
        "number": 2161,
        "title": "Partition Array According to Given Pivot",
        "difficulty": 1,
        "answer": "        n = len(nums)\n        if n == 1:\n            return nums\n        if n == 2:\n            return [nums[0], nums[1]]\n        if n == 3:\n            return [nums[0], nums[1], nums[2]]\n        if n == 4:\n            return [nums[0], nums[1], nums[2], nums[3]]\n        if n == 5:\n            return [nums[0], nums[1], nums[2], nums[3], nums[4]]\n        if n == 6:\n            return [nums[0], nums[1], nums[2], nums[3], nums[4], nums[5]]\n        if n == 7:\n            return [nums[0], nums[1], nums[2], nums[3], nums[4], nums[5], nums[6]]\n        if n == 8:\n            return [nums[0], nums[1], nums[2], nums["
    },
    {
        "number": 2162,
        "title": "Minimum Cost to Set Cooking Time",
        "difficulty": 1,
        "answer": "        if startAt == 0:\n            return 0\n        if startAt == 1:\n            return 1\n        if startAt == 2:\n            return 2\n        if startAt == 3:\n            return 3\n        if startAt == 4:\n            return 4\n        if startAt == 5:\n            return 5\n        if startAt == 6:\n            return 6\n        if startAt == 7:\n            return 7\n        if startAt == 8:\n            return 8\n        if startAt == 9:\n            return 9\n        if startAt == 10:\n            return 10\n        if startAt == 11:\n            return 11\n        if startAt == 12:\n            return 12\n        if startAt == 13:\n            return 13\n        if startAt == 14:\n            return 14\n        if startAt == 15:\n            return 15\n        if startAt == 16:\n            return 16\n        if startAt == 17:\n            return 17\n        if startAt == 18:\n            return 18\n        if startAt == 19:\n            return 19\n        if startAt == 20:\n            return"
    },
    {
        "number": 2163,
        "title": "Minimum Difference in Sums After Removal of Elements",
        "difficulty": 2,
        "answer": "        n = len(nums)\n        if n < 3:\n            return 0\n        sumfirst = sum(nums[:n//2])\n        sumsecond = sum(nums[n//2:])\n        return min(sumfirst - sumsecond, sumsecond - sumfirst)\n"
    },
    {
        "number": 2164,
        "title": "Sort Even and Odd Indices Independently",
        "difficulty": 0,
        "answer": "        odd_index = 0\n        even_index = 1\n        while odd_index < len(nums) and even_index < len(nums):\n            if nums[odd_index] % 2 == 0:\n                nums[odd_index], nums[even_index] = nums[even_index], nums[odd_index]\n                odd_index += 1\n            else:\n                odd_index += 1\n            if even_index < len(nums) and nums[even_index] % 2 == 1:\n                nums[odd_index], nums[even_index] = nums[even_index], nums[odd_index]\n                even_index += 1\n            else:\n                even_index += 1\n        return nums\n"
    },
    {
        "number": 2165,
        "title": "Smallest Value of the Rearranged Number",
        "difficulty": 1,
        "answer": "        # https://leetcode.com/problems/rearrange-the-digits-of-an-integer/discuss/\n        # https://leetcode.com/problems/rearrange-the-digits-of-an-integer/discuss/\n        # https://leetcode.com/problems/rearrange-the-digits-of-an-integer/discuss/\n        # https://leetcode.com/problems/rearrange-the-digits-of-an-integer/discuss/\n        # https://leetcode.com/problems/rearrange-the-digits-of-an-integer/discuss/\n        # https://leetcode.com/problems/rearrange-the-digits-of-an-integer/discuss/\n        # https://leetcode.com/problems/rearrange-the-digits-of-an-integer/discuss/\n        # https://leetcode.com/problems/rearrange-the-digits-of-an-"
    },
    {
        "number": 2166,
        "title": "Design Bitset",
        "difficulty": 1,
        "answer": "        pass\n    def __init__(self, size: int):\n        self.size = size\n        self.bits = [0] * size\n    def fix(self, idx: int) -> None:\n        self.bits[idx] = 1\n    def unfix(self, idx: int) -> None:\n        self.bits[idx] = 0\n    def flip(self) -> None:\n        for i in range(self.size):\n            self.bits[i] = 1 - self.bits[i]\n    def all(self) -> bool:\n        return all(self.bits)\n    def one(self) -> bool:\n        return any(self.bits)\n    def count(self) -> int:\n        return sum(self.bits)\n    def toString(self) -> str:\n        return ''.join(map(str, self.bits))"
    },
    {
        "number": 2167,
        "title": "Minimum Time to Remove All Cars Containing Illegal Goods",
        "difficulty": 2,
        "answer": "        # https://leetcode.com/problems/minimum-time-to-remove-all-cars-contain-illegal-goods/discuss/\n        # https://leetcode.com/problems/minimum-time-to-remove-all-cars-contain-illegal-goods/discuss/\n        # https://leetcode.com/problems/minimum-time-to-remove-all-cars-contain-illegal-goods/discuss/\n        # https://leetcode.com/problems/minimum-time-to-remove-all-cars-contain-illegal-goods/discuss/\n        # https://leetcode.com/problems/minimum-time-to-remove-all-cars-contain-illegal-goods/discuss/\n        # https://leetcode.com/problems/minimum-time-to-remove-all-cars-contain-illegal-goods/discuss/\n        # https://leetcode.com/problems/minimum-time-to-remove-all-cars-contain-"
    },
    {
        "number": 2169,
        "title": "Count Operations to Obtain Zero",
        "difficulty": 0,
        "answer": "        return sum(1 for _ in self.subtract(num1, num2))"
    },
    {
        "number": 2170,
        "title": "Minimum Operations to Make the Array Alternating",
        "difficulty": 1,
        "answer": "        n = len(nums)\n        if n == 0:\n            return 0\n        elif n == 1:\n            return 1\n        elif n == 2:\n            return 1 if nums[0] == nums[1] else 2\n        elif n == 3:\n            return 1 if nums[0] == nums[1] else 2 if nums[1] == nums[2] else 3\n        elif n == 4:\n            return 1 if nums[0] == nums[1] else 2 if nums[1] == nums[2] else 3 if nums[2] == nums[3] else 4\n        elif n == 5:\n            return 1 if nums[0] == nums[1] else 2 if nums[1] == nums[2] else 3 if nums[2] == nums[3] else 4 if nums[3] == nums[4] else 5\n        elif n == 6:\n            return 1 if nums[0] == nums[1] else 2 if nums[1"
    },
    {
        "number": 2171,
        "title": "Removing Minimum Number of Magic Beans",
        "difficulty": 1,
        "answer": "        # https://leetcode.com/problems/minimum-removal/discuss/105586/Java-O(n)-solution-with-explanation\n        # https://leetcode.com/problems/minimum-removal/discuss/105586/Java-O(n)-solution-with-explanation\n        # https://leetcode.com/problems/minimum-removal/discuss/105586/Java-O(n)-solution-with-explanation\n        # https://leetcode.com/problems/minimum-removal/discuss/105586/Java-O(n)-solution-with-explanation\n        # https://leetcode.com/problems/minimum-removal/discuss/105586/Java-O(n)-solution-with-explanation\n        # https://leetcode.com/problems/minimum-removal/discuss/105586/Java-O(n)-solution-with-explanation\n        # https://leetcode.com/"
    },
    {
        "number": 2172,
        "title": "Maximum AND Sum of Array",
        "difficulty": 2,
        "answer": "        n = len(nums)\n        if n == 0:\n            return 0\n        if n == 1:\n            return nums[0]\n        if n == 2:\n            return nums[0] + nums[1]\n        if n == 3:\n            return nums[0] + nums[1] + nums[2]\n        if n == 4:\n            return nums[0] + nums[1] + nums[2] + nums[3]\n        if n == 5:\n            return nums[0] + nums[1] + nums[2] + nums[3] + nums[4]\n        if n == 6:\n            return nums[0] + nums[1] + nums[2] + nums[3] + nums[4] + nums[5]\n        if n == 7:\n            return nums[0] + nums[1] + nums[2] + nums[3] + nums[4] + nums[5] + nums[6]"
    },
    {
        "number": 2176,
        "title": "Count Equal and Divisible Pairs in an Array",
        "difficulty": 0,
        "answer": "        n = len(nums)\n        if n < 2:\n            return 0\n        if n == 2:\n            return 1\n        if n == 3:\n            return 2\n        if n == 4:\n            return 1\n        if n == 5:\n            return 2\n        if n == 6:\n            return 1\n        if n == 7:\n            return 2\n        if n == 8:\n            return 1\n        if n == 9:\n            return 2\n        if n == 10:\n            return 1\n        if n == 11:\n            return 2\n        if n == 12:\n            return 1\n        if n == 13:\n            return 2\n        if n == 14:\n            return 1\n        if n == 15:\n            return 2\n        if n == 16:\n            return 1\n        if n == 17:\n            return 2\n        if n == 18:\n            return 1\n        if n == 19:\n            return 2\n        if n == 20:\n            return 1\n        if n == 21:\n            return 2\n        if n == 22:\n            return 1"
    },
    {
        "number": 2177,
        "title": "Find Three Consecutive Integers That Sum to a Given Number",
        "difficulty": 1,
        "answer": "        if num < 0:\n            return []\n        if num == 0:\n            return [0, 1, 2]\n        if num == 1:\n            return [0, 1]\n        if num == 2:\n            return [0, 2]\n        if num == 3:\n            return [0, 1, 2]\n        if num % 3 == 0:\n            return [num // 3, num // 3 + 1, num // 3 + 2]\n        if num % 3 == 1:\n            return [num // 3, num // 3 + 1]\n        if num % 3 == 2:\n            return [num // 3, num // 3 + 1, num // 3 + 2]\n        return []\n"
    },
    {
        "number": 2178,
        "title": "Maximum Split of Positive Even Integers",
        "difficulty": 1,
        "answer": "        # https://leetcode.com/problems/maximum-even-split/discuss/105500/Python-O(n)-time-and-O(1)-space-solution-with-explanation\n        # https://leetcode.com/problems/maximum-even-split/discuss/105501/Python-O(n)-time-and-O(1)-space-solution-with-explanation\n        # https://leetcode.com/problems/maximum-even-split/discuss/105502/Python-O(n)-time-and-O(1)-space-solution-with-explanation\n        # https://leetcode.com/problems/maximum-even-split/discuss/105503/Python-O(n)-time-and-O(1)-space-solution-with-explanation\n        # https://leetcode.com/problems/maximum-even-split/discuss/105504/Python-O(n)-time-and-O(1)-space-solution-with"
    },
    {
        "number": 2179,
        "title": "Count Good Triplets in an Array",
        "difficulty": 2,
        "answer": "        nums1.sort()\n        nums2.sort()\n        res = 0\n        for i in range(len(nums1) - 2):\n            for j in range(i + 1, len(nums1) - 1):\n                for k in range(j + 1, len(nums1)):\n                    if nums1[i] < nums1[j] and nums1[j] < nums1[k] and nums2[i] < nums2[j] and nums2[j] < nums2[k]:\n                        res += 1\n        return res\n"
    },
    {
        "number": 2180,
        "title": "Count Integers With Even Digit Sum",
        "difficulty": 0,
        "answer": "        if num <= 0:\n            return 0\n        if num == 1:\n            return 1\n        if num % 2 == 0:\n            return num // 2\n        return self.countEven(num - 1) + self.countEven(num - 2)"
    },
    {
        "number": 2181,
        "title": "Merge Nodes in Between Zeros",
        "difficulty": 1,
        "answer": "        if not head:\n            return None\n        if not head.next:\n            return head\n        if not head.next.next:\n            return head\n        if not head.next.next.next:\n            return head\n        if not head.next.next.next.next:\n            return head\n        if not head.next.next.next.next.next:\n            return head\n        if not head.next.next.next.next.next.next:\n            return head\n        if not head.next.next.next.next.next.next.next:\n            return head\n        if not head.next.next.next.next.next.next.next.next:\n            return head\n        if not head.next.next.next.next.next.next.next.next.next:\n            return head\n        if not head.next.next.next.next.next.next.next.next.next.next:\n            return head\n        if not head.next.next.next.next.next.next.next.next.next.next.next:\n            return"
    },
    {
        "number": 2182,
        "title": "Construct String With Repeat Limit",
        "difficulty": 1,
        "answer": "        if repeatLimit == 0:\n            return \"\"\n        if len(s) == 0:\n            return \"\"\n        if len(s) == 1:\n            return s\n        if len(s) == 2:\n            return s + s\n        if len(s) == 3:\n            return s + s + s\n        if len(s) == 4:\n            return s + s + s + s\n        if len(s) == 5:\n            return s + s + s + s + s\n        if len(s) == 6:\n            return s + s + s + s + s + s\n        if len(s) == 7:\n            return s + s + s + s + s + s + s\n        if len(s) == 8:\n            return s + s + s + s + s + s + s + s\n        if len(s) == 9:\n            return s + s + s + s + s + s + s + s + s\n        if len(s) == 10:\n            return s + s + s + s + s + s + s +"
    },
    {
        "number": 2183,
        "title": "Count Array Pairs Divisible by K",
        "difficulty": 2,
        "answer": "        n = len(nums)\n        if n < 2:\n            return 0\n        if n == 2:\n            return 1\n        if n == 3:\n            return 2\n        if n == 4:\n            return 3\n        if n == 5:\n            return 4\n        if n == 6:\n            return 5\n        if n == 7:\n            return 6\n        if n == 8:\n            return 7\n        if n == 9:\n            return 8\n        if n == 10:\n            return 9\n        if n == 11:\n            return 10\n        if n == 12:\n            return 11\n        if n == 13:\n            return 12\n        if n == 14:\n            return 13\n        if n == 15:\n            return 14\n        if n == 16:\n            return 15\n        if n == 17:\n            return 16\n        if n == 18:\n            return 17\n        if n == 19:\n            return 18\n        if n == 20:\n            return 19\n        if n == 21:\n            return 20\n        if n == 22:\n            return 21"
    },
    {
        "number": 2185,
        "title": "Counting Words With a Given Prefix",
        "difficulty": 0,
        "answer": "        count = 0\n        for word in words:\n            if word.startswith(pref):\n                count += 1\n        return count"
    },
    {
        "number": 2186,
        "title": "Minimum Number of Steps to Make Two Strings Anagram II",
        "difficulty": 1,
        "answer": "        s_len = len(s)\n        t_len = len(t)\n        if s_len!= t_len:\n            return -1\n        dp = [[0] * (t_len + 1) for _ in range(s_len + 1)]\n        for i in range(1, s_len + 1):\n            for j in range(1, t_len + 1):\n                if s[i - 1] == t[j - 1]:\n                    dp[i][j] = dp[i - 1][j - 1] + 1\n                else:\n                    dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])\n        return dp[s_len][t_len]"
    },
    {
        "number": 2187,
        "title": "Minimum Time to Complete Trips",
        "difficulty": 1,
        "answer": "        if len(time) == 1:\n            return time[0]\n        if len(time) == 2:\n            return min(time[0], time[1])\n        if len(time) == 3:\n            return min(min(time[0], time[1]), time[2])\n        if len(time) == 4:\n            return min(min(min(time[0], time[1]), time[2]), time[3])\n        if len(time) == 5:\n            return min(min(min(min(time[0], time[1]), time[2]), time[3]), time[4])\n        if len(time) == 6:\n            return min(min(min(min(min(time[0], time[1]), time[2]), time[3]), time[4]), time[5])\n        if len(time) == 7:\n            return min(min(min(min(min(min(time[0], time[1]), time[2]), time[3]), time[4]), time[5]), time[6])\n        if len(time"
    },
    {
        "number": 2188,
        "title": "Minimum Time to Finish the Race",
        "difficulty": 2,
        "answer": "        if numLaps == 0:\n            return 0\n        if numLaps == 1:\n            return max(tire_time for tire_time in self.get_tire_times(tires))\n        if numLaps == 2:\n            return max(tire_time for tire_time in self.get_tire_times(tires)) + max(tire_time for tire_time in self.get_tire_times(tires))\n        if numLaps == 3:\n            return max(tire_time for tire_time in self.get_tire_times(tires)) + max(tire_time for tire_time in self.get_tire_times(tires)) + max(tire_time for tire_time in self.get_tire_times(tires))\n        if numLaps == 4:\n            return max(tire_time for tire_time in self.get_tire_times(tires)) + max(tire_time for tire_time in self.get_tire_times(tires)) + max"
    },
    {
        "number": 2190,
        "title": "Most Frequent Number Following Key In an Array",
        "difficulty": 0,
        "answer": "        d = collections.defaultdict(int)\n        for i, n in enumerate(nums):\n            d[n] += 1\n            if i + 1 < len(nums) and n == key:\n                d[nums[i + 1]] += 1\n        return max(d, key=d.get)\n"
    },
    {
        "number": 2191,
        "title": "Sort the Jumbled Numbers",
        "difficulty": 1,
        "answer": "        # https://leetcode.com/problems/sort-jumbled-mapping/discuss/\n        # https://leetcode.com/problems/sort-jumbled-mapping/discuss/\n        # https://leetcode.com/problems/sort-jumbled-mapping/discuss/\n        # https://leetcode.com/problems/sort-jumbled-mapping/discuss/\n        # https://leetcode.com/problems/sort-jumbled-mapping/discuss/\n        # https://leetcode.com/problems/sort-jumbled-mapping/discuss/\n        # https://leetcode.com/problems/sort-jumbled-mapping/discuss/\n        # https://leetcode.com/problems/sort-jumbled-mapping/discuss/\n        # https://leetcode.com/problems/sort-jumbled-mapping/discuss/\n        # https://leetcode.com/problems/sort-jumbled-mapping/discuss/\n"
    },
    {
        "number": 2192,
        "title": "All Ancestors of a Node in a Directed Acyclic Graph",
        "difficulty": 1,
        "answer": "        # edgeList = [[0,3],[0,4],[1,3],[2,4],[2,7],[3,5],[3,6],[3,7],[4,6]]\n        # edgeList = [[0,1],[0,2],[0,3],[0,4],[1,2],[1,3],[1,4],[2,3],[2,4],[3,4]]\n        # edgeList = [[0,1],[0,2],[0,3],[0,4],[1,2],[1,3],[1,4],[2,3],[2,4],[3,4],[4,5],[4,6],[4,7],[5,6],[5,7],[6,7]]\n        # edgeList = [[0,1],[0,2],[0,3],[0,4],[1,2],[1,3],[1,4],[2,3],[2,4],[3,4],[4,5],[4,6],[4,7],[5,6],[5,7],[6,7],[7,8],[7,9],[8,9]]\n        # edgeList = [["
    },
    {
        "number": 2193,
        "title": "Minimum Number of Moves to Make Palindrome",
        "difficulty": 2,
        "answer": "        n = len(s)\n        if n == 1:\n            return 0\n        if n == 2:\n            return 1\n        if n == 3:\n            return 2\n        if n == 4:\n            return 3\n        if n == 5:\n            return 4\n        if n == 6:\n            return 5\n        if n == 7:\n            return 6\n        if n == 8:\n            return 7\n        if n == 9:\n            return 8\n        if n == 10:\n            return 9\n        if n == 11:\n            return 10\n        if n == 12:\n            return 11\n        if n == 13:\n            return 12\n        if n == 14:\n            return 13\n        if n == 15:\n            return 14\n        if n == 16:\n            return 15\n        if n == 17:\n            return 16\n        if n == 18:\n            return 17\n        if n == 19:\n            return 18\n        if n == 20:\n            return 19\n        if n == 21:\n            return 20\n        if n == 22:\n            return 21\n"
    },
    {
        "number": 2194,
        "title": "Cells in a Range on an Excel Sheet",
        "difficulty": 0,
        "answer": "        rows = len(s)\n        cols = len(s[0])\n        cells = []\n        for i in range(rows):\n            for j in range(cols):\n                if s[i][j] == ':':\n                    cells.append((i, j))\n        return sorted(cells)\n"
    },
    {
        "number": 2195,
        "title": "Append K Integers With Minimal Sum",
        "difficulty": 1,
        "answer": "        # https://leetcode.com/problems/k-sum-closest-trees/discuss/105500/Python-O(n)-time-and-O(n)-space-solution\n        # https://leetcode.com/problems/k-sum-closest-trees/discuss/105500/Python-O(n)-time-and-O(n)-space-solution\n        # https://leetcode.com/problems/k-sum-closest-trees/discuss/105500/Python-O(n)-time-and-O(n)-space-solution\n        # https://leetcode.com/problems/k-sum-closest-trees/discuss/105500/Python-O(n)-time-and-O(n)-space-solution\n        # https://leetcode.com/problems/k-sum-closest-trees/discuss/105500/Python-O(n)-time-and-O(n)-space-solution\n"
    },
    {
        "number": 2196,
        "title": "Create Binary Tree From Descriptions",
        "difficulty": 1,
        "answer": "        def build_tree(descriptions, start, end):\n            if start > end:\n                return None\n            root = TreeNode(descriptions[start][0])\n            root.left = build_tree(descriptions, start + 1, start + 1 + descriptions[start][1])\n            root.right = build_tree(descriptions, start + 1 + descriptions[start][1], end)\n            return root"
    },
    {
        "number": 2197,
        "title": "Replace Non-Coprime Numbers in Array",
        "difficulty": 2,
        "answer": "        nums = sorted(nums)\n        nums_len = len(nums)\n        if nums_len < 2:\n            return nums\n        for i in range(nums_len - 1):\n            if nums[i]!= nums[i + 1]:\n                break\n        else:\n            return nums\n        for i in range(nums_len - 1):\n            if nums[i]!= nums[i + 1]:\n                break\n        else:\n            return nums\n        for i in range(nums_len - 1):\n            if nums[i]!= nums[i + 1]:\n                break\n        else:\n            return nums\n        for i in range(nums_len - 1):\n            if nums[i]!= nums[i + 1]:\n                break\n        else:\n            return nums\n        for i in range(nums_len - 1):\n            if nums[i]!= nums[i + 1]:\n                break\n        else:\n            return nums\n        for i"
    },
    {
        "number": 2200,
        "title": "Find All K-Distant Indices in an Array",
        "difficulty": 0,
        "answer": "        if not nums:\n            return []\n        if len(nums) == 1:\n            return [0]\n        if len(nums) == 2:\n            return [0, 1]\n        if len(nums) == 3:\n            return [0, 1, 2]\n        if len(nums) == 4:\n            return [0, 1, 2, 3]\n        if len(nums) == 5:\n            return [0, 1, 2, 3, 4]\n        if len(nums) == 6:\n            return [0, 1, 2, 3, 4, 5]\n        if len(nums) == 7:\n            return [0, 1, 2, 3, 4, 5, 6]\n        if len(nums) == 8:\n            return [0, 1, 2, 3, 4, 5, 6, 7]\n        if len(nums) == 9:\n            return [0, 1, 2, 3, 4, 5, 6, 7, 8]\n        if len(nums) == 10:\n            return ["
    },
    {
        "number": 2201,
        "title": "Count Artifacts That Can Be Extracted",
        "difficulty": 1,
        "answer": "        if n == 1:\n            return len(artifacts)\n        if n == 2:\n            return len(artifacts) - len(dig)\n        if n == 3:\n            return len(artifacts) - len(dig) - len(dig[0])\n        if n == 4:\n            return len(artifacts) - len(dig) - len(dig[0]) - len(dig[1])\n        if n == 5:\n            return len(artifacts) - len(dig) - len(dig[0]) - len(dig[1]) - len(dig[2])\n        if n == 6:\n            return len(artifacts) - len(dig) - len(dig[0]) - len(dig[1]) - len(dig[2]) - len(dig[3])\n        if n == 7:\n            return len(artifacts) - len(dig) - len(dig[0]) - len(dig[1]) - len(dig[2]) - len(dig[3]) - len(dig[4])\n        if n == 8:\n            return len(artifacts) - len(dig"
    },
    {
        "number": 2202,
        "title": "Maximize the Topmost Element After K Moves",
        "difficulty": 1,
        "answer": "        n = len(nums)\n        if n == 0:\n            return -1\n        if n == 1:\n            return nums[0]\n        if n == 2:\n            return max(nums)\n        if n == 3:\n            return max(nums)\n        if n == 4:\n            return max(nums)\n        if n == 5:\n            return max(nums)\n        if n == 6:\n            return max(nums)\n        if n == 7:\n            return max(nums)\n        if n == 8:\n            return max(nums)\n        if n == 9:\n            return max(nums)\n        if n == 10:\n            return max(nums)\n        if n == 11:\n            return max(nums)\n        if n == 12:\n            return max(nums)\n        if n == 13:\n            return max(nums)\n        if n == 14:\n            return max(nums)\n        if n == 15:\n            return max(nums)\n        if n =="
    },
    {
        "number": 2203,
        "title": "Minimum Weighted Subgraph With the Required Paths",
        "difficulty": 2,
        "answer": "        # edge[i][0] is the source node, edge[i][1] is the target node, edge[i][2] is the weight\n        # edge[i][0] is the source node, edge[i][1] is the target node, edge[i][2] is the weight\n        # edge[i][0] is the source node, edge[i][1] is the target node, edge[i][2] is the weight\n        # edge[i][0] is the source node, edge[i][1] is the target node, edge[i][2] is the weight\n        # edge[i][0] is the source node, edge[i][1] is the target node, edge[i][2] is the weight\n        # edge[i][0] is the source node, edge[i][1] is the target node, edge[i][2] is the weight\n        # edge[i][0] is the source node, edge[i][1] is the target node, edge[i][2] is the weight\n        # edge[i][0] is the source node"
    },
    {
        "number": 2206,
        "title": "Divide Array Into Equal Pairs",
        "difficulty": 0,
        "answer": "        n = len(nums)\n        if n % 2!= 0:\n            return False\n        if n == 1:\n            return True\n        if n == 2:\n            return nums[0] == nums[1]\n        if n == 3:\n            return nums[0] == nums[1] and nums[1] == nums[2]\n        if n == 4:\n            return nums[0] == nums[1] and nums[1] == nums[2] and nums[2] == nums[3]\n        if n == 5:\n            return nums[0] == nums[1] and nums[1] == nums[2] and nums[2] == nums[3] and nums[3] == nums[4]\n        if n == 6:\n            return nums[0] == nums[1] and nums[1] == nums[2] and nums[2] == nums[3] and nums[3] == nums[4] and nums[4"
    },
    {
        "number": 2207,
        "title": "Maximize Number of Subsequences in a String",
        "difficulty": 1,
        "answer": "        if len(pattern)!= 2:\n            return 0\n        if len(text) < 2:\n            return 0\n        if pattern[0]!= text[0] and pattern[1]!= text[1]:\n            return 0\n        dp = [0] * (len(text) + 1)\n        for i in range(1, len(text) + 1):\n            dp[i] = dp[i - 1]\n            if text[i - 1] == pattern[0]:\n                dp[i] += dp[i - 2]\n            if text[i - 1] == pattern[1]:\n                dp[i] += dp[i - 2]\n        return dp[-1]"
    },
    {
        "number": 2208,
        "title": "Minimum Operations to Halve Array Sum",
        "difficulty": 1,
        "answer": "        n = len(nums)\n        if n == 1:\n            return 1\n        if n == 2:\n            return 2\n        if n == 3:\n            return 3\n        if n == 4:\n            return 4\n        if n == 5:\n            return 5\n        if n == 6:\n            return 6\n        if n == 7:\n            return 7\n        if n == 8:\n            return 8\n        if n == 9:\n            return 9\n        if n == 10:\n            return 10\n        if n == 11:\n            return 11\n        if n == 12:\n            return 12\n        if n == 13:\n            return 13\n        if n == 14:\n            return 14\n        if n == 15:\n            return 15\n        if n == 16:\n            return 16\n        if n == 17:\n            return 17\n        if n == 18:\n            return 18\n        if n == 19:\n            return 19\n        if n == 20:\n            return 20\n        if n == 21:\n            return 21\n        if n == 22:\n            return 22"
    },
    {
        "number": 2209,
        "title": "Minimum White Tiles After Covering With Carpets",
        "difficulty": 2,
        "answer": "        floor = floor.replace('0', '1').replace('1', '0')\n        floor = floor.replace('1', '1')\n        floor = floor.replace('0', '0')\n        floor = floor.replace('1', '1')\n        floor = floor.replace('0', '0')\n        floor = floor.replace('1', '1')\n        floor = floor.replace('0', '0')\n        floor = floor.replace('1', '1')\n        floor = floor.replace('0', '0')\n        floor = floor.replace('1', '1')\n        floor = floor.replace('0', '0')\n        floor = floor.replace('1', '1')\n        floor = floor.replace('0', '0')\n        floor = floor.replace('1', '1')\n        floor = floor.replace('0', '0')\n        floor = floor.replace('1', '1')\n        floor = floor.replace('0', '0')\n        floor = floor.replace('1', '1')\n        floor = floor.replace('0',"
    },
    {
        "number": 2210,
        "title": "Count Hills and Valleys in an Array",
        "difficulty": 0,
        "answer": "        n = len(nums)\n        if n == 1:\n            return 0\n        hill = [0] * n\n        valley = [0] * n\n        for i in range(1, n):\n            if nums[i] < nums[i - 1]:\n                hill[i] = 1\n            else:\n                valley[i] = 1\n        for i in range(n - 2, -1, -1):\n            if nums[i] < nums[i + 1]:\n                hill[i] = 1\n            else:\n                valley[i] = 1\n        return hill[0] + valley[-1]"
    },
    {
        "number": 2211,
        "title": "Count Collisions on a Road",
        "difficulty": 1,
        "answer": "        if len(directions)!= len(set(directions)):\n            return -1\n        cars = [0] * len(directions)\n        for i in range(1, len(directions)):\n            if directions[i] == directions[i - 1]:\n                cars[i] = cars[i - 1] + 1\n            else:\n                cars[i] = 1\n        return sum(cars)\n"
    },
    {
        "number": 2212,
        "title": "Maximum Points in an Archery Competition",
        "difficulty": 1,
        "answer": "        if numArrows == 0:\n            return []\n        if numArrows == 1:\n            return [0]\n        if numArrows == 2:\n            return [0, 0]\n        if numArrows == 3:\n            return [0, 0, 0]\n        if numArrows == 4:\n            return [0, 0, 0, 0]\n        if numArrows == 5:\n            return [0, 0, 0, 0, 0]\n        if numArrows == 6:\n            return [0, 0, 0, 0, 0, 0]\n        if numArrows == 7:\n            return [0, 0, 0, 0, 0, 0, 0]\n        if numArrows == 8:\n            return [0, 0, 0, 0, 0, 0, 0, 0]\n        if numArrows == 9:\n            return [0, 0, 0, 0, 0, 0, 0, 0, 0]\n        if numArrows == 10:\n            return [0, 0, 0, 0, 0, 0, 0, 0, 0,"
    },
    {
        "number": 2213,
        "title": "Longest Substring of One Repeating Character",
        "difficulty": 2,
        "answer": "        length = len(s)\n        if length < len(queryCharacters):\n            return [0] * len(queryCharacters)\n        \n        # dp[i] is the length of the longest repeating substring of s[0:i]\n        dp = [0] * len(queryCharacters)\n        \n        # dp[i] = max(dp[i-1], dp[i-queryIndices[i]] + 1)\n        for i in range(1, len(queryCharacters)):\n            dp[i] = max(dp[i-1], dp[i-queryIndices[i]] + 1)\n        \n        # dp[i] = max(dp[i-1], dp[i-queryIndices[i]] + 1)\n        for i in range(1, len(queryCharacters)):\n            dp[i] = max(dp[i-1], dp[i-queryIndices[i]] + 1)\n        \n        # dp[i] = max(dp[i-1], dp[i-queryIndices["
    },
    {
        "number": 2215,
        "title": "Find the Difference of Two Arrays",
        "difficulty": 0,
        "answer": "        nums1 = sorted(nums1)\n        nums2 = sorted(nums2)\n        answer = []\n        for i in range(len(nums1)):\n            if nums1[i] not in nums2:\n                answer.append([nums1[i]])\n        for i in range(len(nums2)):\n            if nums2[i] not in nums1:\n                answer.append([nums2[i]])\n        return answer\n"
    },
    {
        "number": 2216,
        "title": "Minimum Deletions to Make Array Beautiful",
        "difficulty": 1,
        "answer": "        n = len(nums)\n        if n % 2 == 0:\n            return n // 2\n        else:\n            return n // 2 + 1"
    },
    {
        "number": 2217,
        "title": "Find Palindrome With Fixed Length",
        "difficulty": 1,
        "answer": "        # write your code in Python 3.6\n        # write your code in Python 3.7\n        # write your code in Python 3.8\n        # write your code in Python 3.9\n        # write your code in Python 3.10\n        # write your code in Python 3.11\n        # write your code in Python 3.12\n        # write your code in Python 3.13\n        # write your code in Python 3.14\n        # write your code in Python 3.15\n        # write your code in Python 3.16\n        # write your code in Python 3.17\n        # write your code in Python 3.18\n        # write your code in Python 3.19\n        # write your code in Python 3.20\n        # write your code in Python 3.21\n        # write your code in Python 3.22\n        # write your code in Python 3.23\n        # write your code in Python 3.24\n        # write your code in Python 3.25\n        # write your code in Python 3.26\n        # write your code in Python 3.27\n        # write your code in Python 3"
    },
    {
        "number": 2218,
        "title": "Maximum Value of K Coins From Piles",
        "difficulty": 2,
        "answer": "        if not piles:\n            return 0\n        if not k:\n            return max(self.maxValueOfCoins(piles[1:], k) + piles[0][0], self.maxValueOfCoins(piles[1:], k))\n        if k == 1:\n            return max(self.maxValueOfCoins(piles[1:], k) + piles[0][0], self.maxValueOfCoins(piles[1:], k))\n        if k == 2:\n            return max(self.maxValueOfCoins(piles[1:], k) + piles[0][0], self.maxValueOfCoins(piles[1:], k))\n        if k == 3:\n            return max(self.maxValueOfCoins(piles[1:], k) + piles[0][0], self.maxValueOfCoins(piles[1:], k))\n        if k == 4:\n            return max(self.maxValueOfCoins(piles[1:], k) + piles[0][0], self.max"
    },
    {
        "number": 2220,
        "title": "Minimum Bit Flips to Convert Number",
        "difficulty": 0,
        "answer": "        # https://leetcode.com/problems/minimum-bit-flips-to-convert-two-numbers/discuss/\n        # https://leetcode.com/problems/minimum-bit-flips-to-convert-two-numbers/discuss/\n        # https://leetcode.com/problems/minimum-bit-flips-to-convert-two-numbers/discuss/\n        # https://leetcode.com/problems/minimum-bit-flips-to-convert-two-numbers/discuss/\n        # https://leetcode.com/problems/minimum-bit-flips-to-convert-two-numbers/discuss/\n        # https://leetcode.com/problems/minimum-bit-flips-to-convert-two-numbers/discuss/\n        # https://leetcode.com/problems/minimum-bit-flips-to-convert-two-numbers/discuss/\n        # https://leetcode.com/problems"
    },
    {
        "number": 2221,
        "title": "Find Triangular Sum of an Array",
        "difficulty": 1,
        "answer": "        n = len(nums)\n        if n == 1:\n            return nums[0]\n        newNums = [0] * (n - 1)\n        for i in range(n - 1):\n            newNums[i] = (nums[i] + nums[i + 1]) % 10\n        nums = newNums\n        return self.triangularSum(nums)\n"
    },
    {
        "number": 2222,
        "title": "Number of Ways to Select Buildings",
        "difficulty": 1,
        "answer": "        if not s:\n            return 0\n        if len(s) == 1:\n            return 1\n        if len(s) == 2:\n            return 2\n        if len(s) == 3:\n            return 1\n        if len(s) == 4:\n            return 2\n        if len(s) == 5:\n            return 3\n        if len(s) == 6:\n            return 4\n        if len(s) == 7:\n            return 5\n        if len(s) == 8:\n            return 6\n        if len(s) == 9:\n            return 7\n        if len(s) == 10:\n            return 8\n        if len(s) == 11:\n            return 9\n        if len(s) == 12:\n            return 10\n        if len(s) == 13:\n            return 11\n        if len(s) == 14:\n            return 12\n        if len(s) == 15:\n            return 13\n        if len(s) == 16:\n            return 14\n        if len(s) == 17:\n            return 15\n        if"
    },
    {
        "number": 2223,
        "title": "Sum of Scores of Built Strings",
        "difficulty": 2,
        "answer": "        n = len(s)\n        dp = [0] * (n + 1)\n        for i in range(1, n + 1):\n            dp[i] = dp[i - 1]\n            for j in range(i - 1, 0, -1):\n                if s[j] == s[i - 1]:\n                    dp[i] = max(dp[i], dp[j - 1] + 1)\n        return sum(dp)\n"
    },
    {
        "number": 2224,
        "title": "Minimum Number of Operations to Convert Time",
        "difficulty": 0,
        "answer": "        # Time\n        # 1. current = \"00:00\"\n        # 2. current = \"00:01\"\n        # 3. current = \"00:02\"\n        # 4. current = \"00:03\"\n        # 5. current = \"00:04\"\n        # 6. current = \"00:05\"\n        # 7. current = \"00:06\"\n        # 8. current = \"00:07\"\n        # 9. current = \"00:08\"\n        # 10. current = \"00:09\"\n        # 11. current = \"00:10\"\n        # 12. current = \"00:11\"\n        # 13. current = \"00:12\"\n        # 14. current = \"00:13\"\n        # 15. current = \"00:14\"\n        # 16. current = \"00:15\"\n        # 17. current = \"00:16\"\n        # 18. current = \"00:17\"\n        # 19. current = \"00:18\"\n        # 20. current = \"00:19\"\n        # 21. current ="
    },
    {
        "number": 2225,
        "title": "Find Players With Zero or One Losses",
        "difficulty": 1,
        "answer": "        # Your Solution object will be instantiated and called as such:\n        # obj = Solution(matches)\n        # param_1 = obj.findWinners(matches)\n        # return param_1"
    },
    {
        "number": 2226,
        "title": "Maximum Candies Allocated to K Children",
        "difficulty": 1,
        "answer": "        if not candies:\n            return 0\n        if not k:\n            return 0\n        if k == 1:\n            return max(candies)\n        if k == 2:\n            return max(candies) + max(candies[1:])\n        if k == 3:\n            return max(candies) + max(candies[1:]) + max(candies[2:])\n        if k == 4:\n            return max(candies) + max(candies[1:]) + max(candies[2:]) + max(candies[3:])\n        if k == 5:\n            return max(candies) + max(candies[1:]) + max(candies[2:]) + max(candies[3:]) + max(candies[4:])\n        if k == 6:\n            return max(candies) + max(candies[1:]) + max(candies[2:]) + max(candies[3:]) + max(candies[4:]) + max(candies[5:])\n        if k =="
    },
    {
        "number": 2227,
        "title": "Encrypt and Decrypt Strings",
        "difficulty": 2,
        "answer": "        if len(keys)!= len(values):\n            raise Exception(\"keys and values must have the same length\")\n        if len(keys)!= len(dictionary):\n            raise Exception(\"keys and dictionary must have the same length\")\n        if len(keys)!= len(word1):\n            raise Exception(\"keys and word1 must have the same length\")\n        if len(keys)!= len(word2):\n            raise Exception(\"keys and word2 must have the same length\")\n        if len(keys)!= len(word2):\n            raise Exception(\"keys and word2 must have the same length\")\n        if len(keys)!= len(word2):\n            raise Exception(\"keys and word2 must have the same length\")\n        if len(keys)!= len(word2):\n            raise Exception(\"keys and word2 must have the same length\")\n        if len(keys)!= len(word2):\n            raise Exception(\"keys and word2 must have the same length\")\n        if len(keys)!= len(word2):\n            raise Exception(\"keys and word2 must have the same length\")\n        "
    },
    {
        "number": 2231,
        "title": "Largest Number After Digit Swaps by Parity",
        "difficulty": 0,
        "answer": "        if num == 0:\n            return 0\n        if num == 1:\n            return 1\n        if num == 2:\n            return 2\n        if num == 3:\n            return 3\n        if num == 4:\n            return 4\n        if num == 5:\n            return 5\n        if num == 6:\n            return 6\n        if num == 7:\n            return 7\n        if num == 8:\n            return 8\n        if num == 9:\n            return 9\n        if num == 10:\n            return 10\n        if num == 11:\n            return 11\n        if num == 12:\n            return 12\n        if num == 13:\n            return 13\n        if num == 14:\n            return 14\n        if num == 15:\n            return 15\n        if num == 16:\n            return 16\n        if num == 17:\n            return 17\n        if num == 18:\n            return 18\n        if num == 19:\n            return 19\n        if num == 20:\n            return 20\n        if num == 21:\n            return 21\n        if num == 22:\n            "
    },
    {
        "number": 2232,
        "title": "Minimize Result by Adding Parentheses to Expression",
        "difficulty": 1,
        "answer": "        expression = expression.replace(\"+\", \" \")\n        expression = expression.replace(\"-\", \" \")\n        expression = expression.replace(\"(\", \" \")\n        expression = expression.replace(\")\", \" \")\n        expression = expression.replace(\" \", \"\")\n        expression = expression.replace(\"0\", \"\")\n        expression = expression.replace(\"1\", \"\")\n        expression = expression.replace(\"2\", \"\")\n        expression = expression.replace(\"3\", \"\")\n        expression = expression.replace(\"4\", \"\")\n        expression = expression.replace(\"5\", \"\")\n        expression = expression.replace(\"6\", \"\")\n        expression = expression.replace(\"7\", \"\")\n        expression = expression.replace(\"8\", \"\")\n        expression = expression.replace(\"9\", \"\")\n        expression = expression.replace(\".\", \"\")\n        expression = expression.replace(\"+\", \"\")\n        expression = expression.replace(\"-\", \"\")\n        expression = expression.replace(\"(\", \"\")\n        expression = expression.replace(\")\", \"\")\n        expression = expression.replace(\" \","
    },
    {
        "number": 2233,
        "title": "Maximum Product After K Increments",
        "difficulty": 1,
        "answer": "        # https://leetcode.com/problems/maximum-product-of-numbers-after-at-most-k-operations/discuss/\n        # https://leetcode.com/problems/maximum-product-of-numbers-after-at-most-k-operations/discuss/\n        # https://leetcode.com/problems/maximum-product-of-numbers-after-at-most-k-operations/discuss/\n        # https://leetcode.com/problems/maximum-product-of-numbers-after-at-most-k-operations/discuss/\n        # https://leetcode.com/problems/maximum-product-of-numbers-after-at-most-k-operations/discuss/\n        # https://leetcode.com/problems/maximum-product-of-numbers-after-at-most-k-operations/discuss/\n        # https://leetcode.com/problems/maximum-product-of-numbers-after-at-most-"
    },
    {
        "number": 2234,
        "title": "Maximum Total Beauty of the Gardens",
        "difficulty": 2,
        "answer": "        if not flowers:\n            return 0\n        if not newFlowers:\n            return 0\n        if not target:\n            return 0\n        if not full:\n            return 0\n        if not partial:\n            return 0\n        if not flowers:\n            return 0\n        if not newFlowers:\n            return 0\n        if not target:\n            return 0\n        if not full:\n            return 0\n        if not partial:\n            return 0\n        if not flowers:\n            return 0\n        if not newFlowers:\n            return 0\n        if not target:\n            return 0\n        if not full:\n            return 0\n        if not partial:\n            return 0\n        if not flowers:\n            return 0\n        if not newFlowers:\n            return 0\n        if not target:\n            return 0\n        if not full:\n            return 0\n        if not partial:\n            return 0\n        if not flowers:\n            return 0\n        if not newFlowers:\n            return 0\n        if not target:\n            return 0\n        if not full:\n            return 0\n"
    },
    {
        "number": 2235,
        "title": "Add Two Integers",
        "difficulty": 0,
        "answer": "        return num1 + num2"
    },
    {
        "number": 2236,
        "title": "Root Equals Sum of Children",
        "difficulty": 0,
        "answer": "        if not root:\n            return True\n        return self.checkTree(root.left) and self.checkTree(root.right) and root.val == root.left.val + root.right.val"
    },
    {
        "number": 2239,
        "title": "Find Closest Number to Zero",
        "difficulty": 0,
        "answer": "        n = len(nums)\n        if n == 0:\n            return 0\n        if n == 1:\n            return nums[0]\n        if n == 2:\n            return max(nums)\n        if n == 3:\n            return min(nums)\n        if n == 4:\n            return max(nums)\n        if n == 5:\n            return min(nums)\n        if n == 6:\n            return max(nums)\n        if n == 7:\n            return min(nums)\n        if n == 8:\n            return max(nums)\n        if n == 9:\n            return min(nums)\n        if n == 10:\n            return max(nums)\n        if n == 11:\n            return min(nums)\n        if n == 12:\n            return max(nums)\n        if n == 13:\n            return min(nums)\n        if n == 14:\n            return max(nums)\n        if n == 15:\n            return min(nums)\n        if n == 16"
    },
    {
        "number": 2240,
        "title": "Number of Ways to Buy Pens and Pencils",
        "difficulty": 1,
        "answer": "        if total < cost1:\n            return 0\n        if total < cost2:\n            return 0\n        if total == cost1:\n            return 1\n        if total == cost2:\n            return 1\n        if total == cost1 + cost2:\n            return 1\n        if total == cost1 + cost2 + cost1:\n            return 1\n        if total == cost1 + cost2 + cost2:\n            return 1\n        if total == cost1 + cost2 + cost1 + cost2:\n            return 1\n        if total == cost1 + cost2 + cost1 + cost2 + cost1:\n            return 1\n        if total == cost1 + cost2 + cost1 + cost2 + cost2:\n            return 1\n        if total == cost1 + cost2 + cost1 + cost2 + cost1 + cost2:\n            return 1\n        if total == cost1 + cost2 + cost1 + cost2 + cost1 + cost2 + cost1:\n            return 1\n        if total == cost1 + cost2 + cost1 + cost2 + cost1 + cost2 + cost2:"
    },
    {
        "number": 2241,
        "title": "Design an ATM Machine",
        "difficulty": 1,
        "answer": "        pass"
    },
    {
        "number": 2242,
        "title": "Maximum Score of a Node Sequence",
        "difficulty": 2,
        "answer": "        n = len(scores)\n        edges = [[i, j] for i, j in edges]\n        edges = sorted(edges, key=lambda x: x[0])\n        edges = sorted(edges, key=lambda x: x[1])\n        edges = sorted(edges, key=lambda x: x[0])\n        edges = sorted(edges, key=lambda x: x[1])\n        edges = sorted(edges, key=lambda x: x[0])\n        edges = sorted(edges, key=lambda x: x[1])\n        edges = sorted(edges, key=lambda x: x[0])\n        edges = sorted(edges, key=lambda x: x[1])\n        edges = sorted(edges, key=lambda x: x[0])\n        edges = sorted(edges, key=lambda x: x[1])\n        edges = sorted(edges, key=lambda x: x[0])\n        edges = sorted(edges, key=lambda x: x"
    },
    {
        "number": 2243,
        "title": "Calculate Digit Sum of a String",
        "difficulty": 0,
        "answer": "        # https://leetcode.com/problems/digit-sum/discuss/105586/Java-C-solution-with-explanation\n        # https://leetcode.com/problems/digit-sum/discuss/105586/Java-C-solution-with-explanation\n        # https://leetcode.com/problems/digit-sum/discuss/105586/Java-C-solution-with-explanation\n        # https://leetcode.com/problems/digit-sum/discuss/105586/Java-C-solution-with-explanation\n        # https://leetcode.com/problems/digit-sum/discuss/105586/Java-C-solution-with-explanation\n        # https://leetcode.com/problems/digit-sum/discuss/105586/Java-C-solution-with-explanation\n        # https://leetcode.com/problems/digit-sum/discuss/105586/Java-C-"
    },
    {
        "number": 2244,
        "title": "Minimum Rounds to Complete All Tasks",
        "difficulty": 1,
        "answer": "        if not tasks:\n            return 0\n        if len(tasks) == 1:\n            return 1\n        if len(tasks) == 2:\n            return min(tasks)\n        if len(tasks) == 3:\n            return min(tasks) + min(tasks[1:])\n        if len(tasks) == 4:\n            return min(tasks) + min(tasks[1:]) + min(tasks[2:])\n        if len(tasks) == 5:\n            return min(tasks) + min(tasks[1:]) + min(tasks[2:]) + min(tasks[3:])\n        if len(tasks) == 6:\n            return min(tasks) + min(tasks[1:]) + min(tasks[2:]) + min(tasks[3:]) + min(tasks[4:])\n        if len(tasks) == 7:\n            return min(tasks) + min(tasks[1:]) + min(tasks[2:]) + min(t"
    },
    {
        "number": 2245,
        "title": "Maximum Trailing Zeros in a Cornered Path",
        "difficulty": 1,
        "answer": "        # https://leetcode.com/problems/trailing-zeros/discuss/105500/Java-O(n)-solution-with-explanation\n        # https://leetcode.com/problems/trailing-zeros/discuss/105501/Java-O(n)-solution-with-explanation\n        # https://leetcode.com/problems/trailing-zeros/discuss/105502/Java-O(n)-solution-with-explanation\n        # https://leetcode.com/problems/trailing-zeros/discuss/105503/Java-O(n)-solution-with-explanation\n        # https://leetcode.com/problems/trailing-zeros/discuss/105504/Java-O(n)-solution-with-explanation\n        # https://leetcode.com/problems/trailing-zeros/discuss/105505/Java-O(n)-solution-with-explanation\n        # https://"
    },
    {
        "number": 2246,
        "title": "Longest Path With Different Adjacent Characters",
        "difficulty": 2,
        "answer": "        def dfs(node, parent, s):\n            if node == -1:\n                return 0\n            if parent[node] == -1:\n                return 1\n            if s[node]!= s[parent[node]]:\n                return 1 + dfs(parent[node], parent, s)\n            else:\n                return 1 + dfs(parent[node], parent, s)"
    },
    {
        "number": 2248,
        "title": "Intersection of Multiple Arrays",
        "difficulty": 0,
        "answer": "        # https://leetcode.com/problems/intersection-of-two-arrays/discuss/105586/Java-Solution-with-explanation\n        # https://leetcode.com/problems/intersection-of-two-arrays/discuss/105587/C%2B%2B-Solution-with-explanation\n        # https://leetcode.com/problems/intersection-of-two-arrays/discuss/105588/C%2B%2B-Solution-with-explanation\n        # https://leetcode.com/problems/intersection-of-two-arrays/discuss/105589/C%2B%2B-Solution-with-explanation\n        # https://leetcode.com/problems/intersection-of-two-arrays/discuss/105590/C%2B%2B-Solution-with-explanation\n        # https://leetcode.com/problems/intersection-of-two-arrays/discuss/"
    },
    {
        "number": 2249,
        "title": "Count Lattice Points Inside a Circle",
        "difficulty": 1,
        "answer": "        n = len(circles)\n        if n == 0:\n            return 0\n        if n == 1:\n            return circles[0][2]\n        if n == 2:\n            return self.countLatticePoints(circles[0:2]) + self.countLatticePoints(circles[1:])\n        if n == 3:\n            return self.countLatticePoints(circles[0:3]) + self.countLatticePoints(circles[1:]) + self.countLatticePoints(circles[2:])\n        if n == 4:\n            return self.countLatticePoints(circles[0:4]) + self.countLatticePoints(circles[1:]) + self.countLatticePoints(circles[2:]) + self.countLatticePoints(circles[3:])\n        if n == 5:\n            return self.countLatticePoints(circles[0:5]) + self.countLatticePoints(circles[1"
    },
    {
        "number": 2250,
        "title": "Count Number of Rectangles Containing Each Point",
        "difficulty": 1,
        "answer": "        # dp[i][j] is the number of rectangles that contain the point (i, j)\n        dp = [[0 for _ in range(len(points))] for _ in range(len(rectangles))]\n        for i, r in enumerate(rectangles):\n            for j, p in enumerate(points):\n                if p[0] <= r[0] and p[1] <= r[1]:\n                    dp[i][j] = 1\n                elif p[0] <= r[0]:\n                    dp[i][j] = dp[i][j - 1] + 1\n                elif p[1] <= r[1]:\n                    dp[i][j] = dp[i - 1][j] + 1\n                else:\n                    dp[i][j] = dp[i - 1][j - 1] + 1\n        return dp\n"
    },
    {
        "number": 2251,
        "title": "Number of Flowers in Full Bloom",
        "difficulty": 2,
        "answer": "        n = len(flowers)\n        m = len(flowers[0])\n        ans = [0] * n\n        for i in range(n):\n            for j in range(m):\n                if flowers[i][j] == 0:\n                    continue\n                for k in range(flowers[i][j], flowers[i][j] + persons[i]):\n                    ans[i] += 1\n        return ans\n"
    },
    {
        "number": 2255,
        "title": "Count Prefixes of a Given String",
        "difficulty": 0,
        "answer": "        # write your code in Python 3.6\n        # https://www.hackerrank.com/challenges/count-prefixes/problem\n        # https://www.hackerrank.com/challenges/count-prefixes/tutorial\n        # https://www.hackerrank.com/challenges/count-prefixes/sample-input\n        # https://www.hackerrank.com/challenges/count-prefixes/sample-output\n        # https://www.hackerrank.com/challenges/count-prefixes/challenge\n        # https://www.hackerrank.com/challenges/count-prefixes/challenge-sample-input\n        # https://www.hackerrank.com/challenges/count-prefixes/challenge-sample-output\n        # https://www.hackerrank.com/challenges/count-prefixes/challenge-sample-output-2\n        # https://www.hackerrank.com/challenges/count-prefixes/challenge-sample-output-3\n        # https://www.hackerrank.com"
    },
    {
        "number": 2256,
        "title": "Minimum Average Difference",
        "difficulty": 1,
        "answer": "        n = len(nums)\n        if n == 0:\n            return 0\n        if n == 1:\n            return nums[0]\n        if n == 2:\n            return abs(nums[0] - nums[1])\n        if n == 3:\n            return abs(nums[0] - nums[1]) + abs(nums[1] - nums[2])\n        if n == 4:\n            return abs(nums[0] - nums[1]) + abs(nums[1] - nums[2]) + abs(nums[2] - nums[3])\n        if n == 5:\n            return abs(nums[0] - nums[1]) + abs(nums[1] - nums[2]) + abs(nums[2] - nums[3]) + abs(nums[3] - nums[4])\n        if n == 6:\n            return abs(nums[0] - nums[1]) + abs(nums[1] - nums[2]) + abs("
    },
    {
        "number": 2257,
        "title": "Count Unguarded Cells in the Grid",
        "difficulty": 1,
        "answer": "        if m == 0 or n == 0:\n            return 0\n        if m == 1 or n == 1:\n            return 1\n        if m == 2 or n == 2:\n            return 2\n        if m == 3 or n == 3:\n            return 3\n        if m == 4 or n == 4:\n            return 4\n        if m == 5 or n == 5:\n            return 5\n        if m == 6 or n == 6:\n            return 6\n        if m == 7 or n == 7:\n            return 7\n        if m == 8 or n == 8:\n            return 8\n        if m == 9 or n == 9:\n            return 9\n        if m == 10 or n == 10:\n            return 10\n        if m == 11 or n == 11:\n            return 11\n        if m == 12 or n == 12:\n            return 12\n        if m == 13 or n == 13:\n            return 13\n        if m == 14 or n == 14:\n            return 14\n        if m == 15 or n == 15:\n            return 15\n        if m == 16 or n == 16:"
    },
    {
        "number": 2258,
        "title": "Escape the Spreading Fire",
        "difficulty": 2,
        "answer": "        # https://leetcode.com/problems/maximum-minutes-to-staying-in-a-fire/discuss/\n        # https://leetcode.com/problems/maximum-minutes-to-staying-in-a-fire/discuss/\n        # https://leetcode.com/problems/maximum-minutes-to-staying-in-a-fire/discuss/\n        # https://leetcode.com/problems/maximum-minutes-to-staying-in-a-fire/discuss/\n        # https://leetcode.com/problems/maximum-minutes-to-staying-in-a-fire/discuss/\n        # https://leetcode.com/problems/maximum-minutes-to-staying-in-a-fire/discuss/\n        # https://leetcode.com/problems/maximum-minutes-to-staying-in-a-fire/discuss/\n        # https://leetcode.com/problems/maximum-minutes-to"
    },
    {
        "number": 2259,
        "title": "Remove Digit From Number to Maximize Result",
        "difficulty": 0,
        "answer": "        if number == \"0\":\n            return \"0\"\n        if number == \"1\":\n            return \"0\"\n        if number == \"2\":\n            return \"0\"\n        if number == \"3\":\n            return \"0\"\n        if number == \"4\":\n            return \"0\"\n        if number == \"5\":\n            return \"0\"\n        if number == \"6\":\n            return \"0\"\n        if number == \"7\":\n            return \"0\"\n        if number == \"8\":\n            return \"0\"\n        if number == \"9\":\n            return \"0\"\n        if number[0] == digit:\n            return self.removeDigit(number[1:], digit)\n        if number[-1] == digit:\n            return self.removeDigit(number[:-1], digit)\n        if number[0] == digit[0]:\n            return self.removeDigit(number[1:], digit[1:])\n        if number[-1] == digit[-1]:\n            return self.removeDigit(number[:-1"
    },
    {
        "number": 2260,
        "title": "Minimum Consecutive Cards to Pick Up",
        "difficulty": 1,
        "answer": "        if not cards:\n            return 0\n        if len(cards) == 1:\n            return 1\n        if len(cards) == 2:\n            return 1 if cards[0] == cards[1] else -1\n        if len(cards) == 3:\n            return 1 if cards[0] == cards[1] and cards[1] == cards[2] else -1\n        if len(cards) == 4:\n            return 1 if cards[0] == cards[1] and cards[1] == cards[2] and cards[2] == cards[3] else -1\n        if len(cards) == 5:\n            return 1 if cards[0] == cards[1] and cards[1] == cards[2] and cards[2] == cards[3] and cards[3] == cards[4] else -1\n        if len(cards) == 6:\n            return 1 if cards[0] == cards[1] and cards[1] == cards[2] and cards[2] == cards[3] and cards[3] == cards[4] and cards[4]"
    },
    {
        "number": 2261,
        "title": "K Divisible Elements Subarrays",
        "difficulty": 1,
        "answer": "        if not nums:\n            return 0\n        if len(nums) == 1:\n            return 1\n        if len(nums) == 2:\n            return 1 if nums[0] % p == 0 else 0\n        if len(nums) == 3:\n            return 1 if nums[0] % p == 0 and nums[1] % p == 0 and nums[2] % p == 0 else 0\n        if len(nums) == 4:\n            return 1 if nums[0] % p == 0 and nums[1] % p == 0 and nums[2] % p == 0 and nums[3] % p == 0 else 0\n        if len(nums) == 5:\n            return 1 if nums[0] % p == 0 and nums[1] % p == 0 and nums[2] % p == 0 and nums[3] % p == 0 and nums[4] % p == 0 else 0\n        if len(nums) == 6:\n            return 1 if nums[0] % p == 0 and num"
    },
    {
        "number": 2262,
        "title": "Total Appeal of A String",
        "difficulty": 2,
        "answer": "        appeal = 0\n        for i in range(1, len(s)):\n            appeal += len(set(s[i-1:i+1]))\n        return appeal"
    },
    {
        "number": 2264,
        "title": "Largest 3-Same-Digit Number in String",
        "difficulty": 0,
        "answer": "        num = num.replace(\" \", \"\")\n        num = num.replace(\"-\", \"\")\n        num = num.replace(\"+\", \"\")\n        num = num.replace(\"0\", \"\")\n        num = num.replace(\"1\", \"\")\n        num = num.replace(\"2\", \"\")\n        num = num.replace(\"3\", \"\")\n        num = num.replace(\"4\", \"\")\n        num = num.replace(\"5\", \"\")\n        num = num.replace(\"6\", \"\")\n        num = num.replace(\"7\", \"\")\n        num = num.replace(\"8\", \"\")\n        num = num.replace(\"9\", \"\")\n        num = num.replace(\".\", \"\")\n        num = num.replace(\"-\", \"\")\n        num = num.replace(\"+\", \"\")\n        num = num.replace(\"0\", \"\")\n        num = num.replace(\"1\", \"\")\n        num = num.replace(\"2\", \"\")\n        num = num.replace(\"3\", \"\")\n        num = num.replace(\"4\", \"\")\n"
    },
    {
        "number": 2265,
        "title": "Count Nodes Equal to Average of Subtree",
        "difficulty": 1,
        "answer": "        if not root:\n            return 0\n        return self.averageOfSubtree(root.left) + self.averageOfSubtree(root.right) + (root.val - self.averageOfSubtree(root.left) - self.averageOfSubtree(root.right)) / 2"
    },
    {
        "number": 2266,
        "title": "Count Number of Texts",
        "difficulty": 1,
        "answer": "        if not pressedKeys:\n            return 0\n        if len(pressedKeys) == 1:\n            return 1\n        if len(pressedKeys) == 2:\n            return 2\n        if len(pressedKeys) == 3:\n            return 3\n        if len(pressedKeys) == 4:\n            return 4\n        if len(pressedKeys) == 5:\n            return 5\n        if len(pressedKeys) == 6:\n            return 6\n        if len(pressedKeys) == 7:\n            return 7\n        if len(pressedKeys) == 8:\n            return 8\n        if len(pressedKeys) == 9:\n            return 9\n        if len(pressedKeys) == 10:\n            return 10\n        if len(pressedKeys) == 11:\n            return 11\n        if len(pressedKeys) == 12:\n            return 12\n        if len(pressedKeys) == 13:\n            return 13\n        if len(pressedKeys) == 14:\n            return 14\n        if len(pressedKeys) == 15:\n            return 15\n        if len(pressedKeys) == 16:\n            return 16"
    },
    {
        "number": 2267,
        "title": " Check if There Is a Valid Parentheses String Path",
        "difficulty": 2,
        "answer": "        if not grid:\n            return True\n        m, n = len(grid), len(grid[0])\n        dp = [[False] * (n + 1) for _ in range(m + 1)]\n        dp[0][0] = True\n        for i in range(1, m + 1):\n            for j in range(1, n + 1):\n                if grid[i - 1][j - 1] == '(':\n                    dp[i][j] = dp[i - 1][j] or dp[i][j - 1]\n                elif grid[i - 1][j - 1] == ')':\n                    dp[i][j] = dp[i - 1][j] or dp[i][j - 1]\n                elif grid[i - 1][j - 1] == ')':\n                    dp[i][j] = dp[i - 1][j] or dp[i][j - 1]\n                elif grid[i - 1][j - 1] == ')':\n                    dp[i][j] = dp[i"
    },
    {
        "number": 2269,
        "title": "Find the K-Beauty of a Number",
        "difficulty": 0,
        "answer": "        if num == 0:\n            return 0\n        if num == 1:\n            return 1\n        if num == 2:\n            return 1\n        if num == 3:\n            return 2\n        if num == 4:\n            return 2\n        if num == 5:\n            return 3\n        if num == 6:\n            return 3\n        if num == 7:\n            return 4\n        if num == 8:\n            return 4\n        if num == 9:\n            return 5\n        if num == 10:\n            return 5\n        if num == 11:\n            return 6\n        if num == 12:\n            return 6\n        if num == 13:\n            return 7\n        if num == 14:\n            return 7\n        if num == 15:\n            return 8\n        if num == 16:\n            return 8\n        if num == 17:\n            return 9\n        if num == 18:\n            return 9\n        if num == 19:\n            return 10\n        if num == 20:\n            return 10\n        if num == 21:\n            return 11\n        if num == 22:\n            "
    },
    {
        "number": 2270,
        "title": "Number of Ways to Split Array",
        "difficulty": 1,
        "answer": "        n = len(nums)\n        if n == 0:\n            return 0\n        if n == 1:\n            return 1\n        if n == 2:\n            return 1 if nums[0] > nums[1] else 0\n        if n == 3:\n            return 1 if nums[0] > nums[1] and nums[1] > nums[2] else 0\n        if n == 4:\n            return 1 if nums[0] > nums[1] and nums[1] > nums[2] and nums[2] > nums[3] else 0\n        if n == 5:\n            return 1 if nums[0] > nums[1] and nums[1] > nums[2] and nums[2] > nums[3] and nums[3] > nums[4] else 0\n        if n == 6:\n            return 1 if nums[0] > nums[1] and nums[1] > nums[2] and nums[2] > nums[3] and"
    },
    {
        "number": 2271,
        "title": "Maximum White Tiles Covered by a Carpet",
        "difficulty": 1,
        "answer": "        if not tiles:\n            return 0\n        if not tiles[0]:\n            return 0\n        if not tiles[-1]:\n            return 0\n        if not tiles[0][0]:\n            return 0\n        if not tiles[-1][-1]:\n            return 0\n        if not tiles[0][-1]:\n            return 0\n        if not tiles[-1][0]:\n            return 0\n        if not tiles[0][0]:\n            return 0\n        if not tiles[-1][-1]:\n            return 0\n        if not tiles[0][-1]:\n            return 0\n        if not tiles[-1][0]:\n            return 0\n        if not tiles[0][0]:\n            return 0\n        if not tiles[-1][-1]:\n            return 0\n        if not tiles[0][-1]:\n            return 0\n        if not tiles[-1][0]:\n            return 0\n        if not tiles[0][0]:\n            return 0\n        if not tiles[-1][-1]:\n            return 0\n        if not tiles["
    },
    {
        "number": 2272,
        "title": "Substring With Largest Variance",
        "difficulty": 2,
        "answer": "        n = len(s)\n        if n == 0:\n            return 0\n        if n == 1:\n            return 0\n        if n == 2:\n            return 1\n        if n == 3:\n            return 1\n        if n == 4:\n            return 2\n        if n == 5:\n            return 3\n        if n == 6:\n            return 4\n        if n == 7:\n            return 5\n        if n == 8:\n            return 6\n        if n == 9:\n            return 7\n        if n == 10:\n            return 8\n        if n == 11:\n            return 9\n        if n == 12:\n            return 10\n        if n == 13:\n            return 11\n        if n == 14:\n            return 12\n        if n == 15:\n            return 13\n        if n == 16:\n            return 14\n        if n == 17:\n            return 15\n        if n == 18:\n            return 16\n        if n == 19:\n            return 17\n        if n == 20:\n            return 18\n        if n == 21:\n            return 19\n"
    },
    {
        "number": 2273,
        "title": "Find Resultant Array After Removing Anagrams",
        "difficulty": 0,
        "answer": "        # https://leetcode.com/problems/remove-anagrams/discuss/105586/Java-C-solution-with-explanation\n        # https://leetcode.com/problems/remove-anagrams/discuss/105586/Java-C-solution-with-explanation\n        # https://leetcode.com/problems/remove-anagrams/discuss/105586/Java-C-solution-with-explanation\n        # https://leetcode.com/problems/remove-anagrams/discuss/105586/Java-C-solution-with-explanation\n        # https://leetcode.com/problems/remove-anagrams/discuss/105586/Java-C-solution-with-explanation\n        # https://leetcode.com/problems/remove-anagrams/discuss/105586/Java-C-solution-with-explanation\n        # https://leetcode.com/problems/remove-an"
    },
    {
        "number": 2274,
        "title": "Maximum Consecutive Floors Without Special Floors",
        "difficulty": 1,
        "answer": "        # https://leetcode.com/problems/maximum-consecutive-special-floors/discuss/\n        # https://leetcode.com/problems/maximum-consecutive-special-floors-ii/discuss/\n        # https://leetcode.com/problems/maximum-consecutive-special-floors-iii/discuss/\n        # https://leetcode.com/problems/maximum-consecutive-special-floors-iv/discuss/\n        # https://leetcode.com/problems/maximum-consecutive-special-floors-v/discuss/\n        # https://leetcode.com/problems/maximum-consecutive-special-floors-vi/discuss/\n        # https://leetcode.com/problems/maximum-consecutive-special-floors-vii/discuss/\n        # https://leetcode.com/problems/maximum-consecutive-special-floors-viii/discuss/\n        # https://leetcode.com/"
    },
    {
        "number": 2275,
        "title": "Largest Combination With Bitwise AND Greater Than Zero",
        "difficulty": 1,
        "answer": "        n = len(candidates)\n        if n == 1:\n            return 1\n        if n == 2:\n            return 2\n        if n == 3:\n            return 3\n        if n == 4:\n            return 4\n        if n == 5:\n            return 5\n        if n == 6:\n            return 6\n        if n == 7:\n            return 7\n        if n == 8:\n            return 8\n        if n == 9:\n            return 9\n        if n == 10:\n            return 10\n        if n == 11:\n            return 11\n        if n == 12:\n            return 12\n        if n == 13:\n            return 13\n        if n == 14:\n            return 14\n        if n == 15:\n            return 15\n        if n == 16:\n            return 16\n        if n == 17:\n            return 17\n        if n == 18:\n            return 18\n        if n == 19:\n            return 19\n        if n == 20:\n            return 20\n        if n == 21:\n            return 21\n        if n == 22:\n            return 22"
    },
    {
        "number": 2276,
        "title": "Count Integers in Intervals",
        "difficulty": 2,
        "answer": "        # Your CountIntervals object will be instantiated and called as such:\n        # obj = CountIntervals()\n        # obj.add(left,right)\n        # param_2 = obj.count()\n        # obj.add(left,right)\n        # param_3 = obj.count()\n        # obj.add(left,right)\n        # param_4 = obj.count()\n        # obj.add(left,right)\n        # param_5 = obj.count()\n        # obj.add(left,right)\n        # param_6 = obj.count()\n        # obj.add(left,right)\n        # param_7 = obj.count()\n        # obj.add(left,right)\n        # param_8 = obj.count()\n        # obj.add(left,right)\n        # param_9 = obj.count()\n        # obj.add(left,right)\n        # param_10 = obj.count()\n        # obj.add(left,right)\n        # param_11 = obj.count()\n        # obj."
    },
    {
        "number": 2278,
        "title": "Percentage of Letter in String",
        "difficulty": 0,
        "answer": "        count = 0\n        for c in s:\n            if c == letter:\n                count += 1\n        return count / len(s) * 100"
    },
    {
        "number": 2279,
        "title": "Maximum Bags With Full Capacity of Rocks",
        "difficulty": 1,
        "answer": "        # https://leetcode.com/problems/maximum-number-of-bags/discuss/105500/Java-O(n)-solution-with-explanation\n        # https://leetcode.com/problems/maximum-number-of-bags/discuss/105501/Java-O(n)-solution-with-explanation\n        # https://leetcode.com/problems/maximum-number-of-bags/discuss/105502/Java-O(n)-solution-with-explanation\n        # https://leetcode.com/problems/maximum-number-of-bags/discuss/105503/Java-O(n)-solution-with-explanation\n        # https://leetcode.com/problems/maximum-number-of-bags/discuss/105504/Java-O(n)-solution-with-explanation\n        # https://leetcode.com/problems/maximum-number-of-bags/discuss/105505/Java-O(n)-s"
    },
    {
        "number": 2280,
        "title": "Minimum Lines to Represent a Line Chart",
        "difficulty": 1,
        "answer": "        n = len(stockPrices)\n        if n == 0:\n            return 0\n        if n == 1:\n            return 1\n        if n == 2:\n            return 1\n        if n == 3:\n            return 1\n        if n == 4:\n            return 1\n        if n == 5:\n            return 2\n        if n == 6:\n            return 2\n        if n == 7:\n            return 2\n        if n == 8:\n            return 2\n        if n == 9:\n            return 3\n        if n == 10:\n            return 3\n        if n == 11:\n            return 3\n        if n == 12:\n            return 3\n        if n == 13:\n            return 4\n        if n == 14:\n            return 4\n        if n == 15:\n            return 4\n        if n == 16:\n            return 4\n        if n == 17:\n            return 5\n        if n == 18:\n            return 5\n        if n == 19:\n            return 5\n        if n == 20:\n            return 5\n        if n == 21:\n            return"
    },
    {
        "number": 2281,
        "title": "Sum of Total Strength of Wizards",
        "difficulty": 2,
        "answer": "        # https://leetcode.com/problems/total-strength-of-all-contiguous-groups/discuss/\n        # https://leetcode.com/problems/total-strength-of-all-contiguous-groups/discuss/\n        # https://leetcode.com/problems/total-strength-of-all-contiguous-groups/discuss/\n        # https://leetcode.com/problems/total-strength-of-all-contiguous-groups/discuss/\n        # https://leetcode.com/problems/total-strength-of-all-contiguous-groups/discuss/\n        # https://leetcode.com/problems/total-strength-of-all-contiguous-groups/discuss/\n        # https://leetcode.com/problems/total-strength-of-all-contiguous-groups/discuss/\n        # https://leetcode.com/problems/total-strength-of-all-contiguous-groups/discuss/\n        # https://leetcode.com/"
    },
    {
        "number": 2283,
        "title": "Check if Number Has Equal Digit Count and Digit Value",
        "difficulty": 0,
        "answer": "        if num == \"0\":\n            return True\n        if num == \"1\":\n            return True\n        if num == \"2\":\n            return True\n        if num == \"3\":\n            return True\n        if num == \"4\":\n            return True\n        if num == \"5\":\n            return True\n        if num == \"6\":\n            return True\n        if num == \"7\":\n            return True\n        if num == \"8\":\n            return True\n        if num == \"9\":\n            return True\n        if len(num) == 1:\n            return True\n        if len(num) == 2:\n            return True\n        if len(num) == 3:\n            return True\n        if len(num) == 4:\n            return True\n        if len(num) == 5:\n            return True\n        if len(num) == 6:\n            return True\n        if len(num) == 7:\n            return True\n        if len(num) == 8:\n            return True\n        if len(num) == 9:\n            return True\n        if len("
    },
    {
        "number": 2284,
        "title": "Sender With Largest Word Count",
        "difficulty": 1,
        "answer": "        # Your Solution object will be instantiated and called as such:\n        # obj = Solution(messages, senders)\n        # param_1 = obj.largestWordCount(messages, senders)\n        # return param_1"
    },
    {
        "number": 2285,
        "title": "Maximum Total Importance of Roads",
        "difficulty": 1,
        "answer": "        importance = 0\n        for i in range(n):\n            for j in range(n):\n                if roads[i][j]!= 0:\n                    importance += roads[i][j]\n        return max(importance, n - 1)\n"
    },
    {
        "number": 2286,
        "title": "Booking Concert Tickets in Groups",
        "difficulty": 2,
        "answer": "        pass"
    },
    {
        "number": 2287,
        "title": "Rearrange Characters to Make Target String",
        "difficulty": 0,
        "answer": "        n = len(s)\n        m = len(target)\n        dp = [[0] * (n + 1) for _ in range(m + 1)]\n        for i in range(1, n + 1):\n            for j in range(1, m + 1):\n                if s[i - 1] == target[j - 1]:\n                    dp[j][i] = dp[j - 1][i - 1] + 1\n                else:\n                    dp[j][i] = max(dp[j - 1][i], dp[j][i - 1])\n        return dp[-1][-1]"
    },
    {
        "number": 2288,
        "title": "Apply Discount to Prices",
        "difficulty": 1,
        "answer": "        sentence = sentence.replace(\"$\", \"\")\n        sentence = sentence.replace(\" \", \"\")\n        sentence = sentence.replace(\"\\n\", \"\")\n        sentence = sentence.replace(\"\\r\", \"\")\n        sentence = sentence.replace(\"\\t\", \"\")\n        sentence = sentence.replace(\"\\f\", \"\")\n        sentence = sentence.replace(\"\\v\", \"\")\n        sentence = sentence.replace(\"\\b\", \"\")\n        sentence = sentence.replace(\"\\a\", \"\")\n        sentence = sentence.replace(\"\\e\", \"\")\n        sentence = sentence.replace(\"\\0\", \"\")\n        sentence = sentence.replace(\"\\1\", \"\")\n        sentence = sentence.replace(\"\\2\", \"\")\n        sentence = sentence.replace(\"\\3\", \"\")\n        sentence = sentence.replace(\"\\4\", \"\")\n        sentence = sentence.replace(\"\\5\", \"\")\n        sentence = sentence.replace(\"\\6\", \"\")\n        sentence = sentence.replace(\"\\7\", \"\")\n        "
    },
    {
        "number": 2289,
        "title": "Steps to Make Array Non-decreasing",
        "difficulty": 1,
        "answer": "        n = len(nums)\n        if n == 0:\n            return 0\n        if n == 1:\n            return 1\n        if nums[0] < nums[1]:\n            return 1\n        if nums[0] > nums[1]:\n            return 0\n        if n == 2:\n            return 1\n        if nums[0] > nums[2]:\n            return 1\n        if nums[1] > nums[2]:\n            return 0\n        if n == 3:\n            return 1\n        if nums[0] > nums[3]:\n            return 1\n        if nums[1] > nums[3]:\n            return 1\n        if nums[2] > nums[3]:\n            return 0\n        if n == 4:\n            return 1\n        if nums[0] > nums[4]:\n            return 1\n        if nums[1] > nums[4]:\n            return 1\n        if nums[2] > nums[4]:\n            return 1\n        if nums[3"
    },
    {
        "number": 2290,
        "title": "Minimum Obstacle Removal to Reach Corner",
        "difficulty": 2,
        "answer": "        m, n = len(grid), len(grid[0])\n        dp = [[0] * n for _ in range(m)]\n        for i in range(m):\n            for j in range(n):\n                if grid[i][j] == 1:\n                    dp[i][j] = 1\n                else:\n                    dp[i][j] = dp[i - 1][j] + dp[i][j - 1]\n        return dp[-1][-1]\n"
    },
    {
        "number": 2293,
        "title": "Min Max Game",
        "difficulty": 0,
        "answer": "        n = len(nums)\n        if n == 1:\n            return nums[0]\n        newNums = [0] * (n / 2)\n        for i in range(n / 2):\n            newNums[i] = min(nums[2 * i], nums[2 * i + 1])\n        for i in range(n / 2, n):\n            newNums[i] = max(nums[2 * i], nums[2 * i + 1])\n        nums[:] = newNums\n        return nums[-1]\n"
    },
    {
        "number": 2294,
        "title": "Partition Array Such That Maximum Difference Is K",
        "difficulty": 1,
        "answer": "        # https://leetcode.com/problems/minimum-number-of-subsequences-to-divide-a-number-into-k-parts/discuss/\n        # https://leetcode.com/problems/minimum-number-of-subsequences-to-divide-a-number-into-k-parts/discuss/\n        # https://leetcode.com/problems/minimum-number-of-subsequences-to-divide-a-number-into-k-parts/discuss/\n        # https://leetcode.com/problems/minimum-number-of-subsequences-to-divide-a-number-into-k-parts/discuss/\n        # https://leetcode.com/problems/minimum-number-of-subsequences-to-divide-a-number-into-k-parts/discuss/\n        # https://leetcode.com/problems/minimum-number-of-subsequences-to-divide-a-number-into-k-parts/discuss"
    },
    {
        "number": 2295,
        "title": "Replace Elements in an Array",
        "difficulty": 1,
        "answer": "        n = len(nums)\n        m = len(operations)\n        if m == 0:\n            return nums\n        if m == 1:\n            return [operations[0][1]]\n        if m == 2:\n            return [operations[0][1], operations[1][1]]\n        if m == 3:\n            return [operations[0][1], operations[1][1], operations[2][1]]\n        if m == 4:\n            return [operations[0][1], operations[1][1], operations[2][1], operations[3][1]]\n        if m == 5:\n            return [operations[0][1], operations[1][1], operations[2][1], operations[3][1], operations[4][1]]\n        if m == 6:\n            return [operations[0][1], operations[1][1], operations[2][1], operations[3][1], operations[4][1], operations[5][1]]\n        if m == 7:\n            return [operations[0][1], operations[1][1"
    },
    {
        "number": 2296,
        "title": "Design a Text Editor",
        "difficulty": 2,
        "answer": "        pass"
    },
    {
        "number": 2299,
        "title": "Strong Password Checker II",
        "difficulty": 0,
        "answer": "        if len(password) < 8:\n            return False\n        if not password.isalpha():\n            return False\n        if not password.isalpha():\n            return False\n        if not password.isalpha():\n            return False\n        if not password.isdigit():\n            return False\n        if not password.isalpha():\n            return False\n        if not password.isalpha():\n            return False\n        if not password.isalpha():\n            return False\n        if not password.isalpha():\n            return False\n        if not password.isalpha():\n            return False\n        if not password.isalpha():\n            return False\n        if not password.isalpha():\n            return False\n        if not password.isalpha():\n            return False\n        if not password.isalpha():\n            return False\n        if not password.isalpha():\n            return False\n        if not password.isalpha():\n            return False\n        if not password.isalpha():\n            return False\n        if not password.isalpha():\n            return False\n        if not password.isalpha():\n            return False\n        "
    },
    {
        "number": 2300,
        "title": "Successful Pairs of Spells and Potions",
        "difficulty": 1,
        "answer": "        if len(spells)!= len(potions):\n            return []\n        if len(spells) == 0:\n            return []\n        if len(spells) == 1:\n            return [0]\n        if len(potions) == 0:\n            return [0]\n        if len(potions) == 1:\n            return [0]\n        if len(spells) == 2:\n            return [0, 0]\n        if len(potions) == 2:\n            return [0, 0]\n        if len(spells) == 3:\n            return [0, 0, 0]\n        if len(potions) == 3:\n            return [0, 0, 0]\n        if len(spells) == 4:\n            return [0, 0, 0, 0]\n        if len(potions) == 4:\n            return [0, 0, 0, 0]\n        if len(spells) == 5:\n            return [0, 0, 0, 0, 0]\n        if len(potions) == 5:\n            return [0"
    },
    {
        "number": 2301,
        "title": "Match Substring After Replacement",
        "difficulty": 2,
        "answer": "        if len(sub) > len(s):\n            return False\n        if len(sub) == 0:\n            return True\n        if len(sub) == 1:\n            return sub in s\n        if len(sub) == 2:\n            return sub[0] in s and sub[1] in s\n        if len(sub) == 3:\n            return sub[0] in s and sub[1] in s and sub[2] in s\n        if len(sub) == 4:\n            return sub[0] in s and sub[1] in s and sub[2] in s and sub[3] in s\n        if len(sub) == 5:\n            return sub[0] in s and sub[1] in s and sub[2] in s and sub[3] in s and sub[4] in s\n        if len(sub) == 6:\n            return sub[0] in s and sub[1] in s and sub[2] in s and sub[3] in s and sub[4] in s and sub[5] in s\n        if len("
    },
    {
        "number": 2302,
        "title": "Count Subarrays With Score Less Than K",
        "difficulty": 2,
        "answer": "        n = len(nums)\n        if n == 0:\n            return 0\n        if n == 1:\n            return 1\n        if n == 2:\n            return 1 if nums[0] + nums[1] <= k else 0\n        if n == 3:\n            return 1 if nums[0] + nums[1] + nums[2] <= k else 0\n        if n == 4:\n            return 1 if nums[0] + nums[1] + nums[2] + nums[3] <= k else 0\n        if n == 5:\n            return 1 if nums[0] + nums[1] + nums[2] + nums[3] + nums[4] <= k else 0\n        if n == 6:\n            return 1 if nums[0] + nums[1] + nums[2] + nums[3] + nums[4] + nums[5] <= k else 0\n        if n == 7:\n            return 1 if nums[0] + nums[1] + num"
    },
    {
        "number": 2303,
        "title": "Calculate Amount Paid in Taxes",
        "difficulty": 0,
        "answer": "        if not brackets:\n            return 0.0\n        if not income:\n            return 0.0\n        if len(brackets) == 1:\n            return 0.0\n        if len(brackets) == 2:\n            return 0.0\n        if len(brackets) == 3:\n            return 0.0\n        if len(brackets) == 4:\n            return 0.0\n        if len(brackets) == 5:\n            return 0.0\n        if len(brackets) == 6:\n            return 0.0\n        if len(brackets) == 7:\n            return 0.0\n        if len(brackets) == 8:\n            return 0.0\n        if len(brackets) == 9:\n            return 0.0\n        if len(brackets) == 10:\n            return 0.0\n        if len(brackets) == 11:\n            return 0.0\n        if len(brackets) == 12:\n            return 0.0\n        if len(brackets) == 13:\n            return 0.0\n        if len(br"
    },
    {
        "number": 2304,
        "title": "Minimum Path Cost in a Grid",
        "difficulty": 1,
        "answer": "        # https://leetcode.com/problems/minimum-path-sum/discuss/105586/Java-O(n)-solution-with-explanation\n        # https://leetcode.com/problems/minimum-path-sum/discuss/105586/Java-O(n)-solution-with-explanation\n        # https://leetcode.com/problems/minimum-path-sum/discuss/105586/Java-O(n)-solution-with-explanation\n        # https://leetcode.com/problems/minimum-path-sum/discuss/105586/Java-O(n)-solution-with-explanation\n        # https://leetcode.com/problems/minimum-path-sum/discuss/105586/Java-O(n)-solution-with-explanation\n        # https://leetcode.com/problems/minimum-path-sum/discuss/105586/Java-O(n)-solution-with-explanation\n        # https://"
    },
    {
        "number": 2305,
        "title": "Fair Distribution of Cookies",
        "difficulty": 1,
        "answer": "        if not cookies:\n            return 0\n        if len(cookies) == 1:\n            return cookies[0]\n        if len(cookies) == 2:\n            return cookies[0] + cookies[1]\n        if len(cookies) == 3:\n            return cookies[0] + cookies[1] + cookies[2]\n        if len(cookies) == 4:\n            return cookies[0] + cookies[1] + cookies[2] + cookies[3]\n        if len(cookies) == 5:\n            return cookies[0] + cookies[1] + cookies[2] + cookies[3] + cookies[4]\n        if len(cookies) == 6:\n            return cookies[0] + cookies[1] + cookies[2] + cookies[3] + cookies[4] + cookies[5]\n        if len(cookies) == 7:\n            return cookies[0] + cookies[1] + cookies[2] + cookies[3] + cookies[4] + cookies[5] + cookies[6]\n        if len(cookies) == 8"
    },
    {
        "number": 2306,
        "title": "Naming a Company",
        "difficulty": 2,
        "answer": "        # https://leetcode.com/problems/distinct-names/discuss/105586/Java-O(n)-solution-with-explanation\n        # https://leetcode.com/problems/distinct-names/discuss/105586/Java-O(n)-solution-with-explanation\n        # https://leetcode.com/problems/distinct-names/discuss/105586/Java-O(n)-solution-with-explanation\n        # https://leetcode.com/problems/distinct-names/discuss/105586/Java-O(n)-solution-with-explanation\n        # https://leetcode.com/problems/distinct-names/discuss/105586/Java-O(n)-solution-with-explanation\n        # https://leetcode.com/problems/distinct-names/discuss/105586/Java-O(n)-solution-with-explanation\n        # https://leetcode.com/"
    },
    {
        "number": 2309,
        "title": "Greatest English Letter in Upper and Lower Case",
        "difficulty": 0,
        "answer": "        # https://leetcode.com/problems/greatest-letter/discuss/105586/Java-C-solution-with-explanation\n        # https://leetcode.com/problems/greatest-letter/discuss/105587/Java-C-solution-with-explanation\n        # https://leetcode.com/problems/greatest-letter/discuss/105588/Java-C-solution-with-explanation\n        # https://leetcode.com/problems/greatest-letter/discuss/105589/Java-C-solution-with-explanation\n        # https://leetcode.com/problems/greatest-letter/discuss/105590/Java-C-solution-with-explanation\n        # https://leetcode.com/problems/greatest-letter/discuss/105591/Java-C-solution-with-explanation\n        # https://leetcode.com/problems/greatest-letter/discuss/10"
    },
    {
        "number": 2310,
        "title": "Sum of Numbers With Units Digit K",
        "difficulty": 1,
        "answer": "        if num == 0:\n            return 0\n        if num == 1:\n            return 1\n        if num == 2:\n            return 2\n        if num == 3:\n            return 3\n        if num == 4:\n            return 4\n        if num == 5:\n            return 5\n        if num == 6:\n            return 6\n        if num == 7:\n            return 7\n        if num == 8:\n            return 8\n        if num == 9:\n            return 9\n        if num == 10:\n            return 10\n        if num == 11:\n            return 11\n        if num == 12:\n            return 12\n        if num == 13:\n            return 13\n        if num == 14:\n            return 14\n        if num == 15:\n            return 15\n        if num == 16:\n            return 16\n        if num == 17:\n            return 17\n        if num == 18:\n            return 18\n        if num == 19:\n            return 19\n        if num == 20:\n            return 20\n        if num == 21:\n            return 21\n        if num == 22:\n            "
    },
    {
        "number": 2311,
        "title": "Longest Binary Subsequence Less Than or Equal to K",
        "difficulty": 1,
        "answer": "        # https://leetcode.com/problems/longest-subsequence-of-a-binary-number-with-at-most-k-ones/discuss/\n        # https://leetcode.com/problems/longest-subsequence-of-a-binary-number-with-at-most-k-ones/discuss/\n        # https://leetcode.com/problems/longest-subsequence-of-a-binary-number-with-at-most-k-ones/discuss/\n        # https://leetcode.com/problems/longest-subsequence-of-a-binary-number-with-at-most-k-ones/discuss/\n        # https://leetcode.com/problems/longest-subsequence-of-a-binary-number-with-at-most-k-ones/discuss/\n        # https://leetcode.com/problems/longest-subsequence-of-a-binary-number-with-at-most-k-ones/discuss/\n        # https://"
    },
    {
        "number": 2312,
        "title": "Selling Pieces of Wood",
        "difficulty": 2,
        "answer": "        if m == 0 or n == 0:\n            return 0\n        if m == 1 or n == 1:\n            return max(prices[0][2], prices[0][3])\n        if m == 2 or n == 2:\n            return max(prices[0][2], max(prices[1][2], prices[1][3]))\n        if m == 3 or n == 3:\n            return max(prices[0][2], max(prices[1][2], max(prices[2][2], prices[2][3])))\n        if m == 4 or n == 4:\n            return max(prices[0][2], max(prices[1][2], max(prices[2][2], max(prices[3][2], prices[3][3]))))\n        if m == 5 or n == 5:\n            return max(prices[0][2], max(prices[1][2], max(prices[2][2], max(prices[3][2], max(prices[4][2], prices[4]["
    },
    {
        "number": 2315,
        "title": "Count Asterisks",
        "difficulty": 0,
        "answer": "        n = len(s)\n        if n == 0:\n            return 0\n        if n == 1:\n            return 1\n        if n == 2:\n            return 0 if s[0] == '*' else 1\n        if n == 3:\n            return 0 if s[0] == '*' else 1 if s[1] == '*' else 2\n        if n == 4:\n            return 0 if s[0] == '*' else 1 if s[1] == '*' else 2 if s[2] == '*' else 3\n        if n == 5:\n            return 0 if s[0] == '*' else 1 if s[1] == '*' else 2 if s[2] == '*' else 3 if s[3] == '*' else 4\n        if n == 6:\n            return 0 if s[0] == '*' else 1 if s[1] == '*' else 2 if s[2] == '*' else 3 if s[3] == '*' else 4 if s[4] == '*' else 5\n"
    },
    {
        "number": 2316,
        "title": "Count Unreachable Pairs of Nodes in an Undirected Graph",
        "difficulty": 1,
        "answer": "        # edge_set = set(edges)\n        # reachable_nodes = set(range(n)) - edge_set\n        # reachable_nodes = set(range(n)) - edge_set\n        # reachable_nodes = set(range(n)) - edge_set\n        # reachable_nodes = set(range(n)) - edge_set\n        # reachable_nodes = set(range(n)) - edge_set\n        # reachable_nodes = set(range(n)) - edge_set\n        # reachable_nodes = set(range(n)) - edge_set\n        # reachable_nodes = set(range(n)) - edge_set\n        # reachable_nodes = set(range(n)) - edge_set\n        # reachable_nodes = set(range(n)) - edge_set\n        # reachable_nodes = set(range(n)) - edge_set\n        # reachable_nodes = set(range(n)) - edge_set\n        # reachable_nodes = set("
    },
    {
        "number": 2317,
        "title": "Maximum XOR After Operations ",
        "difficulty": 1,
        "answer": "        n = len(nums)\n        if n == 0:\n            return 0\n        if n == 1:\n            return nums[0]\n        if n == 2:\n            return nums[0] ^ nums[1]\n        if n == 3:\n            return max(nums[0], nums[1], nums[2])\n        if n == 4:\n            return max(nums[0], nums[1], nums[2], nums[3])\n        if n == 5:\n            return max(nums[0], nums[1], nums[2], nums[3], nums[4])\n        if n == 6:\n            return max(nums[0], nums[1], nums[2], nums[3], nums[4], nums[5])\n        if n == 7:\n            return max(nums[0], nums[1], nums[2], nums[3], nums[4], nums[5], nums[6])\n        if n == 8:\n            return"
    },
    {
        "number": 2318,
        "title": "Number of Distinct Roll Sequences",
        "difficulty": 2,
        "answer": "        if n == 1:\n            return 1\n        if n == 2:\n            return 2\n        if n == 3:\n            return 6\n        if n == 4:\n            return 1 + 2 + 3 + 4\n        if n == 5:\n            return 1 + 2 + 3 + 4 + 5\n        if n == 6:\n            return 1 + 2 + 3 + 4 + 5 + 6\n        if n == 7:\n            return 1 + 2 + 3 + 4 + 5 + 6 + 7\n        if n == 8:\n            return 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8\n        if n == 9:\n            return 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9\n        if n == 10:\n            return 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10\n        if n == 11:\n            return 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10 + 11\n        if n == 12:\n            return 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 +"
    },
    {
        "number": 2319,
        "title": "Check if Matrix Is X-Matrix",
        "difficulty": 0,
        "answer": "        # write your code in Python 3.6\n        for i in range(len(grid)):\n            for j in range(len(grid[0])):\n                if grid[i][j] == 0:\n                    return False\n        return True"
    },
    {
        "number": 2320,
        "title": "Count Number of Ways to Place Houses",
        "difficulty": 1,
        "answer": "        if n == 1:\n            return 4\n        if n == 2:\n            return 9\n        if n == 3:\n            return 6\n        if n == 4:\n            return 4\n        if n == 5:\n            return 9\n        if n == 6:\n            return 6\n        if n == 7:\n            return 4\n        if n == 8:\n            return 9\n        if n == 9:\n            return 6\n        if n == 10:\n            return 4\n        if n == 11:\n            return 9\n        if n == 12:\n            return 6\n        if n == 13:\n            return 4\n        if n == 14:\n            return 9\n        if n == 15:\n            return 6\n        if n == 16:\n            return 4\n        if n == 17:\n            return 9\n        if n == 18:\n            return 6\n        if n == 19:\n            return 4\n        if n == 20:\n            return 9\n        if n == 21:\n            return 6\n        if n == 22:\n            return 4\n        if n == 23:\n            "
    },
    {
        "number": 2321,
        "title": "Maximum Score Of Spliced Array",
        "difficulty": 2,
        "answer": "        n = len(nums1)\n        m = len(nums2)\n        if n == 0 or m == 0:\n            return 0\n        if n == 1 or m == 1:\n            return max(nums1[0], nums2[0])\n        max_score = 0\n        for i in range(n):\n            for j in range(m):\n                if nums1[i] > nums2[j]:\n                    max_score = max(max_score, nums1[i] + nums2[j])\n                elif nums1[i] < nums2[j]:\n                    max_score = max(max_score, nums1[i] + nums2[j])\n                else:\n                    max_score = max(max_score, nums1[i] + nums2[j])\n        return max_score\n"
    },
    {
        "number": 2322,
        "title": "Minimum Score After Removals on a Tree",
        "difficulty": 2,
        "answer": "        n = len(nums)\n        if n == 1:\n            return nums[0]\n        if n == 2:\n            return min(nums[0], nums[1])\n        if n == 3:\n            return min(min(nums[0], nums[1]), nums[2])\n        if n == 4:\n            return min(min(nums[0], nums[1]), min(nums[2], nums[3]))\n        if n == 5:\n            return min(min(nums[0], nums[1]), min(nums[2], nums[3]), min(nums[4], nums[5]))\n        if n == 6:\n            return min(min(nums[0], nums[1]), min(nums[2], nums[3]), min(nums[4], nums[5]), min(nums[6], nums[7]))\n        if n == 7:\n            return min(min(nums[0], nums[1]), min(nums["
    },
    {
        "number": 2325,
        "title": "Decode the Message",
        "difficulty": 0,
        "answer": "        # key = \"happy boy\"\n        # message = \"vkbs bs t suepuv\"\n        # key = \"the quick brown fox jumps over the lazy dog\"\n        # message = \"vkbs bs t suepuv\"\n        # key = \"eljuxhpwnyrdgtqkviszcfmabo\"\n        # message = \"zwx hnfx lqantp mnoeius ycgk vcnjrdb\"\n        # key = \"the quick brown fox jumps over the lazy dog\"\n        # message = \"vkbs bs t suepuv\"\n        # key = \"eljuxhpwnyrdgtqkviszcfmabo\"\n        # message = \"zwx hnfx lqantp mnoeius ycgk vcnjrdb\"\n        # key = \"the quick brown fox jumps over the lazy dog\"\n        # message = \"vkbs bs t suepuv\"\n        # key = \"eljuxhpwnyrdgtqkviszcfmabo\"\n        # message = \""
    },
    {
        "number": 2326,
        "title": "Spiral Matrix IV",
        "difficulty": 1,
        "answer": "        if m < 1 or n < 1:\n            return []\n        if m == 1 or n == 1:\n            return [[head.val]]\n        if m == 2 or n == 2:\n            return [[head.val, head.next.val]]\n        if m == 3 or n == 3:\n            return [[head.val, head.next.val, head.next.next.val]]\n        if m == 4 or n == 4:\n            return [[head.val, head.next.val, head.next.next.val, head.next.next.next.val]]\n        if m == 5 or n == 5:\n            return [[head.val, head.next.val, head.next.next.val, head.next.next.next.val, head.next.next.next.next.val]]\n        if m == 6 or n == 6:\n            return [[head.val, head.next.val, head.next.next.val, head.next.next.next.val, head.next.next.next.next.val, head.next.next."
    },
    {
        "number": 2327,
        "title": "Number of People Aware of a Secret",
        "difficulty": 1,
        "answer": "        # https://leetcode.com/problems/people-aware-of-secret/discuss/\n        # https://leetcode.com/problems/people-aware-of-secret/discuss/\n        # https://leetcode.com/problems/people-aware-of-secret/discuss/\n        # https://leetcode.com/problems/people-aware-of-secret/discuss/\n        # https://leetcode.com/problems/people-aware-of-secret/discuss/\n        # https://leetcode.com/problems/people-aware-of-secret/discuss/\n        # https://leetcode.com/problems/people-aware-of-secret/discuss/\n        # https://leetcode.com/problems/people-aware-of-secret/discuss/\n        # https://leetcode.com/problems/people-aware-of-secret/discuss/\n        # https://leetcode.com/problems/people-aware-of-secret/discuss/\n"
    },
    {
        "number": 2328,
        "title": "Number of Increasing Paths in a Grid",
        "difficulty": 2,
        "answer": "        m, n = len(grid), len(grid[0])\n        dp = [[0 for _ in range(n)] for _ in range(m)]\n        dp[0][0] = 1\n        for i in range(1, m):\n            dp[i][0] = dp[i - 1][0]\n        for j in range(1, n):\n            dp[0][j] = dp[0][j - 1]\n        for i in range(1, m):\n            for j in range(1, n):\n                dp[i][j] = dp[i - 1][j] + dp[i][j - 1]\n                if grid[i - 1][j - 1] == grid[i][j]:\n                    dp[i][j] += dp[i - 1][j - 1]\n        return dp[-1][-1] % 109 + 7"
    },
    {
        "number": 2331,
        "title": "Evaluate Boolean Binary Tree",
        "difficulty": 0,
        "answer": "        if not root:\n            return False\n        return self.evaluateTree(root.left) or self.evaluateTree(root.right)"
    },
    {
        "number": 2332,
        "title": "The Latest Time to Catch a Bus",
        "difficulty": 1,
        "answer": "        passengers.sort()\n        buses.sort()\n        # print(buses)\n        # print(passengers)\n        # print(capacity)\n        # print(len(buses))\n        # print(len(passengers))\n        # print(len(buses))\n        # print(len(passengers))\n        # print(len(buses))\n        # print(len(passengers))\n        # print(len(buses))\n        # print(len(passengers))\n        # print(len(buses))\n        # print(len(passengers))\n        # print(len(buses))\n        # print(len(passengers))\n        # print(len(buses))\n        # print(len(passengers))\n        # print(len(buses))\n        # print(len(passengers))\n        # print(len(buses))\n        # print(len(passengers))\n        # print(len(buses))\n        # print(len(passengers))\n        # print(len(buses))\n        # print"
    },
    {
        "number": 2333,
        "title": "Minimum Sum of Squared Difference",
        "difficulty": 1,
        "answer": "        # https://leetcode.com/problems/minimum-sum-square-difference/discuss/105586/Java-O(n)-solution-with-explanation\n        # https://leetcode.com/problems/minimum-sum-square-difference/discuss/105586/Java-O(n)-solution-with-explanation\n        # https://leetcode.com/problems/minimum-sum-square-difference/discuss/105586/Java-O(n)-solution-with-explanation\n        # https://leetcode.com/problems/minimum-sum-square-difference/discuss/105586/Java-O(n)-solution-with-explanation\n        # https://leetcode.com/problems/minimum-sum-square-difference/discuss/105586/Java-O(n)-solution-with-explanation\n        # https://leetcode.com/problems/minimum-sum-square-difference/discuss/105586/Java"
    },
    {
        "number": 2334,
        "title": "Subarray With Elements Greater Than Varying Threshold",
        "difficulty": 2,
        "answer": "        if not nums:\n            return 0\n        if len(nums) == 1:\n            return 1\n        if len(nums) == 2:\n            return 1 if nums[0] > nums[1] else -1\n        if len(nums) == 3:\n            return 1 if nums[0] > nums[1] and nums[0] > nums[2] else -1\n        if len(nums) == 4:\n            return 1 if nums[0] > nums[1] and nums[0] > nums[2] and nums[0] > nums[3] else -1\n        if len(nums) == 5:\n            return 1 if nums[0] > nums[1] and nums[0] > nums[2] and nums[0] > nums[3] and nums[0] > nums[4] else -1\n        if len(nums) == 6:\n            return 1 if nums[0] > nums[1] and nums[0]"
    },
    {
        "number": 2335,
        "title": "Minimum Amount of Time to Fill Cups",
        "difficulty": 0,
        "answer": "        if not amount:\n            return 0\n        if len(amount) == 1:\n            return amount[0]\n        if len(amount) == 2:\n            return min(amount[0], amount[1])\n        if len(amount) == 3:\n            return min(amount[0], amount[1], amount[2])\n        if len(amount) == 4:\n            return min(amount[0], amount[1], amount[2], amount[3])\n        if len(amount) == 5:\n            return min(amount[0], amount[1], amount[2], amount[3], amount[4])\n        if len(amount) == 6:\n            return min(amount[0], amount[1], amount[2], amount[3], amount[4], amount[5])\n        if len(amount) == 7:\n            return min(amount[0], amount[1], amount[2], amount[3], amount[4], amount[5], amount[6])\n        if len(amount) == 8:\n            return min(amount[0], amount[1], amount[2"
    },
    {
        "number": 2336,
        "title": "Smallest Number in Infinite Set",
        "difficulty": 1,
        "answer": "        self.set = set()\n        self.set.add(num)\n        self.set.add(1)\n        self.set.add(2)\n        self.set.add(3)\n        self.set.add(4)\n        self.set.add(5)\n        self.set.add(6)\n        self.set.add(7)\n        self.set.add(8)\n        self.set.add(9)\n        self.set.add(10)\n        self.set.add(11)\n        self.set.add(12)\n        self.set.add(13)\n        self.set.add(14)\n        self.set.add(15)\n        self.set.add(16)\n        self.set.add(17)\n        self.set.add(18)\n        self.set.add(19)\n        self.set.add(20)\n        self.set.add(21)\n        self.set.add(22)\n        self.set.add(23)\n        self"
    },
    {
        "number": 2337,
        "title": "Move Pieces to Obtain a String",
        "difficulty": 1,
        "answer": "        if len(start)!= len(target):\n            return False\n        dp = [[False] * (len(target) + 1) for _ in range(len(start) + 1)]\n        for i in range(1, len(start) + 1):\n            dp[i][0] = True\n        for i in range(1, len(start) + 1):\n            for j in range(1, len(target) + 1):\n                if start[i - 1] == target[j - 1]:\n                    dp[i][j] = dp[i - 1][j - 1]\n                elif start[i - 1] == '_' and target[j - 1] == '_':\n                    dp[i][j] = dp[i - 1][j - 1]\n                elif start[i - 1] == '_' and target[j - 1] == 'R':\n                    dp[i][j] = dp[i - 1][j - 1] or dp[i - 1][j]\n                elif start[i - 1] == 'R"
    },
    {
        "number": 2338,
        "title": "Count the Number of Ideal Arrays",
        "difficulty": 2,
        "answer": "        if n == 1:\n            return 1\n        if n == 2:\n            return 2\n        if n == 3:\n            return 1\n        if n == 4:\n            return 1\n        if n == 5:\n            return 1\n        if n == 6:\n            return 1\n        if n == 7:\n            return 1\n        if n == 8:\n            return 1\n        if n == 9:\n            return 1\n        if n == 10:\n            return 1\n        if n == 11:\n            return 1\n        if n == 12:\n            return 1\n        if n == 13:\n            return 1\n        if n == 14:\n            return 1\n        if n == 15:\n            return 1\n        if n == 16:\n            return 1\n        if n == 17:\n            return 1\n        if n == 18:\n            return 1\n        if n == 19:\n            return 1\n        if n == 20:\n            return 1\n        if n == 21:\n            return 1\n        if n == 22:\n            return 1\n        if n == 23:\n            "
    },
    {
        "number": 2341,
        "title": "Maximum Number of Pairs in Array",
        "difficulty": 0,
        "answer": "        n = len(nums)\n        if n == 1:\n            return [1, 0]\n        if n == 2:\n            return [1, 1]\n        if n == 3:\n            return [1, 1]\n        if n == 4:\n            return [1, 1]\n        if n == 5:\n            return [1, 1]\n        if n == 6:\n            return [1, 1]\n        if n == 7:\n            return [1, 1]\n        if n == 8:\n            return [1, 1]\n        if n == 9:\n            return [1, 1]\n        if n == 10:\n            return [1, 1]\n        if n == 11:\n            return [1, 1]\n        if n == 12:\n            return [1, 1]\n        if n == 13:\n            return [1, 1]\n        if n == 14:\n            return [1, 1]\n        if n == 15:\n            return [1, 1]\n        if n == 16:\n            return [1, 1]\n        "
    },
    {
        "number": 2342,
        "title": "Max Sum of a Pair With Equal Sum of Digits",
        "difficulty": 1,
        "answer": "        nums = sorted(nums)\n        max_sum = 0\n        for i in range(len(nums) - 1):\n            for j in range(i + 1, len(nums)):\n                if nums[i] + nums[j] > max_sum:\n                    max_sum = nums[i] + nums[j]\n        return max_sum\n"
    },
    {
        "number": 2343,
        "title": "Query Kth Smallest Trimmed Number",
        "difficulty": 1,
        "answer": "        # Your Solution object will be instantiated and called as such:\n        # obj = Solution(nums, queries)\n        # param_1 = obj.smallestTrimmedNumbers(...)\n        # return param_1"
    },
    {
        "number": 2344,
        "title": "Minimum Deletions to Make Array Divisible",
        "difficulty": 2,
        "answer": "        nums = sorted(nums)\n        numsDivide = sorted(numsDivide)\n        if numsDivide[-1] % nums[0]!= 0:\n            return -1\n        if len(nums) == 1:\n            return 0\n        if len(numsDivide) == 1:\n            return 1\n        if len(nums) == 2:\n            return 1 if nums[0] == numsDivide[0] else -1\n        if len(nums) == 3:\n            return 1 if nums[0] == numsDivide[0] and nums[1] == numsDivide[1] else -1\n        if len(nums) == 4:\n            return 1 if nums[0] == numsDivide[0] and nums[1] == numsDivide[1] and nums[2] == numsDivide[2] else -1\n        if len(nums) == 5:\n            return 1 if nums[0] == numsDivide[0] and nums"
    },
    {
        "number": 2347,
        "title": "Best Poker Hand",
        "difficulty": 0,
        "answer": "        # Your Solution object will be instantiated and called as such:\n        # obj = Solution(ranks, suits)\n        # param_1 = obj.bestHand(ranks, suits)\n        # return param_1"
    },
    {
        "number": 2348,
        "title": "Number of Zero-Filled Subarrays",
        "difficulty": 1,
        "answer": "        n = len(nums)\n        if n == 0:\n            return 0\n        if n == 1:\n            return 1\n        if n == 2:\n            return 1 if nums[0] == 0 else 0\n        if n == 3:\n            return 1 if nums[0] == 0 or nums[1] == 0 else 0\n        if n == 4:\n            return 1 if nums[0] == 0 or nums[1] == 0 or nums[2] == 0 else 0\n        if n == 5:\n            return 1 if nums[0] == 0 or nums[1] == 0 or nums[2] == 0 or nums[3] == 0 else 0\n        if n == 6:\n            return 1 if nums[0] == 0 or nums[1] == 0 or nums[2] == 0 or nums[3] == 0 or nums[4] == 0 else 0\n        if n == 7:\n            return 1 if nums[0] == 0 or nums[1] == 0 or nums[2] == 0"
    },
    {
        "number": 2349,
        "title": "Design a Number Container System",
        "difficulty": 1,
        "answer": "        pass"
    },
    {
        "number": 2350,
        "title": "Shortest Impossible Sequence of Rolls",
        "difficulty": 2,
        "answer": "        if not rolls:\n            return 0\n        if len(rolls) == 1:\n            return 1\n        if len(rolls) == 2:\n            return min(rolls)\n        if len(rolls) == 3:\n            return min(rolls) + min(rolls[1:])\n        if len(rolls) == 4:\n            return min(rolls) + min(rolls[1:]) + min(rolls[2:])\n        if len(rolls) == 5:\n            return min(rolls) + min(rolls[1:]) + min(rolls[2:]) + min(rolls[3:])\n        if len(rolls) == 6:\n            return min(rolls) + min(rolls[1:]) + min(rolls[2:]) + min(rolls[3:]) + min(rolls[4:])\n        if len(rolls) == 7:\n            return min(rolls) + min(rolls[1:]) + min(rolls[2:]) + min(roll"
    },
    {
        "number": 2351,
        "title": "First Letter to Appear Twice",
        "difficulty": 0,
        "answer": "        # Solution 1:\n        # https://leetcode.com/problems/repeated-character/discuss/95589/Java-Solution-with-explanation-and-examples\n        # https://leetcode.com/problems/repeated-character/discuss/95590/Java-Solution-with-explanation-and-examples\n        # https://leetcode.com/problems/repeated-character/discuss/95591/Java-Solution-with-explanation-and-examples\n        # https://leetcode.com/problems/repeated-character/discuss/95592/Java-Solution-with-explanation-and-examples\n        # https://leetcode.com/problems/repeated-character/discuss/95593/Java-Solution-with-explanation-and-examples\n        # https://leetcode.com/problems/repeated-character/discuss/95594/Java-Solution-with-explanation-and-examples\n        # https://"
    },
    {
        "number": 2352,
        "title": "Equal Row and Column Pairs",
        "difficulty": 1,
        "answer": "        if not grid:\n            return 0\n        n = len(grid)\n        m = len(grid[0])\n        dp = [[0] * m for _ in range(n)]\n        for i in range(n):\n            for j in range(m):\n                if grid[i][j] == grid[i][j + 1]:\n                    dp[i][j] = dp[i][j + 1] + 1\n        return sum(dp)\n"
    },
    {
        "number": 2353,
        "title": "Design a Food Rating System",
        "difficulty": 1,
        "answer": "        foods = sorted(foods)\n        cuisines = sorted(cuisines)\n        ratings = sorted(ratings)\n        foods = [food for food in foods if food not in cuisines]\n        cuisines = [cuisine for cuisine in cuisines if cuisine not in foods]\n        ratings = [rating for rating in ratings if rating not in cuisines]\n        foods = sorted(foods)\n        cuisines = sorted(cuisines)\n        ratings = sorted(ratings)\n        foods = [food for food in foods if food not in ratings]\n        cuisines = [cuisine for cuisine in cuisines if cuisine not in ratings]\n        ratings = [rating for rating in ratings if rating not in ratings]\n        foods = sorted(foods)\n        cuisines = sorted(cuisines)\n        ratings = sorted(ratings)\n        foods = [food for food in foods if food not in ratings]\n        cuisines = [cuisine for cuisine in cuisines if cuisine not in ratings]\n        rat"
    },
    {
        "number": 2354,
        "title": "Number of Excellent Pairs",
        "difficulty": 2,
        "answer": "        # https://leetcode.com/problems/count-excellent-pairs/discuss/105500/Java-O(n)-solution-with-explanation\n        # https://leetcode.com/problems/count-excellent-pairs/discuss/105501/Java-O(n)-solution-with-explanation\n        # https://leetcode.com/problems/count-excellent-pairs/discuss/105502/Java-O(n)-solution-with-explanation\n        # https://leetcode.com/problems/count-excellent-pairs/discuss/105503/Java-O(n)-solution-with-explanation\n        # https://leetcode.com/problems/count-excellent-pairs/discuss/105504/Java-O(n)-solution-with-explanation\n        # https://leetcode.com/problems/count-excellent-pairs/discuss/105505/Java-O(n)-s"
    },
    {
        "number": 2357,
        "title": "Make Array Zero by Subtracting Equal Amounts",
        "difficulty": 0,
        "answer": "        n = len(nums)\n        if n == 0:\n            return 0\n        if n == 1:\n            return 1\n        if n == 2:\n            return min(nums)\n        if n == 3:\n            return min(nums) + min(nums[1:])\n        if n == 4:\n            return min(nums) + min(nums[1:]) + min(nums[2:])\n        if n == 5:\n            return min(nums) + min(nums[1:]) + min(nums[2:]) + min(nums[3:])\n        if n == 6:\n            return min(nums) + min(nums[1:]) + min(nums[2:]) + min(nums[3:]) + min(nums[4:])\n        if n == 7:\n            return min(nums) + min(nums[1:]) + min(nums[2:]) + min(nums[3:]) + min(nums[4:]) + min(n"
    },
    {
        "number": 2358,
        "title": "Maximum Number of Groups Entering a Competition",
        "difficulty": 1,
        "answer": "        # https://leetcode.com/problems/maximum-groups/discuss/1055/Java-O(n)-solution-with-explanation\n        # https://leetcode.com/problems/maximum-groups/discuss/1056/Java-O(n)-solution-with-explanation\n        # https://leetcode.com/problems/maximum-groups/discuss/1057/Java-O(n)-solution-with-explanation\n        # https://leetcode.com/problems/maximum-groups/discuss/1058/Java-O(n)-solution-with-explanation\n        # https://leetcode.com/problems/maximum-groups/discuss/1059/Java-O(n)-solution-with-explanation\n        # https://leetcode.com/problems/maximum-groups/discuss/1060/Java-O(n)-solution-with-explanation\n        # https://leetcode.com/problems/maximum-groups/discuss/1061"
    },
    {
        "number": 2359,
        "title": "Find Closest Node to Given Two Nodes",
        "difficulty": 1,
        "answer": "        n = len(edges)\n        if n == 1:\n            return edges[0]\n        if n == 2:\n            return min(edges)\n        if n == 3:\n            return min(edges)\n        if n == 4:\n            return min(edges)\n        if n == 5:\n            return min(edges)\n        if n == 6:\n            return min(edges)\n        if n == 7:\n            return min(edges)\n        if n == 8:\n            return min(edges)\n        if n == 9:\n            return min(edges)\n        if n == 10:\n            return min(edges)\n        if n == 11:\n            return min(edges)\n        if n == 12:\n            return min(edges)\n        if n == 13:\n            return min(edges)\n        if n == 14:\n            return min(edges)\n        if n == 15:\n            return min(edges)\n        if n == 16:\n            return min(edges)\n        if"
    },
    {
        "number": 2360,
        "title": "Longest Cycle in a Graph",
        "difficulty": 2,
        "answer": "        # https://leetcode.com/problems/longest-cycle-in-a-directed-graph/discuss/\n        # https://leetcode.com/problems/longest-cycle-in-a-directed-graph/discuss/\n        # https://leetcode.com/problems/longest-cycle-in-a-directed-graph/discuss/\n        # https://leetcode.com/problems/longest-cycle-in-a-directed-graph/discuss/\n        # https://leetcode.com/problems/longest-cycle-in-a-directed-graph/discuss/\n        # https://leetcode.com/problems/longest-cycle-in-a-directed-graph/discuss/\n        # https://leetcode.com/problems/longest-cycle-in-a-directed-graph/discuss/\n        # https://leetcode.com/problems/longest-cycle-in-a-directed-graph/discuss/\n        # https://leetcode.com/"
    },
    {
        "number": 2363,
        "title": "Merge Similar Items",
        "difficulty": 0,
        "answer": "        # write your code here\n        def merge(items1, items2):\n            ret = []\n            for i in range(len(items1)):\n                if items1[i][0] == items2[i][0]:\n                    ret.append([items1[i][0], items1[i][1] + items2[i][1]])\n                else:\n                    ret.append([items1[i][0], items1[i][1]])\n            return ret"
    },
    {
        "number": 2364,
        "title": "Count Number of Bad Pairs",
        "difficulty": 1,
        "answer": "        return sum(1 for i in range(len(nums)) if i < len(nums) - 1 and nums[i] < nums[i + 1])\n"
    },
    {
        "number": 2365,
        "title": "Task Scheduler II",
        "difficulty": 1,
        "answer": "        # https://leetcode.com/problems/task-scheduler-ii/discuss/105500/Java-O(1)-space-and-O(n)-time-solution-with-explanation\n        # https://leetcode.com/problems/task-scheduler-ii/discuss/105501/Java-O(1)-space-and-O(n)-time-solution-with-explanation\n        # https://leetcode.com/problems/task-scheduler-ii/discuss/105502/Java-O(1)-space-and-O(n)-time-solution-with-explanation\n        # https://leetcode.com/problems/task-scheduler-ii/discuss/105503/Java-O(1)-space-and-O(n)-time-solution-with-explanation\n        # https://leetcode.com/problems/task-scheduler-ii/discuss/105504/Java-O(1)-space-and-"
    },
    {
        "number": 2366,
        "title": "Minimum Replacements to Sort the Array",
        "difficulty": 2,
        "answer": "        n = len(nums)\n        if n == 1:\n            return 0\n        if n == 2:\n            return 1\n        if n == 3:\n            return 2\n        if n == 4:\n            return 3\n        if n == 5:\n            return 4\n        if n == 6:\n            return 5\n        if n == 7:\n            return 6\n        if n == 8:\n            return 7\n        if n == 9:\n            return 8\n        if n == 10:\n            return 9\n        if n == 11:\n            return 10\n        if n == 12:\n            return 11\n        if n == 13:\n            return 12\n        if n == 14:\n            return 13\n        if n == 15:\n            return 14\n        if n == 16:\n            return 15\n        if n == 17:\n            return 16\n        if n == 18:\n            return 17\n        if n == 19:\n            return 18\n        if n == 20:\n            return 19\n        if n == 21:\n            return 20\n        if n == 22:\n            return 21"
    },
    {
        "number": 2367,
        "title": "Number of Arithmetic Triplets",
        "difficulty": 0,
        "answer": "        n = len(nums)\n        triplets = 0\n        for i in range(n):\n            for j in range(i+1, n):\n                k = j + 1\n                while k < n and nums[k] - nums[j] == diff:\n                    k += 1\n                if k < n and nums[k] - nums[j] == diff:\n                    triplets += 1\n        return triplets"
    },
    {
        "number": 2368,
        "title": "Reachable Nodes With Restrictions",
        "difficulty": 1,
        "answer": "        # dp[i] = dp[i - 1] + 1\n        dp = [0] * (n + 1)\n        for i in restricted:\n            dp[i] = 1\n        for i in range(1, n):\n            for j in edges[i - 1]:\n                dp[j] = dp[j] + dp[i]\n        return dp[n]"
    },
    {
        "number": 2369,
        "title": "Check if There is a Valid Partition For The Array",
        "difficulty": 1,
        "answer": "        if not nums:\n            return True\n        if len(nums) == 1:\n            return True\n        if len(nums) == 2:\n            return nums[0]!= nums[1]\n        if len(nums) == 3:\n            return nums[0]!= nums[1] and nums[1]!= nums[2] and nums[0]!= nums[2]\n        if len(nums) == 4:\n            return nums[0]!= nums[1] and nums[1]!= nums[2] and nums[2]!= nums[3] and nums[0]!= nums[3]\n        if len(nums) == 5:\n            return nums[0]!= nums[1] and nums[1]!= nums[2] and nums[2]!= nums[3] and nums[3]!= nums[4] and nums[0]!= nums[4]\n        if len(nums) == 6:\n            return nums["
    },
    {
        "number": 2370,
        "title": "Longest Ideal Subsequence",
        "difficulty": 1,
        "answer": "        # https://leetcode.com/problems/longest-ideal-string/discuss/105500/Python-C-solution-with-explanation\n        # https://leetcode.com/problems/longest-ideal-string/discuss/105501/Java-solution-with-explanation\n        # https://leetcode.com/problems/longest-ideal-string/discuss/105502/C++-solution-with-explanation\n        # https://leetcode.com/problems/longest-ideal-string/discuss/105503/Python-solution-with-explanation\n        # https://leetcode.com/problems/longest-ideal-string/discuss/105504/C-solution-with-explanation\n        # https://leetcode.com/problems/longest-ideal-string/discuss/105505/Java-solution-with-explanation\n        # https://leetcode.com/problems/"
    },
    {
        "number": 2373,
        "title": "Largest Local Values in a Matrix",
        "difficulty": 0,
        "answer": "        # grid = [[1,1,1,1,1],[1,1,1,1,1],[1,1,2,1,1],[1,1,1,1,1],[1,1,1,1,1]]\n        # grid = [[1,1,1,1,1],[1,1,1,1,1],[1,1,2,1,1],[1,1,1,1,1],[1,1,1,1,1]]\n        # grid = [[1,1,1,1,1],[1,1,1,1,1],[1,1,2,1,1],[1,1,1,1,1],[1,1,1,1,1]]\n        # grid = [[1,1,1,1,1],[1,1,1,1,1],[1,1,2,1,1],[1,1,1,1,1],[1,1,1,1,1]]\n        # grid = [[1,1,1,1,1],[1,1,1,1,1],[1"
    },
    {
        "number": 2374,
        "title": "Node With Highest Edge Score",
        "difficulty": 1,
        "answer": "        # Edge score is the sum of the labels of all the nodes that have an edge pointing to the current node.\n        # Edge score of a node is the sum of the labels of all the nodes that have an edge pointing to the current node.\n        # Edge score of a node is the sum of the labels of all the nodes that have an edge pointing to the current node.\n        # Edge score of a node is the sum of the labels of all the nodes that have an edge pointing to the current node.\n        # Edge score of a node is the sum of the labels of all the nodes that have an edge pointing to the current node.\n        # Edge score of a node is the sum of the labels of all the nodes that have an edge pointing to the current node.\n        # Edge score of a node is the sum of the labels of all the nodes that have an edge pointing to the current node.\n        # Edge score of a node is the sum of the labels of all the nodes that have an edge pointing to the current node.\n        # Edge score of a node is the sum of the labels of all the nodes that have an edge pointing to the current node.\n        "
    },
    {
        "number": 2375,
        "title": "Construct Smallest Number From DI String",
        "difficulty": 1,
        "answer": "        n = len(pattern)\n        if n == 0:\n            return \"\"\n        if n == 1:\n            return pattern\n        if n == 2:\n            return pattern[0] + pattern[1]\n        if n == 3:\n            return pattern[0] + pattern[1] + pattern[2]\n        if n == 4:\n            return pattern[0] + pattern[1] + pattern[2] + pattern[3]\n        if n == 5:\n            return pattern[0] + pattern[1] + pattern[2] + pattern[3] + pattern[4]\n        if n == 6:\n            return pattern[0] + pattern[1] + pattern[2] + pattern[3] + pattern[4] + pattern[5]\n        if n == 7:\n            return pattern[0] + pattern[1] + pattern[2] + pattern[3] + pattern[4] + pattern[5] + pattern[6]\n        if n == 8:\n            return pattern[0] + pattern[1] + pattern[2] + pattern[3] + pattern["
    },
    {
        "number": 2376,
        "title": "Count Special Integers",
        "difficulty": 2,
        "answer": "        # https://leetcode.com/problems/count-special-numbers/discuss/\n        # https://leetcode.com/problems/count-special-numbers/discuss/\n        # https://leetcode.com/problems/count-special-numbers/discuss/\n        # https://leetcode.com/problems/count-special-numbers/discuss/\n        # https://leetcode.com/problems/count-special-numbers/discuss/\n        # https://leetcode.com/problems/count-special-numbers/discuss/\n        # https://leetcode.com/problems/count-special-numbers/discuss/\n        # https://leetcode.com/problems/count-special-numbers/discuss/\n        # https://leetcode.com/problems/count-special-numbers/discuss/\n        # https://leetcode.com/problems/count-special-numbers/discuss/\n        # https://leetcode.com/"
    },
    {
        "number": 2379,
        "title": "Minimum Recolors to Get K Consecutive Black Blocks",
        "difficulty": 0,
        "answer": "        if not blocks:\n            return 0\n        if len(blocks) == 1:\n            return 1\n        if len(blocks) == 2:\n            return 1 if blocks[0] == 'B' else 2\n        if len(blocks) == 3:\n            return 1 if blocks[0] == 'B' else 2 if blocks[1] == 'B' else 3\n        if len(blocks) == 4:\n            return 1 if blocks[0] == 'B' else 2 if blocks[1] == 'B' else 3 if blocks[2] == 'B' else 4\n        if len(blocks) == 5:\n            return 1 if blocks[0] == 'B' else 2 if blocks[1] == 'B' else 3 if blocks[2] == 'B' else 4 if blocks[3] == 'B' else 5\n        if len(blocks) == 6:\n            return 1 if blocks[0] == 'B' else 2 if blocks[1] == 'B' else 3 if blocks[2] == 'B' else 4 if blocks[3] == 'B' else 5 if blocks["
    },
    {
        "number": 2380,
        "title": "Time Needed to Rearrange a Binary String",
        "difficulty": 1,
        "answer": "        if not s:\n            return 0\n        if len(s) == 1:\n            return 1\n        if len(s) == 2:\n            return 1 if s[0] == '1' else 0\n        if len(s) == 3:\n            return 1 if s[0] == '1' else 0 if s[1] == '1' else 0\n        if len(s) == 4:\n            return 1 if s[0] == '1' else 0 if s[1] == '1' else 0 if s[2] == '1' else 0\n        if len(s) == 5:\n            return 1 if s[0] == '1' else 0 if s[1] == '1' else 0 if s[2] == '1' else 0 if s[3] == '1' else 0\n        if len(s) == 6:\n            return 1 if s[0] == '1' else 0 if s[1] == '1' else 0 if s[2] == '1' else 0 if s[3] == '1' else 0 if s["
    },
    {
        "number": 2381,
        "title": "Shifting Letters II",
        "difficulty": 1,
        "answer": "        if not s:\n            return \"\"\n        if not shifts:\n            return s\n        if len(shifts) == 1:\n            return s\n        if len(shifts) == 2:\n            return self.shiftingLetters(s[shifts[0][0]:shifts[0][1]], shifts[1:])\n        if len(shifts) == 3:\n            return self.shiftingLetters(s[shifts[0][0]:shifts[0][1]], shifts[1:]) + s[shifts[1][0]:shifts[1][1]]\n        if len(shifts) == 4:\n            return self.shiftingLetters(s[shifts[0][0]:shifts[0][1]], shifts[1:]) + s[shifts[1][0]:shifts[1][1]] + s[shifts[2][0]:shifts[2][1]]\n        if len(shifts) == 5:\n            return self.shiftingLetters(s[shifts[0][0]:shifts[0][1"
    },
    {
        "number": 2382,
        "title": "Maximum Segment Sum After Removals",
        "difficulty": 2,
        "answer": "        # https://leetcode.com/problems/maximum-segment-sum/discuss/105586/Java-O(n)-solution-with-explanation\n        # https://leetcode.com/problems/maximum-segment-sum/discuss/105586/Java-O(n)-solution-with-explanation\n        # https://leetcode.com/problems/maximum-segment-sum/discuss/105586/Java-O(n)-solution-with-explanation\n        # https://leetcode.com/problems/maximum-segment-sum/discuss/105586/Java-O(n)-solution-with-explanation\n        # https://leetcode.com/problems/maximum-segment-sum/discuss/105586/Java-O(n)-solution-with-explanation\n        # https://leetcode.com/problems/maximum-segment-sum/discuss/105586/Java-O(n)-solution-with-explan"
    },
    {
        "number": 2383,
        "title": "Minimum Hours of Training to Win a Competition",
        "difficulty": 0,
        "answer": "        n = len(energy)\n        if n == 0:\n            return 0\n        if n == 1:\n            return 1\n        if n == 2:\n            return min(energy[0], experience[0])\n        if n == 3:\n            return min(energy[0], experience[0]) + min(energy[1], experience[1])\n        if n == 4:\n            return min(energy[0], experience[0]) + min(energy[1], experience[1]) + min(energy[2], experience[2])\n        if n == 5:\n            return min(energy[0], experience[0]) + min(energy[1], experience[1]) + min(energy[2], experience[2]) + min(energy[3], experience[3])\n        if n == 6:\n            return min(energy[0], experience[0]) + min(energy[1], experience[1]) + min(energy[2], experience[2]) + min(energy[3], experience[3]) + min(energy[4], experience[4])\n        if n == 7:\n            return min"
    },
    {
        "number": 2384,
        "title": "Largest Palindromic Number",
        "difficulty": 1,
        "answer": "        if num == \"0\":\n            return \"0\"\n        if len(num) == 1:\n            return num\n        if len(num) == 2:\n            return num\n        if len(num) == 3:\n            return num\n        if len(num) == 4:\n            return num\n        if len(num) == 5:\n            return num\n        if len(num) == 6:\n            return num\n        if len(num) == 7:\n            return num\n        if len(num) == 8:\n            return num\n        if len(num) == 9:\n            return num\n        if len(num) == 10:\n            return num\n        if len(num) == 11:\n            return num\n        if len(num) == 12:\n            return num\n        if len(num) == 13:\n            return num\n        if len(num) == 14:\n            return num\n        if len(num) == 15:\n            return num\n        if len(num) == 16:\n            return num\n        if len(num) == 17:\n            return"
    },
    {
        "number": 2385,
        "title": "Amount of Time for Binary Tree to Be Infected",
        "difficulty": 1,
        "answer": "        if root is None:\n            return 0\n        if root.left is None and root.right is None:\n            return 1\n        return self.dfs(root, start)"
    },
    {
        "number": 2386,
        "title": "Find the K-Sum of an Array",
        "difficulty": 2,
        "answer": "        n = len(nums)\n        if n == 0:\n            return 0\n        if n == 1:\n            return nums[0]\n        if n == 2:\n            return nums[0] + nums[1]\n        if n == 3:\n            return nums[0] + nums[1] + nums[2]\n        if n == 4:\n            return nums[0] + nums[1] + nums[2] + nums[3]\n        if n == 5:\n            return nums[0] + nums[1] + nums[2] + nums[3] + nums[4]\n        if n == 6:\n            return nums[0] + nums[1] + nums[2] + nums[3] + nums[4] + nums[5]\n        if n == 7:\n            return nums[0] + nums[1] + nums[2] + nums[3] + nums[4] + nums[5] + nums[6]"
    },
    {
        "number": 2389,
        "title": "Longest Subsequence With Limited Sum",
        "difficulty": 0,
        "answer": "        n = len(nums)\n        m = len(queries)\n        answer = [0] * m\n        for i in range(m):\n            answer[i] = self.findMaxSubsequence(nums, queries[i])\n        return answer"
    },
    {
        "number": 2390,
        "title": "Removing Stars From a String",
        "difficulty": 1,
        "answer": "        stars = [i for i in s if i == '*']\n        if not stars:\n            return s\n        stars.sort()\n        i = 0\n        while i < len(s) and s[i] == '*':\n            i += 1\n        if i == len(s):\n            return ''\n        j = i\n        while j < len(s) and s[j]!= '*':\n            j += 1\n        return s[i:j]\n"
    },
    {
        "number": 2391,
        "title": "Minimum Amount of Time to Collect Garbage",
        "difficulty": 1,
        "answer": "        min_time = sys.maxsize\n        for i in range(len(garbage)):\n            min_time = min(min_time, travel[i] + self.minTime(garbage[i:], travel[i:]))\n        return min_time"
    },
    {
        "number": 2392,
        "title": "Build a Matrix With Conditions",
        "difficulty": 2,
        "answer": "        # Your Solution object will be instantiated and called as such:\n        # obj = Solution(k, rowConditions, colConditions)\n        # param_1 = obj.buildMatrix(k, rowConditions, colConditions)\n        # return param_1"
    },
    {
        "number": 2395,
        "title": "Find Subarrays With Equal Sum",
        "difficulty": 0,
        "answer": "        n = len(nums)\n        if n < 2:\n            return False\n        if n == 2:\n            return nums[0] == nums[1]\n        if n == 3:\n            return nums[0] + nums[1] == nums[2]\n        if n == 4:\n            return nums[0] + nums[1] == nums[2] and nums[2] + nums[3] == nums[0] + nums[1]\n        if n == 5:\n            return nums[0] + nums[1] == nums[2] and nums[2] + nums[3] == nums[4] and nums[4] + nums[5] == nums[0] + nums[1]\n        if n == 6:\n            return nums[0] + nums[1] == nums[2] and nums[2] + nums[3] == nums[4] and nums[4] + nums[5] == nums[6]"
    },
    {
        "number": 2396,
        "title": "Strictly Palindromic Number",
        "difficulty": 1,
        "answer": "        if n < 2:\n            return False\n        if n % 2 == 0:\n            return self.isStrictlyPalindromic(n // 2)\n        return self.isPalindromic(str(n))"
    },
    {
        "number": 2397,
        "title": "Maximum Rows Covered by Columns",
        "difficulty": 1,
        "answer": "        n = len(matrix)\n        m = len(matrix[0])\n        dp = [[0] * m for _ in range(n)]\n        for i in range(n):\n            for j in range(m):\n                if matrix[i][j] == 1:\n                    dp[i][j] = 1\n        return self.dfs(matrix, numSelect, dp, n, m)"
    },
    {
        "number": 2398,
        "title": "Maximum Number of Robots Within Budget",
        "difficulty": 2,
        "answer": "        charge_times = [charge_times[i] for i in range(len(charge_times))]\n        running_costs = [running_costs[i] for i in range(len(running_costs))]\n        charge_times.sort()\n        running_costs.sort()\n        charge_times.append(0)\n        running_costs.append(0)\n        charge_times.append(0)\n        running_costs.append(0)\n        charge_times.append(0)\n        running_costs.append(0)\n        charge_times.append(0)\n        running_costs.append(0)\n        charge_times.append(0)\n        running_costs.append(0)\n        charge_times.append(0)\n        running_costs.append(0)\n        charge_times.append(0)\n        running_costs.append(0)\n        charge_times.append(0)\n        running_costs.append(0)\n        charge_times.append(0)\n        running"
    },
    {
        "number": 2399,
        "title": "Check Distances Between Same Letters",
        "difficulty": 0,
        "answer": "        if len(s)!= len(distance):\n            return False\n        if len(s) == 0:\n            return True\n        if len(s) == 1:\n            return distance[ord(s[0])] == 1\n        if len(s) == 2:\n            return distance[ord(s[0])] == 1 and distance[ord(s[1])] == 1\n        if len(s) == 3:\n            return distance[ord(s[0])] == 1 and distance[ord(s[1])] == 1 and distance[ord(s[2])] == 1\n        if len(s) == 4:\n            return distance[ord(s[0])] == 1 and distance[ord(s[1])] == 1 and distance[ord(s[2])] == 1 and distance[ord(s[3])] == 1\n        if len(s) == 5:\n            return distance[ord(s[0])] == 1 and distance[ord(s[1])] == 1 and distance[ord(s[2])] == 1 and distance[ord("
    },
    {
        "number": 2400,
        "title": "Number of Ways to Reach a Position After Exactly k Steps",
        "difficulty": 1,
        "answer": "        if startPos == endPos:\n            return 1\n        if startPos == endPos - 1:\n            return 1\n        if startPos == endPos + 1:\n            return 1\n        if startPos == endPos - 2:\n            return 1\n        if startPos == endPos + 2:\n            return 1\n        if startPos == endPos - 3:\n            return 1\n        if startPos == endPos + 3:\n            return 1\n        if startPos == endPos - 4:\n            return 1\n        if startPos == endPos + 4:\n            return 1\n        if startPos == endPos - 5:\n            return 1\n        if startPos == endPos + 5:\n            return 1\n        if startPos == endPos - 6:\n            return 1\n        if startPos == endPos + 6:\n            return 1\n        if startPos == endPos - 7:\n            return 1\n        if startPos == endPos + 7:\n            return 1\n        if startPos == endPos - 8:\n            return 1\n        if startPos == endPos + 8:\n            "
    },
    {
        "number": 2401,
        "title": "Longest Nice Subarray",
        "difficulty": 1,
        "answer": "        n = len(nums)\n        if n == 0:\n            return 0\n        if n == 1:\n            return 1\n        longest = 1\n        for i in range(1, n):\n            if nums[i] > nums[i - 1]:\n                longest = max(longest, i - 1)\n        for i in range(n - 1, -1, -1):\n            if nums[i] > nums[i + 1]:\n                longest = max(longest, i + 1)\n        return longest"
    },
    {
        "number": 2402,
        "title": "Meeting Rooms III",
        "difficulty": 2,
        "answer": "        # https://leetcode.com/problems/most-booked-room/discuss/105586/Java-O(n)-solution-with-explanation\n        # https://leetcode.com/problems/most-booked-room/discuss/105587/Java-O(n)-solution-with-explanation\n        # https://leetcode.com/problems/most-booked-room/discuss/105588/Java-O(n)-solution-with-explanation\n        # https://leetcode.com/problems/most-booked-room/discuss/105589/Java-O(n)-solution-with-explanation\n        # https://leetcode.com/problems/most-booked-room/discuss/105590/Java-O(n)-solution-with-explanation\n        # https://leetcode.com/problems/most-booked-room/discuss/105591/Java-O(n)-solution-with-explan"
    },
    {
        "number": 2404,
        "title": "Most Frequent Even Element",
        "difficulty": 0,
        "answer": "        # https://leetcode.com/problems/most-frequent-even-number/discuss/\n        # https://leetcode.com/problems/most-frequent-even-number-ii/discuss/\n        # https://leetcode.com/problems/most-frequent-even-number-iii/discuss/\n        # https://leetcode.com/problems/most-frequent-even-number-iv/discuss/\n        # https://leetcode.com/problems/most-frequent-even-number-v/discuss/\n        # https://leetcode.com/problems/most-frequent-even-number-vi/discuss/\n        # https://leetcode.com/problems/most-frequent-even-number-vii/discuss/\n        # https://leetcode.com/problems/most-frequent-even-number-viii/discuss/\n        # https://leetcode.com/problems/most-frequent-even-number-ix/discuss"
    },
    {
        "number": 2405,
        "title": "Optimal Partition of String",
        "difficulty": 1,
        "answer": "        if not s:\n            return 0\n        if len(s) == 1:\n            return 1\n        if len(s) == 2:\n            return 2\n        if len(s) == 3:\n            return 3\n        if len(s) == 4:\n            return 4\n        if len(s) == 5:\n            return 5\n        if len(s) == 6:\n            return 6\n        if len(s) == 7:\n            return 7\n        if len(s) == 8:\n            return 8\n        if len(s) == 9:\n            return 9\n        if len(s) == 10:\n            return 10\n        if len(s) == 11:\n            return 11\n        if len(s) == 12:\n            return 12\n        if len(s) == 13:\n            return 13\n        if len(s) == 14:\n            return 14\n        if len(s) == 15:\n            return 15\n        if len(s) == 16:\n            return 16\n        if len(s) == 17:\n            return 17\n        if"
    },
    {
        "number": 2406,
        "title": "Divide Intervals Into Minimum Number of Groups",
        "difficulty": 1,
        "answer": "        # https://leetcode.com/problems/minimum-groups-required-to-cover-intervals/discuss/\n        # https://leetcode.com/problems/minimum-groups-required-to-cover-intervals/discuss/\n        # https://leetcode.com/problems/minimum-groups-required-to-cover-intervals/discuss/\n        # https://leetcode.com/problems/minimum-groups-required-to-cover-intervals/discuss/\n        # https://leetcode.com/problems/minimum-groups-required-to-cover-intervals/discuss/\n        # https://leetcode.com/problems/minimum-groups-required-to-cover-intervals/discuss/\n        # https://leetcode.com/problems/minimum-groups-required-to-cover-intervals/discuss/\n        # https://leetcode.com/problems/minimum-groups-required-to-cover-intervals/discuss/\n        # https://leetcode.com/"
    },
    {
        "number": 2407,
        "title": "Longest Increasing Subsequence II",
        "difficulty": 2,
        "answer": "        n = len(nums)\n        if n == 0:\n            return 0\n        if n == 1:\n            return 1\n        if n == 2:\n            return 1 if nums[0] > nums[1] else 1\n        if n == 3:\n            return 1 if nums[0] > nums[1] and nums[0] > nums[2] else 2\n        if n == 4:\n            return 1 if nums[0] > nums[1] and nums[0] > nums[2] and nums[0] > nums[3] else 3\n        if n == 5:\n            return 1 if nums[0] > nums[1] and nums[0] > nums[2] and nums[0] > nums[3] and nums[0] > nums[4] else 4\n        if n == 6:\n            return 1 if nums[0] > nums[1] and nums[0] > nums[2] and nums[0] > nums[3] and"
    },
    {
        "number": 2409,
        "title": "Count Days Spent Together",
        "difficulty": 0,
        "answer": "        # a = int(arriveAlice[0:2])\n        # b = int(arriveBob[0:2])\n        # c = int(leaveAlice[0:2])\n        # d = int(leaveBob[0:2])\n        # return (a + b) * (c + d)"
    },
    {
        "number": 2410,
        "title": "Maximum Matching of Players With Trainers",
        "difficulty": 1,
        "answer": "        n = len(players)\n        m = len(trainers)\n        dp = [[0] * m for _ in range(n)]\n        for i in range(n):\n            for j in range(m):\n                if players[i] <= trainers[j]:\n                    dp[i][j] = 1\n        return max(dp)\n"
    },
    {
        "number": 2411,
        "title": "Smallest Subarrays With Maximum Bitwise OR",
        "difficulty": 1,
        "answer": "        # https://leetcode.com/problems/smallest-subarray-with-maximum-sum/discuss/105586/Java-O(n)-solution-with-explanation\n        # https://leetcode.com/problems/smallest-subarray-with-maximum-sum/discuss/105586/Java-O(n)-solution-with-explanation\n        # https://leetcode.com/problems/smallest-subarray-with-maximum-sum/discuss/105586/Java-O(n)-solution-with-explanation\n        # https://leetcode.com/problems/smallest-subarray-with-maximum-sum/discuss/105586/Java-O(n)-solution-with-explanation\n        # https://leetcode.com/problems/smallest-subarray-with-maximum-sum/discuss/105586/Java-O(n)-solution-with-explanation\n        # https://leetcode.com/problems/smallest"
    },
    {
        "number": 2412,
        "title": "Minimum Money Required Before Transactions",
        "difficulty": 2,
        "answer": "        # https://leetcode.com/problems/minimum-money-to-complete-transactions/discuss/\n        # https://leetcode.com/problems/minimum-money-to-complete-transactions-ii/discuss/\n        # https://leetcode.com/problems/minimum-money-to-complete-transactions-iii/discuss/\n        # https://leetcode.com/problems/minimum-money-to-complete-transactions-iv/discuss/\n        # https://leetcode.com/problems/minimum-money-to-complete-transactions-v/discuss/\n        # https://leetcode.com/problems/minimum-money-to-complete-transactions-vi/discuss/\n        # https://leetcode.com/problems/minimum-money-to-complete-transactions-vii/discuss/\n        # https://leetcode.com/problems/minimum-money-to-complete-transactions-viii/discuss/\n        # https://leetcode.com/"
    },
    {
        "number": 2413,
        "title": "Smallest Even Multiple",
        "difficulty": 0,
        "answer": "        # Solution 1:\n        # return n * (n + 1) // 2\n        # Solution 2:\n        # return n * (n + 1) // 2\n        # Solution 3:\n        # return n * (n + 1) // 2\n        # Solution 4:\n        # return n * (n + 1) // 2\n        # Solution 5:\n        # return n * (n + 1) // 2\n        # Solution 6:\n        # return n * (n + 1) // 2\n        # Solution 7:\n        # return n * (n + 1) // 2\n        # Solution 8:\n        # return n * (n + 1) // 2\n        # Solution 9:\n        # return n * (n + 1) // 2\n        # Solution 10:\n        # return n * (n + 1) // 2\n        # Solution 11:\n        # return n * (n + 1) // 2\n        # Solution 12:\n        # return n * (n + 1) // 2\n        # Solution 13:\n        # return n * (n + 1) // 2\n        # Solution"
    },
    {
        "number": 2414,
        "title": "Length of the Longest Alphabetical Continuous Substring",
        "difficulty": 1,
        "answer": "        # https://leetcode.com/problems/longest-continuous-substring/discuss/105586/Java-O(n)-solution-with-explanation\n        # https://leetcode.com/problems/longest-continuous-substring/discuss/105587/Java-O(n)-solution-with-explanation\n        # https://leetcode.com/problems/longest-continuous-substring/discuss/105588/Java-O(n)-solution-with-explanation\n        # https://leetcode.com/problems/longest-continuous-substring/discuss/105589/Java-O(n)-solution-with-explanation\n        # https://leetcode.com/problems/longest-continuous-substring/discuss/105590/Java-O(n)-solution-with-explanation\n        # https://leetcode.com/problems/longest-continuous-substring/discuss/105591/Java"
    },
    {
        "number": 2415,
        "title": "Reverse Odd Levels of Binary Tree",
        "difficulty": 1,
        "answer": "        def _reverse_level(node: TreeNode, level: int) -> None:\n            if not node:\n                return\n            if level % 2 == 1:\n                node.val = node.val\n            else:\n                _reverse_level(node.left, level + 1)\n                _reverse_level(node.right, level + 1)\n        if not root:\n            return None\n        _reverse_level(root, 1)\n        return root"
    },
    {
        "number": 2416,
        "title": "Sum of Prefix Scores of Strings",
        "difficulty": 2,
        "answer": "        n = len(words)\n        dp = [0] * n\n        for i in range(1, n):\n            for j in range(i):\n                if words[j] < words[i]:\n                    dp[i] += dp[j]\n        return dp"
    },
    {
        "number": 2418,
        "title": "Sort the People",
        "difficulty": 0,
        "answer": "        return sorted(names, key=lambda x: heights[x], reverse=True)\n"
    },
    {
        "number": 2419,
        "title": "Longest Subarray With Maximum Bitwise AND",
        "difficulty": 1,
        "answer": "        n = len(nums)\n        if n == 0:\n            return 0\n        if n == 1:\n            return 1\n        max_len = 0\n        max_start = 0\n        max_end = 0\n        for i in range(n):\n            if i == 0:\n                max_start = i\n                max_end = i\n                max_len = 1\n            else:\n                if nums[i] == nums[i - 1]:\n                    max_len += 1\n                else:\n                    max_len = 1\n                    max_start = i\n                    max_end = i\n        for i in range(n - 1, -1, -1):\n            if i == n - 1:\n                max_end = i\n                max_len = max_end - max_start + 1\n            else:\n                if nums[i] == nums[i + 1]:\n                    max_len += 1\n                else:\n                    max_len = 1\n                    max_end = i\n        return max_len"
    },
    {
        "number": 2420,
        "title": "Find All Good Indices",
        "difficulty": 1,
        "answer": "        good_indices = []\n        for i in range(len(nums) - k + 1):\n            if self.is_good(nums, i, k):\n                good_indices.append(i)\n        return good_indices"
    },
    {
        "number": 2421,
        "title": "Number of Good Paths",
        "difficulty": 2,
        "answer": "        n = len(vals)\n        dp = [1] * n\n        for i in range(n - 1):\n            for j in range(i + 1, n):\n                if vals[i] > vals[j]:\n                    dp[j] += dp[i]\n        for i in range(n - 1):\n            for j in range(i + 1, n):\n                if vals[i] > vals[j]:\n                    dp[j] += dp[i]\n        for i in range(n - 1):\n            for j in range(i + 1, n):\n                if vals[i] > vals[j]:\n                    dp[j] += dp[i]\n        for i in range(n - 1):\n            for j in range(i + 1, n):\n                if vals[i] > vals[j]:\n                    dp[j] += dp[i]\n        for i in range(n - 1):\n            for j in range(i + 1, n):\n                if vals[i] > v"
    },
    {
        "number": 2423,
        "title": "Remove Letter To Equalize Frequency",
        "difficulty": 0,
        "answer": "        # https://leetcode.com/problems/equal-frequency-substrings/discuss/105500/Java-C-solution-with-explanation\n        # https://leetcode.com/problems/equal-frequency-substrings/discuss/105501/C-solution-with-explanation\n        # https://leetcode.com/problems/equal-frequency-substrings/discuss/105502/C++-solution-with-explanation\n        # https://leetcode.com/problems/equal-frequency-substrings/discuss/105503/Python-solution-with-explanation\n        # https://leetcode.com/problems/equal-frequency-substrings/discuss/105504/Java-solution-with-explanation\n        # https://leetcode.com/problems/equal-frequency-substrings/discuss/105505/C-solution-with-explanation\n        # https://leetcode.com/problems/equal-frequency-substrings"
    },
    {
        "number": 2424,
        "title": "Longest Uploaded Prefix",
        "difficulty": 1,
        "answer": "        # Your LUPrefix object will be instantiated and called as such:\n        # obj = LUPrefix(n)\n        # obj.upload(video)\n        # param_2 = obj.longest()\n        # print(param_2)\n        # obj.upload(video)\n        # param_3 = obj.longest()\n        # print(param_3)\n        # obj.upload(video)\n        # param_4 = obj.longest()\n        # print(param_4)\n        # obj.upload(video)\n        # param_5 = obj.longest()\n        # print(param_5)\n        # obj.upload(video)\n        # param_6 = obj.longest()\n        # print(param_6)\n        # obj.upload(video)\n        # param_7 = obj.longest()\n        # print(param_7)\n        # obj.upload(video)\n        # param_8 = obj.longest()\n        # print(param_8)\n        # obj.upload(video)\n        "
    },
    {
        "number": 2425,
        "title": "Bitwise XOR of All Pairings",
        "difficulty": 1,
        "answer": "        nums1.sort()\n        nums2.sort()\n        nums3 = []\n        for i in range(len(nums1)):\n            for j in range(len(nums2)):\n                nums3.append(nums1[i] ^ nums2[j])\n        return sum(nums3)\n"
    },
    {
        "number": 2426,
        "title": "Number of Pairs Satisfying Inequality",
        "difficulty": 2,
        "answer": "        n1 = len(nums1)\n        n2 = len(nums2)\n        if n1!= n2:\n            return 0\n        if n1 == 0:\n            return 0\n        if n1 == 1:\n            return 0\n        if n1 == 2:\n            return 0\n        if n1 == 3:\n            return 0\n        if n1 == 4:\n            return 0\n        if n1 == 5:\n            return 0\n        if n1 == 6:\n            return 0\n        if n1 == 7:\n            return 0\n        if n1 == 8:\n            return 0\n        if n1 == 9:\n            return 0\n        if n1 == 10:\n            return 0\n        if n1 == 11:\n            return 0\n        if n1 == 12:\n            return 0\n        if n1 == 13:\n            return 0\n        if n1 == 14:\n            return 0\n        if n1 == 15:\n            return 0\n        if n1 == 16:\n            return 0\n        if n1 == 17:\n            return 0"
    },
    {
        "number": 2427,
        "title": "Number of Common Factors",
        "difficulty": 0,
        "answer": "        return self.gcd(a, b)"
    },
    {
        "number": 2428,
        "title": "Maximum Sum of an Hourglass",
        "difficulty": 1,
        "answer": "        m, n = len(grid), len(grid[0])\n        dp = [[0] * n for _ in range(m)]\n        for i in range(m):\n            for j in range(n):\n                dp[i][j] = max(dp[i][j], dp[i][j - 1] + grid[i][j])\n                dp[i][j] = max(dp[i][j], dp[i - 1][j] + grid[i][j])\n                dp[i][j] = max(dp[i][j], dp[i - 1][j - 1] + grid[i][j])\n        return max(dp)\n"
    },
    {
        "number": 2429,
        "title": "Minimize XOR",
        "difficulty": 1,
        "answer": "        # https://leetcode.com/problems/xor-of-two-numbers/discuss/\n        # https://leetcode.com/problems/xor-of-two-numbers/discuss/\n        # https://leetcode.com/problems/xor-of-two-numbers/discuss/\n        # https://leetcode.com/problems/xor-of-two-numbers/discuss/\n        # https://leetcode.com/problems/xor-of-two-numbers/discuss/\n        # https://leetcode.com/problems/xor-of-two-numbers/discuss/\n        # https://leetcode.com/problems/xor-of-two-numbers/discuss/\n        # https://leetcode.com/problems/xor-of-two-numbers/discuss/\n        # https://leetcode.com/problems/xor-of-two-numbers/discuss/\n        # https://leetcode"
    },
    {
        "number": 2430,
        "title": "Maximum Deletions on a String",
        "difficulty": 2,
        "answer": "        n = len(s)\n        if n == 0:\n            return 0\n        if n == 1:\n            return 1\n        if n == 2:\n            return 1 if s[0] == s[1] else 2\n        if n == 3:\n            return 1 if s[0] == s[1] and s[1] == s[2] else 2\n        if n == 4:\n            return 1 if s[0] == s[1] and s[1] == s[2] and s[2] == s[3] else 2\n        if n == 5:\n            return 1 if s[0] == s[1] and s[1] == s[2] and s[2] == s[3] and s[3] == s[4] else 2\n        if n == 6:\n            return 1 if s[0] == s[1] and s[1] == s[2] and s[2] == s[3] and s[3] == s[4] and s[4] == s[5] else 2\n        if n == 7"
    },
    {
        "number": 2432,
        "title": "The Employee That Worked on the Longest Task",
        "difficulty": 0,
        "answer": "        # Your Solution object will be instantiated and called as such:\n        # obj = Solution(n, logs)\n        # param_1 = obj.hardestWorker(n, logs)\n        # return param_1"
    },
    {
        "number": 2433,
        "title": "Find The Original Array of Prefix Xor",
        "difficulty": 1,
        "answer": "        n = len(pref)\n        arr = [0] * n\n        for i in range(n):\n            arr[i] = pref[i]\n        for i in range(n):\n            for j in range(i + 1, n):\n                arr[j] ^= arr[i]\n        return arr\n"
    },
    {
        "number": 2434,
        "title": "Using a Robot to Print the Lexicographically Smallest String",
        "difficulty": 1,
        "answer": "        def remove_first(s, t):\n            if len(s) == 0:\n                return t\n            else:\n                return s[1:] + t"
    },
    {
        "number": 2435,
        "title": "Paths in Matrix Whose Sum Is Divisible by K",
        "difficulty": 2,
        "answer": "        m, n = len(grid), len(grid[0])\n        dp = [[0 for _ in range(n)] for _ in range(m)]\n        dp[0][0] = 1\n        for i in range(1, m):\n            dp[i][0] = dp[i - 1][0]\n        for j in range(1, n):\n            dp[0][j] = dp[0][j - 1]\n        for i in range(1, m):\n            for j in range(1, n):\n                dp[i][j] = dp[i - 1][j] + dp[i][j - 1]\n                if grid[i - 1][j - 1] % k == 0:\n                    dp[i][j] %= 109 + 7\n        return dp[-1][-1]\n"
    },
    {
        "number": 2437,
        "title": "Number of Valid Clock Times",
        "difficulty": 0,
        "answer": "        time = time.replace(\"?\", \"0\")\n        time = time.replace(\"?\", \"1\")\n        time = time.replace(\"?\", \"2\")\n        time = time.replace(\"?\", \"3\")\n        time = time.replace(\"?\", \"4\")\n        time = time.replace(\"?\", \"5\")\n        time = time.replace(\"?\", \"6\")\n        time = time.replace(\"?\", \"7\")\n        time = time.replace(\"?\", \"8\")\n        time = time.replace(\"?\", \"9\")\n        time = time.replace(\"0\", \"\")\n        time = time.replace(\"1\", \"\")\n        time = time.replace(\"2\", \"\")\n        time = time.replace(\"3\", \"\")\n        time = time.replace(\"4\", \"\")\n        time = time.replace(\"5\", \"\")\n        time = time.replace(\"6\", \"\")\n        time = time.replace(\"7\", \"\")\n        time = time.replace(\"8\", \"\")\n        time = time.replace(\"9\", \"\")\n        return len(time)"
    },
    {
        "number": 2438,
        "title": "Range Product Queries of Powers",
        "difficulty": 1,
        "answer": "        powers = [1]\n        for i in range(2, n + 1):\n            powers.append(powers[-1] * 2)\n        answers = [0] * len(queries)\n        for i, query in enumerate(queries):\n            answers[i] = (powers[query[0]] * powers[query[1]]) % (109 + 7)\n        return answers\n"
    },
    {
        "number": 2439,
        "title": "Minimize Maximum of Array",
        "difficulty": 1,
        "answer": "        n = len(nums)\n        if n == 0:\n            return 0\n        if n == 1:\n            return nums[0]\n        if n == 2:\n            return min(nums)\n        if n == 3:\n            return min(nums) + min(nums[1:])\n        if n == 4:\n            return min(nums) + min(nums[1:]) + min(nums[2:])\n        if n == 5:\n            return min(nums) + min(nums[1:]) + min(nums[2:]) + min(nums[3:])\n        if n == 6:\n            return min(nums) + min(nums[1:]) + min(nums[2:]) + min(nums[3:]) + min(nums[4:])\n        if n == 7:\n            return min(nums) + min(nums[1:]) + min(nums[2:]) + min(nums[3:]) + min(nums[4:])"
    },
    {
        "number": 2440,
        "title": "Create Components With Same Value",
        "difficulty": 2,
        "answer": "        n = len(nums)\n        edges = [[i, j] for i, j in edges]\n        edges = sorted(edges, key=lambda x: x[0])\n        edges = sorted(edges, key=lambda x: x[1])\n        edges = sorted(edges, key=lambda x: x[0])\n        edges = sorted(edges, key=lambda x: x[1])\n        edges = sorted(edges, key=lambda x: x[0])\n        edges = sorted(edges, key=lambda x: x[1])\n        edges = sorted(edges, key=lambda x: x[0])\n        edges = sorted(edges, key=lambda x: x[1])\n        edges = sorted(edges, key=lambda x: x[0])\n        edges = sorted(edges, key=lambda x: x[1])\n        edges = sorted(edges, key=lambda x: x[0])\n        edges = sorted(edges, key=lambda x: x"
    },
    {
        "number": 2441,
        "title": "Largest Positive Integer That Exists With Its Negative",
        "difficulty": 0,
        "answer": "        # https://leetcode.com/problems/find-the-smallest-positive-integer-k-that-is-not-in-the-array/discuss/\n        # https://leetcode.com/problems/find-the-smallest-positive-integer-k-that-is-not-in-the-array/discuss/\n        # https://leetcode.com/problems/find-the-smallest-positive-integer-k-that-is-not-in-the-array/discuss/\n        # https://leetcode.com/problems/find-the-smallest-positive-integer-k-that-is-not-in-the-array/discuss/\n        # https://leetcode.com/problems/find-the-smallest-positive-integer-k-that-is-not-in-the-array/discuss/\n        # https://leetcode.com/problems/find-the-smallest-positive-integer-k-that-is-not-in-the-array/discuss"
    },
    {
        "number": 2442,
        "title": "Count Number of Distinct Integers After Reverse Operations",
        "difficulty": 1,
        "answer": "        # https://leetcode.com/problems/count-distinct-integers/discuss/105586/Java-Solution-with-explanation-and-examples\n        # https://leetcode.com/problems/count-distinct-integers/discuss/105586/Java-Solution-with-explanation-and-examples\n        # https://leetcode.com/problems/count-distinct-integers/discuss/105586/Java-Solution-with-explanation-and-examples\n        # https://leetcode.com/problems/count-distinct-integers/discuss/105586/Java-Solution-with-explanation-and-examples\n        # https://leetcode.com/problems/count-distinct-integers/discuss/105586/Java-Solution-with-explanation-and-examples\n        # https://leetcode.com/problems/count-distinct-integers/discuss/105586/Java-Solution-with-ex"
    },
    {
        "number": 2443,
        "title": "Sum of Number and Its Reverse",
        "difficulty": 1,
        "answer": "        if num < 0:\n            return False\n        if num == 0:\n            return True\n        if num == 1:\n            return True\n        if num == 2:\n            return True\n        if num == 3:\n            return True\n        if num == 4:\n            return True\n        if num == 5:\n            return True\n        if num == 6:\n            return True\n        if num == 7:\n            return True\n        if num == 8:\n            return True\n        if num == 9:\n            return True\n        if num == 10:\n            return True\n        if num == 11:\n            return True\n        if num == 12:\n            return True\n        if num == 13:\n            return True\n        if num == 14:\n            return True\n        if num == 15:\n            return True\n        if num == 16:\n            return True\n        if num == 17:\n            return True\n        if num == 18:\n            return True\n        if num == 19:\n            return True\n        if num == 20:\n            return True\n        if num == 21:\n            "
    },
    {
        "number": 2444,
        "title": "Count Subarrays With Fixed Bounds",
        "difficulty": 2,
        "answer": "        n = len(nums)\n        if n == 0:\n            return 0\n        if n == 1:\n            return 1\n        if n == 2:\n            return 1 if nums[0] == nums[1] else 0\n        if n == 3:\n            return 1 if nums[0] == nums[1] and nums[1] == nums[2] else 0\n        if n == 4:\n            return 1 if nums[0] == nums[1] and nums[1] == nums[2] and nums[2] == nums[3] else 0\n        if n == 5:\n            return 1 if nums[0] == nums[1] and nums[1] == nums[2] and nums[2] == nums[3] and nums[3] == nums[4] else 0\n        if n == 6:\n            return 1 if nums[0] == nums[1] and nums[1] == nums[2] and nums[2] == nums[3] and"
    },
    {
        "number": 2446,
        "title": "Determine if Two Events Have Conflict",
        "difficulty": 0,
        "answer": "        # Time format: HH:MM\n        # Time format: HH:MM:SS\n        # Time format: HH:MM:SS.SSS\n        # Time format: HH:MM:SS.SSS\n        # Time format: HH:MM:SS.SSS\n        # Time format: HH:MM:SS.SSS\n        # Time format: HH:MM:SS.SSS\n        # Time format: HH:MM:SS.SSS\n        # Time format: HH:MM:SS.SSS\n        # Time format: HH:MM:SS.SSS\n        # Time format: HH:MM:SS.SSS\n        # Time format: HH:MM:SS.SSS\n        # Time format: HH:MM:SS.SSS\n        # Time format: HH:MM:SS.SSS\n        # Time format: HH:MM:SS.SSS\n        # Time format: HH:MM:SS.SSS\n        # Time format: HH:MM:SS.SSS\n        # Time format: HH:MM:SS.SSS\n        # Time format: HH"
    },
    {
        "number": 2447,
        "title": "Number of Subarrays With GCD Equal to K",
        "difficulty": 1,
        "answer": "        if not nums:\n            return 0\n        if len(nums) == 1:\n            return 1\n        if len(nums) == 2:\n            return 1 if nums[0] == nums[1] else 0\n        if len(nums) == 3:\n            return 1 if nums[0] == nums[1] and nums[1] == nums[2] else 0\n        if len(nums) == 4:\n            return 1 if nums[0] == nums[1] and nums[1] == nums[2] and nums[2] == nums[3] else 0\n        if len(nums) == 5:\n            return 1 if nums[0] == nums[1] and nums[1] == nums[2] and nums[2] == nums[3] and nums[3] == nums[4] else 0\n        if len(nums) == 6:\n            return 1 if nums[0] == nums[1] and nums[1] == nums["
    },
    {
        "number": 2448,
        "title": "Minimum Cost to Make Array Equal",
        "difficulty": 2,
        "answer": "        n = len(nums)\n        if n == 0:\n            return 0\n        if n == 1:\n            return min(cost)\n        if n == 2:\n            return min(cost) + min(cost)\n        if n == 3:\n            return min(cost) + min(cost) + min(cost)\n        if n == 4:\n            return min(cost) + min(cost) + min(cost) + min(cost)\n        if n == 5:\n            return min(cost) + min(cost) + min(cost) + min(cost) + min(cost)\n        if n == 6:\n            return min(cost) + min(cost) + min(cost) + min(cost) + min(cost) + min(cost)\n        if n == 7:\n            return min(cost) + min(cost) + min(cost) + min(cost) + min(cost) + min(cost) + min(cost)\n        if n == 8:\n            return min(cost) + min(cost) + min(cost) + min(cost"
    },
    {
        "number": 2449,
        "title": "Minimum Number of Operations to Make Arrays Similar",
        "difficulty": 2,
        "answer": "        nums = sorted(nums)\n        target = sorted(target)\n        if len(nums)!= len(target):\n            return -1\n        if len(nums) == 1:\n            return 0\n        if len(nums) == 2:\n            return 1\n        if nums[0] == target[0]:\n            return 1\n        if nums[-1] == target[-1]:\n            return 1\n        if nums[0] == target[-1]:\n            return 1\n        if nums[-1] == target[0]:\n            return 1\n        if nums[0] == target[1]:\n            return 1\n        if nums[-1] == target[1]:\n            return 1\n        if nums[0] == target[2]:\n            return 1\n        if nums[-1] == target[2]:\n            return 1\n        if nums[0] == target[3]:\n            return 1\n        if nums[-1] == target[3]:\n            return 1\n        if nums[0]"
    },
    {
        "number": 2451,
        "title": "Odd String Difference",
        "difficulty": 0,
        "answer": "        # Your Solution object will be instantiated and called as such:\n        # obj = Solution(words)\n        # param_1 = obj.oddString(words)\n        # return param_1"
    },
    {
        "number": 2452,
        "title": "Words Within Two Edits of Dictionary",
        "difficulty": 1,
        "answer": "        def edit_distance(s1, s2):\n            \"\"\"\n            Calculate the edit distance between two strings.\n            :param s1: The first string.\n            :param s2: The second string.\n            :return: The edit distance between the two strings.\n            \"\"\"\n            if len(s1) > len(s2):\n                return edit_distance(s2, s1)\n            if len(s1) == 0:\n                return len(s2)\n            if len(s2) == 0:\n                return len(s1)\n            d = {}\n            for i in range(len(s1) + 1):\n                d[i] = [i]\n            for i in range(1, len(s2) + 1):\n                d[0] = [i]\n            for i in range(1, len(s1) + 1):\n                for j in range(1, len(s2) + 1):\n                    if s1[i - 1] == s2[j - 1]:\n                        d[i] = [min(d"
    },
    {
        "number": 2453,
        "title": "Destroy Sequential Targets",
        "difficulty": 1,
        "answer": "        n = len(nums)\n        if n == 0:\n            return 0\n        if n == 1:\n            return nums[0]\n        if n == 2:\n            return min(nums[0], nums[1])\n        if n == 3:\n            return min(nums[0], nums[1], nums[2])\n        if n == 4:\n            return min(nums[0], nums[1], nums[2], nums[3])\n        if n == 5:\n            return min(nums[0], nums[1], nums[2], nums[3], nums[4])\n        if n == 6:\n            return min(nums[0], nums[1], nums[2], nums[3], nums[4], nums[5])\n        if n == 7:\n            return min(nums[0], nums[1], nums[2], nums[3], nums[4], nums[5], nums[6])\n        if n == 8:\n            "
    },
    {
        "number": 2454,
        "title": "Next Greater Element IV",
        "difficulty": 2,
        "answer": "        n = len(nums)\n        if n == 1:\n            return [-1]\n        if n == 2:\n            return [max(nums)]\n        if n == 3:\n            return [max(nums)]\n        if n == 4:\n            return [max(nums)]\n        if n == 5:\n            return [max(nums)]\n        if n == 6:\n            return [max(nums)]\n        if n == 7:\n            return [max(nums)]\n        if n == 8:\n            return [max(nums)]\n        if n == 9:\n            return [max(nums)]\n        if n == 10:\n            return [max(nums)]\n        if n == 11:\n            return [max(nums)]\n        if n == 12:\n            return [max(nums)]\n        if n == 13:\n            return [max(nums)]\n        if n == 14:\n            return [max(nums)]\n        if n == 15:\n            return [max(nums)]\n        if n =="
    },
    {
        "number": 2455,
        "title": "Average Value of Even Numbers That Are Divisible by Three",
        "difficulty": 0,
        "answer": "        sum_ = 0\n        for num in nums:\n            if num % 3 == 0:\n                sum_ += num\n        return sum_ / len(nums)\n"
    },
    {
        "number": 2456,
        "title": "Most Popular Video Creator",
        "difficulty": 1,
        "answer": "        # Your Solution object will be instantiated and called as such:\n        # obj = Solution(creators, ids, views)\n        # param_1 = obj.mostPopularCreator(...)\n        # param_2 = obj.mostPopularCreator(...)"
    },
    {
        "number": 2457,
        "title": "Minimum Addition to Make Integer Beautiful",
        "difficulty": 1,
        "answer": "        if n <= 0:\n            return 0\n        if n == 1:\n            return 0\n        if n == 2:\n            return 1\n        if n == 3:\n            return 2\n        if n == 4:\n            return 3\n        if n == 5:\n            return 4\n        if n == 6:\n            return 5\n        if n == 7:\n            return 6\n        if n == 8:\n            return 7\n        if n == 9:\n            return 8\n        if n == 10:\n            return 9\n        if n == 11:\n            return 10\n        if n == 12:\n            return 11\n        if n == 13:\n            return 12\n        if n == 14:\n            return 13\n        if n == 15:\n            return 14\n        if n == 16:\n            return 15\n        if n == 17:\n            return 16\n        if n == 18:\n            return 17\n        if n == 19:\n            return 18\n        if n == 20:\n            return 19\n        if n == 21:\n            return 20\n        if n == 22:\n            "
    },
    {
        "number": 2458,
        "title": "Height of Binary Tree After Subtree Removal Queries",
        "difficulty": 2,
        "answer": "        def dfs(node: TreeNode, queries: List[int]) -> List[int]:\n            if not node:\n                return []\n            if node.val in queries:\n                return dfs(node.left, queries) + dfs(node.right, queries)\n            return [node.val] + dfs(node.left, queries) + dfs(node.right, queries)"
    },
    {
        "number": 2460,
        "title": "Apply Operations to an Array",
        "difficulty": 0,
        "answer": "        n = len(nums)\n        res = [0] * n\n        for i in range(n - 1):\n            if nums[i] == nums[i + 1]:\n                res[i] = res[i] * 2\n                res[i + 1] = 0\n            else:\n                pass\n        res[n - 1] = nums[n - 1]\n        return res"
    },
    {
        "number": 2461,
        "title": "Maximum Sum of Distinct Subarrays With Length K",
        "difficulty": 1,
        "answer": "        if not nums:\n            return 0\n        if len(nums) == 1:\n            return nums[0]\n        if len(nums) == 2:\n            return max(nums)\n        if len(nums) == 3:\n            return max(nums) + max(nums[1:])\n        if len(nums) == 4:\n            return max(nums) + max(nums[1:]) + max(nums[2:])\n        if len(nums) == 5:\n            return max(nums) + max(nums[1:]) + max(nums[2:]) + max(nums[3:])\n        if len(nums) == 6:\n            return max(nums) + max(nums[1:]) + max(nums[2:]) + max(nums[3:]) + max(nums[4:])\n        if len(nums) == 7:\n            return max(nums) + max(nums[1:]) + max(nums[2:"
    },
    {
        "number": 2462,
        "title": "Total Cost to Hire K Workers",
        "difficulty": 1,
        "answer": "        if k > len(costs):\n            return 0\n        if k == 0:\n            return 0\n        if k == 1:\n            return min(costs)\n        if k == 2:\n            return min(costs, key=lambda x: x[0])[0]\n        if k == 3:\n            return min(costs, key=lambda x: x[0])[0]\n        if k == 4:\n            return min(costs, key=lambda x: x[0])[0]\n        if k == 5:\n            return min(costs, key=lambda x: x[0])[0]\n        if k == 6:\n            return min(costs, key=lambda x: x[0])[0]\n        if k == 7:\n            return min(costs, key=lambda x: x[0])[0]\n        if k == 8:\n            return min(costs, key=lambda x: x[0])[0]\n        if k == 9:\n            return min(costs, key=lambda x: x["
    },
    {
        "number": 2463,
        "title": "Minimum Total Distance Traveled",
        "difficulty": 2,
        "answer": "        if not robot or not factory:\n            return 0\n        robot = sorted(robot)\n        factory = sorted(factory)\n        n = len(robot)\n        m = len(factory)\n        dp = [[0] * (n + 1) for _ in range(m + 1)]\n        for i in range(1, n + 1):\n            dp[0][i] = i\n        for j in range(1, m + 1):\n            dp[j][0] = j\n        for i in range(1, n + 1):\n            for j in range(1, m + 1):\n                if robot[i - 1] == factory[j - 1][0]:\n                    dp[j][i] = dp[j - 1][i - 1]\n                else:\n                    dp[j][i] = min(dp[j - 1][i - 1], dp[j][i - 1]) + 1\n        return dp[-1][-1]\n"
    },
    {
        "number": 2465,
        "title": "Number of Distinct Averages",
        "difficulty": 0,
        "answer": "        n = len(nums)\n        if n == 0:\n            return 0\n        if n == 1:\n            return 1\n        if n == 2:\n            return nums[0] + nums[1]\n        if n == 3:\n            return (nums[0] + nums[1]) / 2\n        if n == 4:\n            return (nums[0] + nums[1] + nums[2]) / 3\n        if n == 5:\n            return (nums[0] + nums[1] + nums[2] + nums[3]) / 4\n        if n == 6:\n            return (nums[0] + nums[1] + nums[2] + nums[3] + nums[4]) / 5\n        if n == 7:\n            return (nums[0] + nums[1] + nums[2] + nums[3] + nums[4] + nums[5]) / 6\n        if n == 8:\n            return (nums[0] + nums"
    },
    {
        "number": 2466,
        "title": "Count Ways To Build Good Strings",
        "difficulty": 1,
        "answer": "        def countGoodStringsHelper(low, high, zero, one):\n            if low == high:\n                return 1\n            if low == high - 1:\n                return countGoodStringsHelper(low, high, zero, one)\n            if low == high - 2:\n                return countGoodStringsHelper(low, high, zero, one) + countGoodStringsHelper(low, high, zero, one)\n            if low == high - 3:\n                return countGoodStringsHelper(low, high, zero, one) + countGoodStringsHelper(low, high, zero, one) + countGoodStringsHelper(low, high, zero, one)\n            if low == high - 4:\n                return countGoodStringsHelper(low, high, zero, one) + countGoodStringsHelper(low, high, zero, one) + countGoodStringsHelper(low, high, zero, one) + countGoodStringsHelper(low, high, zero, one)\n            if low == high - 5:\n                return countGoodStringsHelper(low, high, zero, one) + countGood"
    },
    {
        "number": 2467,
        "title": "Most Profitable Path in a Tree",
        "difficulty": 1,
        "answer": "        n = len(edges)\n        if n == 1:\n            return edges[0][1]\n        if n == 2:\n            return max(edges[0][1], edges[1][1])\n        \n        # dp[i][j] represents the maximum net income Alice can get if she goes from node i to node j.\n        dp = [[0 for _ in range(n)] for _ in range(n)]\n        dp[0][0] = edges[0][1]\n        dp[0][1] = edges[1][1]\n        \n        for i in range(1, n):\n            dp[i][0] = dp[i - 1][0]\n            dp[i][1] = max(dp[i - 1][1], edges[i][1])\n        \n        for i in range(1, n):\n            for j in range(1, n):\n                dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])\n                dp[i][j] = max(dp["
    },
    {
        "number": 2468,
        "title": "Split Message Based on Limit",
        "difficulty": 2,
        "answer": "        # Your Solution object will be instantiated and called as such:\n        # obj = Solution(message, limit)\n        # param_1 = obj.splitMessage(message, limit)\n        # return param_1"
    },
    {
        "number": 2469,
        "title": "Convert the Temperature",
        "difficulty": 0,
        "answer": "        # Your Solution object will be instantiated and called as such:\n        # obj = Solution(celsius)\n        # param_1 = obj.convertTemperature(celsius)"
    },
    {
        "number": 2470,
        "title": "Number of Subarrays With LCM Equal to K",
        "difficulty": 1,
        "answer": "        if not nums:\n            return 0\n        if len(nums) == 1:\n            return 1\n        if len(nums) == 2:\n            return nums[0] * nums[1]\n        if len(nums) == 3:\n            return nums[0] * nums[1] * nums[2]\n        if len(nums) == 4:\n            return nums[0] * nums[1] * nums[2] * nums[3]\n        if len(nums) == 5:\n            return nums[0] * nums[1] * nums[2] * nums[3] * nums[4]\n        if len(nums) == 6:\n            return nums[0] * nums[1] * nums[2] * nums[3] * nums[4] * nums[5]\n        if len(nums) == 7:\n            return nums[0] * nums[1] * nums[2] * nums[3] * nums"
    },
    {
        "number": 2471,
        "title": "Minimum Number of Operations to Sort a Binary Tree by Level",
        "difficulty": 1,
        "answer": "        def dfs(node: Optional[TreeNode]) -> int:\n            if not node:\n                return 0\n            left = dfs(node.left)\n            right = dfs(node.right)\n            if left > right:\n                return left + 1\n            return right + 1"
    },
    {
        "number": 2472,
        "title": "Maximum Number of Non-overlapping Palindrome Substrings",
        "difficulty": 2,
        "answer": "        if not s:\n            return 0\n        if len(s) < k:\n            return 0\n        if len(s) == 1:\n            return 1\n        if len(s) == 2:\n            return 1 if s[0] == s[1] else 0\n        if len(s) == 3:\n            return 1 if s[0] == s[1] and s[1] == s[2] else 0\n        if len(s) == 4:\n            return 1 if s[0] == s[1] and s[1] == s[2] and s[2] == s[3] else 0\n        if len(s) == 5:\n            return 1 if s[0] == s[1] and s[1] == s[2] and s[2] == s[3] and s[3] == s[4] else 0\n        if len(s) == 6:\n            return 1 if s[0] == s[1] and s[1] == s[2] and s[2] == s[3] and s[3]"
    },
    {
        "number": 2475,
        "title": "Number of Unequal Triplets in Array",
        "difficulty": 0,
        "answer": "        n = len(nums)\n        if n < 3:\n            return 0\n        res = 0\n        for i in range(n - 2):\n            for j in range(i + 1, n - 1):\n                for k in range(j + 1, n):\n                    if nums[i]!= nums[j] and nums[i]!= nums[k] and nums[j]!= nums[k]:\n                        res += 1\n        return res\n"
    },
    {
        "number": 2476,
        "title": "Closest Nodes Queries in a Binary Search Tree",
        "difficulty": 1,
        "answer": "        def find_min_max(node: Optional[TreeNode]) -> Tuple[int, int]:\n            if node is None:\n                return -1, -1\n            return find_min_max(node.left), find_min_max(node.right)"
    },
    {
        "number": 2477,
        "title": "Minimum Fuel Cost to Report to the Capital",
        "difficulty": 1,
        "answer": "        # https://leetcode.com/problems/minimum-fuel-cost/discuss/\n        # https://leetcode.com/problems/minimum-fuel-cost/discuss/\n        # https://leetcode.com/problems/minimum-fuel-cost/discuss/\n        # https://leetcode.com/problems/minimum-fuel-cost/discuss/\n        # https://leetcode.com/problems/minimum-fuel-cost/discuss/\n        # https://leetcode.com/problems/minimum-fuel-cost/discuss/\n        # https://leetcode.com/problems/minimum-fuel-cost/discuss/\n        # https://leetcode.com/problems/minimum-fuel-cost/discuss/\n        # https://leetcode.com/problems/minimum-fuel-cost/discuss/\n        # https://leetcode.com/problems/minimum-fuel-cost/discuss/\n        # https://leetcode.com/problems/minimum-fuel-cost/disc"
    },
    {
        "number": 2478,
        "title": "Number of Beautiful Partitions",
        "difficulty": 2,
        "answer": "        # pylint: disable=line-too-long\n        # pylint: disable=too-many-locals\n        # pylint: disable=too-many-branches\n        # pylint: disable=too-many-statements\n        # pylint: disable=too-many-nested-blocks\n        # pylint: disable=too-many-boolean-expressions\n        # pylint: disable=too-many-arguments\n        # pylint: disable=too-many-locals\n        # pylint: disable=too-many-statements\n        # pylint: disable=too-many-nested-blocks\n        # pylint: disable=too-many-boolean-expressions\n        # pylint: disable=too-many-arguments\n        # pylint: disable=too-many-locals\n        # pylint: disable=too-many-statements\n        # pylint: disable=too-many-nested-blocks\n        # pylint: disable=too-many-boolean"
    },
    {
        "number": 2481,
        "title": "Minimum Cuts to Divide a Circle",
        "difficulty": 0,
        "answer": "        if n <= 1:\n            return 0\n        if n == 2:\n            return 1\n        if n == 3:\n            return 2\n        if n == 4:\n            return 2\n        if n == 5:\n            return 3\n        if n == 6:\n            return 3\n        if n == 7:\n            return 4\n        if n == 8:\n            return 4\n        if n == 9:\n            return 5\n        if n == 10:\n            return 5\n        if n == 11:\n            return 6\n        if n == 12:\n            return 6\n        if n == 13:\n            return 7\n        if n == 14:\n            return 7\n        if n == 15:\n            return 8\n        if n == 16:\n            return 8\n        if n == 17:\n            return 9\n        if n == 18:\n            return 9\n        if n == 19:\n            return 10\n        if n == 20:\n            return 10\n        if n == 21:\n            return 11\n        if n == 22:\n            return 11\n        if n == 23:\n            "
    },
    {
        "number": 2482,
        "title": "Difference Between Ones and Zeros in Row and Column",
        "difficulty": 1,
        "answer": "        m, n = len(grid), len(grid[0])\n        diff = [[0] * n for _ in range(m)]\n        for i in range(m):\n            for j in range(n):\n                diff[i][j] = grid[i][j] + sum(grid[i][:j]) - sum(grid[i][j + 1:])\n        return diff\n"
    },
    {
        "number": 2483,
        "title": "Minimum Penalty for a Shop",
        "difficulty": 1,
        "answer": "        n = len(customers)\n        dp = [[0] * (n + 1) for _ in range(n + 1)]\n        for i in range(1, n + 1):\n            dp[i][0] = 0\n            dp[i][i] = 0\n        for i in range(1, n + 1):\n            for j in range(1, n + 1):\n                if customers[j - 1] == 'Y':\n                    dp[i][j] = dp[i - 1][j - 1] + 1\n                else:\n                    dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])\n        return dp[n][n]\n"
    },
    {
        "number": 2484,
        "title": "Count Palindromic Subsequences",
        "difficulty": 2,
        "answer": "        # https://leetcode.com/problems/count-palindromic-subsequences/discuss/105500/Java-O(n)-solution-with-explanation\n        # https://leetcode.com/problems/count-palindromic-subsequences/discuss/105501/Java-O(n)-solution-with-explanation\n        # https://leetcode.com/problems/count-palindromic-subsequences/discuss/105500/Java-O(n)-solution-with-explanation\n        # https://leetcode.com/problems/count-palindromic-subsequences/discuss/105501/Java-O(n)-solution-with-explanation\n        # https://leetcode.com/problems/count-palindromic-subsequences/discuss/105500/Java-O(n)-solution-with-explanation\n        # https://leetcode.com/problems/count-palindromic-"
    },
    {
        "number": 2485,
        "title": "Find the Pivot Integer",
        "difficulty": 0,
        "answer": "        if n <= 1:\n            return n\n        if n % 2 == 0:\n            return self.pivotInteger(n // 2)\n        return self.pivotInteger(n - 1)"
    },
    {
        "number": 2486,
        "title": "Append Characters to String to Make Subsequence",
        "difficulty": 1,
        "answer": "        s_len = len(s)\n        t_len = len(t)\n        if s_len < t_len:\n            return t_len - s_len\n        elif t_len == 0:\n            return 0\n        elif t_len == 1:\n            return 1\n        elif t_len == 2:\n            return 1 if s[-1] == t[0] else 2\n        elif t_len == 3:\n            return 1 if s[-1] == t[0] and s[-2] == t[1] else 2\n        elif t_len == 4:\n            return 1 if s[-1] == t[0] and s[-2] == t[1] and s[-3] == t[2] else 3\n        else:\n            return min(self.appendCharacters(s[:-1], t[:-1]), self.appendCharacters(s[:-1], t[1:])) + 1\n"
    },
    {
        "number": 2487,
        "title": "Remove Nodes From Linked List",
        "difficulty": 1,
        "answer": "        if head is None:\n            return None"
    },
    {
        "number": 2488,
        "title": "Count Subarrays With Median K",
        "difficulty": 2,
        "answer": "        n = len(nums)\n        if n == 0:\n            return 0\n        if n == 1:\n            return 1\n        if n == 2:\n            return 1 if nums[0] == nums[1] else 0\n        if n == 3:\n            return 1 if nums[0] == nums[1] and nums[1] == nums[2] else 0\n        if n == 4:\n            return 1 if nums[0] == nums[1] and nums[1] == nums[2] and nums[2] == nums[3] else 0\n        if n == 5:\n            return 1 if nums[0] == nums[1] and nums[1] == nums[2] and nums[2] == nums[3] and nums[3] == nums[4] else 0\n        if n == 6:\n            return 1 if nums[0] == nums[1] and nums[1] == nums[2] and nums[2] == nums[3] and"
    },
    {
        "number": 2490,
        "title": "Circular Sentence",
        "difficulty": 0,
        "answer": "        sentence = sentence.lower()\n        words = sentence.split()\n        if len(words) == 1:\n            return True\n        last_char = words[-1][-1]\n        first_char = words[0][0]\n        if last_char == first_char:\n            return True\n        return False\n"
    },
    {
        "number": 2491,
        "title": "Divide Players Into Teams of Equal Skill",
        "difficulty": 1,
        "answer": "        # https://leetcode.com/problems/divide-players/discuss/105586/Java-Solution-with-explanation-and-examples\n        # https://leetcode.com/problems/divide-players/discuss/105587/Java-Solution-with-explanation-and-examples\n        # https://leetcode.com/problems/divide-players/discuss/105588/Java-Solution-with-explanation-and-examples\n        # https://leetcode.com/problems/divide-players/discuss/105589/Java-Solution-with-explanation-and-examples\n        # https://leetcode.com/problems/divide-players/discuss/105590/Java-Solution-with-explanation-and-examples\n        # https://leetcode.com/problems/divide-players/discuss/105591/Java-Solution-with-explanation-and-examples\n        # https://leetcode.com/"
    },
    {
        "number": 2492,
        "title": "Minimum Score of a Path Between Two Cities",
        "difficulty": 1,
        "answer": "        n = n + 1\n        roads = [list(map(int, road)) for road in roads]\n        roads = [road for road in roads if len(road) == 2]\n        roads = [road for road in roads if len(road) == 3]\n        roads = [road for road in roads if len(road) == 4]\n        roads = [road for road in roads if len(road) == 5]\n        roads = [road for road in roads if len(road) == 6]\n        roads = [road for road in roads if len(road) == 7]\n        roads = [road for road in roads if len(road) == 8]\n        roads = [road for road in roads if len(road) == 9]\n        roads = [road for road in roads if len(road) == 10]\n        roads = [road for road in roads if len(road) == 11]\n        roads = [road for road in roads if len(road) == 12]\n        roads = [road for road in roads if len(road) == 13]\n        roads = [road for road in roads"
    },
    {
        "number": 2493,
        "title": "Divide Nodes Into the Maximum Number of Groups",
        "difficulty": 2,
        "answer": "        m = len(edges)\n        if m == 0:\n            return 1\n        if m == 1:\n            return n\n        if m == 2:\n            return 1 if n == 2 else -1\n        if m == 3:\n            return 1 if n == 3 else -1\n        if m == 4:\n            return 1 if n == 4 else -1\n        if m == 5:\n            return 1 if n == 5 else -1\n        if m == 6:\n            return 1 if n == 6 else -1\n        if m == 7:\n            return 1 if n == 7 else -1\n        if m == 8:\n            return 1 if n == 8 else -1\n        if m == 9:\n            return 1 if n == 9 else -1\n        if m == 10:\n            return 1 if n == 10 else -1\n        if m == 11:\n            return 1 if n == 11 else -1\n        if m == 12:\n            return 1 if n == 12 else -1\n        if m == 13:\n            return 1 if n == 13 else -1\n        if m"
    },
    {
        "number": 2496,
        "title": "Maximum Value of a String in an Array",
        "difficulty": 0,
        "answer": "        # https://leetcode.com/problems/maximum-value-of-an-alphanumeric-string/discuss/\n        # https://leetcode.com/problems/maximum-value-of-an-alphanumeric-string/discuss/\n        # https://leetcode.com/problems/maximum-value-of-an-alphanumeric-string/discuss/\n        # https://leetcode.com/problems/maximum-value-of-an-alphanumeric-string/discuss/\n        # https://leetcode.com/problems/maximum-value-of-an-alphanumeric-string/discuss/\n        # https://leetcode.com/problems/maximum-value-of-an-alphanumeric-string/discuss/\n        # https://leetcode.com/problems/maximum-value-of-an-alphanumeric-string/discuss/\n        # https://leetcode.com/problems/maximum-value-of-an-alphanumeric-string/discuss/\n        #"
    },
    {
        "number": 2497,
        "title": "Maximum Star Sum of a Graph",
        "difficulty": 1,
        "answer": "        n = len(vals)\n        edges = [[i, j] for i, j in edges]\n        edges = sorted(edges, key=lambda x: x[0])\n        edges = sorted(edges, key=lambda x: x[1])\n        edges = sorted(edges, key=lambda x: x[0])\n        edges = sorted(edges, key=lambda x: x[1])\n        edges = sorted(edges, key=lambda x: x[0])\n        edges = sorted(edges, key=lambda x: x[1])\n        edges = sorted(edges, key=lambda x: x[0])\n        edges = sorted(edges, key=lambda x: x[1])\n        edges = sorted(edges, key=lambda x: x[0])\n        edges = sorted(edges, key=lambda x: x[1])\n        edges = sorted(edges, key=lambda x: x[0])\n        edges = sorted(edges, key=lambda x: x["
    },
    {
        "number": 2498,
        "title": "Frog Jump II",
        "difficulty": 1,
        "answer": "        if not stones:\n            return 0\n        if len(stones) == 1:\n            return stones[0]\n        if len(stones) == 2:\n            return stones[0] + stones[1]\n        if len(stones) == 3:\n            return stones[0] + stones[1] + stones[2]\n        if len(stones) == 4:\n            return stones[0] + stones[1] + stones[2] + stones[3]\n        if len(stones) == 5:\n            return stones[0] + stones[1] + stones[2] + stones[3] + stones[4]\n        if len(stones) == 6:\n            return stones[0] + stones[1] + stones[2] + stones[3] + stones[4] + stones[5]\n        if len(stones) == 7:\n            return stones[0] + stones[1] + stones[2] + stones[3] + stones[4] + stones[5] + stones[6]\n        if len(stones) == 8:\n            return stones[0]"
    },
    {
        "number": 2499,
        "title": "Minimum Total Cost to Make Arrays Unequal",
        "difficulty": 2,
        "answer": "        n = len(nums1)\n        if n!= len(nums2):\n            return -1\n        dp = [[0] * (n + 1) for _ in range(n + 1)]\n        for i in range(1, n + 1):\n            dp[i][i] = 0\n        for i in range(1, n + 1):\n            for j in range(1, n + 1):\n                if nums1[i - 1]!= nums2[j - 1]:\n                    dp[i][j] = dp[i - 1][j - 1] + 1\n                else:\n                    dp[i][j] = min(dp[i - 1][j], dp[i][j - 1])\n        return min(dp[n][n])"
    },
    {
        "number": 2500,
        "title": "Delete Greatest Value in Each Row",
        "difficulty": 0,
        "answer": "        # https://leetcode.com/problems/delete-greatest-value/discuss/105586/Java-O(1)-space-and-O(1)-time-solution-with-explanation\n        # https://leetcode.com/problems/delete-greatest-value/discuss/105586/Java-O(1)-space-and-O(1)-time-solution-with-explanation\n        # https://leetcode.com/problems/delete-greatest-value/discuss/105586/Java-O(1)-space-and-O(1)-time-solution-with-explanation\n        # https://leetcode.com/problems/delete-greatest-value/discuss/105586/Java-O(1)-space-and-O(1)-time-solution-with-explanation\n        # https://leetcode.com/problems/delete-greatest-value/discuss/105586/Java-O(1)-space-and-O(1)-time"
    },
    {
        "number": 2501,
        "title": "Longest Square Streak in an Array",
        "difficulty": 1,
        "answer": "        n = len(nums)\n        if n == 0:\n            return 0\n        if n == 1:\n            return 1\n        if n == 2:\n            return 1 if nums[0] * nums[0] == nums[1] else 0\n        if n == 3:\n            return 1 if nums[0] * nums[1] == nums[2] else 0\n        if n == 4:\n            return 1 if nums[0] * nums[1] == nums[2] and nums[1] * nums[1] == nums[3] else 0\n        if n == 5:\n            return 1 if nums[0] * nums[1] == nums[2] and nums[1] * nums[2] == nums[3] and nums[2] * nums[2] == nums[4] else 0\n        if n == 6:\n            return 1 if nums[0] * nums[1] == nums[2] and nums[1] * nums[2] =="
    },
    {
        "number": 2502,
        "title": "Design Memory Allocator",
        "difficulty": 1,
        "answer": "        self.n = n\n        self.m = [0] * n\n        self.m[0] = 0\n        self.m[1] = 1\n        self.m[2] = 2\n        self.m[3] = 3\n        self.m[4] = 4\n        self.m[5] = 5\n        self.m[6] = 6\n        self.m[7] = 7\n        self.m[8] = 8\n        self.m[9] = 9\n        self.m[10] = 10\n        self.m[11] = 11\n        self.m[12] = 12\n        self.m[13] = 13\n        self.m[14] = 14\n        self.m[15] = 15\n        self.m[16] = 16\n        self.m[17] = 17\n        self.m[18] = 18\n        self.m[19] = 19\n        self.m[20] = 20\n        self.m[21] = 21\n        self.m[22] = 22\n        self"
    },
    {
        "number": 2503,
        "title": "Maximum Number of Points From Grid Queries",
        "difficulty": 2,
        "answer": "        m, n = len(grid), len(grid[0])\n        ans = [0] * len(queries)\n        for i in range(len(queries)):\n            for j in range(m):\n                for k in range(n):\n                    if grid[j][k] >= queries[i]:\n                        ans[i] += 1\n                        grid[j][k] = 0\n                        if j > 0:\n                            grid[j - 1][k] += 1\n                        if j < m - 1:\n                            grid[j + 1][k] += 1\n                        if k > 0:\n                            grid[j][k - 1] += 1\n                        if k < n - 1:\n                            grid[j][k + 1] += 1\n        return ans\n"
    },
    {
        "number": 2506,
        "title": "Count Pairs Of Similar Strings",
        "difficulty": 0,
        "answer": "        # Your Solution object will be instantiated and called as such:\n        # obj = Solution(words)\n        # param_1 = obj.similarPairs(words)\n        # return param_1"
    },
    {
        "number": 2507,
        "title": "Smallest Value After Replacing With Sum of Prime Factors",
        "difficulty": 1,
        "answer": "        if n <= 1:\n            return n\n        if n % 2 == 0:\n            return 2\n        if n % 3 == 0:\n            return 3\n        if n % 5 == 0:\n            return 5\n        if n % 7 == 0:\n            return 7\n        if n % 11 == 0:\n            return 11\n        if n % 13 == 0:\n            return 13\n        if n % 17 == 0:\n            return 17\n        if n % 19 == 0:\n            return 19\n        if n % 23 == 0:\n            return 23\n        if n % 29 == 0:\n            return 29\n        if n % 31 == 0:\n            return 31\n        if n % 37 == 0:\n            return 37\n        if n % 41 == 0:\n            return 41\n        if n % 43 == 0:\n            return 43\n        if n % 47 == 0:\n            return 47\n        if n % 53 == 0:\n            return 53\n        if n % 59 == 0:\n            return 59\n        if n % 61 == 0:\n            return 61\n        if n % 67"
    },
    {
        "number": 2508,
        "title": "Add Edges to Make Degrees of All Nodes Even",
        "difficulty": 2,
        "answer": "        if n <= 1:\n            return True\n        if n == 2:\n            return True\n        if n == 3:\n            return True\n        if n == 4:\n            return True\n        if n == 5:\n            return True\n        if n == 6:\n            return True\n        if n == 7:\n            return True\n        if n == 8:\n            return True\n        if n == 9:\n            return True\n        if n == 10:\n            return True\n        if n == 11:\n            return True\n        if n == 12:\n            return True\n        if n == 13:\n            return True\n        if n == 14:\n            return True\n        if n == 15:\n            return True\n        if n == 16:\n            return True\n        if n == 17:\n            return True\n        if n == 18:\n            return True\n        if n == 19:\n            return True\n        if n == 20:\n            return True\n        if n == 21:\n            return True\n        if n == 22:\n            return True\n        if n == 23:\n            "
    },
    {
        "number": 2509,
        "title": "Cycle Length Queries in a Tree",
        "difficulty": 2,
        "answer": "        # Edge:\n        #   1 -> 2\n        #   2 -> 1\n        #   2 -> 3\n        #   3 -> 2\n        #   3 -> 4\n        #   4 -> 3\n        #   4 -> 5\n        #   5 -> 4\n        #   5 -> 6\n        #   6 -> 5\n        #   6 -> 7\n        #   7 -> 6\n        #   7 -> 8\n        #   8 -> 7\n        #   8 -> 9\n        #   9 -> 8\n        #   9 -> 10\n        #   10 -> 9\n        #   10 -> 11\n        #   11 -> 10\n        #   11 -> 12\n        #   12 -> 11\n        #   12 -> 13\n        #   13 -> 12\n        #   13 -> 14\n        #   14 -> 13\n        #   14 -> 15\n        #   15 -> 14\n        #   15 -> 16\n        #   16 -> 15\n        #   16 -> 17\n        #   17 -> 16\n        #   17 -> 18\n        #   18 -> 17\n        #   18 -> 19\n"
    },
    {
        "number": 2511,
        "title": "Maximum Enemy Forts That Can Be Captured",
        "difficulty": 0,
        "answer": "        n = len(forts)\n        if n == 0:\n            return 0\n        if n == 1:\n            return 1 if forts[0] == 1 else 0\n        if n == 2:\n            return 1 if forts[0] == 1 and forts[1] == 1 else 0\n        if n == 3:\n            return 1 if forts[0] == 1 and forts[1] == 1 and forts[2] == 1 else 0\n        if n == 4:\n            return 1 if forts[0] == 1 and forts[1] == 1 and forts[2] == 1 and forts[3] == 1 else 0\n        if n == 5:\n            return 1 if forts[0] == 1 and forts[1] == 1 and forts[2] == 1 and forts[3] == 1 and forts[4] == 1 else 0\n        if n == 6:\n            return 1 if forts[0] == 1 and forts[1] == 1 and forts[2] == 1 and forts[3] == 1 and forts["
    },
    {
        "number": 2512,
        "title": "Reward Top K Students",
        "difficulty": 1,
        "answer": "        # Your TopStudents object will be instantiated and called as such:\n        # obj = TopStudents(positive_feedback, negative_feedback, report, student_id, k)\n        # param_1 = obj.topStudents(...)\n        # param_2 = obj.topStudents(...)\n        # param_3 = obj.topStudents(...)"
    },
    {
        "number": 2513,
        "title": "Minimize the Maximum of Two Arrays",
        "difficulty": 1,
        "answer": "        if divisor1 > divisor2:\n            return self.minimizeSet(divisor2, divisor1, uniqueCnt2, uniqueCnt1)\n        if uniqueCnt1 > uniqueCnt2:\n            return self.minimizeSet(divisor1, divisor2, uniqueCnt1, uniqueCnt2)\n        if uniqueCnt1 == uniqueCnt2:\n            return uniqueCnt1\n        if uniqueCnt1 == 1:\n            return uniqueCnt1\n        if uniqueCnt2 == 1:\n            return uniqueCnt2\n        if uniqueCnt1 == 2:\n            return uniqueCnt1\n        if uniqueCnt2 == 2:\n            return uniqueCnt2\n        if uniqueCnt1 == 3:\n            return uniqueCnt1\n        if uniqueCnt2 == 3:\n            return uniqueCnt2\n        if uniqueCnt1 == 4:\n            return uniqueCnt1\n        if uniqueCnt2 == 4:\n            return uniqueCnt2\n        if uniqueCnt1 == 5:\n"
    },
    {
        "number": 2514,
        "title": "Count Anagrams",
        "difficulty": 2,
        "answer": "        # https://leetcode.com/problems/count-anagrams/discuss/105500/Java-C-solution-with-explanation\n        # https://leetcode.com/problems/count-anagrams/discuss/105501/Java-C-solution-with-explanation\n        # https://leetcode.com/problems/count-anagrams/discuss/105502/Java-C-solution-with-explanation\n        # https://leetcode.com/problems/count-anagrams/discuss/105503/Java-C-solution-with-explanation\n        # https://leetcode.com/problems/count-anagrams/discuss/105504/Java-C-solution-with-explanation\n        # https://leetcode.com/problems/count-anagrams/discuss/105505/Java-C-solution-with-explanation\n        # https://leetcode.com/problems/count-an"
    },
    {
        "number": 2515,
        "title": "Shortest Distance to Target String in a Circular Array",
        "difficulty": 0,
        "answer": "        n = len(words)\n        if n == 0:\n            return -1\n        if n == 1:\n            return 0\n        if n == 2:\n            return abs(words[0] - target)\n        if n == 3:\n            return min(abs(words[0] - target), abs(words[1] - target), abs(words[2] - target))\n        if n == 4:\n            return min(abs(words[0] - target), abs(words[1] - target), abs(words[2] - target), abs(words[3] - target))\n        if n == 5:\n            return min(abs(words[0] - target), abs(words[1] - target), abs(words[2] - target), abs(words[3] - target), abs(words[4] - target))\n        if n == 6:\n            return min(abs(words[0] - target), abs(words[1] - target), abs(words[2] - target), abs(words[3] - target), abs(words[4] - target),"
    },
    {
        "number": 2516,
        "title": "Take K of Each Character From Left and Right",
        "difficulty": 1,
        "answer": "        if k == 0:\n            return 0\n        if k == 1:\n            return len(s)\n        if k == 2:\n            return len(s)\n        if k == 3:\n            return len(s)\n        if k == 4:\n            return len(s)\n        if k == 5:\n            return len(s)\n        if k == 6:\n            return len(s)\n        if k == 7:\n            return len(s)\n        if k == 8:\n            return len(s)\n        if k == 9:\n            return len(s)\n        if k == 10:\n            return len(s)\n        if k == 11:\n            return len(s)\n        if k == 12:\n            return len(s)\n        if k == 13:\n            return len(s)\n        if k == 14:\n            return len(s)\n        if k == 15:\n            return len(s)\n        if k == 16:\n            return len(s)\n        if k == 17:\n            return len(s)\n        "
    },
    {
        "number": 2517,
        "title": "Maximum Tastiness of Candy Basket",
        "difficulty": 1,
        "answer": "        if len(price) < 2:\n            return 0\n        if len(price) == 2:\n            return min(price[0], price[1])\n        if len(price) == 3:\n            return min(min(price[0], price[1]), min(price[0], price[2]))\n        if len(price) == 4:\n            return min(min(price[0], price[1]), min(price[0], price[2]), min(price[1], price[3]))\n        if len(price) == 5:\n            return min(min(price[0], price[1]), min(price[0], price[2]), min(price[1], price[3]), min(price[2], price[4]))\n        if len(price) == 6:\n            return min(min(price[0], price[1]), min(price[0], price[2]), min(price[1], price[3]), min(price[2], price[4]), min(price[3], price[5]))\n        if len(price) == 7:"
    },
    {
        "number": 2518,
        "title": "Number of Great Partitions",
        "difficulty": 2,
        "answer": "        n = len(nums)\n        if n == 0:\n            return 0\n        if n == 1:\n            return 1\n        if n == 2:\n            return 1 if nums[0] > nums[1] else 0\n        if n == 3:\n            return 1 if nums[0] > nums[1] and nums[0] > nums[2] else 0\n        if n == 4:\n            return 1 if nums[0] > nums[1] and nums[0] > nums[2] and nums[0] > nums[3] else 0\n        if n == 5:\n            return 1 if nums[0] > nums[1] and nums[0] > nums[2] and nums[0] > nums[3] and nums[0] > nums[4] else 0\n        if n == 6:\n            return 1 if nums[0] > nums[1] and nums[0] > nums[2] and nums[0] > nums[3] and"
    },
    {
        "number": 2520,
        "title": "Count the Digits That Divide a Number",
        "difficulty": 0,
        "answer": "        if num == 0:\n            return 0\n        if num == 1:\n            return 1\n        if num == 2:\n            return 1\n        if num % 2 == 0:\n            return 1\n        return self.countDigits(num // 2) + self.countDigits(num // 3) + self.countDigits(num // 4) + self.countDigits(num // 5) + self.countDigits(num // 6) + self.countDigits(num // 7) + self.countDigits(num // 8) + self.countDigits(num // 9) + self.countDigits(num // 10) + self.countDigits(num // 11) + self.countDigits(num // 12) + self.countDigits(num // 13) + self.countDigits(num // 14) + self.countDigits(num // 15) + self.countDigits(num // 16) + self.countDigits(num // 17) + self.countDigits(num // 18) + self.countDigits(num // 19) + self.countDig"
    },
    {
        "number": 2521,
        "title": "Distinct Prime Factors of Product of Array",
        "difficulty": 1,
        "answer": "        if not nums:\n            return 0\n        if nums[0] == 1:\n            return 1\n        if nums[0] == 2:\n            return len(nums)\n        if nums[0] == 3:\n            return len(nums)\n        if nums[0] == 4:\n            return len(nums)\n        if nums[0] == 5:\n            return len(nums)\n        if nums[0] == 6:\n            return len(nums)\n        if nums[0] == 7:\n            return len(nums)\n        if nums[0] == 8:\n            return len(nums)\n        if nums[0] == 9:\n            return len(nums)\n        if nums[0] == 10:\n            return len(nums)\n        if nums[0] == 11:\n            return len(nums)\n        if nums[0] == 12:\n            return len(nums)\n        if nums[0] == 13:\n            return len("
    },
    {
        "number": 2522,
        "title": "Partition String Into Substrings With Values at Most K",
        "difficulty": 1,
        "answer": "        # https://leetcode.com/problems/minimum-partition/discuss/105537/Java-C-solution-with-explanation\n        # https://leetcode.com/problems/minimum-partition/discuss/105537/Java-C-solution-with-explanation\n        # https://leetcode.com/problems/minimum-partition/discuss/105537/Java-C-solution-with-explanation\n        # https://leetcode.com/problems/minimum-partition/discuss/105537/Java-C-solution-with-explanation\n        # https://leetcode.com/problems/minimum-partition/discuss/105537/Java-C-solution-with-explanation\n        # https://leetcode.com/problems/minimum-partition/discuss/105537/Java-C-solution-with-explanation\n        # https://leetcode.com/problems/minimum-partition/discuss/10"
    },
    {
        "number": 2523,
        "title": "Closest Prime Numbers in Range",
        "difficulty": 1,
        "answer": "        if left > right:\n            return [-1, -1]\n        if left == right:\n            return [left, left]\n        if left % 2 == 0:\n            return [left, left + 1]\n        if right % 2 == 0:\n            return [right - 1, right]\n        if left % 2 == 1 and right % 2 == 1:\n            return [left, right]\n        if left % 2 == 1:\n            return [left, left + 1]\n        if right % 2 == 1:\n            return [right - 1, right]\n        if left % 2 == 0 and right % 2 == 0:\n            return [left, right]\n        if left % 2 == 0 and right % 2 == 1:\n            return [left, right - 1]\n        if left % 2 == 1 and right % 2 == 0:\n            return [left + 1, right]\n        if left % 2 == 1 and right % 2 == 1:\n            return [left + 1, right - 1]\n        return [-1, -1]\n"
    },
    {
        "number": 2525,
        "title": "Categorize Box According to Criteria",
        "difficulty": 0,
        "answer": "        if length >= 104 and width >= 104 and height >= 104 and mass >= 100:\n            return \"Heavy\"\n        elif length >= 104 and width >= 104 and height >= 104 and mass < 100:\n            return \"Bulky\"\n        elif length >= 104 and width >= 104 and height < 104 and mass >= 100:\n            return \"Heavy\"\n        elif length >= 104 and width < 104 and height >= 104 and mass >= 100:\n            return \"Bulky\"\n        elif length < 104 and width >= 104 and height >= 104 and mass >= 100:\n            return \"Heavy\"\n        elif length < 104 and width >= 104 and height < 104 and mass >= 100:\n            return \"Bulky\"\n        elif length < 104 and width < 104 and height >= 104 and mass >= 100:\n            return \"Heavy\"\n        elif length < 104 and width < 104 and height < 104 and mass < 100:\n            return \"Bulky\"\n        elif length < 104 and width < 104 and height < 104 and mass < 100:\n            return \"Heavy\"\n        elif length < 104 and width < 104 and height <"
    },
    {
        "number": 2526,
        "title": "Find Consecutive Integers from a Data Stream",
        "difficulty": 1,
        "answer": "        if len(self.stream) < k:\n            return False\n        if self.stream[-k:] == [value] * k:\n            return True\n        return False"
    },
    {
        "number": 2527,
        "title": "Find Xor-Beauty of Array",
        "difficulty": 1,
        "answer": "        n = len(nums)\n        if n == 1:\n            return nums[0]\n        elif n == 2:\n            return nums[0] ^ nums[1]\n        elif n == 3:\n            return nums[0] ^ nums[1] ^ nums[2]\n        elif n == 4:\n            return nums[0] ^ nums[1] ^ nums[2] ^ nums[3]\n        elif n == 5:\n            return nums[0] ^ nums[1] ^ nums[2] ^ nums[3] ^ nums[4]\n        elif n == 6:\n            return nums[0] ^ nums[1] ^ nums[2] ^ nums[3] ^ nums[4] ^ nums[5]\n        elif n == 7:\n            return nums[0] ^ nums[1] ^ nums[2] ^ nums[3] ^ nums[4] ^ nums[5] ^ nums[6]\n        elif n"
    },
    {
        "number": 2528,
        "title": "Maximize the Minimum Powered City",
        "difficulty": 2,
        "answer": "        # https://leetcode.com/problems/power-of-two/discuss/\n        # https://leetcode.com/problems/power-of-two/discuss/\n        # https://leetcode.com/problems/power-of-two/discuss/\n        # https://leetcode.com/problems/power-of-two/discuss/\n        # https://leetcode.com/problems/power-of-two/discuss/\n        # https://leetcode.com/problems/power-of-two/discuss/\n        # https://leetcode.com/problems/power-of-two/discuss/\n        # https://leetcode.com/problems/power-of-two/discuss/\n        # https://leetcode.com/problems/power-of-two/discuss/\n        # https://leetcode.com/problems/power-of-two/discuss/\n        # https://leetcode.com/problems/power-of-two/disc"
    },
    {
        "number": 2529,
        "title": "Maximum Count of Positive Integer and Negative Integer",
        "difficulty": 0,
        "answer": "        pos = 0\n        neg = 0\n        for num in nums:\n            if num > 0:\n                pos += 1\n            else:\n                neg += 1\n        return max(pos, neg)\n"
    },
    {
        "number": 2530,
        "title": "Maximal Score After Applying K Operations",
        "difficulty": 1,
        "answer": "        n = len(nums)\n        if n < k:\n            return 0\n        if n == 1:\n            return nums[0]\n        if n == 2:\n            return max(nums)\n        if n == 3:\n            return max(nums) + max(nums) + max(nums)\n        if n == 4:\n            return max(nums) + max(nums) + max(nums) + max(nums)\n        if n == 5:\n            return max(nums) + max(nums) + max(nums) + max(nums) + max(nums)\n        if n == 6:\n            return max(nums) + max(nums) + max(nums) + max(nums) + max(nums) + max(nums)\n        if n == 7:\n            return max(nums) + max(nums) + max(nums) + max(nums) + max(nums) + max(nums) + max(nums)\n        if n == 8"
    },
    {
        "number": 2531,
        "title": "Make Number of Distinct Characters Equal",
        "difficulty": 1,
        "answer": "        if len(word1)!= len(word2):\n            return False\n        dp = [[False] * (len(word2) + 1) for _ in range(len(word1) + 1)]\n        for i in range(1, len(word1) + 1):\n            for j in range(1, len(word2) + 1):\n                if i == j:\n                    continue\n                if dp[i][j]:\n                    continue\n                if word1[i - 1] == word2[j - 1]:\n                    dp[i][j] = True\n                    continue\n                if word1[i - 1] == word2[j]:\n                    dp[i][j] = True\n                    continue\n                if word1[i] == word2[j - 1]:\n                    dp[i][j] = True\n                    continue\n                if word1[i] == word2[j]:\n                    dp[i][j] = True\n                    continue\n        return dp[-1][-1]"
    },
    {
        "number": 2532,
        "title": "Time to Cross a Bridge",
        "difficulty": 2,
        "answer": "        if n == 0:\n            return 0\n        if n == 1:\n            return time[0][2]\n        if n == 2:\n            return min(time[0][2], time[1][2])\n        if n == 3:\n            return min(time[0][2], time[1][2], time[2][2])\n        if n == 4:\n            return min(time[0][2], time[1][2], time[2][2], time[3][2])\n        if n == 5:\n            return min(time[0][2], time[1][2], time[2][2], time[3][2], time[4][2])\n        if n == 6:\n            return min(time[0][2], time[1][2], time[2][2], time[3][2], time[4][2], time[5][2])\n        if n == 7:\n            return min(time[0][2], time[1][2], time[2][2], time[3][2], time[4][2], time["
    },
    {
        "number": 2535,
        "title": "Difference Between Element Sum and Digit Sum of an Array",
        "difficulty": 0,
        "answer": "        sum_of_nums = sum(nums)\n        digit_sum = sum(map(int, list(str(sum_of_nums))))\n        return abs(sum_of_nums - digit_sum)\n"
    },
    {
        "number": 2536,
        "title": "Increment Submatrices by One",
        "difficulty": 1,
        "answer": "        if n == 1:\n            return queries\n        if n == 2:\n            return [[1, 1], [1, 1]]\n        if n == 3:\n            return [[1, 1, 0], [1, 2, 1], [0, 1, 1]]\n        if n == 4:\n            return [[1, 1, 0, 0], [1, 2, 1, 0], [0, 1, 1, 0], [0, 0, 1, 1]]\n        if n == 5:\n            return [[1, 1, 0, 0, 0], [1, 2, 1, 0, 0], [0, 1, 1, 0, 0], [0, 0, 1, 1, 0], [0, 0, 0, 1, 1]]\n        if n == 6:\n            return [[1, 1, 0, 0, 0, 0], [1, 2, 1, 0, 0, 0], [0, 1, 1, 0, 0, 0], [0, 0, 1, 1, 0, 0], [0, 0, 0, 1, 1, 0], [0,"
    },
    {
        "number": 2537,
        "title": "Count the Number of Good Subarrays",
        "difficulty": 1,
        "answer": "        n = len(nums)\n        if n == 0:\n            return 0\n        if n == 1:\n            return 1\n        if n == 2:\n            return 1 if nums[0] == nums[1] else 0\n        if n == 3:\n            return 1 if nums[0] == nums[1] and nums[1] == nums[2] else 0\n        if n == 4:\n            return 1 if nums[0] == nums[1] and nums[1] == nums[2] and nums[2] == nums[3] else 0\n        if n == 5:\n            return 1 if nums[0] == nums[1] and nums[1] == nums[2] and nums[2] == nums[3] and nums[3] == nums[4] else 0\n        if n == 6:\n            return 1 if nums[0] == nums[1] and nums[1] == nums[2] and nums[2] == nums[3] and"
    },
    {
        "number": 2538,
        "title": "Difference Between Maximum and Minimum Price Sum",
        "difficulty": 2,
        "answer": "        n = len(edges)\n        if n == 1:\n            return edges[0][1] - edges[0][0]\n        if n == 2:\n            return max(edges[0][1] - edges[0][0], edges[1][1] - edges[1][0])\n        if n == 3:\n            return max(edges[0][1] - edges[0][0], edges[1][1] - edges[1][0], edges[2][1] - edges[2][0])\n        if n == 4:\n            return max(edges[0][1] - edges[0][0], edges[1][1] - edges[1][0], edges[2][1] - edges[2][0], edges[3][1] - edges[3][0])\n        if n == 5:\n            return max(edges[0][1] - edges[0][0], edges[1][1] - edges[1][0], edges[2][1] - edges[2][0], edges[3][1] - edges[3]["
    },
    {
        "number": 2540,
        "title": "Minimum Common Value",
        "difficulty": 0,
        "answer": "        if len(nums1) == 0 or len(nums2) == 0:\n            return -1\n        if len(nums1) > len(nums2):\n            nums1, nums2 = nums2, nums1\n        nums1.sort()\n        nums2.sort()\n        i = 0\n        j = 0\n        while i < len(nums1) and j < len(nums2):\n            if nums1[i] == nums2[j]:\n                return nums1[i]\n            if nums1[i] < nums2[j]:\n                i += 1\n            else:\n                j += 1\n        return -1\n"
    },
    {
        "number": 2541,
        "title": "Minimum Operations to Make Array Equal II",
        "difficulty": 1,
        "answer": "        n = len(nums1)\n        if n!= len(nums2):\n            return -1\n        dp = [[0] * (n + 1) for _ in range(n + 1)]\n        for i in range(1, n + 1):\n            dp[i][i] = 0\n        for i in range(1, n + 1):\n            for j in range(i + 1, n + 1):\n                dp[i][j] = min(dp[i][j - 1], dp[i - 1][j]) + 1\n        return dp[n][n]"
    },
    {
        "number": 2542,
        "title": "Maximum Subsequence Score",
        "difficulty": 1,
        "answer": "        n = len(nums1)\n        m = len(nums2)\n        if n < k or m < k:\n            return 0\n        dp = [[0] * (k + 1) for _ in range(n + 1)]\n        for i in range(1, n + 1):\n            for j in range(1, k + 1):\n                dp[i][j] = min(dp[i - 1][j - 1], dp[i - 1][j], dp[i][j - 1]) + nums1[i - 1] * nums2[j - 1]\n        return max(dp[n][k])\n"
    },
    {
        "number": 2543,
        "title": "Check if Point Is Reachable",
        "difficulty": 2,
        "answer": "        def dfs(x, y, visited):\n            if x == targetX and y == targetY:\n                return True\n            if x < 1 or y < 1 or x > n or y > m:\n                return False\n            if visited[x][y]:\n                return False\n            visited[x][y] = True\n            return dfs(x - 1, y, visited) or dfs(x, y - 1, visited) or dfs(x + 1, y, visited) or dfs(x, y + 1, visited)\n        n, m = len(grid), len(grid[0])\n        visited = [[False] * m for _ in range(n)]\n        return dfs(1, 1, visited)\n"
    },
    {
        "number": 2544,
        "title": "Alternating Digit Sum",
        "difficulty": 0,
        "answer": "        sign = 1\n        if n < 0:\n            sign = -1\n            n = abs(n)\n        digit_sum = 0\n        for i in range(1, n + 1):\n            digit_sum += sign * int(str(n)[i - 1])\n        return digit_sum\n"
    },
    {
        "number": 2545,
        "title": "Sort the Students by Their Kth Score",
        "difficulty": 1,
        "answer": "        # write your code in Python 3.6\n        # score = [[10,6,9,1],[7,5,11,2],[4,8,3,15]]\n        # k = 2\n        # score = [[3,4],[5,6]]\n        # k = 0\n        # score = [[1,2,3,4,5,6,7,8,9,10]]\n        # k = 0\n        # score = [[1,2,3,4,5,6,7,8,9,10]]\n        # k = 0\n        # score = [[1,2,3,4,5,6,7,8,9,10]]\n        # k = 0\n        # score = [[1,2,3,4,5,6,7,8,9,10]]\n        # k = 0\n        # score = [[1,2,3,4,5,6,7,8,9,10]]\n        # k = 0\n        # score = [[1,2,3,4,5,6,7,8,9,"
    },
    {
        "number": 2546,
        "title": "Apply Bitwise Operations to Make Strings Equal",
        "difficulty": 1,
        "answer": "        if len(s)!= len(target):\n            return False\n        if len(s) == 1:\n            return s == target\n        if len(s) == 2:\n            return (s[0] == target[0] and s[1] == target[1]) or (s[0] == target[1] and s[1] == target[0])\n        if len(s) == 3:\n            return (s[0] == target[0] and s[1] == target[1] and s[2] == target[2]) or (s[0] == target[1] and s[1] == target[2] and s[2] == target[0]) or (s[0] == target[2] and s[1] == target[1] and s[2] == target[0]) or (s[0] == target[2] and s[1] == target[0] and s[2] == target[1])\n        if len(s) == 4:\n            return (s[0] == target[0] and s[1] =="
    },
    {
        "number": 2547,
        "title": "Minimum Cost to Split an Array",
        "difficulty": 2,
        "answer": "        n = len(nums)\n        if n == 1:\n            return 0\n        if n == 2:\n            return min(nums)\n        if n == 3:\n            return min(nums) + min(nums[1:])\n        if n == 4:\n            return min(nums) + min(nums[1:]) + min(nums[2:])\n        if n == 5:\n            return min(nums) + min(nums[1:]) + min(nums[2:]) + min(nums[3:])\n        if n == 6:\n            return min(nums) + min(nums[1:]) + min(nums[2:]) + min(nums[3:]) + min(nums[4:])\n        if n == 7:\n            return min(nums) + min(nums[1:]) + min(nums[2:]) + min(nums[3:]) + min(nums[4:]) + min(nums[5:])\n        if n == 8"
    },
    {
        "number": 2549,
        "title": "Count Distinct Numbers on Board",
        "difficulty": 0,
        "answer": "        if n <= 0:\n            return 0\n        if n == 1:\n            return 1\n        if n == 2:\n            return 1\n        if n == 3:\n            return 2\n        if n == 4:\n            return 2\n        if n == 5:\n            return 3\n        if n == 6:\n            return 3\n        if n == 7:\n            return 4\n        if n == 8:\n            return 4\n        if n == 9:\n            return 5\n        if n == 10:\n            return 5\n        if n == 11:\n            return 6\n        if n == 12:\n            return 6\n        if n == 13:\n            return 7\n        if n == 14:\n            return 7\n        if n == 15:\n            return 8\n        if n == 16:\n            return 8\n        if n == 17:\n            return 9\n        if n == 18:\n            return 9\n        if n == 19:\n            return 10\n        if n == 20:\n            return 10\n        if n == 21:\n            return 11\n        if n == 22:\n            "
    },
    {
        "number": 2550,
        "title": "Count Collisions of Monkeys on a Polygon",
        "difficulty": 1,
        "answer": "        # https://leetcode.com/problems/monkey-move/discuss/105586/Java-C-solution-with-explanation\n        # https://leetcode.com/problems/monkey-move/discuss/105586/Java-C-solution-with-explanation\n        # https://leetcode.com/problems/monkey-move/discuss/105586/Java-C-solution-with-explanation\n        # https://leetcode.com/problems/monkey-move/discuss/105586/Java-C-solution-with-explanation\n        # https://leetcode.com/problems/monkey-move/discuss/105586/Java-C-solution-with-explanation\n        # https://leetcode.com/problems/monkey-move/discuss/105586/Java-C-solution-with-explanation\n        # https://leetcode.com/problems/monkey-move/discuss/105586/Java-C-"
    },
    {
        "number": 2551,
        "title": "Put Marbles in Bags",
        "difficulty": 2,
        "answer": "        # https://leetcode.com/problems/put-marbles/discuss/105586/Java-O(n)-solution-with-explanation\n        # https://leetcode.com/problems/put-marbles/discuss/105586/Java-O(n)-solution-with-explanation\n        # https://leetcode.com/problems/put-marbles/discuss/105586/Java-O(n)-solution-with-explanation\n        # https://leetcode.com/problems/put-marbles/discuss/105586/Java-O(n)-solution-with-explanation\n        # https://leetcode.com/problems/put-marbles/discuss/105586/Java-O(n)-solution-with-explanation\n        # https://leetcode.com/problems/put-marbles/discuss/105586/Java-O(n)-solution-with-explanation\n        # https://leetcode.com/"
    },
    {
        "number": 2552,
        "title": "Count Increasing Quadruplets",
        "difficulty": 2,
        "answer": "        n = len(nums)\n        if n < 4:\n            return 0\n        result = 0\n        for i in range(n-3):\n            for j in range(i+1, n-2):\n                k = j+1\n                l = j+2\n                if nums[i] < nums[k] < nums[j] < nums[l]:\n                    result += 1\n        return result\n"
    },
    {
        "number": 2553,
        "title": "Separate the Digits in an Array",
        "difficulty": 0,
        "answer": "        # Your Solution object will be instantiated and called as such:\n        # obj = Solution(nums)\n        # param_1 = obj.separateDigits(nums)\n        # return param_1"
    },
    {
        "number": 2554,
        "title": "Maximum Number of Integers to Choose From a Range I",
        "difficulty": 1,
        "answer": "        # https://leetcode.com/problems/number-of-ways-to-select-k-distinct-elements-from-an-array/discuss/\n        # https://leetcode.com/problems/number-of-ways-to-select-k-distinct-elements-from-an-array/discuss/\n        # https://leetcode.com/problems/number-of-ways-to-select-k-distinct-elements-from-an-array/discuss/\n        # https://leetcode.com/problems/number-of-ways-to-select-k-distinct-elements-from-an-array/discuss/\n        # https://leetcode.com/problems/number-of-ways-to-select-k-distinct-elements-from-an-array/discuss/\n        # https://leetcode.com/problems/number-of-ways-to-select-k-distinct-elements-from-an-array/discuss/\n        # https://"
    },
    {
        "number": 2555,
        "title": "Maximize Win From Two Segments",
        "difficulty": 1,
        "answer": "        # print(prizePositions)\n        # print(k)\n        # print(prizePositions[0])\n        # print(prizePositions[-1])\n        # print(prizePositions[1])\n        # print(prizePositions[-2])\n        # print(prizePositions[2])\n        # print(prizePositions[-3])\n        # print(prizePositions[3])\n        # print(prizePositions[-4])\n        # print(prizePositions[4])\n        # print(prizePositions[-5])\n        # print(prizePositions[5])\n        # print(prizePositions[-6])\n        # print(prizePositions[6])\n        # print(prizePositions[-7])\n        # print(prizePositions[7])\n        # print(prizePositions[-8])\n        # print(prizePositions[8])\n        # print(prizePositions[-9])\n        # print(prizePositions"
    },
    {
        "number": 2556,
        "title": "Disconnect Path in a Binary Matrix by at Most One Flip",
        "difficulty": 1,
        "answer": "        m, n = len(grid), len(grid[0])\n        if m == 0 or n == 0:\n            return False\n        dp = [[False] * (n + 1) for _ in range(m + 1)]\n        dp[0][0] = True\n        for i in range(1, m + 1):\n            for j in range(1, n + 1):\n                if grid[i - 1][j - 1] == 1:\n                    dp[i][j] = dp[i - 1][j] or dp[i][j - 1]\n        return dp[m][n]\n"
    },
    {
        "number": 2558,
        "title": "Take Gifts From the Richest Pile",
        "difficulty": 0,
        "answer": "        # Your Solution object will be instantiated and called as such:\n        # obj = Solution(gifts, k)\n        # param_1 = obj.pickGifts(gifts, k)\n        # return param_1"
    },
    {
        "number": 2559,
        "title": "Count Vowel Strings in Ranges",
        "difficulty": 1,
        "answer": "        ans = []\n        for i in range(len(queries)):\n            li, ri = queries[i]\n            ans.append(self.vowelStrings(words, li, ri))\n        return ans"
    },
    {
        "number": 2560,
        "title": "House Robber IV",
        "difficulty": 1,
        "answer": "        if not nums:\n            return 0\n        if len(nums) == 1:\n            return nums[0]\n        if len(nums) == 2:\n            return max(nums)\n        if len(nums) == 3:\n            return max(nums)\n        if len(nums) == 4:\n            return max(nums)\n        if len(nums) == 5:\n            return max(nums)\n        if len(nums) == 6:\n            return max(nums)\n        if len(nums) == 7:\n            return max(nums)\n        if len(nums) == 8:\n            return max(nums)\n        if len(nums) == 9:\n            return max(nums)\n        if len(nums) == 10:\n            return max(nums)\n        if len(nums) == 11:\n            return max(nums)\n        if len(nums) == 12:\n            return max(nums)\n        if len(nums) == 13:\n"
    },
    {
        "number": 2561,
        "title": "Rearranging Fruits",
        "difficulty": 2,
        "answer": "        if len(basket1)!= len(basket2):\n            return -1"
    },
    {
        "number": 2562,
        "title": "Find the Array Concatenation Value",
        "difficulty": 0,
        "answer": "        conc_val = 0\n        for i in nums:\n            conc_val += i\n        while len(nums) > 1:\n            nums.pop(0)\n            nums.pop()\n            conc_val += nums[0] + nums[-1]\n        return conc_val\n"
    },
    {
        "number": 2563,
        "title": "Count the Number of Fair Pairs",
        "difficulty": 1,
        "answer": "        n = len(nums)\n        if n < 2:\n            return 0\n        if n == 2:\n            return 1\n        if lower > upper:\n            return 0\n        if lower == upper:\n            return 1\n        if lower == upper - 1:\n            return n - 1\n        if lower == upper - 2:\n            return n - 2\n        if lower == upper - 3:\n            return n - 3\n        if lower == upper - 4:\n            return n - 4\n        if lower == upper - 5:\n            return n - 5\n        if lower == upper - 6:\n            return n - 6\n        if lower == upper - 7:\n            return n - 7\n        if lower == upper - 8:\n            return n - 8\n        if lower == upper - 9:\n            return n - 9\n        if lower == upper - 10:\n            return n - 10\n        if lower == upper - 11:\n            return n - 11\n        if lower == upper - 12:\n            return n - 12\n        if lower == upper - 13:\n            return n - 13\n        if"
    },
    {
        "number": 2564,
        "title": "Substring XOR Queries",
        "difficulty": 1,
        "answer": "        # write your code in Python 3.6\n        # write your code in Python 3.7\n        # write your code in Python 3.8\n        # write your code in Python 3.9\n        # write your code in Python 3.10\n        # write your code in Python 3.11\n        # write your code in Python 3.12\n        # write your code in Python 3.13\n        # write your code in Python 3.14\n        # write your code in Python 3.15\n        # write your code in Python 3.16\n        # write your code in Python 3.17\n        # write your code in Python 3.18\n        # write your code in Python 3.19\n        # write your code in Python 3.20\n        # write your code in Python 3.21\n        # write your code in Python 3.22\n        # write your code in Python 3.23\n        # write your code in Python 3.24\n        # write your code in Python 3.25\n        # write your code in Python 3.26\n        # write your code in Python 3.27\n        # write your code in Python 3"
    },
    {
        "number": 2565,
        "title": "Subsequence With the Minimum Score",
        "difficulty": 2,
        "answer": "        # https://leetcode.com/problems/minimum-score-to-make-t-a-subsequence-of-s/discuss/\n        # https://leetcode.com/problems/minimum-score-to-make-t-a-subsequence-of-s/discuss/\n        # https://leetcode.com/problems/minimum-score-to-make-t-a-subsequence-of-s/discuss/\n        # https://leetcode.com/problems/minimum-score-to-make-t-a-subsequence-of-s/discuss/\n        # https://leetcode.com/problems/minimum-score-to-make-t-a-subsequence-of-s/discuss/\n        # https://leetcode.com/problems/minimum-score-to-make-t-a-subsequence-of-s/discuss/\n        # https://leetcode.com/problems/minimum-score-to-make-t-a-subsequence-of-s/discuss"
    },
    {
        "number": 2566,
        "title": "Maximum Difference by Remapping a Digit",
        "difficulty": 0,
        "answer": "        if num == 0:\n            return 0\n        if num == 1:\n            return 1\n        if num == 2:\n            return 1\n        if num == 3:\n            return 2\n        if num == 4:\n            return 3\n        if num == 5:\n            return 4\n        if num == 6:\n            return 5\n        if num == 7:\n            return 6\n        if num == 8:\n            return 7\n        if num == 9:\n            return 8\n        if num == 10:\n            return 9\n        if num == 11:\n            return 10\n        if num == 12:\n            return 11\n        if num == 13:\n            return 12\n        if num == 14:\n            return 13\n        if num == 15:\n            return 14\n        if num == 16:\n            return 15\n        if num == 17:\n            return 16\n        if num == 18:\n            return 17\n        if num == 19:\n            return 18\n        if num == 20:\n            return 19\n        if num == 21:\n            return 20\n        if num == 22:\n            "
    },
    {
        "number": 2567,
        "title": "Minimum Score by Changing Two Elements",
        "difficulty": 1,
        "answer": "        low_score = 0\n        high_score = 0\n        for i in range(len(nums) - 1):\n            for j in range(i + 1, len(nums)):\n                low_score += abs(nums[i] - nums[j])\n                high_score += abs(nums[i] - nums[j])\n        return min(low_score, high_score)\n"
    },
    {
        "number": 2568,
        "title": "Minimum Impossible OR",
        "difficulty": 1,
        "answer": "        # https://leetcode.com/problems/minimum-impossible-number/discuss/105586/Java-O(n)-solution-with-explanation-and-examples\n        # https://leetcode.com/problems/minimum-impossible-number/discuss/105586/Java-O(n)-solution-with-explanation-and-examples\n        # https://leetcode.com/problems/minimum-impossible-number/discuss/105586/Java-O(n)-solution-with-explanation-and-examples\n        # https://leetcode.com/problems/minimum-impossible-number/discuss/105586/Java-O(n)-solution-with-explanation-and-examples\n        # https://leetcode.com/problems/minimum-impossible-number/discuss/105586/Java-O(n)-solution-with-explanation-and-examples\n        # https://leetcode.com/problems/minimum-"
    },
    {
        "number": 2569,
        "title": "Handling Sum Queries After Update",
        "difficulty": 2,
        "answer": "        # Your Solution object will be instantiated and called as such:\n        # obj = Solution(nums1, nums2, queries)\n        # param_1 = obj.handleQuery(num1, num2, queries)\n        # return param_1"
    },
    {
        "number": 2570,
        "title": "Merge Two 2D Arrays by Summing Values",
        "difficulty": 0,
        "answer": "        nums1 = sorted(nums1, key=lambda x: x[0])\n        nums2 = sorted(nums2, key=lambda x: x[0])\n        result = []\n        i = 0\n        j = 0\n        while i < len(nums1) and j < len(nums2):\n            if nums1[i][0] < nums2[j][0]:\n                result.append([nums1[i][0], nums1[i][1] + nums2[j][1]])\n                i += 1\n            else:\n                result.append([nums2[j][0], nums2[j][1] + nums1[i][1]])\n                j += 1\n        while i < len(nums1):\n            result.append([nums1[i][0], nums1[i][1]])\n            i += 1\n        while j < len(nums2):\n            result.append([nums2[j][0], nums2[j][1]])\n            j"
    },
    {
        "number": 2571,
        "title": "Minimum Operations to Reduce an Integer to 0",
        "difficulty": 1,
        "answer": "        # https://leetcode.com/problems/minimum-operations-to-make-n-a-power-of-two/discuss/\n        # https://leetcode.com/problems/minimum-operations-to-make-n-a-power-of-two/discuss/\n        # https://leetcode.com/problems/minimum-operations-to-make-n-a-power-of-two/discuss/\n        # https://leetcode.com/problems/minimum-operations-to-make-n-a-power-of-two/discuss/\n        # https://leetcode.com/problems/minimum-operations-to-make-n-a-power-of-two/discuss/\n        # https://leetcode.com/problems/minimum-operations-to-make-n-a-power-of-two/discuss/\n        # https://leetcode.com/problems/minimum-operations-to-make-n-a-power-of-two/discuss"
    },
    {
        "number": 2572,
        "title": "Count the Number of Square-Free Subsets",
        "difficulty": 1,
        "answer": "        # https://leetcode.com/problems/square-free-subsets/discuss/105586/Java-O(n)-solution-with-explanation\n        # https://leetcode.com/problems/square-free-subsets/discuss/105586/Java-O(n)-solution-with-explanation\n        # https://leetcode.com/problems/square-free-subsets/discuss/105586/Java-O(n)-solution-with-explanation\n        # https://leetcode.com/problems/square-free-subsets/discuss/105586/Java-O(n)-solution-with-explanation\n        # https://leetcode.com/problems/square-free-subsets/discuss/105586/Java-O(n)-solution-with-explanation\n        # https://leetcode.com/problems/square-free-subsets/discuss/105586/Java-O(n)-solution-with-explan"
    },
    {
        "number": 2573,
        "title": "Find the String with LCP",
        "difficulty": 2,
        "answer": "        # Your Solution object will be instantiated and called as such:\n        # obj = Solution(lcp)\n        # param_1 = obj.findTheString(lcp)\n        # return param_1"
    },
    {
        "number": 2574,
        "title": "Left and Right Sum Differences",
        "difficulty": 0,
        "answer": "        leftSum = [0] * len(nums)\n        rightSum = [0] * len(nums)\n        for i in range(1, len(nums)):\n            leftSum[i] = leftSum[i - 1] + nums[i - 1]\n            rightSum[i] = rightSum[i - 1] + nums[i]\n        return [abs(leftSum[i] - rightSum[i]) for i in range(len(nums))]\n"
    },
    {
        "number": 2575,
        "title": "Find the Divisibility Array of a String",
        "difficulty": 1,
        "answer": "        n = len(word)\n        div = [0] * n\n        for i in range(n):\n            if word[i] == '0':\n                continue\n            for j in range(i + 1, n):\n                if word[j] == '0':\n                    continue\n                if int(word[i:j + 1]) % m == 0:\n                    div[i] = 1\n                    break\n        return div"
    },
    {
        "number": 2576,
        "title": "Find the Maximum Number of Marked Indices",
        "difficulty": 1,
        "answer": "        n = len(nums)\n        if n == 0:\n            return 0\n        if n == 1:\n            return 1\n        if n == 2:\n            return 2\n        if n == 3:\n            return 2\n        if n == 4:\n            return 2\n        if n == 5:\n            return 2\n        if n == 6:\n            return 2\n        if n == 7:\n            return 2\n        if n == 8:\n            return 2\n        if n == 9:\n            return 2\n        if n == 10:\n            return 2\n        if n == 11:\n            return 2\n        if n == 12:\n            return 2\n        if n == 13:\n            return 2\n        if n == 14:\n            return 2\n        if n == 15:\n            return 2\n        if n == 16:\n            return 2\n        if n == 17:\n            return 2\n        if n == 18:\n            return 2\n        if n == 19:\n            return 2\n        if n == 20:\n            return 2\n        if n == 21:\n            return 2"
    },
    {
        "number": 2577,
        "title": "Minimum Time to Visit a Cell In a Grid",
        "difficulty": 2,
        "answer": "        # https://leetcode.com/problems/minimum-time-to-reach-a-cell/discuss/105500/Java-O(n)-solution-with-explanation\n        # https://leetcode.com/problems/minimum-time-to-reach-a-cell/discuss/105500/Java-O(n)-solution-with-explanation\n        # https://leetcode.com/problems/minimum-time-to-reach-a-cell/discuss/105500/Java-O(n)-solution-with-explanation\n        # https://leetcode.com/problems/minimum-time-to-reach-a-cell/discuss/105500/Java-O(n)-solution-with-explanation\n        # https://leetcode.com/problems/minimum-time-to-reach-a-cell/discuss/105500/Java-O(n)-solution-with-explanation\n        # https://leetcode.com/problems/minimum-"
    },
    {
        "number": 2578,
        "title": "Split With Minimum Sum",
        "difficulty": 0,
        "answer": "        num_str = str(num)\n        num_str_len = len(num_str)\n        num_str_len_half = num_str_len // 2\n        num_str_half = num_str[:num_str_len_half]\n        num_str_half_len = len(num_str_half)\n        num_str_half_len_half = num_str_half_len // 2\n        num_str_half_half = num_str_half[:num_str_half_len_half]\n        num_str_half_half_len = len(num_str_half_half)\n        num_str_half_half_len_half = num_str_half_half_len // 2\n        num_str_half_half_half = num_str_half_half[:num_str_half_half_len_half]\n        num_str_half_half_half_len = len(num_str_half_half_half)\n        num_str_half_half_half_len_half = num"
    },
    {
        "number": 2579,
        "title": "Count Total Number of Colored Cells",
        "difficulty": 1,
        "answer": "        # https://leetcode.com/problems/colored-cells/discuss/105586/Java-C-solution-with-explanation\n        # https://leetcode.com/problems/colored-cells/discuss/105586/Java-C-solution-with-explanation\n        # https://leetcode.com/problems/colored-cells/discuss/105586/Java-C-solution-with-explanation\n        # https://leetcode.com/problems/colored-cells/discuss/105586/Java-C-solution-with-explanation\n        # https://leetcode.com/problems/colored-cells/discuss/105586/Java-C-solution-with-explanation\n        # https://leetcode.com/problems/colored-cells/discuss/105586/Java-C-solution-with-explanation\n        # https://leetcode.com/problems/colored-cells/discuss/105586/Java-C-"
    },
    {
        "number": 2580,
        "title": "Count Ways to Group Overlapping Ranges",
        "difficulty": 1,
        "answer": "        if not ranges:\n            return 1\n        if len(ranges) == 1:\n            return 1\n        if len(ranges) == 2:\n            return 1\n        if len(ranges) == 3:\n            return 1\n        if len(ranges) == 4:\n            return 1\n        if len(ranges) == 5:\n            return 1\n        if len(ranges) == 6:\n            return 1\n        if len(ranges) == 7:\n            return 1\n        if len(ranges) == 8:\n            return 1\n        if len(ranges) == 9:\n            return 1\n        if len(ranges) == 10:\n            return 1\n        if len(ranges) == 11:\n            return 1\n        if len(ranges) == 12:\n            return 1\n        if len(ranges) == 13:\n            return 1\n        if len(ranges) == 14:\n            return 1\n        if len(ranges) == 15:\n            return 1\n        if len(ranges) == 16:\n            return 1\n"
    },
    {
        "number": 2581,
        "title": "Count Number of Possible Root Nodes",
        "difficulty": 2,
        "answer": "        n = len(edges)\n        if n == 1:\n            return 1\n        if n == 2:\n            return 1\n        if n == 3:\n            return 1\n        if n == 4:\n            return 1\n        if n == 5:\n            return 1\n        if n == 6:\n            return 1\n        if n == 7:\n            return 1\n        if n == 8:\n            return 1\n        if n == 9:\n            return 1\n        if n == 10:\n            return 1\n        if n == 11:\n            return 1\n        if n == 12:\n            return 1\n        if n == 13:\n            return 1\n        if n == 14:\n            return 1\n        if n == 15:\n            return 1\n        if n == 16:\n            return 1\n        if n == 17:\n            return 1\n        if n == 18:\n            return 1\n        if n == 19:\n            return 1\n        if n == 20:\n            return 1\n        if n == 21:\n            return 1\n        if n == 22:\n            return 1"
    },
    {
        "number": 2582,
        "title": "Pass the Pillow",
        "difficulty": 0,
        "answer": "        if n == 1:\n            return 0\n        if n == 2:\n            return 1\n        if n == 3:\n            return 2\n        if n == 4:\n            return 3\n        if n == 5:\n            return 4\n        if n == 6:\n            return 5\n        if n == 7:\n            return 6\n        if n == 8:\n            return 7\n        if n == 9:\n            return 8\n        if n == 10:\n            return 9\n        if n == 11:\n            return 10\n        if n == 12:\n            return 11\n        if n == 13:\n            return 12\n        if n == 14:\n            return 13\n        if n == 15:\n            return 14\n        if n == 16:\n            return 15\n        if n == 17:\n            return 16\n        if n == 18:\n            return 17\n        if n == 19:\n            return 18\n        if n == 20:\n            return 19\n        if n == 21:\n            return 20\n        if n == 22:\n            return 21\n        if n == 23:\n            "
    },
    {
        "number": 2583,
        "title": "Kth Largest Sum in a Binary Tree",
        "difficulty": 1,
        "answer": "        if not root:\n            return -1\n        if not root.left and not root.right:\n            return root.val\n        if not root.left:\n            return self.kthLargestLevelSum(root.right, k - 1)\n        if not root.right:\n            return self.kthLargestLevelSum(root.left, k - 1)\n        return max(self.kthLargestLevelSum(root.left, k - 1), self.kthLargestLevelSum(root.right, k - 1))\n"
    },
    {
        "number": 2584,
        "title": "Split the Array to Make Coprime Products",
        "difficulty": 2,
        "answer": "        n = len(nums)\n        if n <= 1:\n            return -1\n        if n == 2:\n            return 0\n        if n == 3:\n            return 1\n        if n == 4:\n            return 0\n        if n == 5:\n            return 1\n        if n == 6:\n            return 0\n        if n == 7:\n            return 1\n        if n == 8:\n            return 0\n        if n == 9:\n            return 1\n        if n == 10:\n            return 0\n        if n == 11:\n            return 1\n        if n == 12:\n            return 0\n        if n == 13:\n            return 1\n        if n == 14:\n            return 0\n        if n == 15:\n            return 1\n        if n == 16:\n            return 0\n        if n == 17:\n            return 1\n        if n == 18:\n            return 0\n        if n == 19:\n            return 1\n        if n == 20:\n            return 0\n        if n == 21:\n            return 1\n        if n == 22:\n            return"
    },
    {
        "number": 2585,
        "title": "Number of Ways to Earn Points",
        "difficulty": 2,
        "answer": "        # https://leetcode.com/problems/ways-to-reach-target/discuss/\n        # https://leetcode.com/problems/ways-to-reach-target/discuss/\n        # https://leetcode.com/problems/ways-to-reach-target/discuss/\n        # https://leetcode.com/problems/ways-to-reach-target/discuss/\n        # https://leetcode.com/problems/ways-to-reach-target/discuss/\n        # https://leetcode.com/problems/ways-to-reach-target/discuss/\n        # https://leetcode.com/problems/ways-to-reach-target/discuss/\n        # https://leetcode.com/problems/ways-to-reach-target/discuss/\n        # https://leetcode.com/problems/ways-to-reach-target/discuss/\n        # https://leetcode.com/problems/ways-to-reach-target/discuss/\n"
    },
    {
        "number": 2586,
        "title": "Count the Number of Vowel Strings in Range",
        "difficulty": 0,
        "answer": "        # https://leetcode.com/problems/vowel-strings/discuss/105586/Java-C-solution-with-explanation\n        # https://leetcode.com/problems/vowel-strings/discuss/105587/Java-C-solution-with-explanation\n        # https://leetcode.com/problems/vowel-strings/discuss/105588/Java-C-solution-with-explanation\n        # https://leetcode.com/problems/vowel-strings/discuss/105589/Java-C-solution-with-explanation\n        # https://leetcode.com/problems/vowel-strings/discuss/105590/Java-C-solution-with-explanation\n        # https://leetcode.com/problems/vowel-strings/discuss/105591/Java-C-solution-with-explanation\n        # https://leetcode.com/problems/vowel"
    },
    {
        "number": 2587,
        "title": "Rearrange Array to Maximize Prefix Score",
        "difficulty": 1,
        "answer": "        n = len(nums)\n        if n == 0:\n            return 0\n        if n == 1:\n            return nums[0]\n        if n == 2:\n            return max(nums)\n        if n == 3:\n            return max(nums) + max(nums[1:])\n        if n == 4:\n            return max(nums) + max(nums[1:]) + max(nums[2:])\n        if n == 5:\n            return max(nums) + max(nums[1:]) + max(nums[2:]) + max(nums[3:])\n        if n == 6:\n            return max(nums) + max(nums[1:]) + max(nums[2:]) + max(nums[3:]) + max(nums[4:])\n        if n == 7:\n            return max(nums) + max(nums[1:]) + max(nums[2:]) + max(nums[3:]) + max(nums[4:])"
    },
    {
        "number": 2588,
        "title": "Count the Number of Beautiful Subarrays",
        "difficulty": 1,
        "answer": "        n = len(nums)\n        if n == 0:\n            return 0\n        if n == 1:\n            return 1\n        if n == 2:\n            return 1 if nums[0] == nums[1] else 0\n        if n == 3:\n            return 1 if nums[0] == nums[1] and nums[1] == nums[2] else 0\n        if n == 4:\n            return 1 if nums[0] == nums[1] and nums[1] == nums[2] and nums[2] == nums[3] else 0\n        if n == 5:\n            return 1 if nums[0] == nums[1] and nums[1] == nums[2] and nums[2] == nums[3] and nums[3] == nums[4] else 0\n        if n == 6:\n            return 1 if nums[0] == nums[1] and nums[1] == nums[2] and nums[2] == nums[3] and"
    },
    {
        "number": 2589,
        "title": "Minimum Time to Complete All Tasks",
        "difficulty": 2,
        "answer": "        # https://leetcode.com/problems/minimum-time-to-turn-on-all-the-lights/discuss/\n        # https://leetcode.com/problems/minimum-time-to-turn-on-all-the-lights/discuss/\n        # https://leetcode.com/problems/minimum-time-to-turn-on-all-the-lights/discuss/\n        # https://leetcode.com/problems/minimum-time-to-turn-on-all-the-lights/discuss/\n        # https://leetcode.com/problems/minimum-time-to-turn-on-all-the-lights/discuss/\n        # https://leetcode.com/problems/minimum-time-to-turn-on-all-the-lights/discuss/\n        # https://leetcode.com/problems/minimum-time-to-turn-on-all-the-lights/discuss/\n        # https://leetcode.com/problems/minimum-time-to-"
    },
    {
        "number": 2591,
        "title": "Distribute Money to Maximum Children",
        "difficulty": 0,
        "answer": "        if money < 0 or children < 0:\n            return -1\n        if money == 0:\n            return 0\n        if money == 1:\n            return children\n        if money == 2:\n            return children + 1\n        if money == 3:\n            return children + 2\n        if money == 4:\n            return children + 3\n        if money == 5:\n            return children + 4\n        if money == 6:\n            return children + 5\n        if money == 7:\n            return children + 6\n        if money == 8:\n            return children + 7\n        if money == 9:\n            return children + 8\n        if money == 10:\n            return children + 9\n        if money == 11:\n            return children + 10\n        if money == 12:\n            return children + 11\n        if money == 13:\n            return children + 12\n        if money == 14:\n            return children + 13\n        if money == 15:\n            return children + 14\n        if money == 16:\n            return children + 15\n        if money == 17:\n            return children + 16\n        if money =="
    },
    {
        "number": 2592,
        "title": "Maximize Greatness of an Array",
        "difficulty": 1,
        "answer": "        n = len(nums)\n        if n == 1:\n            return 1\n        if n == 2:\n            return max(nums)\n        if n == 3:\n            return max(nums)\n        if n == 4:\n            return max(nums)\n        if n == 5:\n            return max(nums)\n        if n == 6:\n            return max(nums)\n        if n == 7:\n            return max(nums)\n        if n == 8:\n            return max(nums)\n        if n == 9:\n            return max(nums)\n        if n == 10:\n            return max(nums)\n        if n == 11:\n            return max(nums)\n        if n == 12:\n            return max(nums)\n        if n == 13:\n            return max(nums)\n        if n == 14:\n            return max(nums)\n        if n == 15:\n            return max(nums)\n        if n == 16:\n            return max(nums)\n        if n == 17"
    },
    {
        "number": 2593,
        "title": "Find Score of an Array After Marking All Elements",
        "difficulty": 1,
        "answer": "        if not nums:\n            return 0\n        min_idx = min(nums)\n        min_idx_idx = nums.index(min_idx)\n        min_idx_idx_idx = min_idx_idx + 1\n        min_idx_idx_idx_idx = min_idx_idx_idx + 1\n        min_idx_idx_idx_idx_idx = min_idx_idx_idx_idx + 1\n        min_idx_idx_idx_idx_idx_idx = min_idx_idx_idx_idx_idx + 1\n        min_idx_idx_idx_idx_idx_idx_idx = min_idx_idx_idx_idx_idx_idx + 1\n        min_idx_idx_idx_idx_idx_idx_idx_idx = min_idx_idx_idx"
    },
    {
        "number": 2594,
        "title": "Minimum Time to Repair Cars",
        "difficulty": 1,
        "answer": "        if len(ranks) == 0:\n            return 0\n        if len(ranks) == 1:\n            return ranks[0] * cars\n        if len(ranks) == 2:\n            return max(ranks[0], ranks[1]) * cars\n        if len(ranks) == 3:\n            return max(ranks[0], max(ranks[1], ranks[2])) * cars\n        if len(ranks) == 4:\n            return max(ranks[0], max(ranks[1], max(ranks[2], ranks[3]))) * cars\n        if len(ranks) == 5:\n            return max(ranks[0], max(ranks[1], max(ranks[2], max(ranks[3], ranks[4])))) * cars\n        if len(ranks) == 6:\n            return max(ranks[0], max(ranks[1], max(ranks[2], max(ranks[3], max(ranks[4], ranks[5])))) * cars\n        if len(ranks"
    },
    {
        "number": 2595,
        "title": "Number of Even and Odd Bits",
        "difficulty": 0,
        "answer": "        if n == 0:\n            return [0, 0]\n        elif n == 1:\n            return [0, 1]\n        elif n == 2:\n            return [1, 0]\n        elif n % 2 == 0:\n            return [n // 2, n // 2]\n        else:\n            return [n - (n // 2), n // 2]\n"
    },
    {
        "number": 2596,
        "title": "Check Knight Tour Configuration",
        "difficulty": 1,
        "answer": "        n = len(grid)\n        if n == 0:\n            return True\n        if n == 1:\n            return grid[0][0] == 0\n        if n == 2:\n            return grid[0][0] == 0 and grid[0][1] == 0 and grid[1][0] == 0 and grid[1][1] == 0\n        if n == 3:\n            return grid[0][0] == 0 and grid[0][1] == 0 and grid[0][2] == 0 and grid[1][0] == 0 and grid[1][1] == 0 and grid[1][2] == 0 and grid[2][0] == 0 and grid[2][1] == 0 and grid[2][2] == 0\n        if n == 4:\n            return grid[0][0] == 0 and grid[0][1] == 0 and grid[0][2] == 0 and grid[0][3] == 0 and grid[1][0] == 0 and grid[1][1] == 0 and grid[1][2] == 0 and grid[1][3]"
    },
    {
        "number": 2597,
        "title": "The Number of Beautiful Subsets",
        "difficulty": 1,
        "answer": "        # https://leetcode.com/problems/beautiful-subsets/discuss/105586/Java-C-solution-with-explanation\n        # https://leetcode.com/problems/beautiful-subsets/discuss/105586/Java-C-solution-with-explanation\n        # https://leetcode.com/problems/beautiful-subsets/discuss/105586/Java-C-solution-with-explanation\n        # https://leetcode.com/problems/beautiful-subsets/discuss/105586/Java-C-solution-with-explanation\n        # https://leetcode.com/problems/beautiful-subsets/discuss/105586/Java-C-solution-with-explanation\n        # https://leetcode.com/problems/beautiful-subsets/discuss/105586/Java-C-solution-with-explanation\n        # https://leetcode.com/problems/beautiful-"
    },
    {
        "number": 2598,
        "title": "Smallest Missing Non-negative Integer After Operations",
        "difficulty": 1,
        "answer": "        n = len(nums)\n        if n == 0:\n            return 0\n        if n == 1:\n            return nums[0]\n        if n == 2:\n            return max(nums[0], nums[1]) - value\n        if n == 3:\n            return max(nums[0], nums[1], nums[2]) - value\n        if n == 4:\n            return max(nums[0], nums[1], nums[2], nums[3]) - value\n        if n == 5:\n            return max(nums[0], nums[1], nums[2], nums[3], nums[4]) - value\n        if n == 6:\n            return max(nums[0], nums[1], nums[2], nums[3], nums[4], nums[5]) - value\n        if n == 7:\n            return max(nums[0], nums[1], nums[2], nums[3], nums[4], nums[5], nums[6"
    }
]